
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027060  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001c180  08027260  08027260  00037260  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080433e0  080433e0  000606bc  2**0
                  CONTENTS
  4 .ARM          00000008  080433e0  080433e0  000533e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080433e8  080433e8  000606bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080433e8  080433e8  000533e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080433ec  080433ec  000533ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000006bc  20000000  080433f0  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f710  200006c0  08043aac  000606c0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c800  2002fdd0  08043aac  0006fdd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000606bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000b276d  00000000  00000000  000606ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00014171  00000000  00000000  00112e57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0004b1de  00000000  00000000  00126fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003568  00000000  00000000  001721a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00007b40  00000000  00000000  00175710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000474b0  00000000  00000000  0017d250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00088f0a  00000000  00000000  001c4700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00139721  00000000  00000000  0024d60a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00386d2b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d05c  00000000  00000000  00386d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006c0 	.word	0x200006c0
 800021c:	00000000 	.word	0x00000000
 8000220:	08027248 	.word	0x08027248

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006c4 	.word	0x200006c4
 800023c:	08027248 	.word	0x08027248

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9b9 	b.w	80006a4 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96e 	b.w	80006a4 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468c      	mov	ip, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	f040 8083 	bne.w	80004f6 <__udivmoddi4+0x116>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4617      	mov	r7, r2
 80003f4:	d947      	bls.n	8000486 <__udivmoddi4+0xa6>
 80003f6:	fab2 f282 	clz	r2, r2
 80003fa:	b142      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fc:	f1c2 0020 	rsb	r0, r2, #32
 8000400:	fa24 f000 	lsr.w	r0, r4, r0
 8000404:	4091      	lsls	r1, r2
 8000406:	4097      	lsls	r7, r2
 8000408:	ea40 0c01 	orr.w	ip, r0, r1
 800040c:	4094      	lsls	r4, r2
 800040e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fbbc f6f8 	udiv	r6, ip, r8
 8000418:	fa1f fe87 	uxth.w	lr, r7
 800041c:	fb08 c116 	mls	r1, r8, r6, ip
 8000420:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000424:	fb06 f10e 	mul.w	r1, r6, lr
 8000428:	4299      	cmp	r1, r3
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x60>
 800042c:	18fb      	adds	r3, r7, r3
 800042e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000432:	f080 8119 	bcs.w	8000668 <__udivmoddi4+0x288>
 8000436:	4299      	cmp	r1, r3
 8000438:	f240 8116 	bls.w	8000668 <__udivmoddi4+0x288>
 800043c:	3e02      	subs	r6, #2
 800043e:	443b      	add	r3, r7
 8000440:	1a5b      	subs	r3, r3, r1
 8000442:	b2a4      	uxth	r4, r4
 8000444:	fbb3 f0f8 	udiv	r0, r3, r8
 8000448:	fb08 3310 	mls	r3, r8, r0, r3
 800044c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000450:	fb00 fe0e 	mul.w	lr, r0, lr
 8000454:	45a6      	cmp	lr, r4
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x8c>
 8000458:	193c      	adds	r4, r7, r4
 800045a:	f100 33ff 	add.w	r3, r0, #4294967295
 800045e:	f080 8105 	bcs.w	800066c <__udivmoddi4+0x28c>
 8000462:	45a6      	cmp	lr, r4
 8000464:	f240 8102 	bls.w	800066c <__udivmoddi4+0x28c>
 8000468:	3802      	subs	r0, #2
 800046a:	443c      	add	r4, r7
 800046c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	2600      	movs	r6, #0
 8000476:	b11d      	cbz	r5, 8000480 <__udivmoddi4+0xa0>
 8000478:	40d4      	lsrs	r4, r2
 800047a:	2300      	movs	r3, #0
 800047c:	e9c5 4300 	strd	r4, r3, [r5]
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	b902      	cbnz	r2, 800048a <__udivmoddi4+0xaa>
 8000488:	deff      	udf	#255	; 0xff
 800048a:	fab2 f282 	clz	r2, r2
 800048e:	2a00      	cmp	r2, #0
 8000490:	d150      	bne.n	8000534 <__udivmoddi4+0x154>
 8000492:	1bcb      	subs	r3, r1, r7
 8000494:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000498:	fa1f f887 	uxth.w	r8, r7
 800049c:	2601      	movs	r6, #1
 800049e:	fbb3 fcfe 	udiv	ip, r3, lr
 80004a2:	0c21      	lsrs	r1, r4, #16
 80004a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80004a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ac:	fb08 f30c 	mul.w	r3, r8, ip
 80004b0:	428b      	cmp	r3, r1
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0xe4>
 80004b4:	1879      	adds	r1, r7, r1
 80004b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0xe2>
 80004bc:	428b      	cmp	r3, r1
 80004be:	f200 80e9 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004c2:	4684      	mov	ip, r0
 80004c4:	1ac9      	subs	r1, r1, r3
 80004c6:	b2a3      	uxth	r3, r4
 80004c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80004d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004d4:	fb08 f800 	mul.w	r8, r8, r0
 80004d8:	45a0      	cmp	r8, r4
 80004da:	d907      	bls.n	80004ec <__udivmoddi4+0x10c>
 80004dc:	193c      	adds	r4, r7, r4
 80004de:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x10a>
 80004e4:	45a0      	cmp	r8, r4
 80004e6:	f200 80d9 	bhi.w	800069c <__udivmoddi4+0x2bc>
 80004ea:	4618      	mov	r0, r3
 80004ec:	eba4 0408 	sub.w	r4, r4, r8
 80004f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004f4:	e7bf      	b.n	8000476 <__udivmoddi4+0x96>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d909      	bls.n	800050e <__udivmoddi4+0x12e>
 80004fa:	2d00      	cmp	r5, #0
 80004fc:	f000 80b1 	beq.w	8000662 <__udivmoddi4+0x282>
 8000500:	2600      	movs	r6, #0
 8000502:	e9c5 0100 	strd	r0, r1, [r5]
 8000506:	4630      	mov	r0, r6
 8000508:	4631      	mov	r1, r6
 800050a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050e:	fab3 f683 	clz	r6, r3
 8000512:	2e00      	cmp	r6, #0
 8000514:	d14a      	bne.n	80005ac <__udivmoddi4+0x1cc>
 8000516:	428b      	cmp	r3, r1
 8000518:	d302      	bcc.n	8000520 <__udivmoddi4+0x140>
 800051a:	4282      	cmp	r2, r0
 800051c:	f200 80b8 	bhi.w	8000690 <__udivmoddi4+0x2b0>
 8000520:	1a84      	subs	r4, r0, r2
 8000522:	eb61 0103 	sbc.w	r1, r1, r3
 8000526:	2001      	movs	r0, #1
 8000528:	468c      	mov	ip, r1
 800052a:	2d00      	cmp	r5, #0
 800052c:	d0a8      	beq.n	8000480 <__udivmoddi4+0xa0>
 800052e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000532:	e7a5      	b.n	8000480 <__udivmoddi4+0xa0>
 8000534:	f1c2 0320 	rsb	r3, r2, #32
 8000538:	fa20 f603 	lsr.w	r6, r0, r3
 800053c:	4097      	lsls	r7, r2
 800053e:	fa01 f002 	lsl.w	r0, r1, r2
 8000542:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000546:	40d9      	lsrs	r1, r3
 8000548:	4330      	orrs	r0, r6
 800054a:	0c03      	lsrs	r3, r0, #16
 800054c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000550:	fa1f f887 	uxth.w	r8, r7
 8000554:	fb0e 1116 	mls	r1, lr, r6, r1
 8000558:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800055c:	fb06 f108 	mul.w	r1, r6, r8
 8000560:	4299      	cmp	r1, r3
 8000562:	fa04 f402 	lsl.w	r4, r4, r2
 8000566:	d909      	bls.n	800057c <__udivmoddi4+0x19c>
 8000568:	18fb      	adds	r3, r7, r3
 800056a:	f106 3cff 	add.w	ip, r6, #4294967295
 800056e:	f080 808d 	bcs.w	800068c <__udivmoddi4+0x2ac>
 8000572:	4299      	cmp	r1, r3
 8000574:	f240 808a 	bls.w	800068c <__udivmoddi4+0x2ac>
 8000578:	3e02      	subs	r6, #2
 800057a:	443b      	add	r3, r7
 800057c:	1a5b      	subs	r3, r3, r1
 800057e:	b281      	uxth	r1, r0
 8000580:	fbb3 f0fe 	udiv	r0, r3, lr
 8000584:	fb0e 3310 	mls	r3, lr, r0, r3
 8000588:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800058c:	fb00 f308 	mul.w	r3, r0, r8
 8000590:	428b      	cmp	r3, r1
 8000592:	d907      	bls.n	80005a4 <__udivmoddi4+0x1c4>
 8000594:	1879      	adds	r1, r7, r1
 8000596:	f100 3cff 	add.w	ip, r0, #4294967295
 800059a:	d273      	bcs.n	8000684 <__udivmoddi4+0x2a4>
 800059c:	428b      	cmp	r3, r1
 800059e:	d971      	bls.n	8000684 <__udivmoddi4+0x2a4>
 80005a0:	3802      	subs	r0, #2
 80005a2:	4439      	add	r1, r7
 80005a4:	1acb      	subs	r3, r1, r3
 80005a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80005aa:	e778      	b.n	800049e <__udivmoddi4+0xbe>
 80005ac:	f1c6 0c20 	rsb	ip, r6, #32
 80005b0:	fa03 f406 	lsl.w	r4, r3, r6
 80005b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80005b8:	431c      	orrs	r4, r3
 80005ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80005be:	fa01 f306 	lsl.w	r3, r1, r6
 80005c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005ca:	431f      	orrs	r7, r3
 80005cc:	0c3b      	lsrs	r3, r7, #16
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fa1f f884 	uxth.w	r8, r4
 80005d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005de:	fb09 fa08 	mul.w	sl, r9, r8
 80005e2:	458a      	cmp	sl, r1
 80005e4:	fa02 f206 	lsl.w	r2, r2, r6
 80005e8:	fa00 f306 	lsl.w	r3, r0, r6
 80005ec:	d908      	bls.n	8000600 <__udivmoddi4+0x220>
 80005ee:	1861      	adds	r1, r4, r1
 80005f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005f4:	d248      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 80005f6:	458a      	cmp	sl, r1
 80005f8:	d946      	bls.n	8000688 <__udivmoddi4+0x2a8>
 80005fa:	f1a9 0902 	sub.w	r9, r9, #2
 80005fe:	4421      	add	r1, r4
 8000600:	eba1 010a 	sub.w	r1, r1, sl
 8000604:	b2bf      	uxth	r7, r7
 8000606:	fbb1 f0fe 	udiv	r0, r1, lr
 800060a:	fb0e 1110 	mls	r1, lr, r0, r1
 800060e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000612:	fb00 f808 	mul.w	r8, r0, r8
 8000616:	45b8      	cmp	r8, r7
 8000618:	d907      	bls.n	800062a <__udivmoddi4+0x24a>
 800061a:	19e7      	adds	r7, r4, r7
 800061c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000620:	d22e      	bcs.n	8000680 <__udivmoddi4+0x2a0>
 8000622:	45b8      	cmp	r8, r7
 8000624:	d92c      	bls.n	8000680 <__udivmoddi4+0x2a0>
 8000626:	3802      	subs	r0, #2
 8000628:	4427      	add	r7, r4
 800062a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800062e:	eba7 0708 	sub.w	r7, r7, r8
 8000632:	fba0 8902 	umull	r8, r9, r0, r2
 8000636:	454f      	cmp	r7, r9
 8000638:	46c6      	mov	lr, r8
 800063a:	4649      	mov	r1, r9
 800063c:	d31a      	bcc.n	8000674 <__udivmoddi4+0x294>
 800063e:	d017      	beq.n	8000670 <__udivmoddi4+0x290>
 8000640:	b15d      	cbz	r5, 800065a <__udivmoddi4+0x27a>
 8000642:	ebb3 020e 	subs.w	r2, r3, lr
 8000646:	eb67 0701 	sbc.w	r7, r7, r1
 800064a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800064e:	40f2      	lsrs	r2, r6
 8000650:	ea4c 0202 	orr.w	r2, ip, r2
 8000654:	40f7      	lsrs	r7, r6
 8000656:	e9c5 2700 	strd	r2, r7, [r5]
 800065a:	2600      	movs	r6, #0
 800065c:	4631      	mov	r1, r6
 800065e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000662:	462e      	mov	r6, r5
 8000664:	4628      	mov	r0, r5
 8000666:	e70b      	b.n	8000480 <__udivmoddi4+0xa0>
 8000668:	4606      	mov	r6, r0
 800066a:	e6e9      	b.n	8000440 <__udivmoddi4+0x60>
 800066c:	4618      	mov	r0, r3
 800066e:	e6fd      	b.n	800046c <__udivmoddi4+0x8c>
 8000670:	4543      	cmp	r3, r8
 8000672:	d2e5      	bcs.n	8000640 <__udivmoddi4+0x260>
 8000674:	ebb8 0e02 	subs.w	lr, r8, r2
 8000678:	eb69 0104 	sbc.w	r1, r9, r4
 800067c:	3801      	subs	r0, #1
 800067e:	e7df      	b.n	8000640 <__udivmoddi4+0x260>
 8000680:	4608      	mov	r0, r1
 8000682:	e7d2      	b.n	800062a <__udivmoddi4+0x24a>
 8000684:	4660      	mov	r0, ip
 8000686:	e78d      	b.n	80005a4 <__udivmoddi4+0x1c4>
 8000688:	4681      	mov	r9, r0
 800068a:	e7b9      	b.n	8000600 <__udivmoddi4+0x220>
 800068c:	4666      	mov	r6, ip
 800068e:	e775      	b.n	800057c <__udivmoddi4+0x19c>
 8000690:	4630      	mov	r0, r6
 8000692:	e74a      	b.n	800052a <__udivmoddi4+0x14a>
 8000694:	f1ac 0c02 	sub.w	ip, ip, #2
 8000698:	4439      	add	r1, r7
 800069a:	e713      	b.n	80004c4 <__udivmoddi4+0xe4>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	e724      	b.n	80004ec <__udivmoddi4+0x10c>
 80006a2:	bf00      	nop

080006a4 <__aeabi_idiv0>:
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop

080006a8 <ADC_MultiModeDMAConvM0Cplt>:
// handle the highest priority interrupt to capture the true DMA conversion complete time (below RTOSOS level)
extern TIM_HandleTypeDef htim5;
void ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)	// adc conversion done (DMA complete)
{

	timestamp = TIM2->CNT;			// real time
 80006a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006ac:	4a07      	ldr	r2, [pc, #28]	; (80006cc <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006ae:	2100      	movs	r1, #0
	timestamp = TIM2->CNT;			// real time
 80006b0:	4807      	ldr	r0, [pc, #28]	; (80006d0 <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006b2:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006b4:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 0;
 80006b6:	6011      	str	r1, [r2, #0]
	TIM5->DIER = 0x01;
 80006b8:	2101      	movs	r1, #1
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006ba:	2219      	movs	r2, #25
	timestamp = TIM2->CNT;			// real time
 80006bc:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006be:	f8c3 1c0c 	str.w	r1, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006c2:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c6:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
}
 80006ca:	4770      	bx	lr
 80006cc:	200006e8 	.word	0x200006e8
 80006d0:	2001ae5c 	.word	0x2001ae5c

080006d4 <ADC_MultiModeDMAConvM1Cplt>:
	timestamp = TIM2->CNT;			// real time
 80006d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006d8:	4907      	ldr	r1, [pc, #28]	; (80006f8 <ADC_MultiModeDMAConvM1Cplt+0x24>)
 80006da:	2201      	movs	r2, #1
	timestamp = TIM2->CNT;			// real time
 80006dc:	4807      	ldr	r0, [pc, #28]	; (80006fc <ADC_MultiModeDMAConvM1Cplt+0x28>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006de:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	dmabufno = 1;
 80006e2:	600a      	str	r2, [r1, #0]
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006e4:	2119      	movs	r1, #25
	timestamp = TIM2->CNT;			// real time
 80006e6:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006e8:	f8c3 2c0c 	str.w	r2, [r3, #3084]	; 0xc0c
	ADC_ConvCpltCallback(hadc);
}
 80006ec:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f0:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	200006e8 	.word	0x200006e8
 80006fc:	2001ae5c 	.word	0x2001ae5c

08000700 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000700:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000702:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000704:	4807      	ldr	r0, [pc, #28]	; (8000724 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000706:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000708:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800070a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800070c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800070e:	f043 0304 	orr.w	r3, r3, #4
 8000712:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000714:	f022 fd82 	bl	802321c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000718:	4620      	mov	r0, r4
}
 800071a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800071e:	f006 bd47 	b.w	80071b0 <HAL_ADC_ErrorCallback>
 8000722:	bf00      	nop
 8000724:	0802744c 	.word	0x0802744c

08000728 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000728:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800072c:	4605      	mov	r5, r0
 800072e:	4690      	mov	r8, r2
 8000730:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000732:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000734:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000736:	460f      	mov	r7, r1
 8000738:	4699      	mov	r9, r3
	__IO uint32_t counter = 0;
 800073a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800073c:	2a01      	cmp	r2, #1
 800073e:	d903      	bls.n	8000748 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000740:	2199      	movs	r1, #153	; 0x99
 8000742:	4845      	ldr	r0, [pc, #276]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000744:	f003 fafa 	bl	8003d3c <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000748:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800074a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800074e:	d17a      	bne.n	8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x11e>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000750:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000754:	2b01      	cmp	r3, #1
 8000756:	d903      	bls.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000758:	219b      	movs	r1, #155	; 0x9b
 800075a:	483f      	ldr	r0, [pc, #252]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800075c:	f003 faee 	bl	8003d3c <assert_failed>
	__HAL_LOCK(hadc);
 8000760:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000764:	2b01      	cmp	r3, #1
 8000766:	d073      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x128>
 8000768:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800076a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800076c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000770:	68b3      	ldr	r3, [r6, #8]
 8000772:	07d9      	lsls	r1, r3, #31
 8000774:	d414      	bmi.n	80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000776:	4b39      	ldr	r3, [pc, #228]	; (800085c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000778:	4939      	ldr	r1, [pc, #228]	; (8000860 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800077a:	681b      	ldr	r3, [r3, #0]
		__HAL_ADC_ENABLE(hadc);
 800077c:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800077e:	fba1 1303 	umull	r1, r3, r1, r3
		__HAL_ADC_ENABLE(hadc);
 8000782:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000788:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800078a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800078e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 8000790:	9b03      	ldr	r3, [sp, #12]
 8000792:	b12b      	cbz	r3, 80007a0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 8000794:	9c03      	ldr	r4, [sp, #12]
 8000796:	3c01      	subs	r4, #1
 8000798:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 800079a:	9803      	ldr	r0, [sp, #12]
 800079c:	2800      	cmp	r0, #0
 800079e:	d1f9      	bne.n	8000794 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007a0:	68b3      	ldr	r3, [r6, #8]
 80007a2:	07da      	lsls	r2, r3, #31
 80007a4:	d544      	bpl.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
		ADC_STATE_CLR_SET(hadc->State,
 80007a6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007a8:	4b2e      	ldr	r3, [pc, #184]	; (8000864 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007aa:	4013      	ands	r3, r2
 80007ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007b0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007b2:	6873      	ldr	r3, [r6, #4]
 80007b4:	055b      	lsls	r3, r3, #21
 80007b6:	d505      	bpl.n	80007c4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007b8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007c2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007c6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007ca:	d03a      	beq.n	8000842 <HAL_ADCEx_MultiModeStart_DBDMA+0x11a>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007cc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007ce:	f023 0306 	bic.w	r3, r3, #6
 80007d2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007d6:	2300      	movs	r3, #0
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007d8:	4923      	ldr	r1, [pc, #140]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007da:	f06f 0202 	mvn.w	r2, #2
		__HAL_UNLOCK(hadc);
 80007de:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007e2:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	e9c0 130f 	strd	r1, r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007e8:	4b20      	ldr	r3, [pc, #128]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ea:	4921      	ldr	r1, [pc, #132]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007ec:	64c3      	str	r3, [r0, #76]	; 0x4c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007ee:	6441      	str	r1, [r0, #68]	; 0x44
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007f0:	6032      	str	r2, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f2:	6873      	ldr	r3, [r6, #4]
			ADC->CCR |= ADC_CCR_DDS;
 80007f4:	4a1f      	ldr	r2, [pc, #124]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80007f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80007fa:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 80007fc:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000800:	b1d3      	cbz	r3, 8000838 <HAL_ADCEx_MultiModeStart_DBDMA+0x110>
			ADC->CCR |= ADC_CCR_DDS;
 8000802:	6853      	ldr	r3, [r2, #4]
 8000804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000808:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800080a:	4643      	mov	r3, r8
 800080c:	463a      	mov	r2, r7
 800080e:	491a      	ldr	r1, [pc, #104]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000810:	f8cd 9000 	str.w	r9, [sp]
 8000814:	f007 fe1a 	bl	800844c <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000818:	682b      	ldr	r3, [r5, #0]
 800081a:	6898      	ldr	r0, [r3, #8]
 800081c:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8000820:	d106      	bne.n	8000830 <HAL_ADCEx_MultiModeStart_DBDMA+0x108>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000828:	609a      	str	r2, [r3, #8]
}
 800082a:	b005      	add	sp, #20
 800082c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 8000830:	2000      	movs	r0, #0
}
 8000832:	b005      	add	sp, #20
 8000834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000838:	6853      	ldr	r3, [r2, #4]
 800083a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800083e:	6053      	str	r3, [r2, #4]
 8000840:	e7e3      	b.n	800080a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000842:	646b      	str	r3, [r5, #68]	; 0x44
 8000844:	e7c6      	b.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000846:	219a      	movs	r1, #154	; 0x9a
 8000848:	4803      	ldr	r0, [pc, #12]	; (8000858 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800084a:	f003 fa77 	bl	8003d3c <assert_failed>
 800084e:	e77f      	b.n	8000750 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 8000850:	2002      	movs	r0, #2
}
 8000852:	b005      	add	sp, #20
 8000854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000858:	08027464 	.word	0x08027464
 800085c:	2000027c 	.word	0x2000027c
 8000860:	431bde83 	.word	0x431bde83
 8000864:	fffff8fe 	.word	0xfffff8fe
 8000868:	080006a9 	.word	0x080006a9
 800086c:	08000701 	.word	0x08000701
 8000870:	080006d5 	.word	0x080006d5
 8000874:	40012300 	.word	0x40012300
 8000878:	40012308 	.word	0x40012308

0800087c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800087c:	4b75      	ldr	r3, [pc, #468]	; (8000a54 <ADC_Conv_complete+0x1d8>)
	(*buf)[3] = timestamp;		// this may not get set until now
 800087e:	4a76      	ldr	r2, [pc, #472]	; (8000a58 <ADC_Conv_complete+0x1dc>)
	if (dmabufno == 1) {		// second buffer is ready
 8000880:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000882:	4876      	ldr	r0, [pc, #472]	; (8000a5c <ADC_Conv_complete+0x1e0>)
	if (dmabufno == 1) {		// second buffer is ready
 8000884:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000886:	4b76      	ldr	r3, [pc, #472]	; (8000a60 <ADC_Conv_complete+0x1e4>)
ADC_Conv_complete() {
 8000888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800088c:	681f      	ldr	r7, [r3, #0]
ADC_Conv_complete() {
 800088e:	b087      	sub	sp, #28
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000890:	4b74      	ldr	r3, [pc, #464]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000892:	4d75      	ldr	r5, [pc, #468]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000894:	bf08      	it	eq
 8000896:	f507 67b8 	addeq.w	r7, r7, #1472	; 0x5c0
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089a:	781b      	ldrb	r3, [r3, #0]
	(*buf)[3] = timestamp;		// this may not get set until now
 800089c:	6814      	ldr	r4, [r2, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800089e:	9305      	str	r3, [sp, #20]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 80008a6:	4a71      	ldr	r2, [pc, #452]	; (8000a6c <ADC_Conv_complete+0x1f0>)
 80008a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
	if (sigsend) {		// oops overrun
 80008ac:	f8df a208 	ldr.w	sl, [pc, #520]	; 8000ab8 <ADC_Conv_complete+0x23c>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b0:	7811      	ldrb	r1, [r2, #0]
 80008b2:	7802      	ldrb	r2, [r0, #0]
 80008b4:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b8:	60fc      	str	r4, [r7, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	f002 0103 	and.w	r1, r2, #3
 80008be:	3201      	adds	r2, #1
 80008c0:	430b      	orrs	r3, r1
 80008c2:	7002      	strb	r2, [r0, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c4:	f8d5 108c 	ldr.w	r1, [r5, #140]	; 0x8c
	if (sigsend) {		// oops overrun
 80008c8:	f8da 2000 	ldr.w	r2, [sl]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008cc:	e9c7 3101 	strd	r3, r1, [r7, #4]
	if (sigsend) {		// oops overrun
 80008d0:	b12a      	cbz	r2, 80008de <ADC_Conv_complete+0x62>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008d4:	2200      	movs	r2, #0
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008d6:	3301      	adds	r3, #1
 80008d8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008da:	f8ca 2000 	str.w	r2, [sl]
 80008de:	4a64      	ldr	r2, [pc, #400]	; (8000a70 <ADC_Conv_complete+0x1f4>)
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80008e0:	2500      	movs	r5, #0
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <ADC_Conv_complete+0x1f8>)
 80008e4:	370e      	adds	r7, #14
 80008e6:	f8d2 c000 	ldr.w	ip, [r2]
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	4a62      	ldr	r2, [pc, #392]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 80008ee:	4c63      	ldr	r4, [pc, #396]	; (8000a7c <ADC_Conv_complete+0x200>)
 80008f0:	6810      	ldr	r0, [r2, #0]
 80008f2:	4963      	ldr	r1, [pc, #396]	; (8000a80 <ADC_Conv_complete+0x204>)
 80008f4:	4a63      	ldr	r2, [pc, #396]	; (8000a84 <ADC_Conv_complete+0x208>)
 80008f6:	9303      	str	r3, [sp, #12]
 80008f8:	4b63      	ldr	r3, [pc, #396]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80008fa:	8824      	ldrh	r4, [r4, #0]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	6812      	ldr	r2, [r2, #0]
 8000900:	f9b1 1000 	ldrsh.w	r1, [r1]
 8000904:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 8000abc <ADC_Conv_complete+0x240>
 8000908:	f8df 81b4 	ldr.w	r8, [pc, #436]	; 8000ac0 <ADC_Conv_complete+0x244>
 800090c:	9504      	str	r5, [sp, #16]
 800090e:	9402      	str	r4, [sp, #8]
 8000910:	9301      	str	r3, [sp, #4]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000912:	f005 041f 	and.w	r4, r5, #31
		thissamp = (*adcbuf16)[i];
 8000916:	f837 3f02 	ldrh.w	r3, [r7, #2]!
		lastmeanwindiff = abs(meanwindiff);
 800091a:	2900      	cmp	r1, #0
 800091c:	f105 0501 	add.w	r5, r5, #1
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 8000920:	f839 b014 	ldrh.w	fp, [r9, r4, lsl #1]
 8000924:	4418      	add	r0, r3
		lastmeanwindiff = abs(meanwindiff);
 8000926:	bfb8      	it	lt
 8000928:	4249      	neglt	r1, r1
		lastsamp[j] = thissamp;			// save last samples
 800092a:	f829 3014 	strh.w	r3, [r9, r4, lsl #1]
		wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 800092e:	eba0 000b 	sub.w	r0, r0, fp
		adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 8000932:	449c      	add	ip, r3
		lastmeanwindiff = abs(meanwindiff);
 8000934:	fa1f fe81 	uxth.w	lr, r1
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000938:	9903      	ldr	r1, [sp, #12]
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 800093a:	f858 6024 	ldr.w	r6, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800093e:	eb0e 0b01 	add.w	fp, lr, r1
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 8000942:	f340 114f 	sbfx	r1, r0, #5, #16
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000946:	1b92      	subs	r2, r2, r6
		if (sigsend)
 8000948:	f8da 6000 	ldr.w	r6, [sl]
		thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 800094c:	1a5b      	subs	r3, r3, r1
 800094e:	2b00      	cmp	r3, #0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
		wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 8000954:	441a      	add	r2, r3
		meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 8000956:	f342 114f 	sbfx	r1, r2, #5, #16
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800095a:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
		windiff[j] = meanwindiff;	// store latest window mean of differences
 800095e:	f848 1024 	str.w	r1, [r8, r4, lsl #2]
		if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000962:	9c02      	ldr	r4, [sp, #8]
 8000964:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 8000968:	b29b      	uxth	r3, r3
 800096a:	191c      	adds	r4, r3, r4
 800096c:	455c      	cmp	r4, fp
 800096e:	dd04      	ble.n	800097a <ADC_Conv_complete+0xfe>
			pretrigcnt++;
 8000970:	9c01      	ldr	r4, [sp, #4]
 8000972:	3401      	adds	r4, #1
 8000974:	9401      	str	r4, [sp, #4]
 8000976:	2401      	movs	r4, #1
 8000978:	9404      	str	r4, [sp, #16]
		if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 800097a:	b926      	cbnz	r6, 8000986 <ADC_Conv_complete+0x10a>
 800097c:	455b      	cmp	r3, fp
 800097e:	dd02      	ble.n	8000986 <ADC_Conv_complete+0x10a>
			sigsend = 1; // the real trigger
 8000980:	2301      	movs	r3, #1
 8000982:	f8ca 3000 	str.w	r3, [sl]
	for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000986:	f5b5 7f36 	cmp.w	r5, #728	; 0x2d8
 800098a:	d1c2      	bne.n	8000912 <ADC_Conv_complete+0x96>
 800098c:	4c38      	ldr	r4, [pc, #224]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 800098e:	4b3f      	ldr	r3, [pc, #252]	; (8000a8c <ADC_Conv_complete+0x210>)
 8000990:	f8c4 c000 	str.w	ip, [r4]
 8000994:	4c38      	ldr	r4, [pc, #224]	; (8000a78 <ADC_Conv_complete+0x1fc>)
 8000996:	f8a3 e000 	strh.w	lr, [r3]
 800099a:	6020      	str	r0, [r4, #0]
 800099c:	4839      	ldr	r0, [pc, #228]	; (8000a84 <ADC_Conv_complete+0x208>)
 800099e:	9b04      	ldr	r3, [sp, #16]
 80009a0:	6002      	str	r2, [r0, #0]
 80009a2:	4a37      	ldr	r2, [pc, #220]	; (8000a80 <ADC_Conv_complete+0x204>)
 80009a4:	8011      	strh	r1, [r2, #0]
 80009a6:	b113      	cbz	r3, 80009ae <ADC_Conv_complete+0x132>
 80009a8:	4b37      	ldr	r3, [pc, #220]	; (8000a88 <ADC_Conv_complete+0x20c>)
 80009aa:	9a01      	ldr	r2, [sp, #4]
 80009ac:	601a      	str	r2, [r3, #0]
	if (sigsend) {
 80009ae:	f8da 3000 	ldr.w	r3, [sl]
 80009b2:	b343      	cbz	r3, 8000a06 <ADC_Conv_complete+0x18a>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 80009b4:	4b36      	ldr	r3, [pc, #216]	; (8000a90 <ADC_Conv_complete+0x214>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d02d      	beq.n	8000a18 <ADC_Conv_complete+0x19c>
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009bc:	4c2a      	ldr	r4, [pc, #168]	; (8000a68 <ADC_Conv_complete+0x1ec>)
		sigprev = 1;	// remember this trigger for next packet
 80009be:	2001      	movs	r0, #1
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c0:	4934      	ldr	r1, [pc, #208]	; (8000a94 <ADC_Conv_complete+0x218>)
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 80009c4:	6018      	str	r0, [r3, #0]
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009c6:	230f      	movs	r3, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009c8:	4402      	add	r2, r0
		ledhang = 15;		// 15 x 10ms in Idle proc
 80009ca:	600b      	str	r3, [r1, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 80009cc:	67e2      	str	r2, [r4, #124]	; 0x7c
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 80009ce:	4a32      	ldr	r2, [pc, #200]	; (8000a98 <ADC_Conv_complete+0x21c>)
 80009d0:	6813      	ldr	r3, [r2, #0]
 80009d2:	3301      	adds	r3, #1
 80009d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009d8:	6013      	str	r3, [r2, #0]
 80009da:	d10b      	bne.n	80009f4 <ADC_Conv_complete+0x178>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009dc:	492f      	ldr	r1, [pc, #188]	; (8000a9c <ADC_Conv_complete+0x220>)
 80009de:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <ADC_Conv_complete+0x224>)
 80009e4:	fba1 1303 	umull	r1, r3, r1, r3
		adcbgbaseacc = 0;
 80009e8:	4c21      	ldr	r4, [pc, #132]	; (8000a70 <ADC_Conv_complete+0x1f4>)
 80009ea:	2100      	movs	r1, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009ec:	0b9b      	lsrs	r3, r3, #14
		adcbgbaseacc = 0;
 80009ee:	6021      	str	r1, [r4, #0]
		samplecnt = 0;
 80009f0:	6011      	str	r1, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 80009f2:	6003      	str	r3, [r0, #0]
	if (xTaskToNotify == NULL) {
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <ADC_Conv_complete+0x228>)
 80009f6:	681a      	ldr	r2, [r3, #0]
 80009f8:	b332      	cbz	r2, 8000a48 <ADC_Conv_complete+0x1cc>
	} else if (sigsend) {
 80009fa:	f8da 2000 	ldr.w	r2, [sl]
 80009fe:	b982      	cbnz	r2, 8000a22 <ADC_Conv_complete+0x1a6>
}
 8000a00:	b007      	add	sp, #28
 8000a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000a06:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <ADC_Conv_complete+0x214>)
 8000a08:	681a      	ldr	r2, [r3, #0]
 8000a0a:	b112      	cbz	r2, 8000a12 <ADC_Conv_complete+0x196>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <ADC_Conv_complete+0x22c>)
 8000a0e:	2101      	movs	r1, #1
 8000a10:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	e7da      	b.n	80009ce <ADC_Conv_complete+0x152>
			++adcbatchid; // start a new adc batch number
 8000a18:	9a05      	ldr	r2, [sp, #20]
 8000a1a:	4912      	ldr	r1, [pc, #72]	; (8000a64 <ADC_Conv_complete+0x1e8>)
 8000a1c:	3201      	adds	r2, #1
 8000a1e:	700a      	strb	r2, [r1, #0]
 8000a20:	e7cc      	b.n	80009bc <ADC_Conv_complete+0x140>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a22:	4c22      	ldr	r4, [pc, #136]	; (8000aac <ADC_Conv_complete+0x230>)
 8000a24:	6818      	ldr	r0, [r3, #0]
 8000a26:	4621      	mov	r1, r4
 8000a28:	f014 fb80 	bl	801512c <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a2c:	6823      	ldr	r3, [r4, #0]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0e6      	beq.n	8000a00 <ADC_Conv_complete+0x184>
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <ADC_Conv_complete+0x234>)
 8000a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	f3bf 8f4f 	dsb	sy
 8000a3e:	f3bf 8f6f 	isb	sy
}
 8000a42:	b007      	add	sp, #28
 8000a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a48:	481a      	ldr	r0, [pc, #104]	; (8000ab4 <ADC_Conv_complete+0x238>)
}
 8000a4a:	b007      	add	sp, #28
 8000a4c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a50:	f022 bbe4 	b.w	802321c <puts>
 8000a54:	200006e8 	.word	0x200006e8
 8000a58:	2001ae5c 	.word	0x2001ae5c
 8000a5c:	200006e4 	.word	0x200006e4
 8000a60:	2001ae70 	.word	0x2001ae70
 8000a64:	200006dc 	.word	0x200006dc
 8000a68:	2001adc0 	.word	0x2001adc0
 8000a6c:	20000748 	.word	0x20000748
 8000a70:	200006e0 	.word	0x200006e0
 8000a74:	20000002 	.word	0x20000002
 8000a78:	200007e0 	.word	0x200007e0
 8000a7c:	20000000 	.word	0x20000000
 8000a80:	20000740 	.word	0x20000740
 8000a84:	2000075c 	.word	0x2000075c
 8000a88:	20000744 	.word	0x20000744
 8000a8c:	200006f8 	.word	0x200006f8
 8000a90:	20000754 	.word	0x20000754
 8000a94:	2000073c 	.word	0x2000073c
 8000a98:	2000074c 	.word	0x2000074c
 8000a9c:	16816817 	.word	0x16816817
 8000aa0:	200006ec 	.word	0x200006ec
 8000aa4:	200007e8 	.word	0x200007e8
 8000aa8:	20000750 	.word	0x20000750
 8000aac:	200007e4 	.word	0x200007e4
 8000ab0:	e000ed04 	.word	0xe000ed04
 8000ab4:	0802747c 	.word	0x0802747c
 8000ab8:	20000758 	.word	0x20000758
 8000abc:	200006fc 	.word	0x200006fc
 8000ac0:	20000760 	.word	0x20000760

08000ac4 <startadc>:
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000ac4:	4b2d      	ldr	r3, [pc, #180]	; (8000b7c <startadc+0xb8>)
	statuspkt.adcpktssent = 0;
 8000ac6:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000ac8:	492d      	ldr	r1, [pc, #180]	; (8000b80 <startadc+0xbc>)

	printf("Starting ADC DMA\n");
 8000aca:	482e      	ldr	r0, [pc, #184]	; (8000b84 <startadc+0xc0>)
void startadc() {
 8000acc:	b510      	push	{r4, lr}
	statuspkt.clktrim = 108000000;
 8000ace:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ad0:	4c2d      	ldr	r4, [pc, #180]	; (8000b88 <startadc+0xc4>)
	statuspkt.adcpktssent = 0;
 8000ad2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000ad6:	f022 fba1 	bl	802321c <puts>
	osDelay(100);
 8000ada:	2064      	movs	r0, #100	; 0x64
 8000adc:	f012 fda2 	bl	8013624 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000ae0:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000ae4:	f014 fffc 	bl	8015ae0 <pvPortMalloc>
 8000ae8:	6020      	str	r0, [r4, #0]
	if (pktbuf == NULL) {
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d041      	beq.n	8000b72 <startadc+0xae>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000aee:	0783      	lsls	r3, r0, #30
 8000af0:	d12d      	bne.n	8000b4e <startadc+0x8a>
 8000af2:	1f03      	subs	r3, r0, #4
 8000af4:	f200 51bc 	addw	r1, r0, #1468	; 0x5bc

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000af8:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000afc:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
 8000b00:	428b      	cmp	r3, r1
 8000b02:	d1fb      	bne.n	8000afc <startadc+0x38>
 8000b04:	f600 317c 	addw	r1, r0, #2940	; 0xb7c
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b08:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000b0c:	f843 2f04 	str.w	r2, [r3, #4]!
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d1fb      	bne.n	8000b0c <startadc+0x48>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b14:	f500 62ba 	add.w	r2, r0, #1488	; 0x5d0
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b18:	f100 0110 	add.w	r1, r0, #16
 8000b1c:	481b      	ldr	r0, [pc, #108]	; (8000b8c <startadc+0xc8>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b1e:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b22:	4c1b      	ldr	r4, [pc, #108]	; (8000b90 <startadc+0xcc>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b24:	6001      	str	r1, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b26:	481b      	ldr	r0, [pc, #108]	; (8000b94 <startadc+0xd0>)
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b28:	6022      	str	r2, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b2a:	f7ff fdfd 	bl	8000728 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b2e:	4b1a      	ldr	r3, [pc, #104]	; (8000b98 <startadc+0xd4>)
 8000b30:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b32:	481a      	ldr	r0, [pc, #104]	; (8000b9c <startadc+0xd8>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b34:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b36:	f006 fa8d 	bl	8007054 <HAL_ADC_Start>
 8000b3a:	b9b0      	cbnz	r0, 8000b6a <startadc+0xa6>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b3c:	4818      	ldr	r0, [pc, #96]	; (8000ba0 <startadc+0xdc>)
 8000b3e:	f006 fa89 	bl	8007054 <HAL_ADC_Start>
 8000b42:	b970      	cbnz	r0, 8000b62 <startadc+0x9e>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <startadc+0xd0>)
 8000b46:	f006 fa85 	bl	8007054 <HAL_ADC_Start>
 8000b4a:	b928      	cbnz	r0, 8000b58 <startadc+0x94>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b4c:	bd10      	pop	{r4, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b4e:	4815      	ldr	r0, [pc, #84]	; (8000ba4 <startadc+0xe0>)
 8000b50:	f022 fb64 	bl	802321c <puts>
 8000b54:	6820      	ldr	r0, [r4, #0]
 8000b56:	e7cc      	b.n	8000af2 <startadc+0x2e>
		printf("ADC1 failed start\r\n");
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <startadc+0xe4>)
}
 8000b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		printf("ADC1 failed start\r\n");
 8000b5e:	f022 bb5d 	b.w	802321c <puts>
		printf("ADC2 failed start\r\n");
 8000b62:	4812      	ldr	r0, [pc, #72]	; (8000bac <startadc+0xe8>)
 8000b64:	f022 fb5a 	bl	802321c <puts>
 8000b68:	e7ec      	b.n	8000b44 <startadc+0x80>
		printf("ADC3 failed start\r\n");
 8000b6a:	4811      	ldr	r0, [pc, #68]	; (8000bb0 <startadc+0xec>)
 8000b6c:	f022 fb56 	bl	802321c <puts>
 8000b70:	e7e4      	b.n	8000b3c <startadc+0x78>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000b72:	4810      	ldr	r0, [pc, #64]	; (8000bb4 <startadc+0xf0>)
 8000b74:	f022 fb52 	bl	802321c <puts>
		for (;;)
 8000b78:	e7fe      	b.n	8000b78 <startadc+0xb4>
 8000b7a:	bf00      	nop
 8000b7c:	2001adc0 	.word	0x2001adc0
 8000b80:	066ff300 	.word	0x066ff300
 8000b84:	08027490 	.word	0x08027490
 8000b88:	2001ae70 	.word	0x2001ae70
 8000b8c:	2001ae74 	.word	0x2001ae74
 8000b90:	2001ae68 	.word	0x2001ae68
 8000b94:	2001b504 	.word	0x2001b504
 8000b98:	2001ae78 	.word	0x2001ae78
 8000b9c:	2001b54c 	.word	0x2001b54c
 8000ba0:	2001b144 	.word	0x2001b144
 8000ba4:	080274cc 	.word	0x080274cc
 8000ba8:	0802752c 	.word	0x0802752c
 8000bac:	08027518 	.word	0x08027518
 8000bb0:	08027504 	.word	0x08027504
 8000bb4:	080274a4 	.word	0x080274a4

08000bb8 <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <vApplicationMallocFailedHook>:
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop

08000bc4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000bc4:	b430      	push	{r4, r5}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bc6:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bca:	4d03      	ldr	r5, [pc, #12]	; (8000bd8 <vApplicationGetIdleTaskMemory+0x14>)
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bcc:	4c03      	ldr	r4, [pc, #12]	; (8000bdc <vApplicationGetIdleTaskMemory+0x18>)
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000bce:	6005      	str	r5, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000bd0:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000bd2:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bd4:	bc30      	pop	{r4, r5}
 8000bd6:	4770      	bx	lr
 8000bd8:	20000bec 	.word	0x20000bec
 8000bdc:	200007ec 	.word	0x200007ec

08000be0 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000be0:	b430      	push	{r4, r5}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000be2:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000be6:	4d03      	ldr	r5, [pc, #12]	; (8000bf4 <vApplicationGetTimerTaskMemory+0x14>)
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000be8:	4c03      	ldr	r4, [pc, #12]	; (8000bf8 <vApplicationGetTimerTaskMemory+0x18>)
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000bea:	6005      	str	r5, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000bec:	600c      	str	r4, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000bee:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000bf0:	bc30      	pop	{r4, r5}
 8000bf2:	4770      	bx	lr
 8000bf4:	20001440 	.word	0x20001440
 8000bf8:	20000c40 	.word	0x20000c40

08000bfc <hc_sent>:
// lwip calls this function when the remote host has successfully received data (ack)
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
	struct hc_state *state = arg;

	// Reset connection timeout
	state->ConnectionTimeout = 0;
 8000bfc:	2200      	movs	r2, #0
static err_t hc_sent(void *arg, struct tcp_pcb *pcb, u16_t len) {
 8000bfe:	4603      	mov	r3, r0

	return (ERR_OK);
}
 8000c00:	4610      	mov	r0, r2
	state->ConnectionTimeout = 0;
 8000c02:	749a      	strb	r2, [r3, #18]
}
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <hc_recv>:
	if ((err == ERR_OK) && (p != NULL)) {
 8000c08:	fab3 f383 	clz	r3, r3
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((err == ERR_OK) && (p != NULL)) {
 8000c10:	095b      	lsrs	r3, r3, #5
err_t hc_recv(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err) {
 8000c12:	b082      	sub	sp, #8
 8000c14:	4605      	mov	r5, r0
 8000c16:	460f      	mov	r7, r1
	if ((err == ERR_OK) && (p != NULL)) {
 8000c18:	4616      	mov	r6, r2
 8000c1a:	b10a      	cbz	r2, 8000c20 <hc_recv+0x18>
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d159      	bne.n	8000cd4 <hc_recv+0xcc>
	else if ((err == ERR_OK) && (p == NULL)) {
 8000c20:	bb4e      	cbnz	r6, 8000c76 <hc_recv+0x6e>
 8000c22:	b343      	cbz	r3, 8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000c24:	8a2b      	ldrh	r3, [r5, #16]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	f000 8098 	beq.w	8000d5c <hc_recv+0x154>
 8000c2c:	2200      	movs	r2, #0
	hc_errormsg errormsg = GEN_ERROR;
 8000c2e:	2604      	movs	r6, #4
 8000c30:	68e8      	ldr	r0, [r5, #12]
 8000c32:	e002      	b.n	8000c3a <hc_recv+0x32>
		for (i = 0; i < state->Len; i++) {
 8000c34:	3201      	adds	r2, #1
 8000c36:	4293      	cmp	r3, r2
 8000c38:	dd0c      	ble.n	8000c54 <hc_recv+0x4c>
			if (errormsg == GEN_ERROR) {
 8000c3a:	2e04      	cmp	r6, #4
 8000c3c:	d01f      	beq.n	8000c7e <hc_recv+0x76>
				if ((*(state->RecvData + i) == '\r') && (*(state->RecvData + ++i) == '\n')
 8000c3e:	5c84      	ldrb	r4, [r0, r2]
 8000c40:	2c0d      	cmp	r4, #13
 8000c42:	d1f7      	bne.n	8000c34 <hc_recv+0x2c>
 8000c44:	1c51      	adds	r1, r2, #1
 8000c46:	5c44      	ldrb	r4, [r0, r1]
 8000c48:	2c0a      	cmp	r4, #10
 8000c4a:	d027      	beq.n	8000c9c <hc_recv+0x94>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c4c:	460a      	mov	r2, r1
		for (i = 0; i < state->Len; i++) {
 8000c4e:	3201      	adds	r2, #1
 8000c50:	4293      	cmp	r3, r2
 8000c52:	dcf2      	bgt.n	8000c3a <hc_recv+0x32>
	char *page = NULL;
 8000c54:	2400      	movs	r4, #0
		if (errormsg == OK) {
 8000c56:	b9d6      	cbnz	r6, 8000c8e <hc_recv+0x86>
			(*state->ReturnPage)(state->Num, OK, page, state->Len);
 8000c58:	4622      	mov	r2, r4
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	696c      	ldr	r4, [r5, #20]
 8000c5e:	7828      	ldrb	r0, [r5, #0]
 8000c60:	47a0      	blx	r4
	if (pcb != NULL) {
 8000c62:	b117      	cbz	r7, 8000c6a <hc_recv+0x62>
		tcp_close(pcb);
 8000c64:	4638      	mov	r0, r7
 8000c66:	f019 fdef 	bl	801a848 <tcp_close>
		free(state->RecvData);
 8000c6a:	68e8      	ldr	r0, [r5, #12]
 8000c6c:	f021 fa8a 	bl	8022184 <free>
		free(state);
 8000c70:	4628      	mov	r0, r5
 8000c72:	f021 fa87 	bl	8022184 <free>
}
 8000c76:	2000      	movs	r0, #0
 8000c78:	b002      	add	sp, #8
 8000c7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000c7e:	5c81      	ldrb	r1, [r0, r2]
 8000c80:	2932      	cmp	r1, #50	; 0x32
 8000c82:	d05c      	beq.n	8000d3e <hc_recv+0x136>
				if (*(state->RecvData + i) == '\n')
 8000c84:	290a      	cmp	r1, #10
 8000c86:	d055      	beq.n	8000d34 <hc_recv+0x12c>
		for (i = 0; i < state->Len; i++) {
 8000c88:	3201      	adds	r2, #1
 8000c8a:	4293      	cmp	r3, r2
 8000c8c:	dcf7      	bgt.n	8000c7e <hc_recv+0x76>
			(*state->ReturnPage)(state->Num, errormsg, NULL, 0);
 8000c8e:	2300      	movs	r3, #0
 8000c90:	4631      	mov	r1, r6
 8000c92:	696c      	ldr	r4, [r5, #20]
 8000c94:	461a      	mov	r2, r3
 8000c96:	7828      	ldrb	r0, [r5, #0]
 8000c98:	47a0      	blx	r4
 8000c9a:	e7e2      	b.n	8000c62 <hc_recv+0x5a>
						&& (*(state->RecvData + ++i) == '\r') && (*(state->RecvData + ++i) == '\n')) {
 8000c9c:	1c91      	adds	r1, r2, #2
 8000c9e:	5c44      	ldrb	r4, [r0, r1]
 8000ca0:	2c0d      	cmp	r4, #13
 8000ca2:	d1d3      	bne.n	8000c4c <hc_recv+0x44>
 8000ca4:	1cd1      	adds	r1, r2, #3
 8000ca6:	5c44      	ldrb	r4, [r0, r1]
 8000ca8:	2c0a      	cmp	r4, #10
 8000caa:	d1cf      	bne.n	8000c4c <hc_recv+0x44>
					i++;
 8000cac:	3204      	adds	r2, #4
 8000cae:	9301      	str	r3, [sp, #4]
					page = malloc(strlen(state->RecvData + i));
 8000cb0:	1881      	adds	r1, r0, r2
 8000cb2:	4608      	mov	r0, r1
 8000cb4:	9100      	str	r1, [sp, #0]
 8000cb6:	f7ff facd 	bl	8000254 <strlen>
 8000cba:	4680      	mov	r8, r0
 8000cbc:	f021 fa5a 	bl	8022174 <malloc>
					strcpy(page, state->RecvData + i);
 8000cc0:	9900      	ldr	r1, [sp, #0]
 8000cc2:	f108 0201 	add.w	r2, r8, #1
					page = malloc(strlen(state->RecvData + i));
 8000cc6:	4604      	mov	r4, r0
					strcpy(page, state->RecvData + i);
 8000cc8:	f021 fa72 	bl	80221b0 <memcpy>
					break;
 8000ccc:	9b01      	ldr	r3, [sp, #4]
		if (errormsg == OK) {
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d0c2      	beq.n	8000c58 <hc_recv+0x50>
 8000cd2:	e7dc      	b.n	8000c8e <hc_recv+0x86>
		tcp_recved(pcb, p->tot_len);
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	8911      	ldrh	r1, [r2, #8]
 8000cd8:	f018 feda 	bl	8019a90 <tcp_recved>
 8000cdc:	4634      	mov	r4, r6
 8000cde:	8a29      	ldrh	r1, [r5, #16]
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000ce0:	2700      	movs	r7, #0
			state->RecvData = realloc(state->RecvData, temp_p->len + state->Len + 1);
 8000ce2:	8963      	ldrh	r3, [r4, #10]
 8000ce4:	68e8      	ldr	r0, [r5, #12]
 8000ce6:	4419      	add	r1, r3
 8000ce8:	3101      	adds	r1, #1
 8000cea:	f022 fadf 	bl	80232ac <realloc>
 8000cee:	60e8      	str	r0, [r5, #12]
			if (state->RecvData == NULL) {
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d037      	beq.n	8000d64 <hc_recv+0x15c>
			strncpy(state->RecvData + state->Len, temp_p->payload, temp_p->len);
 8000cf4:	8a2b      	ldrh	r3, [r5, #16]
 8000cf6:	8962      	ldrh	r2, [r4, #10]
 8000cf8:	6861      	ldr	r1, [r4, #4]
 8000cfa:	4418      	add	r0, r3
 8000cfc:	f023 f988 	bl	8024010 <strncpy>
			state->RecvData[temp_p->len + state->Len] = '\0';
 8000d00:	8961      	ldrh	r1, [r4, #10]
 8000d02:	68eb      	ldr	r3, [r5, #12]
 8000d04:	8a2a      	ldrh	r2, [r5, #16]
 8000d06:	440b      	add	r3, r1
 8000d08:	549f      	strb	r7, [r3, r2]
			state->Len += temp_p->len;
 8000d0a:	8963      	ldrh	r3, [r4, #10]
 8000d0c:	8a29      	ldrh	r1, [r5, #16]
			temp_p = temp_p->next;
 8000d0e:	6824      	ldr	r4, [r4, #0]
			state->Len += temp_p->len;
 8000d10:	4419      	add	r1, r3
 8000d12:	b289      	uxth	r1, r1
 8000d14:	8229      	strh	r1, [r5, #16]
		while (temp_p != NULL) {
 8000d16:	2c00      	cmp	r4, #0
 8000d18:	d1e3      	bne.n	8000ce2 <hc_recv+0xda>
			temp_p = p->next;
 8000d1a:	4630      	mov	r0, r6
 8000d1c:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d1e:	f015 f8fd 	bl	8015f1c <pbuf_free_callback>
		while (p != NULL) {
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	d0a7      	beq.n	8000c76 <hc_recv+0x6e>
			temp_p = p->next;
 8000d26:	4630      	mov	r0, r6
 8000d28:	6836      	ldr	r6, [r6, #0]
			pbuf_free_callback(p);
 8000d2a:	f015 f8f7 	bl	8015f1c <pbuf_free_callback>
		while (p != NULL) {
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d1f3      	bne.n	8000d1a <hc_recv+0x112>
 8000d32:	e7a0      	b.n	8000c76 <hc_recv+0x6e>
		for (i = 0; i < state->Len; i++) {
 8000d34:	3201      	adds	r2, #1
					errormsg = NOT_FOUND;
 8000d36:	2603      	movs	r6, #3
		for (i = 0; i < state->Len; i++) {
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	dc80      	bgt.n	8000c3e <hc_recv+0x36>
 8000d3c:	e7a7      	b.n	8000c8e <hc_recv+0x86>
				if ((*(state->RecvData + i) == '2') && (*(state->RecvData + ++i) == '0')
 8000d3e:	1c54      	adds	r4, r2, #1
 8000d40:	5d01      	ldrb	r1, [r0, r4]
 8000d42:	2930      	cmp	r1, #48	; 0x30
 8000d44:	d001      	beq.n	8000d4a <hc_recv+0x142>
 8000d46:	4622      	mov	r2, r4
 8000d48:	e79c      	b.n	8000c84 <hc_recv+0x7c>
						&& (*(state->RecvData + ++i) == '0'))
 8000d4a:	1c94      	adds	r4, r2, #2
 8000d4c:	5d01      	ldrb	r1, [r0, r4]
 8000d4e:	2930      	cmp	r1, #48	; 0x30
 8000d50:	d1f9      	bne.n	8000d46 <hc_recv+0x13e>
		for (i = 0; i < state->Len; i++) {
 8000d52:	3203      	adds	r2, #3
 8000d54:	4293      	cmp	r3, r2
 8000d56:	dd03      	ble.n	8000d60 <hc_recv+0x158>
					errormsg = OK;
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e770      	b.n	8000c3e <hc_recv+0x36>
	hc_errormsg errormsg = GEN_ERROR;
 8000d5c:	2604      	movs	r6, #4
 8000d5e:	e796      	b.n	8000c8e <hc_recv+0x86>
	char *page = NULL;
 8000d60:	2400      	movs	r4, #0
 8000d62:	e779      	b.n	8000c58 <hc_recv+0x50>
				(*state->ReturnPage)(state->Num, OUT_MEM, NULL, 0);
 8000d64:	4603      	mov	r3, r0
 8000d66:	696c      	ldr	r4, [r5, #20]
 8000d68:	7828      	ldrb	r0, [r5, #0]
 8000d6a:	2101      	movs	r1, #1
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	47a0      	blx	r4
				return (ERR_OK);
 8000d70:	e781      	b.n	8000c76 <hc_recv+0x6e>
 8000d72:	bf00      	nop

08000d74 <hc_error>:
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d74:	2300      	movs	r3, #0
static void hc_error(void *arg, err_t err) {
 8000d76:	b570      	push	{r4, r5, r6, lr}
 8000d78:	4604      	mov	r4, r0
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7a:	461a      	mov	r2, r3
static void hc_error(void *arg, err_t err) {
 8000d7c:	460d      	mov	r5, r1
	(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000d7e:	6946      	ldr	r6, [r0, #20]
 8000d80:	2104      	movs	r1, #4
 8000d82:	7800      	ldrb	r0, [r0, #0]
 8000d84:	47b0      	blx	r6
	free(state->RecvData);
 8000d86:	68e0      	ldr	r0, [r4, #12]
 8000d88:	f021 f9fc 	bl	8022184 <free>
	free(state->PostVars);
 8000d8c:	68a0      	ldr	r0, [r4, #8]
 8000d8e:	f021 f9f9 	bl	8022184 <free>
	free(state->Page);
 8000d92:	6860      	ldr	r0, [r4, #4]
 8000d94:	f021 f9f6 	bl	8022184 <free>
	free(state);
 8000d98:	4620      	mov	r0, r4
 8000d9a:	f021 f9f3 	bl	8022184 <free>
	printf("hc_error: err=%d\n", err);
 8000d9e:	4629      	mov	r1, r5
 8000da0:	4802      	ldr	r0, [pc, #8]	; (8000dac <hc_error+0x38>)
}
 8000da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printf("hc_error: err=%d\n", err);
 8000da6:	f022 b99d 	b.w	80230e4 <iprintf>
 8000daa:	bf00      	nop
 8000dac:	08027540 	.word	0x08027540

08000db0 <hc_poll>:
static err_t hc_poll(void *arg, struct tcp_pcb *pcb) {
 8000db0:	b538      	push	{r3, r4, r5, lr}
	state->ConnectionTimeout++;
 8000db2:	7c83      	ldrb	r3, [r0, #18]
 8000db4:	3301      	adds	r3, #1
 8000db6:	b2db      	uxtb	r3, r3
	if (state->ConnectionTimeout > 20) {
 8000db8:	2b14      	cmp	r3, #20
	state->ConnectionTimeout++;
 8000dba:	7483      	strb	r3, [r0, #18]
	if (state->ConnectionTimeout > 20) {
 8000dbc:	d801      	bhi.n	8000dc2 <hc_poll+0x12>
}
 8000dbe:	2000      	movs	r0, #0
 8000dc0:	bd38      	pop	{r3, r4, r5, pc}
 8000dc2:	4604      	mov	r4, r0
		tcp_abort(pcb);
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	f019 fb39 	bl	801a43c <tcp_abort>
		(*state->ReturnPage)(state->Num, TIMEOUT, NULL, 0);
 8000dca:	2300      	movs	r3, #0
 8000dcc:	7820      	ldrb	r0, [r4, #0]
 8000dce:	2102      	movs	r1, #2
 8000dd0:	6965      	ldr	r5, [r4, #20]
 8000dd2:	461a      	mov	r2, r3
 8000dd4:	47a8      	blx	r5
}
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	bd38      	pop	{r3, r4, r5, pc}
 8000dda:	bf00      	nop

08000ddc <hc_connected>:

// lwip calls this function when the connection is established
static err_t hc_connected(void *arg, struct tcp_pcb *pcb, err_t err) {
 8000ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dde:	4605      	mov	r5, r0
 8000de0:	b085      	sub	sp, #20
 8000de2:	460c      	mov	r4, r1
	struct hc_state *state = arg;
	char *headers;

	// error?
	if (err != ERR_OK) {
 8000de4:	2a00      	cmp	r2, #0
 8000de6:	d13f      	bne.n	8000e68 <hc_connected+0x8c>

		return (ERR_OK);
	}

	// Define Headers
	if (state->PostVars == NULL) {
 8000de8:	6887      	ldr	r7, [r0, #8]
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d04f      	beq.n	8000e8e <hc_connected+0xb2>
		headers = malloc(19 + strlen(state->Page));
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
	} else {
		// POST headers (without PostVars or Page)(+ \0) = 91
		// Content-length: %d <== 						   ??? (max 10)
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000dee:	4638      	mov	r0, r7
 8000df0:	f7ff fa30 	bl	8000254 <strlen>
 8000df4:	686a      	ldr	r2, [r5, #4]
 8000df6:	4606      	mov	r6, r0
 8000df8:	4610      	mov	r0, r2
 8000dfa:	9203      	str	r2, [sp, #12]
 8000dfc:	f7ff fa2a 	bl	8000254 <strlen>
 8000e00:	4430      	add	r0, r6
 8000e02:	3065      	adds	r0, #101	; 0x65
 8000e04:	f021 f9b6 	bl	8022174 <malloc>
		sprintf(headers,
 8000e08:	4633      	mov	r3, r6
 8000e0a:	9a03      	ldr	r2, [sp, #12]
		headers = malloc(91 + strlen(state->PostVars) + strlen(state->Page) + 10);
 8000e0c:	4606      	mov	r6, r0
		sprintf(headers,
 8000e0e:	4927      	ldr	r1, [pc, #156]	; (8000eac <hc_connected+0xd0>)
 8000e10:	9700      	str	r7, [sp, #0]
 8000e12:	f022 fadf 	bl	80233d4 <siprintf>

		return (ERR_OK);
	}

	// Setup the TCP receive function
	tcp_recv(pcb, hc_recv);
 8000e16:	4926      	ldr	r1, [pc, #152]	; (8000eb0 <hc_connected+0xd4>)
 8000e18:	4620      	mov	r0, r4
 8000e1a:	f018 fec7 	bl	8019bac <tcp_recv>

	// Setup the TCP error function
	tcp_err(pcb, hc_error);
 8000e1e:	4925      	ldr	r1, [pc, #148]	; (8000eb4 <hc_connected+0xd8>)
 8000e20:	4620      	mov	r0, r4
 8000e22:	f018 fefb 	bl	8019c1c <tcp_err>

	// Setup the TCP polling function/interval	 //TCP_POLL IS NOT CORRECT DEFINED @ DOC!!!
	tcp_poll(pcb, hc_poll, 10);
 8000e26:	220a      	movs	r2, #10
 8000e28:	4923      	ldr	r1, [pc, #140]	; (8000eb8 <hc_connected+0xdc>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f018 ff18 	bl	8019c60 <tcp_poll>

	// Setup the TCP sent callback function
	tcp_sent(pcb, hc_sent);
 8000e30:	4922      	ldr	r1, [pc, #136]	; (8000ebc <hc_connected+0xe0>)
 8000e32:	4620      	mov	r0, r4
 8000e34:	f018 fed6 	bl	8019be4 <tcp_sent>

	// Send data
	tcp_write(pcb, headers, strlen(headers), 1);
 8000e38:	4630      	mov	r0, r6
 8000e3a:	f7ff fa0b 	bl	8000254 <strlen>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	4602      	mov	r2, r0
 8000e42:	4631      	mov	r1, r6
 8000e44:	4620      	mov	r0, r4
 8000e46:	f01b fd57 	bl	801c8f8 <tcp_write>
	tcp_output(pcb);
 8000e4a:	4620      	mov	r0, r4
 8000e4c:	f01c fbba 	bl	801d5c4 <tcp_output>

	// remove headers
	free(headers);
 8000e50:	4630      	mov	r0, r6
 8000e52:	f021 f997 	bl	8022184 <free>
	free(state->PostVars);			// postvars are send, so we don't need them anymore
 8000e56:	68a8      	ldr	r0, [r5, #8]
 8000e58:	f021 f994 	bl	8022184 <free>
	free(state->Page);		    	        // page is requested, so we don't need it anymore
 8000e5c:	6868      	ldr	r0, [r5, #4]
 8000e5e:	f021 f991 	bl	8022184 <free>

	return (ERR_OK);
}
 8000e62:	2000      	movs	r0, #0
 8000e64:	b005      	add	sp, #20
 8000e66:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (pcb != NULL) {
 8000e68:	b111      	cbz	r1, 8000e70 <hc_connected+0x94>
		tcp_close(pcb);
 8000e6a:	4608      	mov	r0, r1
 8000e6c:	f019 fcec 	bl	801a848 <tcp_close>
		(*state->ReturnPage)(state->Num, GEN_ERROR, NULL, 0);
 8000e70:	2300      	movs	r3, #0
 8000e72:	2104      	movs	r1, #4
 8000e74:	7828      	ldrb	r0, [r5, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	696c      	ldr	r4, [r5, #20]
 8000e7a:	47a0      	blx	r4
		free(state->RecvData);
 8000e7c:	68e8      	ldr	r0, [r5, #12]
 8000e7e:	f021 f981 	bl	8022184 <free>
		free(state);
 8000e82:	4628      	mov	r0, r5
 8000e84:	f021 f97e 	bl	8022184 <free>
}
 8000e88:	2000      	movs	r0, #0
 8000e8a:	b005      	add	sp, #20
 8000e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		headers = malloc(19 + strlen(state->Page));
 8000e8e:	6842      	ldr	r2, [r0, #4]
 8000e90:	4610      	mov	r0, r2
 8000e92:	9203      	str	r2, [sp, #12]
 8000e94:	f7ff f9de 	bl	8000254 <strlen>
 8000e98:	3013      	adds	r0, #19
 8000e9a:	f021 f96b 	bl	8022174 <malloc>
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000e9e:	9a03      	ldr	r2, [sp, #12]
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <hc_connected+0xe4>)
		headers = malloc(19 + strlen(state->Page));
 8000ea2:	4606      	mov	r6, r0
		sprintf(headers, "GET /%s HTTP/1.0\r\n\r\n", state->Page);
 8000ea4:	f022 fa96 	bl	80233d4 <siprintf>
 8000ea8:	e7b5      	b.n	8000e16 <hc_connected+0x3a>
 8000eaa:	bf00      	nop
 8000eac:	0802756c 	.word	0x0802756c
 8000eb0:	08000c09 	.word	0x08000c09
 8000eb4:	08000d75 	.word	0x08000d75
 8000eb8:	08000db1 	.word	0x08000db1
 8000ebc:	08000bfd 	.word	0x08000bfd
 8000ec0:	08027554 	.word	0x08027554

08000ec4 <hc_open>:

// Public function for request a webpage (REMOTEIP, ...
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ec8:	b086      	sub	sp, #24
 8000eca:	4616      	mov	r6, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	9003      	str	r0, [sp, #12]
	// local port
	u16_t port = 8080;
	volatile err_t err;

	// Get a place for a new webclient state in the memory
	state = malloc(sizeof(struct hc_state));
 8000ed0:	2018      	movs	r0, #24
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000ed2:	9101      	str	r1, [sp, #4]
	state = malloc(sizeof(struct hc_state));
 8000ed4:	f021 f94e 	bl	8022174 <malloc>
 8000ed8:	4604      	mov	r4, r0

	// Create a new PCB (PROTOCOL CONTROL BLOCK)
	pcb = tcp_new();
 8000eda:	f019 fbeb 	bl	801a6b4 <tcp_new>
	if (pcb == NULL || state == NULL) {
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d06f      	beq.n	8000fc2 <hc_open+0xfe>
 8000ee2:	4605      	mov	r5, r0
 8000ee4:	fab4 f084 	clz	r0, r4
 8000ee8:	9901      	ldr	r1, [sp, #4]
 8000eea:	0940      	lsrs	r0, r0, #5
 8000eec:	2c00      	cmp	r4, #0
 8000eee:	d068      	beq.n	8000fc2 <hc_open+0xfe>
			;
		return 0;
	}

	// Define webclient state vars
	num++;
 8000ef0:	4f39      	ldr	r7, [pc, #228]	; (8000fd8 <hc_open+0x114>)
	state->Num = num;
	state->RecvData = NULL;
 8000ef2:	60e0      	str	r0, [r4, #12]
	num++;
 8000ef4:	783a      	ldrb	r2, [r7, #0]
	state->ConnectionTimeout = 0;
 8000ef6:	74a0      	strb	r0, [r4, #18]
	num++;
 8000ef8:	3201      	adds	r2, #1
	state->Len = 0;
 8000efa:	8220      	strh	r0, [r4, #16]
	state->ReturnPage = returnpage;
 8000efc:	f8c4 8014 	str.w	r8, [r4, #20]
	num++;
 8000f00:	b2d3      	uxtb	r3, r2
 8000f02:	703b      	strb	r3, [r7, #0]
	state->Num = num;
 8000f04:	7023      	strb	r3, [r4, #0]

	// Make place for PostVars & Page
	if (PostVars != NULL)
 8000f06:	b146      	cbz	r6, 8000f1a <hc_open+0x56>
		state->PostVars = malloc(strlen(PostVars) + 1);
 8000f08:	4630      	mov	r0, r6
 8000f0a:	9101      	str	r1, [sp, #4]
 8000f0c:	f7ff f9a2 	bl	8000254 <strlen>
 8000f10:	3001      	adds	r0, #1
 8000f12:	f021 f92f 	bl	8022174 <malloc>
 8000f16:	9901      	ldr	r1, [sp, #4]
 8000f18:	60a0      	str	r0, [r4, #8]
	state->Page = malloc(strlen(Page) + 1);
 8000f1a:	4608      	mov	r0, r1
 8000f1c:	9102      	str	r1, [sp, #8]
 8000f1e:	f7ff f999 	bl	8000254 <strlen>
 8000f22:	1c42      	adds	r2, r0, #1
 8000f24:	4610      	mov	r0, r2
 8000f26:	9201      	str	r2, [sp, #4]
 8000f28:	f021 f924 	bl	8022174 <malloc>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	6060      	str	r0, [r4, #4]

	// Check for "out of memory"
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f30:	b390      	cbz	r0, 8000f98 <hc_open+0xd4>
 8000f32:	f8d4 8008 	ldr.w	r8, [r4, #8]
 8000f36:	e9dd 2101 	ldrd	r2, r1, [sp, #4]
 8000f3a:	f1b8 0f00 	cmp.w	r8, #0
 8000f3e:	d02a      	beq.n	8000f96 <hc_open+0xd2>
		printf("httpclient: no pcb memory\n");
#endif
		return 0;
	}
	// Place allocated copy data
	strcpy(state->Page, Page);
 8000f40:	f021 f936 	bl	80221b0 <memcpy>
	if (PostVars != NULL)
 8000f44:	2e00      	cmp	r6, #0
 8000f46:	d039      	beq.n	8000fbc <hc_open+0xf8>
		strcpy(state->PostVars, PostVars);
 8000f48:	4631      	mov	r1, r6
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	f022 fae9 	bl	8023522 <strcpy>
int hc_open(ip_addr_t remoteIP, char *Page, char *PostVars, void (*returnpage)(u8_t, hc_errormsg, char*, u16_t)) {
 8000f50:	f641 7690 	movw	r6, #8080	; 0x1f90
	else
		state->PostVars = NULL;

	// Bind to local IP & local port
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f54:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8000fe8 <hc_open+0x124>
 8000f58:	e000      	b.n	8000f5c <hc_open+0x98>
		// Local port in use, use port+1
		port++;
 8000f5a:	b2b6      	uxth	r6, r6
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f5c:	4632      	mov	r2, r6
 8000f5e:	4641      	mov	r1, r8
 8000f60:	4628      	mov	r0, r5
		port++;
 8000f62:	3601      	adds	r6, #1
	while (tcp_bind(pcb, IP_ADDR_ANY, port) != ERR_OK) {
 8000f64:	f018 fc88 	bl	8019878 <tcp_bind>
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	d1f6      	bne.n	8000f5a <hc_open+0x96>
	}

	// Use conn -> argument(s)
	tcp_arg(pcb, state);
 8000f6c:	4621      	mov	r1, r4
 8000f6e:	4628      	mov	r0, r5
 8000f70:	f018 fe18 	bl	8019ba4 <tcp_arg>

	// Open connect (SEND SYN)
	err = tcp_connect(pcb, &remoteIP, 8080, hc_connected);
 8000f74:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <hc_open+0x118>)
 8000f76:	4628      	mov	r0, r5
 8000f78:	f641 7290 	movw	r2, #8080	; 0x1f90
 8000f7c:	a903      	add	r1, sp, #12
 8000f7e:	f019 fd81 	bl	801aa84 <tcp_connect>
 8000f82:	b243      	sxtb	r3, r0
 8000f84:	f88d 3017 	strb.w	r3, [sp, #23]

	if (err != ERR_OK) {
 8000f88:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8000f8c:	b9eb      	cbnz	r3, 8000fca <hc_open+0x106>
		printf("hc_open failed with %d\n", err);
	}
	return num;
 8000f8e:	7838      	ldrb	r0, [r7, #0]
}
 8000f90:	b006      	add	sp, #24
 8000f92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (state->Page == NULL || (state->PostVars == NULL && PostVars != NULL)) {
 8000f96:	b17e      	cbz	r6, 8000fb8 <hc_open+0xf4>
		free(state->Page);
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f021 f8f3 	bl	8022184 <free>
		free(state->PostVars);
 8000f9e:	68a0      	ldr	r0, [r4, #8]
 8000fa0:	f021 f8f0 	bl	8022184 <free>
		free(state);
 8000fa4:	4620      	mov	r0, r4
 8000fa6:	f021 f8ed 	bl	8022184 <free>
		tcp_close(pcb);
 8000faa:	4628      	mov	r0, r5
 8000fac:	f019 fc4c 	bl	801a848 <tcp_close>
		return 0;
 8000fb0:	2000      	movs	r0, #0
}
 8000fb2:	b006      	add	sp, #24
 8000fb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	strcpy(state->Page, Page);
 8000fb8:	f021 f8fa 	bl	80221b0 <memcpy>
		state->PostVars = NULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	60a3      	str	r3, [r4, #8]
 8000fc0:	e7c6      	b.n	8000f50 <hc_open+0x8c>
		printf("hc_open: Not enough memory for pcb or state\n");
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <hc_open+0x11c>)
 8000fc4:	f022 f92a 	bl	802321c <puts>
		for (;;)
 8000fc8:	e7fe      	b.n	8000fc8 <hc_open+0x104>
		printf("hc_open failed with %d\n", err);
 8000fca:	f89d 1017 	ldrb.w	r1, [sp, #23]
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <hc_open+0x120>)
 8000fd0:	b249      	sxtb	r1, r1
 8000fd2:	f022 f887 	bl	80230e4 <iprintf>
 8000fd6:	e7da      	b.n	8000f8e <hc_open+0xca>
 8000fd8:	20001494 	.word	0x20001494
 8000fdc:	08000ddd 	.word	0x08000ddd
 8000fe0:	080275d0 	.word	0x080275d0
 8000fe4:	080275fc 	.word	0x080275fc
 8000fe8:	08042888 	.word	0x08042888

08000fec <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8000fec:	2300      	movs	r3, #0
int wait_armtx(void) {
 8000fee:	b510      	push	{r4, lr}
 8000ff0:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8000ff2:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8000ff4:	9b01      	ldr	r3, [sp, #4]
 8000ff6:	2b95      	cmp	r3, #149	; 0x95
 8000ff8:	dc0d      	bgt.n	8001016 <wait_armtx+0x2a>
 8000ffa:	4c0e      	ldr	r4, [pc, #56]	; (8001034 <wait_armtx+0x48>)
 8000ffc:	e007      	b.n	800100e <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8000ffe:	9b01      	ldr	r3, [sp, #4]
 8001000:	4403      	add	r3, r0
 8001002:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001004:	f012 fb0e 	bl	8013624 <osDelay>
	while (timeoutcnt < 150) {
 8001008:	9b01      	ldr	r3, [sp, #4]
 800100a:	2b95      	cmp	r3, #149	; 0x95
 800100c:	dc03      	bgt.n	8001016 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 800100e:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001010:	6823      	ldr	r3, [r4, #0]
 8001012:	4283      	cmp	r3, r0
 8001014:	d1f3      	bne.n	8000ffe <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001016:	9b01      	ldr	r3, [sp, #4]
 8001018:	2bf9      	cmp	r3, #249	; 0xf9
 800101a:	dc02      	bgt.n	8001022 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 800101c:	2000      	movs	r0, #0
}
 800101e:	b002      	add	sp, #8
 8001020:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001022:	4805      	ldr	r0, [pc, #20]	; (8001038 <wait_armtx+0x4c>)
 8001024:	f022 f8fa 	bl	802321c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001028:	4b02      	ldr	r3, [pc, #8]	; (8001034 <wait_armtx+0x48>)
 800102a:	2201      	movs	r2, #1
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	601a      	str	r2, [r3, #0]
		return (-1);
 8001032:	e7f4      	b.n	800101e <wait_armtx+0x32>
 8001034:	20001c00 	.word	0x20001c00
 8001038:	08027614 	.word	0x08027614

0800103c <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <HAL_UART_TxCpltCallback+0x14>)
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	429a      	cmp	r2, r3
 8001046:	d000      	beq.n	800104a <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001048:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 800104a:	4b03      	ldr	r3, [pc, #12]	; (8001058 <HAL_UART_TxCpltCallback+0x18>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40005000 	.word	0x40005000
 8001058:	20001c00 	.word	0x20001c00

0800105c <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 800105c:	b570      	push	{r4, r5, r6, lr}
 800105e:	4606      	mov	r6, r0
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001060:	4c1b      	ldr	r4, [pc, #108]	; (80010d0 <lcd_uart_init+0x74>)
void lcd_uart_init(int baud) {
 8001062:	b082      	sub	sp, #8
	printf("lcd_uart_init: LCD %d ***\n", baud);
 8001064:	481b      	ldr	r0, [pc, #108]	; (80010d4 <lcd_uart_init+0x78>)
 8001066:	4631      	mov	r1, r6
	lcdrxoutidx = 0;		// buffer consumer index
 8001068:	2500      	movs	r5, #0
	printf("lcd_uart_init: LCD %d ***\n", baud);
 800106a:	f022 f83b 	bl	80230e4 <iprintf>
	lcdrxoutidx = 0;		// buffer consumer index
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <lcd_uart_init+0x7c>)
	HAL_UART_Abort(&huart5);
 8001070:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001072:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001074:	f00f f9c6 	bl	8010404 <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8001078:	4620      	mov	r0, r4
 800107a:	f00f f90f 	bl	801029c <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 800107e:	4a17      	ldr	r2, [pc, #92]	; (80010dc <lcd_uart_init+0x80>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001080:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001082:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 8001084:	6022      	str	r2, [r4, #0]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8001086:	6163      	str	r3, [r4, #20]
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001088:	e9c4 6501 	strd	r6, r5, [r4, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 800108c:	e9c4 5503 	strd	r5, r5, [r4, #12]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001090:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8001098:	f010 f90e 	bl	80112b8 <HAL_UART_Init>
 800109c:	b958      	cbnz	r0, 80010b6 <lcd_uart_init+0x5a>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 800109e:	2280      	movs	r2, #128	; 0x80
 80010a0:	490f      	ldr	r1, [pc, #60]	; (80010e0 <lcd_uart_init+0x84>)
 80010a2:	480b      	ldr	r0, [pc, #44]	; (80010d0 <lcd_uart_init+0x74>)
 80010a4:	f010 fa5a 	bl	801155c <HAL_UART_Receive_DMA>
 80010a8:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80010ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80010b0:	b933      	cbnz	r3, 80010c0 <lcd_uart_init+0x64>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 80010b2:	b002      	add	sp, #8
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 80010b6:	4631      	mov	r1, r6
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <lcd_uart_init+0x88>)
 80010ba:	f022 f813 	bl	80230e4 <iprintf>
 80010be:	e7ee      	b.n	800109e <lcd_uart_init+0x42>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80010c4:	4808      	ldr	r0, [pc, #32]	; (80010e8 <lcd_uart_init+0x8c>)
}
 80010c6:	b002      	add	sp, #8
 80010c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80010cc:	f022 b80a 	b.w	80230e4 <iprintf>
 80010d0:	2001b420 	.word	0x2001b420
 80010d4:	08027628 	.word	0x08027628
 80010d8:	20001638 	.word	0x20001638
 80010dc:	40005000 	.word	0x40005000
 80010e0:	200014f8 	.word	0x200014f8
 80010e4:	08027644 	.word	0x08027644
 80010e8:	08027674 	.word	0x08027674

080010ec <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 80010ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f0:	4a3a      	ldr	r2, [pc, #232]	; (80011dc <lcd_init+0xf0>)
void lcd_init(int baud) {
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	4606      	mov	r6, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <lcd_init+0xf4>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 80010f8:	f10d 0808 	add.w	r8, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 80010fc:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80010fe:	4f39      	ldr	r7, [pc, #228]	; (80011e4 <lcd_init+0xf8>)
 8001100:	ad04      	add	r5, sp, #16
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8001102:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001106:	e888 0003 	stmia.w	r8, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800110a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800110c:	c407      	stmia	r4!, {r0, r1, r2}
 800110e:	0c1a      	lsrs	r2, r3, #16
 8001110:	f824 3b02 	strh.w	r3, [r4], #2
 8001114:	7022      	strb	r2, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001116:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800111a:	c507      	stmia	r5!, {r0, r1, r2}
	int siz, page;
	volatile char *cmd;

	printf("lcd_init: baud=%d\n", baud);
 800111c:	4631      	mov	r1, r6
 800111e:	4832      	ldr	r0, [pc, #200]	; (80011e8 <lcd_init+0xfc>)
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8001120:	702b      	strb	r3, [r5, #0]
	printf("lcd_init: baud=%d\n", baud);
 8001122:	f021 ffdf 	bl	80230e4 <iprintf>
	if (!((baud == 9600) || (baud == 230400))) {
 8001126:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 800112a:	d009      	beq.n	8001140 <lcd_init+0x54>
 800112c:	f5b6 3f61 	cmp.w	r6, #230400	; 0x38400
 8001130:	d006      	beq.n	8001140 <lcd_init+0x54>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 8001132:	4631      	mov	r1, r6
 8001134:	482d      	ldr	r0, [pc, #180]	; (80011ec <lcd_init+0x100>)
 8001136:	f021 ffd5 	bl	80230e4 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 800113a:	b00c      	add	sp, #48	; 0x30
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	txdmadone = 0;	// TX is NOT free
 8001140:	2300      	movs	r3, #0
 8001142:	4c2b      	ldr	r4, [pc, #172]	; (80011f0 <lcd_init+0x104>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 8001144:	4641      	mov	r1, r8
 8001146:	2207      	movs	r2, #7
 8001148:	482a      	ldr	r0, [pc, #168]	; (80011f4 <lcd_init+0x108>)
	txdmadone = 0;	// TX is NOT free
 800114a:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 800114c:	f00f f904 	bl	8010358 <HAL_UART_Transmit_DMA>
 8001150:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8001154:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001158:	b14b      	cbz	r3, 800116e <lcd_init+0x82>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800115a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800115e:	4826      	ldr	r0, [pc, #152]	; (80011f8 <lcd_init+0x10c>)
 8001160:	f021 ffc0 	bl	80230e4 <iprintf>
	while (!(txdmadone)) {
 8001164:	6823      	ldr	r3, [r4, #0]
 8001166:	b92b      	cbnz	r3, 8001174 <lcd_init+0x88>
		osDelay(1);		// wait for comms to complete
 8001168:	2001      	movs	r0, #1
 800116a:	f012 fa5b 	bl	8013624 <osDelay>
	while (!(txdmadone)) {
 800116e:	6823      	ldr	r3, [r4, #0]
 8001170:	2b00      	cmp	r3, #0
 8001172:	d0f9      	beq.n	8001168 <lcd_init+0x7c>
	txdmadone = 0;	// TX is NOT free
 8001174:	2300      	movs	r3, #0
	osDelay(800);
 8001176:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 800117a:	6023      	str	r3, [r4, #0]
	osDelay(800);
 800117c:	f012 fa52 	bl	8013624 <osDelay>
	if (baud == 9600)
 8001180:	f5b6 5f16 	cmp.w	r6, #9600	; 0x2580
 8001184:	d018      	beq.n	80011b8 <lcd_init+0xcc>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8001186:	a908      	add	r1, sp, #32
 8001188:	220e      	movs	r2, #14
 800118a:	481a      	ldr	r0, [pc, #104]	; (80011f4 <lcd_init+0x108>)
 800118c:	f00f f8e4 	bl	8010358 <HAL_UART_Transmit_DMA>
 8001190:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8001194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001198:	b11b      	cbz	r3, 80011a2 <lcd_init+0xb6>
 800119a:	e018      	b.n	80011ce <lcd_init+0xe2>
		osDelay(1);		// wait for comms to complete
 800119c:	2001      	movs	r0, #1
 800119e:	f012 fa41 	bl	8013624 <osDelay>
	while (!(txdmadone)) {
 80011a2:	6823      	ldr	r3, [r4, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0f9      	beq.n	800119c <lcd_init+0xb0>
	txdmadone = 0;	// TX is NOT free
 80011a8:	2300      	movs	r3, #0
	osDelay(120);
 80011aa:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 80011ac:	6023      	str	r3, [r4, #0]
	osDelay(120);
 80011ae:	f012 fa39 	bl	8013624 <osDelay>
}
 80011b2:	b00c      	add	sp, #48	; 0x30
 80011b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 80011b8:	a904      	add	r1, sp, #16
 80011ba:	220c      	movs	r2, #12
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <lcd_init+0x108>)
 80011be:	f00f f8cb 	bl	8010358 <HAL_UART_Transmit_DMA>
 80011c2:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 80011c6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0e9      	beq.n	80011a2 <lcd_init+0xb6>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80011ce:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80011d2:	4809      	ldr	r0, [pc, #36]	; (80011f8 <lcd_init+0x10c>)
 80011d4:	f021 ff86 	bl	80230e4 <iprintf>
 80011d8:	e7e3      	b.n	80011a2 <lcd_init+0xb6>
 80011da:	bf00      	nop
 80011dc:	0802771c 	.word	0x0802771c
 80011e0:	08027724 	.word	0x08027724
 80011e4:	08027734 	.word	0x08027734
 80011e8:	080276a4 	.word	0x080276a4
 80011ec:	080276b8 	.word	0x080276b8
 80011f0:	20001c00 	.word	0x20001c00
 80011f4:	2001b420 	.word	0x2001b420
 80011f8:	080276ec 	.word	0x080276ec

080011fc <lcd_puts>:
	}
	return (stat);
}

// put a null terminated string
int lcd_puts(char *str) {
 80011fc:	b530      	push	{r4, r5, lr}
 80011fe:	b083      	sub	sp, #12
 8001200:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 8001202:	f7ff fef3 	bl	8000fec <wait_armtx>
 8001206:	4605      	mov	r5, r0
 8001208:	3001      	adds	r0, #1
 800120a:	d01d      	beq.n	8001248 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	4813      	ldr	r0, [pc, #76]	; (800125c <lcd_puts+0x60>)
 8001210:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001212:	9b01      	ldr	r3, [sp, #4]
 8001214:	5ce3      	ldrb	r3, [r4, r3]
 8001216:	b153      	cbz	r3, 800122e <lcd_puts+0x32>
		buffer[i] = str[i];
 8001218:	9901      	ldr	r1, [sp, #4]
 800121a:	9a01      	ldr	r2, [sp, #4]
		i++;
 800121c:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 800121e:	5c61      	ldrb	r1, [r4, r1]
		i++;
 8001220:	3301      	adds	r3, #1
		buffer[i] = str[i];
 8001222:	5481      	strb	r1, [r0, r2]
		i++;
 8001224:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 8001226:	9b01      	ldr	r3, [sp, #4]
 8001228:	5ce3      	ldrb	r3, [r4, r3]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f4      	bne.n	8001218 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 800122e:	9d01      	ldr	r5, [sp, #4]
 8001230:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001232:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 8001234:	4c0a      	ldr	r4, [pc, #40]	; (8001260 <lcd_puts+0x64>)
	buffer[i] = '\0';
 8001236:	5543      	strb	r3, [r0, r5]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001238:	b292      	uxth	r2, r2
 800123a:	4908      	ldr	r1, [pc, #32]	; (800125c <lcd_puts+0x60>)
 800123c:	4809      	ldr	r0, [pc, #36]	; (8001264 <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 800123e:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 8001240:	f00f f88a 	bl	8010358 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8001244:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 8001246:	b910      	cbnz	r0, 800124e <lcd_puts+0x52>
	}
	return (stat);
}
 8001248:	4628      	mov	r0, r5
 800124a:	b003      	add	sp, #12
 800124c:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800124e:	4629      	mov	r1, r5
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <lcd_puts+0x6c>)
 8001252:	f021 ff47 	bl	80230e4 <iprintf>
}
 8001256:	4628      	mov	r0, r5
 8001258:	b003      	add	sp, #12
 800125a:	bd30      	pop	{r4, r5, pc}
 800125c:	20001498 	.word	0x20001498
 8001260:	20001c00 	.word	0x20001c00
 8001264:	2001b420 	.word	0x2001b420
 8001268:	08027744 	.word	0x08027744

0800126c <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 800126c:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 800126e:	2300      	movs	r3, #0
int lcd_rxdma() {
 8001270:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001272:	4a17      	ldr	r2, [pc, #92]	; (80012d0 <lcd_rxdma+0x64>)
	volatile int count = 0;
 8001274:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 8001276:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8001278:	6853      	ldr	r3, [r2, #4]
 800127a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800127e:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8001280:	9a01      	ldr	r2, [sp, #4]
 8001282:	2a80      	cmp	r2, #128	; 0x80
 8001284:	d016      	beq.n	80012b4 <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8001286:	4d13      	ldr	r5, [pc, #76]	; (80012d4 <lcd_rxdma+0x68>)
 8001288:	9a01      	ldr	r2, [sp, #4]
 800128a:	682b      	ldr	r3, [r5, #0]
 800128c:	4293      	cmp	r3, r2
 800128e:	d00e      	beq.n	80012ae <lcd_rxdma+0x42>
 8001290:	4c11      	ldr	r4, [pc, #68]	; (80012d8 <lcd_rxdma+0x6c>)
 8001292:	4812      	ldr	r0, [pc, #72]	; (80012dc <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001294:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 8001296:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8001298:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 800129a:	3301      	adds	r3, #1
		count++;
 800129c:	3201      	adds	r2, #1
		return (0);
 800129e:	2b80      	cmp	r3, #128	; 0x80
		count++;
 80012a0:	9200      	str	r2, [sp, #0]
		return (0);
 80012a2:	bfa8      	it	ge
 80012a4:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 80012a6:	9a01      	ldr	r2, [sp, #4]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d1f3      	bne.n	8001294 <lcd_rxdma+0x28>
 80012ac:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 80012ae:	9800      	ldr	r0, [sp, #0]
}
 80012b0:	b003      	add	sp, #12
 80012b2:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 80012b4:	4909      	ldr	r1, [pc, #36]	; (80012dc <lcd_rxdma+0x70>)
 80012b6:	480a      	ldr	r0, [pc, #40]	; (80012e0 <lcd_rxdma+0x74>)
 80012b8:	f010 f950 	bl	801155c <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 80012bc:	b910      	cbnz	r0, 80012c4 <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 80012be:	2300      	movs	r3, #0
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	e7e0      	b.n	8001286 <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 80012c4:	4601      	mov	r1, r0
 80012c6:	4807      	ldr	r0, [pc, #28]	; (80012e4 <lcd_rxdma+0x78>)
 80012c8:	f021 ff0c 	bl	80230e4 <iprintf>
 80012cc:	e7f7      	b.n	80012be <lcd_rxdma+0x52>
 80012ce:	bf00      	nop
 80012d0:	40026010 	.word	0x40026010
 80012d4:	20001638 	.word	0x20001638
 80012d8:	200015b8 	.word	0x200015b8
 80012dc:	200014f8 	.word	0x200014f8
 80012e0:	2001b420 	.word	0x2001b420
 80012e4:	08027774 	.word	0x08027774

080012e8 <intwritelcdcmd>:
/////////////////////////////////////////////////////////////////////////////////////////////////////////

// internal send a var string to the LCD (len max 255) - cant be blcoked
// terminate with three 0xff's
// returns 0 if sent
int intwritelcdcmd(char *str) {
 80012e8:	b500      	push	{lr}
 80012ea:	b099      	sub	sp, #100	; 0x64
 80012ec:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80012ee:	4668      	mov	r0, sp
 80012f0:	f022 f901 	bl	80234f6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80012f4:	4a04      	ldr	r2, [pc, #16]	; (8001308 <intwritelcdcmd+0x20>)
	strcpy(pkt, str);
 80012f6:	4603      	mov	r3, r0
	strcat(pkt, "\xff\xff\xff");
 80012f8:	6810      	ldr	r0, [r2, #0]
 80012fa:	6018      	str	r0, [r3, #0]
	return (lcd_puts(pkt));
 80012fc:	4668      	mov	r0, sp
 80012fe:	f7ff ff7d 	bl	80011fc <lcd_puts>
}
 8001302:	b019      	add	sp, #100	; 0x64
 8001304:	f85d fb04 	ldr.w	pc, [sp], #4
 8001308:	08027720 	.word	0x08027720

0800130c <writelcdcmd>:

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 800130c:	b500      	push	{lr}
 800130e:	b099      	sub	sp, #100	; 0x64
 8001310:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 8001312:	4668      	mov	r0, sp
 8001314:	f022 f8ef 	bl	80234f6 <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <writelcdcmd+0x30>)
	strcpy(pkt, str);
 800131c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800131e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8001320:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8001322:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8001324:	b92b      	cbnz	r3, 8001332 <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 8001326:	4668      	mov	r0, sp
 8001328:	f7ff ff68 	bl	80011fc <lcd_puts>
	else
		return (-1);
}
 800132c:	b019      	add	sp, #100	; 0x64
 800132e:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 8001332:	f04f 30ff 	mov.w	r0, #4294967295
 8001336:	e7f9      	b.n	800132c <writelcdcmd+0x20>
 8001338:	08027720 	.word	0x08027720
 800133c:	200015b4 	.word	0x200015b4

08001340 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8001340:	b510      	push	{r4, lr}
 8001342:	b09a      	sub	sp, #104	; 0x68
	int i;
	char str[96];
	volatile int result = 0;
 8001344:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 8001346:	4602      	mov	r2, r0
 8001348:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 800134a:	a802      	add	r0, sp, #8
 800134c:	4905      	ldr	r1, [pc, #20]	; (8001364 <setlcdtext+0x24>)
	volatile int result = 0;
 800134e:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8001350:	f022 f840 	bl	80233d4 <siprintf>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8001354:	a802      	add	r0, sp, #8
 8001356:	f7ff ffd9 	bl	800130c <writelcdcmd>
 800135a:	9001      	str	r0, [sp, #4]
	return (result);
 800135c:	9801      	ldr	r0, [sp, #4]
}
 800135e:	b01a      	add	sp, #104	; 0x68
 8001360:	bd10      	pop	{r4, pc}
 8001362:	bf00      	nop
 8001364:	080277a4 	.word	0x080277a4

08001368 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8001368:	b500      	push	{lr}
 800136a:	b08b      	sub	sp, #44	; 0x2c
 800136c:	460b      	mov	r3, r1
 800136e:	4602      	mov	r2, r0
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 8001370:	490a      	ldr	r1, [pc, #40]	; (800139c <setlcdbin+0x34>)
 8001372:	a802      	add	r0, sp, #8
 8001374:	f022 f82e 	bl	80233d4 <siprintf>
	result = writelcdcmd(buffer);
 8001378:	a802      	add	r0, sp, #8
 800137a:	f7ff ffc7 	bl	800130c <writelcdcmd>
 800137e:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// wait for response
 8001380:	9b01      	ldr	r3, [sp, #4]
 8001382:	3301      	adds	r3, #1
 8001384:	d003      	beq.n	800138e <setlcdbin+0x26>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8001386:	9801      	ldr	r0, [sp, #4]
}
 8001388:	b00b      	add	sp, #44	; 0x2c
 800138a:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 800138e:	4804      	ldr	r0, [pc, #16]	; (80013a0 <setlcdbin+0x38>)
 8001390:	f021 fea8 	bl	80230e4 <iprintf>
	return (result);
 8001394:	9801      	ldr	r0, [sp, #4]
}
 8001396:	b00b      	add	sp, #44	; 0x2c
 8001398:	f85d fb04 	ldr.w	pc, [sp], #4
 800139c:	080277ac 	.word	0x080277ac
 80013a0:	080277b4 	.word	0x080277b4

080013a4 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 80013a6:	4b2e      	ldr	r3, [pc, #184]	; (8001460 <isnexpkt+0xbc>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 80013a8:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 80013aa:	4d2e      	ldr	r5, [pc, #184]	; (8001464 <isnexpkt+0xc0>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	682a      	ldr	r2, [r5, #0]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d052      	beq.n	800145a <isnexpkt+0xb6>
	if (++index >= limit)
 80013b4:	1c53      	adds	r3, r2, #1
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 80013b6:	4c2c      	ldr	r4, [pc, #176]	; (8001468 <isnexpkt+0xc4>)
		ch = lcdrxbuffer[lastidx];
 80013b8:	4f2c      	ldr	r7, [pc, #176]	; (800146c <isnexpkt+0xc8>)
		rxtimeout = 100;
 80013ba:	f04f 0c64 	mov.w	ip, #100	; 0x64
		return (0);
 80013be:	2b80      	cmp	r3, #128	; 0x80
		buffer[i++] = ch;
 80013c0:	7826      	ldrb	r6, [r4, #0]
		ch = lcdrxbuffer[lastidx];
 80013c2:	5cbf      	ldrb	r7, [r7, r2]
		return (0);
 80013c4:	bfa8      	it	ge
 80013c6:	2300      	movge	r3, #0
		buffer[i++] = ch;
 80013c8:	1c72      	adds	r2, r6, #1
		ch = rawchar & 0xff;
 80013ca:	f88d 7007 	strb.w	r7, [sp, #7]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80013ce:	602b      	str	r3, [r5, #0]
		buffer[i++] = ch;
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	f89d 7007 	ldrb.w	r7, [sp, #7]
		if (ch == 0xff) {
 80013d6:	f89d 3007 	ldrb.w	r3, [sp, #7]
		rxtimeout = 100;
 80013da:	4d25      	ldr	r5, [pc, #148]	; (8001470 <isnexpkt+0xcc>)
		if (ch == 0xff) {
 80013dc:	2bff      	cmp	r3, #255	; 0xff
		buffer[i++] = ch;
 80013de:	7022      	strb	r2, [r4, #0]
		rxtimeout = 100;
 80013e0:	f8c5 c000 	str.w	ip, [r5]
		buffer[i++] = ch;
 80013e4:	5587      	strb	r7, [r0, r6]
		if (ch == 0xff) {
 80013e6:	d029      	beq.n	800143c <isnexpkt+0x98>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013e8:	f89d c007 	ldrb.w	ip, [sp, #7]
			termcnt = 0;
 80013ec:	2300      	movs	r3, #0
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013ee:	4f21      	ldr	r7, [pc, #132]	; (8001474 <isnexpkt+0xd0>)
			termcnt = 0;
 80013f0:	4e21      	ldr	r6, [pc, #132]	; (8001478 <isnexpkt+0xd4>)
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 80013f2:	f887 c000 	strb.w	ip, [r7]
			termcnt = 0;
 80013f6:	7033      	strb	r3, [r6, #0]
		}

		if (i == size) { // overrun
 80013f8:	428a      	cmp	r2, r1
 80013fa:	d102      	bne.n	8001402 <isnexpkt+0x5e>
			i = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8001400:	7033      	strb	r3, [r6, #0]
		}
	}
	if (rxtimeout > 0)
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	b133      	cbz	r3, 8001414 <isnexpkt+0x70>
		rxtimeout--;
 8001406:	3b01      	subs	r3, #1
 8001408:	602b      	str	r3, [r5, #0]
	if (rxtimeout == 0) {
 800140a:	b11b      	cbz	r3, 8001414 <isnexpkt+0x70>
		for (i = 0; i < size; buffer[i++] = 0)
			;
		i = 0;
		return (-1);
	}
	return (-2);  // no char available
 800140c:	f06f 0001 	mvn.w	r0, #1
}
 8001410:	b003      	add	sp, #12
 8001412:	bdf0      	pop	{r4, r5, r6, r7, pc}
		termcnt = 0;
 8001414:	2200      	movs	r2, #0
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <isnexpkt+0xd4>)
		for (i = 0; i < size; buffer[i++] = 0)
 8001418:	4c13      	ldr	r4, [pc, #76]	; (8001468 <isnexpkt+0xc4>)
		termcnt = 0;
 800141a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 800141c:	7022      	strb	r2, [r4, #0]
 800141e:	b139      	cbz	r1, 8001430 <isnexpkt+0x8c>
 8001420:	3901      	subs	r1, #1
 8001422:	1e43      	subs	r3, r0, #1
 8001424:	fa50 f081 	uxtab	r0, r0, r1
 8001428:	f803 2f01 	strb.w	r2, [r3, #1]!
 800142c:	4298      	cmp	r0, r3
 800142e:	d1fb      	bne.n	8001428 <isnexpkt+0x84>
		i = 0;
 8001430:	2300      	movs	r3, #0
		return (-1);
 8001432:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8001436:	7023      	strb	r3, [r4, #0]
}
 8001438:	b003      	add	sp, #12
 800143a:	bdf0      	pop	{r4, r5, r6, r7, pc}
			termcnt++;
 800143c:	4e0e      	ldr	r6, [pc, #56]	; (8001478 <isnexpkt+0xd4>)
 800143e:	7833      	ldrb	r3, [r6, #0]
 8001440:	3301      	adds	r3, #1
 8001442:	b2db      	uxtb	r3, r3
			if (termcnt == 3) {
 8001444:	2b03      	cmp	r3, #3
			termcnt++;
 8001446:	7033      	strb	r3, [r6, #0]
			if (termcnt == 3) {
 8001448:	d1d6      	bne.n	80013f8 <isnexpkt+0x54>
				printf(" # ");		// found terminator
 800144a:	480c      	ldr	r0, [pc, #48]	; (800147c <isnexpkt+0xd8>)
 800144c:	f021 fe4a 	bl	80230e4 <iprintf>
				i = 0;
 8001450:	2300      	movs	r3, #0
				index = i;
 8001452:	7820      	ldrb	r0, [r4, #0]
				termcnt = 0;
 8001454:	7033      	strb	r3, [r6, #0]
				i = 0;
 8001456:	7023      	strb	r3, [r4, #0]
				return (index);
 8001458:	e7da      	b.n	8001410 <isnexpkt+0x6c>
 800145a:	4d05      	ldr	r5, [pc, #20]	; (8001470 <isnexpkt+0xcc>)
 800145c:	e7d1      	b.n	8001402 <isnexpkt+0x5e>
 800145e:	bf00      	nop
 8001460:	20001638 	.word	0x20001638
 8001464:	200015a4 	.word	0x200015a4
 8001468:	20001598 	.word	0x20001598
 800146c:	200015b8 	.word	0x200015b8
 8001470:	20001a10 	.word	0x20001a10
 8001474:	20001a0c 	.word	0x20001a0c
 8001478:	20001a14 	.word	0x20001a14
 800147c:	080277d0 	.word	0x080277d0

08001480 <lcd_time>:
//Application specific display stuff
//
//////////////////////////////////////////////////////////////

// send the time to t0.txt
void lcd_time() {
 8001480:	b530      	push	{r4, r5, lr}
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 8001482:	4c1c      	ldr	r4, [pc, #112]	; (80014f4 <lcd_time+0x74>)
 8001484:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 8001488:	2500      	movs	r5, #0
 800148a:	481b      	ldr	r0, [pc, #108]	; (80014f8 <lcd_time+0x78>)
void lcd_time() {
 800148c:	b085      	sub	sp, #20
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800148e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001492:	185b      	adds	r3, r3, r1
 8001494:	eb45 0202 	adc.w	r2, r5, r2
	timeinfo = *localtime(&localepochtime);
 8001498:	4d18      	ldr	r5, [pc, #96]	; (80014fc <lcd_time+0x7c>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 800149a:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 800149e:	f020 fd55 	bl	8021f4c <localtime>
 80014a2:	4604      	mov	r4, r0
 80014a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014ac:	462b      	mov	r3, r5
 80014ae:	6820      	ldr	r0, [r4, #0]
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <lcd_time+0x80>)
 80014b2:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80014b4:	f843 0920 	str.w	r0, [r3], #-32
	strftime(buffer, sizeof(buffer), "%H:%M:%S", &timeinfo);
 80014b8:	4812      	ldr	r0, [pc, #72]	; (8001504 <lcd_time+0x84>)
 80014ba:	f022 fd8d 	bl	8023fd8 <strftime>
	setlcdtext("t0.txt", buffer);
 80014be:	4911      	ldr	r1, [pc, #68]	; (8001504 <lcd_time+0x84>)
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <lcd_time+0x88>)
 80014c2:	f7ff ff3d 	bl	8001340 <setlcdtext>

	if (gpslocked) {
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <lcd_time+0x8c>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b123      	cbz	r3, 80014d6 <lcd_time+0x56>
		writelcdcmd("vis t3,0");	// hide warning
 80014cc:	4810      	ldr	r0, [pc, #64]	; (8001510 <lcd_time+0x90>)
 80014ce:	f7ff ff1d 	bl	800130c <writelcdcmd>
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80014d2:	b005      	add	sp, #20
 80014d4:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <lcd_time+0x94>)
 80014d8:	4668      	mov	r0, sp
 80014da:	490f      	ldr	r1, [pc, #60]	; (8001518 <lcd_time+0x98>)
 80014dc:	7eda      	ldrb	r2, [r3, #27]
 80014de:	f021 ff79 	bl	80233d4 <siprintf>
		setlcdtext("t3.txt", str);
 80014e2:	4669      	mov	r1, sp
 80014e4:	480d      	ldr	r0, [pc, #52]	; (800151c <lcd_time+0x9c>)
 80014e6:	f7ff ff2b 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 80014ea:	480d      	ldr	r0, [pc, #52]	; (8001520 <lcd_time+0xa0>)
 80014ec:	f7ff ff0e 	bl	800130c <writelcdcmd>
}
 80014f0:	b005      	add	sp, #20
 80014f2:	bd30      	pop	{r4, r5, pc}
 80014f4:	2001bcc8 	.word	0x2001bcc8
 80014f8:	2001aed0 	.word	0x2001aed0
 80014fc:	2001ae80 	.word	0x2001ae80
 8001500:	080277d4 	.word	0x080277d4
 8001504:	2001aea4 	.word	0x2001aea4
 8001508:	080277e0 	.word	0x080277e0
 800150c:	20001cd9 	.word	0x20001cd9
 8001510:	080277e8 	.word	0x080277e8
 8001514:	2001adc0 	.word	0x2001adc0
 8001518:	080277f4 	.word	0x080277f4
 800151c:	08027804 	.word	0x08027804
 8001520:	0802780c 	.word	0x0802780c

08001524 <lcd_date>:

// send the date to t1.txt (assumes timeinfo is current)
void lcd_date() {

	lastday = timeinfo.tm_yday;
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <lcd_date+0x24>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001526:	2128      	movs	r1, #40	; 0x28
 8001528:	4a08      	ldr	r2, [pc, #32]	; (800154c <lcd_date+0x28>)
void lcd_date() {
 800152a:	b570      	push	{r4, r5, r6, lr}
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 800152c:	4c08      	ldr	r4, [pc, #32]	; (8001550 <lcd_date+0x2c>)
	lastday = timeinfo.tm_yday;
 800152e:	69de      	ldr	r6, [r3, #28]
 8001530:	4d08      	ldr	r5, [pc, #32]	; (8001554 <lcd_date+0x30>)
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001532:	4620      	mov	r0, r4
	lastday = timeinfo.tm_yday;
 8001534:	602e      	str	r6, [r5, #0]
	strftime(buffer, sizeof(buffer), "%a %e %h %Y ", &timeinfo);
 8001536:	f022 fd4f 	bl	8023fd8 <strftime>
	setlcdtext("t1.txt", buffer);
 800153a:	4621      	mov	r1, r4
 800153c:	4806      	ldr	r0, [pc, #24]	; (8001558 <lcd_date+0x34>)
}
 800153e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdtext("t1.txt", buffer);
 8001542:	f7ff befd 	b.w	8001340 <setlcdtext>
 8001546:	bf00      	nop
 8001548:	2001ae80 	.word	0x2001ae80
 800154c:	08027818 	.word	0x08027818
 8001550:	2001aea4 	.word	0x2001aea4
 8001554:	200015a0 	.word	0x200015a0
 8001558:	08027828 	.word	0x08027828

0800155c <lcd_showvars>:

// populate the page2 vars
lcd_showvars() {
 800155c:	b570      	push	{r4, r5, r6, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 800155e:	4c61      	ldr	r4, [pc, #388]	; (80016e4 <lcd_showvars+0x188>)
lcd_showvars() {
 8001560:	b09e      	sub	sp, #120	; 0x78
 8001562:	8823      	ldrh	r3, [r4, #0]
 8001564:	2b03      	cmp	r3, #3
 8001566:	d81e      	bhi.n	80015a6 <lcd_showvars+0x4a>
 8001568:	e8df f003 	tbb	[pc, r3]
 800156c:	02a57c1f 	.word	0x02a57c1f
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, pcb,
 8001570:	4b5d      	ldr	r3, [pc, #372]	; (80016e8 <lcd_showvars+0x18c>)
 8001572:	f242 7128 	movw	r1, #10024	; 0x2728
 8001576:	4a5d      	ldr	r2, [pc, #372]	; (80016ec <lcd_showvars+0x190>)
 8001578:	a806      	add	r0, sp, #24
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4d5c      	ldr	r5, [pc, #368]	; (80016f0 <lcd_showvars+0x194>)
 800157e:	9304      	str	r3, [sp, #16]
 8001580:	230e      	movs	r3, #14
 8001582:	6816      	ldr	r6, [r2, #0]
 8001584:	4a5b      	ldr	r2, [pc, #364]	; (80016f4 <lcd_showvars+0x198>)
 8001586:	9603      	str	r6, [sp, #12]
 8001588:	6812      	ldr	r2, [r2, #0]
 800158a:	682d      	ldr	r5, [r5, #0]
 800158c:	9201      	str	r2, [sp, #4]
 800158e:	2200      	movs	r2, #0
 8001590:	9100      	str	r1, [sp, #0]
 8001592:	9502      	str	r5, [sp, #8]
 8001594:	4958      	ldr	r1, [pc, #352]	; (80016f8 <lcd_showvars+0x19c>)
 8001596:	f021 ff1d 	bl	80233d4 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 800159a:	a906      	add	r1, sp, #24
 800159c:	4857      	ldr	r0, [pc, #348]	; (80016fc <lcd_showvars+0x1a0>)
 800159e:	f7ff fecf 	bl	8001340 <setlcdtext>
		toggle = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 80015a6:	b01e      	add	sp, #120	; 0x78
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80015aa:	4b55      	ldr	r3, [pc, #340]	; (8001700 <lcd_showvars+0x1a4>)
 80015ac:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 80015ae:	4d55      	ldr	r5, [pc, #340]	; (8001704 <lcd_showvars+0x1a8>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4955      	ldr	r1, [pc, #340]	; (8001708 <lcd_showvars+0x1ac>)
 80015b4:	0e16      	lsrs	r6, r2, #24
 80015b6:	f3c2 4307 	ubfx	r3, r2, #16, #8
 80015ba:	e9cd 3600 	strd	r3, r6, [sp]
 80015be:	f3c2 2307 	ubfx	r3, r2, #8, #8
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f021 ff06 	bl	80233d4 <siprintf>
		setlcdtext("t11.txt", str);
 80015c8:	a906      	add	r1, sp, #24
 80015ca:	4850      	ldr	r0, [pc, #320]	; (800170c <lcd_showvars+0x1b0>)
 80015cc:	f7ff feb8 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 80015d0:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 80015d4:	a806      	add	r0, sp, #24
 80015d6:	494e      	ldr	r1, [pc, #312]	; (8001710 <lcd_showvars+0x1b4>)
 80015d8:	b292      	uxth	r2, r2
 80015da:	f021 fefb 	bl	80233d4 <siprintf>
		setlcdtext("t10.txt", str);
 80015de:	a906      	add	r1, sp, #24
 80015e0:	484c      	ldr	r0, [pc, #304]	; (8001714 <lcd_showvars+0x1b8>)
 80015e2:	f7ff fead 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 80015e6:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 80015ea:	a806      	add	r0, sp, #24
 80015ec:	4948      	ldr	r1, [pc, #288]	; (8001710 <lcd_showvars+0x1b4>)
 80015ee:	b292      	uxth	r2, r2
 80015f0:	f021 fef0 	bl	80233d4 <siprintf>
		setlcdtext("t9.txt", str);
 80015f4:	a906      	add	r1, sp, #24
 80015f6:	4848      	ldr	r0, [pc, #288]	; (8001718 <lcd_showvars+0x1bc>)
 80015f8:	f7ff fea2 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <lcd_showvars+0x1c0>)
 80015fe:	a806      	add	r0, sp, #24
 8001600:	4943      	ldr	r1, [pc, #268]	; (8001710 <lcd_showvars+0x1b4>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001608:	f021 fee4 	bl	80233d4 <siprintf>
		setlcdtext("t8.txt", str);
 800160c:	a906      	add	r1, sp, #24
 800160e:	4844      	ldr	r0, [pc, #272]	; (8001720 <lcd_showvars+0x1c4>)
 8001610:	f7ff fe96 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001614:	4b43      	ldr	r3, [pc, #268]	; (8001724 <lcd_showvars+0x1c8>)
 8001616:	a806      	add	r0, sp, #24
 8001618:	493d      	ldr	r1, [pc, #244]	; (8001710 <lcd_showvars+0x1b4>)
 800161a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800161e:	2a00      	cmp	r2, #0
 8001620:	bfb8      	it	lt
 8001622:	4252      	neglt	r2, r2
 8001624:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001628:	f021 fed4 	bl	80233d4 <siprintf>
		setlcdtext("t7.txt", str);
 800162c:	a906      	add	r1, sp, #24
 800162e:	483e      	ldr	r0, [pc, #248]	; (8001728 <lcd_showvars+0x1cc>)
 8001630:	f7ff fe86 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 8001634:	4b3d      	ldr	r3, [pc, #244]	; (800172c <lcd_showvars+0x1d0>)
 8001636:	a806      	add	r0, sp, #24
 8001638:	4935      	ldr	r1, [pc, #212]	; (8001710 <lcd_showvars+0x1b4>)
 800163a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800163e:	f021 fec9 	bl	80233d4 <siprintf>
		setlcdtext("t6.txt", str);
 8001642:	a906      	add	r1, sp, #24
 8001644:	483a      	ldr	r0, [pc, #232]	; (8001730 <lcd_showvars+0x1d4>)
 8001646:	f7ff fe7b 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 800164a:	6faa      	ldr	r2, [r5, #120]	; 0x78
 800164c:	a806      	add	r0, sp, #24
 800164e:	4930      	ldr	r1, [pc, #192]	; (8001710 <lcd_showvars+0x1b4>)
 8001650:	f021 fec0 	bl	80233d4 <siprintf>
		setlcdtext("t24.txt", str);
 8001654:	a906      	add	r1, sp, #24
 8001656:	4837      	ldr	r0, [pc, #220]	; (8001734 <lcd_showvars+0x1d8>)
 8001658:	f7ff fe72 	bl	8001340 <setlcdtext>
		toggle = 1;
 800165c:	2301      	movs	r3, #1
 800165e:	8023      	strh	r3, [r4, #0]
}
 8001660:	b01e      	add	sp, #120	; 0x78
 8001662:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 8001664:	4d27      	ldr	r5, [pc, #156]	; (8001704 <lcd_showvars+0x1a8>)
 8001666:	a806      	add	r0, sp, #24
 8001668:	4929      	ldr	r1, [pc, #164]	; (8001710 <lcd_showvars+0x1b4>)
 800166a:	7eea      	ldrb	r2, [r5, #27]
 800166c:	f021 feb2 	bl	80233d4 <siprintf>
		setlcdtext("t0.txt", str);
 8001670:	a906      	add	r1, sp, #24
 8001672:	4831      	ldr	r0, [pc, #196]	; (8001738 <lcd_showvars+0x1dc>)
 8001674:	f7ff fe64 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 8001678:	6a2a      	ldr	r2, [r5, #32]
 800167a:	a806      	add	r0, sp, #24
 800167c:	4924      	ldr	r1, [pc, #144]	; (8001710 <lcd_showvars+0x1b4>)
 800167e:	f021 fea9 	bl	80233d4 <siprintf>
		setlcdtext("t1.txt", str);
 8001682:	a906      	add	r1, sp, #24
 8001684:	482d      	ldr	r0, [pc, #180]	; (800173c <lcd_showvars+0x1e0>)
 8001686:	f7ff fe5b 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 800168a:	69ea      	ldr	r2, [r5, #28]
 800168c:	a806      	add	r0, sp, #24
 800168e:	4920      	ldr	r1, [pc, #128]	; (8001710 <lcd_showvars+0x1b4>)
 8001690:	f021 fea0 	bl	80233d4 <siprintf>
		setlcdtext("t2.txt", str);
 8001694:	a906      	add	r1, sp, #24
 8001696:	482a      	ldr	r0, [pc, #168]	; (8001740 <lcd_showvars+0x1e4>)
 8001698:	f7ff fe52 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 800169c:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800169e:	a806      	add	r0, sp, #24
 80016a0:	491b      	ldr	r1, [pc, #108]	; (8001710 <lcd_showvars+0x1b4>)
 80016a2:	f021 fe97 	bl	80233d4 <siprintf>
		setlcdtext("t3.txt", str);
 80016a6:	a906      	add	r1, sp, #24
 80016a8:	4826      	ldr	r0, [pc, #152]	; (8001744 <lcd_showvars+0x1e8>)
 80016aa:	f7ff fe49 	bl	8001340 <setlcdtext>
		toggle = 2;
 80016ae:	2302      	movs	r3, #2
 80016b0:	8023      	strh	r3, [r4, #0]
}
 80016b2:	b01e      	add	sp, #120	; 0x78
 80016b4:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80016b6:	4d13      	ldr	r5, [pc, #76]	; (8001704 <lcd_showvars+0x1a8>)
 80016b8:	a806      	add	r0, sp, #24
 80016ba:	4915      	ldr	r1, [pc, #84]	; (8001710 <lcd_showvars+0x1b4>)
 80016bc:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80016be:	f021 fe89 	bl	80233d4 <siprintf>
		setlcdtext("t4.txt", str);
 80016c2:	a906      	add	r1, sp, #24
 80016c4:	4820      	ldr	r0, [pc, #128]	; (8001748 <lcd_showvars+0x1ec>)
 80016c6:	f7ff fe3b 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 80016ca:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80016cc:	a806      	add	r0, sp, #24
 80016ce:	4910      	ldr	r1, [pc, #64]	; (8001710 <lcd_showvars+0x1b4>)
 80016d0:	f021 fe80 	bl	80233d4 <siprintf>
		setlcdtext("t5.txt", str);
 80016d4:	a906      	add	r1, sp, #24
 80016d6:	481d      	ldr	r0, [pc, #116]	; (800174c <lcd_showvars+0x1f0>)
 80016d8:	f7ff fe32 	bl	8001340 <setlcdtext>
		toggle = 3;
 80016dc:	2303      	movs	r3, #3
 80016de:	8023      	strh	r3, [r4, #0]
}
 80016e0:	b01e      	add	sp, #120	; 0x78
 80016e2:	bd70      	pop	{r4, r5, r6, pc}
 80016e4:	20001a16 	.word	0x20001a16
 80016e8:	1ff0f428 	.word	0x1ff0f428
 80016ec:	1ff0f424 	.word	0x1ff0f424
 80016f0:	1ff0f420 	.word	0x1ff0f420
 80016f4:	2001ae7c 	.word	0x2001ae7c
 80016f8:	08027890 	.word	0x08027890
 80016fc:	080278bc 	.word	0x080278bc
 8001700:	2001b260 	.word	0x2001b260
 8001704:	2001adc0 	.word	0x2001adc0
 8001708:	08027830 	.word	0x08027830
 800170c:	08027840 	.word	0x08027840
 8001710:	080278f4 	.word	0x080278f4
 8001714:	08027848 	.word	0x08027848
 8001718:	08027850 	.word	0x08027850
 800171c:	200006ec 	.word	0x200006ec
 8001720:	08027858 	.word	0x08027858
 8001724:	20000740 	.word	0x20000740
 8001728:	08027860 	.word	0x08027860
 800172c:	20001cc4 	.word	0x20001cc4
 8001730:	08027868 	.word	0x08027868
 8001734:	08027870 	.word	0x08027870
 8001738:	080277e0 	.word	0x080277e0
 800173c:	08027828 	.word	0x08027828
 8001740:	08027878 	.word	0x08027878
 8001744:	08027804 	.word	0x08027804
 8001748:	08027880 	.word	0x08027880
 800174c:	08027888 	.word	0x08027888

08001750 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
lcd_trigcharts() {
 8001750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 8001754:	4931      	ldr	r1, [pc, #196]	; (800181c <lcd_trigcharts+0xcc>)
lcd_trigcharts() {
 8001756:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8001758:	4831      	ldr	r0, [pc, #196]	; (8001820 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 800175a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 800175e:	f7ff fdef 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 8001762:	492e      	ldr	r1, [pc, #184]	; (800181c <lcd_trigcharts+0xcc>)
 8001764:	482f      	ldr	r0, [pc, #188]	; (8001824 <lcd_trigcharts+0xd4>)
 8001766:	f7ff fdeb 	bl	8001340 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 800176a:	492f      	ldr	r1, [pc, #188]	; (8001828 <lcd_trigcharts+0xd8>)
 800176c:	482f      	ldr	r0, [pc, #188]	; (800182c <lcd_trigcharts+0xdc>)
 800176e:	f7ff fde7 	bl	8001340 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 8001772:	492d      	ldr	r1, [pc, #180]	; (8001828 <lcd_trigcharts+0xd8>)
 8001774:	482e      	ldr	r0, [pc, #184]	; (8001830 <lcd_trigcharts+0xe0>)
 8001776:	f7ff fde3 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800177a:	4b2e      	ldr	r3, [pc, #184]	; (8001834 <lcd_trigcharts+0xe4>)
 800177c:	492e      	ldr	r1, [pc, #184]	; (8001838 <lcd_trigcharts+0xe8>)
 800177e:	4668      	mov	r0, sp
 8001780:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001782:	f021 fe27 	bl	80233d4 <siprintf>
	setlcdtext("t0.txt", str);
 8001786:	4669      	mov	r1, sp
 8001788:	482c      	ldr	r0, [pc, #176]	; (800183c <lcd_trigcharts+0xec>)
 800178a:	f7ff fdd9 	bl	8001340 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800178e:	4b2c      	ldr	r3, [pc, #176]	; (8001840 <lcd_trigcharts+0xf0>)
 8001790:	4929      	ldr	r1, [pc, #164]	; (8001838 <lcd_trigcharts+0xe8>)
 8001792:	4668      	mov	r0, sp
 8001794:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001798:	4f2a      	ldr	r7, [pc, #168]	; (8001844 <lcd_trigcharts+0xf4>)
 800179a:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800179c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8001860 <lcd_trigcharts+0x110>
 80017a0:	4e29      	ldr	r6, [pc, #164]	; (8001848 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80017a2:	bfb8      	it	lt
 80017a4:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 80017a6:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8001864 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 80017aa:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80017ae:	f021 fe11 	bl	80233d4 <siprintf>
	setlcdtext("t2.txt", str);
 80017b2:	4669      	mov	r1, sp
 80017b4:	4825      	ldr	r0, [pc, #148]	; (800184c <lcd_trigcharts+0xfc>)
 80017b6:	f7ff fdc3 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 80017ba:	4825      	ldr	r0, [pc, #148]	; (8001850 <lcd_trigcharts+0x100>)
 80017bc:	f7ff fda6 	bl	800130c <writelcdcmd>
	buffi = trigindex;
 80017c0:	4b24      	ldr	r3, [pc, #144]	; (8001854 <lcd_trigcharts+0x104>)
 80017c2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 80017c4:	e01c      	b.n	8001800 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80017c6:	f819 2004 	ldrb.w	r2, [r9, r4]
 80017ca:	f021 fe03 	bl	80233d4 <siprintf>
		writelcdcmd(str);
 80017ce:	4668      	mov	r0, sp
 80017d0:	f7ff fd9c 	bl	800130c <writelcdcmd>
		osDelay(15);
 80017d4:	200f      	movs	r0, #15
 80017d6:	f011 ff25 	bl	8013624 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 80017da:	f818 2004 	ldrb.w	r2, [r8, r4]
 80017de:	491e      	ldr	r1, [pc, #120]	; (8001858 <lcd_trigcharts+0x108>)
 80017e0:	4668      	mov	r0, sp
 80017e2:	f021 fdf7 	bl	80233d4 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80017e6:	3401      	adds	r4, #1
		writelcdcmd(str);
 80017e8:	4668      	mov	r0, sp
 80017ea:	f7ff fd8f 	bl	800130c <writelcdcmd>
		osDelay(15);
 80017ee:	200f      	movs	r0, #15
 80017f0:	f011 ff18 	bl	8013624 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80017f4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80017f8:	bfc8      	it	gt
 80017fa:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80017fc:	3d01      	subs	r5, #1
 80017fe:	d007      	beq.n	8001810 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 8001800:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 8001802:	4631      	mov	r1, r6
 8001804:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 8001806:	2b02      	cmp	r3, #2
 8001808:	d0dd      	beq.n	80017c6 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 800180a:	b009      	add	sp, #36	; 0x24
 800180c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001810:	4812      	ldr	r0, [pc, #72]	; (800185c <lcd_trigcharts+0x10c>)
 8001812:	f7ff fd7b 	bl	800130c <writelcdcmd>
}
 8001816:	b009      	add	sp, #36	; 0x24
 8001818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800181c:	080278c4 	.word	0x080278c4
 8001820:	08027804 	.word	0x08027804
 8001824:	080278d0 	.word	0x080278d0
 8001828:	080278d8 	.word	0x080278d8
 800182c:	08027880 	.word	0x08027880
 8001830:	08027828 	.word	0x08027828
 8001834:	2001adc0 	.word	0x2001adc0
 8001838:	080278f4 	.word	0x080278f4
 800183c:	080277e0 	.word	0x080277e0
 8001840:	20000740 	.word	0x20000740
 8001844:	20001824 	.word	0x20001824
 8001848:	080278ec 	.word	0x080278ec
 800184c:	08027878 	.word	0x08027878
 8001850:	080278e0 	.word	0x080278e0
 8001854:	20001a18 	.word	0x20001a18
 8001858:	080278f8 	.word	0x080278f8
 800185c:	08027904 	.word	0x08027904
 8001860:	20001a1c 	.word	0x20001a1c
 8001864:	20001644 	.word	0x20001644

08001868 <lcd_trigplot>:

// called at regular intervals to add a point to the display
// update lcd trigger and noise plot memory,
// the page display may not be showing  ( 120 pix height)
lcd_trigplot() {
 8001868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int val;
	static uint32_t lasttrig;
	unsigned char str[32];

// process the triggers
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 800186c:	493c      	ldr	r1, [pc, #240]	; (8001960 <lcd_trigplot+0xf8>)
lcd_trigplot() {
 800186e:	b088      	sub	sp, #32
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001870:	4d3c      	ldr	r5, [pc, #240]	; (8001964 <lcd_trigplot+0xfc>)
	if (val >= 120)
		val = 119;		// max Y
	trigvec[trigindex] = val;

// process the noise
	val = abs(meanwindiff) & 0xfff;
 8001872:	4e3d      	ldr	r6, [pc, #244]	; (8001968 <lcd_trigplot+0x100>)
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 8001874:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001876:	6808      	ldr	r0, [r1, #0]
	val = abs(meanwindiff) & 0xfff;
 8001878:	f9b6 3000 	ldrsh.w	r3, [r6]
	val = statuspkt.trigcount - lasttrig;	// difference in trigs since last time
 800187c:	1a12      	subs	r2, r2, r0

	if (val >= 120)
		val = 119;		// max Y
	noisevec[trigindex] = val;

	if (our_currentpage == 2) {		// if currently displaying on LCD
 800187e:	f8df c128 	ldr.w	ip, [pc, #296]	; 80019a8 <lcd_trigplot+0x140>
	val = abs(meanwindiff) & 0xfff;
 8001882:	2b00      	cmp	r3, #0
	lasttrig = statuspkt.trigcount;
 8001884:	f8d5 e07c 	ldr.w	lr, [r5, #124]	; 0x7c
	val = val * 32;		// scale up: n pixels per trigger
 8001888:	ea4f 1242 	mov.w	r2, r2, lsl #5
	trigvec[trigindex] = val;
 800188c:	4c37      	ldr	r4, [pc, #220]	; (800196c <lcd_trigplot+0x104>)
	val = abs(meanwindiff) & 0xfff;
 800188e:	bfb8      	it	lt
 8001890:	425b      	neglt	r3, r3
	if (our_currentpage == 2) {		// if currently displaying on LCD
 8001892:	f89c c000 	ldrb.w	ip, [ip]
	trigvec[trigindex] = val;
 8001896:	2a77      	cmp	r2, #119	; 0x77
 8001898:	6820      	ldr	r0, [r4, #0]
	val = abs(meanwindiff) & 0xfff;
 800189a:	f3c3 030b 	ubfx	r3, r3, #0, #12
	trigvec[trigindex] = val;
 800189e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 80019ac <lcd_trigplot+0x144>
 80018a2:	bfa8      	it	ge
 80018a4:	2277      	movge	r2, #119	; 0x77
	noisevec[trigindex] = val;
 80018a6:	4f32      	ldr	r7, [pc, #200]	; (8001970 <lcd_trigplot+0x108>)
 80018a8:	2b77      	cmp	r3, #119	; 0x77
	lasttrig = statuspkt.trigcount;
 80018aa:	f8c1 e000 	str.w	lr, [r1]
	trigvec[trigindex] = val;
 80018ae:	f808 2000 	strb.w	r2, [r8, r0]
	noisevec[trigindex] = val;
 80018b2:	bfa8      	it	ge
 80018b4:	2377      	movge	r3, #119	; 0x77
	if (our_currentpage == 2) {		// if currently displaying on LCD
 80018b6:	f1bc 0f02 	cmp.w	ip, #2
	noisevec[trigindex] = val;
 80018ba:	543b      	strb	r3, [r7, r0]
	if (our_currentpage == 2) {		// if currently displaying on LCD
 80018bc:	d00c      	beq.n	80018d8 <lcd_trigplot+0x70>
		// bring chart labels to the front
		writelcdcmd("vis t3,1");
		writelcdcmd("vis t4,1");
	}

	trigindex++;
 80018be:	3001      	adds	r0, #1
	if (trigindex >= LCDXPIXELS)
 80018c0:	f5b0 7ff0 	cmp.w	r0, #480	; 0x1e0
 80018c4:	da03      	bge.n	80018ce <lcd_trigplot+0x66>
	trigindex++;
 80018c6:	6020      	str	r0, [r4, #0]
		trigindex = 0;
}
 80018c8:	b008      	add	sp, #32
 80018ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		trigindex = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	6023      	str	r3, [r4, #0]
}
 80018d2:	b008      	add	sp, #32
 80018d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		setlcdtext("t3.txt", "Triggers");
 80018d8:	4926      	ldr	r1, [pc, #152]	; (8001974 <lcd_trigplot+0x10c>)
 80018da:	4827      	ldr	r0, [pc, #156]	; (8001978 <lcd_trigplot+0x110>)
 80018dc:	f7ff fd30 	bl	8001340 <setlcdtext>
		setlcdtext("t18.txt", "Triggers");
 80018e0:	4924      	ldr	r1, [pc, #144]	; (8001974 <lcd_trigplot+0x10c>)
 80018e2:	4826      	ldr	r0, [pc, #152]	; (800197c <lcd_trigplot+0x114>)
 80018e4:	f7ff fd2c 	bl	8001340 <setlcdtext>
		setlcdtext("t4.txt", "Noise");
 80018e8:	4925      	ldr	r1, [pc, #148]	; (8001980 <lcd_trigplot+0x118>)
 80018ea:	4826      	ldr	r0, [pc, #152]	; (8001984 <lcd_trigplot+0x11c>)
 80018ec:	f7ff fd28 	bl	8001340 <setlcdtext>
		setlcdtext("t1.txt", "Noise");
 80018f0:	4923      	ldr	r1, [pc, #140]	; (8001980 <lcd_trigplot+0x118>)
 80018f2:	4825      	ldr	r0, [pc, #148]	; (8001988 <lcd_trigplot+0x120>)
 80018f4:	f7ff fd24 	bl	8001340 <setlcdtext>
		sprintf(str, "add 2,0,%d", trigvec[trigindex]);
 80018f8:	6823      	ldr	r3, [r4, #0]
 80018fa:	4924      	ldr	r1, [pc, #144]	; (800198c <lcd_trigplot+0x124>)
 80018fc:	4668      	mov	r0, sp
 80018fe:	f818 2003 	ldrb.w	r2, [r8, r3]
 8001902:	f021 fd67 	bl	80233d4 <siprintf>
		writelcdcmd(str);
 8001906:	4668      	mov	r0, sp
 8001908:	f7ff fd00 	bl	800130c <writelcdcmd>
		sprintf(str, "add 5,0,%d", noisevec[trigindex]);
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	4920      	ldr	r1, [pc, #128]	; (8001990 <lcd_trigplot+0x128>)
 8001910:	4668      	mov	r0, sp
 8001912:	5cfa      	ldrb	r2, [r7, r3]
 8001914:	f021 fd5e 	bl	80233d4 <siprintf>
		writelcdcmd(str);
 8001918:	4668      	mov	r0, sp
 800191a:	f7ff fcf7 	bl	800130c <writelcdcmd>
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800191e:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 8001920:	491c      	ldr	r1, [pc, #112]	; (8001994 <lcd_trigplot+0x12c>)
 8001922:	4668      	mov	r0, sp
 8001924:	f021 fd56 	bl	80233d4 <siprintf>
		setlcdtext("t0.txt", str);
 8001928:	4669      	mov	r1, sp
 800192a:	481b      	ldr	r0, [pc, #108]	; (8001998 <lcd_trigplot+0x130>)
 800192c:	f7ff fd08 	bl	8001340 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8001930:	f9b6 2000 	ldrsh.w	r2, [r6]
 8001934:	4917      	ldr	r1, [pc, #92]	; (8001994 <lcd_trigplot+0x12c>)
 8001936:	4668      	mov	r0, sp
 8001938:	2a00      	cmp	r2, #0
 800193a:	bfb8      	it	lt
 800193c:	4252      	neglt	r2, r2
 800193e:	f3c2 020b 	ubfx	r2, r2, #0, #12
 8001942:	f021 fd47 	bl	80233d4 <siprintf>
		setlcdtext("t2.txt", str);
 8001946:	4669      	mov	r1, sp
 8001948:	4814      	ldr	r0, [pc, #80]	; (800199c <lcd_trigplot+0x134>)
 800194a:	f7ff fcf9 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 800194e:	4814      	ldr	r0, [pc, #80]	; (80019a0 <lcd_trigplot+0x138>)
 8001950:	f7ff fcdc 	bl	800130c <writelcdcmd>
		writelcdcmd("vis t4,1");
 8001954:	4813      	ldr	r0, [pc, #76]	; (80019a4 <lcd_trigplot+0x13c>)
 8001956:	f7ff fcd9 	bl	800130c <writelcdcmd>
 800195a:	6820      	ldr	r0, [r4, #0]
 800195c:	e7af      	b.n	80018be <lcd_trigplot+0x56>
 800195e:	bf00      	nop
 8001960:	200015a8 	.word	0x200015a8
 8001964:	2001adc0 	.word	0x2001adc0
 8001968:	20000740 	.word	0x20000740
 800196c:	20001a18 	.word	0x20001a18
 8001970:	20001644 	.word	0x20001644
 8001974:	080278c4 	.word	0x080278c4
 8001978:	08027804 	.word	0x08027804
 800197c:	080278d0 	.word	0x080278d0
 8001980:	080278d8 	.word	0x080278d8
 8001984:	08027880 	.word	0x08027880
 8001988:	08027828 	.word	0x08027828
 800198c:	080278ec 	.word	0x080278ec
 8001990:	080278f8 	.word	0x080278f8
 8001994:	080278f4 	.word	0x080278f4
 8001998:	080277e0 	.word	0x080277e0
 800199c:	08027878 	.word	0x08027878
 80019a0:	0802780c 	.word	0x0802780c
 80019a4:	08027914 	.word	0x08027914
 80019a8:	20001824 	.word	0x20001824
 80019ac:	20001a1c 	.word	0x20001a1c

080019b0 <lcd_presscharts>:

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
lcd_presscharts() {
 80019b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 80019b4:	4920      	ldr	r1, [pc, #128]	; (8001a38 <lcd_presscharts+0x88>)
lcd_presscharts() {
 80019b6:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 80019b8:	4820      	ldr	r0, [pc, #128]	; (8001a3c <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 80019ba:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 80019be:	f7ff fcbf 	bl	8001340 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 80019c2:	491d      	ldr	r1, [pc, #116]	; (8001a38 <lcd_presscharts+0x88>)
 80019c4:	481e      	ldr	r0, [pc, #120]	; (8001a40 <lcd_presscharts+0x90>)
 80019c6:	f7ff fcbb 	bl	8001340 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 80019ca:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <lcd_presscharts+0x94>)
 80019cc:	4a1e      	ldr	r2, [pc, #120]	; (8001a48 <lcd_presscharts+0x98>)
 80019ce:	4668      	mov	r0, sp
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	491d      	ldr	r1, [pc, #116]	; (8001a4c <lcd_presscharts+0x9c>)
 80019d8:	f021 fcfc 	bl	80233d4 <siprintf>
	setlcdtext("t0.txt", str);
 80019dc:	4669      	mov	r1, sp
 80019de:	481c      	ldr	r0, [pc, #112]	; (8001a50 <lcd_presscharts+0xa0>)
 80019e0:	f7ff fcae 	bl	8001340 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 80019e4:	481b      	ldr	r0, [pc, #108]	; (8001a54 <lcd_presscharts+0xa4>)
 80019e6:	f7ff fc91 	bl	800130c <writelcdcmd>
	buffi = pressindex;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <lcd_presscharts+0xa8>)
 80019ec:	4f1b      	ldr	r7, [pc, #108]	; (8001a5c <lcd_presscharts+0xac>)
 80019ee:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019f0:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8001a68 <lcd_presscharts+0xb8>
 80019f4:	4e1a      	ldr	r6, [pc, #104]	; (8001a60 <lcd_presscharts+0xb0>)
 80019f6:	e010      	b.n	8001a1a <lcd_presscharts+0x6a>
 80019f8:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80019fc:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80019fe:	f021 fce9 	bl	80233d4 <siprintf>
		writelcdcmd(str);
 8001a02:	4668      	mov	r0, sp
 8001a04:	f7ff fc82 	bl	800130c <writelcdcmd>
		osDelay(15);
 8001a08:	200f      	movs	r0, #15
 8001a0a:	f011 fe0b 	bl	8013624 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 8001a0e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8001a12:	bfc8      	it	gt
 8001a14:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 8001a16:	3d01      	subs	r5, #1
 8001a18:	d007      	beq.n	8001a2a <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 8001a1a:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8001a1c:	4631      	mov	r1, r6
 8001a1e:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d0e9      	beq.n	80019f8 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 8001a24:	b008      	add	sp, #32
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8001a2a:	480e      	ldr	r0, [pc, #56]	; (8001a64 <lcd_presscharts+0xb4>)
 8001a2c:	f7ff fc6e 	bl	800130c <writelcdcmd>
}
 8001a30:	b008      	add	sp, #32
 8001a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001a36:	bf00      	nop
 8001a38:	08027920 	.word	0x08027920
 8001a3c:	08027804 	.word	0x08027804
 8001a40:	080278d0 	.word	0x080278d0
 8001a44:	2001bd64 	.word	0x2001bd64
 8001a48:	2001bd60 	.word	0x2001bd60
 8001a4c:	0802792c 	.word	0x0802792c
 8001a50:	080277e0 	.word	0x080277e0
 8001a54:	080278e0 	.word	0x080278e0
 8001a58:	20001828 	.word	0x20001828
 8001a5c:	20001824 	.word	0x20001824
 8001a60:	080278ec 	.word	0x080278ec
 8001a64:	08027904 	.word	0x08027904
 8001a68:	2000182c 	.word	0x2000182c

08001a6c <lcd_pressplot>:

// called at regular intervals to add a point to the display
// update lcd pressure memory,
// the page display may not be showing  (240 pix height)
lcd_pressplot() {
 8001a6c:	b570      	push	{r4, r5, r6, lr}
	volatile int p, pf, val;
	unsigned char str[32];

	p = pressure;
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a6e:	4d2c      	ldr	r5, [pc, #176]	; (8001b20 <lcd_pressplot+0xb4>)
lcd_pressplot() {
 8001a70:	b08c      	sub	sp, #48	; 0x30
	p = pressure;
 8001a72:	4c2c      	ldr	r4, [pc, #176]	; (8001b24 <lcd_pressplot+0xb8>)

	p = pressure * 1000 + pf;
 8001a74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a78:	682a      	ldr	r2, [r5, #0]
	p = pressure;
 8001a7a:	6823      	ldr	r3, [r4, #0]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a7c:	0892      	lsrs	r2, r2, #2
	if (p < 93000)
 8001a7e:	492a      	ldr	r1, [pc, #168]	; (8001b28 <lcd_pressplot+0xbc>)
	p = pressure;
 8001a80:	9301      	str	r3, [sp, #4]
	pf = pressfrac >> 2;		// frac base was in quarters
 8001a82:	9202      	str	r2, [sp, #8]
	p = pressure * 1000 + pf;
 8001a84:	9a02      	ldr	r2, [sp, #8]
 8001a86:	fb00 2303 	mla	r3, r0, r3, r2
 8001a8a:	9301      	str	r3, [sp, #4]
	if (p < 93000)
 8001a8c:	9b01      	ldr	r3, [sp, #4]
 8001a8e:	428b      	cmp	r3, r1
 8001a90:	dc01      	bgt.n	8001a96 <lcd_pressplot+0x2a>
		p = 93000;		// 93 HPa
 8001a92:	4b26      	ldr	r3, [pc, #152]	; (8001b2c <lcd_pressplot+0xc0>)
 8001a94:	9301      	str	r3, [sp, #4]
	if (p > 103000)
 8001a96:	9a01      	ldr	r2, [sp, #4]
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <lcd_pressplot+0xc4>)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	dd00      	ble.n	8001aa0 <lcd_pressplot+0x34>
		p - 103000;		// 103 HPa
 8001a9e:	9b01      	ldr	r3, [sp, #4]

	p = p - 93000;
 8001aa0:	9901      	ldr	r1, [sp, #4]
 8001aa2:	4b24      	ldr	r3, [pc, #144]	; (8001b34 <lcd_pressplot+0xc8>)
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001aa4:	4a24      	ldr	r2, [pc, #144]	; (8001b38 <lcd_pressplot+0xcc>)
	p = p - 93000;
 8001aa6:	440b      	add	r3, r1
 8001aa8:	9301      	str	r3, [sp, #4]
	val = p / (10000 / 240);		// scale for 240 Y steps on chart
 8001aaa:	9b01      	ldr	r3, [sp, #4]
 8001aac:	fb82 1203 	smull	r1, r2, r2, r3
 8001ab0:	17db      	asrs	r3, r3, #31
 8001ab2:	ebc3 1322 	rsb	r3, r3, r2, asr #4
 8001ab6:	9303      	str	r3, [sp, #12]

//	printf("pressure for LCD %d", val);

//	val = rand() & 0xFF;  // 0 - 255

	if (val < 0)
 8001ab8:	9b03      	ldr	r3, [sp, #12]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	da01      	bge.n	8001ac2 <lcd_pressplot+0x56>
		val = 0;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	9303      	str	r3, [sp, #12]
	if (val >= 240)
 8001ac2:	9b03      	ldr	r3, [sp, #12]
 8001ac4:	2bef      	cmp	r3, #239	; 0xef
 8001ac6:	dd01      	ble.n	8001acc <lcd_pressplot+0x60>
		val = 239;		// max Y
 8001ac8:	23ef      	movs	r3, #239	; 0xef
 8001aca:	9303      	str	r3, [sp, #12]
	pressvec[pressindex] = val;

	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001acc:	491b      	ldr	r1, [pc, #108]	; (8001b3c <lcd_pressplot+0xd0>)
	pressvec[pressindex] = val;
 8001ace:	9a03      	ldr	r2, [sp, #12]
 8001ad0:	4e1b      	ldr	r6, [pc, #108]	; (8001b40 <lcd_pressplot+0xd4>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001ad2:	7809      	ldrb	r1, [r1, #0]
	pressvec[pressindex] = val;
 8001ad4:	6833      	ldr	r3, [r6, #0]
 8001ad6:	481b      	ldr	r0, [pc, #108]	; (8001b44 <lcd_pressplot+0xd8>)
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001ad8:	2903      	cmp	r1, #3
	pressvec[pressindex] = val;
 8001ada:	54c2      	strb	r2, [r0, r3]
	if (our_currentpage == 3) {		// if currently displaying on LCD
 8001adc:	d007      	beq.n	8001aee <lcd_pressplot+0x82>

		// bring chart labels to the front
		writelcdcmd("vis t3,1");
	}

	pressindex++;
 8001ade:	3301      	adds	r3, #1
	if (pressindex >= LCDXPIXELS)
 8001ae0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
		pressindex = 0;
 8001ae4:	bfa8      	it	ge
 8001ae6:	2300      	movge	r3, #0
 8001ae8:	6033      	str	r3, [r6, #0]
}
 8001aea:	b00c      	add	sp, #48	; 0x30
 8001aec:	bd70      	pop	{r4, r5, r6, pc}
		sprintf(str, "add 2,0,%d", pressvec[pressindex]);
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	4915      	ldr	r1, [pc, #84]	; (8001b48 <lcd_pressplot+0xdc>)
 8001af2:	a804      	add	r0, sp, #16
 8001af4:	f021 fc6e 	bl	80233d4 <siprintf>
		writelcdcmd(str);
 8001af8:	a804      	add	r0, sp, #16
 8001afa:	f7ff fc07 	bl	800130c <writelcdcmd>
		sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8001afe:	682b      	ldr	r3, [r5, #0]
 8001b00:	6822      	ldr	r2, [r4, #0]
 8001b02:	a804      	add	r0, sp, #16
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	4911      	ldr	r1, [pc, #68]	; (8001b4c <lcd_pressplot+0xe0>)
 8001b08:	f021 fc64 	bl	80233d4 <siprintf>
		setlcdtext("t0.txt", str);
 8001b0c:	a904      	add	r1, sp, #16
 8001b0e:	4810      	ldr	r0, [pc, #64]	; (8001b50 <lcd_pressplot+0xe4>)
 8001b10:	f7ff fc16 	bl	8001340 <setlcdtext>
		writelcdcmd("vis t3,1");
 8001b14:	480f      	ldr	r0, [pc, #60]	; (8001b54 <lcd_pressplot+0xe8>)
 8001b16:	f7ff fbf9 	bl	800130c <writelcdcmd>
 8001b1a:	6833      	ldr	r3, [r6, #0]
 8001b1c:	e7df      	b.n	8001ade <lcd_pressplot+0x72>
 8001b1e:	bf00      	nop
 8001b20:	2001bd64 	.word	0x2001bd64
 8001b24:	2001bd60 	.word	0x2001bd60
 8001b28:	00016b47 	.word	0x00016b47
 8001b2c:	00016b48 	.word	0x00016b48
 8001b30:	00019258 	.word	0x00019258
 8001b34:	fffe94b8 	.word	0xfffe94b8
 8001b38:	63e7063f 	.word	0x63e7063f
 8001b3c:	20001824 	.word	0x20001824
 8001b40:	20001828 	.word	0x20001828
 8001b44:	2000182c 	.word	0x2000182c
 8001b48:	080278ec 	.word	0x080278ec
 8001b4c:	0802792c 	.word	0x0802792c
 8001b50:	080277e0 	.word	0x080277e0
 8001b54:	0802780c 	.word	0x0802780c

08001b58 <lcd_controls>:

// refresh the entire control page on the lcd
lcd_controls() {
 8001b58:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8001b5a:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8001b5c:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8001b5e:	f011 fd61 	bl	8013624 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8001b62:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <lcd_controls+0x48>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	d002      	beq.n	8001b70 <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8001b6a:	b00d      	add	sp, #52	; 0x34
 8001b6c:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8001b70:	490c      	ldr	r1, [pc, #48]	; (8001ba4 <lcd_controls+0x4c>)
 8001b72:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <lcd_controls+0x50>)
 8001b74:	f7ff fbe4 	bl	8001340 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8001b78:	490c      	ldr	r1, [pc, #48]	; (8001bac <lcd_controls+0x54>)
 8001b7a:	480d      	ldr	r0, [pc, #52]	; (8001bb0 <lcd_controls+0x58>)
 8001b7c:	f7ff fbe0 	bl	8001340 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <lcd_controls+0x5c>)
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <lcd_controls+0x60>)
 8001b84:	f7ff fbdc 	bl	8001340 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8001b88:	4a0c      	ldr	r2, [pc, #48]	; (8001bbc <lcd_controls+0x64>)
 8001b8a:	4668      	mov	r0, sp
 8001b8c:	490c      	ldr	r1, [pc, #48]	; (8001bc0 <lcd_controls+0x68>)
 8001b8e:	f021 fc21 	bl	80233d4 <siprintf>
		setlcdtext("t3.txt", str);
 8001b92:	4669      	mov	r1, sp
 8001b94:	480b      	ldr	r0, [pc, #44]	; (8001bc4 <lcd_controls+0x6c>)
 8001b96:	f7ff fbd3 	bl	8001340 <setlcdtext>
}
 8001b9a:	b00d      	add	sp, #52	; 0x34
 8001b9c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001ba0:	20001824 	.word	0x20001824
 8001ba4:	08027938 	.word	0x08027938
 8001ba8:	080277e0 	.word	0x080277e0
 8001bac:	08027940 	.word	0x08027940
 8001bb0:	08027828 	.word	0x08027828
 8001bb4:	08027948 	.word	0x08027948
 8001bb8:	08027878 	.word	0x08027878
 8001bbc:	2001be30 	.word	0x2001be30
 8001bc0:	08027958 	.word	0x08027958
 8001bc4:	08027804 	.word	0x08027804

08001bc8 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8001bc8:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8001bca:	4c15      	ldr	r4, [pc, #84]	; (8001c20 <lcd_pagechange+0x58>)
 8001bcc:	7823      	ldrb	r3, [r4, #0]
 8001bce:	4283      	cmp	r3, r0
 8001bd0:	d00b      	beq.n	8001bea <lcd_pagechange+0x22>
	our_currentpage = newpage;
 8001bd2:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8001bd4:	2805      	cmp	r0, #5
 8001bd6:	d81f      	bhi.n	8001c18 <lcd_pagechange+0x50>
 8001bd8:	e8df f000 	tbb	[pc, r0]
 8001bdc:	19140f03 	.word	0x19140f03
 8001be0:	070a      	.short	0x070a
		lcd_time();
 8001be2:	f7ff fc4d 	bl	8001480 <lcd_time>
		lcd_date();
 8001be6:	f7ff fc9d 	bl	8001524 <lcd_date>
	return (our_currentpage);
 8001bea:	7820      	ldrb	r0, [r4, #0]
 8001bec:	b2c0      	uxtb	r0, r0
}
 8001bee:	bd10      	pop	{r4, pc}
		lcd_controls();
 8001bf0:	f7ff ffb2 	bl	8001b58 <lcd_controls>
	return (our_currentpage);
 8001bf4:	7820      	ldrb	r0, [r4, #0]
 8001bf6:	b2c0      	uxtb	r0, r0
}
 8001bf8:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8001bfa:	f7ff fcaf 	bl	800155c <lcd_showvars>
	return (our_currentpage);
 8001bfe:	7820      	ldrb	r0, [r4, #0]
 8001c00:	b2c0      	uxtb	r0, r0
}
 8001c02:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8001c04:	f7ff fda4 	bl	8001750 <lcd_trigcharts>
	return (our_currentpage);
 8001c08:	7820      	ldrb	r0, [r4, #0]
 8001c0a:	b2c0      	uxtb	r0, r0
}
 8001c0c:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8001c0e:	f7ff fecf 	bl	80019b0 <lcd_presscharts>
	return (our_currentpage);
 8001c12:	7820      	ldrb	r0, [r4, #0]
 8001c14:	b2c0      	uxtb	r0, r0
}
 8001c16:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8001c18:	4802      	ldr	r0, [pc, #8]	; (8001c24 <lcd_pagechange+0x5c>)
 8001c1a:	f021 faff 	bl	802321c <puts>
		break;
 8001c1e:	e7e4      	b.n	8001bea <lcd_pagechange+0x22>
 8001c20:	20001824 	.word	0x20001824
 8001c24:	08027970 	.word	0x08027970

08001c28 <lcd_event_process>:
int lcd_event_process(void) {
 8001c28:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001c2a:	4c8f      	ldr	r4, [pc, #572]	; (8001e68 <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8001c2c:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8001c2e:	2120      	movs	r1, #32
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7ff fbb7 	bl	80013a4 <isnexpkt>
 8001c36:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	dd47      	ble.n	8001cce <lcd_event_process+0xa6>
		lcdstatus = eventbuffer[0];
 8001c3e:	7821      	ldrb	r1, [r4, #0]
 8001c40:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c42:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8001c44:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8001c46:	d925      	bls.n	8001c94 <lcd_event_process+0x6c>
			switch (eventbuffer[0]) {
 8001c48:	2965      	cmp	r1, #101	; 0x65
 8001c4a:	d067      	beq.n	8001d1c <lcd_event_process+0xf4>
 8001c4c:	2966      	cmp	r1, #102	; 0x66
 8001c4e:	d046      	beq.n	8001cde <lcd_event_process+0xb6>
 8001c50:	2924      	cmp	r1, #36	; 0x24
 8001c52:	d03f      	beq.n	8001cd4 <lcd_event_process+0xac>
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8001c54:	4886      	ldr	r0, [pc, #536]	; (8001e70 <lcd_event_process+0x248>)
 8001c56:	f021 fa45 	bl	80230e4 <iprintf>
				i = 0;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c5e:	9b00      	ldr	r3, [sp, #0]
 8001c60:	5ce3      	ldrb	r3, [r4, r3]
 8001c62:	2bff      	cmp	r3, #255	; 0xff
 8001c64:	d00f      	beq.n	8001c86 <lcd_event_process+0x5e>
					printf(" 0x%02x", eventbuffer[i++]);
 8001c66:	4d83      	ldr	r5, [pc, #524]	; (8001e74 <lcd_event_process+0x24c>)
 8001c68:	e009      	b.n	8001c7e <lcd_event_process+0x56>
 8001c6a:	9b00      	ldr	r3, [sp, #0]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	5ce1      	ldrb	r1, [r4, r3]
 8001c70:	9200      	str	r2, [sp, #0]
 8001c72:	f021 fa37 	bl	80230e4 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c76:	9b00      	ldr	r3, [sp, #0]
 8001c78:	5ce3      	ldrb	r3, [r4, r3]
 8001c7a:	2bff      	cmp	r3, #255	; 0xff
 8001c7c:	d003      	beq.n	8001c86 <lcd_event_process+0x5e>
 8001c7e:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8001c80:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8001c82:	2b1f      	cmp	r3, #31
 8001c84:	d9f1      	bls.n	8001c6a <lcd_event_process+0x42>
				printf("\n");
 8001c86:	200a      	movs	r0, #10
 8001c88:	f021 fa44 	bl	8023114 <putchar>
				return (-1);
 8001c8c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001c90:	b003      	add	sp, #12
 8001c92:	bd30      	pop	{r4, r5, pc}
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8001c94:	2901      	cmp	r1, #1
 8001c96:	d0fb      	beq.n	8001c90 <lcd_event_process+0x68>
				printf("Nextion reported: ");
 8001c98:	4877      	ldr	r0, [pc, #476]	; (8001e78 <lcd_event_process+0x250>)
 8001c9a:	f021 fa23 	bl	80230e4 <iprintf>
				switch (eventbuffer[0]) {
 8001c9e:	7821      	ldrb	r1, [r4, #0]
 8001ca0:	2924      	cmp	r1, #36	; 0x24
 8001ca2:	d846      	bhi.n	8001d32 <lcd_event_process+0x10a>
 8001ca4:	e8df f001 	tbb	[pc, r1]
 8001ca8:	4582878c 	.word	0x4582878c
 8001cac:	45454545 	.word	0x45454545
 8001cb0:	45454545 	.word	0x45454545
 8001cb4:	45454545 	.word	0x45454545
 8001cb8:	457a4545 	.word	0x457a4545
 8001cbc:	45454545 	.word	0x45454545
 8001cc0:	45724545 	.word	0x45724545
 8001cc4:	4566456c 	.word	0x4566456c
 8001cc8:	5a454560 	.word	0x5a454560
 8001ccc:	54          	.byte	0x54
 8001ccd:	00          	.byte	0x00
		return (result);		// 0 = nothing found, -1 = timeout
 8001cce:	9801      	ldr	r0, [sp, #4]
}
 8001cd0:	b003      	add	sp, #12
 8001cd2:	bd30      	pop	{r4, r5, pc}
				printf("Serial Buffer Overflow!\n");
 8001cd4:	4869      	ldr	r0, [pc, #420]	; (8001e7c <lcd_event_process+0x254>)
 8001cd6:	f021 faa1 	bl	802321c <puts>
				return (1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e7d8      	b.n	8001c90 <lcd_event_process+0x68>
				setlcddim(lcdbright);
 8001cde:	4968      	ldr	r1, [pc, #416]	; (8001e80 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8001ce0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001ce4:	4b67      	ldr	r3, [pc, #412]	; (8001e84 <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8001ce6:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8001ce8:	4867      	ldr	r0, [pc, #412]	; (8001e88 <lcd_event_process+0x260>)
 8001cea:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8001cec:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001cee:	bf28      	it	cs
 8001cf0:	2163      	movcs	r1, #99	; 0x63
 8001cf2:	f7ff fb39 	bl	8001368 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8001cf6:	7860      	ldrb	r0, [r4, #1]
 8001cf8:	f7ff ff66 	bl	8001bc8 <lcd_pagechange>
 8001cfc:	2800      	cmp	r0, #0
 8001cfe:	db04      	blt.n	8001d0a <lcd_event_process+0xe2>
 8001d00:	7860      	ldrb	r0, [r4, #1]
 8001d02:	f7ff ff61 	bl	8001bc8 <lcd_pagechange>
 8001d06:	2805      	cmp	r0, #5
 8001d08:	dd19      	ble.n	8001d3e <lcd_event_process+0x116>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001d0a:	7860      	ldrb	r0, [r4, #1]
 8001d0c:	f7ff ff5c 	bl	8001bc8 <lcd_pagechange>
 8001d10:	4601      	mov	r1, r0
 8001d12:	485e      	ldr	r0, [pc, #376]	; (8001e8c <lcd_event_process+0x264>)
 8001d14:	f021 f9e6 	bl	80230e4 <iprintf>
			return (0);
 8001d18:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8001d1a:	e7b9      	b.n	8001c90 <lcd_event_process+0x68>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8001d1c:	78e3      	ldrb	r3, [r4, #3]
 8001d1e:	78a2      	ldrb	r2, [r4, #2]
 8001d20:	7861      	ldrb	r1, [r4, #1]
 8001d22:	485b      	ldr	r0, [pc, #364]	; (8001e90 <lcd_event_process+0x268>)
 8001d24:	f021 f9de 	bl	80230e4 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001d28:	7863      	ldrb	r3, [r4, #1]
 8001d2a:	2b04      	cmp	r3, #4
 8001d2c:	d04e      	beq.n	8001dcc <lcd_event_process+0x1a4>
			return (0);
 8001d2e:	2000      	movs	r0, #0
 8001d30:	e7ae      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8001d32:	4858      	ldr	r0, [pc, #352]	; (8001e94 <lcd_event_process+0x26c>)
 8001d34:	f021 f9d6 	bl	80230e4 <iprintf>
				return (-1);		// some kindof error
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d3c:	e7a8      	b.n	8001c90 <lcd_event_process+0x68>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d3e:	7860      	ldrb	r0, [r4, #1]
 8001d40:	f7ff ff42 	bl	8001bc8 <lcd_pagechange>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4a54      	ldr	r2, [pc, #336]	; (8001e98 <lcd_event_process+0x270>)
			return (0);
 8001d48:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	7013      	strb	r3, [r2, #0]
 8001d4e:	e79f      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Ser Buffer overflow\n");
 8001d50:	4852      	ldr	r0, [pc, #328]	; (8001e9c <lcd_event_process+0x274>)
 8001d52:	f021 fa63 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001d56:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d5a:	e799      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Variable name too long\n");
 8001d5c:	4850      	ldr	r0, [pc, #320]	; (8001ea0 <lcd_event_process+0x278>)
 8001d5e:	f021 fa5d 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001d62:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d66:	e793      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid escape char\n");
 8001d68:	484e      	ldr	r0, [pc, #312]	; (8001ea4 <lcd_event_process+0x27c>)
 8001d6a:	f021 fa57 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001d6e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d72:	e78d      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid number of parameters\n");
 8001d74:	484c      	ldr	r0, [pc, #304]	; (8001ea8 <lcd_event_process+0x280>)
 8001d76:	f021 fa51 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001d7a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d7e:	e787      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Attribute assignment failed\n");
 8001d80:	484a      	ldr	r0, [pc, #296]	; (8001eac <lcd_event_process+0x284>)
 8001d82:	f021 fa4b 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001d86:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d8a:	e781      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8001d8c:	4848      	ldr	r0, [pc, #288]	; (8001eb0 <lcd_event_process+0x288>)
 8001d8e:	f021 fa45 	bl	802321c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001d92:	f000 f96b 	bl	800206c <getlcdpage>
				return (-1);		// some kindof error
 8001d96:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001d9a:	e779      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid waveform ID\n");
 8001d9c:	4845      	ldr	r0, [pc, #276]	; (8001eb4 <lcd_event_process+0x28c>)
 8001d9e:	f021 fa3d 	bl	802321c <puts>
					getlcdpage();						// no point in waiting for result to come in the rx queue
 8001da2:	f000 f963 	bl	800206c <getlcdpage>
				return (-1);		// some kindof error
 8001da6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001daa:	e771      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid Component ID\n");
 8001dac:	4842      	ldr	r0, [pc, #264]	; (8001eb8 <lcd_event_process+0x290>)
 8001dae:	f021 fa35 	bl	802321c <puts>
					return (0);
 8001db2:	2000      	movs	r0, #0
 8001db4:	e76c      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Successful execution\n");
 8001db6:	4841      	ldr	r0, [pc, #260]	; (8001ebc <lcd_event_process+0x294>)
 8001db8:	f021 fa30 	bl	802321c <puts>
					return (0);
 8001dbc:	2000      	movs	r0, #0
 8001dbe:	e767      	b.n	8001c90 <lcd_event_process+0x68>
					printf("Invalid command\n");
 8001dc0:	483f      	ldr	r0, [pc, #252]	; (8001ec0 <lcd_event_process+0x298>)
 8001dc2:	f021 fa2b 	bl	802321c <puts>
				return (-1);		// some kindof error
 8001dc6:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8001dca:	e761      	b.n	8001c90 <lcd_event_process+0x68>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8001dcc:	78a3      	ldrb	r3, [r4, #2]
 8001dce:	2b06      	cmp	r3, #6
 8001dd0:	d012      	beq.n	8001df8 <lcd_event_process+0x1d0>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	d039      	beq.n	8001e4a <lcd_event_process+0x222>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d026      	beq.n	8001e28 <lcd_event_process+0x200>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	d1a7      	bne.n	8001d2e <lcd_event_process+0x106>
					if (eventbuffer[3] == 1) 		// sound on
 8001dde:	78e3      	ldrb	r3, [r4, #3]
 8001de0:	4a38      	ldr	r2, [pc, #224]	; (8001ec4 <lcd_event_process+0x29c>)
 8001de2:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8001de6:	4838      	ldr	r0, [pc, #224]	; (8001ec8 <lcd_event_process+0x2a0>)
					if (eventbuffer[3] == 1) 		// sound on
 8001de8:	fab3 f383 	clz	r3, r3
 8001dec:	095b      	lsrs	r3, r3, #5
 8001dee:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8001df0:	f021 fa14 	bl	802321c <puts>
			return (0);
 8001df4:	2000      	movs	r0, #0
 8001df6:	e74b      	b.n	8001c90 <lcd_event_process+0x68>
					lcdbright = eventbuffer[3];
 8001df8:	78e2      	ldrb	r2, [r4, #3]
 8001dfa:	4b21      	ldr	r3, [pc, #132]	; (8001e80 <lcd_event_process+0x258>)
 8001dfc:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	2a0d      	cmp	r2, #13
 8001e02:	dc01      	bgt.n	8001e08 <lcd_event_process+0x1e0>
						lcdbright = 14;		// prevent black
 8001e04:	220e      	movs	r2, #14
 8001e06:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8001e08:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8001e0a:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <lcd_event_process+0x25c>)
	setlcdbin("dim", level);
 8001e10:	2963      	cmp	r1, #99	; 0x63
 8001e12:	481d      	ldr	r0, [pc, #116]	; (8001e88 <lcd_event_process+0x260>)
	dimtimer = DIMTIME;
 8001e14:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8001e16:	bf28      	it	cs
 8001e18:	2163      	movcs	r1, #99	; 0x63
 8001e1a:	f7ff faa5 	bl	8001368 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8001e1e:	7863      	ldrb	r3, [r4, #1]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d184      	bne.n	8001d2e <lcd_event_process+0x106>
 8001e24:	78a3      	ldrb	r3, [r4, #2]
 8001e26:	e7d4      	b.n	8001dd2 <lcd_event_process+0x1aa>
					if (eventbuffer[3] == 1) 		// sound on
 8001e28:	78e3      	ldrb	r3, [r4, #3]
 8001e2a:	4a28      	ldr	r2, [pc, #160]	; (8001ecc <lcd_event_process+0x2a4>)
 8001e2c:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8001e30:	4827      	ldr	r0, [pc, #156]	; (8001ed0 <lcd_event_process+0x2a8>)
					if (eventbuffer[3] == 1) 		// sound on
 8001e32:	fab3 f383 	clz	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8001e3a:	f021 f9ef 	bl	802321c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8001e3e:	7863      	ldrb	r3, [r4, #1]
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	f47f af74 	bne.w	8001d2e <lcd_event_process+0x106>
 8001e46:	78a3      	ldrb	r3, [r4, #2]
 8001e48:	e7c7      	b.n	8001dda <lcd_event_process+0x1b2>
					printf("Reboot touch\n");
 8001e4a:	4822      	ldr	r0, [pc, #136]	; (8001ed4 <lcd_event_process+0x2ac>)
 8001e4c:	f021 f9e6 	bl	802321c <puts>
					osDelay(100);
 8001e50:	2064      	movs	r0, #100	; 0x64
 8001e52:	f011 fbe7 	bl	8013624 <osDelay>
					rebootme();
 8001e56:	f000 f9dd 	bl	8002214 <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8001e5a:	7863      	ldrb	r3, [r4, #1]
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	f47f af66 	bne.w	8001d2e <lcd_event_process+0x106>
 8001e62:	78a3      	ldrb	r3, [r4, #2]
 8001e64:	e7b7      	b.n	8001dd6 <lcd_event_process+0x1ae>
 8001e66:	bf00      	nop
 8001e68:	20001578 	.word	0x20001578
 8001e6c:	2000163c 	.word	0x2000163c
 8001e70:	08027b34 	.word	0x08027b34
 8001e74:	08027b68 	.word	0x08027b68
 8001e78:	08027984 	.word	0x08027984
 8001e7c:	08027a94 	.word	0x08027a94
 8001e80:	2000000c 	.word	0x2000000c
 8001e84:	20000004 	.word	0x20000004
 8001e88:	080277cc 	.word	0x080277cc
 8001e8c:	08027b04 	.word	0x08027b04
 8001e90:	08027aac 	.word	0x08027aac
 8001e94:	08027a7c 	.word	0x08027a7c
 8001e98:	200015ac 	.word	0x200015ac
 8001e9c:	080279d4 	.word	0x080279d4
 8001ea0:	080279bc 	.word	0x080279bc
 8001ea4:	08027a08 	.word	0x08027a08
 8001ea8:	080279e8 	.word	0x080279e8
 8001eac:	08027a1c 	.word	0x08027a1c
 8001eb0:	080279a8 	.word	0x080279a8
 8001eb4:	08027a38 	.word	0x08027a38
 8001eb8:	08027a64 	.word	0x08027a64
 8001ebc:	08027a4c 	.word	0x08027a4c
 8001ec0:	08027998 	.word	0x08027998
 8001ec4:	20000270 	.word	0x20000270
 8001ec8:	08027af8 	.word	0x08027af8
 8001ecc:	20000276 	.word	0x20000276
 8001ed0:	08027aec 	.word	0x08027aec
 8001ed4:	08027adc 	.word	0x08027adc

08001ed8 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8001ed8:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8001eda:	4d44      	ldr	r5, [pc, #272]	; (8001fec <processnex+0x114>)
void processnex() {		// process Nextion - called at regular intervals
 8001edc:	b082      	sub	sp, #8
	switch (lcduart_error) {
 8001ede:	682b      	ldr	r3, [r5, #0]
 8001ee0:	2b04      	cmp	r3, #4
 8001ee2:	d057      	beq.n	8001f94 <processnex+0xbc>
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d03c      	beq.n	8001f62 <processnex+0x8a>
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d036      	beq.n	8001f5a <processnex+0x82>
		break;
 8001eec:	4c40      	ldr	r4, [pc, #256]	; (8001ff0 <processnex+0x118>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001eee:	2600      	movs	r6, #0
 8001ef0:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001ef2:	6823      	ldr	r3, [r4, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d03d      	beq.n	8001f74 <processnex+0x9c>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d06e      	beq.n	8001fdc <processnex+0x104>
	if (lcd_initflag == 3) {	// uart only
 8001efe:	6823      	ldr	r3, [r4, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d058      	beq.n	8001fb6 <processnex+0xde>
	lcd_rxdma();		// get any new characters received
 8001f04:	f7ff f9b2 	bl	800126c <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001f08:	f7ff fe8e 	bl	8001c28 <lcd_event_process>
	if (dimtimer > 50000) {
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <processnex+0x11c>)
 8001f0e:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8001f12:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8001f14:	6813      	ldr	r3, [r2, #0]
 8001f16:	428b      	cmp	r3, r1
 8001f18:	d903      	bls.n	8001f22 <processnex+0x4a>
		dimtimer--;
 8001f1a:	3b01      	subs	r3, #1
 8001f1c:	6013      	str	r3, [r2, #0]
}
 8001f1e:	b002      	add	sp, #8
 8001f20:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001f22:	4835      	ldr	r0, [pc, #212]	; (8001ff8 <processnex+0x120>)
		dimtimer = 60000;
 8001f24:	f64e 2560 	movw	r5, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001f28:	6801      	ldr	r1, [r0, #0]
 8001f2a:	6804      	ldr	r4, [r0, #0]
 8001f2c:	6803      	ldr	r3, [r0, #0]
 8001f2e:	6800      	ldr	r0, [r0, #0]
 8001f30:	109b      	asrs	r3, r3, #2
		dimtimer = 60000;
 8001f32:	6015      	str	r5, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001f34:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8001f38:	eb03 1320 	add.w	r3, r3, r0, asr #4
 8001f3c:	1acb      	subs	r3, r1, r3
		if (i < 2)
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	dd2f      	ble.n	8001fa2 <processnex+0xca>
 8001f42:	2b63      	cmp	r3, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001f44:	4a2d      	ldr	r2, [pc, #180]	; (8001ffc <processnex+0x124>)
 8001f46:	4619      	mov	r1, r3
	setlcdbin("dim", level);
 8001f48:	482d      	ldr	r0, [pc, #180]	; (8002000 <processnex+0x128>)
 8001f4a:	bf28      	it	cs
 8001f4c:	2163      	movcs	r1, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8001f4e:	6013      	str	r3, [r2, #0]
}
 8001f50:	b002      	add	sp, #8
 8001f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdbin("dim", level);
 8001f56:	f7ff ba07 	b.w	8001368 <setlcdbin>
		printf("LCD UART NOISE\n");
 8001f5a:	482a      	ldr	r0, [pc, #168]	; (8002004 <processnex+0x12c>)
 8001f5c:	f021 f95e 	bl	802321c <puts>
 8001f60:	e7c4      	b.n	8001eec <processnex+0x14>
		printf("LCD UART OVERRUN\n");
 8001f62:	4c23      	ldr	r4, [pc, #140]	; (8001ff0 <processnex+0x118>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8001f64:	2600      	movs	r6, #0
		printf("LCD UART OVERRUN\n");
 8001f66:	4828      	ldr	r0, [pc, #160]	; (8002008 <processnex+0x130>)
 8001f68:	f021 f958 	bl	802321c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8001f6c:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8001f6e:	6823      	ldr	r3, [r4, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d1c1      	bne.n	8001ef8 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001f74:	4825      	ldr	r0, [pc, #148]	; (800200c <processnex+0x134>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001f76:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8001f78:	f021 f950 	bl	802321c <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8001f7c:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001f80:	f7ff f86c 	bl	800105c <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8001f84:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8001f88:	f7ff f8b0 	bl	80010ec <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	6023      	str	r3, [r4, #0]
}
 8001f90:	b002      	add	sp, #8
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART FRAMING\n");
 8001f94:	481e      	ldr	r0, [pc, #120]	; (8002010 <processnex+0x138>)
 8001f96:	f021 f941 	bl	802321c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8001f9a:	4c15      	ldr	r4, [pc, #84]	; (8001ff0 <processnex+0x118>)
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	6023      	str	r3, [r4, #0]
		break;
 8001fa0:	e7a5      	b.n	8001eee <processnex+0x16>
			i = 2;	// prevent black
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	4a15      	ldr	r2, [pc, #84]	; (8001ffc <processnex+0x124>)
	setlcdbin("dim", level);
 8001fa6:	4816      	ldr	r0, [pc, #88]	; (8002000 <processnex+0x128>)
			i = 2;	// prevent black
 8001fa8:	4619      	mov	r1, r3
 8001faa:	6013      	str	r3, [r2, #0]
}
 8001fac:	b002      	add	sp, #8
 8001fae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	setlcdbin("dim", level);
 8001fb2:	f7ff b9d9 	b.w	8001368 <setlcdbin>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001fb6:	4817      	ldr	r0, [pc, #92]	; (8002014 <processnex+0x13c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8001fb8:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8001fba:	f021 f92f 	bl	802321c <puts>
		lcd_uart_init(230400);
 8001fbe:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001fc2:	f7ff f84b 	bl	800105c <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8001fc6:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8001fca:	f7ff f88f 	bl	80010ec <lcd_init>
		osDelay(100);
 8001fce:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8001fd0:	6026      	str	r6, [r4, #0]
}
 8001fd2:	b002      	add	sp, #8
 8001fd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8001fd8:	f011 bb24 	b.w	8013624 <osDelay>
		osDelay(500);
 8001fdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fe0:	f011 fb20 	bl	8013624 <osDelay>
		lcd_initflag = 3;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	6023      	str	r3, [r4, #0]
}
 8001fe8:	b002      	add	sp, #8
 8001fea:	bd70      	pop	{r4, r5, r6, pc}
 8001fec:	20001640 	.word	0x20001640
 8001ff0:	200015b0 	.word	0x200015b0
 8001ff4:	20000004 	.word	0x20000004
 8001ff8:	2000000c 	.word	0x2000000c
 8001ffc:	2000159c 	.word	0x2000159c
 8002000:	080277cc 	.word	0x080277cc
 8002004:	08027b70 	.word	0x08027b70
 8002008:	08027b94 	.word	0x08027b94
 800200c:	08027ba8 	.word	0x08027ba8
 8002010:	08027b80 	.word	0x08027b80
 8002014:	08027bd0 	.word	0x08027bd0

08002018 <lcd_getlack>:
uint8_t lcd_getlack() {
 8002018:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 800201a:	4d11      	ldr	r5, [pc, #68]	; (8002060 <lcd_getlack+0x48>)
	processnex();
 800201c:	f7ff ff5c 	bl	8001ed8 <processnex>
	while (lcdstatus == 0xff) {
 8002020:	782b      	ldrb	r3, [r5, #0]
 8002022:	2bff      	cmp	r3, #255	; 0xff
 8002024:	d118      	bne.n	8002058 <lcd_getlack+0x40>
 8002026:	b2de      	uxtb	r6, r3
 8002028:	4c0e      	ldr	r4, [pc, #56]	; (8002064 <lcd_getlack+0x4c>)
 800202a:	e007      	b.n	800203c <lcd_getlack+0x24>
		trys++;
 800202c:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800202e:	f011 faf9 	bl	8013624 <osDelay>
		processnex();
 8002032:	f7ff ff51 	bl	8001ed8 <processnex>
	while (lcdstatus == 0xff) {
 8002036:	782b      	ldrb	r3, [r5, #0]
 8002038:	2bff      	cmp	r3, #255	; 0xff
 800203a:	d10d      	bne.n	8002058 <lcd_getlack+0x40>
		if (trys > 1000) {
 800203c:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 800203e:	2001      	movs	r0, #1
		if (trys > 1000) {
 8002040:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8002044:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8002048:	d9f0      	bls.n	800202c <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800204a:	4807      	ldr	r0, [pc, #28]	; (8002068 <lcd_getlack+0x50>)
 800204c:	f021 f84a 	bl	80230e4 <iprintf>
			trys = 0;
 8002050:	2300      	movs	r3, #0
}
 8002052:	4630      	mov	r0, r6
			trys = 0;
 8002054:	6023      	str	r3, [r4, #0]
}
 8002056:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 8002058:	782e      	ldrb	r6, [r5, #0]
 800205a:	b2f6      	uxtb	r6, r6
}
 800205c:	4630      	mov	r0, r6
 800205e:	bd70      	pop	{r4, r5, r6, pc}
 8002060:	2000163c 	.word	0x2000163c
 8002064:	20001bfc 	.word	0x20001bfc
 8002068:	08027bfc 	.word	0x08027bfc

0800206c <getlcdpage>:
int getlcdpage(void) {
 800206c:	b570      	push	{r4, r5, r6, lr}
	printf("getlcdpage:\n");
 800206e:	481e      	ldr	r0, [pc, #120]	; (80020e8 <getlcdpage+0x7c>)
int getlcdpage(void) {
 8002070:	b082      	sub	sp, #8
	printf("getlcdpage:\n");
 8002072:	f021 f8d3 	bl	802321c <puts>
	lcd_txblocked = 1;		// stop others sending to the LCD
 8002076:	4d1d      	ldr	r5, [pc, #116]	; (80020ec <getlcdpage+0x80>)
 8002078:	2301      	movs	r3, #1
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800207a:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 800207c:	602b      	str	r3, [r5, #0]
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800207e:	f011 fad1 	bl	8013624 <osDelay>
	lcdstatus = 0xff;
 8002082:	4b1b      	ldr	r3, [pc, #108]	; (80020f0 <getlcdpage+0x84>)
 8002084:	22ff      	movs	r2, #255	; 0xff
	result = intwritelcdcmd("sendme");
 8002086:	481b      	ldr	r0, [pc, #108]	; (80020f4 <getlcdpage+0x88>)
	lcdstatus = 0xff;
 8002088:	701a      	strb	r2, [r3, #0]
	result = intwritelcdcmd("sendme");
 800208a:	f7ff f92d 	bl	80012e8 <intwritelcdcmd>
 800208e:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8002090:	9b01      	ldr	r3, [sp, #4]
 8002092:	3301      	adds	r3, #1
 8002094:	d023      	beq.n	80020de <getlcdpage+0x72>
	result = lcd_getlack();		// wait for a response
 8002096:	f7ff ffbf 	bl	8002018 <lcd_getlack>
 800209a:	9001      	str	r0, [sp, #4]
	while (result == 0xff) {	// try again
 800209c:	9b01      	ldr	r3, [sp, #4]
 800209e:	2bff      	cmp	r3, #255	; 0xff
 80020a0:	d118      	bne.n	80020d4 <getlcdpage+0x68>
		result = intwritelcdcmd("sendme");
 80020a2:	4c14      	ldr	r4, [pc, #80]	; (80020f4 <getlcdpage+0x88>)
			printf("getlcdpage2: Cmd failed\n\r");
 80020a4:	4e14      	ldr	r6, [pc, #80]	; (80020f8 <getlcdpage+0x8c>)
 80020a6:	e005      	b.n	80020b4 <getlcdpage+0x48>
		result = lcd_getlack();		// wait for a response
 80020a8:	f7ff ffb6 	bl	8002018 <lcd_getlack>
 80020ac:	9001      	str	r0, [sp, #4]
	while (result == 0xff) {	// try again
 80020ae:	9b01      	ldr	r3, [sp, #4]
 80020b0:	2bff      	cmp	r3, #255	; 0xff
 80020b2:	d10f      	bne.n	80020d4 <getlcdpage+0x68>
		result = intwritelcdcmd("sendme");
 80020b4:	4620      	mov	r0, r4
 80020b6:	f7ff f917 	bl	80012e8 <intwritelcdcmd>
 80020ba:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 80020bc:	9b01      	ldr	r3, [sp, #4]
 80020be:	3301      	adds	r3, #1
 80020c0:	d1f2      	bne.n	80020a8 <getlcdpage+0x3c>
			printf("getlcdpage2: Cmd failed\n\r");
 80020c2:	4630      	mov	r0, r6
 80020c4:	f021 f80e 	bl	80230e4 <iprintf>
		result = lcd_getlack();		// wait for a response
 80020c8:	f7ff ffa6 	bl	8002018 <lcd_getlack>
 80020cc:	9001      	str	r0, [sp, #4]
	while (result == 0xff) {	// try again
 80020ce:	9b01      	ldr	r3, [sp, #4]
 80020d0:	2bff      	cmp	r3, #255	; 0xff
 80020d2:	d0ef      	beq.n	80020b4 <getlcdpage+0x48>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80020d4:	2300      	movs	r3, #0
 80020d6:	602b      	str	r3, [r5, #0]
	return (result);
 80020d8:	9801      	ldr	r0, [sp, #4]
}
 80020da:	b002      	add	sp, #8
 80020dc:	bd70      	pop	{r4, r5, r6, pc}
		printf("getlcdpage: Cmd failed\n\r");
 80020de:	4807      	ldr	r0, [pc, #28]	; (80020fc <getlcdpage+0x90>)
 80020e0:	f021 f800 	bl	80230e4 <iprintf>
 80020e4:	e7d7      	b.n	8002096 <getlcdpage+0x2a>
 80020e6:	bf00      	nop
 80020e8:	08027c2c 	.word	0x08027c2c
 80020ec:	200015b4 	.word	0x200015b4
 80020f0:	2000163c 	.word	0x2000163c
 80020f4:	08027c38 	.word	0x08027c38
 80020f8:	08027c5c 	.word	0x08027c5c
 80020fc:	08027c40 	.word	0x08027c40

08002100 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 8002100:	4801      	ldr	r0, [pc, #4]	; (8002108 <netif_status_callbk_fn+0x8>)
 8002102:	f021 b88b 	b.w	802321c <puts>
 8002106:	bf00      	nop
 8002108:	08027c8c 	.word	0x08027c8c

0800210c <Callback01>:

/* Callback01 function */
void Callback01(void const * argument)
{
  /* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 800210c:	4801      	ldr	r0, [pc, #4]	; (8002114 <Callback01+0x8>)
 800210e:	f021 b885 	b.w	802321c <puts>
 8002112:	bf00      	nop
 8002114:	08027ca4 	.word	0x08027ca4

08002118 <_write>:
	if (file == 1) {
 8002118:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 800211a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800211c:	460c      	mov	r4, r1
 800211e:	4617      	mov	r7, r2
	if (file == 1) {
 8002120:	d00e      	beq.n	8002140 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002122:	2a00      	cmp	r2, #0
 8002124:	dd0a      	ble.n	800213c <_write+0x24>
 8002126:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8002128:	4d0b      	ldr	r5, [pc, #44]	; (8002158 <_write+0x40>)
 800212a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800212e:	230a      	movs	r3, #10
 8002130:	2201      	movs	r2, #1
 8002132:	4628      	mov	r0, r5
 8002134:	f00f f818 	bl	8011168 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002138:	42a6      	cmp	r6, r4
 800213a:	d1f6      	bne.n	800212a <_write+0x12>
}
 800213c:	4638      	mov	r0, r7
 800213e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8002140:	2a00      	cmp	r2, #0
 8002142:	ddfb      	ble.n	800213c <_write+0x24>
 8002144:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8002146:	f814 0b01 	ldrb.w	r0, [r4], #1
 800214a:	f001 fdf9 	bl	8003d40 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800214e:	42ac      	cmp	r4, r5
 8002150:	d1f9      	bne.n	8002146 <_write+0x2e>
}
 8002152:	4638      	mov	r0, r7
 8002154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002156:	bf00      	nop
 8002158:	2001b420 	.word	0x2001b420

0800215c <err_leds>:
err_leds(int why) {
 800215c:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 800215e:	4e2b      	ldr	r6, [pc, #172]	; (800220c <err_leds+0xb0>)
err_leds(int why) {
 8002160:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 8002162:	4d2b      	ldr	r5, [pc, #172]	; (8002210 <err_leds+0xb4>)
 8002164:	1e44      	subs	r4, r0, #1
		switch (why) {
 8002166:	2c07      	cmp	r4, #7
 8002168:	d80f      	bhi.n	800218a <err_leds+0x2e>
 800216a:	e8df f004 	tbb	[pc, r4]
 800216e:	4c41      	.short	0x4c41
 8002170:	2530333e 	.word	0x2530333e
 8002174:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8002176:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800217a:	4630      	mov	r0, r6
 800217c:	f007 ffd2 	bl	800a124 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002180:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002184:	4630      	mov	r0, r6
 8002186:	f007 ffcd 	bl	800a124 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 800218a:	2300      	movs	r3, #0
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	9b01      	ldr	r3, [sp, #4]
 8002190:	42ab      	cmp	r3, r5
 8002192:	dae8      	bge.n	8002166 <err_leds+0xa>
 8002194:	9b01      	ldr	r3, [sp, #4]
 8002196:	3301      	adds	r3, #1
 8002198:	9301      	str	r3, [sp, #4]
 800219a:	9b01      	ldr	r3, [sp, #4]
 800219c:	42ab      	cmp	r3, r5
 800219e:	dbf9      	blt.n	8002194 <err_leds+0x38>
 80021a0:	e7e1      	b.n	8002166 <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80021a2:	4630      	mov	r0, r6
 80021a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021a8:	f007 ffbc 	bl	800a124 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80021ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021b0:	4630      	mov	r0, r6
 80021b2:	f007 ffb7 	bl	800a124 <HAL_GPIO_TogglePin>
			break;
 80021b6:	e7e8      	b.n	800218a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80021b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021bc:	4630      	mov	r0, r6
 80021be:	f007 ffb1 	bl	800a124 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80021c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021c6:	4630      	mov	r0, r6
 80021c8:	f007 ffac 	bl	800a124 <HAL_GPIO_TogglePin>
			break;
 80021cc:	e7dd      	b.n	800218a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80021ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d2:	e7f3      	b.n	80021bc <err_leds+0x60>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	4630      	mov	r0, r6
 80021da:	f007 ffa3 	bl	800a124 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80021de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021e2:	4630      	mov	r0, r6
 80021e4:	f007 ff9e 	bl	800a124 <HAL_GPIO_TogglePin>
			break;
 80021e8:	e7cf      	b.n	800218a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80021ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021ee:	e7e5      	b.n	80021bc <err_leds+0x60>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80021f0:	4630      	mov	r0, r6
 80021f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80021f6:	f007 ff95 	bl	800a124 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80021fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021fe:	4630      	mov	r0, r6
 8002200:	f007 ff90 	bl	800a124 <HAL_GPIO_TogglePin>
			break;
 8002204:	e7c1      	b.n	800218a <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002206:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800220a:	e7e5      	b.n	80021d8 <err_leds+0x7c>
 800220c:	40020c00 	.word	0x40020c00
 8002210:	003567e0 	.word	0x003567e0

08002214 <rebootme>:
void rebootme(int why) {
 8002214:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002216:	b672      	cpsid	i
		err_leds(why);
 8002218:	f7ff ffa0 	bl	800215c <err_leds>

0800221c <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 800221c:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8002220:	074a      	lsls	r2, r1, #29
 8002222:	d502      	bpl.n	800222a <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 8002224:	4809      	ldr	r0, [pc, #36]	; (800224c <netif_link_callbk_fn+0x30>)
 8002226:	f020 bf5d 	b.w	80230e4 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 800222a:	b510      	push	{r4, lr}
 800222c:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 800222e:	4808      	ldr	r0, [pc, #32]	; (8002250 <netif_link_callbk_fn+0x34>)
 8002230:	f020 ff58 	bl	80230e4 <iprintf>
		if (!(netif_is_link_up(netif))) {
 8002234:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8002238:	075b      	lsls	r3, r3, #29
 800223a:	d500      	bpl.n	800223e <netif_link_callbk_fn+0x22>
}
 800223c:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 800223e:	4805      	ldr	r0, [pc, #20]	; (8002254 <netif_link_callbk_fn+0x38>)
 8002240:	f020 ffec 	bl	802321c <puts>
			rebootme(1);
 8002244:	2001      	movs	r0, #1
 8002246:	f7ff ffe5 	bl	8002214 <rebootme>
 800224a:	bf00      	nop
 800224c:	08027cb0 	.word	0x08027cb0
 8002250:	08027cd0 	.word	0x08027cd0
 8002254:	08027cf0 	.word	0x08027cf0

08002258 <StarLPTask>:
	char str[82] = { "empty" };
 8002258:	4b52      	ldr	r3, [pc, #328]	; (80023a4 <StarLPTask+0x14c>)
 800225a:	224c      	movs	r2, #76	; 0x4c
{
 800225c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char str[82] = { "empty" };
 8002260:	e893 0003 	ldmia.w	r3, {r0, r1}
{
 8002264:	b09f      	sub	sp, #124	; 0x7c
 8002266:	2400      	movs	r4, #0
	lcduart_error = HAL_UART_ERROR_NONE;
 8002268:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80023c4 <StarLPTask+0x16c>
	statuspkt.adcudpover = 0;		// debug use count overruns
 800226c:	f8df b158 	ldr.w	fp, [pc, #344]	; 80023c8 <StarLPTask+0x170>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 8002270:	f10d 0a24 	add.w	sl, sp, #36	; 0x24
	char str[82] = { "empty" };
 8002274:	9009      	str	r0, [sp, #36]	; 0x24
 8002276:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 800227a:	f8ad 1028 	strh.w	r1, [sp, #40]	; 0x28
 800227e:	4621      	mov	r1, r4
{
 8002280:	9406      	str	r4, [sp, #24]
	char str[82] = { "empty" };
 8002282:	f01f ffbd 	bl	8022200 <memset>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8002286:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	statuspkt.adcudpover = 0;		// debug use count overruns
 800228a:	f8cb 4078 	str.w	r4, [fp, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800228e:	f8cb 407c 	str.w	r4, [fp, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 8002292:	f8cb 4080 	str.w	r4, [fp, #128]	; 0x80
	lcduart_error = HAL_UART_ERROR_NONE;
 8002296:	f8c8 4000 	str.w	r4, [r8]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 800229a:	f7fe ff27 	bl	80010ec <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 800229e:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	while (main_init_done == 0) { // wait from main to complete the init {
 80022a2:	4e41      	ldr	r6, [pc, #260]	; (80023a8 <StarLPTask+0x150>)
	lcd_uart_init(9600); // then change our baud to match
 80022a4:	f7fe feda 	bl	800105c <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 80022a8:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80022ac:	f7fe ff1e 	bl	80010ec <lcd_init>
	osDelay(600);
 80022b0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022b4:	f011 f9b6 	bl	8013624 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 80022b8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80022bc:	f7fe ff16 	bl	80010ec <lcd_init>
	osDelay(600);
 80022c0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022c4:	f011 f9ae 	bl	8013624 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 80022c8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 80022cc:	f7fe fec6 	bl	800105c <lcd_uart_init>
	osDelay(600);
 80022d0:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022d4:	f011 f9a6 	bl	8013624 <osDelay>
	writelcdcmd("page 0");
 80022d8:	4834      	ldr	r0, [pc, #208]	; (80023ac <StarLPTask+0x154>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80022da:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("page 0");
 80022de:	f7ff f815 	bl	800130c <writelcdcmd>
	printf("LCD page 0\n");
 80022e2:	4833      	ldr	r0, [pc, #204]	; (80023b0 <StarLPTask+0x158>)
 80022e4:	f020 ff9a 	bl	802321c <puts>
	osDelay(600);
 80022e8:	f44f 7016 	mov.w	r0, #600	; 0x258
 80022ec:	f011 f99a 	bl	8013624 <osDelay>
	writelcdcmd("cls BLACK");
 80022f0:	4830      	ldr	r0, [pc, #192]	; (80023b4 <StarLPTask+0x15c>)
 80022f2:	f7ff f80b 	bl	800130c <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 80022f6:	f242 7328 	movw	r3, #10024	; 0x2728
 80022fa:	4622      	mov	r2, r4
 80022fc:	492e      	ldr	r1, [pc, #184]	; (80023b8 <StarLPTask+0x160>)
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	4650      	mov	r0, sl
 8002302:	230e      	movs	r3, #14
 8002304:	f021 f866 	bl	80233d4 <siprintf>
	writelcdcmd(str);
 8002308:	4650      	mov	r0, sl
	lcduart_error = HAL_UART_ERROR_NONE;
 800230a:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd(str);
 800230e:	f7fe fffd 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002312:	6835      	ldr	r5, [r6, #0]
	lcduart_error = HAL_UART_ERROR_NONE;
 8002314:	f8c8 4000 	str.w	r4, [r8]
	while (main_init_done == 0) { // wait from main to complete the init {
 8002318:	2d00      	cmp	r5, #0
 800231a:	d161      	bne.n	80023e0 <StarLPTask+0x188>
 800231c:	4f27      	ldr	r7, [pc, #156]	; (80023bc <StarLPTask+0x164>)
			writelcdcmd(strcat(str, "....\""));
 800231e:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80023cc <StarLPTask+0x174>
 8002322:	e018      	b.n	8002356 <StarLPTask+0xfe>
		switch (i & 3) {
 8002324:	f1be 0f01 	cmp.w	lr, #1
 8002328:	f000 817f 	beq.w	800262a <StarLPTask+0x3d2>
			writelcdcmd(strcat(str, ".\""));
 800232c:	4b24      	ldr	r3, [pc, #144]	; (80023c0 <StarLPTask+0x168>)
 800232e:	4650      	mov	r0, sl
 8002330:	881a      	ldrh	r2, [r3, #0]
 8002332:	789b      	ldrb	r3, [r3, #2]
 8002334:	f8ad 2052 	strh.w	r2, [sp, #82]	; 0x52
 8002338:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800233c:	f7fe ffe6 	bl	800130c <writelcdcmd>
		osDelay(250);
 8002340:	20fa      	movs	r0, #250	; 0xfa
		i++;
 8002342:	3501      	adds	r5, #1
		osDelay(250);
 8002344:	f011 f96e 	bl	8013624 <osDelay>
		if (!(netif_is_link_up(&gnetif))) {
 8002348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800234c:	075b      	lsls	r3, r3, #29
 800234e:	d541      	bpl.n	80023d4 <StarLPTask+0x17c>
	while (main_init_done == 0) { // wait from main to complete the init {
 8002350:	6833      	ldr	r3, [r6, #0]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d144      	bne.n	80023e0 <StarLPTask+0x188>
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002356:	f8df c078 	ldr.w	ip, [pc, #120]	; 80023d0 <StarLPTask+0x178>
 800235a:	4654      	mov	r4, sl
		switch (i & 3) {
 800235c:	f005 0e03 	and.w	lr, r5, #3
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002360:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002364:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002366:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800236a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800236c:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
		switch (i & 3) {
 8002370:	f1be 0f02 	cmp.w	lr, #2
		strcpy(str, "xstr 5,44,470,32,3,BLACK,WHITE,0,1,1,\"Starting");
 8002374:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8002378:	c407      	stmia	r4!, {r0, r1, r2}
 800237a:	f824 3b02 	strh.w	r3, [r4], #2
 800237e:	f884 c000 	strb.w	ip, [r4]
		switch (i & 3) {
 8002382:	f000 815a 	beq.w	800263a <StarLPTask+0x3e2>
 8002386:	f1be 0f03 	cmp.w	lr, #3
 800238a:	d1cb      	bne.n	8002324 <StarLPTask+0xcc>
			writelcdcmd(strcat(str, "....\""));
 800238c:	f8d9 0000 	ldr.w	r0, [r9]
 8002390:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8002394:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002398:	4650      	mov	r0, sl
 800239a:	f8ad 3056 	strh.w	r3, [sp, #86]	; 0x56
 800239e:	f7fe ffb5 	bl	800130c <writelcdcmd>
			break;
 80023a2:	e7cd      	b.n	8002340 <StarLPTask+0xe8>
 80023a4:	08027260 	.word	0x08027260
 80023a8:	20001c58 	.word	0x20001c58
 80023ac:	08027d28 	.word	0x08027d28
 80023b0:	08027d24 	.word	0x08027d24
 80023b4:	08027d30 	.word	0x08027d30
 80023b8:	08027d3c 	.word	0x08027d3c
 80023bc:	2001c2f0 	.word	0x2001c2f0
 80023c0:	08027df8 	.word	0x08027df8
 80023c4:	20001640 	.word	0x20001640
 80023c8:	2001adc0 	.word	0x2001adc0
 80023cc:	08027e08 	.word	0x08027e08
 80023d0:	08027dc8 	.word	0x08027dc8
			writelcdcmd("xstr 5,88,470,48,2,BLACK,RED,0,1,1,\"NETWORK UNPLUGGED??\"");
 80023d4:	48b6      	ldr	r0, [pc, #728]	; (80026b0 <StarLPTask+0x458>)
 80023d6:	f7fe ff99 	bl	800130c <writelcdcmd>
	while (main_init_done == 0) { // wait from main to complete the init {
 80023da:	6833      	ldr	r3, [r6, #0]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0ba      	beq.n	8002356 <StarLPTask+0xfe>
	lcduart_error = HAL_UART_ERROR_NONE;
 80023e0:	2400      	movs	r4, #0
	writelcdcmd("ref 0");		// refresh screen
 80023e2:	48b4      	ldr	r0, [pc, #720]	; (80026b4 <StarLPTask+0x45c>)
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 80023e4:	4fb4      	ldr	r7, [pc, #720]	; (80026b8 <StarLPTask+0x460>)
	lcduart_error = HAL_UART_ERROR_NONE;
 80023e6:	f8c8 4000 	str.w	r4, [r8]
	writelcdcmd("ref 0");		// refresh screen
 80023ea:	f7fe ff8f 	bl	800130c <writelcdcmd>
	writelcdcmd("page 0");
 80023ee:	48b3      	ldr	r0, [pc, #716]	; (80026bc <StarLPTask+0x464>)
	int last3min = 0;
 80023f0:	4625      	mov	r5, r4
	lcduart_error = HAL_UART_ERROR_NONE;
 80023f2:	f8c8 4000 	str.w	r4, [r8]
	uint16_t onesectimer = 0;
 80023f6:	4626      	mov	r6, r4
	int last3min = 0;
 80023f8:	9407      	str	r4, [sp, #28]
	writelcdcmd("page 0");
 80023fa:	f7fe ff87 	bl	800130c <writelcdcmd>
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 80023fe:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002402:	4baf      	ldr	r3, [pc, #700]	; (80026c0 <StarLPTask+0x468>)
	STM32_UUID[0], STM32_UUID[1], STM32_UUID[2], statuspkt.uid, statuspkt.majorversion, statuspkt.minorversion,
 8002404:	f89b e070 	ldrb.w	lr, [fp, #112]	; 0x70
 8002408:	b289      	uxth	r1, r1
 800240a:	f89b c071 	ldrb.w	ip, [fp, #113]	; 0x71
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 800240e:	4aad      	ldr	r2, [pc, #692]	; (80026c4 <StarLPTask+0x46c>)
 8002410:	4cad      	ldr	r4, [pc, #692]	; (80026c8 <StarLPTask+0x470>)
 8002412:	48ae      	ldr	r0, [pc, #696]	; (80026cc <StarLPTask+0x474>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6812      	ldr	r2, [r2, #0]
 8002418:	f8cd c00c 	str.w	ip, [sp, #12]
 800241c:	f8df 836c 	ldr.w	r8, [pc, #876]	; 800278c <StarLPTask+0x534>
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8002420:	f8df 936c 	ldr.w	r9, [pc, #876]	; 8002790 <StarLPTask+0x538>
	sprintf(snstr, "\"STM_UUID=%lx %lx %lx, Assigned S/N=%lu, Ver %d.%d, UDP Target=%s %s\"",
 8002424:	e9cd 1e01 	strd	r1, lr, [sp, #4]
 8002428:	e9cd 4704 	strd	r4, r7, [sp, #16]
 800242c:	6800      	ldr	r0, [r0, #0]
 800242e:	49a8      	ldr	r1, [pc, #672]	; (80026d0 <StarLPTask+0x478>)
 8002430:	9000      	str	r0, [sp, #0]
 8002432:	48a8      	ldr	r0, [pc, #672]	; (80026d4 <StarLPTask+0x47c>)
 8002434:	f020 ffce 	bl	80233d4 <siprintf>
	HAL_TIM_Base_Start(&htim7);	// start audio synth sampling interval timer
 8002438:	48a7      	ldr	r0, [pc, #668]	; (80026d8 <StarLPTask+0x480>)
 800243a:	f00b fac5 	bl	800d9c8 <HAL_TIM_Base_Start>
	lptask_init_done = 1;		// this lp task has done its initialisation
 800243e:	4ba7      	ldr	r3, [pc, #668]	; (80026dc <StarLPTask+0x484>)
 8002440:	2201      	movs	r2, #1
 8002442:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8002444:	4648      	mov	r0, r9
		tenmstimer++;
 8002446:	3501      	adds	r5, #1
		HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 8002448:	f008 fcac 	bl	800ada4 <HAL_IWDG_Refresh>
		osDelay(10);		// 10mSec
 800244c:	200a      	movs	r0, #10
 800244e:	f011 f8e9 	bl	8013624 <osDelay>
		globaladcnoise = abs(meanwindiff);
 8002452:	4ba3      	ldr	r3, [pc, #652]	; (80026e0 <StarLPTask+0x488>)
		if (!(ledsenabled)) {
 8002454:	4aa3      	ldr	r2, [pc, #652]	; (80026e4 <StarLPTask+0x48c>)
		tenmstimer++;
 8002456:	b2ad      	uxth	r5, r5
		globaladcnoise = abs(meanwindiff);
 8002458:	f9b3 3000 	ldrsh.w	r3, [r3]
		if (!(ledsenabled)) {
 800245c:	8811      	ldrh	r1, [r2, #0]
		globaladcnoise = abs(meanwindiff);
 800245e:	2b00      	cmp	r3, #0
 8002460:	48a1      	ldr	r0, [pc, #644]	; (80026e8 <StarLPTask+0x490>)
 8002462:	bfb8      	it	lt
 8002464:	425b      	neglt	r3, r3
 8002466:	b29b      	uxth	r3, r3
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 8002468:	09da      	lsrs	r2, r3, #7
		globaladcnoise = abs(meanwindiff);
 800246a:	6003      	str	r3, [r0, #0]
		pretrigthresh = 4 + (globaladcnoise >> 7);		// set the pretrigger level
 800246c:	1d13      	adds	r3, r2, #4
 800246e:	4a9f      	ldr	r2, [pc, #636]	; (80026ec <StarLPTask+0x494>)
 8002470:	8013      	strh	r3, [r2, #0]
		if (!(ledsenabled)) {
 8002472:	2900      	cmp	r1, #0
 8002474:	f000 80ec 	beq.w	8002650 <StarLPTask+0x3f8>
		} else if (ledhang) {	// trigger led
 8002478:	4c9d      	ldr	r4, [pc, #628]	; (80026f0 <StarLPTask+0x498>)
 800247a:	6823      	ldr	r3, [r4, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	f000 80e7 	beq.w	8002650 <StarLPTask+0x3f8>
			ledhang--;
 8002482:	3b01      	subs	r3, #1
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8002484:	2201      	movs	r2, #1
 8002486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800248a:	489a      	ldr	r0, [pc, #616]	; (80026f4 <StarLPTask+0x49c>)
			ledhang--;
 800248c:	6023      	str	r3, [r4, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 800248e:	f007 fe2f 	bl	800a0f0 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 8002492:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 8002496:	f8d8 3000 	ldr.w	r3, [r8]
 800249a:	429a      	cmp	r2, r3
 800249c:	f040 80e5 	bne.w	800266a <StarLPTask+0x412>
		processnex();		// process Nextion
 80024a0:	f7ff fd1a 	bl	8001ed8 <processnex>
		if ((tenmstimer + 3) % 10 == 0) {
 80024a4:	1ce9      	adds	r1, r5, #3
 80024a6:	4b94      	ldr	r3, [pc, #592]	; (80026f8 <StarLPTask+0x4a0>)
 80024a8:	4a94      	ldr	r2, [pc, #592]	; (80026fc <StarLPTask+0x4a4>)
 80024aa:	fb03 f301 	mul.w	r3, r3, r1
 80024ae:	ebb2 0f73 	cmp.w	r2, r3, ror #1
 80024b2:	d31e      	bcc.n	80024f2 <StarLPTask+0x29a>
			if (statuspkt.trigcount > (25 + jabtrigcnt)) { // spamming: > 25 packets sent in about 100mS
 80024b4:	4c92      	ldr	r4, [pc, #584]	; (8002700 <StarLPTask+0x4a8>)
 80024b6:	f8db 107c 	ldr.w	r1, [fp, #124]	; 0x7c
 80024ba:	6823      	ldr	r3, [r4, #0]
 80024bc:	f103 0219 	add.w	r2, r3, #25
 80024c0:	4291      	cmp	r1, r2
 80024c2:	f200 8239 	bhi.w	8002938 <StarLPTask+0x6e0>
				if (jabbertimeout) {
 80024c6:	4a8f      	ldr	r2, [pc, #572]	; (8002704 <StarLPTask+0x4ac>)
 80024c8:	6813      	ldr	r3, [r2, #0]
 80024ca:	b10b      	cbz	r3, 80024d0 <StarLPTask+0x278>
					jabbertimeout--;		// de-arm count
 80024cc:	3b01      	subs	r3, #1
 80024ce:	6013      	str	r3, [r2, #0]
				jabtrigcnt = statuspkt.trigcount;
 80024d0:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
 80024d4:	6023      	str	r3, [r4, #0]
			if (gainchanged == 0) {		// gain not just changed
 80024d6:	9b06      	ldr	r3, [sp, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	f000 824f 	beq.w	800297c <StarLPTask+0x724>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80024de:	4b8a      	ldr	r3, [pc, #552]	; (8002708 <StarLPTask+0x4b0>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8200 	beq.w	80028e8 <StarLPTask+0x690>
 80024e8:	4b88      	ldr	r3, [pc, #544]	; (800270c <StarLPTask+0x4b4>)
			} else if (lcd_currentpage == 1) {
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	2b01      	cmp	r3, #1
 80024ee:	f000 8286 	beq.w	80029fe <StarLPTask+0x7a6>
				lcd_showvars();
 80024f2:	4a87      	ldr	r2, [pc, #540]	; (8002710 <StarLPTask+0x4b8>)
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 80024f4:	f105 030b 	add.w	r3, r5, #11
				lcd_showvars();
 80024f8:	fb02 f303 	mul.w	r3, r2, r3
		if ((tenmstimer + 11) % 100 == 0) {		// every second
 80024fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002500:	3a01      	subs	r2, #1
 8002502:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002506:	f080 815e 	bcs.w	80027c6 <StarLPTask+0x56e>
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 800250a:	f105 031b 	add.w	r3, r5, #27
			lcd_trigplot();		// update lcd trigger and noise plots
 800250e:	4981      	ldr	r1, [pc, #516]	; (8002714 <StarLPTask+0x4bc>)
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002510:	4a81      	ldr	r2, [pc, #516]	; (8002718 <StarLPTask+0x4c0>)
			lcd_trigplot();		// update lcd trigger and noise plots
 8002512:	fb01 f303 	mul.w	r3, r1, r3
		if ((tenmstimer + 27) % 1000 == 0) {		// every 10 seconds
 8002516:	ebb2 0ff3 	cmp.w	r2, r3, ror #3
 800251a:	d318      	bcc.n	800254e <StarLPTask+0x2f6>
			if (agc) {
 800251c:	4b7f      	ldr	r3, [pc, #508]	; (800271c <StarLPTask+0x4c4>)
 800251e:	8818      	ldrh	r0, [r3, #0]
 8002520:	2800      	cmp	r0, #0
 8002522:	f000 81df 	beq.w	80028e4 <StarLPTask+0x68c>
				trigsin10sec = trigs - prevtrigs;
 8002526:	4c7e      	ldr	r4, [pc, #504]	; (8002720 <StarLPTask+0x4c8>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002528:	4f7e      	ldr	r7, [pc, #504]	; (8002724 <StarLPTask+0x4cc>)
				trigsin10sec = trigs - prevtrigs;
 800252a:	f8d8 2000 	ldr.w	r2, [r8]
 800252e:	6823      	ldr	r3, [r4, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002530:	8838      	ldrh	r0, [r7, #0]
				trigsin10sec = trigs - prevtrigs;
 8002532:	1ad3      	subs	r3, r2, r3
 8002534:	497c      	ldr	r1, [pc, #496]	; (8002728 <StarLPTask+0x4d0>)
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 8002536:	2805      	cmp	r0, #5
				trigsin10sec = trigs - prevtrigs;
 8002538:	600b      	str	r3, [r1, #0]
				if (trigthresh < 6)		// only bump up gain if trig threshold above pretrigger is still low
 800253a:	d802      	bhi.n	8002542 <StarLPTask+0x2ea>
					if (trigsin10sec < MINTRIGS10S)
 800253c:	2b01      	cmp	r3, #1
 800253e:	f240 828a 	bls.w	8002a56 <StarLPTask+0x7fe>
				if (trigsin10sec > MAXTRIGS10S)
 8002542:	2b0a      	cmp	r3, #10
 8002544:	f200 825e 	bhi.w	8002a04 <StarLPTask+0x7ac>
			gainchanged = 0;
 8002548:	2300      	movs	r3, #0
				prevtrigs = trigs;
 800254a:	6022      	str	r2, [r4, #0]
			gainchanged = 0;
 800254c:	9306      	str	r3, [sp, #24]
		if ((tenmstimer + 44) > 3000) {		// reset timer after 30 seconds
 800254e:	f640 338c 	movw	r3, #2956	; 0xb8c
 8002552:	429d      	cmp	r5, r3
 8002554:	d94d      	bls.n	80025f2 <StarLPTask+0x39a>
			if (gpsgood == 0) {	// gps is not talking to us
 8002556:	4b75      	ldr	r3, [pc, #468]	; (800272c <StarLPTask+0x4d4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f040 81be 	bne.w	80028dc <StarLPTask+0x684>
				printf("GPS serial comms problem?\n");
 8002560:	4873      	ldr	r0, [pc, #460]	; (8002730 <StarLPTask+0x4d8>)
 8002562:	f020 fe5b 	bl	802321c <puts>
				if (gpsbadcount++ > 9) {
 8002566:	4973      	ldr	r1, [pc, #460]	; (8002734 <StarLPTask+0x4dc>)
 8002568:	680b      	ldr	r3, [r1, #0]
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	2b09      	cmp	r3, #9
 800256e:	600a      	str	r2, [r1, #0]
 8002570:	f300 827b 	bgt.w	8002a6a <StarLPTask+0x812>
			if (psensor == MPL115A2) {
 8002574:	4b70      	ldr	r3, [pc, #448]	; (8002738 <StarLPTask+0x4e0>)
			gpsgood = 0;			// reset the good flag
 8002576:	2200      	movs	r2, #0
 8002578:	496c      	ldr	r1, [pc, #432]	; (800272c <StarLPTask+0x4d4>)
			if (psensor == MPL115A2) {
 800257a:	681b      	ldr	r3, [r3, #0]
			gpsgood = 0;			// reset the good flag
 800257c:	600a      	str	r2, [r1, #0]
			if (psensor == MPL115A2) {
 800257e:	2b01      	cmp	r3, #1
 8002580:	f000 8234 	beq.w	80029ec <StarLPTask+0x794>
			} else if (psensor == MPL3115A2) {
 8002584:	2b02      	cmp	r3, #2
 8002586:	f000 8253 	beq.w	8002a30 <StarLPTask+0x7d8>
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 800258a:	4b6c      	ldr	r3, [pc, #432]	; (800273c <StarLPTask+0x4e4>)
 800258c:	f242 7228 	movw	r2, #10024	; 0x2728
 8002590:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
			tenmstimer = 0;
 8002594:	2500      	movs	r5, #0
			printf("ID:%lu/(%d) %d:%d:%d:%d ", statuspkt.uid, BUILDNO, myip & 0xFF, (myip & 0xFF00) >> 8,
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	b289      	uxth	r1, r1
 800259a:	f3c3 4407 	ubfx	r4, r3, #16, #8
 800259e:	f3c3 2007 	ubfx	r0, r3, #8, #8
 80025a2:	0e1f      	lsrs	r7, r3, #24
 80025a4:	9000      	str	r0, [sp, #0]
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4865      	ldr	r0, [pc, #404]	; (8002740 <StarLPTask+0x4e8>)
 80025aa:	e9cd 4701 	strd	r4, r7, [sp, #4]
 80025ae:	f020 fd99 	bl	80230e4 <iprintf>
			printf("triggers:%04d, gain:0x%02x, noise:%03d, thresh:%02d, press:%03d.%03d, temp:%02d.%03d, time:%s\n",
 80025b2:	4b64      	ldr	r3, [pc, #400]	; (8002744 <StarLPTask+0x4ec>)
 80025b4:	4964      	ldr	r1, [pc, #400]	; (8002748 <StarLPTask+0x4f0>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a64      	ldr	r2, [pc, #400]	; (800274c <StarLPTask+0x4f4>)
 80025ba:	fba1 1303 	umull	r1, r3, r1, r3
 80025be:	4c64      	ldr	r4, [pc, #400]	; (8002750 <StarLPTask+0x4f8>)
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	099b      	lsrs	r3, r3, #6
 80025c4:	4863      	ldr	r0, [pc, #396]	; (8002754 <StarLPTask+0x4fc>)
 80025c6:	0892      	lsrs	r2, r2, #2
 80025c8:	4956      	ldr	r1, [pc, #344]	; (8002724 <StarLPTask+0x4cc>)
 80025ca:	6800      	ldr	r0, [r0, #0]
 80025cc:	8809      	ldrh	r1, [r1, #0]
 80025ce:	6824      	ldr	r4, [r4, #0]
 80025d0:	9304      	str	r3, [sp, #16]
 80025d2:	9202      	str	r2, [sp, #8]
 80025d4:	4b60      	ldr	r3, [pc, #384]	; (8002758 <StarLPTask+0x500>)
 80025d6:	4a61      	ldr	r2, [pc, #388]	; (800275c <StarLPTask+0x504>)
 80025d8:	9403      	str	r4, [sp, #12]
 80025da:	e9cd 1000 	strd	r1, r0, [sp]
 80025de:	f9b2 2000 	ldrsh.w	r2, [r2]
 80025e2:	9305      	str	r3, [sp, #20]
 80025e4:	4b40      	ldr	r3, [pc, #256]	; (80026e8 <StarLPTask+0x490>)
 80025e6:	f8d8 1000 	ldr.w	r1, [r8]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	485c      	ldr	r0, [pc, #368]	; (8002760 <StarLPTask+0x508>)
 80025ee:	f020 fd79 	bl	80230e4 <iprintf>
		if (((onesectimer + 21) % 180 == 0) && (last3min != onesectimer)) {
 80025f2:	f106 0315 	add.w	r3, r6, #21
 80025f6:	495b      	ldr	r1, [pc, #364]	; (8002764 <StarLPTask+0x50c>)
 80025f8:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <StarLPTask+0x510>)
 80025fa:	fb01 f303 	mul.w	r3, r1, r3
 80025fe:	ebb2 0fb3 	cmp.w	r2, r3, ror #2
 8002602:	d30a      	bcc.n	800261a <StarLPTask+0x3c2>
 8002604:	9b07      	ldr	r3, [sp, #28]
 8002606:	429e      	cmp	r6, r3
 8002608:	d007      	beq.n	800261a <StarLPTask+0x3c2>
			if (boosttrys > 0)		// timer for boost gain oscillating
 800260a:	4a58      	ldr	r2, [pc, #352]	; (800276c <StarLPTask+0x514>)
 800260c:	8813      	ldrh	r3, [r2, #0]
 800260e:	b10b      	cbz	r3, 8002614 <StarLPTask+0x3bc>
				boosttrys--;
 8002610:	3b01      	subs	r3, #1
 8002612:	8013      	strh	r3, [r2, #0]
			lcd_pressplot();		// add a point to the pressure plot
 8002614:	9607      	str	r6, [sp, #28]
 8002616:	f7ff fa29 	bl	8001a6c <lcd_pressplot>
		if (onesectimer > 900) {			// 15 mins
 800261a:	f5b6 7f61 	cmp.w	r6, #900	; 0x384
 800261e:	f67f af11 	bls.w	8002444 <StarLPTask+0x1ec>
			onesectimer = 0;
 8002622:	2600      	movs	r6, #0
			requestapisn();	//update s/n and udp target (reboot on fail)
 8002624:	f004 fb3c 	bl	8006ca0 <requestapisn>
 8002628:	e70c      	b.n	8002444 <StarLPTask+0x1ec>
			writelcdcmd(strcat(str, "..\""));
 800262a:	4b51      	ldr	r3, [pc, #324]	; (8002770 <StarLPTask+0x518>)
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002632:	4650      	mov	r0, sl
 8002634:	f7fe fe6a 	bl	800130c <writelcdcmd>
			break;
 8002638:	e682      	b.n	8002340 <StarLPTask+0xe8>
			writelcdcmd(strcat(str, "...\""));
 800263a:	4b4e      	ldr	r3, [pc, #312]	; (8002774 <StarLPTask+0x51c>)
 800263c:	6818      	ldr	r0, [r3, #0]
 800263e:	791b      	ldrb	r3, [r3, #4]
 8002640:	f8cd 0052 	str.w	r0, [sp, #82]	; 0x52
 8002644:	4650      	mov	r0, sl
 8002646:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 800264a:	f7fe fe5f 	bl	800130c <writelcdcmd>
			break;
 800264e:	e677      	b.n	8002340 <StarLPTask+0xe8>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8002650:	2200      	movs	r2, #0
 8002652:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002656:	4827      	ldr	r0, [pc, #156]	; (80026f4 <StarLPTask+0x49c>)
 8002658:	f007 fd4a 	bl	800a0f0 <HAL_GPIO_WritePin>
		if (trigs != statuspkt.trigcount) {		// another tigger(s) has occured
 800265c:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
 8002660:	f8d8 3000 	ldr.w	r3, [r8]
 8002664:	429a      	cmp	r2, r3
 8002666:	f43f af1b 	beq.w	80024a0 <StarLPTask+0x248>
			if (soundenabled) {
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <StarLPTask+0x520>)
			trigs = statuspkt.trigcount;
 800266c:	f8db 207c 	ldr.w	r2, [fp, #124]	; 0x7c
			if (soundenabled) {
 8002670:	881b      	ldrh	r3, [r3, #0]
			trigs = statuspkt.trigcount;
 8002672:	f8c8 2000 	str.w	r2, [r8]
			if (soundenabled) {
 8002676:	2b00      	cmp	r3, #0
 8002678:	f040 8193 	bne.w	80029a2 <StarLPTask+0x74a>
 800267c:	4c3f      	ldr	r4, [pc, #252]	; (800277c <StarLPTask+0x524>)
				printf("sem wait 1a\n");
 800267e:	4f40      	ldr	r7, [pc, #256]	; (8002780 <StarLPTask+0x528>)
 8002680:	e002      	b.n	8002688 <StarLPTask+0x430>
 8002682:	4638      	mov	r0, r7
 8002684:	f020 fdca 	bl	802321c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 8002688:	2101      	movs	r1, #1
 800268a:	6820      	ldr	r0, [r4, #0]
 800268c:	f011 fd6a 	bl	8014164 <xQueueSemaphoreTake>
 8002690:	2801      	cmp	r0, #1
 8002692:	d1f6      	bne.n	8002682 <StarLPTask+0x42a>
			strcpy(str, ctime(&epochtime));		// ctime
 8002694:	483b      	ldr	r0, [pc, #236]	; (8002784 <StarLPTask+0x52c>)
 8002696:	f01f fc2d 	bl	8021ef4 <ctime>
 800269a:	4601      	mov	r1, r0
 800269c:	4650      	mov	r0, sl
 800269e:	4f3a      	ldr	r7, [pc, #232]	; (8002788 <StarLPTask+0x530>)
 80026a0:	f020 ff29 	bl	80234f6 <stpcpy>
			n = 0;
 80026a4:	2100      	movs	r1, #0
 80026a6:	eba0 000a 	sub.w	r0, r0, sl
			i = 0;
 80026aa:	460b      	mov	r3, r1
			while (i < strlen(str)) {
 80026ac:	e07b      	b.n	80027a6 <StarLPTask+0x54e>
 80026ae:	bf00      	nop
 80026b0:	08027e10 	.word	0x08027e10
 80026b4:	08027d78 	.word	0x08027d78
 80026b8:	2001be18 	.word	0x2001be18
 80026bc:	08027d28 	.word	0x08027d28
 80026c0:	1ff0f424 	.word	0x1ff0f424
 80026c4:	1ff0f420 	.word	0x1ff0f420
 80026c8:	2001be30 	.word	0x2001be30
 80026cc:	1ff0f428 	.word	0x1ff0f428
 80026d0:	08027d80 	.word	0x08027d80
 80026d4:	20000084 	.word	0x20000084
 80026d8:	2001ba8c 	.word	0x2001ba8c
 80026dc:	20001c54 	.word	0x20001c54
 80026e0:	20000740 	.word	0x20000740
 80026e4:	20000270 	.word	0x20000270
 80026e8:	200006f0 	.word	0x200006f0
 80026ec:	20000000 	.word	0x20000000
 80026f0:	2000073c 	.word	0x2000073c
 80026f4:	40020c00 	.word	0x40020c00
 80026f8:	cccccccd 	.word	0xcccccccd
 80026fc:	19999999 	.word	0x19999999
 8002700:	20001c48 	.word	0x20001c48
 8002704:	200006f4 	.word	0x200006f4
 8002708:	200015b0 	.word	0x200015b0
 800270c:	200015ac 	.word	0x200015ac
 8002710:	c28f5c29 	.word	0xc28f5c29
 8002714:	26e978d5 	.word	0x26e978d5
 8002718:	00418937 	.word	0x00418937
 800271c:	20000010 	.word	0x20000010
 8002720:	20001c5c 	.word	0x20001c5c
 8002724:	20000002 	.word	0x20000002
 8002728:	20001c6c 	.word	0x20001c6c
 800272c:	20001c78 	.word	0x20001c78
 8002730:	08027fdc 	.word	0x08027fdc
 8002734:	20001c44 	.word	0x20001c44
 8002738:	20001cc8 	.word	0x20001cc8
 800273c:	2001b260 	.word	0x2001b260
 8002740:	08028038 	.word	0x08028038
 8002744:	2001bd58 	.word	0x2001bd58
 8002748:	10624dd3 	.word	0x10624dd3
 800274c:	2001bd64 	.word	0x2001bd64
 8002750:	2001bd5c 	.word	0x2001bd5c
 8002754:	2001bd60 	.word	0x2001bd60
 8002758:	20000054 	.word	0x20000054
 800275c:	20001cc4 	.word	0x20001cc4
 8002760:	08028054 	.word	0x08028054
 8002764:	a4fa4fa5 	.word	0xa4fa4fa5
 8002768:	016c16c1 	.word	0x016c16c1
 800276c:	20001ca8 	.word	0x20001ca8
 8002770:	08027dfc 	.word	0x08027dfc
 8002774:	08027e00 	.word	0x08027e00
 8002778:	20000276 	.word	0x20000276
 800277c:	2001b6d0 	.word	0x2001b6d0
 8002780:	08027e4c 	.word	0x08027e4c
 8002784:	2001bcc8 	.word	0x2001bcc8
 8002788:	2000023c 	.word	0x2000023c
 800278c:	20001c68 	.word	0x20001c68
 8002790:	2001b1dc 	.word	0x2001b1dc
				if ((str[i] != '\n') && (str[i] != '\r'))
 8002794:	f81a 2003 	ldrb.w	r2, [sl, r3]
 8002798:	2a0a      	cmp	r2, #10
 800279a:	d003      	beq.n	80027a4 <StarLPTask+0x54c>
 800279c:	2a0d      	cmp	r2, #13
 800279e:	d001      	beq.n	80027a4 <StarLPTask+0x54c>
					trigtimestr[n++] = str[i];
 80027a0:	547a      	strb	r2, [r7, r1]
 80027a2:	3101      	adds	r1, #1
				i++;
 80027a4:	3301      	adds	r3, #1
			while (i < strlen(str)) {
 80027a6:	4283      	cmp	r3, r0
 80027a8:	d3f4      	bcc.n	8002794 <StarLPTask+0x53c>
			trigtimestr[n] = '\0';
 80027aa:	2300      	movs	r3, #0
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80027ac:	6820      	ldr	r0, [r4, #0]
			trigtimestr[n] = '\0';
 80027ae:	547b      	strb	r3, [r7, r1]
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80027b0:	461a      	mov	r2, r3
 80027b2:	4619      	mov	r1, r3
 80027b4:	f011 fa50 	bl	8013c58 <xQueueGenericSend>
 80027b8:	2801      	cmp	r0, #1
 80027ba:	f43f ae71 	beq.w	80024a0 <StarLPTask+0x248>
				printf("semaphore 1a release failed\n");
 80027be:	48b0      	ldr	r0, [pc, #704]	; (8002a80 <StarLPTask+0x828>)
 80027c0:	f020 fd2c 	bl	802321c <puts>
 80027c4:	e66c      	b.n	80024a0 <StarLPTask+0x248>
			if (ledsenabled)
 80027c6:	4baf      	ldr	r3, [pc, #700]	; (8002a84 <StarLPTask+0x82c>)
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80027c8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027cc:	48ae      	ldr	r0, [pc, #696]	; (8002a88 <StarLPTask+0x830>)
			if (ledsenabled)
 80027ce:	881a      	ldrh	r2, [r3, #0]
 80027d0:	2a00      	cmp	r2, #0
 80027d2:	f000 80ff 	beq.w	80029d4 <StarLPTask+0x77c>
				HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 80027d6:	f007 fca5 	bl	800a124 <HAL_GPIO_TogglePin>
 80027da:	4cac      	ldr	r4, [pc, #688]	; (8002a8c <StarLPTask+0x834>)
				printf("sem wait 1b\n");
 80027dc:	4fac      	ldr	r7, [pc, #688]	; (8002a90 <StarLPTask+0x838>)
 80027de:	e002      	b.n	80027e6 <StarLPTask+0x58e>
 80027e0:	4638      	mov	r0, r7
 80027e2:	f020 fd1b 	bl	802321c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 1) == pdTRUE)) {// take the ssi generation semaphore (portMAX_DELAY == infinite)
 80027e6:	2101      	movs	r1, #1
 80027e8:	6820      	ldr	r0, [r4, #0]
 80027ea:	f011 fcbb 	bl	8014164 <xQueueSemaphoreTake>
 80027ee:	2801      	cmp	r0, #1
 80027f0:	d1f6      	bne.n	80027e0 <StarLPTask+0x588>
			strcpy(str, ctime(&epochtime));
 80027f2:	48a8      	ldr	r0, [pc, #672]	; (8002a94 <StarLPTask+0x83c>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 80027f4:	2700      	movs	r7, #0
			strcpy(str, ctime(&epochtime));
 80027f6:	f01f fb7d 	bl	8021ef4 <ctime>
 80027fa:	4601      	mov	r1, r0
 80027fc:	4650      	mov	r0, sl
 80027fe:	f020 fe7a 	bl	80234f6 <stpcpy>
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002802:	f10d 0c78 	add.w	ip, sp, #120	; 0x78
 8002806:	eba0 030a 	sub.w	r3, r0, sl
			sprintf(nowtimestr, "\"%s\"", str);
 800280a:	4652      	mov	r2, sl
 800280c:	49a2      	ldr	r1, [pc, #648]	; (8002a98 <StarLPTask+0x840>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 800280e:	4463      	add	r3, ip
			sprintf(nowtimestr, "\"%s\"", str);
 8002810:	48a2      	ldr	r0, [pc, #648]	; (8002a9c <StarLPTask+0x844>)
			str[strlen(str) - 1] = '\0';	// replace newline with terminator
 8002812:	f803 7c55 	strb.w	r7, [r3, #-85]
			sprintf(nowtimestr, "\"%s\"", str);
 8002816:	f020 fddd 	bl	80233d4 <siprintf>
			sprintf(tempstr, "%d.%d", temperature, tempfrac);
 800281a:	4ba1      	ldr	r3, [pc, #644]	; (8002aa0 <StarLPTask+0x848>)
 800281c:	4aa1      	ldr	r2, [pc, #644]	; (8002aa4 <StarLPTask+0x84c>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6812      	ldr	r2, [r2, #0]
 8002822:	49a1      	ldr	r1, [pc, #644]	; (8002aa8 <StarLPTask+0x850>)
 8002824:	48a1      	ldr	r0, [pc, #644]	; (8002aac <StarLPTask+0x854>)
 8002826:	f020 fdd5 	bl	80233d4 <siprintf>
			sprintf(pressstr, "%d.%d", pressure, pressfrac);
 800282a:	4ba1      	ldr	r3, [pc, #644]	; (8002ab0 <StarLPTask+0x858>)
 800282c:	4aa1      	ldr	r2, [pc, #644]	; (8002ab4 <StarLPTask+0x85c>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	499d      	ldr	r1, [pc, #628]	; (8002aa8 <StarLPTask+0x850>)
 8002834:	48a0      	ldr	r0, [pc, #640]	; (8002ab8 <StarLPTask+0x860>)
 8002836:	f020 fdcd 	bl	80233d4 <siprintf>
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800283a:	4ba0      	ldr	r3, [pc, #640]	; (8002abc <StarLPTask+0x864>)
			sprintf(statstr,
 800283c:	4aa0      	ldr	r2, [pc, #640]	; (8002ac0 <StarLPTask+0x868>)
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 800283e:	f9b3 3000 	ldrsh.w	r3, [r3]
			sprintf(statstr,
 8002842:	6811      	ldr	r1, [r2, #0]
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002844:	2b00      	cmp	r3, #0
			sprintf(statstr,
 8002846:	489f      	ldr	r0, [pc, #636]	; (8002ac4 <StarLPTask+0x86c>)
 8002848:	f3c1 010b 	ubfx	r1, r1, #0, #12
 800284c:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
					statuspkt.sysuptime, trigtimestr, statuspkt.trigcount, abs(meanwindiff) & 0xfff,
 8002850:	bfb8      	it	lt
 8002852:	425b      	neglt	r3, r3
			sprintf(statstr,
 8002854:	8807      	ldrh	r7, [r0, #0]
 8002856:	f8db 007c 	ldr.w	r0, [fp, #124]	; 0x7c
 800285a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800285e:	9703      	str	r7, [sp, #12]
 8002860:	9000      	str	r0, [sp, #0]
 8002862:	4899      	ldr	r0, [pc, #612]	; (8002ac8 <StarLPTask+0x870>)
 8002864:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8002868:	4b98      	ldr	r3, [pc, #608]	; (8002acc <StarLPTask+0x874>)
 800286a:	4999      	ldr	r1, [pc, #612]	; (8002ad0 <StarLPTask+0x878>)
 800286c:	f020 fdb2 	bl	80233d4 <siprintf>
			if (gpslocked) {
 8002870:	4b98      	ldr	r3, [pc, #608]	; (8002ad4 <StarLPTask+0x87c>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 809e 	beq.w	80029b6 <StarLPTask+0x75e>
				sprintf(gpsstr, "\"Locked: %d Sats<br>Lon: %d<br>Lat: %d\"", statuspkt.NavPvt.numSV,
 800287a:	f89b 201b 	ldrb.w	r2, [fp, #27]
 800287e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8002882:	f8db 0020 	ldr.w	r0, [fp, #32]
 8002886:	4994      	ldr	r1, [pc, #592]	; (8002ad8 <StarLPTask+0x880>)
 8002888:	9000      	str	r0, [sp, #0]
 800288a:	4894      	ldr	r0, [pc, #592]	; (8002adc <StarLPTask+0x884>)
 800288c:	f020 fda2 	bl	80233d4 <siprintf>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 8002890:	2300      	movs	r3, #0
 8002892:	6820      	ldr	r0, [r4, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4619      	mov	r1, r3
 8002898:	f011 f9de 	bl	8013c58 <xQueueGenericSend>
 800289c:	2801      	cmp	r0, #1
 800289e:	d002      	beq.n	80028a6 <StarLPTask+0x64e>
				printf("semaphore 1b release failed\n");
 80028a0:	488f      	ldr	r0, [pc, #572]	; (8002ae0 <StarLPTask+0x888>)
 80028a2:	f020 fcbb 	bl	802321c <puts>
			onesectimer++;
 80028a6:	3601      	adds	r6, #1
				printf("sem wait 1c\n");
 80028a8:	4f8e      	ldr	r7, [pc, #568]	; (8002ae4 <StarLPTask+0x88c>)
			onesectimer++;
 80028aa:	b2b6      	uxth	r6, r6
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80028ac:	e002      	b.n	80028b4 <StarLPTask+0x65c>
				printf("sem wait 1c\n");
 80028ae:	4638      	mov	r0, r7
 80028b0:	f020 fcb4 	bl	802321c <puts>
			while (!(xSemaphoreTake(ssicontentHandle, (TickType_t ) 25) == pdTRUE)) {// give the ssi generation semaphore (portMAX_DELAY == infinite)
 80028b4:	2119      	movs	r1, #25
 80028b6:	6820      	ldr	r0, [r4, #0]
 80028b8:	f011 fc54 	bl	8014164 <xQueueSemaphoreTake>
 80028bc:	2801      	cmp	r0, #1
 80028be:	d1f6      	bne.n	80028ae <StarLPTask+0x656>
			if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 80028c0:	2300      	movs	r3, #0
 80028c2:	6820      	ldr	r0, [r4, #0]
 80028c4:	461a      	mov	r2, r3
 80028c6:	4619      	mov	r1, r3
 80028c8:	f011 f9c6 	bl	8013c58 <xQueueGenericSend>
 80028cc:	2801      	cmp	r0, #1
 80028ce:	d002      	beq.n	80028d6 <StarLPTask+0x67e>
				printf("semaphore 1c release failed\n");
 80028d0:	4885      	ldr	r0, [pc, #532]	; (8002ae8 <StarLPTask+0x890>)
 80028d2:	f020 fca3 	bl	802321c <puts>
			lcd_trigplot();		// update lcd trigger and noise plots
 80028d6:	f7fe ffc7 	bl	8001868 <lcd_trigplot>
 80028da:	e616      	b.n	800250a <StarLPTask+0x2b2>
				gpsbadcount = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	4a83      	ldr	r2, [pc, #524]	; (8002aec <StarLPTask+0x894>)
 80028e0:	6013      	str	r3, [r2, #0]
 80028e2:	e647      	b.n	8002574 <StarLPTask+0x31c>
			gainchanged = 0;
 80028e4:	9006      	str	r0, [sp, #24]
 80028e6:	e632      	b.n	800254e <StarLPTask+0x2f6>
			if ((!(lcd_initflag)) && (lastsec != onesectimer) && (lcd_currentpage == 0)) {
 80028e8:	4c81      	ldr	r4, [pc, #516]	; (8002af0 <StarLPTask+0x898>)
 80028ea:	8823      	ldrh	r3, [r4, #0]
 80028ec:	42b3      	cmp	r3, r6
 80028ee:	4b81      	ldr	r3, [pc, #516]	; (8002af4 <StarLPTask+0x89c>)
 80028f0:	f43f adfb 	beq.w	80024ea <StarLPTask+0x292>
 80028f4:	781a      	ldrb	r2, [r3, #0]
 80028f6:	2a00      	cmp	r2, #0
 80028f8:	f47f adf7 	bne.w	80024ea <StarLPTask+0x292>
				timeinfo = *localtime(&localepochtime);
 80028fc:	487e      	ldr	r0, [pc, #504]	; (8002af8 <StarLPTask+0x8a0>)
 80028fe:	f01f fb25 	bl	8021f4c <localtime>
 8002902:	4f7e      	ldr	r7, [pc, #504]	; (8002afc <StarLPTask+0x8a4>)
 8002904:	4684      	mov	ip, r0
 8002906:	46be      	mov	lr, r7
 8002908:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800290c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002910:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8002914:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8002918:	f8dc 3000 	ldr.w	r3, [ip]
				lastsec = onesectimer;
 800291c:	8026      	strh	r6, [r4, #0]
				timeinfo = *localtime(&localepochtime);
 800291e:	f8ce 3000 	str.w	r3, [lr]
				lcd_time();
 8002922:	f7fe fdad 	bl	8001480 <lcd_time>
				if (timeinfo.tm_yday != lastday) {
 8002926:	4b76      	ldr	r3, [pc, #472]	; (8002b00 <StarLPTask+0x8a8>)
 8002928:	69fa      	ldr	r2, [r7, #28]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	429a      	cmp	r2, r3
 800292e:	f43f ade0 	beq.w	80024f2 <StarLPTask+0x29a>
					lcd_date();
 8002932:	f7fe fdf7 	bl	8001524 <lcd_date>
 8002936:	e5dc      	b.n	80024f2 <StarLPTask+0x29a>
				statuspkt.jabcnt++;
 8002938:	f8bb 2086 	ldrh.w	r2, [fp, #134]	; 0x86
				jabbertimeout = 1;		// 100mS seconds pause
 800293c:	2001      	movs	r0, #1
 800293e:	4971      	ldr	r1, [pc, #452]	; (8002b04 <StarLPTask+0x8ac>)
				statuspkt.jabcnt++;
 8002940:	4402      	add	r2, r0
				jabbertimeout = 1;		// 100mS seconds pause
 8002942:	6008      	str	r0, [r1, #0]
				statuspkt.jabcnt++;
 8002944:	b292      	uxth	r2, r2
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 8002946:	4870      	ldr	r0, [pc, #448]	; (8002b08 <StarLPTask+0x8b0>)
				statuspkt.jabcnt++;
 8002948:	f8ab 2086 	strh.w	r2, [fp, #134]	; 0x86
				printf("Jabbering: %d\n", statuspkt.trigcount - jabtrigcnt);
 800294c:	f8db 107c 	ldr.w	r1, [fp, #124]	; 0x7c
 8002950:	1ac9      	subs	r1, r1, r3
 8002952:	f020 fbc7 	bl	80230e4 <iprintf>
				if (pgagain == 0) {		// gain is at zero (gain 1)
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <StarLPTask+0x8b4>)
 8002958:	f9b3 3000 	ldrsh.w	r3, [r3]
 800295c:	b93b      	cbnz	r3, 800296e <StarLPTask+0x716>
					if (trigthresh < 4095)
 800295e:	4a59      	ldr	r2, [pc, #356]	; (8002ac4 <StarLPTask+0x86c>)
 8002960:	f640 71fe 	movw	r1, #4094	; 0xffe
 8002964:	8813      	ldrh	r3, [r2, #0]
 8002966:	428b      	cmp	r3, r1
 8002968:	d801      	bhi.n	800296e <StarLPTask+0x716>
						trigthresh++;
 800296a:	3301      	adds	r3, #1
 800296c:	8013      	strh	r3, [r2, #0]
				if (agc) {
 800296e:	4b68      	ldr	r3, [pc, #416]	; (8002b10 <StarLPTask+0x8b8>)
 8002970:	881b      	ldrh	r3, [r3, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d165      	bne.n	8002a42 <StarLPTask+0x7ea>
				jabtrigcnt = statuspkt.trigcount;
 8002976:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
 800297a:	6023      	str	r3, [r4, #0]
				n = pretrigcnt - lastpretrigcnt;		// count pretriggers
 800297c:	4b65      	ldr	r3, [pc, #404]	; (8002b14 <StarLPTask+0x8bc>)
 800297e:	4a66      	ldr	r2, [pc, #408]	; (8002b18 <StarLPTask+0x8c0>)
 8002980:	6819      	ldr	r1, [r3, #0]
 8002982:	6813      	ldr	r3, [r2, #0]
 8002984:	1acb      	subs	r3, r1, r3
				if (n > 5) {				// too many triggers in 100mS
 8002986:	2b05      	cmp	r3, #5
 8002988:	dd27      	ble.n	80029da <StarLPTask+0x782>
					if (trigthresh < 4095)
 800298a:	484e      	ldr	r0, [pc, #312]	; (8002ac4 <StarLPTask+0x86c>)
 800298c:	f640 74fe 	movw	r4, #4094	; 0xffe
 8002990:	8803      	ldrh	r3, [r0, #0]
 8002992:	42a3      	cmp	r3, r4
 8002994:	d801      	bhi.n	800299a <StarLPTask+0x742>
						trigthresh++;
 8002996:	3301      	adds	r3, #1
 8002998:	8003      	strh	r3, [r0, #0]
				lastpretrigcnt = pretrigcnt;	// (dont worry about 2^32 wrap)
 800299a:	2300      	movs	r3, #0
 800299c:	6011      	str	r1, [r2, #0]
 800299e:	9306      	str	r3, [sp, #24]
 80029a0:	e59d      	b.n	80024de <StarLPTask+0x286>
				HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80029a2:	2008      	movs	r0, #8
 80029a4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80029a8:	4a5c      	ldr	r2, [pc, #368]	; (8002b1c <StarLPTask+0x8c4>)
 80029aa:	2100      	movs	r1, #0
 80029ac:	9000      	str	r0, [sp, #0]
 80029ae:	485c      	ldr	r0, [pc, #368]	; (8002b20 <StarLPTask+0x8c8>)
 80029b0:	f004 ff7c 	bl	80078ac <HAL_DAC_Start_DMA>
 80029b4:	e662      	b.n	800267c <StarLPTask+0x424>
				strcpy(gpsstr, "\"<font color=red>**Lost GPS**<\/font>\"");  // for http
 80029b6:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8002b34 <StarLPTask+0x8dc>
 80029ba:	4f48      	ldr	r7, [pc, #288]	; (8002adc <StarLPTask+0x884>)
 80029bc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029c0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80029c2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80029c6:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 80029c8:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80029cc:	f847 0b04 	str.w	r0, [r7], #4
 80029d0:	8039      	strh	r1, [r7, #0]
 80029d2:	e75d      	b.n	8002890 <StarLPTask+0x638>
				HAL_GPIO_WritePin(GPIOD, LED_D2_Pin, GPIO_PIN_RESET);
 80029d4:	f007 fb8c 	bl	800a0f0 <HAL_GPIO_WritePin>
 80029d8:	e6ff      	b.n	80027da <StarLPTask+0x582>
				if (n == 0) {		// no triggers in last 100mS
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d1dd      	bne.n	800299a <StarLPTask+0x742>
					if (trigthresh > MINTRIGTHRES)	// dont permit trigthresh < minimum
 80029de:	4839      	ldr	r0, [pc, #228]	; (8002ac4 <StarLPTask+0x86c>)
 80029e0:	8803      	ldrh	r3, [r0, #0]
 80029e2:	2b03      	cmp	r3, #3
 80029e4:	d9d9      	bls.n	800299a <StarLPTask+0x742>
						trigthresh--;
 80029e6:	3b01      	subs	r3, #1
 80029e8:	8003      	strh	r3, [r0, #0]
 80029ea:	e7d6      	b.n	800299a <StarLPTask+0x742>
				if (getpressure115() != HAL_OK) {
 80029ec:	f001 fe50 	bl	8004690 <getpressure115>
 80029f0:	2800      	cmp	r0, #0
 80029f2:	f43f adca 	beq.w	800258a <StarLPTask+0x332>
					printf("MPL115A2 error\n\r");
 80029f6:	484b      	ldr	r0, [pc, #300]	; (8002b24 <StarLPTask+0x8cc>)
 80029f8:	f020 fb74 	bl	80230e4 <iprintf>
 80029fc:	e5c5      	b.n	800258a <StarLPTask+0x332>
				lcd_showvars();
 80029fe:	f7fe fdad 	bl	800155c <lcd_showvars>
 8002a02:	e576      	b.n	80024f2 <StarLPTask+0x29a>
					gainchanged = bumppga(-1);
 8002a04:	f04f 30ff 	mov.w	r0, #4294967295
 8002a08:	f001 fde0 	bl	80045cc <bumppga>
 8002a0c:	b203      	sxth	r3, r0
 8002a0e:	9306      	str	r3, [sp, #24]
				prevtrigs = trigs;
 8002a10:	f8d8 3000 	ldr.w	r3, [r8]
 8002a14:	6023      	str	r3, [r4, #0]
				if (gainchanged > 0) {	// increased gain
 8002a16:	9b06      	ldr	r3, [sp, #24]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f77f ad98 	ble.w	800254e <StarLPTask+0x2f6>
					if (trigthresh < (4095 - 10))
 8002a1e:	883b      	ldrh	r3, [r7, #0]
 8002a20:	f640 72f4 	movw	r2, #4084	; 0xff4
 8002a24:	4293      	cmp	r3, r2
 8002a26:	f63f ad92 	bhi.w	800254e <StarLPTask+0x2f6>
						trigthresh += 5;
 8002a2a:	3305      	adds	r3, #5
 8002a2c:	803b      	strh	r3, [r7, #0]
 8002a2e:	e58e      	b.n	800254e <StarLPTask+0x2f6>
				if (getpressure3115() != HAL_OK) {
 8002a30:	f001 ffc6 	bl	80049c0 <getpressure3115>
 8002a34:	2800      	cmp	r0, #0
 8002a36:	f43f ada8 	beq.w	800258a <StarLPTask+0x332>
					printf("MPL3115A2 error\n\r");
 8002a3a:	483b      	ldr	r0, [pc, #236]	; (8002b28 <StarLPTask+0x8d0>)
 8002a3c:	f020 fb52 	bl	80230e4 <iprintf>
 8002a40:	e5a3      	b.n	800258a <StarLPTask+0x332>
					gainchanged = bumppga(-1);	// decrease gain
 8002a42:	f04f 30ff 	mov.w	r0, #4294967295
 8002a46:	f001 fdc1 	bl	80045cc <bumppga>
				jabtrigcnt = statuspkt.trigcount;
 8002a4a:	f8db 307c 	ldr.w	r3, [fp, #124]	; 0x7c
					gainchanged = bumppga(-1);	// decrease gain
 8002a4e:	b202      	sxth	r2, r0
				jabtrigcnt = statuspkt.trigcount;
 8002a50:	6023      	str	r3, [r4, #0]
					gainchanged = bumppga(-1);	// decrease gain
 8002a52:	9206      	str	r2, [sp, #24]
				jabtrigcnt = statuspkt.trigcount;
 8002a54:	e53f      	b.n	80024d6 <StarLPTask+0x27e>
						gainchanged = bumppga(1);
 8002a56:	2001      	movs	r0, #1
 8002a58:	f001 fdb8 	bl	80045cc <bumppga>
				if (trigsin10sec > MAXTRIGS10S)
 8002a5c:	4933      	ldr	r1, [pc, #204]	; (8002b2c <StarLPTask+0x8d4>)
 8002a5e:	680b      	ldr	r3, [r1, #0]
 8002a60:	2b0a      	cmp	r3, #10
 8002a62:	d8cf      	bhi.n	8002a04 <StarLPTask+0x7ac>
						gainchanged = bumppga(1);
 8002a64:	b203      	sxth	r3, r0
 8002a66:	9306      	str	r3, [sp, #24]
 8002a68:	e7d2      	b.n	8002a10 <StarLPTask+0x7b8>
					printf("GPS bad - rebooting...\n");
 8002a6a:	4831      	ldr	r0, [pc, #196]	; (8002b30 <StarLPTask+0x8d8>)
 8002a6c:	f020 fbd6 	bl	802321c <puts>
					osDelay(3000);
 8002a70:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002a74:	f010 fdd6 	bl	8013624 <osDelay>
					rebootme(5);
 8002a78:	2005      	movs	r0, #5
 8002a7a:	f7ff fbcb 	bl	8002214 <rebootme>
 8002a7e:	bf00      	nop
 8002a80:	08027e58 	.word	0x08027e58
 8002a84:	20000270 	.word	0x20000270
 8002a88:	40020c00 	.word	0x40020c00
 8002a8c:	2001b6d0 	.word	0x2001b6d0
 8002a90:	08027e84 	.word	0x08027e84
 8002a94:	2001bcc8 	.word	0x2001bcc8
 8002a98:	08027e90 	.word	0x08027e90
 8002a9c:	20000054 	.word	0x20000054
 8002aa0:	2001bd58 	.word	0x2001bd58
 8002aa4:	2001bd5c 	.word	0x2001bd5c
 8002aa8:	08027e98 	.word	0x08027e98
 8002aac:	20000230 	.word	0x20000230
 8002ab0:	2001bd64 	.word	0x2001bd64
 8002ab4:	2001bd60 	.word	0x2001bd60
 8002ab8:	20000074 	.word	0x20000074
 8002abc:	20000740 	.word	0x20000740
 8002ac0:	200006ec 	.word	0x200006ec
 8002ac4:	20000002 	.word	0x20000002
 8002ac8:	20000128 	.word	0x20000128
 8002acc:	2000023c 	.word	0x2000023c
 8002ad0:	08027ea0 	.word	0x08027ea0
 8002ad4:	20001cd9 	.word	0x20001cd9
 8002ad8:	08027f48 	.word	0x08027f48
 8002adc:	20000014 	.word	0x20000014
 8002ae0:	08027f98 	.word	0x08027f98
 8002ae4:	08027fb4 	.word	0x08027fb4
 8002ae8:	08027fc0 	.word	0x08027fc0
 8002aec:	20001c44 	.word	0x20001c44
 8002af0:	20000008 	.word	0x20000008
 8002af4:	200015ac 	.word	0x200015ac
 8002af8:	2001aed0 	.word	0x2001aed0
 8002afc:	2001ae80 	.word	0x2001ae80
 8002b00:	200015a0 	.word	0x200015a0
 8002b04:	200006f4 	.word	0x200006f4
 8002b08:	08027e74 	.word	0x08027e74
 8002b0c:	20001cc4 	.word	0x20001cc4
 8002b10:	20000010 	.word	0x20000010
 8002b14:	20000744 	.word	0x20000744
 8002b18:	20001c50 	.word	0x20001c50
 8002b1c:	08028334 	.word	0x08028334
 8002b20:	2001b5f4 	.word	0x2001b5f4
 8002b24:	08028010 	.word	0x08028010
 8002b28:	08028024 	.word	0x08028024
 8002b2c:	20001c6c 	.word	0x20001c6c
 8002b30:	08027ff8 	.word	0x08027ff8
 8002b34:	08027f70 	.word	0x08027f70

08002b38 <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 8002b38:	2100      	movs	r1, #0
 8002b3a:	f004 bf53 	b.w	80079e4 <HAL_DAC_Stop_DMA>
 8002b3e:	bf00      	nop

08002b40 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 8002b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 8002b42:	6803      	ldr	r3, [r0, #0]
 8002b44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b48:	d003      	beq.n	8002b52 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 8002b4a:	4a1b      	ldr	r2, [pc, #108]	; (8002bb8 <HAL_TIM_IC_CaptureCallback+0x78>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d02d      	beq.n	8002bac <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8002b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002b52:	4c1a      	ldr	r4, [pc, #104]	; (8002bbc <HAL_TIM_IC_CaptureCallback+0x7c>)
 8002b54:	4b1a      	ldr	r3, [pc, #104]	; (8002bc0 <HAL_TIM_IC_CaptureCallback+0x80>)
 8002b56:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 8002b58:	4a1a      	ldr	r2, [pc, #104]	; (8002bc4 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002b5a:	3101      	adds	r1, #1
 8002b5c:	481a      	ldr	r0, [pc, #104]	; (8002bc8 <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8002b5e:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002b60:	fba3 5301 	umull	r5, r3, r3, r1
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8002b6a:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8002b72:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002b74:	4815      	ldr	r0, [pc, #84]	; (8002bcc <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 8002b76:	b1b2      	cbz	r2, 8002ba6 <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8002b78:	f007 fad4 	bl	800a124 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8002b7c:	4d14      	ldr	r5, [pc, #80]	; (8002bd0 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8002b7e:	2100      	movs	r1, #0
		diff = lastcap;
 8002b80:	4e14      	ldr	r6, [pc, #80]	; (8002bd4 <HAL_TIM_IC_CaptureCallback+0x94>)
 8002b82:	462b      	mov	r3, r5
 8002b84:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 8002b88:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8002b90:	4298      	cmp	r0, r3
		sum += data[i];
 8002b92:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8002b94:	d1f9      	bne.n	8002b8a <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 8002b96:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002b98:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 8002b9a:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8002b9c:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002b9e:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8002ba0:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8002ba2:	6033      	str	r3, [r6, #0]
}
 8002ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8002ba6:	f007 faa3 	bl	800a0f0 <HAL_GPIO_WritePin>
 8002baa:	e7e7      	b.n	8002b7c <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8002bac:	480b      	ldr	r0, [pc, #44]	; (8002bdc <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8002bae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8002bb2:	f020 bb33 	b.w	802321c <puts>
 8002bb6:	bf00      	nop
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	2001adc0 	.word	0x2001adc0
 8002bc0:	88888889 	.word	0x88888889
 8002bc4:	20000270 	.word	0x20000270
 8002bc8:	20000748 	.word	0x20000748
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	20001c04 	.word	0x20001c04
 8002bd4:	20001c4c 	.word	0x20001c4c
 8002bd8:	2001ae6c 	.word	0x2001ae6c
 8002bdc:	080280b4 	.word	0x080280b4

08002be0 <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE BEGIN Callback 0 */
	static int counter = 0;

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 8002be0:	4a25      	ldr	r2, [pc, #148]	; (8002c78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8002be2:	6803      	ldr	r3, [r0, #0]
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d029      	beq.n	8002c3c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 8002be8:	4a24      	ldr	r2, [pc, #144]	; (8002c7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d02d      	beq.n	8002c4a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 8002bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bf2:	d02c      	beq.n	8002c4e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 8002bf4:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d030      	beq.n	8002c5c <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d005      	beq.n	8002c0c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM12) {
 8002c00:	4a21      	ldr	r2, [pc, #132]	; (8002c88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d01f      	beq.n	8002c46 <HAL_TIM_PeriodElapsedCallback+0x66>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8002c06:	4821      	ldr	r0, [pc, #132]	; (8002c8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8002c08:	f020 bb08 	b.w	802321c <puts>
{
 8002c0c:	b510      	push	{r4, lr}
		t1sec++;
 8002c0e:	4920      	ldr	r1, [pc, #128]	; (8002c90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8002c10:	4c20      	ldr	r4, [pc, #128]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8002c12:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002c14:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8002c16:	4820      	ldr	r0, [pc, #128]	; (8002c98 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8002c18:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 8002c1a:	3301      	adds	r3, #1
		if (netup)
 8002c1c:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 8002c1e:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8002c20:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8002c22:	b110      	cbz	r0, 8002c2a <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8002c24:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8002c26:	3301      	adds	r3, #1
 8002c28:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 8002c2a:	4b1c      	ldr	r3, [pc, #112]	; (8002c9c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	b9c3      	cbnz	r3, 8002c62 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8002c32:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8002c34:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8002c36:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
  /* USER CODE END Callback 1 */
}
 8002c3a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8002c3e:	6813      	ldr	r3, [r2, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	6013      	str	r3, [r2, #0]
		return;
 8002c44:	4770      	bx	lr
    HAL_IncTick();
 8002c46:	f004 b875 	b.w	8006d34 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 8002c4a:	f7fd be17 	b.w	800087c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 8002c4e:	4a11      	ldr	r2, [pc, #68]	; (8002c94 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8002c50:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8002c52:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002c54:	6819      	ldr	r1, [r3, #0]
 8002c56:	4815      	ldr	r0, [pc, #84]	; (8002cac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8002c58:	f020 ba44 	b.w	80230e4 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 8002c5c:	4814      	ldr	r0, [pc, #80]	; (8002cb0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8002c5e:	f020 badd 	b.w	802321c <puts>
			statuspkt.gpsuptime++;
 8002c62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002c64:	3301      	adds	r3, #1
 8002c66:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8002c68:	f001 f888 	bl	8003d7c <calcepoch32>
				epochvalid = 1;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002c6e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8002c70:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8002c74:	701a      	strb	r2, [r3, #0]
}
 8002c76:	bd10      	pop	{r4, pc}
 8002c78:	40002000 	.word	0x40002000
 8002c7c:	40000c00 	.word	0x40000c00
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40001000 	.word	0x40001000
 8002c88:	40001800 	.word	0x40001800
 8002c8c:	08028104 	.word	0x08028104
 8002c90:	20001c64 	.word	0x20001c64
 8002c94:	2001adc0 	.word	0x2001adc0
 8002c98:	20000742 	.word	0x20000742
 8002c9c:	20001cd9 	.word	0x20001cd9
 8002ca0:	20001cd8 	.word	0x20001cd8
 8002ca4:	20001c60 	.word	0x20001c60
 8002ca8:	2001ae6c 	.word	0x2001ae6c
 8002cac:	080280c4 	.word	0x080280c4
 8002cb0:	080280e8 	.word	0x080280e8

08002cb4 <Error_Handler>:
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 8002cb4:	4c02      	ldr	r4, [pc, #8]	; (8002cc0 <Error_Handler+0xc>)
{
 8002cb6:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 8002cb8:	4620      	mov	r0, r4
 8002cba:	f020 faaf 	bl	802321c <puts>
	while (1) {
 8002cbe:	e7fb      	b.n	8002cb8 <Error_Handler+0x4>
 8002cc0:	0802812c 	.word	0x0802812c

08002cc4 <SystemClock_Config>:
{
 8002cc4:	b570      	push	{r4, r5, r6, lr}
 8002cc6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cc8:	2234      	movs	r2, #52	; 0x34
 8002cca:	2100      	movs	r1, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002ccc:	2509      	movs	r5, #9
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cce:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cd0:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cd2:	f01f fa95 	bl	8022200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002cdc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002ce0:	9306      	str	r3, [sp, #24]
  HAL_PWR_EnableBkUpAccess();
 8002ce2:	f008 fde9 	bl	800b8b8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ce6:	4a20      	ldr	r2, [pc, #128]	; (8002d68 <SystemClock_Config+0xa4>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce8:	a807      	add	r0, sp, #28
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <SystemClock_Config+0xa8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cec:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8002cee:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8002cf2:	6411      	str	r1, [r2, #64]	; 0x40
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cf4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cfa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002cfe:	9200      	str	r2, [sp, #0]
 8002d00:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d08:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d0a:	2201      	movs	r2, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d0c:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8002d0e:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d10:	f44f 0580 	mov.w	r5, #4194304	; 0x400000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d18:	9108      	str	r1, [sp, #32]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002d1a:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d1c:	2104      	movs	r1, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d1e:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d20:	22d8      	movs	r2, #216	; 0xd8
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d22:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002d24:	2306      	movs	r3, #6
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d26:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002d28:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002d2a:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002d2c:	9210      	str	r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002d2e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d30:	e9cd 510e 	strd	r5, r1, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d34:	f008 fe04 	bl	800b940 <HAL_RCC_OscConfig>
 8002d38:	b9a0      	cbnz	r0, 8002d64 <SystemClock_Config+0xa0>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002d3a:	f008 fdc5 	bl	800b8c8 <HAL_PWREx_EnableOverDrive>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b980      	cbnz	r0, 8002d64 <SystemClock_Config+0xa0>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d42:	260f      	movs	r6, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002d44:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002d4c:	a802      	add	r0, sp, #8
 8002d4e:	2107      	movs	r1, #7
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d50:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d52:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d54:	9602      	str	r6, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002d56:	e9cd 5205 	strd	r5, r2, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002d5a:	f009 f8d1 	bl	800bf00 <HAL_RCC_ClockConfig>
 8002d5e:	b908      	cbnz	r0, 8002d64 <SystemClock_Config+0xa0>
}
 8002d60:	b014      	add	sp, #80	; 0x50
 8002d62:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler();
 8002d64:	f7ff ffa6 	bl	8002cb4 <Error_Handler>
 8002d68:	40023800 	.word	0x40023800
 8002d6c:	40007000 	.word	0x40007000

08002d70 <PeriphCommonClock_Config>:
{
 8002d70:	b530      	push	{r4, r5, lr}
 8002d72:	b0a5      	sub	sp, #148	; 0x94
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d74:	228c      	movs	r2, #140	; 0x8c
 8002d76:	2100      	movs	r1, #0
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d78:	25c0      	movs	r5, #192	; 0xc0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7a:	a801      	add	r0, sp, #4
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002d7c:	2403      	movs	r4, #3
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7e:	f01f fa3f 	bl	8022200 <memset>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d82:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8002d86:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002d88:	2101      	movs	r1, #1
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002d8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002d8e:	9000      	str	r0, [sp, #0]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d90:	4668      	mov	r0, sp
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002d92:	9505      	str	r5, [sp, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8002d94:	9408      	str	r4, [sp, #32]
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002d96:	910a      	str	r1, [sp, #40]	; 0x28
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002d98:	921f      	str	r2, [sp, #124]	; 0x7c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002d9a:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9e:	f009 fa17 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8002da2:	b908      	cbnz	r0, 8002da8 <PeriphCommonClock_Config+0x38>
}
 8002da4:	b025      	add	sp, #148	; 0x94
 8002da6:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8002da8:	f7ff ff84 	bl	8002cb4 <Error_Handler>

08002dac <main>:
{
 8002dac:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8002db0:	b0dd      	sub	sp, #372	; 0x174
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002db2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002db6:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002dba:	4bc2      	ldr	r3, [pc, #776]	; (80030c4 <main+0x318>)
 8002dbc:	2400      	movs	r4, #0
 8002dbe:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002dc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dc6:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002dca:	695a      	ldr	r2, [r3, #20]
 8002dcc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002dd0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002dd2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002dd6:	f3bf 8f6f 	isb	sy
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dda:	4dbb      	ldr	r5, [pc, #748]	; (80030c8 <main+0x31c>)
  HAL_Init();
 8002ddc:	f003 ff98 	bl	8006d10 <HAL_Init>
  SystemClock_Config();
 8002de0:	f7ff ff70 	bl	8002cc4 <SystemClock_Config>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002de4:	2601      	movs	r6, #1
  PeriphCommonClock_Config();
 8002de6:	f7ff ffc3 	bl	8002d70 <PeriphCommonClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dea:	9459      	str	r4, [sp, #356]	; 0x164
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002dec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002df0:	4622      	mov	r2, r4
 8002df2:	48b6      	ldr	r0, [pc, #728]	; (80030cc <main+0x320>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002df4:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = probe1_Pin;
 8002df8:	468a      	mov	sl, r1
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dfa:	2703      	movs	r7, #3
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002dfc:	f44f 1b88 	mov.w	fp, #1114112	; 0x110000
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002e00:	f04f 0880 	mov.w	r8, #128	; 0x80
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8002e08:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e0c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e0e:	f043 0310 	orr.w	r3, r3, #16
 8002e12:	632b      	str	r3, [r5, #48]	; 0x30
 8002e14:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	9303      	str	r3, [sp, #12]
 8002e1c:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e1e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	632b      	str	r3, [r5, #48]	; 0x30
 8002e26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	9304      	str	r3, [sp, #16]
 8002e2e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e30:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e32:	f043 0320 	orr.w	r3, r3, #32
 8002e36:	632b      	str	r3, [r5, #48]	; 0x30
 8002e38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e3a:	f003 0320 	and.w	r3, r3, #32
 8002e3e:	9305      	str	r3, [sp, #20]
 8002e40:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e42:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e48:	632b      	str	r3, [r5, #48]	; 0x30
 8002e4a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	9306      	str	r3, [sp, #24]
 8002e52:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e54:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	632b      	str	r3, [r5, #48]	; 0x30
 8002e5c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	9307      	str	r3, [sp, #28]
 8002e64:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e66:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e68:	f043 0302 	orr.w	r3, r3, #2
 8002e6c:	632b      	str	r3, [r5, #48]	; 0x30
 8002e6e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e70:	f003 0302 	and.w	r3, r3, #2
 8002e74:	9308      	str	r3, [sp, #32]
 8002e76:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002e78:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e7e:	632b      	str	r3, [r5, #48]	; 0x30
 8002e80:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	9309      	str	r3, [sp, #36]	; 0x24
 8002e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e8a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e8c:	f043 0308 	orr.w	r3, r3, #8
 8002e90:	632b      	str	r3, [r5, #48]	; 0x30
 8002e92:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8002e94:	f003 0308 	and.w	r3, r3, #8
 8002e98:	930a      	str	r3, [sp, #40]	; 0x28
 8002e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8002e9c:	f007 f928 	bl	800a0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8002ea0:	4622      	mov	r2, r4
 8002ea2:	f644 0181 	movw	r1, #18561	; 0x4881
 8002ea6:	488a      	ldr	r0, [pc, #552]	; (80030d0 <main+0x324>)
 8002ea8:	f007 f922 	bl	800a0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8002eac:	4622      	mov	r2, r4
 8002eae:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 8002eb2:	4888      	ldr	r0, [pc, #544]	; (80030d4 <main+0x328>)
 8002eb4:	f007 f91c 	bl	800a0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002eb8:	4632      	mov	r2, r6
 8002eba:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 8002ebe:	4886      	ldr	r0, [pc, #536]	; (80030d8 <main+0x32c>)
 8002ec0:	f007 f916 	bl	800a0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin|USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8002ec4:	4622      	mov	r2, r4
 8002ec6:	2144      	movs	r1, #68	; 0x44
 8002ec8:	4884      	ldr	r0, [pc, #528]	; (80030dc <main+0x330>)
 8002eca:	f007 f911 	bl	800a0f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 8002ece:	4622      	mov	r2, r4
 8002ed0:	4649      	mov	r1, r9
 8002ed2:	4881      	ldr	r0, [pc, #516]	; (80030d8 <main+0x32c>)
 8002ed4:	f007 f90c 	bl	800a0f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002ed8:	f642 1388 	movw	r3, #10632	; 0x2988
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002edc:	a955      	add	r1, sp, #340	; 0x154
 8002ede:	487d      	ldr	r0, [pc, #500]	; (80030d4 <main+0x328>)
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 8002ee0:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ee2:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ee4:	9756      	str	r7, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ee6:	f006 fe55 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002eea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002eee:	a955      	add	r1, sp, #340	; 0x154
 8002ef0:	487b      	ldr	r0, [pc, #492]	; (80030e0 <main+0x334>)
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8002ef2:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef4:	9457      	str	r4, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ef6:	f8cd b158 	str.w	fp, [sp, #344]	; 0x158
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8002efa:	f006 fe4b 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002efe:	f643 533c 	movw	r3, #15676	; 0x3d3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f02:	a955      	add	r1, sp, #340	; 0x154
 8002f04:	4871      	ldr	r0, [pc, #452]	; (80030cc <main+0x320>)
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 8002f06:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f08:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002f0c:	f006 fe42 	bl	8009b94 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002f10:	a955      	add	r1, sp, #340	; 0x154
 8002f12:	486e      	ldr	r0, [pc, #440]	; (80030cc <main+0x320>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f14:	e9cd a655 	strd	sl, r6, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002f18:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
  HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8002f1c:	f006 fe3a 	bl	8009b94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f20:	a955      	add	r1, sp, #340	; 0x154
 8002f22:	486f      	ldr	r0, [pc, #444]	; (80030e0 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002f24:	9657      	str	r6, [sp, #348]	; 0x15c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f26:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f2a:	f006 fe33 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f2e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f30:	a955      	add	r1, sp, #340	; 0x154
 8002f32:	486c      	ldr	r0, [pc, #432]	; (80030e4 <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002f34:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f36:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f006 fe2b 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8002f3e:	f644 0381 	movw	r3, #18561	; 0x4881
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f42:	a955      	add	r1, sp, #340	; 0x154
 8002f44:	4862      	ldr	r0, [pc, #392]	; (80030d0 <main+0x324>)
  GPIO_InitStruct.Pin = LD1_Pin|GPIO_PIN_11|LD3_Pin|LD2_Pin;
 8002f46:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f48:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f4e:	f006 fe21 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002f52:	2322      	movs	r3, #34	; 0x22
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f54:	a955      	add	r1, sp, #340	; 0x154
 8002f56:	485e      	ldr	r0, [pc, #376]	; (80030d0 <main+0x324>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8002f58:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5e:	f006 fe19 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002f62:	f24d 533b 	movw	r3, #54587	; 0xd53b
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f66:	a955      	add	r1, sp, #340	; 0x154
 8002f68:	485c      	ldr	r0, [pc, #368]	; (80030dc <main+0x330>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8002f6a:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002f70:	f006 fe10 	bl	8009b94 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f74:	a955      	add	r1, sp, #340	; 0x154
 8002f76:	4857      	ldr	r0, [pc, #348]	; (80030d4 <main+0x328>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f78:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8002f7c:	f04f 0a0c 	mov.w	sl, #12
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f80:	e9cd b456 	strd	fp, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f84:	f006 fe06 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15;
 8002f88:	f44f 4354 	mov.w	r3, #54272	; 0xd400
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f8c:	a955      	add	r1, sp, #340	; 0x154
 8002f8e:	4851      	ldr	r0, [pc, #324]	; (80030d4 <main+0x328>)
  GPIO_InitStruct.Pin = XBEE_DTR_Pin|GPIO_PIN_12|LP_FILT_Pin|GPIO_PIN_15;
 8002f90:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f92:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f98:	f006 fdfc 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002f9c:	f240 4385 	movw	r3, #1157	; 0x485
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fa0:	a955      	add	r1, sp, #340	; 0x154
 8002fa2:	484d      	ldr	r0, [pc, #308]	; (80030d8 <main+0x32c>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7;
 8002fa4:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002faa:	f006 fdf3 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002fae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fb2:	a955      	add	r1, sp, #340	; 0x154
 8002fb4:	4848      	ldr	r0, [pc, #288]	; (80030d8 <main+0x32c>)
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|LED_D4_Pin
 8002fb6:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb8:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fba:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002fbe:	f006 fde9 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002fc2:	2344      	movs	r3, #68	; 0x44
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fc4:	a955      	add	r1, sp, #340	; 0x154
 8002fc6:	4845      	ldr	r0, [pc, #276]	; (80030dc <main+0x330>)
  GPIO_InitStruct.Pin = CS_PGA_Pin|USB_PowerSwitchOn_Pin;
 8002fc8:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	9458      	str	r4, [sp, #352]	; 0x160
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fcc:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002fd0:	f006 fde0 	bl	8009b94 <HAL_GPIO_Init>
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fd4:	a955      	add	r1, sp, #340	; 0x154
 8002fd6:	4841      	ldr	r0, [pc, #260]	; (80030dc <main+0x330>)
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8002fd8:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f006 fdd8 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002fe8:	a955      	add	r1, sp, #340	; 0x154
 8002fea:	483d      	ldr	r0, [pc, #244]	; (80030e0 <main+0x334>)
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002fec:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fee:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff2:	f006 fdcf 	bl	8009b94 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	a955      	add	r1, sp, #340	; 0x154
 8002ffc:	4839      	ldr	r0, [pc, #228]	; (80030e4 <main+0x338>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ffe:	9355      	str	r3, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003000:	9758      	str	r7, [sp, #352]	; 0x160
  GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003002:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003006:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f006 fdc3 	bl	8009b94 <HAL_GPIO_Init>
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 800300e:	a955      	add	r1, sp, #340	; 0x154
 8003010:	4831      	ldr	r0, [pc, #196]	; (80030d8 <main+0x32c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003012:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003016:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
  HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 800301a:	f006 fdbb 	bl	8009b94 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800301e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003020:	4622      	mov	r2, r4
 8003022:	4639      	mov	r1, r7
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003024:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003028:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 800302a:	632b      	str	r3, [r5, #48]	; 0x30
 800302c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800302e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003032:	9301      	str	r3, [sp, #4]
 8003034:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800303c:	632b      	str	r3, [r5, #48]	; 0x30
 800303e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  huart2.Init.BaudRate = 115200;
 8003040:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003048:	9302      	str	r3, [sp, #8]
 800304a:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 800304c:	f004 fad8 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003050:	200b      	movs	r0, #11
 8003052:	f004 fb1f 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8003056:	4622      	mov	r2, r4
 8003058:	2106      	movs	r1, #6
 800305a:	4650      	mov	r0, sl
 800305c:	f004 fad0 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003060:	4650      	mov	r0, sl
 8003062:	f004 fb17 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8003066:	4622      	mov	r2, r4
 8003068:	2106      	movs	r1, #6
 800306a:	2010      	movs	r0, #16
 800306c:	f004 fac8 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003070:	2010      	movs	r0, #16
 8003072:	f004 fb0f 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8003076:	4622      	mov	r2, r4
 8003078:	4639      	mov	r1, r7
 800307a:	2011      	movs	r0, #17
 800307c:	f004 fac0 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003080:	2011      	movs	r0, #17
 8003082:	f004 fb07 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8003086:	4622      	mov	r2, r4
 8003088:	4639      	mov	r1, r7
 800308a:	202f      	movs	r0, #47	; 0x2f
 800308c:	f004 fab8 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003090:	202f      	movs	r0, #47	; 0x2f
 8003092:	f004 faff 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8003096:	4622      	mov	r2, r4
 8003098:	2106      	movs	r1, #6
 800309a:	2039      	movs	r0, #57	; 0x39
 800309c:	f004 fab0 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80030a0:	2039      	movs	r0, #57	; 0x39
 80030a2:	f004 faf7 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 80030a6:	4622      	mov	r2, r4
 80030a8:	4649      	mov	r1, r9
 80030aa:	203c      	movs	r0, #60	; 0x3c
 80030ac:	f004 faa8 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80030b0:	203c      	movs	r0, #60	; 0x3c
 80030b2:	f004 faef 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 80030b6:	4622      	mov	r2, r4
 80030b8:	4639      	mov	r1, r7
 80030ba:	2045      	movs	r0, #69	; 0x45
 80030bc:	f004 faa0 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80030c0:	2045      	movs	r0, #69	; 0x45
 80030c2:	e011      	b.n	80030e8 <main+0x33c>
 80030c4:	e000ed00 	.word	0xe000ed00
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40021400 	.word	0x40021400
 80030d0:	40020400 	.word	0x40020400
 80030d4:	40021000 	.word	0x40021000
 80030d8:	40020c00 	.word	0x40020c00
 80030dc:	40021800 	.word	0x40021800
 80030e0:	40020800 	.word	0x40020800
 80030e4:	40020000 	.word	0x40020000
 80030e8:	f004 fad4 	bl	8007694 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80030ec:	48b7      	ldr	r0, [pc, #732]	; (80033cc <main+0x620>)
 80030ee:	f8df c334 	ldr.w	ip, [pc, #820]	; 8003424 <main+0x678>
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 80030f2:	4623      	mov	r3, r4
 80030f4:	4622      	mov	r2, r4
 80030f6:	4621      	mov	r1, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 80030f8:	f8c0 a014 	str.w	sl, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80030fc:	6084      	str	r4, [r0, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80030fe:	e9c0 4403 	strd	r4, r4, [r0, #12]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003102:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003106:	e9c0 4408 	strd	r4, r4, [r0, #32]
  huart2.Init.BaudRate = 115200;
 800310a:	e9c0 c500 	strd	ip, r5, [r0]
  if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK)
 800310e:	f00e fa4d 	bl	80115ac <HAL_RS485Ex_Init>
 8003112:	2800      	cmp	r0, #0
 8003114:	f040 8487 	bne.w	8003a26 <main+0xc7a>
  hadc1.Instance = ADC1;
 8003118:	4cad      	ldr	r4, [pc, #692]	; (80033d0 <main+0x624>)
 800311a:	4603      	mov	r3, r0
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800311c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  hadc1.Instance = ADC1;
 8003120:	49ac      	ldr	r1, [pc, #688]	; (80033d4 <main+0x628>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003122:	4aad      	ldr	r2, [pc, #692]	; (80033d8 <main+0x62c>)
  ADC_MultiModeTypeDef multimode = {0};
 8003124:	9022      	str	r0, [sp, #136]	; 0x88
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003126:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8003128:	9345      	str	r3, [sp, #276]	; 0x114
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800312a:	60a3      	str	r3, [r4, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800312c:	6123      	str	r3, [r4, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800312e:	61a6      	str	r6, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003130:	f884 3020 	strb.w	r3, [r4, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003134:	62e3      	str	r3, [r4, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003136:	60e3      	str	r3, [r4, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003138:	61e6      	str	r6, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800313a:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800313e:	6163      	str	r3, [r4, #20]
  hadc1.Instance = ADC1;
 8003140:	6021      	str	r1, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003142:	62a2      	str	r2, [r4, #40]	; 0x28
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003144:	6065      	str	r5, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003146:	9348      	str	r3, [sp, #288]	; 0x120
  ADC_MultiModeTypeDef multimode = {0};
 8003148:	e9cd 3323 	strd	r3, r3, [sp, #140]	; 0x8c
  ADC_ChannelConfTypeDef sConfig = {0};
 800314c:	e9cd 3346 	strd	r3, r3, [sp, #280]	; 0x118
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003150:	f003 fe14 	bl	8006d7c <HAL_ADC_Init>
 8003154:	2800      	cmp	r0, #0
 8003156:	f040 8466 	bne.w	8003a26 <main+0xc7a>
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 800315a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 800315e:	2217      	movs	r2, #23
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8003160:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003162:	a922      	add	r1, sp, #136	; 0x88
 8003164:	4620      	mov	r0, r4
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003166:	9323      	str	r3, [sp, #140]	; 0x8c
  multimode.Mode = ADC_TRIPLEMODE_INTERL;
 8003168:	9222      	str	r2, [sp, #136]	; 0x88
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800316a:	f004 f9c9 	bl	8007500 <HAL_ADCEx_MultiModeConfigChannel>
 800316e:	4603      	mov	r3, r0
 8003170:	2800      	cmp	r0, #0
 8003172:	f040 8458 	bne.w	8003a26 <main+0xc7a>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003176:	4620      	mov	r0, r4
 8003178:	a945      	add	r1, sp, #276	; 0x114
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800317a:	9347      	str	r3, [sp, #284]	; 0x11c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800317c:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003180:	f004 f8c8 	bl	8007314 <HAL_ADC_ConfigChannel>
 8003184:	4603      	mov	r3, r0
 8003186:	2800      	cmp	r0, #0
 8003188:	f040 844d 	bne.w	8003a26 <main+0xc7a>
  hadc2.Instance = ADC2;
 800318c:	4c93      	ldr	r4, [pc, #588]	; (80033dc <main+0x630>)
 800318e:	4a94      	ldr	r2, [pc, #592]	; (80033e0 <main+0x634>)
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003190:	4620      	mov	r0, r4
  ADC_ChannelConfTypeDef sConfig = {0};
 8003192:	9341      	str	r3, [sp, #260]	; 0x104
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003194:	6123      	str	r3, [r4, #16]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003196:	f884 3020 	strb.w	r3, [r4, #32]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800319a:	60e3      	str	r3, [r4, #12]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800319c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031a0:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031a2:	9344      	str	r3, [sp, #272]	; 0x110
  hadc2.Init.ContinuousConvMode = ENABLE;
 80031a4:	61a6      	str	r6, [r4, #24]
  hadc2.Init.NbrOfConversion = 1;
 80031a6:	61e6      	str	r6, [r4, #28]
  hadc2.Instance = ADC2;
 80031a8:	6022      	str	r2, [r4, #0]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80031aa:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031ae:	e9cd 3342 	strd	r3, r3, [sp, #264]	; 0x108
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80031b2:	f003 fde3 	bl	8006d7c <HAL_ADC_Init>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2800      	cmp	r0, #0
 80031ba:	f040 8434 	bne.w	8003a26 <main+0xc7a>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031be:	4620      	mov	r0, r4
 80031c0:	a941      	add	r1, sp, #260	; 0x104
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80031c2:	9343      	str	r3, [sp, #268]	; 0x10c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80031c4:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80031c8:	f004 f8a4 	bl	8007314 <HAL_ADC_ConfigChannel>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2800      	cmp	r0, #0
 80031d0:	f040 8429 	bne.w	8003a26 <main+0xc7a>
  hadc3.Instance = ADC3;
 80031d4:	4c83      	ldr	r4, [pc, #524]	; (80033e4 <main+0x638>)
 80031d6:	4a84      	ldr	r2, [pc, #528]	; (80033e8 <main+0x63c>)
  ADC_ChannelConfTypeDef sConfig = {0};
 80031d8:	903d      	str	r0, [sp, #244]	; 0xf4
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80031da:	4620      	mov	r0, r4
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80031dc:	6123      	str	r3, [r4, #16]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80031de:	f884 3020 	strb.w	r3, [r4, #32]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031e2:	60e3      	str	r3, [r4, #12]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80031e4:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80031e8:	6163      	str	r3, [r4, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031ea:	9340      	str	r3, [sp, #256]	; 0x100
  hadc3.Init.ContinuousConvMode = ENABLE;
 80031ec:	61a6      	str	r6, [r4, #24]
  hadc3.Init.NbrOfConversion = 1;
 80031ee:	61e6      	str	r6, [r4, #28]
  hadc3.Instance = ADC3;
 80031f0:	6022      	str	r2, [r4, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80031f2:	e9c4 5301 	strd	r5, r3, [r4, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 80031f6:	e9cd 333e 	strd	r3, r3, [sp, #248]	; 0xf8
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80031fa:	f003 fdbf 	bl	8006d7c <HAL_ADC_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2800      	cmp	r0, #0
 8003202:	f040 8410 	bne.w	8003a26 <main+0xc7a>
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003206:	4620      	mov	r0, r4
 8003208:	a93d      	add	r1, sp, #244	; 0xf4
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800320a:	933f      	str	r3, [sp, #252]	; 0xfc
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800320c:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8003210:	f004 f880 	bl	8007314 <HAL_ADC_ConfigChannel>
 8003214:	2800      	cmp	r0, #0
 8003216:	f040 8406 	bne.w	8003a26 <main+0xc7a>
  hrng.Instance = RNG;
 800321a:	4b74      	ldr	r3, [pc, #464]	; (80033ec <main+0x640>)
 800321c:	4874      	ldr	r0, [pc, #464]	; (80033f0 <main+0x644>)
 800321e:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003220:	f009 fcc0 	bl	800cba4 <HAL_RNG_Init>
 8003224:	4603      	mov	r3, r0
 8003226:	2800      	cmp	r0, #0
 8003228:	f040 83fd 	bne.w	8003a26 <main+0xc7a>
  htim6.Instance = TIM6;
 800322c:	4871      	ldr	r0, [pc, #452]	; (80033f4 <main+0x648>)
  htim6.Init.Prescaler = 10800;
 800322e:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim6.Instance = TIM6;
 8003232:	4c71      	ldr	r4, [pc, #452]	; (80033f8 <main+0x64c>)
  htim6.Init.Period = 10000;
 8003234:	f242 7210 	movw	r2, #10000	; 0x2710
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003238:	931f      	str	r3, [sp, #124]	; 0x7c
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323a:	6083      	str	r3, [r0, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800323c:	f8c0 8018 	str.w	r8, [r0, #24]
  htim6.Init.Period = 10000;
 8003240:	60c2      	str	r2, [r0, #12]
  htim6.Init.Prescaler = 10800;
 8003242:	e9c0 4100 	strd	r4, r1, [r0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003246:	e9cd 3320 	strd	r3, r3, [sp, #128]	; 0x80
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800324a:	f00b fa9b 	bl	800e784 <HAL_TIM_Base_Init>
 800324e:	2800      	cmp	r0, #0
 8003250:	f040 83e9 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003254:	2300      	movs	r3, #0
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003256:	2210      	movs	r2, #16
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003258:	a91f      	add	r1, sp, #124	; 0x7c
 800325a:	4866      	ldr	r0, [pc, #408]	; (80033f4 <main+0x648>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800325c:	9321      	str	r3, [sp, #132]	; 0x84
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 800325e:	921f      	str	r2, [sp, #124]	; 0x7c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003260:	f00c fef8 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 8003264:	4603      	mov	r3, r0
 8003266:	2800      	cmp	r0, #0
 8003268:	f040 83dd 	bne.w	8003a26 <main+0xc7a>
  htim3.Instance = TIM3;
 800326c:	4c63      	ldr	r4, [pc, #396]	; (80033fc <main+0x650>)
  htim3.Init.Prescaler = 10800;
 800326e:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim3.Instance = TIM3;
 8003272:	4863      	ldr	r0, [pc, #396]	; (8003400 <main+0x654>)
  htim3.Init.Period = 10000;
 8003274:	f242 7210 	movw	r2, #10000	; 0x2710
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003278:	2780      	movs	r7, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800327a:	9339      	str	r3, [sp, #228]	; 0xe4
  htim3.Instance = TIM3;
 800327c:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800327e:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003280:	935b      	str	r3, [sp, #364]	; 0x16c
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003282:	60a3      	str	r3, [r4, #8]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003284:	6123      	str	r3, [r4, #16]
  htim3.Init.Prescaler = 10800;
 8003286:	6061      	str	r1, [r4, #4]
  htim3.Init.Period = 10000;
 8003288:	60e2      	str	r2, [r4, #12]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800328a:	61a7      	str	r7, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800328c:	933c      	str	r3, [sp, #240]	; 0xf0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800328e:	931e      	str	r3, [sp, #120]	; 0x78
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003290:	e9cd 3355 	strd	r3, r3, [sp, #340]	; 0x154
 8003294:	e9cd 3357 	strd	r3, r3, [sp, #348]	; 0x15c
 8003298:	e9cd 3359 	strd	r3, r3, [sp, #356]	; 0x164
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800329c:	e9cd 333a 	strd	r3, r3, [sp, #232]	; 0xe8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032a0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80032a4:	f00b fa6e 	bl	800e784 <HAL_TIM_Base_Init>
 80032a8:	2800      	cmp	r0, #0
 80032aa:	f040 83bc 	bne.w	8003a26 <main+0xc7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ae:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032b2:	a939      	add	r1, sp, #228	; 0xe4
 80032b4:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032b6:	9639      	str	r6, [sp, #228]	; 0xe4
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80032b8:	f00a fd02 	bl	800dcc0 <HAL_TIM_ConfigClockSource>
 80032bc:	2800      	cmp	r0, #0
 80032be:	f040 83b2 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80032c2:	4620      	mov	r0, r4
 80032c4:	f00b fbfa 	bl	800eabc <HAL_TIM_PWM_Init>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	f040 83ac 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032ce:	901c      	str	r0, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032d0:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032d2:	901e      	str	r0, [sp, #120]	; 0x78
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80032d4:	4620      	mov	r0, r4
 80032d6:	f00c febd 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 80032da:	2800      	cmp	r0, #0
 80032dc:	f040 83a3 	bne.w	8003a26 <main+0xc7a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032e0:	2560      	movs	r5, #96	; 0x60
  sConfigOC.Pulse = 10;
 80032e2:	230a      	movs	r3, #10
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e4:	9057      	str	r0, [sp, #348]	; 0x15c
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032e6:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e8:	9059      	str	r0, [sp, #356]	; 0x164
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032ea:	a955      	add	r1, sp, #340	; 0x154
 80032ec:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032ee:	9555      	str	r5, [sp, #340]	; 0x154
  sConfigOC.Pulse = 10;
 80032f0:	9356      	str	r3, [sp, #344]	; 0x158
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80032f2:	f00b ff61 	bl	800f1b8 <HAL_TIM_PWM_ConfigChannel>
 80032f6:	4605      	mov	r5, r0
 80032f8:	2800      	cmp	r0, #0
 80032fa:	f040 8394 	bne.w	8003a26 <main+0xc7a>
  HAL_TIM_MspPostInit(&htim3);
 80032fe:	4620      	mov	r0, r4
  htim7.Instance = TIM7;
 8003300:	4c40      	ldr	r4, [pc, #256]	; (8003404 <main+0x658>)
  HAL_TIM_MspPostInit(&htim3);
 8003302:	f002 fa37 	bl	8005774 <HAL_TIM_MspPostInit>
  htim7.Init.Period = 9600;
 8003306:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  htim7.Instance = TIM7;
 800330a:	4a3f      	ldr	r2, [pc, #252]	; (8003408 <main+0x65c>)
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800330c:	4620      	mov	r0, r4
  htim7.Init.Period = 9600;
 800330e:	60e3      	str	r3, [r4, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003310:	61a7      	str	r7, [r4, #24]
  htim7.Instance = TIM7;
 8003312:	6022      	str	r2, [r4, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003314:	951b      	str	r5, [sp, #108]	; 0x6c
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003316:	e9c4 5501 	strd	r5, r5, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800331a:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800331e:	f00b fa31 	bl	800e784 <HAL_TIM_Base_Init>
 8003322:	4603      	mov	r3, r0
 8003324:	2800      	cmp	r0, #0
 8003326:	f040 837e 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800332a:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800332c:	4620      	mov	r0, r4
 800332e:	a919      	add	r1, sp, #100	; 0x64
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	931b      	str	r3, [sp, #108]	; 0x6c
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003332:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003334:	f00c fe8e 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 8003338:	4603      	mov	r3, r0
 800333a:	2800      	cmp	r0, #0
 800333c:	f040 8373 	bne.w	8003a26 <main+0xc7a>
  htim1.Instance = TIM1;
 8003340:	4c32      	ldr	r4, [pc, #200]	; (800340c <main+0x660>)
  htim1.Init.Period = 65535;
 8003342:	f64f 72ff 	movw	r2, #65535	; 0xffff
  htim1.Instance = TIM1;
 8003346:	4932      	ldr	r1, [pc, #200]	; (8003410 <main+0x664>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003348:	9035      	str	r0, [sp, #212]	; 0xd4
  htim1.Init.Prescaler = 0;
 800334a:	6060      	str	r0, [r4, #4]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800334c:	4620      	mov	r0, r4
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800334e:	60a3      	str	r3, [r4, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003350:	61a3      	str	r3, [r4, #24]
  htim1.Instance = TIM1;
 8003352:	6021      	str	r1, [r4, #0]
  htim1.Init.Period = 65535;
 8003354:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003356:	9338      	str	r3, [sp, #224]	; 0xe0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003358:	9318      	str	r3, [sp, #96]	; 0x60
  htim1.Init.RepetitionCounter = 0;
 800335a:	e9c4 3304 	strd	r3, r3, [r4, #16]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800335e:	e9cd 3336 	strd	r3, r3, [sp, #216]	; 0xd8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003362:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003366:	f00b fa0d 	bl	800e784 <HAL_TIM_Base_Init>
 800336a:	2800      	cmp	r0, #0
 800336c:	f040 835b 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003370:	a935      	add	r1, sp, #212	; 0xd4
 8003372:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003374:	9635      	str	r6, [sp, #212]	; 0xd4
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003376:	f00a fca3 	bl	800dcc0 <HAL_TIM_ConfigClockSource>
 800337a:	2800      	cmp	r0, #0
 800337c:	f040 8353 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003380:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003382:	a916      	add	r1, sp, #88	; 0x58
 8003384:	4620      	mov	r0, r4
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003386:	9318      	str	r3, [sp, #96]	; 0x60
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003388:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800338c:	f00c fe62 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 8003390:	4602      	mov	r2, r0
 8003392:	2800      	cmp	r0, #0
 8003394:	f040 8347 	bne.w	8003a26 <main+0xc7a>
  hcrc.Instance = CRC;
 8003398:	481e      	ldr	r0, [pc, #120]	; (8003414 <main+0x668>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800339a:	2601      	movs	r6, #1
  hcrc.Instance = CRC;
 800339c:	491e      	ldr	r1, [pc, #120]	; (8003418 <main+0x66c>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800339e:	8082      	strh	r2, [r0, #4]
  hcrc.Instance = CRC;
 80033a0:	6001      	str	r1, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80033a2:	6206      	str	r6, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80033a4:	e9c0 2205 	strd	r2, r2, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80033a8:	f004 f9a2 	bl	80076f0 <HAL_CRC_Init>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2800      	cmp	r0, #0
 80033b0:	f040 8339 	bne.w	8003a26 <main+0xc7a>
  htim2.Instance = TIM2;
 80033b4:	4c19      	ldr	r4, [pc, #100]	; (800341c <main+0x670>)
 80033b6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  htim2.Init.Period = 4000000000;
 80033ba:	4a19      	ldr	r2, [pc, #100]	; (8003420 <main+0x674>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033bc:	ad49      	add	r5, sp, #292	; 0x124
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80033be:	902d      	str	r0, [sp, #180]	; 0xb4
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80033c0:	9049      	str	r0, [sp, #292]	; 0x124
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033c2:	4620      	mov	r0, r4
  TIM_IC_InitTypeDef sConfigIC = {0};
 80033c4:	9331      	str	r3, [sp, #196]	; 0xc4
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033c6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033c8:	61a3      	str	r3, [r4, #24]
 80033ca:	e02d      	b.n	8003428 <main+0x67c>
 80033cc:	2001b95c 	.word	0x2001b95c
 80033d0:	2001b504 	.word	0x2001b504
 80033d4:	40012000 	.word	0x40012000
 80033d8:	0f000001 	.word	0x0f000001
 80033dc:	2001b144 	.word	0x2001b144
 80033e0:	40012100 	.word	0x40012100
 80033e4:	2001b54c 	.word	0x2001b54c
 80033e8:	40012200 	.word	0x40012200
 80033ec:	50060800 	.word	0x50060800
 80033f0:	2001b770 	.word	0x2001b770
 80033f4:	2001b6d4 	.word	0x2001b6d4
 80033f8:	40001000 	.word	0x40001000
 80033fc:	2001b310 	.word	0x2001b310
 8003400:	40000400 	.word	0x40000400
 8003404:	2001ba8c 	.word	0x2001ba8c
 8003408:	40001400 	.word	0x40001400
 800340c:	2001b720 	.word	0x2001b720
 8003410:	40010000 	.word	0x40010000
 8003414:	2001b1ec 	.word	0x2001b1ec
 8003418:	40023000 	.word	0x40023000
 800341c:	2001b910 	.word	0x2001b910
 8003420:	ee6b2800 	.word	0xee6b2800
 8003424:	40004400 	.word	0x40004400
  htim2.Instance = TIM2;
 8003428:	6021      	str	r1, [r4, #0]
  htim2.Init.Period = 4000000000;
 800342a:	60e2      	str	r2, [r4, #12]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800342c:	9330      	str	r3, [sp, #192]	; 0xc0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800342e:	9315      	str	r3, [sp, #84]	; 0x54
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003430:	9334      	str	r3, [sp, #208]	; 0xd0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003432:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003436:	e9cd 332e 	strd	r3, r3, [sp, #184]	; 0xb8
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800343a:	e9cd 334a 	strd	r3, r3, [sp, #296]	; 0x128
 800343e:	e9cd 334c 	strd	r3, r3, [sp, #304]	; 0x130
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003442:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003446:	e9cd 3332 	strd	r3, r3, [sp, #200]	; 0xc8
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800344a:	f00b f99b 	bl	800e784 <HAL_TIM_Base_Init>
 800344e:	2800      	cmp	r0, #0
 8003450:	f040 82e9 	bne.w	8003a26 <main+0xc7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003458:	a92d      	add	r1, sp, #180	; 0xb4
 800345a:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800345c:	932d      	str	r3, [sp, #180]	; 0xb4
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800345e:	f00a fc2f 	bl	800dcc0 <HAL_TIM_ConfigClockSource>
 8003462:	2800      	cmp	r0, #0
 8003464:	f040 82df 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003468:	4620      	mov	r0, r4
 800346a:	f00b fbf5 	bl	800ec58 <HAL_TIM_IC_Init>
 800346e:	2800      	cmp	r0, #0
 8003470:	f040 82d9 	bne.w	8003a26 <main+0xc7a>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003474:	2704      	movs	r7, #4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003476:	2350      	movs	r3, #80	; 0x50
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003478:	904b      	str	r0, [sp, #300]	; 0x12c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800347a:	4629      	mov	r1, r5
  sSlaveConfig.TriggerFilter = 0;
 800347c:	904d      	str	r0, [sp, #308]	; 0x134
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800347e:	4620      	mov	r0, r4
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003480:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8003484:	f00a fef4 	bl	800e270 <HAL_TIM_SlaveConfigSynchro>
 8003488:	2800      	cmp	r0, #0
 800348a:	f040 82cc 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800348e:	9013      	str	r0, [sp, #76]	; 0x4c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003490:	a913      	add	r1, sp, #76	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003492:	9015      	str	r0, [sp, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003494:	4620      	mov	r0, r4
 8003496:	f00c fddd 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 800349a:	4602      	mov	r2, r0
 800349c:	2800      	cmp	r0, #0
 800349e:	f040 82c2 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034a2:	a931      	add	r1, sp, #196	; 0xc4
 80034a4:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034a6:	e9cd 2631 	strd	r2, r6, [sp, #196]	; 0xc4
  sConfigIC.ICFilter = 0;
 80034aa:	e9cd 2233 	strd	r2, r2, [sp, #204]	; 0xcc
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80034ae:	f00c f8a5 	bl	800f5fc <HAL_TIM_IC_ConfigChannel>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	f040 82b7 	bne.w	8003a26 <main+0xc7a>
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80034b8:	2302      	movs	r3, #2
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80034ba:	463a      	mov	r2, r7
 80034bc:	a931      	add	r1, sp, #196	; 0xc4
 80034be:	4620      	mov	r0, r4
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80034c0:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80034c2:	f00c f89b 	bl	800f5fc <HAL_TIM_IC_ConfigChannel>
 80034c6:	2800      	cmp	r0, #0
 80034c8:	f040 82ad 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80034cc:	a931      	add	r1, sp, #196	; 0xc4
 80034ce:	4620      	mov	r0, r4
 80034d0:	2208      	movs	r2, #8
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80034d2:	9632      	str	r6, [sp, #200]	; 0xc8
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80034d4:	f00c f892 	bl	800f5fc <HAL_TIM_IC_ConfigChannel>
 80034d8:	2800      	cmp	r0, #0
 80034da:	f040 82a4 	bne.w	8003a26 <main+0xc7a>
  huart6.Instance = USART6;
 80034de:	48c4      	ldr	r0, [pc, #784]	; (80037f0 <main+0xa44>)
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80034e0:	2310      	movs	r3, #16
  huart6.Instance = USART6;
 80034e2:	49c4      	ldr	r1, [pc, #784]	; (80037f4 <main+0xa48>)
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80034e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80034e8:	6243      	str	r3, [r0, #36]	; 0x24
  huart6.Init.BaudRate = 9600;
 80034ea:	f44f 5716 	mov.w	r7, #9600	; 0x2580
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034ee:	2300      	movs	r3, #0
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034f0:	260c      	movs	r6, #12
  huart6.Instance = USART6;
 80034f2:	6001      	str	r1, [r0, #0]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80034f4:	6203      	str	r3, [r0, #32]
  huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80034f6:	6382      	str	r2, [r0, #56]	; 0x38
  huart6.Init.Mode = UART_MODE_TX_RX;
 80034f8:	6146      	str	r6, [r0, #20]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	e9c0 7301 	strd	r7, r3, [r0, #4]
  huart6.Init.Parity = UART_PARITY_NONE;
 80034fe:	e9c0 3303 	strd	r3, r3, [r0, #12]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003502:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003506:	f00d fed7 	bl	80112b8 <HAL_UART_Init>
 800350a:	4603      	mov	r3, r0
 800350c:	2800      	cmp	r0, #0
 800350e:	f040 828a 	bne.w	8003a26 <main+0xc7a>
  hdac.Instance = DAC;
 8003512:	4cb9      	ldr	r4, [pc, #740]	; (80037f8 <main+0xa4c>)
 8003514:	4ab9      	ldr	r2, [pc, #740]	; (80037fc <main+0xa50>)
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003516:	4620      	mov	r0, r4
  DAC_ChannelConfTypeDef sConfig = {0};
 8003518:	930b      	str	r3, [sp, #44]	; 0x2c
  hdac.Instance = DAC;
 800351a:	6022      	str	r2, [r4, #0]
  DAC_ChannelConfTypeDef sConfig = {0};
 800351c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800351e:	f004 f9a1 	bl	8007864 <HAL_DAC_Init>
 8003522:	4602      	mov	r2, r0
 8003524:	2800      	cmp	r0, #0
 8003526:	f040 827e 	bne.w	8003a26 <main+0xc7a>
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800352a:	2314      	movs	r3, #20
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800352c:	4620      	mov	r0, r4
 800352e:	a90b      	add	r1, sp, #44	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003530:	920c      	str	r2, [sp, #48]	; 0x30
  sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8003532:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003534:	f004 faf2 	bl	8007b1c <HAL_DAC_ConfigChannel>
 8003538:	4680      	mov	r8, r0
 800353a:	2800      	cmp	r0, #0
 800353c:	f040 8273 	bne.w	8003a26 <main+0xc7a>
  hi2c1.Instance = I2C1;
 8003540:	4caf      	ldr	r4, [pc, #700]	; (8003800 <main+0xa54>)
  MX_FATFS_Init();
 8003542:	f00e fe99 	bl	8012278 <MX_FATFS_Init>
  hi2c1.Instance = I2C1;
 8003546:	49af      	ldr	r1, [pc, #700]	; (8003804 <main+0xa58>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003548:	2301      	movs	r3, #1
  hi2c1.Init.Timing = 0x20404768;
 800354a:	4aaf      	ldr	r2, [pc, #700]	; (8003808 <main+0xa5c>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800354c:	4620      	mov	r0, r4
  hi2c1.Init.OwnAddress1 = 0;
 800354e:	f8c4 8008 	str.w	r8, [r4, #8]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003552:	f8c4 8020 	str.w	r8, [r4, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003556:	60e3      	str	r3, [r4, #12]
  hi2c1.Init.Timing = 0x20404768;
 8003558:	e9c4 1200 	strd	r1, r2, [r4]
  hi2c1.Init.OwnAddress2 = 0;
 800355c:	e9c4 8804 	strd	r8, r8, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003560:	e9c4 8806 	strd	r8, r8, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003564:	f007 f812 	bl	800a58c <HAL_I2C_Init>
 8003568:	4601      	mov	r1, r0
 800356a:	2800      	cmp	r0, #0
 800356c:	f040 825b 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003570:	4620      	mov	r0, r4
 8003572:	f007 fb1f 	bl	800abb4 <HAL_I2CEx_ConfigAnalogFilter>
 8003576:	4601      	mov	r1, r0
 8003578:	2800      	cmp	r0, #0
 800357a:	f040 8254 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800357e:	4620      	mov	r0, r4
 8003580:	f007 fb6a 	bl	800ac58 <HAL_I2CEx_ConfigDigitalFilter>
 8003584:	4602      	mov	r2, r0
 8003586:	2800      	cmp	r0, #0
 8003588:	f040 824d 	bne.w	8003a26 <main+0xc7a>
  huart4.Instance = UART4;
 800358c:	489f      	ldr	r0, [pc, #636]	; (800380c <main+0xa60>)
  huart4.Init.BaudRate = 115200;
 800358e:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart4.Instance = UART4;
 8003592:	499f      	ldr	r1, [pc, #636]	; (8003810 <main+0xa64>)
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8003594:	f44f 7440 	mov.w	r4, #768	; 0x300
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003598:	6242      	str	r2, [r0, #36]	; 0x24
  huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800359a:	6184      	str	r4, [r0, #24]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800359c:	e9c0 2202 	strd	r2, r2, [r0, #8]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80035a0:	e9c0 2604 	strd	r2, r6, [r0, #16]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035a4:	e9c0 2207 	strd	r2, r2, [r0, #28]
  huart4.Init.BaudRate = 115200;
 80035a8:	e9c0 1800 	strd	r1, r8, [r0]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80035ac:	f00d fe84 	bl	80112b8 <HAL_UART_Init>
 80035b0:	4602      	mov	r2, r0
 80035b2:	2800      	cmp	r0, #0
 80035b4:	f040 8237 	bne.w	8003a26 <main+0xc7a>
  huart5.Instance = UART5;
 80035b8:	4896      	ldr	r0, [pc, #600]	; (8003814 <main+0xa68>)
 80035ba:	4997      	ldr	r1, [pc, #604]	; (8003818 <main+0xa6c>)
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035bc:	6242      	str	r2, [r0, #36]	; 0x24
  huart5.Instance = UART5;
 80035be:	6001      	str	r1, [r0, #0]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80035c0:	e9c0 7201 	strd	r7, r2, [r0, #4]
  huart5.Init.Parity = UART_PARITY_NONE;
 80035c4:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035c8:	e9c0 6205 	strd	r6, r2, [r0, #20]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80035cc:	e9c0 2207 	strd	r2, r2, [r0, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80035d0:	f00d fe72 	bl	80112b8 <HAL_UART_Init>
 80035d4:	4602      	mov	r2, r0
 80035d6:	2800      	cmp	r0, #0
 80035d8:	f040 8225 	bne.w	8003a26 <main+0xc7a>
  huart3.Instance = USART3;
 80035dc:	488f      	ldr	r0, [pc, #572]	; (800381c <main+0xa70>)
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80035de:	4611      	mov	r1, r2
  huart3.Instance = USART3;
 80035e0:	4f8f      	ldr	r7, [pc, #572]	; (8003820 <main+0xa74>)
  huart3.Init.Mode = UART_MODE_TX_RX;
 80035e2:	6146      	str	r6, [r0, #20]
  huart3.Instance = USART3;
 80035e4:	6007      	str	r7, [r0, #0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80035e6:	e9c0 8201 	strd	r8, r2, [r0, #4]
  huart3.Init.Parity = UART_PARITY_NONE;
 80035ea:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80035ee:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80035f2:	e9c0 2208 	strd	r2, r2, [r0, #32]
  if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80035f6:	f00d ff0d 	bl	8011414 <HAL_MultiProcessor_Init>
 80035fa:	2800      	cmp	r0, #0
 80035fc:	f040 8213 	bne.w	8003a26 <main+0xc7a>
  hspi4.Instance = SPI4;
 8003600:	4b88      	ldr	r3, [pc, #544]	; (8003824 <main+0xa78>)
  hspi4.Init.Mode = SPI_MODE_MASTER;
 8003602:	f44f 7782 	mov.w	r7, #260	; 0x104
  hspi4.Instance = SPI4;
 8003606:	f8df c254 	ldr.w	ip, [pc, #596]	; 800385c <main+0xab0>
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800360a:	f44f 2680 	mov.w	r6, #262144	; 0x40000
  hspi4.Init.CRCPolynomial = 7;
 800360e:	2107      	movs	r1, #7
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003610:	2208      	movs	r2, #8
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003612:	6318      	str	r0, [r3, #48]	; 0x30
  hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8003614:	619e      	str	r6, [r3, #24]
  hspi4.Init.CRCPolynomial = 7;
 8003616:	62d9      	str	r1, [r3, #44]	; 0x2c
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003618:	635a      	str	r2, [r3, #52]	; 0x34
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800361a:	e9c3 0402 	strd	r0, r4, [r3, #8]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800361e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003622:	e9c3 0007 	strd	r0, r0, [r3, #28]
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003626:	e9c3 0009 	strd	r0, r0, [r3, #36]	; 0x24
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800362a:	4618      	mov	r0, r3
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800362c:	e9c3 c700 	strd	ip, r7, [r3]
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003630:	f009 fbec 	bl	800ce0c <HAL_SPI_Init>
 8003634:	2800      	cmp	r0, #0
 8003636:	f040 81f6 	bne.w	8003a26 <main+0xc7a>
  hspi3.Instance = SPI3;
 800363a:	487b      	ldr	r0, [pc, #492]	; (8003828 <main+0xa7c>)
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800363c:	2300      	movs	r3, #0
  hspi3.Instance = SPI3;
 800363e:	4a7b      	ldr	r2, [pc, #492]	; (800382c <main+0xa80>)
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003640:	f44f 7600 	mov.w	r6, #512	; 0x200
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8003644:	60c4      	str	r4, [r0, #12]
  hspi3.Init.CRCPolynomial = 7;
 8003646:	2407      	movs	r4, #7
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8003648:	6083      	str	r3, [r0, #8]
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800364a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800364c:	6186      	str	r6, [r0, #24]
  hspi3.Init.CRCPolynomial = 7;
 800364e:	62c4      	str	r4, [r0, #44]	; 0x2c
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8003650:	e9c0 2300 	strd	r2, r3, [r0]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003654:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003658:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800365c:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003660:	f009 fbd4 	bl	800ce0c <HAL_SPI_Init>
 8003664:	2800      	cmp	r0, #0
 8003666:	f040 81de 	bne.w	8003a26 <main+0xc7a>
  hspi2.Instance = SPI2;
 800366a:	4b71      	ldr	r3, [pc, #452]	; (8003830 <main+0xa84>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800366c:	46bc      	mov	ip, r7
  hspi2.Instance = SPI2;
 800366e:	f8df e1f0 	ldr.w	lr, [pc, #496]	; 8003860 <main+0xab4>
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003672:	2138      	movs	r1, #56	; 0x38
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003674:	2208      	movs	r2, #8
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003676:	f44f 6770 	mov.w	r7, #3840	; 0xf00
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800367a:	6098      	str	r0, [r3, #8]
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800367c:	6318      	str	r0, [r3, #48]	; 0x30
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800367e:	619e      	str	r6, [r3, #24]
  hspi2.Instance = SPI2;
 8003680:	f8c3 e000 	str.w	lr, [r3]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003684:	f8c3 c004 	str.w	ip, [r3, #4]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8003688:	60df      	str	r7, [r3, #12]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800368a:	61d9      	str	r1, [r3, #28]
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800368c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800368e:	e9c3 0004 	strd	r0, r0, [r3, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003692:	e9c3 0008 	strd	r0, r0, [r3, #32]
  hspi2.Init.CRCPolynomial = 7;
 8003696:	e9c3 040a 	strd	r0, r4, [r3, #40]	; 0x28
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800369a:	4618      	mov	r0, r3
 800369c:	f009 fbb6 	bl	800ce0c <HAL_SPI_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2800      	cmp	r0, #0
 80036a4:	f040 81bf 	bne.w	8003a26 <main+0xc7a>
  hi2c4.Instance = I2C4;
 80036a8:	4c62      	ldr	r4, [pc, #392]	; (8003834 <main+0xa88>)
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036aa:	2601      	movs	r6, #1
  hi2c4.Instance = I2C4;
 80036ac:	4a62      	ldr	r2, [pc, #392]	; (8003838 <main+0xa8c>)
  hi2c4.Init.Timing = 0x20404768;
 80036ae:	4f56      	ldr	r7, [pc, #344]	; (8003808 <main+0xa5c>)
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80036b0:	4620      	mov	r0, r4
  hi2c4.Init.OwnAddress1 = 0;
 80036b2:	60a3      	str	r3, [r4, #8]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036b4:	6223      	str	r3, [r4, #32]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036b6:	60e6      	str	r6, [r4, #12]
  hi2c4.Init.OwnAddress2 = 0;
 80036b8:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036bc:	e9c4 3306 	strd	r3, r3, [r4, #24]
  hi2c4.Init.Timing = 0x20404768;
 80036c0:	e9c4 2700 	strd	r2, r7, [r4]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80036c4:	f006 ff62 	bl	800a58c <HAL_I2C_Init>
 80036c8:	4601      	mov	r1, r0
 80036ca:	2800      	cmp	r0, #0
 80036cc:	f040 81ab 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036d0:	4620      	mov	r0, r4
 80036d2:	f007 fa6f 	bl	800abb4 <HAL_I2CEx_ConfigAnalogFilter>
 80036d6:	4601      	mov	r1, r0
 80036d8:	2800      	cmp	r0, #0
 80036da:	f040 81a4 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80036de:	4620      	mov	r0, r4
 80036e0:	f007 faba 	bl	800ac58 <HAL_I2CEx_ConfigDigitalFilter>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2800      	cmp	r0, #0
 80036e8:	f040 819d 	bne.w	8003a26 <main+0xc7a>
  hi2c2.Instance = I2C2;
 80036ec:	4c53      	ldr	r4, [pc, #332]	; (800383c <main+0xa90>)
 80036ee:	4a54      	ldr	r2, [pc, #336]	; (8003840 <main+0xa94>)
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80036f0:	4620      	mov	r0, r4
  hi2c2.Init.Timing = 0x20404768;
 80036f2:	6067      	str	r7, [r4, #4]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036f4:	6223      	str	r3, [r4, #32]
  hi2c2.Instance = I2C2;
 80036f6:	6022      	str	r2, [r4, #0]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036f8:	e9c4 3602 	strd	r3, r6, [r4, #8]
  hi2c2.Init.OwnAddress2 = 0;
 80036fc:	e9c4 3304 	strd	r3, r3, [r4, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003700:	e9c4 3306 	strd	r3, r3, [r4, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003704:	f006 ff42 	bl	800a58c <HAL_I2C_Init>
 8003708:	4601      	mov	r1, r0
 800370a:	2800      	cmp	r0, #0
 800370c:	f040 818b 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003710:	4620      	mov	r0, r4
 8003712:	f007 fa4f 	bl	800abb4 <HAL_I2CEx_ConfigAnalogFilter>
 8003716:	4601      	mov	r1, r0
 8003718:	2800      	cmp	r0, #0
 800371a:	f040 8184 	bne.w	8003a26 <main+0xc7a>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800371e:	4620      	mov	r0, r4
 8003720:	f007 fa9a 	bl	800ac58 <HAL_I2CEx_ConfigDigitalFilter>
 8003724:	4603      	mov	r3, r0
 8003726:	2800      	cmp	r0, #0
 8003728:	f040 817d 	bne.w	8003a26 <main+0xc7a>
  htim4.Instance = TIM4;
 800372c:	4c45      	ldr	r4, [pc, #276]	; (8003844 <main+0xa98>)
  htim4.Init.Period = 1100;
 800372e:	f240 414c 	movw	r1, #1100	; 0x44c
  htim4.Instance = TIM4;
 8003732:	4845      	ldr	r0, [pc, #276]	; (8003848 <main+0xa9c>)
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003734:	2280      	movs	r2, #128	; 0x80
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003736:	9329      	str	r3, [sp, #164]	; 0xa4
  htim4.Instance = TIM4;
 8003738:	6020      	str	r0, [r4, #0]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800373a:	4620      	mov	r0, r4
  TIM_OC_InitTypeDef sConfigOC = {0};
 800373c:	934e      	str	r3, [sp, #312]	; 0x138
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800373e:	6123      	str	r3, [r4, #16]
  htim4.Init.Period = 1100;
 8003740:	60e1      	str	r1, [r4, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003742:	61a2      	str	r2, [r4, #24]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003744:	932c      	str	r3, [sp, #176]	; 0xb0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003746:	9312      	str	r3, [sp, #72]	; 0x48
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003748:	e9c4 3301 	strd	r3, r3, [r4, #4]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374c:	e9cd 332a 	strd	r3, r3, [sp, #168]	; 0xa8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003750:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003754:	e9cd 334f 	strd	r3, r3, [sp, #316]	; 0x13c
 8003758:	e9cd 3351 	strd	r3, r3, [sp, #324]	; 0x144
 800375c:	e9cd 3353 	strd	r3, r3, [sp, #332]	; 0x14c
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003760:	f00b f810 	bl	800e784 <HAL_TIM_Base_Init>
 8003764:	2800      	cmp	r0, #0
 8003766:	f040 815e 	bne.w	8003a26 <main+0xc7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800376e:	a929      	add	r1, sp, #164	; 0xa4
 8003770:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003772:	9329      	str	r3, [sp, #164]	; 0xa4
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003774:	f00a faa4 	bl	800dcc0 <HAL_TIM_ConfigClockSource>
 8003778:	2800      	cmp	r0, #0
 800377a:	f040 8154 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 800377e:	4620      	mov	r0, r4
 8003780:	f00b f8ce 	bl	800e920 <HAL_TIM_OC_Init>
 8003784:	2800      	cmp	r0, #0
 8003786:	f040 814e 	bne.w	8003a26 <main+0xc7a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800378a:	2430      	movs	r4, #48	; 0x30
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378c:	9012      	str	r0, [sp, #72]	; 0x48
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800378e:	a910      	add	r1, sp, #64	; 0x40
 8003790:	482c      	ldr	r0, [pc, #176]	; (8003844 <main+0xa98>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8003792:	9410      	str	r4, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003794:	f00c fc5e 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 8003798:	2800      	cmp	r0, #0
 800379a:	f040 8144 	bne.w	8003a26 <main+0xc7a>
  sConfigOC.Pulse = 550;
 800379e:	f240 2326 	movw	r3, #550	; 0x226
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037a2:	9050      	str	r0, [sp, #320]	; 0x140
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037a4:	9052      	str	r0, [sp, #328]	; 0x148
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037a6:	2208      	movs	r2, #8
 80037a8:	a94e      	add	r1, sp, #312	; 0x138
 80037aa:	4826      	ldr	r0, [pc, #152]	; (8003844 <main+0xa98>)
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 80037ac:	944e      	str	r4, [sp, #312]	; 0x138
  sConfigOC.Pulse = 550;
 80037ae:	934f      	str	r3, [sp, #316]	; 0x13c
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80037b0:	f00b fb86 	bl	800eec0 <HAL_TIM_OC_ConfigChannel>
 80037b4:	2800      	cmp	r0, #0
 80037b6:	f040 8136 	bne.w	8003a26 <main+0xc7a>
  HAL_TIM_MspPostInit(&htim4);
 80037ba:	4822      	ldr	r0, [pc, #136]	; (8003844 <main+0xa98>)
 80037bc:	f001 ffda 	bl	8005774 <HAL_TIM_MspPostInit>
  hiwdg.Instance = IWDG;
 80037c0:	4822      	ldr	r0, [pc, #136]	; (800384c <main+0xaa0>)
 80037c2:	4923      	ldr	r1, [pc, #140]	; (8003850 <main+0xaa4>)
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80037c4:	2206      	movs	r2, #6
  hiwdg.Init.Window = 4095;
 80037c6:	f640 73ff 	movw	r3, #4095	; 0xfff
  hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80037ca:	e9c0 1200 	strd	r1, r2, [r0]
  hiwdg.Init.Reload = 4095;
 80037ce:	e9c0 3302 	strd	r3, r3, [r0, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80037d2:	f007 fa91 	bl	800acf8 <HAL_IWDG_Init>
 80037d6:	2800      	cmp	r0, #0
 80037d8:	f040 8125 	bne.w	8003a26 <main+0xc7a>
  htim14.Instance = TIM14;
 80037dc:	4b1d      	ldr	r3, [pc, #116]	; (8003854 <main+0xaa8>)
  htim14.Init.Period = 10800;
 80037de:	f642 2130 	movw	r1, #10800	; 0x2a30
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037e2:	2280      	movs	r2, #128	; 0x80
  htim14.Instance = TIM14;
 80037e4:	4c1c      	ldr	r4, [pc, #112]	; (8003858 <main+0xaac>)
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e6:	6118      	str	r0, [r3, #16]
  htim14.Instance = TIM14;
 80037e8:	601c      	str	r4, [r3, #0]
  htim14.Init.Period = 10800;
 80037ea:	60d9      	str	r1, [r3, #12]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ec:	619a      	str	r2, [r3, #24]
 80037ee:	e039      	b.n	8003864 <main+0xab8>
 80037f0:	2001b804 	.word	0x2001b804
 80037f4:	40011400 	.word	0x40011400
 80037f8:	2001b5f4 	.word	0x2001b5f4
 80037fc:	40007400 	.word	0x40007400
 8003800:	2001b18c 	.word	0x2001b18c
 8003804:	40005400 	.word	0x40005400
 8003808:	20404768 	.word	0x20404768
 800380c:	2001b888 	.word	0x2001b888
 8003810:	40004c00 	.word	0x40004c00
 8003814:	2001b420 	.word	0x2001b420
 8003818:	40005000 	.word	0x40005000
 800381c:	2001b0c0 	.word	0x2001b0c0
 8003820:	40004800 	.word	0x40004800
 8003824:	2001b60c 	.word	0x2001b60c
 8003828:	2001b35c 	.word	0x2001b35c
 800382c:	40003c00 	.word	0x40003c00
 8003830:	2001af8c 	.word	0x2001af8c
 8003834:	2001aee0 	.word	0x2001aee0
 8003838:	40006000 	.word	0x40006000
 800383c:	2001b210 	.word	0x2001b210
 8003840:	40005800 	.word	0x40005800
 8003844:	2001b074 	.word	0x2001b074
 8003848:	40000800 	.word	0x40000800
 800384c:	2001b1dc 	.word	0x2001b1dc
 8003850:	40003000 	.word	0x40003000
 8003854:	2001ba40 	.word	0x2001ba40
 8003858:	40002000 	.word	0x40002000
 800385c:	40013400 	.word	0x40013400
 8003860:	40003800 	.word	0x40003800
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003864:	e9c3 0001 	strd	r0, r0, [r3, #4]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003868:	4618      	mov	r0, r3
 800386a:	f00a ff8b 	bl	800e784 <HAL_TIM_Base_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2800      	cmp	r0, #0
 8003872:	f040 80d8 	bne.w	8003a26 <main+0xc7a>
  htim5.Instance = TIM5;
 8003876:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 8003a58 <main+0xcac>
  htim5.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800387a:	2410      	movs	r4, #16
  htim5.Instance = TIM5;
 800387c:	4f6b      	ldr	r7, [pc, #428]	; (8003a2c <main+0xc80>)
  htim5.Init.Period = 4;
 800387e:	f04f 0804 	mov.w	r8, #4
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003882:	4648      	mov	r0, r9
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003884:	9325      	str	r3, [sp, #148]	; 0x94
  htim5.Init.Prescaler = 0;
 8003886:	f8c9 3004 	str.w	r3, [r9, #4]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800388a:	f8c9 3010 	str.w	r3, [r9, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800388e:	f8c9 3018 	str.w	r3, [r9, #24]
  htim5.Instance = TIM5;
 8003892:	f8c9 7000 	str.w	r7, [r9]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003896:	9328      	str	r3, [sp, #160]	; 0xa0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003898:	930f      	str	r3, [sp, #60]	; 0x3c
  htim5.Init.Period = 4;
 800389a:	e9c9 4802 	strd	r4, r8, [r9, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800389e:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038a2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80038a6:	f00a ff6d 	bl	800e784 <HAL_TIM_Base_Init>
 80038aa:	2800      	cmp	r0, #0
 80038ac:	f040 80bb 	bne.w	8003a26 <main+0xc7a>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b0:	f44f 5680 	mov.w	r6, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038b4:	a925      	add	r1, sp, #148	; 0x94
 80038b6:	4648      	mov	r0, r9
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038b8:	9625      	str	r6, [sp, #148]	; 0x94
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80038ba:	f00a fa01 	bl	800dcc0 <HAL_TIM_ConfigClockSource>
 80038be:	4603      	mov	r3, r0
 80038c0:	2800      	cmp	r0, #0
 80038c2:	f040 80b0 	bne.w	8003a26 <main+0xc7a>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038c6:	4648      	mov	r0, r9
 80038c8:	a90d      	add	r1, sp, #52	; 0x34
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ca:	930d      	str	r3, [sp, #52]	; 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038cc:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80038ce:	f00c fbc1 	bl	8010054 <HAL_TIMEx_MasterConfigSynchronization>
 80038d2:	4602      	mov	r2, r0
 80038d4:	2800      	cmp	r0, #0
 80038d6:	f040 80a6 	bne.w	8003a26 <main+0xc7a>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80038da:	6839      	ldr	r1, [r7, #0]
  huart8.Init.BaudRate = 9600;
 80038dc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  huart8.Instance = UART8;
 80038e0:	4853      	ldr	r0, [pc, #332]	; (8003a30 <main+0xc84>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80038e2:	f041 0108 	orr.w	r1, r1, #8
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80038e6:	6082      	str	r2, [r0, #8]
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80038e8:	6039      	str	r1, [r7, #0]
  huart8.Instance = UART8;
 80038ea:	4952      	ldr	r1, [pc, #328]	; (8003a34 <main+0xc88>)
  huart8.Init.Mode = UART_MODE_RX;
 80038ec:	f8c0 8014 	str.w	r8, [r0, #20]
  huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80038f0:	6386      	str	r6, [r0, #56]	; 0x38
  huart8.Init.Parity = UART_PARITY_NONE;
 80038f2:	e9c0 2203 	strd	r2, r2, [r0, #12]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80038f6:	e9c0 2206 	strd	r2, r2, [r0, #24]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80038fa:	e9c0 2408 	strd	r2, r4, [r0, #32]
  huart8.Init.BaudRate = 9600;
 80038fe:	e9c0 1300 	strd	r1, r3, [r0]
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003902:	f00d fcd9 	bl	80112b8 <HAL_UART_Init>
 8003906:	2800      	cmp	r0, #0
 8003908:	f040 808d 	bne.w	8003a26 <main+0xc7a>
  huart7.Instance = UART7;
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <main+0xc8c>)
  huart7.Init.BaudRate = 115200;
 800390e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
  huart7.Instance = UART7;
 8003912:	f507 47d8 	add.w	r7, r7, #27648	; 0x6c00
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003916:	220c      	movs	r2, #12
  huart7.Init.Parity = UART_PARITY_NONE;
 8003918:	6118      	str	r0, [r3, #16]
  huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800391a:	639e      	str	r6, [r3, #56]	; 0x38
  huart7.Init.Mode = UART_MODE_TX_RX;
 800391c:	615a      	str	r2, [r3, #20]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800391e:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003922:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003926:	e9c3 0408 	strd	r0, r4, [r3, #32]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800392a:	4618      	mov	r0, r3
  huart7.Init.BaudRate = 115200;
 800392c:	e9c3 7100 	strd	r7, r1, [r3]
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003930:	f00d fcc2 	bl	80112b8 <HAL_UART_Init>
 8003934:	2800      	cmp	r0, #0
 8003936:	d176      	bne.n	8003a26 <main+0xc7a>
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2107      	movs	r1, #7
 800393c:	2026      	movs	r0, #38	; 0x26
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800393e:	4f3f      	ldr	r7, [pc, #252]	; (8003a3c <main+0xc90>)
  osMutexDef(myMutex01);
 8003940:	4616      	mov	r6, r2
  HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 8003942:	f003 fe5d 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003946:	2026      	movs	r0, #38	; 0x26
  osMessageQDef(myQueue01, 256, uint16_t);
 8003948:	4c3d      	ldr	r4, [pc, #244]	; (8003a40 <main+0xc94>)
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800394a:	f003 fea3 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800394e:	4632      	mov	r2, r6
 8003950:	2106      	movs	r1, #6
 8003952:	2047      	movs	r0, #71	; 0x47
 8003954:	f003 fe54 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003958:	2047      	movs	r0, #71	; 0x47
 800395a:	f003 fe9b 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 800395e:	4632      	mov	r2, r6
 8003960:	2106      	movs	r1, #6
 8003962:	2012      	movs	r0, #18
 8003964:	f003 fe4c 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003968:	2012      	movs	r0, #18
 800396a:	f003 fe93 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 800396e:	4632      	mov	r2, r6
 8003970:	2106      	movs	r1, #6
 8003972:	2028      	movs	r0, #40	; 0x28
 8003974:	f003 fe44 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003978:	2028      	movs	r0, #40	; 0x28
 800397a:	f003 fe8b 	bl	8007694 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 800397e:	4632      	mov	r2, r6
 8003980:	2101      	movs	r1, #1
 8003982:	202d      	movs	r0, #45	; 0x2d
 8003984:	f003 fe3c 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003988:	202d      	movs	r0, #45	; 0x2d
 800398a:	f003 fe83 	bl	8007694 <HAL_NVIC_EnableIRQ>
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800398e:	a83d      	add	r0, sp, #244	; 0xf4
  osMutexDef(myMutex01);
 8003990:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8003994:	f00f fe72 	bl	801367c <osMutexCreate>
 8003998:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <main+0xc98>)
 800399a:	4602      	mov	r2, r0
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800399c:	2101      	movs	r1, #1
 800399e:	a841      	add	r0, sp, #260	; 0x104
  myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 80039a0:	601a      	str	r2, [r3, #0]
  osSemaphoreDef(ssicontent);
 80039a2:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80039a6:	f00f fec5 	bl	8013734 <osSemaphoreCreate>
  osTimerDef(myTimer01, Callback01);
 80039aa:	4b27      	ldr	r3, [pc, #156]	; (8003a48 <main+0xc9c>)
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80039ac:	4684      	mov	ip, r0
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80039ae:	4632      	mov	r2, r6
 80039b0:	2101      	movs	r1, #1
 80039b2:	a845      	add	r0, sp, #276	; 0x114
  ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 80039b4:	f8c7 c000 	str.w	ip, [r7]
  osTimerDef(myTimer01, Callback01);
 80039b8:	9345      	str	r3, [sp, #276]	; 0x114
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80039ba:	4f24      	ldr	r7, [pc, #144]	; (8003a4c <main+0xca0>)
  osTimerDef(myTimer01, Callback01);
 80039bc:	9646      	str	r6, [sp, #280]	; 0x118
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80039be:	f00f fe39 	bl	8013634 <osTimerCreate>
 80039c2:	4684      	mov	ip, r0
  osMessageQDef(myQueue01, 256, uint16_t);
 80039c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 80039c8:	f8c7 c000 	str.w	ip, [r7]
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80039cc:	f104 0710 	add.w	r7, r4, #16
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80039d0:	342c      	adds	r4, #44	; 0x2c
  osMessageQDef(myQueue01, 256, uint16_t);
 80039d2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80039d6:	4628      	mov	r0, r5
 80039d8:	4631      	mov	r1, r6
 80039da:	f00f feff 	bl	80137dc <osMessageCreate>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80039de:	ad4e      	add	r5, sp, #312	; 0x138
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80039e0:	4686      	mov	lr, r0
 80039e2:	f8df c078 	ldr.w	ip, [pc, #120]	; 8003a5c <main+0xcb0>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 80039e6:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80039e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039ea:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80039ee:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80039f2:	4631      	mov	r1, r6
 80039f4:	a84e      	add	r0, sp, #312	; 0x138
  myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 80039f6:	f8cc e000 	str.w	lr, [ip]
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 80039fa:	ad55      	add	r5, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80039fc:	f00f fde6 	bl	80135cc <osThreadCreate>
 8003a00:	4684      	mov	ip, r0
 8003a02:	4f13      	ldr	r7, [pc, #76]	; (8003a50 <main+0xca4>)
  osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8003a04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a08:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8003a0c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003a10:	4631      	mov	r1, r6
 8003a12:	a855      	add	r0, sp, #340	; 0x154
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8003a14:	f8c7 c000 	str.w	ip, [r7]
  LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8003a18:	f00f fdd8 	bl	80135cc <osThreadCreate>
 8003a1c:	4b0d      	ldr	r3, [pc, #52]	; (8003a54 <main+0xca8>)
 8003a1e:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003a20:	f00f fdc6 	bl	80135b0 <osKernelStart>
	while (1) {
 8003a24:	e7fe      	b.n	8003a24 <main+0xc78>
    Error_Handler();
 8003a26:	f7ff f945 	bl	8002cb4 <Error_Handler>
 8003a2a:	bf00      	nop
 8003a2c:	40000c00 	.word	0x40000c00
 8003a30:	2001b780 	.word	0x2001b780
 8003a34:	40007c00 	.word	0x40007c00
 8003a38:	2001aff0 	.word	0x2001aff0
 8003a3c:	2001b6d0 	.word	0x2001b6d0
 8003a40:	080272b4 	.word	0x080272b4
 8003a44:	2001bad8 	.word	0x2001bad8
 8003a48:	0800210d 	.word	0x0800210d
 8003a4c:	2001b76c 	.word	0x2001b76c
 8003a50:	2001aedc 	.word	0x2001aedc
 8003a54:	2001b1d8 	.word	0x2001b1d8
 8003a58:	2001b264 	.word	0x2001b264
 8003a5c:	2001b90c 	.word	0x2001b90c

08003a60 <StartDefaultTask>:
{
 8003a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	4d8e      	ldr	r5, [pc, #568]	; (8003ca0 <StartDefaultTask+0x240>)
  MX_USB_DEVICE_Init();
 8003a68:	f01d ffb8 	bl	80219dc <MX_USB_DEVICE_Init>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003a6c:	f242 7728 	movw	r7, #10024	; 0x2728
  MX_LWIP_Init();
 8003a70:	f00e fc26 	bl	80122c0 <MX_LWIP_Init>
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003a74:	2101      	movs	r1, #1
 8003a76:	488b      	ldr	r0, [pc, #556]	; (8003ca4 <StartDefaultTask+0x244>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003a78:	260e      	movs	r6, #14
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003a7a:	f006 fb27 	bl	800a0cc <HAL_GPIO_ReadPin>
 8003a7e:	4603      	mov	r3, r0
	printf("\n\n----------------------------------------------------------------------------\n");
 8003a80:	4889      	ldr	r0, [pc, #548]	; (8003ca8 <StartDefaultTask+0x248>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003a82:	2400      	movs	r4, #0
		pcb = SPLATBOARD1;		// assumed
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	bf0c      	ite	eq
 8003a88:	2316      	moveq	r3, #22
 8003a8a:	230b      	movne	r3, #11
 8003a8c:	602b      	str	r3, [r5, #0]
	printf("\n\n----------------------------------------------------------------------------\n");
 8003a8e:	f01f fbc5 	bl	802321c <puts>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8003a92:	6828      	ldr	r0, [r5, #0]
 8003a94:	4b85      	ldr	r3, [pc, #532]	; (8003cac <StartDefaultTask+0x24c>)
 8003a96:	4a86      	ldr	r2, [pc, #536]	; (8003cb0 <StartDefaultTask+0x250>)
 8003a98:	4986      	ldr	r1, [pc, #536]	; (8003cb4 <StartDefaultTask+0x254>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	6809      	ldr	r1, [r1, #0]
 8003aa0:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8003aa4:	e9cd 4600 	strd	r4, r6, [sp]
 8003aa8:	4883      	ldr	r0, [pc, #524]	; (8003cb8 <StartDefaultTask+0x258>)
 8003aaa:	f01f fb1b 	bl	80230e4 <iprintf>
	if (!(netif_is_link_up(&gnetif))) {
 8003aae:	4b83      	ldr	r3, [pc, #524]	; (8003cbc <StartDefaultTask+0x25c>)
 8003ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ab4:	075b      	lsls	r3, r3, #29
 8003ab6:	d41e      	bmi.n	8003af6 <StartDefaultTask+0x96>
		printf("LAN interface appears disconnected\n\r");
 8003ab8:	4881      	ldr	r0, [pc, #516]	; (8003cc0 <StartDefaultTask+0x260>)
 8003aba:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003abc:	4d81      	ldr	r5, [pc, #516]	; (8003cc4 <StartDefaultTask+0x264>)
		printf("LAN interface appears disconnected\n\r");
 8003abe:	f01f fb11 	bl	80230e4 <iprintf>
			osDelay(50);
 8003ac2:	2032      	movs	r0, #50	; 0x32
 8003ac4:	f00f fdae 	bl	8013624 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ace:	4628      	mov	r0, r5
 8003ad0:	f006 fb0e 	bl	800a0f0 <HAL_GPIO_WritePin>
			osDelay(50);
 8003ad4:	2032      	movs	r0, #50	; 0x32
 8003ad6:	f00f fda5 	bl	8013624 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f006 fb05 	bl	800a0f0 <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8003ae6:	3c01      	subs	r4, #1
 8003ae8:	d1eb      	bne.n	8003ac2 <StartDefaultTask+0x62>
		printf("************* REBOOTING **************\n");
 8003aea:	4877      	ldr	r0, [pc, #476]	; (8003cc8 <StartDefaultTask+0x268>)
 8003aec:	f01f fb96 	bl	802321c <puts>
		rebootme(0);
 8003af0:	4620      	mov	r0, r4
 8003af2:	f7fe fb8f 	bl	8002214 <rebootme>
	netif = netif_default;
 8003af6:	4b75      	ldr	r3, [pc, #468]	; (8003ccc <StartDefaultTask+0x26c>)
 8003af8:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8003d38 <StartDefaultTask+0x2d8>
 8003afc:	6818      	ldr	r0, [r3, #0]
	globalfreeze = 0;		// Allow UDP streaming
 8003afe:	4b74      	ldr	r3, [pc, #464]	; (8003cd0 <StartDefaultTask+0x270>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003b00:	4974      	ldr	r1, [pc, #464]	; (8003cd4 <StartDefaultTask+0x274>)
	globalfreeze = 0;		// Allow UDP streaming
 8003b02:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8003b04:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8003b08:	f015 f8f2 	bl	8018cf0 <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8003b0c:	f8d8 0000 	ldr.w	r0, [r8]
 8003b10:	4971      	ldr	r1, [pc, #452]	; (8003cd8 <StartDefaultTask+0x278>)
 8003b12:	f015 f8a9 	bl	8018c68 <netif_set_status_callback>
	statuspkt.uid = BUILDNO;		// 16 bits
 8003b16:	4b71      	ldr	r3, [pc, #452]	; (8003cdc <StartDefaultTask+0x27c>)
	statuspkt.adctrigoff = TRIG_THRES;
 8003b18:	2264      	movs	r2, #100	; 0x64
	statuspkt.bconf |= (pcb << 8);
 8003b1a:	6828      	ldr	r0, [r5, #0]
	statuspkt.uid = BUILDNO;		// 16 bits
 8003b1c:	f8a3 705c 	strh.w	r7, [r3, #92]	; 0x5c
	statuspkt.majorversion = MAJORVERSION;
 8003b20:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 8003b24:	f883 6071 	strb.w	r6, [r3, #113]	; 0x71
	statuspkt.udppknum = 0;
 8003b28:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 8003b2a:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 8003b2c:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 8003b2e:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 8003b30:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 8003b34:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 8003b38:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8003b3a:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 8003b3c:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 8003b40:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003b44:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003b48:	4c65      	ldr	r4, [pc, #404]	; (8003ce0 <StartDefaultTask+0x280>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003b4a:	f041 0101 	orr.w	r1, r1, #1
	t2cap[0] = 44444444;
 8003b4e:	4d65      	ldr	r5, [pc, #404]	; (8003ce4 <StartDefaultTask+0x284>)
	statuspkt.bconf |= 0x01;	// splat board version 1
 8003b50:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (pcb << 8);
 8003b54:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 8003b58:	6025      	str	r5, [r4, #0]
	statuspkt.bconf |= (pcb << 8);
 8003b5a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8003b5e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	initsplat();
 8003b62:	f001 f99f 	bl	8004ea4 <initsplat>
	stat = setupneo();
 8003b66:	f000 faaf 	bl	80040c8 <setupneo>
	if (stat != HAL_OK) {
 8003b6a:	2800      	cmp	r0, #0
 8003b6c:	f040 8093 	bne.w	8003c96 <StartDefaultTask+0x236>
	printf("Setting up timers\n");
 8003b70:	485d      	ldr	r0, [pc, #372]	; (8003ce8 <StartDefaultTask+0x288>)
 8003b72:	f01f fb53 	bl	802321c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003b76:	2300      	movs	r3, #0
 8003b78:	4a5c      	ldr	r2, [pc, #368]	; (8003cec <StartDefaultTask+0x28c>)
 8003b7a:	4619      	mov	r1, r3
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003b7c:	4c5c      	ldr	r4, [pc, #368]	; (8003cf0 <StartDefaultTask+0x290>)
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 8003b7e:	6810      	ldr	r0, [r2, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f010 f869 	bl	8013c58 <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 8003b86:	485b      	ldr	r0, [pc, #364]	; (8003cf4 <StartDefaultTask+0x294>)
 8003b88:	f009 ffd6 	bl	800db38 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	6820      	ldr	r0, [r4, #0]
 8003b90:	4611      	mov	r1, r2
 8003b92:	f00b fef5 	bl	800f980 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 8003b96:	6820      	ldr	r0, [r4, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	2104      	movs	r1, #4
 8003b9c:	f00b fef0 	bl	800f980 <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	6820      	ldr	r0, [r4, #0]
 8003ba4:	210c      	movs	r1, #12
 8003ba6:	f00b feeb 	bl	800f980 <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8003baa:	2100      	movs	r1, #0
 8003bac:	4620      	mov	r0, r4
 8003bae:	f00c f935 	bl	800fe1c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f00c f931 	bl	800fe1c <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8003bba:	210c      	movs	r1, #12
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f00c f92d 	bl	800fe1c <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8003bc2:	4620      	mov	r0, r4
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	4a46      	ldr	r2, [pc, #280]	; (8003ce0 <StartDefaultTask+0x280>)
 8003bc8:	2108      	movs	r1, #8
 8003bca:	f00b ff37 	bl	800fa3c <HAL_TIM_IC_Start_DMA>
 8003bce:	4605      	mov	r5, r0
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	d15a      	bne.n	8003c8a <StartDefaultTask+0x22a>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8003bd4:	6820      	ldr	r0, [r4, #0]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	2108      	movs	r1, #8
	myip = ip.addr;
 8003bda:	4c47      	ldr	r4, [pc, #284]	; (8003cf8 <StartDefaultTask+0x298>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8003bdc:	f00b fed0 	bl	800f980 <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8003be0:	f8d8 3000 	ldr.w	r3, [r8]
	printf("*****************************************\n");
 8003be4:	4845      	ldr	r0, [pc, #276]	; (8003cfc <StartDefaultTask+0x29c>)
	ip = dhcp->offered_ip_addr;
 8003be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	uip = locateudp();
 8003be8:	4e45      	ldr	r6, [pc, #276]	; (8003d00 <StartDefaultTask+0x2a0>)
	myip = ip.addr;
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	6023      	str	r3, [r4, #0]
	printf("*****************************************\n");
 8003bee:	f01f fb15 	bl	802321c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003bf2:	6821      	ldr	r1, [r4, #0]
 8003bf4:	4843      	ldr	r0, [pc, #268]	; (8003d04 <StartDefaultTask+0x2a4>)
 8003bf6:	0e0a      	lsrs	r2, r1, #24
 8003bf8:	f3c1 4307 	ubfx	r3, r1, #16, #8
	while (lptask_init_done == 0)
 8003bfc:	4c42      	ldr	r4, [pc, #264]	; (8003d08 <StartDefaultTask+0x2a8>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8003bfe:	9200      	str	r2, [sp, #0]
 8003c00:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8003c04:	b2c9      	uxtb	r1, r1
 8003c06:	f01f fa6d 	bl	80230e4 <iprintf>
	printf("*****************************************\n");
 8003c0a:	483c      	ldr	r0, [pc, #240]	; (8003cfc <StartDefaultTask+0x29c>)
 8003c0c:	f01f fb06 	bl	802321c <puts>
	initialapisn();	// get initial s/n and UDP target; reboots if fails
 8003c10:	f003 f80c 	bl	8006c2c <initialapisn>
	osDelay(1000);
 8003c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c18:	f00f fd04 	bl	8013624 <osDelay>
	printf("Starting httpd web server\n");
 8003c1c:	483b      	ldr	r0, [pc, #236]	; (8003d0c <StartDefaultTask+0x2ac>)
 8003c1e:	f01f fafd 	bl	802321c <puts>
	httpd_init();		// start the www server
 8003c22:	f013 fa73 	bl	801710c <httpd_init>
	init_httpd_ssi();	// set up the embedded tag handler
 8003c26:	f002 ffab 	bl	8006b80 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 8003c2a:	4839      	ldr	r0, [pc, #228]	; (8003d10 <StartDefaultTask+0x2b0>)
 8003c2c:	f01f faf6 	bl	802321c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 8003c30:	2208      	movs	r2, #8
 8003c32:	4629      	mov	r1, r5
 8003c34:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003c38:	9200      	str	r2, [sp, #0]
 8003c3a:	4836      	ldr	r0, [pc, #216]	; (8003d14 <StartDefaultTask+0x2b4>)
 8003c3c:	4a36      	ldr	r2, [pc, #216]	; (8003d18 <StartDefaultTask+0x2b8>)
 8003c3e:	f003 fe35 	bl	80078ac <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 8003c42:	4836      	ldr	r0, [pc, #216]	; (8003d1c <StartDefaultTask+0x2bc>)
 8003c44:	f009 fec0 	bl	800d9c8 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8003c48:	f011 f8f6 	bl	8014e38 <xTaskGetCurrentTaskHandle>
 8003c4c:	4b34      	ldr	r3, [pc, #208]	; (8003d20 <StartDefaultTask+0x2c0>)
 8003c4e:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 8003c50:	f002 fbd8 	bl	8006404 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 8003c54:	4b33      	ldr	r3, [pc, #204]	; (8003d24 <StartDefaultTask+0x2c4>)
	uip = locateudp();
 8003c56:	4601      	mov	r1, r0
	main_init_done = 1; // let lptask now main has initialised
 8003c58:	2201      	movs	r2, #1
	printf("Waiting for lptask to start\n");
 8003c5a:	4833      	ldr	r0, [pc, #204]	; (8003d28 <StartDefaultTask+0x2c8>)
	uip = locateudp();
 8003c5c:	6031      	str	r1, [r6, #0]
	main_init_done = 1; // let lptask now main has initialised
 8003c5e:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8003c60:	f01f fadc 	bl	802321c <puts>
	while (lptask_init_done == 0)
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	b92b      	cbnz	r3, 8003c74 <StartDefaultTask+0x214>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8003c68:	2064      	movs	r0, #100	; 0x64
 8003c6a:	f00f fcdb 	bl	8013624 <osDelay>
	while (lptask_init_done == 0)
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d0f9      	beq.n	8003c68 <StartDefaultTask+0x208>
	startadc();		// start the ADC DMA loop
 8003c74:	f7fc ff26 	bl	8000ac4 <startadc>
		startudp(uip);	// should never return
 8003c78:	6830      	ldr	r0, [r6, #0]
 8003c7a:	f002 fbf9 	bl	8006470 <startudp>
		printf("UDP stream exited!!!\n\r");
 8003c7e:	482b      	ldr	r0, [pc, #172]	; (8003d2c <StartDefaultTask+0x2cc>)
 8003c80:	f01f fa30 	bl	80230e4 <iprintf>
		rebootme(4);
 8003c84:	2004      	movs	r0, #4
 8003c86:	f7fe fac5 	bl	8002214 <rebootme>
		printf("TIM_Base_Start_DMA err %i", err);
 8003c8a:	4601      	mov	r1, r0
 8003c8c:	4828      	ldr	r0, [pc, #160]	; (8003d30 <StartDefaultTask+0x2d0>)
 8003c8e:	f01f fa29 	bl	80230e4 <iprintf>
		Error_Handler();
 8003c92:	f7ff f80f 	bl	8002cb4 <Error_Handler>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8003c96:	4827      	ldr	r0, [pc, #156]	; (8003d34 <StartDefaultTask+0x2d4>)
 8003c98:	f01f fa24 	bl	80230e4 <iprintf>
 8003c9c:	e768      	b.n	8003b70 <StartDefaultTask+0x110>
 8003c9e:	bf00      	nop
 8003ca0:	2001ae7c 	.word	0x2001ae7c
 8003ca4:	40020800 	.word	0x40020800
 8003ca8:	08028144 	.word	0x08028144
 8003cac:	1ff0f428 	.word	0x1ff0f428
 8003cb0:	1ff0f424 	.word	0x1ff0f424
 8003cb4:	1ff0f420 	.word	0x1ff0f420
 8003cb8:	08028194 	.word	0x08028194
 8003cbc:	2001c2f0 	.word	0x2001c2f0
 8003cc0:	080281d4 	.word	0x080281d4
 8003cc4:	40020c00 	.word	0x40020c00
 8003cc8:	080281fc 	.word	0x080281fc
 8003ccc:	2002e384 	.word	0x2002e384
 8003cd0:	2001be28 	.word	0x2001be28
 8003cd4:	0800221d 	.word	0x0800221d
 8003cd8:	08002101 	.word	0x08002101
 8003cdc:	2001adc0 	.word	0x2001adc0
 8003ce0:	2001ae6c 	.word	0x2001ae6c
 8003ce4:	02a62b1c 	.word	0x02a62b1c
 8003ce8:	08028244 	.word	0x08028244
 8003cec:	2001b6d0 	.word	0x2001b6d0
 8003cf0:	2001b910 	.word	0x2001b910
 8003cf4:	2001b6d4 	.word	0x2001b6d4
 8003cf8:	2001b260 	.word	0x2001b260
 8003cfc:	08028274 	.word	0x08028274
 8003d00:	2001b25c 	.word	0x2001b25c
 8003d04:	080282a0 	.word	0x080282a0
 8003d08:	20001c54 	.word	0x20001c54
 8003d0c:	080282c8 	.word	0x080282c8
 8003d10:	080282e4 	.word	0x080282e4
 8003d14:	2001b5f4 	.word	0x2001b5f4
 8003d18:	08028334 	.word	0x08028334
 8003d1c:	2001ba8c 	.word	0x2001ba8c
 8003d20:	200007e8 	.word	0x200007e8
 8003d24:	20001c58 	.word	0x20001c58
 8003d28:	08028300 	.word	0x08028300
 8003d2c:	0802831c 	.word	0x0802831c
 8003d30:	08028258 	.word	0x08028258
 8003d34:	08028224 	.word	0x08028224
 8003d38:	2001aed8 	.word	0x2001aed8

08003d3c <assert_failed>:
{
  /* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop

08003d40 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8003d40:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8003d42:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8003d44:	b083      	sub	sp, #12
 8003d46:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 8003d48:	d009      	beq.n	8003d5e <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 8003d4a:	230a      	movs	r3, #10
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	a901      	add	r1, sp, #4
 8003d50:	4808      	ldr	r0, [pc, #32]	; (8003d74 <__io_putchar+0x34>)
 8003d52:	f00d fa09 	bl	8011168 <HAL_UART_Transmit>

	return ch;
	}
}
 8003d56:	9801      	ldr	r0, [sp, #4]
 8003d58:	b003      	add	sp, #12
 8003d5a:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8003d5e:	4603      	mov	r3, r0
 8003d60:	2202      	movs	r2, #2
 8003d62:	4905      	ldr	r1, [pc, #20]	; (8003d78 <__io_putchar+0x38>)
 8003d64:	4803      	ldr	r0, [pc, #12]	; (8003d74 <__io_putchar+0x34>)
 8003d66:	f00d f9ff 	bl	8011168 <HAL_UART_Transmit>
}
 8003d6a:	9801      	ldr	r0, [sp, #4]
 8003d6c:	b003      	add	sp, #12
 8003d6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d72:	bf00      	nop
 8003d74:	2001b95c 	.word	0x2001b95c
 8003d78:	08028a34 	.word	0x08028a34

08003d7c <calcepoch32>:
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8003d7c:	b538      	push	{r3, r4, r5, lr}
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <calcepoch32+0x40>)
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003d80:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003d84:	480e      	ldr	r0, [pc, #56]	; (8003dc0 <calcepoch32+0x44>)
 8003d86:	891a      	ldrh	r2, [r3, #8]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003d88:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003d8a:	b292      	uxth	r2, r2
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 8003d8c:	7add      	ldrb	r5, [r3, #11]
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8003d8e:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8003d90:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003d92:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_hour = statuspkt.NavPvt.hour;
 8003d96:	7b1c      	ldrb	r4, [r3, #12]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8003d98:	e9c0 1204 	strd	r1, r2, [r0, #16]
	now.tm_min = statuspkt.NavPvt.min;
 8003d9c:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003d9e:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_hour = statuspkt.NavPvt.hour;
 8003da0:	e9c0 4502 	strd	r4, r5, [r0, #8]
	now.tm_sec = statuspkt.NavPvt.sec;
 8003da4:	e9c0 3200 	strd	r3, r2, [r0]

	epochtime = mktime(getgpstime());
 8003da8:	f01e fb0a 	bl	80223c0 <mktime>
 8003dac:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <calcepoch32+0x48>)
 8003dae:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 8003db0:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 8003db4:	e9c2 3100 	strd	r3, r1, [r2]
}
 8003db8:	4418      	add	r0, r3
 8003dba:	bd38      	pop	{r3, r4, r5, pc}
 8003dbc:	2001adc0 	.word	0x2001adc0
 8003dc0:	2001bb40 	.word	0x2001bb40
 8003dc4:	2001bcc8 	.word	0x2001bcc8

08003dc8 <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 8003dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dcc:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 8003dce:	b33a      	cbz	r2, 8003e20 <printPacket+0x58>
 8003dd0:	4607      	mov	r7, r0
 8003dd2:	4616      	mov	r6, r2
 8003dd4:	1e4d      	subs	r5, r1, #1
 8003dd6:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 8003dd8:	f8df a054 	ldr.w	sl, [pc, #84]	; 8003e30 <printPacket+0x68>
 8003ddc:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8003e34 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 8003de0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8003e38 <printPacket+0x70>
 8003de4:	e013      	b.n	8003e0e <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 8003de6:	f8da 1000 	ldr.w	r1, [sl]
 8003dea:	1c4b      	adds	r3, r1, #1
 8003dec:	f8ca 3000 	str.w	r3, [sl]
 8003df0:	f01f f978 	bl	80230e4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8003df4:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 8003df6:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 8003dfe:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 8003e00:	f01f fae8 	bl	80233d4 <siprintf>
		printf(temp);
 8003e04:	a801      	add	r0, sp, #4
 8003e06:	f01f f96d 	bl	80230e4 <iprintf>
	for (byte i = 0; i < len; i++) {
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d008      	beq.n	8003e20 <printPacket+0x58>
		if (i % 16 == 0) {
 8003e0e:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8003e12:	463a      	mov	r2, r7
 8003e14:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 8003e16:	d0e6      	beq.n	8003de6 <printPacket+0x1e>
			printf(" ");
 8003e18:	2020      	movs	r0, #32
 8003e1a:	f01f f97b 	bl	8023114 <putchar>
 8003e1e:	e7e9      	b.n	8003df4 <printPacket+0x2c>
	}
	printf("\n\r");
 8003e20:	4802      	ldr	r0, [pc, #8]	; (8003e2c <printPacket+0x64>)
 8003e22:	f01f f95f 	bl	80230e4 <iprintf>
}
 8003e26:	b002      	add	sp, #8
 8003e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e2c:	08028330 	.word	0x08028330
 8003e30:	20001c70 	.word	0x20001c70
 8003e34:	08028a38 	.word	0x08028a38
 8003e38:	08028a44 	.word	0x08028a44

08003e3c <restoreDefaults>:

// UBLOX revert to defaults
// B5 62 06 09 0D 00 FF FF 00 00 00 00 00 00 FF FF 00 00 03 1B 9A

// Function, sending packet to the receiver to restore default configuration
void restoreDefaults() {
 8003e3c:	b530      	push	{r4, r5, lr}
			0x17, // payload
			0x2F, // CK_A
			0xAE, // CK_B
			};
#endif
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003e3e:	4d09      	ldr	r5, [pc, #36]	; (8003e64 <restoreDefaults+0x28>)
void restoreDefaults() {
 8003e40:	b087      	sub	sp, #28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003e42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e44:	466c      	mov	r4, sp
 8003e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e48:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003e4c:	2364      	movs	r3, #100	; 0x64
 8003e4e:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8003e50:	f844 0b04 	str.w	r0, [r4], #4
 8003e54:	7021      	strb	r1, [r4, #0]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003e56:	4669      	mov	r1, sp
 8003e58:	4803      	ldr	r0, [pc, #12]	; (8003e68 <restoreDefaults+0x2c>)
 8003e5a:	f00d f985 	bl	8011168 <HAL_UART_Transmit>
			0x00, 0x00, 0x03, 0x1B, 0x9A };

	sendPacket(packet, sizeof(packet));
}
 8003e5e:	b007      	add	sp, #28
 8003e60:	bd30      	pop	{r4, r5, pc}
 8003e62:	bf00      	nop
 8003e64:	080272fc 	.word	0x080272fc
 8003e68:	2001bbc0 	.word	0x2001bbc0

08003e6c <askneo_ver>:

void askneo_ver() {
 8003e6c:	b510      	push	{r4, lr}
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8003e6e:	4b09      	ldr	r3, [pc, #36]	; (8003e94 <askneo_ver+0x28>)
void askneo_ver() {
 8003e70:	b082      	sub	sp, #8
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8003e72:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003e76:	466c      	mov	r4, sp
 8003e78:	e884 0003 	stmia.w	r4, {r0, r1}

	printf("Checking for Neo GPS...\n");
 8003e7c:	4806      	ldr	r0, [pc, #24]	; (8003e98 <askneo_ver+0x2c>)
 8003e7e:	f01f f9cd 	bl	802321c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003e82:	4621      	mov	r1, r4
 8003e84:	2364      	movs	r3, #100	; 0x64
 8003e86:	2208      	movs	r2, #8
 8003e88:	4804      	ldr	r0, [pc, #16]	; (8003e9c <askneo_ver+0x30>)
 8003e8a:	f00d f96d 	bl	8011168 <HAL_UART_Transmit>
	sendPacket(packet, sizeof(packet));
}
 8003e8e:	b002      	add	sp, #8
 8003e90:	bd10      	pop	{r4, pc}
 8003e92:	bf00      	nop
 8003e94:	08027314 	.word	0x08027314
 8003e98:	08028a4c 	.word	0x08028a4c
 8003e9c:	2001bbc0 	.word	0x2001bbc0

08003ea0 <disableNmea>:

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8003ea0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003ea4:	4c21      	ldr	r4, [pc, #132]	; (8003f2c <disableNmea+0x8c>)
void disableNmea() {
 8003ea6:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 8003ea8:	2700      	movs	r7, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003eaa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8003f30 <disableNmea+0x90>
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003eae:	ad04      	add	r5, sp, #16
 8003eb0:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8003eb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003eb6:	462e      	mov	r6, r5
 8003eb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003eba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ebc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ebe:	e894 0003 	ldmia.w	r4, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003ec2:	f104 0208 	add.w	r2, r4, #8
 8003ec6:	ab01      	add	r3, sp, #4
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8003ec8:	e885 0003 	stmia.w	r5, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8003ecc:	ca07      	ldmia	r2, {r0, r1, r2}
 8003ece:	f10d 050d 	add.w	r5, sp, #13
 8003ed2:	0c14      	lsrs	r4, r2, #16
 8003ed4:	c303      	stmia	r3!, {r0, r1}
 8003ed6:	f823 2b02 	strh.w	r2, [r3], #2
 8003eda:	701c      	strb	r4, [r3, #0]
		packet[packetSize - 1] = 0x00;
 8003edc:	2400      	movs	r4, #0
			packet[payloadOffset + j] = messages[i][j];
 8003ede:	7831      	ldrb	r1, [r6, #0]
 8003ee0:	7873      	ldrb	r3, [r6, #1]
 8003ee2:	f10d 0206 	add.w	r2, sp, #6
		packet[packetSize - 1] = 0x00;
 8003ee6:	46a4      	mov	ip, r4
		packet[packetSize - 2] = 0x00;
 8003ee8:	f88d 700d 	strb.w	r7, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8003eec:	f88d 700e 	strb.w	r7, [sp, #14]
			packet[payloadOffset + j] = messages[i][j];
 8003ef0:	f88d 100a 	strb.w	r1, [sp, #10]
 8003ef4:	f88d 300b 	strb.w	r3, [sp, #11]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 8003ef8:	f812 3b01 	ldrb.w	r3, [r2], #1
 8003efc:	4463      	add	r3, ip
		for (byte j = 0; j < packetSize - 4; j++) {
 8003efe:	4295      	cmp	r5, r2
			packet[packetSize - 2] += packet[2 + j];
 8003f00:	fa5f fc83 	uxtb.w	ip, r3
			packet[packetSize - 1] += packet[packetSize - 2];
 8003f04:	4464      	add	r4, ip
 8003f06:	b2e4      	uxtb	r4, r4
		for (byte j = 0; j < packetSize - 4; j++) {
 8003f08:	d1f6      	bne.n	8003ef8 <disableNmea+0x58>
 8003f0a:	3602      	adds	r6, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f0c:	2364      	movs	r3, #100	; 0x64
 8003f0e:	220b      	movs	r2, #11
 8003f10:	a901      	add	r1, sp, #4
 8003f12:	4640      	mov	r0, r8
 8003f14:	f88d c00d 	strb.w	ip, [sp, #13]
 8003f18:	f88d 400e 	strb.w	r4, [sp, #14]
 8003f1c:	f00d f924 	bl	8011168 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 8003f20:	454e      	cmp	r6, r9
 8003f22:	d1db      	bne.n	8003edc <disableNmea+0x3c>
		}

		sendPacket(packet, packetSize);
	}
}
 8003f24:	b00f      	add	sp, #60	; 0x3c
 8003f26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003f2a:	bf00      	nop
 8003f2c:	0802731c 	.word	0x0802731c
 8003f30:	2001bbc0 	.word	0x2001bbc0

08003f34 <changeFrequency>:
	sendPacket(packet, sizeof(packet));
}

// Function, sending packet to the receiver to change frequency to 100 ms
#define SEC 1
void changeFrequency() {
 8003f34:	b510      	push	{r4, lr}
	// CFG-RATE packet
	byte packet[] = { 0xB5, // sync char 1
 8003f36:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <changeFrequency+0x20>)
void changeFrequency() {
 8003f38:	b084      	sub	sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8003f3a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003f3c:	466c      	mov	r4, sp
 8003f3e:	c407      	stmia	r4!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f40:	220e      	movs	r2, #14
	byte packet[] = { 0xB5, // sync char 1
 8003f42:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f44:	4669      	mov	r1, sp
 8003f46:	2364      	movs	r3, #100	; 0x64
 8003f48:	4803      	ldr	r0, [pc, #12]	; (8003f58 <changeFrequency+0x24>)
 8003f4a:	f00d f90d 	bl	8011168 <HAL_UART_Transmit>
			0x01, // CK_A
			0x39, // CK_B
#endif
			};
	sendPacket(packet, sizeof(packet));
}
 8003f4e:	b004      	add	sp, #16
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	bf00      	nop
 8003f54:	0802736c 	.word	0x0802736c
 8003f58:	2001bbc0 	.word	0x2001bbc0

08003f5c <disableUnnecessaryChannels>:

// Function, sending packet to the receiver to disable unnecessary channels
void disableUnnecessaryChannels() {
 8003f5c:	b530      	push	{r4, r5, lr}
	// CFG-GNSS packet
	byte packet[] = { 0xB5, // sync char 1
 8003f5e:	4d09      	ldr	r5, [pc, #36]	; (8003f84 <disableUnnecessaryChannels+0x28>)
void disableUnnecessaryChannels() {
 8003f60:	b08d      	sub	sp, #52	; 0x34
	byte packet[] = { 0xB5, // sync char 1
 8003f62:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f64:	ac01      	add	r4, sp, #4
 8003f66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f6c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f70:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003f72:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f76:	222c      	movs	r2, #44	; 0x2c
 8003f78:	a901      	add	r1, sp, #4
 8003f7a:	4803      	ldr	r0, [pc, #12]	; (8003f88 <disableUnnecessaryChannels+0x2c>)
 8003f7c:	f00d f8f4 	bl	8011168 <HAL_UART_Transmit>
			0xA4, // CK_A
			0x25, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003f80:	b00d      	add	sp, #52	; 0x34
 8003f82:	bd30      	pop	{r4, r5, pc}
 8003f84:	0802737c 	.word	0x0802737c
 8003f88:	2001bbc0 	.word	0x2001bbc0

08003f8c <enableNavPvt>:

// Function, sending packet to the receiver to enable NAV-PVT messages
void enableNavPvt() {
 8003f8c:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, // sync char 1
 8003f8e:	4a08      	ldr	r2, [pc, #32]	; (8003fb0 <enableNavPvt+0x24>)
void enableNavPvt() {
 8003f90:	b085      	sub	sp, #20
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003f92:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8003f94:	ac01      	add	r4, sp, #4
 8003f96:	ca07      	ldmia	r2, {r0, r1, r2}
 8003f98:	c403      	stmia	r4!, {r0, r1}
 8003f9a:	0c15      	lsrs	r5, r2, #16
 8003f9c:	f824 2b02 	strh.w	r2, [r4], #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003fa0:	a901      	add	r1, sp, #4
 8003fa2:	220b      	movs	r2, #11
 8003fa4:	4803      	ldr	r0, [pc, #12]	; (8003fb4 <enableNavPvt+0x28>)
	byte packet[] = { 0xB5, // sync char 1
 8003fa6:	7025      	strb	r5, [r4, #0]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003fa8:	f00d f8de 	bl	8011168 <HAL_UART_Transmit>
			0x13, // CK_A
			0x51, // CK_B
			};

	sendPacket(packet, sizeof(packet));
}
 8003fac:	b005      	add	sp, #20
 8003fae:	bd30      	pop	{r4, r5, pc}
 8003fb0:	080273a8 	.word	0x080273a8
 8003fb4:	2001bbc0 	.word	0x2001bbc0

08003fb8 <enableNaTP5>:

// Function, to set time pulse2 to interval of 1pps
// pulse only running when GPS locked to UTC
void enableNaTP5() {
 8003fb8:	b530      	push	{r4, r5, lr}
	// CFG-MSG packet
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003fba:	4d09      	ldr	r5, [pc, #36]	; (8003fe0 <enableNaTP5+0x28>)
void enableNaTP5() {
 8003fbc:	b08b      	sub	sp, #44	; 0x2c
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fc0:	466c      	mov	r4, sp
 8003fc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fc8:	e895 0003 	ldmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003fcc:	2364      	movs	r3, #100	; 0x64
 8003fce:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8003fd0:	e884 0003 	stmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8003fd4:	4669      	mov	r1, sp
 8003fd6:	4803      	ldr	r0, [pc, #12]	; (8003fe4 <enableNaTP5+0x2c>)
 8003fd8:	f00d f8c6 	bl	8011168 <HAL_UART_Transmit>
			0x0F, 0x00, 0x40, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x86, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
			0xF7, 0x00, 0x00, 0x00, 0xC9, 0x97 };

	sendPacket(packet, sizeof(packet));
}
 8003fdc:	b00b      	add	sp, #44	; 0x2c
 8003fde:	bd30      	pop	{r4, r5, pc}
 8003fe0:	080273b4 	.word	0x080273b4
 8003fe4:	2001bbc0 	.word	0x2001bbc0

08003fe8 <IsPacketReady>:
}

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8003fe8:	4931      	ldr	r1, [pc, #196]	; (80040b0 <IsPacketReady+0xc8>)
int IsPacketReady(unsigned char c) {
 8003fea:	4602      	mov	r2, r0
 8003fec:	b4f0      	push	{r4, r5, r6, r7}
	unsigned char p = UbxGpsv.carriagePosition;
 8003fee:	78cb      	ldrb	r3, [r1, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8003ff0:	2b03      	cmp	r3, #3
 8003ff2:	d814      	bhi.n	800401e <IsPacketReady+0x36>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8003ff4:	482f      	ldr	r0, [pc, #188]	; (80040b4 <IsPacketReady+0xcc>)
 8003ff6:	461c      	mov	r4, r3
 8003ff8:	5cc0      	ldrb	r0, [r0, r3]
 8003ffa:	4290      	cmp	r0, r2
 8003ffc:	d00a      	beq.n	8004014 <IsPacketReady+0x2c>
 8003ffe:	482e      	ldr	r0, [pc, #184]	; (80040b8 <IsPacketReady+0xd0>)
 8004000:	5cc0      	ldrb	r0, [r0, r3]
 8004002:	4290      	cmp	r0, r2
 8004004:	d006      	beq.n	8004014 <IsPacketReady+0x2c>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004006:	4a2d      	ldr	r2, [pc, #180]	; (80040bc <IsPacketReady+0xd4>)
 8004008:	2300      	movs	r3, #0
 800400a:	6013      	str	r3, [r2, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 800400c:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 800400e:	70cb      	strb	r3, [r1, #3]
}
 8004010:	bcf0      	pop	{r4, r5, r6, r7}
 8004012:	4770      	bx	lr
			PACKETstore[p++] = c;
 8004014:	3301      	adds	r3, #1
 8004016:	482a      	ldr	r0, [pc, #168]	; (80040c0 <IsPacketReady+0xd8>)
 8004018:	b2db      	uxtb	r3, r3
 800401a:	5502      	strb	r2, [r0, r4]
 800401c:	e7f6      	b.n	800400c <IsPacketReady+0x24>
		if (p < 6) {
 800401e:	2b05      	cmp	r3, #5
 8004020:	d928      	bls.n	8004074 <IsPacketReady+0x8c>
		if (p == 6) {
 8004022:	2b06      	cmp	r3, #6
 8004024:	d02d      	beq.n	8004082 <IsPacketReady+0x9a>
 8004026:	4c25      	ldr	r4, [pc, #148]	; (80040bc <IsPacketReady+0xd4>)
		if (p < (2 + 4 + len + 2)) {
 8004028:	6820      	ldr	r0, [r4, #0]
 800402a:	461d      	mov	r5, r3
 800402c:	3007      	adds	r0, #7
 800402e:	4298      	cmp	r0, r3
 8004030:	dbec      	blt.n	800400c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004032:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8004034:	6820      	ldr	r0, [r4, #0]
			PACKETstore[p++] = c;
 8004036:	4e22      	ldr	r6, [pc, #136]	; (80040c0 <IsPacketReady+0xd8>)
 8004038:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 800403a:	3008      	adds	r0, #8
			PACKETstore[p++] = c;
 800403c:	5572      	strb	r2, [r6, r5]
			if (p == (2 + 4 + len + 2)) {
 800403e:	4283      	cmp	r3, r0
 8004040:	d1e4      	bne.n	800400c <IsPacketReady+0x24>
				if (isGoodChecksum(len)) {
 8004042:	f8d4 c000 	ldr.w	ip, [r4]
				UbxGpsv.carriagePosition = p;
 8004046:	2200      	movs	r2, #0
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004048:	f11c 0f03 	cmn.w	ip, #3
				UbxGpsv.carriagePosition = p;
 800404c:	70ca      	strb	r2, [r1, #3]
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800404e:	db2c      	blt.n	80040aa <IsPacketReady+0xc2>
 8004050:	1d77      	adds	r7, r6, #5
 8004052:	1c70      	adds	r0, r6, #1
	unsigned char CK_A = 0;
 8004054:	4613      	mov	r3, r2
 8004056:	4467      	add	r7, ip
		CK_A = CK_A + PACKETstore[i];
 8004058:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800405c:	442b      	add	r3, r5
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 800405e:	42b8      	cmp	r0, r7
		CK_A = CK_A + PACKETstore[i];
 8004060:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 8004062:	441a      	add	r2, r3
 8004064:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 8004066:	d1f7      	bne.n	8004058 <IsPacketReady+0x70>
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004068:	4466      	add	r6, ip
 800406a:	79b0      	ldrb	r0, [r6, #6]
 800406c:	4298      	cmp	r0, r3
 800406e:	d014      	beq.n	800409a <IsPacketReady+0xb2>
				p = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	e7cb      	b.n	800400c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004074:	4d12      	ldr	r5, [pc, #72]	; (80040c0 <IsPacketReady+0xd8>)
 8004076:	1c5c      	adds	r4, r3, #1
			return (0);
 8004078:	2000      	movs	r0, #0
			PACKETstore[p++] = c;
 800407a:	54ea      	strb	r2, [r5, r3]
			UbxGpsv.carriagePosition = p;
 800407c:	70cc      	strb	r4, [r1, #3]
}
 800407e:	bcf0      	pop	{r4, r5, r6, r7}
 8004080:	4770      	bx	lr
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8004082:	4d0f      	ldr	r5, [pc, #60]	; (80040c0 <IsPacketReady+0xd8>)
 8004084:	4c0d      	ldr	r4, [pc, #52]	; (80040bc <IsPacketReady+0xd4>)
 8004086:	796e      	ldrb	r6, [r5, #5]
 8004088:	7928      	ldrb	r0, [r5, #4]
 800408a:	eb00 2006 	add.w	r0, r0, r6, lsl #8
 800408e:	6020      	str	r0, [r4, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8004090:	6820      	ldr	r0, [r4, #0]
 8004092:	287f      	cmp	r0, #127	; 0x7f
 8004094:	d9c8      	bls.n	8004028 <IsPacketReady+0x40>
				return 0;
 8004096:	2000      	movs	r0, #0
 8004098:	e7ba      	b.n	8004010 <IsPacketReady+0x28>
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 800409a:	79f3      	ldrb	r3, [r6, #7]
 800409c:	4293      	cmp	r3, r2
 800409e:	d1e7      	bne.n	8004070 <IsPacketReady+0x88>
					gpsgood = 1;
 80040a0:	2201      	movs	r2, #1
 80040a2:	4b08      	ldr	r3, [pc, #32]	; (80040c4 <IsPacketReady+0xdc>)
					return len;
 80040a4:	6820      	ldr	r0, [r4, #0]
					gpsgood = 1;
 80040a6:	601a      	str	r2, [r3, #0]
					return len;
 80040a8:	e7b2      	b.n	8004010 <IsPacketReady+0x28>
	unsigned char CK_A = 0;
 80040aa:	4613      	mov	r3, r2
 80040ac:	e7dc      	b.n	8004068 <IsPacketReady+0x80>
 80040ae:	bf00      	nop
 80040b0:	2000025c 	.word	0x2000025c
 80040b4:	08028c34 	.word	0x08028c34
 80040b8:	08028c38 	.word	0x08028c38
 80040bc:	20001c7c 	.word	0x20001c7c
 80040c0:	2001bcd8 	.word	0x2001bcd8
 80040c4:	20001c78 	.word	0x20001c78

080040c8 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (pcb == LIGHTNINGBOARD2) {
 80040c8:	4b45      	ldr	r3, [pc, #276]	; (80041e0 <setupneo+0x118>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 80040ce:	b570      	push	{r4, r5, r6, lr}
	if (pcb == LIGHTNINGBOARD2) {
 80040d0:	d05d      	beq.n	800418e <setupneo+0xc6>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 80040d2:	2284      	movs	r2, #132	; 0x84
 80040d4:	4943      	ldr	r1, [pc, #268]	; (80041e4 <setupneo+0x11c>)
 80040d6:	4844      	ldr	r0, [pc, #272]	; (80041e8 <setupneo+0x120>)
 80040d8:	f01e f86a 	bl	80221b0 <memcpy>
		gpsuarttx = huart6;
 80040dc:	2284      	movs	r2, #132	; 0x84
 80040de:	4941      	ldr	r1, [pc, #260]	; (80041e4 <setupneo+0x11c>)
 80040e0:	4842      	ldr	r0, [pc, #264]	; (80041ec <setupneo+0x124>)
 80040e2:	f01e f865 	bl	80221b0 <memcpy>
		GPSUARTRX = USART6;
 80040e6:	4b42      	ldr	r3, [pc, #264]	; (80041f0 <setupneo+0x128>)
 80040e8:	4a42      	ldr	r2, [pc, #264]	; (80041f4 <setupneo+0x12c>)
 80040ea:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 80040ec:	2201      	movs	r2, #1
 80040ee:	4942      	ldr	r1, [pc, #264]	; (80041f8 <setupneo+0x130>)
 80040f0:	483d      	ldr	r0, [pc, #244]	; (80041e8 <setupneo+0x120>)
 80040f2:	f00d fa33 	bl	801155c <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 80040f6:	4606      	mov	r6, r0
 80040f8:	2800      	cmp	r0, #0
 80040fa:	d142      	bne.n	8004182 <setupneo+0xba>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 80040fc:	f7ff fed0 	bl	8003ea0 <disableNmea>
	osDelay(500);
 8004100:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004104:	f00f fa8e 	bl	8013624 <osDelay>

	// is there a device - what is it running?
	askneo_ver();
 8004108:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 800410c:	4d3b      	ldr	r5, [pc, #236]	; (80041fc <setupneo+0x134>)
 800410e:	f7ff fead 	bl	8003e6c <askneo_ver>
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004112:	e003      	b.n	800411c <setupneo+0x54>
		i++;
		osDelay(1);
 8004114:	f00f fa86 	bl	8013624 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004118:	3c01      	subs	r4, #1
 800411a:	d057      	beq.n	80041cc <setupneo+0x104>
 800411c:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 800411e:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004120:	2b00      	cmp	r3, #0
 8004122:	d0f7      	beq.n	8004114 <setupneo+0x4c>
		printf("***** Neo7m is not responding.....rebooting\n");
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
 8004124:	f7ff fe8a 	bl	8003e3c <restoreDefaults>
	osDelay(1500);
 8004128:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800412c:	f00f fa7a 	bl	8013624 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8004130:	4833      	ldr	r0, [pc, #204]	; (8004200 <setupneo+0x138>)
 8004132:	f01e ffd7 	bl	80230e4 <iprintf>

	changeFrequency();
 8004136:	f7ff fefd 	bl	8003f34 <changeFrequency>
	osDelay(500);
 800413a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800413e:	f00f fa71 	bl	8013624 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8004142:	4830      	ldr	r0, [pc, #192]	; (8004204 <setupneo+0x13c>)
 8004144:	f01f f86a 	bl	802321c <puts>
	disableUnnecessaryChannels();
 8004148:	f7ff ff08 	bl	8003f5c <disableUnnecessaryChannels>
	osDelay(500);
 800414c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004150:	f00f fa68 	bl	8013624 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8004154:	482c      	ldr	r0, [pc, #176]	; (8004208 <setupneo+0x140>)
 8004156:	f01e ffc5 	bl	80230e4 <iprintf>
	enableNavPvt();
 800415a:	f7ff ff17 	bl	8003f8c <enableNavPvt>
	osDelay(500);
 800415e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004162:	f00f fa5f 	bl	8013624 <osDelay>

// Enable Time pulse
	enableNaTP5();
 8004166:	f7ff ff27 	bl	8003fb8 <enableNaTP5>
	osDelay(500);
 800416a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800416e:	f00f fa59 	bl	8013624 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004172:	4b26      	ldr	r3, [pc, #152]	; (800420c <setupneo+0x144>)
 8004174:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8004176:	4826      	ldr	r0, [pc, #152]	; (8004210 <setupneo+0x148>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004178:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 800417a:	f01e ffb3 	bl	80230e4 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 800417e:	4630      	mov	r0, r6
 8004180:	bd70      	pop	{r4, r5, r6, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004182:	4601      	mov	r1, r0
 8004184:	4823      	ldr	r0, [pc, #140]	; (8004214 <setupneo+0x14c>)
 8004186:	f01e ffad 	bl	80230e4 <iprintf>
}
 800418a:	4630      	mov	r0, r6
 800418c:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Abort_IT(&huart7);
 800418e:	4c22      	ldr	r4, [pc, #136]	; (8004218 <setupneo+0x150>)
 8004190:	4620      	mov	r0, r4
 8004192:	f00c fa1d 	bl	80105d0 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8004196:	4620      	mov	r0, r4
 8004198:	f00c f880 	bl	801029c <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 800419c:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80041a0:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 80041a2:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 80041a4:	f00d f888 	bl	80112b8 <HAL_UART_Init>
 80041a8:	b968      	cbnz	r0, 80041c6 <setupneo+0xfe>
		gpsuartrx = huart8;
 80041aa:	2284      	movs	r2, #132	; 0x84
 80041ac:	491b      	ldr	r1, [pc, #108]	; (800421c <setupneo+0x154>)
 80041ae:	480e      	ldr	r0, [pc, #56]	; (80041e8 <setupneo+0x120>)
 80041b0:	f01d fffe 	bl	80221b0 <memcpy>
		gpsuarttx = huart7;
 80041b4:	2284      	movs	r2, #132	; 0x84
 80041b6:	4918      	ldr	r1, [pc, #96]	; (8004218 <setupneo+0x150>)
 80041b8:	480c      	ldr	r0, [pc, #48]	; (80041ec <setupneo+0x124>)
 80041ba:	f01d fff9 	bl	80221b0 <memcpy>
		GPSUARTRX = UART8;
 80041be:	4b0c      	ldr	r3, [pc, #48]	; (80041f0 <setupneo+0x128>)
 80041c0:	4a17      	ldr	r2, [pc, #92]	; (8004220 <setupneo+0x158>)
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	e792      	b.n	80040ec <setupneo+0x24>
			Error_Handler();
 80041c6:	f7fe fd75 	bl	8002cb4 <Error_Handler>
 80041ca:	e7ee      	b.n	80041aa <setupneo+0xe2>
		printf("***** Neo7m is not responding.....rebooting\n");
 80041cc:	4815      	ldr	r0, [pc, #84]	; (8004224 <setupneo+0x15c>)
 80041ce:	f01f f825 	bl	802321c <puts>
		osDelay(200);
 80041d2:	20c8      	movs	r0, #200	; 0xc8
 80041d4:	f00f fa26 	bl	8013624 <osDelay>
		rebootme(2);
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fe f81b 	bl	8002214 <rebootme>
 80041de:	e7a1      	b.n	8004124 <setupneo+0x5c>
 80041e0:	2001ae7c 	.word	0x2001ae7c
 80041e4:	2001b804 	.word	0x2001b804
 80041e8:	2001bc44 	.word	0x2001bc44
 80041ec:	2001bbc0 	.word	0x2001bbc0
 80041f0:	2001bcd0 	.word	0x2001bcd0
 80041f4:	40011400 	.word	0x40011400
 80041f8:	20001c84 	.word	0x20001c84
 80041fc:	20001c80 	.word	0x20001c80
 8004200:	08028a8c 	.word	0x08028a8c
 8004204:	08028abc 	.word	0x08028abc
 8004208:	08028ae4 	.word	0x08028ae4
 800420c:	2001adc0 	.word	0x2001adc0
 8004210:	08028b08 	.word	0x08028b08
 8004214:	08028a64 	.word	0x08028a64
 8004218:	2001aff0 	.word	0x2001aff0
 800421c:	2001b780 	.word	0x2001b780
 8004220:	40007c00 	.word	0x40007c00
 8004224:	08028b30 	.word	0x08028b30

08004228 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8004228:	4a26      	ldr	r2, [pc, #152]	; (80042c4 <HAL_UART_RxCpltCallback+0x9c>)
 800422a:	6803      	ldr	r3, [r0, #0]
 800422c:	6812      	ldr	r2, [r2, #0]
 800422e:	4293      	cmp	r3, r2
 8004230:	d00a      	beq.n	8004248 <HAL_UART_RxCpltCallback+0x20>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004232:	4a25      	ldr	r2, [pc, #148]	; (80042c8 <HAL_UART_RxCpltCallback+0xa0>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d01e      	beq.n	8004276 <HAL_UART_RxCpltCallback+0x4e>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8004238:	4a24      	ldr	r2, [pc, #144]	; (80042cc <HAL_UART_RxCpltCallback+0xa4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d002      	beq.n	8004244 <HAL_UART_RxCpltCallback+0x1c>
		uart6_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 800423e:	4824      	ldr	r0, [pc, #144]	; (80042d0 <HAL_UART_RxCpltCallback+0xa8>)
 8004240:	f01e bfec 	b.w	802321c <puts>
		uart6_rxdone();
 8004244:	f000 bce0 	b.w	8004c08 <uart6_rxdone>
		data = rxdatabuf[0];
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <HAL_UART_RxCpltCallback+0xac>)
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_UART_RxCpltCallback+0xb0>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800424c:	b510      	push	{r4, lr}
		flag = 1;
 800424e:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004250:	7818      	ldrb	r0, [r3, #0]
		flag = 1;
 8004252:	4b22      	ldr	r3, [pc, #136]	; (80042dc <HAL_UART_RxCpltCallback+0xb4>)
		data = rxdatabuf[0];
 8004254:	7010      	strb	r0, [r2, #0]
		flag = 1;
 8004256:	601c      	str	r4, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8004258:	f7ff fec6 	bl	8003fe8 <IsPacketReady>
 800425c:	2800      	cmp	r0, #0
 800425e:	dd22      	ble.n	80042a6 <HAL_UART_RxCpltCallback+0x7e>
			switch (len) {
 8004260:	2854      	cmp	r0, #84	; 0x54
 8004262:	d00a      	beq.n	800427a <HAL_UART_RxCpltCallback+0x52>
 8004264:	2864      	cmp	r0, #100	; 0x64
 8004266:	d01f      	beq.n	80042a8 <HAL_UART_RxCpltCallback+0x80>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004268:	b2c2      	uxtb	r2, r0
 800426a:	491d      	ldr	r1, [pc, #116]	; (80042e0 <HAL_UART_RxCpltCallback+0xb8>)
 800426c:	481d      	ldr	r0, [pc, #116]	; (80042e4 <HAL_UART_RxCpltCallback+0xbc>)
}
 800426e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004272:	f7ff bda9 	b.w	8003dc8 <printPacket>
		uart5_rxdone();
 8004276:	f7fc bee1 	b.w	800103c <uart5_rxdone>
 800427a:	4b1b      	ldr	r3, [pc, #108]	; (80042e8 <HAL_UART_RxCpltCallback+0xc0>)
 800427c:	4a1b      	ldr	r2, [pc, #108]	; (80042ec <HAL_UART_RxCpltCallback+0xc4>)
 800427e:	f103 004e 	add.w	r0, r3, #78	; 0x4e
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8004282:	f813 1f01 	ldrb.w	r1, [r3, #1]!
				for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 8004286:	4283      	cmp	r3, r0
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8004288:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (unsigned int i = offset; i < sizeof(statuspkt.NavPvt); i++) {
 800428c:	d1f9      	bne.n	8004282 <HAL_UART_RxCpltCallback+0x5a>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 800428e:	f7ff fd75 	bl	8003d7c <calcepoch32>
 8004292:	4b17      	ldr	r3, [pc, #92]	; (80042f0 <HAL_UART_RxCpltCallback+0xc8>)
 8004294:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8004298:	7e5b      	ldrb	r3, [r3, #25]
 800429a:	f013 0301 	ands.w	r3, r3, #1
 800429e:	d00e      	beq.n	80042be <HAL_UART_RxCpltCallback+0x96>
					gpslocked = 1;
 80042a0:	4b14      	ldr	r3, [pc, #80]	; (80042f4 <HAL_UART_RxCpltCallback+0xcc>)
 80042a2:	2201      	movs	r2, #1
 80042a4:	701a      	strb	r2, [r3, #0]
}
 80042a6:	bd10      	pop	{r4, pc}
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 80042a8:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <HAL_UART_RxCpltCallback+0xd0>)
 80042aa:	4814      	ldr	r0, [pc, #80]	; (80042fc <HAL_UART_RxCpltCallback+0xd4>)
 80042ac:	f1a3 020a 	sub.w	r2, r3, #10
 80042b0:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 80042b4:	f01e ff16 	bl	80230e4 <iprintf>
				neoispresent = 1;
 80042b8:	4b11      	ldr	r3, [pc, #68]	; (8004300 <HAL_UART_RxCpltCallback+0xd8>)
 80042ba:	601c      	str	r4, [r3, #0]
}
 80042bc:	bd10      	pop	{r4, pc}
					gpslocked = 0;
 80042be:	4a0d      	ldr	r2, [pc, #52]	; (80042f4 <HAL_UART_RxCpltCallback+0xcc>)
 80042c0:	7013      	strb	r3, [r2, #0]
}
 80042c2:	bd10      	pop	{r4, pc}
 80042c4:	2001bcd0 	.word	0x2001bcd0
 80042c8:	40005000 	.word	0x40005000
 80042cc:	40011400 	.word	0x40011400
 80042d0:	08028ba4 	.word	0x08028ba4
 80042d4:	20001c84 	.word	0x20001c84
 80042d8:	2001bcd4 	.word	0x2001bcd4
 80042dc:	20001c74 	.word	0x20001c74
 80042e0:	2001bcd8 	.word	0x2001bcd8
 80042e4:	08028b88 	.word	0x08028b88
 80042e8:	2001bcdd 	.word	0x2001bcdd
 80042ec:	2001adc3 	.word	0x2001adc3
 80042f0:	2001adc0 	.word	0x2001adc0
 80042f4:	20001cd9 	.word	0x20001cd9
 80042f8:	2001bd06 	.word	0x2001bd06
 80042fc:	08028b5c 	.word	0x08028b5c
 8004300:	20001c80 	.word	0x20001c80

08004304 <HAL_UART_ErrorCallback>:
#define  HAL_UART_ERROR_FE               ((uint32_t)0x00000004U)    /*!< Frame error             */
#define  HAL_UART_ERROR_ORE              ((uint32_t)0x00000008U)    /*!< Overrun error           */
#define  HAL_UART_ERROR_DMA              ((uint32_t)0x00000010U)    /*!< DMA transfer error      */
#define  HAL_UART_ERROR_RTO              ((uint32_t)0x00000020U)    /*!< Receiver Timeout error  */
#endif
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004306:	4b26      	ldr	r3, [pc, #152]	; (80043a0 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004308:	2202      	movs	r2, #2
	__HAL_UART_CLEAR_NEFLAG(huart);
 800430a:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_OREFLAG(huart);
 800430c:	2608      	movs	r6, #8
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 800430e:	6819      	ldr	r1, [r3, #0]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004310:	2501      	movs	r5, #1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004312:	6803      	ldr	r3, [r0, #0]
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004314:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004316:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004318:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 800431a:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 800431c:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 800431e:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004320:	d02b      	beq.n	800437a <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8004322:	4920      	ldr	r1, [pc, #128]	; (80043a4 <HAL_UART_ErrorCallback+0xa0>)
 8004324:	428b      	cmp	r3, r1
 8004326:	d00f      	beq.n	8004348 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8004328:	491f      	ldr	r1, [pc, #124]	; (80043a8 <HAL_UART_ErrorCallback+0xa4>)
 800432a:	428b      	cmp	r3, r1
 800432c:	d000      	beq.n	8004330 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 800432e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8004330:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004334:	481d      	ldr	r0, [pc, #116]	; (80043ac <HAL_UART_ErrorCallback+0xa8>)
 8004336:	f01e fed5 	bl	80230e4 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	2202      	movs	r2, #2
 800433e:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8004340:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8004342:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004344:	621d      	str	r5, [r3, #32]
}
 8004346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8004348:	4a19      	ldr	r2, [pc, #100]	; (80043b0 <HAL_UART_ErrorCallback+0xac>)
 800434a:	6812      	ldr	r2, [r2, #0]
 800434c:	2a00      	cmp	r2, #0
 800434e:	d1ee      	bne.n	800432e <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8004350:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004354:	4a17      	ldr	r2, [pc, #92]	; (80043b4 <HAL_UART_ErrorCallback+0xb0>)
 8004356:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8004358:	69da      	ldr	r2, [r3, #28]
 800435a:	0710      	lsls	r0, r2, #28
 800435c:	d500      	bpl.n	8004360 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 800435e:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8004360:	4b10      	ldr	r3, [pc, #64]	; (80043a4 <HAL_UART_ErrorCallback+0xa0>)
 8004362:	69da      	ldr	r2, [r3, #28]
 8004364:	0751      	lsls	r1, r2, #29
 8004366:	d501      	bpl.n	800436c <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8004368:	2204      	movs	r2, #4
 800436a:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 800436c:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_UART_ErrorCallback+0xa0>)
 800436e:	69da      	ldr	r2, [r3, #28]
 8004370:	0792      	lsls	r2, r2, #30
 8004372:	d5dc      	bpl.n	800432e <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8004374:	2202      	movs	r2, #2
 8004376:	621a      	str	r2, [r3, #32]
}
 8004378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 800437a:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 800437e:	480e      	ldr	r0, [pc, #56]	; (80043b8 <HAL_UART_ErrorCallback+0xb4>)
 8004380:	f01e feb0 	bl	80230e4 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004384:	462a      	mov	r2, r5
 8004386:	490d      	ldr	r1, [pc, #52]	; (80043bc <HAL_UART_ErrorCallback+0xb8>)
 8004388:	480d      	ldr	r0, [pc, #52]	; (80043c0 <HAL_UART_ErrorCallback+0xbc>)
 800438a:	f00d f8e7 	bl	801155c <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 800438e:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8004392:	d0cc      	beq.n	800432e <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004394:	4601      	mov	r1, r0
 8004396:	480b      	ldr	r0, [pc, #44]	; (80043c4 <HAL_UART_ErrorCallback+0xc0>)
}
 8004398:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 800439c:	f01e bea2 	b.w	80230e4 <iprintf>
 80043a0:	2001bcd0 	.word	0x2001bcd0
 80043a4:	40005000 	.word	0x40005000
 80043a8:	40011400 	.word	0x40011400
 80043ac:	08028c08 	.word	0x08028c08
 80043b0:	200015b0 	.word	0x200015b0
 80043b4:	20001640 	.word	0x20001640
 80043b8:	08028bbc 	.word	0x08028bbc
 80043bc:	20001c84 	.word	0x20001c84
 80043c0:	2001bc44 	.word	0x2001bc44
 80043c4:	08028bdc 	.word	0x08028bdc

080043c8 <cycleleds>:
//////////////////////////////////////////////
//
// Initialise and test the LEDS by cycling them
//
//////////////////////////////////////////////
void cycleleds(void) {
 80043c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043ca:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80043cc:	4a1b      	ldr	r2, [pc, #108]	; (800443c <cycleleds+0x74>)
	LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin };

	int i;

	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80043ce:	4f1c      	ldr	r7, [pc, #112]	; (8004440 <cycleleds+0x78>)
 80043d0:	ac01      	add	r4, sp, #4
 80043d2:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 80043d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80043d8:	4623      	mov	r3, r4
 80043da:	4626      	mov	r6, r4
 80043dc:	c303      	stmia	r3!, {r0, r1}
 80043de:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80043e0:	f836 1b02 	ldrh.w	r1, [r6], #2
 80043e4:	2200      	movs	r2, #0
 80043e6:	4638      	mov	r0, r7
 80043e8:	f005 fe82 	bl	800a0f0 <HAL_GPIO_WritePin>
		osDelay(140);
 80043ec:	208c      	movs	r0, #140	; 0x8c
 80043ee:	f00f f919 	bl	8013624 <osDelay>
	for (i = 0; i < 5; i++) {
 80043f2:	42ae      	cmp	r6, r5
 80043f4:	d1f4      	bne.n	80043e0 <cycleleds+0x18>
	}
	osDelay(600);
 80043f6:	f44f 7016 	mov.w	r0, #600	; 0x258
 80043fa:	4626      	mov	r6, r4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 80043fc:	4f10      	ldr	r7, [pc, #64]	; (8004440 <cycleleds+0x78>)
	osDelay(600);
 80043fe:	f00f f911 	bl	8013624 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8004402:	f836 1b02 	ldrh.w	r1, [r6], #2
 8004406:	2201      	movs	r2, #1
 8004408:	4638      	mov	r0, r7
 800440a:	f005 fe71 	bl	800a0f0 <HAL_GPIO_WritePin>
		osDelay(140);
 800440e:	208c      	movs	r0, #140	; 0x8c
 8004410:	f00f f908 	bl	8013624 <osDelay>
	for (i = 0; i < 5; i++) {
 8004414:	42ae      	cmp	r6, r5
 8004416:	d1f4      	bne.n	8004402 <cycleleds+0x3a>
	}
	osDelay(500);
 8004418:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	for (i = 0; i < 5; i++) {
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800441c:	4e08      	ldr	r6, [pc, #32]	; (8004440 <cycleleds+0x78>)
	osDelay(500);
 800441e:	f00f f901 	bl	8013624 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8004422:	f834 1b02 	ldrh.w	r1, [r4], #2
 8004426:	2200      	movs	r2, #0
 8004428:	4630      	mov	r0, r6
 800442a:	f005 fe61 	bl	800a0f0 <HAL_GPIO_WritePin>
		osDelay(140);
 800442e:	208c      	movs	r0, #140	; 0x8c
 8004430:	f00f f8f8 	bl	8013624 <osDelay>
	for (i = 0; i < 5; i++) {
 8004434:	42ac      	cmp	r4, r5
 8004436:	d1f4      	bne.n	8004422 <cycleleds+0x5a>
	}
}
 8004438:	b005      	add	sp, #20
 800443a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800443c:	080273dc 	.word	0x080273dc
 8004440:	40020c00 	.word	0x40020c00

08004444 <setpgagain>:
//
// Set the Programmable Gain Amplifier GAIN
//
// added switch for 10dB boost for gain 0x1X (uses channel B input on PGA)
//////////////////////////////////////////////
void setpgagain(int gain) {		// this takes gain 0..9
 8004444:	b530      	push	{r4, r5, lr}
 8004446:	4604      	mov	r4, r0
 8004448:	b083      	sub	sp, #12
	uint16_t pgacmd[1];
	HAL_StatusTypeDef stat;

	osDelay(5);
 800444a:	2005      	movs	r0, #5
 800444c:	f00f f8ea 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004450:	2201      	movs	r2, #1
 8004452:	2104      	movs	r1, #4
 8004454:	482b      	ldr	r0, [pc, #172]	; (8004504 <setpgagain+0xc0>)
 8004456:	f005 fe4b 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 800445a:	2005      	movs	r0, #5
 800445c:	f00f f8e2 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8004460:	2200      	movs	r2, #0
 8004462:	2104      	movs	r1, #4
 8004464:	4827      	ldr	r0, [pc, #156]	; (8004504 <setpgagain+0xc0>)
 8004466:	f005 fe43 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 800446a:	2005      	movs	r0, #5
 800446c:	f00f f8da 	bl	8013624 <osDelay>

	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004470:	4a25      	ldr	r2, [pc, #148]	; (8004508 <setpgagain+0xc4>)
//	printf("setpgagain: gain=%d pgacmd[0]=0x%0x\n",gain,pgacmd[0]);

	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004472:	a901      	add	r1, sp, #4
 8004474:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8004478:	5d15      	ldrb	r5, [r2, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 800447a:	2201      	movs	r2, #1
 800447c:	4823      	ldr	r0, [pc, #140]	; (800450c <setpgagain+0xc8>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 800447e:	f445 4580 	orr.w	r5, r5, #16384	; 0x4000
 8004482:	f8ad 5004 	strh.w	r5, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8004486:	f008 fe27 	bl	800d0d8 <HAL_SPI_Transmit>
 800448a:	bb70      	cbnz	r0, 80044ea <setpgagain+0xa6>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
	}
	osDelay(5);
 800448c:	2005      	movs	r0, #5
	osDelay(5);
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	osDelay(5);

	if (gain > 7) {
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 800448e:	f244 1501 	movw	r5, #16641	; 0x4101
	osDelay(5);
 8004492:	f00f f8c7 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004496:	2201      	movs	r2, #1
 8004498:	2104      	movs	r1, #4
 800449a:	481a      	ldr	r0, [pc, #104]	; (8004504 <setpgagain+0xc0>)
 800449c:	f005 fe28 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 80044a0:	2005      	movs	r0, #5
 80044a2:	f00f f8bf 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80044a6:	2200      	movs	r2, #0
 80044a8:	2104      	movs	r1, #4
 80044aa:	4816      	ldr	r0, [pc, #88]	; (8004504 <setpgagain+0xc0>)
 80044ac:	f005 fe20 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 80044b0:	2005      	movs	r0, #5
 80044b2:	f00f f8b7 	bl	8013624 <osDelay>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80044b6:	2c08      	cmp	r4, #8
	} else {
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
	}
//	printf("setpgagain: channel pgacmd[0]=0x%0x\n",pgacmd[0]);

	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80044b8:	a901      	add	r1, sp, #4
 80044ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80044be:	bfb8      	it	lt
 80044c0:	f44f 4582 	movlt.w	r5, #16640	; 0x4100
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80044c4:	2201      	movs	r2, #1
 80044c6:	4811      	ldr	r0, [pc, #68]	; (800450c <setpgagain+0xc8>)
 80044c8:	f8ad 5004 	strh.w	r5, [sp, #4]
 80044cc:	f008 fe04 	bl	800d0d8 <HAL_SPI_Transmit>
 80044d0:	b990      	cbnz	r0, 80044f8 <setpgagain+0xb4>
		printf("setpgagain: SPI Error2: %d\n", stat);
	}

	osDelay(5);
 80044d2:	2005      	movs	r0, #5
 80044d4:	f00f f8a6 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80044d8:	2201      	movs	r2, #1
 80044da:	2104      	movs	r1, #4
 80044dc:	4809      	ldr	r0, [pc, #36]	; (8004504 <setpgagain+0xc0>)
 80044de:	f005 fe07 	bl	800a0f0 <HAL_GPIO_WritePin>

	pgagain = gain;		// update global gain
 80044e2:	4b0b      	ldr	r3, [pc, #44]	; (8004510 <setpgagain+0xcc>)
 80044e4:	801c      	strh	r4, [r3, #0]
}
 80044e6:	b003      	add	sp, #12
 80044e8:	bd30      	pop	{r4, r5, pc}
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 80044ea:	4601      	mov	r1, r0
 80044ec:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80044f0:	4808      	ldr	r0, [pc, #32]	; (8004514 <setpgagain+0xd0>)
 80044f2:	f01e fdf7 	bl	80230e4 <iprintf>
 80044f6:	e7c9      	b.n	800448c <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 80044f8:	4601      	mov	r1, r0
 80044fa:	4807      	ldr	r0, [pc, #28]	; (8004518 <setpgagain+0xd4>)
 80044fc:	f01e fdf2 	bl	80230e4 <iprintf>
 8004500:	e7e7      	b.n	80044d2 <setpgagain+0x8e>
 8004502:	bf00      	nop
 8004504:	40021800 	.word	0x40021800
 8004508:	08029098 	.word	0x08029098
 800450c:	2001af8c 	.word	0x2001af8c
 8004510:	20001cc4 	.word	0x20001cc4
 8004514:	08028c3c 	.word	0x08028c3c
 8004518:	08028c68 	.word	0x08028c68

0800451c <initpga>:
//////////////////////////////////////////////
//
// Initialise the Programmable Gain Amplifier MCP6S93
//
//////////////////////////////////////////////
int initpga() {
 800451c:	b510      	push	{r4, lr}
	HAL_StatusTypeDef stat;

	// init spi based single ended PG Amp
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800451e:	2201      	movs	r2, #1
int initpga() {
 8004520:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8004522:	2104      	movs	r1, #4
 8004524:	4826      	ldr	r0, [pc, #152]	; (80045c0 <initpga+0xa4>)
 8004526:	f005 fde3 	bl	800a0f0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 800452a:	2200      	movs	r2, #0
 800452c:	2104      	movs	r1, #4
 800452e:	4824      	ldr	r0, [pc, #144]	; (80045c0 <initpga+0xa4>)
 8004530:	f005 fdde 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(50);
 8004534:	2032      	movs	r0, #50	; 0x32
 8004536:	f00f f875 	bl	8013624 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800453a:	2201      	movs	r2, #1
 800453c:	2104      	movs	r1, #4
 800453e:	4820      	ldr	r0, [pc, #128]	; (80045c0 <initpga+0xa4>)
 8004540:	f005 fdd6 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 8004544:	2005      	movs	r0, #5
 8004546:	f00f f86d 	bl	8013624 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 800454a:	2400      	movs	r4, #0
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800454c:	2200      	movs	r2, #0
 800454e:	2104      	movs	r1, #4
 8004550:	481b      	ldr	r0, [pc, #108]	; (80045c0 <initpga+0xa4>)
 8004552:	f005 fdcd 	bl	800a0f0 <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8004556:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800455a:	2201      	movs	r2, #1
 800455c:	4669      	mov	r1, sp
 800455e:	4819      	ldr	r0, [pc, #100]	; (80045c4 <initpga+0xa8>)
 8004560:	f8ad 4000 	strh.w	r4, [sp]
 8004564:	f008 fdb8 	bl	800d0d8 <HAL_SPI_Transmit>
 8004568:	4604      	mov	r4, r0
 800456a:	bb08      	cbnz	r0, 80045b0 <initpga+0x94>
		printf("initpga: SPI error 2: %d\n\r", stat);
		return (1);
	}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 800456c:	2201      	movs	r2, #1
 800456e:	2104      	movs	r1, #4
 8004570:	4813      	ldr	r0, [pc, #76]	; (80045c0 <initpga+0xa4>)
 8004572:	f005 fdbd 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
 8004576:	2005      	movs	r0, #5
 8004578:	f00f f854 	bl	8013624 <osDelay>

	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800457c:	4622      	mov	r2, r4
 800457e:	2104      	movs	r1, #4
 8004580:	480f      	ldr	r0, [pc, #60]	; (80045c0 <initpga+0xa4>)
 8004582:	f005 fdb5 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(5);
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004586:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 800458a:	2005      	movs	r0, #5
 800458c:	f00f f84a 	bl	8013624 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 8004590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004594:	2201      	movs	r2, #1
 8004596:	a901      	add	r1, sp, #4
 8004598:	480a      	ldr	r0, [pc, #40]	; (80045c4 <initpga+0xa8>)
 800459a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800459e:	f008 fd9b 	bl	800d0d8 <HAL_SPI_Transmit>
 80045a2:	4604      	mov	r4, r0
 80045a4:	b920      	cbnz	r0, 80045b0 <initpga+0x94>
		printf("initpga: SPI error 2: %d\n\r", stat);
		return (1);
	}
	setpgagain(0);			// 0 == gain of 1x
 80045a6:	f7ff ff4d 	bl	8004444 <setpgagain>
	return (0);
 80045aa:	4620      	mov	r0, r4
}
 80045ac:	b002      	add	sp, #8
 80045ae:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 80045b0:	4621      	mov	r1, r4
 80045b2:	4805      	ldr	r0, [pc, #20]	; (80045c8 <initpga+0xac>)
 80045b4:	f01e fd96 	bl	80230e4 <iprintf>
		return (1);
 80045b8:	2001      	movs	r0, #1
}
 80045ba:	b002      	add	sp, #8
 80045bc:	bd10      	pop	{r4, pc}
 80045be:	bf00      	nop
 80045c0:	40021800 	.word	0x40021800
 80045c4:	2001af8c 	.word	0x2001af8c
 80045c8:	08028c84 	.word	0x08028c84

080045cc <bumppga>:

// bump the pga by one step (up or down)
int bumppga(int i) {
 80045cc:	b530      	push	{r4, r5, lr}
	volatile int gain;

	gain = pgagain;
 80045ce:	4d1f      	ldr	r5, [pc, #124]	; (800464c <bumppga+0x80>)
int bumppga(int i) {
 80045d0:	b083      	sub	sp, #12
 80045d2:	4604      	mov	r4, r0
	gain = pgagain;
 80045d4:	f9b5 1000 	ldrsh.w	r1, [r5]
	if (!((i == 1) || (i == -1))) {
//		printf("bumppga: invalid step %d\n", i);
	}
	if ((pgagain > 9) || (pgagain < 0)) {
 80045d8:	b28b      	uxth	r3, r1
	gain = pgagain;
 80045da:	9101      	str	r1, [sp, #4]
	if ((pgagain > 9) || (pgagain < 0)) {
 80045dc:	2b09      	cmp	r3, #9
 80045de:	d827      	bhi.n	8004630 <bumppga+0x64>
		printf("bumppga: invalid gain %d\n", pgagain);
		pgagain = 0;
	}
	if (pgagain < 0)		// safety
		pgagain = 0;
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 80045e0:	4b1b      	ldr	r3, [pc, #108]	; (8004650 <bumppga+0x84>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b0b      	cmp	r3, #11
 80045e6:	d00c      	beq.n	8004602 <bumppga+0x36>
	} else { // not SPLAT1
//	printf("bumppga: req: %d, gain=%d\n", i, gain);
		if (pgagain > 9) {
			pgagain = 9;			// reached max gain
		}
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 80045e8:	2c00      	cmp	r4, #0
 80045ea:	9b01      	ldr	r3, [sp, #4]
 80045ec:	da01      	bge.n	80045f2 <bumppga+0x26>
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	dd04      	ble.n	80045fc <bumppga+0x30>
 80045f2:	2c00      	cmp	r4, #0
 80045f4:	9b01      	ldr	r3, [sp, #4]
 80045f6:	dd12      	ble.n	800461e <bumppga+0x52>
 80045f8:	2b08      	cmp	r3, #8
 80045fa:	dd10      	ble.n	800461e <bumppga+0x52>
			gain = gain + i;
			setpgagain(gain);
			return (i);
		}
	}
	return (0);
 80045fc:	2000      	movs	r0, #0
}
 80045fe:	b003      	add	sp, #12
 8004600:	bd30      	pop	{r4, r5, pc}
		if (pgagain > 7) {
 8004602:	2907      	cmp	r1, #7
 8004604:	dd01      	ble.n	800460a <bumppga+0x3e>
			pgagain = 7;			// reached max gain
 8004606:	2307      	movs	r3, #7
 8004608:	802b      	strh	r3, [r5, #0]
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 7) && (i > 0)))) {	// there is room to change
 800460a:	2c00      	cmp	r4, #0
 800460c:	9b01      	ldr	r3, [sp, #4]
 800460e:	da01      	bge.n	8004614 <bumppga+0x48>
 8004610:	2b00      	cmp	r3, #0
 8004612:	ddf3      	ble.n	80045fc <bumppga+0x30>
 8004614:	9b01      	ldr	r3, [sp, #4]
 8004616:	2b06      	cmp	r3, #6
 8004618:	dd01      	ble.n	800461e <bumppga+0x52>
 800461a:	2c00      	cmp	r4, #0
 800461c:	dcee      	bgt.n	80045fc <bumppga+0x30>
			gain = gain + i;
 800461e:	9b01      	ldr	r3, [sp, #4]
 8004620:	4423      	add	r3, r4
 8004622:	9301      	str	r3, [sp, #4]
			setpgagain(gain);
 8004624:	9801      	ldr	r0, [sp, #4]
 8004626:	f7ff ff0d 	bl	8004444 <setpgagain>
			return (i);
 800462a:	4620      	mov	r0, r4
}
 800462c:	b003      	add	sp, #12
 800462e:	bd30      	pop	{r4, r5, pc}
		printf("bumppga: invalid gain %d\n", pgagain);
 8004630:	4808      	ldr	r0, [pc, #32]	; (8004654 <bumppga+0x88>)
 8004632:	f01e fd57 	bl	80230e4 <iprintf>
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <bumppga+0x84>)
		pgagain = 0;
 8004638:	2200      	movs	r2, #0
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 800463a:	681b      	ldr	r3, [r3, #0]
		pgagain = 0;
 800463c:	802a      	strh	r2, [r5, #0]
	if (pcb == SPLATBOARD1) {		/// this doesn't have the boost function
 800463e:	2b0b      	cmp	r3, #11
 8004640:	d0e3      	beq.n	800460a <bumppga+0x3e>
		if (!(((gain <= 0) && (i < 0)) || ((gain >= 9) && (i > 0)))) {	// there is room to change
 8004642:	2c00      	cmp	r4, #0
 8004644:	9b01      	ldr	r3, [sp, #4]
 8004646:	dbd2      	blt.n	80045ee <bumppga+0x22>
 8004648:	e7d3      	b.n	80045f2 <bumppga+0x26>
 800464a:	bf00      	nop
 800464c:	20001cc4 	.word	0x20001cc4
 8004650:	2001ae7c 	.word	0x2001ae7c
 8004654:	08028ca0 	.word	0x08028ca0

08004658 <initdualmux>:
//////////////////////////////////////////////
//
// Initialise the dual mux ADG729
//
//////////////////////////////////////////////
void initdualmux(void) {
 8004658:	b500      	push	{lr}
	//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 800465a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
void initdualmux(void) {
 800465e:	b083      	sub	sp, #12
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8004660:	2301      	movs	r3, #1
 8004662:	4a08      	ldr	r2, [pc, #32]	; (8004684 <initdualmux+0x2c>)
 8004664:	9000      	str	r0, [sp, #0]
 8004666:	2188      	movs	r1, #136	; 0x88
 8004668:	4807      	ldr	r0, [pc, #28]	; (8004688 <initdualmux+0x30>)
 800466a:	f006 f861 	bl	800a730 <HAL_I2C_Master_Transmit>
 800466e:	b910      	cbnz	r0, 8004676 <initdualmux+0x1e>
		printf("I2C HAL returned error 1\n\r");
	}
}
 8004670:	b003      	add	sp, #12
 8004672:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 8004676:	4805      	ldr	r0, [pc, #20]	; (800468c <initdualmux+0x34>)
}
 8004678:	b003      	add	sp, #12
 800467a:	f85d eb04 	ldr.w	lr, [sp], #4
		printf("I2C HAL returned error 1\n\r");
 800467e:	f01e bd31 	b.w	80230e4 <iprintf>
 8004682:	bf00      	nop
 8004684:	20000274 	.word	0x20000274
 8004688:	2001b18c 	.word	0x2001b18c
 800468c:	08028cbc 	.word	0x08028cbc

08004690 <getpressure115>:

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 8004690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	HAL_StatusTypeDef result;
	volatile double ffrac, p, t, n;
	uint16_t pr, tr;
	uint8_t testdat[8];

	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8004694:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004698:	2512      	movs	r5, #18
 800469a:	2302      	movs	r3, #2
 800469c:	21c0      	movs	r1, #192	; 0xc0
 800469e:	487c      	ldr	r0, [pc, #496]	; (8004890 <getpressure115+0x200>)
HAL_StatusTypeDef getpressure115(void) {
 80046a0:	ed2d 8b02 	vpush	{d8}
 80046a4:	b090      	sub	sp, #64	; 0x40
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 80046a6:	aa05      	add	r2, sp, #20
 80046a8:	9400      	str	r4, [sp, #0]
 80046aa:	f8ad 5014 	strh.w	r5, [sp, #20]
 80046ae:	f006 f83f 	bl	800a730 <HAL_I2C_Master_Transmit>
	// CMD Start Conversion
	if (result != HAL_OK) {
 80046b2:	4607      	mov	r7, r0
 80046b4:	2800      	cmp	r0, #0
 80046b6:	f040 80c9 	bne.w	800484c <getpressure115+0x1bc>
	}

	osDelay(4);		// conversion time max 3mS

	for (i = 0; i < 4; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80046ba:	46a0      	mov	r8, r4
	for (i = 0; i < 4; i++) {
 80046bc:	4604      	mov	r4, r0
	osDelay(4);		// conversion time max 3mS
 80046be:	2004      	movs	r0, #4
 80046c0:	ae0e      	add	r6, sp, #56	; 0x38
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80046c2:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8004890 <getpressure115+0x200>
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80046c6:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 80048bc <getpressure115+0x22c>
	osDelay(4);		// conversion time max 3mS
 80046ca:	f00e ffab 	bl	8013624 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80046ce:	2301      	movs	r3, #1
 80046d0:	9600      	str	r6, [sp, #0]
 80046d2:	b2a2      	uxth	r2, r4
 80046d4:	21c1      	movs	r1, #193	; 0xc1
 80046d6:	4648      	mov	r0, r9
 80046d8:	f8cd 8008 	str.w	r8, [sp, #8]
 80046dc:	9301      	str	r3, [sp, #4]
 80046de:	3601      	adds	r6, #1
 80046e0:	f006 f98a 	bl	800a9f8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80046e4:	4605      	mov	r5, r0
 80046e6:	2800      	cmp	r0, #0
 80046e8:	f040 80a2 	bne.w	8004830 <getpressure115+0x1a0>
	for (i = 0; i < 4; i++) {
 80046ec:	3401      	adds	r4, #1
 80046ee:	2c04      	cmp	r4, #4
 80046f0:	d1ed      	bne.n	80046ce <getpressure115+0x3e>
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
	tr = (data[2] * 256 + data[3]) >> 6;
 80046f2:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
//	printf("Comp: Press = %f\n", p);

	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
//	printf("kPA Press = %f\n", p);

	ffrac = modf(p, &n);
 80046f6:	a80c      	add	r0, sp, #48	; 0x30
	pr = (data[0] * 256 + data[1]) >> 6;
 80046f8:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38

				printf("myt 0x%x, %d, t=%f, myf=%f\n\r",myt,myt,t,myf);

			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80046fc:	eeb3 8b00 	vmov.f64	d8, #48	; 0x41800000  16.0
	tr = (data[2] * 256 + data[3]) >> 6;
 8004700:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
	pr = (data[0] * 256 + data[1]) >> 6;
 8004704:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
	tr = (data[2] * 256 + data[3]) >> 6;
 8004708:	eb03 2304 	add.w	r3, r3, r4, lsl #8
	tempfrac = tempfrac * 100;	// now 10,000
 800470c:	4d61      	ldr	r5, [pc, #388]	; (8004894 <getpressure115+0x204>)
	pr = (data[0] * 256 + data[1]) >> 6;
 800470e:	eb02 2201 	add.w	r2, r2, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004712:	4961      	ldr	r1, [pc, #388]	; (8004898 <getpressure115+0x208>)
	t = tr;
 8004714:	099c      	lsrs	r4, r3, #6
	pr = (data[0] * 256 + data[1]) >> 6;
 8004716:	0992      	lsrs	r2, r2, #6
	t = tr;
 8004718:	ee06 4a10 	vmov	s12, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 800471c:	119c      	asrs	r4, r3, #6
	p = pr;
 800471e:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004722:	4a5e      	ldr	r2, [pc, #376]	; (800489c <getpressure115+0x20c>)
	t = tr;
 8004724:	eeb8 6b46 	vcvt.f64.u32	d6, s12
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004728:	4b5d      	ldr	r3, [pc, #372]	; (80048a0 <getpressure115+0x210>)
	p = pr;
 800472a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
	t = tr;
 800472e:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
	p = pr;
 8004732:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004736:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800473a:	ed91 4b00 	vldr	d4, [r1]
 800473e:	ed92 5b00 	vldr	d5, [r2]
 8004742:	ed9d 1b08 	vldr	d1, [sp, #32]
 8004746:	ed93 7b00 	vldr	d7, [r3]
 800474a:	eea4 5b06 	vfma.f64	d5, d4, d6
 800474e:	4b55      	ldr	r3, [pc, #340]	; (80048a4 <getpressure115+0x214>)
 8004750:	ed9d 3b0a 	vldr	d3, [sp, #40]	; 0x28
 8004754:	ed93 2b00 	vldr	d2, [r3]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8004758:	ed9f 4b41 	vldr	d4, [pc, #260]	; 8004860 <getpressure115+0x1d0>
 800475c:	ed9f 6b42 	vldr	d6, [pc, #264]	; 8004868 <getpressure115+0x1d8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8004760:	eea5 7b01 	vfma.f64	d7, d5, d1
 8004764:	eea2 7b03 	vfma.f64	d7, d2, d3
 8004768:	ed8d 7b08 	vstr	d7, [sp, #32]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 800476c:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004770:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004774:	ed8d 6b08 	vstr	d6, [sp, #32]
	ffrac = modf(p, &n);
 8004778:	ed9d 0b08 	vldr	d0, [sp, #32]
 800477c:	f01e fd9e 	bl	80232bc <modf>
	t = tr * -0.1706 + 112.27; //C
 8004780:	ee07 4a90 	vmov	s15, r4
	tempfrac = tempfrac * 100;	// now 10,000
 8004784:	2264      	movs	r2, #100	; 0x64
	temperature = t;
 8004786:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <getpressure115+0x218>)
	t = tr * -0.1706 + 112.27; //C
 8004788:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800478c:	4847      	ldr	r0, [pc, #284]	; (80048ac <getpressure115+0x21c>)
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 800478e:	4c48      	ldr	r4, [pc, #288]	; (80048b0 <getpressure115+0x220>)
	pressure = (uint32_t) n;
 8004790:	4948      	ldr	r1, [pc, #288]	; (80048b4 <getpressure115+0x224>)
	t = tr * -0.1706 + 112.27; //C
 8004792:	ed9f 6b37 	vldr	d6, [pc, #220]	; 8004870 <getpressure115+0x1e0>
 8004796:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8004878 <getpressure115+0x1e8>
	ffrac = modf(p, &n);
 800479a:	ed8d 0b06 	vstr	d0, [sp, #24]
	pressure = (uint32_t) n;
 800479e:	ed9d 4b0c 	vldr	d4, [sp, #48]	; 0x30
	t = tr * -0.1706 + 112.27; //C
 80047a2:	eea7 5b06 	vfma.f64	d5, d7, d6
	pressure = (uint32_t) n;
 80047a6:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80047aa:	ed9d 3b06 	vldr	d3, [sp, #24]
 80047ae:	ed9f 0b34 	vldr	d0, [pc, #208]	; 8004880 <getpressure115+0x1f0>
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80047b2:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8004888 <getpressure115+0x1f8>
	pressure = (uint32_t) n;
 80047b6:	ed81 4a00 	vstr	s8, [r1]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80047ba:	ee23 3b00 	vmul.f64	d3, d3, d0
	t = tr * -0.1706 + 112.27; //C
 80047be:	ed8d 5b0a 	vstr	d5, [sp, #40]	; 0x28
	temperature = t;
 80047c2:	ed9d 2b0a 	vldr	d2, [sp, #40]	; 0x28
	tempfrac = (t - temperature) * 100;
 80047c6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80047ca:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
	temperature = t;
 80047ce:	eebc 2bc2 	vcvt.u32.f64	s4, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80047d2:	eebc 3bc3 	vcvt.u32.f64	s6, d3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80047d6:	ee26 6b08 	vmul.f64	d6, d6, d8
	temperature = t;
 80047da:	ed83 2a00 	vstr	s4, [r3]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80047de:	ed84 3a00 	vstr	s6, [r4]
	tempfrac = (t - temperature) * 100;
 80047e2:	eeb8 7b42 	vcvt.f64.u32	d7, s4
 80047e6:	ee35 5b47 	vsub.f64	d5, d5, d7
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80047ea:	feb8 6b46 	vrinta.f64	d6, d6
 80047ee:	eefc 6bc6 	vcvt.u32.f64	s13, d6
	tempfrac = (t - temperature) * 100;
 80047f2:	ee25 5b00 	vmul.f64	d5, d5, d0
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80047f6:	ee16 3a90 	vmov	r3, s13
 80047fa:	ed9d 7b08 	vldr	d7, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80047fe:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004802:	ee27 7b01 	vmul.f64	d7, d7, d1
	tempfrac = tempfrac * 100;	// now 10,000
 8004806:	ee15 6a10 	vmov	r6, s10
 800480a:	fb02 f206 	mul.w	r2, r2, r6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800480e:	feb8 7b47 	vrinta.f64	d7, d7
 8004812:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = tempfrac * 100;	// now 10,000
 8004816:	602a      	str	r2, [r5, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8004818:	ee17 2a10 	vmov	r2, s14
 800481c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8004820:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
}
 8004824:	4638      	mov	r0, r7
 8004826:	b010      	add	sp, #64	; 0x40
 8004828:	ecbd 8b02 	vpop	{d8}
 800482c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 8004830:	4650      	mov	r0, sl
 8004832:	4629      	mov	r1, r5
 8004834:	f01e fc56 	bl	80230e4 <iprintf>
			if (i == 3)
 8004838:	2c03      	cmp	r4, #3
 800483a:	f47f af57 	bne.w	80046ec <getpressure115+0x5c>
 800483e:	462f      	mov	r7, r5
}
 8004840:	4638      	mov	r0, r7
 8004842:	b010      	add	sp, #64	; 0x40
 8004844:	ecbd 8b02 	vpop	{d8}
 8004848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 800484c:	481a      	ldr	r0, [pc, #104]	; (80048b8 <getpressure115+0x228>)
 800484e:	f01e fc49 	bl	80230e4 <iprintf>
}
 8004852:	4638      	mov	r0, r7
 8004854:	b010      	add	sp, #64	; 0x40
 8004856:	ecbd 8b02 	vpop	{d8}
 800485a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800485e:	bf00      	nop
 8004860:	04411044 	.word	0x04411044
 8004864:	3fb04411 	.word	0x3fb04411
 8004868:	00000000 	.word	0x00000000
 800486c:	40490000 	.word	0x40490000
 8004870:	86594af5 	.word	0x86594af5
 8004874:	bfc5d638 	.word	0xbfc5d638
 8004878:	ae147ae1 	.word	0xae147ae1
 800487c:	405c1147 	.word	0x405c1147
 8004880:	00000000 	.word	0x00000000
 8004884:	40590000 	.word	0x40590000
 8004888:	00000000 	.word	0x00000000
 800488c:	40af4000 	.word	0x40af4000
 8004890:	2001b18c 	.word	0x2001b18c
 8004894:	2001bd58 	.word	0x2001bd58
 8004898:	20001cb0 	.word	0x20001cb0
 800489c:	20001c98 	.word	0x20001c98
 80048a0:	20001c90 	.word	0x20001c90
 80048a4:	20001ca0 	.word	0x20001ca0
 80048a8:	2001bd5c 	.word	0x2001bd5c
 80048ac:	2001adc0 	.word	0x2001adc0
 80048b0:	2001bd64 	.word	0x2001bd64
 80048b4:	2001bd60 	.word	0x2001bd60
 80048b8:	08028cd8 	.word	0x08028cd8
 80048bc:	08028cfc 	.word	0x08028cfc

080048c0 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 80048c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c4:	b086      	sub	sp, #24
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 80048c6:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80048ca:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80048ce:	2701      	movs	r7, #1
 80048d0:	f10d 0a18 	add.w	sl, sp, #24
		data[i] = 0x5A;
 80048d4:	ac04      	add	r4, sp, #16
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80048d6:	4e33      	ldr	r6, [pc, #204]	; (80049a4 <initpressure115+0xe4>)
 80048d8:	f1ca 090c 	rsb	r9, sl, #12
		data[i] = 0x5A;
 80048dc:	e9cd 3304 	strd	r3, r3, [sp, #16]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80048e0:	eb09 0204 	add.w	r2, r9, r4
 80048e4:	2301      	movs	r3, #1
 80048e6:	9400      	str	r4, [sp, #0]
 80048e8:	21c0      	movs	r1, #192	; 0xc0
 80048ea:	b292      	uxth	r2, r2
 80048ec:	4630      	mov	r0, r6
 80048ee:	441c      	add	r4, r3
 80048f0:	e9cd 7801 	strd	r7, r8, [sp, #4]
 80048f4:	f006 f880 	bl	800a9f8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80048f8:	4605      	mov	r5, r0
 80048fa:	2800      	cmp	r0, #0
 80048fc:	d142      	bne.n	8004984 <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 80048fe:	4554      	cmp	r4, sl
 8004900:	d1ee      	bne.n	80048e0 <initpressure115+0x20>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 8004902:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8004906:	2c5a      	cmp	r4, #90	; 0x5a
 8004908:	d044      	beq.n	8004994 <initpressure115+0xd4>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 800490a:	f89d 2012 	ldrb.w	r2, [sp, #18]
	b2co = (data[4] << 8) | data[5];
 800490e:	f89d 3014 	ldrb.w	r3, [sp, #20]
	b1co = (data[2] << 8) | data[3];
 8004912:	f89d 0013 	ldrb.w	r0, [sp, #19]
	b2co = (data[4] << 8) | data[5];
 8004916:	f89d 1015 	ldrb.w	r1, [sp, #21]
	c12co = (data[6] << 8) | data[7];
 800491a:	f89d 6016 	ldrb.w	r6, [sp, #22]
	b1co = (data[2] << 8) | data[3];
 800491e:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
	b2co = (data[4] << 8) | data[5];
 8004922:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
	c12co = (data[6] << 8) | data[7];
 8004926:	f89d 2017 	ldrb.w	r2, [sp, #23]
	a0co = (data[0] << 8) | data[1];
 800492a:	f89d 3011 	ldrb.w	r3, [sp, #17]
	b1co = (data[2] << 8) | data[3];
 800492e:	b200      	sxth	r0, r0
	c12co = (data[6] << 8) | data[7];
 8004930:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
	a0co = (data[0] << 8) | data[1];
 8004934:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
	b1 = (double) b1co / 8192;
 8004938:	ee04 0a10 	vmov	s8, r0
 800493c:	eeba 4be9 	vcvt.f64.s32	d4, d4, #13
	b2co = (data[4] << 8) | data[5];
 8004940:	b209      	sxth	r1, r1
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8004942:	f342 028d 	sbfx	r2, r2, #2, #14
	a0 = (double) a0co / 8;
 8004946:	b21b      	sxth	r3, r3
	b1 = (double) b1co / 8192;
 8004948:	4817      	ldr	r0, [pc, #92]	; (80049a8 <initpressure115+0xe8>)
	b2 = (double) b2co / 16384;
 800494a:	ee05 1a10 	vmov	s10, r1
 800494e:	eeba 5bc9 	vcvt.f64.s32	d5, d5, #14
 8004952:	4916      	ldr	r1, [pc, #88]	; (80049ac <initpressure115+0xec>)
	c12 /= (double) 4194304.0;
 8004954:	ee06 2a10 	vmov	s12, r2
 8004958:	eeba 6bc5 	vcvt.f64.s32	d6, d6, #22
 800495c:	4a14      	ldr	r2, [pc, #80]	; (80049b0 <initpressure115+0xf0>)
	a0 = (double) a0co / 8;
 800495e:	ee07 3a10 	vmov	s14, r3
 8004962:	eeba 7bee 	vcvt.f64.s32	d7, d7, #3
 8004966:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <initpressure115+0xf4>)
	b1 = (double) b1co / 8192;
 8004968:	ed80 4b00 	vstr	d4, [r0]
	b2 = (double) b2co / 16384;
 800496c:	ed81 5b00 	vstr	d5, [r1]
	c12 /= (double) 4194304.0;
 8004970:	ed82 6b00 	vstr	d6, [r2]
	a0 = (double) a0co / 8;
 8004974:	ed83 7b00 	vstr	d7, [r3]

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
 8004978:	f7ff fe8a 	bl	8004690 <getpressure115>
	return (HAL_OK);
}
 800497c:	4628      	mov	r0, r5
 800497e:	b006      	add	sp, #24
 8004980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 8004984:	4601      	mov	r1, r0
 8004986:	480c      	ldr	r0, [pc, #48]	; (80049b8 <initpressure115+0xf8>)
 8004988:	f01e fbac 	bl	80230e4 <iprintf>
}
 800498c:	4628      	mov	r0, r5
 800498e:	b006      	add	sp, #24
 8004990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 8004994:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 8004996:	4809      	ldr	r0, [pc, #36]	; (80049bc <initpressure115+0xfc>)
 8004998:	f01e fba4 	bl	80230e4 <iprintf>
}
 800499c:	4628      	mov	r0, r5
 800499e:	b006      	add	sp, #24
 80049a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049a4:	2001b18c 	.word	0x2001b18c
 80049a8:	20001c98 	.word	0x20001c98
 80049ac:	20001ca0 	.word	0x20001ca0
 80049b0:	20001cb0 	.word	0x20001cb0
 80049b4:	20001c90 	.word	0x20001c90
 80049b8:	08028d20 	.word	0x08028d20
 80049bc:	08028d50 	.word	0x08028d50

080049c0 <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 80049c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049c4:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 80049c6:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 80049c8:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80049ca:	4f47      	ldr	r7, [pc, #284]	; (8004ae8 <getpressure3115+0x128>)
 80049cc:	ae08      	add	r6, sp, #32
	data[0] = 0x55;
 80049ce:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 80049d2:	200a      	movs	r0, #10
 80049d4:	f00e fe26 	bl	8013624 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 80049d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80049dc:	2301      	movs	r3, #1
 80049de:	21c0      	movs	r1, #192	; 0xc0
 80049e0:	9202      	str	r2, [sp, #8]
 80049e2:	2200      	movs	r2, #0
 80049e4:	4841      	ldr	r0, [pc, #260]	; (8004aec <getpressure3115+0x12c>)
 80049e6:	9600      	str	r6, [sp, #0]
 80049e8:	9301      	str	r3, [sp, #4]
 80049ea:	f006 f805 	bl	800a9f8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 80049ee:	4604      	mov	r4, r0
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d167      	bne.n	8004ac4 <getpressure3115+0x104>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 80049f4:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 80049f8:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 80049fa:	071b      	lsls	r3, r3, #28
 80049fc:	d401      	bmi.n	8004a02 <getpressure3115+0x42>
	for (trys = 0; trys < 4; trys++) {
 80049fe:	2d04      	cmp	r5, #4
 8004a00:	d1e7      	bne.n	80049d2 <getpressure3115+0x12>
 8004a02:	2501      	movs	r5, #1
 8004a04:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004a06:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 8004a0a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8004aec <getpressure3115+0x12c>
 8004a0e:	46a8      	mov	r8, r5
 8004a10:	2301      	movs	r3, #1
 8004a12:	b2aa      	uxth	r2, r5
 8004a14:	21c0      	movs	r1, #192	; 0xc0
 8004a16:	4648      	mov	r0, r9
 8004a18:	f8cd a008 	str.w	sl, [sp, #8]
	for (i = 1; i < 6; i++) {
 8004a1c:	441d      	add	r5, r3
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8004a1e:	f8cd 8004 	str.w	r8, [sp, #4]
 8004a22:	9600      	str	r6, [sp, #0]
 8004a24:	f005 ffe8 	bl	800a9f8 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8004a28:	4604      	mov	r4, r0
 8004a2a:	2800      	cmp	r0, #0
 8004a2c:	d154      	bne.n	8004ad8 <getpressure3115+0x118>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 8004a2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 8004a32:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8004a34:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8004a38:	d1ea      	bne.n	8004a10 <getpressure3115+0x50>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a3a:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004a3e:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a42:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 8004a46:	f24f 4124 	movw	r1, #62500	; 0xf424
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a4a:	0212      	lsls	r2, r2, #8
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004a4c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8004a50:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a54:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a5c:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004a60:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
	pressure = ifn;
 8004a64:	4e22      	ldr	r6, [pc, #136]	; (8004af0 <getpressure3115+0x130>)
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a66:	432a      	orrs	r2, r5
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004a68:	4d22      	ldr	r5, [pc, #136]	; (8004af4 <getpressure3115+0x134>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004a6a:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8004a6c:	0912      	lsrs	r2, r2, #4
 8004a6e:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8004a70:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004a72:	9b05      	ldr	r3, [sp, #20]
 8004a74:	9a04      	ldr	r2, [sp, #16]
 8004a76:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
	ifn = p / 4000;		// kilopascals
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <getpressure3115+0x138>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 8004a7c:	f8c5 2088 	str.w	r2, [r5, #136]	; 0x88
	ifn = p / 4000;		// kilopascals
 8004a80:	9a04      	ldr	r2, [sp, #16]
 8004a82:	fba3 5202 	umull	r5, r2, r3, r2
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004a86:	4d1d      	ldr	r5, [pc, #116]	; (8004afc <getpressure3115+0x13c>)
	ifn = p / 4000;		// kilopascals
 8004a88:	0a12      	lsrs	r2, r2, #8
 8004a8a:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004a8c:	9a04      	ldr	r2, [sp, #16]
 8004a8e:	fba3 7302 	umull	r7, r3, r3, r2
	temperature = t >> 4;
 8004a92:	4f1b      	ldr	r7, [pc, #108]	; (8004b00 <getpressure3115+0x140>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 8004a94:	0a1b      	lsrs	r3, r3, #8
 8004a96:	fb00 2313 	mls	r3, r0, r3, r2
 8004a9a:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 8004a9c:	f8dd c018 	ldr.w	ip, [sp, #24]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004aa0:	9807      	ldr	r0, [sp, #28]
	temperature = t >> 4;
 8004aa2:	9b05      	ldr	r3, [sp, #20]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004aa4:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 8004aa6:	6028      	str	r0, [r5, #0]
	temperature = t >> 4;
 8004aa8:	091b      	lsrs	r3, r3, #4
	tempfrac = (t & 0x0F) * 625 * 100;
 8004aaa:	f002 020f 	and.w	r2, r2, #15
 8004aae:	4815      	ldr	r0, [pc, #84]	; (8004b04 <getpressure3115+0x144>)
	pressure = ifn;
 8004ab0:	f8c6 c000 	str.w	ip, [r6]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004ab4:	fb01 f102 	mul.w	r1, r1, r2
	temperature = t >> 4;
 8004ab8:	603b      	str	r3, [r7, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 8004aba:	6001      	str	r1, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 8004abc:	4620      	mov	r0, r4
 8004abe:	b00c      	add	sp, #48	; 0x30
 8004ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 8004ac4:	4638      	mov	r0, r7
 8004ac6:	4621      	mov	r1, r4
 8004ac8:	f01e fb0c 	bl	80230e4 <iprintf>
			if (trys == 3)
 8004acc:	2d03      	cmp	r5, #3
 8004ace:	d191      	bne.n	80049f4 <getpressure3115+0x34>
}
 8004ad0:	4620      	mov	r0, r4
 8004ad2:	b00c      	add	sp, #48	; 0x30
 8004ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8004ad8:	4601      	mov	r1, r0
 8004ada:	480b      	ldr	r0, [pc, #44]	; (8004b08 <getpressure3115+0x148>)
 8004adc:	f01e fb02 	bl	80230e4 <iprintf>
}
 8004ae0:	4620      	mov	r0, r4
 8004ae2:	b00c      	add	sp, #48	; 0x30
 8004ae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ae8:	08028d78 	.word	0x08028d78
 8004aec:	2001b18c 	.word	0x2001b18c
 8004af0:	2001bd60 	.word	0x2001bd60
 8004af4:	2001adc0 	.word	0x2001adc0
 8004af8:	10624dd3 	.word	0x10624dd3
 8004afc:	2001bd64 	.word	0x2001bd64
 8004b00:	2001bd5c 	.word	0x2001bd5c
 8004b04:	2001bd58 	.word	0x2001bd58
 8004b08:	08028da0 	.word	0x08028da0

08004b0c <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8004b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b0e:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8004b10:	2501      	movs	r5, #1
 8004b12:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8004b16:	220c      	movs	r2, #12
 8004b18:	a808      	add	r0, sp, #32
 8004b1a:	462b      	mov	r3, r5
 8004b1c:	21c0      	movs	r1, #192	; 0xc0
 8004b1e:	9602      	str	r6, [sp, #8]
 8004b20:	9000      	str	r0, [sp, #0]
 8004b22:	9501      	str	r5, [sp, #4]
 8004b24:	4830      	ldr	r0, [pc, #192]	; (8004be8 <initpressure3115+0xdc>)
 8004b26:	f005 ff67 	bl	800a9f8 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004b2a:	2800      	cmp	r0, #0
 8004b2c:	d145      	bne.n	8004bba <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8004b2e:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8004b32:	2bc4      	cmp	r3, #196	; 0xc4
 8004b34:	d003      	beq.n	8004b3e <initpressure3115+0x32>
		return (HAL_ERROR);
 8004b36:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8004b38:	4620      	mov	r0, r4
 8004b3a:	b00b      	add	sp, #44	; 0x2c
 8004b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8004b3e:	4f2b      	ldr	r7, [pc, #172]	; (8004bec <initpressure3115+0xe0>)
 8004b40:	2302      	movs	r3, #2
 8004b42:	aa05      	add	r2, sp, #20
 8004b44:	21c0      	movs	r1, #192	; 0xc0
 8004b46:	89bc      	ldrh	r4, [r7, #12]
 8004b48:	4827      	ldr	r0, [pc, #156]	; (8004be8 <initpressure3115+0xdc>)
 8004b4a:	9600      	str	r6, [sp, #0]
 8004b4c:	f8ad 4014 	strh.w	r4, [sp, #20]
 8004b50:	f005 fdee 	bl	800a730 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004b54:	4604      	mov	r4, r0
 8004b56:	2800      	cmp	r0, #0
 8004b58:	d136      	bne.n	8004bc8 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8004b5a:	8a3c      	ldrh	r4, [r7, #16]
 8004b5c:	2302      	movs	r3, #2
 8004b5e:	aa06      	add	r2, sp, #24
 8004b60:	21c0      	movs	r1, #192	; 0xc0
 8004b62:	4821      	ldr	r0, [pc, #132]	; (8004be8 <initpressure3115+0xdc>)
 8004b64:	9600      	str	r6, [sp, #0]
 8004b66:	f8ad 4018 	strh.w	r4, [sp, #24]
 8004b6a:	f005 fde1 	bl	800a730 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004b6e:	4604      	mov	r4, r0
 8004b70:	bb70      	cbnz	r0, 8004bd0 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 8004b72:	8abc      	ldrh	r4, [r7, #20]
 8004b74:	2302      	movs	r3, #2
 8004b76:	aa07      	add	r2, sp, #28
 8004b78:	21c0      	movs	r1, #192	; 0xc0
 8004b7a:	481b      	ldr	r0, [pc, #108]	; (8004be8 <initpressure3115+0xdc>)
 8004b7c:	9600      	str	r6, [sp, #0]
 8004b7e:	f8ad 401c 	strh.w	r4, [sp, #28]
 8004b82:	f005 fdd5 	bl	800a730 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 8004b86:	4604      	mov	r4, r0
 8004b88:	bb50      	cbnz	r0, 8004be0 <initpressure3115+0xd4>
	osDelay(100);	// allow chip to start up sampling
 8004b8a:	2064      	movs	r0, #100	; 0x64
 8004b8c:	f00e fd4a 	bl	8013624 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 8004b90:	aa08      	add	r2, sp, #32
 8004b92:	462b      	mov	r3, r5
 8004b94:	21c0      	movs	r1, #192	; 0xc0
 8004b96:	9200      	str	r2, [sp, #0]
 8004b98:	462a      	mov	r2, r5
 8004b9a:	4813      	ldr	r0, [pc, #76]	; (8004be8 <initpressure3115+0xdc>)
 8004b9c:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8004ba0:	f005 ff2a 	bl	800a9f8 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8004ba4:	4604      	mov	r4, r0
 8004ba6:	b9b8      	cbnz	r0, 8004bd8 <initpressure3115+0xcc>
	result = getpressure3115();
 8004ba8:	f7ff ff0a 	bl	80049c0 <getpressure3115>
	if (result != HAL_OK) {
 8004bac:	4604      	mov	r4, r0
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0c2      	beq.n	8004b38 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 8004bb2:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <initpressure3115+0xe4>)
 8004bb4:	f01e fa96 	bl	80230e4 <iprintf>
 8004bb8:	e7be      	b.n	8004b38 <initpressure3115+0x2c>
 8004bba:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 8004bbc:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <initpressure3115+0xe8>)
 8004bbe:	f01e fa91 	bl	80230e4 <iprintf>
}
 8004bc2:	4620      	mov	r0, r4
 8004bc4:	b00b      	add	sp, #44	; 0x2c
 8004bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8004bc8:	480b      	ldr	r0, [pc, #44]	; (8004bf8 <initpressure3115+0xec>)
 8004bca:	f01e fa8b 	bl	80230e4 <iprintf>
		return (result);
 8004bce:	e7b3      	b.n	8004b38 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8004bd0:	480a      	ldr	r0, [pc, #40]	; (8004bfc <initpressure3115+0xf0>)
 8004bd2:	f01e fa87 	bl	80230e4 <iprintf>
		return (result);
 8004bd6:	e7af      	b.n	8004b38 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8004bd8:	4809      	ldr	r0, [pc, #36]	; (8004c00 <initpressure3115+0xf4>)
 8004bda:	f01e fa83 	bl	80230e4 <iprintf>
		return (result);
 8004bde:	e7ab      	b.n	8004b38 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8004be0:	4808      	ldr	r0, [pc, #32]	; (8004c04 <initpressure3115+0xf8>)
 8004be2:	f01e fa7f 	bl	80230e4 <iprintf>
		return (result);
 8004be6:	e7a7      	b.n	8004b38 <initpressure3115+0x2c>
 8004be8:	2001b18c 	.word	0x2001b18c
 8004bec:	080273dc 	.word	0x080273dc
 8004bf0:	08028e38 	.word	0x08028e38
 8004bf4:	08028cbc 	.word	0x08028cbc
 8004bf8:	08028dc8 	.word	0x08028dc8
 8004bfc:	08028de4 	.word	0x08028de4
 8004c00:	08028e1c 	.word	0x08028e1c
 8004c04:	08028e00 	.word	0x08028e00

08004c08 <uart6_rxdone>:
	}
	osDelay(200);	// wait for prnt to finish
	printf("\n");
}

uart6_rxdone() {
 8004c08:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef stat;
	int i;

	i = esprxindex;
 8004c0a:	4c0b      	ldr	r4, [pc, #44]	; (8004c38 <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 8004c0c:	4b0b      	ldr	r3, [pc, #44]	; (8004c3c <uart6_rxdone+0x34>)
	i = esprxindex;
 8004c0e:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 8004c10:	7819      	ldrb	r1, [r3, #0]
 8004c12:	1c6b      	adds	r3, r5, #1
 8004c14:	4a0a      	ldr	r2, [pc, #40]	; (8004c40 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 8004c16:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 8004c18:	5551      	strb	r1, [r2, r5]
 8004c1a:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 8004c1c:	d902      	bls.n	8004c24 <uart6_rxdone+0x1c>
		esprxindex = 0;
 8004c1e:	2200      	movs	r2, #0
 8004c20:	4613      	mov	r3, r2
 8004c22:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8004c24:	4a07      	ldr	r2, [pc, #28]	; (8004c44 <uart6_rxdone+0x3c>)
 8004c26:	6812      	ldr	r2, [r2, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d000      	beq.n	8004c2e <uart6_rxdone+0x26>
		printf("*** ESP RX overrun......\n");
		esprxindex = i;
	}
}
 8004c2c:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8004c2e:	4806      	ldr	r0, [pc, #24]	; (8004c48 <uart6_rxdone+0x40>)
 8004c30:	f01e faf4 	bl	802321c <puts>
		esprxindex = i;
 8004c34:	6025      	str	r5, [r4, #0]
}
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	20001cbc 	.word	0x20001cbc
 8004c3c:	2001bd68 	.word	0x2001bd68
 8004c40:	2001bd6c 	.word	0x2001bd6c
 8004c44:	20001cb8 	.word	0x20001cb8
 8004c48:	08028e58 	.word	0x08028e58

08004c4c <esp_cmd>:

void esp_cmd(unsigned char *buffer) {
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	4601      	mov	r1, r0
	unsigned char txbuf[16];\
	volatile int len;
	HAL_StatusTypeDef stat;

	strcpy(txbuf, buffer);
 8004c52:	ac02      	add	r4, sp, #8
 8004c54:	4620      	mov	r0, r4
 8004c56:	f01e fc4e 	bl	80234f6 <stpcpy>
	strcat(txbuf, "\r\n");
 8004c5a:	4a0e      	ldr	r2, [pc, #56]	; (8004c94 <esp_cmd+0x48>)
	strcpy(txbuf, buffer);
 8004c5c:	4603      	mov	r3, r0
	len = strlen(txbuf);
	printf("Sending ESP: %s\n", txbuf);
 8004c5e:	4621      	mov	r1, r4
	strcat(txbuf, "\r\n");
 8004c60:	8816      	ldrh	r6, [r2, #0]
 8004c62:	7895      	ldrb	r5, [r2, #2]
 8004c64:	1b1a      	subs	r2, r3, r4
	printf("Sending ESP: %s\n", txbuf);
 8004c66:	480c      	ldr	r0, [pc, #48]	; (8004c98 <esp_cmd+0x4c>)
	len = strlen(txbuf);
 8004c68:	3202      	adds	r2, #2
	strcat(txbuf, "\r\n");
 8004c6a:	801e      	strh	r6, [r3, #0]
 8004c6c:	709d      	strb	r5, [r3, #2]
	len = strlen(txbuf);
 8004c6e:	9201      	str	r2, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8004c70:	f01e fa38 	bl	80230e4 <iprintf>

	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8004c74:	9a01      	ldr	r2, [sp, #4]
 8004c76:	4621      	mov	r1, r4
 8004c78:	4808      	ldr	r0, [pc, #32]	; (8004c9c <esp_cmd+0x50>)
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	f00b fb6c 	bl	8010358 <HAL_UART_Transmit_DMA>
//	stat = HAL_UART_Transmit(&huart6, &txbuf[0], len, 1000);	// send the command
	if (stat != HAL_OK) {
 8004c80:	b908      	cbnz	r0, 8004c86 <esp_cmd+0x3a>
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
	}
}
 8004c82:	b006      	add	sp, #24
 8004c84:	bd70      	pop	{r4, r5, r6, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8004c86:	4601      	mov	r1, r0
 8004c88:	4805      	ldr	r0, [pc, #20]	; (8004ca0 <esp_cmd+0x54>)
 8004c8a:	f01e fa2b 	bl	80230e4 <iprintf>
}
 8004c8e:	b006      	add	sp, #24
 8004c90:	bd70      	pop	{r4, r5, r6, pc}
 8004c92:	bf00      	nop
 8004c94:	08028a34 	.word	0x08028a34
 8004c98:	08028e74 	.word	0x08028e74
 8004c9c:	2001b804 	.word	0x2001b804
 8004ca0:	08028e88 	.word	0x08028e88

08004ca4 <printfromesp>:
		printfromesp();		// try to empty anything in the buffer
		osDelay(1);
	}
}

printfromesp() {
 8004ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca6:	4c0a      	ldr	r4, [pc, #40]	; (8004cd0 <printfromesp+0x2c>)
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 8004ca8:	2700      	movs	r7, #0
 8004caa:	4d0a      	ldr	r5, [pc, #40]	; (8004cd4 <printfromesp+0x30>)
 8004cac:	6823      	ldr	r3, [r4, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8004cae:	4e0a      	ldr	r6, [pc, #40]	; (8004cd8 <printfromesp+0x34>)
	while (espoutindex != esprxindex) {
 8004cb0:	e006      	b.n	8004cc0 <printfromesp+0x1c>
		putchar(esprxdatabuf[espoutindex++]);
 8004cb2:	5cf0      	ldrb	r0, [r6, r3]
 8004cb4:	6021      	str	r1, [r4, #0]
 8004cb6:	f01e fa2d 	bl	8023114 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	2b60      	cmp	r3, #96	; 0x60
 8004cbe:	d804      	bhi.n	8004cca <printfromesp+0x26>
	while (espoutindex != esprxindex) {
 8004cc0:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8004cc2:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d1f4      	bne.n	8004cb2 <printfromesp+0xe>
	}
}
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			espoutindex = 0;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6027      	str	r7, [r4, #0]
 8004cce:	e7f7      	b.n	8004cc0 <printfromesp+0x1c>
 8004cd0:	20001cb8 	.word	0x20001cb8
 8004cd4:	20001cbc 	.word	0x20001cbc
 8004cd8:	2001bd6c 	.word	0x2001bd6c

08004cdc <init_esp>:
void init_esp() {
 8004cdc:	b510      	push	{r4, lr}
	printf("init_esp32_c3_13\n");
 8004cde:	4816      	ldr	r0, [pc, #88]	; (8004d38 <init_esp+0x5c>)
 8004ce0:	f01e fa9c 	bl	802321c <puts>
	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4915      	ldr	r1, [pc, #84]	; (8004d3c <init_esp+0x60>)
 8004ce8:	4815      	ldr	r0, [pc, #84]	; (8004d40 <init_esp+0x64>)
 8004cea:	f00c fc37 	bl	801155c <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8004cee:	b9f8      	cbnz	r0, 8004d30 <init_esp+0x54>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cf6:	4813      	ldr	r0, [pc, #76]	; (8004d44 <init_esp+0x68>)
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8004cf8:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8004cfc:	f005 f9f8 	bl	800a0f0 <HAL_GPIO_WritePin>
	osDelay(20);
 8004d00:	2014      	movs	r0, #20
 8004d02:	f00e fc8f 	bl	8013624 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8004d06:	2201      	movs	r2, #1
 8004d08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <init_esp+0x68>)
 8004d0e:	f005 f9ef 	bl	800a0f0 <HAL_GPIO_WritePin>
		printfromesp();		// try to empty anything in the buffer
 8004d12:	f7ff ffc7 	bl	8004ca4 <printfromesp>
		osDelay(1);
 8004d16:	2001      	movs	r0, #1
 8004d18:	f00e fc84 	bl	8013624 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 8004d1c:	3c01      	subs	r4, #1
 8004d1e:	d1f8      	bne.n	8004d12 <init_esp+0x36>
	osDelay(200);	// wait for prnt to finish
 8004d20:	20c8      	movs	r0, #200	; 0xc8
 8004d22:	f00e fc7f 	bl	8013624 <osDelay>
	printf("\n");
 8004d26:	200a      	movs	r0, #10
}
 8004d28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("\n");
 8004d2c:	f01e b9f2 	b.w	8023114 <putchar>
		printf("init_esp: huart6 error\n");
 8004d30:	4805      	ldr	r0, [pc, #20]	; (8004d48 <init_esp+0x6c>)
 8004d32:	f01e fa73 	bl	802321c <puts>
 8004d36:	e7db      	b.n	8004cf0 <init_esp+0x14>
 8004d38:	08028ea8 	.word	0x08028ea8
 8004d3c:	2001bd68 	.word	0x2001bd68
 8004d40:	2001b804 	.word	0x2001b804
 8004d44:	40021000 	.word	0x40021000
 8004d48:	08028ebc 	.word	0x08028ebc

08004d4c <test_esp>:
void test_esp() {
 8004d4c:	b510      	push	{r4, lr}
	printf("Testing if ESP responds to command:-\n");
 8004d4e:	4809      	ldr	r0, [pc, #36]	; (8004d74 <test_esp+0x28>)
	esp_cmd(getstatus);	// send the command
 8004d50:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8004d54:	f01e fa62 	bl	802321c <puts>
	osDelay(200);
 8004d58:	20c8      	movs	r0, #200	; 0xc8
 8004d5a:	f00e fc63 	bl	8013624 <osDelay>
	esp_cmd(getstatus);	// send the command
 8004d5e:	4806      	ldr	r0, [pc, #24]	; (8004d78 <test_esp+0x2c>)
 8004d60:	f7ff ff74 	bl	8004c4c <esp_cmd>
		printfromesp();		// try to empty anything in the buffer
 8004d64:	f7ff ff9e 	bl	8004ca4 <printfromesp>
		osDelay(1);
 8004d68:	2001      	movs	r0, #1
 8004d6a:	f00e fc5b 	bl	8013624 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8004d6e:	3c01      	subs	r4, #1
 8004d70:	d1f8      	bne.n	8004d64 <test_esp+0x18>
}
 8004d72:	bd10      	pop	{r4, pc}
 8004d74:	08028ed4 	.word	0x08028ed4
 8004d78:	20000268 	.word	0x20000268

08004d7c <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 8004d7c:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 8004d7e:	4818      	ldr	r0, [pc, #96]	; (8004de0 <init_ds2485+0x64>)
void init_ds2485(void) {
 8004d80:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8004d82:	f01e fa4b 	bl	802321c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8004d8a:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
	data[2] = 0x01;		// for man id
 8004d8e:	2401      	movs	r4, #1
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004d90:	9300      	str	r3, [sp, #0]
 8004d92:	aa02      	add	r2, sp, #8
	data[0] = 0xAA;		// Read status cmd
 8004d94:	f8ad 0008 	strh.w	r0, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004d98:	2303      	movs	r3, #3
 8004d9a:	2180      	movs	r1, #128	; 0x80
 8004d9c:	4811      	ldr	r0, [pc, #68]	; (8004de4 <init_ds2485+0x68>)
	data[2] = 0x01;		// for man id
 8004d9e:	f88d 400a 	strb.w	r4, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8004da2:	f005 fcc5 	bl	800a730 <HAL_I2C_Master_Transmit>
 8004da6:	b9a8      	cbnz	r0, 8004dd4 <init_ds2485+0x58>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8004da8:	200a      	movs	r0, #10
	for (i = 0; i < 1; i++) {
		data[i] = 0xA5 + i;
 8004daa:	24a5      	movs	r4, #165	; 0xa5
	osDelay(10);
 8004dac:	f00e fc3a 	bl	8013624 <osDelay>
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8004db0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004db4:	2181      	movs	r1, #129	; 0x81
 8004db6:	aa02      	add	r2, sp, #8
 8004db8:	9300      	str	r3, [sp, #0]
 8004dba:	2304      	movs	r3, #4
 8004dbc:	4809      	ldr	r0, [pc, #36]	; (8004de4 <init_ds2485+0x68>)
		data[i] = 0xA5 + i;
 8004dbe:	f88d 4008 	strb.w	r4, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8004dc2:	f005 fd67 	bl	800a894 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8004dc6:	4601      	mov	r1, r0
 8004dc8:	b110      	cbz	r0, 8004dd0 <init_ds2485+0x54>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8004dca:	4807      	ldr	r0, [pc, #28]	; (8004de8 <init_ds2485+0x6c>)
 8004dcc:	f01e f98a 	bl	80230e4 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8004dd0:	b006      	add	sp, #24
 8004dd2:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8004dd4:	4601      	mov	r1, r0
 8004dd6:	4804      	ldr	r0, [pc, #16]	; (8004de8 <init_ds2485+0x6c>)
 8004dd8:	f01e f984 	bl	80230e4 <iprintf>
 8004ddc:	e7e4      	b.n	8004da8 <init_ds2485+0x2c>
 8004dde:	bf00      	nop
 8004de0:	08028efc 	.word	0x08028efc
 8004de4:	2001b18c 	.word	0x2001b18c
 8004de8:	08028f08 	.word	0x08028f08

08004dec <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8004dec:	b570      	push	{r4, r5, r6, lr}
 8004dee:	4604      	mov	r4, r0
 8004df0:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8004df2:	4820      	ldr	r0, [pc, #128]	; (8004e74 <readp_ds2485+0x88>)

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
	data[2] = 0x00;		// cmd: for protection status
 8004df4:	2500      	movs	r5, #0
	printf("read protection ds2485\n");
 8004df6:	f01e fa11 	bl	802321c <puts>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8004dfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8004dfe:	f44f 70d5 	mov.w	r0, #426	; 0x1aa
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8004e02:	aa03      	add	r2, sp, #12
 8004e04:	9300      	str	r3, [sp, #0]
 8004e06:	2180      	movs	r1, #128	; 0x80
	data[0] = 0xAA;		// Read status cmd
 8004e08:	f8ad 000c 	strh.w	r0, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	481a      	ldr	r0, [pc, #104]	; (8004e78 <readp_ds2485+0x8c>)
	data[2] = 0x00;		// cmd: for protection status
 8004e10:	f88d 500e 	strb.w	r5, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8004e14:	f005 fc8c 	bl	800a730 <HAL_I2C_Master_Transmit>
 8004e18:	bb18      	cbnz	r0, 8004e62 <readp_ds2485+0x76>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 8004e1a:	201e      	movs	r0, #30

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
 8004e1c:	255a      	movs	r5, #90	; 0x5a
	osDelay(30);
 8004e1e:	f00e fc01 	bl	8013624 <osDelay>
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8004e22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e26:	b2a3      	uxth	r3, r4
 8004e28:	aa03      	add	r2, sp, #12
 8004e2a:	9100      	str	r1, [sp, #0]
 8004e2c:	2181      	movs	r1, #129	; 0x81
 8004e2e:	4812      	ldr	r0, [pc, #72]	; (8004e78 <readp_ds2485+0x8c>)
		data[i] = 0x5A + i;
 8004e30:	f88d 500c 	strb.w	r5, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8004e34:	f005 fd2e 	bl	800a894 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 8004e38:	b9b8      	cbnz	r0, 8004e6a <readp_ds2485+0x7e>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 8004e3a:	4810      	ldr	r0, [pc, #64]	; (8004e7c <readp_ds2485+0x90>)
 8004e3c:	f10d 040b 	add.w	r4, sp, #11
 8004e40:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8004e44:	4d0e      	ldr	r5, [pc, #56]	; (8004e80 <readp_ds2485+0x94>)
	printf("init_ds2485: read status protection= ");
 8004e46:	f01e f94d 	bl	80230e4 <iprintf>
		printf("0x%02x ", data[i]);
 8004e4a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f01e f948 	bl	80230e4 <iprintf>
	for (i = 0; i < 8; i++) {
 8004e54:	42b4      	cmp	r4, r6
 8004e56:	d1f8      	bne.n	8004e4a <readp_ds2485+0x5e>
	}
	printf("\n");
 8004e58:	200a      	movs	r0, #10
 8004e5a:	f01e f95b 	bl	8023114 <putchar>
}
 8004e5e:	b006      	add	sp, #24
 8004e60:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 8004e62:	4808      	ldr	r0, [pc, #32]	; (8004e84 <readp_ds2485+0x98>)
 8004e64:	f01e f93e 	bl	80230e4 <iprintf>
 8004e68:	e7d7      	b.n	8004e1a <readp_ds2485+0x2e>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 8004e6a:	4601      	mov	r1, r0
 8004e6c:	4806      	ldr	r0, [pc, #24]	; (8004e88 <readp_ds2485+0x9c>)
 8004e6e:	f01e f939 	bl	80230e4 <iprintf>
 8004e72:	e7e2      	b.n	8004e3a <readp_ds2485+0x4e>
 8004e74:	08028f2c 	.word	0x08028f2c
 8004e78:	2001b18c 	.word	0x2001b18c
 8004e7c:	08028f8c 	.word	0x08028f8c
 8004e80:	08028fb4 	.word	0x08028fb4
 8004e84:	08028f44 	.word	0x08028f44
 8004e88:	08028f68 	.word	0x08028f68

08004e8c <test_ds2485>:

void test_ds2485() {
 8004e8c:	b508      	push	{r3, lr}
	int d;

	init_ds2485();
 8004e8e:	f7ff ff75 	bl	8004d7c <init_ds2485>
	osDelay(80);
 8004e92:	2050      	movs	r0, #80	; 0x50
 8004e94:	f00e fbc6 	bl	8013624 <osDelay>
	readp_ds2485(8);
 8004e98:	2008      	movs	r0, #8
}
 8004e9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	readp_ds2485(8);
 8004e9e:	f7ff bfa5 	b.w	8004dec <readp_ds2485>
 8004ea2:	bf00      	nop

08004ea4 <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8004ea4:	b538      	push	{r3, r4, r5, lr}
	int i, j, k;

	cycleleds();
 8004ea6:	f7ff fa8f 	bl	80043c8 <cycleleds>
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (pcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8004eaa:	4c37      	ldr	r4, [pc, #220]	; (8004f88 <initsplat+0xe4>)
	osDelay(500);
 8004eac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004eb0:	f00e fbb8 	bl	8013624 <osDelay>
	printf("Initsplat: LED cycle\n");
 8004eb4:	4835      	ldr	r0, [pc, #212]	; (8004f8c <initsplat+0xe8>)
 8004eb6:	f01e f9b1 	bl	802321c <puts>
	if (pcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8004eba:	6823      	ldr	r3, [r4, #0]
 8004ebc:	2b0b      	cmp	r3, #11
 8004ebe:	d056      	beq.n	8004f6e <initsplat+0xca>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 8004ec0:	4833      	ldr	r0, [pc, #204]	; (8004f90 <initsplat+0xec>)
 8004ec2:	f01e f9ab 	bl	802321c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8004ec6:	4d33      	ldr	r5, [pc, #204]	; (8004f94 <initsplat+0xf0>)
	initpga();
 8004ec8:	f7ff fb28 	bl	800451c <initpga>
	osDelay(500);
 8004ecc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ed0:	f00e fba8 	bl	8013624 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8004ed4:	4830      	ldr	r0, [pc, #192]	; (8004f98 <initsplat+0xf4>)
 8004ed6:	f01e f905 	bl	80230e4 <iprintf>
	psensor = PNONE;
 8004eda:	2300      	movs	r3, #0
 8004edc:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8004ede:	f7ff fe15 	bl	8004b0c <initpressure3115>
 8004ee2:	b9d8      	cbnz	r0, 8004f1c <initsplat+0x78>
		printf("MPL3115A2 pressure sensor present\n\r");
 8004ee4:	482d      	ldr	r0, [pc, #180]	; (8004f9c <initsplat+0xf8>)
 8004ee6:	f01e f8fd 	bl	80230e4 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8004eea:	4a2d      	ldr	r2, [pc, #180]	; (8004fa0 <initsplat+0xfc>)
		psensor = MPL3115A2;
 8004eec:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 8004eee:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8004ef2:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8004ef4:	f043 0310 	orr.w	r3, r3, #16
 8004ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8004efc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f00:	f00e fb90 	bl	8013624 <osDelay>

	if ((pcb == LIGHTNINGBOARD1) || (pcb == LIGHTNINGBOARD2)) {
 8004f04:	6823      	ldr	r3, [r4, #0]
 8004f06:	3b15      	subs	r3, #21
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d91b      	bls.n	8004f44 <initsplat+0xa0>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004f12:	4824      	ldr	r0, [pc, #144]	; (8004fa4 <initsplat+0x100>)
}
 8004f14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8004f18:	f005 b8ea 	b.w	800a0f0 <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 8004f1c:	f7ff fcd0 	bl	80048c0 <initpressure115>
 8004f20:	b960      	cbnz	r0, 8004f3c <initsplat+0x98>
			printf("MPL115A2 pressure sensor present\n\r");
 8004f22:	4821      	ldr	r0, [pc, #132]	; (8004fa8 <initsplat+0x104>)
 8004f24:	f01e f8de 	bl	80230e4 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8004f28:	4a1d      	ldr	r2, [pc, #116]	; (8004fa0 <initsplat+0xfc>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8004f2a:	2101      	movs	r1, #1
			statuspkt.bconf |= (MPL115A2 << 3);
 8004f2c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8004f30:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8004f32:	f043 0308 	orr.w	r3, r3, #8
 8004f36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004f3a:	e7df      	b.n	8004efc <initsplat+0x58>
			printf("NO pressure sensor present\n\r");
 8004f3c:	481b      	ldr	r0, [pc, #108]	; (8004fac <initsplat+0x108>)
 8004f3e:	f01e f8d1 	bl	80230e4 <iprintf>
 8004f42:	e7db      	b.n	8004efc <initsplat+0x58>
		huart6.Init.BaudRate = 115200;
 8004f44:	481a      	ldr	r0, [pc, #104]	; (8004fb0 <initsplat+0x10c>)
 8004f46:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004f4a:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8004f4c:	f00c f9b4 	bl	80112b8 <HAL_UART_Init>
 8004f50:	b9b8      	cbnz	r0, 8004f82 <initsplat+0xde>
		test_ds2485();
 8004f52:	f7ff ff9b 	bl	8004e8c <test_ds2485>
		init_esp();
 8004f56:	f7ff fec1 	bl	8004cdc <init_esp>
		osDelay(500);
 8004f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f5e:	f00e fb61 	bl	8013624 <osDelay>
		test_esp();
 8004f62:	f7ff fef3 	bl	8004d4c <test_esp>
		osDelay(200);
 8004f66:	20c8      	movs	r0, #200	; 0xc8
 8004f68:	f00e fb5c 	bl	8013624 <osDelay>
 8004f6c:	e7ce      	b.n	8004f0c <initsplat+0x68>
		printf("Initsplat: Dual Mux\n\r");
 8004f6e:	4811      	ldr	r0, [pc, #68]	; (8004fb4 <initsplat+0x110>)
 8004f70:	f01e f8b8 	bl	80230e4 <iprintf>
		initdualmux();
 8004f74:	f7ff fb70 	bl	8004658 <initdualmux>
		osDelay(500);
 8004f78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f7c:	f00e fb52 	bl	8013624 <osDelay>
 8004f80:	e79e      	b.n	8004ec0 <initsplat+0x1c>
			Error_Handler();
 8004f82:	f7fd fe97 	bl	8002cb4 <Error_Handler>
 8004f86:	e7e4      	b.n	8004f52 <initsplat+0xae>
 8004f88:	2001ae7c 	.word	0x2001ae7c
 8004f8c:	08028fbc 	.word	0x08028fbc
 8004f90:	08028fec 	.word	0x08028fec
 8004f94:	20001cc8 	.word	0x20001cc8
 8004f98:	08029010 	.word	0x08029010
 8004f9c:	08029030 	.word	0x08029030
 8004fa0:	2001adc0 	.word	0x2001adc0
 8004fa4:	40021000 	.word	0x40021000
 8004fa8:	08029054 	.word	0x08029054
 8004fac:	08029078 	.word	0x08029078
 8004fb0:	2001b804 	.word	0x2001b804
 8004fb4:	08028fd4 	.word	0x08028fd4

08004fb8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b16      	ldr	r3, [pc, #88]	; (8005014 <HAL_MspInit+0x5c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fba:	2200      	movs	r2, #0
 8004fbc:	210f      	movs	r1, #15
 8004fbe:	f06f 0001 	mvn.w	r0, #1
{
 8004fc2:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc4:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8004fc6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8004fc8:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8004fcc:	641c      	str	r4, [r3, #64]	; 0x40
 8004fce:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8004fd0:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8004fd4:	9400      	str	r4, [sp, #0]
 8004fd6:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fd8:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8004fda:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8004fde:	645c      	str	r4, [r3, #68]	; 0x44
 8004fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe6:	9301      	str	r3, [sp, #4]
 8004fe8:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004fea:	f002 fb09 	bl	8007600 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8004fee:	2200      	movs	r2, #0
 8004ff0:	2106      	movs	r1, #6
 8004ff2:	2005      	movs	r0, #5
 8004ff4:	f002 fb04 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8004ff8:	2005      	movs	r0, #5
 8004ffa:	f002 fb4b 	bl	8007694 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8004ffe:	2200      	movs	r2, #0
 8005000:	2106      	movs	r1, #6
 8005002:	2051      	movs	r0, #81	; 0x51
 8005004:	f002 fafc 	bl	8007600 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005008:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800500a:	b002      	add	sp, #8
 800500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005010:	f002 bb40 	b.w	8007694 <HAL_NVIC_EnableIRQ>
 8005014:	40023800 	.word	0x40023800

08005018 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005018:	4a4a      	ldr	r2, [pc, #296]	; (8005144 <HAL_ADC_MspInit+0x12c>)
 800501a:	6803      	ldr	r3, [r0, #0]
{
 800501c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 800501e:	4293      	cmp	r3, r2
{
 8005020:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005022:	f04f 0400 	mov.w	r4, #0
 8005026:	9408      	str	r4, [sp, #32]
 8005028:	9407      	str	r4, [sp, #28]
 800502a:	940b      	str	r4, [sp, #44]	; 0x2c
 800502c:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  if(hadc->Instance==ADC1)
 8005030:	d007      	beq.n	8005042 <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8005032:	4a45      	ldr	r2, [pc, #276]	; (8005148 <HAL_ADC_MspInit+0x130>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d046      	beq.n	80050c6 <HAL_ADC_MspInit+0xae>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8005038:	4a44      	ldr	r2, [pc, #272]	; (800514c <HAL_ADC_MspInit+0x134>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d061      	beq.n	8005102 <HAL_ADC_MspInit+0xea>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800503e:	b00d      	add	sp, #52	; 0x34
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005042:	4b43      	ldr	r3, [pc, #268]	; (8005150 <HAL_ADC_MspInit+0x138>)
 8005044:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005046:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005048:	2703      	movs	r7, #3
    __HAL_RCC_ADC1_CLK_ENABLE();
 800504a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800504c:	a907      	add	r1, sp, #28
    hdma_adc1.Instance = DMA2_Stream4;
 800504e:	4e41      	ldr	r6, [pc, #260]	; (8005154 <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005050:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005054:	645a      	str	r2, [r3, #68]	; 0x44
 8005056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005058:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800505c:	9201      	str	r2, [sp, #4]
 800505e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005060:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	631a      	str	r2, [r3, #48]	; 0x30
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800506a:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800506c:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005070:	4839      	ldr	r0, [pc, #228]	; (8005158 <HAL_ADC_MspInit+0x140>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005072:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005074:	9302      	str	r3, [sp, #8]
 8005076:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005078:	9409      	str	r4, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800507a:	f004 fd8b 	bl	8009b94 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 800507e:	4a37      	ldr	r2, [pc, #220]	; (800515c <HAL_ADC_MspInit+0x144>)
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005080:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005084:	f44f 4080 	mov.w	r0, #16384	; 0x4000
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005088:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 800508c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005090:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Instance = DMA2_Stream4;
 8005092:	6032      	str	r2, [r6, #0]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005094:	f44f 7780 	mov.w	r7, #256	; 0x100
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005098:	2204      	movs	r2, #4
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800509a:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 800509c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80050a0:	6074      	str	r4, [r6, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80050a2:	60b4      	str	r4, [r6, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80050a4:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80050a6:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80050a8:	6272      	str	r2, [r6, #36]	; 0x24
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 80050aa:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80050ac:	e9c6 c005 	strd	ip, r0, [r6, #20]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050b0:	4630      	mov	r0, r6
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 80050b2:	e9c6 7107 	strd	r7, r1, [r6, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80050b6:	f002 fdb3 	bl	8007c20 <HAL_DMA_Init>
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d13f      	bne.n	800513e <HAL_ADC_MspInit+0x126>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80050be:	63ae      	str	r6, [r5, #56]	; 0x38
 80050c0:	63b5      	str	r5, [r6, #56]	; 0x38
}
 80050c2:	b00d      	add	sp, #52	; 0x34
 80050c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 80050c6:	4b22      	ldr	r3, [pc, #136]	; (8005150 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80050c8:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050ca:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050cc:	2503      	movs	r5, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 80050ce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050d0:	4821      	ldr	r0, [pc, #132]	; (8005158 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 80050d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050d6:	645a      	str	r2, [r3, #68]	; 0x44
 80050d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050da:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80050de:	9203      	str	r2, [sp, #12]
 80050e0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050e4:	f042 0201 	orr.w	r2, r2, #1
 80050e8:	631a      	str	r2, [r3, #48]	; 0x30
 80050ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050ec:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050ee:	f003 0301 	and.w	r3, r3, #1
 80050f2:	9304      	str	r3, [sp, #16]
 80050f4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80050f6:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050fa:	f004 fd4b 	bl	8009b94 <HAL_GPIO_Init>
}
 80050fe:	b00d      	add	sp, #52	; 0x34
 8005100:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005102:	4b13      	ldr	r3, [pc, #76]	; (8005150 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005104:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005106:	a907      	add	r1, sp, #28
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005108:	2503      	movs	r5, #3
    __HAL_RCC_ADC3_CLK_ENABLE();
 800510a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800510c:	4812      	ldr	r0, [pc, #72]	; (8005158 <HAL_ADC_MspInit+0x140>)
    __HAL_RCC_ADC3_CLK_ENABLE();
 800510e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005112:	645a      	str	r2, [r3, #68]	; 0x44
 8005114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005116:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800511a:	9205      	str	r2, [sp, #20]
 800511c:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	631a      	str	r2, [r3, #48]	; 0x30
 8005126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005128:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800512a:	f003 0301 	and.w	r3, r3, #1
 800512e:	9306      	str	r3, [sp, #24]
 8005130:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005132:	e9cd 6507 	strd	r6, r5, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005136:	f004 fd2d 	bl	8009b94 <HAL_GPIO_Init>
}
 800513a:	b00d      	add	sp, #52	; 0x34
 800513c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 800513e:	f7fd fdb9 	bl	8002cb4 <Error_Handler>
 8005142:	e7bc      	b.n	80050be <HAL_ADC_MspInit+0xa6>
 8005144:	40012000 	.word	0x40012000
 8005148:	40012100 	.word	0x40012100
 800514c:	40012200 	.word	0x40012200
 8005150:	40023800 	.word	0x40023800
 8005154:	2001b670 	.word	0x2001b670
 8005158:	40020000 	.word	0x40020000
 800515c:	40026470 	.word	0x40026470

08005160 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_CRC_MspInit+0x28>)
 8005162:	6802      	ldr	r2, [r0, #0]
 8005164:	429a      	cmp	r2, r3
 8005166:	d000      	beq.n	800516a <HAL_CRC_MspInit+0xa>
 8005168:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800516a:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800516e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8005172:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8005174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005178:	631a      	str	r2, [r3, #48]	; 0x30
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005180:	9301      	str	r3, [sp, #4]
 8005182:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005184:	b002      	add	sp, #8
 8005186:	4770      	bx	lr
 8005188:	40023000 	.word	0x40023000

0800518c <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 800518c:	4b2b      	ldr	r3, [pc, #172]	; (800523c <HAL_DAC_MspInit+0xb0>)
 800518e:	6802      	ldr	r2, [r0, #0]
{
 8005190:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hdac->Instance==DAC)
 8005192:	429a      	cmp	r2, r3
{
 8005194:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005196:	f04f 0400 	mov.w	r4, #0
 800519a:	9404      	str	r4, [sp, #16]
 800519c:	9403      	str	r4, [sp, #12]
 800519e:	9407      	str	r4, [sp, #28]
 80051a0:	e9cd 4405 	strd	r4, r4, [sp, #20]
  if(hdac->Instance==DAC)
 80051a4:	d001      	beq.n	80051aa <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80051a6:	b009      	add	sp, #36	; 0x24
 80051a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 80051aa:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80051ae:	4605      	mov	r5, r0
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051b0:	2010      	movs	r0, #16
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051b2:	2703      	movs	r7, #3
    __HAL_RCC_DAC_CLK_ENABLE();
 80051b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051b6:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 80051b8:	4e21      	ldr	r6, [pc, #132]	; (8005240 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 80051ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80051be:	641a      	str	r2, [r3, #64]	; 0x40
 80051c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80051c2:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80051c6:	9201      	str	r2, [sp, #4]
 80051c8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051cc:	f042 0201 	orr.w	r2, r2, #1
 80051d0:	631a      	str	r2, [r3, #48]	; 0x30
 80051d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80051d4:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051d6:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051da:	481a      	ldr	r0, [pc, #104]	; (8005244 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80051dc:	9704      	str	r7, [sp, #16]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80051de:	f44f 6780 	mov.w	r7, #1024	; 0x400
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051e6:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e8:	f004 fcd4 	bl	8009b94 <HAL_GPIO_Init>
    hdma_dac1.Instance = DMA1_Stream5;
 80051ec:	4b16      	ldr	r3, [pc, #88]	; (8005248 <HAL_DAC_MspInit+0xbc>)
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051ee:	2040      	movs	r0, #64	; 0x40
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80051f0:	f04f 6c60 	mov.w	ip, #234881024	; 0xe000000
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051f4:	2104      	movs	r1, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 80051f6:	2202      	movs	r2, #2
    hdma_dac1.Instance = DMA1_Stream5;
 80051f8:	6033      	str	r3, [r6, #0]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 80051fa:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80051fe:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005200:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005202:	6137      	str	r7, [r6, #16]
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005204:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005206:	e9c6 c001 	strd	ip, r0, [r6, #4]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800520a:	4630      	mov	r0, r6
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800520c:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8005210:	e9c6 4407 	strd	r4, r4, [r6, #28]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005214:	e9c6 1209 	strd	r1, r2, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005218:	f002 fd02 	bl	8007c20 <HAL_DMA_Init>
 800521c:	b958      	cbnz	r0, 8005236 <HAL_DAC_MspInit+0xaa>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800521e:	2200      	movs	r2, #0
 8005220:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005222:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005224:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005226:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005228:	f002 f9ea 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800522c:	2036      	movs	r0, #54	; 0x36
 800522e:	f002 fa31 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 8005232:	b009      	add	sp, #36	; 0x24
 8005234:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005236:	f7fd fd3d 	bl	8002cb4 <Error_Handler>
 800523a:	e7f0      	b.n	800521e <HAL_DAC_MspInit+0x92>
 800523c:	40007400 	.word	0x40007400
 8005240:	2001b3c0 	.word	0x2001b3c0
 8005244:	40020000 	.word	0x40020000
 8005248:	40026088 	.word	0x40026088

0800524c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800524c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800524e:	2400      	movs	r4, #0
{
 8005250:	b0b0      	sub	sp, #192	; 0xc0
 8005252:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005254:	2290      	movs	r2, #144	; 0x90
 8005256:	4621      	mov	r1, r4
 8005258:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525a:	940b      	str	r4, [sp, #44]	; 0x2c
 800525c:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005260:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005264:	f01c ffcc 	bl	8022200 <memset>
  if(hi2c->Instance==I2C1)
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	4a4c      	ldr	r2, [pc, #304]	; (800539c <HAL_I2C_MspInit+0x150>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d007      	beq.n	8005280 <HAL_I2C_MspInit+0x34>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <HAL_I2C_MspInit+0x154>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d031      	beq.n	80052da <HAL_I2C_MspInit+0x8e>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8005276:	4a4b      	ldr	r2, [pc, #300]	; (80053a4 <HAL_I2C_MspInit+0x158>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d059      	beq.n	8005330 <HAL_I2C_MspInit+0xe4>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800527c:	b030      	add	sp, #192	; 0xc0
 800527e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005280:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005284:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005286:	9425      	str	r4, [sp, #148]	; 0x94
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005288:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800528a:	f006 ffa1 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 800528e:	2800      	cmp	r0, #0
 8005290:	d17a      	bne.n	8005388 <HAL_I2C_MspInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005292:	4c45      	ldr	r4, [pc, #276]	; (80053a8 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005294:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005296:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8005298:	f44f 7610 	mov.w	r6, #576	; 0x240
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800529e:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052a0:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a2:	f043 0302 	orr.w	r3, r3, #2
 80052a6:	6323      	str	r3, [r4, #48]	; 0x30
 80052a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052aa:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052ac:	2204      	movs	r2, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ae:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052b2:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052b4:	483d      	ldr	r0, [pc, #244]	; (80053ac <HAL_I2C_MspInit+0x160>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 80052ba:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80052bc:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c0:	f004 fc68 	bl	8009b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80052c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80052ca:	6423      	str	r3, [r4, #64]	; 0x40
 80052cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80052d2:	9302      	str	r3, [sp, #8]
 80052d4:	9b02      	ldr	r3, [sp, #8]
}
 80052d6:	b030      	add	sp, #192	; 0xc0
 80052d8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80052da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052de:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80052e0:	9426      	str	r4, [sp, #152]	; 0x98
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80052e2:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80052e4:	f006 ff74 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d150      	bne.n	800538e <HAL_I2C_MspInit+0x142>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052ec:	4c2e      	ldr	r4, [pc, #184]	; (80053a8 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80052ee:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80052f0:	2203      	movs	r2, #3
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052f2:	2601      	movs	r6, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80052f6:	2504      	movs	r5, #4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052f8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80052fa:	f043 0320 	orr.w	r3, r3, #32
 80052fe:	6323      	str	r3, [r4, #48]	; 0x30
 8005300:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005302:	9008      	str	r0, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005304:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005308:	4829      	ldr	r0, [pc, #164]	; (80053b0 <HAL_I2C_MspInit+0x164>)
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800530a:	9207      	str	r2, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800530c:	9303      	str	r3, [sp, #12]
 800530e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005310:	920a      	str	r2, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005312:	9609      	str	r6, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005314:	950b      	str	r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005316:	f004 fc3d 	bl	8009b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800531a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800531c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005320:	6423      	str	r3, [r4, #64]	; 0x40
 8005322:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005328:	9304      	str	r3, [sp, #16]
 800532a:	9b04      	ldr	r3, [sp, #16]
}
 800532c:	b030      	add	sp, #192	; 0xc0
 800532e:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005330:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005334:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8005336:	9428      	str	r4, [sp, #160]	; 0xa0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8005338:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800533a:	f006 ff49 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 800533e:	bb48      	cbnz	r0, 8005394 <HAL_I2C_MspInit+0x148>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005340:	4c19      	ldr	r4, [pc, #100]	; (80053a8 <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005342:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005344:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005346:	f44f 4640 	mov.w	r6, #49152	; 0xc000
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800534a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800534c:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800534e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005350:	f043 0320 	orr.w	r3, r3, #32
 8005354:	6323      	str	r3, [r4, #48]	; 0x30
 8005356:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005358:	9208      	str	r2, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800535a:	2204      	movs	r2, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800535c:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005360:	9009      	str	r0, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005362:	4813      	ldr	r0, [pc, #76]	; (80053b0 <HAL_I2C_MspInit+0x164>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8005368:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800536a:	e9cd 520a 	strd	r5, r2, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800536e:	f004 fc11 	bl	8009b94 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 8005372:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005378:	6423      	str	r3, [r4, #64]	; 0x40
 800537a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800537c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005380:	9306      	str	r3, [sp, #24]
 8005382:	9b06      	ldr	r3, [sp, #24]
}
 8005384:	b030      	add	sp, #192	; 0xc0
 8005386:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005388:	f7fd fc94 	bl	8002cb4 <Error_Handler>
 800538c:	e781      	b.n	8005292 <HAL_I2C_MspInit+0x46>
      Error_Handler();
 800538e:	f7fd fc91 	bl	8002cb4 <Error_Handler>
 8005392:	e7ab      	b.n	80052ec <HAL_I2C_MspInit+0xa0>
      Error_Handler();
 8005394:	f7fd fc8e 	bl	8002cb4 <Error_Handler>
 8005398:	e7d2      	b.n	8005340 <HAL_I2C_MspInit+0xf4>
 800539a:	bf00      	nop
 800539c:	40005400 	.word	0x40005400
 80053a0:	40005800 	.word	0x40005800
 80053a4:	40006000 	.word	0x40006000
 80053a8:	40023800 	.word	0x40023800
 80053ac:	40020400 	.word	0x40020400
 80053b0:	40021400 	.word	0x40021400

080053b4 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 80053b4:	4b08      	ldr	r3, [pc, #32]	; (80053d8 <HAL_RNG_MspInit+0x24>)
 80053b6:	6802      	ldr	r2, [r0, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d000      	beq.n	80053be <HAL_RNG_MspInit+0xa>
 80053bc:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80053be:	4b07      	ldr	r3, [pc, #28]	; (80053dc <HAL_RNG_MspInit+0x28>)
{
 80053c0:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 80053c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80053c8:	635a      	str	r2, [r3, #52]	; 0x34
 80053ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80053d4:	b002      	add	sp, #8
 80053d6:	4770      	bx	lr
 80053d8:	50060800 	.word	0x50060800
 80053dc:	40023800 	.word	0x40023800

080053e0 <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 80053e0:	4a57      	ldr	r2, [pc, #348]	; (8005540 <HAL_SPI_MspInit+0x160>)
 80053e2:	6803      	ldr	r3, [r0, #0]
{
 80053e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(hspi->Instance==SPI2)
 80053e8:	4293      	cmp	r3, r2
{
 80053ea:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053ec:	f04f 0400 	mov.w	r4, #0
 80053f0:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80053f4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80053f8:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 80053fa:	d008      	beq.n	800540e <HAL_SPI_MspInit+0x2e>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 80053fc:	4a51      	ldr	r2, [pc, #324]	; (8005544 <HAL_SPI_MspInit+0x164>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d03b      	beq.n	800547a <HAL_SPI_MspInit+0x9a>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 8005402:	4a51      	ldr	r2, [pc, #324]	; (8005548 <HAL_SPI_MspInit+0x168>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d078      	beq.n	80054fa <HAL_SPI_MspInit+0x11a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 8005408:	b00e      	add	sp, #56	; 0x38
 800540a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800540e:	4b4f      	ldr	r3, [pc, #316]	; (800554c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005410:	200c      	movs	r0, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005412:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005414:	2601      	movs	r6, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005418:	2505      	movs	r5, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800541a:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI2_CLK_ENABLE();
 800541c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005420:	641a      	str	r2, [r3, #64]	; 0x40
 8005422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005424:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005428:	9201      	str	r2, [sp, #4]
 800542a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800542c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800542e:	f042 0204 	orr.w	r2, r2, #4
 8005432:	631a      	str	r2, [r3, #48]	; 0x30
 8005434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005436:	f002 0204 	and.w	r2, r2, #4
 800543a:	9202      	str	r2, [sp, #8]
 800543c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800543e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005440:	f042 0208 	orr.w	r2, r2, #8
 8005444:	631a      	str	r2, [r3, #48]	; 0x30
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005448:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800544a:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800544e:	4840      	ldr	r0, [pc, #256]	; (8005550 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005450:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005452:	9303      	str	r3, [sp, #12]
 8005454:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005456:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005458:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800545c:	f004 fb9a 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005460:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005462:	a909      	add	r1, sp, #36	; 0x24
 8005464:	483b      	ldr	r0, [pc, #236]	; (8005554 <HAL_SPI_MspInit+0x174>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005466:	970a      	str	r7, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005468:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800546a:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800546c:	e9cd 650c 	strd	r6, r5, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005470:	f004 fb90 	bl	8009b94 <HAL_GPIO_Init>
}
 8005474:	b00e      	add	sp, #56	; 0x38
 8005476:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800547a:	4b34      	ldr	r3, [pc, #208]	; (800554c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800547c:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800547e:	2004      	movs	r0, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005480:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005482:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005484:	2707      	movs	r7, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005486:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005488:	f04f 0806 	mov.w	r8, #6
    __HAL_RCC_SPI3_CLK_ENABLE();
 800548c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005490:	641a      	str	r2, [r3, #64]	; 0x40
 8005492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005494:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8005498:	9204      	str	r2, [sp, #16]
 800549a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800549e:	4332      	orrs	r2, r6
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
 80054a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054a4:	4032      	ands	r2, r6
 80054a6:	9205      	str	r2, [sp, #20]
 80054a8:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054ac:	4302      	orrs	r2, r0
 80054ae:	631a      	str	r2, [r3, #48]	; 0x30
 80054b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054b2:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054b4:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b6:	4828      	ldr	r0, [pc, #160]	; (8005558 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b8:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ba:	9306      	str	r3, [sp, #24]
 80054bc:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054be:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80054c0:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054c4:	f004 fb66 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054cc:	a909      	add	r1, sp, #36	; 0x24
 80054ce:	4820      	ldr	r0, [pc, #128]	; (8005550 <HAL_SPI_MspInit+0x170>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80054d0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d2:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054d4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d8:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054dc:	f004 fb5a 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054e0:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e2:	a909      	add	r1, sp, #36	; 0x24
 80054e4:	481c      	ldr	r0, [pc, #112]	; (8005558 <HAL_SPI_MspInit+0x178>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e6:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e8:	940b      	str	r4, [sp, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054ea:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054ec:	e9cd 580c 	strd	r5, r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054f0:	f004 fb50 	bl	8009b94 <HAL_GPIO_Init>
}
 80054f4:	b00e      	add	sp, #56	; 0x38
 80054f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 80054fa:	4b14      	ldr	r3, [pc, #80]	; (800554c <HAL_SPI_MspInit+0x16c>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80054fc:	2074      	movs	r0, #116	; 0x74
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80054fe:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005500:	2602      	movs	r6, #2
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005504:	2503      	movs	r5, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 8005506:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800550a:	645a      	str	r2, [r3, #68]	; 0x44
 800550c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800550e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005512:	9207      	str	r2, [sp, #28]
 8005514:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005518:	f042 0210 	orr.w	r2, r2, #16
 800551c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800551e:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005522:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005524:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005528:	480c      	ldr	r0, [pc, #48]	; (800555c <HAL_SPI_MspInit+0x17c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552a:	940b      	str	r4, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800552c:	9308      	str	r3, [sp, #32]
 800552e:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005530:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8005532:	e9cd 520c 	strd	r5, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005536:	f004 fb2d 	bl	8009b94 <HAL_GPIO_Init>
}
 800553a:	b00e      	add	sp, #56	; 0x38
 800553c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005540:	40003800 	.word	0x40003800
 8005544:	40003c00 	.word	0x40003c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40023800 	.word	0x40023800
 8005550:	40020800 	.word	0x40020800
 8005554:	40020c00 	.word	0x40020c00
 8005558:	40020400 	.word	0x40020400
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8005560:	4a78      	ldr	r2, [pc, #480]	; (8005744 <HAL_TIM_Base_MspInit+0x1e4>)
 8005562:	6803      	ldr	r3, [r0, #0]
{
 8005564:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if(htim_base->Instance==TIM1)
 8005568:	4293      	cmp	r3, r2
{
 800556a:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556c:	f04f 0400 	mov.w	r4, #0
 8005570:	940c      	str	r4, [sp, #48]	; 0x30
 8005572:	940b      	str	r4, [sp, #44]	; 0x2c
 8005574:	940f      	str	r4, [sp, #60]	; 0x3c
 8005576:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
  if(htim_base->Instance==TIM1)
 800557a:	d021      	beq.n	80055c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d058      	beq.n	8005634 <HAL_TIM_Base_MspInit+0xd4>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8005582:	4a71      	ldr	r2, [pc, #452]	; (8005748 <HAL_TIM_Base_MspInit+0x1e8>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d028      	beq.n	80055da <HAL_TIM_Base_MspInit+0x7a>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8005588:	4a70      	ldr	r2, [pc, #448]	; (800574c <HAL_TIM_Base_MspInit+0x1ec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d045      	beq.n	800561a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 800558e:	4a70      	ldr	r2, [pc, #448]	; (8005750 <HAL_TIM_Base_MspInit+0x1f0>)
 8005590:	4293      	cmp	r3, r2
 8005592:	f000 80ad 	beq.w	80056f0 <HAL_TIM_Base_MspInit+0x190>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8005596:	4a6f      	ldr	r2, [pc, #444]	; (8005754 <HAL_TIM_Base_MspInit+0x1f4>)
 8005598:	4293      	cmp	r3, r2
 800559a:	f000 80bc 	beq.w	8005716 <HAL_TIM_Base_MspInit+0x1b6>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 800559e:	4a6e      	ldr	r2, [pc, #440]	; (8005758 <HAL_TIM_Base_MspInit+0x1f8>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d02f      	beq.n	8005604 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 80055a4:	4a6d      	ldr	r2, [pc, #436]	; (800575c <HAL_TIM_Base_MspInit+0x1fc>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d114      	bne.n	80055d4 <HAL_TIM_Base_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80055aa:	4b6d      	ldr	r3, [pc, #436]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
 80055ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80055ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b2:	641a      	str	r2, [r3, #64]	; 0x40
 80055b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ba:	930a      	str	r3, [sp, #40]	; 0x28
 80055bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80055be:	e009      	b.n	80055d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM1_CLK_ENABLE();
 80055c0:	4b67      	ldr	r3, [pc, #412]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
 80055c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055c4:	f042 0201 	orr.w	r2, r2, #1
 80055c8:	645a      	str	r2, [r3, #68]	; 0x44
 80055ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055cc:	f003 0301 	and.w	r3, r3, #1
 80055d0:	9301      	str	r3, [sp, #4]
 80055d2:	9b01      	ldr	r3, [sp, #4]
}
 80055d4:	b011      	add	sp, #68	; 0x44
 80055d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055da:	4b61      	ldr	r3, [pc, #388]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80055dc:	4622      	mov	r2, r4
 80055de:	2106      	movs	r1, #6
 80055e0:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 80055e2:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80055e4:	f044 0402 	orr.w	r4, r4, #2
 80055e8:	641c      	str	r4, [r3, #64]	; 0x40
 80055ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ec:	f003 0302 	and.w	r3, r3, #2
 80055f0:	9305      	str	r3, [sp, #20]
 80055f2:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 80055f4:	f002 f804 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80055f8:	201d      	movs	r0, #29
 80055fa:	f002 f84b 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 80055fe:	b011      	add	sp, #68	; 0x44
 8005600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005604:	4b56      	ldr	r3, [pc, #344]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
 8005606:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005608:	f042 0220 	orr.w	r2, r2, #32
 800560c:	641a      	str	r2, [r3, #64]	; 0x40
 800560e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005610:	f003 0320 	and.w	r3, r3, #32
 8005614:	9309      	str	r3, [sp, #36]	; 0x24
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	e7dc      	b.n	80055d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800561a:	4b51      	ldr	r3, [pc, #324]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	f042 0204 	orr.w	r2, r2, #4
 8005622:	641a      	str	r2, [r3, #64]	; 0x40
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	f003 0304 	and.w	r3, r3, #4
 800562a:	9306      	str	r3, [sp, #24]
 800562c:	9b06      	ldr	r3, [sp, #24]
}
 800562e:	b011      	add	sp, #68	; 0x44
 8005630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005634:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005638:	2701      	movs	r7, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800563a:	f04f 0802 	mov.w	r8, #2
 800563e:	4605      	mov	r5, r0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005640:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005642:	2020      	movs	r0, #32
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005644:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005646:	f44f 6980 	mov.w	r9, #1024	; 0x400
    __HAL_RCC_TIM2_CLK_ENABLE();
 800564a:	433a      	orrs	r2, r7
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800564c:	4e45      	ldr	r6, [pc, #276]	; (8005764 <HAL_TIM_Base_MspInit+0x204>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 800564e:	641a      	str	r2, [r3, #64]	; 0x40
 8005650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005652:	403a      	ands	r2, r7
 8005654:	9202      	str	r2, [sp, #8]
 8005656:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005658:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800565a:	433a      	orrs	r2, r7
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
 800565e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005660:	403a      	ands	r2, r7
 8005662:	9203      	str	r2, [sp, #12]
 8005664:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005668:	ea42 0208 	orr.w	r2, r2, r8
 800566c:	631a      	str	r2, [r3, #48]	; 0x30
 800566e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005670:	900b      	str	r0, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005672:	ea03 0308 	and.w	r3, r3, r8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005676:	483c      	ldr	r0, [pc, #240]	; (8005768 <HAL_TIM_Base_MspInit+0x208>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005678:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800567a:	9304      	str	r3, [sp, #16]
 800567c:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800567e:	940d      	str	r4, [sp, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005680:	940e      	str	r4, [sp, #56]	; 0x38
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005682:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005686:	f004 fa85 	bl	8009b94 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800568a:	a90b      	add	r1, sp, #44	; 0x2c
 800568c:	4837      	ldr	r0, [pc, #220]	; (800576c <HAL_TIM_Base_MspInit+0x20c>)
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800568e:	970f      	str	r7, [sp, #60]	; 0x3c
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 8005690:	f04f 67c0 	mov.w	r7, #100663296	; 0x6000000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005694:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005698:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800569c:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056a0:	f004 fa78 	bl	8009b94 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 80056a4:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 8005770 <HAL_TIM_Base_MspInit+0x210>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80056a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80056b0:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80056b4:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80056b6:	f8c6 9010 	str.w	r9, [r6, #16]
    hdma_tim2_up_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056ba:	60b4      	str	r4, [r6, #8]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80056bc:	60f4      	str	r4, [r6, #12]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 80056be:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80056c0:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 80056c4:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80056c8:	e9c6 1205 	strd	r1, r2, [r6, #20]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 80056cc:	f002 faa8 	bl	8007c20 <HAL_DMA_Init>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	d133      	bne.n	800573c <HAL_TIM_Base_MspInit+0x1dc>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80056d4:	2200      	movs	r2, #0
 80056d6:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 80056d8:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80056da:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 80056dc:	62ee      	str	r6, [r5, #44]	; 0x2c
 80056de:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 80056e0:	f001 ff8e 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80056e4:	201c      	movs	r0, #28
 80056e6:	f001 ffd5 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 80056ea:	b011      	add	sp, #68	; 0x44
 80056ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056f0:	4b1b      	ldr	r3, [pc, #108]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 80056f2:	4622      	mov	r2, r4
 80056f4:	2105      	movs	r1, #5
 80056f6:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 80056f8:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 80056fa:	f044 0408 	orr.w	r4, r4, #8
 80056fe:	641c      	str	r4, [r3, #64]	; 0x40
 8005700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005702:	f003 0308 	and.w	r3, r3, #8
 8005706:	9307      	str	r3, [sp, #28]
 8005708:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800570a:	f001 ff79 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800570e:	2032      	movs	r0, #50	; 0x32
 8005710:	f001 ffc0 	bl	8007694 <HAL_NVIC_EnableIRQ>
 8005714:	e75e      	b.n	80055d4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_TIM_Base_MspInit+0x200>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005718:	4622      	mov	r2, r4
 800571a:	2106      	movs	r1, #6
 800571c:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 800571e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005720:	f044 0410 	orr.w	r4, r4, #16
 8005724:	641c      	str	r4, [r3, #64]	; 0x40
 8005726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	9308      	str	r3, [sp, #32]
 800572e:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005730:	f001 ff66 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005734:	2036      	movs	r0, #54	; 0x36
 8005736:	f001 ffad 	bl	8007694 <HAL_NVIC_EnableIRQ>
 800573a:	e74b      	b.n	80055d4 <HAL_TIM_Base_MspInit+0x74>
      Error_Handler();
 800573c:	f7fd faba 	bl	8002cb4 <Error_Handler>
 8005740:	e7c8      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x174>
 8005742:	bf00      	nop
 8005744:	40010000 	.word	0x40010000
 8005748:	40000400 	.word	0x40000400
 800574c:	40000800 	.word	0x40000800
 8005750:	40000c00 	.word	0x40000c00
 8005754:	40001000 	.word	0x40001000
 8005758:	40001400 	.word	0x40001400
 800575c:	40002000 	.word	0x40002000
 8005760:	40023800 	.word	0x40023800
 8005764:	2001b2b0 	.word	0x2001b2b0
 8005768:	40020000 	.word	0x40020000
 800576c:	40020400 	.word	0x40020400
 8005770:	40026028 	.word	0x40026028

08005774 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 8005774:	491e      	ldr	r1, [pc, #120]	; (80057f0 <HAL_TIM_MspPostInit+0x7c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005776:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 8005778:	6802      	ldr	r2, [r0, #0]
{
 800577a:	b570      	push	{r4, r5, r6, lr}
  if(htim->Instance==TIM3)
 800577c:	428a      	cmp	r2, r1
{
 800577e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005780:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8005784:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8005788:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 800578a:	d004      	beq.n	8005796 <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 800578c:	4919      	ldr	r1, [pc, #100]	; (80057f4 <HAL_TIM_MspPostInit+0x80>)
 800578e:	428a      	cmp	r2, r1
 8005790:	d018      	beq.n	80057c4 <HAL_TIM_MspPostInit+0x50>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8005792:	b008      	add	sp, #32
 8005794:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005796:	4a18      	ldr	r2, [pc, #96]	; (80057f8 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005798:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800579a:	2680      	movs	r6, #128	; 0x80
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800579c:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800579e:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057a0:	4816      	ldr	r0, [pc, #88]	; (80057fc <HAL_TIM_MspPostInit+0x88>)
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057a2:	f044 0404 	orr.w	r4, r4, #4
 80057a6:	6314      	str	r4, [r2, #48]	; 0x30
 80057a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057aa:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057ac:	f002 0204 	and.w	r2, r2, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80057b2:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057b4:	9201      	str	r2, [sp, #4]
 80057b6:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057b8:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80057ba:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80057bc:	f004 f9ea 	bl	8009b94 <HAL_GPIO_Init>
}
 80057c0:	b008      	add	sp, #32
 80057c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c4:	4a0c      	ldr	r2, [pc, #48]	; (80057f8 <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057c6:	2502      	movs	r5, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057c8:	f44f 7680 	mov.w	r6, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057cc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ce:	6b14      	ldr	r4, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d0:	480b      	ldr	r0, [pc, #44]	; (8005800 <HAL_TIM_MspPostInit+0x8c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d2:	432c      	orrs	r4, r5
 80057d4:	6314      	str	r4, [r2, #48]	; 0x30
 80057d6:	6b12      	ldr	r2, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d8:	9305      	str	r3, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057da:	402a      	ands	r2, r5
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057dc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80057de:	9603      	str	r6, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e0:	9202      	str	r2, [sp, #8]
 80057e2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e4:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80057e6:	9507      	str	r5, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e8:	f004 f9d4 	bl	8009b94 <HAL_GPIO_Init>
}
 80057ec:	b008      	add	sp, #32
 80057ee:	bd70      	pop	{r4, r5, r6, pc}
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40023800 	.word	0x40023800
 80057fc:	40020800 	.word	0x40020800
 8005800:	40020400 	.word	0x40020400

08005804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005804:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005808:	2400      	movs	r4, #0
{
 800580a:	b0bd      	sub	sp, #244	; 0xf4
 800580c:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800580e:	2290      	movs	r2, #144	; 0x90
 8005810:	4621      	mov	r1, r4
 8005812:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	9417      	str	r4, [sp, #92]	; 0x5c
 8005816:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
 800581a:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800581e:	f01c fcef 	bl	8022200 <memset>
  if(huart->Instance==UART4)
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	4aa5      	ldr	r2, [pc, #660]	; (8005abc <HAL_UART_MspInit+0x2b8>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d074      	beq.n	8005914 <HAL_UART_MspInit+0x110>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 800582a:	4aa5      	ldr	r2, [pc, #660]	; (8005ac0 <HAL_UART_MspInit+0x2bc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	f000 80c6 	beq.w	80059be <HAL_UART_MspInit+0x1ba>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 8005832:	4aa4      	ldr	r2, [pc, #656]	; (8005ac4 <HAL_UART_MspInit+0x2c0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	f000 8165 	beq.w	8005b04 <HAL_UART_MspInit+0x300>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 800583a:	4aa3      	ldr	r2, [pc, #652]	; (8005ac8 <HAL_UART_MspInit+0x2c4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_UART_MspInit+0x5a>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8005840:	4aa2      	ldr	r2, [pc, #648]	; (8005acc <HAL_UART_MspInit+0x2c8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	f000 8196 	beq.w	8005b74 <HAL_UART_MspInit+0x370>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 8005848:	4aa1      	ldr	r2, [pc, #644]	; (8005ad0 <HAL_UART_MspInit+0x2cc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	f000 81bd 	beq.w	8005bca <HAL_UART_MspInit+0x3c6>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 8005850:	4aa0      	ldr	r2, [pc, #640]	; (8005ad4 <HAL_UART_MspInit+0x2d0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	f000 81e9 	beq.w	8005c2a <HAL_UART_MspInit+0x426>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005858:	b03d      	add	sp, #244	; 0xf4
 800585a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800585e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005862:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8005864:	9430      	str	r4, [sp, #192]	; 0xc0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8005866:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005868:	f006 fcb2 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 800586c:	2800      	cmp	r0, #0
 800586e:	f040 826d 	bne.w	8005d4c <HAL_UART_MspInit+0x548>
    __HAL_RCC_UART8_CLK_ENABLE();
 8005872:	4b99      	ldr	r3, [pc, #612]	; (8005ad8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8005874:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005876:	2702      	movs	r7, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8005878:	f04f 0808 	mov.w	r8, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 800587c:	6c18      	ldr	r0, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800587e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005880:	a913      	add	r1, sp, #76	; 0x4c
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8005882:	4c96      	ldr	r4, [pc, #600]	; (8005adc <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 8005884:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005888:	6418      	str	r0, [r3, #64]	; 0x40
 800588a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800588c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005890:	900a      	str	r0, [sp, #40]	; 0x28
 8005892:	980a      	ldr	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005894:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005896:	f040 0010 	orr.w	r0, r0, #16
 800589a:	6318      	str	r0, [r3, #48]	; 0x30
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800589e:	4890      	ldr	r0, [pc, #576]	; (8005ae0 <HAL_UART_MspInit+0x2dc>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058a0:	f003 0310 	and.w	r3, r3, #16
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80058a4:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058a6:	9714      	str	r7, [sp, #80]	; 0x50
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80058a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80058aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80058ac:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80058b0:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058b4:	f004 f96e 	bl	8009b94 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058b8:	a913      	add	r1, sp, #76	; 0x4c
 80058ba:	4889      	ldr	r0, [pc, #548]	; (8005ae0 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058bc:	9615      	str	r6, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058be:	e9cd 7713 	strd	r7, r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80058c2:	e9cd 7816 	strd	r7, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80058c6:	f004 f965 	bl	8009b94 <HAL_GPIO_Init>
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80058ca:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_uart8_rx.Instance = DMA1_Stream6;
 80058ce:	f8df c230 	ldr.w	ip, [pc, #560]	; 8005b00 <HAL_UART_MspInit+0x2fc>
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058d2:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 80058d6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80058de:	4620      	mov	r0, r4
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058e0:	60a6      	str	r6, [r4, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e2:	60e6      	str	r6, [r4, #12]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058e4:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058e6:	6121      	str	r1, [r4, #16]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058e8:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 80058ec:	e9c4 c700 	strd	ip, r7, [r4]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058f0:	e9c4 2307 	strd	r2, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 80058f4:	f002 f994 	bl	8007c20 <HAL_DMA_Init>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	f040 822a 	bne.w	8005d52 <HAL_UART_MspInit+0x54e>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 80058fe:	2200      	movs	r2, #0
 8005900:	2103      	movs	r1, #3
 8005902:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 8005904:	672c      	str	r4, [r5, #112]	; 0x70
 8005906:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8005908:	f001 fe7a 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 800590c:	2053      	movs	r0, #83	; 0x53
 800590e:	f001 fec1 	bl	8007694 <HAL_NVIC_EnableIRQ>
 8005912:	e7a1      	b.n	8005858 <HAL_UART_MspInit+0x54>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8005914:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005918:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800591a:	942c      	str	r4, [sp, #176]	; 0xb0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800591c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800591e:	f006 fc57 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8005922:	2800      	cmp	r0, #0
 8005924:	f040 817e 	bne.w	8005c24 <HAL_UART_MspInit+0x420>
    __HAL_RCC_UART4_CLK_ENABLE();
 8005928:	4b6b      	ldr	r3, [pc, #428]	; (8005ad8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800592a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 800592c:	f248 0001 	movw	r0, #32769	; 0x8001
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005930:	2600      	movs	r6, #0
    __HAL_RCC_UART4_CLK_ENABLE();
 8005932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005934:	2503      	movs	r5, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005936:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005938:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_UART4_CLK_ENABLE();
 800593a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
 8005940:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005942:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8005946:	9201      	str	r2, [sp, #4]
 8005948:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800594a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800594c:	f042 0201 	orr.w	r2, r2, #1
 8005950:	631a      	str	r2, [r3, #48]	; 0x30
 8005952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005954:	f002 0201 	and.w	r2, r2, #1
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800595c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800595e:	433a      	orrs	r2, r7
 8005960:	631a      	str	r2, [r3, #48]	; 0x30
 8005962:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005964:	403a      	ands	r2, r7
 8005966:	9203      	str	r2, [sp, #12]
 8005968:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800596a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800596c:	f042 0204 	orr.w	r2, r2, #4
 8005970:	631a      	str	r2, [r3, #48]	; 0x30
 8005972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 8005974:	9013      	str	r0, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005976:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800597a:	485a      	ldr	r0, [pc, #360]	; (8005ae4 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800597c:	9714      	str	r7, [sp, #80]	; 0x50
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800597e:	9304      	str	r3, [sp, #16]
 8005980:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005982:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005984:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005988:	f004 f904 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800598c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005990:	a913      	add	r1, sp, #76	; 0x4c
 8005992:	4855      	ldr	r0, [pc, #340]	; (8005ae8 <HAL_UART_MspInit+0x2e4>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005994:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005996:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800599a:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800599e:	f004 f8f9 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059a6:	a913      	add	r1, sp, #76	; 0x4c
 80059a8:	4850      	ldr	r0, [pc, #320]	; (8005aec <HAL_UART_MspInit+0x2e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80059aa:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059ac:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80059b0:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80059b4:	f004 f8ee 	bl	8009b94 <HAL_GPIO_Init>
}
 80059b8:	b03d      	add	sp, #244	; 0xf4
 80059ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80059be:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059c2:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80059c4:	942d      	str	r4, [sp, #180]	; 0xb4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80059c6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80059c8:	f006 fc02 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 80059cc:	2800      	cmp	r0, #0
 80059ce:	f040 81b7 	bne.w	8005d40 <HAL_UART_MspInit+0x53c>
    __HAL_RCC_UART5_CLK_ENABLE();
 80059d2:	4b41      	ldr	r3, [pc, #260]	; (8005ad8 <HAL_UART_MspInit+0x2d4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80059d4:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059d6:	2400      	movs	r4, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80059d8:	f44f 5980 	mov.w	r9, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 80059dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80059de:	2603      	movs	r6, #3
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80059e0:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059e4:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_UART5_CLK_ENABLE();
 80059e6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059ea:	483f      	ldr	r0, [pc, #252]	; (8005ae8 <HAL_UART_MspInit+0x2e4>)
    __HAL_RCC_UART5_CLK_ENABLE();
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
 80059ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80059f4:	9205      	str	r2, [sp, #20]
 80059f6:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059fa:	433a      	orrs	r2, r7
 80059fc:	631a      	str	r2, [r3, #48]	; 0x30
 80059fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a00:	403a      	ands	r2, r7
 8005a02:	9206      	str	r2, [sp, #24]
 8005a04:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a08:	f042 0204 	orr.w	r2, r2, #4
 8005a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005a10:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	9307      	str	r3, [sp, #28]
 8005a1a:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1c:	e9cd 7414 	strd	r7, r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005a20:	e9cd 6816 	strd	r6, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a24:	f004 f8b6 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a28:	2301      	movs	r3, #1
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005a2a:	4e31      	ldr	r6, [pc, #196]	; (8005af0 <HAL_UART_MspInit+0x2ec>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a2c:	a913      	add	r1, sp, #76	; 0x4c
 8005a2e:	482f      	ldr	r0, [pc, #188]	; (8005aec <HAL_UART_MspInit+0x2e8>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005a30:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a32:	e9cd 9713 	strd	r9, r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005a36:	e9cd 7816 	strd	r7, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a3a:	f004 f8ab 	bl	8009b94 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8005a3e:	4f2d      	ldr	r7, [pc, #180]	; (8005af4 <HAL_UART_MspInit+0x2f0>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005a40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a44:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005a48:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005a4c:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a4e:	6132      	str	r2, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8005a50:	61f3      	str	r3, [r6, #28]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a52:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a56:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a5a:	e9c6 4408 	strd	r4, r4, [r6, #32]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8005a5e:	e9c6 7100 	strd	r7, r1, [r6]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8005a62:	f002 f8dd 	bl	8007c20 <HAL_DMA_Init>
 8005a66:	2800      	cmp	r0, #0
 8005a68:	f040 8167 	bne.w	8005d3a <HAL_UART_MspInit+0x536>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005a6c:	4c22      	ldr	r4, [pc, #136]	; (8005af8 <HAL_UART_MspInit+0x2f4>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6e:	2300      	movs	r3, #0
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005a70:	4822      	ldr	r0, [pc, #136]	; (8005afc <HAL_UART_MspInit+0x2f8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8005a72:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a76:	2140      	movs	r1, #64	; 0x40
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8005a7c:	6020      	str	r0, [r4, #0]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005a7e:	4620      	mov	r0, r4
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8005a80:	672e      	str	r6, [r5, #112]	; 0x70
 8005a82:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a84:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a86:	e9c4 7101 	strd	r7, r1, [r4, #4]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a8a:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a8e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a92:	e9c4 3307 	strd	r3, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8005a96:	f002 f8c3 	bl	8007c20 <HAL_DMA_Init>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 814a 	bne.w	8005d34 <HAL_UART_MspInit+0x530>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	2107      	movs	r1, #7
 8005aa4:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8005aa6:	66ec      	str	r4, [r5, #108]	; 0x6c
 8005aa8:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8005aaa:	f001 fda9 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005aae:	2035      	movs	r0, #53	; 0x35
 8005ab0:	f001 fdf0 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 8005ab4:	b03d      	add	sp, #244	; 0xf4
 8005ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005aba:	bf00      	nop
 8005abc:	40004c00 	.word	0x40004c00
 8005ac0:	40005000 	.word	0x40005000
 8005ac4:	40007800 	.word	0x40007800
 8005ac8:	40007c00 	.word	0x40007c00
 8005acc:	40004400 	.word	0x40004400
 8005ad0:	40004800 	.word	0x40004800
 8005ad4:	40011400 	.word	0x40011400
 8005ad8:	40023800 	.word	0x40023800
 8005adc:	2001b594 	.word	0x2001b594
 8005ae0:	40021000 	.word	0x40021000
 8005ae4:	40020000 	.word	0x40020000
 8005ae8:	40020400 	.word	0x40020400
 8005aec:	40020800 	.word	0x40020800
 8005af0:	2001b9e0 	.word	0x2001b9e0
 8005af4:	40026010 	.word	0x40026010
 8005af8:	2001badc 	.word	0x2001badc
 8005afc:	400260b8 	.word	0x400260b8
 8005b00:	400260a0 	.word	0x400260a0
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b08:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8005b0a:	942f      	str	r4, [sp, #188]	; 0xbc
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8005b0c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b0e:	f006 fb5f 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8005b12:	2800      	cmp	r0, #0
 8005b14:	f040 8117 	bne.w	8005d46 <HAL_UART_MspInit+0x542>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005b18:	4b91      	ldr	r3, [pc, #580]	; (8005d60 <HAL_UART_MspInit+0x55c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b1a:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b1c:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b1e:	2000      	movs	r0, #0
    __HAL_RCC_UART7_CLK_ENABLE();
 8005b20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8005b22:	2401      	movs	r4, #1
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005b24:	2508      	movs	r5, #8
    __HAL_RCC_UART7_CLK_ENABLE();
 8005b26:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005b2a:	641a      	str	r2, [r3, #64]	; 0x40
 8005b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005b32:	9208      	str	r2, [sp, #32]
 8005b34:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b38:	f042 0220 	orr.w	r2, r2, #32
 8005b3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005b40:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b42:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b44:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b48:	e9cd 6014 	strd	r6, r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b4c:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b4e:	4885      	ldr	r0, [pc, #532]	; (8005d64 <HAL_UART_MspInit+0x560>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005b50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005b52:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b56:	f004 f81d 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b5a:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b5c:	a913      	add	r1, sp, #76	; 0x4c
 8005b5e:	4881      	ldr	r0, [pc, #516]	; (8005d64 <HAL_UART_MspInit+0x560>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005b60:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b62:	e9cd 6414 	strd	r6, r4, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005b66:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005b6a:	f004 f813 	bl	8009b94 <HAL_GPIO_Init>
}
 8005b6e:	b03d      	add	sp, #244	; 0xf4
 8005b70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b74:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b76:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b78:	942a      	str	r4, [sp, #168]	; 0xa8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b7a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005b7c:	f006 fb28 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8005b80:	2800      	cmp	r0, #0
 8005b82:	f040 80e9 	bne.w	8005d58 <HAL_UART_MspInit+0x554>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b86:	4b76      	ldr	r3, [pc, #472]	; (8005d60 <HAL_UART_MspInit+0x55c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b88:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005b8a:	2670      	movs	r6, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8c:	2500      	movs	r5, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b90:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b92:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b94:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005b98:	641a      	str	r2, [r3, #64]	; 0x40
 8005b9a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b9c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005ba0:	920c      	str	r2, [sp, #48]	; 0x30
 8005ba2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ba4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba6:	f042 0208 	orr.w	r2, r2, #8
 8005baa:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bac:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bb0:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bb2:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bb6:	486c      	ldr	r0, [pc, #432]	; (8005d68 <HAL_UART_MspInit+0x564>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8005bb8:	9613      	str	r6, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bba:	930d      	str	r3, [sp, #52]	; 0x34
 8005bbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005bbe:	9217      	str	r2, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc0:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bc4:	f003 ffe6 	bl	8009b94 <HAL_GPIO_Init>
 8005bc8:	e646      	b.n	8005858 <HAL_UART_MspInit+0x54>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005bca:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bce:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005bd0:	942b      	str	r4, [sp, #172]	; 0xac
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005bd2:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005bd4:	f006 fafc 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8005bd8:	2800      	cmp	r0, #0
 8005bda:	f040 809f 	bne.w	8005d1c <HAL_UART_MspInit+0x518>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005bde:	4b60      	ldr	r3, [pc, #384]	; (8005d60 <HAL_UART_MspInit+0x55c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005be0:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005be2:	f44f 7640 	mov.w	r6, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005be6:	2500      	movs	r5, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8005be8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bea:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bec:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8005bee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8005bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf6:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8005bfa:	920e      	str	r2, [sp, #56]	; 0x38
 8005bfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005bfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c00:	f042 0208 	orr.w	r2, r2, #8
 8005c04:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c06:	2207      	movs	r2, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c0a:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c0c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c10:	4855      	ldr	r0, [pc, #340]	; (8005d68 <HAL_UART_MspInit+0x564>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005c12:	9613      	str	r6, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c14:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c18:	9217      	str	r2, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c1a:	e9cd 5415 	strd	r5, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c1e:	f003 ffb9 	bl	8009b94 <HAL_GPIO_Init>
 8005c22:	e619      	b.n	8005858 <HAL_UART_MspInit+0x54>
      Error_Handler();
 8005c24:	f7fd f846 	bl	8002cb4 <Error_Handler>
 8005c28:	e67e      	b.n	8005928 <HAL_UART_MspInit+0x124>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c2e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8005c30:	942e      	str	r4, [sp, #184]	; 0xb8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8005c32:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c34:	f006 facc 	bl	800c1d0 <HAL_RCCEx_PeriphCLKConfig>
 8005c38:	2800      	cmp	r0, #0
 8005c3a:	d178      	bne.n	8005d2e <HAL_UART_MspInit+0x52a>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c3c:	4b48      	ldr	r3, [pc, #288]	; (8005d60 <HAL_UART_MspInit+0x55c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005c3e:	2040      	movs	r0, #64	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c40:	2400      	movs	r4, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c42:	2602      	movs	r6, #2
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c46:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c48:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART6_CLK_ENABLE();
 8005c4a:	f042 0220 	orr.w	r2, r2, #32
 8005c4e:	645a      	str	r2, [r3, #68]	; 0x44
 8005c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c52:	f002 0220 	and.w	r2, r2, #32
 8005c56:	9210      	str	r2, [sp, #64]	; 0x40
 8005c58:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c5c:	f042 0204 	orr.w	r2, r2, #4
 8005c60:	631a      	str	r2, [r3, #48]	; 0x30
 8005c62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c64:	f002 0204 	and.w	r2, r2, #4
 8005c68:	9211      	str	r2, [sp, #68]	; 0x44
 8005c6a:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6e:	4302      	orrs	r2, r0
 8005c70:	631a      	str	r2, [r3, #48]	; 0x30
 8005c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005c74:	9013      	str	r0, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c76:	4003      	ands	r3, r0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c78:	483c      	ldr	r0, [pc, #240]	; (8005d6c <HAL_UART_MspInit+0x568>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c7a:	9614      	str	r6, [sp, #80]	; 0x50
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005c7c:	9312      	str	r3, [sp, #72]	; 0x48
 8005c7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c80:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c82:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c86:	f003 ff85 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c8a:	f44f 7200 	mov.w	r2, #512	; 0x200
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c8e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005c90:	a913      	add	r1, sp, #76	; 0x4c
 8005c92:	4837      	ldr	r0, [pc, #220]	; (8005d70 <HAL_UART_MspInit+0x56c>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c94:	9614      	str	r6, [sp, #80]	; 0x50
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005c96:	4e37      	ldr	r6, [pc, #220]	; (8005d74 <HAL_UART_MspInit+0x570>)
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005c98:	9213      	str	r2, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c9a:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005c9c:	e9cd 4716 	strd	r4, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005ca0:	f003 ff78 	bl	8009b94 <HAL_GPIO_Init>
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005ca4:	f04f 6720 	mov.w	r7, #167772160	; 0xa000000
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005ca8:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 8005d80 <HAL_UART_MspInit+0x57c>
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cac:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8005cb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005cb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005cb8:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cba:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cbc:	6131      	str	r1, [r6, #16]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cbe:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cc2:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8005cc6:	e9c6 c700 	strd	ip, r7, [r6]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005cca:	e9c6 2307 	strd	r2, r3, [r6, #28]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8005cce:	f001 ffa7 	bl	8007c20 <HAL_DMA_Init>
 8005cd2:	bb48      	cbnz	r0, 8005d28 <HAL_UART_MspInit+0x524>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005cd4:	4c28      	ldr	r4, [pc, #160]	; (8005d78 <HAL_UART_MspInit+0x574>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005cd6:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cda:	2240      	movs	r2, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005ce0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005ce4:	4f25      	ldr	r7, [pc, #148]	; (8005d7c <HAL_UART_MspInit+0x578>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005ce6:	672e      	str	r6, [r5, #112]	; 0x70
 8005ce8:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005cea:	2604      	movs	r6, #4
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8005cec:	6061      	str	r1, [r4, #4]
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005cee:	2103      	movs	r1, #3
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cf0:	60a2      	str	r2, [r4, #8]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005cf2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005cf6:	6123      	str	r3, [r4, #16]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cf8:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005cfa:	6220      	str	r0, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005cfc:	4620      	mov	r0, r4
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8005cfe:	6027      	str	r7, [r4, #0]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005d00:	62e2      	str	r2, [r4, #44]	; 0x2c
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d02:	60e3      	str	r3, [r4, #12]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8005d04:	61e3      	str	r3, [r4, #28]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005d06:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005d08:	e9c4 6109 	strd	r6, r1, [r4, #36]	; 0x24
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d0c:	e9c4 3305 	strd	r3, r3, [r4, #20]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8005d10:	f001 ff86 	bl	8007c20 <HAL_DMA_Init>
 8005d14:	b928      	cbnz	r0, 8005d22 <HAL_UART_MspInit+0x51e>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8005d16:	66ec      	str	r4, [r5, #108]	; 0x6c
 8005d18:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8005d1a:	e59d      	b.n	8005858 <HAL_UART_MspInit+0x54>
      Error_Handler();
 8005d1c:	f7fc ffca 	bl	8002cb4 <Error_Handler>
 8005d20:	e75d      	b.n	8005bde <HAL_UART_MspInit+0x3da>
      Error_Handler();
 8005d22:	f7fc ffc7 	bl	8002cb4 <Error_Handler>
 8005d26:	e7f6      	b.n	8005d16 <HAL_UART_MspInit+0x512>
      Error_Handler();
 8005d28:	f7fc ffc4 	bl	8002cb4 <Error_Handler>
 8005d2c:	e7d2      	b.n	8005cd4 <HAL_UART_MspInit+0x4d0>
      Error_Handler();
 8005d2e:	f7fc ffc1 	bl	8002cb4 <Error_Handler>
 8005d32:	e783      	b.n	8005c3c <HAL_UART_MspInit+0x438>
      Error_Handler();
 8005d34:	f7fc ffbe 	bl	8002cb4 <Error_Handler>
 8005d38:	e6b2      	b.n	8005aa0 <HAL_UART_MspInit+0x29c>
      Error_Handler();
 8005d3a:	f7fc ffbb 	bl	8002cb4 <Error_Handler>
 8005d3e:	e695      	b.n	8005a6c <HAL_UART_MspInit+0x268>
      Error_Handler();
 8005d40:	f7fc ffb8 	bl	8002cb4 <Error_Handler>
 8005d44:	e645      	b.n	80059d2 <HAL_UART_MspInit+0x1ce>
      Error_Handler();
 8005d46:	f7fc ffb5 	bl	8002cb4 <Error_Handler>
 8005d4a:	e6e5      	b.n	8005b18 <HAL_UART_MspInit+0x314>
      Error_Handler();
 8005d4c:	f7fc ffb2 	bl	8002cb4 <Error_Handler>
 8005d50:	e58f      	b.n	8005872 <HAL_UART_MspInit+0x6e>
      Error_Handler();
 8005d52:	f7fc ffaf 	bl	8002cb4 <Error_Handler>
 8005d56:	e5d2      	b.n	80058fe <HAL_UART_MspInit+0xfa>
      Error_Handler();
 8005d58:	f7fc ffac 	bl	8002cb4 <Error_Handler>
 8005d5c:	e713      	b.n	8005b86 <HAL_UART_MspInit+0x382>
 8005d5e:	bf00      	nop
 8005d60:	40023800 	.word	0x40023800
 8005d64:	40021400 	.word	0x40021400
 8005d68:	40020c00 	.word	0x40020c00
 8005d6c:	40020800 	.word	0x40020800
 8005d70:	40021800 	.word	0x40021800
 8005d74:	2001af2c 	.word	0x2001af2c
 8005d78:	2001b4a4 	.word	0x2001b4a4
 8005d7c:	400264a0 	.word	0x400264a0
 8005d80:	40026428 	.word	0x40026428

08005d84 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8005d84:	4a4f      	ldr	r2, [pc, #316]	; (8005ec4 <HAL_UART_MspDeInit+0x140>)
 8005d86:	6803      	ldr	r3, [r0, #0]
 8005d88:	4293      	cmp	r3, r2
{
 8005d8a:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8005d8c:	d025      	beq.n	8005dda <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8005d8e:	4a4e      	ldr	r2, [pc, #312]	; (8005ec8 <HAL_UART_MspDeInit+0x144>)
 8005d90:	4604      	mov	r4, r0
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d038      	beq.n	8005e08 <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8005d96:	4a4d      	ldr	r2, [pc, #308]	; (8005ecc <HAL_UART_MspDeInit+0x148>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d050      	beq.n	8005e3e <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8005d9c:	4a4c      	ldr	r2, [pc, #304]	; (8005ed0 <HAL_UART_MspDeInit+0x14c>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8005da2:	4a4c      	ldr	r2, [pc, #304]	; (8005ed4 <HAL_UART_MspDeInit+0x150>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d056      	beq.n	8005e56 <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8005da8:	4a4b      	ldr	r2, [pc, #300]	; (8005ed8 <HAL_UART_MspDeInit+0x154>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d062      	beq.n	8005e74 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8005dae:	4a4b      	ldr	r2, [pc, #300]	; (8005edc <HAL_UART_MspDeInit+0x158>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d06c      	beq.n	8005e8e <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8005db4:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 8005db6:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8005dba:	2103      	movs	r1, #3
 8005dbc:	4848      	ldr	r0, [pc, #288]	; (8005ee0 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8005dbe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005dc0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005dc4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8005dc6:	f004 f889 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005dca:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005dcc:	f002 f8dc 	bl	8007f88 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8005dd0:	2053      	movs	r0, #83	; 0x53
}
 8005dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8005dd6:	f001 bc71 	b.w	80076bc <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8005dda:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005dde:	f248 0101 	movw	r1, #32769	; 0x8001
 8005de2:	4840      	ldr	r0, [pc, #256]	; (8005ee4 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8005de4:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005de6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8005dea:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8005dec:	f004 f876 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8005df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005df4:	483c      	ldr	r0, [pc, #240]	; (8005ee8 <HAL_UART_MspDeInit+0x164>)
 8005df6:	f004 f871 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8005dfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dfe:	483b      	ldr	r0, [pc, #236]	; (8005eec <HAL_UART_MspDeInit+0x168>)
}
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8005e04:	f004 b86a 	b.w	8009edc <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8005e08:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8005e0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e10:	4835      	ldr	r0, [pc, #212]	; (8005ee8 <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8005e12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e14:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005e18:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8005e1a:	f004 f85f 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8005e1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005e22:	4832      	ldr	r0, [pc, #200]	; (8005eec <HAL_UART_MspDeInit+0x168>)
 8005e24:	f004 f85a 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005e28:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005e2a:	f002 f8ad 	bl	8007f88 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005e2e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005e30:	f002 f8aa 	bl	8007f88 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8005e34:	2035      	movs	r0, #53	; 0x35
}
 8005e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8005e3a:	f001 bc3f 	b.w	80076bc <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8005e3e:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8005e42:	21c0      	movs	r1, #192	; 0xc0
 8005e44:	482a      	ldr	r0, [pc, #168]	; (8005ef0 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8005e46:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8005e4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8005e50:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8005e52:	f004 b843 	b.w	8009edc <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8005e56:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8005e5a:	4826      	ldr	r0, [pc, #152]	; (8005ef4 <HAL_UART_MspDeInit+0x170>)
 8005e5c:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8005e5e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005e64:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8005e66:	f004 f839 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005e6a:	2026      	movs	r0, #38	; 0x26
}
 8005e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005e70:	f001 bc24 	b.w	80076bc <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 8005e74:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005e78:	f44f 7140 	mov.w	r1, #768	; 0x300
 8005e7c:	481d      	ldr	r0, [pc, #116]	; (8005ef4 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8005e7e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8005e80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 8005e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8005e88:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8005e8a:	f004 b827 	b.w	8009edc <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8005e8e:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8005e92:	2140      	movs	r1, #64	; 0x40
 8005e94:	4815      	ldr	r0, [pc, #84]	; (8005eec <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8005e96:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005e98:	f023 0320 	bic.w	r3, r3, #32
 8005e9c:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8005e9e:	f004 f81d 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 8005ea2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ea6:	4814      	ldr	r0, [pc, #80]	; (8005ef8 <HAL_UART_MspDeInit+0x174>)
 8005ea8:	f004 f818 	bl	8009edc <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8005eac:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8005eae:	f002 f86b 	bl	8007f88 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005eb2:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8005eb4:	f002 f868 	bl	8007f88 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005eb8:	2047      	movs	r0, #71	; 0x47
}
 8005eba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8005ebe:	f001 bbfd 	b.w	80076bc <HAL_NVIC_DisableIRQ>
 8005ec2:	bf00      	nop
 8005ec4:	40004c00 	.word	0x40004c00
 8005ec8:	40005000 	.word	0x40005000
 8005ecc:	40007800 	.word	0x40007800
 8005ed0:	40007c00 	.word	0x40007c00
 8005ed4:	40004400 	.word	0x40004400
 8005ed8:	40004800 	.word	0x40004800
 8005edc:	40011400 	.word	0x40011400
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	40020000 	.word	0x40020000
 8005ee8:	40020400 	.word	0x40020400
 8005eec:	40020800 	.word	0x40020800
 8005ef0:	40021400 	.word	0x40021400
 8005ef4:	40020c00 	.word	0x40020c00
 8005ef8:	40021800 	.word	0x40021800

08005efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005efc:	b530      	push	{r4, r5, lr}
 8005efe:	4601      	mov	r1, r0
 8005f00:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8005f02:	2200      	movs	r2, #0
 8005f04:	202b      	movs	r0, #43	; 0x2b
 8005f06:	f001 fb7b 	bl	8007600 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8005f0a:	202b      	movs	r0, #43	; 0x2b
 8005f0c:	f001 fbc2 	bl	8007694 <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005f10:	4b15      	ldr	r3, [pc, #84]	; (8005f68 <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f12:	a901      	add	r1, sp, #4
 8005f14:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005f16:	6c1a      	ldr	r2, [r3, #64]	; 0x40

  /* Compute TIM12 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f18:	4d14      	ldr	r5, [pc, #80]	; (8005f6c <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8005f1e:	4c14      	ldr	r4, [pc, #80]	; (8005f70 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
 8005f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f28:	9302      	str	r3, [sp, #8]
 8005f2a:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005f2c:	f006 f92e 	bl	800c18c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005f30:	f006 f90c 	bl	800c14c <HAL_RCC_GetPCLK1Freq>
  + Period = [(TIM12CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8005f34:	f240 32e7 	movw	r2, #999	; 0x3e7
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005f38:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8005f3a:	490e      	ldr	r1, [pc, #56]	; (8005f74 <HAL_InitTick+0x78>)
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8005f3c:	60e2      	str	r2, [r4, #12]
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8005f3e:	2200      	movs	r2, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f40:	fba5 0303 	umull	r0, r3, r5, r3
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8005f44:	4620      	mov	r0, r4
  htim12.Instance = TIM12;
 8005f46:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f48:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.ClockDivision = 0;
 8005f4a:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f4c:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005f4e:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8005f50:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8005f52:	f008 fc17 	bl	800e784 <HAL_TIM_Base_Init>
 8005f56:	b110      	cbz	r0, 8005f5e <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8005f58:	2001      	movs	r0, #1
}
 8005f5a:	b009      	add	sp, #36	; 0x24
 8005f5c:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f007 fdea 	bl	800db38 <HAL_TIM_Base_Start_IT>
}
 8005f64:	b009      	add	sp, #36	; 0x24
 8005f66:	bd30      	pop	{r4, r5, pc}
 8005f68:	40023800 	.word	0x40023800
 8005f6c:	431bde83 	.word	0x431bde83
 8005f70:	2001bdcc 	.word	0x2001bdcc
 8005f74:	40001800 	.word	0x40001800

08005f78 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005f7c:	e7fe      	b.n	8005f7c <HardFault_Handler>
 8005f7e:	bf00      	nop

08005f80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005f80:	e7fe      	b.n	8005f80 <MemManage_Handler>
 8005f82:	bf00      	nop

08005f84 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f84:	e7fe      	b.n	8005f84 <BusFault_Handler>
 8005f86:	bf00      	nop

08005f88 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f88:	e7fe      	b.n	8005f88 <UsageFault_Handler>
 8005f8a:	bf00      	nop

08005f8c <RCC_IRQHandler>:
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop

08005f90 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8005f90:	4801      	ldr	r0, [pc, #4]	; (8005f98 <DMA1_Stream0_IRQHandler+0x8>)
 8005f92:	f002 b969 	b.w	8008268 <HAL_DMA_IRQHandler>
 8005f96:	bf00      	nop
 8005f98:	2001b9e0 	.word	0x2001b9e0

08005f9c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8005f9c:	4801      	ldr	r0, [pc, #4]	; (8005fa4 <DMA1_Stream1_IRQHandler+0x8>)
 8005f9e:	f002 b963 	b.w	8008268 <HAL_DMA_IRQHandler>
 8005fa2:	bf00      	nop
 8005fa4:	2001b2b0 	.word	0x2001b2b0

08005fa8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8005fa8:	4801      	ldr	r0, [pc, #4]	; (8005fb0 <DMA1_Stream5_IRQHandler+0x8>)
 8005faa:	f002 b95d 	b.w	8008268 <HAL_DMA_IRQHandler>
 8005fae:	bf00      	nop
 8005fb0:	2001b3c0 	.word	0x2001b3c0

08005fb4 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8005fb4:	4801      	ldr	r0, [pc, #4]	; (8005fbc <DMA1_Stream6_IRQHandler+0x8>)
 8005fb6:	f002 b957 	b.w	8008268 <HAL_DMA_IRQHandler>
 8005fba:	bf00      	nop
 8005fbc:	2001b594 	.word	0x2001b594

08005fc0 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8005fc0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8005fc2:	4805      	ldr	r0, [pc, #20]	; (8005fd8 <ADC_IRQHandler+0x18>)
 8005fc4:	f001 f8f6 	bl	80071b4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8005fc8:	4804      	ldr	r0, [pc, #16]	; (8005fdc <ADC_IRQHandler+0x1c>)
 8005fca:	f001 f8f3 	bl	80071b4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8005fce:	4804      	ldr	r0, [pc, #16]	; (8005fe0 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8005fd0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8005fd4:	f001 b8ee 	b.w	80071b4 <HAL_ADC_IRQHandler>
 8005fd8:	2001b504 	.word	0x2001b504
 8005fdc:	2001b144 	.word	0x2001b144
 8005fe0:	2001b54c 	.word	0x2001b54c

08005fe4 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005fe4:	4801      	ldr	r0, [pc, #4]	; (8005fec <TIM2_IRQHandler+0x8>)
 8005fe6:	f008 ba4d 	b.w	800e484 <HAL_TIM_IRQHandler>
 8005fea:	bf00      	nop
 8005fec:	2001b910 	.word	0x2001b910

08005ff0 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005ff0:	4801      	ldr	r0, [pc, #4]	; (8005ff8 <TIM3_IRQHandler+0x8>)
 8005ff2:	f008 ba47 	b.w	800e484 <HAL_TIM_IRQHandler>
 8005ff6:	bf00      	nop
 8005ff8:	2001b310 	.word	0x2001b310

08005ffc <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005ffc:	4801      	ldr	r0, [pc, #4]	; (8006004 <USART2_IRQHandler+0x8>)
 8005ffe:	f00a bc1f 	b.w	8010840 <HAL_UART_IRQHandler>
 8006002:	bf00      	nop
 8006004:	2001b95c 	.word	0x2001b95c

08006008 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006008:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800600c:	f004 b8a2 	b.w	800a154 <HAL_GPIO_EXTI_IRQHandler>

08006010 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8006010:	4801      	ldr	r0, [pc, #4]	; (8006018 <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8006012:	f008 ba37 	b.w	800e484 <HAL_TIM_IRQHandler>
 8006016:	bf00      	nop
 8006018:	2001bdcc 	.word	0x2001bdcc

0800601c <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800601c:	4801      	ldr	r0, [pc, #4]	; (8006024 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 800601e:	f008 ba31 	b.w	800e484 <HAL_TIM_IRQHandler>
 8006022:	bf00      	nop
 8006024:	2001ba40 	.word	0x2001ba40

08006028 <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8006028:	4801      	ldr	r0, [pc, #4]	; (8006030 <DMA1_Stream7_IRQHandler+0x8>)
 800602a:	f002 b91d 	b.w	8008268 <HAL_DMA_IRQHandler>
 800602e:	bf00      	nop
 8006030:	2001badc 	.word	0x2001badc

08006034 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006034:	4801      	ldr	r0, [pc, #4]	; (800603c <TIM5_IRQHandler+0x8>)
 8006036:	f008 ba25 	b.w	800e484 <HAL_TIM_IRQHandler>
 800603a:	bf00      	nop
 800603c:	2001b264 	.word	0x2001b264

08006040 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006040:	4801      	ldr	r0, [pc, #4]	; (8006048 <UART5_IRQHandler+0x8>)
 8006042:	f00a bbfd 	b.w	8010840 <HAL_UART_IRQHandler>
 8006046:	bf00      	nop
 8006048:	2001b420 	.word	0x2001b420

0800604c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 800604c:	4804      	ldr	r0, [pc, #16]	; (8006060 <TIM6_DAC_IRQHandler+0x14>)
{
 800604e:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8006050:	f001 fd30 	bl	8007ab4 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006054:	4803      	ldr	r0, [pc, #12]	; (8006064 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006056:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 800605a:	f008 ba13 	b.w	800e484 <HAL_TIM_IRQHandler>
 800605e:	bf00      	nop
 8006060:	2001b5f4 	.word	0x2001b5f4
 8006064:	2001b6d4 	.word	0x2001b6d4

08006068 <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006068:	4801      	ldr	r0, [pc, #4]	; (8006070 <DMA2_Stream1_IRQHandler+0x8>)
 800606a:	f002 b8fd 	b.w	8008268 <HAL_DMA_IRQHandler>
 800606e:	bf00      	nop
 8006070:	2001af2c 	.word	0x2001af2c

08006074 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006074:	4801      	ldr	r0, [pc, #4]	; (800607c <DMA2_Stream4_IRQHandler+0x8>)
 8006076:	f002 b8f7 	b.w	8008268 <HAL_DMA_IRQHandler>
 800607a:	bf00      	nop
 800607c:	2001b670 	.word	0x2001b670

08006080 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006080:	4801      	ldr	r0, [pc, #4]	; (8006088 <ETH_IRQHandler+0x8>)
 8006082:	f003 b893 	b.w	80091ac <HAL_ETH_IRQHandler>
 8006086:	bf00      	nop
 8006088:	2001dc08 	.word	0x2001dc08

0800608c <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800608c:	4801      	ldr	r0, [pc, #4]	; (8006094 <OTG_FS_IRQHandler+0x8>)
 800608e:	f004 bf55 	b.w	800af3c <HAL_PCD_IRQHandler>
 8006092:	bf00      	nop
 8006094:	2002f9c0 	.word	0x2002f9c0

08006098 <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006098:	4801      	ldr	r0, [pc, #4]	; (80060a0 <DMA2_Stream6_IRQHandler+0x8>)
 800609a:	f002 b8e5 	b.w	8008268 <HAL_DMA_IRQHandler>
 800609e:	bf00      	nop
 80060a0:	2001b4a4 	.word	0x2001b4a4

080060a4 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80060a4:	4801      	ldr	r0, [pc, #4]	; (80060ac <USART6_IRQHandler+0x8>)
 80060a6:	f00a bbcb 	b.w	8010840 <HAL_UART_IRQHandler>
 80060aa:	bf00      	nop
 80060ac:	2001b804 	.word	0x2001b804

080060b0 <FPU_IRQHandler>:
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop

080060b4 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80060b4:	4801      	ldr	r0, [pc, #4]	; (80060bc <UART8_IRQHandler+0x8>)
 80060b6:	f00a bbc3 	b.w	8010840 <HAL_UART_IRQHandler>
 80060ba:	bf00      	nop
 80060bc:	2001b780 	.word	0x2001b780

080060c0 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 80060c0:	2001      	movs	r0, #1
 80060c2:	4770      	bx	lr

080060c4 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <_kill+0xc>)
 80060c6:	2216      	movs	r2, #22
	return -1;
}
 80060c8:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 80060cc:	601a      	str	r2, [r3, #0]
}
 80060ce:	4770      	bx	lr
 80060d0:	2002e4e8 	.word	0x2002e4e8

080060d4 <_exit>:
	errno = EINVAL;
 80060d4:	4b01      	ldr	r3, [pc, #4]	; (80060dc <_exit+0x8>)
 80060d6:	2216      	movs	r2, #22
 80060d8:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 80060da:	e7fe      	b.n	80060da <_exit+0x6>
 80060dc:	2002e4e8 	.word	0x2002e4e8

080060e0 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80060e0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060e2:	1e16      	subs	r6, r2, #0
 80060e4:	dd07      	ble.n	80060f6 <_read+0x16>
 80060e6:	460c      	mov	r4, r1
 80060e8:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 80060ea:	f3af 8000 	nop.w
 80060ee:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80060f2:	42a5      	cmp	r5, r4
 80060f4:	d1f9      	bne.n	80060ea <_read+0xa>
	}

	return len;
}
 80060f6:	4630      	mov	r0, r6
 80060f8:	bd70      	pop	{r4, r5, r6, pc}
 80060fa:	bf00      	nop

080060fc <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 80060fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop

08006104 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006108:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 800610a:	604b      	str	r3, [r1, #4]
}
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8006110:	2001      	movs	r0, #1
 8006112:	4770      	bx	lr

08006114 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006114:	2000      	movs	r0, #0
 8006116:	4770      	bx	lr

08006118 <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006118:	490d      	ldr	r1, [pc, #52]	; (8006150 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 800611a:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 800611c:	4a0d      	ldr	r2, [pc, #52]	; (8006154 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 800611e:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8006120:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006122:	4c0d      	ldr	r4, [pc, #52]	; (8006158 <_sbrk+0x40>)
 8006124:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8006126:	b170      	cbz	r0, 8006146 <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006128:	4403      	add	r3, r0
 800612a:	4293      	cmp	r3, r2
 800612c:	d803      	bhi.n	8006136 <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 800612e:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8006132:	600b      	str	r3, [r1, #0]
}
 8006134:	4770      	bx	lr
		errno = ENOMEM;
 8006136:	4b09      	ldr	r3, [pc, #36]	; (800615c <_sbrk+0x44>)
 8006138:	220c      	movs	r2, #12
		return (void*) -1;
 800613a:	f04f 30ff 	mov.w	r0, #4294967295
}
 800613e:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8006142:	601a      	str	r2, [r3, #0]
}
 8006144:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8006146:	4c06      	ldr	r4, [pc, #24]	; (8006160 <_sbrk+0x48>)
 8006148:	4620      	mov	r0, r4
 800614a:	600c      	str	r4, [r1, #0]
 800614c:	e7ec      	b.n	8006128 <_sbrk+0x10>
 800614e:	bf00      	nop
 8006150:	20001cd0 	.word	0x20001cd0
 8006154:	20080000 	.word	0x20080000
 8006158:	00006800 	.word	0x00006800
 800615c:	2002e4e8 	.word	0x2002e4e8
 8006160:	2002fdd0 	.word	0x2002fdd0

08006164 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006164:	4a0f      	ldr	r2, [pc, #60]	; (80061a4 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8006166:	4b10      	ldr	r3, [pc, #64]	; (80061a8 <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006168:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800616c:	490f      	ldr	r1, [pc, #60]	; (80061ac <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800616e:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8006172:	b470      	push	{r4, r5, r6}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006174:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8006178:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 800617a:	6818      	ldr	r0, [r3, #0]

	/* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800617c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
	RCC->PLLCFGR = 0x24003010;
 8006180:	4e0b      	ldr	r6, [pc, #44]	; (80061b0 <SystemInit+0x4c>)
	RCC->CR |= (uint32_t) 0x00000001;
 8006182:	f040 0001 	orr.w	r0, r0, #1
 8006186:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8006188:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 800618a:	6818      	ldr	r0, [r3, #0]
 800618c:	4001      	ands	r1, r0
 800618e:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8006190:	605e      	str	r6, [r3, #4]
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006192:	6819      	ldr	r1, [r3, #0]
 8006194:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006198:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 800619a:	60dc      	str	r4, [r3, #12]
	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800619c:	6095      	str	r5, [r2, #8]
#endif
}
 800619e:	bc70      	pop	{r4, r5, r6}
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	e000ed00 	.word	0xe000ed00
 80061a8:	40023800 	.word	0x40023800
 80061ac:	fef6ffff 	.word	0xfef6ffff
 80061b0:	24003010 	.word	0x24003010

080061b4 <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 80061b4:	680b      	ldr	r3, [r1, #0]
 80061b6:	4a03      	ldr	r2, [pc, #12]	; (80061c4 <dnsfound+0x10>)
 80061b8:	2b00      	cmp	r3, #0
		ip_ready = -1;
 80061ba:	bf08      	it	eq
 80061bc:	f04f 33ff 	moveq.w	r3, #4294967295
 80061c0:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 80061c2:	4770      	bx	lr
 80061c4:	20001cdc 	.word	0x20001cdc

080061c8 <myreboot>:
void myreboot(char *msg) {
 80061c8:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 80061ca:	480a      	ldr	r0, [pc, #40]	; (80061f4 <myreboot+0x2c>)
void myreboot(char *msg) {
 80061cc:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 80061ce:	f01c ff89 	bl	80230e4 <iprintf>
	osDelay(2000);
 80061d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80061d6:	f00d fa25 	bl	8013624 <osDelay>
  __ASM volatile ("dsb 0xF":::"memory");
 80061da:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061de:	4906      	ldr	r1, [pc, #24]	; (80061f8 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80061e2:	68ca      	ldr	r2, [r1, #12]
 80061e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80061e8:	4313      	orrs	r3, r2
 80061ea:	60cb      	str	r3, [r1, #12]
 80061ec:	f3bf 8f4f 	dsb	sy
    __NOP();
 80061f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80061f2:	e7fd      	b.n	80061f0 <myreboot+0x28>
 80061f4:	080290bc 	.word	0x080290bc
 80061f8:	e000ed00 	.word	0xe000ed00
 80061fc:	05fa0004 	.word	0x05fa0004

08006200 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8006200:	b500      	push	{lr}
 8006202:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006204:	f241 3388 	movw	r3, #5000	; 0x1388
 8006208:	4a16      	ldr	r2, [pc, #88]	; (8006264 <sendudp+0x64>)
 800620a:	f018 f889 	bl	801e320 <udp_sendto>
 800620e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006212:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006216:	b943      	cbnz	r3, 800622a <sendudp+0x2a>
 8006218:	b25a      	sxtb	r2, r3
		busycount = 0;
 800621a:	4b13      	ldr	r3, [pc, #76]	; (8006268 <sendudp+0x68>)
 800621c:	601a      	str	r2, [r3, #0]
	return (err);
 800621e:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006222:	b240      	sxtb	r0, r0
 8006224:	b003      	add	sp, #12
 8006226:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 800622a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800622e:	480f      	ldr	r0, [pc, #60]	; (800626c <sendudp+0x6c>)
 8006230:	b249      	sxtb	r1, r1
 8006232:	f01c ff57 	bl	80230e4 <iprintf>
		vTaskDelay(100); //some delay!
 8006236:	2064      	movs	r0, #100	; 0x64
 8006238:	f00e fcaa 	bl	8014b90 <vTaskDelay>
		if (err == ERR_MEM) {
 800623c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006240:	2bff      	cmp	r3, #255	; 0xff
 8006242:	d00c      	beq.n	800625e <sendudp+0x5e>
		if (err == ERR_USE) {
 8006244:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006248:	2bf8      	cmp	r3, #248	; 0xf8
 800624a:	d1e8      	bne.n	800621e <sendudp+0x1e>
			if (busycount++ > 10)
 800624c:	4a06      	ldr	r2, [pc, #24]	; (8006268 <sendudp+0x68>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	1c59      	adds	r1, r3, #1
 8006252:	2b0a      	cmp	r3, #10
 8006254:	6011      	str	r1, [r2, #0]
 8006256:	dde2      	ble.n	800621e <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8006258:	4805      	ldr	r0, [pc, #20]	; (8006270 <sendudp+0x70>)
 800625a:	f7ff ffb5 	bl	80061c8 <myreboot>
			myreboot("sendudp: out of mem");
 800625e:	4805      	ldr	r0, [pc, #20]	; (8006274 <sendudp+0x74>)
 8006260:	f7ff ffb2 	bl	80061c8 <myreboot>
 8006264:	2001be2c 	.word	0x2001be2c
 8006268:	20001cd4 	.word	0x20001cd4
 800626c:	080290d0 	.word	0x080290d0
 8006270:	080290f8 	.word	0x080290f8
 8006274:	080290e4 	.word	0x080290e4

08006278 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006278:	4b28      	ldr	r3, [pc, #160]	; (800631c <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 800627a:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800633c <sendstatus+0xc4>
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800627e:	f9b3 3000 	ldrsh.w	r3, [r3]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006282:	f8dc c000 	ldr.w	ip, [ip]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006286:	b5f0      	push	{r4, r5, r6, r7, lr}
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006288:	4c25      	ldr	r4, [pc, #148]	; (8006320 <sendstatus+0xa8>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 800628a:	4607      	mov	r7, r0
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800628c:	ea83 75e3 	eor.w	r5, r3, r3, asr #31
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006290:	4610      	mov	r0, r2
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006292:	f9b4 4000 	ldrsh.w	r4, [r4]
 8006296:	f3cc 0c0b 	ubfx	ip, ip, #0, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800629a:	4a22      	ldr	r2, [pc, #136]	; (8006324 <sendstatus+0xac>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 800629c:	eba5 75e3 	sub.w	r5, r5, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80062a0:	2c07      	cmp	r4, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062a2:	ea4f 3404 	mov.w	r4, r4, lsl #12
 80062a6:	f8b2 e000 	ldrh.w	lr, [r2]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80062aa:	f3c5 050b 	ubfx	r5, r5, #0, #12
 80062ae:	4e1e      	ldr	r6, [pc, #120]	; (8006328 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062b0:	f404 42e0 	and.w	r2, r4, #28672	; 0x7000
 80062b4:	eba3 040e 	sub.w	r4, r3, lr
 80062b8:	bfc8      	it	gt
 80062ba:	f44c 5c80 	orrgt.w	ip, ip, #4096	; 0x1000
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 80062be:	f8a6 5072 	strh.w	r5, [r6, #114]	; 0x72
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 80062c2:	b083      	sub	sp, #12
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062c4:	2c00      	cmp	r4, #0
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062c6:	4d19      	ldr	r5, [pc, #100]	; (800632c <sendstatus+0xb4>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062c8:	4b19      	ldr	r3, [pc, #100]	; (8006330 <sendstatus+0xb8>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062ca:	682d      	ldr	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062cc:	bfb8      	it	lt
 80062ce:	4264      	neglt	r4, r4
 80062d0:	881b      	ldrh	r3, [r3, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 80062d2:	f8a6 c062 	strh.w	ip, [r6, #98]	; 0x62
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062d6:	022d      	lsls	r5, r5, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062d8:	441c      	add	r4, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062da:	f8df c064 	ldr.w	ip, [pc, #100]	; 8006340 <sendstatus+0xc8>
 80062de:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80062e0:	b2ad      	uxth	r5, r5
 80062e2:	f89c c000 	ldrb.w	ip, [ip]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062e6:	4314      	orrs	r4, r2
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062e8:	4a12      	ldr	r2, [pc, #72]	; (8006334 <sendstatus+0xbc>)
 80062ea:	ea45 050c 	orr.w	r5, r5, ip
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 80062ee:	b2a4      	uxth	r4, r4
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062f0:	401a      	ands	r2, r3
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 80062f2:	f8d1 c004 	ldr.w	ip, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80062f6:	f241 3388 	movw	r3, #5000	; 0x1388
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062fa:	4315      	orrs	r5, r2
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 80062fc:	4a0e      	ldr	r2, [pc, #56]	; (8006338 <sendstatus+0xc0>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 80062fe:	6775      	str	r5, [r6, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006300:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8006304:	f88c 7003 	strb.w	r7, [ip, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006308:	f7ff ff7a 	bl	8006200 <sendudp>
 800630c:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 8006310:	6833      	ldr	r3, [r6, #0]
 8006312:	3301      	adds	r3, #1
 8006314:	6033      	str	r3, [r6, #0]
}
 8006316:	b003      	add	sp, #12
 8006318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800631a:	bf00      	nop
 800631c:	20000740 	.word	0x20000740
 8006320:	20001cc4 	.word	0x20001cc4
 8006324:	200006f8 	.word	0x200006f8
 8006328:	2001adc0 	.word	0x2001adc0
 800632c:	200006f4 	.word	0x200006f4
 8006330:	20000002 	.word	0x20000002
 8006334:	ffff0000 	.word	0xffff0000
 8006338:	2001be2c 	.word	0x2001be2c
 800633c:	200006ec 	.word	0x200006ec
 8006340:	200006dc 	.word	0x200006dc

08006344 <sendtimedstatus>:
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8006344:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <sendtimedstatus+0x30>)
void sendtimedstatus(struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006346:	b470      	push	{r4, r5, r6}
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8006348:	4d0b      	ldr	r5, [pc, #44]	; (8006378 <sendtimedstatus+0x34>)
 800634a:	681c      	ldr	r4, [r3, #0]
 800634c:	682b      	ldr	r3, [r5, #0]
 800634e:	429c      	cmp	r4, r3
 8006350:	d006      	beq.n	8006360 <sendtimedstatus+0x1c>
 8006352:	4b0a      	ldr	r3, [pc, #40]	; (800637c <sendtimedstatus+0x38>)
 8006354:	4e0a      	ldr	r6, [pc, #40]	; (8006380 <sendtimedstatus+0x3c>)
 8006356:	fb03 f304 	mul.w	r3, r3, r4
 800635a:	ebb6 0ff3 	cmp.w	r6, r3, ror #3
 800635e:	d201      	bcs.n	8006364 <sendtimedstatus+0x20>
}
 8006360:	bc70      	pop	{r4, r5, r6}
 8006362:	4770      	bx	lr
		sendstatus(TIMED, ps, pcb, batchid);
 8006364:	4613      	mov	r3, r2
		talive = t1sec;
 8006366:	602c      	str	r4, [r5, #0]
		sendstatus(TIMED, ps, pcb, batchid);
 8006368:	460a      	mov	r2, r1
 800636a:	4601      	mov	r1, r0
 800636c:	2002      	movs	r0, #2
}
 800636e:	bc70      	pop	{r4, r5, r6}
		sendstatus(TIMED, ps, pcb, batchid);
 8006370:	f7ff bf82 	b.w	8006278 <sendstatus>
 8006374:	20001c64 	.word	0x20001c64
 8006378:	20001ce0 	.word	0x20001ce0
 800637c:	eeeeeeef 	.word	0xeeeeeeef
 8006380:	02222222 	.word	0x02222222

08006384 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8006384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006386:	4604      	mov	r4, r0
 8006388:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 800638a:	4818      	ldr	r0, [pc, #96]	; (80063ec <dnslookup+0x68>)
 800638c:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 800638e:	4e18      	ldr	r6, [pc, #96]	; (80063f0 <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 8006390:	f01c fea8 	bl	80230e4 <iprintf>
	ip_ready = 0;
 8006394:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 8006396:	4620      	mov	r0, r4
 8006398:	4639      	mov	r1, r7
 800639a:	4a16      	ldr	r2, [pc, #88]	; (80063f4 <dnslookup+0x70>)
	ip_ready = 0;
 800639c:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 800639e:	f011 fc5b 	bl	8017c58 <dns_gethostbyname>
 80063a2:	4604      	mov	r4, r0

	switch (err) {
 80063a4:	3005      	adds	r0, #5
 80063a6:	d005      	beq.n	80063b4 <dnslookup+0x30>
 80063a8:	b114      	cbz	r4, 80063b0 <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80063aa:	4813      	ldr	r0, [pc, #76]	; (80063f8 <dnslookup+0x74>)
 80063ac:	f01c fe9a 	bl	80230e4 <iprintf>
		break;
	}
	return (err);
}
 80063b0:	4620      	mov	r0, r4
 80063b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80063b4:	4811      	ldr	r0, [pc, #68]	; (80063fc <dnslookup+0x78>)
 80063b6:	2514      	movs	r5, #20
 80063b8:	f01c fe94 	bl	80230e4 <iprintf>
		for (i = 0; i < 20; i++) {
 80063bc:	e001      	b.n	80063c2 <dnslookup+0x3e>
 80063be:	3d01      	subs	r5, #1
 80063c0:	d0f3      	beq.n	80063aa <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80063c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80063c6:	f00d f92d 	bl	8013624 <osDelay>
			printf(".");
 80063ca:	202e      	movs	r0, #46	; 0x2e
 80063cc:	f01c fea2 	bl	8023114 <putchar>
			if (ip_ready) {
 80063d0:	6833      	ldr	r3, [r6, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f3      	beq.n	80063be <dnslookup+0x3a>
				if (ip_ready == -1) {
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	d002      	beq.n	80063e0 <dnslookup+0x5c>
				return (ERR_OK);
 80063da:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 80063dc:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 80063de:	e7e7      	b.n	80063b0 <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 80063e0:	4b07      	ldr	r3, [pc, #28]	; (8006400 <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80063e2:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 80063e6:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80063e8:	e7e2      	b.n	80063b0 <dnslookup+0x2c>
 80063ea:	bf00      	nop
 80063ec:	08029114 	.word	0x08029114
 80063f0:	20001cdc 	.word	0x20001cdc
 80063f4:	080061b5 	.word	0x080061b5
 80063f8:	08029150 	.word	0x08029150
 80063fc:	08029128 	.word	0x08029128
 8006400:	08029144 	.word	0x08029144

08006404 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8006404:	b530      	push	{r4, r5, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8006406:	4914      	ldr	r1, [pc, #80]	; (8006458 <locateudp+0x54>)
{
 8006408:	b085      	sub	sp, #20
	printf("Finding %s for UDP streaming\n", udp_target);
 800640a:	4814      	ldr	r0, [pc, #80]	; (800645c <locateudp+0x58>)
 800640c:	f01c fe6a 	bl	80230e4 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 8006410:	4913      	ldr	r1, [pc, #76]	; (8006460 <locateudp+0x5c>)
 8006412:	4811      	ldr	r0, [pc, #68]	; (8006458 <locateudp+0x54>)
 8006414:	f7ff ffb6 	bl	8006384 <dnslookup>
 8006418:	b240      	sxtb	r0, r0
 800641a:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800641e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8006422:	b9a3      	cbnz	r3, 800644e <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8006424:	4b0e      	ldr	r3, [pc, #56]	; (8006460 <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8006426:	490f      	ldr	r1, [pc, #60]	; (8006464 <locateudp+0x60>)
	ip = udpdestip.addr;
 8006428:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 800642a:	480f      	ldr	r0, [pc, #60]	; (8006468 <locateudp+0x64>)
 800642c:	0e22      	lsrs	r2, r4, #24
 800642e:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8006432:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006436:	9201      	str	r2, [sp, #4]
 8006438:	b2e2      	uxtb	r2, r4
 800643a:	9500      	str	r5, [sp, #0]
 800643c:	f01c ffca 	bl	80233d4 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 8006440:	4909      	ldr	r1, [pc, #36]	; (8006468 <locateudp+0x64>)
 8006442:	480a      	ldr	r0, [pc, #40]	; (800646c <locateudp+0x68>)
 8006444:	f01c fe4e 	bl	80230e4 <iprintf>
	return (ip);
}
 8006448:	4620      	mov	r0, r4
 800644a:	b005      	add	sp, #20
 800644c:	bd30      	pop	{r4, r5, pc}
		rebootme(3);
 800644e:	2003      	movs	r0, #3
 8006450:	f7fb fee0 	bl	8002214 <rebootme>
 8006454:	e7e6      	b.n	8006424 <locateudp+0x20>
 8006456:	bf00      	nop
 8006458:	2001be30 	.word	0x2001be30
 800645c:	08029174 	.word	0x08029174
 8006460:	2001be2c 	.word	0x2001be2c
 8006464:	08029194 	.word	0x08029194
 8006468:	2001be18 	.word	0x2001be18
 800646c:	080291a4 	.word	0x080291a4

08006470 <startudp>:

void startudp(uint32_t ip) {
 8006470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006474:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006476:	f00e fcdf 	bl	8014e38 <xTaskGetCurrentTaskHandle>
 800647a:	4b68      	ldr	r3, [pc, #416]	; (800661c <startudp+0x1ac>)
 800647c:	4602      	mov	r2, r0
	osDelay(1000);
 800647e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8006482:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8006484:	f00d f8ce 	bl	8013624 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8006488:	f018 f816 	bl	801e4b8 <udp_new>
	if (pcb == NULL) {
 800648c:	2800      	cmp	r0, #0
 800648e:	f000 80b7 	beq.w	8006600 <startudp+0x190>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 8006492:	f241 3288 	movw	r2, #5000	; 0x1388
 8006496:	4962      	ldr	r1, [pc, #392]	; (8006620 <startudp+0x1b0>)
 8006498:	4680      	mov	r8, r0
 800649a:	f017 fdad 	bl	801dff8 <udp_bind>
 800649e:	4682      	mov	sl, r0
 80064a0:	2800      	cmp	r0, #0
 80064a2:	f040 80a9 	bne.w	80065f8 <startudp+0x188>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80064a6:	2241      	movs	r2, #65	; 0x41
 80064a8:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80064ac:	2036      	movs	r0, #54	; 0x36
 80064ae:	f012 fd6f 	bl	8018f90 <pbuf_alloc>

	if (p1 == NULL) {
 80064b2:	9000      	str	r0, [sp, #0]
 80064b4:	2800      	cmp	r0, #0
 80064b6:	f000 80ad 	beq.w	8006614 <startudp+0x1a4>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80064ba:	4c5a      	ldr	r4, [pc, #360]	; (8006624 <startudp+0x1b4>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80064bc:	2241      	movs	r2, #65	; 0x41
	p1->payload = &(*pktbuf)[0];
 80064be:	9d00      	ldr	r5, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80064c0:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80064c4:	6823      	ldr	r3, [r4, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80064c6:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80064c8:	606b      	str	r3, [r5, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80064ca:	f012 fd61 	bl	8018f90 <pbuf_alloc>
	if (p2 == NULL) {
 80064ce:	9001      	str	r0, [sp, #4]
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f000 8099 	beq.w	8006608 <startudp+0x198>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80064d6:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80064d8:	2201      	movs	r2, #1
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80064da:	9c01      	ldr	r4, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80064dc:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80064de:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80064e2:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80064e4:	6063      	str	r3, [r4, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80064e6:	f012 fd53 	bl	8018f90 <pbuf_alloc>
	if (ps == NULL) {
 80064ea:	4681      	mov	r9, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	f000 8093 	beq.w	8006618 <startudp+0x1a8>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 80064f2:	4c4d      	ldr	r4, [pc, #308]	; (8006628 <startudp+0x1b8>)

	osDelay(5000);
 80064f4:	f241 3088 	movw	r0, #5000	; 0x1388
 80064f8:	4f4c      	ldr	r7, [pc, #304]	; (800662c <startudp+0x1bc>)
	ps->payload = &statuspkt;	// point at status / GPS data
 80064fa:	f8c9 4004 	str.w	r4, [r9, #4]
	osDelay(5000);
 80064fe:	f00d f891 	bl	8013624 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8006502:	4b4b      	ldr	r3, [pc, #300]	; (8006630 <startudp+0x1c0>)

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006504:	2101      	movs	r1, #1
 8006506:	4a4b      	ldr	r2, [pc, #300]	; (8006634 <startudp+0x1c4>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006508:	484b      	ldr	r0, [pc, #300]	; (8006638 <startudp+0x1c8>)
	statuspkt.auxstatus1 = 0;
 800650a:	f8c4 a074 	str.w	sl, [r4, #116]	; 0x74
	statuspkt.adcudpover = 0;		// debug use count overruns
 800650e:	4e4b      	ldr	r6, [pc, #300]	; (800663c <startudp+0x1cc>)
 8006510:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 8006514:	f8df b154 	ldr.w	fp, [pc, #340]	; 800666c <startudp+0x1fc>
 8006518:	f8c4 a07c 	str.w	sl, [r4, #124]	; 0x7c
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 800651c:	4d48      	ldr	r5, [pc, #288]	; (8006640 <startudp+0x1d0>)
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800651e:	f8c4 a080 	str.w	sl, [r4, #128]	; 0x80
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8006522:	7011      	strb	r1, [r2, #0]
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8006524:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8006528:	f01c fe78 	bl	802321c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 800652c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006530:	2001      	movs	r0, #1
 8006532:	f00e fdc7 	bl	80150c4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8006536:	2800      	cmp	r0, #0
 8006538:	d057      	beq.n	80065ea <startudp+0x17a>
			sigsend = 0;
 800653a:	2200      	movs	r2, #0
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 800653c:	7833      	ldrb	r3, [r6, #0]
			sigsend = 0;
 800653e:	603a      	str	r2, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0f3      	beq.n	800652c <startudp+0xbc>
 8006544:	4a3f      	ldr	r2, [pc, #252]	; (8006644 <startudp+0x1d4>)
 8006546:	f8db 3000 	ldr.w	r3, [fp]
 800654a:	6812      	ldr	r2, [r2, #0]
 800654c:	4313      	orrs	r3, r2
 800654e:	d1ed      	bne.n	800652c <startudp+0xbc>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006550:	4a3d      	ldr	r2, [pc, #244]	; (8006648 <startudp+0x1d8>)
 8006552:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006556:	6812      	ldr	r2, [r2, #0]
 8006558:	2a00      	cmp	r2, #0
 800655a:	bf08      	it	eq
 800655c:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 800655e:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8006560:	468a      	mov	sl, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8006562:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8006564:	6822      	ldr	r2, [r4, #0]
 8006566:	684b      	ldr	r3, [r1, #4]
 8006568:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	684a      	ldr	r2, [r1, #4]
 800656e:	0a1b      	lsrs	r3, r3, #8
 8006570:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8006572:	6823      	ldr	r3, [r4, #0]
 8006574:	684a      	ldr	r2, [r1, #4]
 8006576:	0c1b      	lsrs	r3, r3, #16
 8006578:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 800657a:	7b89      	ldrb	r1, [r1, #14]
 800657c:	2901      	cmp	r1, #1
 800657e:	d006      	beq.n	800658e <startudp+0x11e>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8006580:	4628      	mov	r0, r5
 8006582:	f01c fdaf 	bl	80230e4 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 8006586:	f89a 100e 	ldrb.w	r1, [sl, #14]
 800658a:	2901      	cmp	r1, #1
 800658c:	d1f8      	bne.n	8006580 <startudp+0x110>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800658e:	f241 3388 	movw	r3, #5000	; 0x1388
 8006592:	4a2e      	ldr	r2, [pc, #184]	; (800664c <startudp+0x1dc>)
 8006594:	4651      	mov	r1, sl
 8006596:	4640      	mov	r0, r8
 8006598:	f7ff fe32 	bl	8006200 <sendudp>
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 800659c:	4b2c      	ldr	r3, [pc, #176]	; (8006650 <startudp+0x1e0>)
				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 800659e:	f88d 000f 	strb.w	r0, [sp, #15]
				if (sendendstatus > 0) {
 80065a2:	781a      	ldrb	r2, [r3, #0]
				statuspkt.udpsent++;	// debug no of sample packets set
 80065a4:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80065a8:	3301      	adds	r3, #1
 80065aa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80065ae:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80065b2:	3301      	adds	r3, #1
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	3301      	adds	r3, #1
 80065be:	6023      	str	r3, [r4, #0]
				if (sendendstatus > 0) {
 80065c0:	2a00      	cmp	r2, #0
 80065c2:	d0b3      	beq.n	800652c <startudp+0xbc>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80065c4:	4923      	ldr	r1, [pc, #140]	; (8006654 <startudp+0x1e4>)
 80065c6:	4642      	mov	r2, r8
 80065c8:	2001      	movs	r0, #1
 80065ca:	780b      	ldrb	r3, [r1, #0]
 80065cc:	4649      	mov	r1, r9
 80065ce:	f7ff fe53 	bl	8006278 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 80065d2:	2300      	movs	r3, #0
 80065d4:	4a1e      	ldr	r2, [pc, #120]	; (8006650 <startudp+0x1e0>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80065d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80065da:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 80065dc:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 80065e0:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80065e2:	f00e fd6f 	bl	80150c4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 80065e6:	2800      	cmp	r0, #0
 80065e8:	d1a7      	bne.n	800653a <startudp+0xca>
		}
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		/* The transmission ended as expected. */
		else {
			/* The call to ulTaskNotifyTake() timed out. */
			sendtimedstatus(ps, pcb, adcbatchid);
 80065ea:	4b1a      	ldr	r3, [pc, #104]	; (8006654 <startudp+0x1e4>)
 80065ec:	4641      	mov	r1, r8
 80065ee:	4648      	mov	r0, r9
 80065f0:	781a      	ldrb	r2, [r3, #0]
 80065f2:	f7ff fea7 	bl	8006344 <sendtimedstatus>
 80065f6:	e799      	b.n	800652c <startudp+0xbc>
		printf("startudp: udp_bind failed!\n");
 80065f8:	4817      	ldr	r0, [pc, #92]	; (8006658 <startudp+0x1e8>)
 80065fa:	f01c fe0f 	bl	802321c <puts>
		for (;;)
 80065fe:	e7fe      	b.n	80065fe <startudp+0x18e>
		printf("startudp: udp_new failed!\n");
 8006600:	4816      	ldr	r0, [pc, #88]	; (800665c <startudp+0x1ec>)
 8006602:	f01c fe0b 	bl	802321c <puts>
		for (;;)
 8006606:	e7fe      	b.n	8006606 <startudp+0x196>
		printf("startudp: p2 buf_alloc failed!\n");
 8006608:	4815      	ldr	r0, [pc, #84]	; (8006660 <startudp+0x1f0>)
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 800660a:	b005      	add	sp, #20
 800660c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8006610:	f01c be04 	b.w	802321c <puts>
		printf("startudp: p1 buf_alloc failed!\n");
 8006614:	4813      	ldr	r0, [pc, #76]	; (8006664 <startudp+0x1f4>)
 8006616:	e7f8      	b.n	800660a <startudp+0x19a>
		printf("startudp: ps buf_alloc failed!\n");
 8006618:	4813      	ldr	r0, [pc, #76]	; (8006668 <startudp+0x1f8>)
 800661a:	e7f6      	b.n	800660a <startudp+0x19a>
 800661c:	200007e8 	.word	0x200007e8
 8006620:	08042888 	.word	0x08042888
 8006624:	2001ae70 	.word	0x2001ae70
 8006628:	2001adc0 	.word	0x2001adc0
 800662c:	20000758 	.word	0x20000758
 8006630:	dec0edfe 	.word	0xdec0edfe
 8006634:	20000742 	.word	0x20000742
 8006638:	08029250 	.word	0x08029250
 800663c:	20001cd9 	.word	0x20001cd9
 8006640:	08029284 	.word	0x08029284
 8006644:	200006f4 	.word	0x200006f4
 8006648:	200006e8 	.word	0x200006e8
 800664c:	2001be2c 	.word	0x2001be2c
 8006650:	20000750 	.word	0x20000750
 8006654:	200006dc 	.word	0x200006dc
 8006658:	080291d4 	.word	0x080291d4
 800665c:	080291b8 	.word	0x080291b8
 8006660:	08029210 	.word	0x08029210
 8006664:	080291f0 	.word	0x080291f0
 8006668:	08029230 	.word	0x08029230
 800666c:	2001be28 	.word	0x2001be28

08006670 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 8006672:	4b53      	ldr	r3, [pc, #332]	; (80067c0 <tag_callback+0x150>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 8006674:	4604      	mov	r4, r0
 8006676:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006678:	4852      	ldr	r0, [pc, #328]	; (80067c4 <tag_callback+0x154>)
	if (ledsenabled) {
 800667a:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 800667c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 8006680:	2a00      	cmp	r2, #0
 8006682:	d03a      	beq.n	80066fa <tag_callback+0x8a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8006684:	f003 fd4e 	bl	800a124 <HAL_GPIO_TogglePin>
 8006688:	4d4f      	ldr	r5, [pc, #316]	; (80067c8 <tag_callback+0x158>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 800668a:	4e50      	ldr	r6, [pc, #320]	; (80067cc <tag_callback+0x15c>)
 800668c:	e001      	b.n	8006692 <tag_callback+0x22>
 800668e:	f01c fdc5 	bl	802321c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 8006692:	2101      	movs	r1, #1
 8006694:	6828      	ldr	r0, [r5, #0]
 8006696:	f00d fd65 	bl	8014164 <xQueueSemaphoreTake>
 800669a:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 800669c:	4630      	mov	r0, r6
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 800669e:	2b01      	cmp	r3, #1
 80066a0:	d1f5      	bne.n	800668e <tag_callback+0x1e>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 80066a2:	1f22      	subs	r2, r4, #4
 80066a4:	2a07      	cmp	r2, #7
 80066a6:	d819      	bhi.n	80066dc <tag_callback+0x6c>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 80066a8:	4949      	ldr	r1, [pc, #292]	; (80067d0 <tag_callback+0x160>)
 80066aa:	4093      	lsls	r3, r2
 80066ac:	4a49      	ldr	r2, [pc, #292]	; (80067d4 <tag_callback+0x164>)
 80066ae:	7809      	ldrb	r1, [r1, #0]
 80066b0:	400b      	ands	r3, r1
 80066b2:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 80066b4:	bb5b      	cbnz	r3, 800670e <tag_callback+0x9e>
			strcpy(newstring, "0");
 80066b6:	4b48      	ldr	r3, [pc, #288]	; (80067d8 <tag_callback+0x168>)
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 80066bc:	2300      	movs	r3, #0
 80066be:	6828      	ldr	r0, [r5, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	4619      	mov	r1, r3
 80066c4:	f00d fac8 	bl	8013c58 <xQueueGenericSend>
 80066c8:	2801      	cmp	r0, #1
 80066ca:	d002      	beq.n	80066d2 <tag_callback+0x62>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 80066cc:	4843      	ldr	r0, [pc, #268]	; (80067dc <tag_callback+0x16c>)
 80066ce:	f01c fda5 	bl	802321c <puts>
	}
	return (strlen(newstring));
 80066d2:	4638      	mov	r0, r7
}
 80066d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 80066d8:	f7f9 bdbc 	b.w	8000254 <strlen>
		switch (index) {
 80066dc:	2c14      	cmp	r4, #20
 80066de:	d868      	bhi.n	80067b2 <tag_callback+0x142>
 80066e0:	e8df f004 	tbb	[pc, r4]
 80066e4:	0e585d62 	.word	0x0e585d62
 80066e8:	67676767 	.word	0x67676767
 80066ec:	67676767 	.word	0x67676767
 80066f0:	3b444d54 	.word	0x3b444d54
 80066f4:	21262b30 	.word	0x21262b30
 80066f8:	19          	.byte	0x19
 80066f9:	00          	.byte	0x00
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 80066fa:	f003 fcf9 	bl	800a0f0 <HAL_GPIO_WritePin>
 80066fe:	e7c3      	b.n	8006688 <tag_callback+0x18>
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8006700:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006704:	482f      	ldr	r0, [pc, #188]	; (80067c4 <tag_callback+0x154>)
 8006706:	f003 fce1 	bl	800a0cc <HAL_GPIO_ReadPin>
 800670a:	2801      	cmp	r0, #1
 800670c:	d1d3      	bne.n	80066b6 <tag_callback+0x46>
			strcpy(newstring, "1");
 800670e:	4b34      	ldr	r3, [pc, #208]	; (80067e0 <tag_callback+0x170>)
 8006710:	881b      	ldrh	r3, [r3, #0]
 8006712:	803b      	strh	r3, [r7, #0]
 8006714:	e7d2      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8006716:	4b33      	ldr	r3, [pc, #204]	; (80067e4 <tag_callback+0x174>)
 8006718:	881b      	ldrh	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	bf14      	ite	ne
 800671e:	2331      	movne	r3, #49	; 0x31
 8006720:	2330      	moveq	r3, #48	; 0x30
 8006722:	803b      	strh	r3, [r7, #0]
			break;
 8006724:	e7ca      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, gpsstr);		// GPS Status
 8006726:	4930      	ldr	r1, [pc, #192]	; (80067e8 <tag_callback+0x178>)
 8006728:	4638      	mov	r0, r7
 800672a:	f01c fefa 	bl	8023522 <strcpy>
			break;
 800672e:	e7c5      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, statstr);		// Detector Status
 8006730:	492e      	ldr	r1, [pc, #184]	; (80067ec <tag_callback+0x17c>)
 8006732:	4638      	mov	r0, r7
 8006734:	f01c fef5 	bl	8023522 <strcpy>
			break;
 8006738:	e7c0      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, snstr);			// Detector ID
 800673a:	492d      	ldr	r1, [pc, #180]	; (80067f0 <tag_callback+0x180>)
 800673c:	4638      	mov	r0, r7
 800673e:	f01c fef0 	bl	8023522 <strcpy>
			break;
 8006742:	e7bb      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 8006744:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006748:	482a      	ldr	r0, [pc, #168]	; (80067f4 <tag_callback+0x184>)
 800674a:	f003 fcbf 	bl	800a0cc <HAL_GPIO_ReadPin>
 800674e:	2800      	cmp	r0, #0
 8006750:	bf14      	ite	ne
 8006752:	2330      	movne	r3, #48	; 0x30
 8006754:	2331      	moveq	r3, #49	; 0x31
 8006756:	803b      	strh	r3, [r7, #0]
			break;
 8006758:	e7b0      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 800675a:	4b27      	ldr	r3, [pc, #156]	; (80067f8 <tag_callback+0x188>)
 800675c:	881b      	ldrh	r3, [r3, #0]
 800675e:	f013 0f04 	tst.w	r3, #4
 8006762:	bf14      	ite	ne
 8006764:	2331      	movne	r3, #49	; 0x31
 8006766:	2330      	moveq	r3, #48	; 0x30
 8006768:	803b      	strh	r3, [r7, #0]
			break;
 800676a:	e7a7      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 800676c:	4b22      	ldr	r3, [pc, #136]	; (80067f8 <tag_callback+0x188>)
 800676e:	881b      	ldrh	r3, [r3, #0]
 8006770:	f013 0f02 	tst.w	r3, #2
 8006774:	bf14      	ite	ne
 8006776:	2331      	movne	r3, #49	; 0x31
 8006778:	2330      	moveq	r3, #48	; 0x30
 800677a:	803b      	strh	r3, [r7, #0]
			break;
 800677c:	e79e      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 800677e:	4b1e      	ldr	r3, [pc, #120]	; (80067f8 <tag_callback+0x188>)
 8006780:	881b      	ldrh	r3, [r3, #0]
 8006782:	f003 0301 	and.w	r3, r3, #1
 8006786:	3330      	adds	r3, #48	; 0x30
 8006788:	803b      	strh	r3, [r7, #0]
			break;
 800678a:	e797      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, "5");
 800678c:	4b1b      	ldr	r3, [pc, #108]	; (80067fc <tag_callback+0x18c>)
 800678e:	881b      	ldrh	r3, [r3, #0]
 8006790:	803b      	strh	r3, [r7, #0]
			break;
 8006792:	e793      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, nowtimestr);
 8006794:	491a      	ldr	r1, [pc, #104]	; (8006800 <tag_callback+0x190>)
 8006796:	4638      	mov	r0, r7
 8006798:	f01c fec3 	bl	8023522 <strcpy>
			break;
 800679c:	e78e      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, pressstr);		// pressure
 800679e:	4919      	ldr	r1, [pc, #100]	; (8006804 <tag_callback+0x194>)
 80067a0:	4638      	mov	r0, r7
 80067a2:	f01c febe 	bl	8023522 <strcpy>
			break;
 80067a6:	e789      	b.n	80066bc <tag_callback+0x4c>
			strcpy(newstring, tempstr);		// temperature
 80067a8:	4917      	ldr	r1, [pc, #92]	; (8006808 <tag_callback+0x198>)
 80067aa:	4638      	mov	r0, r7
 80067ac:	f01c feb9 	bl	8023522 <strcpy>
			break;
 80067b0:	e784      	b.n	80066bc <tag_callback+0x4c>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 80067b2:	4622      	mov	r2, r4
 80067b4:	4915      	ldr	r1, [pc, #84]	; (800680c <tag_callback+0x19c>)
 80067b6:	4638      	mov	r0, r7
 80067b8:	f01c fe0c 	bl	80233d4 <siprintf>
			break;
 80067bc:	e77e      	b.n	80066bc <tag_callback+0x4c>
 80067be:	bf00      	nop
 80067c0:	20000270 	.word	0x20000270
 80067c4:	40020c00 	.word	0x40020c00
 80067c8:	2001b6d0 	.word	0x2001b6d0
 80067cc:	0802936c 	.word	0x0802936c
 80067d0:	20000274 	.word	0x20000274
 80067d4:	2001be74 	.word	0x2001be74
 80067d8:	08042464 	.word	0x08042464
 80067dc:	08029398 	.word	0x08029398
 80067e0:	0802914c 	.word	0x0802914c
 80067e4:	20000010 	.word	0x20000010
 80067e8:	20000014 	.word	0x20000014
 80067ec:	20000128 	.word	0x20000128
 80067f0:	20000084 	.word	0x20000084
 80067f4:	40021000 	.word	0x40021000
 80067f8:	20001cc4 	.word	0x20001cc4
 80067fc:	080407dc 	.word	0x080407dc
 8006800:	20000054 	.word	0x20000054
 8006804:	20000074 	.word	0x20000074
 8006808:	20000230 	.word	0x20000230
 800680c:	08029378 	.word	0x08029378

08006810 <returnpage>:
/* ---------------------------------------------- */
// http client
/* ---------------------------------------------- */

// callback with the page
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006810:	b5f0      	push	{r4, r5, r6, r7, lr}
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 8006812:	4d3d      	ldr	r5, [pc, #244]	; (8006908 <returnpage+0xf8>)
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 8006814:	b08d      	sub	sp, #52	; 0x34
 8006816:	4616      	mov	r6, r2
 8006818:	f88d 000f 	strb.w	r0, [sp, #15]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800681c:	ac07      	add	r4, sp, #28
void returnpage(volatile u8_t Num, volatile hc_errormsg errorm, volatile char *content, volatile u16_t charcount) {
 800681e:	f88d 100e 	strb.w	r1, [sp, #14]
 8006822:	f8ad 300c 	strh.w	r3, [sp, #12]
	volatile uint32_t sn;
	int nconv;
	volatile int p1, p2;

	if (errorm == 0) {
 8006826:	f89d 700e 	ldrb.w	r7, [sp, #14]
	char *errormsg[] = { "OK", "OUT_MEM", "TIMEOUT", "NOT_FOUND", "GEN_ERROR" };
 800682a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800682c:	682d      	ldr	r5, [r5, #0]
 800682e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006830:	6025      	str	r5, [r4, #0]
	if (errorm == 0) {
 8006832:	b10f      	cbz	r7, 8006838 <returnpage+0x28>
			}
		} else {
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
		}
	}
}
 8006834:	b00d      	add	sp, #52	; 0x34
 8006836:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nconv = sscanf(content, "%5u%48s%u%u", &sn, udp_target, &p1, &p2);
 8006838:	aa06      	add	r2, sp, #24
 800683a:	a905      	add	r1, sp, #20
 800683c:	4b33      	ldr	r3, [pc, #204]	; (800690c <returnpage+0xfc>)
 800683e:	4630      	mov	r0, r6
 8006840:	9201      	str	r2, [sp, #4]
 8006842:	aa04      	add	r2, sp, #16
 8006844:	9100      	str	r1, [sp, #0]
 8006846:	4932      	ldr	r1, [pc, #200]	; (8006910 <returnpage+0x100>)
 8006848:	f01c fde4 	bl	8023414 <siscanf>
		if (nconv != EOF) {
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d032      	beq.n	80068b6 <returnpage+0xa6>
			switch (nconv) {
 8006850:	2802      	cmp	r0, #2
 8006852:	d020      	beq.n	8006896 <returnpage+0x86>
 8006854:	dc13      	bgt.n	800687e <returnpage+0x6e>
 8006856:	2801      	cmp	r0, #1
 8006858:	d128      	bne.n	80068ac <returnpage+0x9c>
				if (statuspkt.uid != sn) {
 800685a:	4a2e      	ldr	r2, [pc, #184]	; (8006914 <returnpage+0x104>)
 800685c:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8006860:	9904      	ldr	r1, [sp, #16]
 8006862:	b29b      	uxth	r3, r3
 8006864:	428b      	cmp	r3, r1
 8006866:	d0e5      	beq.n	8006834 <returnpage+0x24>
					statuspkt.uid = sn;
 8006868:	9b04      	ldr	r3, [sp, #16]
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 800686a:	482b      	ldr	r0, [pc, #172]	; (8006918 <returnpage+0x108>)
					statuspkt.uid = sn;
 800686c:	b29b      	uxth	r3, r3
 800686e:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
					printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 8006872:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8006876:	b289      	uxth	r1, r1
 8006878:	f01c fc34 	bl	80230e4 <iprintf>
 800687c:	e7da      	b.n	8006834 <returnpage+0x24>
			switch (nconv) {
 800687e:	1ec3      	subs	r3, r0, #3
 8006880:	2b01      	cmp	r3, #1
 8006882:	d813      	bhi.n	80068ac <returnpage+0x9c>
				if (p1 == 1) {		// reboot
 8006884:	9b05      	ldr	r3, [sp, #20]
 8006886:	2b01      	cmp	r3, #1
 8006888:	d033      	beq.n	80068f2 <returnpage+0xe2>
				if (p1 == 2) {		// freeze the UDP streaming
 800688a:	9b05      	ldr	r3, [sp, #20]
 800688c:	2b02      	cmp	r3, #2
					globalfreeze = 1;
 800688e:	4b23      	ldr	r3, [pc, #140]	; (800691c <returnpage+0x10c>)
				if (p1 == 2) {		// freeze the UDP streaming
 8006890:	d029      	beq.n	80068e6 <returnpage+0xd6>
					globalfreeze = 0;
 8006892:	2200      	movs	r2, #0
 8006894:	601a      	str	r2, [r3, #0]
				if (strlen(udp_target) < 7) {					// bad url or ip address
 8006896:	4c1d      	ldr	r4, [pc, #116]	; (800690c <returnpage+0xfc>)
 8006898:	4620      	mov	r0, r4
 800689a:	f7f9 fcdb 	bl	8000254 <strlen>
 800689e:	2806      	cmp	r0, #6
 80068a0:	d918      	bls.n	80068d4 <returnpage+0xc4>
				printf("Server -> Target UDP host: %s\n", udp_target);
 80068a2:	491a      	ldr	r1, [pc, #104]	; (800690c <returnpage+0xfc>)
 80068a4:	481e      	ldr	r0, [pc, #120]	; (8006920 <returnpage+0x110>)
 80068a6:	f01c fc1d 	bl	80230e4 <iprintf>
 80068aa:	e7d6      	b.n	800685a <returnpage+0x4a>
				printf("Wrong number of params from Server -> %d\n", nconv);
 80068ac:	4601      	mov	r1, r0
 80068ae:	481d      	ldr	r0, [pc, #116]	; (8006924 <returnpage+0x114>)
 80068b0:	f01c fc18 	bl	80230e4 <iprintf>
				break;
 80068b4:	e7be      	b.n	8006834 <returnpage+0x24>
			printf("returnpage: (error returned) Num=%d, errno=%d, error=%s\n", Num, errorm, errormsg[errorm]);
 80068b6:	f89d 100f 	ldrb.w	r1, [sp, #15]
 80068ba:	ac0c      	add	r4, sp, #48	; 0x30
 80068bc:	f89d 200e 	ldrb.w	r2, [sp, #14]
 80068c0:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80068c4:	4818      	ldr	r0, [pc, #96]	; (8006928 <returnpage+0x118>)
 80068c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068ca:	f853 3c14 	ldr.w	r3, [r3, #-20]
 80068ce:	f01c fc09 	bl	80230e4 <iprintf>
}
 80068d2:	e7af      	b.n	8006834 <returnpage+0x24>
					strcpy(udp_target, SERVER_DESTINATION);		// default it
 80068d4:	4d15      	ldr	r5, [pc, #84]	; (800692c <returnpage+0x11c>)
 80068d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80068d8:	6020      	str	r0, [r4, #0]
 80068da:	6828      	ldr	r0, [r5, #0]
 80068dc:	6061      	str	r1, [r4, #4]
 80068de:	6120      	str	r0, [r4, #16]
 80068e0:	60a2      	str	r2, [r4, #8]
 80068e2:	60e3      	str	r3, [r4, #12]
 80068e4:	e7dd      	b.n	80068a2 <returnpage+0x92>
					globalfreeze = 1;
 80068e6:	2201      	movs	r2, #1
					printf("Server -> commands a streaming freeze\n");
 80068e8:	4811      	ldr	r0, [pc, #68]	; (8006930 <returnpage+0x120>)
					globalfreeze = 1;
 80068ea:	601a      	str	r2, [r3, #0]
					printf("Server -> commands a streaming freeze\n");
 80068ec:	f01c fc96 	bl	802321c <puts>
 80068f0:	e7d1      	b.n	8006896 <returnpage+0x86>
					printf("Server -> commands a reboot...\n");
 80068f2:	4810      	ldr	r0, [pc, #64]	; (8006934 <returnpage+0x124>)
 80068f4:	f01c fc92 	bl	802321c <puts>
					osDelay(2000);
 80068f8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80068fc:	f00c fe92 	bl	8013624 <osDelay>
					rebootme(6);
 8006900:	2006      	movs	r0, #6
 8006902:	f7fb fc87 	bl	8002214 <rebootme>
 8006906:	e7c0      	b.n	800688a <returnpage+0x7a>
 8006908:	080273f4 	.word	0x080273f4
 800690c:	2001be30 	.word	0x2001be30
 8006910:	080293b0 	.word	0x080293b0
 8006914:	2001adc0 	.word	0x2001adc0
 8006918:	08029438 	.word	0x08029438
 800691c:	2001be28 	.word	0x2001be28
 8006920:	08029418 	.word	0x08029418
 8006924:	08029458 	.word	0x08029458
 8006928:	08029484 	.word	0x08029484
 800692c:	08029404 	.word	0x08029404
 8006930:	080293dc 	.word	0x080293dc
 8006934:	080293bc 	.word	0x080293bc

08006938 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8006938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800693c:	b085      	sub	sp, #20
 800693e:	4615      	mov	r5, r2
 8006940:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8006942:	220a      	movs	r2, #10
 8006944:	a903      	add	r1, sp, #12
 8006946:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8006948:	4699      	mov	r9, r3
 800694a:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800694c:	f01d fbfa 	bl	8024144 <strtol>
 8006950:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 8006952:	4621      	mov	r1, r4
 8006954:	462a      	mov	r2, r5
 8006956:	4871      	ldr	r0, [pc, #452]	; (8006b1c <httpd_cgi_handler+0x1e4>)
 8006958:	4633      	mov	r3, r6
 800695a:	f01c fbc3 	bl	80230e4 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800695e:	2d00      	cmp	r5, #0
 8006960:	dd37      	ble.n	80069d2 <httpd_cgi_handler+0x9a>
 8006962:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 8006964:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8006b4c <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8006968:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8006b50 <httpd_cgi_handler+0x218>
		switch (j) {
 800696c:	f1a6 030a 	sub.w	r3, r6, #10
 8006970:	2b0e      	cmp	r3, #14
 8006972:	f200 80cc 	bhi.w	8006b0e <httpd_cgi_handler+0x1d6>
 8006976:	e8df f003 	tbb	[pc, r3]
 800697a:	9eb6      	.short	0x9eb6
 800697c:	08080808 	.word	0x08080808
 8006980:	08080808 	.word	0x08080808
 8006984:	864d6073 	.word	0x864d6073
 8006988:	3a          	.byte	0x3a
 8006989:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 800698a:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 800698c:	2101      	movs	r1, #1
 800698e:	f1a6 000c 	sub.w	r0, r6, #12
 8006992:	4b63      	ldr	r3, [pc, #396]	; (8006b20 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 8006994:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 8006996:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 800699a:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 800699c:	2a30      	cmp	r2, #48	; 0x30
 800699e:	d01b      	beq.n	80069d8 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80069a0:	781a      	ldrb	r2, [r3, #0]
 80069a2:	4311      	orrs	r1, r2
 80069a4:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80069a6:	f001 0202 	and.w	r2, r1, #2
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80069aa:	4650      	mov	r0, sl
 80069ac:	7019      	strb	r1, [r3, #0]
			j -= 11;	// now offset 0
 80069ae:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80069b0:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80069b4:	f01c fb96 	bl	80230e4 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 80069b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80069bc:	2301      	movs	r3, #1
 80069be:	4a58      	ldr	r2, [pc, #352]	; (8006b20 <httpd_cgi_handler+0x1e8>)
 80069c0:	2188      	movs	r1, #136	; 0x88
 80069c2:	9000      	str	r0, [sp, #0]
 80069c4:	4857      	ldr	r0, [pc, #348]	; (8006b24 <httpd_cgi_handler+0x1ec>)
 80069c6:	f003 feb3 	bl	800a730 <HAL_I2C_Master_Transmit>
 80069ca:	b960      	cbnz	r0, 80069e6 <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80069cc:	3401      	adds	r4, #1
 80069ce:	42a5      	cmp	r5, r4
 80069d0:	d1cc      	bne.n	800696c <httpd_cgi_handler+0x34>
}
 80069d2:	b005      	add	sp, #20
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 80069d8:	2201      	movs	r2, #1
 80069da:	7819      	ldrb	r1, [r3, #0]
 80069dc:	fa02 f600 	lsl.w	r6, r2, r0
 80069e0:	ea21 0106 	bic.w	r1, r1, r6
 80069e4:	e7df      	b.n	80069a6 <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 80069e6:	4850      	ldr	r0, [pc, #320]	; (8006b28 <httpd_cgi_handler+0x1f0>)
 80069e8:	f01c fb7c 	bl	80230e4 <iprintf>
 80069ec:	e7ee      	b.n	80069cc <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80069ee:	6839      	ldr	r1, [r7, #0]
 80069f0:	3c01      	subs	r4, #1
 80069f2:	484e      	ldr	r0, [pc, #312]	; (8006b2c <httpd_cgi_handler+0x1f4>)
 80069f4:	440c      	add	r4, r1
 80069f6:	4623      	mov	r3, r4
 80069f8:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80069fc:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 80069fe:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a00:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006a04:	bf18      	it	ne
 8006a06:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a08:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8006a0a:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a0c:	dcf3      	bgt.n	80069f6 <httpd_cgi_handler+0xbe>
}
 8006a0e:	b005      	add	sp, #20
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	4e46      	ldr	r6, [pc, #280]	; (8006b30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006a1c:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a1e:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8006a20:	2b30      	cmp	r3, #48	; 0x30
 8006a22:	bf0c      	ite	eq
 8006a24:	f020 0001 	biceq.w	r0, r0, #1
 8006a28:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8006a2c:	f7fd fd0a 	bl	8004444 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a30:	42a5      	cmp	r5, r4
 8006a32:	dcf0      	bgt.n	8006a16 <httpd_cgi_handler+0xde>
}
 8006a34:	b005      	add	sp, #20
 8006a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a3a:	4e3d      	ldr	r6, [pc, #244]	; (8006b30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006a42:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a44:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8006a46:	2b30      	cmp	r3, #48	; 0x30
 8006a48:	bf0c      	ite	eq
 8006a4a:	f020 0002 	biceq.w	r0, r0, #2
 8006a4e:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 8006a52:	f7fd fcf7 	bl	8004444 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a56:	42a5      	cmp	r5, r4
 8006a58:	dcf0      	bgt.n	8006a3c <httpd_cgi_handler+0x104>
}
 8006a5a:	b005      	add	sp, #20
 8006a5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a60:	4e33      	ldr	r6, [pc, #204]	; (8006b30 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	f9b6 0000 	ldrsh.w	r0, [r6]
 8006a68:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a6a:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8006a6c:	2b30      	cmp	r3, #48	; 0x30
 8006a6e:	bf0c      	ite	eq
 8006a70:	f020 0004 	biceq.w	r0, r0, #4
 8006a74:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 8006a78:	f7fd fce4 	bl	8004444 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a7c:	42a5      	cmp	r5, r4
 8006a7e:	dcf0      	bgt.n	8006a62 <httpd_cgi_handler+0x12a>
}
 8006a80:	b005      	add	sp, #20
 8006a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a86:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006a88:	4e2a      	ldr	r6, [pc, #168]	; (8006b34 <httpd_cgi_handler+0x1fc>)
 8006a8a:	e004      	b.n	8006a96 <httpd_cgi_handler+0x15e>
 8006a8c:	f003 fb30 	bl	800a0f0 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006a90:	42a5      	cmp	r5, r4
 8006a92:	dd9e      	ble.n	80069d2 <httpd_cgi_handler+0x9a>
 8006a94:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 8006a96:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a9e:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 8006aa0:	4423      	add	r3, r4
 8006aa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006aa6:	2b31      	cmp	r3, #49	; 0x31
 8006aa8:	d1f0      	bne.n	8006a8c <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f003 fb20 	bl	800a0f0 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ab0:	42a5      	cmp	r5, r4
 8006ab2:	dcef      	bgt.n	8006a94 <httpd_cgi_handler+0x15c>
 8006ab4:	e78d      	b.n	80069d2 <httpd_cgi_handler+0x9a>
 8006ab6:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006ab8:	4e1f      	ldr	r6, [pc, #124]	; (8006b38 <httpd_cgi_handler+0x200>)
 8006aba:	e004      	b.n	8006ac6 <httpd_cgi_handler+0x18e>
 8006abc:	f003 fb18 	bl	800a0f0 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ac0:	42ac      	cmp	r4, r5
 8006ac2:	da86      	bge.n	80069d2 <httpd_cgi_handler+0x9a>
 8006ac4:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 8006ac6:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ace:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 8006ad0:	4423      	add	r3, r4
 8006ad2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006ad6:	2b30      	cmp	r3, #48	; 0x30
 8006ad8:	d1f0      	bne.n	8006abc <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8006ada:	2200      	movs	r2, #0
 8006adc:	f003 fb08 	bl	800a0f0 <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8006ae0:	42a5      	cmp	r5, r4
 8006ae2:	dcef      	bgt.n	8006ac4 <httpd_cgi_handler+0x18c>
 8006ae4:	e775      	b.n	80069d2 <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 8006ae6:	4815      	ldr	r0, [pc, #84]	; (8006b3c <httpd_cgi_handler+0x204>)
 8006ae8:	f01c fb98 	bl	802321c <puts>
			osDelay(1000);
 8006aec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006af0:	f00c fd98 	bl	8013624 <osDelay>
 8006af4:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006af8:	4911      	ldr	r1, [pc, #68]	; (8006b40 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006afa:	4b12      	ldr	r3, [pc, #72]	; (8006b44 <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006afc:	68ca      	ldr	r2, [r1, #12]
 8006afe:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006b02:	4313      	orrs	r3, r2
 8006b04:	60cb      	str	r3, [r1, #12]
 8006b06:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006b0a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006b0c:	e7fd      	b.n	8006b0a <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8006b0e:	f8d9 1000 	ldr.w	r1, [r9]
 8006b12:	480d      	ldr	r0, [pc, #52]	; (8006b48 <httpd_cgi_handler+0x210>)
 8006b14:	f01c fae6 	bl	80230e4 <iprintf>
			break;
 8006b18:	e758      	b.n	80069cc <httpd_cgi_handler+0x94>
 8006b1a:	bf00      	nop
 8006b1c:	080294c0 	.word	0x080294c0
 8006b20:	20000274 	.word	0x20000274
 8006b24:	2001b18c 	.word	0x2001b18c
 8006b28:	08028cbc 	.word	0x08028cbc
 8006b2c:	20000010 	.word	0x20000010
 8006b30:	20001cc4 	.word	0x20001cc4
 8006b34:	40021000 	.word	0x40021000
 8006b38:	40020c00 	.word	0x40020c00
 8006b3c:	080294ec 	.word	0x080294ec
 8006b40:	e000ed00 	.word	0xe000ed00
 8006b44:	05fa0004 	.word	0x05fa0004
 8006b48:	08029524 	.word	0x08029524
 8006b4c:	20001cc0 	.word	0x20001cc0
 8006b50:	08029508 	.word	0x08029508

08006b54 <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 8006b54:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 8006b56:	4802      	ldr	r0, [pc, #8]	; (8006b60 <httpd_post_receive_data+0xc>)
 8006b58:	f01c fb60 	bl	802321c <puts>
}
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	bd08      	pop	{r3, pc}
 8006b60:	08029544 	.word	0x08029544

08006b64 <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 8006b64:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 8006b66:	4802      	ldr	r0, [pc, #8]	; (8006b70 <httpd_post_begin+0xc>)
 8006b68:	f01c fb58 	bl	802321c <puts>
}
 8006b6c:	2000      	movs	r0, #0
 8006b6e:	bd08      	pop	{r3, pc}
 8006b70:	08029560 	.word	0x08029560

08006b74 <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <httpd_post_finished+0x8>)
 8006b76:	f01c bb51 	b.w	802321c <puts>
 8006b7a:	bf00      	nop
 8006b7c:	08029574 	.word	0x08029574

08006b80 <init_httpd_ssi>:
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006b80:	4803      	ldr	r0, [pc, #12]	; (8006b90 <init_httpd_ssi+0x10>)
 8006b82:	2215      	movs	r2, #21
 8006b84:	4903      	ldr	r1, [pc, #12]	; (8006b94 <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 8006b86:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 8006b88:	f010 fb08 	bl	801719c <http_set_ssi_handler>
}
 8006b8c:	bd08      	pop	{r3, pc}
 8006b8e:	bf00      	nop
 8006b90:	08006671 	.word	0x08006671
 8006b94:	20000280 	.word	0x20000280

08006b98 <httpclient>:

void httpclient(char Page[64]) {
 8006b98:	b570      	push	{r4, r5, r6, lr}
	uint32_t ip;
	int err;

	static char *Postvars = NULL;

	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8006b9a:	4911      	ldr	r1, [pc, #68]	; (8006be0 <httpclient+0x48>)
void httpclient(char Page[64]) {
 8006b9c:	b084      	sub	sp, #16
 8006b9e:	4604      	mov	r4, r0
	err = dnslookup(SERVER_DESTINATION, &remoteip);		// find serial number and udp target IP address
 8006ba0:	4810      	ldr	r0, [pc, #64]	; (8006be4 <httpclient+0x4c>)
 8006ba2:	f7ff fbef 	bl	8006384 <dnslookup>
	if (err != ERR_OK)
 8006ba6:	b9b0      	cbnz	r0, 8006bd6 <httpclient+0x3e>
		rebootme(7);
	ip = remoteip.addr;
 8006ba8:	4d0d      	ldr	r5, [pc, #52]	; (8006be0 <httpclient+0x48>)
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8006baa:	490e      	ldr	r1, [pc, #56]	; (8006be4 <httpclient+0x4c>)
	ip = remoteip.addr;
 8006bac:	682a      	ldr	r2, [r5, #0]
	printf("\n%s Control Server IP: %lu.%lu.%lu.%lu\n", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
 8006bae:	480e      	ldr	r0, [pc, #56]	; (8006be8 <httpclient+0x50>)
 8006bb0:	0e13      	lsrs	r3, r2, #24
 8006bb2:	f3c2 4607 	ubfx	r6, r2, #16, #8
 8006bb6:	9301      	str	r3, [sp, #4]
 8006bb8:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8006bbc:	9600      	str	r6, [sp, #0]
 8006bbe:	b2d2      	uxtb	r2, r2
 8006bc0:	f01c fa90 	bl	80230e4 <iprintf>
			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);

	result = hc_open(remoteip, Page, Postvars, returnpage);
 8006bc4:	4621      	mov	r1, r4
 8006bc6:	4b09      	ldr	r3, [pc, #36]	; (8006bec <httpclient+0x54>)
 8006bc8:	2200      	movs	r2, #0
 8006bca:	6828      	ldr	r0, [r5, #0]
 8006bcc:	f7fa f97a 	bl	8000ec4 <hc_open>
 8006bd0:	9003      	str	r0, [sp, #12]
//	printf("result=%d\n", result);

}
 8006bd2:	b004      	add	sp, #16
 8006bd4:	bd70      	pop	{r4, r5, r6, pc}
		rebootme(7);
 8006bd6:	2007      	movs	r0, #7
 8006bd8:	f7fb fb1c 	bl	8002214 <rebootme>
 8006bdc:	e7e4      	b.n	8006ba8 <httpclient+0x10>
 8006bde:	bf00      	nop
 8006be0:	20001ce4 	.word	0x20001ce4
 8006be4:	08029404 	.word	0x08029404
 8006be8:	0802958c 	.word	0x0802958c
 8006bec:	08006811 	.word	0x08006811

08006bf0 <apisn>:

void apisn() {
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006bf0:	4909      	ldr	r1, [pc, #36]	; (8006c18 <apisn+0x28>)
 8006bf2:	4b0a      	ldr	r3, [pc, #40]	; (8006c1c <apisn+0x2c>)
 8006bf4:	6809      	ldr	r1, [r1, #0]
 8006bf6:	4a0a      	ldr	r2, [pc, #40]	; (8006c20 <apisn+0x30>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	6812      	ldr	r2, [r2, #0]
void apisn() {
 8006bfc:	b510      	push	{r4, lr}
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006bfe:	4c09      	ldr	r4, [pc, #36]	; (8006c24 <apisn+0x34>)
void apisn() {
 8006c00:	b082      	sub	sp, #8
	sprintf(stmuid, "api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8006c02:	4620      	mov	r0, r4
 8006c04:	9100      	str	r1, [sp, #0]
 8006c06:	4908      	ldr	r1, [pc, #32]	; (8006c28 <apisn+0x38>)
 8006c08:	f01c fbe4 	bl	80233d4 <siprintf>
	httpclient(stmuid);		// get sn and targ
 8006c0c:	4620      	mov	r0, r4
}
 8006c0e:	b002      	add	sp, #8
 8006c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	httpclient(stmuid);		// get sn and targ
 8006c14:	f7ff bfc0 	b.w	8006b98 <httpclient>
 8006c18:	1ff0f428 	.word	0x1ff0f428
 8006c1c:	1ff0f424 	.word	0x1ff0f424
 8006c20:	1ff0f420 	.word	0x1ff0f420
 8006c24:	20001ce8 	.word	0x20001ce8
 8006c28:	080295b4 	.word	0x080295b4

08006c2c <initialapisn>:

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8006c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	i = 1;
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006c30:	4e18      	ldr	r6, [pc, #96]	; (8006c94 <initialapisn+0x68>)
 8006c32:	f242 7328 	movw	r3, #10024	; 0x2728
 8006c36:	f8b6 505c 	ldrh.w	r5, [r6, #92]	; 0x5c
 8006c3a:	b2ad      	uxth	r5, r5
 8006c3c:	429d      	cmp	r5, r3
 8006c3e:	d126      	bne.n	8006c8e <initialapisn+0x62>
	{
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006c40:	2101      	movs	r1, #1
 8006c42:	4815      	ldr	r0, [pc, #84]	; (8006c98 <initialapisn+0x6c>)
		apisn();
		osDelay(5000);

		i++;
 8006c44:	2402      	movs	r4, #2
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006c46:	4f14      	ldr	r7, [pc, #80]	; (8006c98 <initialapisn+0x6c>)
		if (i > 10) {
			printf("************* ABORTED **************\n");
 8006c48:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8006c9c <initialapisn+0x70>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006c4c:	f01c fa4a 	bl	80230e4 <iprintf>
		apisn();
 8006c50:	f7ff ffce 	bl	8006bf0 <apisn>
		osDelay(5000);
 8006c54:	f241 3088 	movw	r0, #5000	; 0x1388
 8006c58:	f00c fce4 	bl	8013624 <osDelay>
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006c5c:	f8b6 305c 	ldrh.w	r3, [r6, #92]	; 0x5c
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006c60:	4621      	mov	r1, r4
 8006c62:	4638      	mov	r0, r7
		i++;
 8006c64:	3401      	adds	r4, #1
	while (statuspkt.uid == BUILDNO)		// not yet found new S/N from server
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	42ab      	cmp	r3, r5
 8006c6a:	d110      	bne.n	8006c8e <initialapisn+0x62>
		printf("getting S/N and UDP target using http. Try=%d\n", i);
 8006c6c:	f01c fa3a 	bl	80230e4 <iprintf>
		apisn();
 8006c70:	f7ff ffbe 	bl	8006bf0 <apisn>
		osDelay(5000);
 8006c74:	f241 3088 	movw	r0, #5000	; 0x1388
 8006c78:	f00c fcd4 	bl	8013624 <osDelay>
		if (i > 10) {
 8006c7c:	2c0a      	cmp	r4, #10
 8006c7e:	dded      	ble.n	8006c5c <initialapisn+0x30>
			printf("************* ABORTED **************\n");
 8006c80:	4640      	mov	r0, r8
 8006c82:	f01c facb 	bl	802321c <puts>
			rebootme(8);
 8006c86:	2008      	movs	r0, #8
 8006c88:	f7fb fac4 	bl	8002214 <rebootme>
 8006c8c:	e7e6      	b.n	8006c5c <initialapisn+0x30>
		}
	}
}
 8006c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c92:	bf00      	nop
 8006c94:	2001adc0 	.word	0x2001adc0
 8006c98:	080295cc 	.word	0x080295cc
 8006c9c:	080295fc 	.word	0x080295fc

08006ca0 <requestapisn>:

void requestapisn() {
 8006ca0:	b508      	push	{r3, lr}
	printf("updating S/N and UDP target using http\n");
 8006ca2:	4804      	ldr	r0, [pc, #16]	; (8006cb4 <requestapisn+0x14>)
 8006ca4:	f01c faba 	bl	802321c <puts>
	httpclient(stmuid);		// get sn and targ
 8006ca8:	4803      	ldr	r0, [pc, #12]	; (8006cb8 <requestapisn+0x18>)
}
 8006caa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	httpclient(stmuid);		// get sn and targ
 8006cae:	f7ff bf73 	b.w	8006b98 <httpclient>
 8006cb2:	bf00      	nop
 8006cb4:	08029624 	.word	0x08029624
 8006cb8:	20001ce8 	.word	0x20001ce8

08006cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack      /* set stack pointer */
 8006cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006cf4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8006cc0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8006cc2:	e003      	b.n	8006ccc <LoopCopyDataInit>

08006cc4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8006cc4:	4b0c      	ldr	r3, [pc, #48]	; (8006cf8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8006cc6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8006cc8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8006cca:	3104      	adds	r1, #4

08006ccc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8006ccc:	480b      	ldr	r0, [pc, #44]	; (8006cfc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8006cce:	4b0c      	ldr	r3, [pc, #48]	; (8006d00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8006cd0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8006cd2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8006cd4:	d3f6      	bcc.n	8006cc4 <CopyDataInit>
  ldr  r2, =_sbss
 8006cd6:	4a0b      	ldr	r2, [pc, #44]	; (8006d04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8006cd8:	e002      	b.n	8006ce0 <LoopFillZerobss>

08006cda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8006cda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8006cdc:	f842 3b04 	str.w	r3, [r2], #4

08006ce0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8006ce0:	4b09      	ldr	r3, [pc, #36]	; (8006d08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8006ce2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8006ce4:	d3f9      	bcc.n	8006cda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8006ce6:	f7ff fa3d 	bl	8006164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006cea:	f01b f90b 	bl	8021f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006cee:	f7fc f85d 	bl	8002dac <main>
  bx  lr    
 8006cf2:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8006cf4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8006cf8:	080433f0 	.word	0x080433f0
  ldr  r0, =_sdata
 8006cfc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8006d00:	200006bc 	.word	0x200006bc
  ldr  r2, =_sbss
 8006d04:	200006c0 	.word	0x200006c0
  ldr  r3, = _ebss
 8006d08:	2002fdd0 	.word	0x2002fdd0

08006d0c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006d0c:	e7fe      	b.n	8006d0c <CAN1_RX0_IRQHandler>
	...

08006d10 <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d10:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d12:	2003      	movs	r0, #3
{
 8006d14:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006d16:	6813      	ldr	r3, [r2, #0]
 8006d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d1c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006d1e:	f000 fc51 	bl	80075c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006d22:	2000      	movs	r0, #0
 8006d24:	f7ff f8ea 	bl	8005efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006d28:	f7fe f946 	bl	8004fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	bd08      	pop	{r3, pc}
 8006d30:	40023c00 	.word	0x40023c00

08006d34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006d34:	4a03      	ldr	r2, [pc, #12]	; (8006d44 <HAL_IncTick+0x10>)
 8006d36:	4b04      	ldr	r3, [pc, #16]	; (8006d48 <HAL_IncTick+0x14>)
 8006d38:	6811      	ldr	r1, [r2, #0]
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	440b      	add	r3, r1
 8006d3e:	6013      	str	r3, [r2, #0]
}
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop
 8006d44:	2001be78 	.word	0x2001be78
 8006d48:	200002d8 	.word	0x200002d8

08006d4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006d4c:	4b01      	ldr	r3, [pc, #4]	; (8006d54 <HAL_GetTick+0x8>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	2001be78 	.word	0x2001be78

08006d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006d5c:	f7ff fff6 	bl	8006d4c <HAL_GetTick>
 8006d60:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006d62:	1c63      	adds	r3, r4, #1
 8006d64:	d002      	beq.n	8006d6c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8006d66:	4b04      	ldr	r3, [pc, #16]	; (8006d78 <HAL_Delay+0x20>)
 8006d68:	781b      	ldrb	r3, [r3, #0]
 8006d6a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006d6c:	f7ff ffee 	bl	8006d4c <HAL_GetTick>
 8006d70:	1b43      	subs	r3, r0, r5
 8006d72:	42a3      	cmp	r3, r4
 8006d74:	d3fa      	bcc.n	8006d6c <HAL_Delay+0x14>
  {
  }
}
 8006d76:	bd38      	pop	{r3, r4, r5, pc}
 8006d78:	200002d8 	.word	0x200002d8

08006d7c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f000 8146 	beq.w	800700e <HAL_ADC_Init+0x292>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006d82:	49ae      	ldr	r1, [pc, #696]	; (800703c <HAL_ADC_Init+0x2c0>)
 8006d84:	4aae      	ldr	r2, [pc, #696]	; (8007040 <HAL_ADC_Init+0x2c4>)
{
 8006d86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006d88:	6803      	ldr	r3, [r0, #0]
 8006d8a:	4604      	mov	r4, r0
 8006d8c:	428b      	cmp	r3, r1
 8006d8e:	bf18      	it	ne
 8006d90:	4293      	cmpne	r3, r2
 8006d92:	d003      	beq.n	8006d9c <HAL_ADC_Init+0x20>
 8006d94:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d177      	bne.n	8006e8c <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006d9c:	6863      	ldr	r3, [r4, #4]
 8006d9e:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006da2:	d17c      	bne.n	8006e9e <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006da4:	68a3      	ldr	r3, [r4, #8]
 8006da6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8006daa:	f040 8082 	bne.w	8006eb2 <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d84e      	bhi.n	8006e52 <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006db4:	69a3      	ldr	r3, [r4, #24]
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d845      	bhi.n	8006e46 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8006dba:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006dbc:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8006dc0:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8006dc4:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8006dc8:	bf18      	it	ne
 8006dca:	2900      	cmpne	r1, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8006dd6:	bf0c      	ite	eq
 8006dd8:	2300      	moveq	r3, #0
 8006dda:	f003 0301 	andne.w	r3, r3, #1
 8006dde:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8006de2:	bf0c      	ite	eq
 8006de4:	2300      	moveq	r3, #0
 8006de6:	f003 0301 	andne.w	r3, r3, #1
 8006dea:	b123      	cbz	r3, 8006df6 <HAL_ADC_Init+0x7a>
 8006dec:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8006df0:	2a01      	cmp	r2, #1
 8006df2:	f200 8113 	bhi.w	800701c <HAL_ADC_Init+0x2a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006df6:	68e3      	ldr	r3, [r4, #12]
 8006df8:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8006dfc:	d165      	bne.n	8006eca <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8006dfe:	69e3      	ldr	r3, [r4, #28]
 8006e00:	3b01      	subs	r3, #1
 8006e02:	2b0f      	cmp	r3, #15
 8006e04:	d85b      	bhi.n	8006ebe <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8006e06:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d830      	bhi.n	8006e70 <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006e0e:	6963      	ldr	r3, [r4, #20]
 8006e10:	2b02      	cmp	r3, #2
 8006e12:	d835      	bhi.n	8006e80 <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006e14:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006e18:	2b01      	cmp	r3, #1
 8006e1a:	d823      	bhi.n	8006e64 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006e1c:	4b89      	ldr	r3, [pc, #548]	; (8007044 <HAL_ADC_Init+0x2c8>)
 8006e1e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d004      	beq.n	8006e2e <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8006e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006e26:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8006e2a:	f040 80ea 	bne.w	8007002 <HAL_ADC_Init+0x286>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8006e2e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	f000 80d6 	beq.w	8006fe2 <HAL_ADC_Init+0x266>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006e36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e38:	06db      	lsls	r3, r3, #27
 8006e3a:	d54c      	bpl.n	8006ed6 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8006e3c:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8006e3e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8006e40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8006e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006e46:	f240 1151 	movw	r1, #337	; 0x151
 8006e4a:	487f      	ldr	r0, [pc, #508]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e4c:	f7fc ff76 	bl	8003d3c <assert_failed>
 8006e50:	e7b3      	b.n	8006dba <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8006e52:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8006e56:	487c      	ldr	r0, [pc, #496]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e58:	f7fc ff70 	bl	8003d3c <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8006e5c:	69a3      	ldr	r3, [r4, #24]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d9ab      	bls.n	8006dba <HAL_ADC_Init+0x3e>
 8006e62:	e7f0      	b.n	8006e46 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8006e64:	f240 1157 	movw	r1, #343	; 0x157
 8006e68:	4877      	ldr	r0, [pc, #476]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e6a:	f7fc ff67 	bl	8003d3c <assert_failed>
 8006e6e:	e7d5      	b.n	8006e1c <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8006e70:	f240 1155 	movw	r1, #341	; 0x155
 8006e74:	4874      	ldr	r0, [pc, #464]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e76:	f7fc ff61 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8006e7a:	6963      	ldr	r3, [r4, #20]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d9c9      	bls.n	8006e14 <HAL_ADC_Init+0x98>
 8006e80:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8006e84:	4870      	ldr	r0, [pc, #448]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e86:	f7fc ff59 	bl	8003d3c <assert_failed>
 8006e8a:	e7c3      	b.n	8006e14 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8006e8c:	f240 114d 	movw	r1, #333	; 0x14d
 8006e90:	486d      	ldr	r0, [pc, #436]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006e92:	f7fc ff53 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8006e96:	6863      	ldr	r3, [r4, #4]
 8006e98:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8006e9c:	d082      	beq.n	8006da4 <HAL_ADC_Init+0x28>
 8006e9e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8006ea2:	4869      	ldr	r0, [pc, #420]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006ea4:	f7fc ff4a 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8006ea8:	68a3      	ldr	r3, [r4, #8]
 8006eaa:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8006eae:	f43f af7e 	beq.w	8006dae <HAL_ADC_Init+0x32>
 8006eb2:	f240 114f 	movw	r1, #335	; 0x14f
 8006eb6:	4864      	ldr	r0, [pc, #400]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006eb8:	f7fc ff40 	bl	8003d3c <assert_failed>
 8006ebc:	e777      	b.n	8006dae <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8006ebe:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8006ec2:	4861      	ldr	r0, [pc, #388]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006ec4:	f7fc ff3a 	bl	8003d3c <assert_failed>
 8006ec8:	e79d      	b.n	8006e06 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8006eca:	f240 1153 	movw	r1, #339	; 0x153
 8006ece:	485e      	ldr	r0, [pc, #376]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8006ed0:	f7fc ff34 	bl	8003d3c <assert_failed>
 8006ed4:	e793      	b.n	8006dfe <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8006ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ed8:	4a5c      	ldr	r2, [pc, #368]	; (800704c <HAL_ADC_Init+0x2d0>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006eda:	495d      	ldr	r1, [pc, #372]	; (8007050 <HAL_ADC_Init+0x2d4>)
    ADC_STATE_CLR_SET(hadc->State,
 8006edc:	401a      	ands	r2, r3
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ede:	6823      	ldr	r3, [r4, #0]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006ee0:	4d58      	ldr	r5, [pc, #352]	; (8007044 <HAL_ADC_Init+0x2c8>)
    ADC_STATE_CLR_SET(hadc->State,
 8006ee2:	f042 0202 	orr.w	r2, r2, #2
 8006ee6:	6422      	str	r2, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006ee8:	684a      	ldr	r2, [r1, #4]
 8006eea:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8006eee:	604a      	str	r2, [r1, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006ef0:	684a      	ldr	r2, [r1, #4]
 8006ef2:	6860      	ldr	r0, [r4, #4]
 8006ef4:	4302      	orrs	r2, r0
 8006ef6:	604a      	str	r2, [r1, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006ef8:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006efa:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006efc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f00:	f8d4 c008 	ldr.w	ip, [r4, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f04:	68e7      	ldr	r7, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006f06:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f08:	6858      	ldr	r0, [r3, #4]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f0c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f10:	42ae      	cmp	r6, r5
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006f12:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006f14:	6858      	ldr	r0, [r3, #4]
 8006f16:	f020 7040 	bic.w	r0, r0, #50331648	; 0x3000000
 8006f1a:	6058      	str	r0, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006f1c:	6859      	ldr	r1, [r3, #4]
 8006f1e:	ea41 010c 	orr.w	r1, r1, ip
 8006f22:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006f24:	6899      	ldr	r1, [r3, #8]
 8006f26:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8006f2a:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006f2c:	689a      	ldr	r2, [r3, #8]
 8006f2e:	ea42 0207 	orr.w	r2, r2, r7
 8006f32:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006f34:	d05c      	beq.n	8006ff0 <HAL_ADC_Init+0x274>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f36:	6899      	ldr	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f38:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006f3a:	f021 6170 	bic.w	r1, r1, #251658240	; 0xf000000
 8006f3e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006f40:	689a      	ldr	r2, [r3, #8]
 8006f42:	4316      	orrs	r6, r2
 8006f44:	609e      	str	r6, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006f46:	6899      	ldr	r1, [r3, #8]
 8006f48:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8006f4c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006f4e:	689a      	ldr	r2, [r3, #8]
 8006f50:	4302      	orrs	r2, r0
 8006f52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f54:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f56:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006f58:	f021 0102 	bic.w	r1, r1, #2
 8006f5c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006f5e:	689a      	ldr	r2, [r3, #8]
 8006f60:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8006f64:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8006f66:	f894 2020 	ldrb.w	r2, [r4, #32]
 8006f6a:	2a00      	cmp	r2, #0
 8006f6c:	d051      	beq.n	8007012 <HAL_ADC_Init+0x296>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8006f6e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f70:	3a01      	subs	r2, #1
 8006f72:	2a07      	cmp	r2, #7
 8006f74:	d858      	bhi.n	8007028 <HAL_ADC_Init+0x2ac>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006f7c:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006f7e:	6859      	ldr	r1, [r3, #4]
 8006f80:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8006f84:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006f86:	6859      	ldr	r1, [r3, #4]
 8006f88:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8006f8c:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f8e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8006f90:	2500      	movs	r5, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f92:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f94:	f420 0070 	bic.w	r0, r0, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006f98:	6966      	ldr	r6, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006f9a:	1e4a      	subs	r2, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006f9c:	62d8      	str	r0, [r3, #44]	; 0x2c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006f9e:	4628      	mov	r0, r5
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006fa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fa2:	ea41 5102 	orr.w	r1, r1, r2, lsl #20
 8006fa6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006fa8:	6899      	ldr	r1, [r3, #8]
 8006faa:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8006fae:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8006fb6:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8006fba:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006fbc:	6899      	ldr	r1, [r3, #8]
 8006fbe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8006fc2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	ea42 2286 	orr.w	r2, r2, r6, lsl #10
 8006fca:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8006fcc:	6465      	str	r5, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8006fce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fd0:	f023 0303 	bic.w	r3, r3, #3
 8006fd4:	f043 0301 	orr.w	r3, r3, #1
 8006fd8:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8006fda:	2300      	movs	r3, #0
 8006fdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8006fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_ADC_MspInit(hadc);
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f7fe f818 	bl	8005018 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006fe8:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8006fea:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8006fee:	e722      	b.n	8006e36 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006ff0:	689a      	ldr	r2, [r3, #8]
 8006ff2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006ff6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006ffe:	609a      	str	r2, [r3, #8]
 8007000:	e7a8      	b.n	8006f54 <HAL_ADC_Init+0x1d8>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007002:	f240 115b 	movw	r1, #347	; 0x15b
 8007006:	4810      	ldr	r0, [pc, #64]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8007008:	f7fc fe98 	bl	8003d3c <assert_failed>
 800700c:	e70f      	b.n	8006e2e <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 800700e:	2001      	movs	r0, #1
}
 8007010:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007012:	685a      	ldr	r2, [r3, #4]
 8007014:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007018:	605a      	str	r2, [r3, #4]
 800701a:	e7b8      	b.n	8006f8e <HAL_ADC_Init+0x212>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 800701c:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007020:	4809      	ldr	r0, [pc, #36]	; (8007048 <HAL_ADC_Init+0x2cc>)
 8007022:	f7fc fe8b 	bl	8003d3c <assert_failed>
 8007026:	e6e6      	b.n	8006df6 <HAL_ADC_Init+0x7a>
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007028:	f240 71ac 	movw	r1, #1964	; 0x7ac
 800702c:	4806      	ldr	r0, [pc, #24]	; (8007048 <HAL_ADC_Init+0x2cc>)
 800702e:	f7fc fe85 	bl	8003d3c <assert_failed>
 8007032:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007034:	6823      	ldr	r3, [r4, #0]
 8007036:	3a01      	subs	r2, #1
 8007038:	e79d      	b.n	8006f76 <HAL_ADC_Init+0x1fa>
 800703a:	bf00      	nop
 800703c:	40012000 	.word	0x40012000
 8007040:	40012100 	.word	0x40012100
 8007044:	0f000001 	.word	0x0f000001
 8007048:	0802964c 	.word	0x0802964c
 800704c:	ffffeefd 	.word	0xffffeefd
 8007050:	40012300 	.word	0x40012300

08007054 <HAL_ADC_Start>:
{
 8007054:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8007056:	2300      	movs	r3, #0
{
 8007058:	b082      	sub	sp, #8
 800705a:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 800705c:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800705e:	6983      	ldr	r3, [r0, #24]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d904      	bls.n	800706e <HAL_ADC_Start+0x1a>
 8007064:	f240 21df 	movw	r1, #735	; 0x2df
 8007068:	4848      	ldr	r0, [pc, #288]	; (800718c <HAL_ADC_Start+0x138>)
 800706a:	f7fc fe67 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800706e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007070:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007074:	d174      	bne.n	8007160 <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 8007076:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800707a:	2b01      	cmp	r3, #1
 800707c:	d079      	beq.n	8007172 <HAL_ADC_Start+0x11e>
 800707e:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007080:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8007082:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007086:	6893      	ldr	r3, [r2, #8]
 8007088:	07d8      	lsls	r0, r3, #31
 800708a:	d414      	bmi.n	80070b6 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800708c:	4b40      	ldr	r3, [pc, #256]	; (8007190 <HAL_ADC_Start+0x13c>)
 800708e:	4841      	ldr	r0, [pc, #260]	; (8007194 <HAL_ADC_Start+0x140>)
 8007090:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8007092:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007094:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8007098:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800709c:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 800709e:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80070a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80070a4:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80070a6:	9b01      	ldr	r3, [sp, #4]
 80070a8:	b12b      	cbz	r3, 80070b6 <HAL_ADC_Start+0x62>
      counter--;
 80070aa:	9b01      	ldr	r3, [sp, #4]
 80070ac:	3b01      	subs	r3, #1
 80070ae:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 80070b0:	9b01      	ldr	r3, [sp, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1f9      	bne.n	80070aa <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80070b6:	6890      	ldr	r0, [r2, #8]
 80070b8:	f010 0001 	ands.w	r0, r0, #1
 80070bc:	d02c      	beq.n	8007118 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 80070be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80070c0:	4b35      	ldr	r3, [pc, #212]	; (8007198 <HAL_ADC_Start+0x144>)
 80070c2:	400b      	ands	r3, r1
 80070c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070c8:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80070ca:	6853      	ldr	r3, [r2, #4]
 80070cc:	0559      	lsls	r1, r3, #21
 80070ce:	d505      	bpl.n	80070dc <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80070d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80070d6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80070da:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80070dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070de:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80070e2:	d02f      	beq.n	8007144 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80070e4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80070e6:	f023 0306 	bic.w	r3, r3, #6
 80070ea:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80070ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 80070f0:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80070f2:	4b2a      	ldr	r3, [pc, #168]	; (800719c <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 80070f4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80070f8:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80070fa:	6858      	ldr	r0, [r3, #4]
 80070fc:	f010 001f 	ands.w	r0, r0, #31
 8007100:	d114      	bne.n	800712c <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007102:	6893      	ldr	r3, [r2, #8]
 8007104:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8007108:	d10e      	bne.n	8007128 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800710a:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 800710c:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800710e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8007112:	6091      	str	r1, [r2, #8]
}
 8007114:	b002      	add	sp, #8
 8007116:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007118:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800711a:	f043 0310 	orr.w	r3, r3, #16
 800711e:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007120:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007122:	f043 0301 	orr.w	r3, r3, #1
 8007126:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007128:	b002      	add	sp, #8
 800712a:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800712c:	481c      	ldr	r0, [pc, #112]	; (80071a0 <HAL_ADC_Start+0x14c>)
 800712e:	4282      	cmp	r2, r0
 8007130:	d00a      	beq.n	8007148 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007132:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007134:	06db      	lsls	r3, r3, #27
 8007136:	d402      	bmi.n	800713e <HAL_ADC_Start+0xea>
 8007138:	4c1a      	ldr	r4, [pc, #104]	; (80071a4 <HAL_ADC_Start+0x150>)
 800713a:	42a2      	cmp	r2, r4
 800713c:	d01c      	beq.n	8007178 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800713e:	2000      	movs	r0, #0
}
 8007140:	b002      	add	sp, #8
 8007142:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8007144:	6463      	str	r3, [r4, #68]	; 0x44
 8007146:	e7d1      	b.n	80070ec <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007148:	6893      	ldr	r3, [r2, #8]
 800714a:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800714e:	d103      	bne.n	8007158 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007150:	6893      	ldr	r3, [r2, #8]
 8007152:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007156:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007158:	4b10      	ldr	r3, [pc, #64]	; (800719c <HAL_ADC_Start+0x148>)
  return HAL_OK;
 800715a:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800715c:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800715e:	e7e3      	b.n	8007128 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007160:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8007164:	4809      	ldr	r0, [pc, #36]	; (800718c <HAL_ADC_Start+0x138>)
 8007166:	f7fc fde9 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hadc);
 800716a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800716e:	2b01      	cmp	r3, #1
 8007170:	d185      	bne.n	800707e <HAL_ADC_Start+0x2a>
 8007172:	2002      	movs	r0, #2
}
 8007174:	b002      	add	sp, #8
 8007176:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007178:	68a0      	ldr	r0, [r4, #8]
 800717a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800717e:	d1de      	bne.n	800713e <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007180:	68a3      	ldr	r3, [r4, #8]
 8007182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007186:	60a3      	str	r3, [r4, #8]
 8007188:	e7ce      	b.n	8007128 <HAL_ADC_Start+0xd4>
 800718a:	bf00      	nop
 800718c:	0802964c 	.word	0x0802964c
 8007190:	2000027c 	.word	0x2000027c
 8007194:	431bde83 	.word	0x431bde83
 8007198:	fffff8fe 	.word	0xfffff8fe
 800719c:	40012300 	.word	0x40012300
 80071a0:	40012000 	.word	0x40012000
 80071a4:	40012200 	.word	0x40012200

080071a8 <HAL_ADC_ConvCpltCallback>:
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <HAL_ADC_LevelOutOfWindowCallback>:
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop

080071b0 <HAL_ADC_ErrorCallback>:
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop

080071b4 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80071b4:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80071b6:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80071b8:	2a01      	cmp	r2, #1
{
 80071ba:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80071bc:	681d      	ldr	r5, [r3, #0]
{
 80071be:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80071c0:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80071c2:	d904      	bls.n	80071ce <HAL_ADC_IRQHandler+0x1a>
 80071c4:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80071c8:	4851      	ldr	r0, [pc, #324]	; (8007310 <HAL_ADC_IRQHandler+0x15c>)
 80071ca:	f7fc fdb7 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80071ce:	69e3      	ldr	r3, [r4, #28]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	2b0f      	cmp	r3, #15
 80071d4:	f200 8086 	bhi.w	80072e4 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80071d8:	6963      	ldr	r3, [r4, #20]
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d87c      	bhi.n	80072d8 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80071de:	07ab      	lsls	r3, r5, #30
 80071e0:	d52c      	bpl.n	800723c <HAL_ADC_IRQHandler+0x88>
 80071e2:	06b0      	lsls	r0, r6, #26
 80071e4:	d52a      	bpl.n	800723c <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80071e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071e8:	06d9      	lsls	r1, r3, #27
 80071ea:	d403      	bmi.n	80071f4 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80071ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80071ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80071f2:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80071f4:	6823      	ldr	r3, [r4, #0]
 80071f6:	689a      	ldr	r2, [r3, #8]
 80071f8:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80071fc:	d117      	bne.n	800722e <HAL_ADC_IRQHandler+0x7a>
 80071fe:	69a2      	ldr	r2, [r4, #24]
 8007200:	b9aa      	cbnz	r2, 800722e <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007204:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8007208:	d002      	beq.n	8007210 <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800720a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800720c:	0552      	lsls	r2, r2, #21
 800720e:	d40e      	bmi.n	800722e <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007210:	685a      	ldr	r2, [r3, #4]
 8007212:	f022 0220 	bic.w	r2, r2, #32
 8007216:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007218:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800721a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800721e:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007222:	04d8      	lsls	r0, r3, #19
 8007224:	d403      	bmi.n	800722e <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007226:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007228:	f043 0301 	orr.w	r3, r3, #1
 800722c:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800722e:	4620      	mov	r0, r4
 8007230:	f7ff ffba 	bl	80071a8 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	f06f 0212 	mvn.w	r2, #18
 800723a:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 800723c:	0769      	lsls	r1, r5, #29
 800723e:	d530      	bpl.n	80072a2 <HAL_ADC_IRQHandler+0xee>
 8007240:	0632      	lsls	r2, r6, #24
 8007242:	d52e      	bpl.n	80072a2 <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007244:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007246:	06db      	lsls	r3, r3, #27
 8007248:	d403      	bmi.n	8007252 <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800724a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800724c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007250:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800725a:	d11b      	bne.n	8007294 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800725c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800725e:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8007262:	d151      	bne.n	8007308 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007264:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007266:	0551      	lsls	r1, r2, #21
 8007268:	d414      	bmi.n	8007294 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800726a:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800726c:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8007270:	d110      	bne.n	8007294 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8007272:	69a2      	ldr	r2, [r4, #24]
 8007274:	b972      	cbnz	r2, 8007294 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800727c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800727e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007284:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8007286:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007288:	05da      	lsls	r2, r3, #23
 800728a:	d403      	bmi.n	8007294 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800728c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007294:	4620      	mov	r0, r4
 8007296:	f000 f931 	bl	80074fc <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	f06f 020c 	mvn.w	r2, #12
 80072a0:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80072a2:	0673      	lsls	r3, r6, #25
 80072a4:	d505      	bpl.n	80072b2 <HAL_ADC_IRQHandler+0xfe>
 80072a6:	07e8      	lsls	r0, r5, #31
 80072a8:	d503      	bpl.n	80072b2 <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	07d9      	lsls	r1, r3, #31
 80072b0:	d41e      	bmi.n	80072f0 <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80072b2:	06aa      	lsls	r2, r5, #26
 80072b4:	d501      	bpl.n	80072ba <HAL_ADC_IRQHandler+0x106>
 80072b6:	0173      	lsls	r3, r6, #5
 80072b8:	d400      	bmi.n	80072bc <HAL_ADC_IRQHandler+0x108>
}
 80072ba:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80072bc:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072be:	f06f 0520 	mvn.w	r5, #32
 80072c2:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 80072c4:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80072c6:	f043 0302 	orr.w	r3, r3, #2
 80072ca:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072cc:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80072ce:	f7ff ff6f 	bl	80071b0 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	601d      	str	r5, [r3, #0]
}
 80072d6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80072d8:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80072dc:	480c      	ldr	r0, [pc, #48]	; (8007310 <HAL_ADC_IRQHandler+0x15c>)
 80072de:	f7fc fd2d 	bl	8003d3c <assert_failed>
 80072e2:	e77c      	b.n	80071de <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80072e4:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80072e8:	4809      	ldr	r0, [pc, #36]	; (8007310 <HAL_ADC_IRQHandler+0x15c>)
 80072ea:	f7fc fd27 	bl	8003d3c <assert_failed>
 80072ee:	e773      	b.n	80071d8 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80072f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80072f2:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80072f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072f8:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80072fa:	f7ff ff57 	bl	80071ac <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80072fe:	6823      	ldr	r3, [r4, #0]
 8007300:	f06f 0201 	mvn.w	r2, #1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	e7d4      	b.n	80072b2 <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007308:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800730a:	0550      	lsls	r0, r2, #21
 800730c:	d4c2      	bmi.n	8007294 <HAL_ADC_IRQHandler+0xe0>
 800730e:	e7a9      	b.n	8007264 <HAL_ADC_IRQHandler+0xb0>
 8007310:	0802964c 	.word	0x0802964c

08007314 <HAL_ADC_ConfigChannel>:
{
 8007314:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8007316:	2300      	movs	r3, #0
{
 8007318:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800731a:	4a72      	ldr	r2, [pc, #456]	; (80074e4 <HAL_ADC_ConfigChannel+0x1d0>)
{
 800731c:	460e      	mov	r6, r1
  __IO uint32_t counter = 0;
 800731e:	9301      	str	r3, [sp, #4]
{
 8007320:	4604      	mov	r4, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8007322:	680b      	ldr	r3, [r1, #0]
 8007324:	4293      	cmp	r3, r2
 8007326:	bf18      	it	ne
 8007328:	2b12      	cmpne	r3, #18
 800732a:	d902      	bls.n	8007332 <HAL_ADC_ConfigChannel+0x1e>
 800732c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007330:	d143      	bne.n	80073ba <HAL_ADC_ConfigChannel+0xa6>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8007332:	6873      	ldr	r3, [r6, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	2b0f      	cmp	r3, #15
 8007338:	d848      	bhi.n	80073cc <HAL_ADC_ConfigChannel+0xb8>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800733a:	68b3      	ldr	r3, [r6, #8]
 800733c:	2b07      	cmp	r3, #7
 800733e:	d84d      	bhi.n	80073dc <HAL_ADC_ConfigChannel+0xc8>
  __HAL_LOCK(hadc);
 8007340:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d052      	beq.n	80073ee <HAL_ADC_ConfigChannel+0xda>
 8007348:	2301      	movs	r3, #1
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800734a:	2107      	movs	r1, #7
 800734c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hadc);
 800734e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007352:	6835      	ldr	r5, [r6, #0]
 8007354:	2d09      	cmp	r5, #9
 8007356:	b2af      	uxth	r7, r5
 8007358:	d94c      	bls.n	80073f4 <HAL_ADC_ConfigChannel+0xe0>
 800735a:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 800735e:	d049      	beq.n	80073f4 <HAL_ADC_ConfigChannel+0xe0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007360:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8007364:	68c2      	ldr	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007366:	f8df c17c 	ldr.w	ip, [pc, #380]	; 80074e4 <HAL_ADC_ConfigChannel+0x1d0>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800736a:	3b1e      	subs	r3, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800736c:	4565      	cmp	r5, ip
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800736e:	fa01 f103 	lsl.w	r1, r1, r3
 8007372:	ea22 0201 	bic.w	r2, r2, r1
 8007376:	60c2      	str	r2, [r0, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007378:	f000 8086 	beq.w	8007488 <HAL_ADC_ConfigChannel+0x174>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800737c:	68b2      	ldr	r2, [r6, #8]
 800737e:	68c1      	ldr	r1, [r0, #12]
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	430b      	orrs	r3, r1
 8007386:	60c3      	str	r3, [r0, #12]
  if (sConfig->Rank < 7)
 8007388:	6873      	ldr	r3, [r6, #4]
 800738a:	2b06      	cmp	r3, #6
 800738c:	d843      	bhi.n	8007416 <HAL_ADC_ConfigChannel+0x102>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800738e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8007392:	211f      	movs	r1, #31
 8007394:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8007396:	3b05      	subs	r3, #5
 8007398:	4099      	lsls	r1, r3
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800739a:	fa07 f303 	lsl.w	r3, r7, r3
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800739e:	ea22 0201 	bic.w	r2, r2, r1
 80073a2:	6342      	str	r2, [r0, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80073a4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80073a6:	4313      	orrs	r3, r2
 80073a8:	6343      	str	r3, [r0, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80073aa:	4b4f      	ldr	r3, [pc, #316]	; (80074e8 <HAL_ADC_ConfigChannel+0x1d4>)
 80073ac:	4298      	cmp	r0, r3
 80073ae:	d047      	beq.n	8007440 <HAL_ADC_ConfigChannel+0x12c>
  __HAL_UNLOCK(hadc);
 80073b0:	2000      	movs	r0, #0
 80073b2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80073b6:	b003      	add	sp, #12
 80073b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80073ba:	f240 618b 	movw	r1, #1675	; 0x68b
 80073be:	484b      	ldr	r0, [pc, #300]	; (80074ec <HAL_ADC_ConfigChannel+0x1d8>)
 80073c0:	f7fc fcbc 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80073c4:	6873      	ldr	r3, [r6, #4]
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b0f      	cmp	r3, #15
 80073ca:	d9b6      	bls.n	800733a <HAL_ADC_ConfigChannel+0x26>
 80073cc:	f240 618c 	movw	r1, #1676	; 0x68c
 80073d0:	4846      	ldr	r0, [pc, #280]	; (80074ec <HAL_ADC_ConfigChannel+0x1d8>)
 80073d2:	f7fc fcb3 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80073d6:	68b3      	ldr	r3, [r6, #8]
 80073d8:	2b07      	cmp	r3, #7
 80073da:	d9b1      	bls.n	8007340 <HAL_ADC_ConfigChannel+0x2c>
 80073dc:	f240 618d 	movw	r1, #1677	; 0x68d
 80073e0:	4842      	ldr	r0, [pc, #264]	; (80074ec <HAL_ADC_ConfigChannel+0x1d8>)
 80073e2:	f7fc fcab 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hadc);
 80073e6:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d1ac      	bne.n	8007348 <HAL_ADC_ConfigChannel+0x34>
 80073ee:	2002      	movs	r0, #2
}
 80073f0:	b003      	add	sp, #12
 80073f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073f4:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
 80073f8:	6902      	ldr	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80073fa:	68b3      	ldr	r3, [r6, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80073fc:	fa01 f10c 	lsl.w	r1, r1, ip
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007400:	fa03 f30c 	lsl.w	r3, r3, ip
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007404:	ea22 0201 	bic.w	r2, r2, r1
 8007408:	6102      	str	r2, [r0, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800740a:	6902      	ldr	r2, [r0, #16]
 800740c:	4313      	orrs	r3, r2
 800740e:	6103      	str	r3, [r0, #16]
  if (sConfig->Rank < 7)
 8007410:	6873      	ldr	r3, [r6, #4]
 8007412:	2b06      	cmp	r3, #6
 8007414:	d9bb      	bls.n	800738e <HAL_ADC_ConfigChannel+0x7a>
  else if (sConfig->Rank < 13)
 8007416:	2b0c      	cmp	r3, #12
 8007418:	d821      	bhi.n	800745e <HAL_ADC_ConfigChannel+0x14a>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800741a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800741e:	261f      	movs	r6, #31
 8007420:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8007422:	f1a3 0123 	sub.w	r1, r3, #35	; 0x23
 8007426:	fa06 f301 	lsl.w	r3, r6, r1
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800742a:	fa07 f101 	lsl.w	r1, r7, r1
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800742e:	ea22 0303 	bic.w	r3, r2, r3
 8007432:	6303      	str	r3, [r0, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007434:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8007436:	4319      	orrs	r1, r3
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007438:	4b2b      	ldr	r3, [pc, #172]	; (80074e8 <HAL_ADC_ConfigChannel+0x1d4>)
 800743a:	4298      	cmp	r0, r3
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800743c:	6301      	str	r1, [r0, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800743e:	d1b7      	bne.n	80073b0 <HAL_ADC_ConfigChannel+0x9c>
 8007440:	f1b5 4f00 	cmp.w	r5, #2147483648	; 0x80000000
 8007444:	d01a      	beq.n	800747c <HAL_ADC_ConfigChannel+0x168>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007446:	2d12      	cmp	r5, #18
 8007448:	d125      	bne.n	8007496 <HAL_ADC_ConfigChannel+0x182>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800744a:	4b29      	ldr	r3, [pc, #164]	; (80074f0 <HAL_ADC_ConfigChannel+0x1dc>)
 800744c:	685a      	ldr	r2, [r3, #4]
 800744e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8007452:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 8007454:	685a      	ldr	r2, [r3, #4]
 8007456:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800745a:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800745c:	e7a8      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x9c>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800745e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007462:	261f      	movs	r6, #31
 8007464:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8007466:	3a41      	subs	r2, #65	; 0x41
 8007468:	4096      	lsls	r6, r2
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800746a:	fa07 f102 	lsl.w	r1, r7, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800746e:	ea23 0306 	bic.w	r3, r3, r6
 8007472:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007474:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8007476:	4311      	orrs	r1, r2
 8007478:	62c1      	str	r1, [r0, #44]	; 0x2c
 800747a:	e796      	b.n	80073aa <HAL_ADC_ConfigChannel+0x96>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800747c:	4a1c      	ldr	r2, [pc, #112]	; (80074f0 <HAL_ADC_ConfigChannel+0x1dc>)
 800747e:	6853      	ldr	r3, [r2, #4]
 8007480:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007484:	6053      	str	r3, [r2, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007486:	e793      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x9c>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007488:	68c3      	ldr	r3, [r0, #12]
 800748a:	2712      	movs	r7, #18
 800748c:	68b2      	ldr	r2, [r6, #8]
 800748e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007492:	60c3      	str	r3, [r0, #12]
 8007494:	e778      	b.n	8007388 <HAL_ADC_ConfigChannel+0x74>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007496:	4b13      	ldr	r3, [pc, #76]	; (80074e4 <HAL_ADC_ConfigChannel+0x1d0>)
 8007498:	429d      	cmp	r5, r3
 800749a:	d001      	beq.n	80074a0 <HAL_ADC_ConfigChannel+0x18c>
 800749c:	2d11      	cmp	r5, #17
 800749e:	d187      	bne.n	80073b0 <HAL_ADC_ConfigChannel+0x9c>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80074a0:	4b13      	ldr	r3, [pc, #76]	; (80074f0 <HAL_ADC_ConfigChannel+0x1dc>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074a2:	4910      	ldr	r1, [pc, #64]	; (80074e4 <HAL_ADC_ConfigChannel+0x1d0>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 80074a4:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074a6:	428d      	cmp	r5, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 80074a8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80074ac:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80074b4:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074b6:	f47f af7b 	bne.w	80073b0 <HAL_ADC_ConfigChannel+0x9c>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80074ba:	4b0e      	ldr	r3, [pc, #56]	; (80074f4 <HAL_ADC_ConfigChannel+0x1e0>)
 80074bc:	4a0e      	ldr	r2, [pc, #56]	; (80074f8 <HAL_ADC_ConfigChannel+0x1e4>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	fba2 2303 	umull	r2, r3, r2, r3
 80074c4:	0c9b      	lsrs	r3, r3, #18
 80074c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80074ca:	005b      	lsls	r3, r3, #1
 80074cc:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	f43f af6d 	beq.w	80073b0 <HAL_ADC_ConfigChannel+0x9c>
        counter--;
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	3b01      	subs	r3, #1
 80074da:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80074dc:	9b01      	ldr	r3, [sp, #4]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d1f9      	bne.n	80074d6 <HAL_ADC_ConfigChannel+0x1c2>
 80074e2:	e765      	b.n	80073b0 <HAL_ADC_ConfigChannel+0x9c>
 80074e4:	10000012 	.word	0x10000012
 80074e8:	40012000 	.word	0x40012000
 80074ec:	0802964c 	.word	0x0802964c
 80074f0:	40012300 	.word	0x40012300
 80074f4:	2000027c 	.word	0x2000027c
 80074f8:	431bde83 	.word	0x431bde83

080074fc <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop

08007500 <HAL_ADCEx_MultiModeConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 8007500:	680b      	ldr	r3, [r1, #0]
 8007502:	2b19      	cmp	r3, #25
{
 8007504:	b570      	push	{r4, r5, r6, lr}
 8007506:	460c      	mov	r4, r1
 8007508:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 800750a:	d93e      	bls.n	800758a <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 800750c:	f240 31af 	movw	r1, #943	; 0x3af
 8007510:	4829      	ldr	r0, [pc, #164]	; (80075b8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 8007512:	f7fc fc13 	bl	8003d3c <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800751c:	d13e      	bne.n	800759c <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 800751e:	68a3      	ldr	r3, [r4, #8]
 8007520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007524:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007528:	bf18      	it	ne
 800752a:	2b00      	cmpne	r3, #0
 800752c:	bf14      	ite	ne
 800752e:	2201      	movne	r2, #1
 8007530:	2200      	moveq	r2, #0
 8007532:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007536:	bf0c      	ite	eq
 8007538:	2200      	moveq	r2, #0
 800753a:	f002 0201 	andne.w	r2, r2, #1
 800753e:	b112      	cbz	r2, 8007546 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8007540:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007544:	d132      	bne.n	80075ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007546:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800754a:	2b01      	cmp	r3, #1
 800754c:	d02c      	beq.n	80075a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 800754e:	4b1b      	ldr	r3, [pc, #108]	; (80075bc <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007550:	2100      	movs	r1, #0
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8007552:	685a      	ldr	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8007554:	4608      	mov	r0, r1
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8007556:	f022 021f 	bic.w	r2, r2, #31
 800755a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 800755c:	685a      	ldr	r2, [r3, #4]
 800755e:	6826      	ldr	r6, [r4, #0]
 8007560:	4332      	orrs	r2, r6
 8007562:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DMA);
 8007564:	685a      	ldr	r2, [r3, #4]
 8007566:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800756a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 800756c:	685a      	ldr	r2, [r3, #4]
 800756e:	6866      	ldr	r6, [r4, #4]
 8007570:	4332      	orrs	r2, r6
 8007572:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800757a:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 800757c:	68a4      	ldr	r4, [r4, #8]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4322      	orrs	r2, r4
 8007582:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 8007584:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8007588:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 800758a:	4a0d      	ldr	r2, [pc, #52]	; (80075c0 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 800758c:	fa22 f303 	lsr.w	r3, r2, r3
 8007590:	07db      	lsls	r3, r3, #31
 8007592:	d5bb      	bpl.n	800750c <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 800759a:	d0c0      	beq.n	800751e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800759c:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80075a0:	4805      	ldr	r0, [pc, #20]	; (80075b8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80075a2:	f7fc fbcb 	bl	8003d3c <assert_failed>
 80075a6:	e7ba      	b.n	800751e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 80075a8:	2002      	movs	r0, #2
}
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80075ac:	f240 31b1 	movw	r1, #945	; 0x3b1
 80075b0:	4801      	ldr	r0, [pc, #4]	; (80075b8 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80075b2:	f7fc fbc3 	bl	8003d3c <assert_failed>
 80075b6:	e7c6      	b.n	8007546 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80075b8:	08029684 	.word	0x08029684
 80075bc:	40012300 	.word	0x40012300
 80075c0:	02e602e7 	.word	0x02e602e7

080075c4 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80075c4:	1ec3      	subs	r3, r0, #3
 80075c6:	2b04      	cmp	r3, #4
{
 80075c8:	b510      	push	{r4, lr}
 80075ca:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80075cc:	d80c      	bhi.n	80075e8 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075ce:	4909      	ldr	r1, [pc, #36]	; (80075f4 <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075d0:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075d2:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80075d6:	4b08      	ldr	r3, [pc, #32]	; (80075f8 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80075d8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80075da:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80075de:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80075e0:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 80075e2:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80075e4:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80075e6:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80075e8:	2191      	movs	r1, #145	; 0x91
 80075ea:	4804      	ldr	r0, [pc, #16]	; (80075fc <HAL_NVIC_SetPriorityGrouping+0x38>)
 80075ec:	f7fc fba6 	bl	8003d3c <assert_failed>
 80075f0:	e7ed      	b.n	80075ce <HAL_NVIC_SetPriorityGrouping+0xa>
 80075f2:	bf00      	nop
 80075f4:	e000ed00 	.word	0xe000ed00
 80075f8:	05fa0000 	.word	0x05fa0000
 80075fc:	080296c0 	.word	0x080296c0

08007600 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8007600:	2a0f      	cmp	r2, #15
{ 
 8007602:	b570      	push	{r4, r5, r6, lr}
 8007604:	4616      	mov	r6, r2
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800760a:	d836      	bhi.n	800767a <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 800760c:	2c0f      	cmp	r4, #15
 800760e:	d82f      	bhi.n	8007670 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <HAL_NVIC_SetPriority+0x84>)
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007618:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800761c:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800761e:	2804      	cmp	r0, #4
 8007620:	bf28      	it	cs
 8007622:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007624:	2a06      	cmp	r2, #6
 8007626:	d918      	bls.n	800765a <HAL_NVIC_SetPriority+0x5a>
 8007628:	3b03      	subs	r3, #3
 800762a:	f04f 32ff 	mov.w	r2, #4294967295
 800762e:	409a      	lsls	r2, r3
 8007630:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007634:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8007638:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800763a:	fa01 f100 	lsl.w	r1, r1, r0
 800763e:	ea24 0401 	bic.w	r4, r4, r1
 8007642:	fa04 f403 	lsl.w	r4, r4, r3
 8007646:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 800764a:	db09      	blt.n	8007660 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800764c:	0124      	lsls	r4, r4, #4
 800764e:	4b0e      	ldr	r3, [pc, #56]	; (8007688 <HAL_NVIC_SetPriority+0x88>)
 8007650:	b2e4      	uxtb	r4, r4
 8007652:	442b      	add	r3, r5
 8007654:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007658:	bd70      	pop	{r4, r5, r6, pc}
 800765a:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800765c:	4633      	mov	r3, r6
 800765e:	e7e9      	b.n	8007634 <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007660:	f005 050f 	and.w	r5, r5, #15
 8007664:	0124      	lsls	r4, r4, #4
 8007666:	4b09      	ldr	r3, [pc, #36]	; (800768c <HAL_NVIC_SetPriority+0x8c>)
 8007668:	b2e4      	uxtb	r4, r4
 800766a:	442b      	add	r3, r5
 800766c:	761c      	strb	r4, [r3, #24]
 800766e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8007670:	21aa      	movs	r1, #170	; 0xaa
 8007672:	4807      	ldr	r0, [pc, #28]	; (8007690 <HAL_NVIC_SetPriority+0x90>)
 8007674:	f7fc fb62 	bl	8003d3c <assert_failed>
 8007678:	e7ca      	b.n	8007610 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800767a:	21a9      	movs	r1, #169	; 0xa9
 800767c:	4804      	ldr	r0, [pc, #16]	; (8007690 <HAL_NVIC_SetPriority+0x90>)
 800767e:	f7fc fb5d 	bl	8003d3c <assert_failed>
 8007682:	e7c3      	b.n	800760c <HAL_NVIC_SetPriority+0xc>
 8007684:	e000ed00 	.word	0xe000ed00
 8007688:	e000e100 	.word	0xe000e100
 800768c:	e000ecfc 	.word	0xe000ecfc
 8007690:	080296c0 	.word	0x080296c0

08007694 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8007694:	2800      	cmp	r0, #0
 8007696:	db08      	blt.n	80076aa <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007698:	f000 011f 	and.w	r1, r0, #31
 800769c:	2301      	movs	r3, #1
 800769e:	0940      	lsrs	r0, r0, #5
 80076a0:	4a04      	ldr	r2, [pc, #16]	; (80076b4 <HAL_NVIC_EnableIRQ+0x20>)
 80076a2:	408b      	lsls	r3, r1
 80076a4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80076a8:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80076aa:	21bd      	movs	r1, #189	; 0xbd
 80076ac:	4802      	ldr	r0, [pc, #8]	; (80076b8 <HAL_NVIC_EnableIRQ+0x24>)
 80076ae:	f7fc bb45 	b.w	8003d3c <assert_failed>
 80076b2:	bf00      	nop
 80076b4:	e000e100 	.word	0xe000e100
 80076b8:	080296c0 	.word	0x080296c0

080076bc <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80076bc:	2800      	cmp	r0, #0
 80076be:	db0e      	blt.n	80076de <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076c0:	0943      	lsrs	r3, r0, #5
 80076c2:	2201      	movs	r2, #1
 80076c4:	f000 001f 	and.w	r0, r0, #31
 80076c8:	4907      	ldr	r1, [pc, #28]	; (80076e8 <HAL_NVIC_DisableIRQ+0x2c>)
 80076ca:	3320      	adds	r3, #32
 80076cc:	fa02 f000 	lsl.w	r0, r2, r0
 80076d0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80076d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80076d8:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80076dc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80076de:	21cd      	movs	r1, #205	; 0xcd
 80076e0:	4802      	ldr	r0, [pc, #8]	; (80076ec <HAL_NVIC_DisableIRQ+0x30>)
 80076e2:	f7fc bb2b 	b.w	8003d3c <assert_failed>
 80076e6:	bf00      	nop
 80076e8:	e000e100 	.word	0xe000e100
 80076ec:	080296c0 	.word	0x080296c0

080076f0 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80076f0:	2800      	cmp	r0, #0
 80076f2:	d075      	beq.n	80077e0 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80076f4:	4b3b      	ldr	r3, [pc, #236]	; (80077e4 <HAL_CRC_Init+0xf4>)
 80076f6:	6802      	ldr	r2, [r0, #0]
 80076f8:	429a      	cmp	r2, r3
{
 80076fa:	b510      	push	{r4, lr}
 80076fc:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80076fe:	d003      	beq.n	8007708 <HAL_CRC_Init+0x18>
 8007700:	2170      	movs	r1, #112	; 0x70
 8007702:	4839      	ldr	r0, [pc, #228]	; (80077e8 <HAL_CRC_Init+0xf8>)
 8007704:	f7fc fb1a 	bl	8003d3c <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007708:	7f63      	ldrb	r3, [r4, #29]
 800770a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800770e:	2b00      	cmp	r3, #0
 8007710:	d055      	beq.n	80077be <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007712:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007714:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8007716:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007718:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800771a:	d838      	bhi.n	800778e <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800771c:	2b00      	cmp	r3, #0
 800771e:	d13d      	bne.n	800779c <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	4a32      	ldr	r2, [pc, #200]	; (80077ec <HAL_CRC_Init+0xfc>)
 8007724:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	f022 0218 	bic.w	r2, r2, #24
 800772c:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 800772e:	7963      	ldrb	r3, [r4, #5]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d83c      	bhi.n	80077ae <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007734:	b1e3      	cbz	r3, 8007770 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007736:	6922      	ldr	r2, [r4, #16]
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 800773c:	6962      	ldr	r2, [r4, #20]
 800773e:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8007742:	d11d      	bne.n	8007780 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007744:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007746:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007748:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800774c:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800774e:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007752:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8007754:	d13d      	bne.n	80077d2 <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007756:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007758:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800775a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800775e:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007760:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007762:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007764:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8007766:	d82f      	bhi.n	80077c8 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007768:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 800776a:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 800776c:	7763      	strb	r3, [r4, #29]
}
 800776e:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007770:	f04f 32ff 	mov.w	r2, #4294967295
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8007778:	6962      	ldr	r2, [r4, #20]
 800777a:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 800777e:	d0e1      	beq.n	8007744 <HAL_CRC_Init+0x54>
 8007780:	219c      	movs	r1, #156	; 0x9c
 8007782:	4819      	ldr	r0, [pc, #100]	; (80077e8 <HAL_CRC_Init+0xf8>)
 8007784:	f7fc fada 	bl	8003d3c <assert_failed>
 8007788:	6962      	ldr	r2, [r4, #20]
 800778a:	6823      	ldr	r3, [r4, #0]
 800778c:	e7da      	b.n	8007744 <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800778e:	217e      	movs	r1, #126	; 0x7e
 8007790:	4815      	ldr	r0, [pc, #84]	; (80077e8 <HAL_CRC_Init+0xf8>)
 8007792:	f7fc fad3 	bl	8003d3c <assert_failed>
 8007796:	7923      	ldrb	r3, [r4, #4]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0c1      	beq.n	8007720 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800779c:	68e2      	ldr	r2, [r4, #12]
 800779e:	4620      	mov	r0, r4
 80077a0:	68a1      	ldr	r1, [r4, #8]
 80077a2:	f000 f825 	bl	80077f0 <HAL_CRCEx_Polynomial_Set>
 80077a6:	2800      	cmp	r0, #0
 80077a8:	d0c1      	beq.n	800772e <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 80077aa:	2001      	movs	r0, #1
}
 80077ac:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80077ae:	2190      	movs	r1, #144	; 0x90
 80077b0:	480d      	ldr	r0, [pc, #52]	; (80077e8 <HAL_CRC_Init+0xf8>)
 80077b2:	f7fc fac3 	bl	8003d3c <assert_failed>
 80077b6:	7963      	ldrb	r3, [r4, #5]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d1bc      	bne.n	8007736 <HAL_CRC_Init+0x46>
 80077bc:	e7d8      	b.n	8007770 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 80077be:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 80077c0:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80077c2:	f7fd fccd 	bl	8005160 <HAL_CRC_MspInit>
 80077c6:	e7a4      	b.n	8007712 <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80077c8:	21a5      	movs	r1, #165	; 0xa5
 80077ca:	4807      	ldr	r0, [pc, #28]	; (80077e8 <HAL_CRC_Init+0xf8>)
 80077cc:	f7fc fab6 	bl	8003d3c <assert_failed>
 80077d0:	e7ca      	b.n	8007768 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <HAL_CRC_Init+0xf8>)
 80077d4:	21a0      	movs	r1, #160	; 0xa0
 80077d6:	f7fc fab1 	bl	8003d3c <assert_failed>
 80077da:	6823      	ldr	r3, [r4, #0]
 80077dc:	69a0      	ldr	r0, [r4, #24]
 80077de:	e7ba      	b.n	8007756 <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 80077e0:	2001      	movs	r0, #1
}
 80077e2:	4770      	bx	lr
 80077e4:	40023000 	.word	0x40023000
 80077e8:	080296fc 	.word	0x080296fc
 80077ec:	04c11db7 	.word	0x04c11db7

080077f0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80077f2:	f032 0318 	bics.w	r3, r2, #24
{
 80077f6:	4617      	mov	r7, r2
 80077f8:	4606      	mov	r6, r0
 80077fa:	460d      	mov	r5, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80077fc:	d003      	beq.n	8007806 <HAL_CRCEx_Polynomial_Set+0x16>
 80077fe:	215f      	movs	r1, #95	; 0x5f
 8007800:	4817      	ldr	r0, [pc, #92]	; (8007860 <HAL_CRCEx_Polynomial_Set+0x70>)
 8007802:	f7fc fa9b 	bl	8003d3c <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8007806:	231e      	movs	r3, #30
 8007808:	e001      	b.n	800780e <HAL_CRCEx_Polynomial_Set+0x1e>
 800780a:	3b01      	subs	r3, #1
 800780c:	d314      	bcc.n	8007838 <HAL_CRCEx_Polynomial_Set+0x48>
 800780e:	fa25 f403 	lsr.w	r4, r5, r3
 8007812:	07e2      	lsls	r2, r4, #31
 8007814:	d5f9      	bpl.n	800780a <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8007816:	2f18      	cmp	r7, #24
 8007818:	d80f      	bhi.n	800783a <HAL_CRCEx_Polynomial_Set+0x4a>
 800781a:	e8df f007 	tbb	[pc, r7]
 800781e:	0e12      	.short	0x0e12
 8007820:	0e0e0e0e 	.word	0x0e0e0e0e
 8007824:	0e1b0e0e 	.word	0x0e1b0e0e
 8007828:	0e0e0e0e 	.word	0x0e0e0e0e
 800782c:	0e1e0e0e 	.word	0x0e1e0e0e
 8007830:	0e0e0e0e 	.word	0x0e0e0e0e
 8007834:	0e0e      	.short	0x0e0e
 8007836:	10          	.byte	0x10
 8007837:	00          	.byte	0x00
 8007838:	b11f      	cbz	r7, 8007842 <HAL_CRCEx_Polynomial_Set+0x52>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 800783a:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 800783c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 800783e:	2b06      	cmp	r3, #6
 8007840:	d8fb      	bhi.n	800783a <HAL_CRCEx_Polynomial_Set+0x4a>
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007842:	6831      	ldr	r1, [r6, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007844:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8007846:	614d      	str	r5, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007848:	688b      	ldr	r3, [r1, #8]
 800784a:	f023 0318 	bic.w	r3, r3, #24
 800784e:	433b      	orrs	r3, r7
 8007850:	608b      	str	r3, [r1, #8]
}
 8007852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 8007854:	2b0f      	cmp	r3, #15
 8007856:	d9f4      	bls.n	8007842 <HAL_CRCEx_Polynomial_Set+0x52>
 8007858:	e7ef      	b.n	800783a <HAL_CRCEx_Polynomial_Set+0x4a>
      if (msb >= HAL_CRC_LENGTH_8B)
 800785a:	2b07      	cmp	r3, #7
 800785c:	d9f1      	bls.n	8007842 <HAL_CRCEx_Polynomial_Set+0x52>
 800785e:	e7ec      	b.n	800783a <HAL_CRCEx_Polynomial_Set+0x4a>
 8007860:	08029734 	.word	0x08029734

08007864 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8007864:	b1d8      	cbz	r0, 800789e <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8007866:	4b0f      	ldr	r3, [pc, #60]	; (80078a4 <HAL_DAC_Init+0x40>)
 8007868:	6802      	ldr	r2, [r0, #0]
 800786a:	429a      	cmp	r2, r3
{
 800786c:	b510      	push	{r4, lr}
 800786e:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8007870:	d004      	beq.n	800787c <HAL_DAC_Init+0x18>
 8007872:	f240 1115 	movw	r1, #277	; 0x115
 8007876:	480c      	ldr	r0, [pc, #48]	; (80078a8 <HAL_DAC_Init+0x44>)
 8007878:	f7fc fa60 	bl	8003d3c <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 800787c:	7923      	ldrb	r3, [r4, #4]
 800787e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007882:	b13b      	cbz	r3, 8007894 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007884:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8007886:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007888:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 800788a:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 800788c:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800788e:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8007890:	7122      	strb	r2, [r4, #4]
}
 8007892:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 8007894:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 8007896:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 8007898:	f7fd fc78 	bl	800518c <HAL_DAC_MspInit>
 800789c:	e7f2      	b.n	8007884 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 800789e:	2001      	movs	r0, #1
}
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40007400 	.word	0x40007400
 80078a8:	08029770 	.word	0x08029770

080078ac <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80078ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b0:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80078b2:	f031 0310 	bics.w	r3, r1, #16
{
 80078b6:	460d      	mov	r5, r1
 80078b8:	4604      	mov	r4, r0
 80078ba:	4617      	mov	r7, r2
 80078bc:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 80078be:	d16b      	bne.n	8007998 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 80078c0:	f036 0304 	bics.w	r3, r6, #4
 80078c4:	d001      	beq.n	80078ca <HAL_DAC_Start_DMA+0x1e>
 80078c6:	2e08      	cmp	r6, #8
 80078c8:	d15b      	bne.n	8007982 <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 80078ca:	7962      	ldrb	r2, [r4, #5]
 80078cc:	2a01      	cmp	r2, #1
 80078ce:	d060      	beq.n	8007992 <HAL_DAC_Start_DMA+0xe6>
 80078d0:	2201      	movs	r2, #1

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80078d2:	2302      	movs	r3, #2

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80078d4:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 80078d8:	7162      	strb	r2, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80078da:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80078dc:	bb35      	cbnz	r5, 800792c <HAL_DAC_Start_DMA+0x80>
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80078de:	f8dc 3000 	ldr.w	r3, [ip]

    /* Case of use of channel 1 */
    switch (Alignment)
 80078e2:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80078e4:	68a0      	ldr	r0, [r4, #8]
 80078e6:	4a38      	ldr	r2, [pc, #224]	; (80079c8 <HAL_DAC_Start_DMA+0x11c>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80078e8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80078ec:	4937      	ldr	r1, [pc, #220]	; (80079cc <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80078ee:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80078f0:	4a37      	ldr	r2, [pc, #220]	; (80079d0 <HAL_DAC_Start_DMA+0x124>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80078f2:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80078f4:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80078f6:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 80078fa:	d059      	beq.n	80079b0 <HAL_DAC_Start_DMA+0x104>
 80078fc:	2e08      	cmp	r6, #8
 80078fe:	d054      	beq.n	80079aa <HAL_DAC_Start_DMA+0xfe>
 8007900:	2e00      	cmp	r6, #0
 8007902:	d04f      	beq.n	80079a4 <HAL_DAC_Start_DMA+0xf8>
 8007904:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007906:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800790a:	4643      	mov	r3, r8
 800790c:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800790e:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 8007912:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007916:	f000 fbef 	bl	80080f8 <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800791a:	2300      	movs	r3, #0
 800791c:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800791e:	b330      	cbz	r0, 800796e <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007920:	6923      	ldr	r3, [r4, #16]
 8007922:	f043 0304 	orr.w	r3, r3, #4
 8007926:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8007928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800792c:	f8dc 3000 	ldr.w	r3, [ip]
    switch (Alignment)
 8007930:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007932:	68e0      	ldr	r0, [r4, #12]
 8007934:	4a27      	ldr	r2, [pc, #156]	; (80079d4 <HAL_DAC_Start_DMA+0x128>)
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800793a:	4927      	ldr	r1, [pc, #156]	; (80079d8 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800793c:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800793e:	4a27      	ldr	r2, [pc, #156]	; (80079dc <HAL_DAC_Start_DMA+0x130>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007940:	6401      	str	r1, [r0, #64]	; 0x40
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007942:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007944:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8007948:	d03b      	beq.n	80079c2 <HAL_DAC_Start_DMA+0x116>
 800794a:	2e08      	cmp	r6, #8
 800794c:	d036      	beq.n	80079bc <HAL_DAC_Start_DMA+0x110>
 800794e:	b396      	cbz	r6, 80079b6 <HAL_DAC_Start_DMA+0x10a>
 8007950:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007952:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007956:	4643      	mov	r3, r8
 8007958:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800795a:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800795e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007962:	f000 fbc9 	bl	80080f8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8007966:	2300      	movs	r3, #0
 8007968:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 800796a:	2800      	cmp	r0, #0
 800796c:	d1d8      	bne.n	8007920 <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	f005 0110 	and.w	r1, r5, #16
 8007974:	2501      	movs	r5, #1
 8007976:	681a      	ldr	r2, [r3, #0]
 8007978:	408d      	lsls	r5, r1
 800797a:	4315      	orrs	r5, r2
 800797c:	601d      	str	r5, [r3, #0]
}
 800797e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 8007982:	f44f 7104 	mov.w	r1, #528	; 0x210
 8007986:	4816      	ldr	r0, [pc, #88]	; (80079e0 <HAL_DAC_Start_DMA+0x134>)
 8007988:	f7fc f9d8 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hdac);
 800798c:	7962      	ldrb	r2, [r4, #5]
 800798e:	2a01      	cmp	r2, #1
 8007990:	d19e      	bne.n	80078d0 <HAL_DAC_Start_DMA+0x24>
 8007992:	2002      	movs	r0, #2
}
 8007994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8007998:	f240 210f 	movw	r1, #527	; 0x20f
 800799c:	4810      	ldr	r0, [pc, #64]	; (80079e0 <HAL_DAC_Start_DMA+0x134>)
 800799e:	f7fc f9cd 	bl	8003d3c <assert_failed>
 80079a2:	e78d      	b.n	80078c0 <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80079a4:	f10c 0208 	add.w	r2, ip, #8
        break;
 80079a8:	e7ad      	b.n	8007906 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80079aa:	f10c 0210 	add.w	r2, ip, #16
        break;
 80079ae:	e7aa      	b.n	8007906 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80079b0:	f10c 020c 	add.w	r2, ip, #12
        break;
 80079b4:	e7a7      	b.n	8007906 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80079b6:	f10c 0214 	add.w	r2, ip, #20
        break;
 80079ba:	e7ca      	b.n	8007952 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80079bc:	f10c 021c 	add.w	r2, ip, #28
        break;
 80079c0:	e7c7      	b.n	8007952 <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80079c2:	f10c 0218 	add.w	r2, ip, #24
        break;
 80079c6:	e7c4      	b.n	8007952 <HAL_DAC_Start_DMA+0xa6>
 80079c8:	08007a75 	.word	0x08007a75
 80079cc:	08007a89 	.word	0x08007a89
 80079d0:	08007a99 	.word	0x08007a99
 80079d4:	08007bed 	.word	0x08007bed
 80079d8:	08007bfd 	.word	0x08007bfd
 80079dc:	08007c09 	.word	0x08007c09
 80079e0:	08029770 	.word	0x08029770

080079e4 <HAL_DAC_Stop_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80079e4:	f031 0310 	bics.w	r3, r1, #16
{
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460d      	mov	r5, r1
 80079ec:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80079ee:	d11d      	bne.n	8007a2c <HAL_DAC_Stop_DMA+0x48>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80079f0:	6803      	ldr	r3, [r0, #0]
 80079f2:	f001 0110 	and.w	r1, r1, #16
 80079f6:	f44f 5680 	mov.w	r6, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80079fa:	2201      	movs	r2, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	408e      	lsls	r6, r1
  __HAL_DAC_DISABLE(hdac, Channel);
 8007a00:	fa02 f101 	lsl.w	r1, r2, r1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007a04:	ea20 0006 	bic.w	r0, r0, r6
 8007a08:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	ea22 0201 	bic.w	r2, r2, r1
 8007a10:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007a12:	bb0d      	cbnz	r5, 8007a58 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8007a14:	68a0      	ldr	r0, [r4, #8]
 8007a16:	f000 fbcb 	bl	80081b0 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a1a:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007a1c:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007a1e:	6813      	ldr	r3, [r2, #0]
 8007a20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a24:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007a26:	2301      	movs	r3, #1
 8007a28:	7123      	strb	r3, [r4, #4]
}
 8007a2a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8007a2c:	f240 218f 	movw	r1, #655	; 0x28f
 8007a30:	480f      	ldr	r0, [pc, #60]	; (8007a70 <HAL_DAC_Stop_DMA+0x8c>)
 8007a32:	f7fc f983 	bl	8003d3c <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007a36:	f005 0510 	and.w	r5, r5, #16
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 8007a40:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007a42:	fa02 f005 	lsl.w	r0, r2, r5
 8007a46:	681a      	ldr	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8007a48:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007a4a:	ea22 0200 	bic.w	r2, r2, r0
 8007a4e:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8007a50:	681d      	ldr	r5, [r3, #0]
 8007a52:	ea25 0501 	bic.w	r5, r5, r1
 8007a56:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8007a58:	68e0      	ldr	r0, [r4, #12]
 8007a5a:	f000 fba9 	bl	80081b0 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007a5e:	6822      	ldr	r2, [r4, #0]
}
 8007a60:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007a62:	6813      	ldr	r3, [r2, #0]
 8007a64:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a68:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	7123      	strb	r3, [r4, #4]
}
 8007a6e:	bd70      	pop	{r4, r5, r6, pc}
 8007a70:	08029770 	.word	0x08029770

08007a74 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007a74:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a76:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007a78:	4620      	mov	r0, r4
 8007a7a:	f7fb f85d 	bl	8002b38 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	7123      	strb	r3, [r4, #4]
}
 8007a82:	bd10      	pop	{r4, pc}

08007a84 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop

08007a88 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007a88:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007a8a:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007a8c:	f7ff fffa 	bl	8007a84 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007a90:	bd08      	pop	{r3, pc}
 8007a92:	bf00      	nop

08007a94 <HAL_DAC_ErrorCallbackCh1>:
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop

08007a98 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8007a98:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007a9a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007a9c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007a9e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007aa0:	f043 0304 	orr.w	r3, r3, #4
 8007aa4:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007aa6:	f7ff fff5 	bl	8007a94 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	7123      	strb	r3, [r4, #4]
}
 8007aae:	bd10      	pop	{r4, pc}

08007ab0 <HAL_DAC_DMAUnderrunCallbackCh1>:
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop

08007ab4 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007ab4:	6803      	ldr	r3, [r0, #0]
 8007ab6:	681a      	ldr	r2, [r3, #0]
 8007ab8:	0491      	lsls	r1, r2, #18
{
 8007aba:	b510      	push	{r4, lr}
 8007abc:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8007abe:	d502      	bpl.n	8007ac6 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8007ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ac2:	0492      	lsls	r2, r2, #18
 8007ac4:	d418      	bmi.n	8007af8 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	0091      	lsls	r1, r2, #2
 8007aca:	d502      	bpl.n	8007ad2 <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8007acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ace:	0092      	lsls	r2, r2, #2
 8007ad0:	d400      	bmi.n	8007ad4 <HAL_DAC_IRQHandler+0x20>
}
 8007ad2:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8007ad4:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007ad6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007ada:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 8007adc:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8007ade:	6922      	ldr	r2, [r4, #16]
 8007ae0:	f042 0202 	orr.w	r2, r2, #2
 8007ae4:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8007ae6:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 8007aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007af2:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8007af4:	f000 b878 	b.w	8007be8 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8007af8:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007afa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8007afe:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007b00:	6902      	ldr	r2, [r0, #16]
 8007b02:	f042 0201 	orr.w	r2, r2, #1
 8007b06:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8007b08:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007b10:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8007b12:	f7ff ffcd 	bl	8007ab0 <HAL_DAC_DMAUnderrunCallbackCh1>
 8007b16:	6823      	ldr	r3, [r4, #0]
 8007b18:	e7d5      	b.n	8007ac6 <HAL_DAC_IRQHandler+0x12>
 8007b1a:	bf00      	nop

08007b1c <HAL_DAC_ConfigChannel>:
{
 8007b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b1e:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007b20:	6808      	ldr	r0, [r1, #0]
{
 8007b22:	460d      	mov	r5, r1
 8007b24:	4616      	mov	r6, r2
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007b26:	f020 0308 	bic.w	r3, r0, #8
 8007b2a:	f020 0104 	bic.w	r1, r0, #4
 8007b2e:	f020 0210 	bic.w	r2, r0, #16
 8007b32:	2b24      	cmp	r3, #36	; 0x24
 8007b34:	bf18      	it	ne
 8007b36:	2900      	cmpne	r1, #0
 8007b38:	bf14      	ite	ne
 8007b3a:	2301      	movne	r3, #1
 8007b3c:	2300      	moveq	r3, #0
 8007b3e:	283c      	cmp	r0, #60	; 0x3c
 8007b40:	bf0c      	ite	eq
 8007b42:	2300      	moveq	r3, #0
 8007b44:	f003 0301 	andne.w	r3, r3, #1
 8007b48:	2a0c      	cmp	r2, #12
 8007b4a:	bf0c      	ite	eq
 8007b4c:	2300      	moveq	r3, #0
 8007b4e:	f003 0301 	andne.w	r3, r3, #1
 8007b52:	b11b      	cbz	r3, 8007b5c <HAL_DAC_ConfigChannel+0x40>
 8007b54:	f020 0020 	bic.w	r0, r0, #32
 8007b58:	2814      	cmp	r0, #20
 8007b5a:	d137      	bne.n	8007bcc <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8007b5c:	686b      	ldr	r3, [r5, #4]
 8007b5e:	f033 0302 	bics.w	r3, r3, #2
 8007b62:	d12d      	bne.n	8007bc0 <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8007b64:	f036 0310 	bics.w	r3, r6, #16
 8007b68:	d120      	bne.n	8007bac <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8007b6a:	7963      	ldrb	r3, [r4, #5]
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d025      	beq.n	8007bbc <HAL_DAC_ConfigChannel+0xa0>
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b70:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007b72:	f006 0210 	and.w	r2, r6, #16
  tmpreg1 = hdac->Instance->CR;
 8007b76:	6821      	ldr	r1, [r4, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007b78:	f640 76fe 	movw	r6, #4094	; 0xffe
  hdac->State = HAL_DAC_STATE_BUSY;
 8007b7c:	7123      	strb	r3, [r4, #4]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007b7e:	27c0      	movs	r7, #192	; 0xc0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007b80:	6868      	ldr	r0, [r5, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007b82:	4096      	lsls	r6, r2
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007b84:	682b      	ldr	r3, [r5, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007b86:	fa07 f502 	lsl.w	r5, r7, r2
  hdac->State = HAL_DAC_STATE_READY;
 8007b8a:	2701      	movs	r7, #1
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8007b8c:	4303      	orrs	r3, r0
  tmpreg1 = hdac->Instance->CR;
 8007b8e:	6808      	ldr	r0, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b90:	4093      	lsls	r3, r2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8007b92:	ea20 0206 	bic.w	r2, r0, r6
  __HAL_UNLOCK(hdac);
 8007b96:	2600      	movs	r6, #0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007b98:	4313      	orrs	r3, r2
  return HAL_OK;
 8007b9a:	4630      	mov	r0, r6
  hdac->Instance->CR = tmpreg1;
 8007b9c:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8007b9e:	680b      	ldr	r3, [r1, #0]
 8007ba0:	ea23 0305 	bic.w	r3, r3, r5
 8007ba4:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8007ba6:	7127      	strb	r7, [r4, #4]
  __HAL_UNLOCK(hdac);
 8007ba8:	7166      	strb	r6, [r4, #5]
}
 8007baa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8007bac:	f240 31a6 	movw	r1, #934	; 0x3a6
 8007bb0:	4809      	ldr	r0, [pc, #36]	; (8007bd8 <HAL_DAC_ConfigChannel+0xbc>)
 8007bb2:	f7fc f8c3 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hdac);
 8007bb6:	7963      	ldrb	r3, [r4, #5]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d1d9      	bne.n	8007b70 <HAL_DAC_ConfigChannel+0x54>
 8007bbc:	2002      	movs	r0, #2
}
 8007bbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8007bc0:	f240 31a5 	movw	r1, #933	; 0x3a5
 8007bc4:	4804      	ldr	r0, [pc, #16]	; (8007bd8 <HAL_DAC_ConfigChannel+0xbc>)
 8007bc6:	f7fc f8b9 	bl	8003d3c <assert_failed>
 8007bca:	e7cb      	b.n	8007b64 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8007bcc:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8007bd0:	4801      	ldr	r0, [pc, #4]	; (8007bd8 <HAL_DAC_ConfigChannel+0xbc>)
 8007bd2:	f7fc f8b3 	bl	8003d3c <assert_failed>
 8007bd6:	e7c1      	b.n	8007b5c <HAL_DAC_ConfigChannel+0x40>
 8007bd8:	08029770 	.word	0x08029770

08007bdc <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop

08007be0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop

08007be4 <HAL_DACEx_ErrorCallbackCh2>:
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop

08007be8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8007be8:	4770      	bx	lr
 8007bea:	bf00      	nop

08007bec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007bec:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007bee:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f7ff fff3 	bl	8007bdc <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	7123      	strb	r3, [r4, #4]
}
 8007bfa:	bd10      	pop	{r4, pc}

08007bfc <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007bfc:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8007bfe:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007c00:	f7ff ffee 	bl	8007be0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007c04:	bd08      	pop	{r3, pc}
 8007c06:	bf00      	nop

08007c08 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007c08:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c0a:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c0c:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007c0e:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007c10:	f043 0304 	orr.w	r3, r3, #4
 8007c14:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007c16:	f7ff ffe5 	bl	8007be4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	7123      	strb	r3, [r4, #4]
}
 8007c1e:	bd10      	pop	{r4, pc}

08007c20 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c22:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8007c24:	f7ff f892 	bl	8006d4c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007c28:	2c00      	cmp	r4, #0
 8007c2a:	f000 8145 	beq.w	8007eb8 <HAL_DMA_Init+0x298>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	4605      	mov	r5, r0
 8007c32:	4bb8      	ldr	r3, [pc, #736]	; (8007f14 <HAL_DMA_Init+0x2f4>)
 8007c34:	48b8      	ldr	r0, [pc, #736]	; (8007f18 <HAL_DMA_Init+0x2f8>)
 8007c36:	49b9      	ldr	r1, [pc, #740]	; (8007f1c <HAL_DMA_Init+0x2fc>)
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	bf18      	it	ne
 8007c3c:	4282      	cmpne	r2, r0
 8007c3e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8007c42:	bf14      	ite	ne
 8007c44:	2301      	movne	r3, #1
 8007c46:	2300      	moveq	r3, #0
 8007c48:	428a      	cmp	r2, r1
 8007c4a:	bf0c      	ite	eq
 8007c4c:	2300      	moveq	r3, #0
 8007c4e:	f003 0301 	andne.w	r3, r3, #1
 8007c52:	3130      	adds	r1, #48	; 0x30
 8007c54:	4282      	cmp	r2, r0
 8007c56:	bf0c      	ite	eq
 8007c58:	2300      	moveq	r3, #0
 8007c5a:	f003 0301 	andne.w	r3, r3, #1
 8007c5e:	3030      	adds	r0, #48	; 0x30
 8007c60:	428a      	cmp	r2, r1
 8007c62:	bf0c      	ite	eq
 8007c64:	2300      	moveq	r3, #0
 8007c66:	f003 0301 	andne.w	r3, r3, #1
 8007c6a:	3130      	adds	r1, #48	; 0x30
 8007c6c:	4282      	cmp	r2, r0
 8007c6e:	bf0c      	ite	eq
 8007c70:	2300      	moveq	r3, #0
 8007c72:	f003 0301 	andne.w	r3, r3, #1
 8007c76:	3030      	adds	r0, #48	; 0x30
 8007c78:	428a      	cmp	r2, r1
 8007c7a:	bf0c      	ite	eq
 8007c7c:	2300      	moveq	r3, #0
 8007c7e:	f003 0301 	andne.w	r3, r3, #1
 8007c82:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8007c86:	4282      	cmp	r2, r0
 8007c88:	bf0c      	ite	eq
 8007c8a:	2300      	moveq	r3, #0
 8007c8c:	f003 0301 	andne.w	r3, r3, #1
 8007c90:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8007c94:	428a      	cmp	r2, r1
 8007c96:	bf0c      	ite	eq
 8007c98:	2300      	moveq	r3, #0
 8007c9a:	f003 0301 	andne.w	r3, r3, #1
 8007c9e:	3130      	adds	r1, #48	; 0x30
 8007ca0:	4282      	cmp	r2, r0
 8007ca2:	bf0c      	ite	eq
 8007ca4:	2300      	moveq	r3, #0
 8007ca6:	f003 0301 	andne.w	r3, r3, #1
 8007caa:	3030      	adds	r0, #48	; 0x30
 8007cac:	428a      	cmp	r2, r1
 8007cae:	bf0c      	ite	eq
 8007cb0:	2300      	moveq	r3, #0
 8007cb2:	f003 0301 	andne.w	r3, r3, #1
 8007cb6:	3130      	adds	r1, #48	; 0x30
 8007cb8:	4282      	cmp	r2, r0
 8007cba:	bf0c      	ite	eq
 8007cbc:	2300      	moveq	r3, #0
 8007cbe:	f003 0301 	andne.w	r3, r3, #1
 8007cc2:	3030      	adds	r0, #48	; 0x30
 8007cc4:	428a      	cmp	r2, r1
 8007cc6:	bf0c      	ite	eq
 8007cc8:	2300      	moveq	r3, #0
 8007cca:	f003 0301 	andne.w	r3, r3, #1
 8007cce:	3130      	adds	r1, #48	; 0x30
 8007cd0:	4282      	cmp	r2, r0
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2300      	moveq	r3, #0
 8007cd6:	f003 0301 	andne.w	r3, r3, #1
 8007cda:	428a      	cmp	r2, r1
 8007cdc:	bf0c      	ite	eq
 8007cde:	2300      	moveq	r3, #0
 8007ce0:	f003 0301 	andne.w	r3, r3, #1
 8007ce4:	b11b      	cbz	r3, 8007cee <HAL_DMA_Init+0xce>
 8007ce6:	4b8e      	ldr	r3, [pc, #568]	; (8007f20 <HAL_DMA_Init+0x300>)
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	f040 812c 	bne.w	8007f46 <HAL_DMA_Init+0x326>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007cee:	6863      	ldr	r3, [r4, #4]
 8007cf0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007cf4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cf8:	bf18      	it	ne
 8007cfa:	2b00      	cmpne	r3, #0
 8007cfc:	bf14      	ite	ne
 8007cfe:	2201      	movne	r2, #1
 8007d00:	2200      	moveq	r2, #0
 8007d02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d06:	bf0c      	ite	eq
 8007d08:	2200      	moveq	r2, #0
 8007d0a:	f002 0201 	andne.w	r2, r2, #1
 8007d0e:	b11a      	cbz	r2, 8007d18 <HAL_DMA_Init+0xf8>
 8007d10:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8007d14:	f040 811c 	bne.w	8007f50 <HAL_DMA_Init+0x330>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8007d18:	68a3      	ldr	r3, [r4, #8]
 8007d1a:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8007d1e:	d002      	beq.n	8007d26 <HAL_DMA_Init+0x106>
 8007d20:	2b80      	cmp	r3, #128	; 0x80
 8007d22:	f040 80ab 	bne.w	8007e7c <HAL_DMA_Init+0x25c>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007d2c:	f040 80af 	bne.w	8007e8e <HAL_DMA_Init+0x26e>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8007d30:	6923      	ldr	r3, [r4, #16]
 8007d32:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007d36:	f040 80b3 	bne.w	8007ea0 <HAL_DMA_Init+0x280>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8007d3a:	6963      	ldr	r3, [r4, #20]
 8007d3c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8007d40:	d003      	beq.n	8007d4a <HAL_DMA_Init+0x12a>
 8007d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d46:	f040 8094 	bne.w	8007e72 <HAL_DMA_Init+0x252>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8007d4a:	69a3      	ldr	r3, [r4, #24]
 8007d4c:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8007d50:	d003      	beq.n	8007d5a <HAL_DMA_Init+0x13a>
 8007d52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007d56:	f040 8087 	bne.w	8007e68 <HAL_DMA_Init+0x248>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8007d5a:	69e3      	ldr	r3, [r4, #28]
 8007d5c:	f033 0220 	bics.w	r2, r3, #32
 8007d60:	d002      	beq.n	8007d68 <HAL_DMA_Init+0x148>
 8007d62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d66:	d172      	bne.n	8007e4e <HAL_DMA_Init+0x22e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8007d68:	6a23      	ldr	r3, [r4, #32]
 8007d6a:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007d6e:	d176      	bne.n	8007e5e <HAL_DMA_Init+0x23e>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8007d70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d72:	f033 0204 	bics.w	r2, r3, #4
 8007d76:	d162      	bne.n	8007e3e <HAL_DMA_Init+0x21e>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d150      	bne.n	8007e1e <HAL_DMA_Init+0x1fe>
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007d7c:	2200      	movs	r2, #0

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007d7e:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d80:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 8007d82:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8007d86:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	f022 0201 	bic.w	r2, r2, #1
 8007d90:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007d92:	e006      	b.n	8007da2 <HAL_DMA_Init+0x182>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007d94:	f7fe ffda 	bl	8006d4c <HAL_GetTick>
 8007d98:	1b40      	subs	r0, r0, r5
 8007d9a:	2805      	cmp	r0, #5
 8007d9c:	f200 8085 	bhi.w	8007eaa <HAL_DMA_Init+0x28a>
 8007da0:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	07d1      	lsls	r1, r2, #31
 8007da6:	d4f5      	bmi.n	8007d94 <HAL_DMA_Init+0x174>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007da8:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8007dac:	68e5      	ldr	r5, [r4, #12]
 8007dae:	430a      	orrs	r2, r1
  tmp = hdma->Instance->CR;
 8007db0:	681f      	ldr	r7, [r3, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db2:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007db6:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007db8:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dba:	6a20      	ldr	r0, [r4, #32]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dbc:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007dc0:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007dc2:	4958      	ldr	r1, [pc, #352]	; (8007f24 <HAL_DMA_Init+0x304>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dc4:	4332      	orrs	r2, r6
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007dc6:	4039      	ands	r1, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007dc8:	432a      	orrs	r2, r5

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dca:	6a65      	ldr	r5, [r4, #36]	; 0x24
          hdma->Init.Mode                | hdma->Init.Priority;
 8007dcc:	4302      	orrs	r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dce:	2d04      	cmp	r5, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007dd0:	ea41 0102 	orr.w	r1, r1, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007dd4:	d072      	beq.n	8007ebc <HAL_DMA_Init+0x29c>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007dd6:	6019      	str	r1, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007dd8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007dda:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007dde:	4315      	orrs	r5, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007de0:	b2da      	uxtb	r2, r3
 8007de2:	4951      	ldr	r1, [pc, #324]	; (8007f28 <HAL_DMA_Init+0x308>)
  hdma->Instance->FCR = tmp;
 8007de4:	615d      	str	r5, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007de6:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007de8:	4850      	ldr	r0, [pc, #320]	; (8007f2c <HAL_DMA_Init+0x30c>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007dea:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8007dee:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007df0:	4a4f      	ldr	r2, [pc, #316]	; (8007f30 <HAL_DMA_Init+0x310>)
  hdma->State = HAL_DMA_STATE_READY;
 8007df2:	f04f 0501 	mov.w	r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007df6:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007dfa:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dfe:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e02:	5c40      	ldrb	r0, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e04:	f04f 0100 	mov.w	r1, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e08:	bf88      	it	hi
 8007e0a:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e0c:	4083      	lsls	r3, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007e0e:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007e10:	65a2      	str	r2, [r4, #88]	; 0x58
  return HAL_OK;
 8007e12:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e14:	6093      	str	r3, [r2, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007e16:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8007e18:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8007e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8007e1e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e20:	2b03      	cmp	r3, #3
 8007e22:	d86c      	bhi.n	8007efe <HAL_DMA_Init+0x2de>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8007e24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e26:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8007e2a:	d16d      	bne.n	8007f08 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8007e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007e2e:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8007e32:	d0a3      	beq.n	8007d7c <HAL_DMA_Init+0x15c>
 8007e34:	21c8      	movs	r1, #200	; 0xc8
 8007e36:	483f      	ldr	r0, [pc, #252]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e38:	f7fb ff80 	bl	8003d3c <assert_failed>
 8007e3c:	e79e      	b.n	8007d7c <HAL_DMA_Init+0x15c>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8007e3e:	21c1      	movs	r1, #193	; 0xc1
 8007e40:	483c      	ldr	r0, [pc, #240]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e42:	f7fb ff7b 	bl	8003d3c <assert_failed>
 8007e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d097      	beq.n	8007d7c <HAL_DMA_Init+0x15c>
 8007e4c:	e7e7      	b.n	8007e1e <HAL_DMA_Init+0x1fe>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8007e4e:	21bf      	movs	r1, #191	; 0xbf
 8007e50:	4838      	ldr	r0, [pc, #224]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e52:	f7fb ff73 	bl	8003d3c <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8007e56:	6a23      	ldr	r3, [r4, #32]
 8007e58:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007e5c:	d088      	beq.n	8007d70 <HAL_DMA_Init+0x150>
 8007e5e:	21c0      	movs	r1, #192	; 0xc0
 8007e60:	4834      	ldr	r0, [pc, #208]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e62:	f7fb ff6b 	bl	8003d3c <assert_failed>
 8007e66:	e783      	b.n	8007d70 <HAL_DMA_Init+0x150>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8007e68:	21be      	movs	r1, #190	; 0xbe
 8007e6a:	4832      	ldr	r0, [pc, #200]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e6c:	f7fb ff66 	bl	8003d3c <assert_failed>
 8007e70:	e773      	b.n	8007d5a <HAL_DMA_Init+0x13a>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8007e72:	21bd      	movs	r1, #189	; 0xbd
 8007e74:	482f      	ldr	r0, [pc, #188]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e76:	f7fb ff61 	bl	8003d3c <assert_failed>
 8007e7a:	e766      	b.n	8007d4a <HAL_DMA_Init+0x12a>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8007e7c:	21ba      	movs	r1, #186	; 0xba
 8007e7e:	482d      	ldr	r0, [pc, #180]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e80:	f7fb ff5c 	bl	8003d3c <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8007e84:	68e3      	ldr	r3, [r4, #12]
 8007e86:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8007e8a:	f43f af51 	beq.w	8007d30 <HAL_DMA_Init+0x110>
 8007e8e:	21bb      	movs	r1, #187	; 0xbb
 8007e90:	4828      	ldr	r0, [pc, #160]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007e92:	f7fb ff53 	bl	8003d3c <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8007e96:	6923      	ldr	r3, [r4, #16]
 8007e98:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8007e9c:	f43f af4d 	beq.w	8007d3a <HAL_DMA_Init+0x11a>
 8007ea0:	21bc      	movs	r1, #188	; 0xbc
 8007ea2:	4824      	ldr	r0, [pc, #144]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007ea4:	f7fb ff4a 	bl	8003d3c <assert_failed>
 8007ea8:	e747      	b.n	8007d3a <HAL_DMA_Init+0x11a>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007eac:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8007eae:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007eb0:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007eb2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007eb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007eb8:	2001      	movs	r0, #1
}
 8007eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ebc:	e9d4 700b 	ldrd	r7, r0, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8007ec0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007ec2:	4338      	orrs	r0, r7
 8007ec4:	4301      	orrs	r1, r0
  hdma->Instance->CR = tmp;  
 8007ec6:	6019      	str	r1, [r3, #0]
  tmp = hdma->Instance->FCR;
 8007ec8:	695d      	ldr	r5, [r3, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007eca:	f025 0507 	bic.w	r5, r5, #7
 8007ece:	4315      	orrs	r5, r2
    tmp |= hdma->Init.FIFOThreshold;
 8007ed0:	f045 0504 	orr.w	r5, r5, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007ed4:	2f00      	cmp	r7, #0
 8007ed6:	d083      	beq.n	8007de0 <HAL_DMA_Init+0x1c0>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007ed8:	b376      	cbz	r6, 8007f38 <HAL_DMA_Init+0x318>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007eda:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8007ede:	d03c      	beq.n	8007f5a <HAL_DMA_Init+0x33a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007ee0:	2a02      	cmp	r2, #2
 8007ee2:	d905      	bls.n	8007ef0 <HAL_DMA_Init+0x2d0>
 8007ee4:	2a03      	cmp	r2, #3
 8007ee6:	f47f af7b 	bne.w	8007de0 <HAL_DMA_Init+0x1c0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007eea:	01fa      	lsls	r2, r7, #7
 8007eec:	f57f af78 	bpl.w	8007de0 <HAL_DMA_Init+0x1c0>
        hdma->State = HAL_DMA_STATE_READY;
 8007ef0:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ef2:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8007ef4:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ef6:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8007ef8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8007efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8007efe:	21c6      	movs	r1, #198	; 0xc6
 8007f00:	480c      	ldr	r0, [pc, #48]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007f02:	f7fb ff1b 	bl	8003d3c <assert_failed>
 8007f06:	e78d      	b.n	8007e24 <HAL_DMA_Init+0x204>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8007f08:	21c7      	movs	r1, #199	; 0xc7
 8007f0a:	480a      	ldr	r0, [pc, #40]	; (8007f34 <HAL_DMA_Init+0x314>)
 8007f0c:	f7fb ff16 	bl	8003d3c <assert_failed>
 8007f10:	e78c      	b.n	8007e2c <HAL_DMA_Init+0x20c>
 8007f12:	bf00      	nop
 8007f14:	40026010 	.word	0x40026010
 8007f18:	40026028 	.word	0x40026028
 8007f1c:	40026040 	.word	0x40026040
 8007f20:	400264b8 	.word	0x400264b8
 8007f24:	e010803f 	.word	0xe010803f
 8007f28:	aaaaaaab 	.word	0xaaaaaaab
 8007f2c:	080297e0 	.word	0x080297e0
 8007f30:	fffffc00 	.word	0xfffffc00
 8007f34:	080297a8 	.word	0x080297a8
    switch (tmp)
 8007f38:	2a01      	cmp	r2, #1
 8007f3a:	d01d      	beq.n	8007f78 <HAL_DMA_Init+0x358>
 8007f3c:	f032 0202 	bics.w	r2, r2, #2
 8007f40:	f47f af4e 	bne.w	8007de0 <HAL_DMA_Init+0x1c0>
 8007f44:	e7d1      	b.n	8007eea <HAL_DMA_Init+0x2ca>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007f46:	21b8      	movs	r1, #184	; 0xb8
 8007f48:	480e      	ldr	r0, [pc, #56]	; (8007f84 <HAL_DMA_Init+0x364>)
 8007f4a:	f7fb fef7 	bl	8003d3c <assert_failed>
 8007f4e:	e6ce      	b.n	8007cee <HAL_DMA_Init+0xce>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8007f50:	21b9      	movs	r1, #185	; 0xb9
 8007f52:	480c      	ldr	r0, [pc, #48]	; (8007f84 <HAL_DMA_Init+0x364>)
 8007f54:	f7fb fef2 	bl	8003d3c <assert_failed>
 8007f58:	e6de      	b.n	8007d18 <HAL_DMA_Init+0xf8>
    switch (tmp)
 8007f5a:	2a03      	cmp	r2, #3
 8007f5c:	f63f af40 	bhi.w	8007de0 <HAL_DMA_Init+0x1c0>
 8007f60:	a101      	add	r1, pc, #4	; (adr r1, 8007f68 <HAL_DMA_Init+0x348>)
 8007f62:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007f66:	bf00      	nop
 8007f68:	08007ef1 	.word	0x08007ef1
 8007f6c:	08007eeb 	.word	0x08007eeb
 8007f70:	08007ef1 	.word	0x08007ef1
 8007f74:	08007f79 	.word	0x08007f79
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007f78:	f1b7 7fc0 	cmp.w	r7, #25165824	; 0x1800000
 8007f7c:	f47f af30 	bne.w	8007de0 <HAL_DMA_Init+0x1c0>
 8007f80:	e7b6      	b.n	8007ef0 <HAL_DMA_Init+0x2d0>
 8007f82:	bf00      	nop
 8007f84:	080297a8 	.word	0x080297a8

08007f88 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	f000 8099 	beq.w	80080c0 <HAL_DMA_DeInit+0x138>
{
 8007f8e:	b570      	push	{r4, r5, r6, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007f90:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8007f94:	4604      	mov	r4, r0
 8007f96:	2b02      	cmp	r3, #2
 8007f98:	b2d8      	uxtb	r0, r3
 8007f9a:	f000 808b 	beq.w	80080b4 <HAL_DMA_DeInit+0x12c>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8007f9e:	6822      	ldr	r2, [r4, #0]
 8007fa0:	4b4c      	ldr	r3, [pc, #304]	; (80080d4 <HAL_DMA_DeInit+0x14c>)
 8007fa2:	484d      	ldr	r0, [pc, #308]	; (80080d8 <HAL_DMA_DeInit+0x150>)
 8007fa4:	494d      	ldr	r1, [pc, #308]	; (80080dc <HAL_DMA_DeInit+0x154>)
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	bf18      	it	ne
 8007faa:	4282      	cmpne	r2, r0
 8007fac:	4d4c      	ldr	r5, [pc, #304]	; (80080e0 <HAL_DMA_DeInit+0x158>)
 8007fae:	f100 0048 	add.w	r0, r0, #72	; 0x48
 8007fb2:	bf14      	ite	ne
 8007fb4:	2301      	movne	r3, #1
 8007fb6:	2300      	moveq	r3, #0
 8007fb8:	428a      	cmp	r2, r1
 8007fba:	bf0c      	ite	eq
 8007fbc:	2300      	moveq	r3, #0
 8007fbe:	f003 0301 	andne.w	r3, r3, #1
 8007fc2:	3148      	adds	r1, #72	; 0x48
 8007fc4:	42aa      	cmp	r2, r5
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2300      	moveq	r3, #0
 8007fca:	f003 0301 	andne.w	r3, r3, #1
 8007fce:	3548      	adds	r5, #72	; 0x48
 8007fd0:	4282      	cmp	r2, r0
 8007fd2:	bf0c      	ite	eq
 8007fd4:	2300      	moveq	r3, #0
 8007fd6:	f003 0301 	andne.w	r3, r3, #1
 8007fda:	3048      	adds	r0, #72	; 0x48
 8007fdc:	428a      	cmp	r2, r1
 8007fde:	bf0c      	ite	eq
 8007fe0:	2300      	moveq	r3, #0
 8007fe2:	f003 0301 	andne.w	r3, r3, #1
 8007fe6:	f501 7162 	add.w	r1, r1, #904	; 0x388
 8007fea:	42aa      	cmp	r2, r5
 8007fec:	bf0c      	ite	eq
 8007fee:	2300      	moveq	r3, #0
 8007ff0:	f003 0301 	andne.w	r3, r3, #1
 8007ff4:	f505 7562 	add.w	r5, r5, #904	; 0x388
 8007ff8:	4282      	cmp	r2, r0
 8007ffa:	bf0c      	ite	eq
 8007ffc:	2300      	moveq	r3, #0
 8007ffe:	f003 0301 	andne.w	r3, r3, #1
 8008002:	f500 7062 	add.w	r0, r0, #904	; 0x388
 8008006:	428a      	cmp	r2, r1
 8008008:	bf0c      	ite	eq
 800800a:	2300      	moveq	r3, #0
 800800c:	f003 0301 	andne.w	r3, r3, #1
 8008010:	3148      	adds	r1, #72	; 0x48
 8008012:	42aa      	cmp	r2, r5
 8008014:	bf0c      	ite	eq
 8008016:	2300      	moveq	r3, #0
 8008018:	f003 0301 	andne.w	r3, r3, #1
 800801c:	3548      	adds	r5, #72	; 0x48
 800801e:	4282      	cmp	r2, r0
 8008020:	bf0c      	ite	eq
 8008022:	2300      	moveq	r3, #0
 8008024:	f003 0301 	andne.w	r3, r3, #1
 8008028:	3048      	adds	r0, #72	; 0x48
 800802a:	428a      	cmp	r2, r1
 800802c:	bf0c      	ite	eq
 800802e:	2300      	moveq	r3, #0
 8008030:	f003 0301 	andne.w	r3, r3, #1
 8008034:	3148      	adds	r1, #72	; 0x48
 8008036:	42aa      	cmp	r2, r5
 8008038:	bf0c      	ite	eq
 800803a:	2300      	moveq	r3, #0
 800803c:	f003 0301 	andne.w	r3, r3, #1
 8008040:	4282      	cmp	r2, r0
 8008042:	bf0c      	ite	eq
 8008044:	2300      	moveq	r3, #0
 8008046:	f003 0301 	andne.w	r3, r3, #1
 800804a:	428a      	cmp	r2, r1
 800804c:	bf0c      	ite	eq
 800804e:	2300      	moveq	r3, #0
 8008050:	f003 0301 	andne.w	r3, r3, #1
 8008054:	b113      	cbz	r3, 800805c <HAL_DMA_DeInit+0xd4>
 8008056:	4b23      	ldr	r3, [pc, #140]	; (80080e4 <HAL_DMA_DeInit+0x15c>)
 8008058:	429a      	cmp	r2, r3
 800805a:	d133      	bne.n	80080c4 <HAL_DMA_DeInit+0x13c>
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800805c:	b2d3      	uxtb	r3, r2
 800805e:	4822      	ldr	r0, [pc, #136]	; (80080e8 <HAL_DMA_DeInit+0x160>)
  __HAL_DMA_DISABLE(hdma);
 8008060:	6815      	ldr	r5, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008062:	2100      	movs	r1, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008064:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8008066:	f025 0501 	bic.w	r5, r5, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800806a:	fba0 6003 	umull	r6, r0, r0, r3
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800806e:	4e1f      	ldr	r6, [pc, #124]	; (80080ec <HAL_DMA_DeInit+0x164>)
  __HAL_DMA_DISABLE(hdma);
 8008070:	6015      	str	r5, [r2, #0]
  if (stream_number > 3U)
 8008072:	2b5f      	cmp	r3, #95	; 0x5f
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008074:	ea4f 1010 	mov.w	r0, r0, lsr #4
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008078:	f04f 0521 	mov.w	r5, #33	; 0x21
  hdma->Instance->CR   = 0U;
 800807c:	6011      	str	r1, [r2, #0]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800807e:	5c30      	ldrb	r0, [r6, r0]
  hdma->Instance->NDTR = 0U;
 8008080:	6051      	str	r1, [r2, #4]
  hdma->Instance->PAR  = 0U;
 8008082:	6091      	str	r1, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8008084:	60d1      	str	r1, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8008086:	6111      	str	r1, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008088:	6155      	str	r5, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800808a:	65e0      	str	r0, [r4, #92]	; 0x5c
  if (stream_number > 3U)
 800808c:	d813      	bhi.n	80080b6 <HAL_DMA_DeInit+0x12e>
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800808e:	4918      	ldr	r1, [pc, #96]	; (80080f0 <HAL_DMA_DeInit+0x168>)
 8008090:	4011      	ands	r1, r2
  hdma->XferCpltCallback = NULL;
 8008092:	2300      	movs	r3, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008094:	223f      	movs	r2, #63	; 0x3f
 8008096:	65a1      	str	r1, [r4, #88]	; 0x58
 8008098:	4082      	lsls	r2, r0
  return HAL_OK;
 800809a:	4618      	mov	r0, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800809c:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800809e:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80080a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80080a4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 80080a8:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 80080ac:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 80080b0:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 80080b4:	bd70      	pop	{r4, r5, r6, pc}
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80080b6:	f5a1 6180 	sub.w	r1, r1, #1024	; 0x400
 80080ba:	4011      	ands	r1, r2
 80080bc:	3104      	adds	r1, #4
 80080be:	e7e8      	b.n	8008092 <HAL_DMA_DeInit+0x10a>
    return HAL_ERROR;
 80080c0:	2001      	movs	r0, #1
}
 80080c2:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80080c4:	f240 1149 	movw	r1, #329	; 0x149
 80080c8:	480a      	ldr	r0, [pc, #40]	; (80080f4 <HAL_DMA_DeInit+0x16c>)
 80080ca:	f7fb fe37 	bl	8003d3c <assert_failed>
 80080ce:	6822      	ldr	r2, [r4, #0]
 80080d0:	e7c4      	b.n	800805c <HAL_DMA_DeInit+0xd4>
 80080d2:	bf00      	nop
 80080d4:	40026010 	.word	0x40026010
 80080d8:	40026028 	.word	0x40026028
 80080dc:	40026040 	.word	0x40026040
 80080e0:	40026058 	.word	0x40026058
 80080e4:	400264b8 	.word	0x400264b8
 80080e8:	aaaaaaab 	.word	0xaaaaaaab
 80080ec:	080297e0 	.word	0x080297e0
 80080f0:	fffffc00 	.word	0xfffffc00
 80080f4:	080297a8 	.word	0x080297a8

080080f8 <HAL_DMA_Start_IT>:
{
 80080f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080fc:	461e      	mov	r6, r3
 80080fe:	4604      	mov	r4, r0
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008100:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8008104:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008106:	1e70      	subs	r0, r6, #1
{
 8008108:	4617      	mov	r7, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800810a:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800810e:	4298      	cmp	r0, r3
 8008110:	d83b      	bhi.n	800818a <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8008112:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008116:	2b01      	cmp	r3, #1
 8008118:	d040      	beq.n	800819c <HAL_DMA_Start_IT+0xa4>
 800811a:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800811c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8008120:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8008122:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008126:	d005      	beq.n	8008134 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 8008128:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800812a:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800812c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8008130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008134:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8008136:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008138:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800813a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800813e:	68a2      	ldr	r2, [r4, #8]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008140:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008142:	682b      	ldr	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008144:	2a40      	cmp	r2, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008146:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800814a:	602b      	str	r3, [r5, #0]
  hdma->Instance->NDTR = DataLength;
 800814c:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800814e:	d028      	beq.n	80081a2 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8008150:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8008154:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008156:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008158:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800815a:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800815c:	408b      	lsls	r3, r1
 800815e:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008162:	682b      	ldr	r3, [r5, #0]
 8008164:	f043 0316 	orr.w	r3, r3, #22
 8008168:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800816a:	696b      	ldr	r3, [r5, #20]
 800816c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008170:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8008172:	b11a      	cbz	r2, 800817c <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008174:	682b      	ldr	r3, [r5, #0]
 8008176:	f043 0308 	orr.w	r3, r3, #8
 800817a:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 800817c:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800817e:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8008180:	f043 0301 	orr.w	r3, r3, #1
 8008184:	602b      	str	r3, [r5, #0]
}
 8008186:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800818a:	f240 11cd 	movw	r1, #461	; 0x1cd
 800818e:	4807      	ldr	r0, [pc, #28]	; (80081ac <HAL_DMA_Start_IT+0xb4>)
 8008190:	f7fb fdd4 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hdma);
 8008194:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008198:	2b01      	cmp	r3, #1
 800819a:	d1be      	bne.n	800811a <HAL_DMA_Start_IT+0x22>
 800819c:	2002      	movs	r0, #2
}
 800819e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 80081a2:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 80081a4:	f8c5 800c 	str.w	r8, [r5, #12]
 80081a8:	e7d5      	b.n	8008156 <HAL_DMA_Start_IT+0x5e>
 80081aa:	bf00      	nop
 80081ac:	080297a8 	.word	0x080297a8

080081b0 <HAL_DMA_Abort>:
{
 80081b0:	b570      	push	{r4, r5, r6, lr}
 80081b2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081b4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80081b6:	f7fe fdc9 	bl	8006d4c <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081ba:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d006      	beq.n	80081d0 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081c2:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80081c4:	2300      	movs	r3, #0
    return HAL_ERROR;
 80081c6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80081c8:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80081ca:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80081ce:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081d0:	6823      	ldr	r3, [r4, #0]
 80081d2:	4605      	mov	r5, r0
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	f022 0216 	bic.w	r2, r2, #22
 80081dc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80081de:	695a      	ldr	r2, [r3, #20]
 80081e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081e4:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80081e6:	b339      	cbz	r1, 8008238 <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	f022 0208 	bic.w	r2, r2, #8
 80081ee:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	f022 0201 	bic.w	r2, r2, #1
 80081f6:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80081f8:	e005      	b.n	8008206 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80081fa:	f7fe fda7 	bl	8006d4c <HAL_GetTick>
 80081fe:	1b43      	subs	r3, r0, r5
 8008200:	2b05      	cmp	r3, #5
 8008202:	d80f      	bhi.n	8008224 <HAL_DMA_Abort+0x74>
 8008204:	6823      	ldr	r3, [r4, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f013 0301 	ands.w	r3, r3, #1
 800820c:	d1f5      	bne.n	80081fa <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800820e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008210:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8008212:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008214:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8008216:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008218:	60b2      	str	r2, [r6, #8]
    __HAL_UNLOCK(hdma);
 800821a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_READY;
 800821e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
}
 8008222:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008224:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008226:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 8008228:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800822a:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 800822c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800822e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8008232:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 8008236:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008238:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800823a:	2a00      	cmp	r2, #0
 800823c:	d1d4      	bne.n	80081e8 <HAL_DMA_Abort+0x38>
 800823e:	e7d7      	b.n	80081f0 <HAL_DMA_Abort+0x40>

08008240 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008240:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8008244:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008246:	2a02      	cmp	r2, #2
 8008248:	d003      	beq.n	8008252 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800824a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800824c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800824e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008250:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8008252:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8008254:	2105      	movs	r1, #5
  return HAL_OK;
 8008256:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 8008258:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800825c:	6813      	ldr	r3, [r2, #0]
 800825e:	f023 0301 	bic.w	r3, r3, #1
 8008262:	6013      	str	r3, [r2, #0]
}
 8008264:	4770      	bx	lr
 8008266:	bf00      	nop

08008268 <HAL_DMA_IRQHandler>:
  uint32_t timeout = SystemCoreClock / 9600;
 8008268:	4b75      	ldr	r3, [pc, #468]	; (8008440 <HAL_DMA_IRQHandler+0x1d8>)
  __IO uint32_t count = 0;
 800826a:	2100      	movs	r1, #0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800826c:	2208      	movs	r2, #8
{
 800826e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600;
 8008272:	681d      	ldr	r5, [r3, #0]
{
 8008274:	b082      	sub	sp, #8
 8008276:	4680      	mov	r8, r0
  __IO uint32_t count = 0;
 8008278:	9101      	str	r1, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800827a:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 800827e:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008280:	409a      	lsls	r2, r3
 8008282:	4222      	tst	r2, r4
 8008284:	d004      	beq.n	8008290 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008286:	6801      	ldr	r1, [r0, #0]
 8008288:	680f      	ldr	r7, [r1, #0]
 800828a:	0778      	lsls	r0, r7, #29
 800828c:	f100 808a 	bmi.w	80083a4 <HAL_DMA_IRQHandler+0x13c>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008290:	2201      	movs	r2, #1
 8008292:	409a      	lsls	r2, r3
 8008294:	4222      	tst	r2, r4
 8008296:	d004      	beq.n	80082a2 <HAL_DMA_IRQHandler+0x3a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008298:	f8d8 1000 	ldr.w	r1, [r8]
 800829c:	6949      	ldr	r1, [r1, #20]
 800829e:	0609      	lsls	r1, r1, #24
 80082a0:	d478      	bmi.n	8008394 <HAL_DMA_IRQHandler+0x12c>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80082a2:	2204      	movs	r2, #4
 80082a4:	409a      	lsls	r2, r3
 80082a6:	4222      	tst	r2, r4
 80082a8:	d004      	beq.n	80082b4 <HAL_DMA_IRQHandler+0x4c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80082aa:	f8d8 1000 	ldr.w	r1, [r8]
 80082ae:	6809      	ldr	r1, [r1, #0]
 80082b0:	078f      	lsls	r7, r1, #30
 80082b2:	d467      	bmi.n	8008384 <HAL_DMA_IRQHandler+0x11c>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80082b4:	2210      	movs	r2, #16
 80082b6:	409a      	lsls	r2, r3
 80082b8:	4222      	tst	r2, r4
 80082ba:	d004      	beq.n	80082c6 <HAL_DMA_IRQHandler+0x5e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80082bc:	f8d8 1000 	ldr.w	r1, [r8]
 80082c0:	680f      	ldr	r7, [r1, #0]
 80082c2:	0738      	lsls	r0, r7, #28
 80082c4:	d449      	bmi.n	800835a <HAL_DMA_IRQHandler+0xf2>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80082c6:	2220      	movs	r2, #32
 80082c8:	409a      	lsls	r2, r3
 80082ca:	4222      	tst	r2, r4
 80082cc:	d017      	beq.n	80082fe <HAL_DMA_IRQHandler+0x96>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80082ce:	f8d8 1000 	ldr.w	r1, [r8]
 80082d2:	680c      	ldr	r4, [r1, #0]
 80082d4:	06e0      	lsls	r0, r4, #27
 80082d6:	d512      	bpl.n	80082fe <HAL_DMA_IRQHandler+0x96>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80082d8:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80082da:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80082de:	2a05      	cmp	r2, #5
 80082e0:	d073      	beq.n	80083ca <HAL_DMA_IRQHandler+0x162>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082e2:	680b      	ldr	r3, [r1, #0]
 80082e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082e8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80082ea:	f000 8090 	beq.w	800840e <HAL_DMA_IRQHandler+0x1a6>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80082ee:	0319      	lsls	r1, r3, #12
 80082f0:	f140 809b 	bpl.w	800842a <HAL_DMA_IRQHandler+0x1c2>
        if(hdma->XferCpltCallback != NULL)
 80082f4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80082f8:	b10b      	cbz	r3, 80082fe <HAL_DMA_IRQHandler+0x96>
          hdma->XferCpltCallback(hdma);
 80082fa:	4640      	mov	r0, r8
 80082fc:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80082fe:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008302:	b33b      	cbz	r3, 8008354 <HAL_DMA_IRQHandler+0xec>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8008304:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8008308:	07da      	lsls	r2, r3, #31
 800830a:	d51b      	bpl.n	8008344 <HAL_DMA_IRQHandler+0xdc>
      __HAL_DMA_DISABLE(hdma);
 800830c:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8008310:	2105      	movs	r1, #5
  uint32_t timeout = SystemCoreClock / 9600;
 8008312:	4b4c      	ldr	r3, [pc, #304]	; (8008444 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 8008314:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
  uint32_t timeout = SystemCoreClock / 9600;
 8008318:	fba3 3505 	umull	r3, r5, r3, r5
      __HAL_DMA_DISABLE(hdma);
 800831c:	6813      	ldr	r3, [r2, #0]
 800831e:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 8008322:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 8008324:	6013      	str	r3, [r2, #0]
 8008326:	e002      	b.n	800832e <HAL_DMA_IRQHandler+0xc6>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8008328:	6813      	ldr	r3, [r2, #0]
 800832a:	07db      	lsls	r3, r3, #31
 800832c:	d504      	bpl.n	8008338 <HAL_DMA_IRQHandler+0xd0>
        if (++count > timeout)
 800832e:	9b01      	ldr	r3, [sp, #4]
 8008330:	3301      	adds	r3, #1
 8008332:	42ab      	cmp	r3, r5
 8008334:	9301      	str	r3, [sp, #4]
 8008336:	d9f7      	bls.n	8008328 <HAL_DMA_IRQHandler+0xc0>
      hdma->State = HAL_DMA_STATE_READY;
 8008338:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 800833a:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 800833c:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8008340:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 8008344:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8008348:	b123      	cbz	r3, 8008354 <HAL_DMA_IRQHandler+0xec>
      hdma->XferErrorCallback(hdma);
 800834a:	4640      	mov	r0, r8
}
 800834c:	b002      	add	sp, #8
 800834e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 8008352:	4718      	bx	r3
}
 8008354:	b002      	add	sp, #8
 8008356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800835a:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800835c:	680a      	ldr	r2, [r1, #0]
 800835e:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008362:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008364:	d12a      	bne.n	80083bc <HAL_DMA_IRQHandler+0x154>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008366:	05d7      	lsls	r7, r2, #23
 8008368:	d403      	bmi.n	8008372 <HAL_DMA_IRQHandler+0x10a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800836a:	680a      	ldr	r2, [r1, #0]
 800836c:	f022 0208 	bic.w	r2, r2, #8
 8008370:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8008372:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8008376:	2a00      	cmp	r2, #0
 8008378:	d0a5      	beq.n	80082c6 <HAL_DMA_IRQHandler+0x5e>
          hdma->XferHalfCpltCallback(hdma);
 800837a:	4640      	mov	r0, r8
 800837c:	4790      	blx	r2
 800837e:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8008382:	e7a0      	b.n	80082c6 <HAL_DMA_IRQHandler+0x5e>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008384:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008386:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800838a:	f042 0204 	orr.w	r2, r2, #4
 800838e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8008392:	e78f      	b.n	80082b4 <HAL_DMA_IRQHandler+0x4c>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008394:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008396:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800839a:	f042 0202 	orr.w	r2, r2, #2
 800839e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80083a2:	e77e      	b.n	80082a2 <HAL_DMA_IRQHandler+0x3a>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083a4:	680f      	ldr	r7, [r1, #0]
 80083a6:	f027 0704 	bic.w	r7, r7, #4
 80083aa:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083ac:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083ae:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80083b2:	f042 0201 	orr.w	r2, r2, #1
 80083b6:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80083ba:	e769      	b.n	8008290 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80083bc:	0312      	lsls	r2, r2, #12
 80083be:	d5d8      	bpl.n	8008372 <HAL_DMA_IRQHandler+0x10a>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80083c0:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80083c4:	2a00      	cmp	r2, #0
 80083c6:	d1d8      	bne.n	800837a <HAL_DMA_IRQHandler+0x112>
 80083c8:	e77d      	b.n	80082c6 <HAL_DMA_IRQHandler+0x5e>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083ca:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083cc:	f8d8 4040 	ldr.w	r4, [r8, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80083d0:	f022 0216 	bic.w	r2, r2, #22
 80083d4:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80083d6:	694a      	ldr	r2, [r1, #20]
 80083d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80083dc:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80083de:	b354      	cbz	r4, 8008436 <HAL_DMA_IRQHandler+0x1ce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80083e0:	680a      	ldr	r2, [r1, #0]
 80083e2:	f022 0208 	bic.w	r2, r2, #8
 80083e6:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083e8:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 80083ea:	2401      	movs	r4, #1
        __HAL_UNLOCK(hdma);
 80083ec:	2100      	movs	r1, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083ee:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 80083f2:	f8d8 2050 	ldr.w	r2, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80083f6:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 80083f8:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 80083fc:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8008400:	2a00      	cmp	r2, #0
 8008402:	d0a7      	beq.n	8008354 <HAL_DMA_IRQHandler+0xec>
          hdma->XferAbortCallback(hdma);
 8008404:	4640      	mov	r0, r8
}
 8008406:	b002      	add	sp, #8
 8008408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 800840c:	4710      	bx	r2
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800840e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8008412:	f47f af6f 	bne.w	80082f4 <HAL_DMA_IRQHandler+0x8c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008416:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8008418:	2401      	movs	r4, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800841a:	f022 0210 	bic.w	r2, r2, #16
 800841e:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8008420:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8008424:	f888 4035 	strb.w	r4, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8008428:	e764      	b.n	80082f4 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1CpltCallback != NULL)
 800842a:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800842e:	2b00      	cmp	r3, #0
 8008430:	f47f af63 	bne.w	80082fa <HAL_DMA_IRQHandler+0x92>
 8008434:	e763      	b.n	80082fe <HAL_DMA_IRQHandler+0x96>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008436:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800843a:	2a00      	cmp	r2, #0
 800843c:	d1d0      	bne.n	80083e0 <HAL_DMA_IRQHandler+0x178>
 800843e:	e7d3      	b.n	80083e8 <HAL_DMA_IRQHandler+0x180>
 8008440:	2000027c 	.word	0x2000027c
 8008444:	1b4e81b5 	.word	0x1b4e81b5

08008448 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8008448:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800844a:	4770      	bx	lr

0800844c <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	f8dd 8020 	ldr.w	r8, [sp, #32]
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008454:	f64f 75fe 	movw	r5, #65534	; 0xfffe
{
 8008458:	4604      	mov	r4, r0
 800845a:	4689      	mov	r9, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800845c:	f108 36ff 	add.w	r6, r8, #4294967295
{
 8008460:	4692      	mov	sl, r2
 8008462:	461f      	mov	r7, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008464:	42ae      	cmp	r6, r5
 8008466:	d85f      	bhi.n	8008528 <HAL_DMAEx_MultiBufferStart_IT+0xdc>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008468:	68a0      	ldr	r0, [r4, #8]
 800846a:	2880      	cmp	r0, #128	; 0x80
 800846c:	d063      	beq.n	8008536 <HAL_DMAEx_MultiBufferStart_IT+0xea>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800846e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8008472:	2b01      	cmp	r3, #1
 8008474:	f000 8090 	beq.w	8008598 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8008478:	2201      	movs	r2, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800847a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 800847e:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8008480:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8008484:	d005      	beq.n	8008492 <HAL_DMAEx_MultiBufferStart_IT+0x46>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8008486:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 8008488:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800848a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8008492:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008494:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8008496:	2202      	movs	r2, #2
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008498:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 800849a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800849e:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80084a0:	682b      	ldr	r3, [r5, #0]
 80084a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80084a6:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 80084a8:	612f      	str	r7, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 80084aa:	f8c5 8004 	str.w	r8, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80084ae:	d06a      	beq.n	8008586 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80084b0:	f8c5 9008 	str.w	r9, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80084b4:	f8c5 a00c 	str.w	sl, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80084b8:	4ba4      	ldr	r3, [pc, #656]	; (800874c <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80084ba:	429d      	cmp	r5, r3
 80084bc:	d941      	bls.n	8008542 <HAL_DMAEx_MultiBufferStart_IT+0xf6>
 80084be:	3b48      	subs	r3, #72	; 0x48
 80084c0:	49a3      	ldr	r1, [pc, #652]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80084c2:	4aa4      	ldr	r2, [pc, #656]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80084c4:	429d      	cmp	r5, r3
 80084c6:	bf18      	it	ne
 80084c8:	428d      	cmpne	r5, r1
 80084ca:	bf14      	ite	ne
 80084cc:	2301      	movne	r3, #1
 80084ce:	2300      	moveq	r3, #0
 80084d0:	4295      	cmp	r5, r2
 80084d2:	bf0c      	ite	eq
 80084d4:	2300      	moveq	r3, #0
 80084d6:	f003 0301 	andne.w	r3, r3, #1
 80084da:	b11b      	cbz	r3, 80084e4 <HAL_DMAEx_MultiBufferStart_IT+0x98>
 80084dc:	4b9e      	ldr	r3, [pc, #632]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80084de:	429d      	cmp	r5, r3
 80084e0:	f040 8111 	bne.w	8008706 <HAL_DMAEx_MultiBufferStart_IT+0x2ba>
 80084e4:	4b9d      	ldr	r3, [pc, #628]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80084e6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80084e8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80084ea:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80084ec:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80084ee:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80084f0:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80084f2:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80084f4:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80084f6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80084f8:	4b98      	ldr	r3, [pc, #608]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80084fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80084fc:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084fe:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008500:	f043 0316 	orr.w	r3, r3, #22
 8008504:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008506:	696b      	ldr	r3, [r5, #20]
 8008508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850c:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800850e:	2a00      	cmp	r2, #0
 8008510:	d03e      	beq.n	8008590 <HAL_DMAEx_MultiBufferStart_IT+0x144>
      hdma->Instance->CR  |= DMA_IT_HT;
 8008512:	682b      	ldr	r3, [r5, #0]
 8008514:	f043 0308 	orr.w	r3, r3, #8
 8008518:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800851a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800851c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800851e:	f043 0301 	orr.w	r3, r3, #1
 8008522:	602b      	str	r3, [r5, #0]
}
 8008524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008528:	488d      	ldr	r0, [pc, #564]	; (8008760 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800852a:	21a1      	movs	r1, #161	; 0xa1
 800852c:	f7fb fc06 	bl	8003d3c <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008530:	68a0      	ldr	r0, [r4, #8]
 8008532:	2880      	cmp	r0, #128	; 0x80
 8008534:	d19b      	bne.n	800846e <HAL_DMAEx_MultiBufferStart_IT+0x22>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8008536:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800853a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800853c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800853e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008542:	4b88      	ldr	r3, [pc, #544]	; (8008764 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8008544:	429d      	cmp	r5, r3
 8008546:	d929      	bls.n	800859c <HAL_DMAEx_MultiBufferStart_IT+0x150>
 8008548:	3ba8      	subs	r3, #168	; 0xa8
 800854a:	4987      	ldr	r1, [pc, #540]	; (8008768 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 800854c:	4a81      	ldr	r2, [pc, #516]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800854e:	429d      	cmp	r5, r3
 8008550:	bf18      	it	ne
 8008552:	428d      	cmpne	r5, r1
 8008554:	bf14      	ite	ne
 8008556:	2301      	movne	r3, #1
 8008558:	2300      	moveq	r3, #0
 800855a:	4295      	cmp	r5, r2
 800855c:	bf0c      	ite	eq
 800855e:	2300      	moveq	r3, #0
 8008560:	f003 0301 	andne.w	r3, r3, #1
 8008564:	b113      	cbz	r3, 800856c <HAL_DMAEx_MultiBufferStart_IT+0x120>
 8008566:	4b7c      	ldr	r3, [pc, #496]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008568:	429d      	cmp	r5, r3
 800856a:	d15a      	bne.n	8008622 <HAL_DMAEx_MultiBufferStart_IT+0x1d6>
 800856c:	4b7b      	ldr	r3, [pc, #492]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800856e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008570:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008572:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008574:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008576:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008578:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800857a:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800857c:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800857e:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008580:	4b76      	ldr	r3, [pc, #472]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8008582:	609a      	str	r2, [r3, #8]
 8008584:	e7ba      	b.n	80084fc <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    hdma->Instance->PAR = DstAddress;
 8008586:	f8c5 a008 	str.w	sl, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800858a:	f8c5 900c 	str.w	r9, [r5, #12]
 800858e:	e793      	b.n	80084b8 <HAL_DMAEx_MultiBufferStart_IT+0x6c>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008590:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8008592:	2b00      	cmp	r3, #0
 8008594:	d1bd      	bne.n	8008512 <HAL_DMAEx_MultiBufferStart_IT+0xc6>
 8008596:	e7c0      	b.n	800851a <HAL_DMAEx_MultiBufferStart_IT+0xce>
  __HAL_LOCK(hdma);
 8008598:	2002      	movs	r0, #2
 800859a:	e778      	b.n	800848e <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800859c:	4b73      	ldr	r3, [pc, #460]	; (800876c <HAL_DMAEx_MultiBufferStart_IT+0x320>)
 800859e:	429d      	cmp	r5, r3
 80085a0:	d91f      	bls.n	80085e2 <HAL_DMAEx_MultiBufferStart_IT+0x196>
 80085a2:	3b48      	subs	r3, #72	; 0x48
 80085a4:	4970      	ldr	r1, [pc, #448]	; (8008768 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80085a6:	4a6b      	ldr	r2, [pc, #428]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80085a8:	429d      	cmp	r5, r3
 80085aa:	bf18      	it	ne
 80085ac:	428d      	cmpne	r5, r1
 80085ae:	bf14      	ite	ne
 80085b0:	2301      	movne	r3, #1
 80085b2:	2300      	moveq	r3, #0
 80085b4:	4295      	cmp	r5, r2
 80085b6:	bf0c      	ite	eq
 80085b8:	2300      	moveq	r3, #0
 80085ba:	f003 0301 	andne.w	r3, r3, #1
 80085be:	b11b      	cbz	r3, 80085c8 <HAL_DMAEx_MultiBufferStart_IT+0x17c>
 80085c0:	4b65      	ldr	r3, [pc, #404]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80085c2:	429d      	cmp	r5, r3
 80085c4:	f040 8152 	bne.w	800886c <HAL_DMAEx_MultiBufferStart_IT+0x420>
 80085c8:	4b69      	ldr	r3, [pc, #420]	; (8008770 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80085ca:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085cc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80085ce:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80085d0:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80085d2:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80085d4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80085d6:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80085d8:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80085da:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80085dc:	4b64      	ldr	r3, [pc, #400]	; (8008770 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 80085de:	60da      	str	r2, [r3, #12]
 80085e0:	e78c      	b.n	80084fc <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80085e2:	4b61      	ldr	r3, [pc, #388]	; (8008768 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80085e4:	495a      	ldr	r1, [pc, #360]	; (8008750 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80085e6:	4a5b      	ldr	r2, [pc, #364]	; (8008754 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80085e8:	429d      	cmp	r5, r3
 80085ea:	bf18      	it	ne
 80085ec:	428d      	cmpne	r5, r1
 80085ee:	bf14      	ite	ne
 80085f0:	2301      	movne	r3, #1
 80085f2:	2300      	moveq	r3, #0
 80085f4:	4295      	cmp	r5, r2
 80085f6:	bf0c      	ite	eq
 80085f8:	2300      	moveq	r3, #0
 80085fa:	f003 0301 	andne.w	r3, r3, #1
 80085fe:	b11b      	cbz	r3, 8008608 <HAL_DMAEx_MultiBufferStart_IT+0x1bc>
 8008600:	4b55      	ldr	r3, [pc, #340]	; (8008758 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8008602:	429d      	cmp	r5, r3
 8008604:	f040 80be 	bne.w	8008784 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8008608:	4b59      	ldr	r3, [pc, #356]	; (8008770 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800860a:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800860c:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800860e:	2008      	movs	r0, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008610:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008612:	2104      	movs	r1, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008614:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008616:	2201      	movs	r2, #1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008618:	6098      	str	r0, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800861a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800861c:	4b54      	ldr	r3, [pc, #336]	; (8008770 <HAL_DMAEx_MultiBufferStart_IT+0x324>)
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	e76c      	b.n	80084fc <HAL_DMAEx_MultiBufferStart_IT+0xb0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008622:	3b48      	subs	r3, #72	; 0x48
 8008624:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008628:	3218      	adds	r2, #24
 800862a:	429d      	cmp	r5, r3
 800862c:	bf18      	it	ne
 800862e:	428d      	cmpne	r5, r1
 8008630:	bf14      	ite	ne
 8008632:	2301      	movne	r3, #1
 8008634:	2300      	moveq	r3, #0
 8008636:	4295      	cmp	r5, r2
 8008638:	bf0c      	ite	eq
 800863a:	2300      	moveq	r3, #0
 800863c:	f003 0301 	andne.w	r3, r3, #1
 8008640:	b11b      	cbz	r3, 800864a <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
 8008642:	4b4c      	ldr	r3, [pc, #304]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8008644:	429d      	cmp	r5, r3
 8008646:	f040 8215 	bne.w	8008a74 <HAL_DMAEx_MultiBufferStart_IT+0x628>
 800864a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800864e:	4b4a      	ldr	r3, [pc, #296]	; (8008778 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 8008650:	4a4a      	ldr	r2, [pc, #296]	; (800877c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8008652:	484b      	ldr	r0, [pc, #300]	; (8008780 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8008654:	429d      	cmp	r5, r3
 8008656:	bf18      	it	ne
 8008658:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800865a:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800865e:	bf14      	ite	ne
 8008660:	2301      	movne	r3, #1
 8008662:	2300      	moveq	r3, #0
 8008664:	4285      	cmp	r5, r0
 8008666:	bf0c      	ite	eq
 8008668:	2300      	moveq	r3, #0
 800866a:	f003 0301 	andne.w	r3, r3, #1
 800866e:	b11b      	cbz	r3, 8008678 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8008670:	4b40      	ldr	r3, [pc, #256]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8008672:	429d      	cmp	r5, r3
 8008674:	f040 8218 	bne.w	8008aa8 <HAL_DMAEx_MultiBufferStart_IT+0x65c>
 8008678:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800867c:	4b3e      	ldr	r3, [pc, #248]	; (8008778 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 800867e:	493f      	ldr	r1, [pc, #252]	; (800877c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 8008680:	483f      	ldr	r0, [pc, #252]	; (8008780 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 8008682:	429d      	cmp	r5, r3
 8008684:	bf18      	it	ne
 8008686:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008688:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800868c:	bf14      	ite	ne
 800868e:	2301      	movne	r3, #1
 8008690:	2300      	moveq	r3, #0
 8008692:	4285      	cmp	r5, r0
 8008694:	bf0c      	ite	eq
 8008696:	2300      	moveq	r3, #0
 8008698:	f003 0301 	andne.w	r3, r3, #1
 800869c:	b11b      	cbz	r3, 80086a6 <HAL_DMAEx_MultiBufferStart_IT+0x25a>
 800869e:	4b35      	ldr	r3, [pc, #212]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80086a0:	429d      	cmp	r5, r3
 80086a2:	f040 8231 	bne.w	8008b08 <HAL_DMAEx_MultiBufferStart_IT+0x6bc>
 80086a6:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80086aa:	4b34      	ldr	r3, [pc, #208]	; (800877c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80086ac:	4932      	ldr	r1, [pc, #200]	; (8008778 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80086ae:	4834      	ldr	r0, [pc, #208]	; (8008780 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80086b0:	429d      	cmp	r5, r3
 80086b2:	bf18      	it	ne
 80086b4:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80086b6:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80086ba:	bf14      	ite	ne
 80086bc:	2301      	movne	r3, #1
 80086be:	2300      	moveq	r3, #0
 80086c0:	4285      	cmp	r5, r0
 80086c2:	bf0c      	ite	eq
 80086c4:	2300      	moveq	r3, #0
 80086c6:	f003 0301 	andne.w	r3, r3, #1
 80086ca:	b11b      	cbz	r3, 80086d4 <HAL_DMAEx_MultiBufferStart_IT+0x288>
 80086cc:	4b29      	ldr	r3, [pc, #164]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80086ce:	429d      	cmp	r5, r3
 80086d0:	f040 8202 	bne.w	8008ad8 <HAL_DMAEx_MultiBufferStart_IT+0x68c>
 80086d4:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80086d8:	4b28      	ldr	r3, [pc, #160]	; (800877c <HAL_DMAEx_MultiBufferStart_IT+0x330>)
 80086da:	4927      	ldr	r1, [pc, #156]	; (8008778 <HAL_DMAEx_MultiBufferStart_IT+0x32c>)
 80086dc:	4828      	ldr	r0, [pc, #160]	; (8008780 <HAL_DMAEx_MultiBufferStart_IT+0x334>)
 80086de:	429d      	cmp	r5, r3
 80086e0:	bf18      	it	ne
 80086e2:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80086e4:	f8c1 23e0 	str.w	r2, [r1, #992]	; 0x3e0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80086e8:	bf14      	ite	ne
 80086ea:	2301      	movne	r3, #1
 80086ec:	2300      	moveq	r3, #0
 80086ee:	4285      	cmp	r5, r0
 80086f0:	bf0c      	ite	eq
 80086f2:	2300      	moveq	r3, #0
 80086f4:	f003 0301 	andne.w	r3, r3, #1
 80086f8:	b11b      	cbz	r3, 8008702 <HAL_DMAEx_MultiBufferStart_IT+0x2b6>
 80086fa:	4b1e      	ldr	r3, [pc, #120]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 80086fc:	429d      	cmp	r5, r3
 80086fe:	f040 821b 	bne.w	8008b38 <HAL_DMAEx_MultiBufferStart_IT+0x6ec>
 8008702:	2240      	movs	r2, #64	; 0x40
 8008704:	e73c      	b.n	8008580 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008706:	3b48      	subs	r3, #72	; 0x48
 8008708:	3118      	adds	r1, #24
 800870a:	3218      	adds	r2, #24
 800870c:	429d      	cmp	r5, r3
 800870e:	bf18      	it	ne
 8008710:	428d      	cmpne	r5, r1
 8008712:	bf14      	ite	ne
 8008714:	2301      	movne	r3, #1
 8008716:	2300      	moveq	r3, #0
 8008718:	4295      	cmp	r5, r2
 800871a:	bf0c      	ite	eq
 800871c:	2300      	moveq	r3, #0
 800871e:	f003 0301 	andne.w	r3, r3, #1
 8008722:	b11b      	cbz	r3, 800872c <HAL_DMAEx_MultiBufferStart_IT+0x2e0>
 8008724:	4b13      	ldr	r3, [pc, #76]	; (8008774 <HAL_DMAEx_MultiBufferStart_IT+0x328>)
 8008726:	429d      	cmp	r5, r3
 8008728:	f040 8115 	bne.w	8008956 <HAL_DMAEx_MultiBufferStart_IT+0x50a>
 800872c:	4b0b      	ldr	r3, [pc, #44]	; (800875c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800872e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008732:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008736:	f44f 7000 	mov.w	r0, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800873a:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800873c:	f44f 7180 	mov.w	r1, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008740:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008742:	2240      	movs	r2, #64	; 0x40
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008744:	60d8      	str	r0, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008746:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008748:	e6d6      	b.n	80084f8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
 800874a:	bf00      	nop
 800874c:	40026458 	.word	0x40026458
 8008750:	40026010 	.word	0x40026010
 8008754:	40026070 	.word	0x40026070
 8008758:	40026470 	.word	0x40026470
 800875c:	40026400 	.word	0x40026400
 8008760:	080297e8 	.word	0x080297e8
 8008764:	400260b8 	.word	0x400260b8
 8008768:	40026410 	.word	0x40026410
 800876c:	40026058 	.word	0x40026058
 8008770:	40026000 	.word	0x40026000
 8008774:	40026488 	.word	0x40026488
 8008778:	40026028 	.word	0x40026028
 800877c:	40026428 	.word	0x40026428
 8008780:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008784:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8008788:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800878c:	3218      	adds	r2, #24
 800878e:	429d      	cmp	r5, r3
 8008790:	bf18      	it	ne
 8008792:	428d      	cmpne	r5, r1
 8008794:	bf14      	ite	ne
 8008796:	2301      	movne	r3, #1
 8008798:	2300      	moveq	r3, #0
 800879a:	4295      	cmp	r5, r2
 800879c:	bf0c      	ite	eq
 800879e:	2300      	moveq	r3, #0
 80087a0:	f003 0301 	andne.w	r3, r3, #1
 80087a4:	b11b      	cbz	r3, 80087ae <HAL_DMAEx_MultiBufferStart_IT+0x362>
 80087a6:	4bab      	ldr	r3, [pc, #684]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80087a8:	429d      	cmp	r5, r3
 80087aa:	f040 81dd 	bne.w	8008b68 <HAL_DMAEx_MultiBufferStart_IT+0x71c>
 80087ae:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80087b2:	4ba9      	ldr	r3, [pc, #676]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80087b4:	4aa9      	ldr	r2, [pc, #676]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80087b6:	48aa      	ldr	r0, [pc, #680]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80087b8:	429d      	cmp	r5, r3
 80087ba:	bf18      	it	ne
 80087bc:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80087be:	f842 1c20 	str.w	r1, [r2, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80087c2:	bf14      	ite	ne
 80087c4:	2301      	movne	r3, #1
 80087c6:	2300      	moveq	r3, #0
 80087c8:	4285      	cmp	r5, r0
 80087ca:	bf0c      	ite	eq
 80087cc:	2300      	moveq	r3, #0
 80087ce:	f003 0301 	andne.w	r3, r3, #1
 80087d2:	b11b      	cbz	r3, 80087dc <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80087d4:	4b9f      	ldr	r3, [pc, #636]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80087d6:	429d      	cmp	r5, r3
 80087d8:	f040 81df 	bne.w	8008b9a <HAL_DMAEx_MultiBufferStart_IT+0x74e>
 80087dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80087e0:	4b9d      	ldr	r3, [pc, #628]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80087e2:	499e      	ldr	r1, [pc, #632]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80087e4:	489e      	ldr	r0, [pc, #632]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80087e6:	429d      	cmp	r5, r3
 80087e8:	bf18      	it	ne
 80087ea:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80087ec:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80087f0:	bf14      	ite	ne
 80087f2:	2301      	movne	r3, #1
 80087f4:	2300      	moveq	r3, #0
 80087f6:	4285      	cmp	r5, r0
 80087f8:	bf0c      	ite	eq
 80087fa:	2300      	moveq	r3, #0
 80087fc:	f003 0301 	andne.w	r3, r3, #1
 8008800:	b11b      	cbz	r3, 800880a <HAL_DMAEx_MultiBufferStart_IT+0x3be>
 8008802:	4b94      	ldr	r3, [pc, #592]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008804:	429d      	cmp	r5, r3
 8008806:	f040 8228 	bne.w	8008c5a <HAL_DMAEx_MultiBufferStart_IT+0x80e>
 800880a:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800880e:	4b93      	ldr	r3, [pc, #588]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008810:	4991      	ldr	r1, [pc, #580]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8008812:	4893      	ldr	r0, [pc, #588]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8008814:	429d      	cmp	r5, r3
 8008816:	bf18      	it	ne
 8008818:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800881a:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800881e:	bf14      	ite	ne
 8008820:	2301      	movne	r3, #1
 8008822:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008824:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008826:	4285      	cmp	r5, r0
 8008828:	bf0c      	ite	eq
 800882a:	2300      	moveq	r3, #0
 800882c:	f003 0301 	andne.w	r3, r3, #1
 8008830:	b11b      	cbz	r3, 800883a <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8008832:	4b88      	ldr	r3, [pc, #544]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008834:	429d      	cmp	r5, r3
 8008836:	f040 81e0 	bne.w	8008bfa <HAL_DMAEx_MultiBufferStart_IT+0x7ae>
 800883a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800883e:	4b86      	ldr	r3, [pc, #536]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 8008840:	4986      	ldr	r1, [pc, #536]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008842:	4887      	ldr	r0, [pc, #540]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 8008844:	429d      	cmp	r5, r3
 8008846:	bf18      	it	ne
 8008848:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800884a:	f841 2c20 	str.w	r2, [r1, #-32]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800884e:	bf14      	ite	ne
 8008850:	2301      	movne	r3, #1
 8008852:	2300      	moveq	r3, #0
 8008854:	4285      	cmp	r5, r0
 8008856:	bf0c      	ite	eq
 8008858:	2300      	moveq	r3, #0
 800885a:	f003 0301 	andne.w	r3, r3, #1
 800885e:	b11b      	cbz	r3, 8008868 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 8008860:	4b7c      	ldr	r3, [pc, #496]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 8008862:	429d      	cmp	r5, r3
 8008864:	f040 8229 	bne.w	8008cba <HAL_DMAEx_MultiBufferStart_IT+0x86e>
 8008868:	2240      	movs	r2, #64	; 0x40
 800886a:	e6d7      	b.n	800861c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800886c:	3b48      	subs	r3, #72	; 0x48
 800886e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008872:	3218      	adds	r2, #24
 8008874:	429d      	cmp	r5, r3
 8008876:	bf18      	it	ne
 8008878:	428d      	cmpne	r5, r1
 800887a:	bf14      	ite	ne
 800887c:	2301      	movne	r3, #1
 800887e:	2300      	moveq	r3, #0
 8008880:	4295      	cmp	r5, r2
 8008882:	bf0c      	ite	eq
 8008884:	2300      	moveq	r3, #0
 8008886:	f003 0301 	andne.w	r3, r3, #1
 800888a:	b11b      	cbz	r3, 8008894 <HAL_DMAEx_MultiBufferStart_IT+0x448>
 800888c:	4b71      	ldr	r3, [pc, #452]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800888e:	429d      	cmp	r5, r3
 8008890:	f040 81cb 	bne.w	8008c2a <HAL_DMAEx_MultiBufferStart_IT+0x7de>
 8008894:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008898:	4b70      	ldr	r3, [pc, #448]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 800889a:	4a6f      	ldr	r2, [pc, #444]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 800889c:	4870      	ldr	r0, [pc, #448]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 800889e:	429d      	cmp	r5, r3
 80088a0:	bf18      	it	ne
 80088a2:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80088a4:	f5a2 6285 	sub.w	r2, r2, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80088a8:	bf14      	ite	ne
 80088aa:	2301      	movne	r3, #1
 80088ac:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80088ae:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80088b0:	4285      	cmp	r5, r0
 80088b2:	bf0c      	ite	eq
 80088b4:	2300      	moveq	r3, #0
 80088b6:	f003 0301 	andne.w	r3, r3, #1
 80088ba:	b11b      	cbz	r3, 80088c4 <HAL_DMAEx_MultiBufferStart_IT+0x478>
 80088bc:	4b65      	ldr	r3, [pc, #404]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80088be:	429d      	cmp	r5, r3
 80088c0:	f040 8183 	bne.w	8008bca <HAL_DMAEx_MultiBufferStart_IT+0x77e>
 80088c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80088c8:	4b63      	ldr	r3, [pc, #396]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80088ca:	4964      	ldr	r1, [pc, #400]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80088cc:	4864      	ldr	r0, [pc, #400]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80088ce:	429d      	cmp	r5, r3
 80088d0:	bf18      	it	ne
 80088d2:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80088d4:	f841 2c1c 	str.w	r2, [r1, #-28]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80088d8:	bf14      	ite	ne
 80088da:	2301      	movne	r3, #1
 80088dc:	2300      	moveq	r3, #0
 80088de:	4285      	cmp	r5, r0
 80088e0:	bf0c      	ite	eq
 80088e2:	2300      	moveq	r3, #0
 80088e4:	f003 0301 	andne.w	r3, r3, #1
 80088e8:	b11b      	cbz	r3, 80088f2 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
 80088ea:	4b5a      	ldr	r3, [pc, #360]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 80088ec:	429d      	cmp	r5, r3
 80088ee:	f040 81fa 	bne.w	8008ce6 <HAL_DMAEx_MultiBufferStart_IT+0x89a>
 80088f2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80088f6:	4b59      	ldr	r3, [pc, #356]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 80088f8:	4957      	ldr	r1, [pc, #348]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 80088fa:	4859      	ldr	r0, [pc, #356]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 80088fc:	429d      	cmp	r5, r3
 80088fe:	bf18      	it	ne
 8008900:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008902:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008906:	bf14      	ite	ne
 8008908:	2301      	movne	r3, #1
 800890a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800890c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800890e:	4285      	cmp	r5, r0
 8008910:	bf0c      	ite	eq
 8008912:	2300      	moveq	r3, #0
 8008914:	f003 0301 	andne.w	r3, r3, #1
 8008918:	b11b      	cbz	r3, 8008922 <HAL_DMAEx_MultiBufferStart_IT+0x4d6>
 800891a:	4b4e      	ldr	r3, [pc, #312]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800891c:	429d      	cmp	r5, r3
 800891e:	f040 81b4 	bne.w	8008c8a <HAL_DMAEx_MultiBufferStart_IT+0x83e>
 8008922:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008926:	4b4d      	ldr	r3, [pc, #308]	; (8008a5c <HAL_DMAEx_MultiBufferStart_IT+0x610>)
 8008928:	494b      	ldr	r1, [pc, #300]	; (8008a58 <HAL_DMAEx_MultiBufferStart_IT+0x60c>)
 800892a:	484d      	ldr	r0, [pc, #308]	; (8008a60 <HAL_DMAEx_MultiBufferStart_IT+0x614>)
 800892c:	429d      	cmp	r5, r3
 800892e:	bf18      	it	ne
 8008930:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008932:	f5a1 6185 	sub.w	r1, r1, #1064	; 0x428
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008936:	bf14      	ite	ne
 8008938:	2301      	movne	r3, #1
 800893a:	2300      	moveq	r3, #0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800893c:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800893e:	4285      	cmp	r5, r0
 8008940:	bf0c      	ite	eq
 8008942:	2300      	moveq	r3, #0
 8008944:	f003 0301 	andne.w	r3, r3, #1
 8008948:	b11b      	cbz	r3, 8008952 <HAL_DMAEx_MultiBufferStart_IT+0x506>
 800894a:	4b42      	ldr	r3, [pc, #264]	; (8008a54 <HAL_DMAEx_MultiBufferStart_IT+0x608>)
 800894c:	429d      	cmp	r5, r3
 800894e:	f040 81e0 	bne.w	8008d12 <HAL_DMAEx_MultiBufferStart_IT+0x8c6>
 8008952:	2240      	movs	r2, #64	; 0x40
 8008954:	e642      	b.n	80085dc <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008956:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800895a:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800895e:	3218      	adds	r2, #24
 8008960:	429d      	cmp	r5, r3
 8008962:	bf18      	it	ne
 8008964:	428d      	cmpne	r5, r1
 8008966:	bf14      	ite	ne
 8008968:	2301      	movne	r3, #1
 800896a:	2300      	moveq	r3, #0
 800896c:	4295      	cmp	r5, r2
 800896e:	bf0c      	ite	eq
 8008970:	2300      	moveq	r3, #0
 8008972:	f003 0301 	andne.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	f000 81f5 	beq.w	8008d66 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 800897c:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 800897e:	429d      	cmp	r5, r3
 8008980:	f000 81f1 	beq.w	8008d66 <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8008984:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008988:	4b37      	ldr	r3, [pc, #220]	; (8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 800898a:	4a38      	ldr	r2, [pc, #224]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 800898c:	4838      	ldr	r0, [pc, #224]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 800898e:	429d      	cmp	r5, r3
 8008990:	bf18      	it	ne
 8008992:	4295      	cmpne	r5, r2
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008994:	f842 1c34 	str.w	r1, [r2, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008998:	bf14      	ite	ne
 800899a:	2301      	movne	r3, #1
 800899c:	2300      	moveq	r3, #0
 800899e:	4285      	cmp	r5, r0
 80089a0:	bf0c      	ite	eq
 80089a2:	2300      	moveq	r3, #0
 80089a4:	f003 0301 	andne.w	r3, r3, #1
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 81d9 	beq.w	8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80089ae:	4b2d      	ldr	r3, [pc, #180]	; (8008a64 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 80089b0:	429d      	cmp	r5, r3
 80089b2:	f000 81d5 	beq.w	8008d60 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 80089b6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80089ba:	4b2b      	ldr	r3, [pc, #172]	; (8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 80089bc:	492b      	ldr	r1, [pc, #172]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 80089be:	482c      	ldr	r0, [pc, #176]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 80089c0:	429d      	cmp	r5, r3
 80089c2:	bf18      	it	ne
 80089c4:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80089c6:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80089ca:	bf14      	ite	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	2300      	moveq	r3, #0
 80089d0:	4285      	cmp	r5, r0
 80089d2:	bf0c      	ite	eq
 80089d4:	2300      	moveq	r3, #0
 80089d6:	f003 0301 	andne.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	f000 81b5 	beq.w	8008d4a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 80089e0:	4b20      	ldr	r3, [pc, #128]	; (8008a64 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 80089e2:	429d      	cmp	r5, r3
 80089e4:	f000 81b1 	beq.w	8008d4a <HAL_DMAEx_MultiBufferStart_IT+0x8fe>
 80089e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80089ec:	4b1e      	ldr	r3, [pc, #120]	; (8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 80089ee:	491f      	ldr	r1, [pc, #124]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 80089f0:	481f      	ldr	r0, [pc, #124]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 80089f2:	429d      	cmp	r5, r3
 80089f4:	bf18      	it	ne
 80089f6:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80089f8:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80089fc:	bf14      	ite	ne
 80089fe:	2301      	movne	r3, #1
 8008a00:	2300      	moveq	r3, #0
 8008a02:	4285      	cmp	r5, r0
 8008a04:	bf0c      	ite	eq
 8008a06:	2300      	moveq	r3, #0
 8008a08:	f003 0301 	andne.w	r3, r3, #1
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	f000 8199 	beq.w	8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8008a12:	4b14      	ldr	r3, [pc, #80]	; (8008a64 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8008a14:	429d      	cmp	r5, r3
 8008a16:	f000 8195 	beq.w	8008d44 <HAL_DMAEx_MultiBufferStart_IT+0x8f8>
 8008a1a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008a1e:	4b12      	ldr	r3, [pc, #72]	; (8008a68 <HAL_DMAEx_MultiBufferStart_IT+0x61c>)
 8008a20:	4912      	ldr	r1, [pc, #72]	; (8008a6c <HAL_DMAEx_MultiBufferStart_IT+0x620>)
 8008a22:	4813      	ldr	r0, [pc, #76]	; (8008a70 <HAL_DMAEx_MultiBufferStart_IT+0x624>)
 8008a24:	429d      	cmp	r5, r3
 8008a26:	bf18      	it	ne
 8008a28:	428d      	cmpne	r5, r1
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008a2a:	f841 2c34 	str.w	r2, [r1, #-52]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	4285      	cmp	r5, r0
 8008a36:	bf0c      	ite	eq
 8008a38:	2300      	moveq	r3, #0
 8008a3a:	f003 0301 	andne.w	r3, r3, #1
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	f000 817c 	beq.w	8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 8008a44:	4b07      	ldr	r3, [pc, #28]	; (8008a64 <HAL_DMAEx_MultiBufferStart_IT+0x618>)
 8008a46:	429d      	cmp	r5, r3
 8008a48:	f000 8178 	beq.w	8008d3c <HAL_DMAEx_MultiBufferStart_IT+0x8f0>
 8008a4c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008a50:	e552      	b.n	80084f8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
 8008a52:	bf00      	nop
 8008a54:	40026488 	.word	0x40026488
 8008a58:	40026428 	.word	0x40026428
 8008a5c:	40026028 	.word	0x40026028
 8008a60:	40026088 	.word	0x40026088
 8008a64:	400264a0 	.word	0x400264a0
 8008a68:	40026040 	.word	0x40026040
 8008a6c:	40026440 	.word	0x40026440
 8008a70:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008a74:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8008a78:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8008a7c:	3218      	adds	r2, #24
 8008a7e:	429d      	cmp	r5, r3
 8008a80:	bf18      	it	ne
 8008a82:	428d      	cmpne	r5, r1
 8008a84:	bf14      	ite	ne
 8008a86:	2301      	movne	r3, #1
 8008a88:	2300      	moveq	r3, #0
 8008a8a:	4295      	cmp	r5, r2
 8008a8c:	bf0c      	ite	eq
 8008a8e:	2300      	moveq	r3, #0
 8008a90:	f003 0301 	andne.w	r3, r3, #1
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	f000 816c 	beq.w	8008d72 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8008a9a:	4bad      	ldr	r3, [pc, #692]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008a9c:	429d      	cmp	r5, r3
 8008a9e:	f000 8168 	beq.w	8008d72 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 8008aa2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008aa6:	e5d2      	b.n	800864e <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008aa8:	4baa      	ldr	r3, [pc, #680]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008aaa:	49ab      	ldr	r1, [pc, #684]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008aac:	4aab      	ldr	r2, [pc, #684]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008aae:	429d      	cmp	r5, r3
 8008ab0:	bf18      	it	ne
 8008ab2:	428d      	cmpne	r5, r1
 8008ab4:	bf14      	ite	ne
 8008ab6:	2301      	movne	r3, #1
 8008ab8:	2300      	moveq	r3, #0
 8008aba:	4295      	cmp	r5, r2
 8008abc:	bf0c      	ite	eq
 8008abe:	2300      	moveq	r3, #0
 8008ac0:	f003 0301 	andne.w	r3, r3, #1
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	f000 815a 	beq.w	8008d7e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8008aca:	4ba1      	ldr	r3, [pc, #644]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008acc:	429d      	cmp	r5, r3
 8008ace:	f000 8156 	beq.w	8008d7e <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8008ad2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008ad6:	e5d1      	b.n	800867c <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008ad8:	4b9f      	ldr	r3, [pc, #636]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008ada:	499e      	ldr	r1, [pc, #632]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008adc:	4a9f      	ldr	r2, [pc, #636]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008ade:	429d      	cmp	r5, r3
 8008ae0:	bf18      	it	ne
 8008ae2:	428d      	cmpne	r5, r1
 8008ae4:	bf14      	ite	ne
 8008ae6:	2301      	movne	r3, #1
 8008ae8:	2300      	moveq	r3, #0
 8008aea:	4295      	cmp	r5, r2
 8008aec:	bf0c      	ite	eq
 8008aee:	2300      	moveq	r3, #0
 8008af0:	f003 0301 	andne.w	r3, r3, #1
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	f000 813f 	beq.w	8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8008afa:	4b95      	ldr	r3, [pc, #596]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008afc:	429d      	cmp	r5, r3
 8008afe:	f000 813b 	beq.w	8008d78 <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8008b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008b06:	e5e7      	b.n	80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008b08:	4b93      	ldr	r3, [pc, #588]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008b0a:	4992      	ldr	r1, [pc, #584]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008b0c:	4a93      	ldr	r2, [pc, #588]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008b0e:	429d      	cmp	r5, r3
 8008b10:	bf18      	it	ne
 8008b12:	428d      	cmpne	r5, r1
 8008b14:	bf14      	ite	ne
 8008b16:	2301      	movne	r3, #1
 8008b18:	2300      	moveq	r3, #0
 8008b1a:	4295      	cmp	r5, r2
 8008b1c:	bf0c      	ite	eq
 8008b1e:	2300      	moveq	r3, #0
 8008b20:	f003 0301 	andne.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f000 812d 	beq.w	8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8008b2a:	4b89      	ldr	r3, [pc, #548]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008b2c:	429d      	cmp	r5, r3
 8008b2e:	f000 8129 	beq.w	8008d84 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8008b32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008b36:	e5b8      	b.n	80086aa <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008b38:	4b87      	ldr	r3, [pc, #540]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008b3a:	4986      	ldr	r1, [pc, #536]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008b3c:	4a87      	ldr	r2, [pc, #540]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008b3e:	429d      	cmp	r5, r3
 8008b40:	bf18      	it	ne
 8008b42:	428d      	cmpne	r5, r1
 8008b44:	bf14      	ite	ne
 8008b46:	2301      	movne	r3, #1
 8008b48:	2300      	moveq	r3, #0
 8008b4a:	4295      	cmp	r5, r2
 8008b4c:	bf0c      	ite	eq
 8008b4e:	2300      	moveq	r3, #0
 8008b50:	f003 0301 	andne.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	f000 8109 	beq.w	8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8008b5a:	4b7d      	ldr	r3, [pc, #500]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008b5c:	429d      	cmp	r5, r3
 8008b5e:	f000 8105 	beq.w	8008d6c <HAL_DMAEx_MultiBufferStart_IT+0x920>
 8008b62:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008b66:	e50b      	b.n	8008580 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008b68:	3b48      	subs	r3, #72	; 0x48
 8008b6a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8008b6e:	3218      	adds	r2, #24
 8008b70:	429d      	cmp	r5, r3
 8008b72:	bf18      	it	ne
 8008b74:	428d      	cmpne	r5, r1
 8008b76:	bf14      	ite	ne
 8008b78:	2301      	movne	r3, #1
 8008b7a:	2300      	moveq	r3, #0
 8008b7c:	4295      	cmp	r5, r2
 8008b7e:	bf0c      	ite	eq
 8008b80:	2300      	moveq	r3, #0
 8008b82:	f003 0301 	andne.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 8111 	beq.w	8008dae <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8008b8c:	4b70      	ldr	r3, [pc, #448]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008b8e:	429d      	cmp	r5, r3
 8008b90:	f000 810d 	beq.w	8008dae <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8008b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008b98:	e60b      	b.n	80087b2 <HAL_DMAEx_MultiBufferStart_IT+0x366>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008b9a:	4b6f      	ldr	r3, [pc, #444]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008b9c:	496d      	ldr	r1, [pc, #436]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008b9e:	4a6f      	ldr	r2, [pc, #444]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008ba0:	429d      	cmp	r5, r3
 8008ba2:	bf18      	it	ne
 8008ba4:	428d      	cmpne	r5, r1
 8008ba6:	bf14      	ite	ne
 8008ba8:	2301      	movne	r3, #1
 8008baa:	2300      	moveq	r3, #0
 8008bac:	4295      	cmp	r5, r2
 8008bae:	bf0c      	ite	eq
 8008bb0:	2300      	moveq	r3, #0
 8008bb2:	f003 0301 	andne.w	r3, r3, #1
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	f000 80ed 	beq.w	8008d96 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8008bbc:	4b64      	ldr	r3, [pc, #400]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008bbe:	429d      	cmp	r5, r3
 8008bc0:	f000 80e9 	beq.w	8008d96 <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8008bc4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008bc8:	e60a      	b.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x394>
 8008bca:	4b62      	ldr	r3, [pc, #392]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008bcc:	4962      	ldr	r1, [pc, #392]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008bce:	4a63      	ldr	r2, [pc, #396]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008bd0:	429d      	cmp	r5, r3
 8008bd2:	bf18      	it	ne
 8008bd4:	428d      	cmpne	r5, r1
 8008bd6:	bf14      	ite	ne
 8008bd8:	2301      	movne	r3, #1
 8008bda:	2300      	moveq	r3, #0
 8008bdc:	4295      	cmp	r5, r2
 8008bde:	bf0c      	ite	eq
 8008be0:	2300      	moveq	r3, #0
 8008be2:	f003 0301 	andne.w	r3, r3, #1
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	f000 80e7 	beq.w	8008dba <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8008bec:	4b58      	ldr	r3, [pc, #352]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008bee:	429d      	cmp	r5, r3
 8008bf0:	f000 80e3 	beq.w	8008dba <HAL_DMAEx_MultiBufferStart_IT+0x96e>
 8008bf4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008bf8:	e666      	b.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008bfa:	4b56      	ldr	r3, [pc, #344]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008bfc:	4956      	ldr	r1, [pc, #344]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008bfe:	4a57      	ldr	r2, [pc, #348]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008c00:	429d      	cmp	r5, r3
 8008c02:	bf18      	it	ne
 8008c04:	428d      	cmpne	r5, r1
 8008c06:	bf14      	ite	ne
 8008c08:	2301      	movne	r3, #1
 8008c0a:	2300      	moveq	r3, #0
 8008c0c:	4295      	cmp	r5, r2
 8008c0e:	bf0c      	ite	eq
 8008c10:	2300      	moveq	r3, #0
 8008c12:	f003 0301 	andne.w	r3, r3, #1
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	f000 80ba 	beq.w	8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8008c1c:	4b4c      	ldr	r3, [pc, #304]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008c1e:	429d      	cmp	r5, r3
 8008c20:	f000 80b6 	beq.w	8008d90 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8008c24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008c28:	e609      	b.n	800883e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008c2a:	3b48      	subs	r3, #72	; 0x48
 8008c2c:	3118      	adds	r1, #24
 8008c2e:	3218      	adds	r2, #24
 8008c30:	429d      	cmp	r5, r3
 8008c32:	bf18      	it	ne
 8008c34:	428d      	cmpne	r5, r1
 8008c36:	bf14      	ite	ne
 8008c38:	2301      	movne	r3, #1
 8008c3a:	2300      	moveq	r3, #0
 8008c3c:	4295      	cmp	r5, r2
 8008c3e:	bf0c      	ite	eq
 8008c40:	2300      	moveq	r3, #0
 8008c42:	f003 0301 	andne.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80b4 	beq.w	8008db4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8008c4c:	4b40      	ldr	r3, [pc, #256]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008c4e:	429d      	cmp	r5, r3
 8008c50:	f000 80b0 	beq.w	8008db4 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8008c54:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8008c58:	e61e      	b.n	8008898 <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008c5a:	4b3f      	ldr	r3, [pc, #252]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008c5c:	493d      	ldr	r1, [pc, #244]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008c5e:	4a3f      	ldr	r2, [pc, #252]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008c60:	429d      	cmp	r5, r3
 8008c62:	bf18      	it	ne
 8008c64:	428d      	cmpne	r5, r1
 8008c66:	bf14      	ite	ne
 8008c68:	2301      	movne	r3, #1
 8008c6a:	2300      	moveq	r3, #0
 8008c6c:	4295      	cmp	r5, r2
 8008c6e:	bf0c      	ite	eq
 8008c70:	2300      	moveq	r3, #0
 8008c72:	f003 0301 	andne.w	r3, r3, #1
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f000 8093 	beq.w	8008da2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8008c7c:	4b34      	ldr	r3, [pc, #208]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008c7e:	429d      	cmp	r5, r3
 8008c80:	f000 808f 	beq.w	8008da2 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8008c84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008c88:	e5c1      	b.n	800880e <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008c8a:	4b32      	ldr	r3, [pc, #200]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008c8c:	4932      	ldr	r1, [pc, #200]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008c8e:	4a33      	ldr	r2, [pc, #204]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008c90:	429d      	cmp	r5, r3
 8008c92:	bf18      	it	ne
 8008c94:	428d      	cmpne	r5, r1
 8008c96:	bf14      	ite	ne
 8008c98:	2301      	movne	r3, #1
 8008c9a:	2300      	moveq	r3, #0
 8008c9c:	4295      	cmp	r5, r2
 8008c9e:	bf0c      	ite	eq
 8008ca0:	2300      	moveq	r3, #0
 8008ca2:	f003 0301 	andne.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	f000 808a 	beq.w	8008dc0 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8008cac:	4b28      	ldr	r3, [pc, #160]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008cae:	429d      	cmp	r5, r3
 8008cb0:	f000 8086 	beq.w	8008dc0 <HAL_DMAEx_MultiBufferStart_IT+0x974>
 8008cb4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008cb8:	e635      	b.n	8008926 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008cba:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008cbc:	4925      	ldr	r1, [pc, #148]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008cbe:	4a27      	ldr	r2, [pc, #156]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008cc0:	429d      	cmp	r5, r3
 8008cc2:	bf18      	it	ne
 8008cc4:	428d      	cmpne	r5, r1
 8008cc6:	bf14      	ite	ne
 8008cc8:	2301      	movne	r3, #1
 8008cca:	2300      	moveq	r3, #0
 8008ccc:	4295      	cmp	r5, r2
 8008cce:	bf0c      	ite	eq
 8008cd0:	2300      	moveq	r3, #0
 8008cd2:	f003 0301 	andne.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d060      	beq.n	8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008cda:	4b1d      	ldr	r3, [pc, #116]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008cdc:	429d      	cmp	r5, r3
 8008cde:	d05d      	beq.n	8008d9c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8008ce0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008ce4:	e49a      	b.n	800861c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008ce6:	4b1c      	ldr	r3, [pc, #112]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008ce8:	491a      	ldr	r1, [pc, #104]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008cea:	4a1c      	ldr	r2, [pc, #112]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008cec:	429d      	cmp	r5, r3
 8008cee:	bf18      	it	ne
 8008cf0:	428d      	cmpne	r5, r1
 8008cf2:	bf14      	ite	ne
 8008cf4:	2301      	movne	r3, #1
 8008cf6:	2300      	moveq	r3, #0
 8008cf8:	4295      	cmp	r5, r2
 8008cfa:	bf0c      	ite	eq
 8008cfc:	2300      	moveq	r3, #0
 8008cfe:	f003 0301 	andne.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d050      	beq.n	8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8008d06:	4b12      	ldr	r3, [pc, #72]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008d08:	429d      	cmp	r5, r3
 8008d0a:	d04d      	beq.n	8008da8 <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8008d0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008d10:	e5f1      	b.n	80088f6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d12:	4b11      	ldr	r3, [pc, #68]	; (8008d58 <HAL_DMAEx_MultiBufferStart_IT+0x90c>)
 8008d14:	490f      	ldr	r1, [pc, #60]	; (8008d54 <HAL_DMAEx_MultiBufferStart_IT+0x908>)
 8008d16:	4a11      	ldr	r2, [pc, #68]	; (8008d5c <HAL_DMAEx_MultiBufferStart_IT+0x910>)
 8008d18:	429d      	cmp	r5, r3
 8008d1a:	bf18      	it	ne
 8008d1c:	428d      	cmpne	r5, r1
 8008d1e:	bf14      	ite	ne
 8008d20:	2301      	movne	r3, #1
 8008d22:	2300      	moveq	r3, #0
 8008d24:	4295      	cmp	r5, r2
 8008d26:	bf0c      	ite	eq
 8008d28:	2300      	moveq	r3, #0
 8008d2a:	f003 0301 	andne.w	r3, r3, #1
 8008d2e:	b363      	cbz	r3, 8008d8a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8008d30:	4b07      	ldr	r3, [pc, #28]	; (8008d50 <HAL_DMAEx_MultiBufferStart_IT+0x904>)
 8008d32:	429d      	cmp	r5, r3
 8008d34:	d029      	beq.n	8008d8a <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8008d36:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008d3a:	e44f      	b.n	80085dc <HAL_DMAEx_MultiBufferStart_IT+0x190>
 8008d3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008d40:	f7ff bbda 	b.w	80084f8 <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d44:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008d48:	e669      	b.n	8008a1e <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d4a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d4e:	e64d      	b.n	80089ec <HAL_DMAEx_MultiBufferStart_IT+0x5a0>
 8008d50:	400264a0 	.word	0x400264a0
 8008d54:	40026440 	.word	0x40026440
 8008d58:	40026040 	.word	0x40026040
 8008d5c:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d64:	e629      	b.n	80089ba <HAL_DMAEx_MultiBufferStart_IT+0x56e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d6a:	e60d      	b.n	8008988 <HAL_DMAEx_MultiBufferStart_IT+0x53c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d6c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008d70:	e406      	b.n	8008580 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008d72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d76:	e46a      	b.n	800864e <HAL_DMAEx_MultiBufferStart_IT+0x202>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008d7c:	e4ac      	b.n	80086d8 <HAL_DMAEx_MultiBufferStart_IT+0x28c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d82:	e47b      	b.n	800867c <HAL_DMAEx_MultiBufferStart_IT+0x230>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008d84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008d88:	e48f      	b.n	80086aa <HAL_DMAEx_MultiBufferStart_IT+0x25e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008d8e:	e425      	b.n	80085dc <HAL_DMAEx_MultiBufferStart_IT+0x190>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008d90:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008d94:	e553      	b.n	800883e <HAL_DMAEx_MultiBufferStart_IT+0x3f2>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008d96:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008d9a:	e521      	b.n	80087e0 <HAL_DMAEx_MultiBufferStart_IT+0x394>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8008d9c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008da0:	e43c      	b.n	800861c <HAL_DMAEx_MultiBufferStart_IT+0x1d0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8008da2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008da6:	e532      	b.n	800880e <HAL_DMAEx_MultiBufferStart_IT+0x3c2>
 8008da8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008dac:	e5a3      	b.n	80088f6 <HAL_DMAEx_MultiBufferStart_IT+0x4aa>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8008dae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008db2:	e4fe      	b.n	80087b2 <HAL_DMAEx_MultiBufferStart_IT+0x366>
 8008db4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008db8:	e56e      	b.n	8008898 <HAL_DMAEx_MultiBufferStart_IT+0x44c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8008dba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008dbe:	e583      	b.n	80088c8 <HAL_DMAEx_MultiBufferStart_IT+0x47c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8008dc0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008dc4:	e5af      	b.n	8008926 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8008dc6:	bf00      	nop

08008dc8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8008dc8:	b530      	push	{r4, r5, lr}
  __IO uint32_t tmpreg = 0;
 8008dca:	2300      	movs	r3, #0
{
 8008dcc:	b083      	sub	sp, #12
 8008dce:	4605      	mov	r5, r0
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008dd0:	f241 0418 	movw	r4, #4120	; 0x1018
  __IO uint32_t tmpreg = 0;
 8008dd4:	9301      	str	r3, [sp, #4]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008dd6:	2001      	movs	r0, #1
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8008dd8:	682b      	ldr	r3, [r5, #0]
 8008dda:	591a      	ldr	r2, [r3, r4]
 8008ddc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008de0:	511a      	str	r2, [r3, r4]
  tmpreg = (heth->Instance)->DMAOMR;
 8008de2:	591b      	ldr	r3, [r3, r4]
 8008de4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008de6:	f7fd ffb7 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8008dea:	682b      	ldr	r3, [r5, #0]
 8008dec:	9a01      	ldr	r2, [sp, #4]
 8008dee:	511a      	str	r2, [r3, r4]
}
 8008df0:	b003      	add	sp, #12
 8008df2:	bd30      	pop	{r4, r5, pc}

08008df4 <ETH_MACDMAConfig>:
{
 8008df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008df6:	4604      	mov	r4, r0
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8008df8:	2900      	cmp	r1, #0
 8008dfa:	d15e      	bne.n	8008eba <ETH_MACDMAConfig+0xc6>
 8008dfc:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8008e00:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008e02:	69e3      	ldr	r3, [r4, #28]
 8008e04:	b90b      	cbnz	r3, 8008e0a <ETH_MACDMAConfig+0x16>
 8008e06:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8008e0a:	6822      	ldr	r2, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e0c:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008e0e:	4b2f      	ldr	r3, [pc, #188]	; (8008ecc <ETH_MACDMAConfig+0xd8>)
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008e10:	2600      	movs	r6, #0
  tmpreg = (heth->Instance)->MACCR;
 8008e12:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8008e14:	402b      	ands	r3, r5
    tmpreg = (heth->Instance)->DMAOMR;
 8008e16:	f241 0518 	movw	r5, #4120	; 0x1018
 8008e1a:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8008e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8008e20:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8008e22:	6817      	ldr	r7, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e24:	f7fd ff98 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8008e28:	6823      	ldr	r3, [r4, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008e2a:	2240      	movs	r2, #64	; 0x40
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e2c:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8008e2e:	601f      	str	r7, [r3, #0]
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8008e30:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8008e32:	685f      	ldr	r7, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e34:	f7fd ff90 	bl	8006d58 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8008e38:	6823      	ldr	r3, [r4, #0]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008e3a:	f64f 7141 	movw	r1, #65345	; 0xff41
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e3e:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8008e40:	605f      	str	r7, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8008e42:	609e      	str	r6, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8008e44:	60de      	str	r6, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8008e46:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8008e48:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8008e4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8008e4e:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8008e50:	699f      	ldr	r7, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e52:	f7fd ff81 	bl	8006d58 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8008e56:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e58:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8008e5a:	619f      	str	r7, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8008e5c:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8008e5e:	69de      	ldr	r6, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e60:	f7fd ff7a 	bl	8006d58 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8008e64:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e66:	2001      	movs	r0, #1
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8008e68:	4919      	ldr	r1, [pc, #100]	; (8008ed0 <ETH_MACDMAConfig+0xdc>)
    (heth->Instance)->MACVLANTR = tmpreg;
 8008e6a:	61de      	str	r6, [r3, #28]
    tmpreg = (heth->Instance)->DMAOMR;
 8008e6c:	595a      	ldr	r2, [r3, r5]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8008e6e:	4011      	ands	r1, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8008e70:	4a18      	ldr	r2, [pc, #96]	; (8008ed4 <ETH_MACDMAConfig+0xe0>)
 8008e72:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8008e74:	515a      	str	r2, [r3, r5]
    tmpreg = (heth->Instance)->DMAOMR;
 8008e76:	595e      	ldr	r6, [r3, r5]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e78:	f7fd ff6e 	bl	8006d58 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8008e7c:	6823      	ldr	r3, [r4, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e7e:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008e80:	4a15      	ldr	r2, [pc, #84]	; (8008ed8 <ETH_MACDMAConfig+0xe4>)
    (heth->Instance)->DMAOMR = tmpreg;
 8008e82:	515e      	str	r6, [r3, r5]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8008e84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e88:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8008e8a:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008e8c:	f7fd ff64 	bl	8006d58 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8008e90:	6823      	ldr	r3, [r4, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008e92:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8008e94:	f503 5180 	add.w	r1, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008e98:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8008e9a:	600d      	str	r5, [r1, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008e9c:	d105      	bne.n	8008eaa <ETH_MACDMAConfig+0xb6>
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8008e9e:	f241 011c 	movw	r1, #4124	; 0x101c
 8008ea2:	4a0e      	ldr	r2, [pc, #56]	; (8008edc <ETH_MACDMAConfig+0xe8>)
 8008ea4:	5858      	ldr	r0, [r3, r1]
 8008ea6:	4302      	orrs	r2, r0
 8008ea8:	505a      	str	r2, [r3, r1]
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8008eaa:	6963      	ldr	r3, [r4, #20]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8008eac:	490c      	ldr	r1, [pc, #48]	; (8008ee0 <ETH_MACDMAConfig+0xec>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8008eae:	8898      	ldrh	r0, [r3, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8008eb0:	4a0c      	ldr	r2, [pc, #48]	; (8008ee4 <ETH_MACDMAConfig+0xf0>)
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8008eb2:	6008      	str	r0, [r1, #0]
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8008eb4:	681b      	ldr	r3, [r3, #0]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8008eb6:	6013      	str	r3, [r2, #0]
}
 8008eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8008eba:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8008ebe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ec2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8008ec6:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8008eca:	e79a      	b.n	8008e02 <ETH_MACDMAConfig+0xe>
 8008ecc:	ff20810f 	.word	0xff20810f
 8008ed0:	f8de3f23 	.word	0xf8de3f23
 8008ed4:	02200004 	.word	0x02200004
 8008ed8:	02c12080 	.word	0x02c12080
 8008edc:	00010040 	.word	0x00010040
 8008ee0:	40028040 	.word	0x40028040
 8008ee4:	40028044 	.word	0x40028044

08008ee8 <HAL_ETH_DMATxDescListInit>:
{
 8008ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008eec:	469e      	mov	lr, r3
  __HAL_LOCK(heth);
 8008eee:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d045      	beq.n	8008f82 <HAL_ETH_DMATxDescListInit+0x9a>
 8008ef6:	4680      	mov	r8, r0
  heth->State = HAL_ETH_STATE_BUSY;
 8008ef8:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8008efa:	2001      	movs	r0, #1
  heth->TxDesc = DMATxDescTab;
 8008efc:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8008f00:	f888 0045 	strb.w	r0, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008f04:	f888 3044 	strb.w	r3, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8008f08:	f1be 0f00 	cmp.w	lr, #0
 8008f0c:	d02b      	beq.n	8008f66 <HAL_ETH_DMATxDescListInit+0x7e>
 8008f0e:	f8d8 a01c 	ldr.w	sl, [r8, #28]
 8008f12:	f10e 39ff 	add.w	r9, lr, #4294967295
 8008f16:	460c      	mov	r4, r1
 8008f18:	2500      	movs	r5, #0
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008f1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8008f1e:	e009      	b.n	8008f34 <HAL_ETH_DMATxDescListInit+0x4c>
 8008f20:	f105 0c01 	add.w	ip, r5, #1
 8008f24:	4637      	mov	r7, r6
 8008f26:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
  for(i=0; i < TxBuffCount; i++)
 8008f2a:	45e6      	cmp	lr, ip
 8008f2c:	60e7      	str	r7, [r4, #12]
 8008f2e:	4665      	mov	r5, ip
 8008f30:	4634      	mov	r4, r6
 8008f32:	d918      	bls.n	8008f66 <HAL_ETH_DMATxDescListInit+0x7e>
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8008f34:	f104 0620 	add.w	r6, r4, #32
 8008f38:	f105 0c01 	add.w	ip, r5, #1
 8008f3c:	460f      	mov	r7, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8008f3e:	6020      	str	r0, [r4, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8008f40:	60a2      	str	r2, [r4, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8008f42:	f1ba 0f00 	cmp.w	sl, #0
 8008f46:	d103      	bne.n	8008f50 <HAL_ETH_DMATxDescListInit+0x68>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8008f48:	6823      	ldr	r3, [r4, #0]
 8008f4a:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8008f4e:	6023      	str	r3, [r4, #0]
    if(i < (TxBuffCount-1))
 8008f50:	45a9      	cmp	r9, r5
 8008f52:	d8e5      	bhi.n	8008f20 <HAL_ETH_DMATxDescListInit+0x38>
 8008f54:	f104 0620 	add.w	r6, r4, #32
  for(i=0; i < TxBuffCount; i++)
 8008f58:	45e6      	cmp	lr, ip
 8008f5a:	60e7      	str	r7, [r4, #12]
 8008f5c:	4665      	mov	r5, ip
 8008f5e:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8008f62:	4634      	mov	r4, r6
 8008f64:	d8e6      	bhi.n	8008f34 <HAL_ETH_DMATxDescListInit+0x4c>
  __HAL_UNLOCK(heth);
 8008f66:	2300      	movs	r3, #0
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008f68:	f8d8 4000 	ldr.w	r4, [r8]
 8008f6c:	f241 0010 	movw	r0, #4112	; 0x1010
  heth->State= HAL_ETH_STATE_READY;
 8008f70:	2201      	movs	r2, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8008f72:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 8008f74:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008f76:	f888 2044 	strb.w	r2, [r8, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008f7a:	f888 3045 	strb.w	r3, [r8, #69]	; 0x45
}
 8008f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 8008f82:	2002      	movs	r0, #2
}
 8008f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008f88 <HAL_ETH_DMARxDescListInit>:
{
 8008f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f8c:	4686      	mov	lr, r0
  __HAL_LOCK(heth);
 8008f8e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8008f92:	2801      	cmp	r0, #1
 8008f94:	d033      	beq.n	8008ffe <HAL_ETH_DMARxDescListInit+0x76>
 8008f96:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8008f98:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 8008f9a:	f8ce 1028 	str.w	r1, [lr, #40]	; 0x28
  __HAL_LOCK(heth);
 8008f9e:	f88e 4045 	strb.w	r4, [lr, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8008fa2:	f88e 0044 	strb.w	r0, [lr, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8008fa6:	b1e3      	cbz	r3, 8008fe2 <HAL_ETH_DMARxDescListInit+0x5a>
 8008fa8:	f103 39ff 	add.w	r9, r3, #4294967295
 8008fac:	460c      	mov	r4, r1
 8008fae:	2500      	movs	r5, #0
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8008fb0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008fb4:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 8008fb8:	45a9      	cmp	r9, r5
 8008fba:	f104 0620 	add.w	r6, r4, #32
 8008fbe:	f105 0c01 	add.w	ip, r5, #1
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8008fc2:	460f      	mov	r7, r1
 8008fc4:	bf94      	ite	ls
 8008fc6:	f104 0620 	addls.w	r6, r4, #32
 8008fca:	4637      	movhi	r7, r6
  for(i=0; i < RxBuffCount; i++)
 8008fcc:	4563      	cmp	r3, ip
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8008fce:	60a2      	str	r2, [r4, #8]
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8008fd0:	f8c4 8000 	str.w	r8, [r4]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008fd4:	4665      	mov	r5, ip
 8008fd6:	6060      	str	r0, [r4, #4]
    if(i < (RxBuffCount-1))
 8008fd8:	f202 52f4 	addw	r2, r2, #1524	; 0x5f4
 8008fdc:	60e7      	str	r7, [r4, #12]
  for(i=0; i < RxBuffCount; i++)
 8008fde:	4634      	mov	r4, r6
 8008fe0:	d8ea      	bhi.n	8008fb8 <HAL_ETH_DMARxDescListInit+0x30>
  __HAL_UNLOCK(heth);
 8008fe2:	2300      	movs	r3, #0
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008fe4:	f8de 4000 	ldr.w	r4, [lr]
 8008fe8:	f241 000c 	movw	r0, #4108	; 0x100c
  heth->State= HAL_ETH_STATE_READY;
 8008fec:	2201      	movs	r2, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8008fee:	5021      	str	r1, [r4, r0]
  return HAL_OK;
 8008ff0:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 8008ff2:	f88e 2044 	strb.w	r2, [lr, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8008ff6:	f88e 3045 	strb.w	r3, [lr, #69]	; 0x45
}
 8008ffa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(heth);
 8008ffe:	2002      	movs	r0, #2
}
 8009000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08009004 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009004:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009008:	2b01      	cmp	r3, #1
 800900a:	d074      	beq.n	80090f6 <HAL_ETH_TransmitFrame+0xf2>
 800900c:	4602      	mov	r2, r0
  heth->State = HAL_ETH_STATE_BUSY;
 800900e:	2302      	movs	r3, #2
  __HAL_LOCK(heth);
 8009010:	2001      	movs	r0, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009012:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_LOCK(heth);
 8009016:	f882 0045 	strb.w	r0, [r2, #69]	; 0x45
  if (FrameLength == 0) 
 800901a:	2900      	cmp	r1, #0
 800901c:	d038      	beq.n	8009090 <HAL_ETH_TransmitFrame+0x8c>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800901e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
{
 8009020:	b4f0      	push	{r4, r5, r6, r7}
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009022:	681c      	ldr	r4, [r3, #0]
 8009024:	2c00      	cmp	r4, #0
 8009026:	db5c      	blt.n	80090e2 <HAL_ETH_TransmitFrame+0xde>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009028:	f240 50f4 	movw	r0, #1524	; 0x5f4
 800902c:	4281      	cmp	r1, r0
 800902e:	d936      	bls.n	800909e <HAL_ETH_TransmitFrame+0x9a>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009030:	4d32      	ldr	r5, [pc, #200]	; (80090fc <HAL_ETH_TransmitFrame+0xf8>)
 8009032:	fba5 4501 	umull	r4, r5, r5, r1
 8009036:	0aad      	lsrs	r5, r5, #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8009038:	fb00 1015 	mls	r0, r0, r5, r1
 800903c:	b368      	cbz	r0, 800909a <HAL_ETH_TransmitFrame+0x96>
      bufcount++;
 800903e:	3501      	adds	r5, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009040:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
 8009044:	4c2e      	ldr	r4, [pc, #184]	; (8009100 <HAL_ETH_TransmitFrame+0xfc>)
    for (i=0; i< bufcount; i++)
 8009046:	2000      	movs	r0, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009048:	f240 56f4 	movw	r6, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 800904c:	fb04 1105 	mla	r1, r4, r5, r1
      if (i == (bufcount-1))
 8009050:	1e6f      	subs	r7, r5, #1
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009052:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8009056:	e00f      	b.n	8009078 <HAL_ETH_TransmitFrame+0x74>
      if (i == (bufcount-1))
 8009058:	4287      	cmp	r7, r0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800905a:	605e      	str	r6, [r3, #4]
      if (i == (bufcount-1))
 800905c:	d104      	bne.n	8009068 <HAL_ETH_TransmitFrame+0x64>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800905e:	681c      	ldr	r4, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009060:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009062:	f044 5400 	orr.w	r4, r4, #536870912	; 0x20000000
 8009066:	601c      	str	r4, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009068:	681c      	ldr	r4, [r3, #0]
    for (i=0; i< bufcount; i++)
 800906a:	3001      	adds	r0, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800906c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8009070:	42a8      	cmp	r0, r5
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009072:	601c      	str	r4, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009074:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8009076:	d03c      	beq.n	80090f2 <HAL_ETH_TransmitFrame+0xee>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009078:	681c      	ldr	r4, [r3, #0]
 800907a:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 800907e:	601c      	str	r4, [r3, #0]
      if (i == 0) 
 8009080:	2800      	cmp	r0, #0
 8009082:	d1e9      	bne.n	8009058 <HAL_ETH_TransmitFrame+0x54>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009084:	681c      	ldr	r4, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009086:	605e      	str	r6, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009088:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 800908c:	601c      	str	r4, [r3, #0]
      if (i == (bufcount-1))
 800908e:	e7eb      	b.n	8009068 <HAL_ETH_TransmitFrame+0x64>
    heth->State = HAL_ETH_STATE_READY;
 8009090:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009094:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8009098:	4770      	bx	lr
  if (bufcount == 1)
 800909a:	2d01      	cmp	r5, #1
 800909c:	d1d0      	bne.n	8009040 <HAL_ETH_TransmitFrame+0x3c>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800909e:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80090a0:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80090a4:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80090a6:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80090aa:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80090ac:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80090ae:	6819      	ldr	r1, [r3, #0]
 80090b0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80090b4:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80090b6:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80090b8:	6813      	ldr	r3, [r2, #0]
 80090ba:	f241 0114 	movw	r1, #4116	; 0x1014
 80090be:	5858      	ldr	r0, [r3, r1]
 80090c0:	0740      	lsls	r0, r0, #29
 80090c2:	d505      	bpl.n	80090d0 <HAL_ETH_TransmitFrame+0xcc>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80090c4:	2504      	movs	r5, #4
    (heth->Instance)->DMATPDR = 0;
 80090c6:	f241 0004 	movw	r0, #4100	; 0x1004
 80090ca:	2400      	movs	r4, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80090cc:	505d      	str	r5, [r3, r1]
    (heth->Instance)->DMATPDR = 0;
 80090ce:	501c      	str	r4, [r3, r0]
  __HAL_UNLOCK(heth);
 80090d0:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 80090d2:	2101      	movs	r1, #1
  return HAL_OK;
 80090d4:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 80090d6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80090da:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80090de:	bcf0      	pop	{r4, r5, r6, r7}
 80090e0:	4770      	bx	lr
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80090e2:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 80090e4:	2300      	movs	r3, #0
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80090e6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80090ea:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 80090ee:	bcf0      	pop	{r4, r5, r6, r7}
 80090f0:	4770      	bx	lr
 80090f2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80090f4:	e7e0      	b.n	80090b8 <HAL_ETH_TransmitFrame+0xb4>
  __HAL_LOCK(heth);
 80090f6:	2002      	movs	r0, #2
}
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	ac02b00b 	.word	0xac02b00b
 8009100:	fffffa0c 	.word	0xfffffa0c

08009104 <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8009104:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009108:	2b01      	cmp	r3, #1
 800910a:	d02f      	beq.n	800916c <HAL_ETH_GetReceivedFrame_IT+0x68>
 800910c:	4602      	mov	r2, r0
 800910e:	2101      	movs	r1, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009110:	2002      	movs	r0, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009112:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
 8009114:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(heth);
 8009116:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 800911a:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800911e:	6818      	ldr	r0, [r3, #0]
 8009120:	2800      	cmp	r0, #0
 8009122:	db16      	blt.n	8009152 <HAL_ETH_GetReceivedFrame_IT+0x4e>
      heth->RxFrameInfos.SegCount = 1;   
 8009124:	460c      	mov	r4, r1
  uint32_t descriptorscancounter = 0;
 8009126:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009128:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 800912a:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800912c:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8009130:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009134:	d015      	beq.n	8009162 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009136:	6819      	ldr	r1, [r3, #0]
 8009138:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 800913c:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800913e:	d117      	bne.n	8009170 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009140:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8009142:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009144:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8009146:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009148:	6819      	ldr	r1, [r3, #0]
 800914a:	2900      	cmp	r1, #0
 800914c:	db01      	blt.n	8009152 <HAL_ETH_GetReceivedFrame_IT+0x4e>
 800914e:	2804      	cmp	r0, #4
 8009150:	d1ea      	bne.n	8009128 <HAL_ETH_GetReceivedFrame_IT+0x24>
  heth->State = HAL_ETH_STATE_READY;
 8009152:	2001      	movs	r0, #1
  __HAL_UNLOCK(heth);
 8009154:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8009156:	f882 0044 	strb.w	r0, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800915a:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 800915e:	bc70      	pop	{r4, r5, r6}
 8009160:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8009162:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009164:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 8009166:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009168:	6293      	str	r3, [r2, #40]	; 0x28
 800916a:	e7ed      	b.n	8009148 <HAL_ETH_GetReceivedFrame_IT+0x44>
  __HAL_LOCK(heth);
 800916c:	2002      	movs	r0, #2
}
 800916e:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 8009170:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8009172:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009174:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 8009176:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 8009178:	d011      	beq.n	800919e <HAL_ETH_GetReceivedFrame_IT+0x9a>
 800917a:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800917c:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800917e:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8009180:	6880      	ldr	r0, [r0, #8]
      heth->State = HAL_ETH_STATE_READY;
 8009182:	2501      	movs	r5, #1
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009184:	f3c1 410d 	ubfx	r1, r1, #16, #14
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009188:	68de      	ldr	r6, [r3, #12]
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800918a:	6410      	str	r0, [r2, #64]	; 0x40
      return HAL_OK;
 800918c:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800918e:	3904      	subs	r1, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8009190:	6296      	str	r6, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 8009192:	f882 5044 	strb.w	r5, [r2, #68]	; 0x44
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 8009196:	63d1      	str	r1, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 8009198:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800919c:	e7df      	b.n	800915e <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800919e:	4618      	mov	r0, r3
 80091a0:	6313      	str	r3, [r2, #48]	; 0x30
 80091a2:	e7eb      	b.n	800917c <HAL_ETH_GetReceivedFrame_IT+0x78>

080091a4 <HAL_ETH_TxCpltCallback>:
 80091a4:	4770      	bx	lr
 80091a6:	bf00      	nop

080091a8 <HAL_ETH_ErrorCallback>:
 80091a8:	4770      	bx	lr
 80091aa:	bf00      	nop

080091ac <HAL_ETH_IRQHandler>:
{
 80091ac:	b570      	push	{r4, r5, r6, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80091ae:	6803      	ldr	r3, [r0, #0]
 80091b0:	f241 0614 	movw	r6, #4116	; 0x1014
{
 80091b4:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80091b6:	599d      	ldr	r5, [r3, r6]
 80091b8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 80091bc:	d123      	bne.n	8009206 <HAL_ETH_IRQHandler+0x5a>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80091be:	599a      	ldr	r2, [r3, r6]
 80091c0:	07d2      	lsls	r2, r2, #31
 80091c2:	d416      	bmi.n	80091f2 <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80091c4:	f241 0514 	movw	r5, #4116	; 0x1014
 80091c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80091cc:	515a      	str	r2, [r3, r5]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80091ce:	595b      	ldr	r3, [r3, r5]
 80091d0:	041b      	lsls	r3, r3, #16
 80091d2:	d400      	bmi.n	80091d6 <HAL_ETH_IRQHandler+0x2a>
}
 80091d4:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_ErrorCallback(heth);
 80091d6:	4620      	mov	r0, r4
 80091d8:	f7ff ffe6 	bl	80091a8 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80091dc:	6821      	ldr	r1, [r4, #0]
 80091de:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 80091e2:	2201      	movs	r2, #1
    __HAL_UNLOCK(heth);
 80091e4:	2300      	movs	r3, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80091e6:	5148      	str	r0, [r1, r5]
    heth->State = HAL_ETH_STATE_READY;
 80091e8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 80091ec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80091f0:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ETH_TxCpltCallback(heth);
 80091f2:	f7ff ffd7 	bl	80091a4 <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80091f6:	2201      	movs	r2, #1
 80091f8:	6823      	ldr	r3, [r4, #0]
 80091fa:	519a      	str	r2, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 80091fc:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009200:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8009204:	e7de      	b.n	80091c4 <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 8009206:	f009 fa2f 	bl	8012668 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800920e:	2101      	movs	r1, #1
    __HAL_UNLOCK(heth);
 8009210:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8009212:	5198      	str	r0, [r3, r6]
    heth->State = HAL_ETH_STATE_READY;
 8009214:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009218:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800921c:	e7d2      	b.n	80091c4 <HAL_ETH_IRQHandler+0x18>
 800921e:	bf00      	nop

08009220 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009220:	8a03      	ldrh	r3, [r0, #16]
 8009222:	2b20      	cmp	r3, #32
{
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4604      	mov	r4, r0
 8009228:	460e      	mov	r6, r1
 800922a:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800922c:	d834      	bhi.n	8009298 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800922e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009232:	2b82      	cmp	r3, #130	; 0x82
 8009234:	d039      	beq.n	80092aa <HAL_ETH_ReadPHYRegister+0x8a>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009236:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009238:	01b1      	lsls	r1, r6, #6
  tmpreg = heth->Instance->MACMIIAR;
 800923a:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800923c:	2282      	movs	r2, #130	; 0x82
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800923e:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009240:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8009244:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8009248:	b29b      	uxth	r3, r3
  tmpreg = heth->Instance->MACMIIAR;
 800924a:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800924c:	430b      	orrs	r3, r1
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800924e:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8009252:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8009254:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 8009258:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800925a:	f7fd fd77 	bl	8006d4c <HAL_GetTick>
 800925e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009260:	e004      	b.n	800926c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 8009262:	6821      	ldr	r1, [r4, #0]
 8009264:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8009266:	f013 0301 	ands.w	r3, r3, #1
 800926a:	d00d      	beq.n	8009288 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800926c:	f7fd fd6e 	bl	8006d4c <HAL_GetTick>
 8009270:	1b83      	subs	r3, r0, r6
 8009272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009276:	d3f4      	bcc.n	8009262 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 8009278:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800927a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800927c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800927e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 8009282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 8009286:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8009288:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800928a:	2101      	movs	r1, #1
  return HAL_OK;
 800928c:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800928e:	b292      	uxth	r2, r2
 8009290:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 8009292:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 8009296:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 8009298:	f240 5116 	movw	r1, #1302	; 0x516
 800929c:	4804      	ldr	r0, [pc, #16]	; (80092b0 <HAL_ETH_ReadPHYRegister+0x90>)
 800929e:	f7fa fd4d 	bl	8003d3c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80092a2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80092a6:	2b82      	cmp	r3, #130	; 0x82
 80092a8:	d1c5      	bne.n	8009236 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 80092aa:	2002      	movs	r0, #2
}
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	bf00      	nop
 80092b0:	08029824 	.word	0x08029824

080092b4 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80092b4:	8a03      	ldrh	r3, [r0, #16]
 80092b6:	2b20      	cmp	r3, #32
{
 80092b8:	b570      	push	{r4, r5, r6, lr}
 80092ba:	4604      	mov	r4, r0
 80092bc:	460d      	mov	r5, r1
 80092be:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 80092c0:	d833      	bhi.n	800932a <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80092c2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80092c6:	2b42      	cmp	r3, #66	; 0x42
 80092c8:	d038      	beq.n	800933c <HAL_ETH_WritePHYRegister+0x88>
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80092ca:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80092cc:	01a9      	lsls	r1, r5, #6
  tmpreg = heth->Instance->MACMIIAR;
 80092ce:	6820      	ldr	r0, [r4, #0]
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80092d0:	2242      	movs	r2, #66	; 0x42
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80092d2:	02db      	lsls	r3, r3, #11
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80092d4:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80092d8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 80092dc:	b2b6      	uxth	r6, r6
 80092de:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80092e0:	b29b      	uxth	r3, r3
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80092e2:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80092e4:	f005 021c 	and.w	r2, r5, #28
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80092e8:	430b      	orrs	r3, r1
 80092ea:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80092ec:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 80092f0:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 80092f2:	f7fd fd2b 	bl	8006d4c <HAL_GetTick>
 80092f6:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80092f8:	e004      	b.n	8009304 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 80092fa:	6823      	ldr	r3, [r4, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80092fe:	f013 0301 	ands.w	r3, r3, #1
 8009302:	d00d      	beq.n	8009320 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8009304:	f7fd fd22 	bl	8006d4c <HAL_GetTick>
 8009308:	1b43      	subs	r3, r0, r5
 800930a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800930e:	d3f4      	bcc.n	80092fa <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 8009310:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 8009312:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8009314:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 8009316:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800931a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800931e:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 8009320:	2201      	movs	r2, #1
  return HAL_OK; 
 8009322:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009324:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 8009328:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800932a:	f240 515e 	movw	r1, #1374	; 0x55e
 800932e:	4804      	ldr	r0, [pc, #16]	; (8009340 <HAL_ETH_WritePHYRegister+0x8c>)
 8009330:	f7fa fd04 	bl	8003d3c <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8009334:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009338:	2b42      	cmp	r3, #66	; 0x42
 800933a:	d1c6      	bne.n	80092ca <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800933c:	2002      	movs	r0, #2
}
 800933e:	bd70      	pop	{r4, r5, r6, pc}
 8009340:	08029824 	.word	0x08029824

08009344 <HAL_ETH_Init>:
{
 8009344:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 8009346:	2300      	movs	r3, #0
{
 8009348:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800934a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800934c:	2800      	cmp	r0, #0
 800934e:	f000 80f3 	beq.w	8009538 <HAL_ETH_Init+0x1f4>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009352:	6843      	ldr	r3, [r0, #4]
 8009354:	4604      	mov	r4, r0
 8009356:	2b01      	cmp	r3, #1
 8009358:	f200 809c 	bhi.w	8009494 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800935c:	69a3      	ldr	r3, [r4, #24]
 800935e:	2b01      	cmp	r3, #1
 8009360:	f200 808f 	bhi.w	8009482 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009364:	69e3      	ldr	r3, [r4, #28]
 8009366:	2b01      	cmp	r3, #1
 8009368:	d873      	bhi.n	8009452 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800936a:	6a23      	ldr	r3, [r4, #32]
 800936c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009370:	d177      	bne.n	8009462 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 8009372:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009376:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800937a:	2b00      	cmp	r3, #0
 800937c:	d07b      	beq.n	8009476 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800937e:	4a90      	ldr	r2, [pc, #576]	; (80095c0 <HAL_ETH_Init+0x27c>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009380:	6823      	ldr	r3, [r4, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009382:	6c51      	ldr	r1, [r2, #68]	; 0x44
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8009384:	488f      	ldr	r0, [pc, #572]	; (80095c4 <HAL_ETH_Init+0x280>)
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8009386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800938a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800938e:	6451      	str	r1, [r2, #68]	; 0x44
 8009390:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009392:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8009396:	9201      	str	r2, [sp, #4]
 8009398:	9a01      	ldr	r2, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800939a:	6842      	ldr	r2, [r0, #4]
 800939c:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 80093a0:	6042      	str	r2, [r0, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80093a2:	6842      	ldr	r2, [r0, #4]
 80093a4:	6a21      	ldr	r1, [r4, #32]
 80093a6:	430a      	orrs	r2, r1
 80093a8:	6042      	str	r2, [r0, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	f042 0201 	orr.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 80093b2:	f7fd fccb 	bl	8006d4c <HAL_GetTick>
 80093b6:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80093b8:	e005      	b.n	80093c6 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80093ba:	f7fd fcc7 	bl	8006d4c <HAL_GetTick>
 80093be:	1b43      	subs	r3, r0, r5
 80093c0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80093c4:	d86f      	bhi.n	80094a6 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80093c6:	6823      	ldr	r3, [r4, #0]
 80093c8:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 80093cc:	6812      	ldr	r2, [r2, #0]
 80093ce:	07d0      	lsls	r0, r2, #31
 80093d0:	d4f3      	bmi.n	80093ba <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 80093d2:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 80093d4:	f002 feb4 	bl	800c140 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 80093d8:	4b7b      	ldr	r3, [pc, #492]	; (80095c8 <HAL_ETH_Init+0x284>)
 80093da:	4a7c      	ldr	r2, [pc, #496]	; (80095cc <HAL_ETH_Init+0x288>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 80093dc:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 80093e0:	4403      	add	r3, r0
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d272      	bcs.n	80094cc <HAL_ETH_Init+0x188>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80093e6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80093ea:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80093ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80093f0:	2100      	movs	r1, #0
 80093f2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 80093f4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80093f6:	f7ff ff5d 	bl	80092b4 <HAL_ETH_WritePHYRegister>
 80093fa:	4605      	mov	r5, r0
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d15b      	bne.n	80094b8 <HAL_ETH_Init+0x174>
  HAL_Delay(PHY_RESET_DELAY);
 8009400:	20ff      	movs	r0, #255	; 0xff
 8009402:	f7fd fca9 	bl	8006d58 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009406:	6863      	ldr	r3, [r4, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d176      	bne.n	80094fa <HAL_ETH_Init+0x1b6>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800940c:	68a3      	ldr	r3, [r4, #8]
 800940e:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009412:	f040 809c 	bne.w	800954e <HAL_ETH_Init+0x20a>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009416:	68e3      	ldr	r3, [r4, #12]
 8009418:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800941c:	f040 8090 	bne.w	8009540 <HAL_ETH_Init+0x1fc>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009420:	08db      	lsrs	r3, r3, #3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8009422:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8009424:	2100      	movs	r1, #0
 8009426:	4620      	mov	r0, r4
 8009428:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800942c:	b292      	uxth	r2, r2
 800942e:	f7ff ff41 	bl	80092b4 <HAL_ETH_WritePHYRegister>
 8009432:	2800      	cmp	r0, #0
 8009434:	d140      	bne.n	80094b8 <HAL_ETH_Init+0x174>
    HAL_Delay(PHY_CONFIG_DELAY);
 8009436:	f640 70ff 	movw	r0, #4095	; 0xfff
 800943a:	f7fd fc8d 	bl	8006d58 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800943e:	4620      	mov	r0, r4
 8009440:	2100      	movs	r1, #0
 8009442:	f7ff fcd7 	bl	8008df4 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 8009446:	2301      	movs	r3, #1
}
 8009448:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800944a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800944e:	b003      	add	sp, #12
 8009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 8009452:	21e0      	movs	r1, #224	; 0xe0
 8009454:	485e      	ldr	r0, [pc, #376]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009456:	f7fa fc71 	bl	8003d3c <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800945a:	6a23      	ldr	r3, [r4, #32]
 800945c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009460:	d087      	beq.n	8009372 <HAL_ETH_Init+0x2e>
 8009462:	21e1      	movs	r1, #225	; 0xe1
 8009464:	485a      	ldr	r0, [pc, #360]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009466:	f7fa fc69 	bl	8003d3c <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800946a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800946e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8009472:	2b00      	cmp	r3, #0
 8009474:	d183      	bne.n	800937e <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 8009476:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 8009478:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800947c:	f009 f864 	bl	8012548 <HAL_ETH_MspInit>
 8009480:	e77d      	b.n	800937e <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 8009482:	21df      	movs	r1, #223	; 0xdf
 8009484:	4852      	ldr	r0, [pc, #328]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009486:	f7fa fc59 	bl	8003d3c <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800948a:	69e3      	ldr	r3, [r4, #28]
 800948c:	2b01      	cmp	r3, #1
 800948e:	f67f af6c 	bls.w	800936a <HAL_ETH_Init+0x26>
 8009492:	e7de      	b.n	8009452 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 8009494:	21de      	movs	r1, #222	; 0xde
 8009496:	484e      	ldr	r0, [pc, #312]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009498:	f7fa fc50 	bl	8003d3c <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800949c:	69a3      	ldr	r3, [r4, #24]
 800949e:	2b01      	cmp	r3, #1
 80094a0:	f67f af60 	bls.w	8009364 <HAL_ETH_Init+0x20>
 80094a4:	e7ed      	b.n	8009482 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80094a6:	2503      	movs	r5, #3
      __HAL_UNLOCK(heth);
 80094a8:	2300      	movs	r3, #0
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80094aa:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 80094ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 80094b2:	4628      	mov	r0, r5
 80094b4:	b003      	add	sp, #12
 80094b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      heth->State = HAL_ETH_STATE_READY;
 80094b8:	2501      	movs	r5, #1
      ETH_MACDMAConfig(heth, err);
 80094ba:	4620      	mov	r0, r4
 80094bc:	2101      	movs	r1, #1
 80094be:	f7ff fc99 	bl	8008df4 <ETH_MACDMAConfig>
}
 80094c2:	4628      	mov	r0, r5
      heth->State = HAL_ETH_STATE_READY;
 80094c4:	f884 5044 	strb.w	r5, [r4, #68]	; 0x44
}
 80094c8:	b003      	add	sp, #12
 80094ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 80094cc:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <HAL_ETH_Init+0x290>)
 80094ce:	4a42      	ldr	r2, [pc, #264]	; (80095d8 <HAL_ETH_Init+0x294>)
 80094d0:	4403      	add	r3, r0
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d90e      	bls.n	80094f4 <HAL_ETH_Init+0x1b0>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 80094d6:	4b41      	ldr	r3, [pc, #260]	; (80095dc <HAL_ETH_Init+0x298>)
 80094d8:	4a41      	ldr	r2, [pc, #260]	; (80095e0 <HAL_ETH_Init+0x29c>)
 80094da:	4403      	add	r3, r0
 80094dc:	4293      	cmp	r3, r2
 80094de:	d384      	bcc.n	80093ea <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 80094e0:	4b40      	ldr	r3, [pc, #256]	; (80095e4 <HAL_ETH_Init+0x2a0>)
 80094e2:	4a41      	ldr	r2, [pc, #260]	; (80095e8 <HAL_ETH_Init+0x2a4>)
 80094e4:	4403      	add	r3, r0
 80094e6:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80094e8:	bf94      	ite	ls
 80094ea:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 80094ee:	f045 0510 	orrhi.w	r5, r5, #16
 80094f2:	e77a      	b.n	80093ea <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80094f4:	f045 050c 	orr.w	r5, r5, #12
 80094f8:	e777      	b.n	80093ea <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 80094fa:	f7fd fc27 	bl	8006d4c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80094fe:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009502:	4606      	mov	r6, r0
 8009504:	e002      	b.n	800950c <HAL_ETH_Init+0x1c8>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8009506:	9b00      	ldr	r3, [sp, #0]
 8009508:	0759      	lsls	r1, r3, #29
 800950a:	d426      	bmi.n	800955a <HAL_ETH_Init+0x216>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800950c:	466a      	mov	r2, sp
 800950e:	2101      	movs	r1, #1
 8009510:	4620      	mov	r0, r4
 8009512:	f7ff fe85 	bl	8009220 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8009516:	f7fd fc19 	bl	8006d4c <HAL_GetTick>
 800951a:	1b80      	subs	r0, r0, r6
 800951c:	42b8      	cmp	r0, r7
 800951e:	d9f2      	bls.n	8009506 <HAL_ETH_Init+0x1c2>
        ETH_MACDMAConfig(heth, err);
 8009520:	2101      	movs	r1, #1
 8009522:	4620      	mov	r0, r4
 8009524:	f7ff fc66 	bl	8008df4 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 8009528:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800952a:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800952c:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800952e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 8009532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 8009536:	e7bc      	b.n	80094b2 <HAL_ETH_Init+0x16e>
    return HAL_ERROR;
 8009538:	2501      	movs	r5, #1
}
 800953a:	4628      	mov	r0, r5
 800953c:	b003      	add	sp, #12
 800953e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 8009540:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 8009544:	4822      	ldr	r0, [pc, #136]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009546:	f7fa fbf9 	bl	8003d3c <assert_failed>
 800954a:	68e3      	ldr	r3, [r4, #12]
 800954c:	e768      	b.n	8009420 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800954e:	f240 11c5 	movw	r1, #453	; 0x1c5
 8009552:	481f      	ldr	r0, [pc, #124]	; (80095d0 <HAL_ETH_Init+0x28c>)
 8009554:	f7fa fbf2 	bl	8003d3c <assert_failed>
 8009558:	e75d      	b.n	8009416 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800955a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800955e:	2100      	movs	r1, #0
 8009560:	4620      	mov	r0, r4
 8009562:	f7ff fea7 	bl	80092b4 <HAL_ETH_WritePHYRegister>
 8009566:	2800      	cmp	r0, #0
 8009568:	d1a6      	bne.n	80094b8 <HAL_ETH_Init+0x174>
    tickstart = HAL_GetTick();
 800956a:	f7fd fbef 	bl	8006d4c <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800956e:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8009572:	4606      	mov	r6, r0
 8009574:	e002      	b.n	800957c <HAL_ETH_Init+0x238>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009576:	9b00      	ldr	r3, [sp, #0]
 8009578:	069a      	lsls	r2, r3, #26
 800957a:	d40a      	bmi.n	8009592 <HAL_ETH_Init+0x24e>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800957c:	466a      	mov	r2, sp
 800957e:	2101      	movs	r1, #1
 8009580:	4620      	mov	r0, r4
 8009582:	f7ff fe4d 	bl	8009220 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8009586:	f7fd fbe1 	bl	8006d4c <HAL_GetTick>
 800958a:	1b80      	subs	r0, r0, r6
 800958c:	42b8      	cmp	r0, r7
 800958e:	d9f2      	bls.n	8009576 <HAL_ETH_Init+0x232>
 8009590:	e7c6      	b.n	8009520 <HAL_ETH_Init+0x1dc>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8009592:	466a      	mov	r2, sp
 8009594:	2110      	movs	r1, #16
 8009596:	4620      	mov	r0, r4
 8009598:	f7ff fe42 	bl	8009220 <HAL_ETH_ReadPHYRegister>
 800959c:	2800      	cmp	r0, #0
 800959e:	d18b      	bne.n	80094b8 <HAL_ETH_Init+0x174>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80095a0:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80095a2:	f013 0204 	ands.w	r2, r3, #4
 80095a6:	bf18      	it	ne
 80095a8:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80095ac:	079b      	lsls	r3, r3, #30
 80095ae:	60e2      	str	r2, [r4, #12]
 80095b0:	d501      	bpl.n	80095b6 <HAL_ETH_Init+0x272>
      (heth->Init).Speed = ETH_SPEED_10M; 
 80095b2:	60a0      	str	r0, [r4, #8]
 80095b4:	e743      	b.n	800943e <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 80095b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	e73f      	b.n	800943e <HAL_ETH_Init+0xfa>
 80095be:	bf00      	nop
 80095c0:	40023800 	.word	0x40023800
 80095c4:	40013800 	.word	0x40013800
 80095c8:	feced300 	.word	0xfeced300
 80095cc:	00e4e1c0 	.word	0x00e4e1c0
 80095d0:	08029824 	.word	0x08029824
 80095d4:	fde9f140 	.word	0xfde9f140
 80095d8:	017d783f 	.word	0x017d783f
 80095dc:	fc6c7900 	.word	0xfc6c7900
 80095e0:	02625a00 	.word	0x02625a00
 80095e4:	fa0a1f00 	.word	0xfa0a1f00
 80095e8:	02faf07f 	.word	0x02faf07f

080095ec <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 80095ec:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d039      	beq.n	8009668 <HAL_ETH_Start+0x7c>
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80095f4:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 80095f6:	2202      	movs	r2, #2
{  
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4604      	mov	r4, r0
 80095fc:	b082      	sub	sp, #8
  __HAL_LOCK(heth);
 80095fe:	2601      	movs	r6, #1
  __IO uint32_t tmpreg = 0;
 8009600:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 8009602:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __IO uint32_t tmpreg = 0;
 8009606:	9501      	str	r5, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009608:	4630      	mov	r0, r6
  __HAL_LOCK(heth);
 800960a:	f884 6045 	strb.w	r6, [r4, #69]	; 0x45
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	f042 0208 	orr.w	r2, r2, #8
 8009614:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800961a:	f7fd fb9d 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800961e:	9a01      	ldr	r2, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009620:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 8009622:	6823      	ldr	r3, [r4, #0]
 8009624:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 8009626:	9500      	str	r5, [sp, #0]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8009628:	681a      	ldr	r2, [r3, #0]
 800962a:	f042 0204 	orr.w	r2, r2, #4
 800962e:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009634:	f7fd fb90 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 8009638:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 800963a:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 800963c:	9a00      	ldr	r2, [sp, #0]
 800963e:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 8009640:	f7ff fbc2 	bl	8008dc8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	f241 0318 	movw	r3, #4120	; 0x1018
  return HAL_OK;
 800964a:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800964c:	58d1      	ldr	r1, [r2, r3]
 800964e:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8009652:	50d1      	str	r1, [r2, r3]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8009654:	58d1      	ldr	r1, [r2, r3]
 8009656:	f041 0102 	orr.w	r1, r1, #2
 800965a:	50d1      	str	r1, [r2, r3]
  heth->State= HAL_ETH_STATE_READY;
 800965c:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009660:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 8009664:	b002      	add	sp, #8
 8009666:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 8009668:	2002      	movs	r0, #2
}
 800966a:	4770      	bx	lr

0800966c <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800966c:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009670:	2b01      	cmp	r3, #1
 8009672:	d039      	beq.n	80096e8 <HAL_ETH_Stop+0x7c>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009674:	6803      	ldr	r3, [r0, #0]
 8009676:	f241 0218 	movw	r2, #4120	; 0x1018
  heth->State = HAL_ETH_STATE_BUSY;
 800967a:	2102      	movs	r1, #2
{  
 800967c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800967e:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009680:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 8009684:	b082      	sub	sp, #8
  __IO uint32_t tmpreg = 0;
 8009686:	2500      	movs	r5, #0
  __HAL_LOCK(heth);
 8009688:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800968c:	4604      	mov	r4, r0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800968e:	5899      	ldr	r1, [r3, r2]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009690:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8009692:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8009696:	5099      	str	r1, [r3, r2]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8009698:	5899      	ldr	r1, [r3, r2]
 800969a:	f021 0102 	bic.w	r1, r1, #2
 800969e:	5099      	str	r1, [r3, r2]
  __IO uint32_t tmpreg = 0;
 80096a0:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	f022 0204 	bic.w	r2, r2, #4
 80096a8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80096ae:	f7fd fb53 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80096b2:	6823      	ldr	r3, [r4, #0]
  ETH_FlushTransmitFIFO(heth);
 80096b4:	4620      	mov	r0, r4
  (heth->Instance)->MACCR = tmpreg;
 80096b6:	9a01      	ldr	r2, [sp, #4]
 80096b8:	601a      	str	r2, [r3, #0]
  ETH_FlushTransmitFIFO(heth);
 80096ba:	f7ff fb85 	bl	8008dc8 <ETH_FlushTransmitFIFO>
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80096be:	6823      	ldr	r3, [r4, #0]
  __IO uint32_t tmpreg = 0;
 80096c0:	9500      	str	r5, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80096c2:	4630      	mov	r0, r6
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80096c4:	681a      	ldr	r2, [r3, #0]
 80096c6:	f022 0208 	bic.w	r2, r2, #8
 80096ca:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	9300      	str	r3, [sp, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80096d0:	f7fd fb42 	bl	8006d58 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80096d4:	9a00      	ldr	r2, [sp, #0]
  return HAL_OK;
 80096d6:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 80096d8:	6823      	ldr	r3, [r4, #0]
 80096da:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 80096dc:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 80096e0:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 80096e4:	b002      	add	sp, #8
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 80096e8:	2002      	movs	r0, #2
}
 80096ea:	4770      	bx	lr

080096ec <HAL_ETH_ConfigMAC>:
{
 80096ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(heth);
 80096ee:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 80096f2:	2b01      	cmp	r3, #1
 80096f4:	f000 8242 	beq.w	8009b7c <HAL_ETH_ConfigMAC+0x490>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 80096f8:	6883      	ldr	r3, [r0, #8]
 80096fa:	460c      	mov	r4, r1
  heth->State= HAL_ETH_STATE_BUSY;
 80096fc:	2202      	movs	r2, #2
  __HAL_LOCK(heth);
 80096fe:	2101      	movs	r1, #1
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009700:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8009704:	4605      	mov	r5, r0
  __HAL_LOCK(heth);
 8009706:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  heth->State= HAL_ETH_STATE_BUSY;
 800970a:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800970e:	f040 8207 	bne.w	8009b20 <HAL_ETH_ConfigMAC+0x434>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8009712:	68eb      	ldr	r3, [r5, #12]
 8009714:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8009718:	f040 8114 	bne.w	8009944 <HAL_ETH_ConfigMAC+0x258>
  if (macconf != NULL)
 800971c:	2c00      	cmp	r4, #0
 800971e:	f000 8119 	beq.w	8009954 <HAL_ETH_ConfigMAC+0x268>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 8009722:	6823      	ldr	r3, [r4, #0]
 8009724:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 8009728:	f040 8139 	bne.w	800999e <HAL_ETH_ConfigMAC+0x2b2>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800972c:	6863      	ldr	r3, [r4, #4]
 800972e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8009732:	f040 816b 	bne.w	8009a0c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8009736:	68a3      	ldr	r3, [r4, #8]
 8009738:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800973c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009740:	d002      	beq.n	8009748 <HAL_ETH_ConfigMAC+0x5c>
 8009742:	2b00      	cmp	r3, #0
 8009744:	f040 821c 	bne.w	8009b80 <HAL_ETH_ConfigMAC+0x494>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 8009748:	68e3      	ldr	r3, [r4, #12]
 800974a:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800974e:	f040 8152 	bne.w	80099f6 <HAL_ETH_ConfigMAC+0x30a>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8009752:	6923      	ldr	r3, [r4, #16]
 8009754:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009758:	f040 8142 	bne.w	80099e0 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800975c:	6963      	ldr	r3, [r4, #20]
 800975e:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8009762:	f040 8132 	bne.w	80099ca <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 8009766:	69a3      	ldr	r3, [r4, #24]
 8009768:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800976c:	f040 8122 	bne.w	80099b4 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8009770:	69e3      	ldr	r3, [r4, #28]
 8009772:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8009776:	f040 81a3 	bne.w	8009ac0 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800977a:	6a23      	ldr	r3, [r4, #32]
 800977c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009780:	f040 818e 	bne.w	8009aa0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8009784:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009786:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800978a:	f040 8193 	bne.w	8009ab4 <HAL_ETH_ConfigMAC+0x3c8>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800978e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009790:	f033 0310 	bics.w	r3, r3, #16
 8009794:	f040 8179 	bne.w	8009a8a <HAL_ETH_ConfigMAC+0x39e>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8009798:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800979a:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800979e:	f040 819a 	bne.w	8009ad6 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 80097a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80097a4:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 80097a8:	d003      	beq.n	80097b2 <HAL_ETH_ConfigMAC+0xc6>
 80097aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80097ae:	f040 81d3 	bne.w	8009b58 <HAL_ETH_ConfigMAC+0x46c>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 80097b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80097b4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80097b8:	2a40      	cmp	r2, #64	; 0x40
 80097ba:	d002      	beq.n	80097c2 <HAL_ETH_ConfigMAC+0xd6>
 80097bc:	2b80      	cmp	r3, #128	; 0x80
 80097be:	f040 81b5 	bne.w	8009b2c <HAL_ETH_ConfigMAC+0x440>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 80097c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80097c4:	f033 0320 	bics.w	r3, r3, #32
 80097c8:	f040 80de 	bne.w	8009988 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 80097cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097ce:	f033 0308 	bics.w	r3, r3, #8
 80097d2:	f040 80cf 	bne.w	8009974 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 80097d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097d8:	2b01      	cmp	r3, #1
 80097da:	f200 80a5 	bhi.w	8009928 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 80097de:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097e0:	f240 4204 	movw	r2, #1028	; 0x404
 80097e4:	4293      	cmp	r3, r2
 80097e6:	bf18      	it	ne
 80097e8:	2b10      	cmpne	r3, #16
 80097ea:	d003      	beq.n	80097f4 <HAL_ETH_ConfigMAC+0x108>
 80097ec:	f033 0304 	bics.w	r3, r3, #4
 80097f0:	f040 81be 	bne.w	8009b70 <HAL_ETH_ConfigMAC+0x484>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 80097f4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80097f6:	f033 0202 	bics.w	r2, r3, #2
 80097fa:	d004      	beq.n	8009806 <HAL_ETH_ConfigMAC+0x11a>
 80097fc:	f240 4202 	movw	r2, #1026	; 0x402
 8009800:	4293      	cmp	r3, r2
 8009802:	f040 819e 	bne.w	8009b42 <HAL_ETH_ConfigMAC+0x456>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009806:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009808:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800980c:	f080 816e 	bcs.w	8009aec <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8009810:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009812:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009816:	f040 8173 	bne.w	8009b00 <HAL_ETH_ConfigMAC+0x414>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800981a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800981c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009820:	f040 8178 	bne.w	8009b14 <HAL_ETH_ConfigMAC+0x428>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8009824:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8009826:	f033 0308 	bics.w	r3, r3, #8
 800982a:	f040 8123 	bne.w	8009a74 <HAL_ETH_ConfigMAC+0x388>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800982e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009830:	f033 0304 	bics.w	r3, r3, #4
 8009834:	f040 8113 	bne.w	8009a5e <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009838:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800983a:	f033 0302 	bics.w	r3, r3, #2
 800983e:	f040 8103 	bne.w	8009a48 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009842:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009844:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009848:	f040 80f3 	bne.w	8009a32 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800984c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800984e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009852:	f080 80e8 	bcs.w	8009a26 <HAL_ETH_ConfigMAC+0x33a>
                         macconf->BackOffLimit | 
 8009856:	6823      	ldr	r3, [r4, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009858:	2001      	movs	r0, #1
                         macconf->BackOffLimit | 
 800985a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 800985e:	430b      	orrs	r3, r1
 8009860:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
 8009864:	4313      	orrs	r3, r2
 8009866:	6962      	ldr	r2, [r4, #20]
 8009868:	4333      	orrs	r3, r6
 800986a:	69a6      	ldr	r6, [r4, #24]
 800986c:	430b      	orrs	r3, r1
 800986e:	69e1      	ldr	r1, [r4, #28]
 8009870:	4313      	orrs	r3, r2
 8009872:	6a22      	ldr	r2, [r4, #32]
 8009874:	4333      	orrs	r3, r6
 8009876:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009878:	430b      	orrs	r3, r1
 800987a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800987c:	4313      	orrs	r3, r2
 800987e:	68aa      	ldr	r2, [r5, #8]
 8009880:	4333      	orrs	r3, r6
    tmpreg = (heth->Instance)->MACCR;
 8009882:	682e      	ldr	r6, [r5, #0]
                         macconf->BackOffLimit | 
 8009884:	430b      	orrs	r3, r1
    tmpreg = (heth->Instance)->MACCR;
 8009886:	6837      	ldr	r7, [r6, #0]
                         macconf->BackOffLimit | 
 8009888:	68e9      	ldr	r1, [r5, #12]
 800988a:	4313      	orrs	r3, r2
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800988c:	4abf      	ldr	r2, [pc, #764]	; (8009b8c <HAL_ETH_ConfigMAC+0x4a0>)
                         macconf->BackOffLimit | 
 800988e:	430b      	orrs	r3, r1
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009890:	403a      	ands	r2, r7
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009892:	f64f 7741 	movw	r7, #65345	; 0xff41
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 8009896:	4313      	orrs	r3, r2
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009898:	6033      	str	r3, [r6, #0]
    tmpreg = (heth->Instance)->MACCR;
 800989a:	6836      	ldr	r6, [r6, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800989c:	f7fd fa5c 	bl	8006d58 <HAL_Delay>
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80098a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80098a2:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80098a4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 80098a6:	682a      	ldr	r2, [r5, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80098a8:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 80098aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    (heth->Instance)->MACCR = tmpreg; 
 80098ac:	6016      	str	r6, [r2, #0]
                                          macconf->SourceAddrFilter |
 80098ae:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 80098b0:	e9d4 160e 	ldrd	r1, r6, [r4, #56]	; 0x38
                                          macconf->PassControlFrames |
 80098b4:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 80098b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
                                          macconf->BroadcastFramesReception | 
 80098b8:	4333      	orrs	r3, r6
                                          macconf->PromiscuousMode |
 80098ba:	6c66      	ldr	r6, [r4, #68]	; 0x44
                                          macconf->DestinationAddrFilter |
 80098bc:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 80098be:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                                          macconf->PromiscuousMode |
 80098c0:	4333      	orrs	r3, r6
                                          macconf->MulticastFramesFilter |
 80098c2:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80098c4:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 80098c6:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80098c8:	f7fd fa46 	bl	8006d58 <HAL_Delay>
                          macconf->ReceiveFlowControl |
 80098cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80098ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
     (heth->Instance)->MACFFR = tmpreg;
 80098d0:	682a      	ldr	r2, [r5, #0]
                          macconf->ReceiveFlowControl |
 80098d2:	430b      	orrs	r3, r1
 80098d4:	6e21      	ldr	r1, [r4, #96]	; 0x60
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80098d6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
                          macconf->ReceiveFlowControl |
 80098d8:	430b      	orrs	r3, r1
 80098da:	6e61      	ldr	r1, [r4, #100]	; 0x64
     (heth->Instance)->MACFFR = tmpreg;
 80098dc:	6056      	str	r6, [r2, #4]
                          macconf->ReceiveFlowControl |
 80098de:	430b      	orrs	r3, r1
 80098e0:	6ea6      	ldr	r6, [r4, #104]	; 0x68
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80098e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
                          macconf->ReceiveFlowControl |
 80098e4:	4333      	orrs	r3, r6
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80098e6:	6090      	str	r0, [r2, #8]
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80098e8:	6d66      	ldr	r6, [r4, #84]	; 0x54
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80098ea:	2001      	movs	r0, #1
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80098ec:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 80098ee:	6991      	ldr	r1, [r2, #24]
                          macconf->ReceiveFlowControl |
 80098f0:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80098f4:	4039      	ands	r1, r7
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 80098f6:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 80098f8:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 80098fa:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80098fc:	f7fd fa2c 	bl	8006d58 <HAL_Delay>
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009900:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009902:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009904:	6f21      	ldr	r1, [r4, #112]	; 0x70
     (heth->Instance)->MACFCR = tmpreg;
 8009906:	682b      	ldr	r3, [r5, #0]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8009908:	430a      	orrs	r2, r1
     (heth->Instance)->MACFCR = tmpreg;
 800990a:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800990c:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800990e:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8009910:	f7fd fa22 	bl	8006d58 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 8009914:	682b      	ldr	r3, [r5, #0]
 8009916:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 8009918:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800991a:	2201      	movs	r2, #1
  return HAL_OK;  
 800991c:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800991e:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009922:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 8009926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 8009928:	f240 6123 	movw	r1, #1571	; 0x623
 800992c:	4898      	ldr	r0, [pc, #608]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 800992e:	f7fa fa05 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8009932:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009934:	f240 4204 	movw	r2, #1028	; 0x404
 8009938:	4293      	cmp	r3, r2
 800993a:	bf18      	it	ne
 800993c:	2b10      	cmpne	r3, #16
 800993e:	f47f af55 	bne.w	80097ec <HAL_ETH_ConfigMAC+0x100>
 8009942:	e757      	b.n	80097f4 <HAL_ETH_ConfigMAC+0x108>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 8009944:	f240 610e 	movw	r1, #1550	; 0x60e
 8009948:	4891      	ldr	r0, [pc, #580]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 800994a:	f7fa f9f7 	bl	8003d3c <assert_failed>
  if (macconf != NULL)
 800994e:	2c00      	cmp	r4, #0
 8009950:	f47f aee7 	bne.w	8009722 <HAL_ETH_ConfigMAC+0x36>
    tmpreg = (heth->Instance)->MACCR;
 8009954:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009956:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009958:	68ec      	ldr	r4, [r5, #12]
    tmpreg = (heth->Instance)->MACCR;
 800995a:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800995c:	68ab      	ldr	r3, [r5, #8]
    tmpreg &= ~((uint32_t)0x00004800);
 800995e:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8009962:	4323      	orrs	r3, r4
 8009964:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009966:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 8009968:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800996a:	f7fd f9f5 	bl	8006d58 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	601c      	str	r4, [r3, #0]
 8009972:	e7d1      	b.n	8009918 <HAL_ETH_ConfigMAC+0x22c>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8009974:	f240 6122 	movw	r1, #1570	; 0x622
 8009978:	4885      	ldr	r0, [pc, #532]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 800997a:	f7fa f9df 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800997e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009980:	2b01      	cmp	r3, #1
 8009982:	f67f af2c 	bls.w	80097de <HAL_ETH_ConfigMAC+0xf2>
 8009986:	e7cf      	b.n	8009928 <HAL_ETH_ConfigMAC+0x23c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8009988:	f240 6121 	movw	r1, #1569	; 0x621
 800998c:	4880      	ldr	r0, [pc, #512]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 800998e:	f7fa f9d5 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 8009992:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009994:	f033 0308 	bics.w	r3, r3, #8
 8009998:	f43f af1d 	beq.w	80097d6 <HAL_ETH_ConfigMAC+0xea>
 800999c:	e7ea      	b.n	8009974 <HAL_ETH_ConfigMAC+0x288>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800999e:	f240 6113 	movw	r1, #1555	; 0x613
 80099a2:	487b      	ldr	r0, [pc, #492]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 80099a4:	f7fa f9ca 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 80099a8:	6863      	ldr	r3, [r4, #4]
 80099aa:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 80099ae:	f43f aec2 	beq.w	8009736 <HAL_ETH_ConfigMAC+0x4a>
 80099b2:	e02b      	b.n	8009a0c <HAL_ETH_ConfigMAC+0x320>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80099b4:	f240 6119 	movw	r1, #1561	; 0x619
 80099b8:	4875      	ldr	r0, [pc, #468]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 80099ba:	f7fa f9bf 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 80099be:	69e3      	ldr	r3, [r4, #28]
 80099c0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80099c4:	f43f aed9 	beq.w	800977a <HAL_ETH_ConfigMAC+0x8e>
 80099c8:	e07a      	b.n	8009ac0 <HAL_ETH_ConfigMAC+0x3d4>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80099ca:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 80099ce:	4870      	ldr	r0, [pc, #448]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 80099d0:	f7fa f9b4 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 80099d4:	69a3      	ldr	r3, [r4, #24]
 80099d6:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80099da:	f43f aec9 	beq.w	8009770 <HAL_ETH_ConfigMAC+0x84>
 80099de:	e7e9      	b.n	80099b4 <HAL_ETH_ConfigMAC+0x2c8>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 80099e0:	f240 6117 	movw	r1, #1559	; 0x617
 80099e4:	486a      	ldr	r0, [pc, #424]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 80099e6:	f7fa f9a9 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 80099ea:	6963      	ldr	r3, [r4, #20]
 80099ec:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80099f0:	f43f aeb9 	beq.w	8009766 <HAL_ETH_ConfigMAC+0x7a>
 80099f4:	e7e9      	b.n	80099ca <HAL_ETH_ConfigMAC+0x2de>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 80099f6:	f240 6116 	movw	r1, #1558	; 0x616
 80099fa:	4865      	ldr	r0, [pc, #404]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 80099fc:	f7fa f99e 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8009a06:	f43f aea9 	beq.w	800975c <HAL_ETH_ConfigMAC+0x70>
 8009a0a:	e7e9      	b.n	80099e0 <HAL_ETH_ConfigMAC+0x2f4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 8009a0c:	f240 6114 	movw	r1, #1556	; 0x614
 8009a10:	485f      	ldr	r0, [pc, #380]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a12:	f7fa f993 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8009a16:	68a3      	ldr	r3, [r4, #8]
 8009a18:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 8009a1c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009a20:	f47f ae8f 	bne.w	8009742 <HAL_ETH_ConfigMAC+0x56>
 8009a24:	e690      	b.n	8009748 <HAL_ETH_ConfigMAC+0x5c>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8009a26:	f240 612d 	movw	r1, #1581	; 0x62d
 8009a2a:	4859      	ldr	r0, [pc, #356]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a2c:	f7fa f986 	bl	8003d3c <assert_failed>
 8009a30:	e711      	b.n	8009856 <HAL_ETH_ConfigMAC+0x16a>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009a32:	f240 612c 	movw	r1, #1580	; 0x62c
 8009a36:	4856      	ldr	r0, [pc, #344]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a38:	f7fa f980 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 8009a3c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8009a3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a42:	f4ff af08 	bcc.w	8009856 <HAL_ETH_ConfigMAC+0x16a>
 8009a46:	e7ee      	b.n	8009a26 <HAL_ETH_ConfigMAC+0x33a>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009a48:	f240 612b 	movw	r1, #1579	; 0x62b
 8009a4c:	4850      	ldr	r0, [pc, #320]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a4e:	f7fa f975 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 8009a52:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8009a54:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 8009a58:	f43f aef8 	beq.w	800984c <HAL_ETH_ConfigMAC+0x160>
 8009a5c:	e7e9      	b.n	8009a32 <HAL_ETH_ConfigMAC+0x346>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8009a5e:	f240 612a 	movw	r1, #1578	; 0x62a
 8009a62:	484b      	ldr	r0, [pc, #300]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a64:	f7fa f96a 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 8009a68:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8009a6a:	f033 0302 	bics.w	r3, r3, #2
 8009a6e:	f43f aee8 	beq.w	8009842 <HAL_ETH_ConfigMAC+0x156>
 8009a72:	e7e9      	b.n	8009a48 <HAL_ETH_ConfigMAC+0x35c>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 8009a74:	f240 6129 	movw	r1, #1577	; 0x629
 8009a78:	4845      	ldr	r0, [pc, #276]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a7a:	f7fa f95f 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 8009a7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a80:	f033 0304 	bics.w	r3, r3, #4
 8009a84:	f43f aed8 	beq.w	8009838 <HAL_ETH_ConfigMAC+0x14c>
 8009a88:	e7e9      	b.n	8009a5e <HAL_ETH_ConfigMAC+0x372>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 8009a8a:	f240 611d 	movw	r1, #1565	; 0x61d
 8009a8e:	4840      	ldr	r0, [pc, #256]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009a90:	f7fa f954 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8009a94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009a96:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 8009a9a:	f43f ae82 	beq.w	80097a2 <HAL_ETH_ConfigMAC+0xb6>
 8009a9e:	e01a      	b.n	8009ad6 <HAL_ETH_ConfigMAC+0x3ea>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8009aa0:	f240 611b 	movw	r1, #1563	; 0x61b
 8009aa4:	483a      	ldr	r0, [pc, #232]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009aa6:	f7fa f949 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 8009aaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009aac:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 8009ab0:	f43f ae6d 	beq.w	800978e <HAL_ETH_ConfigMAC+0xa2>
 8009ab4:	f240 611c 	movw	r1, #1564	; 0x61c
 8009ab8:	4835      	ldr	r0, [pc, #212]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009aba:	f7fa f93f 	bl	8003d3c <assert_failed>
 8009abe:	e666      	b.n	800978e <HAL_ETH_ConfigMAC+0xa2>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 8009ac0:	f240 611a 	movw	r1, #1562	; 0x61a
 8009ac4:	4832      	ldr	r0, [pc, #200]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009ac6:	f7fa f939 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 8009aca:	6a23      	ldr	r3, [r4, #32]
 8009acc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009ad0:	f43f ae58 	beq.w	8009784 <HAL_ETH_ConfigMAC+0x98>
 8009ad4:	e7e4      	b.n	8009aa0 <HAL_ETH_ConfigMAC+0x3b4>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 8009ad6:	f240 611e 	movw	r1, #1566	; 0x61e
 8009ada:	482d      	ldr	r0, [pc, #180]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009adc:	f7fa f92e 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009ae0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8009ae2:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 8009ae6:	f47f ae60 	bne.w	80097aa <HAL_ETH_ConfigMAC+0xbe>
 8009aea:	e662      	b.n	80097b2 <HAL_ETH_ConfigMAC+0xc6>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009aec:	f240 6126 	movw	r1, #1574	; 0x626
 8009af0:	4827      	ldr	r0, [pc, #156]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009af2:	f7fa f923 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 8009af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009af8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8009afc:	f43f ae8d 	beq.w	800981a <HAL_ETH_ConfigMAC+0x12e>
 8009b00:	f240 6127 	movw	r1, #1575	; 0x627
 8009b04:	4822      	ldr	r0, [pc, #136]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b06:	f7fa f919 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 8009b0a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8009b0c:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 8009b10:	f43f ae88 	beq.w	8009824 <HAL_ETH_ConfigMAC+0x138>
 8009b14:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 8009b18:	481d      	ldr	r0, [pc, #116]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b1a:	f7fa f90f 	bl	8003d3c <assert_failed>
 8009b1e:	e681      	b.n	8009824 <HAL_ETH_ConfigMAC+0x138>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 8009b20:	f240 610d 	movw	r1, #1549	; 0x60d
 8009b24:	481a      	ldr	r0, [pc, #104]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b26:	f7fa f909 	bl	8003d3c <assert_failed>
 8009b2a:	e5f2      	b.n	8009712 <HAL_ETH_ConfigMAC+0x26>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8009b2c:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8009b30:	4817      	ldr	r0, [pc, #92]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b32:	f7fa f903 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 8009b36:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009b38:	f033 0320 	bics.w	r3, r3, #32
 8009b3c:	f43f ae46 	beq.w	80097cc <HAL_ETH_ConfigMAC+0xe0>
 8009b40:	e722      	b.n	8009988 <HAL_ETH_ConfigMAC+0x29c>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 8009b42:	f240 6125 	movw	r1, #1573	; 0x625
 8009b46:	4812      	ldr	r0, [pc, #72]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b48:	f7fa f8f8 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 8009b4c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b52:	f4ff ae5d 	bcc.w	8009810 <HAL_ETH_ConfigMAC+0x124>
 8009b56:	e7c9      	b.n	8009aec <HAL_ETH_ConfigMAC+0x400>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 8009b58:	f240 611f 	movw	r1, #1567	; 0x61f
 8009b5c:	480c      	ldr	r0, [pc, #48]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b5e:	f7fa f8ed 	bl	8003d3c <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 8009b62:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009b68:	2a40      	cmp	r2, #64	; 0x40
 8009b6a:	f47f ae27 	bne.w	80097bc <HAL_ETH_ConfigMAC+0xd0>
 8009b6e:	e628      	b.n	80097c2 <HAL_ETH_ConfigMAC+0xd6>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 8009b70:	f240 6124 	movw	r1, #1572	; 0x624
 8009b74:	4806      	ldr	r0, [pc, #24]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b76:	f7fa f8e1 	bl	8003d3c <assert_failed>
 8009b7a:	e63b      	b.n	80097f4 <HAL_ETH_ConfigMAC+0x108>
  __HAL_LOCK(heth);
 8009b7c:	2002      	movs	r0, #2
}
 8009b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 8009b80:	f240 6115 	movw	r1, #1557	; 0x615
 8009b84:	4802      	ldr	r0, [pc, #8]	; (8009b90 <HAL_ETH_ConfigMAC+0x4a4>)
 8009b86:	f7fa f8d9 	bl	8003d3c <assert_failed>
 8009b8a:	e5dd      	b.n	8009748 <HAL_ETH_ConfigMAC+0x5c>
 8009b8c:	ff20810f 	.word	0xff20810f
 8009b90:	08029824 	.word	0x08029824

08009b94 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009b94:	4bc0      	ldr	r3, [pc, #768]	; (8009e98 <HAL_GPIO_Init+0x304>)
 8009b96:	4ac1      	ldr	r2, [pc, #772]	; (8009e9c <HAL_GPIO_Init+0x308>)
 8009b98:	4290      	cmp	r0, r2
 8009b9a:	bf18      	it	ne
 8009b9c:	4298      	cmpne	r0, r3
{
 8009b9e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ba2:	bf18      	it	ne
 8009ba4:	2301      	movne	r3, #1
{
 8009ba6:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ba8:	bf08      	it	eq
 8009baa:	2300      	moveq	r3, #0
{
 8009bac:	4606      	mov	r6, r0
 8009bae:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	d026      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bb4:	4bba      	ldr	r3, [pc, #744]	; (8009ea0 <HAL_GPIO_Init+0x30c>)
 8009bb6:	4298      	cmp	r0, r3
 8009bb8:	d023      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbe:	4298      	cmp	r0, r3
 8009bc0:	d01f      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bc6:	4298      	cmp	r0, r3
 8009bc8:	d01b      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bce:	4298      	cmp	r0, r3
 8009bd0:	d017      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bd6:	4298      	cmp	r0, r3
 8009bd8:	d013      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bde:	4298      	cmp	r0, r3
 8009be0:	d00f      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009be2:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009bea:	4290      	cmp	r0, r2
 8009bec:	bf18      	it	ne
 8009bee:	4298      	cmpne	r0, r3
 8009bf0:	d007      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bf2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bf6:	4298      	cmp	r0, r3
 8009bf8:	d003      	beq.n	8009c02 <HAL_GPIO_Init+0x6e>
 8009bfa:	21aa      	movs	r1, #170	; 0xaa
 8009bfc:	48a9      	ldr	r0, [pc, #676]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009bfe:	f7fa f89d 	bl	8003d3c <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009c02:	883b      	ldrh	r3, [r7, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	f000 811a 	beq.w	8009e3e <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 8009c10:	bf18      	it	ne
 8009c12:	2a03      	cmpne	r2, #3
 8009c14:	f1a2 0011 	sub.w	r0, r2, #17
 8009c18:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 8009c1c:	bf8c      	ite	hi
 8009c1e:	2301      	movhi	r3, #1
 8009c20:	2300      	movls	r3, #0
 8009c22:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 8009c26:	bf0c      	ite	eq
 8009c28:	2300      	moveq	r3, #0
 8009c2a:	f003 0301 	andne.w	r3, r3, #1
 8009c2e:	2801      	cmp	r0, #1
 8009c30:	bf94      	ite	ls
 8009c32:	2300      	movls	r3, #0
 8009c34:	f003 0301 	andhi.w	r3, r3, #1
 8009c38:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 8009c3c:	bf0c      	ite	eq
 8009c3e:	2300      	moveq	r3, #0
 8009c40:	f003 0301 	andne.w	r3, r3, #1
 8009c44:	b11b      	cbz	r3, 8009c4e <HAL_GPIO_Init+0xba>
 8009c46:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 8009c4a:	f040 8120 	bne.w	8009e8e <HAL_GPIO_Init+0x2fa>
{
 8009c4e:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009c50:	f8df b278 	ldr.w	fp, [pc, #632]	; 8009ecc <HAL_GPIO_Init+0x338>
 8009c54:	e003      	b.n	8009c5e <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 8009c56:	3501      	adds	r5, #1
 8009c58:	2d10      	cmp	r5, #16
 8009c5a:	f000 80b4 	beq.w	8009dc6 <HAL_GPIO_Init+0x232>
    ioposition = ((uint32_t)0x01) << position;
 8009c5e:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c60:	683b      	ldr	r3, [r7, #0]
    ioposition = ((uint32_t)0x01) << position;
 8009c62:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009c64:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 8009c68:	ea34 0303 	bics.w	r3, r4, r3
 8009c6c:	d1f3      	bne.n	8009c56 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009c6e:	687a      	ldr	r2, [r7, #4]
 8009c70:	f002 0303 	and.w	r3, r2, #3
 8009c74:	1e59      	subs	r1, r3, #1
 8009c76:	2901      	cmp	r1, #1
 8009c78:	f240 80a8 	bls.w	8009dcc <HAL_GPIO_Init+0x238>
 8009c7c:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8009c80:	f04f 0803 	mov.w	r8, #3
 8009c84:	fa08 f80a 	lsl.w	r8, r8, sl
 8009c88:	ea6f 0808 	mvn.w	r8, r8
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009c8c:	2b03      	cmp	r3, #3
 8009c8e:	d024      	beq.n	8009cda <HAL_GPIO_Init+0x146>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009c90:	68b9      	ldr	r1, [r7, #8]
 8009c92:	2902      	cmp	r1, #2
 8009c94:	f200 80b7 	bhi.w	8009e06 <HAL_GPIO_Init+0x272>
        temp = GPIOx->PUPDR;
 8009c98:	68f0      	ldr	r0, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009c9a:	fa01 f10a 	lsl.w	r1, r1, sl
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009c9e:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8009ca0:	ea00 0008 	and.w	r0, r0, r8
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8009ca4:	ea41 0100 	orr.w	r1, r1, r0
        GPIOx->PUPDR = temp;
 8009ca8:	60f1      	str	r1, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009caa:	d116      	bne.n	8009cda <HAL_GPIO_Init+0x146>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009cac:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8009cb0:	f1be 0f0f 	cmp.w	lr, #15
 8009cb4:	f200 80c8 	bhi.w	8009e48 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 8009cb8:	08e8      	lsrs	r0, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009cba:	f005 0107 	and.w	r1, r5, #7
 8009cbe:	f04f 0c0f 	mov.w	ip, #15
 8009cc2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8009cc6:	0089      	lsls	r1, r1, #2
        temp = GPIOx->AFR[position >> 3];
 8009cc8:	6a04      	ldr	r4, [r0, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009cca:	fa0c fc01 	lsl.w	ip, ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009cce:	fa0e f101 	lsl.w	r1, lr, r1
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8009cd2:	ea24 040c 	bic.w	r4, r4, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8009cd6:	4321      	orrs	r1, r4
        GPIOx->AFR[position >> 3] = temp;
 8009cd8:	6201      	str	r1, [r0, #32]
      temp = GPIOx->MODER;
 8009cda:	6831      	ldr	r1, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009cdc:	fa03 f30a 	lsl.w	r3, r3, sl
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009ce0:	f412 3f40 	tst.w	r2, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8009ce4:	ea01 0808 	and.w	r8, r1, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8009ce8:	ea43 0308 	orr.w	r3, r3, r8
      GPIOx->MODER = temp;
 8009cec:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8009cee:	d0b2      	beq.n	8009c56 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cf0:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
 8009cf4:	f025 0c03 	bic.w	ip, r5, #3
 8009cf8:	4c6b      	ldr	r4, [pc, #428]	; (8009ea8 <HAL_GPIO_Init+0x314>)

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009cfa:	f005 0303 	and.w	r3, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009cfe:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009d02:	210f      	movs	r1, #15
 8009d04:	4464      	add	r4, ip
 8009d06:	009b      	lsls	r3, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d08:	f8cb 0044 	str.w	r0, [fp, #68]	; 0x44
 8009d0c:	f8db 0044 	ldr.w	r0, [fp, #68]	; 0x44
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009d10:	4099      	lsls	r1, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009d12:	f8df c188 	ldr.w	ip, [pc, #392]	; 8009e9c <HAL_GPIO_Init+0x308>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d16:	f400 4080 	and.w	r0, r0, #16384	; 0x4000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009d1a:	4566      	cmp	r6, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009d1c:	9003      	str	r0, [sp, #12]
 8009d1e:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8009d20:	68a0      	ldr	r0, [r4, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009d22:	ea20 0101 	bic.w	r1, r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8009d26:	d025      	beq.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009d28:	9801      	ldr	r0, [sp, #4]
 8009d2a:	2800      	cmp	r0, #0
 8009d2c:	d07d      	beq.n	8009e2a <HAL_GPIO_Init+0x296>
 8009d2e:	485c      	ldr	r0, [pc, #368]	; (8009ea0 <HAL_GPIO_Init+0x30c>)
 8009d30:	4286      	cmp	r6, r0
 8009d32:	d07f      	beq.n	8009e34 <HAL_GPIO_Init+0x2a0>
 8009d34:	485d      	ldr	r0, [pc, #372]	; (8009eac <HAL_GPIO_Init+0x318>)
 8009d36:	4286      	cmp	r6, r0
 8009d38:	f000 8090 	beq.w	8009e5c <HAL_GPIO_Init+0x2c8>
 8009d3c:	485c      	ldr	r0, [pc, #368]	; (8009eb0 <HAL_GPIO_Init+0x31c>)
 8009d3e:	4286      	cmp	r6, r0
 8009d40:	f000 8091 	beq.w	8009e66 <HAL_GPIO_Init+0x2d2>
 8009d44:	485b      	ldr	r0, [pc, #364]	; (8009eb4 <HAL_GPIO_Init+0x320>)
 8009d46:	4286      	cmp	r6, r0
 8009d48:	f000 8097 	beq.w	8009e7a <HAL_GPIO_Init+0x2e6>
 8009d4c:	485a      	ldr	r0, [pc, #360]	; (8009eb8 <HAL_GPIO_Init+0x324>)
 8009d4e:	4286      	cmp	r6, r0
 8009d50:	f000 8098 	beq.w	8009e84 <HAL_GPIO_Init+0x2f0>
 8009d54:	4859      	ldr	r0, [pc, #356]	; (8009ebc <HAL_GPIO_Init+0x328>)
 8009d56:	4286      	cmp	r6, r0
 8009d58:	f000 808a 	beq.w	8009e70 <HAL_GPIO_Init+0x2dc>
 8009d5c:	4858      	ldr	r0, [pc, #352]	; (8009ec0 <HAL_GPIO_Init+0x32c>)
 8009d5e:	4286      	cmp	r6, r0
 8009d60:	f000 80b6 	beq.w	8009ed0 <HAL_GPIO_Init+0x33c>
 8009d64:	4857      	ldr	r0, [pc, #348]	; (8009ec4 <HAL_GPIO_Init+0x330>)
 8009d66:	4286      	cmp	r6, r0
 8009d68:	bf0c      	ite	eq
 8009d6a:	2009      	moveq	r0, #9
 8009d6c:	200a      	movne	r0, #10
 8009d6e:	fa00 f303 	lsl.w	r3, r0, r3
 8009d72:	4319      	orrs	r1, r3
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009d74:	4b54      	ldr	r3, [pc, #336]	; (8009ec8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 8009d76:	ea6f 0009 	mvn.w	r0, r9
        SYSCFG->EXTICR[position >> 2] = temp;
 8009d7a:	60a1      	str	r1, [r4, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8009d7c:	02d4      	lsls	r4, r2, #11
        temp = EXTI->RTSR;
 8009d7e:	6899      	ldr	r1, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009d80:	f105 0501 	add.w	r5, r5, #1
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8009d84:	4b50      	ldr	r3, [pc, #320]	; (8009ec8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 8009d86:	bf54      	ite	pl
 8009d88:	4001      	andpl	r1, r0
          temp |= iocurrent;
 8009d8a:	ea49 0101 	orrmi.w	r1, r9, r1
        EXTI->RTSR = temp;
 8009d8e:	6099      	str	r1, [r3, #8]

        temp = EXTI->FTSR;
 8009d90:	68d9      	ldr	r1, [r3, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8009d92:	0293      	lsls	r3, r2, #10
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8009d94:	4b4c      	ldr	r3, [pc, #304]	; (8009ec8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 8009d96:	bf54      	ite	pl
 8009d98:	4001      	andpl	r1, r0
          temp |= iocurrent;
 8009d9a:	ea49 0101 	orrmi.w	r1, r9, r1

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8009d9e:	0394      	lsls	r4, r2, #14
        EXTI->FTSR = temp;
 8009da0:	60d9      	str	r1, [r3, #12]
        temp = EXTI->EMR;
 8009da2:	6859      	ldr	r1, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8009da4:	4b48      	ldr	r3, [pc, #288]	; (8009ec8 <HAL_GPIO_Init+0x334>)
        temp &= ~((uint32_t)iocurrent);
 8009da6:	bf54      	ite	pl
 8009da8:	4001      	andpl	r1, r0
          temp |= iocurrent;
 8009daa:	ea49 0101 	orrmi.w	r1, r9, r1

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009dae:	03d2      	lsls	r2, r2, #15
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8009db0:	4a45      	ldr	r2, [pc, #276]	; (8009ec8 <HAL_GPIO_Init+0x334>)
        EXTI->EMR = temp;
 8009db2:	6059      	str	r1, [r3, #4]
        temp = EXTI->IMR;
 8009db4:	681b      	ldr	r3, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8009db6:	bf54      	ite	pl
 8009db8:	4003      	andpl	r3, r0
          temp |= iocurrent;
 8009dba:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 8009dbe:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 8009dc0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8009dc2:	f47f af4c 	bne.w	8009c5e <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 8009dc6:	b005      	add	sp, #20
 8009dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	2803      	cmp	r0, #3
 8009dd0:	d822      	bhi.n	8009e18 <HAL_GPIO_Init+0x284>
        temp = GPIOx->OSPEEDR; 
 8009dd2:	ea4f 0a45 	mov.w	sl, r5, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009dd6:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR; 
 8009dda:	f8d6 c008 	ldr.w	ip, [r6, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009dde:	f3c2 1100 	ubfx	r1, r2, #4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009de2:	fa08 f80a 	lsl.w	r8, r8, sl
        temp |= (GPIO_Init->Speed << (position * 2));
 8009de6:	fa00 f00a 	lsl.w	r0, r0, sl
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009dea:	40a9      	lsls	r1, r5
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8009dec:	ea2c 0c08 	bic.w	ip, ip, r8
 8009df0:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2));
 8009df4:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->OSPEEDR = temp;
 8009df8:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 8009dfa:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009dfc:	ea20 0404 	bic.w	r4, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009e00:	4321      	orrs	r1, r4
        GPIOx->OTYPER = temp;
 8009e02:	6071      	str	r1, [r6, #4]
 8009e04:	e742      	b.n	8009c8c <HAL_GPIO_Init+0xf8>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8009e06:	21ce      	movs	r1, #206	; 0xce
 8009e08:	4826      	ldr	r0, [pc, #152]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009e0a:	f7f9 ff97 	bl	8003d3c <assert_failed>
 8009e0e:	e9d7 2101 	ldrd	r2, r1, [r7, #4]
 8009e12:	f002 0303 	and.w	r3, r2, #3
 8009e16:	e73f      	b.n	8009c98 <HAL_GPIO_Init+0x104>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8009e18:	4822      	ldr	r0, [pc, #136]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009e1a:	21bd      	movs	r1, #189	; 0xbd
 8009e1c:	f7f9 ff8e 	bl	8003d3c <assert_failed>
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	68f8      	ldr	r0, [r7, #12]
 8009e24:	f002 0303 	and.w	r3, r2, #3
 8009e28:	e7d3      	b.n	8009dd2 <HAL_GPIO_Init+0x23e>
 8009e2a:	2001      	movs	r0, #1
 8009e2c:	fa00 f303 	lsl.w	r3, r0, r3
 8009e30:	4319      	orrs	r1, r3
 8009e32:	e79f      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009e34:	2002      	movs	r0, #2
 8009e36:	fa00 f303 	lsl.w	r3, r0, r3
 8009e3a:	4319      	orrs	r1, r3
 8009e3c:	e79a      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8009e3e:	21ab      	movs	r1, #171	; 0xab
 8009e40:	4818      	ldr	r0, [pc, #96]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009e42:	f7f9 ff7b 	bl	8003d3c <assert_failed>
 8009e46:	e6e0      	b.n	8009c0a <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8009e48:	21db      	movs	r1, #219	; 0xdb
 8009e4a:	4816      	ldr	r0, [pc, #88]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009e4c:	f7f9 ff76 	bl	8003d3c <assert_failed>
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	f8d7 e010 	ldr.w	lr, [r7, #16]
 8009e56:	f002 0303 	and.w	r3, r2, #3
 8009e5a:	e72d      	b.n	8009cb8 <HAL_GPIO_Init+0x124>
 8009e5c:	2003      	movs	r0, #3
 8009e5e:	fa00 f303 	lsl.w	r3, r0, r3
 8009e62:	4319      	orrs	r1, r3
 8009e64:	e786      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009e66:	2004      	movs	r0, #4
 8009e68:	fa00 f303 	lsl.w	r3, r0, r3
 8009e6c:	4319      	orrs	r1, r3
 8009e6e:	e781      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009e70:	2007      	movs	r0, #7
 8009e72:	fa00 f303 	lsl.w	r3, r0, r3
 8009e76:	4319      	orrs	r1, r3
 8009e78:	e77c      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009e7a:	2005      	movs	r0, #5
 8009e7c:	fa00 f303 	lsl.w	r3, r0, r3
 8009e80:	4319      	orrs	r1, r3
 8009e82:	e777      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009e84:	2006      	movs	r0, #6
 8009e86:	fa00 f303 	lsl.w	r3, r0, r3
 8009e8a:	4319      	orrs	r1, r3
 8009e8c:	e772      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8009e8e:	21ac      	movs	r1, #172	; 0xac
 8009e90:	4804      	ldr	r0, [pc, #16]	; (8009ea4 <HAL_GPIO_Init+0x310>)
 8009e92:	f7f9 ff53 	bl	8003d3c <assert_failed>
 8009e96:	e6da      	b.n	8009c4e <HAL_GPIO_Init+0xba>
 8009e98:	40020400 	.word	0x40020400
 8009e9c:	40020000 	.word	0x40020000
 8009ea0:	40020800 	.word	0x40020800
 8009ea4:	0802985c 	.word	0x0802985c
 8009ea8:	40013800 	.word	0x40013800
 8009eac:	40020c00 	.word	0x40020c00
 8009eb0:	40021000 	.word	0x40021000
 8009eb4:	40021400 	.word	0x40021400
 8009eb8:	40021800 	.word	0x40021800
 8009ebc:	40021c00 	.word	0x40021c00
 8009ec0:	40022000 	.word	0x40022000
 8009ec4:	40022400 	.word	0x40022400
 8009ec8:	40013c00 	.word	0x40013c00
 8009ecc:	40023800 	.word	0x40023800
 8009ed0:	2008      	movs	r0, #8
 8009ed2:	fa00 f303 	lsl.w	r3, r0, r3
 8009ed6:	4319      	orrs	r1, r3
 8009ed8:	e74c      	b.n	8009d74 <HAL_GPIO_Init+0x1e0>
 8009eda:	bf00      	nop

08009edc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009edc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ee0:	4a6d      	ldr	r2, [pc, #436]	; (800a098 <HAL_GPIO_DeInit+0x1bc>)
{
 8009ee2:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ee4:	4b6d      	ldr	r3, [pc, #436]	; (800a09c <HAL_GPIO_DeInit+0x1c0>)
{
 8009ee6:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8009ee8:	4290      	cmp	r0, r2
 8009eea:	bf18      	it	ne
 8009eec:	4298      	cmpne	r0, r3
 8009eee:	bf14      	ite	ne
 8009ef0:	f04f 0801 	movne.w	r8, #1
 8009ef4:	f04f 0800 	moveq.w	r8, #0
 8009ef8:	d028      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009efa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009efe:	4298      	cmp	r0, r3
 8009f00:	d024      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f06:	4298      	cmp	r0, r3
 8009f08:	d020      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f0e:	4298      	cmp	r0, r3
 8009f10:	d01c      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f16:	4298      	cmp	r0, r3
 8009f18:	d018      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f1a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f1e:	4298      	cmp	r0, r3
 8009f20:	d014      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f26:	4298      	cmp	r0, r3
 8009f28:	d010      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f2a:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8009f2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f32:	4290      	cmp	r0, r2
 8009f34:	bf18      	it	ne
 8009f36:	4298      	cmpne	r0, r3
 8009f38:	d008      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	d004      	beq.n	8009f4c <HAL_GPIO_DeInit+0x70>
 8009f42:	f240 112b 	movw	r1, #299	; 0x12b
 8009f46:	4856      	ldr	r0, [pc, #344]	; (800a0a0 <HAL_GPIO_DeInit+0x1c4>)
 8009f48:	f7f9 fef8 	bl	8003d3c <assert_failed>
{
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	f8df b174 	ldr.w	fp, [pc, #372]	; 800a0c4 <HAL_GPIO_DeInit+0x1e8>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009f52:	f8df a144 	ldr.w	sl, [pc, #324]	; 800a098 <HAL_GPIO_DeInit+0x1bc>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009f56:	f8df 9170 	ldr.w	r9, [pc, #368]	; 800a0c8 <HAL_GPIO_DeInit+0x1ec>
 8009f5a:	e002      	b.n	8009f62 <HAL_GPIO_DeInit+0x86>
  for(position = 0; position < GPIO_NUMBER; position++)
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d07c      	beq.n	800a05c <HAL_GPIO_DeInit+0x180>
    ioposition = ((uint32_t)0x01) << position;
 8009f62:	2001      	movs	r0, #1
 8009f64:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 8009f68:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 8009f6c:	ea02 0c05 	and.w	ip, r2, r5
    if(iocurrent == ioposition)
 8009f70:	d1f4      	bne.n	8009f5c <HAL_GPIO_DeInit+0x80>
      tmp = SYSCFG->EXTICR[position >> 2];
 8009f72:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009f76:	f003 0103 	and.w	r1, r3, #3
 8009f7a:	270f      	movs	r7, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009f7c:	4554      	cmp	r4, sl
 8009f7e:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009f80:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 8009f84:	f8d6 e008 	ldr.w	lr, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8009f88:	fa07 f701 	lsl.w	r7, r7, r1
 8009f8c:	ea07 0e0e 	and.w	lr, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8009f90:	d01f      	beq.n	8009fd2 <HAL_GPIO_DeInit+0xf6>
 8009f92:	f1b8 0f00 	cmp.w	r8, #0
 8009f96:	d064      	beq.n	800a062 <HAL_GPIO_DeInit+0x186>
 8009f98:	4842      	ldr	r0, [pc, #264]	; (800a0a4 <HAL_GPIO_DeInit+0x1c8>)
 8009f9a:	4284      	cmp	r4, r0
 8009f9c:	d064      	beq.n	800a068 <HAL_GPIO_DeInit+0x18c>
 8009f9e:	4842      	ldr	r0, [pc, #264]	; (800a0a8 <HAL_GPIO_DeInit+0x1cc>)
 8009fa0:	4284      	cmp	r4, r0
 8009fa2:	d065      	beq.n	800a070 <HAL_GPIO_DeInit+0x194>
 8009fa4:	4841      	ldr	r0, [pc, #260]	; (800a0ac <HAL_GPIO_DeInit+0x1d0>)
 8009fa6:	4284      	cmp	r4, r0
 8009fa8:	d066      	beq.n	800a078 <HAL_GPIO_DeInit+0x19c>
 8009faa:	4841      	ldr	r0, [pc, #260]	; (800a0b0 <HAL_GPIO_DeInit+0x1d4>)
 8009fac:	4284      	cmp	r4, r0
 8009fae:	d067      	beq.n	800a080 <HAL_GPIO_DeInit+0x1a4>
 8009fb0:	4840      	ldr	r0, [pc, #256]	; (800a0b4 <HAL_GPIO_DeInit+0x1d8>)
 8009fb2:	4284      	cmp	r4, r0
 8009fb4:	d054      	beq.n	800a060 <HAL_GPIO_DeInit+0x184>
 8009fb6:	4840      	ldr	r0, [pc, #256]	; (800a0b8 <HAL_GPIO_DeInit+0x1dc>)
 8009fb8:	4284      	cmp	r4, r0
 8009fba:	d065      	beq.n	800a088 <HAL_GPIO_DeInit+0x1ac>
 8009fbc:	483f      	ldr	r0, [pc, #252]	; (800a0bc <HAL_GPIO_DeInit+0x1e0>)
 8009fbe:	4284      	cmp	r4, r0
 8009fc0:	d066      	beq.n	800a090 <HAL_GPIO_DeInit+0x1b4>
 8009fc2:	483f      	ldr	r0, [pc, #252]	; (800a0c0 <HAL_GPIO_DeInit+0x1e4>)
 8009fc4:	4284      	cmp	r4, r0
 8009fc6:	bf14      	ite	ne
 8009fc8:	200a      	movne	r0, #10
 8009fca:	2009      	moveq	r0, #9
 8009fcc:	fa00 f101 	lsl.w	r1, r0, r1
 8009fd0:	e000      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	458e      	cmp	lr, r1
 8009fd6:	d11b      	bne.n	800a010 <HAL_GPIO_DeInit+0x134>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009fd8:	f8d9 1000 	ldr.w	r1, [r9]
 8009fdc:	ea21 010c 	bic.w	r1, r1, ip
 8009fe0:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009fe4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fe8:	ea21 010c 	bic.w	r1, r1, ip
 8009fec:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009ff0:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8009ff4:	ea21 010c 	bic.w	r1, r1, ip
 8009ff8:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009ffc:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800a000:	ea21 010c 	bic.w	r1, r1, ip
 800a004:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800a008:	68b1      	ldr	r1, [r6, #8]
 800a00a:	ea21 0707 	bic.w	r7, r1, r7
 800a00e:	60b7      	str	r7, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a010:	0059      	lsls	r1, r3, #1
 800a012:	2603      	movs	r6, #3
 800a014:	f8d4 c000 	ldr.w	ip, [r4]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a018:	270f      	movs	r7, #15
 800a01a:	fa23 f006 	lsr.w	r0, r3, r6
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a01e:	408e      	lsls	r6, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a020:	f003 0107 	and.w	r1, r3, #7
  for(position = 0; position < GPIO_NUMBER; position++)
 800a024:	3301      	adds	r3, #1
 800a026:	eb04 0080 	add.w	r0, r4, r0, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a02a:	ea2c 0c06 	bic.w	ip, ip, r6
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a02e:	0089      	lsls	r1, r1, #2
  for(position = 0; position < GPIO_NUMBER; position++)
 800a030:	2b10      	cmp	r3, #16
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800a032:	f8c4 c000 	str.w	ip, [r4]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800a036:	fa07 f701 	lsl.w	r7, r7, r1
 800a03a:	6a01      	ldr	r1, [r0, #32]
 800a03c:	ea21 0107 	bic.w	r1, r1, r7
 800a040:	6201      	str	r1, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800a042:	68e1      	ldr	r1, [r4, #12]
 800a044:	ea21 0106 	bic.w	r1, r1, r6
 800a048:	60e1      	str	r1, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a04a:	6861      	ldr	r1, [r4, #4]
 800a04c:	ea21 0202 	bic.w	r2, r1, r2
 800a050:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800a052:	68a2      	ldr	r2, [r4, #8]
 800a054:	ea22 0606 	bic.w	r6, r2, r6
 800a058:	60a6      	str	r6, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800a05a:	d182      	bne.n	8009f62 <HAL_GPIO_DeInit+0x86>
    }
  }
}
 800a05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a060:	2006      	movs	r0, #6
 800a062:	fa00 f101 	lsl.w	r1, r0, r1
 800a066:	e7b5      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a068:	2002      	movs	r0, #2
 800a06a:	fa00 f101 	lsl.w	r1, r0, r1
 800a06e:	e7b1      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a070:	2003      	movs	r0, #3
 800a072:	fa00 f101 	lsl.w	r1, r0, r1
 800a076:	e7ad      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a078:	2004      	movs	r0, #4
 800a07a:	fa00 f101 	lsl.w	r1, r0, r1
 800a07e:	e7a9      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a080:	2005      	movs	r0, #5
 800a082:	fa00 f101 	lsl.w	r1, r0, r1
 800a086:	e7a5      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a088:	2007      	movs	r0, #7
 800a08a:	fa00 f101 	lsl.w	r1, r0, r1
 800a08e:	e7a1      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a090:	2008      	movs	r0, #8
 800a092:	fa00 f101 	lsl.w	r1, r0, r1
 800a096:	e79d      	b.n	8009fd4 <HAL_GPIO_DeInit+0xf8>
 800a098:	40020000 	.word	0x40020000
 800a09c:	40020400 	.word	0x40020400
 800a0a0:	0802985c 	.word	0x0802985c
 800a0a4:	40020800 	.word	0x40020800
 800a0a8:	40020c00 	.word	0x40020c00
 800a0ac:	40021000 	.word	0x40021000
 800a0b0:	40021400 	.word	0x40021400
 800a0b4:	40021800 	.word	0x40021800
 800a0b8:	40021c00 	.word	0x40021c00
 800a0bc:	40022000 	.word	0x40022000
 800a0c0:	40022400 	.word	0x40022400
 800a0c4:	40013800 	.word	0x40013800
 800a0c8:	40013c00 	.word	0x40013c00

0800a0cc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a0cc:	b538      	push	{r3, r4, r5, lr}
 800a0ce:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a0d0:	460c      	mov	r4, r1
 800a0d2:	b129      	cbz	r1, 800a0e0 <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a0d4:	692b      	ldr	r3, [r5, #16]
 800a0d6:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800a0d8:	bf14      	ite	ne
 800a0da:	2001      	movne	r0, #1
 800a0dc:	2000      	moveq	r0, #0
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a0e0:	f240 1177 	movw	r1, #375	; 0x177
 800a0e4:	4801      	ldr	r0, [pc, #4]	; (800a0ec <HAL_GPIO_ReadPin+0x20>)
 800a0e6:	f7f9 fe29 	bl	8003d3c <assert_failed>
 800a0ea:	e7f3      	b.n	800a0d4 <HAL_GPIO_ReadPin+0x8>
 800a0ec:	0802985c 	.word	0x0802985c

0800a0f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a0f0:	b570      	push	{r4, r5, r6, lr}
 800a0f2:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a0f4:	460c      	mov	r4, r1
{
 800a0f6:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a0f8:	b161      	cbz	r1, 800a114 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800a0fa:	2d01      	cmp	r5, #1
 800a0fc:	d803      	bhi.n	800a106 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800a0fe:	b905      	cbnz	r5, 800a102 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a100:	0424      	lsls	r4, r4, #16
 800a102:	61b4      	str	r4, [r6, #24]
  }
}
 800a104:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800a106:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800a10a:	4805      	ldr	r0, [pc, #20]	; (800a120 <HAL_GPIO_WritePin+0x30>)
 800a10c:	f7f9 fe16 	bl	8003d3c <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800a110:	61b4      	str	r4, [r6, #24]
}
 800a112:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a114:	f240 1197 	movw	r1, #407	; 0x197
 800a118:	4801      	ldr	r0, [pc, #4]	; (800a120 <HAL_GPIO_WritePin+0x30>)
 800a11a:	f7f9 fe0f 	bl	8003d3c <assert_failed>
 800a11e:	e7ec      	b.n	800a0fa <HAL_GPIO_WritePin+0xa>
 800a120:	0802985c 	.word	0x0802985c

0800a124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a124:	b538      	push	{r3, r4, r5, lr}
 800a126:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a128:	460c      	mov	r4, r1
 800a12a:	b141      	cbz	r1, 800a13e <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a12c:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a12e:	ea04 0301 	and.w	r3, r4, r1
 800a132:	ea24 0401 	bic.w	r4, r4, r1
 800a136:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800a13a:	61ac      	str	r4, [r5, #24]
}
 800a13c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800a13e:	f240 11af 	movw	r1, #431	; 0x1af
 800a142:	4802      	ldr	r0, [pc, #8]	; (800a14c <HAL_GPIO_TogglePin+0x28>)
 800a144:	f7f9 fdfa 	bl	8003d3c <assert_failed>
 800a148:	e7f0      	b.n	800a12c <HAL_GPIO_TogglePin+0x8>
 800a14a:	bf00      	nop
 800a14c:	0802985c 	.word	0x0802985c

0800a150 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop

0800a154 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800a154:	4a04      	ldr	r2, [pc, #16]	; (800a168 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800a156:	6951      	ldr	r1, [r2, #20]
 800a158:	4201      	tst	r1, r0
 800a15a:	d100      	bne.n	800a15e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800a15c:	4770      	bx	lr
{
 800a15e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a160:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a162:	f7ff fff5 	bl	800a150 <HAL_GPIO_EXTI_Callback>
}
 800a166:	bd08      	pop	{r3, pc}
 800a168:	40013c00 	.word	0x40013c00

0800a16c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a16c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a170:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 800a234 <I2C_TransferConfig+0xc8>
{
 800a174:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a176:	4e28      	ldr	r6, [pc, #160]	; (800a218 <I2C_TransferConfig+0xac>)
{
 800a178:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a17a:	6801      	ldr	r1, [r0, #0]
{
 800a17c:	4614      	mov	r4, r2
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a17e:	4827      	ldr	r0, [pc, #156]	; (800a21c <I2C_TransferConfig+0xb0>)
{
 800a180:	461f      	mov	r7, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a182:	42b1      	cmp	r1, r6
 800a184:	bf18      	it	ne
 800a186:	4561      	cmpne	r1, ip
{
 800a188:	f8dd 9020 	ldr.w	r9, [sp, #32]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a18c:	bf14      	ite	ne
 800a18e:	2601      	movne	r6, #1
 800a190:	2600      	moveq	r6, #0
 800a192:	4281      	cmp	r1, r0
 800a194:	bf0c      	ite	eq
 800a196:	2600      	moveq	r6, #0
 800a198:	f006 0601 	andne.w	r6, r6, #1
 800a19c:	b116      	cbz	r6, 800a1a4 <I2C_TransferConfig+0x38>
 800a19e:	4b20      	ldr	r3, [pc, #128]	; (800a220 <I2C_TransferConfig+0xb4>)
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	d126      	bne.n	800a1f2 <I2C_TransferConfig+0x86>
  assert_param(IS_TRANSFER_MODE(Mode));
 800a1a4:	f037 7380 	bics.w	r3, r7, #16777216	; 0x1000000
 800a1a8:	d002      	beq.n	800a1b0 <I2C_TransferConfig+0x44>
 800a1aa:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800a1ae:	d12c      	bne.n	800a20a <I2C_TransferConfig+0x9e>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800a1b0:	4b1c      	ldr	r3, [pc, #112]	; (800a224 <I2C_TransferConfig+0xb8>)
 800a1b2:	4599      	cmp	r9, r3
 800a1b4:	d007      	beq.n	800a1c6 <I2C_TransferConfig+0x5a>
 800a1b6:	f429 6380 	bic.w	r3, r9, #1024	; 0x400
 800a1ba:	4a1b      	ldr	r2, [pc, #108]	; (800a228 <I2C_TransferConfig+0xbc>)
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	d002      	beq.n	800a1c6 <I2C_TransferConfig+0x5a>
 800a1c0:	f1b9 0f00 	cmp.w	r9, #0
 800a1c4:	d11b      	bne.n	800a1fe <I2C_TransferConfig+0x92>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1ca:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1ce:	f3c5 0509 	ubfx	r5, r5, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1d2:	4816      	ldr	r0, [pc, #88]	; (800a22c <I2C_TransferConfig+0xc0>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1d4:	ea44 0307 	orr.w	r3, r4, r7
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1d8:	684a      	ldr	r2, [r1, #4]
 800a1da:	ea40 5959 	orr.w	r9, r0, r9, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1de:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1e0:	ea22 0909 	bic.w	r9, r2, r9
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a1e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800a1e8:	ea43 0309 	orr.w	r3, r3, r9
 800a1ec:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a1f2:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800a1f6:	480e      	ldr	r0, [pc, #56]	; (800a230 <I2C_TransferConfig+0xc4>)
 800a1f8:	f7f9 fda0 	bl	8003d3c <assert_failed>
 800a1fc:	e7d2      	b.n	800a1a4 <I2C_TransferConfig+0x38>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800a1fe:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800a202:	480b      	ldr	r0, [pc, #44]	; (800a230 <I2C_TransferConfig+0xc4>)
 800a204:	f7f9 fd9a 	bl	8003d3c <assert_failed>
 800a208:	e7dd      	b.n	800a1c6 <I2C_TransferConfig+0x5a>
  assert_param(IS_TRANSFER_MODE(Mode));
 800a20a:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800a20e:	4808      	ldr	r0, [pc, #32]	; (800a230 <I2C_TransferConfig+0xc4>)
 800a210:	f7f9 fd94 	bl	8003d3c <assert_failed>
 800a214:	e7cc      	b.n	800a1b0 <I2C_TransferConfig+0x44>
 800a216:	bf00      	nop
 800a218:	40005400 	.word	0x40005400
 800a21c:	40005c00 	.word	0x40005c00
 800a220:	40006000 	.word	0x40006000
 800a224:	80004000 	.word	0x80004000
 800a228:	80002000 	.word	0x80002000
 800a22c:	03ff63ff 	.word	0x03ff63ff
 800a230:	08029898 	.word	0x08029898
 800a234:	40005800 	.word	0x40005800

0800a238 <I2C_IsErrorOccurred>:
{
 800a238:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800a23c:	6803      	ldr	r3, [r0, #0]
{
 800a23e:	460d      	mov	r5, r1
 800a240:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800a242:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a244:	f011 0110 	ands.w	r1, r1, #16
 800a248:	d045      	beq.n	800a2d6 <I2C_IsErrorOccurred+0x9e>
 800a24a:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800a24c:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a250:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800a252:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a256:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a258:	699a      	ldr	r2, [r3, #24]
 800a25a:	0696      	lsls	r6, r2, #26
 800a25c:	f100 808d 	bmi.w	800a37a <I2C_IsErrorOccurred+0x142>
 800a260:	f1b9 0f00 	cmp.w	r9, #0
 800a264:	f040 808d 	bne.w	800a382 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800a268:	1c6a      	adds	r2, r5, #1
 800a26a:	d152      	bne.n	800a312 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a26c:	699a      	ldr	r2, [r3, #24]
 800a26e:	0697      	lsls	r7, r2, #26
 800a270:	d5fc      	bpl.n	800a26c <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a272:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800a274:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800a276:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a27a:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800a27c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a27e:	05d5      	lsls	r5, r2, #23
 800a280:	d42d      	bmi.n	800a2de <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a282:	0557      	lsls	r7, r2, #21
 800a284:	d53d      	bpl.n	800a302 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a286:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800a28a:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a28e:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a290:	0596      	lsls	r6, r2, #22
 800a292:	d504      	bpl.n	800a29e <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a294:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800a298:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a29c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800a29e:	699a      	ldr	r2, [r3, #24]
 800a2a0:	0790      	lsls	r0, r2, #30
 800a2a2:	d501      	bpl.n	800a2a8 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800a2a8:	699a      	ldr	r2, [r3, #24]
 800a2aa:	07d2      	lsls	r2, r2, #31
 800a2ac:	d524      	bpl.n	800a2f8 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800a2ae:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2b0:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800a2b2:	4e35      	ldr	r6, [pc, #212]	; (800a388 <I2C_IsErrorOccurred+0x150>)
    hi2c->State = HAL_I2C_STATE_READY;
 800a2b4:	2520      	movs	r5, #32
    __HAL_UNLOCK(hi2c);
 800a2b6:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800a2ba:	4032      	ands	r2, r6
 800a2bc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800a2be:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800a2c0:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800a2c4:	4319      	orrs	r1, r3
 800a2c6:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a2c8:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2cc:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800a2d0:	4648      	mov	r0, r9
 800a2d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800a2d6:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800a2d8:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2da:	05d5      	lsls	r5, r2, #23
 800a2dc:	d5d1      	bpl.n	800a282 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2de:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800a2e2:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2e6:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a2e8:	0550      	lsls	r0, r2, #21
 800a2ea:	d5d1      	bpl.n	800a290 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2ec:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800a2f0:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a2f4:	61d8      	str	r0, [r3, #28]
 800a2f6:	e7cb      	b.n	800a290 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800a2f8:	699a      	ldr	r2, [r3, #24]
 800a2fa:	f042 0201 	orr.w	r2, r2, #1
 800a2fe:	619a      	str	r2, [r3, #24]
 800a300:	e7d5      	b.n	800a2ae <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a302:	0595      	lsls	r5, r2, #22
 800a304:	d4c6      	bmi.n	800a294 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800a306:	f1b9 0f00 	cmp.w	r9, #0
 800a30a:	d1c8      	bne.n	800a29e <I2C_IsErrorOccurred+0x66>
}
 800a30c:	4648      	mov	r0, r9
 800a30e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a312:	f7fc fd1b 	bl	8006d4c <HAL_GetTick>
 800a316:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a318:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a31a:	42a8      	cmp	r0, r5
 800a31c:	d801      	bhi.n	800a322 <I2C_IsErrorOccurred+0xea>
 800a31e:	2d00      	cmp	r5, #0
 800a320:	d19a      	bne.n	800a258 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a322:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800a324:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a328:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800a32a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a32c:	040e      	lsls	r6, r1, #16
 800a32e:	d50d      	bpl.n	800a34c <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800a330:	0441      	lsls	r1, r0, #17
 800a332:	d40b      	bmi.n	800a34c <I2C_IsErrorOccurred+0x114>
 800a334:	2a20      	cmp	r2, #32
 800a336:	d009      	beq.n	800a34c <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a338:	685a      	ldr	r2, [r3, #4]
 800a33a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a33e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800a340:	f7fc fd04 	bl	8006d4c <HAL_GetTick>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	4607      	mov	r7, r0
 800a348:	e000      	b.n	800a34c <I2C_IsErrorOccurred+0x114>
 800a34a:	6823      	ldr	r3, [r4, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a34c:	699e      	ldr	r6, [r3, #24]
 800a34e:	f016 0620 	ands.w	r6, r6, #32
 800a352:	d181      	bne.n	800a258 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a354:	f7fc fcfa 	bl	8006d4c <HAL_GetTick>
 800a358:	1bc0      	subs	r0, r0, r7
 800a35a:	2819      	cmp	r0, #25
 800a35c:	d9f5      	bls.n	800a34a <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a35e:	6c62      	ldr	r2, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800a360:	f04f 0901 	mov.w	r9, #1
 800a364:	6823      	ldr	r3, [r4, #0]
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a366:	f042 0220 	orr.w	r2, r2, #32
              __HAL_UNLOCK(hi2c);
 800a36a:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a36e:	6462      	str	r2, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a370:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a374:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800a378:	e7e8      	b.n	800a34c <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800a37a:	f1b9 0f00 	cmp.w	r9, #0
 800a37e:	f43f af78 	beq.w	800a272 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800a382:	2104      	movs	r1, #4
 800a384:	e7a8      	b.n	800a2d8 <I2C_IsErrorOccurred+0xa0>
 800a386:	bf00      	nop
 800a388:	fe00e800 	.word	0xfe00e800

0800a38c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	4604      	mov	r4, r0
 800a390:	460d      	mov	r5, r1
 800a392:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a394:	e00c      	b.n	800a3b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a396:	f7ff ff4f 	bl	800a238 <I2C_IsErrorOccurred>
 800a39a:	b9e8      	cbnz	r0, 800a3d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a39c:	6823      	ldr	r3, [r4, #0]
 800a39e:	699a      	ldr	r2, [r3, #24]
 800a3a0:	0691      	lsls	r1, r2, #26
 800a3a2:	d41b      	bmi.n	800a3dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a3a4:	f7fc fcd2 	bl	8006d4c <HAL_GetTick>
 800a3a8:	1b80      	subs	r0, r0, r6
 800a3aa:	42a8      	cmp	r0, r5
 800a3ac:	d809      	bhi.n	800a3c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800a3ae:	b145      	cbz	r5, 800a3c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3b0:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a3b2:	4632      	mov	r2, r6
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a3b8:	699b      	ldr	r3, [r3, #24]
 800a3ba:	075b      	lsls	r3, r3, #29
 800a3bc:	d5eb      	bpl.n	800a396 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800a3be:	2000      	movs	r0, #0
}
 800a3c0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3c2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a3c4:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800a3c6:	2100      	movs	r1, #0
      return HAL_ERROR;
 800a3c8:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3ca:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800a3cc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a3d0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a3d2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800a3d6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a3d8:	2001      	movs	r0, #1
}
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a3dc:	699a      	ldr	r2, [r3, #24]
 800a3de:	0752      	lsls	r2, r2, #29
 800a3e0:	d502      	bpl.n	800a3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800a3e2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800a3e4:	2a00      	cmp	r2, #0
 800a3e6:	d1ea      	bne.n	800a3be <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a3e8:	699a      	ldr	r2, [r3, #24]
 800a3ea:	f012 0210 	ands.w	r2, r2, #16
 800a3ee:	d012      	beq.n	800a416 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3f0:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a3f2:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3f4:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a3f6:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a3f8:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800a3fa:	4e08      	ldr	r6, [pc, #32]	; (800a41c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3fc:	2100      	movs	r1, #0
        return HAL_ERROR;
 800a3fe:	2001      	movs	r0, #1
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a400:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800a402:	685a      	ldr	r2, [r3, #4]
 800a404:	4032      	ands	r2, r6
 800a406:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800a408:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800a40c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a410:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800a414:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a416:	6462      	str	r2, [r4, #68]	; 0x44
 800a418:	e7ee      	b.n	800a3f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800a41a:	bf00      	nop
 800a41c:	fe00e800 	.word	0xfe00e800

0800a420 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800a420:	b570      	push	{r4, r5, r6, lr}
 800a422:	4604      	mov	r4, r0
 800a424:	460d      	mov	r5, r1
 800a426:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a428:	e004      	b.n	800a434 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a42a:	f7ff ff05 	bl	800a238 <I2C_IsErrorOccurred>
 800a42e:	b950      	cbnz	r0, 800a446 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800a430:	1c6a      	adds	r2, r5, #1
 800a432:	d10a      	bne.n	800a44a <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a434:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a436:	4632      	mov	r2, r6
 800a438:	4629      	mov	r1, r5
 800a43a:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	079b      	lsls	r3, r3, #30
 800a440:	d5f3      	bpl.n	800a42a <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800a442:	2000      	movs	r0, #0
}
 800a444:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a446:	2001      	movs	r0, #1
}
 800a448:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a44a:	f7fc fc7f 	bl	8006d4c <HAL_GetTick>
 800a44e:	1b80      	subs	r0, r0, r6
 800a450:	42a8      	cmp	r0, r5
 800a452:	d801      	bhi.n	800a458 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800a454:	2d00      	cmp	r5, #0
 800a456:	d1ed      	bne.n	800a434 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a458:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a45a:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a45c:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800a45e:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a460:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800a462:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a466:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a468:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a46c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800a470:	bd70      	pop	{r4, r5, r6, pc}
 800a472:	bf00      	nop

0800a474 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800a474:	b570      	push	{r4, r5, r6, lr}
 800a476:	4605      	mov	r5, r0
 800a478:	460c      	mov	r4, r1
 800a47a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a47c:	e008      	b.n	800a490 <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a47e:	f7ff fedb 	bl	800a238 <I2C_IsErrorOccurred>
 800a482:	b9d8      	cbnz	r0, 800a4bc <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a484:	f7fc fc62 	bl	8006d4c <HAL_GetTick>
 800a488:	1b80      	subs	r0, r0, r6
 800a48a:	42a0      	cmp	r0, r4
 800a48c:	d809      	bhi.n	800a4a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800a48e:	b144      	cbz	r4, 800a4a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a490:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a492:	4632      	mov	r2, r6
 800a494:	4621      	mov	r1, r4
 800a496:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a498:	699b      	ldr	r3, [r3, #24]
 800a49a:	069b      	lsls	r3, r3, #26
 800a49c:	d5ef      	bpl.n	800a47e <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800a49e:	2000      	movs	r0, #0
}
 800a4a0:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4a2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4a4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4a6:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800a4a8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4aa:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800a4ac:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4b0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a4b2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800a4ba:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800a4bc:	2001      	movs	r0, #1
}
 800a4be:	bd70      	pop	{r4, r5, r6, pc}

0800a4c0 <I2C_WaitOnFlagUntilTimeout>:
{
 800a4c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4c4:	4680      	mov	r8, r0
 800a4c6:	460f      	mov	r7, r1
 800a4c8:	4616      	mov	r6, r2
 800a4ca:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4cc:	f8d8 3000 	ldr.w	r3, [r8]
 800a4d0:	e001      	b.n	800a4d6 <I2C_WaitOnFlagUntilTimeout+0x16>
    if (Timeout != HAL_MAX_DELAY)
 800a4d2:	1c6a      	adds	r2, r5, #1
 800a4d4:	d10a      	bne.n	800a4ec <I2C_WaitOnFlagUntilTimeout+0x2c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800a4d6:	699c      	ldr	r4, [r3, #24]
 800a4d8:	ea37 0204 	bics.w	r2, r7, r4
 800a4dc:	bf0c      	ite	eq
 800a4de:	2401      	moveq	r4, #1
 800a4e0:	2400      	movne	r4, #0
 800a4e2:	42b4      	cmp	r4, r6
 800a4e4:	d0f5      	beq.n	800a4d2 <I2C_WaitOnFlagUntilTimeout+0x12>
  return HAL_OK;
 800a4e6:	2000      	movs	r0, #0
}
 800a4e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4ec:	f7fc fc2e 	bl	8006d4c <HAL_GetTick>
 800a4f0:	9b06      	ldr	r3, [sp, #24]
 800a4f2:	1ac0      	subs	r0, r0, r3
 800a4f4:	42a8      	cmp	r0, r5
 800a4f6:	d801      	bhi.n	800a4fc <I2C_WaitOnFlagUntilTimeout+0x3c>
 800a4f8:	2d00      	cmp	r5, #0
 800a4fa:	d1e7      	bne.n	800a4cc <I2C_WaitOnFlagUntilTimeout+0xc>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a4fc:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a500:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a502:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800a504:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a506:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800a508:	f888 2040 	strb.w	r2, [r8, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a50c:	f8c8 3044 	str.w	r3, [r8, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a510:	f888 1041 	strb.w	r1, [r8, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a514:	f888 2042 	strb.w	r2, [r8, #66]	; 0x42
        return HAL_ERROR;
 800a518:	e7e6      	b.n	800a4e8 <I2C_WaitOnFlagUntilTimeout+0x28>
 800a51a:	bf00      	nop

0800a51c <I2C_RequestMemoryRead>:
{
 800a51c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a520:	4f19      	ldr	r7, [pc, #100]	; (800a588 <I2C_RequestMemoryRead+0x6c>)
{
 800a522:	b082      	sub	sp, #8
 800a524:	461e      	mov	r6, r3
 800a526:	4604      	mov	r4, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a528:	9700      	str	r7, [sp, #0]
{
 800a52a:	4615      	mov	r5, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a52c:	2300      	movs	r3, #0
 800a52e:	b2f2      	uxtb	r2, r6
{
 800a530:	e9dd 7808 	ldrd	r7, r8, [sp, #32]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800a534:	f7ff fe1a 	bl	800a16c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a538:	4620      	mov	r0, r4
 800a53a:	4642      	mov	r2, r8
 800a53c:	4639      	mov	r1, r7
 800a53e:	f7ff ff6f 	bl	800a420 <I2C_WaitOnTXISFlagUntilTimeout>
 800a542:	b9e0      	cbnz	r0, 800a57e <I2C_RequestMemoryRead+0x62>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a544:	2e01      	cmp	r6, #1
 800a546:	d110      	bne.n	800a56a <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	b2ed      	uxtb	r5, r5
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a54c:	4620      	mov	r0, r4
 800a54e:	2200      	movs	r2, #0
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800a550:	629d      	str	r5, [r3, #40]	; 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800a552:	2140      	movs	r1, #64	; 0x40
 800a554:	463b      	mov	r3, r7
 800a556:	f8cd 8000 	str.w	r8, [sp]
 800a55a:	f7ff ffb1 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
    return HAL_ERROR;
 800a55e:	3800      	subs	r0, #0
 800a560:	bf18      	it	ne
 800a562:	2001      	movne	r0, #1
}
 800a564:	b002      	add	sp, #8
 800a566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a56a:	6820      	ldr	r0, [r4, #0]
 800a56c:	0a2b      	lsrs	r3, r5, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a56e:	4642      	mov	r2, r8
 800a570:	4639      	mov	r1, r7
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800a572:	6283      	str	r3, [r0, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a574:	4620      	mov	r0, r4
 800a576:	f7ff ff53 	bl	800a420 <I2C_WaitOnTXISFlagUntilTimeout>
 800a57a:	2800      	cmp	r0, #0
 800a57c:	d0e4      	beq.n	800a548 <I2C_RequestMemoryRead+0x2c>
    return HAL_ERROR;
 800a57e:	2001      	movs	r0, #1
}
 800a580:	b002      	add	sp, #8
 800a582:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a586:	bf00      	nop
 800a588:	80002000 	.word	0x80002000

0800a58c <HAL_I2C_Init>:
  if (hi2c == NULL)
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f000 80c0 	beq.w	800a712 <HAL_I2C_Init+0x186>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a592:	6802      	ldr	r2, [r0, #0]
 800a594:	4960      	ldr	r1, [pc, #384]	; (800a718 <HAL_I2C_Init+0x18c>)
{
 800a596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a598:	4b60      	ldr	r3, [pc, #384]	; (800a71c <HAL_I2C_Init+0x190>)
 800a59a:	4604      	mov	r4, r0
 800a59c:	4860      	ldr	r0, [pc, #384]	; (800a720 <HAL_I2C_Init+0x194>)
 800a59e:	429a      	cmp	r2, r3
 800a5a0:	bf18      	it	ne
 800a5a2:	4282      	cmpne	r2, r0
 800a5a4:	bf14      	ite	ne
 800a5a6:	2301      	movne	r3, #1
 800a5a8:	2300      	moveq	r3, #0
 800a5aa:	428a      	cmp	r2, r1
 800a5ac:	bf0c      	ite	eq
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	f003 0301 	andne.w	r3, r3, #1
 800a5b4:	b11b      	cbz	r3, 800a5be <HAL_I2C_Init+0x32>
 800a5b6:	4b5b      	ldr	r3, [pc, #364]	; (800a724 <HAL_I2C_Init+0x198>)
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	f040 80a4 	bne.w	800a706 <HAL_I2C_Init+0x17a>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5c4:	f080 8099 	bcs.w	800a6fa <HAL_I2C_Init+0x16e>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800a5c8:	68e3      	ldr	r3, [r4, #12]
 800a5ca:	3b01      	subs	r3, #1
 800a5cc:	2b01      	cmp	r3, #1
 800a5ce:	d854      	bhi.n	800a67a <HAL_I2C_Init+0xee>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800a5d0:	6923      	ldr	r3, [r4, #16]
 800a5d2:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800a5d6:	d159      	bne.n	800a68c <HAL_I2C_Init+0x100>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a5d8:	6963      	ldr	r3, [r4, #20]
 800a5da:	2bff      	cmp	r3, #255	; 0xff
 800a5dc:	d85e      	bhi.n	800a69c <HAL_I2C_Init+0x110>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800a5de:	69a3      	ldr	r3, [r4, #24]
 800a5e0:	2b07      	cmp	r3, #7
 800a5e2:	d863      	bhi.n	800a6ac <HAL_I2C_Init+0x120>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800a5e4:	69e3      	ldr	r3, [r4, #28]
 800a5e6:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800a5ea:	d168      	bne.n	800a6be <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800a5ec:	6a23      	ldr	r3, [r4, #32]
 800a5ee:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a5f2:	d16d      	bne.n	800a6d0 <HAL_I2C_Init+0x144>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a5f4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a5f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d072      	beq.n	800a6e6 <HAL_I2C_Init+0x15a>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a600:	2124      	movs	r1, #36	; 0x24
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a602:	68e0      	ldr	r0, [r4, #12]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a604:	e9d4 3200 	ldrd	r3, r2, [r4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800a608:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a60c:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800a60e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a610:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 800a614:	f021 0101 	bic.w	r1, r1, #1
 800a618:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a61a:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a61c:	689a      	ldr	r2, [r3, #8]
 800a61e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a622:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a624:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a626:	d064      	beq.n	800a6f2 <HAL_I2C_Init+0x166>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a628:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a62c:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a62e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a630:	d102      	bne.n	800a638 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a632:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a636:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a638:	685a      	ldr	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a63a:	2100      	movs	r1, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a63c:	483a      	ldr	r0, [pc, #232]	; (800a728 <HAL_I2C_Init+0x19c>)
  hi2c->State = HAL_I2C_STATE_READY;
 800a63e:	2720      	movs	r7, #32
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a640:	69a6      	ldr	r6, [r4, #24]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a642:	4310      	orrs	r0, r2
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a644:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a648:	6058      	str	r0, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a64a:	432a      	orrs	r2, r5
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a64c:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a64e:	69e5      	ldr	r5, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a650:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a654:	6a26      	ldr	r6, [r4, #32]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a656:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a65a:	4335      	orrs	r5, r6
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a65c:	60d8      	str	r0, [r3, #12]
  return HAL_OK;
 800a65e:	4608      	mov	r0, r1
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a660:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a662:	601d      	str	r5, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f042 0201 	orr.w	r2, r2, #1
 800a66a:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a66c:	6461      	str	r1, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a66e:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a672:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a674:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800a678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800a67a:	f240 2117 	movw	r1, #535	; 0x217
 800a67e:	482b      	ldr	r0, [pc, #172]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a680:	f7f9 fb5c 	bl	8003d3c <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800a684:	6923      	ldr	r3, [r4, #16]
 800a686:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800a68a:	d0a5      	beq.n	800a5d8 <HAL_I2C_Init+0x4c>
 800a68c:	f44f 7106 	mov.w	r1, #536	; 0x218
 800a690:	4826      	ldr	r0, [pc, #152]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a692:	f7f9 fb53 	bl	8003d3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	2bff      	cmp	r3, #255	; 0xff
 800a69a:	d9a0      	bls.n	800a5de <HAL_I2C_Init+0x52>
 800a69c:	f240 2119 	movw	r1, #537	; 0x219
 800a6a0:	4822      	ldr	r0, [pc, #136]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a6a2:	f7f9 fb4b 	bl	8003d3c <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800a6a6:	69a3      	ldr	r3, [r4, #24]
 800a6a8:	2b07      	cmp	r3, #7
 800a6aa:	d99b      	bls.n	800a5e4 <HAL_I2C_Init+0x58>
 800a6ac:	f240 211a 	movw	r1, #538	; 0x21a
 800a6b0:	481e      	ldr	r0, [pc, #120]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a6b2:	f7f9 fb43 	bl	8003d3c <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800a6b6:	69e3      	ldr	r3, [r4, #28]
 800a6b8:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800a6bc:	d096      	beq.n	800a5ec <HAL_I2C_Init+0x60>
 800a6be:	f240 211b 	movw	r1, #539	; 0x21b
 800a6c2:	481a      	ldr	r0, [pc, #104]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a6c4:	f7f9 fb3a 	bl	8003d3c <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800a6c8:	6a23      	ldr	r3, [r4, #32]
 800a6ca:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800a6ce:	d091      	beq.n	800a5f4 <HAL_I2C_Init+0x68>
 800a6d0:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800a6d4:	4815      	ldr	r0, [pc, #84]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a6d6:	f7f9 fb31 	bl	8003d3c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a6da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800a6de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d18c      	bne.n	800a600 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800a6e6:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800a6e8:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800a6ec:	f7fa fdae 	bl	800524c <HAL_I2C_MspInit>
 800a6f0:	e786      	b.n	800a600 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a6f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a6f6:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a6f8:	e79e      	b.n	800a638 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800a6fa:	f240 2116 	movw	r1, #534	; 0x216
 800a6fe:	480b      	ldr	r0, [pc, #44]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a700:	f7f9 fb1c 	bl	8003d3c <assert_failed>
 800a704:	e760      	b.n	800a5c8 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800a706:	f240 2115 	movw	r1, #533	; 0x215
 800a70a:	4808      	ldr	r0, [pc, #32]	; (800a72c <HAL_I2C_Init+0x1a0>)
 800a70c:	f7f9 fb16 	bl	8003d3c <assert_failed>
 800a710:	e755      	b.n	800a5be <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800a712:	2001      	movs	r0, #1
}
 800a714:	4770      	bx	lr
 800a716:	bf00      	nop
 800a718:	40005c00 	.word	0x40005c00
 800a71c:	40005400 	.word	0x40005400
 800a720:	40005800 	.word	0x40005800
 800a724:	40006000 	.word	0x40006000
 800a728:	02008000 	.word	0x02008000
 800a72c:	08029898 	.word	0x08029898

0800a730 <HAL_I2C_Master_Transmit>:
{
 800a730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a734:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a736:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a73a:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a73c:	2b20      	cmp	r3, #32
{
 800a73e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a740:	f040 808a 	bne.w	800a858 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 800a744:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a748:	4604      	mov	r4, r0
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	f000 8084 	beq.w	800a858 <HAL_I2C_Master_Transmit+0x128>
 800a750:	f04f 0a01 	mov.w	sl, #1
 800a754:	4688      	mov	r8, r1
 800a756:	4691      	mov	r9, r2
 800a758:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a75c:	f7fc faf6 	bl	8006d4c <HAL_GetTick>
 800a760:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a762:	4652      	mov	r2, sl
 800a764:	2319      	movs	r3, #25
 800a766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a76a:	4620      	mov	r0, r4
 800a76c:	9600      	str	r6, [sp, #0]
 800a76e:	f7ff fea7 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
 800a772:	2800      	cmp	r0, #0
 800a774:	d16c      	bne.n	800a850 <HAL_I2C_Master_Transmit+0x120>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a776:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a778:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800a77a:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a77e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a786:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a788:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a78a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a78c:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a78e:	b29b      	uxth	r3, r3
 800a790:	2bff      	cmp	r3, #255	; 0xff
 800a792:	d865      	bhi.n	800a860 <HAL_I2C_Master_Transmit+0x130>
      hi2c->XferSize = hi2c->XferCount;
 800a794:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a79a:	4d3c      	ldr	r5, [pc, #240]	; (800a88c <HAL_I2C_Master_Transmit+0x15c>)
 800a79c:	4641      	mov	r1, r8
      hi2c->XferSize = hi2c->XferCount;
 800a79e:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7a0:	4620      	mov	r0, r4
 800a7a2:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a7a4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a7a6:	b2d2      	uxtb	r2, r2
 800a7a8:	f7ff fce0 	bl	800a16c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a7ac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	4639      	mov	r1, r7
 800a7b2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a7b4:	b29b      	uxth	r3, r3
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d039      	beq.n	800a82e <HAL_I2C_Master_Transmit+0xfe>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7ba:	f7ff fe31 	bl	800a420 <I2C_WaitOnTXISFlagUntilTimeout>
 800a7be:	2800      	cmp	r0, #0
 800a7c0:	d146      	bne.n	800a850 <HAL_I2C_Master_Transmit+0x120>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a7c2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800a7c4:	6821      	ldr	r1, [r4, #0]
 800a7c6:	f812 5b01 	ldrb.w	r5, [r2], #1
      hi2c->XferSize--;
 800a7ca:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a7cc:	628d      	str	r5, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800a7ce:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a7d0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800a7d2:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800a7d4:	3d01      	subs	r5, #1
      hi2c->XferSize--;
 800a7d6:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800a7d8:	b2ad      	uxth	r5, r5
      hi2c->XferSize--;
 800a7da:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a7dc:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a7de:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800a7e0:	b292      	uxth	r2, r2
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1e2      	bne.n	800a7ac <HAL_I2C_Master_Transmit+0x7c>
 800a7e6:	2a00      	cmp	r2, #0
 800a7e8:	d0e0      	beq.n	800a7ac <HAL_I2C_Master_Transmit+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	463b      	mov	r3, r7
 800a7ee:	2180      	movs	r1, #128	; 0x80
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	9600      	str	r6, [sp, #0]
 800a7f4:	f7ff fe64 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a7f8:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a7fc:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a7fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a802:	4641      	mov	r1, r8
 800a804:	4620      	mov	r0, r4
 800a806:	4672      	mov	r2, lr
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a808:	bb15      	cbnz	r5, 800a850 <HAL_I2C_Master_Transmit+0x120>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a80a:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
 800a80e:	fa1f fc8c 	uxth.w	ip, ip
 800a812:	45f4      	cmp	ip, lr
 800a814:	d92f      	bls.n	800a876 <HAL_I2C_Master_Transmit+0x146>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a816:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a81a:	9500      	str	r5, [sp, #0]
 800a81c:	f7ff fca6 	bl	800a16c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a820:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a822:	4632      	mov	r2, r6
 800a824:	4639      	mov	r1, r7
    while (hi2c->XferCount > 0U)
 800a826:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a828:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d1c5      	bne.n	800a7ba <HAL_I2C_Master_Transmit+0x8a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a82e:	f7ff fe21 	bl	800a474 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a832:	b968      	cbnz	r0, 800a850 <HAL_I2C_Master_Transmit+0x120>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a834:	6823      	ldr	r3, [r4, #0]
 800a836:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800a838:	4d15      	ldr	r5, [pc, #84]	; (800a890 <HAL_I2C_Master_Transmit+0x160>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a83a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	402a      	ands	r2, r5
 800a840:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a842:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a846:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a84a:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a84e:	e000      	b.n	800a852 <HAL_I2C_Master_Transmit+0x122>
      return HAL_ERROR;
 800a850:	2001      	movs	r0, #1
}
 800a852:	b002      	add	sp, #8
 800a854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800a858:	2002      	movs	r0, #2
}
 800a85a:	b002      	add	sp, #8
 800a85c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a860:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a862:	480a      	ldr	r0, [pc, #40]	; (800a88c <HAL_I2C_Master_Transmit+0x15c>)
 800a864:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a868:	4641      	mov	r1, r8
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a86a:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a86c:	9000      	str	r0, [sp, #0]
 800a86e:	4620      	mov	r0, r4
 800a870:	f7ff fc7c 	bl	800a16c <I2C_TransferConfig>
 800a874:	e79a      	b.n	800a7ac <HAL_I2C_Master_Transmit+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 800a876:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a87c:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a87e:	b292      	uxth	r2, r2
 800a880:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a882:	b2d2      	uxtb	r2, r2
 800a884:	f7ff fc72 	bl	800a16c <I2C_TransferConfig>
 800a888:	e790      	b.n	800a7ac <HAL_I2C_Master_Transmit+0x7c>
 800a88a:	bf00      	nop
 800a88c:	80002000 	.word	0x80002000
 800a890:	fe00e800 	.word	0xfe00e800

0800a894 <HAL_I2C_Master_Receive>:
{
 800a894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a898:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a89a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800a89e:	b082      	sub	sp, #8
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8a0:	2b20      	cmp	r3, #32
{
 800a8a2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800a8a4:	f040 808b 	bne.w	800a9be <HAL_I2C_Master_Receive+0x12a>
    __HAL_LOCK(hi2c);
 800a8a8:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800a8ac:	4604      	mov	r4, r0
 800a8ae:	2b01      	cmp	r3, #1
 800a8b0:	f000 8085 	beq.w	800a9be <HAL_I2C_Master_Receive+0x12a>
 800a8b4:	f04f 0a01 	mov.w	sl, #1
 800a8b8:	4688      	mov	r8, r1
 800a8ba:	4691      	mov	r9, r2
 800a8bc:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800a8c0:	f7fc fa44 	bl	8006d4c <HAL_GetTick>
 800a8c4:	4606      	mov	r6, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a8c6:	4652      	mov	r2, sl
 800a8c8:	2319      	movs	r3, #25
 800a8ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	9600      	str	r6, [sp, #0]
 800a8d2:	f7ff fdf5 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
 800a8d6:	2800      	cmp	r0, #0
 800a8d8:	d16d      	bne.n	800a9b6 <HAL_I2C_Master_Receive+0x122>
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a8da:	2310      	movs	r3, #16
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8dc:	2222      	movs	r2, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800a8de:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a8e2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800a8e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8ea:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800a8ec:	8565      	strh	r5, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800a8f0:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a8f2:	b29b      	uxth	r3, r3
 800a8f4:	2bff      	cmp	r3, #255	; 0xff
 800a8f6:	d866      	bhi.n	800a9c6 <HAL_I2C_Master_Receive+0x132>
      hi2c->XferSize = hi2c->XferCount;
 800a8f8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8fa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a8fe:	4d3c      	ldr	r5, [pc, #240]	; (800a9f0 <HAL_I2C_Master_Receive+0x15c>)
 800a900:	4641      	mov	r1, r8
      hi2c->XferSize = hi2c->XferCount;
 800a902:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a904:	4620      	mov	r0, r4
 800a906:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800a908:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a90a:	b2d2      	uxtb	r2, r2
 800a90c:	f7ff fc2e 	bl	800a16c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a910:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a912:	4632      	mov	r2, r6
 800a914:	4639      	mov	r1, r7
 800a916:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a918:	b29b      	uxth	r3, r3
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d03a      	beq.n	800a994 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a91e:	f7ff fd35 	bl	800a38c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a922:	2800      	cmp	r0, #0
 800a924:	d147      	bne.n	800a9b6 <HAL_I2C_Master_Receive+0x122>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a926:	6822      	ldr	r2, [r4, #0]
 800a928:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a92a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a92c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800a92e:	8d65      	ldrh	r5, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a930:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800a932:	3d01      	subs	r5, #1
      hi2c->pBuffPtr++;
 800a934:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800a936:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800a938:	b2ad      	uxth	r5, r5
      hi2c->pBuffPtr++;
 800a93a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800a93c:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800a93e:	8565      	strh	r5, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a940:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800a942:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a944:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800a946:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d1e1      	bne.n	800a910 <HAL_I2C_Master_Receive+0x7c>
 800a94c:	2a00      	cmp	r2, #0
 800a94e:	d0df      	beq.n	800a910 <HAL_I2C_Master_Receive+0x7c>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a950:	4602      	mov	r2, r0
 800a952:	463b      	mov	r3, r7
 800a954:	2180      	movs	r1, #128	; 0x80
 800a956:	4620      	mov	r0, r4
 800a958:	9600      	str	r6, [sp, #0]
 800a95a:	f7ff fdb1 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a95e:	f04f 0eff 	mov.w	lr, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a962:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a964:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a968:	4641      	mov	r1, r8
 800a96a:	4620      	mov	r0, r4
 800a96c:	4672      	mov	r2, lr
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800a96e:	bb15      	cbnz	r5, 800a9b6 <HAL_I2C_Master_Receive+0x122>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a970:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
 800a974:	fa1f fc8c 	uxth.w	ip, ip
 800a978:	45f4      	cmp	ip, lr
 800a97a:	d92f      	bls.n	800a9dc <HAL_I2C_Master_Receive+0x148>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800a97c:	f8a4 e028 	strh.w	lr, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a980:	9500      	str	r5, [sp, #0]
 800a982:	f7ff fbf3 	bl	800a16c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800a986:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a988:	4632      	mov	r2, r6
 800a98a:	4639      	mov	r1, r7
    while (hi2c->XferCount > 0U)
 800a98c:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a98e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800a990:	2b00      	cmp	r3, #0
 800a992:	d1c4      	bne.n	800a91e <HAL_I2C_Master_Receive+0x8a>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a994:	f7ff fd6e 	bl	800a474 <I2C_WaitOnSTOPFlagUntilTimeout>
 800a998:	b968      	cbnz	r0, 800a9b6 <HAL_I2C_Master_Receive+0x122>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a99a:	6823      	ldr	r3, [r4, #0]
 800a99c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800a99e:	4d15      	ldr	r5, [pc, #84]	; (800a9f4 <HAL_I2C_Master_Receive+0x160>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a9a0:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800a9a2:	685a      	ldr	r2, [r3, #4]
 800a9a4:	402a      	ands	r2, r5
 800a9a6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a9a8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800a9ac:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800a9b0:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800a9b4:	e000      	b.n	800a9b8 <HAL_I2C_Master_Receive+0x124>
      return HAL_ERROR;
 800a9b6:	2001      	movs	r0, #1
}
 800a9b8:	b002      	add	sp, #8
 800a9ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 800a9be:	2002      	movs	r0, #2
}
 800a9c0:	b002      	add	sp, #8
 800a9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9c6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9c8:	4809      	ldr	r0, [pc, #36]	; (800a9f0 <HAL_I2C_Master_Receive+0x15c>)
 800a9ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a9ce:	4641      	mov	r1, r8
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a9d0:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800a9d2:	9000      	str	r0, [sp, #0]
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f7ff fbc9 	bl	800a16c <I2C_TransferConfig>
 800a9da:	e799      	b.n	800a910 <HAL_I2C_Master_Receive+0x7c>
          hi2c->XferSize = hi2c->XferCount;
 800a9dc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a9e2:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800a9e4:	b292      	uxth	r2, r2
 800a9e6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a9e8:	b2d2      	uxtb	r2, r2
 800a9ea:	f7ff fbbf 	bl	800a16c <I2C_TransferConfig>
 800a9ee:	e78f      	b.n	800a910 <HAL_I2C_Master_Receive+0x7c>
 800a9f0:	80002400 	.word	0x80002400
 800a9f4:	fe00e800 	.word	0xfe00e800

0800a9f8 <HAL_I2C_Mem_Read>:
{
 800a9f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9fc:	461d      	mov	r5, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800a9fe:	3b01      	subs	r3, #1
{
 800aa00:	b085      	sub	sp, #20
 800aa02:	4604      	mov	r4, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800aa04:	2b01      	cmp	r3, #1
{
 800aa06:	460e      	mov	r6, r1
 800aa08:	4617      	mov	r7, r2
 800aa0a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 800aa0e:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800aa12:	d904      	bls.n	800aa1e <HAL_I2C_Mem_Read+0x26>
 800aa14:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800aa18:	4863      	ldr	r0, [pc, #396]	; (800aba8 <HAL_I2C_Mem_Read+0x1b0>)
 800aa1a:	f7f9 f98f 	bl	8003d3c <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa1e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800aa22:	2b20      	cmp	r3, #32
 800aa24:	d125      	bne.n	800aa72 <HAL_I2C_Mem_Read+0x7a>
    if ((pData == NULL) || (Size == 0U))
 800aa26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa28:	b1e3      	cbz	r3, 800aa64 <HAL_I2C_Mem_Read+0x6c>
 800aa2a:	f1bb 0f00 	cmp.w	fp, #0
 800aa2e:	d019      	beq.n	800aa64 <HAL_I2C_Mem_Read+0x6c>
    __HAL_LOCK(hi2c);
 800aa30:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d01c      	beq.n	800aa72 <HAL_I2C_Mem_Read+0x7a>
 800aa38:	f04f 0a01 	mov.w	sl, #1
 800aa3c:	f884 a040 	strb.w	sl, [r4, #64]	; 0x40
    tickstart = HAL_GetTick();
 800aa40:	f7fc f984 	bl	8006d4c <HAL_GetTick>
 800aa44:	4680      	mov	r8, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa46:	4652      	mov	r2, sl
 800aa48:	2319      	movs	r3, #25
 800aa4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f8cd 8000 	str.w	r8, [sp]
 800aa54:	f7ff fd34 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
 800aa58:	9003      	str	r0, [sp, #12]
 800aa5a:	b170      	cbz	r0, 800aa7a <HAL_I2C_Mem_Read+0x82>
      return HAL_ERROR;
 800aa5c:	2001      	movs	r0, #1
}
 800aa5e:	b005      	add	sp, #20
 800aa60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa64:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800aa68:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa6a:	6463      	str	r3, [r4, #68]	; 0x44
}
 800aa6c:	b005      	add	sp, #20
 800aa6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800aa72:	2002      	movs	r0, #2
}
 800aa74:	b005      	add	sp, #20
 800aa76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->pBuffPtr  = pData;
 800aa7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa7c:	2122      	movs	r1, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa7e:	2040      	movs	r0, #64	; 0x40
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa80:	463a      	mov	r2, r7
    hi2c->pBuffPtr  = pData;
 800aa82:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa84:	462b      	mov	r3, r5
    hi2c->XferISR   = NULL;
 800aa86:	9d03      	ldr	r5, [sp, #12]
 800aa88:	6365      	str	r5, [r4, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa8a:	e9cd 9800 	strd	r9, r8, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800aa8e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa92:	4631      	mov	r1, r6
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aa94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aa98:	4620      	mov	r0, r4
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aa9a:	6465      	str	r5, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800aa9c:	f8a4 b02a 	strh.w	fp, [r4, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aaa0:	f7ff fd3c 	bl	800a51c <I2C_RequestMemoryRead>
 800aaa4:	2800      	cmp	r0, #0
 800aaa6:	d157      	bne.n	800ab58 <HAL_I2C_Mem_Read+0x160>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2bff      	cmp	r3, #255	; 0xff
 800aaae:	d958      	bls.n	800ab62 <HAL_I2C_Mem_Read+0x16a>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aab0:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aab2:	483e      	ldr	r0, [pc, #248]	; (800abac <HAL_I2C_Mem_Read+0x1b4>)
 800aab4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800aab8:	4631      	mov	r1, r6
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aaba:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aabc:	9000      	str	r0, [sp, #0]
 800aabe:	4620      	mov	r0, r4
 800aac0:	f7ff fb54 	bl	800a16c <I2C_TransferConfig>
 800aac4:	e003      	b.n	800aace <HAL_I2C_Mem_Read+0xd6>
    } while (hi2c->XferCount > 0U);
 800aac6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800aac8:	b29b      	uxth	r3, r3
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d056      	beq.n	800ab7c <HAL_I2C_Mem_Read+0x184>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800aace:	464b      	mov	r3, r9
 800aad0:	2200      	movs	r2, #0
 800aad2:	2104      	movs	r1, #4
 800aad4:	4620      	mov	r0, r4
 800aad6:	f8cd 8000 	str.w	r8, [sp]
 800aada:	f7ff fcf1 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
 800aade:	2800      	cmp	r0, #0
 800aae0:	d1bc      	bne.n	800aa5c <HAL_I2C_Mem_Read+0x64>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800aae2:	6822      	ldr	r2, [r4, #0]
 800aae4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aae6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800aae8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800aaea:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800aaec:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800aaee:	3901      	subs	r1, #1
      hi2c->pBuffPtr++;
 800aaf0:	6a65      	ldr	r5, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800aaf2:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800aaf4:	b289      	uxth	r1, r1
      hi2c->pBuffPtr++;
 800aaf6:	3501      	adds	r5, #1
      hi2c->XferSize--;
 800aaf8:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800aafa:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aafc:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800aafe:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab00:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800ab02:	6265      	str	r5, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1de      	bne.n	800aac6 <HAL_I2C_Mem_Read+0xce>
 800ab08:	2a00      	cmp	r2, #0
 800ab0a:	d0dc      	beq.n	800aac6 <HAL_I2C_Mem_Read+0xce>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	464b      	mov	r3, r9
 800ab10:	2180      	movs	r1, #128	; 0x80
 800ab12:	4620      	mov	r0, r4
 800ab14:	f8cd 8000 	str.w	r8, [sp]
 800ab18:	f7ff fcd2 	bl	800a4c0 <I2C_WaitOnFlagUntilTimeout>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab20:	4605      	mov	r5, r0
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ab22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ab26:	4631      	mov	r1, r6
 800ab28:	4620      	mov	r0, r4
 800ab2a:	4662      	mov	r2, ip
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab2c:	2d00      	cmp	r5, #0
 800ab2e:	d195      	bne.n	800aa5c <HAL_I2C_Mem_Read+0x64>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab30:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 800ab32:	b2bf      	uxth	r7, r7
 800ab34:	4567      	cmp	r7, ip
 800ab36:	d905      	bls.n	800ab44 <HAL_I2C_Mem_Read+0x14c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab38:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ab3c:	9500      	str	r5, [sp, #0]
 800ab3e:	f7ff fb15 	bl	800a16c <I2C_TransferConfig>
 800ab42:	e7c0      	b.n	800aac6 <HAL_I2C_Mem_Read+0xce>
          hi2c->XferSize = hi2c->XferCount;
 800ab44:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab4a:	9500      	str	r5, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 800ab4c:	b292      	uxth	r2, r2
 800ab4e:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab50:	b2d2      	uxtb	r2, r2
 800ab52:	f7ff fb0b 	bl	800a16c <I2C_TransferConfig>
 800ab56:	e7b6      	b.n	800aac6 <HAL_I2C_Mem_Read+0xce>
      __HAL_UNLOCK(hi2c);
 800ab58:	9b03      	ldr	r3, [sp, #12]
      return HAL_ERROR;
 800ab5a:	4650      	mov	r0, sl
      __HAL_UNLOCK(hi2c);
 800ab5c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 800ab60:	e77d      	b.n	800aa5e <HAL_I2C_Mem_Read+0x66>
      hi2c->XferSize = hi2c->XferCount;
 800ab62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ab68:	4d10      	ldr	r5, [pc, #64]	; (800abac <HAL_I2C_Mem_Read+0x1b4>)
 800ab6a:	4631      	mov	r1, r6
      hi2c->XferSize = hi2c->XferCount;
 800ab6c:	b292      	uxth	r2, r2
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab6e:	4620      	mov	r0, r4
 800ab70:	9500      	str	r5, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 800ab72:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ab74:	b2d2      	uxtb	r2, r2
 800ab76:	f7ff faf9 	bl	800a16c <I2C_TransferConfig>
 800ab7a:	e7a8      	b.n	800aace <HAL_I2C_Mem_Read+0xd6>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab7c:	4642      	mov	r2, r8
 800ab7e:	4649      	mov	r1, r9
 800ab80:	4620      	mov	r0, r4
 800ab82:	f7ff fc77 	bl	800a474 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	f47f af68 	bne.w	800aa5c <HAL_I2C_Mem_Read+0x64>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab8c:	6823      	ldr	r3, [r4, #0]
 800ab8e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800ab90:	4d07      	ldr	r5, [pc, #28]	; (800abb0 <HAL_I2C_Mem_Read+0x1b8>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab92:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800ab94:	685a      	ldr	r2, [r3, #4]
 800ab96:	402a      	ands	r2, r5
 800ab98:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800ab9a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ab9e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aba2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800aba6:	e75a      	b.n	800aa5e <HAL_I2C_Mem_Read+0x66>
 800aba8:	08029898 	.word	0x08029898
 800abac:	80002400 	.word	0x80002400
 800abb0:	fe00e800 	.word	0xfe00e800

0800abb4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800abb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abb6:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800abb8:	4b22      	ldr	r3, [pc, #136]	; (800ac44 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800abba:	4e23      	ldr	r6, [pc, #140]	; (800ac48 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800abbc:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800abbe:	6822      	ldr	r2, [r4, #0]
 800abc0:	4822      	ldr	r0, [pc, #136]	; (800ac4c <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800abc2:	429a      	cmp	r2, r3
 800abc4:	bf18      	it	ne
 800abc6:	42b2      	cmpne	r2, r6
 800abc8:	bf14      	ite	ne
 800abca:	2301      	movne	r3, #1
 800abcc:	2300      	moveq	r3, #0
 800abce:	4282      	cmp	r2, r0
 800abd0:	bf0c      	ite	eq
 800abd2:	2300      	moveq	r3, #0
 800abd4:	f003 0301 	andne.w	r3, r3, #1
 800abd8:	b113      	cbz	r3, 800abe0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800abda:	4b1d      	ldr	r3, [pc, #116]	; (800ac50 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800abdc:	429a      	cmp	r2, r3
 800abde:	d12c      	bne.n	800ac3a <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800abe0:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800abe4:	d124      	bne.n	800ac30 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800abe6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800abea:	2b20      	cmp	r3, #32
 800abec:	b2de      	uxtb	r6, r3
 800abee:	d11d      	bne.n	800ac2c <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800abf0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d019      	beq.n	800ac2c <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800abf8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800abfa:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800abfc:	2700      	movs	r7, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800abfe:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800ac02:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 800ac04:	4638      	mov	r0, r7
    __HAL_I2C_DISABLE(hi2c);
 800ac06:	f022 0201 	bic.w	r2, r2, #1
 800ac0a:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ac0c:	681a      	ldr	r2, [r3, #0]
 800ac0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac12:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800ac14:	6819      	ldr	r1, [r3, #0]
 800ac16:	430d      	orrs	r5, r1
 800ac18:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800ac1a:	681a      	ldr	r2, [r3, #0]
 800ac1c:	f042 0201 	orr.w	r2, r2, #1
 800ac20:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800ac22:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800ac26:	f884 7040 	strb.w	r7, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800ac2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800ac2c:	2002      	movs	r0, #2
}
 800ac2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800ac30:	215f      	movs	r1, #95	; 0x5f
 800ac32:	4808      	ldr	r0, [pc, #32]	; (800ac54 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800ac34:	f7f9 f882 	bl	8003d3c <assert_failed>
 800ac38:	e7d5      	b.n	800abe6 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac3a:	215e      	movs	r1, #94	; 0x5e
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800ac3e:	f7f9 f87d 	bl	8003d3c <assert_failed>
 800ac42:	e7cd      	b.n	800abe0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800ac44:	40005400 	.word	0x40005400
 800ac48:	40005800 	.word	0x40005800
 800ac4c:	40005c00 	.word	0x40005c00
 800ac50:	40006000 	.word	0x40006000
 800ac54:	080298d0 	.word	0x080298d0

0800ac58 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ac58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5a:	4604      	mov	r4, r0
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac5c:	4b21      	ldr	r3, [pc, #132]	; (800ace4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800ac5e:	4e22      	ldr	r6, [pc, #136]	; (800ace8 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800ac60:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800ac62:	6822      	ldr	r2, [r4, #0]
 800ac64:	4821      	ldr	r0, [pc, #132]	; (800acec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800ac66:	429a      	cmp	r2, r3
 800ac68:	bf18      	it	ne
 800ac6a:	42b2      	cmpne	r2, r6
 800ac6c:	bf14      	ite	ne
 800ac6e:	2301      	movne	r3, #1
 800ac70:	2300      	moveq	r3, #0
 800ac72:	4282      	cmp	r2, r0
 800ac74:	bf0c      	ite	eq
 800ac76:	2300      	moveq	r3, #0
 800ac78:	f003 0301 	andne.w	r3, r3, #1
 800ac7c:	b113      	cbz	r3, 800ac84 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800ac7e:	4b1c      	ldr	r3, [pc, #112]	; (800acf0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800ac80:	429a      	cmp	r2, r3
 800ac82:	d12a      	bne.n	800acda <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800ac84:	2d0f      	cmp	r5, #15
 800ac86:	d823      	bhi.n	800acd0 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac88:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800ac8c:	2b20      	cmp	r3, #32
 800ac8e:	b2df      	uxtb	r7, r3
 800ac90:	d11c      	bne.n	800accc <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac92:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d018      	beq.n	800accc <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ac9a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800ac9c:	2224      	movs	r2, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac9e:	2600      	movs	r6, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
 800aca0:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800aca4:	681a      	ldr	r2, [r3, #0]

    return HAL_OK;
 800aca6:	4630      	mov	r0, r6
    __HAL_I2C_DISABLE(hi2c);
 800aca8:	f022 0201 	bic.w	r2, r2, #1
 800acac:	601a      	str	r2, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 800acae:	6819      	ldr	r1, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800acb0:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800acb4:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800acb8:	601d      	str	r5, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	f042 0201 	orr.w	r2, r2, #1
 800acc0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800acc2:	f884 7041 	strb.w	r7, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800acc6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800acca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800accc:	2002      	movs	r0, #2
}
 800acce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800acd0:	218d      	movs	r1, #141	; 0x8d
 800acd2:	4808      	ldr	r0, [pc, #32]	; (800acf4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800acd4:	f7f9 f832 	bl	8003d3c <assert_failed>
 800acd8:	e7d6      	b.n	800ac88 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800acda:	218c      	movs	r1, #140	; 0x8c
 800acdc:	4805      	ldr	r0, [pc, #20]	; (800acf4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800acde:	f7f9 f82d 	bl	8003d3c <assert_failed>
 800ace2:	e7cf      	b.n	800ac84 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800ace4:	40005400 	.word	0x40005400
 800ace8:	40005800 	.word	0x40005800
 800acec:	40005c00 	.word	0x40005c00
 800acf0:	40006000 	.word	0x40006000
 800acf4:	080298d0 	.word	0x080298d0

0800acf8 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800acf8:	2800      	cmp	r0, #0
 800acfa:	d04c      	beq.n	800ad96 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800acfc:	6802      	ldr	r2, [r0, #0]
{
 800acfe:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800ad00:	4b26      	ldr	r3, [pc, #152]	; (800ad9c <HAL_IWDG_Init+0xa4>)
 800ad02:	4604      	mov	r4, r0
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d003      	beq.n	800ad10 <HAL_IWDG_Init+0x18>
 800ad08:	21b5      	movs	r1, #181	; 0xb5
 800ad0a:	4825      	ldr	r0, [pc, #148]	; (800ada0 <HAL_IWDG_Init+0xa8>)
 800ad0c:	f7f9 f816 	bl	8003d3c <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800ad10:	6863      	ldr	r3, [r4, #4]
 800ad12:	2b06      	cmp	r3, #6
 800ad14:	d835      	bhi.n	800ad82 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800ad16:	68a3      	ldr	r3, [r4, #8]
 800ad18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad1c:	d22c      	bcs.n	800ad78 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800ad1e:	68e3      	ldr	r3, [r4, #12]
 800ad20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad24:	d223      	bcs.n	800ad6e <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ad26:	6823      	ldr	r3, [r4, #0]
 800ad28:	f64c 45cc 	movw	r5, #52428	; 0xcccc

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ad2c:	f245 5055 	movw	r0, #21845	; 0x5555

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ad30:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
  __HAL_IWDG_START(hiwdg);
 800ad34:	601d      	str	r5, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ad36:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ad38:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ad3a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ad3c:	f7fc f806 	bl	8006d4c <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ad40:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800ad42:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ad44:	68da      	ldr	r2, [r3, #12]
 800ad46:	0751      	lsls	r1, r2, #29
 800ad48:	d00a      	beq.n	800ad60 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ad4a:	f7fb ffff 	bl	8006d4c <HAL_GetTick>
 800ad4e:	1b43      	subs	r3, r0, r5
 800ad50:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ad52:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ad54:	d9f6      	bls.n	800ad44 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ad56:	68da      	ldr	r2, [r3, #12]
 800ad58:	0752      	lsls	r2, r2, #29
 800ad5a:	d0f3      	beq.n	800ad44 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800ad5c:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800ad5e:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800ad60:	68e2      	ldr	r2, [r4, #12]
 800ad62:	6919      	ldr	r1, [r3, #16]
 800ad64:	4291      	cmp	r1, r2
 800ad66:	d011      	beq.n	800ad8c <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800ad68:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800ad6a:	611a      	str	r2, [r3, #16]
}
 800ad6c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800ad6e:	21b8      	movs	r1, #184	; 0xb8
 800ad70:	480b      	ldr	r0, [pc, #44]	; (800ada0 <HAL_IWDG_Init+0xa8>)
 800ad72:	f7f8 ffe3 	bl	8003d3c <assert_failed>
 800ad76:	e7d6      	b.n	800ad26 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800ad78:	21b7      	movs	r1, #183	; 0xb7
 800ad7a:	4809      	ldr	r0, [pc, #36]	; (800ada0 <HAL_IWDG_Init+0xa8>)
 800ad7c:	f7f8 ffde 	bl	8003d3c <assert_failed>
 800ad80:	e7cd      	b.n	800ad1e <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800ad82:	21b6      	movs	r1, #182	; 0xb6
 800ad84:	4806      	ldr	r0, [pc, #24]	; (800ada0 <HAL_IWDG_Init+0xa8>)
 800ad86:	f7f8 ffd9 	bl	8003d3c <assert_failed>
 800ad8a:	e7c4      	b.n	800ad16 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ad8c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800ad90:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ad92:	601a      	str	r2, [r3, #0]
}
 800ad94:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ad96:	2001      	movs	r0, #1
}
 800ad98:	4770      	bx	lr
 800ad9a:	bf00      	nop
 800ad9c:	40003000 	.word	0x40003000
 800ada0:	0802990c 	.word	0x0802990c

0800ada4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800ada4:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800ada6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800adaa:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	601a      	str	r2, [r3, #0]
}
 800adb0:	4770      	bx	lr
 800adb2:	bf00      	nop

0800adb4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800adb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adb6:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800adb8:	2800      	cmp	r0, #0
 800adba:	f000 809d 	beq.w	800aef8 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800adbe:	6804      	ldr	r4, [r0, #0]
 800adc0:	4605      	mov	r5, r0
 800adc2:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800adc6:	d003      	beq.n	800add0 <HAL_PCD_Init+0x1c>
 800adc8:	4b4f      	ldr	r3, [pc, #316]	; (800af08 <HAL_PCD_Init+0x154>)
 800adca:	429c      	cmp	r4, r3
 800adcc:	f040 8081 	bne.w	800aed2 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800add0:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800add4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800add8:	2b00      	cmp	r3, #0
 800adda:	f000 8086 	beq.w	800aeea <HAL_PCD_Init+0x136>
 800adde:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ade0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ade2:	462e      	mov	r6, r5
 800ade4:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800ade6:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800adea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adec:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800adee:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800adf2:	bf08      	it	eq
 800adf4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800adf6:	f006 fd61 	bl	80118bc <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800adfa:	f856 eb10 	ldr.w	lr, [r6], #16
 800adfe:	46b4      	mov	ip, r6
 800ae00:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae06:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ae0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae0c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800ae10:	e884 0003 	stmia.w	r4, {r0, r1}
 800ae14:	4670      	mov	r0, lr
 800ae16:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800ae1a:	f006 fc8d 	bl	8011738 <USB_CoreInit>
 800ae1e:	4604      	mov	r4, r0
 800ae20:	b130      	cbz	r0, 800ae30 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800ae22:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae24:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800ae26:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ae28:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800ae2c:	b00b      	add	sp, #44	; 0x2c
 800ae2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800ae30:	4601      	mov	r1, r0
 800ae32:	6828      	ldr	r0, [r5, #0]
 800ae34:	f006 fd4a 	bl	80118cc <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae38:	6868      	ldr	r0, [r5, #4]
 800ae3a:	b358      	cbz	r0, 800ae94 <HAL_PCD_Init+0xe0>
 800ae3c:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ae3e:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae42:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800ae44:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae48:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800ae4c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800ae50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ae54:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae58:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800ae5c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae60:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ae62:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800ae66:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ae68:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae6c:	d3ea      	bcc.n	800ae44 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800ae6e:	2200      	movs	r2, #0
 800ae70:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae74:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800ae76:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800ae7a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae7e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800ae80:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae84:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ae86:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ae8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ae8e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ae92:	d3ed      	bcc.n	800ae70 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ae94:	466c      	mov	r4, sp
 800ae96:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ae98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae9a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800ae9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ae9e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800aea2:	e884 0003 	stmia.w	r4, {r0, r1}
 800aea6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800aeaa:	6828      	ldr	r0, [r5, #0]
 800aeac:	f006 fd92 	bl	80119d4 <USB_DevInit>
 800aeb0:	4604      	mov	r4, r0
 800aeb2:	2800      	cmp	r0, #0
 800aeb4:	d1b5      	bne.n	800ae22 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800aeb6:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800aeb8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800aeba:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800aebe:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800aec0:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800aec4:	d01c      	beq.n	800af00 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800aec6:	6828      	ldr	r0, [r5, #0]
 800aec8:	f007 f950 	bl	801216c <USB_DevDisconnect>
}
 800aecc:	4620      	mov	r0, r4
 800aece:	b00b      	add	sp, #44	; 0x2c
 800aed0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800aed2:	2187      	movs	r1, #135	; 0x87
 800aed4:	480d      	ldr	r0, [pc, #52]	; (800af0c <HAL_PCD_Init+0x158>)
 800aed6:	f7f8 ff31 	bl	8003d3c <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800aeda:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800aede:	682c      	ldr	r4, [r5, #0]
 800aee0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	f47f af7a 	bne.w	800adde <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800aeea:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800aeec:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800aef0:	f016 fe5c 	bl	8021bac <HAL_PCD_MspInit>
 800aef4:	6828      	ldr	r0, [r5, #0]
 800aef6:	e773      	b.n	800ade0 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800aef8:	2401      	movs	r4, #1
}
 800aefa:	4620      	mov	r0, r4
 800aefc:	b00b      	add	sp, #44	; 0x2c
 800aefe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fcc3 	bl	800b88c <HAL_PCDEx_ActivateLPM>
 800af06:	e7de      	b.n	800aec6 <HAL_PCD_Init+0x112>
 800af08:	40040000 	.word	0x40040000
 800af0c:	08029948 	.word	0x08029948

0800af10 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800af10:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800af14:	2b01      	cmp	r3, #1
 800af16:	d00e      	beq.n	800af36 <HAL_PCD_Start+0x26>
 800af18:	2301      	movs	r3, #1
{
 800af1a:	b510      	push	{r4, lr}
 800af1c:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800af1e:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800af20:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800af24:	f006 fcc2 	bl	80118ac <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800af28:	6820      	ldr	r0, [r4, #0]
 800af2a:	f007 f90f 	bl	801214c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800af2e:	2000      	movs	r0, #0
 800af30:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc

  return HAL_OK;
}
 800af34:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800af36:	2002      	movs	r0, #2
}
 800af38:	4770      	bx	lr
 800af3a:	bf00      	nop

0800af3c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800af3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800af40:	6806      	ldr	r6, [r0, #0]
{
 800af42:	b087      	sub	sp, #28
 800af44:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800af46:	4630      	mov	r0, r6
 800af48:	f007 f950 	bl	80121ec <USB_GetMode>
 800af4c:	b110      	cbz	r0, 800af54 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800af4e:	b007      	add	sp, #28
 800af50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800af54:	4683      	mov	fp, r0
 800af56:	6820      	ldr	r0, [r4, #0]
 800af58:	f007 f918 	bl	801218c <USB_ReadInterrupts>
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d0f6      	beq.n	800af4e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af60:	6820      	ldr	r0, [r4, #0]
 800af62:	f007 f913 	bl	801218c <USB_ReadInterrupts>
 800af66:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af6a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800af6c:	d003      	beq.n	800af76 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800af6e:	6943      	ldr	r3, [r0, #20]
 800af70:	f003 0302 	and.w	r3, r3, #2
 800af74:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af76:	f007 f909 	bl	801218c <USB_ReadInterrupts>
 800af7a:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af7e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800af80:	d012      	beq.n	800afa8 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af82:	6983      	ldr	r3, [r0, #24]
 800af84:	f023 0310 	bic.w	r3, r3, #16
 800af88:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800af8a:	6a35      	ldr	r5, [r6, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af8c:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800af90:	f005 070f 	and.w	r7, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800af94:	2b02      	cmp	r3, #2
 800af96:	f000 8266 	beq.w	800b466 <HAL_PCD_IRQHandler+0x52a>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800af9a:	2b06      	cmp	r3, #6
 800af9c:	f000 81c5 	beq.w	800b32a <HAL_PCD_IRQHandler+0x3ee>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800afa0:	6983      	ldr	r3, [r0, #24]
 800afa2:	f043 0310 	orr.w	r3, r3, #16
 800afa6:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afa8:	f007 f8f0 	bl	801218c <USB_ReadInterrupts>
 800afac:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800afb0:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800afb2:	f040 80df 	bne.w	800b174 <HAL_PCD_IRQHandler+0x238>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800afb6:	f007 f8e9 	bl	801218c <USB_ReadInterrupts>
 800afba:	0342      	lsls	r2, r0, #13
 800afbc:	d478      	bmi.n	800b0b0 <HAL_PCD_IRQHandler+0x174>
 800afbe:	f8d4 8000 	ldr.w	r8, [r4]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800afc2:	4640      	mov	r0, r8
 800afc4:	f007 f8e2 	bl	801218c <USB_ReadInterrupts>
 800afc8:	2800      	cmp	r0, #0
 800afca:	db5d      	blt.n	800b088 <HAL_PCD_IRQHandler+0x14c>
 800afcc:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800afce:	f007 f8dd 	bl	801218c <USB_ReadInterrupts>
 800afd2:	0500      	lsls	r0, r0, #20
 800afd4:	d44d      	bmi.n	800b072 <HAL_PCD_IRQHandler+0x136>
 800afd6:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800afd8:	f007 f8d8 	bl	801218c <USB_ReadInterrupts>
 800afdc:	0102      	lsls	r2, r0, #4
 800afde:	d514      	bpl.n	800b00a <HAL_PCD_IRQHandler+0xce>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800afe0:	6822      	ldr	r2, [r4, #0]
 800afe2:	6953      	ldr	r3, [r2, #20]
 800afe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afe8:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800afea:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800afee:	2b00      	cmp	r3, #0
 800aff0:	f040 8185 	bne.w	800b2fe <HAL_PCD_IRQHandler+0x3c2>
        hpcd->LPM_State = LPM_L1;
 800aff4:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800aff6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800aff8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800affc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800affe:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800b002:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b006:	f016 ff3f 	bl	8021e88 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b00a:	6820      	ldr	r0, [r4, #0]
 800b00c:	f007 f8be 	bl	801218c <USB_ReadInterrupts>
 800b010:	04c3      	lsls	r3, r0, #19
 800b012:	f100 8129 	bmi.w	800b268 <HAL_PCD_IRQHandler+0x32c>
 800b016:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b018:	f007 f8b8 	bl	801218c <USB_ReadInterrupts>
 800b01c:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800b020:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b022:	f040 810a 	bne.w	800b23a <HAL_PCD_IRQHandler+0x2fe>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b026:	f007 f8b1 	bl	801218c <USB_ReadInterrupts>
 800b02a:	0707      	lsls	r7, r0, #28
 800b02c:	f100 80fc 	bmi.w	800b228 <HAL_PCD_IRQHandler+0x2ec>
 800b030:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b032:	f007 f8ab 	bl	801218c <USB_ReadInterrupts>
 800b036:	02c6      	lsls	r6, r0, #11
 800b038:	f100 80ec 	bmi.w	800b214 <HAL_PCD_IRQHandler+0x2d8>
 800b03c:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b03e:	f007 f8a5 	bl	801218c <USB_ReadInterrupts>
 800b042:	0285      	lsls	r5, r0, #10
 800b044:	f100 80dc 	bmi.w	800b200 <HAL_PCD_IRQHandler+0x2c4>
 800b048:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b04a:	f007 f89f 	bl	801218c <USB_ReadInterrupts>
 800b04e:	0040      	lsls	r0, r0, #1
 800b050:	f100 80cd 	bmi.w	800b1ee <HAL_PCD_IRQHandler+0x2b2>
 800b054:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b056:	f007 f899 	bl	801218c <USB_ReadInterrupts>
 800b05a:	0741      	lsls	r1, r0, #29
 800b05c:	f57f af77 	bpl.w	800af4e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800b060:	6823      	ldr	r3, [r4, #0]
 800b062:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b064:	076a      	lsls	r2, r5, #29
 800b066:	f100 821f 	bmi.w	800b4a8 <HAL_PCD_IRQHandler+0x56c>
      hpcd->Instance->GOTGINT |= temp;
 800b06a:	685a      	ldr	r2, [r3, #4]
 800b06c:	432a      	orrs	r2, r5
 800b06e:	605a      	str	r2, [r3, #4]
 800b070:	e76d      	b.n	800af4e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b072:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 800b076:	07d9      	lsls	r1, r3, #31
 800b078:	f100 8212 	bmi.w	800b4a0 <HAL_PCD_IRQHandler+0x564>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b07c:	6820      	ldr	r0, [r4, #0]
 800b07e:	6943      	ldr	r3, [r0, #20]
 800b080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b084:	6143      	str	r3, [r0, #20]
 800b086:	e7a7      	b.n	800afd8 <HAL_PCD_IRQHandler+0x9c>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b088:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
 800b08c:	f023 0301 	bic.w	r3, r3, #1
 800b090:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800b094:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800b098:	2b01      	cmp	r3, #1
 800b09a:	f000 813f 	beq.w	800b31c <HAL_PCD_IRQHandler+0x3e0>
        HAL_PCD_ResumeCallback(hpcd);
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f016 fe20 	bl	8021ce4 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b0a4:	6820      	ldr	r0, [r4, #0]
 800b0a6:	6943      	ldr	r3, [r0, #20]
 800b0a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0ac:	6143      	str	r3, [r0, #20]
 800b0ae:	e78e      	b.n	800afce <HAL_PCD_IRQHandler+0x92>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b0b0:	6820      	ldr	r0, [r4, #0]
 800b0b2:	f007 f877 	bl	80121a4 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800b0b6:	f8d4 8000 	ldr.w	r8, [r4]
 800b0ba:	4681      	mov	r9, r0
 800b0bc:	2800      	cmp	r0, #0
 800b0be:	d080      	beq.n	800afc2 <HAL_PCD_IRQHandler+0x86>
 800b0c0:	f506 6310 	add.w	r3, r6, #2304	; 0x900
 800b0c4:	4625      	mov	r5, r4
      epnum = 0U;
 800b0c6:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b0ca:	f8cd b010 	str.w	fp, [sp, #16]
 800b0ce:	e9cd 3602 	strd	r3, r6, [sp, #8]
 800b0d2:	e007      	b.n	800b0e4 <HAL_PCD_IRQHandler+0x1a8>
      while (ep_intr != 0U)
 800b0d4:	ea5f 0959 	movs.w	r9, r9, lsr #1
        epnum++;
 800b0d8:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800b0dc:	f105 051c 	add.w	r5, r5, #28
 800b0e0:	f000 8138 	beq.w	800b354 <HAL_PCD_IRQHandler+0x418>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0e4:	f019 0f01 	tst.w	r9, #1
 800b0e8:	d0f4      	beq.n	800b0d4 <HAL_PCD_IRQHandler+0x198>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0ea:	fa5f f78a 	uxtb.w	r7, sl
 800b0ee:	4640      	mov	r0, r8
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	f007 f869 	bl	80121c8 <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0f6:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0f8:	4606      	mov	r6, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0fa:	d519      	bpl.n	800b130 <HAL_PCD_IRQHandler+0x1f4>
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b0fc:	f04f 0c01 	mov.w	ip, #1
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b100:	9b03      	ldr	r3, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b102:	f00a 010f 	and.w	r1, sl, #15
 800b106:	9a02      	ldr	r2, [sp, #8]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b108:	f8d3 0834 	ldr.w	r0, [r3, #2100]	; 0x834
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b10c:	fa0c f101 	lsl.w	r1, ip, r1
 800b110:	eb02 124a 	add.w	r2, r2, sl, lsl #5
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b114:	ea20 0001 	bic.w	r0, r0, r1
            if (hpcd->Init.dma_enable == 1U)
 800b118:	6921      	ldr	r1, [r4, #16]
 800b11a:	4561      	cmp	r1, ip
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b11c:	f8c3 0834 	str.w	r0, [r3, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b120:	f8c2 c008 	str.w	ip, [r2, #8]
            if (hpcd->Init.dma_enable == 1U)
 800b124:	f000 81c5 	beq.w	800b4b2 <HAL_PCD_IRQHandler+0x576>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b128:	4639      	mov	r1, r7
 800b12a:	4620      	mov	r0, r4
 800b12c:	f016 fd9e 	bl	8021c6c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b130:	0730      	lsls	r0, r6, #28
 800b132:	d504      	bpl.n	800b13e <HAL_PCD_IRQHandler+0x202>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b134:	9b02      	ldr	r3, [sp, #8]
 800b136:	2208      	movs	r2, #8
 800b138:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b13c:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b13e:	06f1      	lsls	r1, r6, #27
 800b140:	d504      	bpl.n	800b14c <HAL_PCD_IRQHandler+0x210>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b142:	9b02      	ldr	r3, [sp, #8]
 800b144:	2210      	movs	r2, #16
 800b146:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b14a:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b14c:	0672      	lsls	r2, r6, #25
 800b14e:	d504      	bpl.n	800b15a <HAL_PCD_IRQHandler+0x21e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b150:	9b02      	ldr	r3, [sp, #8]
 800b152:	2240      	movs	r2, #64	; 0x40
 800b154:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b158:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b15a:	07b3      	lsls	r3, r6, #30
 800b15c:	d504      	bpl.n	800b168 <HAL_PCD_IRQHandler+0x22c>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b15e:	9b02      	ldr	r3, [sp, #8]
 800b160:	2202      	movs	r2, #2
 800b162:	eb03 134a 	add.w	r3, r3, sl, lsl #5
 800b166:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b168:	0636      	lsls	r6, r6, #24
 800b16a:	f100 80f6 	bmi.w	800b35a <HAL_PCD_IRQHandler+0x41e>
 800b16e:	f8d4 8000 	ldr.w	r8, [r4]
 800b172:	e7af      	b.n	800b0d4 <HAL_PCD_IRQHandler+0x198>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b174:	f007 f80e 	bl	8012194 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800b178:	4605      	mov	r5, r0
 800b17a:	6820      	ldr	r0, [r4, #0]
 800b17c:	2d00      	cmp	r5, #0
 800b17e:	f43f af1a 	beq.w	800afb6 <HAL_PCD_IRQHandler+0x7a>
 800b182:	f506 6330 	add.w	r3, r6, #2816	; 0xb00
 800b186:	f504 7901 	add.w	r9, r4, #516	; 0x204
      epnum = 0U;
 800b18a:	2700      	movs	r7, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b18c:	9602      	str	r6, [sp, #8]
 800b18e:	469a      	mov	sl, r3
 800b190:	e006      	b.n	800b1a0 <HAL_PCD_IRQHandler+0x264>
      while (ep_intr != 0U)
 800b192:	086d      	lsrs	r5, r5, #1
        epnum++;
 800b194:	f107 0701 	add.w	r7, r7, #1
      while (ep_intr != 0U)
 800b198:	f109 091c 	add.w	r9, r9, #28
 800b19c:	f000 80d8 	beq.w	800b350 <HAL_PCD_IRQHandler+0x414>
        if ((ep_intr & 0x1U) != 0U)
 800b1a0:	07ee      	lsls	r6, r5, #31
 800b1a2:	d5f6      	bpl.n	800b192 <HAL_PCD_IRQHandler+0x256>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b1a4:	b2fe      	uxtb	r6, r7
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	f007 f804 	bl	80121b4 <USB_ReadDevOutEPInterrupt>
 800b1ac:	4680      	mov	r8, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b1ae:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b1b0:	f018 0f01 	tst.w	r8, #1
 800b1b4:	f040 8138 	bne.w	800b428 <HAL_PCD_IRQHandler+0x4ec>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b1b8:	f018 0f08 	tst.w	r8, #8
 800b1bc:	f040 811a 	bne.w	800b3f4 <HAL_PCD_IRQHandler+0x4b8>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b1c0:	f018 0f10 	tst.w	r8, #16
 800b1c4:	d003      	beq.n	800b1ce <HAL_PCD_IRQHandler+0x292>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b1c6:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800b1ca:	2210      	movs	r2, #16
 800b1cc:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b1ce:	f018 0f20 	tst.w	r8, #32
 800b1d2:	d003      	beq.n	800b1dc <HAL_PCD_IRQHandler+0x2a0>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b1d4:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800b1d8:	2220      	movs	r2, #32
 800b1da:	609a      	str	r2, [r3, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b1dc:	f418 5f00 	tst.w	r8, #8192	; 0x2000
 800b1e0:	d0d7      	beq.n	800b192 <HAL_PCD_IRQHandler+0x256>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b1e2:	eb0a 1347 	add.w	r3, sl, r7, lsl #5
 800b1e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b1ea:	609a      	str	r2, [r3, #8]
 800b1ec:	e7d1      	b.n	800b192 <HAL_PCD_IRQHandler+0x256>
      HAL_PCD_ConnectCallback(hpcd);
 800b1ee:	4620      	mov	r0, r4
 800b1f0:	f016 fd84 	bl	8021cfc <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b1f4:	6820      	ldr	r0, [r4, #0]
 800b1f6:	6943      	ldr	r3, [r0, #20]
 800b1f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1fc:	6143      	str	r3, [r0, #20]
 800b1fe:	e72a      	b.n	800b056 <HAL_PCD_IRQHandler+0x11a>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b200:	4620      	mov	r0, r4
 800b202:	2100      	movs	r1, #0
 800b204:	f016 fd72 	bl	8021cec <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b208:	6820      	ldr	r0, [r4, #0]
 800b20a:	6943      	ldr	r3, [r0, #20]
 800b20c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b210:	6143      	str	r3, [r0, #20]
 800b212:	e71a      	b.n	800b04a <HAL_PCD_IRQHandler+0x10e>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b214:	4620      	mov	r0, r4
 800b216:	2100      	movs	r1, #0
 800b218:	f016 fd6c 	bl	8021cf4 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b21c:	6820      	ldr	r0, [r4, #0]
 800b21e:	6943      	ldr	r3, [r0, #20]
 800b220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b224:	6143      	str	r3, [r0, #20]
 800b226:	e70a      	b.n	800b03e <HAL_PCD_IRQHandler+0x102>
      HAL_PCD_SOFCallback(hpcd);
 800b228:	4620      	mov	r0, r4
 800b22a:	f016 fd29 	bl	8021c80 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b22e:	6820      	ldr	r0, [r4, #0]
 800b230:	6943      	ldr	r3, [r0, #20]
 800b232:	f003 0308 	and.w	r3, r3, #8
 800b236:	6143      	str	r3, [r0, #20]
 800b238:	e6fb      	b.n	800b032 <HAL_PCD_IRQHandler+0xf6>
      (void)USB_ActivateSetup(hpcd->Instance);
 800b23a:	f006 ffdb 	bl	80121f4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b23e:	6820      	ldr	r0, [r4, #0]
 800b240:	f006 fc86 	bl	8011b50 <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b244:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b246:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b248:	f000 ff7a 	bl	800c140 <HAL_RCC_GetHCLKFreq>
 800b24c:	7b22      	ldrb	r2, [r4, #12]
 800b24e:	4601      	mov	r1, r0
 800b250:	4628      	mov	r0, r5
 800b252:	f006 faaf 	bl	80117b4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800b256:	4620      	mov	r0, r4
 800b258:	f016 fd16 	bl	8021c88 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b25c:	6820      	ldr	r0, [r4, #0]
 800b25e:	6943      	ldr	r3, [r0, #20]
 800b260:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b264:	6143      	str	r3, [r0, #20]
 800b266:	e6de      	b.n	800b026 <HAL_PCD_IRQHandler+0xea>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b268:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b26c:	2110      	movs	r1, #16
 800b26e:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b270:	f506 6500 	add.w	r5, r6, #2048	; 0x800
 800b274:	f023 0301 	bic.w	r3, r3, #1
 800b278:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b27a:	f006 fb5d 	bl	8011938 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b27e:	6867      	ldr	r7, [r4, #4]
 800b280:	b1e7      	cbz	r7, 800b2bc <HAL_PCD_IRQHandler+0x380>
 800b282:	f506 6310 	add.w	r3, r6, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b286:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800b28a:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b28c:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	3320      	adds	r3, #32
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b294:	45bb      	cmp	fp, r7
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b296:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b29a:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b29e:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b2a2:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800b2a6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800b2aa:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b2ae:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800b2b2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800b2b6:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b2ba:	d1e6      	bne.n	800b28a <HAL_PCD_IRQHandler+0x34e>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b2bc:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b2be:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b2c0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b2c4:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b2c6:	b9f2      	cbnz	r2, 800b306 <HAL_PCD_IRQHandler+0x3ca>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b2c8:	696a      	ldr	r2, [r5, #20]
 800b2ca:	f242 032b 	movw	r3, #8235	; 0x202b
 800b2ce:	4313      	orrs	r3, r2
 800b2d0:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b2d2:	692b      	ldr	r3, [r5, #16]
 800b2d4:	f043 030b 	orr.w	r3, r3, #11
 800b2d8:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b2da:	f8d6 3800 	ldr.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2de:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b2e2:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b2e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2e8:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b2ea:	f8c6 3800 	str.w	r3, [r6, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b2ee:	f006 ff97 	bl	8012220 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b2f2:	6820      	ldr	r0, [r4, #0]
 800b2f4:	6943      	ldr	r3, [r0, #20]
 800b2f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b2fa:	6143      	str	r3, [r0, #20]
 800b2fc:	e68c      	b.n	800b018 <HAL_PCD_IRQHandler+0xdc>
        HAL_PCD_SuspendCallback(hpcd);
 800b2fe:	4620      	mov	r0, r4
 800b300:	f016 fcd8 	bl	8021cb4 <HAL_PCD_SuspendCallback>
 800b304:	e681      	b.n	800b00a <HAL_PCD_IRQHandler+0xce>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b306:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800b30a:	f043 030b 	orr.w	r3, r3, #11
 800b30e:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b312:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800b314:	f043 030b 	orr.w	r3, r3, #11
 800b318:	646b      	str	r3, [r5, #68]	; 0x44
 800b31a:	e7de      	b.n	800b2da <HAL_PCD_IRQHandler+0x39e>
        hpcd->LPM_State = LPM_L0;
 800b31c:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b31e:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800b320:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b324:	f016 fdb0 	bl	8021e88 <HAL_PCDEx_LPM_Callback>
 800b328:	e6bc      	b.n	800b0a4 <HAL_PCD_IRQHandler+0x168>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b32a:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b32e:	2208      	movs	r2, #8
 800b330:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800b334:	4630      	mov	r0, r6
 800b336:	f006 fe71 	bl	801201c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b33a:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800b33e:	eb04 0287 	add.w	r2, r4, r7, lsl #2
 800b342:	6820      	ldr	r0, [r4, #0]
 800b344:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800b348:	440b      	add	r3, r1
 800b34a:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800b34e:	e627      	b.n	800afa0 <HAL_PCD_IRQHandler+0x64>
 800b350:	9e02      	ldr	r6, [sp, #8]
 800b352:	e630      	b.n	800afb6 <HAL_PCD_IRQHandler+0x7a>
 800b354:	e9dd 6b03 	ldrd	r6, fp, [sp, #12]
 800b358:	e633      	b.n	800afc2 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800b35a:	e9d5 1314 	ldrd	r1, r3, [r5, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b35e:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800b362:	428b      	cmp	r3, r1
 800b364:	f63f aeb6 	bhi.w	800b0d4 <HAL_PCD_IRQHandler+0x198>
  len = ep->xfer_len - ep->xfer_count;
 800b368:	1aca      	subs	r2, r1, r3
  len32b = (len + 3U) / 4U;
 800b36a:	6c68      	ldr	r0, [r5, #68]	; 0x44
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b36c:	f508 6b10 	add.w	fp, r8, #2304	; 0x900
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b370:	f8cd 8014 	str.w	r8, [sp, #20]
  len32b = (len + 3U) / 4U;
 800b374:	4282      	cmp	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b376:	eb0b 1b4a 	add.w	fp, fp, sl, lsl #5
  len32b = (len + 3U) / 4U;
 800b37a:	bf28      	it	cs
 800b37c:	4602      	movcs	r2, r0
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b37e:	f8db 0018 	ldr.w	r0, [fp, #24]
  len32b = (len + 3U) / 4U;
 800b382:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b384:	b280      	uxth	r0, r0
 800b386:	ebb0 0f92 	cmp.w	r0, r2, lsr #2
 800b38a:	d21b      	bcs.n	800b3c4 <HAL_PCD_IRQHandler+0x488>
 800b38c:	e022      	b.n	800b3d4 <HAL_PCD_IRQHandler+0x498>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b38e:	b1f9      	cbz	r1, 800b3d0 <HAL_PCD_IRQHandler+0x494>
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b390:	f894 c010 	ldrb.w	ip, [r4, #16]
 800b394:	e9d5 3111 	ldrd	r3, r1, [r5, #68]	; 0x44
 800b398:	f8cd c000 	str.w	ip, [sp]
 800b39c:	429e      	cmp	r6, r3
 800b39e:	bf28      	it	cs
 800b3a0:	461e      	movcs	r6, r3
 800b3a2:	b2b3      	uxth	r3, r6
 800b3a4:	f006 fe24 	bl	8011ff0 <USB_WritePacket>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3a8:	f8db 2018 	ldr.w	r2, [fp, #24]
    ep->xfer_buff  += len;
 800b3ac:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    len32b = (len + 3U) / 4U;
 800b3ae:	1cf0      	adds	r0, r6, #3
    ep->xfer_count += len;
 800b3b0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3b2:	b292      	uxth	r2, r2
    ep->xfer_buff  += len;
 800b3b4:	4431      	add	r1, r6
    ep->xfer_count += len;
 800b3b6:	4433      	add	r3, r6
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3b8:	ebb2 0f90 	cmp.w	r2, r0, lsr #2
    ep->xfer_buff  += len;
 800b3bc:	64a9      	str	r1, [r5, #72]	; 0x48
    ep->xfer_count += len;
 800b3be:	656b      	str	r3, [r5, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800b3c0:	6d29      	ldr	r1, [r5, #80]	; 0x50
 800b3c2:	d305      	bcc.n	800b3d0 <HAL_PCD_IRQHandler+0x494>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b3c4:	428b      	cmp	r3, r1
    len = ep->xfer_len - ep->xfer_count;
 800b3c6:	eba1 0603 	sub.w	r6, r1, r3
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800b3ca:	463a      	mov	r2, r7
 800b3cc:	4640      	mov	r0, r8
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800b3ce:	d3de      	bcc.n	800b38e <HAL_PCD_IRQHandler+0x452>
 800b3d0:	f8d4 8000 	ldr.w	r8, [r4]
  if (ep->xfer_len <= ep->xfer_count)
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	f4ff ae7d 	bcc.w	800b0d4 <HAL_PCD_IRQHandler+0x198>
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b3da:	9b05      	ldr	r3, [sp, #20]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b3dc:	f00a 010f 	and.w	r1, sl, #15
 800b3e0:	2001      	movs	r0, #1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b3e2:	f8d3 2834 	ldr.w	r2, [r3, #2100]	; 0x834
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b3e6:	fa00 f101 	lsl.w	r1, r0, r1
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b3ea:	ea22 0201 	bic.w	r2, r2, r1
 800b3ee:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
 800b3f2:	e66f      	b.n	800b0d4 <HAL_PCD_IRQHandler+0x198>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b3f4:	eb0a 1247 	add.w	r2, sl, r7, lsl #5
 800b3f8:	2108      	movs	r1, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b3fa:	eb00 1347 	add.w	r3, r0, r7, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b3fe:	6091      	str	r1, [r2, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b400:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b406:	485e      	ldr	r0, [pc, #376]	; (800b580 <HAL_PCD_IRQHandler+0x644>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b408:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b40a:	4282      	cmp	r2, r0
 800b40c:	d963      	bls.n	800b4d6 <HAL_PCD_IRQHandler+0x59a>
 800b40e:	0409      	lsls	r1, r1, #16
 800b410:	d502      	bpl.n	800b418 <HAL_PCD_IRQHandler+0x4dc>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b412:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b416:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800b418:	4620      	mov	r0, r4
 800b41a:	f016 fc17 	bl	8021c4c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b41e:	6921      	ldr	r1, [r4, #16]
 800b420:	2901      	cmp	r1, #1
 800b422:	d07b      	beq.n	800b51c <HAL_PCD_IRQHandler+0x5e0>
 800b424:	6820      	ldr	r0, [r4, #0]
 800b426:	e6cb      	b.n	800b1c0 <HAL_PCD_IRQHandler+0x284>
  if (hpcd->Init.dma_enable == 1U)
 800b428:	f8d4 c010 	ldr.w	ip, [r4, #16]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b42c:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b430:	2301      	movs	r3, #1
 800b432:	eb0a 1147 	add.w	r1, sl, r7, lsl #5
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b436:	eb02 1247 	add.w	r2, r2, r7, lsl #5
  if (hpcd->Init.dma_enable == 1U)
 800b43a:	f1bc 0f01 	cmp.w	ip, #1
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b43e:	608b      	str	r3, [r1, #8]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b440:	6c03      	ldr	r3, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800b442:	f8d2 e008 	ldr.w	lr, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800b446:	d04b      	beq.n	800b4e0 <HAL_PCD_IRQHandler+0x5a4>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800b448:	494e      	ldr	r1, [pc, #312]	; (800b584 <HAL_PCD_IRQHandler+0x648>)
 800b44a:	428b      	cmp	r3, r1
 800b44c:	d057      	beq.n	800b4fe <HAL_PCD_IRQHandler+0x5c2>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b44e:	b927      	cbnz	r7, 800b45a <HAL_PCD_IRQHandler+0x51e>
 800b450:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800b454:	2a00      	cmp	r2, #0
 800b456:	f000 808c 	beq.w	800b572 <HAL_PCD_IRQHandler+0x636>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b45a:	4620      	mov	r0, r4
 800b45c:	4631      	mov	r1, r6
 800b45e:	f016 fbfb 	bl	8021c58 <HAL_PCD_DataOutStageCallback>
 800b462:	6820      	ldr	r0, [r4, #0]
 800b464:	e6a8      	b.n	800b1b8 <HAL_PCD_IRQHandler+0x27c>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b466:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800b46a:	421d      	tst	r5, r3
 800b46c:	f43f ad98 	beq.w	800afa0 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b470:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 800b474:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800b478:	4630      	mov	r0, r6
 800b47a:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800b47e:	4615      	mov	r5, r2
 800b480:	f8d7 1208 	ldr.w	r1, [r7, #520]	; 0x208
 800b484:	f006 fdca 	bl	801201c <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b488:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b48c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b490:	442a      	add	r2, r5
 800b492:	6820      	ldr	r0, [r4, #0]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b494:	441d      	add	r5, r3
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b496:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b49a:	f8c7 5214 	str.w	r5, [r7, #532]	; 0x214
 800b49e:	e57f      	b.n	800afa0 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f016 fc07 	bl	8021cb4 <HAL_PCD_SuspendCallback>
 800b4a6:	e5e9      	b.n	800b07c <HAL_PCD_IRQHandler+0x140>
        HAL_PCD_DisconnectCallback(hpcd);
 800b4a8:	4620      	mov	r0, r4
 800b4aa:	f016 fc2b 	bl	8021d04 <HAL_PCD_DisconnectCallback>
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	e5db      	b.n	800b06a <HAL_PCD_IRQHandler+0x12e>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b4b2:	e9d5 2311 	ldrd	r2, r3, [r5, #68]	; 0x44
 800b4b6:	4413      	add	r3, r2
 800b4b8:	64ab      	str	r3, [r5, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b4ba:	f1ba 0f00 	cmp.w	sl, #0
 800b4be:	f47f ae33 	bne.w	800b128 <HAL_PCD_IRQHandler+0x1ec>
 800b4c2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f47f ae2f 	bne.w	800b128 <HAL_PCD_IRQHandler+0x1ec>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b4ca:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b4ce:	6820      	ldr	r0, [r4, #0]
 800b4d0:	f006 fea6 	bl	8012220 <USB_EP0_OutStart>
 800b4d4:	e628      	b.n	800b128 <HAL_PCD_IRQHandler+0x1ec>
  HAL_PCD_SetupStageCallback(hpcd);
 800b4d6:	4620      	mov	r0, r4
 800b4d8:	f016 fbb8 	bl	8021c4c <HAL_PCD_SetupStageCallback>
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800b4dc:	6820      	ldr	r0, [r4, #0]
 800b4de:	e66f      	b.n	800b1c0 <HAL_PCD_IRQHandler+0x284>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800b4e0:	f01e 0f08 	tst.w	lr, #8
 800b4e4:	d014      	beq.n	800b510 <HAL_PCD_IRQHandler+0x5d4>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b4e6:	4926      	ldr	r1, [pc, #152]	; (800b580 <HAL_PCD_IRQHandler+0x644>)
 800b4e8:	428b      	cmp	r3, r1
 800b4ea:	f67f ae65 	bls.w	800b1b8 <HAL_PCD_IRQHandler+0x27c>
 800b4ee:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800b4f2:	f43f ae61 	beq.w	800b1b8 <HAL_PCD_IRQHandler+0x27c>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800b4f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b4fa:	6093      	str	r3, [r2, #8]
 800b4fc:	e65c      	b.n	800b1b8 <HAL_PCD_IRQHandler+0x27c>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800b4fe:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800b502:	d1f8      	bne.n	800b4f6 <HAL_PCD_IRQHandler+0x5ba>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b504:	f01e 0f20 	tst.w	lr, #32
 800b508:	d0a7      	beq.n	800b45a <HAL_PCD_IRQHandler+0x51e>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b50a:	2120      	movs	r1, #32
 800b50c:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b50e:	e7a4      	b.n	800b45a <HAL_PCD_IRQHandler+0x51e>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800b510:	f01e 0f20 	tst.w	lr, #32
 800b514:	d008      	beq.n	800b528 <HAL_PCD_IRQHandler+0x5ec>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b516:	2320      	movs	r3, #32
 800b518:	6093      	str	r3, [r2, #8]
 800b51a:	e64d      	b.n	800b1b8 <HAL_PCD_IRQHandler+0x27c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b51c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b520:	6820      	ldr	r0, [r4, #0]
 800b522:	f006 fe7d 	bl	8012220 <USB_EP0_OutStart>
 800b526:	e77d      	b.n	800b424 <HAL_PCD_IRQHandler+0x4e8>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800b528:	f01e 0f28 	tst.w	lr, #40	; 0x28
 800b52c:	f47f ae44 	bne.w	800b1b8 <HAL_PCD_IRQHandler+0x27c>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800b530:	4913      	ldr	r1, [pc, #76]	; (800b580 <HAL_PCD_IRQHandler+0x644>)
 800b532:	428b      	cmp	r3, r1
 800b534:	d902      	bls.n	800b53c <HAL_PCD_IRQHandler+0x600>
 800b536:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
 800b53a:	d1dc      	bne.n	800b4f6 <HAL_PCD_IRQHandler+0x5ba>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b53c:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800b53e:	f8d9 3000 	ldr.w	r3, [r9]
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b542:	f8d9 1004 	ldr.w	r1, [r9, #4]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800b546:	f3c2 0212 	ubfx	r2, r2, #0, #19
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b54a:	4419      	add	r1, r3
          hpcd->OUT_ep[epnum].maxpacket -
 800b54c:	1a9a      	subs	r2, r3, r2
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800b54e:	f8c9 1004 	str.w	r1, [r9, #4]
        hpcd->OUT_ep[epnum].xfer_count =
 800b552:	f8c9 2010 	str.w	r2, [r9, #16]
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800b556:	2f00      	cmp	r7, #0
 800b558:	f47f af7f 	bne.w	800b45a <HAL_PCD_IRQHandler+0x51e>
 800b55c:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800b560:	2a00      	cmp	r2, #0
 800b562:	f47f af7a 	bne.w	800b45a <HAL_PCD_IRQHandler+0x51e>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b566:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b56a:	2101      	movs	r1, #1
 800b56c:	f006 fe58 	bl	8012220 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800b570:	e773      	b.n	800b45a <HAL_PCD_IRQHandler+0x51e>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800b572:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b576:	4639      	mov	r1, r7
 800b578:	f006 fe52 	bl	8012220 <USB_EP0_OutStart>
 800b57c:	e76d      	b.n	800b45a <HAL_PCD_IRQHandler+0x51e>
 800b57e:	bf00      	nop
 800b580:	4f54300a 	.word	0x4f54300a
 800b584:	4f54310a 	.word	0x4f54310a

0800b588 <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800b588:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800b58c:	2a01      	cmp	r2, #1
 800b58e:	d00d      	beq.n	800b5ac <HAL_PCD_SetAddress+0x24>
 800b590:	2201      	movs	r2, #1
{
 800b592:	b510      	push	{r4, lr}
 800b594:	4604      	mov	r4, r0
  hpcd->USB_Address = address;
 800b596:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b59a:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800b59c:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b5a0:	f006 fdc2 	bl	8012128 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b5a4:	2000      	movs	r0, #0
 800b5a6:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b5aa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800b5ac:	2002      	movs	r0, #2
}
 800b5ae:	4770      	bx	lr

0800b5b0 <HAL_PCD_EP_Open>:
{
 800b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5b2:	f001 050f 	and.w	r5, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800b5b6:	0609      	lsls	r1, r1, #24
{
 800b5b8:	4606      	mov	r6, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b5ba:	f04f 041c 	mov.w	r4, #28
  if ((ep_addr & 0x80U) == 0x80U)
 800b5be:	d422      	bmi.n	800b606 <HAL_PCD_EP_Open+0x56>
    ep->is_in = 0U;
 800b5c0:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5c4:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 0U;
 800b5c8:	2700      	movs	r7, #0
 800b5ca:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b5ce:	f504 71fe 	add.w	r1, r4, #508	; 0x1fc
    ep->is_in = 0U;
 800b5d2:	f880 71fd 	strb.w	r7, [r0, #509]	; 0x1fd
  if (ep->is_in != 0U)
 800b5d6:	7848      	ldrb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b5d8:	700d      	strb	r5, [r1, #0]
  ep->maxpacket = ep_mps;
 800b5da:	608a      	str	r2, [r1, #8]
  ep->type = ep_type;
 800b5dc:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800b5de:	b100      	cbz	r0, 800b5e2 <HAL_PCD_EP_Open+0x32>
    ep->tx_fifo_num = ep->num;
 800b5e0:	80cd      	strh	r5, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800b5e2:	2b02      	cmp	r3, #2
 800b5e4:	d101      	bne.n	800b5ea <HAL_PCD_EP_Open+0x3a>
    ep->data_pid_start = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800b5ea:	f896 33bc 	ldrb.w	r3, [r6, #956]	; 0x3bc
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d015      	beq.n	800b61e <HAL_PCD_EP_Open+0x6e>
 800b5f2:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b5f4:	6830      	ldr	r0, [r6, #0]
  __HAL_LOCK(hpcd);
 800b5f6:	f886 33bc 	strb.w	r3, [r6, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b5fa:	f006 fab5 	bl	8011b68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b5fe:	2000      	movs	r0, #0
 800b600:	f886 03bc 	strb.w	r0, [r6, #956]	; 0x3bc
}
 800b604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ep->is_in = 1U;
 800b606:	ebc5 00c5 	rsb	r0, r5, r5, lsl #3
 800b60a:	2701      	movs	r7, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b60c:	fb04 6405 	mla	r4, r4, r5, r6
    ep->is_in = 1U;
 800b610:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b614:	f104 013c 	add.w	r1, r4, #60	; 0x3c
    ep->is_in = 1U;
 800b618:	f880 703d 	strb.w	r7, [r0, #61]	; 0x3d
 800b61c:	e7db      	b.n	800b5d6 <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800b61e:	2002      	movs	r0, #2
}
 800b620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b622:	bf00      	nop

0800b624 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800b624:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b628:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b62c:	f04f 011c 	mov.w	r1, #28
{
 800b630:	b510      	push	{r4, lr}
 800b632:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800b634:	d119      	bne.n	800b66a <HAL_PCD_EP_Close+0x46>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b636:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800b63a:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b63e:	2000      	movs	r0, #0
 800b640:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b644:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b648:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b64c:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800b64e:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b652:	2b01      	cmp	r3, #1
 800b654:	d018      	beq.n	800b688 <HAL_PCD_EP_Close+0x64>
 800b656:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b658:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b65a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b65e:	f006 facb 	bl	8011bf8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b662:	2000      	movs	r0, #0
 800b664:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b668:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b66a:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800b66e:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800b672:	2001      	movs	r0, #1
 800b674:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b678:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b67a:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800b67e:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800b680:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b684:	2b01      	cmp	r3, #1
 800b686:	d1e6      	bne.n	800b656 <HAL_PCD_EP_Close+0x32>
 800b688:	2002      	movs	r0, #2
}
 800b68a:	bd10      	pop	{r4, pc}

0800b68c <HAL_PCD_EP_Receive>:
{
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	f001 050f 	and.w	r5, r1, #15
  ep->xfer_count = 0U;
 800b692:	2600      	movs	r6, #0
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b694:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800b696:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b69a:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800b69e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b6a2:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_buff = pBuf;
 800b6a6:	f8c4 2208 	str.w	r2, [r4, #520]	; 0x208
  ep->xfer_len = len;
 800b6aa:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
  ep->num = ep_addr & EP_ADDR_MSK;
 800b6ae:	f884 51fc 	strb.w	r5, [r4, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800b6b2:	f8c4 6214 	str.w	r6, [r4, #532]	; 0x214
  ep->is_in = 0U;
 800b6b6:	f884 61fd 	strb.w	r6, [r4, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800b6ba:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6bc:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800b6be:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800b6c0:	bf08      	it	eq
 800b6c2:	f8c4 220c 	streq.w	r2, [r4, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6c6:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b6c8:	b91d      	cbnz	r5, 800b6d2 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6ca:	f006 fc0b 	bl	8011ee4 <USB_EP0StartXfer>
}
 800b6ce:	2000      	movs	r0, #0
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b6d2:	f006 faf3 	bl	8011cbc <USB_EPStartXfer>
}
 800b6d6:	2000      	movs	r0, #0
 800b6d8:	bd70      	pop	{r4, r5, r6, pc}
 800b6da:	bf00      	nop

0800b6dc <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b6dc:	f001 010f 	and.w	r1, r1, #15
 800b6e0:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800b6e4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800b6e8:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop

0800b6f0 <HAL_PCD_EP_Transmit>:
{
 800b6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6f2:	f001 050f 	and.w	r5, r1, #15
  ep->is_in = 1U;
 800b6f6:	2601      	movs	r6, #1
  ep->xfer_count = 0U;
 800b6f8:	2700      	movs	r7, #0
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b6fa:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800b6fc:	ebc5 04c5 	rsb	r4, r5, r5, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b700:	fb01 0105 	mla	r1, r1, r5, r0
  ep->xfer_buff = pBuf;
 800b704:	eb00 0484 	add.w	r4, r0, r4, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b708:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_buff = pBuf;
 800b70a:	64a2      	str	r2, [r4, #72]	; 0x48
  ep->xfer_len = len;
 800b70c:	6523      	str	r3, [r4, #80]	; 0x50
  ep->num = ep_addr & EP_ADDR_MSK;
 800b70e:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 800b712:	6567      	str	r7, [r4, #84]	; 0x54
  ep->is_in = 1U;
 800b714:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800b718:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b71a:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800b71c:	42b3      	cmp	r3, r6
    ep->dma_addr = (uint32_t)pBuf;
 800b71e:	bf08      	it	eq
 800b720:	64e2      	streq	r2, [r4, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b722:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b724:	b91d      	cbnz	r5, 800b72e <HAL_PCD_EP_Transmit+0x3e>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b726:	f006 fbdd 	bl	8011ee4 <USB_EP0StartXfer>
}
 800b72a:	2000      	movs	r0, #0
 800b72c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b72e:	f006 fac5 	bl	8011cbc <USB_EPStartXfer>
}
 800b732:	2000      	movs	r0, #0
 800b734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b736:	bf00      	nop

0800b738 <HAL_PCD_EP_SetStall>:
{
 800b738:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800b73a:	6843      	ldr	r3, [r0, #4]
 800b73c:	f001 050f 	and.w	r5, r1, #15
 800b740:	429d      	cmp	r5, r3
 800b742:	d833      	bhi.n	800b7ac <HAL_PCD_EP_SetStall+0x74>
  if ((0x80U & ep_addr) == 0x80U)
 800b744:	060b      	lsls	r3, r1, #24
 800b746:	4604      	mov	r4, r0
 800b748:	d41c      	bmi.n	800b784 <HAL_PCD_EP_SetStall+0x4c>
    ep->is_in = 0U;
 800b74a:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800b74e:	201c      	movs	r0, #28
    ep->is_in = 0U;
 800b750:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800b752:	fb00 4101 	mla	r1, r0, r1, r4
    ep->is_in = 0U;
 800b756:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    ep = &hpcd->OUT_ep[ep_addr];
 800b75a:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b75e:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800b762:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800b764:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800b766:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800b768:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800b76c:	429a      	cmp	r2, r3
 800b76e:	d01b      	beq.n	800b7a8 <HAL_PCD_EP_SetStall+0x70>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b770:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b772:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800b776:	f006 fc77 	bl	8012068 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800b77a:	b1cd      	cbz	r5, 800b7b0 <HAL_PCD_EP_SetStall+0x78>
  __HAL_UNLOCK(hpcd);
 800b77c:	2000      	movs	r0, #0
 800b77e:	f884 03bc 	strb.w	r0, [r4, #956]	; 0x3bc
}
 800b782:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b784:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800b786:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800b78a:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b78c:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800b790:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b794:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800b79a:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800b79c:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800b79e:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800b7a0:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d1e3      	bne.n	800b770 <HAL_PCD_EP_SetStall+0x38>
 800b7a8:	2002      	movs	r0, #2
}
 800b7aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b7ac:	2001      	movs	r0, #1
}
 800b7ae:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800b7b0:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800b7b4:	7c21      	ldrb	r1, [r4, #16]
 800b7b6:	6820      	ldr	r0, [r4, #0]
 800b7b8:	f006 fd32 	bl	8012220 <USB_EP0_OutStart>
 800b7bc:	e7de      	b.n	800b77c <HAL_PCD_EP_SetStall+0x44>
 800b7be:	bf00      	nop

0800b7c0 <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b7c0:	6842      	ldr	r2, [r0, #4]
{
 800b7c2:	b538      	push	{r3, r4, r5, lr}
 800b7c4:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d832      	bhi.n	800b832 <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800b7cc:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b7d0:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b7d2:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800b7d6:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800b7da:	d119      	bne.n	800b810 <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7dc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800b7e6:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b7e8:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800b7ec:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800b7f0:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800b7f2:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800b7f4:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b7f8:	2b01      	cmp	r3, #1
 800b7fa:	d018      	beq.n	800b82e <HAL_PCD_EP_ClrStall+0x6e>
 800b7fc:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b7fe:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800b800:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800b804:	f006 fc64 	bl	80120d0 <USB_EPClearStall>
  return HAL_OK;
 800b808:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800b80a:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800b80e:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b810:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800b814:	2001      	movs	r0, #1
 800b816:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800b81a:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b81c:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800b81e:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800b822:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800b824:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800b826:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d1e6      	bne.n	800b7fc <HAL_PCD_EP_ClrStall+0x3c>
 800b82e:	2002      	movs	r0, #2
}
 800b830:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b832:	2001      	movs	r0, #1
}
 800b834:	bd38      	pop	{r3, r4, r5, pc}
 800b836:	bf00      	nop

0800b838 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800b838:	b430      	push	{r4, r5}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800b83a:	6805      	ldr	r5, [r0, #0]
 800b83c:	6a6b      	ldr	r3, [r5, #36]	; 0x24

  if (fifo == 0U)
 800b83e:	b929      	cbnz	r1, 800b84c <HAL_PCDEx_SetTxFiFo+0x14>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b840:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800b844:	2000      	movs	r0, #0
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800b846:	62ab      	str	r3, [r5, #40]	; 0x28
}
 800b848:	bc30      	pop	{r4, r5}
 800b84a:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b84c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800b84e:	1e4c      	subs	r4, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800b850:	eb03 4010 	add.w	r0, r3, r0, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800b854:	d00b      	beq.n	800b86e <HAL_PCDEx_SetTxFiFo+0x36>
 800b856:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b858:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800b85c:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b85e:	eb05 0181 	add.w	r1, r5, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800b862:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b864:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800b866:	42a3      	cmp	r3, r4
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800b868:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800b86c:	d3f4      	bcc.n	800b858 <HAL_PCDEx_SetTxFiFo+0x20>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800b86e:	3440      	adds	r4, #64	; 0x40
 800b870:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800b874:	eb05 0484 	add.w	r4, r5, r4, lsl #2
 800b878:	6060      	str	r0, [r4, #4]
}
 800b87a:	2000      	movs	r0, #0
 800b87c:	bc30      	pop	{r4, r5}
 800b87e:	4770      	bx	lr

0800b880 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800b880:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800b882:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800b884:	681b      	ldr	r3, [r3, #0]
 800b886:	6259      	str	r1, [r3, #36]	; 0x24
}
 800b888:	4770      	bx	lr
 800b88a:	bf00      	nop

0800b88c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b88c:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b88e:	4909      	ldr	r1, [pc, #36]	; (800b8b4 <HAL_PCDEx_ActivateLPM+0x28>)
{
 800b890:	b430      	push	{r4, r5}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b892:	681a      	ldr	r2, [r3, #0]
  hpcd->LPM_State = LPM_L0;
 800b894:	2400      	movs	r4, #0
  hpcd->lpm_active = 1U;
 800b896:	2501      	movs	r5, #1
  hpcd->LPM_State = LPM_L0;
 800b898:	f883 43f4 	strb.w	r4, [r3, #1012]	; 0x3f4

  return HAL_OK;
}
 800b89c:	4620      	mov	r0, r4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b89e:	6994      	ldr	r4, [r2, #24]
  hpcd->lpm_active = 1U;
 800b8a0:	f8c3 53fc 	str.w	r5, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b8a4:	f044 6400 	orr.w	r4, r4, #134217728	; 0x8000000
 800b8a8:	6194      	str	r4, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b8aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800b8ac:	4319      	orrs	r1, r3
}
 800b8ae:	bc30      	pop	{r4, r5}
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b8b0:	6551      	str	r1, [r2, #84]	; 0x54
}
 800b8b2:	4770      	bx	lr
 800b8b4:	10000003 	.word	0x10000003

0800b8b8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8b8:	4a02      	ldr	r2, [pc, #8]	; (800b8c4 <HAL_PWR_EnableBkUpAccess+0xc>)
 800b8ba:	6813      	ldr	r3, [r2, #0]
 800b8bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b8c0:	6013      	str	r3, [r2, #0]
}
 800b8c2:	4770      	bx	lr
 800b8c4:	40007000 	.word	0x40007000

0800b8c8 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800b8c8:	4a1b      	ldr	r2, [pc, #108]	; (800b938 <HAL_PWREx_EnableOverDrive+0x70>)
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b8ca:	4b1c      	ldr	r3, [pc, #112]	; (800b93c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8cc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800b8ce:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
{
 800b8d2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8d4:	6411      	str	r1, [r2, #64]	; 0x40
{
 800b8d6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8d8:	6c12      	ldr	r2, [r2, #64]	; 0x40

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b8da:	461d      	mov	r5, r3
  __HAL_RCC_PWR_CLK_ENABLE();
 800b8dc:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800b8e0:	9201      	str	r2, [sp, #4]
 800b8e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b8ea:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800b8ec:	f7fb fa2e 	bl	8006d4c <HAL_GetTick>
 800b8f0:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b8f2:	e005      	b.n	800b900 <HAL_PWREx_EnableOverDrive+0x38>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b8f4:	f7fb fa2a 	bl	8006d4c <HAL_GetTick>
 800b8f8:	1b00      	subs	r0, r0, r4
 800b8fa:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b8fe:	d817      	bhi.n	800b930 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800b900:	686b      	ldr	r3, [r5, #4]
 800b902:	03da      	lsls	r2, r3, #15
 800b904:	d5f6      	bpl.n	800b8f4 <HAL_PWREx_EnableOverDrive+0x2c>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b906:	682b      	ldr	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b908:	4e0c      	ldr	r6, [pc, #48]	; (800b93c <HAL_PWREx_EnableOverDrive+0x74>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800b90a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b90e:	602b      	str	r3, [r5, #0]
  tickstart = HAL_GetTick();
 800b910:	f7fb fa1c 	bl	8006d4c <HAL_GetTick>
 800b914:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b916:	e005      	b.n	800b924 <HAL_PWREx_EnableOverDrive+0x5c>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800b918:	f7fb fa18 	bl	8006d4c <HAL_GetTick>
 800b91c:	1b00      	subs	r0, r0, r4
 800b91e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b922:	d805      	bhi.n	800b930 <HAL_PWREx_EnableOverDrive+0x68>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800b924:	6873      	ldr	r3, [r6, #4]
 800b926:	039b      	lsls	r3, r3, #14
 800b928:	d5f6      	bpl.n	800b918 <HAL_PWREx_EnableOverDrive+0x50>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800b92a:	2000      	movs	r0, #0
}
 800b92c:	b002      	add	sp, #8
 800b92e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_TIMEOUT;
 800b930:	2003      	movs	r0, #3
}
 800b932:	b002      	add	sp, #8
 800b934:	bd70      	pop	{r4, r5, r6, pc}
 800b936:	bf00      	nop
 800b938:	40023800 	.word	0x40023800
 800b93c:	40007000 	.word	0x40007000

0800b940 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b940:	2800      	cmp	r0, #0
 800b942:	f000 8296 	beq.w	800be72 <HAL_RCC_OscConfig+0x532>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800b946:	6803      	ldr	r3, [r0, #0]
 800b948:	2b0f      	cmp	r3, #15
{
 800b94a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94e:	4604      	mov	r4, r0
 800b950:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800b952:	f200 8126 	bhi.w	800bba2 <HAL_RCC_OscConfig+0x262>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b956:	07dd      	lsls	r5, r3, #31
 800b958:	d534      	bpl.n	800b9c4 <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800b95a:	6863      	ldr	r3, [r4, #4]
 800b95c:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800b960:	d003      	beq.n	800b96a <HAL_RCC_OscConfig+0x2a>
 800b962:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b966:	f040 8179 	bne.w	800bc5c <HAL_RCC_OscConfig+0x31c>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b96a:	4ab4      	ldr	r2, [pc, #720]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800b96c:	6893      	ldr	r3, [r2, #8]
 800b96e:	f003 030c 	and.w	r3, r3, #12
 800b972:	2b04      	cmp	r3, #4
 800b974:	d01d      	beq.n	800b9b2 <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b976:	6893      	ldr	r3, [r2, #8]
 800b978:	f003 030c 	and.w	r3, r3, #12
 800b97c:	2b08      	cmp	r3, #8
 800b97e:	d015      	beq.n	800b9ac <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b980:	6863      	ldr	r3, [r4, #4]
 800b982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b986:	f000 816f 	beq.w	800bc68 <HAL_RCC_OscConfig+0x328>
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 81a1 	beq.w	800bcd2 <HAL_RCC_OscConfig+0x392>
 800b990:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b994:	4ba9      	ldr	r3, [pc, #676]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	f000 8236 	beq.w	800be08 <HAL_RCC_OscConfig+0x4c8>
 800b99c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800b9a0:	601a      	str	r2, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b9a8:	601a      	str	r2, [r3, #0]
 800b9aa:	e162      	b.n	800bc72 <HAL_RCC_OscConfig+0x332>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800b9ac:	6853      	ldr	r3, [r2, #4]
 800b9ae:	0258      	lsls	r0, r3, #9
 800b9b0:	d5e6      	bpl.n	800b980 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9b2:	4ba2      	ldr	r3, [pc, #648]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	0399      	lsls	r1, r3, #14
 800b9b8:	d503      	bpl.n	800b9c2 <HAL_RCC_OscConfig+0x82>
 800b9ba:	6863      	ldr	r3, [r4, #4]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	f000 8102 	beq.w	800bbc6 <HAL_RCC_OscConfig+0x286>
 800b9c2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9c4:	079f      	lsls	r7, r3, #30
 800b9c6:	d532      	bpl.n	800ba2e <HAL_RCC_OscConfig+0xee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800b9c8:	68e3      	ldr	r3, [r4, #12]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	f200 80ff 	bhi.w	800bbce <HAL_RCC_OscConfig+0x28e>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800b9d0:	6923      	ldr	r3, [r4, #16]
 800b9d2:	2b1f      	cmp	r3, #31
 800b9d4:	f200 8104 	bhi.w	800bbe0 <HAL_RCC_OscConfig+0x2a0>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b9d8:	4b98      	ldr	r3, [pc, #608]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800b9da:	689a      	ldr	r2, [r3, #8]
 800b9dc:	f012 0f0c 	tst.w	r2, #12
 800b9e0:	f000 80ea 	beq.w	800bbb8 <HAL_RCC_OscConfig+0x278>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800b9e4:	689a      	ldr	r2, [r3, #8]
 800b9e6:	f002 020c 	and.w	r2, r2, #12
 800b9ea:	2a08      	cmp	r2, #8
 800b9ec:	f000 80e0 	beq.w	800bbb0 <HAL_RCC_OscConfig+0x270>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b9f0:	68e3      	ldr	r3, [r4, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	f000 81a5 	beq.w	800bd42 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b9f8:	4b90      	ldr	r3, [pc, #576]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800b9fa:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b9fc:	461e      	mov	r6, r3
        __HAL_RCC_HSI_ENABLE();
 800b9fe:	f042 0201 	orr.w	r2, r2, #1
 800ba02:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800ba04:	f7fb f9a2 	bl	8006d4c <HAL_GetTick>
 800ba08:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba0a:	e005      	b.n	800ba18 <HAL_RCC_OscConfig+0xd8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ba0c:	f7fb f99e 	bl	8006d4c <HAL_GetTick>
 800ba10:	1b40      	subs	r0, r0, r5
 800ba12:	2802      	cmp	r0, #2
 800ba14:	f200 8159 	bhi.w	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ba18:	6833      	ldr	r3, [r6, #0]
 800ba1a:	0798      	lsls	r0, r3, #30
 800ba1c:	d5f6      	bpl.n	800ba0c <HAL_RCC_OscConfig+0xcc>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba1e:	6833      	ldr	r3, [r6, #0]
 800ba20:	6922      	ldr	r2, [r4, #16]
 800ba22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800ba26:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ba2a:	6033      	str	r3, [r6, #0]
 800ba2c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ba2e:	071a      	lsls	r2, r3, #28
 800ba30:	d42a      	bmi.n	800ba88 <HAL_RCC_OscConfig+0x148>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800ba32:	075e      	lsls	r6, r3, #29
 800ba34:	d545      	bpl.n	800bac2 <HAL_RCC_OscConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800ba36:	68a3      	ldr	r3, [r4, #8]
 800ba38:	2b01      	cmp	r3, #1
 800ba3a:	d906      	bls.n	800ba4a <HAL_RCC_OscConfig+0x10a>
 800ba3c:	2b05      	cmp	r3, #5
 800ba3e:	d004      	beq.n	800ba4a <HAL_RCC_OscConfig+0x10a>
 800ba40:	f240 2106 	movw	r1, #518	; 0x206
 800ba44:	487e      	ldr	r0, [pc, #504]	; (800bc40 <HAL_RCC_OscConfig+0x300>)
 800ba46:	f7f8 f979 	bl	8003d3c <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba4a:	4b7c      	ldr	r3, [pc, #496]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800ba4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ba4e:	00d5      	lsls	r5, r2, #3
 800ba50:	f140 80e8 	bpl.w	800bc24 <HAL_RCC_OscConfig+0x2e4>
  FlagStatus pwrclkchanged = RESET;
 800ba54:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800ba56:	4b7b      	ldr	r3, [pc, #492]	; (800bc44 <HAL_RCC_OscConfig+0x304>)
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	05d0      	lsls	r0, r2, #23
 800ba5c:	f140 8124 	bpl.w	800bca8 <HAL_RCC_OscConfig+0x368>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ba60:	68a3      	ldr	r3, [r4, #8]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	f000 8181 	beq.w	800bd6a <HAL_RCC_OscConfig+0x42a>
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	f000 8149 	beq.w	800bd00 <HAL_RCC_OscConfig+0x3c0>
 800ba6e:	2b05      	cmp	r3, #5
 800ba70:	4b72      	ldr	r3, [pc, #456]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800ba72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba74:	f000 81d0 	beq.w	800be18 <HAL_RCC_OscConfig+0x4d8>
 800ba78:	f022 0201 	bic.w	r2, r2, #1
 800ba7c:	671a      	str	r2, [r3, #112]	; 0x70
 800ba7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ba80:	f022 0204 	bic.w	r2, r2, #4
 800ba84:	671a      	str	r2, [r3, #112]	; 0x70
 800ba86:	e175      	b.n	800bd74 <HAL_RCC_OscConfig+0x434>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800ba88:	6963      	ldr	r3, [r4, #20]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	f200 80c1 	bhi.w	800bc12 <HAL_RCC_OscConfig+0x2d2>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	f000 80ab 	beq.w	800bbec <HAL_RCC_OscConfig+0x2ac>
      __HAL_RCC_LSI_ENABLE();
 800ba96:	4b69      	ldr	r3, [pc, #420]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800ba98:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800ba9a:	461e      	mov	r6, r3
      __HAL_RCC_LSI_ENABLE();
 800ba9c:	f042 0201 	orr.w	r2, r2, #1
 800baa0:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800baa2:	f7fb f953 	bl	8006d4c <HAL_GetTick>
 800baa6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800baa8:	e005      	b.n	800bab6 <HAL_RCC_OscConfig+0x176>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800baaa:	f7fb f94f 	bl	8006d4c <HAL_GetTick>
 800baae:	1b40      	subs	r0, r0, r5
 800bab0:	2802      	cmp	r0, #2
 800bab2:	f200 810a 	bhi.w	800bcca <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bab6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800bab8:	079b      	lsls	r3, r3, #30
 800baba:	d5f6      	bpl.n	800baaa <HAL_RCC_OscConfig+0x16a>
 800babc:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800babe:	075e      	lsls	r6, r3, #29
 800bac0:	d4b9      	bmi.n	800ba36 <HAL_RCC_OscConfig+0xf6>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800bac2:	69a0      	ldr	r0, [r4, #24]
 800bac4:	2802      	cmp	r0, #2
 800bac6:	f200 80bf 	bhi.w	800bc48 <HAL_RCC_OscConfig+0x308>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800baca:	2800      	cmp	r0, #0
 800bacc:	d065      	beq.n	800bb9a <HAL_RCC_OscConfig+0x25a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bace:	4a5b      	ldr	r2, [pc, #364]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800bad0:	6893      	ldr	r3, [r2, #8]
 800bad2:	f003 030c 	and.w	r3, r3, #12
 800bad6:	2b08      	cmp	r3, #8
 800bad8:	f000 815f 	beq.w	800bd9a <HAL_RCC_OscConfig+0x45a>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800badc:	2802      	cmp	r0, #2
 800bade:	f040 81b5 	bne.w	800be4c <HAL_RCC_OscConfig+0x50c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800bae2:	69e3      	ldr	r3, [r4, #28]
 800bae4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800bae8:	f040 81aa 	bne.w	800be40 <HAL_RCC_OscConfig+0x500>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800baec:	6a23      	ldr	r3, [r4, #32]
 800baee:	3b02      	subs	r3, #2
 800baf0:	2b3d      	cmp	r3, #61	; 0x3d
 800baf2:	f200 819f 	bhi.w	800be34 <HAL_RCC_OscConfig+0x4f4>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800baf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800baf8:	3b32      	subs	r3, #50	; 0x32
 800bafa:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800bafe:	f200 8193 	bhi.w	800be28 <HAL_RCC_OscConfig+0x4e8>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800bb02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bb04:	2b08      	cmp	r3, #8
 800bb06:	f200 8179 	bhi.w	800bdfc <HAL_RCC_OscConfig+0x4bc>
 800bb0a:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800bb0e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb12:	07d8      	lsls	r0, r3, #31
 800bb14:	f140 8172 	bpl.w	800bdfc <HAL_RCC_OscConfig+0x4bc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800bb18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bb1a:	3b02      	subs	r3, #2
 800bb1c:	2b0d      	cmp	r3, #13
 800bb1e:	f200 81b0 	bhi.w	800be82 <HAL_RCC_OscConfig+0x542>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800bb22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bb24:	3b02      	subs	r3, #2
 800bb26:	2b05      	cmp	r3, #5
 800bb28:	f200 81a5 	bhi.w	800be76 <HAL_RCC_OscConfig+0x536>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb2c:	4b43      	ldr	r3, [pc, #268]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800bb2e:	681a      	ldr	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb30:	461d      	mov	r5, r3
        __HAL_RCC_PLL_DISABLE();
 800bb32:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800bb36:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800bb38:	f7fb f908 	bl	8006d4c <HAL_GetTick>
 800bb3c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb3e:	e005      	b.n	800bb4c <HAL_RCC_OscConfig+0x20c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb40:	f7fb f904 	bl	8006d4c <HAL_GetTick>
 800bb44:	1b80      	subs	r0, r0, r6
 800bb46:	2802      	cmp	r0, #2
 800bb48:	f200 80bf 	bhi.w	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800bb4c:	682b      	ldr	r3, [r5, #0]
 800bb4e:	0199      	lsls	r1, r3, #6
 800bb50:	d4f6      	bmi.n	800bb40 <HAL_RCC_OscConfig+0x200>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb52:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 800bb56:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800bb5e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800bb62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800bb64:	0852      	lsrs	r2, r2, #1

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb66:	4c35      	ldr	r4, [pc, #212]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bb68:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800bb6c:	3a01      	subs	r2, #1
 800bb6e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800bb72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb76:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800bb78:	682b      	ldr	r3, [r5, #0]
 800bb7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bb7e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bb80:	f7fb f8e4 	bl	8006d4c <HAL_GetTick>
 800bb84:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb86:	e005      	b.n	800bb94 <HAL_RCC_OscConfig+0x254>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb88:	f7fb f8e0 	bl	8006d4c <HAL_GetTick>
 800bb8c:	1b40      	subs	r0, r0, r5
 800bb8e:	2802      	cmp	r0, #2
 800bb90:	f200 809b 	bhi.w	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bb94:	6823      	ldr	r3, [r4, #0]
 800bb96:	019a      	lsls	r2, r3, #6
 800bb98:	d5f6      	bpl.n	800bb88 <HAL_RCC_OscConfig+0x248>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800bb9a:	2000      	movs	r0, #0
}
 800bb9c:	b002      	add	sp, #8
 800bb9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800bba2:	f240 1163 	movw	r1, #355	; 0x163
 800bba6:	4826      	ldr	r0, [pc, #152]	; (800bc40 <HAL_RCC_OscConfig+0x300>)
 800bba8:	f7f8 f8c8 	bl	8003d3c <assert_failed>
 800bbac:	6823      	ldr	r3, [r4, #0]
 800bbae:	e6d2      	b.n	800b956 <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bbb0:	685b      	ldr	r3, [r3, #4]
 800bbb2:	025e      	lsls	r6, r3, #9
 800bbb4:	f53f af1c 	bmi.w	800b9f0 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bbb8:	4b20      	ldr	r3, [pc, #128]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	079d      	lsls	r5, r3, #30
 800bbbe:	d566      	bpl.n	800bc8e <HAL_RCC_OscConfig+0x34e>
 800bbc0:	68e3      	ldr	r3, [r4, #12]
 800bbc2:	2b01      	cmp	r3, #1
 800bbc4:	d063      	beq.n	800bc8e <HAL_RCC_OscConfig+0x34e>
        return HAL_ERROR;
 800bbc6:	2001      	movs	r0, #1
}
 800bbc8:	b002      	add	sp, #8
 800bbca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800bbce:	f240 119b 	movw	r1, #411	; 0x19b
 800bbd2:	481b      	ldr	r0, [pc, #108]	; (800bc40 <HAL_RCC_OscConfig+0x300>)
 800bbd4:	f7f8 f8b2 	bl	8003d3c <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800bbd8:	6923      	ldr	r3, [r4, #16]
 800bbda:	2b1f      	cmp	r3, #31
 800bbdc:	f67f aefc 	bls.w	800b9d8 <HAL_RCC_OscConfig+0x98>
 800bbe0:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800bbe4:	4816      	ldr	r0, [pc, #88]	; (800bc40 <HAL_RCC_OscConfig+0x300>)
 800bbe6:	f7f8 f8a9 	bl	8003d3c <assert_failed>
 800bbea:	e6f5      	b.n	800b9d8 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800bbec:	4b13      	ldr	r3, [pc, #76]	; (800bc3c <HAL_RCC_OscConfig+0x2fc>)
 800bbee:	6f5a      	ldr	r2, [r3, #116]	; 0x74
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbf0:	461e      	mov	r6, r3
      __HAL_RCC_LSI_DISABLE();
 800bbf2:	f022 0201 	bic.w	r2, r2, #1
 800bbf6:	675a      	str	r2, [r3, #116]	; 0x74
      tickstart = HAL_GetTick();
 800bbf8:	f7fb f8a8 	bl	8006d4c <HAL_GetTick>
 800bbfc:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bbfe:	e004      	b.n	800bc0a <HAL_RCC_OscConfig+0x2ca>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bc00:	f7fb f8a4 	bl	8006d4c <HAL_GetTick>
 800bc04:	1b40      	subs	r0, r0, r5
 800bc06:	2802      	cmp	r0, #2
 800bc08:	d85f      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bc0a:	6f73      	ldr	r3, [r6, #116]	; 0x74
 800bc0c:	079f      	lsls	r7, r3, #30
 800bc0e:	d4f7      	bmi.n	800bc00 <HAL_RCC_OscConfig+0x2c0>
 800bc10:	e754      	b.n	800babc <HAL_RCC_OscConfig+0x17c>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800bc12:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800bc16:	480a      	ldr	r0, [pc, #40]	; (800bc40 <HAL_RCC_OscConfig+0x300>)
 800bc18:	f7f8 f890 	bl	8003d3c <assert_failed>
 800bc1c:	6963      	ldr	r3, [r4, #20]
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0e4      	beq.n	800bbec <HAL_RCC_OscConfig+0x2ac>
 800bc22:	e738      	b.n	800ba96 <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800bc26:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc28:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800bc2c:	641a      	str	r2, [r3, #64]	; 0x40
 800bc2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc34:	9301      	str	r3, [sp, #4]
 800bc36:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800bc38:	e70d      	b.n	800ba56 <HAL_RCC_OscConfig+0x116>
 800bc3a:	bf00      	nop
 800bc3c:	40023800 	.word	0x40023800
 800bc40:	08029980 	.word	0x08029980
 800bc44:	40007000 	.word	0x40007000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800bc48:	4891      	ldr	r0, [pc, #580]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800bc4a:	f240 214a 	movw	r1, #586	; 0x24a
 800bc4e:	f7f8 f875 	bl	8003d3c <assert_failed>
 800bc52:	69a0      	ldr	r0, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bc54:	2800      	cmp	r0, #0
 800bc56:	f47f af3a 	bne.w	800bace <HAL_RCC_OscConfig+0x18e>
 800bc5a:	e79e      	b.n	800bb9a <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800bc5c:	f240 1169 	movw	r1, #361	; 0x169
 800bc60:	488b      	ldr	r0, [pc, #556]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800bc62:	f7f8 f86b 	bl	8003d3c <assert_failed>
 800bc66:	e680      	b.n	800b96a <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bc68:	4a8a      	ldr	r2, [pc, #552]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bc6a:	6813      	ldr	r3, [r2, #0]
 800bc6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bc70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800bc72:	f7fb f86b 	bl	8006d4c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc76:	4e87      	ldr	r6, [pc, #540]	; (800be94 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800bc78:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc7a:	e004      	b.n	800bc86 <HAL_RCC_OscConfig+0x346>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bc7c:	f7fb f866 	bl	8006d4c <HAL_GetTick>
 800bc80:	1b40      	subs	r0, r0, r5
 800bc82:	2864      	cmp	r0, #100	; 0x64
 800bc84:	d821      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bc86:	6833      	ldr	r3, [r6, #0]
 800bc88:	039a      	lsls	r2, r3, #14
 800bc8a:	d5f7      	bpl.n	800bc7c <HAL_RCC_OscConfig+0x33c>
 800bc8c:	e699      	b.n	800b9c2 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc8e:	4a81      	ldr	r2, [pc, #516]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bc90:	6921      	ldr	r1, [r4, #16]
 800bc92:	6813      	ldr	r3, [r2, #0]
 800bc94:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800bc98:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bc9c:	6013      	str	r3, [r2, #0]
 800bc9e:	6823      	ldr	r3, [r4, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bca0:	071a      	lsls	r2, r3, #28
 800bca2:	f57f aec6 	bpl.w	800ba32 <HAL_RCC_OscConfig+0xf2>
 800bca6:	e6ef      	b.n	800ba88 <HAL_RCC_OscConfig+0x148>
      PWR->CR1 |= PWR_CR1_DBP;
 800bca8:	681a      	ldr	r2, [r3, #0]
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcaa:	461f      	mov	r7, r3
      PWR->CR1 |= PWR_CR1_DBP;
 800bcac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcb0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800bcb2:	f7fb f84b 	bl	8006d4c <HAL_GetTick>
 800bcb6:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	05d9      	lsls	r1, r3, #23
 800bcbc:	f53f aed0 	bmi.w	800ba60 <HAL_RCC_OscConfig+0x120>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcc0:	f7fb f844 	bl	8006d4c <HAL_GetTick>
 800bcc4:	1b80      	subs	r0, r0, r6
 800bcc6:	2864      	cmp	r0, #100	; 0x64
 800bcc8:	d9f6      	bls.n	800bcb8 <HAL_RCC_OscConfig+0x378>
            return HAL_TIMEOUT;
 800bcca:	2003      	movs	r0, #3
}
 800bccc:	b002      	add	sp, #8
 800bcce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcd2:	4b70      	ldr	r3, [pc, #448]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bcd4:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcd6:	461e      	mov	r6, r3
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800bcdc:	601a      	str	r2, [r3, #0]
 800bcde:	681a      	ldr	r2, [r3, #0]
 800bce0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800bce4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800bce6:	f7fb f831 	bl	8006d4c <HAL_GetTick>
 800bcea:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcec:	e004      	b.n	800bcf8 <HAL_RCC_OscConfig+0x3b8>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bcee:	f7fb f82d 	bl	8006d4c <HAL_GetTick>
 800bcf2:	1b40      	subs	r0, r0, r5
 800bcf4:	2864      	cmp	r0, #100	; 0x64
 800bcf6:	d8e8      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bcf8:	6833      	ldr	r3, [r6, #0]
 800bcfa:	039b      	lsls	r3, r3, #14
 800bcfc:	d4f7      	bmi.n	800bcee <HAL_RCC_OscConfig+0x3ae>
 800bcfe:	e660      	b.n	800b9c2 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd00:	4b64      	ldr	r3, [pc, #400]	; (800be94 <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd02:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd08:	461f      	mov	r7, r3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd0a:	f022 0201 	bic.w	r2, r2, #1
 800bd0e:	671a      	str	r2, [r3, #112]	; 0x70
 800bd10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd12:	f022 0204 	bic.w	r2, r2, #4
 800bd16:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 800bd18:	f7fb f818 	bl	8006d4c <HAL_GetTick>
 800bd1c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd1e:	e004      	b.n	800bd2a <HAL_RCC_OscConfig+0x3ea>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd20:	f7fb f814 	bl	8006d4c <HAL_GetTick>
 800bd24:	1b80      	subs	r0, r0, r6
 800bd26:	4540      	cmp	r0, r8
 800bd28:	d8cf      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800bd2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd2c:	079b      	lsls	r3, r3, #30
 800bd2e:	d4f7      	bmi.n	800bd20 <HAL_RCC_OscConfig+0x3e0>
    if (pwrclkchanged == SET)
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	f43f aec6 	beq.w	800bac2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd36:	4a57      	ldr	r2, [pc, #348]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bd38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800bd3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bd3e:	6413      	str	r3, [r2, #64]	; 0x40
 800bd40:	e6bf      	b.n	800bac2 <HAL_RCC_OscConfig+0x182>
        __HAL_RCC_HSI_DISABLE();
 800bd42:	4b54      	ldr	r3, [pc, #336]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bd44:	681a      	ldr	r2, [r3, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd46:	461e      	mov	r6, r3
        __HAL_RCC_HSI_DISABLE();
 800bd48:	f022 0201 	bic.w	r2, r2, #1
 800bd4c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800bd4e:	f7fa fffd 	bl	8006d4c <HAL_GetTick>
 800bd52:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd54:	e004      	b.n	800bd60 <HAL_RCC_OscConfig+0x420>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bd56:	f7fa fff9 	bl	8006d4c <HAL_GetTick>
 800bd5a:	1b40      	subs	r0, r0, r5
 800bd5c:	2802      	cmp	r0, #2
 800bd5e:	d8b4      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bd60:	6833      	ldr	r3, [r6, #0]
 800bd62:	0799      	lsls	r1, r3, #30
 800bd64:	d4f7      	bmi.n	800bd56 <HAL_RCC_OscConfig+0x416>
 800bd66:	6823      	ldr	r3, [r4, #0]
 800bd68:	e661      	b.n	800ba2e <HAL_RCC_OscConfig+0xee>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd6a:	4a4a      	ldr	r2, [pc, #296]	; (800be94 <HAL_RCC_OscConfig+0x554>)
 800bd6c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800bd6e:	f043 0301 	orr.w	r3, r3, #1
 800bd72:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800bd74:	f7fa ffea 	bl	8006d4c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd78:	4f46      	ldr	r7, [pc, #280]	; (800be94 <HAL_RCC_OscConfig+0x554>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd7a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bd7e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd80:	e004      	b.n	800bd8c <HAL_RCC_OscConfig+0x44c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd82:	f7fa ffe3 	bl	8006d4c <HAL_GetTick>
 800bd86:	1b80      	subs	r0, r0, r6
 800bd88:	4540      	cmp	r0, r8
 800bd8a:	d89e      	bhi.n	800bcca <HAL_RCC_OscConfig+0x38a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800bd8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bd8e:	079a      	lsls	r2, r3, #30
 800bd90:	d5f7      	bpl.n	800bd82 <HAL_RCC_OscConfig+0x442>
    if (pwrclkchanged == SET)
 800bd92:	2d00      	cmp	r5, #0
 800bd94:	f43f ae95 	beq.w	800bac2 <HAL_RCC_OscConfig+0x182>
 800bd98:	e7cd      	b.n	800bd36 <HAL_RCC_OscConfig+0x3f6>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd9a:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800bd9c:	6852      	ldr	r2, [r2, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bd9e:	f43f aefd 	beq.w	800bb9c <HAL_RCC_OscConfig+0x25c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bda2:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bda6:	69e1      	ldr	r1, [r4, #28]
 800bda8:	428b      	cmp	r3, r1
 800bdaa:	f47f af0c 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bdae:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bdb2:	6a21      	ldr	r1, [r4, #32]
 800bdb4:	428b      	cmp	r3, r1
 800bdb6:	f47f af06 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bdba:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800bdbe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800bdc0:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800bdc2:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800bdc6:	f47f aefe 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bdca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800bdcc:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800bdd0:	085b      	lsrs	r3, r3, #1
 800bdd2:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800bdd4:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800bdd8:	f47f aef5 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bddc:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800bde0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800bde2:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800bde6:	f47f aeee 	bne.w	800bbc6 <HAL_RCC_OscConfig+0x286>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800bdea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bdec:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bdf0:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800bdf4:	bf14      	ite	ne
 800bdf6:	2001      	movne	r0, #1
 800bdf8:	2000      	moveq	r0, #0
 800bdfa:	e6cf      	b.n	800bb9c <HAL_RCC_OscConfig+0x25c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800bdfc:	f240 2156 	movw	r1, #598	; 0x256
 800be00:	4823      	ldr	r0, [pc, #140]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be02:	f7f7 ff9b 	bl	8003d3c <assert_failed>
 800be06:	e687      	b.n	800bb18 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be08:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800be0c:	601a      	str	r2, [r3, #0]
 800be0e:	681a      	ldr	r2, [r3, #0]
 800be10:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800be14:	601a      	str	r2, [r3, #0]
 800be16:	e72c      	b.n	800bc72 <HAL_RCC_OscConfig+0x332>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800be18:	f042 0204 	orr.w	r2, r2, #4
 800be1c:	671a      	str	r2, [r3, #112]	; 0x70
 800be1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800be20:	f042 0201 	orr.w	r2, r2, #1
 800be24:	671a      	str	r2, [r3, #112]	; 0x70
 800be26:	e7a5      	b.n	800bd74 <HAL_RCC_OscConfig+0x434>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800be28:	f240 2155 	movw	r1, #597	; 0x255
 800be2c:	4818      	ldr	r0, [pc, #96]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be2e:	f7f7 ff85 	bl	8003d3c <assert_failed>
 800be32:	e666      	b.n	800bb02 <HAL_RCC_OscConfig+0x1c2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800be34:	f44f 7115 	mov.w	r1, #596	; 0x254
 800be38:	4815      	ldr	r0, [pc, #84]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be3a:	f7f7 ff7f 	bl	8003d3c <assert_failed>
 800be3e:	e65a      	b.n	800baf6 <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800be40:	f240 2153 	movw	r1, #595	; 0x253
 800be44:	4812      	ldr	r0, [pc, #72]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be46:	f7f7 ff79 	bl	8003d3c <assert_failed>
 800be4a:	e64f      	b.n	800baec <HAL_RCC_OscConfig+0x1ac>
        __HAL_RCC_PLL_DISABLE();
 800be4c:	6813      	ldr	r3, [r2, #0]
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be4e:	4615      	mov	r5, r2
        __HAL_RCC_PLL_DISABLE();
 800be50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800be56:	f7fa ff79 	bl	8006d4c <HAL_GetTick>
 800be5a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be5c:	e005      	b.n	800be6a <HAL_RCC_OscConfig+0x52a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be5e:	f7fa ff75 	bl	8006d4c <HAL_GetTick>
 800be62:	1b00      	subs	r0, r0, r4
 800be64:	2802      	cmp	r0, #2
 800be66:	f63f af30 	bhi.w	800bcca <HAL_RCC_OscConfig+0x38a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800be6a:	682b      	ldr	r3, [r5, #0]
 800be6c:	019b      	lsls	r3, r3, #6
 800be6e:	d4f6      	bmi.n	800be5e <HAL_RCC_OscConfig+0x51e>
 800be70:	e693      	b.n	800bb9a <HAL_RCC_OscConfig+0x25a>
    return HAL_ERROR;
 800be72:	2001      	movs	r0, #1
}
 800be74:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800be76:	f240 2159 	movw	r1, #601	; 0x259
 800be7a:	4805      	ldr	r0, [pc, #20]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be7c:	f7f7 ff5e 	bl	8003d3c <assert_failed>
 800be80:	e654      	b.n	800bb2c <HAL_RCC_OscConfig+0x1ec>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800be82:	f240 2157 	movw	r1, #599	; 0x257
 800be86:	4802      	ldr	r0, [pc, #8]	; (800be90 <HAL_RCC_OscConfig+0x550>)
 800be88:	f7f7 ff58 	bl	8003d3c <assert_failed>
 800be8c:	e649      	b.n	800bb22 <HAL_RCC_OscConfig+0x1e2>
 800be8e:	bf00      	nop
 800be90:	08029980 	.word	0x08029980
 800be94:	40023800 	.word	0x40023800

0800be98 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be98:	4916      	ldr	r1, [pc, #88]	; (800bef4 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800be9a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800be9c:	688b      	ldr	r3, [r1, #8]
 800be9e:	f003 030c 	and.w	r3, r3, #12
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d01b      	beq.n	800bede <HAL_RCC_GetSysClockFreq+0x46>
 800bea6:	2b08      	cmp	r3, #8
 800bea8:	d117      	bne.n	800beda <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800beaa:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800beac:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800beae:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800beb2:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800beb4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800beb8:	d113      	bne.n	800bee2 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800beba:	480f      	ldr	r0, [pc, #60]	; (800bef8 <HAL_RCC_GetSysClockFreq+0x60>)
 800bebc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bec0:	fba1 0100 	umull	r0, r1, r1, r0
 800bec4:	f7f4 fa74 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800bec8:	4b0a      	ldr	r3, [pc, #40]	; (800bef4 <HAL_RCC_GetSysClockFreq+0x5c>)
 800beca:	685b      	ldr	r3, [r3, #4]
 800becc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800bed0:	3301      	adds	r3, #1
 800bed2:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800bed4:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800bed8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800beda:	4807      	ldr	r0, [pc, #28]	; (800bef8 <HAL_RCC_GetSysClockFreq+0x60>)
}
 800bedc:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800bede:	4807      	ldr	r0, [pc, #28]	; (800befc <HAL_RCC_GetSysClockFreq+0x64>)
}
 800bee0:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800bee2:	4806      	ldr	r0, [pc, #24]	; (800befc <HAL_RCC_GetSysClockFreq+0x64>)
 800bee4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800bee8:	2300      	movs	r3, #0
 800beea:	fba1 0100 	umull	r0, r1, r1, r0
 800beee:	f7f4 fa5f 	bl	80003b0 <__aeabi_uldivmod>
 800bef2:	e7e9      	b.n	800bec8 <HAL_RCC_GetSysClockFreq+0x30>
 800bef4:	40023800 	.word	0x40023800
 800bef8:	00f42400 	.word	0x00f42400
 800befc:	007a1200 	.word	0x007a1200

0800bf00 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800bf00:	2800      	cmp	r0, #0
 800bf02:	f000 80f7 	beq.w	800c0f4 <HAL_RCC_ClockConfig+0x1f4>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800bf06:	6803      	ldr	r3, [r0, #0]
 800bf08:	3b01      	subs	r3, #1
 800bf0a:	2b0e      	cmp	r3, #14
{
 800bf0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf10:	4604      	mov	r4, r0
 800bf12:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800bf14:	f200 80d7 	bhi.w	800c0c6 <HAL_RCC_ClockConfig+0x1c6>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800bf18:	2d0f      	cmp	r5, #15
 800bf1a:	f200 80c4 	bhi.w	800c0a6 <HAL_RCC_ClockConfig+0x1a6>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bf1e:	4a82      	ldr	r2, [pc, #520]	; (800c128 <HAL_RCC_ClockConfig+0x228>)
 800bf20:	6813      	ldr	r3, [r2, #0]
 800bf22:	f003 030f 	and.w	r3, r3, #15
 800bf26:	42ab      	cmp	r3, r5
 800bf28:	d370      	bcc.n	800c00c <HAL_RCC_ClockConfig+0x10c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bf2a:	6823      	ldr	r3, [r4, #0]
 800bf2c:	0798      	lsls	r0, r3, #30
 800bf2e:	d530      	bpl.n	800bf92 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bf30:	0759      	lsls	r1, r3, #29
 800bf32:	d504      	bpl.n	800bf3e <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bf34:	497d      	ldr	r1, [pc, #500]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800bf36:	688a      	ldr	r2, [r1, #8]
 800bf38:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800bf3c:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bf3e:	071a      	lsls	r2, r3, #28
 800bf40:	d504      	bpl.n	800bf4c <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800bf42:	497a      	ldr	r1, [pc, #488]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800bf44:	688a      	ldr	r2, [r1, #8]
 800bf46:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800bf4a:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800bf4c:	68a1      	ldr	r1, [r4, #8]
 800bf4e:	f021 0220 	bic.w	r2, r1, #32
 800bf52:	f021 0680 	bic.w	r6, r1, #128	; 0x80
 800bf56:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800bf5a:	2a90      	cmp	r2, #144	; 0x90
 800bf5c:	bf18      	it	ne
 800bf5e:	2e00      	cmpne	r6, #0
 800bf60:	bf14      	ite	ne
 800bf62:	2201      	movne	r2, #1
 800bf64:	2200      	moveq	r2, #0
 800bf66:	29f0      	cmp	r1, #240	; 0xf0
 800bf68:	bf0c      	ite	eq
 800bf6a:	2200      	moveq	r2, #0
 800bf6c:	f002 0201 	andne.w	r2, r2, #1
 800bf70:	28a0      	cmp	r0, #160	; 0xa0
 800bf72:	bf0c      	ite	eq
 800bf74:	2200      	moveq	r2, #0
 800bf76:	f002 0201 	andne.w	r2, r2, #1
 800bf7a:	b122      	cbz	r2, 800bf86 <HAL_RCC_ClockConfig+0x86>
 800bf7c:	f021 0210 	bic.w	r2, r1, #16
 800bf80:	2ac0      	cmp	r2, #192	; 0xc0
 800bf82:	f040 80b9 	bne.w	800c0f8 <HAL_RCC_ClockConfig+0x1f8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bf86:	4869      	ldr	r0, [pc, #420]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800bf88:	6882      	ldr	r2, [r0, #8]
 800bf8a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800bf8e:	4311      	orrs	r1, r2
 800bf90:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bf92:	07df      	lsls	r7, r3, #31
 800bf94:	d527      	bpl.n	800bfe6 <HAL_RCC_ClockConfig+0xe6>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800bf96:	6863      	ldr	r3, [r4, #4]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	f200 80a2 	bhi.w	800c0e2 <HAL_RCC_ClockConfig+0x1e2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bf9e:	4a63      	ldr	r2, [pc, #396]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfa0:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800bfa2:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bfa4:	f000 8099 	beq.w	800c0da <HAL_RCC_ClockConfig+0x1da>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bfa8:	2b02      	cmp	r3, #2
 800bfaa:	f000 8092 	beq.w	800c0d2 <HAL_RCC_ClockConfig+0x1d2>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bfae:	0791      	lsls	r1, r2, #30
 800bfb0:	d529      	bpl.n	800c006 <HAL_RCC_ClockConfig+0x106>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bfb2:	495e      	ldr	r1, [pc, #376]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfb4:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bfb8:	688a      	ldr	r2, [r1, #8]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfba:	460f      	mov	r7, r1
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bfbc:	f022 0203 	bic.w	r2, r2, #3
 800bfc0:	4313      	orrs	r3, r2
 800bfc2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 800bfc4:	f7fa fec2 	bl	8006d4c <HAL_GetTick>
 800bfc8:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfca:	e005      	b.n	800bfd8 <HAL_RCC_ClockConfig+0xd8>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bfcc:	f7fa febe 	bl	8006d4c <HAL_GetTick>
 800bfd0:	1b80      	subs	r0, r0, r6
 800bfd2:	4540      	cmp	r0, r8
 800bfd4:	f200 808c 	bhi.w	800c0f0 <HAL_RCC_ClockConfig+0x1f0>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	6862      	ldr	r2, [r4, #4]
 800bfdc:	f003 030c 	and.w	r3, r3, #12
 800bfe0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800bfe4:	d1f2      	bne.n	800bfcc <HAL_RCC_ClockConfig+0xcc>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bfe6:	4a50      	ldr	r2, [pc, #320]	; (800c128 <HAL_RCC_ClockConfig+0x228>)
 800bfe8:	6813      	ldr	r3, [r2, #0]
 800bfea:	f003 030f 	and.w	r3, r3, #15
 800bfee:	42ab      	cmp	r3, r5
 800bff0:	d91a      	bls.n	800c028 <HAL_RCC_ClockConfig+0x128>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bff2:	6813      	ldr	r3, [r2, #0]
 800bff4:	f023 030f 	bic.w	r3, r3, #15
 800bff8:	432b      	orrs	r3, r5
 800bffa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bffc:	6813      	ldr	r3, [r2, #0]
 800bffe:	f003 030f 	and.w	r3, r3, #15
 800c002:	42ab      	cmp	r3, r5
 800c004:	d010      	beq.n	800c028 <HAL_RCC_ClockConfig+0x128>
    return HAL_ERROR;
 800c006:	2001      	movs	r0, #1
}
 800c008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c00c:	6813      	ldr	r3, [r2, #0]
 800c00e:	f023 030f 	bic.w	r3, r3, #15
 800c012:	432b      	orrs	r3, r5
 800c014:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c016:	6813      	ldr	r3, [r2, #0]
 800c018:	f003 030f 	and.w	r3, r3, #15
 800c01c:	42ab      	cmp	r3, r5
 800c01e:	d1f2      	bne.n	800c006 <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	0798      	lsls	r0, r3, #30
 800c024:	d484      	bmi.n	800bf30 <HAL_RCC_ClockConfig+0x30>
 800c026:	e7b4      	b.n	800bf92 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c028:	6823      	ldr	r3, [r4, #0]
 800c02a:	075a      	lsls	r2, r3, #29
 800c02c:	d512      	bpl.n	800c054 <HAL_RCC_ClockConfig+0x154>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800c02e:	68e1      	ldr	r1, [r4, #12]
 800c030:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800c034:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800c038:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800c03c:	bf18      	it	ne
 800c03e:	2a00      	cmpne	r2, #0
 800c040:	d002      	beq.n	800c048 <HAL_RCC_ClockConfig+0x148>
 800c042:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800c046:	d15f      	bne.n	800c108 <HAL_RCC_ClockConfig+0x208>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c048:	4838      	ldr	r0, [pc, #224]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800c04a:	6882      	ldr	r2, [r0, #8]
 800c04c:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800c050:	430a      	orrs	r2, r1
 800c052:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c054:	071b      	lsls	r3, r3, #28
 800c056:	d513      	bpl.n	800c080 <HAL_RCC_ClockConfig+0x180>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800c058:	6922      	ldr	r2, [r4, #16]
 800c05a:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800c05e:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800c062:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800c066:	bf18      	it	ne
 800c068:	2b00      	cmpne	r3, #0
 800c06a:	d002      	beq.n	800c072 <HAL_RCC_ClockConfig+0x172>
 800c06c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800c070:	d152      	bne.n	800c118 <HAL_RCC_ClockConfig+0x218>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c072:	492e      	ldr	r1, [pc, #184]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800c074:	688b      	ldr	r3, [r1, #8]
 800c076:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800c07a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c07e:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c080:	f7ff ff0a 	bl	800be98 <HAL_RCC_GetSysClockFreq>
 800c084:	4a29      	ldr	r2, [pc, #164]	; (800c12c <HAL_RCC_ClockConfig+0x22c>)
 800c086:	4c2a      	ldr	r4, [pc, #168]	; (800c130 <HAL_RCC_ClockConfig+0x230>)
 800c088:	4603      	mov	r3, r0
 800c08a:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800c08c:	4829      	ldr	r0, [pc, #164]	; (800c134 <HAL_RCC_ClockConfig+0x234>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c08e:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800c092:	4929      	ldr	r1, [pc, #164]	; (800c138 <HAL_RCC_ClockConfig+0x238>)
  HAL_InitTick(uwTickPrio);
 800c094:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c096:	5ca2      	ldrb	r2, [r4, r2]
 800c098:	40d3      	lsrs	r3, r2
 800c09a:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800c09c:	f7f9 ff2e 	bl	8005efc <HAL_InitTick>
  return HAL_OK;
 800c0a0:	2000      	movs	r0, #0
}
 800c0a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800c0a6:	f240 21de 	movw	r1, #734	; 0x2de
 800c0aa:	4824      	ldr	r0, [pc, #144]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c0ac:	f7f7 fe46 	bl	8003d3c <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c0b0:	4b1d      	ldr	r3, [pc, #116]	; (800c128 <HAL_RCC_ClockConfig+0x228>)
      return HAL_ERROR;
 800c0b2:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c0b4:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c0b6:	6819      	ldr	r1, [r3, #0]
 800c0b8:	f021 010f 	bic.w	r1, r1, #15
 800c0bc:	430d      	orrs	r5, r1
 800c0be:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0c0:	681b      	ldr	r3, [r3, #0]
}
 800c0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800c0c6:	f240 21dd 	movw	r1, #733	; 0x2dd
 800c0ca:	481c      	ldr	r0, [pc, #112]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c0cc:	f7f7 fe36 	bl	8003d3c <assert_failed>
 800c0d0:	e722      	b.n	800bf18 <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0d2:	0190      	lsls	r0, r2, #6
 800c0d4:	f53f af6d 	bmi.w	800bfb2 <HAL_RCC_ClockConfig+0xb2>
 800c0d8:	e795      	b.n	800c006 <HAL_RCC_ClockConfig+0x106>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0da:	0396      	lsls	r6, r2, #14
 800c0dc:	f53f af69 	bmi.w	800bfb2 <HAL_RCC_ClockConfig+0xb2>
 800c0e0:	e791      	b.n	800c006 <HAL_RCC_ClockConfig+0x106>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800c0e2:	f240 3109 	movw	r1, #777	; 0x309
 800c0e6:	4815      	ldr	r0, [pc, #84]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c0e8:	f7f7 fe28 	bl	8003d3c <assert_failed>
 800c0ec:	6863      	ldr	r3, [r4, #4]
 800c0ee:	e756      	b.n	800bf9e <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800c0f0:	2003      	movs	r0, #3
 800c0f2:	e789      	b.n	800c008 <HAL_RCC_ClockConfig+0x108>
    return HAL_ERROR;
 800c0f4:	2001      	movs	r0, #1
}
 800c0f6:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800c0f8:	f240 3102 	movw	r1, #770	; 0x302
 800c0fc:	480f      	ldr	r0, [pc, #60]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c0fe:	f7f7 fe1d 	bl	8003d3c <assert_failed>
 800c102:	68a1      	ldr	r1, [r4, #8]
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	e73e      	b.n	800bf86 <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800c108:	f240 3146 	movw	r1, #838	; 0x346
 800c10c:	480b      	ldr	r0, [pc, #44]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c10e:	f7f7 fe15 	bl	8003d3c <assert_failed>
 800c112:	68e1      	ldr	r1, [r4, #12]
 800c114:	6823      	ldr	r3, [r4, #0]
 800c116:	e797      	b.n	800c048 <HAL_RCC_ClockConfig+0x148>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800c118:	f240 314d 	movw	r1, #845	; 0x34d
 800c11c:	4807      	ldr	r0, [pc, #28]	; (800c13c <HAL_RCC_ClockConfig+0x23c>)
 800c11e:	f7f7 fe0d 	bl	8003d3c <assert_failed>
 800c122:	6922      	ldr	r2, [r4, #16]
 800c124:	e7a5      	b.n	800c072 <HAL_RCC_ClockConfig+0x172>
 800c126:	bf00      	nop
 800c128:	40023c00 	.word	0x40023c00
 800c12c:	40023800 	.word	0x40023800
 800c130:	080290a4 	.word	0x080290a4
 800c134:	200002dc 	.word	0x200002dc
 800c138:	2000027c 	.word	0x2000027c
 800c13c:	08029980 	.word	0x08029980

0800c140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800c140:	4b01      	ldr	r3, [pc, #4]	; (800c148 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800c142:	6818      	ldr	r0, [r3, #0]
 800c144:	4770      	bx	lr
 800c146:	bf00      	nop
 800c148:	2000027c 	.word	0x2000027c

0800c14c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c14c:	4b04      	ldr	r3, [pc, #16]	; (800c160 <HAL_RCC_GetPCLK1Freq+0x14>)
 800c14e:	4a05      	ldr	r2, [pc, #20]	; (800c164 <HAL_RCC_GetPCLK1Freq+0x18>)
 800c150:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c152:	4905      	ldr	r1, [pc, #20]	; (800c168 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c154:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800c158:	6808      	ldr	r0, [r1, #0]
 800c15a:	5cd3      	ldrb	r3, [r2, r3]
}
 800c15c:	40d8      	lsrs	r0, r3
 800c15e:	4770      	bx	lr
 800c160:	40023800 	.word	0x40023800
 800c164:	080290b4 	.word	0x080290b4
 800c168:	2000027c 	.word	0x2000027c

0800c16c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c16c:	4b04      	ldr	r3, [pc, #16]	; (800c180 <HAL_RCC_GetPCLK2Freq+0x14>)
 800c16e:	4a05      	ldr	r2, [pc, #20]	; (800c184 <HAL_RCC_GetPCLK2Freq+0x18>)
 800c170:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800c172:	4905      	ldr	r1, [pc, #20]	; (800c188 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c174:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800c178:	6808      	ldr	r0, [r1, #0]
 800c17a:	5cd3      	ldrb	r3, [r2, r3]
}
 800c17c:	40d8      	lsrs	r0, r3
 800c17e:	4770      	bx	lr
 800c180:	40023800 	.word	0x40023800
 800c184:	080290b4 	.word	0x080290b4
 800c188:	2000027c 	.word	0x2000027c

0800c18c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c18c:	4b0e      	ldr	r3, [pc, #56]	; (800c1c8 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c18e:	220f      	movs	r2, #15
 800c190:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c192:	689a      	ldr	r2, [r3, #8]
 800c194:	f002 0203 	and.w	r2, r2, #3
 800c198:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c19a:	689a      	ldr	r2, [r3, #8]
 800c19c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800c1a0:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c1a2:	689a      	ldr	r2, [r3, #8]
 800c1a4:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800c1a8:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	08db      	lsrs	r3, r3, #3
{
 800c1ae:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c1b0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c1b4:	4c05      	ldr	r4, [pc, #20]	; (800c1cc <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800c1b6:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c1b8:	6823      	ldr	r3, [r4, #0]
}
 800c1ba:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c1be:	f003 030f 	and.w	r3, r3, #15
 800c1c2:	600b      	str	r3, [r1, #0]
}
 800c1c4:	4770      	bx	lr
 800c1c6:	bf00      	nop
 800c1c8:	40023800 	.word	0x40023800
 800c1cc:	40023c00 	.word	0x40023c00

0800c1d0 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c1d0:	4a56      	ldr	r2, [pc, #344]	; (800c32c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800c1d2:	6803      	ldr	r3, [r0, #0]
 800c1d4:	401a      	ands	r2, r3
{
 800c1d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	f000 834a 	beq.w	800c878 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800c1e4:	f013 0601 	ands.w	r6, r3, #1
 800c1e8:	d00f      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800c1ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c1ec:	f431 0200 	bics.w	r2, r1, #8388608	; 0x800000
 800c1f0:	f040 834d 	bne.w	800c88e <HAL_RCCEx_PeriphCLKConfig+0x6be>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1f4:	4a4e      	ldr	r2, [pc, #312]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c1f6:	fab1 f681 	clz	r6, r1
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1fa:	6890      	ldr	r0, [r2, #8]
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800c1fc:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c1fe:	f420 0000 	bic.w	r0, r0, #8388608	; 0x800000
 800c202:	6090      	str	r0, [r2, #8]
 800c204:	6890      	ldr	r0, [r2, #8]
 800c206:	4301      	orrs	r1, r0
 800c208:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800c20a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800c20e:	d014      	beq.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800c210:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800c212:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800c216:	f040 8393 	bne.w	800c940 <HAL_RCCEx_PeriphCLKConfig+0x770>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c21a:	4945      	ldr	r1, [pc, #276]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c21c:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c220:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800c224:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c228:	ea42 0205 	orr.w	r2, r2, r5
 800c22c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800c230:	f000 832a 	beq.w	800c888 <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800c234:	fab5 f585 	clz	r5, r5
 800c238:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800c23a:	02d9      	lsls	r1, r3, #11
 800c23c:	d514      	bpl.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800c23e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c240:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800c244:	f040 8383 	bne.w	800c94e <HAL_RCCEx_PeriphCLKConfig+0x77e>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c248:	4839      	ldr	r0, [pc, #228]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c24a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800c24e:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800c252:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800c256:	ea42 0201 	orr.w	r2, r2, r1
 800c25a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800c25e:	f000 8311 	beq.w	800c884 <HAL_RCCEx_PeriphCLKConfig+0x6b4>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800c262:	2900      	cmp	r1, #0
 800c264:	bf08      	it	eq
 800c266:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800c268:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800c26c:	bf18      	it	ne
 800c26e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c270:	069a      	lsls	r2, r3, #26
 800c272:	f140 809f 	bpl.w	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800c276:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800c278:	492e      	ldr	r1, [pc, #184]	; (800c334 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800c27a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800c27e:	bf18      	it	ne
 800c280:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800c284:	f422 2ca0 	bic.w	ip, r2, #327680	; 0x50000
 800c288:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800c28c:	482a      	ldr	r0, [pc, #168]	; (800c338 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800c28e:	bf14      	ite	ne
 800c290:	2301      	movne	r3, #1
 800c292:	2300      	moveq	r3, #0
 800c294:	458c      	cmp	ip, r1
 800c296:	bf0c      	ite	eq
 800c298:	2300      	moveq	r3, #0
 800c29a:	f003 0301 	andne.w	r3, r3, #1
 800c29e:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800c2a2:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 800c348 <HAL_RCCEx_PeriphCLKConfig+0x178>
 800c2a6:	4287      	cmp	r7, r0
 800c2a8:	bf0c      	ite	eq
 800c2aa:	2300      	moveq	r3, #0
 800c2ac:	f003 0301 	andne.w	r3, r3, #1
 800c2b0:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800c2b4:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800c2b8:	4561      	cmp	r1, ip
 800c2ba:	bf0c      	ite	eq
 800c2bc:	2300      	moveq	r3, #0
 800c2be:	f003 0301 	andne.w	r3, r3, #1
 800c2c2:	f50c 2c00 	add.w	ip, ip, #524288	; 0x80000
 800c2c6:	4287      	cmp	r7, r0
 800c2c8:	bf0c      	ite	eq
 800c2ca:	2300      	moveq	r3, #0
 800c2cc:	f003 0301 	andne.w	r3, r3, #1
 800c2d0:	4f1a      	ldr	r7, [pc, #104]	; (800c33c <HAL_RCCEx_PeriphCLKConfig+0x16c>)
 800c2d2:	f500 2020 	add.w	r0, r0, #655360	; 0xa0000
 800c2d6:	4561      	cmp	r1, ip
 800c2d8:	bf0c      	ite	eq
 800c2da:	2300      	moveq	r3, #0
 800c2dc:	f003 0301 	andne.w	r3, r3, #1
 800c2e0:	42b9      	cmp	r1, r7
 800c2e2:	bf0c      	ite	eq
 800c2e4:	2300      	moveq	r3, #0
 800c2e6:	f003 0301 	andne.w	r3, r3, #1
 800c2ea:	4281      	cmp	r1, r0
 800c2ec:	bf0c      	ite	eq
 800c2ee:	2300      	moveq	r3, #0
 800c2f0:	f003 0301 	andne.w	r3, r3, #1
 800c2f4:	b12b      	cbz	r3, 800c302 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800c2f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800c2fa:	4b11      	ldr	r3, [pc, #68]	; (800c340 <HAL_RCCEx_PeriphCLKConfig+0x170>)
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	f040 8446 	bne.w	800cb8e <HAL_RCCEx_PeriphCLKConfig+0x9be>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c302:	4a0b      	ldr	r2, [pc, #44]	; (800c330 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c304:	4b0f      	ldr	r3, [pc, #60]	; (800c344 <HAL_RCCEx_PeriphCLKConfig+0x174>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800c306:	6c11      	ldr	r1, [r2, #64]	; 0x40

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c308:	4698      	mov	r8, r3
    __HAL_RCC_PWR_CLK_ENABLE();
 800c30a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800c30e:	6411      	str	r1, [r2, #64]	; 0x40
 800c310:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800c312:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800c316:	9201      	str	r2, [sp, #4]
 800c318:	9a01      	ldr	r2, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800c31a:	681a      	ldr	r2, [r3, #0]
 800c31c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c320:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c322:	f7fa fd13 	bl	8006d4c <HAL_GetTick>
 800c326:	4607      	mov	r7, r0
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c328:	e016      	b.n	800c358 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800c32a:	bf00      	nop
 800c32c:	1dfffff9 	.word	0x1dfffff9
 800c330:	40023800 	.word	0x40023800
 800c334:	00020300 	.word	0x00020300
 800c338:	00040300 	.word	0x00040300
 800c33c:	00140300 	.word	0x00140300
 800c340:	001c0300 	.word	0x001c0300
 800c344:	40007000 	.word	0x40007000
 800c348:	00080300 	.word	0x00080300
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c34c:	f7fa fcfe 	bl	8006d4c <HAL_GetTick>
 800c350:	1bc0      	subs	r0, r0, r7
 800c352:	2864      	cmp	r0, #100	; 0x64
 800c354:	f200 828c 	bhi.w	800c870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800c358:	f8d8 3000 	ldr.w	r3, [r8]
 800c35c:	05db      	lsls	r3, r3, #23
 800c35e:	d5f5      	bpl.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x17c>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c360:	4fc0      	ldr	r7, [pc, #768]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c362:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c364:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c366:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800c36a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800c36e:	d011      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 800c370:	4291      	cmp	r1, r2
 800c372:	d00f      	beq.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c374:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c376:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c378:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800c37c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800c380:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c382:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800c384:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800c388:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800c38a:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c38c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c38e:	07d0      	lsls	r0, r2, #31
 800c390:	f100 8372 	bmi.w	800ca78 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c394:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800c398:	f000 82c9 	beq.w	800c92e <HAL_RCCEx_PeriphCLKConfig+0x75e>
 800c39c:	49b1      	ldr	r1, [pc, #708]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c39e:	688a      	ldr	r2, [r1, #8]
 800c3a0:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c3a4:	608a      	str	r2, [r1, #8]
 800c3a6:	4aaf      	ldr	r2, [pc, #700]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c3a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3ac:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800c3ae:	430b      	orrs	r3, r1
 800c3b0:	6713      	str	r3, [r2, #112]	; 0x70
 800c3b2:	6823      	ldr	r3, [r4, #0]
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800c3b4:	06da      	lsls	r2, r3, #27
 800c3b6:	d510      	bpl.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x20a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800c3b8:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800c3ba:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800c3be:	f040 82db 	bne.w	800c978 <HAL_RCCEx_PeriphCLKConfig+0x7a8>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c3c2:	4aa8      	ldr	r2, [pc, #672]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c3c4:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800c3c8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800c3cc:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800c3d0:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800c3d4:	4339      	orrs	r1, r7
 800c3d6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c3da:	045f      	lsls	r7, r3, #17
 800c3dc:	d50f      	bpl.n	800c3fe <HAL_RCCEx_PeriphCLKConfig+0x22e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800c3de:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c3e0:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800c3e4:	d003      	beq.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800c3e6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c3ea:	f040 8299 	bne.w	800c920 <HAL_RCCEx_PeriphCLKConfig+0x750>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c3ee:	489d      	ldr	r0, [pc, #628]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c3f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c3f4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800c3f8:	430a      	orrs	r2, r1
 800c3fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c3fe:	0418      	lsls	r0, r3, #16
 800c400:	d50f      	bpl.n	800c422 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800c402:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c404:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800c408:	d003      	beq.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x242>
 800c40a:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800c40e:	f040 826f 	bne.w	800c8f0 <HAL_RCCEx_PeriphCLKConfig+0x720>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c412:	4894      	ldr	r0, [pc, #592]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c414:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c418:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800c41c:	430a      	orrs	r2, r1
 800c41e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c422:	03d9      	lsls	r1, r3, #15
 800c424:	d50f      	bpl.n	800c446 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800c426:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c428:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800c42c:	d003      	beq.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x266>
 800c42e:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c432:	f040 8265 	bne.w	800c900 <HAL_RCCEx_PeriphCLKConfig+0x730>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c436:	488b      	ldr	r0, [pc, #556]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c438:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c43c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800c440:	430a      	orrs	r2, r1
 800c442:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c446:	039a      	lsls	r2, r3, #14
 800c448:	d50f      	bpl.n	800c46a <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800c44a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c44c:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800c450:	d003      	beq.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x28a>
 800c452:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c456:	f040 825b 	bne.w	800c910 <HAL_RCCEx_PeriphCLKConfig+0x740>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c45a:	4882      	ldr	r0, [pc, #520]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c45c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c460:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800c464:	430a      	orrs	r2, r1
 800c466:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c46a:	065f      	lsls	r7, r3, #25
 800c46c:	d50b      	bpl.n	800c486 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800c46e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c470:	2903      	cmp	r1, #3
 800c472:	f200 82b9 	bhi.w	800c9e8 <HAL_RCCEx_PeriphCLKConfig+0x818>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c476:	487b      	ldr	r0, [pc, #492]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c478:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c47c:	f022 0203 	bic.w	r2, r2, #3
 800c480:	430a      	orrs	r2, r1
 800c482:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c486:	0618      	lsls	r0, r3, #24
 800c488:	d50c      	bpl.n	800c4a4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800c48a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c48c:	f031 020c 	bics.w	r2, r1, #12
 800c490:	f040 82ba 	bne.w	800ca08 <HAL_RCCEx_PeriphCLKConfig+0x838>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c494:	4873      	ldr	r0, [pc, #460]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c496:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c49a:	f022 020c 	bic.w	r2, r2, #12
 800c49e:	430a      	orrs	r2, r1
 800c4a0:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c4a4:	05d9      	lsls	r1, r3, #23
 800c4a6:	d50c      	bpl.n	800c4c2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800c4a8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c4aa:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800c4ae:	f040 82b3 	bne.w	800ca18 <HAL_RCCEx_PeriphCLKConfig+0x848>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c4b2:	486c      	ldr	r0, [pc, #432]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c4b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c4b8:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800c4bc:	430a      	orrs	r2, r1
 800c4be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c4c2:	059a      	lsls	r2, r3, #22
 800c4c4:	d50c      	bpl.n	800c4e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800c4c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800c4c8:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800c4cc:	f040 82ac 	bne.w	800ca28 <HAL_RCCEx_PeriphCLKConfig+0x858>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c4d0:	4864      	ldr	r0, [pc, #400]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c4d2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c4d6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c4da:	430a      	orrs	r2, r1
 800c4dc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800c4e0:	055f      	lsls	r7, r3, #21
 800c4e2:	d50c      	bpl.n	800c4fe <HAL_RCCEx_PeriphCLKConfig+0x32e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800c4e4:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800c4e6:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800c4ea:	f040 82a5 	bne.w	800ca38 <HAL_RCCEx_PeriphCLKConfig+0x868>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800c4ee:	485d      	ldr	r0, [pc, #372]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c4f0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c4f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800c4f8:	430a      	orrs	r2, r1
 800c4fa:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800c4fe:	0518      	lsls	r0, r3, #20
 800c500:	d50c      	bpl.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x34c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800c502:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c504:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800c508:	f040 829e 	bne.w	800ca48 <HAL_RCCEx_PeriphCLKConfig+0x878>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800c50c:	4855      	ldr	r0, [pc, #340]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c50e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c512:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800c516:	430a      	orrs	r2, r1
 800c518:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800c51c:	04d9      	lsls	r1, r3, #19
 800c51e:	d50c      	bpl.n	800c53a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800c520:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c522:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800c526:	f040 8297 	bne.w	800ca58 <HAL_RCCEx_PeriphCLKConfig+0x888>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800c52a:	484e      	ldr	r0, [pc, #312]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c52c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c530:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800c534:	430a      	orrs	r2, r1
 800c536:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800c53a:	049a      	lsls	r2, r3, #18
 800c53c:	d50c      	bpl.n	800c558 <HAL_RCCEx_PeriphCLKConfig+0x388>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800c53e:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c540:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800c544:	f040 8290 	bne.w	800ca68 <HAL_RCCEx_PeriphCLKConfig+0x898>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800c548:	4846      	ldr	r0, [pc, #280]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c54a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c54e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c552:	430a      	orrs	r2, r1
 800c554:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c558:	025f      	lsls	r7, r3, #9
 800c55a:	d50c      	bpl.n	800c576 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800c55c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c55e:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800c562:	f040 8228 	bne.w	800c9b6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c566:	483f      	ldr	r0, [pc, #252]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c568:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c56c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800c570:	430a      	orrs	r2, r1
 800c572:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800c576:	0298      	lsls	r0, r3, #10
 800c578:	d510      	bpl.n	800c59c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800c57a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c57c:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800c580:	f040 8221 	bne.w	800c9c6 <HAL_RCCEx_PeriphCLKConfig+0x7f6>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c584:	4837      	ldr	r0, [pc, #220]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800c586:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c58a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800c58e:	bf08      	it	eq
 800c590:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800c592:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800c596:	430a      	orrs	r2, r1
 800c598:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800c59c:	f013 0f08 	tst.w	r3, #8
 800c5a0:	bf18      	it	ne
 800c5a2:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c5a4:	0359      	lsls	r1, r3, #13
 800c5a6:	d50c      	bpl.n	800c5c2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800c5a8:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800c5aa:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800c5ae:	f040 8223 	bne.w	800c9f8 <HAL_RCCEx_PeriphCLKConfig+0x828>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c5b2:	482c      	ldr	r0, [pc, #176]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5b4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c5b8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800c5bc:	430a      	orrs	r2, r1
 800c5be:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800c5c2:	021a      	lsls	r2, r3, #8
 800c5c4:	d50d      	bpl.n	800c5e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800c5c6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c5ca:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800c5ce:	f040 8202 	bne.w	800c9d6 <HAL_RCCEx_PeriphCLKConfig+0x806>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800c5d2:	4824      	ldr	r0, [pc, #144]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5d4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c5d8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c5dc:	430a      	orrs	r2, r1
 800c5de:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800c5e2:	015f      	lsls	r7, r3, #5
 800c5e4:	d50d      	bpl.n	800c602 <HAL_RCCEx_PeriphCLKConfig+0x432>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800c5e6:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800c5ea:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800c5ee:	f040 81ca 	bne.w	800c986 <HAL_RCCEx_PeriphCLKConfig+0x7b6>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800c5f2:	481c      	ldr	r0, [pc, #112]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c5f4:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800c5f8:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800c5fc:	430a      	orrs	r2, r1
 800c5fe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c602:	0118      	lsls	r0, r3, #4
 800c604:	d50d      	bpl.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800c606:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c60a:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800c60e:	f040 81c9 	bne.w	800c9a4 <HAL_RCCEx_PeriphCLKConfig+0x7d4>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c612:	4814      	ldr	r0, [pc, #80]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c614:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800c618:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800c61c:	430a      	orrs	r2, r1
 800c61e:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800c622:	00d9      	lsls	r1, r3, #3
 800c624:	d50d      	bpl.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800c626:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c62a:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800c62e:	f040 819b 	bne.w	800c968 <HAL_RCCEx_PeriphCLKConfig+0x798>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800c632:	490c      	ldr	r1, [pc, #48]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c634:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800c638:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c63c:	4313      	orrs	r3, r2
 800c63e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c642:	2e01      	cmp	r6, #1
 800c644:	d003      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x47e>
 800c646:	6823      	ldr	r3, [r4, #0]
 800c648:	019a      	lsls	r2, r3, #6
 800c64a:	f140 8088 	bpl.w	800c75e <HAL_RCCEx_PeriphCLKConfig+0x58e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c64e:	4b05      	ldr	r3, [pc, #20]	; (800c664 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800c650:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c652:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_DISABLE();
 800c654:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800c658:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c65a:	f7fa fb77 	bl	8006d4c <HAL_GetTick>
 800c65e:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c660:	e008      	b.n	800c674 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800c662:	bf00      	nop
 800c664:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c668:	f7fa fb70 	bl	8006d4c <HAL_GetTick>
 800c66c:	1b80      	subs	r0, r0, r6
 800c66e:	2864      	cmp	r0, #100	; 0x64
 800c670:	f200 80fe 	bhi.w	800c870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	d4f6      	bmi.n	800c668 <HAL_RCCEx_PeriphCLKConfig+0x498>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800c67a:	6863      	ldr	r3, [r4, #4]
 800c67c:	3b32      	subs	r3, #50	; 0x32
 800c67e:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800c682:	f200 816b 	bhi.w	800c95c <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	07df      	lsls	r7, r3, #31
 800c68a:	d517      	bpl.n	800c6bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
 800c68c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800c68e:	b9aa      	cbnz	r2, 800c6bc <HAL_RCCEx_PeriphCLKConfig+0x4ec>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c690:	68a7      	ldr	r7, [r4, #8]
 800c692:	1eba      	subs	r2, r7, #2
 800c694:	2a05      	cmp	r2, #5
 800c696:	f200 8211 	bhi.w	800cabc <HAL_RCCEx_PeriphCLKConfig+0x8ec>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c69a:	49bf      	ldr	r1, [pc, #764]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c69c:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c69e:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c6a2:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800c6a6:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800c6aa:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800c6ae:	4332      	orrs	r2, r6
 800c6b0:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800c6b4:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800c6b8:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c6bc:	031e      	lsls	r6, r3, #12
 800c6be:	f100 80ed 	bmi.w	800c89c <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800c6c2:	02d8      	lsls	r0, r3, #11
 800c6c4:	d504      	bpl.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800c6c6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800c6c8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800c6cc:	f000 80eb 	beq.w	800c8a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c6d0:	01d9      	lsls	r1, r3, #7
 800c6d2:	d514      	bpl.n	800c6fe <HAL_RCCEx_PeriphCLKConfig+0x52e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800c6d4:	6927      	ldr	r7, [r4, #16]
 800c6d6:	2f03      	cmp	r7, #3
 800c6d8:	f200 81fe 	bhi.w	800cad8 <HAL_RCCEx_PeriphCLKConfig+0x908>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c6dc:	49ae      	ldr	r1, [pc, #696]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c6de:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800c6e0:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c6e4:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800c6e8:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800c6ec:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800c6f0:	4332      	orrs	r2, r6
 800c6f2:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800c6f6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800c6fa:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800c6fe:	019a      	lsls	r2, r3, #6
 800c700:	d51a      	bpl.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x568>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800c702:	6923      	ldr	r3, [r4, #16]
 800c704:	2b03      	cmp	r3, #3
 800c706:	f200 81e1 	bhi.w	800cacc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800c70a:	68a3      	ldr	r3, [r4, #8]
 800c70c:	3b02      	subs	r3, #2
 800c70e:	2b05      	cmp	r3, #5
 800c710:	f200 81f1 	bhi.w	800caf6 <HAL_RCCEx_PeriphCLKConfig+0x926>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800c714:	68e2      	ldr	r2, [r4, #12]
 800c716:	1e93      	subs	r3, r2, #2
 800c718:	2b0d      	cmp	r3, #13
 800c71a:	f200 81e5 	bhi.w	800cae8 <HAL_RCCEx_PeriphCLKConfig+0x918>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800c71e:	6923      	ldr	r3, [r4, #16]
 800c720:	6861      	ldr	r1, [r4, #4]
 800c722:	041b      	lsls	r3, r3, #16
 800c724:	68a0      	ldr	r0, [r4, #8]
 800c726:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800c72a:	499b      	ldr	r1, [pc, #620]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800c72c:	ea43 7300 	orr.w	r3, r3, r0, lsl #28
 800c730:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800c734:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c738:	4b97      	ldr	r3, [pc, #604]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800c73a:	681a      	ldr	r2, [r3, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c73c:	461f      	mov	r7, r3
    __HAL_RCC_PLLI2S_ENABLE();
 800c73e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800c742:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c744:	f7fa fb02 	bl	8006d4c <HAL_GetTick>
 800c748:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c74a:	e005      	b.n	800c758 <HAL_RCCEx_PeriphCLKConfig+0x588>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c74c:	f7fa fafe 	bl	8006d4c <HAL_GetTick>
 800c750:	1b80      	subs	r0, r0, r6
 800c752:	2864      	cmp	r0, #100	; 0x64
 800c754:	f200 808c 	bhi.w	800c870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	011b      	lsls	r3, r3, #4
 800c75c:	d5f6      	bpl.n	800c74c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800c75e:	2d01      	cmp	r5, #1
 800c760:	d003      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x59a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800c762:	2000      	movs	r0, #0
}
 800c764:	b003      	add	sp, #12
 800c766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800c76a:	4b8b      	ldr	r3, [pc, #556]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800c76c:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c76e:	461e      	mov	r6, r3
    __HAL_RCC_PLLSAI_DISABLE();
 800c770:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c774:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c776:	f7fa fae9 	bl	8006d4c <HAL_GetTick>
 800c77a:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c77c:	e004      	b.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c77e:	f7fa fae5 	bl	8006d4c <HAL_GetTick>
 800c782:	1b40      	subs	r0, r0, r5
 800c784:	2864      	cmp	r0, #100	; 0x64
 800c786:	d873      	bhi.n	800c870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800c788:	6833      	ldr	r3, [r6, #0]
 800c78a:	009f      	lsls	r7, r3, #2
 800c78c:	d4f7      	bmi.n	800c77e <HAL_RCCEx_PeriphCLKConfig+0x5ae>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800c78e:	6963      	ldr	r3, [r4, #20]
 800c790:	3b32      	subs	r3, #50	; 0x32
 800c792:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800c796:	f200 81bc 	bhi.w	800cb12 <HAL_RCCEx_PeriphCLKConfig+0x942>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800c79a:	6823      	ldr	r3, [r4, #0]
 800c79c:	031d      	lsls	r5, r3, #12
 800c79e:	f140 81b0 	bpl.w	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x932>
 800c7a2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c7a4:	2a00      	cmp	r2, #0
 800c7a6:	f040 81ac 	bne.w	800cb02 <HAL_RCCEx_PeriphCLKConfig+0x932>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800c7aa:	69a3      	ldr	r3, [r4, #24]
 800c7ac:	3b02      	subs	r3, #2
 800c7ae:	2b0d      	cmp	r3, #13
 800c7b0:	f200 81d8 	bhi.w	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x994>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800c7b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7b6:	1e59      	subs	r1, r3, #1
 800c7b8:	291f      	cmp	r1, #31
 800c7ba:	f200 81cb 	bhi.w	800cb54 <HAL_RCCEx_PeriphCLKConfig+0x984>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c7be:	4a76      	ldr	r2, [pc, #472]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c7c0:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c7c2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800c7c6:	f8d2 6088 	ldr.w	r6, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800c7ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c7ce:	69a0      	ldr	r0, [r4, #24]
 800c7d0:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800c7d4:	4333      	orrs	r3, r6
 800c7d6:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800c7da:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800c7de:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800c7e2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800c7e6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800c7ea:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800c7ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c7f2:	6823      	ldr	r3, [r4, #0]
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800c7f4:	0299      	lsls	r1, r3, #10
 800c7f6:	d504      	bpl.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x632>
 800c7f8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c7fa:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800c7fe:	f000 818e 	beq.w	800cb1e <HAL_RCCEx_PeriphCLKConfig+0x94e>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800c802:	071a      	lsls	r2, r3, #28
 800c804:	d522      	bpl.n	800c84c <HAL_RCCEx_PeriphCLKConfig+0x67c>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800c806:	69e3      	ldr	r3, [r4, #28]
 800c808:	3b02      	subs	r3, #2
 800c80a:	2b05      	cmp	r3, #5
 800c80c:	f200 819c 	bhi.w	800cb48 <HAL_RCCEx_PeriphCLKConfig+0x978>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800c810:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800c812:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800c816:	f040 81ab 	bne.w	800cb70 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c81a:	4a5f      	ldr	r2, [pc, #380]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c81c:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800c81e:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800c822:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800c826:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800c82a:	69e4      	ldr	r4, [r4, #28]
 800c82c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c830:	430b      	orrs	r3, r1
 800c832:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800c836:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
 800c83a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800c83e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800c842:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800c846:	4303      	orrs	r3, r0
 800c848:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800c84c:	4b52      	ldr	r3, [pc, #328]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800c84e:	681a      	ldr	r2, [r3, #0]
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c850:	461d      	mov	r5, r3
    __HAL_RCC_PLLSAI_ENABLE();
 800c852:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c856:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 800c858:	f7fa fa78 	bl	8006d4c <HAL_GetTick>
 800c85c:	4604      	mov	r4, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800c85e:	682b      	ldr	r3, [r5, #0]
 800c860:	009b      	lsls	r3, r3, #2
 800c862:	f53f af7e 	bmi.w	800c762 <HAL_RCCEx_PeriphCLKConfig+0x592>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800c866:	f7fa fa71 	bl	8006d4c <HAL_GetTick>
 800c86a:	1b00      	subs	r0, r0, r4
 800c86c:	2864      	cmp	r0, #100	; 0x64
 800c86e:	d9f6      	bls.n	800c85e <HAL_RCCEx_PeriphCLKConfig+0x68e>
        return HAL_TIMEOUT;
 800c870:	2003      	movs	r0, #3
}
 800c872:	b003      	add	sp, #12
 800c874:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800c878:	2172      	movs	r1, #114	; 0x72
 800c87a:	4848      	ldr	r0, [pc, #288]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c87c:	f7f7 fa5e 	bl	8003d3c <assert_failed>
 800c880:	6823      	ldr	r3, [r4, #0]
 800c882:	e4af      	b.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800c884:	2601      	movs	r6, #1
 800c886:	e4ef      	b.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800c888:	2500      	movs	r5, #0
      plli2sused = 1;
 800c88a:	2601      	movs	r6, #1
 800c88c:	e4d5      	b.n	800c23a <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800c88e:	2178      	movs	r1, #120	; 0x78
 800c890:	4842      	ldr	r0, [pc, #264]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c892:	f7f7 fa53 	bl	8003d3c <assert_failed>
 800c896:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c898:	6823      	ldr	r3, [r4, #0]
 800c89a:	e4ab      	b.n	800c1f4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800c89c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800c89e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800c8a2:	f47f af0e 	bne.w	800c6c2 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800c8a6:	68e3      	ldr	r3, [r4, #12]
 800c8a8:	3b02      	subs	r3, #2
 800c8aa:	2b0d      	cmp	r3, #13
 800c8ac:	f200 80f8 	bhi.w	800caa0 <HAL_RCCEx_PeriphCLKConfig+0x8d0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800c8b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c8b2:	1e5e      	subs	r6, r3, #1
 800c8b4:	2e1f      	cmp	r6, #31
 800c8b6:	f200 80f9 	bhi.w	800caac <HAL_RCCEx_PeriphCLKConfig+0x8dc>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c8ba:	4a37      	ldr	r2, [pc, #220]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c8bc:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800c8be:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800c8c2:	f8d2 7084 	ldr.w	r7, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800c8c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8ca:	68e1      	ldr	r1, [r4, #12]
 800c8cc:	f007 47e0 	and.w	r7, r7, #1879048192	; 0x70000000
 800c8d0:	433b      	orrs	r3, r7
 800c8d2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800c8d6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800c8da:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800c8de:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800c8e2:	f023 031f 	bic.w	r3, r3, #31
 800c8e6:	4333      	orrs	r3, r6
 800c8e8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800c8ec:	6823      	ldr	r3, [r4, #0]
 800c8ee:	e6ef      	b.n	800c6d0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800c8f0:	f240 1105 	movw	r1, #261	; 0x105
 800c8f4:	4829      	ldr	r0, [pc, #164]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c8f6:	f7f7 fa21 	bl	8003d3c <assert_failed>
 800c8fa:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	e588      	b.n	800c412 <HAL_RCCEx_PeriphCLKConfig+0x242>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800c900:	f240 110f 	movw	r1, #271	; 0x10f
 800c904:	4825      	ldr	r0, [pc, #148]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c906:	f7f7 fa19 	bl	8003d3c <assert_failed>
 800c90a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800c90c:	6823      	ldr	r3, [r4, #0]
 800c90e:	e592      	b.n	800c436 <HAL_RCCEx_PeriphCLKConfig+0x266>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800c910:	f240 1119 	movw	r1, #281	; 0x119
 800c914:	4821      	ldr	r0, [pc, #132]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c916:	f7f7 fa11 	bl	8003d3c <assert_failed>
 800c91a:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c91c:	6823      	ldr	r3, [r4, #0]
 800c91e:	e59c      	b.n	800c45a <HAL_RCCEx_PeriphCLKConfig+0x28a>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800c920:	21fb      	movs	r1, #251	; 0xfb
 800c922:	481e      	ldr	r0, [pc, #120]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c924:	f7f7 fa0a 	bl	8003d3c <assert_failed>
 800c928:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c92a:	6823      	ldr	r3, [r4, #0]
 800c92c:	e55f      	b.n	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x21e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c92e:	481a      	ldr	r0, [pc, #104]	; (800c998 <HAL_RCCEx_PeriphCLKConfig+0x7c8>)
 800c930:	491b      	ldr	r1, [pc, #108]	; (800c9a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>)
 800c932:	6882      	ldr	r2, [r0, #8]
 800c934:	4019      	ands	r1, r3
 800c936:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800c93a:	430a      	orrs	r2, r1
 800c93c:	6082      	str	r2, [r0, #8]
 800c93e:	e532      	b.n	800c3a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800c940:	2188      	movs	r1, #136	; 0x88
 800c942:	4816      	ldr	r0, [pc, #88]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c944:	f7f7 f9fa 	bl	8003d3c <assert_failed>
 800c948:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	e465      	b.n	800c21a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800c94e:	219c      	movs	r1, #156	; 0x9c
 800c950:	4812      	ldr	r0, [pc, #72]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c952:	f7f7 f9f3 	bl	8003d3c <assert_failed>
 800c956:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c958:	6823      	ldr	r3, [r4, #0]
 800c95a:	e475      	b.n	800c248 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800c95c:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800c960:	480e      	ldr	r0, [pc, #56]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c962:	f7f7 f9eb 	bl	8003d3c <assert_failed>
 800c966:	e68e      	b.n	800c686 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800c968:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800c96c:	480b      	ldr	r0, [pc, #44]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c96e:	f7f7 f9e5 	bl	8003d3c <assert_failed>
 800c972:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800c976:	e65c      	b.n	800c632 <HAL_RCCEx_PeriphCLKConfig+0x462>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800c978:	21f1      	movs	r1, #241	; 0xf1
 800c97a:	4808      	ldr	r0, [pc, #32]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c97c:	f7f7 f9de 	bl	8003d3c <assert_failed>
 800c980:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800c982:	6823      	ldr	r3, [r4, #0]
 800c984:	e51d      	b.n	800c3c2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800c986:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c98a:	4804      	ldr	r0, [pc, #16]	; (800c99c <HAL_RCCEx_PeriphCLKConfig+0x7cc>)
 800c98c:	f7f7 f9d6 	bl	8003d3c <assert_failed>
 800c990:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	e62c      	b.n	800c5f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
 800c998:	40023800 	.word	0x40023800
 800c99c:	080299b8 	.word	0x080299b8
 800c9a0:	0ffffcff 	.word	0x0ffffcff
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800c9a4:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800c9a8:	487c      	ldr	r0, [pc, #496]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9aa:	f7f7 f9c7 	bl	8003d3c <assert_failed>
 800c9ae:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800c9b2:	6823      	ldr	r3, [r4, #0]
 800c9b4:	e62d      	b.n	800c612 <HAL_RCCEx_PeriphCLKConfig+0x442>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800c9b6:	f240 1173 	movw	r1, #371	; 0x173
 800c9ba:	4878      	ldr	r0, [pc, #480]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9bc:	f7f7 f9be 	bl	8003d3c <assert_failed>
 800c9c0:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800c9c2:	6823      	ldr	r3, [r4, #0]
 800c9c4:	e5cf      	b.n	800c566 <HAL_RCCEx_PeriphCLKConfig+0x396>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800c9c6:	f240 117d 	movw	r1, #381	; 0x17d
 800c9ca:	4874      	ldr	r0, [pc, #464]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9cc:	f7f7 f9b6 	bl	8003d3c <assert_failed>
 800c9d0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c9d2:	6823      	ldr	r3, [r4, #0]
 800c9d4:	e5d6      	b.n	800c584 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800c9d6:	f240 119f 	movw	r1, #415	; 0x19f
 800c9da:	4870      	ldr	r0, [pc, #448]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9dc:	f7f7 f9ae 	bl	8003d3c <assert_failed>
 800c9e0:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	e5f4      	b.n	800c5d2 <HAL_RCCEx_PeriphCLKConfig+0x402>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800c9e8:	f240 1123 	movw	r1, #291	; 0x123
 800c9ec:	486b      	ldr	r0, [pc, #428]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9ee:	f7f7 f9a5 	bl	8003d3c <assert_failed>
 800c9f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	e53e      	b.n	800c476 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800c9f8:	f240 1195 	movw	r1, #405	; 0x195
 800c9fc:	4867      	ldr	r0, [pc, #412]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800c9fe:	f7f7 f99d 	bl	8003d3c <assert_failed>
 800ca02:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	e5d4      	b.n	800c5b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800ca08:	f240 112d 	movw	r1, #301	; 0x12d
 800ca0c:	4863      	ldr	r0, [pc, #396]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca0e:	f7f7 f995 	bl	8003d3c <assert_failed>
 800ca12:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ca14:	6823      	ldr	r3, [r4, #0]
 800ca16:	e53d      	b.n	800c494 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800ca18:	f240 1137 	movw	r1, #311	; 0x137
 800ca1c:	485f      	ldr	r0, [pc, #380]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca1e:	f7f7 f98d 	bl	8003d3c <assert_failed>
 800ca22:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ca24:	6823      	ldr	r3, [r4, #0]
 800ca26:	e544      	b.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800ca28:	f240 1141 	movw	r1, #321	; 0x141
 800ca2c:	485b      	ldr	r0, [pc, #364]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca2e:	f7f7 f985 	bl	8003d3c <assert_failed>
 800ca32:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	e54b      	b.n	800c4d0 <HAL_RCCEx_PeriphCLKConfig+0x300>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800ca38:	f240 114b 	movw	r1, #331	; 0x14b
 800ca3c:	4857      	ldr	r0, [pc, #348]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca3e:	f7f7 f97d 	bl	8003d3c <assert_failed>
 800ca42:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ca44:	6823      	ldr	r3, [r4, #0]
 800ca46:	e552      	b.n	800c4ee <HAL_RCCEx_PeriphCLKConfig+0x31e>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800ca48:	f240 1155 	movw	r1, #341	; 0x155
 800ca4c:	4853      	ldr	r0, [pc, #332]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca4e:	f7f7 f975 	bl	8003d3c <assert_failed>
 800ca52:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ca54:	6823      	ldr	r3, [r4, #0]
 800ca56:	e559      	b.n	800c50c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800ca58:	f240 115f 	movw	r1, #351	; 0x15f
 800ca5c:	484f      	ldr	r0, [pc, #316]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca5e:	f7f7 f96d 	bl	8003d3c <assert_failed>
 800ca62:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	e560      	b.n	800c52a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800ca68:	f240 1169 	movw	r1, #361	; 0x169
 800ca6c:	484b      	ldr	r0, [pc, #300]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800ca6e:	f7f7 f965 	bl	8003d3c <assert_failed>
 800ca72:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800ca74:	6823      	ldr	r3, [r4, #0]
 800ca76:	e567      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x378>
        tickstart = HAL_GetTick();
 800ca78:	f7fa f968 	bl	8006d4c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca7c:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800ca80:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca82:	e006      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x8c2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca84:	f7fa f962 	bl	8006d4c <HAL_GetTick>
 800ca88:	eba0 0008 	sub.w	r0, r0, r8
 800ca8c:	4548      	cmp	r0, r9
 800ca8e:	f63f aeef 	bhi.w	800c870 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ca94:	0799      	lsls	r1, r3, #30
 800ca96:	d5f5      	bpl.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800ca98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800ca9a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800ca9e:	e479      	b.n	800c394 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800caa0:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800caa4:	483d      	ldr	r0, [pc, #244]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800caa6:	f7f7 f949 	bl	8003d3c <assert_failed>
 800caaa:	e701      	b.n	800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x6e0>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800caac:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800cab0:	483a      	ldr	r0, [pc, #232]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cab2:	f7f7 f943 	bl	8003d3c <assert_failed>
 800cab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cab8:	1e5e      	subs	r6, r3, #1
 800caba:	e6fe      	b.n	800c8ba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800cabc:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800cac0:	4836      	ldr	r0, [pc, #216]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cac2:	f7f7 f93b 	bl	8003d3c <assert_failed>
 800cac6:	68a7      	ldr	r7, [r4, #8]
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	e5e6      	b.n	800c69a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800cacc:	f44f 7105 	mov.w	r1, #532	; 0x214
 800cad0:	4832      	ldr	r0, [pc, #200]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cad2:	f7f7 f933 	bl	8003d3c <assert_failed>
 800cad6:	e618      	b.n	800c70a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800cad8:	f240 2105 	movw	r1, #517	; 0x205
 800cadc:	482f      	ldr	r0, [pc, #188]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cade:	f7f7 f92d 	bl	8003d3c <assert_failed>
 800cae2:	6927      	ldr	r7, [r4, #16]
 800cae4:	6823      	ldr	r3, [r4, #0]
 800cae6:	e5f9      	b.n	800c6dc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800cae8:	f240 2116 	movw	r1, #534	; 0x216
 800caec:	482b      	ldr	r0, [pc, #172]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800caee:	f7f7 f925 	bl	8003d3c <assert_failed>
 800caf2:	68e2      	ldr	r2, [r4, #12]
 800caf4:	e613      	b.n	800c71e <HAL_RCCEx_PeriphCLKConfig+0x54e>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800caf6:	f240 2115 	movw	r1, #533	; 0x215
 800cafa:	4828      	ldr	r0, [pc, #160]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cafc:	f7f7 f91e 	bl	8003d3c <assert_failed>
 800cb00:	e608      	b.n	800c714 <HAL_RCCEx_PeriphCLKConfig+0x544>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800cb02:	02d8      	lsls	r0, r3, #11
 800cb04:	f57f ae76 	bpl.w	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800cb08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800cb0a:	2a00      	cmp	r2, #0
 800cb0c:	f47f ae72 	bne.w	800c7f4 <HAL_RCCEx_PeriphCLKConfig+0x624>
 800cb10:	e64b      	b.n	800c7aa <HAL_RCCEx_PeriphCLKConfig+0x5da>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800cb12:	f44f 7111 	mov.w	r1, #580	; 0x244
 800cb16:	4821      	ldr	r0, [pc, #132]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb18:	f7f7 f910 	bl	8003d3c <assert_failed>
 800cb1c:	e63d      	b.n	800c79a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800cb1e:	6a20      	ldr	r0, [r4, #32]
 800cb20:	2803      	cmp	r0, #3
 800cb22:	d82c      	bhi.n	800cb7e <HAL_RCCEx_PeriphCLKConfig+0x9ae>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb24:	491e      	ldr	r1, [pc, #120]	; (800cba0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cb26:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800cb28:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800cb2c:	f8d1 6088 	ldr.w	r6, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800cb30:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800cb34:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800cb38:	4332      	orrs	r2, r6
 800cb3a:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800cb3e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800cb42:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800cb46:	e65c      	b.n	800c802 <HAL_RCCEx_PeriphCLKConfig+0x632>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800cb48:	f240 216f 	movw	r1, #623	; 0x26f
 800cb4c:	4813      	ldr	r0, [pc, #76]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb4e:	f7f7 f8f5 	bl	8003d3c <assert_failed>
 800cb52:	e65d      	b.n	800c810 <HAL_RCCEx_PeriphCLKConfig+0x640>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800cb54:	f240 214d 	movw	r1, #589	; 0x24d
 800cb58:	4810      	ldr	r0, [pc, #64]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb5a:	f7f7 f8ef 	bl	8003d3c <assert_failed>
 800cb5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb60:	1e59      	subs	r1, r3, #1
 800cb62:	e62c      	b.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x5ee>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800cb64:	f240 214b 	movw	r1, #587	; 0x24b
 800cb68:	480c      	ldr	r0, [pc, #48]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb6a:	f7f7 f8e7 	bl	8003d3c <assert_failed>
 800cb6e:	e621      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800cb70:	480a      	ldr	r0, [pc, #40]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb72:	f44f 711c 	mov.w	r1, #624	; 0x270
 800cb76:	f7f7 f8e1 	bl	8003d3c <assert_failed>
 800cb7a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800cb7c:	e64d      	b.n	800c81a <HAL_RCCEx_PeriphCLKConfig+0x64a>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800cb7e:	4807      	ldr	r0, [pc, #28]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb80:	f44f 7118 	mov.w	r1, #608	; 0x260
 800cb84:	f7f7 f8da 	bl	8003d3c <assert_failed>
 800cb88:	6a20      	ldr	r0, [r4, #32]
 800cb8a:	6823      	ldr	r3, [r4, #0]
 800cb8c:	e7ca      	b.n	800cb24 <HAL_RCCEx_PeriphCLKConfig+0x954>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800cb8e:	21b7      	movs	r1, #183	; 0xb7
 800cb90:	4802      	ldr	r0, [pc, #8]	; (800cb9c <HAL_RCCEx_PeriphCLKConfig+0x9cc>)
 800cb92:	f7f7 f8d3 	bl	8003d3c <assert_failed>
 800cb96:	f7ff bbb4 	b.w	800c302 <HAL_RCCEx_PeriphCLKConfig+0x132>
 800cb9a:	bf00      	nop
 800cb9c:	080299b8 	.word	0x080299b8
 800cba0:	40023800 	.word	0x40023800

0800cba4 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800cba4:	b1f8      	cbz	r0, 800cbe6 <HAL_RNG_Init+0x42>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800cba6:	6802      	ldr	r2, [r0, #0]
{
 800cba8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800cbaa:	4b10      	ldr	r3, [pc, #64]	; (800cbec <HAL_RNG_Init+0x48>)
 800cbac:	4604      	mov	r4, r0
 800cbae:	429a      	cmp	r2, r3
 800cbb0:	d003      	beq.n	800cbba <HAL_RNG_Init+0x16>
 800cbb2:	21a3      	movs	r1, #163	; 0xa3
 800cbb4:	480e      	ldr	r0, [pc, #56]	; (800cbf0 <HAL_RNG_Init+0x4c>)
 800cbb6:	f7f7 f8c1 	bl	8003d3c <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800cbba:	7963      	ldrb	r3, [r4, #5]
 800cbbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cbc0:	b163      	cbz	r3, 800cbdc <HAL_RNG_Init+0x38>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800cbc2:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800cbc4:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cbc6:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800cbc8:	2501      	movs	r5, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800cbca:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800cbcc:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800cbce:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800cbd0:	f043 0304 	orr.w	r3, r3, #4
 800cbd4:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800cbd6:	7165      	strb	r5, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800cbd8:	60a2      	str	r2, [r4, #8]
}
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
    HAL_RNG_MspInit(hrng);
 800cbdc:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800cbde:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800cbe0:	f7f8 fbe8 	bl	80053b4 <HAL_RNG_MspInit>
 800cbe4:	e7ed      	b.n	800cbc2 <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800cbe6:	2001      	movs	r0, #1
}
 800cbe8:	4770      	bx	lr
 800cbea:	bf00      	nop
 800cbec:	50060800 	.word	0x50060800
 800cbf0:	080299f4 	.word	0x080299f4

0800cbf4 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800cbf4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	4617      	mov	r7, r2
 800cbfa:	b083      	sub	sp, #12
 800cbfc:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cbfe:	4427      	add	r7, r4
 800cc00:	f7fa f8a4 	bl	8006d4c <HAL_GetTick>
 800cc04:	1a3d      	subs	r5, r7, r0
  tmp_tickstart = HAL_GetTick();
 800cc06:	f7fa f8a1 	bl	8006d4c <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cc0a:	4b25      	ldr	r3, [pc, #148]	; (800cca0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800cc0c:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800cc14:	fb05 f303 	mul.w	r3, r5, r3
 800cc18:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc1a:	6832      	ldr	r2, [r6, #0]
 800cc1c:	e001      	b.n	800cc22 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cc1e:	1c63      	adds	r3, r4, #1
 800cc20:	d106      	bne.n	800cc30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cc22:	6893      	ldr	r3, [r2, #8]
 800cc24:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800cc28:	d1f9      	bne.n	800cc1e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800cc2a:	4618      	mov	r0, r3
}
 800cc2c:	b003      	add	sp, #12
 800cc2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cc30:	f7fa f88c 	bl	8006d4c <HAL_GetTick>
 800cc34:	1bc0      	subs	r0, r0, r7
 800cc36:	42a8      	cmp	r0, r5
 800cc38:	d208      	bcs.n	800cc4c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800cc3a:	9a01      	ldr	r2, [sp, #4]
      count--;
 800cc3c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800cc3e:	2a00      	cmp	r2, #0
      count--;
 800cc40:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800cc44:	bf08      	it	eq
 800cc46:	2500      	moveq	r5, #0
      count--;
 800cc48:	9301      	str	r3, [sp, #4]
 800cc4a:	e7e6      	b.n	800cc1a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc4c:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc50:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc52:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cc56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cc5a:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc5c:	d014      	beq.n	800cc88 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cc5e:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800cc60:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800cc64:	d007      	beq.n	800cc76 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800cc66:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800cc68:	2200      	movs	r2, #0
 800cc6a:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800cc6c:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800cc70:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800cc74:	e7da      	b.n	800cc2c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800cc76:	681a      	ldr	r2, [r3, #0]
 800cc78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cc7c:	601a      	str	r2, [r3, #0]
 800cc7e:	681a      	ldr	r2, [r3, #0]
 800cc80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cc84:	601a      	str	r2, [r3, #0]
 800cc86:	e7ee      	b.n	800cc66 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cc88:	68b2      	ldr	r2, [r6, #8]
 800cc8a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800cc8e:	d002      	beq.n	800cc96 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800cc90:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800cc94:	d1e3      	bne.n	800cc5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800cc96:	681a      	ldr	r2, [r3, #0]
 800cc98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cc9c:	601a      	str	r2, [r3, #0]
 800cc9e:	e7de      	b.n	800cc5e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800cca0:	2000027c 	.word	0x2000027c

0800cca4 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800cca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cca8:	4615      	mov	r5, r2
 800ccaa:	4698      	mov	r8, r3
 800ccac:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800ccae:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ccb0:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ccb2:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800ccb4:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800ccb8:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800ccba:	f7fa f847 	bl	8006d4c <HAL_GetTick>
 800ccbe:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800ccc2:	f7fa f843 	bl	8006d4c <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ccc6:	4b2e      	ldr	r3, [pc, #184]	; (800cd80 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800ccc8:	f8d6 8000 	ldr.w	r8, [r6]
  tmp_tickstart = HAL_GetTick();
 800cccc:	4681      	mov	r9, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ccce:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800ccd0:	4642      	mov	r2, r8
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800ccd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800ccd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800ccda:	0d1b      	lsrs	r3, r3, #20
 800ccdc:	fb07 f303 	mul.w	r3, r7, r3
 800cce0:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800cce2:	e00b      	b.n	800ccfc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800cce4:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800cce8:	d106      	bne.n	800ccf8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800ccea:	f898 300c 	ldrb.w	r3, [r8, #12]
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800ccf4:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800ccf8:	1c6b      	adds	r3, r5, #1
 800ccfa:	d106      	bne.n	800cd0a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800ccfc:	6893      	ldr	r3, [r2, #8]
 800ccfe:	4023      	ands	r3, r4
 800cd00:	d1f0      	bne.n	800cce4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800cd02:	4618      	mov	r0, r3
}
 800cd04:	b003      	add	sp, #12
 800cd06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cd0a:	f7fa f81f 	bl	8006d4c <HAL_GetTick>
 800cd0e:	eba0 0009 	sub.w	r0, r0, r9
 800cd12:	42b8      	cmp	r0, r7
 800cd14:	d209      	bcs.n	800cd2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800cd16:	9a01      	ldr	r2, [sp, #4]
      count--;
 800cd18:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800cd1a:	2a00      	cmp	r2, #0
 800cd1c:	6832      	ldr	r2, [r6, #0]
      count--;
 800cd1e:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800cd22:	bf08      	it	eq
 800cd24:	2700      	moveq	r7, #0
      count--;
 800cd26:	9301      	str	r3, [sp, #4]
 800cd28:	e7e8      	b.n	800ccfc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd2a:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd2e:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd30:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cd34:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cd38:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd3a:	d014      	beq.n	800cd66 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800cd3c:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800cd3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800cd42:	d007      	beq.n	800cd54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800cd44:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800cd46:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800cd48:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800cd4a:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800cd4e:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800cd52:	e7d7      	b.n	800cd04 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	681a      	ldr	r2, [r3, #0]
 800cd5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd62:	601a      	str	r2, [r3, #0]
 800cd64:	e7ee      	b.n	800cd44 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cd66:	68b2      	ldr	r2, [r6, #8]
 800cd68:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800cd6c:	d002      	beq.n	800cd74 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800cd6e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800cd72:	d1e3      	bne.n	800cd3c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800cd74:	681a      	ldr	r2, [r3, #0]
 800cd76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	e7de      	b.n	800cd3c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800cd7e:	bf00      	nop
 800cd80:	2000027c 	.word	0x2000027c

0800cd84 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800cd84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd86:	460f      	mov	r7, r1
 800cd88:	b085      	sub	sp, #20
 800cd8a:	4613      	mov	r3, r2
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd8c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800cd90:	9201      	str	r2, [sp, #4]
 800cd92:	463a      	mov	r2, r7
{
 800cd94:	4606      	mov	r6, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cd96:	f7ff ff85 	bl	800cca4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800cd9a:	9b01      	ldr	r3, [sp, #4]
 800cd9c:	bb58      	cbnz	r0, 800cdf6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cd9e:	4a19      	ldr	r2, [pc, #100]	; (800ce04 <SPI_EndRxTxTransaction+0x80>)
 800cda0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800cda4:	4818      	ldr	r0, [pc, #96]	; (800ce08 <SPI_EndRxTxTransaction+0x84>)
 800cda6:	6812      	ldr	r2, [r2, #0]
 800cda8:	fba0 0202 	umull	r0, r2, r0, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdac:	6870      	ldr	r0, [r6, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cdae:	0d52      	lsrs	r2, r2, #21
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdb0:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800cdb4:	fb01 f202 	mul.w	r2, r1, r2
 800cdb8:	9203      	str	r2, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cdba:	d107      	bne.n	800cdcc <SPI_EndRxTxTransaction+0x48>
 800cdbc:	e012      	b.n	800cde4 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800cdbe:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cdc0:	6835      	ldr	r5, [r6, #0]
      count--;
 800cdc2:	3c01      	subs	r4, #1
 800cdc4:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800cdc6:	68ac      	ldr	r4, [r5, #8]
 800cdc8:	0622      	lsls	r2, r4, #24
 800cdca:	d502      	bpl.n	800cdd2 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800cdcc:	9c03      	ldr	r4, [sp, #12]
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	d1f5      	bne.n	800cdbe <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800cdd2:	463a      	mov	r2, r7
 800cdd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800cdd8:	4630      	mov	r0, r6
 800cdda:	f7ff ff63 	bl	800cca4 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800cdde:	b950      	cbnz	r0, 800cdf6 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800cde0:	b005      	add	sp, #20
 800cde2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800cde4:	461a      	mov	r2, r3
 800cde6:	4639      	mov	r1, r7
 800cde8:	4630      	mov	r0, r6
 800cdea:	9301      	str	r3, [sp, #4]
 800cdec:	f7ff ff02 	bl	800cbf4 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800cdf0:	9b01      	ldr	r3, [sp, #4]
 800cdf2:	2800      	cmp	r0, #0
 800cdf4:	d0ed      	beq.n	800cdd2 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdf6:	6e33      	ldr	r3, [r6, #96]	; 0x60
    return HAL_TIMEOUT;
 800cdf8:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cdfa:	f043 0320 	orr.w	r3, r3, #32
 800cdfe:	6633      	str	r3, [r6, #96]	; 0x60
}
 800ce00:	b005      	add	sp, #20
 800ce02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce04:	2000027c 	.word	0x2000027c
 800ce08:	165e9f81 	.word	0x165e9f81

0800ce0c <HAL_SPI_Init>:
  if (hspi == NULL)
 800ce0c:	2800      	cmp	r0, #0
 800ce0e:	f000 812d 	beq.w	800d06c <HAL_SPI_Init+0x260>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ce12:	6802      	ldr	r2, [r0, #0]
 800ce14:	4baa      	ldr	r3, [pc, #680]	; (800d0c0 <HAL_SPI_Init+0x2b4>)
 800ce16:	49ab      	ldr	r1, [pc, #684]	; (800d0c4 <HAL_SPI_Init+0x2b8>)
 800ce18:	429a      	cmp	r2, r3
 800ce1a:	bf18      	it	ne
 800ce1c:	428a      	cmpne	r2, r1
 800ce1e:	f501 318c 	add.w	r1, r1, #71680	; 0x11800
 800ce22:	bf14      	ite	ne
 800ce24:	2301      	movne	r3, #1
 800ce26:	2300      	moveq	r3, #0
{
 800ce28:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ce2a:	4da7      	ldr	r5, [pc, #668]	; (800d0c8 <HAL_SPI_Init+0x2bc>)
 800ce2c:	4604      	mov	r4, r0
 800ce2e:	48a7      	ldr	r0, [pc, #668]	; (800d0cc <HAL_SPI_Init+0x2c0>)
{
 800ce30:	b083      	sub	sp, #12
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800ce32:	42aa      	cmp	r2, r5
 800ce34:	bf0c      	ite	eq
 800ce36:	2300      	moveq	r3, #0
 800ce38:	f003 0301 	andne.w	r3, r3, #1
 800ce3c:	4282      	cmp	r2, r0
 800ce3e:	bf0c      	ite	eq
 800ce40:	2300      	moveq	r3, #0
 800ce42:	f003 0301 	andne.w	r3, r3, #1
 800ce46:	428a      	cmp	r2, r1
 800ce48:	bf0c      	ite	eq
 800ce4a:	2300      	moveq	r3, #0
 800ce4c:	f003 0301 	andne.w	r3, r3, #1
 800ce50:	b11b      	cbz	r3, 800ce5a <HAL_SPI_Init+0x4e>
 800ce52:	4b9f      	ldr	r3, [pc, #636]	; (800d0d0 <HAL_SPI_Init+0x2c4>)
 800ce54:	429a      	cmp	r2, r3
 800ce56:	f040 8103 	bne.w	800d060 <HAL_SPI_Init+0x254>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800ce5a:	6863      	ldr	r3, [r4, #4]
 800ce5c:	b11b      	cbz	r3, 800ce66 <HAL_SPI_Init+0x5a>
 800ce5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ce62:	f040 80d1 	bne.w	800d008 <HAL_SPI_Init+0x1fc>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800ce66:	68a3      	ldr	r3, [r4, #8]
 800ce68:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800ce6c:	d003      	beq.n	800ce76 <HAL_SPI_Init+0x6a>
 800ce6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ce72:	f040 80df 	bne.w	800d034 <HAL_SPI_Init+0x228>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800ce76:	68e2      	ldr	r2, [r4, #12]
 800ce78:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800ce7c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800ce80:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800ce84:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800ce88:	bf18      	it	ne
 800ce8a:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800ce8e:	bf14      	ite	ne
 800ce90:	2301      	movne	r3, #1
 800ce92:	2300      	moveq	r3, #0
 800ce94:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800ce98:	bf0c      	ite	eq
 800ce9a:	2300      	moveq	r3, #0
 800ce9c:	f003 0301 	andne.w	r3, r3, #1
 800cea0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800cea4:	bf0c      	ite	eq
 800cea6:	2300      	moveq	r3, #0
 800cea8:	f003 0301 	andne.w	r3, r3, #1
 800ceac:	b12b      	cbz	r3, 800ceba <HAL_SPI_Init+0xae>
 800ceae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ceb2:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800ceb6:	f040 80fc 	bne.w	800d0b2 <HAL_SPI_Init+0x2a6>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800ceba:	69a3      	ldr	r3, [r4, #24]
 800cebc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800cec0:	d003      	beq.n	800ceca <HAL_SPI_Init+0xbe>
 800cec2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800cec6:	f040 80a5 	bne.w	800d014 <HAL_SPI_Init+0x208>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800ceca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cecc:	f033 0308 	bics.w	r3, r3, #8
 800ced0:	f040 80aa 	bne.w	800d028 <HAL_SPI_Init+0x21c>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800ced4:	69e3      	ldr	r3, [r4, #28]
 800ced6:	f023 0318 	bic.w	r3, r3, #24
 800ceda:	2b20      	cmp	r3, #32
 800cedc:	d002      	beq.n	800cee4 <HAL_SPI_Init+0xd8>
 800cede:	2b00      	cmp	r3, #0
 800cee0:	f040 80db 	bne.w	800d09a <HAL_SPI_Init+0x28e>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800cee4:	6a23      	ldr	r3, [r4, #32]
 800cee6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ceea:	f040 80ad 	bne.w	800d048 <HAL_SPI_Init+0x23c>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800ceee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cef0:	f033 0210 	bics.w	r2, r3, #16
 800cef4:	d17f      	bne.n	800cff6 <HAL_SPI_Init+0x1ea>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d172      	bne.n	800cfe0 <HAL_SPI_Init+0x1d4>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800cefa:	6923      	ldr	r3, [r4, #16]
 800cefc:	f033 0302 	bics.w	r3, r3, #2
 800cf00:	f040 80c5 	bne.w	800d08e <HAL_SPI_Init+0x282>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800cf04:	6963      	ldr	r3, [r4, #20]
 800cf06:	2b01      	cmp	r3, #1
 800cf08:	d904      	bls.n	800cf14 <HAL_SPI_Init+0x108>
 800cf0a:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800cf0e:	4871      	ldr	r0, [pc, #452]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800cf10:	f7f6 ff14 	bl	8003d3c <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800cf14:	6863      	ldr	r3, [r4, #4]
 800cf16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cf1a:	f000 80a9 	beq.w	800d070 <HAL_SPI_Init+0x264>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800cf1e:	2300      	movs	r3, #0
 800cf20:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf22:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf24:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cf28:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800cf2a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	f000 8090 	beq.w	800d054 <HAL_SPI_Init+0x248>
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cf34:	68e2      	ldr	r2, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800cf36:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 800cf38:	6821      	ldr	r1, [r4, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cf3a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->State = HAL_SPI_STATE_BUSY;
 800cf3e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cf42:	f422 6000 	bic.w	r0, r2, #2048	; 0x800
  __HAL_SPI_DISABLE(hspi);
 800cf46:	680b      	ldr	r3, [r1, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800cf48:	bf8c      	ite	hi
 800cf4a:	2700      	movhi	r7, #0
 800cf4c:	f44f 5780 	movls.w	r7, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800cf50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cf54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800cf58:	600b      	str	r3, [r1, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800cf5a:	d171      	bne.n	800d040 <HAL_SPI_Init+0x234>
 800cf5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cf5e:	f403 5500 	and.w	r5, r3, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf62:	68a6      	ldr	r6, [r4, #8]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf64:	f402 6c70 	and.w	ip, r2, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf68:	6863      	ldr	r3, [r4, #4]
 800cf6a:	f406 4e04 	and.w	lr, r6, #33792	; 0x8400
 800cf6e:	6926      	ldr	r6, [r4, #16]
 800cf70:	f403 7382 	and.w	r3, r3, #260	; 0x104
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf74:	6a62      	ldr	r2, [r4, #36]	; 0x24
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf76:	f006 0602 	and.w	r6, r6, #2
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf7c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf80:	f002 0210 	and.w	r2, r2, #16
 800cf84:	f000 0008 	and.w	r0, r0, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf88:	4333      	orrs	r3, r6
 800cf8a:	6966      	ldr	r6, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf8c:	4302      	orrs	r2, r0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf8e:	f006 0e01 	and.w	lr, r6, #1
 800cf92:	69a6      	ldr	r6, [r4, #24]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cf94:	ea42 020c 	orr.w	r2, r2, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cf98:	f406 7000 	and.w	r0, r6, #512	; 0x200
 800cf9c:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cfa0:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfa2:	4303      	orrs	r3, r0
 800cfa4:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cfa6:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfaa:	9001      	str	r0, [sp, #4]
 800cfac:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cfae:	4332      	orrs	r2, r6
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cfb0:	2600      	movs	r6, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfb2:	f000 0c38 	and.w	ip, r0, #56	; 0x38
 800cfb6:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cfb8:	433a      	orrs	r2, r7
  hspi->State     = HAL_SPI_STATE_READY;
 800cfba:	2701      	movs	r7, #1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfbc:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800cfc0:	ea43 030c 	orr.w	r3, r3, ip
 800cfc4:	4303      	orrs	r3, r0
  return HAL_OK;
 800cfc6:	4630      	mov	r0, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cfc8:	432b      	orrs	r3, r5
 800cfca:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cfcc:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cfce:	69cb      	ldr	r3, [r1, #28]
 800cfd0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800cfd4:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cfd6:	6626      	str	r6, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cfd8:	f884 705d 	strb.w	r7, [r4, #93]	; 0x5d
}
 800cfdc:	b003      	add	sp, #12
 800cfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800cfe0:	69e3      	ldr	r3, [r4, #28]
 800cfe2:	f023 0318 	bic.w	r3, r3, #24
 800cfe6:	2b20      	cmp	r3, #32
 800cfe8:	d001      	beq.n	800cfee <HAL_SPI_Init+0x1e2>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d15b      	bne.n	800d0a6 <HAL_SPI_Init+0x29a>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800cfee:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800cff0:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800cff4:	e795      	b.n	800cf22 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800cff6:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800cffa:	4836      	ldr	r0, [pc, #216]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800cffc:	f7f6 fe9e 	bl	8003d3c <assert_failed>
 800d000:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1ec      	bne.n	800cfe0 <HAL_SPI_Init+0x1d4>
 800d006:	e778      	b.n	800cefa <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800d008:	f240 1147 	movw	r1, #327	; 0x147
 800d00c:	4831      	ldr	r0, [pc, #196]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d00e:	f7f6 fe95 	bl	8003d3c <assert_failed>
 800d012:	e728      	b.n	800ce66 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800d014:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800d018:	482e      	ldr	r0, [pc, #184]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d01a:	f7f6 fe8f 	bl	8003d3c <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800d01e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d020:	f033 0308 	bics.w	r3, r3, #8
 800d024:	f43f af56 	beq.w	800ced4 <HAL_SPI_Init+0xc8>
 800d028:	f240 114b 	movw	r1, #331	; 0x14b
 800d02c:	4829      	ldr	r0, [pc, #164]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d02e:	f7f6 fe85 	bl	8003d3c <assert_failed>
 800d032:	e74f      	b.n	800ced4 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800d034:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800d038:	4826      	ldr	r0, [pc, #152]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d03a:	f7f6 fe7f 	bl	8003d3c <assert_failed>
 800d03e:	e71a      	b.n	800ce76 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d040:	2300      	movs	r3, #0
 800d042:	461d      	mov	r5, r3
 800d044:	62a3      	str	r3, [r4, #40]	; 0x28
 800d046:	e78c      	b.n	800cf62 <HAL_SPI_Init+0x156>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800d048:	f240 114d 	movw	r1, #333	; 0x14d
 800d04c:	4821      	ldr	r0, [pc, #132]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d04e:	f7f6 fe75 	bl	8003d3c <assert_failed>
 800d052:	e74c      	b.n	800ceee <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800d054:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800d056:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800d05a:	f7f8 f9c1 	bl	80053e0 <HAL_SPI_MspInit>
 800d05e:	e769      	b.n	800cf34 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800d060:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800d064:	481b      	ldr	r0, [pc, #108]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d066:	f7f6 fe69 	bl	8003d3c <assert_failed>
 800d06a:	e6f6      	b.n	800ce5a <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800d06c:	2001      	movs	r0, #1
}
 800d06e:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d070:	69e3      	ldr	r3, [r4, #28]
 800d072:	f023 0318 	bic.w	r3, r3, #24
 800d076:	2b20      	cmp	r3, #32
 800d078:	f43f af53 	beq.w	800cf22 <HAL_SPI_Init+0x116>
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	f43f af50 	beq.w	800cf22 <HAL_SPI_Init+0x116>
 800d082:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800d086:	4813      	ldr	r0, [pc, #76]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d088:	f7f6 fe58 	bl	8003d3c <assert_failed>
 800d08c:	e749      	b.n	800cf22 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800d08e:	f240 1151 	movw	r1, #337	; 0x151
 800d092:	4810      	ldr	r0, [pc, #64]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d094:	f7f6 fe52 	bl	8003d3c <assert_failed>
 800d098:	e734      	b.n	800cf04 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d09a:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800d09e:	480d      	ldr	r0, [pc, #52]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d0a0:	f7f6 fe4c 	bl	8003d3c <assert_failed>
 800d0a4:	e71e      	b.n	800cee4 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800d0a6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800d0aa:	480a      	ldr	r0, [pc, #40]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d0ac:	f7f6 fe46 	bl	8003d3c <assert_failed>
 800d0b0:	e79d      	b.n	800cfee <HAL_SPI_Init+0x1e2>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800d0b2:	f240 1149 	movw	r1, #329	; 0x149
 800d0b6:	4807      	ldr	r0, [pc, #28]	; (800d0d4 <HAL_SPI_Init+0x2c8>)
 800d0b8:	f7f6 fe40 	bl	8003d3c <assert_failed>
 800d0bc:	e6fd      	b.n	800ceba <HAL_SPI_Init+0xae>
 800d0be:	bf00      	nop
 800d0c0:	40013000 	.word	0x40013000
 800d0c4:	40003800 	.word	0x40003800
 800d0c8:	40003c00 	.word	0x40003c00
 800d0cc:	40013400 	.word	0x40013400
 800d0d0:	40015400 	.word	0x40015400
 800d0d4:	08029a2c 	.word	0x08029a2c

0800d0d8 <HAL_SPI_Transmit>:
{
 800d0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0dc:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800d0de:	6883      	ldr	r3, [r0, #8]
{
 800d0e0:	b082      	sub	sp, #8
 800d0e2:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800d0e4:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800d0e8:	460f      	mov	r7, r1
 800d0ea:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800d0ec:	d16b      	bne.n	800d1c6 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800d0ee:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800d0f2:	2b01      	cmp	r3, #1
 800d0f4:	d070      	beq.n	800d1d8 <HAL_SPI_Transmit+0x100>
 800d0f6:	2301      	movs	r3, #1
 800d0f8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800d0fc:	f7f9 fe26 	bl	8006d4c <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800d100:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800d104:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800d106:	2b01      	cmp	r3, #1
 800d108:	b2d8      	uxtb	r0, r3
 800d10a:	d009      	beq.n	800d120 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800d10c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800d10e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800d110:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800d112:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800d116:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800d11a:	b002      	add	sp, #8
 800d11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800d120:	2f00      	cmp	r7, #0
 800d122:	d0f4      	beq.n	800d10e <HAL_SPI_Transmit+0x36>
 800d124:	fab8 f388 	clz	r3, r8
 800d128:	095b      	lsrs	r3, r3, #5
 800d12a:	f1b8 0f00 	cmp.w	r8, #0
 800d12e:	d0ee      	beq.n	800d10e <HAL_SPI_Transmit+0x36>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d130:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d132:	2103      	movs	r1, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d134:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d136:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d13a:	f884 105d 	strb.w	r1, [r4, #93]	; 0x5d
  hspi->RxXferSize  = 0U;
 800d13e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d142:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d144:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 800d146:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800d14a:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800d14e:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->RxISR       = NULL;
 800d152:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    __HAL_SPI_DISABLE(hspi);
 800d156:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d158:	d072      	beq.n	800d240 <HAL_SPI_Transmit+0x168>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	0652      	lsls	r2, r2, #25
 800d15e:	d403      	bmi.n	800d168 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800d160:	681a      	ldr	r2, [r3, #0]
 800d162:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d166:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d168:	68e2      	ldr	r2, [r4, #12]
 800d16a:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d16e:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d170:	d936      	bls.n	800d1e0 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d172:	b112      	cbz	r2, 800d17a <HAL_SPI_Transmit+0xa2>
 800d174:	f1b8 0f01 	cmp.w	r8, #1
 800d178:	d107      	bne.n	800d18a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d17a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800d17e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800d180:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d182:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800d184:	3a01      	subs	r2, #1
 800d186:	b292      	uxth	r2, r2
 800d188:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d18a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d18c:	b292      	uxth	r2, r2
 800d18e:	b972      	cbnz	r2, 800d1ae <HAL_SPI_Transmit+0xd6>
 800d190:	e06a      	b.n	800d268 <HAL_SPI_Transmit+0x190>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d192:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d194:	f831 2b02 	ldrh.w	r2, [r1], #2
 800d198:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 800d19a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d19c:	63a1      	str	r1, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d19e:	3a01      	subs	r2, #1
 800d1a0:	b292      	uxth	r2, r2
 800d1a2:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d1a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d1a6:	b29b      	uxth	r3, r3
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d05d      	beq.n	800d268 <HAL_SPI_Transmit+0x190>
 800d1ac:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d1ae:	689a      	ldr	r2, [r3, #8]
 800d1b0:	0797      	lsls	r7, r2, #30
 800d1b2:	d4ee      	bmi.n	800d192 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d1b4:	f7f9 fdca 	bl	8006d4c <HAL_GetTick>
 800d1b8:	1b80      	subs	r0, r0, r6
 800d1ba:	42a8      	cmp	r0, r5
 800d1bc:	d3f2      	bcc.n	800d1a4 <HAL_SPI_Transmit+0xcc>
 800d1be:	1c68      	adds	r0, r5, #1
 800d1c0:	d0f0      	beq.n	800d1a4 <HAL_SPI_Transmit+0xcc>
          errorcode = HAL_TIMEOUT;
 800d1c2:	2003      	movs	r0, #3
 800d1c4:	e7a3      	b.n	800d10e <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800d1c6:	f240 313d 	movw	r1, #829	; 0x33d
 800d1ca:	4837      	ldr	r0, [pc, #220]	; (800d2a8 <HAL_SPI_Transmit+0x1d0>)
 800d1cc:	f7f6 fdb6 	bl	8003d3c <assert_failed>
  __HAL_LOCK(hspi);
 800d1d0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800d1d4:	2b01      	cmp	r3, #1
 800d1d6:	d18e      	bne.n	800d0f6 <HAL_SPI_Transmit+0x1e>
 800d1d8:	2002      	movs	r0, #2
}
 800d1da:	b002      	add	sp, #8
 800d1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d1e0:	b112      	cbz	r2, 800d1e8 <HAL_SPI_Transmit+0x110>
 800d1e2:	f1b8 0f01 	cmp.w	r8, #1
 800d1e6:	d10b      	bne.n	800d200 <HAL_SPI_Transmit+0x128>
      if (hspi->TxXferCount > 1U)
 800d1e8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d1ea:	b292      	uxth	r2, r2
 800d1ec:	2a01      	cmp	r2, #1
 800d1ee:	d951      	bls.n	800d294 <HAL_SPI_Transmit+0x1bc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d1f0:	f837 2b02 	ldrh.w	r2, [r7], #2
 800d1f4:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800d1f6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d1f8:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800d1fa:	3b02      	subs	r3, #2
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d200:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d202:	b29b      	uxth	r3, r3
 800d204:	b983      	cbnz	r3, 800d228 <HAL_SPI_Transmit+0x150>
 800d206:	e02f      	b.n	800d268 <HAL_SPI_Transmit+0x190>
        if (hspi->TxXferCount > 1U)
 800d208:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800d20a:	b29b      	uxth	r3, r3
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d920      	bls.n	800d252 <HAL_SPI_Transmit+0x17a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800d210:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d212:	f831 3b02 	ldrh.w	r3, [r1], #2
 800d216:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800d218:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d21a:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800d21c:	3b02      	subs	r3, #2
 800d21e:	b29b      	uxth	r3, r3
 800d220:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800d222:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800d224:	b292      	uxth	r2, r2
 800d226:	b1fa      	cbz	r2, 800d268 <HAL_SPI_Transmit+0x190>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d228:	6822      	ldr	r2, [r4, #0]
 800d22a:	6893      	ldr	r3, [r2, #8]
 800d22c:	0799      	lsls	r1, r3, #30
 800d22e:	d4eb      	bmi.n	800d208 <HAL_SPI_Transmit+0x130>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d230:	f7f9 fd8c 	bl	8006d4c <HAL_GetTick>
 800d234:	1b80      	subs	r0, r0, r6
 800d236:	42a8      	cmp	r0, r5
 800d238:	d3f3      	bcc.n	800d222 <HAL_SPI_Transmit+0x14a>
 800d23a:	1c6b      	adds	r3, r5, #1
 800d23c:	d0f1      	beq.n	800d222 <HAL_SPI_Transmit+0x14a>
 800d23e:	e7c0      	b.n	800d1c2 <HAL_SPI_Transmit+0xea>
    __HAL_SPI_DISABLE(hspi);
 800d240:	681a      	ldr	r2, [r3, #0]
 800d242:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d246:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d248:	681a      	ldr	r2, [r3, #0]
 800d24a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d24e:	601a      	str	r2, [r3, #0]
 800d250:	e783      	b.n	800d15a <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d252:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800d258:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800d25a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d25c:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800d25e:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800d260:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800d262:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800d264:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d266:	e7dc      	b.n	800d222 <HAL_SPI_Transmit+0x14a>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d268:	4632      	mov	r2, r6
 800d26a:	4629      	mov	r1, r5
 800d26c:	4620      	mov	r0, r4
 800d26e:	f7ff fd89 	bl	800cd84 <SPI_EndRxTxTransaction>
 800d272:	b108      	cbz	r0, 800d278 <HAL_SPI_Transmit+0x1a0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d274:	2320      	movs	r3, #32
 800d276:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d278:	68a3      	ldr	r3, [r4, #8]
 800d27a:	b933      	cbnz	r3, 800d28a <HAL_SPI_Transmit+0x1b2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d27c:	6822      	ldr	r2, [r4, #0]
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	68d3      	ldr	r3, [r2, #12]
 800d282:	9301      	str	r3, [sp, #4]
 800d284:	6893      	ldr	r3, [r2, #8]
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d28a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800d28c:	3800      	subs	r0, #0
 800d28e:	bf18      	it	ne
 800d290:	2001      	movne	r0, #1
error:
 800d292:	e73c      	b.n	800d10e <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800d294:	783a      	ldrb	r2, [r7, #0]
 800d296:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800d298:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800d29a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d29c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800d29e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800d2a0:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800d2a2:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800d2a4:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800d2a6:	e7ab      	b.n	800d200 <HAL_SPI_Transmit+0x128>
 800d2a8:	08029a2c 	.word	0x08029a2c

0800d2ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d2ac:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2ae:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2b0:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2b2:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 800d2b6:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2b8:	4a10      	ldr	r2, [pc, #64]	; (800d2fc <TIM_OC5_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d2ba:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2bc:	4d10      	ldr	r5, [pc, #64]	; (800d300 <TIM_OC5_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800d2be:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800d2c0:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2c2:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800d2c4:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= ~TIM_CCER_CC5P;
 800d2c8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d2cc:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d2d0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 800d2d4:	ea42 0206 	orr.w	r2, r2, r6
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d2d8:	d00a      	beq.n	800d2f0 <TIM_OC5_SetConfig+0x44>
 800d2da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d2de:	42a8      	cmp	r0, r5
 800d2e0:	d006      	beq.n	800d2f0 <TIM_OC5_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d2e2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d2e4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d2e6:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800d2e8:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2ea:	6203      	str	r3, [r0, #32]
}
 800d2ec:	bcf0      	pop	{r4, r5, r6, r7}
 800d2ee:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2f0:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2f4:	694d      	ldr	r5, [r1, #20]
 800d2f6:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800d2fa:	e7f2      	b.n	800d2e2 <TIM_OC5_SetConfig+0x36>
 800d2fc:	fffeff8f 	.word	0xfffeff8f
 800d300:	40010000 	.word	0x40010000

0800d304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800d304:	b4f0      	push	{r4, r5, r6, r7}
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d306:	6a04      	ldr	r4, [r0, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d308:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d30a:	f424 1480 	bic.w	r4, r4, #1048576	; 0x100000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d30e:	680e      	ldr	r6, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d310:	4a10      	ldr	r2, [pc, #64]	; (800d354 <TIM_OC6_SetConfig+0x50>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d312:	6204      	str	r4, [r0, #32]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d314:	4d10      	ldr	r5, [pc, #64]	; (800d358 <TIM_OC6_SetConfig+0x54>)
  tmpccer = TIMx->CCER;
 800d316:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800d318:	6844      	ldr	r4, [r0, #4]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d31a:	42a8      	cmp	r0, r5
  tmpccmrx = TIMx->CCMR3;
 800d31c:	f8d0 c054 	ldr.w	ip, [r0, #84]	; 0x54
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d320:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d324:	ea0c 0202 	and.w	r2, ip, r2
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d328:	ea43 5307 	orr.w	r3, r3, r7, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d32c:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d330:	d00a      	beq.n	800d348 <TIM_OC6_SetConfig+0x44>
 800d332:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800d336:	42a8      	cmp	r0, r5
 800d338:	d006      	beq.n	800d348 <TIM_OC6_SetConfig+0x44>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d33a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800d33c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800d33e:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800d340:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d342:	6203      	str	r3, [r0, #32]
}
 800d344:	bcf0      	pop	{r4, r5, r6, r7}
 800d346:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d348:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d34c:	694d      	ldr	r5, [r1, #20]
 800d34e:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800d352:	e7f2      	b.n	800d33a <TIM_OC6_SetConfig+0x36>
 800d354:	feff8fff 	.word	0xfeff8fff
 800d358:	40010000 	.word	0x40010000

0800d35c <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d35c:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d35e:	4b2d      	ldr	r3, [pc, #180]	; (800d414 <TIM_OC1_SetConfig+0xb8>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d360:	f022 0201 	bic.w	r2, r2, #1
{
 800d364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d368:	4604      	mov	r4, r0
 800d36a:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d36c:	492a      	ldr	r1, [pc, #168]	; (800d418 <TIM_OC1_SetConfig+0xbc>)
  tmpccer |= OC_Config->OCPolarity;
 800d36e:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800d372:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d374:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d376:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800d378:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800d37a:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800d37c:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 800d37e:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d382:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= OC_Config->OCPolarity;
 800d386:	ea45 050c 	orr.w	r5, r5, ip
  tmpccmrx |= OC_Config->OCMode;
 800d38a:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d38e:	d00a      	beq.n	800d3a6 <TIM_OC1_SetConfig+0x4a>
 800d390:	4b22      	ldr	r3, [pc, #136]	; (800d41c <TIM_OC1_SetConfig+0xc0>)
 800d392:	429c      	cmp	r4, r3
 800d394:	d007      	beq.n	800d3a6 <TIM_OC1_SetConfig+0x4a>
  TIMx->CCR1 = OC_Config->Pulse;
 800d396:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800d398:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800d39a:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800d39e:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800d3a0:	6225      	str	r5, [r4, #32]
}
 800d3a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d3a6:	68f2      	ldr	r2, [r6, #12]
 800d3a8:	f032 0308 	bics.w	r3, r2, #8
 800d3ac:	d120      	bne.n	800d3f0 <TIM_OC1_SetConfig+0x94>
    tmpccer &= ~TIM_CCER_CC1NP;
 800d3ae:	f025 0508 	bic.w	r5, r5, #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d3b2:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= OC_Config->OCNPolarity;
 800d3b4:	4315      	orrs	r5, r2
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d3b6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800d3ba:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d3be:	d11e      	bne.n	800d3fe <TIM_OC1_SetConfig+0xa2>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d3c0:	6973      	ldr	r3, [r6, #20]
 800d3c2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d3c6:	d106      	bne.n	800d3d6 <TIM_OC1_SetConfig+0x7a>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3c8:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800d3cc:	69b1      	ldr	r1, [r6, #24]
 800d3ce:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3d0:	ea42 0703 	orr.w	r7, r2, r3
 800d3d4:	e7df      	b.n	800d396 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d3d6:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800d3da:	4811      	ldr	r0, [pc, #68]	; (800d420 <TIM_OC1_SetConfig+0xc4>)
 800d3dc:	f7f6 fcae 	bl	8003d3c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d3e0:	f427 7240 	bic.w	r2, r7, #768	; 0x300
 800d3e4:	69b1      	ldr	r1, [r6, #24]
 800d3e6:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800d3e8:	430a      	orrs	r2, r1
 800d3ea:	ea42 0703 	orr.w	r7, r2, r3
 800d3ee:	e7d2      	b.n	800d396 <TIM_OC1_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d3f0:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800d3f4:	480a      	ldr	r0, [pc, #40]	; (800d420 <TIM_OC1_SetConfig+0xc4>)
 800d3f6:	f7f6 fca1 	bl	8003d3c <assert_failed>
 800d3fa:	68f2      	ldr	r2, [r6, #12]
 800d3fc:	e7d7      	b.n	800d3ae <TIM_OC1_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d3fe:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800d402:	4807      	ldr	r0, [pc, #28]	; (800d420 <TIM_OC1_SetConfig+0xc4>)
 800d404:	f7f6 fc9a 	bl	8003d3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d408:	6973      	ldr	r3, [r6, #20]
 800d40a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d40e:	d0db      	beq.n	800d3c8 <TIM_OC1_SetConfig+0x6c>
 800d410:	e7e1      	b.n	800d3d6 <TIM_OC1_SetConfig+0x7a>
 800d412:	bf00      	nop
 800d414:	fffeff8c 	.word	0xfffeff8c
 800d418:	40010000 	.word	0x40010000
 800d41c:	40010400 	.word	0x40010400
 800d420:	08029a64 	.word	0x08029a64

0800d424 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d424:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d426:	4b2e      	ldr	r3, [pc, #184]	; (800d4e0 <TIM_OC3_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
{
 800d42c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d430:	4604      	mov	r4, r0
 800d432:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d434:	492b      	ldr	r1, [pc, #172]	; (800d4e4 <TIM_OC3_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d436:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= OC_Config->OCMode;
 800d43a:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d43c:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d43e:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800d440:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800d442:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800d444:	69e2      	ldr	r2, [r4, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800d446:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d44a:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d44e:	ea45 250c 	orr.w	r5, r5, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 800d452:	ea43 0800 	orr.w	r8, r3, r0
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d456:	d00a      	beq.n	800d46e <TIM_OC3_SetConfig+0x4a>
 800d458:	4b23      	ldr	r3, [pc, #140]	; (800d4e8 <TIM_OC3_SetConfig+0xc4>)
 800d45a:	429c      	cmp	r4, r3
 800d45c:	d007      	beq.n	800d46e <TIM_OC3_SetConfig+0x4a>
  TIMx->CCR3 = OC_Config->Pulse;
 800d45e:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800d460:	6067      	str	r7, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d462:	f8c4 801c 	str.w	r8, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800d466:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800d468:	6225      	str	r5, [r4, #32]
}
 800d46a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d46e:	68f2      	ldr	r2, [r6, #12]
 800d470:	f032 0308 	bics.w	r3, r2, #8
 800d474:	d123      	bne.n	800d4be <TIM_OC3_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC3NP;
 800d476:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d47a:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d47c:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d480:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800d484:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d488:	d120      	bne.n	800d4cc <TIM_OC3_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d48a:	6973      	ldr	r3, [r6, #20]
 800d48c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d490:	d107      	bne.n	800d4a2 <TIM_OC3_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d492:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d496:	69b1      	ldr	r1, [r6, #24]
 800d498:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800d49c:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800d4a0:	e7dd      	b.n	800d45e <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d4a2:	f641 4103 	movw	r1, #7171	; 0x1c03
 800d4a6:	4811      	ldr	r0, [pc, #68]	; (800d4ec <TIM_OC3_SetConfig+0xc8>)
 800d4a8:	f7f6 fc48 	bl	8003d3c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d4ac:	f427 5240 	bic.w	r2, r7, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d4b0:	69b1      	ldr	r1, [r6, #24]
 800d4b2:	6973      	ldr	r3, [r6, #20]
 800d4b4:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800d4b8:	ea42 1703 	orr.w	r7, r2, r3, lsl #4
 800d4bc:	e7cf      	b.n	800d45e <TIM_OC3_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800d4be:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800d4c2:	480a      	ldr	r0, [pc, #40]	; (800d4ec <TIM_OC3_SetConfig+0xc8>)
 800d4c4:	f7f6 fc3a 	bl	8003d3c <assert_failed>
 800d4c8:	68f2      	ldr	r2, [r6, #12]
 800d4ca:	e7d4      	b.n	800d476 <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800d4cc:	f641 4102 	movw	r1, #7170	; 0x1c02
 800d4d0:	4806      	ldr	r0, [pc, #24]	; (800d4ec <TIM_OC3_SetConfig+0xc8>)
 800d4d2:	f7f6 fc33 	bl	8003d3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d4d6:	6973      	ldr	r3, [r6, #20]
 800d4d8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800d4dc:	d0d9      	beq.n	800d492 <TIM_OC3_SetConfig+0x6e>
 800d4de:	e7e0      	b.n	800d4a2 <TIM_OC3_SetConfig+0x7e>
 800d4e0:	fffeff8c 	.word	0xfffeff8c
 800d4e4:	40010000 	.word	0x40010000
 800d4e8:	40010400 	.word	0x40010400
 800d4ec:	08029a64 	.word	0x08029a64

0800d4f0 <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4f0:	6a03      	ldr	r3, [r0, #32]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d4f2:	4a1d      	ldr	r2, [pc, #116]	; (800d568 <TIM_OC4_SetConfig+0x78>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d4f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d4fa:	4604      	mov	r4, r0
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d4fc:	4f1b      	ldr	r7, [pc, #108]	; (800d56c <TIM_OC4_SetConfig+0x7c>)
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d4fe:	6888      	ldr	r0, [r1, #8]
{
 800d500:	460d      	mov	r5, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d502:	6809      	ldr	r1, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d504:	4294      	cmp	r4, r2
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d506:	6223      	str	r3, [r4, #32]
{
 800d508:	b083      	sub	sp, #12
  tmpccer = TIMx->CCER;
 800d50a:	6a26      	ldr	r6, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800d50c:	6863      	ldr	r3, [r4, #4]
  tmpccmrx = TIMx->CCMR2;
 800d50e:	f8d4 c01c 	ldr.w	ip, [r4, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800d512:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d516:	ea0c 0707 	and.w	r7, ip, r7
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d51a:	ea46 3600 	orr.w	r6, r6, r0, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d51e:	ea47 2701 	orr.w	r7, r7, r1, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d522:	d00a      	beq.n	800d53a <TIM_OC4_SetConfig+0x4a>
 800d524:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d528:	4294      	cmp	r4, r2
 800d52a:	d006      	beq.n	800d53a <TIM_OC4_SetConfig+0x4a>
  TIMx->CCR4 = OC_Config->Pulse;
 800d52c:	686a      	ldr	r2, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800d52e:	6063      	str	r3, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800d530:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800d532:	6422      	str	r2, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800d534:	6226      	str	r6, [r4, #32]
}
 800d536:	b003      	add	sp, #12
 800d538:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d53a:	696a      	ldr	r2, [r5, #20]
 800d53c:	f432 7180 	bics.w	r1, r2, #256	; 0x100
 800d540:	d104      	bne.n	800d54c <TIM_OC4_SetConfig+0x5c>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d542:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d546:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d54a:	e7ef      	b.n	800d52c <TIM_OC4_SetConfig+0x3c>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800d54c:	f641 4141 	movw	r1, #7233	; 0x1c41
 800d550:	4807      	ldr	r0, [pc, #28]	; (800d570 <TIM_OC4_SetConfig+0x80>)
 800d552:	9301      	str	r3, [sp, #4]
 800d554:	f7f6 fbf2 	bl	8003d3c <assert_failed>
 800d558:	9b01      	ldr	r3, [sp, #4]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d55a:	696a      	ldr	r2, [r5, #20]
 800d55c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d560:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d564:	e7e2      	b.n	800d52c <TIM_OC4_SetConfig+0x3c>
 800d566:	bf00      	nop
 800d568:	40010000 	.word	0x40010000
 800d56c:	feff8cff 	.word	0xfeff8cff
 800d570:	08029a64 	.word	0x08029a64

0800d574 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800d574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d576:	6803      	ldr	r3, [r0, #0]
{
 800d578:	460c      	mov	r4, r1

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d57a:	684a      	ldr	r2, [r1, #4]
{
 800d57c:	4607      	mov	r7, r0
  tmpsmcr = htim->Instance->SMCR;
 800d57e:	6899      	ldr	r1, [r3, #8]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d580:	4db4      	ldr	r5, [pc, #720]	; (800d854 <TIM_SlaveTimer_SetConfig+0x2e0>)

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800d582:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800d584:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d588:	6826      	ldr	r6, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800d58a:	ea41 0102 	orr.w	r1, r1, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 800d58e:	ea05 0501 	and.w	r5, r5, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800d592:	ea45 0506 	orr.w	r5, r5, r6
  htim->Instance->SMCR = tmpsmcr;
 800d596:	609d      	str	r5, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800d598:	f000 80f1 	beq.w	800d77e <TIM_SlaveTimer_SetConfig+0x20a>
 800d59c:	d957      	bls.n	800d64e <TIM_SlaveTimer_SetConfig+0xda>
 800d59e:	2a60      	cmp	r2, #96	; 0x60
 800d5a0:	f000 8168 	beq.w	800d874 <TIM_SlaveTimer_SetConfig+0x300>
 800d5a4:	2a70      	cmp	r2, #112	; 0x70
 800d5a6:	d150      	bne.n	800d64a <TIM_SlaveTimer_SetConfig+0xd6>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d5a8:	4aab      	ldr	r2, [pc, #684]	; (800d858 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800d5aa:	49ac      	ldr	r1, [pc, #688]	; (800d85c <TIM_SlaveTimer_SetConfig+0x2e8>)
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	bf18      	it	ne
 800d5b0:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d5b4:	48aa      	ldr	r0, [pc, #680]	; (800d860 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800d5b6:	bf14      	ite	ne
 800d5b8:	2201      	movne	r2, #1
 800d5ba:	2200      	moveq	r2, #0
 800d5bc:	428b      	cmp	r3, r1
 800d5be:	bf0c      	ite	eq
 800d5c0:	2200      	moveq	r2, #0
 800d5c2:	f002 0201 	andne.w	r2, r2, #1
 800d5c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d5ca:	4283      	cmp	r3, r0
 800d5cc:	bf0c      	ite	eq
 800d5ce:	2200      	moveq	r2, #0
 800d5d0:	f002 0201 	andne.w	r2, r2, #1
 800d5d4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d5d8:	428b      	cmp	r3, r1
 800d5da:	bf0c      	ite	eq
 800d5dc:	2200      	moveq	r2, #0
 800d5de:	f002 0201 	andne.w	r2, r2, #1
 800d5e2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d5e6:	4283      	cmp	r3, r0
 800d5e8:	bf0c      	ite	eq
 800d5ea:	2200      	moveq	r2, #0
 800d5ec:	f002 0201 	andne.w	r2, r2, #1
 800d5f0:	428b      	cmp	r3, r1
 800d5f2:	bf0c      	ite	eq
 800d5f4:	2200      	moveq	r2, #0
 800d5f6:	f002 0201 	andne.w	r2, r2, #1
 800d5fa:	b11a      	cbz	r2, 800d604 <TIM_SlaveTimer_SetConfig+0x90>
 800d5fc:	4a99      	ldr	r2, [pc, #612]	; (800d864 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800d5fe:	4293      	cmp	r3, r2
 800d600:	f040 81b8 	bne.w	800d974 <TIM_SlaveTimer_SetConfig+0x400>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800d604:	68e3      	ldr	r3, [r4, #12]
 800d606:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800d60a:	f040 819b 	bne.w	800d944 <TIM_SlaveTimer_SetConfig+0x3d0>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d60e:	68a3      	ldr	r3, [r4, #8]
 800d610:	2b0a      	cmp	r3, #10
 800d612:	bf18      	it	ne
 800d614:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d618:	d003      	beq.n	800d622 <TIM_SlaveTimer_SetConfig+0xae>
 800d61a:	f033 0302 	bics.w	r3, r3, #2
 800d61e:	f040 81a3 	bne.w	800d968 <TIM_SlaveTimer_SetConfig+0x3f4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d622:	6921      	ldr	r1, [r4, #16]
 800d624:	290f      	cmp	r1, #15
 800d626:	f200 8172 	bhi.w	800d90e <TIM_SlaveTimer_SetConfig+0x39a>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800d62a:	683d      	ldr	r5, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d62c:	2000      	movs	r0, #0
 800d62e:	68e3      	ldr	r3, [r4, #12]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d630:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d632:	68a4      	ldr	r4, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d634:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800d638:	4323      	orrs	r3, r4
 800d63a:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d63c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d640:	60ab      	str	r3, [r5, #8]
}
 800d642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800d644:	f032 0210 	bics.w	r2, r2, #16
 800d648:	d009      	beq.n	800d65e <TIM_SlaveTimer_SetConfig+0xea>
        return HAL_ERROR;
 800d64a:	2001      	movs	r0, #1
}
 800d64c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sSlaveConfig->InputTrigger)
 800d64e:	2a40      	cmp	r2, #64	; 0x40
 800d650:	d033      	beq.n	800d6ba <TIM_SlaveTimer_SetConfig+0x146>
 800d652:	d8fa      	bhi.n	800d64a <TIM_SlaveTimer_SetConfig+0xd6>
 800d654:	2a20      	cmp	r2, #32
 800d656:	d002      	beq.n	800d65e <TIM_SlaveTimer_SetConfig+0xea>
 800d658:	d9f4      	bls.n	800d644 <TIM_SlaveTimer_SetConfig+0xd0>
 800d65a:	2a30      	cmp	r2, #48	; 0x30
 800d65c:	d1f5      	bne.n	800d64a <TIM_SlaveTimer_SetConfig+0xd6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d65e:	4a7e      	ldr	r2, [pc, #504]	; (800d858 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800d660:	497e      	ldr	r1, [pc, #504]	; (800d85c <TIM_SlaveTimer_SetConfig+0x2e8>)
 800d662:	4293      	cmp	r3, r2
 800d664:	bf18      	it	ne
 800d666:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d66a:	4d7d      	ldr	r5, [pc, #500]	; (800d860 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800d66c:	4c7e      	ldr	r4, [pc, #504]	; (800d868 <TIM_SlaveTimer_SetConfig+0x2f4>)
 800d66e:	bf14      	ite	ne
 800d670:	2201      	movne	r2, #1
 800d672:	2200      	moveq	r2, #0
 800d674:	487d      	ldr	r0, [pc, #500]	; (800d86c <TIM_SlaveTimer_SetConfig+0x2f8>)
 800d676:	428b      	cmp	r3, r1
 800d678:	bf0c      	ite	eq
 800d67a:	2200      	moveq	r2, #0
 800d67c:	f002 0201 	andne.w	r2, r2, #1
 800d680:	f501 319e 	add.w	r1, r1, #80896	; 0x13c00
 800d684:	42ab      	cmp	r3, r5
 800d686:	bf0c      	ite	eq
 800d688:	2200      	moveq	r2, #0
 800d68a:	f002 0201 	andne.w	r2, r2, #1
 800d68e:	42a3      	cmp	r3, r4
 800d690:	bf0c      	ite	eq
 800d692:	2200      	moveq	r2, #0
 800d694:	f002 0201 	andne.w	r2, r2, #1
 800d698:	4283      	cmp	r3, r0
 800d69a:	bf0c      	ite	eq
 800d69c:	2200      	moveq	r2, #0
 800d69e:	f002 0201 	andne.w	r2, r2, #1
 800d6a2:	428b      	cmp	r3, r1
 800d6a4:	bf0c      	ite	eq
 800d6a6:	2200      	moveq	r2, #0
 800d6a8:	f002 0201 	andne.w	r2, r2, #1
 800d6ac:	b11a      	cbz	r2, 800d6b6 <TIM_SlaveTimer_SetConfig+0x142>
 800d6ae:	4a6d      	ldr	r2, [pc, #436]	; (800d864 <TIM_SlaveTimer_SetConfig+0x2f0>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	f040 8165 	bne.w	800d980 <TIM_SlaveTimer_SetConfig+0x40c>
  HAL_StatusTypeDef status = HAL_OK;
 800d6b6:	2000      	movs	r0, #0
}
 800d6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d6ba:	4a67      	ldr	r2, [pc, #412]	; (800d858 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800d6bc:	4967      	ldr	r1, [pc, #412]	; (800d85c <TIM_SlaveTimer_SetConfig+0x2e8>)
 800d6be:	4293      	cmp	r3, r2
 800d6c0:	bf18      	it	ne
 800d6c2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d6c6:	4866      	ldr	r0, [pc, #408]	; (800d860 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800d6c8:	bf14      	ite	ne
 800d6ca:	2201      	movne	r2, #1
 800d6cc:	2200      	moveq	r2, #0
 800d6ce:	428b      	cmp	r3, r1
 800d6d0:	bf0c      	ite	eq
 800d6d2:	2200      	moveq	r2, #0
 800d6d4:	f002 0201 	andne.w	r2, r2, #1
 800d6d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d6dc:	4283      	cmp	r3, r0
 800d6de:	bf0c      	ite	eq
 800d6e0:	2200      	moveq	r2, #0
 800d6e2:	f002 0201 	andne.w	r2, r2, #1
 800d6e6:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d6ea:	428b      	cmp	r3, r1
 800d6ec:	bf0c      	ite	eq
 800d6ee:	2200      	moveq	r2, #0
 800d6f0:	f002 0201 	andne.w	r2, r2, #1
 800d6f4:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d6f8:	4283      	cmp	r3, r0
 800d6fa:	bf0c      	ite	eq
 800d6fc:	2200      	moveq	r2, #0
 800d6fe:	f002 0201 	andne.w	r2, r2, #1
 800d702:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d706:	428b      	cmp	r3, r1
 800d708:	bf0c      	ite	eq
 800d70a:	2200      	moveq	r2, #0
 800d70c:	f002 0201 	andne.w	r2, r2, #1
 800d710:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d714:	4283      	cmp	r3, r0
 800d716:	bf0c      	ite	eq
 800d718:	2200      	moveq	r2, #0
 800d71a:	f002 0201 	andne.w	r2, r2, #1
 800d71e:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800d722:	428b      	cmp	r3, r1
 800d724:	bf0c      	ite	eq
 800d726:	2200      	moveq	r2, #0
 800d728:	f002 0201 	andne.w	r2, r2, #1
 800d72c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d730:	4283      	cmp	r3, r0
 800d732:	bf0c      	ite	eq
 800d734:	2200      	moveq	r2, #0
 800d736:	f002 0201 	andne.w	r2, r2, #1
 800d73a:	428b      	cmp	r3, r1
 800d73c:	bf0c      	ite	eq
 800d73e:	2200      	moveq	r2, #0
 800d740:	f002 0201 	andne.w	r2, r2, #1
 800d744:	b11a      	cbz	r2, 800d74e <TIM_SlaveTimer_SetConfig+0x1da>
 800d746:	4a4a      	ldr	r2, [pc, #296]	; (800d870 <TIM_SlaveTimer_SetConfig+0x2fc>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	f040 8126 	bne.w	800d99a <TIM_SlaveTimer_SetConfig+0x426>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d74e:	6923      	ldr	r3, [r4, #16]
 800d750:	2b0f      	cmp	r3, #15
 800d752:	f200 80ea 	bhi.w	800d92a <TIM_SlaveTimer_SetConfig+0x3b6>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800d756:	6823      	ldr	r3, [r4, #0]
 800d758:	2b05      	cmp	r3, #5
 800d75a:	f43f af76 	beq.w	800d64a <TIM_SlaveTimer_SetConfig+0xd6>
      tmpccer = htim->Instance->CCER;
 800d75e:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d760:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d762:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800d764:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800d766:	6a19      	ldr	r1, [r3, #32]
 800d768:	f021 0101 	bic.w	r1, r1, #1
 800d76c:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800d76e:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d770:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800d774:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800d778:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800d77a:	621c      	str	r4, [r3, #32]
}
 800d77c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d77e:	4a36      	ldr	r2, [pc, #216]	; (800d858 <TIM_SlaveTimer_SetConfig+0x2e4>)
 800d780:	4936      	ldr	r1, [pc, #216]	; (800d85c <TIM_SlaveTimer_SetConfig+0x2e8>)
 800d782:	4293      	cmp	r3, r2
 800d784:	bf18      	it	ne
 800d786:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d78a:	4835      	ldr	r0, [pc, #212]	; (800d860 <TIM_SlaveTimer_SetConfig+0x2ec>)
 800d78c:	bf14      	ite	ne
 800d78e:	2201      	movne	r2, #1
 800d790:	2200      	moveq	r2, #0
 800d792:	428b      	cmp	r3, r1
 800d794:	bf0c      	ite	eq
 800d796:	2200      	moveq	r2, #0
 800d798:	f002 0201 	andne.w	r2, r2, #1
 800d79c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7a0:	4283      	cmp	r3, r0
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2200      	moveq	r2, #0
 800d7a6:	f002 0201 	andne.w	r2, r2, #1
 800d7aa:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d7ae:	428b      	cmp	r3, r1
 800d7b0:	bf0c      	ite	eq
 800d7b2:	2200      	moveq	r2, #0
 800d7b4:	f002 0201 	andne.w	r2, r2, #1
 800d7b8:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d7bc:	4283      	cmp	r3, r0
 800d7be:	bf0c      	ite	eq
 800d7c0:	2200      	moveq	r2, #0
 800d7c2:	f002 0201 	andne.w	r2, r2, #1
 800d7c6:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
 800d7ca:	428b      	cmp	r3, r1
 800d7cc:	bf0c      	ite	eq
 800d7ce:	2200      	moveq	r2, #0
 800d7d0:	f002 0201 	andne.w	r2, r2, #1
 800d7d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d7d8:	4283      	cmp	r3, r0
 800d7da:	bf0c      	ite	eq
 800d7dc:	2200      	moveq	r2, #0
 800d7de:	f002 0201 	andne.w	r2, r2, #1
 800d7e2:	f5a0 3096 	sub.w	r0, r0, #76800	; 0x12c00
 800d7e6:	428b      	cmp	r3, r1
 800d7e8:	bf0c      	ite	eq
 800d7ea:	2200      	moveq	r2, #0
 800d7ec:	f002 0201 	andne.w	r2, r2, #1
 800d7f0:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800d7f4:	4283      	cmp	r3, r0
 800d7f6:	bf0c      	ite	eq
 800d7f8:	2200      	moveq	r2, #0
 800d7fa:	f002 0201 	andne.w	r2, r2, #1
 800d7fe:	428b      	cmp	r3, r1
 800d800:	bf0c      	ite	eq
 800d802:	2200      	moveq	r2, #0
 800d804:	f002 0201 	andne.w	r2, r2, #1
 800d808:	b11a      	cbz	r2, 800d812 <TIM_SlaveTimer_SetConfig+0x29e>
 800d80a:	4a19      	ldr	r2, [pc, #100]	; (800d870 <TIM_SlaveTimer_SetConfig+0x2fc>)
 800d80c:	4293      	cmp	r3, r2
 800d80e:	f040 80ca 	bne.w	800d9a6 <TIM_SlaveTimer_SetConfig+0x432>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d812:	68a3      	ldr	r3, [r4, #8]
 800d814:	2b0a      	cmp	r3, #10
 800d816:	bf18      	it	ne
 800d818:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d81c:	d003      	beq.n	800d826 <TIM_SlaveTimer_SetConfig+0x2b2>
 800d81e:	f033 0302 	bics.w	r3, r3, #2
 800d822:	f040 809b 	bne.w	800d95c <TIM_SlaveTimer_SetConfig+0x3e8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d826:	6926      	ldr	r6, [r4, #16]
 800d828:	2e0f      	cmp	r6, #15
 800d82a:	f200 8084 	bhi.w	800d936 <TIM_SlaveTimer_SetConfig+0x3c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d82e:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d830:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d832:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800d834:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d836:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d838:	f025 050a 	bic.w	r5, r5, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d83c:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800d840:	4329      	orrs	r1, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d842:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d844:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d846:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d84a:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800d84e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d850:	6219      	str	r1, [r3, #32]
}
 800d852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d854:	fffefff8 	.word	0xfffefff8
 800d858:	40010000 	.word	0x40010000
 800d85c:	40000400 	.word	0x40000400
 800d860:	40000800 	.word	0x40000800
 800d864:	40001800 	.word	0x40001800
 800d868:	40000c00 	.word	0x40000c00
 800d86c:	40010400 	.word	0x40010400
 800d870:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d874:	4a4f      	ldr	r2, [pc, #316]	; (800d9b4 <TIM_SlaveTimer_SetConfig+0x440>)
 800d876:	4950      	ldr	r1, [pc, #320]	; (800d9b8 <TIM_SlaveTimer_SetConfig+0x444>)
 800d878:	4293      	cmp	r3, r2
 800d87a:	bf18      	it	ne
 800d87c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800d880:	484e      	ldr	r0, [pc, #312]	; (800d9bc <TIM_SlaveTimer_SetConfig+0x448>)
 800d882:	bf14      	ite	ne
 800d884:	2201      	movne	r2, #1
 800d886:	2200      	moveq	r2, #0
 800d888:	428b      	cmp	r3, r1
 800d88a:	bf0c      	ite	eq
 800d88c:	2200      	moveq	r2, #0
 800d88e:	f002 0201 	andne.w	r2, r2, #1
 800d892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d896:	4283      	cmp	r3, r0
 800d898:	bf0c      	ite	eq
 800d89a:	2200      	moveq	r2, #0
 800d89c:	f002 0201 	andne.w	r2, r2, #1
 800d8a0:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800d8a4:	428b      	cmp	r3, r1
 800d8a6:	bf0c      	ite	eq
 800d8a8:	2200      	moveq	r2, #0
 800d8aa:	f002 0201 	andne.w	r2, r2, #1
 800d8ae:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800d8b2:	4283      	cmp	r3, r0
 800d8b4:	bf0c      	ite	eq
 800d8b6:	2200      	moveq	r2, #0
 800d8b8:	f002 0201 	andne.w	r2, r2, #1
 800d8bc:	428b      	cmp	r3, r1
 800d8be:	bf0c      	ite	eq
 800d8c0:	2200      	moveq	r2, #0
 800d8c2:	f002 0201 	andne.w	r2, r2, #1
 800d8c6:	b112      	cbz	r2, 800d8ce <TIM_SlaveTimer_SetConfig+0x35a>
 800d8c8:	4a3d      	ldr	r2, [pc, #244]	; (800d9c0 <TIM_SlaveTimer_SetConfig+0x44c>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	d15f      	bne.n	800d98e <TIM_SlaveTimer_SetConfig+0x41a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d8ce:	68a3      	ldr	r3, [r4, #8]
 800d8d0:	2b0a      	cmp	r3, #10
 800d8d2:	bf18      	it	ne
 800d8d4:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800d8d8:	d002      	beq.n	800d8e0 <TIM_SlaveTimer_SetConfig+0x36c>
 800d8da:	f033 0302 	bics.w	r3, r3, #2
 800d8de:	d137      	bne.n	800d950 <TIM_SlaveTimer_SetConfig+0x3dc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d8e0:	6925      	ldr	r5, [r4, #16]
 800d8e2:	2d0f      	cmp	r5, #15
 800d8e4:	d81a      	bhi.n	800d91c <TIM_SlaveTimer_SetConfig+0x3a8>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8e6:	683b      	ldr	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d8e8:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d8ea:	68a6      	ldr	r6, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d8ec:	6a1c      	ldr	r4, [r3, #32]
 800d8ee:	f024 0410 	bic.w	r4, r4, #16
 800d8f2:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d8f4:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800d8f6:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d8f8:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d8fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d900:	ea41 3105 	orr.w	r1, r1, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800d904:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800d908:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800d90a:	621a      	str	r2, [r3, #32]
}
 800d90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d90e:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800d912:	482c      	ldr	r0, [pc, #176]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d914:	f7f6 fa12 	bl	8003d3c <assert_failed>
 800d918:	6921      	ldr	r1, [r4, #16]
 800d91a:	e686      	b.n	800d62a <TIM_SlaveTimer_SetConfig+0xb6>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d91c:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800d920:	4828      	ldr	r0, [pc, #160]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d922:	f7f6 fa0b 	bl	8003d3c <assert_failed>
 800d926:	6925      	ldr	r5, [r4, #16]
 800d928:	e7dd      	b.n	800d8e6 <TIM_SlaveTimer_SetConfig+0x372>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d92a:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800d92e:	4825      	ldr	r0, [pc, #148]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d930:	f7f6 fa04 	bl	8003d3c <assert_failed>
 800d934:	e70f      	b.n	800d756 <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800d936:	f641 5111 	movw	r1, #7441	; 0x1d11
 800d93a:	4822      	ldr	r0, [pc, #136]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d93c:	f7f6 f9fe 	bl	8003d3c <assert_failed>
 800d940:	6926      	ldr	r6, [r4, #16]
 800d942:	e774      	b.n	800d82e <TIM_SlaveTimer_SetConfig+0x2ba>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800d944:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800d948:	481e      	ldr	r0, [pc, #120]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d94a:	f7f6 f9f7 	bl	8003d3c <assert_failed>
 800d94e:	e65e      	b.n	800d60e <TIM_SlaveTimer_SetConfig+0x9a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d950:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800d954:	481b      	ldr	r0, [pc, #108]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d956:	f7f6 f9f1 	bl	8003d3c <assert_failed>
 800d95a:	e7c1      	b.n	800d8e0 <TIM_SlaveTimer_SetConfig+0x36c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d95c:	f641 5110 	movw	r1, #7440	; 0x1d10
 800d960:	4818      	ldr	r0, [pc, #96]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d962:	f7f6 f9eb 	bl	8003d3c <assert_failed>
 800d966:	e75e      	b.n	800d826 <TIM_SlaveTimer_SetConfig+0x2b2>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800d968:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800d96c:	4815      	ldr	r0, [pc, #84]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d96e:	f7f6 f9e5 	bl	8003d3c <assert_failed>
 800d972:	e656      	b.n	800d622 <TIM_SlaveTimer_SetConfig+0xae>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800d974:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800d978:	4812      	ldr	r0, [pc, #72]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d97a:	f7f6 f9df 	bl	8003d3c <assert_failed>
 800d97e:	e641      	b.n	800d604 <TIM_SlaveTimer_SetConfig+0x90>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d980:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800d984:	480f      	ldr	r0, [pc, #60]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d986:	f7f6 f9d9 	bl	8003d3c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800d98a:	2000      	movs	r0, #0
}
 800d98c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800d98e:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800d992:	480c      	ldr	r0, [pc, #48]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d994:	f7f6 f9d2 	bl	8003d3c <assert_failed>
 800d998:	e799      	b.n	800d8ce <TIM_SlaveTimer_SetConfig+0x35a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d99a:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800d99e:	4809      	ldr	r0, [pc, #36]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d9a0:	f7f6 f9cc 	bl	8003d3c <assert_failed>
 800d9a4:	e6d3      	b.n	800d74e <TIM_SlaveTimer_SetConfig+0x1da>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800d9a6:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800d9aa:	4806      	ldr	r0, [pc, #24]	; (800d9c4 <TIM_SlaveTimer_SetConfig+0x450>)
 800d9ac:	f7f6 f9c6 	bl	8003d3c <assert_failed>
 800d9b0:	e72f      	b.n	800d812 <TIM_SlaveTimer_SetConfig+0x29e>
 800d9b2:	bf00      	nop
 800d9b4:	40010000 	.word	0x40010000
 800d9b8:	40000400 	.word	0x40000400
 800d9bc:	40000800 	.word	0x40000800
 800d9c0:	40001800 	.word	0x40001800
 800d9c4:	08029a64 	.word	0x08029a64

0800d9c8 <HAL_TIM_Base_Start>:
{
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800d9cc:	4b52      	ldr	r3, [pc, #328]	; (800db18 <HAL_TIM_Base_Start+0x150>)
 800d9ce:	4d53      	ldr	r5, [pc, #332]	; (800db1c <HAL_TIM_Base_Start+0x154>)
 800d9d0:	6822      	ldr	r2, [r4, #0]
 800d9d2:	4853      	ldr	r0, [pc, #332]	; (800db20 <HAL_TIM_Base_Start+0x158>)
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	bf18      	it	ne
 800d9d8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800d9dc:	4951      	ldr	r1, [pc, #324]	; (800db24 <HAL_TIM_Base_Start+0x15c>)
 800d9de:	4e52      	ldr	r6, [pc, #328]	; (800db28 <HAL_TIM_Base_Start+0x160>)
 800d9e0:	bf14      	ite	ne
 800d9e2:	2301      	movne	r3, #1
 800d9e4:	2300      	moveq	r3, #0
 800d9e6:	42aa      	cmp	r2, r5
 800d9e8:	bf0c      	ite	eq
 800d9ea:	2300      	moveq	r3, #0
 800d9ec:	f003 0301 	andne.w	r3, r3, #1
 800d9f0:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800d9f4:	4282      	cmp	r2, r0
 800d9f6:	bf0c      	ite	eq
 800d9f8:	2300      	moveq	r3, #0
 800d9fa:	f003 0301 	andne.w	r3, r3, #1
 800d9fe:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800da02:	428a      	cmp	r2, r1
 800da04:	bf0c      	ite	eq
 800da06:	2300      	moveq	r3, #0
 800da08:	f003 0301 	andne.w	r3, r3, #1
 800da0c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800da10:	42b2      	cmp	r2, r6
 800da12:	bf0c      	ite	eq
 800da14:	2300      	moveq	r3, #0
 800da16:	f003 0301 	andne.w	r3, r3, #1
 800da1a:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800da1e:	42aa      	cmp	r2, r5
 800da20:	bf0c      	ite	eq
 800da22:	2300      	moveq	r3, #0
 800da24:	f003 0301 	andne.w	r3, r3, #1
 800da28:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800da2c:	4282      	cmp	r2, r0
 800da2e:	bf0c      	ite	eq
 800da30:	2300      	moveq	r3, #0
 800da32:	f003 0301 	andne.w	r3, r3, #1
 800da36:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800da3a:	428a      	cmp	r2, r1
 800da3c:	bf0c      	ite	eq
 800da3e:	2300      	moveq	r3, #0
 800da40:	f003 0301 	andne.w	r3, r3, #1
 800da44:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800da48:	42b2      	cmp	r2, r6
 800da4a:	bf0c      	ite	eq
 800da4c:	2300      	moveq	r3, #0
 800da4e:	f003 0301 	andne.w	r3, r3, #1
 800da52:	42aa      	cmp	r2, r5
 800da54:	bf0c      	ite	eq
 800da56:	2300      	moveq	r3, #0
 800da58:	f003 0301 	andne.w	r3, r3, #1
 800da5c:	4282      	cmp	r2, r0
 800da5e:	bf0c      	ite	eq
 800da60:	2300      	moveq	r3, #0
 800da62:	f003 0301 	andne.w	r3, r3, #1
 800da66:	428a      	cmp	r2, r1
 800da68:	bf0c      	ite	eq
 800da6a:	2300      	moveq	r3, #0
 800da6c:	f003 0301 	andne.w	r3, r3, #1
 800da70:	b113      	cbz	r3, 800da78 <HAL_TIM_Base_Start+0xb0>
 800da72:	4b2e      	ldr	r3, [pc, #184]	; (800db2c <HAL_TIM_Base_Start+0x164>)
 800da74:	429a      	cmp	r2, r3
 800da76:	d144      	bne.n	800db02 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800da78:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800da7c:	2b01      	cmp	r3, #1
 800da7e:	d13c      	bne.n	800dafa <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da80:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800da82:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da84:	4b24      	ldr	r3, [pc, #144]	; (800db18 <HAL_TIM_Base_Start+0x150>)
 800da86:	4825      	ldr	r0, [pc, #148]	; (800db1c <HAL_TIM_Base_Start+0x154>)
 800da88:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800da8c:	bf18      	it	ne
 800da8e:	429a      	cmpne	r2, r3
 800da90:	4923      	ldr	r1, [pc, #140]	; (800db20 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800da92:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800da96:	bf0c      	ite	eq
 800da98:	2301      	moveq	r3, #1
 800da9a:	2300      	movne	r3, #0
 800da9c:	4c21      	ldr	r4, [pc, #132]	; (800db24 <HAL_TIM_Base_Start+0x15c>)
 800da9e:	4282      	cmp	r2, r0
 800daa0:	bf08      	it	eq
 800daa2:	f043 0301 	orreq.w	r3, r3, #1
 800daa6:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800daaa:	428a      	cmp	r2, r1
 800daac:	bf08      	it	eq
 800daae:	f043 0301 	orreq.w	r3, r3, #1
 800dab2:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800dab6:	42a2      	cmp	r2, r4
 800dab8:	bf08      	it	eq
 800daba:	f043 0301 	orreq.w	r3, r3, #1
 800dabe:	4282      	cmp	r2, r0
 800dac0:	bf08      	it	eq
 800dac2:	f043 0301 	orreq.w	r3, r3, #1
 800dac6:	428a      	cmp	r2, r1
 800dac8:	bf08      	it	eq
 800daca:	f043 0301 	orreq.w	r3, r3, #1
 800dace:	b933      	cbnz	r3, 800dade <HAL_TIM_Base_Start+0x116>
 800dad0:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800dad4:	1a10      	subs	r0, r2, r0
 800dad6:	fab0 f080 	clz	r0, r0
 800dada:	0940      	lsrs	r0, r0, #5
 800dadc:	b1b8      	cbz	r0, 800db0e <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dade:	6891      	ldr	r1, [r2, #8]
 800dae0:	4b13      	ldr	r3, [pc, #76]	; (800db30 <HAL_TIM_Base_Start+0x168>)
 800dae2:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dae4:	2b06      	cmp	r3, #6
 800dae6:	d00a      	beq.n	800dafe <HAL_TIM_Base_Start+0x136>
 800dae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800daec:	d007      	beq.n	800dafe <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800daee:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800daf0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800daf2:	f043 0301 	orr.w	r3, r3, #1
 800daf6:	6013      	str	r3, [r2, #0]
}
 800daf8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800dafa:	2001      	movs	r0, #1
}
 800dafc:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800dafe:	2000      	movs	r0, #0
}
 800db00:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800db02:	f240 1197 	movw	r1, #407	; 0x197
 800db06:	480b      	ldr	r0, [pc, #44]	; (800db34 <HAL_TIM_Base_Start+0x16c>)
 800db08:	f7f6 f918 	bl	8003d3c <assert_failed>
 800db0c:	e7b4      	b.n	800da78 <HAL_TIM_Base_Start+0xb0>
    __HAL_TIM_ENABLE(htim);
 800db0e:	6813      	ldr	r3, [r2, #0]
 800db10:	f043 0301 	orr.w	r3, r3, #1
 800db14:	6013      	str	r3, [r2, #0]
}
 800db16:	bd70      	pop	{r4, r5, r6, pc}
 800db18:	40010000 	.word	0x40010000
 800db1c:	40000400 	.word	0x40000400
 800db20:	40000800 	.word	0x40000800
 800db24:	40000c00 	.word	0x40000c00
 800db28:	40001000 	.word	0x40001000
 800db2c:	40002000 	.word	0x40002000
 800db30:	00010007 	.word	0x00010007
 800db34:	08029a64 	.word	0x08029a64

0800db38 <HAL_TIM_Base_Start_IT>:
{
 800db38:	b570      	push	{r4, r5, r6, lr}
 800db3a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800db3c:	4b54      	ldr	r3, [pc, #336]	; (800dc90 <HAL_TIM_Base_Start_IT+0x158>)
 800db3e:	4d55      	ldr	r5, [pc, #340]	; (800dc94 <HAL_TIM_Base_Start_IT+0x15c>)
 800db40:	6822      	ldr	r2, [r4, #0]
 800db42:	4855      	ldr	r0, [pc, #340]	; (800dc98 <HAL_TIM_Base_Start_IT+0x160>)
 800db44:	429a      	cmp	r2, r3
 800db46:	bf18      	it	ne
 800db48:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800db4c:	4953      	ldr	r1, [pc, #332]	; (800dc9c <HAL_TIM_Base_Start_IT+0x164>)
 800db4e:	4e54      	ldr	r6, [pc, #336]	; (800dca0 <HAL_TIM_Base_Start_IT+0x168>)
 800db50:	bf14      	ite	ne
 800db52:	2301      	movne	r3, #1
 800db54:	2300      	moveq	r3, #0
 800db56:	42aa      	cmp	r2, r5
 800db58:	bf0c      	ite	eq
 800db5a:	2300      	moveq	r3, #0
 800db5c:	f003 0301 	andne.w	r3, r3, #1
 800db60:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 800db64:	4282      	cmp	r2, r0
 800db66:	bf0c      	ite	eq
 800db68:	2300      	moveq	r3, #0
 800db6a:	f003 0301 	andne.w	r3, r3, #1
 800db6e:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800db72:	428a      	cmp	r2, r1
 800db74:	bf0c      	ite	eq
 800db76:	2300      	moveq	r3, #0
 800db78:	f003 0301 	andne.w	r3, r3, #1
 800db7c:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800db80:	42b2      	cmp	r2, r6
 800db82:	bf0c      	ite	eq
 800db84:	2300      	moveq	r3, #0
 800db86:	f003 0301 	andne.w	r3, r3, #1
 800db8a:	f506 369a 	add.w	r6, r6, #78848	; 0x13400
 800db8e:	42aa      	cmp	r2, r5
 800db90:	bf0c      	ite	eq
 800db92:	2300      	moveq	r3, #0
 800db94:	f003 0301 	andne.w	r3, r3, #1
 800db98:	f505 359a 	add.w	r5, r5, #78848	; 0x13400
 800db9c:	4282      	cmp	r2, r0
 800db9e:	bf0c      	ite	eq
 800dba0:	2300      	moveq	r3, #0
 800dba2:	f003 0301 	andne.w	r3, r3, #1
 800dba6:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800dbaa:	428a      	cmp	r2, r1
 800dbac:	bf0c      	ite	eq
 800dbae:	2300      	moveq	r3, #0
 800dbb0:	f003 0301 	andne.w	r3, r3, #1
 800dbb4:	f5a1 3192 	sub.w	r1, r1, #74752	; 0x12400
 800dbb8:	42b2      	cmp	r2, r6
 800dbba:	bf0c      	ite	eq
 800dbbc:	2300      	moveq	r3, #0
 800dbbe:	f003 0301 	andne.w	r3, r3, #1
 800dbc2:	42aa      	cmp	r2, r5
 800dbc4:	bf0c      	ite	eq
 800dbc6:	2300      	moveq	r3, #0
 800dbc8:	f003 0301 	andne.w	r3, r3, #1
 800dbcc:	4282      	cmp	r2, r0
 800dbce:	bf0c      	ite	eq
 800dbd0:	2300      	moveq	r3, #0
 800dbd2:	f003 0301 	andne.w	r3, r3, #1
 800dbd6:	428a      	cmp	r2, r1
 800dbd8:	bf0c      	ite	eq
 800dbda:	2300      	moveq	r3, #0
 800dbdc:	f003 0301 	andne.w	r3, r3, #1
 800dbe0:	b113      	cbz	r3, 800dbe8 <HAL_TIM_Base_Start_IT+0xb0>
 800dbe2:	4b30      	ldr	r3, [pc, #192]	; (800dca4 <HAL_TIM_Base_Start_IT+0x16c>)
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d147      	bne.n	800dc78 <HAL_TIM_Base_Start_IT+0x140>
  if (htim->State != HAL_TIM_STATE_READY)
 800dbe8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800dbec:	2b01      	cmp	r3, #1
 800dbee:	d13f      	bne.n	800dc70 <HAL_TIM_Base_Start_IT+0x138>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dbf0:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800dbf2:	2502      	movs	r5, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dbf4:	4b26      	ldr	r3, [pc, #152]	; (800dc90 <HAL_TIM_Base_Start_IT+0x158>)
 800dbf6:	4827      	ldr	r0, [pc, #156]	; (800dc94 <HAL_TIM_Base_Start_IT+0x15c>)
 800dbf8:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800dbfc:	bf18      	it	ne
 800dbfe:	429a      	cmpne	r2, r3
 800dc00:	4925      	ldr	r1, [pc, #148]	; (800dc98 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800dc02:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc06:	bf0c      	ite	eq
 800dc08:	2301      	moveq	r3, #1
 800dc0a:	2300      	movne	r3, #0
 800dc0c:	4d23      	ldr	r5, [pc, #140]	; (800dc9c <HAL_TIM_Base_Start_IT+0x164>)
 800dc0e:	4282      	cmp	r2, r0
 800dc10:	bf08      	it	eq
 800dc12:	f043 0301 	orreq.w	r3, r3, #1
 800dc16:	4c24      	ldr	r4, [pc, #144]	; (800dca8 <HAL_TIM_Base_Start_IT+0x170>)
 800dc18:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 800dc1c:	428a      	cmp	r2, r1
 800dc1e:	bf08      	it	eq
 800dc20:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc24:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc26:	42aa      	cmp	r2, r5
 800dc28:	bf08      	it	eq
 800dc2a:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc2e:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc32:	42a2      	cmp	r2, r4
 800dc34:	bf08      	it	eq
 800dc36:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dc3a:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dc3c:	4282      	cmp	r2, r0
 800dc3e:	bf08      	it	eq
 800dc40:	f043 0301 	orreq.w	r3, r3, #1
 800dc44:	b933      	cbnz	r3, 800dc54 <HAL_TIM_Base_Start_IT+0x11c>
 800dc46:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800dc4a:	1a10      	subs	r0, r2, r0
 800dc4c:	fab0 f080 	clz	r0, r0
 800dc50:	0940      	lsrs	r0, r0, #5
 800dc52:	b1b8      	cbz	r0, 800dc84 <HAL_TIM_Base_Start_IT+0x14c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800dc54:	6891      	ldr	r1, [r2, #8]
 800dc56:	4b15      	ldr	r3, [pc, #84]	; (800dcac <HAL_TIM_Base_Start_IT+0x174>)
 800dc58:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800dc5a:	2b06      	cmp	r3, #6
 800dc5c:	d00a      	beq.n	800dc74 <HAL_TIM_Base_Start_IT+0x13c>
 800dc5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc62:	d007      	beq.n	800dc74 <HAL_TIM_Base_Start_IT+0x13c>
      __HAL_TIM_ENABLE(htim);
 800dc64:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800dc66:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800dc68:	f043 0301 	orr.w	r3, r3, #1
 800dc6c:	6013      	str	r3, [r2, #0]
}
 800dc6e:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800dc70:	2001      	movs	r0, #1
}
 800dc72:	bd70      	pop	{r4, r5, r6, pc}
  return HAL_OK;
 800dc74:	2000      	movs	r0, #0
}
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800dc78:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800dc7c:	480c      	ldr	r0, [pc, #48]	; (800dcb0 <HAL_TIM_Base_Start_IT+0x178>)
 800dc7e:	f7f6 f85d 	bl	8003d3c <assert_failed>
 800dc82:	e7b1      	b.n	800dbe8 <HAL_TIM_Base_Start_IT+0xb0>
    __HAL_TIM_ENABLE(htim);
 800dc84:	6813      	ldr	r3, [r2, #0]
 800dc86:	f043 0301 	orr.w	r3, r3, #1
 800dc8a:	6013      	str	r3, [r2, #0]
}
 800dc8c:	bd70      	pop	{r4, r5, r6, pc}
 800dc8e:	bf00      	nop
 800dc90:	40010000 	.word	0x40010000
 800dc94:	40000400 	.word	0x40000400
 800dc98:	40000800 	.word	0x40000800
 800dc9c:	40000c00 	.word	0x40000c00
 800dca0:	40001000 	.word	0x40001000
 800dca4:	40002000 	.word	0x40002000
 800dca8:	40010400 	.word	0x40010400
 800dcac:	00010007 	.word	0x00010007
 800dcb0:	08029a64 	.word	0x08029a64

0800dcb4 <HAL_TIM_OC_MspInit>:
 800dcb4:	4770      	bx	lr
 800dcb6:	bf00      	nop

0800dcb8 <HAL_TIM_PWM_MspInit>:
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop

0800dcbc <HAL_TIM_IC_MspInit>:
 800dcbc:	4770      	bx	lr
 800dcbe:	bf00      	nop

0800dcc0 <HAL_TIM_ConfigClockSource>:
{
 800dcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 800dcc2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800dcc6:	2b01      	cmp	r3, #1
 800dcc8:	f000 8150 	beq.w	800df6c <HAL_TIM_ConfigClockSource+0x2ac>
 800dccc:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800dcce:	2302      	movs	r3, #2
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800dcd4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800dcd8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800dcdc:	680b      	ldr	r3, [r1, #0]
 800dcde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dce2:	bf18      	it	ne
 800dce4:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800dce8:	bf14      	ite	ne
 800dcea:	2201      	movne	r2, #1
 800dcec:	2200      	moveq	r2, #0
 800dcee:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800dcf2:	bf08      	it	eq
 800dcf4:	2200      	moveq	r2, #0
 800dcf6:	b112      	cbz	r2, 800dcfe <HAL_TIM_ConfigClockSource+0x3e>
 800dcf8:	2940      	cmp	r1, #64	; 0x40
 800dcfa:	f040 824a 	bne.w	800e192 <HAL_TIM_ConfigClockSource+0x4d2>
  tmpsmcr = htim->Instance->SMCR;
 800dcfe:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800dd00:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd02:	499b      	ldr	r1, [pc, #620]	; (800df70 <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800dd04:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dd06:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800dd0a:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800dd0c:	f000 813c 	beq.w	800df88 <HAL_TIM_ConfigClockSource+0x2c8>
 800dd10:	d854      	bhi.n	800ddbc <HAL_TIM_ConfigClockSource+0xfc>
 800dd12:	2b40      	cmp	r3, #64	; 0x40
 800dd14:	f000 81d9 	beq.w	800e0ca <HAL_TIM_ConfigClockSource+0x40a>
 800dd18:	f240 80a6 	bls.w	800de68 <HAL_TIM_ConfigClockSource+0x1a8>
 800dd1c:	2b50      	cmp	r3, #80	; 0x50
 800dd1e:	f040 809b 	bne.w	800de58 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800dd22:	4b94      	ldr	r3, [pc, #592]	; (800df74 <HAL_TIM_ConfigClockSource+0x2b4>)
 800dd24:	4994      	ldr	r1, [pc, #592]	; (800df78 <HAL_TIM_ConfigClockSource+0x2b8>)
 800dd26:	429a      	cmp	r2, r3
 800dd28:	bf18      	it	ne
 800dd2a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800dd2e:	4893      	ldr	r0, [pc, #588]	; (800df7c <HAL_TIM_ConfigClockSource+0x2bc>)
 800dd30:	bf14      	ite	ne
 800dd32:	2301      	movne	r3, #1
 800dd34:	2300      	moveq	r3, #0
 800dd36:	428a      	cmp	r2, r1
 800dd38:	bf0c      	ite	eq
 800dd3a:	2300      	moveq	r3, #0
 800dd3c:	f003 0301 	andne.w	r3, r3, #1
 800dd40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dd44:	4282      	cmp	r2, r0
 800dd46:	bf0c      	ite	eq
 800dd48:	2300      	moveq	r3, #0
 800dd4a:	f003 0301 	andne.w	r3, r3, #1
 800dd4e:	428a      	cmp	r2, r1
 800dd50:	bf0c      	ite	eq
 800dd52:	2300      	moveq	r3, #0
 800dd54:	f003 0301 	andne.w	r3, r3, #1
 800dd58:	b11b      	cbz	r3, 800dd62 <HAL_TIM_ConfigClockSource+0xa2>
 800dd5a:	4b89      	ldr	r3, [pc, #548]	; (800df80 <HAL_TIM_ConfigClockSource+0x2c0>)
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	f040 8212 	bne.w	800e186 <HAL_TIM_ConfigClockSource+0x4c6>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800dd62:	686b      	ldr	r3, [r5, #4]
 800dd64:	2b0a      	cmp	r3, #10
 800dd66:	bf18      	it	ne
 800dd68:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800dd6c:	d003      	beq.n	800dd76 <HAL_TIM_ConfigClockSource+0xb6>
 800dd6e:	f033 0302 	bics.w	r3, r3, #2
 800dd72:	f040 8256 	bne.w	800e222 <HAL_TIM_ConfigClockSource+0x562>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800dd76:	68ef      	ldr	r7, [r5, #12]
 800dd78:	2f0f      	cmp	r7, #15
 800dd7a:	f200 8226 	bhi.w	800e1ca <HAL_TIM_ConfigClockSource+0x50a>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd7e:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dd80:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dd82:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800dd84:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd86:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dd88:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd8c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800dd90:	4331      	orrs	r1, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dd92:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dd94:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dd96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dd9a:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800dd9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dda0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800dda2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800dda4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dda8:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800ddac:	609a      	str	r2, [r3, #8]
  htim->State = HAL_TIM_STATE_READY;
 800ddae:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800ddb0:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800ddb2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800ddb6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800ddbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ddc0:	f000 812a 	beq.w	800e018 <HAL_TIM_ConfigClockSource+0x358>
 800ddc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ddc8:	d17c      	bne.n	800dec4 <HAL_TIM_ConfigClockSource+0x204>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800ddca:	4b6a      	ldr	r3, [pc, #424]	; (800df74 <HAL_TIM_ConfigClockSource+0x2b4>)
 800ddcc:	496a      	ldr	r1, [pc, #424]	; (800df78 <HAL_TIM_ConfigClockSource+0x2b8>)
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	bf18      	it	ne
 800ddd2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ddd6:	4869      	ldr	r0, [pc, #420]	; (800df7c <HAL_TIM_ConfigClockSource+0x2bc>)
 800ddd8:	bf14      	ite	ne
 800ddda:	2301      	movne	r3, #1
 800dddc:	2300      	moveq	r3, #0
 800ddde:	428a      	cmp	r2, r1
 800dde0:	bf0c      	ite	eq
 800dde2:	2300      	moveq	r3, #0
 800dde4:	f003 0301 	andne.w	r3, r3, #1
 800dde8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ddec:	4282      	cmp	r2, r0
 800ddee:	bf0c      	ite	eq
 800ddf0:	2300      	moveq	r3, #0
 800ddf2:	f003 0301 	andne.w	r3, r3, #1
 800ddf6:	428a      	cmp	r2, r1
 800ddf8:	bf0c      	ite	eq
 800ddfa:	2300      	moveq	r3, #0
 800ddfc:	f003 0301 	andne.w	r3, r3, #1
 800de00:	b11b      	cbz	r3, 800de0a <HAL_TIM_ConfigClockSource+0x14a>
 800de02:	4b5f      	ldr	r3, [pc, #380]	; (800df80 <HAL_TIM_ConfigClockSource+0x2c0>)
 800de04:	429a      	cmp	r2, r3
 800de06:	f040 81b0 	bne.w	800e16a <HAL_TIM_ConfigClockSource+0x4aa>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800de0a:	68ab      	ldr	r3, [r5, #8]
 800de0c:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800de10:	f040 81e9 	bne.w	800e1e6 <HAL_TIM_ConfigClockSource+0x526>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800de14:	686b      	ldr	r3, [r5, #4]
 800de16:	2b0a      	cmp	r3, #10
 800de18:	bf18      	it	ne
 800de1a:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800de1e:	d003      	beq.n	800de28 <HAL_TIM_ConfigClockSource+0x168>
 800de20:	f033 0302 	bics.w	r3, r3, #2
 800de24:	f040 8203 	bne.w	800e22e <HAL_TIM_ConfigClockSource+0x56e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800de28:	68ee      	ldr	r6, [r5, #12]
 800de2a:	2e0f      	cmp	r6, #15
 800de2c:	f200 81c6 	bhi.w	800e1bc <HAL_TIM_ConfigClockSource+0x4fc>
      TIM_ETR_SetConfig(htim->Instance,
 800de30:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800de32:	2000      	movs	r0, #0
 800de34:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800de36:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de38:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800de3a:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800de3e:	432b      	orrs	r3, r5
 800de40:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800de42:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800de46:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800de48:	6893      	ldr	r3, [r2, #8]
 800de4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800de4e:	6093      	str	r3, [r2, #8]
      break;
 800de50:	e003      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
  switch (sClockSourceConfig->ClockSource)
 800de52:	f033 0110 	bics.w	r1, r3, #16
 800de56:	d00c      	beq.n	800de72 <HAL_TIM_ConfigClockSource+0x1b2>
 800de58:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800de5a:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800de5c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800de5e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800de62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800de66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 800de68:	2b20      	cmp	r3, #32
 800de6a:	d002      	beq.n	800de72 <HAL_TIM_ConfigClockSource+0x1b2>
 800de6c:	d9f1      	bls.n	800de52 <HAL_TIM_ConfigClockSource+0x192>
 800de6e:	2b30      	cmp	r3, #48	; 0x30
 800de70:	d1f2      	bne.n	800de58 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800de72:	4940      	ldr	r1, [pc, #256]	; (800df74 <HAL_TIM_ConfigClockSource+0x2b4>)
 800de74:	4840      	ldr	r0, [pc, #256]	; (800df78 <HAL_TIM_ConfigClockSource+0x2b8>)
 800de76:	428a      	cmp	r2, r1
 800de78:	bf18      	it	ne
 800de7a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800de7e:	4e3f      	ldr	r6, [pc, #252]	; (800df7c <HAL_TIM_ConfigClockSource+0x2bc>)
 800de80:	bf14      	ite	ne
 800de82:	2101      	movne	r1, #1
 800de84:	2100      	moveq	r1, #0
 800de86:	4282      	cmp	r2, r0
 800de88:	bf0c      	ite	eq
 800de8a:	2100      	moveq	r1, #0
 800de8c:	f001 0101 	andne.w	r1, r1, #1
 800de90:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800de94:	42b2      	cmp	r2, r6
 800de96:	bf0c      	ite	eq
 800de98:	2100      	moveq	r1, #0
 800de9a:	f001 0101 	andne.w	r1, r1, #1
 800de9e:	4282      	cmp	r2, r0
 800dea0:	bf0c      	ite	eq
 800dea2:	2100      	moveq	r1, #0
 800dea4:	f001 0101 	andne.w	r1, r1, #1
 800dea8:	b119      	cbz	r1, 800deb2 <HAL_TIM_ConfigClockSource+0x1f2>
 800deaa:	4935      	ldr	r1, [pc, #212]	; (800df80 <HAL_TIM_ConfigClockSource+0x2c0>)
 800deac:	428a      	cmp	r2, r1
 800deae:	f040 8162 	bne.w	800e176 <HAL_TIM_ConfigClockSource+0x4b6>
  tmpsmcr = TIMx->SMCR;
 800deb2:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800deb4:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800deb6:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800deba:	430b      	orrs	r3, r1
 800debc:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800dec0:	6093      	str	r3, [r2, #8]
}
 800dec2:	e7ca      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
  switch (sClockSourceConfig->ClockSource)
 800dec4:	2b70      	cmp	r3, #112	; 0x70
 800dec6:	d1c7      	bne.n	800de58 <HAL_TIM_ConfigClockSource+0x198>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800dec8:	4b2a      	ldr	r3, [pc, #168]	; (800df74 <HAL_TIM_ConfigClockSource+0x2b4>)
 800deca:	492b      	ldr	r1, [pc, #172]	; (800df78 <HAL_TIM_ConfigClockSource+0x2b8>)
 800decc:	429a      	cmp	r2, r3
 800dece:	bf18      	it	ne
 800ded0:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ded4:	4829      	ldr	r0, [pc, #164]	; (800df7c <HAL_TIM_ConfigClockSource+0x2bc>)
 800ded6:	bf14      	ite	ne
 800ded8:	2301      	movne	r3, #1
 800deda:	2300      	moveq	r3, #0
 800dedc:	428a      	cmp	r2, r1
 800dede:	bf0c      	ite	eq
 800dee0:	2300      	moveq	r3, #0
 800dee2:	f003 0301 	andne.w	r3, r3, #1
 800dee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800deea:	4282      	cmp	r2, r0
 800deec:	bf0c      	ite	eq
 800deee:	2300      	moveq	r3, #0
 800def0:	f003 0301 	andne.w	r3, r3, #1
 800def4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800def8:	428a      	cmp	r2, r1
 800defa:	bf0c      	ite	eq
 800defc:	2300      	moveq	r3, #0
 800defe:	f003 0301 	andne.w	r3, r3, #1
 800df02:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800df06:	4282      	cmp	r2, r0
 800df08:	bf0c      	ite	eq
 800df0a:	2300      	moveq	r3, #0
 800df0c:	f003 0301 	andne.w	r3, r3, #1
 800df10:	428a      	cmp	r2, r1
 800df12:	bf0c      	ite	eq
 800df14:	2300      	moveq	r3, #0
 800df16:	f003 0301 	andne.w	r3, r3, #1
 800df1a:	b11b      	cbz	r3, 800df24 <HAL_TIM_ConfigClockSource+0x264>
 800df1c:	4b19      	ldr	r3, [pc, #100]	; (800df84 <HAL_TIM_ConfigClockSource+0x2c4>)
 800df1e:	429a      	cmp	r2, r3
 800df20:	f040 818b 	bne.w	800e23a <HAL_TIM_ConfigClockSource+0x57a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800df24:	68ab      	ldr	r3, [r5, #8]
 800df26:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800df2a:	f040 8162 	bne.w	800e1f2 <HAL_TIM_ConfigClockSource+0x532>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800df2e:	686b      	ldr	r3, [r5, #4]
 800df30:	2b0a      	cmp	r3, #10
 800df32:	bf18      	it	ne
 800df34:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800df38:	d003      	beq.n	800df42 <HAL_TIM_ConfigClockSource+0x282>
 800df3a:	f033 0302 	bics.w	r3, r3, #2
 800df3e:	f040 815e 	bne.w	800e1fe <HAL_TIM_ConfigClockSource+0x53e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800df42:	68ee      	ldr	r6, [r5, #12]
 800df44:	2e0f      	cmp	r6, #15
 800df46:	f200 8147 	bhi.w	800e1d8 <HAL_TIM_ConfigClockSource+0x518>
      TIM_ETR_SetConfig(htim->Instance,
 800df4a:	6822      	ldr	r2, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800df4c:	2000      	movs	r0, #0
 800df4e:	68ab      	ldr	r3, [r5, #8]
  tmpsmcr = TIMx->SMCR;
 800df50:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df52:	686d      	ldr	r5, [r5, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df54:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800df58:	432b      	orrs	r3, r5
 800df5a:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df5c:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800df60:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800df62:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800df64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800df68:	6093      	str	r3, [r2, #8]
      break;
 800df6a:	e776      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
  __HAL_LOCK(htim);
 800df6c:	2002      	movs	r0, #2
}
 800df6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df70:	fffe0088 	.word	0xfffe0088
 800df74:	40010000 	.word	0x40010000
 800df78:	40000400 	.word	0x40000400
 800df7c:	40000800 	.word	0x40000800
 800df80:	40010400 	.word	0x40010400
 800df84:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800df88:	4bb2      	ldr	r3, [pc, #712]	; (800e254 <HAL_TIM_ConfigClockSource+0x594>)
 800df8a:	49b3      	ldr	r1, [pc, #716]	; (800e258 <HAL_TIM_ConfigClockSource+0x598>)
 800df8c:	429a      	cmp	r2, r3
 800df8e:	bf18      	it	ne
 800df90:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800df94:	48b1      	ldr	r0, [pc, #708]	; (800e25c <HAL_TIM_ConfigClockSource+0x59c>)
 800df96:	bf14      	ite	ne
 800df98:	2301      	movne	r3, #1
 800df9a:	2300      	moveq	r3, #0
 800df9c:	428a      	cmp	r2, r1
 800df9e:	bf0c      	ite	eq
 800dfa0:	2300      	moveq	r3, #0
 800dfa2:	f003 0301 	andne.w	r3, r3, #1
 800dfa6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800dfaa:	4282      	cmp	r2, r0
 800dfac:	bf0c      	ite	eq
 800dfae:	2300      	moveq	r3, #0
 800dfb0:	f003 0301 	andne.w	r3, r3, #1
 800dfb4:	428a      	cmp	r2, r1
 800dfb6:	bf0c      	ite	eq
 800dfb8:	2300      	moveq	r3, #0
 800dfba:	f003 0301 	andne.w	r3, r3, #1
 800dfbe:	b11b      	cbz	r3, 800dfc8 <HAL_TIM_ConfigClockSource+0x308>
 800dfc0:	4ba7      	ldr	r3, [pc, #668]	; (800e260 <HAL_TIM_ConfigClockSource+0x5a0>)
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	f040 80cb 	bne.w	800e15e <HAL_TIM_ConfigClockSource+0x49e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800dfc8:	686b      	ldr	r3, [r5, #4]
 800dfca:	2b0a      	cmp	r3, #10
 800dfcc:	bf18      	it	ne
 800dfce:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800dfd2:	d003      	beq.n	800dfdc <HAL_TIM_ConfigClockSource+0x31c>
 800dfd4:	f033 0302 	bics.w	r3, r3, #2
 800dfd8:	f040 811d 	bne.w	800e216 <HAL_TIM_ConfigClockSource+0x556>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800dfdc:	68ee      	ldr	r6, [r5, #12]
 800dfde:	2e0f      	cmp	r6, #15
 800dfe0:	f200 80e5 	bhi.w	800e1ae <HAL_TIM_ConfigClockSource+0x4ee>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfe4:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800dfe6:	2000      	movs	r0, #0
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dfe8:	686f      	ldr	r7, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dfea:	6a1d      	ldr	r5, [r3, #32]
 800dfec:	f025 0510 	bic.w	r5, r5, #16
 800dff0:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dff2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800dff4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dff6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dffa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dffe:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800e002:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800e006:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800e008:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800e00a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e00c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e010:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800e014:	609a      	str	r2, [r3, #8]
}
 800e016:	e720      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e018:	4b8e      	ldr	r3, [pc, #568]	; (800e254 <HAL_TIM_ConfigClockSource+0x594>)
 800e01a:	488f      	ldr	r0, [pc, #572]	; (800e258 <HAL_TIM_ConfigClockSource+0x598>)
 800e01c:	429a      	cmp	r2, r3
 800e01e:	bf18      	it	ne
 800e020:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e024:	498d      	ldr	r1, [pc, #564]	; (800e25c <HAL_TIM_ConfigClockSource+0x59c>)
 800e026:	4d8f      	ldr	r5, [pc, #572]	; (800e264 <HAL_TIM_ConfigClockSource+0x5a4>)
 800e028:	bf14      	ite	ne
 800e02a:	2301      	movne	r3, #1
 800e02c:	2300      	moveq	r3, #0
 800e02e:	4282      	cmp	r2, r0
 800e030:	bf0c      	ite	eq
 800e032:	2300      	moveq	r3, #0
 800e034:	f003 0301 	andne.w	r3, r3, #1
 800e038:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e03c:	428a      	cmp	r2, r1
 800e03e:	bf0c      	ite	eq
 800e040:	2300      	moveq	r3, #0
 800e042:	f003 0301 	andne.w	r3, r3, #1
 800e046:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e04a:	42aa      	cmp	r2, r5
 800e04c:	bf0c      	ite	eq
 800e04e:	2300      	moveq	r3, #0
 800e050:	f003 0301 	andne.w	r3, r3, #1
 800e054:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800e058:	4282      	cmp	r2, r0
 800e05a:	bf0c      	ite	eq
 800e05c:	2300      	moveq	r3, #0
 800e05e:	f003 0301 	andne.w	r3, r3, #1
 800e062:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800e066:	428a      	cmp	r2, r1
 800e068:	bf0c      	ite	eq
 800e06a:	2300      	moveq	r3, #0
 800e06c:	f003 0301 	andne.w	r3, r3, #1
 800e070:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800e074:	42aa      	cmp	r2, r5
 800e076:	bf0c      	ite	eq
 800e078:	2300      	moveq	r3, #0
 800e07a:	f003 0301 	andne.w	r3, r3, #1
 800e07e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800e082:	4282      	cmp	r2, r0
 800e084:	bf0c      	ite	eq
 800e086:	2300      	moveq	r3, #0
 800e088:	f003 0301 	andne.w	r3, r3, #1
 800e08c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e090:	428a      	cmp	r2, r1
 800e092:	bf0c      	ite	eq
 800e094:	2300      	moveq	r3, #0
 800e096:	f003 0301 	andne.w	r3, r3, #1
 800e09a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800e09e:	42aa      	cmp	r2, r5
 800e0a0:	bf0c      	ite	eq
 800e0a2:	2300      	moveq	r3, #0
 800e0a4:	f003 0301 	andne.w	r3, r3, #1
 800e0a8:	4282      	cmp	r2, r0
 800e0aa:	bf0c      	ite	eq
 800e0ac:	2300      	moveq	r3, #0
 800e0ae:	f003 0301 	andne.w	r3, r3, #1
 800e0b2:	428a      	cmp	r2, r1
 800e0b4:	bf0c      	ite	eq
 800e0b6:	2300      	moveq	r3, #0
 800e0b8:	f003 0301 	andne.w	r3, r3, #1
 800e0bc:	b11b      	cbz	r3, 800e0c6 <HAL_TIM_ConfigClockSource+0x406>
 800e0be:	4b6a      	ldr	r3, [pc, #424]	; (800e268 <HAL_TIM_ConfigClockSource+0x5a8>)
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	f040 80c0 	bne.w	800e246 <HAL_TIM_ConfigClockSource+0x586>
  HAL_StatusTypeDef status = HAL_OK;
 800e0c6:	2000      	movs	r0, #0
 800e0c8:	e6c7      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e0ca:	4b62      	ldr	r3, [pc, #392]	; (800e254 <HAL_TIM_ConfigClockSource+0x594>)
 800e0cc:	4962      	ldr	r1, [pc, #392]	; (800e258 <HAL_TIM_ConfigClockSource+0x598>)
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	bf18      	it	ne
 800e0d2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e0d6:	4861      	ldr	r0, [pc, #388]	; (800e25c <HAL_TIM_ConfigClockSource+0x59c>)
 800e0d8:	bf14      	ite	ne
 800e0da:	2301      	movne	r3, #1
 800e0dc:	2300      	moveq	r3, #0
 800e0de:	428a      	cmp	r2, r1
 800e0e0:	bf0c      	ite	eq
 800e0e2:	2300      	moveq	r3, #0
 800e0e4:	f003 0301 	andne.w	r3, r3, #1
 800e0e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800e0ec:	4282      	cmp	r2, r0
 800e0ee:	bf0c      	ite	eq
 800e0f0:	2300      	moveq	r3, #0
 800e0f2:	f003 0301 	andne.w	r3, r3, #1
 800e0f6:	428a      	cmp	r2, r1
 800e0f8:	bf0c      	ite	eq
 800e0fa:	2300      	moveq	r3, #0
 800e0fc:	f003 0301 	andne.w	r3, r3, #1
 800e100:	b113      	cbz	r3, 800e108 <HAL_TIM_ConfigClockSource+0x448>
 800e102:	4b57      	ldr	r3, [pc, #348]	; (800e260 <HAL_TIM_ConfigClockSource+0x5a0>)
 800e104:	429a      	cmp	r2, r3
 800e106:	d124      	bne.n	800e152 <HAL_TIM_ConfigClockSource+0x492>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e108:	686b      	ldr	r3, [r5, #4]
 800e10a:	2b0a      	cmp	r3, #10
 800e10c:	bf18      	it	ne
 800e10e:	f5b3 4f00 	cmpne.w	r3, #32768	; 0x8000
 800e112:	d002      	beq.n	800e11a <HAL_TIM_ConfigClockSource+0x45a>
 800e114:	f033 0302 	bics.w	r3, r3, #2
 800e118:	d177      	bne.n	800e20a <HAL_TIM_ConfigClockSource+0x54a>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e11a:	68ef      	ldr	r7, [r5, #12]
 800e11c:	2f0f      	cmp	r7, #15
 800e11e:	d83f      	bhi.n	800e1a0 <HAL_TIM_ConfigClockSource+0x4e0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e120:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e122:	2000      	movs	r0, #0
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e124:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800e126:	6a1e      	ldr	r6, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e128:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e12a:	f026 060a 	bic.w	r6, r6, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e12e:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800e132:	4331      	orrs	r1, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e134:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e136:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e138:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e13c:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800e140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e142:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800e144:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800e146:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e14a:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800e14e:	609a      	str	r2, [r3, #8]
}
 800e150:	e683      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e152:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800e156:	4845      	ldr	r0, [pc, #276]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e158:	f7f5 fdf0 	bl	8003d3c <assert_failed>
 800e15c:	e7d4      	b.n	800e108 <HAL_TIM_ConfigClockSource+0x448>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e15e:	f241 5193 	movw	r1, #5523	; 0x1593
 800e162:	4842      	ldr	r0, [pc, #264]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e164:	f7f5 fdea 	bl	8003d3c <assert_failed>
 800e168:	e72e      	b.n	800dfc8 <HAL_TIM_ConfigClockSource+0x308>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800e16a:	f241 516f 	movw	r1, #5487	; 0x156f
 800e16e:	483f      	ldr	r0, [pc, #252]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e170:	f7f5 fde4 	bl	8003d3c <assert_failed>
 800e174:	e649      	b.n	800de0a <HAL_TIM_ConfigClockSource+0x14a>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800e176:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800e17a:	483c      	ldr	r0, [pc, #240]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e17c:	f7f5 fdde 	bl	8003d3c <assert_failed>
 800e180:	682b      	ldr	r3, [r5, #0]
 800e182:	6822      	ldr	r2, [r4, #0]
 800e184:	e695      	b.n	800deb2 <HAL_TIM_ConfigClockSource+0x1f2>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800e186:	f241 5183 	movw	r1, #5507	; 0x1583
 800e18a:	4838      	ldr	r0, [pc, #224]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e18c:	f7f5 fdd6 	bl	8003d3c <assert_failed>
 800e190:	e5e7      	b.n	800dd62 <HAL_TIM_ConfigClockSource+0xa2>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800e192:	f241 5144 	movw	r1, #5444	; 0x1544
 800e196:	4835      	ldr	r0, [pc, #212]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e198:	f7f5 fdd0 	bl	8003d3c <assert_failed>
 800e19c:	682b      	ldr	r3, [r5, #0]
 800e19e:	e5ae      	b.n	800dcfe <HAL_TIM_ConfigClockSource+0x3e>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e1a0:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800e1a4:	4831      	ldr	r0, [pc, #196]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1a6:	f7f5 fdc9 	bl	8003d3c <assert_failed>
 800e1aa:	68ef      	ldr	r7, [r5, #12]
 800e1ac:	e7b8      	b.n	800e120 <HAL_TIM_ConfigClockSource+0x460>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e1ae:	f241 5197 	movw	r1, #5527	; 0x1597
 800e1b2:	482e      	ldr	r0, [pc, #184]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1b4:	f7f5 fdc2 	bl	8003d3c <assert_failed>
 800e1b8:	68ee      	ldr	r6, [r5, #12]
 800e1ba:	e713      	b.n	800dfe4 <HAL_TIM_ConfigClockSource+0x324>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e1bc:	f241 5174 	movw	r1, #5492	; 0x1574
 800e1c0:	482a      	ldr	r0, [pc, #168]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1c2:	f7f5 fdbb 	bl	8003d3c <assert_failed>
 800e1c6:	68ee      	ldr	r6, [r5, #12]
 800e1c8:	e632      	b.n	800de30 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e1ca:	f241 5187 	movw	r1, #5511	; 0x1587
 800e1ce:	4827      	ldr	r0, [pc, #156]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1d0:	f7f5 fdb4 	bl	8003d3c <assert_failed>
 800e1d4:	68ef      	ldr	r7, [r5, #12]
 800e1d6:	e5d2      	b.n	800dd7e <HAL_TIM_ConfigClockSource+0xbe>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800e1d8:	f241 515c 	movw	r1, #5468	; 0x155c
 800e1dc:	4823      	ldr	r0, [pc, #140]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1de:	f7f5 fdad 	bl	8003d3c <assert_failed>
 800e1e2:	68ee      	ldr	r6, [r5, #12]
 800e1e4:	e6b1      	b.n	800df4a <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e1e6:	f241 5172 	movw	r1, #5490	; 0x1572
 800e1ea:	4820      	ldr	r0, [pc, #128]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1ec:	f7f5 fda6 	bl	8003d3c <assert_failed>
 800e1f0:	e610      	b.n	800de14 <HAL_TIM_ConfigClockSource+0x154>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800e1f2:	f241 515a 	movw	r1, #5466	; 0x155a
 800e1f6:	481d      	ldr	r0, [pc, #116]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e1f8:	f7f5 fda0 	bl	8003d3c <assert_failed>
 800e1fc:	e697      	b.n	800df2e <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e1fe:	f241 515b 	movw	r1, #5467	; 0x155b
 800e202:	481a      	ldr	r0, [pc, #104]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e204:	f7f5 fd9a 	bl	8003d3c <assert_failed>
 800e208:	e69b      	b.n	800df42 <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e20a:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800e20e:	4817      	ldr	r0, [pc, #92]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e210:	f7f5 fd94 	bl	8003d3c <assert_failed>
 800e214:	e781      	b.n	800e11a <HAL_TIM_ConfigClockSource+0x45a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e216:	f241 5196 	movw	r1, #5526	; 0x1596
 800e21a:	4814      	ldr	r0, [pc, #80]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e21c:	f7f5 fd8e 	bl	8003d3c <assert_failed>
 800e220:	e6dc      	b.n	800dfdc <HAL_TIM_ConfigClockSource+0x31c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e222:	f241 5186 	movw	r1, #5510	; 0x1586
 800e226:	4811      	ldr	r0, [pc, #68]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e228:	f7f5 fd88 	bl	8003d3c <assert_failed>
 800e22c:	e5a3      	b.n	800dd76 <HAL_TIM_ConfigClockSource+0xb6>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800e22e:	f241 5173 	movw	r1, #5491	; 0x1573
 800e232:	480e      	ldr	r0, [pc, #56]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e234:	f7f5 fd82 	bl	8003d3c <assert_failed>
 800e238:	e5f6      	b.n	800de28 <HAL_TIM_ConfigClockSource+0x168>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800e23a:	f241 5157 	movw	r1, #5463	; 0x1557
 800e23e:	480b      	ldr	r0, [pc, #44]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e240:	f7f5 fd7c 	bl	8003d3c <assert_failed>
 800e244:	e66e      	b.n	800df24 <HAL_TIM_ConfigClockSource+0x264>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e246:	4809      	ldr	r0, [pc, #36]	; (800e26c <HAL_TIM_ConfigClockSource+0x5ac>)
 800e248:	f241 5150 	movw	r1, #5456	; 0x1550
 800e24c:	f7f5 fd76 	bl	8003d3c <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800e250:	2000      	movs	r0, #0
 800e252:	e602      	b.n	800de5a <HAL_TIM_ConfigClockSource+0x19a>
 800e254:	40010000 	.word	0x40010000
 800e258:	40000400 	.word	0x40000400
 800e25c:	40000800 	.word	0x40000800
 800e260:	40010400 	.word	0x40010400
 800e264:	40000c00 	.word	0x40000c00
 800e268:	40002000 	.word	0x40002000
 800e26c:	08029a64 	.word	0x08029a64

0800e270 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800e270:	6802      	ldr	r2, [r0, #0]
 800e272:	f8df c100 	ldr.w	ip, [pc, #256]	; 800e374 <HAL_TIM_SlaveConfigSynchro+0x104>
{
 800e276:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800e278:	4b37      	ldr	r3, [pc, #220]	; (800e358 <HAL_TIM_SlaveConfigSynchro+0xe8>)
{
 800e27a:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800e27c:	4f37      	ldr	r7, [pc, #220]	; (800e35c <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800e27e:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800e280:	429a      	cmp	r2, r3
 800e282:	bf18      	it	ne
 800e284:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e288:	4e35      	ldr	r6, [pc, #212]	; (800e360 <HAL_TIM_SlaveConfigSynchro+0xf0>)
 800e28a:	4836      	ldr	r0, [pc, #216]	; (800e364 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800e28c:	bf14      	ite	ne
 800e28e:	2301      	movne	r3, #1
 800e290:	2300      	moveq	r3, #0
 800e292:	4935      	ldr	r1, [pc, #212]	; (800e368 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800e294:	4562      	cmp	r2, ip
 800e296:	bf0c      	ite	eq
 800e298:	2300      	moveq	r3, #0
 800e29a:	f003 0301 	andne.w	r3, r3, #1
 800e29e:	42ba      	cmp	r2, r7
 800e2a0:	bf0c      	ite	eq
 800e2a2:	2300      	moveq	r3, #0
 800e2a4:	f003 0301 	andne.w	r3, r3, #1
 800e2a8:	42b2      	cmp	r2, r6
 800e2aa:	bf0c      	ite	eq
 800e2ac:	2300      	moveq	r3, #0
 800e2ae:	f003 0301 	andne.w	r3, r3, #1
 800e2b2:	4282      	cmp	r2, r0
 800e2b4:	bf0c      	ite	eq
 800e2b6:	2300      	moveq	r3, #0
 800e2b8:	f003 0301 	andne.w	r3, r3, #1
 800e2bc:	428a      	cmp	r2, r1
 800e2be:	bf0c      	ite	eq
 800e2c0:	2300      	moveq	r3, #0
 800e2c2:	f003 0301 	andne.w	r3, r3, #1
 800e2c6:	b113      	cbz	r3, 800e2ce <HAL_TIM_SlaveConfigSynchro+0x5e>
 800e2c8:	4b28      	ldr	r3, [pc, #160]	; (800e36c <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800e2ca:	429a      	cmp	r2, r3
 800e2cc:	d138      	bne.n	800e340 <HAL_TIM_SlaveConfigSynchro+0xd0>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800e2ce:	682b      	ldr	r3, [r5, #0]
 800e2d0:	1f1a      	subs	r2, r3, #4
 800e2d2:	2a03      	cmp	r2, #3
 800e2d4:	d902      	bls.n	800e2dc <HAL_TIM_SlaveConfigSynchro+0x6c>
 800e2d6:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800e2da:	d12b      	bne.n	800e334 <HAL_TIM_SlaveConfigSynchro+0xc4>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800e2dc:	686b      	ldr	r3, [r5, #4]
 800e2de:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800e2e2:	2b40      	cmp	r3, #64	; 0x40
 800e2e4:	d000      	beq.n	800e2e8 <HAL_TIM_SlaveConfigSynchro+0x78>
 800e2e6:	bb8b      	cbnz	r3, 800e34c <HAL_TIM_SlaveConfigSynchro+0xdc>
  __HAL_LOCK(htim);
 800e2e8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d01f      	beq.n	800e330 <HAL_TIM_SlaveConfigSynchro+0xc0>
 800e2f0:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800e2f2:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800e2f4:	4629      	mov	r1, r5
 800e2f6:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800e2f8:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800e2fc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800e300:	f7ff f938 	bl	800d574 <TIM_SlaveTimer_SetConfig>
 800e304:	b968      	cbnz	r0, 800e322 <HAL_TIM_SlaveConfigSynchro+0xb2>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800e306:	6823      	ldr	r3, [r4, #0]
 800e308:	68da      	ldr	r2, [r3, #12]
 800e30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e30e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800e310:	68da      	ldr	r2, [r3, #12]
 800e312:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e316:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800e318:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800e31c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800e320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800e322:	2300      	movs	r3, #0
    return HAL_ERROR;
 800e324:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800e326:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800e32a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800e32e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800e330:	2002      	movs	r0, #2
}
 800e332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800e334:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800e338:	480d      	ldr	r0, [pc, #52]	; (800e370 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800e33a:	f7f5 fcff 	bl	8003d3c <assert_failed>
 800e33e:	e7cd      	b.n	800e2dc <HAL_TIM_SlaveConfigSynchro+0x6c>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800e340:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800e344:	480a      	ldr	r0, [pc, #40]	; (800e370 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800e346:	f7f5 fcf9 	bl	8003d3c <assert_failed>
 800e34a:	e7c0      	b.n	800e2ce <HAL_TIM_SlaveConfigSynchro+0x5e>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800e34c:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800e350:	4807      	ldr	r0, [pc, #28]	; (800e370 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800e352:	f7f5 fcf3 	bl	8003d3c <assert_failed>
 800e356:	e7c7      	b.n	800e2e8 <HAL_TIM_SlaveConfigSynchro+0x78>
 800e358:	40010000 	.word	0x40010000
 800e35c:	40000800 	.word	0x40000800
 800e360:	40000c00 	.word	0x40000c00
 800e364:	40010400 	.word	0x40010400
 800e368:	40014000 	.word	0x40014000
 800e36c:	40001800 	.word	0x40001800
 800e370:	08029a64 	.word	0x08029a64
 800e374:	40000400 	.word	0x40000400

0800e378 <HAL_TIM_OC_DelayElapsedCallback>:
 800e378:	4770      	bx	lr
 800e37a:	bf00      	nop

0800e37c <TIM_DMACaptureCplt>:
{
 800e37c:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e37e:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e380:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e382:	4283      	cmp	r3, r0
 800e384:	d01e      	beq.n	800e3c4 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e388:	4283      	cmp	r3, r0
 800e38a:	d00b      	beq.n	800e3a4 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e38c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e38e:	4283      	cmp	r3, r0
 800e390:	d027      	beq.n	800e3e2 <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e392:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e394:	4283      	cmp	r3, r0
 800e396:	d02f      	beq.n	800e3f8 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800e398:	4620      	mov	r0, r4
 800e39a:	f7f4 fbd1 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	7723      	strb	r3, [r4, #28]
}
 800e3a2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800e3a8:	69db      	ldr	r3, [r3, #28]
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d1f4      	bne.n	800e398 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3ae:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800e3b0:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3b2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800e3ba:	f7f4 fbc1 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	7723      	strb	r3, [r4, #28]
}
 800e3c2:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800e3c8:	69db      	ldr	r3, [r3, #28]
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d1e4      	bne.n	800e398 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3ce:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800e3d2:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e3d4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800e3d8:	f7f4 fbb2 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	7723      	strb	r3, [r4, #28]
}
 800e3e0:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e3e2:	2204      	movs	r2, #4
 800e3e4:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800e3e6:	69db      	ldr	r3, [r3, #28]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d1d5      	bne.n	800e398 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e3f2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e3f6:	e7cf      	b.n	800e398 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3f8:	2208      	movs	r2, #8
 800e3fa:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800e3fc:	69db      	ldr	r3, [r3, #28]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d1ca      	bne.n	800e398 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e402:	2301      	movs	r3, #1
 800e404:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e408:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800e40c:	e7c4      	b.n	800e398 <TIM_DMACaptureCplt+0x1c>
 800e40e:	bf00      	nop

0800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800e410:	4770      	bx	lr
 800e412:	bf00      	nop

0800e414 <TIM_DMACaptureHalfCplt>:
{
 800e414:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e416:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e418:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e41a:	4283      	cmp	r3, r0
 800e41c:	d016      	beq.n	800e44c <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e41e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e420:	4283      	cmp	r3, r0
 800e422:	d00b      	beq.n	800e43c <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e424:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e426:	4283      	cmp	r3, r0
 800e428:	d018      	beq.n	800e45c <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e42a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e42c:	4283      	cmp	r3, r0
 800e42e:	d01d      	beq.n	800e46c <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e430:	4620      	mov	r0, r4
 800e432:	f7ff ffed 	bl	800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e436:	2300      	movs	r3, #0
 800e438:	7723      	strb	r3, [r4, #28]
}
 800e43a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e43c:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e43e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e440:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e442:	f7ff ffe5 	bl	800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e446:	2300      	movs	r3, #0
 800e448:	7723      	strb	r3, [r4, #28]
}
 800e44a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e44c:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e44e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e450:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e452:	f7ff ffdd 	bl	800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e456:	2300      	movs	r3, #0
 800e458:	7723      	strb	r3, [r4, #28]
}
 800e45a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e45c:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e45e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e460:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e462:	f7ff ffd5 	bl	800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e466:	2300      	movs	r3, #0
 800e468:	7723      	strb	r3, [r4, #28]
}
 800e46a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e46c:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e46e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e470:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800e472:	f7ff ffcd 	bl	800e410 <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e476:	2300      	movs	r3, #0
 800e478:	7723      	strb	r3, [r4, #28]
}
 800e47a:	bd10      	pop	{r4, pc}

0800e47c <HAL_TIM_PWM_PulseFinishedCallback>:
 800e47c:	4770      	bx	lr
 800e47e:	bf00      	nop

0800e480 <HAL_TIM_TriggerCallback>:
 800e480:	4770      	bx	lr
 800e482:	bf00      	nop

0800e484 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e484:	6803      	ldr	r3, [r0, #0]
 800e486:	691a      	ldr	r2, [r3, #16]
 800e488:	0791      	lsls	r1, r2, #30
{
 800e48a:	b510      	push	{r4, lr}
 800e48c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e48e:	d502      	bpl.n	800e496 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e490:	68da      	ldr	r2, [r3, #12]
 800e492:	0792      	lsls	r2, r2, #30
 800e494:	d468      	bmi.n	800e568 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e496:	691a      	ldr	r2, [r3, #16]
 800e498:	0752      	lsls	r2, r2, #29
 800e49a:	d502      	bpl.n	800e4a2 <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e49c:	68da      	ldr	r2, [r3, #12]
 800e49e:	0750      	lsls	r0, r2, #29
 800e4a0:	d44f      	bmi.n	800e542 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e4a2:	691a      	ldr	r2, [r3, #16]
 800e4a4:	0711      	lsls	r1, r2, #28
 800e4a6:	d502      	bpl.n	800e4ae <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e4a8:	68da      	ldr	r2, [r3, #12]
 800e4aa:	0712      	lsls	r2, r2, #28
 800e4ac:	d437      	bmi.n	800e51e <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e4ae:	691a      	ldr	r2, [r3, #16]
 800e4b0:	06d0      	lsls	r0, r2, #27
 800e4b2:	d502      	bpl.n	800e4ba <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e4b4:	68da      	ldr	r2, [r3, #12]
 800e4b6:	06d1      	lsls	r1, r2, #27
 800e4b8:	d41e      	bmi.n	800e4f8 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e4ba:	691a      	ldr	r2, [r3, #16]
 800e4bc:	07d2      	lsls	r2, r2, #31
 800e4be:	d502      	bpl.n	800e4c6 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e4c0:	68da      	ldr	r2, [r3, #12]
 800e4c2:	07d0      	lsls	r0, r2, #31
 800e4c4:	d469      	bmi.n	800e59a <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e4c6:	691a      	ldr	r2, [r3, #16]
 800e4c8:	0611      	lsls	r1, r2, #24
 800e4ca:	d502      	bpl.n	800e4d2 <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4cc:	68da      	ldr	r2, [r3, #12]
 800e4ce:	0612      	lsls	r2, r2, #24
 800e4d0:	d46b      	bmi.n	800e5aa <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e4d2:	691a      	ldr	r2, [r3, #16]
 800e4d4:	05d0      	lsls	r0, r2, #23
 800e4d6:	d502      	bpl.n	800e4de <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e4d8:	68da      	ldr	r2, [r3, #12]
 800e4da:	0611      	lsls	r1, r2, #24
 800e4dc:	d46d      	bmi.n	800e5ba <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e4de:	691a      	ldr	r2, [r3, #16]
 800e4e0:	0652      	lsls	r2, r2, #25
 800e4e2:	d502      	bpl.n	800e4ea <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e4e4:	68da      	ldr	r2, [r3, #12]
 800e4e6:	0650      	lsls	r0, r2, #25
 800e4e8:	d46f      	bmi.n	800e5ca <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4ea:	691a      	ldr	r2, [r3, #16]
 800e4ec:	0691      	lsls	r1, r2, #26
 800e4ee:	d502      	bpl.n	800e4f6 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4f0:	68da      	ldr	r2, [r3, #12]
 800e4f2:	0692      	lsls	r2, r2, #26
 800e4f4:	d449      	bmi.n	800e58a <HAL_TIM_IRQHandler+0x106>
}
 800e4f6:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e4f8:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4fc:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800e4fe:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e500:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e502:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e504:	69db      	ldr	r3, [r3, #28]
 800e506:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e50a:	d16f      	bne.n	800e5ec <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e50c:	f7ff ff34 	bl	800e378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e510:	4620      	mov	r0, r4
 800e512:	f7ff ffb3 	bl	800e47c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e516:	2200      	movs	r2, #0
 800e518:	6823      	ldr	r3, [r4, #0]
 800e51a:	7722      	strb	r2, [r4, #28]
 800e51c:	e7cd      	b.n	800e4ba <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e51e:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e522:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800e524:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e526:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e528:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e52a:	69db      	ldr	r3, [r3, #28]
 800e52c:	079b      	lsls	r3, r3, #30
 800e52e:	d15a      	bne.n	800e5e6 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e530:	f7ff ff22 	bl	800e378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e534:	4620      	mov	r0, r4
 800e536:	f7ff ffa1 	bl	800e47c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e53a:	2200      	movs	r2, #0
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	7722      	strb	r2, [r4, #28]
 800e540:	e7b5      	b.n	800e4ae <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e542:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e546:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800e548:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e54a:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e54c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e54e:	699b      	ldr	r3, [r3, #24]
 800e550:	f413 7f40 	tst.w	r3, #768	; 0x300
 800e554:	d144      	bne.n	800e5e0 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e556:	f7ff ff0f 	bl	800e378 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e55a:	4620      	mov	r0, r4
 800e55c:	f7ff ff8e 	bl	800e47c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e560:	2200      	movs	r2, #0
 800e562:	6823      	ldr	r3, [r4, #0]
 800e564:	7722      	strb	r2, [r4, #28]
 800e566:	e79c      	b.n	800e4a2 <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e568:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e56c:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e56e:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e570:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e572:	699b      	ldr	r3, [r3, #24]
 800e574:	0799      	lsls	r1, r3, #30
 800e576:	d130      	bne.n	800e5da <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e578:	f7ff fefe 	bl	800e378 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e57c:	4620      	mov	r0, r4
 800e57e:	f7ff ff7d 	bl	800e47c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e582:	2200      	movs	r2, #0
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	7722      	strb	r2, [r4, #28]
 800e588:	e785      	b.n	800e496 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e58a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800e58e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e590:	611a      	str	r2, [r3, #16]
}
 800e592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800e596:	f001 be4b 	b.w	8010230 <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e59a:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800e59e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e5a0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800e5a2:	f7f4 fb1d 	bl	8002be0 <HAL_TIM_PeriodElapsedCallback>
 800e5a6:	6823      	ldr	r3, [r4, #0]
 800e5a8:	e78d      	b.n	800e4c6 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800e5ae:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e5b0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800e5b2:	f001 fe3f 	bl	8010234 <HAL_TIMEx_BreakCallback>
 800e5b6:	6823      	ldr	r3, [r4, #0]
 800e5b8:	e78b      	b.n	800e4d2 <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800e5be:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e5c0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800e5c2:	f001 fe39 	bl	8010238 <HAL_TIMEx_Break2Callback>
 800e5c6:	6823      	ldr	r3, [r4, #0]
 800e5c8:	e789      	b.n	800e4de <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800e5ce:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e5d0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800e5d2:	f7ff ff55 	bl	800e480 <HAL_TIM_TriggerCallback>
 800e5d6:	6823      	ldr	r3, [r4, #0]
 800e5d8:	e787      	b.n	800e4ea <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800e5da:	f7f4 fab1 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800e5de:	e7d0      	b.n	800e582 <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800e5e0:	f7f4 faae 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800e5e4:	e7bc      	b.n	800e560 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800e5e6:	f7f4 faab 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800e5ea:	e7a6      	b.n	800e53a <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800e5ec:	f7f4 faa8 	bl	8002b40 <HAL_TIM_IC_CaptureCallback>
 800e5f0:	e791      	b.n	800e516 <HAL_TIM_IRQHandler+0x92>
 800e5f2:	bf00      	nop

0800e5f4 <HAL_TIM_ErrorCallback>:
 800e5f4:	4770      	bx	lr
 800e5f6:	bf00      	nop

0800e5f8 <TIM_DMAError>:
{
 800e5f8:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e5fa:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800e5fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e5fe:	4283      	cmp	r3, r0
 800e600:	d01c      	beq.n	800e63c <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800e602:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e604:	4283      	cmp	r3, r0
 800e606:	d00e      	beq.n	800e626 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800e608:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800e60a:	4283      	cmp	r3, r0
 800e60c:	d020      	beq.n	800e650 <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800e60e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e610:	4283      	cmp	r3, r0
 800e612:	d028      	beq.n	800e666 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800e614:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800e616:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800e618:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800e61c:	f7ff ffea 	bl	800e5f4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e620:	2300      	movs	r3, #0
 800e622:	7723      	strb	r3, [r4, #28]
}
 800e624:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e626:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e628:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800e62a:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e62c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e630:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800e632:	f7ff ffdf 	bl	800e5f4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e636:	2300      	movs	r3, #0
 800e638:	7723      	strb	r3, [r4, #28]
}
 800e63a:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e63c:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800e63e:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e640:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e642:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800e646:	f7ff ffd5 	bl	800e5f4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e64a:	2300      	movs	r3, #0
 800e64c:	7723      	strb	r3, [r4, #28]
}
 800e64e:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e650:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e652:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800e654:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800e656:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e65a:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800e65c:	f7ff ffca 	bl	800e5f4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e660:	2300      	movs	r3, #0
 800e662:	7723      	strb	r3, [r4, #28]
}
 800e664:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e666:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e668:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800e66a:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800e66c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e670:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800e672:	f7ff ffbf 	bl	800e5f4 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e676:	2300      	movs	r3, #0
 800e678:	7723      	strb	r3, [r4, #28]
}
 800e67a:	bd10      	pop	{r4, pc}

0800e67c <TIM_Base_SetConfig>:
{
 800e67c:	b4f0      	push	{r4, r5, r6, r7}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e67e:	4c38      	ldr	r4, [pc, #224]	; (800e760 <TIM_Base_SetConfig+0xe4>)
 800e680:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800e684:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e686:	eba0 0404 	sub.w	r4, r0, r4
 800e68a:	fab4 f484 	clz	r4, r4
 800e68e:	ea4f 1454 	mov.w	r4, r4, lsr #5
 800e692:	d006      	beq.n	800e6a2 <TIM_Base_SetConfig+0x26>
 800e694:	b92c      	cbnz	r4, 800e6a2 <TIM_Base_SetConfig+0x26>
 800e696:	4d33      	ldr	r5, [pc, #204]	; (800e764 <TIM_Base_SetConfig+0xe8>)
 800e698:	4a33      	ldr	r2, [pc, #204]	; (800e768 <TIM_Base_SetConfig+0xec>)
 800e69a:	4290      	cmp	r0, r2
 800e69c:	bf18      	it	ne
 800e69e:	42a8      	cmpne	r0, r5
 800e6a0:	d121      	bne.n	800e6e6 <TIM_Base_SetConfig+0x6a>
 800e6a2:	4a32      	ldr	r2, [pc, #200]	; (800e76c <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e6a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800e6a8:	684d      	ldr	r5, [r1, #4]
 800e6aa:	1a82      	subs	r2, r0, r2
 800e6ac:	432b      	orrs	r3, r5
 800e6ae:	fab2 f282 	clz	r2, r2
 800e6b2:	0952      	lsrs	r2, r2, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6b4:	68ce      	ldr	r6, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800e6b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6ba:	694d      	ldr	r5, [r1, #20]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e6bc:	4333      	orrs	r3, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6be:	688f      	ldr	r7, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800e6c0:	680e      	ldr	r6, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e6c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e6c6:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800e6c8:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e6ca:	62c7      	str	r7, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800e6cc:	6286      	str	r6, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e6ce:	b924      	cbnz	r4, 800e6da <TIM_Base_SetConfig+0x5e>
 800e6d0:	b91a      	cbnz	r2, 800e6da <TIM_Base_SetConfig+0x5e>
  TIMx->EGR = TIM_EGR_UG;
 800e6d2:	2301      	movs	r3, #1
}
 800e6d4:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800e6d6:	6143      	str	r3, [r0, #20]
}
 800e6d8:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800e6da:	690b      	ldr	r3, [r1, #16]
 800e6dc:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800e6de:	2301      	movs	r3, #1
}
 800e6e0:	bcf0      	pop	{r4, r5, r6, r7}
  TIMx->EGR = TIM_EGR_UG;
 800e6e2:	6143      	str	r3, [r0, #20]
}
 800e6e4:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e6e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e6ea:	4290      	cmp	r0, r2
 800e6ec:	d024      	beq.n	800e738 <TIM_Base_SetConfig+0xbc>
 800e6ee:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800e6f2:	4290      	cmp	r0, r2
 800e6f4:	d020      	beq.n	800e738 <TIM_Base_SetConfig+0xbc>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e6f6:	4a1e      	ldr	r2, [pc, #120]	; (800e770 <TIM_Base_SetConfig+0xf4>)
 800e6f8:	4d1e      	ldr	r5, [pc, #120]	; (800e774 <TIM_Base_SetConfig+0xf8>)
 800e6fa:	4290      	cmp	r0, r2
 800e6fc:	bf18      	it	ne
 800e6fe:	42a8      	cmpne	r0, r5
 800e700:	bf0c      	ite	eq
 800e702:	2201      	moveq	r2, #1
 800e704:	2200      	movne	r2, #0
 800e706:	d028      	beq.n	800e75a <TIM_Base_SetConfig+0xde>
 800e708:	4e1b      	ldr	r6, [pc, #108]	; (800e778 <TIM_Base_SetConfig+0xfc>)
 800e70a:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800e70e:	42a8      	cmp	r0, r5
 800e710:	bf18      	it	ne
 800e712:	42b0      	cmpne	r0, r6
 800e714:	d0ce      	beq.n	800e6b4 <TIM_Base_SetConfig+0x38>
 800e716:	4a19      	ldr	r2, [pc, #100]	; (800e77c <TIM_Base_SetConfig+0x100>)
 800e718:	4290      	cmp	r0, r2
 800e71a:	d01e      	beq.n	800e75a <TIM_Base_SetConfig+0xde>
 800e71c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e720:	4290      	cmp	r0, r2
 800e722:	d01a      	beq.n	800e75a <TIM_Base_SetConfig+0xde>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e724:	694a      	ldr	r2, [r1, #20]
 800e726:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e72a:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e72c:	4313      	orrs	r3, r2
  TIMx->PSC = Structure->Prescaler;
 800e72e:	680a      	ldr	r2, [r1, #0]
  TIMx->CR1 = tmpcr1;
 800e730:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e732:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800e734:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e736:	e7cc      	b.n	800e6d2 <TIM_Base_SetConfig+0x56>
 800e738:	4a0c      	ldr	r2, [pc, #48]	; (800e76c <TIM_Base_SetConfig+0xf0>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e73a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e73e:	4d10      	ldr	r5, [pc, #64]	; (800e780 <TIM_Base_SetConfig+0x104>)
 800e740:	1a82      	subs	r2, r0, r2
    tmpcr1 |= Structure->CounterMode;
 800e742:	684e      	ldr	r6, [r1, #4]
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e744:	42a8      	cmp	r0, r5
 800e746:	fab2 f282 	clz	r2, r2
    tmpcr1 |= Structure->CounterMode;
 800e74a:	ea43 0306 	orr.w	r3, r3, r6
 800e74e:	ea4f 1252 	mov.w	r2, r2, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e752:	d0af      	beq.n	800e6b4 <TIM_Base_SetConfig+0x38>
 800e754:	2a00      	cmp	r2, #0
 800e756:	d1ad      	bne.n	800e6b4 <TIM_Base_SetConfig+0x38>
 800e758:	e7cd      	b.n	800e6f6 <TIM_Base_SetConfig+0x7a>
 800e75a:	2200      	movs	r2, #0
 800e75c:	e7aa      	b.n	800e6b4 <TIM_Base_SetConfig+0x38>
 800e75e:	bf00      	nop
 800e760:	40010000 	.word	0x40010000
 800e764:	40000400 	.word	0x40000400
 800e768:	40000800 	.word	0x40000800
 800e76c:	40010400 	.word	0x40010400
 800e770:	40014400 	.word	0x40014400
 800e774:	40014000 	.word	0x40014000
 800e778:	40014800 	.word	0x40014800
 800e77c:	40001c00 	.word	0x40001c00
 800e780:	40000c00 	.word	0x40000c00

0800e784 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800e784:	2800      	cmp	r0, #0
 800e786:	f000 80b7 	beq.w	800e8f8 <HAL_TIM_Base_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e78a:	6802      	ldr	r2, [r0, #0]
 800e78c:	495e      	ldr	r1, [pc, #376]	; (800e908 <HAL_TIM_Base_Init+0x184>)
{
 800e78e:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e790:	4b5e      	ldr	r3, [pc, #376]	; (800e90c <HAL_TIM_Base_Init+0x188>)
 800e792:	4604      	mov	r4, r0
 800e794:	485e      	ldr	r0, [pc, #376]	; (800e910 <HAL_TIM_Base_Init+0x18c>)
 800e796:	429a      	cmp	r2, r3
 800e798:	bf18      	it	ne
 800e79a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e79e:	4d5d      	ldr	r5, [pc, #372]	; (800e914 <HAL_TIM_Base_Init+0x190>)
 800e7a0:	bf14      	ite	ne
 800e7a2:	2301      	movne	r3, #1
 800e7a4:	2300      	moveq	r3, #0
 800e7a6:	4282      	cmp	r2, r0
 800e7a8:	bf0c      	ite	eq
 800e7aa:	2300      	moveq	r3, #0
 800e7ac:	f003 0301 	andne.w	r3, r3, #1
 800e7b0:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e7b4:	428a      	cmp	r2, r1
 800e7b6:	bf0c      	ite	eq
 800e7b8:	2300      	moveq	r3, #0
 800e7ba:	f003 0301 	andne.w	r3, r3, #1
 800e7be:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e7c2:	42aa      	cmp	r2, r5
 800e7c4:	bf0c      	ite	eq
 800e7c6:	2300      	moveq	r3, #0
 800e7c8:	f003 0301 	andne.w	r3, r3, #1
 800e7cc:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800e7d0:	4282      	cmp	r2, r0
 800e7d2:	bf0c      	ite	eq
 800e7d4:	2300      	moveq	r3, #0
 800e7d6:	f003 0301 	andne.w	r3, r3, #1
 800e7da:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800e7de:	428a      	cmp	r2, r1
 800e7e0:	bf0c      	ite	eq
 800e7e2:	2300      	moveq	r3, #0
 800e7e4:	f003 0301 	andne.w	r3, r3, #1
 800e7e8:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800e7ec:	42aa      	cmp	r2, r5
 800e7ee:	bf0c      	ite	eq
 800e7f0:	2300      	moveq	r3, #0
 800e7f2:	f003 0301 	andne.w	r3, r3, #1
 800e7f6:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800e7fa:	4282      	cmp	r2, r0
 800e7fc:	bf0c      	ite	eq
 800e7fe:	2300      	moveq	r3, #0
 800e800:	f003 0301 	andne.w	r3, r3, #1
 800e804:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e808:	428a      	cmp	r2, r1
 800e80a:	bf0c      	ite	eq
 800e80c:	2300      	moveq	r3, #0
 800e80e:	f003 0301 	andne.w	r3, r3, #1
 800e812:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800e816:	42aa      	cmp	r2, r5
 800e818:	bf0c      	ite	eq
 800e81a:	2300      	moveq	r3, #0
 800e81c:	f003 0301 	andne.w	r3, r3, #1
 800e820:	4282      	cmp	r2, r0
 800e822:	bf0c      	ite	eq
 800e824:	2300      	moveq	r3, #0
 800e826:	f003 0301 	andne.w	r3, r3, #1
 800e82a:	428a      	cmp	r2, r1
 800e82c:	bf0c      	ite	eq
 800e82e:	2300      	moveq	r3, #0
 800e830:	f003 0301 	andne.w	r3, r3, #1
 800e834:	b113      	cbz	r3, 800e83c <HAL_TIM_Base_Init+0xb8>
 800e836:	4b38      	ldr	r3, [pc, #224]	; (800e918 <HAL_TIM_Base_Init+0x194>)
 800e838:	429a      	cmp	r2, r3
 800e83a:	d15f      	bne.n	800e8fc <HAL_TIM_Base_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e83c:	68a3      	ldr	r3, [r4, #8]
 800e83e:	f023 0210 	bic.w	r2, r3, #16
 800e842:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800e846:	2920      	cmp	r1, #32
 800e848:	bf18      	it	ne
 800e84a:	2a00      	cmpne	r2, #0
 800e84c:	d001      	beq.n	800e852 <HAL_TIM_Base_Init+0xce>
 800e84e:	2b40      	cmp	r3, #64	; 0x40
 800e850:	d14c      	bne.n	800e8ec <HAL_TIM_Base_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e852:	6923      	ldr	r3, [r4, #16]
 800e854:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e858:	d002      	beq.n	800e860 <HAL_TIM_Base_Init+0xdc>
 800e85a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e85e:	d12b      	bne.n	800e8b8 <HAL_TIM_Base_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e860:	69a3      	ldr	r3, [r4, #24]
 800e862:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e866:	d130      	bne.n	800e8ca <HAL_TIM_Base_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e868:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e86c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e870:	b3b3      	cbz	r3, 800e8e0 <HAL_TIM_Base_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800e872:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e874:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800e876:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e87a:	f851 0b04 	ldr.w	r0, [r1], #4
 800e87e:	f7ff fefd 	bl	800e67c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e882:	2301      	movs	r3, #1
  return HAL_OK;
 800e884:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e886:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e88a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800e88e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800e892:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800e896:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800e89a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e89e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800e8a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e8aa:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800e8ae:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800e8b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800e8b6:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e8b8:	f44f 718c 	mov.w	r1, #280	; 0x118
 800e8bc:	4817      	ldr	r0, [pc, #92]	; (800e91c <HAL_TIM_Base_Init+0x198>)
 800e8be:	f7f5 fa3d 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e8c2:	69a3      	ldr	r3, [r4, #24]
 800e8c4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e8c8:	d0ce      	beq.n	800e868 <HAL_TIM_Base_Init+0xe4>
 800e8ca:	f240 1119 	movw	r1, #281	; 0x119
 800e8ce:	4813      	ldr	r0, [pc, #76]	; (800e91c <HAL_TIM_Base_Init+0x198>)
 800e8d0:	f7f5 fa34 	bl	8003d3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800e8d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800e8d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d1c8      	bne.n	800e872 <HAL_TIM_Base_Init+0xee>
    HAL_TIM_Base_MspInit(htim);
 800e8e0:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800e8e2:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800e8e6:	f7f6 fe3b 	bl	8005560 <HAL_TIM_Base_MspInit>
 800e8ea:	e7c2      	b.n	800e872 <HAL_TIM_Base_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e8ec:	f240 1117 	movw	r1, #279	; 0x117
 800e8f0:	480a      	ldr	r0, [pc, #40]	; (800e91c <HAL_TIM_Base_Init+0x198>)
 800e8f2:	f7f5 fa23 	bl	8003d3c <assert_failed>
 800e8f6:	e7ac      	b.n	800e852 <HAL_TIM_Base_Init+0xce>
    return HAL_ERROR;
 800e8f8:	2001      	movs	r0, #1
}
 800e8fa:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e8fc:	f44f 718b 	mov.w	r1, #278	; 0x116
 800e900:	4806      	ldr	r0, [pc, #24]	; (800e91c <HAL_TIM_Base_Init+0x198>)
 800e902:	f7f5 fa1b 	bl	8003d3c <assert_failed>
 800e906:	e799      	b.n	800e83c <HAL_TIM_Base_Init+0xb8>
 800e908:	40000800 	.word	0x40000800
 800e90c:	40010000 	.word	0x40010000
 800e910:	40000400 	.word	0x40000400
 800e914:	40000c00 	.word	0x40000c00
 800e918:	40002000 	.word	0x40002000
 800e91c:	08029a64 	.word	0x08029a64

0800e920 <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800e920:	2800      	cmp	r0, #0
 800e922:	f000 80b7 	beq.w	800ea94 <HAL_TIM_OC_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e926:	6802      	ldr	r2, [r0, #0]
 800e928:	495e      	ldr	r1, [pc, #376]	; (800eaa4 <HAL_TIM_OC_Init+0x184>)
{
 800e92a:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800e92c:	4b5e      	ldr	r3, [pc, #376]	; (800eaa8 <HAL_TIM_OC_Init+0x188>)
 800e92e:	4604      	mov	r4, r0
 800e930:	485e      	ldr	r0, [pc, #376]	; (800eaac <HAL_TIM_OC_Init+0x18c>)
 800e932:	429a      	cmp	r2, r3
 800e934:	bf18      	it	ne
 800e936:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800e93a:	4d5d      	ldr	r5, [pc, #372]	; (800eab0 <HAL_TIM_OC_Init+0x190>)
 800e93c:	bf14      	ite	ne
 800e93e:	2301      	movne	r3, #1
 800e940:	2300      	moveq	r3, #0
 800e942:	4282      	cmp	r2, r0
 800e944:	bf0c      	ite	eq
 800e946:	2300      	moveq	r3, #0
 800e948:	f003 0301 	andne.w	r3, r3, #1
 800e94c:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800e950:	428a      	cmp	r2, r1
 800e952:	bf0c      	ite	eq
 800e954:	2300      	moveq	r3, #0
 800e956:	f003 0301 	andne.w	r3, r3, #1
 800e95a:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800e95e:	42aa      	cmp	r2, r5
 800e960:	bf0c      	ite	eq
 800e962:	2300      	moveq	r3, #0
 800e964:	f003 0301 	andne.w	r3, r3, #1
 800e968:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800e96c:	4282      	cmp	r2, r0
 800e96e:	bf0c      	ite	eq
 800e970:	2300      	moveq	r3, #0
 800e972:	f003 0301 	andne.w	r3, r3, #1
 800e976:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800e97a:	428a      	cmp	r2, r1
 800e97c:	bf0c      	ite	eq
 800e97e:	2300      	moveq	r3, #0
 800e980:	f003 0301 	andne.w	r3, r3, #1
 800e984:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800e988:	42aa      	cmp	r2, r5
 800e98a:	bf0c      	ite	eq
 800e98c:	2300      	moveq	r3, #0
 800e98e:	f003 0301 	andne.w	r3, r3, #1
 800e992:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800e996:	4282      	cmp	r2, r0
 800e998:	bf0c      	ite	eq
 800e99a:	2300      	moveq	r3, #0
 800e99c:	f003 0301 	andne.w	r3, r3, #1
 800e9a0:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800e9a4:	428a      	cmp	r2, r1
 800e9a6:	bf0c      	ite	eq
 800e9a8:	2300      	moveq	r3, #0
 800e9aa:	f003 0301 	andne.w	r3, r3, #1
 800e9ae:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800e9b2:	42aa      	cmp	r2, r5
 800e9b4:	bf0c      	ite	eq
 800e9b6:	2300      	moveq	r3, #0
 800e9b8:	f003 0301 	andne.w	r3, r3, #1
 800e9bc:	4282      	cmp	r2, r0
 800e9be:	bf0c      	ite	eq
 800e9c0:	2300      	moveq	r3, #0
 800e9c2:	f003 0301 	andne.w	r3, r3, #1
 800e9c6:	428a      	cmp	r2, r1
 800e9c8:	bf0c      	ite	eq
 800e9ca:	2300      	moveq	r3, #0
 800e9cc:	f003 0301 	andne.w	r3, r3, #1
 800e9d0:	b113      	cbz	r3, 800e9d8 <HAL_TIM_OC_Init+0xb8>
 800e9d2:	4b38      	ldr	r3, [pc, #224]	; (800eab4 <HAL_TIM_OC_Init+0x194>)
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d15f      	bne.n	800ea98 <HAL_TIM_OC_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800e9d8:	68a3      	ldr	r3, [r4, #8]
 800e9da:	f023 0210 	bic.w	r2, r3, #16
 800e9de:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800e9e2:	2920      	cmp	r1, #32
 800e9e4:	bf18      	it	ne
 800e9e6:	2a00      	cmpne	r2, #0
 800e9e8:	d001      	beq.n	800e9ee <HAL_TIM_OC_Init+0xce>
 800e9ea:	2b40      	cmp	r3, #64	; 0x40
 800e9ec:	d14c      	bne.n	800ea88 <HAL_TIM_OC_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800e9ee:	6923      	ldr	r3, [r4, #16]
 800e9f0:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800e9f4:	d002      	beq.n	800e9fc <HAL_TIM_OC_Init+0xdc>
 800e9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e9fa:	d12b      	bne.n	800ea54 <HAL_TIM_OC_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800e9fc:	69a3      	ldr	r3, [r4, #24]
 800e9fe:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ea02:	d130      	bne.n	800ea66 <HAL_TIM_OC_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ea04:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ea08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ea0c:	b3b3      	cbz	r3, 800ea7c <HAL_TIM_OC_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800ea0e:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ea10:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ea12:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800ea16:	f851 0b04 	ldr.w	r0, [r1], #4
 800ea1a:	f7ff fe2f 	bl	800e67c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea1e:	2301      	movs	r3, #1
  return HAL_OK;
 800ea20:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ea22:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea26:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ea2a:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ea2e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ea32:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ea36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ea3e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ea42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ea46:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ea4a:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ea4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ea52:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ea54:	f240 2197 	movw	r1, #663	; 0x297
 800ea58:	4817      	ldr	r0, [pc, #92]	; (800eab8 <HAL_TIM_OC_Init+0x198>)
 800ea5a:	f7f5 f96f 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ea5e:	69a3      	ldr	r3, [r4, #24]
 800ea60:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ea64:	d0ce      	beq.n	800ea04 <HAL_TIM_OC_Init+0xe4>
 800ea66:	f44f 7126 	mov.w	r1, #664	; 0x298
 800ea6a:	4813      	ldr	r0, [pc, #76]	; (800eab8 <HAL_TIM_OC_Init+0x198>)
 800ea6c:	f7f5 f966 	bl	8003d3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ea70:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ea74:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d1c8      	bne.n	800ea0e <HAL_TIM_OC_Init+0xee>
    HAL_TIM_OC_MspInit(htim);
 800ea7c:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800ea7e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 800ea82:	f7ff f917 	bl	800dcb4 <HAL_TIM_OC_MspInit>
 800ea86:	e7c2      	b.n	800ea0e <HAL_TIM_OC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ea88:	f240 2196 	movw	r1, #662	; 0x296
 800ea8c:	480a      	ldr	r0, [pc, #40]	; (800eab8 <HAL_TIM_OC_Init+0x198>)
 800ea8e:	f7f5 f955 	bl	8003d3c <assert_failed>
 800ea92:	e7ac      	b.n	800e9ee <HAL_TIM_OC_Init+0xce>
    return HAL_ERROR;
 800ea94:	2001      	movs	r0, #1
}
 800ea96:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ea98:	f240 2195 	movw	r1, #661	; 0x295
 800ea9c:	4806      	ldr	r0, [pc, #24]	; (800eab8 <HAL_TIM_OC_Init+0x198>)
 800ea9e:	f7f5 f94d 	bl	8003d3c <assert_failed>
 800eaa2:	e799      	b.n	800e9d8 <HAL_TIM_OC_Init+0xb8>
 800eaa4:	40000800 	.word	0x40000800
 800eaa8:	40010000 	.word	0x40010000
 800eaac:	40000400 	.word	0x40000400
 800eab0:	40000c00 	.word	0x40000c00
 800eab4:	40002000 	.word	0x40002000
 800eab8:	08029a64 	.word	0x08029a64

0800eabc <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 800eabc:	2800      	cmp	r0, #0
 800eabe:	f000 80b7 	beq.w	800ec30 <HAL_TIM_PWM_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eac2:	6802      	ldr	r2, [r0, #0]
 800eac4:	495e      	ldr	r1, [pc, #376]	; (800ec40 <HAL_TIM_PWM_Init+0x184>)
{
 800eac6:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800eac8:	4b5e      	ldr	r3, [pc, #376]	; (800ec44 <HAL_TIM_PWM_Init+0x188>)
 800eaca:	4604      	mov	r4, r0
 800eacc:	485e      	ldr	r0, [pc, #376]	; (800ec48 <HAL_TIM_PWM_Init+0x18c>)
 800eace:	429a      	cmp	r2, r3
 800ead0:	bf18      	it	ne
 800ead2:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ead6:	4d5d      	ldr	r5, [pc, #372]	; (800ec4c <HAL_TIM_PWM_Init+0x190>)
 800ead8:	bf14      	ite	ne
 800eada:	2301      	movne	r3, #1
 800eadc:	2300      	moveq	r3, #0
 800eade:	4282      	cmp	r2, r0
 800eae0:	bf0c      	ite	eq
 800eae2:	2300      	moveq	r3, #0
 800eae4:	f003 0301 	andne.w	r3, r3, #1
 800eae8:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800eaec:	428a      	cmp	r2, r1
 800eaee:	bf0c      	ite	eq
 800eaf0:	2300      	moveq	r3, #0
 800eaf2:	f003 0301 	andne.w	r3, r3, #1
 800eaf6:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800eafa:	42aa      	cmp	r2, r5
 800eafc:	bf0c      	ite	eq
 800eafe:	2300      	moveq	r3, #0
 800eb00:	f003 0301 	andne.w	r3, r3, #1
 800eb04:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800eb08:	4282      	cmp	r2, r0
 800eb0a:	bf0c      	ite	eq
 800eb0c:	2300      	moveq	r3, #0
 800eb0e:	f003 0301 	andne.w	r3, r3, #1
 800eb12:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800eb16:	428a      	cmp	r2, r1
 800eb18:	bf0c      	ite	eq
 800eb1a:	2300      	moveq	r3, #0
 800eb1c:	f003 0301 	andne.w	r3, r3, #1
 800eb20:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800eb24:	42aa      	cmp	r2, r5
 800eb26:	bf0c      	ite	eq
 800eb28:	2300      	moveq	r3, #0
 800eb2a:	f003 0301 	andne.w	r3, r3, #1
 800eb2e:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800eb32:	4282      	cmp	r2, r0
 800eb34:	bf0c      	ite	eq
 800eb36:	2300      	moveq	r3, #0
 800eb38:	f003 0301 	andne.w	r3, r3, #1
 800eb3c:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800eb40:	428a      	cmp	r2, r1
 800eb42:	bf0c      	ite	eq
 800eb44:	2300      	moveq	r3, #0
 800eb46:	f003 0301 	andne.w	r3, r3, #1
 800eb4a:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800eb4e:	42aa      	cmp	r2, r5
 800eb50:	bf0c      	ite	eq
 800eb52:	2300      	moveq	r3, #0
 800eb54:	f003 0301 	andne.w	r3, r3, #1
 800eb58:	4282      	cmp	r2, r0
 800eb5a:	bf0c      	ite	eq
 800eb5c:	2300      	moveq	r3, #0
 800eb5e:	f003 0301 	andne.w	r3, r3, #1
 800eb62:	428a      	cmp	r2, r1
 800eb64:	bf0c      	ite	eq
 800eb66:	2300      	moveq	r3, #0
 800eb68:	f003 0301 	andne.w	r3, r3, #1
 800eb6c:	b113      	cbz	r3, 800eb74 <HAL_TIM_PWM_Init+0xb8>
 800eb6e:	4b38      	ldr	r3, [pc, #224]	; (800ec50 <HAL_TIM_PWM_Init+0x194>)
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d15f      	bne.n	800ec34 <HAL_TIM_PWM_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800eb74:	68a3      	ldr	r3, [r4, #8]
 800eb76:	f023 0210 	bic.w	r2, r3, #16
 800eb7a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800eb7e:	2920      	cmp	r1, #32
 800eb80:	bf18      	it	ne
 800eb82:	2a00      	cmpne	r2, #0
 800eb84:	d001      	beq.n	800eb8a <HAL_TIM_PWM_Init+0xce>
 800eb86:	2b40      	cmp	r3, #64	; 0x40
 800eb88:	d14c      	bne.n	800ec24 <HAL_TIM_PWM_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800eb8a:	6923      	ldr	r3, [r4, #16]
 800eb8c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800eb90:	d002      	beq.n	800eb98 <HAL_TIM_PWM_Init+0xdc>
 800eb92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800eb96:	d12b      	bne.n	800ebf0 <HAL_TIM_PWM_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800eb98:	69a3      	ldr	r3, [r4, #24]
 800eb9a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800eb9e:	d130      	bne.n	800ec02 <HAL_TIM_PWM_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eba0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800eba4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800eba8:	b3b3      	cbz	r3, 800ec18 <HAL_TIM_PWM_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800ebaa:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebac:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ebae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ebb2:	f851 0b04 	ldr.w	r0, [r1], #4
 800ebb6:	f7ff fd61 	bl	800e67c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebba:	2301      	movs	r3, #1
  return HAL_OK;
 800ebbc:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ebbe:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebc2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ebc6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ebca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ebce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ebd2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ebd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ebda:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ebde:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ebe2:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ebe6:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ebea:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ebee:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ebf0:	f240 5132 	movw	r1, #1330	; 0x532
 800ebf4:	4817      	ldr	r0, [pc, #92]	; (800ec54 <HAL_TIM_PWM_Init+0x198>)
 800ebf6:	f7f5 f8a1 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ebfa:	69a3      	ldr	r3, [r4, #24]
 800ebfc:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ec00:	d0ce      	beq.n	800eba0 <HAL_TIM_PWM_Init+0xe4>
 800ec02:	f240 5133 	movw	r1, #1331	; 0x533
 800ec06:	4813      	ldr	r0, [pc, #76]	; (800ec54 <HAL_TIM_PWM_Init+0x198>)
 800ec08:	f7f5 f898 	bl	8003d3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ec0c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ec10:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d1c8      	bne.n	800ebaa <HAL_TIM_PWM_Init+0xee>
    HAL_TIM_PWM_MspInit(htim);
 800ec18:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800ec1a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800ec1e:	f7ff f84b 	bl	800dcb8 <HAL_TIM_PWM_MspInit>
 800ec22:	e7c2      	b.n	800ebaa <HAL_TIM_PWM_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ec24:	f240 5131 	movw	r1, #1329	; 0x531
 800ec28:	480a      	ldr	r0, [pc, #40]	; (800ec54 <HAL_TIM_PWM_Init+0x198>)
 800ec2a:	f7f5 f887 	bl	8003d3c <assert_failed>
 800ec2e:	e7ac      	b.n	800eb8a <HAL_TIM_PWM_Init+0xce>
    return HAL_ERROR;
 800ec30:	2001      	movs	r0, #1
}
 800ec32:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ec34:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 800ec38:	4806      	ldr	r0, [pc, #24]	; (800ec54 <HAL_TIM_PWM_Init+0x198>)
 800ec3a:	f7f5 f87f 	bl	8003d3c <assert_failed>
 800ec3e:	e799      	b.n	800eb74 <HAL_TIM_PWM_Init+0xb8>
 800ec40:	40000800 	.word	0x40000800
 800ec44:	40010000 	.word	0x40010000
 800ec48:	40000400 	.word	0x40000400
 800ec4c:	40000c00 	.word	0x40000c00
 800ec50:	40002000 	.word	0x40002000
 800ec54:	08029a64 	.word	0x08029a64

0800ec58 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 800ec58:	2800      	cmp	r0, #0
 800ec5a:	f000 80b7 	beq.w	800edcc <HAL_TIM_IC_Init+0x174>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ec5e:	6802      	ldr	r2, [r0, #0]
 800ec60:	495e      	ldr	r1, [pc, #376]	; (800eddc <HAL_TIM_IC_Init+0x184>)
{
 800ec62:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ec64:	4b5e      	ldr	r3, [pc, #376]	; (800ede0 <HAL_TIM_IC_Init+0x188>)
 800ec66:	4604      	mov	r4, r0
 800ec68:	485e      	ldr	r0, [pc, #376]	; (800ede4 <HAL_TIM_IC_Init+0x18c>)
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	bf18      	it	ne
 800ec6e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800ec72:	4d5d      	ldr	r5, [pc, #372]	; (800ede8 <HAL_TIM_IC_Init+0x190>)
 800ec74:	bf14      	ite	ne
 800ec76:	2301      	movne	r3, #1
 800ec78:	2300      	moveq	r3, #0
 800ec7a:	4282      	cmp	r2, r0
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2300      	moveq	r3, #0
 800ec80:	f003 0301 	andne.w	r3, r3, #1
 800ec84:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 800ec88:	428a      	cmp	r2, r1
 800ec8a:	bf0c      	ite	eq
 800ec8c:	2300      	moveq	r3, #0
 800ec8e:	f003 0301 	andne.w	r3, r3, #1
 800ec92:	f501 6140 	add.w	r1, r1, #3072	; 0xc00
 800ec96:	42aa      	cmp	r2, r5
 800ec98:	bf0c      	ite	eq
 800ec9a:	2300      	moveq	r3, #0
 800ec9c:	f003 0301 	andne.w	r3, r3, #1
 800eca0:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 800eca4:	4282      	cmp	r2, r0
 800eca6:	bf0c      	ite	eq
 800eca8:	2300      	moveq	r3, #0
 800ecaa:	f003 0301 	andne.w	r3, r3, #1
 800ecae:	f500 3098 	add.w	r0, r0, #77824	; 0x13000
 800ecb2:	428a      	cmp	r2, r1
 800ecb4:	bf0c      	ite	eq
 800ecb6:	2300      	moveq	r3, #0
 800ecb8:	f003 0301 	andne.w	r3, r3, #1
 800ecbc:	f501 3198 	add.w	r1, r1, #77824	; 0x13000
 800ecc0:	42aa      	cmp	r2, r5
 800ecc2:	bf0c      	ite	eq
 800ecc4:	2300      	moveq	r3, #0
 800ecc6:	f003 0301 	andne.w	r3, r3, #1
 800ecca:	f505 4588 	add.w	r5, r5, #17408	; 0x4400
 800ecce:	4282      	cmp	r2, r0
 800ecd0:	bf0c      	ite	eq
 800ecd2:	2300      	moveq	r3, #0
 800ecd4:	f003 0301 	andne.w	r3, r3, #1
 800ecd8:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800ecdc:	428a      	cmp	r2, r1
 800ecde:	bf0c      	ite	eq
 800ece0:	2300      	moveq	r3, #0
 800ece2:	f003 0301 	andne.w	r3, r3, #1
 800ece6:	f5a1 3194 	sub.w	r1, r1, #75776	; 0x12800
 800ecea:	42aa      	cmp	r2, r5
 800ecec:	bf0c      	ite	eq
 800ecee:	2300      	moveq	r3, #0
 800ecf0:	f003 0301 	andne.w	r3, r3, #1
 800ecf4:	4282      	cmp	r2, r0
 800ecf6:	bf0c      	ite	eq
 800ecf8:	2300      	moveq	r3, #0
 800ecfa:	f003 0301 	andne.w	r3, r3, #1
 800ecfe:	428a      	cmp	r2, r1
 800ed00:	bf0c      	ite	eq
 800ed02:	2300      	moveq	r3, #0
 800ed04:	f003 0301 	andne.w	r3, r3, #1
 800ed08:	b113      	cbz	r3, 800ed10 <HAL_TIM_IC_Init+0xb8>
 800ed0a:	4b38      	ldr	r3, [pc, #224]	; (800edec <HAL_TIM_IC_Init+0x194>)
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	d15f      	bne.n	800edd0 <HAL_TIM_IC_Init+0x178>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ed10:	68a3      	ldr	r3, [r4, #8]
 800ed12:	f023 0210 	bic.w	r2, r3, #16
 800ed16:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800ed1a:	2920      	cmp	r1, #32
 800ed1c:	bf18      	it	ne
 800ed1e:	2a00      	cmpne	r2, #0
 800ed20:	d001      	beq.n	800ed26 <HAL_TIM_IC_Init+0xce>
 800ed22:	2b40      	cmp	r3, #64	; 0x40
 800ed24:	d14c      	bne.n	800edc0 <HAL_TIM_IC_Init+0x168>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ed26:	6923      	ldr	r3, [r4, #16]
 800ed28:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ed2c:	d002      	beq.n	800ed34 <HAL_TIM_IC_Init+0xdc>
 800ed2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed32:	d12b      	bne.n	800ed8c <HAL_TIM_IC_Init+0x134>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ed34:	69a3      	ldr	r3, [r4, #24]
 800ed36:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ed3a:	d130      	bne.n	800ed9e <HAL_TIM_IC_Init+0x146>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ed3c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ed40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ed44:	b3b3      	cbz	r3, 800edb4 <HAL_TIM_IC_Init+0x15c>
  htim->State = HAL_TIM_STATE_BUSY;
 800ed46:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed48:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ed4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ed4e:	f851 0b04 	ldr.w	r0, [r1], #4
 800ed52:	f7ff fc93 	bl	800e67c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed56:	2301      	movs	r3, #1
  return HAL_OK;
 800ed58:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ed5a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed5e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ed62:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ed66:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ed6a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ed6e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ed72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed76:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ed7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ed7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ed82:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ed86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ed8c:	f240 71cc 	movw	r1, #1996	; 0x7cc
 800ed90:	4817      	ldr	r0, [pc, #92]	; (800edf0 <HAL_TIM_IC_Init+0x198>)
 800ed92:	f7f4 ffd3 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ed96:	69a3      	ldr	r3, [r4, #24]
 800ed98:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ed9c:	d0ce      	beq.n	800ed3c <HAL_TIM_IC_Init+0xe4>
 800ed9e:	f240 71cd 	movw	r1, #1997	; 0x7cd
 800eda2:	4813      	ldr	r0, [pc, #76]	; (800edf0 <HAL_TIM_IC_Init+0x198>)
 800eda4:	f7f4 ffca 	bl	8003d3c <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800eda8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800edac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d1c8      	bne.n	800ed46 <HAL_TIM_IC_Init+0xee>
    HAL_TIM_IC_MspInit(htim);
 800edb4:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800edb6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 800edba:	f7fe ff7f 	bl	800dcbc <HAL_TIM_IC_MspInit>
 800edbe:	e7c2      	b.n	800ed46 <HAL_TIM_IC_Init+0xee>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800edc0:	f240 71cb 	movw	r1, #1995	; 0x7cb
 800edc4:	480a      	ldr	r0, [pc, #40]	; (800edf0 <HAL_TIM_IC_Init+0x198>)
 800edc6:	f7f4 ffb9 	bl	8003d3c <assert_failed>
 800edca:	e7ac      	b.n	800ed26 <HAL_TIM_IC_Init+0xce>
    return HAL_ERROR;
 800edcc:	2001      	movs	r0, #1
}
 800edce:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800edd0:	f240 71ca 	movw	r1, #1994	; 0x7ca
 800edd4:	4806      	ldr	r0, [pc, #24]	; (800edf0 <HAL_TIM_IC_Init+0x198>)
 800edd6:	f7f4 ffb1 	bl	8003d3c <assert_failed>
 800edda:	e799      	b.n	800ed10 <HAL_TIM_IC_Init+0xb8>
 800eddc:	40000800 	.word	0x40000800
 800ede0:	40010000 	.word	0x40010000
 800ede4:	40000400 	.word	0x40000400
 800ede8:	40000c00 	.word	0x40000c00
 800edec:	40002000 	.word	0x40002000
 800edf0:	08029a64 	.word	0x08029a64

0800edf4 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edf4:	6a02      	ldr	r2, [r0, #32]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800edf6:	4b2e      	ldr	r3, [pc, #184]	; (800eeb0 <TIM_OC2_SetConfig+0xbc>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edf8:	f022 0210 	bic.w	r2, r2, #16
{
 800edfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee00:	4604      	mov	r4, r0
 800ee02:	460e      	mov	r6, r1
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee04:	492b      	ldr	r1, [pc, #172]	; (800eeb4 <TIM_OC2_SetConfig+0xc0>)
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee06:	f8d6 c008 	ldr.w	ip, [r6, #8]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee0a:	6830      	ldr	r0, [r6, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee0c:	428c      	cmp	r4, r1
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ee0e:	6222      	str	r2, [r4, #32]
  tmpccer = TIMx->CCER;
 800ee10:	6a25      	ldr	r5, [r4, #32]
  tmpcr2 =  TIMx->CR2;
 800ee12:	6867      	ldr	r7, [r4, #4]
  tmpccmrx = TIMx->CCMR1;
 800ee14:	69a2      	ldr	r2, [r4, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 800ee16:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ee1a:	ea03 0302 	and.w	r3, r3, r2
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ee1e:	ea45 150c 	orr.w	r5, r5, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ee22:	ea43 2800 	orr.w	r8, r3, r0, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ee26:	d00a      	beq.n	800ee3e <TIM_OC2_SetConfig+0x4a>
 800ee28:	4b23      	ldr	r3, [pc, #140]	; (800eeb8 <TIM_OC2_SetConfig+0xc4>)
 800ee2a:	429c      	cmp	r4, r3
 800ee2c:	d007      	beq.n	800ee3e <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 800ee2e:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ee30:	6067      	str	r7, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ee32:	f8c4 8018 	str.w	r8, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800ee36:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800ee38:	6225      	str	r5, [r4, #32]
}
 800ee3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ee3e:	68f2      	ldr	r2, [r6, #12]
 800ee40:	f032 0308 	bics.w	r3, r2, #8
 800ee44:	d123      	bne.n	800ee8e <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 800ee46:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ee4a:	69b3      	ldr	r3, [r6, #24]
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ee4c:	ea45 1502 	orr.w	r5, r5, r2, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ee50:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 800ee54:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ee58:	d120      	bne.n	800ee9c <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ee5a:	6973      	ldr	r3, [r6, #20]
 800ee5c:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ee60:	d107      	bne.n	800ee72 <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee62:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee66:	69b1      	ldr	r1, [r6, #24]
 800ee68:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ee6c:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800ee70:	e7dd      	b.n	800ee2e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ee72:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 800ee76:	4811      	ldr	r0, [pc, #68]	; (800eebc <TIM_OC2_SetConfig+0xc8>)
 800ee78:	f7f4 ff60 	bl	8003d3c <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ee7c:	f427 6240 	bic.w	r2, r7, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ee80:	69b1      	ldr	r1, [r6, #24]
 800ee82:	6973      	ldr	r3, [r6, #20]
 800ee84:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 800ee88:	ea42 0783 	orr.w	r7, r2, r3, lsl #2
 800ee8c:	e7cf      	b.n	800ee2e <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ee8e:	f641 31aa 	movw	r1, #7082	; 0x1baa
 800ee92:	480a      	ldr	r0, [pc, #40]	; (800eebc <TIM_OC2_SetConfig+0xc8>)
 800ee94:	f7f4 ff52 	bl	8003d3c <assert_failed>
 800ee98:	68f2      	ldr	r2, [r6, #12]
 800ee9a:	e7d4      	b.n	800ee46 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ee9c:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 800eea0:	4806      	ldr	r0, [pc, #24]	; (800eebc <TIM_OC2_SetConfig+0xc8>)
 800eea2:	f7f4 ff4b 	bl	8003d3c <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800eea6:	6973      	ldr	r3, [r6, #20]
 800eea8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800eeac:	d0d9      	beq.n	800ee62 <TIM_OC2_SetConfig+0x6e>
 800eeae:	e7e0      	b.n	800ee72 <TIM_OC2_SetConfig+0x7e>
 800eeb0:	feff8cff 	.word	0xfeff8cff
 800eeb4:	40010000 	.word	0x40010000
 800eeb8:	40010400 	.word	0x40010400
 800eebc:	08029a64 	.word	0x08029a64

0800eec0 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800eec0:	2a14      	cmp	r2, #20
{
 800eec2:	b570      	push	{r4, r5, r6, lr}
 800eec4:	4614      	mov	r4, r2
 800eec6:	4605      	mov	r5, r0
 800eec8:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800eeca:	d937      	bls.n	800ef3c <HAL_TIM_OC_ConfigChannel+0x7c>
 800eecc:	2a3c      	cmp	r2, #60	; 0x3c
 800eece:	d139      	bne.n	800ef44 <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800eed0:	6833      	ldr	r3, [r6, #0]
 800eed2:	f023 0210 	bic.w	r2, r3, #16
 800eed6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800eeda:	2a40      	cmp	r2, #64	; 0x40
 800eedc:	bf18      	it	ne
 800eede:	2b00      	cmpne	r3, #0
 800eee0:	d003      	beq.n	800eeea <HAL_TIM_OC_ConfigChannel+0x2a>
 800eee2:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800eee6:	f040 8134 	bne.w	800f152 <HAL_TIM_OC_ConfigChannel+0x292>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800eeea:	68b3      	ldr	r3, [r6, #8]
 800eeec:	f033 0302 	bics.w	r3, r3, #2
 800eef0:	d12e      	bne.n	800ef50 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 800eef2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800eef6:	2b01      	cmp	r3, #1
 800eef8:	d033      	beq.n	800ef62 <HAL_TIM_OC_ConfigChannel+0xa2>
 800eefa:	2301      	movs	r3, #1
 800eefc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800ef00:	2c14      	cmp	r4, #20
 800ef02:	d816      	bhi.n	800ef32 <HAL_TIM_OC_ConfigChannel+0x72>
 800ef04:	e8df f014 	tbh	[pc, r4, lsl #1]
 800ef08:	0015002f 	.word	0x0015002f
 800ef0c:	00150015 	.word	0x00150015
 800ef10:	0015007f 	.word	0x0015007f
 800ef14:	00150015 	.word	0x00150015
 800ef18:	001500b3 	.word	0x001500b3
 800ef1c:	00150015 	.word	0x00150015
 800ef20:	001500d8 	.word	0x001500d8
 800ef24:	00150015 	.word	0x00150015
 800ef28:	001500fd 	.word	0x001500fd
 800ef2c:	00150015 	.word	0x00150015
 800ef30:	010a      	.short	0x010a
  __HAL_LOCK(htim);
 800ef32:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800ef34:	2300      	movs	r3, #0
 800ef36:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800ef3a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800ef3c:	4b96      	ldr	r3, [pc, #600]	; (800f198 <HAL_TIM_OC_ConfigChannel+0x2d8>)
 800ef3e:	40d3      	lsrs	r3, r2
 800ef40:	07db      	lsls	r3, r3, #31
 800ef42:	d4c5      	bmi.n	800eed0 <HAL_TIM_OC_ConfigChannel+0x10>
 800ef44:	f640 71df 	movw	r1, #4063	; 0xfdf
 800ef48:	4894      	ldr	r0, [pc, #592]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800ef4a:	f7f4 fef7 	bl	8003d3c <assert_failed>
 800ef4e:	e7bf      	b.n	800eed0 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800ef50:	f640 71e1 	movw	r1, #4065	; 0xfe1
 800ef54:	4891      	ldr	r0, [pc, #580]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800ef56:	f7f4 fef1 	bl	8003d3c <assert_failed>
  __HAL_LOCK(htim);
 800ef5a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800ef5e:	2b01      	cmp	r3, #1
 800ef60:	d1cb      	bne.n	800eefa <HAL_TIM_OC_ConfigChannel+0x3a>
 800ef62:	2002      	movs	r0, #2
}
 800ef64:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ef66:	6828      	ldr	r0, [r5, #0]
 800ef68:	4b8d      	ldr	r3, [pc, #564]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800ef6a:	4a8e      	ldr	r2, [pc, #568]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800ef6c:	4298      	cmp	r0, r3
 800ef6e:	bf18      	it	ne
 800ef70:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800ef74:	498c      	ldr	r1, [pc, #560]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800ef76:	bf14      	ite	ne
 800ef78:	2301      	movne	r3, #1
 800ef7a:	2300      	moveq	r3, #0
 800ef7c:	4290      	cmp	r0, r2
 800ef7e:	bf0c      	ite	eq
 800ef80:	2300      	moveq	r3, #0
 800ef82:	f003 0301 	andne.w	r3, r3, #1
 800ef86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ef8a:	4288      	cmp	r0, r1
 800ef8c:	bf0c      	ite	eq
 800ef8e:	2300      	moveq	r3, #0
 800ef90:	f003 0301 	andne.w	r3, r3, #1
 800ef94:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800ef98:	4290      	cmp	r0, r2
 800ef9a:	bf0c      	ite	eq
 800ef9c:	2300      	moveq	r3, #0
 800ef9e:	f003 0301 	andne.w	r3, r3, #1
 800efa2:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800efa6:	4288      	cmp	r0, r1
 800efa8:	bf0c      	ite	eq
 800efaa:	2300      	moveq	r3, #0
 800efac:	f003 0301 	andne.w	r3, r3, #1
 800efb0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800efb4:	4290      	cmp	r0, r2
 800efb6:	bf0c      	ite	eq
 800efb8:	2300      	moveq	r3, #0
 800efba:	f003 0301 	andne.w	r3, r3, #1
 800efbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800efc2:	4288      	cmp	r0, r1
 800efc4:	bf0c      	ite	eq
 800efc6:	2300      	moveq	r3, #0
 800efc8:	f003 0301 	andne.w	r3, r3, #1
 800efcc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800efd0:	4290      	cmp	r0, r2
 800efd2:	bf0c      	ite	eq
 800efd4:	2300      	moveq	r3, #0
 800efd6:	f003 0301 	andne.w	r3, r3, #1
 800efda:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800efde:	4288      	cmp	r0, r1
 800efe0:	bf0c      	ite	eq
 800efe2:	2300      	moveq	r3, #0
 800efe4:	f003 0301 	andne.w	r3, r3, #1
 800efe8:	4290      	cmp	r0, r2
 800efea:	bf0c      	ite	eq
 800efec:	2300      	moveq	r3, #0
 800efee:	f003 0301 	andne.w	r3, r3, #1
 800eff2:	b11b      	cbz	r3, 800effc <HAL_TIM_OC_ConfigChannel+0x13c>
 800eff4:	4b6d      	ldr	r3, [pc, #436]	; (800f1ac <HAL_TIM_OC_ConfigChannel+0x2ec>)
 800eff6:	4298      	cmp	r0, r3
 800eff8:	f040 80c6 	bne.w	800f188 <HAL_TIM_OC_ConfigChannel+0x2c8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800effc:	4631      	mov	r1, r6
 800effe:	f7fe f9ad 	bl	800d35c <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f002:	2000      	movs	r0, #0
      break;
 800f004:	e796      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f006:	6828      	ldr	r0, [r5, #0]
 800f008:	4b65      	ldr	r3, [pc, #404]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f00a:	4a66      	ldr	r2, [pc, #408]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800f00c:	4298      	cmp	r0, r3
 800f00e:	bf18      	it	ne
 800f010:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f014:	4964      	ldr	r1, [pc, #400]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f016:	bf14      	ite	ne
 800f018:	2301      	movne	r3, #1
 800f01a:	2300      	moveq	r3, #0
 800f01c:	4290      	cmp	r0, r2
 800f01e:	bf0c      	ite	eq
 800f020:	2300      	moveq	r3, #0
 800f022:	f003 0301 	andne.w	r3, r3, #1
 800f026:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f02a:	4288      	cmp	r0, r1
 800f02c:	bf0c      	ite	eq
 800f02e:	2300      	moveq	r3, #0
 800f030:	f003 0301 	andne.w	r3, r3, #1
 800f034:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800f038:	4290      	cmp	r0, r2
 800f03a:	bf0c      	ite	eq
 800f03c:	2300      	moveq	r3, #0
 800f03e:	f003 0301 	andne.w	r3, r3, #1
 800f042:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800f046:	4288      	cmp	r0, r1
 800f048:	bf0c      	ite	eq
 800f04a:	2300      	moveq	r3, #0
 800f04c:	f003 0301 	andne.w	r3, r3, #1
 800f050:	4290      	cmp	r0, r2
 800f052:	bf0c      	ite	eq
 800f054:	2300      	moveq	r3, #0
 800f056:	f003 0301 	andne.w	r3, r3, #1
 800f05a:	b11b      	cbz	r3, 800f064 <HAL_TIM_OC_ConfigChannel+0x1a4>
 800f05c:	4b54      	ldr	r3, [pc, #336]	; (800f1b0 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 800f05e:	4298      	cmp	r0, r3
 800f060:	f040 808b 	bne.w	800f17a <HAL_TIM_OC_ConfigChannel+0x2ba>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f064:	4631      	mov	r1, r6
 800f066:	f7ff fec5 	bl	800edf4 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f06a:	2000      	movs	r0, #0
      break;
 800f06c:	e762      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f06e:	6828      	ldr	r0, [r5, #0]
 800f070:	4b4b      	ldr	r3, [pc, #300]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f072:	4a4c      	ldr	r2, [pc, #304]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800f074:	4298      	cmp	r0, r3
 800f076:	bf18      	it	ne
 800f078:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f07c:	494a      	ldr	r1, [pc, #296]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f07e:	bf14      	ite	ne
 800f080:	2301      	movne	r3, #1
 800f082:	2300      	moveq	r3, #0
 800f084:	4290      	cmp	r0, r2
 800f086:	bf0c      	ite	eq
 800f088:	2300      	moveq	r3, #0
 800f08a:	f003 0301 	andne.w	r3, r3, #1
 800f08e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f092:	4288      	cmp	r0, r1
 800f094:	bf0c      	ite	eq
 800f096:	2300      	moveq	r3, #0
 800f098:	f003 0301 	andne.w	r3, r3, #1
 800f09c:	4290      	cmp	r0, r2
 800f09e:	bf0c      	ite	eq
 800f0a0:	2300      	moveq	r3, #0
 800f0a2:	f003 0301 	andne.w	r3, r3, #1
 800f0a6:	b113      	cbz	r3, 800f0ae <HAL_TIM_OC_ConfigChannel+0x1ee>
 800f0a8:	4b42      	ldr	r3, [pc, #264]	; (800f1b4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800f0aa:	4298      	cmp	r0, r3
 800f0ac:	d15e      	bne.n	800f16c <HAL_TIM_OC_ConfigChannel+0x2ac>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f0ae:	4631      	mov	r1, r6
 800f0b0:	f7fe f9b8 	bl	800d424 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f0b4:	2000      	movs	r0, #0
      break;
 800f0b6:	e73d      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f0b8:	6828      	ldr	r0, [r5, #0]
 800f0ba:	4b39      	ldr	r3, [pc, #228]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f0bc:	4a39      	ldr	r2, [pc, #228]	; (800f1a4 <HAL_TIM_OC_ConfigChannel+0x2e4>)
 800f0be:	4298      	cmp	r0, r3
 800f0c0:	bf18      	it	ne
 800f0c2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f0c6:	4938      	ldr	r1, [pc, #224]	; (800f1a8 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 800f0c8:	bf14      	ite	ne
 800f0ca:	2301      	movne	r3, #1
 800f0cc:	2300      	moveq	r3, #0
 800f0ce:	4290      	cmp	r0, r2
 800f0d0:	bf0c      	ite	eq
 800f0d2:	2300      	moveq	r3, #0
 800f0d4:	f003 0301 	andne.w	r3, r3, #1
 800f0d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f0dc:	4288      	cmp	r0, r1
 800f0de:	bf0c      	ite	eq
 800f0e0:	2300      	moveq	r3, #0
 800f0e2:	f003 0301 	andne.w	r3, r3, #1
 800f0e6:	4290      	cmp	r0, r2
 800f0e8:	bf0c      	ite	eq
 800f0ea:	2300      	moveq	r3, #0
 800f0ec:	f003 0301 	andne.w	r3, r3, #1
 800f0f0:	b113      	cbz	r3, 800f0f8 <HAL_TIM_OC_ConfigChannel+0x238>
 800f0f2:	4b30      	ldr	r3, [pc, #192]	; (800f1b4 <HAL_TIM_OC_ConfigChannel+0x2f4>)
 800f0f4:	4298      	cmp	r0, r3
 800f0f6:	d132      	bne.n	800f15e <HAL_TIM_OC_ConfigChannel+0x29e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	f7fe f9f9 	bl	800d4f0 <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f0fe:	2000      	movs	r0, #0
      break;
 800f100:	e718      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f102:	6828      	ldr	r0, [r5, #0]
 800f104:	4b26      	ldr	r3, [pc, #152]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f106:	4298      	cmp	r0, r3
 800f108:	d003      	beq.n	800f112 <HAL_TIM_OC_ConfigChannel+0x252>
 800f10a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f10e:	4298      	cmp	r0, r3
 800f110:	d118      	bne.n	800f144 <HAL_TIM_OC_ConfigChannel+0x284>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f112:	4631      	mov	r1, r6
 800f114:	f7fe f8ca 	bl	800d2ac <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f118:	2000      	movs	r0, #0
      break;
 800f11a:	e70b      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f11c:	6828      	ldr	r0, [r5, #0]
 800f11e:	4b20      	ldr	r3, [pc, #128]	; (800f1a0 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 800f120:	4298      	cmp	r0, r3
 800f122:	d003      	beq.n	800f12c <HAL_TIM_OC_ConfigChannel+0x26c>
 800f124:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f128:	4298      	cmp	r0, r3
 800f12a:	d104      	bne.n	800f136 <HAL_TIM_OC_ConfigChannel+0x276>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f12c:	4631      	mov	r1, r6
 800f12e:	f7fe f8e9 	bl	800d304 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 800f132:	2000      	movs	r0, #0
      break;
 800f134:	e6fe      	b.n	800ef34 <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f136:	4819      	ldr	r0, [pc, #100]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f138:	f241 011d 	movw	r1, #4125	; 0x101d
 800f13c:	f7f4 fdfe 	bl	8003d3c <assert_failed>
 800f140:	6828      	ldr	r0, [r5, #0]
 800f142:	e7f3      	b.n	800f12c <HAL_TIM_OC_ConfigChannel+0x26c>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f144:	4815      	ldr	r0, [pc, #84]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f146:	f241 0113 	movw	r1, #4115	; 0x1013
 800f14a:	f7f4 fdf7 	bl	8003d3c <assert_failed>
 800f14e:	6828      	ldr	r0, [r5, #0]
 800f150:	e7df      	b.n	800f112 <HAL_TIM_OC_ConfigChannel+0x252>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 800f152:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 800f156:	4811      	ldr	r0, [pc, #68]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f158:	f7f4 fdf0 	bl	8003d3c <assert_failed>
 800f15c:	e6c5      	b.n	800eeea <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f15e:	480f      	ldr	r0, [pc, #60]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f160:	f241 0109 	movw	r1, #4105	; 0x1009
 800f164:	f7f4 fdea 	bl	8003d3c <assert_failed>
 800f168:	6828      	ldr	r0, [r5, #0]
 800f16a:	e7c5      	b.n	800f0f8 <HAL_TIM_OC_ConfigChannel+0x238>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f16c:	480b      	ldr	r0, [pc, #44]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f16e:	f640 71ff 	movw	r1, #4095	; 0xfff
 800f172:	f7f4 fde3 	bl	8003d3c <assert_failed>
 800f176:	6828      	ldr	r0, [r5, #0]
 800f178:	e799      	b.n	800f0ae <HAL_TIM_OC_ConfigChannel+0x1ee>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f17a:	4808      	ldr	r0, [pc, #32]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f17c:	f640 71f5 	movw	r1, #4085	; 0xff5
 800f180:	f7f4 fddc 	bl	8003d3c <assert_failed>
 800f184:	6828      	ldr	r0, [r5, #0]
 800f186:	e76d      	b.n	800f064 <HAL_TIM_OC_ConfigChannel+0x1a4>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f188:	4804      	ldr	r0, [pc, #16]	; (800f19c <HAL_TIM_OC_ConfigChannel+0x2dc>)
 800f18a:	f640 71eb 	movw	r1, #4075	; 0xfeb
 800f18e:	f7f4 fdd5 	bl	8003d3c <assert_failed>
 800f192:	6828      	ldr	r0, [r5, #0]
 800f194:	e732      	b.n	800effc <HAL_TIM_OC_ConfigChannel+0x13c>
 800f196:	bf00      	nop
 800f198:	00111111 	.word	0x00111111
 800f19c:	08029a64 	.word	0x08029a64
 800f1a0:	40010000 	.word	0x40010000
 800f1a4:	40000400 	.word	0x40000400
 800f1a8:	40000800 	.word	0x40000800
 800f1ac:	40002000 	.word	0x40002000
 800f1b0:	40001800 	.word	0x40001800
 800f1b4:	40010400 	.word	0x40010400

0800f1b8 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 800f1b8:	2a14      	cmp	r2, #20
{
 800f1ba:	b570      	push	{r4, r5, r6, lr}
 800f1bc:	4616      	mov	r6, r2
 800f1be:	4605      	mov	r5, r0
 800f1c0:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 800f1c2:	d938      	bls.n	800f236 <HAL_TIM_PWM_ConfigChannel+0x7e>
 800f1c4:	2a3c      	cmp	r2, #60	; 0x3c
 800f1c6:	d13a      	bne.n	800f23e <HAL_TIM_PWM_ConfigChannel+0x86>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800f1c8:	6822      	ldr	r2, [r4, #0]
 800f1ca:	4baa      	ldr	r3, [pc, #680]	; (800f474 <HAL_TIM_PWM_ConfigChannel+0x2bc>)
 800f1cc:	4013      	ands	r3, r2
 800f1ce:	2b60      	cmp	r3, #96	; 0x60
 800f1d0:	d004      	beq.n	800f1dc <HAL_TIM_PWM_ConfigChannel+0x24>
 800f1d2:	f022 0210 	bic.w	r2, r2, #16
 800f1d6:	4ba8      	ldr	r3, [pc, #672]	; (800f478 <HAL_TIM_PWM_ConfigChannel+0x2c0>)
 800f1d8:	429a      	cmp	r2, r3
 800f1da:	d14a      	bne.n	800f272 <HAL_TIM_PWM_ConfigChannel+0xba>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f1dc:	68a3      	ldr	r3, [r4, #8]
 800f1de:	f033 0302 	bics.w	r3, r3, #2
 800f1e2:	d132      	bne.n	800f24a <HAL_TIM_PWM_ConfigChannel+0x92>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800f1e4:	6923      	ldr	r3, [r4, #16]
 800f1e6:	f033 0304 	bics.w	r3, r3, #4
 800f1ea:	d137      	bne.n	800f25c <HAL_TIM_PWM_ConfigChannel+0xa4>
  __HAL_LOCK(htim);
 800f1ec:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f1f0:	2b01      	cmp	r3, #1
 800f1f2:	d03c      	beq.n	800f26e <HAL_TIM_PWM_ConfigChannel+0xb6>
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 800f1fa:	2e14      	cmp	r6, #20
 800f1fc:	d816      	bhi.n	800f22c <HAL_TIM_PWM_ConfigChannel+0x74>
 800f1fe:	e8df f016 	tbh	[pc, r6, lsl #1]
 800f202:	0075      	.short	0x0075
 800f204:	00150015 	.word	0x00150015
 800f208:	014b0015 	.word	0x014b0015
 800f20c:	00150015 	.word	0x00150015
 800f210:	00d20015 	.word	0x00d20015
 800f214:	00150015 	.word	0x00150015
 800f218:	01050015 	.word	0x01050015
 800f21c:	00150015 	.word	0x00150015
 800f220:	003e0015 	.word	0x003e0015
 800f224:	00150015 	.word	0x00150015
 800f228:	00590015 	.word	0x00590015
  __HAL_LOCK(htim);
 800f22c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 800f22e:	2300      	movs	r3, #0
 800f230:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800f234:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800f236:	4b91      	ldr	r3, [pc, #580]	; (800f47c <HAL_TIM_PWM_ConfigChannel+0x2c4>)
 800f238:	40d3      	lsrs	r3, r2
 800f23a:	07db      	lsls	r3, r3, #31
 800f23c:	d4c4      	bmi.n	800f1c8 <HAL_TIM_PWM_ConfigChannel+0x10>
 800f23e:	f241 01a7 	movw	r1, #4263	; 0x10a7
 800f242:	488f      	ldr	r0, [pc, #572]	; (800f480 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800f244:	f7f4 fd7a 	bl	8003d3c <assert_failed>
 800f248:	e7be      	b.n	800f1c8 <HAL_TIM_PWM_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 800f24a:	f241 01a9 	movw	r1, #4265	; 0x10a9
 800f24e:	488c      	ldr	r0, [pc, #560]	; (800f480 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800f250:	f7f4 fd74 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 800f254:	6923      	ldr	r3, [r4, #16]
 800f256:	f033 0304 	bics.w	r3, r3, #4
 800f25a:	d0c7      	beq.n	800f1ec <HAL_TIM_PWM_ConfigChannel+0x34>
 800f25c:	f241 01aa 	movw	r1, #4266	; 0x10aa
 800f260:	4887      	ldr	r0, [pc, #540]	; (800f480 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800f262:	f7f4 fd6b 	bl	8003d3c <assert_failed>
  __HAL_LOCK(htim);
 800f266:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d1c2      	bne.n	800f1f4 <HAL_TIM_PWM_ConfigChannel+0x3c>
 800f26e:	2002      	movs	r0, #2
}
 800f270:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 800f272:	f241 01a8 	movw	r1, #4264	; 0x10a8
 800f276:	4882      	ldr	r0, [pc, #520]	; (800f480 <HAL_TIM_PWM_ConfigChannel+0x2c8>)
 800f278:	f7f4 fd60 	bl	8003d3c <assert_failed>
 800f27c:	e7ae      	b.n	800f1dc <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f27e:	6828      	ldr	r0, [r5, #0]
 800f280:	4b80      	ldr	r3, [pc, #512]	; (800f484 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800f282:	4298      	cmp	r0, r3
 800f284:	d004      	beq.n	800f290 <HAL_TIM_PWM_ConfigChannel+0xd8>
 800f286:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f28a:	4298      	cmp	r0, r3
 800f28c:	f040 814c 	bne.w	800f528 <HAL_TIM_PWM_ConfigChannel+0x370>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800f290:	4621      	mov	r1, r4
 800f292:	f7fe f80b 	bl	800d2ac <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f296:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f298:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f29a:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800f29c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f29e:	f041 0108 	orr.w	r1, r1, #8
 800f2a2:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800f2a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f2a6:	f021 0104 	bic.w	r1, r1, #4
 800f2aa:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800f2ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2ae:	4322      	orrs	r2, r4
 800f2b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f2b2:	e7bc      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f2b4:	6828      	ldr	r0, [r5, #0]
 800f2b6:	4b73      	ldr	r3, [pc, #460]	; (800f484 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800f2b8:	4298      	cmp	r0, r3
 800f2ba:	d004      	beq.n	800f2c6 <HAL_TIM_PWM_ConfigChannel+0x10e>
 800f2bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	f040 812a 	bne.w	800f51a <HAL_TIM_PWM_ConfigChannel+0x362>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800f2c6:	4621      	mov	r1, r4
 800f2c8:	f7fe f81c 	bl	800d304 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2cc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f2ce:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f2d0:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800f2d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f2d4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800f2d8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800f2da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800f2dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f2e0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800f2e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f2e4:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800f2e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800f2ea:	e7a0      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f2ec:	6828      	ldr	r0, [r5, #0]
 800f2ee:	4b65      	ldr	r3, [pc, #404]	; (800f484 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800f2f0:	4a65      	ldr	r2, [pc, #404]	; (800f488 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800f2f2:	4298      	cmp	r0, r3
 800f2f4:	bf18      	it	ne
 800f2f6:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f2fa:	4964      	ldr	r1, [pc, #400]	; (800f48c <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800f2fc:	bf14      	ite	ne
 800f2fe:	2301      	movne	r3, #1
 800f300:	2300      	moveq	r3, #0
 800f302:	4290      	cmp	r0, r2
 800f304:	bf0c      	ite	eq
 800f306:	2300      	moveq	r3, #0
 800f308:	f003 0301 	andne.w	r3, r3, #1
 800f30c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f310:	4288      	cmp	r0, r1
 800f312:	bf0c      	ite	eq
 800f314:	2300      	moveq	r3, #0
 800f316:	f003 0301 	andne.w	r3, r3, #1
 800f31a:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800f31e:	4290      	cmp	r0, r2
 800f320:	bf0c      	ite	eq
 800f322:	2300      	moveq	r3, #0
 800f324:	f003 0301 	andne.w	r3, r3, #1
 800f328:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800f32c:	4288      	cmp	r0, r1
 800f32e:	bf0c      	ite	eq
 800f330:	2300      	moveq	r3, #0
 800f332:	f003 0301 	andne.w	r3, r3, #1
 800f336:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f33a:	4290      	cmp	r0, r2
 800f33c:	bf0c      	ite	eq
 800f33e:	2300      	moveq	r3, #0
 800f340:	f003 0301 	andne.w	r3, r3, #1
 800f344:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f348:	4288      	cmp	r0, r1
 800f34a:	bf0c      	ite	eq
 800f34c:	2300      	moveq	r3, #0
 800f34e:	f003 0301 	andne.w	r3, r3, #1
 800f352:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f356:	4290      	cmp	r0, r2
 800f358:	bf0c      	ite	eq
 800f35a:	2300      	moveq	r3, #0
 800f35c:	f003 0301 	andne.w	r3, r3, #1
 800f360:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
 800f364:	4288      	cmp	r0, r1
 800f366:	bf0c      	ite	eq
 800f368:	2300      	moveq	r3, #0
 800f36a:	f003 0301 	andne.w	r3, r3, #1
 800f36e:	4290      	cmp	r0, r2
 800f370:	bf0c      	ite	eq
 800f372:	2300      	moveq	r3, #0
 800f374:	f003 0301 	andne.w	r3, r3, #1
 800f378:	b11b      	cbz	r3, 800f382 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800f37a:	4b45      	ldr	r3, [pc, #276]	; (800f490 <HAL_TIM_PWM_ConfigChannel+0x2d8>)
 800f37c:	4298      	cmp	r0, r3
 800f37e:	f040 80ef 	bne.w	800f560 <HAL_TIM_PWM_ConfigChannel+0x3a8>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f382:	4621      	mov	r1, r4
 800f384:	f7fd ffea 	bl	800d35c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f388:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f38a:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f38c:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f38e:	6999      	ldr	r1, [r3, #24]
 800f390:	f041 0108 	orr.w	r1, r1, #8
 800f394:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f396:	6999      	ldr	r1, [r3, #24]
 800f398:	f021 0104 	bic.w	r1, r1, #4
 800f39c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f39e:	699a      	ldr	r2, [r3, #24]
 800f3a0:	4322      	orrs	r2, r4
 800f3a2:	619a      	str	r2, [r3, #24]
      break;
 800f3a4:	e743      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f3a6:	6828      	ldr	r0, [r5, #0]
 800f3a8:	4b36      	ldr	r3, [pc, #216]	; (800f484 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800f3aa:	4a37      	ldr	r2, [pc, #220]	; (800f488 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800f3ac:	4298      	cmp	r0, r3
 800f3ae:	bf18      	it	ne
 800f3b0:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f3b4:	4935      	ldr	r1, [pc, #212]	; (800f48c <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800f3b6:	bf14      	ite	ne
 800f3b8:	2301      	movne	r3, #1
 800f3ba:	2300      	moveq	r3, #0
 800f3bc:	4290      	cmp	r0, r2
 800f3be:	bf0c      	ite	eq
 800f3c0:	2300      	moveq	r3, #0
 800f3c2:	f003 0301 	andne.w	r3, r3, #1
 800f3c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f3ca:	4288      	cmp	r0, r1
 800f3cc:	bf0c      	ite	eq
 800f3ce:	2300      	moveq	r3, #0
 800f3d0:	f003 0301 	andne.w	r3, r3, #1
 800f3d4:	4290      	cmp	r0, r2
 800f3d6:	bf0c      	ite	eq
 800f3d8:	2300      	moveq	r3, #0
 800f3da:	f003 0301 	andne.w	r3, r3, #1
 800f3de:	b11b      	cbz	r3, 800f3e8 <HAL_TIM_PWM_ConfigChannel+0x230>
 800f3e0:	4b2c      	ldr	r3, [pc, #176]	; (800f494 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800f3e2:	4298      	cmp	r0, r3
 800f3e4:	f040 80ae 	bne.w	800f544 <HAL_TIM_PWM_ConfigChannel+0x38c>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f3e8:	4621      	mov	r1, r4
 800f3ea:	f7fe f81b 	bl	800d424 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3ee:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f3f0:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f3f2:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f3f4:	69d9      	ldr	r1, [r3, #28]
 800f3f6:	f041 0108 	orr.w	r1, r1, #8
 800f3fa:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f3fc:	69d9      	ldr	r1, [r3, #28]
 800f3fe:	f021 0104 	bic.w	r1, r1, #4
 800f402:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f404:	69da      	ldr	r2, [r3, #28]
 800f406:	4322      	orrs	r2, r4
 800f408:	61da      	str	r2, [r3, #28]
      break;
 800f40a:	e710      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f40c:	6828      	ldr	r0, [r5, #0]
 800f40e:	4b1d      	ldr	r3, [pc, #116]	; (800f484 <HAL_TIM_PWM_ConfigChannel+0x2cc>)
 800f410:	4a1d      	ldr	r2, [pc, #116]	; (800f488 <HAL_TIM_PWM_ConfigChannel+0x2d0>)
 800f412:	4298      	cmp	r0, r3
 800f414:	bf18      	it	ne
 800f416:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f41a:	491c      	ldr	r1, [pc, #112]	; (800f48c <HAL_TIM_PWM_ConfigChannel+0x2d4>)
 800f41c:	bf14      	ite	ne
 800f41e:	2301      	movne	r3, #1
 800f420:	2300      	moveq	r3, #0
 800f422:	4290      	cmp	r0, r2
 800f424:	bf0c      	ite	eq
 800f426:	2300      	moveq	r3, #0
 800f428:	f003 0301 	andne.w	r3, r3, #1
 800f42c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f430:	4288      	cmp	r0, r1
 800f432:	bf0c      	ite	eq
 800f434:	2300      	moveq	r3, #0
 800f436:	f003 0301 	andne.w	r3, r3, #1
 800f43a:	4290      	cmp	r0, r2
 800f43c:	bf0c      	ite	eq
 800f43e:	2300      	moveq	r3, #0
 800f440:	f003 0301 	andne.w	r3, r3, #1
 800f444:	b113      	cbz	r3, 800f44c <HAL_TIM_PWM_ConfigChannel+0x294>
 800f446:	4b13      	ldr	r3, [pc, #76]	; (800f494 <HAL_TIM_PWM_ConfigChannel+0x2dc>)
 800f448:	4298      	cmp	r0, r3
 800f44a:	d174      	bne.n	800f536 <HAL_TIM_PWM_ConfigChannel+0x37e>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f44c:	4621      	mov	r1, r4
 800f44e:	f7fe f84f 	bl	800d4f0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f452:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f454:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f456:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f458:	69d9      	ldr	r1, [r3, #28]
 800f45a:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800f45e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f460:	69d9      	ldr	r1, [r3, #28]
 800f462:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f466:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f468:	69da      	ldr	r2, [r3, #28]
 800f46a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800f46e:	61da      	str	r2, [r3, #28]
      break;
 800f470:	e6dd      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
 800f472:	bf00      	nop
 800f474:	fffeffef 	.word	0xfffeffef
 800f478:	00010040 	.word	0x00010040
 800f47c:	00111111 	.word	0x00111111
 800f480:	08029a64 	.word	0x08029a64
 800f484:	40010000 	.word	0x40010000
 800f488:	40000400 	.word	0x40000400
 800f48c:	40000800 	.word	0x40000800
 800f490:	40002000 	.word	0x40002000
 800f494:	40010400 	.word	0x40010400
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f498:	6828      	ldr	r0, [r5, #0]
 800f49a:	4b35      	ldr	r3, [pc, #212]	; (800f570 <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 800f49c:	4a35      	ldr	r2, [pc, #212]	; (800f574 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 800f49e:	4298      	cmp	r0, r3
 800f4a0:	bf18      	it	ne
 800f4a2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800f4a6:	4934      	ldr	r1, [pc, #208]	; (800f578 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 800f4a8:	bf14      	ite	ne
 800f4aa:	2301      	movne	r3, #1
 800f4ac:	2300      	moveq	r3, #0
 800f4ae:	4290      	cmp	r0, r2
 800f4b0:	bf0c      	ite	eq
 800f4b2:	2300      	moveq	r3, #0
 800f4b4:	f003 0301 	andne.w	r3, r3, #1
 800f4b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f4bc:	4288      	cmp	r0, r1
 800f4be:	bf0c      	ite	eq
 800f4c0:	2300      	moveq	r3, #0
 800f4c2:	f003 0301 	andne.w	r3, r3, #1
 800f4c6:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 800f4ca:	4290      	cmp	r0, r2
 800f4cc:	bf0c      	ite	eq
 800f4ce:	2300      	moveq	r3, #0
 800f4d0:	f003 0301 	andne.w	r3, r3, #1
 800f4d4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 800f4d8:	4288      	cmp	r0, r1
 800f4da:	bf0c      	ite	eq
 800f4dc:	2300      	moveq	r3, #0
 800f4de:	f003 0301 	andne.w	r3, r3, #1
 800f4e2:	4290      	cmp	r0, r2
 800f4e4:	bf0c      	ite	eq
 800f4e6:	2300      	moveq	r3, #0
 800f4e8:	f003 0301 	andne.w	r3, r3, #1
 800f4ec:	b113      	cbz	r3, 800f4f4 <HAL_TIM_PWM_ConfigChannel+0x33c>
 800f4ee:	4b23      	ldr	r3, [pc, #140]	; (800f57c <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 800f4f0:	4298      	cmp	r0, r3
 800f4f2:	d12e      	bne.n	800f552 <HAL_TIM_PWM_ConfigChannel+0x39a>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f4f4:	4621      	mov	r1, r4
 800f4f6:	f7ff fc7d 	bl	800edf4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f4fa:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f4fc:	6924      	ldr	r4, [r4, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800f4fe:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f500:	6999      	ldr	r1, [r3, #24]
 800f502:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 800f506:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f508:	6999      	ldr	r1, [r3, #24]
 800f50a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800f50e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f510:	699a      	ldr	r2, [r3, #24]
 800f512:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800f516:	619a      	str	r2, [r3, #24]
      break;
 800f518:	e689      	b.n	800f22e <HAL_TIM_PWM_ConfigChannel+0x76>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 800f51a:	4819      	ldr	r0, [pc, #100]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f51c:	f241 1109 	movw	r1, #4361	; 0x1109
 800f520:	f7f4 fc0c 	bl	8003d3c <assert_failed>
 800f524:	6828      	ldr	r0, [r5, #0]
 800f526:	e6ce      	b.n	800f2c6 <HAL_TIM_PWM_ConfigChannel+0x10e>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 800f528:	4815      	ldr	r0, [pc, #84]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f52a:	f241 01f8 	movw	r1, #4344	; 0x10f8
 800f52e:	f7f4 fc05 	bl	8003d3c <assert_failed>
 800f532:	6828      	ldr	r0, [r5, #0]
 800f534:	e6ac      	b.n	800f290 <HAL_TIM_PWM_ConfigChannel+0xd8>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f536:	4812      	ldr	r0, [pc, #72]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f538:	f241 01e7 	movw	r1, #4327	; 0x10e7
 800f53c:	f7f4 fbfe 	bl	8003d3c <assert_failed>
 800f540:	6828      	ldr	r0, [r5, #0]
 800f542:	e783      	b.n	800f44c <HAL_TIM_PWM_ConfigChannel+0x294>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f544:	480e      	ldr	r0, [pc, #56]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f546:	f241 01d6 	movw	r1, #4310	; 0x10d6
 800f54a:	f7f4 fbf7 	bl	8003d3c <assert_failed>
 800f54e:	6828      	ldr	r0, [r5, #0]
 800f550:	e74a      	b.n	800f3e8 <HAL_TIM_PWM_ConfigChannel+0x230>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f552:	480b      	ldr	r0, [pc, #44]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f554:	f241 01c5 	movw	r1, #4293	; 0x10c5
 800f558:	f7f4 fbf0 	bl	8003d3c <assert_failed>
 800f55c:	6828      	ldr	r0, [r5, #0]
 800f55e:	e7c9      	b.n	800f4f4 <HAL_TIM_PWM_ConfigChannel+0x33c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f560:	4807      	ldr	r0, [pc, #28]	; (800f580 <HAL_TIM_PWM_ConfigChannel+0x3c8>)
 800f562:	f241 01b4 	movw	r1, #4276	; 0x10b4
 800f566:	f7f4 fbe9 	bl	8003d3c <assert_failed>
 800f56a:	6828      	ldr	r0, [r5, #0]
 800f56c:	e709      	b.n	800f382 <HAL_TIM_PWM_ConfigChannel+0x1ca>
 800f56e:	bf00      	nop
 800f570:	40010000 	.word	0x40010000
 800f574:	40000400 	.word	0x40000400
 800f578:	40000800 	.word	0x40000800
 800f57c:	40001800 	.word	0x40001800
 800f580:	08029a64 	.word	0x08029a64

0800f584 <TIM_TI1_SetConfig>:
{
 800f584:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f586:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f588:	4e1b      	ldr	r6, [pc, #108]	; (800f5f8 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f58a:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f58e:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f590:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f592:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 800f594:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f596:	d01d      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f598:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f59c:	d01a      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f59e:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800f5a2:	42b0      	cmp	r0, r6
 800f5a4:	d016      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f5a6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f5aa:	42b0      	cmp	r0, r6
 800f5ac:	d012      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f5ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800f5b2:	42b0      	cmp	r0, r6
 800f5b4:	d00e      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f5b6:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 800f5ba:	42b0      	cmp	r0, r6
 800f5bc:	d00a      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f5be:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 800f5c2:	42b0      	cmp	r0, r6
 800f5c4:	d006      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
 800f5c6:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 800f5ca:	42b0      	cmp	r0, r6
 800f5cc:	d002      	beq.n	800f5d4 <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f5ce:	f044 0201 	orr.w	r2, r4, #1
 800f5d2:	e002      	b.n	800f5da <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f5d4:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 800f5d8:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f5da:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f5dc:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f5e4:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f5e8:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f5ea:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f5ec:	4313      	orrs	r3, r2
}
 800f5ee:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 800f5f0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800f5f2:	6201      	str	r1, [r0, #32]
}
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	40010000 	.word	0x40010000

0800f5fc <HAL_TIM_IC_ConfigChannel>:
{
 800f5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fe:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f600:	4ba5      	ldr	r3, [pc, #660]	; (800f898 <HAL_TIM_IC_ConfigChannel+0x29c>)
{
 800f602:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f604:	4fa5      	ldr	r7, [pc, #660]	; (800f89c <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800f606:	6829      	ldr	r1, [r5, #0]
{
 800f608:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f60a:	48a5      	ldr	r0, [pc, #660]	; (800f8a0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800f60c:	4299      	cmp	r1, r3
 800f60e:	bf18      	it	ne
 800f610:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 800f614:	4aa3      	ldr	r2, [pc, #652]	; (800f8a4 <HAL_TIM_IC_ConfigChannel+0x2a8>)
 800f616:	bf14      	ite	ne
 800f618:	2301      	movne	r3, #1
 800f61a:	2300      	moveq	r3, #0
 800f61c:	42b9      	cmp	r1, r7
 800f61e:	bf0c      	ite	eq
 800f620:	2300      	moveq	r3, #0
 800f622:	f003 0301 	andne.w	r3, r3, #1
 800f626:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800f62a:	4281      	cmp	r1, r0
 800f62c:	bf0c      	ite	eq
 800f62e:	2300      	moveq	r3, #0
 800f630:	f003 0301 	andne.w	r3, r3, #1
 800f634:	f500 309c 	add.w	r0, r0, #79872	; 0x13800
 800f638:	4291      	cmp	r1, r2
 800f63a:	bf0c      	ite	eq
 800f63c:	2300      	moveq	r3, #0
 800f63e:	f003 0301 	andne.w	r3, r3, #1
 800f642:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800f646:	42b9      	cmp	r1, r7
 800f648:	bf0c      	ite	eq
 800f64a:	2300      	moveq	r3, #0
 800f64c:	f003 0301 	andne.w	r3, r3, #1
 800f650:	f507 4788 	add.w	r7, r7, #17408	; 0x4400
 800f654:	4281      	cmp	r1, r0
 800f656:	bf0c      	ite	eq
 800f658:	2300      	moveq	r3, #0
 800f65a:	f003 0301 	andne.w	r3, r3, #1
 800f65e:	f5a0 3094 	sub.w	r0, r0, #75776	; 0x12800
 800f662:	4291      	cmp	r1, r2
 800f664:	bf0c      	ite	eq
 800f666:	2300      	moveq	r3, #0
 800f668:	f003 0301 	andne.w	r3, r3, #1
 800f66c:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800f670:	42b9      	cmp	r1, r7
 800f672:	bf0c      	ite	eq
 800f674:	2300      	moveq	r3, #0
 800f676:	f003 0301 	andne.w	r3, r3, #1
 800f67a:	4281      	cmp	r1, r0
 800f67c:	bf0c      	ite	eq
 800f67e:	2300      	moveq	r3, #0
 800f680:	f003 0301 	andne.w	r3, r3, #1
 800f684:	4291      	cmp	r1, r2
 800f686:	bf0c      	ite	eq
 800f688:	2300      	moveq	r3, #0
 800f68a:	f003 0301 	andne.w	r3, r3, #1
 800f68e:	b11b      	cbz	r3, 800f698 <HAL_TIM_IC_ConfigChannel+0x9c>
 800f690:	4b85      	ldr	r3, [pc, #532]	; (800f8a8 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 800f692:	4299      	cmp	r1, r3
 800f694:	f040 8156 	bne.w	800f944 <HAL_TIM_IC_ConfigChannel+0x348>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	f033 0202 	bics.w	r2, r3, #2
 800f69e:	d001      	beq.n	800f6a4 <HAL_TIM_IC_ConfigChannel+0xa8>
 800f6a0:	2b0a      	cmp	r3, #10
 800f6a2:	d11e      	bne.n	800f6e2 <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	2b02      	cmp	r3, #2
 800f6aa:	d823      	bhi.n	800f6f4 <HAL_TIM_IC_ConfigChannel+0xf8>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800f6ac:	68a3      	ldr	r3, [r4, #8]
 800f6ae:	f033 030c 	bics.w	r3, r3, #12
 800f6b2:	d128      	bne.n	800f706 <HAL_TIM_IC_ConfigChannel+0x10a>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800f6b4:	68e3      	ldr	r3, [r4, #12]
 800f6b6:	2b0f      	cmp	r3, #15
 800f6b8:	d82d      	bhi.n	800f716 <HAL_TIM_IC_ConfigChannel+0x11a>
  __HAL_LOCK(htim);
 800f6ba:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d032      	beq.n	800f728 <HAL_TIM_IC_ConfigChannel+0x12c>
 800f6c2:	2001      	movs	r0, #1
 800f6c4:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 800f6c8:	b386      	cbz	r6, 800f72c <HAL_TIM_IC_ConfigChannel+0x130>
  else if (Channel == TIM_CHANNEL_2)
 800f6ca:	2e04      	cmp	r6, #4
 800f6cc:	d042      	beq.n	800f754 <HAL_TIM_IC_ConfigChannel+0x158>
  else if (Channel == TIM_CHANNEL_3)
 800f6ce:	2e08      	cmp	r6, #8
 800f6d0:	f000 80f2 	beq.w	800f8b8 <HAL_TIM_IC_ConfigChannel+0x2bc>
  else if (Channel == TIM_CHANNEL_4)
 800f6d4:	2e0c      	cmp	r6, #12
 800f6d6:	f000 8094 	beq.w	800f802 <HAL_TIM_IC_ConfigChannel+0x206>
  __HAL_UNLOCK(htim);
 800f6da:	2300      	movs	r3, #0
 800f6dc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 800f6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 800f6e2:	f241 0141 	movw	r1, #4161	; 0x1041
 800f6e6:	4871      	ldr	r0, [pc, #452]	; (800f8ac <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800f6e8:	f7f4 fb28 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 800f6ec:	6863      	ldr	r3, [r4, #4]
 800f6ee:	3b01      	subs	r3, #1
 800f6f0:	2b02      	cmp	r3, #2
 800f6f2:	d9db      	bls.n	800f6ac <HAL_TIM_IC_ConfigChannel+0xb0>
 800f6f4:	f241 0142 	movw	r1, #4162	; 0x1042
 800f6f8:	486c      	ldr	r0, [pc, #432]	; (800f8ac <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800f6fa:	f7f4 fb1f 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 800f6fe:	68a3      	ldr	r3, [r4, #8]
 800f700:	f033 030c 	bics.w	r3, r3, #12
 800f704:	d0d6      	beq.n	800f6b4 <HAL_TIM_IC_ConfigChannel+0xb8>
 800f706:	f241 0143 	movw	r1, #4163	; 0x1043
 800f70a:	4868      	ldr	r0, [pc, #416]	; (800f8ac <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800f70c:	f7f4 fb16 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 800f710:	68e3      	ldr	r3, [r4, #12]
 800f712:	2b0f      	cmp	r3, #15
 800f714:	d9d1      	bls.n	800f6ba <HAL_TIM_IC_ConfigChannel+0xbe>
 800f716:	f241 0144 	movw	r1, #4164	; 0x1044
 800f71a:	4864      	ldr	r0, [pc, #400]	; (800f8ac <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800f71c:	f7f4 fb0e 	bl	8003d3c <assert_failed>
  __HAL_LOCK(htim);
 800f720:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800f724:	2b01      	cmp	r3, #1
 800f726:	d1cc      	bne.n	800f6c2 <HAL_TIM_IC_ConfigChannel+0xc6>
 800f728:	2002      	movs	r0, #2
}
 800f72a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 800f72c:	e9d4 1200 	ldrd	r1, r2, [r4]
 800f730:	68e3      	ldr	r3, [r4, #12]
 800f732:	6828      	ldr	r0, [r5, #0]
 800f734:	f7ff ff26 	bl	800f584 <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f738:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f73a:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f73c:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800f73e:	6999      	ldr	r1, [r3, #24]
 800f740:	f021 010c 	bic.w	r1, r1, #12
 800f744:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800f746:	699a      	ldr	r2, [r3, #24]
 800f748:	4322      	orrs	r2, r4
 800f74a:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 800f74c:	2300      	movs	r3, #0
 800f74e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800f752:	e7c5      	b.n	800f6e0 <HAL_TIM_IC_ConfigChannel+0xe4>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f754:	682a      	ldr	r2, [r5, #0]
 800f756:	4b50      	ldr	r3, [pc, #320]	; (800f898 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800f758:	4950      	ldr	r1, [pc, #320]	; (800f89c <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800f75a:	429a      	cmp	r2, r3
 800f75c:	bf18      	it	ne
 800f75e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f762:	484f      	ldr	r0, [pc, #316]	; (800f8a0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800f764:	bf14      	ite	ne
 800f766:	2301      	movne	r3, #1
 800f768:	2300      	moveq	r3, #0
 800f76a:	428a      	cmp	r2, r1
 800f76c:	bf0c      	ite	eq
 800f76e:	2300      	moveq	r3, #0
 800f770:	f003 0301 	andne.w	r3, r3, #1
 800f774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f778:	4282      	cmp	r2, r0
 800f77a:	bf0c      	ite	eq
 800f77c:	2300      	moveq	r3, #0
 800f77e:	f003 0301 	andne.w	r3, r3, #1
 800f782:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800f786:	428a      	cmp	r2, r1
 800f788:	bf0c      	ite	eq
 800f78a:	2300      	moveq	r3, #0
 800f78c:	f003 0301 	andne.w	r3, r3, #1
 800f790:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 800f794:	4282      	cmp	r2, r0
 800f796:	bf0c      	ite	eq
 800f798:	2300      	moveq	r3, #0
 800f79a:	f003 0301 	andne.w	r3, r3, #1
 800f79e:	428a      	cmp	r2, r1
 800f7a0:	bf0c      	ite	eq
 800f7a2:	2300      	moveq	r3, #0
 800f7a4:	f003 0301 	andne.w	r3, r3, #1
 800f7a8:	b11b      	cbz	r3, 800f7b2 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f7aa:	4b41      	ldr	r3, [pc, #260]	; (800f8b0 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 800f7ac:	429a      	cmp	r2, r3
 800f7ae:	f040 80d6 	bne.w	800f95e <HAL_TIM_IC_ConfigChannel+0x362>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7b2:	6a11      	ldr	r1, [r2, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f7b4:	2000      	movs	r0, #0
    TIM_TI2_SetConfig(htim->Instance,
 800f7b6:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7b8:	f021 0110 	bic.w	r1, r1, #16
    TIM_TI2_SetConfig(htim->Instance,
 800f7bc:	6826      	ldr	r6, [r4, #0]
 800f7be:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7c0:	6211      	str	r1, [r2, #32]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f7c2:	0136      	lsls	r6, r6, #4
  tmpccmr1 = TIMx->CCMR1;
 800f7c4:	6991      	ldr	r1, [r2, #24]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f7c6:	031b      	lsls	r3, r3, #12
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f7c8:	f006 06a0 	and.w	r6, r6, #160	; 0xa0
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f7cc:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f7ce:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f7d2:	b29b      	uxth	r3, r3
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f7d4:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer = TIMx->CCER;
 800f7d8:	6a17      	ldr	r7, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7da:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7de:	f027 07a0 	bic.w	r7, r7, #160	; 0xa0
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f7e2:	430b      	orrs	r3, r1
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f7e4:	433e      	orrs	r6, r7
  TIMx->CCMR1 = tmpccmr1 ;
 800f7e6:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 800f7e8:	6216      	str	r6, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800f7ea:	6991      	ldr	r1, [r2, #24]
 800f7ec:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800f7f0:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800f7f2:	6993      	ldr	r3, [r2, #24]
 800f7f4:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800f7f8:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800f800:	e76e      	b.n	800f6e0 <HAL_TIM_IC_ConfigChannel+0xe4>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 800f802:	682b      	ldr	r3, [r5, #0]
 800f804:	4a24      	ldr	r2, [pc, #144]	; (800f898 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800f806:	4925      	ldr	r1, [pc, #148]	; (800f89c <HAL_TIM_IC_ConfigChannel+0x2a0>)
 800f808:	4293      	cmp	r3, r2
 800f80a:	bf18      	it	ne
 800f80c:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f810:	4823      	ldr	r0, [pc, #140]	; (800f8a0 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 800f812:	bf14      	ite	ne
 800f814:	2201      	movne	r2, #1
 800f816:	2200      	moveq	r2, #0
 800f818:	428b      	cmp	r3, r1
 800f81a:	bf0c      	ite	eq
 800f81c:	2200      	moveq	r2, #0
 800f81e:	f002 0201 	andne.w	r2, r2, #1
 800f822:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f826:	4283      	cmp	r3, r0
 800f828:	bf0c      	ite	eq
 800f82a:	2200      	moveq	r2, #0
 800f82c:	f002 0201 	andne.w	r2, r2, #1
 800f830:	428b      	cmp	r3, r1
 800f832:	bf0c      	ite	eq
 800f834:	2200      	moveq	r2, #0
 800f836:	f002 0201 	andne.w	r2, r2, #1
 800f83a:	b142      	cbz	r2, 800f84e <HAL_TIM_IC_ConfigChannel+0x252>
 800f83c:	4a1d      	ldr	r2, [pc, #116]	; (800f8b4 <HAL_TIM_IC_ConfigChannel+0x2b8>)
 800f83e:	4293      	cmp	r3, r2
 800f840:	d005      	beq.n	800f84e <HAL_TIM_IC_ConfigChannel+0x252>
 800f842:	f241 017a 	movw	r1, #4218	; 0x107a
 800f846:	4819      	ldr	r0, [pc, #100]	; (800f8ac <HAL_TIM_IC_ConfigChannel+0x2b0>)
 800f848:	f7f4 fa78 	bl	8003d3c <assert_failed>
 800f84c:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f84e:	6a19      	ldr	r1, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f850:	2000      	movs	r0, #0
    TIM_TI4_SetConfig(htim->Instance,
 800f852:	6867      	ldr	r7, [r4, #4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f854:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    TIM_TI4_SetConfig(htim->Instance,
 800f858:	6826      	ldr	r6, [r4, #0]
 800f85a:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f85c:	6219      	str	r1, [r3, #32]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f85e:	0336      	lsls	r6, r6, #12
  tmpccmr2 = TIMx->CCMR2;
 800f860:	69d9      	ldr	r1, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f862:	0312      	lsls	r2, r2, #12
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f864:	f406 4620 	and.w	r6, r6, #40960	; 0xa000
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f868:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f86a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f86e:	b292      	uxth	r2, r2
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f870:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccer = TIMx->CCER;
 800f874:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f876:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f87a:	f427 4720 	bic.w	r7, r7, #40960	; 0xa000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f87e:	430a      	orrs	r2, r1
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f880:	433e      	orrs	r6, r7
  TIMx->CCMR2 = tmpccmr2;
 800f882:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f884:	621e      	str	r6, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800f886:	69d9      	ldr	r1, [r3, #28]
 800f888:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 800f88c:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800f88e:	69da      	ldr	r2, [r3, #28]
 800f890:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800f894:	61da      	str	r2, [r3, #28]
 800f896:	e720      	b.n	800f6da <HAL_TIM_IC_ConfigChannel+0xde>
 800f898:	40010000 	.word	0x40010000
 800f89c:	40000400 	.word	0x40000400
 800f8a0:	40000800 	.word	0x40000800
 800f8a4:	40000c00 	.word	0x40000c00
 800f8a8:	40002000 	.word	0x40002000
 800f8ac:	08029a64 	.word	0x08029a64
 800f8b0:	40001800 	.word	0x40001800
 800f8b4:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f8b8:	682b      	ldr	r3, [r5, #0]
 800f8ba:	4a2c      	ldr	r2, [pc, #176]	; (800f96c <HAL_TIM_IC_ConfigChannel+0x370>)
 800f8bc:	492c      	ldr	r1, [pc, #176]	; (800f970 <HAL_TIM_IC_ConfigChannel+0x374>)
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	bf18      	it	ne
 800f8c2:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800f8c6:	482b      	ldr	r0, [pc, #172]	; (800f974 <HAL_TIM_IC_ConfigChannel+0x378>)
 800f8c8:	bf14      	ite	ne
 800f8ca:	2201      	movne	r2, #1
 800f8cc:	2200      	moveq	r2, #0
 800f8ce:	428b      	cmp	r3, r1
 800f8d0:	bf0c      	ite	eq
 800f8d2:	2200      	moveq	r2, #0
 800f8d4:	f002 0201 	andne.w	r2, r2, #1
 800f8d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f8dc:	4283      	cmp	r3, r0
 800f8de:	bf0c      	ite	eq
 800f8e0:	2200      	moveq	r2, #0
 800f8e2:	f002 0201 	andne.w	r2, r2, #1
 800f8e6:	428b      	cmp	r3, r1
 800f8e8:	bf0c      	ite	eq
 800f8ea:	2200      	moveq	r2, #0
 800f8ec:	f002 0201 	andne.w	r2, r2, #1
 800f8f0:	b112      	cbz	r2, 800f8f8 <HAL_TIM_IC_ConfigChannel+0x2fc>
 800f8f2:	4a21      	ldr	r2, [pc, #132]	; (800f978 <HAL_TIM_IC_ConfigChannel+0x37c>)
 800f8f4:	4293      	cmp	r3, r2
 800f8f6:	d12b      	bne.n	800f950 <HAL_TIM_IC_ConfigChannel+0x354>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8f8:	6a1f      	ldr	r7, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f8fa:	2000      	movs	r0, #0
    TIM_TI3_SetConfig(htim->Instance,
 800f8fc:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f8fe:	f427 7780 	bic.w	r7, r7, #256	; 0x100
    TIM_TI3_SetConfig(htim->Instance,
 800f902:	6861      	ldr	r1, [r4, #4]
 800f904:	68e2      	ldr	r2, [r4, #12]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f906:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f908:	621f      	str	r7, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f90a:	69df      	ldr	r7, [r3, #28]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f90c:	0112      	lsls	r2, r2, #4
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f90e:	f406 6620 	and.w	r6, r6, #2560	; 0xa00
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f912:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f914:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f918:	b2d2      	uxtb	r2, r2
  tmpccmr2 |= TIM_ICSelection;
 800f91a:	4339      	orrs	r1, r7
  tmpccer = TIMx->CCER;
 800f91c:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f91e:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f922:	f427 6720 	bic.w	r7, r7, #2560	; 0xa00
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f926:	430a      	orrs	r2, r1
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f928:	433e      	orrs	r6, r7
  TIMx->CCMR2 = tmpccmr2;
 800f92a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f92c:	621e      	str	r6, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800f92e:	69d9      	ldr	r1, [r3, #28]
 800f930:	f021 010c 	bic.w	r1, r1, #12
 800f934:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800f936:	69da      	ldr	r2, [r3, #28]
 800f938:	4322      	orrs	r2, r4
 800f93a:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800f93c:	2300      	movs	r3, #0
 800f93e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 800f942:	e6cd      	b.n	800f6e0 <HAL_TIM_IC_ConfigChannel+0xe4>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f944:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 800f948:	480c      	ldr	r0, [pc, #48]	; (800f97c <HAL_TIM_IC_ConfigChannel+0x380>)
 800f94a:	f7f4 f9f7 	bl	8003d3c <assert_failed>
 800f94e:	e6a3      	b.n	800f698 <HAL_TIM_IC_ConfigChannel+0x9c>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 800f950:	f241 016a 	movw	r1, #4202	; 0x106a
 800f954:	4809      	ldr	r0, [pc, #36]	; (800f97c <HAL_TIM_IC_ConfigChannel+0x380>)
 800f956:	f7f4 f9f1 	bl	8003d3c <assert_failed>
 800f95a:	682b      	ldr	r3, [r5, #0]
 800f95c:	e7cc      	b.n	800f8f8 <HAL_TIM_IC_ConfigChannel+0x2fc>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f95e:	f241 015a 	movw	r1, #4186	; 0x105a
 800f962:	4806      	ldr	r0, [pc, #24]	; (800f97c <HAL_TIM_IC_ConfigChannel+0x380>)
 800f964:	f7f4 f9ea 	bl	8003d3c <assert_failed>
 800f968:	682a      	ldr	r2, [r5, #0]
 800f96a:	e722      	b.n	800f7b2 <HAL_TIM_IC_ConfigChannel+0x1b6>
 800f96c:	40010000 	.word	0x40010000
 800f970:	40000400 	.word	0x40000400
 800f974:	40000800 	.word	0x40000800
 800f978:	40010400 	.word	0x40010400
 800f97c:	08029a64 	.word	0x08029a64

0800f980 <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800f980:	4b2b      	ldr	r3, [pc, #172]	; (800fa30 <TIM_CCxChannelCmd+0xb0>)
 800f982:	4298      	cmp	r0, r3
{
 800f984:	b530      	push	{r4, r5, lr}
 800f986:	4604      	mov	r4, r0
 800f988:	b083      	sub	sp, #12
 800f98a:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 800f98c:	d031      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f98e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800f992:	d02e      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f994:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 800f998:	4298      	cmp	r0, r3
 800f99a:	d02a      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f99c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9a0:	4298      	cmp	r0, r3
 800f9a2:	d026      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9a8:	4298      	cmp	r0, r3
 800f9aa:	d022      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9ac:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800f9b0:	4298      	cmp	r0, r3
 800f9b2:	d01e      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9b4:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 800f9b8:	4298      	cmp	r0, r3
 800f9ba:	d01a      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9c0:	4298      	cmp	r0, r3
 800f9c2:	d016      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9c8:	4298      	cmp	r0, r3
 800f9ca:	d012      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9cc:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800f9d0:	4298      	cmp	r0, r3
 800f9d2:	d00e      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9d8:	4298      	cmp	r0, r3
 800f9da:	d00a      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800f9e0:	4298      	cmp	r0, r3
 800f9e2:	d006      	beq.n	800f9f2 <TIM_CCxChannelCmd+0x72>
 800f9e4:	f641 6199 	movw	r1, #7833	; 0x1e99
 800f9e8:	4812      	ldr	r0, [pc, #72]	; (800fa34 <TIM_CCxChannelCmd+0xb4>)
 800f9ea:	9201      	str	r2, [sp, #4]
 800f9ec:	f7f4 f9a6 	bl	8003d3c <assert_failed>
 800f9f0:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 800f9f2:	2d14      	cmp	r5, #20
 800f9f4:	d90f      	bls.n	800fa16 <TIM_CCxChannelCmd+0x96>
 800f9f6:	2d3c      	cmp	r5, #60	; 0x3c
 800f9f8:	d111      	bne.n	800fa1e <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f9fa:	f005 051f 	and.w	r5, r5, #31
 800f9fe:	2001      	movs	r0, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa00:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa02:	40a8      	lsls	r0, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa04:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 800fa06:	ea23 0300 	bic.w	r3, r3, r0
 800fa0a:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa0c:	6a25      	ldr	r5, [r4, #32]
 800fa0e:	4315      	orrs	r5, r2
 800fa10:	6225      	str	r5, [r4, #32]
}
 800fa12:	b003      	add	sp, #12
 800fa14:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 800fa16:	4b08      	ldr	r3, [pc, #32]	; (800fa38 <TIM_CCxChannelCmd+0xb8>)
 800fa18:	40eb      	lsrs	r3, r5
 800fa1a:	07db      	lsls	r3, r3, #31
 800fa1c:	d4ed      	bmi.n	800f9fa <TIM_CCxChannelCmd+0x7a>
 800fa1e:	f641 619a 	movw	r1, #7834	; 0x1e9a
 800fa22:	4804      	ldr	r0, [pc, #16]	; (800fa34 <TIM_CCxChannelCmd+0xb4>)
 800fa24:	9201      	str	r2, [sp, #4]
 800fa26:	f7f4 f989 	bl	8003d3c <assert_failed>
 800fa2a:	9a01      	ldr	r2, [sp, #4]
 800fa2c:	e7e5      	b.n	800f9fa <TIM_CCxChannelCmd+0x7a>
 800fa2e:	bf00      	nop
 800fa30:	40010000 	.word	0x40010000
 800fa34:	08029a64 	.word	0x08029a64
 800fa38:	00111111 	.word	0x00111111

0800fa3c <HAL_TIM_IC_Start_DMA>:
{
 800fa3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa40:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fa42:	460d      	mov	r5, r1
{
 800fa44:	4617      	mov	r7, r2
 800fa46:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fa48:	2900      	cmp	r1, #0
 800fa4a:	f040 8089 	bne.w	800fb60 <HAL_TIM_IC_Start_DMA+0x124>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fa4e:	6803      	ldr	r3, [r0, #0]
 800fa50:	4a97      	ldr	r2, [pc, #604]	; (800fcb0 <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fa52:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fa56:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fa58:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fa5c:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fa5e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fa62:	d036      	beq.n	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fa64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa68:	d033      	beq.n	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fa6a:	4a92      	ldr	r2, [pc, #584]	; (800fcb4 <HAL_TIM_IC_Start_DMA+0x278>)
 800fa6c:	4293      	cmp	r3, r2
 800fa6e:	d030      	beq.n	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fa70:	4a91      	ldr	r2, [pc, #580]	; (800fcb8 <HAL_TIM_IC_Start_DMA+0x27c>)
 800fa72:	4293      	cmp	r3, r2
 800fa74:	d068      	beq.n	800fb48 <HAL_TIM_IC_Start_DMA+0x10c>
 800fa76:	4a91      	ldr	r2, [pc, #580]	; (800fcbc <HAL_TIM_IC_Start_DMA+0x280>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d065      	beq.n	800fb48 <HAL_TIM_IC_Start_DMA+0x10c>
 800fa7c:	4a90      	ldr	r2, [pc, #576]	; (800fcc0 <HAL_TIM_IC_Start_DMA+0x284>)
 800fa7e:	4293      	cmp	r3, r2
 800fa80:	f040 80be 	bne.w	800fc00 <HAL_TIM_IC_Start_DMA+0x1c4>
 800fa84:	2d14      	cmp	r5, #20
 800fa86:	d864      	bhi.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
 800fa88:	4a8e      	ldr	r2, [pc, #568]	; (800fcc4 <HAL_TIM_IC_Start_DMA+0x288>)
 800fa8a:	40ea      	lsrs	r2, r5
 800fa8c:	07d2      	lsls	r2, r2, #31
 800fa8e:	d560      	bpl.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800fa90:	4987      	ldr	r1, [pc, #540]	; (800fcb0 <HAL_TIM_IC_Start_DMA+0x274>)
 800fa92:	4a88      	ldr	r2, [pc, #544]	; (800fcb4 <HAL_TIM_IC_Start_DMA+0x278>)
 800fa94:	428b      	cmp	r3, r1
 800fa96:	bf18      	it	ne
 800fa98:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800fa9c:	4886      	ldr	r0, [pc, #536]	; (800fcb8 <HAL_TIM_IC_Start_DMA+0x27c>)
 800fa9e:	bf14      	ite	ne
 800faa0:	2101      	movne	r1, #1
 800faa2:	2100      	moveq	r1, #0
 800faa4:	4293      	cmp	r3, r2
 800faa6:	bf0c      	ite	eq
 800faa8:	2100      	moveq	r1, #0
 800faaa:	f001 0101 	andne.w	r1, r1, #1
 800faae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fab2:	4283      	cmp	r3, r0
 800fab4:	bf0c      	ite	eq
 800fab6:	2100      	moveq	r1, #0
 800fab8:	f001 0101 	andne.w	r1, r1, #1
 800fabc:	4293      	cmp	r3, r2
 800fabe:	bf0c      	ite	eq
 800fac0:	2100      	moveq	r1, #0
 800fac2:	f001 0101 	andne.w	r1, r1, #1
 800fac6:	b121      	cbz	r1, 800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fac8:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800facc:	4293      	cmp	r3, r2
 800face:	f040 808d 	bne.w	800fbec <HAL_TIM_IC_Start_DMA+0x1b0>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800fad2:	2e02      	cmp	r6, #2
 800fad4:	d069      	beq.n	800fbaa <HAL_TIM_IC_Start_DMA+0x16e>
 800fad6:	f1b9 0f02 	cmp.w	r9, #2
 800fada:	d066      	beq.n	800fbaa <HAL_TIM_IC_Start_DMA+0x16e>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800fadc:	2e01      	cmp	r6, #1
 800fade:	d106      	bne.n	800faee <HAL_TIM_IC_Start_DMA+0xb2>
 800fae0:	f1b9 0f01 	cmp.w	r9, #1
 800fae4:	d103      	bne.n	800faee <HAL_TIM_IC_Start_DMA+0xb2>
    if ((pData == NULL) && (Length > 0U))
 800fae6:	b92f      	cbnz	r7, 800faf4 <HAL_TIM_IC_Start_DMA+0xb8>
 800fae8:	f1b8 0f00 	cmp.w	r8, #0
 800faec:	d002      	beq.n	800faf4 <HAL_TIM_IC_Start_DMA+0xb8>
    return HAL_ERROR;
 800faee:	2001      	movs	r0, #1
}
 800faf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800faf4:	2302      	movs	r3, #2
 800faf6:	2d00      	cmp	r5, #0
 800faf8:	d05a      	beq.n	800fbb0 <HAL_TIM_IC_Start_DMA+0x174>
 800fafa:	2d04      	cmp	r5, #4
 800fafc:	f000 80b9 	beq.w	800fc72 <HAL_TIM_IC_Start_DMA+0x236>
 800fb00:	2d08      	cmp	r5, #8
 800fb02:	f000 8156 	beq.w	800fdb2 <HAL_TIM_IC_Start_DMA+0x376>
 800fb06:	2d0c      	cmp	r5, #12
 800fb08:	f000 8134 	beq.w	800fd74 <HAL_TIM_IC_Start_DMA+0x338>
 800fb0c:	2d10      	cmp	r5, #16
 800fb0e:	f000 80ef 	beq.w	800fcf0 <HAL_TIM_IC_Start_DMA+0x2b4>
 800fb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb16:	2201      	movs	r2, #1
 800fb18:	4629      	mov	r1, r5
 800fb1a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fb1c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fb20:	f7ff ff2e 	bl	800f980 <TIM_CCxChannelCmd>
  switch (Channel)
 800fb24:	2d0c      	cmp	r5, #12
 800fb26:	f200 80ec 	bhi.w	800fd02 <HAL_TIM_IC_Start_DMA+0x2c6>
 800fb2a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800fb2e:	004a      	.short	0x004a
 800fb30:	00ea00ea 	.word	0x00ea00ea
 800fb34:	00ab00ea 	.word	0x00ab00ea
 800fb38:	00ea00ea 	.word	0x00ea00ea
 800fb3c:	014b00ea 	.word	0x014b00ea
 800fb40:	00ea00ea 	.word	0x00ea00ea
 800fb44:	012c00ea 	.word	0x012c00ea
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fb48:	f035 0204 	bics.w	r2, r5, #4
 800fb4c:	d0a0      	beq.n	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
 800fb4e:	2a08      	cmp	r2, #8
 800fb50:	d09e      	beq.n	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
 800fb52:	f640 114a 	movw	r1, #2378	; 0x94a
 800fb56:	485c      	ldr	r0, [pc, #368]	; (800fcc8 <HAL_TIM_IC_Start_DMA+0x28c>)
 800fb58:	f7f4 f8f0 	bl	8003d3c <assert_failed>
 800fb5c:	6823      	ldr	r3, [r4, #0]
 800fb5e:	e797      	b.n	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fb60:	2904      	cmp	r1, #4
 800fb62:	d054      	beq.n	800fc0e <HAL_TIM_IC_Start_DMA+0x1d2>
 800fb64:	2908      	cmp	r1, #8
 800fb66:	d07e      	beq.n	800fc66 <HAL_TIM_IC_Start_DMA+0x22a>
 800fb68:	290c      	cmp	r1, #12
 800fb6a:	d045      	beq.n	800fbf8 <HAL_TIM_IC_Start_DMA+0x1bc>
 800fb6c:	2910      	cmp	r1, #16
 800fb6e:	f000 813f 	beq.w	800fdf0 <HAL_TIM_IC_Start_DMA+0x3b4>
 800fb72:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 800fb76:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fb78:	6823      	ldr	r3, [r4, #0]
 800fb7a:	4a4d      	ldr	r2, [pc, #308]	; (800fcb0 <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fb7c:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fb80:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fb82:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fb86:	d05c      	beq.n	800fc42 <HAL_TIM_IC_Start_DMA+0x206>
 800fb88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fb8c:	d04e      	beq.n	800fc2c <HAL_TIM_IC_Start_DMA+0x1f0>
 800fb8e:	4a49      	ldr	r2, [pc, #292]	; (800fcb4 <HAL_TIM_IC_Start_DMA+0x278>)
 800fb90:	4293      	cmp	r3, r2
 800fb92:	f47f af6d 	bne.w	800fa70 <HAL_TIM_IC_Start_DMA+0x34>
 800fb96:	f035 020c 	bics.w	r2, r5, #12
 800fb9a:	d09a      	beq.n	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fb9c:	4a4b      	ldr	r2, [pc, #300]	; (800fccc <HAL_TIM_IC_Start_DMA+0x290>)
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d1d7      	bne.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
 800fba2:	2d00      	cmp	r5, #0
 800fba4:	f43f af74 	beq.w	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
 800fba8:	e7d3      	b.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
    return HAL_BUSY;
 800fbaa:	2002      	movs	r0, #2
}
 800fbac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fbb0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	2201      	movs	r2, #1
 800fbb8:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fbba:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fbbe:	f7ff fedf 	bl	800f980 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800fbc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800fbc4:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800fbc6:	4d42      	ldr	r5, [pc, #264]	; (800fcd0 <HAL_TIM_IC_Start_DMA+0x294>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800fbc8:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800fbca:	4942      	ldr	r1, [pc, #264]	; (800fcd4 <HAL_TIM_IC_Start_DMA+0x298>)
 800fbcc:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800fbd0:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fbd2:	4d41      	ldr	r5, [pc, #260]	; (800fcd8 <HAL_TIM_IC_Start_DMA+0x29c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800fbd4:	3134      	adds	r1, #52	; 0x34
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800fbd6:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 800fbd8:	f7f8 fa8e 	bl	80080f8 <HAL_DMA_Start_IT>
 800fbdc:	2800      	cmp	r0, #0
 800fbde:	d186      	bne.n	800faee <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800fbe0:	6822      	ldr	r2, [r4, #0]
 800fbe2:	68d3      	ldr	r3, [r2, #12]
 800fbe4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fbe8:	60d3      	str	r3, [r2, #12]
      break;
 800fbea:	e08c      	b.n	800fd06 <HAL_TIM_IC_Start_DMA+0x2ca>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800fbec:	f640 114b 	movw	r1, #2379	; 0x94b
 800fbf0:	4835      	ldr	r0, [pc, #212]	; (800fcc8 <HAL_TIM_IC_Start_DMA+0x28c>)
 800fbf2:	f7f4 f8a3 	bl	8003d3c <assert_failed>
 800fbf6:	e76c      	b.n	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fbf8:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 800fbfc:	b2f6      	uxtb	r6, r6
 800fbfe:	e7bb      	b.n	800fb78 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fc00:	4a36      	ldr	r2, [pc, #216]	; (800fcdc <HAL_TIM_IC_Start_DMA+0x2a0>)
 800fc02:	4293      	cmp	r3, r2
 800fc04:	d125      	bne.n	800fc52 <HAL_TIM_IC_Start_DMA+0x216>
 800fc06:	f035 0204 	bics.w	r2, r5, #4
 800fc0a:	d1a2      	bne.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
 800fc0c:	e740      	b.n	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fc0e:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fc12:	6803      	ldr	r3, [r0, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fc14:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fc18:	4a25      	ldr	r2, [pc, #148]	; (800fcb0 <HAL_TIM_IC_Start_DMA+0x274>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fc1a:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fc1c:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fc20:	4293      	cmp	r3, r2
 800fc22:	f43f af56 	beq.w	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fc26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc2a:	d1b0      	bne.n	800fb8e <HAL_TIM_IC_Start_DMA+0x152>
 800fc2c:	f035 020c 	bics.w	r2, r5, #12
 800fc30:	f43f af4f 	beq.w	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fc34:	4a2a      	ldr	r2, [pc, #168]	; (800fce0 <HAL_TIM_IC_Start_DMA+0x2a4>)
 800fc36:	4293      	cmp	r3, r2
 800fc38:	d1b0      	bne.n	800fb9c <HAL_TIM_IC_Start_DMA+0x160>
 800fc3a:	2d00      	cmp	r5, #0
 800fc3c:	f43f af28 	beq.w	800fa90 <HAL_TIM_IC_Start_DMA+0x54>
 800fc40:	e787      	b.n	800fb52 <HAL_TIM_IC_Start_DMA+0x116>
 800fc42:	f025 0204 	bic.w	r2, r5, #4
 800fc46:	2a08      	cmp	r2, #8
 800fc48:	f43f af43 	beq.w	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fc4c:	2a10      	cmp	r2, #16
 800fc4e:	f43f af40 	beq.w	800fad2 <HAL_TIM_IC_Start_DMA+0x96>
 800fc52:	4a24      	ldr	r2, [pc, #144]	; (800fce4 <HAL_TIM_IC_Start_DMA+0x2a8>)
 800fc54:	4293      	cmp	r3, r2
 800fc56:	d0a4      	beq.n	800fba2 <HAL_TIM_IC_Start_DMA+0x166>
 800fc58:	4a23      	ldr	r2, [pc, #140]	; (800fce8 <HAL_TIM_IC_Start_DMA+0x2ac>)
 800fc5a:	4293      	cmp	r3, r2
 800fc5c:	d0a1      	beq.n	800fba2 <HAL_TIM_IC_Start_DMA+0x166>
 800fc5e:	4a23      	ldr	r2, [pc, #140]	; (800fcec <HAL_TIM_IC_Start_DMA+0x2b0>)
 800fc60:	4293      	cmp	r3, r2
 800fc62:	d0d0      	beq.n	800fc06 <HAL_TIM_IC_Start_DMA+0x1ca>
 800fc64:	e7e6      	b.n	800fc34 <HAL_TIM_IC_Start_DMA+0x1f8>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fc66:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fc6a:	6803      	ldr	r3, [r0, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800fc6c:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
 800fc70:	e7d2      	b.n	800fc18 <HAL_TIM_IC_Start_DMA+0x1dc>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc72:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc76:	4629      	mov	r1, r5
 800fc78:	2201      	movs	r2, #1
 800fc7a:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fc7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fc80:	f7ff fe7e 	bl	800f980 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800fc84:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800fc86:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800fc88:	4d11      	ldr	r5, [pc, #68]	; (800fcd0 <HAL_TIM_IC_Start_DMA+0x294>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800fc8a:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800fc8c:	4911      	ldr	r1, [pc, #68]	; (800fcd4 <HAL_TIM_IC_Start_DMA+0x298>)
 800fc8e:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800fc92:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fc94:	4d10      	ldr	r5, [pc, #64]	; (800fcd8 <HAL_TIM_IC_Start_DMA+0x29c>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800fc96:	3138      	adds	r1, #56	; 0x38
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800fc98:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 800fc9a:	f7f8 fa2d 	bl	80080f8 <HAL_DMA_Start_IT>
 800fc9e:	2800      	cmp	r0, #0
 800fca0:	f47f af25 	bne.w	800faee <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800fca4:	6822      	ldr	r2, [r4, #0]
 800fca6:	68d3      	ldr	r3, [r2, #12]
 800fca8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800fcac:	60d3      	str	r3, [r2, #12]
      break;
 800fcae:	e02a      	b.n	800fd06 <HAL_TIM_IC_Start_DMA+0x2ca>
 800fcb0:	40010000 	.word	0x40010000
 800fcb4:	40000400 	.word	0x40000400
 800fcb8:	40000800 	.word	0x40000800
 800fcbc:	40000c00 	.word	0x40000c00
 800fcc0:	40010400 	.word	0x40010400
 800fcc4:	00111111 	.word	0x00111111
 800fcc8:	08029a64 	.word	0x08029a64
 800fccc:	40002000 	.word	0x40002000
 800fcd0:	0800e37d 	.word	0x0800e37d
 800fcd4:	0800e415 	.word	0x0800e415
 800fcd8:	0800e5f9 	.word	0x0800e5f9
 800fcdc:	40014000 	.word	0x40014000
 800fce0:	40001c00 	.word	0x40001c00
 800fce4:	40014400 	.word	0x40014400
 800fce8:	40014800 	.word	0x40014800
 800fcec:	40001800 	.word	0x40001800
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcf0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fcf4:	4629      	mov	r1, r5
 800fcf6:	2201      	movs	r2, #1
 800fcf8:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fcfa:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fcfe:	f7ff fe3f 	bl	800f980 <TIM_CCxChannelCmd>
  switch (Channel)
 800fd02:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 800fd04:	2001      	movs	r0, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fd06:	4b3c      	ldr	r3, [pc, #240]	; (800fdf8 <HAL_TIM_IC_Start_DMA+0x3bc>)
 800fd08:	4c3c      	ldr	r4, [pc, #240]	; (800fdfc <HAL_TIM_IC_Start_DMA+0x3c0>)
 800fd0a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800fd0e:	bf18      	it	ne
 800fd10:	429a      	cmpne	r2, r3
 800fd12:	493b      	ldr	r1, [pc, #236]	; (800fe00 <HAL_TIM_IC_Start_DMA+0x3c4>)
 800fd14:	4d3b      	ldr	r5, [pc, #236]	; (800fe04 <HAL_TIM_IC_Start_DMA+0x3c8>)
 800fd16:	bf0c      	ite	eq
 800fd18:	2301      	moveq	r3, #1
 800fd1a:	2300      	movne	r3, #0
 800fd1c:	42a2      	cmp	r2, r4
 800fd1e:	bf08      	it	eq
 800fd20:	f043 0301 	orreq.w	r3, r3, #1
 800fd24:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 800fd28:	428a      	cmp	r2, r1
 800fd2a:	bf08      	it	eq
 800fd2c:	f043 0301 	orreq.w	r3, r3, #1
 800fd30:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800fd34:	42aa      	cmp	r2, r5
 800fd36:	bf08      	it	eq
 800fd38:	f043 0301 	orreq.w	r3, r3, #1
 800fd3c:	42a2      	cmp	r2, r4
 800fd3e:	bf08      	it	eq
 800fd40:	f043 0301 	orreq.w	r3, r3, #1
 800fd44:	428a      	cmp	r2, r1
 800fd46:	bf08      	it	eq
 800fd48:	f043 0301 	orreq.w	r3, r3, #1
 800fd4c:	b913      	cbnz	r3, 800fd54 <HAL_TIM_IC_Start_DMA+0x318>
 800fd4e:	4b2e      	ldr	r3, [pc, #184]	; (800fe08 <HAL_TIM_IC_Start_DMA+0x3cc>)
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d109      	bne.n	800fd68 <HAL_TIM_IC_Start_DMA+0x32c>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800fd54:	6891      	ldr	r1, [r2, #8]
 800fd56:	4b2d      	ldr	r3, [pc, #180]	; (800fe0c <HAL_TIM_IC_Start_DMA+0x3d0>)
 800fd58:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800fd5a:	2b06      	cmp	r3, #6
 800fd5c:	f43f aec8 	beq.w	800faf0 <HAL_TIM_IC_Start_DMA+0xb4>
 800fd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fd64:	f43f aec4 	beq.w	800faf0 <HAL_TIM_IC_Start_DMA+0xb4>
    __HAL_TIM_ENABLE(htim);
 800fd68:	6813      	ldr	r3, [r2, #0]
 800fd6a:	f043 0301 	orr.w	r3, r3, #1
 800fd6e:	6013      	str	r3, [r2, #0]
}
 800fd70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd78:	4629      	mov	r1, r5
 800fd7a:	2201      	movs	r2, #1
 800fd7c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fd7e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fd82:	f7ff fdfd 	bl	800f980 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800fd86:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800fd88:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800fd8a:	4d21      	ldr	r5, [pc, #132]	; (800fe10 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800fd8c:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800fd8e:	4921      	ldr	r1, [pc, #132]	; (800fe14 <HAL_TIM_IC_Start_DMA+0x3d8>)
 800fd90:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800fd94:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fd96:	4d20      	ldr	r5, [pc, #128]	; (800fe18 <HAL_TIM_IC_Start_DMA+0x3dc>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800fd98:	3140      	adds	r1, #64	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800fd9a:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 800fd9c:	f7f8 f9ac 	bl	80080f8 <HAL_DMA_Start_IT>
 800fda0:	2800      	cmp	r0, #0
 800fda2:	f47f aea4 	bne.w	800faee <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800fda6:	6822      	ldr	r2, [r4, #0]
 800fda8:	68d3      	ldr	r3, [r2, #12]
 800fdaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800fdae:	60d3      	str	r3, [r2, #12]
      break;
 800fdb0:	e7a9      	b.n	800fd06 <HAL_TIM_IC_Start_DMA+0x2ca>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fdb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fdb6:	4629      	mov	r1, r5
 800fdb8:	2201      	movs	r2, #1
 800fdba:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800fdbc:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800fdc0:	f7ff fdde 	bl	800f980 <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800fdc4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800fdc6:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800fdc8:	4d11      	ldr	r5, [pc, #68]	; (800fe10 <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800fdca:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800fdcc:	4911      	ldr	r1, [pc, #68]	; (800fe14 <HAL_TIM_IC_Start_DMA+0x3d8>)
 800fdce:	e9c0 510f 	strd	r5, r1, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800fdd2:	6821      	ldr	r1, [r4, #0]
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fdd4:	4d10      	ldr	r5, [pc, #64]	; (800fe18 <HAL_TIM_IC_Start_DMA+0x3dc>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800fdd6:	313c      	adds	r1, #60	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800fdd8:	64c5      	str	r5, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 800fdda:	f7f8 f98d 	bl	80080f8 <HAL_DMA_Start_IT>
 800fdde:	2800      	cmp	r0, #0
 800fde0:	f47f ae85 	bne.w	800faee <HAL_TIM_IC_Start_DMA+0xb2>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800fde4:	6822      	ldr	r2, [r4, #0]
 800fde6:	68d3      	ldr	r3, [r2, #12]
 800fde8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fdec:	60d3      	str	r3, [r2, #12]
      break;
 800fdee:	e78a      	b.n	800fd06 <HAL_TIM_IC_Start_DMA+0x2ca>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800fdf0:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 800fdf4:	b2f6      	uxtb	r6, r6
 800fdf6:	e6bf      	b.n	800fb78 <HAL_TIM_IC_Start_DMA+0x13c>
 800fdf8:	40010000 	.word	0x40010000
 800fdfc:	40000400 	.word	0x40000400
 800fe00:	40000800 	.word	0x40000800
 800fe04:	40000c00 	.word	0x40000c00
 800fe08:	40001800 	.word	0x40001800
 800fe0c:	00010007 	.word	0x00010007
 800fe10:	0800e37d 	.word	0x0800e37d
 800fe14:	0800e415 	.word	0x0800e415
 800fe18:	0800e5f9 	.word	0x0800e5f9

0800fe1c <HAL_TIM_IC_Stop_DMA>:
{
 800fe1c:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fe1e:	4b81      	ldr	r3, [pc, #516]	; (8010024 <HAL_TIM_IC_Stop_DMA+0x208>)
{
 800fe20:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fe22:	6800      	ldr	r0, [r0, #0]
{
 800fe24:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fe26:	4298      	cmp	r0, r3
 800fe28:	f000 80cb 	beq.w	800ffc2 <HAL_TIM_IC_Stop_DMA+0x1a6>
 800fe2c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800fe30:	d055      	beq.n	800fede <HAL_TIM_IC_Stop_DMA+0xc2>
 800fe32:	4b7d      	ldr	r3, [pc, #500]	; (8010028 <HAL_TIM_IC_Stop_DMA+0x20c>)
 800fe34:	4298      	cmp	r0, r3
 800fe36:	d052      	beq.n	800fede <HAL_TIM_IC_Stop_DMA+0xc2>
 800fe38:	4b7c      	ldr	r3, [pc, #496]	; (801002c <HAL_TIM_IC_Stop_DMA+0x210>)
 800fe3a:	4298      	cmp	r0, r3
 800fe3c:	d04f      	beq.n	800fede <HAL_TIM_IC_Stop_DMA+0xc2>
 800fe3e:	4b7c      	ldr	r3, [pc, #496]	; (8010030 <HAL_TIM_IC_Stop_DMA+0x214>)
 800fe40:	4298      	cmp	r0, r3
 800fe42:	d04c      	beq.n	800fede <HAL_TIM_IC_Stop_DMA+0xc2>
 800fe44:	4b7b      	ldr	r3, [pc, #492]	; (8010034 <HAL_TIM_IC_Stop_DMA+0x218>)
 800fe46:	4298      	cmp	r0, r3
 800fe48:	f000 80bb 	beq.w	800ffc2 <HAL_TIM_IC_Stop_DMA+0x1a6>
 800fe4c:	4b7a      	ldr	r3, [pc, #488]	; (8010038 <HAL_TIM_IC_Stop_DMA+0x21c>)
 800fe4e:	4298      	cmp	r0, r3
 800fe50:	d00c      	beq.n	800fe6c <HAL_TIM_IC_Stop_DMA+0x50>
 800fe52:	4b7a      	ldr	r3, [pc, #488]	; (801003c <HAL_TIM_IC_Stop_DMA+0x220>)
 800fe54:	4298      	cmp	r0, r3
 800fe56:	f000 80d8 	beq.w	801000a <HAL_TIM_IC_Stop_DMA+0x1ee>
 800fe5a:	4b79      	ldr	r3, [pc, #484]	; (8010040 <HAL_TIM_IC_Stop_DMA+0x224>)
 800fe5c:	4298      	cmp	r0, r3
 800fe5e:	f000 80d4 	beq.w	801000a <HAL_TIM_IC_Stop_DMA+0x1ee>
 800fe62:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 800fe66:	4298      	cmp	r0, r3
 800fe68:	f040 80c8 	bne.w	800fffc <HAL_TIM_IC_Stop_DMA+0x1e0>
 800fe6c:	f035 0304 	bics.w	r3, r5, #4
 800fe70:	f000 80ce 	beq.w	8010010 <HAL_TIM_IC_Stop_DMA+0x1f4>
 800fe74:	f640 11e5 	movw	r1, #2533	; 0x9e5
 800fe78:	4872      	ldr	r0, [pc, #456]	; (8010044 <HAL_TIM_IC_Stop_DMA+0x228>)
 800fe7a:	f7f3 ff5f 	bl	8003d3c <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 800fe7e:	6820      	ldr	r0, [r4, #0]
 800fe80:	4b68      	ldr	r3, [pc, #416]	; (8010024 <HAL_TIM_IC_Stop_DMA+0x208>)
 800fe82:	4a69      	ldr	r2, [pc, #420]	; (8010028 <HAL_TIM_IC_Stop_DMA+0x20c>)
 800fe84:	4298      	cmp	r0, r3
 800fe86:	bf18      	it	ne
 800fe88:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 800fe8c:	4967      	ldr	r1, [pc, #412]	; (801002c <HAL_TIM_IC_Stop_DMA+0x210>)
 800fe8e:	bf14      	ite	ne
 800fe90:	2301      	movne	r3, #1
 800fe92:	2300      	moveq	r3, #0
 800fe94:	4290      	cmp	r0, r2
 800fe96:	bf0c      	ite	eq
 800fe98:	2300      	moveq	r3, #0
 800fe9a:	f003 0301 	andne.w	r3, r3, #1
 800fe9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fea2:	4288      	cmp	r0, r1
 800fea4:	bf0c      	ite	eq
 800fea6:	2300      	moveq	r3, #0
 800fea8:	f003 0301 	andne.w	r3, r3, #1
 800feac:	4290      	cmp	r0, r2
 800feae:	bf0c      	ite	eq
 800feb0:	2300      	moveq	r3, #0
 800feb2:	f003 0301 	andne.w	r3, r3, #1
 800feb6:	b11b      	cbz	r3, 800fec0 <HAL_TIM_IC_Stop_DMA+0xa4>
 800feb8:	4b5e      	ldr	r3, [pc, #376]	; (8010034 <HAL_TIM_IC_Stop_DMA+0x218>)
 800feba:	4298      	cmp	r0, r3
 800febc:	f040 80a8 	bne.w	8010010 <HAL_TIM_IC_Stop_DMA+0x1f4>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fec0:	2200      	movs	r2, #0
 800fec2:	4629      	mov	r1, r5
 800fec4:	f7ff fd5c 	bl	800f980 <TIM_CCxChannelCmd>
  switch (Channel)
 800fec8:	2d0c      	cmp	r5, #12
 800feca:	d80c      	bhi.n	800fee6 <HAL_TIM_IC_Stop_DMA+0xca>
 800fecc:	e8df f005 	tbb	[pc, r5]
 800fed0:	0b0b0b0d 	.word	0x0b0b0b0d
 800fed4:	0b0b0b64 	.word	0x0b0b0b64
 800fed8:	0b0b0b4a 	.word	0x0b0b0b4a
 800fedc:	22          	.byte	0x22
 800fedd:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fede:	f035 030c 	bics.w	r3, r5, #12
 800fee2:	d1c7      	bne.n	800fe74 <HAL_TIM_IC_Stop_DMA+0x58>
 800fee4:	e7ec      	b.n	800fec0 <HAL_TIM_IC_Stop_DMA+0xa4>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800fee6:	2001      	movs	r0, #1
}
 800fee8:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800feea:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800feec:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800feee:	68d3      	ldr	r3, [r2, #12]
 800fef0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800fef4:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800fef6:	f7f8 f9a3 	bl	8008240 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800fefa:	6823      	ldr	r3, [r4, #0]
 800fefc:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff00:	6a19      	ldr	r1, [r3, #32]
 800ff02:	4211      	tst	r1, r2
 800ff04:	d06c      	beq.n	800ffe0 <HAL_TIM_IC_Stop_DMA+0x1c4>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff06:	2301      	movs	r3, #1
 800ff08:	2000      	movs	r0, #0
 800ff0a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff0e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ff14:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ff16:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800ff18:	68d3      	ldr	r3, [r2, #12]
 800ff1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ff1e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800ff20:	f7f8 f98e 	bl	8008240 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800ff24:	6823      	ldr	r3, [r4, #0]
 800ff26:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff2a:	6a19      	ldr	r1, [r3, #32]
 800ff2c:	4211      	tst	r1, r2
 800ff2e:	d161      	bne.n	800fff4 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800ff30:	6a19      	ldr	r1, [r3, #32]
 800ff32:	f240 4244 	movw	r2, #1092	; 0x444
 800ff36:	4211      	tst	r1, r2
 800ff38:	d15c      	bne.n	800fff4 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800ff3a:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff3c:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 800ff3e:	f022 0201 	bic.w	r2, r2, #1
 800ff42:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff44:	d036      	beq.n	800ffb4 <HAL_TIM_IC_Stop_DMA+0x198>
 800ff46:	2d08      	cmp	r5, #8
 800ff48:	d01f      	beq.n	800ff8a <HAL_TIM_IC_Stop_DMA+0x16e>
 800ff4a:	2d0c      	cmp	r5, #12
 800ff4c:	d052      	beq.n	800fff4 <HAL_TIM_IC_Stop_DMA+0x1d8>
 800ff4e:	2d10      	cmp	r5, #16
 800ff50:	f04f 0301 	mov.w	r3, #1
 800ff54:	d063      	beq.n	801001e <HAL_TIM_IC_Stop_DMA+0x202>
 800ff56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff5a:	2301      	movs	r3, #1
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 800ff62:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ff64:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ff66:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800ff68:	68d3      	ldr	r3, [r2, #12]
 800ff6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ff6e:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800ff70:	f7f8 f966 	bl	8008240 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800ff74:	6823      	ldr	r3, [r4, #0]
 800ff76:	f241 1211 	movw	r2, #4369	; 0x1111
 800ff7a:	6a19      	ldr	r1, [r3, #32]
 800ff7c:	4211      	tst	r1, r2
 800ff7e:	d104      	bne.n	800ff8a <HAL_TIM_IC_Stop_DMA+0x16e>
 800ff80:	6a19      	ldr	r1, [r3, #32]
 800ff82:	f240 4244 	movw	r2, #1092	; 0x444
 800ff86:	4211      	tst	r1, r2
 800ff88:	d0d7      	beq.n	800ff3a <HAL_TIM_IC_Stop_DMA+0x11e>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff8a:	2301      	movs	r3, #1
 800ff8c:	2000      	movs	r0, #0
 800ff8e:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ff92:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 800ff96:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ff98:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ff9a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800ff9c:	68d3      	ldr	r3, [r2, #12]
 800ff9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ffa2:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800ffa4:	f7f8 f94c 	bl	8008240 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 800ffa8:	6823      	ldr	r3, [r4, #0]
 800ffaa:	f241 1211 	movw	r2, #4369	; 0x1111
 800ffae:	6a19      	ldr	r1, [r3, #32]
 800ffb0:	4211      	tst	r1, r2
 800ffb2:	d00f      	beq.n	800ffd4 <HAL_TIM_IC_Stop_DMA+0x1b8>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ffb4:	2301      	movs	r3, #1
 800ffb6:	2000      	movs	r0, #0
 800ffb8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ffbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800ffc0:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800ffc2:	2d14      	cmp	r5, #20
 800ffc4:	f63f af56 	bhi.w	800fe74 <HAL_TIM_IC_Stop_DMA+0x58>
 800ffc8:	4b1f      	ldr	r3, [pc, #124]	; (8010048 <HAL_TIM_IC_Stop_DMA+0x22c>)
 800ffca:	40eb      	lsrs	r3, r5
 800ffcc:	07db      	lsls	r3, r3, #31
 800ffce:	f53f af77 	bmi.w	800fec0 <HAL_TIM_IC_Stop_DMA+0xa4>
 800ffd2:	e74f      	b.n	800fe74 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 800ffd4:	6a19      	ldr	r1, [r3, #32]
 800ffd6:	f240 4244 	movw	r2, #1092	; 0x444
 800ffda:	4211      	tst	r1, r2
 800ffdc:	d0ad      	beq.n	800ff3a <HAL_TIM_IC_Stop_DMA+0x11e>
 800ffde:	e7e9      	b.n	800ffb4 <HAL_TIM_IC_Stop_DMA+0x198>
 800ffe0:	6a19      	ldr	r1, [r3, #32]
 800ffe2:	f240 4244 	movw	r2, #1092	; 0x444
 800ffe6:	4211      	tst	r1, r2
 800ffe8:	d18d      	bne.n	800ff06 <HAL_TIM_IC_Stop_DMA+0xea>
 800ffea:	681a      	ldr	r2, [r3, #0]
 800ffec:	f022 0201 	bic.w	r2, r2, #1
 800fff0:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800fff2:	e788      	b.n	800ff06 <HAL_TIM_IC_Stop_DMA+0xea>
 800fff4:	2301      	movs	r3, #1
 800fff6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800fffa:	e7ae      	b.n	800ff5a <HAL_TIM_IC_Stop_DMA+0x13e>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 800fffc:	4b13      	ldr	r3, [pc, #76]	; (801004c <HAL_TIM_IC_Stop_DMA+0x230>)
 800fffe:	4298      	cmp	r0, r3
 8010000:	d003      	beq.n	801000a <HAL_TIM_IC_Stop_DMA+0x1ee>
 8010002:	4b13      	ldr	r3, [pc, #76]	; (8010050 <HAL_TIM_IC_Stop_DMA+0x234>)
 8010004:	4298      	cmp	r0, r3
 8010006:	f47f af35 	bne.w	800fe74 <HAL_TIM_IC_Stop_DMA+0x58>
 801000a:	2d00      	cmp	r5, #0
 801000c:	f47f af32 	bne.w	800fe74 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 8010010:	480c      	ldr	r0, [pc, #48]	; (8010044 <HAL_TIM_IC_Stop_DMA+0x228>)
 8010012:	f640 11e6 	movw	r1, #2534	; 0x9e6
 8010016:	f7f3 fe91 	bl	8003d3c <assert_failed>
 801001a:	6820      	ldr	r0, [r4, #0]
 801001c:	e750      	b.n	800fec0 <HAL_TIM_IC_Stop_DMA+0xa4>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801001e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010022:	e79a      	b.n	800ff5a <HAL_TIM_IC_Stop_DMA+0x13e>
 8010024:	40010000 	.word	0x40010000
 8010028:	40000400 	.word	0x40000400
 801002c:	40000800 	.word	0x40000800
 8010030:	40000c00 	.word	0x40000c00
 8010034:	40010400 	.word	0x40010400
 8010038:	40014000 	.word	0x40014000
 801003c:	40014400 	.word	0x40014400
 8010040:	40014800 	.word	0x40014800
 8010044:	08029a64 	.word	0x08029a64
 8010048:	00111111 	.word	0x00111111
 801004c:	40001c00 	.word	0x40001c00
 8010050:	40002000 	.word	0x40002000

08010054 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010054:	6802      	ldr	r2, [r0, #0]
 8010056:	f8df c1cc 	ldr.w	ip, [pc, #460]	; 8010224 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>
{
 801005a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 801005e:	4b6b      	ldr	r3, [pc, #428]	; (801020c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>)
{
 8010060:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010062:	4f6b      	ldr	r7, [pc, #428]	; (8010210 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 8010064:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8010066:	429a      	cmp	r2, r3
 8010068:	bf18      	it	ne
 801006a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801006e:	4e69      	ldr	r6, [pc, #420]	; (8010214 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
 8010070:	4869      	ldr	r0, [pc, #420]	; (8010218 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 8010072:	bf14      	ite	ne
 8010074:	2301      	movne	r3, #1
 8010076:	2300      	moveq	r3, #0
 8010078:	4968      	ldr	r1, [pc, #416]	; (801021c <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 801007a:	4562      	cmp	r2, ip
 801007c:	bf0c      	ite	eq
 801007e:	2300      	moveq	r3, #0
 8010080:	f003 0301 	andne.w	r3, r3, #1
 8010084:	42ba      	cmp	r2, r7
 8010086:	bf0c      	ite	eq
 8010088:	2300      	moveq	r3, #0
 801008a:	f003 0301 	andne.w	r3, r3, #1
 801008e:	42b2      	cmp	r2, r6
 8010090:	bf0c      	ite	eq
 8010092:	2300      	moveq	r3, #0
 8010094:	f003 0301 	andne.w	r3, r3, #1
 8010098:	4282      	cmp	r2, r0
 801009a:	bf0c      	ite	eq
 801009c:	2300      	moveq	r3, #0
 801009e:	f003 0301 	andne.w	r3, r3, #1
 80100a2:	428a      	cmp	r2, r1
 80100a4:	bf0c      	ite	eq
 80100a6:	2300      	moveq	r3, #0
 80100a8:	f003 0301 	andne.w	r3, r3, #1
 80100ac:	b11b      	cbz	r3, 80100b6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 80100ae:	4b5c      	ldr	r3, [pc, #368]	; (8010220 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 80100b0:	429a      	cmp	r2, r3
 80100b2:	f040 808c 	bne.w	80101ce <HAL_TIMEx_MasterConfigSynchronization+0x17a>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80100b6:	682b      	ldr	r3, [r5, #0]
 80100b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80100bc:	2b40      	cmp	r3, #64	; 0x40
 80100be:	d002      	beq.n	80100c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	f040 808a 	bne.w	80101da <HAL_TIMEx_MasterConfigSynchronization+0x186>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80100c6:	68ab      	ldr	r3, [r5, #8]
 80100c8:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80100cc:	d173      	bne.n	80101b6 <HAL_TIMEx_MasterConfigSynchronization+0x162>

  /* Check input state */
  __HAL_LOCK(htim);
 80100ce:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80100d2:	2b01      	cmp	r3, #1
 80100d4:	d078      	beq.n	80101c8 <HAL_TIMEx_MasterConfigSynchronization+0x174>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80100d6:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 80100d8:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100da:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801020c <HAL_TIMEx_MasterConfigSynchronization+0x1b8>
  htim->State = HAL_TIM_STATE_BUSY;
 80100de:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100e0:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8010220 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 80100e4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100e8:	eba2 0009 	sub.w	r0, r2, r9
 80100ec:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 80100f0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100f4:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 80100f8:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80100fa:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 80100fe:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8010100:	0940      	lsrs	r0, r0, #5
 8010102:	0949      	lsrs	r1, r1, #5
 8010104:	ea50 0301 	orrs.w	r3, r0, r1
 8010108:	d135      	bne.n	8010176 <HAL_TIMEx_MasterConfigSynchronization+0x122>
 801010a:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801010c:	430b      	orrs	r3, r1
 801010e:	4845      	ldr	r0, [pc, #276]	; (8010224 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 8010110:	493f      	ldr	r1, [pc, #252]	; (8010210 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8010112:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010116:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 801011a:	bf08      	it	eq
 801011c:	f043 0301 	orreq.w	r3, r3, #1
 8010120:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 8010214 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>
 8010124:	4282      	cmp	r2, r0
 8010126:	bf08      	it	eq
 8010128:	f043 0301 	orreq.w	r3, r3, #1
 801012c:	f500 309e 	add.w	r0, r0, #80896	; 0x13c00
 8010130:	428a      	cmp	r2, r1
 8010132:	bf08      	it	eq
 8010134:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010138:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801013a:	4562      	cmp	r2, ip
 801013c:	bf08      	it	eq
 801013e:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8010142:	430f      	orrs	r7, r1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010144:	4282      	cmp	r2, r0
 8010146:	bf08      	it	eq
 8010148:	f043 0301 	orreq.w	r3, r3, #1
  htim->Instance->CR2 = tmpcr2;
 801014c:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801014e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010152:	d102      	bne.n	801015a <HAL_TIMEx_MasterConfigSynchronization+0x106>
 8010154:	4b34      	ldr	r3, [pc, #208]	; (8010228 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8010156:	429a      	cmp	r2, r3
 8010158:	d104      	bne.n	8010164 <HAL_TIMEx_MasterConfigSynchronization+0x110>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801015a:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 801015c:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8010160:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8010162:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8010164:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8010166:	2201      	movs	r2, #1

  return HAL_OK;
 8010168:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 801016a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 801016e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8010172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8010176:	f8d5 e004 	ldr.w	lr, [r5, #4]
 801017a:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 801017e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010182:	bf18      	it	ne
 8010184:	2b00      	cmpne	r3, #0
 8010186:	bf14      	ite	ne
 8010188:	f04f 0c01 	movne.w	ip, #1
 801018c:	f04f 0c00 	moveq.w	ip, #0
 8010190:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010194:	bf0c      	ite	eq
 8010196:	f04f 0c00 	moveq.w	ip, #0
 801019a:	f00c 0c01 	andne.w	ip, ip, #1
 801019e:	f1bc 0f00 	cmp.w	ip, #0
 80101a2:	d002      	beq.n	80101aa <HAL_TIMEx_MasterConfigSynchronization+0x156>
 80101a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80101a8:	d11d      	bne.n	80101e6 <HAL_TIMEx_MasterConfigSynchronization+0x192>
    tmpcr2 &= ~TIM_CR2_MMS2;
 80101aa:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80101ae:	4603      	mov	r3, r0
 80101b0:	ea47 070e 	orr.w	r7, r7, lr
 80101b4:	e7aa      	b.n	801010c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80101b6:	f240 71b5 	movw	r1, #1973	; 0x7b5
 80101ba:	481c      	ldr	r0, [pc, #112]	; (801022c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 80101bc:	f7f3 fdbe 	bl	8003d3c <assert_failed>
  __HAL_LOCK(htim);
 80101c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80101c4:	2b01      	cmp	r3, #1
 80101c6:	d186      	bne.n	80100d6 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80101c8:	2002      	movs	r0, #2
}
 80101ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80101ce:	f240 71b3 	movw	r1, #1971	; 0x7b3
 80101d2:	4816      	ldr	r0, [pc, #88]	; (801022c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 80101d4:	f7f3 fdb2 	bl	8003d3c <assert_failed>
 80101d8:	e76d      	b.n	80100b6 <HAL_TIMEx_MasterConfigSynchronization+0x62>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 80101da:	f240 71b4 	movw	r1, #1972	; 0x7b4
 80101de:	4813      	ldr	r0, [pc, #76]	; (801022c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 80101e0:	f7f3 fdac 	bl	8003d3c <assert_failed>
 80101e4:	e76f      	b.n	80100c6 <HAL_TIMEx_MasterConfigSynchronization+0x72>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 80101e6:	f240 71c7 	movw	r1, #1991	; 0x7c7
 80101ea:	4810      	ldr	r0, [pc, #64]	; (801022c <HAL_TIMEx_MasterConfigSynchronization+0x1d8>)
 80101ec:	f7f3 fda6 	bl	8003d3c <assert_failed>
 80101f0:	6822      	ldr	r2, [r4, #0]
 80101f2:	f8d5 e004 	ldr.w	lr, [r5, #4]
 80101f6:	eba2 0309 	sub.w	r3, r2, r9
 80101fa:	eba2 0c08 	sub.w	ip, r2, r8
 80101fe:	4258      	negs	r0, r3
 8010200:	4158      	adcs	r0, r3
 8010202:	f1dc 0100 	rsbs	r1, ip, #0
 8010206:	eb41 010c 	adc.w	r1, r1, ip
 801020a:	e7ce      	b.n	80101aa <HAL_TIMEx_MasterConfigSynchronization+0x156>
 801020c:	40010000 	.word	0x40010000
 8010210:	40000800 	.word	0x40000800
 8010214:	40000c00 	.word	0x40000c00
 8010218:	40001000 	.word	0x40001000
 801021c:	40001400 	.word	0x40001400
 8010220:	40010400 	.word	0x40010400
 8010224:	40000400 	.word	0x40000400
 8010228:	40001800 	.word	0x40001800
 801022c:	08029a9c 	.word	0x08029a9c

08010230 <HAL_TIMEx_CommutCallback>:
 8010230:	4770      	bx	lr
 8010232:	bf00      	nop

08010234 <HAL_TIMEx_BreakCallback>:
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop

08010238 <HAL_TIMEx_Break2Callback>:
 8010238:	4770      	bx	lr
 801023a:	bf00      	nop

0801023c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801023c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801023e:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010242:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010246:	e842 3100 	strex	r1, r3, [r2]
 801024a:	2900      	cmp	r1, #0
 801024c:	d1f7      	bne.n	801023e <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801024e:	f102 0308 	add.w	r3, r2, #8
 8010252:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010256:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801025a:	f102 0c08 	add.w	ip, r2, #8
 801025e:	e84c 3100 	strex	r1, r3, [ip]
 8010262:	2900      	cmp	r1, #0
 8010264:	d1f3      	bne.n	801024e <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010266:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010268:	2b01      	cmp	r3, #1
 801026a:	d005      	beq.n	8010278 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801026c:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801026e:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010270:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 8010272:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010274:	6603      	str	r3, [r0, #96]	; 0x60
}
 8010276:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010278:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801027c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010280:	e842 3100 	strex	r1, r3, [r2]
 8010284:	2900      	cmp	r1, #0
 8010286:	d0f1      	beq.n	801026c <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010288:	e852 3f00 	ldrex	r3, [r2]
 801028c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010290:	e842 3100 	strex	r1, r3, [r2]
 8010294:	2900      	cmp	r1, #0
 8010296:	d1ef      	bne.n	8010278 <UART_EndRxTransfer+0x3c>
 8010298:	e7e8      	b.n	801026c <UART_EndRxTransfer+0x30>
 801029a:	bf00      	nop

0801029c <HAL_UART_DeInit>:
  if (huart == NULL)
 801029c:	2800      	cmp	r0, #0
 801029e:	d045      	beq.n	801032c <HAL_UART_DeInit+0x90>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80102a0:	6802      	ldr	r2, [r0, #0]
 80102a2:	4927      	ldr	r1, [pc, #156]	; (8010340 <HAL_UART_DeInit+0xa4>)
{
 80102a4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80102a6:	4b27      	ldr	r3, [pc, #156]	; (8010344 <HAL_UART_DeInit+0xa8>)
 80102a8:	4604      	mov	r4, r0
 80102aa:	4827      	ldr	r0, [pc, #156]	; (8010348 <HAL_UART_DeInit+0xac>)
 80102ac:	429a      	cmp	r2, r3
 80102ae:	bf18      	it	ne
 80102b0:	428a      	cmpne	r2, r1
 80102b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102b6:	4d25      	ldr	r5, [pc, #148]	; (801034c <HAL_UART_DeInit+0xb0>)
 80102b8:	bf14      	ite	ne
 80102ba:	2301      	movne	r3, #1
 80102bc:	2300      	moveq	r3, #0
 80102be:	4282      	cmp	r2, r0
 80102c0:	bf0c      	ite	eq
 80102c2:	2300      	moveq	r3, #0
 80102c4:	f003 0301 	andne.w	r3, r3, #1
 80102c8:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 80102cc:	428a      	cmp	r2, r1
 80102ce:	bf0c      	ite	eq
 80102d0:	2300      	moveq	r3, #0
 80102d2:	f003 0301 	andne.w	r3, r3, #1
 80102d6:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 80102da:	42aa      	cmp	r2, r5
 80102dc:	bf0c      	ite	eq
 80102de:	2300      	moveq	r3, #0
 80102e0:	f003 0301 	andne.w	r3, r3, #1
 80102e4:	4282      	cmp	r2, r0
 80102e6:	bf0c      	ite	eq
 80102e8:	2300      	moveq	r3, #0
 80102ea:	f003 0301 	andne.w	r3, r3, #1
 80102ee:	428a      	cmp	r2, r1
 80102f0:	bf0c      	ite	eq
 80102f2:	2300      	moveq	r3, #0
 80102f4:	f003 0301 	andne.w	r3, r3, #1
 80102f8:	b113      	cbz	r3, 8010300 <HAL_UART_DeInit+0x64>
 80102fa:	4b15      	ldr	r3, [pc, #84]	; (8010350 <HAL_UART_DeInit+0xb4>)
 80102fc:	429a      	cmp	r2, r3
 80102fe:	d117      	bne.n	8010330 <HAL_UART_DeInit+0x94>
  huart->gState = HAL_UART_STATE_BUSY;
 8010300:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 8010302:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 8010304:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8010306:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8010308:	6813      	ldr	r3, [r2, #0]
 801030a:	f023 0301 	bic.w	r3, r3, #1
 801030e:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 8010310:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 8010312:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 8010314:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 8010316:	f7f5 fd35 	bl	8005d84 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801031a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 801031e:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8010320:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8010322:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 8010326:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010328:	6625      	str	r5, [r4, #96]	; 0x60
}
 801032a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 801032c:	2001      	movs	r0, #1
}
 801032e:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8010330:	f240 2167 	movw	r1, #615	; 0x267
 8010334:	4807      	ldr	r0, [pc, #28]	; (8010354 <HAL_UART_DeInit+0xb8>)
 8010336:	f7f3 fd01 	bl	8003d3c <assert_failed>
 801033a:	6822      	ldr	r2, [r4, #0]
 801033c:	e7e0      	b.n	8010300 <HAL_UART_DeInit+0x64>
 801033e:	bf00      	nop
 8010340:	40004400 	.word	0x40004400
 8010344:	40011000 	.word	0x40011000
 8010348:	40004800 	.word	0x40004800
 801034c:	40005000 	.word	0x40005000
 8010350:	40007c00 	.word	0x40007c00
 8010354:	08029ad8 	.word	0x08029ad8

08010358 <HAL_UART_Transmit_DMA>:
{
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 801035a:	6f87      	ldr	r7, [r0, #120]	; 0x78
 801035c:	2f20      	cmp	r7, #32
 801035e:	d140      	bne.n	80103e2 <HAL_UART_Transmit_DMA+0x8a>
    if ((pData == NULL) || (Size == 0U))
 8010360:	2900      	cmp	r1, #0
 8010362:	d03c      	beq.n	80103de <HAL_UART_Transmit_DMA+0x86>
 8010364:	fab2 f682 	clz	r6, r2
 8010368:	0976      	lsrs	r6, r6, #5
 801036a:	2a00      	cmp	r2, #0
 801036c:	d037      	beq.n	80103de <HAL_UART_Transmit_DMA+0x86>
 801036e:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8010370:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8010374:	2801      	cmp	r0, #1
 8010376:	d034      	beq.n	80103e2 <HAL_UART_Transmit_DMA+0x8a>
 8010378:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801037a:	f04f 0c21 	mov.w	ip, #33	; 0x21
    if (huart->hdmatx != NULL)
 801037e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8010380:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8010384:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010386:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 801038a:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 801038e:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010392:	f8c4 c078 	str.w	ip, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8010396:	b178      	cbz	r0, 80103b8 <HAL_UART_Transmit_DMA+0x60>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8010398:	f8df c060 	ldr.w	ip, [pc, #96]	; 80103fc <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 801039c:	4613      	mov	r3, r2
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 801039e:	4a16      	ldr	r2, [pc, #88]	; (80103f8 <HAL_UART_Transmit_DMA+0xa0>)
      huart->hdmatx->XferAbortCallback = NULL;
 80103a0:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80103a2:	e9c0 c20f 	strd	ip, r2, [r0, #60]	; 0x3c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80103a6:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80103a8:	f8df c054 	ldr.w	ip, [pc, #84]	; 8010400 <HAL_UART_Transmit_DMA+0xa8>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80103ac:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80103ae:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80103b2:	f7f7 fea1 	bl	80080f8 <HAL_DMA_Start_IT>
 80103b6:	b9b0      	cbnz	r0, 80103e6 <HAL_UART_Transmit_DMA+0x8e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80103b8:	6822      	ldr	r2, [r4, #0]
 80103ba:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 80103bc:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80103be:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 80103c0:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103c4:	f102 0308 	add.w	r3, r2, #8
 80103c8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80103cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d0:	f102 0108 	add.w	r1, r2, #8
 80103d4:	e841 3000 	strex	r0, r3, [r1]
 80103d8:	2800      	cmp	r0, #0
 80103da:	d1f3      	bne.n	80103c4 <HAL_UART_Transmit_DMA+0x6c>
}
 80103dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 80103de:	2001      	movs	r0, #1
}
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80103e2:	2002      	movs	r0, #2
}
 80103e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103e6:	2310      	movs	r3, #16
        return HAL_ERROR;
 80103e8:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 80103ea:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 80103f2:	67a7      	str	r7, [r4, #120]	; 0x78
}
 80103f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80103f6:	bf00      	nop
 80103f8:	08010551 	.word	0x08010551
 80103fc:	08010509 	.word	0x08010509
 8010400:	08010561 	.word	0x08010561

08010404 <HAL_UART_Abort>:
{
 8010404:	b538      	push	{r3, r4, r5, lr}
 8010406:	4604      	mov	r4, r0
 8010408:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 801040e:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010412:	e843 2100 	strex	r1, r2, [r3]
 8010416:	2900      	cmp	r1, #0
 8010418:	d1f7      	bne.n	801040a <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801041a:	f103 0208 	add.w	r2, r3, #8
 801041e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010422:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010426:	f103 0008 	add.w	r0, r3, #8
 801042a:	e840 2100 	strex	r1, r2, [r0]
 801042e:	2900      	cmp	r1, #0
 8010430:	d1f3      	bne.n	801041a <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010432:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8010434:	2a01      	cmp	r2, #1
 8010436:	d043      	beq.n	80104c0 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010438:	6899      	ldr	r1, [r3, #8]
 801043a:	461a      	mov	r2, r3
 801043c:	0608      	lsls	r0, r1, #24
 801043e:	d42a      	bmi.n	8010496 <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010440:	6899      	ldr	r1, [r3, #8]
 8010442:	0649      	lsls	r1, r1, #25
 8010444:	d514      	bpl.n	8010470 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010446:	f103 0208 	add.w	r2, r3, #8
 801044a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801044e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010452:	f103 0008 	add.w	r0, r3, #8
 8010456:	e840 2100 	strex	r1, r2, [r0]
 801045a:	2900      	cmp	r1, #0
 801045c:	d1f3      	bne.n	8010446 <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 801045e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010460:	2800      	cmp	r0, #0
 8010462:	d03e      	beq.n	80104e2 <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8010464:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8010466:	f7f7 fea3 	bl	80081b0 <HAL_DMA_Abort>
 801046a:	2800      	cmp	r0, #0
 801046c:	d145      	bne.n	80104fa <HAL_UART_Abort+0xf6>
 801046e:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8010470:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010472:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8010474:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8010476:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 801047a:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 801047c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010480:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010482:	6991      	ldr	r1, [r2, #24]
 8010484:	f041 0108 	orr.w	r1, r1, #8
 8010488:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801048a:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 801048c:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801048e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010490:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8010494:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010496:	f103 0208 	add.w	r2, r3, #8
 801049a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801049e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104a2:	f103 0008 	add.w	r0, r3, #8
 80104a6:	e840 2100 	strex	r1, r2, [r0]
 80104aa:	2900      	cmp	r1, #0
 80104ac:	d1f3      	bne.n	8010496 <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 80104ae:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80104b0:	b120      	cbz	r0, 80104bc <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 80104b2:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 80104b4:	f7f7 fe7c 	bl	80081b0 <HAL_DMA_Abort>
 80104b8:	b9a8      	cbnz	r0, 80104e6 <HAL_UART_Abort+0xe2>
 80104ba:	6823      	ldr	r3, [r4, #0]
 80104bc:	461a      	mov	r2, r3
 80104be:	e7bf      	b.n	8010440 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c0:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80104c4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c8:	e843 2100 	strex	r1, r2, [r3]
 80104cc:	2900      	cmp	r1, #0
 80104ce:	d0b3      	beq.n	8010438 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104d0:	e853 2f00 	ldrex	r2, [r3]
 80104d4:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d8:	e843 2100 	strex	r1, r2, [r3]
 80104dc:	2900      	cmp	r1, #0
 80104de:	d1ef      	bne.n	80104c0 <HAL_UART_Abort+0xbc>
 80104e0:	e7aa      	b.n	8010438 <HAL_UART_Abort+0x34>
 80104e2:	461a      	mov	r2, r3
 80104e4:	e7c4      	b.n	8010470 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80104e6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80104e8:	f7f7 ffae 	bl	8008448 <HAL_DMA_GetError>
 80104ec:	2820      	cmp	r0, #32
 80104ee:	d1e4      	bne.n	80104ba <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104f0:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 80104f2:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80104f4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80104f8:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80104fa:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80104fc:	f7f7 ffa4 	bl	8008448 <HAL_DMA_GetError>
 8010500:	2820      	cmp	r0, #32
 8010502:	d1b4      	bne.n	801046e <HAL_UART_Abort+0x6a>
 8010504:	e7f4      	b.n	80104f0 <HAL_UART_Abort+0xec>
 8010506:	bf00      	nop

08010508 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8010508:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801050a:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801050c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801050e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010512:	d018      	beq.n	8010546 <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8010514:	2300      	movs	r3, #0
 8010516:	6802      	ldr	r2, [r0, #0]
 8010518:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801051c:	f102 0308 	add.w	r3, r2, #8
 8010520:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010528:	f102 0008 	add.w	r0, r2, #8
 801052c:	e840 3100 	strex	r1, r3, [r0]
 8010530:	2900      	cmp	r1, #0
 8010532:	d1f3      	bne.n	801051c <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010534:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010538:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801053c:	e842 3100 	strex	r1, r3, [r2]
 8010540:	2900      	cmp	r1, #0
 8010542:	d1f7      	bne.n	8010534 <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010544:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8010546:	f7f0 fd7b 	bl	8001040 <HAL_UART_TxCpltCallback>
}
 801054a:	bd08      	pop	{r3, pc}

0801054c <HAL_UART_TxHalfCpltCallback>:
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop

08010550 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010550:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8010552:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8010554:	f7ff fffa 	bl	801054c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010558:	bd08      	pop	{r3, pc}
 801055a:	bf00      	nop

0801055c <HAL_UART_RxHalfCpltCallback>:
 801055c:	4770      	bx	lr
 801055e:	bf00      	nop

08010560 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010560:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010562:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010564:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8010566:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010568:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801056a:	6893      	ldr	r3, [r2, #8]
 801056c:	061b      	lsls	r3, r3, #24
 801056e:	d501      	bpl.n	8010574 <UART_DMAError+0x14>
 8010570:	2921      	cmp	r1, #33	; 0x21
 8010572:	d00d      	beq.n	8010590 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010574:	6893      	ldr	r3, [r2, #8]
 8010576:	065b      	lsls	r3, r3, #25
 8010578:	d501      	bpl.n	801057e <UART_DMAError+0x1e>
 801057a:	2c22      	cmp	r4, #34	; 0x22
 801057c:	d016      	beq.n	80105ac <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801057e:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8010582:	f043 0310 	orr.w	r3, r3, #16
 8010586:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801058a:	f7f3 febb 	bl	8004304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801058e:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8010590:	2300      	movs	r3, #0
 8010592:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010596:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 801059a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801059e:	e842 3100 	strex	r1, r3, [r2]
 80105a2:	2900      	cmp	r1, #0
 80105a4:	d1f7      	bne.n	8010596 <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 80105a6:	2320      	movs	r3, #32
 80105a8:	6783      	str	r3, [r0, #120]	; 0x78
}
 80105aa:	e7e3      	b.n	8010574 <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 80105ac:	2300      	movs	r3, #0
 80105ae:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 80105b2:	f7ff fe43 	bl	801023c <UART_EndRxTransfer>
 80105b6:	e7e2      	b.n	801057e <UART_DMAError+0x1e>

080105b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80105b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105ba:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 80105bc:	2300      	movs	r3, #0
 80105be:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80105c2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80105c6:	f7f3 fe9d 	bl	8004304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80105ca:	bd08      	pop	{r3, pc}

080105cc <HAL_UART_AbortCpltCallback>:
 80105cc:	4770      	bx	lr
 80105ce:	bf00      	nop

080105d0 <HAL_UART_Abort_IT>:
{
 80105d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105d2:	4605      	mov	r5, r0
 80105d4:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d6:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80105da:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105de:	e843 2100 	strex	r1, r2, [r3]
 80105e2:	2900      	cmp	r1, #0
 80105e4:	d1f7      	bne.n	80105d6 <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105e6:	f103 0208 	add.w	r2, r3, #8
 80105ea:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ee:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f2:	f103 0008 	add.w	r0, r3, #8
 80105f6:	e840 2100 	strex	r1, r2, [r0]
 80105fa:	2900      	cmp	r1, #0
 80105fc:	d1f3      	bne.n	80105e6 <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105fe:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8010600:	2a01      	cmp	r2, #1
 8010602:	d05e      	beq.n	80106c2 <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8010604:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8010606:	2800      	cmp	r0, #0
 8010608:	d071      	beq.n	80106ee <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 801060a:	689a      	ldr	r2, [r3, #8]
 801060c:	461f      	mov	r7, r3
 801060e:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8010612:	bf18      	it	ne
 8010614:	4a3b      	ldrne	r2, [pc, #236]	; (8010704 <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8010616:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8010618:	6f29      	ldr	r1, [r5, #112]	; 0x70
 801061a:	b129      	cbz	r1, 8010628 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801061c:	689a      	ldr	r2, [r3, #8]
 801061e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8010622:	bf18      	it	ne
 8010624:	4a38      	ldrne	r2, [pc, #224]	; (8010708 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8010626:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8010628:	689a      	ldr	r2, [r3, #8]
 801062a:	0616      	lsls	r6, r2, #24
 801062c:	d430      	bmi.n	8010690 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801062e:	689a      	ldr	r2, [r3, #8]
 8010630:	0654      	lsls	r4, r2, #25
 8010632:	d515      	bpl.n	8010660 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8010634:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010636:	f103 0208 	add.w	r2, r3, #8
 801063a:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801063e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010642:	f103 0008 	add.w	r0, r3, #8
 8010646:	e840 2600 	strex	r6, r2, [r0]
 801064a:	2e00      	cmp	r6, #0
 801064c:	d1f3      	bne.n	8010636 <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 801064e:	2900      	cmp	r1, #0
 8010650:	d04f      	beq.n	80106f2 <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010652:	4608      	mov	r0, r1
 8010654:	f7f7 fdf4 	bl	8008240 <HAL_DMA_Abort_IT>
 8010658:	b1c0      	cbz	r0, 801068c <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 801065a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801065c:	682f      	ldr	r7, [r5, #0]
 801065e:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8010660:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010662:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8010664:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8010666:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8010668:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 801066c:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 801066e:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 8010672:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010674:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010678:	623a      	str	r2, [r7, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801067a:	69ba      	ldr	r2, [r7, #24]
 801067c:	f042 0208 	orr.w	r2, r2, #8
 8010680:	61ba      	str	r2, [r7, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8010682:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8010684:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010686:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8010688:	f7ff ffa0 	bl	80105cc <HAL_UART_AbortCpltCallback>
}
 801068c:	2000      	movs	r0, #0
 801068e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010690:	f103 0208 	add.w	r2, r3, #8
 8010694:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010698:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069c:	f103 0608 	add.w	r6, r3, #8
 80106a0:	e846 2400 	strex	r4, r2, [r6]
 80106a4:	2c00      	cmp	r4, #0
 80106a6:	d1f3      	bne.n	8010690 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 80106a8:	b1e0      	cbz	r0, 80106e4 <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80106aa:	f7f7 fdc9 	bl	8008240 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106ae:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 80106b0:	b318      	cbz	r0, 80106fa <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 80106b2:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106b4:	461f      	mov	r7, r3
 80106b6:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 80106b8:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106ba:	0651      	lsls	r1, r2, #25
 80106bc:	d5d0      	bpl.n	8010660 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 80106be:	2401      	movs	r4, #1
 80106c0:	e01e      	b.n	8010700 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106c2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80106c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106ca:	e843 2100 	strex	r1, r2, [r3]
 80106ce:	2900      	cmp	r1, #0
 80106d0:	d098      	beq.n	8010604 <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106d2:	e853 2f00 	ldrex	r2, [r3]
 80106d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106da:	e843 2100 	strex	r1, r2, [r3]
 80106de:	2900      	cmp	r1, #0
 80106e0:	d1ef      	bne.n	80106c2 <HAL_UART_Abort_IT+0xf2>
 80106e2:	e78f      	b.n	8010604 <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106e4:	689a      	ldr	r2, [r3, #8]
 80106e6:	461f      	mov	r7, r3
 80106e8:	0652      	lsls	r2, r2, #25
 80106ea:	d5b9      	bpl.n	8010660 <HAL_UART_Abort_IT+0x90>
 80106ec:	e7a2      	b.n	8010634 <HAL_UART_Abort_IT+0x64>
 80106ee:	461f      	mov	r7, r3
 80106f0:	e792      	b.n	8010618 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 80106f2:	2c01      	cmp	r4, #1
 80106f4:	d1ca      	bne.n	801068c <HAL_UART_Abort_IT+0xbc>
 80106f6:	461f      	mov	r7, r3
 80106f8:	e7b2      	b.n	8010660 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80106fa:	689a      	ldr	r2, [r3, #8]
 80106fc:	0650      	lsls	r0, r2, #25
 80106fe:	d5c5      	bpl.n	801068c <HAL_UART_Abort_IT+0xbc>
 8010700:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8010702:	e798      	b.n	8010636 <HAL_UART_Abort_IT+0x66>
 8010704:	0801074d 	.word	0x0801074d
 8010708:	0801070d 	.word	0x0801070d

0801070c <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801070c:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 801070e:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8010710:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8010714:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8010716:	b113      	cbz	r3, 801071e <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8010718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801071a:	b103      	cbz	r3, 801071e <UART_DMARxAbortCallback+0x12>
 801071c:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 801071e:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010720:	6802      	ldr	r2, [r0, #0]
 8010722:	210f      	movs	r1, #15
{
 8010724:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8010726:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 801072a:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 801072c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010730:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010734:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010736:	6991      	ldr	r1, [r2, #24]
 8010738:	f041 0108 	orr.w	r1, r1, #8
 801073c:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 801073e:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010740:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010742:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8010744:	f7ff ff42 	bl	80105cc <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010748:	bd10      	pop	{r4, pc}
 801074a:	bf00      	nop

0801074c <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801074c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 801074e:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8010750:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8010754:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8010756:	b113      	cbz	r3, 801075e <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8010758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801075a:	b103      	cbz	r3, 801075e <UART_DMATxAbortCallback+0x12>
 801075c:	4770      	bx	lr
{
 801075e:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8010760:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8010762:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010764:	6801      	ldr	r1, [r0, #0]
 8010766:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8010768:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 801076c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010770:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8010774:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8010776:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8010778:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801077a:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 801077c:	f7ff ff26 	bl	80105cc <HAL_UART_AbortCpltCallback>
}
 8010780:	bd10      	pop	{r4, pc}
 8010782:	bf00      	nop

08010784 <HAL_UARTEx_RxEventCallback>:
}
 8010784:	4770      	bx	lr
 8010786:	bf00      	nop

08010788 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010788:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 801078a:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801078c:	6e03      	ldr	r3, [r0, #96]	; 0x60
 801078e:	2b01      	cmp	r3, #1
 8010790:	d002      	beq.n	8010798 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8010792:	f7ff fee3 	bl	801055c <HAL_UART_RxHalfCpltCallback>
}
 8010796:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010798:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801079c:	0849      	lsrs	r1, r1, #1
 801079e:	f7ff fff1 	bl	8010784 <HAL_UARTEx_RxEventCallback>
}
 80107a2:	bd08      	pop	{r3, pc}

080107a4 <UART_DMAReceiveCplt>:
{
 80107a4:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80107a6:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107a8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80107aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80107ae:	d028      	beq.n	8010802 <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 80107b0:	2200      	movs	r2, #0
 80107b2:	6803      	ldr	r3, [r0, #0]
 80107b4:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107b8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80107bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107c0:	e843 2100 	strex	r1, r2, [r3]
 80107c4:	2900      	cmp	r1, #0
 80107c6:	d1f7      	bne.n	80107b8 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107c8:	f103 0208 	add.w	r2, r3, #8
 80107cc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107d0:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107d4:	f103 0c08 	add.w	ip, r3, #8
 80107d8:	e84c 2100 	strex	r1, r2, [ip]
 80107dc:	2900      	cmp	r1, #0
 80107de:	d1f3      	bne.n	80107c8 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107e0:	f103 0208 	add.w	r2, r3, #8
 80107e4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80107e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ec:	f103 0c08 	add.w	ip, r3, #8
 80107f0:	e84c 2100 	strex	r1, r2, [ip]
 80107f4:	2900      	cmp	r1, #0
 80107f6:	d1f3      	bne.n	80107e0 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 80107f8:	2220      	movs	r2, #32
 80107fa:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80107fc:	6e02      	ldr	r2, [r0, #96]	; 0x60
 80107fe:	2a01      	cmp	r2, #1
 8010800:	d005      	beq.n	801080e <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010802:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8010804:	2b01      	cmp	r3, #1
 8010806:	d013      	beq.n	8010830 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8010808:	f7f3 fd0e 	bl	8004228 <HAL_UART_RxCpltCallback>
}
 801080c:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801080e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010812:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010816:	e843 2100 	strex	r1, r2, [r3]
 801081a:	2900      	cmp	r1, #0
 801081c:	d0f1      	beq.n	8010802 <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801081e:	e853 2f00 	ldrex	r2, [r3]
 8010822:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010826:	e843 2100 	strex	r1, r2, [r3]
 801082a:	2900      	cmp	r1, #0
 801082c:	d1ef      	bne.n	801080e <UART_DMAReceiveCplt+0x6a>
 801082e:	e7e8      	b.n	8010802 <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010830:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8010834:	f7ff ffa6 	bl	8010784 <HAL_UARTEx_RxEventCallback>
}
 8010838:	bd08      	pop	{r3, pc}
 801083a:	bf00      	nop

0801083c <HAL_UARTEx_WakeupCallback>:
}
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop

08010840 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010840:	6803      	ldr	r3, [r0, #0]
{
 8010842:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8010846:	69da      	ldr	r2, [r3, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010848:	f640 050f 	movw	r5, #2063	; 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801084c:	6819      	ldr	r1, [r3, #0]
{
 801084e:	4604      	mov	r4, r0
  if (errorflags == 0U)
 8010850:	422a      	tst	r2, r5
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010852:	689e      	ldr	r6, [r3, #8]
  if (errorflags == 0U)
 8010854:	d17d      	bne.n	8010952 <HAL_UART_IRQHandler+0x112>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010856:	0697      	lsls	r7, r2, #26
 8010858:	d502      	bpl.n	8010860 <HAL_UART_IRQHandler+0x20>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801085a:	068d      	lsls	r5, r1, #26
 801085c:	f100 80f4 	bmi.w	8010a48 <HAL_UART_IRQHandler+0x208>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010860:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8010862:	2801      	cmp	r0, #1
 8010864:	d024      	beq.n	80108b0 <HAL_UART_IRQHandler+0x70>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010866:	02d0      	lsls	r0, r2, #11
 8010868:	d502      	bpl.n	8010870 <HAL_UART_IRQHandler+0x30>
 801086a:	0277      	lsls	r7, r6, #9
 801086c:	f100 80f1 	bmi.w	8010a52 <HAL_UART_IRQHandler+0x212>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8010870:	0616      	lsls	r6, r2, #24
 8010872:	d414      	bmi.n	801089e <HAL_UART_IRQHandler+0x5e>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010874:	0650      	lsls	r0, r2, #25
 8010876:	d501      	bpl.n	801087c <HAL_UART_IRQHandler+0x3c>
 8010878:	064a      	lsls	r2, r1, #25
 801087a:	d401      	bmi.n	8010880 <HAL_UART_IRQHandler+0x40>
}
 801087c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010880:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010884:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010888:	e843 2100 	strex	r1, r2, [r3]
 801088c:	2900      	cmp	r1, #0
 801088e:	d1f7      	bne.n	8010880 <HAL_UART_IRQHandler+0x40>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010890:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010892:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 8010894:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8010896:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8010898:	f7f0 fbd2 	bl	8001040 <HAL_UART_TxCpltCallback>
    return;
 801089c:	e7ee      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801089e:	060d      	lsls	r5, r1, #24
 80108a0:	d5e8      	bpl.n	8010874 <HAL_UART_IRQHandler+0x34>
    if (huart->TxISR != NULL)
 80108a2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d0e9      	beq.n	801087c <HAL_UART_IRQHandler+0x3c>
      huart->TxISR(huart);
 80108a8:	4620      	mov	r0, r4
}
 80108aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 80108ae:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80108b0:	06d0      	lsls	r0, r2, #27
 80108b2:	d5d8      	bpl.n	8010866 <HAL_UART_IRQHandler+0x26>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80108b4:	06cf      	lsls	r7, r1, #27
 80108b6:	d5d6      	bpl.n	8010866 <HAL_UART_IRQHandler+0x26>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80108b8:	2210      	movs	r2, #16
 80108ba:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80108bc:	689a      	ldr	r2, [r3, #8]
 80108be:	0655      	lsls	r5, r2, #25
 80108c0:	f140 80d9 	bpl.w	8010a76 <HAL_UART_IRQHandler+0x236>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80108c4:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80108c6:	6802      	ldr	r2, [r0, #0]
 80108c8:	6852      	ldr	r2, [r2, #4]
 80108ca:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80108cc:	2a00      	cmp	r2, #0
 80108ce:	d0d5      	beq.n	801087c <HAL_UART_IRQHandler+0x3c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80108d0:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80108d4:	4291      	cmp	r1, r2
 80108d6:	d9d1      	bls.n	801087c <HAL_UART_IRQHandler+0x3c>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108d8:	69c5      	ldr	r5, [r0, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 80108da:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80108de:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80108e2:	d02e      	beq.n	8010942 <HAL_UART_IRQHandler+0x102>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108e4:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80108e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108ec:	e843 2100 	strex	r1, r2, [r3]
 80108f0:	2900      	cmp	r1, #0
 80108f2:	d1f7      	bne.n	80108e4 <HAL_UART_IRQHandler+0xa4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108f4:	f103 0208 	add.w	r2, r3, #8
 80108f8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108fc:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010900:	f103 0508 	add.w	r5, r3, #8
 8010904:	e845 2100 	strex	r1, r2, [r5]
 8010908:	2900      	cmp	r1, #0
 801090a:	d1f3      	bne.n	80108f4 <HAL_UART_IRQHandler+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801090c:	f103 0208 	add.w	r2, r3, #8
 8010910:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010918:	f103 0508 	add.w	r5, r3, #8
 801091c:	e845 2100 	strex	r1, r2, [r5]
 8010920:	2900      	cmp	r1, #0
 8010922:	d1f3      	bne.n	801090c <HAL_UART_IRQHandler+0xcc>
          huart->RxState = HAL_UART_STATE_READY;
 8010924:	2220      	movs	r2, #32
 8010926:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010928:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801092a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801092e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010932:	e843 2100 	strex	r1, r2, [r3]
 8010936:	2900      	cmp	r1, #0
 8010938:	d1f7      	bne.n	801092a <HAL_UART_IRQHandler+0xea>
          (void)HAL_DMA_Abort(huart->hdmarx);
 801093a:	f7f7 fc39 	bl	80081b0 <HAL_DMA_Abort>
 801093e:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010942:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8010946:	4620      	mov	r0, r4
 8010948:	1ac9      	subs	r1, r1, r3
 801094a:	b289      	uxth	r1, r1
 801094c:	f7ff ff1a 	bl	8010784 <HAL_UARTEx_RxEventCallback>
 8010950:	e794      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010952:	4865      	ldr	r0, [pc, #404]	; (8010ae8 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 8010954:	f006 0501 	and.w	r5, r6, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8010958:	4008      	ands	r0, r1
 801095a:	4328      	orrs	r0, r5
 801095c:	d080      	beq.n	8010860 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801095e:	07d0      	lsls	r0, r2, #31
 8010960:	461f      	mov	r7, r3
 8010962:	d509      	bpl.n	8010978 <HAL_UART_IRQHandler+0x138>
 8010964:	05ce      	lsls	r6, r1, #23
 8010966:	d507      	bpl.n	8010978 <HAL_UART_IRQHandler+0x138>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010968:	2001      	movs	r0, #1
 801096a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801096c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8010970:	f040 0001 	orr.w	r0, r0, #1
 8010974:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010978:	0790      	lsls	r0, r2, #30
 801097a:	d558      	bpl.n	8010a2e <HAL_UART_IRQHandler+0x1ee>
 801097c:	b14d      	cbz	r5, 8010992 <HAL_UART_IRQHandler+0x152>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801097e:	2002      	movs	r0, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010980:	0756      	lsls	r6, r2, #29
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010982:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010984:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8010988:	f040 0004 	orr.w	r0, r0, #4
 801098c:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010990:	d451      	bmi.n	8010a36 <HAL_UART_IRQHandler+0x1f6>
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010992:	0716      	lsls	r6, r2, #28
 8010994:	d50b      	bpl.n	80109ae <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010996:	f001 0020 	and.w	r0, r1, #32
 801099a:	4328      	orrs	r0, r5
 801099c:	d007      	beq.n	80109ae <HAL_UART_IRQHandler+0x16e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801099e:	2008      	movs	r0, #8
 80109a0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80109a2:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80109a6:	f040 0008 	orr.w	r0, r0, #8
 80109aa:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80109ae:	0515      	lsls	r5, r2, #20
 80109b0:	d50a      	bpl.n	80109c8 <HAL_UART_IRQHandler+0x188>
 80109b2:	0148      	lsls	r0, r1, #5
 80109b4:	d508      	bpl.n	80109c8 <HAL_UART_IRQHandler+0x188>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80109b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80109ba:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80109bc:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80109c0:	f043 0320 	orr.w	r3, r3, #32
 80109c4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80109c8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	f43f af55 	beq.w	801087c <HAL_UART_IRQHandler+0x3c>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80109d2:	0693      	lsls	r3, r2, #26
 80109d4:	d501      	bpl.n	80109da <HAL_UART_IRQHandler+0x19a>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80109d6:	068e      	lsls	r6, r1, #26
 80109d8:	d446      	bmi.n	8010a68 <HAL_UART_IRQHandler+0x228>
      errorcode = huart->ErrorCode;
 80109da:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80109de:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109e0:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80109e2:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80109e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ea:	431d      	orrs	r5, r3
 80109ec:	d076      	beq.n	8010adc <HAL_UART_IRQHandler+0x29c>
        UART_EndRxTransfer(huart);
 80109ee:	f7ff fc25 	bl	801023c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80109f2:	6823      	ldr	r3, [r4, #0]
 80109f4:	689a      	ldr	r2, [r3, #8]
 80109f6:	0655      	lsls	r5, r2, #25
 80109f8:	d532      	bpl.n	8010a60 <HAL_UART_IRQHandler+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109fa:	f103 0208 	add.w	r2, r3, #8
 80109fe:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010a02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a06:	f103 0008 	add.w	r0, r3, #8
 8010a0a:	e840 2100 	strex	r1, r2, [r0]
 8010a0e:	2900      	cmp	r1, #0
 8010a10:	d1f3      	bne.n	80109fa <HAL_UART_IRQHandler+0x1ba>
          if (huart->hdmarx != NULL)
 8010a12:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8010a14:	b320      	cbz	r0, 8010a60 <HAL_UART_IRQHandler+0x220>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010a16:	4b35      	ldr	r3, [pc, #212]	; (8010aec <HAL_UART_IRQHandler+0x2ac>)
 8010a18:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010a1a:	f7f7 fc11 	bl	8008240 <HAL_DMA_Abort_IT>
 8010a1e:	2800      	cmp	r0, #0
 8010a20:	f43f af2c 	beq.w	801087c <HAL_UART_IRQHandler+0x3c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a24:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8010a26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010a2a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8010a2c:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010a2e:	0750      	lsls	r0, r2, #29
 8010a30:	d5af      	bpl.n	8010992 <HAL_UART_IRQHandler+0x152>
 8010a32:	2d00      	cmp	r5, #0
 8010a34:	d0ad      	beq.n	8010992 <HAL_UART_IRQHandler+0x152>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010a36:	2004      	movs	r0, #4
 8010a38:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010a3a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8010a3e:	f040 0002 	orr.w	r0, r0, #2
 8010a42:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
 8010a46:	e7a4      	b.n	8010992 <HAL_UART_IRQHandler+0x152>
      if (huart->RxISR != NULL)
 8010a48:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	f47f af2d 	bne.w	80108aa <HAL_UART_IRQHandler+0x6a>
 8010a50:	e714      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010a52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8010a56:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010a58:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8010a5a:	f7ff feef 	bl	801083c <HAL_UARTEx_WakeupCallback>
    return;
 8010a5e:	e70d      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
            HAL_UART_ErrorCallback(huart);
 8010a60:	4620      	mov	r0, r4
 8010a62:	f7f3 fc4f 	bl	8004304 <HAL_UART_ErrorCallback>
 8010a66:	e709      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
        if (huart->RxISR != NULL)
 8010a68:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d0b5      	beq.n	80109da <HAL_UART_IRQHandler+0x19a>
          huart->RxISR(huart);
 8010a6e:	4620      	mov	r0, r4
 8010a70:	4798      	blx	r3
 8010a72:	6827      	ldr	r7, [r4, #0]
 8010a74:	e7b1      	b.n	80109da <HAL_UART_IRQHandler+0x19a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a76:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8010a7a:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8010a7e:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a82:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 8010a84:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010a86:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8010a88:	2900      	cmp	r1, #0
 8010a8a:	f43f aef7 	beq.w	801087c <HAL_UART_IRQHandler+0x3c>
 8010a8e:	2a00      	cmp	r2, #0
 8010a90:	f43f aef4 	beq.w	801087c <HAL_UART_IRQHandler+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a94:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010a98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a9c:	e843 2000 	strex	r0, r2, [r3]
 8010aa0:	2800      	cmp	r0, #0
 8010aa2:	d1f7      	bne.n	8010a94 <HAL_UART_IRQHandler+0x254>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aa4:	f103 0208 	add.w	r2, r3, #8
 8010aa8:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010aac:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ab0:	f103 0508 	add.w	r5, r3, #8
 8010ab4:	e845 2000 	strex	r0, r2, [r5]
 8010ab8:	2800      	cmp	r0, #0
 8010aba:	d1f3      	bne.n	8010aa4 <HAL_UART_IRQHandler+0x264>
        huart->RxState = HAL_UART_STATE_READY;
 8010abc:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8010abe:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 8010ac0:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ac2:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010ac4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ac8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010acc:	e843 2000 	strex	r0, r2, [r3]
 8010ad0:	2800      	cmp	r0, #0
 8010ad2:	d1f7      	bne.n	8010ac4 <HAL_UART_IRQHandler+0x284>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010ad4:	4620      	mov	r0, r4
 8010ad6:	f7ff fe55 	bl	8010784 <HAL_UARTEx_RxEventCallback>
 8010ada:	e6cf      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
        HAL_UART_ErrorCallback(huart);
 8010adc:	f7f3 fc12 	bl	8004304 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010ae0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 8010ae4:	e6ca      	b.n	801087c <HAL_UART_IRQHandler+0x3c>
 8010ae6:	bf00      	nop
 8010ae8:	04000120 	.word	0x04000120
 8010aec:	080105b9 	.word	0x080105b9

08010af0 <UART_SetConfig>:
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010af0:	4bbd      	ldr	r3, [pc, #756]	; (8010de8 <UART_SetConfig+0x2f8>)
 8010af2:	6842      	ldr	r2, [r0, #4]
 8010af4:	429a      	cmp	r2, r3
{
 8010af6:	b570      	push	{r4, r5, r6, lr}
 8010af8:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010afa:	f200 811b 	bhi.w	8010d34 <UART_SetConfig+0x244>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010afe:	68a3      	ldr	r3, [r4, #8]
 8010b00:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 8010b04:	d002      	beq.n	8010b0c <UART_SetConfig+0x1c>
 8010b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010b0a:	d17d      	bne.n	8010c08 <UART_SetConfig+0x118>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010b0c:	68e3      	ldr	r3, [r4, #12]
 8010b0e:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010b12:	f040 8083 	bne.w	8010c1c <UART_SetConfig+0x12c>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8010b16:	6a23      	ldr	r3, [r4, #32]
 8010b18:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8010b1c:	f040 8088 	bne.w	8010c30 <UART_SetConfig+0x140>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010b20:	6923      	ldr	r3, [r4, #16]
 8010b22:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8010b26:	d002      	beq.n	8010b2e <UART_SetConfig+0x3e>
 8010b28:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8010b2c:	d166      	bne.n	8010bfc <UART_SetConfig+0x10c>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010b2e:	6963      	ldr	r3, [r4, #20]
 8010b30:	f033 020c 	bics.w	r2, r3, #12
 8010b34:	d149      	bne.n	8010bca <UART_SetConfig+0xda>
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d047      	beq.n	8010bca <UART_SetConfig+0xda>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010b3a:	69a3      	ldr	r3, [r4, #24]
 8010b3c:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8010b40:	d14c      	bne.n	8010bdc <UART_SetConfig+0xec>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8010b42:	69e0      	ldr	r0, [r4, #28]
 8010b44:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8010b48:	d151      	bne.n	8010bee <UART_SetConfig+0xfe>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	6921      	ldr	r1, [r4, #16]
 8010b4e:	68a2      	ldr	r2, [r4, #8]
 8010b50:	681e      	ldr	r6, [r3, #0]
 8010b52:	430a      	orrs	r2, r1
 8010b54:	4da5      	ldr	r5, [pc, #660]	; (8010dec <UART_SetConfig+0x2fc>)
 8010b56:	6961      	ldr	r1, [r4, #20]
 8010b58:	4035      	ands	r5, r6
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b5a:	68e6      	ldr	r6, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b5c:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010b5e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b60:	432a      	orrs	r2, r5
  tmpreg |= huart->Init.OneBitSampling;
 8010b62:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b64:	4302      	orrs	r2, r0
  tmpreg |= huart->Init.OneBitSampling;
 8010b66:	4329      	orrs	r1, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b68:	4da1      	ldr	r5, [pc, #644]	; (8010df0 <UART_SetConfig+0x300>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010b6a:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b6c:	685a      	ldr	r2, [r3, #4]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b6e:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b70:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8010b74:	ea42 0206 	orr.w	r2, r2, r6
 8010b78:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010b7a:	689a      	ldr	r2, [r3, #8]
 8010b7c:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8010b80:	ea41 0102 	orr.w	r1, r1, r2
 8010b84:	6099      	str	r1, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010b86:	f000 80db 	beq.w	8010d40 <UART_SetConfig+0x250>
 8010b8a:	4a9a      	ldr	r2, [pc, #616]	; (8010df4 <UART_SetConfig+0x304>)
 8010b8c:	4293      	cmp	r3, r2
 8010b8e:	d055      	beq.n	8010c3c <UART_SetConfig+0x14c>
 8010b90:	4a99      	ldr	r2, [pc, #612]	; (8010df8 <UART_SetConfig+0x308>)
 8010b92:	4293      	cmp	r3, r2
 8010b94:	f000 8116 	beq.w	8010dc4 <UART_SetConfig+0x2d4>
 8010b98:	4a98      	ldr	r2, [pc, #608]	; (8010dfc <UART_SetConfig+0x30c>)
 8010b9a:	4293      	cmp	r3, r2
 8010b9c:	f000 8144 	beq.w	8010e28 <UART_SetConfig+0x338>
 8010ba0:	4a97      	ldr	r2, [pc, #604]	; (8010e00 <UART_SetConfig+0x310>)
 8010ba2:	4293      	cmp	r3, r2
 8010ba4:	f000 80e0 	beq.w	8010d68 <UART_SetConfig+0x278>
 8010ba8:	4a96      	ldr	r2, [pc, #600]	; (8010e04 <UART_SetConfig+0x314>)
 8010baa:	4293      	cmp	r3, r2
 8010bac:	f000 8082 	beq.w	8010cb4 <UART_SetConfig+0x1c4>
 8010bb0:	4a95      	ldr	r2, [pc, #596]	; (8010e08 <UART_SetConfig+0x318>)
 8010bb2:	4293      	cmp	r3, r2
 8010bb4:	f000 8169 	beq.w	8010e8a <UART_SetConfig+0x39a>
 8010bb8:	4a94      	ldr	r2, [pc, #592]	; (8010e0c <UART_SetConfig+0x31c>)
 8010bba:	4293      	cmp	r3, r2
 8010bbc:	f000 8153 	beq.w	8010e66 <UART_SetConfig+0x376>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010bc0:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8010bc2:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8010bc4:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8010bc8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8010bca:	f640 3176 	movw	r1, #2934	; 0xb76
 8010bce:	4890      	ldr	r0, [pc, #576]	; (8010e10 <UART_SetConfig+0x320>)
 8010bd0:	f7f3 f8b4 	bl	8003d3c <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8010bd4:	69a3      	ldr	r3, [r4, #24]
 8010bd6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8010bda:	d0b2      	beq.n	8010b42 <UART_SetConfig+0x52>
 8010bdc:	488c      	ldr	r0, [pc, #560]	; (8010e10 <UART_SetConfig+0x320>)
 8010bde:	f640 3177 	movw	r1, #2935	; 0xb77
 8010be2:	f7f3 f8ab 	bl	8003d3c <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8010be6:	69e0      	ldr	r0, [r4, #28]
 8010be8:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 8010bec:	d0ad      	beq.n	8010b4a <UART_SetConfig+0x5a>
 8010bee:	4888      	ldr	r0, [pc, #544]	; (8010e10 <UART_SetConfig+0x320>)
 8010bf0:	f640 3178 	movw	r1, #2936	; 0xb78
 8010bf4:	f7f3 f8a2 	bl	8003d3c <assert_failed>
 8010bf8:	69e0      	ldr	r0, [r4, #28]
 8010bfa:	e7a6      	b.n	8010b4a <UART_SetConfig+0x5a>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8010bfc:	f640 3175 	movw	r1, #2933	; 0xb75
 8010c00:	4883      	ldr	r0, [pc, #524]	; (8010e10 <UART_SetConfig+0x320>)
 8010c02:	f7f3 f89b 	bl	8003d3c <assert_failed>
 8010c06:	e792      	b.n	8010b2e <UART_SetConfig+0x3e>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8010c08:	f640 3171 	movw	r1, #2929	; 0xb71
 8010c0c:	4880      	ldr	r0, [pc, #512]	; (8010e10 <UART_SetConfig+0x320>)
 8010c0e:	f7f3 f895 	bl	8003d3c <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8010c12:	68e3      	ldr	r3, [r4, #12]
 8010c14:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 8010c18:	f43f af7d 	beq.w	8010b16 <UART_SetConfig+0x26>
 8010c1c:	f640 3172 	movw	r1, #2930	; 0xb72
 8010c20:	487b      	ldr	r0, [pc, #492]	; (8010e10 <UART_SetConfig+0x320>)
 8010c22:	f7f3 f88b 	bl	8003d3c <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8010c26:	6a23      	ldr	r3, [r4, #32]
 8010c28:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8010c2c:	f43f af78 	beq.w	8010b20 <UART_SetConfig+0x30>
 8010c30:	f640 3173 	movw	r1, #2931	; 0xb73
 8010c34:	4876      	ldr	r0, [pc, #472]	; (8010e10 <UART_SetConfig+0x320>)
 8010c36:	f7f3 f881 	bl	8003d3c <assert_failed>
 8010c3a:	e771      	b.n	8010b20 <UART_SetConfig+0x30>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c3c:	4b75      	ldr	r3, [pc, #468]	; (8010e14 <UART_SetConfig+0x324>)
 8010c3e:	4a76      	ldr	r2, [pc, #472]	; (8010e18 <UART_SetConfig+0x328>)
 8010c40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010c44:	f003 030c 	and.w	r3, r3, #12
 8010c48:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c4a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010c4e:	d03f      	beq.n	8010cd0 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8010c50:	2b08      	cmp	r3, #8
 8010c52:	d8b5      	bhi.n	8010bc0 <UART_SetConfig+0xd0>
 8010c54:	a201      	add	r2, pc, #4	; (adr r2, 8010c5c <UART_SetConfig+0x16c>)
 8010c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c5a:	bf00      	nop
 8010c5c:	08010d97 	.word	0x08010d97
 8010c60:	08010d57 	.word	0x08010d57
 8010c64:	08010ccd 	.word	0x08010ccd
 8010c68:	08010bc1 	.word	0x08010bc1
 8010c6c:	08010d8b 	.word	0x08010d8b
 8010c70:	08010bc1 	.word	0x08010bc1
 8010c74:	08010bc1 	.word	0x08010bc1
 8010c78:	08010bc1 	.word	0x08010bc1
 8010c7c:	08010c8d 	.word	0x08010c8d
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010c80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010c84:	d19c      	bne.n	8010bc0 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c86:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010c8a:	d039      	beq.n	8010d00 <UART_SetConfig+0x210>
        pclk = (uint32_t) LSE_VALUE;
 8010c8c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c90:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c92:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010c9a:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010c9e:	f1a3 0110 	sub.w	r1, r3, #16
 8010ca2:	4291      	cmp	r1, r2
 8010ca4:	d88c      	bhi.n	8010bc0 <UART_SetConfig+0xd0>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010ca6:	6822      	ldr	r2, [r4, #0]
 8010ca8:	2000      	movs	r0, #0
 8010caa:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8010cac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8010cae:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010cb4:	4b57      	ldr	r3, [pc, #348]	; (8010e14 <UART_SetConfig+0x324>)
 8010cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010cba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010cc2:	f040 80c3 	bne.w	8010e4c <UART_SetConfig+0x35c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010cc6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010cca:	d031      	beq.n	8010d30 <UART_SetConfig+0x240>
 8010ccc:	4853      	ldr	r0, [pc, #332]	; (8010e1c <UART_SetConfig+0x32c>)
 8010cce:	e7df      	b.n	8010c90 <UART_SetConfig+0x1a0>
    switch (clocksource)
 8010cd0:	2b08      	cmp	r3, #8
 8010cd2:	f63f af75 	bhi.w	8010bc0 <UART_SetConfig+0xd0>
 8010cd6:	a201      	add	r2, pc, #4	; (adr r2, 8010cdc <UART_SetConfig+0x1ec>)
 8010cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cdc:	08010daf 	.word	0x08010daf
 8010ce0:	08010da9 	.word	0x08010da9
 8010ce4:	08010d31 	.word	0x08010d31
 8010ce8:	08010bc1 	.word	0x08010bc1
 8010cec:	08010d9d 	.word	0x08010d9d
 8010cf0:	08010bc1 	.word	0x08010bc1
 8010cf4:	08010bc1 	.word	0x08010bc1
 8010cf8:	08010bc1 	.word	0x08010bc1
 8010cfc:	08010d01 	.word	0x08010d01
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d00:	f44f 3080 	mov.w	r0, #65536	; 0x10000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010d04:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d06:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010d0a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8010d0e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010d12:	f1a0 0310 	sub.w	r3, r0, #16
 8010d16:	4293      	cmp	r3, r2
 8010d18:	f63f af52 	bhi.w	8010bc0 <UART_SetConfig+0xd0>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d1c:	f020 020f 	bic.w	r2, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010d20:	f3c0 0342 	ubfx	r3, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8010d24:	6821      	ldr	r1, [r4, #0]
 8010d26:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010d28:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8010d2a:	4313      	orrs	r3, r2
 8010d2c:	60cb      	str	r3, [r1, #12]
 8010d2e:	e748      	b.n	8010bc2 <UART_SetConfig+0xd2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d30:	483b      	ldr	r0, [pc, #236]	; (8010e20 <UART_SetConfig+0x330>)
 8010d32:	e7e7      	b.n	8010d04 <UART_SetConfig+0x214>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8010d34:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8010d38:	4835      	ldr	r0, [pc, #212]	; (8010e10 <UART_SetConfig+0x320>)
 8010d3a:	f7f2 ffff 	bl	8003d3c <assert_failed>
 8010d3e:	e6de      	b.n	8010afe <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d40:	4b34      	ldr	r3, [pc, #208]	; (8010e14 <UART_SetConfig+0x324>)
 8010d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d46:	f003 0303 	and.w	r3, r3, #3
 8010d4a:	3b01      	subs	r3, #1
 8010d4c:	2b02      	cmp	r3, #2
 8010d4e:	d931      	bls.n	8010db4 <UART_SetConfig+0x2c4>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d50:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010d54:	d028      	beq.n	8010da8 <UART_SetConfig+0x2b8>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010d56:	f7fb fa09 	bl	800c16c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8010d5a:	2800      	cmp	r0, #0
 8010d5c:	d198      	bne.n	8010c90 <UART_SetConfig+0x1a0>
  huart->RxISR = NULL;
 8010d5e:	2300      	movs	r3, #0
 8010d60:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 8010d62:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8010d66:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010d68:	4b2a      	ldr	r3, [pc, #168]	; (8010e14 <UART_SetConfig+0x324>)
 8010d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010d76:	d0a6      	beq.n	8010cc6 <UART_SetConfig+0x1d6>
 8010d78:	d81f      	bhi.n	8010dba <UART_SetConfig+0x2ca>
 8010d7a:	b14b      	cbz	r3, 8010d90 <UART_SetConfig+0x2a0>
 8010d7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010d80:	f47f af1e 	bne.w	8010bc0 <UART_SetConfig+0xd0>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d84:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010d88:	d008      	beq.n	8010d9c <UART_SetConfig+0x2ac>
        pclk = HAL_RCC_GetSysClockFreq();
 8010d8a:	f7fb f885 	bl	800be98 <HAL_RCC_GetSysClockFreq>
        break;
 8010d8e:	e7e4      	b.n	8010d5a <UART_SetConfig+0x26a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d90:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8010d94:	d00b      	beq.n	8010dae <UART_SetConfig+0x2be>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010d96:	f7fb f9d9 	bl	800c14c <HAL_RCC_GetPCLK1Freq>
        break;
 8010d9a:	e7de      	b.n	8010d5a <UART_SetConfig+0x26a>
        pclk = HAL_RCC_GetSysClockFreq();
 8010d9c:	f7fb f87c 	bl	800be98 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d0dc      	beq.n	8010d5e <UART_SetConfig+0x26e>
 8010da4:	0040      	lsls	r0, r0, #1
 8010da6:	e7ad      	b.n	8010d04 <UART_SetConfig+0x214>
        pclk = HAL_RCC_GetPCLK2Freq();
 8010da8:	f7fb f9e0 	bl	800c16c <HAL_RCC_GetPCLK2Freq>
        break;
 8010dac:	e7f8      	b.n	8010da0 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8010dae:	f7fb f9cd 	bl	800c14c <HAL_RCC_GetPCLK1Freq>
        break;
 8010db2:	e7f5      	b.n	8010da0 <UART_SetConfig+0x2b0>
 8010db4:	4a1b      	ldr	r2, [pc, #108]	; (8010e24 <UART_SetConfig+0x334>)
 8010db6:	5cd3      	ldrb	r3, [r2, r3]
 8010db8:	e747      	b.n	8010c4a <UART_SetConfig+0x15a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010dba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010dbe:	f43f af62 	beq.w	8010c86 <UART_SetConfig+0x196>
 8010dc2:	e6fd      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010dc4:	4b13      	ldr	r3, [pc, #76]	; (8010e14 <UART_SetConfig+0x324>)
 8010dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010dca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8010dce:	2b20      	cmp	r3, #32
 8010dd0:	f43f af79 	beq.w	8010cc6 <UART_SetConfig+0x1d6>
 8010dd4:	d804      	bhi.n	8010de0 <UART_SetConfig+0x2f0>
 8010dd6:	2b00      	cmp	r3, #0
 8010dd8:	d0da      	beq.n	8010d90 <UART_SetConfig+0x2a0>
 8010dda:	2b10      	cmp	r3, #16
 8010ddc:	d0d2      	beq.n	8010d84 <UART_SetConfig+0x294>
 8010dde:	e6ef      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010de0:	2b30      	cmp	r3, #48	; 0x30
 8010de2:	f43f af50 	beq.w	8010c86 <UART_SetConfig+0x196>
 8010de6:	e6eb      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010de8:	019bfcc0 	.word	0x019bfcc0
 8010dec:	efff69f3 	.word	0xefff69f3
 8010df0:	40011000 	.word	0x40011000
 8010df4:	40004400 	.word	0x40004400
 8010df8:	40004800 	.word	0x40004800
 8010dfc:	40004c00 	.word	0x40004c00
 8010e00:	40005000 	.word	0x40005000
 8010e04:	40011400 	.word	0x40011400
 8010e08:	40007800 	.word	0x40007800
 8010e0c:	40007c00 	.word	0x40007c00
 8010e10:	08029ad8 	.word	0x08029ad8
 8010e14:	40023800 	.word	0x40023800
 8010e18:	08029b18 	.word	0x08029b18
 8010e1c:	00f42400 	.word	0x00f42400
 8010e20:	01e84800 	.word	0x01e84800
 8010e24:	08029b14 	.word	0x08029b14
 8010e28:	4b23      	ldr	r3, [pc, #140]	; (8010eb8 <UART_SetConfig+0x3c8>)
 8010e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e2e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010e32:	2b80      	cmp	r3, #128	; 0x80
 8010e34:	f43f af47 	beq.w	8010cc6 <UART_SetConfig+0x1d6>
 8010e38:	d804      	bhi.n	8010e44 <UART_SetConfig+0x354>
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d0a8      	beq.n	8010d90 <UART_SetConfig+0x2a0>
 8010e3e:	2b40      	cmp	r3, #64	; 0x40
 8010e40:	d0a0      	beq.n	8010d84 <UART_SetConfig+0x294>
 8010e42:	e6bd      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010e44:	2bc0      	cmp	r3, #192	; 0xc0
 8010e46:	f43f af1e 	beq.w	8010c86 <UART_SetConfig+0x196>
 8010e4a:	e6b9      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010e4c:	d806      	bhi.n	8010e5c <UART_SetConfig+0x36c>
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	f43f af7e 	beq.w	8010d50 <UART_SetConfig+0x260>
 8010e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e58:	d094      	beq.n	8010d84 <UART_SetConfig+0x294>
 8010e5a:	e6b1      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010e5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e60:	f43f af11 	beq.w	8010c86 <UART_SetConfig+0x196>
 8010e64:	e6ac      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010e66:	4b14      	ldr	r3, [pc, #80]	; (8010eb8 <UART_SetConfig+0x3c8>)
 8010e68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e6c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8010e70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010e74:	f43f af27 	beq.w	8010cc6 <UART_SetConfig+0x1d6>
 8010e78:	f63f af02 	bhi.w	8010c80 <UART_SetConfig+0x190>
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d087      	beq.n	8010d90 <UART_SetConfig+0x2a0>
 8010e80:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010e84:	f43f af7e 	beq.w	8010d84 <UART_SetConfig+0x294>
 8010e88:	e69a      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010e8a:	4b0b      	ldr	r3, [pc, #44]	; (8010eb8 <UART_SetConfig+0x3c8>)
 8010e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010e90:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8010e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010e98:	f43f af15 	beq.w	8010cc6 <UART_SetConfig+0x1d6>
 8010e9c:	d807      	bhi.n	8010eae <UART_SetConfig+0x3be>
 8010e9e:	2b00      	cmp	r3, #0
 8010ea0:	f43f af76 	beq.w	8010d90 <UART_SetConfig+0x2a0>
 8010ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010ea8:	f43f af6c 	beq.w	8010d84 <UART_SetConfig+0x294>
 8010eac:	e688      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010eae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010eb2:	f43f aee8 	beq.w	8010c86 <UART_SetConfig+0x196>
 8010eb6:	e683      	b.n	8010bc0 <UART_SetConfig+0xd0>
 8010eb8:	40023800 	.word	0x40023800

08010ebc <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010ebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8010ebe:	2bff      	cmp	r3, #255	; 0xff
{
 8010ec0:	b510      	push	{r4, lr}
 8010ec2:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010ec4:	d87b      	bhi.n	8010fbe <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010ec6:	07da      	lsls	r2, r3, #31
 8010ec8:	d50a      	bpl.n	8010ee0 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010eca:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8010ecc:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 8010ed0:	f040 808e 	bne.w	8010ff0 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010ed4:	6820      	ldr	r0, [r4, #0]
 8010ed6:	6842      	ldr	r2, [r0, #4]
 8010ed8:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8010edc:	430a      	orrs	r2, r1
 8010ede:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010ee0:	0798      	lsls	r0, r3, #30
 8010ee2:	d50a      	bpl.n	8010efa <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8010ee4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8010ee6:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 8010eea:	f040 8089 	bne.w	8011000 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010eee:	6820      	ldr	r0, [r4, #0]
 8010ef0:	6842      	ldr	r2, [r0, #4]
 8010ef2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8010ef6:	430a      	orrs	r2, r1
 8010ef8:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010efa:	0759      	lsls	r1, r3, #29
 8010efc:	d50a      	bpl.n	8010f14 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8010efe:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8010f00:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 8010f04:	f040 8084 	bne.w	8011010 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010f08:	6820      	ldr	r0, [r4, #0]
 8010f0a:	6842      	ldr	r2, [r0, #4]
 8010f0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8010f10:	430a      	orrs	r2, r1
 8010f12:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010f14:	071a      	lsls	r2, r3, #28
 8010f16:	d509      	bpl.n	8010f2c <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8010f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010f1a:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 8010f1e:	d17f      	bne.n	8011020 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010f20:	6820      	ldr	r0, [r4, #0]
 8010f22:	6842      	ldr	r2, [r0, #4]
 8010f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8010f28:	430a      	orrs	r2, r1
 8010f2a:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010f2c:	06d8      	lsls	r0, r3, #27
 8010f2e:	d509      	bpl.n	8010f44 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8010f30:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010f32:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8010f36:	d17b      	bne.n	8011030 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010f38:	6820      	ldr	r0, [r4, #0]
 8010f3a:	6882      	ldr	r2, [r0, #8]
 8010f3c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8010f40:	430a      	orrs	r2, r1
 8010f42:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010f44:	0699      	lsls	r1, r3, #26
 8010f46:	d509      	bpl.n	8010f5c <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8010f48:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010f4a:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8010f4e:	d177      	bne.n	8011040 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010f50:	6820      	ldr	r0, [r4, #0]
 8010f52:	6882      	ldr	r2, [r0, #8]
 8010f54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8010f58:	430a      	orrs	r2, r1
 8010f5a:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010f5c:	065a      	lsls	r2, r3, #25
 8010f5e:	d521      	bpl.n	8010fa4 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8010f60:	4b46      	ldr	r3, [pc, #280]	; (801107c <UART_AdvFeatureConfig+0x1c0>)
 8010f62:	6822      	ldr	r2, [r4, #0]
 8010f64:	4846      	ldr	r0, [pc, #280]	; (8011080 <UART_AdvFeatureConfig+0x1c4>)
 8010f66:	4947      	ldr	r1, [pc, #284]	; (8011084 <UART_AdvFeatureConfig+0x1c8>)
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	bf18      	it	ne
 8010f6c:	4282      	cmpne	r2, r0
 8010f6e:	bf14      	ite	ne
 8010f70:	2301      	movne	r3, #1
 8010f72:	2300      	moveq	r3, #0
 8010f74:	428a      	cmp	r2, r1
 8010f76:	bf0c      	ite	eq
 8010f78:	2300      	moveq	r3, #0
 8010f7a:	f003 0301 	andne.w	r3, r3, #1
 8010f7e:	b113      	cbz	r3, 8010f86 <UART_AdvFeatureConfig+0xca>
 8010f80:	4b41      	ldr	r3, [pc, #260]	; (8011088 <UART_AdvFeatureConfig+0x1cc>)
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d16b      	bne.n	801105e <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8010f86:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8010f88:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8010f8c:	d160      	bne.n	8011050 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f8e:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010f90:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010f94:	684b      	ldr	r3, [r1, #4]
 8010f96:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8010f9a:	ea43 0302 	orr.w	r3, r3, r2
 8010f9e:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010fa0:	d014      	beq.n	8010fcc <UART_AdvFeatureConfig+0x110>
 8010fa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010fa4:	061b      	lsls	r3, r3, #24
 8010fa6:	d509      	bpl.n	8010fbc <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010fa8:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010faa:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8010fae:	d118      	bne.n	8010fe2 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010fb0:	6821      	ldr	r1, [r4, #0]
 8010fb2:	684b      	ldr	r3, [r1, #4]
 8010fb4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8010fb8:	4313      	orrs	r3, r2
 8010fba:	604b      	str	r3, [r1, #4]
}
 8010fbc:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8010fbe:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8010fc2:	4832      	ldr	r0, [pc, #200]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8010fc4:	f7f2 feba 	bl	8003d3c <assert_failed>
 8010fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fca:	e77c      	b.n	8010ec6 <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8010fcc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8010fce:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 8010fd2:	d14a      	bne.n	801106a <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010fd4:	684a      	ldr	r2, [r1, #4]
 8010fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010fd8:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8010fdc:	4302      	orrs	r2, r0
 8010fde:	604a      	str	r2, [r1, #4]
 8010fe0:	e7e0      	b.n	8010fa4 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8010fe2:	f640 4136 	movw	r1, #3126	; 0xc36
 8010fe6:	4829      	ldr	r0, [pc, #164]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8010fe8:	f7f2 fea8 	bl	8003d3c <assert_failed>
 8010fec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8010fee:	e7df      	b.n	8010fb0 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8010ff0:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8010ff4:	4825      	ldr	r0, [pc, #148]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8010ff6:	f7f2 fea1 	bl	8003d3c <assert_failed>
 8010ffa:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 8010ffe:	e769      	b.n	8010ed4 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8011000:	f640 4105 	movw	r1, #3077	; 0xc05
 8011004:	4821      	ldr	r0, [pc, #132]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011006:	f7f2 fe99 	bl	8003d3c <assert_failed>
 801100a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801100c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801100e:	e76e      	b.n	8010eee <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8011010:	f640 410c 	movw	r1, #3084	; 0xc0c
 8011014:	481d      	ldr	r0, [pc, #116]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011016:	f7f2 fe91 	bl	8003d3c <assert_failed>
 801101a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801101c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801101e:	e773      	b.n	8010f08 <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8011020:	f640 4113 	movw	r1, #3091	; 0xc13
 8011024:	4819      	ldr	r0, [pc, #100]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011026:	f7f2 fe89 	bl	8003d3c <assert_failed>
 801102a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801102c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801102e:	e777      	b.n	8010f20 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8011030:	f640 411a 	movw	r1, #3098	; 0xc1a
 8011034:	4815      	ldr	r0, [pc, #84]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011036:	f7f2 fe81 	bl	8003d3c <assert_failed>
 801103a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801103c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801103e:	e77b      	b.n	8010f38 <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8011040:	f640 4121 	movw	r1, #3105	; 0xc21
 8011044:	4811      	ldr	r0, [pc, #68]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011046:	f7f2 fe79 	bl	8003d3c <assert_failed>
 801104a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801104c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801104e:	e77f      	b.n	8010f50 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8011050:	f640 4129 	movw	r1, #3113	; 0xc29
 8011054:	480d      	ldr	r0, [pc, #52]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011056:	f7f2 fe71 	bl	8003d3c <assert_failed>
 801105a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801105c:	e797      	b.n	8010f8e <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 801105e:	f640 4128 	movw	r1, #3112	; 0xc28
 8011062:	480a      	ldr	r0, [pc, #40]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011064:	f7f2 fe6a 	bl	8003d3c <assert_failed>
 8011068:	e78d      	b.n	8010f86 <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801106a:	f640 412e 	movw	r1, #3118	; 0xc2e
 801106e:	4807      	ldr	r0, [pc, #28]	; (801108c <UART_AdvFeatureConfig+0x1d0>)
 8011070:	f7f2 fe64 	bl	8003d3c <assert_failed>
 8011074:	6821      	ldr	r1, [r4, #0]
 8011076:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8011078:	e7ac      	b.n	8010fd4 <UART_AdvFeatureConfig+0x118>
 801107a:	bf00      	nop
 801107c:	40011000 	.word	0x40011000
 8011080:	40004400 	.word	0x40004400
 8011084:	40004800 	.word	0x40004800
 8011088:	40011400 	.word	0x40011400
 801108c:	08029ad8 	.word	0x08029ad8

08011090 <UART_WaitOnFlagUntilTimeout>:
{
 8011090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011094:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011098:	4681      	mov	r9, r0
 801109a:	460f      	mov	r7, r1
 801109c:	4616      	mov	r6, r2
 801109e:	469a      	mov	sl, r3
 80110a0:	6805      	ldr	r5, [r0, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110a2:	e002      	b.n	80110aa <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 80110a4:	f1b8 3fff 	cmp.w	r8, #4294967295
 80110a8:	d10a      	bne.n	80110c0 <UART_WaitOnFlagUntilTimeout+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80110aa:	69ec      	ldr	r4, [r5, #28]
 80110ac:	ea37 0304 	bics.w	r3, r7, r4
 80110b0:	bf0c      	ite	eq
 80110b2:	2401      	moveq	r4, #1
 80110b4:	2400      	movne	r4, #0
 80110b6:	42b4      	cmp	r4, r6
 80110b8:	d0f4      	beq.n	80110a4 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 80110ba:	2000      	movs	r0, #0
}
 80110bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80110c0:	f7f5 fe44 	bl	8006d4c <HAL_GetTick>
 80110c4:	eba0 000a 	sub.w	r0, r0, sl
 80110c8:	4540      	cmp	r0, r8
 80110ca:	d82d      	bhi.n	8011128 <UART_WaitOnFlagUntilTimeout+0x98>
 80110cc:	f1b8 0f00 	cmp.w	r8, #0
 80110d0:	d02a      	beq.n	8011128 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80110d2:	f8d9 5000 	ldr.w	r5, [r9]
 80110d6:	682b      	ldr	r3, [r5, #0]
 80110d8:	462a      	mov	r2, r5
 80110da:	0759      	lsls	r1, r3, #29
 80110dc:	d5e5      	bpl.n	80110aa <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80110de:	69eb      	ldr	r3, [r5, #28]
 80110e0:	051b      	lsls	r3, r3, #20
 80110e2:	d5e2      	bpl.n	80110aa <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80110e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80110e8:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110ea:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80110ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80110f2:	e842 3100 	strex	r1, r3, [r2]
 80110f6:	2900      	cmp	r1, #0
 80110f8:	d1f7      	bne.n	80110ea <UART_WaitOnFlagUntilTimeout+0x5a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80110fa:	f102 0308 	add.w	r3, r2, #8
 80110fe:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011102:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011106:	f102 0008 	add.w	r0, r2, #8
 801110a:	e840 3100 	strex	r1, r3, [r0]
 801110e:	2900      	cmp	r1, #0
 8011110:	d1f3      	bne.n	80110fa <UART_WaitOnFlagUntilTimeout+0x6a>
          huart->gState = HAL_UART_STATE_READY;
 8011112:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 8011114:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 8011116:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 801111a:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 801111e:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011122:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 8011126:	e7c9      	b.n	80110bc <UART_WaitOnFlagUntilTimeout+0x2c>
 8011128:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801112c:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8011130:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011134:	e842 3100 	strex	r1, r3, [r2]
 8011138:	2900      	cmp	r1, #0
 801113a:	d1f7      	bne.n	801112c <UART_WaitOnFlagUntilTimeout+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801113c:	f102 0308 	add.w	r3, r2, #8
 8011140:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011144:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011148:	f102 0008 	add.w	r0, r2, #8
 801114c:	e840 3100 	strex	r1, r3, [r0]
 8011150:	2900      	cmp	r1, #0
 8011152:	d1f3      	bne.n	801113c <UART_WaitOnFlagUntilTimeout+0xac>
        huart->gState = HAL_UART_STATE_READY;
 8011154:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8011156:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8011158:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 801115c:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8011160:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 8011164:	e7aa      	b.n	80110bc <UART_WaitOnFlagUntilTimeout+0x2c>
 8011166:	bf00      	nop

08011168 <HAL_UART_Transmit>:
{
 8011168:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801116c:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 801116e:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8011170:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 8011172:	2b20      	cmp	r3, #32
 8011174:	d14b      	bne.n	801120e <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8011176:	460d      	mov	r5, r1
 8011178:	2900      	cmp	r1, #0
 801117a:	d044      	beq.n	8011206 <HAL_UART_Transmit+0x9e>
 801117c:	fab2 f982 	clz	r9, r2
 8011180:	4617      	mov	r7, r2
 8011182:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8011186:	2a00      	cmp	r2, #0
 8011188:	d03d      	beq.n	8011206 <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 801118a:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 801118e:	4604      	mov	r4, r0
 8011190:	2b01      	cmp	r3, #1
 8011192:	d03c      	beq.n	801120e <HAL_UART_Transmit+0xa6>
 8011194:	2201      	movs	r2, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011196:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011198:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 801119c:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80111a0:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 80111a2:	f7f5 fdd3 	bl	8006d4c <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111a6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80111a8:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 80111aa:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111ae:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80111b2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80111b6:	d040      	beq.n	801123a <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 80111b8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 80111bc:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 80111be:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 80111c0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 80111c4:	b973      	cbnz	r3, 80111e4 <HAL_UART_Transmit+0x7c>
 80111c6:	e02a      	b.n	801121e <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80111c8:	6823      	ldr	r3, [r4, #0]
 80111ca:	f815 2b01 	ldrb.w	r2, [r5], #1
 80111ce:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80111d0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80111d4:	3a01      	subs	r2, #1
 80111d6:	b292      	uxth	r2, r2
 80111d8:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80111dc:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80111e0:	b292      	uxth	r2, r2
 80111e2:	b1e2      	cbz	r2, 801121e <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80111e4:	4643      	mov	r3, r8
 80111e6:	2200      	movs	r2, #0
 80111e8:	2180      	movs	r1, #128	; 0x80
 80111ea:	4620      	mov	r0, r4
 80111ec:	9600      	str	r6, [sp, #0]
 80111ee:	f7ff ff4f 	bl	8011090 <UART_WaitOnFlagUntilTimeout>
 80111f2:	b980      	cbnz	r0, 8011216 <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80111f4:	2d00      	cmp	r5, #0
 80111f6:	d1e7      	bne.n	80111c8 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80111f8:	f839 3b02 	ldrh.w	r3, [r9], #2
 80111fc:	6822      	ldr	r2, [r4, #0]
 80111fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011202:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 8011204:	e7e4      	b.n	80111d0 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 8011206:	2001      	movs	r0, #1
}
 8011208:	b003      	add	sp, #12
 801120a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 801120e:	2002      	movs	r0, #2
}
 8011210:	b003      	add	sp, #12
 8011212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 8011216:	2003      	movs	r0, #3
}
 8011218:	b003      	add	sp, #12
 801121a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801121e:	4643      	mov	r3, r8
 8011220:	2200      	movs	r2, #0
 8011222:	2140      	movs	r1, #64	; 0x40
 8011224:	4620      	mov	r0, r4
 8011226:	9600      	str	r6, [sp, #0]
 8011228:	f7ff ff32 	bl	8011090 <UART_WaitOnFlagUntilTimeout>
 801122c:	2800      	cmp	r0, #0
 801122e:	d1f2      	bne.n	8011216 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8011230:	2320      	movs	r3, #32
 8011232:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8011234:	b003      	add	sp, #12
 8011236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801123a:	6923      	ldr	r3, [r4, #16]
 801123c:	2b00      	cmp	r3, #0
 801123e:	d1bb      	bne.n	80111b8 <HAL_UART_Transmit+0x50>
 8011240:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8011242:	461d      	mov	r5, r3
 8011244:	e7b8      	b.n	80111b8 <HAL_UART_Transmit+0x50>
 8011246:	bf00      	nop

08011248 <UART_CheckIdleState>:
{
 8011248:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801124a:	2600      	movs	r6, #0
{
 801124c:	4604      	mov	r4, r0
 801124e:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011250:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8011254:	f7f5 fd7a 	bl	8006d4c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8011258:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 801125a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801125c:	681a      	ldr	r2, [r3, #0]
 801125e:	0712      	lsls	r2, r2, #28
 8011260:	d40c      	bmi.n	801127c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	075b      	lsls	r3, r3, #29
 8011266:	d418      	bmi.n	801129a <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011268:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 801126a:	2220      	movs	r2, #32
  return HAL_OK;
 801126c:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 801126e:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8011270:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8011274:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011276:	6623      	str	r3, [r4, #96]	; 0x60
}
 8011278:	b002      	add	sp, #8
 801127a:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801127c:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8011280:	4632      	mov	r2, r6
 8011282:	462b      	mov	r3, r5
 8011284:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011288:	9000      	str	r0, [sp, #0]
 801128a:	4620      	mov	r0, r4
 801128c:	f7ff ff00 	bl	8011090 <UART_WaitOnFlagUntilTimeout>
 8011290:	b978      	cbnz	r0, 80112b2 <UART_CheckIdleState+0x6a>
 8011292:	6823      	ldr	r3, [r4, #0]
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8011294:	681b      	ldr	r3, [r3, #0]
 8011296:	075b      	lsls	r3, r3, #29
 8011298:	d5e6      	bpl.n	8011268 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801129a:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 801129e:	462b      	mov	r3, r5
 80112a0:	2200      	movs	r2, #0
 80112a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80112a6:	9000      	str	r0, [sp, #0]
 80112a8:	4620      	mov	r0, r4
 80112aa:	f7ff fef1 	bl	8011090 <UART_WaitOnFlagUntilTimeout>
 80112ae:	2800      	cmp	r0, #0
 80112b0:	d0da      	beq.n	8011268 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 80112b2:	2003      	movs	r0, #3
}
 80112b4:	b002      	add	sp, #8
 80112b6:	bd70      	pop	{r4, r5, r6, pc}

080112b8 <HAL_UART_Init>:
  if (huart == NULL)
 80112b8:	2800      	cmp	r0, #0
 80112ba:	f000 8097 	beq.w	80113ec <HAL_UART_Init+0x134>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80112be:	6802      	ldr	r2, [r0, #0]
{
 80112c0:	b538      	push	{r3, r4, r5, lr}
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80112c2:	6983      	ldr	r3, [r0, #24]
 80112c4:	4604      	mov	r4, r0
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d050      	beq.n	801136c <HAL_UART_Init+0xb4>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80112ca:	4b4c      	ldr	r3, [pc, #304]	; (80113fc <HAL_UART_Init+0x144>)
 80112cc:	494c      	ldr	r1, [pc, #304]	; (8011400 <HAL_UART_Init+0x148>)
 80112ce:	484d      	ldr	r0, [pc, #308]	; (8011404 <HAL_UART_Init+0x14c>)
 80112d0:	429a      	cmp	r2, r3
 80112d2:	bf18      	it	ne
 80112d4:	428a      	cmpne	r2, r1
 80112d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80112da:	4d4b      	ldr	r5, [pc, #300]	; (8011408 <HAL_UART_Init+0x150>)
 80112dc:	bf14      	ite	ne
 80112de:	2301      	movne	r3, #1
 80112e0:	2300      	moveq	r3, #0
 80112e2:	4282      	cmp	r2, r0
 80112e4:	bf0c      	ite	eq
 80112e6:	2300      	moveq	r3, #0
 80112e8:	f003 0301 	andne.w	r3, r3, #1
 80112ec:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 80112f0:	428a      	cmp	r2, r1
 80112f2:	bf0c      	ite	eq
 80112f4:	2300      	moveq	r3, #0
 80112f6:	f003 0301 	andne.w	r3, r3, #1
 80112fa:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 80112fe:	42aa      	cmp	r2, r5
 8011300:	bf0c      	ite	eq
 8011302:	2300      	moveq	r3, #0
 8011304:	f003 0301 	andne.w	r3, r3, #1
 8011308:	4282      	cmp	r2, r0
 801130a:	bf0c      	ite	eq
 801130c:	2300      	moveq	r3, #0
 801130e:	f003 0301 	andne.w	r3, r3, #1
 8011312:	428a      	cmp	r2, r1
 8011314:	bf0c      	ite	eq
 8011316:	2300      	moveq	r3, #0
 8011318:	f003 0301 	andne.w	r3, r3, #1
 801131c:	b113      	cbz	r3, 8011324 <HAL_UART_Init+0x6c>
 801131e:	4b3b      	ldr	r3, [pc, #236]	; (801140c <HAL_UART_Init+0x154>)
 8011320:	429a      	cmp	r2, r3
 8011322:	d165      	bne.n	80113f0 <HAL_UART_Init+0x138>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011324:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011326:	2b00      	cmp	r3, #0
 8011328:	d056      	beq.n	80113d8 <HAL_UART_Init+0x120>
  __HAL_UART_DISABLE(huart);
 801132a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801132c:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 801132e:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011330:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011332:	6813      	ldr	r3, [r2, #0]
 8011334:	f023 0301 	bic.w	r3, r3, #1
 8011338:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801133a:	f7ff fbd9 	bl	8010af0 <UART_SetConfig>
 801133e:	2801      	cmp	r0, #1
 8011340:	d048      	beq.n	80113d4 <HAL_UART_Init+0x11c>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011344:	2b00      	cmp	r3, #0
 8011346:	d14d      	bne.n	80113e4 <HAL_UART_Init+0x12c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011348:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 801134a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801134c:	685a      	ldr	r2, [r3, #4]
 801134e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011354:	689a      	ldr	r2, [r3, #8]
 8011356:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801135a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	f042 0201 	orr.w	r2, r2, #1
 8011362:	601a      	str	r2, [r3, #0]
}
 8011364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8011368:	f7ff bf6e 	b.w	8011248 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 801136c:	4b23      	ldr	r3, [pc, #140]	; (80113fc <HAL_UART_Init+0x144>)
 801136e:	4924      	ldr	r1, [pc, #144]	; (8011400 <HAL_UART_Init+0x148>)
 8011370:	4824      	ldr	r0, [pc, #144]	; (8011404 <HAL_UART_Init+0x14c>)
 8011372:	429a      	cmp	r2, r3
 8011374:	bf18      	it	ne
 8011376:	428a      	cmpne	r2, r1
 8011378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801137c:	4d22      	ldr	r5, [pc, #136]	; (8011408 <HAL_UART_Init+0x150>)
 801137e:	bf14      	ite	ne
 8011380:	2301      	movne	r3, #1
 8011382:	2300      	moveq	r3, #0
 8011384:	4282      	cmp	r2, r0
 8011386:	bf0c      	ite	eq
 8011388:	2300      	moveq	r3, #0
 801138a:	f003 0301 	andne.w	r3, r3, #1
 801138e:	f500 404c 	add.w	r0, r0, #52224	; 0xcc00
 8011392:	428a      	cmp	r2, r1
 8011394:	bf0c      	ite	eq
 8011396:	2300      	moveq	r3, #0
 8011398:	f003 0301 	andne.w	r3, r3, #1
 801139c:	f501 5130 	add.w	r1, r1, #11264	; 0x2c00
 80113a0:	42aa      	cmp	r2, r5
 80113a2:	bf0c      	ite	eq
 80113a4:	2300      	moveq	r3, #0
 80113a6:	f003 0301 	andne.w	r3, r3, #1
 80113aa:	4282      	cmp	r2, r0
 80113ac:	bf0c      	ite	eq
 80113ae:	2300      	moveq	r3, #0
 80113b0:	f003 0301 	andne.w	r3, r3, #1
 80113b4:	428a      	cmp	r2, r1
 80113b6:	bf0c      	ite	eq
 80113b8:	2300      	moveq	r3, #0
 80113ba:	f003 0301 	andne.w	r3, r3, #1
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d0b0      	beq.n	8011324 <HAL_UART_Init+0x6c>
 80113c2:	4b12      	ldr	r3, [pc, #72]	; (801140c <HAL_UART_Init+0x154>)
 80113c4:	429a      	cmp	r2, r3
 80113c6:	d0ad      	beq.n	8011324 <HAL_UART_Init+0x6c>
 80113c8:	f240 1131 	movw	r1, #305	; 0x131
 80113cc:	4810      	ldr	r0, [pc, #64]	; (8011410 <HAL_UART_Init+0x158>)
 80113ce:	f7f2 fcb5 	bl	8003d3c <assert_failed>
 80113d2:	e7a7      	b.n	8011324 <HAL_UART_Init+0x6c>
}
 80113d4:	2001      	movs	r0, #1
 80113d6:	bd38      	pop	{r3, r4, r5, pc}
    HAL_UART_MspInit(huart);
 80113d8:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 80113da:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80113de:	f7f4 fa11 	bl	8005804 <HAL_UART_MspInit>
 80113e2:	e7a2      	b.n	801132a <HAL_UART_Init+0x72>
    UART_AdvFeatureConfig(huart);
 80113e4:	4620      	mov	r0, r4
 80113e6:	f7ff fd69 	bl	8010ebc <UART_AdvFeatureConfig>
 80113ea:	e7ad      	b.n	8011348 <HAL_UART_Init+0x90>
}
 80113ec:	2001      	movs	r0, #1
 80113ee:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80113f0:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80113f4:	4806      	ldr	r0, [pc, #24]	; (8011410 <HAL_UART_Init+0x158>)
 80113f6:	f7f2 fca1 	bl	8003d3c <assert_failed>
 80113fa:	e793      	b.n	8011324 <HAL_UART_Init+0x6c>
 80113fc:	40011000 	.word	0x40011000
 8011400:	40004400 	.word	0x40004400
 8011404:	40004800 	.word	0x40004800
 8011408:	40005000 	.word	0x40005000
 801140c:	40007c00 	.word	0x40007c00
 8011410:	08029ad8 	.word	0x08029ad8

08011414 <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8011414:	2800      	cmp	r0, #0
 8011416:	d04a      	beq.n	80114ae <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8011418:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 801141c:	b570      	push	{r4, r5, r6, lr}
 801141e:	460e      	mov	r6, r1
 8011420:	4604      	mov	r4, r0
 8011422:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8011424:	d13d      	bne.n	80114a2 <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8011426:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8011428:	2b00      	cmp	r3, #0
 801142a:	d034      	beq.n	8011496 <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 801142c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 801142e:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011430:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8011432:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8011434:	6813      	ldr	r3, [r2, #0]
 8011436:	f023 0301 	bic.w	r3, r3, #1
 801143a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 801143c:	f7ff fb58 	bl	8010af0 <UART_SetConfig>
 8011440:	2801      	cmp	r0, #1
 8011442:	d026      	beq.n	8011492 <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011444:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011446:	bb03      	cbnz	r3, 801148a <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011448:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801144a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801144e:	685a      	ldr	r2, [r3, #4]
 8011450:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8011454:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011456:	689a      	ldr	r2, [r3, #8]
 8011458:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801145c:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 801145e:	d00d      	beq.n	801147c <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8011460:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011462:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8011464:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8011468:	4315      	orrs	r5, r2
 801146a:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801146c:	681a      	ldr	r2, [r3, #0]
 801146e:	f042 0201 	orr.w	r2, r2, #1
}
 8011472:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 8011476:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011478:	f7ff bee6 	b.w	8011248 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 801147c:	6859      	ldr	r1, [r3, #4]
 801147e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8011482:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8011486:	605e      	str	r6, [r3, #4]
 8011488:	e7ea      	b.n	8011460 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 801148a:	4620      	mov	r0, r4
 801148c:	f7ff fd16 	bl	8010ebc <UART_AdvFeatureConfig>
 8011490:	e7da      	b.n	8011448 <HAL_MultiProcessor_Init+0x34>
}
 8011492:	2001      	movs	r0, #1
 8011494:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8011496:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8011498:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 801149c:	f7f4 f9b2 	bl	8005804 <HAL_UART_MspInit>
 80114a0:	e7c4      	b.n	801142c <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 80114a2:	f240 211d 	movw	r1, #541	; 0x21d
 80114a6:	4803      	ldr	r0, [pc, #12]	; (80114b4 <HAL_MultiProcessor_Init+0xa0>)
 80114a8:	f7f2 fc48 	bl	8003d3c <assert_failed>
 80114ac:	e7bb      	b.n	8011426 <HAL_MultiProcessor_Init+0x12>
}
 80114ae:	2001      	movs	r0, #1
 80114b0:	4770      	bx	lr
 80114b2:	bf00      	nop
 80114b4:	08029ad8 	.word	0x08029ad8

080114b8 <UART_Start_Receive_DMA>:
{
 80114b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80114ba:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114bc:	2500      	movs	r5, #0
  if (huart->hdmarx != NULL)
 80114be:	6f00      	ldr	r0, [r0, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114c0:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80114c2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  huart->pRxBuffPtr = pData;
 80114c6:	6561      	str	r1, [r4, #84]	; 0x54
  huart->RxXferSize = Size;
 80114c8:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80114cc:	67e3      	str	r3, [r4, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 80114ce:	b168      	cbz	r0, 80114ec <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80114d0:	4e1f      	ldr	r6, [pc, #124]	; (8011550 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80114d2:	4613      	mov	r3, r2
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80114d4:	4f1f      	ldr	r7, [pc, #124]	; (8011554 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80114d6:	460a      	mov	r2, r1
 80114d8:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferAbortCallback = NULL;
 80114da:	6505      	str	r5, [r0, #80]	; 0x50
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80114dc:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80114de:	e9c0 760f 	strd	r7, r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80114e2:	4e1d      	ldr	r6, [pc, #116]	; (8011558 <UART_Start_Receive_DMA+0xa0>)
 80114e4:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80114e6:	f7f6 fe07 	bl	80080f8 <HAL_DMA_Start_IT>
 80114ea:	bb40      	cbnz	r0, 801153e <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 80114ec:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 80114ee:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 80114f0:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 80114f4:	b14b      	cbz	r3, 801150a <UART_Start_Receive_DMA+0x52>
 80114f6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80114f8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011500:	e843 2100 	strex	r1, r2, [r3]
 8011504:	2900      	cmp	r1, #0
 8011506:	d1f7      	bne.n	80114f8 <UART_Start_Receive_DMA+0x40>
 8011508:	e000      	b.n	801150c <UART_Start_Receive_DMA+0x54>
 801150a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801150c:	f103 0208 	add.w	r2, r3, #8
 8011510:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011514:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011518:	f103 0008 	add.w	r0, r3, #8
 801151c:	e840 2100 	strex	r1, r2, [r0]
 8011520:	2900      	cmp	r1, #0
 8011522:	d1f3      	bne.n	801150c <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011524:	f103 0208 	add.w	r2, r3, #8
 8011528:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801152c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011530:	f103 0108 	add.w	r1, r3, #8
 8011534:	e841 2000 	strex	r0, r2, [r1]
 8011538:	2800      	cmp	r0, #0
 801153a:	d1f3      	bne.n	8011524 <UART_Start_Receive_DMA+0x6c>
}
 801153c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 801153e:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8011540:	2320      	movs	r3, #32
      return HAL_ERROR;
 8011542:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8011544:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011548:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 801154c:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 801154e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011550:	08010789 	.word	0x08010789
 8011554:	080107a5 	.word	0x080107a5
 8011558:	08010561 	.word	0x08010561

0801155c <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 801155c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 801155e:	2b20      	cmp	r3, #32
 8011560:	d11e      	bne.n	80115a0 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8011562:	b1d9      	cbz	r1, 801159c <HAL_UART_Receive_DMA+0x40>
 8011564:	fab2 f382 	clz	r3, r2
 8011568:	095b      	lsrs	r3, r3, #5
 801156a:	b1ba      	cbz	r2, 801159c <HAL_UART_Receive_DMA+0x40>
{
 801156c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 801156e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8011572:	2c01      	cmp	r4, #1
 8011574:	d016      	beq.n	80115a4 <HAL_UART_Receive_DMA+0x48>
 8011576:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011578:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801157a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 801157c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011580:	6863      	ldr	r3, [r4, #4]
 8011582:	021b      	lsls	r3, r3, #8
 8011584:	d507      	bpl.n	8011596 <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011586:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801158a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801158e:	e844 3500 	strex	r5, r3, [r4]
 8011592:	2d00      	cmp	r5, #0
 8011594:	d1f7      	bne.n	8011586 <HAL_UART_Receive_DMA+0x2a>
}
 8011596:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8011598:	f7ff bf8e 	b.w	80114b8 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 801159c:	2001      	movs	r0, #1
}
 801159e:	4770      	bx	lr
    return HAL_BUSY;
 80115a0:	2002      	movs	r0, #2
 80115a2:	4770      	bx	lr
 80115a4:	2002      	movs	r0, #2
}
 80115a6:	bc30      	pop	{r4, r5}
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop

080115ac <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 80115ac:	2800      	cmp	r0, #0
 80115ae:	f000 8089 	beq.w	80116c4 <HAL_RS485Ex_Init+0x118>
{
 80115b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80115b6:	4c47      	ldr	r4, [pc, #284]	; (80116d4 <HAL_RS485Ex_Init+0x128>)
 80115b8:	460e      	mov	r6, r1
 80115ba:	461d      	mov	r5, r3
 80115bc:	4946      	ldr	r1, [pc, #280]	; (80116d8 <HAL_RS485Ex_Init+0x12c>)
 80115be:	6803      	ldr	r3, [r0, #0]
 80115c0:	4617      	mov	r7, r2
 80115c2:	4a46      	ldr	r2, [pc, #280]	; (80116dc <HAL_RS485Ex_Init+0x130>)
 80115c4:	4680      	mov	r8, r0
 80115c6:	42a3      	cmp	r3, r4
 80115c8:	bf18      	it	ne
 80115ca:	428b      	cmpne	r3, r1
 80115cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80115d0:	bf14      	ite	ne
 80115d2:	2401      	movne	r4, #1
 80115d4:	2400      	moveq	r4, #0
 80115d6:	4293      	cmp	r3, r2
 80115d8:	bf0c      	ite	eq
 80115da:	2400      	moveq	r4, #0
 80115dc:	f004 0401 	andne.w	r4, r4, #1
 80115e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80115e4:	428b      	cmp	r3, r1
 80115e6:	bf0c      	ite	eq
 80115e8:	2400      	moveq	r4, #0
 80115ea:	f004 0401 	andne.w	r4, r4, #1
 80115ee:	f501 4148 	add.w	r1, r1, #51200	; 0xc800
 80115f2:	4293      	cmp	r3, r2
 80115f4:	bf0c      	ite	eq
 80115f6:	2400      	moveq	r4, #0
 80115f8:	f004 0401 	andne.w	r4, r4, #1
 80115fc:	f502 5220 	add.w	r2, r2, #10240	; 0x2800
 8011600:	428b      	cmp	r3, r1
 8011602:	bf0c      	ite	eq
 8011604:	2400      	moveq	r4, #0
 8011606:	f004 0401 	andne.w	r4, r4, #1
 801160a:	4293      	cmp	r3, r2
 801160c:	bf0c      	ite	eq
 801160e:	2400      	moveq	r4, #0
 8011610:	f004 0401 	andne.w	r4, r4, #1
 8011614:	b11c      	cbz	r4, 801161e <HAL_RS485Ex_Init+0x72>
 8011616:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801161a:	4293      	cmp	r3, r2
 801161c:	d154      	bne.n	80116c8 <HAL_RS485Ex_Init+0x11c>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 801161e:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8011622:	d14a      	bne.n	80116ba <HAL_RS485Ex_Init+0x10e>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8011624:	2f1f      	cmp	r7, #31
 8011626:	d843      	bhi.n	80116b0 <HAL_RS485Ex_Init+0x104>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8011628:	2d1f      	cmp	r5, #31
 801162a:	d83c      	bhi.n	80116a6 <HAL_RS485Ex_Init+0xfa>

  if (huart->gState == HAL_UART_STATE_RESET)
 801162c:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8011630:	b39b      	cbz	r3, 801169a <HAL_RS485Ex_Init+0xee>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8011632:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8011636:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011638:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 801163a:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 801163e:	6813      	ldr	r3, [r2, #0]
 8011640:	f023 0301 	bic.w	r3, r3, #1
 8011644:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011646:	f7ff fa53 	bl	8010af0 <UART_SetConfig>
 801164a:	2801      	cmp	r0, #1
 801164c:	d022      	beq.n	8011694 <HAL_RS485Ex_Init+0xe8>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801164e:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8011652:	b9db      	cbnz	r3, 801168c <HAL_RS485Ex_Init+0xe0>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011654:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8011658:	042d      	lsls	r5, r5, #16
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 801165a:	4a21      	ldr	r2, [pc, #132]	; (80116e0 <HAL_RS485Ex_Init+0x134>)

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801165c:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 801165e:	6899      	ldr	r1, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8011660:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8011664:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8011668:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 801166a:	6899      	ldr	r1, [r3, #8]
 801166c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8011670:	430e      	orrs	r6, r1
 8011672:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8011674:	6819      	ldr	r1, [r3, #0]
 8011676:	400a      	ands	r2, r1
 8011678:	4317      	orrs	r7, r2
 801167a:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 801167c:	681a      	ldr	r2, [r3, #0]
 801167e:	f042 0201 	orr.w	r2, r2, #1
}
 8011682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8011686:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8011688:	f7ff bdde 	b.w	8011248 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 801168c:	4640      	mov	r0, r8
 801168e:	f7ff fc15 	bl	8010ebc <UART_AdvFeatureConfig>
 8011692:	e7df      	b.n	8011654 <HAL_RS485Ex_Init+0xa8>
}
 8011694:	2001      	movs	r0, #1
 8011696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 801169a:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 801169c:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 80116a0:	f7f4 f8b0 	bl	8005804 <HAL_UART_MspInit>
 80116a4:	e7c5      	b.n	8011632 <HAL_RS485Ex_Init+0x86>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 80116a6:	21aa      	movs	r1, #170	; 0xaa
 80116a8:	480e      	ldr	r0, [pc, #56]	; (80116e4 <HAL_RS485Ex_Init+0x138>)
 80116aa:	f7f2 fb47 	bl	8003d3c <assert_failed>
 80116ae:	e7bd      	b.n	801162c <HAL_RS485Ex_Init+0x80>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 80116b0:	21a7      	movs	r1, #167	; 0xa7
 80116b2:	480c      	ldr	r0, [pc, #48]	; (80116e4 <HAL_RS485Ex_Init+0x138>)
 80116b4:	f7f2 fb42 	bl	8003d3c <assert_failed>
 80116b8:	e7b6      	b.n	8011628 <HAL_RS485Ex_Init+0x7c>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 80116ba:	21a4      	movs	r1, #164	; 0xa4
 80116bc:	4809      	ldr	r0, [pc, #36]	; (80116e4 <HAL_RS485Ex_Init+0x138>)
 80116be:	f7f2 fb3d 	bl	8003d3c <assert_failed>
 80116c2:	e7af      	b.n	8011624 <HAL_RS485Ex_Init+0x78>
}
 80116c4:	2001      	movs	r0, #1
 80116c6:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 80116c8:	21a1      	movs	r1, #161	; 0xa1
 80116ca:	4806      	ldr	r0, [pc, #24]	; (80116e4 <HAL_RS485Ex_Init+0x138>)
 80116cc:	f7f2 fb36 	bl	8003d3c <assert_failed>
 80116d0:	e7a5      	b.n	801161e <HAL_RS485Ex_Init+0x72>
 80116d2:	bf00      	nop
 80116d4:	40011000 	.word	0x40011000
 80116d8:	40004400 	.word	0x40004400
 80116dc:	40004800 	.word	0x40004800
 80116e0:	fc00ffff 	.word	0xfc00ffff
 80116e4:	08029b28 	.word	0x08029b28

080116e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80116e8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 80116ea:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80116ec:	4a11      	ldr	r2, [pc, #68]	; (8011734 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 80116ee:	9301      	str	r3, [sp, #4]
 80116f0:	e002      	b.n	80116f8 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80116f2:	6903      	ldr	r3, [r0, #16]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	db07      	blt.n	8011708 <USB_CoreReset+0x20>
    if (++count > 200000U)
 80116f8:	9b01      	ldr	r3, [sp, #4]
 80116fa:	3301      	adds	r3, #1
 80116fc:	4293      	cmp	r3, r2
 80116fe:	9301      	str	r3, [sp, #4]
 8011700:	d9f7      	bls.n	80116f2 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8011702:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8011704:	b002      	add	sp, #8
 8011706:	4770      	bx	lr
  count = 0U;
 8011708:	2300      	movs	r3, #0
    if (++count > 200000U)
 801170a:	4a0a      	ldr	r2, [pc, #40]	; (8011734 <USB_CoreReset+0x4c>)
  count = 0U;
 801170c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801170e:	6903      	ldr	r3, [r0, #16]
 8011710:	f043 0301 	orr.w	r3, r3, #1
 8011714:	6103      	str	r3, [r0, #16]
 8011716:	e003      	b.n	8011720 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011718:	6903      	ldr	r3, [r0, #16]
 801171a:	f013 0301 	ands.w	r3, r3, #1
 801171e:	d005      	beq.n	801172c <USB_CoreReset+0x44>
    if (++count > 200000U)
 8011720:	9b01      	ldr	r3, [sp, #4]
 8011722:	3301      	adds	r3, #1
 8011724:	4293      	cmp	r3, r2
 8011726:	9301      	str	r3, [sp, #4]
 8011728:	d9f6      	bls.n	8011718 <USB_CoreReset+0x30>
 801172a:	e7ea      	b.n	8011702 <USB_CoreReset+0x1a>
  return HAL_OK;
 801172c:	4618      	mov	r0, r3
}
 801172e:	b002      	add	sp, #8
 8011730:	4770      	bx	lr
 8011732:	bf00      	nop
 8011734:	00030d40 	.word	0x00030d40

08011738 <USB_CoreInit>:
{
 8011738:	b084      	sub	sp, #16
 801173a:	b570      	push	{r4, r5, r6, lr}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801173c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
{
 801173e:	ad05      	add	r5, sp, #20
 8011740:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011742:	2e01      	cmp	r6, #1
{
 8011744:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011748:	d121      	bne.n	801178e <USB_CoreInit+0x56>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801174a:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801174c:	4b18      	ldr	r3, [pc, #96]	; (80117b0 <USB_CoreInit+0x78>)
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801174e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8011752:	9911      	ldr	r1, [sp, #68]	; 0x44
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011754:	6382      	str	r2, [r0, #56]	; 0x38
    if (cfg.use_external_vbus == 1U)
 8011756:	2901      	cmp	r1, #1
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011758:	68c2      	ldr	r2, [r0, #12]
 801175a:	ea03 0302 	and.w	r3, r3, r2
 801175e:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011760:	68c3      	ldr	r3, [r0, #12]
 8011762:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8011766:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8011768:	d01c      	beq.n	80117a4 <USB_CoreInit+0x6c>
    ret = USB_CoreReset(USBx);
 801176a:	4620      	mov	r0, r4
 801176c:	f7ff ffbc 	bl	80116e8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8011770:	9b08      	ldr	r3, [sp, #32]
 8011772:	2b01      	cmp	r3, #1
 8011774:	d107      	bne.n	8011786 <USB_CoreInit+0x4e>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011776:	68a3      	ldr	r3, [r4, #8]
 8011778:	f043 0306 	orr.w	r3, r3, #6
 801177c:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801177e:	68a3      	ldr	r3, [r4, #8]
 8011780:	f043 0320 	orr.w	r3, r3, #32
 8011784:	60a3      	str	r3, [r4, #8]
}
 8011786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801178a:	b004      	add	sp, #16
 801178c:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801178e:	68c3      	ldr	r3, [r0, #12]
 8011790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011794:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8011796:	f7ff ffa7 	bl	80116e8 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801179a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801179c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80117a0:	63a3      	str	r3, [r4, #56]	; 0x38
 80117a2:	e7e5      	b.n	8011770 <USB_CoreInit+0x38>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80117a4:	68c3      	ldr	r3, [r0, #12]
 80117a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80117aa:	60c3      	str	r3, [r0, #12]
 80117ac:	e7dd      	b.n	801176a <USB_CoreInit+0x32>
 80117ae:	bf00      	nop
 80117b0:	ffbdffbf 	.word	0xffbdffbf

080117b4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80117b4:	2a02      	cmp	r2, #2
{
 80117b6:	4603      	mov	r3, r0
 80117b8:	b410      	push	{r4}
  if (speed == USBD_FS_SPEED)
 80117ba:	d00c      	beq.n	80117d6 <USB_SetTurnaroundTime+0x22>
 80117bc:	f44f 5410 	mov.w	r4, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80117c0:	68d9      	ldr	r1, [r3, #12]
}
 80117c2:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80117c4:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80117c8:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80117ca:	68da      	ldr	r2, [r3, #12]
 80117cc:	4322      	orrs	r2, r4
}
 80117ce:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80117d2:	60da      	str	r2, [r3, #12]
}
 80117d4:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80117d6:	4a23      	ldr	r2, [pc, #140]	; (8011864 <USB_SetTurnaroundTime+0xb0>)
 80117d8:	4823      	ldr	r0, [pc, #140]	; (8011868 <USB_SetTurnaroundTime+0xb4>)
 80117da:	440a      	add	r2, r1
 80117dc:	4282      	cmp	r2, r0
 80117de:	d92c      	bls.n	801183a <USB_SetTurnaroundTime+0x86>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80117e0:	4a22      	ldr	r2, [pc, #136]	; (801186c <USB_SetTurnaroundTime+0xb8>)
 80117e2:	4823      	ldr	r0, [pc, #140]	; (8011870 <USB_SetTurnaroundTime+0xbc>)
 80117e4:	440a      	add	r2, r1
 80117e6:	4282      	cmp	r2, r0
 80117e8:	d92a      	bls.n	8011840 <USB_SetTurnaroundTime+0x8c>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80117ea:	4a22      	ldr	r2, [pc, #136]	; (8011874 <USB_SetTurnaroundTime+0xc0>)
 80117ec:	4822      	ldr	r0, [pc, #136]	; (8011878 <USB_SetTurnaroundTime+0xc4>)
 80117ee:	440a      	add	r2, r1
 80117f0:	4282      	cmp	r2, r0
 80117f2:	d928      	bls.n	8011846 <USB_SetTurnaroundTime+0x92>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80117f4:	4a21      	ldr	r2, [pc, #132]	; (801187c <USB_SetTurnaroundTime+0xc8>)
 80117f6:	4822      	ldr	r0, [pc, #136]	; (8011880 <USB_SetTurnaroundTime+0xcc>)
 80117f8:	440a      	add	r2, r1
 80117fa:	4282      	cmp	r2, r0
 80117fc:	d326      	bcc.n	801184c <USB_SetTurnaroundTime+0x98>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80117fe:	4a21      	ldr	r2, [pc, #132]	; (8011884 <USB_SetTurnaroundTime+0xd0>)
 8011800:	4821      	ldr	r0, [pc, #132]	; (8011888 <USB_SetTurnaroundTime+0xd4>)
 8011802:	440a      	add	r2, r1
 8011804:	4282      	cmp	r2, r0
 8011806:	d924      	bls.n	8011852 <USB_SetTurnaroundTime+0x9e>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011808:	4a20      	ldr	r2, [pc, #128]	; (801188c <USB_SetTurnaroundTime+0xd8>)
 801180a:	4821      	ldr	r0, [pc, #132]	; (8011890 <USB_SetTurnaroundTime+0xdc>)
 801180c:	440a      	add	r2, r1
 801180e:	4282      	cmp	r2, r0
 8011810:	d322      	bcc.n	8011858 <USB_SetTurnaroundTime+0xa4>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011812:	4a20      	ldr	r2, [pc, #128]	; (8011894 <USB_SetTurnaroundTime+0xe0>)
 8011814:	4820      	ldr	r0, [pc, #128]	; (8011898 <USB_SetTurnaroundTime+0xe4>)
 8011816:	440a      	add	r2, r1
 8011818:	4282      	cmp	r2, r0
 801181a:	d3cf      	bcc.n	80117bc <USB_SetTurnaroundTime+0x8>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801181c:	4a1f      	ldr	r2, [pc, #124]	; (801189c <USB_SetTurnaroundTime+0xe8>)
 801181e:	4820      	ldr	r0, [pc, #128]	; (80118a0 <USB_SetTurnaroundTime+0xec>)
 8011820:	440a      	add	r2, r1
 8011822:	4282      	cmp	r2, r0
 8011824:	d31b      	bcc.n	801185e <USB_SetTurnaroundTime+0xaa>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011826:	4a1f      	ldr	r2, [pc, #124]	; (80118a4 <USB_SetTurnaroundTime+0xf0>)
 8011828:	4c1f      	ldr	r4, [pc, #124]	; (80118a8 <USB_SetTurnaroundTime+0xf4>)
 801182a:	440a      	add	r2, r1
 801182c:	42a2      	cmp	r2, r4
 801182e:	bf34      	ite	cc
 8011830:	f44f 54e0 	movcc.w	r4, #7168	; 0x1c00
 8011834:	f44f 54c0 	movcs.w	r4, #6144	; 0x1800
 8011838:	e7c2      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 801183a:	f44f 5470 	mov.w	r4, #15360	; 0x3c00
 801183e:	e7bf      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 8011840:	f44f 5460 	mov.w	r4, #14336	; 0x3800
 8011844:	e7bc      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 8011846:	f44f 5450 	mov.w	r4, #13312	; 0x3400
 801184a:	e7b9      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 801184c:	f44f 5440 	mov.w	r4, #12288	; 0x3000
 8011850:	e7b6      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 8011852:	f44f 5430 	mov.w	r4, #11264	; 0x2c00
 8011856:	e7b3      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 8011858:	f44f 5420 	mov.w	r4, #10240	; 0x2800
 801185c:	e7b0      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 801185e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8011862:	e7ad      	b.n	80117c0 <USB_SetTurnaroundTime+0xc>
 8011864:	ff275340 	.word	0xff275340
 8011868:	000c34ff 	.word	0x000c34ff
 801186c:	ff1b1e40 	.word	0xff1b1e40
 8011870:	000f423f 	.word	0x000f423f
 8011874:	ff0bdc00 	.word	0xff0bdc00
 8011878:	00124f7f 	.word	0x00124f7f
 801187c:	fef98c80 	.word	0xfef98c80
 8011880:	0013d620 	.word	0x0013d620
 8011884:	fee5b660 	.word	0xfee5b660
 8011888:	0016e35f 	.word	0x0016e35f
 801188c:	feced300 	.word	0xfeced300
 8011890:	001b7740 	.word	0x001b7740
 8011894:	feb35bc0 	.word	0xfeb35bc0
 8011898:	002191c0 	.word	0x002191c0
 801189c:	fe91ca00 	.word	0xfe91ca00
 80118a0:	00387520 	.word	0x00387520
 80118a4:	fe5954e0 	.word	0xfe5954e0
 80118a8:	00419ce0 	.word	0x00419ce0

080118ac <USB_EnableGlobalInt>:
{
 80118ac:	4603      	mov	r3, r0
}
 80118ae:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80118b0:	689a      	ldr	r2, [r3, #8]
 80118b2:	f042 0201 	orr.w	r2, r2, #1
 80118b6:	609a      	str	r2, [r3, #8]
}
 80118b8:	4770      	bx	lr
 80118ba:	bf00      	nop

080118bc <USB_DisableGlobalInt>:
{
 80118bc:	4603      	mov	r3, r0
}
 80118be:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80118c0:	689a      	ldr	r2, [r3, #8]
 80118c2:	f022 0201 	bic.w	r2, r2, #1
 80118c6:	609a      	str	r2, [r3, #8]
}
 80118c8:	4770      	bx	lr
 80118ca:	bf00      	nop

080118cc <USB_SetCurrentMode>:
{
 80118cc:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80118ce:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80118d0:	2901      	cmp	r1, #1
{
 80118d2:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80118d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80118d8:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80118da:	d017      	beq.n	801190c <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80118dc:	b9a1      	cbnz	r1, 8011908 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80118de:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80118e0:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80118e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80118e6:	60c3      	str	r3, [r0, #12]
 80118e8:	e001      	b.n	80118ee <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80118ea:	2c32      	cmp	r4, #50	; 0x32
 80118ec:	d00c      	beq.n	8011908 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80118ee:	2001      	movs	r0, #1
      ms++;
 80118f0:	4404      	add	r4, r0
      HAL_Delay(1U);
 80118f2:	f7f5 fa31 	bl	8006d58 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 80118f6:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80118f8:	07db      	lsls	r3, r3, #31
 80118fa:	d4f6      	bmi.n	80118ea <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 80118fc:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 8011900:	fab0 f080 	clz	r0, r0
 8011904:	0940      	lsrs	r0, r0, #5
}
 8011906:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8011908:	2001      	movs	r0, #1
}
 801190a:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801190c:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801190e:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011910:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011914:	60c3      	str	r3, [r0, #12]
 8011916:	e001      	b.n	801191c <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011918:	2c32      	cmp	r4, #50	; 0x32
 801191a:	d0f5      	beq.n	8011908 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 801191c:	2001      	movs	r0, #1
      ms++;
 801191e:	4404      	add	r4, r0
      HAL_Delay(1U);
 8011920:	f7f5 fa1a 	bl	8006d58 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8011924:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8011926:	07da      	lsls	r2, r3, #31
 8011928:	d5f6      	bpl.n	8011918 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 801192a:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801192e:	fab0 f080 	clz	r0, r0
 8011932:	0940      	lsrs	r0, r0, #5
 8011934:	e7e7      	b.n	8011906 <USB_SetCurrentMode+0x3a>
 8011936:	bf00      	nop

08011938 <USB_FlushTxFifo>:
{
 8011938:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801193a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801193c:	4a11      	ldr	r2, [pc, #68]	; (8011984 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801193e:	9301      	str	r3, [sp, #4]
 8011940:	e002      	b.n	8011948 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011942:	6903      	ldr	r3, [r0, #16]
 8011944:	2b00      	cmp	r3, #0
 8011946:	db07      	blt.n	8011958 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8011948:	9b01      	ldr	r3, [sp, #4]
 801194a:	3301      	adds	r3, #1
 801194c:	4293      	cmp	r3, r2
 801194e:	9301      	str	r3, [sp, #4]
 8011950:	d9f7      	bls.n	8011942 <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 8011952:	2003      	movs	r0, #3
}
 8011954:	b002      	add	sp, #8
 8011956:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011958:	0189      	lsls	r1, r1, #6
  count = 0U;
 801195a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801195c:	4a09      	ldr	r2, [pc, #36]	; (8011984 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801195e:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 8011962:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011964:	6101      	str	r1, [r0, #16]
 8011966:	e003      	b.n	8011970 <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011968:	6903      	ldr	r3, [r0, #16]
 801196a:	f013 0320 	ands.w	r3, r3, #32
 801196e:	d005      	beq.n	801197c <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 8011970:	9b01      	ldr	r3, [sp, #4]
 8011972:	3301      	adds	r3, #1
 8011974:	4293      	cmp	r3, r2
 8011976:	9301      	str	r3, [sp, #4]
 8011978:	d9f6      	bls.n	8011968 <USB_FlushTxFifo+0x30>
 801197a:	e7ea      	b.n	8011952 <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 801197c:	4618      	mov	r0, r3
}
 801197e:	b002      	add	sp, #8
 8011980:	4770      	bx	lr
 8011982:	bf00      	nop
 8011984:	00030d40 	.word	0x00030d40

08011988 <USB_FlushRxFifo>:
{
 8011988:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 801198a:	2300      	movs	r3, #0
    if (++count > 200000U)
 801198c:	4a10      	ldr	r2, [pc, #64]	; (80119d0 <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 801198e:	9301      	str	r3, [sp, #4]
 8011990:	e002      	b.n	8011998 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011992:	6903      	ldr	r3, [r0, #16]
 8011994:	2b00      	cmp	r3, #0
 8011996:	db07      	blt.n	80119a8 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 8011998:	9b01      	ldr	r3, [sp, #4]
 801199a:	3301      	adds	r3, #1
 801199c:	4293      	cmp	r3, r2
 801199e:	9301      	str	r3, [sp, #4]
 80119a0:	d9f7      	bls.n	8011992 <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 80119a2:	2003      	movs	r0, #3
}
 80119a4:	b002      	add	sp, #8
 80119a6:	4770      	bx	lr
  count = 0U;
 80119a8:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119aa:	2310      	movs	r3, #16
    if (++count > 200000U)
 80119ac:	4a08      	ldr	r2, [pc, #32]	; (80119d0 <USB_FlushRxFifo+0x48>)
  count = 0U;
 80119ae:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80119b0:	6103      	str	r3, [r0, #16]
 80119b2:	e003      	b.n	80119bc <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80119b4:	6903      	ldr	r3, [r0, #16]
 80119b6:	f013 0310 	ands.w	r3, r3, #16
 80119ba:	d005      	beq.n	80119c8 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80119bc:	9b01      	ldr	r3, [sp, #4]
 80119be:	3301      	adds	r3, #1
 80119c0:	4293      	cmp	r3, r2
 80119c2:	9301      	str	r3, [sp, #4]
 80119c4:	d9f6      	bls.n	80119b4 <USB_FlushRxFifo+0x2c>
 80119c6:	e7ec      	b.n	80119a2 <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 80119c8:	4618      	mov	r0, r3
}
 80119ca:	b002      	add	sp, #8
 80119cc:	4770      	bx	lr
 80119ce:	bf00      	nop
 80119d0:	00030d40 	.word	0x00030d40

080119d4 <USB_DevInit>:
{
 80119d4:	b084      	sub	sp, #16
 80119d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  for (i = 0U; i < 15U; i++)
 80119da:	2400      	movs	r4, #0
{
 80119dc:	ae09      	add	r6, sp, #36	; 0x24
 80119de:	4605      	mov	r5, r0
 80119e0:	e886 000e 	stmia.w	r6, {r1, r2, r3}
    USBx->DIEPTXF[i] = 0U;
 80119e4:	4622      	mov	r2, r4
 80119e6:	460e      	mov	r6, r1
 80119e8:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80119ea:	f104 0340 	add.w	r3, r4, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80119ee:	3401      	adds	r4, #1
    USBx->DIEPTXF[i] = 0U;
 80119f0:	eb05 0383 	add.w	r3, r5, r3, lsl #2
  for (i = 0U; i < 15U; i++)
 80119f4:	2c0f      	cmp	r4, #15
    USBx->DIEPTXF[i] = 0U;
 80119f6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80119f8:	d1f7      	bne.n	80119ea <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 80119fa:	2f00      	cmp	r7, #0
 80119fc:	f040 8092 	bne.w	8011b24 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011a00:	f8d5 3804 	ldr.w	r3, [r5, #2052]	; 0x804
 8011a04:	f505 6400 	add.w	r4, r5, #2048	; 0x800
 8011a08:	f043 0302 	orr.w	r3, r3, #2
 8011a0c:	6063      	str	r3, [r4, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011a0e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011a10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8011a14:	63ab      	str	r3, [r5, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011a16:	682b      	ldr	r3, [r5, #0]
 8011a18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a1c:	602b      	str	r3, [r5, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011a1e:	682b      	ldr	r3, [r5, #0]
 8011a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a24:	602b      	str	r3, [r5, #0]
  USBx_PCGCCTL = 0U;
 8011a26:	2200      	movs	r2, #0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
  USBx_PCGCCTL = 0U;
 8011a2a:	f8c5 2e00 	str.w	r2, [r5, #3584]	; 0xe00
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a2e:	2b01      	cmp	r3, #1
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011a30:	6822      	ldr	r2, [r4, #0]
 8011a32:	6022      	str	r2, [r4, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011a34:	d07d      	beq.n	8011b32 <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8011a36:	6823      	ldr	r3, [r4, #0]
 8011a38:	f043 0303 	orr.w	r3, r3, #3
 8011a3c:	6023      	str	r3, [r4, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011a3e:	2110      	movs	r1, #16
 8011a40:	4628      	mov	r0, r5
 8011a42:	f7ff ff79 	bl	8011938 <USB_FlushTxFifo>
 8011a46:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a48:	4628      	mov	r0, r5
 8011a4a:	f7ff ff9d 	bl	8011988 <USB_FlushRxFifo>
 8011a4e:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8011a52:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011a54:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8011a56:	6122      	str	r2, [r4, #16]
    ret = HAL_ERROR;
 8011a58:	1a80      	subs	r0, r0, r2
  USBx_DEVICE->DOEPMSK = 0U;
 8011a5a:	6162      	str	r2, [r4, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011a5c:	61e2      	str	r2, [r4, #28]
    ret = HAL_ERROR;
 8011a5e:	bf18      	it	ne
 8011a60:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a62:	b1ee      	cbz	r6, 8011aa0 <USB_DevInit+0xcc>
 8011a64:	f505 6310 	add.w	r3, r5, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011a68:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011a6c:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 8011a70:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011a72:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8011a76:	e009      	b.n	8011a8c <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8011a78:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a7c:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011a7e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011a82:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011a86:	3320      	adds	r3, #32
 8011a88:	42b2      	cmp	r2, r6
 8011a8a:	d02c      	beq.n	8011ae6 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011a8c:	6819      	ldr	r1, [r3, #0]
 8011a8e:	2900      	cmp	r1, #0
 8011a90:	daf2      	bge.n	8011a78 <USB_DevInit+0xa4>
      if (i == 0U)
 8011a92:	b112      	cbz	r2, 8011a9a <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011a94:	f8c3 8000 	str.w	r8, [r3]
 8011a98:	e7f0      	b.n	8011a7c <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011a9a:	f8c3 9000 	str.w	r9, [r3]
 8011a9e:	e7ed      	b.n	8011a7c <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011aa0:	6923      	ldr	r3, [r4, #16]
  USBx->GINTMSK = 0U;
 8011aa2:	2600      	movs	r6, #0
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011aa4:	f06f 4180 	mvn.w	r1, #1073741824	; 0x40000000
  if (cfg.dma_enable == 0U)
 8011aa8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8011aaa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011aae:	6123      	str	r3, [r4, #16]
  USBx->GINTMSK = 0U;
 8011ab0:	61ae      	str	r6, [r5, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011ab2:	6169      	str	r1, [r5, #20]
  if (cfg.dma_enable == 0U)
 8011ab4:	b91a      	cbnz	r2, 8011abe <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011ab6:	69ab      	ldr	r3, [r5, #24]
 8011ab8:	f043 0310 	orr.w	r3, r3, #16
 8011abc:	61ab      	str	r3, [r5, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011abe:	69a9      	ldr	r1, [r5, #24]
 8011ac0:	4b21      	ldr	r3, [pc, #132]	; (8011b48 <USB_DevInit+0x174>)
  if (cfg.Sof_enable != 0U)
 8011ac2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8011ac4:	430b      	orrs	r3, r1
 8011ac6:	61ab      	str	r3, [r5, #24]
  if (cfg.Sof_enable != 0U)
 8011ac8:	b11a      	cbz	r2, 8011ad2 <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8011aca:	69ab      	ldr	r3, [r5, #24]
 8011acc:	f043 0308 	orr.w	r3, r3, #8
 8011ad0:	61ab      	str	r3, [r5, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8011ad2:	2f01      	cmp	r7, #1
 8011ad4:	d103      	bne.n	8011ade <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8011ad6:	69aa      	ldr	r2, [r5, #24]
 8011ad8:	4b1c      	ldr	r3, [pc, #112]	; (8011b4c <USB_DevInit+0x178>)
 8011ada:	4313      	orrs	r3, r2
 8011adc:	61ab      	str	r3, [r5, #24]
}
 8011ade:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ae2:	b004      	add	sp, #16
 8011ae4:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f505 6330 	add.w	r3, r5, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011aec:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011af0:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011af4:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011af6:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8011afa:	e009      	b.n	8011b10 <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011afc:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011b00:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011b02:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011b06:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011b0a:	3320      	adds	r3, #32
 8011b0c:	42b2      	cmp	r2, r6
 8011b0e:	d0c7      	beq.n	8011aa0 <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011b10:	6819      	ldr	r1, [r3, #0]
 8011b12:	2900      	cmp	r1, #0
 8011b14:	daf2      	bge.n	8011afc <USB_DevInit+0x128>
      if (i == 0U)
 8011b16:	b112      	cbz	r2, 8011b1e <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011b18:	f8c3 8000 	str.w	r8, [r3]
 8011b1c:	e7f0      	b.n	8011b00 <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011b1e:	f8c3 9000 	str.w	r9, [r3]
 8011b22:	e7ed      	b.n	8011b00 <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011b24:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8011b26:	f505 6400 	add.w	r4, r5, #2048	; 0x800
 8011b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8011b2e:	63ab      	str	r3, [r5, #56]	; 0x38
 8011b30:	e779      	b.n	8011a26 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 8011b32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b34:	b913      	cbnz	r3, 8011b3c <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8011b36:	6823      	ldr	r3, [r4, #0]
 8011b38:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8011b3a:	e780      	b.n	8011a3e <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8011b3c:	6823      	ldr	r3, [r4, #0]
 8011b3e:	f043 0301 	orr.w	r3, r3, #1
 8011b42:	6023      	str	r3, [r4, #0]
  return HAL_OK;
 8011b44:	e77b      	b.n	8011a3e <USB_DevInit+0x6a>
 8011b46:	bf00      	nop
 8011b48:	803c3800 	.word	0x803c3800
 8011b4c:	40000004 	.word	0x40000004

08011b50 <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8011b50:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8011b54:	f013 0006 	ands.w	r0, r3, #6
 8011b58:	d004      	beq.n	8011b64 <USB_GetDevSpeed+0x14>
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011b5a:	f013 0f02 	tst.w	r3, #2
    speed = 0xFU;
 8011b5e:	bf14      	ite	ne
 8011b60:	2002      	movne	r0, #2
 8011b62:	200f      	moveq	r0, #15
}
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop

08011b68 <USB_ActivateEndpoint>:
{
 8011b68:	b470      	push	{r4, r5, r6}
  if (ep->is_in == 1U)
 8011b6a:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011b6c:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 8011b6e:	2b01      	cmp	r3, #1
 8011b70:	d01f      	beq.n	8011bb2 <USB_ActivateEndpoint+0x4a>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011b72:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 8011b76:	f002 050f 	and.w	r5, r2, #15
 8011b7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011b7e:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8011b82:	69e2      	ldr	r2, [r4, #28]
 8011b84:	40ab      	lsls	r3, r5
 8011b86:	4313      	orrs	r3, r2
 8011b88:	61e3      	str	r3, [r4, #28]
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8011b8a:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011b8e:	041b      	lsls	r3, r3, #16
 8011b90:	d40c      	bmi.n	8011bac <USB_ActivateEndpoint+0x44>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011b92:	688b      	ldr	r3, [r1, #8]
 8011b94:	f8d0 4b00 	ldr.w	r4, [r0, #2816]	; 0xb00
 8011b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011b9c:	78c9      	ldrb	r1, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8011b9e:	4a15      	ldr	r2, [pc, #84]	; (8011bf4 <USB_ActivateEndpoint+0x8c>)
 8011ba0:	4323      	orrs	r3, r4
 8011ba2:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
 8011ba6:	431a      	orrs	r2, r3
 8011ba8:	f8c0 2b00 	str.w	r2, [r0, #2816]	; 0xb00
}
 8011bac:	2000      	movs	r0, #0
 8011bae:	bc70      	pop	{r4, r5, r6}
 8011bb0:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011bb2:	f002 040f 	and.w	r4, r2, #15
 8011bb6:	f8d0 681c 	ldr.w	r6, [r0, #2076]	; 0x81c
 8011bba:	f500 6500 	add.w	r5, r0, #2048	; 0x800
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011bbe:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011bc2:	40a3      	lsls	r3, r4
 8011bc4:	4333      	orrs	r3, r6
 8011bc6:	61eb      	str	r3, [r5, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011bc8:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8011bcc:	041c      	lsls	r4, r3, #16
 8011bce:	d4ed      	bmi.n	8011bac <USB_ActivateEndpoint+0x44>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011bd0:	688b      	ldr	r3, [r1, #8]
 8011bd2:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 8011bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011bda:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011bdc:	4905      	ldr	r1, [pc, #20]	; (8011bf4 <USB_ActivateEndpoint+0x8c>)
 8011bde:	432b      	orrs	r3, r5
 8011be0:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8011be4:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 8011be8:	4311      	orrs	r1, r2
}
 8011bea:	bc70      	pop	{r4, r5, r6}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011bec:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 8011bf0:	2000      	movs	r0, #0
 8011bf2:	4770      	bx	lr
 8011bf4:	10008000 	.word	0x10008000

08011bf8 <USB_DeactivateEndpoint>:
{
 8011bf8:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8011bfa:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011bfc:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8011bfe:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c00:	eb00 1543 	add.w	r5, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8011c04:	d02b      	beq.n	8011c5e <USB_DeactivateEndpoint+0x66>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011c06:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8011c0a:	2a00      	cmp	r2, #0
 8011c0c:	db1a      	blt.n	8011c44 <USB_DeactivateEndpoint+0x4c>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c0e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8011c12:	f003 030f 	and.w	r3, r3, #15
 8011c16:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8011c1a:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011c1e:	4925      	ldr	r1, [pc, #148]	; (8011cb4 <USB_DeactivateEndpoint+0xbc>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c20:	ea24 0403 	bic.w	r4, r4, r3
 8011c24:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011c28:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8011c2c:	ea22 0303 	bic.w	r3, r2, r3
 8011c30:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8011c34:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8011c36:	f8d5 3b00 	ldr.w	r3, [r5, #2816]	; 0xb00
 8011c3a:	4019      	ands	r1, r3
 8011c3c:	f8c5 1b00 	str.w	r1, [r5, #2816]	; 0xb00
}
 8011c40:	bc30      	pop	{r4, r5}
 8011c42:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011c44:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8011c48:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011c4c:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011c50:	f8d5 2b00 	ldr.w	r2, [r5, #2816]	; 0xb00
 8011c54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011c58:	f8c5 2b00 	str.w	r2, [r5, #2816]	; 0xb00
 8011c5c:	e7d7      	b.n	8011c0e <USB_DeactivateEndpoint+0x16>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011c5e:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 8011c62:	2a00      	cmp	r2, #0
 8011c64:	da0b      	bge.n	8011c7e <USB_DeactivateEndpoint+0x86>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011c66:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 8011c6a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8011c6e:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011c72:	f8d5 2900 	ldr.w	r2, [r5, #2304]	; 0x900
 8011c76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8011c7a:	f8c5 2900 	str.w	r2, [r5, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c7e:	2201      	movs	r2, #1
 8011c80:	f003 030f 	and.w	r3, r3, #15
 8011c84:	f8d0 483c 	ldr.w	r4, [r0, #2108]	; 0x83c
 8011c88:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011c8c:	490a      	ldr	r1, [pc, #40]	; (8011cb8 <USB_DeactivateEndpoint+0xc0>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c8e:	ea24 0403 	bic.w	r4, r4, r3
 8011c92:	f8c0 483c 	str.w	r4, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011c96:	f8d0 281c 	ldr.w	r2, [r0, #2076]	; 0x81c
 8011c9a:	ea22 0303 	bic.w	r3, r2, r3
 8011c9e:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 8011ca2:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8011ca4:	f8d5 3900 	ldr.w	r3, [r5, #2304]	; 0x900
 8011ca8:	4019      	ands	r1, r3
 8011caa:	f8c5 1900 	str.w	r1, [r5, #2304]	; 0x900
}
 8011cae:	bc30      	pop	{r4, r5}
 8011cb0:	4770      	bx	lr
 8011cb2:	bf00      	nop
 8011cb4:	eff37800 	.word	0xeff37800
 8011cb8:	ec337800 	.word	0xec337800

08011cbc <USB_EPStartXfer>:
{
 8011cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (ep->is_in == 1U)
 8011cc0:	784d      	ldrb	r5, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011cc2:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8011cc4:	2d01      	cmp	r5, #1
 8011cc6:	d054      	beq.n	8011d72 <USB_EPStartXfer+0xb6>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011cc8:	eb00 1444 	add.w	r4, r0, r4, lsl #5
 8011ccc:	4f82      	ldr	r7, [pc, #520]	; (8011ed8 <USB_EPStartXfer+0x21c>)
    if (ep->xfer_len == 0U)
 8011cce:	694d      	ldr	r5, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011cd0:	f8d4 cb10 	ldr.w	ip, [r4, #2832]	; 0xb10
 8011cd4:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011cd8:	4e80      	ldr	r6, [pc, #512]	; (8011edc <USB_EPStartXfer+0x220>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011cda:	ea0c 0707 	and.w	r7, ip, r7
 8011cde:	611f      	str	r7, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011ce0:	691f      	ldr	r7, [r3, #16]
 8011ce2:	403e      	ands	r6, r7
 8011ce4:	611e      	str	r6, [r3, #16]
    if (ep->xfer_len == 0U)
 8011ce6:	b395      	cbz	r5, 8011d4e <USB_EPStartXfer+0x92>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011ce8:	688e      	ldr	r6, [r1, #8]
    if (dma == 1U)
 8011cea:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011cec:	4f7c      	ldr	r7, [pc, #496]	; (8011ee0 <USB_EPStartXfer+0x224>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011cee:	4435      	add	r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011cf0:	f8d3 c010 	ldr.w	ip, [r3, #16]
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011cf4:	f105 35ff 	add.w	r5, r5, #4294967295
 8011cf8:	fbb5 f5f6 	udiv	r5, r5, r6
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011cfc:	fa1f fe85 	uxth.w	lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011d00:	ea07 45c5 	and.w	r5, r7, r5, lsl #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011d04:	fb06 f60e 	mul.w	r6, r6, lr
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011d08:	ea45 050c 	orr.w	r5, r5, ip
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011d0c:	f3c6 0612 	ubfx	r6, r6, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011d10:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8011d12:	691d      	ldr	r5, [r3, #16]
 8011d14:	ea46 0605 	orr.w	r6, r6, r5
 8011d18:	611e      	str	r6, [r3, #16]
    if (dma == 1U)
 8011d1a:	d025      	beq.n	8011d68 <USB_EPStartXfer+0xac>
    if (ep->type == EP_TYPE_ISOC)
 8011d1c:	78cb      	ldrb	r3, [r1, #3]
 8011d1e:	2b01      	cmp	r3, #1
 8011d20:	d10c      	bne.n	8011d3c <USB_EPStartXfer+0x80>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011d22:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8011d26:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011d2a:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8011d2e:	bf0c      	ite	eq
 8011d30:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011d34:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8011d38:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011d3c:	f8d4 3b00 	ldr.w	r3, [r4, #2816]	; 0xb00
 8011d40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011d44:	f8c4 3b00 	str.w	r3, [r4, #2816]	; 0xb00
}
 8011d48:	2000      	movs	r0, #0
 8011d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011d4e:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 8011d50:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011d52:	691e      	ldr	r6, [r3, #16]
 8011d54:	f3c5 0512 	ubfx	r5, r5, #0, #19
 8011d58:	ea45 0506 	orr.w	r5, r5, r6
 8011d5c:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d5e:	691d      	ldr	r5, [r3, #16]
 8011d60:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8011d64:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8011d66:	d1d9      	bne.n	8011d1c <USB_EPStartXfer+0x60>
      if ((uint32_t)ep->xfer_buff != 0U)
 8011d68:	68ca      	ldr	r2, [r1, #12]
 8011d6a:	2a00      	cmp	r2, #0
 8011d6c:	d0d6      	beq.n	8011d1c <USB_EPStartXfer+0x60>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011d6e:	615a      	str	r2, [r3, #20]
 8011d70:	e7d4      	b.n	8011d1c <USB_EPStartXfer+0x60>
    if (ep->xfer_len == 0U)
 8011d72:	694e      	ldr	r6, [r1, #20]
 8011d74:	2e00      	cmp	r6, #0
 8011d76:	d040      	beq.n	8011dfa <USB_EPStartXfer+0x13e>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d78:	eb00 1e44 	add.w	lr, r0, r4, lsl #5
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011d7c:	f8d1 8008 	ldr.w	r8, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d80:	f8df a154 	ldr.w	sl, [pc, #340]	; 8011ed8 <USB_EPStartXfer+0x21c>
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011d84:	f3c6 0712 	ubfx	r7, r6, #0, #19
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d88:	f8de 9910 	ldr.w	r9, [lr, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011d8c:	eb06 0c08 	add.w	ip, r6, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011d90:	f50e 6310 	add.w	r3, lr, #2304	; 0x900
 8011d94:	ea09 0a0a 	and.w	sl, r9, sl
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011d98:	f10c 3cff 	add.w	ip, ip, #4294967295
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011d9c:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8011edc <USB_EPStartXfer+0x220>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011da0:	f8c3 a010 	str.w	sl, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011da4:	f8d3 a010 	ldr.w	sl, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8011da8:	fbbc f8f8 	udiv	r8, ip, r8
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011dac:	ea0a 0909 	and.w	r9, sl, r9
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011db0:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8011ee0 <USB_EPStartXfer+0x224>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011db4:	f8c3 9010 	str.w	r9, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8011db8:	ea0c 4cc8 	and.w	ip, ip, r8, lsl #19
 8011dbc:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8011dc0:	ea4c 0c08 	orr.w	ip, ip, r8
 8011dc4:	f8c3 c010 	str.w	ip, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011dc8:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8011dcc:	ea47 070c 	orr.w	r7, r7, ip
 8011dd0:	611f      	str	r7, [r3, #16]
      if (ep->type == EP_TYPE_ISOC)
 8011dd2:	78cf      	ldrb	r7, [r1, #3]
 8011dd4:	2f01      	cmp	r7, #1
 8011dd6:	d04e      	beq.n	8011e76 <USB_EPStartXfer+0x1ba>
    if (dma == 1U)
 8011dd8:	2a01      	cmp	r2, #1
 8011dda:	d068      	beq.n	8011eae <USB_EPStartXfer+0x1f2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ddc:	f8de 3900 	ldr.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011de0:	f004 040f 	and.w	r4, r4, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011de4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011de8:	40a5      	lsls	r5, r4
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011dea:	f8ce 3900 	str.w	r3, [lr, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011dee:	f8d0 4834 	ldr.w	r4, [r0, #2100]	; 0x834
 8011df2:	4325      	orrs	r5, r4
 8011df4:	f8c0 5834 	str.w	r5, [r0, #2100]	; 0x834
  return HAL_OK;
 8011df8:	e7a6      	b.n	8011d48 <USB_EPStartXfer+0x8c>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011dfa:	eb00 1c44 	add.w	ip, r0, r4, lsl #5
 8011dfe:	4f37      	ldr	r7, [pc, #220]	; (8011edc <USB_EPStartXfer+0x220>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e00:	4d35      	ldr	r5, [pc, #212]	; (8011ed8 <USB_EPStartXfer+0x21c>)
    if (dma == 1U)
 8011e02:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011e04:	f8dc e910 	ldr.w	lr, [ip, #2320]	; 0x910
 8011e08:	f50c 6310 	add.w	r3, ip, #2304	; 0x900
 8011e0c:	ea0e 0707 	and.w	r7, lr, r7
 8011e10:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011e12:	691f      	ldr	r7, [r3, #16]
 8011e14:	f447 2700 	orr.w	r7, r7, #524288	; 0x80000
 8011e18:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011e1a:	691f      	ldr	r7, [r3, #16]
 8011e1c:	ea05 0507 	and.w	r5, r5, r7
 8011e20:	611d      	str	r5, [r3, #16]
 8011e22:	78cf      	ldrb	r7, [r1, #3]
    if (dma == 1U)
 8011e24:	d038      	beq.n	8011e98 <USB_EPStartXfer+0x1dc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011e26:	f8dc 5900 	ldr.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8011e2a:	2f01      	cmp	r7, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011e2c:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8011e30:	f8cc 5900 	str.w	r5, [ip, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8011e34:	d188      	bne.n	8011d48 <USB_EPStartXfer+0x8c>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011e36:	f8d0 5808 	ldr.w	r5, [r0, #2056]	; 0x808
 8011e3a:	f415 7f80 	tst.w	r5, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011e3e:	681d      	ldr	r5, [r3, #0]
 8011e40:	bf0c      	ite	eq
 8011e42:	f045 5500 	orreq.w	r5, r5, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011e46:	f045 5580 	orrne.w	r5, r5, #268435456	; 0x10000000
 8011e4a:	601d      	str	r5, [r3, #0]
  if (dma == 0U)
 8011e4c:	2a00      	cmp	r2, #0
 8011e4e:	f47f af7b 	bne.w	8011d48 <USB_EPStartXfer+0x8c>
    count32b = ((uint32_t)len + 3U) / 4U;
 8011e52:	b2b6      	uxth	r6, r6
 8011e54:	3603      	adds	r6, #3
    for (i = 0U; i < count32b; i++)
 8011e56:	08b6      	lsrs	r6, r6, #2
 8011e58:	f43f af76 	beq.w	8011d48 <USB_EPStartXfer+0x8c>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011e5c:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011e5e:	eb00 3004 	add.w	r0, r0, r4, lsl #12
 8011e62:	eb03 0186 	add.w	r1, r3, r6, lsl #2
 8011e66:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8011e6a:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8011e6e:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011e70:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8011e72:	d1fa      	bne.n	8011e6a <USB_EPStartXfer+0x1ae>
 8011e74:	e768      	b.n	8011d48 <USB_EPStartXfer+0x8c>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011e76:	691d      	ldr	r5, [r3, #16]
    if (dma == 1U)
 8011e78:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011e7a:	f025 45c0 	bic.w	r5, r5, #1610612736	; 0x60000000
 8011e7e:	611d      	str	r5, [r3, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8011e80:	691d      	ldr	r5, [r3, #16]
 8011e82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011e86:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8011e88:	d016      	beq.n	8011eb8 <USB_EPStartXfer+0x1fc>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011e8a:	f8de 5900 	ldr.w	r5, [lr, #2304]	; 0x900
 8011e8e:	f045 4504 	orr.w	r5, r5, #2214592512	; 0x84000000
 8011e92:	f8ce 5900 	str.w	r5, [lr, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8011e96:	e7ce      	b.n	8011e36 <USB_EPStartXfer+0x17a>
      if ((uint32_t)ep->dma_addr != 0U)
 8011e98:	690a      	ldr	r2, [r1, #16]
 8011e9a:	b95a      	cbnz	r2, 8011eb4 <USB_EPStartXfer+0x1f8>
      if (ep->type == EP_TYPE_ISOC)
 8011e9c:	2f01      	cmp	r7, #1
 8011e9e:	d00e      	beq.n	8011ebe <USB_EPStartXfer+0x202>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ea0:	681a      	ldr	r2, [r3, #0]
}
 8011ea2:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011ea4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011ea8:	601a      	str	r2, [r3, #0]
}
 8011eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 8011eae:	690a      	ldr	r2, [r1, #16]
 8011eb0:	2a00      	cmp	r2, #0
 8011eb2:	d0f5      	beq.n	8011ea0 <USB_EPStartXfer+0x1e4>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011eb4:	615a      	str	r2, [r3, #20]
 8011eb6:	e7f1      	b.n	8011e9c <USB_EPStartXfer+0x1e0>
      if ((uint32_t)ep->dma_addr != 0U)
 8011eb8:	690a      	ldr	r2, [r1, #16]
 8011eba:	2a00      	cmp	r2, #0
 8011ebc:	d1fa      	bne.n	8011eb4 <USB_EPStartXfer+0x1f8>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011ebe:	f8d0 2808 	ldr.w	r2, [r0, #2056]	; 0x808
 8011ec2:	f412 7f80 	tst.w	r2, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011ec6:	681a      	ldr	r2, [r3, #0]
 8011ec8:	bf0c      	ite	eq
 8011eca:	f042 5200 	orreq.w	r2, r2, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011ece:	f042 5280 	orrne.w	r2, r2, #268435456	; 0x10000000
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	e7e4      	b.n	8011ea0 <USB_EPStartXfer+0x1e4>
 8011ed6:	bf00      	nop
 8011ed8:	fff80000 	.word	0xfff80000
 8011edc:	e007ffff 	.word	0xe007ffff
 8011ee0:	1ff80000 	.word	0x1ff80000

08011ee4 <USB_EP0StartXfer>:
{
 8011ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (ep->is_in == 1U)
 8011ee6:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8011ee8:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 8011eea:	2b01      	cmp	r3, #1
 8011eec:	d029      	beq.n	8011f42 <USB_EP0StartXfer+0x5e>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011eee:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8011ef2:	4d3d      	ldr	r5, [pc, #244]	; (8011fe8 <USB_EP0StartXfer+0x104>)
    if (ep->xfer_len > 0U)
 8011ef4:	694e      	ldr	r6, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011ef6:	f8d0 7b10 	ldr.w	r7, [r0, #2832]	; 0xb10
 8011efa:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011efe:	4c3b      	ldr	r4, [pc, #236]	; (8011fec <USB_EP0StartXfer+0x108>)
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011f00:	403d      	ands	r5, r7
 8011f02:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011f04:	691d      	ldr	r5, [r3, #16]
 8011f06:	402c      	ands	r4, r5
 8011f08:	611c      	str	r4, [r3, #16]
      ep->xfer_len = ep->maxpacket;
 8011f0a:	688c      	ldr	r4, [r1, #8]
    if (ep->xfer_len > 0U)
 8011f0c:	b106      	cbz	r6, 8011f10 <USB_EP0StartXfer+0x2c>
      ep->xfer_len = ep->maxpacket;
 8011f0e:	614c      	str	r4, [r1, #20]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f10:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011f12:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8011f16:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011f18:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8011f1c:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8011f1e:	691d      	ldr	r5, [r3, #16]
 8011f20:	ea44 0405 	orr.w	r4, r4, r5
 8011f24:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8011f26:	d007      	beq.n	8011f38 <USB_EP0StartXfer+0x54>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011f28:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8011f2c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8011f30:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8011f34:	2000      	movs	r0, #0
 8011f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((uint32_t)ep->xfer_buff != 0U)
 8011f38:	68ca      	ldr	r2, [r1, #12]
 8011f3a:	2a00      	cmp	r2, #0
 8011f3c:	d0f4      	beq.n	8011f28 <USB_EP0StartXfer+0x44>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011f3e:	615a      	str	r2, [r3, #20]
 8011f40:	e7f2      	b.n	8011f28 <USB_EP0StartXfer+0x44>
    if (ep->xfer_len == 0U)
 8011f42:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f44:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 8011f48:	b38d      	cbz	r5, 8011fae <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f4a:	f8d3 e910 	ldr.w	lr, [r3, #2320]	; 0x910
 8011f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f52:	4f25      	ldr	r7, [pc, #148]	; (8011fe8 <USB_EP0StartXfer+0x104>)
      if (ep->xfer_len > ep->maxpacket)
 8011f54:	f8d1 c008 	ldr.w	ip, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f58:	ea0e 0707 	and.w	r7, lr, r7
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f5c:	4e23      	ldr	r6, [pc, #140]	; (8011fec <USB_EP0StartXfer+0x108>)
      if (ep->xfer_len > ep->maxpacket)
 8011f5e:	4565      	cmp	r5, ip
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011f60:	611f      	str	r7, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011f62:	691f      	ldr	r7, [r3, #16]
 8011f64:	ea06 0607 	and.w	r6, r6, r7
 8011f68:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8011f6a:	d902      	bls.n	8011f72 <USB_EP0StartXfer+0x8e>
        ep->xfer_len = ep->maxpacket;
 8011f6c:	4665      	mov	r5, ip
 8011f6e:	f8c1 c014 	str.w	ip, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f72:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011f74:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8011f78:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011f7a:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8011f7e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011f80:	691e      	ldr	r6, [r3, #16]
 8011f82:	ea45 0506 	orr.w	r5, r5, r6
 8011f86:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8011f88:	d025      	beq.n	8011fd6 <USB_EP0StartXfer+0xf2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f8a:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8011f8c:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011f8e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011f92:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8011f94:	2900      	cmp	r1, #0
 8011f96:	d0cd      	beq.n	8011f34 <USB_EP0StartXfer+0x50>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011f98:	f004 020f 	and.w	r2, r4, #15
 8011f9c:	2401      	movs	r4, #1
 8011f9e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 8011fa2:	4094      	lsls	r4, r2
 8011fa4:	431c      	orrs	r4, r3
 8011fa6:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 8011faa:	2000      	movs	r0, #0
 8011fac:	bdf0      	pop	{r4, r5, r6, r7, pc}
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fae:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fb2:	f5a5 2500 	sub.w	r5, r5, #524288	; 0x80000
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fb6:	4e0d      	ldr	r6, [pc, #52]	; (8011fec <USB_EP0StartXfer+0x108>)
    if (dma == 1U)
 8011fb8:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011fbe:	ea06 0607 	and.w	r6, r6, r7
 8011fc2:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011fc4:	691e      	ldr	r6, [r3, #16]
 8011fc6:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8011fca:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011fcc:	691e      	ldr	r6, [r3, #16]
 8011fce:	ea05 0506 	and.w	r5, r5, r6
 8011fd2:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8011fd4:	d1d9      	bne.n	8011f8a <USB_EP0StartXfer+0xa6>
      if ((uint32_t)ep->dma_addr != 0U)
 8011fd6:	690a      	ldr	r2, [r1, #16]
 8011fd8:	b102      	cbz	r2, 8011fdc <USB_EP0StartXfer+0xf8>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011fda:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fdc:	681a      	ldr	r2, [r3, #0]
}
 8011fde:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011fe0:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8011fe4:	601a      	str	r2, [r3, #0]
}
 8011fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe8:	fff80000 	.word	0xfff80000
 8011fec:	e007ffff 	.word	0xe007ffff

08011ff0 <USB_WritePacket>:
{
 8011ff0:	b410      	push	{r4}
 8011ff2:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 8011ff6:	b964      	cbnz	r4, 8012012 <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8011ff8:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8011ffa:	089b      	lsrs	r3, r3, #2
 8011ffc:	d009      	beq.n	8012012 <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011ffe:	3201      	adds	r2, #1
 8012000:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8012004:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8012008:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 801200c:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801200e:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8012010:	d1fa      	bne.n	8012008 <USB_WritePacket+0x18>
}
 8012012:	2000      	movs	r0, #0
 8012014:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012018:	4770      	bx	lr
 801201a:	bf00      	nop

0801201c <USB_ReadPacket>:
{
 801201c:	b4f0      	push	{r4, r5, r6, r7}
  for (i = 0U; i < count32b; i++)
 801201e:	0895      	lsrs	r5, r2, #2
  uint16_t remaining_bytes = len % 4U;
 8012020:	f002 0703 	and.w	r7, r2, #3
  for (i = 0U; i < count32b; i++)
 8012024:	d01e      	beq.n	8012064 <USB_ReadPacket+0x48>
 8012026:	f500 5680 	add.w	r6, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 801202a:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 801202c:	2300      	movs	r3, #0
 801202e:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012030:	6834      	ldr	r4, [r6, #0]
  for (i = 0U; i < count32b; i++)
 8012032:	429d      	cmp	r5, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012034:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8012038:	d1f9      	bne.n	801202e <USB_ReadPacket+0x12>
 801203a:	eb01 0585 	add.w	r5, r1, r5, lsl #2
  if (remaining_bytes != 0U)
 801203e:	b177      	cbz	r7, 801205e <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012040:	1e7b      	subs	r3, r7, #1
 8012042:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8012046:	2100      	movs	r1, #0
 8012048:	b29b      	uxth	r3, r3
 801204a:	6800      	ldr	r0, [r0, #0]
 801204c:	3301      	adds	r3, #1
 801204e:	442b      	add	r3, r5
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012050:	fa20 f201 	lsr.w	r2, r0, r1
 8012054:	3108      	adds	r1, #8
 8012056:	f805 2b01 	strb.w	r2, [r5], #1
    } while (remaining_bytes != 0U);
 801205a:	429d      	cmp	r5, r3
 801205c:	d1f8      	bne.n	8012050 <USB_ReadPacket+0x34>
}
 801205e:	4628      	mov	r0, r5
 8012060:	bcf0      	pop	{r4, r5, r6, r7}
 8012062:	4770      	bx	lr
  uint8_t *pDest = dest;
 8012064:	460d      	mov	r5, r1
 8012066:	e7ea      	b.n	801203e <USB_ReadPacket+0x22>

08012068 <USB_EPSetStall>:
  if (ep->is_in == 1U)
 8012068:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801206a:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 801206c:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801206e:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8012072:	d00c      	beq.n	801208e <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012074:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 8012078:	b10b      	cbz	r3, 801207e <USB_EPSetStall+0x16>
 801207a:	2a00      	cmp	r2, #0
 801207c:	da14      	bge.n	80120a8 <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801207e:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012086:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801208a:	2000      	movs	r0, #0
 801208c:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 801208e:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8012092:	2a00      	cmp	r2, #0
 8012094:	db00      	blt.n	8012098 <USB_EPSetStall+0x30>
 8012096:	b973      	cbnz	r3, 80120b6 <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012098:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801209c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80120a0:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80120a4:	2000      	movs	r0, #0
 80120a6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80120a8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80120ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80120b0:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80120b4:	e7e3      	b.n	801207e <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80120b6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80120ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80120be:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80120c2:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80120c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80120ca:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80120ce:	e7e9      	b.n	80120a4 <USB_EPSetStall+0x3c>

080120d0 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80120d0:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80120d2:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80120d4:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80120d6:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80120da:	d013      	beq.n	8012104 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80120dc:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80120e0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80120e4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80120e8:	78cb      	ldrb	r3, [r1, #3]
 80120ea:	3b02      	subs	r3, #2
 80120ec:	2b01      	cmp	r3, #1
 80120ee:	d901      	bls.n	80120f4 <USB_EPClearStall+0x24>
}
 80120f0:	2000      	movs	r0, #0
 80120f2:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80120f4:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80120f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80120fc:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8012100:	2000      	movs	r0, #0
 8012102:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012104:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8012108:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801210c:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012110:	78cb      	ldrb	r3, [r1, #3]
 8012112:	3b02      	subs	r3, #2
 8012114:	2b01      	cmp	r3, #1
 8012116:	d8eb      	bhi.n	80120f0 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012118:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 801211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012120:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8012124:	2000      	movs	r0, #0
 8012126:	4770      	bx	lr

08012128 <USB_SetDevAddress>:
{
 8012128:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801212a:	0109      	lsls	r1, r1, #4
}
 801212c:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801212e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012132:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012136:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 801213a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 801213e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8012142:	4311      	orrs	r1, r2
 8012144:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop

0801214c <USB_DevConnect>:
{
 801214c:	4603      	mov	r3, r0
}
 801214e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012150:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012154:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012158:	f022 0203 	bic.w	r2, r2, #3
 801215c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012160:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012164:	f023 0302 	bic.w	r3, r3, #2
 8012168:	604b      	str	r3, [r1, #4]
}
 801216a:	4770      	bx	lr

0801216c <USB_DevDisconnect>:
{
 801216c:	4603      	mov	r3, r0
}
 801216e:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012170:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012174:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8012178:	f022 0203 	bic.w	r2, r2, #3
 801217c:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012180:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012184:	f043 0302 	orr.w	r3, r3, #2
 8012188:	604b      	str	r3, [r1, #4]
}
 801218a:	4770      	bx	lr

0801218c <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 801218c:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 801218e:	6980      	ldr	r0, [r0, #24]
}
 8012190:	4010      	ands	r0, r2
 8012192:	4770      	bx	lr

08012194 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8012194:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 8012198:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801219c:	69c0      	ldr	r0, [r0, #28]
 801219e:	4018      	ands	r0, r3
}
 80121a0:	0c00      	lsrs	r0, r0, #16
 80121a2:	4770      	bx	lr

080121a4 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 80121a4:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
 80121a8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80121ac:	69c0      	ldr	r0, [r0, #28]
 80121ae:	4018      	ands	r0, r3
}
 80121b0:	b280      	uxth	r0, r0
 80121b2:	4770      	bx	lr

080121b4 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80121b4:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80121b8:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80121bc:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80121c0:	6940      	ldr	r0, [r0, #20]
}
 80121c2:	4010      	ands	r0, r2
 80121c4:	4770      	bx	lr
 80121c6:	bf00      	nop

080121c8 <USB_ReadDevInEPInterrupt>:
{
 80121c8:	b430      	push	{r4, r5}
  msk = USBx_DEVICE->DIEPMSK;
 80121ca:	f8d0 4810 	ldr.w	r4, [r0, #2064]	; 0x810
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80121ce:	f001 050f 	and.w	r5, r1, #15
  emp = USBx_DEVICE->DIEPEMPMSK;
 80121d2:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80121d6:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80121da:	40eb      	lsrs	r3, r5
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80121dc:	f8d1 0908 	ldr.w	r0, [r1, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80121e0:	01db      	lsls	r3, r3, #7
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	4323      	orrs	r3, r4
}
 80121e6:	bc30      	pop	{r4, r5}
 80121e8:	4018      	ands	r0, r3
 80121ea:	4770      	bx	lr

080121ec <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80121ec:	6940      	ldr	r0, [r0, #20]
}
 80121ee:	f000 0001 	and.w	r0, r0, #1
 80121f2:	4770      	bx	lr

080121f4 <USB_ActivateSetup>:
{
 80121f4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80121f6:	4a09      	ldr	r2, [pc, #36]	; (801221c <USB_ActivateSetup+0x28>)
}
 80121f8:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80121fa:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 80121fe:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012200:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8012204:	4022      	ands	r2, r4
}
 8012206:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801220a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801220e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8012212:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012216:	604b      	str	r3, [r1, #4]
}
 8012218:	4770      	bx	lr
 801221a:	bf00      	nop
 801221c:	fffff800 	.word	0xfffff800

08012220 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012220:	4b14      	ldr	r3, [pc, #80]	; (8012274 <USB_EP0_OutStart+0x54>)
{
 8012222:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8012224:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8012226:	429c      	cmp	r4, r3
 8012228:	d81a      	bhi.n	8012260 <USB_EP0_OutStart+0x40>
 801222a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 801222e:	2300      	movs	r3, #0
  if (dma == 1U)
 8012230:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8012232:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012234:	6903      	ldr	r3, [r0, #16]
 8012236:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801223a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 801223c:	6903      	ldr	r3, [r0, #16]
 801223e:	f043 0318 	orr.w	r3, r3, #24
 8012242:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8012244:	6903      	ldr	r3, [r0, #16]
 8012246:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 801224a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 801224c:	d104      	bne.n	8012258 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 801224e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012250:	6803      	ldr	r3, [r0, #0]
 8012252:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8012256:	6003      	str	r3, [r0, #0]
}
 8012258:	2000      	movs	r0, #0
 801225a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801225e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012260:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8012264:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8012268:	2b00      	cmp	r3, #0
 801226a:	dae0      	bge.n	801222e <USB_EP0_OutStart+0xe>
}
 801226c:	2000      	movs	r0, #0
 801226e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	4f54300a 	.word	0x4f54300a

08012278 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8012278:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 801227a:	4903      	ldr	r1, [pc, #12]	; (8012288 <MX_FATFS_Init+0x10>)
 801227c:	4803      	ldr	r0, [pc, #12]	; (801228c <MX_FATFS_Init+0x14>)
 801227e:	f001 f973 	bl	8013568 <FATFS_LinkDriver>
 8012282:	4b03      	ldr	r3, [pc, #12]	; (8012290 <MX_FATFS_Init+0x18>)
 8012284:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8012286:	bd08      	pop	{r3, pc}
 8012288:	2001be7c 	.word	0x2001be7c
 801228c:	200002e4 	.word	0x200002e4
 8012290:	2001be80 	.word	0x2001be80

08012294 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8012294:	4b02      	ldr	r3, [pc, #8]	; (80122a0 <USER_initialize+0xc>)
 8012296:	2201      	movs	r2, #1
 8012298:	701a      	strb	r2, [r3, #0]
    return Stat;
 801229a:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 801229c:	4770      	bx	lr
 801229e:	bf00      	nop
 80122a0:	200002e0 	.word	0x200002e0

080122a4 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 80122a4:	2000      	movs	r0, #0
 80122a6:	4770      	bx	lr

080122a8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80122a8:	2001      	movs	r0, #1
 80122aa:	4770      	bx	lr

080122ac <USER_write>:
 80122ac:	2000      	movs	r0, #0
 80122ae:	4770      	bx	lr

080122b0 <USER_status>:
 80122b0:	4b02      	ldr	r3, [pc, #8]	; (80122bc <USER_status+0xc>)
 80122b2:	2201      	movs	r2, #1
 80122b4:	701a      	strb	r2, [r3, #0]
 80122b6:	7818      	ldrb	r0, [r3, #0]
 80122b8:	4770      	bx	lr
 80122ba:	bf00      	nop
 80122bc:	200002e0 	.word	0x200002e0

080122c0 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80122c0:	2100      	movs	r1, #0
{
 80122c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tcpip_init( NULL, NULL );
 80122c4:	4608      	mov	r0, r1
{
 80122c6:	b08f      	sub	sp, #60	; 0x3c
  tcpip_init( NULL, NULL );
 80122c8:	f003 fde2 	bl	8015e90 <tcpip_init>
  ipaddr.addr = 0;
  netmask.addr = 0;
  gw.addr = 0;

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80122cc:	4e1e      	ldr	r6, [pc, #120]	; (8012348 <MX_LWIP_Init+0x88>)
  ipaddr.addr = 0;
 80122ce:	2400      	movs	r4, #0
  gw.addr = 0;
 80122d0:	4b1e      	ldr	r3, [pc, #120]	; (801234c <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 80122d2:	491f      	ldr	r1, [pc, #124]	; (8012350 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 80122d4:	4a1f      	ldr	r2, [pc, #124]	; (8012354 <MX_LWIP_Init+0x94>)
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80122d6:	4820      	ldr	r0, [pc, #128]	; (8012358 <MX_LWIP_Init+0x98>)
 80122d8:	4d20      	ldr	r5, [pc, #128]	; (801235c <MX_LWIP_Init+0x9c>)
 80122da:	9002      	str	r0, [sp, #8]
 80122dc:	4630      	mov	r0, r6
 80122de:	9400      	str	r4, [sp, #0]
  gw.addr = 0;
 80122e0:	601c      	str	r4, [r3, #0]
  ipaddr.addr = 0;
 80122e2:	600c      	str	r4, [r1, #0]
  netmask.addr = 0;
 80122e4:	6014      	str	r4, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80122e6:	9501      	str	r5, [sp, #4]
 80122e8:	f006 fbc8 	bl	8018a7c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80122ec:	4630      	mov	r0, r6
 80122ee:	f006 fc6f 	bl	8018bd0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80122f2:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80122f6:	4630      	mov	r0, r6
  if (netif_is_link_up(&gnetif))
 80122f8:	075b      	lsls	r3, r3, #29
 80122fa:	d522      	bpl.n	8012342 <MX_LWIP_Init+0x82>
    netif_set_up(&gnetif);
 80122fc:	f006 fc6e 	bl	8018bdc <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8012300:	4917      	ldr	r1, [pc, #92]	; (8012360 <MX_LWIP_Init+0xa0>)

  link_arg.netif = &gnetif;
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012302:	ac07      	add	r4, sp, #28
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8012304:	4810      	ldr	r0, [pc, #64]	; (8012348 <MX_LWIP_Init+0x88>)
 8012306:	f006 fcf3 	bl	8018cf0 <netif_set_link_callback>
  osSemaphoreDef(Netif_SEM);
 801230a:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 801230c:	2101      	movs	r1, #1
 801230e:	a805      	add	r0, sp, #20
  link_arg.netif = &gnetif;
 8012310:	4f14      	ldr	r7, [pc, #80]	; (8012364 <MX_LWIP_Init+0xa4>)
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012312:	4d15      	ldr	r5, [pc, #84]	; (8012368 <MX_LWIP_Init+0xa8>)
  osSemaphoreDef(Netif_SEM);
 8012314:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8012318:	f001 fa0c 	bl	8013734 <osSemaphoreCreate>
 801231c:	4b13      	ldr	r3, [pc, #76]	; (801236c <MX_LWIP_Init+0xac>)
  link_arg.semaphore = Netif_LinkSemaphore;
 801231e:	6078      	str	r0, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8012320:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8012322:	603e      	str	r6, [r7, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8012324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8012328:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 801232c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8012330:	4639      	mov	r1, r7
 8012332:	a807      	add	r0, sp, #28
 8012334:	f001 f94a 	bl	80135cc <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8012338:	4803      	ldr	r0, [pc, #12]	; (8012348 <MX_LWIP_Init+0x88>)
 801233a:	f00d fa71 	bl	801f820 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801233e:	b00f      	add	sp, #60	; 0x3c
 8012340:	bdf0      	pop	{r4, r5, r6, r7, pc}
    netif_set_down(&gnetif);
 8012342:	f006 fc6d 	bl	8018c20 <netif_set_down>
 8012346:	e7db      	b.n	8012300 <MX_LWIP_Init+0x40>
 8012348:	2001c2f0 	.word	0x2001c2f0
 801234c:	2001c334 	.word	0x2001c334
 8012350:	2001c32c 	.word	0x2001c32c
 8012354:	2001c330 	.word	0x2001c330
 8012358:	08015e09 	.word	0x08015e09
 801235c:	08012675 	.word	0x08012675
 8012360:	08012855 	.word	0x08012855
 8012364:	2001c2e8 	.word	0x2001c2e8
 8012368:	08027408 	.word	0x08027408
 801236c:	20001d28 	.word	0x20001d28

08012370 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012370:	4b2d      	ldr	r3, [pc, #180]	; (8012428 <low_level_output+0xb8>)
{
 8012372:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8012376:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8012378:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 801237a:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 801237c:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 801237e:	2900      	cmp	r1, #0
 8012380:	d04f      	beq.n	8012422 <low_level_output+0xb2>
  bufferoffset = 0;
 8012382:	2500      	movs	r5, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012384:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8012388:	46a8      	mov	r8, r5
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801238a:	6822      	ldr	r2, [r4, #0]
 801238c:	2a00      	cmp	r2, #0
 801238e:	db1b      	blt.n	80123c8 <low_level_output+0x58>
      byteslefttocopy = q->len;
 8012390:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8012394:	1956      	adds	r6, r2, r5
 8012396:	454e      	cmp	r6, r9
 8012398:	d93e      	bls.n	8012418 <low_level_output+0xa8>
      payloadoffset = 0;
 801239a:	2700      	movs	r7, #0
 801239c:	e002      	b.n	80123a4 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801239e:	454e      	cmp	r6, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 80123a0:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80123a2:	d923      	bls.n	80123ec <low_level_output+0x7c>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80123a4:	eba9 0a05 	sub.w	sl, r9, r5
 80123a8:	f8db 1004 	ldr.w	r1, [fp, #4]
 80123ac:	1958      	adds	r0, r3, r5

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 80123ae:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80123b0:	4439      	add	r1, r7
 80123b2:	4652      	mov	r2, sl
 80123b4:	f00f fefc 	bl	80221b0 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80123b8:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 80123ba:	f2a6 56f4 	subw	r6, r6, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 80123be:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80123c0:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80123c2:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80123c4:	42ab      	cmp	r3, r5
 80123c6:	daea      	bge.n	801239e <low_level_output+0x2e>
        errval = ERR_USE;
 80123c8:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80123cc:	4b16      	ldr	r3, [pc, #88]	; (8012428 <low_level_output+0xb8>)
 80123ce:	f241 0214 	movw	r2, #4116	; 0x1014
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	5899      	ldr	r1, [r3, r2]
 80123d6:	0689      	lsls	r1, r1, #26
 80123d8:	d505      	bpl.n	80123e6 <low_level_output+0x76>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80123da:	2520      	movs	r5, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80123dc:	f241 0104 	movw	r1, #4100	; 0x1004
 80123e0:	2400      	movs	r4, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80123e2:	509d      	str	r5, [r3, r2]
    heth.Instance->DMATPDR = 0;
 80123e4:	505c      	str	r4, [r3, r1]
  }
  return errval;
}
 80123e6:	b003      	add	sp, #12
 80123e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80123ec:	4618      	mov	r0, r3
 80123ee:	4635      	mov	r5, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80123f0:	f8db 1004 	ldr.w	r1, [fp, #4]
 80123f4:	4632      	mov	r2, r6
 80123f6:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 80123f8:	44b0      	add	r8, r6
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80123fa:	4439      	add	r1, r7
 80123fc:	f00f fed8 	bl	80221b0 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8012400:	f8db b000 	ldr.w	fp, [fp]
 8012404:	9b01      	ldr	r3, [sp, #4]
 8012406:	f1bb 0f00 	cmp.w	fp, #0
 801240a:	d1be      	bne.n	801238a <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 801240c:	4641      	mov	r1, r8
 801240e:	4806      	ldr	r0, [pc, #24]	; (8012428 <low_level_output+0xb8>)
 8012410:	f7f6 fdf8 	bl	8009004 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8012414:	2000      	movs	r0, #0
 8012416:	e7d9      	b.n	80123cc <low_level_output+0x5c>
 8012418:	1958      	adds	r0, r3, r5
      payloadoffset = 0;
 801241a:	2700      	movs	r7, #0
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801241c:	4635      	mov	r5, r6
      byteslefttocopy = q->len;
 801241e:	4616      	mov	r6, r2
 8012420:	e7e6      	b.n	80123f0 <low_level_output+0x80>
  uint32_t framelength = 0;
 8012422:	4688      	mov	r8, r1
 8012424:	e7f2      	b.n	801240c <low_level_output+0x9c>
 8012426:	bf00      	nop
 8012428:	2001dc08 	.word	0x2001dc08

0801242c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 801242c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012430:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8012544 <ethernetif_input+0x118>
 8012434:	b083      	sub	sp, #12
 8012436:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8012438:	4b40      	ldr	r3, [pc, #256]	; (801253c <ethernetif_input+0x110>)
 801243a:	f04f 31ff 	mov.w	r1, #4294967295
 801243e:	6818      	ldr	r0, [r3, #0]
 8012440:	f001 f99e 	bl	8013780 <osSemaphoreWait>
 8012444:	2800      	cmp	r0, #0
 8012446:	d1f7      	bne.n	8012438 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8012448:	483d      	ldr	r0, [pc, #244]	; (8012540 <ethernetif_input+0x114>)
 801244a:	f00f faa9 	bl	80219a0 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 801244e:	483d      	ldr	r0, [pc, #244]	; (8012544 <ethernetif_input+0x118>)
 8012450:	f7f6 fe58 	bl	8009104 <HAL_ETH_GetReceivedFrame_IT>
 8012454:	4604      	mov	r4, r0
 8012456:	2800      	cmp	r0, #0
 8012458:	d167      	bne.n	801252a <ethernetif_input+0xfe>
  len = heth.RxFrameInfos.length;
 801245a:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 801245e:	bb59      	cbnz	r1, 80124b8 <ethernetif_input+0x8c>
  struct pbuf *p = NULL;
 8012460:	2300      	movs	r3, #0
 8012462:	9300      	str	r3, [sp, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8012464:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8012468:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801246c:	b140      	cbz	r0, 8012480 <ethernetif_input+0x54>
 801246e:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8012470:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8012472:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8012474:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8012478:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801247a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801247c:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801247e:	d1f7      	bne.n	8012470 <ethernetif_input+0x44>
    heth.RxFrameInfos.SegCount =0;
 8012480:	2100      	movs	r1, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8012482:	f8d9 3000 	ldr.w	r3, [r9]
 8012486:	f241 0214 	movw	r2, #4116	; 0x1014
    heth.RxFrameInfos.SegCount =0;
 801248a:	f8c9 1038 	str.w	r1, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 801248e:	5899      	ldr	r1, [r3, r2]
 8012490:	0609      	lsls	r1, r1, #24
 8012492:	d505      	bpl.n	80124a0 <ethernetif_input+0x74>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8012494:	2080      	movs	r0, #128	; 0x80
    heth.Instance->DMARPDR = 0;
 8012496:	f241 0108 	movw	r1, #4104	; 0x1008
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801249a:	5098      	str	r0, [r3, r2]
    heth.Instance->DMARPDR = 0;
 801249c:	2200      	movs	r2, #0
 801249e:	505a      	str	r2, [r3, r1]
        p = low_level_input( netif );
        if   (p != NULL)
 80124a0:	9800      	ldr	r0, [sp, #0]
 80124a2:	2800      	cmp	r0, #0
 80124a4:	d041      	beq.n	801252a <ethernetif_input+0xfe>
        {
          if (netif->input( p, netif) != ERR_OK )
 80124a6:	9901      	ldr	r1, [sp, #4]
 80124a8:	690b      	ldr	r3, [r1, #16]
 80124aa:	4798      	blx	r3
 80124ac:	2800      	cmp	r0, #0
 80124ae:	d140      	bne.n	8012532 <ethernetif_input+0x106>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 80124b0:	4823      	ldr	r0, [pc, #140]	; (8012540 <ethernetif_input+0x114>)
 80124b2:	f00f fa7b 	bl	80219ac <sys_mutex_unlock>
      } while(p!=NULL);
 80124b6:	e7c7      	b.n	8012448 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80124b8:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80124bc:	f8d9 5040 	ldr.w	r5, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 80124c0:	f006 fd66 	bl	8018f90 <pbuf_alloc>
  if (p != NULL)
 80124c4:	4606      	mov	r6, r0
 80124c6:	9000      	str	r0, [sp, #0]
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d0c9      	beq.n	8012460 <ethernetif_input+0x34>
    bufferoffset = 0;
 80124cc:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 80124ce:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80124d0:	f240 58f4 	movw	r8, #1524	; 0x5f4
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 80124d4:	46ab      	mov	fp, r5
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80124d6:	1854      	adds	r4, r2, r1
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80124d8:	f8d9 7030 	ldr.w	r7, [r9, #48]	; 0x30
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80124dc:	4544      	cmp	r4, r8
 80124de:	d921      	bls.n	8012524 <ethernetif_input+0xf8>
      payloadoffset = 0;
 80124e0:	2500      	movs	r5, #0
 80124e2:	465b      	mov	r3, fp
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80124e4:	eba8 0a01 	sub.w	sl, r8, r1
 80124e8:	6870      	ldr	r0, [r6, #4]
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80124ea:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80124ee:	4419      	add	r1, r3
 80124f0:	4428      	add	r0, r5
 80124f2:	4652      	mov	r2, sl
 80124f4:	f00f fe5c 	bl	80221b0 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80124f8:	68ff      	ldr	r7, [r7, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80124fa:	4544      	cmp	r4, r8
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80124fc:	4455      	add	r5, sl
        bufferoffset = 0;
 80124fe:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8012502:	68bb      	ldr	r3, [r7, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8012504:	d8ee      	bhi.n	80124e4 <ethernetif_input+0xb8>
 8012506:	469b      	mov	fp, r3
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8012508:	4619      	mov	r1, r3
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 801250a:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 801250c:	6870      	ldr	r0, [r6, #4]
 801250e:	4428      	add	r0, r5
 8012510:	f00f fe4e 	bl	80221b0 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8012514:	6836      	ldr	r6, [r6, #0]
 8012516:	2e00      	cmp	r6, #0
 8012518:	d0a4      	beq.n	8012464 <ethernetif_input+0x38>
 801251a:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 801251c:	8972      	ldrh	r2, [r6, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 801251e:	1854      	adds	r4, r2, r1
 8012520:	4544      	cmp	r4, r8
 8012522:	d8dd      	bhi.n	80124e0 <ethernetif_input+0xb4>
 8012524:	4459      	add	r1, fp
      payloadoffset = 0;
 8012526:	2500      	movs	r5, #0
 8012528:	e7f0      	b.n	801250c <ethernetif_input+0xe0>
        UNLOCK_TCPIP_CORE();
 801252a:	4805      	ldr	r0, [pc, #20]	; (8012540 <ethernetif_input+0x114>)
 801252c:	f00f fa3e 	bl	80219ac <sys_mutex_unlock>
      } while(p!=NULL);
 8012530:	e782      	b.n	8012438 <ethernetif_input+0xc>
            pbuf_free(p);
 8012532:	9800      	ldr	r0, [sp, #0]
 8012534:	f006 fcbe 	bl	8018eb4 <pbuf_free>
 8012538:	e7ba      	b.n	80124b0 <ethernetif_input+0x84>
 801253a:	bf00      	nop
 801253c:	20001d2c 	.word	0x20001d2c
 8012540:	2001f460 	.word	0x2001f460
 8012544:	2001dc08 	.word	0x2001dc08

08012548 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8012548:	4b42      	ldr	r3, [pc, #264]	; (8012654 <HAL_ETH_MspInit+0x10c>)
 801254a:	6802      	ldr	r2, [r0, #0]
{
 801254c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 801254e:	429a      	cmp	r2, r3
{
 8012550:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012552:	f04f 0400 	mov.w	r4, #0
 8012556:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801255a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801255e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8012560:	d001      	beq.n	8012566 <HAL_ETH_MspInit+0x1e>
}
 8012562:	b00d      	add	sp, #52	; 0x34
 8012564:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8012566:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801256a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801256c:	2032      	movs	r0, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801256e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8012570:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012572:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8012574:	a907      	add	r1, sp, #28
    __HAL_RCC_ETH_CLK_ENABLE();
 8012576:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 801257a:	631a      	str	r2, [r3, #48]	; 0x30
 801257c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801257e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8012582:	9200      	str	r2, [sp, #0]
 8012584:	9a00      	ldr	r2, [sp, #0]
 8012586:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012588:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 801258c:	631a      	str	r2, [r3, #48]	; 0x30
 801258e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012590:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8012594:	9201      	str	r2, [sp, #4]
 8012596:	9a01      	ldr	r2, [sp, #4]
 8012598:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801259a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 801259e:	631a      	str	r2, [r3, #48]	; 0x30
 80125a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125a2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80125a6:	9202      	str	r2, [sp, #8]
 80125a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80125aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125ac:	f042 0204 	orr.w	r2, r2, #4
 80125b0:	631a      	str	r2, [r3, #48]	; 0x30
 80125b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125b4:	f002 0204 	and.w	r2, r2, #4
 80125b8:	9203      	str	r2, [sp, #12]
 80125ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80125bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125be:	f042 0201 	orr.w	r2, r2, #1
 80125c2:	631a      	str	r2, [r3, #48]	; 0x30
 80125c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125c6:	f002 0201 	and.w	r2, r2, #1
 80125ca:	9204      	str	r2, [sp, #16]
 80125cc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80125ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125d0:	433a      	orrs	r2, r7
 80125d2:	631a      	str	r2, [r3, #48]	; 0x30
 80125d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125d6:	403a      	ands	r2, r7
 80125d8:	9205      	str	r2, [sp, #20]
 80125da:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80125dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80125e2:	631a      	str	r2, [r3, #48]	; 0x30
 80125e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80125e6:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80125e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80125ec:	481a      	ldr	r0, [pc, #104]	; (8012658 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125ee:	9409      	str	r4, [sp, #36]	; 0x24
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80125f0:	9306      	str	r3, [sp, #24]
 80125f2:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80125f4:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80125f6:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80125fa:	f7f7 facb 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80125fe:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012600:	a907      	add	r1, sp, #28
 8012602:	4816      	ldr	r0, [pc, #88]	; (801265c <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8012604:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012606:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012608:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801260a:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801260e:	f7f7 fac1 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8012612:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8012616:	a907      	add	r1, sp, #28
 8012618:	4811      	ldr	r0, [pc, #68]	; (8012660 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 801261a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801261c:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801261e:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012620:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8012624:	f7f7 fab6 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8012628:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801262c:	a907      	add	r1, sp, #28
 801262e:	480d      	ldr	r0, [pc, #52]	; (8012664 <HAL_ETH_MspInit+0x11c>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8012630:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012632:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012634:	9409      	str	r4, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8012636:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801263a:	f7f7 faab 	bl	8009b94 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 801263e:	4622      	mov	r2, r4
 8012640:	2106      	movs	r1, #6
 8012642:	203d      	movs	r0, #61	; 0x3d
 8012644:	f7f4 ffdc 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8012648:	203d      	movs	r0, #61	; 0x3d
 801264a:	f7f5 f823 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 801264e:	b00d      	add	sp, #52	; 0x34
 8012650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012652:	bf00      	nop
 8012654:	40028000 	.word	0x40028000
 8012658:	40020800 	.word	0x40020800
 801265c:	40020000 	.word	0x40020000
 8012660:	40020400 	.word	0x40020400
 8012664:	40021800 	.word	0x40021800

08012668 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8012668:	4b01      	ldr	r3, [pc, #4]	; (8012670 <HAL_ETH_RxCpltCallback+0x8>)
 801266a:	6818      	ldr	r0, [r3, #0]
 801266c:	f001 b8b4 	b.w	80137d8 <osSemaphoreRelease>
 8012670:	20001d2c 	.word	0x20001d2c

08012674 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8012674:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8012676:	4604      	mov	r4, r0
{
 8012678:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801267a:	2800      	cmp	r0, #0
 801267c:	f000 8097 	beq.w	80127ae <ethernetif_init+0x13a>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8012680:	f247 4173 	movw	r1, #29811	; 0x7473
  heth.Instance = ETH;
 8012684:	4d4e      	ldr	r5, [pc, #312]	; (80127c0 <ethernetif_init+0x14c>)
  uint32_t regvalue = 0;
 8012686:	2600      	movs	r6, #0
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8012688:	484e      	ldr	r0, [pc, #312]	; (80127c4 <ethernetif_init+0x150>)
  netif->name[0] = IFNAME0;
 801268a:	86e1      	strh	r1, [r4, #54]	; 0x36
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801268c:	f44f 6700 	mov.w	r7, #2048	; 0x800
  heth.Instance = ETH;
 8012690:	4a4d      	ldr	r2, [pc, #308]	; (80127c8 <ethernetif_init+0x154>)
  heth.Init.Speed = ETH_SPEED_100M;
 8012692:	f44f 4e80 	mov.w	lr, #16384	; 0x4000
  MACAddr[0] = 0x00;
 8012696:	4b4d      	ldr	r3, [pc, #308]	; (80127cc <ethernetif_init+0x158>)
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8012698:	494d      	ldr	r1, [pc, #308]	; (80127d0 <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 801269a:	9600      	str	r6, [sp, #0]
  MACAddr[0] = 0x00;
 801269c:	9301      	str	r3, [sp, #4]
  heth.Instance = ETH;
 801269e:	602a      	str	r2, [r5, #0]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80126a0:	6803      	ldr	r3, [r0, #0]
 80126a2:	4a4c      	ldr	r2, [pc, #304]	; (80127d4 <ethernetif_init+0x160>)
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80126a4:	822e      	strh	r6, [r5, #16]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80126a6:	680e      	ldr	r6, [r1, #0]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80126a8:	f8df c150 	ldr.w	ip, [pc, #336]	; 80127fc <ethernetif_init+0x188>
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80126ac:	4073      	eors	r3, r6
 80126ae:	6816      	ldr	r6, [r2, #0]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 80126b0:	60ef      	str	r7, [r5, #12]
  heth.Init.MACAddr = &MACAddr[0];
 80126b2:	af01      	add	r7, sp, #4
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80126b4:	4073      	eors	r3, r6
  heth.Init.Speed = ETH_SPEED_100M;
 80126b6:	f8c5 e008 	str.w	lr, [r5, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80126ba:	f44f 0600 	mov.w	r6, #8388608	; 0x800000
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 80126be:	f88d 3009 	strb.w	r3, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80126c2:	6803      	ldr	r3, [r0, #0]
 80126c4:	6809      	ldr	r1, [r1, #0]
 80126c6:	6810      	ldr	r0, [r2, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80126c8:	2201      	movs	r2, #1
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80126ca:	404b      	eors	r3, r1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80126cc:	4942      	ldr	r1, [pc, #264]	; (80127d8 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 80126ce:	f8c4 c014 	str.w	ip, [r4, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80126d2:	4043      	eors	r3, r0
  netif->linkoutput = low_level_output;
 80126d4:	61a1      	str	r1, [r4, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80126d6:	4628      	mov	r0, r5
  heth.Init.MACAddr = &MACAddr[0];
 80126d8:	616f      	str	r7, [r5, #20]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 80126da:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80126de:	622e      	str	r6, [r5, #32]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80126e0:	606a      	str	r2, [r5, #4]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 80126e2:	e9c5 2206 	strd	r2, r2, [r5, #24]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 80126e6:	f7f6 fe2d 	bl	8009344 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 80126ea:	b928      	cbnz	r0, 80126f8 <ethernetif_init+0x84>
    netif->flags |= NETIF_FLAG_LINK_UP;
 80126ec:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80126f0:	f043 0304 	orr.w	r3, r3, #4
 80126f4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80126f8:	2304      	movs	r3, #4
 80126fa:	4a38      	ldr	r2, [pc, #224]	; (80127dc <ethernetif_init+0x168>)
 80126fc:	4938      	ldr	r1, [pc, #224]	; (80127e0 <ethernetif_init+0x16c>)
  osSemaphoreDef(SEM);
 80126fe:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8012700:	482f      	ldr	r0, [pc, #188]	; (80127c0 <ethernetif_init+0x14c>)
 8012702:	f7f6 fbf1 	bl	8008ee8 <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8012706:	2304      	movs	r3, #4
 8012708:	4a36      	ldr	r2, [pc, #216]	; (80127e4 <ethernetif_init+0x170>)
 801270a:	4937      	ldr	r1, [pc, #220]	; (80127e8 <ethernetif_init+0x174>)
 801270c:	482c      	ldr	r0, [pc, #176]	; (80127c0 <ethernetif_init+0x14c>)
 801270e:	f7f6 fc3b 	bl	8008f88 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012712:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012714:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012716:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 801271a:	f240 55dc 	movw	r5, #1500	; 0x5dc
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801271e:	2101      	movs	r1, #1
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8012720:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8012724:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8012728:	781e      	ldrb	r6, [r3, #0]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801272a:	a803      	add	r0, sp, #12
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801272c:	f884 602e 	strb.w	r6, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8012730:	785e      	ldrb	r6, [r3, #1]
 8012732:	f884 602f 	strb.w	r6, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8012736:	789e      	ldrb	r6, [r3, #2]
 8012738:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801273c:	78de      	ldrb	r6, [r3, #3]
  osSemaphoreDef(SEM);
 801273e:	9703      	str	r7, [sp, #12]
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8012740:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8012744:	791e      	ldrb	r6, [r3, #4]
 8012746:	f884 6032 	strb.w	r6, [r4, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801274a:	795b      	ldrb	r3, [r3, #5]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801274c:	4e27      	ldr	r6, [pc, #156]	; (80127ec <ethernetif_init+0x178>)
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801274e:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8012752:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  netif->mtu = 1500;
 8012756:	85a5      	strh	r5, [r4, #44]	; 0x2c
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8012758:	ad05      	add	r5, sp, #20
  osSemaphoreDef(SEM);
 801275a:	9704      	str	r7, [sp, #16]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801275c:	f000 ffea 	bl	8013734 <osSemaphoreCreate>
 8012760:	4686      	mov	lr, r0
 8012762:	f8df c09c 	ldr.w	ip, [pc, #156]	; 8012800 <ethernetif_init+0x18c>
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8012766:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8012768:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801276a:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801276e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8012772:	4621      	mov	r1, r4
 8012774:	a805      	add	r0, sp, #20
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8012776:	f8cc e000 	str.w	lr, [ip]
  osThreadCreate (osThread(EthIf), netif);
 801277a:	f000 ff27 	bl	80135cc <osThreadCreate>
  HAL_ETH_Start(&heth);
 801277e:	4810      	ldr	r0, [pc, #64]	; (80127c0 <ethernetif_init+0x14c>)
 8012780:	f7f6 ff34 	bl	80095ec <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8012784:	466a      	mov	r2, sp
 8012786:	211d      	movs	r1, #29
 8012788:	480d      	ldr	r0, [pc, #52]	; (80127c0 <ethernetif_init+0x14c>)
 801278a:	f7f6 fd49 	bl	8009220 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801278e:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8012790:	211d      	movs	r1, #29
 8012792:	480b      	ldr	r0, [pc, #44]	; (80127c0 <ethernetif_init+0x14c>)
  regvalue |= (PHY_ISFR_INT4);
 8012794:	f042 020b 	orr.w	r2, r2, #11
 8012798:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801279a:	f7f6 fd8b 	bl	80092b4 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 801279e:	466a      	mov	r2, sp
 80127a0:	211d      	movs	r1, #29
 80127a2:	4807      	ldr	r0, [pc, #28]	; (80127c0 <ethernetif_init+0x14c>)
 80127a4:	f7f6 fd3c 	bl	8009220 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80127a8:	4638      	mov	r0, r7
 80127aa:	b00d      	add	sp, #52	; 0x34
 80127ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80127ae:	4b10      	ldr	r3, [pc, #64]	; (80127f0 <ethernetif_init+0x17c>)
 80127b0:	f240 223a 	movw	r2, #570	; 0x23a
 80127b4:	490f      	ldr	r1, [pc, #60]	; (80127f4 <ethernetif_init+0x180>)
 80127b6:	4810      	ldr	r0, [pc, #64]	; (80127f8 <ethernetif_init+0x184>)
 80127b8:	f010 fc94 	bl	80230e4 <iprintf>
 80127bc:	e760      	b.n	8012680 <ethernetif_init+0xc>
 80127be:	bf00      	nop
 80127c0:	2001dc08 	.word	0x2001dc08
 80127c4:	1ff0f420 	.word	0x1ff0f420
 80127c8:	40028000 	.word	0x40028000
 80127cc:	00e18000 	.word	0x00e18000
 80127d0:	1ff0f424 	.word	0x1ff0f424
 80127d4:	1ff0f428 	.word	0x1ff0f428
 80127d8:	08012371 	.word	0x08012371
 80127dc:	2001dc50 	.word	0x2001dc50
 80127e0:	2001c338 	.word	0x2001c338
 80127e4:	2001c3b8 	.word	0x2001c3b8
 80127e8:	2001db88 	.word	0x2001db88
 80127ec:	08027424 	.word	0x08027424
 80127f0:	08029b74 	.word	0x08029b74
 80127f4:	08029b90 	.word	0x08029b90
 80127f8:	08029ba0 	.word	0x08029ba0
 80127fc:	08020389 	.word	0x08020389
 8012800:	20001d2c 	.word	0x20001d2c

08012804 <sys_now>:
 8012804:	f7f4 baa2 	b.w	8006d4c <HAL_GetTick>

08012808 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8012808:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 801280a:	2300      	movs	r3, #0
{
 801280c:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801280e:	4d0f      	ldr	r5, [pc, #60]	; (801284c <ethernetif_set_link+0x44>)
{
 8012810:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 8012812:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8012814:	e003      	b.n	801281e <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8012816:	b1b3      	cbz	r3, 8012846 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8012818:	20c8      	movs	r0, #200	; 0xc8
 801281a:	f000 ff03 	bl	8013624 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801281e:	aa01      	add	r2, sp, #4
 8012820:	2101      	movs	r1, #1
 8012822:	4628      	mov	r0, r5
 8012824:	f7f6 fcfc 	bl	8009220 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8012828:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 801282a:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 801282c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 8012830:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8012834:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8012836:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8012838:	d4ed      	bmi.n	8012816 <ethernetif_set_link+0xe>
 801283a:	b113      	cbz	r3, 8012842 <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 801283c:	f006 fa18 	bl	8018c70 <netif_set_link_up>
 8012840:	e7ea      	b.n	8012818 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8012842:	0753      	lsls	r3, r2, #29
 8012844:	d5e8      	bpl.n	8012818 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8012846:	f006 fa39 	bl	8018cbc <netif_set_link_down>
 801284a:	e7e5      	b.n	8012818 <ethernetif_set_link+0x10>
 801284c:	2001dc08 	.word	0x2001dc08

08012850 <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8012850:	4770      	bx	lr
 8012852:	bf00      	nop

08012854 <ethernetif_update_config>:
{
 8012854:	b570      	push	{r4, r5, r6, lr}
  if(netif_is_link_up(netif))
 8012856:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 801285a:	b082      	sub	sp, #8
  __IO uint32_t tickstart = 0;
 801285c:	2100      	movs	r1, #0
{
 801285e:	4604      	mov	r4, r0
  if(netif_is_link_up(netif))
 8012860:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 8012862:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8012864:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8012866:	d539      	bpl.n	80128dc <ethernetif_update_config+0x88>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8012868:	4d32      	ldr	r5, [pc, #200]	; (8012934 <ethernetif_update_config+0xe0>)
 801286a:	686b      	ldr	r3, [r5, #4]
 801286c:	b9e3      	cbnz	r3, 80128a8 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801286e:	68ab      	ldr	r3, [r5, #8]
 8012870:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8012874:	d141      	bne.n	80128fa <ethernetif_update_config+0xa6>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8012876:	68eb      	ldr	r3, [r5, #12]
 8012878:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 801287c:	d136      	bne.n	80128ec <ethernetif_update_config+0x98>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801287e:	68aa      	ldr	r2, [r5, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8012880:	08db      	lsrs	r3, r3, #3
 8012882:	2100      	movs	r1, #0
 8012884:	482b      	ldr	r0, [pc, #172]	; (8012934 <ethernetif_update_config+0xe0>)
 8012886:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 801288a:	b292      	uxth	r2, r2
 801288c:	f7f6 fd12 	bl	80092b4 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8012890:	2100      	movs	r1, #0
 8012892:	4828      	ldr	r0, [pc, #160]	; (8012934 <ethernetif_update_config+0xe0>)
 8012894:	f7f6 ff2a 	bl	80096ec <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8012898:	4826      	ldr	r0, [pc, #152]	; (8012934 <ethernetif_update_config+0xe0>)
 801289a:	f7f6 fea7 	bl	80095ec <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 801289e:	4620      	mov	r0, r4
 80128a0:	f7ff ffd6 	bl	8012850 <ethernetif_notify_conn_changed>
}
 80128a4:	b002      	add	sp, #8
 80128a6:	bd70      	pop	{r4, r5, r6, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80128a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80128ac:	4628      	mov	r0, r5
 80128ae:	f7f6 fd01 	bl	80092b4 <HAL_ETH_WritePHYRegister>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80128b2:	462e      	mov	r6, r5
      tickstart = HAL_GetTick();
 80128b4:	f7f4 fa4a 	bl	8006d4c <HAL_GetTick>
 80128b8:	9000      	str	r0, [sp, #0]
 80128ba:	e002      	b.n	80128c2 <ethernetif_update_config+0x6e>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80128bc:	9b01      	ldr	r3, [sp, #4]
 80128be:	069a      	lsls	r2, r3, #26
 80128c0:	d425      	bmi.n	801290e <ethernetif_update_config+0xba>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80128c2:	aa01      	add	r2, sp, #4
 80128c4:	2101      	movs	r1, #1
 80128c6:	4630      	mov	r0, r6
 80128c8:	f7f6 fcaa 	bl	8009220 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80128cc:	f7f4 fa3e 	bl	8006d4c <HAL_GetTick>
 80128d0:	9b00      	ldr	r3, [sp, #0]
 80128d2:	1ac3      	subs	r3, r0, r3
 80128d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80128d8:	d9f0      	bls.n	80128bc <ethernetif_update_config+0x68>
 80128da:	e7c8      	b.n	801286e <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 80128dc:	4815      	ldr	r0, [pc, #84]	; (8012934 <ethernetif_update_config+0xe0>)
 80128de:	f7f6 fec5 	bl	800966c <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80128e2:	4620      	mov	r0, r4
 80128e4:	f7ff ffb4 	bl	8012850 <ethernetif_notify_conn_changed>
}
 80128e8:	b002      	add	sp, #8
 80128ea:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80128ec:	f240 21e3 	movw	r1, #739	; 0x2e3
 80128f0:	4811      	ldr	r0, [pc, #68]	; (8012938 <ethernetif_update_config+0xe4>)
 80128f2:	f7f1 fa23 	bl	8003d3c <assert_failed>
 80128f6:	68eb      	ldr	r3, [r5, #12]
 80128f8:	e7c1      	b.n	801287e <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80128fa:	f240 21e2 	movw	r1, #738	; 0x2e2
 80128fe:	480e      	ldr	r0, [pc, #56]	; (8012938 <ethernetif_update_config+0xe4>)
 8012900:	f7f1 fa1c 	bl	8003d3c <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8012904:	68eb      	ldr	r3, [r5, #12]
 8012906:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 801290a:	d0b8      	beq.n	801287e <ethernetif_update_config+0x2a>
 801290c:	e7ee      	b.n	80128ec <ethernetif_update_config+0x98>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 801290e:	aa01      	add	r2, sp, #4
 8012910:	2110      	movs	r1, #16
 8012912:	4808      	ldr	r0, [pc, #32]	; (8012934 <ethernetif_update_config+0xe0>)
 8012914:	f7f6 fc84 	bl	8009220 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8012918:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 801291a:	f013 0204 	ands.w	r2, r3, #4
 801291e:	bf18      	it	ne
 8012920:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 8012924:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8012926:	bf4c      	ite	mi
 8012928:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 801292a:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 801292e:	60ea      	str	r2, [r5, #12]
 8012930:	60ab      	str	r3, [r5, #8]
 8012932:	e7ad      	b.n	8012890 <ethernetif_update_config+0x3c>
 8012934:	2001dc08 	.word	0x2001dc08
 8012938:	08029b74 	.word	0x08029b74

0801293c <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801293c:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8012940:	b183      	cbz	r3, 8012964 <USBD_CDC_EP0_RxReady+0x28>
{
 8012942:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012944:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012948:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 801294c:	28ff      	cmp	r0, #255	; 0xff
 801294e:	d007      	beq.n	8012960 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	4621      	mov	r1, r4
 8012954:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8012958:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 801295a:	23ff      	movs	r3, #255	; 0xff
 801295c:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 8012960:	2000      	movs	r0, #0
 8012962:	bd10      	pop	{r4, pc}
 8012964:	2000      	movs	r0, #0
 8012966:	4770      	bx	lr

08012968 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012968:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801296a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 801296c:	4801      	ldr	r0, [pc, #4]	; (8012974 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801296e:	801a      	strh	r2, [r3, #0]
}
 8012970:	4770      	bx	lr
 8012972:	bf00      	nop
 8012974:	20000330 	.word	0x20000330

08012978 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012978:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801297a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 801297c:	4801      	ldr	r0, [pc, #4]	; (8012984 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801297e:	801a      	strh	r2, [r3, #0]
}
 8012980:	4770      	bx	lr
 8012982:	bf00      	nop
 8012984:	20000374 	.word	0x20000374

08012988 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012988:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801298a:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 801298c:	4801      	ldr	r0, [pc, #4]	; (8012994 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801298e:	801a      	strh	r2, [r3, #0]
}
 8012990:	4770      	bx	lr
 8012992:	bf00      	nop
 8012994:	200003c4 	.word	0x200003c4

08012998 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012998:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801299a:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 801299c:	4801      	ldr	r0, [pc, #4]	; (80129a4 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801299e:	801a      	strh	r2, [r3, #0]
}
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	200003b8 	.word	0x200003b8

080129a8 <USBD_CDC_DataOut>:
{
 80129a8:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80129aa:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80129ae:	b175      	cbz	r5, 80129ce <USBD_CDC_DataOut+0x26>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80129b0:	4604      	mov	r4, r0
 80129b2:	f00f fa65 	bl	8021e80 <USBD_LL_GetRxDataSize>
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80129b6:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80129ba:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80129be:	f8c5 020c 	str.w	r0, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80129c2:	68db      	ldr	r3, [r3, #12]
 80129c4:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80129c8:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80129ca:	2000      	movs	r0, #0
}
 80129cc:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80129ce:	2003      	movs	r0, #3
}
 80129d0:	bd38      	pop	{r3, r4, r5, pc}
 80129d2:	bf00      	nop

080129d4 <USBD_CDC_DataIn>:
{
 80129d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (pdev->pClassData == NULL)
 80129d6:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
 80129da:	b347      	cbz	r7, 8012a2e <USBD_CDC_DataIn+0x5a>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80129dc:	eb01 0681 	add.w	r6, r1, r1, lsl #2
 80129e0:	4605      	mov	r5, r0
 80129e2:	460a      	mov	r2, r1
 80129e4:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80129e8:	69b3      	ldr	r3, [r6, #24]
 80129ea:	b163      	cbz	r3, 8012a06 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80129ec:	ebc1 0cc1 	rsb	ip, r1, r1, lsl #3
 80129f0:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80129f4:	eb04 048c 	add.w	r4, r4, ip, lsl #2
 80129f8:	f8d4 c044 	ldr.w	ip, [r4, #68]	; 0x44
 80129fc:	fbb3 f4fc 	udiv	r4, r3, ip
 8012a00:	fb0c 3414 	mls	r4, ip, r4, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8012a04:	b164      	cbz	r4, 8012a20 <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012a06:	f8d5 32c0 	ldr.w	r3, [r5, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8012a0a:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012a0c:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8012a10:	f8d7 0208 	ldr.w	r0, [r7, #520]	; 0x208
 8012a14:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8012a16:	f8c7 4214 	str.w	r4, [r7, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012a1a:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8012a1c:	4620      	mov	r0, r4
}
 8012a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012a20:	4623      	mov	r3, r4
 8012a22:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8012a24:	61b4      	str	r4, [r6, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012a26:	f00f fa0f 	bl	8021e48 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8012a2a:	4620      	mov	r0, r4
}
 8012a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (uint8_t)USBD_FAIL;
 8012a2e:	2003      	movs	r0, #3
}
 8012a30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a32:	bf00      	nop

08012a34 <USBD_CDC_Setup>:
{
 8012a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a38:	780f      	ldrb	r7, [r1, #0]
{
 8012a3a:	b082      	sub	sp, #8
  uint8_t ifalt = 0U;
 8012a3c:	2300      	movs	r3, #0
{
 8012a3e:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a40:	f017 0660 	ands.w	r6, r7, #96	; 0x60
{
 8012a44:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012a46:	f8d0 82bc 	ldr.w	r8, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8012a4a:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 8012a4e:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012a52:	d01c      	beq.n	8012a8e <USBD_CDC_Setup+0x5a>
 8012a54:	2e20      	cmp	r6, #32
 8012a56:	d111      	bne.n	8012a7c <USBD_CDC_Setup+0x48>
    if (req->wLength != 0U)
 8012a58:	88ca      	ldrh	r2, [r1, #6]
 8012a5a:	2a00      	cmp	r2, #0
 8012a5c:	d036      	beq.n	8012acc <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 8012a5e:	0639      	lsls	r1, r7, #24
 8012a60:	d557      	bpl.n	8012b12 <USBD_CDC_Setup+0xde>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012a62:	f8d0 62c0 	ldr.w	r6, [r0, #704]	; 0x2c0
 8012a66:	4641      	mov	r1, r8
 8012a68:	7860      	ldrb	r0, [r4, #1]
 8012a6a:	68b7      	ldr	r7, [r6, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8012a6c:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012a6e:	47b8      	blx	r7
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012a70:	88e2      	ldrh	r2, [r4, #6]
 8012a72:	4641      	mov	r1, r8
 8012a74:	4628      	mov	r0, r5
 8012a76:	f000 fd2f 	bl	80134d8 <USBD_CtlSendData>
 8012a7a:	e004      	b.n	8012a86 <USBD_CDC_Setup+0x52>
      USBD_CtlError(pdev, req);
 8012a7c:	4621      	mov	r1, r4
 8012a7e:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 8012a80:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8012a82:	f000 fcf7 	bl	8013474 <USBD_CtlError>
}
 8012a86:	4630      	mov	r0, r6
 8012a88:	b002      	add	sp, #8
 8012a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (req->bRequest)
 8012a8e:	784b      	ldrb	r3, [r1, #1]
 8012a90:	2b0b      	cmp	r3, #11
 8012a92:	d8f3      	bhi.n	8012a7c <USBD_CDC_Setup+0x48>
 8012a94:	a201      	add	r2, pc, #4	; (adr r2, 8012a9c <USBD_CDC_Setup+0x68>)
 8012a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012a9a:	bf00      	nop
 8012a9c:	08012ae1 	.word	0x08012ae1
 8012aa0:	08012a87 	.word	0x08012a87
 8012aa4:	08012a7d 	.word	0x08012a7d
 8012aa8:	08012a7d 	.word	0x08012a7d
 8012aac:	08012a7d 	.word	0x08012a7d
 8012ab0:	08012a7d 	.word	0x08012a7d
 8012ab4:	08012a7d 	.word	0x08012a7d
 8012ab8:	08012a7d 	.word	0x08012a7d
 8012abc:	08012a7d 	.word	0x08012a7d
 8012ac0:	08012a7d 	.word	0x08012a7d
 8012ac4:	08012aff 	.word	0x08012aff
 8012ac8:	08012af5 	.word	0x08012af5
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012acc:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 8012ad0:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8012ad2:	7848      	ldrb	r0, [r1, #1]
 8012ad4:	689b      	ldr	r3, [r3, #8]
 8012ad6:	4798      	blx	r3
}
 8012ad8:	4630      	mov	r0, r6
 8012ada:	b002      	add	sp, #8
 8012adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ae0:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012ae4:	2a03      	cmp	r2, #3
 8012ae6:	d01e      	beq.n	8012b26 <USBD_CDC_Setup+0xf2>
        USBD_CtlError(pdev, req);
 8012ae8:	4621      	mov	r1, r4
 8012aea:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 8012aec:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 8012aee:	f000 fcc1 	bl	8013474 <USBD_CtlError>
        ret = USBD_FAIL;
 8012af2:	e7c8      	b.n	8012a86 <USBD_CDC_Setup+0x52>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012af4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012af8:	2b03      	cmp	r3, #3
 8012afa:	d0c4      	beq.n	8012a86 <USBD_CDC_Setup+0x52>
 8012afc:	e7f4      	b.n	8012ae8 <USBD_CDC_Setup+0xb4>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012afe:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	d1f0      	bne.n	8012ae8 <USBD_CDC_Setup+0xb4>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b06:	2201      	movs	r2, #1
 8012b08:	f10d 0105 	add.w	r1, sp, #5
 8012b0c:	f000 fce4 	bl	80134d8 <USBD_CtlSendData>
 8012b10:	e7b9      	b.n	8012a86 <USBD_CDC_Setup+0x52>
        hcdc->CmdOpCode = req->bRequest;
 8012b12:	7864      	ldrb	r4, [r4, #1]
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012b14:	4641      	mov	r1, r8
        hcdc->CmdLength = (uint8_t)req->wLength;
 8012b16:	f888 2201 	strb.w	r2, [r8, #513]	; 0x201
  USBD_StatusTypeDef ret = USBD_OK;
 8012b1a:	461e      	mov	r6, r3
        hcdc->CmdOpCode = req->bRequest;
 8012b1c:	f888 4200 	strb.w	r4, [r8, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8012b20:	f000 fcf2 	bl	8013508 <USBD_CtlPrepareRx>
 8012b24:	e7af      	b.n	8012a86 <USBD_CDC_Setup+0x52>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b26:	2202      	movs	r2, #2
 8012b28:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8012b2c:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012b2e:	f000 fcd3 	bl	80134d8 <USBD_CtlSendData>
 8012b32:	e7a8      	b.n	8012a86 <USBD_CDC_Setup+0x52>

08012b34 <USBD_CDC_DeInit>:
{
 8012b34:	b538      	push	{r3, r4, r5, lr}
 8012b36:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012b38:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8012b3a:	2181      	movs	r1, #129	; 0x81
 8012b3c:	f00f f938 	bl	8021db0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012b40:	2101      	movs	r1, #1
 8012b42:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8012b44:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8012b46:	f00f f933 	bl	8021db0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	2182      	movs	r1, #130	; 0x82
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8012b4e:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8012b52:	f00f f92d 	bl	8021db0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8012b56:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8012b5a:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8012b5c:	b14b      	cbz	r3, 8012b72 <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8012b5e:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 8012b62:	685b      	ldr	r3, [r3, #4]
 8012b64:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8012b66:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8012b6a:	f00f fb0b 	bl	8022184 <free>
    pdev->pClassData = NULL;
 8012b6e:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 8012b72:	2000      	movs	r0, #0
 8012b74:	bd38      	pop	{r3, r4, r5, pc}
 8012b76:	bf00      	nop

08012b78 <USBD_CDC_Init>:
{
 8012b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b7c:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8012b7e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8012b82:	f00f faf7 	bl	8022174 <malloc>
  if (hcdc == NULL)
 8012b86:	4605      	mov	r5, r0
 8012b88:	2800      	cmp	r0, #0
 8012b8a:	d04d      	beq.n	8012c28 <USBD_CDC_Init+0xb0>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b8c:	7c23      	ldrb	r3, [r4, #16]
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012b8e:	2601      	movs	r6, #1
  pdev->pClassData = (void *)hcdc;
 8012b90:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b94:	b38b      	cbz	r3, 8012bfa <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012b96:	2340      	movs	r3, #64	; 0x40
 8012b98:	2181      	movs	r1, #129	; 0x81
 8012b9a:	2202      	movs	r2, #2
 8012b9c:	4620      	mov	r0, r4
 8012b9e:	f00f f8f5 	bl	8021d8c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012ba2:	4631      	mov	r1, r6
 8012ba4:	2340      	movs	r3, #64	; 0x40
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012ba6:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012ba8:	2202      	movs	r2, #2
 8012baa:	4620      	mov	r0, r4
 8012bac:	f00f f8ee 	bl	8021d8c <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012bb0:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012bb2:	2203      	movs	r2, #3
 8012bb4:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8012bb6:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012bba:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8012bbc:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012bc0:	2308      	movs	r3, #8
 8012bc2:	f00f f8e3 	bl	8021d8c <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012bc6:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012bca:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 8012bce:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8012bd0:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8012bd4:	681b      	ldr	r3, [r3, #0]
 8012bd6:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012bd8:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 8012bda:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 8012bde:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012be2:	b9b6      	cbnz	r6, 8012c12 <USBD_CDC_Init+0x9a>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012be4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8012be8:	4641      	mov	r1, r8
 8012bea:	4620      	mov	r0, r4
 8012bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bf0:	f00f f938 	bl	8021e64 <USBD_LL_PrepareReceive>
}
 8012bf4:	4630      	mov	r0, r6
 8012bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8012bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012bfe:	2181      	movs	r1, #129	; 0x81
 8012c00:	2202      	movs	r2, #2
 8012c02:	4620      	mov	r0, r4
 8012c04:	f00f f8c2 	bl	8021d8c <USBD_LL_OpenEP>
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012c08:	4631      	mov	r1, r6
 8012c0a:	f44f 7300 	mov.w	r3, #512	; 0x200
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8012c0e:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8012c10:	e7ca      	b.n	8012ba8 <USBD_CDC_Init+0x30>
  return (uint8_t)USBD_OK;
 8012c12:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c14:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8012c18:	4641      	mov	r1, r8
 8012c1a:	4620      	mov	r0, r4
 8012c1c:	2340      	movs	r3, #64	; 0x40
 8012c1e:	f00f f921 	bl	8021e64 <USBD_LL_PrepareReceive>
}
 8012c22:	4630      	mov	r0, r6
 8012c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8012c28:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8012c2a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8012c2e:	e7e1      	b.n	8012bf4 <USBD_CDC_Init+0x7c>

08012c30 <USBD_CDC_RegisterInterface>:
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
  if (fops == NULL)
 8012c30:	b119      	cbz	r1, 8012c3a <USBD_CDC_RegisterInterface+0xa>
  {
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;
 8012c32:	f8c0 12c0 	str.w	r1, [r0, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8012c36:	2000      	movs	r0, #0
 8012c38:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8012c3a:	2003      	movs	r0, #3
}
 8012c3c:	4770      	bx	lr
 8012c3e:	bf00      	nop

08012c40 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012c40:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 8012c42:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012c44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8012c48:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8012c4c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8012c50:	4770      	bx	lr
 8012c52:	bf00      	nop

08012c54 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012c54:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8012c56:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8012c58:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8012c5c:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop

08012c64 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8012c64:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8012c68:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8012c6a:	b18a      	cbz	r2, 8012c90 <USBD_CDC_ReceivePacket+0x2c>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c6c:	7c04      	ldrb	r4, [r0, #16]
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c6e:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012c72:	b134      	cbz	r4, 8012c82 <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8012c74:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c76:	2340      	movs	r3, #64	; 0x40
 8012c78:	2101      	movs	r1, #1
 8012c7a:	f00f f8f3 	bl	8021e64 <USBD_LL_PrepareReceive>
}
 8012c7e:	4620      	mov	r0, r4
 8012c80:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8012c82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012c86:	2101      	movs	r1, #1
 8012c88:	f00f f8ec 	bl	8021e64 <USBD_LL_PrepareReceive>
}
 8012c8c:	4620      	mov	r0, r4
 8012c8e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8012c90:	2403      	movs	r4, #3
}
 8012c92:	4620      	mov	r0, r4
 8012c94:	bd10      	pop	{r4, pc}
 8012c96:	bf00      	nop

08012c98 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8012c98:	b1a0      	cbz	r0, 8012cc4 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8012c9a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012c9e:	b113      	cbz	r3, 8012ca6 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8012ca6:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 8012caa:	b113      	cbz	r3, 8012cb2 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 8012cac:	2300      	movs	r3, #0
 8012cae:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012cb2:	b109      	cbz	r1, 8012cb8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 8012cb4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cb8:	2301      	movs	r3, #1
  pdev->id = id;
 8012cba:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cbc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012cc0:	f00f b824 	b.w	8021d0c <USBD_LL_Init>

  return ret;
}
 8012cc4:	2003      	movs	r0, #3
 8012cc6:	4770      	bx	lr

08012cc8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012cc8:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 8012cca:	2400      	movs	r4, #0
{
 8012ccc:	b083      	sub	sp, #12
  uint16_t len = 0U;
 8012cce:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 8012cd2:	b159      	cbz	r1, 8012cec <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8012cd4:	4605      	mov	r5, r0
 8012cd6:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8012cda:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8012cdc:	f10d 0006 	add.w	r0, sp, #6
 8012ce0:	4798      	blx	r3
 8012ce2:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 8012ce6:	4620      	mov	r0, r4
 8012ce8:	b003      	add	sp, #12
 8012cea:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 8012cec:	2403      	movs	r4, #3
}
 8012cee:	4620      	mov	r0, r4
 8012cf0:	b003      	add	sp, #12
 8012cf2:	bd30      	pop	{r4, r5, pc}

08012cf4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8012cf4:	f00f b83c 	b.w	8021d70 <USBD_LL_Start>

08012cf8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8012cf8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012cfc:	b10b      	cbz	r3, 8012d02 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8012cfe:	681b      	ldr	r3, [r3, #0]
 8012d00:	4718      	bx	r3
  }

  return ret;
}
 8012d02:	2003      	movs	r0, #3
 8012d04:	4770      	bx	lr
 8012d06:	bf00      	nop

08012d08 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012d08:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8012d0a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012d0e:	b10b      	cbz	r3, 8012d14 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	4798      	blx	r3
  }

  return USBD_OK;
}
 8012d14:	2000      	movs	r0, #0
 8012d16:	bd08      	pop	{r3, pc}

08012d18 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8012d18:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012d1a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 8012d1e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012d20:	4628      	mov	r0, r5
 8012d22:	f000 fb93 	bl	801344c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;

  pdev->ep0_data_len = pdev->request.wLength;

  switch (pdev->request.bmRequest & 0x1FU)
 8012d26:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_state = USBD_EP0_SETUP;
 8012d2a:	2001      	movs	r0, #1
  pdev->ep0_data_len = pdev->request.wLength;
 8012d2c:	f8b4 22b0 	ldrh.w	r2, [r4, #688]	; 0x2b0
 8012d30:	f001 031f 	and.w	r3, r1, #31
  switch (pdev->request.bmRequest & 0x1FU)
 8012d34:	4283      	cmp	r3, r0
  pdev->ep0_data_len = pdev->request.wLength;
 8012d36:	e9c4 02a5 	strd	r0, r2, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8012d3a:	d009      	beq.n	8012d50 <USBD_LL_SetupStage+0x38>
 8012d3c:	2b02      	cmp	r3, #2
 8012d3e:	d013      	beq.n	8012d68 <USBD_LL_SetupStage+0x50>
 8012d40:	b163      	cbz	r3, 8012d5c <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d42:	4620      	mov	r0, r4
 8012d44:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8012d48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8012d4c:	f00f b83e 	b.w	8021dcc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d50:	4629      	mov	r1, r5
 8012d52:	4620      	mov	r0, r4
}
 8012d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012d58:	f000 ba9e 	b.w	8013298 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d5c:	4629      	mov	r1, r5
 8012d5e:	4620      	mov	r0, r4
}
 8012d60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012d64:	f000 b8f4 	b.w	8012f50 <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d68:	4629      	mov	r1, r5
 8012d6a:	4620      	mov	r0, r4
}
 8012d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8012d70:	f000 baca 	b.w	8013308 <USBD_StdEPReq>

08012d74 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8012d74:	b570      	push	{r4, r5, r6, lr}
 8012d76:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012d78:	b931      	cbnz	r1, 8012d88 <USBD_LL_DataOutStage+0x14>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012d7a:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8012d7e:	460c      	mov	r4, r1
 8012d80:	2b03      	cmp	r3, #3
 8012d82:	d00e      	beq.n	8012da2 <USBD_LL_DataOutStage+0x2e>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8012d84:	2000      	movs	r0, #0
}
 8012d86:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 8012d88:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012d8c:	699b      	ldr	r3, [r3, #24]
 8012d8e:	b133      	cbz	r3, 8012d9e <USBD_LL_DataOutStage+0x2a>
 8012d90:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012d94:	2a03      	cmp	r2, #3
 8012d96:	d102      	bne.n	8012d9e <USBD_LL_DataOutStage+0x2a>
}
 8012d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8012d9c:	4718      	bx	r3
    return USBD_FAIL;
 8012d9e:	2003      	movs	r0, #3
}
 8012da0:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8012da2:	e9d0 3657 	ldrd	r3, r6, [r0, #348]	; 0x15c
 8012da6:	42b3      	cmp	r3, r6
 8012da8:	d80d      	bhi.n	8012dc6 <USBD_LL_DataOutStage+0x52>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8012daa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012dae:	691b      	ldr	r3, [r3, #16]
 8012db0:	b123      	cbz	r3, 8012dbc <USBD_LL_DataOutStage+0x48>
 8012db2:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012db6:	2a03      	cmp	r2, #3
 8012db8:	d100      	bne.n	8012dbc <USBD_LL_DataOutStage+0x48>
          pdev->pClass->EP0_RxReady(pdev);
 8012dba:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 8012dbc:	4628      	mov	r0, r5
 8012dbe:	f000 fbbb 	bl	8013538 <USBD_CtlSendStatus>
  return USBD_OK;
 8012dc2:	2000      	movs	r0, #0
 8012dc4:	e7df      	b.n	8012d86 <USBD_LL_DataOutStage+0x12>
        pep->rem_length -= pep->maxpacket;
 8012dc6:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012dc8:	4611      	mov	r1, r2
 8012dca:	4632      	mov	r2, r6
 8012dcc:	429e      	cmp	r6, r3
        pep->rem_length -= pep->maxpacket;
 8012dce:	f8c0 315c 	str.w	r3, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012dd2:	bf28      	it	cs
 8012dd4:	461a      	movcs	r2, r3
 8012dd6:	f000 fba5 	bl	8013524 <USBD_CtlContinueRx>
  return USBD_OK;
 8012dda:	4620      	mov	r0, r4
}
 8012ddc:	bd70      	pop	{r4, r5, r6, pc}
 8012dde:	bf00      	nop

08012de0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012de0:	b570      	push	{r4, r5, r6, lr}
 8012de2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8012de4:	b949      	cbnz	r1, 8012dfa <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012de6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 8012dea:	2b02      	cmp	r3, #2
 8012dec:	d015      	beq.n	8012e1a <USBD_LL_DataInStage+0x3a>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8012dee:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
    {
      (void)USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 8012df2:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8012df4:	2b01      	cmp	r3, #1
 8012df6:	d00d      	beq.n	8012e14 <USBD_LL_DataInStage+0x34>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8012df8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 8012dfa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012dfe:	695b      	ldr	r3, [r3, #20]
 8012e00:	b133      	cbz	r3, 8012e10 <USBD_LL_DataInStage+0x30>
 8012e02:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012e06:	2a03      	cmp	r2, #3
 8012e08:	d102      	bne.n	8012e10 <USBD_LL_DataInStage+0x30>
}
 8012e0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8012e0e:	4718      	bx	r3
    return USBD_FAIL;
 8012e10:	2003      	movs	r0, #3
}
 8012e12:	bd70      	pop	{r4, r5, r6, pc}
      pdev->dev_test_mode = 0U;
 8012e14:	f884 02a0 	strb.w	r0, [r4, #672]	; 0x2a0
}
 8012e18:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8012e1a:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8012e1e:	460d      	mov	r5, r1
 8012e20:	42b3      	cmp	r3, r6
 8012e22:	d815      	bhi.n	8012e50 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 8012e24:	d024      	beq.n	8012e70 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8012e26:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	b11b      	cbz	r3, 8012e36 <USBD_LL_DataInStage+0x56>
 8012e2e:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 8012e32:	2a03      	cmp	r2, #3
 8012e34:	d019      	beq.n	8012e6a <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012e36:	2180      	movs	r1, #128	; 0x80
 8012e38:	4620      	mov	r0, r4
 8012e3a:	f00e ffc7 	bl	8021dcc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012e3e:	4620      	mov	r0, r4
 8012e40:	f000 fb86 	bl	8013550 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 8012e44:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
      pdev->dev_test_mode = 0U;
 8012e48:	2000      	movs	r0, #0
    if (pdev->dev_test_mode == 1U)
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d1d4      	bne.n	8012df8 <USBD_LL_DataInStage+0x18>
 8012e4e:	e7e1      	b.n	8012e14 <USBD_LL_DataInStage+0x34>
        pep->rem_length -= pep->maxpacket;
 8012e50:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012e52:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8012e54:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012e56:	461a      	mov	r2, r3
 8012e58:	f000 fb4c 	bl	80134f4 <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012e5c:	462b      	mov	r3, r5
 8012e5e:	462a      	mov	r2, r5
 8012e60:	4629      	mov	r1, r5
 8012e62:	4620      	mov	r0, r4
 8012e64:	f00e fffe 	bl	8021e64 <USBD_LL_PrepareReceive>
 8012e68:	e7c1      	b.n	8012dee <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 8012e6a:	4620      	mov	r0, r4
 8012e6c:	4798      	blx	r3
 8012e6e:	e7e2      	b.n	8012e36 <USBD_LL_DataInStage+0x56>
            (pep->total_length >= pep->maxpacket) &&
 8012e70:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8012e72:	4293      	cmp	r3, r2
 8012e74:	d8d7      	bhi.n	8012e26 <USBD_LL_DataInStage+0x46>
            (pep->total_length >= pep->maxpacket) &&
 8012e76:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 8012e7a:	429a      	cmp	r2, r3
 8012e7c:	d2d3      	bcs.n	8012e26 <USBD_LL_DataInStage+0x46>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012e7e:	460a      	mov	r2, r1
 8012e80:	f000 fb38 	bl	80134f4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012e84:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
 8012e88:	e7e8      	b.n	8012e5c <USBD_LL_DataInStage+0x7c>
 8012e8a:	bf00      	nop

08012e8c <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8012e8c:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e8e:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 8012e90:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 8012e94:	b570      	push	{r4, r5, r6, lr}
 8012e96:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012e98:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012e9c:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 8012ea0:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 8012ea2:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 8012ea6:	b11b      	cbz	r3, 8012eb0 <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012ea8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012eac:	685b      	ldr	r3, [r3, #4]
 8012eae:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012eb0:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012eb2:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012eb4:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012eb6:	4620      	mov	r0, r4
 8012eb8:	462b      	mov	r3, r5
 8012eba:	4611      	mov	r1, r2
 8012ebc:	f00e ff66 	bl	8021d8c <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012ec0:	462b      	mov	r3, r5
 8012ec2:	2200      	movs	r2, #0
 8012ec4:	2180      	movs	r1, #128	; 0x80
 8012ec6:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012ec8:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ecc:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012ed0:	f00e ff5c 	bl	8021d8c <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 8012ed4:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012ed6:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012ed8:	6225      	str	r5, [r4, #32]
}
 8012eda:	bd70      	pop	{r4, r5, r6, pc}

08012edc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012edc:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 8012ede:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 8012ee0:	7419      	strb	r1, [r3, #16]
}
 8012ee2:	4770      	bx	lr

08012ee4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012ee4:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012ee6:	2104      	movs	r1, #4

  return USBD_OK;
}
 8012ee8:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 8012eea:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012eee:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 8012ef2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8012ef6:	4770      	bx	lr

08012ef8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012ef8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012efc:	2b04      	cmp	r3, #4
 8012efe:	d103      	bne.n	8012f08 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012f00:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8012f04:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8012f08:	2000      	movs	r0, #0
 8012f0a:	4770      	bx	lr

08012f0c <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012f0c:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8012f10:	2a03      	cmp	r2, #3
 8012f12:	d001      	beq.n	8012f18 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8012f14:	2000      	movs	r0, #0
 8012f16:	4770      	bx	lr
{
 8012f18:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8012f1a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8012f1e:	69db      	ldr	r3, [r3, #28]
 8012f20:	b103      	cbz	r3, 8012f24 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 8012f22:	4798      	blx	r3
}
 8012f24:	2000      	movs	r0, #0
 8012f26:	bd08      	pop	{r3, pc}

08012f28 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8012f28:	2000      	movs	r0, #0
 8012f2a:	4770      	bx	lr

08012f2c <USBD_LL_IsoOUTIncomplete>:
 8012f2c:	2000      	movs	r0, #0
 8012f2e:	4770      	bx	lr

08012f30 <USBD_LL_DevConnected>:
 8012f30:	2000      	movs	r0, #0
 8012f32:	4770      	bx	lr

08012f34 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f34:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8012f36:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f3a:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 8012f3e:	b12a      	cbz	r2, 8012f4c <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012f40:	6852      	ldr	r2, [r2, #4]
 8012f42:	7901      	ldrb	r1, [r0, #4]
{
 8012f44:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8012f46:	4790      	blx	r2
  }

  return USBD_OK;
}
 8012f48:	2000      	movs	r0, #0
 8012f4a:	bd08      	pop	{r3, pc}
 8012f4c:	2000      	movs	r0, #0
 8012f4e:	4770      	bx	lr

08012f50 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f50:	b570      	push	{r4, r5, r6, lr}
 8012f52:	780c      	ldrb	r4, [r1, #0]
 8012f54:	b082      	sub	sp, #8
 8012f56:	460e      	mov	r6, r1
 8012f58:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012f5a:	f004 0460 	and.w	r4, r4, #96	; 0x60
 8012f5e:	2c20      	cmp	r4, #32
 8012f60:	d00e      	beq.n	8012f80 <USBD_StdDevReq+0x30>
 8012f62:	2c40      	cmp	r4, #64	; 0x40
 8012f64:	d00c      	beq.n	8012f80 <USBD_StdDevReq+0x30>
 8012f66:	b1ac      	cbz	r4, 8012f94 <USBD_StdDevReq+0x44>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f68:	2180      	movs	r1, #128	; 0x80
 8012f6a:	4628      	mov	r0, r5
 8012f6c:	f00e ff2e 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012f70:	2100      	movs	r1, #0
 8012f72:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8012f74:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8012f76:	f00e ff29 	bl	8021dcc <USBD_LL_StallEP>
}
 8012f7a:	4620      	mov	r0, r4
 8012f7c:	b002      	add	sp, #8
 8012f7e:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012f80:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8012f84:	4631      	mov	r1, r6
 8012f86:	4628      	mov	r0, r5
 8012f88:	689b      	ldr	r3, [r3, #8]
 8012f8a:	4798      	blx	r3
 8012f8c:	4604      	mov	r4, r0
}
 8012f8e:	4620      	mov	r0, r4
 8012f90:	b002      	add	sp, #8
 8012f92:	bd70      	pop	{r4, r5, r6, pc}
    switch (req->bRequest)
 8012f94:	784b      	ldrb	r3, [r1, #1]
 8012f96:	2b09      	cmp	r3, #9
 8012f98:	d8e6      	bhi.n	8012f68 <USBD_StdDevReq+0x18>
 8012f9a:	a201      	add	r2, pc, #4	; (adr r2, 8012fa0 <USBD_StdDevReq+0x50>)
 8012f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012fa0:	08012fff 	.word	0x08012fff
 8012fa4:	0801302d 	.word	0x0801302d
 8012fa8:	08012f69 	.word	0x08012f69
 8012fac:	08013049 	.word	0x08013049
 8012fb0:	08012f69 	.word	0x08012f69
 8012fb4:	0801305b 	.word	0x0801305b
 8012fb8:	08013093 	.word	0x08013093
 8012fbc:	08012f69 	.word	0x08012f69
 8012fc0:	080130b7 	.word	0x080130b7
 8012fc4:	08012fc9 	.word	0x08012fc9
  cfgidx = (uint8_t)(req->wValue);
 8012fc8:	7889      	ldrb	r1, [r1, #2]
 8012fca:	4eb2      	ldr	r6, [pc, #712]	; (8013294 <USBD_StdDevReq+0x344>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012fcc:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 8012fce:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012fd0:	f200 8142 	bhi.w	8013258 <USBD_StdDevReq+0x308>
  switch (pdev->dev_state)
 8012fd4:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8012fd8:	2b02      	cmp	r3, #2
 8012fda:	f000 812b 	beq.w	8013234 <USBD_StdDevReq+0x2e4>
 8012fde:	2b03      	cmp	r3, #3
 8012fe0:	f000 8105 	beq.w	80131ee <USBD_StdDevReq+0x29e>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fe4:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 8012fe6:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fe8:	f00e fef0 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012fec:	2100      	movs	r1, #0
 8012fee:	4628      	mov	r0, r5
 8012ff0:	f00e feec 	bl	8021dcc <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012ff4:	7831      	ldrb	r1, [r6, #0]
 8012ff6:	4628      	mov	r0, r5
 8012ff8:	f7ff fe86 	bl	8012d08 <USBD_ClrClassConfig>
    break;
 8012ffc:	e7bd      	b.n	8012f7a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8012ffe:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8013002:	3a01      	subs	r2, #1
 8013004:	2a02      	cmp	r2, #2
 8013006:	d86c      	bhi.n	80130e2 <USBD_StdDevReq+0x192>
    if (req->wLength != 0x2U)
 8013008:	88ca      	ldrh	r2, [r1, #6]
 801300a:	2a02      	cmp	r2, #2
 801300c:	d169      	bne.n	80130e2 <USBD_StdDevReq+0x192>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801300e:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 8013010:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013014:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8013016:	b10a      	cbz	r2, 801301c <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013018:	2203      	movs	r2, #3
 801301a:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801301c:	2202      	movs	r2, #2
 801301e:	f105 010c 	add.w	r1, r5, #12
 8013022:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8013024:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013026:	f000 fa57 	bl	80134d8 <USBD_CtlSendData>
    break;
 801302a:	e7a6      	b.n	8012f7a <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801302c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013030:	3b01      	subs	r3, #1
 8013032:	2b02      	cmp	r3, #2
 8013034:	d855      	bhi.n	80130e2 <USBD_StdDevReq+0x192>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013036:	884b      	ldrh	r3, [r1, #2]
 8013038:	2b01      	cmp	r3, #1
 801303a:	d19e      	bne.n	8012f7a <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 801303c:	2300      	movs	r3, #0
 801303e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013042:	f000 fa79 	bl	8013538 <USBD_CtlSendStatus>
 8013046:	e798      	b.n	8012f7a <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013048:	884b      	ldrh	r3, [r1, #2]
 801304a:	2b01      	cmp	r3, #1
 801304c:	d195      	bne.n	8012f7a <USBD_StdDevReq+0x2a>
    pdev->dev_remote_wakeup = 1U;
 801304e:	f8c0 32a4 	str.w	r3, [r0, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013052:	4628      	mov	r0, r5
 8013054:	f000 fa70 	bl	8013538 <USBD_CtlSendStatus>
 8013058:	e78f      	b.n	8012f7a <USBD_StdDevReq+0x2a>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801305a:	888b      	ldrh	r3, [r1, #4]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d140      	bne.n	80130e2 <USBD_StdDevReq+0x192>
 8013060:	88cb      	ldrh	r3, [r1, #6]
 8013062:	2b00      	cmp	r3, #0
 8013064:	d13d      	bne.n	80130e2 <USBD_StdDevReq+0x192>
 8013066:	884e      	ldrh	r6, [r1, #2]
 8013068:	2e7f      	cmp	r6, #127	; 0x7f
 801306a:	d83a      	bhi.n	80130e2 <USBD_StdDevReq+0x192>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801306c:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013070:	2b03      	cmp	r3, #3
 8013072:	d036      	beq.n	80130e2 <USBD_StdDevReq+0x192>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013074:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8013076:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801307a:	f00e fed7 	bl	8021e2c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801307e:	4628      	mov	r0, r5
 8013080:	f000 fa5a 	bl	8013538 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8013084:	2e00      	cmp	r6, #0
 8013086:	f040 80d1 	bne.w	801322c <USBD_StdDevReq+0x2dc>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801308a:	2301      	movs	r3, #1
 801308c:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013090:	e773      	b.n	8012f7a <USBD_StdDevReq+0x2a>
      USBD_GetDescriptor(pdev, req);
 8013092:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 8013094:	2100      	movs	r1, #0
 8013096:	0a13      	lsrs	r3, r2, #8
 8013098:	f8ad 1006 	strh.w	r1, [sp, #6]
  switch (req->wValue >> 8)
 801309c:	3b01      	subs	r3, #1
 801309e:	2b0e      	cmp	r3, #14
 80130a0:	d81f      	bhi.n	80130e2 <USBD_StdDevReq+0x192>
 80130a2:	e8df f003 	tbb	[pc, r3]
 80130a6:	6b77      	.short	0x6b77
 80130a8:	4f1e1e59 	.word	0x4f1e1e59
 80130ac:	1e1e1e43 	.word	0x1e1e1e43
 80130b0:	1e1e1e1e 	.word	0x1e1e1e1e
 80130b4:	29          	.byte	0x29
 80130b5:	00          	.byte	0x00
  if (req->wLength != 1U)
 80130b6:	88ca      	ldrh	r2, [r1, #6]
 80130b8:	2a01      	cmp	r2, #1
 80130ba:	d112      	bne.n	80130e2 <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 80130bc:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80130c0:	2b02      	cmp	r3, #2
 80130c2:	f200 808d 	bhi.w	80131e0 <USBD_StdDevReq+0x290>
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	f43f af4e 	beq.w	8012f68 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80130cc:	2300      	movs	r3, #0
 80130ce:	4601      	mov	r1, r0
 80130d0:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80130d4:	f000 fa00 	bl	80134d8 <USBD_CtlSendData>
      break;
 80130d8:	e74f      	b.n	8012f7a <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80130da:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80130de:	685b      	ldr	r3, [r3, #4]
 80130e0:	b97b      	cbnz	r3, 8013102 <USBD_StdDevReq+0x1b2>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80130e2:	2180      	movs	r1, #128	; 0x80
 80130e4:	4628      	mov	r0, r5
 80130e6:	f00e fe71 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80130ea:	4628      	mov	r0, r5
 80130ec:	2100      	movs	r1, #0
 80130ee:	f00e fe6d 	bl	8021dcc <USBD_LL_StallEP>
}
 80130f2:	4620      	mov	r0, r4
 80130f4:	b002      	add	sp, #8
 80130f6:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80130f8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80130fc:	69db      	ldr	r3, [r3, #28]
 80130fe:	2b00      	cmp	r3, #0
 8013100:	d0ef      	beq.n	80130e2 <USBD_StdDevReq+0x192>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013102:	f10d 0106 	add.w	r1, sp, #6
 8013106:	7c28      	ldrb	r0, [r5, #16]
 8013108:	4798      	blx	r3
    if (req->wLength != 0U)
 801310a:	88f2      	ldrh	r2, [r6, #6]
 801310c:	2a00      	cmp	r2, #0
 801310e:	d0a0      	beq.n	8013052 <USBD_StdDevReq+0x102>
      if (len != 0U)
 8013110:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d0e4      	beq.n	80130e2 <USBD_StdDevReq+0x192>
        len = MIN(len, req->wLength);
 8013118:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801311a:	4601      	mov	r1, r0
 801311c:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 801311e:	bf28      	it	cs
 8013120:	461a      	movcs	r2, r3
 8013122:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8013126:	f000 f9d7 	bl	80134d8 <USBD_CtlSendData>
 801312a:	e726      	b.n	8012f7a <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801312c:	7c03      	ldrb	r3, [r0, #16]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d1d7      	bne.n	80130e2 <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8013132:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013136:	f10d 0006 	add.w	r0, sp, #6
 801313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801313c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801313e:	2307      	movs	r3, #7
 8013140:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013142:	e7e2      	b.n	801310a <USBD_StdDevReq+0x1ba>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013144:	7c03      	ldrb	r3, [r0, #16]
 8013146:	2b00      	cmp	r3, #0
 8013148:	d1cb      	bne.n	80130e2 <USBD_StdDevReq+0x192>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 801314a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801314e:	f10d 0006 	add.w	r0, sp, #6
 8013152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013154:	4798      	blx	r3
  if (err != 0U)
 8013156:	e7d8      	b.n	801310a <USBD_StdDevReq+0x1ba>
    switch ((uint8_t)(req->wValue))
 8013158:	b2d2      	uxtb	r2, r2
 801315a:	2a05      	cmp	r2, #5
 801315c:	d8c1      	bhi.n	80130e2 <USBD_StdDevReq+0x192>
 801315e:	a301      	add	r3, pc, #4	; (adr r3, 8013164 <USBD_StdDevReq+0x214>)
 8013160:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8013164:	080130db 	.word	0x080130db
 8013168:	080131d5 	.word	0x080131d5
 801316c:	080131c9 	.word	0x080131c9
 8013170:	080131bd 	.word	0x080131bd
 8013174:	080131b1 	.word	0x080131b1
 8013178:	080131a5 	.word	0x080131a5
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801317c:	7c03      	ldrb	r3, [r0, #16]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d17e      	bne.n	8013280 <USBD_StdDevReq+0x330>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8013182:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013186:	f10d 0006 	add.w	r0, sp, #6
 801318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801318c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801318e:	2302      	movs	r3, #2
 8013190:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013192:	e7ba      	b.n	801310a <USBD_StdDevReq+0x1ba>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013194:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8013198:	f10d 0106 	add.w	r1, sp, #6
 801319c:	7c00      	ldrb	r0, [r0, #16]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4798      	blx	r3
  if (err != 0U)
 80131a2:	e7b2      	b.n	801310a <USBD_StdDevReq+0x1ba>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80131a4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80131a8:	699b      	ldr	r3, [r3, #24]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d1a9      	bne.n	8013102 <USBD_StdDevReq+0x1b2>
 80131ae:	e798      	b.n	80130e2 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80131b0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80131b4:	695b      	ldr	r3, [r3, #20]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d1a3      	bne.n	8013102 <USBD_StdDevReq+0x1b2>
 80131ba:	e792      	b.n	80130e2 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80131bc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80131c0:	691b      	ldr	r3, [r3, #16]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d19d      	bne.n	8013102 <USBD_StdDevReq+0x1b2>
 80131c6:	e78c      	b.n	80130e2 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80131c8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80131cc:	68db      	ldr	r3, [r3, #12]
 80131ce:	2b00      	cmp	r3, #0
 80131d0:	d197      	bne.n	8013102 <USBD_StdDevReq+0x1b2>
 80131d2:	e786      	b.n	80130e2 <USBD_StdDevReq+0x192>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80131d4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80131d8:	689b      	ldr	r3, [r3, #8]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d191      	bne.n	8013102 <USBD_StdDevReq+0x1b2>
 80131de:	e780      	b.n	80130e2 <USBD_StdDevReq+0x192>
    switch (pdev->dev_state)
 80131e0:	2b03      	cmp	r3, #3
 80131e2:	f47f aec1 	bne.w	8012f68 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80131e6:	1d01      	adds	r1, r0, #4
 80131e8:	f000 f976 	bl	80134d8 <USBD_CtlSendData>
      break;
 80131ec:	e6c5      	b.n	8012f7a <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 80131ee:	2900      	cmp	r1, #0
 80131f0:	d03b      	beq.n	801326a <USBD_StdDevReq+0x31a>
    else if (cfgidx != pdev->dev_config)
 80131f2:	6841      	ldr	r1, [r0, #4]
 80131f4:	2901      	cmp	r1, #1
 80131f6:	f43f af2c 	beq.w	8013052 <USBD_StdDevReq+0x102>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80131fa:	b2c9      	uxtb	r1, r1
 80131fc:	f7ff fd84 	bl	8012d08 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8013200:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013202:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8013204:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8013206:	f7ff fd77 	bl	8012cf8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 801320a:	4606      	mov	r6, r0
 801320c:	2800      	cmp	r0, #0
 801320e:	f43f af20 	beq.w	8013052 <USBD_StdDevReq+0x102>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013212:	2180      	movs	r1, #128	; 0x80
 8013214:	4628      	mov	r0, r5
 8013216:	f00e fdd9 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801321a:	2100      	movs	r1, #0
 801321c:	4628      	mov	r0, r5
 801321e:	4634      	mov	r4, r6
 8013220:	f00e fdd4 	bl	8021dcc <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013224:	7929      	ldrb	r1, [r5, #4]
 8013226:	4628      	mov	r0, r5
 8013228:	f7ff fd6e 	bl	8012d08 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801322c:	2302      	movs	r3, #2
 801322e:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013232:	e6a2      	b.n	8012f7a <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8013234:	2900      	cmp	r1, #0
 8013236:	f43f af0c 	beq.w	8013052 <USBD_StdDevReq+0x102>
      pdev->dev_config = cfgidx;
 801323a:	2101      	movs	r1, #1
 801323c:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801323e:	f7ff fd5b 	bl	8012cf8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8013242:	4604      	mov	r4, r0
 8013244:	2800      	cmp	r0, #0
 8013246:	f47f af4c 	bne.w	80130e2 <USBD_StdDevReq+0x192>
        (void)USBD_CtlSendStatus(pdev);
 801324a:	4628      	mov	r0, r5
 801324c:	f000 f974 	bl	8013538 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8013250:	2303      	movs	r3, #3
 8013252:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8013256:	e690      	b.n	8012f7a <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013258:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 801325a:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801325c:	f00e fdb6 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013260:	4628      	mov	r0, r5
 8013262:	2100      	movs	r1, #0
 8013264:	f00e fdb2 	bl	8021dcc <USBD_LL_StallEP>
    return USBD_FAIL;
 8013268:	e687      	b.n	8012f7a <USBD_StdDevReq+0x2a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801326a:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 801326c:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801326e:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8013270:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013274:	f7ff fd48 	bl	8012d08 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8013278:	4628      	mov	r0, r5
 801327a:	f000 f95d 	bl	8013538 <USBD_CtlSendStatus>
 801327e:	e67c      	b.n	8012f7a <USBD_StdDevReq+0x2a>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8013280:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8013284:	f10d 0006 	add.w	r0, sp, #6
 8013288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801328a:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801328c:	2302      	movs	r3, #2
 801328e:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8013290:	e73b      	b.n	801310a <USBD_StdDevReq+0x1ba>
 8013292:	bf00      	nop
 8013294:	20001d30 	.word	0x20001d30

08013298 <USBD_StdItfReq>:
{
 8013298:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801329a:	780b      	ldrb	r3, [r1, #0]
{
 801329c:	460d      	mov	r5, r1
 801329e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80132a0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80132a4:	2a40      	cmp	r2, #64	; 0x40
 80132a6:	d00b      	beq.n	80132c0 <USBD_StdItfReq+0x28>
 80132a8:	065b      	lsls	r3, r3, #25
 80132aa:	d509      	bpl.n	80132c0 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 80132ac:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80132ae:	2180      	movs	r1, #128	; 0x80
 80132b0:	f00e fd8c 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80132b4:	4620      	mov	r0, r4
 80132b6:	4629      	mov	r1, r5
 80132b8:	f00e fd88 	bl	8021dcc <USBD_LL_StallEP>
}
 80132bc:	4628      	mov	r0, r5
 80132be:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 80132c0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 80132c4:	3b01      	subs	r3, #1
 80132c6:	2b02      	cmp	r3, #2
 80132c8:	d812      	bhi.n	80132f0 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80132ca:	792b      	ldrb	r3, [r5, #4]
 80132cc:	2b01      	cmp	r3, #1
 80132ce:	d80f      	bhi.n	80132f0 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80132d0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80132d4:	4629      	mov	r1, r5
 80132d6:	4620      	mov	r0, r4
 80132d8:	689b      	ldr	r3, [r3, #8]
 80132da:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80132dc:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80132de:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d1eb      	bne.n	80132bc <USBD_StdItfReq+0x24>
 80132e4:	2800      	cmp	r0, #0
 80132e6:	d1e9      	bne.n	80132bc <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 80132e8:	4620      	mov	r0, r4
 80132ea:	f000 f925 	bl	8013538 <USBD_CtlSendStatus>
 80132ee:	e7e5      	b.n	80132bc <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80132f0:	2180      	movs	r1, #128	; 0x80
 80132f2:	4620      	mov	r0, r4
 80132f4:	f00e fd6a 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80132f8:	2100      	movs	r1, #0
 80132fa:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 80132fc:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 80132fe:	f00e fd65 	bl	8021dcc <USBD_LL_StallEP>
}
 8013302:	4628      	mov	r0, r5
 8013304:	bd38      	pop	{r3, r4, r5, pc}
 8013306:	bf00      	nop

08013308 <USBD_StdEPReq>:
{
 8013308:	b570      	push	{r4, r5, r6, lr}
 801330a:	780b      	ldrb	r3, [r1, #0]
 801330c:	460d      	mov	r5, r1
 801330e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013310:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013314:	2b20      	cmp	r3, #32
 8013316:	d00c      	beq.n	8013332 <USBD_StdEPReq+0x2a>
 8013318:	2b40      	cmp	r3, #64	; 0x40
 801331a:	d00a      	beq.n	8013332 <USBD_StdEPReq+0x2a>
 801331c:	b18b      	cbz	r3, 8013342 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 801331e:	2180      	movs	r1, #128	; 0x80
 8013320:	4620      	mov	r0, r4
 8013322:	f00e fd53 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013326:	4620      	mov	r0, r4
 8013328:	2100      	movs	r1, #0
 801332a:	f00e fd4f 	bl	8021dcc <USBD_LL_StallEP>
}
 801332e:	2000      	movs	r0, #0
 8013330:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013332:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8013336:	4629      	mov	r1, r5
 8013338:	4620      	mov	r0, r4
 801333a:	689b      	ldr	r3, [r3, #8]
}
 801333c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8013340:	4718      	bx	r3
    switch (req->bRequest)
 8013342:	784b      	ldrb	r3, [r1, #1]
  ep_addr = LOBYTE(req->wIndex);
 8013344:	888a      	ldrh	r2, [r1, #4]
 8013346:	2b01      	cmp	r3, #1
 8013348:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 801334a:	d036      	beq.n	80133ba <USBD_StdEPReq+0xb2>
 801334c:	2b03      	cmp	r3, #3
 801334e:	d023      	beq.n	8013398 <USBD_StdEPReq+0x90>
 8013350:	2b00      	cmp	r3, #0
 8013352:	d1e4      	bne.n	801331e <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8013354:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8013358:	2b02      	cmp	r3, #2
 801335a:	d04c      	beq.n	80133f6 <USBD_StdEPReq+0xee>
 801335c:	2b03      	cmp	r3, #3
 801335e:	d1de      	bne.n	801331e <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013360:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8013364:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013366:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801336a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 801336e:	d453      	bmi.n	8013418 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013370:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8013374:	2b00      	cmp	r3, #0
 8013376:	d0d2      	beq.n	801331e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013378:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 801337c:	2514      	movs	r5, #20
 801337e:	fb05 0503 	mla	r5, r5, r3, r0
 8013382:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013386:	2b00      	cmp	r3, #0
 8013388:	d152      	bne.n	8013430 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 801338a:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801338c:	4629      	mov	r1, r5
 801338e:	4620      	mov	r0, r4
 8013390:	2202      	movs	r2, #2
 8013392:	f000 f8a1 	bl	80134d8 <USBD_CtlSendData>
          break;
 8013396:	e7ca      	b.n	801332e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8013398:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801339c:	2b02      	cmp	r3, #2
 801339e:	d021      	beq.n	80133e4 <USBD_StdEPReq+0xdc>
 80133a0:	2b03      	cmp	r3, #3
 80133a2:	d1bc      	bne.n	801331e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80133a4:	886b      	ldrh	r3, [r5, #2]
 80133a6:	b923      	cbnz	r3, 80133b2 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80133a8:	064a      	lsls	r2, r1, #25
 80133aa:	d002      	beq.n	80133b2 <USBD_StdEPReq+0xaa>
 80133ac:	88eb      	ldrh	r3, [r5, #6]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d049      	beq.n	8013446 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 80133b2:	4620      	mov	r0, r4
 80133b4:	f000 f8c0 	bl	8013538 <USBD_CtlSendStatus>
        break;
 80133b8:	e7b9      	b.n	801332e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 80133ba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80133be:	2b02      	cmp	r3, #2
 80133c0:	d010      	beq.n	80133e4 <USBD_StdEPReq+0xdc>
 80133c2:	2b03      	cmp	r3, #3
 80133c4:	d1ab      	bne.n	801331e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 80133c6:	886b      	ldrh	r3, [r5, #2]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d1b0      	bne.n	801332e <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 80133cc:	064e      	lsls	r6, r1, #25
 80133ce:	d135      	bne.n	801343c <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 80133d0:	4620      	mov	r0, r4
 80133d2:	f000 f8b1 	bl	8013538 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80133d6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 80133da:	4629      	mov	r1, r5
 80133dc:	4620      	mov	r0, r4
 80133de:	689b      	ldr	r3, [r3, #8]
 80133e0:	4798      	blx	r3
 80133e2:	e7a4      	b.n	801332e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133e4:	064b      	lsls	r3, r1, #25
 80133e6:	d09a      	beq.n	801331e <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80133e8:	f00e fcf0 	bl	8021dcc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80133ec:	4620      	mov	r0, r4
 80133ee:	2180      	movs	r1, #128	; 0x80
 80133f0:	f00e fcec 	bl	8021dcc <USBD_LL_StallEP>
 80133f4:	e79b      	b.n	801332e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133f6:	0648      	lsls	r0, r1, #25
 80133f8:	d191      	bne.n	801331e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80133fa:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 80133fc:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013400:	4620      	mov	r0, r4
 8013402:	f04f 0202 	mov.w	r2, #2
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013406:	bf4c      	ite	mi
 8013408:	f104 0114 	addmi.w	r1, r4, #20
 801340c:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8013410:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013412:	f000 f861 	bl	80134d8 <USBD_CtlSendData>
        break;
 8013416:	e78a      	b.n	801332e <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013418:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801341a:	2b00      	cmp	r3, #0
 801341c:	f43f af7f 	beq.w	801331e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013420:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8013424:	1c5d      	adds	r5, r3, #1
 8013426:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 801342a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 801342e:	e7aa      	b.n	8013386 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013430:	4620      	mov	r0, r4
 8013432:	f00e fce7 	bl	8021e04 <USBD_LL_IsStallEP>
 8013436:	b120      	cbz	r0, 8013442 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8013438:	2301      	movs	r3, #1
 801343a:	e7a6      	b.n	801338a <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801343c:	f00e fcd4 	bl	8021de8 <USBD_LL_ClearStallEP>
 8013440:	e7c6      	b.n	80133d0 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8013442:	6028      	str	r0, [r5, #0]
 8013444:	e7a2      	b.n	801338c <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8013446:	f00e fcc1 	bl	8021dcc <USBD_LL_StallEP>
 801344a:	e7b2      	b.n	80133b2 <USBD_StdEPReq+0xaa>

0801344c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 801344c:	780b      	ldrb	r3, [r1, #0]
 801344e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8013450:	784b      	ldrb	r3, [r1, #1]
 8013452:	7043      	strb	r3, [r0, #1]

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013454:	78ca      	ldrb	r2, [r1, #3]
 8013456:	788b      	ldrb	r3, [r1, #2]
 8013458:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wValue = SWAPBYTE(pbuff);
 801345c:	8043      	strh	r3, [r0, #2]
 801345e:	794a      	ldrb	r2, [r1, #5]
 8013460:	790b      	ldrb	r3, [r1, #4]
 8013462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wIndex = SWAPBYTE(pbuff);
 8013466:	8083      	strh	r3, [r0, #4]
 8013468:	79ca      	ldrb	r2, [r1, #7]
 801346a:	798b      	ldrb	r3, [r1, #6]
 801346c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  req->wLength = SWAPBYTE(pbuff);
 8013470:	80c3      	strh	r3, [r0, #6]
}
 8013472:	4770      	bx	lr

08013474 <USBD_CtlError>:
{
 8013474:	b510      	push	{r4, lr}
 8013476:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013478:	2180      	movs	r1, #128	; 0x80
 801347a:	f00e fca7 	bl	8021dcc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801347e:	2100      	movs	r1, #0
 8013480:	4620      	mov	r0, r4
}
 8013482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8013486:	f00e bca1 	b.w	8021dcc <USBD_LL_StallEP>
 801348a:	bf00      	nop

0801348c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 801348c:	b308      	cbz	r0, 80134d2 <USBD_GetString+0x46>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 801348e:	7803      	ldrb	r3, [r0, #0]
{
 8013490:	b470      	push	{r4, r5, r6}
  while (*pbuff != (uint8_t)'\0')
 8013492:	b1fb      	cbz	r3, 80134d4 <USBD_GetString+0x48>
 8013494:	4604      	mov	r4, r0
 8013496:	f1c0 0601 	rsb	r6, r0, #1
  {
    len++;
 801349a:	19a3      	adds	r3, r4, r6
  while (*pbuff != (uint8_t)'\0')
 801349c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80134a0:	b2db      	uxtb	r3, r3
 80134a2:	2d00      	cmp	r5, #0
 80134a4:	d1f9      	bne.n	801349a <USBD_GetString+0xe>
 80134a6:	3301      	adds	r3, #1
 80134a8:	005b      	lsls	r3, r3, #1
  unicode[idx] = USB_DESC_TYPE_STRING;
 80134aa:	2403      	movs	r4, #3
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80134ac:	8013      	strh	r3, [r2, #0]
  unicode[idx] = *(uint8_t *)len;
 80134ae:	700b      	strb	r3, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80134b0:	704c      	strb	r4, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 80134b2:	7804      	ldrb	r4, [r0, #0]
 80134b4:	b15c      	cbz	r4, 80134ce <USBD_GetString+0x42>
  idx++;
 80134b6:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 80134b8:	2500      	movs	r5, #0
    idx++;
 80134ba:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 80134bc:	54cc      	strb	r4, [r1, r3]
    idx++;
 80134be:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 80134c0:	b2d2      	uxtb	r2, r2
    idx++;
 80134c2:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 80134c4:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 80134c6:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 80134ca:	2c00      	cmp	r4, #0
 80134cc:	d1f5      	bne.n	80134ba <USBD_GetString+0x2e>
}
 80134ce:	bc70      	pop	{r4, r5, r6}
 80134d0:	4770      	bx	lr
 80134d2:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 80134d4:	2302      	movs	r3, #2
 80134d6:	e7e8      	b.n	80134aa <USBD_GetString+0x1e>

080134d8 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80134d8:	b538      	push	{r3, r4, r5, lr}
 80134da:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80134dc:	2502      	movs	r5, #2
{
 80134de:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134e0:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80134e2:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 80134e6:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134ea:	f00e fcad 	bl	8021e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 80134ee:	2000      	movs	r0, #0
 80134f0:	bd38      	pop	{r3, r4, r5, pc}
 80134f2:	bf00      	nop

080134f4 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80134f4:	b510      	push	{r4, lr}
 80134f6:	460c      	mov	r4, r1
 80134f8:	4613      	mov	r3, r2
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80134fa:	2100      	movs	r1, #0
 80134fc:	4622      	mov	r2, r4
 80134fe:	f00e fca3 	bl	8021e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 8013502:	2000      	movs	r0, #0
 8013504:	bd10      	pop	{r4, pc}
 8013506:	bf00      	nop

08013508 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013508:	b538      	push	{r3, r4, r5, lr}
 801350a:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 801350c:	2503      	movs	r5, #3
{
 801350e:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013510:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013512:	f8c0 5294 	str.w	r5, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8013516:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801351a:	f00e fca3 	bl	8021e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 801351e:	2000      	movs	r0, #0
 8013520:	bd38      	pop	{r3, r4, r5, pc}
 8013522:	bf00      	nop

08013524 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013524:	b510      	push	{r4, lr}
 8013526:	460c      	mov	r4, r1
 8013528:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801352a:	2100      	movs	r1, #0
 801352c:	4622      	mov	r2, r4
 801352e:	f00e fc99 	bl	8021e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8013532:	2000      	movs	r0, #0
 8013534:	bd10      	pop	{r4, pc}
 8013536:	bf00      	nop

08013538 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013538:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801353a:	2204      	movs	r2, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 801353c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801353e:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013542:	4619      	mov	r1, r3
 8013544:	461a      	mov	r2, r3
 8013546:	f00e fc7f 	bl	8021e48 <USBD_LL_Transmit>

  return USBD_OK;
}
 801354a:	2000      	movs	r0, #0
 801354c:	bd08      	pop	{r3, pc}
 801354e:	bf00      	nop

08013550 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013550:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013552:	2205      	movs	r2, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013554:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013556:	f8c0 2294 	str.w	r2, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801355a:	4619      	mov	r1, r3
 801355c:	461a      	mov	r2, r3
 801355e:	f00e fc81 	bl	8021e64 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8013562:	2000      	movs	r0, #0
 8013564:	bd08      	pop	{r3, pc}
 8013566:	bf00      	nop

08013568 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8013568:	4b10      	ldr	r3, [pc, #64]	; (80135ac <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801356a:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(disk.nbr < _VOLUMES)
 801356c:	7a5c      	ldrb	r4, [r3, #9]
 801356e:	b9dc      	cbnz	r4, 80135a8 <FATFS_LinkDriver+0x40>
    disk.is_initialized[disk.nbr] = 0;
 8013570:	f893 e009 	ldrb.w	lr, [r3, #9]
 8013574:	4602      	mov	r2, r0
    disk.drv[disk.nbr] = drv;
 8013576:	7a5e      	ldrb	r6, [r3, #9]
 8013578:	f004 00ff 	and.w	r0, r4, #255	; 0xff
    disk.lun[disk.nbr] = lun;
 801357c:	7a5d      	ldrb	r5, [r3, #9]
    path[1] = ':';
 801357e:	f04f 0c3a 	mov.w	ip, #58	; 0x3a
    DiskNum = disk.nbr++;
 8013582:	7a5c      	ldrb	r4, [r3, #9]
    disk.drv[disk.nbr] = drv;
 8013584:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    path[2] = '/';
 8013588:	272f      	movs	r7, #47	; 0x2f
    disk.lun[disk.nbr] = lun;
 801358a:	441d      	add	r5, r3
    disk.drv[disk.nbr] = drv;
 801358c:	6072      	str	r2, [r6, #4]
    DiskNum = disk.nbr++;
 801358e:	1c62      	adds	r2, r4, #1
    path[0] = DiskNum + '0';
 8013590:	3430      	adds	r4, #48	; 0x30
    disk.lun[disk.nbr] = lun;
 8013592:	7228      	strb	r0, [r5, #8]
    DiskNum = disk.nbr++;
 8013594:	b2d2      	uxtb	r2, r2
    disk.is_initialized[disk.nbr] = 0;
 8013596:	f803 000e 	strb.w	r0, [r3, lr]
    DiskNum = disk.nbr++;
 801359a:	725a      	strb	r2, [r3, #9]
    path[0] = DiskNum + '0';
 801359c:	700c      	strb	r4, [r1, #0]
    path[3] = 0;
 801359e:	70c8      	strb	r0, [r1, #3]
    path[1] = ':';
 80135a0:	f881 c001 	strb.w	ip, [r1, #1]
    path[2] = '/';
 80135a4:	708f      	strb	r7, [r1, #2]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80135a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  uint8_t ret = 1;
 80135a8:	2001      	movs	r0, #1
}
 80135aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80135ac:	20001d34 	.word	0x20001d34

080135b0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80135b0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80135b2:	f001 f94f 	bl	8014854 <vTaskStartScheduler>
  
  return osOK;
}
 80135b6:	2000      	movs	r0, #0
 80135b8:	bd08      	pop	{r3, pc}
 80135ba:	bf00      	nop

080135bc <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80135bc:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 80135c0:	b10b      	cbz	r3, 80135c6 <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 80135c2:	f001 b99d 	b.w	8014900 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 80135c6:	f001 b995 	b.w	80148f4 <xTaskGetTickCount>
 80135ca:	bf00      	nop

080135cc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80135cc:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80135ce:	6944      	ldr	r4, [r0, #20]
{
 80135d0:	b086      	sub	sp, #24
 80135d2:	4602      	mov	r2, r0
 80135d4:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80135d6:	b18c      	cbz	r4, 80135fc <osThreadCreate+0x30>
 80135d8:	6986      	ldr	r6, [r0, #24]
 80135da:	b17e      	cbz	r6, 80135fc <osThreadCreate+0x30>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135dc:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 80135e0:	6912      	ldr	r2, [r2, #16]
  if (priority != osPriorityError) {
 80135e2:	2d84      	cmp	r5, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 80135e4:	bf14      	ite	ne
 80135e6:	3503      	addne	r5, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80135e8:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135ea:	e9d0 1000 	ldrd	r1, r0, [r0]
 80135ee:	e9cd 4601 	strd	r4, r6, [sp, #4]
 80135f2:	9500      	str	r5, [sp, #0]
 80135f4:	f001 f8bc 	bl	8014770 <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 80135f8:	b006      	add	sp, #24
 80135fa:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80135fc:	f9b2 4008 	ldrsh.w	r4, [r2, #8]
 8013600:	ad05      	add	r5, sp, #20
  if (priority != osPriorityError) {
 8013602:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8013604:	bf14      	ite	ne
 8013606:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8013608:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801360a:	e9d2 1000 	ldrd	r1, r0, [r2]
 801360e:	8a12      	ldrh	r2, [r2, #16]
 8013610:	e9cd 4500 	strd	r4, r5, [sp]
 8013614:	f001 f8ea 	bl	80147ec <xTaskCreate>
 8013618:	2801      	cmp	r0, #1
 801361a:	bf0c      	ite	eq
 801361c:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 801361e:	2000      	movne	r0, #0
}
 8013620:	b006      	add	sp, #24
 8013622:	bd70      	pop	{r4, r5, r6, pc}

08013624 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013624:	2801      	cmp	r0, #1
{
 8013626:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8013628:	bf38      	it	cc
 801362a:	2001      	movcc	r0, #1
 801362c:	f001 fab0 	bl	8014b90 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8013630:	2000      	movs	r0, #0
 8013632:	bd08      	pop	{r3, pc}

08013634 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8013634:	4613      	mov	r3, r2
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
 8013636:	e9d0 0200 	ldrd	r0, r2, [r0]
{
 801363a:	b500      	push	{lr}
 801363c:	b083      	sub	sp, #12
  if(timer_def->controlblock != NULL) {
 801363e:	b16a      	cbz	r2, 801365c <osTimerCreate+0x28>
    return xTimerCreateStatic((const char *)"",
 8013640:	9201      	str	r2, [sp, #4]
 8013642:	f1a1 0201 	sub.w	r2, r1, #1
 8013646:	2101      	movs	r1, #1
 8013648:	9000      	str	r0, [sp, #0]
 801364a:	fab2 f282 	clz	r2, r2
 801364e:	480a      	ldr	r0, [pc, #40]	; (8013678 <osTimerCreate+0x44>)
 8013650:	0952      	lsrs	r2, r2, #5
 8013652:	f001 feb1 	bl	80153b8 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8013656:	b003      	add	sp, #12
 8013658:	f85d fb04 	ldr.w	pc, [sp], #4
    return xTimerCreate((const char *)"",
 801365c:	f1a1 0201 	sub.w	r2, r1, #1
 8013660:	2101      	movs	r1, #1
 8013662:	9000      	str	r0, [sp, #0]
 8013664:	fab2 f282 	clz	r2, r2
 8013668:	4803      	ldr	r0, [pc, #12]	; (8013678 <osTimerCreate+0x44>)
 801366a:	0952      	lsrs	r2, r2, #5
 801366c:	f001 fe86 	bl	801537c <xTimerCreate>
}
 8013670:	b003      	add	sp, #12
 8013672:	f85d fb04 	ldr.w	pc, [sp], #4
 8013676:	bf00      	nop
 8013678:	08027568 	.word	0x08027568

0801367c <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 801367c:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 801367e:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8013680:	b109      	cbz	r1, 8013686 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8013682:	f000 bbb9 	b.w	8013df8 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8013686:	f000 bbcf 	b.w	8013e28 <xQueueCreateMutex>
 801368a:	bf00      	nop

0801368c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 801368c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801368e:	2400      	movs	r4, #0
{
 8013690:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8013692:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8013694:	b300      	cbz	r0, 80136d8 <osMutexWait+0x4c>
 8013696:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801369a:	b933      	cbnz	r3, 80136aa <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 801369c:	f000 fd62 	bl	8014164 <xQueueSemaphoreTake>
 80136a0:	2801      	cmp	r0, #1
 80136a2:	d116      	bne.n	80136d2 <osMutexWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 80136a4:	2000      	movs	r0, #0
}
 80136a6:	b002      	add	sp, #8
 80136a8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80136aa:	aa01      	add	r2, sp, #4
 80136ac:	4621      	mov	r1, r4
 80136ae:	f000 fe3b 	bl	8014328 <xQueueReceiveFromISR>
 80136b2:	2801      	cmp	r0, #1
 80136b4:	d10d      	bne.n	80136d2 <osMutexWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80136b6:	9b01      	ldr	r3, [sp, #4]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d0f3      	beq.n	80136a4 <osMutexWait+0x18>
 80136bc:	4b08      	ldr	r3, [pc, #32]	; (80136e0 <osMutexWait+0x54>)
 80136be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136c2:	601a      	str	r2, [r3, #0]
 80136c4:	f3bf 8f4f 	dsb	sy
 80136c8:	f3bf 8f6f 	isb	sy
  return osOK;
 80136cc:	4620      	mov	r0, r4
}
 80136ce:	b002      	add	sp, #8
 80136d0:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80136d2:	20ff      	movs	r0, #255	; 0xff
}
 80136d4:	b002      	add	sp, #8
 80136d6:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80136d8:	2080      	movs	r0, #128	; 0x80
}
 80136da:	b002      	add	sp, #8
 80136dc:	bd10      	pop	{r4, pc}
 80136de:	bf00      	nop
 80136e0:	e000ed04 	.word	0xe000ed04

080136e4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 80136e4:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 80136e6:	2400      	movs	r4, #0
{
 80136e8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 80136ea:	9401      	str	r4, [sp, #4]
 80136ec:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 80136f0:	b18b      	cbz	r3, 8013716 <osMutexRelease+0x32>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80136f2:	a901      	add	r1, sp, #4
 80136f4:	f000 fc1c 	bl	8013f30 <xQueueGiveFromISR>
 80136f8:	2801      	cmp	r0, #1
 80136fa:	d112      	bne.n	8013722 <osMutexRelease+0x3e>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 80136fc:	9b01      	ldr	r3, [sp, #4]
 80136fe:	b19b      	cbz	r3, 8013728 <osMutexRelease+0x44>
 8013700:	4b0b      	ldr	r3, [pc, #44]	; (8013730 <osMutexRelease+0x4c>)
 8013702:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013706:	601a      	str	r2, [r3, #0]
 8013708:	f3bf 8f4f 	dsb	sy
 801370c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8013710:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8013712:	b002      	add	sp, #8
 8013714:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8013716:	461a      	mov	r2, r3
 8013718:	4619      	mov	r1, r3
 801371a:	f000 fa9d 	bl	8013c58 <xQueueGenericSend>
 801371e:	2801      	cmp	r0, #1
 8013720:	d002      	beq.n	8013728 <osMutexRelease+0x44>
    result = osErrorOS;
 8013722:	20ff      	movs	r0, #255	; 0xff
}
 8013724:	b002      	add	sp, #8
 8013726:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 8013728:	2000      	movs	r0, #0
}
 801372a:	b002      	add	sp, #8
 801372c:	bd10      	pop	{r4, pc}
 801372e:	bf00      	nop
 8013730:	e000ed04 	.word	0xe000ed04

08013734 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8013734:	b510      	push	{r4, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8013736:	6844      	ldr	r4, [r0, #4]
{ 
 8013738:	b082      	sub	sp, #8
 801373a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 801373c:	b184      	cbz	r4, 8013760 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801373e:	2901      	cmp	r1, #1
 8013740:	d003      	beq.n	801374a <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8013742:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8013744:	4620      	mov	r0, r4
 8013746:	b002      	add	sp, #8
 8013748:	bd10      	pop	{r4, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801374a:	2200      	movs	r2, #0
 801374c:	2103      	movs	r1, #3
 801374e:	4623      	mov	r3, r4
 8013750:	9100      	str	r1, [sp, #0]
 8013752:	4611      	mov	r1, r2
 8013754:	f000 fa1c 	bl	8013b90 <xQueueGenericCreateStatic>
 8013758:	4604      	mov	r4, r0
}
 801375a:	4620      	mov	r0, r4
 801375c:	b002      	add	sp, #8
 801375e:	bd10      	pop	{r4, pc}
    if (count == 1) {
 8013760:	2901      	cmp	r1, #1
 8013762:	d1ef      	bne.n	8013744 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8013764:	4621      	mov	r1, r4
 8013766:	2203      	movs	r2, #3
 8013768:	f000 fa68 	bl	8013c3c <xQueueGenericCreate>
 801376c:	4604      	mov	r4, r0
 801376e:	2800      	cmp	r0, #0
 8013770:	d0e8      	beq.n	8013744 <osSemaphoreCreate+0x10>
 8013772:	2300      	movs	r3, #0
 8013774:	461a      	mov	r2, r3
 8013776:	4619      	mov	r1, r3
 8013778:	f000 fa6e 	bl	8013c58 <xQueueGenericSend>
 801377c:	e7e2      	b.n	8013744 <osSemaphoreCreate+0x10>
 801377e:	bf00      	nop

08013780 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8013780:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8013782:	2400      	movs	r4, #0
{
 8013784:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8013786:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8013788:	b300      	cbz	r0, 80137cc <osSemaphoreWait+0x4c>
 801378a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801378e:	b933      	cbnz	r3, 801379e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8013790:	f000 fce8 	bl	8014164 <xQueueSemaphoreTake>
 8013794:	2801      	cmp	r0, #1
 8013796:	d116      	bne.n	80137c6 <osSemaphoreWait+0x46>
    return osErrorOS;
  }
  
  return osOK;
 8013798:	2000      	movs	r0, #0
}
 801379a:	b002      	add	sp, #8
 801379c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801379e:	aa01      	add	r2, sp, #4
 80137a0:	4621      	mov	r1, r4
 80137a2:	f000 fdc1 	bl	8014328 <xQueueReceiveFromISR>
 80137a6:	2801      	cmp	r0, #1
 80137a8:	d10d      	bne.n	80137c6 <osSemaphoreWait+0x46>
	portEND_SWITCHING_ISR(taskWoken);
 80137aa:	9b01      	ldr	r3, [sp, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d0f3      	beq.n	8013798 <osSemaphoreWait+0x18>
 80137b0:	4b08      	ldr	r3, [pc, #32]	; (80137d4 <osSemaphoreWait+0x54>)
 80137b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137b6:	601a      	str	r2, [r3, #0]
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	f3bf 8f6f 	isb	sy
  return osOK;
 80137c0:	4620      	mov	r0, r4
}
 80137c2:	b002      	add	sp, #8
 80137c4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80137c6:	20ff      	movs	r0, #255	; 0xff
}
 80137c8:	b002      	add	sp, #8
 80137ca:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80137cc:	2080      	movs	r0, #128	; 0x80
}
 80137ce:	b002      	add	sp, #8
 80137d0:	bd10      	pop	{r4, pc}
 80137d2:	bf00      	nop
 80137d4:	e000ed04 	.word	0xe000ed04

080137d8 <osSemaphoreRelease>:
 80137d8:	f7ff bf84 	b.w	80136e4 <osMutexRelease>

080137dc <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80137dc:	6882      	ldr	r2, [r0, #8]
 80137de:	b15a      	cbz	r2, 80137f8 <osMessageCreate+0x1c>
 80137e0:	68c3      	ldr	r3, [r0, #12]
 80137e2:	b14b      	cbz	r3, 80137f8 <osMessageCreate+0x1c>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80137e4:	6841      	ldr	r1, [r0, #4]
{
 80137e6:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80137e8:	2400      	movs	r4, #0
{
 80137ea:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80137ec:	9400      	str	r4, [sp, #0]
 80137ee:	6800      	ldr	r0, [r0, #0]
 80137f0:	f000 f9ce 	bl	8013b90 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80137f4:	b002      	add	sp, #8
 80137f6:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80137f8:	2200      	movs	r2, #0
 80137fa:	e9d0 0100 	ldrd	r0, r1, [r0]
 80137fe:	f000 ba1d 	b.w	8013c3c <xQueueGenericCreate>
 8013802:	bf00      	nop

08013804 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8013804:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8013806:	2400      	movs	r4, #0
{
 8013808:	b084      	sub	sp, #16
 801380a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 801380c:	9403      	str	r4, [sp, #12]
 801380e:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8013812:	b15b      	cbz	r3, 801382c <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8013814:	4623      	mov	r3, r4
 8013816:	aa03      	add	r2, sp, #12
 8013818:	a901      	add	r1, sp, #4
 801381a:	f000 fb17 	bl	8013e4c <xQueueGenericSendFromISR>
 801381e:	2801      	cmp	r0, #1
 8013820:	d10c      	bne.n	801383c <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8013822:	9b03      	ldr	r3, [sp, #12]
 8013824:	b96b      	cbnz	r3, 8013842 <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8013826:	2000      	movs	r0, #0
}
 8013828:	b004      	add	sp, #16
 801382a:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801382c:	2a01      	cmp	r2, #1
 801382e:	a901      	add	r1, sp, #4
 8013830:	bf38      	it	cc
 8013832:	2201      	movcc	r2, #1
 8013834:	f000 fa10 	bl	8013c58 <xQueueGenericSend>
 8013838:	2801      	cmp	r0, #1
 801383a:	d0f4      	beq.n	8013826 <osMessagePut+0x22>
      return osErrorOS;
 801383c:	20ff      	movs	r0, #255	; 0xff
}
 801383e:	b004      	add	sp, #16
 8013840:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8013842:	4b05      	ldr	r3, [pc, #20]	; (8013858 <osMessagePut+0x54>)
 8013844:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013848:	601a      	str	r2, [r3, #0]
 801384a:	f3bf 8f4f 	dsb	sy
 801384e:	f3bf 8f6f 	isb	sy
  return osOK;
 8013852:	4620      	mov	r0, r4
}
 8013854:	b004      	add	sp, #16
 8013856:	bd10      	pop	{r4, pc}
 8013858:	e000ed04 	.word	0xe000ed04

0801385c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 801385c:	b530      	push	{r4, r5, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 801385e:	2300      	movs	r3, #0
{
 8013860:	b085      	sub	sp, #20
 8013862:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 8013864:	e9cd 3102 	strd	r3, r1, [sp, #8]
  
  if (queue_id == NULL) {
 8013868:	b361      	cbz	r1, 80138c4 <osMessageGet+0x68>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8013870:	b993      	cbnz	r3, 8013898 <osMessageGet+0x3c>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8013872:	4608      	mov	r0, r1
 8013874:	a902      	add	r1, sp, #8
 8013876:	4615      	mov	r5, r2
 8013878:	f000 fbb8 	bl	8013fec <xQueueReceive>
 801387c:	2801      	cmp	r0, #1
 801387e:	d02b      	beq.n	80138d8 <osMessageGet+0x7c>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8013880:	2d00      	cmp	r5, #0
 8013882:	bf18      	it	ne
 8013884:	2540      	movne	r5, #64	; 0x40
 8013886:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 8013888:	ab04      	add	r3, sp, #16
 801388a:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 801388e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8013892:	4620      	mov	r0, r4
 8013894:	b005      	add	sp, #20
 8013896:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8013898:	466a      	mov	r2, sp
 801389a:	4608      	mov	r0, r1
 801389c:	a902      	add	r1, sp, #8
 801389e:	f000 fd43 	bl	8014328 <xQueueReceiveFromISR>
      event.status = osOK;
 80138a2:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 80138a4:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80138a6:	bf0c      	ite	eq
 80138a8:	2210      	moveq	r2, #16
 80138aa:	2200      	movne	r2, #0
 80138ac:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d0ea      	beq.n	8013888 <osMessageGet+0x2c>
 80138b2:	4b0b      	ldr	r3, [pc, #44]	; (80138e0 <osMessageGet+0x84>)
 80138b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138b8:	601a      	str	r2, [r3, #0]
 80138ba:	f3bf 8f4f 	dsb	sy
 80138be:	f3bf 8f6f 	isb	sy
 80138c2:	e7e1      	b.n	8013888 <osMessageGet+0x2c>
    event.status = osErrorParameter;
 80138c4:	2380      	movs	r3, #128	; 0x80
 80138c6:	9301      	str	r3, [sp, #4]
    return event;
 80138c8:	ab04      	add	r3, sp, #16
 80138ca:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80138ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80138d2:	4620      	mov	r0, r4
 80138d4:	b005      	add	sp, #20
 80138d6:	bd30      	pop	{r4, r5, pc}
      event.status = osEventMessage;
 80138d8:	2310      	movs	r3, #16
 80138da:	9301      	str	r3, [sp, #4]
 80138dc:	e7d4      	b.n	8013888 <osMessageGet+0x2c>
 80138de:	bf00      	nop
 80138e0:	e000ed04 	.word	0xe000ed04

080138e4 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138e4:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80138e8:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80138ec:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80138ee:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80138f0:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138f2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80138f4:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80138f8:	4770      	bx	lr
 80138fa:	bf00      	nop

080138fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80138fc:	2300      	movs	r3, #0
 80138fe:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013900:	4770      	bx	lr
 8013902:	bf00      	nop

08013904 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8013904:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8013906:	6802      	ldr	r2, [r0, #0]
{
 8013908:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801390a:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 801390c:	3201      	adds	r2, #1
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801390e:	e9c1 3401 	strd	r3, r4, [r1, #4]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013912:	689c      	ldr	r4, [r3, #8]
 8013914:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013916:	6099      	str	r1, [r3, #8]
}
 8013918:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 801391c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801391e:	6002      	str	r2, [r0, #0]
}
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop

08013924 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013924:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013926:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013928:	1c6b      	adds	r3, r5, #1
 801392a:	d010      	beq.n	801394e <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801392c:	f100 0308 	add.w	r3, r0, #8
 8013930:	461c      	mov	r4, r3
 8013932:	685b      	ldr	r3, [r3, #4]
 8013934:	681a      	ldr	r2, [r3, #0]
 8013936:	42aa      	cmp	r2, r5
 8013938:	d9fa      	bls.n	8013930 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 801393a:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801393c:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801393e:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013940:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013942:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8013944:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8013946:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8013948:	6002      	str	r2, [r0, #0]
}
 801394a:	bc30      	pop	{r4, r5}
 801394c:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801394e:	6904      	ldr	r4, [r0, #16]
 8013950:	6863      	ldr	r3, [r4, #4]
 8013952:	e7f2      	b.n	801393a <vListInsert+0x16>

08013954 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013954:	6903      	ldr	r3, [r0, #16]
{
 8013956:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013958:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801395a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 801395e:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 8013960:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013964:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013966:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 8013968:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801396c:	bf08      	it	eq
 801396e:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8013970:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 8013972:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8013974:	3a01      	subs	r2, #1
 8013976:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 8013978:	6818      	ldr	r0, [r3, #0]
}
 801397a:	4770      	bx	lr

0801397c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801397c:	b570      	push	{r4, r5, r6, lr}
 801397e:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013980:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8013982:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013984:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013986:	b92a      	cbnz	r2, 8013994 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013988:	6805      	ldr	r5, [r0, #0]
 801398a:	b365      	cbz	r5, 80139e6 <prvCopyDataToQueue+0x6a>
 801398c:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801398e:	4610      	mov	r0, r2
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013990:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 8013992:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8013994:	b97d      	cbnz	r5, 80139b6 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013996:	6840      	ldr	r0, [r0, #4]
 8013998:	f00e fc0a 	bl	80221b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801399c:	6863      	ldr	r3, [r4, #4]
 801399e:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139a0:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139a2:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139a4:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80139a6:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139a8:	d319      	bcc.n	80139de <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80139aa:	6822      	ldr	r2, [r4, #0]
 80139ac:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80139ae:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80139b0:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139b2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80139b4:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80139b6:	68c0      	ldr	r0, [r0, #12]
 80139b8:	f00e fbfa 	bl	80221b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80139bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80139be:	68e3      	ldr	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139c0:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80139c2:	4250      	negs	r0, r2
 80139c4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139c6:	428b      	cmp	r3, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80139c8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80139ca:	d202      	bcs.n	80139d2 <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80139cc:	68a3      	ldr	r3, [r4, #8]
 80139ce:	4403      	add	r3, r0
 80139d0:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80139d2:	2d02      	cmp	r5, #2
 80139d4:	d00d      	beq.n	80139f2 <prvCopyDataToQueue+0x76>
 80139d6:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80139d8:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139da:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80139dc:	bd70      	pop	{r4, r5, r6, pc}
 80139de:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80139e0:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80139e2:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80139e4:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80139e6:	6880      	ldr	r0, [r0, #8]
 80139e8:	3601      	adds	r6, #1
 80139ea:	f001 fa93 	bl	8014f14 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80139ee:	60a5      	str	r5, [r4, #8]
 80139f0:	e7ce      	b.n	8013990 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139f2:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 80139f4:	f04f 0000 	mov.w	r0, #0
 80139f8:	bf38      	it	cc
 80139fa:	2601      	movcc	r6, #1
 80139fc:	e7c8      	b.n	8013990 <prvCopyDataToQueue+0x14>
 80139fe:	bf00      	nop

08013a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013a00:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8013a02:	b172      	cbz	r2, 8013a22 <prvCopyDataFromQueue+0x22>
 8013a04:	460b      	mov	r3, r1
{
 8013a06:	b410      	push	{r4}
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013a08:	e9d0 4102 	ldrd	r4, r1, [r0, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a0c:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013a0e:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013a10:	60c1      	str	r1, [r0, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013a12:	d301      	bcc.n	8013a18 <prvCopyDataFromQueue+0x18>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013a14:	6801      	ldr	r1, [r0, #0]
 8013a16:	60c1      	str	r1, [r0, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a18:	4618      	mov	r0, r3
	}
}
 8013a1a:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013a1e:	f00e bbc7 	b.w	80221b0 <memcpy>
 8013a22:	4770      	bx	lr

08013a24 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013a24:	b570      	push	{r4, r5, r6, lr}
 8013a26:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013a28:	f001 feec 	bl	8015804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013a2c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8013a30:	b26d      	sxtb	r5, r5

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a32:	2d00      	cmp	r5, #0
 8013a34:	dd15      	ble.n	8013a62 <prvUnlockQueue+0x3e>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a36:	f104 0624 	add.w	r6, r4, #36	; 0x24
 8013a3a:	e004      	b.n	8013a46 <prvUnlockQueue+0x22>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013a3c:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a3e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a42:	b25d      	sxtb	r5, r3
 8013a44:	d00d      	beq.n	8013a62 <prvUnlockQueue+0x3e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a46:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a48:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013a4a:	b153      	cbz	r3, 8013a62 <prvUnlockQueue+0x3e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013a4c:	f001 f94a 	bl	8014ce4 <xTaskRemoveFromEventList>
 8013a50:	2800      	cmp	r0, #0
 8013a52:	d0f3      	beq.n	8013a3c <prvUnlockQueue+0x18>
						vTaskMissedYield();
 8013a54:	f001 f9ea 	bl	8014e2c <vTaskMissedYield>
			--cTxLock;
 8013a58:	1e6b      	subs	r3, r5, #1
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013a5a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a5e:	b25d      	sxtb	r5, r3
 8013a60:	d1f1      	bne.n	8013a46 <prvUnlockQueue+0x22>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013a62:	23ff      	movs	r3, #255	; 0xff
 8013a64:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013a68:	f001 fef2 	bl	8015850 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013a6c:	f001 feca 	bl	8015804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013a70:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8013a74:	b26d      	sxtb	r5, r5

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a76:	2d00      	cmp	r5, #0
 8013a78:	dd15      	ble.n	8013aa6 <prvUnlockQueue+0x82>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a7a:	f104 0610 	add.w	r6, r4, #16
 8013a7e:	e004      	b.n	8013a8a <prvUnlockQueue+0x66>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013a80:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013a86:	b25d      	sxtb	r5, r3
 8013a88:	d00d      	beq.n	8013aa6 <prvUnlockQueue+0x82>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a8a:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a8c:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a8e:	b153      	cbz	r3, 8013aa6 <prvUnlockQueue+0x82>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a90:	f001 f928 	bl	8014ce4 <xTaskRemoveFromEventList>
 8013a94:	2800      	cmp	r0, #0
 8013a96:	d0f3      	beq.n	8013a80 <prvUnlockQueue+0x5c>
					vTaskMissedYield();
 8013a98:	f001 f9c8 	bl	8014e2c <vTaskMissedYield>
				--cRxLock;
 8013a9c:	1e6b      	subs	r3, r5, #1
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013a9e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8013aa2:	b25d      	sxtb	r5, r3
 8013aa4:	d1f1      	bne.n	8013a8a <prvUnlockQueue+0x66>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013aa6:	23ff      	movs	r3, #255	; 0xff
 8013aa8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 8013aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8013ab0:	f001 bece 	b.w	8015850 <vPortExitCritical>

08013ab4 <xQueueGenericReset>:
{
 8013ab4:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 8013ab6:	b1e0      	cbz	r0, 8013af2 <xQueueGenericReset+0x3e>
	taskENTER_CRITICAL();
 8013ab8:	4604      	mov	r4, r0
 8013aba:	460d      	mov	r5, r1
 8013abc:	f001 fea2 	bl	8015804 <vPortEnterCritical>
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013ac0:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ac2:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013ac4:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8013ac6:	21ff      	movs	r1, #255	; 0xff
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013ac8:	6062      	str	r2, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
 8013aca:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013ace:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ad2:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8013ad6:	fb03 f300 	mul.w	r3, r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ada:	1a18      	subs	r0, r3, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013adc:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ade:	4402      	add	r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ae0:	60a3      	str	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013ae2:	60e2      	str	r2, [r4, #12]
		if( xNewQueue == pdFALSE )
 8013ae4:	b9fd      	cbnz	r5, 8013b26 <xQueueGenericReset+0x72>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ae6:	6923      	ldr	r3, [r4, #16]
 8013ae8:	b973      	cbnz	r3, 8013b08 <xQueueGenericReset+0x54>
	taskEXIT_CRITICAL();
 8013aea:	f001 feb1 	bl	8015850 <vPortExitCritical>
}
 8013aee:	2001      	movs	r0, #1
 8013af0:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8013af2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013af6:	b672      	cpsid	i
 8013af8:	f383 8811 	msr	BASEPRI, r3
 8013afc:	f3bf 8f6f 	isb	sy
 8013b00:	f3bf 8f4f 	dsb	sy
 8013b04:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013b06:	e7fe      	b.n	8013b06 <xQueueGenericReset+0x52>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013b08:	f104 0010 	add.w	r0, r4, #16
 8013b0c:	f001 f8ea 	bl	8014ce4 <xTaskRemoveFromEventList>
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d0ea      	beq.n	8013aea <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8013b14:	4b0a      	ldr	r3, [pc, #40]	; (8013b40 <xQueueGenericReset+0x8c>)
 8013b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b1a:	601a      	str	r2, [r3, #0]
 8013b1c:	f3bf 8f4f 	dsb	sy
 8013b20:	f3bf 8f6f 	isb	sy
 8013b24:	e7e1      	b.n	8013aea <xQueueGenericReset+0x36>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013b26:	f104 0010 	add.w	r0, r4, #16
 8013b2a:	f7ff fedb 	bl	80138e4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013b2e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013b32:	f7ff fed7 	bl	80138e4 <vListInitialise>
	taskEXIT_CRITICAL();
 8013b36:	f001 fe8b 	bl	8015850 <vPortExitCritical>
}
 8013b3a:	2001      	movs	r0, #1
 8013b3c:	bd38      	pop	{r3, r4, r5, pc}
 8013b3e:	bf00      	nop
 8013b40:	e000ed04 	.word	0xe000ed04

08013b44 <xQueueGenericCreate.part.0>:
	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
 8013b44:	b570      	push	{r4, r5, r6, lr}
 8013b46:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
 8013b48:	460d      	mov	r5, r1
 8013b4a:	b169      	cbz	r1, 8013b68 <xQueueGenericCreate.part.0+0x24>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b4c:	fb00 f001 	mul.w	r0, r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013b50:	3048      	adds	r0, #72	; 0x48
 8013b52:	f001 ffc5 	bl	8015ae0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013b56:	4604      	mov	r4, r0
 8013b58:	b1b0      	cbz	r0, 8013b88 <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013b5a:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013b5c:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013b60:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013b64:	6003      	str	r3, [r0, #0]
 8013b66:	e007      	b.n	8013b78 <xQueueGenericCreate.part.0+0x34>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013b68:	2048      	movs	r0, #72	; 0x48
 8013b6a:	f001 ffb9 	bl	8015ae0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8013b6e:	4604      	mov	r4, r0
 8013b70:	b150      	cbz	r0, 8013b88 <xQueueGenericCreate.part.0+0x44>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013b72:	f884 5046 	strb.w	r5, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013b76:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b78:	2101      	movs	r1, #1
 8013b7a:	4620      	mov	r0, r4
	pxNewQueue->uxLength = uxQueueLength;
 8013b7c:	63e6      	str	r6, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013b7e:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013b80:	f7ff ff98 	bl	8013ab4 <xQueueGenericReset>
	}
 8013b84:	4620      	mov	r0, r4
 8013b86:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013b88:	2400      	movs	r4, #0
	}
 8013b8a:	4620      	mov	r0, r4
 8013b8c:	bd70      	pop	{r4, r5, r6, pc}
 8013b8e:	bf00      	nop

08013b90 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013b90:	b950      	cbnz	r0, 8013ba8 <xQueueGenericCreateStatic+0x18>
 8013b92:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013b96:	b672      	cpsid	i
 8013b98:	f383 8811 	msr	BASEPRI, r3
 8013b9c:	f3bf 8f6f 	isb	sy
 8013ba0:	f3bf 8f4f 	dsb	sy
 8013ba4:	b662      	cpsie	i
 8013ba6:	e7fe      	b.n	8013ba6 <xQueueGenericCreateStatic+0x16>
	{
 8013ba8:	b530      	push	{r4, r5, lr}
 8013baa:	461c      	mov	r4, r3
 8013bac:	b083      	sub	sp, #12
		configASSERT( pxStaticQueue != NULL );
 8013bae:	b353      	cbz	r3, 8013c06 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013bb0:	460d      	mov	r5, r1
 8013bb2:	b162      	cbz	r2, 8013bce <xQueueGenericCreateStatic+0x3e>
 8013bb4:	b951      	cbnz	r1, 8013bcc <xQueueGenericCreateStatic+0x3c>
 8013bb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bba:	b672      	cpsid	i
 8013bbc:	f383 8811 	msr	BASEPRI, r3
 8013bc0:	f3bf 8f6f 	isb	sy
 8013bc4:	f3bf 8f4f 	dsb	sy
 8013bc8:	b662      	cpsie	i
 8013bca:	e7fe      	b.n	8013bca <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013bcc:	b95a      	cbnz	r2, 8013be6 <xQueueGenericCreateStatic+0x56>
 8013bce:	b155      	cbz	r5, 8013be6 <xQueueGenericCreateStatic+0x56>
 8013bd0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bd4:	b672      	cpsid	i
 8013bd6:	f383 8811 	msr	BASEPRI, r3
 8013bda:	f3bf 8f6f 	isb	sy
 8013bde:	f3bf 8f4f 	dsb	sy
 8013be2:	b662      	cpsie	i
 8013be4:	e7fe      	b.n	8013be4 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013be6:	2348      	movs	r3, #72	; 0x48
 8013be8:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013bea:	9b01      	ldr	r3, [sp, #4]
 8013bec:	2b48      	cmp	r3, #72	; 0x48
 8013bee:	d015      	beq.n	8013c1c <xQueueGenericCreateStatic+0x8c>
 8013bf0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013bf4:	b672      	cpsid	i
 8013bf6:	f383 8811 	msr	BASEPRI, r3
 8013bfa:	f3bf 8f6f 	isb	sy
 8013bfe:	f3bf 8f4f 	dsb	sy
 8013c02:	b662      	cpsie	i
 8013c04:	e7fe      	b.n	8013c04 <xQueueGenericCreateStatic+0x74>
 8013c06:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c0a:	b672      	cpsid	i
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 8013c1a:	e7fe      	b.n	8013c1a <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013c1c:	2d00      	cmp	r5, #0
 8013c1e:	bf08      	it	eq
 8013c20:	4622      	moveq	r2, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013c22:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 8013c24:	63e0      	str	r0, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013c26:	4620      	mov	r0, r4
 8013c28:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8013c2a:	6425      	str	r5, [r4, #64]	; 0x40
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013c2c:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013c30:	9b01      	ldr	r3, [sp, #4]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013c32:	f7ff ff3f 	bl	8013ab4 <xQueueGenericReset>
	}
 8013c36:	4620      	mov	r0, r4
 8013c38:	b003      	add	sp, #12
 8013c3a:	bd30      	pop	{r4, r5, pc}

08013c3c <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013c3c:	b950      	cbnz	r0, 8013c54 <xQueueGenericCreate+0x18>
 8013c3e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c42:	b672      	cpsid	i
 8013c44:	f383 8811 	msr	BASEPRI, r3
 8013c48:	f3bf 8f6f 	isb	sy
 8013c4c:	f3bf 8f4f 	dsb	sy
 8013c50:	b662      	cpsie	i
 8013c52:	e7fe      	b.n	8013c52 <xQueueGenericCreate+0x16>
 8013c54:	f7ff bf76 	b.w	8013b44 <xQueueGenericCreate.part.0>

08013c58 <xQueueGenericSend>:
{
 8013c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c5c:	b084      	sub	sp, #16
 8013c5e:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8013c60:	2800      	cmp	r0, #0
 8013c62:	f000 8085 	beq.w	8013d70 <xQueueGenericSend+0x118>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c66:	460f      	mov	r7, r1
 8013c68:	4604      	mov	r4, r0
 8013c6a:	461e      	mov	r6, r3
 8013c6c:	2900      	cmp	r1, #0
 8013c6e:	d06d      	beq.n	8013d4c <xQueueGenericSend+0xf4>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c70:	2e02      	cmp	r6, #2
 8013c72:	d10d      	bne.n	8013c90 <xQueueGenericSend+0x38>
 8013c74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013c76:	2b01      	cmp	r3, #1
 8013c78:	d00a      	beq.n	8013c90 <xQueueGenericSend+0x38>
 8013c7a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013c7e:	b672      	cpsid	i
 8013c80:	f383 8811 	msr	BASEPRI, r3
 8013c84:	f3bf 8f6f 	isb	sy
 8013c88:	f3bf 8f4f 	dsb	sy
 8013c8c:	b662      	cpsie	i
 8013c8e:	e7fe      	b.n	8013c8e <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c90:	f001 f8d8 	bl	8014e44 <xTaskGetSchedulerState>
 8013c94:	2800      	cmp	r0, #0
 8013c96:	d076      	beq.n	8013d86 <xQueueGenericSend+0x12e>
 8013c98:	f1a6 0502 	sub.w	r5, r6, #2
{
 8013c9c:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8013ca0:	f8df a150 	ldr.w	sl, [pc, #336]	; 8013df4 <xQueueGenericSend+0x19c>
 8013ca4:	fab5 f585 	clz	r5, r5
		prvLockQueue( pxQueue );
 8013ca8:	46c1      	mov	r9, r8
 8013caa:	096d      	lsrs	r5, r5, #5
 8013cac:	e008      	b.n	8013cc0 <xQueueGenericSend+0x68>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8013cae:	f001 fdcf 	bl	8015850 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8013cb2:	4620      	mov	r0, r4
 8013cb4:	f7ff feb6 	bl	8013a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013cb8:	f000 fedc 	bl	8014a74 <xTaskResumeAll>
{
 8013cbc:	f04f 0801 	mov.w	r8, #1
		taskENTER_CRITICAL();
 8013cc0:	f001 fda0 	bl	8015804 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013cc4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013cc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013cc8:	429a      	cmp	r2, r3
 8013cca:	d36a      	bcc.n	8013da2 <xQueueGenericSend+0x14a>
 8013ccc:	2d00      	cmp	r5, #0
 8013cce:	d168      	bne.n	8013da2 <xQueueGenericSend+0x14a>
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cd0:	9b01      	ldr	r3, [sp, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	f000 8082 	beq.w	8013ddc <xQueueGenericSend+0x184>
				else if( xEntryTimeSet == pdFALSE )
 8013cd8:	f1b8 0f00 	cmp.w	r8, #0
 8013cdc:	d044      	beq.n	8013d68 <xQueueGenericSend+0x110>
		taskEXIT_CRITICAL();
 8013cde:	f001 fdb7 	bl	8015850 <vPortExitCritical>
		vTaskSuspendAll();
 8013ce2:	f000 fdff 	bl	80148e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013ce6:	f001 fd8d 	bl	8015804 <vPortEnterCritical>
 8013cea:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8013cee:	2bff      	cmp	r3, #255	; 0xff
 8013cf0:	d101      	bne.n	8013cf6 <xQueueGenericSend+0x9e>
 8013cf2:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8013cf6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8013cfa:	2bff      	cmp	r3, #255	; 0xff
 8013cfc:	d101      	bne.n	8013d02 <xQueueGenericSend+0xaa>
 8013cfe:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 8013d02:	f001 fda5 	bl	8015850 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d06:	a901      	add	r1, sp, #4
 8013d08:	a802      	add	r0, sp, #8
 8013d0a:	f001 f843 	bl	8014d94 <xTaskCheckForTimeOut>
 8013d0e:	2800      	cmp	r0, #0
 8013d10:	d168      	bne.n	8013de4 <xQueueGenericSend+0x18c>
	taskENTER_CRITICAL();
 8013d12:	f001 fd77 	bl	8015804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013d16:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013d18:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d1c7      	bne.n	8013cae <xQueueGenericSend+0x56>
	taskEXIT_CRITICAL();
 8013d1e:	f001 fd97 	bl	8015850 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013d22:	9901      	ldr	r1, [sp, #4]
 8013d24:	f104 0010 	add.w	r0, r4, #16
 8013d28:	f000 ffa0 	bl	8014c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d2c:	4620      	mov	r0, r4
 8013d2e:	f7ff fe79 	bl	8013a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d32:	f000 fe9f 	bl	8014a74 <xTaskResumeAll>
 8013d36:	2800      	cmp	r0, #0
 8013d38:	d1c0      	bne.n	8013cbc <xQueueGenericSend+0x64>
					portYIELD_WITHIN_API();
 8013d3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8013d3e:	f8ca 3000 	str.w	r3, [sl]
 8013d42:	f3bf 8f4f 	dsb	sy
 8013d46:	f3bf 8f6f 	isb	sy
 8013d4a:	e7b7      	b.n	8013cbc <xQueueGenericSend+0x64>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013d4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d08e      	beq.n	8013c70 <xQueueGenericSend+0x18>
 8013d52:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d56:	b672      	cpsid	i
 8013d58:	f383 8811 	msr	BASEPRI, r3
 8013d5c:	f3bf 8f6f 	isb	sy
 8013d60:	f3bf 8f4f 	dsb	sy
 8013d64:	b662      	cpsie	i
 8013d66:	e7fe      	b.n	8013d66 <xQueueGenericSend+0x10e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013d68:	a802      	add	r0, sp, #8
 8013d6a:	f001 f807 	bl	8014d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013d6e:	e7b6      	b.n	8013cde <xQueueGenericSend+0x86>
 8013d70:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d74:	b672      	cpsid	i
 8013d76:	f383 8811 	msr	BASEPRI, r3
 8013d7a:	f3bf 8f6f 	isb	sy
 8013d7e:	f3bf 8f4f 	dsb	sy
 8013d82:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013d84:	e7fe      	b.n	8013d84 <xQueueGenericSend+0x12c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013d86:	9b01      	ldr	r3, [sp, #4]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d085      	beq.n	8013c98 <xQueueGenericSend+0x40>
 8013d8c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013d90:	b672      	cpsid	i
 8013d92:	f383 8811 	msr	BASEPRI, r3
 8013d96:	f3bf 8f6f 	isb	sy
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	b662      	cpsie	i
 8013da0:	e7fe      	b.n	8013da0 <xQueueGenericSend+0x148>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013da2:	4632      	mov	r2, r6
 8013da4:	4639      	mov	r1, r7
 8013da6:	4620      	mov	r0, r4
 8013da8:	f7ff fde8 	bl	801397c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013dae:	b973      	cbnz	r3, 8013dce <xQueueGenericSend+0x176>
					else if( xYieldRequired != pdFALSE )
 8013db0:	b138      	cbz	r0, 8013dc2 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 8013db2:	4b10      	ldr	r3, [pc, #64]	; (8013df4 <xQueueGenericSend+0x19c>)
 8013db4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013db8:	601a      	str	r2, [r3, #0]
 8013dba:	f3bf 8f4f 	dsb	sy
 8013dbe:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8013dc2:	f001 fd45 	bl	8015850 <vPortExitCritical>
				return pdPASS;
 8013dc6:	2001      	movs	r0, #1
}
 8013dc8:	b004      	add	sp, #16
 8013dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013dce:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013dd2:	f000 ff87 	bl	8014ce4 <xTaskRemoveFromEventList>
 8013dd6:	2800      	cmp	r0, #0
 8013dd8:	d0f3      	beq.n	8013dc2 <xQueueGenericSend+0x16a>
 8013dda:	e7ea      	b.n	8013db2 <xQueueGenericSend+0x15a>
					taskEXIT_CRITICAL();
 8013ddc:	f001 fd38 	bl	8015850 <vPortExitCritical>
					return errQUEUE_FULL;
 8013de0:	4628      	mov	r0, r5
 8013de2:	e7f1      	b.n	8013dc8 <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 8013de4:	4620      	mov	r0, r4
 8013de6:	f7ff fe1d 	bl	8013a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013dea:	f000 fe43 	bl	8014a74 <xTaskResumeAll>
			return errQUEUE_FULL;
 8013dee:	2000      	movs	r0, #0
 8013df0:	e7ea      	b.n	8013dc8 <xQueueGenericSend+0x170>
 8013df2:	bf00      	nop
 8013df4:	e000ed04 	.word	0xe000ed04

08013df8 <xQueueCreateMutexStatic>:
	{
 8013df8:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013dfa:	2200      	movs	r2, #0
	{
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	b082      	sub	sp, #8
 8013e00:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8013e02:	2001      	movs	r0, #1
 8013e04:	4611      	mov	r1, r2
 8013e06:	9400      	str	r4, [sp, #0]
 8013e08:	f7ff fec2 	bl	8013b90 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 8013e0c:	4604      	mov	r4, r0
 8013e0e:	b138      	cbz	r0, 8013e20 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e10:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013e12:	461a      	mov	r2, r3
 8013e14:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e16:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013e18:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013e1a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013e1c:	f7ff ff1c 	bl	8013c58 <xQueueGenericSend>
	}
 8013e20:	4620      	mov	r0, r4
 8013e22:	b002      	add	sp, #8
 8013e24:	bd10      	pop	{r4, pc}
 8013e26:	bf00      	nop

08013e28 <xQueueCreateMutex>:
	{
 8013e28:	b510      	push	{r4, lr}
 8013e2a:	2100      	movs	r1, #0
 8013e2c:	2001      	movs	r0, #1
 8013e2e:	f7ff fe89 	bl	8013b44 <xQueueGenericCreate.part.0>
		if( pxNewQueue != NULL )
 8013e32:	4604      	mov	r4, r0
 8013e34:	b138      	cbz	r0, 8013e46 <xQueueCreateMutex+0x1e>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e36:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013e38:	461a      	mov	r2, r3
 8013e3a:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8013e3c:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8013e3e:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8013e40:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8013e42:	f7ff ff09 	bl	8013c58 <xQueueGenericSend>
	}
 8013e46:	4620      	mov	r0, r4
 8013e48:	bd10      	pop	{r4, pc}
 8013e4a:	bf00      	nop

08013e4c <xQueueGenericSendFromISR>:
{
 8013e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8013e50:	2800      	cmp	r0, #0
 8013e52:	d051      	beq.n	8013ef8 <xQueueGenericSendFromISR+0xac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e54:	4689      	mov	r9, r1
 8013e56:	4604      	mov	r4, r0
 8013e58:	4690      	mov	r8, r2
 8013e5a:	461f      	mov	r7, r3
 8013e5c:	b359      	cbz	r1, 8013eb6 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013e5e:	2f02      	cmp	r7, #2
 8013e60:	d10d      	bne.n	8013e7e <xQueueGenericSendFromISR+0x32>
 8013e62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013e64:	2b01      	cmp	r3, #1
 8013e66:	d00a      	beq.n	8013e7e <xQueueGenericSendFromISR+0x32>
 8013e68:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e6c:	b672      	cpsid	i
 8013e6e:	f383 8811 	msr	BASEPRI, r3
 8013e72:	f3bf 8f6f 	isb	sy
 8013e76:	f3bf 8f4f 	dsb	sy
 8013e7a:	b662      	cpsie	i
 8013e7c:	e7fe      	b.n	8013e7c <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013e7e:	f001 fdcd 	bl	8015a1c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013e82:	f3ef 8611 	mrs	r6, BASEPRI
 8013e86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013e8a:	b672      	cpsid	i
 8013e8c:	f383 8811 	msr	BASEPRI, r3
 8013e90:	f3bf 8f6f 	isb	sy
 8013e94:	f3bf 8f4f 	dsb	sy
 8013e98:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013e9a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8013e9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8013e9e:	429a      	cmp	r2, r3
 8013ea0:	d317      	bcc.n	8013ed2 <xQueueGenericSendFromISR+0x86>
 8013ea2:	f1a7 0002 	sub.w	r0, r7, #2
 8013ea6:	fab0 f080 	clz	r0, r0
 8013eaa:	0940      	lsrs	r0, r0, #5
 8013eac:	b988      	cbnz	r0, 8013ed2 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013eae:	f386 8811 	msr	BASEPRI, r6
}
 8013eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013eb6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	d0d0      	beq.n	8013e5e <xQueueGenericSendFromISR+0x12>
	__asm volatile
 8013ebc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013ec0:	b672      	cpsid	i
 8013ec2:	f383 8811 	msr	BASEPRI, r3
 8013ec6:	f3bf 8f6f 	isb	sy
 8013eca:	f3bf 8f4f 	dsb	sy
 8013ece:	b662      	cpsie	i
 8013ed0:	e7fe      	b.n	8013ed0 <xQueueGenericSendFromISR+0x84>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013ed2:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ed6:	463a      	mov	r2, r7
 8013ed8:	4649      	mov	r1, r9
 8013eda:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8013edc:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ede:	f7ff fd4d 	bl	801397c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8013ee2:	1c6b      	adds	r3, r5, #1
 8013ee4:	d013      	beq.n	8013f0e <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013ee6:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8013ee8:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013eea:	b25b      	sxtb	r3, r3
 8013eec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8013ef0:	f386 8811 	msr	BASEPRI, r6
}
 8013ef4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	__asm volatile
 8013ef8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013efc:	b672      	cpsid	i
 8013efe:	f383 8811 	msr	BASEPRI, r3
 8013f02:	f3bf 8f6f 	isb	sy
 8013f06:	f3bf 8f4f 	dsb	sy
 8013f0a:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013f0c:	e7fe      	b.n	8013f0c <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013f0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013f10:	b90b      	cbnz	r3, 8013f16 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8013f12:	2001      	movs	r0, #1
 8013f14:	e7cb      	b.n	8013eae <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013f16:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013f1a:	f000 fee3 	bl	8014ce4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8013f1e:	2800      	cmp	r0, #0
 8013f20:	d0f7      	beq.n	8013f12 <xQueueGenericSendFromISR+0xc6>
 8013f22:	f1b8 0f00 	cmp.w	r8, #0
 8013f26:	d0f4      	beq.n	8013f12 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013f28:	2001      	movs	r0, #1
 8013f2a:	f8c8 0000 	str.w	r0, [r8]
 8013f2e:	e7be      	b.n	8013eae <xQueueGenericSendFromISR+0x62>

08013f30 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8013f30:	b380      	cbz	r0, 8013f94 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8013f32:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8013f34:	b570      	push	{r4, r5, r6, lr}
 8013f36:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8013f38:	b153      	cbz	r3, 8013f50 <xQueueGiveFromISR+0x20>
 8013f3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f3e:	b672      	cpsid	i
 8013f40:	f383 8811 	msr	BASEPRI, r3
 8013f44:	f3bf 8f6f 	isb	sy
 8013f48:	f3bf 8f4f 	dsb	sy
 8013f4c:	b662      	cpsie	i
 8013f4e:	e7fe      	b.n	8013f4e <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013f50:	6803      	ldr	r3, [r0, #0]
 8013f52:	460d      	mov	r5, r1
 8013f54:	b34b      	cbz	r3, 8013faa <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013f56:	f001 fd61 	bl	8015a1c <vPortValidateInterruptPriority>
	__asm volatile
 8013f5a:	f3ef 8611 	mrs	r6, BASEPRI
 8013f5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f62:	b672      	cpsid	i
 8013f64:	f383 8811 	msr	BASEPRI, r3
 8013f68:	f3bf 8f6f 	isb	sy
 8013f6c:	f3bf 8f4f 	dsb	sy
 8013f70:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013f72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013f74:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8013f76:	429a      	cmp	r2, r3
 8013f78:	d925      	bls.n	8013fc6 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 8013f7a:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f7e:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 8013f80:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f82:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 8013f84:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 8013f86:	d022      	beq.n	8013fce <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013f88:	3301      	adds	r3, #1
			xReturn = pdPASS;
 8013f8a:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013f8c:	b25b      	sxtb	r3, r3
 8013f8e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013f92:	e019      	b.n	8013fc8 <xQueueGiveFromISR+0x98>
	__asm volatile
 8013f94:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013f98:	b672      	cpsid	i
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	b662      	cpsie	i
	configASSERT( pxQueue );
 8013fa8:	e7fe      	b.n	8013fa8 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013faa:	6883      	ldr	r3, [r0, #8]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d0d2      	beq.n	8013f56 <xQueueGiveFromISR+0x26>
 8013fb0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8013fb4:	b672      	cpsid	i
 8013fb6:	f383 8811 	msr	BASEPRI, r3
 8013fba:	f3bf 8f6f 	isb	sy
 8013fbe:	f3bf 8f4f 	dsb	sy
 8013fc2:	b662      	cpsie	i
 8013fc4:	e7fe      	b.n	8013fc4 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 8013fc6:	2000      	movs	r0, #0
	__asm volatile
 8013fc8:	f386 8811 	msr	BASEPRI, r6
}
 8013fcc:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013fd0:	b90b      	cbnz	r3, 8013fd6 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8013fd2:	2001      	movs	r0, #1
 8013fd4:	e7f8      	b.n	8013fc8 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fd6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8013fda:	f000 fe83 	bl	8014ce4 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 8013fde:	2d00      	cmp	r5, #0
 8013fe0:	d0f7      	beq.n	8013fd2 <xQueueGiveFromISR+0xa2>
 8013fe2:	2800      	cmp	r0, #0
 8013fe4:	d0f5      	beq.n	8013fd2 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013fe6:	2001      	movs	r0, #1
 8013fe8:	6028      	str	r0, [r5, #0]
 8013fea:	e7ed      	b.n	8013fc8 <xQueueGiveFromISR+0x98>

08013fec <xQueueReceive>:
{
 8013fec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013ff0:	b085      	sub	sp, #20
 8013ff2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8013ff4:	2800      	cmp	r0, #0
 8013ff6:	f000 808c 	beq.w	8014112 <xQueueReceive+0x126>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ffa:	460e      	mov	r6, r1
 8013ffc:	4604      	mov	r4, r0
 8013ffe:	2900      	cmp	r1, #0
 8014000:	d056      	beq.n	80140b0 <xQueueReceive+0xc4>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014002:	f000 ff1f 	bl	8014e44 <xTaskGetSchedulerState>
 8014006:	2800      	cmp	r0, #0
 8014008:	d044      	beq.n	8014094 <xQueueReceive+0xa8>
		taskENTER_CRITICAL();
 801400a:	f001 fbfb 	bl	8015804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801400e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014010:	2d00      	cmp	r5, #0
 8014012:	f040 8089 	bne.w	8014128 <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014016:	9b01      	ldr	r3, [sp, #4]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d035      	beq.n	8014088 <xQueueReceive+0x9c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 801401c:	a802      	add	r0, sp, #8
		prvLockQueue( pxQueue );
 801401e:	462f      	mov	r7, r5
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014020:	f104 0924 	add.w	r9, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8014024:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8014160 <xQueueReceive+0x174>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014028:	f000 fea8 	bl	8014d7c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801402c:	f001 fc10 	bl	8015850 <vPortExitCritical>
		vTaskSuspendAll();
 8014030:	f000 fc58 	bl	80148e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014034:	f001 fbe6 	bl	8015804 <vPortEnterCritical>
 8014038:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801403c:	2bff      	cmp	r3, #255	; 0xff
 801403e:	d101      	bne.n	8014044 <xQueueReceive+0x58>
 8014040:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8014044:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014048:	2bff      	cmp	r3, #255	; 0xff
 801404a:	d101      	bne.n	8014050 <xQueueReceive+0x64>
 801404c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014050:	f001 fbfe 	bl	8015850 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014054:	a901      	add	r1, sp, #4
 8014056:	a802      	add	r0, sp, #8
 8014058:	f000 fe9c 	bl	8014d94 <xTaskCheckForTimeOut>
 801405c:	2800      	cmp	r0, #0
 801405e:	d135      	bne.n	80140cc <xQueueReceive+0xe0>
	taskENTER_CRITICAL();
 8014060:	f001 fbd0 	bl	8015804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014064:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014066:	2b00      	cmp	r3, #0
 8014068:	d03d      	beq.n	80140e6 <xQueueReceive+0xfa>
	taskEXIT_CRITICAL();
 801406a:	f001 fbf1 	bl	8015850 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 801406e:	4620      	mov	r0, r4
 8014070:	f7ff fcd8 	bl	8013a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014074:	f000 fcfe 	bl	8014a74 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8014078:	f001 fbc4 	bl	8015804 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801407c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801407e:	2d00      	cmp	r5, #0
 8014080:	d152      	bne.n	8014128 <xQueueReceive+0x13c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8014082:	9b01      	ldr	r3, [sp, #4]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d1d1      	bne.n	801402c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
 8014088:	f001 fbe2 	bl	8015850 <vPortExitCritical>
					return errQUEUE_EMPTY;
 801408c:	2000      	movs	r0, #0
}
 801408e:	b005      	add	sp, #20
 8014090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014094:	9b01      	ldr	r3, [sp, #4]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d0b7      	beq.n	801400a <xQueueReceive+0x1e>
	__asm volatile
 801409a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801409e:	b672      	cpsid	i
 80140a0:	f383 8811 	msr	BASEPRI, r3
 80140a4:	f3bf 8f6f 	isb	sy
 80140a8:	f3bf 8f4f 	dsb	sy
 80140ac:	b662      	cpsie	i
 80140ae:	e7fe      	b.n	80140ae <xQueueReceive+0xc2>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80140b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d0a5      	beq.n	8014002 <xQueueReceive+0x16>
 80140b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80140ba:	b672      	cpsid	i
 80140bc:	f383 8811 	msr	BASEPRI, r3
 80140c0:	f3bf 8f6f 	isb	sy
 80140c4:	f3bf 8f4f 	dsb	sy
 80140c8:	b662      	cpsie	i
 80140ca:	e7fe      	b.n	80140ca <xQueueReceive+0xde>
			prvUnlockQueue( pxQueue );
 80140cc:	4620      	mov	r0, r4
 80140ce:	f7ff fca9 	bl	8013a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80140d2:	f000 fccf 	bl	8014a74 <xTaskResumeAll>
	taskENTER_CRITICAL();
 80140d6:	f001 fb95 	bl	8015804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80140da:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d0d3      	beq.n	8014088 <xQueueReceive+0x9c>
	taskEXIT_CRITICAL();
 80140e0:	f001 fbb6 	bl	8015850 <vPortExitCritical>
 80140e4:	e7c8      	b.n	8014078 <xQueueReceive+0x8c>
 80140e6:	f001 fbb3 	bl	8015850 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80140ea:	9901      	ldr	r1, [sp, #4]
 80140ec:	4648      	mov	r0, r9
 80140ee:	f000 fdbd 	bl	8014c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80140f2:	4620      	mov	r0, r4
 80140f4:	f7ff fc96 	bl	8013a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80140f8:	f000 fcbc 	bl	8014a74 <xTaskResumeAll>
 80140fc:	2800      	cmp	r0, #0
 80140fe:	d1bb      	bne.n	8014078 <xQueueReceive+0x8c>
					portYIELD_WITHIN_API();
 8014100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014104:	f8c8 3000 	str.w	r3, [r8]
 8014108:	f3bf 8f4f 	dsb	sy
 801410c:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8014110:	e7b2      	b.n	8014078 <xQueueReceive+0x8c>
 8014112:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014116:	b672      	cpsid	i
 8014118:	f383 8811 	msr	BASEPRI, r3
 801411c:	f3bf 8f6f 	isb	sy
 8014120:	f3bf 8f4f 	dsb	sy
 8014124:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8014126:	e7fe      	b.n	8014126 <xQueueReceive+0x13a>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014128:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801412a:	4631      	mov	r1, r6
 801412c:	4620      	mov	r0, r4
 801412e:	f7ff fc67 	bl	8013a00 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014132:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014134:	6923      	ldr	r3, [r4, #16]
 8014136:	b91b      	cbnz	r3, 8014140 <xQueueReceive+0x154>
				taskEXIT_CRITICAL();
 8014138:	f001 fb8a 	bl	8015850 <vPortExitCritical>
				return pdPASS;
 801413c:	2001      	movs	r0, #1
 801413e:	e7a6      	b.n	801408e <xQueueReceive+0xa2>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014140:	f104 0010 	add.w	r0, r4, #16
 8014144:	f000 fdce 	bl	8014ce4 <xTaskRemoveFromEventList>
 8014148:	2800      	cmp	r0, #0
 801414a:	d0f5      	beq.n	8014138 <xQueueReceive+0x14c>
						queueYIELD_IF_USING_PREEMPTION();
 801414c:	4b04      	ldr	r3, [pc, #16]	; (8014160 <xQueueReceive+0x174>)
 801414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	f3bf 8f4f 	dsb	sy
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	e7ec      	b.n	8014138 <xQueueReceive+0x14c>
 801415e:	bf00      	nop
 8014160:	e000ed04 	.word	0xe000ed04

08014164 <xQueueSemaphoreTake>:
{
 8014164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014168:	b084      	sub	sp, #16
 801416a:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 801416c:	b168      	cbz	r0, 801418a <xQueueSemaphoreTake+0x26>
	configASSERT( pxQueue->uxItemSize == 0 );
 801416e:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8014170:	4604      	mov	r4, r0
 8014172:	b1ad      	cbz	r5, 80141a0 <xQueueSemaphoreTake+0x3c>
 8014174:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014178:	b672      	cpsid	i
 801417a:	f383 8811 	msr	BASEPRI, r3
 801417e:	f3bf 8f6f 	isb	sy
 8014182:	f3bf 8f4f 	dsb	sy
 8014186:	b662      	cpsie	i
 8014188:	e7fe      	b.n	8014188 <xQueueSemaphoreTake+0x24>
 801418a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801418e:	b672      	cpsid	i
 8014190:	f383 8811 	msr	BASEPRI, r3
 8014194:	f3bf 8f6f 	isb	sy
 8014198:	f3bf 8f4f 	dsb	sy
 801419c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 801419e:	e7fe      	b.n	801419e <xQueueSemaphoreTake+0x3a>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80141a0:	f000 fe50 	bl	8014e44 <xTaskGetSchedulerState>
 80141a4:	4606      	mov	r6, r0
 80141a6:	2800      	cmp	r0, #0
 80141a8:	d074      	beq.n	8014294 <xQueueSemaphoreTake+0x130>
 80141aa:	462e      	mov	r6, r5
		taskENTER_CRITICAL();
 80141ac:	f001 fb2a 	bl	8015804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80141b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 80141b2:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80141b4:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8014324 <xQueueSemaphoreTake+0x1c0>
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80141b8:	bb7b      	cbnz	r3, 801421a <xQueueSemaphoreTake+0xb6>
				if( xTicksToWait == ( TickType_t ) 0 )
 80141ba:	9b01      	ldr	r3, [sp, #4]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	f000 80a3 	beq.w	8014308 <xQueueSemaphoreTake+0x1a4>
				else if( xEntryTimeSet == pdFALSE )
 80141c2:	2e00      	cmp	r6, #0
 80141c4:	d062      	beq.n	801428c <xQueueSemaphoreTake+0x128>
		taskEXIT_CRITICAL();
 80141c6:	f001 fb43 	bl	8015850 <vPortExitCritical>
		vTaskSuspendAll();
 80141ca:	f000 fb8b 	bl	80148e4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80141ce:	f001 fb19 	bl	8015804 <vPortEnterCritical>
 80141d2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80141d6:	2bff      	cmp	r3, #255	; 0xff
 80141d8:	d101      	bne.n	80141de <xQueueSemaphoreTake+0x7a>
 80141da:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 80141de:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80141e2:	2bff      	cmp	r3, #255	; 0xff
 80141e4:	d101      	bne.n	80141ea <xQueueSemaphoreTake+0x86>
 80141e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80141ea:	f001 fb31 	bl	8015850 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80141ee:	a901      	add	r1, sp, #4
 80141f0:	a802      	add	r0, sp, #8
 80141f2:	f000 fdcf 	bl	8014d94 <xTaskCheckForTimeOut>
 80141f6:	b9e0      	cbnz	r0, 8014232 <xQueueSemaphoreTake+0xce>
	taskENTER_CRITICAL();
 80141f8:	f001 fb04 	bl	8015804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80141fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80141fe:	b323      	cbz	r3, 801424a <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
 8014200:	f001 fb26 	bl	8015850 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8014204:	4620      	mov	r0, r4
 8014206:	f7ff fc0d 	bl	8013a24 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801420a:	f000 fc33 	bl	8014a74 <xTaskResumeAll>
		taskENTER_CRITICAL();
 801420e:	f001 faf9 	bl	8015804 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014212:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014214:	2601      	movs	r6, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014216:	2b00      	cmp	r3, #0
 8014218:	d0cf      	beq.n	80141ba <xQueueSemaphoreTake+0x56>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801421a:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801421c:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801421e:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014220:	2a00      	cmp	r2, #0
 8014222:	d064      	beq.n	80142ee <xQueueSemaphoreTake+0x18a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014224:	6923      	ldr	r3, [r4, #16]
 8014226:	2b00      	cmp	r3, #0
 8014228:	d152      	bne.n	80142d0 <xQueueSemaphoreTake+0x16c>
				return pdPASS;
 801422a:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 801422c:	f001 fb10 	bl	8015850 <vPortExitCritical>
				return pdPASS;
 8014230:	e028      	b.n	8014284 <xQueueSemaphoreTake+0x120>
			prvUnlockQueue( pxQueue );
 8014232:	4620      	mov	r0, r4
 8014234:	f7ff fbf6 	bl	8013a24 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014238:	f000 fc1c 	bl	8014a74 <xTaskResumeAll>
	taskENTER_CRITICAL();
 801423c:	f001 fae2 	bl	8015804 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014240:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014242:	b1e3      	cbz	r3, 801427e <xQueueSemaphoreTake+0x11a>
	taskEXIT_CRITICAL();
 8014244:	f001 fb04 	bl	8015850 <vPortExitCritical>
	return xReturn;
 8014248:	e7e1      	b.n	801420e <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 801424a:	f001 fb01 	bl	8015850 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801424e:	6823      	ldr	r3, [r4, #0]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d050      	beq.n	80142f6 <xQueueSemaphoreTake+0x192>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014254:	9901      	ldr	r1, [sp, #4]
 8014256:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801425a:	f000 fd07 	bl	8014c6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801425e:	4620      	mov	r0, r4
 8014260:	f7ff fbe0 	bl	8013a24 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014264:	f000 fc06 	bl	8014a74 <xTaskResumeAll>
 8014268:	2800      	cmp	r0, #0
 801426a:	d1d0      	bne.n	801420e <xQueueSemaphoreTake+0xaa>
					portYIELD_WITHIN_API();
 801426c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014270:	f8c8 3000 	str.w	r3, [r8]
 8014274:	f3bf 8f4f 	dsb	sy
 8014278:	f3bf 8f6f 	isb	sy
 801427c:	e7c7      	b.n	801420e <xQueueSemaphoreTake+0xaa>
	taskEXIT_CRITICAL();
 801427e:	f001 fae7 	bl	8015850 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8014282:	b9b5      	cbnz	r5, 80142b2 <xQueueSemaphoreTake+0x14e>
}
 8014284:	4628      	mov	r0, r5
 8014286:	b004      	add	sp, #16
 8014288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					vTaskInternalSetTimeOutState( &xTimeOut );
 801428c:	a802      	add	r0, sp, #8
 801428e:	f000 fd75 	bl	8014d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014292:	e798      	b.n	80141c6 <xQueueSemaphoreTake+0x62>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014294:	9b01      	ldr	r3, [sp, #4]
 8014296:	b153      	cbz	r3, 80142ae <xQueueSemaphoreTake+0x14a>
 8014298:	f04f 0330 	mov.w	r3, #48	; 0x30
 801429c:	b672      	cpsid	i
 801429e:	f383 8811 	msr	BASEPRI, r3
 80142a2:	f3bf 8f6f 	isb	sy
 80142a6:	f3bf 8f4f 	dsb	sy
 80142aa:	b662      	cpsie	i
 80142ac:	e7fe      	b.n	80142ac <xQueueSemaphoreTake+0x148>
 80142ae:	4605      	mov	r5, r0
 80142b0:	e77c      	b.n	80141ac <xQueueSemaphoreTake+0x48>
						taskENTER_CRITICAL();
 80142b2:	f001 faa7 	bl	8015804 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80142b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80142b8:	b119      	cbz	r1, 80142c2 <xQueueSemaphoreTake+0x15e>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80142ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80142bc:	6819      	ldr	r1, [r3, #0]
 80142be:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80142c2:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 80142c4:	2500      	movs	r5, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80142c6:	f000 fe85 	bl	8014fd4 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80142ca:	f001 fac1 	bl	8015850 <vPortExitCritical>
 80142ce:	e7d9      	b.n	8014284 <xQueueSemaphoreTake+0x120>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142d0:	f104 0010 	add.w	r0, r4, #16
 80142d4:	f000 fd06 	bl	8014ce4 <xTaskRemoveFromEventList>
 80142d8:	2800      	cmp	r0, #0
 80142da:	d0a6      	beq.n	801422a <xQueueSemaphoreTake+0xc6>
						queueYIELD_IF_USING_PREEMPTION();
 80142dc:	4b11      	ldr	r3, [pc, #68]	; (8014324 <xQueueSemaphoreTake+0x1c0>)
 80142de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142e2:	601a      	str	r2, [r3, #0]
 80142e4:	f3bf 8f4f 	dsb	sy
 80142e8:	f3bf 8f6f 	isb	sy
 80142ec:	e79d      	b.n	801422a <xQueueSemaphoreTake+0xc6>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80142ee:	f000 fedd 	bl	80150ac <pvTaskIncrementMutexHeldCount>
 80142f2:	60a0      	str	r0, [r4, #8]
 80142f4:	e796      	b.n	8014224 <xQueueSemaphoreTake+0xc0>
						taskENTER_CRITICAL();
 80142f6:	f001 fa85 	bl	8015804 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80142fa:	68a0      	ldr	r0, [r4, #8]
 80142fc:	f000 fdb2 	bl	8014e64 <xTaskPriorityInherit>
 8014300:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 8014302:	f001 faa5 	bl	8015850 <vPortExitCritical>
 8014306:	e7a5      	b.n	8014254 <xQueueSemaphoreTake+0xf0>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014308:	2d00      	cmp	r5, #0
 801430a:	d0de      	beq.n	80142ca <xQueueSemaphoreTake+0x166>
 801430c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014310:	b672      	cpsid	i
 8014312:	f383 8811 	msr	BASEPRI, r3
 8014316:	f3bf 8f6f 	isb	sy
 801431a:	f3bf 8f4f 	dsb	sy
 801431e:	b662      	cpsie	i
 8014320:	e7fe      	b.n	8014320 <xQueueSemaphoreTake+0x1bc>
 8014322:	bf00      	nop
 8014324:	e000ed04 	.word	0xe000ed04

08014328 <xQueueReceiveFromISR>:
{
 8014328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 801432c:	b330      	cbz	r0, 801437c <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801432e:	4689      	mov	r9, r1
 8014330:	4605      	mov	r5, r0
 8014332:	4690      	mov	r8, r2
 8014334:	b1a1      	cbz	r1, 8014360 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014336:	f001 fb71 	bl	8015a1c <vPortValidateInterruptPriority>
	__asm volatile
 801433a:	f3ef 8711 	mrs	r7, BASEPRI
 801433e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014342:	b672      	cpsid	i
 8014344:	f383 8811 	msr	BASEPRI, r3
 8014348:	f3bf 8f6f 	isb	sy
 801434c:	f3bf 8f4f 	dsb	sy
 8014350:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014352:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014354:	b9ec      	cbnz	r4, 8014392 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8014356:	4620      	mov	r0, r4
	__asm volatile
 8014358:	f387 8811 	msr	BASEPRI, r7
}
 801435c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014360:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8014362:	2b00      	cmp	r3, #0
 8014364:	d0e7      	beq.n	8014336 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8014366:	f04f 0330 	mov.w	r3, #48	; 0x30
 801436a:	b672      	cpsid	i
 801436c:	f383 8811 	msr	BASEPRI, r3
 8014370:	f3bf 8f6f 	isb	sy
 8014374:	f3bf 8f4f 	dsb	sy
 8014378:	b662      	cpsie	i
 801437a:	e7fe      	b.n	801437a <xQueueReceiveFromISR+0x52>
 801437c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014380:	b672      	cpsid	i
 8014382:	f383 8811 	msr	BASEPRI, r3
 8014386:	f3bf 8f6f 	isb	sy
 801438a:	f3bf 8f4f 	dsb	sy
 801438e:	b662      	cpsie	i
	configASSERT( pxQueue );
 8014390:	e7fe      	b.n	8014390 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8014392:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014396:	4649      	mov	r1, r9
 8014398:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801439a:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 801439c:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801439e:	f7ff fb2f 	bl	8013a00 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80143a2:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 80143a4:	1c73      	adds	r3, r6, #1
 80143a6:	d008      	beq.n	80143ba <xQueueReceiveFromISR+0x92>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80143a8:	1c72      	adds	r2, r6, #1
			xReturn = pdPASS;
 80143aa:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80143ac:	b252      	sxtb	r2, r2
 80143ae:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
	__asm volatile
 80143b2:	f387 8811 	msr	BASEPRI, r7
}
 80143b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80143ba:	692b      	ldr	r3, [r5, #16]
 80143bc:	b90b      	cbnz	r3, 80143c2 <xQueueReceiveFromISR+0x9a>
			xReturn = pdPASS;
 80143be:	2001      	movs	r0, #1
 80143c0:	e7ca      	b.n	8014358 <xQueueReceiveFromISR+0x30>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80143c2:	f105 0010 	add.w	r0, r5, #16
 80143c6:	f000 fc8d 	bl	8014ce4 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 80143ca:	f1b8 0f00 	cmp.w	r8, #0
 80143ce:	d0f6      	beq.n	80143be <xQueueReceiveFromISR+0x96>
 80143d0:	2800      	cmp	r0, #0
 80143d2:	d0f4      	beq.n	80143be <xQueueReceiveFromISR+0x96>
							*pxHigherPriorityTaskWoken = pdTRUE;
 80143d4:	2001      	movs	r0, #1
 80143d6:	f8c8 0000 	str.w	r0, [r8]
 80143da:	e7bd      	b.n	8014358 <xQueueReceiveFromISR+0x30>

080143dc <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143dc:	2300      	movs	r3, #0
 80143de:	4a08      	ldr	r2, [pc, #32]	; (8014400 <vQueueAddToRegistry+0x24>)
	{
 80143e0:	b430      	push	{r4, r5}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80143e2:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
 80143e6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80143ea:	b124      	cbz	r4, 80143f6 <vQueueAddToRegistry+0x1a>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80143ec:	3301      	adds	r3, #1
 80143ee:	2b08      	cmp	r3, #8
 80143f0:	d1f7      	bne.n	80143e2 <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80143f2:	bc30      	pop	{r4, r5}
 80143f4:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 80143f6:	6068      	str	r0, [r5, #4]
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80143f8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
	}
 80143fc:	bc30      	pop	{r4, r5}
 80143fe:	4770      	bx	lr
 8014400:	2001f420 	.word	0x2001f420

08014404 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014404:	b570      	push	{r4, r5, r6, lr}
 8014406:	4604      	mov	r4, r0
 8014408:	460e      	mov	r6, r1
 801440a:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 801440c:	f001 f9fa 	bl	8015804 <vPortEnterCritical>
 8014410:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8014414:	2bff      	cmp	r3, #255	; 0xff
 8014416:	d102      	bne.n	801441e <vQueueWaitForMessageRestricted+0x1a>
 8014418:	2300      	movs	r3, #0
 801441a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801441e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8014422:	2bff      	cmp	r3, #255	; 0xff
 8014424:	d102      	bne.n	801442c <vQueueWaitForMessageRestricted+0x28>
 8014426:	2300      	movs	r3, #0
 8014428:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801442c:	f001 fa10 	bl	8015850 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8014432:	b123      	cbz	r3, 801443e <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014434:	4620      	mov	r0, r4
	}
 8014436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 801443a:	f7ff baf3 	b.w	8013a24 <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801443e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8014442:	462a      	mov	r2, r5
 8014444:	4631      	mov	r1, r6
 8014446:	f000 fc2d 	bl	8014ca4 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 801444a:	4620      	mov	r0, r4
	}
 801444c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8014450:	f7ff bae8 	b.w	8013a24 <prvUnlockQueue>

08014454 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014456:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014458:	f001 f9d4 	bl	8015804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801445c:	4a36      	ldr	r2, [pc, #216]	; (8014538 <prvAddNewTaskToReadyList+0xe4>)
		if( pxCurrentTCB == NULL )
 801445e:	4d37      	ldr	r5, [pc, #220]	; (801453c <prvAddNewTaskToReadyList+0xe8>)
		uxCurrentNumberOfTasks++;
 8014460:	6813      	ldr	r3, [r2, #0]
 8014462:	3301      	adds	r3, #1
 8014464:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014466:	682b      	ldr	r3, [r5, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d031      	beq.n	80144d0 <prvAddNewTaskToReadyList+0x7c>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801446c:	4e34      	ldr	r6, [pc, #208]	; (8014540 <prvAddNewTaskToReadyList+0xec>)
 801446e:	6833      	ldr	r3, [r6, #0]
 8014470:	b33b      	cbz	r3, 80144c2 <prvAddNewTaskToReadyList+0x6e>
 8014472:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014474:	4833      	ldr	r0, [pc, #204]	; (8014544 <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014476:	2201      	movs	r2, #1
 8014478:	4f33      	ldr	r7, [pc, #204]	; (8014548 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 801447a:	6801      	ldr	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 801447c:	409a      	lsls	r2, r3
 801447e:	f8d7 c000 	ldr.w	ip, [r7]
 8014482:	eb03 0383 	add.w	r3, r3, r3, lsl #2
		uxTaskNumber++;
 8014486:	3101      	adds	r1, #1
		prvAddTaskToReadyList( pxNewTCB );
 8014488:	ea42 020c 	orr.w	r2, r2, ip
 801448c:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 8014550 <prvAddNewTaskToReadyList+0xfc>
		uxTaskNumber++;
 8014490:	6001      	str	r1, [r0, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8014492:	1d21      	adds	r1, r4, #4
 8014494:	eb0c 0083 	add.w	r0, ip, r3, lsl #2
 8014498:	603a      	str	r2, [r7, #0]
 801449a:	f7ff fa33 	bl	8013904 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801449e:	f001 f9d7 	bl	8015850 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80144a2:	6833      	ldr	r3, [r6, #0]
 80144a4:	b163      	cbz	r3, 80144c0 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80144a6:	682a      	ldr	r2, [r5, #0]
 80144a8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80144aa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80144ac:	429a      	cmp	r2, r3
 80144ae:	d207      	bcs.n	80144c0 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80144b0:	4b26      	ldr	r3, [pc, #152]	; (801454c <prvAddNewTaskToReadyList+0xf8>)
 80144b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144b6:	601a      	str	r2, [r3, #0]
 80144b8:	f3bf 8f4f 	dsb	sy
 80144bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80144c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80144c2:	682a      	ldr	r2, [r5, #0]
 80144c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80144c6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80144c8:	429a      	cmp	r2, r3
 80144ca:	d8d3      	bhi.n	8014474 <prvAddNewTaskToReadyList+0x20>
					pxCurrentTCB = pxNewTCB;
 80144cc:	602c      	str	r4, [r5, #0]
 80144ce:	e7d1      	b.n	8014474 <prvAddNewTaskToReadyList+0x20>
			pxCurrentTCB = pxNewTCB;
 80144d0:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80144d2:	6813      	ldr	r3, [r2, #0]
 80144d4:	2b01      	cmp	r3, #1
 80144d6:	d002      	beq.n	80144de <prvAddNewTaskToReadyList+0x8a>
 80144d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80144da:	4e19      	ldr	r6, [pc, #100]	; (8014540 <prvAddNewTaskToReadyList+0xec>)
 80144dc:	e7ca      	b.n	8014474 <prvAddNewTaskToReadyList+0x20>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144de:	481c      	ldr	r0, [pc, #112]	; (8014550 <prvAddNewTaskToReadyList+0xfc>)
 80144e0:	f7ff fa00 	bl	80138e4 <vListInitialise>
 80144e4:	481b      	ldr	r0, [pc, #108]	; (8014554 <prvAddNewTaskToReadyList+0x100>)
 80144e6:	f7ff f9fd 	bl	80138e4 <vListInitialise>
 80144ea:	481b      	ldr	r0, [pc, #108]	; (8014558 <prvAddNewTaskToReadyList+0x104>)
 80144ec:	f7ff f9fa 	bl	80138e4 <vListInitialise>
 80144f0:	481a      	ldr	r0, [pc, #104]	; (801455c <prvAddNewTaskToReadyList+0x108>)
 80144f2:	f7ff f9f7 	bl	80138e4 <vListInitialise>
 80144f6:	481a      	ldr	r0, [pc, #104]	; (8014560 <prvAddNewTaskToReadyList+0x10c>)
 80144f8:	f7ff f9f4 	bl	80138e4 <vListInitialise>
	}

	vListInitialise( &xDelayedTaskList1 );
 80144fc:	4f19      	ldr	r7, [pc, #100]	; (8014564 <prvAddNewTaskToReadyList+0x110>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80144fe:	481a      	ldr	r0, [pc, #104]	; (8014568 <prvAddNewTaskToReadyList+0x114>)
 8014500:	f7ff f9f0 	bl	80138e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014504:	4e19      	ldr	r6, [pc, #100]	; (801456c <prvAddNewTaskToReadyList+0x118>)
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014506:	481a      	ldr	r0, [pc, #104]	; (8014570 <prvAddNewTaskToReadyList+0x11c>)
 8014508:	f7ff f9ec 	bl	80138e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList1 );
 801450c:	4638      	mov	r0, r7
 801450e:	f7ff f9e9 	bl	80138e4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014512:	4630      	mov	r0, r6
 8014514:	f7ff f9e6 	bl	80138e4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014518:	4816      	ldr	r0, [pc, #88]	; (8014574 <prvAddNewTaskToReadyList+0x120>)
 801451a:	f7ff f9e3 	bl	80138e4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801451e:	4816      	ldr	r0, [pc, #88]	; (8014578 <prvAddNewTaskToReadyList+0x124>)
 8014520:	f7ff f9e0 	bl	80138e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014524:	4815      	ldr	r0, [pc, #84]	; (801457c <prvAddNewTaskToReadyList+0x128>)
 8014526:	f7ff f9dd 	bl	80138e4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801452a:	4b15      	ldr	r3, [pc, #84]	; (8014580 <prvAddNewTaskToReadyList+0x12c>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801452c:	4a15      	ldr	r2, [pc, #84]	; (8014584 <prvAddNewTaskToReadyList+0x130>)
	pxDelayedTaskList = &xDelayedTaskList1;
 801452e:	601f      	str	r7, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014530:	6016      	str	r6, [r2, #0]
 8014532:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8014534:	4e02      	ldr	r6, [pc, #8]	; (8014540 <prvAddNewTaskToReadyList+0xec>)
}
 8014536:	e79d      	b.n	8014474 <prvAddNewTaskToReadyList+0x20>
 8014538:	20001dd8 	.word	0x20001dd8
 801453c:	20001d40 	.word	0x20001d40
 8014540:	20001e34 	.word	0x20001e34
 8014544:	20001de8 	.word	0x20001de8
 8014548:	20001dec 	.word	0x20001dec
 801454c:	e000ed04 	.word	0xe000ed04
 8014550:	20001d4c 	.word	0x20001d4c
 8014554:	20001d60 	.word	0x20001d60
 8014558:	20001d74 	.word	0x20001d74
 801455c:	20001d88 	.word	0x20001d88
 8014560:	20001d9c 	.word	0x20001d9c
 8014564:	20001df0 	.word	0x20001df0
 8014568:	20001db0 	.word	0x20001db0
 801456c:	20001e04 	.word	0x20001e04
 8014570:	20001dc4 	.word	0x20001dc4
 8014574:	20001e20 	.word	0x20001e20
 8014578:	20001e4c 	.word	0x20001e4c
 801457c:	20001e38 	.word	0x20001e38
 8014580:	20001d44 	.word	0x20001d44
 8014584:	20001d48 	.word	0x20001d48

08014588 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801458a:	4b1a      	ldr	r3, [pc, #104]	; (80145f4 <prvAddCurrentTaskToDelayedList+0x6c>)
{
 801458c:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801458e:	4e1a      	ldr	r6, [pc, #104]	; (80145f8 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8014590:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8014592:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014594:	6830      	ldr	r0, [r6, #0]
 8014596:	3004      	adds	r0, #4
 8014598:	f7ff f9dc 	bl	8013954 <uxListRemove>
 801459c:	b940      	cbnz	r0, 80145b0 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801459e:	6833      	ldr	r3, [r6, #0]
 80145a0:	2201      	movs	r2, #1
 80145a2:	4916      	ldr	r1, [pc, #88]	; (80145fc <prvAddCurrentTaskToDelayedList+0x74>)
 80145a4:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80145a6:	680b      	ldr	r3, [r1, #0]
 80145a8:	4082      	lsls	r2, r0
 80145aa:	ea23 0302 	bic.w	r3, r3, r2
 80145ae:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80145b0:	1c63      	adds	r3, r4, #1
 80145b2:	d100      	bne.n	80145b6 <prvAddCurrentTaskToDelayedList+0x2e>
 80145b4:	b9bf      	cbnz	r7, 80145e6 <prvAddCurrentTaskToDelayedList+0x5e>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 80145b6:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80145b8:	6833      	ldr	r3, [r6, #0]
 80145ba:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80145bc:	d307      	bcc.n	80145ce <prvAddCurrentTaskToDelayedList+0x46>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145be:	4b10      	ldr	r3, [pc, #64]	; (8014600 <prvAddCurrentTaskToDelayedList+0x78>)
 80145c0:	6818      	ldr	r0, [r3, #0]
 80145c2:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80145c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145c8:	3104      	adds	r1, #4
 80145ca:	f7ff b9ab 	b.w	8013924 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145ce:	4b0d      	ldr	r3, [pc, #52]	; (8014604 <prvAddCurrentTaskToDelayedList+0x7c>)
 80145d0:	6818      	ldr	r0, [r3, #0]
 80145d2:	6831      	ldr	r1, [r6, #0]
 80145d4:	3104      	adds	r1, #4
 80145d6:	f7ff f9a5 	bl	8013924 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80145da:	4b0b      	ldr	r3, [pc, #44]	; (8014608 <prvAddCurrentTaskToDelayedList+0x80>)
 80145dc:	681a      	ldr	r2, [r3, #0]
 80145de:	42a2      	cmp	r2, r4
 80145e0:	d900      	bls.n	80145e4 <prvAddCurrentTaskToDelayedList+0x5c>
					xNextTaskUnblockTime = xTimeToWake;
 80145e2:	601c      	str	r4, [r3, #0]
}
 80145e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145e6:	6831      	ldr	r1, [r6, #0]
 80145e8:	4808      	ldr	r0, [pc, #32]	; (801460c <prvAddCurrentTaskToDelayedList+0x84>)
 80145ea:	3104      	adds	r1, #4
}
 80145ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80145f0:	f7ff b988 	b.w	8013904 <vListInsertEnd>
 80145f4:	20001e60 	.word	0x20001e60
 80145f8:	20001d40 	.word	0x20001d40
 80145fc:	20001dec 	.word	0x20001dec
 8014600:	20001d48 	.word	0x20001d48
 8014604:	20001d44 	.word	0x20001d44
 8014608:	20001e18 	.word	0x20001e18
 801460c:	20001e38 	.word	0x20001e38

08014610 <prvResetNextTaskUnblockTime.part.0>:
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014610:	4a03      	ldr	r2, [pc, #12]	; (8014620 <prvResetNextTaskUnblockTime.part.0+0x10>)
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014612:	4b04      	ldr	r3, [pc, #16]	; (8014624 <prvResetNextTaskUnblockTime.part.0+0x14>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014614:	6812      	ldr	r2, [r2, #0]
 8014616:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014618:	68d2      	ldr	r2, [r2, #12]
 801461a:	6852      	ldr	r2, [r2, #4]
 801461c:	601a      	str	r2, [r3, #0]
}
 801461e:	4770      	bx	lr
 8014620:	20001d44 	.word	0x20001d44
 8014624:	20001e18 	.word	0x20001e18

08014628 <prvInitialiseNewTask.isra.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8014628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801462c:	b083      	sub	sp, #12
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801462e:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8014632:	460f      	mov	r7, r1
 8014634:	4601      	mov	r1, r0
 8014636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014638:	4490      	add	r8, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 801463a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 801463e:	461a      	mov	r2, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014640:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8014642:	eb04 0488 	add.w	r4, r4, r8, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014646:	f024 0807 	bic.w	r8, r4, #7
	if( pcName != NULL )
 801464a:	2f00      	cmp	r7, #0
 801464c:	d035      	beq.n	80146ba <prvInitialiseNewTask.isra.0+0x92>
 801464e:	1e7c      	subs	r4, r7, #1
 8014650:	f105 0633 	add.w	r6, r5, #51	; 0x33
 8014654:	370f      	adds	r7, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014656:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801465a:	f806 3f01 	strb.w	r3, [r6, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 801465e:	7820      	ldrb	r0, [r4, #0]
 8014660:	b108      	cbz	r0, 8014666 <prvInitialiseNewTask.isra.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014662:	42bc      	cmp	r4, r7
 8014664:	d1f7      	bne.n	8014656 <prvInitialiseNewTask.isra.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014666:	2300      	movs	r3, #0
 8014668:	f885 3043 	strb.w	r3, [r5, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801466c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxNewTCB->uxMutexesHeld = 0;
 801466e:	2600      	movs	r6, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014670:	1d28      	adds	r0, r5, #4
 8014672:	2c06      	cmp	r4, #6
 8014674:	bf28      	it	cs
 8014676:	2406      	movcs	r4, #6
	pxNewTCB->uxPriority = uxPriority;
 8014678:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 801467a:	e9c5 4611 	strd	r4, r6, [r5, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801467e:	f1c4 0407 	rsb	r4, r4, #7
 8014682:	e9cd 1200 	strd	r1, r2, [sp]
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014686:	f7ff f939 	bl	80138fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801468a:	f105 0018 	add.w	r0, r5, #24
 801468e:	f7ff f935 	bl	80138fc <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8014692:	64ee      	str	r6, [r5, #76]	; 0x4c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014694:	9a01      	ldr	r2, [sp, #4]
 8014696:	4640      	mov	r0, r8
 8014698:	9900      	ldr	r1, [sp, #0]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801469a:	61ac      	str	r4, [r5, #24]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801469c:	f885 6050 	strb.w	r6, [r5, #80]	; 0x50
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80146a0:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80146a2:	626d      	str	r5, [r5, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80146a4:	f001 f884 	bl	80157b0 <pxPortInitialiseStack>
 80146a8:	6028      	str	r0, [r5, #0]
	if( pxCreatedTask != NULL )
 80146aa:	f1b9 0f00 	cmp.w	r9, #0
 80146ae:	d001      	beq.n	80146b4 <prvInitialiseNewTask.isra.0+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80146b0:	f8c9 5000 	str.w	r5, [r9]
}
 80146b4:	b003      	add	sp, #12
 80146b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80146ba:	f885 7034 	strb.w	r7, [r5, #52]	; 0x34
 80146be:	e7d5      	b.n	801466c <prvInitialiseNewTask.isra.0+0x44>

080146c0 <prvDeleteTCB>:
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80146c0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80146c4:	b173      	cbz	r3, 80146e4 <prvDeleteTCB+0x24>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80146c6:	2b01      	cmp	r3, #1
 80146c8:	d017      	beq.n	80146fa <prvDeleteTCB+0x3a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80146ca:	2b02      	cmp	r3, #2
 80146cc:	d014      	beq.n	80146f8 <prvDeleteTCB+0x38>
	__asm volatile
 80146ce:	f04f 0330 	mov.w	r3, #48	; 0x30
 80146d2:	b672      	cpsid	i
 80146d4:	f383 8811 	msr	BASEPRI, r3
 80146d8:	f3bf 8f6f 	isb	sy
 80146dc:	f3bf 8f4f 	dsb	sy
 80146e0:	b662      	cpsie	i
 80146e2:	e7fe      	b.n	80146e2 <prvDeleteTCB+0x22>
	{
 80146e4:	b510      	push	{r4, lr}
 80146e6:	4604      	mov	r4, r0
				vPortFree( pxTCB->pxStack );
 80146e8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80146ea:	f001 fa97 	bl	8015c1c <vPortFree>
				vPortFree( pxTCB );
 80146ee:	4620      	mov	r0, r4
	}
 80146f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80146f4:	f001 ba92 	b.w	8015c1c <vPortFree>
 80146f8:	4770      	bx	lr
				vPortFree( pxTCB );
 80146fa:	f001 ba8f 	b.w	8015c1c <vPortFree>
 80146fe:	bf00      	nop

08014700 <prvIdleTask>:
{
 8014700:	b580      	push	{r7, lr}
 8014702:	4c16      	ldr	r4, [pc, #88]	; (801475c <prvIdleTask+0x5c>)
				taskYIELD();
 8014704:	f04f 5980 	mov.w	r9, #268435456	; 0x10000000
 8014708:	4f15      	ldr	r7, [pc, #84]	; (8014760 <prvIdleTask+0x60>)
 801470a:	4d16      	ldr	r5, [pc, #88]	; (8014764 <prvIdleTask+0x64>)
 801470c:	4e16      	ldr	r6, [pc, #88]	; (8014768 <prvIdleTask+0x68>)
 801470e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 801476c <prvIdleTask+0x6c>
 8014712:	e013      	b.n	801473c <prvIdleTask+0x3c>
			taskENTER_CRITICAL();
 8014714:	f001 f876 	bl	8015804 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801471e:	f10a 0004 	add.w	r0, sl, #4
 8014722:	f7ff f917 	bl	8013954 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014726:	682b      	ldr	r3, [r5, #0]
 8014728:	3b01      	subs	r3, #1
 801472a:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 801472c:	6823      	ldr	r3, [r4, #0]
 801472e:	3b01      	subs	r3, #1
 8014730:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8014732:	f001 f88d 	bl	8015850 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8014736:	4650      	mov	r0, sl
 8014738:	f7ff ffc2 	bl	80146c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801473c:	6823      	ldr	r3, [r4, #0]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d1e8      	bne.n	8014714 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014742:	6833      	ldr	r3, [r6, #0]
 8014744:	2b01      	cmp	r3, #1
 8014746:	d905      	bls.n	8014754 <prvIdleTask+0x54>
				taskYIELD();
 8014748:	f8c8 9000 	str.w	r9, [r8]
 801474c:	f3bf 8f4f 	dsb	sy
 8014750:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8014754:	f7ec fa30 	bl	8000bb8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8014758:	e7f0      	b.n	801473c <prvIdleTask+0x3c>
 801475a:	bf00      	nop
 801475c:	20001ddc 	.word	0x20001ddc
 8014760:	20001e4c 	.word	0x20001e4c
 8014764:	20001dd8 	.word	0x20001dd8
 8014768:	20001d4c 	.word	0x20001d4c
 801476c:	e000ed04 	.word	0xe000ed04

08014770 <xTaskCreateStatic>:
	{
 8014770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014772:	b087      	sub	sp, #28
 8014774:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	; 0x30
 8014778:	9c0e      	ldr	r4, [sp, #56]	; 0x38
		configASSERT( puxStackBuffer != NULL );
 801477a:	b1dd      	cbz	r5, 80147b4 <xTaskCreateStatic+0x44>
		configASSERT( pxTaskBuffer != NULL );
 801477c:	b17c      	cbz	r4, 801479e <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 801477e:	2754      	movs	r7, #84	; 0x54
 8014780:	9705      	str	r7, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014782:	9f05      	ldr	r7, [sp, #20]
 8014784:	2f54      	cmp	r7, #84	; 0x54
 8014786:	d020      	beq.n	80147ca <xTaskCreateStatic+0x5a>
 8014788:	f04f 0330 	mov.w	r3, #48	; 0x30
 801478c:	b672      	cpsid	i
 801478e:	f383 8811 	msr	BASEPRI, r3
 8014792:	f3bf 8f6f 	isb	sy
 8014796:	f3bf 8f4f 	dsb	sy
 801479a:	b662      	cpsie	i
 801479c:	e7fe      	b.n	801479c <xTaskCreateStatic+0x2c>
 801479e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147a2:	b672      	cpsid	i
 80147a4:	f383 8811 	msr	BASEPRI, r3
 80147a8:	f3bf 8f6f 	isb	sy
 80147ac:	f3bf 8f4f 	dsb	sy
 80147b0:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 80147b2:	e7fe      	b.n	80147b2 <xTaskCreateStatic+0x42>
 80147b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80147b8:	b672      	cpsid	i
 80147ba:	f383 8811 	msr	BASEPRI, r3
 80147be:	f3bf 8f6f 	isb	sy
 80147c2:	f3bf 8f4f 	dsb	sy
 80147c6:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80147c8:	e7fe      	b.n	80147c8 <xTaskCreateStatic+0x58>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80147ca:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80147cc:	2702      	movs	r7, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80147ce:	ad04      	add	r5, sp, #16
 80147d0:	9402      	str	r4, [sp, #8]
 80147d2:	9600      	str	r6, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80147d4:	f884 7051 	strb.w	r7, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80147d8:	9501      	str	r5, [sp, #4]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80147da:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80147dc:	f7ff ff24 	bl	8014628 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80147e0:	4620      	mov	r0, r4
 80147e2:	f7ff fe37 	bl	8014454 <prvAddNewTaskToReadyList>
	}
 80147e6:	9804      	ldr	r0, [sp, #16]
 80147e8:	b007      	add	sp, #28
 80147ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080147ec <xTaskCreate>:
	{
 80147ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80147f0:	4607      	mov	r7, r0
 80147f2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80147f4:	0090      	lsls	r0, r2, #2
	{
 80147f6:	4615      	mov	r5, r2
 80147f8:	4688      	mov	r8, r1
 80147fa:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80147fc:	f001 f970 	bl	8015ae0 <pvPortMalloc>
			if( pxStack != NULL )
 8014800:	b1e0      	cbz	r0, 801483c <xTaskCreate+0x50>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014802:	4604      	mov	r4, r0
 8014804:	2054      	movs	r0, #84	; 0x54
 8014806:	f001 f96b 	bl	8015ae0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 801480a:	4606      	mov	r6, r0
 801480c:	b1d8      	cbz	r0, 8014846 <xTaskCreate+0x5a>
					pxNewTCB->pxStack = pxStack;
 801480e:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014810:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014814:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8014816:	464b      	mov	r3, r9
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014818:	f886 c051 	strb.w	ip, [r6, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801481c:	462a      	mov	r2, r5
 801481e:	9401      	str	r4, [sp, #4]
 8014820:	4641      	mov	r1, r8
 8014822:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8014824:	4638      	mov	r0, r7
 8014826:	9602      	str	r6, [sp, #8]
 8014828:	9400      	str	r4, [sp, #0]
 801482a:	f7ff fefd 	bl	8014628 <prvInitialiseNewTask.isra.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801482e:	4630      	mov	r0, r6
 8014830:	f7ff fe10 	bl	8014454 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014834:	2001      	movs	r0, #1
	}
 8014836:	b005      	add	sp, #20
 8014838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801483c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8014840:	b005      	add	sp, #20
 8014842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8014846:	4620      	mov	r0, r4
 8014848:	f001 f9e8 	bl	8015c1c <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801484c:	f04f 30ff 	mov.w	r0, #4294967295
 8014850:	e7f1      	b.n	8014836 <xTaskCreate+0x4a>
 8014852:	bf00      	nop

08014854 <vTaskStartScheduler>:
{
 8014854:	b530      	push	{r4, r5, lr}
 8014856:	b089      	sub	sp, #36	; 0x24
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014858:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801485a:	aa07      	add	r2, sp, #28
 801485c:	a906      	add	r1, sp, #24
 801485e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014860:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014864:	f7ec f9ae 	bl	8000bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014868:	9905      	ldr	r1, [sp, #20]
 801486a:	9a06      	ldr	r2, [sp, #24]
 801486c:	4623      	mov	r3, r4
 801486e:	4818      	ldr	r0, [pc, #96]	; (80148d0 <vTaskStartScheduler+0x7c>)
 8014870:	9400      	str	r4, [sp, #0]
 8014872:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8014876:	9a07      	ldr	r2, [sp, #28]
 8014878:	4916      	ldr	r1, [pc, #88]	; (80148d4 <vTaskStartScheduler+0x80>)
 801487a:	f7ff ff79 	bl	8014770 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801487e:	b1b8      	cbz	r0, 80148b0 <vTaskStartScheduler+0x5c>
			xReturn = xTimerCreateTimerTask();
 8014880:	f000 fd48 	bl	8015314 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8014884:	2801      	cmp	r0, #1
 8014886:	d115      	bne.n	80148b4 <vTaskStartScheduler+0x60>
 8014888:	f04f 0330 	mov.w	r3, #48	; 0x30
 801488c:	b672      	cpsid	i
 801488e:	f383 8811 	msr	BASEPRI, r3
 8014892:	f3bf 8f6f 	isb	sy
 8014896:	f3bf 8f4f 	dsb	sy
 801489a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 801489c:	490e      	ldr	r1, [pc, #56]	; (80148d8 <vTaskStartScheduler+0x84>)
 801489e:	f04f 35ff 	mov.w	r5, #4294967295
		xSchedulerRunning = pdTRUE;
 80148a2:	4a0e      	ldr	r2, [pc, #56]	; (80148dc <vTaskStartScheduler+0x88>)
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80148a4:	4b0e      	ldr	r3, [pc, #56]	; (80148e0 <vTaskStartScheduler+0x8c>)
		xNextTaskUnblockTime = portMAX_DELAY;
 80148a6:	600d      	str	r5, [r1, #0]
		xSchedulerRunning = pdTRUE;
 80148a8:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80148aa:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80148ac:	f001 f850 	bl	8015950 <xPortStartScheduler>
}
 80148b0:	b009      	add	sp, #36	; 0x24
 80148b2:	bd30      	pop	{r4, r5, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80148b4:	3001      	adds	r0, #1
 80148b6:	d1fb      	bne.n	80148b0 <vTaskStartScheduler+0x5c>
 80148b8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80148bc:	b672      	cpsid	i
 80148be:	f383 8811 	msr	BASEPRI, r3
 80148c2:	f3bf 8f6f 	isb	sy
 80148c6:	f3bf 8f4f 	dsb	sy
 80148ca:	b662      	cpsie	i
 80148cc:	e7fe      	b.n	80148cc <vTaskStartScheduler+0x78>
 80148ce:	bf00      	nop
 80148d0:	08014701 	.word	0x08014701
 80148d4:	08029bc8 	.word	0x08029bc8
 80148d8:	20001e18 	.word	0x20001e18
 80148dc:	20001e34 	.word	0x20001e34
 80148e0:	20001e60 	.word	0x20001e60

080148e4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80148e4:	4a02      	ldr	r2, [pc, #8]	; (80148f0 <vTaskSuspendAll+0xc>)
 80148e6:	6813      	ldr	r3, [r2, #0]
 80148e8:	3301      	adds	r3, #1
 80148ea:	6013      	str	r3, [r2, #0]
}
 80148ec:	4770      	bx	lr
 80148ee:	bf00      	nop
 80148f0:	20001de4 	.word	0x20001de4

080148f4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80148f4:	4b01      	ldr	r3, [pc, #4]	; (80148fc <xTaskGetTickCount+0x8>)
 80148f6:	6818      	ldr	r0, [r3, #0]
}
 80148f8:	4770      	bx	lr
 80148fa:	bf00      	nop
 80148fc:	20001e60 	.word	0x20001e60

08014900 <xTaskGetTickCountFromISR>:
{
 8014900:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014902:	f001 f88b 	bl	8015a1c <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 8014906:	4b01      	ldr	r3, [pc, #4]	; (801490c <xTaskGetTickCountFromISR+0xc>)
 8014908:	6818      	ldr	r0, [r3, #0]
}
 801490a:	bd08      	pop	{r3, pc}
 801490c:	20001e60 	.word	0x20001e60

08014910 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014910:	4b4d      	ldr	r3, [pc, #308]	; (8014a48 <xTaskIncrementTick+0x138>)
 8014912:	681b      	ldr	r3, [r3, #0]
{
 8014914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014918:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801491a:	2b00      	cmp	r3, #0
 801491c:	d14d      	bne.n	80149ba <xTaskIncrementTick+0xaa>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801491e:	4b4b      	ldr	r3, [pc, #300]	; (8014a4c <xTaskIncrementTick+0x13c>)
 8014920:	681e      	ldr	r6, [r3, #0]
 8014922:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
 8014924:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014926:	2e00      	cmp	r6, #0
 8014928:	d055      	beq.n	80149d6 <xTaskIncrementTick+0xc6>
 801492a:	4d49      	ldr	r5, [pc, #292]	; (8014a50 <xTaskIncrementTick+0x140>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 801492c:	682b      	ldr	r3, [r5, #0]
 801492e:	42b3      	cmp	r3, r6
 8014930:	d866      	bhi.n	8014a00 <xTaskIncrementTick+0xf0>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014932:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8014a60 <xTaskIncrementTick+0x150>
 8014936:	f8d9 3000 	ldr.w	r3, [r9]
 801493a:	681c      	ldr	r4, [r3, #0]
 801493c:	2c00      	cmp	r4, #0
 801493e:	d079      	beq.n	8014a34 <xTaskIncrementTick+0x124>
BaseType_t xSwitchRequired = pdFALSE;
 8014940:	2400      	movs	r4, #0
 8014942:	4f44      	ldr	r7, [pc, #272]	; (8014a54 <xTaskIncrementTick+0x144>)
 8014944:	f8df 8124 	ldr.w	r8, [pc, #292]	; 8014a6c <xTaskIncrementTick+0x15c>
					prvAddTaskToReadyList( pxTCB );
 8014948:	f8df a124 	ldr.w	sl, [pc, #292]	; 8014a70 <xTaskIncrementTick+0x160>
 801494c:	e027      	b.n	801499e <xTaskIncrementTick+0x8e>
 801494e:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014950:	f7ff f800 	bl	8013954 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014954:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014958:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801495c:	9901      	ldr	r1, [sp, #4]
 801495e:	b112      	cbz	r2, 8014966 <xTaskIncrementTick+0x56>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014960:	f7fe fff8 	bl	8013954 <uxListRemove>
 8014964:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
 8014966:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 801496a:	2201      	movs	r2, #1
 801496c:	f8da 3000 	ldr.w	r3, [sl]
 8014970:	4082      	lsls	r2, r0
 8014972:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014976:	431a      	orrs	r2, r3
 8014978:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 801497c:	f8ca 2000 	str.w	r2, [sl]
 8014980:	f7fe ffc0 	bl	8013904 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014984:	f8d8 2000 	ldr.w	r2, [r8]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014988:	f8d9 0000 	ldr.w	r0, [r9]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801498c:	f8db 102c 	ldr.w	r1, [fp, #44]	; 0x2c
 8014990:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014992:	6803      	ldr	r3, [r0, #0]
							xSwitchRequired = pdTRUE;
 8014994:	4291      	cmp	r1, r2
 8014996:	bf28      	it	cs
 8014998:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801499a:	2b00      	cmp	r3, #0
 801499c:	d04d      	beq.n	8014a3a <xTaskIncrementTick+0x12a>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801499e:	f8d9 3000 	ldr.w	r3, [r9]
 80149a2:	68db      	ldr	r3, [r3, #12]
 80149a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80149a8:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149ac:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80149b0:	4296      	cmp	r6, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80149b2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80149b4:	d2cb      	bcs.n	801494e <xTaskIncrementTick+0x3e>
						xNextTaskUnblockTime = xItemValue;
 80149b6:	602a      	str	r2, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80149b8:	e026      	b.n	8014a08 <xTaskIncrementTick+0xf8>
		++uxPendedTicks;
 80149ba:	4a27      	ldr	r2, [pc, #156]	; (8014a58 <xTaskIncrementTick+0x148>)
BaseType_t xSwitchRequired = pdFALSE;
 80149bc:	2400      	movs	r4, #0
		++uxPendedTicks;
 80149be:	6813      	ldr	r3, [r2, #0]
 80149c0:	3301      	adds	r3, #1
 80149c2:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80149c4:	4b25      	ldr	r3, [pc, #148]	; (8014a5c <xTaskIncrementTick+0x14c>)
 80149c6:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80149c8:	2b00      	cmp	r3, #0
}
 80149ca:	bf0c      	ite	eq
 80149cc:	4620      	moveq	r0, r4
 80149ce:	2001      	movne	r0, #1
 80149d0:	b003      	add	sp, #12
 80149d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80149d6:	4b22      	ldr	r3, [pc, #136]	; (8014a60 <xTaskIncrementTick+0x150>)
 80149d8:	681a      	ldr	r2, [r3, #0]
 80149da:	6812      	ldr	r2, [r2, #0]
 80149dc:	b9fa      	cbnz	r2, 8014a1e <xTaskIncrementTick+0x10e>
 80149de:	4a21      	ldr	r2, [pc, #132]	; (8014a64 <xTaskIncrementTick+0x154>)
 80149e0:	6818      	ldr	r0, [r3, #0]
 80149e2:	4921      	ldr	r1, [pc, #132]	; (8014a68 <xTaskIncrementTick+0x158>)
 80149e4:	6814      	ldr	r4, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 80149e6:	4d1a      	ldr	r5, [pc, #104]	; (8014a50 <xTaskIncrementTick+0x140>)
			taskSWITCH_DELAYED_LISTS();
 80149e8:	601c      	str	r4, [r3, #0]
 80149ea:	6010      	str	r0, [r2, #0]
 80149ec:	680a      	ldr	r2, [r1, #0]
 80149ee:	3201      	adds	r2, #1
 80149f0:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	bb23      	cbnz	r3, 8014a42 <xTaskIncrementTick+0x132>
		xNextTaskUnblockTime = portMAX_DELAY;
 80149f8:	f04f 33ff 	mov.w	r3, #4294967295
 80149fc:	602b      	str	r3, [r5, #0]
 80149fe:	e795      	b.n	801492c <xTaskIncrementTick+0x1c>
BaseType_t xSwitchRequired = pdFALSE;
 8014a00:	2400      	movs	r4, #0
 8014a02:	4f14      	ldr	r7, [pc, #80]	; (8014a54 <xTaskIncrementTick+0x144>)
 8014a04:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8014a6c <xTaskIncrementTick+0x15c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014a08:	f8d8 3000 	ldr.w	r3, [r8]
 8014a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014a12:	009b      	lsls	r3, r3, #2
 8014a14:	58fb      	ldr	r3, [r7, r3]
				xSwitchRequired = pdTRUE;
 8014a16:	2b02      	cmp	r3, #2
 8014a18:	bf28      	it	cs
 8014a1a:	2401      	movcs	r4, #1
 8014a1c:	e7d2      	b.n	80149c4 <xTaskIncrementTick+0xb4>
 8014a1e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a22:	b672      	cpsid	i
 8014a24:	f383 8811 	msr	BASEPRI, r3
 8014a28:	f3bf 8f6f 	isb	sy
 8014a2c:	f3bf 8f4f 	dsb	sy
 8014a30:	b662      	cpsie	i
			taskSWITCH_DELAYED_LISTS();
 8014a32:	e7fe      	b.n	8014a32 <xTaskIncrementTick+0x122>
 8014a34:	4f07      	ldr	r7, [pc, #28]	; (8014a54 <xTaskIncrementTick+0x144>)
 8014a36:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8014a6c <xTaskIncrementTick+0x15c>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014a3e:	602b      	str	r3, [r5, #0]
					break;
 8014a40:	e7e2      	b.n	8014a08 <xTaskIncrementTick+0xf8>
 8014a42:	f7ff fde5 	bl	8014610 <prvResetNextTaskUnblockTime.part.0>
 8014a46:	e771      	b.n	801492c <xTaskIncrementTick+0x1c>
 8014a48:	20001de4 	.word	0x20001de4
 8014a4c:	20001e60 	.word	0x20001e60
 8014a50:	20001e18 	.word	0x20001e18
 8014a54:	20001d4c 	.word	0x20001d4c
 8014a58:	20001de0 	.word	0x20001de0
 8014a5c:	20001e64 	.word	0x20001e64
 8014a60:	20001d44 	.word	0x20001d44
 8014a64:	20001d48 	.word	0x20001d48
 8014a68:	20001e1c 	.word	0x20001e1c
 8014a6c:	20001d40 	.word	0x20001d40
 8014a70:	20001dec 	.word	0x20001dec

08014a74 <xTaskResumeAll>:
{
 8014a74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8014a78:	4c3a      	ldr	r4, [pc, #232]	; (8014b64 <xTaskResumeAll+0xf0>)
 8014a7a:	6823      	ldr	r3, [r4, #0]
 8014a7c:	b953      	cbnz	r3, 8014a94 <xTaskResumeAll+0x20>
 8014a7e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014a82:	b672      	cpsid	i
 8014a84:	f383 8811 	msr	BASEPRI, r3
 8014a88:	f3bf 8f6f 	isb	sy
 8014a8c:	f3bf 8f4f 	dsb	sy
 8014a90:	b662      	cpsie	i
 8014a92:	e7fe      	b.n	8014a92 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8014a94:	f000 feb6 	bl	8015804 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8014a98:	6823      	ldr	r3, [r4, #0]
 8014a9a:	3b01      	subs	r3, #1
 8014a9c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014a9e:	6823      	ldr	r3, [r4, #0]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d13c      	bne.n	8014b1e <xTaskResumeAll+0xaa>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014aa4:	4b30      	ldr	r3, [pc, #192]	; (8014b68 <xTaskResumeAll+0xf4>)
 8014aa6:	681b      	ldr	r3, [r3, #0]
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d038      	beq.n	8014b1e <xTaskResumeAll+0xaa>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014aac:	4e2f      	ldr	r6, [pc, #188]	; (8014b6c <xTaskResumeAll+0xf8>)
 8014aae:	6833      	ldr	r3, [r6, #0]
 8014ab0:	2b00      	cmp	r3, #0
 8014ab2:	d03a      	beq.n	8014b2a <xTaskResumeAll+0xb6>
 8014ab4:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8014b84 <xTaskResumeAll+0x110>
					prvAddTaskToReadyList( pxTCB );
 8014ab8:	2701      	movs	r7, #1
 8014aba:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 8014b88 <xTaskResumeAll+0x114>
 8014abe:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8014b8c <xTaskResumeAll+0x118>
 8014ac2:	4d2b      	ldr	r5, [pc, #172]	; (8014b70 <xTaskResumeAll+0xfc>)
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ac4:	68f3      	ldr	r3, [r6, #12]
 8014ac6:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ac8:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014acc:	f104 0018 	add.w	r0, r4, #24
 8014ad0:	f7fe ff40 	bl	8013954 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014ad4:	4658      	mov	r0, fp
 8014ad6:	f7fe ff3d 	bl	8013954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014ada:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014adc:	f8d8 2000 	ldr.w	r2, [r8]
 8014ae0:	4659      	mov	r1, fp
 8014ae2:	fa07 f300 	lsl.w	r3, r7, r0
 8014ae6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014aea:	4313      	orrs	r3, r2
 8014aec:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8014af0:	f8c8 3000 	str.w	r3, [r8]
 8014af4:	f7fe ff06 	bl	8013904 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014af8:	f8da 3000 	ldr.w	r3, [sl]
 8014afc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b00:	429a      	cmp	r2, r3
 8014b02:	d300      	bcc.n	8014b06 <xTaskResumeAll+0x92>
						xYieldPending = pdTRUE;
 8014b04:	602f      	str	r7, [r5, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014b06:	6833      	ldr	r3, [r6, #0]
 8014b08:	2b00      	cmp	r3, #0
 8014b0a:	d1db      	bne.n	8014ac4 <xTaskResumeAll+0x50>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014b0c:	4b19      	ldr	r3, [pc, #100]	; (8014b74 <xTaskResumeAll+0x100>)
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	681b      	ldr	r3, [r3, #0]
 8014b12:	bb1b      	cbnz	r3, 8014b5c <xTaskResumeAll+0xe8>
		xNextTaskUnblockTime = portMAX_DELAY;
 8014b14:	4b18      	ldr	r3, [pc, #96]	; (8014b78 <xTaskResumeAll+0x104>)
 8014b16:	f04f 32ff 	mov.w	r2, #4294967295
 8014b1a:	601a      	str	r2, [r3, #0]
 8014b1c:	e006      	b.n	8014b2c <xTaskResumeAll+0xb8>
BaseType_t xAlreadyYielded = pdFALSE;
 8014b1e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8014b20:	f000 fe96 	bl	8015850 <vPortExitCritical>
}
 8014b24:	4620      	mov	r0, r4
 8014b26:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b2a:	4d11      	ldr	r5, [pc, #68]	; (8014b70 <xTaskResumeAll+0xfc>)
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8014b2c:	4e13      	ldr	r6, [pc, #76]	; (8014b7c <xTaskResumeAll+0x108>)
 8014b2e:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8014b30:	b13c      	cbz	r4, 8014b42 <xTaskResumeAll+0xce>
								xYieldPending = pdTRUE;
 8014b32:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8014b34:	f7ff feec 	bl	8014910 <xTaskIncrementTick>
 8014b38:	b100      	cbz	r0, 8014b3c <xTaskResumeAll+0xc8>
								xYieldPending = pdTRUE;
 8014b3a:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8014b3c:	3c01      	subs	r4, #1
 8014b3e:	d1f9      	bne.n	8014b34 <xTaskResumeAll+0xc0>
						uxPendedTicks = 0;
 8014b40:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8014b42:	682b      	ldr	r3, [r5, #0]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d0ea      	beq.n	8014b1e <xTaskResumeAll+0xaa>
					taskYIELD_IF_USING_PREEMPTION();
 8014b48:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <xTaskResumeAll+0x10c>)
 8014b4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b4e:	601a      	str	r2, [r3, #0]
 8014b50:	f3bf 8f4f 	dsb	sy
 8014b54:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8014b58:	2401      	movs	r4, #1
 8014b5a:	e7e1      	b.n	8014b20 <xTaskResumeAll+0xac>
 8014b5c:	f7ff fd58 	bl	8014610 <prvResetNextTaskUnblockTime.part.0>
 8014b60:	e7e4      	b.n	8014b2c <xTaskResumeAll+0xb8>
 8014b62:	bf00      	nop
 8014b64:	20001de4 	.word	0x20001de4
 8014b68:	20001dd8 	.word	0x20001dd8
 8014b6c:	20001e20 	.word	0x20001e20
 8014b70:	20001e64 	.word	0x20001e64
 8014b74:	20001d44 	.word	0x20001d44
 8014b78:	20001e18 	.word	0x20001e18
 8014b7c:	20001de0 	.word	0x20001de0
 8014b80:	e000ed04 	.word	0xe000ed04
 8014b84:	20001dec 	.word	0x20001dec
 8014b88:	20001d4c 	.word	0x20001d4c
 8014b8c:	20001d40 	.word	0x20001d40

08014b90 <vTaskDelay>:
	{
 8014b90:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014b92:	b1a8      	cbz	r0, 8014bc0 <vTaskDelay+0x30>
			configASSERT( uxSchedulerSuspended == 0 );
 8014b94:	4b0f      	ldr	r3, [pc, #60]	; (8014bd4 <vTaskDelay+0x44>)
 8014b96:	6819      	ldr	r1, [r3, #0]
 8014b98:	b151      	cbz	r1, 8014bb0 <vTaskDelay+0x20>
 8014b9a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014b9e:	b672      	cpsid	i
 8014ba0:	f383 8811 	msr	BASEPRI, r3
 8014ba4:	f3bf 8f6f 	isb	sy
 8014ba8:	f3bf 8f4f 	dsb	sy
 8014bac:	b662      	cpsie	i
 8014bae:	e7fe      	b.n	8014bae <vTaskDelay+0x1e>
	++uxSchedulerSuspended;
 8014bb0:	681a      	ldr	r2, [r3, #0]
 8014bb2:	3201      	adds	r2, #1
 8014bb4:	601a      	str	r2, [r3, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014bb6:	f7ff fce7 	bl	8014588 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8014bba:	f7ff ff5b 	bl	8014a74 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8014bbe:	b938      	cbnz	r0, 8014bd0 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
 8014bc0:	4b05      	ldr	r3, [pc, #20]	; (8014bd8 <vTaskDelay+0x48>)
 8014bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014bc6:	601a      	str	r2, [r3, #0]
 8014bc8:	f3bf 8f4f 	dsb	sy
 8014bcc:	f3bf 8f6f 	isb	sy
	}
 8014bd0:	bd08      	pop	{r3, pc}
 8014bd2:	bf00      	nop
 8014bd4:	20001de4 	.word	0x20001de4
 8014bd8:	e000ed04 	.word	0xe000ed04

08014bdc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014bdc:	4b1e      	ldr	r3, [pc, #120]	; (8014c58 <vTaskSwitchContext+0x7c>)
 8014bde:	681b      	ldr	r3, [r3, #0]
 8014be0:	b11b      	cbz	r3, 8014bea <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8014be2:	4b1e      	ldr	r3, [pc, #120]	; (8014c5c <vTaskSwitchContext+0x80>)
 8014be4:	2201      	movs	r2, #1
 8014be6:	601a      	str	r2, [r3, #0]
 8014be8:	4770      	bx	lr
		xYieldPending = pdFALSE;
 8014bea:	4a1c      	ldr	r2, [pc, #112]	; (8014c5c <vTaskSwitchContext+0x80>)
{
 8014bec:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 8014bee:	4c1c      	ldr	r4, [pc, #112]	; (8014c60 <vTaskSwitchContext+0x84>)
		xYieldPending = pdFALSE;
 8014bf0:	6013      	str	r3, [r2, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8014bf2:	6822      	ldr	r2, [r4, #0]
 8014bf4:	6823      	ldr	r3, [r4, #0]
 8014bf6:	6812      	ldr	r2, [r2, #0]
 8014bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014bfa:	429a      	cmp	r2, r3
 8014bfc:	d923      	bls.n	8014c46 <vTaskSwitchContext+0x6a>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bfe:	4b19      	ldr	r3, [pc, #100]	; (8014c64 <vTaskSwitchContext+0x88>)
 8014c00:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8014c02:	fab3 f383 	clz	r3, r3
 8014c06:	b2db      	uxtb	r3, r3
 8014c08:	4a17      	ldr	r2, [pc, #92]	; (8014c68 <vTaskSwitchContext+0x8c>)
 8014c0a:	f1c3 031f 	rsb	r3, r3, #31
 8014c0e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014c12:	0099      	lsls	r1, r3, #2
 8014c14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014c18:	5850      	ldr	r0, [r2, r1]
 8014c1a:	b950      	cbnz	r0, 8014c32 <vTaskSwitchContext+0x56>
	__asm volatile
 8014c1c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c20:	b672      	cpsid	i
 8014c22:	f383 8811 	msr	BASEPRI, r3
 8014c26:	f3bf 8f6f 	isb	sy
 8014c2a:	f3bf 8f4f 	dsb	sy
 8014c2e:	b662      	cpsie	i
 8014c30:	e7fe      	b.n	8014c30 <vTaskSwitchContext+0x54>
 8014c32:	6858      	ldr	r0, [r3, #4]
 8014c34:	3108      	adds	r1, #8
 8014c36:	4411      	add	r1, r2
 8014c38:	6842      	ldr	r2, [r0, #4]
 8014c3a:	428a      	cmp	r2, r1
 8014c3c:	605a      	str	r2, [r3, #4]
 8014c3e:	d008      	beq.n	8014c52 <vTaskSwitchContext+0x76>
 8014c40:	68d3      	ldr	r3, [r2, #12]
 8014c42:	6023      	str	r3, [r4, #0]
}
 8014c44:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 8014c46:	6820      	ldr	r0, [r4, #0]
 8014c48:	6821      	ldr	r1, [r4, #0]
 8014c4a:	3134      	adds	r1, #52	; 0x34
 8014c4c:	f7eb ffb6 	bl	8000bbc <vApplicationStackOverflowHook>
 8014c50:	e7d5      	b.n	8014bfe <vTaskSwitchContext+0x22>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c52:	6852      	ldr	r2, [r2, #4]
 8014c54:	605a      	str	r2, [r3, #4]
 8014c56:	e7f3      	b.n	8014c40 <vTaskSwitchContext+0x64>
 8014c58:	20001de4 	.word	0x20001de4
 8014c5c:	20001e64 	.word	0x20001e64
 8014c60:	20001d40 	.word	0x20001d40
 8014c64:	20001dec 	.word	0x20001dec
 8014c68:	20001d4c 	.word	0x20001d4c

08014c6c <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8014c6c:	b160      	cbz	r0, 8014c88 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c6e:	4b0c      	ldr	r3, [pc, #48]	; (8014ca0 <vTaskPlaceOnEventList+0x34>)
{
 8014c70:	b510      	push	{r4, lr}
 8014c72:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c74:	6819      	ldr	r1, [r3, #0]
 8014c76:	3118      	adds	r1, #24
 8014c78:	f7fe fe54 	bl	8013924 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c7c:	4620      	mov	r0, r4
 8014c7e:	2101      	movs	r1, #1
}
 8014c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c84:	f7ff bc80 	b.w	8014588 <prvAddCurrentTaskToDelayedList>
 8014c88:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014c8c:	b672      	cpsid	i
 8014c8e:	f383 8811 	msr	BASEPRI, r3
 8014c92:	f3bf 8f6f 	isb	sy
 8014c96:	f3bf 8f4f 	dsb	sy
 8014c9a:	b662      	cpsie	i
	configASSERT( pxEventList );
 8014c9c:	e7fe      	b.n	8014c9c <vTaskPlaceOnEventList+0x30>
 8014c9e:	bf00      	nop
 8014ca0:	20001d40 	.word	0x20001d40

08014ca4 <vTaskPlaceOnEventListRestricted>:
	{
 8014ca4:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8014ca6:	b180      	cbz	r0, 8014cca <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014ca8:	4b0d      	ldr	r3, [pc, #52]	; (8014ce0 <vTaskPlaceOnEventListRestricted+0x3c>)
 8014caa:	460d      	mov	r5, r1
 8014cac:	4614      	mov	r4, r2
 8014cae:	6819      	ldr	r1, [r3, #0]
 8014cb0:	3118      	adds	r1, #24
 8014cb2:	f7fe fe27 	bl	8013904 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8014cb6:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cb8:	4621      	mov	r1, r4
 8014cba:	bf0c      	ite	eq
 8014cbc:	4628      	moveq	r0, r5
 8014cbe:	f04f 30ff 	movne.w	r0, #4294967295
	}
 8014cc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014cc6:	f7ff bc5f 	b.w	8014588 <prvAddCurrentTaskToDelayedList>
 8014cca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014cce:	b672      	cpsid	i
 8014cd0:	f383 8811 	msr	BASEPRI, r3
 8014cd4:	f3bf 8f6f 	isb	sy
 8014cd8:	f3bf 8f4f 	dsb	sy
 8014cdc:	b662      	cpsie	i
		configASSERT( pxEventList );
 8014cde:	e7fe      	b.n	8014cde <vTaskPlaceOnEventListRestricted+0x3a>
 8014ce0:	20001d40 	.word	0x20001d40

08014ce4 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ce4:	68c3      	ldr	r3, [r0, #12]
{
 8014ce6:	b570      	push	{r4, r5, r6, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ce8:	68dc      	ldr	r4, [r3, #12]
{
 8014cea:	b082      	sub	sp, #8
	configASSERT( pxUnblockedTCB );
 8014cec:	b364      	cbz	r4, 8014d48 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014cee:	f104 0118 	add.w	r1, r4, #24
 8014cf2:	4608      	mov	r0, r1
 8014cf4:	9101      	str	r1, [sp, #4]
 8014cf6:	f7fe fe2d 	bl	8013954 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014cfa:	4b1a      	ldr	r3, [pc, #104]	; (8014d64 <xTaskRemoveFromEventList+0x80>)
 8014cfc:	9901      	ldr	r1, [sp, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	b16b      	cbz	r3, 8014d1e <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d02:	4819      	ldr	r0, [pc, #100]	; (8014d68 <xTaskRemoveFromEventList+0x84>)
 8014d04:	f7fe fdfe 	bl	8013904 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d08:	4b18      	ldr	r3, [pc, #96]	; (8014d6c <xTaskRemoveFromEventList+0x88>)
 8014d0a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d10:	429a      	cmp	r2, r3
 8014d12:	d924      	bls.n	8014d5e <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 8014d14:	2001      	movs	r0, #1
 8014d16:	4b16      	ldr	r3, [pc, #88]	; (8014d70 <xTaskRemoveFromEventList+0x8c>)
 8014d18:	6018      	str	r0, [r3, #0]
}
 8014d1a:	b002      	add	sp, #8
 8014d1c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d1e:	1d21      	adds	r1, r4, #4
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d20:	4d14      	ldr	r5, [pc, #80]	; (8014d74 <xTaskRemoveFromEventList+0x90>)
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d22:	4608      	mov	r0, r1
 8014d24:	9101      	str	r1, [sp, #4]
 8014d26:	f7fe fe15 	bl	8013954 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d2a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014d2c:	2301      	movs	r3, #1
 8014d2e:	682e      	ldr	r6, [r5, #0]
 8014d30:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8014d34:	9901      	ldr	r1, [sp, #4]
 8014d36:	4093      	lsls	r3, r2
 8014d38:	4a0f      	ldr	r2, [pc, #60]	; (8014d78 <xTaskRemoveFromEventList+0x94>)
 8014d3a:	4333      	orrs	r3, r6
 8014d3c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8014d40:	602b      	str	r3, [r5, #0]
 8014d42:	f7fe fddf 	bl	8013904 <vListInsertEnd>
 8014d46:	e7df      	b.n	8014d08 <xTaskRemoveFromEventList+0x24>
 8014d48:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014d4c:	b672      	cpsid	i
 8014d4e:	f383 8811 	msr	BASEPRI, r3
 8014d52:	f3bf 8f6f 	isb	sy
 8014d56:	f3bf 8f4f 	dsb	sy
 8014d5a:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8014d5c:	e7fe      	b.n	8014d5c <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 8014d5e:	2000      	movs	r0, #0
}
 8014d60:	b002      	add	sp, #8
 8014d62:	bd70      	pop	{r4, r5, r6, pc}
 8014d64:	20001de4 	.word	0x20001de4
 8014d68:	20001e20 	.word	0x20001e20
 8014d6c:	20001d40 	.word	0x20001d40
 8014d70:	20001e64 	.word	0x20001e64
 8014d74:	20001dec 	.word	0x20001dec
 8014d78:	20001d4c 	.word	0x20001d4c

08014d7c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d7c:	4a03      	ldr	r2, [pc, #12]	; (8014d8c <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d7e:	4b04      	ldr	r3, [pc, #16]	; (8014d90 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d80:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d82:	681b      	ldr	r3, [r3, #0]
 8014d84:	e9c0 2300 	strd	r2, r3, [r0]
}
 8014d88:	4770      	bx	lr
 8014d8a:	bf00      	nop
 8014d8c:	20001e1c 	.word	0x20001e1c
 8014d90:	20001e60 	.word	0x20001e60

08014d94 <xTaskCheckForTimeOut>:
{
 8014d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8014d96:	b318      	cbz	r0, 8014de0 <xTaskCheckForTimeOut+0x4c>
	configASSERT( pxTicksToWait );
 8014d98:	460d      	mov	r5, r1
 8014d9a:	b1b1      	cbz	r1, 8014dca <xTaskCheckForTimeOut+0x36>
 8014d9c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8014d9e:	f000 fd31 	bl	8015804 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8014da2:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8014da4:	f8df c080 	ldr.w	ip, [pc, #128]	; 8014e28 <xTaskCheckForTimeOut+0x94>
			if( *pxTicksToWait == portMAX_DELAY )
 8014da8:	1c5a      	adds	r2, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8014daa:	f8dc 1000 	ldr.w	r1, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8014dae:	d02f      	beq.n	8014e10 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014db0:	4e1c      	ldr	r6, [pc, #112]	; (8014e24 <xTaskCheckForTimeOut+0x90>)
 8014db2:	e9d4 0200 	ldrd	r0, r2, [r4]
 8014db6:	6837      	ldr	r7, [r6, #0]
 8014db8:	42b8      	cmp	r0, r7
 8014dba:	d01c      	beq.n	8014df6 <xTaskCheckForTimeOut+0x62>
 8014dbc:	428a      	cmp	r2, r1
 8014dbe:	d81a      	bhi.n	8014df6 <xTaskCheckForTimeOut+0x62>
			xReturn = pdTRUE;
 8014dc0:	2601      	movs	r6, #1
	taskEXIT_CRITICAL();
 8014dc2:	f000 fd45 	bl	8015850 <vPortExitCritical>
}
 8014dc6:	4630      	mov	r0, r6
 8014dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dca:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014dce:	b672      	cpsid	i
 8014dd0:	f383 8811 	msr	BASEPRI, r3
 8014dd4:	f3bf 8f6f 	isb	sy
 8014dd8:	f3bf 8f4f 	dsb	sy
 8014ddc:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 8014dde:	e7fe      	b.n	8014dde <xTaskCheckForTimeOut+0x4a>
 8014de0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014de4:	b672      	cpsid	i
 8014de6:	f383 8811 	msr	BASEPRI, r3
 8014dea:	f3bf 8f6f 	isb	sy
 8014dee:	f3bf 8f4f 	dsb	sy
 8014df2:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 8014df4:	e7fe      	b.n	8014df4 <xTaskCheckForTimeOut+0x60>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014df6:	1a8f      	subs	r7, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014df8:	42bb      	cmp	r3, r7
 8014dfa:	d90e      	bls.n	8014e1a <xTaskCheckForTimeOut+0x86>
			*pxTicksToWait -= xElapsedTime;
 8014dfc:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014dfe:	6837      	ldr	r7, [r6, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e00:	f8dc 1000 	ldr.w	r1, [ip]
			xReturn = pdFALSE;
 8014e04:	2600      	movs	r6, #0
			*pxTicksToWait -= xElapsedTime;
 8014e06:	4413      	add	r3, r2
 8014e08:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e0a:	e9c4 7100 	strd	r7, r1, [r4]
			xReturn = pdFALSE;
 8014e0e:	e7d8      	b.n	8014dc2 <xTaskCheckForTimeOut+0x2e>
				xReturn = pdFALSE;
 8014e10:	2600      	movs	r6, #0
	taskEXIT_CRITICAL();
 8014e12:	f000 fd1d 	bl	8015850 <vPortExitCritical>
}
 8014e16:	4630      	mov	r0, r6
 8014e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*pxTicksToWait = 0;
 8014e1a:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 8014e1c:	2601      	movs	r6, #1
			*pxTicksToWait = 0;
 8014e1e:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8014e20:	e7cf      	b.n	8014dc2 <xTaskCheckForTimeOut+0x2e>
 8014e22:	bf00      	nop
 8014e24:	20001e1c 	.word	0x20001e1c
 8014e28:	20001e60 	.word	0x20001e60

08014e2c <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8014e2c:	4b01      	ldr	r3, [pc, #4]	; (8014e34 <vTaskMissedYield+0x8>)
 8014e2e:	2201      	movs	r2, #1
 8014e30:	601a      	str	r2, [r3, #0]
}
 8014e32:	4770      	bx	lr
 8014e34:	20001e64 	.word	0x20001e64

08014e38 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8014e38:	4b01      	ldr	r3, [pc, #4]	; (8014e40 <xTaskGetCurrentTaskHandle+0x8>)
 8014e3a:	6818      	ldr	r0, [r3, #0]
	}
 8014e3c:	4770      	bx	lr
 8014e3e:	bf00      	nop
 8014e40:	20001d40 	.word	0x20001d40

08014e44 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8014e44:	4b05      	ldr	r3, [pc, #20]	; (8014e5c <xTaskGetSchedulerState+0x18>)
 8014e46:	681b      	ldr	r3, [r3, #0]
 8014e48:	b133      	cbz	r3, 8014e58 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e4a:	4b05      	ldr	r3, [pc, #20]	; (8014e60 <xTaskGetSchedulerState+0x1c>)
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e50:	bf0c      	ite	eq
 8014e52:	2002      	moveq	r0, #2
 8014e54:	2000      	movne	r0, #0
 8014e56:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014e58:	2001      	movs	r0, #1
	}
 8014e5a:	4770      	bx	lr
 8014e5c:	20001e34 	.word	0x20001e34
 8014e60:	20001de4 	.word	0x20001de4

08014e64 <xTaskPriorityInherit>:
	{
 8014e64:	b5f0      	push	{r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8014e66:	4604      	mov	r4, r0
	{
 8014e68:	b083      	sub	sp, #12
		if( pxMutexHolder != NULL )
 8014e6a:	b1c8      	cbz	r0, 8014ea0 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014e6c:	4d26      	ldr	r5, [pc, #152]	; (8014f08 <xTaskPriorityInherit+0xa4>)
 8014e6e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8014e70:	682a      	ldr	r2, [r5, #0]
 8014e72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014e74:	4293      	cmp	r3, r2
 8014e76:	d215      	bcs.n	8014ea4 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014e78:	6982      	ldr	r2, [r0, #24]
 8014e7a:	2a00      	cmp	r2, #0
 8014e7c:	db04      	blt.n	8014e88 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e7e:	682a      	ldr	r2, [r5, #0]
 8014e80:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8014e82:	f1c2 0207 	rsb	r2, r2, #7
 8014e86:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014e88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014e8c:	4e1f      	ldr	r6, [pc, #124]	; (8014f0c <xTaskPriorityInherit+0xa8>)
 8014e8e:	6962      	ldr	r2, [r4, #20]
 8014e90:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d00e      	beq.n	8014eb6 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e98:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8014e9a:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e9e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 8014ea0:	b003      	add	sp, #12
 8014ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014ea4:	682b      	ldr	r3, [r5, #0]
 8014ea6:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8014ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eaa:	4298      	cmp	r0, r3
 8014eac:	bf2c      	ite	cs
 8014eae:	2000      	movcs	r0, #0
 8014eb0:	2001      	movcc	r0, #1
	}
 8014eb2:	b003      	add	sp, #12
 8014eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014eb6:	1d21      	adds	r1, r4, #4
 8014eb8:	4608      	mov	r0, r1
 8014eba:	9101      	str	r1, [sp, #4]
 8014ebc:	f7fe fd4a 	bl	8013954 <uxListRemove>
 8014ec0:	9901      	ldr	r1, [sp, #4]
 8014ec2:	b970      	cbnz	r0, 8014ee2 <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8014ec4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8014ec6:	4a12      	ldr	r2, [pc, #72]	; (8014f10 <xTaskPriorityInherit+0xac>)
 8014ec8:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8014ecc:	009b      	lsls	r3, r3, #2
 8014ece:	58f3      	ldr	r3, [r6, r3]
 8014ed0:	b943      	cbnz	r3, 8014ee4 <xTaskPriorityInherit+0x80>
 8014ed2:	2701      	movs	r7, #1
 8014ed4:	6813      	ldr	r3, [r2, #0]
 8014ed6:	fa07 f000 	lsl.w	r0, r7, r0
 8014eda:	ea23 0300 	bic.w	r3, r3, r0
 8014ede:	6013      	str	r3, [r2, #0]
 8014ee0:	e000      	b.n	8014ee4 <xTaskPriorityInherit+0x80>
 8014ee2:	4a0b      	ldr	r2, [pc, #44]	; (8014f10 <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ee4:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014ee6:	2501      	movs	r5, #1
 8014ee8:	6817      	ldr	r7, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014eea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014eec:	fa05 f300 	lsl.w	r3, r5, r0
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ef0:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014ef2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8014ef6:	433b      	orrs	r3, r7
 8014ef8:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8014efc:	6013      	str	r3, [r2, #0]
 8014efe:	f7fe fd01 	bl	8013904 <vListInsertEnd>
				xReturn = pdTRUE;
 8014f02:	4628      	mov	r0, r5
 8014f04:	e7cc      	b.n	8014ea0 <xTaskPriorityInherit+0x3c>
 8014f06:	bf00      	nop
 8014f08:	20001d40 	.word	0x20001d40
 8014f0c:	20001d4c 	.word	0x20001d4c
 8014f10:	20001dec 	.word	0x20001dec

08014f14 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 8014f14:	b1e8      	cbz	r0, 8014f52 <xTaskPriorityDisinherit+0x3e>
			configASSERT( pxTCB == pxCurrentTCB );
 8014f16:	4b2c      	ldr	r3, [pc, #176]	; (8014fc8 <xTaskPriorityDisinherit+0xb4>)
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4283      	cmp	r3, r0
	{
 8014f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f1e:	4604      	mov	r4, r0
 8014f20:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 8014f22:	d00a      	beq.n	8014f3a <xTaskPriorityDisinherit+0x26>
 8014f24:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f28:	b672      	cpsid	i
 8014f2a:	f383 8811 	msr	BASEPRI, r3
 8014f2e:	f3bf 8f6f 	isb	sy
 8014f32:	f3bf 8f4f 	dsb	sy
 8014f36:	b662      	cpsie	i
 8014f38:	e7fe      	b.n	8014f38 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014f3c:	b15b      	cbz	r3, 8014f56 <xTaskPriorityDisinherit+0x42>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f3e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8014f40:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f42:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8014f44:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014f46:	4291      	cmp	r1, r2
 8014f48:	d000      	beq.n	8014f4c <xTaskPriorityDisinherit+0x38>
 8014f4a:	b17b      	cbz	r3, 8014f6c <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8014f4c:	2000      	movs	r0, #0
	}
 8014f4e:	b003      	add	sp, #12
 8014f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	BaseType_t xReturn = pdFALSE;
 8014f52:	2000      	movs	r0, #0
	}
 8014f54:	4770      	bx	lr
 8014f56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014f5a:	b672      	cpsid	i
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8014f6a:	e7fe      	b.n	8014f6a <xTaskPriorityDisinherit+0x56>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014f6c:	1d01      	adds	r1, r0, #4
 8014f6e:	4608      	mov	r0, r1
 8014f70:	9101      	str	r1, [sp, #4]
 8014f72:	f7fe fcef 	bl	8013954 <uxListRemove>
 8014f76:	9901      	ldr	r1, [sp, #4]
 8014f78:	b1b0      	cbz	r0, 8014fa8 <xTaskPriorityDisinherit+0x94>
 8014f7a:	4814      	ldr	r0, [pc, #80]	; (8014fcc <xTaskPriorityDisinherit+0xb8>)
 8014f7c:	4a14      	ldr	r2, [pc, #80]	; (8014fd0 <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f7e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 8014f80:	2501      	movs	r5, #1
 8014f82:	f8d2 c000 	ldr.w	ip, [r2]
 8014f86:	fa05 f603 	lsl.w	r6, r5, r3
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f8a:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014f8e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 8014f90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014f94:	ea46 060c 	orr.w	r6, r6, ip
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f98:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8014f9a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8014f9e:	6016      	str	r6, [r2, #0]
 8014fa0:	f7fe fcb0 	bl	8013904 <vListInsertEnd>
					xReturn = pdTRUE;
 8014fa4:	4628      	mov	r0, r5
		return xReturn;
 8014fa6:	e7d2      	b.n	8014f4e <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8014fa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014faa:	4808      	ldr	r0, [pc, #32]	; (8014fcc <xTaskPriorityDisinherit+0xb8>)
 8014fac:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 8014fb0:	4a07      	ldr	r2, [pc, #28]	; (8014fd0 <xTaskPriorityDisinherit+0xbc>)
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	58c3      	ldr	r3, [r0, r3]
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d1e1      	bne.n	8014f7e <xTaskPriorityDisinherit+0x6a>
 8014fba:	2501      	movs	r5, #1
 8014fbc:	6813      	ldr	r3, [r2, #0]
 8014fbe:	40b5      	lsls	r5, r6
 8014fc0:	ea23 0305 	bic.w	r3, r3, r5
 8014fc4:	6013      	str	r3, [r2, #0]
 8014fc6:	e7da      	b.n	8014f7e <xTaskPriorityDisinherit+0x6a>
 8014fc8:	20001d40 	.word	0x20001d40
 8014fcc:	20001d4c 	.word	0x20001d4c
 8014fd0:	20001dec 	.word	0x20001dec

08014fd4 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 8014fd4:	b1d8      	cbz	r0, 801500e <vTaskPriorityDisinheritAfterTimeout+0x3a>
			configASSERT( pxTCB->uxMutexesHeld );
 8014fd6:	460b      	mov	r3, r1
 8014fd8:	6c81      	ldr	r1, [r0, #72]	; 0x48
	{
 8014fda:	b570      	push	{r4, r5, r6, lr}
 8014fdc:	4604      	mov	r4, r0
 8014fde:	b082      	sub	sp, #8
			configASSERT( pxTCB->uxMutexesHeld );
 8014fe0:	b151      	cbz	r1, 8014ff8 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8014fe2:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 8014fe4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8014fe6:	4283      	cmp	r3, r0
 8014fe8:	bf38      	it	cc
 8014fea:	4603      	movcc	r3, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8014fec:	429a      	cmp	r2, r3
 8014fee:	d001      	beq.n	8014ff4 <vTaskPriorityDisinheritAfterTimeout+0x20>
 8014ff0:	2901      	cmp	r1, #1
 8014ff2:	d00d      	beq.n	8015010 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	}
 8014ff4:	b002      	add	sp, #8
 8014ff6:	bd70      	pop	{r4, r5, r6, pc}
 8014ff8:	f04f 0330 	mov.w	r3, #48	; 0x30
 8014ffc:	b672      	cpsid	i
 8014ffe:	f383 8811 	msr	BASEPRI, r3
 8015002:	f3bf 8f6f 	isb	sy
 8015006:	f3bf 8f4f 	dsb	sy
 801500a:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 801500c:	e7fe      	b.n	801500c <vTaskPriorityDisinheritAfterTimeout+0x38>
 801500e:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8015010:	4923      	ldr	r1, [pc, #140]	; (80150a0 <vTaskPriorityDisinheritAfterTimeout+0xcc>)
 8015012:	6809      	ldr	r1, [r1, #0]
 8015014:	42a1      	cmp	r1, r4
 8015016:	d025      	beq.n	8015064 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015018:	69a1      	ldr	r1, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 801501a:	62e3      	str	r3, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801501c:	2900      	cmp	r1, #0
 801501e:	db02      	blt.n	8015026 <vTaskPriorityDisinheritAfterTimeout+0x52>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015020:	f1c3 0307 	rsb	r3, r3, #7
 8015024:	61a3      	str	r3, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015026:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801502a:	4d1e      	ldr	r5, [pc, #120]	; (80150a4 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 801502c:	6961      	ldr	r1, [r4, #20]
 801502e:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8015032:	4299      	cmp	r1, r3
 8015034:	d1de      	bne.n	8014ff4 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015036:	1d21      	adds	r1, r4, #4
 8015038:	4608      	mov	r0, r1
 801503a:	9101      	str	r1, [sp, #4]
 801503c:	f7fe fc8a 	bl	8013954 <uxListRemove>
 8015040:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8015042:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015044:	b1c8      	cbz	r0, 801507a <vTaskPriorityDisinheritAfterTimeout+0xa6>
 8015046:	2301      	movs	r3, #1
 8015048:	4c17      	ldr	r4, [pc, #92]	; (80150a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801504a:	0090      	lsls	r0, r2, #2
 801504c:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 801504e:	6826      	ldr	r6, [r4, #0]
 8015050:	4410      	add	r0, r2
 8015052:	4333      	orrs	r3, r6
 8015054:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8015058:	6023      	str	r3, [r4, #0]
	}
 801505a:	b002      	add	sp, #8
 801505c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8015060:	f7fe bc50 	b.w	8013904 <vListInsertEnd>
 8015064:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015068:	b672      	cpsid	i
 801506a:	f383 8811 	msr	BASEPRI, r3
 801506e:	f3bf 8f6f 	isb	sy
 8015072:	f3bf 8f4f 	dsb	sy
 8015076:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8015078:	e7fe      	b.n	8015078 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801507a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801507e:	0090      	lsls	r0, r2, #2
 8015080:	009b      	lsls	r3, r3, #2
 8015082:	58eb      	ldr	r3, [r5, r3]
 8015084:	b11b      	cbz	r3, 801508e <vTaskPriorityDisinheritAfterTimeout+0xba>
 8015086:	2301      	movs	r3, #1
 8015088:	4c07      	ldr	r4, [pc, #28]	; (80150a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 801508a:	4093      	lsls	r3, r2
 801508c:	e7df      	b.n	801504e <vTaskPriorityDisinheritAfterTimeout+0x7a>
 801508e:	4c06      	ldr	r4, [pc, #24]	; (80150a8 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8015090:	2301      	movs	r3, #1
 8015092:	6826      	ldr	r6, [r4, #0]
 8015094:	4093      	lsls	r3, r2
 8015096:	ea26 0603 	bic.w	r6, r6, r3
 801509a:	6026      	str	r6, [r4, #0]
 801509c:	e7d7      	b.n	801504e <vTaskPriorityDisinheritAfterTimeout+0x7a>
 801509e:	bf00      	nop
 80150a0:	20001d40 	.word	0x20001d40
 80150a4:	20001d4c 	.word	0x20001d4c
 80150a8:	20001dec 	.word	0x20001dec

080150ac <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80150ac:	4b04      	ldr	r3, [pc, #16]	; (80150c0 <pvTaskIncrementMutexHeldCount+0x14>)
 80150ae:	681a      	ldr	r2, [r3, #0]
 80150b0:	b11a      	cbz	r2, 80150ba <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80150b2:	6819      	ldr	r1, [r3, #0]
 80150b4:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 80150b6:	3201      	adds	r2, #1
 80150b8:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 80150ba:	6818      	ldr	r0, [r3, #0]
	}
 80150bc:	4770      	bx	lr
 80150be:	bf00      	nop
 80150c0:	20001d40 	.word	0x20001d40

080150c4 <ulTaskNotifyTake>:
	{
 80150c4:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80150c6:	4c17      	ldr	r4, [pc, #92]	; (8015124 <ulTaskNotifyTake+0x60>)
	{
 80150c8:	4606      	mov	r6, r0
 80150ca:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 80150cc:	f000 fb9a 	bl	8015804 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80150d0:	6823      	ldr	r3, [r4, #0]
 80150d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150d4:	b923      	cbnz	r3, 80150e0 <ulTaskNotifyTake+0x1c>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80150d6:	6823      	ldr	r3, [r4, #0]
 80150d8:	2101      	movs	r1, #1
 80150da:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80150de:	b9ad      	cbnz	r5, 801510c <ulTaskNotifyTake+0x48>
		taskEXIT_CRITICAL();
 80150e0:	f000 fbb6 	bl	8015850 <vPortExitCritical>
		taskENTER_CRITICAL();
 80150e4:	f000 fb8e 	bl	8015804 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 80150e8:	6823      	ldr	r3, [r4, #0]
 80150ea:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
			if( ulReturn != 0UL )
 80150ec:	b11d      	cbz	r5, 80150f6 <ulTaskNotifyTake+0x32>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80150ee:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 80150f0:	b14e      	cbz	r6, 8015106 <ulTaskNotifyTake+0x42>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80150f2:	2200      	movs	r2, #0
 80150f4:	64da      	str	r2, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80150f6:	6823      	ldr	r3, [r4, #0]
 80150f8:	2200      	movs	r2, #0
 80150fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80150fe:	f000 fba7 	bl	8015850 <vPortExitCritical>
	}
 8015102:	4628      	mov	r0, r5
 8015104:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015106:	1e6a      	subs	r2, r5, #1
 8015108:	64da      	str	r2, [r3, #76]	; 0x4c
 801510a:	e7f4      	b.n	80150f6 <ulTaskNotifyTake+0x32>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801510c:	4628      	mov	r0, r5
 801510e:	f7ff fa3b 	bl	8014588 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8015112:	4b05      	ldr	r3, [pc, #20]	; (8015128 <ulTaskNotifyTake+0x64>)
 8015114:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015118:	601a      	str	r2, [r3, #0]
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	f3bf 8f6f 	isb	sy
 8015122:	e7dd      	b.n	80150e0 <ulTaskNotifyTake+0x1c>
 8015124:	20001d40 	.word	0x20001d40
 8015128:	e000ed04 	.word	0xe000ed04

0801512c <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 801512c:	b308      	cbz	r0, 8015172 <vTaskNotifyGiveFromISR+0x46>
	{
 801512e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015130:	b083      	sub	sp, #12
 8015132:	4604      	mov	r4, r0
 8015134:	460e      	mov	r6, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015136:	f000 fc71 	bl	8015a1c <vPortValidateInterruptPriority>
	__asm volatile
 801513a:	f3ef 8711 	mrs	r7, BASEPRI
 801513e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015142:	b672      	cpsid	i
 8015144:	f383 8811 	msr	BASEPRI, r3
 8015148:	f3bf 8f6f 	isb	sy
 801514c:	f3bf 8f4f 	dsb	sy
 8015150:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015152:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015154:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015158:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801515c:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 801515e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015160:	b2d5      	uxtb	r5, r2
			( pxTCB->ulNotifiedValue )++;
 8015162:	f103 0301 	add.w	r3, r3, #1
 8015166:	64e3      	str	r3, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015168:	d00e      	beq.n	8015188 <vTaskNotifyGiveFromISR+0x5c>
	__asm volatile
 801516a:	f387 8811 	msr	BASEPRI, r7
	}
 801516e:	b003      	add	sp, #12
 8015170:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8015172:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015176:	b672      	cpsid	i
 8015178:	f383 8811 	msr	BASEPRI, r3
 801517c:	f3bf 8f6f 	isb	sy
 8015180:	f3bf 8f4f 	dsb	sy
 8015184:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8015186:	e7fe      	b.n	8015186 <vTaskNotifyGiveFromISR+0x5a>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801518a:	b153      	cbz	r3, 80151a2 <vTaskNotifyGiveFromISR+0x76>
 801518c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015190:	b672      	cpsid	i
 8015192:	f383 8811 	msr	BASEPRI, r3
 8015196:	f3bf 8f6f 	isb	sy
 801519a:	f3bf 8f4f 	dsb	sy
 801519e:	b662      	cpsie	i
 80151a0:	e7fe      	b.n	80151a0 <vTaskNotifyGiveFromISR+0x74>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80151a2:	4b16      	ldr	r3, [pc, #88]	; (80151fc <vTaskNotifyGiveFromISR+0xd0>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	bb13      	cbnz	r3, 80151ee <vTaskNotifyGiveFromISR+0xc2>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80151a8:	1d21      	adds	r1, r4, #4
 80151aa:	4608      	mov	r0, r1
 80151ac:	9101      	str	r1, [sp, #4]
 80151ae:	f7fe fbd1 	bl	8013954 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80151b2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80151b4:	4a12      	ldr	r2, [pc, #72]	; (8015200 <vTaskNotifyGiveFromISR+0xd4>)
 80151b6:	fa05 f300 	lsl.w	r3, r5, r0
 80151ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80151be:	f8d2 c000 	ldr.w	ip, [r2]
 80151c2:	4d10      	ldr	r5, [pc, #64]	; (8015204 <vTaskNotifyGiveFromISR+0xd8>)
 80151c4:	ea43 030c 	orr.w	r3, r3, ip
 80151c8:	9901      	ldr	r1, [sp, #4]
 80151ca:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80151ce:	6013      	str	r3, [r2, #0]
 80151d0:	f7fe fb98 	bl	8013904 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80151d4:	4b0c      	ldr	r3, [pc, #48]	; (8015208 <vTaskNotifyGiveFromISR+0xdc>)
 80151d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80151dc:	429a      	cmp	r2, r3
 80151de:	d9c4      	bls.n	801516a <vTaskNotifyGiveFromISR+0x3e>
					if( pxHigherPriorityTaskWoken != NULL )
 80151e0:	b10e      	cbz	r6, 80151e6 <vTaskNotifyGiveFromISR+0xba>
						*pxHigherPriorityTaskWoken = pdTRUE;
 80151e2:	2301      	movs	r3, #1
 80151e4:	6033      	str	r3, [r6, #0]
					xYieldPending = pdTRUE;
 80151e6:	4b09      	ldr	r3, [pc, #36]	; (801520c <vTaskNotifyGiveFromISR+0xe0>)
 80151e8:	2201      	movs	r2, #1
 80151ea:	601a      	str	r2, [r3, #0]
 80151ec:	e7bd      	b.n	801516a <vTaskNotifyGiveFromISR+0x3e>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80151ee:	f104 0118 	add.w	r1, r4, #24
 80151f2:	4807      	ldr	r0, [pc, #28]	; (8015210 <vTaskNotifyGiveFromISR+0xe4>)
 80151f4:	f7fe fb86 	bl	8013904 <vListInsertEnd>
 80151f8:	e7ec      	b.n	80151d4 <vTaskNotifyGiveFromISR+0xa8>
 80151fa:	bf00      	nop
 80151fc:	20001de4 	.word	0x20001de4
 8015200:	20001dec 	.word	0x20001dec
 8015204:	20001d4c 	.word	0x20001d4c
 8015208:	20001d40 	.word	0x20001d40
 801520c:	20001e64 	.word	0x20001e64
 8015210:	20001e20 	.word	0x20001e20

08015214 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015214:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8015216:	4c12      	ldr	r4, [pc, #72]	; (8015260 <prvCheckForValidListAndQueue+0x4c>)
{
 8015218:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 801521a:	f000 faf3 	bl	8015804 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 801521e:	6825      	ldr	r5, [r4, #0]
 8015220:	b125      	cbz	r5, 801522c <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8015222:	b003      	add	sp, #12
 8015224:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8015228:	f000 bb12 	b.w	8015850 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 801522c:	4f0d      	ldr	r7, [pc, #52]	; (8015264 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 801522e:	4e0e      	ldr	r6, [pc, #56]	; (8015268 <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8015230:	4638      	mov	r0, r7
 8015232:	f7fe fb57 	bl	80138e4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015236:	4630      	mov	r0, r6
 8015238:	f7fe fb54 	bl	80138e4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801523c:	4b0b      	ldr	r3, [pc, #44]	; (801526c <prvCheckForValidListAndQueue+0x58>)
			pxOverflowTimerList = &xActiveTimerList2;
 801523e:	4a0c      	ldr	r2, [pc, #48]	; (8015270 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015240:	2110      	movs	r1, #16
 8015242:	9500      	str	r5, [sp, #0]
 8015244:	200a      	movs	r0, #10
			pxCurrentTimerList = &xActiveTimerList1;
 8015246:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015248:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801524a:	4b0a      	ldr	r3, [pc, #40]	; (8015274 <prvCheckForValidListAndQueue+0x60>)
 801524c:	4a0a      	ldr	r2, [pc, #40]	; (8015278 <prvCheckForValidListAndQueue+0x64>)
 801524e:	f7fe fc9f 	bl	8013b90 <xQueueGenericCreateStatic>
 8015252:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8015254:	2800      	cmp	r0, #0
 8015256:	d0e4      	beq.n	8015222 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015258:	4908      	ldr	r1, [pc, #32]	; (801527c <prvCheckForValidListAndQueue+0x68>)
 801525a:	f7ff f8bf 	bl	80143dc <vQueueAddToRegistry>
 801525e:	e7e0      	b.n	8015222 <prvCheckForValidListAndQueue+0xe>
 8015260:	20001f84 	.word	0x20001f84
 8015264:	20001f10 	.word	0x20001f10
 8015268:	20001f24 	.word	0x20001f24
 801526c:	20001e68 	.word	0x20001e68
 8015270:	20001e6c 	.word	0x20001e6c
 8015274:	20001f3c 	.word	0x20001f3c
 8015278:	20001e70 	.word	0x20001e70
 801527c:	08029bd0 	.word	0x08029bd0

08015280 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8015280:	4291      	cmp	r1, r2
{
 8015282:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015284:	6100      	str	r0, [r0, #16]
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8015286:	6041      	str	r1, [r0, #4]
	if( xNextExpiryTime <= xTimeNow )
 8015288:	d805      	bhi.n	8015296 <prvInsertTimerInActiveList+0x16>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801528a:	1ad2      	subs	r2, r2, r3
 801528c:	6983      	ldr	r3, [r0, #24]
 801528e:	429a      	cmp	r2, r3
 8015290:	d30c      	bcc.n	80152ac <prvInsertTimerInActiveList+0x2c>
			xProcessTimerNow = pdTRUE;
 8015292:	2001      	movs	r0, #1
}
 8015294:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015296:	429a      	cmp	r2, r3
 8015298:	d201      	bcs.n	801529e <prvInsertTimerInActiveList+0x1e>
 801529a:	4299      	cmp	r1, r3
 801529c:	d2f9      	bcs.n	8015292 <prvInsertTimerInActiveList+0x12>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801529e:	4b07      	ldr	r3, [pc, #28]	; (80152bc <prvInsertTimerInActiveList+0x3c>)
 80152a0:	1d01      	adds	r1, r0, #4
 80152a2:	6818      	ldr	r0, [r3, #0]
 80152a4:	f7fe fb3e 	bl	8013924 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80152a8:	2000      	movs	r0, #0
}
 80152aa:	bd08      	pop	{r3, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80152ac:	4b04      	ldr	r3, [pc, #16]	; (80152c0 <prvInsertTimerInActiveList+0x40>)
 80152ae:	1d01      	adds	r1, r0, #4
 80152b0:	6818      	ldr	r0, [r3, #0]
 80152b2:	f7fe fb37 	bl	8013924 <vListInsert>
 80152b6:	2000      	movs	r0, #0
}
 80152b8:	bd08      	pop	{r3, pc}
 80152ba:	bf00      	nop
 80152bc:	20001e68 	.word	0x20001e68
 80152c0:	20001e6c 	.word	0x20001e6c

080152c4 <prvInitialiseNewTimer>:
{
 80152c4:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 80152c8:	9c07      	ldr	r4, [sp, #28]
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80152ca:	b951      	cbnz	r1, 80152e2 <prvInitialiseNewTimer+0x1e>
 80152cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80152d0:	b672      	cpsid	i
 80152d2:	f383 8811 	msr	BASEPRI, r3
 80152d6:	f3bf 8f6f 	isb	sy
 80152da:	f3bf 8f4f 	dsb	sy
 80152de:	b662      	cpsie	i
 80152e0:	e7fe      	b.n	80152e0 <prvInitialiseNewTimer+0x1c>
	if( pxNewTimer != NULL )
 80152e2:	b1ac      	cbz	r4, 8015310 <prvInitialiseNewTimer+0x4c>
 80152e4:	4681      	mov	r9, r0
 80152e6:	461f      	mov	r7, r3
 80152e8:	460d      	mov	r5, r1
 80152ea:	4616      	mov	r6, r2
		prvCheckForValidListAndQueue();
 80152ec:	f7ff ff92 	bl	8015214 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80152f0:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80152f2:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 80152f4:	f8c4 9000 	str.w	r9, [r4]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80152f8:	61a5      	str	r5, [r4, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80152fa:	61e7      	str	r7, [r4, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80152fc:	6223      	str	r3, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80152fe:	f7fe fafd 	bl	80138fc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015302:	b12e      	cbz	r6, 8015310 <prvInitialiseNewTimer+0x4c>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015304:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8015308:	f043 0304 	orr.w	r3, r3, #4
 801530c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
}
 8015310:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08015314 <xTimerCreateTimerTask>:
{
 8015314:	b510      	push	{r4, lr}
 8015316:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8015318:	f7ff ff7c 	bl	8015214 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 801531c:	4b13      	ldr	r3, [pc, #76]	; (801536c <xTimerCreateTimerTask+0x58>)
 801531e:	681b      	ldr	r3, [r3, #0]
 8015320:	b1cb      	cbz	r3, 8015356 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015322:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015324:	aa07      	add	r2, sp, #28
 8015326:	a906      	add	r1, sp, #24
 8015328:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801532a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801532e:	f7eb fc57 	bl	8000be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015332:	9805      	ldr	r0, [sp, #20]
 8015334:	9906      	ldr	r1, [sp, #24]
 8015336:	2202      	movs	r2, #2
 8015338:	4623      	mov	r3, r4
 801533a:	9200      	str	r2, [sp, #0]
 801533c:	9a07      	ldr	r2, [sp, #28]
 801533e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8015342:	490b      	ldr	r1, [pc, #44]	; (8015370 <xTimerCreateTimerTask+0x5c>)
 8015344:	480b      	ldr	r0, [pc, #44]	; (8015374 <xTimerCreateTimerTask+0x60>)
 8015346:	f7ff fa13 	bl	8014770 <xTaskCreateStatic>
 801534a:	4b0b      	ldr	r3, [pc, #44]	; (8015378 <xTimerCreateTimerTask+0x64>)
 801534c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 801534e:	b110      	cbz	r0, 8015356 <xTimerCreateTimerTask+0x42>
}
 8015350:	2001      	movs	r0, #1
 8015352:	b008      	add	sp, #32
 8015354:	bd10      	pop	{r4, pc}
 8015356:	f04f 0330 	mov.w	r3, #48	; 0x30
 801535a:	b672      	cpsid	i
 801535c:	f383 8811 	msr	BASEPRI, r3
 8015360:	f3bf 8f6f 	isb	sy
 8015364:	f3bf 8f4f 	dsb	sy
 8015368:	b662      	cpsie	i
	configASSERT( xReturn );
 801536a:	e7fe      	b.n	801536a <xTimerCreateTimerTask+0x56>
 801536c:	20001f84 	.word	0x20001f84
 8015370:	08029bd8 	.word	0x08029bd8
 8015374:	08015505 	.word	0x08015505
 8015378:	20001f88 	.word	0x20001f88

0801537c <xTimerCreate>:
	{
 801537c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015380:	4605      	mov	r5, r0
 8015382:	b082      	sub	sp, #8
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015384:	2028      	movs	r0, #40	; 0x28
	{
 8015386:	460e      	mov	r6, r1
 8015388:	4617      	mov	r7, r2
 801538a:	4698      	mov	r8, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801538c:	f000 fba8 	bl	8015ae0 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8015390:	4604      	mov	r4, r0
 8015392:	b160      	cbz	r0, 80153ae <xTimerCreate+0x32>
			pxNewTimer->ucStatus = 0x00;
 8015394:	f04f 0c00 	mov.w	ip, #0
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015398:	4628      	mov	r0, r5
 801539a:	9d08      	ldr	r5, [sp, #32]
 801539c:	4643      	mov	r3, r8
			pxNewTimer->ucStatus = 0x00;
 801539e:	f884 c024 	strb.w	ip, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80153a2:	463a      	mov	r2, r7
 80153a4:	4631      	mov	r1, r6
 80153a6:	9401      	str	r4, [sp, #4]
 80153a8:	9500      	str	r5, [sp, #0]
 80153aa:	f7ff ff8b 	bl	80152c4 <prvInitialiseNewTimer>
	}
 80153ae:	4620      	mov	r0, r4
 80153b0:	b002      	add	sp, #8
 80153b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153b6:	bf00      	nop

080153b8 <xTimerCreateStatic>:
	{
 80153b8:	b570      	push	{r4, r5, r6, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 80153ba:	2528      	movs	r5, #40	; 0x28
	{
 80153bc:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticTimer_t );
 80153be:	9503      	str	r5, [sp, #12]
			configASSERT( xSize == sizeof( Timer_t ) );
 80153c0:	9d03      	ldr	r5, [sp, #12]
 80153c2:	2d28      	cmp	r5, #40	; 0x28
	{
 80153c4:	e9dd 6408 	ldrd	r6, r4, [sp, #32]
			configASSERT( xSize == sizeof( Timer_t ) );
 80153c8:	d00a      	beq.n	80153e0 <xTimerCreateStatic+0x28>
 80153ca:	f04f 0330 	mov.w	r3, #48	; 0x30
 80153ce:	b672      	cpsid	i
 80153d0:	f383 8811 	msr	BASEPRI, r3
 80153d4:	f3bf 8f6f 	isb	sy
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	b662      	cpsie	i
 80153de:	e7fe      	b.n	80153de <xTimerCreateStatic+0x26>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80153e0:	9d03      	ldr	r5, [sp, #12]
		configASSERT( pxTimerBuffer );
 80153e2:	b14c      	cbz	r4, 80153f8 <xTimerCreateStatic+0x40>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80153e4:	2502      	movs	r5, #2
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80153e6:	e9cd 6400 	strd	r6, r4, [sp]
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80153ea:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80153ee:	f7ff ff69 	bl	80152c4 <prvInitialiseNewTimer>
	}
 80153f2:	4620      	mov	r0, r4
 80153f4:	b004      	add	sp, #16
 80153f6:	bd70      	pop	{r4, r5, r6, pc}
 80153f8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80153fc:	b672      	cpsid	i
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 801540c:	e7fe      	b.n	801540c <xTimerCreateStatic+0x54>
 801540e:	bf00      	nop

08015410 <xTimerGenericCommand>:
	configASSERT( xTimer );
 8015410:	b1b0      	cbz	r0, 8015440 <xTimerGenericCommand+0x30>
{
 8015412:	b570      	push	{r4, r5, r6, lr}
	if( xTimerQueue != NULL )
 8015414:	4d17      	ldr	r5, [pc, #92]	; (8015474 <xTimerGenericCommand+0x64>)
 8015416:	4604      	mov	r4, r0
{
 8015418:	b084      	sub	sp, #16
	if( xTimerQueue != NULL )
 801541a:	6828      	ldr	r0, [r5, #0]
 801541c:	b170      	cbz	r0, 801543c <xTimerGenericCommand+0x2c>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801541e:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015420:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015422:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015426:	dc16      	bgt.n	8015456 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015428:	f7ff fd0c 	bl	8014e44 <xTaskGetSchedulerState>
 801542c:	2802      	cmp	r0, #2
 801542e:	d019      	beq.n	8015464 <xTimerGenericCommand+0x54>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015430:	2300      	movs	r3, #0
 8015432:	6828      	ldr	r0, [r5, #0]
 8015434:	4669      	mov	r1, sp
 8015436:	461a      	mov	r2, r3
 8015438:	f7fe fc0e 	bl	8013c58 <xQueueGenericSend>
}
 801543c:	b004      	add	sp, #16
 801543e:	bd70      	pop	{r4, r5, r6, pc}
 8015440:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015444:	b672      	cpsid	i
 8015446:	f383 8811 	msr	BASEPRI, r3
 801544a:	f3bf 8f6f 	isb	sy
 801544e:	f3bf 8f4f 	dsb	sy
 8015452:	b662      	cpsie	i
	configASSERT( xTimer );
 8015454:	e7fe      	b.n	8015454 <xTimerGenericCommand+0x44>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015456:	461a      	mov	r2, r3
 8015458:	4669      	mov	r1, sp
 801545a:	2300      	movs	r3, #0
 801545c:	f7fe fcf6 	bl	8013e4c <xQueueGenericSendFromISR>
}
 8015460:	b004      	add	sp, #16
 8015462:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015464:	6828      	ldr	r0, [r5, #0]
 8015466:	2300      	movs	r3, #0
 8015468:	9a08      	ldr	r2, [sp, #32]
 801546a:	4669      	mov	r1, sp
 801546c:	f7fe fbf4 	bl	8013c58 <xQueueGenericSend>
 8015470:	e7e4      	b.n	801543c <xTimerGenericCommand+0x2c>
 8015472:	bf00      	nop
 8015474:	20001f84 	.word	0x20001f84

08015478 <prvSwitchTimerLists>:
{
 8015478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801547c:	4e1f      	ldr	r6, [pc, #124]	; (80154fc <prvSwitchTimerLists+0x84>)
 801547e:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015480:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015484:	e00d      	b.n	80154a2 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015486:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015488:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801548a:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801548c:	1d25      	adds	r5, r4, #4
 801548e:	4628      	mov	r0, r5
 8015490:	f7fe fa60 	bl	8013954 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015494:	6a23      	ldr	r3, [r4, #32]
 8015496:	4620      	mov	r0, r4
 8015498:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801549a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801549e:	075b      	lsls	r3, r3, #29
 80154a0:	d40a      	bmi.n	80154b8 <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80154a2:	6833      	ldr	r3, [r6, #0]
 80154a4:	681a      	ldr	r2, [r3, #0]
 80154a6:	2a00      	cmp	r2, #0
 80154a8:	d1ed      	bne.n	8015486 <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 80154aa:	4a15      	ldr	r2, [pc, #84]	; (8015500 <prvSwitchTimerLists+0x88>)
 80154ac:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80154ae:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80154b0:	6031      	str	r1, [r6, #0]
}
 80154b2:	b002      	add	sp, #8
 80154b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80154b8:	69a1      	ldr	r1, [r4, #24]
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154ba:	2300      	movs	r3, #0
 80154bc:	463a      	mov	r2, r7
 80154be:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80154c0:	eb07 0c01 	add.w	ip, r7, r1
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154c4:	4619      	mov	r1, r3
			if( xReloadTime > xNextExpireTime )
 80154c6:	4567      	cmp	r7, ip
 80154c8:	d207      	bcs.n	80154da <prvSwitchTimerLists+0x62>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80154ca:	6830      	ldr	r0, [r6, #0]
 80154cc:	4629      	mov	r1, r5
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80154ce:	f8c4 c004 	str.w	ip, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80154d2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80154d4:	f7fe fa26 	bl	8013924 <vListInsert>
 80154d8:	e7e3      	b.n	80154a2 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80154da:	f8cd 8000 	str.w	r8, [sp]
 80154de:	f7ff ff97 	bl	8015410 <xTimerGenericCommand>
				configASSERT( xResult );
 80154e2:	2800      	cmp	r0, #0
 80154e4:	d1dd      	bne.n	80154a2 <prvSwitchTimerLists+0x2a>
 80154e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154ea:	b672      	cpsid	i
 80154ec:	f383 8811 	msr	BASEPRI, r3
 80154f0:	f3bf 8f6f 	isb	sy
 80154f4:	f3bf 8f4f 	dsb	sy
 80154f8:	b662      	cpsie	i
 80154fa:	e7fe      	b.n	80154fa <prvSwitchTimerLists+0x82>
 80154fc:	20001e68 	.word	0x20001e68
 8015500:	20001e6c 	.word	0x20001e6c

08015504 <prvTimerTask>:
{
 8015504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015508:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8015724 <prvTimerTask+0x220>
 801550c:	b087      	sub	sp, #28
 801550e:	4e82      	ldr	r6, [pc, #520]	; (8015718 <prvTimerTask+0x214>)
 8015510:	f04f 0900 	mov.w	r9, #0
 8015514:	4c81      	ldr	r4, [pc, #516]	; (801571c <prvTimerTask+0x218>)
 8015516:	f8df a210 	ldr.w	sl, [pc, #528]	; 8015728 <prvTimerTask+0x224>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801551a:	f8d8 3000 	ldr.w	r3, [r8]
 801551e:	681d      	ldr	r5, [r3, #0]
 8015520:	2d00      	cmp	r5, #0
 8015522:	f000 809b 	beq.w	801565c <prvTimerTask+0x158>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015526:	68db      	ldr	r3, [r3, #12]
 8015528:	681d      	ldr	r5, [r3, #0]
	vTaskSuspendAll();
 801552a:	f7ff f9db 	bl	80148e4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801552e:	f7ff f9e1 	bl	80148f4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8015532:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8015534:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8015536:	4298      	cmp	r0, r3
 8015538:	f0c0 8098 	bcc.w	801566c <prvTimerTask+0x168>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801553c:	4285      	cmp	r5, r0
	xLastTime = xTimeNow;
 801553e:	6030      	str	r0, [r6, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015540:	f200 80b9 	bhi.w	80156b6 <prvTimerTask+0x1b2>
				( void ) xTaskResumeAll();
 8015544:	f7ff fa96 	bl	8014a74 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015548:	f8d8 3000 	ldr.w	r3, [r8]
 801554c:	68db      	ldr	r3, [r3, #12]
 801554e:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015550:	1d38      	adds	r0, r7, #4
 8015552:	f7fe f9ff 	bl	8013954 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015556:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801555a:	0758      	lsls	r0, r3, #29
 801555c:	f100 80ad 	bmi.w	80156ba <prvTimerTask+0x1b6>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015560:	f023 0301 	bic.w	r3, r3, #1
 8015564:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015568:	6a3b      	ldr	r3, [r7, #32]
 801556a:	4638      	mov	r0, r7
 801556c:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801556e:	2200      	movs	r2, #0
 8015570:	a902      	add	r1, sp, #8
 8015572:	6820      	ldr	r0, [r4, #0]
 8015574:	f7fe fd3a 	bl	8013fec <xQueueReceive>
 8015578:	2800      	cmp	r0, #0
 801557a:	d0ce      	beq.n	801551a <prvTimerTask+0x16>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801557c:	9b02      	ldr	r3, [sp, #8]
 801557e:	2b00      	cmp	r3, #0
 8015580:	db64      	blt.n	801564c <prvTimerTask+0x148>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015582:	9d04      	ldr	r5, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015584:	696b      	ldr	r3, [r5, #20]
 8015586:	b113      	cbz	r3, 801558e <prvTimerTask+0x8a>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015588:	1d28      	adds	r0, r5, #4
 801558a:	f7fe f9e3 	bl	8013954 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 801558e:	f7ff f9b1 	bl	80148f4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8015592:	6831      	ldr	r1, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8015594:	4607      	mov	r7, r0
	if( xTimeNow < xLastTime )
 8015596:	4288      	cmp	r0, r1
 8015598:	d36f      	bcc.n	801567a <prvTimerTask+0x176>
	xLastTime = xTimeNow;
 801559a:	9b02      	ldr	r3, [sp, #8]
 801559c:	6037      	str	r7, [r6, #0]
			switch( xMessage.xMessageID )
 801559e:	2b09      	cmp	r3, #9
 80155a0:	d8e5      	bhi.n	801556e <prvTimerTask+0x6a>
 80155a2:	e8df f003 	tbb	[pc, r3]
 80155a6:	0505      	.short	0x0505
 80155a8:	4a324305 	.word	0x4a324305
 80155ac:	32430505 	.word	0x32430505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155b0:	f895 1024 	ldrb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80155b4:	463a      	mov	r2, r7
 80155b6:	9b03      	ldr	r3, [sp, #12]
 80155b8:	4628      	mov	r0, r5
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155ba:	f041 0101 	orr.w	r1, r1, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80155be:	69af      	ldr	r7, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155c0:	f885 1024 	strb.w	r1, [r5, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80155c4:	19d9      	adds	r1, r3, r7
 80155c6:	f7ff fe5b 	bl	8015280 <prvInsertTimerInActiveList>
 80155ca:	2800      	cmp	r0, #0
 80155cc:	d0cf      	beq.n	801556e <prvTimerTask+0x6a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80155ce:	6a2b      	ldr	r3, [r5, #32]
 80155d0:	4628      	mov	r0, r5
 80155d2:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155d4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80155d8:	0759      	lsls	r1, r3, #29
 80155da:	d5c8      	bpl.n	801556e <prvTimerTask+0x6a>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80155dc:	69aa      	ldr	r2, [r5, #24]
 80155de:	2300      	movs	r3, #0
 80155e0:	9f03      	ldr	r7, [sp, #12]
 80155e2:	4628      	mov	r0, r5
 80155e4:	4619      	mov	r1, r3
 80155e6:	f8cd 9000 	str.w	r9, [sp]
 80155ea:	443a      	add	r2, r7
 80155ec:	f7ff ff10 	bl	8015410 <xTimerGenericCommand>
							configASSERT( xResult );
 80155f0:	2800      	cmp	r0, #0
 80155f2:	d1bc      	bne.n	801556e <prvTimerTask+0x6a>
 80155f4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80155f8:	b672      	cpsid	i
 80155fa:	f383 8811 	msr	BASEPRI, r3
 80155fe:	f3bf 8f6f 	isb	sy
 8015602:	f3bf 8f4f 	dsb	sy
 8015606:	b662      	cpsie	i
 8015608:	e7fe      	b.n	8015608 <prvTimerTask+0x104>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801560a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801560e:	9903      	ldr	r1, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015610:	f043 0301 	orr.w	r3, r3, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8015614:	61a9      	str	r1, [r5, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015616:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801561a:	2900      	cmp	r1, #0
 801561c:	d071      	beq.n	8015702 <prvTimerTask+0x1fe>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801561e:	4439      	add	r1, r7
 8015620:	4628      	mov	r0, r5
 8015622:	463b      	mov	r3, r7
 8015624:	463a      	mov	r2, r7
 8015626:	f7ff fe2b 	bl	8015280 <prvInsertTimerInActiveList>
					break;
 801562a:	e7a0      	b.n	801556e <prvTimerTask+0x6a>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801562c:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8015630:	f023 0301 	bic.w	r3, r3, #1
 8015634:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
					break;
 8015638:	e799      	b.n	801556e <prvTimerTask+0x6a>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801563a:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 801563e:	079a      	lsls	r2, r3, #30
 8015640:	d55b      	bpl.n	80156fa <prvTimerTask+0x1f6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015642:	f023 0301 	bic.w	r3, r3, #1
 8015646:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
 801564a:	e790      	b.n	801556e <prvTimerTask+0x6a>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801564c:	9b03      	ldr	r3, [sp, #12]
 801564e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8015652:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015654:	9b02      	ldr	r3, [sp, #8]
 8015656:	2b00      	cmp	r3, #0
 8015658:	db89      	blt.n	801556e <prvTimerTask+0x6a>
 801565a:	e792      	b.n	8015582 <prvTimerTask+0x7e>
	vTaskSuspendAll();
 801565c:	f7ff f942 	bl	80148e4 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8015660:	f7ff f948 	bl	80148f4 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8015664:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8015666:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8015668:	4283      	cmp	r3, r0
 801566a:	d909      	bls.n	8015680 <prvTimerTask+0x17c>
		prvSwitchTimerLists();
 801566c:	f7ff ff04 	bl	8015478 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8015670:	f8c6 b000 	str.w	fp, [r6]
			( void ) xTaskResumeAll();
 8015674:	f7ff f9fe 	bl	8014a74 <xTaskResumeAll>
 8015678:	e779      	b.n	801556e <prvTimerTask+0x6a>
		prvSwitchTimerLists();
 801567a:	f7ff fefd 	bl	8015478 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801567e:	e78c      	b.n	801559a <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015680:	f8da 3000 	ldr.w	r3, [sl]
	xLastTime = xTimeNow;
 8015684:	f8c6 b000 	str.w	fp, [r6]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015688:	681a      	ldr	r2, [r3, #0]
 801568a:	fab2 f282 	clz	r2, r2
 801568e:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015690:	eba5 010b 	sub.w	r1, r5, fp
 8015694:	6820      	ldr	r0, [r4, #0]
 8015696:	f7fe feb5 	bl	8014404 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801569a:	f7ff f9eb 	bl	8014a74 <xTaskResumeAll>
 801569e:	2800      	cmp	r0, #0
 80156a0:	f47f af65 	bne.w	801556e <prvTimerTask+0x6a>
					portYIELD_WITHIN_API();
 80156a4:	4b1e      	ldr	r3, [pc, #120]	; (8015720 <prvTimerTask+0x21c>)
 80156a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156aa:	601a      	str	r2, [r3, #0]
 80156ac:	f3bf 8f4f 	dsb	sy
 80156b0:	f3bf 8f6f 	isb	sy
 80156b4:	e75b      	b.n	801556e <prvTimerTask+0x6a>
 80156b6:	2200      	movs	r2, #0
 80156b8:	e7ea      	b.n	8015690 <prvTimerTask+0x18c>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80156ba:	69b9      	ldr	r1, [r7, #24]
 80156bc:	465a      	mov	r2, fp
 80156be:	462b      	mov	r3, r5
 80156c0:	4638      	mov	r0, r7
 80156c2:	4429      	add	r1, r5
 80156c4:	f7ff fddc 	bl	8015280 <prvInsertTimerInActiveList>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	f43f af4d 	beq.w	8015568 <prvTimerTask+0x64>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80156ce:	2300      	movs	r3, #0
 80156d0:	462a      	mov	r2, r5
 80156d2:	4638      	mov	r0, r7
 80156d4:	f8cd 9000 	str.w	r9, [sp]
 80156d8:	4619      	mov	r1, r3
 80156da:	f7ff fe99 	bl	8015410 <xTimerGenericCommand>
			configASSERT( xResult );
 80156de:	2800      	cmp	r0, #0
 80156e0:	f47f af42 	bne.w	8015568 <prvTimerTask+0x64>
 80156e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156e8:	b672      	cpsid	i
 80156ea:	f383 8811 	msr	BASEPRI, r3
 80156ee:	f3bf 8f6f 	isb	sy
 80156f2:	f3bf 8f4f 	dsb	sy
 80156f6:	b662      	cpsie	i
 80156f8:	e7fe      	b.n	80156f8 <prvTimerTask+0x1f4>
							vPortFree( pxTimer );
 80156fa:	4628      	mov	r0, r5
 80156fc:	f000 fa8e 	bl	8015c1c <vPortFree>
 8015700:	e735      	b.n	801556e <prvTimerTask+0x6a>
 8015702:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015706:	b672      	cpsid	i
 8015708:	f383 8811 	msr	BASEPRI, r3
 801570c:	f3bf 8f6f 	isb	sy
 8015710:	f3bf 8f4f 	dsb	sy
 8015714:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015716:	e7fe      	b.n	8015716 <prvTimerTask+0x212>
 8015718:	20001f38 	.word	0x20001f38
 801571c:	20001f84 	.word	0x20001f84
 8015720:	e000ed04 	.word	0xe000ed04
 8015724:	20001e68 	.word	0x20001e68
 8015728:	20001e6c 	.word	0x20001e6c

0801572c <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801572c:	4808      	ldr	r0, [pc, #32]	; (8015750 <prvPortStartFirstTask+0x24>)
 801572e:	6800      	ldr	r0, [r0, #0]
 8015730:	6800      	ldr	r0, [r0, #0]
 8015732:	f380 8808 	msr	MSP, r0
 8015736:	f04f 0000 	mov.w	r0, #0
 801573a:	f380 8814 	msr	CONTROL, r0
 801573e:	b662      	cpsie	i
 8015740:	b661      	cpsie	f
 8015742:	f3bf 8f4f 	dsb	sy
 8015746:	f3bf 8f6f 	isb	sy
 801574a:	df00      	svc	0
 801574c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801574e:	0000      	.short	0x0000
 8015750:	e000ed08 	.word	0xe000ed08

08015754 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015754:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015764 <vPortEnableVFP+0x10>
 8015758:	6801      	ldr	r1, [r0, #0]
 801575a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801575e:	6001      	str	r1, [r0, #0]
 8015760:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015762:	0000      	.short	0x0000
 8015764:	e000ed88 	.word	0xe000ed88

08015768 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8015768:	4b10      	ldr	r3, [pc, #64]	; (80157ac <prvTaskExitError+0x44>)
{
 801576a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 801576c:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 801576e:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8015770:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8015772:	3301      	adds	r3, #1
 8015774:	d00a      	beq.n	801578c <prvTaskExitError+0x24>
 8015776:	f04f 0330 	mov.w	r3, #48	; 0x30
 801577a:	b672      	cpsid	i
 801577c:	f383 8811 	msr	BASEPRI, r3
 8015780:	f3bf 8f6f 	isb	sy
 8015784:	f3bf 8f4f 	dsb	sy
 8015788:	b662      	cpsie	i
 801578a:	e7fe      	b.n	801578a <prvTaskExitError+0x22>
 801578c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015790:	b672      	cpsid	i
 8015792:	f383 8811 	msr	BASEPRI, r3
 8015796:	f3bf 8f6f 	isb	sy
 801579a:	f3bf 8f4f 	dsb	sy
 801579e:	b662      	cpsie	i
	while( ulDummy == 0 )
 80157a0:	9b01      	ldr	r3, [sp, #4]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d0fc      	beq.n	80157a0 <prvTaskExitError+0x38>
}
 80157a6:	b002      	add	sp, #8
 80157a8:	4770      	bx	lr
 80157aa:	bf00      	nop
 80157ac:	20000408 	.word	0x20000408

080157b0 <pxPortInitialiseStack>:
{
 80157b0:	b470      	push	{r4, r5, r6}
 80157b2:	4603      	mov	r3, r0
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157b4:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157b8:	4d08      	ldr	r5, [pc, #32]	; (80157dc <pxPortInitialiseStack+0x2c>)
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80157ba:	f06f 0402 	mvn.w	r4, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80157be:	f021 0101 	bic.w	r1, r1, #1
}
 80157c2:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80157c4:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157c6:	f843 6c04 	str.w	r6, [r3, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157ca:	f843 5c0c 	str.w	r5, [r3, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80157ce:	f843 4c24 	str.w	r4, [r3, #-36]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80157d2:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80157d6:	bc70      	pop	{r4, r5, r6}
 80157d8:	4770      	bx	lr
 80157da:	bf00      	nop
 80157dc:	08015769 	.word	0x08015769

080157e0 <SVC_Handler>:
	__asm volatile (
 80157e0:	4b07      	ldr	r3, [pc, #28]	; (8015800 <pxCurrentTCBConst2>)
 80157e2:	6819      	ldr	r1, [r3, #0]
 80157e4:	6808      	ldr	r0, [r1, #0]
 80157e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80157ea:	f380 8809 	msr	PSP, r0
 80157ee:	f3bf 8f6f 	isb	sy
 80157f2:	f04f 0000 	mov.w	r0, #0
 80157f6:	f380 8811 	msr	BASEPRI, r0
 80157fa:	4770      	bx	lr
 80157fc:	f3af 8000 	nop.w

08015800 <pxCurrentTCBConst2>:
 8015800:	20001d40 	.word	0x20001d40

08015804 <vPortEnterCritical>:
 8015804:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015808:	b672      	cpsid	i
 801580a:	f383 8811 	msr	BASEPRI, r3
 801580e:	f3bf 8f6f 	isb	sy
 8015812:	f3bf 8f4f 	dsb	sy
 8015816:	b662      	cpsie	i
	uxCriticalNesting++;
 8015818:	4a0b      	ldr	r2, [pc, #44]	; (8015848 <vPortEnterCritical+0x44>)
 801581a:	6813      	ldr	r3, [r2, #0]
 801581c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801581e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8015820:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8015822:	d000      	beq.n	8015826 <vPortEnterCritical+0x22>
}
 8015824:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015826:	4b09      	ldr	r3, [pc, #36]	; (801584c <vPortEnterCritical+0x48>)
 8015828:	681b      	ldr	r3, [r3, #0]
 801582a:	f013 0fff 	tst.w	r3, #255	; 0xff
 801582e:	d0f9      	beq.n	8015824 <vPortEnterCritical+0x20>
 8015830:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015834:	b672      	cpsid	i
 8015836:	f383 8811 	msr	BASEPRI, r3
 801583a:	f3bf 8f6f 	isb	sy
 801583e:	f3bf 8f4f 	dsb	sy
 8015842:	b662      	cpsie	i
 8015844:	e7fe      	b.n	8015844 <vPortEnterCritical+0x40>
 8015846:	bf00      	nop
 8015848:	20000408 	.word	0x20000408
 801584c:	e000ed04 	.word	0xe000ed04

08015850 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8015850:	4a09      	ldr	r2, [pc, #36]	; (8015878 <vPortExitCritical+0x28>)
 8015852:	6813      	ldr	r3, [r2, #0]
 8015854:	b953      	cbnz	r3, 801586c <vPortExitCritical+0x1c>
 8015856:	f04f 0330 	mov.w	r3, #48	; 0x30
 801585a:	b672      	cpsid	i
 801585c:	f383 8811 	msr	BASEPRI, r3
 8015860:	f3bf 8f6f 	isb	sy
 8015864:	f3bf 8f4f 	dsb	sy
 8015868:	b662      	cpsie	i
 801586a:	e7fe      	b.n	801586a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801586c:	3b01      	subs	r3, #1
 801586e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015870:	b90b      	cbnz	r3, 8015876 <vPortExitCritical+0x26>
	__asm volatile
 8015872:	f383 8811 	msr	BASEPRI, r3
}
 8015876:	4770      	bx	lr
 8015878:	20000408 	.word	0x20000408
 801587c:	00000000 	.word	0x00000000

08015880 <PendSV_Handler>:
	__asm volatile
 8015880:	f3ef 8009 	mrs	r0, PSP
 8015884:	f3bf 8f6f 	isb	sy
 8015888:	4b15      	ldr	r3, [pc, #84]	; (80158e0 <pxCurrentTCBConst>)
 801588a:	681a      	ldr	r2, [r3, #0]
 801588c:	f01e 0f10 	tst.w	lr, #16
 8015890:	bf08      	it	eq
 8015892:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015896:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589a:	6010      	str	r0, [r2, #0]
 801589c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80158a0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80158a4:	b672      	cpsid	i
 80158a6:	f380 8811 	msr	BASEPRI, r0
 80158aa:	f3bf 8f4f 	dsb	sy
 80158ae:	f3bf 8f6f 	isb	sy
 80158b2:	b662      	cpsie	i
 80158b4:	f7ff f992 	bl	8014bdc <vTaskSwitchContext>
 80158b8:	f04f 0000 	mov.w	r0, #0
 80158bc:	f380 8811 	msr	BASEPRI, r0
 80158c0:	bc09      	pop	{r0, r3}
 80158c2:	6819      	ldr	r1, [r3, #0]
 80158c4:	6808      	ldr	r0, [r1, #0]
 80158c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ca:	f01e 0f10 	tst.w	lr, #16
 80158ce:	bf08      	it	eq
 80158d0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80158d4:	f380 8809 	msr	PSP, r0
 80158d8:	f3bf 8f6f 	isb	sy
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop

080158e0 <pxCurrentTCBConst>:
 80158e0:	20001d40 	.word	0x20001d40

080158e4 <SysTick_Handler>:
{
 80158e4:	b508      	push	{r3, lr}
	__asm volatile
 80158e6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80158ea:	b672      	cpsid	i
 80158ec:	f383 8811 	msr	BASEPRI, r3
 80158f0:	f3bf 8f6f 	isb	sy
 80158f4:	f3bf 8f4f 	dsb	sy
 80158f8:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 80158fa:	f7ff f809 	bl	8014910 <xTaskIncrementTick>
 80158fe:	b118      	cbz	r0, 8015908 <SysTick_Handler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015900:	4b03      	ldr	r3, [pc, #12]	; (8015910 <SysTick_Handler+0x2c>)
 8015902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015906:	601a      	str	r2, [r3, #0]
	__asm volatile
 8015908:	2300      	movs	r3, #0
 801590a:	f383 8811 	msr	BASEPRI, r3
}
 801590e:	bd08      	pop	{r3, pc}
 8015910:	e000ed04 	.word	0xe000ed04

08015914 <vPortSetupTimerInterrupt>:
{
 8015914:	b410      	push	{r4}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015916:	2300      	movs	r3, #0
 8015918:	4a08      	ldr	r2, [pc, #32]	; (801593c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801591a:	4c09      	ldr	r4, [pc, #36]	; (8015940 <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801591c:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801591e:	4809      	ldr	r0, [pc, #36]	; (8015944 <vPortSetupTimerInterrupt+0x30>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015922:	6023      	str	r3, [r4, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015924:	4c08      	ldr	r4, [pc, #32]	; (8015948 <vPortSetupTimerInterrupt+0x34>)
 8015926:	6803      	ldr	r3, [r0, #0]
 8015928:	4808      	ldr	r0, [pc, #32]	; (801594c <vPortSetupTimerInterrupt+0x38>)
 801592a:	fba4 4303 	umull	r4, r3, r4, r3
}
 801592e:	f85d 4b04 	ldr.w	r4, [sp], #4
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015932:	099b      	lsrs	r3, r3, #6
 8015934:	3b01      	subs	r3, #1
 8015936:	6003      	str	r3, [r0, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015938:	6011      	str	r1, [r2, #0]
}
 801593a:	4770      	bx	lr
 801593c:	e000e010 	.word	0xe000e010
 8015940:	e000e018 	.word	0xe000e018
 8015944:	2000027c 	.word	0x2000027c
 8015948:	10624dd3 	.word	0x10624dd3
 801594c:	e000e014 	.word	0xe000e014

08015950 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015950:	4b2c      	ldr	r3, [pc, #176]	; (8015a04 <xPortStartScheduler+0xb4>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015952:	482d      	ldr	r0, [pc, #180]	; (8015a08 <xPortStartScheduler+0xb8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015954:	492d      	ldr	r1, [pc, #180]	; (8015a0c <xPortStartScheduler+0xbc>)
{
 8015956:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015958:	781a      	ldrb	r2, [r3, #0]
{
 801595a:	b083      	sub	sp, #12
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801595c:	25ff      	movs	r5, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801595e:	2407      	movs	r4, #7
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015960:	b2d2      	uxtb	r2, r2
 8015962:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015964:	701d      	strb	r5, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015966:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015968:	600c      	str	r4, [r1, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801596a:	b2db      	uxtb	r3, r3
 801596c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015970:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015974:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015978:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801597c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801597e:	7003      	strb	r3, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015980:	d50f      	bpl.n	80159a2 <xPortStartScheduler+0x52>
 8015982:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015984:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015988:	4610      	mov	r0, r2
 801598a:	3a01      	subs	r2, #1
 801598c:	005b      	lsls	r3, r3, #1
 801598e:	b2db      	uxtb	r3, r3
 8015990:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015994:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8015998:	061b      	lsls	r3, r3, #24
 801599a:	d4f3      	bmi.n	8015984 <xPortStartScheduler+0x34>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801599c:	2803      	cmp	r0, #3
 801599e:	d00b      	beq.n	80159b8 <xPortStartScheduler+0x68>
 80159a0:	6008      	str	r0, [r1, #0]
	__asm volatile
 80159a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159a6:	b672      	cpsid	i
 80159a8:	f383 8811 	msr	BASEPRI, r3
 80159ac:	f3bf 8f6f 	isb	sy
 80159b0:	f3bf 8f4f 	dsb	sy
 80159b4:	b662      	cpsie	i
 80159b6:	e7fe      	b.n	80159b6 <xPortStartScheduler+0x66>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159b8:	9a01      	ldr	r2, [sp, #4]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80159ba:	f44f 7540 	mov.w	r5, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159be:	4811      	ldr	r0, [pc, #68]	; (8015a04 <xPortStartScheduler+0xb4>)
	uxCriticalNesting = 0;
 80159c0:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80159c2:	4b13      	ldr	r3, [pc, #76]	; (8015a10 <xPortStartScheduler+0xc0>)
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159c4:	b2d2      	uxtb	r2, r2
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80159c6:	600d      	str	r5, [r1, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159c8:	7002      	strb	r2, [r0, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80159d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80159d2:	681a      	ldr	r2, [r3, #0]
 80159d4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 80159d8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 80159da:	f7ff ff9b 	bl	8015914 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80159de:	4b0d      	ldr	r3, [pc, #52]	; (8015a14 <xPortStartScheduler+0xc4>)
 80159e0:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 80159e2:	f7ff feb7 	bl	8015754 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80159e6:	4a0c      	ldr	r2, [pc, #48]	; (8015a18 <xPortStartScheduler+0xc8>)
 80159e8:	6813      	ldr	r3, [r2, #0]
 80159ea:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80159ee:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80159f0:	f7ff fe9c 	bl	801572c <prvPortStartFirstTask>
	vTaskSwitchContext();
 80159f4:	f7ff f8f2 	bl	8014bdc <vTaskSwitchContext>
	prvTaskExitError();
 80159f8:	f7ff feb6 	bl	8015768 <prvTaskExitError>
}
 80159fc:	4620      	mov	r0, r4
 80159fe:	b003      	add	sp, #12
 8015a00:	bd30      	pop	{r4, r5, pc}
 8015a02:	bf00      	nop
 8015a04:	e000e400 	.word	0xe000e400
 8015a08:	20001f8c 	.word	0x20001f8c
 8015a0c:	20001f90 	.word	0x20001f90
 8015a10:	e000ed20 	.word	0xe000ed20
 8015a14:	20000408 	.word	0x20000408
 8015a18:	e000ef34 	.word	0xe000ef34

08015a1c <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015a1c:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015a20:	2b0f      	cmp	r3, #15
 8015a22:	d910      	bls.n	8015a46 <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015a24:	4912      	ldr	r1, [pc, #72]	; (8015a70 <vPortValidateInterruptPriority+0x54>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015a26:	4a13      	ldr	r2, [pc, #76]	; (8015a74 <vPortValidateInterruptPriority+0x58>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015a28:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015a2a:	7812      	ldrb	r2, [r2, #0]
 8015a2c:	429a      	cmp	r2, r3
 8015a2e:	d90a      	bls.n	8015a46 <vPortValidateInterruptPriority+0x2a>
 8015a30:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a34:	b672      	cpsid	i
 8015a36:	f383 8811 	msr	BASEPRI, r3
 8015a3a:	f3bf 8f6f 	isb	sy
 8015a3e:	f3bf 8f4f 	dsb	sy
 8015a42:	b662      	cpsie	i
 8015a44:	e7fe      	b.n	8015a44 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015a46:	4b0c      	ldr	r3, [pc, #48]	; (8015a78 <vPortValidateInterruptPriority+0x5c>)
 8015a48:	4a0c      	ldr	r2, [pc, #48]	; (8015a7c <vPortValidateInterruptPriority+0x60>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	6812      	ldr	r2, [r2, #0]
 8015a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015a52:	4293      	cmp	r3, r2
 8015a54:	d90a      	bls.n	8015a6c <vPortValidateInterruptPriority+0x50>
 8015a56:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a5a:	b672      	cpsid	i
 8015a5c:	f383 8811 	msr	BASEPRI, r3
 8015a60:	f3bf 8f6f 	isb	sy
 8015a64:	f3bf 8f4f 	dsb	sy
 8015a68:	b662      	cpsie	i
 8015a6a:	e7fe      	b.n	8015a6a <vPortValidateInterruptPriority+0x4e>
	}
 8015a6c:	4770      	bx	lr
 8015a6e:	bf00      	nop
 8015a70:	e000e3f0 	.word	0xe000e3f0
 8015a74:	20001f8c 	.word	0x20001f8c
 8015a78:	e000ed0c 	.word	0xe000ed0c
 8015a7c:	20001f90 	.word	0x20001f90

08015a80 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015a80:	4b15      	ldr	r3, [pc, #84]	; (8015ad8 <prvInsertBlockIntoFreeList+0x58>)
{
 8015a82:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015a84:	461a      	mov	r2, r3
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	4283      	cmp	r3, r0
 8015a8a:	d3fb      	bcc.n	8015a84 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015a8c:	6851      	ldr	r1, [r2, #4]
 8015a8e:	1854      	adds	r4, r2, r1
 8015a90:	42a0      	cmp	r0, r4
 8015a92:	d00a      	beq.n	8015aaa <prvInsertBlockIntoFreeList+0x2a>
 8015a94:	6841      	ldr	r1, [r0, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015a96:	1844      	adds	r4, r0, r1
 8015a98:	42a3      	cmp	r3, r4
 8015a9a:	d00d      	beq.n	8015ab8 <prvInsertBlockIntoFreeList+0x38>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8015a9c:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8015a9e:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015aa4:	bf18      	it	ne
 8015aa6:	6010      	strne	r0, [r2, #0]
}
 8015aa8:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015aaa:	6844      	ldr	r4, [r0, #4]
 8015aac:	4610      	mov	r0, r2
 8015aae:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ab0:	1844      	adds	r4, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015ab2:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015ab4:	42a3      	cmp	r3, r4
 8015ab6:	d1f1      	bne.n	8015a9c <prvInsertBlockIntoFreeList+0x1c>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015ab8:	4c08      	ldr	r4, [pc, #32]	; (8015adc <prvInsertBlockIntoFreeList+0x5c>)
 8015aba:	6824      	ldr	r4, [r4, #0]
 8015abc:	42a3      	cmp	r3, r4
 8015abe:	d0ed      	beq.n	8015a9c <prvInsertBlockIntoFreeList+0x1c>
	if( pxIterator != pxBlockToInsert )
 8015ac0:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015ac2:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015ac6:	4421      	add	r1, r4
}
 8015ac8:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015acc:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8015ad0:	bf18      	it	ne
 8015ad2:	6010      	strne	r0, [r2, #0]
}
 8015ad4:	4770      	bx	lr
 8015ad6:	bf00      	nop
 8015ad8:	20019fa4 	.word	0x20019fa4
 8015adc:	20001f94 	.word	0x20001f94

08015ae0 <pvPortMalloc>:
{
 8015ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ae4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8015ae6:	f7fe fefd 	bl	80148e4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8015aea:	4946      	ldr	r1, [pc, #280]	; (8015c04 <pvPortMalloc+0x124>)
 8015aec:	680b      	ldr	r3, [r1, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d040      	beq.n	8015b74 <pvPortMalloc+0x94>
 8015af2:	4b45      	ldr	r3, [pc, #276]	; (8015c08 <pvPortMalloc+0x128>)
 8015af4:	681f      	ldr	r7, [r3, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015af6:	423c      	tst	r4, r7
 8015af8:	d134      	bne.n	8015b64 <pvPortMalloc+0x84>
			if( xWantedSize > 0 )
 8015afa:	2c00      	cmp	r4, #0
 8015afc:	d032      	beq.n	8015b64 <pvPortMalloc+0x84>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015afe:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 8015b00:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015b04:	d002      	beq.n	8015b0c <pvPortMalloc+0x2c>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015b06:	f023 0307 	bic.w	r3, r3, #7
 8015b0a:	3308      	adds	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015b0c:	b353      	cbz	r3, 8015b64 <pvPortMalloc+0x84>
 8015b0e:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8015c18 <pvPortMalloc+0x138>
 8015b12:	f8d8 5000 	ldr.w	r5, [r8]
 8015b16:	429d      	cmp	r5, r3
 8015b18:	d324      	bcc.n	8015b64 <pvPortMalloc+0x84>
				pxBlock = xStart.pxNextFreeBlock;
 8015b1a:	483c      	ldr	r0, [pc, #240]	; (8015c0c <pvPortMalloc+0x12c>)
 8015b1c:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015b1e:	e003      	b.n	8015b28 <pvPortMalloc+0x48>
 8015b20:	6826      	ldr	r6, [r4, #0]
 8015b22:	b126      	cbz	r6, 8015b2e <pvPortMalloc+0x4e>
 8015b24:	4620      	mov	r0, r4
 8015b26:	4634      	mov	r4, r6
 8015b28:	6862      	ldr	r2, [r4, #4]
 8015b2a:	429a      	cmp	r2, r3
 8015b2c:	d3f8      	bcc.n	8015b20 <pvPortMalloc+0x40>
				if( pxBlock != pxEnd )
 8015b2e:	6809      	ldr	r1, [r1, #0]
 8015b30:	42a1      	cmp	r1, r4
 8015b32:	d017      	beq.n	8015b64 <pvPortMalloc+0x84>
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015b34:	eba2 0c03 	sub.w	ip, r2, r3
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015b38:	6806      	ldr	r6, [r0, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015b3a:	6821      	ldr	r1, [r4, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015b3c:	f1bc 0f10 	cmp.w	ip, #16
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015b40:	f106 0608 	add.w	r6, r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015b44:	6001      	str	r1, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015b46:	d93b      	bls.n	8015bc0 <pvPortMalloc+0xe0>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015b48:	18e0      	adds	r0, r4, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015b4a:	0742      	lsls	r2, r0, #29
 8015b4c:	d032      	beq.n	8015bb4 <pvPortMalloc+0xd4>
 8015b4e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b52:	b672      	cpsid	i
 8015b54:	f383 8811 	msr	BASEPRI, r3
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	f3bf 8f4f 	dsb	sy
 8015b60:	b662      	cpsie	i
 8015b62:	e7fe      	b.n	8015b62 <pvPortMalloc+0x82>
			vApplicationMallocFailedHook();
 8015b64:	2600      	movs	r6, #0
	( void ) xTaskResumeAll();
 8015b66:	f7fe ff85 	bl	8014a74 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8015b6a:	f7eb f829 	bl	8000bc0 <vApplicationMallocFailedHook>
}
 8015b6e:	4630      	mov	r0, r6
 8015b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uxAddress = ( size_t ) ucHeap;
 8015b74:	4b26      	ldr	r3, [pc, #152]	; (8015c10 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015b76:	075d      	lsls	r5, r3, #29
 8015b78:	d13d      	bne.n	8015bf6 <pvPortMalloc+0x116>
 8015b7a:	461a      	mov	r2, r3
 8015b7c:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8015b80:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 8015b82:	3b08      	subs	r3, #8
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b84:	4f23      	ldr	r7, [pc, #140]	; (8015c14 <pvPortMalloc+0x134>)
	xStart.xBlockSize = ( size_t ) 0;
 8015b86:	2500      	movs	r5, #0
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b88:	f8df c08c 	ldr.w	ip, [pc, #140]	; 8015c18 <pvPortMalloc+0x138>
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015b8c:	f023 0307 	bic.w	r3, r3, #7
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015b90:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015b94:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 8015b96:	600b      	str	r3, [r1, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8015b98:	e9c3 5500 	strd	r5, r5, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015b9c:	603a      	str	r2, [r7, #0]
}
 8015b9e:	4637      	mov	r7, r6
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015ba0:	f8cc 2000 	str.w	r2, [ip]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015ba4:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015ba8:	4b18      	ldr	r3, [pc, #96]	; (8015c0c <pvPortMalloc+0x12c>)
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015baa:	4a17      	ldr	r2, [pc, #92]	; (8015c08 <pvPortMalloc+0x128>)
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015bac:	e9c3 0500 	strd	r0, r5, [r3]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015bb0:	6016      	str	r6, [r2, #0]
}
 8015bb2:	e7a0      	b.n	8015af6 <pvPortMalloc+0x16>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015bb4:	f8c0 c004 	str.w	ip, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015bb8:	6063      	str	r3, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015bba:	f7ff ff61 	bl	8015a80 <prvInsertBlockIntoFreeList>
 8015bbe:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015bc0:	4914      	ldr	r1, [pc, #80]	; (8015c14 <pvPortMalloc+0x134>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015bc2:	1aad      	subs	r5, r5, r2
					pxBlock->pxNextFreeBlock = NULL;
 8015bc4:	2300      	movs	r3, #0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015bc6:	433a      	orrs	r2, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015bc8:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015bca:	f8c8 5000 	str.w	r5, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015bce:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
 8015bd0:	e9c4 3200 	strd	r3, r2, [r4]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015bd4:	bf38      	it	cc
 8015bd6:	600d      	strcc	r5, [r1, #0]
	( void ) xTaskResumeAll();
 8015bd8:	f7fe ff4c 	bl	8014a74 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015bdc:	0773      	lsls	r3, r6, #29
 8015bde:	d0c6      	beq.n	8015b6e <pvPortMalloc+0x8e>
 8015be0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015be4:	b672      	cpsid	i
 8015be6:	f383 8811 	msr	BASEPRI, r3
 8015bea:	f3bf 8f6f 	isb	sy
 8015bee:	f3bf 8f4f 	dsb	sy
 8015bf2:	b662      	cpsie	i
 8015bf4:	e7fe      	b.n	8015bf4 <pvPortMalloc+0x114>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015bf6:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015bf8:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 8015bfc:	f022 0207 	bic.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015c00:	4610      	mov	r0, r2
 8015c02:	e7be      	b.n	8015b82 <pvPortMalloc+0xa2>
 8015c04:	20001f94 	.word	0x20001f94
 8015c08:	20019f98 	.word	0x20019f98
 8015c0c:	20019fa4 	.word	0x20019fa4
 8015c10:	20001f98 	.word	0x20001f98
 8015c14:	20019fa0 	.word	0x20019fa0
 8015c18:	20019f9c 	.word	0x20019f9c

08015c1c <vPortFree>:
	if( pv != NULL )
 8015c1c:	b300      	cbz	r0, 8015c60 <vPortFree+0x44>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015c1e:	4a1b      	ldr	r2, [pc, #108]	; (8015c8c <vPortFree+0x70>)
 8015c20:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8015c24:	6812      	ldr	r2, [r2, #0]
 8015c26:	4213      	tst	r3, r2
{
 8015c28:	b510      	push	{r4, lr}
 8015c2a:	4604      	mov	r4, r0
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015c2c:	d00d      	beq.n	8015c4a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015c2e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8015c32:	b1b1      	cbz	r1, 8015c62 <vPortFree+0x46>
 8015c34:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c38:	b672      	cpsid	i
 8015c3a:	f383 8811 	msr	BASEPRI, r3
 8015c3e:	f3bf 8f6f 	isb	sy
 8015c42:	f3bf 8f4f 	dsb	sy
 8015c46:	b662      	cpsie	i
 8015c48:	e7fe      	b.n	8015c48 <vPortFree+0x2c>
 8015c4a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c4e:	b672      	cpsid	i
 8015c50:	f383 8811 	msr	BASEPRI, r3
 8015c54:	f3bf 8f6f 	isb	sy
 8015c58:	f3bf 8f4f 	dsb	sy
 8015c5c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015c5e:	e7fe      	b.n	8015c5e <vPortFree+0x42>
 8015c60:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015c62:	ea23 0302 	bic.w	r3, r3, r2
 8015c66:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8015c6a:	f7fe fe3b 	bl	80148e4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015c6e:	4a08      	ldr	r2, [pc, #32]	; (8015c90 <vPortFree+0x74>)
 8015c70:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015c74:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015c78:	6811      	ldr	r1, [r2, #0]
 8015c7a:	440b      	add	r3, r1
 8015c7c:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015c7e:	f7ff feff 	bl	8015a80 <prvInsertBlockIntoFreeList>
}
 8015c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8015c86:	f7fe bef5 	b.w	8014a74 <xTaskResumeAll>
 8015c8a:	bf00      	nop
 8015c8c:	20019f98 	.word	0x20019f98
 8015c90:	20019f9c 	.word	0x20019f9c

08015c94 <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 8015c94:	f003 b90e 	b.w	8018eb4 <pbuf_free>

08015c98 <tcpip_thread>:
{
 8015c98:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 8015c9a:	483a      	ldr	r0, [pc, #232]	; (8015d84 <tcpip_thread+0xec>)
{
 8015c9c:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 8015c9e:	f00b fe7f 	bl	80219a0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8015ca2:	4b39      	ldr	r3, [pc, #228]	; (8015d88 <tcpip_thread+0xf0>)
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	b113      	cbz	r3, 8015cae <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 8015ca8:	4a38      	ldr	r2, [pc, #224]	; (8015d8c <tcpip_thread+0xf4>)
 8015caa:	6810      	ldr	r0, [r2, #0]
 8015cac:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8015cae:	4d35      	ldr	r5, [pc, #212]	; (8015d84 <tcpip_thread+0xec>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015cb0:	4e37      	ldr	r6, [pc, #220]	; (8015d90 <tcpip_thread+0xf8>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015cb2:	4f38      	ldr	r7, [pc, #224]	; (8015d94 <tcpip_thread+0xfc>)
 8015cb4:	e010      	b.n	8015cd8 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 8015cb6:	b168      	cbz	r0, 8015cd4 <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 8015cb8:	4628      	mov	r0, r5
 8015cba:	f00b fe77 	bl	80219ac <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8015cbe:	4622      	mov	r2, r4
 8015cc0:	a901      	add	r1, sp, #4
 8015cc2:	4630      	mov	r0, r6
 8015cc4:	f00b fe12 	bl	80218ec <sys_arch_mbox_fetch>
 8015cc8:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f00b fe68 	bl	80219a0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8015cd0:	3401      	adds	r4, #1
 8015cd2:	d111      	bne.n	8015cf8 <tcpip_thread+0x60>
    sys_check_timeouts();
 8015cd4:	f008 f820 	bl	801dd18 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 8015cd8:	f008 f842 	bl	801dd60 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015cdc:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 8015cde:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8015ce0:	d1e9      	bne.n	8015cb6 <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 8015ce2:	4628      	mov	r0, r5
 8015ce4:	f00b fe62 	bl	80219ac <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8015ce8:	2200      	movs	r2, #0
 8015cea:	a901      	add	r1, sp, #4
 8015cec:	4630      	mov	r0, r6
 8015cee:	f00b fdfd 	bl	80218ec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8015cf2:	4628      	mov	r0, r5
 8015cf4:	f00b fe54 	bl	80219a0 <sys_mutex_lock>
    if (msg == NULL) {
 8015cf8:	9c01      	ldr	r4, [sp, #4]
 8015cfa:	b384      	cbz	r4, 8015d5e <tcpip_thread+0xc6>
  switch (msg->type) {
 8015cfc:	7823      	ldrb	r3, [r4, #0]
 8015cfe:	2b04      	cmp	r3, #4
 8015d00:	d838      	bhi.n	8015d74 <tcpip_thread+0xdc>
 8015d02:	e8df f003 	tbb	[pc, r3]
 8015d06:	1822      	.short	0x1822
 8015d08:	070f      	.short	0x070f
 8015d0a:	03          	.byte	0x03
 8015d0b:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015d0c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8015d10:	4798      	blx	r3
      break;
 8015d12:	e7e1      	b.n	8015cd8 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 8015d14:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8015d18:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015d1a:	4621      	mov	r1, r4
 8015d1c:	2009      	movs	r0, #9
 8015d1e:	f002 fdf9 	bl	8018914 <memp_free>
      break;
 8015d22:	e7d9      	b.n	8015cd8 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8015d24:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8015d28:	f007 ffd8 	bl	801dcdc <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015d2c:	4621      	mov	r1, r4
 8015d2e:	2009      	movs	r0, #9
 8015d30:	f002 fdf0 	bl	8018914 <memp_free>
      break;
 8015d34:	e7d0      	b.n	8015cd8 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8015d36:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8015d3a:	6860      	ldr	r0, [r4, #4]
 8015d3c:	f007 ff96 	bl	801dc6c <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8015d40:	4621      	mov	r1, r4
 8015d42:	2009      	movs	r0, #9
 8015d44:	f002 fde6 	bl	8018914 <memp_free>
      break;
 8015d48:	e7c6      	b.n	8015cd8 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8015d4a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8015d4e:	6860      	ldr	r0, [r4, #4]
 8015d50:	4798      	blx	r3
 8015d52:	b958      	cbnz	r0, 8015d6c <tcpip_thread+0xd4>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015d54:	4621      	mov	r1, r4
 8015d56:	200a      	movs	r0, #10
 8015d58:	f002 fddc 	bl	8018914 <memp_free>
      break;
 8015d5c:	e7bc      	b.n	8015cd8 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015d5e:	463b      	mov	r3, r7
 8015d60:	2291      	movs	r2, #145	; 0x91
 8015d62:	490d      	ldr	r1, [pc, #52]	; (8015d98 <tcpip_thread+0x100>)
 8015d64:	480d      	ldr	r0, [pc, #52]	; (8015d9c <tcpip_thread+0x104>)
 8015d66:	f00d f9bd 	bl	80230e4 <iprintf>
      continue;
 8015d6a:	e7b5      	b.n	8015cd8 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8015d6c:	6860      	ldr	r0, [r4, #4]
 8015d6e:	f003 f8a1 	bl	8018eb4 <pbuf_free>
 8015d72:	e7ef      	b.n	8015d54 <tcpip_thread+0xbc>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8015d74:	463b      	mov	r3, r7
 8015d76:	22cf      	movs	r2, #207	; 0xcf
 8015d78:	4907      	ldr	r1, [pc, #28]	; (8015d98 <tcpip_thread+0x100>)
 8015d7a:	4808      	ldr	r0, [pc, #32]	; (8015d9c <tcpip_thread+0x104>)
 8015d7c:	f00d f9b2 	bl	80230e4 <iprintf>
      break;
 8015d80:	e7aa      	b.n	8015cd8 <tcpip_thread+0x40>
 8015d82:	bf00      	nop
 8015d84:	2001f460 	.word	0x2001f460
 8015d88:	20019fac 	.word	0x20019fac
 8015d8c:	20019fb0 	.word	0x20019fb0
 8015d90:	20019fb4 	.word	0x20019fb4
 8015d94:	08029be0 	.word	0x08029be0
 8015d98:	08029c10 	.word	0x08029c10
 8015d9c:	08029ba0 	.word	0x08029ba0

08015da0 <tcpip_inpkt>:
{
 8015da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015da2:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015da4:	4814      	ldr	r0, [pc, #80]	; (8015df8 <tcpip_inpkt+0x58>)
{
 8015da6:	460e      	mov	r6, r1
 8015da8:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015daa:	f00b fdc1 	bl	8021930 <sys_mbox_valid>
 8015dae:	b188      	cbz	r0, 8015dd4 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8015db0:	22fe      	movs	r2, #254	; 0xfe
 8015db2:	4912      	ldr	r1, [pc, #72]	; (8015dfc <tcpip_inpkt+0x5c>)
 8015db4:	200a      	movs	r0, #10
 8015db6:	f002 fd89 	bl	80188cc <memp_malloc_fn>
  if (msg == NULL) {
 8015dba:	4604      	mov	r4, r0
 8015dbc:	b1c0      	cbz	r0, 8015df0 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 8015dbe:	2300      	movs	r3, #0
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015dc0:	4601      	mov	r1, r0
  msg->msg.inp.input_fn = input_fn;
 8015dc2:	60c5      	str	r5, [r0, #12]
  msg->type = TCPIP_MSG_INPKT;
 8015dc4:	7003      	strb	r3, [r0, #0]
  msg->msg.inp.netif = inp;
 8015dc6:	e9c0 7601 	strd	r7, r6, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015dca:	480b      	ldr	r0, [pc, #44]	; (8015df8 <tcpip_inpkt+0x58>)
 8015dcc:	f00b fd7c 	bl	80218c8 <sys_mbox_trypost>
 8015dd0:	b938      	cbnz	r0, 8015de2 <tcpip_inpkt+0x42>
}
 8015dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015dd4:	4b09      	ldr	r3, [pc, #36]	; (8015dfc <tcpip_inpkt+0x5c>)
 8015dd6:	22fc      	movs	r2, #252	; 0xfc
 8015dd8:	4909      	ldr	r1, [pc, #36]	; (8015e00 <tcpip_inpkt+0x60>)
 8015dda:	480a      	ldr	r0, [pc, #40]	; (8015e04 <tcpip_inpkt+0x64>)
 8015ddc:	f00d f982 	bl	80230e4 <iprintf>
 8015de0:	e7e6      	b.n	8015db0 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8015de2:	4621      	mov	r1, r4
 8015de4:	200a      	movs	r0, #10
 8015de6:	f002 fd95 	bl	8018914 <memp_free>
    return ERR_MEM;
 8015dea:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8015df0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015df6:	bf00      	nop
 8015df8:	20019fb4 	.word	0x20019fb4
 8015dfc:	08029be0 	.word	0x08029be0
 8015e00:	08029c30 	.word	0x08029c30
 8015e04:	08029ba0 	.word	0x08029ba0

08015e08 <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8015e08:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8015e0c:	f013 0f18 	tst.w	r3, #24
 8015e10:	d002      	beq.n	8015e18 <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8015e12:	4a03      	ldr	r2, [pc, #12]	; (8015e20 <tcpip_input+0x18>)
 8015e14:	f7ff bfc4 	b.w	8015da0 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 8015e18:	4a02      	ldr	r2, [pc, #8]	; (8015e24 <tcpip_input+0x1c>)
 8015e1a:	f7ff bfc1 	b.w	8015da0 <tcpip_inpkt>
 8015e1e:	bf00      	nop
 8015e20:	0802173d 	.word	0x0802173d
 8015e24:	080208b1 	.word	0x080208b1

08015e28 <tcpip_try_callback>:
{
 8015e28:	b570      	push	{r4, r5, r6, lr}
 8015e2a:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015e2c:	4814      	ldr	r0, [pc, #80]	; (8015e80 <tcpip_try_callback+0x58>)
{
 8015e2e:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015e30:	f00b fd7e 	bl	8021930 <sys_mbox_valid>
 8015e34:	b188      	cbz	r0, 8015e5a <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8015e36:	f240 125f 	movw	r2, #351	; 0x15f
 8015e3a:	4912      	ldr	r1, [pc, #72]	; (8015e84 <tcpip_try_callback+0x5c>)
 8015e3c:	2009      	movs	r0, #9
 8015e3e:	f002 fd45 	bl	80188cc <memp_malloc_fn>
  if (msg == NULL) {
 8015e42:	4604      	mov	r4, r0
 8015e44:	b1c0      	cbz	r0, 8015e78 <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 8015e46:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015e48:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 8015e4a:	e9c0 6501 	strd	r6, r5, [r0, #4]
  msg->type = TCPIP_MSG_CALLBACK;
 8015e4e:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8015e50:	480b      	ldr	r0, [pc, #44]	; (8015e80 <tcpip_try_callback+0x58>)
 8015e52:	f00b fd39 	bl	80218c8 <sys_mbox_trypost>
 8015e56:	b940      	cbnz	r0, 8015e6a <tcpip_try_callback+0x42>
}
 8015e58:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8015e5a:	4b0a      	ldr	r3, [pc, #40]	; (8015e84 <tcpip_try_callback+0x5c>)
 8015e5c:	f240 125d 	movw	r2, #349	; 0x15d
 8015e60:	4909      	ldr	r1, [pc, #36]	; (8015e88 <tcpip_try_callback+0x60>)
 8015e62:	480a      	ldr	r0, [pc, #40]	; (8015e8c <tcpip_try_callback+0x64>)
 8015e64:	f00d f93e 	bl	80230e4 <iprintf>
 8015e68:	e7e5      	b.n	8015e36 <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8015e6a:	4621      	mov	r1, r4
 8015e6c:	2009      	movs	r0, #9
 8015e6e:	f002 fd51 	bl	8018914 <memp_free>
    return ERR_MEM;
 8015e72:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015e76:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8015e78:	f04f 30ff 	mov.w	r0, #4294967295
}
 8015e7c:	bd70      	pop	{r4, r5, r6, pc}
 8015e7e:	bf00      	nop
 8015e80:	20019fb4 	.word	0x20019fb4
 8015e84:	08029be0 	.word	0x08029be0
 8015e88:	08029c30 	.word	0x08029c30
 8015e8c:	08029ba0 	.word	0x08029ba0

08015e90 <tcpip_init>:
{
 8015e90:	b530      	push	{r4, r5, lr}
 8015e92:	b083      	sub	sp, #12
 8015e94:	4605      	mov	r5, r0
 8015e96:	460c      	mov	r4, r1
  lwip_init();
 8015e98:	f001 ff9e 	bl	8017dd8 <lwip_init>
  tcpip_init_done = initfunc;
 8015e9c:	4a15      	ldr	r2, [pc, #84]	; (8015ef4 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015e9e:	2106      	movs	r1, #6
  tcpip_init_done_arg = arg;
 8015ea0:	4b15      	ldr	r3, [pc, #84]	; (8015ef8 <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015ea2:	4816      	ldr	r0, [pc, #88]	; (8015efc <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 8015ea4:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 8015ea6:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8015ea8:	f00b fce8 	bl	802187c <sys_mbox_new>
 8015eac:	b968      	cbnz	r0, 8015eca <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015eae:	4814      	ldr	r0, [pc, #80]	; (8015f00 <tcpip_init+0x70>)
 8015eb0:	f00b fd50 	bl	8021954 <sys_mutex_new>
 8015eb4:	b9a8      	cbnz	r0, 8015ee2 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015ebc:	4911      	ldr	r1, [pc, #68]	; (8015f04 <tcpip_init+0x74>)
 8015ebe:	9200      	str	r2, [sp, #0]
 8015ec0:	4811      	ldr	r0, [pc, #68]	; (8015f08 <tcpip_init+0x78>)
 8015ec2:	f00b fd77 	bl	80219b4 <sys_thread_new>
}
 8015ec6:	b003      	add	sp, #12
 8015ec8:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8015eca:	4b10      	ldr	r3, [pc, #64]	; (8015f0c <tcpip_init+0x7c>)
 8015ecc:	f240 2261 	movw	r2, #609	; 0x261
 8015ed0:	490f      	ldr	r1, [pc, #60]	; (8015f10 <tcpip_init+0x80>)
 8015ed2:	4810      	ldr	r0, [pc, #64]	; (8015f14 <tcpip_init+0x84>)
 8015ed4:	f00d f906 	bl	80230e4 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8015ed8:	4809      	ldr	r0, [pc, #36]	; (8015f00 <tcpip_init+0x70>)
 8015eda:	f00b fd3b 	bl	8021954 <sys_mutex_new>
 8015ede:	2800      	cmp	r0, #0
 8015ee0:	d0e9      	beq.n	8015eb6 <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8015ee2:	4b0a      	ldr	r3, [pc, #40]	; (8015f0c <tcpip_init+0x7c>)
 8015ee4:	f240 2265 	movw	r2, #613	; 0x265
 8015ee8:	490b      	ldr	r1, [pc, #44]	; (8015f18 <tcpip_init+0x88>)
 8015eea:	480a      	ldr	r0, [pc, #40]	; (8015f14 <tcpip_init+0x84>)
 8015eec:	f00d f8fa 	bl	80230e4 <iprintf>
 8015ef0:	e7e1      	b.n	8015eb6 <tcpip_init+0x26>
 8015ef2:	bf00      	nop
 8015ef4:	20019fac 	.word	0x20019fac
 8015ef8:	20019fb0 	.word	0x20019fb0
 8015efc:	20019fb4 	.word	0x20019fb4
 8015f00:	2001f460 	.word	0x2001f460
 8015f04:	08015c99 	.word	0x08015c99
 8015f08:	08029c88 	.word	0x08029c88
 8015f0c:	08029be0 	.word	0x08029be0
 8015f10:	08029c40 	.word	0x08029c40
 8015f14:	08029ba0 	.word	0x08029ba0
 8015f18:	08029c64 	.word	0x08029c64

08015f1c <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8015f1c:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8015f1e:	4801      	ldr	r0, [pc, #4]	; (8015f24 <pbuf_free_callback+0x8>)
 8015f20:	f7ff bf82 	b.w	8015e28 <tcpip_try_callback>
 8015f24:	08015c95 	.word	0x08015c95

08015f28 <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 8015f28:	b300      	cbz	r0, 8015f6c <fs_open+0x44>
{
 8015f2a:	b570      	push	{r4, r5, r6, lr}
 8015f2c:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8015f2e:	b1d1      	cbz	r1, 8015f66 <fs_open+0x3e>
 8015f30:	4606      	mov	r6, r0
 8015f32:	4910      	ldr	r1, [pc, #64]	; (8015f74 <fs_open+0x4c>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015f34:	4c10      	ldr	r4, [pc, #64]	; (8015f78 <fs_open+0x50>)
 8015f36:	e000      	b.n	8015f3a <fs_open+0x12>
 8015f38:	6861      	ldr	r1, [r4, #4]
    if (!strcmp(name, (const char *)f->name)) {
 8015f3a:	4628      	mov	r0, r5
 8015f3c:	f7ea f980 	bl	8000240 <strcmp>
 8015f40:	b130      	cbz	r0, 8015f50 <fs_open+0x28>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8015f42:	6824      	ldr	r4, [r4, #0]
 8015f44:	2c00      	cmp	r4, #0
 8015f46:	d1f7      	bne.n	8015f38 <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 8015f48:	f06f 0305 	mvn.w	r3, #5
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8015f50:	68e2      	ldr	r2, [r4, #12]
      return ERR_OK;
 8015f52:	4603      	mov	r3, r0
      file->data = (const char *)f->data;
 8015f54:	68a1      	ldr	r1, [r4, #8]
      file->pextension = NULL;
 8015f56:	e9c6 2002 	strd	r2, r0, [r6, #8]
      file->len = f->len;
 8015f5a:	e9c6 1200 	strd	r1, r2, [r6]
      file->flags = f->flags;
 8015f5e:	7c22      	ldrb	r2, [r4, #16]
}
 8015f60:	4618      	mov	r0, r3
      file->flags = f->flags;
 8015f62:	7432      	strb	r2, [r6, #16]
}
 8015f64:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8015f66:	f06f 030f 	mvn.w	r3, #15
 8015f6a:	e7ef      	b.n	8015f4c <fs_open+0x24>
 8015f6c:	f06f 030f 	mvn.w	r3, #15
}
 8015f70:	4618      	mov	r0, r3
 8015f72:	4770      	bx	lr
 8015f74:	08034b1c 	.word	0x08034b1c
 8015f78:	0803fc88 	.word	0x0803fc88

08015f7c <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8015f7c:	4770      	bx	lr
 8015f7e:	bf00      	nop

08015f80 <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 8015f80:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8015f84:	1a10      	subs	r0, r2, r0
 8015f86:	4770      	bx	lr

08015f88 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8015f88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8015f8c:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 8015f8e:	b364      	cbz	r4, 8015fea <http_write+0x62>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 8015f90:	8e45      	ldrh	r5, [r0, #50]	; 0x32
 8015f92:	4690      	mov	r8, r2
 8015f94:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 8015f98:	4606      	mov	r6, r0
 8015f9a:	006d      	lsls	r5, r5, #1
 8015f9c:	460f      	mov	r7, r1
 8015f9e:	4699      	mov	r9, r3
 8015fa0:	b2ad      	uxth	r5, r5
 8015fa2:	4295      	cmp	r5, r2
 8015fa4:	bf28      	it	cs
 8015fa6:	4615      	movcs	r5, r2
 8015fa8:	42ac      	cmp	r4, r5
 8015faa:	bf28      	it	cs
 8015fac:	462c      	movcs	r4, r5
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 8015fae:	464b      	mov	r3, r9
 8015fb0:	4622      	mov	r2, r4
 8015fb2:	4639      	mov	r1, r7
 8015fb4:	4630      	mov	r0, r6
 8015fb6:	f006 fc9f 	bl	801c8f8 <tcp_write>
    if (err == ERR_MEM) {
 8015fba:	1c43      	adds	r3, r0, #1
 8015fbc:	d008      	beq.n	8015fd0 <http_write+0x48>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 8015fbe:	b978      	cbnz	r0, 8015fe0 <http_write+0x58>
 8015fc0:	f8a8 4000 	strh.w	r4, [r8]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 8015fc4:	8b73      	ldrh	r3, [r6, #26]
 8015fc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015fca:	8373      	strh	r3, [r6, #26]
#endif

  return err;
}
 8015fcc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 8015fd0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8015fd4:	b123      	cbz	r3, 8015fe0 <http_write+0x58>
 8015fd6:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        len /= 2;
 8015fda:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 8015fdc:	2b08      	cmp	r3, #8
 8015fde:	d901      	bls.n	8015fe4 <http_write+0x5c>
    *length = 0;
 8015fe0:	2400      	movs	r4, #0
 8015fe2:	e7ed      	b.n	8015fc0 <http_write+0x38>
  } while ((err == ERR_MEM) && (len > 1));
 8015fe4:	2c01      	cmp	r4, #1
 8015fe6:	d8e2      	bhi.n	8015fae <http_write+0x26>
 8015fe8:	e7fa      	b.n	8015fe0 <http_write+0x58>
    return ERR_OK;
 8015fea:	4620      	mov	r0, r4
}
 8015fec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08015ff0 <http_state_eof>:
{
 8015ff0:	b510      	push	{r4, lr}
 8015ff2:	4604      	mov	r4, r0
  if (hs->handle) {
 8015ff4:	6940      	ldr	r0, [r0, #20]
 8015ff6:	b118      	cbz	r0, 8016000 <http_state_eof+0x10>
    fs_close(hs->handle);
 8015ff8:	f7ff ffc0 	bl	8015f7c <fs_close>
    hs->handle = NULL;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8016000:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016002:	b118      	cbz	r0, 801600c <http_state_eof+0x1c>
    HTTP_FREE_SSI_STATE(ssi);
 8016004:	f002 f89a 	bl	801813c <mem_free>
    hs->ssi = NULL;
 8016008:	2300      	movs	r3, #0
 801600a:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 801600c:	6a20      	ldr	r0, [r4, #32]
 801600e:	b118      	cbz	r0, 8016018 <http_state_eof+0x28>
    pbuf_free(hs->req);
 8016010:	f002 ff50 	bl	8018eb4 <pbuf_free>
    hs->req = NULL;
 8016014:	2300      	movs	r3, #0
 8016016:	6223      	str	r3, [r4, #32]
}
 8016018:	bd10      	pop	{r4, pc}
 801601a:	bf00      	nop

0801601c <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 801601c:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 801601e:	4b0e      	ldr	r3, [pc, #56]	; (8016058 <http_get_404_file+0x3c>)
{
 8016020:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8016022:	4604      	mov	r4, r0
 8016024:	4619      	mov	r1, r3
  *uri = "/404.html";
 8016026:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8016028:	f7ff ff7e 	bl	8015f28 <fs_open>
  if (err != ERR_OK) {
 801602c:	b908      	cbnz	r0, 8016032 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 801602e:	4620      	mov	r0, r4
 8016030:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8016032:	490a      	ldr	r1, [pc, #40]	; (801605c <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8016034:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8016036:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8016038:	f7ff ff76 	bl	8015f28 <fs_open>
    if (err != ERR_OK) {
 801603c:	2800      	cmp	r0, #0
 801603e:	d0f6      	beq.n	801602e <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8016040:	4907      	ldr	r1, [pc, #28]	; (8016060 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8016042:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8016044:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8016046:	f7ff ff6f 	bl	8015f28 <fs_open>
      if (err != ERR_OK) {
 801604a:	2800      	cmp	r0, #0
 801604c:	d0ef      	beq.n	801602e <http_get_404_file+0x12>
        *uri = NULL;
 801604e:	2300      	movs	r3, #0
        return NULL;
 8016050:	461c      	mov	r4, r3
        *uri = NULL;
 8016052:	602b      	str	r3, [r5, #0]
        return NULL;
 8016054:	e7eb      	b.n	801602e <http_get_404_file+0x12>
 8016056:	bf00      	nop
 8016058:	0803fc9c 	.word	0x0803fc9c
 801605c:	0803fca8 	.word	0x0803fca8
 8016060:	0803fcb4 	.word	0x0803fcb4

08016064 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8016064:	bb82      	cbnz	r2, 80160c8 <http_accept+0x64>
{
 8016066:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8016068:	fab1 f581 	clz	r5, r1
 801606c:	460c      	mov	r4, r1
 801606e:	096d      	lsrs	r5, r5, #5
 8016070:	b339      	cbz	r1, 80160c2 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8016072:	2101      	movs	r1, #1
 8016074:	4620      	mov	r0, r4
 8016076:	f003 fd5f 	bl	8019b38 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 801607a:	2034      	movs	r0, #52	; 0x34
 801607c:	f002 fa38 	bl	80184f0 <mem_malloc>
  if (ret != NULL) {
 8016080:	4606      	mov	r6, r0
 8016082:	b1d8      	cbz	r0, 80160bc <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8016084:	2234      	movs	r2, #52	; 0x34
 8016086:	4629      	mov	r1, r5
 8016088:	f00c f8ba 	bl	8022200 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 801608c:	4631      	mov	r1, r6
 801608e:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8016090:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8016092:	f003 fd87 	bl	8019ba4 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8016096:	4620      	mov	r0, r4
 8016098:	490d      	ldr	r1, [pc, #52]	; (80160d0 <http_accept+0x6c>)
 801609a:	f003 fd87 	bl	8019bac <tcp_recv>
  altcp_err(pcb, http_err);
 801609e:	4620      	mov	r0, r4
 80160a0:	490c      	ldr	r1, [pc, #48]	; (80160d4 <http_accept+0x70>)
 80160a2:	f003 fdbb 	bl	8019c1c <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80160a6:	2204      	movs	r2, #4
 80160a8:	4620      	mov	r0, r4
 80160aa:	490b      	ldr	r1, [pc, #44]	; (80160d8 <http_accept+0x74>)
 80160ac:	f003 fdd8 	bl	8019c60 <tcp_poll>
  altcp_sent(pcb, http_sent);
 80160b0:	4620      	mov	r0, r4
 80160b2:	490a      	ldr	r1, [pc, #40]	; (80160dc <http_accept+0x78>)
 80160b4:	f003 fd96 	bl	8019be4 <tcp_sent>

  return ERR_OK;
 80160b8:	4628      	mov	r0, r5
}
 80160ba:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 80160bc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80160c0:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80160c2:	f06f 0005 	mvn.w	r0, #5
}
 80160c6:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 80160c8:	f06f 0005 	mvn.w	r0, #5
}
 80160cc:	4770      	bx	lr
 80160ce:	bf00      	nop
 80160d0:	08016cad 	.word	0x08016cad
 80160d4:	080170f5 	.word	0x080170f5
 80160d8:	08016c55 	.word	0x08016c55
 80160dc:	08016c3d 	.word	0x08016c3d

080160e0 <http_init_file>:
{
 80160e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160e4:	b089      	sub	sp, #36	; 0x24
 80160e6:	4604      	mov	r4, r0
  if (file != NULL) {
 80160e8:	460d      	mov	r5, r1
{
 80160ea:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 80160ee:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 80160f0:	e9cd 2303 	strd	r2, r3, [sp, #12]
  if (file != NULL) {
 80160f4:	2900      	cmp	r1, #0
 80160f6:	f000 80b0 	beq.w	801625a <http_init_file+0x17a>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 80160fa:	680b      	ldr	r3, [r1, #0]
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f000 80b2 	beq.w	8016266 <http_init_file+0x186>
    if (tag_check) {
 8016102:	2e00      	cmp	r6, #0
 8016104:	d171      	bne.n	80161ea <http_init_file+0x10a>
    hs->handle = file;
 8016106:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8016108:	2f00      	cmp	r7, #0
 801610a:	d051      	beq.n	80161b0 <http_init_file+0xd0>
  if (!params || (params[0] == '\0')) {
 801610c:	4b64      	ldr	r3, [pc, #400]	; (80162a0 <http_init_file+0x1c0>)
 801610e:	783a      	ldrb	r2, [r7, #0]
 8016110:	9305      	str	r3, [sp, #20]
 8016112:	2a00      	cmp	r2, #0
 8016114:	d045      	beq.n	80161a2 <http_init_file+0xc2>
 8016116:	f04f 0801 	mov.w	r8, #1
 801611a:	f8df b188 	ldr.w	fp, [pc, #392]	; 80162a4 <http_init_file+0x1c4>
        *pair = '\0';
 801611e:	f04f 0a00 	mov.w	sl, #0
 8016122:	4699      	mov	r9, r3
 8016124:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016128:	463c      	mov	r4, r7
 801612a:	e014      	b.n	8016156 <http_init_file+0x76>
 801612c:	2a0e      	cmp	r2, #14
      *pair = '\0';
 801612e:	f807 ab01 	strb.w	sl, [r7], #1
      pair++;
 8016132:	bfcc      	ite	gt
 8016134:	2500      	movgt	r5, #0
 8016136:	2501      	movle	r5, #1
    equals = strchr(equals, '=');
 8016138:	4620      	mov	r0, r4
 801613a:	213d      	movs	r1, #61	; 0x3d
 801613c:	f00d f9e4 	bl	8023508 <strchr>
    if (equals) {
 8016140:	b318      	cbz	r0, 801618a <http_init_file+0xaa>
      *equals = '\0';
 8016142:	f800 ab01 	strb.w	sl, [r0], #1
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016146:	f109 0904 	add.w	r9, r9, #4
      http_cgi_param_vals[loop] = equals + 1;
 801614a:	f849 0c04 	str.w	r0, [r9, #-4]
 801614e:	f108 0801 	add.w	r8, r8, #1
 8016152:	463c      	mov	r4, r7
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8016154:	b315      	cbz	r5, 801619c <http_init_file+0xbc>
    pair = strchr(pair, '&');
 8016156:	2126      	movs	r1, #38	; 0x26
 8016158:	4620      	mov	r0, r4
    http_cgi_params[loop] = pair;
 801615a:	f84b 4b04 	str.w	r4, [fp], #4
    pair = strchr(pair, '&');
 801615e:	4646      	mov	r6, r8
 8016160:	f00d f9d2 	bl	8023508 <strchr>
    if (pair) {
 8016164:	f108 32ff 	add.w	r2, r8, #4294967295
 8016168:	4607      	mov	r7, r0
 801616a:	2800      	cmp	r0, #0
 801616c:	d1de      	bne.n	801612c <http_init_file+0x4c>
      pair = strchr(equals, ' ');
 801616e:	2120      	movs	r1, #32
 8016170:	4620      	mov	r0, r4
        *pair = '\0';
 8016172:	463d      	mov	r5, r7
      pair = strchr(equals, ' ');
 8016174:	f00d f9c8 	bl	8023508 <strchr>
      if (pair) {
 8016178:	2800      	cmp	r0, #0
 801617a:	d0dd      	beq.n	8016138 <http_init_file+0x58>
        *pair = '\0';
 801617c:	7007      	strb	r7, [r0, #0]
    equals = strchr(equals, '=');
 801617e:	213d      	movs	r1, #61	; 0x3d
 8016180:	4620      	mov	r0, r4
 8016182:	f00d f9c1 	bl	8023508 <strchr>
    if (equals) {
 8016186:	2800      	cmp	r0, #0
 8016188:	d1db      	bne.n	8016142 <http_init_file+0x62>
      http_cgi_param_vals[loop] = NULL;
 801618a:	f8c9 0000 	str.w	r0, [r9]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 801618e:	f108 0801 	add.w	r8, r8, #1
 8016192:	f109 0904 	add.w	r9, r9, #4
 8016196:	463c      	mov	r4, r7
 8016198:	2d00      	cmp	r5, #0
 801619a:	d1dc      	bne.n	8016156 <http_init_file+0x76>
 801619c:	4632      	mov	r2, r6
 801619e:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 80161a2:	9b05      	ldr	r3, [sp, #20]
 80161a4:	4628      	mov	r0, r5
 80161a6:	9904      	ldr	r1, [sp, #16]
 80161a8:	9300      	str	r3, [sp, #0]
 80161aa:	4b3e      	ldr	r3, [pc, #248]	; (80162a4 <http_init_file+0x1c4>)
 80161ac:	f7f0 fbc4 	bl	8006938 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80161b0:	e9d5 3200 	ldrd	r3, r2, [r5]
 80161b4:	2a00      	cmp	r2, #0
    hs->file = file->data;
 80161b6:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 80161b8:	db60      	blt.n	801627c <http_init_file+0x19c>
    hs->retries = 0;
 80161ba:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 80161bc:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 80161be:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 80161c0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 80161c4:	7c1b      	ldrb	r3, [r3, #16]
 80161c6:	07d9      	lsls	r1, r3, #31
 80161c8:	d52a      	bpl.n	8016220 <http_init_file+0x140>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 80161ca:	9b03      	ldr	r3, [sp, #12]
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d136      	bne.n	801623e <http_init_file+0x15e>
  if (hs->keepalive) {
 80161d0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80161d4:	b12b      	cbz	r3, 80161e2 <http_init_file+0x102>
    if (hs->ssi != NULL) {
 80161d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d058      	beq.n	801628e <http_init_file+0x1ae>
      hs->keepalive = 0;
 80161dc:	2300      	movs	r3, #0
 80161de:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 80161e2:	2000      	movs	r0, #0
 80161e4:	b009      	add	sp, #36	; 0x24
 80161e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 80161ea:	f44f 7090 	mov.w	r0, #288	; 0x120
 80161ee:	f002 f97f 	bl	80184f0 <mem_malloc>
  if (ret != NULL) {
 80161f2:	4606      	mov	r6, r0
 80161f4:	2800      	cmp	r0, #0
 80161f6:	d086      	beq.n	8016106 <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 80161f8:	f44f 7290 	mov.w	r2, #288	; 0x120
 80161fc:	2100      	movs	r1, #0
 80161fe:	f00b ffff 	bl	8022200 <memset>
        ssi->tag_index = 0;
 8016202:	2200      	movs	r2, #0
        ssi->tag_state = TAG_NONE;
 8016204:	f886 211e 	strb.w	r2, [r6, #286]	; 0x11e
        ssi->parse_left = file->len;
 8016208:	e9d5 3100 	ldrd	r3, r1, [r5]
        ssi->tag_index = 0;
 801620c:	8232      	strh	r2, [r6, #16]
        ssi->parsed = file->data;
 801620e:	6033      	str	r3, [r6, #0]
        ssi->parse_left = file->len;
 8016210:	e9c6 3102 	strd	r3, r1, [r6, #8]
        hs->ssi = ssi;
 8016214:	62e6      	str	r6, [r4, #44]	; 0x2c
    hs->handle = file;
 8016216:	6165      	str	r5, [r4, #20]
    if (params != NULL) {
 8016218:	2f00      	cmp	r7, #0
 801621a:	f47f af77 	bne.w	801610c <http_init_file+0x2c>
 801621e:	e7c7      	b.n	80161b0 <http_init_file+0xd0>
    LWIP_ASSERT("HTTP headers not included in file system",
 8016220:	4b21      	ldr	r3, [pc, #132]	; (80162a8 <http_init_file+0x1c8>)
 8016222:	f640 1243 	movw	r2, #2371	; 0x943
 8016226:	4921      	ldr	r1, [pc, #132]	; (80162ac <http_init_file+0x1cc>)
 8016228:	4821      	ldr	r0, [pc, #132]	; (80162b0 <http_init_file+0x1d0>)
 801622a:	f00c ff5b 	bl	80230e4 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 801622e:	9b03      	ldr	r3, [sp, #12]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d0cd      	beq.n	80161d0 <http_init_file+0xf0>
 8016234:	6963      	ldr	r3, [r4, #20]
 8016236:	7c1b      	ldrb	r3, [r3, #16]
 8016238:	07db      	lsls	r3, r3, #31
 801623a:	d5c9      	bpl.n	80161d0 <http_init_file+0xf0>
 801623c:	6a62      	ldr	r2, [r4, #36]	; 0x24
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 801623e:	491d      	ldr	r1, [pc, #116]	; (80162b4 <http_init_file+0x1d4>)
 8016240:	69a0      	ldr	r0, [r4, #24]
 8016242:	f000 ffe9 	bl	8017218 <lwip_strnstr>
      if (file_start != NULL) {
 8016246:	2800      	cmp	r0, #0
 8016248:	d0c2      	beq.n	80161d0 <http_init_file+0xf0>
        int diff = file_start + 4 - hs->file;
 801624a:	3004      	adds	r0, #4
 801624c:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 801624e:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8016250:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8016252:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8016254:	1a9b      	subs	r3, r3, r2
 8016256:	6263      	str	r3, [r4, #36]	; 0x24
 8016258:	e7ba      	b.n	80161d0 <http_init_file+0xf0>
    hs->file = NULL;
 801625a:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 801625e:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8016260:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8016264:	e7b4      	b.n	80161d0 <http_init_file+0xf0>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8016266:	4b10      	ldr	r3, [pc, #64]	; (80162a8 <http_init_file+0x1c8>)
 8016268:	f640 120b 	movw	r2, #2315	; 0x90b
 801626c:	4912      	ldr	r1, [pc, #72]	; (80162b8 <http_init_file+0x1d8>)
 801626e:	4810      	ldr	r0, [pc, #64]	; (80162b0 <http_init_file+0x1d0>)
 8016270:	f00c ff38 	bl	80230e4 <iprintf>
    if (tag_check) {
 8016274:	2e00      	cmp	r6, #0
 8016276:	f43f af46 	beq.w	8016106 <http_init_file+0x26>
 801627a:	e7b6      	b.n	80161ea <http_init_file+0x10a>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 801627c:	f640 1234 	movw	r2, #2356	; 0x934
 8016280:	4b09      	ldr	r3, [pc, #36]	; (80162a8 <http_init_file+0x1c8>)
 8016282:	490e      	ldr	r1, [pc, #56]	; (80162bc <http_init_file+0x1dc>)
 8016284:	480a      	ldr	r0, [pc, #40]	; (80162b0 <http_init_file+0x1d0>)
 8016286:	f00c ff2d 	bl	80230e4 <iprintf>
 801628a:	686a      	ldr	r2, [r5, #4]
 801628c:	e795      	b.n	80161ba <http_init_file+0xda>
      if ((hs->handle != NULL) &&
 801628e:	6963      	ldr	r3, [r4, #20]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d0a6      	beq.n	80161e2 <http_init_file+0x102>
 8016294:	7c1b      	ldrb	r3, [r3, #16]
 8016296:	f003 0303 	and.w	r3, r3, #3
 801629a:	2b01      	cmp	r3, #1
 801629c:	d1a1      	bne.n	80161e2 <http_init_file+0x102>
 801629e:	e79d      	b.n	80161dc <http_init_file+0xfc>
 80162a0:	20019fb8 	.word	0x20019fb8
 80162a4:	20019ff8 	.word	0x20019ff8
 80162a8:	0803fcc0 	.word	0x0803fcc0
 80162ac:	0803fd2c 	.word	0x0803fd2c
 80162b0:	08029ba0 	.word	0x08029ba0
 80162b4:	08027564 	.word	0x08027564
 80162b8:	0803fcf8 	.word	0x0803fcf8
 80162bc:	0803fd0c 	.word	0x0803fd0c

080162c0 <http_find_file>:
{
 80162c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80162c4:	ed2d 8b02 	vpush	{d8}
 80162c8:	b087      	sub	sp, #28
 80162ca:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 80162cc:	4608      	mov	r0, r1
 80162ce:	460c      	mov	r4, r1
{
 80162d0:	4690      	mov	r8, r2
 80162d2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 80162d4:	f7e9 ffbe 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80162d8:	4606      	mov	r6, r0
 80162da:	b138      	cbz	r0, 80162ec <http_find_file+0x2c>
 80162dc:	1e43      	subs	r3, r0, #1
 80162de:	5ce2      	ldrb	r2, [r4, r3]
 80162e0:	2a2f      	cmp	r2, #47	; 0x2f
 80162e2:	d06a      	beq.n	80163ba <http_find_file+0xfa>
 80162e4:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 80162e6:	f04f 0900 	mov.w	r9, #0
 80162ea:	e001      	b.n	80162f0 <http_find_file+0x30>
 80162ec:	4681      	mov	r9, r0
 80162ee:	462f      	mov	r7, r5
    params = (char *)strchr(uri, '?');
 80162f0:	213f      	movs	r1, #63	; 0x3f
 80162f2:	4620      	mov	r0, r4
 80162f4:	f00d f908 	bl	8023508 <strchr>
    if (params != NULL) {
 80162f8:	4606      	mov	r6, r0
 80162fa:	b118      	cbz	r0, 8016304 <http_find_file+0x44>
      *params = '\0';
 80162fc:	2300      	movs	r3, #0
 80162fe:	f806 3b01 	strb.w	r3, [r6], #1
      params++;
 8016302:	9c05      	ldr	r4, [sp, #20]
    err = fs_open(&hs->file_handle, uri);
 8016304:	4621      	mov	r1, r4
 8016306:	4628      	mov	r0, r5
 8016308:	f7ff fe0e 	bl	8015f28 <fs_open>
    if (err == ERR_OK) {
 801630c:	b9b0      	cbnz	r0, 801633c <http_find_file+0x7c>
    if (file != NULL) {
 801630e:	b1e7      	cbz	r7, 801634a <http_find_file+0x8a>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8016310:	f897 9010 	ldrb.w	r9, [r7, #16]
 8016314:	9c05      	ldr	r4, [sp, #20]
 8016316:	f019 0908 	ands.w	r9, r9, #8
 801631a:	d01d      	beq.n	8016358 <http_find_file+0x98>
        tag_check = 1;
 801631c:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8016320:	4623      	mov	r3, r4
 8016322:	4642      	mov	r2, r8
 8016324:	4639      	mov	r1, r7
 8016326:	4628      	mov	r0, r5
 8016328:	9601      	str	r6, [sp, #4]
 801632a:	f8cd 9000 	str.w	r9, [sp]
 801632e:	f7ff fed7 	bl	80160e0 <http_init_file>
}
 8016332:	b007      	add	sp, #28
 8016334:	ecbd 8b02 	vpop	{d8}
 8016338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 801633c:	a905      	add	r1, sp, #20
 801633e:	4628      	mov	r0, r5
 8016340:	f7ff fe6c 	bl	801601c <http_get_404_file>
 8016344:	4607      	mov	r7, r0
    if (file != NULL) {
 8016346:	2f00      	cmp	r7, #0
 8016348:	d1e2      	bne.n	8016310 <http_find_file+0x50>
    file = http_get_404_file(hs, &uri);
 801634a:	a905      	add	r1, sp, #20
 801634c:	4628      	mov	r0, r5
 801634e:	f7ff fe65 	bl	801601c <http_get_404_file>
 8016352:	9c05      	ldr	r4, [sp, #20]
 8016354:	4607      	mov	r7, r0
 8016356:	e7e3      	b.n	8016320 <http_find_file+0x60>
    char *param = (char *)strstr(uri, "?");
 8016358:	213f      	movs	r1, #63	; 0x3f
 801635a:	4620      	mov	r0, r4
 801635c:	f00d f8d4 	bl	8023508 <strchr>
    if (param != NULL) {
 8016360:	4682      	mov	sl, r0
 8016362:	b108      	cbz	r0, 8016368 <http_find_file+0xa8>
      *param = 0;
 8016364:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8016368:	212e      	movs	r1, #46	; 0x2e
 801636a:	4620      	mov	r0, r4
 801636c:	f00d f8cc 	bl	8023508 <strchr>
 8016370:	4603      	mov	r3, r0
 8016372:	b138      	cbz	r0, 8016384 <http_find_file+0xc4>
 8016374:	1c58      	adds	r0, r3, #1
 8016376:	212e      	movs	r1, #46	; 0x2e
 8016378:	461c      	mov	r4, r3
 801637a:	f00d f8c5 	bl	8023508 <strchr>
 801637e:	4603      	mov	r3, r0
 8016380:	2800      	cmp	r0, #0
 8016382:	d1f7      	bne.n	8016374 <http_find_file+0xb4>
  u8_t tag_check = 0;
 8016384:	4940      	ldr	r1, [pc, #256]	; (8016488 <http_find_file+0x1c8>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8016386:	4620      	mov	r0, r4
 8016388:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8016498 <http_find_file+0x1d8>
 801638c:	f000 ff6c 	bl	8017268 <lwip_stricmp>
 8016390:	b148      	cbz	r0, 80163a6 <http_find_file+0xe6>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8016392:	4b3e      	ldr	r3, [pc, #248]	; (801648c <http_find_file+0x1cc>)
 8016394:	459b      	cmp	fp, r3
 8016396:	d008      	beq.n	80163aa <http_find_file+0xea>
 8016398:	f85b 1b04 	ldr.w	r1, [fp], #4
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 801639c:	4620      	mov	r0, r4
 801639e:	f000 ff63 	bl	8017268 <lwip_stricmp>
 80163a2:	2800      	cmp	r0, #0
 80163a4:	d1f5      	bne.n	8016392 <http_find_file+0xd2>
        tag_check = 1;
 80163a6:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 80163aa:	f1ba 0f00 	cmp.w	sl, #0
 80163ae:	d002      	beq.n	80163b6 <http_find_file+0xf6>
      *param = '?';
 80163b0:	233f      	movs	r3, #63	; 0x3f
 80163b2:	f88a 3000 	strb.w	r3, [sl]
 80163b6:	9c05      	ldr	r4, [sp, #20]
 80163b8:	e7b2      	b.n	8016320 <http_find_file+0x60>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80163ba:	4a35      	ldr	r2, [pc, #212]	; (8016490 <http_find_file+0x1d0>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80163bc:	4294      	cmp	r4, r2
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 80163be:	9203      	str	r2, [sp, #12]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 80163c0:	d106      	bne.n	80163d0 <http_find_file+0x110>
 80163c2:	f1a0 0001 	sub.w	r0, r0, #1
 80163c6:	fab0 f080 	clz	r0, r0
 80163ca:	0940      	lsrs	r0, r0, #5
 80163cc:	2800      	cmp	r0, #0
 80163ce:	d057      	beq.n	8016480 <http_find_file+0x1c0>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80163d0:	2b3f      	cmp	r3, #63	; 0x3f
 80163d2:	bf28      	it	cs
 80163d4:	233f      	movcs	r3, #63	; 0x3f
    if (copy_len > 0) {
 80163d6:	2e01      	cmp	r6, #1
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 80163d8:	469a      	mov	sl, r3
    if (copy_len > 0) {
 80163da:	d008      	beq.n	80163ee <http_find_file+0x12e>
      MEMCPY(http_uri_buf, uri, copy_len);
 80163dc:	461a      	mov	r2, r3
 80163de:	4621      	mov	r1, r4
 80163e0:	482b      	ldr	r0, [pc, #172]	; (8016490 <http_find_file+0x1d0>)
 80163e2:	f00b fee5 	bl	80221b0 <memcpy>
      http_uri_buf[copy_len] = 0;
 80163e6:	2300      	movs	r3, #0
 80163e8:	9a03      	ldr	r2, [sp, #12]
 80163ea:	f802 300a 	strb.w	r3, [r2, sl]
 80163ee:	462f      	mov	r7, r5
{
 80163f0:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 80163f4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8016490 <http_find_file+0x1d0>
 80163f8:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 80163fc:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 80163fe:	46c8      	mov	r8, r9
      if (copy_len > 0) {
 8016400:	d012      	beq.n	8016428 <http_find_file+0x168>
        if (len_left > 0) {
 8016402:	f1da 033f 	rsbs	r3, sl, #63	; 0x3f
 8016406:	d113      	bne.n	8016430 <http_find_file+0x170>
      err = fs_open(&hs->file_handle, file_name);
 8016408:	4641      	mov	r1, r8
 801640a:	4628      	mov	r0, r5
 801640c:	f7ff fd8c 	bl	8015f28 <fs_open>
      if (err == ERR_OK) {
 8016410:	b340      	cbz	r0, 8016464 <http_find_file+0x1a4>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8016412:	f10b 0b01 	add.w	fp, fp, #1
 8016416:	f1bb 0f05 	cmp.w	fp, #5
 801641a:	d1ef      	bne.n	80163fc <http_find_file+0x13c>
 801641c:	ee18 8a10 	vmov	r8, s16
 8016420:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8016422:	f04f 0900 	mov.w	r9, #0
 8016426:	e763      	b.n	80162f0 <http_find_file+0x30>
        file_name = httpd_default_filenames[loop].name;
 8016428:	4b1a      	ldr	r3, [pc, #104]	; (8016494 <http_find_file+0x1d4>)
 801642a:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 801642e:	e7eb      	b.n	8016408 <http_find_file+0x148>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8016430:	9304      	str	r3, [sp, #16]
 8016432:	4b18      	ldr	r3, [pc, #96]	; (8016494 <http_find_file+0x1d4>)
 8016434:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8016438:	9b03      	ldr	r3, [sp, #12]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 801643a:	4608      	mov	r0, r1
 801643c:	9103      	str	r1, [sp, #12]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801643e:	4453      	add	r3, sl
 8016440:	461c      	mov	r4, r3
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8016442:	f7e9 ff07 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8016446:	9b04      	ldr	r3, [sp, #16]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8016448:	4602      	mov	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 801644a:	9903      	ldr	r1, [sp, #12]
 801644c:	4620      	mov	r0, r4
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 801644e:	429a      	cmp	r2, r3
 8016450:	bf28      	it	cs
 8016452:	461a      	movcs	r2, r3
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8016454:	e9cd 9203 	strd	r9, r2, [sp, #12]
 8016458:	f00b feaa 	bl	80221b0 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 801645c:	2300      	movs	r3, #0
 801645e:	9a04      	ldr	r2, [sp, #16]
 8016460:	54a3      	strb	r3, [r4, r2]
 8016462:	e7d1      	b.n	8016408 <http_find_file+0x148>
        tag_check = httpd_default_filenames[loop].shtml;
 8016464:	4a0b      	ldr	r2, [pc, #44]	; (8016494 <http_find_file+0x1d4>)
 8016466:	4644      	mov	r4, r8
 8016468:	ee18 8a10 	vmov	r8, s16
 801646c:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8016470:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8016472:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 8016476:	2d00      	cmp	r5, #0
 8016478:	f43f af3a 	beq.w	80162f0 <http_find_file+0x30>
  char *params = NULL;
 801647c:	4606      	mov	r6, r0
 801647e:	e74f      	b.n	8016320 <http_find_file+0x60>
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8016480:	4614      	mov	r4, r2
  u8_t tag_check = 0;
 8016482:	4681      	mov	r9, r0
 8016484:	462f      	mov	r7, r5
 8016486:	e733      	b.n	80162f0 <http_find_file+0x30>
 8016488:	0803fd80 	.word	0x0803fd80
 801648c:	0803ffe0 	.word	0x0803ffe0
 8016490:	2001a038 	.word	0x2001a038
 8016494:	0803fff0 	.word	0x0803fff0
 8016498:	0803ffd0 	.word	0x0803ffd0

0801649c <http_post_rxpbuf>:
{
 801649c:	b538      	push	{r3, r4, r5, lr}
 801649e:	4604      	mov	r4, r0
  if (p != NULL) {
 80164a0:	b1c9      	cbz	r1, 80164d6 <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 80164a2:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80164a4:	890a      	ldrh	r2, [r1, #8]
 80164a6:	4293      	cmp	r3, r2
 80164a8:	d31a      	bcc.n	80164e0 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 80164aa:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 80164ac:	4620      	mov	r0, r4
 80164ae:	6323      	str	r3, [r4, #48]	; 0x30
 80164b0:	f7f0 fb50 	bl	8006b54 <httpd_post_receive_data>
  if (err != ERR_OK) {
 80164b4:	b178      	cbz	r0, 80164d6 <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 80164b6:	2300      	movs	r3, #0
 80164b8:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 80164ba:	490a      	ldr	r1, [pc, #40]	; (80164e4 <http_post_rxpbuf+0x48>)
 80164bc:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80164be:	4620      	mov	r0, r4
 80164c0:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 80164c2:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80164c4:	f7f0 fb56 	bl	8006b74 <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 80164c8:	462a      	mov	r2, r5
 80164ca:	4620      	mov	r0, r4
 80164cc:	4905      	ldr	r1, [pc, #20]	; (80164e4 <http_post_rxpbuf+0x48>)
}
 80164ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 80164d2:	f7ff bef5 	b.w	80162c0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 80164d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d0ee      	beq.n	80164ba <http_post_rxpbuf+0x1e>
}
 80164dc:	2000      	movs	r0, #0
 80164de:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 80164e0:	2300      	movs	r3, #0
 80164e2:	e7e3      	b.n	80164ac <http_post_rxpbuf+0x10>
 80164e4:	2001a038 	.word	0x2001a038

080164e8 <http_find_error_file>:
  if (error_nr == 501) {
 80164e8:	f240 12f5 	movw	r2, #501	; 0x1f5
    uri3 = "/400.shtml";
 80164ec:	4b17      	ldr	r3, [pc, #92]	; (801654c <http_find_error_file+0x64>)
 80164ee:	4291      	cmp	r1, r2
 80164f0:	4917      	ldr	r1, [pc, #92]	; (8016550 <http_find_error_file+0x68>)
 80164f2:	4a18      	ldr	r2, [pc, #96]	; (8016554 <http_find_error_file+0x6c>)
 80164f4:	bf18      	it	ne
 80164f6:	460b      	movne	r3, r1
 80164f8:	4917      	ldr	r1, [pc, #92]	; (8016558 <http_find_error_file+0x70>)
{
 80164fa:	b570      	push	{r4, r5, r6, lr}
 80164fc:	b084      	sub	sp, #16
    uri3 = "/400.shtml";
 80164fe:	4e17      	ldr	r6, [pc, #92]	; (801655c <http_find_error_file+0x74>)
 8016500:	bf18      	it	ne
 8016502:	460e      	movne	r6, r1
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8016504:	4619      	mov	r1, r3
 8016506:	9303      	str	r3, [sp, #12]
{
 8016508:	4604      	mov	r4, r0
    uri3 = "/400.shtml";
 801650a:	4d15      	ldr	r5, [pc, #84]	; (8016560 <http_find_error_file+0x78>)
 801650c:	bf08      	it	eq
 801650e:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8016510:	f7ff fd0a 	bl	8015f28 <fs_open>
 8016514:	9b03      	ldr	r3, [sp, #12]
 8016516:	b128      	cbz	r0, 8016524 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8016518:	4629      	mov	r1, r5
 801651a:	4620      	mov	r0, r4
 801651c:	f7ff fd04 	bl	8015f28 <fs_open>
 8016520:	b948      	cbnz	r0, 8016536 <http_find_error_file+0x4e>
    uri = uri2;
 8016522:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8016524:	2200      	movs	r2, #0
 8016526:	4621      	mov	r1, r4
 8016528:	4620      	mov	r0, r4
 801652a:	e9cd 2200 	strd	r2, r2, [sp]
 801652e:	f7ff fdd7 	bl	80160e0 <http_init_file>
}
 8016532:	b004      	add	sp, #16
 8016534:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8016536:	4631      	mov	r1, r6
 8016538:	4620      	mov	r0, r4
 801653a:	f7ff fcf5 	bl	8015f28 <fs_open>
 801653e:	b908      	cbnz	r0, 8016544 <http_find_error_file+0x5c>
    uri = uri3;
 8016540:	4633      	mov	r3, r6
 8016542:	e7ef      	b.n	8016524 <http_find_error_file+0x3c>
    return ERR_ARG;
 8016544:	f06f 000f 	mvn.w	r0, #15
 8016548:	e7f3      	b.n	8016532 <http_find_error_file+0x4a>
 801654a:	bf00      	nop
 801654c:	0803fd70 	.word	0x0803fd70
 8016550:	0803fd94 	.word	0x0803fd94
 8016554:	0803fd64 	.word	0x0803fd64
 8016558:	0803fd7c 	.word	0x0803fd7c
 801655c:	0803fd58 	.word	0x0803fd58
 8016560:	0803fd88 	.word	0x0803fd88

08016564 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8016564:	b538      	push	{r3, r4, r5, lr}
 8016566:	4604      	mov	r4, r0
  if (hs != NULL) {
 8016568:	460d      	mov	r5, r1
 801656a:	b391      	cbz	r1, 80165d2 <http_close_or_abort_conn.constprop.0+0x6e>
    if ((hs->post_content_len_left != 0)
 801656c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 801656e:	bb0b      	cbnz	r3, 80165b4 <http_close_or_abort_conn.constprop.0+0x50>
  altcp_arg(pcb, NULL);
 8016570:	2100      	movs	r1, #0
 8016572:	4620      	mov	r0, r4
 8016574:	f003 fb16 	bl	8019ba4 <tcp_arg>
  altcp_recv(pcb, NULL);
 8016578:	2100      	movs	r1, #0
 801657a:	4620      	mov	r0, r4
 801657c:	f003 fb16 	bl	8019bac <tcp_recv>
  altcp_err(pcb, NULL);
 8016580:	2100      	movs	r1, #0
 8016582:	4620      	mov	r0, r4
 8016584:	f003 fb4a 	bl	8019c1c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8016588:	2200      	movs	r2, #0
 801658a:	4620      	mov	r0, r4
 801658c:	4611      	mov	r1, r2
 801658e:	f003 fb67 	bl	8019c60 <tcp_poll>
  altcp_sent(pcb, NULL);
 8016592:	2100      	movs	r1, #0
 8016594:	4620      	mov	r0, r4
 8016596:	f003 fb25 	bl	8019be4 <tcp_sent>
    http_state_eof(hs);
 801659a:	4628      	mov	r0, r5
 801659c:	f7ff fd28 	bl	8015ff0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80165a0:	4628      	mov	r0, r5
 80165a2:	f001 fdcb 	bl	801813c <mem_free>
  err = altcp_close(pcb);
 80165a6:	4620      	mov	r0, r4
 80165a8:	f004 f94e 	bl	801a848 <tcp_close>
  if (err != ERR_OK) {
 80165ac:	4605      	mov	r5, r0
 80165ae:	b948      	cbnz	r0, 80165c4 <http_close_or_abort_conn.constprop.0+0x60>
}
 80165b0:	4628      	mov	r0, r5
 80165b2:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 80165b4:	4911      	ldr	r1, [pc, #68]	; (80165fc <http_close_or_abort_conn.constprop.0+0x98>)
 80165b6:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80165b8:	223f      	movs	r2, #63	; 0x3f
 80165ba:	4628      	mov	r0, r5
      http_uri_buf[0] = 0;
 80165bc:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 80165be:	f7f0 fad9 	bl	8006b74 <httpd_post_finished>
 80165c2:	e7d5      	b.n	8016570 <http_close_or_abort_conn.constprop.0+0xc>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 80165c4:	4620      	mov	r0, r4
 80165c6:	2204      	movs	r2, #4
 80165c8:	490d      	ldr	r1, [pc, #52]	; (8016600 <http_close_or_abort_conn.constprop.0+0x9c>)
 80165ca:	f003 fb49 	bl	8019c60 <tcp_poll>
}
 80165ce:	4628      	mov	r0, r5
 80165d0:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 80165d2:	f003 fae7 	bl	8019ba4 <tcp_arg>
  altcp_recv(pcb, NULL);
 80165d6:	4629      	mov	r1, r5
 80165d8:	4620      	mov	r0, r4
 80165da:	f003 fae7 	bl	8019bac <tcp_recv>
  altcp_err(pcb, NULL);
 80165de:	4629      	mov	r1, r5
 80165e0:	4620      	mov	r0, r4
 80165e2:	f003 fb1b 	bl	8019c1c <tcp_err>
  altcp_poll(pcb, NULL, 0);
 80165e6:	4629      	mov	r1, r5
 80165e8:	4620      	mov	r0, r4
 80165ea:	462a      	mov	r2, r5
 80165ec:	f003 fb38 	bl	8019c60 <tcp_poll>
  altcp_sent(pcb, NULL);
 80165f0:	4629      	mov	r1, r5
 80165f2:	4620      	mov	r0, r4
 80165f4:	f003 faf6 	bl	8019be4 <tcp_sent>
  if (hs != NULL) {
 80165f8:	e7d5      	b.n	80165a6 <http_close_or_abort_conn.constprop.0+0x42>
 80165fa:	bf00      	nop
 80165fc:	2001a038 	.word	0x2001a038
 8016600:	08016c55 	.word	0x08016c55

08016604 <http_eof>:
{
 8016604:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8016606:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 801660a:	b193      	cbz	r3, 8016632 <http_eof+0x2e>
 801660c:	460c      	mov	r4, r1
 801660e:	4605      	mov	r5, r0
    http_state_eof(hs);
 8016610:	4608      	mov	r0, r1
 8016612:	f7ff fced 	bl	8015ff0 <http_state_eof>
  memset(hs, 0, sizeof(struct http_state));
 8016616:	2234      	movs	r2, #52	; 0x34
 8016618:	2100      	movs	r1, #0
 801661a:	4620      	mov	r0, r4
 801661c:	f00b fdf0 	bl	8022200 <memset>
    hs->keepalive = 1;
 8016620:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8016622:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 8016624:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 8016628:	8b6b      	ldrh	r3, [r5, #26]
 801662a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801662e:	836b      	strh	r3, [r5, #26]
}
 8016630:	bd38      	pop	{r3, r4, r5, pc}
 8016632:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 8016636:	f7ff bf95 	b.w	8016564 <http_close_or_abort_conn.constprop.0>
 801663a:	bf00      	nop

0801663c <http_send>:
{
 801663c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8016640:	460d      	mov	r5, r1
{
 8016642:	b087      	sub	sp, #28
  if (hs == NULL) {
 8016644:	2900      	cmp	r1, #0
 8016646:	f000 8157 	beq.w	80168f8 <http_send+0x2bc>
  if (hs->left == 0) {
 801664a:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801664c:	4681      	mov	r9, r0
 801664e:	2b00      	cmp	r3, #0
 8016650:	f000 8196 	beq.w	8016980 <http_send+0x344>
  if (hs->ssi) {
 8016654:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 8016656:	2c00      	cmp	r4, #0
 8016658:	f000 812b 	beq.w	80168b2 <http_send+0x276>
  if (ssi->parsed > hs->file) {
 801665c:	6826      	ldr	r6, [r4, #0]
 801665e:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 8016660:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 8016664:	428e      	cmp	r6, r1
  len = altcp_sndbuf(pcb);
 8016666:	f8ad 3016 	strh.w	r3, [sp, #22]
  if (ssi->parsed > hs->file) {
 801666a:	f200 80bb 	bhi.w	80167e4 <http_send+0x1a8>
  u8_t data_to_send = 0;
 801666e:	2600      	movs	r6, #0
  err_t err = ERR_OK;
 8016670:	46b2      	mov	sl, r6
 8016672:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 8016676:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801667a:	2a04      	cmp	r2, #4
 801667c:	d003      	beq.n	8016686 <http_send+0x4a>
 801667e:	68e1      	ldr	r1, [r4, #12]
 8016680:	2900      	cmp	r1, #0
 8016682:	f000 8089 	beq.w	8016798 <http_send+0x15c>
 8016686:	f1ba 0f00 	cmp.w	sl, #0
 801668a:	f040 8215 	bne.w	8016ab8 <http_send+0x47c>
    if (len == 0) {
 801668e:	2b00      	cmp	r3, #0
 8016690:	f000 8124 	beq.w	80168dc <http_send+0x2a0>
    switch (ssi->tag_state) {
 8016694:	2a04      	cmp	r2, #4
 8016696:	d8f0      	bhi.n	801667a <http_send+0x3e>
 8016698:	e8df f002 	tbb	[pc, r2]
 801669c:	253f6d5e 	.word	0x253f6d5e
 80166a0:	03          	.byte	0x03
 80166a1:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80166a2:	68a0      	ldr	r0, [r4, #8]
 80166a4:	69a9      	ldr	r1, [r5, #24]
 80166a6:	4288      	cmp	r0, r1
 80166a8:	f240 80e8 	bls.w	801687c <http_send+0x240>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 80166ac:	6862      	ldr	r2, [r4, #4]
 80166ae:	4291      	cmp	r1, r2
 80166b0:	f200 81e9 	bhi.w	8016a86 <http_send+0x44a>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 80166b4:	1a53      	subs	r3, r2, r1
 80166b6:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80166ba:	4283      	cmp	r3, r0
 80166bc:	f340 8121 	ble.w	8016902 <http_send+0x2c6>
 80166c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80166c4:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80166c8:	2300      	movs	r3, #0
 80166ca:	f10d 0216 	add.w	r2, sp, #22
 80166ce:	4648      	mov	r0, r9
 80166d0:	f7ff fc5a 	bl	8015f88 <http_write>
          if (err == ERR_OK) {
 80166d4:	2800      	cmp	r0, #0
 80166d6:	f000 81ea 	beq.w	8016aae <http_send+0x472>
 80166da:	4682      	mov	sl, r0
 80166dc:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80166e0:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 80166e4:	e7c9      	b.n	801667a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80166e6:	6821      	ldr	r1, [r4, #0]
 80166e8:	8a20      	ldrh	r0, [r4, #16]
 80166ea:	f891 e000 	ldrb.w	lr, [r1]
 80166ee:	2800      	cmp	r0, #0
 80166f0:	f040 8096 	bne.w	8016820 <http_send+0x1e4>
 80166f4:	f1ae 0709 	sub.w	r7, lr, #9
 80166f8:	b2ff      	uxtb	r7, r7
 80166fa:	2f17      	cmp	r7, #23
 80166fc:	f200 8090 	bhi.w	8016820 <http_send+0x1e4>
 8016700:	f8df c34c 	ldr.w	ip, [pc, #844]	; 8016a50 <http_send+0x414>
 8016704:	fa2c f707 	lsr.w	r7, ip, r7
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8016708:	07ff      	lsls	r7, r7, #31
 801670a:	f140 8089 	bpl.w	8016820 <http_send+0x1e4>
          ssi->parse_left--;
 801670e:	68e0      	ldr	r0, [r4, #12]
          ssi->parsed++;
 8016710:	3101      	adds	r1, #1
          ssi->parse_left--;
 8016712:	3801      	subs	r0, #1
          ssi->parsed++;
 8016714:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8016716:	60e0      	str	r0, [r4, #12]
          break;
 8016718:	e7af      	b.n	801667a <http_send+0x3e>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 801671a:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801671e:	f1bc 0f00 	cmp.w	ip, #0
 8016722:	f040 8092 	bne.w	801684a <http_send+0x20e>
 8016726:	6821      	ldr	r1, [r4, #0]
 8016728:	780f      	ldrb	r7, [r1, #0]
 801672a:	f1a7 0009 	sub.w	r0, r7, #9
 801672e:	b2c0      	uxtb	r0, r0
 8016730:	2817      	cmp	r0, #23
 8016732:	f240 811d 	bls.w	8016970 <http_send+0x334>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 8016736:	48bf      	ldr	r0, [pc, #764]	; (8016a34 <http_send+0x3f8>)
 8016738:	f894 e014 	ldrb.w	lr, [r4, #20]
 801673c:	eb00 00ce 	add.w	r0, r0, lr, lsl #3
 8016740:	6840      	ldr	r0, [r0, #4]
 8016742:	7800      	ldrb	r0, [r0, #0]
 8016744:	42b8      	cmp	r0, r7
 8016746:	d067      	beq.n	8016818 <http_send+0x1dc>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 8016748:	f10c 0001 	add.w	r0, ip, #1
 801674c:	44a4      	add	ip, r4
 801674e:	8220      	strh	r0, [r4, #16]
 8016750:	7808      	ldrb	r0, [r1, #0]
 8016752:	f88c 0016 	strb.w	r0, [ip, #22]
 8016756:	e7da      	b.n	801670e <http_send+0xd2>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 8016758:	6821      	ldr	r1, [r4, #0]
 801675a:	7808      	ldrb	r0, [r1, #0]
 801675c:	283c      	cmp	r0, #60	; 0x3c
 801675e:	d002      	beq.n	8016766 <http_send+0x12a>
 8016760:	282f      	cmp	r0, #47	; 0x2f
 8016762:	d1d4      	bne.n	801670e <http_send+0xd2>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 8016764:	2201      	movs	r2, #1
            ssi->tag_state = TAG_LEADIN;
 8016766:	2001      	movs	r0, #1
            ssi->tag_type = tag_type;
 8016768:	7522      	strb	r2, [r4, #20]
            ssi->tag_started = ssi->parsed;
 801676a:	6061      	str	r1, [r4, #4]
            break;
 801676c:	4602      	mov	r2, r0
            ssi->tag_state = TAG_LEADIN;
 801676e:	f884 011e 	strb.w	r0, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 8016772:	8220      	strh	r0, [r4, #16]
            break;
 8016774:	e7cb      	b.n	801670e <http_send+0xd2>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 8016776:	49af      	ldr	r1, [pc, #700]	; (8016a34 <http_send+0x3f8>)
 8016778:	7d20      	ldrb	r0, [r4, #20]
 801677a:	8a27      	ldrh	r7, [r4, #16]
 801677c:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 8016780:	5dc9      	ldrb	r1, [r1, r7]
 8016782:	2900      	cmp	r1, #0
 8016784:	f040 8086 	bne.w	8016894 <http_send+0x258>
          ssi->tag_state = TAG_FOUND;
 8016788:	2202      	movs	r2, #2
          ssi->tag_index = 0;
 801678a:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801678c:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 801678e:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8016792:	2900      	cmp	r1, #0
 8016794:	f47f af77 	bne.w	8016686 <http_send+0x4a>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8016798:	6824      	ldr	r4, [r4, #0]
 801679a:	69a9      	ldr	r1, [r5, #24]
 801679c:	428c      	cmp	r4, r1
 801679e:	f240 809d 	bls.w	80168dc <http_send+0x2a0>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167a2:	1a64      	subs	r4, r4, r1
 80167a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167a8:	2300      	movs	r3, #0
 80167aa:	4648      	mov	r0, r9
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167ac:	4294      	cmp	r4, r2
 80167ae:	bfa8      	it	ge
 80167b0:	4614      	movge	r4, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167b2:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167b6:	f8ad 4016 	strh.w	r4, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167ba:	f7ff fbe5 	bl	8015f88 <http_write>
    if (err == ERR_OK) {
 80167be:	2800      	cmp	r0, #0
 80167c0:	f040 808c 	bne.w	80168dc <http_send+0x2a0>
    hs->file += len;
 80167c4:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 80167c8:	2601      	movs	r6, #1
    hs->file += len;
 80167ca:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 80167cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 80167ce:	440a      	add	r2, r1
    hs->left -= len;
 80167d0:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 80167d2:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 80167d4:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80167d6:	2b00      	cmp	r3, #0
 80167d8:	f000 8084 	beq.w	80168e4 <http_send+0x2a8>
}
 80167dc:	4630      	mov	r0, r6
 80167de:	b007      	add	sp, #28
 80167e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167e4:	1a76      	subs	r6, r6, r1
 80167e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167ea:	2300      	movs	r3, #0
 80167ec:	4648      	mov	r0, r9
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167ee:	4296      	cmp	r6, r2
 80167f0:	bfa8      	it	ge
 80167f2:	4616      	movge	r6, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167f4:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 80167f8:	f8ad 6016 	strh.w	r6, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80167fc:	f7ff fbc4 	bl	8015f88 <http_write>
    if (err == ERR_OK) {
 8016800:	4682      	mov	sl, r0
 8016802:	2800      	cmp	r0, #0
 8016804:	f000 8149 	beq.w	8016a9a <http_send+0x45e>
  u8_t data_to_send = 0;
 8016808:	2600      	movs	r6, #0
    if (altcp_sndbuf(pcb) == 0) {
 801680a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801680e:	2b00      	cmp	r3, #0
 8016810:	d064      	beq.n	80168dc <http_send+0x2a0>
 8016812:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016816:	e72c      	b.n	8016672 <http_send+0x36>
            ssi->tag_state = TAG_NONE;
 8016818:	2200      	movs	r2, #0
 801681a:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 801681e:	e776      	b.n	801670e <http_send+0xd2>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 8016820:	f894 c014 	ldrb.w	ip, [r4, #20]
 8016824:	4f83      	ldr	r7, [pc, #524]	; (8016a34 <http_send+0x3f8>)
 8016826:	eb07 07cc 	add.w	r7, r7, ip, lsl #3
 801682a:	f8d7 c004 	ldr.w	ip, [r7, #4]
 801682e:	f81c 7000 	ldrb.w	r7, [ip, r0]
 8016832:	4577      	cmp	r7, lr
 8016834:	f000 80b3 	beq.w	801699e <http_send+0x362>
          ssi->parse_left--;
 8016838:	68e2      	ldr	r2, [r4, #12]
          ssi->parsed++;
 801683a:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 801683c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 8016840:	1e50      	subs	r0, r2, #1
          ssi->parsed++;
 8016842:	6021      	str	r1, [r4, #0]
          ssi->tag_state = TAG_NONE;
 8016844:	2200      	movs	r2, #0
          ssi->parse_left--;
 8016846:	60e0      	str	r0, [r4, #12]
          ssi->tag_state = TAG_NONE;
 8016848:	e719      	b.n	801667e <http_send+0x42>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801684a:	4f7a      	ldr	r7, [pc, #488]	; (8016a34 <http_send+0x3f8>)
 801684c:	f894 e014 	ldrb.w	lr, [r4, #20]
 8016850:	6821      	ldr	r1, [r4, #0]
 8016852:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
 8016856:	7808      	ldrb	r0, [r1, #0]
 8016858:	f8de e004 	ldr.w	lr, [lr, #4]
 801685c:	f89e 8000 	ldrb.w	r8, [lr]
 8016860:	4580      	cmp	r8, r0
 8016862:	d06b      	beq.n	801693c <http_send+0x300>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8016864:	3809      	subs	r0, #9
 8016866:	b2c0      	uxtb	r0, r0
 8016868:	2817      	cmp	r0, #23
 801686a:	d961      	bls.n	8016930 <http_send+0x2f4>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 801686c:	f1bc 0f07 	cmp.w	ip, #7
 8016870:	f67f af6a 	bls.w	8016748 <http_send+0x10c>
            ssi->tag_state = TAG_NONE;
 8016874:	2200      	movs	r2, #0
 8016876:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
        ssi->parse_left--;
 801687a:	e748      	b.n	801670e <http_send+0xd2>
          if (ssi->tag_index < ssi->tag_insert_len) {
 801687c:	8a27      	ldrh	r7, [r4, #16]
 801687e:	8a62      	ldrh	r2, [r4, #18]
 8016880:	4297      	cmp	r7, r2
 8016882:	f0c0 80e7 	bcc.w	8016a54 <http_send+0x418>
              ssi->parsed = ssi->tag_end;
 8016886:	2200      	movs	r2, #0
              ssi->tag_index = 0;
 8016888:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 801688c:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 8016890:	6020      	str	r0, [r4, #0]
 8016892:	e6f4      	b.n	801667e <http_send+0x42>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 8016894:	6820      	ldr	r0, [r4, #0]
 8016896:	f890 c000 	ldrb.w	ip, [r0]
 801689a:	458c      	cmp	ip, r1
 801689c:	f000 80c7 	beq.w	8016a2e <http_send+0x3f2>
            ssi->tag_state = TAG_NONE;
 80168a0:	2200      	movs	r2, #0
 80168a2:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80168a6:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 80168a8:	3001      	adds	r0, #1
          ssi->parse_left--;
 80168aa:	3901      	subs	r1, #1
          ssi->parsed++;
 80168ac:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 80168ae:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 80168b0:	e6e3      	b.n	801667a <http_send+0x3e>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80168b2:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 80168b6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80168ba:	6a6e      	ldr	r6, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80168bc:	4623      	mov	r3, r4
 80168be:	f10d 0216 	add.w	r2, sp, #22
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80168c2:	4286      	cmp	r6, r0
 80168c4:	bf88      	it	hi
 80168c6:	460e      	movhi	r6, r1
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80168c8:	69a9      	ldr	r1, [r5, #24]
 80168ca:	4648      	mov	r0, r9
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80168cc:	f8ad 6016 	strh.w	r6, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80168d0:	f7ff fb5a 	bl	8015f88 <http_write>
  if (err == ERR_OK) {
 80168d4:	2800      	cmp	r0, #0
 80168d6:	f43f af75 	beq.w	80167c4 <http_send+0x188>
  u8_t data_to_send = 0;
 80168da:	4626      	mov	r6, r4
 80168dc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 80168de:	2b00      	cmp	r3, #0
 80168e0:	f47f af7c 	bne.w	80167dc <http_send+0x1a0>
 80168e4:	6968      	ldr	r0, [r5, #20]
 80168e6:	f7ff fb4b 	bl	8015f80 <fs_bytes_left>
 80168ea:	2800      	cmp	r0, #0
 80168ec:	f73f af76 	bgt.w	80167dc <http_send+0x1a0>
    http_eof(pcb, hs);
 80168f0:	4629      	mov	r1, r5
 80168f2:	4648      	mov	r0, r9
 80168f4:	f7ff fe86 	bl	8016604 <http_eof>
      return 0;
 80168f8:	2600      	movs	r6, #0
}
 80168fa:	4630      	mov	r0, r6
 80168fc:	b007      	add	sp, #28
 80168fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016902:	b29b      	uxth	r3, r3
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8016904:	f8ad 3016 	strh.w	r3, [sp, #22]
          if (len != 0) {
 8016908:	2b00      	cmp	r3, #0
 801690a:	f47f aedd 	bne.w	80166c8 <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801690e:	4291      	cmp	r1, r2
 8016910:	d305      	bcc.n	801691e <http_send+0x2e2>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8016912:	68a0      	ldr	r0, [r4, #8]
 8016914:	1a82      	subs	r2, r0, r2
 8016916:	4413      	add	r3, r2
 8016918:	b29b      	uxth	r3, r3
 801691a:	f8ad 3016 	strh.w	r3, [sp, #22]
            hs->left -= len;
 801691e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            hs->file += len;
 8016920:	4419      	add	r1, r3
            data_to_send = 1;
 8016922:	2601      	movs	r6, #1
            hs->left -= len;
 8016924:	1ad2      	subs	r2, r2, r3
            hs->file += len;
 8016926:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8016928:	626a      	str	r2, [r5, #36]	; 0x24
 801692a:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 801692e:	e6a4      	b.n	801667a <http_send+0x3e>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8016930:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8016a50 <http_send+0x414>
 8016934:	fa28 f000 	lsr.w	r0, r8, r0
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 8016938:	07c0      	lsls	r0, r0, #31
 801693a:	d597      	bpl.n	801686c <http_send+0x230>
            ssi->tag_state = TAG_LEADOUT;
 801693c:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801693e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8016942:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8016946:	f200 80c2 	bhi.w	8016ace <http_send+0x492>
            ssi->tag_name[ssi->tag_index] = '\0';
 801694a:	eb04 030c 	add.w	r3, r4, ip
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801694e:	f884 c015 	strb.w	ip, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 8016952:	f883 b016 	strb.w	fp, [r3, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8016956:	f89e 3000 	ldrb.w	r3, [lr]
 801695a:	780a      	ldrb	r2, [r1, #0]
 801695c:	429a      	cmp	r2, r3
 801695e:	f000 80af 	beq.w	8016ac0 <http_send+0x484>
              ssi->tag_index = 0;
 8016962:	f8a4 b010 	strh.w	fp, [r4, #16]
 8016966:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 801696a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801696e:	e6ce      	b.n	801670e <http_send+0xd2>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8016970:	f8df e0dc 	ldr.w	lr, [pc, #220]	; 8016a50 <http_send+0x414>
 8016974:	fa2e f000 	lsr.w	r0, lr, r0
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 8016978:	07c0      	lsls	r0, r0, #31
 801697a:	f57f aedc 	bpl.w	8016736 <http_send+0xfa>
 801697e:	e6c6      	b.n	801670e <http_send+0xd2>
  if (hs->handle == NULL) {
 8016980:	6948      	ldr	r0, [r1, #20]
 8016982:	2800      	cmp	r0, #0
 8016984:	d0b4      	beq.n	80168f0 <http_send+0x2b4>
  bytes_left = fs_bytes_left(hs->handle);
 8016986:	f7ff fafb 	bl	8015f80 <fs_bytes_left>
  if (bytes_left <= 0) {
 801698a:	2800      	cmp	r0, #0
 801698c:	ddb0      	ble.n	80168f0 <http_send+0x2b4>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 801698e:	4b2a      	ldr	r3, [pc, #168]	; (8016a38 <http_send+0x3fc>)
 8016990:	f240 429d 	movw	r2, #1181	; 0x49d
 8016994:	4929      	ldr	r1, [pc, #164]	; (8016a3c <http_send+0x400>)
 8016996:	482a      	ldr	r0, [pc, #168]	; (8016a40 <http_send+0x404>)
 8016998:	f00c fba4 	bl	80230e4 <iprintf>
  return 1;
 801699c:	e65a      	b.n	8016654 <http_send+0x18>
          ssi->parse_left--;
 801699e:	68e7      	ldr	r7, [r4, #12]
          ssi->tag_index++;
 80169a0:	3001      	adds	r0, #1
          ssi->parsed++;
 80169a2:	3101      	adds	r1, #1
          ssi->tag_index++;
 80169a4:	b280      	uxth	r0, r0
          ssi->parse_left--;
 80169a6:	3f01      	subs	r7, #1
          ssi->parsed++;
 80169a8:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 80169aa:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 80169ac:	60e7      	str	r7, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 80169ae:	f81c 1000 	ldrb.w	r1, [ip, r0]
 80169b2:	2900      	cmp	r1, #0
 80169b4:	f47f ae61 	bne.w	801667a <http_send+0x3e>
  ssi = hs->ssi;
 80169b8:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 80169bc:	f1b8 0f00 	cmp.w	r8, #0
 80169c0:	f000 8116 	beq.w	8016bf0 <http_send+0x5b4>
  if (httpd_ssi_handler
 80169c4:	4b1f      	ldr	r3, [pc, #124]	; (8016a44 <http_send+0x408>)
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	9300      	str	r3, [sp, #0]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	f000 808f 	beq.w	8016aee <http_send+0x4b2>
      && httpd_tags && httpd_num_tags
 80169d0:	4b1d      	ldr	r3, [pc, #116]	; (8016a48 <http_send+0x40c>)
 80169d2:	681a      	ldr	r2, [r3, #0]
 80169d4:	2a00      	cmp	r2, #0
 80169d6:	f000 808a 	beq.w	8016aee <http_send+0x4b2>
 80169da:	4b1c      	ldr	r3, [pc, #112]	; (8016a4c <http_send+0x410>)
 80169dc:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80169de:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 80169e0:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 80169e2:	f340 8084 	ble.w	8016aee <http_send+0x4b2>
 80169e6:	f108 0716 	add.w	r7, r8, #22
 80169ea:	3a04      	subs	r2, #4
 80169ec:	2300      	movs	r3, #0
 80169ee:	9401      	str	r4, [sp, #4]
 80169f0:	9602      	str	r6, [sp, #8]
 80169f2:	463e      	mov	r6, r7
 80169f4:	9503      	str	r5, [sp, #12]
 80169f6:	461c      	mov	r4, r3
 80169f8:	4617      	mov	r7, r2
 80169fa:	460d      	mov	r5, r1
 80169fc:	e003      	b.n	8016a06 <http_send+0x3ca>
 80169fe:	3401      	adds	r4, #1
 8016a00:	42a5      	cmp	r5, r4
 8016a02:	f000 8106 	beq.w	8016c12 <http_send+0x5d6>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 8016a06:	f857 1f04 	ldr.w	r1, [r7, #4]!
 8016a0a:	4630      	mov	r0, r6
 8016a0c:	f7e9 fc18 	bl	8000240 <strcmp>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	d1f4      	bne.n	80169fe <http_send+0x3c2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8016a14:	4623      	mov	r3, r4
 8016a16:	22fe      	movs	r2, #254	; 0xfe
 8016a18:	f108 011f 	add.w	r1, r8, #31
 8016a1c:	9d03      	ldr	r5, [sp, #12]
 8016a1e:	4618      	mov	r0, r3
 8016a20:	9b00      	ldr	r3, [sp, #0]
 8016a22:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 8016a26:	4798      	blx	r3
 8016a28:	f8a8 0012 	strh.w	r0, [r8, #18]
          return;
 8016a2c:	e0a0      	b.n	8016b70 <http_send+0x534>
            ssi->tag_index++;
 8016a2e:	3701      	adds	r7, #1
 8016a30:	8227      	strh	r7, [r4, #16]
 8016a32:	e738      	b.n	80168a6 <http_send+0x26a>
 8016a34:	0803ffe0 	.word	0x0803ffe0
 8016a38:	0803fcc0 	.word	0x0803fcc0
 8016a3c:	0803fda0 	.word	0x0803fda0
 8016a40:	08029ba0 	.word	0x08029ba0
 8016a44:	2001a47c 	.word	0x2001a47c
 8016a48:	2001a480 	.word	0x2001a480
 8016a4c:	2001a078 	.word	0x2001a078
 8016a50:	00800013 	.word	0x00800013
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8016a54:	f107 011f 	add.w	r1, r7, #31
            len = (ssi->tag_insert_len - ssi->tag_index);
 8016a58:	1bd7      	subs	r7, r2, r7
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8016a5a:	2301      	movs	r3, #1
 8016a5c:	f10d 0216 	add.w	r2, sp, #22
 8016a60:	4421      	add	r1, r4
 8016a62:	4648      	mov	r0, r9
            len = (ssi->tag_insert_len - ssi->tag_index);
 8016a64:	f8ad 7016 	strh.w	r7, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 8016a68:	f7ff fa8e 	bl	8015f88 <http_write>
              ssi->tag_index += len;
 8016a6c:	f8bd 3016 	ldrh.w	r3, [sp, #22]
            if (err == ERR_OK) {
 8016a70:	4682      	mov	sl, r0
 8016a72:	2800      	cmp	r0, #0
 8016a74:	f47f ae34 	bne.w	80166e0 <http_send+0xa4>
              ssi->tag_index += len;
 8016a78:	8a21      	ldrh	r1, [r4, #16]
              data_to_send = 1;
 8016a7a:	2601      	movs	r6, #1
 8016a7c:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
              ssi->tag_index += len;
 8016a80:	4419      	add	r1, r3
 8016a82:	8221      	strh	r1, [r4, #16]
 8016a84:	e5f9      	b.n	801667a <http_send+0x3e>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8016a86:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8016a8a:	4964      	ldr	r1, [pc, #400]	; (8016c1c <http_send+0x5e0>)
 8016a8c:	4b64      	ldr	r3, [pc, #400]	; (8016c20 <http_send+0x5e4>)
 8016a8e:	4865      	ldr	r0, [pc, #404]	; (8016c24 <http_send+0x5e8>)
 8016a90:	f00c fb28 	bl	80230e4 <iprintf>
 8016a94:	6862      	ldr	r2, [r4, #4]
 8016a96:	69a9      	ldr	r1, [r5, #24]
 8016a98:	e60c      	b.n	80166b4 <http_send+0x78>
      hs->file += len;
 8016a9a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
      data_to_send = 1;
 8016a9e:	2601      	movs	r6, #1
      hs->file += len;
 8016aa0:	69aa      	ldr	r2, [r5, #24]
      hs->left -= len;
 8016aa2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
      hs->file += len;
 8016aa4:	440a      	add	r2, r1
      hs->left -= len;
 8016aa6:	1a5b      	subs	r3, r3, r1
      hs->file += len;
 8016aa8:	61aa      	str	r2, [r5, #24]
      hs->left -= len;
 8016aaa:	626b      	str	r3, [r5, #36]	; 0x24
 8016aac:	e6ad      	b.n	801680a <http_send+0x1ce>
 8016aae:	6862      	ldr	r2, [r4, #4]
 8016ab0:	69a9      	ldr	r1, [r5, #24]
 8016ab2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016ab6:	e72a      	b.n	801690e <http_send+0x2d2>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8016ab8:	2a04      	cmp	r2, #4
 8016aba:	f43f af0f 	beq.w	80168dc <http_send+0x2a0>
 8016abe:	e66b      	b.n	8016798 <http_send+0x15c>
              ssi->tag_index = 1;
 8016ac0:	2301      	movs	r3, #1
 8016ac2:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8016ac6:	8223      	strh	r3, [r4, #16]
 8016ac8:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016acc:	e61f      	b.n	801670e <http_send+0xd2>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8016ace:	4b54      	ldr	r3, [pc, #336]	; (8016c20 <http_send+0x5e4>)
 8016ad0:	f240 523a 	movw	r2, #1338	; 0x53a
 8016ad4:	4954      	ldr	r1, [pc, #336]	; (8016c28 <http_send+0x5ec>)
 8016ad6:	4853      	ldr	r0, [pc, #332]	; (8016c24 <http_send+0x5e8>)
 8016ad8:	f00c fb04 	bl	80230e4 <iprintf>
 8016adc:	7d23      	ldrb	r3, [r4, #20]
 8016ade:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 8016ae2:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
 8016ae6:	6821      	ldr	r1, [r4, #0]
 8016ae8:	f8d7 e004 	ldr.w	lr, [r7, #4]
 8016aec:	e72d      	b.n	801694a <http_send+0x30e>
 8016aee:	f108 0716 	add.w	r7, r8, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8016af2:	4638      	mov	r0, r7
 8016af4:	f7e9 fbae 	bl	8000254 <strlen>
 8016af8:	28e4      	cmp	r0, #228	; 0xe4
 8016afa:	d869      	bhi.n	8016bd0 <http_send+0x594>
 8016afc:	2809      	cmp	r0, #9
 8016afe:	bf28      	it	cs
 8016b00:	2009      	movcs	r0, #9
 8016b02:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8016b06:	4686      	mov	lr, r0
 8016b08:	9300      	str	r3, [sp, #0]
 8016b0a:	f100 0319 	add.w	r3, r0, #25
 8016b0e:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8016b10:	f8df c124 	ldr.w	ip, [pc, #292]	; 8016c38 <http_send+0x5fc>
 8016b14:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8016b18:	f8bc c000 	ldrh.w	ip, [ip]
 8016b1c:	f8c8 001f 	str.w	r0, [r8, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8016b20:	f108 0031 	add.w	r0, r8, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8016b24:	f8a8 c02f 	strh.w	ip, [r8, #47]	; 0x2f
 8016b28:	f8c8 1023 	str.w	r1, [r8, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8016b2c:	4639      	mov	r1, r7
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8016b2e:	f8c8 2027 	str.w	r2, [r8, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8016b32:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 8016b34:	f8c8 302b 	str.w	r3, [r8, #43]	; 0x2b
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 8016b38:	f00b fb3a 	bl	80221b0 <memcpy>
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8016b3c:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8016b3e:	4b3b      	ldr	r3, [pc, #236]	; (8016c2c <http_send+0x5f0>)
 8016b40:	9900      	ldr	r1, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8016b42:	4442      	add	r2, r8
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8016b44:	6818      	ldr	r0, [r3, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8016b46:	4694      	mov	ip, r2
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8016b48:	889f      	ldrh	r7, [r3, #4]
 8016b4a:	eb08 0201 	add.w	r2, r8, r1
 8016b4e:	799b      	ldrb	r3, [r3, #6]
 8016b50:	f848 0001 	str.w	r0, [r8, r1]
  len = strlen(ssi->tag_insert);
 8016b54:	f108 001f 	add.w	r0, r8, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 8016b58:	8097      	strh	r7, [r2, #4]
 8016b5a:	7193      	strb	r3, [r2, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8016b5c:	f88c b01f 	strb.w	fp, [ip, #31]
  len = strlen(ssi->tag_insert);
 8016b60:	f7e9 fb78 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8016b64:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 8016b68:	4607      	mov	r7, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8016b6a:	d239      	bcs.n	8016be0 <http_send+0x5a4>
  ssi->tag_insert_len = (u16_t)len;
 8016b6c:	f8a8 7012 	strh.w	r7, [r8, #18]
            ssi->tag_state = TAG_SENDING;
 8016b70:	2204      	movs	r2, #4
            ssi->parsed = ssi->tag_started;
 8016b72:	e9d4 3700 	ldrd	r3, r7, [r4]
            ssi->tag_state = TAG_SENDING;
 8016b76:	f884 211e 	strb.w	r2, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 8016b7a:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 8016b7c:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8016b80:	428b      	cmp	r3, r1
            ssi->tag_end = ssi->parsed;
 8016b82:	60a3      	str	r3, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8016b84:	6027      	str	r7, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8016b86:	d802      	bhi.n	8016b8e <http_send+0x552>
 8016b88:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8016b8c:	e57b      	b.n	8016686 <http_send+0x4a>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8016b8e:	1a7f      	subs	r7, r7, r1
 8016b90:	f64f 72ff 	movw	r2, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8016b94:	2300      	movs	r3, #0
 8016b96:	4648      	mov	r0, r9
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8016b98:	4297      	cmp	r7, r2
 8016b9a:	bfa8      	it	ge
 8016b9c:	4617      	movge	r7, r2
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8016b9e:	f10d 0216 	add.w	r2, sp, #22
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8016ba2:	f8ad 7016 	strh.w	r7, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8016ba6:	f7ff f9ef 	bl	8015f88 <http_write>
              if (err == ERR_OK) {
 8016baa:	4682      	mov	sl, r0
 8016bac:	2800      	cmp	r0, #0
 8016bae:	f47f ad95 	bne.w	80166dc <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8016bb2:	6861      	ldr	r1, [r4, #4]
 8016bb4:	69aa      	ldr	r2, [r5, #24]
 8016bb6:	4291      	cmp	r1, r2
 8016bb8:	d922      	bls.n	8016c00 <http_send+0x5c4>
 8016bba:	f8bd 3016 	ldrh.w	r3, [sp, #22]
                hs->left -= len;
 8016bbe:	6a69      	ldr	r1, [r5, #36]	; 0x24
                hs->file += len;
 8016bc0:	441a      	add	r2, r3
                data_to_send = 1;
 8016bc2:	2601      	movs	r6, #1
                hs->left -= len;
 8016bc4:	1ac9      	subs	r1, r1, r3
                hs->file += len;
 8016bc6:	61aa      	str	r2, [r5, #24]
                hs->left -= len;
 8016bc8:	6269      	str	r1, [r5, #36]	; 0x24
 8016bca:	f894 211e 	ldrb.w	r2, [r4, #286]	; 0x11e
 8016bce:	e554      	b.n	801667a <http_send+0x3e>
 8016bd0:	233a      	movs	r3, #58	; 0x3a
 8016bd2:	f04f 0c22 	mov.w	ip, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8016bd6:	f04f 0e09 	mov.w	lr, #9
 8016bda:	e9cd 3c00 	strd	r3, ip, [sp]
 8016bde:	e797      	b.n	8016b10 <http_send+0x4d4>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8016be0:	4b0f      	ldr	r3, [pc, #60]	; (8016c20 <http_send+0x5e4>)
 8016be2:	f240 323f 	movw	r2, #831	; 0x33f
 8016be6:	4912      	ldr	r1, [pc, #72]	; (8016c30 <http_send+0x5f4>)
 8016be8:	480e      	ldr	r0, [pc, #56]	; (8016c24 <http_send+0x5e8>)
 8016bea:	f00c fa7b 	bl	80230e4 <iprintf>
 8016bee:	e7bd      	b.n	8016b6c <http_send+0x530>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8016bf0:	4b0b      	ldr	r3, [pc, #44]	; (8016c20 <http_send+0x5e4>)
 8016bf2:	f240 3206 	movw	r2, #774	; 0x306
 8016bf6:	490f      	ldr	r1, [pc, #60]	; (8016c34 <http_send+0x5f8>)
 8016bf8:	480a      	ldr	r0, [pc, #40]	; (8016c24 <http_send+0x5e8>)
 8016bfa:	f00c fa73 	bl	80230e4 <iprintf>
 8016bfe:	e6e1      	b.n	80169c4 <http_send+0x388>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8016c00:	68a3      	ldr	r3, [r4, #8]
 8016c02:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 8016c06:	1a5b      	subs	r3, r3, r1
 8016c08:	4403      	add	r3, r0
 8016c0a:	b29b      	uxth	r3, r3
 8016c0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8016c10:	e7d5      	b.n	8016bbe <http_send+0x582>
 8016c12:	4637      	mov	r7, r6
 8016c14:	9c01      	ldr	r4, [sp, #4]
 8016c16:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 8016c1a:	e76a      	b.n	8016af2 <http_send+0x4b6>
 8016c1c:	0803fe28 	.word	0x0803fe28
 8016c20:	0803fcc0 	.word	0x0803fcc0
 8016c24:	08029ba0 	.word	0x08029ba0
 8016c28:	0803fdd8 	.word	0x0803fdd8
 8016c2c:	0803fe10 	.word	0x0803fe10
 8016c30:	0803fe18 	.word	0x0803fe18
 8016c34:	0803fdf0 	.word	0x0803fdf0
 8016c38:	0803fdfc 	.word	0x0803fdfc

08016c3c <http_sent>:
{
 8016c3c:	b508      	push	{r3, lr}
  if (hs == NULL) {
 8016c3e:	4603      	mov	r3, r0
 8016c40:	b130      	cbz	r0, 8016c50 <http_sent+0x14>
  hs->retries = 0;
 8016c42:	2200      	movs	r2, #0
 8016c44:	4608      	mov	r0, r1
  http_send(pcb, hs);
 8016c46:	4619      	mov	r1, r3
  hs->retries = 0;
 8016c48:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 8016c4c:	f7ff fcf6 	bl	801663c <http_send>
}
 8016c50:	2000      	movs	r0, #0
 8016c52:	bd08      	pop	{r3, pc}

08016c54 <http_poll>:
{
 8016c54:	b510      	push	{r4, lr}
 8016c56:	460c      	mov	r4, r1
  if (hs == NULL) {
 8016c58:	b1a8      	cbz	r0, 8016c86 <http_poll+0x32>
    hs->retries++;
 8016c5a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8016c5e:	3301      	adds	r3, #1
 8016c60:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8016c62:	2b04      	cmp	r3, #4
    hs->retries++;
 8016c64:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 8016c68:	d019      	beq.n	8016c9e <http_poll+0x4a>
    if (hs->handle) {
 8016c6a:	6943      	ldr	r3, [r0, #20]
 8016c6c:	b123      	cbz	r3, 8016c78 <http_poll+0x24>
      if (http_send(pcb, hs)) {
 8016c6e:	4601      	mov	r1, r0
 8016c70:	4620      	mov	r0, r4
 8016c72:	f7ff fce3 	bl	801663c <http_send>
 8016c76:	b908      	cbnz	r0, 8016c7c <http_poll+0x28>
  return ERR_OK;
 8016c78:	2000      	movs	r0, #0
}
 8016c7a:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 8016c7c:	4620      	mov	r0, r4
 8016c7e:	f006 fca1 	bl	801d5c4 <tcp_output>
  return ERR_OK;
 8016c82:	2000      	movs	r0, #0
 8016c84:	e7f9      	b.n	8016c7a <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 8016c86:	4601      	mov	r1, r0
 8016c88:	4620      	mov	r0, r4
 8016c8a:	f7ff fc6b 	bl	8016564 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8016c8e:	3001      	adds	r0, #1
 8016c90:	d1f2      	bne.n	8016c78 <http_poll+0x24>
      altcp_abort(pcb);
 8016c92:	4620      	mov	r0, r4
 8016c94:	f003 fbd2 	bl	801a43c <tcp_abort>
      return ERR_ABRT;
 8016c98:	f06f 000c 	mvn.w	r0, #12
}
 8016c9c:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8016c9e:	4601      	mov	r1, r0
 8016ca0:	4620      	mov	r0, r4
 8016ca2:	f7ff fc5f 	bl	8016564 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 8016ca6:	2000      	movs	r0, #0
}
 8016ca8:	bd10      	pop	{r4, pc}
 8016caa:	bf00      	nop

08016cac <http_recv>:
{
 8016cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	4605      	mov	r5, r0
 8016cb2:	b08d      	sub	sp, #52	; 0x34
 8016cb4:	460e      	mov	r6, r1
 8016cb6:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 8016cb8:	b9ab      	cbnz	r3, 8016ce6 <http_recv+0x3a>
 8016cba:	fab2 f782 	clz	r7, r2
 8016cbe:	097f      	lsrs	r7, r7, #5
 8016cc0:	b1ca      	cbz	r2, 8016cf6 <http_recv+0x4a>
 8016cc2:	b188      	cbz	r0, 8016ce8 <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8016cc4:	8911      	ldrh	r1, [r2, #8]
 8016cc6:	4630      	mov	r0, r6
 8016cc8:	f002 fee2 	bl	8019a90 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8016ccc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016cce:	2b00      	cmp	r3, #0
 8016cd0:	f040 8140 	bne.w	8016f54 <http_recv+0x2a8>
    if (hs->handle == NULL) {
 8016cd4:	696b      	ldr	r3, [r5, #20]
 8016cd6:	b1b3      	cbz	r3, 8016d06 <http_recv+0x5a>
      pbuf_free(p);
 8016cd8:	4620      	mov	r0, r4
 8016cda:	f002 f8eb 	bl	8018eb4 <pbuf_free>
}
 8016cde:	2000      	movs	r0, #0
 8016ce0:	b00d      	add	sp, #52	; 0x34
 8016ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 8016ce6:	b132      	cbz	r2, 8016cf6 <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 8016ce8:	4630      	mov	r0, r6
 8016cea:	8921      	ldrh	r1, [r4, #8]
 8016cec:	f002 fed0 	bl	8019a90 <tcp_recved>
      pbuf_free(p);
 8016cf0:	4620      	mov	r0, r4
 8016cf2:	f002 f8df 	bl	8018eb4 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 8016cf6:	4629      	mov	r1, r5
 8016cf8:	4630      	mov	r0, r6
 8016cfa:	f7ff fc33 	bl	8016564 <http_close_or_abort_conn.constprop.0>
}
 8016cfe:	2000      	movs	r0, #0
 8016d00:	b00d      	add	sp, #52	; 0x34
 8016d02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8016d06:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 8016d08:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	f040 8179 	bne.w	8017002 <http_recv+0x356>
  if (hs->req == NULL) {
 8016d10:	2800      	cmp	r0, #0
 8016d12:	f000 813a 	beq.w	8016f8a <http_recv+0x2de>
    pbuf_cat(hs->req, p);
 8016d16:	4621      	mov	r1, r4
 8016d18:	f002 fa4e 	bl	80191b8 <pbuf_cat>
  pbuf_ref(p);
 8016d1c:	4620      	mov	r0, r4
 8016d1e:	f002 fa37 	bl	8019190 <pbuf_ref>
  if (hs->req->next != NULL) {
 8016d22:	6a28      	ldr	r0, [r5, #32]
 8016d24:	6803      	ldr	r3, [r0, #0]
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	f000 8131 	beq.w	8016f8e <http_recv+0x2e2>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8016d2c:	8907      	ldrh	r7, [r0, #8]
 8016d2e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8016d32:	49bf      	ldr	r1, [pc, #764]	; (8017030 <http_recv+0x384>)
 8016d34:	2300      	movs	r3, #0
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8016d36:	4297      	cmp	r7, r2
    data = httpd_req_buf;
 8016d38:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 8016d3a:	bf28      	it	cs
 8016d3c:	4617      	movcs	r7, r2
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 8016d3e:	463a      	mov	r2, r7
 8016d40:	f002 fb50 	bl	80193e4 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 8016d44:	2f06      	cmp	r7, #6
 8016d46:	f240 80f3 	bls.w	8016f30 <http_recv+0x284>
    crlf = lwip_strnstr(data, CRLF, data_len);
 8016d4a:	463a      	mov	r2, r7
 8016d4c:	49b9      	ldr	r1, [pc, #740]	; (8017034 <http_recv+0x388>)
 8016d4e:	4640      	mov	r0, r8
 8016d50:	f000 fa62 	bl	8017218 <lwip_strnstr>
    if (crlf != NULL) {
 8016d54:	2800      	cmp	r0, #0
 8016d56:	f000 80eb 	beq.w	8016f30 <http_recv+0x284>
      if (!strncmp(data, "GET ", 4)) {
 8016d5a:	2204      	movs	r2, #4
 8016d5c:	49b6      	ldr	r1, [pc, #728]	; (8017038 <http_recv+0x38c>)
 8016d5e:	4640      	mov	r0, r8
 8016d60:	f00d f944 	bl	8023fec <strncmp>
 8016d64:	4682      	mov	sl, r0
 8016d66:	2800      	cmp	r0, #0
 8016d68:	f040 811c 	bne.w	8016fa4 <http_recv+0x2f8>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8016d6c:	1f3a      	subs	r2, r7, #4
 8016d6e:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 8016d72:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016d76:	49b1      	ldr	r1, [pc, #708]	; (801703c <http_recv+0x390>)
 8016d78:	b292      	uxth	r2, r2
 8016d7a:	4658      	mov	r0, fp
        sp1 = data + 3;
 8016d7c:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016d7e:	9205      	str	r2, [sp, #20]
 8016d80:	f000 fa4a 	bl	8017218 <lwip_strnstr>
      if (sp2 == NULL) {
 8016d84:	9a05      	ldr	r2, [sp, #20]
 8016d86:	4681      	mov	r9, r0
 8016d88:	2800      	cmp	r0, #0
 8016d8a:	f000 8127 	beq.w	8016fdc <http_recv+0x330>
      int is_09 = 0;
 8016d8e:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8016d90:	9305      	str	r3, [sp, #20]
 8016d92:	f1b9 0f00 	cmp.w	r9, #0
 8016d96:	f000 80cb 	beq.w	8016f30 <http_recv+0x284>
 8016d9a:	9b04      	ldr	r3, [sp, #16]
 8016d9c:	4599      	cmp	r9, r3
 8016d9e:	f240 80c7 	bls.w	8016f30 <http_recv+0x284>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8016da2:	463a      	mov	r2, r7
 8016da4:	49a6      	ldr	r1, [pc, #664]	; (8017040 <http_recv+0x394>)
 8016da6:	4640      	mov	r0, r8
 8016da8:	f000 fa36 	bl	8017218 <lwip_strnstr>
 8016dac:	2800      	cmp	r0, #0
 8016dae:	f000 80bf 	beq.w	8016f30 <http_recv+0x284>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8016db2:	9b05      	ldr	r3, [sp, #20]
 8016db4:	2b00      	cmp	r3, #0
 8016db6:	f000 8131 	beq.w	801701c <http_recv+0x370>
            hs->keepalive = 0;
 8016dba:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8016dbc:	eba9 020b 	sub.w	r2, r9, fp
 8016dc0:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8016dc4:	2100      	movs	r1, #0
 8016dc6:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 8016dc8:	b292      	uxth	r2, r2
          *sp1 = 0;
 8016dca:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8016dcc:	eb0b 0002 	add.w	r0, fp, r2
 8016dd0:	f80b 1002 	strb.w	r1, [fp, r2]
 8016dd4:	9006      	str	r0, [sp, #24]
          if (is_post) {
 8016dd6:	f1ba 0f00 	cmp.w	sl, #0
 8016dda:	f000 8118 	beq.w	801700e <http_recv+0x362>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8016dde:	f109 0301 	add.w	r3, r9, #1
 8016de2:	4997      	ldr	r1, [pc, #604]	; (8017040 <http_recv+0x394>)
            struct pbuf *q = hs->req;
 8016de4:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8016de8:	eba3 0208 	sub.w	r2, r3, r8
 8016dec:	4618      	mov	r0, r3
 8016dee:	9305      	str	r3, [sp, #20]
 8016df0:	1aba      	subs	r2, r7, r2
 8016df2:	f000 fa11 	bl	8017218 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8016df6:	9007      	str	r0, [sp, #28]
 8016df8:	2800      	cmp	r0, #0
 8016dfa:	f000 816d 	beq.w	80170d8 <http_recv+0x42c>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8016dfe:	9b05      	ldr	r3, [sp, #20]
 8016e00:	4990      	ldr	r1, [pc, #576]	; (8017044 <http_recv+0x398>)
 8016e02:	1ac2      	subs	r2, r0, r3
 8016e04:	4618      	mov	r0, r3
 8016e06:	f000 fa07 	bl	8017218 <lwip_strnstr>
    if (scontent_len != NULL) {
 8016e0a:	9008      	str	r0, [sp, #32]
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	f000 8135 	beq.w	801707c <http_recv+0x3d0>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8016e12:	f100 0310 	add.w	r3, r0, #16
 8016e16:	220a      	movs	r2, #10
 8016e18:	4986      	ldr	r1, [pc, #536]	; (8017034 <http_recv+0x388>)
 8016e1a:	4618      	mov	r0, r3
 8016e1c:	9309      	str	r3, [sp, #36]	; 0x24
 8016e1e:	f000 f9fb 	bl	8017218 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8016e22:	2800      	cmp	r0, #0
 8016e24:	f000 812a 	beq.w	801707c <http_recv+0x3d0>
        content_len = atoi(content_len_num);
 8016e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016e2a:	4618      	mov	r0, r3
 8016e2c:	f00b f85e 	bl	8021eec <atoi>
        if (content_len == 0) {
 8016e30:	1e01      	subs	r1, r0, #0
 8016e32:	9109      	str	r1, [sp, #36]	; 0x24
 8016e34:	f040 8120 	bne.w	8017078 <http_recv+0x3cc>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 8016e38:	9b08      	ldr	r3, [sp, #32]
 8016e3a:	7c1b      	ldrb	r3, [r3, #16]
 8016e3c:	2b30      	cmp	r3, #48	; 0x30
 8016e3e:	f040 811d 	bne.w	801707c <http_recv+0x3d0>
 8016e42:	9b08      	ldr	r3, [sp, #32]
 8016e44:	7c5b      	ldrb	r3, [r3, #17]
 8016e46:	2b0d      	cmp	r3, #13
 8016e48:	f040 8118 	bne.w	801707c <http_recv+0x3d0>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016e4c:	9b07      	ldr	r3, [sp, #28]
          u8_t post_auto_wnd = 1;
 8016e4e:	f04f 0c01 	mov.w	ip, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8016e52:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016e54:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016e58:	3304      	adds	r3, #4
          u8_t post_auto_wnd = 1;
 8016e5a:	f88d c02f 	strb.w	ip, [sp, #47]	; 0x2f
          http_uri_buf[0] = 0;
 8016e5e:	f04f 0c00 	mov.w	ip, #0
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016e62:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016e64:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8016e68:	1a9b      	subs	r3, r3, r2
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016e6a:	f04f 0b3f 	mov.w	fp, #63	; 0x3f
 8016e6e:	9a05      	ldr	r2, [sp, #20]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 8016e70:	4547      	cmp	r7, r8
 8016e72:	bfb4      	ite	lt
 8016e74:	46b8      	movlt	r8, r7
 8016e76:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 8016e7a:	429f      	cmp	r7, r3
 8016e7c:	bfa8      	it	ge
 8016e7e:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016e80:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 8016e82:	4f71      	ldr	r7, [pc, #452]	; (8017048 <http_recv+0x39c>)
 8016e84:	f887 c000 	strb.w	ip, [r7]
          *crlfcrlf = 0;
 8016e88:	9f07      	ldr	r7, [sp, #28]
 8016e8a:	f887 c000 	strb.w	ip, [r7]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 8016e8e:	4f6e      	ldr	r7, [pc, #440]	; (8017048 <http_recv+0x39c>)
 8016e90:	9003      	str	r0, [sp, #12]
 8016e92:	4628      	mov	r0, r5
 8016e94:	9701      	str	r7, [sp, #4]
 8016e96:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8016e98:	f8cd b008 	str.w	fp, [sp, #8]
 8016e9c:	9700      	str	r7, [sp, #0]
 8016e9e:	f7ef fe61 	bl	8006b64 <httpd_post_begin>
          if (err == ERR_OK) {
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	f040 80f8 	bne.w	8017098 <http_recv+0x3ec>
            hs->post_content_len_left = (u32_t)content_len;
 8016ea8:	632f      	str	r7, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8016eaa:	f1ba 0f00 	cmp.w	sl, #0
 8016eae:	f000 80d7 	beq.w	8017060 <http_recv+0x3b4>
 8016eb2:	4652      	mov	r2, sl
 8016eb4:	e005      	b.n	8016ec2 <http_recv+0x216>
              q = q->next;
 8016eb6:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8016eb8:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8016ebc:	2a00      	cmp	r2, #0
 8016ebe:	f000 80cf 	beq.w	8017060 <http_recv+0x3b4>
 8016ec2:	8953      	ldrh	r3, [r2, #10]
 8016ec4:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8016ec6:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8016eca:	d9f4      	bls.n	8016eb6 <http_recv+0x20a>
 8016ecc:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 8016ece:	4641      	mov	r1, r8
 8016ed0:	4610      	mov	r0, r2
 8016ed2:	f001 ffb3 	bl	8018e3c <pbuf_remove_header>
              pbuf_ref(q);
 8016ed6:	4650      	mov	r0, sl
 8016ed8:	f002 f95a 	bl	8019190 <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8016edc:	4651      	mov	r1, sl
 8016ede:	4628      	mov	r0, r5
 8016ee0:	f7ff fadc 	bl	801649c <http_post_rxpbuf>
 8016ee4:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8016ee6:	2f00      	cmp	r7, #0
 8016ee8:	f000 80bc 	beq.w	8017064 <http_recv+0x3b8>
              *sp1 = ' ';
 8016eec:	2320      	movs	r3, #32
 8016eee:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 8016ef0:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8016ef4:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8016ef6:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8016ef8:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8016efc:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8016efe:	d022      	beq.n	8016f46 <http_recv+0x29a>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8016f00:	2f00      	cmp	r7, #0
 8016f02:	d048      	beq.n	8016f96 <http_recv+0x2ea>
 8016f04:	1d7a      	adds	r2, r7, #5
 8016f06:	f43f aee7 	beq.w	8016cd8 <http_recv+0x2c>
 8016f0a:	f027 0308 	bic.w	r3, r7, #8
 8016f0e:	b25b      	sxtb	r3, r3
 8016f10:	3310      	adds	r3, #16
 8016f12:	d12e      	bne.n	8016f72 <http_recv+0x2c6>
        if (hs->req != NULL) {
 8016f14:	6a28      	ldr	r0, [r5, #32]
 8016f16:	b3a0      	cbz	r0, 8016f82 <http_recv+0x2d6>
          pbuf_free(hs->req);
 8016f18:	f001 ffcc 	bl	8018eb4 <pbuf_free>
          hs->req = NULL;
 8016f1c:	2300      	movs	r3, #0
 8016f1e:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8016f20:	4620      	mov	r0, r4
 8016f22:	f001 ffc7 	bl	8018eb4 <pbuf_free>
      if (parsed == ERR_OK) {
 8016f26:	b1df      	cbz	r7, 8016f60 <http_recv+0x2b4>
      } else if (parsed == ERR_ARG) {
 8016f28:	3710      	adds	r7, #16
 8016f2a:	f43f aee4 	beq.w	8016cf6 <http_recv+0x4a>
 8016f2e:	e6e6      	b.n	8016cfe <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 8016f30:	6a28      	ldr	r0, [r5, #32]
 8016f32:	f002 f923 	bl	801917c <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 8016f36:	6a2b      	ldr	r3, [r5, #32]
 8016f38:	891b      	ldrh	r3, [r3, #8]
 8016f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8016f3e:	d202      	bcs.n	8016f46 <http_recv+0x29a>
 8016f40:	2805      	cmp	r0, #5
 8016f42:	f67f aec9 	bls.w	8016cd8 <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 8016f46:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8016f4a:	4628      	mov	r0, r5
 8016f4c:	f7ff facc 	bl	80164e8 <http_find_error_file>
 8016f50:	4607      	mov	r7, r0
 8016f52:	e7d5      	b.n	8016f00 <http_recv+0x254>
    http_post_rxpbuf(hs, p);
 8016f54:	4621      	mov	r1, r4
 8016f56:	4628      	mov	r0, r5
    hs->retries = 0;
 8016f58:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 8016f5c:	f7ff fa9e 	bl	801649c <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 8016f60:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	f47f aecb 	bne.w	8016cfe <http_recv+0x52>
      http_send(pcb, hs);
 8016f68:	4629      	mov	r1, r5
 8016f6a:	4630      	mov	r0, r6
 8016f6c:	f7ff fb66 	bl	801663c <http_send>
 8016f70:	e6c5      	b.n	8016cfe <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 8016f72:	4b36      	ldr	r3, [pc, #216]	; (801704c <http_recv+0x3a0>)
 8016f74:	f640 2204 	movw	r2, #2564	; 0xa04
 8016f78:	4935      	ldr	r1, [pc, #212]	; (8017050 <http_recv+0x3a4>)
 8016f7a:	4836      	ldr	r0, [pc, #216]	; (8017054 <http_recv+0x3a8>)
 8016f7c:	f00c f8b2 	bl	80230e4 <iprintf>
 8016f80:	e7c8      	b.n	8016f14 <http_recv+0x268>
      pbuf_free(p);
 8016f82:	4620      	mov	r0, r4
 8016f84:	f001 ff96 	bl	8018eb4 <pbuf_free>
      if (parsed == ERR_OK) {
 8016f88:	e7ce      	b.n	8016f28 <http_recv+0x27c>
    hs->req = p;
 8016f8a:	622c      	str	r4, [r5, #32]
 8016f8c:	e6c6      	b.n	8016d1c <http_recv+0x70>
    data = (char *)p->payload;
 8016f8e:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 8016f92:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8016f94:	e6d6      	b.n	8016d44 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8016f96:	1d7b      	adds	r3, r7, #5
 8016f98:	f43f ae9e 	beq.w	8016cd8 <http_recv+0x2c>
        if (hs->req != NULL) {
 8016f9c:	6a28      	ldr	r0, [r5, #32]
 8016f9e:	2800      	cmp	r0, #0
 8016fa0:	d0be      	beq.n	8016f20 <http_recv+0x274>
 8016fa2:	e7b9      	b.n	8016f18 <http_recv+0x26c>
      } else if (!strncmp(data, "POST ", 5)) {
 8016fa4:	2205      	movs	r2, #5
 8016fa6:	492c      	ldr	r1, [pc, #176]	; (8017058 <http_recv+0x3ac>)
 8016fa8:	4640      	mov	r0, r8
 8016faa:	f00d f81f 	bl	8023fec <strncmp>
 8016fae:	9005      	str	r0, [sp, #20]
 8016fb0:	b9e8      	cbnz	r0, 8016fee <http_recv+0x342>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8016fb2:	f1a7 0a05 	sub.w	sl, r7, #5
 8016fb6:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8016fba:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016fbe:	491f      	ldr	r1, [pc, #124]	; (801703c <http_recv+0x390>)
 8016fc0:	fa1f fa8a 	uxth.w	sl, sl
 8016fc4:	4658      	mov	r0, fp
        sp1 = data + 4;
 8016fc6:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8016fc8:	4652      	mov	r2, sl
 8016fca:	f000 f925 	bl	8017218 <lwip_strnstr>
      if (sp2 == NULL) {
 8016fce:	4681      	mov	r9, r0
 8016fd0:	2800      	cmp	r0, #0
 8016fd2:	d05b      	beq.n	801708c <http_recv+0x3e0>
        is_post = 1;
 8016fd4:	f04f 0a01 	mov.w	sl, #1
 8016fd8:	9b05      	ldr	r3, [sp, #20]
 8016fda:	e6d9      	b.n	8016d90 <http_recv+0xe4>
        is_09 = 1;
 8016fdc:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8016fde:	4915      	ldr	r1, [pc, #84]	; (8017034 <http_recv+0x388>)
 8016fe0:	4658      	mov	r0, fp
        is_09 = 1;
 8016fe2:	9305      	str	r3, [sp, #20]
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8016fe4:	f000 f918 	bl	8017218 <lwip_strnstr>
 8016fe8:	9b05      	ldr	r3, [sp, #20]
 8016fea:	4681      	mov	r9, r0
        if (is_post) {
 8016fec:	e6d0      	b.n	8016d90 <http_recv+0xe4>
        data[4] = 0;
 8016fee:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8016ff0:	f240 11f5 	movw	r1, #501	; 0x1f5
 8016ff4:	4628      	mov	r0, r5
        data[4] = 0;
 8016ff6:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8016ffa:	f7ff fa75 	bl	80164e8 <http_find_error_file>
 8016ffe:	4607      	mov	r7, r0
 8017000:	e77e      	b.n	8016f00 <http_recv+0x254>
        if (hs->req != NULL) {
 8017002:	2800      	cmp	r0, #0
 8017004:	f43f ae68 	beq.w	8016cd8 <http_recv+0x2c>
 8017008:	f06f 0707 	mvn.w	r7, #7
 801700c:	e784      	b.n	8016f18 <http_recv+0x26c>
            return http_find_file(hs, uri, is_09);
 801700e:	461a      	mov	r2, r3
 8017010:	4659      	mov	r1, fp
 8017012:	4628      	mov	r0, r5
 8017014:	f7ff f954 	bl	80162c0 <http_find_file>
 8017018:	4607      	mov	r7, r0
 801701a:	e771      	b.n	8016f00 <http_recv+0x254>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 801701c:	463a      	mov	r2, r7
 801701e:	490f      	ldr	r1, [pc, #60]	; (801705c <http_recv+0x3b0>)
 8017020:	4640      	mov	r0, r8
 8017022:	f000 f8f9 	bl	8017218 <lwip_strnstr>
 8017026:	9b05      	ldr	r3, [sp, #20]
 8017028:	2800      	cmp	r0, #0
 801702a:	d047      	beq.n	80170bc <http_recv+0x410>
            hs->keepalive = 1;
 801702c:	2001      	movs	r0, #1
 801702e:	e6c5      	b.n	8016dbc <http_recv+0x110>
 8017030:	2001a07c 	.word	0x2001a07c
 8017034:	08028a34 	.word	0x08028a34
 8017038:	0803fe40 	.word	0x0803fe40
 801703c:	0802955c 	.word	0x0802955c
 8017040:	08027564 	.word	0x08027564
 8017044:	0803fe80 	.word	0x0803fe80
 8017048:	2001a038 	.word	0x2001a038
 801704c:	0803fcc0 	.word	0x0803fcc0
 8017050:	0803fe94 	.word	0x0803fe94
 8017054:	08029ba0 	.word	0x08029ba0
 8017058:	0803fe48 	.word	0x0803fe48
 801705c:	0803fe50 	.word	0x0803fe50
            } else if (hs->post_content_len_left == 0) {
 8017060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017062:	b303      	cbz	r3, 80170a6 <http_recv+0x3fa>
        if (hs->req != NULL) {
 8017064:	6a28      	ldr	r0, [r5, #32]
 8017066:	b398      	cbz	r0, 80170d0 <http_recv+0x424>
          pbuf_free(hs->req);
 8017068:	f001 ff24 	bl	8018eb4 <pbuf_free>
          hs->req = NULL;
 801706c:	2300      	movs	r3, #0
      pbuf_free(p);
 801706e:	4620      	mov	r0, r4
          hs->req = NULL;
 8017070:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8017072:	f001 ff1f 	bl	8018eb4 <pbuf_free>
      if (parsed == ERR_OK) {
 8017076:	e773      	b.n	8016f60 <http_recv+0x2b4>
        if (content_len >= 0) {
 8017078:	f6bf aee8 	bge.w	8016e4c <http_recv+0x1a0>
              *sp1 = ' ';
 801707c:	2320      	movs	r3, #32
 801707e:	9a04      	ldr	r2, [sp, #16]
 8017080:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8017082:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8017084:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8017088:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801708a:	e75c      	b.n	8016f46 <http_recv+0x29a>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 801708c:	4652      	mov	r2, sl
 801708e:	4658      	mov	r0, fp
 8017090:	4915      	ldr	r1, [pc, #84]	; (80170e8 <http_recv+0x43c>)
 8017092:	f000 f8c1 	bl	8017218 <lwip_strnstr>
        if (is_post) {
 8017096:	e756      	b.n	8016f46 <http_recv+0x29a>
            return http_find_file(hs, http_uri_buf, 0);
 8017098:	2200      	movs	r2, #0
 801709a:	4914      	ldr	r1, [pc, #80]	; (80170ec <http_recv+0x440>)
 801709c:	4628      	mov	r0, r5
 801709e:	f7ff f90f 	bl	80162c0 <http_find_file>
 80170a2:	4607      	mov	r7, r0
 80170a4:	e71f      	b.n	8016ee6 <http_recv+0x23a>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 80170a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80170a8:	2241      	movs	r2, #65	; 0x41
 80170aa:	4608      	mov	r0, r1
 80170ac:	f001 ff70 	bl	8018f90 <pbuf_alloc>
 80170b0:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 80170b2:	4628      	mov	r0, r5
 80170b4:	f7ff f9f2 	bl	801649c <http_post_rxpbuf>
 80170b8:	4607      	mov	r7, r0
 80170ba:	e714      	b.n	8016ee6 <http_recv+0x23a>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 80170bc:	463a      	mov	r2, r7
 80170be:	490c      	ldr	r1, [pc, #48]	; (80170f0 <http_recv+0x444>)
 80170c0:	4640      	mov	r0, r8
 80170c2:	f000 f8a9 	bl	8017218 <lwip_strnstr>
            hs->keepalive = 1;
 80170c6:	3800      	subs	r0, #0
 80170c8:	9b05      	ldr	r3, [sp, #20]
 80170ca:	bf18      	it	ne
 80170cc:	2001      	movne	r0, #1
 80170ce:	e675      	b.n	8016dbc <http_recv+0x110>
      pbuf_free(p);
 80170d0:	4620      	mov	r0, r4
 80170d2:	f001 feef 	bl	8018eb4 <pbuf_free>
      if (parsed == ERR_OK) {
 80170d6:	e743      	b.n	8016f60 <http_recv+0x2b4>
              *sp1 = ' ';
 80170d8:	2320      	movs	r3, #32
 80170da:	9a04      	ldr	r2, [sp, #16]
 80170dc:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 80170de:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 80170e0:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 80170e4:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 80170e6:	e5f7      	b.n	8016cd8 <http_recv+0x2c>
 80170e8:	08028a34 	.word	0x08028a34
 80170ec:	2001a038 	.word	0x2001a038
 80170f0:	0803fe68 	.word	0x0803fe68

080170f4 <http_err>:
  if (hs != NULL) {
 80170f4:	b140      	cbz	r0, 8017108 <http_err+0x14>
{
 80170f6:	b510      	push	{r4, lr}
 80170f8:	4604      	mov	r4, r0
    http_state_eof(hs);
 80170fa:	f7fe ff79 	bl	8015ff0 <http_state_eof>
    HTTP_FREE_HTTP_STATE(hs);
 80170fe:	4620      	mov	r0, r4
}
 8017100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8017104:	f001 b81a 	b.w	801813c <mem_free>
 8017108:	4770      	bx	lr
 801710a:	bf00      	nop

0801710c <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 801710c:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 801710e:	202e      	movs	r0, #46	; 0x2e
 8017110:	f003 fad4 	bl	801a6bc <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8017114:	b358      	cbz	r0, 801716e <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8017116:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017118:	2101      	movs	r1, #1
 801711a:	f002 fd0d 	bl	8019b38 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 801711e:	2250      	movs	r2, #80	; 0x50
 8017120:	4917      	ldr	r1, [pc, #92]	; (8017180 <httpd_init+0x74>)
 8017122:	4620      	mov	r0, r4
 8017124:	f002 fba8 	bl	8019878 <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8017128:	b958      	cbnz	r0, 8017142 <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 801712a:	4620      	mov	r0, r4
 801712c:	21ff      	movs	r1, #255	; 0xff
 801712e:	f002 fc73 	bl	8019a18 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8017132:	4604      	mov	r4, r0
 8017134:	b198      	cbz	r0, 801715e <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8017136:	4620      	mov	r0, r4
 8017138:	4912      	ldr	r1, [pc, #72]	; (8017184 <httpd_init+0x78>)
}
 801713a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 801713e:	f002 bd89 	b.w	8019c54 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8017142:	4b11      	ldr	r3, [pc, #68]	; (8017188 <httpd_init+0x7c>)
 8017144:	f640 2257 	movw	r2, #2647	; 0xa57
 8017148:	4910      	ldr	r1, [pc, #64]	; (801718c <httpd_init+0x80>)
 801714a:	4811      	ldr	r0, [pc, #68]	; (8017190 <httpd_init+0x84>)
 801714c:	f00b ffca 	bl	80230e4 <iprintf>
    pcb = altcp_listen(pcb);
 8017150:	4620      	mov	r0, r4
 8017152:	21ff      	movs	r1, #255	; 0xff
 8017154:	f002 fc60 	bl	8019a18 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8017158:	4604      	mov	r4, r0
 801715a:	2800      	cmp	r0, #0
 801715c:	d1eb      	bne.n	8017136 <httpd_init+0x2a>
 801715e:	4b0a      	ldr	r3, [pc, #40]	; (8017188 <httpd_init+0x7c>)
 8017160:	f640 2259 	movw	r2, #2649	; 0xa59
 8017164:	490b      	ldr	r1, [pc, #44]	; (8017194 <httpd_init+0x88>)
 8017166:	480a      	ldr	r0, [pc, #40]	; (8017190 <httpd_init+0x84>)
 8017168:	f00b ffbc 	bl	80230e4 <iprintf>
 801716c:	e7e3      	b.n	8017136 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801716e:	4b06      	ldr	r3, [pc, #24]	; (8017188 <httpd_init+0x7c>)
 8017170:	f640 2272 	movw	r2, #2674	; 0xa72
 8017174:	4908      	ldr	r1, [pc, #32]	; (8017198 <httpd_init+0x8c>)
 8017176:	4806      	ldr	r0, [pc, #24]	; (8017190 <httpd_init+0x84>)
}
 8017178:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 801717c:	f00b bfb2 	b.w	80230e4 <iprintf>
 8017180:	08042888 	.word	0x08042888
 8017184:	08016065 	.word	0x08016065
 8017188:	0803fcc0 	.word	0x0803fcc0
 801718c:	0803fedc 	.word	0x0803fedc
 8017190:	08029ba0 	.word	0x08029ba0
 8017194:	0803fef8 	.word	0x0803fef8
 8017198:	0803fec0 	.word	0x0803fec0

0801719c <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 801719c:	b570      	push	{r4, r5, r6, lr}
 801719e:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80171a0:	4606      	mov	r6, r0
{
 80171a2:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80171a4:	b1c8      	cbz	r0, 80171da <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 80171a6:	4b11      	ldr	r3, [pc, #68]	; (80171ec <http_set_ssi_handler+0x50>)
 80171a8:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 80171aa:	b175      	cbz	r5, 80171ca <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80171ac:	2c00      	cmp	r4, #0
 80171ae:	dd04      	ble.n	80171ba <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 80171b0:	4a0f      	ldr	r2, [pc, #60]	; (80171f0 <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 80171b2:	4b10      	ldr	r3, [pc, #64]	; (80171f4 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 80171b4:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 80171b6:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 80171b8:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 80171ba:	4b0f      	ldr	r3, [pc, #60]	; (80171f8 <http_set_ssi_handler+0x5c>)
 80171bc:	f640 229f 	movw	r2, #2719	; 0xa9f
 80171c0:	490e      	ldr	r1, [pc, #56]	; (80171fc <http_set_ssi_handler+0x60>)
 80171c2:	480f      	ldr	r0, [pc, #60]	; (8017200 <http_set_ssi_handler+0x64>)
 80171c4:	f00b ff8e 	bl	80230e4 <iprintf>
 80171c8:	e7f2      	b.n	80171b0 <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 80171ca:	4b0b      	ldr	r3, [pc, #44]	; (80171f8 <http_set_ssi_handler+0x5c>)
 80171cc:	f640 229e 	movw	r2, #2718	; 0xa9e
 80171d0:	490c      	ldr	r1, [pc, #48]	; (8017204 <http_set_ssi_handler+0x68>)
 80171d2:	480b      	ldr	r0, [pc, #44]	; (8017200 <http_set_ssi_handler+0x64>)
 80171d4:	f00b ff86 	bl	80230e4 <iprintf>
 80171d8:	e7e8      	b.n	80171ac <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 80171da:	4b07      	ldr	r3, [pc, #28]	; (80171f8 <http_set_ssi_handler+0x5c>)
 80171dc:	f640 2297 	movw	r2, #2711	; 0xa97
 80171e0:	4909      	ldr	r1, [pc, #36]	; (8017208 <http_set_ssi_handler+0x6c>)
 80171e2:	4807      	ldr	r0, [pc, #28]	; (8017200 <http_set_ssi_handler+0x64>)
 80171e4:	f00b ff7e 	bl	80230e4 <iprintf>
 80171e8:	e7dd      	b.n	80171a6 <http_set_ssi_handler+0xa>
 80171ea:	bf00      	nop
 80171ec:	2001a47c 	.word	0x2001a47c
 80171f0:	2001a480 	.word	0x2001a480
 80171f4:	2001a078 	.word	0x2001a078
 80171f8:	0803fcc0 	.word	0x0803fcc0
 80171fc:	0803ff40 	.word	0x0803ff40
 8017200:	08029ba0 	.word	0x08029ba0
 8017204:	0803ff30 	.word	0x0803ff30
 8017208:	0803ff18 	.word	0x0803ff18

0801720c <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 801720c:	ba40      	rev16	r0, r0
}
 801720e:	b280      	uxth	r0, r0
 8017210:	4770      	bx	lr
 8017212:	bf00      	nop

08017214 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8017214:	ba00      	rev	r0, r0
 8017216:	4770      	bx	lr

08017218 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8017218:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801721c:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 801721e:	4608      	mov	r0, r1
{
 8017220:	4688      	mov	r8, r1
 8017222:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8017224:	f7e9 f816 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8017228:	b1c0      	cbz	r0, 801725c <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801722a:	4605      	mov	r5, r0
 801722c:	7820      	ldrb	r0, [r4, #0]
 801722e:	b1b0      	cbz	r0, 801725e <lwip_strnstr+0x46>
 8017230:	4426      	add	r6, r4
 8017232:	1962      	adds	r2, r4, r5
 8017234:	4296      	cmp	r6, r2
 8017236:	d314      	bcc.n	8017262 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8017238:	f898 7000 	ldrb.w	r7, [r8]
 801723c:	e005      	b.n	801724a <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 801723e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8017242:	1962      	adds	r2, r4, r5
 8017244:	b158      	cbz	r0, 801725e <lwip_strnstr+0x46>
 8017246:	4296      	cmp	r6, r2
 8017248:	d30b      	bcc.n	8017262 <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 801724a:	4287      	cmp	r7, r0
 801724c:	d1f7      	bne.n	801723e <lwip_strnstr+0x26>
 801724e:	462a      	mov	r2, r5
 8017250:	4641      	mov	r1, r8
 8017252:	4620      	mov	r0, r4
 8017254:	f00c feca 	bl	8023fec <strncmp>
 8017258:	2800      	cmp	r0, #0
 801725a:	d1f0      	bne.n	801723e <lwip_strnstr+0x26>
 801725c:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 801725e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8017262:	2000      	movs	r0, #0
}
 8017264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017268 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8017268:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 801726c:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8017270:	4293      	cmp	r3, r2
 8017272:	d01c      	beq.n	80172ae <lwip_stricmp+0x46>
{
 8017274:	b430      	push	{r4, r5}
 8017276:	f043 0420 	orr.w	r4, r3, #32
 801727a:	f042 0520 	orr.w	r5, r2, #32
 801727e:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8017282:	2a19      	cmp	r2, #25
 8017284:	d810      	bhi.n	80172a8 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8017286:	42ac      	cmp	r4, r5
 8017288:	d10e      	bne.n	80172a8 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 801728a:	b1a3      	cbz	r3, 80172b6 <lwip_stricmp+0x4e>
    c1 = *str1++;
 801728c:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8017290:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8017294:	4293      	cmp	r3, r2
 8017296:	d0f8      	beq.n	801728a <lwip_stricmp+0x22>
 8017298:	f043 0420 	orr.w	r4, r3, #32
 801729c:	f042 0520 	orr.w	r5, r2, #32
 80172a0:	f1a4 0261 	sub.w	r2, r4, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80172a4:	2a19      	cmp	r2, #25
 80172a6:	d9ee      	bls.n	8017286 <lwip_stricmp+0x1e>
        return 1;
 80172a8:	2001      	movs	r0, #1
  return 0;
}
 80172aa:	bc30      	pop	{r4, r5}
 80172ac:	4770      	bx	lr
  } while (c1 != 0);
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d1da      	bne.n	8017268 <lwip_stricmp>
  return 0;
 80172b2:	4618      	mov	r0, r3
}
 80172b4:	4770      	bx	lr
  return 0;
 80172b6:	4618      	mov	r0, r3
}
 80172b8:	bc30      	pop	{r4, r5}
 80172ba:	4770      	bx	lr

080172bc <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 80172bc:	b4f0      	push	{r4, r5, r6, r7}
 80172be:	4604      	mov	r4, r0
 80172c0:	e004      	b.n	80172cc <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 80172c2:	4566      	cmp	r6, ip
 80172c4:	d111      	bne.n	80172ea <lwip_strnicmp+0x2e>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 80172c6:	42f8      	cmn	r0, r7
 80172c8:	d012      	beq.n	80172f0 <lwip_strnicmp+0x34>
 80172ca:	b18b      	cbz	r3, 80172f0 <lwip_strnicmp+0x34>
    c1 = *str1++;
 80172cc:	f814 3b01 	ldrb.w	r3, [r4], #1
    c2 = *str2++;
 80172d0:	f811 5b01 	ldrb.w	r5, [r1], #1
      char c1_upc = c1 | 0x20;
 80172d4:	f043 0620 	orr.w	r6, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80172d8:	1b17      	subs	r7, r2, r4
    if (c1 != c2) {
 80172da:	42ab      	cmp	r3, r5
        if (c1_upc != c2_upc) {
 80172dc:	f045 0c20 	orr.w	ip, r5, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80172e0:	f1a6 0561 	sub.w	r5, r6, #97	; 0x61
    if (c1 != c2) {
 80172e4:	d0ef      	beq.n	80172c6 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 80172e6:	2d19      	cmp	r5, #25
 80172e8:	d9eb      	bls.n	80172c2 <lwip_strnicmp+0x6>
        return 1;
 80172ea:	2001      	movs	r0, #1
  return 0;
}
 80172ec:	bcf0      	pop	{r4, r5, r6, r7}
 80172ee:	4770      	bx	lr
  return 0;
 80172f0:	2000      	movs	r0, #0
}
 80172f2:	bcf0      	pop	{r4, r5, r6, r7}
 80172f4:	4770      	bx	lr
 80172f6:	bf00      	nop

080172f8 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 80172f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172fc:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80172fe:	4f24      	ldr	r7, [pc, #144]	; (8017390 <dns_call_found+0x98>)
 8017300:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8017304:	4c23      	ldr	r4, [pc, #140]	; (8017394 <dns_call_found+0x9c>)
      /* flush this entry */
      dns_requests[i].found = NULL;
 8017306:	f04f 0900 	mov.w	r9, #0
{
 801730a:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 801730c:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8017310:	f104 0830 	add.w	r8, r4, #48	; 0x30
 8017314:	012e      	lsls	r6, r5, #4
 8017316:	f100 0b10 	add.w	fp, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 801731a:	6823      	ldr	r3, [r4, #0]
 801731c:	b143      	cbz	r3, 8017330 <dns_call_found+0x38>
 801731e:	7a22      	ldrb	r2, [r4, #8]
 8017320:	42aa      	cmp	r2, r5
 8017322:	d105      	bne.n	8017330 <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8017324:	6862      	ldr	r2, [r4, #4]
 8017326:	4651      	mov	r1, sl
 8017328:	4658      	mov	r0, fp
 801732a:	4798      	blx	r3
      dns_requests[i].found = NULL;
 801732c:	f8c4 9000 	str.w	r9, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8017330:	340c      	adds	r4, #12
 8017332:	4544      	cmp	r4, r8
 8017334:	d1f1      	bne.n	801731a <dns_call_found+0x22>
 8017336:	1973      	adds	r3, r6, r5
 8017338:	2400      	movs	r4, #0
 801733a:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 801733e:	4f14      	ldr	r7, [pc, #80]	; (8017390 <dns_call_found+0x98>)
 8017340:	7bd9      	ldrb	r1, [r3, #15]
 8017342:	463a      	mov	r2, r7
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
 8017344:	b2e3      	uxtb	r3, r4
 8017346:	3401      	adds	r4, #1
 8017348:	429d      	cmp	r5, r3
 801734a:	d002      	beq.n	8017352 <dns_call_found+0x5a>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 801734c:	7a93      	ldrb	r3, [r2, #10]
 801734e:	2b02      	cmp	r3, #2
 8017350:	d015      	beq.n	801737e <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8017352:	2c04      	cmp	r4, #4
 8017354:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8017358:	d1f4      	bne.n	8017344 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801735a:	2903      	cmp	r1, #3
 801735c:	d80d      	bhi.n	801737a <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 801735e:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8017360:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8017398 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8017364:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8017368:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 801736c:	f007 f87e 	bl	801e46c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8017370:	2200      	movs	r2, #0
 8017372:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8017374:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8017376:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 801737a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 801737e:	7bd3      	ldrb	r3, [r2, #15]
 8017380:	428b      	cmp	r3, r1
 8017382:	d1e6      	bne.n	8017352 <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8017384:	4435      	add	r5, r6
 8017386:	2304      	movs	r3, #4
 8017388:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 801738c:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 801738e:	e7f4      	b.n	801737a <dns_call_found+0x82>
 8017390:	2001a4d4 	.word	0x2001a4d4
 8017394:	2001a498 	.word	0x2001a498
 8017398:	2001a488 	.word	0x2001a488

0801739c <dns_send>:
{
 801739c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80173a0:	0103      	lsls	r3, r0, #4
{
 80173a2:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80173a4:	eb00 1400 	add.w	r4, r0, r0, lsl #4
{
 80173a8:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80173aa:	9301      	str	r3, [sp, #4]
 80173ac:	4b60      	ldr	r3, [pc, #384]	; (8017530 <dns_send+0x194>)
 80173ae:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80173b2:	7ae3      	ldrb	r3, [r4, #11]
 80173b4:	2b01      	cmp	r3, #1
 80173b6:	d907      	bls.n	80173c8 <dns_send+0x2c>
 80173b8:	4b5e      	ldr	r3, [pc, #376]	; (8017534 <dns_send+0x198>)
 80173ba:	f240 22fa 	movw	r2, #762	; 0x2fa
 80173be:	495e      	ldr	r1, [pc, #376]	; (8017538 <dns_send+0x19c>)
 80173c0:	485e      	ldr	r0, [pc, #376]	; (801753c <dns_send+0x1a0>)
 80173c2:	f00b fe8f 	bl	80230e4 <iprintf>
 80173c6:	7ae3      	ldrb	r3, [r4, #11]
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80173c8:	4a5d      	ldr	r2, [pc, #372]	; (8017540 <dns_send+0x1a4>)
 80173ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80173ce:	2c00      	cmp	r4, #0
 80173d0:	f000 8099 	beq.w	8017506 <dns_send+0x16a>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80173d4:	9b01      	ldr	r3, [sp, #4]
 80173d6:	4e56      	ldr	r6, [pc, #344]	; (8017530 <dns_send+0x194>)
 80173d8:	eb03 0409 	add.w	r4, r3, r9
 80173dc:	0124      	lsls	r4, r4, #4
 80173de:	f104 0510 	add.w	r5, r4, #16
 80173e2:	4435      	add	r5, r6
 80173e4:	4628      	mov	r0, r5
 80173e6:	f7e8 ff35 	bl	8000254 <strlen>
 80173ea:	4601      	mov	r1, r0
 80173ec:	f44f 7220 	mov.w	r2, #640	; 0x280
 80173f0:	2036      	movs	r0, #54	; 0x36
 80173f2:	3112      	adds	r1, #18
 80173f4:	b289      	uxth	r1, r1
 80173f6:	f001 fdcb 	bl	8018f90 <pbuf_alloc>
  if (p != NULL) {
 80173fa:	4680      	mov	r8, r0
 80173fc:	2800      	cmp	r0, #0
 80173fe:	f000 8093 	beq.w	8017528 <dns_send+0x18c>
    hdr.id = lwip_htons(entry->txid);
 8017402:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8017404:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8017406:	260c      	movs	r6, #12
    --hostname;
 8017408:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 801740a:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 801740c:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8017410:	9304      	str	r3, [sp, #16]
 8017412:	9303      	str	r3, [sp, #12]
 8017414:	9305      	str	r3, [sp, #20]
    hdr.id = lwip_htons(entry->txid);
 8017416:	f7ff fef9 	bl	801720c <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 801741a:	2201      	movs	r2, #1
    hdr.numquestions = PP_HTONS(1);
 801741c:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdr.id = lwip_htons(entry->txid);
 8017420:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8017424:	eb0d 0106 	add.w	r1, sp, r6
    hdr.flags1 = DNS_FLAG1_RD;
 8017428:	f88d 200e 	strb.w	r2, [sp, #14]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 801742c:	4640      	mov	r0, r8
 801742e:	4632      	mov	r2, r6
    hdr.numquestions = PP_HTONS(1);
 8017430:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8017434:	f002 f822 	bl	801947c <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8017438:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 801743a:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801743c:	2b2e      	cmp	r3, #46	; 0x2e
 801743e:	d051      	beq.n	80174e4 <dns_send+0x148>
 8017440:	2b00      	cmp	r3, #0
 8017442:	d04f      	beq.n	80174e4 <dns_send+0x148>
      ++hostname;
 8017444:	463d      	mov	r5, r7
 8017446:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 801744a:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 801744c:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8017450:	2b2e      	cmp	r3, #46	; 0x2e
 8017452:	b2e4      	uxtb	r4, r4
 8017454:	d001      	beq.n	801745a <dns_send+0xbe>
 8017456:	2b00      	cmp	r3, #0
 8017458:	d1f7      	bne.n	801744a <dns_send+0xae>
 801745a:	4623      	mov	r3, r4
 801745c:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8017460:	4433      	add	r3, r6
 8017462:	fa1f fb8b 	uxth.w	fp, fp
 8017466:	4553      	cmp	r3, sl
 8017468:	dc44      	bgt.n	80174f4 <dns_send+0x158>
      pbuf_put_at(p, query_idx, n);
 801746a:	4622      	mov	r2, r4
 801746c:	4631      	mov	r1, r6
 801746e:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8017470:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8017472:	f002 f8cf 	bl	8019614 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8017476:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8017478:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 801747a:	465a      	mov	r2, fp
 801747c:	4639      	mov	r1, r7
 801747e:	b29b      	uxth	r3, r3
 8017480:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8017482:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8017484:	f002 f860 	bl	8019548 <pbuf_take_at>
    } while (*hostname != 0);
 8017488:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 801748a:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 801748c:	2a00      	cmp	r2, #0
 801748e:	d1d3      	bne.n	8017438 <dns_send+0x9c>
    pbuf_put_at(p, query_idx, 0);
 8017490:	4631      	mov	r1, r6
 8017492:	4640      	mov	r0, r8
 8017494:	f002 f8be 	bl	8019614 <pbuf_put_at>
    query_idx++;
 8017498:	1ca3      	adds	r3, r4, #2
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 801749a:	f04f 2401 	mov.w	r4, #16777472	; 0x1000100
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 801749e:	2204      	movs	r2, #4
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	a902      	add	r1, sp, #8
 80174a4:	4640      	mov	r0, r8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80174a6:	9402      	str	r4, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80174a8:	f002 f84e 	bl	8019548 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 80174ac:	9b01      	ldr	r3, [sp, #4]
 80174ae:	4a20      	ldr	r2, [pc, #128]	; (8017530 <dns_send+0x194>)
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80174b0:	4641      	mov	r1, r8
      dst = &dns_servers[entry->server_idx];
 80174b2:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80174b4:	4d22      	ldr	r5, [pc, #136]	; (8017540 <dns_send+0x1a4>)
 80174b6:	4823      	ldr	r0, [pc, #140]	; (8017544 <dns_send+0x1a8>)
      dst = &dns_servers[entry->server_idx];
 80174b8:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80174ba:	2335      	movs	r3, #53	; 0x35
      dst = &dns_servers[entry->server_idx];
 80174bc:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 80174c0:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80174c4:	f89b 400f 	ldrb.w	r4, [fp, #15]
 80174c8:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 80174cc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 80174d0:	f006 ff26 	bl	801e320 <udp_sendto>
 80174d4:	4605      	mov	r5, r0
    pbuf_free(p);
 80174d6:	4640      	mov	r0, r8
 80174d8:	f001 fcec 	bl	8018eb4 <pbuf_free>
}
 80174dc:	4628      	mov	r0, r5
 80174de:	b007      	add	sp, #28
 80174e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80174e4:	f04f 0b00 	mov.w	fp, #0
      ++hostname;
 80174e8:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 80174ea:	465b      	mov	r3, fp
 80174ec:	465c      	mov	r4, fp
      if (query_idx + n + 1 > 0xFFFF) {
 80174ee:	4433      	add	r3, r6
 80174f0:	4553      	cmp	r3, sl
 80174f2:	ddba      	ble.n	801746a <dns_send+0xce>
  return ERR_VAL;
 80174f4:	f06f 0505 	mvn.w	r5, #5
  pbuf_free(p);
 80174f8:	4640      	mov	r0, r8
 80174fa:	f001 fcdb 	bl	8018eb4 <pbuf_free>
}
 80174fe:	4628      	mov	r0, r5
 8017500:	b007      	add	sp, #28
 8017502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dns_call_found(idx, NULL);
 8017506:	4648      	mov	r0, r9
 8017508:	4621      	mov	r1, r4
 801750a:	f7ff fef5 	bl	80172f8 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 801750e:	9b01      	ldr	r3, [sp, #4]
    return ERR_OK;
 8017510:	4625      	mov	r5, r4
    entry->state = DNS_STATE_UNUSED;
 8017512:	444b      	add	r3, r9
}
 8017514:	4628      	mov	r0, r5
    entry->state = DNS_STATE_UNUSED;
 8017516:	4699      	mov	r9, r3
 8017518:	4b05      	ldr	r3, [pc, #20]	; (8017530 <dns_send+0x194>)
 801751a:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 801751e:	f88b 400a 	strb.w	r4, [fp, #10]
}
 8017522:	b007      	add	sp, #28
 8017524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = ERR_MEM;
 8017528:	f04f 35ff 	mov.w	r5, #4294967295
 801752c:	e7d6      	b.n	80174dc <dns_send+0x140>
 801752e:	bf00      	nop
 8017530:	2001a4d4 	.word	0x2001a4d4
 8017534:	08040018 	.word	0x08040018
 8017538:	08040048 	.word	0x08040048
 801753c:	08029ba0 	.word	0x08029ba0
 8017540:	2001a4cc 	.word	0x2001a4cc
 8017544:	2001a488 	.word	0x2001a488

08017548 <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8017548:	2803      	cmp	r0, #3
{
 801754a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801754e:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8017550:	d835      	bhi.n	80175be <dns_check_entry+0x76>

  switch (entry->state) {
 8017552:	4e39      	ldr	r6, [pc, #228]	; (8017638 <dns_check_entry+0xf0>)
 8017554:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8017558:	0125      	lsls	r5, r4, #4
 801755a:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 801755e:	7a9b      	ldrb	r3, [r3, #10]
 8017560:	2b03      	cmp	r3, #3
 8017562:	d860      	bhi.n	8017626 <dns_check_entry+0xde>
 8017564:	e8df f003 	tbb	[pc, r3]
 8017568:	0237100e 	.word	0x0237100e
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801756c:	192b      	adds	r3, r5, r4
 801756e:	011b      	lsls	r3, r3, #4
 8017570:	58f2      	ldr	r2, [r6, r3]
 8017572:	b112      	cbz	r2, 801757a <dns_check_entry+0x32>
 8017574:	3a01      	subs	r2, #1
 8017576:	50f2      	str	r2, [r6, r3]
 8017578:	b922      	cbnz	r2, 8017584 <dns_check_entry+0x3c>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 801757a:	442c      	add	r4, r5
 801757c:	2300      	movs	r3, #0
 801757e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8017582:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8017584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017588:	4f2c      	ldr	r7, [pc, #176]	; (801763c <dns_check_entry+0xf4>)
  txid = (u16_t)DNS_RAND_TXID();
 801758a:	f00b fe4f 	bl	802322c <rand>
 801758e:	4b2a      	ldr	r3, [pc, #168]	; (8017638 <dns_check_entry+0xf0>)
 8017590:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8017592:	7a9a      	ldrb	r2, [r3, #10]
 8017594:	2a02      	cmp	r2, #2
 8017596:	d01a      	beq.n	80175ce <dns_check_entry+0x86>
 8017598:	f503 7388 	add.w	r3, r3, #272	; 0x110
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801759c:	429f      	cmp	r7, r3
 801759e:	d1f8      	bne.n	8017592 <dns_check_entry+0x4a>
      entry->txid = dns_create_txid();
 80175a0:	4425      	add	r5, r4
      err = dns_send(i);
 80175a2:	4620      	mov	r0, r4
      entry->tmr = 1;
 80175a4:	2201      	movs	r2, #1
      entry->state = DNS_STATE_ASKING;
 80175a6:	2402      	movs	r4, #2
 80175a8:	eb06 1305 	add.w	r3, r6, r5, lsl #4
      entry->txid = dns_create_txid();
 80175ac:	461d      	mov	r5, r3
 80175ae:	3308      	adds	r3, #8
 80175b0:	8129      	strh	r1, [r5, #8]
      entry->state = DNS_STATE_ASKING;
 80175b2:	805c      	strh	r4, [r3, #2]
      entry->tmr = 1;
 80175b4:	809a      	strh	r2, [r3, #4]
}
 80175b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 80175ba:	f7ff beef 	b.w	801739c <dns_send>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80175be:	4b20      	ldr	r3, [pc, #128]	; (8017640 <dns_check_entry+0xf8>)
 80175c0:	f240 421c 	movw	r2, #1052	; 0x41c
 80175c4:	491f      	ldr	r1, [pc, #124]	; (8017644 <dns_check_entry+0xfc>)
 80175c6:	4820      	ldr	r0, [pc, #128]	; (8017648 <dns_check_entry+0x100>)
 80175c8:	f00b fd8c 	bl	80230e4 <iprintf>
 80175cc:	e7c1      	b.n	8017552 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80175ce:	891a      	ldrh	r2, [r3, #8]
 80175d0:	428a      	cmp	r2, r1
 80175d2:	d1e1      	bne.n	8017598 <dns_check_entry+0x50>
 80175d4:	e7d9      	b.n	801758a <dns_check_entry+0x42>
      if (--entry->tmr == 0) {
 80175d6:	192a      	adds	r2, r5, r4
 80175d8:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 80175dc:	7b13      	ldrb	r3, [r2, #12]
 80175de:	3b01      	subs	r3, #1
 80175e0:	b2db      	uxtb	r3, r3
 80175e2:	7313      	strb	r3, [r2, #12]
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d1cd      	bne.n	8017584 <dns_check_entry+0x3c>
        if (++entry->retries == DNS_MAX_RETRIES) {
 80175e8:	7b53      	ldrb	r3, [r2, #13]
 80175ea:	3301      	adds	r3, #1
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	2b04      	cmp	r3, #4
 80175f0:	7353      	strb	r3, [r2, #13]
 80175f2:	d005      	beq.n	8017600 <dns_check_entry+0xb8>
          entry->tmr = entry->retries;
 80175f4:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 80175f6:	4620      	mov	r0, r4
}
 80175f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 80175fc:	f7ff bece 	b.w	801739c <dns_send>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8017600:	7ad3      	ldrb	r3, [r2, #11]
 8017602:	b933      	cbnz	r3, 8017612 <dns_check_entry+0xca>
 8017604:	4b11      	ldr	r3, [pc, #68]	; (801764c <dns_check_entry+0x104>)
 8017606:	685b      	ldr	r3, [r3, #4]
 8017608:	b11b      	cbz	r3, 8017612 <dns_check_entry+0xca>
            entry->server_idx++;
 801760a:	2301      	movs	r3, #1
 801760c:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 801760e:	8193      	strh	r3, [r2, #12]
 8017610:	e7f1      	b.n	80175f6 <dns_check_entry+0xae>
            dns_call_found(i, NULL);
 8017612:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8017614:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8017616:	2100      	movs	r1, #0
 8017618:	f7ff fe6e 	bl	80172f8 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801761c:	2300      	movs	r3, #0
 801761e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8017622:	72b3      	strb	r3, [r6, #10]
            break;
 8017624:	e7ae      	b.n	8017584 <dns_check_entry+0x3c>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8017626:	4b06      	ldr	r3, [pc, #24]	; (8017640 <dns_check_entry+0xf8>)
 8017628:	f240 425b 	movw	r2, #1115	; 0x45b
 801762c:	4908      	ldr	r1, [pc, #32]	; (8017650 <dns_check_entry+0x108>)
 801762e:	4806      	ldr	r0, [pc, #24]	; (8017648 <dns_check_entry+0x100>)
}
 8017630:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8017634:	f00b bd56 	b.w	80230e4 <iprintf>
 8017638:	2001a4d4 	.word	0x2001a4d4
 801763c:	2001a914 	.word	0x2001a914
 8017640:	08040018 	.word	0x08040018
 8017644:	08040060 	.word	0x08040060
 8017648:	08029ba0 	.word	0x08029ba0
 801764c:	2001a4cc 	.word	0x2001a4cc
 8017650:	0804007c 	.word	0x0804007c

08017654 <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8017654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017658:	4699      	mov	r9, r3
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 801765a:	8913      	ldrh	r3, [r2, #8]
{
 801765c:	b08d      	sub	sp, #52	; 0x34
 801765e:	4614      	mov	r4, r2
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8017660:	2b0f      	cmp	r3, #15
 8017662:	d805      	bhi.n	8017670 <dns_recv+0x1c>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 8017664:	4620      	mov	r0, r4
 8017666:	f001 fc25 	bl	8018eb4 <pbuf_free>
  return;
}
 801766a:	b00d      	add	sp, #52	; 0x34
 801766c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8017670:	2300      	movs	r3, #0
 8017672:	220c      	movs	r2, #12
 8017674:	a906      	add	r1, sp, #24
 8017676:	4620      	mov	r0, r4
 8017678:	f001 feb4 	bl	80193e4 <pbuf_copy_partial>
 801767c:	280c      	cmp	r0, #12
 801767e:	4605      	mov	r5, r0
 8017680:	d1f0      	bne.n	8017664 <dns_recv+0x10>
    txid = lwip_htons(hdr.id);
 8017682:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8017978 <dns_recv+0x324>
 8017686:	2600      	movs	r6, #0
 8017688:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 801768c:	f7ff fdbe 	bl	801720c <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8017690:	4643      	mov	r3, r8
 8017692:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 8017694:	7a9a      	ldrb	r2, [r3, #10]
 8017696:	2a02      	cmp	r2, #2
 8017698:	d008      	beq.n	80176ac <dns_recv+0x58>
 801769a:	3601      	adds	r6, #1
 801769c:	f503 7388 	add.w	r3, r3, #272	; 0x110
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80176a0:	2e04      	cmp	r6, #4
 80176a2:	d0df      	beq.n	8017664 <dns_recv+0x10>
      if ((entry->state == DNS_STATE_ASKING) &&
 80176a4:	7a9a      	ldrb	r2, [r3, #10]
 80176a6:	b2f7      	uxtb	r7, r6
 80176a8:	2a02      	cmp	r2, #2
 80176aa:	d1f6      	bne.n	801769a <dns_recv+0x46>
 80176ac:	891a      	ldrh	r2, [r3, #8]
 80176ae:	4282      	cmp	r2, r0
 80176b0:	d1f3      	bne.n	801769a <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 80176b2:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80176b6:	f7ff fda9 	bl	801720c <lwip_htons>
 80176ba:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 80176bc:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80176c0:	f7ff fda4 	bl	801720c <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80176c4:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 80176c8:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 80176ca:	09db      	lsrs	r3, r3, #7
 80176cc:	d0ca      	beq.n	8017664 <dns_recv+0x10>
 80176ce:	f1ba 0f01 	cmp.w	sl, #1
 80176d2:	d1c7      	bne.n	8017664 <dns_recv+0x10>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 80176d4:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 80176d8:	49a5      	ldr	r1, [pc, #660]	; (8017970 <dns_recv+0x31c>)
 80176da:	f8d9 2000 	ldr.w	r2, [r9]
 80176de:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 80176e2:	7adb      	ldrb	r3, [r3, #11]
 80176e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80176e8:	429a      	cmp	r2, r3
 80176ea:	d1bb      	bne.n	8017664 <dns_recv+0x10>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 80176ec:	f44f 7388 	mov.w	r3, #272	; 0x110
 80176f0:	9602      	str	r6, [sp, #8]
 80176f2:	9703      	str	r7, [sp, #12]
    if ((n < 0) || (response_offset == 0xFFFF)) {
 80176f4:	f64f 7bff 	movw	fp, #65535	; 0xffff
 80176f8:	fb03 f306 	mul.w	r3, r3, r6
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 80176fc:	f8df 927c 	ldr.w	r9, [pc, #636]	; 801797c <dns_recv+0x328>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8017700:	462e      	mov	r6, r5
 8017702:	4627      	mov	r7, r4
 8017704:	f103 0210 	add.w	r2, r3, #16
 8017708:	9301      	str	r3, [sp, #4]
 801770a:	4442      	add	r2, r8
 801770c:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 801770e:	4631      	mov	r1, r6
 8017710:	4638      	mov	r0, r7
 8017712:	f001 ff6f 	bl	80195f4 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8017716:	2800      	cmp	r0, #0
 8017718:	db2d      	blt.n	8017776 <dns_recv+0x122>
 801771a:	455e      	cmp	r6, fp
 801771c:	d02b      	beq.n	8017776 <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 801771e:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 8017722:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 8017724:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 8017726:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8017728:	d025      	beq.n	8017776 <dns_recv+0x122>
      while (n > 0) {
 801772a:	b330      	cbz	r0, 801777a <dns_recv+0x126>
 801772c:	46aa      	mov	sl, r5
 801772e:	182c      	adds	r4, r5, r0
 8017730:	e01b      	b.n	801776a <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8017732:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 8017736:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8017738:	f819 2000 	ldrb.w	r2, [r9, r0]
 801773c:	4601      	mov	r1, r0
        ++query;
 801773e:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8017740:	f002 0203 	and.w	r2, r2, #3
 8017744:	2a01      	cmp	r2, #1
 8017746:	f819 2003 	ldrb.w	r2, [r9, r3]
 801774a:	f002 0203 	and.w	r2, r2, #3
 801774e:	bf08      	it	eq
 8017750:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 8017754:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8017756:	2a01      	cmp	r2, #1
 8017758:	bf08      	it	eq
 801775a:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 801775c:	4299      	cmp	r1, r3
 801775e:	d10a      	bne.n	8017776 <dns_recv+0x122>
 8017760:	455e      	cmp	r6, fp
        response_offset++;
 8017762:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8017764:	d007      	beq.n	8017776 <dns_recv+0x122>
      while (n > 0) {
 8017766:	4554      	cmp	r4, sl
 8017768:	d007      	beq.n	801777a <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 801776a:	4631      	mov	r1, r6
 801776c:	4638      	mov	r0, r7
 801776e:	f001 ff41 	bl	80195f4 <pbuf_try_get_at>
        if (c < 0) {
 8017772:	1e03      	subs	r3, r0, #0
 8017774:	dadd      	bge.n	8017732 <dns_recv+0xde>
 8017776:	463c      	mov	r4, r7
 8017778:	e774      	b.n	8017664 <dns_recv+0x10>
    n = pbuf_try_get_at(p, response_offset);
 801777a:	4631      	mov	r1, r6
 801777c:	4638      	mov	r0, r7
 801777e:	f001 ff39 	bl	80195f4 <pbuf_try_get_at>
    if (n < 0) {
 8017782:	2800      	cmp	r0, #0
      ++query;
 8017784:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 8017788:	dbf5      	blt.n	8017776 <dns_recv+0x122>
  } while (n != 0);
 801778a:	d1c0      	bne.n	801770e <dns_recv+0xba>
 801778c:	4635      	mov	r5, r6
  if (response_offset == 0xFFFF) {
 801778e:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8017792:	463c      	mov	r4, r7
 8017794:	9e02      	ldr	r6, [sp, #8]
 8017796:	454d      	cmp	r5, r9
 8017798:	9f03      	ldr	r7, [sp, #12]
 801779a:	f43f af63 	beq.w	8017664 <dns_recv+0x10>
  return (u16_t)(response_offset + 1);
 801779e:	f105 0a01 	add.w	sl, r5, #1
 80177a2:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 80177a6:	45ca      	cmp	sl, r9
 80177a8:	f43f af5c 	beq.w	8017664 <dns_recv+0x10>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 80177ac:	4653      	mov	r3, sl
 80177ae:	2204      	movs	r2, #4
 80177b0:	a904      	add	r1, sp, #16
 80177b2:	4620      	mov	r0, r4
 80177b4:	f001 fe16 	bl	80193e4 <pbuf_copy_partial>
 80177b8:	2804      	cmp	r0, #4
 80177ba:	f47f af53 	bne.w	8017664 <dns_recv+0x10>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 80177be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80177c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177c6:	f47f af4d 	bne.w	8017664 <dns_recv+0x10>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 80177ca:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80177ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80177d2:	f47f af47 	bne.w	8017664 <dns_recv+0x10>
 80177d6:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80177da:	459a      	cmp	sl, r3
 80177dc:	f63f af42 	bhi.w	8017664 <dns_recv+0x10>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 80177e0:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80177e4:	071b      	lsls	r3, r3, #28
 80177e6:	f040 80ac 	bne.w	8017942 <dns_recv+0x2ee>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 80177ea:	3505      	adds	r5, #5
 80177ec:	f8dd a000 	ldr.w	sl, [sp]
 80177f0:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 80177f2:	f1ba 0f00 	cmp.w	sl, #0
 80177f6:	f000 8096 	beq.w	8017926 <dns_recv+0x2d2>
 80177fa:	8923      	ldrh	r3, [r4, #8]
 80177fc:	42ab      	cmp	r3, r5
 80177fe:	d80a      	bhi.n	8017816 <dns_recv+0x1c2>
 8017800:	e091      	b.n	8017926 <dns_recv+0x2d2>
      if (offset + n >= p->tot_len) {
 8017802:	8922      	ldrh	r2, [r4, #8]
 8017804:	4293      	cmp	r3, r2
 8017806:	f6bf af2d 	bge.w	8017664 <dns_recv+0x10>
    n = pbuf_try_get_at(p, offset);
 801780a:	f001 fef3 	bl	80195f4 <pbuf_try_get_at>
    if (n < 0) {
 801780e:	2800      	cmp	r0, #0
 8017810:	f6ff af28 	blt.w	8017664 <dns_recv+0x10>
  } while (n != 0);
 8017814:	d018      	beq.n	8017848 <dns_recv+0x1f4>
    n = pbuf_try_get_at(p, offset++);
 8017816:	4629      	mov	r1, r5
 8017818:	4620      	mov	r0, r4
 801781a:	f001 feeb 	bl	80195f4 <pbuf_try_get_at>
 801781e:	f105 0b01 	add.w	fp, r5, #1
 8017822:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 8017824:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 8017826:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 801782a:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 801782c:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8017830:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 8017832:	f6ff af17 	blt.w	8017664 <dns_recv+0x10>
      offset = (u16_t)(offset + n);
 8017836:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8017838:	f1bb 0f00 	cmp.w	fp, #0
 801783c:	f43f af12 	beq.w	8017664 <dns_recv+0x10>
    if ((n & 0xc0) == 0xc0) {
 8017840:	2ac0      	cmp	r2, #192	; 0xc0
    n = pbuf_try_get_at(p, offset);
 8017842:	4629      	mov	r1, r5
    if ((n & 0xc0) == 0xc0) {
 8017844:	d1dd      	bne.n	8017802 <dns_recv+0x1ae>
    n = pbuf_try_get_at(p, offset++);
 8017846:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 8017848:	454d      	cmp	r5, r9
 801784a:	f43f af0b 	beq.w	8017664 <dns_recv+0x10>
  return (u16_t)(offset + 1);
 801784e:	f105 0b01 	add.w	fp, r5, #1
 8017852:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 8017856:	45cb      	cmp	fp, r9
 8017858:	f43f af04 	beq.w	8017664 <dns_recv+0x10>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 801785c:	465b      	mov	r3, fp
 801785e:	220a      	movs	r2, #10
 8017860:	a909      	add	r1, sp, #36	; 0x24
 8017862:	4620      	mov	r0, r4
 8017864:	f001 fdbe 	bl	80193e4 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 8017868:	280a      	cmp	r0, #10
 801786a:	f47f aefb 	bne.w	8017664 <dns_recv+0x10>
 801786e:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 8017872:	459b      	cmp	fp, r3
 8017874:	f63f aef6 	bhi.w	8017664 <dns_recv+0x10>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8017878:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 801787c:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 801787e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 8017882:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 8017884:	d013      	beq.n	80178ae <dns_recv+0x25a>
 8017886:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 801788a:	f7ff fcbf 	bl	801720c <lwip_htons>
 801788e:	4428      	add	r0, r5
 8017890:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 8017894:	f6bf aee6 	bge.w	8017664 <dns_recv+0x10>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8017898:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 801789c:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80178a0:	f7ff fcb4 	bl	801720c <lwip_htons>
 80178a4:	4405      	add	r5, r0
            --nanswers;
 80178a6:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80178aa:	b2ad      	uxth	r5, r5
            --nanswers;
 80178ac:	e7a1      	b.n	80177f2 <dns_recv+0x19e>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 80178ae:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 80178b2:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 80178b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80178ba:	d1e6      	bne.n	801788a <dns_recv+0x236>
 80178bc:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 80178c0:	d1e3      	bne.n	801788a <dns_recv+0x236>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 80178c2:	462b      	mov	r3, r5
 80178c4:	2204      	movs	r2, #4
 80178c6:	a905      	add	r1, sp, #20
 80178c8:	4620      	mov	r0, r4
 80178ca:	f001 fd8b 	bl	80193e4 <pbuf_copy_partial>
 80178ce:	2804      	cmp	r0, #4
 80178d0:	f47f aec8 	bne.w	8017664 <dns_recv+0x10>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80178d4:	f44f 7288 	mov.w	r2, #272	; 0x110
 80178d8:	9b05      	ldr	r3, [sp, #20]
                  pbuf_free(p);
 80178da:	4620      	mov	r0, r4
  if (entry->ttl > DNS_MAX_TTL) {
 80178dc:	4d25      	ldr	r5, [pc, #148]	; (8017974 <dns_recv+0x320>)
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 80178de:	fb02 f606 	mul.w	r6, r2, r6
 80178e2:	eb08 0406 	add.w	r4, r8, r6
 80178e6:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 80178e8:	f001 fae4 	bl	8018eb4 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 80178ec:	980a      	ldr	r0, [sp, #40]	; 0x28
 80178ee:	f7ff fc91 	bl	8017214 <lwip_htonl>
 80178f2:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 80178f4:	9901      	ldr	r1, [sp, #4]
  entry->state = DNS_STATE_DONE;
 80178f6:	2203      	movs	r2, #3
  entry->ttl = ttl;
 80178f8:	42ab      	cmp	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 80178fa:	4638      	mov	r0, r7
 80178fc:	f101 0104 	add.w	r1, r1, #4
  entry->state = DNS_STATE_DONE;
 8017900:	72a2      	strb	r2, [r4, #10]
  entry->ttl = ttl;
 8017902:	bf28      	it	cs
 8017904:	462b      	movcs	r3, r5
  dns_call_found(idx, &entry->ipaddr);
 8017906:	4441      	add	r1, r8
  entry->ttl = ttl;
 8017908:	f848 3006 	str.w	r3, [r8, r6]
  dns_call_found(idx, &entry->ipaddr);
 801790c:	f7ff fcf4 	bl	80172f8 <dns_call_found>
  if (entry->ttl == 0) {
 8017910:	f858 3006 	ldr.w	r3, [r8, r6]
 8017914:	2b00      	cmp	r3, #0
 8017916:	f47f aea8 	bne.w	801766a <dns_recv+0x16>
    if (entry->state == DNS_STATE_DONE) {
 801791a:	7aa2      	ldrb	r2, [r4, #10]
 801791c:	2a03      	cmp	r2, #3
 801791e:	f47f aea4 	bne.w	801766a <dns_recv+0x16>
      entry->state = DNS_STATE_UNUSED;
 8017922:	72a3      	strb	r3, [r4, #10]
                  return;
 8017924:	e6a1      	b.n	801766a <dns_recv+0x16>
        pbuf_free(p);
 8017926:	4620      	mov	r0, r4
 8017928:	f001 fac4 	bl	8018eb4 <pbuf_free>
        dns_call_found(i, NULL);
 801792c:	4638      	mov	r0, r7
 801792e:	2100      	movs	r1, #0
 8017930:	f7ff fce2 	bl	80172f8 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 8017934:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017938:	2200      	movs	r2, #0
 801793a:	fb03 8606 	mla	r6, r3, r6, r8
 801793e:	72b2      	strb	r2, [r6, #10]
        return;
 8017940:	e693      	b.n	801766a <dns_recv+0x16>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8017942:	f44f 7388 	mov.w	r3, #272	; 0x110
 8017946:	fb03 8306 	mla	r3, r3, r6, r8
 801794a:	7adb      	ldrb	r3, [r3, #11]
 801794c:	2b00      	cmp	r3, #0
 801794e:	d1ea      	bne.n	8017926 <dns_recv+0x2d2>
 8017950:	4b07      	ldr	r3, [pc, #28]	; (8017970 <dns_recv+0x31c>)
 8017952:	685b      	ldr	r3, [r3, #4]
 8017954:	2b00      	cmp	r3, #0
 8017956:	d0e6      	beq.n	8017926 <dns_recv+0x2d2>
            entry->tmr     = 1;
 8017958:	f44f 7388 	mov.w	r3, #272	; 0x110
 801795c:	f240 3201 	movw	r2, #769	; 0x301
            dns_check_entry(i);
 8017960:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8017962:	fb03 8606 	mla	r6, r3, r6, r8
 8017966:	81b2      	strh	r2, [r6, #12]
            dns_check_entry(i);
 8017968:	f7ff fdee 	bl	8017548 <dns_check_entry>
            goto ignore_packet;
 801796c:	e67a      	b.n	8017664 <dns_recv+0x10>
 801796e:	bf00      	nop
 8017970:	2001a4cc 	.word	0x2001a4cc
 8017974:	00093a80 	.word	0x00093a80
 8017978:	2001a4d4 	.word	0x2001a4d4
 801797c:	08042ae5 	.word	0x08042ae5

08017980 <dns_init>:
}
 8017980:	4770      	bx	lr
 8017982:	bf00      	nop

08017984 <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 8017984:	2801      	cmp	r0, #1
 8017986:	d900      	bls.n	801798a <dns_setserver+0x6>
}
 8017988:	4770      	bx	lr
    if (dnsserver != NULL) {
 801798a:	b121      	cbz	r1, 8017996 <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 801798c:	680a      	ldr	r2, [r1, #0]
 801798e:	4b05      	ldr	r3, [pc, #20]	; (80179a4 <dns_setserver+0x20>)
 8017990:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 8017994:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 8017996:	4a04      	ldr	r2, [pc, #16]	; (80179a8 <dns_setserver+0x24>)
 8017998:	4b02      	ldr	r3, [pc, #8]	; (80179a4 <dns_setserver+0x20>)
 801799a:	6812      	ldr	r2, [r2, #0]
 801799c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80179a0:	4770      	bx	lr
 80179a2:	bf00      	nop
 80179a4:	2001a4cc 	.word	0x2001a4cc
 80179a8:	08042888 	.word	0x08042888

080179ac <dns_tmr>:
{
 80179ac:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80179ae:	2000      	movs	r0, #0
 80179b0:	f7ff fdca 	bl	8017548 <dns_check_entry>
 80179b4:	2001      	movs	r0, #1
 80179b6:	f7ff fdc7 	bl	8017548 <dns_check_entry>
 80179ba:	2002      	movs	r0, #2
 80179bc:	f7ff fdc4 	bl	8017548 <dns_check_entry>
 80179c0:	2003      	movs	r0, #3
}
 80179c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80179c6:	f7ff bdbf 	b.w	8017548 <dns_check_entry>
 80179ca:	bf00      	nop

080179cc <dns_gethostbyname_addrtype>:
 *                     - LWIP_DNS_ADDRTYPE_IPV6: try to resolve IPv6 only
 */
err_t
dns_gethostbyname_addrtype(const char *hostname, ip_addr_t *addr, dns_found_callback found,
                           void *callback_arg, u8_t dns_addrtype)
{
 80179cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80179d0:	b083      	sub	sp, #12
 80179d2:	9201      	str	r2, [sp, #4]
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80179d4:	2900      	cmp	r1, #0
 80179d6:	f000 810b 	beq.w	8017bf0 <dns_gethostbyname_addrtype+0x224>
 80179da:	fab0 f480 	clz	r4, r0
 80179de:	4607      	mov	r7, r0
 80179e0:	0964      	lsrs	r4, r4, #5
 80179e2:	2800      	cmp	r0, #0
 80179e4:	f000 8104 	beq.w	8017bf0 <dns_gethostbyname_addrtype+0x224>
      (!hostname) || (!hostname[0])) {
 80179e8:	7802      	ldrb	r2, [r0, #0]
 80179ea:	2a00      	cmp	r2, #0
 80179ec:	f000 8100 	beq.w	8017bf0 <dns_gethostbyname_addrtype+0x224>
 80179f0:	4688      	mov	r8, r1
 80179f2:	4699      	mov	r9, r3
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 80179f4:	f7e8 fc2e 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80179f8:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 80179fa:	4605      	mov	r5, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 80179fc:	f200 80f8 	bhi.w	8017bf0 <dns_gethostbyname_addrtype+0x224>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8017a00:	4641      	mov	r1, r8
 8017a02:	4638      	mov	r0, r7
 8017a04:	f009 f964 	bl	8020cd0 <ip4addr_aton>
 8017a08:	b118      	cbz	r0, 8017a12 <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8017a0a:	4620      	mov	r0, r4
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8017a0c:	b003      	add	sp, #12
 8017a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017a12:	4c89      	ldr	r4, [pc, #548]	; (8017c38 <dns_gethostbyname_addrtype+0x26c>)
  if (ipaddr_aton(hostname, addr)) {
 8017a14:	4606      	mov	r6, r0
 8017a16:	46a2      	mov	sl, r4
 8017a18:	46a3      	mov	fp, r4
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8017a1a:	f89b 300a 	ldrb.w	r3, [fp, #10]
 8017a1e:	2b03      	cmp	r3, #3
 8017a20:	d037      	beq.n	8017a92 <dns_gethostbyname_addrtype+0xc6>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8017a22:	3601      	adds	r6, #1
 8017a24:	f50b 7b88 	add.w	fp, fp, #272	; 0x110
 8017a28:	2e04      	cmp	r6, #4
 8017a2a:	d1f6      	bne.n	8017a1a <dns_gethostbyname_addrtype+0x4e>
    if (ip_addr_isany_val(dns_servers[0])) {
 8017a2c:	4a83      	ldr	r2, [pc, #524]	; (8017c3c <dns_gethostbyname_addrtype+0x270>)
 8017a2e:	6812      	ldr	r2, [r2, #0]
 8017a30:	2a00      	cmp	r2, #0
 8017a32:	f000 80f9 	beq.w	8017c28 <dns_gethostbyname_addrtype+0x25c>
 8017a36:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8017c38 <dns_gethostbyname_addrtype+0x26c>
 8017a3a:	2600      	movs	r6, #0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8017a3c:	f898 300a 	ldrb.w	r3, [r8, #10]
 8017a40:	fa5f fb86 	uxtb.w	fp, r6
 8017a44:	2b02      	cmp	r3, #2
 8017a46:	d03e      	beq.n	8017ac6 <dns_gethostbyname_addrtype+0xfa>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8017a48:	3601      	adds	r6, #1
 8017a4a:	f508 7888 	add.w	r8, r8, #272	; 0x110
 8017a4e:	2e04      	cmp	r6, #4
 8017a50:	d1f4      	bne.n	8017a3c <dns_gethostbyname_addrtype+0x70>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8017a52:	2200      	movs	r2, #0
 8017a54:	4b7a      	ldr	r3, [pc, #488]	; (8017c40 <dns_gethostbyname_addrtype+0x274>)
  lseq = 0;
 8017a56:	4694      	mov	ip, r2
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8017a58:	7818      	ldrb	r0, [r3, #0]
    if (entry->state == DNS_STATE_UNUSED) {
 8017a5a:	7aa3      	ldrb	r3, [r4, #10]
 8017a5c:	fa5f f882 	uxtb.w	r8, r2
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d043      	beq.n	8017aec <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8017a64:	2b03      	cmp	r3, #3
 8017a66:	f102 0201 	add.w	r2, r2, #1
 8017a6a:	d024      	beq.n	8017ab6 <dns_gethostbyname_addrtype+0xea>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8017a6c:	2a04      	cmp	r2, #4
 8017a6e:	f504 7488 	add.w	r4, r4, #272	; 0x110
 8017a72:	d1f2      	bne.n	8017a5a <dns_gethostbyname_addrtype+0x8e>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 8017a74:	2e04      	cmp	r6, #4
 8017a76:	d007      	beq.n	8017a88 <dns_gethostbyname_addrtype+0xbc>
 8017a78:	eb06 1406 	add.w	r4, r6, r6, lsl #4
 8017a7c:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
 8017a80:	7aa2      	ldrb	r2, [r4, #10]
 8017a82:	2a03      	cmp	r2, #3
 8017a84:	f000 80b2 	beq.w	8017bec <dns_gethostbyname_addrtype+0x220>
      return ERR_MEM;
 8017a88:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017a8c:	b003      	add	sp, #12
 8017a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 8017a92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017a96:	f10b 0110 	add.w	r1, fp, #16
 8017a9a:	4638      	mov	r0, r7
 8017a9c:	f7ff fc0e 	bl	80172bc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8017aa0:	2800      	cmp	r0, #0
 8017aa2:	d1be      	bne.n	8017a22 <dns_gethostbyname_addrtype+0x56>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 8017aa4:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8017aa8:	eb0a 1a06 	add.w	sl, sl, r6, lsl #4
 8017aac:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017ab0:	f8c8 3000 	str.w	r3, [r8]
 8017ab4:	e7aa      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8017ab6:	7ba3      	ldrb	r3, [r4, #14]
 8017ab8:	1ac3      	subs	r3, r0, r3
 8017aba:	b2db      	uxtb	r3, r3
      if (age > lseq) {
 8017abc:	4563      	cmp	r3, ip
 8017abe:	d9d5      	bls.n	8017a6c <dns_gethostbyname_addrtype+0xa0>
 8017ac0:	4646      	mov	r6, r8
 8017ac2:	469c      	mov	ip, r3
 8017ac4:	e7d2      	b.n	8017a6c <dns_gethostbyname_addrtype+0xa0>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 8017ac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017aca:	f108 0110 	add.w	r1, r8, #16
 8017ace:	4638      	mov	r0, r7
 8017ad0:	f7ff fbf4 	bl	80172bc <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8017ad4:	2800      	cmp	r0, #0
 8017ad6:	d1b7      	bne.n	8017a48 <dns_gethostbyname_addrtype+0x7c>
 8017ad8:	4b5a      	ldr	r3, [pc, #360]	; (8017c44 <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8017ada:	681a      	ldr	r2, [r3, #0]
 8017adc:	330c      	adds	r3, #12
 8017ade:	2a00      	cmp	r2, #0
 8017ae0:	f000 8093 	beq.w	8017c0a <dns_gethostbyname_addrtype+0x23e>
 8017ae4:	3001      	adds	r0, #1
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8017ae6:	2804      	cmp	r0, #4
 8017ae8:	d1f7      	bne.n	8017ada <dns_gethostbyname_addrtype+0x10e>
 8017aea:	e7ad      	b.n	8017a48 <dns_gethostbyname_addrtype+0x7c>
    entry = &dns_table[i];
 8017aec:	eb02 1402 	add.w	r4, r2, r2, lsl #4
 8017af0:	eb0a 1404 	add.w	r4, sl, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8017af4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8017c44 <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8017af8:	2600      	movs	r6, #0
 8017afa:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8017afc:	6813      	ldr	r3, [r2, #0]
 8017afe:	320c      	adds	r2, #12
 8017b00:	b12b      	cbz	r3, 8017b0e <dns_gethostbyname_addrtype+0x142>
 8017b02:	3601      	adds	r6, #1
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8017b04:	2e04      	cmp	r6, #4
 8017b06:	d1f9      	bne.n	8017afc <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8017b08:	f04f 30ff 	mov.w	r0, #4294967295
 8017b0c:	e7be      	b.n	8017a8c <dns_gethostbyname_addrtype+0xc0>
  req->dns_table_idx = i;
 8017b0e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8017b12:	469b      	mov	fp, r3
  entry->seqno = dns_seqno;
 8017b14:	73a0      	strb	r0, [r4, #14]
  entry->state = DNS_STATE_NEW;
 8017b16:	2001      	movs	r0, #1
  req->found = found;
 8017b18:	4613      	mov	r3, r2
 8017b1a:	9a01      	ldr	r2, [sp, #4]
  MEMCPY(entry->name, name, namelen);
 8017b1c:	4639      	mov	r1, r7
  entry->state = DNS_STATE_NEW;
 8017b1e:	72a0      	strb	r0, [r4, #10]
  req->found = found;
 8017b20:	f84a 2023 	str.w	r2, [sl, r3, lsl #2]
  req->dns_table_idx = i;
 8017b24:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
  MEMCPY(entry->name, name, namelen);
 8017b28:	462a      	mov	r2, r5
 8017b2a:	f104 0010 	add.w	r0, r4, #16
  req->dns_table_idx = i;
 8017b2e:	f883 8008 	strb.w	r8, [r3, #8]
  entry->name[namelen] = 0;
 8017b32:	4425      	add	r5, r4
  req->arg   = callback_arg;
 8017b34:	f8c3 9004 	str.w	r9, [r3, #4]
  entry->name[namelen] = 0;
 8017b38:	465f      	mov	r7, fp
  MEMCPY(entry->name, name, namelen);
 8017b3a:	f00a fb39 	bl	80221b0 <memcpy>
  entry->name[namelen] = 0;
 8017b3e:	f885 b010 	strb.w	fp, [r5, #16]
  req->dns_table_idx = i;
 8017b42:	0073      	lsls	r3, r6, #1
 8017b44:	9301      	str	r3, [sp, #4]
 8017b46:	4b40      	ldr	r3, [pc, #256]	; (8017c48 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 8017b48:	f853 2b04 	ldr.w	r2, [r3], #4
 8017b4c:	b2fd      	uxtb	r5, r7
 8017b4e:	b312      	cbz	r2, 8017b96 <dns_gethostbyname_addrtype+0x1ca>
 8017b50:	3701      	adds	r7, #1
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8017b52:	2f04      	cmp	r7, #4
 8017b54:	d1f8      	bne.n	8017b48 <dns_gethostbyname_addrtype+0x17c>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8017b56:	483d      	ldr	r0, [pc, #244]	; (8017c4c <dns_gethostbyname_addrtype+0x280>)
 8017b58:	2304      	movs	r3, #4
 8017b5a:	7805      	ldrb	r5, [r0, #0]
 8017b5c:	3501      	adds	r5, #1
 8017b5e:	b2ed      	uxtb	r5, r5
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8017b60:	2d03      	cmp	r5, #3
 8017b62:	462a      	mov	r2, r5
 8017b64:	d901      	bls.n	8017b6a <dns_gethostbyname_addrtype+0x19e>
 8017b66:	2500      	movs	r5, #0
      idx = 0;
 8017b68:	462a      	mov	r2, r5
    if (dns_pcbs[idx] != NULL) {
 8017b6a:	4f37      	ldr	r7, [pc, #220]	; (8017c48 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8017b6c:	1c69      	adds	r1, r5, #1
 8017b6e:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8017b70:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8017b74:	2a00      	cmp	r2, #0
 8017b76:	d13e      	bne.n	8017bf6 <dns_gethostbyname_addrtype+0x22a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8017b78:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8017b7c:	b2cd      	uxtb	r5, r1
 8017b7e:	d1ef      	bne.n	8017b60 <dns_gethostbyname_addrtype+0x194>
    req->found = NULL;
 8017b80:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 8017b82:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 8017b86:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 8017b88:	4432      	add	r2, r6
 8017b8a:	4616      	mov	r6, r2
  entry->pcb_idx = dns_alloc_pcb();
 8017b8c:	2204      	movs	r2, #4
    req->found = NULL;
 8017b8e:	f84a 3026 	str.w	r3, [sl, r6, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 8017b92:	73e2      	strb	r2, [r4, #15]
    return ERR_MEM;
 8017b94:	e73a      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 8017b96:	202e      	movs	r0, #46	; 0x2e
 8017b98:	f006 fca2 	bl	801e4e0 <udp_new_ip_type>
  if (pcb == NULL) {
 8017b9c:	4681      	mov	r9, r0
 8017b9e:	2800      	cmp	r0, #0
 8017ba0:	d045      	beq.n	8017c2e <dns_gethostbyname_addrtype+0x262>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8017ba2:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 8017c54 <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 8017ba6:	f00b fb41 	bl	802322c <rand>
 8017baa:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 8017bac:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8017bb0:	d3f9      	bcc.n	8017ba6 <dns_gethostbyname_addrtype+0x1da>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 8017bb2:	4659      	mov	r1, fp
 8017bb4:	4648      	mov	r0, r9
 8017bb6:	f006 fa1f 	bl	801dff8 <udp_bind>
  } while (err == ERR_USE);
 8017bba:	f110 0f08 	cmn.w	r0, #8
 8017bbe:	d0f2      	beq.n	8017ba6 <dns_gethostbyname_addrtype+0x1da>
  if (err != ERR_OK) {
 8017bc0:	b9d8      	cbnz	r0, 8017bfa <dns_gethostbyname_addrtype+0x22e>
  udp_recv(pcb, dns_recv, NULL);
 8017bc2:	4602      	mov	r2, r0
 8017bc4:	4922      	ldr	r1, [pc, #136]	; (8017c50 <dns_gethostbyname_addrtype+0x284>)
 8017bc6:	4648      	mov	r0, r9
 8017bc8:	f006 fc3e 	bl	801e448 <udp_recv>
      dns_last_pcb_idx = i;
 8017bcc:	4b1f      	ldr	r3, [pc, #124]	; (8017c4c <dns_gethostbyname_addrtype+0x280>)
    dns_pcbs[i] = dns_alloc_random_port();
 8017bce:	4a1e      	ldr	r2, [pc, #120]	; (8017c48 <dns_gethostbyname_addrtype+0x27c>)
      dns_last_pcb_idx = i;
 8017bd0:	701d      	strb	r5, [r3, #0]
    dns_pcbs[i] = dns_alloc_random_port();
 8017bd2:	f842 9027 	str.w	r9, [r2, r7, lsl #2]
  dns_seqno++;
 8017bd6:	4a1a      	ldr	r2, [pc, #104]	; (8017c40 <dns_gethostbyname_addrtype+0x274>)
  dns_check_entry(i);
 8017bd8:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 8017bda:	73e5      	strb	r5, [r4, #15]
  dns_seqno++;
 8017bdc:	7813      	ldrb	r3, [r2, #0]
 8017bde:	3301      	adds	r3, #1
 8017be0:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8017be2:	f7ff fcb1 	bl	8017548 <dns_check_entry>
  return ERR_INPROGRESS;
 8017be6:	f06f 0004 	mvn.w	r0, #4
 8017bea:	e70f      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8017bec:	46b0      	mov	r8, r6
 8017bee:	e781      	b.n	8017af4 <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8017bf0:	f06f 000f 	mvn.w	r0, #15
 8017bf4:	e70a      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 8017bf6:	7005      	strb	r5, [r0, #0]
      return idx;
 8017bf8:	e7ed      	b.n	8017bd6 <dns_gethostbyname_addrtype+0x20a>
    udp_remove(pcb);
 8017bfa:	4648      	mov	r0, r9
 8017bfc:	f006 fc36 	bl	801e46c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8017c00:	2300      	movs	r3, #0
 8017c02:	4a11      	ldr	r2, [pc, #68]	; (8017c48 <dns_gethostbyname_addrtype+0x27c>)
 8017c04:	f842 3027 	str.w	r3, [r2, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8017c08:	e7a5      	b.n	8017b56 <dns_gethostbyname_addrtype+0x18a>
          dns_requests[r].found = found;
 8017c0a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
 8017c0e:	4a0d      	ldr	r2, [pc, #52]	; (8017c44 <dns_gethostbyname_addrtype+0x278>)
 8017c10:	9901      	ldr	r1, [sp, #4]
          return ERR_INPROGRESS;
 8017c12:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].found = found;
 8017c16:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8017c1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
          dns_requests[r].arg = callback_arg;
 8017c1e:	f8c3 9004 	str.w	r9, [r3, #4]
          dns_requests[r].dns_table_idx = i;
 8017c22:	f883 b008 	strb.w	fp, [r3, #8]
          return ERR_INPROGRESS;
 8017c26:	e6f1      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8017c28:	f06f 0005 	mvn.w	r0, #5
 8017c2c:	e6ee      	b.n	8017a0c <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 8017c2e:	4b06      	ldr	r3, [pc, #24]	; (8017c48 <dns_gethostbyname_addrtype+0x27c>)
 8017c30:	f843 9027 	str.w	r9, [r3, r7, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8017c34:	e78f      	b.n	8017b56 <dns_gethostbyname_addrtype+0x18a>
 8017c36:	bf00      	nop
 8017c38:	2001a4d4 	.word	0x2001a4d4
 8017c3c:	2001a4cc 	.word	0x2001a4cc
 8017c40:	2001a4c8 	.word	0x2001a4c8
 8017c44:	2001a498 	.word	0x2001a498
 8017c48:	2001a488 	.word	0x2001a488
 8017c4c:	2001a484 	.word	0x2001a484
 8017c50:	08017655 	.word	0x08017655
 8017c54:	08042888 	.word	0x08042888

08017c58 <dns_gethostbyname>:
{
 8017c58:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8017c5a:	2400      	movs	r4, #0
{
 8017c5c:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8017c5e:	9400      	str	r4, [sp, #0]
 8017c60:	f7ff feb4 	bl	80179cc <dns_gethostbyname_addrtype>
}
 8017c64:	b002      	add	sp, #8
 8017c66:	bd10      	pop	{r4, pc}

08017c68 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8017c68:	2300      	movs	r3, #0
{
 8017c6a:	b470      	push	{r4, r5, r6}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8017c6c:	4299      	cmp	r1, r3
{
 8017c6e:	b083      	sub	sp, #12
  int odd = ((mem_ptr_t)pb & 1);
 8017c70:	f000 0601 	and.w	r6, r0, #1
  u16_t t = 0;
 8017c74:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 8017c78:	dd05      	ble.n	8017c86 <lwip_standard_chksum+0x1e>
 8017c7a:	b126      	cbz	r6, 8017c86 <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 8017c7c:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 8017c80:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 8017c82:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 8017c86:	2901      	cmp	r1, #1
 8017c88:	dd26      	ble.n	8017cd8 <lwip_standard_chksum+0x70>
 8017c8a:	3902      	subs	r1, #2
  u32_t sum = 0;
 8017c8c:	2300      	movs	r3, #0
 8017c8e:	084d      	lsrs	r5, r1, #1
 8017c90:	1c6c      	adds	r4, r5, #1
 8017c92:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    sum += *ps++;
 8017c96:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 8017c9a:	4284      	cmp	r4, r0
    sum += *ps++;
 8017c9c:	4413      	add	r3, r2
  while (len > 1) {
 8017c9e:	d1fa      	bne.n	8017c96 <lwip_standard_chksum+0x2e>
 8017ca0:	ebc5 75c5 	rsb	r5, r5, r5, lsl #31
 8017ca4:	eb01 0145 	add.w	r1, r1, r5, lsl #1
    len -= 2;
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 8017ca8:	2901      	cmp	r1, #1
 8017caa:	d102      	bne.n	8017cb2 <lwip_standard_chksum+0x4a>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 8017cac:	7822      	ldrb	r2, [r4, #0]
 8017cae:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 8017cb2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017cb6:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 8017cb8:	b298      	uxth	r0, r3
 8017cba:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 8017cbe:	b298      	uxth	r0, r3
 8017cc0:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 8017cc4:	b126      	cbz	r6, 8017cd0 <lwip_standard_chksum+0x68>
    sum = SWAP_BYTES_IN_WORD(sum);
 8017cc6:	0203      	lsls	r3, r0, #8
 8017cc8:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 8017cd0:	b280      	uxth	r0, r0
 8017cd2:	b003      	add	sp, #12
 8017cd4:	bc70      	pop	{r4, r5, r6}
 8017cd6:	4770      	bx	lr
  ps = (const u16_t *)(const void *)pb;
 8017cd8:	4604      	mov	r4, r0
  u32_t sum = 0;
 8017cda:	2300      	movs	r3, #0
 8017cdc:	e7e4      	b.n	8017ca8 <lwip_standard_chksum+0x40>
 8017cde:	bf00      	nop

08017ce0 <inet_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                   const ip4_addr_t *src, const ip4_addr_t *dest)
{
 8017ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017ce4:	9c06      	ldr	r4, [sp, #24]
 8017ce6:	4688      	mov	r8, r1
 8017ce8:	4617      	mov	r7, r2
  u32_t addr;

  addr = ip4_addr_get_u32(src);
  acc = (addr & 0xffffUL);
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
  addr = ip4_addr_get_u32(dest);
 8017cea:	6826      	ldr	r6, [r4, #0]
  addr = ip4_addr_get_u32(src);
 8017cec:	681c      	ldr	r4, [r3, #0]
  acc = (u32_t)(acc + (addr & 0xffffUL));
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8017cee:	0c33      	lsrs	r3, r6, #16
 8017cf0:	fa13 f686 	uxtah	r6, r3, r6
 8017cf4:	fa16 f684 	uxtah	r6, r6, r4
 8017cf8:	eb06 4614 	add.w	r6, r6, r4, lsr #16
  /* fold down to 16 bits */
  acc = FOLD_U32T(acc);
 8017cfc:	b2b4      	uxth	r4, r6
 8017cfe:	eb04 4616 	add.w	r6, r4, r6, lsr #16
  acc = FOLD_U32T(acc);
 8017d02:	b2b4      	uxth	r4, r6
 8017d04:	eb04 4416 	add.w	r4, r4, r6, lsr #16
  for (q = p; q != NULL; q = q->next) {
 8017d08:	b1f0      	cbz	r0, 8017d48 <inet_chksum_pseudo+0x68>
 8017d0a:	4605      	mov	r5, r0
  int swapped = 0;
 8017d0c:	2600      	movs	r6, #0
    acc += LWIP_CHKSUM(q->payload, q->len);
 8017d0e:	8969      	ldrh	r1, [r5, #10]
 8017d10:	6868      	ldr	r0, [r5, #4]
 8017d12:	f7ff ffa9 	bl	8017c68 <lwip_standard_chksum>
 8017d16:	4420      	add	r0, r4
    if (q->len % 2 != 0) {
 8017d18:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8017d1a:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 8017d1c:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8017d20:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      acc = SWAP_BYTES_IN_WORD(acc);
 8017d24:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8017d28:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8017d2c:	d003      	beq.n	8017d36 <inet_chksum_pseudo+0x56>
      acc = SWAP_BYTES_IN_WORD(acc);
 8017d2e:	b284      	uxth	r4, r0
 8017d30:	f086 0601 	eor.w	r6, r6, #1
 8017d34:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8017d36:	682d      	ldr	r5, [r5, #0]
 8017d38:	2d00      	cmp	r5, #0
 8017d3a:	d1e8      	bne.n	8017d0e <inet_chksum_pseudo+0x2e>
  if (swapped) {
 8017d3c:	b126      	cbz	r6, 8017d48 <inet_chksum_pseudo+0x68>
    acc = SWAP_BYTES_IN_WORD(acc);
 8017d3e:	0223      	lsls	r3, r4, #8
 8017d40:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8017d44:	b29b      	uxth	r3, r3
 8017d46:	431c      	orrs	r4, r3
  acc += (u32_t)lwip_htons((u16_t)proto);
 8017d48:	4640      	mov	r0, r8
 8017d4a:	f7ff fa5f 	bl	801720c <lwip_htons>
 8017d4e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8017d50:	4638      	mov	r0, r7
 8017d52:	f7ff fa5b 	bl	801720c <lwip_htons>
 8017d56:	4428      	add	r0, r5
 8017d58:	4404      	add	r4, r0
  acc = FOLD_U32T(acc);
 8017d5a:	b2a0      	uxth	r0, r4
 8017d5c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8017d60:	b2a0      	uxth	r0, r4
 8017d62:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  return (u16_t)~(acc & 0xffffUL);
 8017d66:	43c0      	mvns	r0, r0

  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
}
 8017d68:	b280      	uxth	r0, r0
 8017d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017d6e:	bf00      	nop

08017d70 <ip_chksum_pseudo>:
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
 8017d70:	f7ff bfb6 	b.w	8017ce0 <inet_chksum_pseudo>

08017d74 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 8017d74:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 8017d76:	f7ff ff77 	bl	8017c68 <lwip_standard_chksum>
 8017d7a:	43c0      	mvns	r0, r0
}
 8017d7c:	b280      	uxth	r0, r0
 8017d7e:	bd08      	pop	{r3, pc}

08017d80 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 8017d80:	b330      	cbz	r0, 8017dd0 <inet_chksum_pbuf+0x50>
{
 8017d82:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 8017d84:	2600      	movs	r6, #0
 8017d86:	4605      	mov	r5, r0
  acc = 0;
 8017d88:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 8017d8a:	8969      	ldrh	r1, [r5, #10]
 8017d8c:	6868      	ldr	r0, [r5, #4]
 8017d8e:	f7ff ff6b 	bl	8017c68 <lwip_standard_chksum>
 8017d92:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8017d94:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 8017d96:	b2a0      	uxth	r0, r4
    if (q->len % 2 != 0) {
 8017d98:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 8017d9c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8017da0:	ea4f 2004 	mov.w	r0, r4, lsl #8
 8017da4:	f3c4 2307 	ubfx	r3, r4, #8, #8
    if (q->len % 2 != 0) {
 8017da8:	d003      	beq.n	8017db2 <inet_chksum_pbuf+0x32>
      acc = SWAP_BYTES_IN_WORD(acc);
 8017daa:	b284      	uxth	r4, r0
 8017dac:	f086 0601 	eor.w	r6, r6, #1
 8017db0:	431c      	orrs	r4, r3
  for (q = p; q != NULL; q = q->next) {
 8017db2:	682d      	ldr	r5, [r5, #0]
 8017db4:	2d00      	cmp	r5, #0
 8017db6:	d1e8      	bne.n	8017d8a <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 8017db8:	b13e      	cbz	r6, 8017dca <inet_chksum_pbuf+0x4a>
    acc = SWAP_BYTES_IN_WORD(acc);
 8017dba:	0220      	lsls	r0, r4, #8
 8017dbc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8017dc0:	b280      	uxth	r0, r0
 8017dc2:	4320      	orrs	r0, r4
 8017dc4:	43c0      	mvns	r0, r0
 8017dc6:	b280      	uxth	r0, r0
  }
  return (u16_t)~(acc & 0xffffUL);
}
 8017dc8:	bd70      	pop	{r4, r5, r6, pc}
 8017dca:	43e0      	mvns	r0, r4
 8017dcc:	b280      	uxth	r0, r0
 8017dce:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8017dd0:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 8017dd4:	4770      	bx	lr
 8017dd6:	bf00      	nop

08017dd8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017dd8:	b508      	push	{r3, lr}
#ifndef LWIP_SKIP_PACKING_CHECK
  LWIP_ASSERT("Struct packing not implemented correctly. Check your lwIP port.", sizeof(struct packed_struct_test) == PACKED_STRUCT_TEST_EXPECTED_SIZE);
#endif

  /* Modules initialization */
  stats_init();
 8017dda:	f001 fcb9 	bl	8019750 <stats_init>
#if !NO_SYS
  sys_init();
 8017dde:	f009 fdad 	bl	802193c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8017de2:	f000 f96f 	bl	80180c4 <mem_init>
  memp_init();
 8017de6:	f000 fd55 	bl	8018894 <memp_init>
  pbuf_init();
  netif_init();
 8017dea:	f000 fe17 	bl	8018a1c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8017dee:	f005 ffc9 	bl	801dd84 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8017df2:	f001 fd17 	bl	8019824 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8017df6:	f7ff fdc3 	bl	8017980 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 8017dfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 8017dfe:	f005 bf53 	b.w	801dca8 <sys_timeouts_init>
 8017e02:	bf00      	nop

08017e04 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017e04:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8017e08:	8841      	ldrh	r1, [r0, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017e0a:	4299      	cmp	r1, r3
{
 8017e0c:	b430      	push	{r4, r5}
  nmem = ptr_to_mem(mem->next);
 8017e0e:	8805      	ldrh	r5, [r0, #0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017e10:	d80d      	bhi.n	8017e2e <mem_link_valid+0x2a>
 8017e12:	429d      	cmp	r5, r3
 8017e14:	bf94      	ite	ls
 8017e16:	2200      	movls	r2, #0
 8017e18:	2201      	movhi	r2, #1
 8017e1a:	b942      	cbnz	r2, 8017e2e <mem_link_valid+0x2a>
  return (mem_size_t)((u8_t *)mem - ram);
 8017e1c:	4b0c      	ldr	r3, [pc, #48]	; (8017e50 <mem_link_valid+0x4c>)
 8017e1e:	681c      	ldr	r4, [r3, #0]
 8017e20:	1b03      	subs	r3, r0, r4
 8017e22:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017e24:	4299      	cmp	r1, r3
 8017e26:	d005      	beq.n	8017e34 <mem_link_valid+0x30>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017e28:	5a61      	ldrh	r1, [r4, r1]
 8017e2a:	4299      	cmp	r1, r3
 8017e2c:	d002      	beq.n	8017e34 <mem_link_valid+0x30>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
    return 0;
 8017e2e:	2000      	movs	r0, #0
  }
  return 1;
}
 8017e30:	bc30      	pop	{r4, r5}
 8017e32:	4770      	bx	lr
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017e34:	4a07      	ldr	r2, [pc, #28]	; (8017e54 <mem_link_valid+0x50>)
  return (struct mem *)(void *)&ram[ptr];
 8017e36:	442c      	add	r4, r5
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017e38:	6812      	ldr	r2, [r2, #0]
 8017e3a:	42a2      	cmp	r2, r4
 8017e3c:	d006      	beq.n	8017e4c <mem_link_valid+0x48>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017e3e:	8860      	ldrh	r0, [r4, #2]
 8017e40:	1ac0      	subs	r0, r0, r3
 8017e42:	fab0 f080 	clz	r0, r0
}
 8017e46:	bc30      	pop	{r4, r5}
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017e48:	0940      	lsrs	r0, r0, #5
}
 8017e4a:	4770      	bx	lr
  return 1;
 8017e4c:	2001      	movs	r0, #1
 8017e4e:	e7ef      	b.n	8017e30 <mem_link_valid+0x2c>
 8017e50:	2001a920 	.word	0x2001a920
 8017e54:	2001a924 	.word	0x2001a924

08017e58 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8017e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8017e5c:	4f5f      	ldr	r7, [pc, #380]	; (8017fdc <mem_sanity+0x184>)
 8017e5e:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 8017e60:	7935      	ldrb	r5, [r6, #4]
 8017e62:	2d01      	cmp	r5, #1
 8017e64:	d907      	bls.n	8017e76 <mem_sanity+0x1e>
 8017e66:	4b5e      	ldr	r3, [pc, #376]	; (8017fe0 <mem_sanity+0x188>)
 8017e68:	f240 223f 	movw	r2, #575	; 0x23f
 8017e6c:	495d      	ldr	r1, [pc, #372]	; (8017fe4 <mem_sanity+0x18c>)
 8017e6e:	485e      	ldr	r0, [pc, #376]	; (8017fe8 <mem_sanity+0x190>)
 8017e70:	f00b f938 	bl	80230e4 <iprintf>
 8017e74:	7935      	ldrb	r5, [r6, #4]
  last_used = mem->used;
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8017e76:	8873      	ldrh	r3, [r6, #2]
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	f040 80a7 	bne.w	8017fcc <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8017e7e:	8834      	ldrh	r4, [r6, #0]
 8017e80:	f242 7310 	movw	r3, #10000	; 0x2710
 8017e84:	429c      	cmp	r4, r3
 8017e86:	f200 8098 	bhi.w	8017fba <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 8017e8a:	683b      	ldr	r3, [r7, #0]
 8017e8c:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 8017e8e:	429c      	cmp	r4, r3
 8017e90:	d961      	bls.n	8017f56 <mem_sanity+0xfe>
 8017e92:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8018004 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8017e96:	f8df a148 	ldr.w	sl, [pc, #328]	; 8017fe0 <mem_sanity+0x188>
 8017e9a:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8018008 <mem_sanity+0x1b0>
 8017e9e:	4e52      	ldr	r6, [pc, #328]	; (8017fe8 <mem_sanity+0x190>)
 8017ea0:	e012      	b.n	8017ec8 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8017ea2:	2b01      	cmp	r3, #1
 8017ea4:	d006      	beq.n	8017eb4 <mem_sanity+0x5c>
 8017ea6:	4653      	mov	r3, sl
 8017ea8:	f240 2251 	movw	r2, #593	; 0x251
 8017eac:	494f      	ldr	r1, [pc, #316]	; (8017fec <mem_sanity+0x194>)
 8017eae:	4630      	mov	r0, r6
 8017eb0:	f00b f918 	bl	80230e4 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8017eb4:	4620      	mov	r0, r4
 8017eb6:	f7ff ffa5 	bl	8017e04 <mem_link_valid>
 8017eba:	b380      	cbz	r0, 8017f1e <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 8017ec0:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 8017ec2:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8017ec4:	42a3      	cmp	r3, r4
 8017ec6:	d246      	bcs.n	8017f56 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8017ec8:	f8d8 2000 	ldr.w	r2, [r8]
 8017ecc:	42a2      	cmp	r2, r4
 8017ece:	d942      	bls.n	8017f56 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 8017ed0:	1ce2      	adds	r2, r4, #3
 8017ed2:	f022 0203 	bic.w	r2, r2, #3
 8017ed6:	4294      	cmp	r4, r2
 8017ed8:	d006      	beq.n	8017ee8 <mem_sanity+0x90>
 8017eda:	4653      	mov	r3, sl
 8017edc:	f240 2249 	movw	r2, #585	; 0x249
 8017ee0:	4649      	mov	r1, r9
 8017ee2:	4630      	mov	r0, r6
 8017ee4:	f00b f8fe 	bl	80230e4 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8017ee8:	8862      	ldrh	r2, [r4, #2]
 8017eea:	f242 7310 	movw	r3, #10000	; 0x2710
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d81d      	bhi.n	8017f2e <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8017ef2:	8822      	ldrh	r2, [r4, #0]
 8017ef4:	f242 7310 	movw	r3, #10000	; 0x2710
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d824      	bhi.n	8017f46 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8017efc:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 8017efe:	2d00      	cmp	r5, #0
 8017f00:	d0cf      	beq.n	8017ea2 <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 8017f02:	2b01      	cmp	r3, #1
 8017f04:	d9d6      	bls.n	8017eb4 <mem_sanity+0x5c>
 8017f06:	4653      	mov	r3, sl
 8017f08:	f240 2253 	movw	r2, #595	; 0x253
 8017f0c:	4938      	ldr	r1, [pc, #224]	; (8017ff0 <mem_sanity+0x198>)
 8017f0e:	4630      	mov	r0, r6
 8017f10:	f00b f8e8 	bl	80230e4 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8017f14:	4620      	mov	r0, r4
 8017f16:	f7ff ff75 	bl	8017e04 <mem_link_valid>
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	d1ce      	bne.n	8017ebc <mem_sanity+0x64>
 8017f1e:	4653      	mov	r3, sl
 8017f20:	f240 2256 	movw	r2, #598	; 0x256
 8017f24:	4933      	ldr	r1, [pc, #204]	; (8017ff4 <mem_sanity+0x19c>)
 8017f26:	4630      	mov	r0, r6
 8017f28:	f00b f8dc 	bl	80230e4 <iprintf>
 8017f2c:	e7c6      	b.n	8017ebc <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8017f2e:	4653      	mov	r3, sl
 8017f30:	f240 224a 	movw	r2, #586	; 0x24a
 8017f34:	4930      	ldr	r1, [pc, #192]	; (8017ff8 <mem_sanity+0x1a0>)
 8017f36:	4630      	mov	r0, r6
 8017f38:	f00b f8d4 	bl	80230e4 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8017f3c:	8822      	ldrh	r2, [r4, #0]
 8017f3e:	f242 7310 	movw	r3, #10000	; 0x2710
 8017f42:	429a      	cmp	r2, r3
 8017f44:	d9da      	bls.n	8017efc <mem_sanity+0xa4>
 8017f46:	4653      	mov	r3, sl
 8017f48:	f240 224b 	movw	r2, #587	; 0x24b
 8017f4c:	492b      	ldr	r1, [pc, #172]	; (8017ffc <mem_sanity+0x1a4>)
 8017f4e:	4630      	mov	r0, r6
 8017f50:	f00b f8c8 	bl	80230e4 <iprintf>
 8017f54:	e7d2      	b.n	8017efc <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8017f56:	f242 7210 	movw	r2, #10000	; 0x2710
 8017f5a:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8017f5c:	4294      	cmp	r4, r2
 8017f5e:	d006      	beq.n	8017f6e <mem_sanity+0x116>
 8017f60:	4b1f      	ldr	r3, [pc, #124]	; (8017fe0 <mem_sanity+0x188>)
 8017f62:	f240 225b 	movw	r2, #603	; 0x25b
 8017f66:	4926      	ldr	r1, [pc, #152]	; (8018000 <mem_sanity+0x1a8>)
 8017f68:	481f      	ldr	r0, [pc, #124]	; (8017fe8 <mem_sanity+0x190>)
 8017f6a:	f00b f8bb 	bl	80230e4 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 8017f6e:	7923      	ldrb	r3, [r4, #4]
 8017f70:	2b01      	cmp	r3, #1
 8017f72:	d006      	beq.n	8017f82 <mem_sanity+0x12a>
 8017f74:	4b1a      	ldr	r3, [pc, #104]	; (8017fe0 <mem_sanity+0x188>)
 8017f76:	f44f 7217 	mov.w	r2, #604	; 0x25c
 8017f7a:	491a      	ldr	r1, [pc, #104]	; (8017fe4 <mem_sanity+0x18c>)
 8017f7c:	481a      	ldr	r0, [pc, #104]	; (8017fe8 <mem_sanity+0x190>)
 8017f7e:	f00b f8b1 	bl	80230e4 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 8017f82:	8862      	ldrh	r2, [r4, #2]
 8017f84:	f242 7310 	movw	r3, #10000	; 0x2710
 8017f88:	429a      	cmp	r2, r3
 8017f8a:	d006      	beq.n	8017f9a <mem_sanity+0x142>
 8017f8c:	4b14      	ldr	r3, [pc, #80]	; (8017fe0 <mem_sanity+0x188>)
 8017f8e:	f240 225d 	movw	r2, #605	; 0x25d
 8017f92:	4919      	ldr	r1, [pc, #100]	; (8017ff8 <mem_sanity+0x1a0>)
 8017f94:	4814      	ldr	r0, [pc, #80]	; (8017fe8 <mem_sanity+0x190>)
 8017f96:	f00b f8a5 	bl	80230e4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8017f9a:	8822      	ldrh	r2, [r4, #0]
 8017f9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d101      	bne.n	8017fa8 <mem_sanity+0x150>
}
 8017fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8017fa8:	4b0d      	ldr	r3, [pc, #52]	; (8017fe0 <mem_sanity+0x188>)
 8017faa:	f240 225e 	movw	r2, #606	; 0x25e
 8017fae:	4913      	ldr	r1, [pc, #76]	; (8017ffc <mem_sanity+0x1a4>)
 8017fb0:	480d      	ldr	r0, [pc, #52]	; (8017fe8 <mem_sanity+0x190>)
}
 8017fb2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 8017fb6:	f00b b895 	b.w	80230e4 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8017fba:	4b09      	ldr	r3, [pc, #36]	; (8017fe0 <mem_sanity+0x188>)
 8017fbc:	f240 2242 	movw	r2, #578	; 0x242
 8017fc0:	490e      	ldr	r1, [pc, #56]	; (8017ffc <mem_sanity+0x1a4>)
 8017fc2:	4809      	ldr	r0, [pc, #36]	; (8017fe8 <mem_sanity+0x190>)
 8017fc4:	f00b f88e 	bl	80230e4 <iprintf>
 8017fc8:	8834      	ldrh	r4, [r6, #0]
 8017fca:	e75e      	b.n	8017e8a <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8017fcc:	4b04      	ldr	r3, [pc, #16]	; (8017fe0 <mem_sanity+0x188>)
 8017fce:	f240 2241 	movw	r2, #577	; 0x241
 8017fd2:	4909      	ldr	r1, [pc, #36]	; (8017ff8 <mem_sanity+0x1a0>)
 8017fd4:	4804      	ldr	r0, [pc, #16]	; (8017fe8 <mem_sanity+0x190>)
 8017fd6:	f00b f885 	bl	80230e4 <iprintf>
 8017fda:	e750      	b.n	8017e7e <mem_sanity+0x26>
 8017fdc:	2001a920 	.word	0x2001a920
 8017fe0:	0804009c 	.word	0x0804009c
 8017fe4:	080400cc 	.word	0x080400cc
 8017fe8:	08029ba0 	.word	0x08029ba0
 8017fec:	08040134 	.word	0x08040134
 8017ff0:	0804014c 	.word	0x0804014c
 8017ff4:	08040168 	.word	0x08040168
 8017ff8:	080400e4 	.word	0x080400e4
 8017ffc:	08040100 	.word	0x08040100
 8018000:	08040180 	.word	0x08040180
 8018004:	2001a924 	.word	0x2001a924
 8018008:	0804011c 	.word	0x0804011c

0801800c <mem_overflow_check_raw>:
{
 801800c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018010:	1e4c      	subs	r4, r1, #1
 8018012:	310f      	adds	r1, #15
 8018014:	b0a3      	sub	sp, #140	; 0x8c
 8018016:	4606      	mov	r6, r0
 8018018:	4615      	mov	r5, r2
 801801a:	4698      	mov	r8, r3
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801801c:	f8df 9078 	ldr.w	r9, [pc, #120]	; 8018098 <mem_overflow_check_raw+0x8c>
 8018020:	4404      	add	r4, r0
 8018022:	180f      	adds	r7, r1, r0
      LWIP_ASSERT(errstr, 0);
 8018024:	f8df b074 	ldr.w	fp, [pc, #116]	; 801809c <mem_overflow_check_raw+0x90>
 8018028:	f8df a074 	ldr.w	sl, [pc, #116]	; 80180a0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 801802c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018030:	464a      	mov	r2, r9
 8018032:	2180      	movs	r1, #128	; 0x80
 8018034:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018036:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8018038:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801803a:	d009      	beq.n	8018050 <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 801803c:	f8cd 8000 	str.w	r8, [sp]
 8018040:	f00b f994 	bl	802336c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8018044:	465b      	mov	r3, fp
 8018046:	a902      	add	r1, sp, #8
 8018048:	226d      	movs	r2, #109	; 0x6d
 801804a:	4650      	mov	r0, sl
 801804c:	f00b f84a 	bl	80230e4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8018050:	42bc      	cmp	r4, r7
 8018052:	d1eb      	bne.n	801802c <mem_overflow_check_raw+0x20>
 8018054:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018058:	4f0e      	ldr	r7, [pc, #56]	; (8018094 <mem_overflow_check_raw+0x88>)
 801805a:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 801805c:	f8df a03c 	ldr.w	sl, [pc, #60]	; 801809c <mem_overflow_check_raw+0x90>
 8018060:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80180a0 <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8018064:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018068:	463a      	mov	r2, r7
 801806a:	2180      	movs	r1, #128	; 0x80
 801806c:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 801806e:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018070:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8018072:	d009      	beq.n	8018088 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8018074:	f8cd 8000 	str.w	r8, [sp]
 8018078:	f00b f978 	bl	802336c <sniprintf>
      LWIP_ASSERT(errstr, 0);
 801807c:	4653      	mov	r3, sl
 801807e:	a902      	add	r1, sp, #8
 8018080:	2278      	movs	r2, #120	; 0x78
 8018082:	4648      	mov	r0, r9
 8018084:	f00b f82e 	bl	80230e4 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8018088:	42b4      	cmp	r4, r6
 801808a:	d1eb      	bne.n	8018064 <mem_overflow_check_raw+0x58>
}
 801808c:	b023      	add	sp, #140	; 0x8c
 801808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018092:	bf00      	nop
 8018094:	080401b4 	.word	0x080401b4
 8018098:	08040194 	.word	0x08040194
 801809c:	0804009c 	.word	0x0804009c
 80180a0:	08029ba0 	.word	0x08029ba0

080180a4 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80180a4:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 80180a8:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 80180aa:	f840 3c10 	str.w	r3, [r0, #-16]
 80180ae:	f840 3c0c 	str.w	r3, [r0, #-12]
 80180b2:	f840 3c08 	str.w	r3, [r0, #-8]
 80180b6:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 80180ba:	5043      	str	r3, [r0, r1]
 80180bc:	6053      	str	r3, [r2, #4]
 80180be:	6093      	str	r3, [r2, #8]
 80180c0:	60d3      	str	r3, [r2, #12]
}
 80180c2:	4770      	bx	lr

080180c4 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80180c4:	4b13      	ldr	r3, [pc, #76]	; (8018114 <mem_init+0x50>)
  mem->used = 0;
 80180c6:	2200      	movs	r2, #0
  ram_end->used = 1;
 80180c8:	2101      	movs	r1, #1
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80180ca:	4813      	ldr	r0, [pc, #76]	; (8018118 <mem_init+0x54>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80180cc:	f023 0303 	bic.w	r3, r3, #3
{
 80180d0:	b570      	push	{r4, r5, r6, lr}
  mem->next = MEM_SIZE_ALIGNED;
 80180d2:	f242 7410 	movw	r4, #10000	; 0x2710
  mem->used = 0;
 80180d6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80180d8:	4e10      	ldr	r6, [pc, #64]	; (801811c <mem_init+0x58>)
  return (struct mem *)(void *)&ram[ptr];
 80180da:	191a      	adds	r2, r3, r4
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80180dc:	4d10      	ldr	r5, [pc, #64]	; (8018120 <mem_init+0x5c>)
  mem->next = MEM_SIZE_ALIGNED;
 80180de:	601c      	str	r4, [r3, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 80180e0:	511e      	str	r6, [r3, r4]
  ram_end->used = 1;
 80180e2:	7111      	strb	r1, [r2, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80180e4:	6002      	str	r2, [r0, #0]
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80180e6:	602b      	str	r3, [r5, #0]
  MEM_SANITY();
 80180e8:	f7ff feb6 	bl	8017e58 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 80180ec:	682a      	ldr	r2, [r5, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80180ee:	490d      	ldr	r1, [pc, #52]	; (8018124 <mem_init+0x60>)
  lfree = (struct mem *)(void *)ram;
 80180f0:	4b0d      	ldr	r3, [pc, #52]	; (8018128 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80180f2:	480e      	ldr	r0, [pc, #56]	; (801812c <mem_init+0x68>)
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);
 80180f4:	f8a1 40aa 	strh.w	r4, [r1, #170]	; 0xaa
  lfree = (struct mem *)(void *)ram;
 80180f8:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80180fa:	f009 fc2b 	bl	8021954 <sys_mutex_new>
 80180fe:	b900      	cbnz	r0, 8018102 <mem_init+0x3e>
}
 8018100:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018102:	4b0b      	ldr	r3, [pc, #44]	; (8018130 <mem_init+0x6c>)
 8018104:	f240 221f 	movw	r2, #543	; 0x21f
 8018108:	490a      	ldr	r1, [pc, #40]	; (8018134 <mem_init+0x70>)
 801810a:	480b      	ldr	r0, [pc, #44]	; (8018138 <mem_init+0x74>)
}
 801810c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8018110:	f00a bfe8 	b.w	80230e4 <iprintf>
 8018114:	2001f47f 	.word	0x2001f47f
 8018118:	2001a924 	.word	0x2001a924
 801811c:	27102710 	.word	0x27102710
 8018120:	2001a920 	.word	0x2001a920
 8018124:	2002e38c 	.word	0x2002e38c
 8018128:	2001a914 	.word	0x2001a914
 801812c:	2001a91c 	.word	0x2001a91c
 8018130:	0804009c 	.word	0x0804009c
 8018134:	080401d4 	.word	0x080401d4
 8018138:	08029ba0 	.word	0x08029ba0

0801813c <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801813c:	2800      	cmp	r0, #0
 801813e:	f000 8087 	beq.w	8018250 <mem_free+0x114>
{
 8018142:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8018146:	f010 0803 	ands.w	r8, r0, #3
 801814a:	4604      	mov	r4, r0
 801814c:	f040 8081 	bne.w	8018252 <mem_free+0x116>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018150:	4e5e      	ldr	r6, [pc, #376]	; (80182cc <mem_free+0x190>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018152:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8018156:	6833      	ldr	r3, [r6, #0]
 8018158:	42ab      	cmp	r3, r5
 801815a:	d805      	bhi.n	8018168 <mem_free+0x2c>
 801815c:	4f5c      	ldr	r7, [pc, #368]	; (80182d0 <mem_free+0x194>)
 801815e:	f100 030c 	add.w	r3, r0, #12
 8018162:	683a      	ldr	r2, [r7, #0]
 8018164:	429a      	cmp	r2, r3
 8018166:	d20e      	bcs.n	8018186 <mem_free+0x4a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8018168:	4b5a      	ldr	r3, [pc, #360]	; (80182d4 <mem_free+0x198>)
 801816a:	f240 227f 	movw	r2, #639	; 0x27f
 801816e:	495a      	ldr	r1, [pc, #360]	; (80182d8 <mem_free+0x19c>)
    MEM_STATS_INC_LOCKED(illegal);
    return;
  }

  if (!mem_link_valid(mem)) {
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8018170:	485a      	ldr	r0, [pc, #360]	; (80182dc <mem_free+0x1a0>)
 8018172:	f00a ffb7 	bl	80230e4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018176:	4a5a      	ldr	r2, [pc, #360]	; (80182e0 <mem_free+0x1a4>)
 8018178:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801817c:	3301      	adds	r3, #1
 801817e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8018182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8018186:	4b57      	ldr	r3, [pc, #348]	; (80182e4 <mem_free+0x1a8>)
 8018188:	4a57      	ldr	r2, [pc, #348]	; (80182e8 <mem_free+0x1ac>)
 801818a:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 801818e:	f7ff ff3d 	bl	801800c <mem_overflow_check_raw>
  if (!mem->used) {
 8018192:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8018196:	2b00      	cmp	r3, #0
 8018198:	f000 8088 	beq.w	80182ac <mem_free+0x170>
  if (!mem_link_valid(mem)) {
 801819c:	4628      	mov	r0, r5
 801819e:	f7ff fe31 	bl	8017e04 <mem_link_valid>
 80181a2:	2800      	cmp	r0, #0
 80181a4:	f000 8087 	beq.w	80182b6 <mem_free+0x17a>
  if (mem < lfree) {
 80181a8:	f8df 9160 	ldr.w	r9, [pc, #352]	; 801830c <mem_free+0x1d0>
  mem->used = 0;
 80181ac:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 80181b0:	f8d9 3000 	ldr.w	r3, [r9]
 80181b4:	42ab      	cmp	r3, r5
 80181b6:	d901      	bls.n	80181bc <mem_free+0x80>
    lfree = mem;
 80181b8:	f8c9 5000 	str.w	r5, [r9]
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80181bc:	4848      	ldr	r0, [pc, #288]	; (80182e0 <mem_free+0x1a4>)
 80181be:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80181c2:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
 80181c6:	6831      	ldr	r1, [r6, #0]
 80181c8:	1ad2      	subs	r2, r2, r3
 80181ca:	eba5 0c01 	sub.w	ip, r5, r1
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80181ce:	42a9      	cmp	r1, r5
  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));
 80181d0:	4462      	add	r2, ip
 80181d2:	f8a0 20ac 	strh.w	r2, [r0, #172]	; 0xac
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80181d6:	d84b      	bhi.n	8018270 <mem_free+0x134>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80181d8:	683a      	ldr	r2, [r7, #0]
 80181da:	4295      	cmp	r5, r2
 80181dc:	d252      	bcs.n	8018284 <mem_free+0x148>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80181de:	f242 7210 	movw	r2, #10000	; 0x2710
 80181e2:	4293      	cmp	r3, r2
 80181e4:	d83a      	bhi.n	801825c <mem_free+0x120>
  return (struct mem *)(void *)&ram[ptr];
 80181e6:	6832      	ldr	r2, [r6, #0]
 80181e8:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80181ea:	429d      	cmp	r5, r3
 80181ec:	d013      	beq.n	8018216 <mem_free+0xda>
 80181ee:	7919      	ldrb	r1, [r3, #4]
 80181f0:	b989      	cbnz	r1, 8018216 <mem_free+0xda>
 80181f2:	6839      	ldr	r1, [r7, #0]
 80181f4:	428b      	cmp	r3, r1
 80181f6:	d00e      	beq.n	8018216 <mem_free+0xda>
    if (lfree == nmem) {
 80181f8:	f8d9 1000 	ldr.w	r1, [r9]
 80181fc:	428b      	cmp	r3, r1
 80181fe:	d062      	beq.n	80182c6 <mem_free+0x18a>
    mem->next = nmem->next;
 8018200:	8818      	ldrh	r0, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8018202:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = nmem->next;
 8018206:	f824 0c18 	strh.w	r0, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801820a:	881b      	ldrh	r3, [r3, #0]
 801820c:	428b      	cmp	r3, r1
 801820e:	d002      	beq.n	8018216 <mem_free+0xda>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8018210:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8018212:	1aa9      	subs	r1, r5, r2
 8018214:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8018216:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 801821a:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 801821c:	429d      	cmp	r5, r3
 801821e:	d010      	beq.n	8018242 <mem_free+0x106>
 8018220:	7918      	ldrb	r0, [r3, #4]
 8018222:	b970      	cbnz	r0, 8018242 <mem_free+0x106>
    if (lfree == mem) {
 8018224:	f8d9 0000 	ldr.w	r0, [r9]
 8018228:	4285      	cmp	r5, r0
 801822a:	d049      	beq.n	80182c0 <mem_free+0x184>
    pmem->next = mem->next;
 801822c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018230:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 8018234:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8018236:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801823a:	4283      	cmp	r3, r0
 801823c:	d001      	beq.n	8018242 <mem_free+0x106>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801823e:	441a      	add	r2, r3
 8018240:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8018242:	f7ff fe09 	bl	8017e58 <mem_sanity>
  mem_free_count = 1;
 8018246:	4b29      	ldr	r3, [pc, #164]	; (80182ec <mem_free+0x1b0>)
 8018248:	2201      	movs	r2, #1
 801824a:	701a      	strb	r2, [r3, #0]
}
 801824c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018250:	4770      	bx	lr
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8018252:	4b20      	ldr	r3, [pc, #128]	; (80182d4 <mem_free+0x198>)
 8018254:	f240 2273 	movw	r2, #627	; 0x273
 8018258:	4925      	ldr	r1, [pc, #148]	; (80182f0 <mem_free+0x1b4>)
 801825a:	e789      	b.n	8018170 <mem_free+0x34>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801825c:	4b1d      	ldr	r3, [pc, #116]	; (80182d4 <mem_free+0x198>)
 801825e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8018262:	4924      	ldr	r1, [pc, #144]	; (80182f4 <mem_free+0x1b8>)
 8018264:	481d      	ldr	r0, [pc, #116]	; (80182dc <mem_free+0x1a0>)
 8018266:	f00a ff3d 	bl	80230e4 <iprintf>
 801826a:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 801826e:	e7ba      	b.n	80181e6 <mem_free+0xaa>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8018270:	4b18      	ldr	r3, [pc, #96]	; (80182d4 <mem_free+0x198>)
 8018272:	f240 12df 	movw	r2, #479	; 0x1df
 8018276:	4920      	ldr	r1, [pc, #128]	; (80182f8 <mem_free+0x1bc>)
 8018278:	4818      	ldr	r0, [pc, #96]	; (80182dc <mem_free+0x1a0>)
 801827a:	f00a ff33 	bl	80230e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801827e:	683b      	ldr	r3, [r7, #0]
 8018280:	429d      	cmp	r5, r3
 8018282:	d306      	bcc.n	8018292 <mem_free+0x156>
 8018284:	4b13      	ldr	r3, [pc, #76]	; (80182d4 <mem_free+0x198>)
 8018286:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801828a:	491c      	ldr	r1, [pc, #112]	; (80182fc <mem_free+0x1c0>)
 801828c:	4813      	ldr	r0, [pc, #76]	; (80182dc <mem_free+0x1a0>)
 801828e:	f00a ff29 	bl	80230e4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8018292:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8018296:	b133      	cbz	r3, 80182a6 <mem_free+0x16a>
 8018298:	4b0e      	ldr	r3, [pc, #56]	; (80182d4 <mem_free+0x198>)
 801829a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801829e:	4918      	ldr	r1, [pc, #96]	; (8018300 <mem_free+0x1c4>)
 80182a0:	480e      	ldr	r0, [pc, #56]	; (80182dc <mem_free+0x1a0>)
 80182a2:	f00a ff1f 	bl	80230e4 <iprintf>
 80182a6:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 80182aa:	e798      	b.n	80181de <mem_free+0xa2>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80182ac:	4b09      	ldr	r3, [pc, #36]	; (80182d4 <mem_free+0x198>)
 80182ae:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80182b2:	4914      	ldr	r1, [pc, #80]	; (8018304 <mem_free+0x1c8>)
 80182b4:	e75c      	b.n	8018170 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80182b6:	4b07      	ldr	r3, [pc, #28]	; (80182d4 <mem_free+0x198>)
 80182b8:	f240 2295 	movw	r2, #661	; 0x295
 80182bc:	4912      	ldr	r1, [pc, #72]	; (8018308 <mem_free+0x1cc>)
 80182be:	e757      	b.n	8018170 <mem_free+0x34>
      lfree = pmem;
 80182c0:	f8c9 3000 	str.w	r3, [r9]
 80182c4:	e7b2      	b.n	801822c <mem_free+0xf0>
      lfree = mem;
 80182c6:	f8c9 5000 	str.w	r5, [r9]
 80182ca:	e799      	b.n	8018200 <mem_free+0xc4>
 80182cc:	2001a920 	.word	0x2001a920
 80182d0:	2001a924 	.word	0x2001a924
 80182d4:	0804009c 	.word	0x0804009c
 80182d8:	08040214 	.word	0x08040214
 80182dc:	08029ba0 	.word	0x08029ba0
 80182e0:	2002e38c 	.word	0x2002e38c
 80182e4:	08027568 	.word	0x08027568
 80182e8:	08040230 	.word	0x08040230
 80182ec:	2001a918 	.word	0x2001a918
 80182f0:	080401f0 	.word	0x080401f0
 80182f4:	080402e4 	.word	0x080402e4
 80182f8:	08040294 	.word	0x08040294
 80182fc:	080402ac 	.word	0x080402ac
 8018300:	080402c8 	.word	0x080402c8
 8018304:	08040238 	.word	0x08040238
 8018308:	08040260 	.word	0x08040260
 801830c:	2001a914 	.word	0x2001a914

08018310 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8018310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8018314:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8018316:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801831a:	f024 0403 	bic.w	r4, r4, #3
 801831e:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8018320:	2c0c      	cmp	r4, #12
 8018322:	bf38      	it	cc
 8018324:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8018326:	3420      	adds	r4, #32
 8018328:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801832a:	429c      	cmp	r4, r3
 801832c:	f200 8086 	bhi.w	801843c <mem_trim+0x12c>
 8018330:	42a1      	cmp	r1, r4
 8018332:	460e      	mov	r6, r1
 8018334:	f200 8082 	bhi.w	801843c <mem_trim+0x12c>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8018338:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 80184ec <mem_trim+0x1dc>
 801833c:	4605      	mov	r5, r0
 801833e:	f8d9 3000 	ldr.w	r3, [r9]
 8018342:	4283      	cmp	r3, r0
 8018344:	d803      	bhi.n	801834e <mem_trim+0x3e>
 8018346:	4b5e      	ldr	r3, [pc, #376]	; (80184c0 <mem_trim+0x1b0>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	4283      	cmp	r3, r0
 801834c:	d817      	bhi.n	801837e <mem_trim+0x6e>
 801834e:	4b5d      	ldr	r3, [pc, #372]	; (80184c4 <mem_trim+0x1b4>)
 8018350:	f240 22d1 	movw	r2, #721	; 0x2d1
 8018354:	495c      	ldr	r1, [pc, #368]	; (80184c8 <mem_trim+0x1b8>)
 8018356:	485d      	ldr	r0, [pc, #372]	; (80184cc <mem_trim+0x1bc>)
 8018358:	f00a fec4 	bl	80230e4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801835c:	f8d9 3000 	ldr.w	r3, [r9]
 8018360:	42ab      	cmp	r3, r5
 8018362:	d908      	bls.n	8018376 <mem_trim+0x66>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8018364:	4a5a      	ldr	r2, [pc, #360]	; (80184d0 <mem_trim+0x1c0>)
    return rmem;
 8018366:	4628      	mov	r0, r5
    MEM_STATS_INC_LOCKED(illegal);
 8018368:	f8b2 30b0 	ldrh.w	r3, [r2, #176]	; 0xb0
 801836c:	3301      	adds	r3, #1
 801836e:	f8a2 30b0 	strh.w	r3, [r2, #176]	; 0xb0
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8018372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8018376:	4b52      	ldr	r3, [pc, #328]	; (80184c0 <mem_trim+0x1b0>)
 8018378:	681b      	ldr	r3, [r3, #0]
 801837a:	429d      	cmp	r5, r3
 801837c:	d2f2      	bcs.n	8018364 <mem_trim+0x54>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 801837e:	4b55      	ldr	r3, [pc, #340]	; (80184d4 <mem_trim+0x1c4>)
 8018380:	4628      	mov	r0, r5
 8018382:	4a55      	ldr	r2, [pc, #340]	; (80184d8 <mem_trim+0x1c8>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8018384:	f1a5 0718 	sub.w	r7, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8018388:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 801838c:	f7ff fe3e 	bl	801800c <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8018390:	f8d9 2000 	ldr.w	r2, [r9]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8018394:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8018398:	1abf      	subs	r7, r7, r2
 801839a:	f1a1 0828 	sub.w	r8, r1, #40	; 0x28
 801839e:	b2bf      	uxth	r7, r7
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80183a0:	fa1f f888 	uxth.w	r8, r8
 80183a4:	eba8 0307 	sub.w	r3, r8, r7
 80183a8:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80183aa:	429c      	cmp	r4, r3
 80183ac:	d83d      	bhi.n	801842a <mem_trim+0x11a>
  if (newsize == size) {
 80183ae:	d06c      	beq.n	801848a <mem_trim+0x17a>
  return (struct mem *)(void *)&ram[ptr];
 80183b0:	eb02 0a01 	add.w	sl, r2, r1
  if (mem2->used == 0) {
 80183b4:	f89a 0004 	ldrb.w	r0, [sl, #4]
 80183b8:	2800      	cmp	r0, #0
 80183ba:	d142      	bne.n	8018442 <mem_trim+0x132>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80183bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80183c0:	4299      	cmp	r1, r3
 80183c2:	d066      	beq.n	8018492 <mem_trim+0x182>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80183c4:	f107 0308 	add.w	r3, r7, #8
    if (lfree == mem2) {
 80183c8:	4844      	ldr	r0, [pc, #272]	; (80184dc <mem_trim+0x1cc>)
    next = mem2->next;
 80183ca:	f8ba c000 	ldrh.w	ip, [sl]
    if (lfree == mem2) {
 80183ce:	6801      	ldr	r1, [r0, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80183d0:	4423      	add	r3, r4
    if (lfree == mem2) {
 80183d2:	4551      	cmp	r1, sl
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80183d4:	b29b      	uxth	r3, r3
  return (struct mem *)(void *)&ram[ptr];
 80183d6:	eb02 0103 	add.w	r1, r2, r3
    if (lfree == mem2) {
 80183da:	d058      	beq.n	801848e <mem_trim+0x17e>
    mem2->used = 0;
 80183dc:	f04f 0e00 	mov.w	lr, #0
    mem2->next = next;
 80183e0:	f8a1 c000 	strh.w	ip, [r1]
    mem2->prev = ptr;
 80183e4:	804f      	strh	r7, [r1, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80183e6:	f242 7010 	movw	r0, #10000	; 0x2710
    mem2->used = 0;
 80183ea:	f881 e004 	strb.w	lr, [r1, #4]
    mem->next = ptr2;
 80183ee:	f825 3c18 	strh.w	r3, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80183f2:	8809      	ldrh	r1, [r1, #0]
 80183f4:	4281      	cmp	r1, r0
 80183f6:	d001      	beq.n	80183fc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80183f8:	440a      	add	r2, r1
 80183fa:	8053      	strh	r3, [r2, #2]
    MEM_STATS_DEC_USED(used, (size - newsize));
 80183fc:	4b34      	ldr	r3, [pc, #208]	; (80184d0 <mem_trim+0x1c0>)
 80183fe:	eba7 0708 	sub.w	r7, r7, r8
 8018402:	f8b3 80ac 	ldrh.w	r8, [r3, #172]	; 0xac
 8018406:	4447      	add	r7, r8
 8018408:	443c      	add	r4, r7
 801840a:	f8a3 40ac 	strh.w	r4, [r3, #172]	; 0xac
  mem_overflow_init_raw(p, user_size);
 801840e:	4628      	mov	r0, r5
 8018410:	4631      	mov	r1, r6
  mem->user_size = user_size;
 8018412:	f825 6c12 	strh.w	r6, [r5, #-18]
  mem_overflow_init_raw(p, user_size);
 8018416:	f7ff fe45 	bl	80180a4 <mem_overflow_init_raw>
  MEM_SANITY();
 801841a:	f7ff fd1d 	bl	8017e58 <mem_sanity>
  mem_free_count = 1;
 801841e:	4b30      	ldr	r3, [pc, #192]	; (80184e0 <mem_trim+0x1d0>)
 8018420:	2201      	movs	r2, #1
  return rmem;
 8018422:	4628      	mov	r0, r5
  mem_free_count = 1;
 8018424:	701a      	strb	r2, [r3, #0]
}
 8018426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801842a:	4b26      	ldr	r3, [pc, #152]	; (80184c4 <mem_trim+0x1b4>)
 801842c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8018430:	492c      	ldr	r1, [pc, #176]	; (80184e4 <mem_trim+0x1d4>)
 8018432:	4826      	ldr	r0, [pc, #152]	; (80184cc <mem_trim+0x1bc>)
 8018434:	f00a fe56 	bl	80230e4 <iprintf>
    return NULL;
 8018438:	2000      	movs	r0, #0
 801843a:	e79a      	b.n	8018372 <mem_trim+0x62>
    return NULL;
 801843c:	2000      	movs	r0, #0
}
 801843e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8018442:	f104 0014 	add.w	r0, r4, #20
 8018446:	4298      	cmp	r0, r3
 8018448:	d8e1      	bhi.n	801840e <mem_trim+0xfe>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801844a:	f107 0a08 	add.w	sl, r7, #8
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801844e:	f242 7310 	movw	r3, #10000	; 0x2710
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018452:	44a2      	add	sl, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018454:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8018456:	fa1f fa8a 	uxth.w	sl, sl
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801845a:	d024      	beq.n	80184a6 <mem_trim+0x196>
    if (mem2 < lfree) {
 801845c:	481f      	ldr	r0, [pc, #124]	; (80184dc <mem_trim+0x1cc>)
  return (struct mem *)(void *)&ram[ptr];
 801845e:	eb02 030a 	add.w	r3, r2, sl
    if (mem2 < lfree) {
 8018462:	f8d0 c000 	ldr.w	ip, [r0]
 8018466:	459c      	cmp	ip, r3
 8018468:	d900      	bls.n	801846c <mem_trim+0x15c>
      lfree = mem2;
 801846a:	6003      	str	r3, [r0, #0]
    mem2->used = 0;
 801846c:	2000      	movs	r0, #0
    mem2->next = mem->next;
 801846e:	8019      	strh	r1, [r3, #0]
    mem2->prev = ptr;
 8018470:	805f      	strh	r7, [r3, #2]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8018472:	f242 7110 	movw	r1, #10000	; 0x2710
    mem2->used = 0;
 8018476:	7118      	strb	r0, [r3, #4]
    mem->next = ptr2;
 8018478:	f825 ac18 	strh.w	sl, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801847c:	881b      	ldrh	r3, [r3, #0]
 801847e:	428b      	cmp	r3, r1
 8018480:	d0bc      	beq.n	80183fc <mem_trim+0xec>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8018482:	441a      	add	r2, r3
 8018484:	f8a2 a002 	strh.w	sl, [r2, #2]
 8018488:	e7b8      	b.n	80183fc <mem_trim+0xec>
 801848a:	4628      	mov	r0, r5
 801848c:	e771      	b.n	8018372 <mem_trim+0x62>
      lfree = ptr_to_mem(ptr2);
 801848e:	6001      	str	r1, [r0, #0]
 8018490:	e7a4      	b.n	80183dc <mem_trim+0xcc>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8018492:	f240 22f5 	movw	r2, #757	; 0x2f5
 8018496:	4b0b      	ldr	r3, [pc, #44]	; (80184c4 <mem_trim+0x1b4>)
 8018498:	4913      	ldr	r1, [pc, #76]	; (80184e8 <mem_trim+0x1d8>)
 801849a:	480c      	ldr	r0, [pc, #48]	; (80184cc <mem_trim+0x1bc>)
 801849c:	f00a fe22 	bl	80230e4 <iprintf>
 80184a0:	f8d9 2000 	ldr.w	r2, [r9]
 80184a4:	e78e      	b.n	80183c4 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80184a6:	f240 3216 	movw	r2, #790	; 0x316
 80184aa:	490f      	ldr	r1, [pc, #60]	; (80184e8 <mem_trim+0x1d8>)
 80184ac:	4b05      	ldr	r3, [pc, #20]	; (80184c4 <mem_trim+0x1b4>)
 80184ae:	4807      	ldr	r0, [pc, #28]	; (80184cc <mem_trim+0x1bc>)
 80184b0:	f00a fe18 	bl	80230e4 <iprintf>
 80184b4:	f8d9 2000 	ldr.w	r2, [r9]
 80184b8:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 80184bc:	e7ce      	b.n	801845c <mem_trim+0x14c>
 80184be:	bf00      	nop
 80184c0:	2001a924 	.word	0x2001a924
 80184c4:	0804009c 	.word	0x0804009c
 80184c8:	08040310 	.word	0x08040310
 80184cc:	08029ba0 	.word	0x08029ba0
 80184d0:	2002e38c 	.word	0x2002e38c
 80184d4:	08027568 	.word	0x08027568
 80184d8:	08040230 	.word	0x08040230
 80184dc:	2001a914 	.word	0x2001a914
 80184e0:	2001a918 	.word	0x2001a918
 80184e4:	08040328 	.word	0x08040328
 80184e8:	08040348 	.word	0x08040348
 80184ec:	2001a920 	.word	0x2001a920

080184f0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80184f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80184f4:	4680      	mov	r8, r0
 80184f6:	2800      	cmp	r0, #0
 80184f8:	f000 80cb 	beq.w	8018692 <mem_malloc+0x1a2>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80184fc:	f100 0a03 	add.w	sl, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8018500:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8018504:	f02a 0a03 	bic.w	sl, sl, #3
 8018508:	fa1f fa8a 	uxth.w	sl, sl
  if (size < MIN_SIZE_ALIGNED) {
 801850c:	f1ba 0f0c 	cmp.w	sl, #12
 8018510:	bf38      	it	cc
 8018512:	f04f 0a0c 	movcc.w	sl, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8018516:	f10a 0720 	add.w	r7, sl, #32
 801851a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801851c:	42a7      	cmp	r7, r4
 801851e:	f200 80b8 	bhi.w	8018692 <mem_malloc+0x1a2>
 8018522:	42b8      	cmp	r0, r7
 8018524:	bf94      	ite	ls
 8018526:	2500      	movls	r5, #0
 8018528:	2501      	movhi	r5, #1
 801852a:	2d00      	cmp	r5, #0
 801852c:	f040 80b1 	bne.w	8018692 <mem_malloc+0x1a2>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8018530:	4871      	ldr	r0, [pc, #452]	; (80186f8 <mem_malloc+0x208>)
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8018532:	f06f 0b07 	mvn.w	fp, #7
  sys_mutex_lock(&mem_mutex);
 8018536:	f009 fa33 	bl	80219a0 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 801853a:	4b70      	ldr	r3, [pc, #448]	; (80186fc <mem_malloc+0x20c>)
      mem_free_count = 0;
 801853c:	46ae      	mov	lr, r5
 801853e:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 8018728 <mem_malloc+0x238>
 8018542:	eba4 0c07 	sub.w	ip, r4, r7
  return (mem_size_t)((u8_t *)mem - ram);
 8018546:	6818      	ldr	r0, [r3, #0]
 8018548:	4d6d      	ldr	r5, [pc, #436]	; (8018700 <mem_malloc+0x210>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801854a:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 801854e:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018550:	b2b3      	uxth	r3, r6
 8018552:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8018554:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018556:	d97e      	bls.n	8018656 <mem_malloc+0x166>
      mem_free_count = 0;
 8018558:	f885 e000 	strb.w	lr, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801855c:	ebab 0203 	sub.w	r2, fp, r3
      if (mem_free_count != 0) {
 8018560:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8018562:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8018564:	2900      	cmp	r1, #0
 8018566:	d1f0      	bne.n	801854a <mem_malloc+0x5a>
      if ((!mem->used) &&
 8018568:	7923      	ldrb	r3, [r4, #4]
 801856a:	2b00      	cmp	r3, #0
 801856c:	d16f      	bne.n	801864e <mem_malloc+0x15e>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801856e:	8821      	ldrh	r1, [r4, #0]
 8018570:	440a      	add	r2, r1
 8018572:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8018574:	42ba      	cmp	r2, r7
 8018576:	d3ec      	bcc.n	8018552 <mem_malloc+0x62>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8018578:	f107 0314 	add.w	r3, r7, #20
 801857c:	429a      	cmp	r2, r3
 801857e:	d377      	bcc.n	8018670 <mem_malloc+0x180>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8018580:	f10a 0a28 	add.w	sl, sl, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8018584:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8018588:	44b2      	add	sl, r6
 801858a:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801858e:	459a      	cmp	sl, r3
 8018590:	f000 80a7 	beq.w	80186e2 <mem_malloc+0x1f2>
  return (struct mem *)(void *)&ram[ptr];
 8018594:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8018598:	2200      	movs	r2, #0
          mem2->next = mem->next;
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;
 801859a:	f04f 0c01 	mov.w	ip, #1
          mem2->used = 0;
 801859e:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80185a0:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 80185a4:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 80185a8:	805e      	strh	r6, [r3, #2]
          mem->next = ptr2;
 80185aa:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 80185ae:	f884 c004 	strb.w	ip, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 80185b2:	f830 300a 	ldrh.w	r3, [r0, sl]
 80185b6:	4293      	cmp	r3, r2
 80185b8:	d002      	beq.n	80185c0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80185ba:	4418      	add	r0, r3
 80185bc:	f8a0 a002 	strh.w	sl, [r0, #2]
          }
          MEM_STATS_INC_USED(used, (size + SIZEOF_STRUCT_MEM));
 80185c0:	4a50      	ldr	r2, [pc, #320]	; (8018704 <mem_malloc+0x214>)
 80185c2:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 80185c6:	f8b2 10ae 	ldrh.w	r1, [r2, #174]	; 0xae
 80185ca:	3308      	adds	r3, #8
 80185cc:	443b      	add	r3, r7
 80185ce:	b29b      	uxth	r3, r3
 80185d0:	4299      	cmp	r1, r3
 80185d2:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 80185d6:	d359      	bcc.n	801868c <mem_malloc+0x19c>
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80185d8:	f8d9 3000 	ldr.w	r3, [r9]
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80185dc:	4e4a      	ldr	r6, [pc, #296]	; (8018708 <mem_malloc+0x218>)
        if (mem == lfree) {
 80185de:	42a3      	cmp	r3, r4
 80185e0:	d11e      	bne.n	8018620 <mem_malloc+0x130>
  return (struct mem *)(void *)&ram[ptr];
 80185e2:	4b46      	ldr	r3, [pc, #280]	; (80186fc <mem_malloc+0x20c>)
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 80185e4:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 80185e6:	6831      	ldr	r1, [r6, #0]
  return (struct mem *)(void *)&ram[ptr];
 80185e8:	f8d3 c000 	ldr.w	ip, [r3]
          struct mem *cur = lfree;
 80185ec:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 80185f0:	791a      	ldrb	r2, [r3, #4]
 80185f2:	b942      	cbnz	r2, 8018606 <mem_malloc+0x116>
 80185f4:	e009      	b.n	801860a <mem_malloc+0x11a>
            mem_free_count = 0;
 80185f6:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 80185f8:	782a      	ldrb	r2, [r5, #0]
 80185fa:	2a00      	cmp	r2, #0
 80185fc:	d14d      	bne.n	801869a <mem_malloc+0x1aa>
  return (struct mem *)(void *)&ram[ptr];
 80185fe:	881b      	ldrh	r3, [r3, #0]
 8018600:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 8018602:	791a      	ldrb	r2, [r3, #4]
 8018604:	b10a      	cbz	r2, 801860a <mem_malloc+0x11a>
 8018606:	4299      	cmp	r1, r3
 8018608:	d1f5      	bne.n	80185f6 <mem_malloc+0x106>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 801860a:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801860e:	f8d9 3000 	ldr.w	r3, [r9]
 8018612:	4299      	cmp	r1, r3
 8018614:	d004      	beq.n	8018620 <mem_malloc+0x130>
 8018616:	f8d9 3000 	ldr.w	r3, [r9]
 801861a:	791b      	ldrb	r3, [r3, #4]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d158      	bne.n	80186d2 <mem_malloc+0x1e2>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8018620:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 8018622:	4835      	ldr	r0, [pc, #212]	; (80186f8 <mem_malloc+0x208>)
 8018624:	f009 f9c2 	bl	80219ac <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8018628:	6833      	ldr	r3, [r6, #0]
 801862a:	4427      	add	r7, r4
 801862c:	42bb      	cmp	r3, r7
 801862e:	d348      	bcc.n	80186c2 <mem_malloc+0x1d2>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8018630:	07a3      	lsls	r3, r4, #30
 8018632:	d137      	bne.n	80186a4 <mem_malloc+0x1b4>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8018634:	f104 0518 	add.w	r5, r4, #24
  mem_overflow_init_raw(p, user_size);
 8018638:	4641      	mov	r1, r8
  mem->user_size = user_size;
 801863a:	f8a4 8006 	strh.w	r8, [r4, #6]
  mem_overflow_init_raw(p, user_size);
 801863e:	4628      	mov	r0, r5
 8018640:	f7ff fd30 	bl	80180a4 <mem_overflow_init_raw>
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 8018644:	f7ff fc08 	bl	8017e58 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 8018648:	4628      	mov	r0, r5
 801864a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801864e:	8826      	ldrh	r6, [r4, #0]
 8018650:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8018652:	459c      	cmp	ip, r3
 8018654:	d880      	bhi.n	8018558 <mem_malloc+0x68>
  MEM_STATS_INC(err);
 8018656:	4a2b      	ldr	r2, [pc, #172]	; (8018704 <mem_malloc+0x214>)
  return NULL;
 8018658:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801865a:	4827      	ldr	r0, [pc, #156]	; (80186f8 <mem_malloc+0x208>)
  MEM_STATS_INC(err);
 801865c:	f8b2 30a8 	ldrh.w	r3, [r2, #168]	; 0xa8
 8018660:	3301      	adds	r3, #1
 8018662:	f8a2 30a8 	strh.w	r3, [r2, #168]	; 0xa8
  sys_mutex_unlock(&mem_mutex);
 8018666:	f009 f9a1 	bl	80219ac <sys_mutex_unlock>
}
 801866a:	4628      	mov	r0, r5
 801866c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8018670:	4a24      	ldr	r2, [pc, #144]	; (8018704 <mem_malloc+0x214>)
          mem->used = 1;
 8018672:	2301      	movs	r3, #1
 8018674:	7123      	strb	r3, [r4, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
 8018676:	f8b2 30ac 	ldrh.w	r3, [r2, #172]	; 0xac
 801867a:	f8b2 00ae 	ldrh.w	r0, [r2, #174]	; 0xae
 801867e:	440b      	add	r3, r1
 8018680:	1b9b      	subs	r3, r3, r6
 8018682:	b29b      	uxth	r3, r3
 8018684:	4298      	cmp	r0, r3
 8018686:	f8a2 30ac 	strh.w	r3, [r2, #172]	; 0xac
 801868a:	d2a5      	bcs.n	80185d8 <mem_malloc+0xe8>
 801868c:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8018690:	e7a2      	b.n	80185d8 <mem_malloc+0xe8>
    return NULL;
 8018692:	2500      	movs	r5, #0
}
 8018694:	4628      	mov	r0, r5
 8018696:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (mem == lfree) {
 801869a:	f8d9 3000 	ldr.w	r3, [r9]
 801869e:	42a3      	cmp	r3, r4
 80186a0:	d0a4      	beq.n	80185ec <mem_malloc+0xfc>
 80186a2:	e7bd      	b.n	8018620 <mem_malloc+0x130>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80186a4:	4b19      	ldr	r3, [pc, #100]	; (801870c <mem_malloc+0x21c>)
 80186a6:	f240 32bb 	movw	r2, #955	; 0x3bb
 80186aa:	4919      	ldr	r1, [pc, #100]	; (8018710 <mem_malloc+0x220>)
 80186ac:	4819      	ldr	r0, [pc, #100]	; (8018714 <mem_malloc+0x224>)
 80186ae:	f00a fd19 	bl	80230e4 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80186b2:	4b16      	ldr	r3, [pc, #88]	; (801870c <mem_malloc+0x21c>)
 80186b4:	f240 32bd 	movw	r2, #957	; 0x3bd
 80186b8:	4917      	ldr	r1, [pc, #92]	; (8018718 <mem_malloc+0x228>)
 80186ba:	4816      	ldr	r0, [pc, #88]	; (8018714 <mem_malloc+0x224>)
 80186bc:	f00a fd12 	bl	80230e4 <iprintf>
 80186c0:	e7b8      	b.n	8018634 <mem_malloc+0x144>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80186c2:	4b12      	ldr	r3, [pc, #72]	; (801870c <mem_malloc+0x21c>)
 80186c4:	f240 32b9 	movw	r2, #953	; 0x3b9
 80186c8:	4914      	ldr	r1, [pc, #80]	; (801871c <mem_malloc+0x22c>)
 80186ca:	4812      	ldr	r0, [pc, #72]	; (8018714 <mem_malloc+0x224>)
 80186cc:	f00a fd0a 	bl	80230e4 <iprintf>
 80186d0:	e7ae      	b.n	8018630 <mem_malloc+0x140>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80186d2:	4b0e      	ldr	r3, [pc, #56]	; (801870c <mem_malloc+0x21c>)
 80186d4:	f240 32b5 	movw	r2, #949	; 0x3b5
 80186d8:	4911      	ldr	r1, [pc, #68]	; (8018720 <mem_malloc+0x230>)
 80186da:	480e      	ldr	r0, [pc, #56]	; (8018714 <mem_malloc+0x224>)
 80186dc:	f00a fd02 	bl	80230e4 <iprintf>
 80186e0:	e79e      	b.n	8018620 <mem_malloc+0x130>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80186e2:	4b0a      	ldr	r3, [pc, #40]	; (801870c <mem_malloc+0x21c>)
 80186e4:	f240 3287 	movw	r2, #903	; 0x387
 80186e8:	490e      	ldr	r1, [pc, #56]	; (8018724 <mem_malloc+0x234>)
 80186ea:	480a      	ldr	r0, [pc, #40]	; (8018714 <mem_malloc+0x224>)
 80186ec:	f00a fcfa 	bl	80230e4 <iprintf>
 80186f0:	4b02      	ldr	r3, [pc, #8]	; (80186fc <mem_malloc+0x20c>)
 80186f2:	8821      	ldrh	r1, [r4, #0]
 80186f4:	6818      	ldr	r0, [r3, #0]
 80186f6:	e74d      	b.n	8018594 <mem_malloc+0xa4>
 80186f8:	2001a91c 	.word	0x2001a91c
 80186fc:	2001a920 	.word	0x2001a920
 8018700:	2001a918 	.word	0x2001a918
 8018704:	2002e38c 	.word	0x2002e38c
 8018708:	2001a924 	.word	0x2001a924
 801870c:	0804009c 	.word	0x0804009c
 8018710:	080403a8 	.word	0x080403a8
 8018714:	08029ba0 	.word	0x08029ba0
 8018718:	080403d8 	.word	0x080403d8
 801871c:	08040378 	.word	0x08040378
 8018720:	0804035c 	.word	0x0804035c
 8018724:	08040348 	.word	0x08040348
 8018728:	2001a914 	.word	0x2001a914

0801872c <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801872c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018730:	4f12      	ldr	r7, [pc, #72]	; (801877c <memp_overflow_check_all+0x50>)
 8018732:	2308      	movs	r3, #8
 8018734:	4c12      	ldr	r4, [pc, #72]	; (8018780 <memp_overflow_check_all+0x54>)
 8018736:	f107 083c 	add.w	r8, r7, #60	; 0x3c
 801873a:	4d12      	ldr	r5, [pc, #72]	; (8018784 <memp_overflow_check_all+0x58>)
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801873c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 8018788 <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 8018740:	3403      	adds	r4, #3
 8018742:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8018746:	b183      	cbz	r3, 801876a <memp_overflow_check_all+0x3e>
 8018748:	8929      	ldrh	r1, [r5, #8]
 801874a:	2600      	movs	r6, #0
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801874c:	3601      	adds	r6, #1
 801874e:	f104 001c 	add.w	r0, r4, #28
 8018752:	682b      	ldr	r3, [r5, #0]
 8018754:	464a      	mov	r2, r9
 8018756:	f7ff fc59 	bl	801800c <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801875a:	8929      	ldrh	r1, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801875c:	b2b3      	uxth	r3, r6
 801875e:	8968      	ldrh	r0, [r5, #10]
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8018760:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8018764:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 8018766:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 8018768:	d8f0      	bhi.n	801874c <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801876a:	45b8      	cmp	r8, r7
 801876c:	d004      	beq.n	8018778 <memp_overflow_check_all+0x4c>
 801876e:	f857 5b04 	ldr.w	r5, [r7], #4
 8018772:	68ec      	ldr	r4, [r5, #12]
 8018774:	896b      	ldrh	r3, [r5, #10]
 8018776:	e7e3      	b.n	8018740 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 8018778:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801877c:	080406b8 	.word	0x080406b8
 8018780:	20022580 	.word	0x20022580
 8018784:	08040600 	.word	0x08040600
 8018788:	080403fc 	.word	0x080403fc

0801878c <do_memp_malloc_pool_fn.isra.0>:

static void *
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 801878c:	b570      	push	{r4, r5, r6, lr}
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801878e:	680c      	ldr	r4, [r1, #0]
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
 8018790:	4605      	mov	r5, r0
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8018792:	b19c      	cbz	r4, 80187bc <do_memp_malloc_pool_fn.isra.0+0x30>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8018794:	6826      	ldr	r6, [r4, #0]
#if MEMP_OVERFLOW_CHECK
    memp->next = NULL;
 8018796:	2000      	movs	r0, #0
    *desc->tab = memp->next;
 8018798:	600e      	str	r6, [r1, #0]
    memp->next = NULL;
 801879a:	6020      	str	r0, [r4, #0]
#endif /* MEMP_OVERFLOW_CHECK */
#endif /* !MEMP_MEM_MALLOC */
#if MEMP_OVERFLOW_CHECK
    memp->file = file;
    memp->line = line;
 801879c:	e9c4 2301 	strd	r2, r3, [r4, #4]
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80187a0:	07a3      	lsls	r3, r4, #30
 80187a2:	d111      	bne.n	80187c8 <do_memp_malloc_pool_fn.isra.0+0x3c>
                ((mem_ptr_t)memp % MEM_ALIGNMENT) == 0);
#if MEMP_STATS
    desc->stats->used++;
 80187a4:	682a      	ldr	r2, [r5, #0]
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80187a6:	341c      	adds	r4, #28
    desc->stats->used++;
 80187a8:	8893      	ldrh	r3, [r2, #4]
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
}
 80187aa:	4620      	mov	r0, r4
    if (desc->stats->used > desc->stats->max) {
 80187ac:	88d1      	ldrh	r1, [r2, #6]
    desc->stats->used++;
 80187ae:	3301      	adds	r3, #1
 80187b0:	b29b      	uxth	r3, r3
    if (desc->stats->used > desc->stats->max) {
 80187b2:	4299      	cmp	r1, r3
    desc->stats->used++;
 80187b4:	8093      	strh	r3, [r2, #4]
      desc->stats->max = desc->stats->used;
 80187b6:	bf38      	it	cc
 80187b8:	80d3      	strhcc	r3, [r2, #6]
}
 80187ba:	bd70      	pop	{r4, r5, r6, pc}
    desc->stats->err++;
 80187bc:	6802      	ldr	r2, [r0, #0]
}
 80187be:	4620      	mov	r0, r4
    desc->stats->err++;
 80187c0:	8813      	ldrh	r3, [r2, #0]
 80187c2:	3301      	adds	r3, #1
 80187c4:	8013      	strh	r3, [r2, #0]
}
 80187c6:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80187c8:	4b03      	ldr	r3, [pc, #12]	; (80187d8 <do_memp_malloc_pool_fn.isra.0+0x4c>)
 80187ca:	f44f 728c 	mov.w	r2, #280	; 0x118
 80187ce:	4903      	ldr	r1, [pc, #12]	; (80187dc <do_memp_malloc_pool_fn.isra.0+0x50>)
 80187d0:	4803      	ldr	r0, [pc, #12]	; (80187e0 <do_memp_malloc_pool_fn.isra.0+0x54>)
 80187d2:	f00a fc87 	bl	80230e4 <iprintf>
 80187d6:	e7e5      	b.n	80187a4 <do_memp_malloc_pool_fn.isra.0+0x18>
 80187d8:	08040404 	.word	0x08040404
 80187dc:	08040434 	.word	0x08040434
 80187e0:	08029ba0 	.word	0x08029ba0

080187e4 <do_memp_free_pool.isra.0>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80187e4:	0793      	lsls	r3, r2, #30
do_memp_free_pool(const struct memp_desc *desc, void *mem)
 80187e6:	b570      	push	{r4, r5, r6, lr}
 80187e8:	4614      	mov	r4, r2
 80187ea:	4606      	mov	r6, r0
 80187ec:	460d      	mov	r5, r1
  LWIP_ASSERT("memp_free: mem properly aligned",
 80187ee:	d116      	bne.n	801881e <do_memp_free_pool.isra.0+0x3a>
#if MEMP_OVERFLOW_CHECK == 1
  memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

#if MEMP_STATS
  desc->stats->used--;
 80187f0:	6830      	ldr	r0, [r6, #0]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80187f2:	f1a4 031c 	sub.w	r3, r4, #28
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80187f6:	6829      	ldr	r1, [r5, #0]
  desc->stats->used--;
 80187f8:	8882      	ldrh	r2, [r0, #4]
  memp->next = *desc->tab;
 80187fa:	680d      	ldr	r5, [r1, #0]
  desc->stats->used--;
 80187fc:	3a01      	subs	r2, #1
 80187fe:	8082      	strh	r2, [r0, #4]
  memp->next = *desc->tab;
 8018800:	f844 5c1c 	str.w	r5, [r4, #-28]
  *desc->tab = memp;
 8018804:	600b      	str	r3, [r1, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8018806:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801880a:	b13a      	cbz	r2, 801881c <do_memp_free_pool.isra.0+0x38>
      if (t == h) {
 801880c:	4293      	cmp	r3, r2
 801880e:	d00e      	beq.n	801882e <do_memp_free_pool.isra.0+0x4a>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8018810:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8018812:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 8018814:	b112      	cbz	r2, 801881c <do_memp_free_pool.isra.0+0x38>
 8018816:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 8018818:	2b00      	cmp	r3, #0
 801881a:	d1f6      	bne.n	801880a <do_memp_free_pool.isra.0+0x26>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801881c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp_free: mem properly aligned",
 801881e:	4b08      	ldr	r3, [pc, #32]	; (8018840 <do_memp_free_pool.isra.0+0x5c>)
 8018820:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8018824:	4907      	ldr	r1, [pc, #28]	; (8018844 <do_memp_free_pool.isra.0+0x60>)
 8018826:	4808      	ldr	r0, [pc, #32]	; (8018848 <do_memp_free_pool.isra.0+0x64>)
 8018828:	f00a fc5c 	bl	80230e4 <iprintf>
 801882c:	e7e0      	b.n	80187f0 <do_memp_free_pool.isra.0+0xc>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801882e:	4b04      	ldr	r3, [pc, #16]	; (8018840 <do_memp_free_pool.isra.0+0x5c>)
 8018830:	f240 1285 	movw	r2, #389	; 0x185
 8018834:	4905      	ldr	r1, [pc, #20]	; (801884c <do_memp_free_pool.isra.0+0x68>)
 8018836:	4804      	ldr	r0, [pc, #16]	; (8018848 <do_memp_free_pool.isra.0+0x64>)
}
 8018838:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801883c:	f00a bc52 	b.w	80230e4 <iprintf>
 8018840:	08040404 	.word	0x08040404
 8018844:	08040458 	.word	0x08040458
 8018848:	08029ba0 	.word	0x08029ba0
 801884c:	08040478 	.word	0x08040478

08018850 <memp_init_pool>:
{
 8018850:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 8018852:	2200      	movs	r2, #0
{
 8018854:	4605      	mov	r5, r0
  *desc->tab = NULL;
 8018856:	e9d0 4303 	ldrd	r4, r3, [r0, #12]
  for (i = 0; i < desc->num; ++i) {
 801885a:	8940      	ldrh	r0, [r0, #10]
  *desc->tab = NULL;
 801885c:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801885e:	b1a8      	cbz	r0, 801888c <memp_init_pool+0x3c>
 8018860:	3403      	adds	r4, #3
 8018862:	8929      	ldrh	r1, [r5, #8]
 8018864:	4616      	mov	r6, r2
 8018866:	f024 0403 	bic.w	r4, r4, #3
 801886a:	e001      	b.n	8018870 <memp_init_pool+0x20>
 801886c:	692b      	ldr	r3, [r5, #16]
 801886e:	681a      	ldr	r2, [r3, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 8018870:	f104 001c 	add.w	r0, r4, #28
    memp->next = *desc->tab;
 8018874:	6022      	str	r2, [r4, #0]
    *desc->tab = memp;
 8018876:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 8018878:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801887a:	f7ff fc13 	bl	80180a4 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801887e:	8929      	ldrh	r1, [r5, #8]
  for (i = 0; i < desc->num; ++i) {
 8018880:	8968      	ldrh	r0, [r5, #10]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 8018882:	f101 032c 	add.w	r3, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 8018886:	42b0      	cmp	r0, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8018888:	441c      	add	r4, r3
  for (i = 0; i < desc->num; ++i) {
 801888a:	dcef      	bgt.n	801886c <memp_init_pool+0x1c>
  desc->stats->avail = desc->num;
 801888c:	686b      	ldr	r3, [r5, #4]
 801888e:	8058      	strh	r0, [r3, #2]
}
 8018890:	bd70      	pop	{r4, r5, r6, pc}
 8018892:	bf00      	nop

08018894 <memp_init>:
{
 8018894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018896:	4c0a      	ldr	r4, [pc, #40]	; (80188c0 <memp_init+0x2c>)
 8018898:	4e0a      	ldr	r6, [pc, #40]	; (80188c4 <memp_init+0x30>)
 801889a:	f104 0740 	add.w	r7, r4, #64	; 0x40
 801889e:	4d0a      	ldr	r5, [pc, #40]	; (80188c8 <memp_init+0x34>)
 80188a0:	e001      	b.n	80188a6 <memp_init+0x12>
 80188a2:	f856 5b04 	ldr.w	r5, [r6], #4
    memp_init_pool(memp_pools[i]);
 80188a6:	4628      	mov	r0, r5
 80188a8:	f7ff ffd2 	bl	8018850 <memp_init_pool>
    lwip_stats.memp[i] = memp_pools[i]->stats;
 80188ac:	686b      	ldr	r3, [r5, #4]
 80188ae:	f844 3b04 	str.w	r3, [r4], #4
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80188b2:	42bc      	cmp	r4, r7
 80188b4:	d1f5      	bne.n	80188a2 <memp_init+0xe>
}
 80188b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  memp_overflow_check_all();
 80188ba:	f7ff bf37 	b.w	801872c <memp_overflow_check_all>
 80188be:	bf00      	nop
 80188c0:	2002e440 	.word	0x2002e440
 80188c4:	080406b8 	.word	0x080406b8
 80188c8:	08040600 	.word	0x08040600

080188cc <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80188cc:	280f      	cmp	r0, #15
{
 80188ce:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80188d0:	d80f      	bhi.n	80188f2 <memp_malloc_fn+0x26>
  memp_overflow_check_all();
 80188d2:	460d      	mov	r5, r1
 80188d4:	4616      	mov	r6, r2
 80188d6:	4604      	mov	r4, r0
 80188d8:	f7ff ff28 	bl	801872c <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 80188dc:	4909      	ldr	r1, [pc, #36]	; (8018904 <memp_malloc_fn+0x38>)
 80188de:	4633      	mov	r3, r6
 80188e0:	462a      	mov	r2, r5
 80188e2:	f851 0024 	ldr.w	r0, [r1, r4, lsl #2]
}
 80188e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 80188ea:	6901      	ldr	r1, [r0, #16]
 80188ec:	3004      	adds	r0, #4
 80188ee:	f7ff bf4d 	b.w	801878c <do_memp_malloc_pool_fn.isra.0>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80188f2:	4b05      	ldr	r3, [pc, #20]	; (8018908 <memp_malloc_fn+0x3c>)
 80188f4:	f240 1257 	movw	r2, #343	; 0x157
 80188f8:	4904      	ldr	r1, [pc, #16]	; (801890c <memp_malloc_fn+0x40>)
 80188fa:	4805      	ldr	r0, [pc, #20]	; (8018910 <memp_malloc_fn+0x44>)
 80188fc:	f00a fbf2 	bl	80230e4 <iprintf>
}
 8018900:	2000      	movs	r0, #0
 8018902:	bd70      	pop	{r4, r5, r6, pc}
 8018904:	080406b4 	.word	0x080406b4
 8018908:	08040404 	.word	0x08040404
 801890c:	08040484 	.word	0x08040484
 8018910:	08029ba0 	.word	0x08029ba0

08018914 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8018914:	280f      	cmp	r0, #15
 8018916:	d811      	bhi.n	801893c <memp_free+0x28>
{
 8018918:	b570      	push	{r4, r5, r6, lr}
 801891a:	460d      	mov	r5, r1

  if (mem == NULL) {
 801891c:	b169      	cbz	r1, 801893a <memp_free+0x26>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801891e:	4604      	mov	r4, r0
 8018920:	f7ff ff04 	bl	801872c <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018924:	4b09      	ldr	r3, [pc, #36]	; (801894c <memp_free+0x38>)
 8018926:	462a      	mov	r2, r5
 8018928:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801892c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 8018930:	f100 0110 	add.w	r1, r0, #16
 8018934:	3004      	adds	r0, #4
 8018936:	f7ff bf55 	b.w	80187e4 <do_memp_free_pool.isra.0>
}
 801893a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801893c:	4b04      	ldr	r3, [pc, #16]	; (8018950 <memp_free+0x3c>)
 801893e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8018942:	4904      	ldr	r1, [pc, #16]	; (8018954 <memp_free+0x40>)
 8018944:	4804      	ldr	r0, [pc, #16]	; (8018958 <memp_free+0x44>)
 8018946:	f00a bbcd 	b.w	80230e4 <iprintf>
 801894a:	bf00      	nop
 801894c:	080406b4 	.word	0x080406b4
 8018950:	08040404 	.word	0x08040404
 8018954:	080404a4 	.word	0x080404a4
 8018958:	08029ba0 	.word	0x08029ba0

0801895c <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801895c:	f06f 000b 	mvn.w	r0, #11
 8018960:	4770      	bx	lr
 8018962:	bf00      	nop

08018964 <netif_issue_reports>:
{
 8018964:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018966:	4604      	mov	r4, r0
{
 8018968:	460d      	mov	r5, r1
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801896a:	b160      	cbz	r0, 8018986 <netif_issue_reports+0x22>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801896c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8018970:	f003 0205 	and.w	r2, r3, #5
 8018974:	2a05      	cmp	r2, #5
 8018976:	d105      	bne.n	8018984 <netif_issue_reports+0x20>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018978:	07ea      	lsls	r2, r5, #31
 801897a:	d503      	bpl.n	8018984 <netif_issue_reports+0x20>
 801897c:	6862      	ldr	r2, [r4, #4]
 801897e:	b10a      	cbz	r2, 8018984 <netif_issue_reports+0x20>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018980:	071b      	lsls	r3, r3, #28
 8018982:	d408      	bmi.n	8018996 <netif_issue_reports+0x32>
}
 8018984:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018986:	4b07      	ldr	r3, [pc, #28]	; (80189a4 <netif_issue_reports+0x40>)
 8018988:	f240 326d 	movw	r2, #877	; 0x36d
 801898c:	4906      	ldr	r1, [pc, #24]	; (80189a8 <netif_issue_reports+0x44>)
 801898e:	4807      	ldr	r0, [pc, #28]	; (80189ac <netif_issue_reports+0x48>)
 8018990:	f00a fba8 	bl	80230e4 <iprintf>
 8018994:	e7ea      	b.n	801896c <netif_issue_reports+0x8>
      etharp_gratuitous(netif);
 8018996:	1d21      	adds	r1, r4, #4
 8018998:	4620      	mov	r0, r4
}
 801899a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      etharp_gratuitous(netif);
 801899e:	f007 bdb7 	b.w	8020510 <etharp_request>
 80189a2:	bf00      	nop
 80189a4:	080406f4 	.word	0x080406f4
 80189a8:	08040728 	.word	0x08040728
 80189ac:	08029ba0 	.word	0x08029ba0

080189b0 <netif_do_set_ipaddr>:
{
 80189b0:	b570      	push	{r4, r5, r6, lr}
 80189b2:	4605      	mov	r5, r0
 80189b4:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80189b6:	460c      	mov	r4, r1
{
 80189b8:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80189ba:	b309      	cbz	r1, 8018a00 <netif_do_set_ipaddr+0x50>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80189bc:	686b      	ldr	r3, [r5, #4]
 80189be:	6822      	ldr	r2, [r4, #0]
 80189c0:	429a      	cmp	r2, r3
 80189c2:	d102      	bne.n	80189ca <netif_do_set_ipaddr+0x1a>
  return 0; /* address unchanged */
 80189c4:	2000      	movs	r0, #0
}
 80189c6:	b002      	add	sp, #8
 80189c8:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80189ca:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80189cc:	4630      	mov	r0, r6
 80189ce:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 80189d0:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80189d2:	f002 f8f9 	bl	801abc8 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80189d6:	a901      	add	r1, sp, #4
 80189d8:	4630      	mov	r0, r6
 80189da:	f005 fd83 	bl	801e4e4 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 80189de:	a901      	add	r1, sp, #4
 80189e0:	4630      	mov	r0, r6
 80189e2:	f000 fe99 	bl	8019718 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80189e6:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80189e8:	2101      	movs	r1, #1
 80189ea:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80189ec:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80189ee:	f7ff ffb9 	bl	8018964 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 80189f2:	69eb      	ldr	r3, [r5, #28]
 80189f4:	b10b      	cbz	r3, 80189fa <netif_do_set_ipaddr+0x4a>
 80189f6:	4628      	mov	r0, r5
 80189f8:	4798      	blx	r3
    return 1; /* address changed */
 80189fa:	2001      	movs	r0, #1
}
 80189fc:	b002      	add	sp, #8
 80189fe:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018a00:	4b03      	ldr	r3, [pc, #12]	; (8018a10 <netif_do_set_ipaddr+0x60>)
 8018a02:	f240 12cb 	movw	r2, #459	; 0x1cb
 8018a06:	4903      	ldr	r1, [pc, #12]	; (8018a14 <netif_do_set_ipaddr+0x64>)
 8018a08:	4803      	ldr	r0, [pc, #12]	; (8018a18 <netif_do_set_ipaddr+0x68>)
 8018a0a:	f00a fb6b 	bl	80230e4 <iprintf>
 8018a0e:	e7d5      	b.n	80189bc <netif_do_set_ipaddr+0xc>
 8018a10:	080406f4 	.word	0x080406f4
 8018a14:	0804074c 	.word	0x0804074c
 8018a18:	08029ba0 	.word	0x08029ba0

08018a1c <netif_init>:
}
 8018a1c:	4770      	bx	lr
 8018a1e:	bf00      	nop

08018a20 <netif_set_addr>:
{
 8018a20:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 8018a22:	4e15      	ldr	r6, [pc, #84]	; (8018a78 <netif_set_addr+0x58>)
{
 8018a24:	b083      	sub	sp, #12
 8018a26:	4604      	mov	r4, r0
    ipaddr = IP4_ADDR_ANY4;
 8018a28:	2900      	cmp	r1, #0
 8018a2a:	bf14      	ite	ne
 8018a2c:	460f      	movne	r7, r1
 8018a2e:	4637      	moveq	r7, r6
    netmask = IP4_ADDR_ANY4;
 8018a30:	2a00      	cmp	r2, #0
 8018a32:	bf14      	ite	ne
 8018a34:	4615      	movne	r5, r2
 8018a36:	4635      	moveq	r5, r6
    gw = IP4_ADDR_ANY4;
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	bf18      	it	ne
 8018a3c:	461e      	movne	r6, r3
  remove = ip4_addr_isany(ipaddr);
 8018a3e:	683b      	ldr	r3, [r7, #0]
 8018a40:	b16b      	cbz	r3, 8018a5e <netif_set_addr+0x3e>
 8018a42:	2100      	movs	r1, #0
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8018a44:	682b      	ldr	r3, [r5, #0]
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8018a46:	68a2      	ldr	r2, [r4, #8]
 8018a48:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8018a4a:	68e2      	ldr	r2, [r4, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8018a4c:	bf18      	it	ne
 8018a4e:	60a3      	strne	r3, [r4, #8]
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018a50:	6833      	ldr	r3, [r6, #0]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8018a52:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8018a54:	bf18      	it	ne
 8018a56:	60e3      	strne	r3, [r4, #12]
  if (!remove) {
 8018a58:	b139      	cbz	r1, 8018a6a <netif_set_addr+0x4a>
}
 8018a5a:	b003      	add	sp, #12
 8018a5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018a5e:	4639      	mov	r1, r7
 8018a60:	aa01      	add	r2, sp, #4
 8018a62:	f7ff ffa5 	bl	80189b0 <netif_do_set_ipaddr>
 8018a66:	2101      	movs	r1, #1
 8018a68:	e7ec      	b.n	8018a44 <netif_set_addr+0x24>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018a6a:	4639      	mov	r1, r7
 8018a6c:	aa01      	add	r2, sp, #4
 8018a6e:	4620      	mov	r0, r4
 8018a70:	f7ff ff9e 	bl	80189b0 <netif_do_set_ipaddr>
}
 8018a74:	b003      	add	sp, #12
 8018a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018a78:	08042888 	.word	0x08042888

08018a7c <netif_add>:
{
 8018a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a80:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8018a82:	4606      	mov	r6, r0
 8018a84:	2800      	cmp	r0, #0
 8018a86:	d07d      	beq.n	8018b84 <netif_add+0x108>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8018a88:	2f00      	cmp	r7, #0
 8018a8a:	f000 8084 	beq.w	8018b96 <netif_add+0x11a>
  if (ipaddr == NULL) {
 8018a8e:	4688      	mov	r8, r1
  netif->num = netif_num;
 8018a90:	f8df a12c 	ldr.w	sl, [pc, #300]	; 8018bc0 <netif_add+0x144>
  netif->state = state;
 8018a94:	990a      	ldr	r1, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8018a96:	2400      	movs	r4, #0
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018a98:	4d43      	ldr	r5, [pc, #268]	; (8018ba8 <netif_add+0x12c>)
  netif->state = state;
 8018a9a:	6241      	str	r1, [r0, #36]	; 0x24
  netif->num = netif_num;
 8018a9c:	f89a e000 	ldrb.w	lr, [sl]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018aa0:	42a3      	cmp	r3, r4
 8018aa2:	bf08      	it	eq
 8018aa4:	462b      	moveq	r3, r5
  netif->input = input;
 8018aa6:	990c      	ldr	r1, [sp, #48]	; 0x30
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018aa8:	42a2      	cmp	r2, r4
 8018aaa:	bf08      	it	eq
 8018aac:	462a      	moveq	r2, r5
  netif->output = netif_null_output_ip4;
 8018aae:	f8df c114 	ldr.w	ip, [pc, #276]	; 8018bc4 <netif_add+0x148>
  netif->input = input;
 8018ab2:	6101      	str	r1, [r0, #16]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018ab4:	45a0      	cmp	r8, r4
 8018ab6:	bf14      	ite	ne
 8018ab8:	4641      	movne	r1, r8
 8018aba:	4629      	moveq	r1, r5
  netif->num = netif_num;
 8018abc:	f880 e038 	strb.w	lr, [r0, #56]	; 0x38
  ip_addr_set_zero_ip4(&netif->gw);
 8018ac0:	60c4      	str	r4, [r0, #12]
  netif->mtu = 0;
 8018ac2:	8584      	strh	r4, [r0, #44]	; 0x2c
  netif->flags = 0;
 8018ac4:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8018ac8:	6284      	str	r4, [r0, #40]	; 0x28
  netif->output = netif_null_output_ip4;
 8018aca:	f8c0 c014 	str.w	ip, [r0, #20]
  ip_addr_set_zero_ip4(&netif->netmask);
 8018ace:	e9c0 4401 	strd	r4, r4, [r0, #4]
  netif->link_callback = NULL;
 8018ad2:	e9c0 4407 	strd	r4, r4, [r0, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 8018ad6:	f7ff ffa3 	bl	8018a20 <netif_set_addr>
  if (init(netif) != ERR_OK) {
 8018ada:	4630      	mov	r0, r6
 8018adc:	47b8      	blx	r7
 8018ade:	2800      	cmp	r0, #0
 8018ae0:	d14d      	bne.n	8018b7e <netif_add+0x102>
 8018ae2:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 8018ae6:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8018bc8 <netif_add+0x14c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018aea:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8018bb4 <netif_add+0x138>
 8018aee:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8018bcc <netif_add+0x150>
 8018af2:	4f2e      	ldr	r7, [pc, #184]	; (8018bac <netif_add+0x130>)
      if (netif->num == 255) {
 8018af4:	2aff      	cmp	r2, #255	; 0xff
 8018af6:	d102      	bne.n	8018afe <netif_add+0x82>
        netif->num = 0;
 8018af8:	2300      	movs	r3, #0
 8018afa:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018afe:	f8d8 4000 	ldr.w	r4, [r8]
 8018b02:	b3cc      	cbz	r4, 8018b78 <netif_add+0xfc>
      num_netifs = 0;
 8018b04:	2500      	movs	r5, #0
 8018b06:	e007      	b.n	8018b18 <netif_add+0x9c>
        if (netif2->num == netif->num) {
 8018b08:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8018b0c:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d014      	beq.n	8018b3e <netif_add+0xc2>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018b14:	6824      	ldr	r4, [r4, #0]
 8018b16:	b1fc      	cbz	r4, 8018b58 <netif_add+0xdc>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018b18:	42a6      	cmp	r6, r4
        num_netifs++;
 8018b1a:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018b1e:	d013      	beq.n	8018b48 <netif_add+0xcc>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8018b20:	2dff      	cmp	r5, #255	; 0xff
 8018b22:	ddf1      	ble.n	8018b08 <netif_add+0x8c>
 8018b24:	465b      	mov	r3, fp
 8018b26:	f240 128d 	movw	r2, #397	; 0x18d
 8018b2a:	4921      	ldr	r1, [pc, #132]	; (8018bb0 <netif_add+0x134>)
 8018b2c:	4638      	mov	r0, r7
 8018b2e:	f00a fad9 	bl	80230e4 <iprintf>
        if (netif2->num == netif->num) {
 8018b32:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8018b36:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d1ea      	bne.n	8018b14 <netif_add+0x98>
          netif->num++;
 8018b3e:	3201      	adds	r2, #1
 8018b40:	b2d2      	uxtb	r2, r2
 8018b42:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 8018b46:	e7d5      	b.n	8018af4 <netif_add+0x78>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018b48:	465b      	mov	r3, fp
 8018b4a:	f240 128b 	movw	r2, #395	; 0x18b
 8018b4e:	4649      	mov	r1, r9
 8018b50:	4638      	mov	r0, r7
 8018b52:	f00a fac7 	bl	80230e4 <iprintf>
 8018b56:	e7e3      	b.n	8018b20 <netif_add+0xa4>
 8018b58:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 8018b5c:	2bfe      	cmp	r3, #254	; 0xfe
 8018b5e:	d009      	beq.n	8018b74 <netif_add+0xf8>
    netif_num = (u8_t)(netif->num + 1);
 8018b60:	3301      	adds	r3, #1
 8018b62:	b2db      	uxtb	r3, r3
  return netif;
 8018b64:	4630      	mov	r0, r6
  netif->next = netif_list;
 8018b66:	6034      	str	r4, [r6, #0]
 8018b68:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 8018b6c:	f8c8 6000 	str.w	r6, [r8]
}
 8018b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netif_num = 0;
 8018b74:	2300      	movs	r3, #0
 8018b76:	e7f5      	b.n	8018b64 <netif_add+0xe8>
 8018b78:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 8018b7c:	e7ee      	b.n	8018b5c <netif_add+0xe0>
    return NULL;
 8018b7e:	4620      	mov	r0, r4
}
 8018b80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8018b84:	4b0b      	ldr	r3, [pc, #44]	; (8018bb4 <netif_add+0x138>)
 8018b86:	f240 1227 	movw	r2, #295	; 0x127
 8018b8a:	490b      	ldr	r1, [pc, #44]	; (8018bb8 <netif_add+0x13c>)
 8018b8c:	4807      	ldr	r0, [pc, #28]	; (8018bac <netif_add+0x130>)
 8018b8e:	f00a faa9 	bl	80230e4 <iprintf>
 8018b92:	4630      	mov	r0, r6
 8018b94:	e7ec      	b.n	8018b70 <netif_add+0xf4>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8018b96:	4b07      	ldr	r3, [pc, #28]	; (8018bb4 <netif_add+0x138>)
 8018b98:	f44f 7294 	mov.w	r2, #296	; 0x128
 8018b9c:	4907      	ldr	r1, [pc, #28]	; (8018bbc <netif_add+0x140>)
 8018b9e:	4803      	ldr	r0, [pc, #12]	; (8018bac <netif_add+0x130>)
 8018ba0:	f00a faa0 	bl	80230e4 <iprintf>
 8018ba4:	4638      	mov	r0, r7
 8018ba6:	e7e3      	b.n	8018b70 <netif_add+0xf4>
 8018ba8:	08042888 	.word	0x08042888
 8018bac:	08029ba0 	.word	0x08029ba0
 8018bb0:	080407b0 	.word	0x080407b0
 8018bb4:	080406f4 	.word	0x080406f4
 8018bb8:	0804075c 	.word	0x0804075c
 8018bbc:	08040778 	.word	0x08040778
 8018bc0:	2001aa28 	.word	0x2001aa28
 8018bc4:	0801895d 	.word	0x0801895d
 8018bc8:	2002e380 	.word	0x2002e380
 8018bcc:	0804079c 	.word	0x0804079c

08018bd0 <netif_set_default>:
  netif_default = netif;
 8018bd0:	4b01      	ldr	r3, [pc, #4]	; (8018bd8 <netif_set_default+0x8>)
 8018bd2:	6018      	str	r0, [r3, #0]
}
 8018bd4:	4770      	bx	lr
 8018bd6:	bf00      	nop
 8018bd8:	2002e384 	.word	0x2002e384

08018bdc <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018bdc:	b198      	cbz	r0, 8018c06 <netif_set_up+0x2a>
{
 8018bde:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 8018be0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8018be4:	4604      	mov	r4, r0
 8018be6:	07da      	lsls	r2, r3, #31
 8018be8:	d40c      	bmi.n	8018c04 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018bea:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 8018bee:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 8018bf0:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 8018bf4:	b102      	cbz	r2, 8018bf8 <netif_set_up+0x1c>
 8018bf6:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018bf8:	4620      	mov	r0, r4
 8018bfa:	2103      	movs	r1, #3
}
 8018bfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018c00:	f7ff beb0 	b.w	8018964 <netif_issue_reports>
}
 8018c04:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8018c06:	4b03      	ldr	r3, [pc, #12]	; (8018c14 <netif_set_up+0x38>)
 8018c08:	f44f 7254 	mov.w	r2, #848	; 0x350
 8018c0c:	4902      	ldr	r1, [pc, #8]	; (8018c18 <netif_set_up+0x3c>)
 8018c0e:	4803      	ldr	r0, [pc, #12]	; (8018c1c <netif_set_up+0x40>)
 8018c10:	f00a ba68 	b.w	80230e4 <iprintf>
 8018c14:	080406f4 	.word	0x080406f4
 8018c18:	080407e0 	.word	0x080407e0
 8018c1c:	08029ba0 	.word	0x08029ba0

08018c20 <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018c20:	b1a8      	cbz	r0, 8018c4e <netif_set_down+0x2e>
{
 8018c22:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 8018c24:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8018c28:	4604      	mov	r4, r0
 8018c2a:	07da      	lsls	r2, r3, #31
 8018c2c:	d50b      	bpl.n	8018c46 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018c2e:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018c32:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 8018c34:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8018c38:	d406      	bmi.n	8018c48 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 8018c3a:	69e3      	ldr	r3, [r4, #28]
 8018c3c:	b11b      	cbz	r3, 8018c46 <netif_set_down+0x26>
 8018c3e:	4620      	mov	r0, r4
}
 8018c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 8018c44:	4718      	bx	r3
}
 8018c46:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 8018c48:	f007 f998 	bl	801ff7c <etharp_cleanup_netif>
 8018c4c:	e7f5      	b.n	8018c3a <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8018c4e:	4b03      	ldr	r3, [pc, #12]	; (8018c5c <netif_set_down+0x3c>)
 8018c50:	f240 329b 	movw	r2, #923	; 0x39b
 8018c54:	4902      	ldr	r1, [pc, #8]	; (8018c60 <netif_set_down+0x40>)
 8018c56:	4803      	ldr	r0, [pc, #12]	; (8018c64 <netif_set_down+0x44>)
 8018c58:	f00a ba44 	b.w	80230e4 <iprintf>
 8018c5c:	080406f4 	.word	0x080406f4
 8018c60:	080407fc 	.word	0x080407fc
 8018c64:	08029ba0 	.word	0x08029ba0

08018c68 <netif_set_status_callback>:
  if (netif) {
 8018c68:	b100      	cbz	r0, 8018c6c <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 8018c6a:	61c1      	str	r1, [r0, #28]
}
 8018c6c:	4770      	bx	lr
 8018c6e:	bf00      	nop

08018c70 <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018c70:	b1b8      	cbz	r0, 8018ca2 <netif_set_link_up+0x32>
{
 8018c72:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8018c74:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8018c78:	4604      	mov	r4, r0
 8018c7a:	075a      	lsls	r2, r3, #29
 8018c7c:	d500      	bpl.n	8018c80 <netif_set_link_up+0x10>
}
 8018c7e:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018c80:	f043 0304 	orr.w	r3, r3, #4
 8018c84:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 8018c88:	f006 fc4a 	bl	801f520 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8018c8c:	2103      	movs	r1, #3
 8018c8e:	4620      	mov	r0, r4
 8018c90:	f7ff fe68 	bl	8018964 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 8018c94:	6a23      	ldr	r3, [r4, #32]
 8018c96:	2b00      	cmp	r3, #0
 8018c98:	d0f1      	beq.n	8018c7e <netif_set_link_up+0xe>
 8018c9a:	4620      	mov	r0, r4
}
 8018c9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 8018ca0:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018ca2:	4b03      	ldr	r3, [pc, #12]	; (8018cb0 <netif_set_link_up+0x40>)
 8018ca4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018ca8:	4902      	ldr	r1, [pc, #8]	; (8018cb4 <netif_set_link_up+0x44>)
 8018caa:	4803      	ldr	r0, [pc, #12]	; (8018cb8 <netif_set_link_up+0x48>)
 8018cac:	f00a ba1a 	b.w	80230e4 <iprintf>
 8018cb0:	080406f4 	.word	0x080406f4
 8018cb4:	0804081c 	.word	0x0804081c
 8018cb8:	08029ba0 	.word	0x08029ba0

08018cbc <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018cbc:	b158      	cbz	r0, 8018cd6 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018cbe:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8018cc2:	0751      	lsls	r1, r2, #29
 8018cc4:	d506      	bpl.n	8018cd4 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018cc6:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 8018cca:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018ccc:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 8018cd0:	b101      	cbz	r1, 8018cd4 <netif_set_link_down+0x18>
 8018cd2:	4708      	bx	r1
}
 8018cd4:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8018cd6:	4b03      	ldr	r3, [pc, #12]	; (8018ce4 <netif_set_link_down+0x28>)
 8018cd8:	f240 4206 	movw	r2, #1030	; 0x406
 8018cdc:	4902      	ldr	r1, [pc, #8]	; (8018ce8 <netif_set_link_down+0x2c>)
 8018cde:	4803      	ldr	r0, [pc, #12]	; (8018cec <netif_set_link_down+0x30>)
 8018ce0:	f00a ba00 	b.w	80230e4 <iprintf>
 8018ce4:	080406f4 	.word	0x080406f4
 8018ce8:	08040840 	.word	0x08040840
 8018cec:	08029ba0 	.word	0x08029ba0

08018cf0 <netif_set_link_callback>:
  if (netif) {
 8018cf0:	b100      	cbz	r0, 8018cf4 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 8018cf2:	6201      	str	r1, [r0, #32]
}
 8018cf4:	4770      	bx	lr
 8018cf6:	bf00      	nop

08018cf8 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8018cf8:	4602      	mov	r2, r0
 8018cfa:	b158      	cbz	r0, 8018d14 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 8018cfc:	4b06      	ldr	r3, [pc, #24]	; (8018d18 <netif_get_by_index+0x20>)
 8018cfe:	6818      	ldr	r0, [r3, #0]
 8018d00:	b910      	cbnz	r0, 8018d08 <netif_get_by_index+0x10>
 8018d02:	e007      	b.n	8018d14 <netif_get_by_index+0x1c>
 8018d04:	6800      	ldr	r0, [r0, #0]
 8018d06:	b130      	cbz	r0, 8018d16 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 8018d08:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8018d0c:	3301      	adds	r3, #1
 8018d0e:	b2db      	uxtb	r3, r3
 8018d10:	4293      	cmp	r3, r2
 8018d12:	d1f7      	bne.n	8018d04 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 8018d14:	4770      	bx	lr
 8018d16:	4770      	bx	lr
 8018d18:	2002e380 	.word	0x2002e380

08018d1c <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018d1c:	4907      	ldr	r1, [pc, #28]	; (8018d3c <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018d1e:	2200      	movs	r2, #0
 8018d20:	4b07      	ldr	r3, [pc, #28]	; (8018d40 <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018d22:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018d24:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018d26:	b910      	cbnz	r0, 8018d2e <pbuf_free_ooseq_callback+0x12>
 8018d28:	e006      	b.n	8018d38 <pbuf_free_ooseq_callback+0x1c>
 8018d2a:	68c0      	ldr	r0, [r0, #12]
 8018d2c:	b120      	cbz	r0, 8018d38 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 8018d2e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d0fa      	beq.n	8018d2a <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018d34:	f001 bf72 	b.w	801ac1c <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 8018d38:	4770      	bx	lr
 8018d3a:	bf00      	nop
 8018d3c:	2002e498 	.word	0x2002e498
 8018d40:	2002e388 	.word	0x2002e388

08018d44 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018d44:	b538      	push	{r3, r4, r5, lr}
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018d46:	b310      	cbz	r0, 8018d8e <pbuf_add_header_impl+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018d48:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8018d4c:	d21d      	bcs.n	8018d8a <pbuf_add_header_impl+0x46>
    return 1;
  }
  if (header_size_increment == 0) {
 8018d4e:	b1a1      	cbz	r1, 8018d7a <pbuf_add_header_impl+0x36>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018d50:	b28d      	uxth	r5, r1
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018d52:	8904      	ldrh	r4, [r0, #8]
 8018d54:	4603      	mov	r3, r0
 8018d56:	442c      	add	r4, r5
 8018d58:	b2a4      	uxth	r4, r4
 8018d5a:	42a5      	cmp	r5, r4
 8018d5c:	d815      	bhi.n	8018d8a <pbuf_add_header_impl+0x46>
  }

  type_internal = p->type_internal;

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018d5e:	f990 000c 	ldrsb.w	r0, [r0, #12]
 8018d62:	2800      	cmp	r0, #0
 8018d64:	db0b      	blt.n	8018d7e <pbuf_add_header_impl+0x3a>
      return 1;
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018d66:	b182      	cbz	r2, 8018d8a <pbuf_add_header_impl+0x46>
      payload = (u8_t *)p->payload - header_size_increment;
 8018d68:	6858      	ldr	r0, [r3, #4]
 8018d6a:	1a41      	subs	r1, r0, r1
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
  p->len = (u16_t)(p->len + increment_magnitude);
 8018d6c:	895a      	ldrh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);


  return 0;
 8018d6e:	2000      	movs	r0, #0
  p->payload = payload;
 8018d70:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018d72:	4415      	add	r5, r2
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018d74:	811c      	strh	r4, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018d76:	815d      	strh	r5, [r3, #10]
}
 8018d78:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8018d7a:	4608      	mov	r0, r1
}
 8018d7c:	bd38      	pop	{r3, r4, r5, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 8018d7e:	6858      	ldr	r0, [r3, #4]
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018d80:	f103 0210 	add.w	r2, r3, #16
    payload = (u8_t *)p->payload - header_size_increment;
 8018d84:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018d86:	4291      	cmp	r1, r2
 8018d88:	d2f0      	bcs.n	8018d6c <pbuf_add_header_impl+0x28>
    return 1;
 8018d8a:	2001      	movs	r0, #1
}
 8018d8c:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8018d8e:	4b04      	ldr	r3, [pc, #16]	; (8018da0 <pbuf_add_header_impl+0x5c>)
 8018d90:	f240 12df 	movw	r2, #479	; 0x1df
 8018d94:	4903      	ldr	r1, [pc, #12]	; (8018da4 <pbuf_add_header_impl+0x60>)
 8018d96:	4804      	ldr	r0, [pc, #16]	; (8018da8 <pbuf_add_header_impl+0x64>)
 8018d98:	f00a f9a4 	bl	80230e4 <iprintf>
    return 1;
 8018d9c:	2001      	movs	r0, #1
}
 8018d9e:	bd38      	pop	{r3, r4, r5, pc}
 8018da0:	08040864 	.word	0x08040864
 8018da4:	080422fc 	.word	0x080422fc
 8018da8:	08029ba0 	.word	0x08029ba0

08018dac <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018dac:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 8018db0:	2b01      	cmp	r3, #1
{
 8018db2:	b570      	push	{r4, r5, r6, lr}
 8018db4:	4614      	mov	r4, r2
 8018db6:	4606      	mov	r6, r0
 8018db8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018dba:	d110      	bne.n	8018dde <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018dbc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 8018dc0:	490b      	ldr	r1, [pc, #44]	; (8018df0 <pbuf_alloc_reference+0x44>)
 8018dc2:	200e      	movs	r0, #14
 8018dc4:	f7ff fd82 	bl	80188cc <memp_malloc_fn>
  if (p == NULL) {
 8018dc8:	b140      	cbz	r0, 8018ddc <pbuf_alloc_reference+0x30>
  p->next = NULL;
 8018dca:	2300      	movs	r3, #0
  p->ref = 1;
 8018dcc:	2201      	movs	r2, #1
  p->payload = payload;
 8018dce:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 8018dd0:	8105      	strh	r5, [r0, #8]
  p->len = len;
 8018dd2:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 8018dd4:	7304      	strb	r4, [r0, #12]
  p->next = NULL;
 8018dd6:	6003      	str	r3, [r0, #0]
  p->flags = flags;
 8018dd8:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 8018dda:	81c2      	strh	r2, [r0, #14]
}
 8018ddc:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018dde:	4b04      	ldr	r3, [pc, #16]	; (8018df0 <pbuf_alloc_reference+0x44>)
 8018de0:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018de4:	4903      	ldr	r1, [pc, #12]	; (8018df4 <pbuf_alloc_reference+0x48>)
 8018de6:	4804      	ldr	r0, [pc, #16]	; (8018df8 <pbuf_alloc_reference+0x4c>)
 8018de8:	f00a f97c 	bl	80230e4 <iprintf>
 8018dec:	e7e6      	b.n	8018dbc <pbuf_alloc_reference+0x10>
 8018dee:	bf00      	nop
 8018df0:	08040864 	.word	0x08040864
 8018df4:	08040894 	.word	0x08040894
 8018df8:	08029ba0 	.word	0x08029ba0

08018dfc <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018dfc:	3003      	adds	r0, #3
{
 8018dfe:	b470      	push	{r4, r5, r6}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018e00:	f020 0403 	bic.w	r4, r0, #3
{
 8018e04:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 8018e08:	4618      	mov	r0, r3
 8018e0a:	9b03      	ldr	r3, [sp, #12]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018e0c:	190e      	adds	r6, r1, r4
 8018e0e:	42ae      	cmp	r6, r5
 8018e10:	d80d      	bhi.n	8018e2e <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 8018e12:	b103      	cbz	r3, 8018e16 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018e14:	4423      	add	r3, r4
  p->next = NULL;
 8018e16:	2600      	movs	r6, #0
  p->flags = flags;
 8018e18:	2502      	movs	r5, #2
  p->ref = 1;
 8018e1a:	2401      	movs	r4, #1
  p->type_internal = (u8_t)type;
 8018e1c:	7302      	strb	r2, [r0, #12]
  p->next = NULL;
 8018e1e:	6006      	str	r6, [r0, #0]
  p->flags = flags;
 8018e20:	7345      	strb	r5, [r0, #13]
  p->ref = 1;
 8018e22:	81c4      	strh	r4, [r0, #14]
  p->payload = payload;
 8018e24:	6043      	str	r3, [r0, #4]
  p->tot_len = tot_len;
 8018e26:	8101      	strh	r1, [r0, #8]
  p->len = len;
 8018e28:	8141      	strh	r1, [r0, #10]
}
 8018e2a:	bc70      	pop	{r4, r5, r6}
 8018e2c:	4770      	bx	lr
    return NULL;
 8018e2e:	2000      	movs	r0, #0
}
 8018e30:	bc70      	pop	{r4, r5, r6}
 8018e32:	4770      	bx	lr

08018e34 <pbuf_add_header>:
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018e34:	2200      	movs	r2, #0
 8018e36:	f7ff bf85 	b.w	8018d44 <pbuf_add_header_impl>
 8018e3a:	bf00      	nop

08018e3c <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018e3c:	b538      	push	{r3, r4, r5, lr}
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018e3e:	b1a0      	cbz	r0, 8018e6a <pbuf_remove_header+0x2e>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018e40:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8018e44:	d21a      	bcs.n	8018e7c <pbuf_remove_header+0x40>
    return 1;
  }
  if (header_size_decrement == 0) {
 8018e46:	b171      	cbz	r1, 8018e66 <pbuf_remove_header+0x2a>
    return 0;
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018e48:	b28c      	uxth	r4, r1
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018e4a:	8942      	ldrh	r2, [r0, #10]
 8018e4c:	4603      	mov	r3, r0
 8018e4e:	42a2      	cmp	r2, r4
 8018e50:	d316      	bcc.n	8018e80 <pbuf_remove_header+0x44>
  /* remember current payload pointer */
  payload = p->payload;
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018e52:	6840      	ldr	r0, [r0, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018e54:	1b12      	subs	r2, r2, r4
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018e56:	891d      	ldrh	r5, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018e58:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 8018e5a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018e5c:	1b2c      	subs	r4, r5, r4

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018e5e:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018e60:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018e62:	811c      	strh	r4, [r3, #8]
}
 8018e64:	bd38      	pop	{r3, r4, r5, pc}
    return 0;
 8018e66:	4608      	mov	r0, r1
}
 8018e68:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 8018e6a:	4b0a      	ldr	r3, [pc, #40]	; (8018e94 <pbuf_remove_header+0x58>)
 8018e6c:	f240 224b 	movw	r2, #587	; 0x24b
 8018e70:	4909      	ldr	r1, [pc, #36]	; (8018e98 <pbuf_remove_header+0x5c>)
 8018e72:	480a      	ldr	r0, [pc, #40]	; (8018e9c <pbuf_remove_header+0x60>)
 8018e74:	f00a f936 	bl	80230e4 <iprintf>
    return 1;
 8018e78:	2001      	movs	r0, #1
}
 8018e7a:	bd38      	pop	{r3, r4, r5, pc}
    return 1;
 8018e7c:	2001      	movs	r0, #1
}
 8018e7e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018e80:	4b04      	ldr	r3, [pc, #16]	; (8018e94 <pbuf_remove_header+0x58>)
 8018e82:	f240 2255 	movw	r2, #597	; 0x255
 8018e86:	4906      	ldr	r1, [pc, #24]	; (8018ea0 <pbuf_remove_header+0x64>)
 8018e88:	4804      	ldr	r0, [pc, #16]	; (8018e9c <pbuf_remove_header+0x60>)
 8018e8a:	f00a f92b 	bl	80230e4 <iprintf>
 8018e8e:	2001      	movs	r0, #1
}
 8018e90:	bd38      	pop	{r3, r4, r5, pc}
 8018e92:	bf00      	nop
 8018e94:	08040864 	.word	0x08040864
 8018e98:	080422fc 	.word	0x080422fc
 8018e9c:	08029ba0 	.word	0x08029ba0
 8018ea0:	080408a8 	.word	0x080408a8

08018ea4 <pbuf_header_force>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
  if (header_size_increment < 0) {
 8018ea4:	1e0b      	subs	r3, r1, #0
 8018ea6:	db02      	blt.n	8018eae <pbuf_header_force+0xa>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018ea8:	2201      	movs	r2, #1
 8018eaa:	f7ff bf4b 	b.w	8018d44 <pbuf_add_header_impl>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018eae:	4259      	negs	r1, r3
 8018eb0:	f7ff bfc4 	b.w	8018e3c <pbuf_remove_header>

08018eb4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018eb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018eb8:	4604      	mov	r4, r0
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	d052      	beq.n	8018f64 <pbuf_free+0xb0>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018ebe:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018ec0:	4f2d      	ldr	r7, [pc, #180]	; (8018f78 <pbuf_free+0xc4>)
 8018ec2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8018f8c <pbuf_free+0xd8>
 8018ec6:	4e2d      	ldr	r6, [pc, #180]	; (8018f7c <pbuf_free+0xc8>)
 8018ec8:	e00a      	b.n	8018ee0 <pbuf_free+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018eca:	6923      	ldr	r3, [r4, #16]
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d03b      	beq.n	8018f48 <pbuf_free+0x94>
        pc->custom_free_function(p);
 8018ed0:	4620      	mov	r0, r4
 8018ed2:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 8018ed4:	3501      	adds	r5, #1
 8018ed6:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8018ed8:	f1b9 0f00 	cmp.w	r9, #0
 8018edc:	d01b      	beq.n	8018f16 <pbuf_free+0x62>
 8018ede:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018ee0:	7ba3      	ldrb	r3, [r4, #14]
 8018ee2:	b1db      	cbz	r3, 8018f1c <pbuf_free+0x68>
    ref = --(p->ref);
 8018ee4:	3b01      	subs	r3, #1
 8018ee6:	b2db      	uxtb	r3, r3
 8018ee8:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 8018eea:	b9a3      	cbnz	r3, 8018f16 <pbuf_free+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018eec:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 8018eee:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018ef2:	079b      	lsls	r3, r3, #30
 8018ef4:	d4e9      	bmi.n	8018eca <pbuf_free+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 8018ef6:	7b23      	ldrb	r3, [r4, #12]
 8018ef8:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018efc:	2b02      	cmp	r3, #2
 8018efe:	d01e      	beq.n	8018f3e <pbuf_free+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018f00:	2b01      	cmp	r3, #1
 8018f02:	d02a      	beq.n	8018f5a <pbuf_free+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018f04:	b99b      	cbnz	r3, 8018f2e <pbuf_free+0x7a>
      count++;
 8018f06:	3501      	adds	r5, #1
          mem_free(p);
 8018f08:	4620      	mov	r0, r4
 8018f0a:	f7ff f917 	bl	801813c <mem_free>
      count++;
 8018f0e:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 8018f10:	f1b9 0f00 	cmp.w	r9, #0
 8018f14:	d1e3      	bne.n	8018ede <pbuf_free+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 8018f16:	4628      	mov	r0, r5
 8018f18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018f1c:	463b      	mov	r3, r7
 8018f1e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018f22:	4641      	mov	r1, r8
 8018f24:	4630      	mov	r0, r6
 8018f26:	f00a f8dd 	bl	80230e4 <iprintf>
 8018f2a:	7ba3      	ldrb	r3, [r4, #14]
 8018f2c:	e7da      	b.n	8018ee4 <pbuf_free+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 8018f2e:	463b      	mov	r3, r7
 8018f30:	f240 320f 	movw	r2, #783	; 0x30f
 8018f34:	4912      	ldr	r1, [pc, #72]	; (8018f80 <pbuf_free+0xcc>)
 8018f36:	4630      	mov	r0, r6
 8018f38:	f00a f8d4 	bl	80230e4 <iprintf>
 8018f3c:	e7ca      	b.n	8018ed4 <pbuf_free+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 8018f3e:	4621      	mov	r1, r4
 8018f40:	200f      	movs	r0, #15
 8018f42:	f7ff fce7 	bl	8018914 <memp_free>
 8018f46:	e7c5      	b.n	8018ed4 <pbuf_free+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018f48:	463b      	mov	r3, r7
 8018f4a:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018f4e:	490d      	ldr	r1, [pc, #52]	; (8018f84 <pbuf_free+0xd0>)
 8018f50:	4630      	mov	r0, r6
 8018f52:	f00a f8c7 	bl	80230e4 <iprintf>
 8018f56:	6923      	ldr	r3, [r4, #16]
 8018f58:	e7ba      	b.n	8018ed0 <pbuf_free+0x1c>
          memp_free(MEMP_PBUF, p);
 8018f5a:	4621      	mov	r1, r4
 8018f5c:	200e      	movs	r0, #14
 8018f5e:	f7ff fcd9 	bl	8018914 <memp_free>
 8018f62:	e7b7      	b.n	8018ed4 <pbuf_free+0x20>
    return 0;
 8018f64:	4605      	mov	r5, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 8018f66:	4b04      	ldr	r3, [pc, #16]	; (8018f78 <pbuf_free+0xc4>)
 8018f68:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8018f6c:	4906      	ldr	r1, [pc, #24]	; (8018f88 <pbuf_free+0xd4>)
 8018f6e:	4803      	ldr	r0, [pc, #12]	; (8018f7c <pbuf_free+0xc8>)
 8018f70:	f00a f8b8 	bl	80230e4 <iprintf>
    return 0;
 8018f74:	e7cf      	b.n	8018f16 <pbuf_free+0x62>
 8018f76:	bf00      	nop
 8018f78:	08040864 	.word	0x08040864
 8018f7c:	08029ba0 	.word	0x08029ba0
 8018f80:	08040904 	.word	0x08040904
 8018f84:	080408e0 	.word	0x080408e0
 8018f88:	080422fc 	.word	0x080422fc
 8018f8c:	080408c8 	.word	0x080408c8

08018f90 <pbuf_alloc>:
  switch (type) {
 8018f90:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 8018f94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018f98:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 8018f9a:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 8018f9e:	d03d      	beq.n	801901c <pbuf_alloc+0x8c>
 8018fa0:	d80e      	bhi.n	8018fc0 <pbuf_alloc+0x30>
 8018fa2:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 8018fa6:	2c01      	cmp	r4, #1
 8018fa8:	d033      	beq.n	8019012 <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018faa:	4b41      	ldr	r3, [pc, #260]	; (80190b0 <pbuf_alloc+0x120>)
 8018fac:	f240 1227 	movw	r2, #295	; 0x127
 8018fb0:	4940      	ldr	r1, [pc, #256]	; (80190b4 <pbuf_alloc+0x124>)
      return NULL;
 8018fb2:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018fb4:	4840      	ldr	r0, [pc, #256]	; (80190b8 <pbuf_alloc+0x128>)
 8018fb6:	f00a f895 	bl	80230e4 <iprintf>
}
 8018fba:	4628      	mov	r0, r5
 8018fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 8018fc0:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 8018fc4:	d1f1      	bne.n	8018faa <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018fc6:	f10a 0303 	add.w	r3, sl, #3
 8018fca:	1cca      	adds	r2, r1, #3
 8018fcc:	4606      	mov	r6, r0
 8018fce:	f022 0203 	bic.w	r2, r2, #3
 8018fd2:	f023 0303 	bic.w	r3, r3, #3
 8018fd6:	4413      	add	r3, r2
 8018fd8:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018fda:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018fde:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018fe0:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018fe2:	d34d      	bcc.n	8019080 <pbuf_alloc+0xf0>
 8018fe4:	4282      	cmp	r2, r0
 8018fe6:	d84b      	bhi.n	8019080 <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 8018fe8:	f7ff fa82 	bl	80184f0 <mem_malloc>
      if (p == NULL) {
 8018fec:	4605      	mov	r5, r0
 8018fee:	2800      	cmp	r0, #0
 8018ff0:	d0e3      	beq.n	8018fba <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018ff2:	1983      	adds	r3, r0, r6
  p->next = NULL;
 8018ff4:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 8018ff6:	4a31      	ldr	r2, [pc, #196]	; (80190bc <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8018ff8:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 8018ffa:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->len = len;
 8018ffe:	f8a0 900a 	strh.w	r9, [r0, #10]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8019002:	f023 0303 	bic.w	r3, r3, #3
  p->next = NULL;
 8019006:	6001      	str	r1, [r0, #0]
  p->type_internal = (u8_t)type;
 8019008:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801900a:	6043      	str	r3, [r0, #4]
}
 801900c:	4628      	mov	r0, r5
 801900e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 8019012:	2000      	movs	r0, #0
}
 8019014:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 8019018:	f7ff bec8 	b.w	8018dac <pbuf_alloc_reference>
  switch (type) {
 801901c:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801901e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80190b0 <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 8019022:	4f27      	ldr	r7, [pc, #156]	; (80190c0 <pbuf_alloc+0x130>)
  switch (type) {
 8019024:	4625      	mov	r5, r4
 8019026:	e009      	b.n	801903c <pbuf_alloc+0xac>
          last->next = q;
 8019028:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801902a:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801902e:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 8019032:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 8019036:	f1b9 0f00 	cmp.w	r9, #0
 801903a:	d0be      	beq.n	8018fba <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801903c:	22f3      	movs	r2, #243	; 0xf3
 801903e:	4641      	mov	r1, r8
 8019040:	200f      	movs	r0, #15
 8019042:	4626      	mov	r6, r4
 8019044:	f7ff fc42 	bl	80188cc <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019048:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801904c:	2100      	movs	r1, #0
        if (q == NULL) {
 801904e:	4604      	mov	r4, r0
 8019050:	b1d0      	cbz	r0, 8019088 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019052:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019056:	eb00 020a 	add.w	r2, r0, sl
  p->next = NULL;
 801905a:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801905c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019060:	3213      	adds	r2, #19
  p->tot_len = tot_len;
 8019062:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019066:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8019068:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801906c:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801906e:	454b      	cmp	r3, r9
  p->payload = payload;
 8019070:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8019072:	bf28      	it	cs
 8019074:	464b      	movcs	r3, r9
  p->len = len;
 8019076:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 8019078:	2d00      	cmp	r5, #0
 801907a:	d1d5      	bne.n	8019028 <pbuf_alloc+0x98>
 801907c:	4605      	mov	r5, r0
 801907e:	e7d4      	b.n	801902a <pbuf_alloc+0x9a>
          return NULL;
 8019080:	2500      	movs	r5, #0
}
 8019082:	4628      	mov	r0, r5
 8019084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 8019088:	4e0e      	ldr	r6, [pc, #56]	; (80190c4 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801908a:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801908c:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801908e:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 8019090:	b133      	cbz	r3, 80190a0 <pbuf_alloc+0x110>
          if (p) {
 8019092:	2d00      	cmp	r5, #0
 8019094:	d0f4      	beq.n	8019080 <pbuf_alloc+0xf0>
            pbuf_free(p);
 8019096:	4628      	mov	r0, r5
          return NULL;
 8019098:	2500      	movs	r5, #0
            pbuf_free(p);
 801909a:	f7ff ff0b 	bl	8018eb4 <pbuf_free>
 801909e:	e78c      	b.n	8018fba <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80190a0:	4601      	mov	r1, r0
 80190a2:	4809      	ldr	r0, [pc, #36]	; (80190c8 <pbuf_alloc+0x138>)
 80190a4:	f7fc fec0 	bl	8015e28 <tcpip_try_callback>
 80190a8:	2800      	cmp	r0, #0
 80190aa:	d0f2      	beq.n	8019092 <pbuf_alloc+0x102>
 80190ac:	7034      	strb	r4, [r6, #0]
 80190ae:	e7f0      	b.n	8019092 <pbuf_alloc+0x102>
 80190b0:	08040864 	.word	0x08040864
 80190b4:	08040918 	.word	0x08040918
 80190b8:	08029ba0 	.word	0x08029ba0
 80190bc:	00010080 	.word	0x00010080
 80190c0:	00010082 	.word	0x00010082
 80190c4:	2002e388 	.word	0x2002e388
 80190c8:	08018d1d 	.word	0x08018d1d

080190cc <pbuf_realloc>:
{
 80190cc:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80190ce:	4604      	mov	r4, r0
{
 80190d0:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80190d2:	2800      	cmp	r0, #0
 80190d4:	d02d      	beq.n	8019132 <pbuf_realloc+0x66>
  if (new_len >= p->tot_len) {
 80190d6:	8922      	ldrh	r2, [r4, #8]
 80190d8:	42aa      	cmp	r2, r5
 80190da:	d929      	bls.n	8019130 <pbuf_realloc+0x64>
  while (rem_len > q->len) {
 80190dc:	8963      	ldrh	r3, [r4, #10]
 80190de:	429d      	cmp	r5, r3
 80190e0:	d90d      	bls.n	80190fe <pbuf_realloc+0x32>
 80190e2:	1aa9      	subs	r1, r5, r2
 80190e4:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80190e6:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 80190e8:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80190ea:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 80190ec:	b29d      	uxth	r5, r3
    q = q->next;
 80190ee:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80190f0:	2c00      	cmp	r4, #0
 80190f2:	d02f      	beq.n	8019154 <pbuf_realloc+0x88>
  while (rem_len > q->len) {
 80190f4:	8963      	ldrh	r3, [r4, #10]
 80190f6:	42ab      	cmp	r3, r5
 80190f8:	d201      	bcs.n	80190fe <pbuf_realloc+0x32>
 80190fa:	8922      	ldrh	r2, [r4, #8]
 80190fc:	e7f3      	b.n	80190e6 <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80190fe:	7b22      	ldrb	r2, [r4, #12]
 8019100:	0712      	lsls	r2, r2, #28
 8019102:	d10d      	bne.n	8019120 <pbuf_realloc+0x54>
 8019104:	42ab      	cmp	r3, r5
 8019106:	d00b      	beq.n	8019120 <pbuf_realloc+0x54>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8019108:	7b63      	ldrb	r3, [r4, #13]
 801910a:	079b      	lsls	r3, r3, #30
 801910c:	d408      	bmi.n	8019120 <pbuf_realloc+0x54>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801910e:	6863      	ldr	r3, [r4, #4]
 8019110:	4620      	mov	r0, r4
 8019112:	1b1b      	subs	r3, r3, r4
 8019114:	18e9      	adds	r1, r5, r3
 8019116:	b289      	uxth	r1, r1
 8019118:	f7ff f8fa 	bl	8018310 <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801911c:	4604      	mov	r4, r0
 801911e:	b180      	cbz	r0, 8019142 <pbuf_realloc+0x76>
  if (q->next != NULL) {
 8019120:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 8019122:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 8019124:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 8019126:	b108      	cbz	r0, 801912c <pbuf_realloc+0x60>
    pbuf_free(q->next);
 8019128:	f7ff fec4 	bl	8018eb4 <pbuf_free>
  q->next = NULL;
 801912c:	2300      	movs	r3, #0
 801912e:	6023      	str	r3, [r4, #0]
}
 8019130:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8019132:	4b0d      	ldr	r3, [pc, #52]	; (8019168 <pbuf_realloc+0x9c>)
 8019134:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8019138:	490c      	ldr	r1, [pc, #48]	; (801916c <pbuf_realloc+0xa0>)
 801913a:	480d      	ldr	r0, [pc, #52]	; (8019170 <pbuf_realloc+0xa4>)
 801913c:	f009 ffd2 	bl	80230e4 <iprintf>
 8019140:	e7c9      	b.n	80190d6 <pbuf_realloc+0xa>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8019142:	4b09      	ldr	r3, [pc, #36]	; (8019168 <pbuf_realloc+0x9c>)
 8019144:	f240 12bd 	movw	r2, #445	; 0x1bd
 8019148:	490a      	ldr	r1, [pc, #40]	; (8019174 <pbuf_realloc+0xa8>)
 801914a:	4809      	ldr	r0, [pc, #36]	; (8019170 <pbuf_realloc+0xa4>)
 801914c:	f009 ffca 	bl	80230e4 <iprintf>
  q->len = rem_len;
 8019150:	8164      	strh	r4, [r4, #10]
 8019152:	deff      	udf	#255	; 0xff
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8019154:	4b04      	ldr	r3, [pc, #16]	; (8019168 <pbuf_realloc+0x9c>)
 8019156:	f240 12af 	movw	r2, #431	; 0x1af
 801915a:	4907      	ldr	r1, [pc, #28]	; (8019178 <pbuf_realloc+0xac>)
 801915c:	4804      	ldr	r0, [pc, #16]	; (8019170 <pbuf_realloc+0xa4>)
 801915e:	f009 ffc1 	bl	80230e4 <iprintf>
  while (rem_len > q->len) {
 8019162:	8963      	ldrh	r3, [r4, #10]
 8019164:	deff      	udf	#255	; 0xff
 8019166:	bf00      	nop
 8019168:	08040864 	.word	0x08040864
 801916c:	08040934 	.word	0x08040934
 8019170:	08029ba0 	.word	0x08029ba0
 8019174:	08040964 	.word	0x08040964
 8019178:	0804094c 	.word	0x0804094c

0801917c <pbuf_clen>:
pbuf_clen(const struct pbuf *p)
{
  u16_t len;

  len = 0;
  while (p != NULL) {
 801917c:	4603      	mov	r3, r0
 801917e:	b130      	cbz	r0, 801918e <pbuf_clen+0x12>
  len = 0;
 8019180:	2000      	movs	r0, #0
    ++len;
 8019182:	3001      	adds	r0, #1
    p = p->next;
 8019184:	681b      	ldr	r3, [r3, #0]
    ++len;
 8019186:	b280      	uxth	r0, r0
  while (p != NULL) {
 8019188:	2b00      	cmp	r3, #0
 801918a:	d1fa      	bne.n	8019182 <pbuf_clen+0x6>
 801918c:	4770      	bx	lr
  }
  return len;
}
 801918e:	4770      	bx	lr

08019190 <pbuf_ref>:
 */
void
pbuf_ref(struct pbuf *p)
{
  /* pbuf given? */
  if (p != NULL) {
 8019190:	b120      	cbz	r0, 801919c <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019192:	7b83      	ldrb	r3, [r0, #14]
 8019194:	3301      	adds	r3, #1
 8019196:	b2db      	uxtb	r3, r3
 8019198:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801919a:	b103      	cbz	r3, 801919e <pbuf_ref+0xe>
  }
}
 801919c:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801919e:	4b03      	ldr	r3, [pc, #12]	; (80191ac <pbuf_ref+0x1c>)
 80191a0:	f240 3242 	movw	r2, #834	; 0x342
 80191a4:	4902      	ldr	r1, [pc, #8]	; (80191b0 <pbuf_ref+0x20>)
 80191a6:	4803      	ldr	r0, [pc, #12]	; (80191b4 <pbuf_ref+0x24>)
 80191a8:	f009 bf9c 	b.w	80230e4 <iprintf>
 80191ac:	08040864 	.word	0x08040864
 80191b0:	08040980 	.word	0x08040980
 80191b4:	08029ba0 	.word	0x08029ba0

080191b8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80191b8:	b570      	push	{r4, r5, r6, lr}
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80191ba:	b338      	cbz	r0, 801920c <pbuf_cat+0x54>
 80191bc:	460e      	mov	r6, r1
 80191be:	b329      	cbz	r1, 801920c <pbuf_cat+0x54>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80191c0:	6804      	ldr	r4, [r0, #0]
 80191c2:	b90c      	cbnz	r4, 80191c8 <pbuf_cat+0x10>
 80191c4:	e02b      	b.n	801921e <pbuf_cat+0x66>
 80191c6:	4614      	mov	r4, r2
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80191c8:	8903      	ldrh	r3, [r0, #8]
 80191ca:	8935      	ldrh	r5, [r6, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80191cc:	6822      	ldr	r2, [r4, #0]
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80191ce:	442b      	add	r3, r5
 80191d0:	8103      	strh	r3, [r0, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80191d2:	4620      	mov	r0, r4
 80191d4:	2a00      	cmp	r2, #0
 80191d6:	d1f6      	bne.n	80191c6 <pbuf_cat+0xe>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80191d8:	8963      	ldrh	r3, [r4, #10]
 80191da:	8922      	ldrh	r2, [r4, #8]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d010      	beq.n	8019202 <pbuf_cat+0x4a>
 80191e0:	4b10      	ldr	r3, [pc, #64]	; (8019224 <pbuf_cat+0x6c>)
 80191e2:	f240 3262 	movw	r2, #866	; 0x362
 80191e6:	4910      	ldr	r1, [pc, #64]	; (8019228 <pbuf_cat+0x70>)
 80191e8:	4810      	ldr	r0, [pc, #64]	; (801922c <pbuf_cat+0x74>)
 80191ea:	f009 ff7b 	bl	80230e4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80191ee:	6823      	ldr	r3, [r4, #0]
 80191f0:	b133      	cbz	r3, 8019200 <pbuf_cat+0x48>
 80191f2:	4b0c      	ldr	r3, [pc, #48]	; (8019224 <pbuf_cat+0x6c>)
 80191f4:	f240 3263 	movw	r2, #867	; 0x363
 80191f8:	490d      	ldr	r1, [pc, #52]	; (8019230 <pbuf_cat+0x78>)
 80191fa:	480c      	ldr	r0, [pc, #48]	; (801922c <pbuf_cat+0x74>)
 80191fc:	f009 ff72 	bl	80230e4 <iprintf>
 8019200:	8923      	ldrh	r3, [r4, #8]
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019202:	8932      	ldrh	r2, [r6, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8019204:	6026      	str	r6, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019206:	4413      	add	r3, r2
 8019208:	8123      	strh	r3, [r4, #8]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801920a:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801920c:	4b05      	ldr	r3, [pc, #20]	; (8019224 <pbuf_cat+0x6c>)
 801920e:	f240 3259 	movw	r2, #857	; 0x359
 8019212:	4908      	ldr	r1, [pc, #32]	; (8019234 <pbuf_cat+0x7c>)
 8019214:	4805      	ldr	r0, [pc, #20]	; (801922c <pbuf_cat+0x74>)
}
 8019216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801921a:	f009 bf63 	b.w	80230e4 <iprintf>
  for (p = h; p->next != NULL; p = p->next) {
 801921e:	4604      	mov	r4, r0
 8019220:	e7da      	b.n	80191d8 <pbuf_cat+0x20>
 8019222:	bf00      	nop
 8019224:	08040864 	.word	0x08040864
 8019228:	080409cc 	.word	0x080409cc
 801922c:	08029ba0 	.word	0x08029ba0
 8019230:	080409fc 	.word	0x080409fc
 8019234:	08040994 	.word	0x08040994

08019238 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8019238:	b510      	push	{r4, lr}
 801923a:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801923c:	f7ff ffbc 	bl	80191b8 <pbuf_cat>
  if (p != NULL) {
 8019240:	b124      	cbz	r4, 801924c <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8019242:	7ba3      	ldrb	r3, [r4, #14]
 8019244:	3301      	adds	r3, #1
 8019246:	b2db      	uxtb	r3, r3
 8019248:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801924a:	b103      	cbz	r3, 801924e <pbuf_chain+0x16>
  /* t is now referenced by h */
  pbuf_ref(t);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801924c:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801924e:	4b04      	ldr	r3, [pc, #16]	; (8019260 <pbuf_chain+0x28>)
 8019250:	f240 3242 	movw	r2, #834	; 0x342
 8019254:	4903      	ldr	r1, [pc, #12]	; (8019264 <pbuf_chain+0x2c>)
 8019256:	4804      	ldr	r0, [pc, #16]	; (8019268 <pbuf_chain+0x30>)
}
 8019258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801925c:	f009 bf42 	b.w	80230e4 <iprintf>
 8019260:	08040864 	.word	0x08040864
 8019264:	08040980 	.word	0x08040980
 8019268:	08029ba0 	.word	0x08029ba0

0801926c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801926c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8019270:	2800      	cmp	r0, #0
 8019272:	f000 809a 	beq.w	80193aa <pbuf_copy+0x13e>
 8019276:	fab1 f681 	clz	r6, r1
 801927a:	4688      	mov	r8, r1
 801927c:	0976      	lsrs	r6, r6, #5
 801927e:	2900      	cmp	r1, #0
 8019280:	f000 8093 	beq.w	80193aa <pbuf_copy+0x13e>
 8019284:	8902      	ldrh	r2, [r0, #8]
 8019286:	4605      	mov	r5, r0
 8019288:	890b      	ldrh	r3, [r1, #8]
 801928a:	429a      	cmp	r2, r3
 801928c:	f0c0 808d 	bcc.w	80193aa <pbuf_copy+0x13e>
 8019290:	8944      	ldrh	r4, [r0, #10]
  size_t offset_to = 0, offset_from = 0, len;
 8019292:	4637      	mov	r7, r6
 8019294:	894b      	ldrh	r3, [r1, #10]
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019296:	f8df a130 	ldr.w	sl, [pc, #304]	; 80193c8 <pbuf_copy+0x15c>
 801929a:	f8df b144 	ldr.w	fp, [pc, #324]	; 80193e0 <pbuf_copy+0x174>
 801929e:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80193d0 <pbuf_copy+0x164>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80192a2:	1b9a      	subs	r2, r3, r6
 80192a4:	1be4      	subs	r4, r4, r7
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80192a6:	6868      	ldr	r0, [r5, #4]
 80192a8:	4294      	cmp	r4, r2
 80192aa:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80192ae:	4438      	add	r0, r7
 80192b0:	bf28      	it	cs
 80192b2:	4614      	movcs	r4, r2
 80192b4:	4431      	add	r1, r6
 80192b6:	4622      	mov	r2, r4
    offset_to += len;
 80192b8:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80192ba:	f008 ff79 	bl	80221b0 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80192be:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 80192c0:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80192c2:	429f      	cmp	r7, r3
 80192c4:	d838      	bhi.n	8019338 <pbuf_copy+0xcc>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80192c6:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 80192ca:	429e      	cmp	r6, r3
 80192cc:	d82a      	bhi.n	8019324 <pbuf_copy+0xb8>
    if (offset_from >= p_from->len) {
 80192ce:	429e      	cmp	r6, r3
 80192d0:	d318      	bcc.n	8019304 <pbuf_copy+0x98>
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 80192d2:	896b      	ldrh	r3, [r5, #10]
      p_from = p_from->next;
 80192d4:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 80192d8:	429f      	cmp	r7, r3
 80192da:	d04c      	beq.n	8019376 <pbuf_copy+0x10a>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80192dc:	f1b8 0f00 	cmp.w	r8, #0
 80192e0:	d145      	bne.n	801936e <pbuf_copy+0x102>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80192e2:	892a      	ldrh	r2, [r5, #8]
 80192e4:	896b      	ldrh	r3, [r5, #10]
 80192e6:	429a      	cmp	r2, r3
 80192e8:	d14d      	bne.n	8019386 <pbuf_copy+0x11a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80192ea:	6828      	ldr	r0, [r5, #0]
 80192ec:	b140      	cbz	r0, 8019300 <pbuf_copy+0x94>
 80192ee:	4b36      	ldr	r3, [pc, #216]	; (80193c8 <pbuf_copy+0x15c>)
 80192f0:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80192f4:	4935      	ldr	r1, [pc, #212]	; (80193cc <pbuf_copy+0x160>)
 80192f6:	4836      	ldr	r0, [pc, #216]	; (80193d0 <pbuf_copy+0x164>)
 80192f8:	f009 fef4 	bl	80230e4 <iprintf>
 80192fc:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 8019300:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 8019304:	896a      	ldrh	r2, [r5, #10]
 8019306:	42ba      	cmp	r2, r7
 8019308:	d040      	beq.n	801938c <pbuf_copy+0x120>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801930a:	f8b8 2008 	ldrh.w	r2, [r8, #8]
 801930e:	429a      	cmp	r2, r3
 8019310:	d01a      	beq.n	8019348 <pbuf_copy+0xdc>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019312:	896c      	ldrh	r4, [r5, #10]
 8019314:	2d00      	cmp	r5, #0
 8019316:	d0c4      	beq.n	80192a2 <pbuf_copy+0x36>
 8019318:	892b      	ldrh	r3, [r5, #8]
 801931a:	42a3      	cmp	r3, r4
 801931c:	d04f      	beq.n	80193be <pbuf_copy+0x152>
 801931e:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8019322:	e7be      	b.n	80192a2 <pbuf_copy+0x36>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8019324:	4653      	mov	r3, sl
 8019326:	f240 32da 	movw	r2, #986	; 0x3da
 801932a:	492a      	ldr	r1, [pc, #168]	; (80193d4 <pbuf_copy+0x168>)
 801932c:	4648      	mov	r0, r9
 801932e:	f009 fed9 	bl	80230e4 <iprintf>
 8019332:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8019336:	e7ca      	b.n	80192ce <pbuf_copy+0x62>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019338:	4653      	mov	r3, sl
 801933a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801933e:	4659      	mov	r1, fp
 8019340:	4648      	mov	r0, r9
 8019342:	f009 fecf 	bl	80230e4 <iprintf>
 8019346:	e7be      	b.n	80192c6 <pbuf_copy+0x5a>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8019348:	f8d8 2000 	ldr.w	r2, [r8]
 801934c:	2a00      	cmp	r2, #0
 801934e:	d0e0      	beq.n	8019312 <pbuf_copy+0xa6>
 8019350:	4b1d      	ldr	r3, [pc, #116]	; (80193c8 <pbuf_copy+0x15c>)
 8019352:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8019356:	491d      	ldr	r1, [pc, #116]	; (80193cc <pbuf_copy+0x160>)
 8019358:	481d      	ldr	r0, [pc, #116]	; (80193d0 <pbuf_copy+0x164>)
 801935a:	f009 fec3 	bl	80230e4 <iprintf>
 801935e:	f06f 0005 	mvn.w	r0, #5
}
 8019362:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8019366:	f1b8 0f00 	cmp.w	r8, #0
 801936a:	d00a      	beq.n	8019382 <pbuf_copy+0x116>
      offset_to = 0;
 801936c:	2700      	movs	r7, #0
 801936e:	2600      	movs	r6, #0
 8019370:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8019374:	e7c9      	b.n	801930a <pbuf_copy+0x9e>
      p_to = p_to->next;
 8019376:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019378:	2d00      	cmp	r5, #0
 801937a:	d1f4      	bne.n	8019366 <pbuf_copy+0xfa>
 801937c:	f1b8 0f00 	cmp.w	r8, #0
 8019380:	d108      	bne.n	8019394 <pbuf_copy+0x128>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8019382:	2d00      	cmp	r5, #0
 8019384:	d1ad      	bne.n	80192e2 <pbuf_copy+0x76>
  return ERR_OK;
 8019386:	2000      	movs	r0, #0
}
 8019388:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801938c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801938e:	b10d      	cbz	r5, 8019394 <pbuf_copy+0x128>
      offset_to = 0;
 8019390:	2700      	movs	r7, #0
 8019392:	e7ed      	b.n	8019370 <pbuf_copy+0x104>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019394:	4b0c      	ldr	r3, [pc, #48]	; (80193c8 <pbuf_copy+0x15c>)
 8019396:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801939a:	490f      	ldr	r1, [pc, #60]	; (80193d8 <pbuf_copy+0x16c>)
 801939c:	480c      	ldr	r0, [pc, #48]	; (80193d0 <pbuf_copy+0x164>)
 801939e:	f009 fea1 	bl	80230e4 <iprintf>
 80193a2:	f06f 000f 	mvn.w	r0, #15
}
 80193a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80193aa:	4b07      	ldr	r3, [pc, #28]	; (80193c8 <pbuf_copy+0x15c>)
 80193ac:	f240 32c9 	movw	r2, #969	; 0x3c9
 80193b0:	490a      	ldr	r1, [pc, #40]	; (80193dc <pbuf_copy+0x170>)
 80193b2:	4807      	ldr	r0, [pc, #28]	; (80193d0 <pbuf_copy+0x164>)
 80193b4:	f009 fe96 	bl	80230e4 <iprintf>
 80193b8:	f06f 000f 	mvn.w	r0, #15
 80193bc:	e7a0      	b.n	8019300 <pbuf_copy+0x94>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80193be:	682b      	ldr	r3, [r5, #0]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d0ac      	beq.n	801931e <pbuf_copy+0xb2>
 80193c4:	e793      	b.n	80192ee <pbuf_copy+0x82>
 80193c6:	bf00      	nop
 80193c8:	08040864 	.word	0x08040864
 80193cc:	08040a80 	.word	0x08040a80
 80193d0:	08029ba0 	.word	0x08029ba0
 80193d4:	08040a54 	.word	0x08040a54
 80193d8:	08040a70 	.word	0x08040a70
 80193dc:	08040a0c 	.word	0x08040a0c
 80193e0:	08040a3c 	.word	0x08040a3c

080193e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80193e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80193e8:	4605      	mov	r5, r0
 80193ea:	b350      	cbz	r0, 8019442 <pbuf_copy_partial+0x5e>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80193ec:	460f      	mov	r7, r1
 80193ee:	b399      	cbz	r1, 8019458 <pbuf_copy_partial+0x74>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80193f0:	4690      	mov	r8, r2
 80193f2:	b37a      	cbz	r2, 8019454 <pbuf_copy_partial+0x70>
  u16_t left = 0;
 80193f4:	2600      	movs	r6, #0
 80193f6:	e005      	b.n	8019404 <pbuf_copy_partial+0x20>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80193f8:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80193fa:	682d      	ldr	r5, [r5, #0]
 80193fc:	f1b8 0f00 	cmp.w	r8, #0
 8019400:	d01c      	beq.n	801943c <pbuf_copy_partial+0x58>
 8019402:	b1dd      	cbz	r5, 801943c <pbuf_copy_partial+0x58>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019404:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 8019406:	896c      	ldrh	r4, [r5, #10]
 8019408:	b11b      	cbz	r3, 8019412 <pbuf_copy_partial+0x2e>
 801940a:	429c      	cmp	r4, r3
      offset = (u16_t)(offset - p->len);
 801940c:	eba3 0204 	sub.w	r2, r3, r4
    if ((offset != 0) && (offset >= p->len)) {
 8019410:	d9f2      	bls.n	80193f8 <pbuf_copy_partial+0x14>
      buf_copy_len = (u16_t)(p->len - offset);
 8019412:	1ae4      	subs	r4, r4, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019414:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 8019416:	b2a4      	uxth	r4, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019418:	4419      	add	r1, r3
 801941a:	4544      	cmp	r4, r8
 801941c:	bf28      	it	cs
 801941e:	4644      	movcs	r4, r8
 8019420:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8019422:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 8019424:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8019428:	f008 fec2 	bl	80221b0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801942c:	b2b6      	uxth	r6, r6
      offset = 0;
 801942e:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 8019430:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8019434:	682d      	ldr	r5, [r5, #0]
 8019436:	f1b8 0f00 	cmp.w	r8, #0
 801943a:	d1e2      	bne.n	8019402 <pbuf_copy_partial+0x1e>
    }
  }
  return copied_total;
}
 801943c:	4630      	mov	r0, r6
 801943e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8019442:	4606      	mov	r6, r0
 8019444:	4b09      	ldr	r3, [pc, #36]	; (801946c <pbuf_copy_partial+0x88>)
 8019446:	f240 420a 	movw	r2, #1034	; 0x40a
 801944a:	4909      	ldr	r1, [pc, #36]	; (8019470 <pbuf_copy_partial+0x8c>)
 801944c:	4809      	ldr	r0, [pc, #36]	; (8019474 <pbuf_copy_partial+0x90>)
 801944e:	f009 fe49 	bl	80230e4 <iprintf>
 8019452:	e7f3      	b.n	801943c <pbuf_copy_partial+0x58>
  u16_t left = 0;
 8019454:	4616      	mov	r6, r2
 8019456:	e7f1      	b.n	801943c <pbuf_copy_partial+0x58>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019458:	4b04      	ldr	r3, [pc, #16]	; (801946c <pbuf_copy_partial+0x88>)
 801945a:	f240 420b 	movw	r2, #1035	; 0x40b
 801945e:	4906      	ldr	r1, [pc, #24]	; (8019478 <pbuf_copy_partial+0x94>)
 8019460:	463e      	mov	r6, r7
 8019462:	4804      	ldr	r0, [pc, #16]	; (8019474 <pbuf_copy_partial+0x90>)
 8019464:	f009 fe3e 	bl	80230e4 <iprintf>
 8019468:	e7e8      	b.n	801943c <pbuf_copy_partial+0x58>
 801946a:	bf00      	nop
 801946c:	08040864 	.word	0x08040864
 8019470:	08040aac 	.word	0x08040aac
 8019474:	08029ba0 	.word	0x08029ba0
 8019478:	08040acc 	.word	0x08040acc

0801947c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801947c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8019480:	2800      	cmp	r0, #0
 8019482:	d049      	beq.n	8019518 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019484:	460f      	mov	r7, r1
 8019486:	2900      	cmp	r1, #0
 8019488:	d03c      	beq.n	8019504 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801948a:	8903      	ldrh	r3, [r0, #8]
 801948c:	4604      	mov	r4, r0
 801948e:	4690      	mov	r8, r2
 8019490:	4293      	cmp	r3, r2
 8019492:	d32d      	bcc.n	80194f0 <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8019494:	b34a      	cbz	r2, 80194ea <pbuf_take+0x6e>
 8019496:	4615      	mov	r5, r2
  size_t copied_total = 0;
 8019498:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801949a:	f8df b094 	ldr.w	fp, [pc, #148]	; 8019530 <pbuf_take+0xb4>
 801949e:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8019544 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 80194a2:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80194a4:	19b9      	adds	r1, r7, r6
 80194a6:	6860      	ldr	r0, [r4, #4]
 80194a8:	42aa      	cmp	r2, r5
 80194aa:	bf28      	it	cs
 80194ac:	462a      	movcs	r2, r5
 80194ae:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 80194b0:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80194b2:	f008 fe7d 	bl	80221b0 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 80194b6:	6824      	ldr	r4, [r4, #0]
 80194b8:	ebb5 0509 	subs.w	r5, r5, r9
 80194bc:	d009      	beq.n	80194d2 <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80194be:	2c00      	cmp	r4, #0
 80194c0:	d1ef      	bne.n	80194a2 <pbuf_take+0x26>
 80194c2:	465b      	mov	r3, fp
 80194c4:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80194c8:	4651      	mov	r1, sl
 80194ca:	4818      	ldr	r0, [pc, #96]	; (801952c <pbuf_take+0xb0>)
 80194cc:	f009 fe0a 	bl	80230e4 <iprintf>
 80194d0:	e7e7      	b.n	80194a2 <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 80194d2:	45b0      	cmp	r8, r6
 80194d4:	d009      	beq.n	80194ea <pbuf_take+0x6e>
 80194d6:	4b16      	ldr	r3, [pc, #88]	; (8019530 <pbuf_take+0xb4>)
 80194d8:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 80194dc:	4915      	ldr	r1, [pc, #84]	; (8019534 <pbuf_take+0xb8>)
 80194de:	4813      	ldr	r0, [pc, #76]	; (801952c <pbuf_take+0xb0>)
 80194e0:	f009 fe00 	bl	80230e4 <iprintf>
  return ERR_OK;
 80194e4:	4628      	mov	r0, r5
}
 80194e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 80194ea:	2000      	movs	r0, #0
}
 80194ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80194f0:	4b0f      	ldr	r3, [pc, #60]	; (8019530 <pbuf_take+0xb4>)
 80194f2:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80194f6:	4910      	ldr	r1, [pc, #64]	; (8019538 <pbuf_take+0xbc>)
 80194f8:	480c      	ldr	r0, [pc, #48]	; (801952c <pbuf_take+0xb0>)
 80194fa:	f009 fdf3 	bl	80230e4 <iprintf>
 80194fe:	f04f 30ff 	mov.w	r0, #4294967295
 8019502:	e7f3      	b.n	80194ec <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8019504:	4b0a      	ldr	r3, [pc, #40]	; (8019530 <pbuf_take+0xb4>)
 8019506:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801950a:	490c      	ldr	r1, [pc, #48]	; (801953c <pbuf_take+0xc0>)
 801950c:	4807      	ldr	r0, [pc, #28]	; (801952c <pbuf_take+0xb0>)
 801950e:	f009 fde9 	bl	80230e4 <iprintf>
 8019512:	f06f 000f 	mvn.w	r0, #15
 8019516:	e7e9      	b.n	80194ec <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8019518:	4b05      	ldr	r3, [pc, #20]	; (8019530 <pbuf_take+0xb4>)
 801951a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801951e:	4908      	ldr	r1, [pc, #32]	; (8019540 <pbuf_take+0xc4>)
 8019520:	4802      	ldr	r0, [pc, #8]	; (801952c <pbuf_take+0xb0>)
 8019522:	f009 fddf 	bl	80230e4 <iprintf>
 8019526:	f06f 000f 	mvn.w	r0, #15
 801952a:	e7df      	b.n	80194ec <pbuf_take+0x70>
 801952c:	08029ba0 	.word	0x08029ba0
 8019530:	08040864 	.word	0x08040864
 8019534:	08040b5c 	.word	0x08040b5c
 8019538:	08040b24 	.word	0x08040b24
 801953c:	08040b08 	.word	0x08040b08
 8019540:	08040af0 	.word	0x08040af0
 8019544:	08040b44 	.word	0x08040b44

08019548 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8019548:	b390      	cbz	r0, 80195b0 <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801954a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801954e:	460f      	mov	r7, r1
 8019550:	4604      	mov	r4, r0
 8019552:	e002      	b.n	801955a <pbuf_take_at+0x12>
    q = q->next;
 8019554:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8019556:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 8019558:	b334      	cbz	r4, 80195a8 <pbuf_take_at+0x60>
 801955a:	8965      	ldrh	r5, [r4, #10]
 801955c:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801955e:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 8019562:	d9f7      	bls.n	8019554 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8019564:	8921      	ldrh	r1, [r4, #8]
 8019566:	189e      	adds	r6, r3, r2
 8019568:	42b1      	cmp	r1, r6
 801956a:	db1d      	blt.n	80195a8 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801956c:	1ae9      	subs	r1, r5, r3
 801956e:	428a      	cmp	r2, r1
 8019570:	dc07      	bgt.n	8019582 <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8019572:	6860      	ldr	r0, [r4, #4]
 8019574:	4639      	mov	r1, r7
 8019576:	4418      	add	r0, r3
 8019578:	f008 fe1a 	bl	80221b0 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801957c:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801957e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8019582:	fa1f f881 	uxth.w	r8, r1
 8019586:	6860      	ldr	r0, [r4, #4]
 8019588:	4639      	mov	r1, r7
 801958a:	4642      	mov	r2, r8
 801958c:	4418      	add	r0, r3
 801958e:	f008 fe0f 	bl	80221b0 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8019592:	1b70      	subs	r0, r6, r5
 8019594:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 8019596:	2a00      	cmp	r2, #0
 8019598:	d0f0      	beq.n	801957c <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801959a:	eb07 0108 	add.w	r1, r7, r8
 801959e:	6820      	ldr	r0, [r4, #0]
}
 80195a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 80195a4:	f7ff bf6a 	b.w	801947c <pbuf_take>
  return ERR_MEM;
 80195a8:	f04f 30ff 	mov.w	r0, #4294967295
}
 80195ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 80195b0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80195b4:	4770      	bx	lr
 80195b6:	bf00      	nop

080195b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80195b8:	b538      	push	{r3, r4, r5, lr}
 80195ba:	4615      	mov	r5, r2
 80195bc:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80195be:	8929      	ldrh	r1, [r5, #8]
 80195c0:	f7ff fce6 	bl	8018f90 <pbuf_alloc>
  if (q == NULL) {
 80195c4:	4604      	mov	r4, r0
 80195c6:	b118      	cbz	r0, 80195d0 <pbuf_clone+0x18>
    return NULL;
  }
  err = pbuf_copy(q, p);
 80195c8:	4629      	mov	r1, r5
 80195ca:	f7ff fe4f 	bl	801926c <pbuf_copy>
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80195ce:	b908      	cbnz	r0, 80195d4 <pbuf_clone+0x1c>
  return q;
}
 80195d0:	4620      	mov	r0, r4
 80195d2:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80195d4:	4b04      	ldr	r3, [pc, #16]	; (80195e8 <pbuf_clone+0x30>)
 80195d6:	f240 5224 	movw	r2, #1316	; 0x524
 80195da:	4904      	ldr	r1, [pc, #16]	; (80195ec <pbuf_clone+0x34>)
 80195dc:	4804      	ldr	r0, [pc, #16]	; (80195f0 <pbuf_clone+0x38>)
 80195de:	f009 fd81 	bl	80230e4 <iprintf>
}
 80195e2:	4620      	mov	r0, r4
 80195e4:	bd38      	pop	{r3, r4, r5, pc}
 80195e6:	bf00      	nop
 80195e8:	08040864 	.word	0x08040864
 80195ec:	08040b74 	.word	0x08040b74
 80195f0:	08029ba0 	.word	0x08029ba0

080195f4 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 80195f4:	b140      	cbz	r0, 8019608 <pbuf_try_get_at+0x14>
 80195f6:	8943      	ldrh	r3, [r0, #10]
 80195f8:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 80195fa:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 80195fe:	d806      	bhi.n	801960e <pbuf_try_get_at+0x1a>
    q = q->next;
 8019600:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 8019602:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8019604:	2800      	cmp	r0, #0
 8019606:	d1f6      	bne.n	80195f6 <pbuf_try_get_at+0x2>

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
  }
  return -1;
 8019608:	f04f 30ff 	mov.w	r0, #4294967295
}
 801960c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801960e:	6843      	ldr	r3, [r0, #4]
 8019610:	5c58      	ldrb	r0, [r3, r1]
 8019612:	4770      	bx	lr

08019614 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 8019614:	b918      	cbnz	r0, 801961e <pbuf_put_at+0xa>
 8019616:	e00a      	b.n	801962e <pbuf_put_at+0x1a>
    q = q->next;
 8019618:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801961a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801961c:	b130      	cbz	r0, 801962c <pbuf_put_at+0x18>
 801961e:	8943      	ldrh	r3, [r0, #10]
 8019620:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 8019622:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 8019626:	d9f7      	bls.n	8019618 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 8019628:	6843      	ldr	r3, [r0, #4]
 801962a:	545a      	strb	r2, [r3, r1]
  }
}
 801962c:	4770      	bx	lr
 801962e:	4770      	bx	lr

08019630 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 8019630:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019634:	4e33      	ldr	r6, [pc, #204]	; (8019704 <raw_input+0xd4>)
{
 8019636:	4681      	mov	r9, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019638:	6831      	ldr	r1, [r6, #0]
 801963a:	6970      	ldr	r0, [r6, #20]
 801963c:	f007 fb2c 	bl	8020c98 <ip4_addr_isbroadcast_u32>
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 8019640:	4a31      	ldr	r2, [pc, #196]	; (8019708 <raw_input+0xd8>)
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8019642:	f8d9 3004 	ldr.w	r3, [r9, #4]
  pcb = raw_pcbs;
 8019646:	6814      	ldr	r4, [r2, #0]
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 8019648:	7a5d      	ldrb	r5, [r3, #9]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801964a:	2c00      	cmp	r4, #0
 801964c:	d04d      	beq.n	80196ea <raw_input+0xba>
 801964e:	4680      	mov	r8, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 8019650:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 8019652:	f106 0b10 	add.w	fp, r6, #16
 8019656:	46ca      	mov	sl, r9
  prev = NULL;
 8019658:	4606      	mov	r6, r0
 801965a:	e004      	b.n	8019666 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801965c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801965e:	4626      	mov	r6, r4
 8019660:	2b00      	cmp	r3, #0
 8019662:	d037      	beq.n	80196d4 <raw_input+0xa4>
 8019664:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8019666:	7c23      	ldrb	r3, [r4, #16]
 8019668:	42ab      	cmp	r3, r5
 801966a:	d1f7      	bne.n	801965c <raw_input+0x2c>
 801966c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801966e:	b13a      	cbz	r2, 8019680 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019670:	4b24      	ldr	r3, [pc, #144]	; (8019704 <raw_input+0xd4>)
 8019672:	685b      	ldr	r3, [r3, #4]
 8019674:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8019678:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801967a:	b2db      	uxtb	r3, r3
 801967c:	429a      	cmp	r2, r3
 801967e:	d1ed      	bne.n	801965c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 8019680:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 8019682:	f1b8 0f00 	cmp.w	r8, #0
 8019686:	d027      	beq.n	80196d8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 8019688:	2b00      	cmp	r3, #0
 801968a:	d1e7      	bne.n	801965c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801968c:	7c63      	ldrb	r3, [r4, #17]
 801968e:	07db      	lsls	r3, r3, #31
 8019690:	d504      	bpl.n	801969c <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 8019692:	4b1c      	ldr	r3, [pc, #112]	; (8019704 <raw_input+0xd4>)
 8019694:	6862      	ldr	r2, [r4, #4]
 8019696:	691b      	ldr	r3, [r3, #16]
 8019698:	429a      	cmp	r2, r3
 801969a:	d1df      	bne.n	801965c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801969c:	f8d4 9014 	ldr.w	r9, [r4, #20]
 80196a0:	f1b9 0f00 	cmp.w	r9, #0
 80196a4:	d0da      	beq.n	801965c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 80196a6:	465b      	mov	r3, fp
 80196a8:	4652      	mov	r2, sl
 80196aa:	4621      	mov	r1, r4
 80196ac:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 80196ae:	f8da 7004 	ldr.w	r7, [sl, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 80196b2:	47c8      	blx	r9
        if (eaten != 0) {
 80196b4:	b9d8      	cbnz	r0, 80196ee <raw_input+0xbe>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 80196b6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80196ba:	42bb      	cmp	r3, r7
 80196bc:	d013      	beq.n	80196e6 <raw_input+0xb6>
 80196be:	4b13      	ldr	r3, [pc, #76]	; (801970c <raw_input+0xdc>)
 80196c0:	22c0      	movs	r2, #192	; 0xc0
 80196c2:	4913      	ldr	r1, [pc, #76]	; (8019710 <raw_input+0xe0>)
 80196c4:	4626      	mov	r6, r4
 80196c6:	4813      	ldr	r0, [pc, #76]	; (8019714 <raw_input+0xe4>)
 80196c8:	f009 fd0c 	bl	80230e4 <iprintf>
    pcb = pcb->next;
 80196cc:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 80196ce:	2002      	movs	r0, #2
  while (pcb != NULL) {
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	d1c7      	bne.n	8019664 <raw_input+0x34>
  }
  return ret;
}
 80196d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d0d7      	beq.n	801968c <raw_input+0x5c>
 80196dc:	4a09      	ldr	r2, [pc, #36]	; (8019704 <raw_input+0xd4>)
 80196de:	6952      	ldr	r2, [r2, #20]
 80196e0:	4293      	cmp	r3, r2
 80196e2:	d1bb      	bne.n	801965c <raw_input+0x2c>
 80196e4:	e7d2      	b.n	801968c <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 80196e6:	2002      	movs	r0, #2
 80196e8:	e7b8      	b.n	801965c <raw_input+0x2c>
  raw_input_state_t ret = RAW_INPUT_NONE;
 80196ea:	4620      	mov	r0, r4
 80196ec:	e7f2      	b.n	80196d4 <raw_input+0xa4>
          if (prev != NULL) {
 80196ee:	b13e      	cbz	r6, 8019700 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 80196f0:	4905      	ldr	r1, [pc, #20]	; (8019708 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 80196f2:	2001      	movs	r0, #1
            prev->next = pcb->next;
 80196f4:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 80196f6:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 80196f8:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 80196fa:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 80196fc:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 80196fe:	e7e9      	b.n	80196d4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 8019700:	2001      	movs	r0, #1
 8019702:	e7e7      	b.n	80196d4 <raw_input+0xa4>
 8019704:	2001f464 	.word	0x2001f464
 8019708:	2001aa2c 	.word	0x2001aa2c
 801970c:	08040b88 	.word	0x08040b88
 8019710:	08040bb8 	.word	0x08040bb8
 8019714:	08029ba0 	.word	0x08029ba0

08019718 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8019718:	b110      	cbz	r0, 8019720 <raw_netif_ip_addr_changed+0x8>
 801971a:	6802      	ldr	r2, [r0, #0]
 801971c:	b101      	cbz	r1, 8019720 <raw_netif_ip_addr_changed+0x8>
 801971e:	b902      	cbnz	r2, 8019722 <raw_netif_ip_addr_changed+0xa>
 8019720:	4770      	bx	lr
 8019722:	680b      	ldr	r3, [r1, #0]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d0fb      	beq.n	8019720 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8019728:	4b08      	ldr	r3, [pc, #32]	; (801974c <raw_netif_ip_addr_changed+0x34>)
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	2b00      	cmp	r3, #0
 801972e:	d0f7      	beq.n	8019720 <raw_netif_ip_addr_changed+0x8>
{
 8019730:	b410      	push	{r4}
 8019732:	e000      	b.n	8019736 <raw_netif_ip_addr_changed+0x1e>
 8019734:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 8019736:	681c      	ldr	r4, [r3, #0]
 8019738:	4294      	cmp	r4, r2
 801973a:	d101      	bne.n	8019740 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801973c:	680a      	ldr	r2, [r1, #0]
 801973e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 8019740:	68db      	ldr	r3, [r3, #12]
 8019742:	2b00      	cmp	r3, #0
 8019744:	d1f6      	bne.n	8019734 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 8019746:	f85d 4b04 	ldr.w	r4, [sp], #4
 801974a:	4770      	bx	lr
 801974c:	2001aa2c 	.word	0x2001aa2c

08019750 <stats_init>:
#ifdef LWIP_DEBUG
#if MEM_STATS
  lwip_stats.mem.name = "MEM";
#endif /* MEM_STATS */
#endif /* LWIP_DEBUG */
}
 8019750:	4770      	bx	lr
 8019752:	bf00      	nop

08019754 <tcp_new_port>:
 */
static u16_t
tcp_new_port(void)
{
  u8_t i;
  u16_t n = 0;
 8019754:	f8df c060 	ldr.w	ip, [pc, #96]	; 80197b8 <tcp_new_port+0x64>
{
 8019758:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801975c:	b4f0      	push	{r4, r5, r6, r7}
 801975e:	f8bc 0000 	ldrh.w	r0, [ip]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019762:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8019766:	4f11      	ldr	r7, [pc, #68]	; (80197ac <tcp_new_port+0x58>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019768:	4d11      	ldr	r5, [pc, #68]	; (80197b0 <tcp_new_port+0x5c>)
  tcp_port++;
 801976a:	3001      	adds	r0, #1
 801976c:	4c11      	ldr	r4, [pc, #68]	; (80197b4 <tcp_new_port+0x60>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801976e:	462b      	mov	r3, r5
  tcp_port++;
 8019770:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019772:	42b0      	cmp	r0, r6
 8019774:	bf08      	it	eq
 8019776:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801977a:	681b      	ldr	r3, [r3, #0]
 801977c:	b913      	cbnz	r3, 8019784 <tcp_new_port+0x30>
 801977e:	e00c      	b.n	801979a <tcp_new_port+0x46>
 8019780:	68db      	ldr	r3, [r3, #12]
 8019782:	b153      	cbz	r3, 801979a <tcp_new_port+0x46>
      if (pcb->local_port == tcp_port) {
 8019784:	8ada      	ldrh	r2, [r3, #22]
 8019786:	4282      	cmp	r2, r0
 8019788:	d1fa      	bne.n	8019780 <tcp_new_port+0x2c>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801978a:	3901      	subs	r1, #1
 801978c:	b289      	uxth	r1, r1
 801978e:	2900      	cmp	r1, #0
 8019790:	d1eb      	bne.n	801976a <tcp_new_port+0x16>
 8019792:	f8ac 0000 	strh.w	r0, [ip]
          return 0;
 8019796:	4608      	mov	r0, r1
 8019798:	e006      	b.n	80197a8 <tcp_new_port+0x54>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801979a:	42bc      	cmp	r4, r7
 801979c:	d002      	beq.n	80197a4 <tcp_new_port+0x50>
 801979e:	f854 3b04 	ldr.w	r3, [r4], #4
 80197a2:	e7ea      	b.n	801977a <tcp_new_port+0x26>
 80197a4:	f8ac 0000 	strh.w	r0, [ip]
        goto again;
      }
    }
  }
  return tcp_port;
}
 80197a8:	bcf0      	pop	{r4, r5, r6, r7}
 80197aa:	4770      	bx	lr
 80197ac:	080412f8 	.word	0x080412f8
 80197b0:	2002e4a0 	.word	0x2002e4a0
 80197b4:	080412ec 	.word	0x080412ec
 80197b8:	20000410 	.word	0x20000410

080197bc <tcp_close_shutdown_fin>:
{
 80197bc:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80197be:	4604      	mov	r4, r0
 80197c0:	b310      	cbz	r0, 8019808 <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 80197c2:	7d23      	ldrb	r3, [r4, #20]
 80197c4:	2b04      	cmp	r3, #4
 80197c6:	d005      	beq.n	80197d4 <tcp_close_shutdown_fin+0x18>
 80197c8:	2b07      	cmp	r3, #7
 80197ca:	d00e      	beq.n	80197ea <tcp_close_shutdown_fin+0x2e>
 80197cc:	2b03      	cmp	r3, #3
 80197ce:	d001      	beq.n	80197d4 <tcp_close_shutdown_fin+0x18>
 80197d0:	2000      	movs	r0, #0
}
 80197d2:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80197d4:	4620      	mov	r0, r4
 80197d6:	f003 fd83 	bl	801d2e0 <tcp_send_fin>
      if (err == ERR_OK) {
 80197da:	b950      	cbnz	r0, 80197f2 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 80197dc:	2305      	movs	r3, #5
 80197de:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 80197e0:	4620      	mov	r0, r4
 80197e2:	f003 feef 	bl	801d5c4 <tcp_output>
 80197e6:	2000      	movs	r0, #0
}
 80197e8:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 80197ea:	4620      	mov	r0, r4
 80197ec:	f003 fd78 	bl	801d2e0 <tcp_send_fin>
      if (err == ERR_OK) {
 80197f0:	b138      	cbz	r0, 8019802 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 80197f2:	1c43      	adds	r3, r0, #1
 80197f4:	d1ed      	bne.n	80197d2 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80197f6:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 80197f8:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80197fa:	f043 0308 	orr.w	r3, r3, #8
 80197fe:	8363      	strh	r3, [r4, #26]
}
 8019800:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 8019802:	2309      	movs	r3, #9
 8019804:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 8019806:	e7eb      	b.n	80197e0 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019808:	4b03      	ldr	r3, [pc, #12]	; (8019818 <tcp_close_shutdown_fin+0x5c>)
 801980a:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801980e:	4903      	ldr	r1, [pc, #12]	; (801981c <tcp_close_shutdown_fin+0x60>)
 8019810:	4803      	ldr	r0, [pc, #12]	; (8019820 <tcp_close_shutdown_fin+0x64>)
 8019812:	f009 fc67 	bl	80230e4 <iprintf>
 8019816:	e7d4      	b.n	80197c2 <tcp_close_shutdown_fin+0x6>
 8019818:	08040c04 	.word	0x08040c04
 801981c:	08040c34 	.word	0x08040c34
 8019820:	08029ba0 	.word	0x08029ba0

08019824 <tcp_init>:
{
 8019824:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019826:	f009 fd01 	bl	802322c <rand>
 801982a:	4b02      	ldr	r3, [pc, #8]	; (8019834 <tcp_init+0x10>)
 801982c:	4a02      	ldr	r2, [pc, #8]	; (8019838 <tcp_init+0x14>)
 801982e:	4303      	orrs	r3, r0
 8019830:	8013      	strh	r3, [r2, #0]
}
 8019832:	bd08      	pop	{r3, pc}
 8019834:	ffffc000 	.word	0xffffc000
 8019838:	20000410 	.word	0x20000410

0801983c <tcp_free>:
{
 801983c:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801983e:	7d03      	ldrb	r3, [r0, #20]
{
 8019840:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019842:	2b01      	cmp	r3, #1
 8019844:	d005      	beq.n	8019852 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 8019846:	4621      	mov	r1, r4
 8019848:	2002      	movs	r0, #2
}
 801984a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801984e:	f7ff b861 	b.w	8018914 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8019852:	4906      	ldr	r1, [pc, #24]	; (801986c <tcp_free+0x30>)
 8019854:	22d4      	movs	r2, #212	; 0xd4
 8019856:	4b06      	ldr	r3, [pc, #24]	; (8019870 <tcp_free+0x34>)
 8019858:	4806      	ldr	r0, [pc, #24]	; (8019874 <tcp_free+0x38>)
 801985a:	f009 fc43 	bl	80230e4 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801985e:	4621      	mov	r1, r4
 8019860:	2002      	movs	r0, #2
}
 8019862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 8019866:	f7ff b855 	b.w	8018914 <memp_free>
 801986a:	bf00      	nop
 801986c:	08040c40 	.word	0x08040c40
 8019870:	08040c04 	.word	0x08040c04
 8019874:	08029ba0 	.word	0x08029ba0

08019878 <tcp_bind>:
{
 8019878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801987a:	4e26      	ldr	r6, [pc, #152]	; (8019914 <tcp_bind+0x9c>)
 801987c:	2900      	cmp	r1, #0
 801987e:	bf18      	it	ne
 8019880:	460e      	movne	r6, r1
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019882:	2800      	cmp	r0, #0
 8019884:	d03b      	beq.n	80198fe <tcp_bind+0x86>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019886:	7d03      	ldrb	r3, [r0, #20]
 8019888:	4607      	mov	r7, r0
 801988a:	bb73      	cbnz	r3, 80198ea <tcp_bind+0x72>
  if (port == 0) {
 801988c:	b312      	cbz	r2, 80198d4 <tcp_bind+0x5c>
 801988e:	4922      	ldr	r1, [pc, #136]	; (8019918 <tcp_bind+0xa0>)
 8019890:	4b22      	ldr	r3, [pc, #136]	; (801991c <tcp_bind+0xa4>)
 8019892:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019896:	681b      	ldr	r3, [r3, #0]
 8019898:	b913      	cbnz	r3, 80198a0 <tcp_bind+0x28>
 801989a:	e00d      	b.n	80198b8 <tcp_bind+0x40>
 801989c:	68db      	ldr	r3, [r3, #12]
 801989e:	b15b      	cbz	r3, 80198b8 <tcp_bind+0x40>
        if (cpcb->local_port == port) {
 80198a0:	8adc      	ldrh	r4, [r3, #22]
 80198a2:	4294      	cmp	r4, r2
 80198a4:	d1fa      	bne.n	801989c <tcp_bind+0x24>
                (ip_addr_isany(&cpcb->local_ip) ||
 80198a6:	681c      	ldr	r4, [r3, #0]
 80198a8:	b11c      	cbz	r4, 80198b2 <tcp_bind+0x3a>
                 ip_addr_isany(ipaddr) ||
 80198aa:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80198ac:	b10d      	cbz	r5, 80198b2 <tcp_bind+0x3a>
 80198ae:	42ac      	cmp	r4, r5
 80198b0:	d1f4      	bne.n	801989c <tcp_bind+0x24>
              return ERR_USE;
 80198b2:	f06f 0007 	mvn.w	r0, #7
}
 80198b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 80198b8:	4281      	cmp	r1, r0
 80198ba:	d113      	bne.n	80198e4 <tcp_bind+0x6c>
  if (!ip_addr_isany(ipaddr)
 80198bc:	6833      	ldr	r3, [r6, #0]
 80198be:	b103      	cbz	r3, 80198c2 <tcp_bind+0x4a>
    ip_addr_set(&pcb->local_ip, ipaddr);
 80198c0:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80198c2:	4b17      	ldr	r3, [pc, #92]	; (8019920 <tcp_bind+0xa8>)
  pcb->local_port = port;
 80198c4:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80198c6:	681a      	ldr	r2, [r3, #0]
 80198c8:	601f      	str	r7, [r3, #0]
 80198ca:	60fa      	str	r2, [r7, #12]
 80198cc:	f004 f9ae 	bl	801dc2c <tcp_timer_needed>
  return ERR_OK;
 80198d0:	2000      	movs	r0, #0
}
 80198d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 80198d4:	f7ff ff3e 	bl	8019754 <tcp_new_port>
    if (port == 0) {
 80198d8:	4602      	mov	r2, r0
 80198da:	2800      	cmp	r0, #0
 80198dc:	d1ee      	bne.n	80198bc <tcp_bind+0x44>
      return ERR_BUF;
 80198de:	f06f 0001 	mvn.w	r0, #1
}
 80198e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80198e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80198e8:	e7d5      	b.n	8019896 <tcp_bind+0x1e>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80198ea:	4b0e      	ldr	r3, [pc, #56]	; (8019924 <tcp_bind+0xac>)
 80198ec:	f240 22ab 	movw	r2, #683	; 0x2ab
 80198f0:	490d      	ldr	r1, [pc, #52]	; (8019928 <tcp_bind+0xb0>)
 80198f2:	480e      	ldr	r0, [pc, #56]	; (801992c <tcp_bind+0xb4>)
 80198f4:	f009 fbf6 	bl	80230e4 <iprintf>
 80198f8:	f06f 0005 	mvn.w	r0, #5
}
 80198fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80198fe:	4b09      	ldr	r3, [pc, #36]	; (8019924 <tcp_bind+0xac>)
 8019900:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019904:	490a      	ldr	r1, [pc, #40]	; (8019930 <tcp_bind+0xb8>)
 8019906:	4809      	ldr	r0, [pc, #36]	; (801992c <tcp_bind+0xb4>)
 8019908:	f009 fbec 	bl	80230e4 <iprintf>
 801990c:	f06f 000f 	mvn.w	r0, #15
}
 8019910:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019912:	bf00      	nop
 8019914:	08042888 	.word	0x08042888
 8019918:	080412ec 	.word	0x080412ec
 801991c:	2002e4a0 	.word	0x2002e4a0
 8019920:	2002e4a4 	.word	0x2002e4a4
 8019924:	08040c04 	.word	0x08040c04
 8019928:	08040c6c 	.word	0x08040c6c
 801992c:	08029ba0 	.word	0x08029ba0
 8019930:	08040c54 	.word	0x08040c54

08019934 <tcp_listen_with_backlog_and_err>:
{
 8019934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019936:	4604      	mov	r4, r0
{
 8019938:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801993a:	2800      	cmp	r0, #0
 801993c:	d052      	beq.n	80199e4 <tcp_listen_with_backlog_and_err+0xb0>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801993e:	7d05      	ldrb	r5, [r0, #20]
 8019940:	2d00      	cmp	r5, #0
 8019942:	d13c      	bne.n	80199be <tcp_listen_with_backlog_and_err+0x8a>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8019944:	f240 3272 	movw	r2, #882	; 0x372
 8019948:	492c      	ldr	r1, [pc, #176]	; (80199fc <tcp_listen_with_backlog_and_err+0xc8>)
 801994a:	2003      	movs	r0, #3
 801994c:	f7fe ffbe 	bl	80188cc <memp_malloc_fn>
  if (lpcb == NULL) {
 8019950:	4606      	mov	r6, r0
 8019952:	2800      	cmp	r0, #0
 8019954:	d043      	beq.n	80199de <tcp_listen_with_backlog_and_err+0xaa>
  lpcb->callback_arg = pcb->callback_arg;
 8019956:	6921      	ldr	r1, [r4, #16]
  lpcb->state = LISTEN;
 8019958:	2201      	movs	r2, #1
  lpcb->local_port = pcb->local_port;
 801995a:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801995c:	7502      	strb	r2, [r0, #20]
  lpcb->callback_arg = pcb->callback_arg;
 801995e:	6101      	str	r1, [r0, #16]
  lpcb->local_port = pcb->local_port;
 8019960:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 8019962:	7d62      	ldrb	r2, [r4, #21]
 8019964:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 8019966:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8019968:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801996a:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801996c:	7ae2      	ldrb	r2, [r4, #11]
 801996e:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 8019970:	7aa2      	ldrb	r2, [r4, #10]
 8019972:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8019974:	6822      	ldr	r2, [r4, #0]
 8019976:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 8019978:	b163      	cbz	r3, 8019994 <tcp_listen_with_backlog_and_err+0x60>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801997a:	4a21      	ldr	r2, [pc, #132]	; (8019a00 <tcp_listen_with_backlog_and_err+0xcc>)
 801997c:	6813      	ldr	r3, [r2, #0]
 801997e:	42a3      	cmp	r3, r4
 8019980:	d018      	beq.n	80199b4 <tcp_listen_with_backlog_and_err+0x80>
 8019982:	b12b      	cbz	r3, 8019990 <tcp_listen_with_backlog_and_err+0x5c>
 8019984:	68d9      	ldr	r1, [r3, #12]
 8019986:	42a1      	cmp	r1, r4
 8019988:	d024      	beq.n	80199d4 <tcp_listen_with_backlog_and_err+0xa0>
 801998a:	460b      	mov	r3, r1
 801998c:	2b00      	cmp	r3, #0
 801998e:	d1f9      	bne.n	8019984 <tcp_listen_with_backlog_and_err+0x50>
 8019990:	2300      	movs	r3, #0
 8019992:	60e3      	str	r3, [r4, #12]
  tcp_free(pcb);
 8019994:	4620      	mov	r0, r4
 8019996:	f7ff ff51 	bl	801983c <tcp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801999a:	4b1a      	ldr	r3, [pc, #104]	; (8019a04 <tcp_listen_with_backlog_and_err+0xd0>)
  lpcb->accept = tcp_accept_null;
 801999c:	491a      	ldr	r1, [pc, #104]	; (8019a08 <tcp_listen_with_backlog_and_err+0xd4>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801999e:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 80199a0:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80199a2:	60f2      	str	r2, [r6, #12]
 80199a4:	601e      	str	r6, [r3, #0]
 80199a6:	f004 f941 	bl	801dc2c <tcp_timer_needed>
  res = ERR_OK;
 80199aa:	2300      	movs	r3, #0
  if (err != NULL) {
 80199ac:	b107      	cbz	r7, 80199b0 <tcp_listen_with_backlog_and_err+0x7c>
    *err = res;
 80199ae:	703b      	strb	r3, [r7, #0]
}
 80199b0:	4630      	mov	r0, r6
 80199b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80199b4:	68e3      	ldr	r3, [r4, #12]
 80199b6:	6013      	str	r3, [r2, #0]
 80199b8:	2300      	movs	r3, #0
 80199ba:	60e3      	str	r3, [r4, #12]
 80199bc:	e7ea      	b.n	8019994 <tcp_listen_with_backlog_and_err+0x60>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80199be:	4b0f      	ldr	r3, [pc, #60]	; (80199fc <tcp_listen_with_backlog_and_err+0xc8>)
 80199c0:	f240 325a 	movw	r2, #858	; 0x35a
 80199c4:	4911      	ldr	r1, [pc, #68]	; (8019a0c <tcp_listen_with_backlog_and_err+0xd8>)
  struct tcp_pcb_listen *lpcb = NULL;
 80199c6:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 80199c8:	4811      	ldr	r0, [pc, #68]	; (8019a10 <tcp_listen_with_backlog_and_err+0xdc>)
 80199ca:	f009 fb8b 	bl	80230e4 <iprintf>
 80199ce:	f06f 030e 	mvn.w	r3, #14
 80199d2:	e7eb      	b.n	80199ac <tcp_listen_with_backlog_and_err+0x78>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 80199d4:	68e2      	ldr	r2, [r4, #12]
 80199d6:	60da      	str	r2, [r3, #12]
 80199d8:	2300      	movs	r3, #0
 80199da:	60e3      	str	r3, [r4, #12]
 80199dc:	e7da      	b.n	8019994 <tcp_listen_with_backlog_and_err+0x60>
    res = ERR_MEM;
 80199de:	f04f 33ff 	mov.w	r3, #4294967295
 80199e2:	e7e3      	b.n	80199ac <tcp_listen_with_backlog_and_err+0x78>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80199e4:	4b05      	ldr	r3, [pc, #20]	; (80199fc <tcp_listen_with_backlog_and_err+0xc8>)
 80199e6:	f240 3259 	movw	r2, #857	; 0x359
 80199ea:	490a      	ldr	r1, [pc, #40]	; (8019a14 <tcp_listen_with_backlog_and_err+0xe0>)
  struct tcp_pcb_listen *lpcb = NULL;
 80199ec:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 80199ee:	4808      	ldr	r0, [pc, #32]	; (8019a10 <tcp_listen_with_backlog_and_err+0xdc>)
 80199f0:	f009 fb78 	bl	80230e4 <iprintf>
 80199f4:	f06f 030f 	mvn.w	r3, #15
 80199f8:	e7d8      	b.n	80199ac <tcp_listen_with_backlog_and_err+0x78>
 80199fa:	bf00      	nop
 80199fc:	08040c04 	.word	0x08040c04
 8019a00:	2002e4a4 	.word	0x2002e4a4
 8019a04:	2002e4a0 	.word	0x2002e4a0
 8019a08:	0801a445 	.word	0x0801a445
 8019a0c:	08040cc4 	.word	0x08040cc4
 8019a10:	08029ba0 	.word	0x08029ba0
 8019a14:	08040c94 	.word	0x08040c94

08019a18 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 8019a18:	2200      	movs	r2, #0
 8019a1a:	f7ff bf8b 	b.w	8019934 <tcp_listen_with_backlog_and_err>
 8019a1e:	bf00      	nop

08019a20 <tcp_update_rcv_ann_wnd>:
{
 8019a20:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019a22:	4604      	mov	r4, r0
 8019a24:	b1a8      	cbz	r0, 8019a52 <tcp_update_rcv_ann_wnd+0x32>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019a26:	8d21      	ldrh	r1, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019a28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8019a2a:	8e63      	ldrh	r3, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019a2c:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019a2e:	1a88      	subs	r0, r1, r2
 8019a30:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8019a34:	4428      	add	r0, r5
 8019a36:	bf94      	ite	ls
 8019a38:	1ac3      	subls	r3, r0, r3
 8019a3a:	f5a0 6386 	subhi.w	r3, r0, #1072	; 0x430
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	db01      	blt.n	8019a46 <tcp_update_rcv_ann_wnd+0x26>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019a42:	8561      	strh	r1, [r4, #42]	; 0x2a
}
 8019a44:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019a46:	1aab      	subs	r3, r5, r2
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	dd0a      	ble.n	8019a62 <tcp_update_rcv_ann_wnd+0x42>
      pcb->rcv_ann_wnd = 0;
 8019a4c:	2000      	movs	r0, #0
 8019a4e:	8560      	strh	r0, [r4, #42]	; 0x2a
}
 8019a50:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019a52:	4b0b      	ldr	r3, [pc, #44]	; (8019a80 <tcp_update_rcv_ann_wnd+0x60>)
 8019a54:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019a58:	490a      	ldr	r1, [pc, #40]	; (8019a84 <tcp_update_rcv_ann_wnd+0x64>)
 8019a5a:	480b      	ldr	r0, [pc, #44]	; (8019a88 <tcp_update_rcv_ann_wnd+0x68>)
 8019a5c:	f009 fb42 	bl	80230e4 <iprintf>
 8019a60:	e7e1      	b.n	8019a26 <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019a62:	1b55      	subs	r5, r2, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019a64:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 8019a68:	d202      	bcs.n	8019a70 <tcp_update_rcv_ann_wnd+0x50>
    return 0;
 8019a6a:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019a6c:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 8019a6e:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019a70:	4b03      	ldr	r3, [pc, #12]	; (8019a80 <tcp_update_rcv_ann_wnd+0x60>)
 8019a72:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019a76:	4905      	ldr	r1, [pc, #20]	; (8019a8c <tcp_update_rcv_ann_wnd+0x6c>)
 8019a78:	4803      	ldr	r0, [pc, #12]	; (8019a88 <tcp_update_rcv_ann_wnd+0x68>)
 8019a7a:	f009 fb33 	bl	80230e4 <iprintf>
 8019a7e:	e7f4      	b.n	8019a6a <tcp_update_rcv_ann_wnd+0x4a>
 8019a80:	08040c04 	.word	0x08040c04
 8019a84:	08040cfc 	.word	0x08040cfc
 8019a88:	08029ba0 	.word	0x08029ba0
 8019a8c:	08040d20 	.word	0x08040d20

08019a90 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019a90:	b340      	cbz	r0, 8019ae4 <tcp_recved+0x54>
{
 8019a92:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019a94:	7d03      	ldrb	r3, [r0, #20]
 8019a96:	4605      	mov	r5, r0
 8019a98:	460c      	mov	r4, r1
 8019a9a:	2b01      	cmp	r3, #1
 8019a9c:	d01a      	beq.n	8019ad4 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019a9e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8019aa0:	1919      	adds	r1, r3, r4
 8019aa2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019aa4:	428b      	cmp	r3, r1
 8019aa6:	d802      	bhi.n	8019aae <tcp_recved+0x1e>
 8019aa8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 8019aac:	d901      	bls.n	8019ab2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019aae:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019ab2:	4628      	mov	r0, r5
 8019ab4:	8529      	strh	r1, [r5, #40]	; 0x28
 8019ab6:	f7ff ffb3 	bl	8019a20 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019aba:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 8019abe:	d200      	bcs.n	8019ac2 <tcp_recved+0x32>
}
 8019ac0:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 8019ac2:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 8019ac4:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 8019ac6:	f043 0302 	orr.w	r3, r3, #2
 8019aca:	836b      	strh	r3, [r5, #26]
}
 8019acc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 8019ad0:	f003 bd78 	b.w	801d5c4 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019ad4:	4b07      	ldr	r3, [pc, #28]	; (8019af4 <tcp_recved+0x64>)
 8019ad6:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019ada:	4907      	ldr	r1, [pc, #28]	; (8019af8 <tcp_recved+0x68>)
 8019adc:	4807      	ldr	r0, [pc, #28]	; (8019afc <tcp_recved+0x6c>)
 8019ade:	f009 fb01 	bl	80230e4 <iprintf>
 8019ae2:	e7dc      	b.n	8019a9e <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019ae4:	4b03      	ldr	r3, [pc, #12]	; (8019af4 <tcp_recved+0x64>)
 8019ae6:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019aea:	4905      	ldr	r1, [pc, #20]	; (8019b00 <tcp_recved+0x70>)
 8019aec:	4803      	ldr	r0, [pc, #12]	; (8019afc <tcp_recved+0x6c>)
 8019aee:	f009 baf9 	b.w	80230e4 <iprintf>
 8019af2:	bf00      	nop
 8019af4:	08040c04 	.word	0x08040c04
 8019af8:	08040d54 	.word	0x08040d54
 8019afc:	08029ba0 	.word	0x08029ba0
 8019b00:	08040d3c 	.word	0x08040d3c

08019b04 <tcp_seg_free>:
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
  if (seg != NULL) {
 8019b04:	b158      	cbz	r0, 8019b1e <tcp_seg_free+0x1a>
{
 8019b06:	b510      	push	{r4, lr}
 8019b08:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 8019b0a:	6840      	ldr	r0, [r0, #4]
 8019b0c:	b108      	cbz	r0, 8019b12 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 8019b0e:	f7ff f9d1 	bl	8018eb4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8019b12:	4621      	mov	r1, r4
 8019b14:	2004      	movs	r0, #4
  }
}
 8019b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 8019b1a:	f7fe befb 	b.w	8018914 <memp_free>
 8019b1e:	4770      	bx	lr

08019b20 <tcp_segs_free>:
  while (seg != NULL) {
 8019b20:	b140      	cbz	r0, 8019b34 <tcp_segs_free+0x14>
{
 8019b22:	b510      	push	{r4, lr}
 8019b24:	4604      	mov	r4, r0
    struct tcp_seg *next = seg->next;
 8019b26:	4620      	mov	r0, r4
 8019b28:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019b2a:	f7ff ffeb 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 8019b2e:	2c00      	cmp	r4, #0
 8019b30:	d1f9      	bne.n	8019b26 <tcp_segs_free+0x6>
}
 8019b32:	bd10      	pop	{r4, pc}
 8019b34:	4770      	bx	lr
 8019b36:	bf00      	nop

08019b38 <tcp_setprio>:
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8019b38:	b108      	cbz	r0, 8019b3e <tcp_setprio+0x6>

  pcb->prio = prio;
 8019b3a:	7541      	strb	r1, [r0, #21]
}
 8019b3c:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8019b3e:	4b03      	ldr	r3, [pc, #12]	; (8019b4c <tcp_setprio+0x14>)
 8019b40:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8019b44:	4902      	ldr	r1, [pc, #8]	; (8019b50 <tcp_setprio+0x18>)
 8019b46:	4803      	ldr	r0, [pc, #12]	; (8019b54 <tcp_setprio+0x1c>)
 8019b48:	f009 bacc 	b.w	80230e4 <iprintf>
 8019b4c:	08040c04 	.word	0x08040c04
 8019b50:	08040d7c 	.word	0x08040d7c
 8019b54:	08029ba0 	.word	0x08029ba0

08019b58 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8019b58:	b538      	push	{r3, r4, r5, lr}
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019b5a:	4605      	mov	r5, r0
 8019b5c:	b1a0      	cbz	r0, 8019b88 <tcp_seg_copy+0x30>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8019b5e:	f240 6284 	movw	r2, #1668	; 0x684
 8019b62:	490d      	ldr	r1, [pc, #52]	; (8019b98 <tcp_seg_copy+0x40>)
 8019b64:	2004      	movs	r0, #4
 8019b66:	f7fe feb1 	bl	80188cc <memp_malloc_fn>
  if (cseg == NULL) {
 8019b6a:	4604      	mov	r4, r0
 8019b6c:	b150      	cbz	r0, 8019b84 <tcp_seg_copy+0x2c>
    return NULL;
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8019b6e:	6828      	ldr	r0, [r5, #0]
 8019b70:	6869      	ldr	r1, [r5, #4]
 8019b72:	68aa      	ldr	r2, [r5, #8]
 8019b74:	68eb      	ldr	r3, [r5, #12]
 8019b76:	6020      	str	r0, [r4, #0]
 8019b78:	6061      	str	r1, [r4, #4]
 8019b7a:	60a2      	str	r2, [r4, #8]
  pbuf_ref(cseg->p);
 8019b7c:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8019b7e:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 8019b80:	f7ff fb06 	bl	8019190 <pbuf_ref>
  return cseg;
}
 8019b84:	4620      	mov	r0, r4
 8019b86:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8019b88:	4b03      	ldr	r3, [pc, #12]	; (8019b98 <tcp_seg_copy+0x40>)
 8019b8a:	f240 6282 	movw	r2, #1666	; 0x682
 8019b8e:	4903      	ldr	r1, [pc, #12]	; (8019b9c <tcp_seg_copy+0x44>)
 8019b90:	4803      	ldr	r0, [pc, #12]	; (8019ba0 <tcp_seg_copy+0x48>)
 8019b92:	f009 faa7 	bl	80230e4 <iprintf>
 8019b96:	e7e2      	b.n	8019b5e <tcp_seg_copy+0x6>
 8019b98:	08040c04 	.word	0x08040c04
 8019b9c:	08040d98 	.word	0x08040d98
 8019ba0:	08029ba0 	.word	0x08029ba0

08019ba4 <tcp_arg>:
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8019ba4:	b100      	cbz	r0, 8019ba8 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 8019ba6:	6101      	str	r1, [r0, #16]
  }
}
 8019ba8:	4770      	bx	lr
 8019baa:	bf00      	nop

08019bac <tcp_recv>:
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019bac:	b140      	cbz	r0, 8019bc0 <tcp_recv+0x14>
{
 8019bae:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019bb0:	7d03      	ldrb	r3, [r0, #20]
 8019bb2:	4604      	mov	r4, r0
 8019bb4:	460d      	mov	r5, r1
 8019bb6:	2b01      	cmp	r3, #1
 8019bb8:	d003      	beq.n	8019bc2 <tcp_recv+0x16>
    pcb->recv = recv;
 8019bba:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
  }
}
 8019bbe:	bd38      	pop	{r3, r4, r5, pc}
 8019bc0:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8019bc2:	4b05      	ldr	r3, [pc, #20]	; (8019bd8 <tcp_recv+0x2c>)
 8019bc4:	f240 72df 	movw	r2, #2015	; 0x7df
 8019bc8:	4904      	ldr	r1, [pc, #16]	; (8019bdc <tcp_recv+0x30>)
 8019bca:	4805      	ldr	r0, [pc, #20]	; (8019be0 <tcp_recv+0x34>)
 8019bcc:	f009 fa8a 	bl	80230e4 <iprintf>
    pcb->recv = recv;
 8019bd0:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 8019bd4:	bd38      	pop	{r3, r4, r5, pc}
 8019bd6:	bf00      	nop
 8019bd8:	08040c04 	.word	0x08040c04
 8019bdc:	08040db4 	.word	0x08040db4
 8019be0:	08029ba0 	.word	0x08029ba0

08019be4 <tcp_sent>:
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019be4:	b140      	cbz	r0, 8019bf8 <tcp_sent+0x14>
{
 8019be6:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019be8:	7d03      	ldrb	r3, [r0, #20]
 8019bea:	4604      	mov	r4, r0
 8019bec:	460d      	mov	r5, r1
 8019bee:	2b01      	cmp	r3, #1
 8019bf0:	d003      	beq.n	8019bfa <tcp_sent+0x16>
    pcb->sent = sent;
 8019bf2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  }
}
 8019bf6:	bd38      	pop	{r3, r4, r5, pc}
 8019bf8:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8019bfa:	4b05      	ldr	r3, [pc, #20]	; (8019c10 <tcp_sent+0x2c>)
 8019bfc:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8019c00:	4904      	ldr	r1, [pc, #16]	; (8019c14 <tcp_sent+0x30>)
 8019c02:	4805      	ldr	r0, [pc, #20]	; (8019c18 <tcp_sent+0x34>)
 8019c04:	f009 fa6e 	bl	80230e4 <iprintf>
    pcb->sent = sent;
 8019c08:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 8019c0c:	bd38      	pop	{r3, r4, r5, pc}
 8019c0e:	bf00      	nop
 8019c10:	08040c04 	.word	0x08040c04
 8019c14:	08040ddc 	.word	0x08040ddc
 8019c18:	08029ba0 	.word	0x08029ba0

08019c1c <tcp_err>:
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8019c1c:	b140      	cbz	r0, 8019c30 <tcp_err+0x14>
{
 8019c1e:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019c20:	7d03      	ldrb	r3, [r0, #20]
 8019c22:	4604      	mov	r4, r0
 8019c24:	460d      	mov	r5, r1
 8019c26:	2b01      	cmp	r3, #1
 8019c28:	d003      	beq.n	8019c32 <tcp_err+0x16>
    pcb->errf = err;
 8019c2a:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
  }
}
 8019c2e:	bd38      	pop	{r3, r4, r5, pc}
 8019c30:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8019c32:	4b05      	ldr	r3, [pc, #20]	; (8019c48 <tcp_err+0x2c>)
 8019c34:	f640 020d 	movw	r2, #2061	; 0x80d
 8019c38:	4904      	ldr	r1, [pc, #16]	; (8019c4c <tcp_err+0x30>)
 8019c3a:	4805      	ldr	r0, [pc, #20]	; (8019c50 <tcp_err+0x34>)
 8019c3c:	f009 fa52 	bl	80230e4 <iprintf>
    pcb->errf = err;
 8019c40:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 8019c44:	bd38      	pop	{r3, r4, r5, pc}
 8019c46:	bf00      	nop
 8019c48:	08040c04 	.word	0x08040c04
 8019c4c:	08040e04 	.word	0x08040e04
 8019c50:	08029ba0 	.word	0x08029ba0

08019c54 <tcp_accept>:
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8019c54:	b118      	cbz	r0, 8019c5e <tcp_accept+0xa>
 8019c56:	7d03      	ldrb	r3, [r0, #20]
 8019c58:	2b01      	cmp	r3, #1
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
    lpcb->accept = accept;
 8019c5a:	bf08      	it	eq
 8019c5c:	6181      	streq	r1, [r0, #24]
  }
}
 8019c5e:	4770      	bx	lr

08019c60 <tcp_poll>:
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019c60:	b1a8      	cbz	r0, 8019c8e <tcp_poll+0x2e>
{
 8019c62:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019c64:	7d03      	ldrb	r3, [r0, #20]
 8019c66:	460e      	mov	r6, r1
 8019c68:	4604      	mov	r4, r0
 8019c6a:	4615      	mov	r5, r2
 8019c6c:	2b01      	cmp	r3, #1
 8019c6e:	d003      	beq.n	8019c78 <tcp_poll+0x18>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8019c70:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8019c74:	7765      	strb	r5, [r4, #29]
}
 8019c76:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8019c78:	4b08      	ldr	r3, [pc, #32]	; (8019c9c <tcp_poll+0x3c>)
 8019c7a:	f640 023e 	movw	r2, #2110	; 0x83e
 8019c7e:	4908      	ldr	r1, [pc, #32]	; (8019ca0 <tcp_poll+0x40>)
 8019c80:	4808      	ldr	r0, [pc, #32]	; (8019ca4 <tcp_poll+0x44>)
 8019c82:	f009 fa2f 	bl	80230e4 <iprintf>
  pcb->poll = poll;
 8019c86:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 8019c8a:	7765      	strb	r5, [r4, #29]
}
 8019c8c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8019c8e:	4b03      	ldr	r3, [pc, #12]	; (8019c9c <tcp_poll+0x3c>)
 8019c90:	f640 023d 	movw	r2, #2109	; 0x83d
 8019c94:	4904      	ldr	r1, [pc, #16]	; (8019ca8 <tcp_poll+0x48>)
 8019c96:	4803      	ldr	r0, [pc, #12]	; (8019ca4 <tcp_poll+0x44>)
 8019c98:	f009 ba24 	b.w	80230e4 <iprintf>
 8019c9c:	08040c04 	.word	0x08040c04
 8019ca0:	08040e44 	.word	0x08040e44
 8019ca4:	08029ba0 	.word	0x08029ba0
 8019ca8:	08040e2c 	.word	0x08040e2c

08019cac <tcp_pcb_purge>:
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019cac:	2800      	cmp	r0, #0
 8019cae:	d02f      	beq.n	8019d10 <tcp_pcb_purge+0x64>
{
 8019cb0:	b570      	push	{r4, r5, r6, lr}

  if (pcb->state != CLOSED &&
 8019cb2:	7d03      	ldrb	r3, [r0, #20]
 8019cb4:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 8019cb6:	2b0a      	cmp	r3, #10
 8019cb8:	d001      	beq.n	8019cbe <tcp_pcb_purge+0x12>
 8019cba:	2b01      	cmp	r3, #1
 8019cbc:	d800      	bhi.n	8019cc0 <tcp_pcb_purge+0x14>
    pcb->unacked = pcb->unsent = NULL;
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
#endif /* TCP_OVERSIZE */
  }
}
 8019cbe:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 8019cc0:	6f80      	ldr	r0, [r0, #120]	; 0x78
 8019cc2:	b118      	cbz	r0, 8019ccc <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 8019cc4:	f7ff f8f6 	bl	8018eb4 <pbuf_free>
      pcb->refused_data = NULL;
 8019cc8:	2300      	movs	r3, #0
 8019cca:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 8019ccc:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 8019cce:	b134      	cbz	r4, 8019cde <tcp_pcb_purge+0x32>
    struct tcp_seg *next = seg->next;
 8019cd0:	4620      	mov	r0, r4
 8019cd2:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019cd4:	f7ff ff16 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 8019cd8:	2c00      	cmp	r4, #0
 8019cda:	d1f9      	bne.n	8019cd0 <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 8019cdc:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 8019cde:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 8019ce2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 8019ce4:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 8019ce6:	b12c      	cbz	r4, 8019cf4 <tcp_pcb_purge+0x48>
    struct tcp_seg *next = seg->next;
 8019ce8:	4620      	mov	r0, r4
 8019cea:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019cec:	f7ff ff0a 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 8019cf0:	2c00      	cmp	r4, #0
 8019cf2:	d1f9      	bne.n	8019ce8 <tcp_pcb_purge+0x3c>
    tcp_segs_free(pcb->unacked);
 8019cf4:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 8019cf6:	b12c      	cbz	r4, 8019d04 <tcp_pcb_purge+0x58>
    struct tcp_seg *next = seg->next;
 8019cf8:	4620      	mov	r0, r4
 8019cfa:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 8019cfc:	f7ff ff02 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 8019d00:	2c00      	cmp	r4, #0
 8019d02:	d1f9      	bne.n	8019cf8 <tcp_pcb_purge+0x4c>
    pcb->unacked = pcb->unsent = NULL;
 8019d04:	2300      	movs	r3, #0
 8019d06:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 8019d0a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 8019d0e:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8019d10:	4b03      	ldr	r3, [pc, #12]	; (8019d20 <tcp_pcb_purge+0x74>)
 8019d12:	f640 0251 	movw	r2, #2129	; 0x851
 8019d16:	4903      	ldr	r1, [pc, #12]	; (8019d24 <tcp_pcb_purge+0x78>)
 8019d18:	4803      	ldr	r0, [pc, #12]	; (8019d28 <tcp_pcb_purge+0x7c>)
 8019d1a:	f009 b9e3 	b.w	80230e4 <iprintf>
 8019d1e:	bf00      	nop
 8019d20:	08040c04 	.word	0x08040c04
 8019d24:	08040e64 	.word	0x08040e64
 8019d28:	08029ba0 	.word	0x08029ba0

08019d2c <tcp_slowtmr>:
{
 8019d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 8019d30:	4fb8      	ldr	r7, [pc, #736]	; (801a014 <tcp_slowtmr+0x2e8>)
{
 8019d32:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 8019d34:	f8df 9300 	ldr.w	r9, [pc, #768]	; 801a038 <tcp_slowtmr+0x30c>
  ++tcp_ticks;
 8019d38:	683a      	ldr	r2, [r7, #0]
  ++tcp_timer_ctr;
 8019d3a:	f899 3000 	ldrb.w	r3, [r9]
  ++tcp_ticks;
 8019d3e:	3201      	adds	r2, #1
 8019d40:	f8df b2f8 	ldr.w	fp, [pc, #760]	; 801a03c <tcp_slowtmr+0x310>
  ++tcp_timer_ctr;
 8019d44:	3301      	adds	r3, #1
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019d46:	f8df a2f8 	ldr.w	sl, [pc, #760]	; 801a040 <tcp_slowtmr+0x314>
  ++tcp_ticks;
 8019d4a:	603a      	str	r2, [r7, #0]
  ++tcp_timer_ctr;
 8019d4c:	f889 3000 	strb.w	r3, [r9]
  pcb = tcp_active_pcbs;
 8019d50:	f8db 4000 	ldr.w	r4, [fp]
  while (pcb != NULL) {
 8019d54:	2c00      	cmp	r4, #0
 8019d56:	f000 8081 	beq.w	8019e5c <tcp_slowtmr+0x130>
  prev = NULL;
 8019d5a:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019d5e:	7d23      	ldrb	r3, [r4, #20]
 8019d60:	2b00      	cmp	r3, #0
 8019d62:	f000 80f7 	beq.w	8019f54 <tcp_slowtmr+0x228>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019d66:	2b01      	cmp	r3, #1
 8019d68:	f000 80ff 	beq.w	8019f6a <tcp_slowtmr+0x23e>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019d6c:	2b0a      	cmp	r3, #10
 8019d6e:	f000 8107 	beq.w	8019f80 <tcp_slowtmr+0x254>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019d72:	f899 2000 	ldrb.w	r2, [r9]
 8019d76:	7fa3      	ldrb	r3, [r4, #30]
 8019d78:	4293      	cmp	r3, r2
 8019d7a:	f000 810e 	beq.w	8019f9a <tcp_slowtmr+0x26e>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019d7e:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 8019d80:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019d82:	2b02      	cmp	r3, #2
 8019d84:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 8019d88:	f000 810d 	beq.w	8019fa6 <tcp_slowtmr+0x27a>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8019d8c:	2a0b      	cmp	r2, #11
 8019d8e:	f240 80c8 	bls.w	8019f22 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 8019d92:	2501      	movs	r5, #1
    if (pcb->state == FIN_WAIT_2) {
 8019d94:	2b06      	cmp	r3, #6
 8019d96:	f000 80b7 	beq.w	8019f08 <tcp_slowtmr+0x1dc>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8019d9a:	7a66      	ldrb	r6, [r4, #9]
 8019d9c:	f016 0208 	ands.w	r2, r6, #8
 8019da0:	9205      	str	r2, [sp, #20]
 8019da2:	d01b      	beq.n	8019ddc <tcp_slowtmr+0xb0>
 8019da4:	2b04      	cmp	r3, #4
 8019da6:	d007      	beq.n	8019db8 <tcp_slowtmr+0x8c>
 8019da8:	f1a3 0307 	sub.w	r3, r3, #7
 8019dac:	fab3 f383 	clz	r3, r3
 8019db0:	095b      	lsrs	r3, r3, #5
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	f000 80b3 	beq.w	8019f1e <tcp_slowtmr+0x1f2>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019db8:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
 8019dbc:	4b96      	ldr	r3, [pc, #600]	; (801a018 <tcp_slowtmr+0x2ec>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019dbe:	683a      	ldr	r2, [r7, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019dc0:	4403      	add	r3, r0
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019dc2:	6a21      	ldr	r1, [r4, #32]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019dc4:	4e95      	ldr	r6, [pc, #596]	; (801a01c <tcp_slowtmr+0x2f0>)
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019dc6:	1a52      	subs	r2, r2, r1
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8019dc8:	fba6 6303 	umull	r6, r3, r6, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019dcc:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 8019dd0:	f240 8145 	bls.w	801a05e <tcp_slowtmr+0x332>
        ++pcb_remove;
 8019dd4:	3501      	adds	r5, #1
        ++pcb_reset;
 8019dd6:	2301      	movs	r3, #1
        ++pcb_remove;
 8019dd8:	b2ed      	uxtb	r5, r5
        ++pcb_reset;
 8019dda:	9305      	str	r3, [sp, #20]
    if (pcb->ooseq != NULL &&
 8019ddc:	6f66      	ldr	r6, [r4, #116]	; 0x74
 8019dde:	b14e      	cbz	r6, 8019df4 <tcp_slowtmr+0xc8>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8019de0:	6839      	ldr	r1, [r7, #0]
 8019de2:	6a20      	ldr	r0, [r4, #32]
 8019de4:	f9b4 2040 	ldrsh.w	r2, [r4, #64]	; 0x40
 8019de8:	1a09      	subs	r1, r1, r0
 8019dea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    if (pcb->ooseq != NULL &&
 8019dee:	ebb1 0f42 	cmp.w	r1, r2, lsl #1
 8019df2:	d255      	bcs.n	8019ea0 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 8019df4:	7d23      	ldrb	r3, [r4, #20]
 8019df6:	2b03      	cmp	r3, #3
 8019df8:	d05c      	beq.n	8019eb4 <tcp_slowtmr+0x188>
    if (pcb->state == LAST_ACK) {
 8019dfa:	2b09      	cmp	r3, #9
 8019dfc:	d15f      	bne.n	8019ebe <tcp_slowtmr+0x192>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019dfe:	683b      	ldr	r3, [r7, #0]
 8019e00:	6a22      	ldr	r2, [r4, #32]
 8019e02:	1a9b      	subs	r3, r3, r2
 8019e04:	2bf0      	cmp	r3, #240	; 0xf0
 8019e06:	d95a      	bls.n	8019ebe <tcp_slowtmr+0x192>
      tcp_pcb_purge(pcb);
 8019e08:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 8019e0a:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 8019e0e:	f7ff ff4d 	bl	8019cac <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019e12:	f8db 3000 	ldr.w	r3, [fp]
      if (prev != NULL) {
 8019e16:	f1b8 0f00 	cmp.w	r8, #0
 8019e1a:	f000 8159 	beq.w	801a0d0 <tcp_slowtmr+0x3a4>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8019e1e:	42a3      	cmp	r3, r4
 8019e20:	f000 81b2 	beq.w	801a188 <tcp_slowtmr+0x45c>
        prev->next = pcb->next;
 8019e24:	68e3      	ldr	r3, [r4, #12]
 8019e26:	f8c8 300c 	str.w	r3, [r8, #12]
      if (pcb_reset) {
 8019e2a:	9b05      	ldr	r3, [sp, #20]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	f040 812f 	bne.w	801a090 <tcp_slowtmr+0x364>
      err_arg = pcb->callback_arg;
 8019e32:	6922      	ldr	r2, [r4, #16]
      tcp_free(pcb2);
 8019e34:	4620      	mov	r0, r4
      tcp_active_pcbs_changed = 0;
 8019e36:	4e7a      	ldr	r6, [pc, #488]	; (801a020 <tcp_slowtmr+0x2f4>)
      pcb = pcb->next;
 8019e38:	68e4      	ldr	r4, [r4, #12]
      err_arg = pcb->callback_arg;
 8019e3a:	9205      	str	r2, [sp, #20]
      tcp_free(pcb2);
 8019e3c:	f7ff fcfe 	bl	801983c <tcp_free>
      tcp_active_pcbs_changed = 0;
 8019e40:	2300      	movs	r3, #0
 8019e42:	7033      	strb	r3, [r6, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8019e44:	b145      	cbz	r5, 8019e58 <tcp_slowtmr+0x12c>
 8019e46:	9a05      	ldr	r2, [sp, #20]
 8019e48:	f06f 010c 	mvn.w	r1, #12
 8019e4c:	4610      	mov	r0, r2
 8019e4e:	47a8      	blx	r5
      if (tcp_active_pcbs_changed) {
 8019e50:	7833      	ldrb	r3, [r6, #0]
 8019e52:	2b00      	cmp	r3, #0
 8019e54:	f47f af7c 	bne.w	8019d50 <tcp_slowtmr+0x24>
  while (pcb != NULL) {
 8019e58:	2c00      	cmp	r4, #0
 8019e5a:	d180      	bne.n	8019d5e <tcp_slowtmr+0x32>
  pcb = tcp_tw_pcbs;
 8019e5c:	f8df 91e4 	ldr.w	r9, [pc, #484]	; 801a044 <tcp_slowtmr+0x318>
 8019e60:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 8019e64:	b1cc      	cbz	r4, 8019e9a <tcp_slowtmr+0x16e>
  prev = NULL;
 8019e66:	2500      	movs	r5, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8019e68:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 801a040 <tcp_slowtmr+0x314>
 8019e6c:	f8df a1d8 	ldr.w	sl, [pc, #472]	; 801a048 <tcp_slowtmr+0x31c>
 8019e70:	4e6c      	ldr	r6, [pc, #432]	; (801a024 <tcp_slowtmr+0x2f8>)
 8019e72:	7d23      	ldrb	r3, [r4, #20]
 8019e74:	2b0a      	cmp	r3, #10
 8019e76:	d006      	beq.n	8019e86 <tcp_slowtmr+0x15a>
 8019e78:	4643      	mov	r3, r8
 8019e7a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8019e7e:	4651      	mov	r1, sl
 8019e80:	4630      	mov	r0, r6
 8019e82:	f009 f92f 	bl	80230e4 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8019e86:	683b      	ldr	r3, [r7, #0]
 8019e88:	6a22      	ldr	r2, [r4, #32]
 8019e8a:	1a9b      	subs	r3, r3, r2
 8019e8c:	2bf0      	cmp	r3, #240	; 0xf0
 8019e8e:	f200 80ab 	bhi.w	8019fe8 <tcp_slowtmr+0x2bc>
      pcb = pcb->next;
 8019e92:	4625      	mov	r5, r4
 8019e94:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8019e96:	2c00      	cmp	r4, #0
 8019e98:	d1eb      	bne.n	8019e72 <tcp_slowtmr+0x146>
}
 8019e9a:	b007      	add	sp, #28
 8019e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    struct tcp_seg *next = seg->next;
 8019ea0:	4630      	mov	r0, r6
 8019ea2:	6836      	ldr	r6, [r6, #0]
    tcp_seg_free(seg);
 8019ea4:	f7ff fe2e 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 8019ea8:	2e00      	cmp	r6, #0
 8019eaa:	d1f9      	bne.n	8019ea0 <tcp_slowtmr+0x174>
    if (pcb->state == SYN_RCVD) {
 8019eac:	7d23      	ldrb	r3, [r4, #20]
    pcb->ooseq = NULL;
 8019eae:	6766      	str	r6, [r4, #116]	; 0x74
    if (pcb->state == SYN_RCVD) {
 8019eb0:	2b03      	cmp	r3, #3
 8019eb2:	d1a2      	bne.n	8019dfa <tcp_slowtmr+0xce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019eb4:	683b      	ldr	r3, [r7, #0]
 8019eb6:	6a22      	ldr	r2, [r4, #32]
 8019eb8:	1a9b      	subs	r3, r3, r2
 8019eba:	2b28      	cmp	r3, #40	; 0x28
 8019ebc:	d8a4      	bhi.n	8019e08 <tcp_slowtmr+0xdc>
    if (pcb_remove) {
 8019ebe:	2d00      	cmp	r5, #0
 8019ec0:	d1a2      	bne.n	8019e08 <tcp_slowtmr+0xdc>
      ++prev->polltmr;
 8019ec2:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8019ec4:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 8019ec6:	3301      	adds	r3, #1
      pcb = pcb->next;
 8019ec8:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 8019eca:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 8019ecc:	429a      	cmp	r2, r3
      ++prev->polltmr;
 8019ece:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8019ed0:	d814      	bhi.n	8019efc <tcp_slowtmr+0x1d0>
        tcp_active_pcbs_changed = 0;
 8019ed2:	f8df 814c 	ldr.w	r8, [pc, #332]	; 801a020 <tcp_slowtmr+0x2f4>
        TCP_EVENT_POLL(prev, err);
 8019ed6:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 8019eda:	7725      	strb	r5, [r4, #28]
        tcp_active_pcbs_changed = 0;
 8019edc:	f888 5000 	strb.w	r5, [r8]
        TCP_EVENT_POLL(prev, err);
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	f000 80b3 	beq.w	801a04c <tcp_slowtmr+0x320>
 8019ee6:	4621      	mov	r1, r4
 8019ee8:	6920      	ldr	r0, [r4, #16]
 8019eea:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 8019eec:	f898 3000 	ldrb.w	r3, [r8]
 8019ef0:	2b00      	cmp	r3, #0
 8019ef2:	f47f af2d 	bne.w	8019d50 <tcp_slowtmr+0x24>
        if (err == ERR_OK) {
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	f000 80a8 	beq.w	801a04c <tcp_slowtmr+0x320>
 8019efc:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8019efe:	4634      	mov	r4, r6
  while (pcb != NULL) {
 8019f00:	2c00      	cmp	r4, #0
 8019f02:	f47f af2c 	bne.w	8019d5e <tcp_slowtmr+0x32>
 8019f06:	e7a9      	b.n	8019e5c <tcp_slowtmr+0x130>
      if (pcb->flags & TF_RXCLOSED) {
 8019f08:	8b63      	ldrh	r3, [r4, #26]
 8019f0a:	06db      	lsls	r3, r3, #27
 8019f0c:	d506      	bpl.n	8019f1c <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8019f0e:	683b      	ldr	r3, [r7, #0]
 8019f10:	6a22      	ldr	r2, [r4, #32]
 8019f12:	1a9b      	subs	r3, r3, r2
 8019f14:	2b28      	cmp	r3, #40	; 0x28
 8019f16:	d901      	bls.n	8019f1c <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 8019f18:	3501      	adds	r5, #1
 8019f1a:	b2ed      	uxtb	r5, r5
    pcb_reset = 0;
 8019f1c:	2300      	movs	r3, #0
 8019f1e:	9305      	str	r3, [sp, #20]
 8019f20:	e75c      	b.n	8019ddc <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 8019f22:	f894 5099 	ldrb.w	r5, [r4, #153]	; 0x99
 8019f26:	2d00      	cmp	r5, #0
 8019f28:	d043      	beq.n	8019fb2 <tcp_slowtmr+0x286>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8019f2a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019f2c:	b133      	cbz	r3, 8019f3c <tcp_slowtmr+0x210>
 8019f2e:	4653      	mov	r3, sl
 8019f30:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8019f34:	493c      	ldr	r1, [pc, #240]	; (801a028 <tcp_slowtmr+0x2fc>)
 8019f36:	483b      	ldr	r0, [pc, #236]	; (801a024 <tcp_slowtmr+0x2f8>)
 8019f38:	f009 f8d4 	bl	80230e4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8019f3c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8019f3e:	2b00      	cmp	r3, #0
 8019f40:	f000 8139 	beq.w	801a1b6 <tcp_slowtmr+0x48a>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8019f44:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 8019f48:	2b0b      	cmp	r3, #11
 8019f4a:	f240 80ae 	bls.w	801a0aa <tcp_slowtmr+0x37e>
 8019f4e:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 8019f50:	2501      	movs	r5, #1
 8019f52:	e71f      	b.n	8019d94 <tcp_slowtmr+0x68>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8019f54:	4653      	mov	r3, sl
 8019f56:	f240 42be 	movw	r2, #1214	; 0x4be
 8019f5a:	4934      	ldr	r1, [pc, #208]	; (801a02c <tcp_slowtmr+0x300>)
 8019f5c:	4831      	ldr	r0, [pc, #196]	; (801a024 <tcp_slowtmr+0x2f8>)
 8019f5e:	f009 f8c1 	bl	80230e4 <iprintf>
 8019f62:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8019f64:	2b01      	cmp	r3, #1
 8019f66:	f47f af01 	bne.w	8019d6c <tcp_slowtmr+0x40>
 8019f6a:	4653      	mov	r3, sl
 8019f6c:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8019f70:	492f      	ldr	r1, [pc, #188]	; (801a030 <tcp_slowtmr+0x304>)
 8019f72:	482c      	ldr	r0, [pc, #176]	; (801a024 <tcp_slowtmr+0x2f8>)
 8019f74:	f009 f8b6 	bl	80230e4 <iprintf>
 8019f78:	7d23      	ldrb	r3, [r4, #20]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8019f7a:	2b0a      	cmp	r3, #10
 8019f7c:	f47f aef9 	bne.w	8019d72 <tcp_slowtmr+0x46>
 8019f80:	4653      	mov	r3, sl
 8019f82:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8019f86:	492b      	ldr	r1, [pc, #172]	; (801a034 <tcp_slowtmr+0x308>)
 8019f88:	4826      	ldr	r0, [pc, #152]	; (801a024 <tcp_slowtmr+0x2f8>)
 8019f8a:	f009 f8ab 	bl	80230e4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8019f8e:	f899 2000 	ldrb.w	r2, [r9]
 8019f92:	7fa3      	ldrb	r3, [r4, #30]
 8019f94:	4293      	cmp	r3, r2
 8019f96:	f47f aef2 	bne.w	8019d7e <tcp_slowtmr+0x52>
      continue;
 8019f9a:	46a0      	mov	r8, r4
      pcb = pcb->next;
 8019f9c:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 8019f9e:	2c00      	cmp	r4, #0
 8019fa0:	f47f aedd 	bne.w	8019d5e <tcp_slowtmr+0x32>
 8019fa4:	e75a      	b.n	8019e5c <tcp_slowtmr+0x130>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8019fa6:	2a05      	cmp	r2, #5
 8019fa8:	d9bb      	bls.n	8019f22 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 8019faa:	2300      	movs	r3, #0
      ++pcb_remove;
 8019fac:	2501      	movs	r5, #1
    pcb_reset = 0;
 8019fae:	9305      	str	r3, [sp, #20]
 8019fb0:	e714      	b.n	8019ddc <tcp_slowtmr+0xb0>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8019fb2:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 8019fb6:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 8019fba:	b291      	uxth	r1, r2
 8019fbc:	4281      	cmp	r1, r0
 8019fbe:	d802      	bhi.n	8019fc6 <tcp_slowtmr+0x29a>
          ++pcb->rtime;
 8019fc0:	1c4a      	adds	r2, r1, #1
 8019fc2:	b212      	sxth	r2, r2
 8019fc4:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 8019fc6:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 8019fca:	4291      	cmp	r1, r2
 8019fcc:	f73f aee2 	bgt.w	8019d94 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8019fd0:	4620      	mov	r0, r4
 8019fd2:	f003 f9b7 	bl	801d344 <tcp_rexmit_rto_prepare>
 8019fd6:	2800      	cmp	r0, #0
 8019fd8:	f000 80a2 	beq.w	801a120 <tcp_slowtmr+0x3f4>
 8019fdc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	f000 809a 	beq.w	801a118 <tcp_slowtmr+0x3ec>
 8019fe4:	7d23      	ldrb	r3, [r4, #20]
 8019fe6:	e6d5      	b.n	8019d94 <tcp_slowtmr+0x68>
      tcp_pcb_purge(pcb);
 8019fe8:	4620      	mov	r0, r4
 8019fea:	f7ff fe5f 	bl	8019cac <tcp_pcb_purge>
      if (prev != NULL) {
 8019fee:	2d00      	cmp	r5, #0
 8019ff0:	f000 80d2 	beq.w	801a198 <tcp_slowtmr+0x46c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8019ff4:	f8d9 3000 	ldr.w	r3, [r9]
 8019ff8:	42a3      	cmp	r3, r4
 8019ffa:	f000 80f2 	beq.w	801a1e2 <tcp_slowtmr+0x4b6>
        prev->next = pcb->next;
 8019ffe:	68e3      	ldr	r3, [r4, #12]
 801a000:	60eb      	str	r3, [r5, #12]
 801a002:	68e3      	ldr	r3, [r4, #12]
      tcp_free(pcb2);
 801a004:	4620      	mov	r0, r4
      pcb = pcb->next;
 801a006:	461c      	mov	r4, r3
      tcp_free(pcb2);
 801a008:	f7ff fc18 	bl	801983c <tcp_free>
  while (pcb != NULL) {
 801a00c:	2c00      	cmp	r4, #0
 801a00e:	f47f af30 	bne.w	8019e72 <tcp_slowtmr+0x146>
 801a012:	e742      	b.n	8019e9a <tcp_slowtmr+0x16e>
 801a014:	2002e49c 	.word	0x2002e49c
 801a018:	000a4cb8 	.word	0x000a4cb8
 801a01c:	10624dd3 	.word	0x10624dd3
 801a020:	2002e494 	.word	0x2002e494
 801a024:	08029ba0 	.word	0x08029ba0
 801a028:	08040f08 	.word	0x08040f08
 801a02c:	08040e80 	.word	0x08040e80
 801a030:	08040eac 	.word	0x08040eac
 801a034:	08040ed8 	.word	0x08040ed8
 801a038:	2001aa31 	.word	0x2001aa31
 801a03c:	2002e498 	.word	0x2002e498
 801a040:	08040c04 	.word	0x08040c04
 801a044:	2002e4a8 	.word	0x2002e4a8
 801a048:	08040fcc 	.word	0x08040fcc
          tcp_output(prev);
 801a04c:	4620      	mov	r0, r4
 801a04e:	46a0      	mov	r8, r4
      pcb = pcb->next;
 801a050:	4634      	mov	r4, r6
          tcp_output(prev);
 801a052:	f003 fab7 	bl	801d5c4 <tcp_output>
  while (pcb != NULL) {
 801a056:	2c00      	cmp	r4, #0
 801a058:	f47f ae81 	bne.w	8019d5e <tcp_slowtmr+0x32>
 801a05c:	e6fe      	b.n	8019e5c <tcp_slowtmr+0x130>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a05e:	4965      	ldr	r1, [pc, #404]	; (801a1f4 <tcp_slowtmr+0x4c8>)
 801a060:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801a064:	fb01 0303 	mla	r3, r1, r3, r0
                 / TCP_SLOW_INTERVAL) {
 801a068:	4963      	ldr	r1, [pc, #396]	; (801a1f8 <tcp_slowtmr+0x4cc>)
 801a06a:	fba1 1303 	umull	r1, r3, r1, r3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a06e:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801a072:	f67f af53 	bls.w	8019f1c <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801a076:	4620      	mov	r0, r4
 801a078:	f003 fcdc 	bl	801da34 <tcp_keepalive>
        if (err == ERR_OK) {
 801a07c:	2800      	cmp	r0, #0
 801a07e:	f47f af4d 	bne.w	8019f1c <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801a082:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801a086:	9005      	str	r0, [sp, #20]
          pcb->keep_cnt_sent++;
 801a088:	3301      	adds	r3, #1
 801a08a:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801a08e:	e6a5      	b.n	8019ddc <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a090:	8b26      	ldrh	r6, [r4, #24]
 801a092:	1d20      	adds	r0, r4, #4
 801a094:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a096:	4623      	mov	r3, r4
 801a098:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a09a:	9602      	str	r6, [sp, #8]
 801a09c:	8ae6      	ldrh	r6, [r4, #22]
 801a09e:	9000      	str	r0, [sp, #0]
 801a0a0:	4620      	mov	r0, r4
 801a0a2:	9601      	str	r6, [sp, #4]
 801a0a4:	f003 fa0e 	bl	801d4c4 <tcp_rst>
 801a0a8:	e6c3      	b.n	8019e32 <tcp_slowtmr+0x106>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a0aa:	4a54      	ldr	r2, [pc, #336]	; (801a1fc <tcp_slowtmr+0x4d0>)
 801a0ac:	f894 1099 	ldrb.w	r1, [r4, #153]	; 0x99
          if (pcb->persist_cnt < backoff_cnt) {
 801a0b0:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a0b4:	440a      	add	r2, r1
 801a0b6:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801a0ba:	4293      	cmp	r3, r2
 801a0bc:	d215      	bcs.n	801a0ea <tcp_slowtmr+0x3be>
            pcb->persist_cnt++;
 801a0be:	3301      	adds	r3, #1
 801a0c0:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801a0c2:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801a0c4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801a0c8:	d20f      	bcs.n	801a0ea <tcp_slowtmr+0x3be>
 801a0ca:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801a0cc:	2500      	movs	r5, #0
 801a0ce:	e661      	b.n	8019d94 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a0d0:	42a3      	cmp	r3, r4
 801a0d2:	d006      	beq.n	801a0e2 <tcp_slowtmr+0x3b6>
 801a0d4:	4653      	mov	r3, sl
 801a0d6:	f240 5271 	movw	r2, #1393	; 0x571
 801a0da:	4949      	ldr	r1, [pc, #292]	; (801a200 <tcp_slowtmr+0x4d4>)
 801a0dc:	4849      	ldr	r0, [pc, #292]	; (801a204 <tcp_slowtmr+0x4d8>)
 801a0de:	f009 f801 	bl	80230e4 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a0e2:	68e3      	ldr	r3, [r4, #12]
 801a0e4:	f8cb 3000 	str.w	r3, [fp]
 801a0e8:	e69f      	b.n	8019e2a <tcp_slowtmr+0xfe>
            if (pcb->snd_wnd == 0) {
 801a0ea:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 801a0ee:	2d00      	cmp	r5, #0
 801a0f0:	d169      	bne.n	801a1c6 <tcp_slowtmr+0x49a>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a0f2:	4620      	mov	r0, r4
 801a0f4:	f003 fcc8 	bl	801da88 <tcp_zero_window_probe>
 801a0f8:	2800      	cmp	r0, #0
 801a0fa:	f47f af73 	bne.w	8019fe4 <tcp_slowtmr+0x2b8>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a0fe:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801a102:	2500      	movs	r5, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a104:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801a106:	f884 5098 	strb.w	r5, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a10a:	f63f af6b 	bhi.w	8019fe4 <tcp_slowtmr+0x2b8>
                pcb->persist_backoff++;
 801a10e:	1c5a      	adds	r2, r3, #1
 801a110:	7d23      	ldrb	r3, [r4, #20]
 801a112:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
 801a116:	e63d      	b.n	8019d94 <tcp_slowtmr+0x68>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a118:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	f43f af62 	beq.w	8019fe4 <tcp_slowtmr+0x2b8>
            if (pcb->state != SYN_SENT) {
 801a120:	7d23      	ldrb	r3, [r4, #20]
 801a122:	2b02      	cmp	r3, #2
 801a124:	d014      	beq.n	801a150 <tcp_slowtmr+0x424>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a126:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a12a:	f647 71ff 	movw	r1, #32767	; 0x7fff
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a12e:	4e36      	ldr	r6, [pc, #216]	; (801a208 <tcp_slowtmr+0x4dc>)
 801a130:	2a0c      	cmp	r2, #12
 801a132:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801a136:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801a13a:	bf28      	it	cs
 801a13c:	220c      	movcs	r2, #12
 801a13e:	eb03 03e0 	add.w	r3, r3, r0, asr #3
 801a142:	5cb2      	ldrb	r2, [r6, r2]
 801a144:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a146:	428b      	cmp	r3, r1
 801a148:	bfa8      	it	ge
 801a14a:	460b      	movge	r3, r1
 801a14c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a150:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            pcb->rtime = 0;
 801a154:	2100      	movs	r1, #0
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a156:	8e60      	ldrh	r0, [r4, #50]	; 0x32
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a158:	f8b4 6048 	ldrh.w	r6, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a15c:	0042      	lsls	r2, r0, #1
            pcb->cwnd = pcb->mss;
 801a15e:	f8a4 0048 	strh.w	r0, [r4, #72]	; 0x48
            pcb->ssthresh = eff_wnd >> 1;
 801a162:	42b3      	cmp	r3, r6
            tcp_rexmit_rto_commit(pcb);
 801a164:	4620      	mov	r0, r4
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a166:	b292      	uxth	r2, r2
            pcb->rtime = 0;
 801a168:	8621      	strh	r1, [r4, #48]	; 0x30
            pcb->ssthresh = eff_wnd >> 1;
 801a16a:	bf28      	it	cs
 801a16c:	4633      	movcs	r3, r6
            pcb->bytes_acked = 0;
 801a16e:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a172:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801a176:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a17a:	bf88      	it	hi
 801a17c:	4613      	movhi	r3, r2
 801a17e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            tcp_rexmit_rto_commit(pcb);
 801a182:	f003 fc1d 	bl	801d9c0 <tcp_rexmit_rto_commit>
 801a186:	e72d      	b.n	8019fe4 <tcp_slowtmr+0x2b8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a188:	4653      	mov	r3, sl
 801a18a:	f240 526d 	movw	r2, #1389	; 0x56d
 801a18e:	491f      	ldr	r1, [pc, #124]	; (801a20c <tcp_slowtmr+0x4e0>)
 801a190:	481c      	ldr	r0, [pc, #112]	; (801a204 <tcp_slowtmr+0x4d8>)
 801a192:	f008 ffa7 	bl	80230e4 <iprintf>
 801a196:	e645      	b.n	8019e24 <tcp_slowtmr+0xf8>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a198:	f8d9 3000 	ldr.w	r3, [r9]
 801a19c:	42a3      	cmp	r3, r4
 801a19e:	d006      	beq.n	801a1ae <tcp_slowtmr+0x482>
 801a1a0:	4643      	mov	r3, r8
 801a1a2:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a1a6:	491a      	ldr	r1, [pc, #104]	; (801a210 <tcp_slowtmr+0x4e4>)
 801a1a8:	4630      	mov	r0, r6
 801a1aa:	f008 ff9b 	bl	80230e4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a1ae:	68e3      	ldr	r3, [r4, #12]
 801a1b0:	f8c9 3000 	str.w	r3, [r9]
 801a1b4:	e726      	b.n	801a004 <tcp_slowtmr+0x2d8>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a1b6:	4653      	mov	r3, sl
 801a1b8:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a1bc:	4915      	ldr	r1, [pc, #84]	; (801a214 <tcp_slowtmr+0x4e8>)
 801a1be:	4811      	ldr	r0, [pc, #68]	; (801a204 <tcp_slowtmr+0x4d8>)
 801a1c0:	f008 ff90 	bl	80230e4 <iprintf>
 801a1c4:	e6be      	b.n	8019f44 <tcp_slowtmr+0x218>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a1c6:	4629      	mov	r1, r5
 801a1c8:	4620      	mov	r0, r4
 801a1ca:	f002 fee5 	bl	801cf98 <tcp_split_unsent_seg>
 801a1ce:	2800      	cmp	r0, #0
 801a1d0:	d195      	bne.n	801a0fe <tcp_slowtmr+0x3d2>
                if (tcp_output(pcb) == ERR_OK) {
 801a1d2:	4620      	mov	r0, r4
 801a1d4:	f003 f9f6 	bl	801d5c4 <tcp_output>
 801a1d8:	2800      	cmp	r0, #0
 801a1da:	d190      	bne.n	801a0fe <tcp_slowtmr+0x3d2>
    pcb_remove = 0;
 801a1dc:	4605      	mov	r5, r0
 801a1de:	7d23      	ldrb	r3, [r4, #20]
 801a1e0:	e5d8      	b.n	8019d94 <tcp_slowtmr+0x68>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a1e2:	4643      	mov	r3, r8
 801a1e4:	f240 52af 	movw	r2, #1455	; 0x5af
 801a1e8:	490b      	ldr	r1, [pc, #44]	; (801a218 <tcp_slowtmr+0x4ec>)
 801a1ea:	4630      	mov	r0, r6
 801a1ec:	f008 ff7a 	bl	80230e4 <iprintf>
 801a1f0:	e705      	b.n	8019ffe <tcp_slowtmr+0x2d2>
 801a1f2:	bf00      	nop
 801a1f4:	000124f8 	.word	0x000124f8
 801a1f8:	10624dd3 	.word	0x10624dd3
 801a1fc:	080412f8 	.word	0x080412f8
 801a200:	08040fa0 	.word	0x08040fa0
 801a204:	08029ba0 	.word	0x08029ba0
 801a208:	080412d8 	.word	0x080412d8
 801a20c:	08040f74 	.word	0x08040f74
 801a210:	08041024 	.word	0x08041024
 801a214:	08040f3c 	.word	0x08040f3c
 801a218:	08040ffc 	.word	0x08040ffc

0801a21c <tcp_pcb_remove>:
{
 801a21c:	b538      	push	{r3, r4, r5, lr}
 801a21e:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a220:	460c      	mov	r4, r1
 801a222:	2900      	cmp	r1, #0
 801a224:	d04a      	beq.n	801a2bc <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a226:	2d00      	cmp	r5, #0
 801a228:	d051      	beq.n	801a2ce <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801a22a:	682b      	ldr	r3, [r5, #0]
 801a22c:	42a3      	cmp	r3, r4
 801a22e:	d032      	beq.n	801a296 <tcp_pcb_remove+0x7a>
 801a230:	b12b      	cbz	r3, 801a23e <tcp_pcb_remove+0x22>
 801a232:	68da      	ldr	r2, [r3, #12]
 801a234:	42a2      	cmp	r2, r4
 801a236:	d03e      	beq.n	801a2b6 <tcp_pcb_remove+0x9a>
 801a238:	4613      	mov	r3, r2
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	d1f9      	bne.n	801a232 <tcp_pcb_remove+0x16>
 801a23e:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801a240:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801a242:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801a244:	f7ff fd32 	bl	8019cac <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801a248:	7d23      	ldrb	r3, [r4, #20]
 801a24a:	2b0a      	cmp	r3, #10
 801a24c:	d02d      	beq.n	801a2aa <tcp_pcb_remove+0x8e>
 801a24e:	2b01      	cmp	r3, #1
 801a250:	d01d      	beq.n	801a28e <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801a252:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801a254:	07da      	lsls	r2, r3, #31
 801a256:	d421      	bmi.n	801a29c <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a258:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a25a:	b133      	cbz	r3, 801a26a <tcp_pcb_remove+0x4e>
 801a25c:	4b20      	ldr	r3, [pc, #128]	; (801a2e0 <tcp_pcb_remove+0xc4>)
 801a25e:	f640 0293 	movw	r2, #2195	; 0x893
 801a262:	4920      	ldr	r1, [pc, #128]	; (801a2e4 <tcp_pcb_remove+0xc8>)
 801a264:	4820      	ldr	r0, [pc, #128]	; (801a2e8 <tcp_pcb_remove+0xcc>)
 801a266:	f008 ff3d 	bl	80230e4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801a26a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801a26c:	b133      	cbz	r3, 801a27c <tcp_pcb_remove+0x60>
 801a26e:	4b1c      	ldr	r3, [pc, #112]	; (801a2e0 <tcp_pcb_remove+0xc4>)
 801a270:	f640 0294 	movw	r2, #2196	; 0x894
 801a274:	491d      	ldr	r1, [pc, #116]	; (801a2ec <tcp_pcb_remove+0xd0>)
 801a276:	481c      	ldr	r0, [pc, #112]	; (801a2e8 <tcp_pcb_remove+0xcc>)
 801a278:	f008 ff34 	bl	80230e4 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801a27c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801a27e:	b133      	cbz	r3, 801a28e <tcp_pcb_remove+0x72>
 801a280:	4b17      	ldr	r3, [pc, #92]	; (801a2e0 <tcp_pcb_remove+0xc4>)
 801a282:	f640 0296 	movw	r2, #2198	; 0x896
 801a286:	491a      	ldr	r1, [pc, #104]	; (801a2f0 <tcp_pcb_remove+0xd4>)
 801a288:	4817      	ldr	r0, [pc, #92]	; (801a2e8 <tcp_pcb_remove+0xcc>)
 801a28a:	f008 ff2b 	bl	80230e4 <iprintf>
  pcb->state = CLOSED;
 801a28e:	2300      	movs	r3, #0
 801a290:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801a292:	82e3      	strh	r3, [r4, #22]
}
 801a294:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801a296:	68e3      	ldr	r3, [r4, #12]
 801a298:	602b      	str	r3, [r5, #0]
 801a29a:	e7d0      	b.n	801a23e <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801a29c:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801a2a0:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801a2a2:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801a2a4:	f003 f98e 	bl	801d5c4 <tcp_output>
 801a2a8:	7d23      	ldrb	r3, [r4, #20]
  if (pcb->state != LISTEN) {
 801a2aa:	2b01      	cmp	r3, #1
 801a2ac:	d0ef      	beq.n	801a28e <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801a2ae:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801a2b0:	2b00      	cmp	r3, #0
 801a2b2:	d1d3      	bne.n	801a25c <tcp_pcb_remove+0x40>
 801a2b4:	e7d9      	b.n	801a26a <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801a2b6:	68e2      	ldr	r2, [r4, #12]
 801a2b8:	60da      	str	r2, [r3, #12]
 801a2ba:	e7c0      	b.n	801a23e <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801a2bc:	4b08      	ldr	r3, [pc, #32]	; (801a2e0 <tcp_pcb_remove+0xc4>)
 801a2be:	f640 0283 	movw	r2, #2179	; 0x883
 801a2c2:	490c      	ldr	r1, [pc, #48]	; (801a2f4 <tcp_pcb_remove+0xd8>)
 801a2c4:	4808      	ldr	r0, [pc, #32]	; (801a2e8 <tcp_pcb_remove+0xcc>)
 801a2c6:	f008 ff0d 	bl	80230e4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801a2ca:	2d00      	cmp	r5, #0
 801a2cc:	d1ad      	bne.n	801a22a <tcp_pcb_remove+0xe>
 801a2ce:	4b04      	ldr	r3, [pc, #16]	; (801a2e0 <tcp_pcb_remove+0xc4>)
 801a2d0:	f640 0284 	movw	r2, #2180	; 0x884
 801a2d4:	4908      	ldr	r1, [pc, #32]	; (801a2f8 <tcp_pcb_remove+0xdc>)
 801a2d6:	4804      	ldr	r0, [pc, #16]	; (801a2e8 <tcp_pcb_remove+0xcc>)
 801a2d8:	f008 ff04 	bl	80230e4 <iprintf>
 801a2dc:	e7a5      	b.n	801a22a <tcp_pcb_remove+0xe>
 801a2de:	bf00      	nop
 801a2e0:	08040c04 	.word	0x08040c04
 801a2e4:	08041088 	.word	0x08041088
 801a2e8:	08029ba0 	.word	0x08029ba0
 801a2ec:	080410a0 	.word	0x080410a0
 801a2f0:	080410bc 	.word	0x080410bc
 801a2f4:	0804104c 	.word	0x0804104c
 801a2f8:	08041068 	.word	0x08041068

0801a2fc <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801a2fc:	2800      	cmp	r0, #0
 801a2fe:	f000 8082 	beq.w	801a406 <tcp_abandon+0x10a>
{
 801a302:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801a306:	7d03      	ldrb	r3, [r0, #20]
{
 801a308:	b085      	sub	sp, #20
 801a30a:	4605      	mov	r5, r0
 801a30c:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801a30e:	2b01      	cmp	r3, #1
 801a310:	d065      	beq.n	801a3de <tcp_abandon+0xe2>
  if (pcb->state == TIME_WAIT) {
 801a312:	2b0a      	cmp	r3, #10
 801a314:	d06d      	beq.n	801a3f2 <tcp_abandon+0xf6>
    seqno = pcb->snd_nxt;
 801a316:	f8d5 a050 	ldr.w	sl, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801a31a:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801a31e:	f8d5 7090 	ldr.w	r7, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801a322:	f8d5 9010 	ldr.w	r9, [r5, #16]
    if (pcb->state == CLOSED) {
 801a326:	b97b      	cbnz	r3, 801a348 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801a328:	f8b5 8016 	ldrh.w	r8, [r5, #22]
 801a32c:	f1b8 0f00 	cmp.w	r8, #0
 801a330:	d038      	beq.n	801a3a4 <tcp_abandon+0xa8>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a332:	4a3a      	ldr	r2, [pc, #232]	; (801a41c <tcp_abandon+0x120>)
 801a334:	6813      	ldr	r3, [r2, #0]
 801a336:	42ab      	cmp	r3, r5
 801a338:	d036      	beq.n	801a3a8 <tcp_abandon+0xac>
 801a33a:	2b00      	cmp	r3, #0
 801a33c:	d036      	beq.n	801a3ac <tcp_abandon+0xb0>
 801a33e:	68da      	ldr	r2, [r3, #12]
 801a340:	42aa      	cmp	r2, r5
 801a342:	d067      	beq.n	801a414 <tcp_abandon+0x118>
 801a344:	4613      	mov	r3, r2
 801a346:	e7f8      	b.n	801a33a <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a348:	4629      	mov	r1, r5
 801a34a:	4835      	ldr	r0, [pc, #212]	; (801a420 <tcp_abandon+0x124>)
      local_port = pcb->local_port;
 801a34c:	f8b5 8016 	ldrh.w	r8, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a350:	f7ff ff64 	bl	801a21c <tcp_pcb_remove>
 801a354:	4b33      	ldr	r3, [pc, #204]	; (801a424 <tcp_abandon+0x128>)
 801a356:	2201      	movs	r2, #1
 801a358:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801a35a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801a35c:	b12c      	cbz	r4, 801a36a <tcp_abandon+0x6e>
    struct tcp_seg *next = seg->next;
 801a35e:	4620      	mov	r0, r4
 801a360:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801a362:	f7ff fbcf 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 801a366:	2c00      	cmp	r4, #0
 801a368:	d1f9      	bne.n	801a35e <tcp_abandon+0x62>
    if (pcb->unsent != NULL) {
 801a36a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801a36c:	b12c      	cbz	r4, 801a37a <tcp_abandon+0x7e>
    struct tcp_seg *next = seg->next;
 801a36e:	4620      	mov	r0, r4
 801a370:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801a372:	f7ff fbc7 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 801a376:	2c00      	cmp	r4, #0
 801a378:	d1f9      	bne.n	801a36e <tcp_abandon+0x72>
    if (pcb->ooseq != NULL) {
 801a37a:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801a37c:	b12c      	cbz	r4, 801a38a <tcp_abandon+0x8e>
    struct tcp_seg *next = seg->next;
 801a37e:	4620      	mov	r0, r4
 801a380:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801a382:	f7ff fbbf 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 801a386:	2c00      	cmp	r4, #0
 801a388:	d1f9      	bne.n	801a37e <tcp_abandon+0x82>
    if (send_rst) {
 801a38a:	b9a6      	cbnz	r6, 801a3b6 <tcp_abandon+0xba>
    tcp_free(pcb);
 801a38c:	4628      	mov	r0, r5
 801a38e:	f7ff fa55 	bl	801983c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a392:	b30f      	cbz	r7, 801a3d8 <tcp_abandon+0xdc>
 801a394:	4648      	mov	r0, r9
 801a396:	f06f 010c 	mvn.w	r1, #12
 801a39a:	463b      	mov	r3, r7
}
 801a39c:	b005      	add	sp, #20
 801a39e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a3a2:	4718      	bx	r3
    int send_rst = 0;
 801a3a4:	461e      	mov	r6, r3
 801a3a6:	e7d8      	b.n	801a35a <tcp_abandon+0x5e>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a3a8:	68eb      	ldr	r3, [r5, #12]
 801a3aa:	6013      	str	r3, [r2, #0]
 801a3ac:	2300      	movs	r3, #0
    u16_t local_port = 0;
 801a3ae:	4698      	mov	r8, r3
    int send_rst = 0;
 801a3b0:	461e      	mov	r6, r3
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a3b2:	60eb      	str	r3, [r5, #12]
 801a3b4:	e7d1      	b.n	801a35a <tcp_abandon+0x5e>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801a3b6:	8b28      	ldrh	r0, [r5, #24]
 801a3b8:	1d2b      	adds	r3, r5, #4
 801a3ba:	465a      	mov	r2, fp
 801a3bc:	4651      	mov	r1, sl
 801a3be:	9002      	str	r0, [sp, #8]
 801a3c0:	4628      	mov	r0, r5
 801a3c2:	9300      	str	r3, [sp, #0]
 801a3c4:	462b      	mov	r3, r5
 801a3c6:	f8cd 8004 	str.w	r8, [sp, #4]
 801a3ca:	f003 f87b 	bl	801d4c4 <tcp_rst>
    tcp_free(pcb);
 801a3ce:	4628      	mov	r0, r5
 801a3d0:	f7ff fa34 	bl	801983c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801a3d4:	2f00      	cmp	r7, #0
 801a3d6:	d1dd      	bne.n	801a394 <tcp_abandon+0x98>
}
 801a3d8:	b005      	add	sp, #20
 801a3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801a3de:	4b12      	ldr	r3, [pc, #72]	; (801a428 <tcp_abandon+0x12c>)
 801a3e0:	f44f 7210 	mov.w	r2, #576	; 0x240
 801a3e4:	4911      	ldr	r1, [pc, #68]	; (801a42c <tcp_abandon+0x130>)
 801a3e6:	4812      	ldr	r0, [pc, #72]	; (801a430 <tcp_abandon+0x134>)
 801a3e8:	f008 fe7c 	bl	80230e4 <iprintf>
 801a3ec:	7d2b      	ldrb	r3, [r5, #20]
  if (pcb->state == TIME_WAIT) {
 801a3ee:	2b0a      	cmp	r3, #10
 801a3f0:	d191      	bne.n	801a316 <tcp_abandon+0x1a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801a3f2:	4629      	mov	r1, r5
 801a3f4:	480f      	ldr	r0, [pc, #60]	; (801a434 <tcp_abandon+0x138>)
 801a3f6:	f7ff ff11 	bl	801a21c <tcp_pcb_remove>
    tcp_free(pcb);
 801a3fa:	4628      	mov	r0, r5
}
 801a3fc:	b005      	add	sp, #20
 801a3fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tcp_free(pcb);
 801a402:	f7ff ba1b 	b.w	801983c <tcp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801a406:	4b08      	ldr	r3, [pc, #32]	; (801a428 <tcp_abandon+0x12c>)
 801a408:	f240 223d 	movw	r2, #573	; 0x23d
 801a40c:	490a      	ldr	r1, [pc, #40]	; (801a438 <tcp_abandon+0x13c>)
 801a40e:	4808      	ldr	r0, [pc, #32]	; (801a430 <tcp_abandon+0x134>)
 801a410:	f008 be68 	b.w	80230e4 <iprintf>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a414:	68ea      	ldr	r2, [r5, #12]
 801a416:	60da      	str	r2, [r3, #12]
 801a418:	e7c8      	b.n	801a3ac <tcp_abandon+0xb0>
 801a41a:	bf00      	nop
 801a41c:	2002e4a4 	.word	0x2002e4a4
 801a420:	2002e498 	.word	0x2002e498
 801a424:	2002e494 	.word	0x2002e494
 801a428:	08040c04 	.word	0x08040c04
 801a42c:	080410f0 	.word	0x080410f0
 801a430:	08029ba0 	.word	0x08029ba0
 801a434:	2002e4a8 	.word	0x2002e4a8
 801a438:	080410d4 	.word	0x080410d4

0801a43c <tcp_abort>:
  tcp_abandon(pcb, 1);
 801a43c:	2101      	movs	r1, #1
 801a43e:	f7ff bf5d 	b.w	801a2fc <tcp_abandon>
 801a442:	bf00      	nop

0801a444 <tcp_accept_null>:
{
 801a444:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801a446:	460c      	mov	r4, r1
 801a448:	b131      	cbz	r1, 801a458 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801a44a:	4620      	mov	r0, r4
 801a44c:	2101      	movs	r1, #1
 801a44e:	f7ff ff55 	bl	801a2fc <tcp_abandon>
}
 801a452:	f06f 000c 	mvn.w	r0, #12
 801a456:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801a458:	4b06      	ldr	r3, [pc, #24]	; (801a474 <tcp_accept_null+0x30>)
 801a45a:	f240 320f 	movw	r2, #783	; 0x30f
 801a45e:	4906      	ldr	r1, [pc, #24]	; (801a478 <tcp_accept_null+0x34>)
 801a460:	4806      	ldr	r0, [pc, #24]	; (801a47c <tcp_accept_null+0x38>)
 801a462:	f008 fe3f 	bl	80230e4 <iprintf>
  tcp_abandon(pcb, 1);
 801a466:	4620      	mov	r0, r4
 801a468:	2101      	movs	r1, #1
 801a46a:	f7ff ff47 	bl	801a2fc <tcp_abandon>
}
 801a46e:	f06f 000c 	mvn.w	r0, #12
 801a472:	bd10      	pop	{r4, pc}
 801a474:	08040c04 	.word	0x08040c04
 801a478:	08041124 	.word	0x08041124
 801a47c:	08029ba0 	.word	0x08029ba0

0801a480 <tcp_netif_ip_addr_changed_pcblist>:
{
 801a480:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a482:	4605      	mov	r5, r0
{
 801a484:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a486:	b178      	cbz	r0, 801a4a8 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801a488:	b134      	cbz	r4, 801a498 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801a48a:	6822      	ldr	r2, [r4, #0]
 801a48c:	682b      	ldr	r3, [r5, #0]
 801a48e:	429a      	cmp	r2, r3
 801a490:	d003      	beq.n	801a49a <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801a492:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801a494:	2c00      	cmp	r4, #0
 801a496:	d1f8      	bne.n	801a48a <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801a498:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801a49a:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801a49c:	4620      	mov	r0, r4
 801a49e:	2101      	movs	r1, #1
      pcb = next;
 801a4a0:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801a4a2:	f7ff ff2b 	bl	801a2fc <tcp_abandon>
      pcb = next;
 801a4a6:	e7ef      	b.n	801a488 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801a4a8:	4b03      	ldr	r3, [pc, #12]	; (801a4b8 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801a4aa:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801a4ae:	4903      	ldr	r1, [pc, #12]	; (801a4bc <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801a4b0:	4803      	ldr	r0, [pc, #12]	; (801a4c0 <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801a4b2:	f008 fe17 	bl	80230e4 <iprintf>
 801a4b6:	e7e7      	b.n	801a488 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801a4b8:	08040c04 	.word	0x08040c04
 801a4bc:	08041144 	.word	0x08041144
 801a4c0:	08029ba0 	.word	0x08029ba0

0801a4c4 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4c4:	4b0f      	ldr	r3, [pc, #60]	; (801a504 <tcp_kill_state+0x40>)
 801a4c6:	6819      	ldr	r1, [r3, #0]
 801a4c8:	b1d1      	cbz	r1, 801a500 <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a4ca:	4b0f      	ldr	r3, [pc, #60]	; (801a508 <tcp_kill_state+0x44>)
  inactivity = 0;
 801a4cc:	2200      	movs	r2, #0
{
 801a4ce:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a4d0:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801a4d2:	4614      	mov	r4, r2
 801a4d4:	e001      	b.n	801a4da <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4d6:	68c9      	ldr	r1, [r1, #12]
 801a4d8:	b159      	cbz	r1, 801a4f2 <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801a4da:	7d0b      	ldrb	r3, [r1, #20]
 801a4dc:	4283      	cmp	r3, r0
 801a4de:	d1fa      	bne.n	801a4d6 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a4e0:	6a0b      	ldr	r3, [r1, #32]
 801a4e2:	1aeb      	subs	r3, r5, r3
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d3f6      	bcc.n	801a4d6 <tcp_kill_state+0x12>
 801a4e8:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4ea:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a4ec:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a4ee:	2900      	cmp	r1, #0
 801a4f0:	d1f3      	bne.n	801a4da <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801a4f2:	b11c      	cbz	r4, 801a4fc <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801a4f4:	4620      	mov	r0, r4
}
 801a4f6:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801a4f8:	f7ff bf00 	b.w	801a2fc <tcp_abandon>
}
 801a4fc:	bc30      	pop	{r4, r5}
 801a4fe:	4770      	bx	lr
 801a500:	4770      	bx	lr
 801a502:	bf00      	nop
 801a504:	2002e498 	.word	0x2002e498
 801a508:	2002e49c 	.word	0x2002e49c

0801a50c <tcp_alloc>:
{
 801a50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a50e:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801a512:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a514:	495c      	ldr	r1, [pc, #368]	; (801a688 <tcp_alloc+0x17c>)
 801a516:	2002      	movs	r0, #2
 801a518:	f7fe f9d8 	bl	80188cc <memp_malloc_fn>
  if (pcb == NULL) {
 801a51c:	b328      	cbz	r0, 801a56a <tcp_alloc+0x5e>
 801a51e:	4603      	mov	r3, r0
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a520:	229c      	movs	r2, #156	; 0x9c
 801a522:	2100      	movs	r1, #0
 801a524:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801a526:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a52a:	f007 fe69 	bl	8022200 <memset>
    pcb->tmr = tcp_ticks;
 801a52e:	4957      	ldr	r1, [pc, #348]	; (801a68c <tcp_alloc+0x180>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801a530:	4603      	mov	r3, r0
    pcb->last_timer = tcp_timer_ctr;
 801a532:	4a57      	ldr	r2, [pc, #348]	; (801a690 <tcp_alloc+0x184>)
    pcb->tmr = tcp_ticks;
 801a534:	6808      	ldr	r0, [r1, #0]
    pcb->ttl = TCP_TTL;
 801a536:	21ff      	movs	r1, #255	; 0xff
    pcb->last_timer = tcp_timer_ctr;
 801a538:	7816      	ldrb	r6, [r2, #0]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a53a:	2206      	movs	r2, #6
    pcb->tmr = tcp_ticks;
 801a53c:	6218      	str	r0, [r3, #32]
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a53e:	4855      	ldr	r0, [pc, #340]	; (801a694 <tcp_alloc+0x188>)
    pcb->prio = prio;
 801a540:	755d      	strb	r5, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801a542:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->rtime = -1;
 801a546:	4d54      	ldr	r5, [pc, #336]	; (801a698 <tcp_alloc+0x18c>)
    pcb->cwnd = 1;
 801a548:	4c54      	ldr	r4, [pc, #336]	; (801a69c <tcp_alloc+0x190>)
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a54a:	6298      	str	r0, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801a54c:	72d9      	strb	r1, [r3, #11]
    pcb->recv = tcp_recv_null;
 801a54e:	4854      	ldr	r0, [pc, #336]	; (801a6a0 <tcp_alloc+0x194>)
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a550:	4954      	ldr	r1, [pc, #336]	; (801a6a4 <tcp_alloc+0x198>)
    pcb->last_timer = tcp_timer_ctr;
 801a552:	779e      	strb	r6, [r3, #30]
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801a554:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801a558:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801a55a:	631d      	str	r5, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801a55c:	649c      	str	r4, [r3, #72]	; 0x48
    pcb->recv = tcp_recv_null;
 801a55e:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801a562:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 801a566:	4618      	mov	r0, r3
 801a568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801a56a:	4e4f      	ldr	r6, [pc, #316]	; (801a6a8 <tcp_alloc+0x19c>)
 801a56c:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801a56e:	b15c      	cbz	r4, 801a588 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801a570:	4620      	mov	r0, r4
 801a572:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801a574:	8b43      	ldrh	r3, [r0, #26]
 801a576:	0719      	lsls	r1, r3, #28
 801a578:	d5f9      	bpl.n	801a56e <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a57a:	f023 0308 	bic.w	r3, r3, #8
 801a57e:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801a580:	f7ff f91c 	bl	80197bc <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801a584:	2c00      	cmp	r4, #0
 801a586:	d1f3      	bne.n	801a570 <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a588:	4b48      	ldr	r3, [pc, #288]	; (801a6ac <tcp_alloc+0x1a0>)
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	b193      	cbz	r3, 801a5b4 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a58e:	4a3f      	ldr	r2, [pc, #252]	; (801a68c <tcp_alloc+0x180>)
 801a590:	4618      	mov	r0, r3
 801a592:	6a19      	ldr	r1, [r3, #32]
 801a594:	6814      	ldr	r4, [r2, #0]
 801a596:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a598:	68db      	ldr	r3, [r3, #12]
 801a59a:	b143      	cbz	r3, 801a5ae <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a59c:	6a1a      	ldr	r2, [r3, #32]
 801a59e:	1aa2      	subs	r2, r4, r2
 801a5a0:	428a      	cmp	r2, r1
 801a5a2:	d3f9      	bcc.n	801a598 <tcp_alloc+0x8c>
 801a5a4:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5a6:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801a5a8:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d1f6      	bne.n	801a59c <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801a5ae:	2101      	movs	r1, #1
 801a5b0:	f7ff fea4 	bl	801a2fc <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5b4:	f240 7239 	movw	r2, #1849	; 0x739
 801a5b8:	4933      	ldr	r1, [pc, #204]	; (801a688 <tcp_alloc+0x17c>)
 801a5ba:	2002      	movs	r0, #2
 801a5bc:	f7fe f986 	bl	80188cc <memp_malloc_fn>
    if (pcb == NULL) {
 801a5c0:	4603      	mov	r3, r0
 801a5c2:	b130      	cbz	r0, 801a5d2 <tcp_alloc+0xc6>
 801a5c4:	4a3a      	ldr	r2, [pc, #232]	; (801a6b0 <tcp_alloc+0x1a4>)
 801a5c6:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801a5ca:	880a      	ldrh	r2, [r1, #0]
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801a5cc:	3a01      	subs	r2, #1
 801a5ce:	800a      	strh	r2, [r1, #0]
 801a5d0:	e7a6      	b.n	801a520 <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801a5d2:	2009      	movs	r0, #9
 801a5d4:	f7ff ff76 	bl	801a4c4 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5d8:	f240 723f 	movw	r2, #1855	; 0x73f
 801a5dc:	492a      	ldr	r1, [pc, #168]	; (801a688 <tcp_alloc+0x17c>)
 801a5de:	2002      	movs	r0, #2
 801a5e0:	f7fe f974 	bl	80188cc <memp_malloc_fn>
      if (pcb == NULL) {
 801a5e4:	4603      	mov	r3, r0
 801a5e6:	b138      	cbz	r0, 801a5f8 <tcp_alloc+0xec>
 801a5e8:	4a31      	ldr	r2, [pc, #196]	; (801a6b0 <tcp_alloc+0x1a4>)
 801a5ea:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801a5ee:	880a      	ldrh	r2, [r1, #0]
        MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801a5f0:	3a01      	subs	r2, #1
 801a5f2:	b292      	uxth	r2, r2
 801a5f4:	800a      	strh	r2, [r1, #0]
 801a5f6:	e7e9      	b.n	801a5cc <tcp_alloc+0xc0>
        tcp_kill_state(CLOSING);
 801a5f8:	2008      	movs	r0, #8
 801a5fa:	f7ff ff63 	bl	801a4c4 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a5fe:	f240 7245 	movw	r2, #1861	; 0x745
 801a602:	4921      	ldr	r1, [pc, #132]	; (801a688 <tcp_alloc+0x17c>)
 801a604:	2002      	movs	r0, #2
 801a606:	f7fe f961 	bl	80188cc <memp_malloc_fn>
        if (pcb == NULL) {
 801a60a:	4603      	mov	r3, r0
 801a60c:	b138      	cbz	r0, 801a61e <tcp_alloc+0x112>
 801a60e:	4a28      	ldr	r2, [pc, #160]	; (801a6b0 <tcp_alloc+0x1a4>)
          MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801a610:	f8d2 10bc 	ldr.w	r1, [r2, #188]	; 0xbc
 801a614:	880a      	ldrh	r2, [r1, #0]
 801a616:	3a01      	subs	r2, #1
 801a618:	b292      	uxth	r2, r2
 801a61a:	800a      	strh	r2, [r1, #0]
 801a61c:	e7e8      	b.n	801a5f0 <tcp_alloc+0xe4>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a61e:	062a      	lsls	r2, r5, #24
 801a620:	d42f      	bmi.n	801a682 <tcp_alloc+0x176>
  if (mprio == 0) {
 801a622:	b1ed      	cbz	r5, 801a660 <tcp_alloc+0x154>
 801a624:	462a      	mov	r2, r5
  mprio--;
 801a626:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a628:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801a62a:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a62c:	b1c2      	cbz	r2, 801a660 <tcp_alloc+0x154>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a62e:	4817      	ldr	r0, [pc, #92]	; (801a68c <tcp_alloc+0x180>)
  inactivity = 0;
 801a630:	2700      	movs	r7, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a632:	6806      	ldr	r6, [r0, #0]
 801a634:	e005      	b.n	801a642 <tcp_alloc+0x136>
 801a636:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801a638:	1b37      	subs	r7, r6, r4
    if ((pcb->prio < mprio) ||
 801a63a:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801a63c:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801a63e:	68d2      	ldr	r2, [r2, #12]
 801a640:	b14a      	cbz	r2, 801a656 <tcp_alloc+0x14a>
    if ((pcb->prio < mprio) ||
 801a642:	7d50      	ldrb	r0, [r2, #21]
 801a644:	4281      	cmp	r1, r0
 801a646:	d8f6      	bhi.n	801a636 <tcp_alloc+0x12a>
 801a648:	d1f9      	bne.n	801a63e <tcp_alloc+0x132>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801a64a:	6a14      	ldr	r4, [r2, #32]
 801a64c:	eba6 0c04 	sub.w	ip, r6, r4
 801a650:	4567      	cmp	r7, ip
 801a652:	d8f4      	bhi.n	801a63e <tcp_alloc+0x132>
 801a654:	e7f0      	b.n	801a638 <tcp_alloc+0x12c>
  if (inactive != NULL) {
 801a656:	b11b      	cbz	r3, 801a660 <tcp_alloc+0x154>
  tcp_abandon(pcb, 1);
 801a658:	4618      	mov	r0, r3
 801a65a:	2101      	movs	r1, #1
 801a65c:	f7ff fe4e 	bl	801a2fc <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801a660:	f240 724b 	movw	r2, #1867	; 0x74b
 801a664:	4908      	ldr	r1, [pc, #32]	; (801a688 <tcp_alloc+0x17c>)
 801a666:	2002      	movs	r0, #2
 801a668:	f7fe f930 	bl	80188cc <memp_malloc_fn>
          if (pcb != NULL) {
 801a66c:	4603      	mov	r3, r0
 801a66e:	2800      	cmp	r0, #0
 801a670:	f43f af79 	beq.w	801a566 <tcp_alloc+0x5a>
            MEMP_STATS_DEC(err, MEMP_TCP_PCB);
 801a674:	4a0e      	ldr	r2, [pc, #56]	; (801a6b0 <tcp_alloc+0x1a4>)
 801a676:	f8d2 00bc 	ldr.w	r0, [r2, #188]	; 0xbc
 801a67a:	8801      	ldrh	r1, [r0, #0]
 801a67c:	3901      	subs	r1, #1
 801a67e:	8001      	strh	r1, [r0, #0]
 801a680:	e7c6      	b.n	801a610 <tcp_alloc+0x104>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801a682:	227f      	movs	r2, #127	; 0x7f
 801a684:	e7cf      	b.n	801a626 <tcp_alloc+0x11a>
 801a686:	bf00      	nop
 801a688:	08040c04 	.word	0x08040c04
 801a68c:	2002e49c 	.word	0x2002e49c
 801a690:	2001aa31 	.word	0x2001aa31
 801a694:	08600860 	.word	0x08600860
 801a698:	0218ffff 	.word	0x0218ffff
 801a69c:	04300001 	.word	0x04300001
 801a6a0:	0801a885 	.word	0x0801a885
 801a6a4:	006ddd00 	.word	0x006ddd00
 801a6a8:	2002e498 	.word	0x2002e498
 801a6ac:	2002e4a8 	.word	0x2002e4a8
 801a6b0:	2002e38c 	.word	0x2002e38c

0801a6b4 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801a6b4:	2040      	movs	r0, #64	; 0x40
 801a6b6:	f7ff bf29 	b.w	801a50c <tcp_alloc>
 801a6ba:	bf00      	nop

0801a6bc <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801a6bc:	2040      	movs	r0, #64	; 0x40
 801a6be:	f7ff bf25 	b.w	801a50c <tcp_alloc>
 801a6c2:	bf00      	nop

0801a6c4 <tcp_close_shutdown>:
{
 801a6c4:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801a6c6:	4604      	mov	r4, r0
{
 801a6c8:	b085      	sub	sp, #20
 801a6ca:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801a6cc:	2800      	cmp	r0, #0
 801a6ce:	d062      	beq.n	801a796 <tcp_close_shutdown+0xd2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801a6d0:	7d23      	ldrb	r3, [r4, #20]
 801a6d2:	b11d      	cbz	r5, 801a6dc <tcp_close_shutdown+0x18>
 801a6d4:	2b04      	cmp	r3, #4
 801a6d6:	d00c      	beq.n	801a6f2 <tcp_close_shutdown+0x2e>
 801a6d8:	2b07      	cmp	r3, #7
 801a6da:	d00a      	beq.n	801a6f2 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801a6dc:	2b01      	cmp	r3, #1
 801a6de:	d062      	beq.n	801a7a6 <tcp_close_shutdown+0xe2>
 801a6e0:	2b02      	cmp	r3, #2
 801a6e2:	d02d      	beq.n	801a740 <tcp_close_shutdown+0x7c>
 801a6e4:	b323      	cbz	r3, 801a730 <tcp_close_shutdown+0x6c>
      return tcp_close_shutdown_fin(pcb);
 801a6e6:	4620      	mov	r0, r4
}
 801a6e8:	b005      	add	sp, #20
 801a6ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801a6ee:	f7ff b865 	b.w	80197bc <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801a6f2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801a6f4:	2a00      	cmp	r2, #0
 801a6f6:	d030      	beq.n	801a75a <tcp_close_shutdown+0x96>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801a6f8:	8b63      	ldrh	r3, [r4, #26]
 801a6fa:	06db      	lsls	r3, r3, #27
 801a6fc:	d57c      	bpl.n	801a7f8 <tcp_close_shutdown+0x134>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a6fe:	8b20      	ldrh	r0, [r4, #24]
 801a700:	1d22      	adds	r2, r4, #4
 801a702:	8ae1      	ldrh	r1, [r4, #22]
 801a704:	4623      	mov	r3, r4
 801a706:	9002      	str	r0, [sp, #8]
 801a708:	4620      	mov	r0, r4
 801a70a:	e9cd 2100 	strd	r2, r1, [sp]
 801a70e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801a710:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801a712:	f002 fed7 	bl	801d4c4 <tcp_rst>
      tcp_pcb_purge(pcb);
 801a716:	4620      	mov	r0, r4
 801a718:	f7ff fac8 	bl	8019cac <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801a71c:	4a3f      	ldr	r2, [pc, #252]	; (801a81c <tcp_close_shutdown+0x158>)
 801a71e:	6813      	ldr	r3, [r2, #0]
 801a720:	42a3      	cmp	r3, r4
 801a722:	d02a      	beq.n	801a77a <tcp_close_shutdown+0xb6>
 801a724:	b35b      	cbz	r3, 801a77e <tcp_close_shutdown+0xba>
 801a726:	68da      	ldr	r2, [r3, #12]
 801a728:	42a2      	cmp	r2, r4
 801a72a:	d062      	beq.n	801a7f2 <tcp_close_shutdown+0x12e>
 801a72c:	4613      	mov	r3, r2
 801a72e:	e7f9      	b.n	801a724 <tcp_close_shutdown+0x60>
      if (pcb->local_port != 0) {
 801a730:	8ae3      	ldrh	r3, [r4, #22]
 801a732:	b9bb      	cbnz	r3, 801a764 <tcp_close_shutdown+0xa0>
        tcp_free(pcb);
 801a734:	4620      	mov	r0, r4
 801a736:	f7ff f881 	bl	801983c <tcp_free>
}
 801a73a:	2000      	movs	r0, #0
 801a73c:	b005      	add	sp, #20
 801a73e:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a740:	4621      	mov	r1, r4
 801a742:	4836      	ldr	r0, [pc, #216]	; (801a81c <tcp_close_shutdown+0x158>)
 801a744:	f7ff fd6a 	bl	801a21c <tcp_pcb_remove>
 801a748:	4b35      	ldr	r3, [pc, #212]	; (801a820 <tcp_close_shutdown+0x15c>)
 801a74a:	2201      	movs	r2, #1
      tcp_free(pcb);
 801a74c:	4620      	mov	r0, r4
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801a74e:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801a750:	f7ff f874 	bl	801983c <tcp_free>
}
 801a754:	2000      	movs	r0, #0
 801a756:	b005      	add	sp, #20
 801a758:	bd30      	pop	{r4, r5, pc}
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801a75a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801a75c:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801a760:	d0bc      	beq.n	801a6dc <tcp_close_shutdown+0x18>
 801a762:	e7c9      	b.n	801a6f8 <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a764:	4a2f      	ldr	r2, [pc, #188]	; (801a824 <tcp_close_shutdown+0x160>)
 801a766:	6813      	ldr	r3, [r2, #0]
 801a768:	42a3      	cmp	r3, r4
 801a76a:	d03d      	beq.n	801a7e8 <tcp_close_shutdown+0x124>
 801a76c:	2b00      	cmp	r3, #0
 801a76e:	d03d      	beq.n	801a7ec <tcp_close_shutdown+0x128>
 801a770:	68da      	ldr	r2, [r3, #12]
 801a772:	42a2      	cmp	r2, r4
 801a774:	d04f      	beq.n	801a816 <tcp_close_shutdown+0x152>
 801a776:	4613      	mov	r3, r2
 801a778:	e7f8      	b.n	801a76c <tcp_close_shutdown+0xa8>
      TCP_RMV_ACTIVE(pcb);
 801a77a:	68e3      	ldr	r3, [r4, #12]
 801a77c:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801a77e:	4b2a      	ldr	r3, [pc, #168]	; (801a828 <tcp_close_shutdown+0x164>)
      TCP_RMV_ACTIVE(pcb);
 801a780:	2000      	movs	r0, #0
 801a782:	4a27      	ldr	r2, [pc, #156]	; (801a820 <tcp_close_shutdown+0x15c>)
 801a784:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801a786:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801a788:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801a78a:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801a78c:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801a78e:	d1d1      	bne.n	801a734 <tcp_close_shutdown+0x70>
        tcp_trigger_input_pcb_close();
 801a790:	f001 fed2 	bl	801c538 <tcp_trigger_input_pcb_close>
 801a794:	e7d1      	b.n	801a73a <tcp_close_shutdown+0x76>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801a796:	4b25      	ldr	r3, [pc, #148]	; (801a82c <tcp_close_shutdown+0x168>)
 801a798:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801a79c:	4924      	ldr	r1, [pc, #144]	; (801a830 <tcp_close_shutdown+0x16c>)
 801a79e:	4825      	ldr	r0, [pc, #148]	; (801a834 <tcp_close_shutdown+0x170>)
 801a7a0:	f008 fca0 	bl	80230e4 <iprintf>
 801a7a4:	e794      	b.n	801a6d0 <tcp_close_shutdown+0xc>
 801a7a6:	4924      	ldr	r1, [pc, #144]	; (801a838 <tcp_close_shutdown+0x174>)
      pcb->listener = NULL;
 801a7a8:	2000      	movs	r0, #0
  switch (pcb->state) {
 801a7aa:	4b1e      	ldr	r3, [pc, #120]	; (801a824 <tcp_close_shutdown+0x160>)
 801a7ac:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801a7b0:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a7b2:	b133      	cbz	r3, 801a7c2 <tcp_close_shutdown+0xfe>
    if (pcb->listener == lpcb) {
 801a7b4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801a7b6:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801a7b8:	bf08      	it	eq
 801a7ba:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801a7bc:	68db      	ldr	r3, [r3, #12]
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	d1f8      	bne.n	801a7b4 <tcp_close_shutdown+0xf0>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801a7c2:	428d      	cmp	r5, r1
 801a7c4:	d002      	beq.n	801a7cc <tcp_close_shutdown+0x108>
 801a7c6:	f851 3b04 	ldr.w	r3, [r1], #4
 801a7ca:	e7f1      	b.n	801a7b0 <tcp_close_shutdown+0xec>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801a7cc:	4621      	mov	r1, r4
 801a7ce:	481b      	ldr	r0, [pc, #108]	; (801a83c <tcp_close_shutdown+0x178>)
 801a7d0:	f7ff fd24 	bl	801a21c <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a7d4:	7d23      	ldrb	r3, [r4, #20]
 801a7d6:	2b01      	cmp	r3, #1
 801a7d8:	d016      	beq.n	801a808 <tcp_close_shutdown+0x144>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801a7da:	4621      	mov	r1, r4
 801a7dc:	2003      	movs	r0, #3
 801a7de:	f7fe f899 	bl	8018914 <memp_free>
}
 801a7e2:	2000      	movs	r0, #0
 801a7e4:	b005      	add	sp, #20
 801a7e6:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a7e8:	68e3      	ldr	r3, [r4, #12]
 801a7ea:	6013      	str	r3, [r2, #0]
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	60e3      	str	r3, [r4, #12]
 801a7f0:	e7a0      	b.n	801a734 <tcp_close_shutdown+0x70>
      TCP_RMV_ACTIVE(pcb);
 801a7f2:	68e2      	ldr	r2, [r4, #12]
 801a7f4:	60da      	str	r2, [r3, #12]
 801a7f6:	e7c2      	b.n	801a77e <tcp_close_shutdown+0xba>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801a7f8:	4b0c      	ldr	r3, [pc, #48]	; (801a82c <tcp_close_shutdown+0x168>)
 801a7fa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801a7fe:	4910      	ldr	r1, [pc, #64]	; (801a840 <tcp_close_shutdown+0x17c>)
 801a800:	480c      	ldr	r0, [pc, #48]	; (801a834 <tcp_close_shutdown+0x170>)
 801a802:	f008 fc6f 	bl	80230e4 <iprintf>
 801a806:	e77a      	b.n	801a6fe <tcp_close_shutdown+0x3a>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801a808:	4b08      	ldr	r3, [pc, #32]	; (801a82c <tcp_close_shutdown+0x168>)
 801a80a:	22df      	movs	r2, #223	; 0xdf
 801a80c:	490d      	ldr	r1, [pc, #52]	; (801a844 <tcp_close_shutdown+0x180>)
 801a80e:	4809      	ldr	r0, [pc, #36]	; (801a834 <tcp_close_shutdown+0x170>)
 801a810:	f008 fc68 	bl	80230e4 <iprintf>
 801a814:	e7e1      	b.n	801a7da <tcp_close_shutdown+0x116>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801a816:	68e2      	ldr	r2, [r4, #12]
 801a818:	60da      	str	r2, [r3, #12]
 801a81a:	e7e7      	b.n	801a7ec <tcp_close_shutdown+0x128>
 801a81c:	2002e498 	.word	0x2002e498
 801a820:	2002e494 	.word	0x2002e494
 801a824:	2002e4a4 	.word	0x2002e4a4
 801a828:	2002e4ac 	.word	0x2002e4ac
 801a82c:	08040c04 	.word	0x08040c04
 801a830:	08041178 	.word	0x08041178
 801a834:	08029ba0 	.word	0x08029ba0
 801a838:	080412f0 	.word	0x080412f0
 801a83c:	2002e4a0 	.word	0x2002e4a0
 801a840:	08041198 	.word	0x08041198
 801a844:	080411b4 	.word	0x080411b4

0801a848 <tcp_close>:
{
 801a848:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801a84a:	b158      	cbz	r0, 801a864 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801a84c:	7d03      	ldrb	r3, [r0, #20]
 801a84e:	2b01      	cmp	r3, #1
 801a850:	d003      	beq.n	801a85a <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801a852:	8b43      	ldrh	r3, [r0, #26]
 801a854:	f043 0310 	orr.w	r3, r3, #16
 801a858:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801a85a:	2101      	movs	r1, #1
}
 801a85c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801a860:	f7ff bf30 	b.w	801a6c4 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801a864:	4b04      	ldr	r3, [pc, #16]	; (801a878 <tcp_close+0x30>)
 801a866:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801a86a:	4904      	ldr	r1, [pc, #16]	; (801a87c <tcp_close+0x34>)
 801a86c:	4804      	ldr	r0, [pc, #16]	; (801a880 <tcp_close+0x38>)
 801a86e:	f008 fc39 	bl	80230e4 <iprintf>
}
 801a872:	f06f 000f 	mvn.w	r0, #15
 801a876:	bd08      	pop	{r3, pc}
 801a878:	08040c04 	.word	0x08040c04
 801a87c:	080411d0 	.word	0x080411d0
 801a880:	08029ba0 	.word	0x08029ba0

0801a884 <tcp_recv_null>:
{
 801a884:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a886:	b189      	cbz	r1, 801a8ac <tcp_recv_null+0x28>
  if (p != NULL) {
 801a888:	4614      	mov	r4, r2
 801a88a:	4608      	mov	r0, r1
 801a88c:	b13a      	cbz	r2, 801a89e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801a88e:	8911      	ldrh	r1, [r2, #8]
 801a890:	f7ff f8fe 	bl	8019a90 <tcp_recved>
    pbuf_free(p);
 801a894:	4620      	mov	r0, r4
 801a896:	f7fe fb0d 	bl	8018eb4 <pbuf_free>
  return ERR_OK;
 801a89a:	2000      	movs	r0, #0
}
 801a89c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801a89e:	b10b      	cbz	r3, 801a8a4 <tcp_recv_null+0x20>
  return ERR_OK;
 801a8a0:	4610      	mov	r0, r2
}
 801a8a2:	bd10      	pop	{r4, pc}
 801a8a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tcp_close(pcb);
 801a8a8:	f7ff bfce 	b.w	801a848 <tcp_close>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801a8ac:	4b04      	ldr	r3, [pc, #16]	; (801a8c0 <tcp_recv_null+0x3c>)
 801a8ae:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a8b2:	4904      	ldr	r1, [pc, #16]	; (801a8c4 <tcp_recv_null+0x40>)
 801a8b4:	4804      	ldr	r0, [pc, #16]	; (801a8c8 <tcp_recv_null+0x44>)
 801a8b6:	f008 fc15 	bl	80230e4 <iprintf>
 801a8ba:	f06f 000f 	mvn.w	r0, #15
}
 801a8be:	bd10      	pop	{r4, pc}
 801a8c0:	08040c04 	.word	0x08040c04
 801a8c4:	080411e8 	.word	0x080411e8
 801a8c8:	08029ba0 	.word	0x08029ba0

0801a8cc <tcp_process_refused_data>:
{
 801a8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a8ce:	2800      	cmp	r0, #0
 801a8d0:	d035      	beq.n	801a93e <tcp_process_refused_data+0x72>
    u8_t refused_flags = pcb->refused_data->flags;
 801a8d2:	6f86      	ldr	r6, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801a8d4:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a8d6:	f8d0 5084 	ldr.w	r5, [r0, #132]	; 0x84
 801a8da:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801a8dc:	7b77      	ldrb	r7, [r6, #13]
    pcb->refused_data = NULL;
 801a8de:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a8e0:	b31d      	cbz	r5, 801a92a <tcp_process_refused_data+0x5e>
 801a8e2:	4601      	mov	r1, r0
 801a8e4:	4632      	mov	r2, r6
 801a8e6:	6900      	ldr	r0, [r0, #16]
 801a8e8:	47a8      	blx	r5
 801a8ea:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 801a8ec:	b135      	cbz	r5, 801a8fc <tcp_process_refused_data+0x30>
    } else if (err == ERR_ABRT) {
 801a8ee:	350d      	adds	r5, #13
 801a8f0:	d017      	beq.n	801a922 <tcp_process_refused_data+0x56>
      return ERR_INPROGRESS;
 801a8f2:	f06f 0504 	mvn.w	r5, #4
      pcb->refused_data = refused_data;
 801a8f6:	67a6      	str	r6, [r4, #120]	; 0x78
}
 801a8f8:	4628      	mov	r0, r5
 801a8fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a8fc:	06bb      	lsls	r3, r7, #26
 801a8fe:	d5fb      	bpl.n	801a8f8 <tcp_process_refused_data+0x2c>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a900:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801a902:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a906:	d001      	beq.n	801a90c <tcp_process_refused_data+0x40>
          pcb->rcv_wnd++;
 801a908:	3301      	adds	r3, #1
 801a90a:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801a90c:	f8d4 6084 	ldr.w	r6, [r4, #132]	; 0x84
 801a910:	2e00      	cmp	r6, #0
 801a912:	d0f1      	beq.n	801a8f8 <tcp_process_refused_data+0x2c>
 801a914:	2300      	movs	r3, #0
 801a916:	4621      	mov	r1, r4
 801a918:	6920      	ldr	r0, [r4, #16]
 801a91a:	461a      	mov	r2, r3
 801a91c:	47b0      	blx	r6
        if (err == ERR_ABRT) {
 801a91e:	300d      	adds	r0, #13
 801a920:	d1ea      	bne.n	801a8f8 <tcp_process_refused_data+0x2c>
          return ERR_ABRT;
 801a922:	f06f 050c 	mvn.w	r5, #12
}
 801a926:	4628      	mov	r0, r5
 801a928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a92a:	462b      	mov	r3, r5
 801a92c:	4628      	mov	r0, r5
 801a92e:	4632      	mov	r2, r6
 801a930:	4621      	mov	r1, r4
 801a932:	f7ff ffa7 	bl	801a884 <tcp_recv_null>
 801a936:	4605      	mov	r5, r0
    if (err == ERR_OK) {
 801a938:	2d00      	cmp	r5, #0
 801a93a:	d1d8      	bne.n	801a8ee <tcp_process_refused_data+0x22>
 801a93c:	e7de      	b.n	801a8fc <tcp_process_refused_data+0x30>
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a93e:	4b05      	ldr	r3, [pc, #20]	; (801a954 <tcp_process_refused_data+0x88>)
 801a940:	f240 6209 	movw	r2, #1545	; 0x609
 801a944:	4904      	ldr	r1, [pc, #16]	; (801a958 <tcp_process_refused_data+0x8c>)
 801a946:	f06f 050f 	mvn.w	r5, #15
 801a94a:	4804      	ldr	r0, [pc, #16]	; (801a95c <tcp_process_refused_data+0x90>)
 801a94c:	f008 fbca 	bl	80230e4 <iprintf>
 801a950:	e7d2      	b.n	801a8f8 <tcp_process_refused_data+0x2c>
 801a952:	bf00      	nop
 801a954:	08040c04 	.word	0x08040c04
 801a958:	08041204 	.word	0x08041204
 801a95c:	08029ba0 	.word	0x08029ba0

0801a960 <tcp_fasttmr>:
{
 801a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801a964:	4d1c      	ldr	r5, [pc, #112]	; (801a9d8 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801a966:	2700      	movs	r7, #0
 801a968:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801a9e0 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801a96c:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801a96e:	4e1b      	ldr	r6, [pc, #108]	; (801a9dc <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801a970:	3301      	adds	r3, #1
 801a972:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801a974:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801a978:	b1bc      	cbz	r4, 801a9aa <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a97a:	782a      	ldrb	r2, [r5, #0]
 801a97c:	7fa3      	ldrb	r3, [r4, #30]
 801a97e:	4293      	cmp	r3, r2
 801a980:	d015      	beq.n	801a9ae <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801a982:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801a984:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801a986:	07d9      	lsls	r1, r3, #31
 801a988:	d41a      	bmi.n	801a9c0 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801a98a:	071a      	lsls	r2, r3, #28
 801a98c:	d411      	bmi.n	801a9b2 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801a98e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801a990:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801a994:	b133      	cbz	r3, 801a9a4 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801a996:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801a998:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801a99a:	f7ff ff97 	bl	801a8cc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a99e:	7833      	ldrb	r3, [r6, #0]
 801a9a0:	2b00      	cmp	r3, #0
 801a9a2:	d1e7      	bne.n	801a974 <tcp_fasttmr+0x14>
      pcb = next;
 801a9a4:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801a9a6:	2c00      	cmp	r4, #0
 801a9a8:	d1e7      	bne.n	801a97a <tcp_fasttmr+0x1a>
}
 801a9aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801a9ae:	68e4      	ldr	r4, [r4, #12]
 801a9b0:	e7e2      	b.n	801a978 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a9b2:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801a9b6:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a9b8:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801a9ba:	f7fe feff 	bl	80197bc <tcp_close_shutdown_fin>
 801a9be:	e7e6      	b.n	801a98e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801a9c0:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801a9c4:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801a9c6:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801a9c8:	f002 fdfc 	bl	801d5c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a9cc:	8b63      	ldrh	r3, [r4, #26]
 801a9ce:	f023 0303 	bic.w	r3, r3, #3
 801a9d2:	b29b      	uxth	r3, r3
 801a9d4:	8363      	strh	r3, [r4, #26]
 801a9d6:	e7d8      	b.n	801a98a <tcp_fasttmr+0x2a>
 801a9d8:	2001aa31 	.word	0x2001aa31
 801a9dc:	2002e494 	.word	0x2002e494
 801a9e0:	2002e498 	.word	0x2002e498

0801a9e4 <tcp_tmr>:
{
 801a9e4:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801a9e6:	f7ff ffbb 	bl	801a960 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801a9ea:	4a06      	ldr	r2, [pc, #24]	; (801aa04 <tcp_tmr+0x20>)
 801a9ec:	7813      	ldrb	r3, [r2, #0]
 801a9ee:	3301      	adds	r3, #1
 801a9f0:	b2db      	uxtb	r3, r3
 801a9f2:	7013      	strb	r3, [r2, #0]
 801a9f4:	07db      	lsls	r3, r3, #31
 801a9f6:	d400      	bmi.n	801a9fa <tcp_tmr+0x16>
}
 801a9f8:	bd08      	pop	{r3, pc}
 801a9fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801a9fe:	f7ff b995 	b.w	8019d2c <tcp_slowtmr>
 801aa02:	bf00      	nop
 801aa04:	2001aa30 	.word	0x2001aa30

0801aa08 <tcp_next_iss>:
{
 801aa08:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801aa0a:	b130      	cbz	r0, 801aa1a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801aa0c:	4b07      	ldr	r3, [pc, #28]	; (801aa2c <tcp_next_iss+0x24>)
 801aa0e:	4a08      	ldr	r2, [pc, #32]	; (801aa30 <tcp_next_iss+0x28>)
 801aa10:	6818      	ldr	r0, [r3, #0]
 801aa12:	6812      	ldr	r2, [r2, #0]
 801aa14:	4410      	add	r0, r2
 801aa16:	6018      	str	r0, [r3, #0]
}
 801aa18:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801aa1a:	4b06      	ldr	r3, [pc, #24]	; (801aa34 <tcp_next_iss+0x2c>)
 801aa1c:	f640 02af 	movw	r2, #2223	; 0x8af
 801aa20:	4905      	ldr	r1, [pc, #20]	; (801aa38 <tcp_next_iss+0x30>)
 801aa22:	4806      	ldr	r0, [pc, #24]	; (801aa3c <tcp_next_iss+0x34>)
 801aa24:	f008 fb5e 	bl	80230e4 <iprintf>
 801aa28:	e7f0      	b.n	801aa0c <tcp_next_iss+0x4>
 801aa2a:	bf00      	nop
 801aa2c:	2000040c 	.word	0x2000040c
 801aa30:	2002e49c 	.word	0x2002e49c
 801aa34:	08040c04 	.word	0x08040c04
 801aa38:	0804122c 	.word	0x0804122c
 801aa3c:	08029ba0 	.word	0x08029ba0

0801aa40 <tcp_eff_send_mss_netif>:
{
 801aa40:	b538      	push	{r3, r4, r5, lr}
 801aa42:	4605      	mov	r5, r0
 801aa44:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801aa46:	b172      	cbz	r2, 801aa66 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801aa48:	b144      	cbz	r4, 801aa5c <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801aa4a:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801aa4c:	b133      	cbz	r3, 801aa5c <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801aa4e:	2b28      	cmp	r3, #40	; 0x28
 801aa50:	d906      	bls.n	801aa60 <tcp_eff_send_mss_netif+0x20>
 801aa52:	3b28      	subs	r3, #40	; 0x28
 801aa54:	b29b      	uxth	r3, r3
 801aa56:	429d      	cmp	r5, r3
 801aa58:	bf28      	it	cs
 801aa5a:	461d      	movcs	r5, r3
}
 801aa5c:	4628      	mov	r0, r5
 801aa5e:	bd38      	pop	{r3, r4, r5, pc}
 801aa60:	2500      	movs	r5, #0
 801aa62:	4628      	mov	r0, r5
 801aa64:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801aa66:	4b04      	ldr	r3, [pc, #16]	; (801aa78 <tcp_eff_send_mss_netif+0x38>)
 801aa68:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801aa6c:	4903      	ldr	r1, [pc, #12]	; (801aa7c <tcp_eff_send_mss_netif+0x3c>)
 801aa6e:	4804      	ldr	r0, [pc, #16]	; (801aa80 <tcp_eff_send_mss_netif+0x40>)
 801aa70:	f008 fb38 	bl	80230e4 <iprintf>
 801aa74:	e7e8      	b.n	801aa48 <tcp_eff_send_mss_netif+0x8>
 801aa76:	bf00      	nop
 801aa78:	08040c04 	.word	0x08040c04
 801aa7c:	08041248 	.word	0x08041248
 801aa80:	08029ba0 	.word	0x08029ba0

0801aa84 <tcp_connect>:
{
 801aa84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa86:	2800      	cmp	r0, #0
 801aa88:	f000 8082 	beq.w	801ab90 <tcp_connect+0x10c>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801aa8c:	2900      	cmp	r1, #0
 801aa8e:	d075      	beq.n	801ab7c <tcp_connect+0xf8>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801aa90:	461e      	mov	r6, r3
 801aa92:	7d03      	ldrb	r3, [r0, #20]
 801aa94:	4604      	mov	r4, r0
 801aa96:	2b00      	cmp	r3, #0
 801aa98:	d160      	bne.n	801ab5c <tcp_connect+0xd8>
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801aa9a:	680b      	ldr	r3, [r1, #0]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801aa9c:	7a00      	ldrb	r0, [r0, #8]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801aa9e:	6063      	str	r3, [r4, #4]
  pcb->remote_port = port;
 801aaa0:	8322      	strh	r2, [r4, #24]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801aaa2:	2800      	cmp	r0, #0
 801aaa4:	d042      	beq.n	801ab2c <tcp_connect+0xa8>
    netif = netif_get_by_index(pcb->netif_idx);
 801aaa6:	f7fe f927 	bl	8018cf8 <netif_get_by_index>
 801aaaa:	4605      	mov	r5, r0
  if (netif == NULL) {
 801aaac:	2d00      	cmp	r5, #0
 801aaae:	d062      	beq.n	801ab76 <tcp_connect+0xf2>
  if (ip_addr_isany(&pcb->local_ip)) {
 801aab0:	6823      	ldr	r3, [r4, #0]
 801aab2:	b90b      	cbnz	r3, 801aab8 <tcp_connect+0x34>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801aab4:	686b      	ldr	r3, [r5, #4]
 801aab6:	6023      	str	r3, [r4, #0]
  old_local_port = pcb->local_port;
 801aab8:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801aaba:	b927      	cbnz	r7, 801aac6 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801aabc:	f7fe fe4a 	bl	8019754 <tcp_new_port>
 801aac0:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801aac2:	2800      	cmp	r0, #0
 801aac4:	d054      	beq.n	801ab70 <tcp_connect+0xec>
  iss = tcp_next_iss(pcb);
 801aac6:	4620      	mov	r0, r4
 801aac8:	f7ff ff9e 	bl	801aa08 <tcp_next_iss>
  pcb->rcv_nxt = 0;
 801aacc:	2300      	movs	r3, #0
  pcb->lastack = iss - 1;
 801aace:	1e42      	subs	r2, r0, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801aad0:	4629      	mov	r1, r5
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801aad2:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 801abc4 <tcp_connect+0x140>
  pcb->snd_wnd = TCP_WND;
 801aad6:	f44f 6506 	mov.w	r5, #2144	; 0x860
  pcb->snd_nxt = iss;
 801aada:	6520      	str	r0, [r4, #80]	; 0x50
  pcb->mss = INITIAL_MSS;
 801aadc:	f44f 7006 	mov.w	r0, #536	; 0x218
  pcb->rcv_nxt = 0;
 801aae0:	6263      	str	r3, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801aae2:	62e3      	str	r3, [r4, #44]	; 0x2c
  pcb->lastack = iss - 1;
 801aae4:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801aae6:	f8c4 c028 	str.w	ip, [r4, #40]	; 0x28
  pcb->snd_wnd = TCP_WND;
 801aaea:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  pcb->mss = INITIAL_MSS;
 801aaee:	8660      	strh	r0, [r4, #50]	; 0x32
  pcb->snd_lbb = iss - 1;
 801aaf0:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801aaf4:	1d22      	adds	r2, r4, #4
 801aaf6:	f7ff ffa3 	bl	801aa40 <tcp_eff_send_mss_netif>
  pcb->cwnd = 1;
 801aafa:	2301      	movs	r3, #1
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801aafc:	8660      	strh	r0, [r4, #50]	; 0x32
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801aafe:	2102      	movs	r1, #2
 801ab00:	4620      	mov	r0, r4
  pcb->connected = connected;
 801ab02:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801ab06:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801ab0a:	f002 fb35 	bl	801d178 <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801ab0e:	4605      	mov	r5, r0
 801ab10:	b9f8      	cbnz	r0, 801ab52 <tcp_connect+0xce>
    pcb->state = SYN_SENT;
 801ab12:	2302      	movs	r3, #2
 801ab14:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801ab16:	b187      	cbz	r7, 801ab3a <tcp_connect+0xb6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801ab18:	4a22      	ldr	r2, [pc, #136]	; (801aba4 <tcp_connect+0x120>)
 801ab1a:	6813      	ldr	r3, [r2, #0]
 801ab1c:	42a3      	cmp	r3, r4
 801ab1e:	d00a      	beq.n	801ab36 <tcp_connect+0xb2>
 801ab20:	b15b      	cbz	r3, 801ab3a <tcp_connect+0xb6>
 801ab22:	68da      	ldr	r2, [r3, #12]
 801ab24:	42a2      	cmp	r2, r4
 801ab26:	d016      	beq.n	801ab56 <tcp_connect+0xd2>
 801ab28:	4613      	mov	r3, r2
 801ab2a:	e7f9      	b.n	801ab20 <tcp_connect+0x9c>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801ab2c:	1d20      	adds	r0, r4, #4
 801ab2e:	f005 fe87 	bl	8020840 <ip4_route>
 801ab32:	4605      	mov	r5, r0
 801ab34:	e7ba      	b.n	801aaac <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801ab36:	68e3      	ldr	r3, [r4, #12]
 801ab38:	6013      	str	r3, [r2, #0]
    TCP_REG_ACTIVE(pcb);
 801ab3a:	4b1b      	ldr	r3, [pc, #108]	; (801aba8 <tcp_connect+0x124>)
 801ab3c:	681a      	ldr	r2, [r3, #0]
 801ab3e:	601c      	str	r4, [r3, #0]
 801ab40:	60e2      	str	r2, [r4, #12]
 801ab42:	f003 f873 	bl	801dc2c <tcp_timer_needed>
 801ab46:	4b19      	ldr	r3, [pc, #100]	; (801abac <tcp_connect+0x128>)
 801ab48:	2201      	movs	r2, #1
    tcp_output(pcb);
 801ab4a:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801ab4c:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801ab4e:	f002 fd39 	bl	801d5c4 <tcp_output>
}
 801ab52:	4628      	mov	r0, r5
 801ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801ab56:	68e2      	ldr	r2, [r4, #12]
 801ab58:	60da      	str	r2, [r3, #12]
 801ab5a:	e7ee      	b.n	801ab3a <tcp_connect+0xb6>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801ab5c:	4b14      	ldr	r3, [pc, #80]	; (801abb0 <tcp_connect+0x12c>)
 801ab5e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801ab62:	4914      	ldr	r1, [pc, #80]	; (801abb4 <tcp_connect+0x130>)
 801ab64:	f06f 0509 	mvn.w	r5, #9
 801ab68:	4813      	ldr	r0, [pc, #76]	; (801abb8 <tcp_connect+0x134>)
 801ab6a:	f008 fabb 	bl	80230e4 <iprintf>
 801ab6e:	e7f0      	b.n	801ab52 <tcp_connect+0xce>
      return ERR_BUF;
 801ab70:	f06f 0501 	mvn.w	r5, #1
 801ab74:	e7ed      	b.n	801ab52 <tcp_connect+0xce>
    return ERR_RTE;
 801ab76:	f06f 0503 	mvn.w	r5, #3
 801ab7a:	e7ea      	b.n	801ab52 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801ab7c:	4b0c      	ldr	r3, [pc, #48]	; (801abb0 <tcp_connect+0x12c>)
 801ab7e:	f240 4236 	movw	r2, #1078	; 0x436
 801ab82:	490e      	ldr	r1, [pc, #56]	; (801abbc <tcp_connect+0x138>)
 801ab84:	f06f 050f 	mvn.w	r5, #15
 801ab88:	480b      	ldr	r0, [pc, #44]	; (801abb8 <tcp_connect+0x134>)
 801ab8a:	f008 faab 	bl	80230e4 <iprintf>
 801ab8e:	e7e0      	b.n	801ab52 <tcp_connect+0xce>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801ab90:	4b07      	ldr	r3, [pc, #28]	; (801abb0 <tcp_connect+0x12c>)
 801ab92:	f240 4235 	movw	r2, #1077	; 0x435
 801ab96:	490a      	ldr	r1, [pc, #40]	; (801abc0 <tcp_connect+0x13c>)
 801ab98:	f06f 050f 	mvn.w	r5, #15
 801ab9c:	4806      	ldr	r0, [pc, #24]	; (801abb8 <tcp_connect+0x134>)
 801ab9e:	f008 faa1 	bl	80230e4 <iprintf>
 801aba2:	e7d6      	b.n	801ab52 <tcp_connect+0xce>
 801aba4:	2002e4a4 	.word	0x2002e4a4
 801aba8:	2002e498 	.word	0x2002e498
 801abac:	2002e494 	.word	0x2002e494
 801abb0:	08040c04 	.word	0x08040c04
 801abb4:	080412a8 	.word	0x080412a8
 801abb8:	08029ba0 	.word	0x08029ba0
 801abbc:	0804128c 	.word	0x0804128c
 801abc0:	08041270 	.word	0x08041270
 801abc4:	08600860 	.word	0x08600860

0801abc8 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801abc8:	b308      	cbz	r0, 801ac0e <tcp_netif_ip_addr_changed+0x46>
{
 801abca:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801abcc:	6803      	ldr	r3, [r0, #0]
 801abce:	4604      	mov	r4, r0
 801abd0:	b903      	cbnz	r3, 801abd4 <tcp_netif_ip_addr_changed+0xc>
}
 801abd2:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801abd4:	4b0e      	ldr	r3, [pc, #56]	; (801ac10 <tcp_netif_ip_addr_changed+0x48>)
 801abd6:	460d      	mov	r5, r1
 801abd8:	6819      	ldr	r1, [r3, #0]
 801abda:	f7ff fc51 	bl	801a480 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801abde:	4b0d      	ldr	r3, [pc, #52]	; (801ac14 <tcp_netif_ip_addr_changed+0x4c>)
 801abe0:	4620      	mov	r0, r4
 801abe2:	6819      	ldr	r1, [r3, #0]
 801abe4:	f7ff fc4c 	bl	801a480 <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801abe8:	2d00      	cmp	r5, #0
 801abea:	d0f2      	beq.n	801abd2 <tcp_netif_ip_addr_changed+0xa>
 801abec:	682b      	ldr	r3, [r5, #0]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d0ef      	beq.n	801abd2 <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801abf2:	4b09      	ldr	r3, [pc, #36]	; (801ac18 <tcp_netif_ip_addr_changed+0x50>)
 801abf4:	681b      	ldr	r3, [r3, #0]
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	d0eb      	beq.n	801abd2 <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801abfa:	6819      	ldr	r1, [r3, #0]
 801abfc:	6822      	ldr	r2, [r4, #0]
 801abfe:	4291      	cmp	r1, r2
 801ac00:	d101      	bne.n	801ac06 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801ac02:	682a      	ldr	r2, [r5, #0]
 801ac04:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801ac06:	68db      	ldr	r3, [r3, #12]
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d1f6      	bne.n	801abfa <tcp_netif_ip_addr_changed+0x32>
}
 801ac0c:	bd38      	pop	{r3, r4, r5, pc}
 801ac0e:	4770      	bx	lr
 801ac10:	2002e498 	.word	0x2002e498
 801ac14:	2002e4a4 	.word	0x2002e4a4
 801ac18:	2002e4a0 	.word	0x2002e4a0

0801ac1c <tcp_free_ooseq>:
{
 801ac1c:	b538      	push	{r3, r4, r5, lr}
  if (pcb->ooseq) {
 801ac1e:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801ac20:	b13c      	cbz	r4, 801ac32 <tcp_free_ooseq+0x16>
 801ac22:	4605      	mov	r5, r0
    struct tcp_seg *next = seg->next;
 801ac24:	4620      	mov	r0, r4
 801ac26:	6824      	ldr	r4, [r4, #0]
    tcp_seg_free(seg);
 801ac28:	f7fe ff6c 	bl	8019b04 <tcp_seg_free>
  while (seg != NULL) {
 801ac2c:	2c00      	cmp	r4, #0
 801ac2e:	d1f9      	bne.n	801ac24 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801ac30:	676c      	str	r4, [r5, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801ac32:	bd38      	pop	{r3, r4, r5, pc}

0801ac34 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801ac34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801ac38:	4606      	mov	r6, r0
 801ac3a:	2800      	cmp	r0, #0
 801ac3c:	f000 8082 	beq.w	801ad44 <tcp_parseopt+0x110>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801ac40:	4b4b      	ldr	r3, [pc, #300]	; (801ad70 <tcp_parseopt+0x13c>)
 801ac42:	8818      	ldrh	r0, [r3, #0]
 801ac44:	2800      	cmp	r0, #0
 801ac46:	d039      	beq.n	801acbc <tcp_parseopt+0x88>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac48:	4a4a      	ldr	r2, [pc, #296]	; (801ad74 <tcp_parseopt+0x140>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac4a:	2300      	movs	r3, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac4c:	4d4a      	ldr	r5, [pc, #296]	; (801ad78 <tcp_parseopt+0x144>)
 801ac4e:	8817      	ldrh	r7, [r2, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac50:	4619      	mov	r1, r3
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ac52:	4c4a      	ldr	r4, [pc, #296]	; (801ad7c <tcp_parseopt+0x148>)
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac54:	461a      	mov	r2, r3
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ac56:	fa5f f887 	uxtb.w	r8, r7
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac5a:	f8df 9130 	ldr.w	r9, [pc, #304]	; 801ad8c <tcp_parseopt+0x158>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac5e:	682d      	ldr	r5, [r5, #0]
    return tcphdr_opt2[idx];
 801ac60:	ea6f 0e08 	mvn.w	lr, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801ac64:	f8d4 c000 	ldr.w	ip, [r4]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac68:	f8a9 3000 	strh.w	r3, [r9]
 801ac6c:	f102 0414 	add.w	r4, r2, #20
 801ac70:	4464      	add	r4, ip
 801ac72:	4290      	cmp	r0, r2
  u16_t optidx = tcp_optidx++;
 801ac74:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801ac78:	d91d      	bls.n	801acb6 <tcp_parseopt+0x82>
  u16_t optidx = tcp_optidx++;
 801ac7a:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac7c:	b1ad      	cbz	r5, 801acaa <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 801ac7e:	eb0e 0103 	add.w	r1, lr, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac82:	4297      	cmp	r7, r2
    return tcphdr_opt2[idx];
 801ac84:	b2c9      	uxtb	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac86:	d810      	bhi.n	801acaa <tcp_parseopt+0x76>
    return tcphdr_opt2[idx];
 801ac88:	5c69      	ldrb	r1, [r5, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801ac8a:	2901      	cmp	r1, #1
 801ac8c:	d010      	beq.n	801acb0 <tcp_parseopt+0x7c>
 801ac8e:	2902      	cmp	r1, #2
 801ac90:	d01a      	beq.n	801acc8 <tcp_parseopt+0x94>
 801ac92:	b1a9      	cbz	r1, 801acc0 <tcp_parseopt+0x8c>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ac94:	b10d      	cbz	r5, 801ac9a <tcp_parseopt+0x66>
 801ac96:	42bb      	cmp	r3, r7
 801ac98:	d244      	bcs.n	801ad24 <tcp_parseopt+0xf0>
    return opts[optidx];
 801ac9a:	4463      	add	r3, ip
 801ac9c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	d961      	bls.n	801ad66 <tcp_parseopt+0x132>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801aca2:	441a      	add	r2, r3
 801aca4:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801aca6:	2101      	movs	r1, #1
 801aca8:	e7e0      	b.n	801ac6c <tcp_parseopt+0x38>
    return opts[optidx];
 801acaa:	7821      	ldrb	r1, [r4, #0]
      switch (opt) {
 801acac:	2901      	cmp	r1, #1
 801acae:	d1ee      	bne.n	801ac8e <tcp_parseopt+0x5a>
 801acb0:	3401      	adds	r4, #1
  u16_t optidx = tcp_optidx++;
 801acb2:	461a      	mov	r2, r3
 801acb4:	e7dd      	b.n	801ac72 <tcp_parseopt+0x3e>
 801acb6:	b109      	cbz	r1, 801acbc <tcp_parseopt+0x88>
 801acb8:	f8a9 2000 	strh.w	r2, [r9]
      }
    }
  }
}
 801acbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801acc0:	f8a9 3000 	strh.w	r3, [r9]
 801acc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801acc8:	1c91      	adds	r1, r2, #2
 801acca:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801accc:	b10d      	cbz	r5, 801acd2 <tcp_parseopt+0x9e>
 801acce:	42bb      	cmp	r3, r7
 801acd0:	d223      	bcs.n	801ad1a <tcp_parseopt+0xe6>
    return opts[optidx];
 801acd2:	4463      	add	r3, ip
 801acd4:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801acd6:	2b04      	cmp	r3, #4
 801acd8:	d142      	bne.n	801ad60 <tcp_parseopt+0x12c>
 801acda:	1c4b      	adds	r3, r1, #1
 801acdc:	4283      	cmp	r3, r0
 801acde:	da3f      	bge.n	801ad60 <tcp_parseopt+0x12c>
  u16_t optidx = tcp_optidx++;
 801ace0:	1cd3      	adds	r3, r2, #3
 801ace2:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ace4:	2d00      	cmp	r5, #0
 801ace6:	d035      	beq.n	801ad54 <tcp_parseopt+0x120>
 801ace8:	428f      	cmp	r7, r1
 801acea:	d820      	bhi.n	801ad2e <tcp_parseopt+0xfa>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801acec:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801acf0:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801acf2:	429f      	cmp	r7, r3
    return tcphdr_opt2[idx];
 801acf4:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801acf6:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801acf8:	5c6c      	ldrb	r4, [r5, r1]
 801acfa:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801acfe:	d81e      	bhi.n	801ad3e <tcp_parseopt+0x10a>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ad00:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801ad04:	b2c9      	uxtb	r1, r1
 801ad06:	5c6b      	ldrb	r3, [r5, r1]
          mss |= tcp_get_next_optbyte();
 801ad08:	4323      	orrs	r3, r4
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801ad0a:	1e59      	subs	r1, r3, #1
 801ad0c:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801ad10:	bf28      	it	cs
 801ad12:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801ad16:	8673      	strh	r3, [r6, #50]	; 0x32
          break;
 801ad18:	e7c5      	b.n	801aca6 <tcp_parseopt+0x72>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ad1a:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ad1e:	b2db      	uxtb	r3, r3
 801ad20:	5ceb      	ldrb	r3, [r5, r3]
 801ad22:	e7d8      	b.n	801acd6 <tcp_parseopt+0xa2>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801ad24:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801ad28:	b2db      	uxtb	r3, r3
 801ad2a:	5ceb      	ldrb	r3, [r5, r3]
 801ad2c:	e7b7      	b.n	801ac9e <tcp_parseopt+0x6a>
    return opts[optidx];
 801ad2e:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 801ad30:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ad32:	429f      	cmp	r7, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ad34:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ad36:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ad38:	ea4f 2404 	mov.w	r4, r4, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ad3c:	d9e0      	bls.n	801ad00 <tcp_parseopt+0xcc>
    return opts[optidx];
 801ad3e:	4463      	add	r3, ip
 801ad40:	7d1b      	ldrb	r3, [r3, #20]
 801ad42:	e7e1      	b.n	801ad08 <tcp_parseopt+0xd4>
  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801ad44:	4b0e      	ldr	r3, [pc, #56]	; (801ad80 <tcp_parseopt+0x14c>)
 801ad46:	f240 727d 	movw	r2, #1917	; 0x77d
 801ad4a:	490e      	ldr	r1, [pc, #56]	; (801ad84 <tcp_parseopt+0x150>)
 801ad4c:	480e      	ldr	r0, [pc, #56]	; (801ad88 <tcp_parseopt+0x154>)
 801ad4e:	f008 f9c9 	bl	80230e4 <iprintf>
 801ad52:	e775      	b.n	801ac40 <tcp_parseopt+0xc>
    return opts[optidx];
 801ad54:	4461      	add	r1, ip
  u16_t optidx = tcp_optidx++;
 801ad56:	3204      	adds	r2, #4
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ad58:	7d0c      	ldrb	r4, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801ad5a:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801ad5c:	0224      	lsls	r4, r4, #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801ad5e:	e7ee      	b.n	801ad3e <tcp_parseopt+0x10a>
 801ad60:	f8a9 1000 	strh.w	r1, [r9]
 801ad64:	e7aa      	b.n	801acbc <tcp_parseopt+0x88>
  u16_t optidx = tcp_optidx++;
 801ad66:	3202      	adds	r2, #2
 801ad68:	f8a9 2000 	strh.w	r2, [r9]
 801ad6c:	e7a6      	b.n	801acbc <tcp_parseopt+0x88>
 801ad6e:	bf00      	nop
 801ad70:	2001aa6c 	.word	0x2001aa6c
 801ad74:	2001aa64 	.word	0x2001aa64
 801ad78:	2001aa68 	.word	0x2001aa68
 801ad7c:	2001aa60 	.word	0x2001aa60
 801ad80:	08041300 	.word	0x08041300
 801ad84:	08041334 	.word	0x08041334
 801ad88:	08029ba0 	.word	0x08029ba0
 801ad8c:	2001aa5c 	.word	0x2001aa5c

0801ad90 <tcp_oos_insert_segment>:
{
 801ad90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ad92:	4605      	mov	r5, r0
{
 801ad94:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ad96:	2800      	cmp	r0, #0
 801ad98:	d03e      	beq.n	801ae18 <tcp_oos_insert_segment+0x88>
  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801ad9a:	68eb      	ldr	r3, [r5, #12]
 801ad9c:	8998      	ldrh	r0, [r3, #12]
 801ad9e:	f7fc fa35 	bl	801720c <lwip_htons>
 801ada2:	07c2      	lsls	r2, r0, #31
 801ada4:	d432      	bmi.n	801ae0c <tcp_oos_insert_segment+0x7c>
 801ada6:	4e20      	ldr	r6, [pc, #128]	; (801ae28 <tcp_oos_insert_segment+0x98>)
 801ada8:	e005      	b.n	801adb6 <tcp_oos_insert_segment+0x26>
      next = next->next;
 801adaa:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801adac:	4620      	mov	r0, r4
 801adae:	f7fe fea9 	bl	8019b04 <tcp_seg_free>
    while (next &&
 801adb2:	463c      	mov	r4, r7
 801adb4:	b1ef      	cbz	r7, 801adf2 <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801adb6:	68e1      	ldr	r1, [r4, #12]
 801adb8:	8923      	ldrh	r3, [r4, #8]
 801adba:	6848      	ldr	r0, [r1, #4]
 801adbc:	6837      	ldr	r7, [r6, #0]
 801adbe:	892a      	ldrh	r2, [r5, #8]
 801adc0:	4403      	add	r3, r0
 801adc2:	443a      	add	r2, r7
 801adc4:	1ad3      	subs	r3, r2, r3
    while (next &&
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	db15      	blt.n	801adf6 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801adca:	8988      	ldrh	r0, [r1, #12]
 801adcc:	f7fc fa1e 	bl	801720c <lwip_htons>
 801add0:	07c3      	lsls	r3, r0, #31
 801add2:	d5ea      	bpl.n	801adaa <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801add4:	68eb      	ldr	r3, [r5, #12]
 801add6:	2001      	movs	r0, #1
 801add8:	899f      	ldrh	r7, [r3, #12]
 801adda:	f7fc fa17 	bl	801720c <lwip_htons>
 801adde:	68eb      	ldr	r3, [r5, #12]
 801ade0:	4338      	orrs	r0, r7
      next = next->next;
 801ade2:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801ade4:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801ade6:	4620      	mov	r0, r4
 801ade8:	f7fe fe8c 	bl	8019b04 <tcp_seg_free>
    while (next &&
 801adec:	463c      	mov	r4, r7
 801adee:	2f00      	cmp	r7, #0
 801adf0:	d1e1      	bne.n	801adb6 <tcp_oos_insert_segment+0x26>
  cseg->next = next;
 801adf2:	602c      	str	r4, [r5, #0]
}
 801adf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801adf6:	1a12      	subs	r2, r2, r0
    if (next &&
 801adf8:	2a00      	cmp	r2, #0
 801adfa:	ddfa      	ble.n	801adf2 <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801adfc:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801adfe:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801ae00:	b289      	uxth	r1, r1
 801ae02:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801ae04:	f7fe f962 	bl	80190cc <pbuf_realloc>
  cseg->next = next;
 801ae08:	602c      	str	r4, [r5, #0]
}
 801ae0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801ae0c:	4620      	mov	r0, r4
    next = NULL;
 801ae0e:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801ae10:	f7fe fe86 	bl	8019b20 <tcp_segs_free>
  cseg->next = next;
 801ae14:	602c      	str	r4, [r5, #0]
}
 801ae16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801ae18:	4b04      	ldr	r3, [pc, #16]	; (801ae2c <tcp_oos_insert_segment+0x9c>)
 801ae1a:	f240 421f 	movw	r2, #1055	; 0x41f
 801ae1e:	4904      	ldr	r1, [pc, #16]	; (801ae30 <tcp_oos_insert_segment+0xa0>)
 801ae20:	4804      	ldr	r0, [pc, #16]	; (801ae34 <tcp_oos_insert_segment+0xa4>)
 801ae22:	f008 f95f 	bl	80230e4 <iprintf>
 801ae26:	e7b8      	b.n	801ad9a <tcp_oos_insert_segment+0xa>
 801ae28:	2001aa58 	.word	0x2001aa58
 801ae2c:	08041300 	.word	0x08041300
 801ae30:	08041350 	.word	0x08041350
 801ae34:	08029ba0 	.word	0x08029ba0

0801ae38 <tcp_input_delayed_close>:
{
 801ae38:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ae3a:	4604      	mov	r4, r0
 801ae3c:	b1c8      	cbz	r0, 801ae72 <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801ae3e:	4b11      	ldr	r3, [pc, #68]	; (801ae84 <tcp_input_delayed_close+0x4c>)
 801ae40:	781b      	ldrb	r3, [r3, #0]
 801ae42:	f013 0310 	ands.w	r3, r3, #16
 801ae46:	d101      	bne.n	801ae4c <tcp_input_delayed_close+0x14>
  return 0;
 801ae48:	4618      	mov	r0, r3
}
 801ae4a:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801ae4c:	8b63      	ldrh	r3, [r4, #26]
 801ae4e:	06db      	lsls	r3, r3, #27
 801ae50:	d406      	bmi.n	801ae60 <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801ae52:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801ae56:	b11b      	cbz	r3, 801ae60 <tcp_input_delayed_close+0x28>
 801ae58:	f06f 010e 	mvn.w	r1, #14
 801ae5c:	6920      	ldr	r0, [r4, #16]
 801ae5e:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801ae60:	4621      	mov	r1, r4
 801ae62:	4809      	ldr	r0, [pc, #36]	; (801ae88 <tcp_input_delayed_close+0x50>)
 801ae64:	f7ff f9da 	bl	801a21c <tcp_pcb_remove>
    tcp_free(pcb);
 801ae68:	4620      	mov	r0, r4
 801ae6a:	f7fe fce7 	bl	801983c <tcp_free>
 801ae6e:	2001      	movs	r0, #1
}
 801ae70:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ae72:	4b06      	ldr	r3, [pc, #24]	; (801ae8c <tcp_input_delayed_close+0x54>)
 801ae74:	f240 225a 	movw	r2, #602	; 0x25a
 801ae78:	4905      	ldr	r1, [pc, #20]	; (801ae90 <tcp_input_delayed_close+0x58>)
 801ae7a:	4806      	ldr	r0, [pc, #24]	; (801ae94 <tcp_input_delayed_close+0x5c>)
 801ae7c:	f008 f932 	bl	80230e4 <iprintf>
 801ae80:	e7dd      	b.n	801ae3e <tcp_input_delayed_close+0x6>
 801ae82:	bf00      	nop
 801ae84:	2001aa54 	.word	0x2001aa54
 801ae88:	2002e498 	.word	0x2002e498
 801ae8c:	08041300 	.word	0x08041300
 801ae90:	08041378 	.word	0x08041378
 801ae94:	08029ba0 	.word	0x08029ba0

0801ae98 <tcp_free_acked_segments.isra.0>:
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	b083      	sub	sp, #12
 801ae9e:	9201      	str	r2, [sp, #4]
  while (seg_list != NULL &&
 801aea0:	2900      	cmp	r1, #0
 801aea2:	d03a      	beq.n	801af1a <tcp_free_acked_segments.isra.0+0x82>
 801aea4:	4607      	mov	r7, r0
 801aea6:	460c      	mov	r4, r1
 801aea8:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 801af68 <tcp_free_acked_segments.isra.0+0xd0>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801aeac:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 801af5c <tcp_free_acked_segments.isra.0+0xc4>
 801aeb0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801af6c <tcp_free_acked_segments.isra.0+0xd4>
 801aeb4:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 801af64 <tcp_free_acked_segments.isra.0+0xcc>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801aeb8:	68e3      	ldr	r3, [r4, #12]
 801aeba:	6858      	ldr	r0, [r3, #4]
 801aebc:	f7fc f9aa 	bl	8017214 <lwip_htonl>
 801aec0:	68e3      	ldr	r3, [r4, #12]
 801aec2:	4605      	mov	r5, r0
 801aec4:	8926      	ldrh	r6, [r4, #8]
 801aec6:	8998      	ldrh	r0, [r3, #12]
 801aec8:	f7fc f9a0 	bl	801720c <lwip_htons>
 801aecc:	f8d8 3000 	ldr.w	r3, [r8]
 801aed0:	f010 0003 	ands.w	r0, r0, #3
 801aed4:	eba5 0503 	sub.w	r5, r5, r3
 801aed8:	bf18      	it	ne
 801aeda:	2001      	movne	r0, #1
 801aedc:	4435      	add	r5, r6
 801aede:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801aee0:	2800      	cmp	r0, #0
 801aee2:	dc33      	bgt.n	801af4c <tcp_free_acked_segments.isra.0+0xb4>
    seg_list = seg_list->next;
 801aee4:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801aee8:	f7fe f948 	bl	801917c <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801aeec:	883b      	ldrh	r3, [r7, #0]
    clen = pbuf_clen(next->p);
 801aeee:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801aef0:	4298      	cmp	r0, r3
 801aef2:	d822      	bhi.n	801af3a <tcp_free_acked_segments.isra.0+0xa2>
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801aef4:	4a18      	ldr	r2, [pc, #96]	; (801af58 <tcp_free_acked_segments.isra.0+0xc0>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801aef6:	1b5d      	subs	r5, r3, r5
    tcp_seg_free(next);
 801aef8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801aefa:	8811      	ldrh	r1, [r2, #0]
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801aefc:	803d      	strh	r5, [r7, #0]
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801aefe:	8923      	ldrh	r3, [r4, #8]
 801af00:	4634      	mov	r4, r6
 801af02:	440b      	add	r3, r1
 801af04:	8013      	strh	r3, [r2, #0]
    tcp_seg_free(next);
 801af06:	f7fe fdfd 	bl	8019b04 <tcp_seg_free>
    if (pcb->snd_queuelen != 0) {
 801af0a:	883b      	ldrh	r3, [r7, #0]
 801af0c:	b11b      	cbz	r3, 801af16 <tcp_free_acked_segments.isra.0+0x7e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801af0e:	9b01      	ldr	r3, [sp, #4]
 801af10:	ea56 0503 	orrs.w	r5, r6, r3
 801af14:	d006      	beq.n	801af24 <tcp_free_acked_segments.isra.0+0x8c>
  while (seg_list != NULL &&
 801af16:	2e00      	cmp	r6, #0
 801af18:	d1ce      	bne.n	801aeb8 <tcp_free_acked_segments.isra.0+0x20>
 801af1a:	2500      	movs	r5, #0
}
 801af1c:	4628      	mov	r0, r5
 801af1e:	b003      	add	sp, #12
 801af20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801af24:	4b0d      	ldr	r3, [pc, #52]	; (801af5c <tcp_free_acked_segments.isra.0+0xc4>)
 801af26:	f240 4261 	movw	r2, #1121	; 0x461
 801af2a:	490d      	ldr	r1, [pc, #52]	; (801af60 <tcp_free_acked_segments.isra.0+0xc8>)
 801af2c:	480d      	ldr	r0, [pc, #52]	; (801af64 <tcp_free_acked_segments.isra.0+0xcc>)
 801af2e:	f008 f8d9 	bl	80230e4 <iprintf>
}
 801af32:	4628      	mov	r0, r5
 801af34:	b003      	add	sp, #12
 801af36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801af3a:	465b      	mov	r3, fp
 801af3c:	f240 4257 	movw	r2, #1111	; 0x457
 801af40:	4651      	mov	r1, sl
 801af42:	4648      	mov	r0, r9
 801af44:	f008 f8ce 	bl	80230e4 <iprintf>
 801af48:	883b      	ldrh	r3, [r7, #0]
 801af4a:	e7d3      	b.n	801aef4 <tcp_free_acked_segments.isra.0+0x5c>
 801af4c:	4625      	mov	r5, r4
}
 801af4e:	4628      	mov	r0, r5
 801af50:	b003      	add	sp, #12
 801af52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801af56:	bf00      	nop
 801af58:	2001aa4c 	.word	0x2001aa4c
 801af5c:	08041300 	.word	0x08041300
 801af60:	080413c8 	.word	0x080413c8
 801af64:	08029ba0 	.word	0x08029ba0
 801af68:	2001aa34 	.word	0x2001aa34
 801af6c:	080413a0 	.word	0x080413a0

0801af70 <tcp_receive>:
{
 801af70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801af74:	4604      	mov	r4, r0
 801af76:	2800      	cmp	r0, #0
 801af78:	f000 8205 	beq.w	801b386 <tcp_receive+0x416>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801af7c:	7d23      	ldrb	r3, [r4, #20]
 801af7e:	2b03      	cmp	r3, #3
 801af80:	f240 8124 	bls.w	801b1cc <tcp_receive+0x25c>
  if (flags & TCP_ACK) {
 801af84:	4bc2      	ldr	r3, [pc, #776]	; (801b290 <tcp_receive+0x320>)
 801af86:	781b      	ldrb	r3, [r3, #0]
 801af88:	06dd      	lsls	r5, r3, #27
 801af8a:	f100 809b 	bmi.w	801b0c4 <tcp_receive+0x154>
 801af8e:	4fc1      	ldr	r7, [pc, #772]	; (801b294 <tcp_receive+0x324>)
 801af90:	4ec1      	ldr	r6, [pc, #772]	; (801b298 <tcp_receive+0x328>)
 801af92:	8839      	ldrh	r1, [r7, #0]
 801af94:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801af96:	2900      	cmp	r1, #0
 801af98:	f000 8083 	beq.w	801b0a2 <tcp_receive+0x132>
 801af9c:	7d22      	ldrb	r2, [r4, #20]
 801af9e:	2a06      	cmp	r2, #6
 801afa0:	d87f      	bhi.n	801b0a2 <tcp_receive+0x132>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801afa2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801afa4:	eba0 0803 	sub.w	r8, r0, r3
 801afa8:	f1b8 0f01 	cmp.w	r8, #1
 801afac:	d405      	bmi.n	801afba <tcp_receive+0x4a>
 801afae:	1c42      	adds	r2, r0, #1
 801afb0:	1ad2      	subs	r2, r2, r3
 801afb2:	1a51      	subs	r1, r2, r1
 801afb4:	2900      	cmp	r1, #0
 801afb6:	f340 81f7 	ble.w	801b3a8 <tcp_receive+0x438>
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801afba:	1a1a      	subs	r2, r3, r0
 801afbc:	2a00      	cmp	r2, #0
 801afbe:	f2c0 81ee 	blt.w	801b39e <tcp_receive+0x42e>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801afc2:	f103 0c01 	add.w	ip, r3, #1
 801afc6:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801afc8:	ebac 0200 	sub.w	r2, ip, r0
 801afcc:	1a52      	subs	r2, r2, r1
 801afce:	2a00      	cmp	r2, #0
 801afd0:	dc3c      	bgt.n	801b04c <tcp_receive+0xdc>
      if (pcb->rcv_nxt == seqno) {
 801afd2:	4298      	cmp	r0, r3
 801afd4:	f000 8476 	beq.w	801b8c4 <tcp_receive+0x954>
        if (pcb->ooseq == NULL) {
 801afd8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801afda:	2d00      	cmp	r5, #0
 801afdc:	f000 837b 	beq.w	801b6d6 <tcp_receive+0x766>
            if (seqno == next->tcphdr->seqno) {
 801afe0:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801afe2:	f04f 0800 	mov.w	r8, #0
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801afe6:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801afea:	6842      	ldr	r2, [r0, #4]
 801afec:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801afee:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 801aff2:	d01a      	beq.n	801b02a <tcp_receive+0xba>
              if (prev == NULL) {
 801aff4:	f1b8 0f00 	cmp.w	r8, #0
 801aff8:	f000 8160 	beq.w	801b2bc <tcp_receive+0x34c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801affc:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801b000:	6849      	ldr	r1, [r1, #4]
 801b002:	ebae 0101 	sub.w	r1, lr, r1
 801b006:	2900      	cmp	r1, #0
 801b008:	db03      	blt.n	801b012 <tcp_receive+0xa2>
 801b00a:	f1b9 0f00 	cmp.w	r9, #0
 801b00e:	f340 836b 	ble.w	801b6e8 <tcp_receive+0x778>
              if (next->next == NULL &&
 801b012:	6829      	ldr	r1, [r5, #0]
 801b014:	46a8      	mov	r8, r5
 801b016:	2900      	cmp	r1, #0
 801b018:	f000 815c 	beq.w	801b2d4 <tcp_receive+0x364>
 801b01c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801b01e:	68e8      	ldr	r0, [r5, #12]
 801b020:	6842      	ldr	r2, [r0, #4]
 801b022:	429a      	cmp	r2, r3
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801b024:	ebac 0902 	sub.w	r9, ip, r2
            if (seqno == next->tcphdr->seqno) {
 801b028:	d1e4      	bne.n	801aff4 <tcp_receive+0x84>
              if (inseg.len > next->len) {
 801b02a:	489c      	ldr	r0, [pc, #624]	; (801b29c <tcp_receive+0x32c>)
 801b02c:	892b      	ldrh	r3, [r5, #8]
 801b02e:	8902      	ldrh	r2, [r0, #8]
 801b030:	429a      	cmp	r2, r3
 801b032:	d90b      	bls.n	801b04c <tcp_receive+0xdc>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b034:	f7fe fd90 	bl	8019b58 <tcp_seg_copy>
                if (cseg != NULL) {
 801b038:	b140      	cbz	r0, 801b04c <tcp_receive+0xdc>
                  if (prev != NULL) {
 801b03a:	f1b8 0f00 	cmp.w	r8, #0
 801b03e:	f000 8415 	beq.w	801b86c <tcp_receive+0x8fc>
                    prev->next = cseg;
 801b042:	f8c8 0000 	str.w	r0, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801b046:	4629      	mov	r1, r5
 801b048:	f7ff fea2 	bl	801ad90 <tcp_oos_insert_segment>
        tcp_send_empty_ack(pcb);
 801b04c:	4620      	mov	r0, r4
}
 801b04e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801b052:	f002 ba83 	b.w	801d55c <tcp_send_empty_ack>
      if (tcplen == 0) {
 801b056:	4f8f      	ldr	r7, [pc, #572]	; (801b294 <tcp_receive+0x324>)
 801b058:	8839      	ldrh	r1, [r7, #0]
 801b05a:	2900      	cmp	r1, #0
 801b05c:	f040 8104 	bne.w	801b268 <tcp_receive+0x2f8>
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b060:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b064:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801b066:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b068:	4448      	add	r0, r9
 801b06a:	4560      	cmp	r0, ip
 801b06c:	f040 80fc 	bne.w	801b268 <tcp_receive+0x2f8>
          if (pcb->rtime >= 0) {
 801b070:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801b072:	0400      	lsls	r0, r0, #16
 801b074:	f100 80f8 	bmi.w	801b268 <tcp_receive+0x2f8>
 801b078:	4590      	cmp	r8, r2
 801b07a:	f040 80f5 	bne.w	801b268 <tcp_receive+0x2f8>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801b07e:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801b082:	28ff      	cmp	r0, #255	; 0xff
 801b084:	f000 8393 	beq.w	801b7ae <tcp_receive+0x83e>
                ++pcb->dupacks;
 801b088:	3001      	adds	r0, #1
 801b08a:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801b08c:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801b08e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801b092:	f200 838c 	bhi.w	801b7ae <tcp_receive+0x83e>
              if (pcb->dupacks >= 3) {
 801b096:	f000 8396 	beq.w	801b7c6 <tcp_receive+0x856>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b09a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801b09c:	2800      	cmp	r0, #0
 801b09e:	f040 80b8 	bne.w	801b212 <tcp_receive+0x2a2>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801b0a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801b0a4:	1a99      	subs	r1, r3, r2
 801b0a6:	2900      	cmp	r1, #0
 801b0a8:	db06      	blt.n	801b0b8 <tcp_receive+0x148>
 801b0aa:	f1c2 0201 	rsb	r2, r2, #1
 801b0ae:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801b0b0:	1a52      	subs	r2, r2, r1
 801b0b2:	4413      	add	r3, r2
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	dd03      	ble.n	801b0c0 <tcp_receive+0x150>
      tcp_ack_now(pcb);
 801b0b8:	8b63      	ldrh	r3, [r4, #26]
 801b0ba:	f043 0302 	orr.w	r3, r3, #2
 801b0be:	8363      	strh	r3, [r4, #26]
}
 801b0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b0c4:	4e74      	ldr	r6, [pc, #464]	; (801b298 <tcp_receive+0x328>)
 801b0c6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801b0c8:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b0ca:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b0ce:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801b0d0:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b0d4:	2900      	cmp	r1, #0
 801b0d6:	f2c0 8081 	blt.w	801b1dc <tcp_receive+0x26c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b0da:	4d71      	ldr	r5, [pc, #452]	; (801b2a0 <tcp_receive+0x330>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b0dc:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b0de:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801b0e0:	f000 80c6 	beq.w	801b270 <tcp_receive+0x300>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b0e4:	4594      	cmp	ip, r2
 801b0e6:	f000 80cc 	beq.w	801b282 <tcp_receive+0x312>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801b0ea:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801b0ee:	eba2 0108 	sub.w	r1, r2, r8
 801b0f2:	2900      	cmp	r1, #0
 801b0f4:	ddaf      	ble.n	801b056 <tcp_receive+0xe6>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801b0f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801b0f8:	1ad3      	subs	r3, r2, r3
 801b0fa:	2b00      	cmp	r3, #0
 801b0fc:	dc7e      	bgt.n	801b1fc <tcp_receive+0x28c>
      if (pcb->flags & TF_INFR) {
 801b0fe:	8b63      	ldrh	r3, [r4, #26]
 801b100:	0758      	lsls	r0, r3, #29
 801b102:	d509      	bpl.n	801b118 <tcp_receive+0x1a8>
        tcp_clear_flags(pcb, TF_INFR);
 801b104:	f023 0304 	bic.w	r3, r3, #4
        pcb->cwnd = pcb->ssthresh;
 801b108:	f8b4 704a 	ldrh.w	r7, [r4, #74]	; 0x4a
        pcb->bytes_acked = 0;
 801b10c:	2000      	movs	r0, #0
        tcp_clear_flags(pcb, TF_INFR);
 801b10e:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801b110:	f8a4 7048 	strh.w	r7, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801b114:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b118:	f9b4 703c 	ldrsh.w	r7, [r4, #60]	; 0x3c
      pcb->nrtx = 0;
 801b11c:	2000      	movs	r0, #0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b11e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801b120:	6462      	str	r2, [r4, #68]	; 0x44
      if (pcb->state >= ESTABLISHED) {
 801b122:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b124:	eb03 03e7 	add.w	r3, r3, r7, asr #3
      pcb->nrtx = 0;
 801b128:	f8a4 0042 	strh.w	r0, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801b12c:	2a03      	cmp	r2, #3
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b12e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801b132:	d913      	bls.n	801b15c <tcp_receive+0x1ec>
        if (pcb->cwnd < pcb->ssthresh) {
 801b134:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801b138:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801b13a:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801b13e:	4293      	cmp	r3, r2
 801b140:	f200 81ca 	bhi.w	801b4d8 <tcp_receive+0x568>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b144:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 801b148:	4419      	add	r1, r3
 801b14a:	b289      	uxth	r1, r1
 801b14c:	428b      	cmp	r3, r1
 801b14e:	f200 82ac 	bhi.w	801b6aa <tcp_receive+0x73a>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801b152:	428a      	cmp	r2, r1
 801b154:	f240 82ab 	bls.w	801b6ae <tcp_receive+0x73e>
 801b158:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b15c:	f104 0766 	add.w	r7, r4, #102	; 0x66
 801b160:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801b164:	4638      	mov	r0, r7
 801b166:	f7ff fe97 	bl	801ae98 <tcp_free_acked_segments.isra.0>
 801b16a:	4602      	mov	r2, r0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b16c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801b16e:	4638      	mov	r0, r7
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801b170:	6722      	str	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b172:	f7ff fe91 	bl	801ae98 <tcp_free_acked_segments.isra.0>
      if (pcb->unacked == NULL) {
 801b176:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->polltmr = 0;
 801b178:	2100      	movs	r1, #0
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801b17a:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801b17c:	fab2 f382 	clz	r3, r2
      pcb->polltmr = 0;
 801b180:	7721      	strb	r1, [r4, #28]
      if (pcb->unacked == NULL) {
 801b182:	095b      	lsrs	r3, r3, #5
 801b184:	425b      	negs	r3, r3
 801b186:	8623      	strh	r3, [r4, #48]	; 0x30
      if (pcb->unsent == NULL) {
 801b188:	2800      	cmp	r0, #0
 801b18a:	f000 81a2 	beq.w	801b4d2 <tcp_receive+0x562>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b18e:	4945      	ldr	r1, [pc, #276]	; (801b2a4 <tcp_receive+0x334>)
 801b190:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801b194:	880f      	ldrh	r7, [r1, #0]
      if (pcb->flags & TF_RTO) {
 801b196:	8b61      	ldrh	r1, [r4, #26]
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801b198:	443b      	add	r3, r7
 801b19a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801b19e:	050b      	lsls	r3, r1, #20
 801b1a0:	f140 80f9 	bpl.w	801b396 <tcp_receive+0x426>
        if (pcb->unacked == NULL) {
 801b1a4:	2a00      	cmp	r2, #0
 801b1a6:	f000 81ac 	beq.w	801b502 <tcp_receive+0x592>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801b1aa:	68d3      	ldr	r3, [r2, #12]
 801b1ac:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801b1ae:	6858      	ldr	r0, [r3, #4]
 801b1b0:	f7fc f830 	bl	8017214 <lwip_htonl>
 801b1b4:	1a38      	subs	r0, r7, r0
 801b1b6:	2800      	cmp	r0, #0
 801b1b8:	f300 80ed 	bgt.w	801b396 <tcp_receive+0x426>
          tcp_clear_flags(pcb, TF_RTO);
 801b1bc:	8b62      	ldrh	r2, [r4, #26]
 801b1be:	4f35      	ldr	r7, [pc, #212]	; (801b294 <tcp_receive+0x324>)
 801b1c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801b1c4:	6833      	ldr	r3, [r6, #0]
 801b1c6:	8839      	ldrh	r1, [r7, #0]
 801b1c8:	8362      	strh	r2, [r4, #26]
 801b1ca:	e01d      	b.n	801b208 <tcp_receive+0x298>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801b1cc:	4b36      	ldr	r3, [pc, #216]	; (801b2a8 <tcp_receive+0x338>)
 801b1ce:	f240 427c 	movw	r2, #1148	; 0x47c
 801b1d2:	4936      	ldr	r1, [pc, #216]	; (801b2ac <tcp_receive+0x33c>)
 801b1d4:	4836      	ldr	r0, [pc, #216]	; (801b2b0 <tcp_receive+0x340>)
 801b1d6:	f007 ff85 	bl	80230e4 <iprintf>
 801b1da:	e6d3      	b.n	801af84 <tcp_receive+0x14>
 801b1dc:	4a35      	ldr	r2, [pc, #212]	; (801b2b4 <tcp_receive+0x344>)
 801b1de:	4d30      	ldr	r5, [pc, #192]	; (801b2a0 <tcp_receive+0x330>)
 801b1e0:	6811      	ldr	r1, [r2, #0]
 801b1e2:	682a      	ldr	r2, [r5, #0]
 801b1e4:	89c9      	ldrh	r1, [r1, #14]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b1e6:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801b1ea:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801b1ee:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801b1f0:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801b1f4:	bf38      	it	cc
 801b1f6:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801b1fa:	e776      	b.n	801b0ea <tcp_receive+0x17a>
      tcp_send_empty_ack(pcb);
 801b1fc:	4f25      	ldr	r7, [pc, #148]	; (801b294 <tcp_receive+0x324>)
 801b1fe:	4620      	mov	r0, r4
 801b200:	f002 f9ac 	bl	801d55c <tcp_send_empty_ack>
 801b204:	6833      	ldr	r3, [r6, #0]
 801b206:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801b208:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801b20a:	2800      	cmp	r0, #0
 801b20c:	f43f aec3 	beq.w	801af96 <tcp_receive+0x26>
 801b210:	682a      	ldr	r2, [r5, #0]
 801b212:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801b214:	1aaa      	subs	r2, r5, r2
 801b216:	2a00      	cmp	r2, #0
 801b218:	f6bf aebd 	bge.w	801af96 <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801b21c:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b220:	b280      	uxth	r0, r0
 801b222:	4a25      	ldr	r2, [pc, #148]	; (801b2b8 <tcp_receive+0x348>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801b224:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801b228:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801b22c:	ebae 020c 	sub.w	r2, lr, ip
 801b230:	1a12      	subs	r2, r2, r0
 801b232:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801b234:	4415      	add	r5, r2
      if (m < 0) {
 801b236:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801b23a:	b22d      	sxth	r5, r5
 801b23c:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801b23e:	d003      	beq.n	801b248 <tcp_receive+0x2d8>
        m = (s16_t) - m;
 801b240:	ebac 0c0e 	sub.w	ip, ip, lr
 801b244:	4460      	add	r0, ip
 801b246:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801b248:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->rttest = 0;
 801b24c:	f04f 0c00 	mov.w	ip, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801b250:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
      pcb->rttest = 0;
 801b254:	f8c4 c034 	str.w	ip, [r4, #52]	; 0x34
      pcb->sv = (s16_t)(pcb->sv + m);
 801b258:	4410      	add	r0, r2
 801b25a:	b280      	uxth	r0, r0
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b25c:	eb00 02e5 	add.w	r2, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801b260:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801b262:	f8a4 2040 	strh.w	r2, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801b266:	e696      	b.n	801af96 <tcp_receive+0x26>
        pcb->dupacks = 0;
 801b268:	2200      	movs	r2, #0
 801b26a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b26e:	e7cb      	b.n	801b208 <tcp_receive+0x298>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801b270:	ebac 0102 	sub.w	r1, ip, r2
 801b274:	2900      	cmp	r1, #0
 801b276:	f6bf af35 	bge.w	801b0e4 <tcp_receive+0x174>
 801b27a:	490e      	ldr	r1, [pc, #56]	; (801b2b4 <tcp_receive+0x344>)
 801b27c:	6809      	ldr	r1, [r1, #0]
 801b27e:	89c9      	ldrh	r1, [r1, #14]
 801b280:	e7b1      	b.n	801b1e6 <tcp_receive+0x276>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801b282:	490c      	ldr	r1, [pc, #48]	; (801b2b4 <tcp_receive+0x344>)
 801b284:	6809      	ldr	r1, [r1, #0]
 801b286:	89c9      	ldrh	r1, [r1, #14]
 801b288:	458e      	cmp	lr, r1
 801b28a:	f4bf af2e 	bcs.w	801b0ea <tcp_receive+0x17a>
 801b28e:	e7aa      	b.n	801b1e6 <tcp_receive+0x276>
 801b290:	2001aa38 	.word	0x2001aa38
 801b294:	2001aa6e 	.word	0x2001aa6e
 801b298:	2001aa58 	.word	0x2001aa58
 801b29c:	2001aa3c 	.word	0x2001aa3c
 801b2a0:	2001aa34 	.word	0x2001aa34
 801b2a4:	2001aa4c 	.word	0x2001aa4c
 801b2a8:	08041300 	.word	0x08041300
 801b2ac:	08041404 	.word	0x08041404
 801b2b0:	08029ba0 	.word	0x08029ba0
 801b2b4:	2001aa60 	.word	0x2001aa60
 801b2b8:	2002e49c 	.word	0x2002e49c
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801b2bc:	1a99      	subs	r1, r3, r2
 801b2be:	2900      	cmp	r1, #0
 801b2c0:	f6bf aea7 	bge.w	801b012 <tcp_receive+0xa2>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b2c4:	48a1      	ldr	r0, [pc, #644]	; (801b54c <tcp_receive+0x5dc>)
 801b2c6:	f7fe fc47 	bl	8019b58 <tcp_seg_copy>
                  if (cseg != NULL) {
 801b2ca:	2800      	cmp	r0, #0
 801b2cc:	f43f aebe 	beq.w	801b04c <tcp_receive+0xdc>
                    pcb->ooseq = cseg;
 801b2d0:	6760      	str	r0, [r4, #116]	; 0x74
 801b2d2:	e6b8      	b.n	801b046 <tcp_receive+0xd6>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801b2d4:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801b2d6:	2b00      	cmp	r3, #0
 801b2d8:	f77f aeb8 	ble.w	801b04c <tcp_receive+0xdc>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801b2dc:	8980      	ldrh	r0, [r0, #12]
 801b2de:	f7fb ff95 	bl	801720c <lwip_htons>
 801b2e2:	07c2      	lsls	r2, r0, #31
 801b2e4:	f53f aeb2 	bmi.w	801b04c <tcp_receive+0xdc>
                next->next = tcp_seg_copy(&inseg);
 801b2e8:	4898      	ldr	r0, [pc, #608]	; (801b54c <tcp_receive+0x5dc>)
 801b2ea:	f7fe fc35 	bl	8019b58 <tcp_seg_copy>
 801b2ee:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801b2f0:	2800      	cmp	r0, #0
 801b2f2:	f43f aeab 	beq.w	801b04c <tcp_receive+0xdc>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801b2f6:	68eb      	ldr	r3, [r5, #12]
 801b2f8:	892a      	ldrh	r2, [r5, #8]
 801b2fa:	6859      	ldr	r1, [r3, #4]
 801b2fc:	6833      	ldr	r3, [r6, #0]
 801b2fe:	440a      	add	r2, r1
 801b300:	1ad2      	subs	r2, r2, r3
 801b302:	2a00      	cmp	r2, #0
 801b304:	dd05      	ble.n	801b312 <tcp_receive+0x3a2>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b306:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801b308:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801b30a:	b299      	uxth	r1, r3
 801b30c:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801b30e:	f7fd fedd 	bl	80190cc <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801b312:	6832      	ldr	r2, [r6, #0]
 801b314:	883b      	ldrh	r3, [r7, #0]
 801b316:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801b318:	4413      	add	r3, r2
 801b31a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801b31c:	1a5b      	subs	r3, r3, r1
 801b31e:	1a9b      	subs	r3, r3, r2
 801b320:	2b00      	cmp	r3, #0
 801b322:	f77f ae93 	ble.w	801b04c <tcp_receive+0xdc>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801b326:	682b      	ldr	r3, [r5, #0]
 801b328:	68db      	ldr	r3, [r3, #12]
 801b32a:	8998      	ldrh	r0, [r3, #12]
 801b32c:	f7fb ff6e 	bl	801720c <lwip_htons>
 801b330:	07c3      	lsls	r3, r0, #31
 801b332:	f100 82b3 	bmi.w	801b89c <tcp_receive+0x92c>
 801b336:	682a      	ldr	r2, [r5, #0]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b338:	6830      	ldr	r0, [r6, #0]
 801b33a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801b33c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b33e:	1a09      	subs	r1, r1, r0
                    pbuf_realloc(next->next->p, next->next->len);
 801b340:	6850      	ldr	r0, [r2, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801b342:	4419      	add	r1, r3
 801b344:	b289      	uxth	r1, r1
 801b346:	8111      	strh	r1, [r2, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801b348:	f7fd fec0 	bl	80190cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801b34c:	682b      	ldr	r3, [r5, #0]
 801b34e:	68da      	ldr	r2, [r3, #12]
 801b350:	891d      	ldrh	r5, [r3, #8]
 801b352:	8990      	ldrh	r0, [r2, #12]
 801b354:	f7fb ff5a 	bl	801720c <lwip_htons>
 801b358:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b35c:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801b35e:	bf18      	it	ne
 801b360:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b362:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801b364:	6a60      	ldr	r0, [r4, #36]	; 0x24
                    tcplen = TCP_TCPLEN(next->next);
 801b366:	442b      	add	r3, r5
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b368:	4402      	add	r2, r0
                    tcplen = TCP_TCPLEN(next->next);
 801b36a:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b36c:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801b36e:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b370:	4291      	cmp	r1, r2
 801b372:	f43f ae6b 	beq.w	801b04c <tcp_receive+0xdc>
 801b376:	4b76      	ldr	r3, [pc, #472]	; (801b550 <tcp_receive+0x5e0>)
 801b378:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801b37c:	4975      	ldr	r1, [pc, #468]	; (801b554 <tcp_receive+0x5e4>)
 801b37e:	4876      	ldr	r0, [pc, #472]	; (801b558 <tcp_receive+0x5e8>)
 801b380:	f007 feb0 	bl	80230e4 <iprintf>
 801b384:	e662      	b.n	801b04c <tcp_receive+0xdc>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801b386:	4b72      	ldr	r3, [pc, #456]	; (801b550 <tcp_receive+0x5e0>)
 801b388:	f240 427b 	movw	r2, #1147	; 0x47b
 801b38c:	4973      	ldr	r1, [pc, #460]	; (801b55c <tcp_receive+0x5ec>)
 801b38e:	4872      	ldr	r0, [pc, #456]	; (801b558 <tcp_receive+0x5e8>)
 801b390:	f007 fea8 	bl	80230e4 <iprintf>
 801b394:	e5f2      	b.n	801af7c <tcp_receive+0xc>
 801b396:	4f72      	ldr	r7, [pc, #456]	; (801b560 <tcp_receive+0x5f0>)
 801b398:	6833      	ldr	r3, [r6, #0]
 801b39a:	8839      	ldrh	r1, [r7, #0]
 801b39c:	e734      	b.n	801b208 <tcp_receive+0x298>
        tcp_ack_now(pcb);
 801b39e:	8b63      	ldrh	r3, [r4, #26]
 801b3a0:	f043 0302 	orr.w	r3, r3, #2
 801b3a4:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b3a6:	e651      	b.n	801b04c <tcp_receive+0xdc>
      struct pbuf *p = inseg.p;
 801b3a8:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 801b54c <tcp_receive+0x5dc>
 801b3ac:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b3b0:	2d00      	cmp	r5, #0
 801b3b2:	f000 816b 	beq.w	801b68c <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b3b6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801b3ba:	4598      	cmp	r8, r3
 801b3bc:	f200 80be 	bhi.w	801b53c <tcp_receive+0x5cc>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b3c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801b3c4:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b3c8:	891b      	ldrh	r3, [r3, #8]
 801b3ca:	4543      	cmp	r3, r8
 801b3cc:	f0c0 80ab 	bcc.w	801b526 <tcp_receive+0x5b6>
      inseg.len -= off;
 801b3d0:	f8b9 2008 	ldrh.w	r2, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b3d4:	eba3 0308 	sub.w	r3, r3, r8
      while (p->len < off) {
 801b3d8:	8969      	ldrh	r1, [r5, #10]
      inseg.len -= off;
 801b3da:	eba2 0208 	sub.w	r2, r2, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801b3de:	b29b      	uxth	r3, r3
      while (p->len < off) {
 801b3e0:	4541      	cmp	r1, r8
      inseg.len -= off;
 801b3e2:	f8a9 2008 	strh.w	r2, [r9, #8]
      while (p->len < off) {
 801b3e6:	d20a      	bcs.n	801b3fe <tcp_receive+0x48e>
        p->len = 0;
 801b3e8:	2200      	movs	r2, #0
        off -= p->len;
 801b3ea:	eba8 0101 	sub.w	r1, r8, r1
        p->len = 0;
 801b3ee:	816a      	strh	r2, [r5, #10]
        p->tot_len = new_tot_len;
 801b3f0:	812b      	strh	r3, [r5, #8]
        p = p->next;
 801b3f2:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801b3f4:	fa1f f881 	uxth.w	r8, r1
      while (p->len < off) {
 801b3f8:	8969      	ldrh	r1, [r5, #10]
 801b3fa:	4541      	cmp	r1, r8
 801b3fc:	d3f5      	bcc.n	801b3ea <tcp_receive+0x47a>
      pbuf_remove_header(p, off);
 801b3fe:	4641      	mov	r1, r8
 801b400:	4628      	mov	r0, r5
 801b402:	f7fd fd1b 	bl	8018e3c <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b408:	f8d9 100c 	ldr.w	r1, [r9, #12]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b40c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801b40e:	6033      	str	r3, [r6, #0]
 801b410:	604b      	str	r3, [r1, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801b412:	2a00      	cmp	r2, #0
 801b414:	f43f ae1a 	beq.w	801b04c <tcp_receive+0xdc>
        tcplen = TCP_TCPLEN(&inseg);
 801b418:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b41c:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801b420:	8998      	ldrh	r0, [r3, #12]
 801b422:	f7fb fef3 	bl	801720c <lwip_htons>
 801b426:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801b42a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801b42c:	bf18      	it	ne
 801b42e:	2301      	movne	r3, #1
 801b430:	442b      	add	r3, r5
 801b432:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801b434:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801b436:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801b438:	f0c0 8180 	bcc.w	801b73c <tcp_receive+0x7cc>
        if (pcb->ooseq != NULL) {
 801b43c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801b43e:	2b00      	cmp	r3, #0
 801b440:	f000 809b 	beq.w	801b57a <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b444:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b448:	8998      	ldrh	r0, [r3, #12]
 801b44a:	f7fb fedf 	bl	801720c <lwip_htons>
 801b44e:	07c0      	lsls	r0, r0, #31
 801b450:	f100 8090 	bmi.w	801b574 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801b454:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801b456:	b955      	cbnz	r5, 801b46e <tcp_receive+0x4fe>
 801b458:	e1f3      	b.n	801b842 <tcp_receive+0x8d2>
              next = next->next;
 801b45a:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801b45e:	4628      	mov	r0, r5
 801b460:	f7fe fb50 	bl	8019b04 <tcp_seg_free>
            while (next &&
 801b464:	4645      	mov	r5, r8
 801b466:	f1b8 0f00 	cmp.w	r8, #0
 801b46a:	f000 81ea 	beq.w	801b842 <tcp_receive+0x8d2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801b46e:	68e8      	ldr	r0, [r5, #12]
 801b470:	892b      	ldrh	r3, [r5, #8]
 801b472:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801b476:	883a      	ldrh	r2, [r7, #0]
 801b478:	f8d6 e000 	ldr.w	lr, [r6]
 801b47c:	4463      	add	r3, ip
 801b47e:	eb02 010e 	add.w	r1, r2, lr
 801b482:	1acb      	subs	r3, r1, r3
            while (next &&
 801b484:	2b00      	cmp	r3, #0
 801b486:	f2c0 81a4 	blt.w	801b7d2 <tcp_receive+0x862>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b48a:	8980      	ldrh	r0, [r0, #12]
 801b48c:	f7fb febe 	bl	801720c <lwip_htons>
 801b490:	07c1      	lsls	r1, r0, #31
 801b492:	d5e2      	bpl.n	801b45a <tcp_receive+0x4ea>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801b494:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b498:	8998      	ldrh	r0, [r3, #12]
 801b49a:	f7fb feb7 	bl	801720c <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801b49e:	0782      	lsls	r2, r0, #30
 801b4a0:	d4db      	bmi.n	801b45a <tcp_receive+0x4ea>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801b4a2:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b4a6:	2001      	movs	r0, #1
 801b4a8:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801b4ac:	f7fb feae 	bl	801720c <lwip_htons>
 801b4b0:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b4b4:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801b4b8:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801b4bc:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801b4be:	b280      	uxth	r0, r0
 801b4c0:	f7fb fea4 	bl	801720c <lwip_htons>
 801b4c4:	f010 0003 	ands.w	r0, r0, #3
 801b4c8:	bf18      	it	ne
 801b4ca:	2001      	movne	r0, #1
 801b4cc:	4440      	add	r0, r8
 801b4ce:	8038      	strh	r0, [r7, #0]
 801b4d0:	e7c3      	b.n	801b45a <tcp_receive+0x4ea>
        pcb->unsent_oversize = 0;
 801b4d2:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801b4d6:	e65a      	b.n	801b18e <tcp_receive+0x21e>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801b4d8:	8b60      	ldrh	r0, [r4, #26]
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801b4da:	8e63      	ldrh	r3, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801b4dc:	f410 6f00 	tst.w	r0, #2048	; 0x800
 801b4e0:	bf14      	ite	ne
 801b4e2:	2001      	movne	r0, #1
 801b4e4:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801b4e6:	fb13 f300 	smulbb	r3, r3, r0
 801b4ea:	b29b      	uxth	r3, r3
          TCP_WND_INC(pcb->cwnd, increase);
 801b4ec:	428b      	cmp	r3, r1
 801b4ee:	bf94      	ite	ls
 801b4f0:	18d1      	addls	r1, r2, r3
 801b4f2:	1851      	addhi	r1, r2, r1
 801b4f4:	b289      	uxth	r1, r1
 801b4f6:	428a      	cmp	r2, r1
 801b4f8:	f200 80d0 	bhi.w	801b69c <tcp_receive+0x72c>
 801b4fc:	f8a4 1048 	strh.w	r1, [r4, #72]	; 0x48
 801b500:	e62c      	b.n	801b15c <tcp_receive+0x1ec>
          if ((pcb->unsent == NULL) ||
 801b502:	b148      	cbz	r0, 801b518 <tcp_receive+0x5a8>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801b504:	68c3      	ldr	r3, [r0, #12]
 801b506:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801b508:	6858      	ldr	r0, [r3, #4]
 801b50a:	f7fb fe83 	bl	8017214 <lwip_htonl>
 801b50e:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801b510:	2800      	cmp	r0, #0
 801b512:	f73f af40 	bgt.w	801b396 <tcp_receive+0x426>
 801b516:	8b61      	ldrh	r1, [r4, #26]
            tcp_clear_flags(pcb, TF_RTO);
 801b518:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 801b51c:	4f10      	ldr	r7, [pc, #64]	; (801b560 <tcp_receive+0x5f0>)
 801b51e:	6833      	ldr	r3, [r6, #0]
 801b520:	8361      	strh	r1, [r4, #26]
 801b522:	8839      	ldrh	r1, [r7, #0]
 801b524:	e670      	b.n	801b208 <tcp_receive+0x298>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801b526:	4b0a      	ldr	r3, [pc, #40]	; (801b550 <tcp_receive+0x5e0>)
 801b528:	f240 5297 	movw	r2, #1431	; 0x597
 801b52c:	490d      	ldr	r1, [pc, #52]	; (801b564 <tcp_receive+0x5f4>)
 801b52e:	480a      	ldr	r0, [pc, #40]	; (801b558 <tcp_receive+0x5e8>)
 801b530:	f007 fdd8 	bl	80230e4 <iprintf>
 801b534:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b538:	891b      	ldrh	r3, [r3, #8]
 801b53a:	e749      	b.n	801b3d0 <tcp_receive+0x460>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801b53c:	4b04      	ldr	r3, [pc, #16]	; (801b550 <tcp_receive+0x5e0>)
 801b53e:	f240 5295 	movw	r2, #1429	; 0x595
 801b542:	4909      	ldr	r1, [pc, #36]	; (801b568 <tcp_receive+0x5f8>)
 801b544:	4804      	ldr	r0, [pc, #16]	; (801b558 <tcp_receive+0x5e8>)
 801b546:	f007 fdcd 	bl	80230e4 <iprintf>
 801b54a:	e739      	b.n	801b3c0 <tcp_receive+0x450>
 801b54c:	2001aa3c 	.word	0x2001aa3c
 801b550:	08041300 	.word	0x08041300
 801b554:	08041450 	.word	0x08041450
 801b558:	08029ba0 	.word	0x08029ba0
 801b55c:	080413e8 	.word	0x080413e8
 801b560:	2001aa6e 	.word	0x2001aa6e
 801b564:	08041440 	.word	0x08041440
 801b568:	08041430 	.word	0x08041430
              pcb->ooseq = pcb->ooseq->next;
 801b56c:	6803      	ldr	r3, [r0, #0]
 801b56e:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801b570:	f7fe fac8 	bl	8019b04 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801b574:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801b576:	2800      	cmp	r0, #0
 801b578:	d1f8      	bne.n	801b56c <tcp_receive+0x5fc>
 801b57a:	883a      	ldrh	r2, [r7, #0]
 801b57c:	6831      	ldr	r1, [r6, #0]
 801b57e:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b580:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801b582:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b584:	4293      	cmp	r3, r2
 801b586:	f0c0 80cf 	bcc.w	801b728 <tcp_receive+0x7b8>
        pcb->rcv_wnd -= tcplen;
 801b58a:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801b58c:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801b58e:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801b590:	f7fe fa46 	bl	8019a20 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801b594:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801b598:	891a      	ldrh	r2, [r3, #8]
 801b59a:	b122      	cbz	r2, 801b5a6 <tcp_receive+0x636>
          recv_data = inseg.p;
 801b59c:	49b5      	ldr	r1, [pc, #724]	; (801b874 <tcp_receive+0x904>)
          inseg.p = NULL;
 801b59e:	2200      	movs	r2, #0
          recv_data = inseg.p;
 801b5a0:	600b      	str	r3, [r1, #0]
          inseg.p = NULL;
 801b5a2:	f8c9 2004 	str.w	r2, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b5a6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b5aa:	8998      	ldrh	r0, [r3, #12]
 801b5ac:	f7fb fe2e 	bl	801720c <lwip_htons>
 801b5b0:	07c5      	lsls	r5, r0, #31
 801b5b2:	d504      	bpl.n	801b5be <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801b5b4:	4ab0      	ldr	r2, [pc, #704]	; (801b878 <tcp_receive+0x908>)
 801b5b6:	7813      	ldrb	r3, [r2, #0]
 801b5b8:	f043 0320 	orr.w	r3, r3, #32
 801b5bc:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801b5be:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801b5c0:	2d00      	cmp	r5, #0
 801b5c2:	d07f      	beq.n	801b6c4 <tcp_receive+0x754>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b5c4:	f8df 92b8 	ldr.w	r9, [pc, #696]	; 801b880 <tcp_receive+0x910>
 801b5c8:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 801b898 <tcp_receive+0x928>
 801b5cc:	4fab      	ldr	r7, [pc, #684]	; (801b87c <tcp_receive+0x90c>)
 801b5ce:	e033      	b.n	801b638 <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b5d0:	68eb      	ldr	r3, [r5, #12]
 801b5d2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801b5d6:	8998      	ldrh	r0, [r3, #12]
 801b5d8:	f7fb fe18 	bl	801720c <lwip_htons>
 801b5dc:	f010 0303 	ands.w	r3, r0, #3
 801b5e0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801b5e2:	4620      	mov	r0, r4
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801b5e4:	bf18      	it	ne
 801b5e6:	2301      	movne	r3, #1
 801b5e8:	4453      	add	r3, sl
 801b5ea:	1ad3      	subs	r3, r2, r3
 801b5ec:	8523      	strh	r3, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801b5ee:	f7fe fa17 	bl	8019a20 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801b5f2:	6869      	ldr	r1, [r5, #4]
 801b5f4:	890b      	ldrh	r3, [r1, #8]
 801b5f6:	b13b      	cbz	r3, 801b608 <tcp_receive+0x698>
            if (recv_data) {
 801b5f8:	4b9e      	ldr	r3, [pc, #632]	; (801b874 <tcp_receive+0x904>)
 801b5fa:	6818      	ldr	r0, [r3, #0]
 801b5fc:	2800      	cmp	r0, #0
 801b5fe:	d052      	beq.n	801b6a6 <tcp_receive+0x736>
              pbuf_cat(recv_data, cseg->p);
 801b600:	f7fd fdda 	bl	80191b8 <pbuf_cat>
            cseg->p = NULL;
 801b604:	2300      	movs	r3, #0
 801b606:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801b608:	68eb      	ldr	r3, [r5, #12]
 801b60a:	8998      	ldrh	r0, [r3, #12]
 801b60c:	f7fb fdfe 	bl	801720c <lwip_htons>
 801b610:	07c0      	lsls	r0, r0, #31
 801b612:	d509      	bpl.n	801b628 <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801b614:	4a98      	ldr	r2, [pc, #608]	; (801b878 <tcp_receive+0x908>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b616:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801b618:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b61a:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801b61c:	f043 0320 	orr.w	r3, r3, #32
 801b620:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801b622:	d101      	bne.n	801b628 <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801b624:	2307      	movs	r3, #7
 801b626:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801b628:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801b62a:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801b62c:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801b62e:	f7fe fa69 	bl	8019b04 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801b632:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801b634:	2d00      	cmp	r5, #0
 801b636:	d045      	beq.n	801b6c4 <tcp_receive+0x754>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b638:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801b63a:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801b63c:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801b63e:	428b      	cmp	r3, r1
 801b640:	d140      	bne.n	801b6c4 <tcp_receive+0x754>
          seqno = pcb->ooseq->tcphdr->seqno;
 801b642:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b644:	8990      	ldrh	r0, [r2, #12]
 801b646:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801b64a:	f7fb fddf 	bl	801720c <lwip_htons>
 801b64e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801b650:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b654:	68ea      	ldr	r2, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b656:	4453      	add	r3, sl
 801b658:	bf18      	it	ne
 801b65a:	2001      	movne	r0, #1
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b65c:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b660:	4418      	add	r0, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b662:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801b666:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801b668:	8990      	ldrh	r0, [r2, #12]
 801b66a:	f7fb fdcf 	bl	801720c <lwip_htons>
 801b66e:	f010 0003 	ands.w	r0, r0, #3
 801b672:	bf18      	it	ne
 801b674:	2001      	movne	r0, #1
 801b676:	4458      	add	r0, fp
 801b678:	4582      	cmp	sl, r0
 801b67a:	d2a9      	bcs.n	801b5d0 <tcp_receive+0x660>
 801b67c:	464b      	mov	r3, r9
 801b67e:	f240 622b 	movw	r2, #1579	; 0x62b
 801b682:	4641      	mov	r1, r8
 801b684:	4638      	mov	r0, r7
 801b686:	f007 fd2d 	bl	80230e4 <iprintf>
 801b68a:	e7a1      	b.n	801b5d0 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801b68c:	4b7c      	ldr	r3, [pc, #496]	; (801b880 <tcp_receive+0x910>)
 801b68e:	f240 5294 	movw	r2, #1428	; 0x594
 801b692:	497c      	ldr	r1, [pc, #496]	; (801b884 <tcp_receive+0x914>)
 801b694:	4879      	ldr	r0, [pc, #484]	; (801b87c <tcp_receive+0x90c>)
 801b696:	f007 fd25 	bl	80230e4 <iprintf>
 801b69a:	e68c      	b.n	801b3b6 <tcp_receive+0x446>
          TCP_WND_INC(pcb->cwnd, increase);
 801b69c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801b6a0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801b6a4:	e55a      	b.n	801b15c <tcp_receive+0x1ec>
              recv_data = cseg->p;
 801b6a6:	6019      	str	r1, [r3, #0]
 801b6a8:	e7ac      	b.n	801b604 <tcp_receive+0x694>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801b6aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b6ae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b6b0:	1a89      	subs	r1, r1, r2
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b6b2:	4413      	add	r3, r2
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801b6b4:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b6b8:	b29b      	uxth	r3, r3
 801b6ba:	429a      	cmp	r2, r3
 801b6bc:	d8ee      	bhi.n	801b69c <tcp_receive+0x72c>
 801b6be:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801b6c2:	e54b      	b.n	801b15c <tcp_receive+0x1ec>
        tcp_ack(pcb);
 801b6c4:	8b63      	ldrh	r3, [r4, #26]
 801b6c6:	07d9      	lsls	r1, r3, #31
 801b6c8:	d50a      	bpl.n	801b6e0 <tcp_receive+0x770>
 801b6ca:	f023 0301 	bic.w	r3, r3, #1
 801b6ce:	f043 0302 	orr.w	r3, r3, #2
 801b6d2:	8363      	strh	r3, [r4, #26]
 801b6d4:	e4f4      	b.n	801b0c0 <tcp_receive+0x150>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801b6d6:	486c      	ldr	r0, [pc, #432]	; (801b888 <tcp_receive+0x918>)
 801b6d8:	f7fe fa3e 	bl	8019b58 <tcp_seg_copy>
 801b6dc:	6760      	str	r0, [r4, #116]	; 0x74
 801b6de:	e4b5      	b.n	801b04c <tcp_receive+0xdc>
        tcp_ack(pcb);
 801b6e0:	f043 0301 	orr.w	r3, r3, #1
 801b6e4:	8363      	strh	r3, [r4, #26]
 801b6e6:	e4eb      	b.n	801b0c0 <tcp_receive+0x150>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801b6e8:	4867      	ldr	r0, [pc, #412]	; (801b888 <tcp_receive+0x918>)
 801b6ea:	f7fe fa35 	bl	8019b58 <tcp_seg_copy>
                  if (cseg != NULL) {
 801b6ee:	4607      	mov	r7, r0
 801b6f0:	2800      	cmp	r0, #0
 801b6f2:	f43f acab 	beq.w	801b04c <tcp_receive+0xdc>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801b6f6:	f8d8 200c 	ldr.w	r2, [r8, #12]
 801b6fa:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801b6fe:	6851      	ldr	r1, [r2, #4]
 801b700:	6832      	ldr	r2, [r6, #0]
 801b702:	440b      	add	r3, r1
 801b704:	1a9b      	subs	r3, r3, r2
 801b706:	2b00      	cmp	r3, #0
 801b708:	dd07      	ble.n	801b71a <tcp_receive+0x7aa>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b70a:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801b70c:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801b710:	b291      	uxth	r1, r2
 801b712:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801b716:	f7fd fcd9 	bl	80190cc <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801b71a:	4629      	mov	r1, r5
 801b71c:	4638      	mov	r0, r7
                    prev->next = cseg;
 801b71e:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801b722:	f7ff fb35 	bl	801ad90 <tcp_oos_insert_segment>
 801b726:	e491      	b.n	801b04c <tcp_receive+0xdc>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801b728:	4b55      	ldr	r3, [pc, #340]	; (801b880 <tcp_receive+0x910>)
 801b72a:	f240 6207 	movw	r2, #1543	; 0x607
 801b72e:	4957      	ldr	r1, [pc, #348]	; (801b88c <tcp_receive+0x91c>)
 801b730:	4852      	ldr	r0, [pc, #328]	; (801b87c <tcp_receive+0x90c>)
 801b732:	f007 fcd7 	bl	80230e4 <iprintf>
 801b736:	883a      	ldrh	r2, [r7, #0]
 801b738:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801b73a:	e726      	b.n	801b58a <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b73c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b740:	8998      	ldrh	r0, [r3, #12]
 801b742:	f7fb fd63 	bl	801720c <lwip_htons>
 801b746:	07c2      	lsls	r2, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b748:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801b74c:	d47d      	bmi.n	801b84a <tcp_receive+0x8da>
 801b74e:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801b750:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801b752:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b756:	f7fb fd59 	bl	801720c <lwip_htons>
 801b75a:	0785      	lsls	r5, r0, #30
            inseg.len -= 1;
 801b75c:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b760:	d503      	bpl.n	801b76a <tcp_receive+0x7fa>
            inseg.len -= 1;
 801b762:	3901      	subs	r1, #1
 801b764:	b289      	uxth	r1, r1
 801b766:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801b76a:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b76e:	f7fd fcad 	bl	80190cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801b772:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b776:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801b77a:	8998      	ldrh	r0, [r3, #12]
 801b77c:	f7fb fd46 	bl	801720c <lwip_htons>
 801b780:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b784:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801b786:	bf18      	it	ne
 801b788:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b78a:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801b78c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801b78e:	442b      	add	r3, r5
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b790:	4401      	add	r1, r0
          tcplen = TCP_TCPLEN(&inseg);
 801b792:	b29b      	uxth	r3, r3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b794:	441a      	add	r2, r3
          tcplen = TCP_TCPLEN(&inseg);
 801b796:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801b798:	428a      	cmp	r2, r1
 801b79a:	f43f ae4f 	beq.w	801b43c <tcp_receive+0x4cc>
 801b79e:	4b38      	ldr	r3, [pc, #224]	; (801b880 <tcp_receive+0x910>)
 801b7a0:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801b7a4:	493a      	ldr	r1, [pc, #232]	; (801b890 <tcp_receive+0x920>)
 801b7a6:	4835      	ldr	r0, [pc, #212]	; (801b87c <tcp_receive+0x90c>)
 801b7a8:	f007 fc9c 	bl	80230e4 <iprintf>
 801b7ac:	e646      	b.n	801b43c <tcp_receive+0x4cc>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801b7ae:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801b7b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801b7b6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801b7b8:	4413      	add	r3, r2
 801b7ba:	b29b      	uxth	r3, r3
 801b7bc:	429a      	cmp	r2, r3
 801b7be:	bf88      	it	hi
 801b7c0:	460b      	movhi	r3, r1
 801b7c2:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801b7c6:	4620      	mov	r0, r4
 801b7c8:	f001 fe42 	bl	801d450 <tcp_rexmit_fast>
      if (!found_dupack) {
 801b7cc:	8839      	ldrh	r1, [r7, #0]
 801b7ce:	6833      	ldr	r3, [r6, #0]
 801b7d0:	e51a      	b.n	801b208 <tcp_receive+0x298>
                TCP_SEQ_GT(seqno + tcplen,
 801b7d2:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801b7d6:	2b00      	cmp	r3, #0
 801b7d8:	dc01      	bgt.n	801b7de <tcp_receive+0x86e>
            pcb->ooseq = next;
 801b7da:	6765      	str	r5, [r4, #116]	; 0x74
 801b7dc:	e6d0      	b.n	801b580 <tcp_receive+0x610>
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b7de:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801b7e2:	ebac 0c0e 	sub.w	ip, ip, lr
 801b7e6:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801b7ea:	8998      	ldrh	r0, [r3, #12]
 801b7ec:	f7fb fd0e 	bl	801720c <lwip_htons>
 801b7f0:	0783      	lsls	r3, r0, #30
 801b7f2:	d504      	bpl.n	801b7fe <tcp_receive+0x88e>
                inseg.len -= 1;
 801b7f4:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801b7f8:	3b01      	subs	r3, #1
 801b7fa:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801b7fe:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801b802:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801b806:	f7fd fc61 	bl	80190cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801b80a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801b80e:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801b812:	8998      	ldrh	r0, [r3, #12]
 801b814:	f7fb fcfa 	bl	801720c <lwip_htons>
 801b818:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b81c:	6831      	ldr	r1, [r6, #0]
              tcplen = TCP_TCPLEN(&inseg);
 801b81e:	bf18      	it	ne
 801b820:	2001      	movne	r0, #1
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b822:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801b824:	eb08 0200 	add.w	r2, r8, r0
 801b828:	b292      	uxth	r2, r2
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b82a:	1850      	adds	r0, r2, r1
              tcplen = TCP_TCPLEN(&inseg);
 801b82c:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801b82e:	6859      	ldr	r1, [r3, #4]
 801b830:	4288      	cmp	r0, r1
 801b832:	d0d2      	beq.n	801b7da <tcp_receive+0x86a>
 801b834:	4b12      	ldr	r3, [pc, #72]	; (801b880 <tcp_receive+0x910>)
 801b836:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801b83a:	4916      	ldr	r1, [pc, #88]	; (801b894 <tcp_receive+0x924>)
 801b83c:	480f      	ldr	r0, [pc, #60]	; (801b87c <tcp_receive+0x90c>)
 801b83e:	f007 fc51 	bl	80230e4 <iprintf>
 801b842:	883a      	ldrh	r2, [r7, #0]
 801b844:	6831      	ldr	r1, [r6, #0]
 801b846:	4411      	add	r1, r2
 801b848:	e7c7      	b.n	801b7da <tcp_receive+0x86a>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801b84a:	899d      	ldrh	r5, [r3, #12]
 801b84c:	4628      	mov	r0, r5
 801b84e:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801b852:	f7fb fcdb 	bl	801720c <lwip_htons>
 801b856:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801b85a:	f7fb fcd7 	bl	801720c <lwip_htons>
 801b85e:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801b862:	ea45 0300 	orr.w	r3, r5, r0
 801b866:	b298      	uxth	r0, r3
 801b868:	8193      	strh	r3, [r2, #12]
 801b86a:	e771      	b.n	801b750 <tcp_receive+0x7e0>
                    pcb->ooseq = cseg;
 801b86c:	6760      	str	r0, [r4, #116]	; 0x74
                  tcp_oos_insert_segment(cseg, next);
 801b86e:	f7ff bbea 	b.w	801b046 <tcp_receive+0xd6>
 801b872:	bf00      	nop
 801b874:	2001aa50 	.word	0x2001aa50
 801b878:	2001aa54 	.word	0x2001aa54
 801b87c:	08029ba0 	.word	0x08029ba0
 801b880:	08041300 	.word	0x08041300
 801b884:	08041420 	.word	0x08041420
 801b888:	2001aa3c 	.word	0x2001aa3c
 801b88c:	080414c4 	.word	0x080414c4
 801b890:	08041450 	.word	0x08041450
 801b894:	08041488 	.word	0x08041488
 801b898:	080414e4 	.word	0x080414e4
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801b89c:	682b      	ldr	r3, [r5, #0]
 801b89e:	68db      	ldr	r3, [r3, #12]
 801b8a0:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801b8a4:	4640      	mov	r0, r8
 801b8a6:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801b8aa:	f7fb fcaf 	bl	801720c <lwip_htons>
 801b8ae:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801b8b2:	f7fb fcab 	bl	801720c <lwip_htons>
 801b8b6:	682a      	ldr	r2, [r5, #0]
 801b8b8:	ea48 0800 	orr.w	r8, r8, r0
 801b8bc:	68d3      	ldr	r3, [r2, #12]
 801b8be:	f8a3 800c 	strh.w	r8, [r3, #12]
 801b8c2:	e539      	b.n	801b338 <tcp_receive+0x3c8>
 801b8c4:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801b8cc <tcp_receive+0x95c>
 801b8c8:	e5a6      	b.n	801b418 <tcp_receive+0x4a8>
 801b8ca:	bf00      	nop
 801b8cc:	2001aa3c 	.word	0x2001aa3c

0801b8d0 <tcp_input>:
{
 801b8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b8d4:	4604      	mov	r4, r0
{
 801b8d6:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b8d8:	2800      	cmp	r0, #0
 801b8da:	f000 80fd 	beq.w	801bad8 <tcp_input+0x208>
  TCP_STATS_INC(tcp.recv);
 801b8de:	4d82      	ldr	r5, [pc, #520]	; (801bae8 <tcp_input+0x218>)
  if (p->len < TCP_HLEN) {
 801b8e0:	8962      	ldrh	r2, [r4, #10]
  TCP_STATS_INC(tcp.recv);
 801b8e2:	f8b5 3092 	ldrh.w	r3, [r5, #146]	; 0x92
  tcphdr = (struct tcp_hdr *)p->payload;
 801b8e6:	6861      	ldr	r1, [r4, #4]
  if (p->len < TCP_HLEN) {
 801b8e8:	2a13      	cmp	r2, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801b8ea:	4f80      	ldr	r7, [pc, #512]	; (801baec <tcp_input+0x21c>)
  TCP_STATS_INC(tcp.recv);
 801b8ec:	f103 0301 	add.w	r3, r3, #1
  tcphdr = (struct tcp_hdr *)p->payload;
 801b8f0:	6039      	str	r1, [r7, #0]
  TCP_STATS_INC(tcp.recv);
 801b8f2:	f8a5 3092 	strh.w	r3, [r5, #146]	; 0x92
  if (p->len < TCP_HLEN) {
 801b8f6:	d80f      	bhi.n	801b918 <tcp_input+0x48>
      TCP_STATS_INC(tcp.lenerr);
 801b8f8:	f8b5 309a 	ldrh.w	r3, [r5, #154]	; 0x9a
 801b8fc:	3301      	adds	r3, #1
 801b8fe:	f8a5 309a 	strh.w	r3, [r5, #154]	; 0x9a
  TCP_STATS_INC(tcp.drop);
 801b902:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
  pbuf_free(p);
 801b906:	4620      	mov	r0, r4
  TCP_STATS_INC(tcp.drop);
 801b908:	3301      	adds	r3, #1
 801b90a:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
}
 801b90e:	b007      	add	sp, #28
 801b910:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801b914:	f7fd bace 	b.w	8018eb4 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b918:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 801bb18 <tcp_input+0x248>
 801b91c:	f8d8 1000 	ldr.w	r1, [r8]
 801b920:	f8d8 0014 	ldr.w	r0, [r8, #20]
 801b924:	f005 f9b8 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 801b928:	b9b8      	cbnz	r0, 801b95a <tcp_input+0x8a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b92a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 801b92e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b932:	2be0      	cmp	r3, #224	; 0xe0
 801b934:	d011      	beq.n	801b95a <tcp_input+0x8a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801b936:	f108 0014 	add.w	r0, r8, #20
 801b93a:	8922      	ldrh	r2, [r4, #8]
 801b93c:	2106      	movs	r1, #6
 801b93e:	f108 0310 	add.w	r3, r8, #16
 801b942:	9000      	str	r0, [sp, #0]
 801b944:	4620      	mov	r0, r4
 801b946:	f7fc fa13 	bl	8017d70 <ip_chksum_pseudo>
    if (chksum != 0) {
 801b94a:	4606      	mov	r6, r0
 801b94c:	b158      	cbz	r0, 801b966 <tcp_input+0x96>
      TCP_STATS_INC(tcp.chkerr);
 801b94e:	f8b5 3098 	ldrh.w	r3, [r5, #152]	; 0x98
 801b952:	3301      	adds	r3, #1
 801b954:	f8a5 3098 	strh.w	r3, [r5, #152]	; 0x98
      goto dropped;
 801b958:	e7d3      	b.n	801b902 <tcp_input+0x32>
    TCP_STATS_INC(tcp.proterr);
 801b95a:	f8b5 30a0 	ldrh.w	r3, [r5, #160]	; 0xa0
 801b95e:	3301      	adds	r3, #1
 801b960:	f8a5 30a0 	strh.w	r3, [r5, #160]	; 0xa0
    goto dropped;
 801b964:	e7cd      	b.n	801b902 <tcp_input+0x32>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b966:	683b      	ldr	r3, [r7, #0]
 801b968:	8998      	ldrh	r0, [r3, #12]
 801b96a:	f7fb fc4f 	bl	801720c <lwip_htons>
 801b96e:	0a80      	lsrs	r0, r0, #10
 801b970:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b974:	2913      	cmp	r1, #19
 801b976:	d9bf      	bls.n	801b8f8 <tcp_input+0x28>
 801b978:	8923      	ldrh	r3, [r4, #8]
 801b97a:	b28a      	uxth	r2, r1
 801b97c:	428b      	cmp	r3, r1
 801b97e:	d3bb      	bcc.n	801b8f8 <tcp_input+0x28>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b980:	f1a2 0314 	sub.w	r3, r2, #20
  if (p->len >= hdrlen_bytes) {
 801b984:	8960      	ldrh	r0, [r4, #10]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b986:	f8df 9194 	ldr.w	r9, [pc, #404]	; 801bb1c <tcp_input+0x24c>
  tcphdr_opt2 = NULL;
 801b98a:	f8df a194 	ldr.w	sl, [pc, #404]	; 801bb20 <tcp_input+0x250>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b98e:	b29b      	uxth	r3, r3
  if (p->len >= hdrlen_bytes) {
 801b990:	4290      	cmp	r0, r2
  tcphdr_opt2 = NULL;
 801b992:	f8ca 6000 	str.w	r6, [sl]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b996:	f8a9 3000 	strh.w	r3, [r9]
  if (p->len >= hdrlen_bytes) {
 801b99a:	f080 81b6 	bcs.w	801bd0a <tcp_input+0x43a>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b99e:	6823      	ldr	r3, [r4, #0]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	f000 838f 	beq.w	801c0c4 <tcp_input+0x7f4>
    pbuf_remove_header(p, TCP_HLEN);
 801b9a6:	2114      	movs	r1, #20
 801b9a8:	4620      	mov	r0, r4
 801b9aa:	f7fd fa47 	bl	8018e3c <pbuf_remove_header>
    tcphdr_opt1len = p->len;
 801b9ae:	8966      	ldrh	r6, [r4, #10]
 801b9b0:	4b4f      	ldr	r3, [pc, #316]	; (801baf0 <tcp_input+0x220>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801b9b2:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b9b4:	f8b9 9000 	ldrh.w	r9, [r9]
    pbuf_remove_header(p, tcphdr_opt1len);
 801b9b8:	4631      	mov	r1, r6
    tcphdr_opt1len = p->len;
 801b9ba:	801e      	strh	r6, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801b9bc:	f7fd fa3e 	bl	8018e3c <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b9c0:	eba9 0b06 	sub.w	fp, r9, r6
    if (opt2len > p->next->len) {
 801b9c4:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b9c6:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801b9ca:	8943      	ldrh	r3, [r0, #10]
 801b9cc:	455b      	cmp	r3, fp
 801b9ce:	d393      	bcc.n	801b8f8 <tcp_input+0x28>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b9d0:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801b9d2:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b9d4:	f8ca 3000 	str.w	r3, [sl]
    pbuf_remove_header(p->next, opt2len);
 801b9d8:	f7fd fa30 	bl	8018e3c <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b9dc:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b9de:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b9e0:	4433      	add	r3, r6
 801b9e2:	eba3 0309 	sub.w	r3, r3, r9
 801b9e6:	b29b      	uxth	r3, r3
 801b9e8:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b9ea:	2a00      	cmp	r2, #0
 801b9ec:	f040 8371 	bne.w	801c0d2 <tcp_input+0x802>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b9f0:	6822      	ldr	r2, [r4, #0]
 801b9f2:	8912      	ldrh	r2, [r2, #8]
 801b9f4:	429a      	cmp	r2, r3
 801b9f6:	d005      	beq.n	801ba04 <tcp_input+0x134>
 801b9f8:	4b3e      	ldr	r3, [pc, #248]	; (801baf4 <tcp_input+0x224>)
 801b9fa:	22e0      	movs	r2, #224	; 0xe0
 801b9fc:	493e      	ldr	r1, [pc, #248]	; (801baf8 <tcp_input+0x228>)
 801b9fe:	483f      	ldr	r0, [pc, #252]	; (801bafc <tcp_input+0x22c>)
 801ba00:	f007 fb70 	bl	80230e4 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ba04:	683e      	ldr	r6, [r7, #0]
 801ba06:	8830      	ldrh	r0, [r6, #0]
 801ba08:	f7fb fc00 	bl	801720c <lwip_htons>
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ba0c:	f8d7 9000 	ldr.w	r9, [r7]
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801ba10:	8030      	strh	r0, [r6, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ba12:	f8b9 0002 	ldrh.w	r0, [r9, #2]
 801ba16:	f7fb fbf9 	bl	801720c <lwip_htons>
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ba1a:	683e      	ldr	r6, [r7, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801ba1c:	f8a9 0002 	strh.w	r0, [r9, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ba20:	6870      	ldr	r0, [r6, #4]
 801ba22:	f7fb fbf7 	bl	8017214 <lwip_htonl>
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ba26:	f8d7 9000 	ldr.w	r9, [r7]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801ba2a:	4b35      	ldr	r3, [pc, #212]	; (801bb00 <tcp_input+0x230>)
 801ba2c:	6070      	str	r0, [r6, #4]
 801ba2e:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ba30:	f8d9 0008 	ldr.w	r0, [r9, #8]
 801ba34:	f7fb fbee 	bl	8017214 <lwip_htonl>
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ba38:	683e      	ldr	r6, [r7, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801ba3a:	4b32      	ldr	r3, [pc, #200]	; (801bb04 <tcp_input+0x234>)
 801ba3c:	f8c9 0008 	str.w	r0, [r9, #8]
 801ba40:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ba42:	89f0      	ldrh	r0, [r6, #14]
 801ba44:	f7fb fbe2 	bl	801720c <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801ba48:	683b      	ldr	r3, [r7, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801ba4a:	81f0      	strh	r0, [r6, #14]
  flags = TCPH_FLAGS(tcphdr);
 801ba4c:	8998      	ldrh	r0, [r3, #12]
 801ba4e:	f7fb fbdd 	bl	801720c <lwip_htons>
 801ba52:	492d      	ldr	r1, [pc, #180]	; (801bb08 <tcp_input+0x238>)
 801ba54:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ba58:	0786      	lsls	r6, r0, #30
  tcplen = p->tot_len;
 801ba5a:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801ba5c:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801ba5e:	f000 8150 	beq.w	801bd02 <tcp_input+0x432>
    tcplen++;
 801ba62:	1c5a      	adds	r2, r3, #1
 801ba64:	4929      	ldr	r1, [pc, #164]	; (801bb0c <tcp_input+0x23c>)
 801ba66:	b292      	uxth	r2, r2
 801ba68:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801ba6a:	4293      	cmp	r3, r2
    tcplen++;
 801ba6c:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801ba6e:	f63f af43 	bhi.w	801b8f8 <tcp_input+0x28>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ba72:	4b27      	ldr	r3, [pc, #156]	; (801bb10 <tcp_input+0x240>)
 801ba74:	681e      	ldr	r6, [r3, #0]
 801ba76:	2e00      	cmp	r6, #0
 801ba78:	f000 80f6 	beq.w	801bc68 <tcp_input+0x398>
  prev = NULL;
 801ba7c:	f04f 0900 	mov.w	r9, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801ba80:	4b1c      	ldr	r3, [pc, #112]	; (801baf4 <tcp_input+0x224>)
 801ba82:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 801bb24 <tcp_input+0x254>
 801ba86:	f8df a074 	ldr.w	sl, [pc, #116]	; 801bafc <tcp_input+0x22c>
 801ba8a:	e01a      	b.n	801bac2 <tcp_input+0x1f2>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801ba8c:	2a0a      	cmp	r2, #10
 801ba8e:	f000 80e3 	beq.w	801bc58 <tcp_input+0x388>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801ba92:	2a01      	cmp	r2, #1
 801ba94:	f000 80d9 	beq.w	801bc4a <tcp_input+0x37a>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ba98:	7a31      	ldrb	r1, [r6, #8]
 801ba9a:	b139      	cbz	r1, 801baac <tcp_input+0x1dc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ba9c:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801baa0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801baa4:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801baa6:	b2d2      	uxtb	r2, r2
 801baa8:	4291      	cmp	r1, r2
 801baaa:	d104      	bne.n	801bab6 <tcp_input+0x1e6>
    if (pcb->remote_port == tcphdr->src &&
 801baac:	683a      	ldr	r2, [r7, #0]
 801baae:	8b30      	ldrh	r0, [r6, #24]
 801bab0:	8811      	ldrh	r1, [r2, #0]
 801bab2:	4288      	cmp	r0, r1
 801bab4:	d038      	beq.n	801bb28 <tcp_input+0x258>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801bab6:	68f2      	ldr	r2, [r6, #12]
 801bab8:	46b1      	mov	r9, r6
 801baba:	2a00      	cmp	r2, #0
 801babc:	f000 80d4 	beq.w	801bc68 <tcp_input+0x398>
 801bac0:	4616      	mov	r6, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801bac2:	7d32      	ldrb	r2, [r6, #20]
 801bac4:	2a00      	cmp	r2, #0
 801bac6:	d1e1      	bne.n	801ba8c <tcp_input+0x1bc>
 801bac8:	22fb      	movs	r2, #251	; 0xfb
 801baca:	4659      	mov	r1, fp
 801bacc:	4650      	mov	r0, sl
 801bace:	f007 fb09 	bl	80230e4 <iprintf>
 801bad2:	7d32      	ldrb	r2, [r6, #20]
 801bad4:	4b07      	ldr	r3, [pc, #28]	; (801baf4 <tcp_input+0x224>)
 801bad6:	e7d9      	b.n	801ba8c <tcp_input+0x1bc>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801bad8:	4b06      	ldr	r3, [pc, #24]	; (801baf4 <tcp_input+0x224>)
 801bada:	2283      	movs	r2, #131	; 0x83
 801badc:	490d      	ldr	r1, [pc, #52]	; (801bb14 <tcp_input+0x244>)
 801bade:	4807      	ldr	r0, [pc, #28]	; (801bafc <tcp_input+0x22c>)
 801bae0:	f007 fb00 	bl	80230e4 <iprintf>
 801bae4:	e6fb      	b.n	801b8de <tcp_input+0xe>
 801bae6:	bf00      	nop
 801bae8:	2002e38c 	.word	0x2002e38c
 801baec:	2001aa60 	.word	0x2001aa60
 801baf0:	2001aa64 	.word	0x2001aa64
 801baf4:	08041300 	.word	0x08041300
 801baf8:	08041540 	.word	0x08041540
 801bafc:	08029ba0 	.word	0x08029ba0
 801bb00:	2001aa58 	.word	0x2001aa58
 801bb04:	2001aa34 	.word	0x2001aa34
 801bb08:	2001aa38 	.word	0x2001aa38
 801bb0c:	2001aa6e 	.word	0x2001aa6e
 801bb10:	2002e498 	.word	0x2002e498
 801bb14:	0804150c 	.word	0x0804150c
 801bb18:	2001f464 	.word	0x2001f464
 801bb1c:	2001aa6c 	.word	0x2001aa6c
 801bb20:	2001aa68 	.word	0x2001aa68
 801bb24:	08041560 	.word	0x08041560
    if (pcb->remote_port == tcphdr->src &&
 801bb28:	8852      	ldrh	r2, [r2, #2]
 801bb2a:	8af1      	ldrh	r1, [r6, #22]
 801bb2c:	4291      	cmp	r1, r2
 801bb2e:	d1c2      	bne.n	801bab6 <tcp_input+0x1e6>
        pcb->local_port == tcphdr->dest &&
 801bb30:	6871      	ldr	r1, [r6, #4]
 801bb32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bb36:	4291      	cmp	r1, r2
 801bb38:	d1bd      	bne.n	801bab6 <tcp_input+0x1e6>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bb3a:	6831      	ldr	r1, [r6, #0]
 801bb3c:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801bb40:	4291      	cmp	r1, r2
 801bb42:	d1b8      	bne.n	801bab6 <tcp_input+0x1e6>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801bb44:	68f3      	ldr	r3, [r6, #12]
 801bb46:	42b3      	cmp	r3, r6
 801bb48:	d076      	beq.n	801bc38 <tcp_input+0x368>
      if (prev != NULL) {
 801bb4a:	f1b9 0f00 	cmp.w	r9, #0
 801bb4e:	f000 8442 	beq.w	801c3d6 <tcp_input+0xb06>
        pcb->next = tcp_active_pcbs;
 801bb52:	4979      	ldr	r1, [pc, #484]	; (801bd38 <tcp_input+0x468>)
        prev->next = pcb->next;
 801bb54:	f8c9 300c 	str.w	r3, [r9, #12]
        pcb->next = tcp_active_pcbs;
 801bb58:	680a      	ldr	r2, [r1, #0]
        tcp_active_pcbs = pcb;
 801bb5a:	600e      	str	r6, [r1, #0]
 801bb5c:	4613      	mov	r3, r2
        pcb->next = tcp_active_pcbs;
 801bb5e:	60f2      	str	r2, [r6, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801bb60:	42b3      	cmp	r3, r6
 801bb62:	f000 843f 	beq.w	801c3e4 <tcp_input+0xb14>
    inseg.next = NULL;
 801bb66:	f8df 8200 	ldr.w	r8, [pc, #512]	; 801bd68 <tcp_input+0x498>
 801bb6a:	2300      	movs	r3, #0
    inseg.tcphdr = tcphdr;
 801bb6c:	683a      	ldr	r2, [r7, #0]
    inseg.len = p->tot_len;
 801bb6e:	8921      	ldrh	r1, [r4, #8]
    inseg.tcphdr = tcphdr;
 801bb70:	f8c8 200c 	str.w	r2, [r8, #12]
    if (flags & TCP_PSH) {
 801bb74:	4a71      	ldr	r2, [pc, #452]	; (801bd3c <tcp_input+0x46c>)
    recv_data = NULL;
 801bb76:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 801bd6c <tcp_input+0x49c>
    recv_flags = 0;
 801bb7a:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 801bd70 <tcp_input+0x4a0>
    recv_acked = 0;
 801bb7e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 801bd74 <tcp_input+0x4a4>
    if (flags & TCP_PSH) {
 801bb82:	7812      	ldrb	r2, [r2, #0]
    inseg.next = NULL;
 801bb84:	f8c8 3000 	str.w	r3, [r8]
    recv_data = NULL;
 801bb88:	f8c9 3000 	str.w	r3, [r9]
    recv_flags = 0;
 801bb8c:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801bb90:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801bb94:	0713      	lsls	r3, r2, #28
    inseg.p = p;
 801bb96:	f8c8 4004 	str.w	r4, [r8, #4]
    inseg.len = p->tot_len;
 801bb9a:	f8a8 1008 	strh.w	r1, [r8, #8]
    if (flags & TCP_PSH) {
 801bb9e:	d503      	bpl.n	801bba8 <tcp_input+0x2d8>
      p->flags |= PBUF_FLAG_PUSH;
 801bba0:	7b63      	ldrb	r3, [r4, #13]
 801bba2:	f043 0301 	orr.w	r3, r3, #1
 801bba6:	7363      	strb	r3, [r4, #13]
    if (pcb->refused_data != NULL) {
 801bba8:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801bbaa:	b173      	cbz	r3, 801bbca <tcp_input+0x2fa>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801bbac:	4630      	mov	r0, r6
 801bbae:	f7fe fe8d 	bl	801a8cc <tcp_process_refused_data>
 801bbb2:	300d      	adds	r0, #13
 801bbb4:	f000 8295 	beq.w	801c0e2 <tcp_input+0x812>
 801bbb8:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801bbba:	b123      	cbz	r3, 801bbc6 <tcp_input+0x2f6>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801bbbc:	9b05      	ldr	r3, [sp, #20]
 801bbbe:	881b      	ldrh	r3, [r3, #0]
 801bbc0:	2b00      	cmp	r3, #0
 801bbc2:	f040 828e 	bne.w	801c0e2 <tcp_input+0x812>
 801bbc6:	4b5d      	ldr	r3, [pc, #372]	; (801bd3c <tcp_input+0x46c>)
 801bbc8:	781a      	ldrb	r2, [r3, #0]
    tcp_input_pcb = pcb;
 801bbca:	4c5d      	ldr	r4, [pc, #372]	; (801bd40 <tcp_input+0x470>)
  if (flags & TCP_RST) {
 801bbcc:	0753      	lsls	r3, r2, #29
    tcp_input_pcb = pcb;
 801bbce:	6026      	str	r6, [r4, #0]
  if (flags & TCP_RST) {
 801bbd0:	f140 8166 	bpl.w	801bea0 <tcp_input+0x5d0>
    if (pcb->state == SYN_SENT) {
 801bbd4:	7d31      	ldrb	r1, [r6, #20]
 801bbd6:	2902      	cmp	r1, #2
 801bbd8:	f000 8362 	beq.w	801c2a0 <tcp_input+0x9d0>
      if (seqno == pcb->rcv_nxt) {
 801bbdc:	4b59      	ldr	r3, [pc, #356]	; (801bd44 <tcp_input+0x474>)
 801bbde:	6a72      	ldr	r2, [r6, #36]	; 0x24
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	429a      	cmp	r2, r3
 801bbe4:	f000 845f 	beq.w	801c4a6 <tcp_input+0xbd6>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801bbe8:	1a9b      	subs	r3, r3, r2
 801bbea:	d404      	bmi.n	801bbf6 <tcp_input+0x326>
 801bbec:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 801bbee:	1a9b      	subs	r3, r3, r2
 801bbf0:	2b00      	cmp	r3, #0
 801bbf2:	f340 8350 	ble.w	801c296 <tcp_input+0x9c6>
      if (recv_flags & TF_RESET) {
 801bbf6:	f89a 3000 	ldrb.w	r3, [sl]
 801bbfa:	0719      	lsls	r1, r3, #28
 801bbfc:	f140 827c 	bpl.w	801c0f8 <tcp_input+0x828>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801bc00:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 801bc04:	b11b      	cbz	r3, 801bc0e <tcp_input+0x33e>
 801bc06:	f06f 010d 	mvn.w	r1, #13
 801bc0a:	6930      	ldr	r0, [r6, #16]
 801bc0c:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bc0e:	484a      	ldr	r0, [pc, #296]	; (801bd38 <tcp_input+0x468>)
 801bc10:	4631      	mov	r1, r6
 801bc12:	f7fe fb03 	bl	801a21c <tcp_pcb_remove>
        tcp_free(pcb);
 801bc16:	4630      	mov	r0, r6
 801bc18:	f7fd fe10 	bl	801983c <tcp_free>
    tcp_input_pcb = NULL;
 801bc1c:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801bc1e:	f8d8 0004 	ldr.w	r0, [r8, #4]
    tcp_input_pcb = NULL;
 801bc22:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801bc24:	f8c9 5000 	str.w	r5, [r9]
    if (inseg.p != NULL) {
 801bc28:	b118      	cbz	r0, 801bc32 <tcp_input+0x362>
      pbuf_free(inseg.p);
 801bc2a:	f7fd f943 	bl	8018eb4 <pbuf_free>
      inseg.p = NULL;
 801bc2e:	f8c8 5004 	str.w	r5, [r8, #4]
}
 801bc32:	b007      	add	sp, #28
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801bc38:	4b43      	ldr	r3, [pc, #268]	; (801bd48 <tcp_input+0x478>)
 801bc3a:	f240 120d 	movw	r2, #269	; 0x10d
 801bc3e:	4943      	ldr	r1, [pc, #268]	; (801bd4c <tcp_input+0x47c>)
 801bc40:	4843      	ldr	r0, [pc, #268]	; (801bd50 <tcp_input+0x480>)
 801bc42:	f007 fa4f 	bl	80230e4 <iprintf>
 801bc46:	68f3      	ldr	r3, [r6, #12]
 801bc48:	e77f      	b.n	801bb4a <tcp_input+0x27a>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801bc4a:	22fd      	movs	r2, #253	; 0xfd
 801bc4c:	4941      	ldr	r1, [pc, #260]	; (801bd54 <tcp_input+0x484>)
 801bc4e:	4650      	mov	r0, sl
 801bc50:	f007 fa48 	bl	80230e4 <iprintf>
 801bc54:	4b3c      	ldr	r3, [pc, #240]	; (801bd48 <tcp_input+0x478>)
 801bc56:	e71f      	b.n	801ba98 <tcp_input+0x1c8>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801bc58:	22fc      	movs	r2, #252	; 0xfc
 801bc5a:	493f      	ldr	r1, [pc, #252]	; (801bd58 <tcp_input+0x488>)
 801bc5c:	4650      	mov	r0, sl
 801bc5e:	f007 fa41 	bl	80230e4 <iprintf>
 801bc62:	7d32      	ldrb	r2, [r6, #20]
 801bc64:	4b38      	ldr	r3, [pc, #224]	; (801bd48 <tcp_input+0x478>)
 801bc66:	e714      	b.n	801ba92 <tcp_input+0x1c2>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc68:	4b3c      	ldr	r3, [pc, #240]	; (801bd5c <tcp_input+0x48c>)
 801bc6a:	681e      	ldr	r6, [r3, #0]
 801bc6c:	2e00      	cmp	r6, #0
 801bc6e:	d052      	beq.n	801bd16 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bc70:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 801bd48 <tcp_input+0x478>
 801bc74:	f8df a100 	ldr.w	sl, [pc, #256]	; 801bd78 <tcp_input+0x4a8>
 801bc78:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 801bd50 <tcp_input+0x480>
 801bc7c:	e002      	b.n	801bc84 <tcp_input+0x3b4>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801bc7e:	68f6      	ldr	r6, [r6, #12]
 801bc80:	2e00      	cmp	r6, #0
 801bc82:	d048      	beq.n	801bd16 <tcp_input+0x446>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bc84:	7d30      	ldrb	r0, [r6, #20]
 801bc86:	465b      	mov	r3, fp
 801bc88:	f240 121f 	movw	r2, #287	; 0x11f
 801bc8c:	4651      	mov	r1, sl
 801bc8e:	280a      	cmp	r0, #10
 801bc90:	4648      	mov	r0, r9
 801bc92:	d001      	beq.n	801bc98 <tcp_input+0x3c8>
 801bc94:	f007 fa26 	bl	80230e4 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bc98:	7a32      	ldrb	r2, [r6, #8]
 801bc9a:	b13a      	cbz	r2, 801bcac <tcp_input+0x3dc>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bc9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801bca0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801bca4:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801bca6:	b2db      	uxtb	r3, r3
 801bca8:	429a      	cmp	r2, r3
 801bcaa:	d1e8      	bne.n	801bc7e <tcp_input+0x3ae>
      if (pcb->remote_port == tcphdr->src &&
 801bcac:	683b      	ldr	r3, [r7, #0]
 801bcae:	8b31      	ldrh	r1, [r6, #24]
 801bcb0:	881a      	ldrh	r2, [r3, #0]
 801bcb2:	4291      	cmp	r1, r2
 801bcb4:	d1e3      	bne.n	801bc7e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801bcb6:	885a      	ldrh	r2, [r3, #2]
      if (pcb->remote_port == tcphdr->src &&
 801bcb8:	8af3      	ldrh	r3, [r6, #22]
 801bcba:	4293      	cmp	r3, r2
 801bcbc:	d1df      	bne.n	801bc7e <tcp_input+0x3ae>
          pcb->local_port == tcphdr->dest &&
 801bcbe:	6870      	ldr	r0, [r6, #4]
 801bcc0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801bcc4:	4290      	cmp	r0, r2
 801bcc6:	d1da      	bne.n	801bc7e <tcp_input+0x3ae>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801bcc8:	6830      	ldr	r0, [r6, #0]
 801bcca:	f8d8 2014 	ldr.w	r2, [r8, #20]
 801bcce:	4290      	cmp	r0, r2
 801bcd0:	d1d5      	bne.n	801bc7e <tcp_input+0x3ae>
  if (flags & TCP_RST) {
 801bcd2:	4a1a      	ldr	r2, [pc, #104]	; (801bd3c <tcp_input+0x46c>)
 801bcd4:	7812      	ldrb	r2, [r2, #0]
 801bcd6:	0750      	lsls	r0, r2, #29
 801bcd8:	d411      	bmi.n	801bcfe <tcp_input+0x42e>
  if (flags & TCP_SYN) {
 801bcda:	0797      	lsls	r7, r2, #30
 801bcdc:	f140 838e 	bpl.w	801c3fc <tcp_input+0xb2c>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801bce0:	4a18      	ldr	r2, [pc, #96]	; (801bd44 <tcp_input+0x474>)
 801bce2:	6a70      	ldr	r0, [r6, #36]	; 0x24
 801bce4:	6812      	ldr	r2, [r2, #0]
 801bce6:	1a10      	subs	r0, r2, r0
 801bce8:	d404      	bmi.n	801bcf4 <tcp_input+0x424>
 801bcea:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 801bcec:	1b40      	subs	r0, r0, r5
 801bcee:	2800      	cmp	r0, #0
 801bcf0:	f340 83e4 	ble.w	801c4bc <tcp_input+0xbec>
  if ((tcplen > 0)) {
 801bcf4:	9b05      	ldr	r3, [sp, #20]
 801bcf6:	881b      	ldrh	r3, [r3, #0]
 801bcf8:	2b00      	cmp	r3, #0
 801bcfa:	f040 83e6 	bne.w	801c4ca <tcp_input+0xbfa>
        pbuf_free(p);
 801bcfe:	4620      	mov	r0, r4
 801bd00:	e605      	b.n	801b90e <tcp_input+0x3e>
  tcplen = p->tot_len;
 801bd02:	4a17      	ldr	r2, [pc, #92]	; (801bd60 <tcp_input+0x490>)
 801bd04:	9205      	str	r2, [sp, #20]
 801bd06:	8013      	strh	r3, [r2, #0]
 801bd08:	e6b3      	b.n	801ba72 <tcp_input+0x1a2>
    tcphdr_opt1len = tcphdr_optlen;
 801bd0a:	4a16      	ldr	r2, [pc, #88]	; (801bd64 <tcp_input+0x494>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801bd0c:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801bd0e:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801bd10:	f7fd f894 	bl	8018e3c <pbuf_remove_header>
 801bd14:	e676      	b.n	801ba04 <tcp_input+0x134>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bd16:	f8df a064 	ldr.w	sl, [pc, #100]	; 801bd7c <tcp_input+0x4ac>
 801bd1a:	f8da e000 	ldr.w	lr, [sl]
 801bd1e:	f1be 0f00 	cmp.w	lr, #0
 801bd22:	f000 8239 	beq.w	801c198 <tcp_input+0x8c8>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bd26:	f8d8 0004 	ldr.w	r0, [r8, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801bd2a:	4676      	mov	r6, lr
      if (lpcb->local_port == tcphdr->dest) {
 801bd2c:	6839      	ldr	r1, [r7, #0]
    prev = NULL;
 801bd2e:	2200      	movs	r2, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801bd30:	f8d8 c014 	ldr.w	ip, [r8, #20]
 801bd34:	4681      	mov	r9, r0
 801bd36:	e029      	b.n	801bd8c <tcp_input+0x4bc>
 801bd38:	2002e498 	.word	0x2002e498
 801bd3c:	2001aa38 	.word	0x2001aa38
 801bd40:	2002e4ac 	.word	0x2002e4ac
 801bd44:	2001aa58 	.word	0x2001aa58
 801bd48:	08041300 	.word	0x08041300
 801bd4c:	080415dc 	.word	0x080415dc
 801bd50:	08029ba0 	.word	0x08029ba0
 801bd54:	080415b4 	.word	0x080415b4
 801bd58:	08041588 	.word	0x08041588
 801bd5c:	2002e4a8 	.word	0x2002e4a8
 801bd60:	2001aa6e 	.word	0x2001aa6e
 801bd64:	2001aa64 	.word	0x2001aa64
 801bd68:	2001aa3c 	.word	0x2001aa3c
 801bd6c:	2001aa50 	.word	0x2001aa50
 801bd70:	2001aa54 	.word	0x2001aa54
 801bd74:	2001aa4c 	.word	0x2001aa4c
 801bd78:	08041634 	.word	0x08041634
 801bd7c:	2002e4a0 	.word	0x2002e4a0
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801bd80:	68f3      	ldr	r3, [r6, #12]
 801bd82:	4632      	mov	r2, r6
 801bd84:	461e      	mov	r6, r3
 801bd86:	2b00      	cmp	r3, #0
 801bd88:	f000 8207 	beq.w	801c19a <tcp_input+0x8ca>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bd8c:	7a30      	ldrb	r0, [r6, #8]
 801bd8e:	b128      	cbz	r0, 801bd9c <tcp_input+0x4cc>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801bd90:	f899 3038 	ldrb.w	r3, [r9, #56]	; 0x38
 801bd94:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801bd96:	b2db      	uxtb	r3, r3
 801bd98:	4298      	cmp	r0, r3
 801bd9a:	d1f1      	bne.n	801bd80 <tcp_input+0x4b0>
      if (lpcb->local_port == tcphdr->dest) {
 801bd9c:	884b      	ldrh	r3, [r1, #2]
 801bd9e:	8af0      	ldrh	r0, [r6, #22]
 801bda0:	4298      	cmp	r0, r3
 801bda2:	d1ed      	bne.n	801bd80 <tcp_input+0x4b0>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801bda4:	6830      	ldr	r0, [r6, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801bda6:	b108      	cbz	r0, 801bdac <tcp_input+0x4dc>
 801bda8:	4560      	cmp	r0, ip
 801bdaa:	d1e9      	bne.n	801bd80 <tcp_input+0x4b0>
      if (prev != NULL) {
 801bdac:	2a00      	cmp	r2, #0
 801bdae:	f000 828c 	beq.w	801c2ca <tcp_input+0x9fa>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801bdb2:	68f0      	ldr	r0, [r6, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801bdb4:	f8ca 6000 	str.w	r6, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801bdb8:	60d0      	str	r0, [r2, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801bdba:	f8c6 e00c 	str.w	lr, [r6, #12]
  if (flags & TCP_RST) {
 801bdbe:	4aab      	ldr	r2, [pc, #684]	; (801c06c <tcp_input+0x79c>)
 801bdc0:	7812      	ldrb	r2, [r2, #0]
 801bdc2:	0750      	lsls	r0, r2, #29
 801bdc4:	d49b      	bmi.n	801bcfe <tcp_input+0x42e>
  if (flags & TCP_ACK) {
 801bdc6:	f012 0910 	ands.w	r9, r2, #16
 801bdca:	f040 8284 	bne.w	801c2d6 <tcp_input+0xa06>
  } else if (flags & TCP_SYN) {
 801bdce:	0792      	lsls	r2, r2, #30
 801bdd0:	d595      	bpl.n	801bcfe <tcp_input+0x42e>
    npcb = tcp_alloc(pcb->prio);
 801bdd2:	7d70      	ldrb	r0, [r6, #21]
 801bdd4:	f7fe fb9a 	bl	801a50c <tcp_alloc>
    if (npcb == NULL) {
 801bdd8:	4682      	mov	sl, r0
 801bdda:	2800      	cmp	r0, #0
 801bddc:	f000 82ea 	beq.w	801c3b4 <tcp_input+0xae4>
    npcb->remote_port = tcphdr->src;
 801bde0:	683d      	ldr	r5, [r7, #0]
    npcb->state = SYN_RCVD;
 801bde2:	f04f 0c03 	mov.w	ip, #3
    npcb->rcv_nxt = seqno + 1;
 801bde6:	4ba2      	ldr	r3, [pc, #648]	; (801c070 <tcp_input+0x7a0>)
    npcb->remote_port = tcphdr->src;
 801bde8:	782a      	ldrb	r2, [r5, #0]
 801bdea:	786d      	ldrb	r5, [r5, #1]
    npcb->rcv_nxt = seqno + 1;
 801bdec:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801bdee:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    npcb->local_port = pcb->local_port;
 801bdf2:	8af5      	ldrh	r5, [r6, #22]
    npcb->rcv_nxt = seqno + 1;
 801bdf4:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801bdf6:	8302      	strh	r2, [r0, #24]
    npcb->rcv_nxt = seqno + 1;
 801bdf8:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801bdfa:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801bdfc:	e9d8 1204 	ldrd	r1, r2, [r8, #16]
    npcb->state = SYN_RCVD;
 801be00:	f880 c014 	strb.w	ip, [r0, #20]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801be04:	6041      	str	r1, [r0, #4]
    npcb->local_port = pcb->local_port;
 801be06:	82c5      	strh	r5, [r0, #22]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be08:	1d05      	adds	r5, r0, #4
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801be0a:	6002      	str	r2, [r0, #0]
    iss = tcp_next_iss(npcb);
 801be0c:	f7fe fdfc 	bl	801aa08 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801be10:	4b97      	ldr	r3, [pc, #604]	; (801c070 <tcp_input+0x7a0>)
    TCP_REG_ACTIVE(npcb);
 801be12:	4998      	ldr	r1, [pc, #608]	; (801c074 <tcp_input+0x7a4>)
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801be14:	681a      	ldr	r2, [r3, #0]
    npcb->callback_arg = pcb->callback_arg;
 801be16:	6933      	ldr	r3, [r6, #16]
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801be18:	3a01      	subs	r2, #1
    npcb->listener = pcb;
 801be1a:	f8ca 607c 	str.w	r6, [sl, #124]	; 0x7c
    npcb->snd_wl2 = iss;
 801be1e:	f8ca 0058 	str.w	r0, [sl, #88]	; 0x58
    npcb->snd_nxt = iss;
 801be22:	f8ca 0050 	str.w	r0, [sl, #80]	; 0x50
    npcb->lastack = iss;
 801be26:	f8ca 0044 	str.w	r0, [sl, #68]	; 0x44
    npcb->snd_lbb = iss;
 801be2a:	f8ca 005c 	str.w	r0, [sl, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801be2e:	f8ca 2054 	str.w	r2, [sl, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801be32:	f8ca 3010 	str.w	r3, [sl, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801be36:	7a73      	ldrb	r3, [r6, #9]
    TCP_REG_ACTIVE(npcb);
 801be38:	680a      	ldr	r2, [r1, #0]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801be3a:	f003 030c 	and.w	r3, r3, #12
    TCP_REG_ACTIVE(npcb);
 801be3e:	f8c1 a000 	str.w	sl, [r1]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801be42:	f88a 3009 	strb.w	r3, [sl, #9]
    npcb->netif_idx = pcb->netif_idx;
 801be46:	7a33      	ldrb	r3, [r6, #8]
    TCP_REG_ACTIVE(npcb);
 801be48:	f8ca 200c 	str.w	r2, [sl, #12]
    npcb->netif_idx = pcb->netif_idx;
 801be4c:	f88a 3008 	strb.w	r3, [sl, #8]
    TCP_REG_ACTIVE(npcb);
 801be50:	f001 feec 	bl	801dc2c <tcp_timer_needed>
 801be54:	2201      	movs	r2, #1
 801be56:	4b88      	ldr	r3, [pc, #544]	; (801c078 <tcp_input+0x7a8>)
    tcp_parseopt(npcb);
 801be58:	4650      	mov	r0, sl
    TCP_REG_ACTIVE(npcb);
 801be5a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801be5c:	f7fe feea 	bl	801ac34 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801be60:	683b      	ldr	r3, [r7, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be62:	4628      	mov	r0, r5
 801be64:	9505      	str	r5, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801be66:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be68:	f8ba 6032 	ldrh.w	r6, [sl, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801be6c:	f8aa 3060 	strh.w	r3, [sl, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801be70:	f8aa 3062 	strh.w	r3, [sl, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be74:	f004 fce4 	bl	8020840 <ip4_route>
 801be78:	9a05      	ldr	r2, [sp, #20]
 801be7a:	4601      	mov	r1, r0
 801be7c:	4630      	mov	r0, r6
 801be7e:	f7fe fddf 	bl	801aa40 <tcp_eff_send_mss_netif>
 801be82:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801be84:	2112      	movs	r1, #18
 801be86:	4650      	mov	r0, sl
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801be88:	f8aa 3032 	strh.w	r3, [sl, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801be8c:	f001 f974 	bl	801d178 <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801be90:	2800      	cmp	r0, #0
 801be92:	f040 82ba 	bne.w	801c40a <tcp_input+0xb3a>
    tcp_output(npcb);
 801be96:	4650      	mov	r0, sl
 801be98:	f001 fb94 	bl	801d5c4 <tcp_output>
        pbuf_free(p);
 801be9c:	4620      	mov	r0, r4
 801be9e:	e536      	b.n	801b90e <tcp_input+0x3e>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bea0:	0795      	lsls	r5, r2, #30
 801bea2:	d504      	bpl.n	801beae <tcp_input+0x5de>
 801bea4:	7d33      	ldrb	r3, [r6, #20]
 801bea6:	3b02      	subs	r3, #2
 801bea8:	2b01      	cmp	r3, #1
 801beaa:	f200 81f4 	bhi.w	801c296 <tcp_input+0x9c6>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801beae:	8b73      	ldrh	r3, [r6, #26]
 801beb0:	06d8      	lsls	r0, r3, #27
 801beb2:	d402      	bmi.n	801beba <tcp_input+0x5ea>
    pcb->tmr = tcp_ticks;
 801beb4:	4b71      	ldr	r3, [pc, #452]	; (801c07c <tcp_input+0x7ac>)
 801beb6:	681b      	ldr	r3, [r3, #0]
 801beb8:	6233      	str	r3, [r6, #32]
  pcb->persist_probe = 0;
 801beba:	2300      	movs	r3, #0
  tcp_parseopt(pcb);
 801bebc:	4630      	mov	r0, r6
  pcb->persist_probe = 0;
 801bebe:	f8a6 309a 	strh.w	r3, [r6, #154]	; 0x9a
  tcp_parseopt(pcb);
 801bec2:	f7fe feb7 	bl	801ac34 <tcp_parseopt>
  switch (pcb->state) {
 801bec6:	7d33      	ldrb	r3, [r6, #20]
 801bec8:	3b02      	subs	r3, #2
 801beca:	2b07      	cmp	r3, #7
 801becc:	f63f ae93 	bhi.w	801bbf6 <tcp_input+0x326>
 801bed0:	e8df f003 	tbb	[pc, r3]
 801bed4:	8b0413a4 	.word	0x8b0413a4
 801bed8:	344d0470 	.word	0x344d0470
      tcp_receive(pcb);
 801bedc:	4630      	mov	r0, r6
 801bede:	f7ff f847 	bl	801af70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801bee2:	f89a 3000 	ldrb.w	r3, [sl]
 801bee6:	0699      	lsls	r1, r3, #26
 801bee8:	f57f ae85 	bpl.w	801bbf6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801beec:	8b73      	ldrh	r3, [r6, #26]
        pcb->state = CLOSE_WAIT;
 801beee:	2207      	movs	r2, #7
        tcp_ack_now(pcb);
 801bef0:	f043 0302 	orr.w	r3, r3, #2
        pcb->state = CLOSE_WAIT;
 801bef4:	7532      	strb	r2, [r6, #20]
        tcp_ack_now(pcb);
 801bef6:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801bef8:	e67d      	b.n	801bbf6 <tcp_input+0x326>
      if (flags & TCP_ACK) {
 801befa:	4b5c      	ldr	r3, [pc, #368]	; (801c06c <tcp_input+0x79c>)
 801befc:	781b      	ldrb	r3, [r3, #0]
 801befe:	06da      	lsls	r2, r3, #27
 801bf00:	f140 8228 	bpl.w	801c354 <tcp_input+0xa84>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801bf04:	6c73      	ldr	r3, [r6, #68]	; 0x44
 801bf06:	4a5e      	ldr	r2, [pc, #376]	; (801c080 <tcp_input+0x7b0>)
 801bf08:	43db      	mvns	r3, r3
 801bf0a:	6811      	ldr	r1, [r2, #0]
 801bf0c:	42cb      	cmn	r3, r1
 801bf0e:	d404      	bmi.n	801bf1a <tcp_input+0x64a>
 801bf10:	6d33      	ldr	r3, [r6, #80]	; 0x50
 801bf12:	1acb      	subs	r3, r1, r3
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	f340 8287 	ble.w	801c428 <tcp_input+0xb58>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf1a:	9a05      	ldr	r2, [sp, #20]
 801bf1c:	4630      	mov	r0, r6
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bf1e:	683b      	ldr	r3, [r7, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bf20:	8815      	ldrh	r5, [r2, #0]
 801bf22:	4a53      	ldr	r2, [pc, #332]	; (801c070 <tcp_input+0x7a0>)
 801bf24:	881f      	ldrh	r7, [r3, #0]
 801bf26:	6812      	ldr	r2, [r2, #0]
 801bf28:	9702      	str	r7, [sp, #8]
 801bf2a:	442a      	add	r2, r5
 801bf2c:	885b      	ldrh	r3, [r3, #2]
 801bf2e:	4d55      	ldr	r5, [pc, #340]	; (801c084 <tcp_input+0x7b4>)
 801bf30:	e9cd 5300 	strd	r5, r3, [sp]
 801bf34:	1d2b      	adds	r3, r5, #4
 801bf36:	f001 fac5 	bl	801d4c4 <tcp_rst>
    if (err != ERR_ABRT) {
 801bf3a:	e65c      	b.n	801bbf6 <tcp_input+0x326>
      tcp_receive(pcb);
 801bf3c:	4630      	mov	r0, r6
 801bf3e:	f7ff f817 	bl	801af70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bf42:	4b4a      	ldr	r3, [pc, #296]	; (801c06c <tcp_input+0x79c>)
 801bf44:	781b      	ldrb	r3, [r3, #0]
 801bf46:	06d8      	lsls	r0, r3, #27
 801bf48:	f57f ae55 	bpl.w	801bbf6 <tcp_input+0x326>
 801bf4c:	4b4c      	ldr	r3, [pc, #304]	; (801c080 <tcp_input+0x7b0>)
 801bf4e:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801bf50:	681b      	ldr	r3, [r3, #0]
 801bf52:	429a      	cmp	r2, r3
 801bf54:	f47f ae4f 	bne.w	801bbf6 <tcp_input+0x326>
 801bf58:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801bf5a:	2b00      	cmp	r3, #0
 801bf5c:	f47f ae4b 	bne.w	801bbf6 <tcp_input+0x326>
        recv_flags |= TF_CLOSED;
 801bf60:	f89a 3000 	ldrb.w	r3, [sl]
 801bf64:	f043 0310 	orr.w	r3, r3, #16
 801bf68:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801bf6c:	e643      	b.n	801bbf6 <tcp_input+0x326>
      tcp_receive(pcb);
 801bf6e:	4630      	mov	r0, r6
 801bf70:	f7fe fffe 	bl	801af70 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801bf74:	4b3d      	ldr	r3, [pc, #244]	; (801c06c <tcp_input+0x79c>)
 801bf76:	781b      	ldrb	r3, [r3, #0]
 801bf78:	06dd      	lsls	r5, r3, #27
 801bf7a:	f57f ae3c 	bpl.w	801bbf6 <tcp_input+0x326>
 801bf7e:	4b40      	ldr	r3, [pc, #256]	; (801c080 <tcp_input+0x7b0>)
 801bf80:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801bf82:	681b      	ldr	r3, [r3, #0]
 801bf84:	429a      	cmp	r2, r3
 801bf86:	f47f ae36 	bne.w	801bbf6 <tcp_input+0x326>
 801bf8a:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801bf8c:	2b00      	cmp	r3, #0
 801bf8e:	f47f ae32 	bne.w	801bbf6 <tcp_input+0x326>
        tcp_pcb_purge(pcb);
 801bf92:	4630      	mov	r0, r6
 801bf94:	f7fd fe8a 	bl	8019cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bf98:	4b36      	ldr	r3, [pc, #216]	; (801c074 <tcp_input+0x7a4>)
 801bf9a:	681b      	ldr	r3, [r3, #0]
 801bf9c:	42b3      	cmp	r3, r6
 801bf9e:	f000 8082 	beq.w	801c0a6 <tcp_input+0x7d6>
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	f000 8082 	beq.w	801c0ac <tcp_input+0x7dc>
 801bfa8:	68da      	ldr	r2, [r3, #12]
 801bfaa:	42b2      	cmp	r2, r6
 801bfac:	f000 8223 	beq.w	801c3f6 <tcp_input+0xb26>
 801bfb0:	4613      	mov	r3, r2
 801bfb2:	e7f6      	b.n	801bfa2 <tcp_input+0x6d2>
      tcp_receive(pcb);
 801bfb4:	4630      	mov	r0, r6
 801bfb6:	f7fe ffdb 	bl	801af70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bfba:	f89a 3000 	ldrb.w	r3, [sl]
 801bfbe:	069f      	lsls	r7, r3, #26
 801bfc0:	f57f ae19 	bpl.w	801bbf6 <tcp_input+0x326>
        tcp_ack_now(pcb);
 801bfc4:	8b73      	ldrh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801bfc6:	4630      	mov	r0, r6
        tcp_ack_now(pcb);
 801bfc8:	f043 0302 	orr.w	r3, r3, #2
 801bfcc:	8373      	strh	r3, [r6, #26]
        tcp_pcb_purge(pcb);
 801bfce:	f7fd fe6d 	bl	8019cac <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801bfd2:	4b28      	ldr	r3, [pc, #160]	; (801c074 <tcp_input+0x7a4>)
 801bfd4:	681b      	ldr	r3, [r3, #0]
 801bfd6:	42b3      	cmp	r3, r6
 801bfd8:	d065      	beq.n	801c0a6 <tcp_input+0x7d6>
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d066      	beq.n	801c0ac <tcp_input+0x7dc>
 801bfde:	68da      	ldr	r2, [r3, #12]
 801bfe0:	42b2      	cmp	r2, r6
 801bfe2:	f000 8208 	beq.w	801c3f6 <tcp_input+0xb26>
 801bfe6:	4613      	mov	r3, r2
 801bfe8:	e7f7      	b.n	801bfda <tcp_input+0x70a>
      tcp_receive(pcb);
 801bfea:	4630      	mov	r0, r6
 801bfec:	f7fe ffc0 	bl	801af70 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801bff0:	f89a 3000 	ldrb.w	r3, [sl]
 801bff4:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801bff8:	4b1c      	ldr	r3, [pc, #112]	; (801c06c <tcp_input+0x79c>)
 801bffa:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801bffc:	f000 819a 	beq.w	801c334 <tcp_input+0xa64>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c000:	06da      	lsls	r2, r3, #27
 801c002:	d504      	bpl.n	801c00e <tcp_input+0x73e>
 801c004:	4b1e      	ldr	r3, [pc, #120]	; (801c080 <tcp_input+0x7b0>)
 801c006:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	429a      	cmp	r2, r3
 801c00c:	d03c      	beq.n	801c088 <tcp_input+0x7b8>
          tcp_ack_now(pcb);
 801c00e:	8b73      	ldrh	r3, [r6, #26]
          pcb->state = CLOSING;
 801c010:	2208      	movs	r2, #8
          tcp_ack_now(pcb);
 801c012:	f043 0302 	orr.w	r3, r3, #2
          pcb->state = CLOSING;
 801c016:	7532      	strb	r2, [r6, #20]
          tcp_ack_now(pcb);
 801c018:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801c01a:	e5ec      	b.n	801bbf6 <tcp_input+0x326>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801c01c:	4b13      	ldr	r3, [pc, #76]	; (801c06c <tcp_input+0x79c>)
 801c01e:	781b      	ldrb	r3, [r3, #0]
 801c020:	f003 0212 	and.w	r2, r3, #18
 801c024:	2a12      	cmp	r2, #18
 801c026:	f000 80dd 	beq.w	801c1e4 <tcp_input+0x914>
      else if (flags & TCP_ACK) {
 801c02a:	06d9      	lsls	r1, r3, #27
 801c02c:	f57f ade3 	bpl.w	801bbf6 <tcp_input+0x326>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c030:	9a05      	ldr	r2, [sp, #20]
 801c032:	4630      	mov	r0, r6
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c034:	683b      	ldr	r3, [r7, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c036:	8811      	ldrh	r1, [r2, #0]
 801c038:	4a0d      	ldr	r2, [pc, #52]	; (801c070 <tcp_input+0x7a0>)
 801c03a:	881d      	ldrh	r5, [r3, #0]
 801c03c:	6812      	ldr	r2, [r2, #0]
 801c03e:	9502      	str	r5, [sp, #8]
 801c040:	440a      	add	r2, r1
 801c042:	885b      	ldrh	r3, [r3, #2]
 801c044:	490e      	ldr	r1, [pc, #56]	; (801c080 <tcp_input+0x7b0>)
 801c046:	6809      	ldr	r1, [r1, #0]
 801c048:	9301      	str	r3, [sp, #4]
 801c04a:	4b0e      	ldr	r3, [pc, #56]	; (801c084 <tcp_input+0x7b4>)
 801c04c:	9300      	str	r3, [sp, #0]
 801c04e:	3304      	adds	r3, #4
 801c050:	f001 fa38 	bl	801d4c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c054:	f896 3042 	ldrb.w	r3, [r6, #66]	; 0x42
 801c058:	2b05      	cmp	r3, #5
 801c05a:	f63f adcc 	bhi.w	801bbf6 <tcp_input+0x326>
          pcb->rtime = 0;
 801c05e:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801c060:	4630      	mov	r0, r6
          pcb->rtime = 0;
 801c062:	8633      	strh	r3, [r6, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c064:	f001 fcca 	bl	801d9fc <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801c068:	e5c5      	b.n	801bbf6 <tcp_input+0x326>
 801c06a:	bf00      	nop
 801c06c:	2001aa38 	.word	0x2001aa38
 801c070:	2001aa58 	.word	0x2001aa58
 801c074:	2002e498 	.word	0x2002e498
 801c078:	2002e494 	.word	0x2002e494
 801c07c:	2002e49c 	.word	0x2002e49c
 801c080:	2001aa34 	.word	0x2001aa34
 801c084:	2001f474 	.word	0x2001f474
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c088:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d1bf      	bne.n	801c00e <tcp_input+0x73e>
          tcp_ack_now(pcb);
 801c08e:	8b73      	ldrh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801c090:	4630      	mov	r0, r6
          tcp_ack_now(pcb);
 801c092:	f043 0302 	orr.w	r3, r3, #2
 801c096:	8373      	strh	r3, [r6, #26]
          tcp_pcb_purge(pcb);
 801c098:	f7fd fe08 	bl	8019cac <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c09c:	4bb4      	ldr	r3, [pc, #720]	; (801c370 <tcp_input+0xaa0>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	42b3      	cmp	r3, r6
 801c0a2:	f040 81b9 	bne.w	801c418 <tcp_input+0xb48>
        TCP_RMV_ACTIVE(pcb);
 801c0a6:	68f3      	ldr	r3, [r6, #12]
 801c0a8:	4ab1      	ldr	r2, [pc, #708]	; (801c370 <tcp_input+0xaa0>)
 801c0aa:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0ac:	4bb1      	ldr	r3, [pc, #708]	; (801c374 <tcp_input+0xaa4>)
        pcb->state = TIME_WAIT;
 801c0ae:	200a      	movs	r0, #10
        TCP_RMV_ACTIVE(pcb);
 801c0b0:	2101      	movs	r1, #1
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0b2:	681a      	ldr	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c0b4:	7530      	strb	r0, [r6, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0b6:	60f2      	str	r2, [r6, #12]
        TCP_RMV_ACTIVE(pcb);
 801c0b8:	4aaf      	ldr	r2, [pc, #700]	; (801c378 <tcp_input+0xaa8>)
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0ba:	601e      	str	r6, [r3, #0]
        TCP_RMV_ACTIVE(pcb);
 801c0bc:	7011      	strb	r1, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c0be:	f001 fdb5 	bl	801dc2c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801c0c2:	e598      	b.n	801bbf6 <tcp_input+0x326>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801c0c4:	4bad      	ldr	r3, [pc, #692]	; (801c37c <tcp_input+0xaac>)
 801c0c6:	22c2      	movs	r2, #194	; 0xc2
 801c0c8:	49ad      	ldr	r1, [pc, #692]	; (801c380 <tcp_input+0xab0>)
 801c0ca:	48ae      	ldr	r0, [pc, #696]	; (801c384 <tcp_input+0xab4>)
 801c0cc:	f007 f80a 	bl	80230e4 <iprintf>
 801c0d0:	e469      	b.n	801b9a6 <tcp_input+0xd6>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801c0d2:	4baa      	ldr	r3, [pc, #680]	; (801c37c <tcp_input+0xaac>)
 801c0d4:	22df      	movs	r2, #223	; 0xdf
 801c0d6:	49ac      	ldr	r1, [pc, #688]	; (801c388 <tcp_input+0xab8>)
 801c0d8:	48aa      	ldr	r0, [pc, #680]	; (801c384 <tcp_input+0xab4>)
 801c0da:	f007 f803 	bl	80230e4 <iprintf>
 801c0de:	8923      	ldrh	r3, [r4, #8]
 801c0e0:	e486      	b.n	801b9f0 <tcp_input+0x120>
        if (pcb->rcv_ann_wnd == 0) {
 801c0e2:	8d73      	ldrh	r3, [r6, #42]	; 0x2a
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f000 80ec 	beq.w	801c2c2 <tcp_input+0x9f2>
        TCP_STATS_INC(tcp.drop);
 801c0ea:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
 801c0ee:	4ca7      	ldr	r4, [pc, #668]	; (801c38c <tcp_input+0xabc>)
 801c0f0:	3301      	adds	r3, #1
 801c0f2:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
        goto aborted;
 801c0f6:	e591      	b.n	801bc1c <tcp_input+0x34c>
        if (recv_acked > 0) {
 801c0f8:	f8bb 2000 	ldrh.w	r2, [fp]
 801c0fc:	b15a      	cbz	r2, 801c116 <tcp_input+0x846>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801c0fe:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 801c102:	b12b      	cbz	r3, 801c110 <tcp_input+0x840>
 801c104:	4631      	mov	r1, r6
 801c106:	6930      	ldr	r0, [r6, #16]
 801c108:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801c10a:	300d      	adds	r0, #13
 801c10c:	f43f ad86 	beq.w	801bc1c <tcp_input+0x34c>
          recv_acked = 0;
 801c110:	2300      	movs	r3, #0
 801c112:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801c116:	4630      	mov	r0, r6
 801c118:	f7fe fe8e 	bl	801ae38 <tcp_input_delayed_close>
 801c11c:	2800      	cmp	r0, #0
 801c11e:	f47f ad7d 	bne.w	801bc1c <tcp_input+0x34c>
        if (recv_data != NULL) {
 801c122:	f8d9 3000 	ldr.w	r3, [r9]
 801c126:	b1fb      	cbz	r3, 801c168 <tcp_input+0x898>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801c128:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801c12a:	b133      	cbz	r3, 801c13a <tcp_input+0x86a>
 801c12c:	4b93      	ldr	r3, [pc, #588]	; (801c37c <tcp_input+0xaac>)
 801c12e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801c132:	4997      	ldr	r1, [pc, #604]	; (801c390 <tcp_input+0xac0>)
 801c134:	4893      	ldr	r0, [pc, #588]	; (801c384 <tcp_input+0xab4>)
 801c136:	f006 ffd5 	bl	80230e4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801c13a:	8b73      	ldrh	r3, [r6, #26]
 801c13c:	f013 0310 	ands.w	r3, r3, #16
 801c140:	f040 80f0 	bne.w	801c324 <tcp_input+0xa54>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801c144:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801c148:	2d00      	cmp	r5, #0
 801c14a:	f000 812b 	beq.w	801c3a4 <tcp_input+0xad4>
 801c14e:	f8d9 2000 	ldr.w	r2, [r9]
 801c152:	4631      	mov	r1, r6
 801c154:	6930      	ldr	r0, [r6, #16]
 801c156:	47a8      	blx	r5
          if (err == ERR_ABRT) {
 801c158:	f110 0f0d 	cmn.w	r0, #13
 801c15c:	f43f ad5e 	beq.w	801bc1c <tcp_input+0x34c>
          if (err != ERR_OK) {
 801c160:	b110      	cbz	r0, 801c168 <tcp_input+0x898>
            pcb->refused_data = recv_data;
 801c162:	f8d9 3000 	ldr.w	r3, [r9]
 801c166:	67b3      	str	r3, [r6, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801c168:	f89a 3000 	ldrb.w	r3, [sl]
 801c16c:	069a      	lsls	r2, r3, #26
 801c16e:	d507      	bpl.n	801c180 <tcp_input+0x8b0>
          if (pcb->refused_data != NULL) {
 801c170:	6fb3      	ldr	r3, [r6, #120]	; 0x78
 801c172:	2b00      	cmp	r3, #0
 801c174:	f000 80c2 	beq.w	801c2fc <tcp_input+0xa2c>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801c178:	7b5a      	ldrb	r2, [r3, #13]
 801c17a:	f042 0220 	orr.w	r2, r2, #32
 801c17e:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801c180:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801c182:	4630      	mov	r0, r6
        tcp_input_pcb = NULL;
 801c184:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801c186:	f7fe fe57 	bl	801ae38 <tcp_input_delayed_close>
 801c18a:	2800      	cmp	r0, #0
 801c18c:	f47f ad46 	bne.w	801bc1c <tcp_input+0x34c>
        tcp_output(pcb);
 801c190:	4630      	mov	r0, r6
 801c192:	f001 fa17 	bl	801d5c4 <tcp_output>
 801c196:	e541      	b.n	801bc1c <tcp_input+0x34c>
 801c198:	6839      	ldr	r1, [r7, #0]
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801c19a:	8988      	ldrh	r0, [r1, #12]
 801c19c:	f7fb f836 	bl	801720c <lwip_htons>
 801c1a0:	f010 0004 	ands.w	r0, r0, #4
 801c1a4:	f47f adab 	bne.w	801bcfe <tcp_input+0x42e>
      TCP_STATS_INC(tcp.proterr);
 801c1a8:	f8b5 10a0 	ldrh.w	r1, [r5, #160]	; 0xa0
      TCP_STATS_INC(tcp.drop);
 801c1ac:	f8b5 3096 	ldrh.w	r3, [r5, #150]	; 0x96
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c1b0:	683e      	ldr	r6, [r7, #0]
      TCP_STATS_INC(tcp.proterr);
 801c1b2:	3101      	adds	r1, #1
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c1b4:	9a05      	ldr	r2, [sp, #20]
      TCP_STATS_INC(tcp.drop);
 801c1b6:	3301      	adds	r3, #1
      TCP_STATS_INC(tcp.proterr);
 801c1b8:	f8a5 10a0 	strh.w	r1, [r5, #160]	; 0xa0
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c1bc:	8817      	ldrh	r7, [r2, #0]
      TCP_STATS_INC(tcp.drop);
 801c1be:	f8a5 3096 	strh.w	r3, [r5, #150]	; 0x96
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c1c2:	4a74      	ldr	r2, [pc, #464]	; (801c394 <tcp_input+0xac4>)
 801c1c4:	8833      	ldrh	r3, [r6, #0]
 801c1c6:	4974      	ldr	r1, [pc, #464]	; (801c398 <tcp_input+0xac8>)
 801c1c8:	6812      	ldr	r2, [r2, #0]
 801c1ca:	6809      	ldr	r1, [r1, #0]
 801c1cc:	9302      	str	r3, [sp, #8]
 801c1ce:	443a      	add	r2, r7
 801c1d0:	8875      	ldrh	r5, [r6, #2]
 801c1d2:	4b72      	ldr	r3, [pc, #456]	; (801c39c <tcp_input+0xacc>)
 801c1d4:	9501      	str	r5, [sp, #4]
 801c1d6:	1f1d      	subs	r5, r3, #4
 801c1d8:	9500      	str	r5, [sp, #0]
 801c1da:	f001 f973 	bl	801d4c4 <tcp_rst>
        pbuf_free(p);
 801c1de:	4620      	mov	r0, r4
 801c1e0:	f7ff bb95 	b.w	801b90e <tcp_input+0x3e>
          && (ackno == pcb->lastack + 1)) {
 801c1e4:	6c71      	ldr	r1, [r6, #68]	; 0x44
 801c1e6:	4a6c      	ldr	r2, [pc, #432]	; (801c398 <tcp_input+0xac8>)
 801c1e8:	3101      	adds	r1, #1
 801c1ea:	6812      	ldr	r2, [r2, #0]
 801c1ec:	4291      	cmp	r1, r2
 801c1ee:	f47f af1c 	bne.w	801c02a <tcp_input+0x75a>
        pcb->rcv_nxt = seqno + 1;
 801c1f2:	4b68      	ldr	r3, [pc, #416]	; (801c394 <tcp_input+0xac4>)
        pcb->state = ESTABLISHED;
 801c1f4:	2504      	movs	r5, #4
        pcb->snd_wnd = tcphdr->wnd;
 801c1f6:	f8d7 c000 	ldr.w	ip, [r7]
        pcb->rcv_nxt = seqno + 1;
 801c1fa:	681b      	ldr	r3, [r3, #0]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c1fc:	1972      	adds	r2, r6, r5
        pcb->lastack = ackno;
 801c1fe:	6471      	str	r1, [r6, #68]	; 0x44
        pcb->rcv_nxt = seqno + 1;
 801c200:	1c5f      	adds	r7, r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c202:	9205      	str	r2, [sp, #20]
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c204:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c206:	4610      	mov	r0, r2
        pcb->rcv_nxt = seqno + 1;
 801c208:	6277      	str	r7, [r6, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801c20a:	62f7      	str	r7, [r6, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801c20c:	f8bc 100e 	ldrh.w	r1, [ip, #14]
        pcb->state = ESTABLISHED;
 801c210:	7535      	strb	r5, [r6, #20]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c212:	8e75      	ldrh	r5, [r6, #50]	; 0x32
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801c214:	6573      	str	r3, [r6, #84]	; 0x54
        pcb->snd_wnd = tcphdr->wnd;
 801c216:	f8a6 1060 	strh.w	r1, [r6, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c21a:	f8a6 1062 	strh.w	r1, [r6, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c21e:	f004 fb0f 	bl	8020840 <ip4_route>
 801c222:	9a05      	ldr	r2, [sp, #20]
 801c224:	4601      	mov	r1, r0
 801c226:	4628      	mov	r0, r5
 801c228:	f7fe fc0a 	bl	801aa40 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c22c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c230:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801c232:	8670      	strh	r0, [r6, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c234:	0081      	lsls	r1, r0, #2
 801c236:	429a      	cmp	r2, r3
 801c238:	4615      	mov	r5, r2
 801c23a:	bf38      	it	cc
 801c23c:	461d      	movcc	r5, r3
 801c23e:	ebb5 0f80 	cmp.w	r5, r0, lsl #2
 801c242:	f240 815d 	bls.w	801c500 <tcp_input+0xc30>
 801c246:	b28b      	uxth	r3, r1
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c248:	f8b6 2066 	ldrh.w	r2, [r6, #102]	; 0x66
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c24c:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c250:	2a00      	cmp	r2, #0
 801c252:	f000 814d 	beq.w	801c4f0 <tcp_input+0xc20>
        --pcb->snd_queuelen;
 801c256:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
        rseg = pcb->unacked;
 801c25a:	6f35      	ldr	r5, [r6, #112]	; 0x70
        --pcb->snd_queuelen;
 801c25c:	3b01      	subs	r3, #1
 801c25e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
        if (rseg == NULL) {
 801c262:	2d00      	cmp	r5, #0
 801c264:	f000 813f 	beq.w	801c4e6 <tcp_input+0xc16>
          pcb->unacked = rseg->next;
 801c268:	682b      	ldr	r3, [r5, #0]
 801c26a:	6733      	str	r3, [r6, #112]	; 0x70
        tcp_seg_free(rseg);
 801c26c:	4628      	mov	r0, r5
 801c26e:	f7fd fc49 	bl	8019b04 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801c272:	6f33      	ldr	r3, [r6, #112]	; 0x70
 801c274:	2b00      	cmp	r3, #0
 801c276:	f000 8132 	beq.w	801c4de <tcp_input+0xc0e>
          pcb->rtime = 0;
 801c27a:	2300      	movs	r3, #0
 801c27c:	8633      	strh	r3, [r6, #48]	; 0x30
          pcb->nrtx = 0;
 801c27e:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c282:	f8d6 3088 	ldr.w	r3, [r6, #136]	; 0x88
 801c286:	b133      	cbz	r3, 801c296 <tcp_input+0x9c6>
 801c288:	2200      	movs	r2, #0
 801c28a:	4631      	mov	r1, r6
 801c28c:	6930      	ldr	r0, [r6, #16]
 801c28e:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801c290:	300d      	adds	r0, #13
 801c292:	f43f acc3 	beq.w	801bc1c <tcp_input+0x34c>
        tcp_ack_now(pcb);
 801c296:	8b73      	ldrh	r3, [r6, #26]
 801c298:	f043 0302 	orr.w	r3, r3, #2
 801c29c:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801c29e:	e4aa      	b.n	801bbf6 <tcp_input+0x326>
      if (ackno == pcb->snd_nxt) {
 801c2a0:	4b3d      	ldr	r3, [pc, #244]	; (801c398 <tcp_input+0xac8>)
 801c2a2:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801c2a4:	681b      	ldr	r3, [r3, #0]
 801c2a6:	429a      	cmp	r2, r3
 801c2a8:	f47f aca5 	bne.w	801bbf6 <tcp_input+0x326>
      recv_flags |= TF_RESET;
 801c2ac:	f89a 2000 	ldrb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c2b0:	8b73      	ldrh	r3, [r6, #26]
      recv_flags |= TF_RESET;
 801c2b2:	f042 0208 	orr.w	r2, r2, #8
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c2b6:	f023 0301 	bic.w	r3, r3, #1
      recv_flags |= TF_RESET;
 801c2ba:	f88a 2000 	strb.w	r2, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801c2be:	8373      	strh	r3, [r6, #26]
    if (err != ERR_ABRT) {
 801c2c0:	e499      	b.n	801bbf6 <tcp_input+0x326>
          tcp_send_empty_ack(pcb);
 801c2c2:	4630      	mov	r0, r6
 801c2c4:	f001 f94a 	bl	801d55c <tcp_send_empty_ack>
 801c2c8:	e70f      	b.n	801c0ea <tcp_input+0x81a>
        TCP_STATS_INC(tcp.cachehit);
 801c2ca:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801c2ce:	3201      	adds	r2, #1
 801c2d0:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801c2d4:	e573      	b.n	801bdbe <tcp_input+0x4ee>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2d6:	9a05      	ldr	r2, [sp, #20]
 801c2d8:	4630      	mov	r0, r6
 801c2da:	8809      	ldrh	r1, [r1, #0]
 801c2dc:	8815      	ldrh	r5, [r2, #0]
 801c2de:	4a2d      	ldr	r2, [pc, #180]	; (801c394 <tcp_input+0xac4>)
 801c2e0:	6812      	ldr	r2, [r2, #0]
 801c2e2:	442a      	add	r2, r5
 801c2e4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801c2e8:	4b2d      	ldr	r3, [pc, #180]	; (801c3a0 <tcp_input+0xad0>)
 801c2ea:	9300      	str	r3, [sp, #0]
 801c2ec:	4b2a      	ldr	r3, [pc, #168]	; (801c398 <tcp_input+0xac8>)
 801c2ee:	6819      	ldr	r1, [r3, #0]
 801c2f0:	4b2a      	ldr	r3, [pc, #168]	; (801c39c <tcp_input+0xacc>)
 801c2f2:	f001 f8e7 	bl	801d4c4 <tcp_rst>
        pbuf_free(p);
 801c2f6:	4620      	mov	r0, r4
 801c2f8:	f7ff bb09 	b.w	801b90e <tcp_input+0x3e>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c2fc:	8d33      	ldrh	r3, [r6, #40]	; 0x28
 801c2fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c302:	d001      	beq.n	801c308 <tcp_input+0xa38>
              pcb->rcv_wnd++;
 801c304:	3301      	adds	r3, #1
 801c306:	8533      	strh	r3, [r6, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801c308:	f8d6 5084 	ldr.w	r5, [r6, #132]	; 0x84
 801c30c:	2d00      	cmp	r5, #0
 801c30e:	f43f af37 	beq.w	801c180 <tcp_input+0x8b0>
 801c312:	2300      	movs	r3, #0
 801c314:	4631      	mov	r1, r6
 801c316:	6930      	ldr	r0, [r6, #16]
 801c318:	461a      	mov	r2, r3
 801c31a:	47a8      	blx	r5
            if (err == ERR_ABRT) {
 801c31c:	300d      	adds	r0, #13
 801c31e:	f47f af2f 	bne.w	801c180 <tcp_input+0x8b0>
 801c322:	e47b      	b.n	801bc1c <tcp_input+0x34c>
            pbuf_free(recv_data);
 801c324:	f8d9 0000 	ldr.w	r0, [r9]
 801c328:	f7fc fdc4 	bl	8018eb4 <pbuf_free>
            tcp_abort(pcb);
 801c32c:	4630      	mov	r0, r6
 801c32e:	f7fe f885 	bl	801a43c <tcp_abort>
            goto aborted;
 801c332:	e473      	b.n	801bc1c <tcp_input+0x34c>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c334:	06db      	lsls	r3, r3, #27
 801c336:	f57f ac5e 	bpl.w	801bbf6 <tcp_input+0x326>
 801c33a:	4b17      	ldr	r3, [pc, #92]	; (801c398 <tcp_input+0xac8>)
 801c33c:	6d32      	ldr	r2, [r6, #80]	; 0x50
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	429a      	cmp	r2, r3
 801c342:	f47f ac58 	bne.w	801bbf6 <tcp_input+0x326>
 801c346:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 801c348:	2b00      	cmp	r3, #0
 801c34a:	f47f ac54 	bne.w	801bbf6 <tcp_input+0x326>
        pcb->state = FIN_WAIT_2;
 801c34e:	2306      	movs	r3, #6
 801c350:	7533      	strb	r3, [r6, #20]
    if (err != ERR_ABRT) {
 801c352:	e450      	b.n	801bbf6 <tcp_input+0x326>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c354:	0798      	lsls	r0, r3, #30
 801c356:	f57f ac4e 	bpl.w	801bbf6 <tcp_input+0x326>
 801c35a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801c35c:	4a0d      	ldr	r2, [pc, #52]	; (801c394 <tcp_input+0xac4>)
 801c35e:	3b01      	subs	r3, #1
 801c360:	6812      	ldr	r2, [r2, #0]
 801c362:	4293      	cmp	r3, r2
 801c364:	f47f ac47 	bne.w	801bbf6 <tcp_input+0x326>
        tcp_rexmit(pcb);
 801c368:	4630      	mov	r0, r6
 801c36a:	f001 f82d 	bl	801d3c8 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801c36e:	e442      	b.n	801bbf6 <tcp_input+0x326>
 801c370:	2002e498 	.word	0x2002e498
 801c374:	2002e4a8 	.word	0x2002e4a8
 801c378:	2002e494 	.word	0x2002e494
 801c37c:	08041300 	.word	0x08041300
 801c380:	08041524 	.word	0x08041524
 801c384:	08029ba0 	.word	0x08029ba0
 801c388:	08041534 	.word	0x08041534
 801c38c:	2002e4ac 	.word	0x2002e4ac
 801c390:	080416d0 	.word	0x080416d0
 801c394:	2001aa58 	.word	0x2001aa58
 801c398:	2001aa34 	.word	0x2001aa34
 801c39c:	2001f478 	.word	0x2001f478
 801c3a0:	2001f474 	.word	0x2001f474
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801c3a4:	462b      	mov	r3, r5
 801c3a6:	4628      	mov	r0, r5
 801c3a8:	f8d9 2000 	ldr.w	r2, [r9]
 801c3ac:	4631      	mov	r1, r6
 801c3ae:	f7fe fa69 	bl	801a884 <tcp_recv_null>
 801c3b2:	e6d1      	b.n	801c158 <tcp_input+0x888>
      TCP_STATS_INC(tcp.memerr);
 801c3b4:	f8b5 309c 	ldrh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c3b8:	69b7      	ldr	r7, [r6, #24]
      TCP_STATS_INC(tcp.memerr);
 801c3ba:	3301      	adds	r3, #1
 801c3bc:	f8a5 309c 	strh.w	r3, [r5, #156]	; 0x9c
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801c3c0:	2f00      	cmp	r7, #0
 801c3c2:	f43f ac9c 	beq.w	801bcfe <tcp_input+0x42e>
 801c3c6:	4601      	mov	r1, r0
 801c3c8:	f04f 32ff 	mov.w	r2, #4294967295
 801c3cc:	6930      	ldr	r0, [r6, #16]
 801c3ce:	47b8      	blx	r7
        pbuf_free(p);
 801c3d0:	4620      	mov	r0, r4
 801c3d2:	f7ff ba9c 	b.w	801b90e <tcp_input+0x3e>
        TCP_STATS_INC(tcp.cachehit);
 801c3d6:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
 801c3da:	3201      	adds	r2, #1
 801c3dc:	f8a5 20a6 	strh.w	r2, [r5, #166]	; 0xa6
 801c3e0:	f7ff bbbe 	b.w	801bb60 <tcp_input+0x290>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801c3e4:	4b4c      	ldr	r3, [pc, #304]	; (801c518 <tcp_input+0xc48>)
 801c3e6:	f240 1215 	movw	r2, #277	; 0x115
 801c3ea:	494c      	ldr	r1, [pc, #304]	; (801c51c <tcp_input+0xc4c>)
 801c3ec:	484c      	ldr	r0, [pc, #304]	; (801c520 <tcp_input+0xc50>)
 801c3ee:	f006 fe79 	bl	80230e4 <iprintf>
 801c3f2:	f7ff bbb8 	b.w	801bb66 <tcp_input+0x296>
        TCP_RMV_ACTIVE(pcb);
 801c3f6:	68f2      	ldr	r2, [r6, #12]
 801c3f8:	60da      	str	r2, [r3, #12]
 801c3fa:	e657      	b.n	801c0ac <tcp_input+0x7dc>
  } else if (flags & TCP_FIN) {
 801c3fc:	07d5      	lsls	r5, r2, #31
 801c3fe:	f57f ac79 	bpl.w	801bcf4 <tcp_input+0x424>
    pcb->tmr = tcp_ticks;
 801c402:	4b48      	ldr	r3, [pc, #288]	; (801c524 <tcp_input+0xc54>)
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	6233      	str	r3, [r6, #32]
 801c408:	e474      	b.n	801bcf4 <tcp_input+0x424>
      tcp_abandon(npcb, 0);
 801c40a:	4650      	mov	r0, sl
 801c40c:	4649      	mov	r1, r9
 801c40e:	f7fd ff75 	bl	801a2fc <tcp_abandon>
        pbuf_free(p);
 801c412:	4620      	mov	r0, r4
 801c414:	f7ff ba7b 	b.w	801b90e <tcp_input+0x3e>
          TCP_RMV_ACTIVE(pcb);
 801c418:	2b00      	cmp	r3, #0
 801c41a:	f43f ae47 	beq.w	801c0ac <tcp_input+0x7dc>
 801c41e:	68da      	ldr	r2, [r3, #12]
 801c420:	42b2      	cmp	r2, r6
 801c422:	d0e8      	beq.n	801c3f6 <tcp_input+0xb26>
 801c424:	4613      	mov	r3, r2
 801c426:	e7f7      	b.n	801c418 <tcp_input+0xb48>
          pcb->state = ESTABLISHED;
 801c428:	2204      	movs	r2, #4
          if (pcb->listener == NULL) {
 801c42a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
          pcb->state = ESTABLISHED;
 801c42c:	7532      	strb	r2, [r6, #20]
          if (pcb->listener == NULL) {
 801c42e:	2b00      	cmp	r3, #0
 801c430:	f43f af7c 	beq.w	801c32c <tcp_input+0xa5c>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c434:	699b      	ldr	r3, [r3, #24]
 801c436:	b353      	cbz	r3, 801c48e <tcp_input+0xbbe>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c438:	2200      	movs	r2, #0
 801c43a:	4631      	mov	r1, r6
 801c43c:	6930      	ldr	r0, [r6, #16]
 801c43e:	4798      	blx	r3
          if (err != ERR_OK) {
 801c440:	b9e8      	cbnz	r0, 801c47e <tcp_input+0xbae>
          tcp_receive(pcb);
 801c442:	4630      	mov	r0, r6
 801c444:	f7fe fd94 	bl	801af70 <tcp_receive>
          if (recv_acked != 0) {
 801c448:	f8bb 3000 	ldrh.w	r3, [fp]
 801c44c:	b113      	cbz	r3, 801c454 <tcp_input+0xb84>
            recv_acked--;
 801c44e:	3b01      	subs	r3, #1
 801c450:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c454:	8e71      	ldrh	r1, [r6, #50]	; 0x32
 801c456:	f241 131c 	movw	r3, #4380	; 0x111c
 801c45a:	004a      	lsls	r2, r1, #1
 801c45c:	0088      	lsls	r0, r1, #2
 801c45e:	429a      	cmp	r2, r3
 801c460:	4615      	mov	r5, r2
 801c462:	bf38      	it	cc
 801c464:	461d      	movcc	r5, r3
 801c466:	ebb5 0f81 	cmp.w	r5, r1, lsl #2
 801c46a:	d90c      	bls.n	801c486 <tcp_input+0xbb6>
 801c46c:	b283      	uxth	r3, r0
          if (recv_flags & TF_GOT_FIN) {
 801c46e:	f89a 2000 	ldrb.w	r2, [sl]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c472:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801c476:	0695      	lsls	r5, r2, #26
 801c478:	f57f abbd 	bpl.w	801bbf6 <tcp_input+0x326>
 801c47c:	e536      	b.n	801beec <tcp_input+0x61c>
            if (err != ERR_ABRT) {
 801c47e:	300d      	adds	r0, #13
 801c480:	f43f abcc 	beq.w	801bc1c <tcp_input+0x34c>
 801c484:	e752      	b.n	801c32c <tcp_input+0xa5c>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c486:	429a      	cmp	r2, r3
 801c488:	bf88      	it	hi
 801c48a:	b293      	uxthhi	r3, r2
 801c48c:	e7ef      	b.n	801c46e <tcp_input+0xb9e>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c48e:	4b22      	ldr	r3, [pc, #136]	; (801c518 <tcp_input+0xc48>)
 801c490:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c494:	4924      	ldr	r1, [pc, #144]	; (801c528 <tcp_input+0xc58>)
 801c496:	4822      	ldr	r0, [pc, #136]	; (801c520 <tcp_input+0xc50>)
 801c498:	f006 fe24 	bl	80230e4 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c49c:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
 801c49e:	699b      	ldr	r3, [r3, #24]
 801c4a0:	2b00      	cmp	r3, #0
 801c4a2:	d1c9      	bne.n	801c438 <tcp_input+0xb68>
 801c4a4:	e742      	b.n	801c32c <tcp_input+0xa5c>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801c4a6:	2900      	cmp	r1, #0
 801c4a8:	f47f af00 	bne.w	801c2ac <tcp_input+0x9dc>
 801c4ac:	4b1a      	ldr	r3, [pc, #104]	; (801c518 <tcp_input+0xc48>)
 801c4ae:	f44f 724e 	mov.w	r2, #824	; 0x338
 801c4b2:	491e      	ldr	r1, [pc, #120]	; (801c52c <tcp_input+0xc5c>)
 801c4b4:	481a      	ldr	r0, [pc, #104]	; (801c520 <tcp_input+0xc50>)
 801c4b6:	f006 fe15 	bl	80230e4 <iprintf>
 801c4ba:	e6f7      	b.n	801c2ac <tcp_input+0x9dc>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c4bc:	9805      	ldr	r0, [sp, #20]
 801c4be:	8805      	ldrh	r5, [r0, #0]
 801c4c0:	4630      	mov	r0, r6
 801c4c2:	9102      	str	r1, [sp, #8]
 801c4c4:	442a      	add	r2, r5
 801c4c6:	9301      	str	r3, [sp, #4]
 801c4c8:	e70e      	b.n	801c2e8 <tcp_input+0xa18>
    tcp_ack_now(pcb);
 801c4ca:	8b73      	ldrh	r3, [r6, #26]
    tcp_output(pcb);
 801c4cc:	4630      	mov	r0, r6
    tcp_ack_now(pcb);
 801c4ce:	f043 0302 	orr.w	r3, r3, #2
 801c4d2:	8373      	strh	r3, [r6, #26]
    tcp_output(pcb);
 801c4d4:	f001 f876 	bl	801d5c4 <tcp_output>
        pbuf_free(p);
 801c4d8:	4620      	mov	r0, r4
 801c4da:	f7ff ba18 	b.w	801b90e <tcp_input+0x3e>
          pcb->rtime = -1;
 801c4de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801c4e2:	8633      	strh	r3, [r6, #48]	; 0x30
 801c4e4:	e6cd      	b.n	801c282 <tcp_input+0x9b2>
          rseg = pcb->unsent;
 801c4e6:	6ef5      	ldr	r5, [r6, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c4e8:	b175      	cbz	r5, 801c508 <tcp_input+0xc38>
          pcb->unsent = rseg->next;
 801c4ea:	682b      	ldr	r3, [r5, #0]
 801c4ec:	66f3      	str	r3, [r6, #108]	; 0x6c
 801c4ee:	e6bd      	b.n	801c26c <tcp_input+0x99c>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c4f0:	4b09      	ldr	r3, [pc, #36]	; (801c518 <tcp_input+0xc48>)
 801c4f2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c4f6:	490e      	ldr	r1, [pc, #56]	; (801c530 <tcp_input+0xc60>)
 801c4f8:	4809      	ldr	r0, [pc, #36]	; (801c520 <tcp_input+0xc50>)
 801c4fa:	f006 fdf3 	bl	80230e4 <iprintf>
 801c4fe:	e6aa      	b.n	801c256 <tcp_input+0x986>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c500:	429a      	cmp	r2, r3
 801c502:	bf88      	it	hi
 801c504:	b293      	uxthhi	r3, r2
 801c506:	e69f      	b.n	801c248 <tcp_input+0x978>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c508:	4b03      	ldr	r3, [pc, #12]	; (801c518 <tcp_input+0xc48>)
 801c50a:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c50e:	4909      	ldr	r1, [pc, #36]	; (801c534 <tcp_input+0xc64>)
 801c510:	4803      	ldr	r0, [pc, #12]	; (801c520 <tcp_input+0xc50>)
 801c512:	f006 fde7 	bl	80230e4 <iprintf>
 801c516:	e7e8      	b.n	801c4ea <tcp_input+0xc1a>
 801c518:	08041300 	.word	0x08041300
 801c51c:	08041608 	.word	0x08041608
 801c520:	08029ba0 	.word	0x08029ba0
 801c524:	2002e49c 	.word	0x2002e49c
 801c528:	080416b0 	.word	0x080416b0
 801c52c:	08041664 	.word	0x08041664
 801c530:	08041684 	.word	0x08041684
 801c534:	0804169c 	.word	0x0804169c

0801c538 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801c538:	4a02      	ldr	r2, [pc, #8]	; (801c544 <tcp_trigger_input_pcb_close+0xc>)
 801c53a:	7813      	ldrb	r3, [r2, #0]
 801c53c:	f043 0310 	orr.w	r3, r3, #16
 801c540:	7013      	strb	r3, [r2, #0]
}
 801c542:	4770      	bx	lr
 801c544:	2001aa54 	.word	0x2001aa54

0801c548 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801c548:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c54a:	4604      	mov	r4, r0
 801c54c:	b128      	cbz	r0, 801c55a <tcp_output_segment_busy+0x12>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801c54e:	6863      	ldr	r3, [r4, #4]
 801c550:	7b98      	ldrb	r0, [r3, #14]
    /* other reference found */
    return 1;
  }
  /* no other references found */
  return 0;
}
 801c552:	3801      	subs	r0, #1
 801c554:	bf18      	it	ne
 801c556:	2001      	movne	r0, #1
 801c558:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801c55a:	4b04      	ldr	r3, [pc, #16]	; (801c56c <tcp_output_segment_busy+0x24>)
 801c55c:	f240 529a 	movw	r2, #1434	; 0x59a
 801c560:	4903      	ldr	r1, [pc, #12]	; (801c570 <tcp_output_segment_busy+0x28>)
 801c562:	4804      	ldr	r0, [pc, #16]	; (801c574 <tcp_output_segment_busy+0x2c>)
 801c564:	f006 fdbe 	bl	80230e4 <iprintf>
 801c568:	e7f1      	b.n	801c54e <tcp_output_segment_busy+0x6>
 801c56a:	bf00      	nop
 801c56c:	080416ec 	.word	0x080416ec
 801c570:	08041720 	.word	0x08041720
 801c574:	08029ba0 	.word	0x08029ba0

0801c578 <tcp_pbuf_prealloc>:
{
 801c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c57c:	9f08      	ldr	r7, [sp, #32]
 801c57e:	4680      	mov	r8, r0
 801c580:	460d      	mov	r5, r1
 801c582:	4614      	mov	r4, r2
 801c584:	461e      	mov	r6, r3
 801c586:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801c58a:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801c58e:	2f00      	cmp	r7, #0
 801c590:	d033      	beq.n	801c5fa <tcp_pbuf_prealloc+0x82>
  if (length < max_length) {
 801c592:	42a5      	cmp	r5, r4
 801c594:	d20e      	bcs.n	801c5b4 <tcp_pbuf_prealloc+0x3c>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c596:	f019 0f02 	tst.w	r9, #2
 801c59a:	d008      	beq.n	801c5ae <tcp_pbuf_prealloc+0x36>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801c59c:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801c5a0:	f021 0103 	bic.w	r1, r1, #3
 801c5a4:	428c      	cmp	r4, r1
 801c5a6:	bf28      	it	cs
 801c5a8:	460c      	movcs	r4, r1
 801c5aa:	b2a1      	uxth	r1, r4
 801c5ac:	e003      	b.n	801c5b6 <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801c5ae:	8b7b      	ldrh	r3, [r7, #26]
 801c5b0:	065b      	lsls	r3, r3, #25
 801c5b2:	d518      	bpl.n	801c5e6 <tcp_pbuf_prealloc+0x6e>
 801c5b4:	4629      	mov	r1, r5
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801c5b6:	4640      	mov	r0, r8
 801c5b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c5bc:	f7fc fce8 	bl	8018f90 <pbuf_alloc>
  if (p == NULL) {
 801c5c0:	4604      	mov	r4, r0
 801c5c2:	b168      	cbz	r0, 801c5e0 <tcp_pbuf_prealloc+0x68>
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801c5c4:	6803      	ldr	r3, [r0, #0]
 801c5c6:	b133      	cbz	r3, 801c5d6 <tcp_pbuf_prealloc+0x5e>
 801c5c8:	4b0f      	ldr	r3, [pc, #60]	; (801c608 <tcp_pbuf_prealloc+0x90>)
 801c5ca:	f240 120b 	movw	r2, #267	; 0x10b
 801c5ce:	490f      	ldr	r1, [pc, #60]	; (801c60c <tcp_pbuf_prealloc+0x94>)
 801c5d0:	480f      	ldr	r0, [pc, #60]	; (801c610 <tcp_pbuf_prealloc+0x98>)
 801c5d2:	f006 fd87 	bl	80230e4 <iprintf>
  *oversize = p->len - length;
 801c5d6:	8963      	ldrh	r3, [r4, #10]
 801c5d8:	1b5b      	subs	r3, r3, r5
 801c5da:	8033      	strh	r3, [r6, #0]
  p->len = p->tot_len = length;
 801c5dc:	8125      	strh	r5, [r4, #8]
 801c5de:	8165      	strh	r5, [r4, #10]
}
 801c5e0:	4620      	mov	r0, r4
 801c5e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801c5e6:	f1ba 0f00 	cmp.w	sl, #0
 801c5ea:	d0d7      	beq.n	801c59c <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801c5ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d1d4      	bne.n	801c59c <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801c5f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801c5f4:	2b00      	cmp	r3, #0
 801c5f6:	d1d1      	bne.n	801c59c <tcp_pbuf_prealloc+0x24>
 801c5f8:	e7dc      	b.n	801c5b4 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801c5fa:	4b03      	ldr	r3, [pc, #12]	; (801c608 <tcp_pbuf_prealloc+0x90>)
 801c5fc:	22e9      	movs	r2, #233	; 0xe9
 801c5fe:	4905      	ldr	r1, [pc, #20]	; (801c614 <tcp_pbuf_prealloc+0x9c>)
 801c600:	4803      	ldr	r0, [pc, #12]	; (801c610 <tcp_pbuf_prealloc+0x98>)
 801c602:	f006 fd6f 	bl	80230e4 <iprintf>
 801c606:	e7c4      	b.n	801c592 <tcp_pbuf_prealloc+0x1a>
 801c608:	080416ec 	.word	0x080416ec
 801c60c:	08041768 	.word	0x08041768
 801c610:	08029ba0 	.word	0x08029ba0
 801c614:	08041748 	.word	0x08041748

0801c618 <tcp_create_segment>:
{
 801c618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c61c:	460e      	mov	r6, r1
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c61e:	4607      	mov	r7, r0
{
 801c620:	4690      	mov	r8, r2
 801c622:	4699      	mov	r9, r3
 801c624:	f89d a020 	ldrb.w	sl, [sp, #32]
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c628:	2800      	cmp	r0, #0
 801c62a:	d04e      	beq.n	801c6ca <tcp_create_segment+0xb2>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c62c:	2e00      	cmp	r6, #0
 801c62e:	d054      	beq.n	801c6da <tcp_create_segment+0xc2>
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c630:	2004      	movs	r0, #4
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c632:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c636:	22a8      	movs	r2, #168	; 0xa8
 801c638:	4934      	ldr	r1, [pc, #208]	; (801c70c <tcp_create_segment+0xf4>)
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801c63a:	4005      	ands	r5, r0
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801c63c:	f7fc f946 	bl	80188cc <memp_malloc_fn>
 801c640:	4604      	mov	r4, r0
 801c642:	2800      	cmp	r0, #0
 801c644:	d05d      	beq.n	801c702 <tcp_create_segment+0xea>
  seg->flags = optflags;
 801c646:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801c64a:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c64c:	8932      	ldrh	r2, [r6, #8]
 801c64e:	fa1f fa85 	uxth.w	sl, r5
 801c652:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801c654:	e9c0 3600 	strd	r3, r6, [r0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c658:	d32f      	bcc.n	801c6ba <tcp_create_segment+0xa2>
  seg->len = p->tot_len - optlen;
 801c65a:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c65e:	4630      	mov	r0, r6
 801c660:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801c662:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801c664:	f7fc fbe6 	bl	8018e34 <pbuf_add_header>
 801c668:	4606      	mov	r6, r0
 801c66a:	2800      	cmp	r0, #0
 801c66c:	d13c      	bne.n	801c6e8 <tcp_create_segment+0xd0>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c66e:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c670:	08ad      	lsrs	r5, r5, #2
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c672:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c674:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c678:	3505      	adds	r5, #5
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801c67a:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c67e:	f7fa fdc5 	bl	801720c <lwip_htons>
 801c682:	4603      	mov	r3, r0
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c684:	8b38      	ldrh	r0, [r7, #24]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801c686:	f8aa 3000 	strh.w	r3, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c68a:	68e7      	ldr	r7, [r4, #12]
 801c68c:	f7fa fdbe 	bl	801720c <lwip_htons>
 801c690:	4603      	mov	r3, r0
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c692:	4648      	mov	r0, r9
 801c694:	f8d4 900c 	ldr.w	r9, [r4, #12]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801c698:	807b      	strh	r3, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c69a:	f7fa fdbb 	bl	8017214 <lwip_htonl>
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c69e:	68e7      	ldr	r7, [r4, #12]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801c6a0:	f8c9 0004 	str.w	r0, [r9, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c6a4:	ea48 3005 	orr.w	r0, r8, r5, lsl #12
 801c6a8:	f7fa fdb0 	bl	801720c <lwip_htons>
  seg->tcphdr->urgp = 0;
 801c6ac:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801c6ae:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801c6b0:	749e      	strb	r6, [r3, #18]
 801c6b2:	74de      	strb	r6, [r3, #19]
}
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801c6ba:	22b0      	movs	r2, #176	; 0xb0
 801c6bc:	4b13      	ldr	r3, [pc, #76]	; (801c70c <tcp_create_segment+0xf4>)
 801c6be:	4914      	ldr	r1, [pc, #80]	; (801c710 <tcp_create_segment+0xf8>)
 801c6c0:	4814      	ldr	r0, [pc, #80]	; (801c714 <tcp_create_segment+0xfc>)
 801c6c2:	f006 fd0f 	bl	80230e4 <iprintf>
 801c6c6:	8932      	ldrh	r2, [r6, #8]
 801c6c8:	e7c7      	b.n	801c65a <tcp_create_segment+0x42>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801c6ca:	4b10      	ldr	r3, [pc, #64]	; (801c70c <tcp_create_segment+0xf4>)
 801c6cc:	22a3      	movs	r2, #163	; 0xa3
 801c6ce:	4912      	ldr	r1, [pc, #72]	; (801c718 <tcp_create_segment+0x100>)
 801c6d0:	4810      	ldr	r0, [pc, #64]	; (801c714 <tcp_create_segment+0xfc>)
 801c6d2:	f006 fd07 	bl	80230e4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801c6d6:	2e00      	cmp	r6, #0
 801c6d8:	d1aa      	bne.n	801c630 <tcp_create_segment+0x18>
 801c6da:	4b0c      	ldr	r3, [pc, #48]	; (801c70c <tcp_create_segment+0xf4>)
 801c6dc:	22a4      	movs	r2, #164	; 0xa4
 801c6de:	490f      	ldr	r1, [pc, #60]	; (801c71c <tcp_create_segment+0x104>)
 801c6e0:	480c      	ldr	r0, [pc, #48]	; (801c714 <tcp_create_segment+0xfc>)
 801c6e2:	f006 fcff 	bl	80230e4 <iprintf>
 801c6e6:	e7a3      	b.n	801c630 <tcp_create_segment+0x18>
    TCP_STATS_INC(tcp.err);
 801c6e8:	4a0d      	ldr	r2, [pc, #52]	; (801c720 <tcp_create_segment+0x108>)
    tcp_seg_free(seg);
 801c6ea:	4620      	mov	r0, r4
    return NULL;
 801c6ec:	2400      	movs	r4, #0
    TCP_STATS_INC(tcp.err);
 801c6ee:	f8b2 30a4 	ldrh.w	r3, [r2, #164]	; 0xa4
 801c6f2:	3301      	adds	r3, #1
 801c6f4:	f8a2 30a4 	strh.w	r3, [r2, #164]	; 0xa4
    tcp_seg_free(seg);
 801c6f8:	f7fd fa04 	bl	8019b04 <tcp_seg_free>
}
 801c6fc:	4620      	mov	r0, r4
 801c6fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801c702:	4630      	mov	r0, r6
 801c704:	f7fc fbd6 	bl	8018eb4 <pbuf_free>
    return NULL;
 801c708:	e7d4      	b.n	801c6b4 <tcp_create_segment+0x9c>
 801c70a:	bf00      	nop
 801c70c:	080416ec 	.word	0x080416ec
 801c710:	080417c0 	.word	0x080417c0
 801c714:	08029ba0 	.word	0x08029ba0
 801c718:	0804177c 	.word	0x0804177c
 801c71c:	0804179c 	.word	0x0804179c
 801c720:	2002e38c 	.word	0x2002e38c

0801c724 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c724:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801c726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c72a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801c72c:	4606      	mov	r6, r0
 801c72e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c730:	2022      	movs	r0, #34	; 0x22
 801c732:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801c736:	461c      	mov	r4, r3
 801c738:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801c73c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801c740:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801c744:	f7fc fc24 	bl	8018f90 <pbuf_alloc>
  if (p != NULL) {
 801c748:	4605      	mov	r5, r0
 801c74a:	b310      	cbz	r0, 801c792 <tcp_output_alloc_header_common.constprop.0+0x6e>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c74c:	8943      	ldrh	r3, [r0, #10]
 801c74e:	2b13      	cmp	r3, #19
 801c750:	d922      	bls.n	801c798 <tcp_output_alloc_header_common.constprop.0+0x74>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801c752:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801c754:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801c756:	f7fa fd59 	bl	801720c <lwip_htons>
 801c75a:	4603      	mov	r3, r0
    tcphdr->dest = lwip_htons(dst_port);
 801c75c:	4650      	mov	r0, sl
    tcphdr->src = lwip_htons(src_port);
 801c75e:	8023      	strh	r3, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801c760:	f7fa fd54 	bl	801720c <lwip_htons>
 801c764:	4603      	mov	r3, r0
    tcphdr->seqno = seqno_be;
 801c766:	6067      	str	r7, [r4, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801c768:	4630      	mov	r0, r6
    tcphdr->dest = lwip_htons(dst_port);
 801c76a:	8063      	strh	r3, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801c76c:	f7fa fd52 	bl	8017214 <lwip_htonl>
 801c770:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c772:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801c776:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c778:	f7fa fd48 	bl	801720c <lwip_htons>
 801c77c:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801c77e:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801c780:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801c782:	f7fa fd43 	bl	801720c <lwip_htons>
    tcphdr->chksum = 0;
 801c786:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801c788:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801c78a:	7423      	strb	r3, [r4, #16]
 801c78c:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801c78e:	74a3      	strb	r3, [r4, #18]
 801c790:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801c792:	4628      	mov	r0, r5
 801c794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801c798:	4b03      	ldr	r3, [pc, #12]	; (801c7a8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801c79a:	f240 7223 	movw	r2, #1827	; 0x723
 801c79e:	4903      	ldr	r1, [pc, #12]	; (801c7ac <tcp_output_alloc_header_common.constprop.0+0x88>)
 801c7a0:	4803      	ldr	r0, [pc, #12]	; (801c7b0 <tcp_output_alloc_header_common.constprop.0+0x8c>)
 801c7a2:	f006 fc9f 	bl	80230e4 <iprintf>
 801c7a6:	e7d4      	b.n	801c752 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801c7a8:	080416ec 	.word	0x080416ec
 801c7ac:	080417d8 	.word	0x080417d8
 801c7b0:	08029ba0 	.word	0x08029ba0

0801c7b4 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7b6:	460d      	mov	r5, r1
 801c7b8:	b085      	sub	sp, #20
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c7ba:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801c7bc:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c7be:	b190      	cbz	r0, 801c7e6 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801c7c0:	8b23      	ldrh	r3, [r4, #24]
 801c7c2:	2010      	movs	r0, #16
 801c7c4:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 801c7c6:	4632      	mov	r2, r6
 801c7c8:	9300      	str	r3, [sp, #0]
 801c7ca:	4629      	mov	r1, r5
 801c7cc:	e9cd 0701 	strd	r0, r7, [sp, #4]
 801c7d0:	8ae3      	ldrh	r3, [r4, #22]
 801c7d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801c7d4:	f7ff ffa6 	bl	801c724 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801c7d8:	b118      	cbz	r0, 801c7e2 <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801c7da:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801c7dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801c7de:	4413      	add	r3, r2
 801c7e0:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801c7e2:	b005      	add	sp, #20
 801c7e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801c7e6:	4b04      	ldr	r3, [pc, #16]	; (801c7f8 <tcp_output_alloc_header.constprop.0+0x44>)
 801c7e8:	f240 7242 	movw	r2, #1858	; 0x742
 801c7ec:	4903      	ldr	r1, [pc, #12]	; (801c7fc <tcp_output_alloc_header.constprop.0+0x48>)
 801c7ee:	4804      	ldr	r0, [pc, #16]	; (801c800 <tcp_output_alloc_header.constprop.0+0x4c>)
 801c7f0:	f006 fc78 	bl	80230e4 <iprintf>
 801c7f4:	e7e4      	b.n	801c7c0 <tcp_output_alloc_header.constprop.0+0xc>
 801c7f6:	bf00      	nop
 801c7f8:	080416ec 	.word	0x080416ec
 801c7fc:	08041808 	.word	0x08041808
 801c800:	08029ba0 	.word	0x08029ba0

0801c804 <tcp_output_fill_options.isra.0.constprop.0>:
{
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c804:	b100      	cbz	r0, 801c808 <tcp_output_fill_options.isra.0.constprop.0+0x4>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801c806:	4770      	bx	lr
  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801c808:	4b03      	ldr	r3, [pc, #12]	; (801c818 <tcp_output_fill_options.isra.0.constprop.0+0x14>)
 801c80a:	f240 7256 	movw	r2, #1878	; 0x756
 801c80e:	4903      	ldr	r1, [pc, #12]	; (801c81c <tcp_output_fill_options.isra.0.constprop.0+0x18>)
 801c810:	4803      	ldr	r0, [pc, #12]	; (801c820 <tcp_output_fill_options.isra.0.constprop.0+0x1c>)
 801c812:	f006 bc67 	b.w	80230e4 <iprintf>
 801c816:	bf00      	nop
 801c818:	080416ec 	.word	0x080416ec
 801c81c:	08041830 	.word	0x08041830
 801c820:	08029ba0 	.word	0x08029ba0

0801c824 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801c824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c828:	4605      	mov	r5, r0
 801c82a:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c82c:	460c      	mov	r4, r1
{
 801c82e:	4690      	mov	r8, r2
 801c830:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c832:	2900      	cmp	r1, #0
 801c834:	d03b      	beq.n	801c8ae <tcp_output_control_segment+0x8a>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801c836:	2d00      	cmp	r5, #0
 801c838:	d041      	beq.n	801c8be <tcp_output_control_segment+0x9a>
 801c83a:	7a28      	ldrb	r0, [r5, #8]
 801c83c:	bb48      	cbnz	r0, 801c892 <tcp_output_control_segment+0x6e>
    return ip_route(src, dst);
 801c83e:	4630      	mov	r0, r6
 801c840:	f003 fffe 	bl	8020840 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801c844:	4607      	mov	r7, r0
 801c846:	b348      	cbz	r0, 801c89c <tcp_output_control_segment+0x78>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c848:	9600      	str	r6, [sp, #0]
 801c84a:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801c84c:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c850:	2106      	movs	r1, #6
 801c852:	8922      	ldrh	r2, [r4, #8]
 801c854:	4620      	mov	r0, r4
 801c856:	f7fb fa8b 	bl	8017d70 <ip_chksum_pseudo>
 801c85a:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801c85e:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801c860:	7aa9      	ldrb	r1, [r5, #10]
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
 801c862:	f8df c090 	ldr.w	ip, [pc, #144]	; 801c8f4 <tcp_output_control_segment+0xd0>
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c866:	2006      	movs	r0, #6
 801c868:	4632      	mov	r2, r6
 801c86a:	9100      	str	r1, [sp, #0]
    TCP_STATS_INC(tcp.xmit);
 801c86c:	f8bc 5090 	ldrh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c870:	4641      	mov	r1, r8
 801c872:	9001      	str	r0, [sp, #4]
 801c874:	4620      	mov	r0, r4
    TCP_STATS_INC(tcp.xmit);
 801c876:	3501      	adds	r5, #1
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c878:	9702      	str	r7, [sp, #8]
    TCP_STATS_INC(tcp.xmit);
 801c87a:	f8ac 5090 	strh.w	r5, [ip, #144]	; 0x90
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801c87e:	f004 f9f9 	bl	8020c74 <ip4_output_if>
 801c882:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801c884:	4620      	mov	r0, r4
 801c886:	f7fc fb15 	bl	8018eb4 <pbuf_free>
  return err;
}
 801c88a:	4628      	mov	r0, r5
 801c88c:	b005      	add	sp, #20
 801c88e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801c892:	f7fc fa31 	bl	8018cf8 <netif_get_by_index>
  if (netif == NULL) {
 801c896:	4607      	mov	r7, r0
 801c898:	2800      	cmp	r0, #0
 801c89a:	d1d5      	bne.n	801c848 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801c89c:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801c8a0:	4620      	mov	r0, r4
 801c8a2:	f7fc fb07 	bl	8018eb4 <pbuf_free>
}
 801c8a6:	4628      	mov	r0, r5
 801c8a8:	b005      	add	sp, #20
 801c8aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801c8ae:	4b0e      	ldr	r3, [pc, #56]	; (801c8e8 <tcp_output_control_segment+0xc4>)
 801c8b0:	f240 7287 	movw	r2, #1927	; 0x787
 801c8b4:	490d      	ldr	r1, [pc, #52]	; (801c8ec <tcp_output_control_segment+0xc8>)
 801c8b6:	480e      	ldr	r0, [pc, #56]	; (801c8f0 <tcp_output_control_segment+0xcc>)
 801c8b8:	f006 fc14 	bl	80230e4 <iprintf>
 801c8bc:	e7bb      	b.n	801c836 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801c8be:	4630      	mov	r0, r6
 801c8c0:	f003 ffbe 	bl	8020840 <ip4_route>
  if (netif == NULL) {
 801c8c4:	4607      	mov	r7, r0
 801c8c6:	2800      	cmp	r0, #0
 801c8c8:	d0e8      	beq.n	801c89c <tcp_output_control_segment+0x78>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c8ca:	9600      	str	r6, [sp, #0]
 801c8cc:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801c8ce:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c8d2:	2106      	movs	r1, #6
 801c8d4:	8922      	ldrh	r2, [r4, #8]
 801c8d6:	4620      	mov	r0, r4
 801c8d8:	f7fb fa4a 	bl	8017d70 <ip_chksum_pseudo>
      tos = 0;
 801c8dc:	4629      	mov	r1, r5
      ttl = TCP_TTL;
 801c8de:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801c8e0:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801c8e4:	e7bd      	b.n	801c862 <tcp_output_control_segment+0x3e>
 801c8e6:	bf00      	nop
 801c8e8:	080416ec 	.word	0x080416ec
 801c8ec:	08041858 	.word	0x08041858
 801c8f0:	08029ba0 	.word	0x08029ba0
 801c8f4:	2002e38c 	.word	0x2002e38c

0801c8f8 <tcp_write>:
{
 801c8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801c8fc:	2400      	movs	r4, #0
{
 801c8fe:	b091      	sub	sp, #68	; 0x44
 801c900:	9107      	str	r1, [sp, #28]
 801c902:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801c904:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801c908:	2800      	cmp	r0, #0
 801c90a:	f000 8321 	beq.w	801cf50 <tcp_write+0x658>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801c90e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801c912:	4692      	mov	sl, r2
 801c914:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801c916:	4681      	mov	r9, r0
 801c918:	085b      	lsrs	r3, r3, #1
 801c91a:	4293      	cmp	r3, r2
 801c91c:	bf28      	it	cs
 801c91e:	4613      	movcs	r3, r2
 801c920:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801c922:	2b00      	cmp	r3, #0
 801c924:	bf08      	it	eq
 801c926:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801c928:	9b07      	ldr	r3, [sp, #28]
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	f000 8306 	beq.w	801cf3c <tcp_write+0x644>
  if ((pcb->state != ESTABLISHED) &&
 801c930:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801c932:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801c934:	2a02      	cmp	r2, #2
 801c936:	d902      	bls.n	801c93e <tcp_write+0x46>
 801c938:	2b07      	cmp	r3, #7
 801c93a:	f040 82ae 	bne.w	801ce9a <tcp_write+0x5a2>
  } else if (len == 0) {
 801c93e:	f1ba 0f00 	cmp.w	sl, #0
 801c942:	f000 80f0 	beq.w	801cb26 <tcp_write+0x22e>
  if (len > pcb->snd_buf) {
 801c946:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801c94a:	4553      	cmp	r3, sl
 801c94c:	f0c0 82ce 	bcc.w	801ceec <tcp_write+0x5f4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801c950:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801c954:	2e08      	cmp	r6, #8
 801c956:	f200 82d2 	bhi.w	801cefe <tcp_write+0x606>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c95a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801c95e:	2e00      	cmp	r6, #0
 801c960:	f000 80d4 	beq.w	801cb0c <tcp_write+0x214>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801c964:	2b00      	cmp	r3, #0
 801c966:	f040 80e0 	bne.w	801cb2a <tcp_write+0x232>
 801c96a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801c96e:	f1b8 0f00 	cmp.w	r8, #0
 801c972:	f000 8274 	beq.w	801ce5e <tcp_write+0x566>
 801c976:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801c978:	461a      	mov	r2, r3
 801c97a:	681b      	ldr	r3, [r3, #0]
 801c97c:	2b00      	cmp	r3, #0
 801c97e:	d1fb      	bne.n	801c978 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c980:	7a94      	ldrb	r4, [r2, #10]
 801c982:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c984:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801c986:	00a4      	lsls	r4, r4, #2
 801c988:	920b      	str	r2, [sp, #44]	; 0x2c
 801c98a:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801c98e:	191a      	adds	r2, r3, r4
 801c990:	4593      	cmp	fp, r2
 801c992:	f2c0 81af 	blt.w	801ccf4 <tcp_write+0x3fc>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c996:	ebab 0404 	sub.w	r4, fp, r4
    oversize = pcb->unsent_oversize;
 801c99a:	f8b9 2068 	ldrh.w	r2, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c99e:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801c9a0:	920a      	str	r2, [sp, #40]	; 0x28
 801c9a2:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    space = mss_local - (last_unsent->len + unsent_optlen);
 801c9a6:	b2a4      	uxth	r4, r4
    if (oversize > 0) {
 801c9a8:	2a00      	cmp	r2, #0
 801c9aa:	f000 80d3 	beq.w	801cb54 <tcp_write+0x25c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801c9ae:	42a2      	cmp	r2, r4
 801c9b0:	f200 8172 	bhi.w	801cc98 <tcp_write+0x3a0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801c9b4:	45a2      	cmp	sl, r4
 801c9b6:	4650      	mov	r0, sl
 801c9b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9ba:	bf28      	it	cs
 801c9bc:	4620      	movcs	r0, r4
 801c9be:	4298      	cmp	r0, r3
 801c9c0:	bf28      	it	cs
 801c9c2:	4618      	movcs	r0, r3
      oversize -= oversize_used;
 801c9c4:	1a1b      	subs	r3, r3, r0
      space -= oversize_used;
 801c9c6:	1a24      	subs	r4, r4, r0
      oversize -= oversize_used;
 801c9c8:	b29b      	uxth	r3, r3
      space -= oversize_used;
 801c9ca:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801c9cc:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	f000 818c 	beq.w	801ccee <tcp_write+0x3f6>
 801c9d6:	4582      	cmp	sl, r0
 801c9d8:	f000 8189 	beq.w	801ccee <tcp_write+0x3f6>
 801c9dc:	4bb4      	ldr	r3, [pc, #720]	; (801ccb0 <tcp_write+0x3b8>)
 801c9de:	f44f 7200 	mov.w	r2, #512	; 0x200
 801c9e2:	900a      	str	r0, [sp, #40]	; 0x28
 801c9e4:	49b3      	ldr	r1, [pc, #716]	; (801ccb4 <tcp_write+0x3bc>)
 801c9e6:	48b4      	ldr	r0, [pc, #720]	; (801ccb8 <tcp_write+0x3c0>)
 801c9e8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801c9ea:	f006 fb7b 	bl	80230e4 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801c9ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c9f0:	459a      	cmp	sl, r3
 801c9f2:	f200 80b4 	bhi.w	801cb5e <tcp_write+0x266>
  struct pbuf *concat_p = NULL;
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c9fa:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801c9fc:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801c9fe:	45a2      	cmp	sl, r4
 801ca00:	f240 80f2 	bls.w	801cbe8 <tcp_write+0x2f0>
 801ca04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca06:	f04f 0800 	mov.w	r8, #0
 801ca0a:	f003 0301 	and.w	r3, r3, #1
 801ca0e:	f8cd 8014 	str.w	r8, [sp, #20]
 801ca12:	9308      	str	r3, [sp, #32]
 801ca14:	4643      	mov	r3, r8
 801ca16:	46d8      	mov	r8, fp
 801ca18:	469b      	mov	fp, r3
 801ca1a:	e043      	b.n	801caa4 <tcp_write+0x1ac>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801ca1c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	f040 80f4 	bne.w	801cc0e <tcp_write+0x316>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801ca26:	2201      	movs	r2, #1
 801ca28:	4629      	mov	r1, r5
 801ca2a:	2036      	movs	r0, #54	; 0x36
 801ca2c:	f7fc fab0 	bl	8018f90 <pbuf_alloc>
 801ca30:	4603      	mov	r3, r0
 801ca32:	2800      	cmp	r0, #0
 801ca34:	f000 8103 	beq.w	801cc3e <tcp_write+0x346>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ca38:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ca3a:	2100      	movs	r1, #0
 801ca3c:	2036      	movs	r0, #54	; 0x36
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ca3e:	9306      	str	r3, [sp, #24]
 801ca40:	1917      	adds	r7, r2, r4
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ca42:	f44f 7220 	mov.w	r2, #640	; 0x280
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801ca46:	605f      	str	r7, [r3, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ca48:	f7fc faa2 	bl	8018f90 <pbuf_alloc>
 801ca4c:	9b06      	ldr	r3, [sp, #24]
 801ca4e:	4607      	mov	r7, r0
 801ca50:	2800      	cmp	r0, #0
 801ca52:	f000 819d 	beq.w	801cd90 <tcp_write+0x498>
      pbuf_cat(p/*header*/, p2/*data*/);
 801ca56:	4619      	mov	r1, r3
 801ca58:	f7fc fbae 	bl	80191b8 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801ca5c:	4638      	mov	r0, r7
 801ca5e:	f7fc fb8d 	bl	801917c <pbuf_clen>
 801ca62:	4430      	add	r0, r6
 801ca64:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801ca66:	2e09      	cmp	r6, #9
 801ca68:	d84a      	bhi.n	801cb00 <tcp_write+0x208>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801ca6a:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801ca6e:	2200      	movs	r2, #0
 801ca70:	4639      	mov	r1, r7
 801ca72:	4648      	mov	r0, r9
 801ca74:	4423      	add	r3, r4
 801ca76:	9200      	str	r2, [sp, #0]
 801ca78:	f7ff fdce 	bl	801c618 <tcp_create_segment>
 801ca7c:	4607      	mov	r7, r0
 801ca7e:	2800      	cmp	r0, #0
 801ca80:	f000 80dd 	beq.w	801cc3e <tcp_write+0x346>
    if (queue == NULL) {
 801ca84:	9b05      	ldr	r3, [sp, #20]
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	f000 80a6 	beq.w	801cbd8 <tcp_write+0x2e0>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801ca8c:	f1bb 0f00 	cmp.w	fp, #0
 801ca90:	f000 80c5 	beq.w	801cc1e <tcp_write+0x326>
    pos += seglen;
 801ca94:	442c      	add	r4, r5
      prev_seg->next = seg;
 801ca96:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801ca9a:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801ca9c:	45a2      	cmp	sl, r4
 801ca9e:	f240 80a1 	bls.w	801cbe4 <tcp_write+0x2ec>
 801caa2:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801caa4:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801caa8:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801caaa:	b2ad      	uxth	r5, r5
 801caac:	4545      	cmp	r5, r8
 801caae:	bf28      	it	cs
 801cab0:	4645      	movcs	r5, r8
 801cab2:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d0b1      	beq.n	801ca1c <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801cab8:	9b05      	ldr	r3, [sp, #20]
 801caba:	4642      	mov	r2, r8
 801cabc:	4629      	mov	r1, r5
 801cabe:	2036      	movs	r0, #54	; 0x36
 801cac0:	fab3 f783 	clz	r7, r3
 801cac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801cac6:	097f      	lsrs	r7, r7, #5
 801cac8:	e9cd 9300 	strd	r9, r3, [sp]
 801cacc:	9702      	str	r7, [sp, #8]
 801cace:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801cad2:	f7ff fd51 	bl	801c578 <tcp_pbuf_prealloc>
 801cad6:	4607      	mov	r7, r0
 801cad8:	2800      	cmp	r0, #0
 801cada:	f000 80b0 	beq.w	801cc3e <tcp_write+0x346>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801cade:	8943      	ldrh	r3, [r0, #10]
 801cae0:	42ab      	cmp	r3, r5
 801cae2:	f0c0 80a4 	bcc.w	801cc2e <tcp_write+0x336>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801cae6:	9b07      	ldr	r3, [sp, #28]
 801cae8:	462a      	mov	r2, r5
 801caea:	6878      	ldr	r0, [r7, #4]
 801caec:	1919      	adds	r1, r3, r4
 801caee:	f005 fb5f 	bl	80221b0 <memcpy>
    queuelen += pbuf_clen(p);
 801caf2:	4638      	mov	r0, r7
 801caf4:	f7fc fb42 	bl	801917c <pbuf_clen>
 801caf8:	4430      	add	r0, r6
 801cafa:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801cafc:	2e09      	cmp	r6, #9
 801cafe:	d9b4      	bls.n	801ca6a <tcp_write+0x172>
      pbuf_free(p);
 801cb00:	4638      	mov	r0, r7
 801cb02:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cb06:	f7fc f9d5 	bl	8018eb4 <pbuf_free>
      goto memerr;
 801cb0a:	e09a      	b.n	801cc42 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801cb0c:	b923      	cbnz	r3, 801cb18 <tcp_write+0x220>
 801cb0e:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801cb12:	2b00      	cmp	r3, #0
 801cb14:	f000 80de 	beq.w	801ccd4 <tcp_write+0x3dc>
 801cb18:	4b65      	ldr	r3, [pc, #404]	; (801ccb0 <tcp_write+0x3b8>)
 801cb1a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801cb1e:	4967      	ldr	r1, [pc, #412]	; (801ccbc <tcp_write+0x3c4>)
 801cb20:	4865      	ldr	r0, [pc, #404]	; (801ccb8 <tcp_write+0x3c0>)
 801cb22:	f006 fadf 	bl	80230e4 <iprintf>
  if (err != ERR_OK) {
 801cb26:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801cb2a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801cb2e:	f1b8 0f00 	cmp.w	r8, #0
 801cb32:	f47f af20 	bne.w	801c976 <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801cb36:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801cb3a:	2b00      	cmp	r3, #0
 801cb3c:	f040 80cf 	bne.w	801ccde <tcp_write+0x3e6>
  while (pos < len) {
 801cb40:	f1ba 0f00 	cmp.w	sl, #0
 801cb44:	f000 81ea 	beq.w	801cf1c <tcp_write+0x624>
          extendlen = seglen;
 801cb48:	2400      	movs	r4, #0
 801cb4a:	940d      	str	r4, [sp, #52]	; 0x34
 801cb4c:	940c      	str	r4, [sp, #48]	; 0x30
 801cb4e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801cb52:	e757      	b.n	801ca04 <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801cb54:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801cb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cb58:	459a      	cmp	sl, r3
 801cb5a:	f67f af4c 	bls.w	801c9f6 <tcp_write+0xfe>
 801cb5e:	2c00      	cmp	r4, #0
 801cb60:	f43f af49 	beq.w	801c9f6 <tcp_write+0xfe>
 801cb64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cb66:	8912      	ldrh	r2, [r2, #8]
 801cb68:	920d      	str	r2, [sp, #52]	; 0x34
 801cb6a:	2a00      	cmp	r2, #0
 801cb6c:	f000 8090 	beq.w	801cc90 <tcp_write+0x398>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801cb70:	ebaa 0503 	sub.w	r5, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cb74:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801cb76:	42a5      	cmp	r5, r4
 801cb78:	bfa8      	it	ge
 801cb7a:	4625      	movge	r5, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cb7c:	07db      	lsls	r3, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801cb7e:	b2af      	uxth	r7, r5
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801cb80:	f100 8195 	bmi.w	801ceae <tcp_write+0x5b6>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801cb84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cb86:	685a      	ldr	r2, [r3, #4]
 801cb88:	4613      	mov	r3, r2
 801cb8a:	6812      	ldr	r2, [r2, #0]
 801cb8c:	2a00      	cmp	r2, #0
 801cb8e:	d1fb      	bne.n	801cb88 <tcp_write+0x290>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cb90:	920c      	str	r2, [sp, #48]	; 0x30
 801cb92:	7b1a      	ldrb	r2, [r3, #12]
 801cb94:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801cb98:	d106      	bne.n	801cba8 <tcp_write+0x2b0>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801cb9a:	895a      	ldrh	r2, [r3, #10]
 801cb9c:	685b      	ldr	r3, [r3, #4]
 801cb9e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801cba0:	9a07      	ldr	r2, [sp, #28]
 801cba2:	429a      	cmp	r2, r3
 801cba4:	f000 8174 	beq.w	801ce90 <tcp_write+0x598>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801cba8:	2201      	movs	r2, #1
 801cbaa:	4639      	mov	r1, r7
 801cbac:	2000      	movs	r0, #0
 801cbae:	f7fc f9ef 	bl	8018f90 <pbuf_alloc>
 801cbb2:	900c      	str	r0, [sp, #48]	; 0x30
 801cbb4:	2800      	cmp	r0, #0
 801cbb6:	f000 8145 	beq.w	801ce44 <tcp_write+0x54c>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801cbba:	990a      	ldr	r1, [sp, #40]	; 0x28
 801cbbc:	9b07      	ldr	r3, [sp, #28]
 801cbbe:	440b      	add	r3, r1
  u16_t extendlen = 0;
 801cbc0:	2100      	movs	r1, #0
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801cbc2:	6043      	str	r3, [r0, #4]
  u16_t extendlen = 0;
 801cbc4:	910d      	str	r1, [sp, #52]	; 0x34
          queuelen += pbuf_clen(concat_p);
 801cbc6:	f7fc fad9 	bl	801917c <pbuf_clen>
 801cbca:	4406      	add	r6, r0
 801cbcc:	b2b6      	uxth	r6, r6
      pos += seglen;
 801cbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbd0:	18fc      	adds	r4, r7, r3
 801cbd2:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801cbd4:	b2a4      	uxth	r4, r4
 801cbd6:	e712      	b.n	801c9fe <tcp_write+0x106>
    pos += seglen;
 801cbd8:	442c      	add	r4, r5
 801cbda:	9005      	str	r0, [sp, #20]
 801cbdc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801cbde:	45a2      	cmp	sl, r4
 801cbe0:	f63f af5f 	bhi.w	801caa2 <tcp_write+0x1aa>
 801cbe4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801cbe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801cbea:	2b00      	cmp	r3, #0
 801cbec:	f000 80e0 	beq.w	801cdb0 <tcp_write+0x4b8>
    for (p = last_unsent->p; p; p = p->next) {
 801cbf0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cbf2:	6854      	ldr	r4, [r2, #4]
 801cbf4:	2c00      	cmp	r4, #0
 801cbf6:	f000 8095 	beq.w	801cd24 <tcp_write+0x42c>
 801cbfa:	469b      	mov	fp, r3
 801cbfc:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801cbfe:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801cc00:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801cc02:	445b      	add	r3, fp
 801cc04:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801cc06:	2a00      	cmp	r2, #0
 801cc08:	d07e      	beq.n	801cd08 <tcp_write+0x410>
  u16_t extendlen = 0;
 801cc0a:	4614      	mov	r4, r2
 801cc0c:	e7f7      	b.n	801cbfe <tcp_write+0x306>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801cc0e:	4b28      	ldr	r3, [pc, #160]	; (801ccb0 <tcp_write+0x3b8>)
 801cc10:	f240 2271 	movw	r2, #625	; 0x271
 801cc14:	492a      	ldr	r1, [pc, #168]	; (801ccc0 <tcp_write+0x3c8>)
 801cc16:	4828      	ldr	r0, [pc, #160]	; (801ccb8 <tcp_write+0x3c0>)
 801cc18:	f006 fa64 	bl	80230e4 <iprintf>
 801cc1c:	e703      	b.n	801ca26 <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801cc1e:	4b24      	ldr	r3, [pc, #144]	; (801ccb0 <tcp_write+0x3b8>)
 801cc20:	f240 22ab 	movw	r2, #683	; 0x2ab
 801cc24:	4927      	ldr	r1, [pc, #156]	; (801ccc4 <tcp_write+0x3cc>)
 801cc26:	4824      	ldr	r0, [pc, #144]	; (801ccb8 <tcp_write+0x3c0>)
 801cc28:	f006 fa5c 	bl	80230e4 <iprintf>
 801cc2c:	e732      	b.n	801ca94 <tcp_write+0x19c>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801cc2e:	4b20      	ldr	r3, [pc, #128]	; (801ccb0 <tcp_write+0x3b8>)
 801cc30:	f240 2266 	movw	r2, #614	; 0x266
 801cc34:	4924      	ldr	r1, [pc, #144]	; (801ccc8 <tcp_write+0x3d0>)
 801cc36:	4820      	ldr	r0, [pc, #128]	; (801ccb8 <tcp_write+0x3c0>)
 801cc38:	f006 fa54 	bl	80230e4 <iprintf>
 801cc3c:	e753      	b.n	801cae6 <tcp_write+0x1ee>
 801cc3e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  TCP_STATS_INC(tcp.memerr);
 801cc42:	4922      	ldr	r1, [pc, #136]	; (801cccc <tcp_write+0x3d4>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc44:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801cc48:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801cc50:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cc52:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801cc56:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801cc5a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cc5c:	b113      	cbz	r3, 801cc64 <tcp_write+0x36c>
    pbuf_free(concat_p);
 801cc5e:	4618      	mov	r0, r3
 801cc60:	f7fc f928 	bl	8018eb4 <pbuf_free>
  if (queue != NULL) {
 801cc64:	f1b8 0f00 	cmp.w	r8, #0
 801cc68:	d002      	beq.n	801cc70 <tcp_write+0x378>
    tcp_segs_free(queue);
 801cc6a:	4640      	mov	r0, r8
 801cc6c:	f7fc ff58 	bl	8019b20 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801cc70:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801cc74:	b13b      	cbz	r3, 801cc86 <tcp_write+0x38e>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801cc76:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801cc7a:	b923      	cbnz	r3, 801cc86 <tcp_write+0x38e>
 801cc7c:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	f000 808b 	beq.w	801cd9c <tcp_write+0x4a4>
  return ERR_MEM;
 801cc86:	f04f 30ff 	mov.w	r0, #4294967295
}
 801cc8a:	b011      	add	sp, #68	; 0x44
 801cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct pbuf *concat_p = NULL;
 801cc90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cc92:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801cc94:	930c      	str	r3, [sp, #48]	; 0x30
 801cc96:	e6b5      	b.n	801ca04 <tcp_write+0x10c>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801cc98:	4b05      	ldr	r3, [pc, #20]	; (801ccb0 <tcp_write+0x3b8>)
 801cc9a:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801cc9e:	490c      	ldr	r1, [pc, #48]	; (801ccd0 <tcp_write+0x3d8>)
 801cca0:	4805      	ldr	r0, [pc, #20]	; (801ccb8 <tcp_write+0x3c0>)
 801cca2:	f006 fa1f 	bl	80230e4 <iprintf>
 801cca6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801ccaa:	930a      	str	r3, [sp, #40]	; 0x28
 801ccac:	e682      	b.n	801c9b4 <tcp_write+0xbc>
 801ccae:	bf00      	nop
 801ccb0:	080416ec 	.word	0x080416ec
 801ccb4:	08041978 	.word	0x08041978
 801ccb8:	08029ba0 	.word	0x08029ba0
 801ccbc:	0804190c 	.word	0x0804190c
 801ccc0:	08041a34 	.word	0x08041a34
 801ccc4:	08041a44 	.word	0x08041a44
 801ccc8:	080419f4 	.word	0x080419f4
 801cccc:	2002e38c 	.word	0x2002e38c
 801ccd0:	08041958 	.word	0x08041958
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801ccd4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801ccd8:	2b00      	cmp	r3, #0
 801ccda:	f43f af35 	beq.w	801cb48 <tcp_write+0x250>
 801ccde:	4ba2      	ldr	r3, [pc, #648]	; (801cf68 <tcp_write+0x670>)
 801cce0:	f240 224a 	movw	r2, #586	; 0x24a
 801cce4:	49a1      	ldr	r1, [pc, #644]	; (801cf6c <tcp_write+0x674>)
 801cce6:	48a2      	ldr	r0, [pc, #648]	; (801cf70 <tcp_write+0x678>)
 801cce8:	f006 f9fc 	bl	80230e4 <iprintf>
 801ccec:	e728      	b.n	801cb40 <tcp_write+0x248>
 801ccee:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801ccf0:	900a      	str	r0, [sp, #40]	; 0x28
 801ccf2:	e730      	b.n	801cb56 <tcp_write+0x25e>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801ccf4:	4b9c      	ldr	r3, [pc, #624]	; (801cf68 <tcp_write+0x670>)
 801ccf6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801ccfa:	499e      	ldr	r1, [pc, #632]	; (801cf74 <tcp_write+0x67c>)
 801ccfc:	489c      	ldr	r0, [pc, #624]	; (801cf70 <tcp_write+0x678>)
 801ccfe:	f006 f9f1 	bl	80230e4 <iprintf>
 801cd02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd04:	891b      	ldrh	r3, [r3, #8]
 801cd06:	e646      	b.n	801c996 <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801cd08:	6863      	ldr	r3, [r4, #4]
 801cd0a:	465a      	mov	r2, fp
 801cd0c:	8960      	ldrh	r0, [r4, #10]
 801cd0e:	4629      	mov	r1, r5
 801cd10:	4418      	add	r0, r3
 801cd12:	f005 fa4d 	bl	80221b0 <memcpy>
        p->len += oversize_used;
 801cd16:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801cd18:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801cd1a:	445b      	add	r3, fp
 801cd1c:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801cd1e:	2a00      	cmp	r2, #0
 801cd20:	f47f af73 	bne.w	801cc0a <tcp_write+0x312>
    last_unsent->len += oversize_used;
 801cd24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801cd26:	980a      	ldr	r0, [sp, #40]	; 0x28
 801cd28:	890b      	ldrh	r3, [r1, #8]
  pcb->unsent_oversize = oversize;
 801cd2a:	f8bd 203e 	ldrh.w	r2, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801cd2e:	4418      	add	r0, r3
  if (concat_p != NULL) {
 801cd30:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    last_unsent->len += oversize_used;
 801cd32:	8108      	strh	r0, [r1, #8]
  pcb->unsent_oversize = oversize;
 801cd34:	f8a9 2068 	strh.w	r2, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801cd38:	2b00      	cmp	r3, #0
 801cd3a:	d061      	beq.n	801ce00 <tcp_write+0x508>
    pbuf_cat(last_unsent->p, concat_p);
 801cd3c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801cd40:	6860      	ldr	r0, [r4, #4]
 801cd42:	4629      	mov	r1, r5
 801cd44:	f7fc fa38 	bl	80191b8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801cd48:	892a      	ldrh	r2, [r5, #8]
 801cd4a:	8923      	ldrh	r3, [r4, #8]
 801cd4c:	4413      	add	r3, r2
 801cd4e:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801cd50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cd52:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801cd56:	f8d9 205c 	ldr.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801cd5a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
  pcb->snd_lbb += len;
 801cd5e:	4452      	add	r2, sl
  pcb->snd_queuelen = queuelen;
 801cd60:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_buf -= len;
 801cd64:	eba3 0a0a 	sub.w	sl, r3, sl
  pcb->snd_lbb += len;
 801cd68:	f8c9 205c 	str.w	r2, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801cd6c:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801cd70:	b11e      	cbz	r6, 801cd7a <tcp_write+0x482>
    LWIP_ASSERT("tcp_write: valid queue length",
 801cd72:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801cd76:	2b00      	cmp	r3, #0
 801cd78:	d036      	beq.n	801cde8 <tcp_write+0x4f0>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801cd7a:	b12f      	cbz	r7, 801cd88 <tcp_write+0x490>
 801cd7c:	68fb      	ldr	r3, [r7, #12]
 801cd7e:	b11b      	cbz	r3, 801cd88 <tcp_write+0x490>
 801cd80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd82:	f012 0502 	ands.w	r5, r2, #2
 801cd86:	d025      	beq.n	801cdd4 <tcp_write+0x4dc>
  return ERR_OK;
 801cd88:	2000      	movs	r0, #0
}
 801cd8a:	b011      	add	sp, #68	; 0x44
 801cd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801cd90:	4618      	mov	r0, r3
 801cd92:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801cd96:	f7fc f88d 	bl	8018eb4 <pbuf_free>
        goto memerr;
 801cd9a:	e752      	b.n	801cc42 <tcp_write+0x34a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801cd9c:	4b72      	ldr	r3, [pc, #456]	; (801cf68 <tcp_write+0x670>)
 801cd9e:	f240 3227 	movw	r2, #807	; 0x327
 801cda2:	4975      	ldr	r1, [pc, #468]	; (801cf78 <tcp_write+0x680>)
 801cda4:	4872      	ldr	r0, [pc, #456]	; (801cf70 <tcp_write+0x678>)
 801cda6:	f006 f99d 	bl	80230e4 <iprintf>
  return ERR_MEM;
 801cdaa:	f04f 30ff 	mov.w	r0, #4294967295
 801cdae:	e76c      	b.n	801cc8a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801cdb0:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801cdb4:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801cdb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801cdba:	2b00      	cmp	r3, #0
 801cdbc:	d059      	beq.n	801ce72 <tcp_write+0x57a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801cdbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	d1bb      	bne.n	801cd3c <tcp_write+0x444>
 801cdc4:	4b68      	ldr	r3, [pc, #416]	; (801cf68 <tcp_write+0x670>)
 801cdc6:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801cdca:	496c      	ldr	r1, [pc, #432]	; (801cf7c <tcp_write+0x684>)
 801cdcc:	4868      	ldr	r0, [pc, #416]	; (801cf70 <tcp_write+0x678>)
 801cdce:	f006 f989 	bl	80230e4 <iprintf>
 801cdd2:	e7b3      	b.n	801cd3c <tcp_write+0x444>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801cdd4:	2008      	movs	r0, #8
 801cdd6:	899c      	ldrh	r4, [r3, #12]
 801cdd8:	f7fa fa18 	bl	801720c <lwip_htons>
 801cddc:	4602      	mov	r2, r0
 801cdde:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801cde0:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801cde2:	4314      	orrs	r4, r2
 801cde4:	819c      	strh	r4, [r3, #12]
 801cde6:	e750      	b.n	801cc8a <tcp_write+0x392>
    LWIP_ASSERT("tcp_write: valid queue length",
 801cde8:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d1c4      	bne.n	801cd7a <tcp_write+0x482>
 801cdf0:	4b5d      	ldr	r3, [pc, #372]	; (801cf68 <tcp_write+0x670>)
 801cdf2:	f240 3212 	movw	r2, #786	; 0x312
 801cdf6:	4960      	ldr	r1, [pc, #384]	; (801cf78 <tcp_write+0x680>)
 801cdf8:	485d      	ldr	r0, [pc, #372]	; (801cf70 <tcp_write+0x678>)
 801cdfa:	f006 f973 	bl	80230e4 <iprintf>
 801cdfe:	e7bc      	b.n	801cd7a <tcp_write+0x482>
  } else if (extendlen > 0) {
 801ce00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce02:	2b00      	cmp	r3, #0
 801ce04:	d0a4      	beq.n	801cd50 <tcp_write+0x458>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ce06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce08:	6859      	ldr	r1, [r3, #4]
 801ce0a:	2900      	cmp	r1, #0
 801ce0c:	d036      	beq.n	801ce7c <tcp_write+0x584>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ce0e:	680a      	ldr	r2, [r1, #0]
 801ce10:	2a00      	cmp	r2, #0
 801ce12:	f000 80a7 	beq.w	801cf64 <tcp_write+0x66c>
 801ce16:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ce18:	e000      	b.n	801ce1c <tcp_write+0x524>
 801ce1a:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801ce1c:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ce1e:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801ce20:	4423      	add	r3, r4
 801ce22:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ce24:	4611      	mov	r1, r2
 801ce26:	2800      	cmp	r0, #0
 801ce28:	d1f7      	bne.n	801ce1a <tcp_write+0x522>
    p->tot_len += extendlen;
 801ce2a:	8910      	ldrh	r0, [r2, #8]
    p->len += extendlen;
 801ce2c:	8951      	ldrh	r1, [r2, #10]
    p->tot_len += extendlen;
 801ce2e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
    last_unsent->len += extendlen;
 801ce30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    p->tot_len += extendlen;
 801ce32:	4420      	add	r0, r4
    p->len += extendlen;
 801ce34:	4421      	add	r1, r4
    last_unsent->len += extendlen;
 801ce36:	891b      	ldrh	r3, [r3, #8]
    p->tot_len += extendlen;
 801ce38:	8110      	strh	r0, [r2, #8]
    last_unsent->len += extendlen;
 801ce3a:	4423      	add	r3, r4
    p->len += extendlen;
 801ce3c:	8151      	strh	r1, [r2, #10]
    last_unsent->len += extendlen;
 801ce3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801ce40:	8113      	strh	r3, [r2, #8]
 801ce42:	e785      	b.n	801cd50 <tcp_write+0x458>
  TCP_STATS_INC(tcp.memerr);
 801ce44:	494e      	ldr	r1, [pc, #312]	; (801cf80 <tcp_write+0x688>)
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ce46:	f8b9 201a 	ldrh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801ce4a:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ce4e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  TCP_STATS_INC(tcp.memerr);
 801ce52:	3301      	adds	r3, #1
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ce54:	f8a9 201a 	strh.w	r2, [r9, #26]
  TCP_STATS_INC(tcp.memerr);
 801ce58:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
  if (concat_p != NULL) {
 801ce5c:	e708      	b.n	801cc70 <tcp_write+0x378>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801ce5e:	4b42      	ldr	r3, [pc, #264]	; (801cf68 <tcp_write+0x670>)
 801ce60:	f240 1255 	movw	r2, #341	; 0x155
 801ce64:	4947      	ldr	r1, [pc, #284]	; (801cf84 <tcp_write+0x68c>)
 801ce66:	4842      	ldr	r0, [pc, #264]	; (801cf70 <tcp_write+0x678>)
 801ce68:	f006 f93c 	bl	80230e4 <iprintf>
  if (err != ERR_OK) {
 801ce6c:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801ce70:	e65b      	b.n	801cb2a <tcp_write+0x232>
  } else if (extendlen > 0) {
 801ce72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ce74:	b1a3      	cbz	r3, 801cea0 <tcp_write+0x5a8>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801ce76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce78:	2b00      	cmp	r3, #0
 801ce7a:	d1c4      	bne.n	801ce06 <tcp_write+0x50e>
 801ce7c:	4b3a      	ldr	r3, [pc, #232]	; (801cf68 <tcp_write+0x670>)
 801ce7e:	f240 22e6 	movw	r2, #742	; 0x2e6
 801ce82:	4941      	ldr	r1, [pc, #260]	; (801cf88 <tcp_write+0x690>)
 801ce84:	483a      	ldr	r0, [pc, #232]	; (801cf70 <tcp_write+0x678>)
 801ce86:	f006 f92d 	bl	80230e4 <iprintf>
 801ce8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ce8c:	6859      	ldr	r1, [r3, #4]
 801ce8e:	e7be      	b.n	801ce0e <tcp_write+0x516>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801ce90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d149      	bne.n	801cf2a <tcp_write+0x632>
          extendlen = seglen;
 801ce96:	970d      	str	r7, [sp, #52]	; 0x34
 801ce98:	e699      	b.n	801cbce <tcp_write+0x2d6>
    return ERR_CONN;
 801ce9a:	f06f 000a 	mvn.w	r0, #10
 801ce9e:	e6f4      	b.n	801cc8a <tcp_write+0x392>
  if (last_unsent == NULL) {
 801cea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	f47f af54 	bne.w	801cd50 <tcp_write+0x458>
    pcb->unsent = queue;
 801cea8:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801ceac:	e753      	b.n	801cd56 <tcp_write+0x45e>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ceae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	4639      	mov	r1, r7
 801ceb4:	2000      	movs	r0, #0
 801ceb6:	9302      	str	r3, [sp, #8]
 801ceb8:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801cebc:	e9cd 9200 	strd	r9, r2, [sp]
 801cec0:	4622      	mov	r2, r4
 801cec2:	f7ff fb59 	bl	801c578 <tcp_pbuf_prealloc>
 801cec6:	4604      	mov	r4, r0
 801cec8:	900c      	str	r0, [sp, #48]	; 0x30
 801ceca:	2800      	cmp	r0, #0
 801cecc:	d0ba      	beq.n	801ce44 <tcp_write+0x54c>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801cece:	9b07      	ldr	r3, [sp, #28]
 801ced0:	463a      	mov	r2, r7
 801ced2:	990a      	ldr	r1, [sp, #40]	; 0x28
 801ced4:	6840      	ldr	r0, [r0, #4]
 801ced6:	1859      	adds	r1, r3, r1
  u16_t extendlen = 0;
 801ced8:	2300      	movs	r3, #0
 801ceda:	930d      	str	r3, [sp, #52]	; 0x34
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801cedc:	f005 f968 	bl	80221b0 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801cee0:	4620      	mov	r0, r4
 801cee2:	f7fc f94b 	bl	801917c <pbuf_clen>
 801cee6:	4406      	add	r6, r0
 801cee8:	b2b6      	uxth	r6, r6
 801ceea:	e670      	b.n	801cbce <tcp_write+0x2d6>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ceec:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801cef0:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cef4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cef8:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801cefc:	e6c5      	b.n	801cc8a <tcp_write+0x392>
    TCP_STATS_INC(tcp.memerr);
 801cefe:	4920      	ldr	r1, [pc, #128]	; (801cf80 <tcp_write+0x688>)
    return ERR_MEM;
 801cf00:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf04:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    TCP_STATS_INC(tcp.memerr);
 801cf08:	f8b1 209c 	ldrh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801cf10:	3201      	adds	r2, #1
 801cf12:	f8a1 209c 	strh.w	r2, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801cf16:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801cf1a:	e6b6      	b.n	801cc8a <tcp_write+0x392>
  pcb->unsent_oversize = oversize;
 801cf1c:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801cf20:	46d0      	mov	r8, sl
 801cf22:	4657      	mov	r7, sl
 801cf24:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801cf28:	e7be      	b.n	801cea8 <tcp_write+0x5b0>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801cf2a:	4b0f      	ldr	r3, [pc, #60]	; (801cf68 <tcp_write+0x670>)
 801cf2c:	f240 2231 	movw	r2, #561	; 0x231
 801cf30:	4916      	ldr	r1, [pc, #88]	; (801cf8c <tcp_write+0x694>)
 801cf32:	480f      	ldr	r0, [pc, #60]	; (801cf70 <tcp_write+0x678>)
          extendlen = seglen;
 801cf34:	970d      	str	r7, [sp, #52]	; 0x34
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801cf36:	f006 f8d5 	bl	80230e4 <iprintf>
 801cf3a:	e648      	b.n	801cbce <tcp_write+0x2d6>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801cf3c:	4b0a      	ldr	r3, [pc, #40]	; (801cf68 <tcp_write+0x670>)
 801cf3e:	f240 12ad 	movw	r2, #429	; 0x1ad
 801cf42:	4913      	ldr	r1, [pc, #76]	; (801cf90 <tcp_write+0x698>)
 801cf44:	480a      	ldr	r0, [pc, #40]	; (801cf70 <tcp_write+0x678>)
 801cf46:	f006 f8cd 	bl	80230e4 <iprintf>
 801cf4a:	f06f 000f 	mvn.w	r0, #15
 801cf4e:	e69c      	b.n	801cc8a <tcp_write+0x392>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801cf50:	4b05      	ldr	r3, [pc, #20]	; (801cf68 <tcp_write+0x670>)
 801cf52:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801cf56:	490f      	ldr	r1, [pc, #60]	; (801cf94 <tcp_write+0x69c>)
 801cf58:	4805      	ldr	r0, [pc, #20]	; (801cf70 <tcp_write+0x678>)
 801cf5a:	f006 f8c3 	bl	80230e4 <iprintf>
 801cf5e:	f06f 000f 	mvn.w	r0, #15
 801cf62:	e692      	b.n	801cc8a <tcp_write+0x392>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801cf64:	460a      	mov	r2, r1
 801cf66:	e760      	b.n	801ce2a <tcp_write+0x532>
 801cf68:	080416ec 	.word	0x080416ec
 801cf6c:	080419c4 	.word	0x080419c4
 801cf70:	08029ba0 	.word	0x08029ba0
 801cf74:	08041940 	.word	0x08041940
 801cf78:	08041ac8 	.word	0x08041ac8
 801cf7c:	08041a58 	.word	0x08041a58
 801cf80:	2002e38c 	.word	0x2002e38c
 801cf84:	080418d0 	.word	0x080418d0
 801cf88:	08041a90 	.word	0x08041a90
 801cf8c:	08041998 	.word	0x08041998
 801cf90:	0804189c 	.word	0x0804189c
 801cf94:	08041884 	.word	0x08041884

0801cf98 <tcp_split_unsent_seg>:
{
 801cf98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801cf9c:	4605      	mov	r5, r0
{
 801cf9e:	b083      	sub	sp, #12
 801cfa0:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801cfa2:	2800      	cmp	r0, #0
 801cfa4:	f000 80bf 	beq.w	801d126 <tcp_split_unsent_seg+0x18e>
  useg = pcb->unsent;
 801cfa8:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801cfaa:	2e00      	cmp	r6, #0
 801cfac:	d037      	beq.n	801d01e <tcp_split_unsent_seg+0x86>
  if (split == 0) {
 801cfae:	2c00      	cmp	r4, #0
 801cfb0:	f000 80c9 	beq.w	801d146 <tcp_split_unsent_seg+0x1ae>
  if (useg->len <= split) {
 801cfb4:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801cfb8:	45a0      	cmp	r8, r4
 801cfba:	f240 80b0 	bls.w	801d11e <tcp_split_unsent_seg+0x186>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801cfbe:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801cfc0:	42a3      	cmp	r3, r4
 801cfc2:	d33b      	bcc.n	801d03c <tcp_split_unsent_seg+0xa4>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801cfc4:	f1b8 0f00 	cmp.w	r8, #0
 801cfc8:	d02e      	beq.n	801d028 <tcp_split_unsent_seg+0x90>
  optflags = useg->flags;
 801cfca:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801cfce:	eba8 0704 	sub.w	r7, r8, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801cfd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cfd6:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801cfd8:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801cfdc:	b2bf      	uxth	r7, r7
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801cfde:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801cfe2:	eb07 010b 	add.w	r1, r7, fp
 801cfe6:	b289      	uxth	r1, r1
 801cfe8:	f7fb ffd2 	bl	8018f90 <pbuf_alloc>
  if (p == NULL) {
 801cfec:	4681      	mov	r9, r0
 801cfee:	b390      	cbz	r0, 801d056 <tcp_split_unsent_seg+0xbe>
  offset = useg->p->tot_len - useg->len + split;
 801cff0:	6870      	ldr	r0, [r6, #4]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801cff2:	463a      	mov	r2, r7
  offset = useg->p->tot_len - useg->len + split;
 801cff4:	8931      	ldrh	r1, [r6, #8]
 801cff6:	8903      	ldrh	r3, [r0, #8]
 801cff8:	1a5b      	subs	r3, r3, r1
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801cffa:	f8d9 1004 	ldr.w	r1, [r9, #4]
  offset = useg->p->tot_len - useg->len + split;
 801cffe:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801d000:	4459      	add	r1, fp
 801d002:	b29b      	uxth	r3, r3
 801d004:	f7fc f9ee 	bl	80193e4 <pbuf_copy_partial>
 801d008:	42b8      	cmp	r0, r7
 801d00a:	d02f      	beq.n	801d06c <tcp_split_unsent_seg+0xd4>
  TCP_STATS_INC(tcp.memerr);
 801d00c:	4a53      	ldr	r2, [pc, #332]	; (801d15c <tcp_split_unsent_seg+0x1c4>)
    pbuf_free(p);
 801d00e:	4648      	mov	r0, r9
  TCP_STATS_INC(tcp.memerr);
 801d010:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801d014:	3301      	adds	r3, #1
 801d016:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
    pbuf_free(p);
 801d01a:	f7fb ff4b 	bl	8018eb4 <pbuf_free>
  return ERR_MEM;
 801d01e:	f04f 30ff 	mov.w	r0, #4294967295
}
 801d022:	b003      	add	sp, #12
 801d024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d028:	4b4d      	ldr	r3, [pc, #308]	; (801d160 <tcp_split_unsent_seg+0x1c8>)
 801d02a:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801d02e:	494d      	ldr	r1, [pc, #308]	; (801d164 <tcp_split_unsent_seg+0x1cc>)
 801d030:	484d      	ldr	r0, [pc, #308]	; (801d168 <tcp_split_unsent_seg+0x1d0>)
 801d032:	f006 f857 	bl	80230e4 <iprintf>
 801d036:	f8b6 8008 	ldrh.w	r8, [r6, #8]
 801d03a:	e7c6      	b.n	801cfca <tcp_split_unsent_seg+0x32>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801d03c:	4b48      	ldr	r3, [pc, #288]	; (801d160 <tcp_split_unsent_seg+0x1c8>)
 801d03e:	f240 325b 	movw	r2, #859	; 0x35b
 801d042:	494a      	ldr	r1, [pc, #296]	; (801d16c <tcp_split_unsent_seg+0x1d4>)
 801d044:	4848      	ldr	r0, [pc, #288]	; (801d168 <tcp_split_unsent_seg+0x1d0>)
 801d046:	f006 f84d 	bl	80230e4 <iprintf>
 801d04a:	f8b6 8008 	ldrh.w	r8, [r6, #8]
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801d04e:	f1b8 0f00 	cmp.w	r8, #0
 801d052:	d1ba      	bne.n	801cfca <tcp_split_unsent_seg+0x32>
 801d054:	e7e8      	b.n	801d028 <tcp_split_unsent_seg+0x90>
  TCP_STATS_INC(tcp.memerr);
 801d056:	4a41      	ldr	r2, [pc, #260]	; (801d15c <tcp_split_unsent_seg+0x1c4>)
  return ERR_MEM;
 801d058:	f04f 30ff 	mov.w	r0, #4294967295
  TCP_STATS_INC(tcp.memerr);
 801d05c:	f8b2 309c 	ldrh.w	r3, [r2, #156]	; 0x9c
 801d060:	3301      	adds	r3, #1
 801d062:	f8a2 309c 	strh.w	r3, [r2, #156]	; 0x9c
}
 801d066:	b003      	add	sp, #12
 801d068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d06c:	68f3      	ldr	r3, [r6, #12]
 801d06e:	8998      	ldrh	r0, [r3, #12]
 801d070:	f7fa f8cc 	bl	801720c <lwip_htons>
  if (split_flags & TCP_PSH) {
 801d074:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d078:	b2c7      	uxtb	r7, r0
  if (split_flags & TCP_PSH) {
 801d07a:	d15c      	bne.n	801d136 <tcp_split_unsent_seg+0x19e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801d07c:	f007 073f 	and.w	r7, r7, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801d080:	07fb      	lsls	r3, r7, #31
 801d082:	d503      	bpl.n	801d08c <tcp_split_unsent_seg+0xf4>
    split_flags &= ~TCP_FIN;
 801d084:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801d088:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801d08c:	68f3      	ldr	r3, [r6, #12]
 801d08e:	6858      	ldr	r0, [r3, #4]
 801d090:	f7fa f8c0 	bl	8017214 <lwip_htonl>
 801d094:	f8cd a000 	str.w	sl, [sp]
 801d098:	1823      	adds	r3, r4, r0
 801d09a:	465a      	mov	r2, fp
 801d09c:	4649      	mov	r1, r9
 801d09e:	4628      	mov	r0, r5
 801d0a0:	f7ff faba 	bl	801c618 <tcp_create_segment>
  if (seg == NULL) {
 801d0a4:	4682      	mov	sl, r0
 801d0a6:	2800      	cmp	r0, #0
 801d0a8:	d0b0      	beq.n	801d00c <tcp_split_unsent_seg+0x74>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d0aa:	6870      	ldr	r0, [r6, #4]
 801d0ac:	eba4 0408 	sub.w	r4, r4, r8
 801d0b0:	f7fc f864 	bl	801917c <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d0b4:	f8d6 c004 	ldr.w	ip, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d0b8:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801d0bc:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d0be:	f8bc 1008 	ldrh.w	r1, [ip, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d0c2:	1a13      	subs	r3, r2, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d0c4:	4660      	mov	r0, ip
 801d0c6:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801d0c8:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801d0cc:	b289      	uxth	r1, r1
 801d0ce:	f7fb fffd 	bl	80190cc <pbuf_realloc>
  useg->len -= remainder;
 801d0d2:	8932      	ldrh	r2, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d0d4:	68f3      	ldr	r3, [r6, #12]
 801d0d6:	4638      	mov	r0, r7
  useg->len -= remainder;
 801d0d8:	4414      	add	r4, r2
 801d0da:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d0dc:	899c      	ldrh	r4, [r3, #12]
 801d0de:	f7fa f895 	bl	801720c <lwip_htons>
 801d0e2:	4602      	mov	r2, r0
 801d0e4:	68f3      	ldr	r3, [r6, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d0e6:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801d0e8:	4314      	orrs	r4, r2
 801d0ea:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d0ec:	f7fc f846 	bl	801917c <pbuf_clen>
 801d0f0:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
 801d0f4:	4603      	mov	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d0f6:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801d0fa:	4413      	add	r3, r2
 801d0fc:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d100:	f7fc f83c 	bl	801917c <pbuf_clen>
 801d104:	f8b5 2066 	ldrh.w	r2, [r5, #102]	; 0x66
  seg->next = useg->next;
 801d108:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d10a:	4410      	add	r0, r2
 801d10c:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801d110:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801d114:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801d118:	f8da 0000 	ldr.w	r0, [sl]
 801d11c:	b180      	cbz	r0, 801d140 <tcp_split_unsent_seg+0x1a8>
    return ERR_OK;
 801d11e:	2000      	movs	r0, #0
}
 801d120:	b003      	add	sp, #12
 801d122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801d126:	4b0e      	ldr	r3, [pc, #56]	; (801d160 <tcp_split_unsent_seg+0x1c8>)
 801d128:	f240 324b 	movw	r2, #843	; 0x34b
 801d12c:	4910      	ldr	r1, [pc, #64]	; (801d170 <tcp_split_unsent_seg+0x1d8>)
 801d12e:	480e      	ldr	r0, [pc, #56]	; (801d168 <tcp_split_unsent_seg+0x1d0>)
 801d130:	f005 ffd8 	bl	80230e4 <iprintf>
 801d134:	e738      	b.n	801cfa8 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801d136:	f007 0737 	and.w	r7, r7, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801d13a:	f04f 0b08 	mov.w	fp, #8
 801d13e:	e79f      	b.n	801d080 <tcp_split_unsent_seg+0xe8>
    pcb->unsent_oversize = 0;
 801d140:	f8a5 0068 	strh.w	r0, [r5, #104]	; 0x68
 801d144:	e76d      	b.n	801d022 <tcp_split_unsent_seg+0x8a>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801d146:	4b06      	ldr	r3, [pc, #24]	; (801d160 <tcp_split_unsent_seg+0x1c8>)
 801d148:	f240 3253 	movw	r2, #851	; 0x353
 801d14c:	4909      	ldr	r1, [pc, #36]	; (801d174 <tcp_split_unsent_seg+0x1dc>)
 801d14e:	4806      	ldr	r0, [pc, #24]	; (801d168 <tcp_split_unsent_seg+0x1d0>)
 801d150:	f005 ffc8 	bl	80230e4 <iprintf>
    return ERR_VAL;
 801d154:	f06f 0005 	mvn.w	r0, #5
 801d158:	e763      	b.n	801d022 <tcp_split_unsent_seg+0x8a>
 801d15a:	bf00      	nop
 801d15c:	2002e38c 	.word	0x2002e38c
 801d160:	080416ec 	.word	0x080416ec
 801d164:	08041b40 	.word	0x08041b40
 801d168:	08029ba0 	.word	0x08029ba0
 801d16c:	08041b30 	.word	0x08041b30
 801d170:	08041ae8 	.word	0x08041ae8
 801d174:	08041b0c 	.word	0x08041b0c

0801d178 <tcp_enqueue_flags>:
{
 801d178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d17c:	f011 0703 	ands.w	r7, r1, #3
{
 801d180:	b082      	sub	sp, #8
 801d182:	460d      	mov	r5, r1
 801d184:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d186:	d064      	beq.n	801d252 <tcp_enqueue_flags+0xda>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d188:	2c00      	cmp	r4, #0
 801d18a:	d06b      	beq.n	801d264 <tcp_enqueue_flags+0xec>
  if (flags & TCP_SYN) {
 801d18c:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d190:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801d194:	d049      	beq.n	801d22a <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d196:	2104      	movs	r1, #4
 801d198:	2036      	movs	r0, #54	; 0x36
 801d19a:	f7fb fef9 	bl	8018f90 <pbuf_alloc>
 801d19e:	4606      	mov	r6, r0
 801d1a0:	2800      	cmp	r0, #0
 801d1a2:	d049      	beq.n	801d238 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d1a4:	8943      	ldrh	r3, [r0, #10]
 801d1a6:	2b03      	cmp	r3, #3
 801d1a8:	d878      	bhi.n	801d29c <tcp_enqueue_flags+0x124>
 801d1aa:	4b44      	ldr	r3, [pc, #272]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d1ac:	f240 4239 	movw	r2, #1081	; 0x439
 801d1b0:	4943      	ldr	r1, [pc, #268]	; (801d2c0 <tcp_enqueue_flags+0x148>)
    optflags = TF_SEG_OPTS_MSS;
 801d1b2:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801d1b6:	4843      	ldr	r0, [pc, #268]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d1b8:	f005 ff94 	bl	80230e4 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801d1bc:	4631      	mov	r1, r6
 801d1be:	f8cd 8000 	str.w	r8, [sp]
 801d1c2:	462a      	mov	r2, r5
 801d1c4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801d1c6:	4620      	mov	r0, r4
 801d1c8:	f7ff fa26 	bl	801c618 <tcp_create_segment>
 801d1cc:	4606      	mov	r6, r0
 801d1ce:	2800      	cmp	r0, #0
 801d1d0:	d032      	beq.n	801d238 <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d1d2:	68c3      	ldr	r3, [r0, #12]
 801d1d4:	079a      	lsls	r2, r3, #30
 801d1d6:	d159      	bne.n	801d28c <tcp_enqueue_flags+0x114>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d1d8:	8933      	ldrh	r3, [r6, #8]
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d14a      	bne.n	801d274 <tcp_enqueue_flags+0xfc>
  if (pcb->unsent == NULL) {
 801d1de:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d1e0:	2b00      	cmp	r3, #0
 801d1e2:	d051      	beq.n	801d288 <tcp_enqueue_flags+0x110>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801d1e4:	461a      	mov	r2, r3
 801d1e6:	681b      	ldr	r3, [r3, #0]
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d1fb      	bne.n	801d1e4 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801d1ec:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801d1ee:	2300      	movs	r3, #0
 801d1f0:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801d1f4:	b117      	cbz	r7, 801d1fc <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801d1f6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801d1f8:	3301      	adds	r3, #1
 801d1fa:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801d1fc:	07eb      	lsls	r3, r5, #31
 801d1fe:	d503      	bpl.n	801d208 <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801d200:	8b63      	ldrh	r3, [r4, #26]
 801d202:	f043 0320 	orr.w	r3, r3, #32
 801d206:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801d208:	6870      	ldr	r0, [r6, #4]
 801d20a:	f7fb ffb7 	bl	801917c <pbuf_clen>
 801d20e:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801d212:	4418      	add	r0, r3
 801d214:	b280      	uxth	r0, r0
 801d216:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801d21a:	b118      	cbz	r0, 801d224 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d21c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801d21e:	2800      	cmp	r0, #0
 801d220:	d03f      	beq.n	801d2a2 <tcp_enqueue_flags+0x12a>
  return ERR_OK;
 801d222:	2000      	movs	r0, #0
}
 801d224:	b002      	add	sp, #8
 801d226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801d22a:	4641      	mov	r1, r8
 801d22c:	2036      	movs	r0, #54	; 0x36
 801d22e:	f7fb feaf 	bl	8018f90 <pbuf_alloc>
 801d232:	4606      	mov	r6, r0
 801d234:	2800      	cmp	r0, #0
 801d236:	d1c1      	bne.n	801d1bc <tcp_enqueue_flags+0x44>
    TCP_STATS_INC(tcp.memerr);
 801d238:	4923      	ldr	r1, [pc, #140]	; (801d2c8 <tcp_enqueue_flags+0x150>)
    return ERR_MEM;
 801d23a:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d23e:	8b62      	ldrh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801d240:	f8b1 309c 	ldrh.w	r3, [r1, #156]	; 0x9c
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d244:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    TCP_STATS_INC(tcp.memerr);
 801d248:	3301      	adds	r3, #1
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d24a:	8362      	strh	r2, [r4, #26]
    TCP_STATS_INC(tcp.memerr);
 801d24c:	f8a1 309c 	strh.w	r3, [r1, #156]	; 0x9c
    return ERR_MEM;
 801d250:	e7e8      	b.n	801d224 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801d252:	4b1a      	ldr	r3, [pc, #104]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d254:	f240 4211 	movw	r2, #1041	; 0x411
 801d258:	491c      	ldr	r1, [pc, #112]	; (801d2cc <tcp_enqueue_flags+0x154>)
 801d25a:	481a      	ldr	r0, [pc, #104]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d25c:	f005 ff42 	bl	80230e4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801d260:	2c00      	cmp	r4, #0
 801d262:	d193      	bne.n	801d18c <tcp_enqueue_flags+0x14>
 801d264:	4b15      	ldr	r3, [pc, #84]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d266:	f240 4213 	movw	r2, #1043	; 0x413
 801d26a:	4919      	ldr	r1, [pc, #100]	; (801d2d0 <tcp_enqueue_flags+0x158>)
 801d26c:	4815      	ldr	r0, [pc, #84]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d26e:	f005 ff39 	bl	80230e4 <iprintf>
 801d272:	e78b      	b.n	801d18c <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801d274:	4b11      	ldr	r3, [pc, #68]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d276:	f240 4243 	movw	r2, #1091	; 0x443
 801d27a:	4916      	ldr	r1, [pc, #88]	; (801d2d4 <tcp_enqueue_flags+0x15c>)
 801d27c:	4811      	ldr	r0, [pc, #68]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d27e:	f005 ff31 	bl	80230e4 <iprintf>
  if (pcb->unsent == NULL) {
 801d282:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801d284:	2b00      	cmp	r3, #0
 801d286:	d1ad      	bne.n	801d1e4 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801d288:	66e6      	str	r6, [r4, #108]	; 0x6c
 801d28a:	e7b0      	b.n	801d1ee <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801d28c:	4b0b      	ldr	r3, [pc, #44]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d28e:	f240 4242 	movw	r2, #1090	; 0x442
 801d292:	4911      	ldr	r1, [pc, #68]	; (801d2d8 <tcp_enqueue_flags+0x160>)
 801d294:	480b      	ldr	r0, [pc, #44]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d296:	f005 ff25 	bl	80230e4 <iprintf>
 801d29a:	e79d      	b.n	801d1d8 <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801d29c:	f04f 0801 	mov.w	r8, #1
 801d2a0:	e78c      	b.n	801d1bc <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801d2a2:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801d2a4:	2c00      	cmp	r4, #0
 801d2a6:	d1bd      	bne.n	801d224 <tcp_enqueue_flags+0xac>
 801d2a8:	4b04      	ldr	r3, [pc, #16]	; (801d2bc <tcp_enqueue_flags+0x144>)
 801d2aa:	f240 4265 	movw	r2, #1125	; 0x465
 801d2ae:	490b      	ldr	r1, [pc, #44]	; (801d2dc <tcp_enqueue_flags+0x164>)
 801d2b0:	4804      	ldr	r0, [pc, #16]	; (801d2c4 <tcp_enqueue_flags+0x14c>)
 801d2b2:	f005 ff17 	bl	80230e4 <iprintf>
  return ERR_OK;
 801d2b6:	4620      	mov	r0, r4
 801d2b8:	e7b4      	b.n	801d224 <tcp_enqueue_flags+0xac>
 801d2ba:	bf00      	nop
 801d2bc:	080416ec 	.word	0x080416ec
 801d2c0:	08041bc8 	.word	0x08041bc8
 801d2c4:	08029ba0 	.word	0x08029ba0
 801d2c8:	2002e38c 	.word	0x2002e38c
 801d2cc:	08041b50 	.word	0x08041b50
 801d2d0:	08041ba8 	.word	0x08041ba8
 801d2d4:	08041c1c 	.word	0x08041c1c
 801d2d8:	08041c04 	.word	0x08041c04
 801d2dc:	08041c48 	.word	0x08041c48

0801d2e0 <tcp_send_fin>:
{
 801d2e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d2e2:	4606      	mov	r6, r0
 801d2e4:	b188      	cbz	r0, 801d30a <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801d2e6:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801d2e8:	b14c      	cbz	r4, 801d2fe <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801d2ea:	4625      	mov	r5, r4
 801d2ec:	6824      	ldr	r4, [r4, #0]
 801d2ee:	2c00      	cmp	r4, #0
 801d2f0:	d1fb      	bne.n	801d2ea <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801d2f2:	68eb      	ldr	r3, [r5, #12]
 801d2f4:	8998      	ldrh	r0, [r3, #12]
 801d2f6:	f7f9 ff89 	bl	801720c <lwip_htons>
 801d2fa:	0743      	lsls	r3, r0, #29
 801d2fc:	d00d      	beq.n	801d31a <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d2fe:	4630      	mov	r0, r6
 801d300:	2101      	movs	r1, #1
}
 801d302:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801d306:	f7ff bf37 	b.w	801d178 <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801d30a:	4b0b      	ldr	r3, [pc, #44]	; (801d338 <tcp_send_fin+0x58>)
 801d30c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801d310:	490a      	ldr	r1, [pc, #40]	; (801d33c <tcp_send_fin+0x5c>)
 801d312:	480b      	ldr	r0, [pc, #44]	; (801d340 <tcp_send_fin+0x60>)
 801d314:	f005 fee6 	bl	80230e4 <iprintf>
 801d318:	e7e5      	b.n	801d2e6 <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d31a:	68eb      	ldr	r3, [r5, #12]
 801d31c:	2001      	movs	r0, #1
 801d31e:	899f      	ldrh	r7, [r3, #12]
 801d320:	f7f9 ff74 	bl	801720c <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801d324:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d326:	68ea      	ldr	r2, [r5, #12]
 801d328:	4338      	orrs	r0, r7
      tcp_set_flags(pcb, TF_FIN);
 801d32a:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801d32e:	8190      	strh	r0, [r2, #12]
}
 801d330:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801d332:	8373      	strh	r3, [r6, #26]
}
 801d334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d336:	bf00      	nop
 801d338:	080416ec 	.word	0x080416ec
 801d33c:	08041c70 	.word	0x08041c70
 801d340:	08029ba0 	.word	0x08029ba0

0801d344 <tcp_rexmit_rto_prepare>:
{
 801d344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d346:	4605      	mov	r5, r0
 801d348:	b378      	cbz	r0, 801d3aa <tcp_rexmit_rto_prepare+0x66>
  if (pcb->unacked == NULL) {
 801d34a:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801d34c:	b924      	cbnz	r4, 801d358 <tcp_rexmit_rto_prepare+0x14>
 801d34e:	e029      	b.n	801d3a4 <tcp_rexmit_rto_prepare+0x60>
    if (tcp_output_segment_busy(seg)) {
 801d350:	f7ff f8fa 	bl	801c548 <tcp_output_segment_busy>
 801d354:	bb30      	cbnz	r0, 801d3a4 <tcp_rexmit_rto_prepare+0x60>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d356:	6824      	ldr	r4, [r4, #0]
 801d358:	6823      	ldr	r3, [r4, #0]
    if (tcp_output_segment_busy(seg)) {
 801d35a:	4620      	mov	r0, r4
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	d1f7      	bne.n	801d350 <tcp_rexmit_rto_prepare+0xc>
  if (tcp_output_segment_busy(seg)) {
 801d360:	f7ff f8f2 	bl	801c548 <tcp_output_segment_busy>
 801d364:	4606      	mov	r6, r0
 801d366:	b9e8      	cbnz	r0, 801d3a4 <tcp_rexmit_rto_prepare+0x60>
  tcp_set_flags(pcb, TF_RTO);
 801d368:	8b6b      	ldrh	r3, [r5, #26]
  seg->next = pcb->unsent;
 801d36a:	6eea      	ldr	r2, [r5, #108]	; 0x6c
  pcb->unsent = pcb->unacked;
 801d36c:	6f29      	ldr	r1, [r5, #112]	; 0x70
  tcp_set_flags(pcb, TF_RTO);
 801d36e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801d372:	6022      	str	r2, [r4, #0]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d374:	68e2      	ldr	r2, [r4, #12]
  tcp_set_flags(pcb, TF_RTO);
 801d376:	836b      	strh	r3, [r5, #26]
  pcb->unacked = NULL;
 801d378:	e9c5 101b 	strd	r1, r0, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d37c:	6850      	ldr	r0, [r2, #4]
 801d37e:	f7f9 ff49 	bl	8017214 <lwip_htonl>
 801d382:	68e3      	ldr	r3, [r4, #12]
 801d384:	4607      	mov	r7, r0
 801d386:	8924      	ldrh	r4, [r4, #8]
 801d388:	8998      	ldrh	r0, [r3, #12]
 801d38a:	f7f9 ff3f 	bl	801720c <lwip_htons>
 801d38e:	4603      	mov	r3, r0
 801d390:	4427      	add	r7, r4
  return ERR_OK;
 801d392:	4630      	mov	r0, r6
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d394:	f013 0303 	ands.w	r3, r3, #3
  pcb->rttest = 0;
 801d398:	636e      	str	r6, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d39a:	bf18      	it	ne
 801d39c:	2301      	movne	r3, #1
 801d39e:	443b      	add	r3, r7
 801d3a0:	64eb      	str	r3, [r5, #76]	; 0x4c
}
 801d3a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801d3a4:	f06f 0005 	mvn.w	r0, #5
}
 801d3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801d3aa:	4b04      	ldr	r3, [pc, #16]	; (801d3bc <tcp_rexmit_rto_prepare+0x78>)
 801d3ac:	f240 6263 	movw	r2, #1635	; 0x663
 801d3b0:	4903      	ldr	r1, [pc, #12]	; (801d3c0 <tcp_rexmit_rto_prepare+0x7c>)
 801d3b2:	4804      	ldr	r0, [pc, #16]	; (801d3c4 <tcp_rexmit_rto_prepare+0x80>)
 801d3b4:	f005 fe96 	bl	80230e4 <iprintf>
 801d3b8:	e7c7      	b.n	801d34a <tcp_rexmit_rto_prepare+0x6>
 801d3ba:	bf00      	nop
 801d3bc:	080416ec 	.word	0x080416ec
 801d3c0:	08041c8c 	.word	0x08041c8c
 801d3c4:	08029ba0 	.word	0x08029ba0

0801d3c8 <tcp_rexmit>:
{
 801d3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d3ca:	4607      	mov	r7, r0
 801d3cc:	b378      	cbz	r0, 801d42e <tcp_rexmit+0x66>
  if (pcb->unacked == NULL) {
 801d3ce:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801d3d0:	2e00      	cmp	r6, #0
 801d3d2:	d034      	beq.n	801d43e <tcp_rexmit+0x76>
  if (tcp_output_segment_busy(seg)) {
 801d3d4:	4630      	mov	r0, r6
 801d3d6:	f7ff f8b7 	bl	801c548 <tcp_output_segment_busy>
 801d3da:	bb80      	cbnz	r0, 801d43e <tcp_rexmit+0x76>
  pcb->unacked = seg->next;
 801d3dc:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801d3de:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801d3e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801d3e4:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801d3e6:	b91b      	cbnz	r3, 801d3f0 <tcp_rexmit+0x28>
 801d3e8:	e00f      	b.n	801d40a <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801d3ea:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801d3ec:	682b      	ldr	r3, [r5, #0]
 801d3ee:	b163      	cbz	r3, 801d40a <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d3f0:	68db      	ldr	r3, [r3, #12]
 801d3f2:	6858      	ldr	r0, [r3, #4]
 801d3f4:	f7f9 ff0e 	bl	8017214 <lwip_htonl>
 801d3f8:	68f3      	ldr	r3, [r6, #12]
 801d3fa:	4604      	mov	r4, r0
 801d3fc:	6858      	ldr	r0, [r3, #4]
 801d3fe:	f7f9 ff09 	bl	8017214 <lwip_htonl>
 801d402:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801d404:	2c00      	cmp	r4, #0
 801d406:	dbf0      	blt.n	801d3ea <tcp_rexmit+0x22>
 801d408:	682b      	ldr	r3, [r5, #0]
  seg->next = *cur_seg;
 801d40a:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801d40c:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801d40e:	6833      	ldr	r3, [r6, #0]
 801d410:	b153      	cbz	r3, 801d428 <tcp_rexmit+0x60>
  if (pcb->nrtx < 0xFF) {
 801d412:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801d416:	2bff      	cmp	r3, #255	; 0xff
 801d418:	d002      	beq.n	801d420 <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801d41a:	3301      	adds	r3, #1
 801d41c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801d420:	2300      	movs	r3, #0
  return ERR_OK;
 801d422:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801d424:	637b      	str	r3, [r7, #52]	; 0x34
}
 801d426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801d428:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801d42c:	e7f1      	b.n	801d412 <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801d42e:	4b05      	ldr	r3, [pc, #20]	; (801d444 <tcp_rexmit+0x7c>)
 801d430:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801d434:	4904      	ldr	r1, [pc, #16]	; (801d448 <tcp_rexmit+0x80>)
 801d436:	4805      	ldr	r0, [pc, #20]	; (801d44c <tcp_rexmit+0x84>)
 801d438:	f005 fe54 	bl	80230e4 <iprintf>
 801d43c:	e7c7      	b.n	801d3ce <tcp_rexmit+0x6>
    return ERR_VAL;
 801d43e:	f06f 0005 	mvn.w	r0, #5
}
 801d442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d444:	080416ec 	.word	0x080416ec
 801d448:	08041cb0 	.word	0x08041cb0
 801d44c:	08029ba0 	.word	0x08029ba0

0801d450 <tcp_rexmit_fast>:
{
 801d450:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d452:	4604      	mov	r4, r0
 801d454:	b340      	cbz	r0, 801d4a8 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801d456:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d458:	b113      	cbz	r3, 801d460 <tcp_rexmit_fast+0x10>
 801d45a:	8b63      	ldrh	r3, [r4, #26]
 801d45c:	075b      	lsls	r3, r3, #29
 801d45e:	d500      	bpl.n	801d462 <tcp_rexmit_fast+0x12>
}
 801d460:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801d462:	4620      	mov	r0, r4
 801d464:	f7ff ffb0 	bl	801d3c8 <tcp_rexmit>
 801d468:	2800      	cmp	r0, #0
 801d46a:	d1f9      	bne.n	801d460 <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d46c:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801d470:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d474:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d476:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d478:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d47c:	bf28      	it	cs
 801d47e:	4619      	movcs	r1, r3
 801d480:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d482:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801d486:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801d48a:	d902      	bls.n	801d492 <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801d48c:	b283      	uxth	r3, r0
 801d48e:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d492:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801d494:	8b61      	ldrh	r1, [r4, #26]
      pcb->rtime = 0;
 801d496:	2000      	movs	r0, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d498:	4413      	add	r3, r2
      tcp_set_flags(pcb, TF_INFR);
 801d49a:	f041 0204 	orr.w	r2, r1, #4
      pcb->rtime = 0;
 801d49e:	8620      	strh	r0, [r4, #48]	; 0x30
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801d4a0:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801d4a4:	8362      	strh	r2, [r4, #26]
}
 801d4a6:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801d4a8:	4b03      	ldr	r3, [pc, #12]	; (801d4b8 <tcp_rexmit_fast+0x68>)
 801d4aa:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801d4ae:	4903      	ldr	r1, [pc, #12]	; (801d4bc <tcp_rexmit_fast+0x6c>)
 801d4b0:	4803      	ldr	r0, [pc, #12]	; (801d4c0 <tcp_rexmit_fast+0x70>)
 801d4b2:	f005 fe17 	bl	80230e4 <iprintf>
 801d4b6:	e7ce      	b.n	801d456 <tcp_rexmit_fast+0x6>
 801d4b8:	080416ec 	.word	0x080416ec
 801d4bc:	08041cc8 	.word	0x08041cc8
 801d4c0:	08029ba0 	.word	0x08029ba0

0801d4c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801d4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4c8:	b084      	sub	sp, #16
 801d4ca:	4607      	mov	r7, r0
 801d4cc:	460e      	mov	r6, r1
 801d4ce:	4614      	mov	r4, r2
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d4d0:	461d      	mov	r5, r3
{
 801d4d2:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 801d4d6:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801d4da:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d4de:	b313      	cbz	r3, 801d526 <tcp_rst+0x62>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d4e0:	f1b8 0f00 	cmp.w	r8, #0
 801d4e4:	d029      	beq.n	801d53a <tcp_rst+0x76>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801d4e6:	4630      	mov	r0, r6
 801d4e8:	2614      	movs	r6, #20
 801d4ea:	f7f9 fe93 	bl	8017214 <lwip_htonl>
 801d4ee:	f246 0108 	movw	r1, #24584	; 0x6008
 801d4f2:	4602      	mov	r2, r0
 801d4f4:	464b      	mov	r3, r9
 801d4f6:	4620      	mov	r0, r4
 801d4f8:	9102      	str	r1, [sp, #8]
 801d4fa:	f8cd a000 	str.w	sl, [sp]
 801d4fe:	2100      	movs	r1, #0
 801d500:	9601      	str	r6, [sp, #4]
 801d502:	f7ff f90f 	bl	801c724 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801d506:	4604      	mov	r4, r0
 801d508:	b150      	cbz	r0, 801d520 <tcp_rst+0x5c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801d50a:	f7ff f97b 	bl	801c804 <tcp_output_fill_options.isra.0.constprop.0>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d50e:	4643      	mov	r3, r8
 801d510:	462a      	mov	r2, r5
 801d512:	4621      	mov	r1, r4
 801d514:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801d516:	b004      	add	sp, #16
 801d518:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801d51c:	f7ff b982 	b.w	801c824 <tcp_output_control_segment>
}
 801d520:	b004      	add	sp, #16
 801d522:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801d526:	4b09      	ldr	r3, [pc, #36]	; (801d54c <tcp_rst+0x88>)
 801d528:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801d52c:	4908      	ldr	r1, [pc, #32]	; (801d550 <tcp_rst+0x8c>)
 801d52e:	4809      	ldr	r0, [pc, #36]	; (801d554 <tcp_rst+0x90>)
 801d530:	f005 fdd8 	bl	80230e4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801d534:	f1b8 0f00 	cmp.w	r8, #0
 801d538:	d1d5      	bne.n	801d4e6 <tcp_rst+0x22>
 801d53a:	4b04      	ldr	r3, [pc, #16]	; (801d54c <tcp_rst+0x88>)
 801d53c:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801d540:	4905      	ldr	r1, [pc, #20]	; (801d558 <tcp_rst+0x94>)
 801d542:	4804      	ldr	r0, [pc, #16]	; (801d554 <tcp_rst+0x90>)
 801d544:	f005 fdce 	bl	80230e4 <iprintf>
 801d548:	e7cd      	b.n	801d4e6 <tcp_rst+0x22>
 801d54a:	bf00      	nop
 801d54c:	080416ec 	.word	0x080416ec
 801d550:	08041ce8 	.word	0x08041ce8
 801d554:	08029ba0 	.word	0x08029ba0
 801d558:	08041d04 	.word	0x08041d04

0801d55c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801d55c:	b538      	push	{r3, r4, r5, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d55e:	4604      	mov	r4, r0
 801d560:	b1d8      	cbz	r0, 801d59a <tcp_send_empty_ack+0x3e>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801d562:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801d564:	f7f9 fe56 	bl	8017214 <lwip_htonl>
 801d568:	2100      	movs	r1, #0
 801d56a:	4602      	mov	r2, r0
 801d56c:	4620      	mov	r0, r4
 801d56e:	f7ff f921 	bl	801c7b4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801d572:	4605      	mov	r5, r0
 801d574:	b1c8      	cbz	r0, 801d5aa <tcp_send_empty_ack+0x4e>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801d576:	f7ff f945 	bl	801c804 <tcp_output_fill_options.isra.0.constprop.0>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801d57a:	1d23      	adds	r3, r4, #4
 801d57c:	4629      	mov	r1, r5
 801d57e:	4622      	mov	r2, r4
 801d580:	4620      	mov	r0, r4
 801d582:	f7ff f94f 	bl	801c824 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d586:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801d588:	b118      	cbz	r0, 801d592 <tcp_send_empty_ack+0x36>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d58a:	f043 0303 	orr.w	r3, r3, #3
 801d58e:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801d590:	bd38      	pop	{r3, r4, r5, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d592:	f023 0303 	bic.w	r3, r3, #3
 801d596:	8363      	strh	r3, [r4, #26]
}
 801d598:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801d59a:	4b07      	ldr	r3, [pc, #28]	; (801d5b8 <tcp_send_empty_ack+0x5c>)
 801d59c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801d5a0:	4906      	ldr	r1, [pc, #24]	; (801d5bc <tcp_send_empty_ack+0x60>)
 801d5a2:	4807      	ldr	r0, [pc, #28]	; (801d5c0 <tcp_send_empty_ack+0x64>)
 801d5a4:	f005 fd9e 	bl	80230e4 <iprintf>
 801d5a8:	e7db      	b.n	801d562 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d5aa:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801d5ac:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d5b0:	f043 0303 	orr.w	r3, r3, #3
 801d5b4:	8363      	strh	r3, [r4, #26]
}
 801d5b6:	bd38      	pop	{r3, r4, r5, pc}
 801d5b8:	080416ec 	.word	0x080416ec
 801d5bc:	08041d20 	.word	0x08041d20
 801d5c0:	08029ba0 	.word	0x08029ba0

0801d5c4 <tcp_output>:
{
 801d5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d5c8:	4604      	mov	r4, r0
{
 801d5ca:	b087      	sub	sp, #28
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d5cc:	2800      	cmp	r0, #0
 801d5ce:	f000 81d0 	beq.w	801d972 <tcp_output+0x3ae>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d5d2:	7d23      	ldrb	r3, [r4, #20]
 801d5d4:	2b01      	cmp	r3, #1
 801d5d6:	f000 8187 	beq.w	801d8e8 <tcp_output+0x324>
  if (tcp_input_pcb == pcb) {
 801d5da:	4bbc      	ldr	r3, [pc, #752]	; (801d8cc <tcp_output+0x308>)
 801d5dc:	681b      	ldr	r3, [r3, #0]
 801d5de:	42a3      	cmp	r3, r4
 801d5e0:	f000 818e 	beq.w	801d900 <tcp_output+0x33c>
  seg = pcb->unsent;
 801d5e4:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801d5e6:	b33d      	cbz	r5, 801d638 <tcp_output+0x74>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d5e8:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801d5ea:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d5ee:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801d5f2:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d5f6:	2800      	cmp	r0, #0
 801d5f8:	f040 81c3 	bne.w	801d982 <tcp_output+0x3be>
    return ip_route(src, dst);
 801d5fc:	4648      	mov	r0, r9
 801d5fe:	f003 f91f 	bl	8020840 <ip4_route>
 801d602:	9005      	str	r0, [sp, #20]
  if (netif == NULL) {
 801d604:	9a05      	ldr	r2, [sp, #20]
 801d606:	2a00      	cmp	r2, #0
 801d608:	f000 81cd 	beq.w	801d9a6 <tcp_output+0x3e2>
  if (ip_addr_isany(&pcb->local_ip)) {
 801d60c:	6823      	ldr	r3, [r4, #0]
 801d60e:	b90b      	cbnz	r3, 801d614 <tcp_output+0x50>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801d610:	6853      	ldr	r3, [r2, #4]
 801d612:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d614:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d616:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d618:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801d61a:	bf28      	it	cs
 801d61c:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801d61e:	f7f9 fdf9 	bl	8017214 <lwip_htonl>
 801d622:	892b      	ldrh	r3, [r5, #8]
 801d624:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801d626:	1a9b      	subs	r3, r3, r2
 801d628:	4418      	add	r0, r3
 801d62a:	42b8      	cmp	r0, r7
 801d62c:	d90f      	bls.n	801d64e <tcp_output+0x8a>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d62e:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801d632:	42bb      	cmp	r3, r7
 801d634:	f000 816e 	beq.w	801d914 <tcp_output+0x350>
    if (pcb->flags & TF_ACK_NOW) {
 801d638:	8b62      	ldrh	r2, [r4, #26]
 801d63a:	0791      	lsls	r1, r2, #30
 801d63c:	f100 8164 	bmi.w	801d908 <tcp_output+0x344>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d640:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801d644:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801d646:	8362      	strh	r2, [r4, #26]
}
 801d648:	b007      	add	sp, #28
 801d64a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801d64e:	2200      	movs	r2, #0
  useg = pcb->unacked;
 801d650:	6f23      	ldr	r3, [r4, #112]	; 0x70
  pcb->persist_backoff = 0;
 801d652:	f884 2099 	strb.w	r2, [r4, #153]	; 0x99
  if (useg != NULL) {
 801d656:	2b00      	cmp	r3, #0
 801d658:	f000 816c 	beq.w	801d934 <tcp_output+0x370>
    for (; useg->next != NULL; useg = useg->next);
 801d65c:	4698      	mov	r8, r3
 801d65e:	681b      	ldr	r3, [r3, #0]
 801d660:	2b00      	cmp	r3, #0
 801d662:	d1fb      	bne.n	801d65c <tcp_output+0x98>
    LWIP_ASSERT("RST not expected here!",
 801d664:	f8df b278 	ldr.w	fp, [pc, #632]	; 801d8e0 <tcp_output+0x31c>
 801d668:	464e      	mov	r6, r9
 801d66a:	e0d5      	b.n	801d818 <tcp_output+0x254>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d66c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d66e:	b163      	cbz	r3, 801d68a <tcp_output+0xc6>
 801d670:	8b63      	ldrh	r3, [r4, #26]
 801d672:	f013 0f44 	tst.w	r3, #68	; 0x44
 801d676:	461a      	mov	r2, r3
 801d678:	d107      	bne.n	801d68a <tcp_output+0xc6>
 801d67a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d67c:	2900      	cmp	r1, #0
 801d67e:	f000 810e 	beq.w	801d89e <tcp_output+0x2da>
 801d682:	6808      	ldr	r0, [r1, #0]
 801d684:	2800      	cmp	r0, #0
 801d686:	f000 8104 	beq.w	801d892 <tcp_output+0x2ce>
    if (pcb->state != SYN_SENT) {
 801d68a:	7d23      	ldrb	r3, [r4, #20]
 801d68c:	2b02      	cmp	r3, #2
 801d68e:	d009      	beq.n	801d6a4 <tcp_output+0xe0>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801d690:	68eb      	ldr	r3, [r5, #12]
 801d692:	2010      	movs	r0, #16
 801d694:	f8b3 a00c 	ldrh.w	sl, [r3, #12]
 801d698:	f7f9 fdb8 	bl	801720c <lwip_htons>
 801d69c:	68eb      	ldr	r3, [r5, #12]
 801d69e:	ea4a 0000 	orr.w	r0, sl, r0
 801d6a2:	8198      	strh	r0, [r3, #12]
  if (tcp_output_segment_busy(seg)) {
 801d6a4:	4628      	mov	r0, r5
 801d6a6:	f7fe ff4f 	bl	801c548 <tcp_output_segment_busy>
 801d6aa:	2800      	cmp	r0, #0
 801d6ac:	d16e      	bne.n	801d78c <tcp_output+0x1c8>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d6ae:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801d6b0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801d6b4:	f7f9 fdae 	bl	8017214 <lwip_htonl>
 801d6b8:	4603      	mov	r3, r0
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d6ba:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801d6bc:	f8ca 3008 	str.w	r3, [sl, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d6c0:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801d6c4:	f7f9 fda2 	bl	801720c <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d6c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801d6ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801d6cc:	f8aa 000e 	strh.w	r0, [sl, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d6d0:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d6d2:	f8d5 a00c 	ldr.w	sl, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801d6d6:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801d6d8:	7aab      	ldrb	r3, [r5, #10]
 801d6da:	07db      	lsls	r3, r3, #31
 801d6dc:	f100 80c8 	bmi.w	801d870 <tcp_output+0x2ac>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801d6e0:	f10a 0914 	add.w	r9, sl, #20
  if (pcb->rtime < 0) {
 801d6e4:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801d6e8:	2a00      	cmp	r2, #0
 801d6ea:	da01      	bge.n	801d6f0 <tcp_output+0x12c>
    pcb->rtime = 0;
 801d6ec:	2200      	movs	r2, #0
 801d6ee:	8622      	strh	r2, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801d6f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801d6f2:	2a00      	cmp	r2, #0
 801d6f4:	f000 80b1 	beq.w	801d85a <tcp_output+0x296>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d6f8:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801d6fa:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d6fe:	6841      	ldr	r1, [r0, #4]
  seg->p->tot_len -= len;
 801d700:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d702:	ebaa 0101 	sub.w	r1, sl, r1
  seg->p->len -= len;
 801d706:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801d70a:	f8c0 a004 	str.w	sl, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801d70e:	b289      	uxth	r1, r1
  seg->p->tot_len -= len;
 801d710:	1a52      	subs	r2, r2, r1
  seg->p->len -= len;
 801d712:	ebae 0101 	sub.w	r1, lr, r1
  seg->p->tot_len -= len;
 801d716:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801d718:	8141      	strh	r1, [r0, #10]
  seg->p->tot_len -= len;
 801d71a:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801d71c:	f88a c010 	strb.w	ip, [sl, #16]
 801d720:	f88a c011 	strb.w	ip, [sl, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801d724:	7aa9      	ldrb	r1, [r5, #10]
 801d726:	0089      	lsls	r1, r1, #2
 801d728:	f001 0104 	and.w	r1, r1, #4
 801d72c:	3114      	adds	r1, #20
 801d72e:	4451      	add	r1, sl
 801d730:	4589      	cmp	r9, r1
 801d732:	d00a      	beq.n	801d74a <tcp_output+0x186>
 801d734:	f240 621c 	movw	r2, #1564	; 0x61c
 801d738:	465b      	mov	r3, fp
 801d73a:	4965      	ldr	r1, [pc, #404]	; (801d8d0 <tcp_output+0x30c>)
 801d73c:	4865      	ldr	r0, [pc, #404]	; (801d8d4 <tcp_output+0x310>)
 801d73e:	f005 fcd1 	bl	80230e4 <iprintf>
 801d742:	6868      	ldr	r0, [r5, #4]
 801d744:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801d748:	8902      	ldrh	r2, [r0, #8]
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801d74a:	4623      	mov	r3, r4
 801d74c:	2106      	movs	r1, #6
 801d74e:	9600      	str	r6, [sp, #0]
 801d750:	f7fa fb0e 	bl	8017d70 <ip_chksum_pseudo>
  TCP_STATS_INC(tcp.xmit);
 801d754:	f8df c18c 	ldr.w	ip, [pc, #396]	; 801d8e4 <tcp_output+0x320>
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d758:	f04f 0e06 	mov.w	lr, #6
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801d75c:	f8aa 0010 	strh.w	r0, [sl, #16]
  TCP_STATS_INC(tcp.xmit);
 801d760:	f8bc 3090 	ldrh.w	r3, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d764:	4632      	mov	r2, r6
 801d766:	6868      	ldr	r0, [r5, #4]
 801d768:	4621      	mov	r1, r4
  TCP_STATS_INC(tcp.xmit);
 801d76a:	f103 0901 	add.w	r9, r3, #1
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d76e:	9b05      	ldr	r3, [sp, #20]
 801d770:	e9cd e301 	strd	lr, r3, [sp, #4]
  TCP_STATS_INC(tcp.xmit);
 801d774:	f8ac 9090 	strh.w	r9, [ip, #144]	; 0x90
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801d778:	f894 c00a 	ldrb.w	ip, [r4, #10]
 801d77c:	7ae3      	ldrb	r3, [r4, #11]
 801d77e:	f8cd c000 	str.w	ip, [sp]
 801d782:	f003 fa77 	bl	8020c74 <ip4_output_if>
    if (err != ERR_OK) {
 801d786:	2800      	cmp	r0, #0
 801d788:	f040 8108 	bne.w	801d99c <tcp_output+0x3d8>
    if (pcb->state != SYN_SENT) {
 801d78c:	7d23      	ldrb	r3, [r4, #20]
    pcb->unsent = seg->next;
 801d78e:	682a      	ldr	r2, [r5, #0]
    if (pcb->state != SYN_SENT) {
 801d790:	2b02      	cmp	r3, #2
    pcb->unsent = seg->next;
 801d792:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801d794:	d003      	beq.n	801d79e <tcp_output+0x1da>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801d796:	8b63      	ldrh	r3, [r4, #26]
 801d798:	f023 0303 	bic.w	r3, r3, #3
 801d79c:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d79e:	68eb      	ldr	r3, [r5, #12]
 801d7a0:	6858      	ldr	r0, [r3, #4]
 801d7a2:	f7f9 fd37 	bl	8017214 <lwip_htonl>
 801d7a6:	68ea      	ldr	r2, [r5, #12]
 801d7a8:	4682      	mov	sl, r0
 801d7aa:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801d7ae:	8990      	ldrh	r0, [r2, #12]
 801d7b0:	f7f9 fd2c 	bl	801720c <lwip_htons>
 801d7b4:	f010 0303 	ands.w	r3, r0, #3
 801d7b8:	44ca      	add	sl, r9
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d7ba:	6d22      	ldr	r2, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801d7bc:	bf18      	it	ne
 801d7be:	2301      	movne	r3, #1
 801d7c0:	4453      	add	r3, sl
    if (TCP_TCPLEN(seg) > 0) {
 801d7c2:	f8b5 a008 	ldrh.w	sl, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801d7c6:	1ad2      	subs	r2, r2, r3
 801d7c8:	2a00      	cmp	r2, #0
      pcb->snd_nxt = snd_nxt;
 801d7ca:	bfb8      	it	lt
 801d7cc:	6523      	strlt	r3, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801d7ce:	68eb      	ldr	r3, [r5, #12]
 801d7d0:	8998      	ldrh	r0, [r3, #12]
 801d7d2:	f7f9 fd1b 	bl	801720c <lwip_htons>
 801d7d6:	f010 0003 	ands.w	r0, r0, #3
 801d7da:	bf18      	it	ne
 801d7dc:	2001      	movne	r0, #1
 801d7de:	eb10 0f0a 	cmn.w	r0, sl
 801d7e2:	d033      	beq.n	801d84c <tcp_output+0x288>
      seg->next = NULL;
 801d7e4:	2200      	movs	r2, #0
      if (pcb->unacked == NULL) {
 801d7e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      seg->next = NULL;
 801d7e8:	602a      	str	r2, [r5, #0]
      if (pcb->unacked == NULL) {
 801d7ea:	b39b      	cbz	r3, 801d854 <tcp_output+0x290>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801d7ec:	68eb      	ldr	r3, [r5, #12]
 801d7ee:	6858      	ldr	r0, [r3, #4]
 801d7f0:	f7f9 fd10 	bl	8017214 <lwip_htonl>
 801d7f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d7f8:	4682      	mov	sl, r0
 801d7fa:	6858      	ldr	r0, [r3, #4]
 801d7fc:	f7f9 fd0a 	bl	8017214 <lwip_htonl>
 801d800:	ebaa 0000 	sub.w	r0, sl, r0
 801d804:	2800      	cmp	r0, #0
 801d806:	f2c0 8097 	blt.w	801d938 <tcp_output+0x374>
          useg->next = seg;
 801d80a:	f8c8 5000 	str.w	r5, [r8]
 801d80e:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801d810:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801d812:	2d00      	cmp	r5, #0
 801d814:	f000 80b9 	beq.w	801d98a <tcp_output+0x3c6>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801d818:	68eb      	ldr	r3, [r5, #12]
 801d81a:	6858      	ldr	r0, [r3, #4]
 801d81c:	f7f9 fcfa 	bl	8017214 <lwip_htonl>
 801d820:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801d822:	892b      	ldrh	r3, [r5, #8]
 801d824:	1a80      	subs	r0, r0, r2
 801d826:	4418      	add	r0, r3
  while (seg != NULL &&
 801d828:	42b8      	cmp	r0, r7
 801d82a:	f200 80b0 	bhi.w	801d98e <tcp_output+0x3ca>
    LWIP_ASSERT("RST not expected here!",
 801d82e:	68eb      	ldr	r3, [r5, #12]
 801d830:	8998      	ldrh	r0, [r3, #12]
 801d832:	f7f9 fceb 	bl	801720c <lwip_htons>
 801d836:	0742      	lsls	r2, r0, #29
 801d838:	f57f af18 	bpl.w	801d66c <tcp_output+0xa8>
 801d83c:	465b      	mov	r3, fp
 801d83e:	f240 5236 	movw	r2, #1334	; 0x536
 801d842:	4925      	ldr	r1, [pc, #148]	; (801d8d8 <tcp_output+0x314>)
 801d844:	4823      	ldr	r0, [pc, #140]	; (801d8d4 <tcp_output+0x310>)
 801d846:	f005 fc4d 	bl	80230e4 <iprintf>
 801d84a:	e70f      	b.n	801d66c <tcp_output+0xa8>
      tcp_seg_free(seg);
 801d84c:	4628      	mov	r0, r5
 801d84e:	f7fc f959 	bl	8019b04 <tcp_seg_free>
 801d852:	e7dd      	b.n	801d810 <tcp_output+0x24c>
        pcb->unacked = seg;
 801d854:	46a8      	mov	r8, r5
 801d856:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801d858:	e7da      	b.n	801d810 <tcp_output+0x24c>
    pcb->rttest = tcp_ticks;
 801d85a:	4a20      	ldr	r2, [pc, #128]	; (801d8dc <tcp_output+0x318>)
 801d85c:	6812      	ldr	r2, [r2, #0]
 801d85e:	6362      	str	r2, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801d860:	f8da 0004 	ldr.w	r0, [sl, #4]
 801d864:	f7f9 fcd6 	bl	8017214 <lwip_htonl>
 801d868:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801d86c:	63a0      	str	r0, [r4, #56]	; 0x38
 801d86e:	e743      	b.n	801d6f8 <tcp_output+0x134>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d870:	4632      	mov	r2, r6
 801d872:	9905      	ldr	r1, [sp, #20]
 801d874:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801d878:	f10a 0918 	add.w	r9, sl, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801d87c:	f7fd f8e0 	bl	801aa40 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801d880:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801d884:	f7f9 fcc6 	bl	8017214 <lwip_htonl>
 801d888:	f8ca 0014 	str.w	r0, [sl, #20]
    opts += 1;
 801d88c:	f8d5 a00c 	ldr.w	sl, [r5, #12]
 801d890:	e728      	b.n	801d6e4 <tcp_output+0x120>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801d892:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801d896:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801d898:	4584      	cmp	ip, r0
 801d89a:	f4bf aef6 	bcs.w	801d68a <tcp_output+0xc6>
 801d89e:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801d8a2:	2800      	cmp	r0, #0
 801d8a4:	f43f aef1 	beq.w	801d68a <tcp_output+0xc6>
 801d8a8:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801d8ac:	2808      	cmp	r0, #8
 801d8ae:	f63f aeec 	bhi.w	801d68a <tcp_output+0xc6>
 801d8b2:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801d8b6:	f47f aee8 	bne.w	801d68a <tcp_output+0xc6>
  if (pcb->unsent == NULL) {
 801d8ba:	2900      	cmp	r1, #0
 801d8bc:	f47f aec0 	bne.w	801d640 <tcp_output+0x7c>
    pcb->unsent_oversize = 0;
 801d8c0:	2100      	movs	r1, #0
 801d8c2:	461a      	mov	r2, r3
 801d8c4:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801d8c8:	e6ba      	b.n	801d640 <tcp_output+0x7c>
 801d8ca:	bf00      	nop
 801d8cc:	2002e4ac 	.word	0x2002e4ac
 801d8d0:	08041d98 	.word	0x08041d98
 801d8d4:	08029ba0 	.word	0x08029ba0
 801d8d8:	08041d80 	.word	0x08041d80
 801d8dc:	2002e49c 	.word	0x2002e49c
 801d8e0:	080416ec 	.word	0x080416ec
 801d8e4:	2002e38c 	.word	0x2002e38c
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801d8e8:	4b30      	ldr	r3, [pc, #192]	; (801d9ac <tcp_output+0x3e8>)
 801d8ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801d8ee:	4930      	ldr	r1, [pc, #192]	; (801d9b0 <tcp_output+0x3ec>)
 801d8f0:	4830      	ldr	r0, [pc, #192]	; (801d9b4 <tcp_output+0x3f0>)
 801d8f2:	f005 fbf7 	bl	80230e4 <iprintf>
  if (tcp_input_pcb == pcb) {
 801d8f6:	4b30      	ldr	r3, [pc, #192]	; (801d9b8 <tcp_output+0x3f4>)
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	42a3      	cmp	r3, r4
 801d8fc:	f47f ae72 	bne.w	801d5e4 <tcp_output+0x20>
    return ERR_OK;
 801d900:	2000      	movs	r0, #0
}
 801d902:	b007      	add	sp, #28
 801d904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801d908:	4620      	mov	r0, r4
}
 801d90a:	b007      	add	sp, #28
 801d90c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801d910:	f7ff be24 	b.w	801d55c <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801d914:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801d916:	2b00      	cmp	r3, #0
 801d918:	f47f ae8e 	bne.w	801d638 <tcp_output+0x74>
 801d91c:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801d920:	2b00      	cmp	r3, #0
 801d922:	f47f ae89 	bne.w	801d638 <tcp_output+0x74>
      pcb->persist_cnt = 0;
 801d926:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801d92a:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801d92e:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801d932:	e681      	b.n	801d638 <tcp_output+0x74>
 801d934:	4698      	mov	r8, r3
 801d936:	e695      	b.n	801d664 <tcp_output+0xa0>
          while (*cur_seg &&
 801d938:	6f22      	ldr	r2, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801d93a:	f104 0970 	add.w	r9, r4, #112	; 0x70
          while (*cur_seg &&
 801d93e:	b92a      	cbnz	r2, 801d94c <tcp_output+0x388>
 801d940:	e013      	b.n	801d96a <tcp_output+0x3a6>
            cur_seg = &((*cur_seg)->next );
 801d942:	f8d9 9000 	ldr.w	r9, [r9]
          while (*cur_seg &&
 801d946:	f8d9 2000 	ldr.w	r2, [r9]
 801d94a:	b172      	cbz	r2, 801d96a <tcp_output+0x3a6>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801d94c:	68d3      	ldr	r3, [r2, #12]
 801d94e:	6858      	ldr	r0, [r3, #4]
 801d950:	f7f9 fc60 	bl	8017214 <lwip_htonl>
 801d954:	68eb      	ldr	r3, [r5, #12]
 801d956:	4682      	mov	sl, r0
 801d958:	6858      	ldr	r0, [r3, #4]
 801d95a:	f7f9 fc5b 	bl	8017214 <lwip_htonl>
 801d95e:	ebaa 0000 	sub.w	r0, sl, r0
          while (*cur_seg &&
 801d962:	2800      	cmp	r0, #0
 801d964:	dbed      	blt.n	801d942 <tcp_output+0x37e>
 801d966:	f8d9 2000 	ldr.w	r2, [r9]
          seg->next = (*cur_seg);
 801d96a:	602a      	str	r2, [r5, #0]
          (*cur_seg) = seg;
 801d96c:	f8c9 5000 	str.w	r5, [r9]
 801d970:	e74e      	b.n	801d810 <tcp_output+0x24c>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801d972:	4b0e      	ldr	r3, [pc, #56]	; (801d9ac <tcp_output+0x3e8>)
 801d974:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801d978:	4910      	ldr	r1, [pc, #64]	; (801d9bc <tcp_output+0x3f8>)
 801d97a:	480e      	ldr	r0, [pc, #56]	; (801d9b4 <tcp_output+0x3f0>)
 801d97c:	f005 fbb2 	bl	80230e4 <iprintf>
 801d980:	e627      	b.n	801d5d2 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801d982:	f7fb f9b9 	bl	8018cf8 <netif_get_by_index>
 801d986:	9005      	str	r0, [sp, #20]
 801d988:	e63c      	b.n	801d604 <tcp_output+0x40>
 801d98a:	8b63      	ldrh	r3, [r4, #26]
 801d98c:	e798      	b.n	801d8c0 <tcp_output+0x2fc>
 801d98e:	8b63      	ldrh	r3, [r4, #26]
 801d990:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801d992:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801d994:	2900      	cmp	r1, #0
 801d996:	f47f ae53 	bne.w	801d640 <tcp_output+0x7c>
 801d99a:	e791      	b.n	801d8c0 <tcp_output+0x2fc>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801d99c:	8b63      	ldrh	r3, [r4, #26]
 801d99e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d9a2:	8363      	strh	r3, [r4, #26]
      return err;
 801d9a4:	e650      	b.n	801d648 <tcp_output+0x84>
    return ERR_RTE;
 801d9a6:	f06f 0003 	mvn.w	r0, #3
 801d9aa:	e64d      	b.n	801d648 <tcp_output+0x84>
 801d9ac:	080416ec 	.word	0x080416ec
 801d9b0:	08041d58 	.word	0x08041d58
 801d9b4:	08029ba0 	.word	0x08029ba0
 801d9b8:	2002e4ac 	.word	0x2002e4ac
 801d9bc:	08041d40 	.word	0x08041d40

0801d9c0 <tcp_rexmit_rto_commit>:
{
 801d9c0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d9c2:	4604      	mov	r4, r0
 801d9c4:	b158      	cbz	r0, 801d9de <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801d9c6:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801d9ca:	2bff      	cmp	r3, #255	; 0xff
 801d9cc:	d002      	beq.n	801d9d4 <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801d9ce:	3301      	adds	r3, #1
 801d9d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801d9d4:	4620      	mov	r0, r4
}
 801d9d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801d9da:	f7ff bdf3 	b.w	801d5c4 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801d9de:	4b04      	ldr	r3, [pc, #16]	; (801d9f0 <tcp_rexmit_rto_commit+0x30>)
 801d9e0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801d9e4:	4903      	ldr	r1, [pc, #12]	; (801d9f4 <tcp_rexmit_rto_commit+0x34>)
 801d9e6:	4804      	ldr	r0, [pc, #16]	; (801d9f8 <tcp_rexmit_rto_commit+0x38>)
 801d9e8:	f005 fb7c 	bl	80230e4 <iprintf>
 801d9ec:	e7eb      	b.n	801d9c6 <tcp_rexmit_rto_commit+0x6>
 801d9ee:	bf00      	nop
 801d9f0:	080416ec 	.word	0x080416ec
 801d9f4:	08041dac 	.word	0x08041dac
 801d9f8:	08029ba0 	.word	0x08029ba0

0801d9fc <tcp_rexmit_rto>:
{
 801d9fc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801d9fe:	4604      	mov	r4, r0
 801da00:	b148      	cbz	r0, 801da16 <tcp_rexmit_rto+0x1a>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801da02:	4620      	mov	r0, r4
 801da04:	f7ff fc9e 	bl	801d344 <tcp_rexmit_rto_prepare>
 801da08:	b100      	cbz	r0, 801da0c <tcp_rexmit_rto+0x10>
}
 801da0a:	bd10      	pop	{r4, pc}
    tcp_rexmit_rto_commit(pcb);
 801da0c:	4620      	mov	r0, r4
}
 801da0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tcp_rexmit_rto_commit(pcb);
 801da12:	f7ff bfd5 	b.w	801d9c0 <tcp_rexmit_rto_commit>
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801da16:	4b04      	ldr	r3, [pc, #16]	; (801da28 <tcp_rexmit_rto+0x2c>)
 801da18:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801da1c:	4903      	ldr	r1, [pc, #12]	; (801da2c <tcp_rexmit_rto+0x30>)
 801da1e:	4804      	ldr	r0, [pc, #16]	; (801da30 <tcp_rexmit_rto+0x34>)
 801da20:	f005 fb60 	bl	80230e4 <iprintf>
 801da24:	e7ed      	b.n	801da02 <tcp_rexmit_rto+0x6>
 801da26:	bf00      	nop
 801da28:	080416ec 	.word	0x080416ec
 801da2c:	08041dd0 	.word	0x08041dd0
 801da30:	08029ba0 	.word	0x08029ba0

0801da34 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801da34:	b570      	push	{r4, r5, r6, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801da36:	4604      	mov	r4, r0
 801da38:	b1a0      	cbz	r0, 801da64 <tcp_keepalive+0x30>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801da3a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801da3c:	3801      	subs	r0, #1
 801da3e:	f7f9 fbe9 	bl	8017214 <lwip_htonl>
 801da42:	2100      	movs	r1, #0
 801da44:	4602      	mov	r2, r0
 801da46:	4620      	mov	r0, r4
 801da48:	f7fe feb4 	bl	801c7b4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801da4c:	4605      	mov	r5, r0
 801da4e:	b188      	cbz	r0, 801da74 <tcp_keepalive+0x40>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801da50:	f7fe fed8 	bl	801c804 <tcp_output_fill_options.isra.0.constprop.0>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801da54:	4629      	mov	r1, r5
 801da56:	1d23      	adds	r3, r4, #4
 801da58:	4622      	mov	r2, r4
 801da5a:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801da5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801da60:	f7fe bee0 	b.w	801c824 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801da64:	4b05      	ldr	r3, [pc, #20]	; (801da7c <tcp_keepalive+0x48>)
 801da66:	f640 0224 	movw	r2, #2084	; 0x824
 801da6a:	4905      	ldr	r1, [pc, #20]	; (801da80 <tcp_keepalive+0x4c>)
 801da6c:	4805      	ldr	r0, [pc, #20]	; (801da84 <tcp_keepalive+0x50>)
 801da6e:	f005 fb39 	bl	80230e4 <iprintf>
 801da72:	e7e2      	b.n	801da3a <tcp_keepalive+0x6>
}
 801da74:	f04f 30ff 	mov.w	r0, #4294967295
 801da78:	bd70      	pop	{r4, r5, r6, pc}
 801da7a:	bf00      	nop
 801da7c:	080416ec 	.word	0x080416ec
 801da80:	08041dec 	.word	0x08041dec
 801da84:	08029ba0 	.word	0x08029ba0

0801da88 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801da88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801da8c:	4604      	mov	r4, r0
 801da8e:	2800      	cmp	r0, #0
 801da90:	d053      	beq.n	801db3a <tcp_zero_window_probe+0xb2>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801da92:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801da94:	2d00      	cmp	r5, #0
 801da96:	d04d      	beq.n	801db34 <tcp_zero_window_probe+0xac>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801da98:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801da9c:	2bff      	cmp	r3, #255	; 0xff
 801da9e:	d002      	beq.n	801daa6 <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801daa0:	3301      	adds	r3, #1
 801daa2:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801daa6:	68eb      	ldr	r3, [r5, #12]
 801daa8:	8998      	ldrh	r0, [r3, #12]
 801daaa:	f7f9 fbaf 	bl	801720c <lwip_htons>
 801daae:	07c3      	lsls	r3, r0, #31
 801dab0:	d529      	bpl.n	801db06 <tcp_zero_window_probe+0x7e>
 801dab2:	8929      	ldrh	r1, [r5, #8]
 801dab4:	bb39      	cbnz	r1, 801db06 <tcp_zero_window_probe+0x7e>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801dab6:	68eb      	ldr	r3, [r5, #12]
 801dab8:	4620      	mov	r0, r4
 801daba:	685a      	ldr	r2, [r3, #4]
 801dabc:	f7fe fe7a 	bl	801c7b4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801dac0:	4606      	mov	r6, r0
 801dac2:	b398      	cbz	r0, 801db2c <tcp_zero_window_probe+0xa4>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801dac4:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801dac8:	2011      	movs	r0, #17
 801daca:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801dace:	f7f9 fb9d 	bl	801720c <lwip_htons>
 801dad2:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801dad6:	4338      	orrs	r0, r7
 801dad8:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801dadc:	68eb      	ldr	r3, [r5, #12]
 801dade:	6858      	ldr	r0, [r3, #4]
 801dae0:	f7f9 fb98 	bl	8017214 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801dae4:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801dae6:	3001      	adds	r0, #1
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801dae8:	1a1b      	subs	r3, r3, r0
 801daea:	2b00      	cmp	r3, #0
    pcb->snd_nxt = snd_nxt;
 801daec:	bfb8      	it	lt
 801daee:	6520      	strlt	r0, [r4, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801daf0:	4630      	mov	r0, r6
 801daf2:	f7fe fe87 	bl	801c804 <tcp_output_fill_options.isra.0.constprop.0>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801daf6:	4631      	mov	r1, r6
 801daf8:	1d23      	adds	r3, r4, #4
 801dafa:	4622      	mov	r2, r4
 801dafc:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801dafe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801db02:	f7fe be8f 	b.w	801c824 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801db06:	68eb      	ldr	r3, [r5, #12]
 801db08:	2101      	movs	r1, #1
 801db0a:	4620      	mov	r0, r4
 801db0c:	685a      	ldr	r2, [r3, #4]
 801db0e:	f7fe fe51 	bl	801c7b4 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801db12:	4606      	mov	r6, r0
 801db14:	b150      	cbz	r0, 801db2c <tcp_zero_window_probe+0xa4>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801db16:	6868      	ldr	r0, [r5, #4]
 801db18:	2201      	movs	r2, #1
 801db1a:	892f      	ldrh	r7, [r5, #8]
 801db1c:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801db1e:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801db20:	1bdb      	subs	r3, r3, r7
 801db22:	3114      	adds	r1, #20
 801db24:	b29b      	uxth	r3, r3
 801db26:	f7fb fc5d 	bl	80193e4 <pbuf_copy_partial>
 801db2a:	e7d7      	b.n	801dadc <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801db2c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801db30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801db34:	4628      	mov	r0, r5
}
 801db36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801db3a:	4b04      	ldr	r3, [pc, #16]	; (801db4c <tcp_zero_window_probe+0xc4>)
 801db3c:	f640 024f 	movw	r2, #2127	; 0x84f
 801db40:	4903      	ldr	r1, [pc, #12]	; (801db50 <tcp_zero_window_probe+0xc8>)
 801db42:	4804      	ldr	r0, [pc, #16]	; (801db54 <tcp_zero_window_probe+0xcc>)
 801db44:	f005 face 	bl	80230e4 <iprintf>
 801db48:	e7a3      	b.n	801da92 <tcp_zero_window_probe+0xa>
 801db4a:	bf00      	nop
 801db4c:	080416ec 	.word	0x080416ec
 801db50:	08041e08 	.word	0x08041e08
 801db54:	08029ba0 	.word	0x08029ba0

0801db58 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801db58:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801db5a:	22bc      	movs	r2, #188	; 0xbc
{
 801db5c:	b570      	push	{r4, r5, r6, lr}
 801db5e:	4604      	mov	r4, r0
 801db60:	460e      	mov	r6, r1
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801db62:	200c      	movs	r0, #12
 801db64:	490f      	ldr	r1, [pc, #60]	; (801dba4 <sys_timeout_abs+0x4c>)
{
 801db66:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801db68:	f7fa feb0 	bl	80188cc <memp_malloc_fn>
  if (timeout == NULL) {
 801db6c:	b190      	cbz	r0, 801db94 <sys_timeout_abs+0x3c>
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801db6e:	490e      	ldr	r1, [pc, #56]	; (801dba8 <sys_timeout_abs+0x50>)
  timeout->next = NULL;
 801db70:	2200      	movs	r2, #0
  timeout->h = handler;
 801db72:	6086      	str	r6, [r0, #8]
  if (next_timeout == NULL) {
 801db74:	680b      	ldr	r3, [r1, #0]
  timeout->arg = arg;
 801db76:	60c5      	str	r5, [r0, #12]
  timeout->next = NULL;
 801db78:	e9c0 2400 	strd	r2, r4, [r0]
  if (next_timeout == NULL) {
 801db7c:	b91b      	cbnz	r3, 801db86 <sys_timeout_abs+0x2e>
 801db7e:	e007      	b.n	801db90 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801db80:	4619      	mov	r1, r3
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	b11b      	cbz	r3, 801db8e <sys_timeout_abs+0x36>
 801db86:	685a      	ldr	r2, [r3, #4]
 801db88:	1aa2      	subs	r2, r4, r2
 801db8a:	2a00      	cmp	r2, #0
 801db8c:	daf8      	bge.n	801db80 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801db8e:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801db90:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801db92:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801db94:	4b03      	ldr	r3, [pc, #12]	; (801dba4 <sys_timeout_abs+0x4c>)
 801db96:	22be      	movs	r2, #190	; 0xbe
 801db98:	4904      	ldr	r1, [pc, #16]	; (801dbac <sys_timeout_abs+0x54>)
 801db9a:	4805      	ldr	r0, [pc, #20]	; (801dbb0 <sys_timeout_abs+0x58>)
}
 801db9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801dba0:	f005 baa0 	b.w	80230e4 <iprintf>
 801dba4:	08041e2c 	.word	0x08041e2c
 801dba8:	2001aa74 	.word	0x2001aa74
 801dbac:	08041e60 	.word	0x08041e60
 801dbb0:	08029ba0 	.word	0x08029ba0

0801dbb4 <lwip_cyclic_timer>:
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801dbb4:	6843      	ldr	r3, [r0, #4]
{
 801dbb6:	b510      	push	{r4, lr}
 801dbb8:	4604      	mov	r4, r0
  cyclic->handler();
 801dbba:	4798      	blx	r3

  now = sys_now();
 801dbbc:	f7f4 fe22 	bl	8012804 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801dbc0:	4b09      	ldr	r3, [pc, #36]	; (801dbe8 <lwip_cyclic_timer+0x34>)
 801dbc2:	6821      	ldr	r1, [r4, #0]
 801dbc4:	681b      	ldr	r3, [r3, #0]
 801dbc6:	440b      	add	r3, r1
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801dbc8:	1a1a      	subs	r2, r3, r0
 801dbca:	2a00      	cmp	r2, #0
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dbcc:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801dbce:	da05      	bge.n	801dbdc <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dbd0:	4408      	add	r0, r1
 801dbd2:	4906      	ldr	r1, [pc, #24]	; (801dbec <lwip_cyclic_timer+0x38>)
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801dbd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801dbd8:	f7ff bfbe 	b.w	801db58 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801dbdc:	4618      	mov	r0, r3
 801dbde:	4903      	ldr	r1, [pc, #12]	; (801dbec <lwip_cyclic_timer+0x38>)
}
 801dbe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801dbe4:	f7ff bfb8 	b.w	801db58 <sys_timeout_abs>
 801dbe8:	2001aa70 	.word	0x2001aa70
 801dbec:	0801dbb5 	.word	0x0801dbb5

0801dbf0 <tcpip_tcp_timer>:
{
 801dbf0:	b508      	push	{r3, lr}
  tcp_tmr();
 801dbf2:	f7fc fef7 	bl	801a9e4 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801dbf6:	4b09      	ldr	r3, [pc, #36]	; (801dc1c <tcpip_tcp_timer+0x2c>)
 801dbf8:	681b      	ldr	r3, [r3, #0]
 801dbfa:	b143      	cbz	r3, 801dc0e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801dbfc:	f7f4 fe02 	bl	8012804 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc00:	2200      	movs	r2, #0
 801dc02:	4907      	ldr	r1, [pc, #28]	; (801dc20 <tcpip_tcp_timer+0x30>)
 801dc04:	30fa      	adds	r0, #250	; 0xfa
}
 801dc06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc0a:	f7ff bfa5 	b.w	801db58 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801dc0e:	4b05      	ldr	r3, [pc, #20]	; (801dc24 <tcpip_tcp_timer+0x34>)
 801dc10:	681b      	ldr	r3, [r3, #0]
 801dc12:	2b00      	cmp	r3, #0
 801dc14:	d1f2      	bne.n	801dbfc <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801dc16:	4a04      	ldr	r2, [pc, #16]	; (801dc28 <tcpip_tcp_timer+0x38>)
 801dc18:	6013      	str	r3, [r2, #0]
}
 801dc1a:	bd08      	pop	{r3, pc}
 801dc1c:	2002e498 	.word	0x2002e498
 801dc20:	0801dbf1 	.word	0x0801dbf1
 801dc24:	2002e4a8 	.word	0x2002e4a8
 801dc28:	2001aa78 	.word	0x2001aa78

0801dc2c <tcp_timer_needed>:
{
 801dc2c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801dc2e:	4b0b      	ldr	r3, [pc, #44]	; (801dc5c <tcp_timer_needed+0x30>)
 801dc30:	681a      	ldr	r2, [r3, #0]
 801dc32:	b98a      	cbnz	r2, 801dc58 <tcp_timer_needed+0x2c>
 801dc34:	4a0a      	ldr	r2, [pc, #40]	; (801dc60 <tcp_timer_needed+0x34>)
 801dc36:	6812      	ldr	r2, [r2, #0]
 801dc38:	b152      	cbz	r2, 801dc50 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801dc3a:	2201      	movs	r2, #1
 801dc3c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801dc3e:	f7f4 fde1 	bl	8012804 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc42:	2200      	movs	r2, #0
 801dc44:	4907      	ldr	r1, [pc, #28]	; (801dc64 <tcp_timer_needed+0x38>)
 801dc46:	30fa      	adds	r0, #250	; 0xfa
}
 801dc48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc4c:	f7ff bf84 	b.w	801db58 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801dc50:	4a05      	ldr	r2, [pc, #20]	; (801dc68 <tcp_timer_needed+0x3c>)
 801dc52:	6812      	ldr	r2, [r2, #0]
 801dc54:	2a00      	cmp	r2, #0
 801dc56:	d1f0      	bne.n	801dc3a <tcp_timer_needed+0xe>
}
 801dc58:	bd08      	pop	{r3, pc}
 801dc5a:	bf00      	nop
 801dc5c:	2001aa78 	.word	0x2001aa78
 801dc60:	2002e498 	.word	0x2002e498
 801dc64:	0801dbf1 	.word	0x0801dbf1
 801dc68:	2002e4a8 	.word	0x2002e4a8

0801dc6c <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801dc6c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801dc70:	b570      	push	{r4, r5, r6, lr}
 801dc72:	4604      	mov	r4, r0
 801dc74:	460d      	mov	r5, r1
 801dc76:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801dc78:	d208      	bcs.n	801dc8c <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801dc7a:	f7f4 fdc3 	bl	8012804 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc7e:	4632      	mov	r2, r6
 801dc80:	4629      	mov	r1, r5
 801dc82:	4420      	add	r0, r4
#endif
}
 801dc84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801dc88:	f7ff bf66 	b.w	801db58 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801dc8c:	4b03      	ldr	r3, [pc, #12]	; (801dc9c <sys_timeout+0x30>)
 801dc8e:	f240 1229 	movw	r2, #297	; 0x129
 801dc92:	4903      	ldr	r1, [pc, #12]	; (801dca0 <sys_timeout+0x34>)
 801dc94:	4803      	ldr	r0, [pc, #12]	; (801dca4 <sys_timeout+0x38>)
 801dc96:	f005 fa25 	bl	80230e4 <iprintf>
 801dc9a:	e7ee      	b.n	801dc7a <sys_timeout+0xe>
 801dc9c:	08041e2c 	.word	0x08041e2c
 801dca0:	08041ea0 	.word	0x08041ea0
 801dca4:	08029ba0 	.word	0x08029ba0

0801dca8 <sys_timeouts_init>:
{
 801dca8:	b570      	push	{r4, r5, r6, lr}
 801dcaa:	4c0a      	ldr	r4, [pc, #40]	; (801dcd4 <sys_timeouts_init+0x2c>)
 801dcac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801dcb0:	4e09      	ldr	r6, [pc, #36]	; (801dcd8 <sys_timeouts_init+0x30>)
 801dcb2:	f104 0520 	add.w	r5, r4, #32
 801dcb6:	4622      	mov	r2, r4
 801dcb8:	4631      	mov	r1, r6
 801dcba:	f7ff ffd7 	bl	801dc6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dcbe:	42ac      	cmp	r4, r5
 801dcc0:	d007      	beq.n	801dcd2 <sys_timeouts_init+0x2a>
 801dcc2:	f854 0f08 	ldr.w	r0, [r4, #8]!
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801dcc6:	4631      	mov	r1, r6
 801dcc8:	4622      	mov	r2, r4
 801dcca:	f7ff ffcf 	bl	801dc6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801dcce:	42ac      	cmp	r4, r5
 801dcd0:	d1f7      	bne.n	801dcc2 <sys_timeouts_init+0x1a>
}
 801dcd2:	bd70      	pop	{r4, r5, r6, pc}
 801dcd4:	08041ee0 	.word	0x08041ee0
 801dcd8:	0801dbb5 	.word	0x0801dbb5

0801dcdc <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801dcdc:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801dcde:	4d0d      	ldr	r5, [pc, #52]	; (801dd14 <sys_untimeout+0x38>)
 801dce0:	682b      	ldr	r3, [r5, #0]
 801dce2:	b19b      	cbz	r3, 801dd0c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801dce4:	2400      	movs	r4, #0
 801dce6:	e003      	b.n	801dcf0 <sys_untimeout+0x14>
 801dce8:	681a      	ldr	r2, [r3, #0]
 801dcea:	461c      	mov	r4, r3
 801dcec:	4613      	mov	r3, r2
 801dcee:	b16a      	cbz	r2, 801dd0c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801dcf0:	689a      	ldr	r2, [r3, #8]
 801dcf2:	4282      	cmp	r2, r0
 801dcf4:	d1f8      	bne.n	801dce8 <sys_untimeout+0xc>
 801dcf6:	68da      	ldr	r2, [r3, #12]
 801dcf8:	428a      	cmp	r2, r1
 801dcfa:	d1f5      	bne.n	801dce8 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801dcfc:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801dcfe:	b13c      	cbz	r4, 801dd10 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801dd00:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801dd02:	4619      	mov	r1, r3
 801dd04:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801dd06:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801dd08:	f7fa be04 	b.w	8018914 <memp_free>
}
 801dd0c:	bc30      	pop	{r4, r5}
 801dd0e:	4770      	bx	lr
        next_timeout = t->next;
 801dd10:	602a      	str	r2, [r5, #0]
 801dd12:	e7f6      	b.n	801dd02 <sys_untimeout+0x26>
 801dd14:	2001aa74 	.word	0x2001aa74

0801dd18 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801dd1c:	f7f4 fd72 	bl	8012804 <sys_now>
 801dd20:	4c0d      	ldr	r4, [pc, #52]	; (801dd58 <sys_check_timeouts+0x40>)
 801dd22:	4607      	mov	r7, r0

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801dd24:	f8df 8034 	ldr.w	r8, [pc, #52]	; 801dd5c <sys_check_timeouts+0x44>
 801dd28:	e00c      	b.n	801dd44 <sys_check_timeouts+0x2c>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801dd2a:	685a      	ldr	r2, [r3, #4]
 801dd2c:	1abd      	subs	r5, r7, r2
 801dd2e:	2d00      	cmp	r5, #0
 801dd30:	db0d      	blt.n	801dd4e <sys_check_timeouts+0x36>
    next_timeout = tmptimeout->next;
 801dd32:	681e      	ldr	r6, [r3, #0]
    handler = tmptimeout->h;
 801dd34:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801dd36:	6026      	str	r6, [r4, #0]
    current_timeout_due_time = tmptimeout->time;
 801dd38:	f8c8 2000 	str.w	r2, [r8]
    arg = tmptimeout->arg;
 801dd3c:	68de      	ldr	r6, [r3, #12]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801dd3e:	f7fa fde9 	bl	8018914 <memp_free>
    if (handler != NULL) {
 801dd42:	b935      	cbnz	r5, 801dd52 <sys_check_timeouts+0x3a>
    tmptimeout = next_timeout;
 801dd44:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801dd46:	200c      	movs	r0, #12
 801dd48:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801dd4a:	2b00      	cmp	r3, #0
 801dd4c:	d1ed      	bne.n	801dd2a <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801dd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      handler(arg);
 801dd52:	4630      	mov	r0, r6
 801dd54:	47a8      	blx	r5
 801dd56:	e7f5      	b.n	801dd44 <sys_check_timeouts+0x2c>
 801dd58:	2001aa74 	.word	0x2001aa74
 801dd5c:	2001aa70 	.word	0x2001aa70

0801dd60 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801dd60:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801dd62:	4c07      	ldr	r4, [pc, #28]	; (801dd80 <sys_timeouts_sleeptime+0x20>)
 801dd64:	6823      	ldr	r3, [r4, #0]
 801dd66:	b13b      	cbz	r3, 801dd78 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801dd68:	f7f4 fd4c 	bl	8012804 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801dd6c:	6823      	ldr	r3, [r4, #0]
 801dd6e:	685b      	ldr	r3, [r3, #4]
 801dd70:	1a18      	subs	r0, r3, r0
    return 0;
 801dd72:	bf48      	it	mi
 801dd74:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801dd76:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801dd78:	f04f 30ff 	mov.w	r0, #4294967295
}
 801dd7c:	bd10      	pop	{r4, pc}
 801dd7e:	bf00      	nop
 801dd80:	2001aa74 	.word	0x2001aa74

0801dd84 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801dd84:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801dd86:	f005 fa51 	bl	802322c <rand>
 801dd8a:	4b02      	ldr	r3, [pc, #8]	; (801dd94 <udp_init+0x10>)
 801dd8c:	4a02      	ldr	r2, [pc, #8]	; (801dd98 <udp_init+0x14>)
 801dd8e:	4303      	orrs	r3, r0
 801dd90:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801dd92:	bd08      	pop	{r3, pc}
 801dd94:	ffffc000 	.word	0xffffc000
 801dd98:	20000412 	.word	0x20000412

0801dd9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801dd9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801dda0:	4680      	mov	r8, r0
{
 801dda2:	b085      	sub	sp, #20
 801dda4:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801dda6:	2800      	cmp	r0, #0
 801dda8:	f000 80ce 	beq.w	801df48 <udp_input+0x1ac>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801ddac:	2f00      	cmp	r7, #0
 801ddae:	f000 80d4 	beq.w	801df5a <udp_input+0x1be>

  PERF_START;

  UDP_STATS_INC(udp.recv);
 801ddb2:	f8df b23c 	ldr.w	fp, [pc, #572]	; 801dff0 <udp_input+0x254>

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801ddb6:	f8b8 200a 	ldrh.w	r2, [r8, #10]
  UDP_STATS_INC(udp.recv);
 801ddba:	f8bb 307a 	ldrh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801ddbe:	2a07      	cmp	r2, #7
  UDP_STATS_INC(udp.recv);
 801ddc0:	f103 0301 	add.w	r3, r3, #1
 801ddc4:	f8ab 307a 	strh.w	r3, [fp, #122]	; 0x7a
  if (p->len < UDP_HLEN) {
 801ddc8:	f240 80a7 	bls.w	801df1a <udp_input+0x17e>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ddcc:	f8df 9224 	ldr.w	r9, [pc, #548]	; 801dff4 <udp_input+0x258>
  udphdr = (struct udp_hdr *)p->payload;
 801ddd0:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801ddd4:	f8d9 1000 	ldr.w	r1, [r9]
 801ddd8:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801dddc:	f002 ff5c 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 801dde0:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801dde2:	8820      	ldrh	r0, [r4, #0]
 801dde4:	f7f9 fa12 	bl	801720c <lwip_htons>
 801dde8:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801ddea:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801ddec:	9302      	str	r3, [sp, #8]
  dest = lwip_ntohs(udphdr->dest);
 801ddee:	f7f9 fa0d 	bl	801720c <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ddf2:	4b77      	ldr	r3, [pc, #476]	; (801dfd0 <udp_input+0x234>)
  dest = lwip_ntohs(udphdr->dest);
 801ddf4:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801ddf6:	681c      	ldr	r4, [r3, #0]
 801ddf8:	2c00      	cmp	r4, #0
 801ddfa:	d069      	beq.n	801ded0 <udp_input+0x134>
  uncon_pcb = NULL;
 801ddfc:	2300      	movs	r3, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ddfe:	4975      	ldr	r1, [pc, #468]	; (801dfd4 <udp_input+0x238>)
  uncon_pcb = NULL;
 801de00:	461e      	mov	r6, r3
 801de02:	9303      	str	r3, [sp, #12]
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801de04:	4b74      	ldr	r3, [pc, #464]	; (801dfd8 <udp_input+0x23c>)
 801de06:	e004      	b.n	801de12 <udp_input+0x76>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801de08:	68e2      	ldr	r2, [r4, #12]
 801de0a:	4626      	mov	r6, r4
 801de0c:	2a00      	cmp	r2, #0
 801de0e:	d05c      	beq.n	801deca <udp_input+0x12e>
 801de10:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801de12:	8a62      	ldrh	r2, [r4, #18]
 801de14:	42aa      	cmp	r2, r5
 801de16:	d1f7      	bne.n	801de08 <udp_input+0x6c>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801de18:	2f00      	cmp	r7, #0
 801de1a:	d077      	beq.n	801df0c <udp_input+0x170>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801de1c:	7a20      	ldrb	r0, [r4, #8]
 801de1e:	b138      	cbz	r0, 801de30 <udp_input+0x94>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801de20:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801de24:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801de28:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801de2a:	b2d2      	uxtb	r2, r2
 801de2c:	4290      	cmp	r0, r2
 801de2e:	d1eb      	bne.n	801de08 <udp_input+0x6c>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801de30:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801de32:	f1ba 0f00 	cmp.w	sl, #0
 801de36:	d03e      	beq.n	801deb6 <udp_input+0x11a>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801de38:	b152      	cbz	r2, 801de50 <udp_input+0xb4>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801de3a:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801de3e:	f1b0 3fff 	cmp.w	r0, #4294967295
 801de42:	d005      	beq.n	801de50 <udp_input+0xb4>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801de44:	ea80 0c02 	eor.w	ip, r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801de48:	68b8      	ldr	r0, [r7, #8]
 801de4a:	ea1c 0f00 	tst.w	ip, r0
 801de4e:	d1db      	bne.n	801de08 <udp_input+0x6c>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801de50:	7c20      	ldrb	r0, [r4, #16]
 801de52:	0740      	lsls	r0, r0, #29
 801de54:	d409      	bmi.n	801de6a <udp_input+0xce>
        if (uncon_pcb == NULL) {
 801de56:	9803      	ldr	r0, [sp, #12]
 801de58:	2800      	cmp	r0, #0
 801de5a:	d06e      	beq.n	801df3a <udp_input+0x19e>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801de5c:	f1ba 0f00 	cmp.w	sl, #0
 801de60:	d003      	beq.n	801de6a <udp_input+0xce>
 801de62:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801de66:	3001      	adds	r0, #1
 801de68:	d07e      	beq.n	801df68 <udp_input+0x1cc>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801de6a:	8aa2      	ldrh	r2, [r4, #20]
 801de6c:	9802      	ldr	r0, [sp, #8]
 801de6e:	4282      	cmp	r2, r0
 801de70:	d1ca      	bne.n	801de08 <udp_input+0x6c>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801de72:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801de74:	b11a      	cbz	r2, 801de7e <udp_input+0xe2>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801de76:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801de7a:	4282      	cmp	r2, r0
 801de7c:	d1c4      	bne.n	801de08 <udp_input+0x6c>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801de7e:	2e00      	cmp	r6, #0
 801de80:	f000 809d 	beq.w	801dfbe <udp_input+0x222>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
          pcb->next = udp_pcbs;
 801de84:	4952      	ldr	r1, [pc, #328]	; (801dfd0 <udp_input+0x234>)
          prev->next = pcb->next;
 801de86:	68e2      	ldr	r2, [r4, #12]
          pcb->next = udp_pcbs;
 801de88:	680b      	ldr	r3, [r1, #0]
          prev->next = pcb->next;
 801de8a:	60f2      	str	r2, [r6, #12]
          udp_pcbs = pcb;
 801de8c:	600c      	str	r4, [r1, #0]
          pcb->next = udp_pcbs;
 801de8e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801de90:	2108      	movs	r1, #8
 801de92:	4640      	mov	r0, r8
 801de94:	f7fa ffd2 	bl	8018e3c <pbuf_remove_header>
 801de98:	2800      	cmp	r0, #0
 801de9a:	d172      	bne.n	801df82 <udp_input+0x1e6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801de9c:	69a5      	ldr	r5, [r4, #24]
 801de9e:	2d00      	cmp	r5, #0
 801dea0:	d07b      	beq.n	801df9a <udp_input+0x1fe>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801dea2:	9b02      	ldr	r3, [sp, #8]
 801dea4:	4642      	mov	r2, r8
 801dea6:	69e0      	ldr	r0, [r4, #28]
 801dea8:	4621      	mov	r1, r4
 801deaa:	9300      	str	r3, [sp, #0]
 801deac:	4b4b      	ldr	r3, [pc, #300]	; (801dfdc <udp_input+0x240>)
 801deae:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801deb0:	b005      	add	sp, #20
 801deb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801deb6:	2a00      	cmp	r2, #0
 801deb8:	d0ca      	beq.n	801de50 <udp_input+0xb4>
 801deba:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801debe:	4282      	cmp	r2, r0
 801dec0:	d0c6      	beq.n	801de50 <udp_input+0xb4>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801dec2:	68e2      	ldr	r2, [r4, #12]
 801dec4:	4626      	mov	r6, r4
 801dec6:	2a00      	cmp	r2, #0
 801dec8:	d1a2      	bne.n	801de10 <udp_input+0x74>
  if (pcb != NULL) {
 801deca:	9b03      	ldr	r3, [sp, #12]
 801decc:	2b00      	cmp	r3, #0
 801dece:	d17c      	bne.n	801dfca <udp_input+0x22e>
  if (for_us) {
 801ded0:	687a      	ldr	r2, [r7, #4]
 801ded2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801ded6:	429a      	cmp	r2, r3
 801ded8:	d15f      	bne.n	801df9a <udp_input+0x1fe>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801deda:	2108      	movs	r1, #8
 801dedc:	4640      	mov	r0, r8
 801dede:	f7fa ffad 	bl	8018e3c <pbuf_remove_header>
 801dee2:	2800      	cmp	r0, #0
 801dee4:	d14d      	bne.n	801df82 <udp_input+0x1e6>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801dee6:	f1ba 0f00 	cmp.w	sl, #0
 801deea:	d105      	bne.n	801def8 <udp_input+0x15c>
 801deec:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801def0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801def4:	2be0      	cmp	r3, #224	; 0xe0
 801def6:	d156      	bne.n	801dfa6 <udp_input+0x20a>
      UDP_STATS_INC(udp.proterr);
 801def8:	f8bb 2088 	ldrh.w	r2, [fp, #136]	; 0x88
      pbuf_free(p);
 801defc:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801defe:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      UDP_STATS_INC(udp.proterr);
 801df02:	3201      	adds	r2, #1
      UDP_STATS_INC(udp.drop);
 801df04:	3301      	adds	r3, #1
      UDP_STATS_INC(udp.proterr);
 801df06:	f8ab 2088 	strh.w	r2, [fp, #136]	; 0x88
 801df0a:	e00f      	b.n	801df2c <udp_input+0x190>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801df0c:	2288      	movs	r2, #136	; 0x88
 801df0e:	4834      	ldr	r0, [pc, #208]	; (801dfe0 <udp_input+0x244>)
 801df10:	f005 f8e8 	bl	80230e4 <iprintf>
 801df14:	4b30      	ldr	r3, [pc, #192]	; (801dfd8 <udp_input+0x23c>)
 801df16:	492f      	ldr	r1, [pc, #188]	; (801dfd4 <udp_input+0x238>)
 801df18:	e780      	b.n	801de1c <udp_input+0x80>
    UDP_STATS_INC(udp.lenerr);
 801df1a:	f8bb 2082 	ldrh.w	r2, [fp, #130]	; 0x82
    pbuf_free(p);
 801df1e:	4640      	mov	r0, r8
    UDP_STATS_INC(udp.drop);
 801df20:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
    UDP_STATS_INC(udp.lenerr);
 801df24:	3201      	adds	r2, #1
    UDP_STATS_INC(udp.drop);
 801df26:	3301      	adds	r3, #1
    UDP_STATS_INC(udp.lenerr);
 801df28:	f8ab 2082 	strh.w	r2, [fp, #130]	; 0x82
      UDP_STATS_INC(udp.drop);
 801df2c:	f8ab 307e 	strh.w	r3, [fp, #126]	; 0x7e
}
 801df30:	b005      	add	sp, #20
 801df32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801df36:	f7fa bfbd 	b.w	8018eb4 <pbuf_free>
      if ((pcb->remote_port == src) &&
 801df3a:	8aa2      	ldrh	r2, [r4, #20]
 801df3c:	9802      	ldr	r0, [sp, #8]
 801df3e:	9403      	str	r4, [sp, #12]
 801df40:	4282      	cmp	r2, r0
 801df42:	f47f af61 	bne.w	801de08 <udp_input+0x6c>
 801df46:	e794      	b.n	801de72 <udp_input+0xd6>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801df48:	4b23      	ldr	r3, [pc, #140]	; (801dfd8 <udp_input+0x23c>)
 801df4a:	22cf      	movs	r2, #207	; 0xcf
 801df4c:	4925      	ldr	r1, [pc, #148]	; (801dfe4 <udp_input+0x248>)
 801df4e:	4824      	ldr	r0, [pc, #144]	; (801dfe0 <udp_input+0x244>)
 801df50:	f005 f8c8 	bl	80230e4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801df54:	2f00      	cmp	r7, #0
 801df56:	f47f af2c 	bne.w	801ddb2 <udp_input+0x16>
 801df5a:	4b1f      	ldr	r3, [pc, #124]	; (801dfd8 <udp_input+0x23c>)
 801df5c:	22d0      	movs	r2, #208	; 0xd0
 801df5e:	4922      	ldr	r1, [pc, #136]	; (801dfe8 <udp_input+0x24c>)
 801df60:	481f      	ldr	r0, [pc, #124]	; (801dfe0 <udp_input+0x244>)
 801df62:	f005 f8bf 	bl	80230e4 <iprintf>
 801df66:	e724      	b.n	801ddb2 <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801df68:	9803      	ldr	r0, [sp, #12]
 801df6a:	f8d7 e004 	ldr.w	lr, [r7, #4]
 801df6e:	6800      	ldr	r0, [r0, #0]
 801df70:	4570      	cmp	r0, lr
 801df72:	f43f af7a 	beq.w	801de6a <udp_input+0xce>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801df76:	9803      	ldr	r0, [sp, #12]
 801df78:	4596      	cmp	lr, r2
 801df7a:	bf08      	it	eq
 801df7c:	4620      	moveq	r0, r4
 801df7e:	9003      	str	r0, [sp, #12]
 801df80:	e773      	b.n	801de6a <udp_input+0xce>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801df82:	4b15      	ldr	r3, [pc, #84]	; (801dfd8 <udp_input+0x23c>)
 801df84:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801df88:	4918      	ldr	r1, [pc, #96]	; (801dfec <udp_input+0x250>)
 801df8a:	4815      	ldr	r0, [pc, #84]	; (801dfe0 <udp_input+0x244>)
 801df8c:	f005 f8aa 	bl	80230e4 <iprintf>
      UDP_STATS_INC(udp.drop);
 801df90:	f8bb 307e 	ldrh.w	r3, [fp, #126]	; 0x7e
      pbuf_free(p);
 801df94:	4640      	mov	r0, r8
      UDP_STATS_INC(udp.drop);
 801df96:	3301      	adds	r3, #1
 801df98:	e7c8      	b.n	801df2c <udp_input+0x190>
        pbuf_free(p);
 801df9a:	4640      	mov	r0, r8
}
 801df9c:	b005      	add	sp, #20
 801df9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801dfa2:	f7fa bf87 	b.w	8018eb4 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801dfa6:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801dfaa:	4640      	mov	r0, r8
 801dfac:	3108      	adds	r1, #8
 801dfae:	b209      	sxth	r1, r1
 801dfb0:	f7fa ff78 	bl	8018ea4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801dfb4:	2103      	movs	r1, #3
 801dfb6:	4640      	mov	r0, r8
 801dfb8:	f002 fc20 	bl	80207fc <icmp_dest_unreach>
 801dfbc:	e79c      	b.n	801def8 <udp_input+0x15c>
          UDP_STATS_INC(udp.cachehit);
 801dfbe:	f8bb 308e 	ldrh.w	r3, [fp, #142]	; 0x8e
 801dfc2:	3301      	adds	r3, #1
 801dfc4:	f8ab 308e 	strh.w	r3, [fp, #142]	; 0x8e
 801dfc8:	e762      	b.n	801de90 <udp_input+0xf4>
 801dfca:	9c03      	ldr	r4, [sp, #12]
 801dfcc:	e760      	b.n	801de90 <udp_input+0xf4>
 801dfce:	bf00      	nop
 801dfd0:	2002e4b0 	.word	0x2002e4b0
 801dfd4:	08041f6c 	.word	0x08041f6c
 801dfd8:	08041f08 	.word	0x08041f08
 801dfdc:	2001f474 	.word	0x2001f474
 801dfe0:	08029ba0 	.word	0x08029ba0
 801dfe4:	08041f38 	.word	0x08041f38
 801dfe8:	08041f50 	.word	0x08041f50
 801dfec:	08041f94 	.word	0x08041f94
 801dff0:	2002e38c 	.word	0x2002e38c
 801dff4:	2001f464 	.word	0x2001f464

0801dff8 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801dff8:	4b39      	ldr	r3, [pc, #228]	; (801e0e0 <udp_bind+0xe8>)
{
 801dffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801dffe:	2900      	cmp	r1, #0
 801e000:	bf08      	it	eq
 801e002:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801e004:	2800      	cmp	r0, #0
 801e006:	d060      	beq.n	801e0ca <udp_bind+0xd2>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e008:	4f36      	ldr	r7, [pc, #216]	; (801e0e4 <udp_bind+0xec>)
 801e00a:	683e      	ldr	r6, [r7, #0]
 801e00c:	b34e      	cbz	r6, 801e062 <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801e00e:	42b0      	cmp	r0, r6
 801e010:	d031      	beq.n	801e076 <udp_bind+0x7e>
 801e012:	4634      	mov	r4, r6
 801e014:	e001      	b.n	801e01a <udp_bind+0x22>
 801e016:	42a0      	cmp	r0, r4
 801e018:	d02d      	beq.n	801e076 <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e01a:	68e4      	ldr	r4, [r4, #12]
 801e01c:	2c00      	cmp	r4, #0
 801e01e:	d1fa      	bne.n	801e016 <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801e020:	b362      	cbz	r2, 801e07c <udp_bind+0x84>
 801e022:	680d      	ldr	r5, [r1, #0]
 801e024:	4633      	mov	r3, r6
 801e026:	e001      	b.n	801e02c <udp_bind+0x34>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e028:	68db      	ldr	r3, [r3, #12]
 801e02a:	b19b      	cbz	r3, 801e054 <udp_bind+0x5c>
      if (pcb != ipcb) {
 801e02c:	4298      	cmp	r0, r3
 801e02e:	d0fb      	beq.n	801e028 <udp_bind+0x30>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801e030:	8a59      	ldrh	r1, [r3, #18]
 801e032:	4291      	cmp	r1, r2
 801e034:	d1f8      	bne.n	801e028 <udp_bind+0x30>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801e036:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801e038:	2900      	cmp	r1, #0
 801e03a:	bf18      	it	ne
 801e03c:	42a9      	cmpne	r1, r5
 801e03e:	d001      	beq.n	801e044 <udp_bind+0x4c>
 801e040:	2d00      	cmp	r5, #0
 801e042:	d1f1      	bne.n	801e028 <udp_bind+0x30>
      return ERR_USE;
 801e044:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801e048:	4618      	mov	r0, r3
 801e04a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e04e:	680d      	ldr	r5, [r1, #0]
 801e050:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801e054:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801e056:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801e058:	b13c      	cbz	r4, 801e06a <udp_bind+0x72>
  return ERR_OK;
 801e05a:	2300      	movs	r3, #0
}
 801e05c:	4618      	mov	r0, r3
 801e05e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801e062:	b382      	cbz	r2, 801e0c6 <udp_bind+0xce>
 801e064:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801e066:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801e068:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801e06a:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801e06c:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801e06e:	6038      	str	r0, [r7, #0]
}
 801e070:	4618      	mov	r0, r3
 801e072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801e076:	2401      	movs	r4, #1
  if (port == 0) {
 801e078:	2a00      	cmp	r2, #0
 801e07a:	d1d2      	bne.n	801e022 <udp_bind+0x2a>
 801e07c:	f8df e074 	ldr.w	lr, [pc, #116]	; 801e0f4 <udp_bind+0xfc>
  rebind = 0;
 801e080:	f44f 4c80 	mov.w	ip, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801e084:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801e088:	f8be 2000 	ldrh.w	r2, [lr]
 801e08c:	4542      	cmp	r2, r8
 801e08e:	d017      	beq.n	801e0c0 <udp_bind+0xc8>
 801e090:	3201      	adds	r2, #1
 801e092:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801e094:	2e00      	cmp	r6, #0
 801e096:	d0da      	beq.n	801e04e <udp_bind+0x56>
 801e098:	4633      	mov	r3, r6
 801e09a:	e002      	b.n	801e0a2 <udp_bind+0xaa>
 801e09c:	68db      	ldr	r3, [r3, #12]
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d0d5      	beq.n	801e04e <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801e0a2:	8a5d      	ldrh	r5, [r3, #18]
 801e0a4:	4295      	cmp	r5, r2
 801e0a6:	d1f9      	bne.n	801e09c <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801e0a8:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e0ac:	fa1f fc8c 	uxth.w	ip, ip
 801e0b0:	f1bc 0f00 	cmp.w	ip, #0
 801e0b4:	d1ea      	bne.n	801e08c <udp_bind+0x94>
      return ERR_USE;
 801e0b6:	f06f 0307 	mvn.w	r3, #7
 801e0ba:	f8ae 2000 	strh.w	r2, [lr]
 801e0be:	e7cd      	b.n	801e05c <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801e0c0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801e0c4:	e7e6      	b.n	801e094 <udp_bind+0x9c>
  rebind = 0;
 801e0c6:	4634      	mov	r4, r6
 801e0c8:	e7d8      	b.n	801e07c <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801e0ca:	4b07      	ldr	r3, [pc, #28]	; (801e0e8 <udp_bind+0xf0>)
 801e0cc:	f240 32b7 	movw	r2, #951	; 0x3b7
 801e0d0:	4906      	ldr	r1, [pc, #24]	; (801e0ec <udp_bind+0xf4>)
 801e0d2:	4807      	ldr	r0, [pc, #28]	; (801e0f0 <udp_bind+0xf8>)
 801e0d4:	f005 f806 	bl	80230e4 <iprintf>
 801e0d8:	f06f 030f 	mvn.w	r3, #15
 801e0dc:	e7be      	b.n	801e05c <udp_bind+0x64>
 801e0de:	bf00      	nop
 801e0e0:	08042888 	.word	0x08042888
 801e0e4:	2002e4b0 	.word	0x2002e4b0
 801e0e8:	08041f08 	.word	0x08041f08
 801e0ec:	08041fb0 	.word	0x08041fb0
 801e0f0:	08029ba0 	.word	0x08029ba0
 801e0f4:	20000412 	.word	0x20000412

0801e0f8 <udp_sendto_if_src>:
{
 801e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0fc:	b085      	sub	sp, #20
 801e0fe:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801e102:	2800      	cmp	r0, #0
 801e104:	f000 8094 	beq.w	801e230 <udp_sendto_if_src+0x138>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801e108:	460d      	mov	r5, r1
 801e10a:	2900      	cmp	r1, #0
 801e10c:	f000 8086 	beq.w	801e21c <udp_sendto_if_src+0x124>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e110:	4690      	mov	r8, r2
 801e112:	2a00      	cmp	r2, #0
 801e114:	d078      	beq.n	801e208 <udp_sendto_if_src+0x110>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801e116:	f1ba 0f00 	cmp.w	sl, #0
 801e11a:	d06b      	beq.n	801e1f4 <udp_sendto_if_src+0xfc>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801e11c:	f1bb 0f00 	cmp.w	fp, #0
 801e120:	f000 8090 	beq.w	801e244 <udp_sendto_if_src+0x14c>
  if (pcb->local_port == 0) {
 801e124:	8a42      	ldrh	r2, [r0, #18]
 801e126:	4699      	mov	r9, r3
 801e128:	4604      	mov	r4, r0
 801e12a:	2a00      	cmp	r2, #0
 801e12c:	d03e      	beq.n	801e1ac <udp_sendto_if_src+0xb4>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801e12e:	892a      	ldrh	r2, [r5, #8]
 801e130:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801e134:	429a      	cmp	r2, r3
 801e136:	d85a      	bhi.n	801e1ee <udp_sendto_if_src+0xf6>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801e138:	2108      	movs	r1, #8
 801e13a:	4628      	mov	r0, r5
 801e13c:	f7fa fe7a 	bl	8018e34 <pbuf_add_header>
 801e140:	2800      	cmp	r0, #0
 801e142:	d13d      	bne.n	801e1c0 <udp_sendto_if_src+0xc8>
 801e144:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801e146:	8973      	ldrh	r3, [r6, #10]
 801e148:	2b07      	cmp	r3, #7
 801e14a:	d948      	bls.n	801e1de <udp_sendto_if_src+0xe6>
  udphdr->src = lwip_htons(pcb->local_port);
 801e14c:	8a60      	ldrh	r0, [r4, #18]
  udphdr = (struct udp_hdr *)q->payload;
 801e14e:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801e150:	f7f9 f85c 	bl	801720c <lwip_htons>
 801e154:	4603      	mov	r3, r0
  udphdr->dest = lwip_htons(dst_port);
 801e156:	4648      	mov	r0, r9
  udphdr->src = lwip_htons(pcb->local_port);
 801e158:	803b      	strh	r3, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801e15a:	f7f9 f857 	bl	801720c <lwip_htons>
  udphdr->chksum = 0x0000;
 801e15e:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801e160:	4602      	mov	r2, r0
    udphdr->len = lwip_htons(q->tot_len);
 801e162:	8930      	ldrh	r0, [r6, #8]
  udphdr->chksum = 0x0000;
 801e164:	71bb      	strb	r3, [r7, #6]
  udphdr->dest = lwip_htons(dst_port);
 801e166:	807a      	strh	r2, [r7, #2]
  udphdr->chksum = 0x0000;
 801e168:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801e16a:	f7f9 f84f 	bl	801720c <lwip_htons>
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801e16e:	f04f 0c11 	mov.w	ip, #17
    udphdr->len = lwip_htons(q->tot_len);
 801e172:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801e174:	4642      	mov	r2, r8
 801e176:	7aa3      	ldrb	r3, [r4, #10]
 801e178:	4651      	mov	r1, sl
 801e17a:	f8cd b008 	str.w	fp, [sp, #8]
 801e17e:	4630      	mov	r0, r6
 801e180:	9300      	str	r3, [sp, #0]
 801e182:	7ae3      	ldrb	r3, [r4, #11]
 801e184:	f8cd c004 	str.w	ip, [sp, #4]
 801e188:	f002 fcca 	bl	8020b20 <ip4_output_if_src>
  if (q != p) {
 801e18c:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801e18e:	4607      	mov	r7, r0
  if (q != p) {
 801e190:	d002      	beq.n	801e198 <udp_sendto_if_src+0xa0>
    pbuf_free(q);
 801e192:	4630      	mov	r0, r6
 801e194:	f7fa fe8e 	bl	8018eb4 <pbuf_free>
  UDP_STATS_INC(udp.xmit);
 801e198:	4a2f      	ldr	r2, [pc, #188]	; (801e258 <udp_sendto_if_src+0x160>)
 801e19a:	f8b2 3078 	ldrh.w	r3, [r2, #120]	; 0x78
 801e19e:	3301      	adds	r3, #1
 801e1a0:	f8a2 3078 	strh.w	r3, [r2, #120]	; 0x78
}
 801e1a4:	4638      	mov	r0, r7
 801e1a6:	b005      	add	sp, #20
 801e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e1ac:	4601      	mov	r1, r0
 801e1ae:	f7ff ff23 	bl	801dff8 <udp_bind>
    if (err != ERR_OK) {
 801e1b2:	4607      	mov	r7, r0
 801e1b4:	2800      	cmp	r0, #0
 801e1b6:	d0ba      	beq.n	801e12e <udp_sendto_if_src+0x36>
}
 801e1b8:	4638      	mov	r0, r7
 801e1ba:	b005      	add	sp, #20
 801e1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801e1c0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e1c4:	2108      	movs	r1, #8
 801e1c6:	2022      	movs	r0, #34	; 0x22
 801e1c8:	f7fa fee2 	bl	8018f90 <pbuf_alloc>
    if (q == NULL) {
 801e1cc:	4606      	mov	r6, r0
 801e1ce:	b170      	cbz	r0, 801e1ee <udp_sendto_if_src+0xf6>
    if (p->tot_len != 0) {
 801e1d0:	892b      	ldrh	r3, [r5, #8]
 801e1d2:	2b00      	cmp	r3, #0
 801e1d4:	d0b7      	beq.n	801e146 <udp_sendto_if_src+0x4e>
      pbuf_chain(q, p);
 801e1d6:	4629      	mov	r1, r5
 801e1d8:	f7fb f82e 	bl	8019238 <pbuf_chain>
 801e1dc:	e7b3      	b.n	801e146 <udp_sendto_if_src+0x4e>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801e1de:	4b1f      	ldr	r3, [pc, #124]	; (801e25c <udp_sendto_if_src+0x164>)
 801e1e0:	f240 320d 	movw	r2, #781	; 0x30d
 801e1e4:	491e      	ldr	r1, [pc, #120]	; (801e260 <udp_sendto_if_src+0x168>)
 801e1e6:	481f      	ldr	r0, [pc, #124]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e1e8:	f004 ff7c 	bl	80230e4 <iprintf>
 801e1ec:	e7ae      	b.n	801e14c <udp_sendto_if_src+0x54>
    return ERR_MEM;
 801e1ee:	f04f 37ff 	mov.w	r7, #4294967295
 801e1f2:	e7d7      	b.n	801e1a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801e1f4:	4b19      	ldr	r3, [pc, #100]	; (801e25c <udp_sendto_if_src+0x164>)
 801e1f6:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801e1fa:	491b      	ldr	r1, [pc, #108]	; (801e268 <udp_sendto_if_src+0x170>)
 801e1fc:	f06f 070f 	mvn.w	r7, #15
 801e200:	4818      	ldr	r0, [pc, #96]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e202:	f004 ff6f 	bl	80230e4 <iprintf>
 801e206:	e7cd      	b.n	801e1a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e208:	4b14      	ldr	r3, [pc, #80]	; (801e25c <udp_sendto_if_src+0x164>)
 801e20a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801e20e:	4917      	ldr	r1, [pc, #92]	; (801e26c <udp_sendto_if_src+0x174>)
 801e210:	f06f 070f 	mvn.w	r7, #15
 801e214:	4813      	ldr	r0, [pc, #76]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e216:	f004 ff65 	bl	80230e4 <iprintf>
 801e21a:	e7c3      	b.n	801e1a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801e21c:	4b0f      	ldr	r3, [pc, #60]	; (801e25c <udp_sendto_if_src+0x164>)
 801e21e:	f240 22d2 	movw	r2, #722	; 0x2d2
 801e222:	4913      	ldr	r1, [pc, #76]	; (801e270 <udp_sendto_if_src+0x178>)
 801e224:	f06f 070f 	mvn.w	r7, #15
 801e228:	480e      	ldr	r0, [pc, #56]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e22a:	f004 ff5b 	bl	80230e4 <iprintf>
 801e22e:	e7b9      	b.n	801e1a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801e230:	4b0a      	ldr	r3, [pc, #40]	; (801e25c <udp_sendto_if_src+0x164>)
 801e232:	f240 22d1 	movw	r2, #721	; 0x2d1
 801e236:	490f      	ldr	r1, [pc, #60]	; (801e274 <udp_sendto_if_src+0x17c>)
 801e238:	f06f 070f 	mvn.w	r7, #15
 801e23c:	4809      	ldr	r0, [pc, #36]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e23e:	f004 ff51 	bl	80230e4 <iprintf>
 801e242:	e7af      	b.n	801e1a4 <udp_sendto_if_src+0xac>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801e244:	4b05      	ldr	r3, [pc, #20]	; (801e25c <udp_sendto_if_src+0x164>)
 801e246:	f240 22d5 	movw	r2, #725	; 0x2d5
 801e24a:	490b      	ldr	r1, [pc, #44]	; (801e278 <udp_sendto_if_src+0x180>)
 801e24c:	f06f 070f 	mvn.w	r7, #15
 801e250:	4804      	ldr	r0, [pc, #16]	; (801e264 <udp_sendto_if_src+0x16c>)
 801e252:	f004 ff47 	bl	80230e4 <iprintf>
 801e256:	e7a5      	b.n	801e1a4 <udp_sendto_if_src+0xac>
 801e258:	2002e38c 	.word	0x2002e38c
 801e25c:	08041f08 	.word	0x08041f08
 801e260:	08042074 	.word	0x08042074
 801e264:	08029ba0 	.word	0x08029ba0
 801e268:	0804202c 	.word	0x0804202c
 801e26c:	08042008 	.word	0x08042008
 801e270:	08041fe8 	.word	0x08041fe8
 801e274:	08041fc8 	.word	0x08041fc8
 801e278:	08042050 	.word	0x08042050

0801e27c <udp_sendto_if>:
{
 801e27c:	b570      	push	{r4, r5, r6, lr}
 801e27e:	b082      	sub	sp, #8
 801e280:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801e282:	2800      	cmp	r0, #0
 801e284:	d035      	beq.n	801e2f2 <udp_sendto_if+0x76>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801e286:	b351      	cbz	r1, 801e2de <udp_sendto_if+0x62>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e288:	b1fa      	cbz	r2, 801e2ca <udp_sendto_if+0x4e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801e28a:	b1a4      	cbz	r4, 801e2b6 <udp_sendto_if+0x3a>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e28c:	6805      	ldr	r5, [r0, #0]
 801e28e:	b935      	cbnz	r5, 801e29e <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801e290:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801e292:	e9cd 4500 	strd	r4, r5, [sp]
 801e296:	f7ff ff2f 	bl	801e0f8 <udp_sendto_if_src>
}
 801e29a:	b002      	add	sp, #8
 801e29c:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801e29e:	f005 06f0 	and.w	r6, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e2a2:	2ee0      	cmp	r6, #224	; 0xe0
 801e2a4:	d0f4      	beq.n	801e290 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801e2a6:	6866      	ldr	r6, [r4, #4]
 801e2a8:	42b5      	cmp	r5, r6
 801e2aa:	d101      	bne.n	801e2b0 <udp_sendto_if+0x34>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801e2ac:	4605      	mov	r5, r0
 801e2ae:	e7f0      	b.n	801e292 <udp_sendto_if+0x16>
        return ERR_RTE;
 801e2b0:	f06f 0003 	mvn.w	r0, #3
 801e2b4:	e7f1      	b.n	801e29a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801e2b6:	4b14      	ldr	r3, [pc, #80]	; (801e308 <udp_sendto_if+0x8c>)
 801e2b8:	f240 2283 	movw	r2, #643	; 0x283
 801e2bc:	4913      	ldr	r1, [pc, #76]	; (801e30c <udp_sendto_if+0x90>)
 801e2be:	4814      	ldr	r0, [pc, #80]	; (801e310 <udp_sendto_if+0x94>)
 801e2c0:	f004 ff10 	bl	80230e4 <iprintf>
 801e2c4:	f06f 000f 	mvn.w	r0, #15
 801e2c8:	e7e7      	b.n	801e29a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e2ca:	4b0f      	ldr	r3, [pc, #60]	; (801e308 <udp_sendto_if+0x8c>)
 801e2cc:	f240 2282 	movw	r2, #642	; 0x282
 801e2d0:	4910      	ldr	r1, [pc, #64]	; (801e314 <udp_sendto_if+0x98>)
 801e2d2:	480f      	ldr	r0, [pc, #60]	; (801e310 <udp_sendto_if+0x94>)
 801e2d4:	f004 ff06 	bl	80230e4 <iprintf>
 801e2d8:	f06f 000f 	mvn.w	r0, #15
 801e2dc:	e7dd      	b.n	801e29a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801e2de:	4b0a      	ldr	r3, [pc, #40]	; (801e308 <udp_sendto_if+0x8c>)
 801e2e0:	f240 2281 	movw	r2, #641	; 0x281
 801e2e4:	490c      	ldr	r1, [pc, #48]	; (801e318 <udp_sendto_if+0x9c>)
 801e2e6:	480a      	ldr	r0, [pc, #40]	; (801e310 <udp_sendto_if+0x94>)
 801e2e8:	f004 fefc 	bl	80230e4 <iprintf>
 801e2ec:	f06f 000f 	mvn.w	r0, #15
 801e2f0:	e7d3      	b.n	801e29a <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801e2f2:	4b05      	ldr	r3, [pc, #20]	; (801e308 <udp_sendto_if+0x8c>)
 801e2f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e2f8:	4908      	ldr	r1, [pc, #32]	; (801e31c <udp_sendto_if+0xa0>)
 801e2fa:	4805      	ldr	r0, [pc, #20]	; (801e310 <udp_sendto_if+0x94>)
 801e2fc:	f004 fef2 	bl	80230e4 <iprintf>
 801e300:	f06f 000f 	mvn.w	r0, #15
 801e304:	e7c9      	b.n	801e29a <udp_sendto_if+0x1e>
 801e306:	bf00      	nop
 801e308:	08041f08 	.word	0x08041f08
 801e30c:	080420fc 	.word	0x080420fc
 801e310:	08029ba0 	.word	0x08029ba0
 801e314:	080420dc 	.word	0x080420dc
 801e318:	080420c0 	.word	0x080420c0
 801e31c:	080420a4 	.word	0x080420a4

0801e320 <udp_sendto>:
{
 801e320:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e322:	b083      	sub	sp, #12
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801e324:	b3a0      	cbz	r0, 801e390 <udp_sendto+0x70>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801e326:	460e      	mov	r6, r1
 801e328:	b341      	cbz	r1, 801e37c <udp_sendto+0x5c>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e32a:	4615      	mov	r5, r2
 801e32c:	b1e2      	cbz	r2, 801e368 <udp_sendto+0x48>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801e32e:	4604      	mov	r4, r0
 801e330:	7a00      	ldrb	r0, [r0, #8]
 801e332:	461f      	mov	r7, r3
 801e334:	b158      	cbz	r0, 801e34e <udp_sendto+0x2e>
    netif = netif_get_by_index(pcb->netif_idx);
 801e336:	f7fa fcdf 	bl	8018cf8 <netif_get_by_index>
  if (netif == NULL) {
 801e33a:	b160      	cbz	r0, 801e356 <udp_sendto+0x36>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801e33c:	9000      	str	r0, [sp, #0]
 801e33e:	463b      	mov	r3, r7
 801e340:	462a      	mov	r2, r5
 801e342:	4631      	mov	r1, r6
 801e344:	4620      	mov	r0, r4
 801e346:	f7ff ff99 	bl	801e27c <udp_sendto_if>
}
 801e34a:	b003      	add	sp, #12
 801e34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801e34e:	4610      	mov	r0, r2
 801e350:	f002 fa76 	bl	8020840 <ip4_route>
 801e354:	e7f1      	b.n	801e33a <udp_sendto+0x1a>
    UDP_STATS_INC(udp.rterr);
 801e356:	4a13      	ldr	r2, [pc, #76]	; (801e3a4 <udp_sendto+0x84>)
    return ERR_RTE;
 801e358:	f06f 0003 	mvn.w	r0, #3
    UDP_STATS_INC(udp.rterr);
 801e35c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 801e360:	3301      	adds	r3, #1
 801e362:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
    return ERR_RTE;
 801e366:	e7f0      	b.n	801e34a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801e368:	4b0f      	ldr	r3, [pc, #60]	; (801e3a8 <udp_sendto+0x88>)
 801e36a:	f240 221a 	movw	r2, #538	; 0x21a
 801e36e:	490f      	ldr	r1, [pc, #60]	; (801e3ac <udp_sendto+0x8c>)
 801e370:	480f      	ldr	r0, [pc, #60]	; (801e3b0 <udp_sendto+0x90>)
 801e372:	f004 feb7 	bl	80230e4 <iprintf>
 801e376:	f06f 000f 	mvn.w	r0, #15
 801e37a:	e7e6      	b.n	801e34a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801e37c:	4b0a      	ldr	r3, [pc, #40]	; (801e3a8 <udp_sendto+0x88>)
 801e37e:	f240 2219 	movw	r2, #537	; 0x219
 801e382:	490c      	ldr	r1, [pc, #48]	; (801e3b4 <udp_sendto+0x94>)
 801e384:	480a      	ldr	r0, [pc, #40]	; (801e3b0 <udp_sendto+0x90>)
 801e386:	f004 fead 	bl	80230e4 <iprintf>
 801e38a:	f06f 000f 	mvn.w	r0, #15
 801e38e:	e7dc      	b.n	801e34a <udp_sendto+0x2a>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801e390:	4b05      	ldr	r3, [pc, #20]	; (801e3a8 <udp_sendto+0x88>)
 801e392:	f44f 7206 	mov.w	r2, #536	; 0x218
 801e396:	4908      	ldr	r1, [pc, #32]	; (801e3b8 <udp_sendto+0x98>)
 801e398:	4805      	ldr	r0, [pc, #20]	; (801e3b0 <udp_sendto+0x90>)
 801e39a:	f004 fea3 	bl	80230e4 <iprintf>
 801e39e:	f06f 000f 	mvn.w	r0, #15
 801e3a2:	e7d2      	b.n	801e34a <udp_sendto+0x2a>
 801e3a4:	2002e38c 	.word	0x2002e38c
 801e3a8:	08041f08 	.word	0x08041f08
 801e3ac:	08042150 	.word	0x08042150
 801e3b0:	08029ba0 	.word	0x08029ba0
 801e3b4:	08042134 	.word	0x08042134
 801e3b8:	0804211c 	.word	0x0804211c

0801e3bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801e3bc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801e3be:	b320      	cbz	r0, 801e40a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801e3c0:	460d      	mov	r5, r1
 801e3c2:	b361      	cbz	r1, 801e41e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801e3c4:	4616      	mov	r6, r2
 801e3c6:	8a42      	ldrh	r2, [r0, #18]
 801e3c8:	4604      	mov	r4, r0
 801e3ca:	b1c2      	cbz	r2, 801e3fe <udp_connect+0x42>
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801e3cc:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e3ce:	4919      	ldr	r1, [pc, #100]	; (801e434 <udp_connect+0x78>)
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801e3d0:	6828      	ldr	r0, [r5, #0]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801e3d2:	f043 0304 	orr.w	r3, r3, #4
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e3d6:	680a      	ldr	r2, [r1, #0]
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801e3d8:	6060      	str	r0, [r4, #4]
  pcb->remote_port = port;
 801e3da:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801e3dc:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e3de:	b142      	cbz	r2, 801e3f2 <udp_connect+0x36>
    if (pcb == ipcb) {
 801e3e0:	4294      	cmp	r4, r2
 801e3e2:	d00a      	beq.n	801e3fa <udp_connect+0x3e>
 801e3e4:	4613      	mov	r3, r2
 801e3e6:	e001      	b.n	801e3ec <udp_connect+0x30>
 801e3e8:	429c      	cmp	r4, r3
 801e3ea:	d006      	beq.n	801e3fa <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801e3ec:	68db      	ldr	r3, [r3, #12]
 801e3ee:	2b00      	cmp	r3, #0
 801e3f0:	d1fa      	bne.n	801e3e8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801e3f2:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801e3f4:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801e3f6:	600c      	str	r4, [r1, #0]
}
 801e3f8:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801e3fa:	2000      	movs	r0, #0
}
 801e3fc:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801e3fe:	4601      	mov	r1, r0
 801e400:	f7ff fdfa 	bl	801dff8 <udp_bind>
    if (err != ERR_OK) {
 801e404:	2800      	cmp	r0, #0
 801e406:	d0e1      	beq.n	801e3cc <udp_connect+0x10>
}
 801e408:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801e40a:	4b0b      	ldr	r3, [pc, #44]	; (801e438 <udp_connect+0x7c>)
 801e40c:	f240 4235 	movw	r2, #1077	; 0x435
 801e410:	490a      	ldr	r1, [pc, #40]	; (801e43c <udp_connect+0x80>)
 801e412:	480b      	ldr	r0, [pc, #44]	; (801e440 <udp_connect+0x84>)
 801e414:	f004 fe66 	bl	80230e4 <iprintf>
 801e418:	f06f 000f 	mvn.w	r0, #15
}
 801e41c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801e41e:	4b06      	ldr	r3, [pc, #24]	; (801e438 <udp_connect+0x7c>)
 801e420:	f240 4236 	movw	r2, #1078	; 0x436
 801e424:	4907      	ldr	r1, [pc, #28]	; (801e444 <udp_connect+0x88>)
 801e426:	4806      	ldr	r0, [pc, #24]	; (801e440 <udp_connect+0x84>)
 801e428:	f004 fe5c 	bl	80230e4 <iprintf>
 801e42c:	f06f 000f 	mvn.w	r0, #15
}
 801e430:	bd70      	pop	{r4, r5, r6, pc}
 801e432:	bf00      	nop
 801e434:	2002e4b0 	.word	0x2002e4b0
 801e438:	08041f08 	.word	0x08041f08
 801e43c:	0804216c 	.word	0x0804216c
 801e440:	08029ba0 	.word	0x08029ba0
 801e444:	08042188 	.word	0x08042188

0801e448 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801e448:	b110      	cbz	r0, 801e450 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801e44a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801e44e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801e450:	4b03      	ldr	r3, [pc, #12]	; (801e460 <udp_recv+0x18>)
 801e452:	f240 428a 	movw	r2, #1162	; 0x48a
 801e456:	4903      	ldr	r1, [pc, #12]	; (801e464 <udp_recv+0x1c>)
 801e458:	4803      	ldr	r0, [pc, #12]	; (801e468 <udp_recv+0x20>)
 801e45a:	f004 be43 	b.w	80230e4 <iprintf>
 801e45e:	bf00      	nop
 801e460:	08041f08 	.word	0x08041f08
 801e464:	080421a4 	.word	0x080421a4
 801e468:	08029ba0 	.word	0x08029ba0

0801e46c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801e46c:	4601      	mov	r1, r0
 801e46e:	b1a0      	cbz	r0, 801e49a <udp_remove+0x2e>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801e470:	4b0d      	ldr	r3, [pc, #52]	; (801e4a8 <udp_remove+0x3c>)
 801e472:	681a      	ldr	r2, [r3, #0]
 801e474:	4282      	cmp	r2, r0
 801e476:	d006      	beq.n	801e486 <udp_remove+0x1a>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801e478:	b13a      	cbz	r2, 801e48a <udp_remove+0x1e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801e47a:	68d3      	ldr	r3, [r2, #12]
 801e47c:	b12b      	cbz	r3, 801e48a <udp_remove+0x1e>
 801e47e:	428b      	cmp	r3, r1
 801e480:	d006      	beq.n	801e490 <udp_remove+0x24>
 801e482:	461a      	mov	r2, r3
 801e484:	e7f8      	b.n	801e478 <udp_remove+0xc>
    udp_pcbs = udp_pcbs->next;
 801e486:	68c2      	ldr	r2, [r0, #12]
 801e488:	601a      	str	r2, [r3, #0]
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801e48a:	2001      	movs	r0, #1
 801e48c:	f7fa ba42 	b.w	8018914 <memp_free>
        pcb2->next = pcb->next;
 801e490:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801e492:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801e494:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801e496:	f7fa ba3d 	b.w	8018914 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801e49a:	4b04      	ldr	r3, [pc, #16]	; (801e4ac <udp_remove+0x40>)
 801e49c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801e4a0:	4903      	ldr	r1, [pc, #12]	; (801e4b0 <udp_remove+0x44>)
 801e4a2:	4804      	ldr	r0, [pc, #16]	; (801e4b4 <udp_remove+0x48>)
 801e4a4:	f004 be1e 	b.w	80230e4 <iprintf>
 801e4a8:	2002e4b0 	.word	0x2002e4b0
 801e4ac:	08041f08 	.word	0x08041f08
 801e4b0:	080421bc 	.word	0x080421bc
 801e4b4:	08029ba0 	.word	0x08029ba0

0801e4b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801e4b8:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801e4ba:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801e4be:	4907      	ldr	r1, [pc, #28]	; (801e4dc <udp_new+0x24>)
 801e4c0:	2001      	movs	r0, #1
 801e4c2:	f7fa fa03 	bl	80188cc <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801e4c6:	4604      	mov	r4, r0
 801e4c8:	b128      	cbz	r0, 801e4d6 <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801e4ca:	2220      	movs	r2, #32
 801e4cc:	2100      	movs	r1, #0
 801e4ce:	f003 fe97 	bl	8022200 <memset>
    pcb->ttl = UDP_TTL;
 801e4d2:	23ff      	movs	r3, #255	; 0xff
 801e4d4:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801e4d6:	4620      	mov	r0, r4
 801e4d8:	bd10      	pop	{r4, pc}
 801e4da:	bf00      	nop
 801e4dc:	08041f08 	.word	0x08041f08

0801e4e0 <udp_new_ip_type>:
{
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801e4e0:	f7ff bfea 	b.w	801e4b8 <udp_new>

0801e4e4 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801e4e4:	b110      	cbz	r0, 801e4ec <udp_netif_ip_addr_changed+0x8>
 801e4e6:	6802      	ldr	r2, [r0, #0]
 801e4e8:	b101      	cbz	r1, 801e4ec <udp_netif_ip_addr_changed+0x8>
 801e4ea:	b902      	cbnz	r2, 801e4ee <udp_netif_ip_addr_changed+0xa>
 801e4ec:	4770      	bx	lr
 801e4ee:	680b      	ldr	r3, [r1, #0]
 801e4f0:	2b00      	cmp	r3, #0
 801e4f2:	d0fb      	beq.n	801e4ec <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e4f4:	4b08      	ldr	r3, [pc, #32]	; (801e518 <udp_netif_ip_addr_changed+0x34>)
 801e4f6:	681b      	ldr	r3, [r3, #0]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d0f7      	beq.n	801e4ec <udp_netif_ip_addr_changed+0x8>
{
 801e4fc:	b410      	push	{r4}
 801e4fe:	e000      	b.n	801e502 <udp_netif_ip_addr_changed+0x1e>
 801e500:	6802      	ldr	r2, [r0, #0]
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801e502:	681c      	ldr	r4, [r3, #0]
 801e504:	4294      	cmp	r4, r2
 801e506:	d101      	bne.n	801e50c <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801e508:	680a      	ldr	r2, [r1, #0]
 801e50a:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801e50c:	68db      	ldr	r3, [r3, #12]
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d1f6      	bne.n	801e500 <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801e512:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e516:	4770      	bx	lr
 801e518:	2002e4b0 	.word	0x2002e4b0

0801e51c <dhcp_option_short>:
  return options_out_len;
}

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801e51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801e51e:	1c87      	adds	r7, r0, #2
{
 801e520:	4604      	mov	r4, r0
 801e522:	460d      	mov	r5, r1
 801e524:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801e526:	2f44      	cmp	r7, #68	; 0x44
 801e528:	d806      	bhi.n	801e538 <dhcp_option_short+0x1c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801e52a:	1c63      	adds	r3, r4, #1
 801e52c:	0a32      	lsrs	r2, r6, #8
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
  return options_out_len;
}
 801e52e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801e530:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801e532:	552a      	strb	r2, [r5, r4]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801e534:	54ee      	strb	r6, [r5, r3]
}
 801e536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801e538:	4b03      	ldr	r3, [pc, #12]	; (801e548 <dhcp_option_short+0x2c>)
 801e53a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 801e53e:	4903      	ldr	r1, [pc, #12]	; (801e54c <dhcp_option_short+0x30>)
 801e540:	4803      	ldr	r0, [pc, #12]	; (801e550 <dhcp_option_short+0x34>)
 801e542:	f004 fdcf 	bl	80230e4 <iprintf>
 801e546:	e7f0      	b.n	801e52a <dhcp_option_short+0xe>
 801e548:	080421d4 	.word	0x080421d4
 801e54c:	0804220c 	.word	0x0804220c
 801e550:	08029ba0 	.word	0x08029ba0

0801e554 <dhcp_option>:
{
 801e554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e556:	461e      	mov	r6, r3
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801e558:	3302      	adds	r3, #2
{
 801e55a:	4604      	mov	r4, r0
 801e55c:	460d      	mov	r5, r1
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801e55e:	4403      	add	r3, r0
{
 801e560:	4617      	mov	r7, r2
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801e562:	2b44      	cmp	r3, #68	; 0x44
 801e564:	d806      	bhi.n	801e574 <dhcp_option+0x20>
  options[options_out_len++] = option_type;
 801e566:	1c63      	adds	r3, r4, #1
  options[options_out_len++] = option_len;
 801e568:	1ca0      	adds	r0, r4, #2
  options[options_out_len++] = option_type;
 801e56a:	552f      	strb	r7, [r5, r4]
  options[options_out_len++] = option_len;
 801e56c:	b29b      	uxth	r3, r3
}
 801e56e:	b280      	uxth	r0, r0
  options[options_out_len++] = option_len;
 801e570:	54ee      	strb	r6, [r5, r3]
}
 801e572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801e574:	4b03      	ldr	r3, [pc, #12]	; (801e584 <dhcp_option+0x30>)
 801e576:	f240 529a 	movw	r2, #1434	; 0x59a
 801e57a:	4903      	ldr	r1, [pc, #12]	; (801e588 <dhcp_option+0x34>)
 801e57c:	4803      	ldr	r0, [pc, #12]	; (801e58c <dhcp_option+0x38>)
 801e57e:	f004 fdb1 	bl	80230e4 <iprintf>
 801e582:	e7f0      	b.n	801e566 <dhcp_option+0x12>
 801e584:	080421d4 	.word	0x080421d4
 801e588:	08042248 	.word	0x08042248
 801e58c:	08029ba0 	.word	0x08029ba0

0801e590 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801e590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801e592:	1d07      	adds	r7, r0, #4
{
 801e594:	4604      	mov	r4, r0
 801e596:	460d      	mov	r5, r1
 801e598:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801e59a:	2f44      	cmp	r7, #68	; 0x44
 801e59c:	d80e      	bhi.n	801e5bc <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801e59e:	0e30      	lsrs	r0, r6, #24
 801e5a0:	1c61      	adds	r1, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801e5a2:	1ca2      	adds	r2, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801e5a4:	1ce3      	adds	r3, r4, #3
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801e5a6:	5528      	strb	r0, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801e5a8:	b289      	uxth	r1, r1
 801e5aa:	0c34      	lsrs	r4, r6, #16
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801e5ac:	b292      	uxth	r2, r2
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801e5ae:	546c      	strb	r4, [r5, r1]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801e5b0:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801e5b2:	0a31      	lsrs	r1, r6, #8
  return options_out_len;
}
 801e5b4:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801e5b6:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801e5b8:	54ee      	strb	r6, [r5, r3]
}
 801e5ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801e5bc:	4b03      	ldr	r3, [pc, #12]	; (801e5cc <dhcp_option_long+0x3c>)
 801e5be:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801e5c2:	4903      	ldr	r1, [pc, #12]	; (801e5d0 <dhcp_option_long+0x40>)
 801e5c4:	4803      	ldr	r0, [pc, #12]	; (801e5d4 <dhcp_option_long+0x44>)
 801e5c6:	f004 fd8d 	bl	80230e4 <iprintf>
 801e5ca:	e7e8      	b.n	801e59e <dhcp_option_long+0xe>
 801e5cc:	080421d4 	.word	0x080421d4
 801e5d0:	0804228c 	.word	0x0804228c
 801e5d4:	08029ba0 	.word	0x08029ba0

0801e5d8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801e5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801e5dc:	4606      	mov	r6, r0
 801e5de:	2800      	cmp	r0, #0
 801e5e0:	f000 809a 	beq.w	801e718 <dhcp_create_msg+0x140>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801e5e4:	460c      	mov	r4, r1
 801e5e6:	2900      	cmp	r1, #0
 801e5e8:	f000 808d 	beq.w	801e706 <dhcp_create_msg+0x12e>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801e5ec:	4690      	mov	r8, r2
 801e5ee:	f44f 719a 	mov.w	r1, #308	; 0x134
 801e5f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e5f6:	2036      	movs	r0, #54	; 0x36
 801e5f8:	4699      	mov	r9, r3
 801e5fa:	f7fa fcc9 	bl	8018f90 <pbuf_alloc>
  if (p_out == NULL) {
 801e5fe:	4607      	mov	r7, r0
 801e600:	2800      	cmp	r0, #0
 801e602:	d04a      	beq.n	801e69a <dhcp_create_msg+0xc2>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e604:	8943      	ldrh	r3, [r0, #10]
 801e606:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801e60a:	d374      	bcc.n	801e6f6 <dhcp_create_msg+0x11e>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e60c:	f1b8 0f03 	cmp.w	r8, #3
 801e610:	d053      	beq.n	801e6ba <dhcp_create_msg+0xe2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801e612:	79a3      	ldrb	r3, [r4, #6]
 801e614:	2b00      	cmp	r3, #0
 801e616:	d043      	beq.n	801e6a0 <dhcp_create_msg+0xc8>
 801e618:	4b44      	ldr	r3, [pc, #272]	; (801e72c <dhcp_create_msg+0x154>)
 801e61a:	6818      	ldr	r0, [r3, #0]
    dhcp->xid = xid;
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801e61c:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e620:	f44f 729a 	mov.w	r2, #308	; 0x134
 801e624:	2100      	movs	r1, #0
    dhcp->xid = xid;
 801e626:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e628:	4650      	mov	r0, sl
 801e62a:	f003 fde9 	bl	8022200 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801e62e:	2301      	movs	r3, #1
 801e630:	f88a 3000 	strb.w	r3, [sl]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801e634:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801e638:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801e63c:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e640:	6820      	ldr	r0, [r4, #0]
 801e642:	f7f8 fde7 	bl	8017214 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e646:	f1b8 0f04 	cmp.w	r8, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e64a:	f8ca 0004 	str.w	r0, [sl, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e64e:	d12c      	bne.n	801e6aa <dhcp_create_msg+0xd2>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801e650:	6873      	ldr	r3, [r6, #4]
 801e652:	f8ca 300c 	str.w	r3, [sl, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e656:	f106 012e 	add.w	r1, r6, #46	; 0x2e
 801e65a:	f10a 041c 	add.w	r4, sl, #28
 801e65e:	3634      	adds	r6, #52	; 0x34
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801e660:	f811 5b01 	ldrb.w	r5, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e664:	428e      	cmp	r6, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 801e666:	f804 5b01 	strb.w	r5, [r4], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801e66a:	d1f9      	bne.n	801e660 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e66c:	2363      	movs	r3, #99	; 0x63
 801e66e:	f06f 047d 	mvn.w	r4, #125	; 0x7d
 801e672:	2053      	movs	r0, #83	; 0x53
  options[options_out_len++] = option_type;
 801e674:	2135      	movs	r1, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e676:	f88a 30ec 	strb.w	r3, [sl, #236]	; 0xec
  options[options_out_len++] = option_len;
 801e67a:	2201      	movs	r2, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e67c:	f88a 30ef 	strb.w	r3, [sl, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 801e680:	2303      	movs	r3, #3
  options[options_out_len++] = value;
 801e682:	f88a 80f2 	strb.w	r8, [sl, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801e686:	f88a 40ed 	strb.w	r4, [sl, #237]	; 0xed
 801e68a:	f88a 00ee 	strb.w	r0, [sl, #238]	; 0xee
  options[options_out_len++] = option_type;
 801e68e:	f88a 10f0 	strb.w	r1, [sl, #240]	; 0xf0
  options[options_out_len++] = option_len;
 801e692:	f88a 20f1 	strb.w	r2, [sl, #241]	; 0xf1
    *options_out_len = options_out_len_loc;
 801e696:	f8a9 3000 	strh.w	r3, [r9]
  }
  return p_out;
}
 801e69a:	4638      	mov	r0, r7
 801e69c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      xid = LWIP_RAND();
 801e6a0:	f004 fdc4 	bl	802322c <rand>
 801e6a4:	4b21      	ldr	r3, [pc, #132]	; (801e72c <dhcp_create_msg+0x154>)
 801e6a6:	6018      	str	r0, [r3, #0]
 801e6a8:	e7b8      	b.n	801e61c <dhcp_create_msg+0x44>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801e6aa:	f1a8 0307 	sub.w	r3, r8, #7
 801e6ae:	2b01      	cmp	r3, #1
 801e6b0:	d9ce      	bls.n	801e650 <dhcp_create_msg+0x78>
 801e6b2:	f1b8 0f03 	cmp.w	r8, #3
 801e6b6:	d1ce      	bne.n	801e656 <dhcp_create_msg+0x7e>
 801e6b8:	e018      	b.n	801e6ec <dhcp_create_msg+0x114>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801e6ba:	7963      	ldrb	r3, [r4, #5]
 801e6bc:	2b03      	cmp	r3, #3
 801e6be:	d0a8      	beq.n	801e612 <dhcp_create_msg+0x3a>
  msg_out = (struct dhcp_msg *)p_out->payload;
 801e6c0:	f8d7 a004 	ldr.w	sl, [r7, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801e6c4:	f44f 729a 	mov.w	r2, #308	; 0x134
 801e6c8:	2100      	movs	r1, #0
 801e6ca:	4650      	mov	r0, sl
 801e6cc:	f003 fd98 	bl	8022200 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 801e6d0:	2301      	movs	r3, #1
 801e6d2:	f88a 3000 	strb.w	r3, [sl]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801e6d6:	f88a 3001 	strb.w	r3, [sl, #1]
  msg_out->hlen = netif->hwaddr_len;
 801e6da:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801e6de:	f88a 3002 	strb.w	r3, [sl, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801e6e2:	6820      	ldr	r0, [r4, #0]
 801e6e4:	f7f8 fd96 	bl	8017214 <lwip_htonl>
 801e6e8:	f8ca 0004 	str.w	r0, [sl, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801e6ec:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801e6ee:	3b04      	subs	r3, #4
 801e6f0:	2b01      	cmp	r3, #1
 801e6f2:	d8b0      	bhi.n	801e656 <dhcp_create_msg+0x7e>
 801e6f4:	e7ac      	b.n	801e650 <dhcp_create_msg+0x78>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801e6f6:	4b0e      	ldr	r3, [pc, #56]	; (801e730 <dhcp_create_msg+0x158>)
 801e6f8:	f240 7271 	movw	r2, #1905	; 0x771
 801e6fc:	490d      	ldr	r1, [pc, #52]	; (801e734 <dhcp_create_msg+0x15c>)
 801e6fe:	480e      	ldr	r0, [pc, #56]	; (801e738 <dhcp_create_msg+0x160>)
 801e700:	f004 fcf0 	bl	80230e4 <iprintf>
 801e704:	e782      	b.n	801e60c <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801e706:	4b0a      	ldr	r3, [pc, #40]	; (801e730 <dhcp_create_msg+0x158>)
 801e708:	f240 726a 	movw	r2, #1898	; 0x76a
 801e70c:	490b      	ldr	r1, [pc, #44]	; (801e73c <dhcp_create_msg+0x164>)
 801e70e:	4627      	mov	r7, r4
 801e710:	4809      	ldr	r0, [pc, #36]	; (801e738 <dhcp_create_msg+0x160>)
 801e712:	f004 fce7 	bl	80230e4 <iprintf>
 801e716:	e7c0      	b.n	801e69a <dhcp_create_msg+0xc2>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801e718:	4607      	mov	r7, r0
 801e71a:	4b05      	ldr	r3, [pc, #20]	; (801e730 <dhcp_create_msg+0x158>)
 801e71c:	f240 7269 	movw	r2, #1897	; 0x769
 801e720:	4907      	ldr	r1, [pc, #28]	; (801e740 <dhcp_create_msg+0x168>)
 801e722:	4805      	ldr	r0, [pc, #20]	; (801e738 <dhcp_create_msg+0x160>)
 801e724:	f004 fcde 	bl	80230e4 <iprintf>
 801e728:	e7b7      	b.n	801e69a <dhcp_create_msg+0xc2>
 801e72a:	bf00      	nop
 801e72c:	2001aa84 	.word	0x2001aa84
 801e730:	080421d4 	.word	0x080421d4
 801e734:	08042308 	.word	0x08042308
 801e738:	08029ba0 	.word	0x08029ba0
 801e73c:	080422e8 	.word	0x080422e8
 801e740:	080422c8 	.word	0x080422c8

0801e744 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801e744:	4603      	mov	r3, r0
 801e746:	4610      	mov	r0, r2
 801e748:	b470      	push	{r4, r5, r6}
  options[options_out_len++] = DHCP_OPTION_END;
 801e74a:	1c5c      	adds	r4, r3, #1
 801e74c:	25ff      	movs	r5, #255	; 0xff
 801e74e:	b2a4      	uxth	r4, r4
 801e750:	54cd      	strb	r5, [r1, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e752:	2c43      	cmp	r4, #67	; 0x43
 801e754:	d80c      	bhi.n	801e770 <dhcp_option_trailer+0x2c>
 801e756:	f1c3 0642 	rsb	r6, r3, #66	; 0x42
 801e75a:	1e63      	subs	r3, r4, #1
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801e75c:	2500      	movs	r5, #0
 801e75e:	fa14 f486 	uxtah	r4, r4, r6
 801e762:	440b      	add	r3, r1
 801e764:	440c      	add	r4, r1
 801e766:	f803 5f01 	strb.w	r5, [r3, #1]!
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801e76a:	42a3      	cmp	r3, r4
 801e76c:	d1fb      	bne.n	801e766 <dhcp_option_trailer+0x22>
    options[options_out_len++] = 0;
 801e76e:	2444      	movs	r4, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e770:	f104 01f0 	add.w	r1, r4, #240	; 0xf0
}
 801e774:	bc70      	pop	{r4, r5, r6}
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801e776:	b289      	uxth	r1, r1
 801e778:	f7fa bca8 	b.w	80190cc <pbuf_realloc>

0801e77c <dhcp_reboot>:
{
 801e77c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801e780:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801e782:	b087      	sub	sp, #28
 801e784:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 801e786:	797b      	ldrb	r3, [r7, #5]
 801e788:	2b03      	cmp	r3, #3
 801e78a:	d004      	beq.n	801e796 <dhcp_reboot+0x1a>
    dhcp->tries = 0;
 801e78c:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801e78e:	2203      	movs	r2, #3
    dhcp->tries = 0;
 801e790:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801e792:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801e794:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e796:	f10d 0316 	add.w	r3, sp, #22
 801e79a:	2203      	movs	r2, #3
 801e79c:	4639      	mov	r1, r7
 801e79e:	4648      	mov	r0, r9
 801e7a0:	f7ff ff1a 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801e7a4:	4680      	mov	r8, r0
 801e7a6:	2800      	cmp	r0, #0
 801e7a8:	d07a      	beq.n	801e8a0 <dhcp_reboot+0x124>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e7aa:	6845      	ldr	r5, [r0, #4]
 801e7ac:	2302      	movs	r3, #2
 801e7ae:	2239      	movs	r2, #57	; 0x39
 801e7b0:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801e7b4:	35f0      	adds	r5, #240	; 0xf0
 801e7b6:	4e3c      	ldr	r6, [pc, #240]	; (801e8a8 <dhcp_reboot+0x12c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e7b8:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e7bc:	4629      	mov	r1, r5
 801e7be:	f106 0b03 	add.w	fp, r6, #3
 801e7c2:	f7ff fec7 	bl	801e554 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801e7c6:	4629      	mov	r1, r5
 801e7c8:	f44f 7210 	mov.w	r2, #576	; 0x240
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e7cc:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801e7d0:	f7ff fea4 	bl	801e51c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e7d4:	2304      	movs	r3, #4
 801e7d6:	4629      	mov	r1, r5
 801e7d8:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801e7da:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e7de:	f7ff feb9 	bl	801e554 <dhcp_option>
 801e7e2:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e7e4:	69f8      	ldr	r0, [r7, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e7e6:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e7ea:	f7f8 fd13 	bl	8017214 <lwip_htonl>
 801e7ee:	4629      	mov	r1, r5
 801e7f0:	4602      	mov	r2, r0
 801e7f2:	4620      	mov	r0, r4
 801e7f4:	f7ff fecc 	bl	801e590 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e7f8:	4629      	mov	r1, r5
 801e7fa:	2304      	movs	r3, #4
 801e7fc:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e7fe:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e802:	f7ff fea7 	bl	801e554 <dhcp_option>
 801e806:	4604      	mov	r4, r0
 801e808:	9003      	str	r0, [sp, #12]
 801e80a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e80e:	2c43      	cmp	r4, #67	; 0x43
 801e810:	d80b      	bhi.n	801e82a <dhcp_reboot+0xae>
  options[options_out_len++] = value;
 801e812:	1c63      	adds	r3, r4, #1
 801e814:	f805 a004 	strb.w	sl, [r5, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e818:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801e81a:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e81c:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e820:	d00b      	beq.n	801e83a <dhcp_reboot+0xbe>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e822:	2c43      	cmp	r4, #67	; 0x43
 801e824:	f816 ab01 	ldrb.w	sl, [r6], #1
 801e828:	d9f3      	bls.n	801e812 <dhcp_reboot+0x96>
 801e82a:	4b20      	ldr	r3, [pc, #128]	; (801e8ac <dhcp_reboot+0x130>)
 801e82c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801e830:	491f      	ldr	r1, [pc, #124]	; (801e8b0 <dhcp_reboot+0x134>)
 801e832:	4820      	ldr	r0, [pc, #128]	; (801e8b4 <dhcp_reboot+0x138>)
 801e834:	f004 fc56 	bl	80230e4 <iprintf>
 801e838:	e7eb      	b.n	801e812 <dhcp_reboot+0x96>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e83a:	9803      	ldr	r0, [sp, #12]
 801e83c:	4629      	mov	r1, r5
 801e83e:	4642      	mov	r2, r8
 801e840:	3004      	adds	r0, #4
 801e842:	b280      	uxth	r0, r0
 801e844:	f7ff ff7e 	bl	801e744 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801e848:	4a1b      	ldr	r2, [pc, #108]	; (801e8b8 <dhcp_reboot+0x13c>)
 801e84a:	f8cd 9000 	str.w	r9, [sp]
 801e84e:	2343      	movs	r3, #67	; 0x43
 801e850:	6810      	ldr	r0, [r2, #0]
 801e852:	4641      	mov	r1, r8
 801e854:	4a19      	ldr	r2, [pc, #100]	; (801e8bc <dhcp_reboot+0x140>)
 801e856:	f7ff fd11 	bl	801e27c <udp_sendto_if>
 801e85a:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801e85c:	4640      	mov	r0, r8
 801e85e:	f7fa fb29 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801e862:	79bb      	ldrb	r3, [r7, #6]
 801e864:	2bff      	cmp	r3, #255	; 0xff
 801e866:	d015      	beq.n	801e894 <dhcp_reboot+0x118>
    dhcp->tries++;
 801e868:	3301      	adds	r3, #1
 801e86a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e86c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801e86e:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e870:	d810      	bhi.n	801e894 <dhcp_reboot+0x118>
 801e872:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801e876:	4a12      	ldr	r2, [pc, #72]	; (801e8c0 <dhcp_reboot+0x144>)
}
 801e878:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801e87a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801e87e:	00db      	lsls	r3, r3, #3
 801e880:	b29b      	uxth	r3, r3
 801e882:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e886:	fba2 2303 	umull	r2, r3, r2, r3
 801e88a:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e88c:	813b      	strh	r3, [r7, #8]
}
 801e88e:	b007      	add	sp, #28
 801e890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801e894:	2314      	movs	r3, #20
}
 801e896:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801e898:	813b      	strh	r3, [r7, #8]
}
 801e89a:	b007      	add	sp, #28
 801e89c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801e8a0:	f04f 34ff 	mov.w	r4, #4294967295
 801e8a4:	e7dd      	b.n	801e862 <dhcp_reboot+0xe6>
 801e8a6:	bf00      	nop
 801e8a8:	0804254d 	.word	0x0804254d
 801e8ac:	080421d4 	.word	0x080421d4
 801e8b0:	08042348 	.word	0x08042348
 801e8b4:	08029ba0 	.word	0x08029ba0
 801e8b8:	2001aa7c 	.word	0x2001aa7c
 801e8bc:	0804288c 	.word	0x0804288c
 801e8c0:	10624dd3 	.word	0x10624dd3

0801e8c4 <dhcp_select>:
{
 801e8c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e8c8:	b087      	sub	sp, #28
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801e8ca:	2800      	cmp	r0, #0
 801e8cc:	f000 80ad 	beq.w	801ea2a <dhcp_select+0x166>
  dhcp = netif_dhcp_data(netif);
 801e8d0:	6a85      	ldr	r5, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801e8d2:	4607      	mov	r7, r0
 801e8d4:	2d00      	cmp	r5, #0
 801e8d6:	f000 809e 	beq.w	801ea16 <dhcp_select+0x152>
  if (new_state != dhcp->state) {
 801e8da:	796b      	ldrb	r3, [r5, #5]
 801e8dc:	2b01      	cmp	r3, #1
 801e8de:	d004      	beq.n	801e8ea <dhcp_select+0x26>
    dhcp->tries = 0;
 801e8e0:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801e8e2:	2201      	movs	r2, #1
    dhcp->tries = 0;
 801e8e4:	71ab      	strb	r3, [r5, #6]
    dhcp->state = new_state;
 801e8e6:	716a      	strb	r2, [r5, #5]
    dhcp->request_timeout = 0;
 801e8e8:	812b      	strh	r3, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801e8ea:	f10d 0316 	add.w	r3, sp, #22
 801e8ee:	2203      	movs	r2, #3
 801e8f0:	4629      	mov	r1, r5
 801e8f2:	4638      	mov	r0, r7
 801e8f4:	f7ff fe70 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801e8f8:	4681      	mov	r9, r0
 801e8fa:	2800      	cmp	r0, #0
 801e8fc:	f000 8088 	beq.w	801ea10 <dhcp_select+0x14c>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e900:	6846      	ldr	r6, [r0, #4]
 801e902:	2302      	movs	r3, #2
 801e904:	2239      	movs	r2, #57	; 0x39
 801e906:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801e90a:	36f0      	adds	r6, #240	; 0xf0
 801e90c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 801ea64 <dhcp_select+0x1a0>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e910:	f04f 0b01 	mov.w	fp, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e914:	4631      	mov	r1, r6
 801e916:	f108 0a03 	add.w	sl, r8, #3
 801e91a:	f7ff fe1b 	bl	801e554 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e91e:	4631      	mov	r1, r6
 801e920:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801e922:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e926:	f7ff fdf9 	bl	801e51c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e92a:	2304      	movs	r3, #4
 801e92c:	4631      	mov	r1, r6
 801e92e:	2232      	movs	r2, #50	; 0x32
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801e930:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e934:	f7ff fe0e 	bl	801e554 <dhcp_option>
 801e938:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e93a:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801e93c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e940:	f7f8 fc68 	bl	8017214 <lwip_htonl>
 801e944:	4631      	mov	r1, r6
 801e946:	4602      	mov	r2, r0
 801e948:	4620      	mov	r0, r4
 801e94a:	f7ff fe21 	bl	801e590 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801e94e:	2304      	movs	r3, #4
 801e950:	4631      	mov	r1, r6
 801e952:	2236      	movs	r2, #54	; 0x36
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801e954:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801e958:	f7ff fdfc 	bl	801e554 <dhcp_option>
 801e95c:	4604      	mov	r4, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801e95e:	69a8      	ldr	r0, [r5, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801e960:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801e964:	f7f8 fc56 	bl	8017214 <lwip_htonl>
 801e968:	4631      	mov	r1, r6
 801e96a:	4602      	mov	r2, r0
 801e96c:	4620      	mov	r0, r4
 801e96e:	f7ff fe0f 	bl	801e590 <dhcp_option_long>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e972:	4631      	mov	r1, r6
 801e974:	2304      	movs	r3, #4
 801e976:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801e978:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801e97c:	f7ff fdea 	bl	801e554 <dhcp_option>
 801e980:	4604      	mov	r4, r0
 801e982:	9003      	str	r0, [sp, #12]
 801e984:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e988:	2c43      	cmp	r4, #67	; 0x43
 801e98a:	d80b      	bhi.n	801e9a4 <dhcp_select+0xe0>
  options[options_out_len++] = value;
 801e98c:	1c63      	adds	r3, r4, #1
 801e98e:	f806 b004 	strb.w	fp, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e992:	45d0      	cmp	r8, sl
  options[options_out_len++] = value;
 801e994:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801e996:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801e99a:	d00b      	beq.n	801e9b4 <dhcp_select+0xf0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801e99c:	2c43      	cmp	r4, #67	; 0x43
 801e99e:	f818 bb01 	ldrb.w	fp, [r8], #1
 801e9a2:	d9f3      	bls.n	801e98c <dhcp_select+0xc8>
 801e9a4:	4b26      	ldr	r3, [pc, #152]	; (801ea40 <dhcp_select+0x17c>)
 801e9a6:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801e9aa:	4926      	ldr	r1, [pc, #152]	; (801ea44 <dhcp_select+0x180>)
 801e9ac:	4826      	ldr	r0, [pc, #152]	; (801ea48 <dhcp_select+0x184>)
 801e9ae:	f004 fb99 	bl	80230e4 <iprintf>
 801e9b2:	e7eb      	b.n	801e98c <dhcp_select+0xc8>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801e9b4:	9803      	ldr	r0, [sp, #12]
 801e9b6:	4631      	mov	r1, r6
 801e9b8:	464a      	mov	r2, r9
 801e9ba:	3004      	adds	r0, #4
 801e9bc:	b280      	uxth	r0, r0
 801e9be:	f7ff fec1 	bl	801e744 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801e9c2:	4a22      	ldr	r2, [pc, #136]	; (801ea4c <dhcp_select+0x188>)
 801e9c4:	4822      	ldr	r0, [pc, #136]	; (801ea50 <dhcp_select+0x18c>)
 801e9c6:	2343      	movs	r3, #67	; 0x43
 801e9c8:	9700      	str	r7, [sp, #0]
 801e9ca:	4649      	mov	r1, r9
 801e9cc:	6800      	ldr	r0, [r0, #0]
 801e9ce:	9201      	str	r2, [sp, #4]
 801e9d0:	4a20      	ldr	r2, [pc, #128]	; (801ea54 <dhcp_select+0x190>)
 801e9d2:	f7ff fb91 	bl	801e0f8 <udp_sendto_if_src>
 801e9d6:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801e9d8:	4648      	mov	r0, r9
 801e9da:	f7fa fa6b 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801e9de:	79ab      	ldrb	r3, [r5, #6]
 801e9e0:	2bff      	cmp	r3, #255	; 0xff
 801e9e2:	d013      	beq.n	801ea0c <dhcp_select+0x148>
    dhcp->tries++;
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801e9e8:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801e9ea:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801e9ec:	d80e      	bhi.n	801ea0c <dhcp_select+0x148>
 801e9ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801e9f2:	4919      	ldr	r1, [pc, #100]	; (801ea58 <dhcp_select+0x194>)
 801e9f4:	4093      	lsls	r3, r2
 801e9f6:	b29b      	uxth	r3, r3
 801e9f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801e9fc:	fba1 2303 	umull	r2, r3, r1, r3
 801ea00:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ea02:	812b      	strh	r3, [r5, #8]
}
 801ea04:	4620      	mov	r0, r4
 801ea06:	b007      	add	sp, #28
 801ea08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801ea0c:	2378      	movs	r3, #120	; 0x78
 801ea0e:	e7f8      	b.n	801ea02 <dhcp_select+0x13e>
 801ea10:	f04f 34ff 	mov.w	r4, #4294967295
 801ea14:	e7e3      	b.n	801e9de <dhcp_select+0x11a>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801ea16:	4b0a      	ldr	r3, [pc, #40]	; (801ea40 <dhcp_select+0x17c>)
 801ea18:	f240 1279 	movw	r2, #377	; 0x179
 801ea1c:	490f      	ldr	r1, [pc, #60]	; (801ea5c <dhcp_select+0x198>)
 801ea1e:	f06f 0405 	mvn.w	r4, #5
 801ea22:	4809      	ldr	r0, [pc, #36]	; (801ea48 <dhcp_select+0x184>)
 801ea24:	f004 fb5e 	bl	80230e4 <iprintf>
 801ea28:	e7ec      	b.n	801ea04 <dhcp_select+0x140>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801ea2a:	4b05      	ldr	r3, [pc, #20]	; (801ea40 <dhcp_select+0x17c>)
 801ea2c:	f240 1277 	movw	r2, #375	; 0x177
 801ea30:	490b      	ldr	r1, [pc, #44]	; (801ea60 <dhcp_select+0x19c>)
 801ea32:	f06f 040f 	mvn.w	r4, #15
 801ea36:	4804      	ldr	r0, [pc, #16]	; (801ea48 <dhcp_select+0x184>)
 801ea38:	f004 fb54 	bl	80230e4 <iprintf>
 801ea3c:	e7e2      	b.n	801ea04 <dhcp_select+0x140>
 801ea3e:	bf00      	nop
 801ea40:	080421d4 	.word	0x080421d4
 801ea44:	08042348 	.word	0x08042348
 801ea48:	08029ba0 	.word	0x08029ba0
 801ea4c:	08042888 	.word	0x08042888
 801ea50:	2001aa7c 	.word	0x2001aa7c
 801ea54:	0804288c 	.word	0x0804288c
 801ea58:	10624dd3 	.word	0x10624dd3
 801ea5c:	0804239c 	.word	0x0804239c
 801ea60:	08042380 	.word	0x08042380
 801ea64:	0804254d 	.word	0x0804254d

0801ea68 <dhcp_discover>:
{
 801ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ea6c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ea6e:	2300      	movs	r3, #0
{
 801ea70:	b087      	sub	sp, #28
 801ea72:	4680      	mov	r8, r0
  if (new_state != dhcp->state) {
 801ea74:	796a      	ldrb	r2, [r5, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801ea76:	61eb      	str	r3, [r5, #28]
  if (new_state != dhcp->state) {
 801ea78:	2a06      	cmp	r2, #6
 801ea7a:	d003      	beq.n	801ea84 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 801ea7c:	2206      	movs	r2, #6
    dhcp->tries = 0;
 801ea7e:	71ab      	strb	r3, [r5, #6]
    dhcp->request_timeout = 0;
 801ea80:	812b      	strh	r3, [r5, #8]
    dhcp->state = new_state;
 801ea82:	716a      	strb	r2, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801ea84:	f10d 0316 	add.w	r3, sp, #22
 801ea88:	2201      	movs	r2, #1
 801ea8a:	4629      	mov	r1, r5
 801ea8c:	4640      	mov	r0, r8
 801ea8e:	f7ff fda3 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801ea92:	4607      	mov	r7, r0
 801ea94:	2800      	cmp	r0, #0
 801ea96:	d04c      	beq.n	801eb32 <dhcp_discover+0xca>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801ea98:	6841      	ldr	r1, [r0, #4]
 801ea9a:	2302      	movs	r3, #2
 801ea9c:	2239      	movs	r2, #57	; 0x39
 801ea9e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801eaa2:	f101 09f0 	add.w	r9, r1, #240	; 0xf0
 801eaa6:	4e31      	ldr	r6, [pc, #196]	; (801eb6c <dhcp_discover+0x104>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801eaa8:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801eaac:	4649      	mov	r1, r9
 801eaae:	f106 0b03 	add.w	fp, r6, #3
 801eab2:	f7ff fd4f 	bl	801e554 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801eab6:	4649      	mov	r1, r9
 801eab8:	f8b8 202c 	ldrh.w	r2, [r8, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801eabc:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801eac0:	f7ff fd2c 	bl	801e51c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801eac4:	4649      	mov	r1, r9
 801eac6:	2304      	movs	r3, #4
 801eac8:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801eaca:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801eace:	f7ff fd41 	bl	801e554 <dhcp_option>
 801ead2:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801ead4:	4926      	ldr	r1, [pc, #152]	; (801eb70 <dhcp_discover+0x108>)
 801ead6:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801ead8:	9003      	str	r0, [sp, #12]
 801eada:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801eade:	d80b      	bhi.n	801eaf8 <dhcp_discover+0x90>
  options[options_out_len++] = value;
 801eae0:	1c63      	adds	r3, r4, #1
 801eae2:	f809 a004 	strb.w	sl, [r9, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801eae6:	455e      	cmp	r6, fp
  options[options_out_len++] = value;
 801eae8:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801eaea:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801eaee:	d00b      	beq.n	801eb08 <dhcp_discover+0xa0>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801eaf0:	2c43      	cmp	r4, #67	; 0x43
 801eaf2:	f816 ab01 	ldrb.w	sl, [r6], #1
 801eaf6:	d9f3      	bls.n	801eae0 <dhcp_discover+0x78>
 801eaf8:	4b1e      	ldr	r3, [pc, #120]	; (801eb74 <dhcp_discover+0x10c>)
 801eafa:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801eafe:	481e      	ldr	r0, [pc, #120]	; (801eb78 <dhcp_discover+0x110>)
 801eb00:	f004 faf0 	bl	80230e4 <iprintf>
 801eb04:	491a      	ldr	r1, [pc, #104]	; (801eb70 <dhcp_discover+0x108>)
 801eb06:	e7eb      	b.n	801eae0 <dhcp_discover+0x78>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801eb08:	9803      	ldr	r0, [sp, #12]
 801eb0a:	4649      	mov	r1, r9
 801eb0c:	463a      	mov	r2, r7
 801eb0e:	3004      	adds	r0, #4
 801eb10:	b280      	uxth	r0, r0
 801eb12:	f7ff fe17 	bl	801e744 <dhcp_option_trailer>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801eb16:	4a19      	ldr	r2, [pc, #100]	; (801eb7c <dhcp_discover+0x114>)
 801eb18:	4819      	ldr	r0, [pc, #100]	; (801eb80 <dhcp_discover+0x118>)
 801eb1a:	2343      	movs	r3, #67	; 0x43
 801eb1c:	f8cd 8000 	str.w	r8, [sp]
 801eb20:	4639      	mov	r1, r7
 801eb22:	6800      	ldr	r0, [r0, #0]
 801eb24:	9201      	str	r2, [sp, #4]
 801eb26:	4a17      	ldr	r2, [pc, #92]	; (801eb84 <dhcp_discover+0x11c>)
 801eb28:	f7ff fae6 	bl	801e0f8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801eb2c:	4638      	mov	r0, r7
 801eb2e:	f7fa f9c1 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801eb32:	79ab      	ldrb	r3, [r5, #6]
 801eb34:	2bff      	cmp	r3, #255	; 0xff
 801eb36:	d013      	beq.n	801eb60 <dhcp_discover+0xf8>
    dhcp->tries++;
 801eb38:	3301      	adds	r3, #1
 801eb3a:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801eb3c:	2a05      	cmp	r2, #5
    dhcp->tries++;
 801eb3e:	71aa      	strb	r2, [r5, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801eb40:	d80e      	bhi.n	801eb60 <dhcp_discover+0xf8>
 801eb42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801eb46:	4910      	ldr	r1, [pc, #64]	; (801eb88 <dhcp_discover+0x120>)
}
 801eb48:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 801eb4a:	4093      	lsls	r3, r2
 801eb4c:	b29b      	uxth	r3, r3
 801eb4e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801eb52:	fba1 2303 	umull	r2, r3, r1, r3
 801eb56:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801eb58:	812b      	strh	r3, [r5, #8]
}
 801eb5a:	b007      	add	sp, #28
 801eb5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options[options_out_len++] = value;
 801eb60:	2378      	movs	r3, #120	; 0x78
}
 801eb62:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801eb64:	812b      	strh	r3, [r5, #8]
}
 801eb66:	b007      	add	sp, #28
 801eb68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb6c:	0804254d 	.word	0x0804254d
 801eb70:	08042348 	.word	0x08042348
 801eb74:	080421d4 	.word	0x080421d4
 801eb78:	08029ba0 	.word	0x08029ba0
 801eb7c:	08042888 	.word	0x08042888
 801eb80:	2001aa7c 	.word	0x2001aa7c
 801eb84:	0804288c 	.word	0x0804288c
 801eb88:	10624dd3 	.word	0x10624dd3

0801eb8c <dhcp_check>:
{
 801eb8c:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801eb8e:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801eb90:	7963      	ldrb	r3, [r4, #5]
 801eb92:	2b08      	cmp	r3, #8
 801eb94:	d004      	beq.n	801eba0 <dhcp_check+0x14>
    dhcp->tries = 0;
 801eb96:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801eb98:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801eb9a:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801eb9c:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801eb9e:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801eba0:	2200      	movs	r2, #0
 801eba2:	f104 011c 	add.w	r1, r4, #28
 801eba6:	f001 fadb 	bl	8020160 <etharp_query>
  if (dhcp->tries < 255) {
 801ebaa:	79a3      	ldrb	r3, [r4, #6]
 801ebac:	2bff      	cmp	r3, #255	; 0xff
 801ebae:	d001      	beq.n	801ebb4 <dhcp_check+0x28>
    dhcp->tries++;
 801ebb0:	3301      	adds	r3, #1
 801ebb2:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ebb4:	2301      	movs	r3, #1
 801ebb6:	8123      	strh	r3, [r4, #8]
}
 801ebb8:	bd10      	pop	{r4, pc}
 801ebba:	bf00      	nop

0801ebbc <dhcp_bind>:
{
 801ebbc:	b510      	push	{r4, lr}
 801ebbe:	b082      	sub	sp, #8
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801ebc0:	2800      	cmp	r0, #0
 801ebc2:	f000 8085 	beq.w	801ecd0 <dhcp_bind+0x114>
  dhcp = netif_dhcp_data(netif);
 801ebc6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801ebc8:	2900      	cmp	r1, #0
 801ebca:	f000 8089 	beq.w	801ece0 <dhcp_bind+0x124>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ebce:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801ebd0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ebd2:	1c5c      	adds	r4, r3, #1
  dhcp->lease_used = 0;
 801ebd4:	824a      	strh	r2, [r1, #18]
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ebd6:	d00d      	beq.n	801ebf4 <dhcp_bind+0x38>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ebd8:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801ebda:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801ebde:	d254      	bcs.n	801ec8a <dhcp_bind+0xce>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ebe0:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801ebe4:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ebe6:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 801ebea:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 801ebee:	d87f      	bhi.n	801ecf0 <dhcp_bind+0x134>
      dhcp->t0_timeout = 1;
 801ebf0:	2301      	movs	r3, #1
 801ebf2:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801ebf4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801ebf6:	1c5a      	adds	r2, r3, #1
 801ebf8:	d04d      	beq.n	801ec96 <dhcp_bind+0xda>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ebfa:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801ebfc:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801ec00:	d23f      	bcs.n	801ec82 <dhcp_bind+0xc6>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ec02:	4a3c      	ldr	r2, [pc, #240]	; (801ecf4 <dhcp_bind+0x138>)
    if (dhcp->t1_timeout == 0) {
 801ec04:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ec06:	fba2 4203 	umull	r4, r2, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 801ec0a:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t1_timeout == 0) {
 801ec0e:	d83a      	bhi.n	801ec86 <dhcp_bind+0xca>
      dhcp->t1_timeout = 1;
 801ec10:	2301      	movs	r3, #1
 801ec12:	461a      	mov	r2, r3
 801ec14:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ec16:	6b0c      	ldr	r4, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 801ec18:	81ca      	strh	r2, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ec1a:	1c63      	adds	r3, r4, #1
 801ec1c:	d03f      	beq.n	801ec9e <dhcp_bind+0xe2>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ec1e:	341e      	adds	r4, #30
    if (timeout > 0xffff) {
 801ec20:	f5b4 1f70 	cmp.w	r4, #3932160	; 0x3c0000
 801ec24:	d248      	bcs.n	801ecb8 <dhcp_bind+0xfc>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ec26:	4b33      	ldr	r3, [pc, #204]	; (801ecf4 <dhcp_bind+0x138>)
    if (dhcp->t2_timeout == 0) {
 801ec28:	2c3b      	cmp	r4, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ec2a:	fba3 c304 	umull	ip, r3, r3, r4
    dhcp->t2_timeout = (u16_t)timeout;
 801ec2e:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 801ec32:	d843      	bhi.n	801ecbc <dhcp_bind+0x100>
      dhcp->t2_timeout = 1;
 801ec34:	2401      	movs	r4, #1
 801ec36:	4623      	mov	r3, r4
 801ec38:	818c      	strh	r4, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801ec3a:	2401      	movs	r4, #1
 801ec3c:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801ec3e:	4293      	cmp	r3, r2
 801ec40:	d802      	bhi.n	801ec48 <dhcp_bind+0x8c>
 801ec42:	b10c      	cbz	r4, 801ec48 <dhcp_bind+0x8c>
    dhcp->t1_timeout = 0;
 801ec44:	2300      	movs	r3, #0
 801ec46:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 801ec48:	79cb      	ldrb	r3, [r1, #7]
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	d02c      	beq.n	801eca8 <dhcp_bind+0xec>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801ec4e:	6a0b      	ldr	r3, [r1, #32]
 801ec50:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801ec52:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 801ec54:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 801ec56:	b92b      	cbnz	r3, 801ec64 <dhcp_bind+0xa8>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801ec58:	69cb      	ldr	r3, [r1, #28]
 801ec5a:	9a00      	ldr	r2, [sp, #0]
 801ec5c:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801ec5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801ec62:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 801ec64:	794b      	ldrb	r3, [r1, #5]
 801ec66:	2b0a      	cmp	r3, #10
 801ec68:	d004      	beq.n	801ec74 <dhcp_bind+0xb8>
    dhcp->tries = 0;
 801ec6a:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801ec6c:	220a      	movs	r2, #10
    dhcp->tries = 0;
 801ec6e:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 801ec70:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 801ec72:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801ec74:	311c      	adds	r1, #28
 801ec76:	ab01      	add	r3, sp, #4
 801ec78:	466a      	mov	r2, sp
 801ec7a:	f7f9 fed1 	bl	8018a20 <netif_set_addr>
}
 801ec7e:	b002      	add	sp, #8
 801ec80:	bd10      	pop	{r4, pc}
    dhcp->t1_timeout = (u16_t)timeout;
 801ec82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ec86:	814a      	strh	r2, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 801ec88:	e7c5      	b.n	801ec16 <dhcp_bind+0x5a>
    dhcp->t0_timeout = (u16_t)timeout;
 801ec8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ec8e:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 801ec90:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 801ec92:	1c5a      	adds	r2, r3, #1
 801ec94:	d1b1      	bne.n	801ebfa <dhcp_bind+0x3e>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801ec96:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 801ec98:	894a      	ldrh	r2, [r1, #10]
 801ec9a:	1c63      	adds	r3, r4, #1
 801ec9c:	d1bf      	bne.n	801ec1e <dhcp_bind+0x62>
 801ec9e:	898b      	ldrh	r3, [r1, #12]
 801eca0:	1e1c      	subs	r4, r3, #0
 801eca2:	bf18      	it	ne
 801eca4:	2401      	movne	r4, #1
 801eca6:	e7ca      	b.n	801ec3e <dhcp_bind+0x82>
    if (first_octet <= 127) {
 801eca8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 801ecac:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 801ecae:	2b00      	cmp	r3, #0
 801ecb0:	db06      	blt.n	801ecc0 <dhcp_bind+0x104>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 801ecb2:	23ff      	movs	r3, #255	; 0xff
 801ecb4:	9300      	str	r3, [sp, #0]
 801ecb6:	e7cc      	b.n	801ec52 <dhcp_bind+0x96>
    dhcp->t2_timeout = (u16_t)timeout;
 801ecb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ecbc:	818b      	strh	r3, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 801ecbe:	e7bc      	b.n	801ec3a <dhcp_bind+0x7e>
    } else if (first_octet >= 192) {
 801ecc0:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801ecc2:	bf8c      	ite	hi
 801ecc4:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801ecc8:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 801eccc:	9300      	str	r3, [sp, #0]
 801ecce:	e7c0      	b.n	801ec52 <dhcp_bind+0x96>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801ecd0:	4b09      	ldr	r3, [pc, #36]	; (801ecf8 <dhcp_bind+0x13c>)
 801ecd2:	f240 4215 	movw	r2, #1045	; 0x415
 801ecd6:	4909      	ldr	r1, [pc, #36]	; (801ecfc <dhcp_bind+0x140>)
 801ecd8:	4809      	ldr	r0, [pc, #36]	; (801ed00 <dhcp_bind+0x144>)
 801ecda:	f004 fa03 	bl	80230e4 <iprintf>
 801ecde:	e7ce      	b.n	801ec7e <dhcp_bind+0xc2>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801ece0:	4b05      	ldr	r3, [pc, #20]	; (801ecf8 <dhcp_bind+0x13c>)
 801ece2:	f240 4217 	movw	r2, #1047	; 0x417
 801ece6:	4907      	ldr	r1, [pc, #28]	; (801ed04 <dhcp_bind+0x148>)
 801ece8:	4805      	ldr	r0, [pc, #20]	; (801ed00 <dhcp_bind+0x144>)
 801ecea:	f004 f9fb 	bl	80230e4 <iprintf>
 801ecee:	e7c6      	b.n	801ec7e <dhcp_bind+0xc2>
    dhcp->t0_timeout = (u16_t)timeout;
 801ecf0:	828a      	strh	r2, [r1, #20]
 801ecf2:	e77f      	b.n	801ebf4 <dhcp_bind+0x38>
 801ecf4:	88888889 	.word	0x88888889
 801ecf8:	080421d4 	.word	0x080421d4
 801ecfc:	080423b8 	.word	0x080423b8
 801ed00:	08029ba0 	.word	0x08029ba0
 801ed04:	080423d4 	.word	0x080423d4

0801ed08 <dhcp_inc_pcb_refcount>:
{
 801ed08:	b570      	push	{r4, r5, r6, lr}
  if (dhcp_pcb_refcount == 0) {
 801ed0a:	4c15      	ldr	r4, [pc, #84]	; (801ed60 <dhcp_inc_pcb_refcount+0x58>)
 801ed0c:	7823      	ldrb	r3, [r4, #0]
 801ed0e:	b9fb      	cbnz	r3, 801ed50 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801ed10:	4d14      	ldr	r5, [pc, #80]	; (801ed64 <dhcp_inc_pcb_refcount+0x5c>)
 801ed12:	682b      	ldr	r3, [r5, #0]
 801ed14:	b12b      	cbz	r3, 801ed22 <dhcp_inc_pcb_refcount+0x1a>
 801ed16:	4b14      	ldr	r3, [pc, #80]	; (801ed68 <dhcp_inc_pcb_refcount+0x60>)
 801ed18:	22e5      	movs	r2, #229	; 0xe5
 801ed1a:	4914      	ldr	r1, [pc, #80]	; (801ed6c <dhcp_inc_pcb_refcount+0x64>)
 801ed1c:	4814      	ldr	r0, [pc, #80]	; (801ed70 <dhcp_inc_pcb_refcount+0x68>)
 801ed1e:	f004 f9e1 	bl	80230e4 <iprintf>
    dhcp_pcb = udp_new();
 801ed22:	f7ff fbc9 	bl	801e4b8 <udp_new>
 801ed26:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 801ed28:	b1b0      	cbz	r0, 801ed58 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801ed2a:	7a46      	ldrb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801ed2c:	2244      	movs	r2, #68	; 0x44
 801ed2e:	4911      	ldr	r1, [pc, #68]	; (801ed74 <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801ed30:	f046 0620 	orr.w	r6, r6, #32
 801ed34:	7246      	strb	r6, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801ed36:	f7ff f95f 	bl	801dff8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801ed3a:	2243      	movs	r2, #67	; 0x43
 801ed3c:	490d      	ldr	r1, [pc, #52]	; (801ed74 <dhcp_inc_pcb_refcount+0x6c>)
 801ed3e:	6828      	ldr	r0, [r5, #0]
 801ed40:	f7ff fb3c 	bl	801e3bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801ed44:	6828      	ldr	r0, [r5, #0]
 801ed46:	2200      	movs	r2, #0
 801ed48:	490b      	ldr	r1, [pc, #44]	; (801ed78 <dhcp_inc_pcb_refcount+0x70>)
 801ed4a:	f7ff fb7d 	bl	801e448 <udp_recv>
 801ed4e:	7823      	ldrb	r3, [r4, #0]
  dhcp_pcb_refcount++;
 801ed50:	3301      	adds	r3, #1
  return ERR_OK;
 801ed52:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 801ed54:	7023      	strb	r3, [r4, #0]
}
 801ed56:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_MEM;
 801ed58:	f04f 30ff 	mov.w	r0, #4294967295
}
 801ed5c:	bd70      	pop	{r4, r5, r6, pc}
 801ed5e:	bf00      	nop
 801ed60:	2001aa80 	.word	0x2001aa80
 801ed64:	2001aa7c 	.word	0x2001aa7c
 801ed68:	080421d4 	.word	0x080421d4
 801ed6c:	080423ec 	.word	0x080423ec
 801ed70:	08029ba0 	.word	0x08029ba0
 801ed74:	08042888 	.word	0x08042888
 801ed78:	0801ee75 	.word	0x0801ee75

0801ed7c <dhcp_dec_pcb_refcount>:
{
 801ed7c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801ed7e:	4d0b      	ldr	r5, [pc, #44]	; (801edac <dhcp_dec_pcb_refcount+0x30>)
 801ed80:	782c      	ldrb	r4, [r5, #0]
 801ed82:	b154      	cbz	r4, 801ed9a <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 801ed84:	3c01      	subs	r4, #1
 801ed86:	b2e4      	uxtb	r4, r4
 801ed88:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 801ed8a:	b104      	cbz	r4, 801ed8e <dhcp_dec_pcb_refcount+0x12>
}
 801ed8c:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 801ed8e:	4d08      	ldr	r5, [pc, #32]	; (801edb0 <dhcp_dec_pcb_refcount+0x34>)
 801ed90:	6828      	ldr	r0, [r5, #0]
 801ed92:	f7ff fb6b 	bl	801e46c <udp_remove>
    dhcp_pcb = NULL;
 801ed96:	602c      	str	r4, [r5, #0]
}
 801ed98:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801ed9a:	4b06      	ldr	r3, [pc, #24]	; (801edb4 <dhcp_dec_pcb_refcount+0x38>)
 801ed9c:	22ff      	movs	r2, #255	; 0xff
 801ed9e:	4906      	ldr	r1, [pc, #24]	; (801edb8 <dhcp_dec_pcb_refcount+0x3c>)
 801eda0:	4806      	ldr	r0, [pc, #24]	; (801edbc <dhcp_dec_pcb_refcount+0x40>)
 801eda2:	f004 f99f 	bl	80230e4 <iprintf>
 801eda6:	782c      	ldrb	r4, [r5, #0]
 801eda8:	e7ec      	b.n	801ed84 <dhcp_dec_pcb_refcount+0x8>
 801edaa:	bf00      	nop
 801edac:	2001aa80 	.word	0x2001aa80
 801edb0:	2001aa7c 	.word	0x2001aa7c
 801edb4:	080421d4 	.word	0x080421d4
 801edb8:	08042414 	.word	0x08042414
 801edbc:	08029ba0 	.word	0x08029ba0

0801edc0 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801edc0:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801edc2:	4d2a      	ldr	r5, [pc, #168]	; (801ee6c <dhcp_handle_ack.isra.0+0xac>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801edc4:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 801edc6:	b083      	sub	sp, #12
 801edc8:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801edca:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801edcc:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801edd0:	b112      	cbz	r2, 801edd8 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 801edd2:	4b27      	ldr	r3, [pc, #156]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801edd4:	68db      	ldr	r3, [r3, #12]
 801edd6:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801edd8:	792b      	ldrb	r3, [r5, #4]
 801edda:	2b00      	cmp	r3, #0
 801eddc:	d042      	beq.n	801ee64 <dhcp_handle_ack.isra.0+0xa4>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 801edde:	4b24      	ldr	r3, [pc, #144]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801ede0:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801ede2:	796a      	ldrb	r2, [r5, #5]
 801ede4:	62e3      	str	r3, [r4, #44]	; 0x2c
 801ede6:	b31a      	cbz	r2, 801ee30 <dhcp_handle_ack.isra.0+0x70>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 801ede8:	4b21      	ldr	r3, [pc, #132]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801edea:	695b      	ldr	r3, [r3, #20]
 801edec:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801edee:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801edf0:	690a      	ldr	r2, [r1, #16]
 801edf2:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801edf4:	bb33      	cbnz	r3, 801ee44 <dhcp_handle_ack.isra.0+0x84>
    dhcp->subnet_mask_given = 0;
 801edf6:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801edf8:	79eb      	ldrb	r3, [r5, #7]
 801edfa:	2b00      	cmp	r3, #0
 801edfc:	d12c      	bne.n	801ee58 <dhcp_handle_ack.isra.0+0x98>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801edfe:	7a2b      	ldrb	r3, [r5, #8]
 801ee00:	b1a3      	cbz	r3, 801ee2c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801ee02:	4c1b      	ldr	r4, [pc, #108]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801ee04:	6a20      	ldr	r0, [r4, #32]
 801ee06:	f7f8 fa05 	bl	8017214 <lwip_htonl>
 801ee0a:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801ee0c:	a901      	add	r1, sp, #4
 801ee0e:	2000      	movs	r0, #0
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801ee10:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801ee12:	f7f8 fdb7 	bl	8017984 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 801ee16:	7a6b      	ldrb	r3, [r5, #9]
 801ee18:	b143      	cbz	r3, 801ee2c <dhcp_handle_ack.isra.0+0x6c>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801ee1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801ee1c:	f7f8 f9fa 	bl	8017214 <lwip_htonl>
 801ee20:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 801ee22:	a901      	add	r1, sp, #4
 801ee24:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801ee26:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 801ee28:	f7f8 fdac 	bl	8017984 <dns_setserver>
}
 801ee2c:	b003      	add	sp, #12
 801ee2e:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801ee30:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ee32:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 801ee36:	08db      	lsrs	r3, r3, #3
 801ee38:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801ee3a:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801ee3c:	690a      	ldr	r2, [r1, #16]
 801ee3e:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 801ee40:	2b00      	cmp	r3, #0
 801ee42:	d0d8      	beq.n	801edf6 <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801ee44:	4b0a      	ldr	r3, [pc, #40]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801ee46:	6998      	ldr	r0, [r3, #24]
 801ee48:	f7f8 f9e4 	bl	8017214 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 801ee4c:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801ee4e:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 801ee50:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 801ee52:	79eb      	ldrb	r3, [r5, #7]
 801ee54:	2b00      	cmp	r3, #0
 801ee56:	d0d2      	beq.n	801edfe <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 801ee58:	4b05      	ldr	r3, [pc, #20]	; (801ee70 <dhcp_handle_ack.isra.0+0xb0>)
 801ee5a:	69d8      	ldr	r0, [r3, #28]
 801ee5c:	f7f8 f9da 	bl	8017214 <lwip_htonl>
 801ee60:	6260      	str	r0, [r4, #36]	; 0x24
 801ee62:	e7cc      	b.n	801edfe <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801ee64:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801ee66:	085b      	lsrs	r3, r3, #1
 801ee68:	e7bb      	b.n	801ede2 <dhcp_handle_ack.isra.0+0x22>
 801ee6a:	bf00      	nop
 801ee6c:	2002e4b4 	.word	0x2002e4b4
 801ee70:	2002e4c0 	.word	0x2002e4c0

0801ee74 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 801ee74:	4bb0      	ldr	r3, [pc, #704]	; (801f138 <dhcp_recv+0x2c4>)
{
 801ee76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 801ee7a:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 801ee7e:	b08b      	sub	sp, #44	; 0x2c
 801ee80:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ee82:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801ee86:	f1b9 0f00 	cmp.w	r9, #0
 801ee8a:	d047      	beq.n	801ef1c <dhcp_recv+0xa8>
 801ee8c:	f899 3004 	ldrb.w	r3, [r9, #4]
 801ee90:	2b00      	cmp	r3, #0
 801ee92:	d043      	beq.n	801ef1c <dhcp_recv+0xa8>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 801ee94:	8953      	ldrh	r3, [r2, #10]
 801ee96:	2b2b      	cmp	r3, #43	; 0x2b
 801ee98:	d940      	bls.n	801ef1c <dhcp_recv+0xa8>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801ee9a:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 801ee9c:	782b      	ldrb	r3, [r5, #0]
 801ee9e:	2b02      	cmp	r3, #2
 801eea0:	d13c      	bne.n	801ef1c <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eea2:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 801eea6:	b186      	cbz	r6, 801eeca <dhcp_recv+0x56>
 801eea8:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 801eeac:	f105 021c 	add.w	r2, r5, #28
 801eeb0:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801eeb2:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eeb6:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801eeb8:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eebc:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801eebe:	4284      	cmp	r4, r0
 801eec0:	d12c      	bne.n	801ef1c <dhcp_recv+0xa8>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801eec2:	2b06      	cmp	r3, #6
 801eec4:	d001      	beq.n	801eeca <dhcp_recv+0x56>
 801eec6:	42b3      	cmp	r3, r6
 801eec8:	d3f3      	bcc.n	801eeb2 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801eeca:	6868      	ldr	r0, [r5, #4]
 801eecc:	f7f8 f9a2 	bl	8017214 <lwip_htonl>
 801eed0:	f8d9 3000 	ldr.w	r3, [r9]
 801eed4:	4298      	cmp	r0, r3
 801eed6:	d121      	bne.n	801ef1c <dhcp_recv+0xa8>
  dhcp_clear_all_options(dhcp);
 801eed8:	2200      	movs	r2, #0
 801eeda:	4998      	ldr	r1, [pc, #608]	; (801f13c <dhcp_recv+0x2c8>)
 801eedc:	604a      	str	r2, [r1, #4]
 801eede:	810a      	strh	r2, [r1, #8]
  if (p->len < DHCP_SNAME_OFS) {
 801eee0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
  dhcp_clear_all_options(dhcp);
 801eee4:	600a      	str	r2, [r1, #0]
  if (p->len < DHCP_SNAME_OFS) {
 801eee6:	2b2b      	cmp	r3, #43	; 0x2b
 801eee8:	d918      	bls.n	801ef1c <dhcp_recv+0xa8>
  int parse_sname_as_options = 0;
 801eeea:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 801eeec:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 801eef0:	9202      	str	r2, [sp, #8]
  options_idx = DHCP_OPTIONS_OFS;
 801eef2:	22f0      	movs	r2, #240	; 0xf0
 801eef4:	e9cd a906 	strd	sl, r9, [sp, #24]
 801eef8:	9203      	str	r2, [sp, #12]
 801eefa:	465d      	mov	r5, fp
 801eefc:	e9dd 2a02 	ldrd	r2, sl, [sp, #8]
 801ef00:	e000      	b.n	801ef04 <dhcp_recv+0x90>
 801ef02:	896b      	ldrh	r3, [r5, #10]
  while ((q != NULL) && (options_idx >= q->len)) {
 801ef04:	459a      	cmp	sl, r3
    options_idx = (u16_t)(options_idx - q->len);
 801ef06:	ebaa 0103 	sub.w	r1, sl, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ef0a:	eba2 0303 	sub.w	r3, r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801ef0e:	d30b      	bcc.n	801ef28 <dhcp_recv+0xb4>
    q = q->next;
 801ef10:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 801ef12:	fa1f fa81 	uxth.w	sl, r1
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801ef16:	b29a      	uxth	r2, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 801ef18:	2d00      	cmp	r5, #0
 801ef1a:	d1f2      	bne.n	801ef02 <dhcp_recv+0x8e>
  pbuf_free(p);
 801ef1c:	4658      	mov	r0, fp
 801ef1e:	f7f9 ffc9 	bl	8018eb4 <pbuf_free>
}
 801ef22:	b00b      	add	sp, #44	; 0x2c
 801ef24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  options = (u8_t *)q->payload;
 801ef28:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ef2a:	4592      	cmp	sl, r2
 801ef2c:	e9cd 2a02 	strd	r2, sl, [sp, #8]
  options = (u8_t *)q->payload;
 801ef30:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801ef32:	f080 81ff 	bcs.w	801f334 <dhcp_recv+0x4c0>
 801ef36:	9e03      	ldr	r6, [sp, #12]
 801ef38:	9b01      	ldr	r3, [sp, #4]
 801ef3a:	5d9b      	ldrb	r3, [r3, r6]
 801ef3c:	2bff      	cmp	r3, #255	; 0xff
 801ef3e:	f000 81f9 	beq.w	801f334 <dhcp_recv+0x4c0>
    u16_t val_offset = (u16_t)(offset + 2);
 801ef42:	1cb7      	adds	r7, r6, #2
 801ef44:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 801ef46:	42b7      	cmp	r7, r6
 801ef48:	d3e8      	bcc.n	801ef1c <dhcp_recv+0xa8>
    if ((offset + 1) < q->len) {
 801ef4a:	1c71      	adds	r1, r6, #1
 801ef4c:	896a      	ldrh	r2, [r5, #10]
 801ef4e:	4291      	cmp	r1, r2
 801ef50:	f280 8128 	bge.w	801f1a4 <dhcp_recv+0x330>
      len = options[offset + 1];
 801ef54:	9801      	ldr	r0, [sp, #4]
 801ef56:	4430      	add	r0, r6
 801ef58:	7844      	ldrb	r4, [r0, #1]
    switch (op) {
 801ef5a:	2b3b      	cmp	r3, #59	; 0x3b
 801ef5c:	d83e      	bhi.n	801efdc <dhcp_recv+0x168>
 801ef5e:	e8df f013 	tbh	[pc, r3, lsl #1]
 801ef62:	0040      	.short	0x0040
 801ef64:	003d0066 	.word	0x003d0066
 801ef68:	003d0112 	.word	0x003d0112
 801ef6c:	0053003d 	.word	0x0053003d
 801ef70:	003d003d 	.word	0x003d003d
 801ef74:	003d003d 	.word	0x003d003d
 801ef78:	003d003d 	.word	0x003d003d
 801ef7c:	003d003d 	.word	0x003d003d
 801ef80:	003d003d 	.word	0x003d003d
 801ef84:	003d003d 	.word	0x003d003d
 801ef88:	003d003d 	.word	0x003d003d
 801ef8c:	003d003d 	.word	0x003d003d
 801ef90:	003d003d 	.word	0x003d003d
 801ef94:	003d003d 	.word	0x003d003d
 801ef98:	003d003d 	.word	0x003d003d
 801ef9c:	003d003d 	.word	0x003d003d
 801efa0:	003d003d 	.word	0x003d003d
 801efa4:	003d003d 	.word	0x003d003d
 801efa8:	003d003d 	.word	0x003d003d
 801efac:	003d003d 	.word	0x003d003d
 801efb0:	003d003d 	.word	0x003d003d
 801efb4:	003d003d 	.word	0x003d003d
 801efb8:	003d003d 	.word	0x003d003d
 801efbc:	003d003d 	.word	0x003d003d
 801efc0:	003d003d 	.word	0x003d003d
 801efc4:	003d003d 	.word	0x003d003d
 801efc8:	00cc0105 	.word	0x00cc0105
 801efcc:	00b300c0 	.word	0x00b300c0
 801efd0:	003d003d 	.word	0x003d003d
 801efd4:	00f9003d 	.word	0x00f9003d
 801efd8:	00dd      	.short	0x00dd
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801efda:	2400      	movs	r4, #0
    if (op == DHCP_OPTION_PAD) {
 801efdc:	2b00      	cmp	r3, #0
 801efde:	f040 827c 	bne.w	801f4da <dhcp_recv+0x666>
      offset++;
 801efe2:	b28e      	uxth	r6, r1
    if (offset >= q->len) {
 801efe4:	4296      	cmp	r6, r2
 801efe6:	f0c0 81a1 	bcc.w	801f32c <dhcp_recv+0x4b8>
      offset_max = (u16_t)(offset_max - q->len);
 801efea:	9b02      	ldr	r3, [sp, #8]
      offset = (u16_t)(offset - q->len);
 801efec:	1ab6      	subs	r6, r6, r2
      offset_max = (u16_t)(offset_max - q->len);
 801efee:	1a9a      	subs	r2, r3, r2
      offset = (u16_t)(offset - q->len);
 801eff0:	b2b6      	uxth	r6, r6
      offset_max = (u16_t)(offset_max - q->len);
 801eff2:	b293      	uxth	r3, r2
      if (offset < offset_max) {
 801eff4:	429e      	cmp	r6, r3
      offset_max = (u16_t)(offset_max - q->len);
 801eff6:	9302      	str	r3, [sp, #8]
      if (offset < offset_max) {
 801eff8:	d290      	bcs.n	801ef1c <dhcp_recv+0xa8>
        q = q->next;
 801effa:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801effc:	2d00      	cmp	r5, #0
 801effe:	f000 81cd 	beq.w	801f39c <dhcp_recv+0x528>
        options = (u8_t *)q->payload;
 801f002:	686b      	ldr	r3, [r5, #4]
 801f004:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801f006:	e797      	b.n	801ef38 <dhcp_recv+0xc4>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801f008:	07a3      	lsls	r3, r4, #30
 801f00a:	f040 81da 	bne.w	801f3c2 <dhcp_recv+0x54e>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801f00e:	2c08      	cmp	r4, #8
 801f010:	4623      	mov	r3, r4
 801f012:	bf28      	it	cs
 801f014:	2308      	movcs	r3, #8
 801f016:	b2db      	uxtb	r3, r3
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801f018:	429c      	cmp	r4, r3
 801f01a:	f080 824f 	bcs.w	801f4bc <dhcp_recv+0x648>
 801f01e:	4b48      	ldr	r3, [pc, #288]	; (801f140 <dhcp_recv+0x2cc>)
 801f020:	f240 623c 	movw	r2, #1596	; 0x63c
 801f024:	4947      	ldr	r1, [pc, #284]	; (801f144 <dhcp_recv+0x2d0>)
 801f026:	4848      	ldr	r0, [pc, #288]	; (801f148 <dhcp_recv+0x2d4>)
 801f028:	f004 f85c 	bl	80230e4 <iprintf>
 801f02c:	e776      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f02e:	2c04      	cmp	r4, #4
 801f030:	f040 8174 	bne.w	801f31c <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 801f034:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801f038:	429e      	cmp	r6, r3
 801f03a:	f73f af6f 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f03e:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801f040:	f04f 0906 	mov.w	r9, #6
      offset = (u16_t)(offset + len + 2);
 801f044:	b2b6      	uxth	r6, r6
        u32_t value = 0;
 801f046:	2300      	movs	r3, #0
 801f048:	4a3c      	ldr	r2, [pc, #240]	; (801f13c <dhcp_recv+0x2c8>)
 801f04a:	9605      	str	r6, [sp, #20]
 801f04c:	eb02 0a09 	add.w	sl, r2, r9
 801f050:	9309      	str	r3, [sp, #36]	; 0x24
 801f052:	e02e      	b.n	801f0b2 <dhcp_recv+0x23e>
          copy_len = LWIP_MIN(decode_len, 4);
 801f054:	2c04      	cmp	r4, #4
 801f056:	46a0      	mov	r8, r4
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801f058:	f89a 6000 	ldrb.w	r6, [sl]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801f05c:	463b      	mov	r3, r7
          copy_len = LWIP_MIN(decode_len, 4);
 801f05e:	bf28      	it	cs
 801f060:	f04f 0804 	movcs.w	r8, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801f064:	a909      	add	r1, sp, #36	; 0x24
 801f066:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 801f068:	fa5f f888 	uxtb.w	r8, r8
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801f06c:	4642      	mov	r2, r8
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801f06e:	2e00      	cmp	r6, #0
 801f070:	f040 817a 	bne.w	801f368 <dhcp_recv+0x4f4>
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801f074:	f7fa f9b6 	bl	80193e4 <pbuf_copy_partial>
 801f078:	4580      	cmp	r8, r0
            dhcp_got_option(dhcp, decode_idx);
 801f07a:	f04f 0301 	mov.w	r3, #1
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801f07e:	f47f af4d 	bne.w	801ef1c <dhcp_recv+0xa8>
          if (decode_len > 4) {
 801f082:	2c04      	cmp	r4, #4
 801f084:	f240 8173 	bls.w	801f36e <dhcp_recv+0x4fa>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801f088:	07a6      	lsls	r6, r4, #30
 801f08a:	f040 817f 	bne.w	801f38c <dhcp_recv+0x518>
            dhcp_got_option(dhcp, decode_idx);
 801f08e:	f80a 3b01 	strb.w	r3, [sl], #1
            decode_len = (u8_t)(decode_len - 4);
 801f092:	3c04      	subs	r4, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801f094:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f096:	f7f8 f8bd 	bl	8017214 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 801f09a:	1d3b      	adds	r3, r7, #4
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801f09c:	4a2b      	ldr	r2, [pc, #172]	; (801f14c <dhcp_recv+0x2d8>)
            decode_len = (u8_t)(decode_len - 4);
 801f09e:	b2e4      	uxtb	r4, r4
            next_val_offset = (u16_t)(val_offset + 4);
 801f0a0:	b29b      	uxth	r3, r3
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801f0a2:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
            decode_idx++;
 801f0a6:	f109 0901 	add.w	r9, r9, #1
            if (next_val_offset < val_offset) {
 801f0aa:	429f      	cmp	r7, r3
            goto decode_next;
 801f0ac:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 801f0ae:	f63f af35 	bhi.w	801ef1c <dhcp_recv+0xa8>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801f0b2:	f1b9 0f09 	cmp.w	r9, #9
 801f0b6:	d9cd      	bls.n	801f054 <dhcp_recv+0x1e0>
 801f0b8:	4b21      	ldr	r3, [pc, #132]	; (801f140 <dhcp_recv+0x2cc>)
 801f0ba:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801f0be:	4924      	ldr	r1, [pc, #144]	; (801f150 <dhcp_recv+0x2dc>)
 801f0c0:	4821      	ldr	r0, [pc, #132]	; (801f148 <dhcp_recv+0x2d4>)
 801f0c2:	f004 f80f 	bl	80230e4 <iprintf>
 801f0c6:	e7c5      	b.n	801f054 <dhcp_recv+0x1e0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f0c8:	2c04      	cmp	r4, #4
 801f0ca:	f040 80ef 	bne.w	801f2ac <dhcp_recv+0x438>
      if (offset + len + 2 > 0xFFFF) {
 801f0ce:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801f0d2:	429e      	cmp	r6, r3
 801f0d4:	f73f af22 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f0d8:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801f0da:	f04f 0902 	mov.w	r9, #2
      offset = (u16_t)(offset + len + 2);
 801f0de:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f0e0:	e7b1      	b.n	801f046 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801f0e2:	2c01      	cmp	r4, #1
 801f0e4:	f040 80f2 	bne.w	801f2cc <dhcp_recv+0x458>
      if (offset + len + 2 > 0xFFFF) {
 801f0e8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801f0ec:	4299      	cmp	r1, r3
 801f0ee:	f43f af15 	beq.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f0f2:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801f0f4:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801f0f6:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f0f8:	e7a5      	b.n	801f046 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801f0fa:	2c01      	cmp	r4, #1
 801f0fc:	f040 80ee 	bne.w	801f2dc <dhcp_recv+0x468>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801f100:	9b03      	ldr	r3, [sp, #12]
 801f102:	2bf0      	cmp	r3, #240	; 0xf0
 801f104:	f040 8165 	bne.w	801f3d2 <dhcp_recv+0x55e>
      if (offset + len + 2 > 0xFFFF) {
 801f108:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801f10c:	4299      	cmp	r1, r3
 801f10e:	f43f af05 	beq.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f112:	3603      	adds	r6, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801f114:	f04f 0900 	mov.w	r9, #0
      offset = (u16_t)(offset + len + 2);
 801f118:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f11a:	e794      	b.n	801f046 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f11c:	2c04      	cmp	r4, #4
 801f11e:	f040 80e5 	bne.w	801f2ec <dhcp_recv+0x478>
      if (offset + len + 2 > 0xFFFF) {
 801f122:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801f126:	429e      	cmp	r6, r3
 801f128:	f73f aef8 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f12c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 801f12e:	f04f 0905 	mov.w	r9, #5
      offset = (u16_t)(offset + len + 2);
 801f132:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f134:	e787      	b.n	801f046 <dhcp_recv+0x1d2>
 801f136:	bf00      	nop
 801f138:	2001f464 	.word	0x2001f464
 801f13c:	2002e4b4 	.word	0x2002e4b4
 801f140:	080421d4 	.word	0x080421d4
 801f144:	08042444 	.word	0x08042444
 801f148:	08029ba0 	.word	0x08029ba0
 801f14c:	2002e4c0 	.word	0x2002e4c0
 801f150:	0804248c 	.word	0x0804248c
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f154:	2c04      	cmp	r4, #4
 801f156:	f040 80b1 	bne.w	801f2bc <dhcp_recv+0x448>
      if (offset + len + 2 > 0xFFFF) {
 801f15a:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801f15e:	429e      	cmp	r6, r3
 801f160:	f73f aedc 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f164:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 801f166:	46a1      	mov	r9, r4
      offset = (u16_t)(offset + len + 2);
 801f168:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f16a:	e76c      	b.n	801f046 <dhcp_recv+0x1d2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f16c:	2c04      	cmp	r4, #4
 801f16e:	f040 80c5 	bne.w	801f2fc <dhcp_recv+0x488>
      if (offset + len + 2 > 0xFFFF) {
 801f172:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 801f176:	429e      	cmp	r6, r3
 801f178:	f73f aed0 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f17c:	3606      	adds	r6, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801f17e:	f04f 0903 	mov.w	r9, #3
      offset = (u16_t)(offset + len + 2);
 801f182:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f184:	e75f      	b.n	801f046 <dhcp_recv+0x1d2>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801f186:	2c03      	cmp	r4, #3
 801f188:	f240 80c0 	bls.w	801f30c <dhcp_recv+0x498>
      if (offset + len + 2 > 0xFFFF) {
 801f18c:	4426      	add	r6, r4
 801f18e:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801f192:	429e      	cmp	r6, r3
 801f194:	f73f aec2 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f198:	193e      	adds	r6, r7, r4
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801f19a:	f04f 0907 	mov.w	r9, #7
        decode_len = 4; /* only copy the first given router */
 801f19e:	2404      	movs	r4, #4
      offset = (u16_t)(offset + len + 2);
 801f1a0:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f1a2:	e750      	b.n	801f046 <dhcp_recv+0x1d2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801f1a4:	6828      	ldr	r0, [r5, #0]
 801f1a6:	b110      	cbz	r0, 801f1ae <dhcp_recv+0x33a>
 801f1a8:	6840      	ldr	r0, [r0, #4]
 801f1aa:	7804      	ldrb	r4, [r0, #0]
 801f1ac:	e6d5      	b.n	801ef5a <dhcp_recv+0xe6>
    switch (op) {
 801f1ae:	2b3b      	cmp	r3, #59	; 0x3b
 801f1b0:	f63f af13 	bhi.w	801efda <dhcp_recv+0x166>
 801f1b4:	a001      	add	r0, pc, #4	; (adr r0, 801f1bc <dhcp_recv+0x348>)
 801f1b6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f1ba:	bf00      	nop
 801f1bc:	0801efe3 	.word	0x0801efe3
 801f1c0:	0801f31d 	.word	0x0801f31d
 801f1c4:	0801efdb 	.word	0x0801efdb
 801f1c8:	0801f30d 	.word	0x0801f30d
 801f1cc:	0801efdb 	.word	0x0801efdb
 801f1d0:	0801efdb 	.word	0x0801efdb
 801f1d4:	0801efdb 	.word	0x0801efdb
 801f1d8:	0801efdb 	.word	0x0801efdb
 801f1dc:	0801efdb 	.word	0x0801efdb
 801f1e0:	0801efdb 	.word	0x0801efdb
 801f1e4:	0801efdb 	.word	0x0801efdb
 801f1e8:	0801efdb 	.word	0x0801efdb
 801f1ec:	0801efdb 	.word	0x0801efdb
 801f1f0:	0801efdb 	.word	0x0801efdb
 801f1f4:	0801efdb 	.word	0x0801efdb
 801f1f8:	0801efdb 	.word	0x0801efdb
 801f1fc:	0801efdb 	.word	0x0801efdb
 801f200:	0801efdb 	.word	0x0801efdb
 801f204:	0801efdb 	.word	0x0801efdb
 801f208:	0801efdb 	.word	0x0801efdb
 801f20c:	0801efdb 	.word	0x0801efdb
 801f210:	0801efdb 	.word	0x0801efdb
 801f214:	0801efdb 	.word	0x0801efdb
 801f218:	0801efdb 	.word	0x0801efdb
 801f21c:	0801efdb 	.word	0x0801efdb
 801f220:	0801efdb 	.word	0x0801efdb
 801f224:	0801efdb 	.word	0x0801efdb
 801f228:	0801efdb 	.word	0x0801efdb
 801f22c:	0801efdb 	.word	0x0801efdb
 801f230:	0801efdb 	.word	0x0801efdb
 801f234:	0801efdb 	.word	0x0801efdb
 801f238:	0801efdb 	.word	0x0801efdb
 801f23c:	0801efdb 	.word	0x0801efdb
 801f240:	0801efdb 	.word	0x0801efdb
 801f244:	0801efdb 	.word	0x0801efdb
 801f248:	0801efdb 	.word	0x0801efdb
 801f24c:	0801efdb 	.word	0x0801efdb
 801f250:	0801efdb 	.word	0x0801efdb
 801f254:	0801efdb 	.word	0x0801efdb
 801f258:	0801efdb 	.word	0x0801efdb
 801f25c:	0801efdb 	.word	0x0801efdb
 801f260:	0801efdb 	.word	0x0801efdb
 801f264:	0801efdb 	.word	0x0801efdb
 801f268:	0801efdb 	.word	0x0801efdb
 801f26c:	0801efdb 	.word	0x0801efdb
 801f270:	0801efdb 	.word	0x0801efdb
 801f274:	0801efdb 	.word	0x0801efdb
 801f278:	0801efdb 	.word	0x0801efdb
 801f27c:	0801efdb 	.word	0x0801efdb
 801f280:	0801efdb 	.word	0x0801efdb
 801f284:	0801efdb 	.word	0x0801efdb
 801f288:	0801f2fd 	.word	0x0801f2fd
 801f28c:	0801f2dd 	.word	0x0801f2dd
 801f290:	0801f2cd 	.word	0x0801f2cd
 801f294:	0801f2ad 	.word	0x0801f2ad
 801f298:	0801efdb 	.word	0x0801efdb
 801f29c:	0801efdb 	.word	0x0801efdb
 801f2a0:	0801efdb 	.word	0x0801efdb
 801f2a4:	0801f2bd 	.word	0x0801f2bd
 801f2a8:	0801f2ed 	.word	0x0801f2ed
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f2ac:	4b8f      	ldr	r3, [pc, #572]	; (801f4ec <dhcp_recv+0x678>)
 801f2ae:	f240 6259 	movw	r2, #1625	; 0x659
 801f2b2:	498f      	ldr	r1, [pc, #572]	; (801f4f0 <dhcp_recv+0x67c>)
 801f2b4:	488f      	ldr	r0, [pc, #572]	; (801f4f4 <dhcp_recv+0x680>)
 801f2b6:	f003 ff15 	bl	80230e4 <iprintf>
 801f2ba:	e62f      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f2bc:	4b8b      	ldr	r3, [pc, #556]	; (801f4ec <dhcp_recv+0x678>)
 801f2be:	f240 625d 	movw	r2, #1629	; 0x65d
 801f2c2:	498b      	ldr	r1, [pc, #556]	; (801f4f0 <dhcp_recv+0x67c>)
 801f2c4:	488b      	ldr	r0, [pc, #556]	; (801f4f4 <dhcp_recv+0x680>)
 801f2c6:	f003 ff0d 	bl	80230e4 <iprintf>
 801f2ca:	e627      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801f2cc:	4b87      	ldr	r3, [pc, #540]	; (801f4ec <dhcp_recv+0x678>)
 801f2ce:	f240 6255 	movw	r2, #1621	; 0x655
 801f2d2:	4989      	ldr	r1, [pc, #548]	; (801f4f8 <dhcp_recv+0x684>)
 801f2d4:	4887      	ldr	r0, [pc, #540]	; (801f4f4 <dhcp_recv+0x680>)
 801f2d6:	f003 ff05 	bl	80230e4 <iprintf>
 801f2da:	e61f      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801f2dc:	4b83      	ldr	r3, [pc, #524]	; (801f4ec <dhcp_recv+0x678>)
 801f2de:	f240 624f 	movw	r2, #1615	; 0x64f
 801f2e2:	4985      	ldr	r1, [pc, #532]	; (801f4f8 <dhcp_recv+0x684>)
 801f2e4:	4883      	ldr	r0, [pc, #524]	; (801f4f4 <dhcp_recv+0x680>)
 801f2e6:	f003 fefd 	bl	80230e4 <iprintf>
 801f2ea:	e617      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f2ec:	4b7f      	ldr	r3, [pc, #508]	; (801f4ec <dhcp_recv+0x678>)
 801f2ee:	f240 6261 	movw	r2, #1633	; 0x661
 801f2f2:	497f      	ldr	r1, [pc, #508]	; (801f4f0 <dhcp_recv+0x67c>)
 801f2f4:	487f      	ldr	r0, [pc, #508]	; (801f4f4 <dhcp_recv+0x680>)
 801f2f6:	f003 fef5 	bl	80230e4 <iprintf>
 801f2fa:	e60f      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f2fc:	4b7b      	ldr	r3, [pc, #492]	; (801f4ec <dhcp_recv+0x678>)
 801f2fe:	f240 6241 	movw	r2, #1601	; 0x641
 801f302:	497b      	ldr	r1, [pc, #492]	; (801f4f0 <dhcp_recv+0x67c>)
 801f304:	487b      	ldr	r0, [pc, #492]	; (801f4f4 <dhcp_recv+0x680>)
 801f306:	f003 feed 	bl	80230e4 <iprintf>
 801f30a:	e607      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801f30c:	4b77      	ldr	r3, [pc, #476]	; (801f4ec <dhcp_recv+0x678>)
 801f30e:	f240 6233 	movw	r2, #1587	; 0x633
 801f312:	497a      	ldr	r1, [pc, #488]	; (801f4fc <dhcp_recv+0x688>)
 801f314:	4877      	ldr	r0, [pc, #476]	; (801f4f4 <dhcp_recv+0x680>)
 801f316:	f003 fee5 	bl	80230e4 <iprintf>
 801f31a:	e5ff      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801f31c:	4b73      	ldr	r3, [pc, #460]	; (801f4ec <dhcp_recv+0x678>)
 801f31e:	f240 622e 	movw	r2, #1582	; 0x62e
 801f322:	4973      	ldr	r1, [pc, #460]	; (801f4f0 <dhcp_recv+0x67c>)
 801f324:	4873      	ldr	r0, [pc, #460]	; (801f4f4 <dhcp_recv+0x680>)
 801f326:	f003 fedd 	bl	80230e4 <iprintf>
 801f32a:	e5f7      	b.n	801ef1c <dhcp_recv+0xa8>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801f32c:	9b02      	ldr	r3, [sp, #8]
 801f32e:	429e      	cmp	r6, r3
 801f330:	f4ff ae02 	bcc.w	801ef38 <dhcp_recv+0xc4>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801f334:	4b72      	ldr	r3, [pc, #456]	; (801f500 <dhcp_recv+0x68c>)
 801f336:	781b      	ldrb	r3, [r3, #0]
 801f338:	b153      	cbz	r3, 801f350 <dhcp_recv+0x4dc>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f33a:	4b72      	ldr	r3, [pc, #456]	; (801f504 <dhcp_recv+0x690>)
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f33c:	2200      	movs	r2, #0
 801f33e:	4970      	ldr	r1, [pc, #448]	; (801f500 <dhcp_recv+0x68c>)
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f340:	681b      	ldr	r3, [r3, #0]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801f342:	700a      	strb	r2, [r1, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801f344:	2b01      	cmp	r3, #1
 801f346:	d033      	beq.n	801f3b0 <dhcp_recv+0x53c>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801f348:	2b02      	cmp	r3, #2
 801f34a:	d004      	beq.n	801f356 <dhcp_recv+0x4e2>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801f34c:	2b03      	cmp	r3, #3
 801f34e:	d02d      	beq.n	801f3ac <dhcp_recv+0x538>
  } else if (parse_sname_as_options) {
 801f350:	9b04      	ldr	r3, [sp, #16]
 801f352:	2b00      	cmp	r3, #0
 801f354:	d045      	beq.n	801f3e2 <dhcp_recv+0x56e>
    parse_sname_as_options = 0;
 801f356:	2300      	movs	r3, #0
    options_idx = DHCP_SNAME_OFS;
 801f358:	206c      	movs	r0, #108	; 0x6c
    parse_sname_as_options = 0;
 801f35a:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 801f35c:	232c      	movs	r3, #44	; 0x2c
 801f35e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 801f362:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 801f366:	e5c8      	b.n	801eefa <dhcp_recv+0x86>
 801f368:	9e05      	ldr	r6, [sp, #20]
 801f36a:	896a      	ldrh	r2, [r5, #10]
 801f36c:	e63a      	b.n	801efe4 <dhcp_recv+0x170>
 801f36e:	9e05      	ldr	r6, [sp, #20]
          } else if (decode_len == 4) {
 801f370:	d023      	beq.n	801f3ba <dhcp_recv+0x546>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801f372:	2c01      	cmp	r4, #1
 801f374:	f040 809a 	bne.w	801f4ac <dhcp_recv+0x638>
            value = ((u8_t *)&value)[0];
 801f378:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 801f37c:	4a61      	ldr	r2, [pc, #388]	; (801f504 <dhcp_recv+0x690>)
          dhcp_got_option(dhcp, decode_idx);
 801f37e:	2301      	movs	r3, #1
          dhcp_set_option_value(dhcp, decode_idx, value);
 801f380:	f842 0029 	str.w	r0, [r2, r9, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 801f384:	4a5e      	ldr	r2, [pc, #376]	; (801f500 <dhcp_recv+0x68c>)
 801f386:	f802 3009 	strb.w	r3, [r2, r9]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801f38a:	e7ee      	b.n	801f36a <dhcp_recv+0x4f6>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801f38c:	4b57      	ldr	r3, [pc, #348]	; (801f4ec <dhcp_recv+0x678>)
 801f38e:	f240 6281 	movw	r2, #1665	; 0x681
 801f392:	495d      	ldr	r1, [pc, #372]	; (801f508 <dhcp_recv+0x694>)
 801f394:	4857      	ldr	r0, [pc, #348]	; (801f4f4 <dhcp_recv+0x680>)
 801f396:	f003 fea5 	bl	80230e4 <iprintf>
 801f39a:	e5bf      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801f39c:	4b53      	ldr	r3, [pc, #332]	; (801f4ec <dhcp_recv+0x678>)
 801f39e:	f240 629d 	movw	r2, #1693	; 0x69d
 801f3a2:	495a      	ldr	r1, [pc, #360]	; (801f50c <dhcp_recv+0x698>)
 801f3a4:	4853      	ldr	r0, [pc, #332]	; (801f4f4 <dhcp_recv+0x680>)
 801f3a6:	f003 fe9d 	bl	80230e4 <iprintf>
 801f3aa:	e5b7      	b.n	801ef1c <dhcp_recv+0xa8>
      parse_sname_as_options = 1;
 801f3ac:	2301      	movs	r3, #1
 801f3ae:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 801f3b0:	27ec      	movs	r7, #236	; 0xec
 801f3b2:	236c      	movs	r3, #108	; 0x6c
 801f3b4:	e9cd 7302 	strd	r7, r3, [sp, #8]
 801f3b8:	e7d3      	b.n	801f362 <dhcp_recv+0x4ee>
            value = lwip_ntohl(value);
 801f3ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f3bc:	f7f7 ff2a 	bl	8017214 <lwip_htonl>
 801f3c0:	e7dc      	b.n	801f37c <dhcp_recv+0x508>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801f3c2:	4b4a      	ldr	r3, [pc, #296]	; (801f4ec <dhcp_recv+0x678>)
 801f3c4:	f240 6239 	movw	r2, #1593	; 0x639
 801f3c8:	4951      	ldr	r1, [pc, #324]	; (801f510 <dhcp_recv+0x69c>)
 801f3ca:	484a      	ldr	r0, [pc, #296]	; (801f4f4 <dhcp_recv+0x680>)
 801f3cc:	f003 fe8a 	bl	80230e4 <iprintf>
 801f3d0:	e5a4      	b.n	801ef1c <dhcp_recv+0xa8>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801f3d2:	4b46      	ldr	r3, [pc, #280]	; (801f4ec <dhcp_recv+0x678>)
 801f3d4:	f240 6251 	movw	r2, #1617	; 0x651
 801f3d8:	494e      	ldr	r1, [pc, #312]	; (801f514 <dhcp_recv+0x6a0>)
 801f3da:	4846      	ldr	r0, [pc, #280]	; (801f4f4 <dhcp_recv+0x680>)
 801f3dc:	f003 fe82 	bl	80230e4 <iprintf>
 801f3e0:	e59c      	b.n	801ef1c <dhcp_recv+0xa8>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801f3e2:	4b47      	ldr	r3, [pc, #284]	; (801f500 <dhcp_recv+0x68c>)
 801f3e4:	785b      	ldrb	r3, [r3, #1]
 801f3e6:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 801f3ea:	2b00      	cmp	r3, #0
 801f3ec:	f43f ad96 	beq.w	801ef1c <dhcp_recv+0xa8>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801f3f0:	4a44      	ldr	r2, [pc, #272]	; (801f504 <dhcp_recv+0x690>)
  msg_in = (struct dhcp_msg *)p->payload;
 801f3f2:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801f3f6:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 801f3f8:	2b05      	cmp	r3, #5
 801f3fa:	d01d      	beq.n	801f438 <dhcp_recv+0x5c4>
  else if ((msg_type == DHCP_NAK) &&
 801f3fc:	2b06      	cmp	r3, #6
 801f3fe:	d02c      	beq.n	801f45a <dhcp_recv+0x5e6>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801f400:	2b02      	cmp	r3, #2
 801f402:	f47f ad8b 	bne.w	801ef1c <dhcp_recv+0xa8>
 801f406:	f899 3005 	ldrb.w	r3, [r9, #5]
 801f40a:	2b06      	cmp	r3, #6
 801f40c:	f47f ad86 	bne.w	801ef1c <dhcp_recv+0xa8>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 801f410:	4b3b      	ldr	r3, [pc, #236]	; (801f500 <dhcp_recv+0x68c>)
 801f412:	789b      	ldrb	r3, [r3, #2]
 801f414:	2b00      	cmp	r3, #0
 801f416:	f43f ad81 	beq.w	801ef1c <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f41a:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 801f41e:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801f420:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 801f422:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801f424:	f7f7 fef6 	bl	8017214 <lwip_htonl>
 801f428:	4603      	mov	r3, r0
    dhcp_select(netif);
 801f42a:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801f42c:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801f42e:	6923      	ldr	r3, [r4, #16]
 801f430:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 801f432:	f7ff fa47 	bl	801e8c4 <dhcp_select>
 801f436:	e571      	b.n	801ef1c <dhcp_recv+0xa8>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801f438:	f899 3005 	ldrb.w	r3, [r9, #5]
 801f43c:	2b01      	cmp	r3, #1
 801f43e:	d028      	beq.n	801f492 <dhcp_recv+0x61e>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801f440:	3b03      	subs	r3, #3
 801f442:	2b02      	cmp	r3, #2
 801f444:	f63f ad6a 	bhi.w	801ef1c <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801f448:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801f44c:	4621      	mov	r1, r4
 801f44e:	f7ff fcb7 	bl	801edc0 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 801f452:	4650      	mov	r0, sl
 801f454:	f7ff fbb2 	bl	801ebbc <dhcp_bind>
 801f458:	e560      	b.n	801ef1c <dhcp_recv+0xa8>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801f45a:	f899 3005 	ldrb.w	r3, [r9, #5]
 801f45e:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801f460:	2a02      	cmp	r2, #2
 801f462:	d902      	bls.n	801f46a <dhcp_recv+0x5f6>
 801f464:	2b01      	cmp	r3, #1
 801f466:	f47f ad59 	bne.w	801ef1c <dhcp_recv+0xa8>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f46a:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 801f46e:	795a      	ldrb	r2, [r3, #5]
 801f470:	2a0c      	cmp	r2, #12
 801f472:	d004      	beq.n	801f47e <dhcp_recv+0x60a>
    dhcp->tries = 0;
 801f474:	2200      	movs	r2, #0
    dhcp->state = new_state;
 801f476:	210c      	movs	r1, #12
    dhcp->tries = 0;
 801f478:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 801f47a:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 801f47c:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801f47e:	4b26      	ldr	r3, [pc, #152]	; (801f518 <dhcp_recv+0x6a4>)
 801f480:	4650      	mov	r0, sl
 801f482:	461a      	mov	r2, r3
 801f484:	4619      	mov	r1, r3
 801f486:	f7f9 facb 	bl	8018a20 <netif_set_addr>
  dhcp_discover(netif);
 801f48a:	4650      	mov	r0, sl
 801f48c:	f7ff faec 	bl	801ea68 <dhcp_discover>
}
 801f490:	e544      	b.n	801ef1c <dhcp_recv+0xa8>
      dhcp_handle_ack(netif, msg_in);
 801f492:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 801f496:	4621      	mov	r1, r4
 801f498:	f7ff fc92 	bl	801edc0 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801f49c:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 801f4a0:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801f4a2:	071a      	lsls	r2, r3, #28
 801f4a4:	d5d6      	bpl.n	801f454 <dhcp_recv+0x5e0>
        dhcp_check(netif);
 801f4a6:	f7ff fb71 	bl	801eb8c <dhcp_check>
 801f4aa:	e537      	b.n	801ef1c <dhcp_recv+0xa8>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801f4ac:	4b0f      	ldr	r3, [pc, #60]	; (801f4ec <dhcp_recv+0x678>)
 801f4ae:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 801f4b2:	491a      	ldr	r1, [pc, #104]	; (801f51c <dhcp_recv+0x6a8>)
 801f4b4:	480f      	ldr	r0, [pc, #60]	; (801f4f4 <dhcp_recv+0x680>)
 801f4b6:	f003 fe15 	bl	80230e4 <iprintf>
 801f4ba:	e52f      	b.n	801ef1c <dhcp_recv+0xa8>
      if (offset + len + 2 > 0xFFFF) {
 801f4bc:	4426      	add	r6, r4
 801f4be:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 801f4c2:	428e      	cmp	r6, r1
 801f4c4:	f73f ad2a 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f4c8:	193e      	adds	r6, r7, r4
 801f4ca:	b2b6      	uxth	r6, r6
      if (decode_len > 0) {
 801f4cc:	2c00      	cmp	r4, #0
 801f4ce:	f43f ad89 	beq.w	801efe4 <dhcp_recv+0x170>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801f4d2:	461c      	mov	r4, r3
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801f4d4:	f04f 0908 	mov.w	r9, #8
 801f4d8:	e5b5      	b.n	801f046 <dhcp_recv+0x1d2>
      if (offset + len + 2 > 0xFFFF) {
 801f4da:	4426      	add	r6, r4
 801f4dc:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 801f4e0:	429e      	cmp	r6, r3
 801f4e2:	f73f ad1b 	bgt.w	801ef1c <dhcp_recv+0xa8>
      offset = (u16_t)(offset + len + 2);
 801f4e6:	443c      	add	r4, r7
 801f4e8:	b2a6      	uxth	r6, r4
      if (decode_len > 0) {
 801f4ea:	e57b      	b.n	801efe4 <dhcp_recv+0x170>
 801f4ec:	080421d4 	.word	0x080421d4
 801f4f0:	08042438 	.word	0x08042438
 801f4f4:	08029ba0 	.word	0x08029ba0
 801f4f8:	08042468 	.word	0x08042468
 801f4fc:	08042444 	.word	0x08042444
 801f500:	2002e4b4 	.word	0x2002e4b4
 801f504:	2002e4c0 	.word	0x2002e4c0
 801f508:	080424a0 	.word	0x080424a0
 801f50c:	080424cc 	.word	0x080424cc
 801f510:	08042458 	.word	0x08042458
 801f514:	08042474 	.word	0x08042474
 801f518:	08042888 	.word	0x08042888
 801f51c:	080424b8 	.word	0x080424b8

0801f520 <dhcp_network_changed>:
{
 801f520:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f522:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 801f524:	b135      	cbz	r5, 801f534 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 801f526:	796b      	ldrb	r3, [r5, #5]
 801f528:	4604      	mov	r4, r0
 801f52a:	2b05      	cmp	r3, #5
 801f52c:	d803      	bhi.n	801f536 <dhcp_network_changed+0x16>
 801f52e:	2b02      	cmp	r3, #2
 801f530:	d813      	bhi.n	801f55a <dhcp_network_changed+0x3a>
 801f532:	b95b      	cbnz	r3, 801f54c <dhcp_network_changed+0x2c>
}
 801f534:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 801f536:	2b0a      	cmp	r3, #10
 801f538:	d00f      	beq.n	801f55a <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801f53a:	2b0c      	cmp	r3, #12
 801f53c:	d906      	bls.n	801f54c <dhcp_network_changed+0x2c>
 801f53e:	4b0a      	ldr	r3, [pc, #40]	; (801f568 <dhcp_network_changed+0x48>)
 801f540:	f240 326d 	movw	r2, #877	; 0x36d
 801f544:	4909      	ldr	r1, [pc, #36]	; (801f56c <dhcp_network_changed+0x4c>)
 801f546:	480a      	ldr	r0, [pc, #40]	; (801f570 <dhcp_network_changed+0x50>)
 801f548:	f003 fdcc 	bl	80230e4 <iprintf>
      dhcp->tries = 0;
 801f54c:	2300      	movs	r3, #0
      dhcp_discover(netif);
 801f54e:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801f550:	71ab      	strb	r3, [r5, #6]
}
 801f552:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 801f556:	f7ff ba87 	b.w	801ea68 <dhcp_discover>
      dhcp->tries = 0;
 801f55a:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 801f55c:	4620      	mov	r0, r4
      dhcp->tries = 0;
 801f55e:	71ab      	strb	r3, [r5, #6]
}
 801f560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 801f564:	f7ff b90a 	b.w	801e77c <dhcp_reboot>
 801f568:	080421d4 	.word	0x080421d4
 801f56c:	08042514 	.word	0x08042514
 801f570:	08029ba0 	.word	0x08029ba0

0801f574 <dhcp_arp_reply>:
{
 801f574:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f576:	b087      	sub	sp, #28
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f578:	2800      	cmp	r0, #0
 801f57a:	d047      	beq.n	801f60c <dhcp_arp_reply+0x98>
  dhcp = netif_dhcp_data(netif);
 801f57c:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801f57e:	4604      	mov	r4, r0
 801f580:	b115      	cbz	r5, 801f588 <dhcp_arp_reply+0x14>
 801f582:	796b      	ldrb	r3, [r5, #5]
 801f584:	2b08      	cmp	r3, #8
 801f586:	d001      	beq.n	801f58c <dhcp_arp_reply+0x18>
}
 801f588:	b007      	add	sp, #28
 801f58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 801f58c:	680a      	ldr	r2, [r1, #0]
 801f58e:	69eb      	ldr	r3, [r5, #28]
 801f590:	429a      	cmp	r2, r3
 801f592:	d1f9      	bne.n	801f588 <dhcp_arp_reply+0x14>
    dhcp->tries = 0;
 801f594:	2600      	movs	r6, #0
    dhcp->state = new_state;
 801f596:	210c      	movs	r1, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801f598:	f10d 0316 	add.w	r3, sp, #22
 801f59c:	2204      	movs	r2, #4
    dhcp->state = new_state;
 801f59e:	7169      	strb	r1, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801f5a0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 801f5a2:	71ae      	strb	r6, [r5, #6]
    dhcp->request_timeout = 0;
 801f5a4:	812e      	strh	r6, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801f5a6:	f7ff f817 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801f5aa:	4606      	mov	r6, r0
 801f5ac:	b330      	cbz	r0, 801f5fc <dhcp_arp_reply+0x88>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801f5ae:	6841      	ldr	r1, [r0, #4]
 801f5b0:	2304      	movs	r3, #4
 801f5b2:	2232      	movs	r2, #50	; 0x32
 801f5b4:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801f5b8:	31f0      	adds	r1, #240	; 0xf0
 801f5ba:	9103      	str	r1, [sp, #12]
 801f5bc:	f7fe ffca 	bl	801e554 <dhcp_option>
 801f5c0:	4607      	mov	r7, r0
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f5c2:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801f5c4:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f5c8:	f7f7 fe24 	bl	8017214 <lwip_htonl>
 801f5cc:	9903      	ldr	r1, [sp, #12]
 801f5ce:	4602      	mov	r2, r0
 801f5d0:	4638      	mov	r0, r7
 801f5d2:	f7fe ffdd 	bl	801e590 <dhcp_option_long>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f5d6:	9903      	ldr	r1, [sp, #12]
 801f5d8:	4632      	mov	r2, r6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801f5da:	f8ad 0016 	strh.w	r0, [sp, #22]
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f5de:	f7ff f8b1 	bl	801e744 <dhcp_option_trailer>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801f5e2:	4a0e      	ldr	r2, [pc, #56]	; (801f61c <dhcp_arp_reply+0xa8>)
 801f5e4:	480e      	ldr	r0, [pc, #56]	; (801f620 <dhcp_arp_reply+0xac>)
 801f5e6:	2343      	movs	r3, #67	; 0x43
 801f5e8:	9400      	str	r4, [sp, #0]
 801f5ea:	4631      	mov	r1, r6
 801f5ec:	6800      	ldr	r0, [r0, #0]
 801f5ee:	9201      	str	r2, [sp, #4]
 801f5f0:	4a0c      	ldr	r2, [pc, #48]	; (801f624 <dhcp_arp_reply+0xb0>)
 801f5f2:	f7fe fd81 	bl	801e0f8 <udp_sendto_if_src>
    pbuf_free(p_out);
 801f5f6:	4630      	mov	r0, r6
 801f5f8:	f7f9 fc5c 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801f5fc:	79ab      	ldrb	r3, [r5, #6]
 801f5fe:	2bff      	cmp	r3, #255	; 0xff
 801f600:	d001      	beq.n	801f606 <dhcp_arp_reply+0x92>
    dhcp->tries++;
 801f602:	3301      	adds	r3, #1
 801f604:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f606:	2314      	movs	r3, #20
 801f608:	812b      	strh	r3, [r5, #8]
  return result;
 801f60a:	e7bd      	b.n	801f588 <dhcp_arp_reply+0x14>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801f60c:	4b06      	ldr	r3, [pc, #24]	; (801f628 <dhcp_arp_reply+0xb4>)
 801f60e:	f240 328b 	movw	r2, #907	; 0x38b
 801f612:	4906      	ldr	r1, [pc, #24]	; (801f62c <dhcp_arp_reply+0xb8>)
 801f614:	4806      	ldr	r0, [pc, #24]	; (801f630 <dhcp_arp_reply+0xbc>)
 801f616:	f003 fd65 	bl	80230e4 <iprintf>
 801f61a:	e7b5      	b.n	801f588 <dhcp_arp_reply+0x14>
 801f61c:	08042888 	.word	0x08042888
 801f620:	2001aa7c 	.word	0x2001aa7c
 801f624:	0804288c 	.word	0x0804288c
 801f628:	080421d4 	.word	0x080421d4
 801f62c:	08029b90 	.word	0x08029b90
 801f630:	08029ba0 	.word	0x08029ba0

0801f634 <dhcp_renew>:
{
 801f634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f638:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 801f63a:	b087      	sub	sp, #28
 801f63c:	4682      	mov	sl, r0
  if (new_state != dhcp->state) {
 801f63e:	797b      	ldrb	r3, [r7, #5]
 801f640:	2b05      	cmp	r3, #5
 801f642:	d004      	beq.n	801f64e <dhcp_renew+0x1a>
    dhcp->tries = 0;
 801f644:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801f646:	2205      	movs	r2, #5
    dhcp->tries = 0;
 801f648:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 801f64a:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 801f64c:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801f64e:	f10d 0316 	add.w	r3, sp, #22
 801f652:	2203      	movs	r2, #3
 801f654:	4639      	mov	r1, r7
 801f656:	4650      	mov	r0, sl
 801f658:	f7fe ffbe 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801f65c:	4680      	mov	r8, r0
 801f65e:	2800      	cmp	r0, #0
 801f660:	d06a      	beq.n	801f738 <dhcp_renew+0x104>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f662:	6846      	ldr	r6, [r0, #4]
 801f664:	2302      	movs	r3, #2
 801f666:	2239      	movs	r2, #57	; 0x39
 801f668:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801f66c:	36f0      	adds	r6, #240	; 0xf0
 801f66e:	4d34      	ldr	r5, [pc, #208]	; (801f740 <dhcp_renew+0x10c>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f670:	f04f 0901 	mov.w	r9, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f674:	4631      	mov	r1, r6
 801f676:	f105 0b03 	add.w	fp, r5, #3
 801f67a:	f7fe ff6b 	bl	801e554 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f67e:	4631      	mov	r1, r6
 801f680:	f8ba 202c 	ldrh.w	r2, [sl, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f684:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f688:	f7fe ff48 	bl	801e51c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f68c:	4631      	mov	r1, r6
 801f68e:	2304      	movs	r3, #4
 801f690:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f692:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f696:	f7fe ff5d 	bl	801e554 <dhcp_option>
 801f69a:	4604      	mov	r4, r0
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f69c:	4929      	ldr	r1, [pc, #164]	; (801f744 <dhcp_renew+0x110>)
 801f69e:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f6a0:	9003      	str	r0, [sp, #12]
 801f6a2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f6a6:	d80b      	bhi.n	801f6c0 <dhcp_renew+0x8c>
  options[options_out_len++] = value;
 801f6a8:	1c63      	adds	r3, r4, #1
 801f6aa:	f806 9004 	strb.w	r9, [r6, r4]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f6ae:	455d      	cmp	r5, fp
  options[options_out_len++] = value;
 801f6b0:	b29c      	uxth	r4, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f6b2:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f6b6:	d00b      	beq.n	801f6d0 <dhcp_renew+0x9c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f6b8:	2c43      	cmp	r4, #67	; 0x43
 801f6ba:	f815 9b01 	ldrb.w	r9, [r5], #1
 801f6be:	d9f3      	bls.n	801f6a8 <dhcp_renew+0x74>
 801f6c0:	4b21      	ldr	r3, [pc, #132]	; (801f748 <dhcp_renew+0x114>)
 801f6c2:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801f6c6:	4821      	ldr	r0, [pc, #132]	; (801f74c <dhcp_renew+0x118>)
 801f6c8:	f003 fd0c 	bl	80230e4 <iprintf>
 801f6cc:	491d      	ldr	r1, [pc, #116]	; (801f744 <dhcp_renew+0x110>)
 801f6ce:	e7eb      	b.n	801f6a8 <dhcp_renew+0x74>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f6d0:	9803      	ldr	r0, [sp, #12]
 801f6d2:	4631      	mov	r1, r6
 801f6d4:	4642      	mov	r2, r8
 801f6d6:	3004      	adds	r0, #4
 801f6d8:	b280      	uxth	r0, r0
 801f6da:	f7ff f833 	bl	801e744 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801f6de:	4a1c      	ldr	r2, [pc, #112]	; (801f750 <dhcp_renew+0x11c>)
 801f6e0:	f8cd a000 	str.w	sl, [sp]
 801f6e4:	2343      	movs	r3, #67	; 0x43
 801f6e6:	6810      	ldr	r0, [r2, #0]
 801f6e8:	4641      	mov	r1, r8
 801f6ea:	f107 0218 	add.w	r2, r7, #24
 801f6ee:	f7fe fdc5 	bl	801e27c <udp_sendto_if>
 801f6f2:	4604      	mov	r4, r0
    pbuf_free(p_out);
 801f6f4:	4640      	mov	r0, r8
 801f6f6:	f7f9 fbdd 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801f6fa:	79bb      	ldrb	r3, [r7, #6]
 801f6fc:	2bff      	cmp	r3, #255	; 0xff
 801f6fe:	d015      	beq.n	801f72c <dhcp_renew+0xf8>
    dhcp->tries++;
 801f700:	3301      	adds	r3, #1
 801f702:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801f704:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801f706:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801f708:	d810      	bhi.n	801f72c <dhcp_renew+0xf8>
 801f70a:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
 801f70e:	4a11      	ldr	r2, [pc, #68]	; (801f754 <dhcp_renew+0x120>)
}
 801f710:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801f712:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801f716:	011b      	lsls	r3, r3, #4
 801f718:	b29b      	uxth	r3, r3
 801f71a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801f71e:	fba2 2303 	umull	r2, r3, r2, r3
 801f722:	095b      	lsrs	r3, r3, #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f724:	813b      	strh	r3, [r7, #8]
}
 801f726:	b007      	add	sp, #28
 801f728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801f72c:	2328      	movs	r3, #40	; 0x28
}
 801f72e:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801f730:	813b      	strh	r3, [r7, #8]
}
 801f732:	b007      	add	sp, #28
 801f734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 801f738:	f04f 34ff 	mov.w	r4, #4294967295
 801f73c:	e7dd      	b.n	801f6fa <dhcp_renew+0xc6>
 801f73e:	bf00      	nop
 801f740:	0804254d 	.word	0x0804254d
 801f744:	08042348 	.word	0x08042348
 801f748:	080421d4 	.word	0x080421d4
 801f74c:	08029ba0 	.word	0x08029ba0
 801f750:	2001aa7c 	.word	0x2001aa7c
 801f754:	10624dd3 	.word	0x10624dd3

0801f758 <dhcp_release_and_stop>:
{
 801f758:	b5f0      	push	{r4, r5, r6, r7, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801f75a:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 801f75c:	b087      	sub	sp, #28
  if (dhcp == NULL) {
 801f75e:	2c00      	cmp	r4, #0
 801f760:	d051      	beq.n	801f806 <dhcp_release_and_stop+0xae>
  if (dhcp->state == DHCP_STATE_OFF) {
 801f762:	7962      	ldrb	r2, [r4, #5]
 801f764:	2a00      	cmp	r2, #0
 801f766:	d04e      	beq.n	801f806 <dhcp_release_and_stop+0xae>
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f768:	1f11      	subs	r1, r2, #4
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801f76a:	2300      	movs	r3, #0
 801f76c:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801f76e:	69a0      	ldr	r0, [r4, #24]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f770:	2901      	cmp	r1, #1
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801f772:	62a3      	str	r3, [r4, #40]	; 0x28
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801f774:	9005      	str	r0, [sp, #20]
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 801f776:	81e3      	strh	r3, [r4, #14]
 801f778:	6123      	str	r3, [r4, #16]
 801f77a:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 801f77c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801f780:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801f784:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801f788:	d901      	bls.n	801f78e <dhcp_release_and_stop+0x36>
 801f78a:	2a0a      	cmp	r2, #10
 801f78c:	d12d      	bne.n	801f7ea <dhcp_release_and_stop+0x92>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801f78e:	f10d 0312 	add.w	r3, sp, #18
 801f792:	2207      	movs	r2, #7
 801f794:	4621      	mov	r1, r4
 801f796:	4628      	mov	r0, r5
 801f798:	f7fe ff1e 	bl	801e5d8 <dhcp_create_msg>
    if (p_out != NULL) {
 801f79c:	4606      	mov	r6, r0
 801f79e:	b320      	cbz	r0, 801f7ea <dhcp_release_and_stop+0x92>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801f7a0:	6871      	ldr	r1, [r6, #4]
 801f7a2:	2304      	movs	r3, #4
 801f7a4:	2236      	movs	r2, #54	; 0x36
 801f7a6:	f8bd 0012 	ldrh.w	r0, [sp, #18]
 801f7aa:	31f0      	adds	r1, #240	; 0xf0
 801f7ac:	9103      	str	r1, [sp, #12]
 801f7ae:	f7fe fed1 	bl	801e554 <dhcp_option>
 801f7b2:	4607      	mov	r7, r0
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801f7b4:	9805      	ldr	r0, [sp, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801f7b6:	f8ad 7012 	strh.w	r7, [sp, #18]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801f7ba:	f7f7 fd2b 	bl	8017214 <lwip_htonl>
 801f7be:	9903      	ldr	r1, [sp, #12]
 801f7c0:	4602      	mov	r2, r0
 801f7c2:	4638      	mov	r0, r7
 801f7c4:	f7fe fee4 	bl	801e590 <dhcp_option_long>
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f7c8:	9903      	ldr	r1, [sp, #12]
 801f7ca:	4632      	mov	r2, r6
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801f7cc:	f8ad 0012 	strh.w	r0, [sp, #18]
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f7d0:	f7fe ffb8 	bl	801e744 <dhcp_option_trailer>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801f7d4:	4910      	ldr	r1, [pc, #64]	; (801f818 <dhcp_release_and_stop+0xc0>)
 801f7d6:	9500      	str	r5, [sp, #0]
 801f7d8:	2343      	movs	r3, #67	; 0x43
 801f7da:	6808      	ldr	r0, [r1, #0]
 801f7dc:	aa05      	add	r2, sp, #20
 801f7de:	4631      	mov	r1, r6
 801f7e0:	f7fe fd4c 	bl	801e27c <udp_sendto_if>
      pbuf_free(p_out);
 801f7e4:	4630      	mov	r0, r6
 801f7e6:	f7f9 fb65 	bl	8018eb4 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801f7ea:	4b0c      	ldr	r3, [pc, #48]	; (801f81c <dhcp_release_and_stop+0xc4>)
 801f7ec:	4628      	mov	r0, r5
 801f7ee:	461a      	mov	r2, r3
 801f7f0:	4619      	mov	r1, r3
 801f7f2:	f7f9 f915 	bl	8018a20 <netif_set_addr>
  if (new_state != dhcp->state) {
 801f7f6:	7963      	ldrb	r3, [r4, #5]
 801f7f8:	b11b      	cbz	r3, 801f802 <dhcp_release_and_stop+0xaa>
    dhcp->state = new_state;
 801f7fa:	2300      	movs	r3, #0
 801f7fc:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 801f7fe:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 801f800:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 801f802:	7923      	ldrb	r3, [r4, #4]
 801f804:	b90b      	cbnz	r3, 801f80a <dhcp_release_and_stop+0xb2>
}
 801f806:	b007      	add	sp, #28
 801f808:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801f80a:	f7ff fab7 	bl	801ed7c <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801f80e:	2300      	movs	r3, #0
 801f810:	7123      	strb	r3, [r4, #4]
}
 801f812:	b007      	add	sp, #28
 801f814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f816:	bf00      	nop
 801f818:	2001aa7c 	.word	0x2001aa7c
 801f81c:	08042888 	.word	0x08042888

0801f820 <dhcp_start>:
{
 801f820:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801f822:	2800      	cmp	r0, #0
 801f824:	d046      	beq.n	801f8b4 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801f826:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801f82a:	4604      	mov	r4, r0
 801f82c:	07da      	lsls	r2, r3, #31
 801f82e:	d537      	bpl.n	801f8a0 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801f830:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 801f832:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801f834:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801f838:	d32f      	bcc.n	801f89a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 801f83a:	b33d      	cbz	r5, 801f88c <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 801f83c:	792b      	ldrb	r3, [r5, #4]
 801f83e:	bb13      	cbnz	r3, 801f886 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 801f840:	2234      	movs	r2, #52	; 0x34
 801f842:	2100      	movs	r1, #0
 801f844:	4628      	mov	r0, r5
 801f846:	f002 fcdb 	bl	8022200 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801f84a:	f7ff fa5d 	bl	801ed08 <dhcp_inc_pcb_refcount>
 801f84e:	4606      	mov	r6, r0
 801f850:	bb18      	cbnz	r0, 801f89a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 801f852:	2301      	movs	r3, #1
 801f854:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 801f856:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801f85a:	075b      	lsls	r3, r3, #29
 801f85c:	d408      	bmi.n	801f870 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 801f85e:	796b      	ldrb	r3, [r5, #5]
 801f860:	2b02      	cmp	r3, #2
 801f862:	d003      	beq.n	801f86c <dhcp_start+0x4c>
    dhcp->state = new_state;
 801f864:	2302      	movs	r3, #2
    dhcp->tries = 0;
 801f866:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 801f868:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 801f86a:	716b      	strb	r3, [r5, #5]
}
 801f86c:	4630      	mov	r0, r6
 801f86e:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 801f870:	4620      	mov	r0, r4
 801f872:	f7ff f8f9 	bl	801ea68 <dhcp_discover>
  if (result != ERR_OK) {
 801f876:	2800      	cmp	r0, #0
 801f878:	d0f8      	beq.n	801f86c <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 801f87a:	4620      	mov	r0, r4
    return ERR_MEM;
 801f87c:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 801f880:	f7ff ff6a 	bl	801f758 <dhcp_release_and_stop>
    return ERR_MEM;
 801f884:	e7f2      	b.n	801f86c <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801f886:	f7ff fa79 	bl	801ed7c <dhcp_dec_pcb_refcount>
 801f88a:	e7d9      	b.n	801f840 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801f88c:	2034      	movs	r0, #52	; 0x34
 801f88e:	f7f8 fe2f 	bl	80184f0 <mem_malloc>
    if (dhcp == NULL) {
 801f892:	4605      	mov	r5, r0
 801f894:	b108      	cbz	r0, 801f89a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 801f896:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 801f898:	e7d2      	b.n	801f840 <dhcp_start+0x20>
    return ERR_MEM;
 801f89a:	f04f 36ff 	mov.w	r6, #4294967295
 801f89e:	e7e5      	b.n	801f86c <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801f8a0:	4b09      	ldr	r3, [pc, #36]	; (801f8c8 <dhcp_start+0xa8>)
 801f8a2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 801f8a6:	4909      	ldr	r1, [pc, #36]	; (801f8cc <dhcp_start+0xac>)
 801f8a8:	f06f 060f 	mvn.w	r6, #15
 801f8ac:	4808      	ldr	r0, [pc, #32]	; (801f8d0 <dhcp_start+0xb0>)
 801f8ae:	f003 fc19 	bl	80230e4 <iprintf>
 801f8b2:	e7db      	b.n	801f86c <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 801f8b4:	4b04      	ldr	r3, [pc, #16]	; (801f8c8 <dhcp_start+0xa8>)
 801f8b6:	f240 22e7 	movw	r2, #743	; 0x2e7
 801f8ba:	4906      	ldr	r1, [pc, #24]	; (801f8d4 <dhcp_start+0xb4>)
 801f8bc:	f06f 060f 	mvn.w	r6, #15
 801f8c0:	4803      	ldr	r0, [pc, #12]	; (801f8d0 <dhcp_start+0xb0>)
 801f8c2:	f003 fc0f 	bl	80230e4 <iprintf>
 801f8c6:	e7d1      	b.n	801f86c <dhcp_start+0x4c>
 801f8c8:	080421d4 	.word	0x080421d4
 801f8cc:	08042528 	.word	0x08042528
 801f8d0:	08029ba0 	.word	0x08029ba0
 801f8d4:	08029b90 	.word	0x08029b90

0801f8d8 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 801f8d8:	4b5f      	ldr	r3, [pc, #380]	; (801fa58 <dhcp_coarse_tmr+0x180>)
{
 801f8da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 801f8de:	681d      	ldr	r5, [r3, #0]
{
 801f8e0:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 801f8e2:	b1e5      	cbz	r5, 801f91e <dhcp_coarse_tmr+0x46>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f8e4:	f8df b190 	ldr.w	fp, [pc, #400]	; 801fa78 <dhcp_coarse_tmr+0x1a0>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801f8e8:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801f8ea:	b1ac      	cbz	r4, 801f918 <dhcp_coarse_tmr+0x40>
 801f8ec:	7963      	ldrb	r3, [r4, #5]
 801f8ee:	b19b      	cbz	r3, 801f918 <dhcp_coarse_tmr+0x40>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801f8f0:	8aa1      	ldrh	r1, [r4, #20]
 801f8f2:	b129      	cbz	r1, 801f900 <dhcp_coarse_tmr+0x28>
 801f8f4:	8a62      	ldrh	r2, [r4, #18]
 801f8f6:	3201      	adds	r2, #1
 801f8f8:	b292      	uxth	r2, r2
 801f8fa:	4291      	cmp	r1, r2
 801f8fc:	8262      	strh	r2, [r4, #18]
 801f8fe:	d011      	beq.n	801f924 <dhcp_coarse_tmr+0x4c>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801f900:	8a22      	ldrh	r2, [r4, #16]
 801f902:	b11a      	cbz	r2, 801f90c <dhcp_coarse_tmr+0x34>
 801f904:	1e51      	subs	r1, r2, #1
 801f906:	2a01      	cmp	r2, #1
 801f908:	8221      	strh	r1, [r4, #16]
 801f90a:	d012      	beq.n	801f932 <dhcp_coarse_tmr+0x5a>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 801f90c:	89e2      	ldrh	r2, [r4, #14]
 801f90e:	b11a      	cbz	r2, 801f918 <dhcp_coarse_tmr+0x40>
 801f910:	1e51      	subs	r1, r2, #1
 801f912:	2a01      	cmp	r2, #1
 801f914:	81e1      	strh	r1, [r4, #14]
 801f916:	d05c      	beq.n	801f9d2 <dhcp_coarse_tmr+0xfa>
  NETIF_FOREACH(netif) {
 801f918:	682d      	ldr	r5, [r5, #0]
 801f91a:	2d00      	cmp	r5, #0
 801f91c:	d1e4      	bne.n	801f8e8 <dhcp_coarse_tmr+0x10>
}
 801f91e:	b007      	add	sp, #28
 801f920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 801f924:	4628      	mov	r0, r5
 801f926:	f7ff ff17 	bl	801f758 <dhcp_release_and_stop>
        dhcp_start(netif);
 801f92a:	4628      	mov	r0, r5
 801f92c:	f7ff ff78 	bl	801f820 <dhcp_start>
 801f930:	e7f2      	b.n	801f918 <dhcp_coarse_tmr+0x40>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f932:	1e5a      	subs	r2, r3, #1
 801f934:	b2d1      	uxtb	r1, r2
 801f936:	2909      	cmp	r1, #9
 801f938:	d8ee      	bhi.n	801f918 <dhcp_coarse_tmr+0x40>
 801f93a:	f240 2219 	movw	r2, #537	; 0x219
 801f93e:	40ca      	lsrs	r2, r1
 801f940:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801f942:	f012 0201 	ands.w	r2, r2, #1
 801f946:	d1e7      	bne.n	801f918 <dhcp_coarse_tmr+0x40>
  if (new_state != dhcp->state) {
 801f948:	2b04      	cmp	r3, #4
 801f94a:	d003      	beq.n	801f954 <dhcp_coarse_tmr+0x7c>
    dhcp->state = new_state;
 801f94c:	2304      	movs	r3, #4
    dhcp->tries = 0;
 801f94e:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 801f950:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 801f952:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801f954:	f10d 0316 	add.w	r3, sp, #22
 801f958:	2203      	movs	r2, #3
 801f95a:	4621      	mov	r1, r4
 801f95c:	4628      	mov	r0, r5
 801f95e:	f7fe fe3b 	bl	801e5d8 <dhcp_create_msg>
  if (p_out != NULL) {
 801f962:	4681      	mov	r9, r0
 801f964:	2800      	cmp	r0, #0
 801f966:	d057      	beq.n	801fa18 <dhcp_coarse_tmr+0x140>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f968:	6841      	ldr	r1, [r0, #4]
 801f96a:	2302      	movs	r3, #2
 801f96c:	2239      	movs	r2, #57	; 0x39
 801f96e:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 801f972:	f101 08f0 	add.w	r8, r1, #240	; 0xf0
 801f976:	4f39      	ldr	r7, [pc, #228]	; (801fa5c <dhcp_coarse_tmr+0x184>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f978:	f04f 0a01 	mov.w	sl, #1
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f97c:	4641      	mov	r1, r8
 801f97e:	f7fe fde9 	bl	801e554 <dhcp_option>
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f982:	4641      	mov	r1, r8
 801f984:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801f986:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f98a:	f7fe fdc7 	bl	801e51c <dhcp_option_short>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f98e:	4641      	mov	r1, r8
 801f990:	2304      	movs	r3, #4
 801f992:	2237      	movs	r2, #55	; 0x37
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801f994:	f8ad 0016 	strh.w	r0, [sp, #22]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f998:	f7fe fddc 	bl	801e554 <dhcp_option>
 801f99c:	4606      	mov	r6, r0
 801f99e:	9003      	str	r0, [sp, #12]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9a0:	2e43      	cmp	r6, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801f9a2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9a6:	d80c      	bhi.n	801f9c2 <dhcp_coarse_tmr+0xea>
  options[options_out_len++] = value;
 801f9a8:	1c73      	adds	r3, r6, #1
 801f9aa:	f808 a006 	strb.w	sl, [r8, r6]
 801f9ae:	b29e      	uxth	r6, r3
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f9b0:	4b2b      	ldr	r3, [pc, #172]	; (801fa60 <dhcp_coarse_tmr+0x188>)
 801f9b2:	429f      	cmp	r7, r3
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801f9b4:	f8ad 6016 	strh.w	r6, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801f9b8:	d01c      	beq.n	801f9f4 <dhcp_coarse_tmr+0x11c>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801f9ba:	2e43      	cmp	r6, #67	; 0x43
 801f9bc:	f817 ab01 	ldrb.w	sl, [r7], #1
 801f9c0:	d9f2      	bls.n	801f9a8 <dhcp_coarse_tmr+0xd0>
 801f9c2:	4b28      	ldr	r3, [pc, #160]	; (801fa64 <dhcp_coarse_tmr+0x18c>)
 801f9c4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 801f9c8:	4659      	mov	r1, fp
 801f9ca:	4827      	ldr	r0, [pc, #156]	; (801fa68 <dhcp_coarse_tmr+0x190>)
 801f9cc:	f003 fb8a 	bl	80230e4 <iprintf>
 801f9d0:	e7ea      	b.n	801f9a8 <dhcp_coarse_tmr+0xd0>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801f9d2:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 801f9d6:	2a01      	cmp	r2, #1
 801f9d8:	d001      	beq.n	801f9de <dhcp_coarse_tmr+0x106>
 801f9da:	2b0a      	cmp	r3, #10
 801f9dc:	d19c      	bne.n	801f918 <dhcp_coarse_tmr+0x40>
    dhcp_renew(netif);
 801f9de:	4628      	mov	r0, r5
 801f9e0:	f7ff fe28 	bl	801f634 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801f9e4:	89a3      	ldrh	r3, [r4, #12]
 801f9e6:	8a62      	ldrh	r2, [r4, #18]
 801f9e8:	1a9b      	subs	r3, r3, r2
 801f9ea:	2b01      	cmp	r3, #1
 801f9ec:	dd94      	ble.n	801f918 <dhcp_coarse_tmr+0x40>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801f9ee:	105b      	asrs	r3, r3, #1
 801f9f0:	81e3      	strh	r3, [r4, #14]
 801f9f2:	e791      	b.n	801f918 <dhcp_coarse_tmr+0x40>
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801f9f4:	9803      	ldr	r0, [sp, #12]
 801f9f6:	4641      	mov	r1, r8
 801f9f8:	464a      	mov	r2, r9
 801f9fa:	3004      	adds	r0, #4
 801f9fc:	b280      	uxth	r0, r0
 801f9fe:	f7fe fea1 	bl	801e744 <dhcp_option_trailer>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801fa02:	4a1a      	ldr	r2, [pc, #104]	; (801fa6c <dhcp_coarse_tmr+0x194>)
 801fa04:	9500      	str	r5, [sp, #0]
 801fa06:	2343      	movs	r3, #67	; 0x43
 801fa08:	6810      	ldr	r0, [r2, #0]
 801fa0a:	4649      	mov	r1, r9
 801fa0c:	4a18      	ldr	r2, [pc, #96]	; (801fa70 <dhcp_coarse_tmr+0x198>)
 801fa0e:	f7fe fc35 	bl	801e27c <udp_sendto_if>
    pbuf_free(p_out);
 801fa12:	4648      	mov	r0, r9
 801fa14:	f7f9 fa4e 	bl	8018eb4 <pbuf_free>
  if (dhcp->tries < 255) {
 801fa18:	79a3      	ldrb	r3, [r4, #6]
 801fa1a:	2bff      	cmp	r3, #255	; 0xff
 801fa1c:	d01a      	beq.n	801fa54 <dhcp_coarse_tmr+0x17c>
    dhcp->tries++;
 801fa1e:	3301      	adds	r3, #1
 801fa20:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa22:	2b09      	cmp	r3, #9
    dhcp->tries++;
 801fa24:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801fa26:	d815      	bhi.n	801fa54 <dhcp_coarse_tmr+0x17c>
 801fa28:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 801fa2c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fa30:	4a10      	ldr	r2, [pc, #64]	; (801fa74 <dhcp_coarse_tmr+0x19c>)
 801fa32:	00db      	lsls	r3, r3, #3
 801fa34:	b29b      	uxth	r3, r3
 801fa36:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801fa3a:	fba2 2303 	umull	r2, r3, r2, r3
 801fa3e:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801fa40:	8aa2      	ldrh	r2, [r4, #20]
 801fa42:	8a61      	ldrh	r1, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801fa44:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801fa46:	1a53      	subs	r3, r2, r1
 801fa48:	2b01      	cmp	r3, #1
 801fa4a:	f77f af65 	ble.w	801f918 <dhcp_coarse_tmr+0x40>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801fa4e:	105b      	asrs	r3, r3, #1
 801fa50:	8223      	strh	r3, [r4, #16]
 801fa52:	e761      	b.n	801f918 <dhcp_coarse_tmr+0x40>
  options[options_out_len++] = value;
 801fa54:	2314      	movs	r3, #20
 801fa56:	e7f3      	b.n	801fa40 <dhcp_coarse_tmr+0x168>
 801fa58:	2002e380 	.word	0x2002e380
 801fa5c:	0804254d 	.word	0x0804254d
 801fa60:	08042550 	.word	0x08042550
 801fa64:	080421d4 	.word	0x080421d4
 801fa68:	08029ba0 	.word	0x08029ba0
 801fa6c:	2001aa7c 	.word	0x2001aa7c
 801fa70:	0804288c 	.word	0x0804288c
 801fa74:	10624dd3 	.word	0x10624dd3
 801fa78:	08042348 	.word	0x08042348

0801fa7c <dhcp_fine_tmr>:
{
 801fa7c:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 801fa7e:	4b21      	ldr	r3, [pc, #132]	; (801fb04 <dhcp_fine_tmr+0x88>)
 801fa80:	681c      	ldr	r4, [r3, #0]
 801fa82:	b1fc      	cbz	r4, 801fac4 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 801fa84:	2500      	movs	r5, #0
 801fa86:	e003      	b.n	801fa90 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 801fa88:	3a01      	subs	r2, #1
 801fa8a:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 801fa8c:	6824      	ldr	r4, [r4, #0]
 801fa8e:	b1cc      	cbz	r4, 801fac4 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801fa90:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	d0fa      	beq.n	801fa8c <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 801fa96:	891a      	ldrh	r2, [r3, #8]
 801fa98:	2a01      	cmp	r2, #1
 801fa9a:	d8f5      	bhi.n	801fa88 <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 801fa9c:	d1f6      	bne.n	801fa8c <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801fa9e:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 801faa0:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 801faa2:	2a0c      	cmp	r2, #12
 801faa4:	d016      	beq.n	801fad4 <dhcp_fine_tmr+0x58>
 801faa6:	2a06      	cmp	r2, #6
 801faa8:	d014      	beq.n	801fad4 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801faaa:	2a01      	cmp	r2, #1
 801faac:	d016      	beq.n	801fadc <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801faae:	2a08      	cmp	r2, #8
 801fab0:	d009      	beq.n	801fac6 <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801fab2:	2a03      	cmp	r2, #3
 801fab4:	d1ea      	bne.n	801fa8c <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 801fab6:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 801fab8:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 801faba:	2b01      	cmp	r3, #1
 801fabc:	d91e      	bls.n	801fafc <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 801fabe:	f7fe ffd3 	bl	801ea68 <dhcp_discover>
 801fac2:	e7e3      	b.n	801fa8c <dhcp_fine_tmr+0x10>
}
 801fac4:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 801fac6:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 801fac8:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 801faca:	2b01      	cmp	r3, #1
 801facc:	d913      	bls.n	801faf6 <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 801face:	f7ff f875 	bl	801ebbc <dhcp_bind>
 801fad2:	e7db      	b.n	801fa8c <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 801fad4:	4620      	mov	r0, r4
 801fad6:	f7fe ffc7 	bl	801ea68 <dhcp_discover>
 801fada:	e7d7      	b.n	801fa8c <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 801fadc:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 801fade:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 801fae0:	2b05      	cmp	r3, #5
 801fae2:	d802      	bhi.n	801faea <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 801fae4:	f7fe feee 	bl	801e8c4 <dhcp_select>
 801fae8:	e7d0      	b.n	801fa8c <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 801faea:	f7ff fe35 	bl	801f758 <dhcp_release_and_stop>
      dhcp_start(netif);
 801faee:	4620      	mov	r0, r4
 801faf0:	f7ff fe96 	bl	801f820 <dhcp_start>
 801faf4:	e7ca      	b.n	801fa8c <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 801faf6:	f7ff f849 	bl	801eb8c <dhcp_check>
 801fafa:	e7c7      	b.n	801fa8c <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 801fafc:	f7fe fe3e 	bl	801e77c <dhcp_reboot>
 801fb00:	e7c4      	b.n	801fa8c <dhcp_fine_tmr+0x10>
 801fb02:	bf00      	nop
 801fb04:	2002e380 	.word	0x2002e380

0801fb08 <free_etharp_q>:
 */
static void
free_etharp_q(struct etharp_q_entry *q)
{
  struct etharp_q_entry *r;
  LWIP_ASSERT("q != NULL", q != NULL);
 801fb08:	b320      	cbz	r0, 801fb54 <free_etharp_q+0x4c>
{
 801fb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fb0e:	4604      	mov	r4, r0
  while (q) {
    r = q;
    q = q->next;
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801fb10:	f8df 8054 	ldr.w	r8, [pc, #84]	; 801fb68 <free_etharp_q+0x60>
 801fb14:	4f12      	ldr	r7, [pc, #72]	; (801fb60 <free_etharp_q+0x58>)
 801fb16:	4e13      	ldr	r6, [pc, #76]	; (801fb64 <free_etharp_q+0x5c>)
 801fb18:	e006      	b.n	801fb28 <free_etharp_q+0x20>
    pbuf_free(r->p);
 801fb1a:	f7f9 f9cb 	bl	8018eb4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801fb1e:	4629      	mov	r1, r5
 801fb20:	200b      	movs	r0, #11
 801fb22:	f7f8 fef7 	bl	8018914 <memp_free>
  while (q) {
 801fb26:	b19c      	cbz	r4, 801fb50 <free_etharp_q+0x48>
    q = q->next;
 801fb28:	4625      	mov	r5, r4
 801fb2a:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 801fb2c:	6868      	ldr	r0, [r5, #4]
 801fb2e:	2800      	cmp	r0, #0
 801fb30:	d1f3      	bne.n	801fb1a <free_etharp_q+0x12>
 801fb32:	4639      	mov	r1, r7
 801fb34:	4643      	mov	r3, r8
 801fb36:	229a      	movs	r2, #154	; 0x9a
 801fb38:	4630      	mov	r0, r6
 801fb3a:	f003 fad3 	bl	80230e4 <iprintf>
 801fb3e:	6868      	ldr	r0, [r5, #4]
    pbuf_free(r->p);
 801fb40:	f7f9 f9b8 	bl	8018eb4 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 801fb44:	4629      	mov	r1, r5
 801fb46:	200b      	movs	r0, #11
 801fb48:	f7f8 fee4 	bl	8018914 <memp_free>
  while (q) {
 801fb4c:	2c00      	cmp	r4, #0
 801fb4e:	d1eb      	bne.n	801fb28 <free_etharp_q+0x20>
  }
}
 801fb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 801fb54:	4b04      	ldr	r3, [pc, #16]	; (801fb68 <free_etharp_q+0x60>)
 801fb56:	2296      	movs	r2, #150	; 0x96
 801fb58:	4904      	ldr	r1, [pc, #16]	; (801fb6c <free_etharp_q+0x64>)
 801fb5a:	4802      	ldr	r0, [pc, #8]	; (801fb64 <free_etharp_q+0x5c>)
 801fb5c:	f003 bac2 	b.w	80230e4 <iprintf>
 801fb60:	08042594 	.word	0x08042594
 801fb64:	08029ba0 	.word	0x08029ba0
 801fb68:	08042550 	.word	0x08042550
 801fb6c:	08042588 	.word	0x08042588

0801fb70 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801fb70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb74:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801fb76:	f04f 0920 	mov.w	r9, #32
{
 801fb7a:	b085      	sub	sp, #20
 801fb7c:	f8df 8158 	ldr.w	r8, [pc, #344]	; 801fcd8 <etharp_find_entry+0x168>
 801fb80:	4605      	mov	r5, r0
 801fb82:	4617      	mov	r7, r2
 801fb84:	9103      	str	r1, [sp, #12]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801fb86:	469e      	mov	lr, r3
 801fb88:	4641      	mov	r1, r8
 801fb8a:	469b      	mov	fp, r3
  s16_t empty = ARP_TABLE_SIZE;
 801fb8c:	464c      	mov	r4, r9
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801fb8e:	46cc      	mov	ip, r9
 801fb90:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801fb94:	e004      	b.n	801fba0 <etharp_find_entry+0x30>
 801fb96:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fb98:	3301      	adds	r3, #1
 801fb9a:	3118      	adds	r1, #24
 801fb9c:	2b20      	cmp	r3, #32
 801fb9e:	d016      	beq.n	801fbce <etharp_find_entry+0x5e>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fba0:	2c20      	cmp	r4, #32
 801fba2:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 801fba4:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fba6:	d13b      	bne.n	801fc20 <etharp_find_entry+0xb0>
 801fba8:	2800      	cmp	r0, #0
 801fbaa:	d0f4      	beq.n	801fb96 <etharp_find_entry+0x26>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801fbac:	b125      	cbz	r5, 801fbb8 <etharp_find_entry+0x48>
 801fbae:	682e      	ldr	r6, [r5, #0]
 801fbb0:	46b2      	mov	sl, r6
 801fbb2:	684e      	ldr	r6, [r1, #4]
 801fbb4:	45b2      	cmp	sl, r6
 801fbb6:	d03e      	beq.n	801fc36 <etharp_find_entry+0xc6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801fbb8:	2801      	cmp	r0, #1
 801fbba:	d034      	beq.n	801fc26 <etharp_find_entry+0xb6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801fbbc:	8a48      	ldrh	r0, [r1, #18]
 801fbbe:	4570      	cmp	r0, lr
 801fbc0:	d3ea      	bcc.n	801fb98 <etharp_find_entry+0x28>
 801fbc2:	3301      	adds	r3, #1
 801fbc4:	4686      	mov	lr, r0
 801fbc6:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fbc8:	3118      	adds	r1, #24
 801fbca:	2b20      	cmp	r3, #32
 801fbcc:	d1e8      	bne.n	801fba0 <etharp_find_entry+0x30>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801fbce:	9b03      	ldr	r3, [sp, #12]
 801fbd0:	f8dd a004 	ldr.w	sl, [sp, #4]
 801fbd4:	2b01      	cmp	r3, #1
 801fbd6:	d173      	bne.n	801fcc0 <etharp_find_entry+0x150>
 801fbd8:	2c20      	cmp	r4, #32
 801fbda:	d03c      	beq.n	801fc56 <etharp_find_entry+0xe6>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801fbdc:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 801fbe0:	46a1      	mov	r9, r4
 801fbe2:	0066      	lsls	r6, r4, #1
 801fbe4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801fbe8:	7d1b      	ldrb	r3, [r3, #20]
 801fbea:	b133      	cbz	r3, 801fbfa <etharp_find_entry+0x8a>
 801fbec:	4b36      	ldr	r3, [pc, #216]	; (801fcc8 <etharp_find_entry+0x158>)
 801fbee:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801fbf2:	4936      	ldr	r1, [pc, #216]	; (801fccc <etharp_find_entry+0x15c>)
 801fbf4:	4836      	ldr	r0, [pc, #216]	; (801fcd0 <etharp_find_entry+0x160>)
 801fbf6:	f003 fa75 	bl	80230e4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801fbfa:	b12d      	cbz	r5, 801fc08 <etharp_find_entry+0x98>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801fbfc:	eb06 0309 	add.w	r3, r6, r9
 801fc00:	682a      	ldr	r2, [r5, #0]
 801fc02:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801fc06:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 801fc08:	444e      	add	r6, r9
 801fc0a:	2300      	movs	r3, #0
 801fc0c:	eb08 08c6 	add.w	r8, r8, r6, lsl #3
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801fc10:	f8c8 7008 	str.w	r7, [r8, #8]
  arp_table[i].ctime = 0;
 801fc14:	f8a8 3012 	strh.w	r3, [r8, #18]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 801fc18:	4620      	mov	r0, r4
 801fc1a:	b005      	add	sp, #20
 801fc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 801fc20:	2800      	cmp	r0, #0
 801fc22:	d0b9      	beq.n	801fb98 <etharp_find_entry+0x28>
 801fc24:	e7c2      	b.n	801fbac <etharp_find_entry+0x3c>
        if (arp_table[i].q != NULL) {
 801fc26:	6808      	ldr	r0, [r1, #0]
 801fc28:	b170      	cbz	r0, 801fc48 <etharp_find_entry+0xd8>
          if (arp_table[i].ctime >= age_queue) {
 801fc2a:	8a48      	ldrh	r0, [r1, #18]
 801fc2c:	4558      	cmp	r0, fp
 801fc2e:	d3b3      	bcc.n	801fb98 <etharp_find_entry+0x28>
 801fc30:	4683      	mov	fp, r0
 801fc32:	4691      	mov	r9, r2
 801fc34:	e7b0      	b.n	801fb98 <etharp_find_entry+0x28>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801fc36:	b117      	cbz	r7, 801fc3e <etharp_find_entry+0xce>
 801fc38:	688e      	ldr	r6, [r1, #8]
 801fc3a:	42be      	cmp	r6, r7
 801fc3c:	d1bc      	bne.n	801fbb8 <etharp_find_entry+0x48>
 801fc3e:	4614      	mov	r4, r2
}
 801fc40:	4620      	mov	r0, r4
 801fc42:	b005      	add	sp, #20
 801fc44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 801fc48:	8a48      	ldrh	r0, [r1, #18]
 801fc4a:	9e02      	ldr	r6, [sp, #8]
 801fc4c:	42b0      	cmp	r0, r6
 801fc4e:	d3a3      	bcc.n	801fb98 <etharp_find_entry+0x28>
 801fc50:	e9cd 2001 	strd	r2, r0, [sp, #4]
 801fc54:	e7a0      	b.n	801fb98 <etharp_find_entry+0x28>
    if (old_stable < ARP_TABLE_SIZE) {
 801fc56:	f1bc 0f20 	cmp.w	ip, #32
 801fc5a:	d024      	beq.n	801fca6 <etharp_find_entry+0x136>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801fc5c:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 801fc60:	46e1      	mov	r9, ip
 801fc62:	ea4f 064c 	mov.w	r6, ip, lsl #1
 801fc66:	f858 3033 	ldr.w	r3, [r8, r3, lsl #3]
 801fc6a:	b33b      	cbz	r3, 801fcbc <etharp_find_entry+0x14c>
 801fc6c:	4b16      	ldr	r3, [pc, #88]	; (801fcc8 <etharp_find_entry+0x158>)
 801fc6e:	f240 126d 	movw	r2, #365	; 0x16d
 801fc72:	4918      	ldr	r1, [pc, #96]	; (801fcd4 <etharp_find_entry+0x164>)
 801fc74:	4664      	mov	r4, ip
 801fc76:	4816      	ldr	r0, [pc, #88]	; (801fcd0 <etharp_find_entry+0x160>)
 801fc78:	f003 fa34 	bl	80230e4 <iprintf>
  if (arp_table[i].q != NULL) {
 801fc7c:	eb09 0a49 	add.w	sl, r9, r9, lsl #1
 801fc80:	ea4f 0649 	mov.w	r6, r9, lsl #1
 801fc84:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 801fc88:	f858 000a 	ldr.w	r0, [r8, sl]
 801fc8c:	b120      	cbz	r0, 801fc98 <etharp_find_entry+0x128>
    free_etharp_q(arp_table[i].q);
 801fc8e:	f7ff ff3b 	bl	801fb08 <free_etharp_q>
    arp_table[i].q = NULL;
 801fc92:	2300      	movs	r3, #0
 801fc94:	f848 300a 	str.w	r3, [r8, sl]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801fc98:	eb06 0309 	add.w	r3, r6, r9
 801fc9c:	2200      	movs	r2, #0
 801fc9e:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 801fca2:	751a      	strb	r2, [r3, #20]
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801fca4:	e7a9      	b.n	801fbfa <etharp_find_entry+0x8a>
    } else if (old_pending < ARP_TABLE_SIZE) {
 801fca6:	f1ba 0f20 	cmp.w	sl, #32
 801fcaa:	d104      	bne.n	801fcb6 <etharp_find_entry+0x146>
    } else if (old_queue < ARP_TABLE_SIZE) {
 801fcac:	f1b9 0f20 	cmp.w	r9, #32
 801fcb0:	d006      	beq.n	801fcc0 <etharp_find_entry+0x150>
 801fcb2:	464c      	mov	r4, r9
 801fcb4:	e7e2      	b.n	801fc7c <etharp_find_entry+0x10c>
 801fcb6:	4654      	mov	r4, sl
    } else if (old_pending < ARP_TABLE_SIZE) {
 801fcb8:	46d1      	mov	r9, sl
 801fcba:	e7df      	b.n	801fc7c <etharp_find_entry+0x10c>
 801fcbc:	4664      	mov	r4, ip
 801fcbe:	e7eb      	b.n	801fc98 <etharp_find_entry+0x128>
    return (s16_t)ERR_MEM;
 801fcc0:	f04f 34ff 	mov.w	r4, #4294967295
 801fcc4:	e7a8      	b.n	801fc18 <etharp_find_entry+0xa8>
 801fcc6:	bf00      	nop
 801fcc8:	08042550 	.word	0x08042550
 801fccc:	080425bc 	.word	0x080425bc
 801fcd0:	08029ba0 	.word	0x08029ba0
 801fcd4:	080425a4 	.word	0x080425a4
 801fcd8:	2001aa88 	.word	0x2001aa88

0801fcdc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801fcdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fce0:	b082      	sub	sp, #8
 801fce2:	4688      	mov	r8, r1
 801fce4:	4691      	mov	r9, r2
 801fce6:	461f      	mov	r7, r3
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fce8:	4606      	mov	r6, r0
{
 801fcea:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 801fcee:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fcf2:	2800      	cmp	r0, #0
 801fcf4:	d05a      	beq.n	801fdac <etharp_raw+0xd0>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801fcf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fcfa:	211c      	movs	r1, #28
 801fcfc:	200e      	movs	r0, #14
 801fcfe:	f7f9 f947 	bl	8018f90 <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801fd02:	4605      	mov	r5, r0
 801fd04:	2800      	cmp	r0, #0
 801fd06:	d059      	beq.n	801fdbc <etharp_raw+0xe0>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801fd08:	8943      	ldrh	r3, [r0, #10]
 801fd0a:	2b1b      	cmp	r3, #27
 801fd0c:	d946      	bls.n	801fd9c <etharp_raw+0xc0>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801fd0e:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 801fd10:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 801fd12:	f7f7 fa7b 	bl	801720c <lwip_htons>
 801fd16:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801fd18:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 801fd1c:	2b06      	cmp	r3, #6
 801fd1e:	d006      	beq.n	801fd2e <etharp_raw+0x52>
 801fd20:	4b2a      	ldr	r3, [pc, #168]	; (801fdcc <etharp_raw+0xf0>)
 801fd22:	f240 4269 	movw	r2, #1129	; 0x469
 801fd26:	492a      	ldr	r1, [pc, #168]	; (801fdd0 <etharp_raw+0xf4>)
 801fd28:	482a      	ldr	r0, [pc, #168]	; (801fdd4 <etharp_raw+0xf8>)
 801fd2a:	f003 f9db 	bl	80230e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fd2e:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd30:	4642      	mov	r2, r8
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801fd32:	f04f 0e08 	mov.w	lr, #8
  hdr->protolen = sizeof(ip4_addr_t);
 801fd36:	f04f 0c04 	mov.w	ip, #4
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fd3a:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd3c:	4630      	mov	r0, r6
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fd3e:	88b9      	ldrh	r1, [r7, #4]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801fd40:	2600      	movs	r6, #0
 801fd42:	f04f 0801 	mov.w	r8, #1
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd46:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801fd48:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801fd4a:	f8da 1000 	ldr.w	r1, [sl]
 801fd4e:	f8c4 1012 	str.w	r1, [r4, #18]
  hdr->hwlen = ETH_HWADDR_LEN;
 801fd52:	2106      	movs	r1, #6
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801fd54:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 801fd58:	82e7      	strh	r7, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801fd5a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fd5c:	683f      	ldr	r7, [r7, #0]
 801fd5e:	f8c4 700e 	str.w	r7, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801fd62:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801fd64:	683f      	ldr	r7, [r7, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801fd66:	f884 e002 	strb.w	lr, [r4, #2]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801fd6a:	61a7      	str	r7, [r4, #24]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd6c:	f640 0706 	movw	r7, #2054	; 0x806
  hdr->hwlen = ETH_HWADDR_LEN;
 801fd70:	7121      	strb	r1, [r4, #4]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd72:	4629      	mov	r1, r5
  hdr->protolen = sizeof(ip4_addr_t);
 801fd74:	f884 c005 	strb.w	ip, [r4, #5]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801fd78:	7026      	strb	r6, [r4, #0]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801fd7a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801fd7c:	f884 8001 	strb.w	r8, [r4, #1]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801fd80:	9700      	str	r7, [sp, #0]
 801fd82:	f001 fd3d 	bl	8021800 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
 801fd86:	4a14      	ldr	r2, [pc, #80]	; (801fdd8 <etharp_raw+0xfc>)
  /* free ARP query packet */
  pbuf_free(p);
 801fd88:	4628      	mov	r0, r5
  ETHARP_STATS_INC(etharp.xmit);
 801fd8a:	8b13      	ldrh	r3, [r2, #24]
 801fd8c:	4443      	add	r3, r8
 801fd8e:	8313      	strh	r3, [r2, #24]
  pbuf_free(p);
 801fd90:	f7f9 f890 	bl	8018eb4 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 801fd94:	4630      	mov	r0, r6
}
 801fd96:	b002      	add	sp, #8
 801fd98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801fd9c:	4b0b      	ldr	r3, [pc, #44]	; (801fdcc <etharp_raw+0xf0>)
 801fd9e:	f240 4262 	movw	r2, #1122	; 0x462
 801fda2:	490e      	ldr	r1, [pc, #56]	; (801fddc <etharp_raw+0x100>)
 801fda4:	480b      	ldr	r0, [pc, #44]	; (801fdd4 <etharp_raw+0xf8>)
 801fda6:	f003 f99d 	bl	80230e4 <iprintf>
 801fdaa:	e7b0      	b.n	801fd0e <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801fdac:	4b07      	ldr	r3, [pc, #28]	; (801fdcc <etharp_raw+0xf0>)
 801fdae:	f240 4257 	movw	r2, #1111	; 0x457
 801fdb2:	490b      	ldr	r1, [pc, #44]	; (801fde0 <etharp_raw+0x104>)
 801fdb4:	4807      	ldr	r0, [pc, #28]	; (801fdd4 <etharp_raw+0xf8>)
 801fdb6:	f003 f995 	bl	80230e4 <iprintf>
 801fdba:	e79c      	b.n	801fcf6 <etharp_raw+0x1a>
    ETHARP_STATS_INC(etharp.memerr);
 801fdbc:	4a06      	ldr	r2, [pc, #24]	; (801fdd8 <etharp_raw+0xfc>)
    return ERR_MEM;
 801fdbe:	f04f 30ff 	mov.w	r0, #4294967295
    ETHARP_STATS_INC(etharp.memerr);
 801fdc2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 801fdc4:	3301      	adds	r3, #1
 801fdc6:	8493      	strh	r3, [r2, #36]	; 0x24
    return ERR_MEM;
 801fdc8:	e7e5      	b.n	801fd96 <etharp_raw+0xba>
 801fdca:	bf00      	nop
 801fdcc:	08042550 	.word	0x08042550
 801fdd0:	0804261c 	.word	0x0804261c
 801fdd4:	08029ba0 	.word	0x08029ba0
 801fdd8:	2002e38c 	.word	0x2002e38c
 801fddc:	080425e8 	.word	0x080425e8
 801fde0:	08029b90 	.word	0x08029b90

0801fde4 <etharp_output_to_arp_index>:
{
 801fde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801fde8:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801fee0 <etharp_output_to_arp_index+0xfc>
 801fdec:	eb02 0542 	add.w	r5, r2, r2, lsl #1
{
 801fdf0:	b084      	sub	sp, #16
 801fdf2:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801fdf4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
{
 801fdf8:	4606      	mov	r6, r0
 801fdfa:	460f      	mov	r7, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801fdfc:	ea4f 0942 	mov.w	r9, r2, lsl #1
 801fe00:	7d2b      	ldrb	r3, [r5, #20]
 801fe02:	2b01      	cmp	r3, #1
 801fe04:	d93b      	bls.n	801fe7e <etharp_output_to_arp_index+0x9a>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801fe06:	2b02      	cmp	r3, #2
 801fe08:	d011      	beq.n	801fe2e <etharp_output_to_arp_index+0x4a>
 801fe0a:	2218      	movs	r2, #24
 801fe0c:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801fe10:	fb02 8404 	mla	r4, r2, r4, r8
 801fe14:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801fe16:	f44f 6500 	mov.w	r5, #2048	; 0x800
 801fe1a:	4623      	mov	r3, r4
 801fe1c:	4652      	mov	r2, sl
 801fe1e:	4639      	mov	r1, r7
 801fe20:	4630      	mov	r0, r6
 801fe22:	9500      	str	r5, [sp, #0]
 801fe24:	f001 fcec 	bl	8021800 <ethernet_output>
}
 801fe28:	b004      	add	sp, #16
 801fe2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801fe2e:	44a1      	add	r9, r4
 801fe30:	eb08 09c9 	add.w	r9, r8, r9, lsl #3
 801fe34:	f8b9 3012 	ldrh.w	r3, [r9, #18]
 801fe38:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801fe3c:	d828      	bhi.n	801fe90 <etharp_output_to_arp_index+0xac>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801fe3e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801fe42:	d3e2      	bcc.n	801fe0a <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fe44:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fe48:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801fe4c:	2101      	movs	r1, #1
 801fe4e:	4a1f      	ldr	r2, [pc, #124]	; (801fecc <etharp_output_to_arp_index+0xe8>)
 801fe50:	00e5      	lsls	r5, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801fe52:	1d30      	adds	r0, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fe54:	9103      	str	r1, [sp, #12]
 801fe56:	4653      	mov	r3, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fe58:	f105 040c 	add.w	r4, r5, #12
 801fe5c:	3504      	adds	r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fe5e:	9201      	str	r2, [sp, #4]
 801fe60:	4651      	mov	r1, sl
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fe62:	4444      	add	r4, r8
 801fe64:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fe66:	9000      	str	r0, [sp, #0]
 801fe68:	4630      	mov	r0, r6
 801fe6a:	4622      	mov	r2, r4
 801fe6c:	9502      	str	r5, [sp, #8]
 801fe6e:	f7ff ff35 	bl	801fcdc <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801fe72:	2800      	cmp	r0, #0
 801fe74:	d1cf      	bne.n	801fe16 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fe76:	2303      	movs	r3, #3
 801fe78:	f889 3014 	strb.w	r3, [r9, #20]
 801fe7c:	e7cb      	b.n	801fe16 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801fe7e:	4b14      	ldr	r3, [pc, #80]	; (801fed0 <etharp_output_to_arp_index+0xec>)
 801fe80:	f240 22ee 	movw	r2, #750	; 0x2ee
 801fe84:	4913      	ldr	r1, [pc, #76]	; (801fed4 <etharp_output_to_arp_index+0xf0>)
 801fe86:	4814      	ldr	r0, [pc, #80]	; (801fed8 <etharp_output_to_arp_index+0xf4>)
 801fe88:	f003 f92c 	bl	80230e4 <iprintf>
 801fe8c:	7d2b      	ldrb	r3, [r5, #20]
 801fe8e:	e7ba      	b.n	801fe06 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801fe90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fe94:	f106 0a2e 	add.w	sl, r6, #46	; 0x2e
 801fe98:	2001      	movs	r0, #1
 801fe9a:	490c      	ldr	r1, [pc, #48]	; (801fecc <etharp_output_to_arp_index+0xe8>)
 801fe9c:	00e4      	lsls	r4, r4, #3
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801fe9e:	1d32      	adds	r2, r6, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fea0:	9003      	str	r0, [sp, #12]
 801fea2:	4653      	mov	r3, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801fea4:	1d25      	adds	r5, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801fea6:	9101      	str	r1, [sp, #4]
 801fea8:	9200      	str	r2, [sp, #0]
 801feaa:	4651      	mov	r1, sl
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801feac:	4445      	add	r5, r8
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801feae:	4a0b      	ldr	r2, [pc, #44]	; (801fedc <etharp_output_to_arp_index+0xf8>)
 801feb0:	4630      	mov	r0, r6
 801feb2:	340c      	adds	r4, #12
 801feb4:	9502      	str	r5, [sp, #8]
 801feb6:	f7ff ff11 	bl	801fcdc <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801feba:	b108      	cbz	r0, 801fec0 <etharp_output_to_arp_index+0xdc>
 801febc:	4444      	add	r4, r8
 801febe:	e7aa      	b.n	801fe16 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801fec0:	2303      	movs	r3, #3
 801fec2:	4444      	add	r4, r8
 801fec4:	f889 3014 	strb.w	r3, [r9, #20]
 801fec8:	e7a5      	b.n	801fe16 <etharp_output_to_arp_index+0x32>
 801feca:	bf00      	nop
 801fecc:	08042a88 	.word	0x08042a88
 801fed0:	08042550 	.word	0x08042550
 801fed4:	08042660 	.word	0x08042660
 801fed8:	08029ba0 	.word	0x08029ba0
 801fedc:	08042a80 	.word	0x08042a80
 801fee0:	2001aa88 	.word	0x2001aa88

0801fee4 <etharp_tmr>:
{
 801fee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fee8:	4c21      	ldr	r4, [pc, #132]	; (801ff70 <etharp_tmr+0x8c>)
 801feea:	b084      	sub	sp, #16
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801feec:	2600      	movs	r6, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801feee:	f8df 8088 	ldr.w	r8, [pc, #136]	; 801ff78 <etharp_tmr+0x94>
 801fef2:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801fef6:	4f1f      	ldr	r7, [pc, #124]	; (801ff74 <etharp_tmr+0x90>)
 801fef8:	e00c      	b.n	801ff14 <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fefa:	2901      	cmp	r1, #1
 801fefc:	d101      	bne.n	801ff02 <etharp_tmr+0x1e>
 801fefe:	2b04      	cmp	r3, #4
 801ff00:	d812      	bhi.n	801ff28 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ff02:	2903      	cmp	r1, #3
 801ff04:	d01e      	beq.n	801ff44 <etharp_tmr+0x60>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ff06:	2904      	cmp	r1, #4
 801ff08:	d01f      	beq.n	801ff4a <etharp_tmr+0x66>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ff0a:	2901      	cmp	r1, #1
 801ff0c:	d020      	beq.n	801ff50 <etharp_tmr+0x6c>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff0e:	3418      	adds	r4, #24
 801ff10:	42ac      	cmp	r4, r5
 801ff12:	d014      	beq.n	801ff3e <etharp_tmr+0x5a>
    u8_t state = arp_table[i].state;
 801ff14:	7c21      	ldrb	r1, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 801ff16:	2900      	cmp	r1, #0
 801ff18:	d0f9      	beq.n	801ff0e <etharp_tmr+0x2a>
      arp_table[i].ctime++;
 801ff1a:	89e3      	ldrh	r3, [r4, #14]
 801ff1c:	3301      	adds	r3, #1
 801ff1e:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ff20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 801ff24:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ff26:	d3e8      	bcc.n	801fefa <etharp_tmr+0x16>
  if (arp_table[i].q != NULL) {
 801ff28:	f854 0c04 	ldr.w	r0, [r4, #-4]
 801ff2c:	b118      	cbz	r0, 801ff36 <etharp_tmr+0x52>
    free_etharp_q(arp_table[i].q);
 801ff2e:	f7ff fdeb 	bl	801fb08 <free_etharp_q>
    arp_table[i].q = NULL;
 801ff32:	f844 6c04 	str.w	r6, [r4, #-4]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ff36:	7426      	strb	r6, [r4, #16]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff38:	3418      	adds	r4, #24
 801ff3a:	42ac      	cmp	r4, r5
 801ff3c:	d1ea      	bne.n	801ff14 <etharp_tmr+0x30>
}
 801ff3e:	b004      	add	sp, #16
 801ff40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ff44:	2304      	movs	r3, #4
 801ff46:	7423      	strb	r3, [r4, #16]
 801ff48:	e7e1      	b.n	801ff0e <etharp_tmr+0x2a>
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ff4a:	2302      	movs	r3, #2
 801ff4c:	7423      	strb	r3, [r4, #16]
 801ff4e:	e7de      	b.n	801ff0e <etharp_tmr+0x2a>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ff50:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ff52:	463a      	mov	r2, r7
 801ff54:	9103      	str	r1, [sp, #12]
 801ff56:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ff5a:	f100 0c04 	add.w	ip, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ff5e:	4619      	mov	r1, r3
 801ff60:	f8cd c000 	str.w	ip, [sp]
 801ff64:	e9cd 8401 	strd	r8, r4, [sp, #4]
 801ff68:	f7ff feb8 	bl	801fcdc <etharp_raw>
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ff6c:	e7cf      	b.n	801ff0e <etharp_tmr+0x2a>
 801ff6e:	bf00      	nop
 801ff70:	2001aa8c 	.word	0x2001aa8c
 801ff74:	08042a80 	.word	0x08042a80
 801ff78:	08042a88 	.word	0x08042a88

0801ff7c <etharp_cleanup_netif>:
{
 801ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ff7e:	4c0c      	ldr	r4, [pc, #48]	; (801ffb0 <etharp_cleanup_netif+0x34>)
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ff80:	2700      	movs	r7, #0
{
 801ff82:	4606      	mov	r6, r0
 801ff84:	f504 7540 	add.w	r5, r4, #768	; 0x300
 801ff88:	e002      	b.n	801ff90 <etharp_cleanup_netif+0x14>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff8a:	3418      	adds	r4, #24
 801ff8c:	42ac      	cmp	r4, r5
 801ff8e:	d00e      	beq.n	801ffae <etharp_cleanup_netif+0x32>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ff90:	7d23      	ldrb	r3, [r4, #20]
 801ff92:	2b00      	cmp	r3, #0
 801ff94:	d0f9      	beq.n	801ff8a <etharp_cleanup_netif+0xe>
 801ff96:	68a3      	ldr	r3, [r4, #8]
 801ff98:	42b3      	cmp	r3, r6
 801ff9a:	d1f6      	bne.n	801ff8a <etharp_cleanup_netif+0xe>
  if (arp_table[i].q != NULL) {
 801ff9c:	6820      	ldr	r0, [r4, #0]
 801ff9e:	b110      	cbz	r0, 801ffa6 <etharp_cleanup_netif+0x2a>
    free_etharp_q(arp_table[i].q);
 801ffa0:	f7ff fdb2 	bl	801fb08 <free_etharp_q>
    arp_table[i].q = NULL;
 801ffa4:	6027      	str	r7, [r4, #0]
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ffa6:	7527      	strb	r7, [r4, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ffa8:	3418      	adds	r4, #24
 801ffaa:	42ac      	cmp	r4, r5
 801ffac:	d1f0      	bne.n	801ff90 <etharp_cleanup_netif+0x14>
}
 801ffae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ffb0:	2001aa88 	.word	0x2001aa88

0801ffb4 <etharp_input>:
{
 801ffb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ffb8:	b089      	sub	sp, #36	; 0x24
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ffba:	2900      	cmp	r1, #0
 801ffbc:	f000 809d 	beq.w	80200fa <etharp_input+0x146>
  hdr = (struct etharp_hdr *)p->payload;
 801ffc0:	6846      	ldr	r6, [r0, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ffc2:	4604      	mov	r4, r0
 801ffc4:	8833      	ldrh	r3, [r6, #0]
 801ffc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ffca:	d102      	bne.n	801ffd2 <etharp_input+0x1e>
 801ffcc:	7933      	ldrb	r3, [r6, #4]
 801ffce:	2b06      	cmp	r3, #6
 801ffd0:	d00c      	beq.n	801ffec <etharp_input+0x38>
    ETHARP_STATS_INC(etharp.proterr);
 801ffd2:	4b5d      	ldr	r3, [pc, #372]	; (8020148 <etharp_input+0x194>)
    pbuf_free(p);
 801ffd4:	4620      	mov	r0, r4
    ETHARP_STATS_INC(etharp.proterr);
 801ffd6:	8d19      	ldrh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ffd8:	8bda      	ldrh	r2, [r3, #30]
    ETHARP_STATS_INC(etharp.proterr);
 801ffda:	3101      	adds	r1, #1
    ETHARP_STATS_INC(etharp.drop);
 801ffdc:	3201      	adds	r2, #1
    ETHARP_STATS_INC(etharp.proterr);
 801ffde:	8519      	strh	r1, [r3, #40]	; 0x28
    ETHARP_STATS_INC(etharp.drop);
 801ffe0:	83da      	strh	r2, [r3, #30]
    pbuf_free(p);
 801ffe2:	f7f8 ff67 	bl	8018eb4 <pbuf_free>
}
 801ffe6:	b009      	add	sp, #36	; 0x24
 801ffe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ffec:	7973      	ldrb	r3, [r6, #5]
 801ffee:	2b04      	cmp	r3, #4
 801fff0:	d1ef      	bne.n	801ffd2 <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801fff2:	8873      	ldrh	r3, [r6, #2]
 801fff4:	2b08      	cmp	r3, #8
 801fff6:	d1ec      	bne.n	801ffd2 <etharp_input+0x1e>
  ETHARP_STATS_INC(etharp.recv);
 801fff8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8020148 <etharp_input+0x194>
 801fffc:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801fffe:	684a      	ldr	r2, [r1, #4]
  ETHARP_STATS_INC(etharp.recv);
 8020000:	f8bb 301a 	ldrh.w	r3, [fp, #26]
 8020004:	3301      	adds	r3, #1
 8020006:	f8ab 301a 	strh.w	r3, [fp, #26]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 802000a:	f8d6 000e 	ldr.w	r0, [r6, #14]
 802000e:	69b3      	ldr	r3, [r6, #24]
 8020010:	9007      	str	r0, [sp, #28]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020012:	2a00      	cmp	r2, #0
 8020014:	d079      	beq.n	802010a <etharp_input+0x156>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020016:	1ad3      	subs	r3, r2, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020018:	f106 0908 	add.w	r9, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 802001c:	fab3 f383 	clz	r3, r3
 8020020:	095b      	lsrs	r3, r3, #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020022:	f1c3 0802 	rsb	r8, r3, #2
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020026:	9305      	str	r3, [sp, #20]
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020028:	fa5f f888 	uxtb.w	r8, r8
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802002c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8020030:	2b06      	cmp	r3, #6
 8020032:	d007      	beq.n	8020044 <etharp_input+0x90>
 8020034:	4b45      	ldr	r3, [pc, #276]	; (802014c <etharp_input+0x198>)
 8020036:	f240 12a9 	movw	r2, #425	; 0x1a9
 802003a:	4945      	ldr	r1, [pc, #276]	; (8020150 <etharp_input+0x19c>)
 802003c:	4845      	ldr	r0, [pc, #276]	; (8020154 <etharp_input+0x1a0>)
 802003e:	f003 f851 	bl	80230e4 <iprintf>
 8020042:	9807      	ldr	r0, [sp, #28]
  if (ip4_addr_isany(ipaddr) ||
 8020044:	2800      	cmp	r0, #0
 8020046:	d048      	beq.n	80200da <etharp_input+0x126>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020048:	4629      	mov	r1, r5
 802004a:	f000 fe25 	bl	8020c98 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 802004e:	4607      	mov	r7, r0
 8020050:	2800      	cmp	r0, #0
 8020052:	d142      	bne.n	80200da <etharp_input+0x126>
      ip4_addr_ismulticast(ipaddr)) {
 8020054:	9b07      	ldr	r3, [sp, #28]
 8020056:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802005a:	2be0      	cmp	r3, #224	; 0xe0
 802005c:	d03d      	beq.n	80200da <etharp_input+0x126>
  i = etharp_find_entry(ipaddr, flags, netif);
 802005e:	4641      	mov	r1, r8
 8020060:	462a      	mov	r2, r5
 8020062:	a807      	add	r0, sp, #28
 8020064:	f7ff fd84 	bl	801fb70 <etharp_find_entry>
  if (i < 0) {
 8020068:	2800      	cmp	r0, #0
 802006a:	db36      	blt.n	80200da <etharp_input+0x126>
    arp_table[i].state = ETHARP_STATE_STABLE;
 802006c:	4a3a      	ldr	r2, [pc, #232]	; (8020158 <etharp_input+0x1a4>)
 802006e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8020072:	f04f 0c02 	mov.w	ip, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020076:	f04f 0e18 	mov.w	lr, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 802007a:	eb02 08c1 	add.w	r8, r2, r1, lsl #3
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802007e:	230c      	movs	r3, #12
    arp_table[i].state = ETHARP_STATE_STABLE;
 8020080:	f888 c014 	strb.w	ip, [r8, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020084:	fb10 330e 	smlabb	r3, r0, lr, r3
  arp_table[i].netif = netif;
 8020088:	f8c8 5008 	str.w	r5, [r8, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802008c:	f8d9 0000 	ldr.w	r0, [r9]
 8020090:	eb02 0c03 	add.w	ip, r2, r3
 8020094:	50d0      	str	r0, [r2, r3]
 8020096:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 802009a:	f8ac 3004 	strh.w	r3, [ip, #4]
  while (arp_table[i].q != NULL) {
 802009e:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 80200a2:	f8a8 7012 	strh.w	r7, [r8, #18]
  while (arp_table[i].q != NULL) {
 80200a6:	b1c1      	cbz	r1, 80200da <etharp_input+0x126>
 80200a8:	f105 0a2e 	add.w	sl, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 80200ac:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 80200ae:	200b      	movs	r0, #11
    p = q->p;
 80200b0:	684f      	ldr	r7, [r1, #4]
    arp_table[i].q = q->next;
 80200b2:	f8c8 3000 	str.w	r3, [r8]
    memp_free(MEMP_ARP_QUEUE, q);
 80200b6:	f7f8 fc2d 	bl	8018914 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80200ba:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80200be:	4639      	mov	r1, r7
 80200c0:	464b      	mov	r3, r9
 80200c2:	4652      	mov	r2, sl
 80200c4:	9000      	str	r0, [sp, #0]
 80200c6:	4628      	mov	r0, r5
 80200c8:	f001 fb9a 	bl	8021800 <ethernet_output>
    pbuf_free(p);
 80200cc:	4638      	mov	r0, r7
 80200ce:	f7f8 fef1 	bl	8018eb4 <pbuf_free>
  while (arp_table[i].q != NULL) {
 80200d2:	f8d8 1000 	ldr.w	r1, [r8]
 80200d6:	2900      	cmp	r1, #0
 80200d8:	d1e8      	bne.n	80200ac <etharp_input+0xf8>
  switch (hdr->opcode) {
 80200da:	88f3      	ldrh	r3, [r6, #6]
 80200dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80200e0:	d019      	beq.n	8020116 <etharp_input+0x162>
 80200e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80200e6:	d029      	beq.n	802013c <etharp_input+0x188>
      ETHARP_STATS_INC(etharp.err);
 80200e8:	f8bb 302c 	ldrh.w	r3, [fp, #44]	; 0x2c
 80200ec:	3301      	adds	r3, #1
 80200ee:	f8ab 302c 	strh.w	r3, [fp, #44]	; 0x2c
  pbuf_free(p);
 80200f2:	4620      	mov	r0, r4
 80200f4:	f7f8 fede 	bl	8018eb4 <pbuf_free>
 80200f8:	e775      	b.n	801ffe6 <etharp_input+0x32>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80200fa:	4b14      	ldr	r3, [pc, #80]	; (802014c <etharp_input+0x198>)
 80200fc:	f240 228a 	movw	r2, #650	; 0x28a
 8020100:	4916      	ldr	r1, [pc, #88]	; (802015c <etharp_input+0x1a8>)
 8020102:	4814      	ldr	r0, [pc, #80]	; (8020154 <etharp_input+0x1a0>)
 8020104:	f002 ffee 	bl	80230e4 <iprintf>
 8020108:	e76d      	b.n	801ffe6 <etharp_input+0x32>
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 802010a:	f106 0908 	add.w	r9, r6, #8
 802010e:	f04f 0802 	mov.w	r8, #2
    for_us = 0;
 8020112:	9205      	str	r2, [sp, #20]
 8020114:	e78a      	b.n	802002c <etharp_input+0x78>
      if (for_us) {
 8020116:	9b05      	ldr	r3, [sp, #20]
 8020118:	2b00      	cmp	r3, #0
 802011a:	d0ea      	beq.n	80200f2 <etharp_input+0x13e>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802011c:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8020120:	2002      	movs	r0, #2
 8020122:	af07      	add	r7, sp, #28
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8020124:	1d2e      	adds	r6, r5, #4
        etharp_raw(netif,
 8020126:	9003      	str	r0, [sp, #12]
 8020128:	464a      	mov	r2, r9
 802012a:	4619      	mov	r1, r3
 802012c:	4628      	mov	r0, r5
 802012e:	f8cd 9004 	str.w	r9, [sp, #4]
 8020132:	9702      	str	r7, [sp, #8]
 8020134:	9600      	str	r6, [sp, #0]
 8020136:	f7ff fdd1 	bl	801fcdc <etharp_raw>
 802013a:	e7da      	b.n	80200f2 <etharp_input+0x13e>
      dhcp_arp_reply(netif, &sipaddr);
 802013c:	4628      	mov	r0, r5
 802013e:	a907      	add	r1, sp, #28
 8020140:	f7ff fa18 	bl	801f574 <dhcp_arp_reply>
      break;
 8020144:	e7d5      	b.n	80200f2 <etharp_input+0x13e>
 8020146:	bf00      	nop
 8020148:	2002e38c 	.word	0x2002e38c
 802014c:	08042550 	.word	0x08042550
 8020150:	080426b0 	.word	0x080426b0
 8020154:	08029ba0 	.word	0x08029ba0
 8020158:	2001aa88 	.word	0x2001aa88
 802015c:	08029b90 	.word	0x08029b90

08020160 <etharp_query>:
{
 8020160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020164:	460c      	mov	r4, r1
 8020166:	4607      	mov	r7, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020168:	4601      	mov	r1, r0
{
 802016a:	4615      	mov	r5, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 802016c:	6820      	ldr	r0, [r4, #0]
{
 802016e:	ed2d 8b02 	vpush	{d8}
 8020172:	b085      	sub	sp, #20
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020174:	f000 fd90 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 8020178:	2800      	cmp	r0, #0
 802017a:	f040 80df 	bne.w	802033c <etharp_query+0x1dc>
      ip4_addr_ismulticast(ipaddr) ||
 802017e:	6823      	ldr	r3, [r4, #0]
 8020180:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8020184:	2ae0      	cmp	r2, #224	; 0xe0
 8020186:	f000 80d9 	beq.w	802033c <etharp_query+0x1dc>
 802018a:	2b00      	cmp	r3, #0
 802018c:	f000 80d6 	beq.w	802033c <etharp_query+0x1dc>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020190:	463a      	mov	r2, r7
 8020192:	2101      	movs	r1, #1
 8020194:	4620      	mov	r0, r4
 8020196:	f7ff fceb 	bl	801fb70 <etharp_find_entry>
  if (i_err < 0) {
 802019a:	1e06      	subs	r6, r0, #0
 802019c:	db59      	blt.n	8020252 <etharp_query+0xf2>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 802019e:	2e7e      	cmp	r6, #126	; 0x7e
 80201a0:	dc4f      	bgt.n	8020242 <etharp_query+0xe2>
  i = (netif_addr_idx_t)i_err;
 80201a2:	b2f6      	uxtb	r6, r6
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80201a4:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 8020380 <etharp_query+0x220>
 80201a8:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80201ac:	ea4f 0946 	mov.w	r9, r6, lsl #1
 80201b0:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 80201b4:	7d13      	ldrb	r3, [r2, #20]
 80201b6:	b19b      	cbz	r3, 80201e0 <etharp_query+0x80>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80201b8:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 80201bc:	2d00      	cmp	r5, #0
 80201be:	f000 80af 	beq.w	8020320 <etharp_query+0x1c0>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80201c2:	eb09 0306 	add.w	r3, r9, r6
  err_t result = ERR_MEM;
 80201c6:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80201ca:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 80201ce:	7d1b      	ldrb	r3, [r3, #20]
 80201d0:	2b01      	cmp	r3, #1
 80201d2:	d822      	bhi.n	802021a <etharp_query+0xba>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80201d4:	d048      	beq.n	8020268 <etharp_query+0x108>
}
 80201d6:	b005      	add	sp, #20
 80201d8:	ecbd 8b02 	vpop	{d8}
 80201dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 80201e0:	f04f 0c01 	mov.w	ip, #1
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80201e4:	f107 0a2e 	add.w	sl, r7, #46	; 0x2e
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80201e8:	495e      	ldr	r1, [pc, #376]	; (8020364 <etharp_query+0x204>)
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80201ea:	1d38      	adds	r0, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80201ec:	9402      	str	r4, [sp, #8]
 80201ee:	4653      	mov	r3, sl
 80201f0:	9101      	str	r1, [sp, #4]
 80201f2:	4651      	mov	r1, sl
 80201f4:	9000      	str	r0, [sp, #0]
 80201f6:	4638      	mov	r0, r7
 80201f8:	f8cd c00c 	str.w	ip, [sp, #12]
    arp_table[i].netif = netif;
 80201fc:	6097      	str	r7, [r2, #8]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80201fe:	f882 c014 	strb.w	ip, [r2, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020202:	4a59      	ldr	r2, [pc, #356]	; (8020368 <etharp_query+0x208>)
 8020204:	f7ff fd6a 	bl	801fcdc <etharp_raw>
    if (q == NULL) {
 8020208:	2d00      	cmp	r5, #0
 802020a:	d0e4      	beq.n	80201d6 <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 802020c:	eb09 0306 	add.w	r3, r9, r6
 8020210:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8020214:	7d1b      	ldrb	r3, [r3, #20]
 8020216:	2b01      	cmp	r3, #1
 8020218:	d9dc      	bls.n	80201d4 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 802021a:	2318      	movs	r3, #24
 802021c:	f44f 6c00 	mov.w	ip, #2048	; 0x800
    ETHARP_SET_ADDRHINT(netif, i);
 8020220:	4c52      	ldr	r4, [pc, #328]	; (802036c <etharp_query+0x20c>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020222:	4652      	mov	r2, sl
 8020224:	fb03 8306 	mla	r3, r3, r6, r8
 8020228:	4629      	mov	r1, r5
 802022a:	f8cd c000 	str.w	ip, [sp]
 802022e:	4638      	mov	r0, r7
 8020230:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8020232:	7026      	strb	r6, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020234:	f001 fae4 	bl	8021800 <ethernet_output>
}
 8020238:	b005      	add	sp, #20
 802023a:	ecbd 8b02 	vpop	{d8}
 802023e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020242:	4b4b      	ldr	r3, [pc, #300]	; (8020370 <etharp_query+0x210>)
 8020244:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020248:	494a      	ldr	r1, [pc, #296]	; (8020374 <etharp_query+0x214>)
 802024a:	484b      	ldr	r0, [pc, #300]	; (8020378 <etharp_query+0x218>)
 802024c:	f002 ff4a 	bl	80230e4 <iprintf>
 8020250:	e7a7      	b.n	80201a2 <etharp_query+0x42>
    if (q) {
 8020252:	b11d      	cbz	r5, 802025c <etharp_query+0xfc>
      ETHARP_STATS_INC(etharp.memerr);
 8020254:	4a49      	ldr	r2, [pc, #292]	; (802037c <etharp_query+0x21c>)
 8020256:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8020258:	3301      	adds	r3, #1
 802025a:	8493      	strh	r3, [r2, #36]	; 0x24
    return (err_t)i_err;
 802025c:	b270      	sxtb	r0, r6
}
 802025e:	b005      	add	sp, #20
 8020260:	ecbd 8b02 	vpop	{d8}
 8020264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020268:	462c      	mov	r4, r5
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802026a:	f8df b104 	ldr.w	fp, [pc, #260]	; 8020370 <etharp_query+0x210>
 802026e:	f8df a114 	ldr.w	sl, [pc, #276]	; 8020384 <etharp_query+0x224>
 8020272:	ed9f 8a41 	vldr	s16, [pc, #260]	; 8020378 <etharp_query+0x218>
 8020276:	e005      	b.n	8020284 <etharp_query+0x124>
      if (PBUF_NEEDS_COPY(p)) {
 8020278:	7b23      	ldrb	r3, [r4, #12]
 802027a:	065a      	lsls	r2, r3, #25
 802027c:	d414      	bmi.n	80202a8 <etharp_query+0x148>
      p = p->next;
 802027e:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8020280:	2c00      	cmp	r4, #0
 8020282:	d038      	beq.n	80202f6 <etharp_query+0x196>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020284:	8962      	ldrh	r2, [r4, #10]
 8020286:	8923      	ldrh	r3, [r4, #8]
 8020288:	429a      	cmp	r2, r3
 802028a:	d1f5      	bne.n	8020278 <etharp_query+0x118>
 802028c:	6827      	ldr	r7, [r4, #0]
 802028e:	465b      	mov	r3, fp
 8020290:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020294:	4651      	mov	r1, sl
 8020296:	ee18 0a10 	vmov	r0, s16
 802029a:	b117      	cbz	r7, 80202a2 <etharp_query+0x142>
 802029c:	f002 ff22 	bl	80230e4 <iprintf>
 80202a0:	e7ea      	b.n	8020278 <etharp_query+0x118>
      if (PBUF_NEEDS_COPY(p)) {
 80202a2:	7b23      	ldrb	r3, [r4, #12]
 80202a4:	065b      	lsls	r3, r3, #25
 80202a6:	d526      	bpl.n	80202f6 <etharp_query+0x196>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80202a8:	462a      	mov	r2, r5
 80202aa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80202ae:	200e      	movs	r0, #14
 80202b0:	f7f9 f982 	bl	80195b8 <pbuf_clone>
    if (p != NULL) {
 80202b4:	4605      	mov	r5, r0
 80202b6:	2800      	cmp	r0, #0
 80202b8:	d046      	beq.n	8020348 <etharp_query+0x1e8>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 80202ba:	f240 4206 	movw	r2, #1030	; 0x406
 80202be:	492c      	ldr	r1, [pc, #176]	; (8020370 <etharp_query+0x210>)
 80202c0:	200b      	movs	r0, #11
 80202c2:	f7f8 fb03 	bl	80188cc <memp_malloc_fn>
      if (new_entry != NULL) {
 80202c6:	2800      	cmp	r0, #0
 80202c8:	d045      	beq.n	8020356 <etharp_query+0x1f6>
        if (arp_table[i].q != NULL) {
 80202ca:	eb09 0306 	add.w	r3, r9, r6
        new_entry->next = 0;
 80202ce:	2200      	movs	r2, #0
        new_entry->p = p;
 80202d0:	6045      	str	r5, [r0, #4]
        if (arp_table[i].q != NULL) {
 80202d2:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 80202d4:	6002      	str	r2, [r0, #0]
        if (arp_table[i].q != NULL) {
 80202d6:	f858 5003 	ldr.w	r5, [r8, r3]
 80202da:	b1ed      	cbz	r5, 8020318 <etharp_query+0x1b8>
          while (r->next != NULL) {
 80202dc:	682c      	ldr	r4, [r5, #0]
 80202de:	b384      	cbz	r4, 8020342 <etharp_query+0x1e2>
          qlen++;
 80202e0:	2301      	movs	r3, #1
            qlen++;
 80202e2:	4622      	mov	r2, r4
          while (r->next != NULL) {
 80202e4:	6824      	ldr	r4, [r4, #0]
            qlen++;
 80202e6:	3301      	adds	r3, #1
          while (r->next != NULL) {
 80202e8:	2c00      	cmp	r4, #0
 80202ea:	d1fa      	bne.n	80202e2 <etharp_query+0x182>
        if (qlen >= ARP_QUEUE_LEN) {
 80202ec:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 80202ee:	6010      	str	r0, [r2, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80202f0:	d805      	bhi.n	80202fe <etharp_query+0x19e>
        result = ERR_OK;
 80202f2:	4620      	mov	r0, r4
 80202f4:	e76f      	b.n	80201d6 <etharp_query+0x76>
      pbuf_ref(p);
 80202f6:	4628      	mov	r0, r5
 80202f8:	f7f8 ff4a 	bl	8019190 <pbuf_ref>
    if (p != NULL) {
 80202fc:	e7dd      	b.n	80202ba <etharp_query+0x15a>
          pbuf_free(old->p);
 80202fe:	e9d5 3000 	ldrd	r3, r0, [r5]
          arp_table[i].q = arp_table[i].q->next;
 8020302:	444e      	add	r6, r9
 8020304:	f848 3036 	str.w	r3, [r8, r6, lsl #3]
          pbuf_free(old->p);
 8020308:	f7f8 fdd4 	bl	8018eb4 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 802030c:	200b      	movs	r0, #11
 802030e:	4629      	mov	r1, r5
 8020310:	f7f8 fb00 	bl	8018914 <memp_free>
        result = ERR_OK;
 8020314:	4620      	mov	r0, r4
 8020316:	e75e      	b.n	80201d6 <etharp_query+0x76>
          arp_table[i].q = new_entry;
 8020318:	f848 0003 	str.w	r0, [r8, r3]
        result = ERR_OK;
 802031c:	4628      	mov	r0, r5
 802031e:	e75a      	b.n	80201d6 <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020320:	1d3a      	adds	r2, r7, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020322:	2101      	movs	r1, #1
 8020324:	4b0f      	ldr	r3, [pc, #60]	; (8020364 <etharp_query+0x204>)
 8020326:	4638      	mov	r0, r7
 8020328:	9200      	str	r2, [sp, #0]
 802032a:	9301      	str	r3, [sp, #4]
 802032c:	4653      	mov	r3, sl
 802032e:	4a0e      	ldr	r2, [pc, #56]	; (8020368 <etharp_query+0x208>)
 8020330:	e9cd 4102 	strd	r4, r1, [sp, #8]
 8020334:	4651      	mov	r1, sl
 8020336:	f7ff fcd1 	bl	801fcdc <etharp_raw>
    if (q == NULL) {
 802033a:	e74c      	b.n	80201d6 <etharp_query+0x76>
    return ERR_ARG;
 802033c:	f06f 000f 	mvn.w	r0, #15
 8020340:	e749      	b.n	80201d6 <etharp_query+0x76>
          r->next = new_entry;
 8020342:	6028      	str	r0, [r5, #0]
        result = ERR_OK;
 8020344:	4620      	mov	r0, r4
 8020346:	e746      	b.n	80201d6 <etharp_query+0x76>
      ETHARP_STATS_INC(etharp.memerr);
 8020348:	4a0c      	ldr	r2, [pc, #48]	; (802037c <etharp_query+0x21c>)
      result = ERR_MEM;
 802034a:	f04f 30ff 	mov.w	r0, #4294967295
      ETHARP_STATS_INC(etharp.memerr);
 802034e:	8c93      	ldrh	r3, [r2, #36]	; 0x24
 8020350:	3301      	adds	r3, #1
 8020352:	8493      	strh	r3, [r2, #36]	; 0x24
      result = ERR_MEM;
 8020354:	e73f      	b.n	80201d6 <etharp_query+0x76>
        pbuf_free(p);
 8020356:	4628      	mov	r0, r5
 8020358:	f7f8 fdac 	bl	8018eb4 <pbuf_free>
        result = ERR_MEM;
 802035c:	f04f 30ff 	mov.w	r0, #4294967295
 8020360:	e739      	b.n	80201d6 <etharp_query+0x76>
 8020362:	bf00      	nop
 8020364:	08042a88 	.word	0x08042a88
 8020368:	08042a80 	.word	0x08042a80
 802036c:	2001ad88 	.word	0x2001ad88
 8020370:	08042550 	.word	0x08042550
 8020374:	080426d4 	.word	0x080426d4
 8020378:	08029ba0 	.word	0x08029ba0
 802037c:	2002e38c 	.word	0x2002e38c
 8020380:	2001aa88 	.word	0x2001aa88
 8020384:	080426e4 	.word	0x080426e4

08020388 <etharp_output>:
{
 8020388:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 802038c:	4689      	mov	r9, r1
 802038e:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020390:	4606      	mov	r6, r0
{
 8020392:	4690      	mov	r8, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020394:	2800      	cmp	r0, #0
 8020396:	f000 808c 	beq.w	80204b2 <etharp_output+0x12a>
  LWIP_ASSERT("q != NULL", q != NULL);
 802039a:	f1b9 0f00 	cmp.w	r9, #0
 802039e:	d076      	beq.n	802048e <etharp_output+0x106>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80203a0:	f1b8 0f00 	cmp.w	r8, #0
 80203a4:	d07d      	beq.n	80204a2 <etharp_output+0x11a>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80203a6:	4631      	mov	r1, r6
 80203a8:	f8d8 0000 	ldr.w	r0, [r8]
 80203ac:	f000 fc74 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 80203b0:	2800      	cmp	r0, #0
 80203b2:	d162      	bne.n	802047a <etharp_output+0xf2>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80203b4:	f8d8 3000 	ldr.w	r3, [r8]
 80203b8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80203bc:	2ae0      	cmp	r2, #224	; 0xe0
 80203be:	d03b      	beq.n	8020438 <etharp_output+0xb0>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80203c0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80203c4:	405a      	eors	r2, r3
 80203c6:	420a      	tst	r2, r1
 80203c8:	d00a      	beq.n	80203e0 <etharp_output+0x58>
        !ip4_addr_islinklocal(ipaddr)) {
 80203ca:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80203cc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80203d0:	4293      	cmp	r3, r2
 80203d2:	d005      	beq.n	80203e0 <etharp_output+0x58>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80203d4:	68f3      	ldr	r3, [r6, #12]
 80203d6:	2b00      	cmp	r3, #0
 80203d8:	f000 8085 	beq.w	80204e6 <etharp_output+0x15e>
            dst_addr = netif_ip4_gw(netif);
 80203dc:	f106 080c 	add.w	r8, r6, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80203e0:	f8df c128 	ldr.w	ip, [pc, #296]	; 802050c <etharp_output+0x184>
 80203e4:	4b41      	ldr	r3, [pc, #260]	; (80204ec <etharp_output+0x164>)
 80203e6:	f89c 2000 	ldrb.w	r2, [ip]
 80203ea:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 80203ee:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80203f2:	7d19      	ldrb	r1, [r3, #20]
 80203f4:	2901      	cmp	r1, #1
 80203f6:	d902      	bls.n	80203fe <etharp_output+0x76>
 80203f8:	6899      	ldr	r1, [r3, #8]
 80203fa:	42b1      	cmp	r1, r6
 80203fc:	d065      	beq.n	80204ca <etharp_output+0x142>
 80203fe:	4c3b      	ldr	r4, [pc, #236]	; (80204ec <etharp_output+0x164>)
{
 8020400:	2300      	movs	r3, #0
 8020402:	e003      	b.n	802040c <etharp_output+0x84>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020404:	2b20      	cmp	r3, #32
 8020406:	f104 0418 	add.w	r4, r4, #24
 802040a:	d038      	beq.n	802047e <etharp_output+0xf6>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802040c:	7d25      	ldrb	r5, [r4, #20]
 802040e:	b2da      	uxtb	r2, r3
 8020410:	3301      	adds	r3, #1
 8020412:	2d01      	cmp	r5, #1
 8020414:	d9f6      	bls.n	8020404 <etharp_output+0x7c>
 8020416:	68a0      	ldr	r0, [r4, #8]
 8020418:	42b0      	cmp	r0, r6
 802041a:	d1f3      	bne.n	8020404 <etharp_output+0x7c>
          (arp_table[i].netif == netif) &&
 802041c:	f8d8 1000 	ldr.w	r1, [r8]
 8020420:	6860      	ldr	r0, [r4, #4]
 8020422:	4281      	cmp	r1, r0
 8020424:	d1ee      	bne.n	8020404 <etharp_output+0x7c>
        return etharp_output_to_arp_index(netif, q, i);
 8020426:	4649      	mov	r1, r9
 8020428:	4630      	mov	r0, r6
        ETHARP_SET_ADDRHINT(netif, i);
 802042a:	f88c 2000 	strb.w	r2, [ip]
        return etharp_output_to_arp_index(netif, q, i);
 802042e:	f7ff fcd9 	bl	801fde4 <etharp_output_to_arp_index>
}
 8020432:	b004      	add	sp, #16
 8020434:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020438:	f898 3001 	ldrb.w	r3, [r8, #1]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802043c:	2401      	movs	r4, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 802043e:	205e      	movs	r0, #94	; 0x5e
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020440:	f898 1002 	ldrb.w	r1, [r8, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020448:	f898 2003 	ldrb.w	r2, [r8, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 802044c:	f8ad 4008 	strh.w	r4, [sp, #8]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020450:	f88d 300b 	strb.w	r3, [sp, #11]
    dest = &mcastaddr;
 8020454:	ab02      	add	r3, sp, #8
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020456:	f88d 000a 	strb.w	r0, [sp, #10]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 802045a:	f88d 100c 	strb.w	r1, [sp, #12]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802045e:	f88d 200d 	strb.w	r2, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020462:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8020466:	4649      	mov	r1, r9
 8020468:	f106 022e 	add.w	r2, r6, #46	; 0x2e
 802046c:	9000      	str	r0, [sp, #0]
 802046e:	4630      	mov	r0, r6
 8020470:	f001 f9c6 	bl	8021800 <ethernet_output>
}
 8020474:	b004      	add	sp, #16
 8020476:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 802047a:	4b1d      	ldr	r3, [pc, #116]	; (80204f0 <etharp_output+0x168>)
 802047c:	e7f1      	b.n	8020462 <etharp_output+0xda>
    return etharp_query(netif, dst_addr, q);
 802047e:	464a      	mov	r2, r9
 8020480:	4641      	mov	r1, r8
 8020482:	4630      	mov	r0, r6
 8020484:	f7ff fe6c 	bl	8020160 <etharp_query>
}
 8020488:	b004      	add	sp, #16
 802048a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
  LWIP_ASSERT("q != NULL", q != NULL);
 802048e:	4b19      	ldr	r3, [pc, #100]	; (80204f4 <etharp_output+0x16c>)
 8020490:	f240 321f 	movw	r2, #799	; 0x31f
 8020494:	4918      	ldr	r1, [pc, #96]	; (80204f8 <etharp_output+0x170>)
 8020496:	4819      	ldr	r0, [pc, #100]	; (80204fc <etharp_output+0x174>)
 8020498:	f002 fe24 	bl	80230e4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802049c:	f1b8 0f00 	cmp.w	r8, #0
 80204a0:	d181      	bne.n	80203a6 <etharp_output+0x1e>
 80204a2:	4b14      	ldr	r3, [pc, #80]	; (80204f4 <etharp_output+0x16c>)
 80204a4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80204a8:	4915      	ldr	r1, [pc, #84]	; (8020500 <etharp_output+0x178>)
 80204aa:	4814      	ldr	r0, [pc, #80]	; (80204fc <etharp_output+0x174>)
 80204ac:	f002 fe1a 	bl	80230e4 <iprintf>
 80204b0:	e779      	b.n	80203a6 <etharp_output+0x1e>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80204b2:	4b10      	ldr	r3, [pc, #64]	; (80204f4 <etharp_output+0x16c>)
 80204b4:	f240 321e 	movw	r2, #798	; 0x31e
 80204b8:	4912      	ldr	r1, [pc, #72]	; (8020504 <etharp_output+0x17c>)
 80204ba:	4810      	ldr	r0, [pc, #64]	; (80204fc <etharp_output+0x174>)
 80204bc:	f002 fe12 	bl	80230e4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80204c0:	f1b9 0f00 	cmp.w	r9, #0
 80204c4:	f47f af6c 	bne.w	80203a0 <etharp_output+0x18>
 80204c8:	e7e1      	b.n	802048e <etharp_output+0x106>
            (arp_table[etharp_cached_entry].netif == netif) &&
 80204ca:	685b      	ldr	r3, [r3, #4]
 80204cc:	f8d8 1000 	ldr.w	r1, [r8]
 80204d0:	4299      	cmp	r1, r3
 80204d2:	d194      	bne.n	80203fe <etharp_output+0x76>
          ETHARP_STATS_INC(etharp.cachehit);
 80204d4:	4c0c      	ldr	r4, [pc, #48]	; (8020508 <etharp_output+0x180>)
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80204d6:	4649      	mov	r1, r9
 80204d8:	4630      	mov	r0, r6
          ETHARP_STATS_INC(etharp.cachehit);
 80204da:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80204dc:	3301      	adds	r3, #1
 80204de:	85e3      	strh	r3, [r4, #46]	; 0x2e
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80204e0:	f7ff fc80 	bl	801fde4 <etharp_output_to_arp_index>
 80204e4:	e7c6      	b.n	8020474 <etharp_output+0xec>
            return ERR_RTE;
 80204e6:	f06f 0003 	mvn.w	r0, #3
 80204ea:	e7c3      	b.n	8020474 <etharp_output+0xec>
 80204ec:	2001aa88 	.word	0x2001aa88
 80204f0:	08042a80 	.word	0x08042a80
 80204f4:	08042550 	.word	0x08042550
 80204f8:	08042588 	.word	0x08042588
 80204fc:	08029ba0 	.word	0x08029ba0
 8020500:	08042690 	.word	0x08042690
 8020504:	08029b90 	.word	0x08029b90
 8020508:	2002e38c 	.word	0x2002e38c
 802050c:	2001ad88 	.word	0x2001ad88

08020510 <etharp_request>:
{
 8020510:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020512:	2301      	movs	r3, #1
{
 8020514:	b084      	sub	sp, #16
 8020516:	4602      	mov	r2, r0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020518:	4c06      	ldr	r4, [pc, #24]	; (8020534 <etharp_request+0x24>)
 802051a:	e9cd 1302 	strd	r1, r3, [sp, #8]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 802051e:	3204      	adds	r2, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020520:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 8020524:	e9cd 2400 	strd	r2, r4, [sp]
 8020528:	4619      	mov	r1, r3
 802052a:	4a03      	ldr	r2, [pc, #12]	; (8020538 <etharp_request+0x28>)
 802052c:	f7ff fbd6 	bl	801fcdc <etharp_raw>
}
 8020530:	b004      	add	sp, #16
 8020532:	bd10      	pop	{r4, pc}
 8020534:	08042a88 	.word	0x08042a88
 8020538:	08042a80 	.word	0x08042a80

0802053c <icmp_send_response.isra.0>:
 *          p->payload pointing to the IP header
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
 802053c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020540:	4604      	mov	r4, r0
 8020542:	b086      	sub	sp, #24
 8020544:	460f      	mov	r7, r1
 8020546:	4690      	mov	r8, r2

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020548:	2124      	movs	r1, #36	; 0x24
 802054a:	f44f 7220 	mov.w	r2, #640	; 0x280
 802054e:	2022      	movs	r0, #34	; 0x22
 8020550:	f7f8 fd1e 	bl	8018f90 <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 8020554:	2800      	cmp	r0, #0
 8020556:	d040      	beq.n	80205da <icmp_send_response.isra.0+0x9e>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020558:	8943      	ldrh	r3, [r0, #10]
 802055a:	4605      	mov	r5, r0
 802055c:	2b23      	cmp	r3, #35	; 0x23
 802055e:	d93f      	bls.n	80205e0 <icmp_send_response.isra.0+0xa4>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020560:	6823      	ldr	r3, [r4, #0]
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
  icmphdr->type = type;
  icmphdr->code = code;
  icmphdr->id = 0;
 8020562:	2600      	movs	r6, #0
  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020564:	686c      	ldr	r4, [r5, #4]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020566:	a805      	add	r0, sp, #20
  icmphdr->type = type;
 8020568:	7027      	strb	r7, [r4, #0]
  icmphdr->code = code;
 802056a:	f884 8001 	strb.w	r8, [r4, #1]
  icmphdr->id = 0;
 802056e:	7126      	strb	r6, [r4, #4]
 8020570:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 8020572:	71a6      	strb	r6, [r4, #6]
 8020574:	71e6      	strb	r6, [r4, #7]
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020576:	681f      	ldr	r7, [r3, #0]
 8020578:	6859      	ldr	r1, [r3, #4]
 802057a:	689a      	ldr	r2, [r3, #8]
 802057c:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8020580:	60a7      	str	r7, [r4, #8]
 8020582:	60e1      	str	r1, [r4, #12]
 8020584:	6122      	str	r2, [r4, #16]
 8020586:	f8c4 c014 	str.w	ip, [r4, #20]
 802058a:	691f      	ldr	r7, [r3, #16]
 802058c:	6959      	ldr	r1, [r3, #20]
 802058e:	699a      	ldr	r2, [r3, #24]
 8020590:	61a7      	str	r7, [r4, #24]
 8020592:	61e1      	str	r1, [r4, #28]
 8020594:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 8020596:	68db      	ldr	r3, [r3, #12]
 8020598:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 802059a:	f000 f951 	bl	8020840 <ip4_route>
#endif
  if (netif != NULL) {
 802059e:	4607      	mov	r7, r0
 80205a0:	b1c0      	cbz	r0, 80205d4 <icmp_send_response.isra.0+0x98>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80205a2:	4620      	mov	r0, r4
 80205a4:	8969      	ldrh	r1, [r5, #10]
    icmphdr->chksum = 0;
 80205a6:	70a6      	strb	r6, [r4, #2]
 80205a8:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80205aa:	f7f7 fbe3 	bl	8017d74 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
 80205ae:	f8df c04c 	ldr.w	ip, [pc, #76]	; 80205fc <icmp_send_response.isra.0+0xc0>
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80205b2:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80205b4:	f04f 0e01 	mov.w	lr, #1
    ICMP_STATS_INC(icmp.xmit);
 80205b8:	f8bc 4060 	ldrh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80205bc:	aa05      	add	r2, sp, #20
 80205be:	9702      	str	r7, [sp, #8]
 80205c0:	4631      	mov	r1, r6
    ICMP_STATS_INC(icmp.xmit);
 80205c2:	4474      	add	r4, lr
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80205c4:	23ff      	movs	r3, #255	; 0xff
 80205c6:	4628      	mov	r0, r5
 80205c8:	e9cd 6e00 	strd	r6, lr, [sp]
    ICMP_STATS_INC(icmp.xmit);
 80205cc:	f8ac 4060 	strh.w	r4, [ip, #96]	; 0x60
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80205d0:	f000 fb50 	bl	8020c74 <ip4_output_if>
  }
  pbuf_free(q);
 80205d4:	4628      	mov	r0, r5
 80205d6:	f7f8 fc6d 	bl	8018eb4 <pbuf_free>
}
 80205da:	b006      	add	sp, #24
 80205dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80205e0:	4b03      	ldr	r3, [pc, #12]	; (80205f0 <icmp_send_response.isra.0+0xb4>)
 80205e2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80205e6:	4903      	ldr	r1, [pc, #12]	; (80205f4 <icmp_send_response.isra.0+0xb8>)
 80205e8:	4803      	ldr	r0, [pc, #12]	; (80205f8 <icmp_send_response.isra.0+0xbc>)
 80205ea:	f002 fd7b 	bl	80230e4 <iprintf>
 80205ee:	e7b7      	b.n	8020560 <icmp_send_response.isra.0+0x24>
 80205f0:	08042700 	.word	0x08042700
 80205f4:	08042738 	.word	0x08042738
 80205f8:	08029ba0 	.word	0x08029ba0
 80205fc:	2002e38c 	.word	0x2002e38c

08020600 <icmp_input>:
{
 8020600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ICMP_STATS_INC(icmp.recv);
 8020604:	4e76      	ldr	r6, [pc, #472]	; (80207e0 <icmp_input+0x1e0>)
{
 8020606:	b087      	sub	sp, #28
  iphdr_in = ip4_current_header();
 8020608:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 80207f8 <icmp_input+0x1f8>
{
 802060c:	4605      	mov	r5, r0
  ICMP_STATS_INC(icmp.recv);
 802060e:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
  iphdr_in = ip4_current_header();
 8020612:	f8d8 9008 	ldr.w	r9, [r8, #8]
  ICMP_STATS_INC(icmp.recv);
 8020616:	3301      	adds	r3, #1
 8020618:	f8a6 3062 	strh.w	r3, [r6, #98]	; 0x62
  hlen = IPH_HL_BYTES(iphdr_in);
 802061c:	f899 4000 	ldrb.w	r4, [r9]
 8020620:	f004 040f 	and.w	r4, r4, #15
 8020624:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8020626:	2c13      	cmp	r4, #19
 8020628:	d91c      	bls.n	8020664 <icmp_input+0x64>
  if (p->len < sizeof(u16_t) * 2) {
 802062a:	8943      	ldrh	r3, [r0, #10]
 802062c:	2b03      	cmp	r3, #3
 802062e:	d919      	bls.n	8020664 <icmp_input+0x64>
  type = *((u8_t *)p->payload);
 8020630:	6843      	ldr	r3, [r0, #4]
 8020632:	781b      	ldrb	r3, [r3, #0]
  switch (type) {
 8020634:	2b00      	cmp	r3, #0
 8020636:	f000 8092 	beq.w	802075e <icmp_input+0x15e>
 802063a:	2b08      	cmp	r3, #8
 802063c:	f040 80a9 	bne.w	8020792 <icmp_input+0x192>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020640:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8020644:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8020648:	2be0      	cmp	r3, #224	; 0xe0
 802064a:	f000 8099 	beq.w	8020780 <icmp_input+0x180>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802064e:	460f      	mov	r7, r1
 8020650:	f8d8 1000 	ldr.w	r1, [r8]
 8020654:	f000 fb20 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 8020658:	2800      	cmp	r0, #0
 802065a:	f040 8091 	bne.w	8020780 <icmp_input+0x180>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802065e:	892b      	ldrh	r3, [r5, #8]
 8020660:	2b07      	cmp	r3, #7
 8020662:	d80a      	bhi.n	802067a <icmp_input+0x7a>
  pbuf_free(p);
 8020664:	4628      	mov	r0, r5
 8020666:	f7f8 fc25 	bl	8018eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
 802066a:	f8b6 306a 	ldrh.w	r3, [r6, #106]	; 0x6a
 802066e:	3301      	adds	r3, #1
 8020670:	f8a6 306a 	strh.w	r3, [r6, #106]	; 0x6a
}
 8020674:	b007      	add	sp, #28
 8020676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (inet_chksum_pbuf(p) != 0) {
 802067a:	4628      	mov	r0, r5
 802067c:	f7f7 fb80 	bl	8017d80 <inet_chksum_pbuf>
 8020680:	2800      	cmp	r0, #0
 8020682:	f040 8096 	bne.w	80207b2 <icmp_input+0x1b2>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020686:	f104 010e 	add.w	r1, r4, #14
 802068a:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 802068c:	fa1f fa84 	uxth.w	sl, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020690:	9105      	str	r1, [sp, #20]
 8020692:	f7f8 fbcf 	bl	8018e34 <pbuf_add_header>
 8020696:	9905      	ldr	r1, [sp, #20]
 8020698:	2800      	cmp	r0, #0
 802069a:	d066      	beq.n	802076a <icmp_input+0x16a>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802069c:	892b      	ldrh	r3, [r5, #8]
 802069e:	eb03 010a 	add.w	r1, r3, sl
 80206a2:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80206a4:	428b      	cmp	r3, r1
 80206a6:	d86b      	bhi.n	8020780 <icmp_input+0x180>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80206a8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80206ac:	200e      	movs	r0, #14
 80206ae:	f7f8 fc6f 	bl	8018f90 <pbuf_alloc>
        if (r == NULL) {
 80206b2:	4683      	mov	fp, r0
 80206b4:	2800      	cmp	r0, #0
 80206b6:	d063      	beq.n	8020780 <icmp_input+0x180>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80206b8:	8942      	ldrh	r2, [r0, #10]
 80206ba:	f104 0308 	add.w	r3, r4, #8
 80206be:	429a      	cmp	r2, r3
 80206c0:	f0c0 8081 	bcc.w	80207c6 <icmp_input+0x1c6>
        MEMCPY(r->payload, iphdr_in, hlen);
 80206c4:	4649      	mov	r1, r9
 80206c6:	4622      	mov	r2, r4
 80206c8:	6840      	ldr	r0, [r0, #4]
 80206ca:	f001 fd71 	bl	80221b0 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80206ce:	4621      	mov	r1, r4
 80206d0:	4658      	mov	r0, fp
 80206d2:	f7f8 fbb3 	bl	8018e3c <pbuf_remove_header>
 80206d6:	2800      	cmp	r0, #0
 80206d8:	d178      	bne.n	80207cc <icmp_input+0x1cc>
        if (pbuf_copy(r, p) != ERR_OK) {
 80206da:	4629      	mov	r1, r5
 80206dc:	4658      	mov	r0, fp
 80206de:	f7f8 fdc5 	bl	801926c <pbuf_copy>
 80206e2:	2800      	cmp	r0, #0
 80206e4:	d16e      	bne.n	80207c4 <icmp_input+0x1c4>
        pbuf_free(p);
 80206e6:	4628      	mov	r0, r5
 80206e8:	465d      	mov	r5, fp
 80206ea:	f7f8 fbe3 	bl	8018eb4 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 80206ee:	4621      	mov	r1, r4
 80206f0:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 80206f2:	f8d5 9004 	ldr.w	r9, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 80206f6:	f7f8 fb9d 	bl	8018e34 <pbuf_add_header>
 80206fa:	bb80      	cbnz	r0, 802075e <icmp_input+0x15e>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80206fc:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 80206fe:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020702:	f04f 0bff 	mov.w	fp, #255	; 0xff
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020706:	e9d8 3104 	ldrd	r3, r1, [r8, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 802070a:	f04f 0800 	mov.w	r8, #0
        ip4_addr_copy(iphdr->src, *src);
 802070e:	60e1      	str	r1, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020710:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8020712:	f8b9 3002 	ldrh.w	r3, [r9, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020716:	f889 0000 	strb.w	r0, [r9]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802071a:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802071c:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 802071e:	bf8c      	ite	hi
 8020720:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8020722:	3308      	addls	r3, #8
 8020724:	b299      	uxth	r1, r3
 8020726:	f8a9 1002 	strh.w	r1, [r9, #2]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802072a:	4651      	mov	r1, sl
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802072c:	f884 b008 	strb.w	fp, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020730:	f884 800a 	strb.w	r8, [r4, #10]
 8020734:	f884 800b 	strb.w	r8, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8020738:	f7f7 fb1c 	bl	8017d74 <inet_chksum>
        ICMP_STATS_INC(icmp.xmit);
 802073c:	f8b6 2060 	ldrh.w	r2, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020740:	2101      	movs	r1, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8020742:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020744:	465b      	mov	r3, fp
 8020746:	4628      	mov	r0, r5
        ICMP_STATS_INC(icmp.xmit);
 8020748:	1854      	adds	r4, r2, r1
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802074a:	f8cd 8000 	str.w	r8, [sp]
 802074e:	4642      	mov	r2, r8
        ICMP_STATS_INC(icmp.xmit);
 8020750:	f8a6 4060 	strh.w	r4, [r6, #96]	; 0x60
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020754:	e9cd 1701 	strd	r1, r7, [sp, #4]
 8020758:	4922      	ldr	r1, [pc, #136]	; (80207e4 <icmp_input+0x1e4>)
 802075a:	f000 fa8b 	bl	8020c74 <ip4_output_if>
  pbuf_free(p);
 802075e:	4628      	mov	r0, r5
}
 8020760:	b007      	add	sp, #28
 8020762:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8020766:	f7f8 bba5 	b.w	8018eb4 <pbuf_free>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802076a:	4628      	mov	r0, r5
 802076c:	f7f8 fb66 	bl	8018e3c <pbuf_remove_header>
 8020770:	2800      	cmp	r0, #0
 8020772:	d0bc      	beq.n	80206ee <icmp_input+0xee>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020774:	4b1c      	ldr	r3, [pc, #112]	; (80207e8 <icmp_input+0x1e8>)
 8020776:	22c7      	movs	r2, #199	; 0xc7
 8020778:	491c      	ldr	r1, [pc, #112]	; (80207ec <icmp_input+0x1ec>)
 802077a:	481d      	ldr	r0, [pc, #116]	; (80207f0 <icmp_input+0x1f0>)
 802077c:	f002 fcb2 	bl	80230e4 <iprintf>
  pbuf_free(p);
 8020780:	4628      	mov	r0, r5
 8020782:	f7f8 fb97 	bl	8018eb4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
 8020786:	f8b6 3074 	ldrh.w	r3, [r6, #116]	; 0x74
 802078a:	3301      	adds	r3, #1
 802078c:	f8a6 3074 	strh.w	r3, [r6, #116]	; 0x74
  return;
 8020790:	e770      	b.n	8020674 <icmp_input+0x74>
      ICMP_STATS_INC(icmp.proterr);
 8020792:	f8b6 2070 	ldrh.w	r2, [r6, #112]	; 0x70
  pbuf_free(p);
 8020796:	4628      	mov	r0, r5
      ICMP_STATS_INC(icmp.drop);
 8020798:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
      ICMP_STATS_INC(icmp.proterr);
 802079c:	3201      	adds	r2, #1
      ICMP_STATS_INC(icmp.drop);
 802079e:	3301      	adds	r3, #1
      ICMP_STATS_INC(icmp.proterr);
 80207a0:	f8a6 2070 	strh.w	r2, [r6, #112]	; 0x70
      ICMP_STATS_INC(icmp.drop);
 80207a4:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
}
 80207a8:	b007      	add	sp, #28
 80207aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 80207ae:	f7f8 bb81 	b.w	8018eb4 <pbuf_free>
          pbuf_free(p);
 80207b2:	4628      	mov	r0, r5
 80207b4:	f7f8 fb7e 	bl	8018eb4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
 80207b8:	f8b6 3068 	ldrh.w	r3, [r6, #104]	; 0x68
 80207bc:	3301      	adds	r3, #1
 80207be:	f8a6 3068 	strh.w	r3, [r6, #104]	; 0x68
          return;
 80207c2:	e757      	b.n	8020674 <icmp_input+0x74>
          pbuf_free(r);
 80207c4:	4658      	mov	r0, fp
 80207c6:	f7f8 fb75 	bl	8018eb4 <pbuf_free>
          goto icmperr;
 80207ca:	e7d9      	b.n	8020780 <icmp_input+0x180>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80207cc:	4b06      	ldr	r3, [pc, #24]	; (80207e8 <icmp_input+0x1e8>)
 80207ce:	22b6      	movs	r2, #182	; 0xb6
 80207d0:	4908      	ldr	r1, [pc, #32]	; (80207f4 <icmp_input+0x1f4>)
 80207d2:	4807      	ldr	r0, [pc, #28]	; (80207f0 <icmp_input+0x1f0>)
 80207d4:	f002 fc86 	bl	80230e4 <iprintf>
          pbuf_free(r);
 80207d8:	4658      	mov	r0, fp
 80207da:	f7f8 fb6b 	bl	8018eb4 <pbuf_free>
          goto icmperr;
 80207de:	e7cf      	b.n	8020780 <icmp_input+0x180>
 80207e0:	2002e38c 	.word	0x2002e38c
 80207e4:	2001f478 	.word	0x2001f478
 80207e8:	08042700 	.word	0x08042700
 80207ec:	0804279c 	.word	0x0804279c
 80207f0:	08029ba0 	.word	0x08029ba0
 80207f4:	08042764 	.word	0x08042764
 80207f8:	2001f464 	.word	0x2001f464

080207fc <icmp_dest_unreach>:
{
 80207fc:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80207fe:	3004      	adds	r0, #4
 8020800:	2103      	movs	r1, #3
 8020802:	f7ff be9b 	b.w	802053c <icmp_send_response.isra.0>
 8020806:	bf00      	nop

08020808 <icmp_time_exceeded>:
{
 8020808:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 802080a:	3004      	adds	r0, #4
 802080c:	210b      	movs	r1, #11
 802080e:	f7ff be95 	b.w	802053c <icmp_send_response.isra.0>
 8020812:	bf00      	nop

08020814 <ip4_input_accept.part.0>:
}
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
 8020814:	b508      	push	{r3, lr}
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020816:	6843      	ldr	r3, [r0, #4]
 8020818:	b15b      	cbz	r3, 8020832 <ip4_input_accept.part.0+0x1e>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802081a:	4a08      	ldr	r2, [pc, #32]	; (802083c <ip4_input_accept.part.0+0x28>)
 802081c:	6952      	ldr	r2, [r2, #20]
 802081e:	4293      	cmp	r3, r2
 8020820:	d009      	beq.n	8020836 <ip4_input_accept.part.0+0x22>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020822:	4601      	mov	r1, r0
 8020824:	4610      	mov	r0, r2
 8020826:	f000 fa37 	bl	8020c98 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802082a:	3800      	subs	r0, #0
 802082c:	bf18      	it	ne
 802082e:	2001      	movne	r0, #1
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
}
 8020830:	bd08      	pop	{r3, pc}
  return 0;
 8020832:	4618      	mov	r0, r3
}
 8020834:	bd08      	pop	{r3, pc}
      return 1;
 8020836:	2001      	movs	r0, #1
}
 8020838:	bd08      	pop	{r3, pc}
 802083a:	bf00      	nop
 802083c:	2001f464 	.word	0x2001f464

08020840 <ip4_route>:
  NETIF_FOREACH(netif) {
 8020840:	4b18      	ldr	r3, [pc, #96]	; (80208a4 <ip4_route+0x64>)
{
 8020842:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 8020844:	681b      	ldr	r3, [r3, #0]
 8020846:	b1ab      	cbz	r3, 8020874 <ip4_route+0x34>
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020848:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 802084c:	07d4      	lsls	r4, r2, #31
 802084e:	d5f9      	bpl.n	8020844 <ip4_route+0x4>
 8020850:	0751      	lsls	r1, r2, #29
 8020852:	d5f7      	bpl.n	8020844 <ip4_route+0x4>
 8020854:	6859      	ldr	r1, [r3, #4]
 8020856:	2900      	cmp	r1, #0
 8020858:	d0f4      	beq.n	8020844 <ip4_route+0x4>
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 802085a:	6804      	ldr	r4, [r0, #0]
 802085c:	689d      	ldr	r5, [r3, #8]
 802085e:	4061      	eors	r1, r4
 8020860:	4229      	tst	r1, r5
 8020862:	d004      	beq.n	802086e <ip4_route+0x2e>
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020864:	0792      	lsls	r2, r2, #30
 8020866:	d4ed      	bmi.n	8020844 <ip4_route+0x4>
 8020868:	68da      	ldr	r2, [r3, #12]
 802086a:	4294      	cmp	r4, r2
 802086c:	d1ea      	bne.n	8020844 <ip4_route+0x4>
}
 802086e:	4618      	mov	r0, r3
 8020870:	bc30      	pop	{r4, r5}
 8020872:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020874:	4b0c      	ldr	r3, [pc, #48]	; (80208a8 <ip4_route+0x68>)
 8020876:	681b      	ldr	r3, [r3, #0]
 8020878:	b153      	cbz	r3, 8020890 <ip4_route+0x50>
 802087a:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 802087e:	f002 0205 	and.w	r2, r2, #5
 8020882:	2a05      	cmp	r2, #5
 8020884:	d104      	bne.n	8020890 <ip4_route+0x50>
 8020886:	685a      	ldr	r2, [r3, #4]
 8020888:	b112      	cbz	r2, 8020890 <ip4_route+0x50>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802088a:	7802      	ldrb	r2, [r0, #0]
 802088c:	2a7f      	cmp	r2, #127	; 0x7f
 802088e:	d1ee      	bne.n	802086e <ip4_route+0x2e>
    IP_STATS_INC(ip.rterr);
 8020890:	4906      	ldr	r1, [pc, #24]	; (80208ac <ip4_route+0x6c>)
    return NULL;
 8020892:	2300      	movs	r3, #0
    IP_STATS_INC(ip.rterr);
 8020894:	f8b1 2056 	ldrh.w	r2, [r1, #86]	; 0x56
}
 8020898:	4618      	mov	r0, r3
    IP_STATS_INC(ip.rterr);
 802089a:	3201      	adds	r2, #1
}
 802089c:	bc30      	pop	{r4, r5}
    IP_STATS_INC(ip.rterr);
 802089e:	f8a1 2056 	strh.w	r2, [r1, #86]	; 0x56
}
 80208a2:	4770      	bx	lr
 80208a4:	2002e380 	.word	0x2002e380
 80208a8:	2002e384 	.word	0x2002e384
 80208ac:	2002e38c 	.word	0x2002e38c

080208b0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80208b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  raw_input_state_t raw_status;
#endif /* LWIP_RAW */

  LWIP_ASSERT_CORE_LOCKED();

  IP_STATS_INC(ip.recv);
 80208b4:	4d97      	ldr	r5, [pc, #604]	; (8020b14 <ip4_input+0x264>)
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80208b6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  IP_STATS_INC(ip.recv);
 80208ba:	f8b5 304a 	ldrh.w	r3, [r5, #74]	; 0x4a
 80208be:	3301      	adds	r3, #1
 80208c0:	f8a5 304a 	strh.w	r3, [r5, #74]	; 0x4a
  if (IPH_V(iphdr) != 4) {
 80208c4:	f898 3000 	ldrb.w	r3, [r8]
 80208c8:	091a      	lsrs	r2, r3, #4
 80208ca:	2a04      	cmp	r2, #4
 80208cc:	d00e      	beq.n	80208ec <ip4_input+0x3c>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80208ce:	f7f8 faf1 	bl	8018eb4 <pbuf_free>
    IP_STATS_INC(ip.err);
 80208d2:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 80208d6:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    IP_STATS_INC(ip.err);
 80208da:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 80208dc:	3301      	adds	r3, #1
    IP_STATS_INC(ip.err);
 80208de:	f8a5 205c 	strh.w	r2, [r5, #92]	; 0x5c
    IP_STATS_INC(ip.drop);
 80208e2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 80208e6:	2000      	movs	r0, #0
 80208e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80208ec:	f003 030f 	and.w	r3, r3, #15
 80208f0:	4604      	mov	r4, r0
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80208f2:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 80208f6:	460f      	mov	r7, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80208f8:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80208fc:	f7f6 fc86 	bl	801720c <lwip_htons>
  if (iphdr_len < p->tot_len) {
 8020900:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020902:	464e      	mov	r6, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020904:	4682      	mov	sl, r0
  if (iphdr_len < p->tot_len) {
 8020906:	4283      	cmp	r3, r0
 8020908:	d834      	bhi.n	8020974 <ip4_input+0xc4>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802090a:	8963      	ldrh	r3, [r4, #10]
 802090c:	42b3      	cmp	r3, r6
 802090e:	d321      	bcc.n	8020954 <ip4_input+0xa4>
 8020910:	8923      	ldrh	r3, [r4, #8]
 8020912:	4553      	cmp	r3, sl
 8020914:	d31e      	bcc.n	8020954 <ip4_input+0xa4>
 8020916:	2e13      	cmp	r6, #19
 8020918:	d91c      	bls.n	8020954 <ip4_input+0xa4>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802091a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 802091e:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8020b1c <ip4_input+0x26c>
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020922:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020926:	f8ca 3014 	str.w	r3, [sl, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802092a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802092c:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8020930:	f8ca 0010 	str.w	r0, [sl, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020934:	f000 80b4 	beq.w	8020aa0 <ip4_input+0x1f0>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020938:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 802093c:	07d2      	lsls	r2, r2, #31
 802093e:	d523      	bpl.n	8020988 <ip4_input+0xd8>
 8020940:	4638      	mov	r0, r7
 8020942:	f7ff ff67 	bl	8020814 <ip4_input_accept.part.0>
    if (ip4_input_accept(inp)) {
 8020946:	b1e8      	cbz	r0, 8020984 <ip4_input+0xd4>
 8020948:	f8da 0010 	ldr.w	r0, [sl, #16]
 802094c:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 802094e:	2800      	cmp	r0, #0
 8020950:	d048      	beq.n	80209e4 <ip4_input+0x134>
 8020952:	e039      	b.n	80209c8 <ip4_input+0x118>
    pbuf_free(p);
 8020954:	4620      	mov	r0, r4
 8020956:	f7f8 faad 	bl	8018eb4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
 802095a:	f8b5 2052 	ldrh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 802095e:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
}
 8020962:	2000      	movs	r0, #0
    IP_STATS_INC(ip.lenerr);
 8020964:	3201      	adds	r2, #1
    IP_STATS_INC(ip.drop);
 8020966:	3301      	adds	r3, #1
    IP_STATS_INC(ip.lenerr);
 8020968:	f8a5 2052 	strh.w	r2, [r5, #82]	; 0x52
    IP_STATS_INC(ip.drop);
 802096c:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
}
 8020970:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    pbuf_realloc(p, iphdr_len);
 8020974:	4601      	mov	r1, r0
 8020976:	4620      	mov	r0, r4
 8020978:	f7f8 fba8 	bl	80190cc <pbuf_realloc>
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802097c:	8963      	ldrh	r3, [r4, #10]
 802097e:	42b3      	cmp	r3, r6
 8020980:	d2c6      	bcs.n	8020910 <ip4_input+0x60>
 8020982:	e7e7      	b.n	8020954 <ip4_input+0xa4>
 8020984:	f8da 3014 	ldr.w	r3, [sl, #20]
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8020988:	b2db      	uxtb	r3, r3
 802098a:	2b7f      	cmp	r3, #127	; 0x7f
 802098c:	d011      	beq.n	80209b2 <ip4_input+0x102>
        NETIF_FOREACH(netif) {
 802098e:	4b62      	ldr	r3, [pc, #392]	; (8020b18 <ip4_input+0x268>)
 8020990:	681e      	ldr	r6, [r3, #0]
 8020992:	b176      	cbz	r6, 80209b2 <ip4_input+0x102>
          if (netif == inp) {
 8020994:	42b7      	cmp	r7, r6
 8020996:	4630      	mov	r0, r6
 8020998:	d008      	beq.n	80209ac <ip4_input+0xfc>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 802099a:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 802099e:	07db      	lsls	r3, r3, #31
 80209a0:	d504      	bpl.n	80209ac <ip4_input+0xfc>
 80209a2:	f7ff ff37 	bl	8020814 <ip4_input_accept.part.0>
          if (ip4_input_accept(netif)) {
 80209a6:	2800      	cmp	r0, #0
 80209a8:	f040 8097 	bne.w	8020ada <ip4_input+0x22a>
        NETIF_FOREACH(netif) {
 80209ac:	6836      	ldr	r6, [r6, #0]
 80209ae:	2e00      	cmp	r6, #0
 80209b0:	d1f0      	bne.n	8020994 <ip4_input+0xe4>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80209b2:	f898 3009 	ldrb.w	r3, [r8, #9]
 80209b6:	2b11      	cmp	r3, #17
 80209b8:	f000 8086 	beq.w	8020ac8 <ip4_input+0x218>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80209bc:	f8da 0010 	ldr.w	r0, [sl, #16]
 80209c0:	2800      	cmp	r0, #0
 80209c2:	f000 809e 	beq.w	8020b02 <ip4_input+0x252>
 80209c6:	2600      	movs	r6, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80209c8:	4639      	mov	r1, r7
 80209ca:	f000 f965 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 80209ce:	2800      	cmp	r0, #0
 80209d0:	d171      	bne.n	8020ab6 <ip4_input+0x206>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80209d2:	f8da 3010 	ldr.w	r3, [sl, #16]
 80209d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80209da:	2be0      	cmp	r3, #224	; 0xe0
 80209dc:	d06b      	beq.n	8020ab6 <ip4_input+0x206>
  if (netif == NULL) {
 80209de:	2e00      	cmp	r6, #0
 80209e0:	f000 808f 	beq.w	8020b02 <ip4_input+0x252>
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80209e4:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80209e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80209ec:	b143      	cbz	r3, 8020a00 <ip4_input+0x150>
    p = ip4_reass(p);
 80209ee:	4620      	mov	r0, r4
 80209f0:	f000 fb56 	bl	80210a0 <ip4_reass>
    if (p == NULL) {
 80209f4:	4604      	mov	r4, r0
 80209f6:	2800      	cmp	r0, #0
 80209f8:	f43f af75 	beq.w	80208e6 <ip4_input+0x36>
    iphdr = (const struct ip_hdr *)p->payload;
 80209fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
  ip_data.current_netif = netif;
 8020a00:	f8ca 6000 	str.w	r6, [sl]
  raw_status = raw_input(p, inp);
 8020a04:	4639      	mov	r1, r7
  ip_data.current_input_netif = inp;
 8020a06:	f8ca 7004 	str.w	r7, [sl, #4]
  raw_status = raw_input(p, inp);
 8020a0a:	4620      	mov	r0, r4
  ip_data.current_ip4_header = iphdr;
 8020a0c:	f8ca 8008 	str.w	r8, [sl, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020a10:	f898 3000 	ldrb.w	r3, [r8]
 8020a14:	f003 030f 	and.w	r3, r3, #15
 8020a18:	009b      	lsls	r3, r3, #2
 8020a1a:	f8aa 300c 	strh.w	r3, [sl, #12]
  raw_status = raw_input(p, inp);
 8020a1e:	f7f8 fe07 	bl	8019630 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8020a22:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8020a24:	4683      	mov	fp, r0
  if (raw_status != RAW_INPUT_EATEN)
 8020a26:	d02f      	beq.n	8020a88 <ip4_input+0x1d8>
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020a28:	4649      	mov	r1, r9
 8020a2a:	4620      	mov	r0, r4
 8020a2c:	f7f8 fa06 	bl	8018e3c <pbuf_remove_header>
    switch (IPH_PROTO(iphdr)) {
 8020a30:	f898 3009 	ldrb.w	r3, [r8, #9]
 8020a34:	2b06      	cmp	r3, #6
 8020a36:	d05f      	beq.n	8020af8 <ip4_input+0x248>
 8020a38:	2b11      	cmp	r3, #17
 8020a3a:	d058      	beq.n	8020aee <ip4_input+0x23e>
 8020a3c:	2b01      	cmp	r3, #1
 8020a3e:	d051      	beq.n	8020ae4 <ip4_input+0x234>
        if (raw_status == RAW_INPUT_DELIVERED) {
 8020a40:	f1bb 0f02 	cmp.w	fp, #2
 8020a44:	d01d      	beq.n	8020a82 <ip4_input+0x1d2>
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020a46:	4631      	mov	r1, r6
 8020a48:	f8da 0014 	ldr.w	r0, [sl, #20]
 8020a4c:	f000 f924 	bl	8020c98 <ip4_addr_isbroadcast_u32>
 8020a50:	b968      	cbnz	r0, 8020a6e <ip4_input+0x1be>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020a52:	f8da 3014 	ldr.w	r3, [sl, #20]
 8020a56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020a5a:	2be0      	cmp	r3, #224	; 0xe0
 8020a5c:	d007      	beq.n	8020a6e <ip4_input+0x1be>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020a5e:	4649      	mov	r1, r9
 8020a60:	4620      	mov	r0, r4
 8020a62:	f7f8 fa1f 	bl	8018ea4 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020a66:	2102      	movs	r1, #2
 8020a68:	4620      	mov	r0, r4
 8020a6a:	f7ff fec7 	bl	80207fc <icmp_dest_unreach>
          IP_STATS_INC(ip.proterr);
 8020a6e:	f8b5 2058 	ldrh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8020a72:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
          IP_STATS_INC(ip.proterr);
 8020a76:	3201      	adds	r2, #1
          IP_STATS_INC(ip.drop);
 8020a78:	3301      	adds	r3, #1
          IP_STATS_INC(ip.proterr);
 8020a7a:	f8a5 2058 	strh.w	r2, [r5, #88]	; 0x58
          IP_STATS_INC(ip.drop);
 8020a7e:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
        pbuf_free(p);
 8020a82:	4620      	mov	r0, r4
 8020a84:	f7f8 fa16 	bl	8018eb4 <pbuf_free>
  ip_data.current_netif = NULL;
 8020a88:	2300      	movs	r3, #0
}
 8020a8a:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8020a8c:	e9ca 3300 	strd	r3, r3, [sl]
  ip_data.current_ip4_header = NULL;
 8020a90:	f8ca 3008 	str.w	r3, [sl, #8]
  ip_data.current_ip_header_tot_len = 0;
 8020a94:	f8aa 300c 	strh.w	r3, [sl, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8020a98:	e9ca 3304 	strd	r3, r3, [sl, #16]
}
 8020a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020aa0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8020aa4:	07d9      	lsls	r1, r3, #31
 8020aa6:	d584      	bpl.n	80209b2 <ip4_input+0x102>
 8020aa8:	687b      	ldr	r3, [r7, #4]
 8020aaa:	2b00      	cmp	r3, #0
 8020aac:	d081      	beq.n	80209b2 <ip4_input+0x102>
 8020aae:	463e      	mov	r6, r7
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8020ab0:	2800      	cmp	r0, #0
 8020ab2:	d097      	beq.n	80209e4 <ip4_input+0x134>
 8020ab4:	e788      	b.n	80209c8 <ip4_input+0x118>
      pbuf_free(p);
 8020ab6:	4620      	mov	r0, r4
 8020ab8:	f7f8 f9fc 	bl	8018eb4 <pbuf_free>
      IP_STATS_INC(ip.drop);
 8020abc:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
 8020ac0:	3301      	adds	r3, #1
 8020ac2:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
      return ERR_OK;
 8020ac6:	e70e      	b.n	80208e6 <ip4_input+0x36>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8020ac8:	eb08 0309 	add.w	r3, r8, r9
 8020acc:	885b      	ldrh	r3, [r3, #2]
 8020ace:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8020ad2:	f47f af73 	bne.w	80209bc <ip4_input+0x10c>
 8020ad6:	463e      	mov	r6, r7
 8020ad8:	e781      	b.n	80209de <ip4_input+0x12e>
 8020ada:	f8da 0010 	ldr.w	r0, [sl, #16]
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8020ade:	2800      	cmp	r0, #0
 8020ae0:	d080      	beq.n	80209e4 <ip4_input+0x134>
 8020ae2:	e771      	b.n	80209c8 <ip4_input+0x118>
        icmp_input(p, inp);
 8020ae4:	4639      	mov	r1, r7
 8020ae6:	4620      	mov	r0, r4
 8020ae8:	f7ff fd8a 	bl	8020600 <icmp_input>
        break;
 8020aec:	e7cc      	b.n	8020a88 <ip4_input+0x1d8>
        udp_input(p, inp);
 8020aee:	4639      	mov	r1, r7
 8020af0:	4620      	mov	r0, r4
 8020af2:	f7fd f953 	bl	801dd9c <udp_input>
        break;
 8020af6:	e7c7      	b.n	8020a88 <ip4_input+0x1d8>
        tcp_input(p, inp);
 8020af8:	4639      	mov	r1, r7
 8020afa:	4620      	mov	r0, r4
 8020afc:	f7fa fee8 	bl	801b8d0 <tcp_input>
        break;
 8020b00:	e7c2      	b.n	8020a88 <ip4_input+0x1d8>
      IP_STATS_INC(ip.drop);
 8020b02:	f8b5 304e 	ldrh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 8020b06:	4620      	mov	r0, r4
      IP_STATS_INC(ip.drop);
 8020b08:	3301      	adds	r3, #1
 8020b0a:	f8a5 304e 	strh.w	r3, [r5, #78]	; 0x4e
    pbuf_free(p);
 8020b0e:	f7f8 f9d1 	bl	8018eb4 <pbuf_free>
    return ERR_OK;
 8020b12:	e6e8      	b.n	80208e6 <ip4_input+0x36>
 8020b14:	2002e38c 	.word	0x2002e38c
 8020b18:	2002e380 	.word	0x2002e380
 8020b1c:	2001f464 	.word	0x2001f464

08020b20 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b24:	461d      	mov	r5, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020b26:	7b83      	ldrb	r3, [r0, #14]
{
 8020b28:	b083      	sub	sp, #12
 8020b2a:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020b2c:	2b01      	cmp	r3, #1
{
 8020b2e:	4689      	mov	r9, r1
 8020b30:	4617      	mov	r7, r2
 8020b32:	f89d a030 	ldrb.w	sl, [sp, #48]	; 0x30
 8020b36:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 8020b3a:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020b3e:	d15f      	bne.n	8020c00 <ip4_output_if_src+0xe0>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8020b40:	2f00      	cmp	r7, #0
 8020b42:	d066      	beq.n	8020c12 <ip4_output_if_src+0xf2>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020b44:	2114      	movs	r1, #20
 8020b46:	4620      	mov	r0, r4
 8020b48:	f7f8 f974 	bl	8018e34 <pbuf_add_header>
 8020b4c:	2800      	cmp	r0, #0
 8020b4e:	d17a      	bne.n	8020c46 <ip4_output_if_src+0x126>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020b50:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8020b52:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020b54:	2b13      	cmp	r3, #19
 8020b56:	d964      	bls.n	8020c22 <ip4_output_if_src+0x102>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8020b58:	7235      	strb	r5, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8020b5a:	ea4b 2505 	orr.w	r5, fp, r5, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8020b5e:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8020b62:	ea4f 210a 	mov.w	r1, sl, lsl #8
    ip4_addr_copy(iphdr->dest, *dest);
 8020b66:	683a      	ldr	r2, [r7, #0]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8020b68:	122b      	asrs	r3, r5, #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8020b6a:	f041 0145 	orr.w	r1, r1, #69	; 0x45
    IPH_TOS_SET(iphdr, tos);
 8020b6e:	f886 a001 	strb.w	sl, [r6, #1]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 8020b72:	0c10      	lsrs	r0, r2, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8020b74:	6132      	str	r2, [r6, #16]
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8020b76:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020b7a:	2345      	movs	r3, #69	; 0x45
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8020b7c:	fa10 f282 	uxtah	r2, r0, r2
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020b80:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 8020c70 <ip4_output_if_src+0x150>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020b84:	7033      	strb	r3, [r6, #0]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8020b86:	440a      	add	r2, r1
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020b88:	8920      	ldrh	r0, [r4, #8]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8020b8a:	fa12 f585 	uxtah	r5, r2, r5
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020b8e:	f7f6 fb3d 	bl	801720c <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8020b92:	2200      	movs	r2, #0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020b94:	4603      	mov	r3, r0
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020b96:	f8ba 0000 	ldrh.w	r0, [sl]
    IPH_OFFSET_SET(iphdr, 0);
 8020b9a:	71b2      	strb	r2, [r6, #6]
    chk_sum += iphdr->_len;
 8020b9c:	441d      	add	r5, r3
    IPH_OFFSET_SET(iphdr, 0);
 8020b9e:	71f2      	strb	r2, [r6, #7]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020ba0:	8073      	strh	r3, [r6, #2]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020ba2:	f7f6 fb33 	bl	801720c <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020ba6:	f8ba 3000 	ldrh.w	r3, [sl]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020baa:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 8020bac:	1c5a      	adds	r2, r3, #1
    chk_sum += iphdr->_id;
 8020bae:	1943      	adds	r3, r0, r5
    ++ip_id;
 8020bb0:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 8020bb4:	f1b9 0f00 	cmp.w	r9, #0
 8020bb8:	d03b      	beq.n	8020c32 <ip4_output_if_src+0x112>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020bba:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 8020bbe:	fa13 f382 	uxtah	r3, r3, r2
 8020bc2:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 8020bc4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 8020bc8:	b29a      	uxth	r2, r3
 8020bca:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 8020bce:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 8020bd2:	43db      	mvns	r3, r3
 8020bd4:	8173      	strh	r3, [r6, #10]
    iphdr = (struct ip_hdr *)p->payload;
    ip4_addr_copy(dest_addr, iphdr->dest);
    dest = &dest_addr;
  }

  IP_STATS_INC(ip.xmit);
 8020bd6:	4a20      	ldr	r2, [pc, #128]	; (8020c58 <ip4_output_if_src+0x138>)
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020bd8:	f8b8 102c 	ldrh.w	r1, [r8, #44]	; 0x2c
  IP_STATS_INC(ip.xmit);
 8020bdc:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8020be0:	3301      	adds	r3, #1
 8020be2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
    return ip4_frag(p, netif, dest);
 8020be6:	463a      	mov	r2, r7
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020be8:	b111      	cbz	r1, 8020bf0 <ip4_output_if_src+0xd0>
 8020bea:	8923      	ldrh	r3, [r4, #8]
 8020bec:	428b      	cmp	r3, r1
 8020bee:	d823      	bhi.n	8020c38 <ip4_output_if_src+0x118>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8020bf0:	4621      	mov	r1, r4
 8020bf2:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8020bf6:	4640      	mov	r0, r8
 8020bf8:	4798      	blx	r3
}
 8020bfa:	b003      	add	sp, #12
 8020bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020c00:	4b16      	ldr	r3, [pc, #88]	; (8020c5c <ip4_output_if_src+0x13c>)
 8020c02:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020c06:	4916      	ldr	r1, [pc, #88]	; (8020c60 <ip4_output_if_src+0x140>)
 8020c08:	4816      	ldr	r0, [pc, #88]	; (8020c64 <ip4_output_if_src+0x144>)
 8020c0a:	f002 fa6b 	bl	80230e4 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8020c0e:	2f00      	cmp	r7, #0
 8020c10:	d198      	bne.n	8020b44 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8020c12:	8963      	ldrh	r3, [r4, #10]
 8020c14:	2b13      	cmp	r3, #19
 8020c16:	d916      	bls.n	8020c46 <ip4_output_if_src+0x126>
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020c18:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8020c1a:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020c1c:	691b      	ldr	r3, [r3, #16]
 8020c1e:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8020c20:	e7d9      	b.n	8020bd6 <ip4_output_if_src+0xb6>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020c22:	4b0e      	ldr	r3, [pc, #56]	; (8020c5c <ip4_output_if_src+0x13c>)
 8020c24:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020c28:	490f      	ldr	r1, [pc, #60]	; (8020c68 <ip4_output_if_src+0x148>)
 8020c2a:	480e      	ldr	r0, [pc, #56]	; (8020c64 <ip4_output_if_src+0x144>)
 8020c2c:	f002 fa5a 	bl	80230e4 <iprintf>
 8020c30:	e792      	b.n	8020b58 <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020c32:	4a0e      	ldr	r2, [pc, #56]	; (8020c6c <ip4_output_if_src+0x14c>)
 8020c34:	6812      	ldr	r2, [r2, #0]
 8020c36:	e7c2      	b.n	8020bbe <ip4_output_if_src+0x9e>
    return ip4_frag(p, netif, dest);
 8020c38:	4641      	mov	r1, r8
 8020c3a:	4620      	mov	r0, r4
 8020c3c:	f000 fc70 	bl	8021520 <ip4_frag>
}
 8020c40:	b003      	add	sp, #12
 8020c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      IP_STATS_INC(ip.err);
 8020c46:	4a04      	ldr	r2, [pc, #16]	; (8020c58 <ip4_output_if_src+0x138>)
      return ERR_BUF;
 8020c48:	f06f 0001 	mvn.w	r0, #1
      IP_STATS_INC(ip.err);
 8020c4c:	f8b2 305c 	ldrh.w	r3, [r2, #92]	; 0x5c
 8020c50:	3301      	adds	r3, #1
 8020c52:	f8a2 305c 	strh.w	r3, [r2, #92]	; 0x5c
      return ERR_BUF;
 8020c56:	e7d0      	b.n	8020bfa <ip4_output_if_src+0xda>
 8020c58:	2002e38c 	.word	0x2002e38c
 8020c5c:	080427d0 	.word	0x080427d0
 8020c60:	08042804 	.word	0x08042804
 8020c64:	08029ba0 	.word	0x08029ba0
 8020c68:	08042810 	.word	0x08042810
 8020c6c:	08042888 	.word	0x08042888
 8020c70:	2001ad8a 	.word	0x2001ad8a

08020c74 <ip4_output_if>:
{
 8020c74:	b4f0      	push	{r4, r5, r6, r7}
 8020c76:	9c06      	ldr	r4, [sp, #24]
 8020c78:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8020c7c:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020c80:	b11a      	cbz	r2, 8020c8a <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 8020c82:	b109      	cbz	r1, 8020c88 <ip4_output_if+0x14>
 8020c84:	680f      	ldr	r7, [r1, #0]
 8020c86:	b907      	cbnz	r7, 8020c8a <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8020c88:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020c8a:	9504      	str	r5, [sp, #16]
 8020c8c:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8020c90:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020c92:	f7ff bf45 	b.w	8020b20 <ip4_output_if_src>
 8020c96:	bf00      	nop

08020c98 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8020c98:	1e43      	subs	r3, r0, #1
{
 8020c9a:	4602      	mov	r2, r0
  if ((~addr == IPADDR_ANY) ||
 8020c9c:	3303      	adds	r3, #3
 8020c9e:	d815      	bhi.n	8020ccc <ip4_addr_isbroadcast_u32+0x34>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8020ca0:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8020ca4:	f013 0002 	ands.w	r0, r3, #2
 8020ca8:	d00f      	beq.n	8020cca <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8020caa:	6848      	ldr	r0, [r1, #4]
 8020cac:	4290      	cmp	r0, r2
 8020cae:	d00b      	beq.n	8020cc8 <ip4_addr_isbroadcast_u32+0x30>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8020cb0:	688b      	ldr	r3, [r1, #8]
 8020cb2:	4050      	eors	r0, r2
 8020cb4:	4218      	tst	r0, r3
 8020cb6:	d107      	bne.n	8020cc8 <ip4_addr_isbroadcast_u32+0x30>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8020cb8:	ea22 0203 	bic.w	r2, r2, r3
 8020cbc:	43d8      	mvns	r0, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 8020cbe:	1a10      	subs	r0, r2, r0
 8020cc0:	fab0 f080 	clz	r0, r0
 8020cc4:	0940      	lsrs	r0, r0, #5
 8020cc6:	4770      	bx	lr
 8020cc8:	2000      	movs	r0, #0
  }
}
 8020cca:	4770      	bx	lr
    return 1;
 8020ccc:	2001      	movs	r0, #1
 8020cce:	4770      	bx	lr

08020cd0 <ip4addr_aton>:
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8020cd0:	f8df c14c 	ldr.w	ip, [pc, #332]	; 8020e20 <ip4addr_aton+0x150>
  c = *cp;
 8020cd4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 8020cd6:	f81c 2003 	ldrb.w	r2, [ip, r3]
 8020cda:	0752      	lsls	r2, r2, #29
 8020cdc:	f140 808e 	bpl.w	8020dfc <ip4addr_aton+0x12c>
{
 8020ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ce4:	b084      	sub	sp, #16
 8020ce6:	460e      	mov	r6, r1
  u32_t *pp = parts;
 8020ce8:	46e9      	mov	r9, sp
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8020cea:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 8020cee:	46ce      	mov	lr, r9
    if (c == '0') {
 8020cf0:	2b30      	cmp	r3, #48	; 0x30
 8020cf2:	d030      	beq.n	8020d56 <ip4addr_aton+0x86>
    base = 10;
 8020cf4:	210a      	movs	r1, #10
 8020cf6:	2400      	movs	r4, #0
 8020cf8:	e003      	b.n	8020d02 <ip4addr_aton+0x32>
        val = (val * base) + (u32_t)(c - '0');
 8020cfa:	f1a7 0430 	sub.w	r4, r7, #48	; 0x30
        c = *++cp;
 8020cfe:	7843      	ldrb	r3, [r0, #1]
 8020d00:	3001      	adds	r0, #1
      if (lwip_isdigit(c)) {
 8020d02:	f81c 2003 	ldrb.w	r2, [ip, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020d06:	f103 050a 	add.w	r5, r3, #10
        val = (val * base) + (u32_t)(c - '0');
 8020d0a:	fb04 3701 	mla	r7, r4, r1, r3
      if (lwip_isdigit(c)) {
 8020d0e:	f012 0f04 	tst.w	r2, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020d12:	f002 0a03 	and.w	sl, r2, #3
      if (lwip_isdigit(c)) {
 8020d16:	d1f0      	bne.n	8020cfa <ip4addr_aton+0x2a>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8020d18:	2910      	cmp	r1, #16
 8020d1a:	d10c      	bne.n	8020d36 <ip4addr_aton+0x66>
 8020d1c:	f012 0f44 	tst.w	r2, #68	; 0x44
 8020d20:	d009      	beq.n	8020d36 <ip4addr_aton+0x66>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020d22:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8020d26:	7843      	ldrb	r3, [r0, #1]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8020d28:	bf0c      	ite	eq
 8020d2a:	2261      	moveq	r2, #97	; 0x61
 8020d2c:	2241      	movne	r2, #65	; 0x41
 8020d2e:	1aad      	subs	r5, r5, r2
 8020d30:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
        c = *++cp;
 8020d34:	e7e4      	b.n	8020d00 <ip4addr_aton+0x30>
    if (c == '.') {
 8020d36:	2b2e      	cmp	r3, #46	; 0x2e
 8020d38:	d119      	bne.n	8020d6e <ip4addr_aton+0x9e>
      if (pp >= parts + 3) {
 8020d3a:	45c6      	cmp	lr, r8
 8020d3c:	d007      	beq.n	8020d4e <ip4addr_aton+0x7e>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 8020d3e:	7843      	ldrb	r3, [r0, #1]
 8020d40:	3001      	adds	r0, #1
      *pp++ = val;
 8020d42:	f84e 4b04 	str.w	r4, [lr], #4
    if (!lwip_isdigit(c)) {
 8020d46:	f81c 2003 	ldrb.w	r2, [ip, r3]
 8020d4a:	0752      	lsls	r2, r2, #29
 8020d4c:	d4d0      	bmi.n	8020cf0 <ip4addr_aton+0x20>
      return 0;
 8020d4e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8020d50:	b004      	add	sp, #16
 8020d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      c = *++cp;
 8020d56:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8020d58:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 8020d5c:	2a58      	cmp	r2, #88	; 0x58
 8020d5e:	d002      	beq.n	8020d66 <ip4addr_aton+0x96>
      c = *++cp;
 8020d60:	3001      	adds	r0, #1
        base = 8;
 8020d62:	2108      	movs	r1, #8
 8020d64:	e7c7      	b.n	8020cf6 <ip4addr_aton+0x26>
        c = *++cp;
 8020d66:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8020d68:	2110      	movs	r1, #16
        c = *++cp;
 8020d6a:	3002      	adds	r0, #2
 8020d6c:	e7c3      	b.n	8020cf6 <ip4addr_aton+0x26>
  if (c != '\0' && !lwip_isspace(c)) {
 8020d6e:	b10b      	cbz	r3, 8020d74 <ip4addr_aton+0xa4>
 8020d70:	0713      	lsls	r3, r2, #28
 8020d72:	d5ec      	bpl.n	8020d4e <ip4addr_aton+0x7e>
  switch (pp - parts + 1) {
 8020d74:	ebae 0009 	sub.w	r0, lr, r9
 8020d78:	1080      	asrs	r0, r0, #2
 8020d7a:	3001      	adds	r0, #1
 8020d7c:	2804      	cmp	r0, #4
 8020d7e:	d841      	bhi.n	8020e04 <ip4addr_aton+0x134>
 8020d80:	a301      	add	r3, pc, #4	; (adr r3, 8020d88 <ip4addr_aton+0xb8>)
 8020d82:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8020d86:	bf00      	nop
 8020d88:	08020d51 	.word	0x08020d51
 8020d8c:	08020dbf 	.word	0x08020dbf
 8020d90:	08020deb 	.word	0x08020deb
 8020d94:	08020dcf 	.word	0x08020dcf
 8020d98:	08020d9d 	.word	0x08020d9d
      if (val > 0xff) {
 8020d9c:	2cff      	cmp	r4, #255	; 0xff
 8020d9e:	d8d6      	bhi.n	8020d4e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 8020da0:	9900      	ldr	r1, [sp, #0]
 8020da2:	29ff      	cmp	r1, #255	; 0xff
 8020da4:	d8d3      	bhi.n	8020d4e <ip4addr_aton+0x7e>
 8020da6:	9b01      	ldr	r3, [sp, #4]
 8020da8:	2bff      	cmp	r3, #255	; 0xff
 8020daa:	d8d0      	bhi.n	8020d4e <ip4addr_aton+0x7e>
 8020dac:	9a02      	ldr	r2, [sp, #8]
 8020dae:	2aff      	cmp	r2, #255	; 0xff
 8020db0:	d8cd      	bhi.n	8020d4e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8020db2:	041b      	lsls	r3, r3, #16
 8020db4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8020db8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8020dbc:	431c      	orrs	r4, r3
  if (addr) {
 8020dbe:	b1fe      	cbz	r6, 8020e00 <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	f7f6 fa27 	bl	8017214 <lwip_htonl>
 8020dc6:	4603      	mov	r3, r0
  return 1;
 8020dc8:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8020dca:	6033      	str	r3, [r6, #0]
 8020dcc:	e7c0      	b.n	8020d50 <ip4addr_aton+0x80>
      if (val > 0xffff) {
 8020dce:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 8020dd2:	d2bc      	bcs.n	8020d4e <ip4addr_aton+0x7e>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 8020dd4:	9a00      	ldr	r2, [sp, #0]
 8020dd6:	2aff      	cmp	r2, #255	; 0xff
 8020dd8:	d8b9      	bhi.n	8020d4e <ip4addr_aton+0x7e>
 8020dda:	9b01      	ldr	r3, [sp, #4]
 8020ddc:	2bff      	cmp	r3, #255	; 0xff
 8020dde:	d8b6      	bhi.n	8020d4e <ip4addr_aton+0x7e>
      val |= (parts[0] << 24) | (parts[1] << 16);
 8020de0:	041b      	lsls	r3, r3, #16
 8020de2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8020de6:	431c      	orrs	r4, r3
      break;
 8020de8:	e7e9      	b.n	8020dbe <ip4addr_aton+0xee>
      if (val > 0xffffffUL) {
 8020dea:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8020dee:	d2ae      	bcs.n	8020d4e <ip4addr_aton+0x7e>
      if (parts[0] > 0xff) {
 8020df0:	9b00      	ldr	r3, [sp, #0]
 8020df2:	2bff      	cmp	r3, #255	; 0xff
 8020df4:	d8ab      	bhi.n	8020d4e <ip4addr_aton+0x7e>
      val |= parts[0] << 24;
 8020df6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
      break;
 8020dfa:	e7e0      	b.n	8020dbe <ip4addr_aton+0xee>
      return 0;
 8020dfc:	2000      	movs	r0, #0
}
 8020dfe:	4770      	bx	lr
  return 1;
 8020e00:	2001      	movs	r0, #1
 8020e02:	e7a5      	b.n	8020d50 <ip4addr_aton+0x80>
      LWIP_ASSERT("unhandled", 0);
 8020e04:	4b03      	ldr	r3, [pc, #12]	; (8020e14 <ip4addr_aton+0x144>)
 8020e06:	22f9      	movs	r2, #249	; 0xf9
 8020e08:	4903      	ldr	r1, [pc, #12]	; (8020e18 <ip4addr_aton+0x148>)
 8020e0a:	4804      	ldr	r0, [pc, #16]	; (8020e1c <ip4addr_aton+0x14c>)
 8020e0c:	f002 f96a 	bl	80230e4 <iprintf>
      break;
 8020e10:	e7d5      	b.n	8020dbe <ip4addr_aton+0xee>
 8020e12:	bf00      	nop
 8020e14:	08042840 	.word	0x08042840
 8020e18:	0804287c 	.word	0x0804287c
 8020e1c:	08029ba0 	.word	0x08029ba0
 8020e20:	08042ae5 	.word	0x08042ae5

08020e24 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8020e24:	b538      	push	{r3, r4, r5, lr}
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8020e26:	4b0f      	ldr	r3, [pc, #60]	; (8020e64 <ip_reass_dequeue_datagram+0x40>)
{
 8020e28:	4604      	mov	r4, r0
  if (reassdatagrams == ipr) {
 8020e2a:	681a      	ldr	r2, [r3, #0]
 8020e2c:	4282      	cmp	r2, r0
 8020e2e:	d009      	beq.n	8020e44 <ip_reass_dequeue_datagram+0x20>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020e30:	460d      	mov	r5, r1
 8020e32:	b179      	cbz	r1, 8020e54 <ip_reass_dequeue_datagram+0x30>
    prev->next = ipr->next;
 8020e34:	6823      	ldr	r3, [r4, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8020e36:	4621      	mov	r1, r4
 8020e38:	2005      	movs	r0, #5
    prev->next = ipr->next;
 8020e3a:	602b      	str	r3, [r5, #0]
}
 8020e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8020e40:	f7f7 bd68 	b.w	8018914 <memp_free>
    reassdatagrams = ipr->next;
 8020e44:	6802      	ldr	r2, [r0, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8020e46:	4621      	mov	r1, r4
 8020e48:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 8020e4a:	601a      	str	r2, [r3, #0]
}
 8020e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_free(MEMP_REASSDATA, ipr);
 8020e50:	f7f7 bd60 	b.w	8018914 <memp_free>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8020e54:	4b04      	ldr	r3, [pc, #16]	; (8020e68 <ip_reass_dequeue_datagram+0x44>)
 8020e56:	f240 1245 	movw	r2, #325	; 0x145
 8020e5a:	4904      	ldr	r1, [pc, #16]	; (8020e6c <ip_reass_dequeue_datagram+0x48>)
 8020e5c:	4804      	ldr	r0, [pc, #16]	; (8020e70 <ip_reass_dequeue_datagram+0x4c>)
 8020e5e:	f002 f941 	bl	80230e4 <iprintf>
 8020e62:	e7e7      	b.n	8020e34 <ip_reass_dequeue_datagram+0x10>
 8020e64:	2001ad90 	.word	0x2001ad90
 8020e68:	08042890 	.word	0x08042890
 8020e6c:	080428cc 	.word	0x080428cc
 8020e70:	08029ba0 	.word	0x08029ba0

08020e74 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020e74:	4281      	cmp	r1, r0
{
 8020e76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e7a:	4606      	mov	r6, r0
 8020e7c:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020e7e:	d072      	beq.n	8020f66 <ip_reass_free_complete_datagram+0xf2>
  if (prev != NULL) {
 8020e80:	b147      	cbz	r7, 8020e94 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8020e82:	683b      	ldr	r3, [r7, #0]
 8020e84:	42b3      	cmp	r3, r6
 8020e86:	d005      	beq.n	8020e94 <ip_reass_free_complete_datagram+0x20>
 8020e88:	4b3a      	ldr	r3, [pc, #232]	; (8020f74 <ip_reass_free_complete_datagram+0x100>)
 8020e8a:	22ad      	movs	r2, #173	; 0xad
 8020e8c:	493a      	ldr	r1, [pc, #232]	; (8020f78 <ip_reass_free_complete_datagram+0x104>)
 8020e8e:	483b      	ldr	r0, [pc, #236]	; (8020f7c <ip_reass_free_complete_datagram+0x108>)
 8020e90:	f002 f928 	bl	80230e4 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8020e94:	6875      	ldr	r5, [r6, #4]
 8020e96:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8020e98:	889a      	ldrh	r2, [r3, #4]
 8020e9a:	2a00      	cmp	r2, #0
 8020e9c:	d03f      	beq.n	8020f1e <ip_reass_free_complete_datagram+0xaa>
  u16_t pbufs_freed = 0;
 8020e9e:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020ea2:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 8020f74 <ip_reass_free_complete_datagram+0x100>
 8020ea6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8020f8c <ip_reass_free_complete_datagram+0x118>
 8020eaa:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8020f7c <ip_reass_free_complete_datagram+0x108>
 8020eae:	e005      	b.n	8020ebc <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8020eb0:	4628      	mov	r0, r5
  while (p != NULL) {
 8020eb2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8020eb4:	f7f7 fffe 	bl	8018eb4 <pbuf_free>
  while (p != NULL) {
 8020eb8:	b1b4      	cbz	r4, 8020ee8 <ip_reass_free_complete_datagram+0x74>
 8020eba:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8020ebc:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8020ebe:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8020ec0:	f7f8 f95c 	bl	801917c <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020ec4:	4458      	add	r0, fp
 8020ec6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8020eca:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8020ece:	dbef      	blt.n	8020eb0 <ip_reass_free_complete_datagram+0x3c>
 8020ed0:	4653      	mov	r3, sl
 8020ed2:	22cc      	movs	r2, #204	; 0xcc
 8020ed4:	4649      	mov	r1, r9
 8020ed6:	4640      	mov	r0, r8
 8020ed8:	f002 f904 	bl	80230e4 <iprintf>
    pbuf_free(pcur);
 8020edc:	4628      	mov	r0, r5
  while (p != NULL) {
 8020ede:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8020ee0:	f7f7 ffe8 	bl	8018eb4 <pbuf_free>
  while (p != NULL) {
 8020ee4:	2c00      	cmp	r4, #0
 8020ee6:	d1e8      	bne.n	8020eba <ip_reass_free_complete_datagram+0x46>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020ee8:	4c25      	ldr	r4, [pc, #148]	; (8020f80 <ip_reass_free_complete_datagram+0x10c>)
  ip_reass_dequeue_datagram(ipr, prev);
 8020eea:	4639      	mov	r1, r7
 8020eec:	4630      	mov	r0, r6
 8020eee:	f7ff ff99 	bl	8020e24 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020ef2:	8823      	ldrh	r3, [r4, #0]
 8020ef4:	455b      	cmp	r3, fp
 8020ef6:	d305      	bcc.n	8020f04 <ip_reass_free_complete_datagram+0x90>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020ef8:	eba3 030b 	sub.w	r3, r3, fp
}
 8020efc:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020efe:	8023      	strh	r3, [r4, #0]
}
 8020f00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8020f04:	4b1b      	ldr	r3, [pc, #108]	; (8020f74 <ip_reass_free_complete_datagram+0x100>)
 8020f06:	22d2      	movs	r2, #210	; 0xd2
 8020f08:	491e      	ldr	r1, [pc, #120]	; (8020f84 <ip_reass_free_complete_datagram+0x110>)
 8020f0a:	481c      	ldr	r0, [pc, #112]	; (8020f7c <ip_reass_free_complete_datagram+0x108>)
 8020f0c:	f002 f8ea 	bl	80230e4 <iprintf>
 8020f10:	8823      	ldrh	r3, [r4, #0]
}
 8020f12:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8020f14:	eba3 030b 	sub.w	r3, r3, fp
 8020f18:	8023      	strh	r3, [r4, #0]
}
 8020f1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020f1e:	4632      	mov	r2, r6
    ipr->p = iprh->next_pbuf;
 8020f20:	6818      	ldr	r0, [r3, #0]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020f22:	2101      	movs	r1, #1
    ipr->p = iprh->next_pbuf;
 8020f24:	6070      	str	r0, [r6, #4]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020f26:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8020f28:	f852 4f08 	ldr.w	r4, [r2, #8]!
 8020f2c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8020f30:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8020f34:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8020f38:	601c      	str	r4, [r3, #0]
 8020f3a:	f8c3 8004 	str.w	r8, [r3, #4]
 8020f3e:	f8c3 e008 	str.w	lr, [r3, #8]
 8020f42:	f8c3 c00c 	str.w	ip, [r3, #12]
 8020f46:	6914      	ldr	r4, [r2, #16]
 8020f48:	611c      	str	r4, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8020f4a:	f7ff fc5d 	bl	8020808 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8020f4e:	4628      	mov	r0, r5
 8020f50:	f7f8 f914 	bl	801917c <pbuf_clen>
 8020f54:	4683      	mov	fp, r0
    pbuf_free(p);
 8020f56:	4628      	mov	r0, r5
 8020f58:	f7f7 ffac 	bl	8018eb4 <pbuf_free>
  p = ipr->p;
 8020f5c:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8020f5e:	2d00      	cmp	r5, #0
 8020f60:	d0c2      	beq.n	8020ee8 <ip_reass_free_complete_datagram+0x74>
 8020f62:	686b      	ldr	r3, [r5, #4]
 8020f64:	e79d      	b.n	8020ea2 <ip_reass_free_complete_datagram+0x2e>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8020f66:	4b03      	ldr	r3, [pc, #12]	; (8020f74 <ip_reass_free_complete_datagram+0x100>)
 8020f68:	22ab      	movs	r2, #171	; 0xab
 8020f6a:	4907      	ldr	r1, [pc, #28]	; (8020f88 <ip_reass_free_complete_datagram+0x114>)
 8020f6c:	4803      	ldr	r0, [pc, #12]	; (8020f7c <ip_reass_free_complete_datagram+0x108>)
 8020f6e:	f002 f8b9 	bl	80230e4 <iprintf>
 8020f72:	e785      	b.n	8020e80 <ip_reass_free_complete_datagram+0xc>
 8020f74:	08042890 	.word	0x08042890
 8020f78:	080428f4 	.word	0x080428f4
 8020f7c:	08029ba0 	.word	0x08029ba0
 8020f80:	2001ad8c 	.word	0x2001ad8c
 8020f84:	08042928 	.word	0x08042928
 8020f88:	080428e8 	.word	0x080428e8
 8020f8c:	08042908 	.word	0x08042908

08020f90 <ip_reass_remove_oldest_datagram>:
{
 8020f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8020f94:	2700      	movs	r7, #0
 8020f96:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8021000 <ip_reass_remove_oldest_datagram+0x70>
{
 8020f9a:	4605      	mov	r5, r0
 8020f9c:	460e      	mov	r6, r1
    r = reassdatagrams;
 8020f9e:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8020fa2:	b1f3      	cbz	r3, 8020fe2 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8020fa4:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020fa6:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8020faa:	4621      	mov	r1, r4
    prev = NULL;
 8020fac:	46a4      	mov	ip, r4
    oldest = NULL;
 8020fae:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020fb0:	695a      	ldr	r2, [r3, #20]
 8020fb2:	4572      	cmp	r2, lr
 8020fb4:	d018      	beq.n	8020fe8 <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8020fb6:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8020fb8:	b120      	cbz	r0, 8020fc4 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 8020fba:	f893 901f 	ldrb.w	r9, [r3, #31]
 8020fbe:	7fc2      	ldrb	r2, [r0, #31]
 8020fc0:	4591      	cmp	r9, r2
 8020fc2:	d801      	bhi.n	8020fc8 <ip_reass_remove_oldest_datagram+0x38>
 8020fc4:	4661      	mov	r1, ip
 8020fc6:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8020fc8:	681a      	ldr	r2, [r3, #0]
 8020fca:	469c      	mov	ip, r3
 8020fcc:	4613      	mov	r3, r2
 8020fce:	2a00      	cmp	r2, #0
 8020fd0:	d1ee      	bne.n	8020fb0 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8020fd2:	b110      	cbz	r0, 8020fda <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8020fd4:	f7ff ff4e 	bl	8020e74 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8020fd8:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8020fda:	42b7      	cmp	r7, r6
 8020fdc:	da01      	bge.n	8020fe2 <ip_reass_remove_oldest_datagram+0x52>
 8020fde:	2c01      	cmp	r4, #1
 8020fe0:	dcdd      	bgt.n	8020f9e <ip_reass_remove_oldest_datagram+0xe>
}
 8020fe2:	4638      	mov	r0, r7
 8020fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8020fe8:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8020fec:	699a      	ldr	r2, [r3, #24]
 8020fee:	454a      	cmp	r2, r9
 8020ff0:	d1e1      	bne.n	8020fb6 <ip_reass_remove_oldest_datagram+0x26>
 8020ff2:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8020ff6:	88aa      	ldrh	r2, [r5, #4]
 8020ff8:	4591      	cmp	r9, r2
 8020ffa:	d1dc      	bne.n	8020fb6 <ip_reass_remove_oldest_datagram+0x26>
 8020ffc:	e7e4      	b.n	8020fc8 <ip_reass_remove_oldest_datagram+0x38>
 8020ffe:	bf00      	nop
 8021000:	2001ad90 	.word	0x2001ad90

08021004 <ip_frag_free_pbuf_custom_ref>:
}

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021004:	b510      	push	{r4, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 8021006:	4604      	mov	r4, r0
 8021008:	b128      	cbz	r0, 8021016 <ip_frag_free_pbuf_custom_ref+0x12>
  memp_free(MEMP_FRAG_PBUF, p);
 802100a:	4621      	mov	r1, r4
 802100c:	2006      	movs	r0, #6
}
 802100e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8021012:	f7f7 bc7f 	b.w	8018914 <memp_free>
  LWIP_ASSERT("p != NULL", p != NULL);
 8021016:	4906      	ldr	r1, [pc, #24]	; (8021030 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021018:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802101c:	4b05      	ldr	r3, [pc, #20]	; (8021034 <ip_frag_free_pbuf_custom_ref+0x30>)
 802101e:	4806      	ldr	r0, [pc, #24]	; (8021038 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021020:	f002 f860 	bl	80230e4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021024:	4621      	mov	r1, r4
 8021026:	2006      	movs	r0, #6
}
 8021028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 802102c:	f7f7 bc72 	b.w	8018914 <memp_free>
 8021030:	080422fc 	.word	0x080422fc
 8021034:	08042890 	.word	0x08042890
 8021038:	08029ba0 	.word	0x08029ba0

0802103c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 802103c:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802103e:	4604      	mov	r4, r0
 8021040:	b140      	cbz	r0, 8021054 <ipfrag_free_pbuf_custom+0x18>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8021042:	6960      	ldr	r0, [r4, #20]
 8021044:	b108      	cbz	r0, 802104a <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8021046:	f7f7 ff35 	bl	8018eb4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 802104a:	4620      	mov	r0, r4
}
 802104c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ip_frag_free_pbuf_custom_ref(pcr);
 8021050:	f7ff bfd8 	b.w	8021004 <ip_frag_free_pbuf_custom_ref>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021054:	4b03      	ldr	r3, [pc, #12]	; (8021064 <ipfrag_free_pbuf_custom+0x28>)
 8021056:	f240 22ce 	movw	r2, #718	; 0x2ce
 802105a:	4903      	ldr	r1, [pc, #12]	; (8021068 <ipfrag_free_pbuf_custom+0x2c>)
 802105c:	4803      	ldr	r0, [pc, #12]	; (802106c <ipfrag_free_pbuf_custom+0x30>)
 802105e:	f002 f841 	bl	80230e4 <iprintf>
 8021062:	e7ee      	b.n	8021042 <ipfrag_free_pbuf_custom+0x6>
 8021064:	08042890 	.word	0x08042890
 8021068:	0804294c 	.word	0x0804294c
 802106c:	08029ba0 	.word	0x08029ba0

08021070 <ip_reass_tmr>:
{
 8021070:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8021072:	4b0a      	ldr	r3, [pc, #40]	; (802109c <ip_reass_tmr+0x2c>)
 8021074:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8021076:	b140      	cbz	r0, 802108a <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8021078:	2400      	movs	r4, #0
    if (r->timer > 0) {
 802107a:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 802107c:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 802107e:	b12b      	cbz	r3, 802108c <ip_reass_tmr+0x1c>
 8021080:	4604      	mov	r4, r0
      r->timer--;
 8021082:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8021084:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8021086:	2800      	cmp	r0, #0
 8021088:	d1f7      	bne.n	802107a <ip_reass_tmr+0xa>
}
 802108a:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 802108c:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 802108e:	4621      	mov	r1, r4
 8021090:	f7ff fef0 	bl	8020e74 <ip_reass_free_complete_datagram>
      r = r->next;
 8021094:	4628      	mov	r0, r5
  while (r != NULL) {
 8021096:	2800      	cmp	r0, #0
 8021098:	d1ef      	bne.n	802107a <ip_reass_tmr+0xa>
 802109a:	e7f6      	b.n	802108a <ip_reass_tmr+0x1a>
 802109c:	2001ad90 	.word	0x2001ad90

080210a0 <ip4_reass>:
{
 80210a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  IPFRAG_STATS_INC(ip_frag.recv);
 80210a4:	4dc1      	ldr	r5, [pc, #772]	; (80213ac <ip4_reass+0x30c>)
{
 80210a6:	b085      	sub	sp, #20
  fraghdr = (struct ip_hdr *)p->payload;
 80210a8:	f8d0 b004 	ldr.w	fp, [r0, #4]
{
 80210ac:	4606      	mov	r6, r0
  IPFRAG_STATS_INC(ip_frag.recv);
 80210ae:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 80210b0:	3301      	adds	r3, #1
 80210b2:	866b      	strh	r3, [r5, #50]	; 0x32
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80210b4:	f89b 3000 	ldrb.w	r3, [fp]
 80210b8:	f003 030f 	and.w	r3, r3, #15
 80210bc:	2b05      	cmp	r3, #5
 80210be:	f040 8089 	bne.w	80211d4 <ip4_reass+0x134>
  offset = IPH_OFFSET_BYTES(fraghdr);
 80210c2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80210c6:	f7f6 f8a1 	bl	801720c <lwip_htons>
 80210ca:	4680      	mov	r8, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80210cc:	f8bb 0002 	ldrh.w	r0, [fp, #2]
 80210d0:	f7f6 f89c 	bl	801720c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 80210d4:	f89b 2000 	ldrb.w	r2, [fp]
 80210d8:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 80210dc:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 80210e0:	ea4f 0382 	mov.w	r3, r2, lsl #2
 80210e4:	d36b      	bcc.n	80211be <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 80210e6:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80210e8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80213bc <ip4_reass+0x31c>
  clen = pbuf_clen(p);
 80210ec:	4630      	mov	r0, r6
  len = (u16_t)(len - hlen);
 80210ee:	b29b      	uxth	r3, r3
 80210f0:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 80210f2:	f7f8 f843 	bl	801917c <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80210f6:	f8b9 3000 	ldrh.w	r3, [r9]
  clen = pbuf_clen(p);
 80210fa:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80210fc:	4403      	add	r3, r0
 80210fe:	2b0a      	cmp	r3, #10
 8021100:	f300 80df 	bgt.w	80212c2 <ip4_reass+0x222>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021104:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80213c0 <ip4_reass+0x320>
 8021108:	f8da 4000 	ldr.w	r4, [sl]
 802110c:	2c00      	cmp	r4, #0
 802110e:	f000 80e7 	beq.w	80212e0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021112:	f8db 200c 	ldr.w	r2, [fp, #12]
 8021116:	e003      	b.n	8021120 <ip4_reass+0x80>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021118:	6824      	ldr	r4, [r4, #0]
 802111a:	2c00      	cmp	r4, #0
 802111c:	f000 80e0 	beq.w	80212e0 <ip4_reass+0x240>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021120:	6963      	ldr	r3, [r4, #20]
 8021122:	4293      	cmp	r3, r2
 8021124:	d1f8      	bne.n	8021118 <ip4_reass+0x78>
 8021126:	f8db 3010 	ldr.w	r3, [fp, #16]
 802112a:	69a1      	ldr	r1, [r4, #24]
 802112c:	4299      	cmp	r1, r3
 802112e:	d1f3      	bne.n	8021118 <ip4_reass+0x78>
 8021130:	89a1      	ldrh	r1, [r4, #12]
 8021132:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8021136:	4299      	cmp	r1, r3
 8021138:	d1ee      	bne.n	8021118 <ip4_reass+0x78>
      IPFRAG_STATS_INC(ip_frag.cachehit);
 802113a:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 802113e:	3301      	adds	r3, #1
 8021140:	f8a5 3046 	strh.w	r3, [r5, #70]	; 0x46
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021144:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8021148:	f7f6 f860 	bl	801720c <lwip_htons>
 802114c:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8021150:	2800      	cmp	r0, #0
 8021152:	f000 809e 	beq.w	8021292 <ip4_reass+0x1f2>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021156:	f8bb 3006 	ldrh.w	r3, [fp, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 802115a:	f3c8 080c 	ubfx	r8, r8, #0, #13
  if (is_last) {
 802115e:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021162:	ea4f 02c8 	mov.w	r2, r8, lsl #3
  if (is_last) {
 8021166:	9301      	str	r3, [sp, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021168:	9202      	str	r2, [sp, #8]
  if (is_last) {
 802116a:	d108      	bne.n	802117e <ip4_reass+0xde>
    u16_t datagram_len = (u16_t)(offset + len);
 802116c:	9b00      	ldr	r3, [sp, #0]
 802116e:	18d3      	adds	r3, r2, r3
 8021170:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021172:	429a      	cmp	r2, r3
 8021174:	d812      	bhi.n	802119c <ip4_reass+0xfc>
 8021176:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 802117a:	4293      	cmp	r3, r2
 802117c:	d80e      	bhi.n	802119c <ip4_reass+0xfc>
  fraghdr = (struct ip_hdr *)new_p->payload;
 802117e:	f8d6 8004 	ldr.w	r8, [r6, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021182:	f8b8 0002 	ldrh.w	r0, [r8, #2]
 8021186:	f7f6 f841 	bl	801720c <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 802118a:	f898 2000 	ldrb.w	r2, [r8]
 802118e:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8021192:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8021196:	ea4f 0382 	mov.w	r3, r2, lsl #2
 802119a:	d221      	bcs.n	80211e0 <ip4_reass+0x140>
  if (ipr->p == NULL) {
 802119c:	6863      	ldr	r3, [r4, #4]
 802119e:	b973      	cbnz	r3, 80211be <ip4_reass+0x11e>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80211a0:	f8da 3000 	ldr.w	r3, [sl]
 80211a4:	42a3      	cmp	r3, r4
 80211a6:	d006      	beq.n	80211b6 <ip4_reass+0x116>
 80211a8:	4b81      	ldr	r3, [pc, #516]	; (80213b0 <ip4_reass+0x310>)
 80211aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80211ae:	4981      	ldr	r1, [pc, #516]	; (80213b4 <ip4_reass+0x314>)
 80211b0:	4881      	ldr	r0, [pc, #516]	; (80213b8 <ip4_reass+0x318>)
 80211b2:	f001 ff97 	bl	80230e4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80211b6:	4620      	mov	r0, r4
 80211b8:	2100      	movs	r1, #0
 80211ba:	f7ff fe33 	bl	8020e24 <ip_reass_dequeue_datagram>
  IPFRAG_STATS_INC(ip_frag.drop);
 80211be:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 80211c0:	4630      	mov	r0, r6
  return NULL;
 80211c2:	2600      	movs	r6, #0
  IPFRAG_STATS_INC(ip_frag.drop);
 80211c4:	3301      	adds	r3, #1
 80211c6:	86eb      	strh	r3, [r5, #54]	; 0x36
  pbuf_free(p);
 80211c8:	f7f7 fe74 	bl	8018eb4 <pbuf_free>
}
 80211cc:	4630      	mov	r0, r6
 80211ce:	b005      	add	sp, #20
 80211d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    IPFRAG_STATS_INC(ip_frag.err);
 80211d4:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 80211d8:	3301      	adds	r3, #1
 80211da:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
    goto nullreturn;
 80211de:	e7ee      	b.n	80211be <ip4_reass+0x11e>
  len = (u16_t)(len - hlen);
 80211e0:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80211e2:	f8b8 0006 	ldrh.w	r0, [r8, #6]
  len = (u16_t)(len - hlen);
 80211e6:	fa1f fb83 	uxth.w	fp, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 80211ea:	f7f6 f80f 	bl	801720c <lwip_htons>
 80211ee:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 80211f2:	f8d6 8004 	ldr.w	r8, [r6, #4]
  iprh->next_pbuf = NULL;
 80211f6:	2300      	movs	r3, #0
  offset = IPH_OFFSET_BYTES(fraghdr);
 80211f8:	00c2      	lsls	r2, r0, #3
  iprh->next_pbuf = NULL;
 80211fa:	f888 3000 	strb.w	r3, [r8]
  iprh->end = (u16_t)(offset + len);
 80211fe:	eb0b 0002 	add.w	r0, fp, r2
  iprh->next_pbuf = NULL;
 8021202:	f888 3001 	strb.w	r3, [r8, #1]
 8021206:	f888 3002 	strb.w	r3, [r8, #2]
  iprh->end = (u16_t)(offset + len);
 802120a:	b281      	uxth	r1, r0
  iprh->start = offset;
 802120c:	f8a8 2004 	strh.w	r2, [r8, #4]
  iprh->next_pbuf = NULL;
 8021210:	f888 3003 	strb.w	r3, [r8, #3]
  if (iprh->end < offset) {
 8021214:	428a      	cmp	r2, r1
  iprh->end = (u16_t)(offset + len);
 8021216:	9103      	str	r1, [sp, #12]
 8021218:	f8a8 0006 	strh.w	r0, [r8, #6]
  if (iprh->end < offset) {
 802121c:	d8be      	bhi.n	802119c <ip4_reass+0xfc>
  for (q = ipr->p; q != NULL;) {
 802121e:	6861      	ldr	r1, [r4, #4]
 8021220:	2900      	cmp	r1, #0
 8021222:	f000 80e0 	beq.w	80213e6 <ip4_reass+0x346>
  int valid = 1;
 8021226:	f04f 0b01 	mov.w	fp, #1
 802122a:	4694      	mov	ip, r2
 802122c:	e00e      	b.n	802124c <ip4_reass+0x1ac>
    } else if (iprh->start == iprh_tmp->start) {
 802122e:	d0c6      	beq.n	80211be <ip4_reass+0x11e>
    } else if (iprh->start < iprh_tmp->end) {
 8021230:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8021234:	45f4      	cmp	ip, lr
 8021236:	d3c2      	bcc.n	80211be <ip4_reass+0x11e>
      if (iprh_prev != NULL) {
 8021238:	b122      	cbz	r2, 8021244 <ip4_reass+0x1a4>
        if (iprh_prev->end != iprh_tmp->start) {
 802123a:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 802123c:	4282      	cmp	r2, r0
 802123e:	bf18      	it	ne
 8021240:	f04f 0b00 	movne.w	fp, #0
    q = iprh_tmp->next_pbuf;
 8021244:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8021246:	2900      	cmp	r1, #0
 8021248:	f000 8098 	beq.w	802137c <ip4_reass+0x2dc>
        if (iprh_prev->end != iprh_tmp->start) {
 802124c:	461a      	mov	r2, r3
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 802124e:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8021250:	8898      	ldrh	r0, [r3, #4]
 8021252:	4584      	cmp	ip, r0
 8021254:	d2eb      	bcs.n	802122e <ip4_reass+0x18e>
      iprh->next_pbuf = q;
 8021256:	4613      	mov	r3, r2
 8021258:	f8c8 1000 	str.w	r1, [r8]
      if (iprh_prev != NULL) {
 802125c:	4662      	mov	r2, ip
 802125e:	469c      	mov	ip, r3
 8021260:	2b00      	cmp	r3, #0
 8021262:	d074      	beq.n	802134e <ip4_reass+0x2ae>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021264:	9903      	ldr	r1, [sp, #12]
 8021266:	88db      	ldrh	r3, [r3, #6]
 8021268:	4281      	cmp	r1, r0
 802126a:	d8a8      	bhi.n	80211be <ip4_reass+0x11e>
 802126c:	429a      	cmp	r2, r3
 802126e:	d3a6      	bcc.n	80211be <ip4_reass+0x11e>
        iprh_prev->next_pbuf = new_p;
 8021270:	f8cc 6000 	str.w	r6, [ip]
        if (iprh_prev->end != iprh->start) {
 8021274:	d070      	beq.n	8021358 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021276:	9b01      	ldr	r3, [sp, #4]
 8021278:	2b00      	cmp	r3, #0
 802127a:	f000 80a6 	beq.w	80213ca <ip4_reass+0x32a>
 802127e:	7fa3      	ldrb	r3, [r4, #30]
 8021280:	07db      	lsls	r3, r3, #31
 8021282:	d471      	bmi.n	8021368 <ip4_reass+0x2c8>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021284:	f8b9 3000 	ldrh.w	r3, [r9]
  return NULL;
 8021288:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802128a:	441f      	add	r7, r3
 802128c:	f8a9 7000 	strh.w	r7, [r9]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021290:	e79c      	b.n	80211cc <ip4_reass+0x12c>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021292:	89e0      	ldrh	r0, [r4, #14]
 8021294:	f7f5 ffba 	bl	801720c <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021298:	f3c0 000c 	ubfx	r0, r0, #0, #13
 802129c:	2800      	cmp	r0, #0
 802129e:	f43f af5a 	beq.w	8021156 <ip4_reass+0xb6>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80212a2:	f8db 3000 	ldr.w	r3, [fp]
 80212a6:	f8db 0004 	ldr.w	r0, [fp, #4]
 80212aa:	f8db 1008 	ldr.w	r1, [fp, #8]
 80212ae:	f8db 200c 	ldr.w	r2, [fp, #12]
 80212b2:	60a3      	str	r3, [r4, #8]
 80212b4:	60e0      	str	r0, [r4, #12]
 80212b6:	6121      	str	r1, [r4, #16]
 80212b8:	6162      	str	r2, [r4, #20]
 80212ba:	f8db 3010 	ldr.w	r3, [fp, #16]
 80212be:	61a3      	str	r3, [r4, #24]
 80212c0:	e749      	b.n	8021156 <ip4_reass+0xb6>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80212c2:	4601      	mov	r1, r0
 80212c4:	4658      	mov	r0, fp
 80212c6:	f7ff fe63 	bl	8020f90 <ip_reass_remove_oldest_datagram>
 80212ca:	b128      	cbz	r0, 80212d8 <ip4_reass+0x238>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80212cc:	f8b9 3000 	ldrh.w	r3, [r9]
 80212d0:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80212d2:	2b0a      	cmp	r3, #10
 80212d4:	f77f af16 	ble.w	8021104 <ip4_reass+0x64>
      IPFRAG_STATS_INC(ip_frag.memerr);
 80212d8:	8fab      	ldrh	r3, [r5, #60]	; 0x3c
 80212da:	3301      	adds	r3, #1
 80212dc:	87ab      	strh	r3, [r5, #60]	; 0x3c
    if (ipr == NULL) {
 80212de:	e76e      	b.n	80211be <ip4_reass+0x11e>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80212e0:	f44f 728f 	mov.w	r2, #286	; 0x11e
 80212e4:	4932      	ldr	r1, [pc, #200]	; (80213b0 <ip4_reass+0x310>)
 80212e6:	2005      	movs	r0, #5
 80212e8:	f7f7 faf0 	bl	80188cc <memp_malloc_fn>
  if (ipr == NULL) {
 80212ec:	4604      	mov	r4, r0
 80212ee:	b1f0      	cbz	r0, 802132e <ip4_reass+0x28e>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80212f0:	2300      	movs	r3, #0
  ipr->next = reassdatagrams;
 80212f2:	f8da 2000 	ldr.w	r2, [sl]
  ipr->timer = IP_REASS_MAXAGE;
 80212f6:	210f      	movs	r1, #15
  reassdatagrams = ipr;
 80212f8:	f8ca 4000 	str.w	r4, [sl]
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80212fc:	61e3      	str	r3, [r4, #28]
 80212fe:	60a3      	str	r3, [r4, #8]
 8021300:	60e3      	str	r3, [r4, #12]
 8021302:	6123      	str	r3, [r4, #16]
 8021304:	6163      	str	r3, [r4, #20]
 8021306:	61a3      	str	r3, [r4, #24]
 8021308:	6063      	str	r3, [r4, #4]
  ipr->timer = IP_REASS_MAXAGE;
 802130a:	77e1      	strb	r1, [r4, #31]
  ipr->next = reassdatagrams;
 802130c:	6022      	str	r2, [r4, #0]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 802130e:	f8db 3000 	ldr.w	r3, [fp]
 8021312:	f8db 0004 	ldr.w	r0, [fp, #4]
 8021316:	f8db 1008 	ldr.w	r1, [fp, #8]
 802131a:	f8db 200c 	ldr.w	r2, [fp, #12]
 802131e:	60a3      	str	r3, [r4, #8]
 8021320:	60e0      	str	r0, [r4, #12]
 8021322:	6121      	str	r1, [r4, #16]
 8021324:	6162      	str	r2, [r4, #20]
 8021326:	f8db 3010 	ldr.w	r3, [fp, #16]
 802132a:	61a3      	str	r3, [r4, #24]
    if (ipr == NULL) {
 802132c:	e713      	b.n	8021156 <ip4_reass+0xb6>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 802132e:	4639      	mov	r1, r7
 8021330:	4658      	mov	r0, fp
 8021332:	f7ff fe2d 	bl	8020f90 <ip_reass_remove_oldest_datagram>
 8021336:	4287      	cmp	r7, r0
 8021338:	dcce      	bgt.n	80212d8 <ip4_reass+0x238>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802133a:	f44f 7291 	mov.w	r2, #290	; 0x122
 802133e:	491c      	ldr	r1, [pc, #112]	; (80213b0 <ip4_reass+0x310>)
 8021340:	2005      	movs	r0, #5
 8021342:	f7f7 fac3 	bl	80188cc <memp_malloc_fn>
    if (ipr == NULL)
 8021346:	4604      	mov	r4, r0
 8021348:	2800      	cmp	r0, #0
 802134a:	d1d1      	bne.n	80212f0 <ip4_reass+0x250>
 802134c:	e7c4      	b.n	80212d8 <ip4_reass+0x238>
        if (iprh->end > iprh_tmp->start) {
 802134e:	9b03      	ldr	r3, [sp, #12]
 8021350:	4283      	cmp	r3, r0
 8021352:	f63f af34 	bhi.w	80211be <ip4_reass+0x11e>
        ipr->p = new_p;
 8021356:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021358:	9b01      	ldr	r3, [sp, #4]
 802135a:	b1a3      	cbz	r3, 8021386 <ip4_reass+0x2e6>
 802135c:	7fa3      	ldrb	r3, [r4, #30]
 802135e:	07d9      	lsls	r1, r3, #31
 8021360:	d590      	bpl.n	8021284 <ip4_reass+0x1e4>
    if (valid) {
 8021362:	f1bb 0f00 	cmp.w	fp, #0
 8021366:	d146      	bne.n	80213f6 <ip4_reass+0x356>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021368:	f8b9 3000 	ldrh.w	r3, [r9]
 802136c:	441f      	add	r7, r3
 802136e:	f8a9 7000 	strh.w	r7, [r9]
  return NULL;
 8021372:	2600      	movs	r6, #0
}
 8021374:	4630      	mov	r0, r6
 8021376:	b005      	add	sp, #20
 8021378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 802137c:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 802137e:	601e      	str	r6, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021380:	f47f af79 	bne.w	8021276 <ip4_reass+0x1d6>
 8021384:	e7e8      	b.n	8021358 <ip4_reass+0x2b8>
    if (valid) {
 8021386:	f1bb 0f00 	cmp.w	fp, #0
 802138a:	d01e      	beq.n	80213ca <ip4_reass+0x32a>
 802138c:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 802138e:	b1e3      	cbz	r3, 80213ca <ip4_reass+0x32a>
 8021390:	685a      	ldr	r2, [r3, #4]
 8021392:	8893      	ldrh	r3, [r2, #4]
 8021394:	2b00      	cmp	r3, #0
 8021396:	d032      	beq.n	80213fe <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021398:	f8b9 3000 	ldrh.w	r3, [r9]
 802139c:	441f      	add	r7, r3
  if (is_last) {
 802139e:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80213a0:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 80213a4:	2b00      	cmp	r3, #0
 80213a6:	d1e4      	bne.n	8021372 <ip4_reass+0x2d2>
 80213a8:	e014      	b.n	80213d4 <ip4_reass+0x334>
 80213aa:	bf00      	nop
 80213ac:	2002e38c 	.word	0x2002e38c
 80213b0:	08042890 	.word	0x08042890
 80213b4:	080429a8 	.word	0x080429a8
 80213b8:	08029ba0 	.word	0x08029ba0
 80213bc:	2001ad8c 	.word	0x2001ad8c
 80213c0:	2001ad90 	.word	0x2001ad90
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80213c4:	6872      	ldr	r2, [r6, #4]
 80213c6:	8893      	ldrh	r3, [r2, #4]
 80213c8:	b1cb      	cbz	r3, 80213fe <ip4_reass+0x35e>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80213ca:	f8b9 3000 	ldrh.w	r3, [r9]
 80213ce:	441f      	add	r7, r3
 80213d0:	f8a9 7000 	strh.w	r7, [r9]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80213d4:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 80213d6:	9a02      	ldr	r2, [sp, #8]
 80213d8:	9900      	ldr	r1, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80213da:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 80213de:	440a      	add	r2, r1
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80213e0:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 80213e2:	83a2      	strh	r2, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80213e4:	e7c5      	b.n	8021372 <ip4_reass+0x2d2>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80213e6:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 80213e8:	6066      	str	r6, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80213ea:	2b00      	cmp	r3, #0
 80213ec:	d0ea      	beq.n	80213c4 <ip4_reass+0x324>
 80213ee:	7fa3      	ldrb	r3, [r4, #30]
 80213f0:	07da      	lsls	r2, r3, #31
 80213f2:	f57f af47 	bpl.w	8021284 <ip4_reass+0x1e4>
 80213f6:	6863      	ldr	r3, [r4, #4]
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80213f8:	2b00      	cmp	r3, #0
 80213fa:	d0b5      	beq.n	8021368 <ip4_reass+0x2c8>
 80213fc:	e7c8      	b.n	8021390 <ip4_reass+0x2f0>
        q = iprh->next_pbuf;
 80213fe:	f8d8 3000 	ldr.w	r3, [r8]
        while (q != NULL) {
 8021402:	b153      	cbz	r3, 802141a <ip4_reass+0x37a>
 8021404:	9803      	ldr	r0, [sp, #12]
 8021406:	e000      	b.n	802140a <ip4_reass+0x36a>
 8021408:	88c8      	ldrh	r0, [r1, #6]
          iprh = (struct ip_reass_helper *)q->payload;
 802140a:	6859      	ldr	r1, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 802140c:	888b      	ldrh	r3, [r1, #4]
 802140e:	4283      	cmp	r3, r0
 8021410:	d1c2      	bne.n	8021398 <ip4_reass+0x2f8>
          q = iprh->next_pbuf;
 8021412:	680b      	ldr	r3, [r1, #0]
        while (q != NULL) {
 8021414:	2b00      	cmp	r3, #0
 8021416:	d1f7      	bne.n	8021408 <ip4_reass+0x368>
 8021418:	4688      	mov	r8, r1
          LWIP_ASSERT("sanity check",
 802141a:	4590      	cmp	r8, r2
 802141c:	d110      	bne.n	8021440 <ip4_reass+0x3a0>
 802141e:	4b3b      	ldr	r3, [pc, #236]	; (802150c <ip4_reass+0x46c>)
 8021420:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021424:	493a      	ldr	r1, [pc, #232]	; (8021510 <ip4_reass+0x470>)
 8021426:	483b      	ldr	r0, [pc, #236]	; (8021514 <ip4_reass+0x474>)
 8021428:	f001 fe5c 	bl	80230e4 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802142c:	f8d8 3000 	ldr.w	r3, [r8]
 8021430:	b133      	cbz	r3, 8021440 <ip4_reass+0x3a0>
 8021432:	4b36      	ldr	r3, [pc, #216]	; (802150c <ip4_reass+0x46c>)
 8021434:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021438:	4937      	ldr	r1, [pc, #220]	; (8021518 <ip4_reass+0x478>)
 802143a:	4836      	ldr	r0, [pc, #216]	; (8021514 <ip4_reass+0x474>)
 802143c:	f001 fe52 	bl	80230e4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021440:	f8b9 3000 	ldrh.w	r3, [r9]
 8021444:	441f      	add	r7, r3
  if (is_last) {
 8021446:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021448:	f8a9 7000 	strh.w	r7, [r9]
  if (is_last) {
 802144c:	2b00      	cmp	r3, #0
 802144e:	d15a      	bne.n	8021506 <ip4_reass+0x466>
    u16_t datagram_len = (u16_t)(offset + len);
 8021450:	9b02      	ldr	r3, [sp, #8]
 8021452:	9a00      	ldr	r2, [sp, #0]
 8021454:	4413      	add	r3, r2
 8021456:	4618      	mov	r0, r3
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021458:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 802145a:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 802145c:	f043 0301 	orr.w	r3, r3, #1
    ipr->datagram_len = datagram_len;
 8021460:	83a0      	strh	r0, [r4, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021462:	77a3      	strb	r3, [r4, #30]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021464:	4623      	mov	r3, r4
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021466:	6861      	ldr	r1, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021468:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802146a:	f853 2f08 	ldr.w	r2, [r3, #8]!
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802146e:	684f      	ldr	r7, [r1, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021470:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021472:	685e      	ldr	r6, [r3, #4]
 8021474:	689d      	ldr	r5, [r3, #8]
 8021476:	68d9      	ldr	r1, [r3, #12]
 8021478:	607e      	str	r6, [r7, #4]
 802147a:	60bd      	str	r5, [r7, #8]
 802147c:	60f9      	str	r1, [r7, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802147e:	683d      	ldr	r5, [r7, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021480:	603a      	str	r2, [r7, #0]
 8021482:	691a      	ldr	r2, [r3, #16]
 8021484:	613a      	str	r2, [r7, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021486:	f7f5 fec1 	bl	801720c <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 802148a:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 802148c:	4602      	mov	r2, r0
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802148e:	2114      	movs	r1, #20
 8021490:	4638      	mov	r0, r7
    IPH_OFFSET_SET(fraghdr, 0);
 8021492:	71bb      	strb	r3, [r7, #6]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021494:	807a      	strh	r2, [r7, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021496:	71fb      	strb	r3, [r7, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021498:	72bb      	strb	r3, [r7, #10]
 802149a:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 802149c:	f7f6 fc6a 	bl	8017d74 <inet_chksum>
    p = ipr->p;
 80214a0:	6866      	ldr	r6, [r4, #4]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 80214a2:	8178      	strh	r0, [r7, #10]
    while (r != NULL) {
 80214a4:	b15d      	cbz	r5, 80214be <ip4_reass+0x41e>
      iprh = (struct ip_reass_helper *)r->payload;
 80214a6:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 80214a8:	2114      	movs	r1, #20
 80214aa:	4628      	mov	r0, r5
 80214ac:	f7f7 fcc6 	bl	8018e3c <pbuf_remove_header>
      pbuf_cat(p, r);
 80214b0:	4629      	mov	r1, r5
 80214b2:	4630      	mov	r0, r6
 80214b4:	f7f7 fe80 	bl	80191b8 <pbuf_cat>
      r = iprh->next_pbuf;
 80214b8:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 80214ba:	2d00      	cmp	r5, #0
 80214bc:	d1f3      	bne.n	80214a6 <ip4_reass+0x406>
    if (ipr == reassdatagrams) {
 80214be:	f8da 1000 	ldr.w	r1, [sl]
 80214c2:	42a1      	cmp	r1, r4
 80214c4:	d005      	beq.n	80214d2 <ip4_reass+0x432>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80214c6:	b129      	cbz	r1, 80214d4 <ip4_reass+0x434>
        if (ipr_prev->next == ipr) {
 80214c8:	680b      	ldr	r3, [r1, #0]
 80214ca:	42a3      	cmp	r3, r4
 80214cc:	d002      	beq.n	80214d4 <ip4_reass+0x434>
 80214ce:	4619      	mov	r1, r3
 80214d0:	e7f9      	b.n	80214c6 <ip4_reass+0x426>
      ipr_prev = NULL;
 80214d2:	2100      	movs	r1, #0
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80214d4:	4620      	mov	r0, r4
 80214d6:	f7ff fca5 	bl	8020e24 <ip_reass_dequeue_datagram>
    clen = pbuf_clen(p);
 80214da:	4630      	mov	r0, r6
 80214dc:	f7f7 fe4e 	bl	801917c <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80214e0:	f8b9 3000 	ldrh.w	r3, [r9]
    clen = pbuf_clen(p);
 80214e4:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80214e6:	4283      	cmp	r3, r0
 80214e8:	d303      	bcc.n	80214f2 <ip4_reass+0x452>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80214ea:	1b1b      	subs	r3, r3, r4
 80214ec:	f8a9 3000 	strh.w	r3, [r9]
    return p;
 80214f0:	e66c      	b.n	80211cc <ip4_reass+0x12c>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80214f2:	4b06      	ldr	r3, [pc, #24]	; (802150c <ip4_reass+0x46c>)
 80214f4:	f240 229b 	movw	r2, #667	; 0x29b
 80214f8:	4908      	ldr	r1, [pc, #32]	; (802151c <ip4_reass+0x47c>)
 80214fa:	4806      	ldr	r0, [pc, #24]	; (8021514 <ip4_reass+0x474>)
 80214fc:	f001 fdf2 	bl	80230e4 <iprintf>
 8021500:	f8b9 3000 	ldrh.w	r3, [r9]
 8021504:	e7f1      	b.n	80214ea <ip4_reass+0x44a>
 8021506:	8ba0      	ldrh	r0, [r4, #28]
 8021508:	e7ac      	b.n	8021464 <ip4_reass+0x3c4>
 802150a:	bf00      	nop
 802150c:	08042890 	.word	0x08042890
 8021510:	08042958 	.word	0x08042958
 8021514:	08029ba0 	.word	0x08029ba0
 8021518:	08042968 	.word	0x08042968
 802151c:	0804298c 	.word	0x0804298c

08021520 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021524:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 8021526:	b08d      	sub	sp, #52	; 0x34
 8021528:	4605      	mov	r5, r0
 802152a:	920a      	str	r2, [sp, #40]	; 0x28
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802152c:	f1b3 0214 	subs.w	r2, r3, #20
{
 8021530:	9105      	str	r1, [sp, #20]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021532:	bf48      	it	mi
 8021534:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021538:	6843      	ldr	r3, [r0, #4]
 802153a:	9302      	str	r3, [sp, #8]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802153c:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021540:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021542:	9207      	str	r2, [sp, #28]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021544:	f003 030f 	and.w	r3, r3, #15
 8021548:	2b05      	cmp	r3, #5
 802154a:	ea4f 0683 	mov.w	r6, r3, lsl #2
 802154e:	f040 80da 	bne.w	8021706 <ip4_frag+0x1e6>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021552:	8943      	ldrh	r3, [r0, #10]
 8021554:	2b13      	cmp	r3, #19
 8021556:	f240 80d9 	bls.w	802170c <ip4_frag+0x1ec>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802155a:	9b02      	ldr	r3, [sp, #8]
 802155c:	88d8      	ldrh	r0, [r3, #6]
 802155e:	f7f5 fe55 	bl	801720c <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021562:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 8021564:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 8021568:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 802156a:	9206      	str	r2, [sp, #24]
  mf_set = tmp & IP_MF;
 802156c:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 8021570:	b29b      	uxth	r3, r3
 8021572:	920b      	str	r2, [sp, #44]	; 0x2c
 8021574:	9303      	str	r3, [sp, #12]

  while (left) {
 8021576:	2b00      	cmp	r3, #0
 8021578:	f000 809e 	beq.w	80216b8 <ip4_frag+0x198>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802157c:	9b07      	ldr	r3, [sp, #28]
  u16_t newpbuflen = 0;
 802157e:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021580:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8021734 <ip4_frag+0x214>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021584:	00db      	lsls	r3, r3, #3
 8021586:	b29b      	uxth	r3, r3
 8021588:	9308      	str	r3, [sp, #32]
 802158a:	9b08      	ldr	r3, [sp, #32]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802158c:	f44f 7220 	mov.w	r2, #640	; 0x280
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021590:	9f03      	ldr	r7, [sp, #12]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021592:	2114      	movs	r1, #20
 8021594:	200e      	movs	r0, #14
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021596:	42bb      	cmp	r3, r7
 8021598:	bf28      	it	cs
 802159a:	463b      	movcs	r3, r7
 802159c:	9304      	str	r3, [sp, #16]
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802159e:	f7f7 fcf7 	bl	8018f90 <pbuf_alloc>
    if (rambuf == NULL) {
 80215a2:	4682      	mov	sl, r0
 80215a4:	2800      	cmp	r0, #0
 80215a6:	f000 809e 	beq.w	80216e6 <ip4_frag+0x1c6>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80215aa:	8943      	ldrh	r3, [r0, #10]
 80215ac:	2b13      	cmp	r3, #19
 80215ae:	f240 809f 	bls.w	80216f0 <ip4_frag+0x1d0>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80215b2:	9902      	ldr	r1, [sp, #8]
 80215b4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80215b8:	680a      	ldr	r2, [r1, #0]
 80215ba:	684f      	ldr	r7, [r1, #4]
 80215bc:	6888      	ldr	r0, [r1, #8]
 80215be:	68c9      	ldr	r1, [r1, #12]
 80215c0:	601a      	str	r2, [r3, #0]
 80215c2:	60d9      	str	r1, [r3, #12]
 80215c4:	9902      	ldr	r1, [sp, #8]
 80215c6:	605f      	str	r7, [r3, #4]
 80215c8:	6098      	str	r0, [r3, #8]
 80215ca:	690a      	ldr	r2, [r1, #16]
 80215cc:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 80215ce:	f8da 3004 	ldr.w	r3, [sl, #4]
 80215d2:	9309      	str	r3, [sp, #36]	; 0x24

    left_to_copy = fragsize;
    while (left_to_copy) {
 80215d4:	9b04      	ldr	r3, [sp, #16]
 80215d6:	2b00      	cmp	r3, #0
 80215d8:	d034      	beq.n	8021644 <ip4_frag+0x124>
 80215da:	4698      	mov	r8, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80215dc:	896b      	ldrh	r3, [r5, #10]
 80215de:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80215e0:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80215e2:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80215e4:	d371      	bcc.n	80216ca <ip4_frag+0x1aa>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80215e6:	4544      	cmp	r4, r8
 80215e8:	bf28      	it	cs
 80215ea:	4644      	movcs	r4, r8
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80215ec:	2c00      	cmp	r4, #0
 80215ee:	d065      	beq.n	80216bc <ip4_frag+0x19c>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80215f0:	f240 22bd 	movw	r2, #701	; 0x2bd
 80215f4:	4649      	mov	r1, r9
 80215f6:	2006      	movs	r0, #6
 80215f8:	f7f7 f968 	bl	80188cc <memp_malloc_fn>
 80215fc:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80215fe:	2241      	movs	r2, #65	; 0x41
 8021600:	4621      	mov	r1, r4
 8021602:	2000      	movs	r0, #0
      if (pcr == NULL) {
 8021604:	f1bb 0f00 	cmp.w	fp, #0
 8021608:	d06a      	beq.n	80216e0 <ip4_frag+0x1c0>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802160a:	9401      	str	r4, [sp, #4]
 802160c:	465b      	mov	r3, fp
 802160e:	686f      	ldr	r7, [r5, #4]
 8021610:	4437      	add	r7, r6
 8021612:	9700      	str	r7, [sp, #0]
 8021614:	f7f7 fbf2 	bl	8018dfc <pbuf_alloced_custom>
 8021618:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 802161a:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 802161c:	2f00      	cmp	r7, #0
 802161e:	d05c      	beq.n	80216da <ip4_frag+0x1ba>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8021620:	eba8 0804 	sub.w	r8, r8, r4
      pbuf_ref(p);
 8021624:	f7f7 fdb4 	bl	8019190 <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021628:	4b3d      	ldr	r3, [pc, #244]	; (8021720 <ip4_frag+0x200>)
      pbuf_cat(rambuf, newpbuf);
 802162a:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802162c:	fa1f f888 	uxth.w	r8, r8
      pbuf_cat(rambuf, newpbuf);
 8021630:	4650      	mov	r0, sl
      pcr->original = p;
 8021632:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021636:	f8cb 3010 	str.w	r3, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 802163a:	f7f7 fdbd 	bl	80191b8 <pbuf_cat>
      if (left_to_copy) {
 802163e:	f1b8 0f00 	cmp.w	r8, #0
 8021642:	d13b      	bne.n	80216bc <ip4_frag+0x19c>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8021644:	9b05      	ldr	r3, [sp, #20]
    poff = (u16_t)(poff + newpbuflen);
 8021646:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021648:	9a06      	ldr	r2, [sp, #24]
    last = (left <= netif->mtu - IP_HLEN);
 802164a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 802164c:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 802164e:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 8021652:	9a03      	ldr	r2, [sp, #12]
    last = (left <= netif->mtu - IP_HLEN);
 8021654:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 8021656:	4293      	cmp	r3, r2
 8021658:	dd52      	ble.n	8021700 <ip4_frag+0x1e0>
 802165a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802165c:	2b00      	cmp	r3, #0
 802165e:	d14f      	bne.n	8021700 <ip4_frag+0x1e0>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021660:	f7f5 fdd4 	bl	801720c <lwip_htons>
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021664:	9b04      	ldr	r3, [sp, #16]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021666:	9f09      	ldr	r7, [sp, #36]	; 0x24
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021668:	3314      	adds	r3, #20
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 802166a:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 802166c:	b298      	uxth	r0, r3
 802166e:	f7f5 fdcd 	bl	801720c <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 8021672:	2300      	movs	r3, #0
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8021674:	2114      	movs	r1, #20
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021676:	8078      	strh	r0, [r7, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8021678:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 802167a:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 802167c:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 802167e:	f7f6 fb79 	bl	8017d74 <inet_chksum>
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8021682:	9a05      	ldr	r2, [sp, #20]
 8021684:	4651      	mov	r1, sl
 8021686:	6953      	ldr	r3, [r2, #20]
 8021688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 802168a:	8178      	strh	r0, [r7, #10]
    netif->output(netif, rambuf, dest);
 802168c:	9805      	ldr	r0, [sp, #20]
 802168e:	4798      	blx	r3
    IPFRAG_STATS_INC(ip_frag.xmit);
 8021690:	4a24      	ldr	r2, [pc, #144]	; (8021724 <ip4_frag+0x204>)
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8021692:	4650      	mov	r0, sl
    IPFRAG_STATS_INC(ip_frag.xmit);
 8021694:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 8021696:	3301      	adds	r3, #1
 8021698:	8613      	strh	r3, [r2, #48]	; 0x30
    pbuf_free(rambuf);
 802169a:	f7f7 fc0b 	bl	8018eb4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 802169e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 80216a2:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 80216a4:	e9dd 2106 	ldrd	r2, r1, [sp, #24]
    left = (u16_t)(left - fragsize);
 80216a8:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 80216aa:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 80216ac:	9303      	str	r3, [sp, #12]
    ofo = (u16_t)(ofo + nfb);
 80216ae:	b292      	uxth	r2, r2
 80216b0:	9206      	str	r2, [sp, #24]
  while (left) {
 80216b2:	2b00      	cmp	r3, #0
 80216b4:	f47f af69 	bne.w	802158a <ip4_frag+0x6a>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80216b8:	2000      	movs	r0, #0
 80216ba:	e016      	b.n	80216ea <ip4_frag+0x1ca>
        p = p->next;
 80216bc:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 80216be:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 80216c0:	896b      	ldrh	r3, [r5, #10]
 80216c2:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80216c4:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 80216c6:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80216c8:	d28d      	bcs.n	80215e6 <ip4_frag+0xc6>
 80216ca:	464b      	mov	r3, r9
 80216cc:	f240 322d 	movw	r2, #813	; 0x32d
 80216d0:	4915      	ldr	r1, [pc, #84]	; (8021728 <ip4_frag+0x208>)
 80216d2:	4816      	ldr	r0, [pc, #88]	; (802172c <ip4_frag+0x20c>)
 80216d4:	f001 fd06 	bl	80230e4 <iprintf>
 80216d8:	e785      	b.n	80215e6 <ip4_frag+0xc6>
        ip_frag_free_pbuf_custom_ref(pcr);
 80216da:	4658      	mov	r0, fp
 80216dc:	f7ff fc92 	bl	8021004 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80216e0:	4650      	mov	r0, sl
 80216e2:	f7f7 fbe7 	bl	8018eb4 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80216e6:	f04f 30ff 	mov.w	r0, #4294967295
}
 80216ea:	b00d      	add	sp, #52	; 0x34
 80216ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80216f0:	464b      	mov	r3, r9
 80216f2:	f44f 7249 	mov.w	r2, #804	; 0x324
 80216f6:	490e      	ldr	r1, [pc, #56]	; (8021730 <ip4_frag+0x210>)
 80216f8:	480c      	ldr	r0, [pc, #48]	; (802172c <ip4_frag+0x20c>)
 80216fa:	f001 fcf3 	bl	80230e4 <iprintf>
 80216fe:	e758      	b.n	80215b2 <ip4_frag+0x92>
      tmp = tmp | IP_MF;
 8021700:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8021704:	e7ac      	b.n	8021660 <ip4_frag+0x140>
    return ERR_VAL;
 8021706:	f06f 0005 	mvn.w	r0, #5
 802170a:	e7ee      	b.n	80216ea <ip4_frag+0x1ca>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 802170c:	4b09      	ldr	r3, [pc, #36]	; (8021734 <ip4_frag+0x214>)
 802170e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021712:	4909      	ldr	r1, [pc, #36]	; (8021738 <ip4_frag+0x218>)
 8021714:	4805      	ldr	r0, [pc, #20]	; (802172c <ip4_frag+0x20c>)
 8021716:	f001 fce5 	bl	80230e4 <iprintf>
 802171a:	f06f 0005 	mvn.w	r0, #5
 802171e:	e7e4      	b.n	80216ea <ip4_frag+0x1ca>
 8021720:	0802103d 	.word	0x0802103d
 8021724:	2002e38c 	.word	0x2002e38c
 8021728:	08042a04 	.word	0x08042a04
 802172c:	08029ba0 	.word	0x08029ba0
 8021730:	080429e4 	.word	0x080429e4
 8021734:	08042890 	.word	0x08042890
 8021738:	080429c8 	.word	0x080429c8

0802173c <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 802173c:	8943      	ldrh	r3, [r0, #10]
 802173e:	2b0e      	cmp	r3, #14
{
 8021740:	b570      	push	{r4, r5, r6, lr}
 8021742:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 8021744:	d91b      	bls.n	802177e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8021746:	7bc3      	ldrb	r3, [r0, #15]
 8021748:	460d      	mov	r5, r1
 802174a:	b91b      	cbnz	r3, 8021754 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 802174c:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 8021750:	3301      	adds	r3, #1
 8021752:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021754:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021756:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 8021758:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 802175a:	07d9      	lsls	r1, r3, #31
 802175c:	d50a      	bpl.n	8021774 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802175e:	2b01      	cmp	r3, #1
 8021760:	d039      	beq.n	80217d6 <ethernet_input+0x9a>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8021762:	2206      	movs	r2, #6
 8021764:	4924      	ldr	r1, [pc, #144]	; (80217f8 <ethernet_input+0xbc>)
 8021766:	f000 fd15 	bl	8022194 <memcmp>
 802176a:	b918      	cbnz	r0, 8021774 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802176c:	7b63      	ldrb	r3, [r4, #13]
 802176e:	f043 0308 	orr.w	r3, r3, #8
 8021772:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8021774:	2e08      	cmp	r6, #8
 8021776:	d01f      	beq.n	80217b8 <ethernet_input+0x7c>
 8021778:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 802177c:	d00b      	beq.n	8021796 <ethernet_input+0x5a>
#ifdef LWIP_HOOK_UNKNOWN_ETH_PROTOCOL
      if (LWIP_HOOK_UNKNOWN_ETH_PROTOCOL(p, netif) == ERR_OK) {
        break;
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
 802177e:	4b1f      	ldr	r3, [pc, #124]	; (80217fc <ethernet_input+0xc0>)
 8021780:	8d19      	ldrh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 8021782:	8bda      	ldrh	r2, [r3, #30]
      ETHARP_STATS_INC(etharp.proterr);
 8021784:	3101      	adds	r1, #1
      ETHARP_STATS_INC(etharp.drop);
 8021786:	3201      	adds	r2, #1
      ETHARP_STATS_INC(etharp.proterr);
 8021788:	8519      	strh	r1, [r3, #40]	; 0x28
      ETHARP_STATS_INC(etharp.drop);
 802178a:	83da      	strh	r2, [r3, #30]
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802178c:	4620      	mov	r0, r4
 802178e:	f7f7 fb91 	bl	8018eb4 <pbuf_free>
  return ERR_OK;
}
 8021792:	2000      	movs	r0, #0
 8021794:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021796:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802179a:	071b      	lsls	r3, r3, #28
 802179c:	d5f6      	bpl.n	802178c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802179e:	210e      	movs	r1, #14
 80217a0:	4620      	mov	r0, r4
 80217a2:	f7f7 fb4b 	bl	8018e3c <pbuf_remove_header>
 80217a6:	b308      	cbz	r0, 80217ec <ethernet_input+0xb0>
        ETHARP_STATS_INC(etharp.lenerr);
 80217a8:	4b14      	ldr	r3, [pc, #80]	; (80217fc <ethernet_input+0xc0>)
 80217aa:	8c59      	ldrh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 80217ac:	8bda      	ldrh	r2, [r3, #30]
        ETHARP_STATS_INC(etharp.lenerr);
 80217ae:	3101      	adds	r1, #1
        ETHARP_STATS_INC(etharp.drop);
 80217b0:	3201      	adds	r2, #1
        ETHARP_STATS_INC(etharp.lenerr);
 80217b2:	8459      	strh	r1, [r3, #34]	; 0x22
        ETHARP_STATS_INC(etharp.drop);
 80217b4:	83da      	strh	r2, [r3, #30]
        goto free_and_return;
 80217b6:	e7e9      	b.n	802178c <ethernet_input+0x50>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80217b8:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80217bc:	071a      	lsls	r2, r3, #28
 80217be:	d5e5      	bpl.n	802178c <ethernet_input+0x50>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80217c0:	210e      	movs	r1, #14
 80217c2:	4620      	mov	r0, r4
 80217c4:	f7f7 fb3a 	bl	8018e3c <pbuf_remove_header>
 80217c8:	2800      	cmp	r0, #0
 80217ca:	d1df      	bne.n	802178c <ethernet_input+0x50>
        ip4_input(p, netif);
 80217cc:	4629      	mov	r1, r5
 80217ce:	4620      	mov	r0, r4
 80217d0:	f7ff f86e 	bl	80208b0 <ip4_input>
      break;
 80217d4:	e7dd      	b.n	8021792 <ethernet_input+0x56>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80217d6:	7843      	ldrb	r3, [r0, #1]
 80217d8:	2b00      	cmp	r3, #0
 80217da:	d1cb      	bne.n	8021774 <ethernet_input+0x38>
 80217dc:	7883      	ldrb	r3, [r0, #2]
 80217de:	2b5e      	cmp	r3, #94	; 0x5e
 80217e0:	d1c8      	bne.n	8021774 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 80217e2:	7b63      	ldrb	r3, [r4, #13]
 80217e4:	f043 0310 	orr.w	r3, r3, #16
 80217e8:	7363      	strb	r3, [r4, #13]
 80217ea:	e7c3      	b.n	8021774 <ethernet_input+0x38>
        etharp_input(p, netif);
 80217ec:	4629      	mov	r1, r5
 80217ee:	4620      	mov	r0, r4
 80217f0:	f7fe fbe0 	bl	801ffb4 <etharp_input>
      break;
 80217f4:	e7cd      	b.n	8021792 <ethernet_input+0x56>
 80217f6:	bf00      	nop
 80217f8:	08042a80 	.word	0x08042a80
 80217fc:	2002e38c 	.word	0x2002e38c

08021800 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021804:	460c      	mov	r4, r1
 8021806:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021808:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 802180c:	4616      	mov	r6, r2
 802180e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8021810:	f7f5 fcfc 	bl	801720c <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021814:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8021816:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021818:	4620      	mov	r0, r4
 802181a:	f7f7 fb0b 	bl	8018e34 <pbuf_add_header>
 802181e:	b9e0      	cbnz	r0, 802185a <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8021820:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 8021822:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021826:	683b      	ldr	r3, [r7, #0]
 8021828:	600b      	str	r3, [r1, #0]
 802182a:	88bb      	ldrh	r3, [r7, #4]
 802182c:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 802182e:	6833      	ldr	r3, [r6, #0]
 8021830:	f8c1 3006 	str.w	r3, [r1, #6]
 8021834:	88b3      	ldrh	r3, [r6, #4]
 8021836:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021838:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 802183c:	2b06      	cmp	r3, #6
 802183e:	d006      	beq.n	802184e <ethernet_output+0x4e>
 8021840:	4b0a      	ldr	r3, [pc, #40]	; (802186c <ethernet_output+0x6c>)
 8021842:	f44f 7299 	mov.w	r2, #306	; 0x132
 8021846:	490a      	ldr	r1, [pc, #40]	; (8021870 <ethernet_output+0x70>)
 8021848:	480a      	ldr	r0, [pc, #40]	; (8021874 <ethernet_output+0x74>)
 802184a:	f001 fc4b 	bl	80230e4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 802184e:	4621      	mov	r1, r4
 8021850:	69ab      	ldr	r3, [r5, #24]
 8021852:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 8021854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 8021858:	4718      	bx	r3
  LINK_STATS_INC(link.lenerr);
 802185a:	4a07      	ldr	r2, [pc, #28]	; (8021878 <ethernet_output+0x78>)
}
 802185c:	f06f 0001 	mvn.w	r0, #1
  LINK_STATS_INC(link.lenerr);
 8021860:	8953      	ldrh	r3, [r2, #10]
 8021862:	3301      	adds	r3, #1
 8021864:	8153      	strh	r3, [r2, #10]
}
 8021866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802186a:	bf00      	nop
 802186c:	08042a14 	.word	0x08042a14
 8021870:	08042a4c 	.word	0x08042a4c
 8021874:	08029ba0 	.word	0x08029ba0
 8021878:	2002e38c 	.word	0x2002e38c

0802187c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 802187c:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 802187e:	2300      	movs	r3, #0
{
 8021880:	b085      	sub	sp, #20
 8021882:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 8021884:	2204      	movs	r2, #4
{
 8021886:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8021888:	4619      	mov	r1, r3
 802188a:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 802188c:	9201      	str	r2, [sp, #4]
 802188e:	9500      	str	r5, [sp, #0]
 8021890:	e9cd 3302 	strd	r3, r3, [sp, #8]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8021894:	f7f1 ffa2 	bl	80137dc <osMessageCreate>
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
#endif
#if SYS_STATS
  ++lwip_stats.sys.mbox.used;
 8021898:	4a0a      	ldr	r2, [pc, #40]	; (80218c4 <sys_mbox_new+0x48>)
 802189a:	f8b2 3100 	ldrh.w	r3, [r2, #256]	; 0x100
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 802189e:	f8b2 1102 	ldrh.w	r1, [r2, #258]	; 0x102
  ++lwip_stats.sys.mbox.used;
 80218a2:	3301      	adds	r3, #1
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80218a4:	6020      	str	r0, [r4, #0]
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80218a6:	fab0 f080 	clz	r0, r0
  ++lwip_stats.sys.mbox.used;
 80218aa:	b29b      	uxth	r3, r3
  if(*mbox == NULL)
 80218ac:	0940      	lsrs	r0, r0, #5
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
 80218ae:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mbox.used;
 80218b0:	f8a2 3100 	strh.w	r3, [r2, #256]	; 0x100
    return ERR_MEM;

  return ERR_OK;
}
 80218b4:	f1c0 0000 	rsb	r0, r0, #0
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
 80218b8:	bf38      	it	cc
 80218ba:	f8a2 3102 	strhcc.w	r3, [r2, #258]	; 0x102
}
 80218be:	b005      	add	sp, #20
 80218c0:	bd30      	pop	{r4, r5, pc}
 80218c2:	bf00      	nop
 80218c4:	2002e38c 	.word	0x2002e38c

080218c8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80218c8:	b508      	push	{r3, lr}
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80218ca:	2200      	movs	r2, #0
 80218cc:	6800      	ldr	r0, [r0, #0]
 80218ce:	f7f1 ff99 	bl	8013804 <osMessagePut>
 80218d2:	b900      	cbnz	r0, 80218d6 <sys_mbox_trypost+0xe>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 80218d4:	bd08      	pop	{r3, pc}
    lwip_stats.sys.mbox.err++;
 80218d6:	4a04      	ldr	r2, [pc, #16]	; (80218e8 <sys_mbox_trypost+0x20>)
 80218d8:	f04f 30ff 	mov.w	r0, #4294967295
 80218dc:	f8b2 3104 	ldrh.w	r3, [r2, #260]	; 0x104
 80218e0:	3301      	adds	r3, #1
 80218e2:	f8a2 3104 	strh.w	r3, [r2, #260]	; 0x104
}
 80218e6:	bd08      	pop	{r3, pc}
 80218e8:	2002e38c 	.word	0x2002e38c

080218ec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80218ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80218ee:	4614      	mov	r4, r2
 80218f0:	b085      	sub	sp, #20
 80218f2:	4605      	mov	r5, r0
 80218f4:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80218f6:	f7f1 fe61 	bl	80135bc <osKernelSysTick>
 80218fa:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80218fc:	b15c      	cbz	r4, 8021916 <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80218fe:	4622      	mov	r2, r4
 8021900:	6829      	ldr	r1, [r5, #0]
 8021902:	a801      	add	r0, sp, #4
 8021904:	f7f1 ffaa 	bl	801385c <osMessageGet>

    if(event.status == osEventMessage)
 8021908:	9b01      	ldr	r3, [sp, #4]
 802190a:	2b10      	cmp	r3, #16
 802190c:	d009      	beq.n	8021922 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 802190e:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8021912:	b005      	add	sp, #20
 8021914:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 8021916:	6829      	ldr	r1, [r5, #0]
 8021918:	f04f 32ff 	mov.w	r2, #4294967295
 802191c:	a801      	add	r0, sp, #4
 802191e:	f7f1 ff9d 	bl	801385c <osMessageGet>
    *msg = (void *)event.value.v;
 8021922:	9b02      	ldr	r3, [sp, #8]
 8021924:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 8021926:	f7f1 fe49 	bl	80135bc <osKernelSysTick>
 802192a:	1b80      	subs	r0, r0, r6
}
 802192c:	b005      	add	sp, #20
 802192e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08021930 <sys_mbox_valid>:
 8021930:	6800      	ldr	r0, [r0, #0]
 8021932:	3800      	subs	r0, #0
 8021934:	bf18      	it	ne
 8021936:	2001      	movne	r0, #1
 8021938:	4770      	bx	lr
 802193a:	bf00      	nop

0802193c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 802193c:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 802193e:	4803      	ldr	r0, [pc, #12]	; (802194c <sys_init+0x10>)
 8021940:	f7f1 fe9c 	bl	801367c <osMutexCreate>
 8021944:	4b02      	ldr	r3, [pc, #8]	; (8021950 <sys_init+0x14>)
 8021946:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8021948:	bd08      	pop	{r3, pc}
 802194a:	bf00      	nop
 802194c:	08042a90 	.word	0x08042a90
 8021950:	2002e4ec 	.word	0x2002e4ec

08021954 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8021954:	b530      	push	{r4, r5, lr}
 8021956:	b083      	sub	sp, #12
 8021958:	4605      	mov	r5, r0

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802195a:	2400      	movs	r4, #0
  *mutex = osMutexCreate(osMutex(MUTEX));
 802195c:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 802195e:	e9cd 4400 	strd	r4, r4, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8021962:	f7f1 fe8b 	bl	801367c <osMutexCreate>
#endif

  if(*mutex == NULL)
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
 8021966:	4a0d      	ldr	r2, [pc, #52]	; (802199c <sys_mutex_new+0x48>)
  *mutex = osMutexCreate(osMutex(MUTEX));
 8021968:	6028      	str	r0, [r5, #0]
  if(*mutex == NULL)
 802196a:	b170      	cbz	r0, 802198a <sys_mutex_new+0x36>
#endif /* SYS_STATS */
    return ERR_MEM;
  }

#if SYS_STATS
  ++lwip_stats.sys.mutex.used;
 802196c:	f8b2 30fa 	ldrh.w	r3, [r2, #250]	; 0xfa
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8021970:	4620      	mov	r0, r4
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 8021972:	f8b2 10fc 	ldrh.w	r1, [r2, #252]	; 0xfc
  ++lwip_stats.sys.mutex.used;
 8021976:	3301      	adds	r3, #1
 8021978:	b29b      	uxth	r3, r3
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
 802197a:	4299      	cmp	r1, r3
  ++lwip_stats.sys.mutex.used;
 802197c:	f8a2 30fa 	strh.w	r3, [r2, #250]	; 0xfa
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
 8021980:	bf38      	it	cc
 8021982:	f8a2 30fc 	strhcc.w	r3, [r2, #252]	; 0xfc
}
 8021986:	b003      	add	sp, #12
 8021988:	bd30      	pop	{r4, r5, pc}
    ++lwip_stats.sys.mutex.err;
 802198a:	f8b2 30fe 	ldrh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 802198e:	f04f 30ff 	mov.w	r0, #4294967295
    ++lwip_stats.sys.mutex.err;
 8021992:	3301      	adds	r3, #1
 8021994:	f8a2 30fe 	strh.w	r3, [r2, #254]	; 0xfe
    return ERR_MEM;
 8021998:	e7f5      	b.n	8021986 <sys_mutex_new+0x32>
 802199a:	bf00      	nop
 802199c:	2002e38c 	.word	0x2002e38c

080219a0 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80219a0:	f04f 31ff 	mov.w	r1, #4294967295
 80219a4:	6800      	ldr	r0, [r0, #0]
 80219a6:	f7f1 be71 	b.w	801368c <osMutexWait>
 80219aa:	bf00      	nop

080219ac <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80219ac:	6800      	ldr	r0, [r0, #0]
 80219ae:	f7f1 be99 	b.w	80136e4 <osMutexRelease>
 80219b2:	bf00      	nop

080219b4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80219b4:	b530      	push	{r4, r5, lr}
 80219b6:	b089      	sub	sp, #36	; 0x24
 80219b8:	460d      	mov	r5, r1
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80219ba:	2400      	movs	r4, #0
  return osThreadCreate(&os_thread_def, arg);
 80219bc:	4611      	mov	r1, r2
{
 80219be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80219c0:	9001      	str	r0, [sp, #4]
  return osThreadCreate(&os_thread_def, arg);
 80219c2:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80219c4:	9502      	str	r5, [sp, #8]
 80219c6:	9305      	str	r3, [sp, #20]
 80219c8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80219cc:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80219d0:	f8ad 200c 	strh.w	r2, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 80219d4:	f7f1 fdfa 	bl	80135cc <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80219d8:	b009      	add	sp, #36	; 0x24
 80219da:	bd30      	pop	{r4, r5, pc}

080219dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80219dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80219de:	2200      	movs	r2, #0
 80219e0:	4917      	ldr	r1, [pc, #92]	; (8021a40 <MX_USB_DEVICE_Init+0x64>)
 80219e2:	4818      	ldr	r0, [pc, #96]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 80219e4:	f7f1 f958 	bl	8012c98 <USBD_Init>
 80219e8:	b970      	cbnz	r0, 8021a08 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80219ea:	4917      	ldr	r1, [pc, #92]	; (8021a48 <MX_USB_DEVICE_Init+0x6c>)
 80219ec:	4815      	ldr	r0, [pc, #84]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 80219ee:	f7f1 f96b 	bl	8012cc8 <USBD_RegisterClass>
 80219f2:	b988      	cbnz	r0, 8021a18 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80219f4:	4915      	ldr	r1, [pc, #84]	; (8021a4c <MX_USB_DEVICE_Init+0x70>)
 80219f6:	4813      	ldr	r0, [pc, #76]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 80219f8:	f7f1 f91a 	bl	8012c30 <USBD_CDC_RegisterInterface>
 80219fc:	b9a0      	cbnz	r0, 8021a28 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80219fe:	4811      	ldr	r0, [pc, #68]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 8021a00:	f7f1 f978 	bl	8012cf4 <USBD_Start>
 8021a04:	b9b8      	cbnz	r0, 8021a36 <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8021a06:	bd08      	pop	{r3, pc}
    Error_Handler();
 8021a08:	f7e1 f954 	bl	8002cb4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8021a0c:	490e      	ldr	r1, [pc, #56]	; (8021a48 <MX_USB_DEVICE_Init+0x6c>)
 8021a0e:	480d      	ldr	r0, [pc, #52]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 8021a10:	f7f1 f95a 	bl	8012cc8 <USBD_RegisterClass>
 8021a14:	2800      	cmp	r0, #0
 8021a16:	d0ed      	beq.n	80219f4 <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8021a18:	f7e1 f94c 	bl	8002cb4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8021a1c:	490b      	ldr	r1, [pc, #44]	; (8021a4c <MX_USB_DEVICE_Init+0x70>)
 8021a1e:	4809      	ldr	r0, [pc, #36]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 8021a20:	f7f1 f906 	bl	8012c30 <USBD_CDC_RegisterInterface>
 8021a24:	2800      	cmp	r0, #0
 8021a26:	d0ea      	beq.n	80219fe <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8021a28:	f7e1 f944 	bl	8002cb4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8021a2c:	4805      	ldr	r0, [pc, #20]	; (8021a44 <MX_USB_DEVICE_Init+0x68>)
 8021a2e:	f7f1 f961 	bl	8012cf4 <USBD_Start>
 8021a32:	2800      	cmp	r0, #0
 8021a34:	d0e7      	beq.n	8021a06 <MX_USB_DEVICE_Init+0x2a>
}
 8021a36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8021a3a:	f7e1 b93b 	b.w	8002cb4 <Error_Handler>
 8021a3e:	bf00      	nop
 8021a40:	20000428 	.word	0x20000428
 8021a44:	2002e4f0 	.word	0x2002e4f0
 8021a48:	200002f8 	.word	0x200002f8
 8021a4c:	20000414 	.word	0x20000414

08021a50 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8021a50:	2000      	movs	r0, #0
 8021a52:	4770      	bx	lr

08021a54 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8021a54:	2000      	movs	r0, #0
 8021a56:	4770      	bx	lr

08021a58 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8021a58:	2000      	movs	r0, #0
 8021a5a:	4770      	bx	lr

08021a5c <CDC_Receive_FS>:
{
 8021a5c:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021a5e:	4c05      	ldr	r4, [pc, #20]	; (8021a74 <CDC_Receive_FS+0x18>)
{
 8021a60:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8021a62:	4620      	mov	r0, r4
 8021a64:	f7f1 f8f6 	bl	8012c54 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8021a68:	4620      	mov	r0, r4
 8021a6a:	f7f1 f8fb 	bl	8012c64 <USBD_CDC_ReceivePacket>
}
 8021a6e:	2000      	movs	r0, #0
 8021a70:	bd10      	pop	{r4, pc}
 8021a72:	bf00      	nop
 8021a74:	2002e4f0 	.word	0x2002e4f0

08021a78 <CDC_Init_FS>:
{
 8021a78:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8021a7a:	4c06      	ldr	r4, [pc, #24]	; (8021a94 <CDC_Init_FS+0x1c>)
 8021a7c:	2200      	movs	r2, #0
 8021a7e:	4906      	ldr	r1, [pc, #24]	; (8021a98 <CDC_Init_FS+0x20>)
 8021a80:	4620      	mov	r0, r4
 8021a82:	f7f1 f8dd 	bl	8012c40 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8021a86:	4620      	mov	r0, r4
 8021a88:	4904      	ldr	r1, [pc, #16]	; (8021a9c <CDC_Init_FS+0x24>)
 8021a8a:	f7f1 f8e3 	bl	8012c54 <USBD_CDC_SetRxBuffer>
}
 8021a8e:	2000      	movs	r0, #0
 8021a90:	bd10      	pop	{r4, pc}
 8021a92:	bf00      	nop
 8021a94:	2002e4f0 	.word	0x2002e4f0
 8021a98:	2002efc0 	.word	0x2002efc0
 8021a9c:	2002e7c0 	.word	0x2002e7c0

08021aa0 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8021aa0:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8021aa2:	4801      	ldr	r0, [pc, #4]	; (8021aa8 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8021aa4:	800b      	strh	r3, [r1, #0]
}
 8021aa6:	4770      	bx	lr
 8021aa8:	20000454 	.word	0x20000454

08021aac <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8021aac:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8021aae:	4801      	ldr	r0, [pc, #4]	; (8021ab4 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8021ab0:	800b      	strh	r3, [r1, #0]
}
 8021ab2:	4770      	bx	lr
 8021ab4:	20000468 	.word	0x20000468

08021ab8 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8021ab8:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 8021aba:	4801      	ldr	r0, [pc, #4]	; (8021ac0 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 8021abc:	800b      	strh	r3, [r1, #0]
}
 8021abe:	4770      	bx	lr
 8021ac0:	20000448 	.word	0x20000448

08021ac4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8021ac4:	b4f0      	push	{r4, r5, r6, r7}
 8021ac6:	2400      	movs	r4, #0
  uint8_t idx = 0;

  for (idx = 0; idx < len; idx++)
 8021ac8:	0052      	lsls	r2, r2, #1
 8021aca:	1c4e      	adds	r6, r1, #1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8021acc:	4627      	mov	r7, r4
    if (((value >> 28)) < 0xA)
 8021ace:	0f03      	lsrs	r3, r0, #28
 8021ad0:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
    value = value << 4;
 8021ad4:	ea4f 1000 	mov.w	r0, r0, lsl #4
      pbuf[2 * idx] = (value >> 28) + '0';
 8021ad8:	f103 0530 	add.w	r5, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021adc:	f103 0337 	add.w	r3, r3, #55	; 0x37
      pbuf[2 * idx] = (value >> 28) + '0';
 8021ae0:	bf34      	ite	cc
 8021ae2:	550d      	strbcc	r5, [r1, r4]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8021ae4:	550b      	strbcs	r3, [r1, r4]
    pbuf[2 * idx + 1] = 0;
 8021ae6:	5537      	strb	r7, [r6, r4]
 8021ae8:	3402      	adds	r4, #2
  for (idx = 0; idx < len; idx++)
 8021aea:	42a2      	cmp	r2, r4
 8021aec:	d1ef      	bne.n	8021ace <IntToUnicode+0xa>
  }
}
 8021aee:	bcf0      	pop	{r4, r5, r6, r7}
 8021af0:	4770      	bx	lr
 8021af2:	bf00      	nop

08021af4 <USBD_FS_SerialStrDescriptor>:
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021af4:	480b      	ldr	r0, [pc, #44]	; (8021b24 <USBD_FS_SerialStrDescriptor+0x30>)
  *length = USB_SIZ_STRING_SERIAL;
 8021af6:	221a      	movs	r2, #26
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8021af8:	4b0b      	ldr	r3, [pc, #44]	; (8021b28 <USBD_FS_SerialStrDescriptor+0x34>)
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8021afa:	6800      	ldr	r0, [r0, #0]
  deviceserial0 += deviceserial2;
 8021afc:	681b      	ldr	r3, [r3, #0]
  *length = USB_SIZ_STRING_SERIAL;
 8021afe:	800a      	strh	r2, [r1, #0]
  if (deviceserial0 != 0)
 8021b00:	18c0      	adds	r0, r0, r3
 8021b02:	d101      	bne.n	8021b08 <USBD_FS_SerialStrDescriptor+0x14>
}
 8021b04:	4809      	ldr	r0, [pc, #36]	; (8021b2c <USBD_FS_SerialStrDescriptor+0x38>)
 8021b06:	4770      	bx	lr
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021b08:	4b09      	ldr	r3, [pc, #36]	; (8021b30 <USBD_FS_SerialStrDescriptor+0x3c>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021b0a:	2208      	movs	r2, #8
 8021b0c:	4909      	ldr	r1, [pc, #36]	; (8021b34 <USBD_FS_SerialStrDescriptor+0x40>)
{
 8021b0e:	b510      	push	{r4, lr}
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8021b10:	681c      	ldr	r4, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8021b12:	f7ff ffd7 	bl	8021ac4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8021b16:	2204      	movs	r2, #4
 8021b18:	4907      	ldr	r1, [pc, #28]	; (8021b38 <USBD_FS_SerialStrDescriptor+0x44>)
 8021b1a:	4620      	mov	r0, r4
 8021b1c:	f7ff ffd2 	bl	8021ac4 <IntToUnicode>
}
 8021b20:	4802      	ldr	r0, [pc, #8]	; (8021b2c <USBD_FS_SerialStrDescriptor+0x38>)
 8021b22:	bd10      	pop	{r4, pc}
 8021b24:	1ff0f420 	.word	0x1ff0f420
 8021b28:	1ff0f428 	.word	0x1ff0f428
 8021b2c:	2000046c 	.word	0x2000046c
 8021b30:	1ff0f424 	.word	0x1ff0f424
 8021b34:	2000046e 	.word	0x2000046e
 8021b38:	2000047e 	.word	0x2000047e

08021b3c <USBD_FS_ManufacturerStrDescriptor>:
{
 8021b3c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021b3e:	4c04      	ldr	r4, [pc, #16]	; (8021b50 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8021b40:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8021b42:	4804      	ldr	r0, [pc, #16]	; (8021b54 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8021b44:	4621      	mov	r1, r4
 8021b46:	f7f1 fca1 	bl	801348c <USBD_GetString>
}
 8021b4a:	4620      	mov	r0, r4
 8021b4c:	bd10      	pop	{r4, pc}
 8021b4e:	bf00      	nop
 8021b50:	2002f7c0 	.word	0x2002f7c0
 8021b54:	08042a98 	.word	0x08042a98

08021b58 <USBD_FS_ProductStrDescriptor>:
{
 8021b58:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021b5a:	4c04      	ldr	r4, [pc, #16]	; (8021b6c <USBD_FS_ProductStrDescriptor+0x14>)
{
 8021b5c:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8021b5e:	4804      	ldr	r0, [pc, #16]	; (8021b70 <USBD_FS_ProductStrDescriptor+0x18>)
 8021b60:	4621      	mov	r1, r4
 8021b62:	f7f1 fc93 	bl	801348c <USBD_GetString>
}
 8021b66:	4620      	mov	r0, r4
 8021b68:	bd10      	pop	{r4, pc}
 8021b6a:	bf00      	nop
 8021b6c:	2002f7c0 	.word	0x2002f7c0
 8021b70:	08042aac 	.word	0x08042aac

08021b74 <USBD_FS_ConfigStrDescriptor>:
{
 8021b74:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021b76:	4c04      	ldr	r4, [pc, #16]	; (8021b88 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8021b78:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8021b7a:	4804      	ldr	r0, [pc, #16]	; (8021b8c <USBD_FS_ConfigStrDescriptor+0x18>)
 8021b7c:	4621      	mov	r1, r4
 8021b7e:	f7f1 fc85 	bl	801348c <USBD_GetString>
}
 8021b82:	4620      	mov	r0, r4
 8021b84:	bd10      	pop	{r4, pc}
 8021b86:	bf00      	nop
 8021b88:	2002f7c0 	.word	0x2002f7c0
 8021b8c:	08042ac4 	.word	0x08042ac4

08021b90 <USBD_FS_InterfaceStrDescriptor>:
{
 8021b90:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021b92:	4c04      	ldr	r4, [pc, #16]	; (8021ba4 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8021b94:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8021b96:	4804      	ldr	r0, [pc, #16]	; (8021ba8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8021b98:	4621      	mov	r1, r4
 8021b9a:	f7f1 fc77 	bl	801348c <USBD_GetString>
}
 8021b9e:	4620      	mov	r0, r4
 8021ba0:	bd10      	pop	{r4, pc}
 8021ba2:	bf00      	nop
 8021ba4:	2002f7c0 	.word	0x2002f7c0
 8021ba8:	08042ad0 	.word	0x08042ad0

08021bac <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 8021bac:	6803      	ldr	r3, [r0, #0]
{
 8021bae:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 8021bb0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 8021bb4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8021bb6:	f04f 0400 	mov.w	r4, #0
 8021bba:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8021bbe:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8021bc2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 8021bc4:	d001      	beq.n	8021bca <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8021bc6:	b009      	add	sp, #36	; 0x24
 8021bc8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021bca:	4d1e      	ldr	r5, [pc, #120]	; (8021c44 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8021bcc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bd0:	2202      	movs	r2, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bd2:	2003      	movs	r0, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021bd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8021bd6:	f043 0301 	orr.w	r3, r3, #1
 8021bda:	632b      	str	r3, [r5, #48]	; 0x30
 8021bdc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8021bde:	9006      	str	r0, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021be0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021be4:	4818      	ldr	r0, [pc, #96]	; (8021c48 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021be6:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8021be8:	9300      	str	r3, [sp, #0]
 8021bea:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8021bec:	e9cd 1203 	strd	r1, r2, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8021bf0:	220a      	movs	r2, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021bf2:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8021bf4:	9207      	str	r2, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8021bf6:	f7e7 ffcd 	bl	8009b94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8021bfa:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8021bfe:	a903      	add	r1, sp, #12
 8021c00:	4811      	ldr	r0, [pc, #68]	; (8021c48 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8021c02:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8021c04:	e9cd 4404 	strd	r4, r4, [sp, #16]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8021c08:	f7e7 ffc4 	bl	8009b94 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021c0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8021c0e:	4622      	mov	r2, r4
 8021c10:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8021c16:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8021c18:	636b      	str	r3, [r5, #52]	; 0x34
 8021c1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8021c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8021c20:	9301      	str	r3, [sp, #4]
 8021c22:	9b01      	ldr	r3, [sp, #4]
 8021c24:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8021c26:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8021c2a:	646b      	str	r3, [r5, #68]	; 0x44
 8021c2c:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8021c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8021c32:	9302      	str	r3, [sp, #8]
 8021c34:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8021c36:	f7e5 fce3 	bl	8007600 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8021c3a:	2043      	movs	r0, #67	; 0x43
 8021c3c:	f7e5 fd2a 	bl	8007694 <HAL_NVIC_EnableIRQ>
}
 8021c40:	b009      	add	sp, #36	; 0x24
 8021c42:	bd30      	pop	{r4, r5, pc}
 8021c44:	40023800 	.word	0x40023800
 8021c48:	40020000 	.word	0x40020000

08021c4c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8021c4c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8021c50:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021c54:	f7f1 b860 	b.w	8012d18 <USBD_LL_SetupStage>

08021c58 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8021c58:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8021c5c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c60:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021c64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8021c68:	f7f1 b884 	b.w	8012d74 <USBD_LL_DataOutStage>

08021c6c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8021c6c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 8021c70:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8021c74:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021c78:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8021c7a:	f7f1 b8b1 	b.w	8012de0 <USBD_LL_DataInStage>
 8021c7e:	bf00      	nop

08021c80 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8021c80:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021c84:	f7f1 b942 	b.w	8012f0c <USBD_LL_SOF>

08021c88 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021c88:	68c1      	ldr	r1, [r0, #12]
{
 8021c8a:	b510      	push	{r4, lr}
 8021c8c:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8021c8e:	b111      	cbz	r1, 8021c96 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8021c90:	2902      	cmp	r1, #2
 8021c92:	d10a      	bne.n	8021caa <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 8021c94:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8021c96:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 8021c9a:	f7f1 f91f 	bl	8012edc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021c9e:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 8021ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8021ca6:	f7f1 b8f1 	b.w	8012e8c <USBD_LL_Reset>
    Error_Handler();
 8021caa:	f7e1 f803 	bl	8002cb4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8021cae:	2101      	movs	r1, #1
 8021cb0:	e7f1      	b.n	8021c96 <HAL_PCD_ResetCallback+0xe>
 8021cb2:	bf00      	nop

08021cb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8021cb4:	b510      	push	{r4, lr}
 8021cb6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8021cb8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021cbc:	f7f1 f912 	bl	8012ee4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021cc0:	6822      	ldr	r2, [r4, #0]
 8021cc2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021cc6:	f043 0301 	orr.w	r3, r3, #1
 8021cca:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8021cce:	6a23      	ldr	r3, [r4, #32]
 8021cd0:	b123      	cbz	r3, 8021cdc <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021cd2:	4a03      	ldr	r2, [pc, #12]	; (8021ce0 <HAL_PCD_SuspendCallback+0x2c>)
 8021cd4:	6913      	ldr	r3, [r2, #16]
 8021cd6:	f043 0306 	orr.w	r3, r3, #6
 8021cda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8021cdc:	bd10      	pop	{r4, pc}
 8021cde:	bf00      	nop
 8021ce0:	e000ed00 	.word	0xe000ed00

08021ce4 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8021ce4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021ce8:	f7f1 b906 	b.w	8012ef8 <USBD_LL_Resume>

08021cec <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8021cec:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021cf0:	f7f1 b91c 	b.w	8012f2c <USBD_LL_IsoOUTIncomplete>

08021cf4 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8021cf4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021cf8:	f7f1 b916 	b.w	8012f28 <USBD_LL_IsoINIncomplete>

08021cfc <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8021cfc:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021d00:	f7f1 b916 	b.w	8012f30 <USBD_LL_DevConnected>

08021d04 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8021d04:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8021d08:	f7f1 b914 	b.w	8012f34 <USBD_LL_DevDisconnected>

08021d0c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8021d0c:	7802      	ldrb	r2, [r0, #0]
 8021d0e:	b10a      	cbz	r2, 8021d14 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8021d10:	2000      	movs	r0, #0
 8021d12:	4770      	bx	lr
  hpcd_USB_OTG_FS.pData = pdev;
 8021d14:	4b15      	ldr	r3, [pc, #84]	; (8021d6c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8021d16:	2101      	movs	r1, #1
{
 8021d18:	b570      	push	{r4, r5, r6, lr}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8021d1a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8021d1c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021d20:	2506      	movs	r5, #6
  hpcd_USB_OTG_FS.pData = pdev;
 8021d22:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8021d26:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021d2a:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8021d2c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8021d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8021d30:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8021d32:	62d9      	str	r1, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8021d34:	e9c3 2208 	strd	r2, r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8021d38:	e9c3 6500 	strd	r6, r5, [r3]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8021d3c:	e9c3 4106 	strd	r4, r1, [r3, #24]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8021d40:	f7e9 f838 	bl	800adb4 <HAL_PCD_Init>
 8021d44:	b978      	cbnz	r0, 8021d66 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8021d46:	2180      	movs	r1, #128	; 0x80
 8021d48:	4808      	ldr	r0, [pc, #32]	; (8021d6c <USBD_LL_Init+0x60>)
 8021d4a:	f7e9 fd99 	bl	800b880 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8021d4e:	2240      	movs	r2, #64	; 0x40
 8021d50:	2100      	movs	r1, #0
 8021d52:	4806      	ldr	r0, [pc, #24]	; (8021d6c <USBD_LL_Init+0x60>)
 8021d54:	f7e9 fd70 	bl	800b838 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8021d58:	2280      	movs	r2, #128	; 0x80
 8021d5a:	2101      	movs	r1, #1
 8021d5c:	4803      	ldr	r0, [pc, #12]	; (8021d6c <USBD_LL_Init+0x60>)
 8021d5e:	f7e9 fd6b 	bl	800b838 <HAL_PCDEx_SetTxFiFo>
}
 8021d62:	2000      	movs	r0, #0
 8021d64:	bd70      	pop	{r4, r5, r6, pc}
    Error_Handler( );
 8021d66:	f7e0 ffa5 	bl	8002cb4 <Error_Handler>
 8021d6a:	e7ec      	b.n	8021d46 <USBD_LL_Init+0x3a>
 8021d6c:	2002f9c0 	.word	0x2002f9c0

08021d70 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 8021d70:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021d74:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021d76:	f7e9 f8cb 	bl	800af10 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 8021d7a:	2803      	cmp	r0, #3
 8021d7c:	d802      	bhi.n	8021d84 <USBD_LL_Start+0x14>
 8021d7e:	4b02      	ldr	r3, [pc, #8]	; (8021d88 <USBD_LL_Start+0x18>)
 8021d80:	5c18      	ldrb	r0, [r3, r0]
}
 8021d82:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 8021d84:	2003      	movs	r0, #3
}
 8021d86:	bd08      	pop	{r3, pc}
 8021d88:	08042ae0 	.word	0x08042ae0

08021d8c <USBD_LL_OpenEP>:
{
 8021d8c:	b510      	push	{r4, lr}
 8021d8e:	4614      	mov	r4, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021d90:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021d94:	461a      	mov	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021d96:	4623      	mov	r3, r4
 8021d98:	f7e9 fc0a 	bl	800b5b0 <HAL_PCD_EP_Open>
  switch (hal_status)
 8021d9c:	2803      	cmp	r0, #3
 8021d9e:	d802      	bhi.n	8021da6 <USBD_LL_OpenEP+0x1a>
 8021da0:	4b02      	ldr	r3, [pc, #8]	; (8021dac <USBD_LL_OpenEP+0x20>)
 8021da2:	5c18      	ldrb	r0, [r3, r0]
}
 8021da4:	bd10      	pop	{r4, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8021da6:	2003      	movs	r0, #3
}
 8021da8:	bd10      	pop	{r4, pc}
 8021daa:	bf00      	nop
 8021dac:	08042ae0 	.word	0x08042ae0

08021db0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021db0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021db4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021db6:	f7e9 fc35 	bl	800b624 <HAL_PCD_EP_Close>
  switch (hal_status)
 8021dba:	2803      	cmp	r0, #3
 8021dbc:	d802      	bhi.n	8021dc4 <USBD_LL_CloseEP+0x14>
 8021dbe:	4b02      	ldr	r3, [pc, #8]	; (8021dc8 <USBD_LL_CloseEP+0x18>)
 8021dc0:	5c18      	ldrb	r0, [r3, r0]
}
 8021dc2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8021dc4:	2003      	movs	r0, #3
}
 8021dc6:	bd08      	pop	{r3, pc}
 8021dc8:	08042ae0 	.word	0x08042ae0

08021dcc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021dcc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021dd0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021dd2:	f7e9 fcb1 	bl	800b738 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8021dd6:	2803      	cmp	r0, #3
 8021dd8:	d802      	bhi.n	8021de0 <USBD_LL_StallEP+0x14>
 8021dda:	4b02      	ldr	r3, [pc, #8]	; (8021de4 <USBD_LL_StallEP+0x18>)
 8021ddc:	5c18      	ldrb	r0, [r3, r0]
}
 8021dde:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8021de0:	2003      	movs	r0, #3
}
 8021de2:	bd08      	pop	{r3, pc}
 8021de4:	08042ae0 	.word	0x08042ae0

08021de8 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021de8:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021dec:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021dee:	f7e9 fce7 	bl	800b7c0 <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8021df2:	2803      	cmp	r0, #3
 8021df4:	d802      	bhi.n	8021dfc <USBD_LL_ClearStallEP+0x14>
 8021df6:	4b02      	ldr	r3, [pc, #8]	; (8021e00 <USBD_LL_ClearStallEP+0x18>)
 8021df8:	5c18      	ldrb	r0, [r3, r0]
}
 8021dfa:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8021dfc:	2003      	movs	r0, #3
}
 8021dfe:	bd08      	pop	{r3, pc}
 8021e00:	08042ae0 	.word	0x08042ae0

08021e04 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8021e04:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8021e06:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 8021e0a:	d406      	bmi.n	8021e1a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8021e0c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021e10:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021e14:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8021e18:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8021e1a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8021e1e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8021e22:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8021e26:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 8021e2a:	4770      	bx	lr

08021e2c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021e2c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021e30:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021e32:	f7e9 fba9 	bl	800b588 <HAL_PCD_SetAddress>
  switch (hal_status)
 8021e36:	2803      	cmp	r0, #3
 8021e38:	d802      	bhi.n	8021e40 <USBD_LL_SetUSBAddress+0x14>
 8021e3a:	4b02      	ldr	r3, [pc, #8]	; (8021e44 <USBD_LL_SetUSBAddress+0x18>)
 8021e3c:	5c18      	ldrb	r0, [r3, r0]
}
 8021e3e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8021e40:	2003      	movs	r0, #3
}
 8021e42:	bd08      	pop	{r3, pc}
 8021e44:	08042ae0 	.word	0x08042ae0

08021e48 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021e48:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021e4c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021e4e:	f7e9 fc4f 	bl	800b6f0 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8021e52:	2803      	cmp	r0, #3
 8021e54:	d802      	bhi.n	8021e5c <USBD_LL_Transmit+0x14>
 8021e56:	4b02      	ldr	r3, [pc, #8]	; (8021e60 <USBD_LL_Transmit+0x18>)
 8021e58:	5c18      	ldrb	r0, [r3, r0]
}
 8021e5a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8021e5c:	2003      	movs	r0, #3
}
 8021e5e:	bd08      	pop	{r3, pc}
 8021e60:	08042ae0 	.word	0x08042ae0

08021e64 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021e64:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8021e68:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021e6a:	f7e9 fc0f 	bl	800b68c <HAL_PCD_EP_Receive>
  switch (hal_status)
 8021e6e:	2803      	cmp	r0, #3
 8021e70:	d802      	bhi.n	8021e78 <USBD_LL_PrepareReceive+0x14>
 8021e72:	4b02      	ldr	r3, [pc, #8]	; (8021e7c <USBD_LL_PrepareReceive+0x18>)
 8021e74:	5c18      	ldrb	r0, [r3, r0]
}
 8021e76:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8021e78:	2003      	movs	r0, #3
}
 8021e7a:	bd08      	pop	{r3, pc}
 8021e7c:	08042ae0 	.word	0x08042ae0

08021e80 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8021e80:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 8021e84:	f7e9 bc2a 	b.w	800b6dc <HAL_PCD_EP_GetRxCount>

08021e88 <HAL_PCDEx_LPM_Callback>:
{
 8021e88:	b510      	push	{r4, lr}
 8021e8a:	4604      	mov	r4, r0
  switch (msg)
 8021e8c:	b1a1      	cbz	r1, 8021eb8 <HAL_PCDEx_LPM_Callback+0x30>
 8021e8e:	2901      	cmp	r1, #1
 8021e90:	d111      	bne.n	8021eb6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021e92:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 8021e94:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8021e98:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021e9c:	f043 0301 	orr.w	r3, r3, #1
 8021ea0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 8021ea4:	f7f1 f81e 	bl	8012ee4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8021ea8:	6a23      	ldr	r3, [r4, #32]
 8021eaa:	b123      	cbz	r3, 8021eb6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021eac:	4a0e      	ldr	r2, [pc, #56]	; (8021ee8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021eae:	6913      	ldr	r3, [r2, #16]
 8021eb0:	f043 0306 	orr.w	r3, r3, #6
 8021eb4:	6113      	str	r3, [r2, #16]
}
 8021eb6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 8021eb8:	6a03      	ldr	r3, [r0, #32]
 8021eba:	b963      	cbnz	r3, 8021ed6 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021ebc:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 8021ebe:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021ec2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 8021ec6:	f023 0301 	bic.w	r3, r3, #1
}
 8021eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8021ece:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8021ed2:	f7f1 b811 	b.w	8012ef8 <USBD_LL_Resume>
  SystemClock_Config();
 8021ed6:	f7e0 fef5 	bl	8002cc4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8021eda:	4a03      	ldr	r2, [pc, #12]	; (8021ee8 <HAL_PCDEx_LPM_Callback+0x60>)
 8021edc:	6913      	ldr	r3, [r2, #16]
 8021ede:	f023 0306 	bic.w	r3, r3, #6
 8021ee2:	6113      	str	r3, [r2, #16]
 8021ee4:	e7ea      	b.n	8021ebc <HAL_PCDEx_LPM_Callback+0x34>
 8021ee6:	bf00      	nop
 8021ee8:	e000ed00 	.word	0xe000ed00

08021eec <atoi>:
 8021eec:	220a      	movs	r2, #10
 8021eee:	2100      	movs	r1, #0
 8021ef0:	f002 b928 	b.w	8024144 <strtol>

08021ef4 <ctime>:
 8021ef4:	b508      	push	{r3, lr}
 8021ef6:	f000 f829 	bl	8021f4c <localtime>
 8021efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8021efe:	f002 bcbf 	b.w	8024880 <asctime>
	...

08021f04 <__libc_init_array>:
 8021f04:	b570      	push	{r4, r5, r6, lr}
 8021f06:	4d0d      	ldr	r5, [pc, #52]	; (8021f3c <__libc_init_array+0x38>)
 8021f08:	4c0d      	ldr	r4, [pc, #52]	; (8021f40 <__libc_init_array+0x3c>)
 8021f0a:	1b64      	subs	r4, r4, r5
 8021f0c:	10a4      	asrs	r4, r4, #2
 8021f0e:	2600      	movs	r6, #0
 8021f10:	42a6      	cmp	r6, r4
 8021f12:	d109      	bne.n	8021f28 <__libc_init_array+0x24>
 8021f14:	4d0b      	ldr	r5, [pc, #44]	; (8021f44 <__libc_init_array+0x40>)
 8021f16:	4c0c      	ldr	r4, [pc, #48]	; (8021f48 <__libc_init_array+0x44>)
 8021f18:	f005 f996 	bl	8027248 <_init>
 8021f1c:	1b64      	subs	r4, r4, r5
 8021f1e:	10a4      	asrs	r4, r4, #2
 8021f20:	2600      	movs	r6, #0
 8021f22:	42a6      	cmp	r6, r4
 8021f24:	d105      	bne.n	8021f32 <__libc_init_array+0x2e>
 8021f26:	bd70      	pop	{r4, r5, r6, pc}
 8021f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8021f2c:	4798      	blx	r3
 8021f2e:	3601      	adds	r6, #1
 8021f30:	e7ee      	b.n	8021f10 <__libc_init_array+0xc>
 8021f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8021f36:	4798      	blx	r3
 8021f38:	3601      	adds	r6, #1
 8021f3a:	e7f2      	b.n	8021f22 <__libc_init_array+0x1e>
 8021f3c:	080433e8 	.word	0x080433e8
 8021f40:	080433e8 	.word	0x080433e8
 8021f44:	080433e8 	.word	0x080433e8
 8021f48:	080433ec 	.word	0x080433ec

08021f4c <localtime>:
 8021f4c:	b538      	push	{r3, r4, r5, lr}
 8021f4e:	4b0b      	ldr	r3, [pc, #44]	; (8021f7c <localtime+0x30>)
 8021f50:	681d      	ldr	r5, [r3, #0]
 8021f52:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8021f54:	4604      	mov	r4, r0
 8021f56:	b953      	cbnz	r3, 8021f6e <localtime+0x22>
 8021f58:	2024      	movs	r0, #36	; 0x24
 8021f5a:	f000 f90b 	bl	8022174 <malloc>
 8021f5e:	4602      	mov	r2, r0
 8021f60:	63e8      	str	r0, [r5, #60]	; 0x3c
 8021f62:	b920      	cbnz	r0, 8021f6e <localtime+0x22>
 8021f64:	4b06      	ldr	r3, [pc, #24]	; (8021f80 <localtime+0x34>)
 8021f66:	4807      	ldr	r0, [pc, #28]	; (8021f84 <localtime+0x38>)
 8021f68:	2132      	movs	r1, #50	; 0x32
 8021f6a:	f002 fcd1 	bl	8024910 <__assert_func>
 8021f6e:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8021f70:	4620      	mov	r0, r4
 8021f72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021f76:	f000 b807 	b.w	8021f88 <localtime_r>
 8021f7a:	bf00      	nop
 8021f7c:	20000488 	.word	0x20000488
 8021f80:	08042bec 	.word	0x08042bec
 8021f84:	08042c03 	.word	0x08042c03

08021f88 <localtime_r>:
 8021f88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8021f8c:	4607      	mov	r7, r0
 8021f8e:	9101      	str	r1, [sp, #4]
 8021f90:	f003 fd22 	bl	80259d8 <__gettzinfo>
 8021f94:	9901      	ldr	r1, [sp, #4]
 8021f96:	4680      	mov	r8, r0
 8021f98:	4638      	mov	r0, r7
 8021f9a:	f003 fd21 	bl	80259e0 <gmtime_r>
 8021f9e:	6943      	ldr	r3, [r0, #20]
 8021fa0:	079a      	lsls	r2, r3, #30
 8021fa2:	4604      	mov	r4, r0
 8021fa4:	f203 766c 	addw	r6, r3, #1900	; 0x76c
 8021fa8:	d105      	bne.n	8021fb6 <localtime_r+0x2e>
 8021faa:	2264      	movs	r2, #100	; 0x64
 8021fac:	fb96 f3f2 	sdiv	r3, r6, r2
 8021fb0:	fb02 6313 	mls	r3, r2, r3, r6
 8021fb4:	bb7b      	cbnz	r3, 8022016 <localtime_r+0x8e>
 8021fb6:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8021fba:	fb96 f5f3 	sdiv	r5, r6, r3
 8021fbe:	fb03 6515 	mls	r5, r3, r5, r6
 8021fc2:	fab5 f585 	clz	r5, r5
 8021fc6:	096d      	lsrs	r5, r5, #5
 8021fc8:	4b68      	ldr	r3, [pc, #416]	; (802216c <localtime_r+0x1e4>)
 8021fca:	2230      	movs	r2, #48	; 0x30
 8021fcc:	fb02 3505 	mla	r5, r2, r5, r3
 8021fd0:	f002 f9f2 	bl	80243b8 <__tz_lock>
 8021fd4:	f002 f9fc 	bl	80243d0 <_tzset_unlocked>
 8021fd8:	4b65      	ldr	r3, [pc, #404]	; (8022170 <localtime_r+0x1e8>)
 8021fda:	681b      	ldr	r3, [r3, #0]
 8021fdc:	b353      	cbz	r3, 8022034 <localtime_r+0xac>
 8021fde:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021fe2:	42b3      	cmp	r3, r6
 8021fe4:	d119      	bne.n	802201a <localtime_r+0x92>
 8021fe6:	f8d8 1000 	ldr.w	r1, [r8]
 8021fea:	e9d7 6700 	ldrd	r6, r7, [r7]
 8021fee:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
 8021ff2:	b9d1      	cbnz	r1, 802202a <localtime_r+0xa2>
 8021ff4:	4296      	cmp	r6, r2
 8021ff6:	eb77 0303 	sbcs.w	r3, r7, r3
 8021ffa:	da23      	bge.n	8022044 <localtime_r+0xbc>
 8021ffc:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 8022000:	4296      	cmp	r6, r2
 8022002:	eb77 0303 	sbcs.w	r3, r7, r3
 8022006:	bfb4      	ite	lt
 8022008:	2301      	movlt	r3, #1
 802200a:	2300      	movge	r3, #0
 802200c:	6223      	str	r3, [r4, #32]
 802200e:	db1b      	blt.n	8022048 <localtime_r+0xc0>
 8022010:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
 8022014:	e01a      	b.n	802204c <localtime_r+0xc4>
 8022016:	2501      	movs	r5, #1
 8022018:	e7d6      	b.n	8021fc8 <localtime_r+0x40>
 802201a:	4630      	mov	r0, r6
 802201c:	f002 f924 	bl	8024268 <__tzcalc_limits>
 8022020:	2800      	cmp	r0, #0
 8022022:	d1e0      	bne.n	8021fe6 <localtime_r+0x5e>
 8022024:	f04f 33ff 	mov.w	r3, #4294967295
 8022028:	e004      	b.n	8022034 <localtime_r+0xac>
 802202a:	4296      	cmp	r6, r2
 802202c:	eb77 0303 	sbcs.w	r3, r7, r3
 8022030:	da02      	bge.n	8022038 <localtime_r+0xb0>
 8022032:	2300      	movs	r3, #0
 8022034:	6223      	str	r3, [r4, #32]
 8022036:	e7eb      	b.n	8022010 <localtime_r+0x88>
 8022038:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
 802203c:	4296      	cmp	r6, r2
 802203e:	eb77 0303 	sbcs.w	r3, r7, r3
 8022042:	daf6      	bge.n	8022032 <localtime_r+0xaa>
 8022044:	2301      	movs	r3, #1
 8022046:	6223      	str	r3, [r4, #32]
 8022048:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
 802204c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8022050:	203c      	movs	r0, #60	; 0x3c
 8022052:	fb91 f6f3 	sdiv	r6, r1, r3
 8022056:	fb03 1316 	mls	r3, r3, r6, r1
 802205a:	6861      	ldr	r1, [r4, #4]
 802205c:	fb93 f2f0 	sdiv	r2, r3, r0
 8022060:	fb00 3012 	mls	r0, r0, r2, r3
 8022064:	6823      	ldr	r3, [r4, #0]
 8022066:	1a89      	subs	r1, r1, r2
 8022068:	68a2      	ldr	r2, [r4, #8]
 802206a:	6061      	str	r1, [r4, #4]
 802206c:	1a1b      	subs	r3, r3, r0
 802206e:	1b92      	subs	r2, r2, r6
 8022070:	2b3b      	cmp	r3, #59	; 0x3b
 8022072:	6023      	str	r3, [r4, #0]
 8022074:	60a2      	str	r2, [r4, #8]
 8022076:	dd35      	ble.n	80220e4 <localtime_r+0x15c>
 8022078:	3101      	adds	r1, #1
 802207a:	6061      	str	r1, [r4, #4]
 802207c:	3b3c      	subs	r3, #60	; 0x3c
 802207e:	6023      	str	r3, [r4, #0]
 8022080:	6863      	ldr	r3, [r4, #4]
 8022082:	2b3b      	cmp	r3, #59	; 0x3b
 8022084:	dd34      	ble.n	80220f0 <localtime_r+0x168>
 8022086:	3201      	adds	r2, #1
 8022088:	60a2      	str	r2, [r4, #8]
 802208a:	3b3c      	subs	r3, #60	; 0x3c
 802208c:	6063      	str	r3, [r4, #4]
 802208e:	68a3      	ldr	r3, [r4, #8]
 8022090:	2b17      	cmp	r3, #23
 8022092:	dd33      	ble.n	80220fc <localtime_r+0x174>
 8022094:	69e2      	ldr	r2, [r4, #28]
 8022096:	3201      	adds	r2, #1
 8022098:	61e2      	str	r2, [r4, #28]
 802209a:	69a2      	ldr	r2, [r4, #24]
 802209c:	3201      	adds	r2, #1
 802209e:	2a06      	cmp	r2, #6
 80220a0:	bfc8      	it	gt
 80220a2:	2200      	movgt	r2, #0
 80220a4:	61a2      	str	r2, [r4, #24]
 80220a6:	68e2      	ldr	r2, [r4, #12]
 80220a8:	3b18      	subs	r3, #24
 80220aa:	3201      	adds	r2, #1
 80220ac:	60a3      	str	r3, [r4, #8]
 80220ae:	6923      	ldr	r3, [r4, #16]
 80220b0:	60e2      	str	r2, [r4, #12]
 80220b2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 80220b6:	428a      	cmp	r2, r1
 80220b8:	dd0e      	ble.n	80220d8 <localtime_r+0x150>
 80220ba:	2b0b      	cmp	r3, #11
 80220bc:	eba2 0201 	sub.w	r2, r2, r1
 80220c0:	60e2      	str	r2, [r4, #12]
 80220c2:	f103 0201 	add.w	r2, r3, #1
 80220c6:	bf09      	itett	eq
 80220c8:	6963      	ldreq	r3, [r4, #20]
 80220ca:	6122      	strne	r2, [r4, #16]
 80220cc:	2200      	moveq	r2, #0
 80220ce:	3301      	addeq	r3, #1
 80220d0:	bf02      	ittt	eq
 80220d2:	6122      	streq	r2, [r4, #16]
 80220d4:	6163      	streq	r3, [r4, #20]
 80220d6:	61e2      	streq	r2, [r4, #28]
 80220d8:	f002 f974 	bl	80243c4 <__tz_unlock>
 80220dc:	4620      	mov	r0, r4
 80220de:	b002      	add	sp, #8
 80220e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80220e4:	2b00      	cmp	r3, #0
 80220e6:	dacb      	bge.n	8022080 <localtime_r+0xf8>
 80220e8:	3901      	subs	r1, #1
 80220ea:	6061      	str	r1, [r4, #4]
 80220ec:	333c      	adds	r3, #60	; 0x3c
 80220ee:	e7c6      	b.n	802207e <localtime_r+0xf6>
 80220f0:	2b00      	cmp	r3, #0
 80220f2:	dacc      	bge.n	802208e <localtime_r+0x106>
 80220f4:	3a01      	subs	r2, #1
 80220f6:	60a2      	str	r2, [r4, #8]
 80220f8:	333c      	adds	r3, #60	; 0x3c
 80220fa:	e7c7      	b.n	802208c <localtime_r+0x104>
 80220fc:	2b00      	cmp	r3, #0
 80220fe:	daeb      	bge.n	80220d8 <localtime_r+0x150>
 8022100:	69e2      	ldr	r2, [r4, #28]
 8022102:	3a01      	subs	r2, #1
 8022104:	61e2      	str	r2, [r4, #28]
 8022106:	69a2      	ldr	r2, [r4, #24]
 8022108:	3a01      	subs	r2, #1
 802210a:	bf48      	it	mi
 802210c:	2206      	movmi	r2, #6
 802210e:	61a2      	str	r2, [r4, #24]
 8022110:	68e2      	ldr	r2, [r4, #12]
 8022112:	3318      	adds	r3, #24
 8022114:	3a01      	subs	r2, #1
 8022116:	60e2      	str	r2, [r4, #12]
 8022118:	60a3      	str	r3, [r4, #8]
 802211a:	2a00      	cmp	r2, #0
 802211c:	d1dc      	bne.n	80220d8 <localtime_r+0x150>
 802211e:	6923      	ldr	r3, [r4, #16]
 8022120:	3b01      	subs	r3, #1
 8022122:	d405      	bmi.n	8022130 <localtime_r+0x1a8>
 8022124:	6123      	str	r3, [r4, #16]
 8022126:	6923      	ldr	r3, [r4, #16]
 8022128:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 802212c:	60e3      	str	r3, [r4, #12]
 802212e:	e7d3      	b.n	80220d8 <localtime_r+0x150>
 8022130:	230b      	movs	r3, #11
 8022132:	6123      	str	r3, [r4, #16]
 8022134:	6963      	ldr	r3, [r4, #20]
 8022136:	1e5a      	subs	r2, r3, #1
 8022138:	6162      	str	r2, [r4, #20]
 802213a:	f203 726b 	addw	r2, r3, #1899	; 0x76b
 802213e:	0793      	lsls	r3, r2, #30
 8022140:	d105      	bne.n	802214e <localtime_r+0x1c6>
 8022142:	2164      	movs	r1, #100	; 0x64
 8022144:	fb92 f3f1 	sdiv	r3, r2, r1
 8022148:	fb01 2313 	mls	r3, r1, r3, r2
 802214c:	b963      	cbnz	r3, 8022168 <localtime_r+0x1e0>
 802214e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8022152:	fb92 f3f1 	sdiv	r3, r2, r1
 8022156:	fb01 2313 	mls	r3, r1, r3, r2
 802215a:	fab3 f383 	clz	r3, r3
 802215e:	095b      	lsrs	r3, r3, #5
 8022160:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8022164:	61e3      	str	r3, [r4, #28]
 8022166:	e7de      	b.n	8022126 <localtime_r+0x19e>
 8022168:	2301      	movs	r3, #1
 802216a:	e7f9      	b.n	8022160 <localtime_r+0x1d8>
 802216c:	08042cc4 	.word	0x08042cc4
 8022170:	2001adb8 	.word	0x2001adb8

08022174 <malloc>:
 8022174:	4b02      	ldr	r3, [pc, #8]	; (8022180 <malloc+0xc>)
 8022176:	4601      	mov	r1, r0
 8022178:	6818      	ldr	r0, [r3, #0]
 802217a:	f000 bb17 	b.w	80227ac <_malloc_r>
 802217e:	bf00      	nop
 8022180:	20000488 	.word	0x20000488

08022184 <free>:
 8022184:	4b02      	ldr	r3, [pc, #8]	; (8022190 <free+0xc>)
 8022186:	4601      	mov	r1, r0
 8022188:	6818      	ldr	r0, [r3, #0]
 802218a:	f000 babf 	b.w	802270c <_free_r>
 802218e:	bf00      	nop
 8022190:	20000488 	.word	0x20000488

08022194 <memcmp>:
 8022194:	b530      	push	{r4, r5, lr}
 8022196:	3901      	subs	r1, #1
 8022198:	2400      	movs	r4, #0
 802219a:	42a2      	cmp	r2, r4
 802219c:	d101      	bne.n	80221a2 <memcmp+0xe>
 802219e:	2000      	movs	r0, #0
 80221a0:	e005      	b.n	80221ae <memcmp+0x1a>
 80221a2:	5d03      	ldrb	r3, [r0, r4]
 80221a4:	3401      	adds	r4, #1
 80221a6:	5d0d      	ldrb	r5, [r1, r4]
 80221a8:	42ab      	cmp	r3, r5
 80221aa:	d0f6      	beq.n	802219a <memcmp+0x6>
 80221ac:	1b58      	subs	r0, r3, r5
 80221ae:	bd30      	pop	{r4, r5, pc}

080221b0 <memcpy>:
 80221b0:	440a      	add	r2, r1
 80221b2:	4291      	cmp	r1, r2
 80221b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80221b8:	d100      	bne.n	80221bc <memcpy+0xc>
 80221ba:	4770      	bx	lr
 80221bc:	b510      	push	{r4, lr}
 80221be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80221c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80221c6:	4291      	cmp	r1, r2
 80221c8:	d1f9      	bne.n	80221be <memcpy+0xe>
 80221ca:	bd10      	pop	{r4, pc}

080221cc <memmove>:
 80221cc:	4288      	cmp	r0, r1
 80221ce:	b510      	push	{r4, lr}
 80221d0:	eb01 0402 	add.w	r4, r1, r2
 80221d4:	d902      	bls.n	80221dc <memmove+0x10>
 80221d6:	4284      	cmp	r4, r0
 80221d8:	4623      	mov	r3, r4
 80221da:	d807      	bhi.n	80221ec <memmove+0x20>
 80221dc:	1e43      	subs	r3, r0, #1
 80221de:	42a1      	cmp	r1, r4
 80221e0:	d008      	beq.n	80221f4 <memmove+0x28>
 80221e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80221e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80221ea:	e7f8      	b.n	80221de <memmove+0x12>
 80221ec:	4402      	add	r2, r0
 80221ee:	4601      	mov	r1, r0
 80221f0:	428a      	cmp	r2, r1
 80221f2:	d100      	bne.n	80221f6 <memmove+0x2a>
 80221f4:	bd10      	pop	{r4, pc}
 80221f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80221fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80221fe:	e7f7      	b.n	80221f0 <memmove+0x24>

08022200 <memset>:
 8022200:	4402      	add	r2, r0
 8022202:	4603      	mov	r3, r0
 8022204:	4293      	cmp	r3, r2
 8022206:	d100      	bne.n	802220a <memset+0xa>
 8022208:	4770      	bx	lr
 802220a:	f803 1b01 	strb.w	r1, [r3], #1
 802220e:	e7f9      	b.n	8022204 <memset+0x4>

08022210 <validate_structure>:
 8022210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022212:	6801      	ldr	r1, [r0, #0]
 8022214:	293b      	cmp	r1, #59	; 0x3b
 8022216:	4604      	mov	r4, r0
 8022218:	d911      	bls.n	802223e <validate_structure+0x2e>
 802221a:	223c      	movs	r2, #60	; 0x3c
 802221c:	4668      	mov	r0, sp
 802221e:	f002 fba5 	bl	802496c <div>
 8022222:	9a01      	ldr	r2, [sp, #4]
 8022224:	6863      	ldr	r3, [r4, #4]
 8022226:	9900      	ldr	r1, [sp, #0]
 8022228:	2a00      	cmp	r2, #0
 802222a:	440b      	add	r3, r1
 802222c:	6063      	str	r3, [r4, #4]
 802222e:	bfbb      	ittet	lt
 8022230:	323c      	addlt	r2, #60	; 0x3c
 8022232:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022236:	6022      	strge	r2, [r4, #0]
 8022238:	6022      	strlt	r2, [r4, #0]
 802223a:	bfb8      	it	lt
 802223c:	6063      	strlt	r3, [r4, #4]
 802223e:	6861      	ldr	r1, [r4, #4]
 8022240:	293b      	cmp	r1, #59	; 0x3b
 8022242:	d911      	bls.n	8022268 <validate_structure+0x58>
 8022244:	223c      	movs	r2, #60	; 0x3c
 8022246:	4668      	mov	r0, sp
 8022248:	f002 fb90 	bl	802496c <div>
 802224c:	9a01      	ldr	r2, [sp, #4]
 802224e:	68a3      	ldr	r3, [r4, #8]
 8022250:	9900      	ldr	r1, [sp, #0]
 8022252:	2a00      	cmp	r2, #0
 8022254:	440b      	add	r3, r1
 8022256:	60a3      	str	r3, [r4, #8]
 8022258:	bfbb      	ittet	lt
 802225a:	323c      	addlt	r2, #60	; 0x3c
 802225c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8022260:	6062      	strge	r2, [r4, #4]
 8022262:	6062      	strlt	r2, [r4, #4]
 8022264:	bfb8      	it	lt
 8022266:	60a3      	strlt	r3, [r4, #8]
 8022268:	68a1      	ldr	r1, [r4, #8]
 802226a:	2917      	cmp	r1, #23
 802226c:	d911      	bls.n	8022292 <validate_structure+0x82>
 802226e:	2218      	movs	r2, #24
 8022270:	4668      	mov	r0, sp
 8022272:	f002 fb7b 	bl	802496c <div>
 8022276:	9a01      	ldr	r2, [sp, #4]
 8022278:	68e3      	ldr	r3, [r4, #12]
 802227a:	9900      	ldr	r1, [sp, #0]
 802227c:	2a00      	cmp	r2, #0
 802227e:	440b      	add	r3, r1
 8022280:	60e3      	str	r3, [r4, #12]
 8022282:	bfbb      	ittet	lt
 8022284:	3218      	addlt	r2, #24
 8022286:	f103 33ff 	addlt.w	r3, r3, #4294967295
 802228a:	60a2      	strge	r2, [r4, #8]
 802228c:	60a2      	strlt	r2, [r4, #8]
 802228e:	bfb8      	it	lt
 8022290:	60e3      	strlt	r3, [r4, #12]
 8022292:	6921      	ldr	r1, [r4, #16]
 8022294:	290b      	cmp	r1, #11
 8022296:	d911      	bls.n	80222bc <validate_structure+0xac>
 8022298:	220c      	movs	r2, #12
 802229a:	4668      	mov	r0, sp
 802229c:	f002 fb66 	bl	802496c <div>
 80222a0:	9a01      	ldr	r2, [sp, #4]
 80222a2:	6963      	ldr	r3, [r4, #20]
 80222a4:	9900      	ldr	r1, [sp, #0]
 80222a6:	2a00      	cmp	r2, #0
 80222a8:	440b      	add	r3, r1
 80222aa:	6163      	str	r3, [r4, #20]
 80222ac:	bfbb      	ittet	lt
 80222ae:	320c      	addlt	r2, #12
 80222b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80222b4:	6122      	strge	r2, [r4, #16]
 80222b6:	6122      	strlt	r2, [r4, #16]
 80222b8:	bfb8      	it	lt
 80222ba:	6163      	strlt	r3, [r4, #20]
 80222bc:	6963      	ldr	r3, [r4, #20]
 80222be:	0799      	lsls	r1, r3, #30
 80222c0:	d120      	bne.n	8022304 <validate_structure+0xf4>
 80222c2:	2164      	movs	r1, #100	; 0x64
 80222c4:	fb93 f2f1 	sdiv	r2, r3, r1
 80222c8:	fb01 3212 	mls	r2, r1, r2, r3
 80222cc:	b9e2      	cbnz	r2, 8022308 <validate_structure+0xf8>
 80222ce:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80222d2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80222d6:	fb93 f2f1 	sdiv	r2, r3, r1
 80222da:	fb01 3312 	mls	r3, r1, r2, r3
 80222de:	2b00      	cmp	r3, #0
 80222e0:	bf14      	ite	ne
 80222e2:	231c      	movne	r3, #28
 80222e4:	231d      	moveq	r3, #29
 80222e6:	68e2      	ldr	r2, [r4, #12]
 80222e8:	2a00      	cmp	r2, #0
 80222ea:	dc0f      	bgt.n	802230c <validate_structure+0xfc>
 80222ec:	4f33      	ldr	r7, [pc, #204]	; (80223bc <validate_structure+0x1ac>)
 80222ee:	260b      	movs	r6, #11
 80222f0:	2064      	movs	r0, #100	; 0x64
 80222f2:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80222f6:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80222fa:	f1bc 0f00 	cmp.w	ip, #0
 80222fe:	dd31      	ble.n	8022364 <validate_structure+0x154>
 8022300:	b003      	add	sp, #12
 8022302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022304:	231c      	movs	r3, #28
 8022306:	e7ee      	b.n	80222e6 <validate_structure+0xd6>
 8022308:	231d      	movs	r3, #29
 802230a:	e7ec      	b.n	80222e6 <validate_structure+0xd6>
 802230c:	4f2b      	ldr	r7, [pc, #172]	; (80223bc <validate_structure+0x1ac>)
 802230e:	f04f 0c00 	mov.w	ip, #0
 8022312:	2564      	movs	r5, #100	; 0x64
 8022314:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8022318:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 802231c:	2a01      	cmp	r2, #1
 802231e:	bf14      	ite	ne
 8022320:	f857 0022 	ldrne.w	r0, [r7, r2, lsl #2]
 8022324:	4618      	moveq	r0, r3
 8022326:	4281      	cmp	r1, r0
 8022328:	ddea      	ble.n	8022300 <validate_structure+0xf0>
 802232a:	3201      	adds	r2, #1
 802232c:	1a09      	subs	r1, r1, r0
 802232e:	2a0c      	cmp	r2, #12
 8022330:	60e1      	str	r1, [r4, #12]
 8022332:	6122      	str	r2, [r4, #16]
 8022334:	d1f0      	bne.n	8022318 <validate_structure+0x108>
 8022336:	6963      	ldr	r3, [r4, #20]
 8022338:	1c5a      	adds	r2, r3, #1
 802233a:	0791      	lsls	r1, r2, #30
 802233c:	e9c4 c204 	strd	ip, r2, [r4, #16]
 8022340:	d137      	bne.n	80223b2 <validate_structure+0x1a2>
 8022342:	fb92 f1f5 	sdiv	r1, r2, r5
 8022346:	fb05 2211 	mls	r2, r5, r1, r2
 802234a:	2a00      	cmp	r2, #0
 802234c:	d133      	bne.n	80223b6 <validate_structure+0x1a6>
 802234e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8022352:	fb93 f2f6 	sdiv	r2, r3, r6
 8022356:	fb06 3312 	mls	r3, r6, r2, r3
 802235a:	2b00      	cmp	r3, #0
 802235c:	bf14      	ite	ne
 802235e:	231c      	movne	r3, #28
 8022360:	231d      	moveq	r3, #29
 8022362:	e7d9      	b.n	8022318 <validate_structure+0x108>
 8022364:	6921      	ldr	r1, [r4, #16]
 8022366:	3901      	subs	r1, #1
 8022368:	6121      	str	r1, [r4, #16]
 802236a:	3101      	adds	r1, #1
 802236c:	d114      	bne.n	8022398 <validate_structure+0x188>
 802236e:	6963      	ldr	r3, [r4, #20]
 8022370:	1e59      	subs	r1, r3, #1
 8022372:	078a      	lsls	r2, r1, #30
 8022374:	e9c4 6104 	strd	r6, r1, [r4, #16]
 8022378:	d117      	bne.n	80223aa <validate_structure+0x19a>
 802237a:	fb91 f2f0 	sdiv	r2, r1, r0
 802237e:	fb00 1112 	mls	r1, r0, r2, r1
 8022382:	b9a1      	cbnz	r1, 80223ae <validate_structure+0x19e>
 8022384:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8022388:	fb93 f2f5 	sdiv	r2, r3, r5
 802238c:	fb05 3312 	mls	r3, r5, r2, r3
 8022390:	2b00      	cmp	r3, #0
 8022392:	bf14      	ite	ne
 8022394:	231c      	movne	r3, #28
 8022396:	231d      	moveq	r3, #29
 8022398:	6922      	ldr	r2, [r4, #16]
 802239a:	2a01      	cmp	r2, #1
 802239c:	bf14      	ite	ne
 802239e:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80223a2:	461a      	moveq	r2, r3
 80223a4:	4462      	add	r2, ip
 80223a6:	60e2      	str	r2, [r4, #12]
 80223a8:	e7a5      	b.n	80222f6 <validate_structure+0xe6>
 80223aa:	231c      	movs	r3, #28
 80223ac:	e7f4      	b.n	8022398 <validate_structure+0x188>
 80223ae:	231d      	movs	r3, #29
 80223b0:	e7f2      	b.n	8022398 <validate_structure+0x188>
 80223b2:	231c      	movs	r3, #28
 80223b4:	e7b0      	b.n	8022318 <validate_structure+0x108>
 80223b6:	231d      	movs	r3, #29
 80223b8:	e7ae      	b.n	8022318 <validate_structure+0x108>
 80223ba:	bf00      	nop
 80223bc:	08042c64 	.word	0x08042c64

080223c0 <mktime>:
 80223c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80223c4:	b08b      	sub	sp, #44	; 0x2c
 80223c6:	4605      	mov	r5, r0
 80223c8:	f003 fb06 	bl	80259d8 <__gettzinfo>
 80223cc:	4607      	mov	r7, r0
 80223ce:	4628      	mov	r0, r5
 80223d0:	f7ff ff1e 	bl	8022210 <validate_structure>
 80223d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80223d8:	f04f 0a3c 	mov.w	sl, #60	; 0x3c
 80223dc:	68a8      	ldr	r0, [r5, #8]
 80223de:	696e      	ldr	r6, [r5, #20]
 80223e0:	fb0a 2303 	mla	r3, sl, r3, r2
 80223e4:	f44f 6a61 	mov.w	sl, #3600	; 0xe10
 80223e8:	fb0a 3a00 	mla	sl, sl, r0, r3
 80223ec:	e9d5 4303 	ldrd	r4, r3, [r5, #12]
 80223f0:	4ac3      	ldr	r2, [pc, #780]	; (8022700 <mktime+0x340>)
 80223f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80223f6:	3c01      	subs	r4, #1
 80223f8:	2b01      	cmp	r3, #1
 80223fa:	4414      	add	r4, r2
 80223fc:	dd11      	ble.n	8022422 <mktime+0x62>
 80223fe:	07b1      	lsls	r1, r6, #30
 8022400:	d10f      	bne.n	8022422 <mktime+0x62>
 8022402:	2264      	movs	r2, #100	; 0x64
 8022404:	fb96 f3f2 	sdiv	r3, r6, r2
 8022408:	fb02 6313 	mls	r3, r2, r3, r6
 802240c:	b943      	cbnz	r3, 8022420 <mktime+0x60>
 802240e:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8022412:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8022416:	fb91 f3f2 	sdiv	r3, r1, r2
 802241a:	fb02 1313 	mls	r3, r2, r3, r1
 802241e:	b903      	cbnz	r3, 8022422 <mktime+0x62>
 8022420:	3401      	adds	r4, #1
 8022422:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 8022426:	3310      	adds	r3, #16
 8022428:	f644 6220 	movw	r2, #20000	; 0x4e20
 802242c:	4293      	cmp	r3, r2
 802242e:	61ec      	str	r4, [r5, #28]
 8022430:	f200 8161 	bhi.w	80226f6 <mktime+0x336>
 8022434:	2e46      	cmp	r6, #70	; 0x46
 8022436:	dd77      	ble.n	8022528 <mktime+0x168>
 8022438:	2346      	movs	r3, #70	; 0x46
 802243a:	f240 1e6d 	movw	lr, #365	; 0x16d
 802243e:	2164      	movs	r1, #100	; 0x64
 8022440:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8022444:	079a      	lsls	r2, r3, #30
 8022446:	d169      	bne.n	802251c <mktime+0x15c>
 8022448:	fb93 f2f1 	sdiv	r2, r3, r1
 802244c:	fb01 3212 	mls	r2, r1, r2, r3
 8022450:	2a00      	cmp	r2, #0
 8022452:	d166      	bne.n	8022522 <mktime+0x162>
 8022454:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022458:	fb9c f2f0 	sdiv	r2, ip, r0
 802245c:	fb00 c212 	mls	r2, r0, r2, ip
 8022460:	2a00      	cmp	r2, #0
 8022462:	bf14      	ite	ne
 8022464:	4672      	movne	r2, lr
 8022466:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802246a:	3301      	adds	r3, #1
 802246c:	429e      	cmp	r6, r3
 802246e:	4414      	add	r4, r2
 8022470:	d1e8      	bne.n	8022444 <mktime+0x84>
 8022472:	4ba4      	ldr	r3, [pc, #656]	; (8022704 <mktime+0x344>)
 8022474:	ea4f 7bea 	mov.w	fp, sl, asr #31
 8022478:	fbc3 ab04 	smlal	sl, fp, r3, r4
 802247c:	f001 ff9c 	bl	80243b8 <__tz_lock>
 8022480:	f001 ffa6 	bl	80243d0 <_tzset_unlocked>
 8022484:	4ba0      	ldr	r3, [pc, #640]	; (8022708 <mktime+0x348>)
 8022486:	f8d3 9000 	ldr.w	r9, [r3]
 802248a:	f1b9 0f00 	cmp.w	r9, #0
 802248e:	d03f      	beq.n	8022510 <mktime+0x150>
 8022490:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8022494:	6968      	ldr	r0, [r5, #20]
 8022496:	687b      	ldr	r3, [r7, #4]
 8022498:	f1b9 0f01 	cmp.w	r9, #1
 802249c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80224a0:	46c8      	mov	r8, r9
 80224a2:	bfa8      	it	ge
 80224a4:	f04f 0801 	movge.w	r8, #1
 80224a8:	4283      	cmp	r3, r0
 80224aa:	d17f      	bne.n	80225ac <mktime+0x1ec>
 80224ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80224ae:	4619      	mov	r1, r3
 80224b0:	17da      	asrs	r2, r3, #31
 80224b2:	e9cd 1200 	strd	r1, r2, [sp]
 80224b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80224ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80224be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80224c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80224c4:	1a80      	subs	r0, r0, r2
 80224c6:	eb61 71e2 	sbc.w	r1, r1, r2, asr #31
 80224ca:	4582      	cmp	sl, r0
 80224cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80224d0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80224d4:	da71      	bge.n	80225ba <mktime+0x1fa>
 80224d6:	9800      	ldr	r0, [sp, #0]
 80224d8:	6a39      	ldr	r1, [r7, #32]
 80224da:	1a09      	subs	r1, r1, r0
 80224dc:	9104      	str	r1, [sp, #16]
 80224de:	9801      	ldr	r0, [sp, #4]
 80224e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80224e2:	eb61 0100 	sbc.w	r1, r1, r0
 80224e6:	9105      	str	r1, [sp, #20]
 80224e8:	6839      	ldr	r1, [r7, #0]
 80224ea:	2900      	cmp	r1, #0
 80224ec:	d075      	beq.n	80225da <mktime+0x21a>
 80224ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80224f2:	4582      	cmp	sl, r0
 80224f4:	eb7b 0101 	sbcs.w	r1, fp, r1
 80224f8:	db05      	blt.n	8022506 <mktime+0x146>
 80224fa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80224fe:	4582      	cmp	sl, r0
 8022500:	eb7b 0101 	sbcs.w	r1, fp, r1
 8022504:	db6f      	blt.n	80225e6 <mktime+0x226>
 8022506:	f1b9 0f00 	cmp.w	r9, #0
 802250a:	f04f 0900 	mov.w	r9, #0
 802250e:	da6f      	bge.n	80225f0 <mktime+0x230>
 8022510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022512:	eb1a 0a03 	adds.w	sl, sl, r3
 8022516:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 802251a:	e0ae      	b.n	802267a <mktime+0x2ba>
 802251c:	f240 126d 	movw	r2, #365	; 0x16d
 8022520:	e7a3      	b.n	802246a <mktime+0xaa>
 8022522:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8022526:	e7a0      	b.n	802246a <mktime+0xaa>
 8022528:	d0a3      	beq.n	8022472 <mktime+0xb2>
 802252a:	2345      	movs	r3, #69	; 0x45
 802252c:	f240 1e6d 	movw	lr, #365	; 0x16d
 8022530:	2164      	movs	r1, #100	; 0x64
 8022532:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8022536:	e012      	b.n	802255e <mktime+0x19e>
 8022538:	bb62      	cbnz	r2, 8022594 <mktime+0x1d4>
 802253a:	fb93 f2f1 	sdiv	r2, r3, r1
 802253e:	fb01 3212 	mls	r2, r1, r2, r3
 8022542:	bb52      	cbnz	r2, 802259a <mktime+0x1da>
 8022544:	f203 7c6c 	addw	ip, r3, #1900	; 0x76c
 8022548:	fb9c f2f0 	sdiv	r2, ip, r0
 802254c:	fb00 c212 	mls	r2, r0, r2, ip
 8022550:	2a00      	cmp	r2, #0
 8022552:	bf14      	ite	ne
 8022554:	4672      	movne	r2, lr
 8022556:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 802255a:	1aa4      	subs	r4, r4, r2
 802255c:	3b01      	subs	r3, #1
 802255e:	429e      	cmp	r6, r3
 8022560:	f003 0203 	and.w	r2, r3, #3
 8022564:	dbe8      	blt.n	8022538 <mktime+0x178>
 8022566:	b9da      	cbnz	r2, 80225a0 <mktime+0x1e0>
 8022568:	2264      	movs	r2, #100	; 0x64
 802256a:	fb96 f3f2 	sdiv	r3, r6, r2
 802256e:	fb02 6313 	mls	r3, r2, r3, r6
 8022572:	b9c3      	cbnz	r3, 80225a6 <mktime+0x1e6>
 8022574:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8022578:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802257c:	fb91 f3f2 	sdiv	r3, r1, r2
 8022580:	fb02 1313 	mls	r3, r2, r3, r1
 8022584:	2b00      	cmp	r3, #0
 8022586:	f240 136d 	movw	r3, #365	; 0x16d
 802258a:	bf08      	it	eq
 802258c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8022590:	1ae4      	subs	r4, r4, r3
 8022592:	e76e      	b.n	8022472 <mktime+0xb2>
 8022594:	f240 126d 	movw	r2, #365	; 0x16d
 8022598:	e7df      	b.n	802255a <mktime+0x19a>
 802259a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 802259e:	e7dc      	b.n	802255a <mktime+0x19a>
 80225a0:	f240 136d 	movw	r3, #365	; 0x16d
 80225a4:	e7f4      	b.n	8022590 <mktime+0x1d0>
 80225a6:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80225aa:	e7f1      	b.n	8022590 <mktime+0x1d0>
 80225ac:	f001 fe5c 	bl	8024268 <__tzcalc_limits>
 80225b0:	2800      	cmp	r0, #0
 80225b2:	f47f af7b 	bne.w	80224ac <mktime+0xec>
 80225b6:	46c1      	mov	r9, r8
 80225b8:	e054      	b.n	8022664 <mktime+0x2a4>
 80225ba:	9800      	ldr	r0, [sp, #0]
 80225bc:	9902      	ldr	r1, [sp, #8]
 80225be:	1a09      	subs	r1, r1, r0
 80225c0:	9108      	str	r1, [sp, #32]
 80225c2:	9801      	ldr	r0, [sp, #4]
 80225c4:	9903      	ldr	r1, [sp, #12]
 80225c6:	eb61 0100 	sbc.w	r1, r1, r0
 80225ca:	9109      	str	r1, [sp, #36]	; 0x24
 80225cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80225d0:	4582      	cmp	sl, r0
 80225d2:	eb7b 0101 	sbcs.w	r1, fp, r1
 80225d6:	dbee      	blt.n	80225b6 <mktime+0x1f6>
 80225d8:	e77d      	b.n	80224d6 <mktime+0x116>
 80225da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80225de:	4582      	cmp	sl, r0
 80225e0:	eb7b 0101 	sbcs.w	r1, fp, r1
 80225e4:	db89      	blt.n	80224fa <mktime+0x13a>
 80225e6:	f1b9 0f00 	cmp.w	r9, #0
 80225ea:	db3f      	blt.n	802266c <mktime+0x2ac>
 80225ec:	f04f 0901 	mov.w	r9, #1
 80225f0:	ea88 0809 	eor.w	r8, r8, r9
 80225f4:	f1b8 0f01 	cmp.w	r8, #1
 80225f8:	d134      	bne.n	8022664 <mktime+0x2a4>
 80225fa:	f1b9 0f00 	cmp.w	r9, #0
 80225fe:	d04f      	beq.n	80226a0 <mktime+0x2e0>
 8022600:	1ad3      	subs	r3, r2, r3
 8022602:	682a      	ldr	r2, [r5, #0]
 8022604:	f8d5 800c 	ldr.w	r8, [r5, #12]
 8022608:	441a      	add	r2, r3
 802260a:	eb1a 0a03 	adds.w	sl, sl, r3
 802260e:	602a      	str	r2, [r5, #0]
 8022610:	4628      	mov	r0, r5
 8022612:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8022616:	f7ff fdfb 	bl	8022210 <validate_structure>
 802261a:	68ea      	ldr	r2, [r5, #12]
 802261c:	ebb2 0208 	subs.w	r2, r2, r8
 8022620:	d020      	beq.n	8022664 <mktime+0x2a4>
 8022622:	2a01      	cmp	r2, #1
 8022624:	dc3e      	bgt.n	80226a4 <mktime+0x2e4>
 8022626:	1c90      	adds	r0, r2, #2
 8022628:	bfd8      	it	le
 802262a:	2201      	movle	r2, #1
 802262c:	69eb      	ldr	r3, [r5, #28]
 802262e:	18d3      	adds	r3, r2, r3
 8022630:	4414      	add	r4, r2
 8022632:	d540      	bpl.n	80226b6 <mktime+0x2f6>
 8022634:	1e72      	subs	r2, r6, #1
 8022636:	0791      	lsls	r1, r2, #30
 8022638:	d137      	bne.n	80226aa <mktime+0x2ea>
 802263a:	2164      	movs	r1, #100	; 0x64
 802263c:	fb92 f3f1 	sdiv	r3, r2, r1
 8022640:	fb01 2313 	mls	r3, r1, r3, r2
 8022644:	bba3      	cbnz	r3, 80226b0 <mktime+0x2f0>
 8022646:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802264a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802264e:	fb96 f3f2 	sdiv	r3, r6, r2
 8022652:	fb02 6613 	mls	r6, r2, r3, r6
 8022656:	2e00      	cmp	r6, #0
 8022658:	f240 136d 	movw	r3, #365	; 0x16d
 802265c:	bf18      	it	ne
 802265e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8022662:	61eb      	str	r3, [r5, #28]
 8022664:	f1b9 0f01 	cmp.w	r9, #1
 8022668:	f47f af52 	bne.w	8022510 <mktime+0x150>
 802266c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 802266e:	eb1a 0a03 	adds.w	sl, sl, r3
 8022672:	eb4b 7be3 	adc.w	fp, fp, r3, asr #31
 8022676:	f04f 0901 	mov.w	r9, #1
 802267a:	f001 fea3 	bl	80243c4 <__tz_unlock>
 802267e:	3404      	adds	r4, #4
 8022680:	2307      	movs	r3, #7
 8022682:	fb94 f3f3 	sdiv	r3, r4, r3
 8022686:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802268a:	1ae4      	subs	r4, r4, r3
 802268c:	bf48      	it	mi
 802268e:	3407      	addmi	r4, #7
 8022690:	f8c5 9020 	str.w	r9, [r5, #32]
 8022694:	61ac      	str	r4, [r5, #24]
 8022696:	4650      	mov	r0, sl
 8022698:	4659      	mov	r1, fp
 802269a:	b00b      	add	sp, #44	; 0x2c
 802269c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80226a0:	1a9b      	subs	r3, r3, r2
 80226a2:	e7ae      	b.n	8022602 <mktime+0x242>
 80226a4:	f04f 32ff 	mov.w	r2, #4294967295
 80226a8:	e7c0      	b.n	802262c <mktime+0x26c>
 80226aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80226ae:	e7d8      	b.n	8022662 <mktime+0x2a2>
 80226b0:	f240 136d 	movw	r3, #365	; 0x16d
 80226b4:	e7d5      	b.n	8022662 <mktime+0x2a2>
 80226b6:	07b2      	lsls	r2, r6, #30
 80226b8:	d117      	bne.n	80226ea <mktime+0x32a>
 80226ba:	2164      	movs	r1, #100	; 0x64
 80226bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80226c0:	fb01 6212 	mls	r2, r1, r2, r6
 80226c4:	b9a2      	cbnz	r2, 80226f0 <mktime+0x330>
 80226c6:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80226ca:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80226ce:	fb96 f2f1 	sdiv	r2, r6, r1
 80226d2:	fb01 6612 	mls	r6, r1, r2, r6
 80226d6:	2e00      	cmp	r6, #0
 80226d8:	f240 126d 	movw	r2, #365	; 0x16d
 80226dc:	bf08      	it	eq
 80226de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80226e2:	4293      	cmp	r3, r2
 80226e4:	bfa8      	it	ge
 80226e6:	1a9b      	subge	r3, r3, r2
 80226e8:	e7bb      	b.n	8022662 <mktime+0x2a2>
 80226ea:	f240 126d 	movw	r2, #365	; 0x16d
 80226ee:	e7f8      	b.n	80226e2 <mktime+0x322>
 80226f0:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80226f4:	e7f5      	b.n	80226e2 <mktime+0x322>
 80226f6:	f04f 3aff 	mov.w	sl, #4294967295
 80226fa:	f04f 3bff 	mov.w	fp, #4294967295
 80226fe:	e7ca      	b.n	8022696 <mktime+0x2d6>
 8022700:	08042c94 	.word	0x08042c94
 8022704:	00015180 	.word	0x00015180
 8022708:	2001adb8 	.word	0x2001adb8

0802270c <_free_r>:
 802270c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802270e:	2900      	cmp	r1, #0
 8022710:	d048      	beq.n	80227a4 <_free_r+0x98>
 8022712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022716:	9001      	str	r0, [sp, #4]
 8022718:	2b00      	cmp	r3, #0
 802271a:	f1a1 0404 	sub.w	r4, r1, #4
 802271e:	bfb8      	it	lt
 8022720:	18e4      	addlt	r4, r4, r3
 8022722:	f003 faa3 	bl	8025c6c <__malloc_lock>
 8022726:	4a20      	ldr	r2, [pc, #128]	; (80227a8 <_free_r+0x9c>)
 8022728:	9801      	ldr	r0, [sp, #4]
 802272a:	6813      	ldr	r3, [r2, #0]
 802272c:	4615      	mov	r5, r2
 802272e:	b933      	cbnz	r3, 802273e <_free_r+0x32>
 8022730:	6063      	str	r3, [r4, #4]
 8022732:	6014      	str	r4, [r2, #0]
 8022734:	b003      	add	sp, #12
 8022736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802273a:	f003 ba9d 	b.w	8025c78 <__malloc_unlock>
 802273e:	42a3      	cmp	r3, r4
 8022740:	d90b      	bls.n	802275a <_free_r+0x4e>
 8022742:	6821      	ldr	r1, [r4, #0]
 8022744:	1862      	adds	r2, r4, r1
 8022746:	4293      	cmp	r3, r2
 8022748:	bf04      	itt	eq
 802274a:	681a      	ldreq	r2, [r3, #0]
 802274c:	685b      	ldreq	r3, [r3, #4]
 802274e:	6063      	str	r3, [r4, #4]
 8022750:	bf04      	itt	eq
 8022752:	1852      	addeq	r2, r2, r1
 8022754:	6022      	streq	r2, [r4, #0]
 8022756:	602c      	str	r4, [r5, #0]
 8022758:	e7ec      	b.n	8022734 <_free_r+0x28>
 802275a:	461a      	mov	r2, r3
 802275c:	685b      	ldr	r3, [r3, #4]
 802275e:	b10b      	cbz	r3, 8022764 <_free_r+0x58>
 8022760:	42a3      	cmp	r3, r4
 8022762:	d9fa      	bls.n	802275a <_free_r+0x4e>
 8022764:	6811      	ldr	r1, [r2, #0]
 8022766:	1855      	adds	r5, r2, r1
 8022768:	42a5      	cmp	r5, r4
 802276a:	d10b      	bne.n	8022784 <_free_r+0x78>
 802276c:	6824      	ldr	r4, [r4, #0]
 802276e:	4421      	add	r1, r4
 8022770:	1854      	adds	r4, r2, r1
 8022772:	42a3      	cmp	r3, r4
 8022774:	6011      	str	r1, [r2, #0]
 8022776:	d1dd      	bne.n	8022734 <_free_r+0x28>
 8022778:	681c      	ldr	r4, [r3, #0]
 802277a:	685b      	ldr	r3, [r3, #4]
 802277c:	6053      	str	r3, [r2, #4]
 802277e:	4421      	add	r1, r4
 8022780:	6011      	str	r1, [r2, #0]
 8022782:	e7d7      	b.n	8022734 <_free_r+0x28>
 8022784:	d902      	bls.n	802278c <_free_r+0x80>
 8022786:	230c      	movs	r3, #12
 8022788:	6003      	str	r3, [r0, #0]
 802278a:	e7d3      	b.n	8022734 <_free_r+0x28>
 802278c:	6825      	ldr	r5, [r4, #0]
 802278e:	1961      	adds	r1, r4, r5
 8022790:	428b      	cmp	r3, r1
 8022792:	bf04      	itt	eq
 8022794:	6819      	ldreq	r1, [r3, #0]
 8022796:	685b      	ldreq	r3, [r3, #4]
 8022798:	6063      	str	r3, [r4, #4]
 802279a:	bf04      	itt	eq
 802279c:	1949      	addeq	r1, r1, r5
 802279e:	6021      	streq	r1, [r4, #0]
 80227a0:	6054      	str	r4, [r2, #4]
 80227a2:	e7c7      	b.n	8022734 <_free_r+0x28>
 80227a4:	b003      	add	sp, #12
 80227a6:	bd30      	pop	{r4, r5, pc}
 80227a8:	2001ad94 	.word	0x2001ad94

080227ac <_malloc_r>:
 80227ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227ae:	1ccd      	adds	r5, r1, #3
 80227b0:	f025 0503 	bic.w	r5, r5, #3
 80227b4:	3508      	adds	r5, #8
 80227b6:	2d0c      	cmp	r5, #12
 80227b8:	bf38      	it	cc
 80227ba:	250c      	movcc	r5, #12
 80227bc:	2d00      	cmp	r5, #0
 80227be:	4606      	mov	r6, r0
 80227c0:	db01      	blt.n	80227c6 <_malloc_r+0x1a>
 80227c2:	42a9      	cmp	r1, r5
 80227c4:	d903      	bls.n	80227ce <_malloc_r+0x22>
 80227c6:	230c      	movs	r3, #12
 80227c8:	6033      	str	r3, [r6, #0]
 80227ca:	2000      	movs	r0, #0
 80227cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80227ce:	f003 fa4d 	bl	8025c6c <__malloc_lock>
 80227d2:	4921      	ldr	r1, [pc, #132]	; (8022858 <_malloc_r+0xac>)
 80227d4:	680a      	ldr	r2, [r1, #0]
 80227d6:	4614      	mov	r4, r2
 80227d8:	b99c      	cbnz	r4, 8022802 <_malloc_r+0x56>
 80227da:	4f20      	ldr	r7, [pc, #128]	; (802285c <_malloc_r+0xb0>)
 80227dc:	683b      	ldr	r3, [r7, #0]
 80227de:	b923      	cbnz	r3, 80227ea <_malloc_r+0x3e>
 80227e0:	4621      	mov	r1, r4
 80227e2:	4630      	mov	r0, r6
 80227e4:	f000 fdb2 	bl	802334c <_sbrk_r>
 80227e8:	6038      	str	r0, [r7, #0]
 80227ea:	4629      	mov	r1, r5
 80227ec:	4630      	mov	r0, r6
 80227ee:	f000 fdad 	bl	802334c <_sbrk_r>
 80227f2:	1c43      	adds	r3, r0, #1
 80227f4:	d123      	bne.n	802283e <_malloc_r+0x92>
 80227f6:	230c      	movs	r3, #12
 80227f8:	6033      	str	r3, [r6, #0]
 80227fa:	4630      	mov	r0, r6
 80227fc:	f003 fa3c 	bl	8025c78 <__malloc_unlock>
 8022800:	e7e3      	b.n	80227ca <_malloc_r+0x1e>
 8022802:	6823      	ldr	r3, [r4, #0]
 8022804:	1b5b      	subs	r3, r3, r5
 8022806:	d417      	bmi.n	8022838 <_malloc_r+0x8c>
 8022808:	2b0b      	cmp	r3, #11
 802280a:	d903      	bls.n	8022814 <_malloc_r+0x68>
 802280c:	6023      	str	r3, [r4, #0]
 802280e:	441c      	add	r4, r3
 8022810:	6025      	str	r5, [r4, #0]
 8022812:	e004      	b.n	802281e <_malloc_r+0x72>
 8022814:	6863      	ldr	r3, [r4, #4]
 8022816:	42a2      	cmp	r2, r4
 8022818:	bf0c      	ite	eq
 802281a:	600b      	streq	r3, [r1, #0]
 802281c:	6053      	strne	r3, [r2, #4]
 802281e:	4630      	mov	r0, r6
 8022820:	f003 fa2a 	bl	8025c78 <__malloc_unlock>
 8022824:	f104 000b 	add.w	r0, r4, #11
 8022828:	1d23      	adds	r3, r4, #4
 802282a:	f020 0007 	bic.w	r0, r0, #7
 802282e:	1ac2      	subs	r2, r0, r3
 8022830:	d0cc      	beq.n	80227cc <_malloc_r+0x20>
 8022832:	1a1b      	subs	r3, r3, r0
 8022834:	50a3      	str	r3, [r4, r2]
 8022836:	e7c9      	b.n	80227cc <_malloc_r+0x20>
 8022838:	4622      	mov	r2, r4
 802283a:	6864      	ldr	r4, [r4, #4]
 802283c:	e7cc      	b.n	80227d8 <_malloc_r+0x2c>
 802283e:	1cc4      	adds	r4, r0, #3
 8022840:	f024 0403 	bic.w	r4, r4, #3
 8022844:	42a0      	cmp	r0, r4
 8022846:	d0e3      	beq.n	8022810 <_malloc_r+0x64>
 8022848:	1a21      	subs	r1, r4, r0
 802284a:	4630      	mov	r0, r6
 802284c:	f000 fd7e 	bl	802334c <_sbrk_r>
 8022850:	3001      	adds	r0, #1
 8022852:	d1dd      	bne.n	8022810 <_malloc_r+0x64>
 8022854:	e7cf      	b.n	80227f6 <_malloc_r+0x4a>
 8022856:	bf00      	nop
 8022858:	2001ad94 	.word	0x2001ad94
 802285c:	2001ad98 	.word	0x2001ad98

08022860 <__cvt>:
 8022860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022862:	ed2d 8b02 	vpush	{d8}
 8022866:	eeb0 8b40 	vmov.f64	d8, d0
 802286a:	b085      	sub	sp, #20
 802286c:	4617      	mov	r7, r2
 802286e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8022870:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8022872:	ee18 2a90 	vmov	r2, s17
 8022876:	f025 0520 	bic.w	r5, r5, #32
 802287a:	2a00      	cmp	r2, #0
 802287c:	bfb6      	itet	lt
 802287e:	222d      	movlt	r2, #45	; 0x2d
 8022880:	2200      	movge	r2, #0
 8022882:	eeb1 8b40 	vneglt.f64	d8, d0
 8022886:	2d46      	cmp	r5, #70	; 0x46
 8022888:	460c      	mov	r4, r1
 802288a:	701a      	strb	r2, [r3, #0]
 802288c:	d004      	beq.n	8022898 <__cvt+0x38>
 802288e:	2d45      	cmp	r5, #69	; 0x45
 8022890:	d100      	bne.n	8022894 <__cvt+0x34>
 8022892:	3401      	adds	r4, #1
 8022894:	2102      	movs	r1, #2
 8022896:	e000      	b.n	802289a <__cvt+0x3a>
 8022898:	2103      	movs	r1, #3
 802289a:	ab03      	add	r3, sp, #12
 802289c:	9301      	str	r3, [sp, #4]
 802289e:	ab02      	add	r3, sp, #8
 80228a0:	9300      	str	r3, [sp, #0]
 80228a2:	4622      	mov	r2, r4
 80228a4:	4633      	mov	r3, r6
 80228a6:	eeb0 0b48 	vmov.f64	d0, d8
 80228aa:	f002 f901 	bl	8024ab0 <_dtoa_r>
 80228ae:	2d47      	cmp	r5, #71	; 0x47
 80228b0:	d109      	bne.n	80228c6 <__cvt+0x66>
 80228b2:	07fb      	lsls	r3, r7, #31
 80228b4:	d407      	bmi.n	80228c6 <__cvt+0x66>
 80228b6:	9b03      	ldr	r3, [sp, #12]
 80228b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80228ba:	1a1b      	subs	r3, r3, r0
 80228bc:	6013      	str	r3, [r2, #0]
 80228be:	b005      	add	sp, #20
 80228c0:	ecbd 8b02 	vpop	{d8}
 80228c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80228c6:	2d46      	cmp	r5, #70	; 0x46
 80228c8:	eb00 0204 	add.w	r2, r0, r4
 80228cc:	d10c      	bne.n	80228e8 <__cvt+0x88>
 80228ce:	7803      	ldrb	r3, [r0, #0]
 80228d0:	2b30      	cmp	r3, #48	; 0x30
 80228d2:	d107      	bne.n	80228e4 <__cvt+0x84>
 80228d4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80228d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228dc:	bf1c      	itt	ne
 80228de:	f1c4 0401 	rsbne	r4, r4, #1
 80228e2:	6034      	strne	r4, [r6, #0]
 80228e4:	6833      	ldr	r3, [r6, #0]
 80228e6:	441a      	add	r2, r3
 80228e8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80228ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80228f0:	bf08      	it	eq
 80228f2:	9203      	streq	r2, [sp, #12]
 80228f4:	2130      	movs	r1, #48	; 0x30
 80228f6:	9b03      	ldr	r3, [sp, #12]
 80228f8:	4293      	cmp	r3, r2
 80228fa:	d2dc      	bcs.n	80228b6 <__cvt+0x56>
 80228fc:	1c5c      	adds	r4, r3, #1
 80228fe:	9403      	str	r4, [sp, #12]
 8022900:	7019      	strb	r1, [r3, #0]
 8022902:	e7f8      	b.n	80228f6 <__cvt+0x96>

08022904 <__exponent>:
 8022904:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022906:	4603      	mov	r3, r0
 8022908:	2900      	cmp	r1, #0
 802290a:	bfb8      	it	lt
 802290c:	4249      	neglt	r1, r1
 802290e:	f803 2b02 	strb.w	r2, [r3], #2
 8022912:	bfb4      	ite	lt
 8022914:	222d      	movlt	r2, #45	; 0x2d
 8022916:	222b      	movge	r2, #43	; 0x2b
 8022918:	2909      	cmp	r1, #9
 802291a:	7042      	strb	r2, [r0, #1]
 802291c:	dd2a      	ble.n	8022974 <__exponent+0x70>
 802291e:	f10d 0407 	add.w	r4, sp, #7
 8022922:	46a4      	mov	ip, r4
 8022924:	270a      	movs	r7, #10
 8022926:	46a6      	mov	lr, r4
 8022928:	460a      	mov	r2, r1
 802292a:	fb91 f6f7 	sdiv	r6, r1, r7
 802292e:	fb07 1516 	mls	r5, r7, r6, r1
 8022932:	3530      	adds	r5, #48	; 0x30
 8022934:	2a63      	cmp	r2, #99	; 0x63
 8022936:	f104 34ff 	add.w	r4, r4, #4294967295
 802293a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 802293e:	4631      	mov	r1, r6
 8022940:	dcf1      	bgt.n	8022926 <__exponent+0x22>
 8022942:	3130      	adds	r1, #48	; 0x30
 8022944:	f1ae 0502 	sub.w	r5, lr, #2
 8022948:	f804 1c01 	strb.w	r1, [r4, #-1]
 802294c:	1c44      	adds	r4, r0, #1
 802294e:	4629      	mov	r1, r5
 8022950:	4561      	cmp	r1, ip
 8022952:	d30a      	bcc.n	802296a <__exponent+0x66>
 8022954:	f10d 0209 	add.w	r2, sp, #9
 8022958:	eba2 020e 	sub.w	r2, r2, lr
 802295c:	4565      	cmp	r5, ip
 802295e:	bf88      	it	hi
 8022960:	2200      	movhi	r2, #0
 8022962:	4413      	add	r3, r2
 8022964:	1a18      	subs	r0, r3, r0
 8022966:	b003      	add	sp, #12
 8022968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802296a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802296e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8022972:	e7ed      	b.n	8022950 <__exponent+0x4c>
 8022974:	2330      	movs	r3, #48	; 0x30
 8022976:	3130      	adds	r1, #48	; 0x30
 8022978:	7083      	strb	r3, [r0, #2]
 802297a:	70c1      	strb	r1, [r0, #3]
 802297c:	1d03      	adds	r3, r0, #4
 802297e:	e7f1      	b.n	8022964 <__exponent+0x60>

08022980 <_printf_float>:
 8022980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022984:	b08b      	sub	sp, #44	; 0x2c
 8022986:	460c      	mov	r4, r1
 8022988:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 802298c:	4616      	mov	r6, r2
 802298e:	461f      	mov	r7, r3
 8022990:	4605      	mov	r5, r0
 8022992:	f003 f8d9 	bl	8025b48 <_localeconv_r>
 8022996:	f8d0 b000 	ldr.w	fp, [r0]
 802299a:	4658      	mov	r0, fp
 802299c:	f7dd fc5a 	bl	8000254 <strlen>
 80229a0:	2300      	movs	r3, #0
 80229a2:	9308      	str	r3, [sp, #32]
 80229a4:	f8d8 3000 	ldr.w	r3, [r8]
 80229a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80229ac:	6822      	ldr	r2, [r4, #0]
 80229ae:	3307      	adds	r3, #7
 80229b0:	f023 0307 	bic.w	r3, r3, #7
 80229b4:	f103 0108 	add.w	r1, r3, #8
 80229b8:	f8c8 1000 	str.w	r1, [r8]
 80229bc:	4682      	mov	sl, r0
 80229be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80229c2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80229c6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8022c28 <_printf_float+0x2a8>
 80229ca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80229ce:	eeb0 6bc0 	vabs.f64	d6, d0
 80229d2:	eeb4 6b47 	vcmp.f64	d6, d7
 80229d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229da:	dd24      	ble.n	8022a26 <_printf_float+0xa6>
 80229dc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80229e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80229e4:	d502      	bpl.n	80229ec <_printf_float+0x6c>
 80229e6:	232d      	movs	r3, #45	; 0x2d
 80229e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80229ec:	4b90      	ldr	r3, [pc, #576]	; (8022c30 <_printf_float+0x2b0>)
 80229ee:	4891      	ldr	r0, [pc, #580]	; (8022c34 <_printf_float+0x2b4>)
 80229f0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80229f4:	bf94      	ite	ls
 80229f6:	4698      	movls	r8, r3
 80229f8:	4680      	movhi	r8, r0
 80229fa:	2303      	movs	r3, #3
 80229fc:	6123      	str	r3, [r4, #16]
 80229fe:	f022 0204 	bic.w	r2, r2, #4
 8022a02:	2300      	movs	r3, #0
 8022a04:	6022      	str	r2, [r4, #0]
 8022a06:	9304      	str	r3, [sp, #16]
 8022a08:	9700      	str	r7, [sp, #0]
 8022a0a:	4633      	mov	r3, r6
 8022a0c:	aa09      	add	r2, sp, #36	; 0x24
 8022a0e:	4621      	mov	r1, r4
 8022a10:	4628      	mov	r0, r5
 8022a12:	f000 f9d3 	bl	8022dbc <_printf_common>
 8022a16:	3001      	adds	r0, #1
 8022a18:	f040 808a 	bne.w	8022b30 <_printf_float+0x1b0>
 8022a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022a20:	b00b      	add	sp, #44	; 0x2c
 8022a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022a26:	eeb4 0b40 	vcmp.f64	d0, d0
 8022a2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022a2e:	d709      	bvc.n	8022a44 <_printf_float+0xc4>
 8022a30:	ee10 3a90 	vmov	r3, s1
 8022a34:	2b00      	cmp	r3, #0
 8022a36:	bfbc      	itt	lt
 8022a38:	232d      	movlt	r3, #45	; 0x2d
 8022a3a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8022a3e:	487e      	ldr	r0, [pc, #504]	; (8022c38 <_printf_float+0x2b8>)
 8022a40:	4b7e      	ldr	r3, [pc, #504]	; (8022c3c <_printf_float+0x2bc>)
 8022a42:	e7d5      	b.n	80229f0 <_printf_float+0x70>
 8022a44:	6863      	ldr	r3, [r4, #4]
 8022a46:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8022a4a:	9104      	str	r1, [sp, #16]
 8022a4c:	1c59      	adds	r1, r3, #1
 8022a4e:	d13c      	bne.n	8022aca <_printf_float+0x14a>
 8022a50:	2306      	movs	r3, #6
 8022a52:	6063      	str	r3, [r4, #4]
 8022a54:	2300      	movs	r3, #0
 8022a56:	9303      	str	r3, [sp, #12]
 8022a58:	ab08      	add	r3, sp, #32
 8022a5a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8022a5e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8022a62:	ab07      	add	r3, sp, #28
 8022a64:	6861      	ldr	r1, [r4, #4]
 8022a66:	9300      	str	r3, [sp, #0]
 8022a68:	6022      	str	r2, [r4, #0]
 8022a6a:	f10d 031b 	add.w	r3, sp, #27
 8022a6e:	4628      	mov	r0, r5
 8022a70:	f7ff fef6 	bl	8022860 <__cvt>
 8022a74:	9b04      	ldr	r3, [sp, #16]
 8022a76:	9907      	ldr	r1, [sp, #28]
 8022a78:	2b47      	cmp	r3, #71	; 0x47
 8022a7a:	4680      	mov	r8, r0
 8022a7c:	d108      	bne.n	8022a90 <_printf_float+0x110>
 8022a7e:	1cc8      	adds	r0, r1, #3
 8022a80:	db02      	blt.n	8022a88 <_printf_float+0x108>
 8022a82:	6863      	ldr	r3, [r4, #4]
 8022a84:	4299      	cmp	r1, r3
 8022a86:	dd41      	ble.n	8022b0c <_printf_float+0x18c>
 8022a88:	f1a9 0902 	sub.w	r9, r9, #2
 8022a8c:	fa5f f989 	uxtb.w	r9, r9
 8022a90:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022a94:	d820      	bhi.n	8022ad8 <_printf_float+0x158>
 8022a96:	3901      	subs	r1, #1
 8022a98:	464a      	mov	r2, r9
 8022a9a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8022a9e:	9107      	str	r1, [sp, #28]
 8022aa0:	f7ff ff30 	bl	8022904 <__exponent>
 8022aa4:	9a08      	ldr	r2, [sp, #32]
 8022aa6:	9004      	str	r0, [sp, #16]
 8022aa8:	1813      	adds	r3, r2, r0
 8022aaa:	2a01      	cmp	r2, #1
 8022aac:	6123      	str	r3, [r4, #16]
 8022aae:	dc02      	bgt.n	8022ab6 <_printf_float+0x136>
 8022ab0:	6822      	ldr	r2, [r4, #0]
 8022ab2:	07d2      	lsls	r2, r2, #31
 8022ab4:	d501      	bpl.n	8022aba <_printf_float+0x13a>
 8022ab6:	3301      	adds	r3, #1
 8022ab8:	6123      	str	r3, [r4, #16]
 8022aba:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8022abe:	2b00      	cmp	r3, #0
 8022ac0:	d0a2      	beq.n	8022a08 <_printf_float+0x88>
 8022ac2:	232d      	movs	r3, #45	; 0x2d
 8022ac4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ac8:	e79e      	b.n	8022a08 <_printf_float+0x88>
 8022aca:	9904      	ldr	r1, [sp, #16]
 8022acc:	2947      	cmp	r1, #71	; 0x47
 8022ace:	d1c1      	bne.n	8022a54 <_printf_float+0xd4>
 8022ad0:	2b00      	cmp	r3, #0
 8022ad2:	d1bf      	bne.n	8022a54 <_printf_float+0xd4>
 8022ad4:	2301      	movs	r3, #1
 8022ad6:	e7bc      	b.n	8022a52 <_printf_float+0xd2>
 8022ad8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8022adc:	d118      	bne.n	8022b10 <_printf_float+0x190>
 8022ade:	2900      	cmp	r1, #0
 8022ae0:	6863      	ldr	r3, [r4, #4]
 8022ae2:	dd0b      	ble.n	8022afc <_printf_float+0x17c>
 8022ae4:	6121      	str	r1, [r4, #16]
 8022ae6:	b913      	cbnz	r3, 8022aee <_printf_float+0x16e>
 8022ae8:	6822      	ldr	r2, [r4, #0]
 8022aea:	07d0      	lsls	r0, r2, #31
 8022aec:	d502      	bpl.n	8022af4 <_printf_float+0x174>
 8022aee:	3301      	adds	r3, #1
 8022af0:	440b      	add	r3, r1
 8022af2:	6123      	str	r3, [r4, #16]
 8022af4:	2300      	movs	r3, #0
 8022af6:	65a1      	str	r1, [r4, #88]	; 0x58
 8022af8:	9304      	str	r3, [sp, #16]
 8022afa:	e7de      	b.n	8022aba <_printf_float+0x13a>
 8022afc:	b913      	cbnz	r3, 8022b04 <_printf_float+0x184>
 8022afe:	6822      	ldr	r2, [r4, #0]
 8022b00:	07d2      	lsls	r2, r2, #31
 8022b02:	d501      	bpl.n	8022b08 <_printf_float+0x188>
 8022b04:	3302      	adds	r3, #2
 8022b06:	e7f4      	b.n	8022af2 <_printf_float+0x172>
 8022b08:	2301      	movs	r3, #1
 8022b0a:	e7f2      	b.n	8022af2 <_printf_float+0x172>
 8022b0c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8022b10:	9b08      	ldr	r3, [sp, #32]
 8022b12:	4299      	cmp	r1, r3
 8022b14:	db05      	blt.n	8022b22 <_printf_float+0x1a2>
 8022b16:	6823      	ldr	r3, [r4, #0]
 8022b18:	6121      	str	r1, [r4, #16]
 8022b1a:	07d8      	lsls	r0, r3, #31
 8022b1c:	d5ea      	bpl.n	8022af4 <_printf_float+0x174>
 8022b1e:	1c4b      	adds	r3, r1, #1
 8022b20:	e7e7      	b.n	8022af2 <_printf_float+0x172>
 8022b22:	2900      	cmp	r1, #0
 8022b24:	bfd4      	ite	le
 8022b26:	f1c1 0202 	rsble	r2, r1, #2
 8022b2a:	2201      	movgt	r2, #1
 8022b2c:	4413      	add	r3, r2
 8022b2e:	e7e0      	b.n	8022af2 <_printf_float+0x172>
 8022b30:	6823      	ldr	r3, [r4, #0]
 8022b32:	055a      	lsls	r2, r3, #21
 8022b34:	d407      	bmi.n	8022b46 <_printf_float+0x1c6>
 8022b36:	6923      	ldr	r3, [r4, #16]
 8022b38:	4642      	mov	r2, r8
 8022b3a:	4631      	mov	r1, r6
 8022b3c:	4628      	mov	r0, r5
 8022b3e:	47b8      	blx	r7
 8022b40:	3001      	adds	r0, #1
 8022b42:	d12a      	bne.n	8022b9a <_printf_float+0x21a>
 8022b44:	e76a      	b.n	8022a1c <_printf_float+0x9c>
 8022b46:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8022b4a:	f240 80e2 	bls.w	8022d12 <_printf_float+0x392>
 8022b4e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022b52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022b5a:	d133      	bne.n	8022bc4 <_printf_float+0x244>
 8022b5c:	4a38      	ldr	r2, [pc, #224]	; (8022c40 <_printf_float+0x2c0>)
 8022b5e:	2301      	movs	r3, #1
 8022b60:	4631      	mov	r1, r6
 8022b62:	4628      	mov	r0, r5
 8022b64:	47b8      	blx	r7
 8022b66:	3001      	adds	r0, #1
 8022b68:	f43f af58 	beq.w	8022a1c <_printf_float+0x9c>
 8022b6c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022b70:	429a      	cmp	r2, r3
 8022b72:	db02      	blt.n	8022b7a <_printf_float+0x1fa>
 8022b74:	6823      	ldr	r3, [r4, #0]
 8022b76:	07d8      	lsls	r0, r3, #31
 8022b78:	d50f      	bpl.n	8022b9a <_printf_float+0x21a>
 8022b7a:	4653      	mov	r3, sl
 8022b7c:	465a      	mov	r2, fp
 8022b7e:	4631      	mov	r1, r6
 8022b80:	4628      	mov	r0, r5
 8022b82:	47b8      	blx	r7
 8022b84:	3001      	adds	r0, #1
 8022b86:	f43f af49 	beq.w	8022a1c <_printf_float+0x9c>
 8022b8a:	f04f 0800 	mov.w	r8, #0
 8022b8e:	f104 091a 	add.w	r9, r4, #26
 8022b92:	9b08      	ldr	r3, [sp, #32]
 8022b94:	3b01      	subs	r3, #1
 8022b96:	4543      	cmp	r3, r8
 8022b98:	dc09      	bgt.n	8022bae <_printf_float+0x22e>
 8022b9a:	6823      	ldr	r3, [r4, #0]
 8022b9c:	079b      	lsls	r3, r3, #30
 8022b9e:	f100 8108 	bmi.w	8022db2 <_printf_float+0x432>
 8022ba2:	68e0      	ldr	r0, [r4, #12]
 8022ba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ba6:	4298      	cmp	r0, r3
 8022ba8:	bfb8      	it	lt
 8022baa:	4618      	movlt	r0, r3
 8022bac:	e738      	b.n	8022a20 <_printf_float+0xa0>
 8022bae:	2301      	movs	r3, #1
 8022bb0:	464a      	mov	r2, r9
 8022bb2:	4631      	mov	r1, r6
 8022bb4:	4628      	mov	r0, r5
 8022bb6:	47b8      	blx	r7
 8022bb8:	3001      	adds	r0, #1
 8022bba:	f43f af2f 	beq.w	8022a1c <_printf_float+0x9c>
 8022bbe:	f108 0801 	add.w	r8, r8, #1
 8022bc2:	e7e6      	b.n	8022b92 <_printf_float+0x212>
 8022bc4:	9b07      	ldr	r3, [sp, #28]
 8022bc6:	2b00      	cmp	r3, #0
 8022bc8:	dc3c      	bgt.n	8022c44 <_printf_float+0x2c4>
 8022bca:	4a1d      	ldr	r2, [pc, #116]	; (8022c40 <_printf_float+0x2c0>)
 8022bcc:	2301      	movs	r3, #1
 8022bce:	4631      	mov	r1, r6
 8022bd0:	4628      	mov	r0, r5
 8022bd2:	47b8      	blx	r7
 8022bd4:	3001      	adds	r0, #1
 8022bd6:	f43f af21 	beq.w	8022a1c <_printf_float+0x9c>
 8022bda:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022bde:	4313      	orrs	r3, r2
 8022be0:	d102      	bne.n	8022be8 <_printf_float+0x268>
 8022be2:	6823      	ldr	r3, [r4, #0]
 8022be4:	07d9      	lsls	r1, r3, #31
 8022be6:	d5d8      	bpl.n	8022b9a <_printf_float+0x21a>
 8022be8:	4653      	mov	r3, sl
 8022bea:	465a      	mov	r2, fp
 8022bec:	4631      	mov	r1, r6
 8022bee:	4628      	mov	r0, r5
 8022bf0:	47b8      	blx	r7
 8022bf2:	3001      	adds	r0, #1
 8022bf4:	f43f af12 	beq.w	8022a1c <_printf_float+0x9c>
 8022bf8:	f04f 0900 	mov.w	r9, #0
 8022bfc:	f104 0a1a 	add.w	sl, r4, #26
 8022c00:	9b07      	ldr	r3, [sp, #28]
 8022c02:	425b      	negs	r3, r3
 8022c04:	454b      	cmp	r3, r9
 8022c06:	dc01      	bgt.n	8022c0c <_printf_float+0x28c>
 8022c08:	9b08      	ldr	r3, [sp, #32]
 8022c0a:	e795      	b.n	8022b38 <_printf_float+0x1b8>
 8022c0c:	2301      	movs	r3, #1
 8022c0e:	4652      	mov	r2, sl
 8022c10:	4631      	mov	r1, r6
 8022c12:	4628      	mov	r0, r5
 8022c14:	47b8      	blx	r7
 8022c16:	3001      	adds	r0, #1
 8022c18:	f43f af00 	beq.w	8022a1c <_printf_float+0x9c>
 8022c1c:	f109 0901 	add.w	r9, r9, #1
 8022c20:	e7ee      	b.n	8022c00 <_printf_float+0x280>
 8022c22:	bf00      	nop
 8022c24:	f3af 8000 	nop.w
 8022c28:	ffffffff 	.word	0xffffffff
 8022c2c:	7fefffff 	.word	0x7fefffff
 8022c30:	08042d24 	.word	0x08042d24
 8022c34:	08042d28 	.word	0x08042d28
 8022c38:	08042d30 	.word	0x08042d30
 8022c3c:	08042d2c 	.word	0x08042d2c
 8022c40:	080433c9 	.word	0x080433c9
 8022c44:	9a08      	ldr	r2, [sp, #32]
 8022c46:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022c48:	429a      	cmp	r2, r3
 8022c4a:	bfa8      	it	ge
 8022c4c:	461a      	movge	r2, r3
 8022c4e:	2a00      	cmp	r2, #0
 8022c50:	4691      	mov	r9, r2
 8022c52:	dc38      	bgt.n	8022cc6 <_printf_float+0x346>
 8022c54:	2300      	movs	r3, #0
 8022c56:	9305      	str	r3, [sp, #20]
 8022c58:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022c5c:	f104 021a 	add.w	r2, r4, #26
 8022c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8022c62:	9905      	ldr	r1, [sp, #20]
 8022c64:	9304      	str	r3, [sp, #16]
 8022c66:	eba3 0309 	sub.w	r3, r3, r9
 8022c6a:	428b      	cmp	r3, r1
 8022c6c:	dc33      	bgt.n	8022cd6 <_printf_float+0x356>
 8022c6e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022c72:	429a      	cmp	r2, r3
 8022c74:	db3c      	blt.n	8022cf0 <_printf_float+0x370>
 8022c76:	6823      	ldr	r3, [r4, #0]
 8022c78:	07da      	lsls	r2, r3, #31
 8022c7a:	d439      	bmi.n	8022cf0 <_printf_float+0x370>
 8022c7c:	9a08      	ldr	r2, [sp, #32]
 8022c7e:	9b04      	ldr	r3, [sp, #16]
 8022c80:	9907      	ldr	r1, [sp, #28]
 8022c82:	1ad3      	subs	r3, r2, r3
 8022c84:	eba2 0901 	sub.w	r9, r2, r1
 8022c88:	4599      	cmp	r9, r3
 8022c8a:	bfa8      	it	ge
 8022c8c:	4699      	movge	r9, r3
 8022c8e:	f1b9 0f00 	cmp.w	r9, #0
 8022c92:	dc35      	bgt.n	8022d00 <_printf_float+0x380>
 8022c94:	f04f 0800 	mov.w	r8, #0
 8022c98:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8022c9c:	f104 0a1a 	add.w	sl, r4, #26
 8022ca0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8022ca4:	1a9b      	subs	r3, r3, r2
 8022ca6:	eba3 0309 	sub.w	r3, r3, r9
 8022caa:	4543      	cmp	r3, r8
 8022cac:	f77f af75 	ble.w	8022b9a <_printf_float+0x21a>
 8022cb0:	2301      	movs	r3, #1
 8022cb2:	4652      	mov	r2, sl
 8022cb4:	4631      	mov	r1, r6
 8022cb6:	4628      	mov	r0, r5
 8022cb8:	47b8      	blx	r7
 8022cba:	3001      	adds	r0, #1
 8022cbc:	f43f aeae 	beq.w	8022a1c <_printf_float+0x9c>
 8022cc0:	f108 0801 	add.w	r8, r8, #1
 8022cc4:	e7ec      	b.n	8022ca0 <_printf_float+0x320>
 8022cc6:	4613      	mov	r3, r2
 8022cc8:	4631      	mov	r1, r6
 8022cca:	4642      	mov	r2, r8
 8022ccc:	4628      	mov	r0, r5
 8022cce:	47b8      	blx	r7
 8022cd0:	3001      	adds	r0, #1
 8022cd2:	d1bf      	bne.n	8022c54 <_printf_float+0x2d4>
 8022cd4:	e6a2      	b.n	8022a1c <_printf_float+0x9c>
 8022cd6:	2301      	movs	r3, #1
 8022cd8:	4631      	mov	r1, r6
 8022cda:	4628      	mov	r0, r5
 8022cdc:	9204      	str	r2, [sp, #16]
 8022cde:	47b8      	blx	r7
 8022ce0:	3001      	adds	r0, #1
 8022ce2:	f43f ae9b 	beq.w	8022a1c <_printf_float+0x9c>
 8022ce6:	9b05      	ldr	r3, [sp, #20]
 8022ce8:	9a04      	ldr	r2, [sp, #16]
 8022cea:	3301      	adds	r3, #1
 8022cec:	9305      	str	r3, [sp, #20]
 8022cee:	e7b7      	b.n	8022c60 <_printf_float+0x2e0>
 8022cf0:	4653      	mov	r3, sl
 8022cf2:	465a      	mov	r2, fp
 8022cf4:	4631      	mov	r1, r6
 8022cf6:	4628      	mov	r0, r5
 8022cf8:	47b8      	blx	r7
 8022cfa:	3001      	adds	r0, #1
 8022cfc:	d1be      	bne.n	8022c7c <_printf_float+0x2fc>
 8022cfe:	e68d      	b.n	8022a1c <_printf_float+0x9c>
 8022d00:	9a04      	ldr	r2, [sp, #16]
 8022d02:	464b      	mov	r3, r9
 8022d04:	4442      	add	r2, r8
 8022d06:	4631      	mov	r1, r6
 8022d08:	4628      	mov	r0, r5
 8022d0a:	47b8      	blx	r7
 8022d0c:	3001      	adds	r0, #1
 8022d0e:	d1c1      	bne.n	8022c94 <_printf_float+0x314>
 8022d10:	e684      	b.n	8022a1c <_printf_float+0x9c>
 8022d12:	9a08      	ldr	r2, [sp, #32]
 8022d14:	2a01      	cmp	r2, #1
 8022d16:	dc01      	bgt.n	8022d1c <_printf_float+0x39c>
 8022d18:	07db      	lsls	r3, r3, #31
 8022d1a:	d537      	bpl.n	8022d8c <_printf_float+0x40c>
 8022d1c:	2301      	movs	r3, #1
 8022d1e:	4642      	mov	r2, r8
 8022d20:	4631      	mov	r1, r6
 8022d22:	4628      	mov	r0, r5
 8022d24:	47b8      	blx	r7
 8022d26:	3001      	adds	r0, #1
 8022d28:	f43f ae78 	beq.w	8022a1c <_printf_float+0x9c>
 8022d2c:	4653      	mov	r3, sl
 8022d2e:	465a      	mov	r2, fp
 8022d30:	4631      	mov	r1, r6
 8022d32:	4628      	mov	r0, r5
 8022d34:	47b8      	blx	r7
 8022d36:	3001      	adds	r0, #1
 8022d38:	f43f ae70 	beq.w	8022a1c <_printf_float+0x9c>
 8022d3c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8022d40:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8022d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8022d48:	d01b      	beq.n	8022d82 <_printf_float+0x402>
 8022d4a:	9b08      	ldr	r3, [sp, #32]
 8022d4c:	f108 0201 	add.w	r2, r8, #1
 8022d50:	3b01      	subs	r3, #1
 8022d52:	4631      	mov	r1, r6
 8022d54:	4628      	mov	r0, r5
 8022d56:	47b8      	blx	r7
 8022d58:	3001      	adds	r0, #1
 8022d5a:	d10e      	bne.n	8022d7a <_printf_float+0x3fa>
 8022d5c:	e65e      	b.n	8022a1c <_printf_float+0x9c>
 8022d5e:	2301      	movs	r3, #1
 8022d60:	464a      	mov	r2, r9
 8022d62:	4631      	mov	r1, r6
 8022d64:	4628      	mov	r0, r5
 8022d66:	47b8      	blx	r7
 8022d68:	3001      	adds	r0, #1
 8022d6a:	f43f ae57 	beq.w	8022a1c <_printf_float+0x9c>
 8022d6e:	f108 0801 	add.w	r8, r8, #1
 8022d72:	9b08      	ldr	r3, [sp, #32]
 8022d74:	3b01      	subs	r3, #1
 8022d76:	4543      	cmp	r3, r8
 8022d78:	dcf1      	bgt.n	8022d5e <_printf_float+0x3de>
 8022d7a:	9b04      	ldr	r3, [sp, #16]
 8022d7c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8022d80:	e6db      	b.n	8022b3a <_printf_float+0x1ba>
 8022d82:	f04f 0800 	mov.w	r8, #0
 8022d86:	f104 091a 	add.w	r9, r4, #26
 8022d8a:	e7f2      	b.n	8022d72 <_printf_float+0x3f2>
 8022d8c:	2301      	movs	r3, #1
 8022d8e:	4642      	mov	r2, r8
 8022d90:	e7df      	b.n	8022d52 <_printf_float+0x3d2>
 8022d92:	2301      	movs	r3, #1
 8022d94:	464a      	mov	r2, r9
 8022d96:	4631      	mov	r1, r6
 8022d98:	4628      	mov	r0, r5
 8022d9a:	47b8      	blx	r7
 8022d9c:	3001      	adds	r0, #1
 8022d9e:	f43f ae3d 	beq.w	8022a1c <_printf_float+0x9c>
 8022da2:	f108 0801 	add.w	r8, r8, #1
 8022da6:	68e3      	ldr	r3, [r4, #12]
 8022da8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8022daa:	1a5b      	subs	r3, r3, r1
 8022dac:	4543      	cmp	r3, r8
 8022dae:	dcf0      	bgt.n	8022d92 <_printf_float+0x412>
 8022db0:	e6f7      	b.n	8022ba2 <_printf_float+0x222>
 8022db2:	f04f 0800 	mov.w	r8, #0
 8022db6:	f104 0919 	add.w	r9, r4, #25
 8022dba:	e7f4      	b.n	8022da6 <_printf_float+0x426>

08022dbc <_printf_common>:
 8022dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022dc0:	4616      	mov	r6, r2
 8022dc2:	4699      	mov	r9, r3
 8022dc4:	688a      	ldr	r2, [r1, #8]
 8022dc6:	690b      	ldr	r3, [r1, #16]
 8022dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022dcc:	4293      	cmp	r3, r2
 8022dce:	bfb8      	it	lt
 8022dd0:	4613      	movlt	r3, r2
 8022dd2:	6033      	str	r3, [r6, #0]
 8022dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022dd8:	4607      	mov	r7, r0
 8022dda:	460c      	mov	r4, r1
 8022ddc:	b10a      	cbz	r2, 8022de2 <_printf_common+0x26>
 8022dde:	3301      	adds	r3, #1
 8022de0:	6033      	str	r3, [r6, #0]
 8022de2:	6823      	ldr	r3, [r4, #0]
 8022de4:	0699      	lsls	r1, r3, #26
 8022de6:	bf42      	ittt	mi
 8022de8:	6833      	ldrmi	r3, [r6, #0]
 8022dea:	3302      	addmi	r3, #2
 8022dec:	6033      	strmi	r3, [r6, #0]
 8022dee:	6825      	ldr	r5, [r4, #0]
 8022df0:	f015 0506 	ands.w	r5, r5, #6
 8022df4:	d106      	bne.n	8022e04 <_printf_common+0x48>
 8022df6:	f104 0a19 	add.w	sl, r4, #25
 8022dfa:	68e3      	ldr	r3, [r4, #12]
 8022dfc:	6832      	ldr	r2, [r6, #0]
 8022dfe:	1a9b      	subs	r3, r3, r2
 8022e00:	42ab      	cmp	r3, r5
 8022e02:	dc26      	bgt.n	8022e52 <_printf_common+0x96>
 8022e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022e08:	1e13      	subs	r3, r2, #0
 8022e0a:	6822      	ldr	r2, [r4, #0]
 8022e0c:	bf18      	it	ne
 8022e0e:	2301      	movne	r3, #1
 8022e10:	0692      	lsls	r2, r2, #26
 8022e12:	d42b      	bmi.n	8022e6c <_printf_common+0xb0>
 8022e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022e18:	4649      	mov	r1, r9
 8022e1a:	4638      	mov	r0, r7
 8022e1c:	47c0      	blx	r8
 8022e1e:	3001      	adds	r0, #1
 8022e20:	d01e      	beq.n	8022e60 <_printf_common+0xa4>
 8022e22:	6823      	ldr	r3, [r4, #0]
 8022e24:	68e5      	ldr	r5, [r4, #12]
 8022e26:	6832      	ldr	r2, [r6, #0]
 8022e28:	f003 0306 	and.w	r3, r3, #6
 8022e2c:	2b04      	cmp	r3, #4
 8022e2e:	bf08      	it	eq
 8022e30:	1aad      	subeq	r5, r5, r2
 8022e32:	68a3      	ldr	r3, [r4, #8]
 8022e34:	6922      	ldr	r2, [r4, #16]
 8022e36:	bf0c      	ite	eq
 8022e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022e3c:	2500      	movne	r5, #0
 8022e3e:	4293      	cmp	r3, r2
 8022e40:	bfc4      	itt	gt
 8022e42:	1a9b      	subgt	r3, r3, r2
 8022e44:	18ed      	addgt	r5, r5, r3
 8022e46:	2600      	movs	r6, #0
 8022e48:	341a      	adds	r4, #26
 8022e4a:	42b5      	cmp	r5, r6
 8022e4c:	d11a      	bne.n	8022e84 <_printf_common+0xc8>
 8022e4e:	2000      	movs	r0, #0
 8022e50:	e008      	b.n	8022e64 <_printf_common+0xa8>
 8022e52:	2301      	movs	r3, #1
 8022e54:	4652      	mov	r2, sl
 8022e56:	4649      	mov	r1, r9
 8022e58:	4638      	mov	r0, r7
 8022e5a:	47c0      	blx	r8
 8022e5c:	3001      	adds	r0, #1
 8022e5e:	d103      	bne.n	8022e68 <_printf_common+0xac>
 8022e60:	f04f 30ff 	mov.w	r0, #4294967295
 8022e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e68:	3501      	adds	r5, #1
 8022e6a:	e7c6      	b.n	8022dfa <_printf_common+0x3e>
 8022e6c:	18e1      	adds	r1, r4, r3
 8022e6e:	1c5a      	adds	r2, r3, #1
 8022e70:	2030      	movs	r0, #48	; 0x30
 8022e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022e76:	4422      	add	r2, r4
 8022e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022e80:	3302      	adds	r3, #2
 8022e82:	e7c7      	b.n	8022e14 <_printf_common+0x58>
 8022e84:	2301      	movs	r3, #1
 8022e86:	4622      	mov	r2, r4
 8022e88:	4649      	mov	r1, r9
 8022e8a:	4638      	mov	r0, r7
 8022e8c:	47c0      	blx	r8
 8022e8e:	3001      	adds	r0, #1
 8022e90:	d0e6      	beq.n	8022e60 <_printf_common+0xa4>
 8022e92:	3601      	adds	r6, #1
 8022e94:	e7d9      	b.n	8022e4a <_printf_common+0x8e>
	...

08022e98 <_printf_i>:
 8022e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022e9c:	460c      	mov	r4, r1
 8022e9e:	4691      	mov	r9, r2
 8022ea0:	7e27      	ldrb	r7, [r4, #24]
 8022ea2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022ea4:	2f78      	cmp	r7, #120	; 0x78
 8022ea6:	4680      	mov	r8, r0
 8022ea8:	469a      	mov	sl, r3
 8022eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022eae:	d807      	bhi.n	8022ec0 <_printf_i+0x28>
 8022eb0:	2f62      	cmp	r7, #98	; 0x62
 8022eb2:	d80a      	bhi.n	8022eca <_printf_i+0x32>
 8022eb4:	2f00      	cmp	r7, #0
 8022eb6:	f000 80d8 	beq.w	802306a <_printf_i+0x1d2>
 8022eba:	2f58      	cmp	r7, #88	; 0x58
 8022ebc:	f000 80a3 	beq.w	8023006 <_printf_i+0x16e>
 8022ec0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022ec8:	e03a      	b.n	8022f40 <_printf_i+0xa8>
 8022eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022ece:	2b15      	cmp	r3, #21
 8022ed0:	d8f6      	bhi.n	8022ec0 <_printf_i+0x28>
 8022ed2:	a001      	add	r0, pc, #4	; (adr r0, 8022ed8 <_printf_i+0x40>)
 8022ed4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022ed8:	08022f31 	.word	0x08022f31
 8022edc:	08022f45 	.word	0x08022f45
 8022ee0:	08022ec1 	.word	0x08022ec1
 8022ee4:	08022ec1 	.word	0x08022ec1
 8022ee8:	08022ec1 	.word	0x08022ec1
 8022eec:	08022ec1 	.word	0x08022ec1
 8022ef0:	08022f45 	.word	0x08022f45
 8022ef4:	08022ec1 	.word	0x08022ec1
 8022ef8:	08022ec1 	.word	0x08022ec1
 8022efc:	08022ec1 	.word	0x08022ec1
 8022f00:	08022ec1 	.word	0x08022ec1
 8022f04:	08023051 	.word	0x08023051
 8022f08:	08022f75 	.word	0x08022f75
 8022f0c:	08023033 	.word	0x08023033
 8022f10:	08022ec1 	.word	0x08022ec1
 8022f14:	08022ec1 	.word	0x08022ec1
 8022f18:	08023073 	.word	0x08023073
 8022f1c:	08022ec1 	.word	0x08022ec1
 8022f20:	08022f75 	.word	0x08022f75
 8022f24:	08022ec1 	.word	0x08022ec1
 8022f28:	08022ec1 	.word	0x08022ec1
 8022f2c:	0802303b 	.word	0x0802303b
 8022f30:	680b      	ldr	r3, [r1, #0]
 8022f32:	1d1a      	adds	r2, r3, #4
 8022f34:	681b      	ldr	r3, [r3, #0]
 8022f36:	600a      	str	r2, [r1, #0]
 8022f38:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022f40:	2301      	movs	r3, #1
 8022f42:	e0a3      	b.n	802308c <_printf_i+0x1f4>
 8022f44:	6825      	ldr	r5, [r4, #0]
 8022f46:	6808      	ldr	r0, [r1, #0]
 8022f48:	062e      	lsls	r6, r5, #24
 8022f4a:	f100 0304 	add.w	r3, r0, #4
 8022f4e:	d50a      	bpl.n	8022f66 <_printf_i+0xce>
 8022f50:	6805      	ldr	r5, [r0, #0]
 8022f52:	600b      	str	r3, [r1, #0]
 8022f54:	2d00      	cmp	r5, #0
 8022f56:	da03      	bge.n	8022f60 <_printf_i+0xc8>
 8022f58:	232d      	movs	r3, #45	; 0x2d
 8022f5a:	426d      	negs	r5, r5
 8022f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022f60:	485e      	ldr	r0, [pc, #376]	; (80230dc <_printf_i+0x244>)
 8022f62:	230a      	movs	r3, #10
 8022f64:	e019      	b.n	8022f9a <_printf_i+0x102>
 8022f66:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022f6a:	6805      	ldr	r5, [r0, #0]
 8022f6c:	600b      	str	r3, [r1, #0]
 8022f6e:	bf18      	it	ne
 8022f70:	b22d      	sxthne	r5, r5
 8022f72:	e7ef      	b.n	8022f54 <_printf_i+0xbc>
 8022f74:	680b      	ldr	r3, [r1, #0]
 8022f76:	6825      	ldr	r5, [r4, #0]
 8022f78:	1d18      	adds	r0, r3, #4
 8022f7a:	6008      	str	r0, [r1, #0]
 8022f7c:	0628      	lsls	r0, r5, #24
 8022f7e:	d501      	bpl.n	8022f84 <_printf_i+0xec>
 8022f80:	681d      	ldr	r5, [r3, #0]
 8022f82:	e002      	b.n	8022f8a <_printf_i+0xf2>
 8022f84:	0669      	lsls	r1, r5, #25
 8022f86:	d5fb      	bpl.n	8022f80 <_printf_i+0xe8>
 8022f88:	881d      	ldrh	r5, [r3, #0]
 8022f8a:	4854      	ldr	r0, [pc, #336]	; (80230dc <_printf_i+0x244>)
 8022f8c:	2f6f      	cmp	r7, #111	; 0x6f
 8022f8e:	bf0c      	ite	eq
 8022f90:	2308      	moveq	r3, #8
 8022f92:	230a      	movne	r3, #10
 8022f94:	2100      	movs	r1, #0
 8022f96:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022f9a:	6866      	ldr	r6, [r4, #4]
 8022f9c:	60a6      	str	r6, [r4, #8]
 8022f9e:	2e00      	cmp	r6, #0
 8022fa0:	bfa2      	ittt	ge
 8022fa2:	6821      	ldrge	r1, [r4, #0]
 8022fa4:	f021 0104 	bicge.w	r1, r1, #4
 8022fa8:	6021      	strge	r1, [r4, #0]
 8022faa:	b90d      	cbnz	r5, 8022fb0 <_printf_i+0x118>
 8022fac:	2e00      	cmp	r6, #0
 8022fae:	d04d      	beq.n	802304c <_printf_i+0x1b4>
 8022fb0:	4616      	mov	r6, r2
 8022fb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022fb6:	fb03 5711 	mls	r7, r3, r1, r5
 8022fba:	5dc7      	ldrb	r7, [r0, r7]
 8022fbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022fc0:	462f      	mov	r7, r5
 8022fc2:	42bb      	cmp	r3, r7
 8022fc4:	460d      	mov	r5, r1
 8022fc6:	d9f4      	bls.n	8022fb2 <_printf_i+0x11a>
 8022fc8:	2b08      	cmp	r3, #8
 8022fca:	d10b      	bne.n	8022fe4 <_printf_i+0x14c>
 8022fcc:	6823      	ldr	r3, [r4, #0]
 8022fce:	07df      	lsls	r7, r3, #31
 8022fd0:	d508      	bpl.n	8022fe4 <_printf_i+0x14c>
 8022fd2:	6923      	ldr	r3, [r4, #16]
 8022fd4:	6861      	ldr	r1, [r4, #4]
 8022fd6:	4299      	cmp	r1, r3
 8022fd8:	bfde      	ittt	le
 8022fda:	2330      	movle	r3, #48	; 0x30
 8022fdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022fe0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022fe4:	1b92      	subs	r2, r2, r6
 8022fe6:	6122      	str	r2, [r4, #16]
 8022fe8:	f8cd a000 	str.w	sl, [sp]
 8022fec:	464b      	mov	r3, r9
 8022fee:	aa03      	add	r2, sp, #12
 8022ff0:	4621      	mov	r1, r4
 8022ff2:	4640      	mov	r0, r8
 8022ff4:	f7ff fee2 	bl	8022dbc <_printf_common>
 8022ff8:	3001      	adds	r0, #1
 8022ffa:	d14c      	bne.n	8023096 <_printf_i+0x1fe>
 8022ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8023000:	b004      	add	sp, #16
 8023002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023006:	4835      	ldr	r0, [pc, #212]	; (80230dc <_printf_i+0x244>)
 8023008:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 802300c:	6823      	ldr	r3, [r4, #0]
 802300e:	680e      	ldr	r6, [r1, #0]
 8023010:	061f      	lsls	r7, r3, #24
 8023012:	f856 5b04 	ldr.w	r5, [r6], #4
 8023016:	600e      	str	r6, [r1, #0]
 8023018:	d514      	bpl.n	8023044 <_printf_i+0x1ac>
 802301a:	07d9      	lsls	r1, r3, #31
 802301c:	bf44      	itt	mi
 802301e:	f043 0320 	orrmi.w	r3, r3, #32
 8023022:	6023      	strmi	r3, [r4, #0]
 8023024:	b91d      	cbnz	r5, 802302e <_printf_i+0x196>
 8023026:	6823      	ldr	r3, [r4, #0]
 8023028:	f023 0320 	bic.w	r3, r3, #32
 802302c:	6023      	str	r3, [r4, #0]
 802302e:	2310      	movs	r3, #16
 8023030:	e7b0      	b.n	8022f94 <_printf_i+0xfc>
 8023032:	6823      	ldr	r3, [r4, #0]
 8023034:	f043 0320 	orr.w	r3, r3, #32
 8023038:	6023      	str	r3, [r4, #0]
 802303a:	2378      	movs	r3, #120	; 0x78
 802303c:	4828      	ldr	r0, [pc, #160]	; (80230e0 <_printf_i+0x248>)
 802303e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023042:	e7e3      	b.n	802300c <_printf_i+0x174>
 8023044:	065e      	lsls	r6, r3, #25
 8023046:	bf48      	it	mi
 8023048:	b2ad      	uxthmi	r5, r5
 802304a:	e7e6      	b.n	802301a <_printf_i+0x182>
 802304c:	4616      	mov	r6, r2
 802304e:	e7bb      	b.n	8022fc8 <_printf_i+0x130>
 8023050:	680b      	ldr	r3, [r1, #0]
 8023052:	6826      	ldr	r6, [r4, #0]
 8023054:	6960      	ldr	r0, [r4, #20]
 8023056:	1d1d      	adds	r5, r3, #4
 8023058:	600d      	str	r5, [r1, #0]
 802305a:	0635      	lsls	r5, r6, #24
 802305c:	681b      	ldr	r3, [r3, #0]
 802305e:	d501      	bpl.n	8023064 <_printf_i+0x1cc>
 8023060:	6018      	str	r0, [r3, #0]
 8023062:	e002      	b.n	802306a <_printf_i+0x1d2>
 8023064:	0671      	lsls	r1, r6, #25
 8023066:	d5fb      	bpl.n	8023060 <_printf_i+0x1c8>
 8023068:	8018      	strh	r0, [r3, #0]
 802306a:	2300      	movs	r3, #0
 802306c:	6123      	str	r3, [r4, #16]
 802306e:	4616      	mov	r6, r2
 8023070:	e7ba      	b.n	8022fe8 <_printf_i+0x150>
 8023072:	680b      	ldr	r3, [r1, #0]
 8023074:	1d1a      	adds	r2, r3, #4
 8023076:	600a      	str	r2, [r1, #0]
 8023078:	681e      	ldr	r6, [r3, #0]
 802307a:	6862      	ldr	r2, [r4, #4]
 802307c:	2100      	movs	r1, #0
 802307e:	4630      	mov	r0, r6
 8023080:	f7dd f8f6 	bl	8000270 <memchr>
 8023084:	b108      	cbz	r0, 802308a <_printf_i+0x1f2>
 8023086:	1b80      	subs	r0, r0, r6
 8023088:	6060      	str	r0, [r4, #4]
 802308a:	6863      	ldr	r3, [r4, #4]
 802308c:	6123      	str	r3, [r4, #16]
 802308e:	2300      	movs	r3, #0
 8023090:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023094:	e7a8      	b.n	8022fe8 <_printf_i+0x150>
 8023096:	6923      	ldr	r3, [r4, #16]
 8023098:	4632      	mov	r2, r6
 802309a:	4649      	mov	r1, r9
 802309c:	4640      	mov	r0, r8
 802309e:	47d0      	blx	sl
 80230a0:	3001      	adds	r0, #1
 80230a2:	d0ab      	beq.n	8022ffc <_printf_i+0x164>
 80230a4:	6823      	ldr	r3, [r4, #0]
 80230a6:	079b      	lsls	r3, r3, #30
 80230a8:	d413      	bmi.n	80230d2 <_printf_i+0x23a>
 80230aa:	68e0      	ldr	r0, [r4, #12]
 80230ac:	9b03      	ldr	r3, [sp, #12]
 80230ae:	4298      	cmp	r0, r3
 80230b0:	bfb8      	it	lt
 80230b2:	4618      	movlt	r0, r3
 80230b4:	e7a4      	b.n	8023000 <_printf_i+0x168>
 80230b6:	2301      	movs	r3, #1
 80230b8:	4632      	mov	r2, r6
 80230ba:	4649      	mov	r1, r9
 80230bc:	4640      	mov	r0, r8
 80230be:	47d0      	blx	sl
 80230c0:	3001      	adds	r0, #1
 80230c2:	d09b      	beq.n	8022ffc <_printf_i+0x164>
 80230c4:	3501      	adds	r5, #1
 80230c6:	68e3      	ldr	r3, [r4, #12]
 80230c8:	9903      	ldr	r1, [sp, #12]
 80230ca:	1a5b      	subs	r3, r3, r1
 80230cc:	42ab      	cmp	r3, r5
 80230ce:	dcf2      	bgt.n	80230b6 <_printf_i+0x21e>
 80230d0:	e7eb      	b.n	80230aa <_printf_i+0x212>
 80230d2:	2500      	movs	r5, #0
 80230d4:	f104 0619 	add.w	r6, r4, #25
 80230d8:	e7f5      	b.n	80230c6 <_printf_i+0x22e>
 80230da:	bf00      	nop
 80230dc:	08042d34 	.word	0x08042d34
 80230e0:	08042d45 	.word	0x08042d45

080230e4 <iprintf>:
 80230e4:	b40f      	push	{r0, r1, r2, r3}
 80230e6:	4b0a      	ldr	r3, [pc, #40]	; (8023110 <iprintf+0x2c>)
 80230e8:	b513      	push	{r0, r1, r4, lr}
 80230ea:	681c      	ldr	r4, [r3, #0]
 80230ec:	b124      	cbz	r4, 80230f8 <iprintf+0x14>
 80230ee:	69a3      	ldr	r3, [r4, #24]
 80230f0:	b913      	cbnz	r3, 80230f8 <iprintf+0x14>
 80230f2:	4620      	mov	r0, r4
 80230f4:	f002 fb7e 	bl	80257f4 <__sinit>
 80230f8:	ab05      	add	r3, sp, #20
 80230fa:	9a04      	ldr	r2, [sp, #16]
 80230fc:	68a1      	ldr	r1, [r4, #8]
 80230fe:	9301      	str	r3, [sp, #4]
 8023100:	4620      	mov	r0, r4
 8023102:	f003 fcc9 	bl	8026a98 <_vfiprintf_r>
 8023106:	b002      	add	sp, #8
 8023108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802310c:	b004      	add	sp, #16
 802310e:	4770      	bx	lr
 8023110:	20000488 	.word	0x20000488

08023114 <putchar>:
 8023114:	4b09      	ldr	r3, [pc, #36]	; (802313c <putchar+0x28>)
 8023116:	b513      	push	{r0, r1, r4, lr}
 8023118:	681c      	ldr	r4, [r3, #0]
 802311a:	4601      	mov	r1, r0
 802311c:	b134      	cbz	r4, 802312c <putchar+0x18>
 802311e:	69a3      	ldr	r3, [r4, #24]
 8023120:	b923      	cbnz	r3, 802312c <putchar+0x18>
 8023122:	9001      	str	r0, [sp, #4]
 8023124:	4620      	mov	r0, r4
 8023126:	f002 fb65 	bl	80257f4 <__sinit>
 802312a:	9901      	ldr	r1, [sp, #4]
 802312c:	68a2      	ldr	r2, [r4, #8]
 802312e:	4620      	mov	r0, r4
 8023130:	b002      	add	sp, #8
 8023132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023136:	f003 bf2b 	b.w	8026f90 <_putc_r>
 802313a:	bf00      	nop
 802313c:	20000488 	.word	0x20000488

08023140 <_puts_r>:
 8023140:	b570      	push	{r4, r5, r6, lr}
 8023142:	460e      	mov	r6, r1
 8023144:	4605      	mov	r5, r0
 8023146:	b118      	cbz	r0, 8023150 <_puts_r+0x10>
 8023148:	6983      	ldr	r3, [r0, #24]
 802314a:	b90b      	cbnz	r3, 8023150 <_puts_r+0x10>
 802314c:	f002 fb52 	bl	80257f4 <__sinit>
 8023150:	69ab      	ldr	r3, [r5, #24]
 8023152:	68ac      	ldr	r4, [r5, #8]
 8023154:	b913      	cbnz	r3, 802315c <_puts_r+0x1c>
 8023156:	4628      	mov	r0, r5
 8023158:	f002 fb4c 	bl	80257f4 <__sinit>
 802315c:	4b2c      	ldr	r3, [pc, #176]	; (8023210 <_puts_r+0xd0>)
 802315e:	429c      	cmp	r4, r3
 8023160:	d120      	bne.n	80231a4 <_puts_r+0x64>
 8023162:	686c      	ldr	r4, [r5, #4]
 8023164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023166:	07db      	lsls	r3, r3, #31
 8023168:	d405      	bmi.n	8023176 <_puts_r+0x36>
 802316a:	89a3      	ldrh	r3, [r4, #12]
 802316c:	0598      	lsls	r0, r3, #22
 802316e:	d402      	bmi.n	8023176 <_puts_r+0x36>
 8023170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023172:	f002 fcef 	bl	8025b54 <__retarget_lock_acquire_recursive>
 8023176:	89a3      	ldrh	r3, [r4, #12]
 8023178:	0719      	lsls	r1, r3, #28
 802317a:	d51d      	bpl.n	80231b8 <_puts_r+0x78>
 802317c:	6923      	ldr	r3, [r4, #16]
 802317e:	b1db      	cbz	r3, 80231b8 <_puts_r+0x78>
 8023180:	3e01      	subs	r6, #1
 8023182:	68a3      	ldr	r3, [r4, #8]
 8023184:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8023188:	3b01      	subs	r3, #1
 802318a:	60a3      	str	r3, [r4, #8]
 802318c:	bb39      	cbnz	r1, 80231de <_puts_r+0x9e>
 802318e:	2b00      	cmp	r3, #0
 8023190:	da38      	bge.n	8023204 <_puts_r+0xc4>
 8023192:	4622      	mov	r2, r4
 8023194:	210a      	movs	r1, #10
 8023196:	4628      	mov	r0, r5
 8023198:	f001 fa9c 	bl	80246d4 <__swbuf_r>
 802319c:	3001      	adds	r0, #1
 802319e:	d011      	beq.n	80231c4 <_puts_r+0x84>
 80231a0:	250a      	movs	r5, #10
 80231a2:	e011      	b.n	80231c8 <_puts_r+0x88>
 80231a4:	4b1b      	ldr	r3, [pc, #108]	; (8023214 <_puts_r+0xd4>)
 80231a6:	429c      	cmp	r4, r3
 80231a8:	d101      	bne.n	80231ae <_puts_r+0x6e>
 80231aa:	68ac      	ldr	r4, [r5, #8]
 80231ac:	e7da      	b.n	8023164 <_puts_r+0x24>
 80231ae:	4b1a      	ldr	r3, [pc, #104]	; (8023218 <_puts_r+0xd8>)
 80231b0:	429c      	cmp	r4, r3
 80231b2:	bf08      	it	eq
 80231b4:	68ec      	ldreq	r4, [r5, #12]
 80231b6:	e7d5      	b.n	8023164 <_puts_r+0x24>
 80231b8:	4621      	mov	r1, r4
 80231ba:	4628      	mov	r0, r5
 80231bc:	f001 faee 	bl	802479c <__swsetup_r>
 80231c0:	2800      	cmp	r0, #0
 80231c2:	d0dd      	beq.n	8023180 <_puts_r+0x40>
 80231c4:	f04f 35ff 	mov.w	r5, #4294967295
 80231c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80231ca:	07da      	lsls	r2, r3, #31
 80231cc:	d405      	bmi.n	80231da <_puts_r+0x9a>
 80231ce:	89a3      	ldrh	r3, [r4, #12]
 80231d0:	059b      	lsls	r3, r3, #22
 80231d2:	d402      	bmi.n	80231da <_puts_r+0x9a>
 80231d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80231d6:	f002 fcbf 	bl	8025b58 <__retarget_lock_release_recursive>
 80231da:	4628      	mov	r0, r5
 80231dc:	bd70      	pop	{r4, r5, r6, pc}
 80231de:	2b00      	cmp	r3, #0
 80231e0:	da04      	bge.n	80231ec <_puts_r+0xac>
 80231e2:	69a2      	ldr	r2, [r4, #24]
 80231e4:	429a      	cmp	r2, r3
 80231e6:	dc06      	bgt.n	80231f6 <_puts_r+0xb6>
 80231e8:	290a      	cmp	r1, #10
 80231ea:	d004      	beq.n	80231f6 <_puts_r+0xb6>
 80231ec:	6823      	ldr	r3, [r4, #0]
 80231ee:	1c5a      	adds	r2, r3, #1
 80231f0:	6022      	str	r2, [r4, #0]
 80231f2:	7019      	strb	r1, [r3, #0]
 80231f4:	e7c5      	b.n	8023182 <_puts_r+0x42>
 80231f6:	4622      	mov	r2, r4
 80231f8:	4628      	mov	r0, r5
 80231fa:	f001 fa6b 	bl	80246d4 <__swbuf_r>
 80231fe:	3001      	adds	r0, #1
 8023200:	d1bf      	bne.n	8023182 <_puts_r+0x42>
 8023202:	e7df      	b.n	80231c4 <_puts_r+0x84>
 8023204:	6823      	ldr	r3, [r4, #0]
 8023206:	250a      	movs	r5, #10
 8023208:	1c5a      	adds	r2, r3, #1
 802320a:	6022      	str	r2, [r4, #0]
 802320c:	701d      	strb	r5, [r3, #0]
 802320e:	e7db      	b.n	80231c8 <_puts_r+0x88>
 8023210:	08043208 	.word	0x08043208
 8023214:	08043228 	.word	0x08043228
 8023218:	080431e8 	.word	0x080431e8

0802321c <puts>:
 802321c:	4b02      	ldr	r3, [pc, #8]	; (8023228 <puts+0xc>)
 802321e:	4601      	mov	r1, r0
 8023220:	6818      	ldr	r0, [r3, #0]
 8023222:	f7ff bf8d 	b.w	8023140 <_puts_r>
 8023226:	bf00      	nop
 8023228:	20000488 	.word	0x20000488

0802322c <rand>:
 802322c:	4b17      	ldr	r3, [pc, #92]	; (802328c <rand+0x60>)
 802322e:	b510      	push	{r4, lr}
 8023230:	681c      	ldr	r4, [r3, #0]
 8023232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8023234:	b9b3      	cbnz	r3, 8023264 <rand+0x38>
 8023236:	2018      	movs	r0, #24
 8023238:	f7fe ff9c 	bl	8022174 <malloc>
 802323c:	63a0      	str	r0, [r4, #56]	; 0x38
 802323e:	b928      	cbnz	r0, 802324c <rand+0x20>
 8023240:	4602      	mov	r2, r0
 8023242:	4b13      	ldr	r3, [pc, #76]	; (8023290 <rand+0x64>)
 8023244:	4813      	ldr	r0, [pc, #76]	; (8023294 <rand+0x68>)
 8023246:	214e      	movs	r1, #78	; 0x4e
 8023248:	f001 fb62 	bl	8024910 <__assert_func>
 802324c:	4a12      	ldr	r2, [pc, #72]	; (8023298 <rand+0x6c>)
 802324e:	4b13      	ldr	r3, [pc, #76]	; (802329c <rand+0x70>)
 8023250:	e9c0 2300 	strd	r2, r3, [r0]
 8023254:	4b12      	ldr	r3, [pc, #72]	; (80232a0 <rand+0x74>)
 8023256:	6083      	str	r3, [r0, #8]
 8023258:	230b      	movs	r3, #11
 802325a:	8183      	strh	r3, [r0, #12]
 802325c:	2201      	movs	r2, #1
 802325e:	2300      	movs	r3, #0
 8023260:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8023264:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8023266:	480f      	ldr	r0, [pc, #60]	; (80232a4 <rand+0x78>)
 8023268:	690a      	ldr	r2, [r1, #16]
 802326a:	694b      	ldr	r3, [r1, #20]
 802326c:	4c0e      	ldr	r4, [pc, #56]	; (80232a8 <rand+0x7c>)
 802326e:	4350      	muls	r0, r2
 8023270:	fb04 0003 	mla	r0, r4, r3, r0
 8023274:	fba2 3404 	umull	r3, r4, r2, r4
 8023278:	1c5a      	adds	r2, r3, #1
 802327a:	4404      	add	r4, r0
 802327c:	f144 0000 	adc.w	r0, r4, #0
 8023280:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8023284:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8023288:	bd10      	pop	{r4, pc}
 802328a:	bf00      	nop
 802328c:	20000488 	.word	0x20000488
 8023290:	08042bec 	.word	0x08042bec
 8023294:	08042d56 	.word	0x08042d56
 8023298:	abcd330e 	.word	0xabcd330e
 802329c:	e66d1234 	.word	0xe66d1234
 80232a0:	0005deec 	.word	0x0005deec
 80232a4:	5851f42d 	.word	0x5851f42d
 80232a8:	4c957f2d 	.word	0x4c957f2d

080232ac <realloc>:
 80232ac:	4b02      	ldr	r3, [pc, #8]	; (80232b8 <realloc+0xc>)
 80232ae:	460a      	mov	r2, r1
 80232b0:	4601      	mov	r1, r0
 80232b2:	6818      	ldr	r0, [r3, #0]
 80232b4:	f003 b873 	b.w	802639e <_realloc_r>
 80232b8:	20000488 	.word	0x20000488

080232bc <modf>:
 80232bc:	ee10 1a90 	vmov	r1, s1
 80232c0:	b570      	push	{r4, r5, r6, lr}
 80232c2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 80232c6:	f2a5 33ff 	subw	r3, r5, #1023	; 0x3ff
 80232ca:	2b13      	cmp	r3, #19
 80232cc:	ee10 4a10 	vmov	r4, s0
 80232d0:	dc1f      	bgt.n	8023312 <modf+0x56>
 80232d2:	2b00      	cmp	r3, #0
 80232d4:	da05      	bge.n	80232e2 <modf+0x26>
 80232d6:	2200      	movs	r2, #0
 80232d8:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80232dc:	e9c0 2300 	strd	r2, r3, [r0]
 80232e0:	bd70      	pop	{r4, r5, r6, pc}
 80232e2:	4d19      	ldr	r5, [pc, #100]	; (8023348 <modf+0x8c>)
 80232e4:	411d      	asrs	r5, r3
 80232e6:	ea01 0305 	and.w	r3, r1, r5
 80232ea:	431c      	orrs	r4, r3
 80232ec:	d107      	bne.n	80232fe <modf+0x42>
 80232ee:	ed80 0b00 	vstr	d0, [r0]
 80232f2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 80232f6:	4622      	mov	r2, r4
 80232f8:	ec43 2b10 	vmov	d0, r2, r3
 80232fc:	e7f0      	b.n	80232e0 <modf+0x24>
 80232fe:	2200      	movs	r2, #0
 8023300:	ea21 0305 	bic.w	r3, r1, r5
 8023304:	ec43 2b17 	vmov	d7, r2, r3
 8023308:	e9c0 2300 	strd	r2, r3, [r0]
 802330c:	ee30 0b47 	vsub.f64	d0, d0, d7
 8023310:	e7e6      	b.n	80232e0 <modf+0x24>
 8023312:	2b33      	cmp	r3, #51	; 0x33
 8023314:	dd05      	ble.n	8023322 <modf+0x66>
 8023316:	ed80 0b00 	vstr	d0, [r0]
 802331a:	2200      	movs	r2, #0
 802331c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8023320:	e7ea      	b.n	80232f8 <modf+0x3c>
 8023322:	f2a5 4313 	subw	r3, r5, #1043	; 0x413
 8023326:	f04f 35ff 	mov.w	r5, #4294967295
 802332a:	40dd      	lsrs	r5, r3
 802332c:	ea15 0604 	ands.w	r6, r5, r4
 8023330:	d105      	bne.n	802333e <modf+0x82>
 8023332:	ed80 0b00 	vstr	d0, [r0]
 8023336:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 802333a:	4632      	mov	r2, r6
 802333c:	e7dc      	b.n	80232f8 <modf+0x3c>
 802333e:	ee10 3a90 	vmov	r3, s1
 8023342:	ea24 0205 	bic.w	r2, r4, r5
 8023346:	e7dd      	b.n	8023304 <modf+0x48>
 8023348:	000fffff 	.word	0x000fffff

0802334c <_sbrk_r>:
 802334c:	b538      	push	{r3, r4, r5, lr}
 802334e:	4d06      	ldr	r5, [pc, #24]	; (8023368 <_sbrk_r+0x1c>)
 8023350:	2300      	movs	r3, #0
 8023352:	4604      	mov	r4, r0
 8023354:	4608      	mov	r0, r1
 8023356:	602b      	str	r3, [r5, #0]
 8023358:	f7e2 fede 	bl	8006118 <_sbrk>
 802335c:	1c43      	adds	r3, r0, #1
 802335e:	d102      	bne.n	8023366 <_sbrk_r+0x1a>
 8023360:	682b      	ldr	r3, [r5, #0]
 8023362:	b103      	cbz	r3, 8023366 <_sbrk_r+0x1a>
 8023364:	6023      	str	r3, [r4, #0]
 8023366:	bd38      	pop	{r3, r4, r5, pc}
 8023368:	2002e4e8 	.word	0x2002e4e8

0802336c <sniprintf>:
 802336c:	b40c      	push	{r2, r3}
 802336e:	b530      	push	{r4, r5, lr}
 8023370:	4b17      	ldr	r3, [pc, #92]	; (80233d0 <sniprintf+0x64>)
 8023372:	1e0c      	subs	r4, r1, #0
 8023374:	681d      	ldr	r5, [r3, #0]
 8023376:	b09d      	sub	sp, #116	; 0x74
 8023378:	da08      	bge.n	802338c <sniprintf+0x20>
 802337a:	238b      	movs	r3, #139	; 0x8b
 802337c:	602b      	str	r3, [r5, #0]
 802337e:	f04f 30ff 	mov.w	r0, #4294967295
 8023382:	b01d      	add	sp, #116	; 0x74
 8023384:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023388:	b002      	add	sp, #8
 802338a:	4770      	bx	lr
 802338c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8023390:	f8ad 3014 	strh.w	r3, [sp, #20]
 8023394:	bf14      	ite	ne
 8023396:	f104 33ff 	addne.w	r3, r4, #4294967295
 802339a:	4623      	moveq	r3, r4
 802339c:	9304      	str	r3, [sp, #16]
 802339e:	9307      	str	r3, [sp, #28]
 80233a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80233a4:	9002      	str	r0, [sp, #8]
 80233a6:	9006      	str	r0, [sp, #24]
 80233a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80233ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80233ae:	ab21      	add	r3, sp, #132	; 0x84
 80233b0:	a902      	add	r1, sp, #8
 80233b2:	4628      	mov	r0, r5
 80233b4:	9301      	str	r3, [sp, #4]
 80233b6:	f003 f873 	bl	80264a0 <_svfiprintf_r>
 80233ba:	1c43      	adds	r3, r0, #1
 80233bc:	bfbc      	itt	lt
 80233be:	238b      	movlt	r3, #139	; 0x8b
 80233c0:	602b      	strlt	r3, [r5, #0]
 80233c2:	2c00      	cmp	r4, #0
 80233c4:	d0dd      	beq.n	8023382 <sniprintf+0x16>
 80233c6:	9b02      	ldr	r3, [sp, #8]
 80233c8:	2200      	movs	r2, #0
 80233ca:	701a      	strb	r2, [r3, #0]
 80233cc:	e7d9      	b.n	8023382 <sniprintf+0x16>
 80233ce:	bf00      	nop
 80233d0:	20000488 	.word	0x20000488

080233d4 <siprintf>:
 80233d4:	b40e      	push	{r1, r2, r3}
 80233d6:	b500      	push	{lr}
 80233d8:	b09c      	sub	sp, #112	; 0x70
 80233da:	ab1d      	add	r3, sp, #116	; 0x74
 80233dc:	9002      	str	r0, [sp, #8]
 80233de:	9006      	str	r0, [sp, #24]
 80233e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80233e4:	4809      	ldr	r0, [pc, #36]	; (802340c <siprintf+0x38>)
 80233e6:	9107      	str	r1, [sp, #28]
 80233e8:	9104      	str	r1, [sp, #16]
 80233ea:	4909      	ldr	r1, [pc, #36]	; (8023410 <siprintf+0x3c>)
 80233ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80233f0:	9105      	str	r1, [sp, #20]
 80233f2:	6800      	ldr	r0, [r0, #0]
 80233f4:	9301      	str	r3, [sp, #4]
 80233f6:	a902      	add	r1, sp, #8
 80233f8:	f003 f852 	bl	80264a0 <_svfiprintf_r>
 80233fc:	9b02      	ldr	r3, [sp, #8]
 80233fe:	2200      	movs	r2, #0
 8023400:	701a      	strb	r2, [r3, #0]
 8023402:	b01c      	add	sp, #112	; 0x70
 8023404:	f85d eb04 	ldr.w	lr, [sp], #4
 8023408:	b003      	add	sp, #12
 802340a:	4770      	bx	lr
 802340c:	20000488 	.word	0x20000488
 8023410:	ffff0208 	.word	0xffff0208

08023414 <siscanf>:
 8023414:	b40e      	push	{r1, r2, r3}
 8023416:	b510      	push	{r4, lr}
 8023418:	b09f      	sub	sp, #124	; 0x7c
 802341a:	ac21      	add	r4, sp, #132	; 0x84
 802341c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8023420:	f854 2b04 	ldr.w	r2, [r4], #4
 8023424:	9201      	str	r2, [sp, #4]
 8023426:	f8ad 101c 	strh.w	r1, [sp, #28]
 802342a:	9004      	str	r0, [sp, #16]
 802342c:	9008      	str	r0, [sp, #32]
 802342e:	f7dc ff11 	bl	8000254 <strlen>
 8023432:	4b0c      	ldr	r3, [pc, #48]	; (8023464 <siscanf+0x50>)
 8023434:	9005      	str	r0, [sp, #20]
 8023436:	9009      	str	r0, [sp, #36]	; 0x24
 8023438:	930d      	str	r3, [sp, #52]	; 0x34
 802343a:	480b      	ldr	r0, [pc, #44]	; (8023468 <siscanf+0x54>)
 802343c:	9a01      	ldr	r2, [sp, #4]
 802343e:	6800      	ldr	r0, [r0, #0]
 8023440:	9403      	str	r4, [sp, #12]
 8023442:	2300      	movs	r3, #0
 8023444:	9311      	str	r3, [sp, #68]	; 0x44
 8023446:	9316      	str	r3, [sp, #88]	; 0x58
 8023448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802344c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023450:	a904      	add	r1, sp, #16
 8023452:	4623      	mov	r3, r4
 8023454:	f003 f97e 	bl	8026754 <__ssvfiscanf_r>
 8023458:	b01f      	add	sp, #124	; 0x7c
 802345a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802345e:	b003      	add	sp, #12
 8023460:	4770      	bx	lr
 8023462:	bf00      	nop
 8023464:	0802348f 	.word	0x0802348f
 8023468:	20000488 	.word	0x20000488

0802346c <__sread>:
 802346c:	b510      	push	{r4, lr}
 802346e:	460c      	mov	r4, r1
 8023470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023474:	f003 fdd4 	bl	8027020 <_read_r>
 8023478:	2800      	cmp	r0, #0
 802347a:	bfab      	itete	ge
 802347c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802347e:	89a3      	ldrhlt	r3, [r4, #12]
 8023480:	181b      	addge	r3, r3, r0
 8023482:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023486:	bfac      	ite	ge
 8023488:	6563      	strge	r3, [r4, #84]	; 0x54
 802348a:	81a3      	strhlt	r3, [r4, #12]
 802348c:	bd10      	pop	{r4, pc}

0802348e <__seofread>:
 802348e:	2000      	movs	r0, #0
 8023490:	4770      	bx	lr

08023492 <__swrite>:
 8023492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023496:	461f      	mov	r7, r3
 8023498:	898b      	ldrh	r3, [r1, #12]
 802349a:	05db      	lsls	r3, r3, #23
 802349c:	4605      	mov	r5, r0
 802349e:	460c      	mov	r4, r1
 80234a0:	4616      	mov	r6, r2
 80234a2:	d505      	bpl.n	80234b0 <__swrite+0x1e>
 80234a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234a8:	2302      	movs	r3, #2
 80234aa:	2200      	movs	r2, #0
 80234ac:	f002 fb56 	bl	8025b5c <_lseek_r>
 80234b0:	89a3      	ldrh	r3, [r4, #12]
 80234b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80234b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80234ba:	81a3      	strh	r3, [r4, #12]
 80234bc:	4632      	mov	r2, r6
 80234be:	463b      	mov	r3, r7
 80234c0:	4628      	mov	r0, r5
 80234c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80234c6:	f001 b957 	b.w	8024778 <_write_r>

080234ca <__sseek>:
 80234ca:	b510      	push	{r4, lr}
 80234cc:	460c      	mov	r4, r1
 80234ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234d2:	f002 fb43 	bl	8025b5c <_lseek_r>
 80234d6:	1c43      	adds	r3, r0, #1
 80234d8:	89a3      	ldrh	r3, [r4, #12]
 80234da:	bf15      	itete	ne
 80234dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80234de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80234e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80234e6:	81a3      	strheq	r3, [r4, #12]
 80234e8:	bf18      	it	ne
 80234ea:	81a3      	strhne	r3, [r4, #12]
 80234ec:	bd10      	pop	{r4, pc}

080234ee <__sclose>:
 80234ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80234f2:	f001 ba2b 	b.w	802494c <_close_r>

080234f6 <stpcpy>:
 80234f6:	4603      	mov	r3, r0
 80234f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80234fc:	4618      	mov	r0, r3
 80234fe:	f803 2b01 	strb.w	r2, [r3], #1
 8023502:	2a00      	cmp	r2, #0
 8023504:	d1f8      	bne.n	80234f8 <stpcpy+0x2>
 8023506:	4770      	bx	lr

08023508 <strchr>:
 8023508:	b2c9      	uxtb	r1, r1
 802350a:	4603      	mov	r3, r0
 802350c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023510:	b11a      	cbz	r2, 802351a <strchr+0x12>
 8023512:	428a      	cmp	r2, r1
 8023514:	d1f9      	bne.n	802350a <strchr+0x2>
 8023516:	4618      	mov	r0, r3
 8023518:	4770      	bx	lr
 802351a:	2900      	cmp	r1, #0
 802351c:	bf18      	it	ne
 802351e:	2300      	movne	r3, #0
 8023520:	e7f9      	b.n	8023516 <strchr+0xe>

08023522 <strcpy>:
 8023522:	4603      	mov	r3, r0
 8023524:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023528:	f803 2b01 	strb.w	r2, [r3], #1
 802352c:	2a00      	cmp	r2, #0
 802352e:	d1f9      	bne.n	8023524 <strcpy+0x2>
 8023530:	4770      	bx	lr
	...

08023534 <iso_year_adjust>:
 8023534:	6941      	ldr	r1, [r0, #20]
 8023536:	2900      	cmp	r1, #0
 8023538:	f240 736c 	movw	r3, #1900	; 0x76c
 802353c:	bfa8      	it	ge
 802353e:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8023542:	18ca      	adds	r2, r1, r3
 8023544:	078b      	lsls	r3, r1, #30
 8023546:	d105      	bne.n	8023554 <iso_year_adjust+0x20>
 8023548:	2164      	movs	r1, #100	; 0x64
 802354a:	fb92 f3f1 	sdiv	r3, r2, r1
 802354e:	fb01 2313 	mls	r3, r1, r3, r2
 8023552:	b9db      	cbnz	r3, 802358c <iso_year_adjust+0x58>
 8023554:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8023558:	fb92 f3f1 	sdiv	r3, r2, r1
 802355c:	fb01 2313 	mls	r3, r1, r3, r2
 8023560:	fab3 f383 	clz	r3, r3
 8023564:	095b      	lsrs	r3, r3, #5
 8023566:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 802356a:	0040      	lsls	r0, r0, #1
 802356c:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 8023570:	4418      	add	r0, r3
 8023572:	f241 63a2 	movw	r3, #5794	; 0x16a2
 8023576:	4298      	cmp	r0, r3
 8023578:	d03a      	beq.n	80235f0 <iso_year_adjust+0xbc>
 802357a:	dc21      	bgt.n	80235c0 <iso_year_adjust+0x8c>
 802357c:	2801      	cmp	r0, #1
 802357e:	dc1a      	bgt.n	80235b6 <iso_year_adjust+0x82>
 8023580:	2800      	cmp	r0, #0
 8023582:	bfb4      	ite	lt
 8023584:	2000      	movlt	r0, #0
 8023586:	f04f 30ff 	movge.w	r0, #4294967295
 802358a:	4770      	bx	lr
 802358c:	2301      	movs	r3, #1
 802358e:	e7ea      	b.n	8023566 <iso_year_adjust+0x32>
 8023590:	2817      	cmp	r0, #23
 8023592:	d813      	bhi.n	80235bc <iso_year_adjust+0x88>
 8023594:	e8df f000 	tbb	[pc, r0]
 8023598:	0c0c0c0c 	.word	0x0c0c0c0c
 802359c:	0c0c1212 	.word	0x0c0c1212
 80235a0:	12121212 	.word	0x12121212
 80235a4:	12121212 	.word	0x12121212
 80235a8:	0c0c1212 	.word	0x0c0c1212
 80235ac:	0c0c1212 	.word	0x0c0c1212
 80235b0:	f04f 30ff 	mov.w	r0, #4294967295
 80235b4:	4770      	bx	lr
 80235b6:	380a      	subs	r0, #10
 80235b8:	2817      	cmp	r0, #23
 80235ba:	d9e9      	bls.n	8023590 <iso_year_adjust+0x5c>
 80235bc:	2000      	movs	r0, #0
 80235be:	4770      	bx	lr
 80235c0:	f241 63b4 	movw	r3, #5812	; 0x16b4
 80235c4:	4298      	cmp	r0, r3
 80235c6:	dc06      	bgt.n	80235d6 <iso_year_adjust+0xa2>
 80235c8:	f241 63b1 	movw	r3, #5809	; 0x16b1
 80235cc:	4298      	cmp	r0, r3
 80235ce:	bfd4      	ite	le
 80235d0:	2000      	movle	r0, #0
 80235d2:	2001      	movgt	r0, #1
 80235d4:	4770      	bx	lr
 80235d6:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 80235da:	3802      	subs	r0, #2
 80235dc:	2815      	cmp	r0, #21
 80235de:	d8ed      	bhi.n	80235bc <iso_year_adjust+0x88>
 80235e0:	2301      	movs	r3, #1
 80235e2:	4083      	lsls	r3, r0
 80235e4:	4803      	ldr	r0, [pc, #12]	; (80235f4 <iso_year_adjust+0xc0>)
 80235e6:	4018      	ands	r0, r3
 80235e8:	3800      	subs	r0, #0
 80235ea:	bf18      	it	ne
 80235ec:	2001      	movne	r0, #1
 80235ee:	4770      	bx	lr
 80235f0:	2001      	movs	r0, #1
 80235f2:	4770      	bx	lr
 80235f4:	002a001f 	.word	0x002a001f

080235f8 <__strftime>:
 80235f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80235fc:	b091      	sub	sp, #68	; 0x44
 80235fe:	461d      	mov	r5, r3
 8023600:	2300      	movs	r3, #0
 8023602:	4681      	mov	r9, r0
 8023604:	4688      	mov	r8, r1
 8023606:	9304      	str	r3, [sp, #16]
 8023608:	461c      	mov	r4, r3
 802360a:	7813      	ldrb	r3, [r2, #0]
 802360c:	2b00      	cmp	r3, #0
 802360e:	f000 84d1 	beq.w	8023fb4 <__strftime+0x9bc>
 8023612:	2b25      	cmp	r3, #37	; 0x25
 8023614:	d11b      	bne.n	802364e <__strftime+0x56>
 8023616:	7857      	ldrb	r7, [r2, #1]
 8023618:	2f30      	cmp	r7, #48	; 0x30
 802361a:	d024      	beq.n	8023666 <__strftime+0x6e>
 802361c:	2f2b      	cmp	r7, #43	; 0x2b
 802361e:	d022      	beq.n	8023666 <__strftime+0x6e>
 8023620:	f102 0b01 	add.w	fp, r2, #1
 8023624:	2700      	movs	r7, #0
 8023626:	f89b 3000 	ldrb.w	r3, [fp]
 802362a:	3b31      	subs	r3, #49	; 0x31
 802362c:	2b08      	cmp	r3, #8
 802362e:	d81d      	bhi.n	802366c <__strftime+0x74>
 8023630:	4658      	mov	r0, fp
 8023632:	220a      	movs	r2, #10
 8023634:	a908      	add	r1, sp, #32
 8023636:	f000 fe0d 	bl	8024254 <strtoul>
 802363a:	f8dd b020 	ldr.w	fp, [sp, #32]
 802363e:	4606      	mov	r6, r0
 8023640:	f89b 3000 	ldrb.w	r3, [fp]
 8023644:	2b45      	cmp	r3, #69	; 0x45
 8023646:	d113      	bne.n	8023670 <__strftime+0x78>
 8023648:	f10b 0b01 	add.w	fp, fp, #1
 802364c:	e012      	b.n	8023674 <__strftime+0x7c>
 802364e:	f108 31ff 	add.w	r1, r8, #4294967295
 8023652:	42a1      	cmp	r1, r4
 8023654:	d802      	bhi.n	802365c <__strftime+0x64>
 8023656:	2400      	movs	r4, #0
 8023658:	f000 bcb2 	b.w	8023fc0 <__strftime+0x9c8>
 802365c:	f809 3004 	strb.w	r3, [r9, r4]
 8023660:	3201      	adds	r2, #1
 8023662:	3401      	adds	r4, #1
 8023664:	e7d1      	b.n	802360a <__strftime+0x12>
 8023666:	f102 0b02 	add.w	fp, r2, #2
 802366a:	e7dc      	b.n	8023626 <__strftime+0x2e>
 802366c:	2600      	movs	r6, #0
 802366e:	e7e7      	b.n	8023640 <__strftime+0x48>
 8023670:	2b4f      	cmp	r3, #79	; 0x4f
 8023672:	d0e9      	beq.n	8023648 <__strftime+0x50>
 8023674:	f89b 0000 	ldrb.w	r0, [fp]
 8023678:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 802367c:	2b55      	cmp	r3, #85	; 0x55
 802367e:	d8ea      	bhi.n	8023656 <__strftime+0x5e>
 8023680:	a201      	add	r2, pc, #4	; (adr r2, 8023688 <__strftime+0x90>)
 8023682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8023686:	bf00      	nop
 8023688:	08023fa7 	.word	0x08023fa7
 802368c:	08023657 	.word	0x08023657
 8023690:	08023657 	.word	0x08023657
 8023694:	08023657 	.word	0x08023657
 8023698:	08023657 	.word	0x08023657
 802369c:	08023657 	.word	0x08023657
 80236a0:	08023657 	.word	0x08023657
 80236a4:	08023657 	.word	0x08023657
 80236a8:	08023657 	.word	0x08023657
 80236ac:	08023657 	.word	0x08023657
 80236b0:	08023657 	.word	0x08023657
 80236b4:	08023657 	.word	0x08023657
 80236b8:	08023657 	.word	0x08023657
 80236bc:	08023657 	.word	0x08023657
 80236c0:	08023657 	.word	0x08023657
 80236c4:	08023657 	.word	0x08023657
 80236c8:	08023657 	.word	0x08023657
 80236cc:	08023657 	.word	0x08023657
 80236d0:	08023657 	.word	0x08023657
 80236d4:	08023657 	.word	0x08023657
 80236d8:	08023657 	.word	0x08023657
 80236dc:	08023657 	.word	0x08023657
 80236e0:	08023657 	.word	0x08023657
 80236e4:	08023657 	.word	0x08023657
 80236e8:	08023657 	.word	0x08023657
 80236ec:	08023657 	.word	0x08023657
 80236f0:	08023657 	.word	0x08023657
 80236f4:	08023657 	.word	0x08023657
 80236f8:	0802381f 	.word	0x0802381f
 80236fc:	08023879 	.word	0x08023879
 8023700:	080238ef 	.word	0x080238ef
 8023704:	08023989 	.word	0x08023989
 8023708:	08023657 	.word	0x08023657
 802370c:	080239d5 	.word	0x080239d5
 8023710:	08023ab5 	.word	0x08023ab5
 8023714:	08023bb7 	.word	0x08023bb7
 8023718:	08023bc5 	.word	0x08023bc5
 802371c:	08023657 	.word	0x08023657
 8023720:	08023657 	.word	0x08023657
 8023724:	08023657 	.word	0x08023657
 8023728:	08023bf5 	.word	0x08023bf5
 802372c:	08023657 	.word	0x08023657
 8023730:	08023657 	.word	0x08023657
 8023734:	08023c0d 	.word	0x08023c0d
 8023738:	08023657 	.word	0x08023657
 802373c:	08023c5b 	.word	0x08023c5b
 8023740:	08023d71 	.word	0x08023d71
 8023744:	08023d83 	.word	0x08023d83
 8023748:	08023ddb 	.word	0x08023ddb
 802374c:	08023deb 	.word	0x08023deb
 8023750:	08023e61 	.word	0x08023e61
 8023754:	080238e7 	.word	0x080238e7
 8023758:	08023e95 	.word	0x08023e95
 802375c:	08023f53 	.word	0x08023f53
 8023760:	08023657 	.word	0x08023657
 8023764:	08023657 	.word	0x08023657
 8023768:	08023657 	.word	0x08023657
 802376c:	08023657 	.word	0x08023657
 8023770:	08023657 	.word	0x08023657
 8023774:	08023657 	.word	0x08023657
 8023778:	080237e1 	.word	0x080237e1
 802377c:	0802384d 	.word	0x0802384d
 8023780:	080238a7 	.word	0x080238a7
 8023784:	08023961 	.word	0x08023961
 8023788:	08023961 	.word	0x08023961
 802378c:	08023657 	.word	0x08023657
 8023790:	08023a1d 	.word	0x08023a1d
 8023794:	0802384d 	.word	0x0802384d
 8023798:	08023657 	.word	0x08023657
 802379c:	08023be7 	.word	0x08023be7
 80237a0:	08023bb7 	.word	0x08023bb7
 80237a4:	08023bc5 	.word	0x08023bc5
 80237a8:	08023bef 	.word	0x08023bef
 80237ac:	08023bf9 	.word	0x08023bf9
 80237b0:	08023657 	.word	0x08023657
 80237b4:	08023c0d 	.word	0x08023c0d
 80237b8:	08023657 	.word	0x08023657
 80237bc:	080238d7 	.word	0x080238d7
 80237c0:	08023c71 	.word	0x08023c71
 80237c4:	08023d75 	.word	0x08023d75
 80237c8:	08023dbd 	.word	0x08023dbd
 80237cc:	08023657 	.word	0x08023657
 80237d0:	08023e51 	.word	0x08023e51
 80237d4:	080238df 	.word	0x080238df
 80237d8:	08023e79 	.word	0x08023e79
 80237dc:	08023ee5 	.word	0x08023ee5
 80237e0:	69ab      	ldr	r3, [r5, #24]
 80237e2:	4aa7      	ldr	r2, [pc, #668]	; (8023a80 <__strftime+0x488>)
 80237e4:	3318      	adds	r3, #24
 80237e6:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 80237ea:	4630      	mov	r0, r6
 80237ec:	f7dc fd32 	bl	8000254 <strlen>
 80237f0:	3e01      	subs	r6, #1
 80237f2:	4420      	add	r0, r4
 80237f4:	f108 33ff 	add.w	r3, r8, #4294967295
 80237f8:	42a0      	cmp	r0, r4
 80237fa:	d107      	bne.n	802380c <__strftime+0x214>
 80237fc:	f89b 3000 	ldrb.w	r3, [fp]
 8023800:	2b00      	cmp	r3, #0
 8023802:	f000 83d7 	beq.w	8023fb4 <__strftime+0x9bc>
 8023806:	f10b 0201 	add.w	r2, fp, #1
 802380a:	e6fe      	b.n	802360a <__strftime+0x12>
 802380c:	42a3      	cmp	r3, r4
 802380e:	f67f af22 	bls.w	8023656 <__strftime+0x5e>
 8023812:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023816:	f809 2004 	strb.w	r2, [r9, r4]
 802381a:	3401      	adds	r4, #1
 802381c:	e7ec      	b.n	80237f8 <__strftime+0x200>
 802381e:	69aa      	ldr	r2, [r5, #24]
 8023820:	4b97      	ldr	r3, [pc, #604]	; (8023a80 <__strftime+0x488>)
 8023822:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8023826:	6fde      	ldr	r6, [r3, #124]	; 0x7c
 8023828:	4630      	mov	r0, r6
 802382a:	f7dc fd13 	bl	8000254 <strlen>
 802382e:	3e01      	subs	r6, #1
 8023830:	4420      	add	r0, r4
 8023832:	f108 33ff 	add.w	r3, r8, #4294967295
 8023836:	42a0      	cmp	r0, r4
 8023838:	d0e0      	beq.n	80237fc <__strftime+0x204>
 802383a:	42a3      	cmp	r3, r4
 802383c:	f67f af0b 	bls.w	8023656 <__strftime+0x5e>
 8023840:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023844:	f809 2004 	strb.w	r2, [r9, r4]
 8023848:	3401      	adds	r4, #1
 802384a:	e7f4      	b.n	8023836 <__strftime+0x23e>
 802384c:	4b8c      	ldr	r3, [pc, #560]	; (8023a80 <__strftime+0x488>)
 802384e:	692a      	ldr	r2, [r5, #16]
 8023850:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8023854:	4630      	mov	r0, r6
 8023856:	f7dc fcfd 	bl	8000254 <strlen>
 802385a:	3e01      	subs	r6, #1
 802385c:	4420      	add	r0, r4
 802385e:	f108 33ff 	add.w	r3, r8, #4294967295
 8023862:	42a0      	cmp	r0, r4
 8023864:	d0ca      	beq.n	80237fc <__strftime+0x204>
 8023866:	42a3      	cmp	r3, r4
 8023868:	f67f aef5 	bls.w	8023656 <__strftime+0x5e>
 802386c:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023870:	f809 2004 	strb.w	r2, [r9, r4]
 8023874:	3401      	adds	r4, #1
 8023876:	e7f4      	b.n	8023862 <__strftime+0x26a>
 8023878:	692b      	ldr	r3, [r5, #16]
 802387a:	4a81      	ldr	r2, [pc, #516]	; (8023a80 <__strftime+0x488>)
 802387c:	330c      	adds	r3, #12
 802387e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023882:	4630      	mov	r0, r6
 8023884:	f7dc fce6 	bl	8000254 <strlen>
 8023888:	3e01      	subs	r6, #1
 802388a:	4420      	add	r0, r4
 802388c:	f108 33ff 	add.w	r3, r8, #4294967295
 8023890:	42a0      	cmp	r0, r4
 8023892:	d0b3      	beq.n	80237fc <__strftime+0x204>
 8023894:	42a3      	cmp	r3, r4
 8023896:	f67f aede 	bls.w	8023656 <__strftime+0x5e>
 802389a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 802389e:	f809 2004 	strb.w	r2, [r9, r4]
 80238a2:	3401      	adds	r4, #1
 80238a4:	e7f4      	b.n	8023890 <__strftime+0x298>
 80238a6:	4b76      	ldr	r3, [pc, #472]	; (8023a80 <__strftime+0x488>)
 80238a8:	f8d3 60a0 	ldr.w	r6, [r3, #160]	; 0xa0
 80238ac:	4630      	mov	r0, r6
 80238ae:	f7dc fcd1 	bl	8000254 <strlen>
 80238b2:	7833      	ldrb	r3, [r6, #0]
 80238b4:	2b00      	cmp	r3, #0
 80238b6:	d0a1      	beq.n	80237fc <__strftime+0x204>
 80238b8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80238ba:	9300      	str	r3, [sp, #0]
 80238bc:	4632      	mov	r2, r6
 80238be:	462b      	mov	r3, r5
 80238c0:	eba8 0104 	sub.w	r1, r8, r4
 80238c4:	eb09 0004 	add.w	r0, r9, r4
 80238c8:	f7ff fe96 	bl	80235f8 <__strftime>
 80238cc:	2800      	cmp	r0, #0
 80238ce:	f77f aec2 	ble.w	8023656 <__strftime+0x5e>
 80238d2:	4404      	add	r4, r0
 80238d4:	e792      	b.n	80237fc <__strftime+0x204>
 80238d6:	4b6a      	ldr	r3, [pc, #424]	; (8023a80 <__strftime+0x488>)
 80238d8:	f8d3 60e4 	ldr.w	r6, [r3, #228]	; 0xe4
 80238dc:	e7e6      	b.n	80238ac <__strftime+0x2b4>
 80238de:	4b68      	ldr	r3, [pc, #416]	; (8023a80 <__strftime+0x488>)
 80238e0:	f8d3 609c 	ldr.w	r6, [r3, #156]	; 0x9c
 80238e4:	e7e2      	b.n	80238ac <__strftime+0x2b4>
 80238e6:	4b66      	ldr	r3, [pc, #408]	; (8023a80 <__strftime+0x488>)
 80238e8:	f8d3 6098 	ldr.w	r6, [r3, #152]	; 0x98
 80238ec:	e7de      	b.n	80238ac <__strftime+0x2b4>
 80238ee:	4965      	ldr	r1, [pc, #404]	; (8023a84 <__strftime+0x48c>)
 80238f0:	f8d5 a014 	ldr.w	sl, [r5, #20]
 80238f4:	458a      	cmp	sl, r1
 80238f6:	bfac      	ite	ge
 80238f8:	2100      	movge	r1, #0
 80238fa:	2101      	movlt	r1, #1
 80238fc:	f1ba 0f00 	cmp.w	sl, #0
 8023900:	db0e      	blt.n	8023920 <__strftime+0x328>
 8023902:	2064      	movs	r0, #100	; 0x64
 8023904:	fb9a f0f0 	sdiv	r0, sl, r0
 8023908:	3013      	adds	r0, #19
 802390a:	b19f      	cbz	r7, 8023934 <__strftime+0x33c>
 802390c:	2863      	cmp	r0, #99	; 0x63
 802390e:	dd25      	ble.n	802395c <__strftime+0x364>
 8023910:	4a5d      	ldr	r2, [pc, #372]	; (8023a88 <__strftime+0x490>)
 8023912:	4b5e      	ldr	r3, [pc, #376]	; (8023a8c <__strftime+0x494>)
 8023914:	2f2b      	cmp	r7, #43	; 0x2b
 8023916:	bf14      	ite	ne
 8023918:	4617      	movne	r7, r2
 802391a:	461f      	moveq	r7, r3
 802391c:	4a5c      	ldr	r2, [pc, #368]	; (8023a90 <__strftime+0x498>)
 802391e:	e00b      	b.n	8023938 <__strftime+0x340>
 8023920:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8023924:	9105      	str	r1, [sp, #20]
 8023926:	f000 ffa7 	bl	8024878 <abs>
 802392a:	2364      	movs	r3, #100	; 0x64
 802392c:	9905      	ldr	r1, [sp, #20]
 802392e:	fb90 f0f3 	sdiv	r0, r0, r3
 8023932:	e7ea      	b.n	802390a <__strftime+0x312>
 8023934:	4f54      	ldr	r7, [pc, #336]	; (8023a88 <__strftime+0x490>)
 8023936:	4a57      	ldr	r2, [pc, #348]	; (8023a94 <__strftime+0x49c>)
 8023938:	4b57      	ldr	r3, [pc, #348]	; (8023a98 <__strftime+0x4a0>)
 802393a:	9001      	str	r0, [sp, #4]
 802393c:	2e02      	cmp	r6, #2
 802393e:	bf2c      	ite	cs
 8023940:	ebc1 0606 	rsbcs	r6, r1, r6
 8023944:	f1c1 0602 	rsbcc	r6, r1, #2
 8023948:	494e      	ldr	r1, [pc, #312]	; (8023a84 <__strftime+0x48c>)
 802394a:	9600      	str	r6, [sp, #0]
 802394c:	458a      	cmp	sl, r1
 802394e:	bfa8      	it	ge
 8023950:	463b      	movge	r3, r7
 8023952:	eba8 0104 	sub.w	r1, r8, r4
 8023956:	eb09 0004 	add.w	r0, r9, r4
 802395a:	e02a      	b.n	80239b2 <__strftime+0x3ba>
 802395c:	4f4a      	ldr	r7, [pc, #296]	; (8023a88 <__strftime+0x490>)
 802395e:	e7dd      	b.n	802391c <__strftime+0x324>
 8023960:	494e      	ldr	r1, [pc, #312]	; (8023a9c <__strftime+0x4a4>)
 8023962:	4a4f      	ldr	r2, [pc, #316]	; (8023aa0 <__strftime+0x4a8>)
 8023964:	68eb      	ldr	r3, [r5, #12]
 8023966:	2864      	cmp	r0, #100	; 0x64
 8023968:	bf08      	it	eq
 802396a:	460a      	moveq	r2, r1
 802396c:	eba8 0104 	sub.w	r1, r8, r4
 8023970:	eb09 0004 	add.w	r0, r9, r4
 8023974:	f7ff fcfa 	bl	802336c <sniprintf>
 8023978:	2800      	cmp	r0, #0
 802397a:	f6ff ae6c 	blt.w	8023656 <__strftime+0x5e>
 802397e:	4404      	add	r4, r0
 8023980:	45a0      	cmp	r8, r4
 8023982:	f63f af3b 	bhi.w	80237fc <__strftime+0x204>
 8023986:	e666      	b.n	8023656 <__strftime+0x5e>
 8023988:	6968      	ldr	r0, [r5, #20]
 802398a:	692b      	ldr	r3, [r5, #16]
 802398c:	68ef      	ldr	r7, [r5, #12]
 802398e:	2800      	cmp	r0, #0
 8023990:	eb09 0604 	add.w	r6, r9, r4
 8023994:	eba8 0104 	sub.w	r1, r8, r4
 8023998:	f103 0301 	add.w	r3, r3, #1
 802399c:	db0c      	blt.n	80239b8 <__strftime+0x3c0>
 802399e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80239a2:	fb90 f2fc 	sdiv	r2, r0, ip
 80239a6:	fb0c 0212 	mls	r2, ip, r2, r0
 80239aa:	e9cd 7200 	strd	r7, r2, [sp]
 80239ae:	4a3d      	ldr	r2, [pc, #244]	; (8023aa4 <__strftime+0x4ac>)
 80239b0:	4630      	mov	r0, r6
 80239b2:	f7ff fcdb 	bl	802336c <sniprintf>
 80239b6:	e7df      	b.n	8023978 <__strftime+0x380>
 80239b8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80239bc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80239c0:	f000 ff5a 	bl	8024878 <abs>
 80239c4:	2264      	movs	r2, #100	; 0x64
 80239c6:	e9dd 1305 	ldrd	r1, r3, [sp, #20]
 80239ca:	fb90 fcf2 	sdiv	ip, r0, r2
 80239ce:	fb0c 0212 	mls	r2, ip, r2, r0
 80239d2:	e7ea      	b.n	80239aa <__strftime+0x3b2>
 80239d4:	2325      	movs	r3, #37	; 0x25
 80239d6:	f88d 3020 	strb.w	r3, [sp, #32]
 80239da:	b187      	cbz	r7, 80239fe <__strftime+0x406>
 80239dc:	2e06      	cmp	r6, #6
 80239de:	bf38      	it	cc
 80239e0:	2606      	movcc	r6, #6
 80239e2:	1fb3      	subs	r3, r6, #6
 80239e4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 80239e8:	d10c      	bne.n	8023a04 <__strftime+0x40c>
 80239ea:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 80239ee:	492e      	ldr	r1, [pc, #184]	; (8023aa8 <__strftime+0x4b0>)
 80239f0:	f7ff fd97 	bl	8023522 <strcpy>
 80239f4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80239f6:	9300      	str	r3, [sp, #0]
 80239f8:	aa08      	add	r2, sp, #32
 80239fa:	462b      	mov	r3, r5
 80239fc:	e760      	b.n	80238c0 <__strftime+0x2c8>
 80239fe:	272b      	movs	r7, #43	; 0x2b
 8023a00:	260a      	movs	r6, #10
 8023a02:	e7ee      	b.n	80239e2 <__strftime+0x3ea>
 8023a04:	4a29      	ldr	r2, [pc, #164]	; (8023aac <__strftime+0x4b4>)
 8023a06:	211e      	movs	r1, #30
 8023a08:	f10d 0022 	add.w	r0, sp, #34	; 0x22
 8023a0c:	f7ff fcae 	bl	802336c <sniprintf>
 8023a10:	2800      	cmp	r0, #0
 8023a12:	ddea      	ble.n	80239ea <__strftime+0x3f2>
 8023a14:	f10d 0322 	add.w	r3, sp, #34	; 0x22
 8023a18:	4418      	add	r0, r3
 8023a1a:	e7e8      	b.n	80239ee <__strftime+0x3f6>
 8023a1c:	4628      	mov	r0, r5
 8023a1e:	f7ff fd89 	bl	8023534 <iso_year_adjust>
 8023a22:	4606      	mov	r6, r0
 8023a24:	6968      	ldr	r0, [r5, #20]
 8023a26:	2800      	cmp	r0, #0
 8023a28:	db11      	blt.n	8023a4e <__strftime+0x456>
 8023a2a:	2264      	movs	r2, #100	; 0x64
 8023a2c:	fb90 f3f2 	sdiv	r3, r0, r2
 8023a30:	fb02 0313 	mls	r3, r2, r3, r0
 8023a34:	441e      	add	r6, r3
 8023a36:	2364      	movs	r3, #100	; 0x64
 8023a38:	fb96 f0f3 	sdiv	r0, r6, r3
 8023a3c:	fb03 6610 	mls	r6, r3, r0, r6
 8023a40:	441e      	add	r6, r3
 8023a42:	fbb6 f2f3 	udiv	r2, r6, r3
 8023a46:	fb03 6312 	mls	r3, r3, r2, r6
 8023a4a:	4a14      	ldr	r2, [pc, #80]	; (8023a9c <__strftime+0x4a4>)
 8023a4c:	e78e      	b.n	802396c <__strftime+0x374>
 8023a4e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023a52:	f000 ff11 	bl	8024878 <abs>
 8023a56:	2364      	movs	r3, #100	; 0x64
 8023a58:	2e00      	cmp	r6, #0
 8023a5a:	fb90 f2f3 	sdiv	r2, r0, r3
 8023a5e:	fb02 0313 	mls	r3, r2, r3, r0
 8023a62:	da05      	bge.n	8023a70 <__strftime+0x478>
 8023a64:	6969      	ldr	r1, [r5, #20]
 8023a66:	4a12      	ldr	r2, [pc, #72]	; (8023ab0 <__strftime+0x4b8>)
 8023a68:	4291      	cmp	r1, r2
 8023a6a:	bfb8      	it	lt
 8023a6c:	2601      	movlt	r6, #1
 8023a6e:	e7e1      	b.n	8023a34 <__strftime+0x43c>
 8023a70:	d0e0      	beq.n	8023a34 <__strftime+0x43c>
 8023a72:	6969      	ldr	r1, [r5, #20]
 8023a74:	4a03      	ldr	r2, [pc, #12]	; (8023a84 <__strftime+0x48c>)
 8023a76:	4291      	cmp	r1, r2
 8023a78:	bfb8      	it	lt
 8023a7a:	f04f 36ff 	movlt.w	r6, #4294967295
 8023a7e:	e7d9      	b.n	8023a34 <__strftime+0x43c>
 8023a80:	08042f3c 	.word	0x08042f3c
 8023a84:	fffff894 	.word	0xfffff894
 8023a88:	080430f3 	.word	0x080430f3
 8023a8c:	08042dc4 	.word	0x08042dc4
 8023a90:	08042dbc 	.word	0x08042dbc
 8023a94:	08042db5 	.word	0x08042db5
 8023a98:	080433c6 	.word	0x080433c6
 8023a9c:	08042dd4 	.word	0x08042dd4
 8023aa0:	08042dc6 	.word	0x08042dc6
 8023aa4:	08042dca 	.word	0x08042dca
 8023aa8:	08042ddd 	.word	0x08042ddd
 8023aac:	08042dd9 	.word	0x08042dd9
 8023ab0:	fffff895 	.word	0xfffff895
 8023ab4:	4bb6      	ldr	r3, [pc, #728]	; (8023d90 <__strftime+0x798>)
 8023ab6:	6969      	ldr	r1, [r5, #20]
 8023ab8:	4299      	cmp	r1, r3
 8023aba:	bfac      	ite	ge
 8023abc:	2300      	movge	r3, #0
 8023abe:	2301      	movlt	r3, #1
 8023ac0:	4628      	mov	r0, r5
 8023ac2:	e9cd 3105 	strd	r3, r1, [sp, #20]
 8023ac6:	f7ff fd35 	bl	8023534 <iso_year_adjust>
 8023aca:	9906      	ldr	r1, [sp, #24]
 8023acc:	2900      	cmp	r1, #0
 8023ace:	4682      	mov	sl, r0
 8023ad0:	db27      	blt.n	8023b22 <__strftime+0x52a>
 8023ad2:	2264      	movs	r2, #100	; 0x64
 8023ad4:	fb91 f2f2 	sdiv	r2, r1, r2
 8023ad8:	3213      	adds	r2, #19
 8023ada:	6968      	ldr	r0, [r5, #20]
 8023adc:	2800      	cmp	r0, #0
 8023ade:	db2b      	blt.n	8023b38 <__strftime+0x540>
 8023ae0:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023ae4:	fb90 fefc 	sdiv	lr, r0, ip
 8023ae8:	fb0c 001e 	mls	r0, ip, lr, r0
 8023aec:	f1ba 0f00 	cmp.w	sl, #0
 8023af0:	da31      	bge.n	8023b56 <__strftime+0x55e>
 8023af2:	6969      	ldr	r1, [r5, #20]
 8023af4:	4ba7      	ldr	r3, [pc, #668]	; (8023d94 <__strftime+0x79c>)
 8023af6:	4299      	cmp	r1, r3
 8023af8:	db38      	blt.n	8023b6c <__strftime+0x574>
 8023afa:	eb0a 0300 	add.w	r3, sl, r0
 8023afe:	1c59      	adds	r1, r3, #1
 8023b00:	d139      	bne.n	8023b76 <__strftime+0x57e>
 8023b02:	3a01      	subs	r2, #1
 8023b04:	2363      	movs	r3, #99	; 0x63
 8023b06:	2064      	movs	r0, #100	; 0x64
 8023b08:	fb00 3202 	mla	r2, r0, r2, r3
 8023b0c:	9b05      	ldr	r3, [sp, #20]
 8023b0e:	2b00      	cmp	r3, #0
 8023b10:	d036      	beq.n	8023b80 <__strftime+0x588>
 8023b12:	232d      	movs	r3, #45	; 0x2d
 8023b14:	f88d 3020 	strb.w	r3, [sp, #32]
 8023b18:	b106      	cbz	r6, 8023b1c <__strftime+0x524>
 8023b1a:	3e01      	subs	r6, #1
 8023b1c:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8023b20:	e038      	b.n	8023b94 <__strftime+0x59c>
 8023b22:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 8023b26:	9106      	str	r1, [sp, #24]
 8023b28:	f000 fea6 	bl	8024878 <abs>
 8023b2c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023b30:	9906      	ldr	r1, [sp, #24]
 8023b32:	fb90 f2fc 	sdiv	r2, r0, ip
 8023b36:	e7d0      	b.n	8023ada <__strftime+0x4e2>
 8023b38:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023b3c:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8023b40:	f000 fe9a 	bl	8024878 <abs>
 8023b44:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8023b48:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8023b4c:	fb90 fefc 	sdiv	lr, r0, ip
 8023b50:	fb0e 001c 	mls	r0, lr, ip, r0
 8023b54:	e7ca      	b.n	8023aec <__strftime+0x4f4>
 8023b56:	d0d0      	beq.n	8023afa <__strftime+0x502>
 8023b58:	4b8d      	ldr	r3, [pc, #564]	; (8023d90 <__strftime+0x798>)
 8023b5a:	4299      	cmp	r1, r3
 8023b5c:	bfb4      	ite	lt
 8023b5e:	2301      	movlt	r3, #1
 8023b60:	2300      	movge	r3, #0
 8023b62:	9305      	str	r3, [sp, #20]
 8023b64:	bfb8      	it	lt
 8023b66:	f04f 3aff 	movlt.w	sl, #4294967295
 8023b6a:	e7c6      	b.n	8023afa <__strftime+0x502>
 8023b6c:	f04f 0a01 	mov.w	sl, #1
 8023b70:	f8cd a014 	str.w	sl, [sp, #20]
 8023b74:	e7c1      	b.n	8023afa <__strftime+0x502>
 8023b76:	2b64      	cmp	r3, #100	; 0x64
 8023b78:	bf04      	itt	eq
 8023b7a:	3201      	addeq	r2, #1
 8023b7c:	2300      	moveq	r3, #0
 8023b7e:	e7c2      	b.n	8023b06 <__strftime+0x50e>
 8023b80:	2f2b      	cmp	r7, #43	; 0x2b
 8023b82:	d106      	bne.n	8023b92 <__strftime+0x59a>
 8023b84:	f242 730f 	movw	r3, #9999	; 0x270f
 8023b88:	429a      	cmp	r2, r3
 8023b8a:	d902      	bls.n	8023b92 <__strftime+0x59a>
 8023b8c:	f88d 7020 	strb.w	r7, [sp, #32]
 8023b90:	e7c2      	b.n	8023b18 <__strftime+0x520>
 8023b92:	ab08      	add	r3, sp, #32
 8023b94:	2125      	movs	r1, #37	; 0x25
 8023b96:	7019      	strb	r1, [r3, #0]
 8023b98:	b94f      	cbnz	r7, 8023bae <__strftime+0x5b6>
 8023b9a:	1c58      	adds	r0, r3, #1
 8023b9c:	497e      	ldr	r1, [pc, #504]	; (8023d98 <__strftime+0x7a0>)
 8023b9e:	9205      	str	r2, [sp, #20]
 8023ba0:	f7ff fcbf 	bl	8023522 <strcpy>
 8023ba4:	9a05      	ldr	r2, [sp, #20]
 8023ba6:	9200      	str	r2, [sp, #0]
 8023ba8:	4633      	mov	r3, r6
 8023baa:	aa08      	add	r2, sp, #32
 8023bac:	e059      	b.n	8023c62 <__strftime+0x66a>
 8023bae:	2130      	movs	r1, #48	; 0x30
 8023bb0:	1c98      	adds	r0, r3, #2
 8023bb2:	7059      	strb	r1, [r3, #1]
 8023bb4:	e7f2      	b.n	8023b9c <__strftime+0x5a4>
 8023bb6:	4979      	ldr	r1, [pc, #484]	; (8023d9c <__strftime+0x7a4>)
 8023bb8:	4a79      	ldr	r2, [pc, #484]	; (8023da0 <__strftime+0x7a8>)
 8023bba:	68ab      	ldr	r3, [r5, #8]
 8023bbc:	286b      	cmp	r0, #107	; 0x6b
 8023bbe:	bf08      	it	eq
 8023bc0:	460a      	moveq	r2, r1
 8023bc2:	e6d3      	b.n	802396c <__strftime+0x374>
 8023bc4:	68ab      	ldr	r3, [r5, #8]
 8023bc6:	b163      	cbz	r3, 8023be2 <__strftime+0x5ea>
 8023bc8:	2b0c      	cmp	r3, #12
 8023bca:	d004      	beq.n	8023bd6 <__strftime+0x5de>
 8023bcc:	210c      	movs	r1, #12
 8023bce:	fb93 f2f1 	sdiv	r2, r3, r1
 8023bd2:	fb01 3312 	mls	r3, r1, r2, r3
 8023bd6:	4972      	ldr	r1, [pc, #456]	; (8023da0 <__strftime+0x7a8>)
 8023bd8:	4a70      	ldr	r2, [pc, #448]	; (8023d9c <__strftime+0x7a4>)
 8023bda:	2849      	cmp	r0, #73	; 0x49
 8023bdc:	bf08      	it	eq
 8023bde:	460a      	moveq	r2, r1
 8023be0:	e6c4      	b.n	802396c <__strftime+0x374>
 8023be2:	230c      	movs	r3, #12
 8023be4:	e7f7      	b.n	8023bd6 <__strftime+0x5de>
 8023be6:	69eb      	ldr	r3, [r5, #28]
 8023be8:	4a6e      	ldr	r2, [pc, #440]	; (8023da4 <__strftime+0x7ac>)
 8023bea:	3301      	adds	r3, #1
 8023bec:	e6be      	b.n	802396c <__strftime+0x374>
 8023bee:	692b      	ldr	r3, [r5, #16]
 8023bf0:	3301      	adds	r3, #1
 8023bf2:	e72a      	b.n	8023a4a <__strftime+0x452>
 8023bf4:	686b      	ldr	r3, [r5, #4]
 8023bf6:	e728      	b.n	8023a4a <__strftime+0x452>
 8023bf8:	f108 33ff 	add.w	r3, r8, #4294967295
 8023bfc:	42a3      	cmp	r3, r4
 8023bfe:	f67f ad2a 	bls.w	8023656 <__strftime+0x5e>
 8023c02:	230a      	movs	r3, #10
 8023c04:	f809 3004 	strb.w	r3, [r9, r4]
 8023c08:	3401      	adds	r4, #1
 8023c0a:	e5f7      	b.n	80237fc <__strftime+0x204>
 8023c0c:	68ab      	ldr	r3, [r5, #8]
 8023c0e:	2b0b      	cmp	r3, #11
 8023c10:	bfcc      	ite	gt
 8023c12:	22a4      	movgt	r2, #164	; 0xa4
 8023c14:	22a0      	movle	r2, #160	; 0xa0
 8023c16:	4b64      	ldr	r3, [pc, #400]	; (8023da8 <__strftime+0x7b0>)
 8023c18:	4413      	add	r3, r2
 8023c1a:	685e      	ldr	r6, [r3, #4]
 8023c1c:	4630      	mov	r0, r6
 8023c1e:	f7dc fb19 	bl	8000254 <strlen>
 8023c22:	1e72      	subs	r2, r6, #1
 8023c24:	4420      	add	r0, r4
 8023c26:	f108 36ff 	add.w	r6, r8, #4294967295
 8023c2a:	42a0      	cmp	r0, r4
 8023c2c:	f43f ade6 	beq.w	80237fc <__strftime+0x204>
 8023c30:	42a6      	cmp	r6, r4
 8023c32:	f67f ad10 	bls.w	8023656 <__strftime+0x5e>
 8023c36:	f89b 1000 	ldrb.w	r1, [fp]
 8023c3a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8023c3e:	2950      	cmp	r1, #80	; 0x50
 8023c40:	d107      	bne.n	8023c52 <__strftime+0x65a>
 8023c42:	495a      	ldr	r1, [pc, #360]	; (8023dac <__strftime+0x7b4>)
 8023c44:	5cc9      	ldrb	r1, [r1, r3]
 8023c46:	f001 0103 	and.w	r1, r1, #3
 8023c4a:	2901      	cmp	r1, #1
 8023c4c:	bf08      	it	eq
 8023c4e:	3320      	addeq	r3, #32
 8023c50:	b2db      	uxtb	r3, r3
 8023c52:	f809 3004 	strb.w	r3, [r9, r4]
 8023c56:	3401      	adds	r4, #1
 8023c58:	e7e7      	b.n	8023c2a <__strftime+0x632>
 8023c5a:	686b      	ldr	r3, [r5, #4]
 8023c5c:	9300      	str	r3, [sp, #0]
 8023c5e:	4a54      	ldr	r2, [pc, #336]	; (8023db0 <__strftime+0x7b8>)
 8023c60:	68ab      	ldr	r3, [r5, #8]
 8023c62:	eba8 0104 	sub.w	r1, r8, r4
 8023c66:	eb09 0004 	add.w	r0, r9, r4
 8023c6a:	f7ff fb7f 	bl	802336c <sniprintf>
 8023c6e:	e683      	b.n	8023978 <__strftime+0x380>
 8023c70:	6a2b      	ldr	r3, [r5, #32]
 8023c72:	2b00      	cmp	r3, #0
 8023c74:	db79      	blt.n	8023d6a <__strftime+0x772>
 8023c76:	f000 fb9f 	bl	80243b8 <__tz_lock>
 8023c7a:	9b04      	ldr	r3, [sp, #16]
 8023c7c:	b90b      	cbnz	r3, 8023c82 <__strftime+0x68a>
 8023c7e:	f000 fba7 	bl	80243d0 <_tzset_unlocked>
 8023c82:	f001 fea9 	bl	80259d8 <__gettzinfo>
 8023c86:	6a2b      	ldr	r3, [r5, #32]
 8023c88:	2b00      	cmp	r3, #0
 8023c8a:	bfcc      	ite	gt
 8023c8c:	2350      	movgt	r3, #80	; 0x50
 8023c8e:	2328      	movle	r3, #40	; 0x28
 8023c90:	58c3      	ldr	r3, [r0, r3]
 8023c92:	f1c3 0a00 	rsb	sl, r3, #0
 8023c96:	f000 fb95 	bl	80243c4 <__tz_unlock>
 8023c9a:	2301      	movs	r3, #1
 8023c9c:	9304      	str	r3, [sp, #16]
 8023c9e:	f8d5 c014 	ldr.w	ip, [r5, #20]
 8023ca2:	4662      	mov	r2, ip
 8023ca4:	f1bc 0645 	subs.w	r6, ip, #69	; 0x45
 8023ca8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8023cac:	9602      	str	r6, [sp, #8]
 8023cae:	f143 36ff 	adc.w	r6, r3, #4294967295
 8023cb2:	9603      	str	r6, [sp, #12]
 8023cb4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8023cb8:	2e00      	cmp	r6, #0
 8023cba:	f177 0600 	sbcs.w	r6, r7, #0
 8023cbe:	eba8 0104 	sub.w	r1, r8, r4
 8023cc2:	eb09 0004 	add.w	r0, r9, r4
 8023cc6:	da05      	bge.n	8023cd4 <__strftime+0x6dc>
 8023cc8:	f1bc 0642 	subs.w	r6, ip, #66	; 0x42
 8023ccc:	f143 33ff 	adc.w	r3, r3, #4294967295
 8023cd0:	9602      	str	r6, [sp, #8]
 8023cd2:	9303      	str	r3, [sp, #12]
 8023cd4:	9b02      	ldr	r3, [sp, #8]
 8023cd6:	089e      	lsrs	r6, r3, #2
 8023cd8:	9b03      	ldr	r3, [sp, #12]
 8023cda:	ea46 7683 	orr.w	r6, r6, r3, lsl #30
 8023cde:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023ce2:	109f      	asrs	r7, r3, #2
 8023ce4:	2364      	movs	r3, #100	; 0x64
 8023ce6:	fb92 f3f3 	sdiv	r3, r2, r3
 8023cea:	1af6      	subs	r6, r6, r3
 8023cec:	eb67 77e3 	sbc.w	r7, r7, r3, asr #31
 8023cf0:	f20c 122b 	addw	r2, ip, #299	; 0x12b
 8023cf4:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023cf8:	fb92 f3f3 	sdiv	r3, r2, r3
 8023cfc:	18f6      	adds	r6, r6, r3
 8023cfe:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023d02:	f1ac 0c46 	sub.w	ip, ip, #70	; 0x46
 8023d06:	f240 136d 	movw	r3, #365	; 0x16d
 8023d0a:	fb03 fc0c 	mul.w	ip, r3, ip
 8023d0e:	69eb      	ldr	r3, [r5, #28]
 8023d10:	eb16 060c 	adds.w	r6, r6, ip
 8023d14:	eb47 77ec 	adc.w	r7, r7, ip, asr #31
 8023d18:	18f6      	adds	r6, r6, r3
 8023d1a:	f04f 0c18 	mov.w	ip, #24
 8023d1e:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023d22:	fba6 230c 	umull	r2, r3, r6, ip
 8023d26:	68ae      	ldr	r6, [r5, #8]
 8023d28:	fb0c 3307 	mla	r3, ip, r7, r3
 8023d2c:	1992      	adds	r2, r2, r6
 8023d2e:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8023d32:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8023d36:	fba2 670c 	umull	r6, r7, r2, ip
 8023d3a:	fb0c 7703 	mla	r7, ip, r3, r7
 8023d3e:	686b      	ldr	r3, [r5, #4]
 8023d40:	18f6      	adds	r6, r6, r3
 8023d42:	eb47 77e3 	adc.w	r7, r7, r3, asr #31
 8023d46:	fba6 230c 	umull	r2, r3, r6, ip
 8023d4a:	682e      	ldr	r6, [r5, #0]
 8023d4c:	fb0c 3307 	mla	r3, ip, r7, r3
 8023d50:	1992      	adds	r2, r2, r6
 8023d52:	eb43 73e6 	adc.w	r3, r3, r6, asr #31
 8023d56:	ebb2 020a 	subs.w	r2, r2, sl
 8023d5a:	eb63 73ea 	sbc.w	r3, r3, sl, asr #31
 8023d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8023d62:	4a14      	ldr	r2, [pc, #80]	; (8023db4 <__strftime+0x7bc>)
 8023d64:	f7ff fb02 	bl	802336c <sniprintf>
 8023d68:	e606      	b.n	8023978 <__strftime+0x380>
 8023d6a:	f04f 0a00 	mov.w	sl, #0
 8023d6e:	e796      	b.n	8023c9e <__strftime+0x6a6>
 8023d70:	682b      	ldr	r3, [r5, #0]
 8023d72:	e66a      	b.n	8023a4a <__strftime+0x452>
 8023d74:	f108 33ff 	add.w	r3, r8, #4294967295
 8023d78:	42a3      	cmp	r3, r4
 8023d7a:	f67f ac6c 	bls.w	8023656 <__strftime+0x5e>
 8023d7e:	2309      	movs	r3, #9
 8023d80:	e740      	b.n	8023c04 <__strftime+0x60c>
 8023d82:	682b      	ldr	r3, [r5, #0]
 8023d84:	9301      	str	r3, [sp, #4]
 8023d86:	686b      	ldr	r3, [r5, #4]
 8023d88:	9300      	str	r3, [sp, #0]
 8023d8a:	4a0b      	ldr	r2, [pc, #44]	; (8023db8 <__strftime+0x7c0>)
 8023d8c:	68ab      	ldr	r3, [r5, #8]
 8023d8e:	e5e0      	b.n	8023952 <__strftime+0x35a>
 8023d90:	fffff894 	.word	0xfffff894
 8023d94:	fffff895 	.word	0xfffff895
 8023d98:	08042de5 	.word	0x08042de5
 8023d9c:	08042dc6 	.word	0x08042dc6
 8023da0:	08042dd4 	.word	0x08042dd4
 8023da4:	08042de9 	.word	0x08042de9
 8023da8:	08042f3c 	.word	0x08042f3c
 8023dac:	08042ae5 	.word	0x08042ae5
 8023db0:	08042df8 	.word	0x08042df8
 8023db4:	08042dee 	.word	0x08042dee
 8023db8:	08042df3 	.word	0x08042df3
 8023dbc:	f108 33ff 	add.w	r3, r8, #4294967295
 8023dc0:	42a3      	cmp	r3, r4
 8023dc2:	f67f ac48 	bls.w	8023656 <__strftime+0x5e>
 8023dc6:	69ab      	ldr	r3, [r5, #24]
 8023dc8:	eb09 0204 	add.w	r2, r9, r4
 8023dcc:	3401      	adds	r4, #1
 8023dce:	b913      	cbnz	r3, 8023dd6 <__strftime+0x7de>
 8023dd0:	2337      	movs	r3, #55	; 0x37
 8023dd2:	7013      	strb	r3, [r2, #0]
 8023dd4:	e512      	b.n	80237fc <__strftime+0x204>
 8023dd6:	3330      	adds	r3, #48	; 0x30
 8023dd8:	e7fb      	b.n	8023dd2 <__strftime+0x7da>
 8023dda:	69eb      	ldr	r3, [r5, #28]
 8023ddc:	69aa      	ldr	r2, [r5, #24]
 8023dde:	3307      	adds	r3, #7
 8023de0:	1a9b      	subs	r3, r3, r2
 8023de2:	2207      	movs	r2, #7
 8023de4:	fb93 f3f2 	sdiv	r3, r3, r2
 8023de8:	e62f      	b.n	8023a4a <__strftime+0x452>
 8023dea:	4628      	mov	r0, r5
 8023dec:	f7ff fba2 	bl	8023534 <iso_year_adjust>
 8023df0:	69aa      	ldr	r2, [r5, #24]
 8023df2:	b132      	cbz	r2, 8023e02 <__strftime+0x80a>
 8023df4:	3a01      	subs	r2, #1
 8023df6:	2800      	cmp	r0, #0
 8023df8:	dc28      	bgt.n	8023e4c <__strftime+0x854>
 8023dfa:	69eb      	ldr	r3, [r5, #28]
 8023dfc:	d103      	bne.n	8023e06 <__strftime+0x80e>
 8023dfe:	330a      	adds	r3, #10
 8023e00:	e7ee      	b.n	8023de0 <__strftime+0x7e8>
 8023e02:	2206      	movs	r2, #6
 8023e04:	e7f7      	b.n	8023df6 <__strftime+0x7fe>
 8023e06:	6968      	ldr	r0, [r5, #20]
 8023e08:	2800      	cmp	r0, #0
 8023e0a:	eba2 0303 	sub.w	r3, r2, r3
 8023e0e:	f240 726b 	movw	r2, #1899	; 0x76b
 8023e12:	bfa8      	it	ge
 8023e14:	f06f 0264 	mvnge.w	r2, #100	; 0x64
 8023e18:	4410      	add	r0, r2
 8023e1a:	0782      	lsls	r2, r0, #30
 8023e1c:	d105      	bne.n	8023e2a <__strftime+0x832>
 8023e1e:	2264      	movs	r2, #100	; 0x64
 8023e20:	fb90 f1f2 	sdiv	r1, r0, r2
 8023e24:	fb02 0111 	mls	r1, r2, r1, r0
 8023e28:	b971      	cbnz	r1, 8023e48 <__strftime+0x850>
 8023e2a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8023e2e:	fb90 f2f1 	sdiv	r2, r0, r1
 8023e32:	fb01 0212 	mls	r2, r1, r2, r0
 8023e36:	fab2 f282 	clz	r2, r2
 8023e3a:	0952      	lsrs	r2, r2, #5
 8023e3c:	1a9a      	subs	r2, r3, r2
 8023e3e:	2a05      	cmp	r2, #5
 8023e40:	bfb4      	ite	lt
 8023e42:	2335      	movlt	r3, #53	; 0x35
 8023e44:	2334      	movge	r3, #52	; 0x34
 8023e46:	e600      	b.n	8023a4a <__strftime+0x452>
 8023e48:	2201      	movs	r2, #1
 8023e4a:	e7f7      	b.n	8023e3c <__strftime+0x844>
 8023e4c:	2301      	movs	r3, #1
 8023e4e:	e5fc      	b.n	8023a4a <__strftime+0x452>
 8023e50:	f108 33ff 	add.w	r3, r8, #4294967295
 8023e54:	42a3      	cmp	r3, r4
 8023e56:	f67f abfe 	bls.w	8023656 <__strftime+0x5e>
 8023e5a:	69ab      	ldr	r3, [r5, #24]
 8023e5c:	3330      	adds	r3, #48	; 0x30
 8023e5e:	e6d1      	b.n	8023c04 <__strftime+0x60c>
 8023e60:	69ab      	ldr	r3, [r5, #24]
 8023e62:	b13b      	cbz	r3, 8023e74 <__strftime+0x87c>
 8023e64:	3b01      	subs	r3, #1
 8023e66:	69ea      	ldr	r2, [r5, #28]
 8023e68:	3207      	adds	r2, #7
 8023e6a:	1ad2      	subs	r2, r2, r3
 8023e6c:	2307      	movs	r3, #7
 8023e6e:	fb92 f3f3 	sdiv	r3, r2, r3
 8023e72:	e5ea      	b.n	8023a4a <__strftime+0x452>
 8023e74:	2306      	movs	r3, #6
 8023e76:	e7f6      	b.n	8023e66 <__strftime+0x86e>
 8023e78:	6968      	ldr	r0, [r5, #20]
 8023e7a:	2800      	cmp	r0, #0
 8023e7c:	db05      	blt.n	8023e8a <__strftime+0x892>
 8023e7e:	2264      	movs	r2, #100	; 0x64
 8023e80:	fb90 f3f2 	sdiv	r3, r0, r2
 8023e84:	fb03 0312 	mls	r3, r3, r2, r0
 8023e88:	e5df      	b.n	8023a4a <__strftime+0x452>
 8023e8a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8023e8e:	f000 fcf3 	bl	8024878 <abs>
 8023e92:	e7f4      	b.n	8023e7e <__strftime+0x886>
 8023e94:	696b      	ldr	r3, [r5, #20]
 8023e96:	4a4c      	ldr	r2, [pc, #304]	; (8023fc8 <__strftime+0x9d0>)
 8023e98:	4293      	cmp	r3, r2
 8023e9a:	da09      	bge.n	8023eb0 <__strftime+0x8b8>
 8023e9c:	212d      	movs	r1, #45	; 0x2d
 8023e9e:	f88d 1020 	strb.w	r1, [sp, #32]
 8023ea2:	eba2 0a03 	sub.w	sl, r2, r3
 8023ea6:	b106      	cbz	r6, 8023eaa <__strftime+0x8b2>
 8023ea8:	3e01      	subs	r6, #1
 8023eaa:	f10d 0321 	add.w	r3, sp, #33	; 0x21
 8023eae:	e00b      	b.n	8023ec8 <__strftime+0x8d0>
 8023eb0:	2f2b      	cmp	r7, #43	; 0x2b
 8023eb2:	f203 7a6c 	addw	sl, r3, #1900	; 0x76c
 8023eb6:	d106      	bne.n	8023ec6 <__strftime+0x8ce>
 8023eb8:	f242 730f 	movw	r3, #9999	; 0x270f
 8023ebc:	459a      	cmp	sl, r3
 8023ebe:	d902      	bls.n	8023ec6 <__strftime+0x8ce>
 8023ec0:	f88d 7020 	strb.w	r7, [sp, #32]
 8023ec4:	e7ef      	b.n	8023ea6 <__strftime+0x8ae>
 8023ec6:	ab08      	add	r3, sp, #32
 8023ec8:	2225      	movs	r2, #37	; 0x25
 8023eca:	701a      	strb	r2, [r3, #0]
 8023ecc:	b937      	cbnz	r7, 8023edc <__strftime+0x8e4>
 8023ece:	1c58      	adds	r0, r3, #1
 8023ed0:	493e      	ldr	r1, [pc, #248]	; (8023fcc <__strftime+0x9d4>)
 8023ed2:	f7ff fb26 	bl	8023522 <strcpy>
 8023ed6:	f8cd a000 	str.w	sl, [sp]
 8023eda:	e665      	b.n	8023ba8 <__strftime+0x5b0>
 8023edc:	2230      	movs	r2, #48	; 0x30
 8023ede:	1c98      	adds	r0, r3, #2
 8023ee0:	705a      	strb	r2, [r3, #1]
 8023ee2:	e7f5      	b.n	8023ed0 <__strftime+0x8d8>
 8023ee4:	6a2b      	ldr	r3, [r5, #32]
 8023ee6:	2b00      	cmp	r3, #0
 8023ee8:	f6ff ac88 	blt.w	80237fc <__strftime+0x204>
 8023eec:	f000 fa64 	bl	80243b8 <__tz_lock>
 8023ef0:	9b04      	ldr	r3, [sp, #16]
 8023ef2:	b90b      	cbnz	r3, 8023ef8 <__strftime+0x900>
 8023ef4:	f000 fa6c 	bl	80243d0 <_tzset_unlocked>
 8023ef8:	f001 fd6e 	bl	80259d8 <__gettzinfo>
 8023efc:	6a2b      	ldr	r3, [r5, #32]
 8023efe:	2b00      	cmp	r3, #0
 8023f00:	bfcc      	ite	gt
 8023f02:	2350      	movgt	r3, #80	; 0x50
 8023f04:	2328      	movle	r3, #40	; 0x28
 8023f06:	eb09 0704 	add.w	r7, r9, r4
 8023f0a:	58c6      	ldr	r6, [r0, r3]
 8023f0c:	f000 fa5a 	bl	80243c4 <__tz_unlock>
 8023f10:	4276      	negs	r6, r6
 8023f12:	233c      	movs	r3, #60	; 0x3c
 8023f14:	fb96 f0f3 	sdiv	r0, r6, r3
 8023f18:	f001 fe12 	bl	8025b40 <labs>
 8023f1c:	233c      	movs	r3, #60	; 0x3c
 8023f1e:	eba8 0a04 	sub.w	sl, r8, r4
 8023f22:	fb90 f2f3 	sdiv	r2, r0, r3
 8023f26:	fb02 0013 	mls	r0, r2, r3, r0
 8023f2a:	9000      	str	r0, [sp, #0]
 8023f2c:	4a28      	ldr	r2, [pc, #160]	; (8023fd0 <__strftime+0x9d8>)
 8023f2e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8023f32:	4651      	mov	r1, sl
 8023f34:	4638      	mov	r0, r7
 8023f36:	fb96 f3f3 	sdiv	r3, r6, r3
 8023f3a:	f7ff fa17 	bl	802336c <sniprintf>
 8023f3e:	2800      	cmp	r0, #0
 8023f40:	f6ff ab89 	blt.w	8023656 <__strftime+0x5e>
 8023f44:	4404      	add	r4, r0
 8023f46:	45a0      	cmp	r8, r4
 8023f48:	f67f ab85 	bls.w	8023656 <__strftime+0x5e>
 8023f4c:	2301      	movs	r3, #1
 8023f4e:	9304      	str	r3, [sp, #16]
 8023f50:	e454      	b.n	80237fc <__strftime+0x204>
 8023f52:	6a2b      	ldr	r3, [r5, #32]
 8023f54:	2b00      	cmp	r3, #0
 8023f56:	f6ff ac51 	blt.w	80237fc <__strftime+0x204>
 8023f5a:	f000 fa2d 	bl	80243b8 <__tz_lock>
 8023f5e:	9b04      	ldr	r3, [sp, #16]
 8023f60:	b90b      	cbnz	r3, 8023f66 <__strftime+0x96e>
 8023f62:	f000 fa35 	bl	80243d0 <_tzset_unlocked>
 8023f66:	6a2b      	ldr	r3, [r5, #32]
 8023f68:	4a1a      	ldr	r2, [pc, #104]	; (8023fd4 <__strftime+0x9dc>)
 8023f6a:	2b00      	cmp	r3, #0
 8023f6c:	bfd4      	ite	le
 8023f6e:	2300      	movle	r3, #0
 8023f70:	2301      	movgt	r3, #1
 8023f72:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8023f76:	4630      	mov	r0, r6
 8023f78:	f7dc f96c 	bl	8000254 <strlen>
 8023f7c:	3e01      	subs	r6, #1
 8023f7e:	4420      	add	r0, r4
 8023f80:	f108 33ff 	add.w	r3, r8, #4294967295
 8023f84:	42a0      	cmp	r0, r4
 8023f86:	d102      	bne.n	8023f8e <__strftime+0x996>
 8023f88:	f000 fa1c 	bl	80243c4 <__tz_unlock>
 8023f8c:	e7de      	b.n	8023f4c <__strftime+0x954>
 8023f8e:	42a3      	cmp	r3, r4
 8023f90:	d905      	bls.n	8023f9e <__strftime+0x9a6>
 8023f92:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8023f96:	f809 2004 	strb.w	r2, [r9, r4]
 8023f9a:	3401      	adds	r4, #1
 8023f9c:	e7f2      	b.n	8023f84 <__strftime+0x98c>
 8023f9e:	f000 fa11 	bl	80243c4 <__tz_unlock>
 8023fa2:	f7ff bb58 	b.w	8023656 <__strftime+0x5e>
 8023fa6:	f108 33ff 	add.w	r3, r8, #4294967295
 8023faa:	42a3      	cmp	r3, r4
 8023fac:	f67f ab53 	bls.w	8023656 <__strftime+0x5e>
 8023fb0:	2325      	movs	r3, #37	; 0x25
 8023fb2:	e627      	b.n	8023c04 <__strftime+0x60c>
 8023fb4:	f1b8 0f00 	cmp.w	r8, #0
 8023fb8:	d002      	beq.n	8023fc0 <__strftime+0x9c8>
 8023fba:	2300      	movs	r3, #0
 8023fbc:	f809 3004 	strb.w	r3, [r9, r4]
 8023fc0:	4620      	mov	r0, r4
 8023fc2:	b011      	add	sp, #68	; 0x44
 8023fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fc8:	fffff894 	.word	0xfffff894
 8023fcc:	08042de5 	.word	0x08042de5
 8023fd0:	08042e02 	.word	0x08042e02
 8023fd4:	200004ec 	.word	0x200004ec

08023fd8 <strftime>:
 8023fd8:	b513      	push	{r0, r1, r4, lr}
 8023fda:	4c03      	ldr	r4, [pc, #12]	; (8023fe8 <strftime+0x10>)
 8023fdc:	9400      	str	r4, [sp, #0]
 8023fde:	f7ff fb0b 	bl	80235f8 <__strftime>
 8023fe2:	b002      	add	sp, #8
 8023fe4:	bd10      	pop	{r4, pc}
 8023fe6:	bf00      	nop
 8023fe8:	20000550 	.word	0x20000550

08023fec <strncmp>:
 8023fec:	b510      	push	{r4, lr}
 8023fee:	b16a      	cbz	r2, 802400c <strncmp+0x20>
 8023ff0:	3901      	subs	r1, #1
 8023ff2:	1884      	adds	r4, r0, r2
 8023ff4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8023ff8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8023ffc:	4293      	cmp	r3, r2
 8023ffe:	d103      	bne.n	8024008 <strncmp+0x1c>
 8024000:	42a0      	cmp	r0, r4
 8024002:	d001      	beq.n	8024008 <strncmp+0x1c>
 8024004:	2b00      	cmp	r3, #0
 8024006:	d1f5      	bne.n	8023ff4 <strncmp+0x8>
 8024008:	1a98      	subs	r0, r3, r2
 802400a:	bd10      	pop	{r4, pc}
 802400c:	4610      	mov	r0, r2
 802400e:	e7fc      	b.n	802400a <strncmp+0x1e>

08024010 <strncpy>:
 8024010:	b510      	push	{r4, lr}
 8024012:	3901      	subs	r1, #1
 8024014:	4603      	mov	r3, r0
 8024016:	b132      	cbz	r2, 8024026 <strncpy+0x16>
 8024018:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802401c:	f803 4b01 	strb.w	r4, [r3], #1
 8024020:	3a01      	subs	r2, #1
 8024022:	2c00      	cmp	r4, #0
 8024024:	d1f7      	bne.n	8024016 <strncpy+0x6>
 8024026:	441a      	add	r2, r3
 8024028:	2100      	movs	r1, #0
 802402a:	4293      	cmp	r3, r2
 802402c:	d100      	bne.n	8024030 <strncpy+0x20>
 802402e:	bd10      	pop	{r4, pc}
 8024030:	f803 1b01 	strb.w	r1, [r3], #1
 8024034:	e7f9      	b.n	802402a <strncpy+0x1a>
	...

08024038 <_strtol_l.isra.0>:
 8024038:	2b01      	cmp	r3, #1
 802403a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802403e:	d001      	beq.n	8024044 <_strtol_l.isra.0+0xc>
 8024040:	2b24      	cmp	r3, #36	; 0x24
 8024042:	d906      	bls.n	8024052 <_strtol_l.isra.0+0x1a>
 8024044:	f001 fab6 	bl	80255b4 <__errno>
 8024048:	2316      	movs	r3, #22
 802404a:	6003      	str	r3, [r0, #0]
 802404c:	2000      	movs	r0, #0
 802404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024052:	4f3a      	ldr	r7, [pc, #232]	; (802413c <_strtol_l.isra.0+0x104>)
 8024054:	468e      	mov	lr, r1
 8024056:	4676      	mov	r6, lr
 8024058:	f81e 4b01 	ldrb.w	r4, [lr], #1
 802405c:	5de5      	ldrb	r5, [r4, r7]
 802405e:	f015 0508 	ands.w	r5, r5, #8
 8024062:	d1f8      	bne.n	8024056 <_strtol_l.isra.0+0x1e>
 8024064:	2c2d      	cmp	r4, #45	; 0x2d
 8024066:	d134      	bne.n	80240d2 <_strtol_l.isra.0+0x9a>
 8024068:	f89e 4000 	ldrb.w	r4, [lr]
 802406c:	f04f 0801 	mov.w	r8, #1
 8024070:	f106 0e02 	add.w	lr, r6, #2
 8024074:	2b00      	cmp	r3, #0
 8024076:	d05c      	beq.n	8024132 <_strtol_l.isra.0+0xfa>
 8024078:	2b10      	cmp	r3, #16
 802407a:	d10c      	bne.n	8024096 <_strtol_l.isra.0+0x5e>
 802407c:	2c30      	cmp	r4, #48	; 0x30
 802407e:	d10a      	bne.n	8024096 <_strtol_l.isra.0+0x5e>
 8024080:	f89e 4000 	ldrb.w	r4, [lr]
 8024084:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8024088:	2c58      	cmp	r4, #88	; 0x58
 802408a:	d14d      	bne.n	8024128 <_strtol_l.isra.0+0xf0>
 802408c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8024090:	2310      	movs	r3, #16
 8024092:	f10e 0e02 	add.w	lr, lr, #2
 8024096:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 802409a:	f10c 3cff 	add.w	ip, ip, #4294967295
 802409e:	2600      	movs	r6, #0
 80240a0:	fbbc f9f3 	udiv	r9, ip, r3
 80240a4:	4635      	mov	r5, r6
 80240a6:	fb03 ca19 	mls	sl, r3, r9, ip
 80240aa:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80240ae:	2f09      	cmp	r7, #9
 80240b0:	d818      	bhi.n	80240e4 <_strtol_l.isra.0+0xac>
 80240b2:	463c      	mov	r4, r7
 80240b4:	42a3      	cmp	r3, r4
 80240b6:	dd24      	ble.n	8024102 <_strtol_l.isra.0+0xca>
 80240b8:	2e00      	cmp	r6, #0
 80240ba:	db1f      	blt.n	80240fc <_strtol_l.isra.0+0xc4>
 80240bc:	45a9      	cmp	r9, r5
 80240be:	d31d      	bcc.n	80240fc <_strtol_l.isra.0+0xc4>
 80240c0:	d101      	bne.n	80240c6 <_strtol_l.isra.0+0x8e>
 80240c2:	45a2      	cmp	sl, r4
 80240c4:	db1a      	blt.n	80240fc <_strtol_l.isra.0+0xc4>
 80240c6:	fb05 4503 	mla	r5, r5, r3, r4
 80240ca:	2601      	movs	r6, #1
 80240cc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80240d0:	e7eb      	b.n	80240aa <_strtol_l.isra.0+0x72>
 80240d2:	2c2b      	cmp	r4, #43	; 0x2b
 80240d4:	bf08      	it	eq
 80240d6:	f89e 4000 	ldrbeq.w	r4, [lr]
 80240da:	46a8      	mov	r8, r5
 80240dc:	bf08      	it	eq
 80240de:	f106 0e02 	addeq.w	lr, r6, #2
 80240e2:	e7c7      	b.n	8024074 <_strtol_l.isra.0+0x3c>
 80240e4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80240e8:	2f19      	cmp	r7, #25
 80240ea:	d801      	bhi.n	80240f0 <_strtol_l.isra.0+0xb8>
 80240ec:	3c37      	subs	r4, #55	; 0x37
 80240ee:	e7e1      	b.n	80240b4 <_strtol_l.isra.0+0x7c>
 80240f0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80240f4:	2f19      	cmp	r7, #25
 80240f6:	d804      	bhi.n	8024102 <_strtol_l.isra.0+0xca>
 80240f8:	3c57      	subs	r4, #87	; 0x57
 80240fa:	e7db      	b.n	80240b4 <_strtol_l.isra.0+0x7c>
 80240fc:	f04f 36ff 	mov.w	r6, #4294967295
 8024100:	e7e4      	b.n	80240cc <_strtol_l.isra.0+0x94>
 8024102:	2e00      	cmp	r6, #0
 8024104:	da05      	bge.n	8024112 <_strtol_l.isra.0+0xda>
 8024106:	2322      	movs	r3, #34	; 0x22
 8024108:	6003      	str	r3, [r0, #0]
 802410a:	4665      	mov	r5, ip
 802410c:	b942      	cbnz	r2, 8024120 <_strtol_l.isra.0+0xe8>
 802410e:	4628      	mov	r0, r5
 8024110:	e79d      	b.n	802404e <_strtol_l.isra.0+0x16>
 8024112:	f1b8 0f00 	cmp.w	r8, #0
 8024116:	d000      	beq.n	802411a <_strtol_l.isra.0+0xe2>
 8024118:	426d      	negs	r5, r5
 802411a:	2a00      	cmp	r2, #0
 802411c:	d0f7      	beq.n	802410e <_strtol_l.isra.0+0xd6>
 802411e:	b10e      	cbz	r6, 8024124 <_strtol_l.isra.0+0xec>
 8024120:	f10e 31ff 	add.w	r1, lr, #4294967295
 8024124:	6011      	str	r1, [r2, #0]
 8024126:	e7f2      	b.n	802410e <_strtol_l.isra.0+0xd6>
 8024128:	2430      	movs	r4, #48	; 0x30
 802412a:	2b00      	cmp	r3, #0
 802412c:	d1b3      	bne.n	8024096 <_strtol_l.isra.0+0x5e>
 802412e:	2308      	movs	r3, #8
 8024130:	e7b1      	b.n	8024096 <_strtol_l.isra.0+0x5e>
 8024132:	2c30      	cmp	r4, #48	; 0x30
 8024134:	d0a4      	beq.n	8024080 <_strtol_l.isra.0+0x48>
 8024136:	230a      	movs	r3, #10
 8024138:	e7ad      	b.n	8024096 <_strtol_l.isra.0+0x5e>
 802413a:	bf00      	nop
 802413c:	08042ae5 	.word	0x08042ae5

08024140 <_strtol_r>:
 8024140:	f7ff bf7a 	b.w	8024038 <_strtol_l.isra.0>

08024144 <strtol>:
 8024144:	4613      	mov	r3, r2
 8024146:	460a      	mov	r2, r1
 8024148:	4601      	mov	r1, r0
 802414a:	4802      	ldr	r0, [pc, #8]	; (8024154 <strtol+0x10>)
 802414c:	6800      	ldr	r0, [r0, #0]
 802414e:	f7ff bf73 	b.w	8024038 <_strtol_l.isra.0>
 8024152:	bf00      	nop
 8024154:	20000488 	.word	0x20000488

08024158 <_strtoul_l.isra.0>:
 8024158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802415c:	4e3b      	ldr	r6, [pc, #236]	; (802424c <_strtoul_l.isra.0+0xf4>)
 802415e:	4686      	mov	lr, r0
 8024160:	468c      	mov	ip, r1
 8024162:	4660      	mov	r0, ip
 8024164:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8024168:	5da5      	ldrb	r5, [r4, r6]
 802416a:	f015 0508 	ands.w	r5, r5, #8
 802416e:	d1f8      	bne.n	8024162 <_strtoul_l.isra.0+0xa>
 8024170:	2c2d      	cmp	r4, #45	; 0x2d
 8024172:	d134      	bne.n	80241de <_strtoul_l.isra.0+0x86>
 8024174:	f89c 4000 	ldrb.w	r4, [ip]
 8024178:	f04f 0801 	mov.w	r8, #1
 802417c:	f100 0c02 	add.w	ip, r0, #2
 8024180:	2b00      	cmp	r3, #0
 8024182:	d05e      	beq.n	8024242 <_strtoul_l.isra.0+0xea>
 8024184:	2b10      	cmp	r3, #16
 8024186:	d10c      	bne.n	80241a2 <_strtoul_l.isra.0+0x4a>
 8024188:	2c30      	cmp	r4, #48	; 0x30
 802418a:	d10a      	bne.n	80241a2 <_strtoul_l.isra.0+0x4a>
 802418c:	f89c 0000 	ldrb.w	r0, [ip]
 8024190:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8024194:	2858      	cmp	r0, #88	; 0x58
 8024196:	d14f      	bne.n	8024238 <_strtoul_l.isra.0+0xe0>
 8024198:	f89c 4001 	ldrb.w	r4, [ip, #1]
 802419c:	2310      	movs	r3, #16
 802419e:	f10c 0c02 	add.w	ip, ip, #2
 80241a2:	f04f 37ff 	mov.w	r7, #4294967295
 80241a6:	2500      	movs	r5, #0
 80241a8:	fbb7 f7f3 	udiv	r7, r7, r3
 80241ac:	fb03 f907 	mul.w	r9, r3, r7
 80241b0:	ea6f 0909 	mvn.w	r9, r9
 80241b4:	4628      	mov	r0, r5
 80241b6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 80241ba:	2e09      	cmp	r6, #9
 80241bc:	d818      	bhi.n	80241f0 <_strtoul_l.isra.0+0x98>
 80241be:	4634      	mov	r4, r6
 80241c0:	42a3      	cmp	r3, r4
 80241c2:	dd24      	ble.n	802420e <_strtoul_l.isra.0+0xb6>
 80241c4:	2d00      	cmp	r5, #0
 80241c6:	db1f      	blt.n	8024208 <_strtoul_l.isra.0+0xb0>
 80241c8:	4287      	cmp	r7, r0
 80241ca:	d31d      	bcc.n	8024208 <_strtoul_l.isra.0+0xb0>
 80241cc:	d101      	bne.n	80241d2 <_strtoul_l.isra.0+0x7a>
 80241ce:	45a1      	cmp	r9, r4
 80241d0:	db1a      	blt.n	8024208 <_strtoul_l.isra.0+0xb0>
 80241d2:	fb00 4003 	mla	r0, r0, r3, r4
 80241d6:	2501      	movs	r5, #1
 80241d8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80241dc:	e7eb      	b.n	80241b6 <_strtoul_l.isra.0+0x5e>
 80241de:	2c2b      	cmp	r4, #43	; 0x2b
 80241e0:	bf08      	it	eq
 80241e2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80241e6:	46a8      	mov	r8, r5
 80241e8:	bf08      	it	eq
 80241ea:	f100 0c02 	addeq.w	ip, r0, #2
 80241ee:	e7c7      	b.n	8024180 <_strtoul_l.isra.0+0x28>
 80241f0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80241f4:	2e19      	cmp	r6, #25
 80241f6:	d801      	bhi.n	80241fc <_strtoul_l.isra.0+0xa4>
 80241f8:	3c37      	subs	r4, #55	; 0x37
 80241fa:	e7e1      	b.n	80241c0 <_strtoul_l.isra.0+0x68>
 80241fc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8024200:	2e19      	cmp	r6, #25
 8024202:	d804      	bhi.n	802420e <_strtoul_l.isra.0+0xb6>
 8024204:	3c57      	subs	r4, #87	; 0x57
 8024206:	e7db      	b.n	80241c0 <_strtoul_l.isra.0+0x68>
 8024208:	f04f 35ff 	mov.w	r5, #4294967295
 802420c:	e7e4      	b.n	80241d8 <_strtoul_l.isra.0+0x80>
 802420e:	2d00      	cmp	r5, #0
 8024210:	da07      	bge.n	8024222 <_strtoul_l.isra.0+0xca>
 8024212:	2322      	movs	r3, #34	; 0x22
 8024214:	f8ce 3000 	str.w	r3, [lr]
 8024218:	f04f 30ff 	mov.w	r0, #4294967295
 802421c:	b942      	cbnz	r2, 8024230 <_strtoul_l.isra.0+0xd8>
 802421e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024222:	f1b8 0f00 	cmp.w	r8, #0
 8024226:	d000      	beq.n	802422a <_strtoul_l.isra.0+0xd2>
 8024228:	4240      	negs	r0, r0
 802422a:	2a00      	cmp	r2, #0
 802422c:	d0f7      	beq.n	802421e <_strtoul_l.isra.0+0xc6>
 802422e:	b10d      	cbz	r5, 8024234 <_strtoul_l.isra.0+0xdc>
 8024230:	f10c 31ff 	add.w	r1, ip, #4294967295
 8024234:	6011      	str	r1, [r2, #0]
 8024236:	e7f2      	b.n	802421e <_strtoul_l.isra.0+0xc6>
 8024238:	2430      	movs	r4, #48	; 0x30
 802423a:	2b00      	cmp	r3, #0
 802423c:	d1b1      	bne.n	80241a2 <_strtoul_l.isra.0+0x4a>
 802423e:	2308      	movs	r3, #8
 8024240:	e7af      	b.n	80241a2 <_strtoul_l.isra.0+0x4a>
 8024242:	2c30      	cmp	r4, #48	; 0x30
 8024244:	d0a2      	beq.n	802418c <_strtoul_l.isra.0+0x34>
 8024246:	230a      	movs	r3, #10
 8024248:	e7ab      	b.n	80241a2 <_strtoul_l.isra.0+0x4a>
 802424a:	bf00      	nop
 802424c:	08042ae5 	.word	0x08042ae5

08024250 <_strtoul_r>:
 8024250:	f7ff bf82 	b.w	8024158 <_strtoul_l.isra.0>

08024254 <strtoul>:
 8024254:	4613      	mov	r3, r2
 8024256:	460a      	mov	r2, r1
 8024258:	4601      	mov	r1, r0
 802425a:	4802      	ldr	r0, [pc, #8]	; (8024264 <strtoul+0x10>)
 802425c:	6800      	ldr	r0, [r0, #0]
 802425e:	f7ff bf7b 	b.w	8024158 <_strtoul_l.isra.0>
 8024262:	bf00      	nop
 8024264:	20000488 	.word	0x20000488

08024268 <__tzcalc_limits>:
 8024268:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802426c:	4680      	mov	r8, r0
 802426e:	f001 fbb3 	bl	80259d8 <__gettzinfo>
 8024272:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8024276:	4598      	cmp	r8, r3
 8024278:	f340 8098 	ble.w	80243ac <__tzcalc_limits+0x144>
 802427c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8024280:	4443      	add	r3, r8
 8024282:	109b      	asrs	r3, r3, #2
 8024284:	f240 126d 	movw	r2, #365	; 0x16d
 8024288:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
 802428c:	fb02 3505 	mla	r5, r2, r5, r3
 8024290:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8024294:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
 8024298:	fb93 f3f2 	sdiv	r3, r3, r2
 802429c:	441d      	add	r5, r3
 802429e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80242a2:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80242a6:	fb98 f7f3 	sdiv	r7, r8, r3
 80242aa:	fb03 8717 	mls	r7, r3, r7, r8
 80242ae:	4442      	add	r2, r8
 80242b0:	fab7 fc87 	clz	ip, r7
 80242b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80242b8:	f008 0303 	and.w	r3, r8, #3
 80242bc:	4415      	add	r5, r2
 80242be:	2264      	movs	r2, #100	; 0x64
 80242c0:	f8c0 8004 	str.w	r8, [r0, #4]
 80242c4:	fb98 f6f2 	sdiv	r6, r8, r2
 80242c8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80242cc:	fb02 8616 	mls	r6, r2, r6, r8
 80242d0:	4604      	mov	r4, r0
 80242d2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80242d6:	9300      	str	r3, [sp, #0]
 80242d8:	f04f 0e07 	mov.w	lr, #7
 80242dc:	7a22      	ldrb	r2, [r4, #8]
 80242de:	6963      	ldr	r3, [r4, #20]
 80242e0:	2a4a      	cmp	r2, #74	; 0x4a
 80242e2:	d128      	bne.n	8024336 <__tzcalc_limits+0xce>
 80242e4:	9900      	ldr	r1, [sp, #0]
 80242e6:	18ea      	adds	r2, r5, r3
 80242e8:	b901      	cbnz	r1, 80242ec <__tzcalc_limits+0x84>
 80242ea:	b906      	cbnz	r6, 80242ee <__tzcalc_limits+0x86>
 80242ec:	bb0f      	cbnz	r7, 8024332 <__tzcalc_limits+0xca>
 80242ee:	2b3b      	cmp	r3, #59	; 0x3b
 80242f0:	bfd4      	ite	le
 80242f2:	2300      	movle	r3, #0
 80242f4:	2301      	movgt	r3, #1
 80242f6:	4413      	add	r3, r2
 80242f8:	1e5a      	subs	r2, r3, #1
 80242fa:	69a3      	ldr	r3, [r4, #24]
 80242fc:	492c      	ldr	r1, [pc, #176]	; (80243b0 <__tzcalc_limits+0x148>)
 80242fe:	fb01 3202 	mla	r2, r1, r2, r3
 8024302:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8024304:	4413      	add	r3, r2
 8024306:	461a      	mov	r2, r3
 8024308:	17db      	asrs	r3, r3, #31
 802430a:	e9c4 2308 	strd	r2, r3, [r4, #32]
 802430e:	3428      	adds	r4, #40	; 0x28
 8024310:	45a3      	cmp	fp, r4
 8024312:	d1e3      	bne.n	80242dc <__tzcalc_limits+0x74>
 8024314:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
 8024318:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
 802431c:	4294      	cmp	r4, r2
 802431e:	eb75 0303 	sbcs.w	r3, r5, r3
 8024322:	bfb4      	ite	lt
 8024324:	2301      	movlt	r3, #1
 8024326:	2300      	movge	r3, #0
 8024328:	6003      	str	r3, [r0, #0]
 802432a:	2001      	movs	r0, #1
 802432c:	b003      	add	sp, #12
 802432e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024332:	2300      	movs	r3, #0
 8024334:	e7df      	b.n	80242f6 <__tzcalc_limits+0x8e>
 8024336:	2a44      	cmp	r2, #68	; 0x44
 8024338:	d101      	bne.n	802433e <__tzcalc_limits+0xd6>
 802433a:	18ea      	adds	r2, r5, r3
 802433c:	e7dd      	b.n	80242fa <__tzcalc_limits+0x92>
 802433e:	9a00      	ldr	r2, [sp, #0]
 8024340:	bb72      	cbnz	r2, 80243a0 <__tzcalc_limits+0x138>
 8024342:	2e00      	cmp	r6, #0
 8024344:	bf0c      	ite	eq
 8024346:	46e0      	moveq	r8, ip
 8024348:	f04f 0801 	movne.w	r8, #1
 802434c:	4919      	ldr	r1, [pc, #100]	; (80243b4 <__tzcalc_limits+0x14c>)
 802434e:	68e2      	ldr	r2, [r4, #12]
 8024350:	9201      	str	r2, [sp, #4]
 8024352:	f04f 0a30 	mov.w	sl, #48	; 0x30
 8024356:	fb0a 1808 	mla	r8, sl, r8, r1
 802435a:	462a      	mov	r2, r5
 802435c:	f04f 0900 	mov.w	r9, #0
 8024360:	f1a8 0804 	sub.w	r8, r8, #4
 8024364:	9901      	ldr	r1, [sp, #4]
 8024366:	f109 0901 	add.w	r9, r9, #1
 802436a:	4549      	cmp	r1, r9
 802436c:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
 8024370:	dc18      	bgt.n	80243a4 <__tzcalc_limits+0x13c>
 8024372:	f102 0804 	add.w	r8, r2, #4
 8024376:	fb98 f9fe 	sdiv	r9, r8, lr
 802437a:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
 802437e:	eba8 0909 	sub.w	r9, r8, r9
 8024382:	ebb3 0909 	subs.w	r9, r3, r9
 8024386:	6923      	ldr	r3, [r4, #16]
 8024388:	f103 33ff 	add.w	r3, r3, #4294967295
 802438c:	bf48      	it	mi
 802438e:	f109 0907 	addmi.w	r9, r9, #7
 8024392:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8024396:	444b      	add	r3, r9
 8024398:	4553      	cmp	r3, sl
 802439a:	da05      	bge.n	80243a8 <__tzcalc_limits+0x140>
 802439c:	441a      	add	r2, r3
 802439e:	e7ac      	b.n	80242fa <__tzcalc_limits+0x92>
 80243a0:	46e0      	mov	r8, ip
 80243a2:	e7d3      	b.n	802434c <__tzcalc_limits+0xe4>
 80243a4:	4452      	add	r2, sl
 80243a6:	e7dd      	b.n	8024364 <__tzcalc_limits+0xfc>
 80243a8:	3b07      	subs	r3, #7
 80243aa:	e7f5      	b.n	8024398 <__tzcalc_limits+0x130>
 80243ac:	2000      	movs	r0, #0
 80243ae:	e7bd      	b.n	802432c <__tzcalc_limits+0xc4>
 80243b0:	00015180 	.word	0x00015180
 80243b4:	08042cc4 	.word	0x08042cc4

080243b8 <__tz_lock>:
 80243b8:	4801      	ldr	r0, [pc, #4]	; (80243c0 <__tz_lock+0x8>)
 80243ba:	f001 bbca 	b.w	8025b52 <__retarget_lock_acquire>
 80243be:	bf00      	nop
 80243c0:	2002fdcb 	.word	0x2002fdcb

080243c4 <__tz_unlock>:
 80243c4:	4801      	ldr	r0, [pc, #4]	; (80243cc <__tz_unlock+0x8>)
 80243c6:	f001 bbc6 	b.w	8025b56 <__retarget_lock_release>
 80243ca:	bf00      	nop
 80243cc:	2002fdcb 	.word	0x2002fdcb

080243d0 <_tzset_unlocked>:
 80243d0:	4b01      	ldr	r3, [pc, #4]	; (80243d8 <_tzset_unlocked+0x8>)
 80243d2:	6818      	ldr	r0, [r3, #0]
 80243d4:	f000 b802 	b.w	80243dc <_tzset_unlocked_r>
 80243d8:	20000488 	.word	0x20000488

080243dc <_tzset_unlocked_r>:
 80243dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243e0:	b08d      	sub	sp, #52	; 0x34
 80243e2:	4607      	mov	r7, r0
 80243e4:	f001 faf8 	bl	80259d8 <__gettzinfo>
 80243e8:	49ae      	ldr	r1, [pc, #696]	; (80246a4 <_tzset_unlocked_r+0x2c8>)
 80243ea:	4eaf      	ldr	r6, [pc, #700]	; (80246a8 <_tzset_unlocked_r+0x2cc>)
 80243ec:	4605      	mov	r5, r0
 80243ee:	4638      	mov	r0, r7
 80243f0:	f001 faea 	bl	80259c8 <_getenv_r>
 80243f4:	4604      	mov	r4, r0
 80243f6:	b970      	cbnz	r0, 8024416 <_tzset_unlocked_r+0x3a>
 80243f8:	4bac      	ldr	r3, [pc, #688]	; (80246ac <_tzset_unlocked_r+0x2d0>)
 80243fa:	4aad      	ldr	r2, [pc, #692]	; (80246b0 <_tzset_unlocked_r+0x2d4>)
 80243fc:	6018      	str	r0, [r3, #0]
 80243fe:	4bad      	ldr	r3, [pc, #692]	; (80246b4 <_tzset_unlocked_r+0x2d8>)
 8024400:	6018      	str	r0, [r3, #0]
 8024402:	4bad      	ldr	r3, [pc, #692]	; (80246b8 <_tzset_unlocked_r+0x2dc>)
 8024404:	6830      	ldr	r0, [r6, #0]
 8024406:	e9c3 2200 	strd	r2, r2, [r3]
 802440a:	f7fd febb 	bl	8022184 <free>
 802440e:	6034      	str	r4, [r6, #0]
 8024410:	b00d      	add	sp, #52	; 0x34
 8024412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024416:	6831      	ldr	r1, [r6, #0]
 8024418:	2900      	cmp	r1, #0
 802441a:	d15f      	bne.n	80244dc <_tzset_unlocked_r+0x100>
 802441c:	6830      	ldr	r0, [r6, #0]
 802441e:	f7fd feb1 	bl	8022184 <free>
 8024422:	4620      	mov	r0, r4
 8024424:	f7db ff16 	bl	8000254 <strlen>
 8024428:	1c41      	adds	r1, r0, #1
 802442a:	4638      	mov	r0, r7
 802442c:	f7fe f9be 	bl	80227ac <_malloc_r>
 8024430:	6030      	str	r0, [r6, #0]
 8024432:	2800      	cmp	r0, #0
 8024434:	d157      	bne.n	80244e6 <_tzset_unlocked_r+0x10a>
 8024436:	7823      	ldrb	r3, [r4, #0]
 8024438:	4aa0      	ldr	r2, [pc, #640]	; (80246bc <_tzset_unlocked_r+0x2e0>)
 802443a:	49a1      	ldr	r1, [pc, #644]	; (80246c0 <_tzset_unlocked_r+0x2e4>)
 802443c:	2b3a      	cmp	r3, #58	; 0x3a
 802443e:	bf08      	it	eq
 8024440:	3401      	addeq	r4, #1
 8024442:	ae0a      	add	r6, sp, #40	; 0x28
 8024444:	4633      	mov	r3, r6
 8024446:	4620      	mov	r0, r4
 8024448:	f7fe ffe4 	bl	8023414 <siscanf>
 802444c:	2800      	cmp	r0, #0
 802444e:	dddf      	ble.n	8024410 <_tzset_unlocked_r+0x34>
 8024450:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024452:	18e7      	adds	r7, r4, r3
 8024454:	5ce3      	ldrb	r3, [r4, r3]
 8024456:	2b2d      	cmp	r3, #45	; 0x2d
 8024458:	d149      	bne.n	80244ee <_tzset_unlocked_r+0x112>
 802445a:	3701      	adds	r7, #1
 802445c:	f04f 34ff 	mov.w	r4, #4294967295
 8024460:	f10d 0a20 	add.w	sl, sp, #32
 8024464:	f10d 0b1e 	add.w	fp, sp, #30
 8024468:	f04f 0800 	mov.w	r8, #0
 802446c:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8024470:	4994      	ldr	r1, [pc, #592]	; (80246c4 <_tzset_unlocked_r+0x2e8>)
 8024472:	9603      	str	r6, [sp, #12]
 8024474:	f8cd b000 	str.w	fp, [sp]
 8024478:	4633      	mov	r3, r6
 802447a:	aa07      	add	r2, sp, #28
 802447c:	4638      	mov	r0, r7
 802447e:	f8ad 801e 	strh.w	r8, [sp, #30]
 8024482:	f8ad 8020 	strh.w	r8, [sp, #32]
 8024486:	f7fe ffc5 	bl	8023414 <siscanf>
 802448a:	4540      	cmp	r0, r8
 802448c:	ddc0      	ble.n	8024410 <_tzset_unlocked_r+0x34>
 802448e:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8024492:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024496:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80246d0 <_tzset_unlocked_r+0x2f4>
 802449a:	213c      	movs	r1, #60	; 0x3c
 802449c:	fb01 2203 	mla	r2, r1, r3, r2
 80244a0:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80244a4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80244a8:	fb01 2303 	mla	r3, r1, r3, r2
 80244ac:	435c      	muls	r4, r3
 80244ae:	62ac      	str	r4, [r5, #40]	; 0x28
 80244b0:	4c81      	ldr	r4, [pc, #516]	; (80246b8 <_tzset_unlocked_r+0x2dc>)
 80244b2:	4b82      	ldr	r3, [pc, #520]	; (80246bc <_tzset_unlocked_r+0x2e0>)
 80244b4:	6023      	str	r3, [r4, #0]
 80244b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244b8:	4981      	ldr	r1, [pc, #516]	; (80246c0 <_tzset_unlocked_r+0x2e4>)
 80244ba:	441f      	add	r7, r3
 80244bc:	464a      	mov	r2, r9
 80244be:	4633      	mov	r3, r6
 80244c0:	4638      	mov	r0, r7
 80244c2:	f7fe ffa7 	bl	8023414 <siscanf>
 80244c6:	4540      	cmp	r0, r8
 80244c8:	dc16      	bgt.n	80244f8 <_tzset_unlocked_r+0x11c>
 80244ca:	6823      	ldr	r3, [r4, #0]
 80244cc:	6063      	str	r3, [r4, #4]
 80244ce:	4b77      	ldr	r3, [pc, #476]	; (80246ac <_tzset_unlocked_r+0x2d0>)
 80244d0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80244d2:	601a      	str	r2, [r3, #0]
 80244d4:	4b77      	ldr	r3, [pc, #476]	; (80246b4 <_tzset_unlocked_r+0x2d8>)
 80244d6:	f8c3 8000 	str.w	r8, [r3]
 80244da:	e799      	b.n	8024410 <_tzset_unlocked_r+0x34>
 80244dc:	f7db feb0 	bl	8000240 <strcmp>
 80244e0:	2800      	cmp	r0, #0
 80244e2:	d19b      	bne.n	802441c <_tzset_unlocked_r+0x40>
 80244e4:	e794      	b.n	8024410 <_tzset_unlocked_r+0x34>
 80244e6:	4621      	mov	r1, r4
 80244e8:	f7ff f81b 	bl	8023522 <strcpy>
 80244ec:	e7a3      	b.n	8024436 <_tzset_unlocked_r+0x5a>
 80244ee:	2b2b      	cmp	r3, #43	; 0x2b
 80244f0:	bf08      	it	eq
 80244f2:	3701      	addeq	r7, #1
 80244f4:	2401      	movs	r4, #1
 80244f6:	e7b3      	b.n	8024460 <_tzset_unlocked_r+0x84>
 80244f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80244fa:	f8c4 9004 	str.w	r9, [r4, #4]
 80244fe:	18fc      	adds	r4, r7, r3
 8024500:	5cfb      	ldrb	r3, [r7, r3]
 8024502:	2b2d      	cmp	r3, #45	; 0x2d
 8024504:	f040 808b 	bne.w	802461e <_tzset_unlocked_r+0x242>
 8024508:	3401      	adds	r4, #1
 802450a:	f04f 37ff 	mov.w	r7, #4294967295
 802450e:	2300      	movs	r3, #0
 8024510:	f8ad 301c 	strh.w	r3, [sp, #28]
 8024514:	f8ad 301e 	strh.w	r3, [sp, #30]
 8024518:	f8ad 3020 	strh.w	r3, [sp, #32]
 802451c:	930a      	str	r3, [sp, #40]	; 0x28
 802451e:	e9cd a602 	strd	sl, r6, [sp, #8]
 8024522:	e9cd b600 	strd	fp, r6, [sp]
 8024526:	4967      	ldr	r1, [pc, #412]	; (80246c4 <_tzset_unlocked_r+0x2e8>)
 8024528:	4633      	mov	r3, r6
 802452a:	aa07      	add	r2, sp, #28
 802452c:	4620      	mov	r0, r4
 802452e:	f7fe ff71 	bl	8023414 <siscanf>
 8024532:	2800      	cmp	r0, #0
 8024534:	dc78      	bgt.n	8024628 <_tzset_unlocked_r+0x24c>
 8024536:	6aaf      	ldr	r7, [r5, #40]	; 0x28
 8024538:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
 802453c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802453e:	652f      	str	r7, [r5, #80]	; 0x50
 8024540:	441c      	add	r4, r3
 8024542:	462f      	mov	r7, r5
 8024544:	f04f 0900 	mov.w	r9, #0
 8024548:	7823      	ldrb	r3, [r4, #0]
 802454a:	2b2c      	cmp	r3, #44	; 0x2c
 802454c:	bf08      	it	eq
 802454e:	3401      	addeq	r4, #1
 8024550:	f894 8000 	ldrb.w	r8, [r4]
 8024554:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8024558:	d178      	bne.n	802464c <_tzset_unlocked_r+0x270>
 802455a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802455e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8024562:	ab09      	add	r3, sp, #36	; 0x24
 8024564:	9300      	str	r3, [sp, #0]
 8024566:	4958      	ldr	r1, [pc, #352]	; (80246c8 <_tzset_unlocked_r+0x2ec>)
 8024568:	9603      	str	r6, [sp, #12]
 802456a:	4633      	mov	r3, r6
 802456c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8024570:	4620      	mov	r0, r4
 8024572:	f7fe ff4f 	bl	8023414 <siscanf>
 8024576:	2803      	cmp	r0, #3
 8024578:	f47f af4a 	bne.w	8024410 <_tzset_unlocked_r+0x34>
 802457c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8024580:	1e4b      	subs	r3, r1, #1
 8024582:	2b0b      	cmp	r3, #11
 8024584:	f63f af44 	bhi.w	8024410 <_tzset_unlocked_r+0x34>
 8024588:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802458c:	1e53      	subs	r3, r2, #1
 802458e:	2b04      	cmp	r3, #4
 8024590:	f63f af3e 	bhi.w	8024410 <_tzset_unlocked_r+0x34>
 8024594:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8024598:	2b06      	cmp	r3, #6
 802459a:	f63f af39 	bhi.w	8024410 <_tzset_unlocked_r+0x34>
 802459e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 80245a2:	f887 8008 	strb.w	r8, [r7, #8]
 80245a6:	617b      	str	r3, [r7, #20]
 80245a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80245aa:	eb04 0803 	add.w	r8, r4, r3
 80245ae:	2302      	movs	r3, #2
 80245b0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80245b4:	2300      	movs	r3, #0
 80245b6:	f8ad 301e 	strh.w	r3, [sp, #30]
 80245ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 80245be:	930a      	str	r3, [sp, #40]	; 0x28
 80245c0:	f898 3000 	ldrb.w	r3, [r8]
 80245c4:	2b2f      	cmp	r3, #47	; 0x2f
 80245c6:	d109      	bne.n	80245dc <_tzset_unlocked_r+0x200>
 80245c8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80245cc:	e9cd b600 	strd	fp, r6, [sp]
 80245d0:	493e      	ldr	r1, [pc, #248]	; (80246cc <_tzset_unlocked_r+0x2f0>)
 80245d2:	4633      	mov	r3, r6
 80245d4:	aa07      	add	r2, sp, #28
 80245d6:	4640      	mov	r0, r8
 80245d8:	f7fe ff1c 	bl	8023414 <siscanf>
 80245dc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 80245e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80245e4:	213c      	movs	r1, #60	; 0x3c
 80245e6:	fb01 2203 	mla	r2, r1, r3, r2
 80245ea:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 80245ee:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80245f2:	fb01 2303 	mla	r3, r1, r3, r2
 80245f6:	61bb      	str	r3, [r7, #24]
 80245f8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80245fa:	3728      	adds	r7, #40	; 0x28
 80245fc:	4444      	add	r4, r8
 80245fe:	f1b9 0f00 	cmp.w	r9, #0
 8024602:	d020      	beq.n	8024646 <_tzset_unlocked_r+0x26a>
 8024604:	6868      	ldr	r0, [r5, #4]
 8024606:	f7ff fe2f 	bl	8024268 <__tzcalc_limits>
 802460a:	4b28      	ldr	r3, [pc, #160]	; (80246ac <_tzset_unlocked_r+0x2d0>)
 802460c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 802460e:	601a      	str	r2, [r3, #0]
 8024610:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8024612:	1a9b      	subs	r3, r3, r2
 8024614:	4a27      	ldr	r2, [pc, #156]	; (80246b4 <_tzset_unlocked_r+0x2d8>)
 8024616:	bf18      	it	ne
 8024618:	2301      	movne	r3, #1
 802461a:	6013      	str	r3, [r2, #0]
 802461c:	e6f8      	b.n	8024410 <_tzset_unlocked_r+0x34>
 802461e:	2b2b      	cmp	r3, #43	; 0x2b
 8024620:	bf08      	it	eq
 8024622:	3401      	addeq	r4, #1
 8024624:	2701      	movs	r7, #1
 8024626:	e772      	b.n	802450e <_tzset_unlocked_r+0x132>
 8024628:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 802462c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8024630:	213c      	movs	r1, #60	; 0x3c
 8024632:	fb01 2203 	mla	r2, r1, r3, r2
 8024636:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 802463a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802463e:	fb01 2303 	mla	r3, r1, r3, r2
 8024642:	435f      	muls	r7, r3
 8024644:	e77a      	b.n	802453c <_tzset_unlocked_r+0x160>
 8024646:	f04f 0901 	mov.w	r9, #1
 802464a:	e77d      	b.n	8024548 <_tzset_unlocked_r+0x16c>
 802464c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8024650:	bf06      	itte	eq
 8024652:	3401      	addeq	r4, #1
 8024654:	4643      	moveq	r3, r8
 8024656:	2344      	movne	r3, #68	; 0x44
 8024658:	220a      	movs	r2, #10
 802465a:	a90b      	add	r1, sp, #44	; 0x2c
 802465c:	4620      	mov	r0, r4
 802465e:	9305      	str	r3, [sp, #20]
 8024660:	f7ff fdf8 	bl	8024254 <strtoul>
 8024664:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8024668:	9b05      	ldr	r3, [sp, #20]
 802466a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802466e:	45a0      	cmp	r8, r4
 8024670:	d114      	bne.n	802469c <_tzset_unlocked_r+0x2c0>
 8024672:	234d      	movs	r3, #77	; 0x4d
 8024674:	f1b9 0f00 	cmp.w	r9, #0
 8024678:	d107      	bne.n	802468a <_tzset_unlocked_r+0x2ae>
 802467a:	722b      	strb	r3, [r5, #8]
 802467c:	2103      	movs	r1, #3
 802467e:	2302      	movs	r3, #2
 8024680:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8024684:	f8c5 9014 	str.w	r9, [r5, #20]
 8024688:	e791      	b.n	80245ae <_tzset_unlocked_r+0x1d2>
 802468a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802468e:	220b      	movs	r2, #11
 8024690:	2301      	movs	r3, #1
 8024692:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8024696:	2300      	movs	r3, #0
 8024698:	63eb      	str	r3, [r5, #60]	; 0x3c
 802469a:	e788      	b.n	80245ae <_tzset_unlocked_r+0x1d2>
 802469c:	b280      	uxth	r0, r0
 802469e:	723b      	strb	r3, [r7, #8]
 80246a0:	6178      	str	r0, [r7, #20]
 80246a2:	e784      	b.n	80245ae <_tzset_unlocked_r+0x1d2>
 80246a4:	08043038 	.word	0x08043038
 80246a8:	2001adb4 	.word	0x2001adb4
 80246ac:	2001adbc 	.word	0x2001adbc
 80246b0:	0804303b 	.word	0x0804303b
 80246b4:	2001adb8 	.word	0x2001adb8
 80246b8:	200004ec 	.word	0x200004ec
 80246bc:	2001ada7 	.word	0x2001ada7
 80246c0:	0804303f 	.word	0x0804303f
 80246c4:	08043062 	.word	0x08043062
 80246c8:	0804304e 	.word	0x0804304e
 80246cc:	08043061 	.word	0x08043061
 80246d0:	2001ad9c 	.word	0x2001ad9c

080246d4 <__swbuf_r>:
 80246d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80246d6:	460e      	mov	r6, r1
 80246d8:	4614      	mov	r4, r2
 80246da:	4605      	mov	r5, r0
 80246dc:	b118      	cbz	r0, 80246e6 <__swbuf_r+0x12>
 80246de:	6983      	ldr	r3, [r0, #24]
 80246e0:	b90b      	cbnz	r3, 80246e6 <__swbuf_r+0x12>
 80246e2:	f001 f887 	bl	80257f4 <__sinit>
 80246e6:	4b21      	ldr	r3, [pc, #132]	; (802476c <__swbuf_r+0x98>)
 80246e8:	429c      	cmp	r4, r3
 80246ea:	d12b      	bne.n	8024744 <__swbuf_r+0x70>
 80246ec:	686c      	ldr	r4, [r5, #4]
 80246ee:	69a3      	ldr	r3, [r4, #24]
 80246f0:	60a3      	str	r3, [r4, #8]
 80246f2:	89a3      	ldrh	r3, [r4, #12]
 80246f4:	071a      	lsls	r2, r3, #28
 80246f6:	d52f      	bpl.n	8024758 <__swbuf_r+0x84>
 80246f8:	6923      	ldr	r3, [r4, #16]
 80246fa:	b36b      	cbz	r3, 8024758 <__swbuf_r+0x84>
 80246fc:	6923      	ldr	r3, [r4, #16]
 80246fe:	6820      	ldr	r0, [r4, #0]
 8024700:	1ac0      	subs	r0, r0, r3
 8024702:	6963      	ldr	r3, [r4, #20]
 8024704:	b2f6      	uxtb	r6, r6
 8024706:	4283      	cmp	r3, r0
 8024708:	4637      	mov	r7, r6
 802470a:	dc04      	bgt.n	8024716 <__swbuf_r+0x42>
 802470c:	4621      	mov	r1, r4
 802470e:	4628      	mov	r0, r5
 8024710:	f000 ffdc 	bl	80256cc <_fflush_r>
 8024714:	bb30      	cbnz	r0, 8024764 <__swbuf_r+0x90>
 8024716:	68a3      	ldr	r3, [r4, #8]
 8024718:	3b01      	subs	r3, #1
 802471a:	60a3      	str	r3, [r4, #8]
 802471c:	6823      	ldr	r3, [r4, #0]
 802471e:	1c5a      	adds	r2, r3, #1
 8024720:	6022      	str	r2, [r4, #0]
 8024722:	701e      	strb	r6, [r3, #0]
 8024724:	6963      	ldr	r3, [r4, #20]
 8024726:	3001      	adds	r0, #1
 8024728:	4283      	cmp	r3, r0
 802472a:	d004      	beq.n	8024736 <__swbuf_r+0x62>
 802472c:	89a3      	ldrh	r3, [r4, #12]
 802472e:	07db      	lsls	r3, r3, #31
 8024730:	d506      	bpl.n	8024740 <__swbuf_r+0x6c>
 8024732:	2e0a      	cmp	r6, #10
 8024734:	d104      	bne.n	8024740 <__swbuf_r+0x6c>
 8024736:	4621      	mov	r1, r4
 8024738:	4628      	mov	r0, r5
 802473a:	f000 ffc7 	bl	80256cc <_fflush_r>
 802473e:	b988      	cbnz	r0, 8024764 <__swbuf_r+0x90>
 8024740:	4638      	mov	r0, r7
 8024742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8024744:	4b0a      	ldr	r3, [pc, #40]	; (8024770 <__swbuf_r+0x9c>)
 8024746:	429c      	cmp	r4, r3
 8024748:	d101      	bne.n	802474e <__swbuf_r+0x7a>
 802474a:	68ac      	ldr	r4, [r5, #8]
 802474c:	e7cf      	b.n	80246ee <__swbuf_r+0x1a>
 802474e:	4b09      	ldr	r3, [pc, #36]	; (8024774 <__swbuf_r+0xa0>)
 8024750:	429c      	cmp	r4, r3
 8024752:	bf08      	it	eq
 8024754:	68ec      	ldreq	r4, [r5, #12]
 8024756:	e7ca      	b.n	80246ee <__swbuf_r+0x1a>
 8024758:	4621      	mov	r1, r4
 802475a:	4628      	mov	r0, r5
 802475c:	f000 f81e 	bl	802479c <__swsetup_r>
 8024760:	2800      	cmp	r0, #0
 8024762:	d0cb      	beq.n	80246fc <__swbuf_r+0x28>
 8024764:	f04f 37ff 	mov.w	r7, #4294967295
 8024768:	e7ea      	b.n	8024740 <__swbuf_r+0x6c>
 802476a:	bf00      	nop
 802476c:	08043208 	.word	0x08043208
 8024770:	08043228 	.word	0x08043228
 8024774:	080431e8 	.word	0x080431e8

08024778 <_write_r>:
 8024778:	b538      	push	{r3, r4, r5, lr}
 802477a:	4d07      	ldr	r5, [pc, #28]	; (8024798 <_write_r+0x20>)
 802477c:	4604      	mov	r4, r0
 802477e:	4608      	mov	r0, r1
 8024780:	4611      	mov	r1, r2
 8024782:	2200      	movs	r2, #0
 8024784:	602a      	str	r2, [r5, #0]
 8024786:	461a      	mov	r2, r3
 8024788:	f7dd fcc6 	bl	8002118 <_write>
 802478c:	1c43      	adds	r3, r0, #1
 802478e:	d102      	bne.n	8024796 <_write_r+0x1e>
 8024790:	682b      	ldr	r3, [r5, #0]
 8024792:	b103      	cbz	r3, 8024796 <_write_r+0x1e>
 8024794:	6023      	str	r3, [r4, #0]
 8024796:	bd38      	pop	{r3, r4, r5, pc}
 8024798:	2002e4e8 	.word	0x2002e4e8

0802479c <__swsetup_r>:
 802479c:	4b32      	ldr	r3, [pc, #200]	; (8024868 <__swsetup_r+0xcc>)
 802479e:	b570      	push	{r4, r5, r6, lr}
 80247a0:	681d      	ldr	r5, [r3, #0]
 80247a2:	4606      	mov	r6, r0
 80247a4:	460c      	mov	r4, r1
 80247a6:	b125      	cbz	r5, 80247b2 <__swsetup_r+0x16>
 80247a8:	69ab      	ldr	r3, [r5, #24]
 80247aa:	b913      	cbnz	r3, 80247b2 <__swsetup_r+0x16>
 80247ac:	4628      	mov	r0, r5
 80247ae:	f001 f821 	bl	80257f4 <__sinit>
 80247b2:	4b2e      	ldr	r3, [pc, #184]	; (802486c <__swsetup_r+0xd0>)
 80247b4:	429c      	cmp	r4, r3
 80247b6:	d10f      	bne.n	80247d8 <__swsetup_r+0x3c>
 80247b8:	686c      	ldr	r4, [r5, #4]
 80247ba:	89a3      	ldrh	r3, [r4, #12]
 80247bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80247c0:	0719      	lsls	r1, r3, #28
 80247c2:	d42c      	bmi.n	802481e <__swsetup_r+0x82>
 80247c4:	06dd      	lsls	r5, r3, #27
 80247c6:	d411      	bmi.n	80247ec <__swsetup_r+0x50>
 80247c8:	2309      	movs	r3, #9
 80247ca:	6033      	str	r3, [r6, #0]
 80247cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80247d0:	81a3      	strh	r3, [r4, #12]
 80247d2:	f04f 30ff 	mov.w	r0, #4294967295
 80247d6:	e03e      	b.n	8024856 <__swsetup_r+0xba>
 80247d8:	4b25      	ldr	r3, [pc, #148]	; (8024870 <__swsetup_r+0xd4>)
 80247da:	429c      	cmp	r4, r3
 80247dc:	d101      	bne.n	80247e2 <__swsetup_r+0x46>
 80247de:	68ac      	ldr	r4, [r5, #8]
 80247e0:	e7eb      	b.n	80247ba <__swsetup_r+0x1e>
 80247e2:	4b24      	ldr	r3, [pc, #144]	; (8024874 <__swsetup_r+0xd8>)
 80247e4:	429c      	cmp	r4, r3
 80247e6:	bf08      	it	eq
 80247e8:	68ec      	ldreq	r4, [r5, #12]
 80247ea:	e7e6      	b.n	80247ba <__swsetup_r+0x1e>
 80247ec:	0758      	lsls	r0, r3, #29
 80247ee:	d512      	bpl.n	8024816 <__swsetup_r+0x7a>
 80247f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80247f2:	b141      	cbz	r1, 8024806 <__swsetup_r+0x6a>
 80247f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80247f8:	4299      	cmp	r1, r3
 80247fa:	d002      	beq.n	8024802 <__swsetup_r+0x66>
 80247fc:	4630      	mov	r0, r6
 80247fe:	f7fd ff85 	bl	802270c <_free_r>
 8024802:	2300      	movs	r3, #0
 8024804:	6363      	str	r3, [r4, #52]	; 0x34
 8024806:	89a3      	ldrh	r3, [r4, #12]
 8024808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 802480c:	81a3      	strh	r3, [r4, #12]
 802480e:	2300      	movs	r3, #0
 8024810:	6063      	str	r3, [r4, #4]
 8024812:	6923      	ldr	r3, [r4, #16]
 8024814:	6023      	str	r3, [r4, #0]
 8024816:	89a3      	ldrh	r3, [r4, #12]
 8024818:	f043 0308 	orr.w	r3, r3, #8
 802481c:	81a3      	strh	r3, [r4, #12]
 802481e:	6923      	ldr	r3, [r4, #16]
 8024820:	b94b      	cbnz	r3, 8024836 <__swsetup_r+0x9a>
 8024822:	89a3      	ldrh	r3, [r4, #12]
 8024824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8024828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802482c:	d003      	beq.n	8024836 <__swsetup_r+0x9a>
 802482e:	4621      	mov	r1, r4
 8024830:	4630      	mov	r0, r6
 8024832:	f001 f9c9 	bl	8025bc8 <__smakebuf_r>
 8024836:	89a0      	ldrh	r0, [r4, #12]
 8024838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802483c:	f010 0301 	ands.w	r3, r0, #1
 8024840:	d00a      	beq.n	8024858 <__swsetup_r+0xbc>
 8024842:	2300      	movs	r3, #0
 8024844:	60a3      	str	r3, [r4, #8]
 8024846:	6963      	ldr	r3, [r4, #20]
 8024848:	425b      	negs	r3, r3
 802484a:	61a3      	str	r3, [r4, #24]
 802484c:	6923      	ldr	r3, [r4, #16]
 802484e:	b943      	cbnz	r3, 8024862 <__swsetup_r+0xc6>
 8024850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8024854:	d1ba      	bne.n	80247cc <__swsetup_r+0x30>
 8024856:	bd70      	pop	{r4, r5, r6, pc}
 8024858:	0781      	lsls	r1, r0, #30
 802485a:	bf58      	it	pl
 802485c:	6963      	ldrpl	r3, [r4, #20]
 802485e:	60a3      	str	r3, [r4, #8]
 8024860:	e7f4      	b.n	802484c <__swsetup_r+0xb0>
 8024862:	2000      	movs	r0, #0
 8024864:	e7f7      	b.n	8024856 <__swsetup_r+0xba>
 8024866:	bf00      	nop
 8024868:	20000488 	.word	0x20000488
 802486c:	08043208 	.word	0x08043208
 8024870:	08043228 	.word	0x08043228
 8024874:	080431e8 	.word	0x080431e8

08024878 <abs>:
 8024878:	2800      	cmp	r0, #0
 802487a:	bfb8      	it	lt
 802487c:	4240      	neglt	r0, r0
 802487e:	4770      	bx	lr

08024880 <asctime>:
 8024880:	4b0d      	ldr	r3, [pc, #52]	; (80248b8 <asctime+0x38>)
 8024882:	b570      	push	{r4, r5, r6, lr}
 8024884:	681d      	ldr	r5, [r3, #0]
 8024886:	6c2e      	ldr	r6, [r5, #64]	; 0x40
 8024888:	4604      	mov	r4, r0
 802488a:	b976      	cbnz	r6, 80248aa <asctime+0x2a>
 802488c:	201a      	movs	r0, #26
 802488e:	f7fd fc71 	bl	8022174 <malloc>
 8024892:	4602      	mov	r2, r0
 8024894:	6428      	str	r0, [r5, #64]	; 0x40
 8024896:	b920      	cbnz	r0, 80248a2 <asctime+0x22>
 8024898:	4b08      	ldr	r3, [pc, #32]	; (80248bc <asctime+0x3c>)
 802489a:	4809      	ldr	r0, [pc, #36]	; (80248c0 <asctime+0x40>)
 802489c:	2137      	movs	r1, #55	; 0x37
 802489e:	f000 f837 	bl	8024910 <__assert_func>
 80248a2:	221a      	movs	r2, #26
 80248a4:	4631      	mov	r1, r6
 80248a6:	f7fd fcab 	bl	8022200 <memset>
 80248aa:	6c29      	ldr	r1, [r5, #64]	; 0x40
 80248ac:	4620      	mov	r0, r4
 80248ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80248b2:	f000 b807 	b.w	80248c4 <asctime_r>
 80248b6:	bf00      	nop
 80248b8:	20000488 	.word	0x20000488
 80248bc:	08042bec 	.word	0x08042bec
 80248c0:	08043074 	.word	0x08043074

080248c4 <asctime_r>:
 80248c4:	b510      	push	{r4, lr}
 80248c6:	460c      	mov	r4, r1
 80248c8:	6941      	ldr	r1, [r0, #20]
 80248ca:	6903      	ldr	r3, [r0, #16]
 80248cc:	6982      	ldr	r2, [r0, #24]
 80248ce:	b086      	sub	sp, #24
 80248d0:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 80248d4:	9104      	str	r1, [sp, #16]
 80248d6:	6801      	ldr	r1, [r0, #0]
 80248d8:	9103      	str	r1, [sp, #12]
 80248da:	6841      	ldr	r1, [r0, #4]
 80248dc:	9102      	str	r1, [sp, #8]
 80248de:	6881      	ldr	r1, [r0, #8]
 80248e0:	9101      	str	r1, [sp, #4]
 80248e2:	68c1      	ldr	r1, [r0, #12]
 80248e4:	9100      	str	r1, [sp, #0]
 80248e6:	4907      	ldr	r1, [pc, #28]	; (8024904 <asctime_r+0x40>)
 80248e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80248ec:	440b      	add	r3, r1
 80248ee:	4906      	ldr	r1, [pc, #24]	; (8024908 <asctime_r+0x44>)
 80248f0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248f4:	440a      	add	r2, r1
 80248f6:	4620      	mov	r0, r4
 80248f8:	4904      	ldr	r1, [pc, #16]	; (802490c <asctime_r+0x48>)
 80248fa:	f7fe fd6b 	bl	80233d4 <siprintf>
 80248fe:	4620      	mov	r0, r4
 8024900:	b006      	add	sp, #24
 8024902:	bd10      	pop	{r4, pc}
 8024904:	08043109 	.word	0x08043109
 8024908:	080430f4 	.word	0x080430f4
 802490c:	080430d4 	.word	0x080430d4

08024910 <__assert_func>:
 8024910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8024912:	4614      	mov	r4, r2
 8024914:	461a      	mov	r2, r3
 8024916:	4b09      	ldr	r3, [pc, #36]	; (802493c <__assert_func+0x2c>)
 8024918:	681b      	ldr	r3, [r3, #0]
 802491a:	4605      	mov	r5, r0
 802491c:	68d8      	ldr	r0, [r3, #12]
 802491e:	b14c      	cbz	r4, 8024934 <__assert_func+0x24>
 8024920:	4b07      	ldr	r3, [pc, #28]	; (8024940 <__assert_func+0x30>)
 8024922:	9100      	str	r1, [sp, #0]
 8024924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8024928:	4906      	ldr	r1, [pc, #24]	; (8024944 <__assert_func+0x34>)
 802492a:	462b      	mov	r3, r5
 802492c:	f000 ffe0 	bl	80258f0 <fiprintf>
 8024930:	f002 fc09 	bl	8027146 <abort>
 8024934:	4b04      	ldr	r3, [pc, #16]	; (8024948 <__assert_func+0x38>)
 8024936:	461c      	mov	r4, r3
 8024938:	e7f3      	b.n	8024922 <__assert_func+0x12>
 802493a:	bf00      	nop
 802493c:	20000488 	.word	0x20000488
 8024940:	0804312d 	.word	0x0804312d
 8024944:	0804313a 	.word	0x0804313a
 8024948:	080430f3 	.word	0x080430f3

0802494c <_close_r>:
 802494c:	b538      	push	{r3, r4, r5, lr}
 802494e:	4d06      	ldr	r5, [pc, #24]	; (8024968 <_close_r+0x1c>)
 8024950:	2300      	movs	r3, #0
 8024952:	4604      	mov	r4, r0
 8024954:	4608      	mov	r0, r1
 8024956:	602b      	str	r3, [r5, #0]
 8024958:	f7e1 fbd0 	bl	80060fc <_close>
 802495c:	1c43      	adds	r3, r0, #1
 802495e:	d102      	bne.n	8024966 <_close_r+0x1a>
 8024960:	682b      	ldr	r3, [r5, #0]
 8024962:	b103      	cbz	r3, 8024966 <_close_r+0x1a>
 8024964:	6023      	str	r3, [r4, #0]
 8024966:	bd38      	pop	{r3, r4, r5, pc}
 8024968:	2002e4e8 	.word	0x2002e4e8

0802496c <div>:
 802496c:	2900      	cmp	r1, #0
 802496e:	b510      	push	{r4, lr}
 8024970:	fb91 f4f2 	sdiv	r4, r1, r2
 8024974:	fb02 1314 	mls	r3, r2, r4, r1
 8024978:	db06      	blt.n	8024988 <div+0x1c>
 802497a:	2b00      	cmp	r3, #0
 802497c:	da01      	bge.n	8024982 <div+0x16>
 802497e:	3401      	adds	r4, #1
 8024980:	1a9b      	subs	r3, r3, r2
 8024982:	e9c0 4300 	strd	r4, r3, [r0]
 8024986:	bd10      	pop	{r4, pc}
 8024988:	2b00      	cmp	r3, #0
 802498a:	bfc4      	itt	gt
 802498c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8024990:	189b      	addgt	r3, r3, r2
 8024992:	e7f6      	b.n	8024982 <div+0x16>

08024994 <quorem>:
 8024994:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024998:	6903      	ldr	r3, [r0, #16]
 802499a:	690c      	ldr	r4, [r1, #16]
 802499c:	42a3      	cmp	r3, r4
 802499e:	4607      	mov	r7, r0
 80249a0:	f2c0 8081 	blt.w	8024aa6 <quorem+0x112>
 80249a4:	3c01      	subs	r4, #1
 80249a6:	f101 0814 	add.w	r8, r1, #20
 80249aa:	f100 0514 	add.w	r5, r0, #20
 80249ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80249b2:	9301      	str	r3, [sp, #4]
 80249b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80249b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80249bc:	3301      	adds	r3, #1
 80249be:	429a      	cmp	r2, r3
 80249c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80249c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80249c8:	fbb2 f6f3 	udiv	r6, r2, r3
 80249cc:	d331      	bcc.n	8024a32 <quorem+0x9e>
 80249ce:	f04f 0e00 	mov.w	lr, #0
 80249d2:	4640      	mov	r0, r8
 80249d4:	46ac      	mov	ip, r5
 80249d6:	46f2      	mov	sl, lr
 80249d8:	f850 2b04 	ldr.w	r2, [r0], #4
 80249dc:	b293      	uxth	r3, r2
 80249de:	fb06 e303 	mla	r3, r6, r3, lr
 80249e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80249e6:	b29b      	uxth	r3, r3
 80249e8:	ebaa 0303 	sub.w	r3, sl, r3
 80249ec:	0c12      	lsrs	r2, r2, #16
 80249ee:	f8dc a000 	ldr.w	sl, [ip]
 80249f2:	fb06 e202 	mla	r2, r6, r2, lr
 80249f6:	fa13 f38a 	uxtah	r3, r3, sl
 80249fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80249fe:	fa1f fa82 	uxth.w	sl, r2
 8024a02:	f8dc 2000 	ldr.w	r2, [ip]
 8024a06:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8024a0a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024a0e:	b29b      	uxth	r3, r3
 8024a10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024a14:	4581      	cmp	r9, r0
 8024a16:	f84c 3b04 	str.w	r3, [ip], #4
 8024a1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8024a1e:	d2db      	bcs.n	80249d8 <quorem+0x44>
 8024a20:	f855 300b 	ldr.w	r3, [r5, fp]
 8024a24:	b92b      	cbnz	r3, 8024a32 <quorem+0x9e>
 8024a26:	9b01      	ldr	r3, [sp, #4]
 8024a28:	3b04      	subs	r3, #4
 8024a2a:	429d      	cmp	r5, r3
 8024a2c:	461a      	mov	r2, r3
 8024a2e:	d32e      	bcc.n	8024a8e <quorem+0xfa>
 8024a30:	613c      	str	r4, [r7, #16]
 8024a32:	4638      	mov	r0, r7
 8024a34:	f001 fba4 	bl	8026180 <__mcmp>
 8024a38:	2800      	cmp	r0, #0
 8024a3a:	db24      	blt.n	8024a86 <quorem+0xf2>
 8024a3c:	3601      	adds	r6, #1
 8024a3e:	4628      	mov	r0, r5
 8024a40:	f04f 0c00 	mov.w	ip, #0
 8024a44:	f858 2b04 	ldr.w	r2, [r8], #4
 8024a48:	f8d0 e000 	ldr.w	lr, [r0]
 8024a4c:	b293      	uxth	r3, r2
 8024a4e:	ebac 0303 	sub.w	r3, ip, r3
 8024a52:	0c12      	lsrs	r2, r2, #16
 8024a54:	fa13 f38e 	uxtah	r3, r3, lr
 8024a58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8024a5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8024a60:	b29b      	uxth	r3, r3
 8024a62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024a66:	45c1      	cmp	r9, r8
 8024a68:	f840 3b04 	str.w	r3, [r0], #4
 8024a6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8024a70:	d2e8      	bcs.n	8024a44 <quorem+0xb0>
 8024a72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8024a76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8024a7a:	b922      	cbnz	r2, 8024a86 <quorem+0xf2>
 8024a7c:	3b04      	subs	r3, #4
 8024a7e:	429d      	cmp	r5, r3
 8024a80:	461a      	mov	r2, r3
 8024a82:	d30a      	bcc.n	8024a9a <quorem+0x106>
 8024a84:	613c      	str	r4, [r7, #16]
 8024a86:	4630      	mov	r0, r6
 8024a88:	b003      	add	sp, #12
 8024a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024a8e:	6812      	ldr	r2, [r2, #0]
 8024a90:	3b04      	subs	r3, #4
 8024a92:	2a00      	cmp	r2, #0
 8024a94:	d1cc      	bne.n	8024a30 <quorem+0x9c>
 8024a96:	3c01      	subs	r4, #1
 8024a98:	e7c7      	b.n	8024a2a <quorem+0x96>
 8024a9a:	6812      	ldr	r2, [r2, #0]
 8024a9c:	3b04      	subs	r3, #4
 8024a9e:	2a00      	cmp	r2, #0
 8024aa0:	d1f0      	bne.n	8024a84 <quorem+0xf0>
 8024aa2:	3c01      	subs	r4, #1
 8024aa4:	e7eb      	b.n	8024a7e <quorem+0xea>
 8024aa6:	2000      	movs	r0, #0
 8024aa8:	e7ee      	b.n	8024a88 <quorem+0xf4>
 8024aaa:	0000      	movs	r0, r0
 8024aac:	0000      	movs	r0, r0
	...

08024ab0 <_dtoa_r>:
 8024ab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024ab4:	ec59 8b10 	vmov	r8, r9, d0
 8024ab8:	b095      	sub	sp, #84	; 0x54
 8024aba:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8024abc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 8024abe:	9107      	str	r1, [sp, #28]
 8024ac0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8024ac4:	4606      	mov	r6, r0
 8024ac6:	9209      	str	r2, [sp, #36]	; 0x24
 8024ac8:	9310      	str	r3, [sp, #64]	; 0x40
 8024aca:	b975      	cbnz	r5, 8024aea <_dtoa_r+0x3a>
 8024acc:	2010      	movs	r0, #16
 8024ace:	f7fd fb51 	bl	8022174 <malloc>
 8024ad2:	4602      	mov	r2, r0
 8024ad4:	6270      	str	r0, [r6, #36]	; 0x24
 8024ad6:	b920      	cbnz	r0, 8024ae2 <_dtoa_r+0x32>
 8024ad8:	4bab      	ldr	r3, [pc, #684]	; (8024d88 <_dtoa_r+0x2d8>)
 8024ada:	21ea      	movs	r1, #234	; 0xea
 8024adc:	48ab      	ldr	r0, [pc, #684]	; (8024d8c <_dtoa_r+0x2dc>)
 8024ade:	f7ff ff17 	bl	8024910 <__assert_func>
 8024ae2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8024ae6:	6005      	str	r5, [r0, #0]
 8024ae8:	60c5      	str	r5, [r0, #12]
 8024aea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8024aec:	6819      	ldr	r1, [r3, #0]
 8024aee:	b151      	cbz	r1, 8024b06 <_dtoa_r+0x56>
 8024af0:	685a      	ldr	r2, [r3, #4]
 8024af2:	604a      	str	r2, [r1, #4]
 8024af4:	2301      	movs	r3, #1
 8024af6:	4093      	lsls	r3, r2
 8024af8:	608b      	str	r3, [r1, #8]
 8024afa:	4630      	mov	r0, r6
 8024afc:	f001 f902 	bl	8025d04 <_Bfree>
 8024b00:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8024b02:	2200      	movs	r2, #0
 8024b04:	601a      	str	r2, [r3, #0]
 8024b06:	f1b9 0300 	subs.w	r3, r9, #0
 8024b0a:	bfbb      	ittet	lt
 8024b0c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8024b10:	9303      	strlt	r3, [sp, #12]
 8024b12:	2300      	movge	r3, #0
 8024b14:	2201      	movlt	r2, #1
 8024b16:	bfac      	ite	ge
 8024b18:	6023      	strge	r3, [r4, #0]
 8024b1a:	6022      	strlt	r2, [r4, #0]
 8024b1c:	4b9c      	ldr	r3, [pc, #624]	; (8024d90 <_dtoa_r+0x2e0>)
 8024b1e:	9c03      	ldr	r4, [sp, #12]
 8024b20:	43a3      	bics	r3, r4
 8024b22:	d11a      	bne.n	8024b5a <_dtoa_r+0xaa>
 8024b24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024b26:	f242 730f 	movw	r3, #9999	; 0x270f
 8024b2a:	6013      	str	r3, [r2, #0]
 8024b2c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8024b30:	ea53 0308 	orrs.w	r3, r3, r8
 8024b34:	f000 8512 	beq.w	802555c <_dtoa_r+0xaac>
 8024b38:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024b3a:	b953      	cbnz	r3, 8024b52 <_dtoa_r+0xa2>
 8024b3c:	4b95      	ldr	r3, [pc, #596]	; (8024d94 <_dtoa_r+0x2e4>)
 8024b3e:	e01f      	b.n	8024b80 <_dtoa_r+0xd0>
 8024b40:	4b95      	ldr	r3, [pc, #596]	; (8024d98 <_dtoa_r+0x2e8>)
 8024b42:	9300      	str	r3, [sp, #0]
 8024b44:	3308      	adds	r3, #8
 8024b46:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8024b48:	6013      	str	r3, [r2, #0]
 8024b4a:	9800      	ldr	r0, [sp, #0]
 8024b4c:	b015      	add	sp, #84	; 0x54
 8024b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b52:	4b90      	ldr	r3, [pc, #576]	; (8024d94 <_dtoa_r+0x2e4>)
 8024b54:	9300      	str	r3, [sp, #0]
 8024b56:	3303      	adds	r3, #3
 8024b58:	e7f5      	b.n	8024b46 <_dtoa_r+0x96>
 8024b5a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024b5e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024b66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8024b6a:	d10b      	bne.n	8024b84 <_dtoa_r+0xd4>
 8024b6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8024b6e:	2301      	movs	r3, #1
 8024b70:	6013      	str	r3, [r2, #0]
 8024b72:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8024b74:	2b00      	cmp	r3, #0
 8024b76:	f000 84ee 	beq.w	8025556 <_dtoa_r+0xaa6>
 8024b7a:	4888      	ldr	r0, [pc, #544]	; (8024d9c <_dtoa_r+0x2ec>)
 8024b7c:	6018      	str	r0, [r3, #0]
 8024b7e:	1e43      	subs	r3, r0, #1
 8024b80:	9300      	str	r3, [sp, #0]
 8024b82:	e7e2      	b.n	8024b4a <_dtoa_r+0x9a>
 8024b84:	a913      	add	r1, sp, #76	; 0x4c
 8024b86:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8024b8a:	aa12      	add	r2, sp, #72	; 0x48
 8024b8c:	4630      	mov	r0, r6
 8024b8e:	f001 fb9b 	bl	80262c8 <__d2b>
 8024b92:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8024b96:	4605      	mov	r5, r0
 8024b98:	9812      	ldr	r0, [sp, #72]	; 0x48
 8024b9a:	2900      	cmp	r1, #0
 8024b9c:	d047      	beq.n	8024c2e <_dtoa_r+0x17e>
 8024b9e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024ba0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8024ba4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8024ba8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8024bac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8024bb0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8024bb4:	2400      	movs	r4, #0
 8024bb6:	ec43 2b16 	vmov	d6, r2, r3
 8024bba:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8024bbe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 8024d70 <_dtoa_r+0x2c0>
 8024bc2:	ee36 7b47 	vsub.f64	d7, d6, d7
 8024bc6:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 8024d78 <_dtoa_r+0x2c8>
 8024bca:	eea7 6b05 	vfma.f64	d6, d7, d5
 8024bce:	eeb0 7b46 	vmov.f64	d7, d6
 8024bd2:	ee06 1a90 	vmov	s13, r1
 8024bd6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8024bda:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8024d80 <_dtoa_r+0x2d0>
 8024bde:	eea5 7b06 	vfma.f64	d7, d5, d6
 8024be2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8024be6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8024bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024bee:	ee16 ba90 	vmov	fp, s13
 8024bf2:	9411      	str	r4, [sp, #68]	; 0x44
 8024bf4:	d508      	bpl.n	8024c08 <_dtoa_r+0x158>
 8024bf6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8024bfa:	eeb4 6b47 	vcmp.f64	d6, d7
 8024bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c02:	bf18      	it	ne
 8024c04:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8024c08:	f1bb 0f16 	cmp.w	fp, #22
 8024c0c:	d832      	bhi.n	8024c74 <_dtoa_r+0x1c4>
 8024c0e:	4b64      	ldr	r3, [pc, #400]	; (8024da0 <_dtoa_r+0x2f0>)
 8024c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024c14:	ed93 7b00 	vldr	d7, [r3]
 8024c18:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8024c1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024c24:	d501      	bpl.n	8024c2a <_dtoa_r+0x17a>
 8024c26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8024c2a:	2300      	movs	r3, #0
 8024c2c:	e023      	b.n	8024c76 <_dtoa_r+0x1c6>
 8024c2e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8024c30:	4401      	add	r1, r0
 8024c32:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8024c36:	2b20      	cmp	r3, #32
 8024c38:	bfc3      	ittte	gt
 8024c3a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8024c3e:	fa04 f303 	lslgt.w	r3, r4, r3
 8024c42:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8024c46:	f1c3 0320 	rsble	r3, r3, #32
 8024c4a:	bfc6      	itte	gt
 8024c4c:	fa28 f804 	lsrgt.w	r8, r8, r4
 8024c50:	ea43 0308 	orrgt.w	r3, r3, r8
 8024c54:	fa08 f303 	lslle.w	r3, r8, r3
 8024c58:	ee07 3a90 	vmov	s15, r3
 8024c5c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8024c60:	3901      	subs	r1, #1
 8024c62:	ed8d 7b00 	vstr	d7, [sp]
 8024c66:	9c01      	ldr	r4, [sp, #4]
 8024c68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8024c6c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 8024c70:	2401      	movs	r4, #1
 8024c72:	e7a0      	b.n	8024bb6 <_dtoa_r+0x106>
 8024c74:	2301      	movs	r3, #1
 8024c76:	930f      	str	r3, [sp, #60]	; 0x3c
 8024c78:	1a43      	subs	r3, r0, r1
 8024c7a:	1e5a      	subs	r2, r3, #1
 8024c7c:	bf45      	ittet	mi
 8024c7e:	f1c3 0301 	rsbmi	r3, r3, #1
 8024c82:	9305      	strmi	r3, [sp, #20]
 8024c84:	2300      	movpl	r3, #0
 8024c86:	2300      	movmi	r3, #0
 8024c88:	9206      	str	r2, [sp, #24]
 8024c8a:	bf54      	ite	pl
 8024c8c:	9305      	strpl	r3, [sp, #20]
 8024c8e:	9306      	strmi	r3, [sp, #24]
 8024c90:	f1bb 0f00 	cmp.w	fp, #0
 8024c94:	db18      	blt.n	8024cc8 <_dtoa_r+0x218>
 8024c96:	9b06      	ldr	r3, [sp, #24]
 8024c98:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8024c9c:	445b      	add	r3, fp
 8024c9e:	9306      	str	r3, [sp, #24]
 8024ca0:	2300      	movs	r3, #0
 8024ca2:	9a07      	ldr	r2, [sp, #28]
 8024ca4:	2a09      	cmp	r2, #9
 8024ca6:	d849      	bhi.n	8024d3c <_dtoa_r+0x28c>
 8024ca8:	2a05      	cmp	r2, #5
 8024caa:	bfc4      	itt	gt
 8024cac:	3a04      	subgt	r2, #4
 8024cae:	9207      	strgt	r2, [sp, #28]
 8024cb0:	9a07      	ldr	r2, [sp, #28]
 8024cb2:	f1a2 0202 	sub.w	r2, r2, #2
 8024cb6:	bfcc      	ite	gt
 8024cb8:	2400      	movgt	r4, #0
 8024cba:	2401      	movle	r4, #1
 8024cbc:	2a03      	cmp	r2, #3
 8024cbe:	d848      	bhi.n	8024d52 <_dtoa_r+0x2a2>
 8024cc0:	e8df f002 	tbb	[pc, r2]
 8024cc4:	3a2c2e0b 	.word	0x3a2c2e0b
 8024cc8:	9b05      	ldr	r3, [sp, #20]
 8024cca:	2200      	movs	r2, #0
 8024ccc:	eba3 030b 	sub.w	r3, r3, fp
 8024cd0:	9305      	str	r3, [sp, #20]
 8024cd2:	920e      	str	r2, [sp, #56]	; 0x38
 8024cd4:	f1cb 0300 	rsb	r3, fp, #0
 8024cd8:	e7e3      	b.n	8024ca2 <_dtoa_r+0x1f2>
 8024cda:	2200      	movs	r2, #0
 8024cdc:	9208      	str	r2, [sp, #32]
 8024cde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024ce0:	2a00      	cmp	r2, #0
 8024ce2:	dc39      	bgt.n	8024d58 <_dtoa_r+0x2a8>
 8024ce4:	f04f 0a01 	mov.w	sl, #1
 8024ce8:	46d1      	mov	r9, sl
 8024cea:	4652      	mov	r2, sl
 8024cec:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8024cf0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8024cf2:	2100      	movs	r1, #0
 8024cf4:	6079      	str	r1, [r7, #4]
 8024cf6:	2004      	movs	r0, #4
 8024cf8:	f100 0c14 	add.w	ip, r0, #20
 8024cfc:	4594      	cmp	ip, r2
 8024cfe:	6879      	ldr	r1, [r7, #4]
 8024d00:	d92f      	bls.n	8024d62 <_dtoa_r+0x2b2>
 8024d02:	4630      	mov	r0, r6
 8024d04:	930c      	str	r3, [sp, #48]	; 0x30
 8024d06:	f000 ffbd 	bl	8025c84 <_Balloc>
 8024d0a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8024d0c:	9000      	str	r0, [sp, #0]
 8024d0e:	4602      	mov	r2, r0
 8024d10:	2800      	cmp	r0, #0
 8024d12:	d149      	bne.n	8024da8 <_dtoa_r+0x2f8>
 8024d14:	4b23      	ldr	r3, [pc, #140]	; (8024da4 <_dtoa_r+0x2f4>)
 8024d16:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8024d1a:	e6df      	b.n	8024adc <_dtoa_r+0x2c>
 8024d1c:	2201      	movs	r2, #1
 8024d1e:	e7dd      	b.n	8024cdc <_dtoa_r+0x22c>
 8024d20:	2200      	movs	r2, #0
 8024d22:	9208      	str	r2, [sp, #32]
 8024d24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024d26:	eb0b 0a02 	add.w	sl, fp, r2
 8024d2a:	f10a 0901 	add.w	r9, sl, #1
 8024d2e:	464a      	mov	r2, r9
 8024d30:	2a01      	cmp	r2, #1
 8024d32:	bfb8      	it	lt
 8024d34:	2201      	movlt	r2, #1
 8024d36:	e7db      	b.n	8024cf0 <_dtoa_r+0x240>
 8024d38:	2201      	movs	r2, #1
 8024d3a:	e7f2      	b.n	8024d22 <_dtoa_r+0x272>
 8024d3c:	2401      	movs	r4, #1
 8024d3e:	2200      	movs	r2, #0
 8024d40:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8024d44:	f04f 3aff 	mov.w	sl, #4294967295
 8024d48:	2100      	movs	r1, #0
 8024d4a:	46d1      	mov	r9, sl
 8024d4c:	2212      	movs	r2, #18
 8024d4e:	9109      	str	r1, [sp, #36]	; 0x24
 8024d50:	e7ce      	b.n	8024cf0 <_dtoa_r+0x240>
 8024d52:	2201      	movs	r2, #1
 8024d54:	9208      	str	r2, [sp, #32]
 8024d56:	e7f5      	b.n	8024d44 <_dtoa_r+0x294>
 8024d58:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8024d5c:	46d1      	mov	r9, sl
 8024d5e:	4652      	mov	r2, sl
 8024d60:	e7c6      	b.n	8024cf0 <_dtoa_r+0x240>
 8024d62:	3101      	adds	r1, #1
 8024d64:	6079      	str	r1, [r7, #4]
 8024d66:	0040      	lsls	r0, r0, #1
 8024d68:	e7c6      	b.n	8024cf8 <_dtoa_r+0x248>
 8024d6a:	bf00      	nop
 8024d6c:	f3af 8000 	nop.w
 8024d70:	636f4361 	.word	0x636f4361
 8024d74:	3fd287a7 	.word	0x3fd287a7
 8024d78:	8b60c8b3 	.word	0x8b60c8b3
 8024d7c:	3fc68a28 	.word	0x3fc68a28
 8024d80:	509f79fb 	.word	0x509f79fb
 8024d84:	3fd34413 	.word	0x3fd34413
 8024d88:	08042bec 	.word	0x08042bec
 8024d8c:	08043176 	.word	0x08043176
 8024d90:	7ff00000 	.word	0x7ff00000
 8024d94:	08043172 	.word	0x08043172
 8024d98:	08043169 	.word	0x08043169
 8024d9c:	080433ca 	.word	0x080433ca
 8024da0:	080432e0 	.word	0x080432e0
 8024da4:	080431d5 	.word	0x080431d5
 8024da8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8024daa:	9900      	ldr	r1, [sp, #0]
 8024dac:	6011      	str	r1, [r2, #0]
 8024dae:	f1b9 0f0e 	cmp.w	r9, #14
 8024db2:	d872      	bhi.n	8024e9a <_dtoa_r+0x3ea>
 8024db4:	2c00      	cmp	r4, #0
 8024db6:	d070      	beq.n	8024e9a <_dtoa_r+0x3ea>
 8024db8:	f1bb 0f00 	cmp.w	fp, #0
 8024dbc:	f340 80a6 	ble.w	8024f0c <_dtoa_r+0x45c>
 8024dc0:	49ca      	ldr	r1, [pc, #808]	; (80250ec <_dtoa_r+0x63c>)
 8024dc2:	f00b 020f 	and.w	r2, fp, #15
 8024dc6:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8024dca:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8024dce:	ed92 7b00 	vldr	d7, [r2]
 8024dd2:	ea4f 112b 	mov.w	r1, fp, asr #4
 8024dd6:	f000 808d 	beq.w	8024ef4 <_dtoa_r+0x444>
 8024dda:	4ac5      	ldr	r2, [pc, #788]	; (80250f0 <_dtoa_r+0x640>)
 8024ddc:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 8024de0:	ed92 6b08 	vldr	d6, [r2, #32]
 8024de4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8024de8:	ed8d 6b02 	vstr	d6, [sp, #8]
 8024dec:	f001 010f 	and.w	r1, r1, #15
 8024df0:	2203      	movs	r2, #3
 8024df2:	48bf      	ldr	r0, [pc, #764]	; (80250f0 <_dtoa_r+0x640>)
 8024df4:	2900      	cmp	r1, #0
 8024df6:	d17f      	bne.n	8024ef8 <_dtoa_r+0x448>
 8024df8:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024dfc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8024e00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024e04:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024e06:	2900      	cmp	r1, #0
 8024e08:	f000 80b2 	beq.w	8024f70 <_dtoa_r+0x4c0>
 8024e0c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8024e10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024e14:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8024e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e1c:	f140 80a8 	bpl.w	8024f70 <_dtoa_r+0x4c0>
 8024e20:	f1b9 0f00 	cmp.w	r9, #0
 8024e24:	f000 80a4 	beq.w	8024f70 <_dtoa_r+0x4c0>
 8024e28:	f1ba 0f00 	cmp.w	sl, #0
 8024e2c:	dd31      	ble.n	8024e92 <_dtoa_r+0x3e2>
 8024e2e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8024e32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024e36:	ed8d 7b02 	vstr	d7, [sp, #8]
 8024e3a:	f10b 37ff 	add.w	r7, fp, #4294967295
 8024e3e:	3201      	adds	r2, #1
 8024e40:	4650      	mov	r0, sl
 8024e42:	ed9d 6b02 	vldr	d6, [sp, #8]
 8024e46:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8024e4a:	ee07 2a90 	vmov	s15, r2
 8024e4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8024e52:	eea7 5b06 	vfma.f64	d5, d7, d6
 8024e56:	ed8d 5b02 	vstr	d5, [sp, #8]
 8024e5a:	9c03      	ldr	r4, [sp, #12]
 8024e5c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8024e60:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8024e64:	2800      	cmp	r0, #0
 8024e66:	f040 8086 	bne.w	8024f76 <_dtoa_r+0x4c6>
 8024e6a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8024e6e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8024e72:	ec42 1b17 	vmov	d7, r1, r2
 8024e76:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e7e:	f300 8272 	bgt.w	8025366 <_dtoa_r+0x8b6>
 8024e82:	eeb1 7b47 	vneg.f64	d7, d7
 8024e86:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024e8e:	f100 8267 	bmi.w	8025360 <_dtoa_r+0x8b0>
 8024e92:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 8024e96:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8024e9a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8024e9c:	2a00      	cmp	r2, #0
 8024e9e:	f2c0 8129 	blt.w	80250f4 <_dtoa_r+0x644>
 8024ea2:	f1bb 0f0e 	cmp.w	fp, #14
 8024ea6:	f300 8125 	bgt.w	80250f4 <_dtoa_r+0x644>
 8024eaa:	4b90      	ldr	r3, [pc, #576]	; (80250ec <_dtoa_r+0x63c>)
 8024eac:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8024eb0:	ed93 6b00 	vldr	d6, [r3]
 8024eb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024eb6:	2b00      	cmp	r3, #0
 8024eb8:	f280 80c3 	bge.w	8025042 <_dtoa_r+0x592>
 8024ebc:	f1b9 0f00 	cmp.w	r9, #0
 8024ec0:	f300 80bf 	bgt.w	8025042 <_dtoa_r+0x592>
 8024ec4:	f040 824c 	bne.w	8025360 <_dtoa_r+0x8b0>
 8024ec8:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8024ecc:	ee26 6b07 	vmul.f64	d6, d6, d7
 8024ed0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8024ed4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024edc:	464c      	mov	r4, r9
 8024ede:	464f      	mov	r7, r9
 8024ee0:	f280 8222 	bge.w	8025328 <_dtoa_r+0x878>
 8024ee4:	f8dd 8000 	ldr.w	r8, [sp]
 8024ee8:	2331      	movs	r3, #49	; 0x31
 8024eea:	f808 3b01 	strb.w	r3, [r8], #1
 8024eee:	f10b 0b01 	add.w	fp, fp, #1
 8024ef2:	e21e      	b.n	8025332 <_dtoa_r+0x882>
 8024ef4:	2202      	movs	r2, #2
 8024ef6:	e77c      	b.n	8024df2 <_dtoa_r+0x342>
 8024ef8:	07cc      	lsls	r4, r1, #31
 8024efa:	d504      	bpl.n	8024f06 <_dtoa_r+0x456>
 8024efc:	ed90 6b00 	vldr	d6, [r0]
 8024f00:	3201      	adds	r2, #1
 8024f02:	ee27 7b06 	vmul.f64	d7, d7, d6
 8024f06:	1049      	asrs	r1, r1, #1
 8024f08:	3008      	adds	r0, #8
 8024f0a:	e773      	b.n	8024df4 <_dtoa_r+0x344>
 8024f0c:	d02e      	beq.n	8024f6c <_dtoa_r+0x4bc>
 8024f0e:	f1cb 0100 	rsb	r1, fp, #0
 8024f12:	4a76      	ldr	r2, [pc, #472]	; (80250ec <_dtoa_r+0x63c>)
 8024f14:	f001 000f 	and.w	r0, r1, #15
 8024f18:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8024f1c:	ed92 7b00 	vldr	d7, [r2]
 8024f20:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 8024f24:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024f28:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8024f2c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 8024f30:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8024f34:	486e      	ldr	r0, [pc, #440]	; (80250f0 <_dtoa_r+0x640>)
 8024f36:	1109      	asrs	r1, r1, #4
 8024f38:	2400      	movs	r4, #0
 8024f3a:	2202      	movs	r2, #2
 8024f3c:	b939      	cbnz	r1, 8024f4e <_dtoa_r+0x49e>
 8024f3e:	2c00      	cmp	r4, #0
 8024f40:	f43f af60 	beq.w	8024e04 <_dtoa_r+0x354>
 8024f44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8024f48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8024f4c:	e75a      	b.n	8024e04 <_dtoa_r+0x354>
 8024f4e:	07cf      	lsls	r7, r1, #31
 8024f50:	d509      	bpl.n	8024f66 <_dtoa_r+0x4b6>
 8024f52:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8024f56:	ed90 7b00 	vldr	d7, [r0]
 8024f5a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8024f5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8024f62:	3201      	adds	r2, #1
 8024f64:	2401      	movs	r4, #1
 8024f66:	1049      	asrs	r1, r1, #1
 8024f68:	3008      	adds	r0, #8
 8024f6a:	e7e7      	b.n	8024f3c <_dtoa_r+0x48c>
 8024f6c:	2202      	movs	r2, #2
 8024f6e:	e749      	b.n	8024e04 <_dtoa_r+0x354>
 8024f70:	465f      	mov	r7, fp
 8024f72:	4648      	mov	r0, r9
 8024f74:	e765      	b.n	8024e42 <_dtoa_r+0x392>
 8024f76:	ec42 1b17 	vmov	d7, r1, r2
 8024f7a:	4a5c      	ldr	r2, [pc, #368]	; (80250ec <_dtoa_r+0x63c>)
 8024f7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8024f80:	ed12 4b02 	vldr	d4, [r2, #-8]
 8024f84:	9a00      	ldr	r2, [sp, #0]
 8024f86:	1814      	adds	r4, r2, r0
 8024f88:	9a08      	ldr	r2, [sp, #32]
 8024f8a:	b352      	cbz	r2, 8024fe2 <_dtoa_r+0x532>
 8024f8c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8024f90:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8024f94:	f8dd 8000 	ldr.w	r8, [sp]
 8024f98:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8024f9c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8024fa0:	ee35 7b47 	vsub.f64	d7, d5, d7
 8024fa4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024fa8:	ee14 2a90 	vmov	r2, s9
 8024fac:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8024fb0:	3230      	adds	r2, #48	; 0x30
 8024fb2:	ee36 6b45 	vsub.f64	d6, d6, d5
 8024fb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8024fba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fbe:	f808 2b01 	strb.w	r2, [r8], #1
 8024fc2:	d439      	bmi.n	8025038 <_dtoa_r+0x588>
 8024fc4:	ee32 5b46 	vsub.f64	d5, d2, d6
 8024fc8:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8024fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024fd0:	d472      	bmi.n	80250b8 <_dtoa_r+0x608>
 8024fd2:	45a0      	cmp	r8, r4
 8024fd4:	f43f af5d 	beq.w	8024e92 <_dtoa_r+0x3e2>
 8024fd8:	ee27 7b03 	vmul.f64	d7, d7, d3
 8024fdc:	ee26 6b03 	vmul.f64	d6, d6, d3
 8024fe0:	e7e0      	b.n	8024fa4 <_dtoa_r+0x4f4>
 8024fe2:	f8dd 8000 	ldr.w	r8, [sp]
 8024fe6:	ee27 7b04 	vmul.f64	d7, d7, d4
 8024fea:	4621      	mov	r1, r4
 8024fec:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8024ff0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8024ff4:	ee14 2a90 	vmov	r2, s9
 8024ff8:	3230      	adds	r2, #48	; 0x30
 8024ffa:	f808 2b01 	strb.w	r2, [r8], #1
 8024ffe:	45a0      	cmp	r8, r4
 8025000:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8025004:	ee36 6b45 	vsub.f64	d6, d6, d5
 8025008:	d118      	bne.n	802503c <_dtoa_r+0x58c>
 802500a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 802500e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8025012:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8025016:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802501a:	dc4d      	bgt.n	80250b8 <_dtoa_r+0x608>
 802501c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8025020:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8025024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025028:	f57f af33 	bpl.w	8024e92 <_dtoa_r+0x3e2>
 802502c:	4688      	mov	r8, r1
 802502e:	3901      	subs	r1, #1
 8025030:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8025034:	2b30      	cmp	r3, #48	; 0x30
 8025036:	d0f9      	beq.n	802502c <_dtoa_r+0x57c>
 8025038:	46bb      	mov	fp, r7
 802503a:	e02a      	b.n	8025092 <_dtoa_r+0x5e2>
 802503c:	ee26 6b03 	vmul.f64	d6, d6, d3
 8025040:	e7d6      	b.n	8024ff0 <_dtoa_r+0x540>
 8025042:	ed9d 7b02 	vldr	d7, [sp, #8]
 8025046:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 802504a:	f8dd 8000 	ldr.w	r8, [sp]
 802504e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8025052:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8025056:	ee15 3a10 	vmov	r3, s10
 802505a:	3330      	adds	r3, #48	; 0x30
 802505c:	f808 3b01 	strb.w	r3, [r8], #1
 8025060:	9b00      	ldr	r3, [sp, #0]
 8025062:	eba8 0303 	sub.w	r3, r8, r3
 8025066:	4599      	cmp	r9, r3
 8025068:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 802506c:	eea3 7b46 	vfms.f64	d7, d3, d6
 8025070:	d133      	bne.n	80250da <_dtoa_r+0x62a>
 8025072:	ee37 7b07 	vadd.f64	d7, d7, d7
 8025076:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802507a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802507e:	dc1a      	bgt.n	80250b6 <_dtoa_r+0x606>
 8025080:	eeb4 7b46 	vcmp.f64	d7, d6
 8025084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025088:	d103      	bne.n	8025092 <_dtoa_r+0x5e2>
 802508a:	ee15 3a10 	vmov	r3, s10
 802508e:	07d9      	lsls	r1, r3, #31
 8025090:	d411      	bmi.n	80250b6 <_dtoa_r+0x606>
 8025092:	4629      	mov	r1, r5
 8025094:	4630      	mov	r0, r6
 8025096:	f000 fe35 	bl	8025d04 <_Bfree>
 802509a:	2300      	movs	r3, #0
 802509c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 802509e:	f888 3000 	strb.w	r3, [r8]
 80250a2:	f10b 0301 	add.w	r3, fp, #1
 80250a6:	6013      	str	r3, [r2, #0]
 80250a8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80250aa:	2b00      	cmp	r3, #0
 80250ac:	f43f ad4d 	beq.w	8024b4a <_dtoa_r+0x9a>
 80250b0:	f8c3 8000 	str.w	r8, [r3]
 80250b4:	e549      	b.n	8024b4a <_dtoa_r+0x9a>
 80250b6:	465f      	mov	r7, fp
 80250b8:	4643      	mov	r3, r8
 80250ba:	4698      	mov	r8, r3
 80250bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80250c0:	2a39      	cmp	r2, #57	; 0x39
 80250c2:	d106      	bne.n	80250d2 <_dtoa_r+0x622>
 80250c4:	9a00      	ldr	r2, [sp, #0]
 80250c6:	429a      	cmp	r2, r3
 80250c8:	d1f7      	bne.n	80250ba <_dtoa_r+0x60a>
 80250ca:	9900      	ldr	r1, [sp, #0]
 80250cc:	2230      	movs	r2, #48	; 0x30
 80250ce:	3701      	adds	r7, #1
 80250d0:	700a      	strb	r2, [r1, #0]
 80250d2:	781a      	ldrb	r2, [r3, #0]
 80250d4:	3201      	adds	r2, #1
 80250d6:	701a      	strb	r2, [r3, #0]
 80250d8:	e7ae      	b.n	8025038 <_dtoa_r+0x588>
 80250da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80250de:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80250e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80250e6:	d1b2      	bne.n	802504e <_dtoa_r+0x59e>
 80250e8:	e7d3      	b.n	8025092 <_dtoa_r+0x5e2>
 80250ea:	bf00      	nop
 80250ec:	080432e0 	.word	0x080432e0
 80250f0:	080432b8 	.word	0x080432b8
 80250f4:	9908      	ldr	r1, [sp, #32]
 80250f6:	2900      	cmp	r1, #0
 80250f8:	f000 80d1 	beq.w	802529e <_dtoa_r+0x7ee>
 80250fc:	9907      	ldr	r1, [sp, #28]
 80250fe:	2901      	cmp	r1, #1
 8025100:	f300 80b4 	bgt.w	802526c <_dtoa_r+0x7bc>
 8025104:	9911      	ldr	r1, [sp, #68]	; 0x44
 8025106:	2900      	cmp	r1, #0
 8025108:	f000 80ac 	beq.w	8025264 <_dtoa_r+0x7b4>
 802510c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8025110:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8025114:	461c      	mov	r4, r3
 8025116:	930a      	str	r3, [sp, #40]	; 0x28
 8025118:	9b05      	ldr	r3, [sp, #20]
 802511a:	4413      	add	r3, r2
 802511c:	9305      	str	r3, [sp, #20]
 802511e:	9b06      	ldr	r3, [sp, #24]
 8025120:	2101      	movs	r1, #1
 8025122:	4413      	add	r3, r2
 8025124:	4630      	mov	r0, r6
 8025126:	9306      	str	r3, [sp, #24]
 8025128:	f000 fea8 	bl	8025e7c <__i2b>
 802512c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802512e:	4607      	mov	r7, r0
 8025130:	f1b8 0f00 	cmp.w	r8, #0
 8025134:	dd0d      	ble.n	8025152 <_dtoa_r+0x6a2>
 8025136:	9a06      	ldr	r2, [sp, #24]
 8025138:	2a00      	cmp	r2, #0
 802513a:	dd0a      	ble.n	8025152 <_dtoa_r+0x6a2>
 802513c:	4542      	cmp	r2, r8
 802513e:	9905      	ldr	r1, [sp, #20]
 8025140:	bfa8      	it	ge
 8025142:	4642      	movge	r2, r8
 8025144:	1a89      	subs	r1, r1, r2
 8025146:	9105      	str	r1, [sp, #20]
 8025148:	9906      	ldr	r1, [sp, #24]
 802514a:	eba8 0802 	sub.w	r8, r8, r2
 802514e:	1a8a      	subs	r2, r1, r2
 8025150:	9206      	str	r2, [sp, #24]
 8025152:	b303      	cbz	r3, 8025196 <_dtoa_r+0x6e6>
 8025154:	9a08      	ldr	r2, [sp, #32]
 8025156:	2a00      	cmp	r2, #0
 8025158:	f000 80a6 	beq.w	80252a8 <_dtoa_r+0x7f8>
 802515c:	2c00      	cmp	r4, #0
 802515e:	dd13      	ble.n	8025188 <_dtoa_r+0x6d8>
 8025160:	4639      	mov	r1, r7
 8025162:	4622      	mov	r2, r4
 8025164:	4630      	mov	r0, r6
 8025166:	930c      	str	r3, [sp, #48]	; 0x30
 8025168:	f000 ff44 	bl	8025ff4 <__pow5mult>
 802516c:	462a      	mov	r2, r5
 802516e:	4601      	mov	r1, r0
 8025170:	4607      	mov	r7, r0
 8025172:	4630      	mov	r0, r6
 8025174:	f000 fe98 	bl	8025ea8 <__multiply>
 8025178:	4629      	mov	r1, r5
 802517a:	900a      	str	r0, [sp, #40]	; 0x28
 802517c:	4630      	mov	r0, r6
 802517e:	f000 fdc1 	bl	8025d04 <_Bfree>
 8025182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8025184:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8025186:	4615      	mov	r5, r2
 8025188:	1b1a      	subs	r2, r3, r4
 802518a:	d004      	beq.n	8025196 <_dtoa_r+0x6e6>
 802518c:	4629      	mov	r1, r5
 802518e:	4630      	mov	r0, r6
 8025190:	f000 ff30 	bl	8025ff4 <__pow5mult>
 8025194:	4605      	mov	r5, r0
 8025196:	2101      	movs	r1, #1
 8025198:	4630      	mov	r0, r6
 802519a:	f000 fe6f 	bl	8025e7c <__i2b>
 802519e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80251a0:	2b00      	cmp	r3, #0
 80251a2:	4604      	mov	r4, r0
 80251a4:	f340 8082 	ble.w	80252ac <_dtoa_r+0x7fc>
 80251a8:	461a      	mov	r2, r3
 80251aa:	4601      	mov	r1, r0
 80251ac:	4630      	mov	r0, r6
 80251ae:	f000 ff21 	bl	8025ff4 <__pow5mult>
 80251b2:	9b07      	ldr	r3, [sp, #28]
 80251b4:	2b01      	cmp	r3, #1
 80251b6:	4604      	mov	r4, r0
 80251b8:	dd7b      	ble.n	80252b2 <_dtoa_r+0x802>
 80251ba:	2300      	movs	r3, #0
 80251bc:	930a      	str	r3, [sp, #40]	; 0x28
 80251be:	6922      	ldr	r2, [r4, #16]
 80251c0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80251c4:	6910      	ldr	r0, [r2, #16]
 80251c6:	f000 fe09 	bl	8025ddc <__hi0bits>
 80251ca:	f1c0 0020 	rsb	r0, r0, #32
 80251ce:	9b06      	ldr	r3, [sp, #24]
 80251d0:	4418      	add	r0, r3
 80251d2:	f010 001f 	ands.w	r0, r0, #31
 80251d6:	f000 808d 	beq.w	80252f4 <_dtoa_r+0x844>
 80251da:	f1c0 0220 	rsb	r2, r0, #32
 80251de:	2a04      	cmp	r2, #4
 80251e0:	f340 8086 	ble.w	80252f0 <_dtoa_r+0x840>
 80251e4:	f1c0 001c 	rsb	r0, r0, #28
 80251e8:	9b05      	ldr	r3, [sp, #20]
 80251ea:	4403      	add	r3, r0
 80251ec:	9305      	str	r3, [sp, #20]
 80251ee:	9b06      	ldr	r3, [sp, #24]
 80251f0:	4403      	add	r3, r0
 80251f2:	4480      	add	r8, r0
 80251f4:	9306      	str	r3, [sp, #24]
 80251f6:	9b05      	ldr	r3, [sp, #20]
 80251f8:	2b00      	cmp	r3, #0
 80251fa:	dd05      	ble.n	8025208 <_dtoa_r+0x758>
 80251fc:	4629      	mov	r1, r5
 80251fe:	461a      	mov	r2, r3
 8025200:	4630      	mov	r0, r6
 8025202:	f000 ff51 	bl	80260a8 <__lshift>
 8025206:	4605      	mov	r5, r0
 8025208:	9b06      	ldr	r3, [sp, #24]
 802520a:	2b00      	cmp	r3, #0
 802520c:	dd05      	ble.n	802521a <_dtoa_r+0x76a>
 802520e:	4621      	mov	r1, r4
 8025210:	461a      	mov	r2, r3
 8025212:	4630      	mov	r0, r6
 8025214:	f000 ff48 	bl	80260a8 <__lshift>
 8025218:	4604      	mov	r4, r0
 802521a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802521c:	2b00      	cmp	r3, #0
 802521e:	d06b      	beq.n	80252f8 <_dtoa_r+0x848>
 8025220:	4621      	mov	r1, r4
 8025222:	4628      	mov	r0, r5
 8025224:	f000 ffac 	bl	8026180 <__mcmp>
 8025228:	2800      	cmp	r0, #0
 802522a:	da65      	bge.n	80252f8 <_dtoa_r+0x848>
 802522c:	2300      	movs	r3, #0
 802522e:	4629      	mov	r1, r5
 8025230:	220a      	movs	r2, #10
 8025232:	4630      	mov	r0, r6
 8025234:	f000 fd88 	bl	8025d48 <__multadd>
 8025238:	9b08      	ldr	r3, [sp, #32]
 802523a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802523e:	4605      	mov	r5, r0
 8025240:	2b00      	cmp	r3, #0
 8025242:	f000 8192 	beq.w	802556a <_dtoa_r+0xaba>
 8025246:	4639      	mov	r1, r7
 8025248:	2300      	movs	r3, #0
 802524a:	220a      	movs	r2, #10
 802524c:	4630      	mov	r0, r6
 802524e:	f000 fd7b 	bl	8025d48 <__multadd>
 8025252:	f1ba 0f00 	cmp.w	sl, #0
 8025256:	4607      	mov	r7, r0
 8025258:	f300 808e 	bgt.w	8025378 <_dtoa_r+0x8c8>
 802525c:	9b07      	ldr	r3, [sp, #28]
 802525e:	2b02      	cmp	r3, #2
 8025260:	dc51      	bgt.n	8025306 <_dtoa_r+0x856>
 8025262:	e089      	b.n	8025378 <_dtoa_r+0x8c8>
 8025264:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8025266:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 802526a:	e751      	b.n	8025110 <_dtoa_r+0x660>
 802526c:	f109 34ff 	add.w	r4, r9, #4294967295
 8025270:	42a3      	cmp	r3, r4
 8025272:	bfbf      	itttt	lt
 8025274:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8025276:	1ae3      	sublt	r3, r4, r3
 8025278:	18d2      	addlt	r2, r2, r3
 802527a:	4613      	movlt	r3, r2
 802527c:	bfb7      	itett	lt
 802527e:	930e      	strlt	r3, [sp, #56]	; 0x38
 8025280:	1b1c      	subge	r4, r3, r4
 8025282:	4623      	movlt	r3, r4
 8025284:	2400      	movlt	r4, #0
 8025286:	f1b9 0f00 	cmp.w	r9, #0
 802528a:	bfb5      	itete	lt
 802528c:	9a05      	ldrlt	r2, [sp, #20]
 802528e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 8025292:	eba2 0809 	sublt.w	r8, r2, r9
 8025296:	464a      	movge	r2, r9
 8025298:	bfb8      	it	lt
 802529a:	2200      	movlt	r2, #0
 802529c:	e73b      	b.n	8025116 <_dtoa_r+0x666>
 802529e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80252a2:	9f08      	ldr	r7, [sp, #32]
 80252a4:	461c      	mov	r4, r3
 80252a6:	e743      	b.n	8025130 <_dtoa_r+0x680>
 80252a8:	461a      	mov	r2, r3
 80252aa:	e76f      	b.n	802518c <_dtoa_r+0x6dc>
 80252ac:	9b07      	ldr	r3, [sp, #28]
 80252ae:	2b01      	cmp	r3, #1
 80252b0:	dc18      	bgt.n	80252e4 <_dtoa_r+0x834>
 80252b2:	9b02      	ldr	r3, [sp, #8]
 80252b4:	b9b3      	cbnz	r3, 80252e4 <_dtoa_r+0x834>
 80252b6:	9b03      	ldr	r3, [sp, #12]
 80252b8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80252bc:	b9a2      	cbnz	r2, 80252e8 <_dtoa_r+0x838>
 80252be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80252c2:	0d12      	lsrs	r2, r2, #20
 80252c4:	0512      	lsls	r2, r2, #20
 80252c6:	b18a      	cbz	r2, 80252ec <_dtoa_r+0x83c>
 80252c8:	9b05      	ldr	r3, [sp, #20]
 80252ca:	3301      	adds	r3, #1
 80252cc:	9305      	str	r3, [sp, #20]
 80252ce:	9b06      	ldr	r3, [sp, #24]
 80252d0:	3301      	adds	r3, #1
 80252d2:	9306      	str	r3, [sp, #24]
 80252d4:	2301      	movs	r3, #1
 80252d6:	930a      	str	r3, [sp, #40]	; 0x28
 80252d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80252da:	2b00      	cmp	r3, #0
 80252dc:	f47f af6f 	bne.w	80251be <_dtoa_r+0x70e>
 80252e0:	2001      	movs	r0, #1
 80252e2:	e774      	b.n	80251ce <_dtoa_r+0x71e>
 80252e4:	2300      	movs	r3, #0
 80252e6:	e7f6      	b.n	80252d6 <_dtoa_r+0x826>
 80252e8:	9b02      	ldr	r3, [sp, #8]
 80252ea:	e7f4      	b.n	80252d6 <_dtoa_r+0x826>
 80252ec:	920a      	str	r2, [sp, #40]	; 0x28
 80252ee:	e7f3      	b.n	80252d8 <_dtoa_r+0x828>
 80252f0:	d081      	beq.n	80251f6 <_dtoa_r+0x746>
 80252f2:	4610      	mov	r0, r2
 80252f4:	301c      	adds	r0, #28
 80252f6:	e777      	b.n	80251e8 <_dtoa_r+0x738>
 80252f8:	f1b9 0f00 	cmp.w	r9, #0
 80252fc:	dc37      	bgt.n	802536e <_dtoa_r+0x8be>
 80252fe:	9b07      	ldr	r3, [sp, #28]
 8025300:	2b02      	cmp	r3, #2
 8025302:	dd34      	ble.n	802536e <_dtoa_r+0x8be>
 8025304:	46ca      	mov	sl, r9
 8025306:	f1ba 0f00 	cmp.w	sl, #0
 802530a:	d10d      	bne.n	8025328 <_dtoa_r+0x878>
 802530c:	4621      	mov	r1, r4
 802530e:	4653      	mov	r3, sl
 8025310:	2205      	movs	r2, #5
 8025312:	4630      	mov	r0, r6
 8025314:	f000 fd18 	bl	8025d48 <__multadd>
 8025318:	4601      	mov	r1, r0
 802531a:	4604      	mov	r4, r0
 802531c:	4628      	mov	r0, r5
 802531e:	f000 ff2f 	bl	8026180 <__mcmp>
 8025322:	2800      	cmp	r0, #0
 8025324:	f73f adde 	bgt.w	8024ee4 <_dtoa_r+0x434>
 8025328:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802532a:	f8dd 8000 	ldr.w	r8, [sp]
 802532e:	ea6f 0b03 	mvn.w	fp, r3
 8025332:	f04f 0900 	mov.w	r9, #0
 8025336:	4621      	mov	r1, r4
 8025338:	4630      	mov	r0, r6
 802533a:	f000 fce3 	bl	8025d04 <_Bfree>
 802533e:	2f00      	cmp	r7, #0
 8025340:	f43f aea7 	beq.w	8025092 <_dtoa_r+0x5e2>
 8025344:	f1b9 0f00 	cmp.w	r9, #0
 8025348:	d005      	beq.n	8025356 <_dtoa_r+0x8a6>
 802534a:	45b9      	cmp	r9, r7
 802534c:	d003      	beq.n	8025356 <_dtoa_r+0x8a6>
 802534e:	4649      	mov	r1, r9
 8025350:	4630      	mov	r0, r6
 8025352:	f000 fcd7 	bl	8025d04 <_Bfree>
 8025356:	4639      	mov	r1, r7
 8025358:	4630      	mov	r0, r6
 802535a:	f000 fcd3 	bl	8025d04 <_Bfree>
 802535e:	e698      	b.n	8025092 <_dtoa_r+0x5e2>
 8025360:	2400      	movs	r4, #0
 8025362:	4627      	mov	r7, r4
 8025364:	e7e0      	b.n	8025328 <_dtoa_r+0x878>
 8025366:	46bb      	mov	fp, r7
 8025368:	4604      	mov	r4, r0
 802536a:	4607      	mov	r7, r0
 802536c:	e5ba      	b.n	8024ee4 <_dtoa_r+0x434>
 802536e:	9b08      	ldr	r3, [sp, #32]
 8025370:	46ca      	mov	sl, r9
 8025372:	2b00      	cmp	r3, #0
 8025374:	f000 8100 	beq.w	8025578 <_dtoa_r+0xac8>
 8025378:	f1b8 0f00 	cmp.w	r8, #0
 802537c:	dd05      	ble.n	802538a <_dtoa_r+0x8da>
 802537e:	4639      	mov	r1, r7
 8025380:	4642      	mov	r2, r8
 8025382:	4630      	mov	r0, r6
 8025384:	f000 fe90 	bl	80260a8 <__lshift>
 8025388:	4607      	mov	r7, r0
 802538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802538c:	2b00      	cmp	r3, #0
 802538e:	d05d      	beq.n	802544c <_dtoa_r+0x99c>
 8025390:	6879      	ldr	r1, [r7, #4]
 8025392:	4630      	mov	r0, r6
 8025394:	f000 fc76 	bl	8025c84 <_Balloc>
 8025398:	4680      	mov	r8, r0
 802539a:	b928      	cbnz	r0, 80253a8 <_dtoa_r+0x8f8>
 802539c:	4b82      	ldr	r3, [pc, #520]	; (80255a8 <_dtoa_r+0xaf8>)
 802539e:	4602      	mov	r2, r0
 80253a0:	f240 21ea 	movw	r1, #746	; 0x2ea
 80253a4:	f7ff bb9a 	b.w	8024adc <_dtoa_r+0x2c>
 80253a8:	693a      	ldr	r2, [r7, #16]
 80253aa:	3202      	adds	r2, #2
 80253ac:	0092      	lsls	r2, r2, #2
 80253ae:	f107 010c 	add.w	r1, r7, #12
 80253b2:	300c      	adds	r0, #12
 80253b4:	f7fc fefc 	bl	80221b0 <memcpy>
 80253b8:	2201      	movs	r2, #1
 80253ba:	4641      	mov	r1, r8
 80253bc:	4630      	mov	r0, r6
 80253be:	f000 fe73 	bl	80260a8 <__lshift>
 80253c2:	9b00      	ldr	r3, [sp, #0]
 80253c4:	3301      	adds	r3, #1
 80253c6:	9305      	str	r3, [sp, #20]
 80253c8:	9b00      	ldr	r3, [sp, #0]
 80253ca:	4453      	add	r3, sl
 80253cc:	9309      	str	r3, [sp, #36]	; 0x24
 80253ce:	9b02      	ldr	r3, [sp, #8]
 80253d0:	f003 0301 	and.w	r3, r3, #1
 80253d4:	46b9      	mov	r9, r7
 80253d6:	9308      	str	r3, [sp, #32]
 80253d8:	4607      	mov	r7, r0
 80253da:	9b05      	ldr	r3, [sp, #20]
 80253dc:	4621      	mov	r1, r4
 80253de:	3b01      	subs	r3, #1
 80253e0:	4628      	mov	r0, r5
 80253e2:	9302      	str	r3, [sp, #8]
 80253e4:	f7ff fad6 	bl	8024994 <quorem>
 80253e8:	4603      	mov	r3, r0
 80253ea:	3330      	adds	r3, #48	; 0x30
 80253ec:	9006      	str	r0, [sp, #24]
 80253ee:	4649      	mov	r1, r9
 80253f0:	4628      	mov	r0, r5
 80253f2:	930a      	str	r3, [sp, #40]	; 0x28
 80253f4:	f000 fec4 	bl	8026180 <__mcmp>
 80253f8:	463a      	mov	r2, r7
 80253fa:	4682      	mov	sl, r0
 80253fc:	4621      	mov	r1, r4
 80253fe:	4630      	mov	r0, r6
 8025400:	f000 feda 	bl	80261b8 <__mdiff>
 8025404:	68c2      	ldr	r2, [r0, #12]
 8025406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025408:	4680      	mov	r8, r0
 802540a:	bb0a      	cbnz	r2, 8025450 <_dtoa_r+0x9a0>
 802540c:	4601      	mov	r1, r0
 802540e:	4628      	mov	r0, r5
 8025410:	f000 feb6 	bl	8026180 <__mcmp>
 8025414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025416:	4602      	mov	r2, r0
 8025418:	4641      	mov	r1, r8
 802541a:	4630      	mov	r0, r6
 802541c:	920e      	str	r2, [sp, #56]	; 0x38
 802541e:	930a      	str	r3, [sp, #40]	; 0x28
 8025420:	f000 fc70 	bl	8025d04 <_Bfree>
 8025424:	9b07      	ldr	r3, [sp, #28]
 8025426:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8025428:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802542c:	ea43 0102 	orr.w	r1, r3, r2
 8025430:	9b08      	ldr	r3, [sp, #32]
 8025432:	430b      	orrs	r3, r1
 8025434:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8025436:	d10d      	bne.n	8025454 <_dtoa_r+0x9a4>
 8025438:	2b39      	cmp	r3, #57	; 0x39
 802543a:	d029      	beq.n	8025490 <_dtoa_r+0x9e0>
 802543c:	f1ba 0f00 	cmp.w	sl, #0
 8025440:	dd01      	ble.n	8025446 <_dtoa_r+0x996>
 8025442:	9b06      	ldr	r3, [sp, #24]
 8025444:	3331      	adds	r3, #49	; 0x31
 8025446:	9a02      	ldr	r2, [sp, #8]
 8025448:	7013      	strb	r3, [r2, #0]
 802544a:	e774      	b.n	8025336 <_dtoa_r+0x886>
 802544c:	4638      	mov	r0, r7
 802544e:	e7b8      	b.n	80253c2 <_dtoa_r+0x912>
 8025450:	2201      	movs	r2, #1
 8025452:	e7e1      	b.n	8025418 <_dtoa_r+0x968>
 8025454:	f1ba 0f00 	cmp.w	sl, #0
 8025458:	db06      	blt.n	8025468 <_dtoa_r+0x9b8>
 802545a:	9907      	ldr	r1, [sp, #28]
 802545c:	ea41 0a0a 	orr.w	sl, r1, sl
 8025460:	9908      	ldr	r1, [sp, #32]
 8025462:	ea5a 0101 	orrs.w	r1, sl, r1
 8025466:	d120      	bne.n	80254aa <_dtoa_r+0x9fa>
 8025468:	2a00      	cmp	r2, #0
 802546a:	ddec      	ble.n	8025446 <_dtoa_r+0x996>
 802546c:	4629      	mov	r1, r5
 802546e:	2201      	movs	r2, #1
 8025470:	4630      	mov	r0, r6
 8025472:	9305      	str	r3, [sp, #20]
 8025474:	f000 fe18 	bl	80260a8 <__lshift>
 8025478:	4621      	mov	r1, r4
 802547a:	4605      	mov	r5, r0
 802547c:	f000 fe80 	bl	8026180 <__mcmp>
 8025480:	2800      	cmp	r0, #0
 8025482:	9b05      	ldr	r3, [sp, #20]
 8025484:	dc02      	bgt.n	802548c <_dtoa_r+0x9dc>
 8025486:	d1de      	bne.n	8025446 <_dtoa_r+0x996>
 8025488:	07da      	lsls	r2, r3, #31
 802548a:	d5dc      	bpl.n	8025446 <_dtoa_r+0x996>
 802548c:	2b39      	cmp	r3, #57	; 0x39
 802548e:	d1d8      	bne.n	8025442 <_dtoa_r+0x992>
 8025490:	9a02      	ldr	r2, [sp, #8]
 8025492:	2339      	movs	r3, #57	; 0x39
 8025494:	7013      	strb	r3, [r2, #0]
 8025496:	4643      	mov	r3, r8
 8025498:	4698      	mov	r8, r3
 802549a:	3b01      	subs	r3, #1
 802549c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80254a0:	2a39      	cmp	r2, #57	; 0x39
 80254a2:	d051      	beq.n	8025548 <_dtoa_r+0xa98>
 80254a4:	3201      	adds	r2, #1
 80254a6:	701a      	strb	r2, [r3, #0]
 80254a8:	e745      	b.n	8025336 <_dtoa_r+0x886>
 80254aa:	2a00      	cmp	r2, #0
 80254ac:	dd03      	ble.n	80254b6 <_dtoa_r+0xa06>
 80254ae:	2b39      	cmp	r3, #57	; 0x39
 80254b0:	d0ee      	beq.n	8025490 <_dtoa_r+0x9e0>
 80254b2:	3301      	adds	r3, #1
 80254b4:	e7c7      	b.n	8025446 <_dtoa_r+0x996>
 80254b6:	9a05      	ldr	r2, [sp, #20]
 80254b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80254ba:	f802 3c01 	strb.w	r3, [r2, #-1]
 80254be:	428a      	cmp	r2, r1
 80254c0:	d02b      	beq.n	802551a <_dtoa_r+0xa6a>
 80254c2:	4629      	mov	r1, r5
 80254c4:	2300      	movs	r3, #0
 80254c6:	220a      	movs	r2, #10
 80254c8:	4630      	mov	r0, r6
 80254ca:	f000 fc3d 	bl	8025d48 <__multadd>
 80254ce:	45b9      	cmp	r9, r7
 80254d0:	4605      	mov	r5, r0
 80254d2:	f04f 0300 	mov.w	r3, #0
 80254d6:	f04f 020a 	mov.w	r2, #10
 80254da:	4649      	mov	r1, r9
 80254dc:	4630      	mov	r0, r6
 80254de:	d107      	bne.n	80254f0 <_dtoa_r+0xa40>
 80254e0:	f000 fc32 	bl	8025d48 <__multadd>
 80254e4:	4681      	mov	r9, r0
 80254e6:	4607      	mov	r7, r0
 80254e8:	9b05      	ldr	r3, [sp, #20]
 80254ea:	3301      	adds	r3, #1
 80254ec:	9305      	str	r3, [sp, #20]
 80254ee:	e774      	b.n	80253da <_dtoa_r+0x92a>
 80254f0:	f000 fc2a 	bl	8025d48 <__multadd>
 80254f4:	4639      	mov	r1, r7
 80254f6:	4681      	mov	r9, r0
 80254f8:	2300      	movs	r3, #0
 80254fa:	220a      	movs	r2, #10
 80254fc:	4630      	mov	r0, r6
 80254fe:	f000 fc23 	bl	8025d48 <__multadd>
 8025502:	4607      	mov	r7, r0
 8025504:	e7f0      	b.n	80254e8 <_dtoa_r+0xa38>
 8025506:	f1ba 0f00 	cmp.w	sl, #0
 802550a:	9a00      	ldr	r2, [sp, #0]
 802550c:	bfcc      	ite	gt
 802550e:	46d0      	movgt	r8, sl
 8025510:	f04f 0801 	movle.w	r8, #1
 8025514:	4490      	add	r8, r2
 8025516:	f04f 0900 	mov.w	r9, #0
 802551a:	4629      	mov	r1, r5
 802551c:	2201      	movs	r2, #1
 802551e:	4630      	mov	r0, r6
 8025520:	9302      	str	r3, [sp, #8]
 8025522:	f000 fdc1 	bl	80260a8 <__lshift>
 8025526:	4621      	mov	r1, r4
 8025528:	4605      	mov	r5, r0
 802552a:	f000 fe29 	bl	8026180 <__mcmp>
 802552e:	2800      	cmp	r0, #0
 8025530:	dcb1      	bgt.n	8025496 <_dtoa_r+0x9e6>
 8025532:	d102      	bne.n	802553a <_dtoa_r+0xa8a>
 8025534:	9b02      	ldr	r3, [sp, #8]
 8025536:	07db      	lsls	r3, r3, #31
 8025538:	d4ad      	bmi.n	8025496 <_dtoa_r+0x9e6>
 802553a:	4643      	mov	r3, r8
 802553c:	4698      	mov	r8, r3
 802553e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8025542:	2a30      	cmp	r2, #48	; 0x30
 8025544:	d0fa      	beq.n	802553c <_dtoa_r+0xa8c>
 8025546:	e6f6      	b.n	8025336 <_dtoa_r+0x886>
 8025548:	9a00      	ldr	r2, [sp, #0]
 802554a:	429a      	cmp	r2, r3
 802554c:	d1a4      	bne.n	8025498 <_dtoa_r+0x9e8>
 802554e:	f10b 0b01 	add.w	fp, fp, #1
 8025552:	2331      	movs	r3, #49	; 0x31
 8025554:	e778      	b.n	8025448 <_dtoa_r+0x998>
 8025556:	4b15      	ldr	r3, [pc, #84]	; (80255ac <_dtoa_r+0xafc>)
 8025558:	f7ff bb12 	b.w	8024b80 <_dtoa_r+0xd0>
 802555c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802555e:	2b00      	cmp	r3, #0
 8025560:	f47f aaee 	bne.w	8024b40 <_dtoa_r+0x90>
 8025564:	4b12      	ldr	r3, [pc, #72]	; (80255b0 <_dtoa_r+0xb00>)
 8025566:	f7ff bb0b 	b.w	8024b80 <_dtoa_r+0xd0>
 802556a:	f1ba 0f00 	cmp.w	sl, #0
 802556e:	dc03      	bgt.n	8025578 <_dtoa_r+0xac8>
 8025570:	9b07      	ldr	r3, [sp, #28]
 8025572:	2b02      	cmp	r3, #2
 8025574:	f73f aec7 	bgt.w	8025306 <_dtoa_r+0x856>
 8025578:	f8dd 8000 	ldr.w	r8, [sp]
 802557c:	4621      	mov	r1, r4
 802557e:	4628      	mov	r0, r5
 8025580:	f7ff fa08 	bl	8024994 <quorem>
 8025584:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8025588:	f808 3b01 	strb.w	r3, [r8], #1
 802558c:	9a00      	ldr	r2, [sp, #0]
 802558e:	eba8 0202 	sub.w	r2, r8, r2
 8025592:	4592      	cmp	sl, r2
 8025594:	ddb7      	ble.n	8025506 <_dtoa_r+0xa56>
 8025596:	4629      	mov	r1, r5
 8025598:	2300      	movs	r3, #0
 802559a:	220a      	movs	r2, #10
 802559c:	4630      	mov	r0, r6
 802559e:	f000 fbd3 	bl	8025d48 <__multadd>
 80255a2:	4605      	mov	r5, r0
 80255a4:	e7ea      	b.n	802557c <_dtoa_r+0xacc>
 80255a6:	bf00      	nop
 80255a8:	080431d5 	.word	0x080431d5
 80255ac:	080433c9 	.word	0x080433c9
 80255b0:	08043169 	.word	0x08043169

080255b4 <__errno>:
 80255b4:	4b01      	ldr	r3, [pc, #4]	; (80255bc <__errno+0x8>)
 80255b6:	6818      	ldr	r0, [r3, #0]
 80255b8:	4770      	bx	lr
 80255ba:	bf00      	nop
 80255bc:	20000488 	.word	0x20000488

080255c0 <__sflush_r>:
 80255c0:	898a      	ldrh	r2, [r1, #12]
 80255c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255c6:	4605      	mov	r5, r0
 80255c8:	0710      	lsls	r0, r2, #28
 80255ca:	460c      	mov	r4, r1
 80255cc:	d458      	bmi.n	8025680 <__sflush_r+0xc0>
 80255ce:	684b      	ldr	r3, [r1, #4]
 80255d0:	2b00      	cmp	r3, #0
 80255d2:	dc05      	bgt.n	80255e0 <__sflush_r+0x20>
 80255d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80255d6:	2b00      	cmp	r3, #0
 80255d8:	dc02      	bgt.n	80255e0 <__sflush_r+0x20>
 80255da:	2000      	movs	r0, #0
 80255dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80255e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80255e2:	2e00      	cmp	r6, #0
 80255e4:	d0f9      	beq.n	80255da <__sflush_r+0x1a>
 80255e6:	2300      	movs	r3, #0
 80255e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80255ec:	682f      	ldr	r7, [r5, #0]
 80255ee:	602b      	str	r3, [r5, #0]
 80255f0:	d032      	beq.n	8025658 <__sflush_r+0x98>
 80255f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80255f4:	89a3      	ldrh	r3, [r4, #12]
 80255f6:	075a      	lsls	r2, r3, #29
 80255f8:	d505      	bpl.n	8025606 <__sflush_r+0x46>
 80255fa:	6863      	ldr	r3, [r4, #4]
 80255fc:	1ac0      	subs	r0, r0, r3
 80255fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8025600:	b10b      	cbz	r3, 8025606 <__sflush_r+0x46>
 8025602:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8025604:	1ac0      	subs	r0, r0, r3
 8025606:	2300      	movs	r3, #0
 8025608:	4602      	mov	r2, r0
 802560a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802560c:	6a21      	ldr	r1, [r4, #32]
 802560e:	4628      	mov	r0, r5
 8025610:	47b0      	blx	r6
 8025612:	1c43      	adds	r3, r0, #1
 8025614:	89a3      	ldrh	r3, [r4, #12]
 8025616:	d106      	bne.n	8025626 <__sflush_r+0x66>
 8025618:	6829      	ldr	r1, [r5, #0]
 802561a:	291d      	cmp	r1, #29
 802561c:	d82c      	bhi.n	8025678 <__sflush_r+0xb8>
 802561e:	4a2a      	ldr	r2, [pc, #168]	; (80256c8 <__sflush_r+0x108>)
 8025620:	40ca      	lsrs	r2, r1
 8025622:	07d6      	lsls	r6, r2, #31
 8025624:	d528      	bpl.n	8025678 <__sflush_r+0xb8>
 8025626:	2200      	movs	r2, #0
 8025628:	6062      	str	r2, [r4, #4]
 802562a:	04d9      	lsls	r1, r3, #19
 802562c:	6922      	ldr	r2, [r4, #16]
 802562e:	6022      	str	r2, [r4, #0]
 8025630:	d504      	bpl.n	802563c <__sflush_r+0x7c>
 8025632:	1c42      	adds	r2, r0, #1
 8025634:	d101      	bne.n	802563a <__sflush_r+0x7a>
 8025636:	682b      	ldr	r3, [r5, #0]
 8025638:	b903      	cbnz	r3, 802563c <__sflush_r+0x7c>
 802563a:	6560      	str	r0, [r4, #84]	; 0x54
 802563c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802563e:	602f      	str	r7, [r5, #0]
 8025640:	2900      	cmp	r1, #0
 8025642:	d0ca      	beq.n	80255da <__sflush_r+0x1a>
 8025644:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8025648:	4299      	cmp	r1, r3
 802564a:	d002      	beq.n	8025652 <__sflush_r+0x92>
 802564c:	4628      	mov	r0, r5
 802564e:	f7fd f85d 	bl	802270c <_free_r>
 8025652:	2000      	movs	r0, #0
 8025654:	6360      	str	r0, [r4, #52]	; 0x34
 8025656:	e7c1      	b.n	80255dc <__sflush_r+0x1c>
 8025658:	6a21      	ldr	r1, [r4, #32]
 802565a:	2301      	movs	r3, #1
 802565c:	4628      	mov	r0, r5
 802565e:	47b0      	blx	r6
 8025660:	1c41      	adds	r1, r0, #1
 8025662:	d1c7      	bne.n	80255f4 <__sflush_r+0x34>
 8025664:	682b      	ldr	r3, [r5, #0]
 8025666:	2b00      	cmp	r3, #0
 8025668:	d0c4      	beq.n	80255f4 <__sflush_r+0x34>
 802566a:	2b1d      	cmp	r3, #29
 802566c:	d001      	beq.n	8025672 <__sflush_r+0xb2>
 802566e:	2b16      	cmp	r3, #22
 8025670:	d101      	bne.n	8025676 <__sflush_r+0xb6>
 8025672:	602f      	str	r7, [r5, #0]
 8025674:	e7b1      	b.n	80255da <__sflush_r+0x1a>
 8025676:	89a3      	ldrh	r3, [r4, #12]
 8025678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802567c:	81a3      	strh	r3, [r4, #12]
 802567e:	e7ad      	b.n	80255dc <__sflush_r+0x1c>
 8025680:	690f      	ldr	r7, [r1, #16]
 8025682:	2f00      	cmp	r7, #0
 8025684:	d0a9      	beq.n	80255da <__sflush_r+0x1a>
 8025686:	0793      	lsls	r3, r2, #30
 8025688:	680e      	ldr	r6, [r1, #0]
 802568a:	bf08      	it	eq
 802568c:	694b      	ldreq	r3, [r1, #20]
 802568e:	600f      	str	r7, [r1, #0]
 8025690:	bf18      	it	ne
 8025692:	2300      	movne	r3, #0
 8025694:	eba6 0807 	sub.w	r8, r6, r7
 8025698:	608b      	str	r3, [r1, #8]
 802569a:	f1b8 0f00 	cmp.w	r8, #0
 802569e:	dd9c      	ble.n	80255da <__sflush_r+0x1a>
 80256a0:	6a21      	ldr	r1, [r4, #32]
 80256a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80256a4:	4643      	mov	r3, r8
 80256a6:	463a      	mov	r2, r7
 80256a8:	4628      	mov	r0, r5
 80256aa:	47b0      	blx	r6
 80256ac:	2800      	cmp	r0, #0
 80256ae:	dc06      	bgt.n	80256be <__sflush_r+0xfe>
 80256b0:	89a3      	ldrh	r3, [r4, #12]
 80256b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80256b6:	81a3      	strh	r3, [r4, #12]
 80256b8:	f04f 30ff 	mov.w	r0, #4294967295
 80256bc:	e78e      	b.n	80255dc <__sflush_r+0x1c>
 80256be:	4407      	add	r7, r0
 80256c0:	eba8 0800 	sub.w	r8, r8, r0
 80256c4:	e7e9      	b.n	802569a <__sflush_r+0xda>
 80256c6:	bf00      	nop
 80256c8:	20400001 	.word	0x20400001

080256cc <_fflush_r>:
 80256cc:	b538      	push	{r3, r4, r5, lr}
 80256ce:	690b      	ldr	r3, [r1, #16]
 80256d0:	4605      	mov	r5, r0
 80256d2:	460c      	mov	r4, r1
 80256d4:	b913      	cbnz	r3, 80256dc <_fflush_r+0x10>
 80256d6:	2500      	movs	r5, #0
 80256d8:	4628      	mov	r0, r5
 80256da:	bd38      	pop	{r3, r4, r5, pc}
 80256dc:	b118      	cbz	r0, 80256e6 <_fflush_r+0x1a>
 80256de:	6983      	ldr	r3, [r0, #24]
 80256e0:	b90b      	cbnz	r3, 80256e6 <_fflush_r+0x1a>
 80256e2:	f000 f887 	bl	80257f4 <__sinit>
 80256e6:	4b14      	ldr	r3, [pc, #80]	; (8025738 <_fflush_r+0x6c>)
 80256e8:	429c      	cmp	r4, r3
 80256ea:	d11b      	bne.n	8025724 <_fflush_r+0x58>
 80256ec:	686c      	ldr	r4, [r5, #4]
 80256ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80256f2:	2b00      	cmp	r3, #0
 80256f4:	d0ef      	beq.n	80256d6 <_fflush_r+0xa>
 80256f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80256f8:	07d0      	lsls	r0, r2, #31
 80256fa:	d404      	bmi.n	8025706 <_fflush_r+0x3a>
 80256fc:	0599      	lsls	r1, r3, #22
 80256fe:	d402      	bmi.n	8025706 <_fflush_r+0x3a>
 8025700:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8025702:	f000 fa27 	bl	8025b54 <__retarget_lock_acquire_recursive>
 8025706:	4628      	mov	r0, r5
 8025708:	4621      	mov	r1, r4
 802570a:	f7ff ff59 	bl	80255c0 <__sflush_r>
 802570e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8025710:	07da      	lsls	r2, r3, #31
 8025712:	4605      	mov	r5, r0
 8025714:	d4e0      	bmi.n	80256d8 <_fflush_r+0xc>
 8025716:	89a3      	ldrh	r3, [r4, #12]
 8025718:	059b      	lsls	r3, r3, #22
 802571a:	d4dd      	bmi.n	80256d8 <_fflush_r+0xc>
 802571c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802571e:	f000 fa1b 	bl	8025b58 <__retarget_lock_release_recursive>
 8025722:	e7d9      	b.n	80256d8 <_fflush_r+0xc>
 8025724:	4b05      	ldr	r3, [pc, #20]	; (802573c <_fflush_r+0x70>)
 8025726:	429c      	cmp	r4, r3
 8025728:	d101      	bne.n	802572e <_fflush_r+0x62>
 802572a:	68ac      	ldr	r4, [r5, #8]
 802572c:	e7df      	b.n	80256ee <_fflush_r+0x22>
 802572e:	4b04      	ldr	r3, [pc, #16]	; (8025740 <_fflush_r+0x74>)
 8025730:	429c      	cmp	r4, r3
 8025732:	bf08      	it	eq
 8025734:	68ec      	ldreq	r4, [r5, #12]
 8025736:	e7da      	b.n	80256ee <_fflush_r+0x22>
 8025738:	08043208 	.word	0x08043208
 802573c:	08043228 	.word	0x08043228
 8025740:	080431e8 	.word	0x080431e8

08025744 <std>:
 8025744:	2300      	movs	r3, #0
 8025746:	b510      	push	{r4, lr}
 8025748:	4604      	mov	r4, r0
 802574a:	e9c0 3300 	strd	r3, r3, [r0]
 802574e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8025752:	6083      	str	r3, [r0, #8]
 8025754:	8181      	strh	r1, [r0, #12]
 8025756:	6643      	str	r3, [r0, #100]	; 0x64
 8025758:	81c2      	strh	r2, [r0, #14]
 802575a:	6183      	str	r3, [r0, #24]
 802575c:	4619      	mov	r1, r3
 802575e:	2208      	movs	r2, #8
 8025760:	305c      	adds	r0, #92	; 0x5c
 8025762:	f7fc fd4d 	bl	8022200 <memset>
 8025766:	4b05      	ldr	r3, [pc, #20]	; (802577c <std+0x38>)
 8025768:	6263      	str	r3, [r4, #36]	; 0x24
 802576a:	4b05      	ldr	r3, [pc, #20]	; (8025780 <std+0x3c>)
 802576c:	62a3      	str	r3, [r4, #40]	; 0x28
 802576e:	4b05      	ldr	r3, [pc, #20]	; (8025784 <std+0x40>)
 8025770:	62e3      	str	r3, [r4, #44]	; 0x2c
 8025772:	4b05      	ldr	r3, [pc, #20]	; (8025788 <std+0x44>)
 8025774:	6224      	str	r4, [r4, #32]
 8025776:	6323      	str	r3, [r4, #48]	; 0x30
 8025778:	bd10      	pop	{r4, pc}
 802577a:	bf00      	nop
 802577c:	0802346d 	.word	0x0802346d
 8025780:	08023493 	.word	0x08023493
 8025784:	080234cb 	.word	0x080234cb
 8025788:	080234ef 	.word	0x080234ef

0802578c <_cleanup_r>:
 802578c:	4901      	ldr	r1, [pc, #4]	; (8025794 <_cleanup_r+0x8>)
 802578e:	f000 b8c1 	b.w	8025914 <_fwalk_reent>
 8025792:	bf00      	nop
 8025794:	080256cd 	.word	0x080256cd

08025798 <__sfmoreglue>:
 8025798:	b570      	push	{r4, r5, r6, lr}
 802579a:	1e4a      	subs	r2, r1, #1
 802579c:	2568      	movs	r5, #104	; 0x68
 802579e:	4355      	muls	r5, r2
 80257a0:	460e      	mov	r6, r1
 80257a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80257a6:	f7fd f801 	bl	80227ac <_malloc_r>
 80257aa:	4604      	mov	r4, r0
 80257ac:	b140      	cbz	r0, 80257c0 <__sfmoreglue+0x28>
 80257ae:	2100      	movs	r1, #0
 80257b0:	e9c0 1600 	strd	r1, r6, [r0]
 80257b4:	300c      	adds	r0, #12
 80257b6:	60a0      	str	r0, [r4, #8]
 80257b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80257bc:	f7fc fd20 	bl	8022200 <memset>
 80257c0:	4620      	mov	r0, r4
 80257c2:	bd70      	pop	{r4, r5, r6, pc}

080257c4 <__sfp_lock_acquire>:
 80257c4:	4801      	ldr	r0, [pc, #4]	; (80257cc <__sfp_lock_acquire+0x8>)
 80257c6:	f000 b9c5 	b.w	8025b54 <__retarget_lock_acquire_recursive>
 80257ca:	bf00      	nop
 80257cc:	2002fdcc 	.word	0x2002fdcc

080257d0 <__sfp_lock_release>:
 80257d0:	4801      	ldr	r0, [pc, #4]	; (80257d8 <__sfp_lock_release+0x8>)
 80257d2:	f000 b9c1 	b.w	8025b58 <__retarget_lock_release_recursive>
 80257d6:	bf00      	nop
 80257d8:	2002fdcc 	.word	0x2002fdcc

080257dc <__sinit_lock_acquire>:
 80257dc:	4801      	ldr	r0, [pc, #4]	; (80257e4 <__sinit_lock_acquire+0x8>)
 80257de:	f000 b9b9 	b.w	8025b54 <__retarget_lock_acquire_recursive>
 80257e2:	bf00      	nop
 80257e4:	2002fdc7 	.word	0x2002fdc7

080257e8 <__sinit_lock_release>:
 80257e8:	4801      	ldr	r0, [pc, #4]	; (80257f0 <__sinit_lock_release+0x8>)
 80257ea:	f000 b9b5 	b.w	8025b58 <__retarget_lock_release_recursive>
 80257ee:	bf00      	nop
 80257f0:	2002fdc7 	.word	0x2002fdc7

080257f4 <__sinit>:
 80257f4:	b510      	push	{r4, lr}
 80257f6:	4604      	mov	r4, r0
 80257f8:	f7ff fff0 	bl	80257dc <__sinit_lock_acquire>
 80257fc:	69a3      	ldr	r3, [r4, #24]
 80257fe:	b11b      	cbz	r3, 8025808 <__sinit+0x14>
 8025800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025804:	f7ff bff0 	b.w	80257e8 <__sinit_lock_release>
 8025808:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802580c:	6523      	str	r3, [r4, #80]	; 0x50
 802580e:	4b13      	ldr	r3, [pc, #76]	; (802585c <__sinit+0x68>)
 8025810:	4a13      	ldr	r2, [pc, #76]	; (8025860 <__sinit+0x6c>)
 8025812:	681b      	ldr	r3, [r3, #0]
 8025814:	62a2      	str	r2, [r4, #40]	; 0x28
 8025816:	42a3      	cmp	r3, r4
 8025818:	bf04      	itt	eq
 802581a:	2301      	moveq	r3, #1
 802581c:	61a3      	streq	r3, [r4, #24]
 802581e:	4620      	mov	r0, r4
 8025820:	f000 f820 	bl	8025864 <__sfp>
 8025824:	6060      	str	r0, [r4, #4]
 8025826:	4620      	mov	r0, r4
 8025828:	f000 f81c 	bl	8025864 <__sfp>
 802582c:	60a0      	str	r0, [r4, #8]
 802582e:	4620      	mov	r0, r4
 8025830:	f000 f818 	bl	8025864 <__sfp>
 8025834:	2200      	movs	r2, #0
 8025836:	60e0      	str	r0, [r4, #12]
 8025838:	2104      	movs	r1, #4
 802583a:	6860      	ldr	r0, [r4, #4]
 802583c:	f7ff ff82 	bl	8025744 <std>
 8025840:	68a0      	ldr	r0, [r4, #8]
 8025842:	2201      	movs	r2, #1
 8025844:	2109      	movs	r1, #9
 8025846:	f7ff ff7d 	bl	8025744 <std>
 802584a:	68e0      	ldr	r0, [r4, #12]
 802584c:	2202      	movs	r2, #2
 802584e:	2112      	movs	r1, #18
 8025850:	f7ff ff78 	bl	8025744 <std>
 8025854:	2301      	movs	r3, #1
 8025856:	61a3      	str	r3, [r4, #24]
 8025858:	e7d2      	b.n	8025800 <__sinit+0xc>
 802585a:	bf00      	nop
 802585c:	08042be8 	.word	0x08042be8
 8025860:	0802578d 	.word	0x0802578d

08025864 <__sfp>:
 8025864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025866:	4607      	mov	r7, r0
 8025868:	f7ff ffac 	bl	80257c4 <__sfp_lock_acquire>
 802586c:	4b1e      	ldr	r3, [pc, #120]	; (80258e8 <__sfp+0x84>)
 802586e:	681e      	ldr	r6, [r3, #0]
 8025870:	69b3      	ldr	r3, [r6, #24]
 8025872:	b913      	cbnz	r3, 802587a <__sfp+0x16>
 8025874:	4630      	mov	r0, r6
 8025876:	f7ff ffbd 	bl	80257f4 <__sinit>
 802587a:	3648      	adds	r6, #72	; 0x48
 802587c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8025880:	3b01      	subs	r3, #1
 8025882:	d503      	bpl.n	802588c <__sfp+0x28>
 8025884:	6833      	ldr	r3, [r6, #0]
 8025886:	b30b      	cbz	r3, 80258cc <__sfp+0x68>
 8025888:	6836      	ldr	r6, [r6, #0]
 802588a:	e7f7      	b.n	802587c <__sfp+0x18>
 802588c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8025890:	b9d5      	cbnz	r5, 80258c8 <__sfp+0x64>
 8025892:	4b16      	ldr	r3, [pc, #88]	; (80258ec <__sfp+0x88>)
 8025894:	60e3      	str	r3, [r4, #12]
 8025896:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802589a:	6665      	str	r5, [r4, #100]	; 0x64
 802589c:	f000 f958 	bl	8025b50 <__retarget_lock_init_recursive>
 80258a0:	f7ff ff96 	bl	80257d0 <__sfp_lock_release>
 80258a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80258a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80258ac:	6025      	str	r5, [r4, #0]
 80258ae:	61a5      	str	r5, [r4, #24]
 80258b0:	2208      	movs	r2, #8
 80258b2:	4629      	mov	r1, r5
 80258b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80258b8:	f7fc fca2 	bl	8022200 <memset>
 80258bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80258c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80258c4:	4620      	mov	r0, r4
 80258c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80258c8:	3468      	adds	r4, #104	; 0x68
 80258ca:	e7d9      	b.n	8025880 <__sfp+0x1c>
 80258cc:	2104      	movs	r1, #4
 80258ce:	4638      	mov	r0, r7
 80258d0:	f7ff ff62 	bl	8025798 <__sfmoreglue>
 80258d4:	4604      	mov	r4, r0
 80258d6:	6030      	str	r0, [r6, #0]
 80258d8:	2800      	cmp	r0, #0
 80258da:	d1d5      	bne.n	8025888 <__sfp+0x24>
 80258dc:	f7ff ff78 	bl	80257d0 <__sfp_lock_release>
 80258e0:	230c      	movs	r3, #12
 80258e2:	603b      	str	r3, [r7, #0]
 80258e4:	e7ee      	b.n	80258c4 <__sfp+0x60>
 80258e6:	bf00      	nop
 80258e8:	08042be8 	.word	0x08042be8
 80258ec:	ffff0001 	.word	0xffff0001

080258f0 <fiprintf>:
 80258f0:	b40e      	push	{r1, r2, r3}
 80258f2:	b503      	push	{r0, r1, lr}
 80258f4:	4601      	mov	r1, r0
 80258f6:	ab03      	add	r3, sp, #12
 80258f8:	4805      	ldr	r0, [pc, #20]	; (8025910 <fiprintf+0x20>)
 80258fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80258fe:	6800      	ldr	r0, [r0, #0]
 8025900:	9301      	str	r3, [sp, #4]
 8025902:	f001 f8c9 	bl	8026a98 <_vfiprintf_r>
 8025906:	b002      	add	sp, #8
 8025908:	f85d eb04 	ldr.w	lr, [sp], #4
 802590c:	b003      	add	sp, #12
 802590e:	4770      	bx	lr
 8025910:	20000488 	.word	0x20000488

08025914 <_fwalk_reent>:
 8025914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025918:	4606      	mov	r6, r0
 802591a:	4688      	mov	r8, r1
 802591c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8025920:	2700      	movs	r7, #0
 8025922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8025926:	f1b9 0901 	subs.w	r9, r9, #1
 802592a:	d505      	bpl.n	8025938 <_fwalk_reent+0x24>
 802592c:	6824      	ldr	r4, [r4, #0]
 802592e:	2c00      	cmp	r4, #0
 8025930:	d1f7      	bne.n	8025922 <_fwalk_reent+0xe>
 8025932:	4638      	mov	r0, r7
 8025934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025938:	89ab      	ldrh	r3, [r5, #12]
 802593a:	2b01      	cmp	r3, #1
 802593c:	d907      	bls.n	802594e <_fwalk_reent+0x3a>
 802593e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8025942:	3301      	adds	r3, #1
 8025944:	d003      	beq.n	802594e <_fwalk_reent+0x3a>
 8025946:	4629      	mov	r1, r5
 8025948:	4630      	mov	r0, r6
 802594a:	47c0      	blx	r8
 802594c:	4307      	orrs	r7, r0
 802594e:	3568      	adds	r5, #104	; 0x68
 8025950:	e7e9      	b.n	8025926 <_fwalk_reent+0x12>
	...

08025954 <_findenv_r>:
 8025954:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025958:	4607      	mov	r7, r0
 802595a:	4689      	mov	r9, r1
 802595c:	4616      	mov	r6, r2
 802595e:	f001 fbf9 	bl	8027154 <__env_lock>
 8025962:	4b18      	ldr	r3, [pc, #96]	; (80259c4 <_findenv_r+0x70>)
 8025964:	681c      	ldr	r4, [r3, #0]
 8025966:	469a      	mov	sl, r3
 8025968:	b134      	cbz	r4, 8025978 <_findenv_r+0x24>
 802596a:	464b      	mov	r3, r9
 802596c:	4698      	mov	r8, r3
 802596e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8025972:	b139      	cbz	r1, 8025984 <_findenv_r+0x30>
 8025974:	293d      	cmp	r1, #61	; 0x3d
 8025976:	d1f9      	bne.n	802596c <_findenv_r+0x18>
 8025978:	4638      	mov	r0, r7
 802597a:	f001 fbf1 	bl	8027160 <__env_unlock>
 802597e:	2000      	movs	r0, #0
 8025980:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025984:	eba8 0809 	sub.w	r8, r8, r9
 8025988:	46a3      	mov	fp, r4
 802598a:	f854 0b04 	ldr.w	r0, [r4], #4
 802598e:	2800      	cmp	r0, #0
 8025990:	d0f2      	beq.n	8025978 <_findenv_r+0x24>
 8025992:	4642      	mov	r2, r8
 8025994:	4649      	mov	r1, r9
 8025996:	f7fe fb29 	bl	8023fec <strncmp>
 802599a:	2800      	cmp	r0, #0
 802599c:	d1f4      	bne.n	8025988 <_findenv_r+0x34>
 802599e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80259a2:	eb03 0508 	add.w	r5, r3, r8
 80259a6:	f813 3008 	ldrb.w	r3, [r3, r8]
 80259aa:	2b3d      	cmp	r3, #61	; 0x3d
 80259ac:	d1ec      	bne.n	8025988 <_findenv_r+0x34>
 80259ae:	f8da 3000 	ldr.w	r3, [sl]
 80259b2:	ebab 0303 	sub.w	r3, fp, r3
 80259b6:	109b      	asrs	r3, r3, #2
 80259b8:	4638      	mov	r0, r7
 80259ba:	6033      	str	r3, [r6, #0]
 80259bc:	f001 fbd0 	bl	8027160 <__env_unlock>
 80259c0:	1c68      	adds	r0, r5, #1
 80259c2:	e7dd      	b.n	8025980 <_findenv_r+0x2c>
 80259c4:	20000278 	.word	0x20000278

080259c8 <_getenv_r>:
 80259c8:	b507      	push	{r0, r1, r2, lr}
 80259ca:	aa01      	add	r2, sp, #4
 80259cc:	f7ff ffc2 	bl	8025954 <_findenv_r>
 80259d0:	b003      	add	sp, #12
 80259d2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080259d8 <__gettzinfo>:
 80259d8:	4800      	ldr	r0, [pc, #0]	; (80259dc <__gettzinfo+0x4>)
 80259da:	4770      	bx	lr
 80259dc:	200004f8 	.word	0x200004f8

080259e0 <gmtime_r>:
 80259e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80259e4:	e9d0 6700 	ldrd	r6, r7, [r0]
 80259e8:	460c      	mov	r4, r1
 80259ea:	4a51      	ldr	r2, [pc, #324]	; (8025b30 <gmtime_r+0x150>)
 80259ec:	2300      	movs	r3, #0
 80259ee:	4630      	mov	r0, r6
 80259f0:	4639      	mov	r1, r7
 80259f2:	f7da fc8d 	bl	8000310 <__aeabi_ldivmod>
 80259f6:	4639      	mov	r1, r7
 80259f8:	4605      	mov	r5, r0
 80259fa:	4a4d      	ldr	r2, [pc, #308]	; (8025b30 <gmtime_r+0x150>)
 80259fc:	4630      	mov	r0, r6
 80259fe:	2300      	movs	r3, #0
 8025a00:	f7da fc86 	bl	8000310 <__aeabi_ldivmod>
 8025a04:	2a00      	cmp	r2, #0
 8025a06:	bfbc      	itt	lt
 8025a08:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8025a0c:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8025a10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8025a14:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 8025a18:	fbb2 f3f1 	udiv	r3, r2, r1
 8025a1c:	fb01 2213 	mls	r2, r1, r3, r2
 8025a20:	f04f 013c 	mov.w	r1, #60	; 0x3c
 8025a24:	bfac      	ite	ge
 8025a26:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
 8025a2a:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
 8025a2e:	60a3      	str	r3, [r4, #8]
 8025a30:	fbb2 f3f1 	udiv	r3, r2, r1
 8025a34:	fb01 2213 	mls	r2, r1, r3, r2
 8025a38:	6063      	str	r3, [r4, #4]
 8025a3a:	6022      	str	r2, [r4, #0]
 8025a3c:	1cc3      	adds	r3, r0, #3
 8025a3e:	2207      	movs	r2, #7
 8025a40:	fb93 f2f2 	sdiv	r2, r3, r2
 8025a44:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
 8025a48:	1a9b      	subs	r3, r3, r2
 8025a4a:	bf48      	it	mi
 8025a4c:	3307      	addmi	r3, #7
 8025a4e:	2800      	cmp	r0, #0
 8025a50:	61a3      	str	r3, [r4, #24]
 8025a52:	bfb8      	it	lt
 8025a54:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
 8025a58:	4936      	ldr	r1, [pc, #216]	; (8025b34 <gmtime_r+0x154>)
 8025a5a:	bfae      	itee	ge
 8025a5c:	fb90 f1f1 	sdivge	r1, r0, r1
 8025a60:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
 8025a64:	fb93 f1f1 	sdivlt	r1, r3, r1
 8025a68:	4b33      	ldr	r3, [pc, #204]	; (8025b38 <gmtime_r+0x158>)
 8025a6a:	fb03 0001 	mla	r0, r3, r1, r0
 8025a6e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8025a72:	fbb0 f2f2 	udiv	r2, r0, r2
 8025a76:	4402      	add	r2, r0
 8025a78:	f240 5cb4 	movw	ip, #1460	; 0x5b4
 8025a7c:	fbb0 f3fc 	udiv	r3, r0, ip
 8025a80:	1ad2      	subs	r2, r2, r3
 8025a82:	f240 176d 	movw	r7, #365	; 0x16d
 8025a86:	4b2d      	ldr	r3, [pc, #180]	; (8025b3c <gmtime_r+0x15c>)
 8025a88:	fbb0 f3f3 	udiv	r3, r0, r3
 8025a8c:	2664      	movs	r6, #100	; 0x64
 8025a8e:	1ad3      	subs	r3, r2, r3
 8025a90:	fbb3 f5f7 	udiv	r5, r3, r7
 8025a94:	fbb3 f3fc 	udiv	r3, r3, ip
 8025a98:	fbb5 f2f6 	udiv	r2, r5, r6
 8025a9c:	1ad3      	subs	r3, r2, r3
 8025a9e:	4403      	add	r3, r0
 8025aa0:	fb07 3315 	mls	r3, r7, r5, r3
 8025aa4:	2099      	movs	r0, #153	; 0x99
 8025aa6:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
 8025aaa:	f10c 0c02 	add.w	ip, ip, #2
 8025aae:	f103 0e01 	add.w	lr, r3, #1
 8025ab2:	fbbc f7f0 	udiv	r7, ip, r0
 8025ab6:	4378      	muls	r0, r7
 8025ab8:	3002      	adds	r0, #2
 8025aba:	f04f 0805 	mov.w	r8, #5
 8025abe:	fbb0 f0f8 	udiv	r0, r0, r8
 8025ac2:	ebae 0000 	sub.w	r0, lr, r0
 8025ac6:	f240 5ef9 	movw	lr, #1529	; 0x5f9
 8025aca:	45f4      	cmp	ip, lr
 8025acc:	bf94      	ite	ls
 8025ace:	f04f 0c02 	movls.w	ip, #2
 8025ad2:	f06f 0c09 	mvnhi.w	ip, #9
 8025ad6:	4467      	add	r7, ip
 8025ad8:	f44f 7cc8 	mov.w	ip, #400	; 0x190
 8025adc:	fb0c 5101 	mla	r1, ip, r1, r5
 8025ae0:	2f01      	cmp	r7, #1
 8025ae2:	bf98      	it	ls
 8025ae4:	3101      	addls	r1, #1
 8025ae6:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8025aea:	d30c      	bcc.n	8025b06 <gmtime_r+0x126>
 8025aec:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8025af0:	61e3      	str	r3, [r4, #28]
 8025af2:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
 8025af6:	2300      	movs	r3, #0
 8025af8:	60e0      	str	r0, [r4, #12]
 8025afa:	e9c4 7104 	strd	r7, r1, [r4, #16]
 8025afe:	6223      	str	r3, [r4, #32]
 8025b00:	4620      	mov	r0, r4
 8025b02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b06:	f015 0f03 	tst.w	r5, #3
 8025b0a:	d102      	bne.n	8025b12 <gmtime_r+0x132>
 8025b0c:	fb06 5212 	mls	r2, r6, r2, r5
 8025b10:	b95a      	cbnz	r2, 8025b2a <gmtime_r+0x14a>
 8025b12:	f44f 76c8 	mov.w	r6, #400	; 0x190
 8025b16:	fbb5 f2f6 	udiv	r2, r5, r6
 8025b1a:	fb06 5212 	mls	r2, r6, r2, r5
 8025b1e:	fab2 f282 	clz	r2, r2
 8025b22:	0952      	lsrs	r2, r2, #5
 8025b24:	333b      	adds	r3, #59	; 0x3b
 8025b26:	4413      	add	r3, r2
 8025b28:	e7e2      	b.n	8025af0 <gmtime_r+0x110>
 8025b2a:	2201      	movs	r2, #1
 8025b2c:	e7fa      	b.n	8025b24 <gmtime_r+0x144>
 8025b2e:	bf00      	nop
 8025b30:	00015180 	.word	0x00015180
 8025b34:	00023ab1 	.word	0x00023ab1
 8025b38:	fffdc54f 	.word	0xfffdc54f
 8025b3c:	00023ab0 	.word	0x00023ab0

08025b40 <labs>:
 8025b40:	2800      	cmp	r0, #0
 8025b42:	bfb8      	it	lt
 8025b44:	4240      	neglt	r0, r0
 8025b46:	4770      	bx	lr

08025b48 <_localeconv_r>:
 8025b48:	4800      	ldr	r0, [pc, #0]	; (8025b4c <_localeconv_r+0x4>)
 8025b4a:	4770      	bx	lr
 8025b4c:	20000640 	.word	0x20000640

08025b50 <__retarget_lock_init_recursive>:
 8025b50:	4770      	bx	lr

08025b52 <__retarget_lock_acquire>:
 8025b52:	4770      	bx	lr

08025b54 <__retarget_lock_acquire_recursive>:
 8025b54:	4770      	bx	lr

08025b56 <__retarget_lock_release>:
 8025b56:	4770      	bx	lr

08025b58 <__retarget_lock_release_recursive>:
 8025b58:	4770      	bx	lr
	...

08025b5c <_lseek_r>:
 8025b5c:	b538      	push	{r3, r4, r5, lr}
 8025b5e:	4d07      	ldr	r5, [pc, #28]	; (8025b7c <_lseek_r+0x20>)
 8025b60:	4604      	mov	r4, r0
 8025b62:	4608      	mov	r0, r1
 8025b64:	4611      	mov	r1, r2
 8025b66:	2200      	movs	r2, #0
 8025b68:	602a      	str	r2, [r5, #0]
 8025b6a:	461a      	mov	r2, r3
 8025b6c:	f7e0 fad2 	bl	8006114 <_lseek>
 8025b70:	1c43      	adds	r3, r0, #1
 8025b72:	d102      	bne.n	8025b7a <_lseek_r+0x1e>
 8025b74:	682b      	ldr	r3, [r5, #0]
 8025b76:	b103      	cbz	r3, 8025b7a <_lseek_r+0x1e>
 8025b78:	6023      	str	r3, [r4, #0]
 8025b7a:	bd38      	pop	{r3, r4, r5, pc}
 8025b7c:	2002e4e8 	.word	0x2002e4e8

08025b80 <__swhatbuf_r>:
 8025b80:	b570      	push	{r4, r5, r6, lr}
 8025b82:	460e      	mov	r6, r1
 8025b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025b88:	2900      	cmp	r1, #0
 8025b8a:	b096      	sub	sp, #88	; 0x58
 8025b8c:	4614      	mov	r4, r2
 8025b8e:	461d      	mov	r5, r3
 8025b90:	da07      	bge.n	8025ba2 <__swhatbuf_r+0x22>
 8025b92:	2300      	movs	r3, #0
 8025b94:	602b      	str	r3, [r5, #0]
 8025b96:	89b3      	ldrh	r3, [r6, #12]
 8025b98:	061a      	lsls	r2, r3, #24
 8025b9a:	d410      	bmi.n	8025bbe <__swhatbuf_r+0x3e>
 8025b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8025ba0:	e00e      	b.n	8025bc0 <__swhatbuf_r+0x40>
 8025ba2:	466a      	mov	r2, sp
 8025ba4:	f001 fae2 	bl	802716c <_fstat_r>
 8025ba8:	2800      	cmp	r0, #0
 8025baa:	dbf2      	blt.n	8025b92 <__swhatbuf_r+0x12>
 8025bac:	9a01      	ldr	r2, [sp, #4]
 8025bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025bb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025bb6:	425a      	negs	r2, r3
 8025bb8:	415a      	adcs	r2, r3
 8025bba:	602a      	str	r2, [r5, #0]
 8025bbc:	e7ee      	b.n	8025b9c <__swhatbuf_r+0x1c>
 8025bbe:	2340      	movs	r3, #64	; 0x40
 8025bc0:	2000      	movs	r0, #0
 8025bc2:	6023      	str	r3, [r4, #0]
 8025bc4:	b016      	add	sp, #88	; 0x58
 8025bc6:	bd70      	pop	{r4, r5, r6, pc}

08025bc8 <__smakebuf_r>:
 8025bc8:	898b      	ldrh	r3, [r1, #12]
 8025bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025bcc:	079d      	lsls	r5, r3, #30
 8025bce:	4606      	mov	r6, r0
 8025bd0:	460c      	mov	r4, r1
 8025bd2:	d507      	bpl.n	8025be4 <__smakebuf_r+0x1c>
 8025bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025bd8:	6023      	str	r3, [r4, #0]
 8025bda:	6123      	str	r3, [r4, #16]
 8025bdc:	2301      	movs	r3, #1
 8025bde:	6163      	str	r3, [r4, #20]
 8025be0:	b002      	add	sp, #8
 8025be2:	bd70      	pop	{r4, r5, r6, pc}
 8025be4:	ab01      	add	r3, sp, #4
 8025be6:	466a      	mov	r2, sp
 8025be8:	f7ff ffca 	bl	8025b80 <__swhatbuf_r>
 8025bec:	9900      	ldr	r1, [sp, #0]
 8025bee:	4605      	mov	r5, r0
 8025bf0:	4630      	mov	r0, r6
 8025bf2:	f7fc fddb 	bl	80227ac <_malloc_r>
 8025bf6:	b948      	cbnz	r0, 8025c0c <__smakebuf_r+0x44>
 8025bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8025bfc:	059a      	lsls	r2, r3, #22
 8025bfe:	d4ef      	bmi.n	8025be0 <__smakebuf_r+0x18>
 8025c00:	f023 0303 	bic.w	r3, r3, #3
 8025c04:	f043 0302 	orr.w	r3, r3, #2
 8025c08:	81a3      	strh	r3, [r4, #12]
 8025c0a:	e7e3      	b.n	8025bd4 <__smakebuf_r+0xc>
 8025c0c:	4b0d      	ldr	r3, [pc, #52]	; (8025c44 <__smakebuf_r+0x7c>)
 8025c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8025c10:	89a3      	ldrh	r3, [r4, #12]
 8025c12:	6020      	str	r0, [r4, #0]
 8025c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8025c18:	81a3      	strh	r3, [r4, #12]
 8025c1a:	9b00      	ldr	r3, [sp, #0]
 8025c1c:	6163      	str	r3, [r4, #20]
 8025c1e:	9b01      	ldr	r3, [sp, #4]
 8025c20:	6120      	str	r0, [r4, #16]
 8025c22:	b15b      	cbz	r3, 8025c3c <__smakebuf_r+0x74>
 8025c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8025c28:	4630      	mov	r0, r6
 8025c2a:	f001 fab1 	bl	8027190 <_isatty_r>
 8025c2e:	b128      	cbz	r0, 8025c3c <__smakebuf_r+0x74>
 8025c30:	89a3      	ldrh	r3, [r4, #12]
 8025c32:	f023 0303 	bic.w	r3, r3, #3
 8025c36:	f043 0301 	orr.w	r3, r3, #1
 8025c3a:	81a3      	strh	r3, [r4, #12]
 8025c3c:	89a0      	ldrh	r0, [r4, #12]
 8025c3e:	4305      	orrs	r5, r0
 8025c40:	81a5      	strh	r5, [r4, #12]
 8025c42:	e7cd      	b.n	8025be0 <__smakebuf_r+0x18>
 8025c44:	0802578d 	.word	0x0802578d

08025c48 <__ascii_mbtowc>:
 8025c48:	b082      	sub	sp, #8
 8025c4a:	b901      	cbnz	r1, 8025c4e <__ascii_mbtowc+0x6>
 8025c4c:	a901      	add	r1, sp, #4
 8025c4e:	b142      	cbz	r2, 8025c62 <__ascii_mbtowc+0x1a>
 8025c50:	b14b      	cbz	r3, 8025c66 <__ascii_mbtowc+0x1e>
 8025c52:	7813      	ldrb	r3, [r2, #0]
 8025c54:	600b      	str	r3, [r1, #0]
 8025c56:	7812      	ldrb	r2, [r2, #0]
 8025c58:	1e10      	subs	r0, r2, #0
 8025c5a:	bf18      	it	ne
 8025c5c:	2001      	movne	r0, #1
 8025c5e:	b002      	add	sp, #8
 8025c60:	4770      	bx	lr
 8025c62:	4610      	mov	r0, r2
 8025c64:	e7fb      	b.n	8025c5e <__ascii_mbtowc+0x16>
 8025c66:	f06f 0001 	mvn.w	r0, #1
 8025c6a:	e7f8      	b.n	8025c5e <__ascii_mbtowc+0x16>

08025c6c <__malloc_lock>:
 8025c6c:	4801      	ldr	r0, [pc, #4]	; (8025c74 <__malloc_lock+0x8>)
 8025c6e:	f7ff bf71 	b.w	8025b54 <__retarget_lock_acquire_recursive>
 8025c72:	bf00      	nop
 8025c74:	2002fdc8 	.word	0x2002fdc8

08025c78 <__malloc_unlock>:
 8025c78:	4801      	ldr	r0, [pc, #4]	; (8025c80 <__malloc_unlock+0x8>)
 8025c7a:	f7ff bf6d 	b.w	8025b58 <__retarget_lock_release_recursive>
 8025c7e:	bf00      	nop
 8025c80:	2002fdc8 	.word	0x2002fdc8

08025c84 <_Balloc>:
 8025c84:	b570      	push	{r4, r5, r6, lr}
 8025c86:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025c88:	4604      	mov	r4, r0
 8025c8a:	460d      	mov	r5, r1
 8025c8c:	b976      	cbnz	r6, 8025cac <_Balloc+0x28>
 8025c8e:	2010      	movs	r0, #16
 8025c90:	f7fc fa70 	bl	8022174 <malloc>
 8025c94:	4602      	mov	r2, r0
 8025c96:	6260      	str	r0, [r4, #36]	; 0x24
 8025c98:	b920      	cbnz	r0, 8025ca4 <_Balloc+0x20>
 8025c9a:	4b18      	ldr	r3, [pc, #96]	; (8025cfc <_Balloc+0x78>)
 8025c9c:	4818      	ldr	r0, [pc, #96]	; (8025d00 <_Balloc+0x7c>)
 8025c9e:	2166      	movs	r1, #102	; 0x66
 8025ca0:	f7fe fe36 	bl	8024910 <__assert_func>
 8025ca4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025ca8:	6006      	str	r6, [r0, #0]
 8025caa:	60c6      	str	r6, [r0, #12]
 8025cac:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8025cae:	68f3      	ldr	r3, [r6, #12]
 8025cb0:	b183      	cbz	r3, 8025cd4 <_Balloc+0x50>
 8025cb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025cb4:	68db      	ldr	r3, [r3, #12]
 8025cb6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8025cba:	b9b8      	cbnz	r0, 8025cec <_Balloc+0x68>
 8025cbc:	2101      	movs	r1, #1
 8025cbe:	fa01 f605 	lsl.w	r6, r1, r5
 8025cc2:	1d72      	adds	r2, r6, #5
 8025cc4:	0092      	lsls	r2, r2, #2
 8025cc6:	4620      	mov	r0, r4
 8025cc8:	f000 fb5a 	bl	8026380 <_calloc_r>
 8025ccc:	b160      	cbz	r0, 8025ce8 <_Balloc+0x64>
 8025cce:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8025cd2:	e00e      	b.n	8025cf2 <_Balloc+0x6e>
 8025cd4:	2221      	movs	r2, #33	; 0x21
 8025cd6:	2104      	movs	r1, #4
 8025cd8:	4620      	mov	r0, r4
 8025cda:	f000 fb51 	bl	8026380 <_calloc_r>
 8025cde:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8025ce0:	60f0      	str	r0, [r6, #12]
 8025ce2:	68db      	ldr	r3, [r3, #12]
 8025ce4:	2b00      	cmp	r3, #0
 8025ce6:	d1e4      	bne.n	8025cb2 <_Balloc+0x2e>
 8025ce8:	2000      	movs	r0, #0
 8025cea:	bd70      	pop	{r4, r5, r6, pc}
 8025cec:	6802      	ldr	r2, [r0, #0]
 8025cee:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8025cf2:	2300      	movs	r3, #0
 8025cf4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8025cf8:	e7f7      	b.n	8025cea <_Balloc+0x66>
 8025cfa:	bf00      	nop
 8025cfc:	08042bec 	.word	0x08042bec
 8025d00:	08043252 	.word	0x08043252

08025d04 <_Bfree>:
 8025d04:	b570      	push	{r4, r5, r6, lr}
 8025d06:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8025d08:	4605      	mov	r5, r0
 8025d0a:	460c      	mov	r4, r1
 8025d0c:	b976      	cbnz	r6, 8025d2c <_Bfree+0x28>
 8025d0e:	2010      	movs	r0, #16
 8025d10:	f7fc fa30 	bl	8022174 <malloc>
 8025d14:	4602      	mov	r2, r0
 8025d16:	6268      	str	r0, [r5, #36]	; 0x24
 8025d18:	b920      	cbnz	r0, 8025d24 <_Bfree+0x20>
 8025d1a:	4b09      	ldr	r3, [pc, #36]	; (8025d40 <_Bfree+0x3c>)
 8025d1c:	4809      	ldr	r0, [pc, #36]	; (8025d44 <_Bfree+0x40>)
 8025d1e:	218a      	movs	r1, #138	; 0x8a
 8025d20:	f7fe fdf6 	bl	8024910 <__assert_func>
 8025d24:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8025d28:	6006      	str	r6, [r0, #0]
 8025d2a:	60c6      	str	r6, [r0, #12]
 8025d2c:	b13c      	cbz	r4, 8025d3e <_Bfree+0x3a>
 8025d2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8025d30:	6862      	ldr	r2, [r4, #4]
 8025d32:	68db      	ldr	r3, [r3, #12]
 8025d34:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8025d38:	6021      	str	r1, [r4, #0]
 8025d3a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8025d3e:	bd70      	pop	{r4, r5, r6, pc}
 8025d40:	08042bec 	.word	0x08042bec
 8025d44:	08043252 	.word	0x08043252

08025d48 <__multadd>:
 8025d48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025d4c:	690e      	ldr	r6, [r1, #16]
 8025d4e:	4607      	mov	r7, r0
 8025d50:	4698      	mov	r8, r3
 8025d52:	460c      	mov	r4, r1
 8025d54:	f101 0014 	add.w	r0, r1, #20
 8025d58:	2300      	movs	r3, #0
 8025d5a:	6805      	ldr	r5, [r0, #0]
 8025d5c:	b2a9      	uxth	r1, r5
 8025d5e:	fb02 8101 	mla	r1, r2, r1, r8
 8025d62:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8025d66:	0c2d      	lsrs	r5, r5, #16
 8025d68:	fb02 c505 	mla	r5, r2, r5, ip
 8025d6c:	b289      	uxth	r1, r1
 8025d6e:	3301      	adds	r3, #1
 8025d70:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8025d74:	429e      	cmp	r6, r3
 8025d76:	f840 1b04 	str.w	r1, [r0], #4
 8025d7a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8025d7e:	dcec      	bgt.n	8025d5a <__multadd+0x12>
 8025d80:	f1b8 0f00 	cmp.w	r8, #0
 8025d84:	d022      	beq.n	8025dcc <__multadd+0x84>
 8025d86:	68a3      	ldr	r3, [r4, #8]
 8025d88:	42b3      	cmp	r3, r6
 8025d8a:	dc19      	bgt.n	8025dc0 <__multadd+0x78>
 8025d8c:	6861      	ldr	r1, [r4, #4]
 8025d8e:	4638      	mov	r0, r7
 8025d90:	3101      	adds	r1, #1
 8025d92:	f7ff ff77 	bl	8025c84 <_Balloc>
 8025d96:	4605      	mov	r5, r0
 8025d98:	b928      	cbnz	r0, 8025da6 <__multadd+0x5e>
 8025d9a:	4602      	mov	r2, r0
 8025d9c:	4b0d      	ldr	r3, [pc, #52]	; (8025dd4 <__multadd+0x8c>)
 8025d9e:	480e      	ldr	r0, [pc, #56]	; (8025dd8 <__multadd+0x90>)
 8025da0:	21b5      	movs	r1, #181	; 0xb5
 8025da2:	f7fe fdb5 	bl	8024910 <__assert_func>
 8025da6:	6922      	ldr	r2, [r4, #16]
 8025da8:	3202      	adds	r2, #2
 8025daa:	f104 010c 	add.w	r1, r4, #12
 8025dae:	0092      	lsls	r2, r2, #2
 8025db0:	300c      	adds	r0, #12
 8025db2:	f7fc f9fd 	bl	80221b0 <memcpy>
 8025db6:	4621      	mov	r1, r4
 8025db8:	4638      	mov	r0, r7
 8025dba:	f7ff ffa3 	bl	8025d04 <_Bfree>
 8025dbe:	462c      	mov	r4, r5
 8025dc0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8025dc4:	3601      	adds	r6, #1
 8025dc6:	f8c3 8014 	str.w	r8, [r3, #20]
 8025dca:	6126      	str	r6, [r4, #16]
 8025dcc:	4620      	mov	r0, r4
 8025dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025dd2:	bf00      	nop
 8025dd4:	080431d5 	.word	0x080431d5
 8025dd8:	08043252 	.word	0x08043252

08025ddc <__hi0bits>:
 8025ddc:	0c03      	lsrs	r3, r0, #16
 8025dde:	041b      	lsls	r3, r3, #16
 8025de0:	b9d3      	cbnz	r3, 8025e18 <__hi0bits+0x3c>
 8025de2:	0400      	lsls	r0, r0, #16
 8025de4:	2310      	movs	r3, #16
 8025de6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8025dea:	bf04      	itt	eq
 8025dec:	0200      	lsleq	r0, r0, #8
 8025dee:	3308      	addeq	r3, #8
 8025df0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8025df4:	bf04      	itt	eq
 8025df6:	0100      	lsleq	r0, r0, #4
 8025df8:	3304      	addeq	r3, #4
 8025dfa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8025dfe:	bf04      	itt	eq
 8025e00:	0080      	lsleq	r0, r0, #2
 8025e02:	3302      	addeq	r3, #2
 8025e04:	2800      	cmp	r0, #0
 8025e06:	db05      	blt.n	8025e14 <__hi0bits+0x38>
 8025e08:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8025e0c:	f103 0301 	add.w	r3, r3, #1
 8025e10:	bf08      	it	eq
 8025e12:	2320      	moveq	r3, #32
 8025e14:	4618      	mov	r0, r3
 8025e16:	4770      	bx	lr
 8025e18:	2300      	movs	r3, #0
 8025e1a:	e7e4      	b.n	8025de6 <__hi0bits+0xa>

08025e1c <__lo0bits>:
 8025e1c:	6803      	ldr	r3, [r0, #0]
 8025e1e:	f013 0207 	ands.w	r2, r3, #7
 8025e22:	4601      	mov	r1, r0
 8025e24:	d00b      	beq.n	8025e3e <__lo0bits+0x22>
 8025e26:	07da      	lsls	r2, r3, #31
 8025e28:	d424      	bmi.n	8025e74 <__lo0bits+0x58>
 8025e2a:	0798      	lsls	r0, r3, #30
 8025e2c:	bf49      	itett	mi
 8025e2e:	085b      	lsrmi	r3, r3, #1
 8025e30:	089b      	lsrpl	r3, r3, #2
 8025e32:	2001      	movmi	r0, #1
 8025e34:	600b      	strmi	r3, [r1, #0]
 8025e36:	bf5c      	itt	pl
 8025e38:	600b      	strpl	r3, [r1, #0]
 8025e3a:	2002      	movpl	r0, #2
 8025e3c:	4770      	bx	lr
 8025e3e:	b298      	uxth	r0, r3
 8025e40:	b9b0      	cbnz	r0, 8025e70 <__lo0bits+0x54>
 8025e42:	0c1b      	lsrs	r3, r3, #16
 8025e44:	2010      	movs	r0, #16
 8025e46:	f013 0fff 	tst.w	r3, #255	; 0xff
 8025e4a:	bf04      	itt	eq
 8025e4c:	0a1b      	lsreq	r3, r3, #8
 8025e4e:	3008      	addeq	r0, #8
 8025e50:	071a      	lsls	r2, r3, #28
 8025e52:	bf04      	itt	eq
 8025e54:	091b      	lsreq	r3, r3, #4
 8025e56:	3004      	addeq	r0, #4
 8025e58:	079a      	lsls	r2, r3, #30
 8025e5a:	bf04      	itt	eq
 8025e5c:	089b      	lsreq	r3, r3, #2
 8025e5e:	3002      	addeq	r0, #2
 8025e60:	07da      	lsls	r2, r3, #31
 8025e62:	d403      	bmi.n	8025e6c <__lo0bits+0x50>
 8025e64:	085b      	lsrs	r3, r3, #1
 8025e66:	f100 0001 	add.w	r0, r0, #1
 8025e6a:	d005      	beq.n	8025e78 <__lo0bits+0x5c>
 8025e6c:	600b      	str	r3, [r1, #0]
 8025e6e:	4770      	bx	lr
 8025e70:	4610      	mov	r0, r2
 8025e72:	e7e8      	b.n	8025e46 <__lo0bits+0x2a>
 8025e74:	2000      	movs	r0, #0
 8025e76:	4770      	bx	lr
 8025e78:	2020      	movs	r0, #32
 8025e7a:	4770      	bx	lr

08025e7c <__i2b>:
 8025e7c:	b510      	push	{r4, lr}
 8025e7e:	460c      	mov	r4, r1
 8025e80:	2101      	movs	r1, #1
 8025e82:	f7ff feff 	bl	8025c84 <_Balloc>
 8025e86:	4602      	mov	r2, r0
 8025e88:	b928      	cbnz	r0, 8025e96 <__i2b+0x1a>
 8025e8a:	4b05      	ldr	r3, [pc, #20]	; (8025ea0 <__i2b+0x24>)
 8025e8c:	4805      	ldr	r0, [pc, #20]	; (8025ea4 <__i2b+0x28>)
 8025e8e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8025e92:	f7fe fd3d 	bl	8024910 <__assert_func>
 8025e96:	2301      	movs	r3, #1
 8025e98:	6144      	str	r4, [r0, #20]
 8025e9a:	6103      	str	r3, [r0, #16]
 8025e9c:	bd10      	pop	{r4, pc}
 8025e9e:	bf00      	nop
 8025ea0:	080431d5 	.word	0x080431d5
 8025ea4:	08043252 	.word	0x08043252

08025ea8 <__multiply>:
 8025ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025eac:	4614      	mov	r4, r2
 8025eae:	690a      	ldr	r2, [r1, #16]
 8025eb0:	6923      	ldr	r3, [r4, #16]
 8025eb2:	429a      	cmp	r2, r3
 8025eb4:	bfb8      	it	lt
 8025eb6:	460b      	movlt	r3, r1
 8025eb8:	460d      	mov	r5, r1
 8025eba:	bfbc      	itt	lt
 8025ebc:	4625      	movlt	r5, r4
 8025ebe:	461c      	movlt	r4, r3
 8025ec0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8025ec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8025ec8:	68ab      	ldr	r3, [r5, #8]
 8025eca:	6869      	ldr	r1, [r5, #4]
 8025ecc:	eb0a 0709 	add.w	r7, sl, r9
 8025ed0:	42bb      	cmp	r3, r7
 8025ed2:	b085      	sub	sp, #20
 8025ed4:	bfb8      	it	lt
 8025ed6:	3101      	addlt	r1, #1
 8025ed8:	f7ff fed4 	bl	8025c84 <_Balloc>
 8025edc:	b930      	cbnz	r0, 8025eec <__multiply+0x44>
 8025ede:	4602      	mov	r2, r0
 8025ee0:	4b42      	ldr	r3, [pc, #264]	; (8025fec <__multiply+0x144>)
 8025ee2:	4843      	ldr	r0, [pc, #268]	; (8025ff0 <__multiply+0x148>)
 8025ee4:	f240 115d 	movw	r1, #349	; 0x15d
 8025ee8:	f7fe fd12 	bl	8024910 <__assert_func>
 8025eec:	f100 0614 	add.w	r6, r0, #20
 8025ef0:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8025ef4:	4633      	mov	r3, r6
 8025ef6:	2200      	movs	r2, #0
 8025ef8:	4543      	cmp	r3, r8
 8025efa:	d31e      	bcc.n	8025f3a <__multiply+0x92>
 8025efc:	f105 0c14 	add.w	ip, r5, #20
 8025f00:	f104 0314 	add.w	r3, r4, #20
 8025f04:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8025f08:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8025f0c:	9202      	str	r2, [sp, #8]
 8025f0e:	ebac 0205 	sub.w	r2, ip, r5
 8025f12:	3a15      	subs	r2, #21
 8025f14:	f022 0203 	bic.w	r2, r2, #3
 8025f18:	3204      	adds	r2, #4
 8025f1a:	f105 0115 	add.w	r1, r5, #21
 8025f1e:	458c      	cmp	ip, r1
 8025f20:	bf38      	it	cc
 8025f22:	2204      	movcc	r2, #4
 8025f24:	9201      	str	r2, [sp, #4]
 8025f26:	9a02      	ldr	r2, [sp, #8]
 8025f28:	9303      	str	r3, [sp, #12]
 8025f2a:	429a      	cmp	r2, r3
 8025f2c:	d808      	bhi.n	8025f40 <__multiply+0x98>
 8025f2e:	2f00      	cmp	r7, #0
 8025f30:	dc55      	bgt.n	8025fde <__multiply+0x136>
 8025f32:	6107      	str	r7, [r0, #16]
 8025f34:	b005      	add	sp, #20
 8025f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025f3a:	f843 2b04 	str.w	r2, [r3], #4
 8025f3e:	e7db      	b.n	8025ef8 <__multiply+0x50>
 8025f40:	f8b3 a000 	ldrh.w	sl, [r3]
 8025f44:	f1ba 0f00 	cmp.w	sl, #0
 8025f48:	d020      	beq.n	8025f8c <__multiply+0xe4>
 8025f4a:	f105 0e14 	add.w	lr, r5, #20
 8025f4e:	46b1      	mov	r9, r6
 8025f50:	2200      	movs	r2, #0
 8025f52:	f85e 4b04 	ldr.w	r4, [lr], #4
 8025f56:	f8d9 b000 	ldr.w	fp, [r9]
 8025f5a:	b2a1      	uxth	r1, r4
 8025f5c:	fa1f fb8b 	uxth.w	fp, fp
 8025f60:	fb0a b101 	mla	r1, sl, r1, fp
 8025f64:	4411      	add	r1, r2
 8025f66:	f8d9 2000 	ldr.w	r2, [r9]
 8025f6a:	0c24      	lsrs	r4, r4, #16
 8025f6c:	0c12      	lsrs	r2, r2, #16
 8025f6e:	fb0a 2404 	mla	r4, sl, r4, r2
 8025f72:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8025f76:	b289      	uxth	r1, r1
 8025f78:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8025f7c:	45f4      	cmp	ip, lr
 8025f7e:	f849 1b04 	str.w	r1, [r9], #4
 8025f82:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8025f86:	d8e4      	bhi.n	8025f52 <__multiply+0xaa>
 8025f88:	9901      	ldr	r1, [sp, #4]
 8025f8a:	5072      	str	r2, [r6, r1]
 8025f8c:	9a03      	ldr	r2, [sp, #12]
 8025f8e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8025f92:	3304      	adds	r3, #4
 8025f94:	f1b9 0f00 	cmp.w	r9, #0
 8025f98:	d01f      	beq.n	8025fda <__multiply+0x132>
 8025f9a:	6834      	ldr	r4, [r6, #0]
 8025f9c:	f105 0114 	add.w	r1, r5, #20
 8025fa0:	46b6      	mov	lr, r6
 8025fa2:	f04f 0a00 	mov.w	sl, #0
 8025fa6:	880a      	ldrh	r2, [r1, #0]
 8025fa8:	f8be b002 	ldrh.w	fp, [lr, #2]
 8025fac:	fb09 b202 	mla	r2, r9, r2, fp
 8025fb0:	4492      	add	sl, r2
 8025fb2:	b2a4      	uxth	r4, r4
 8025fb4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8025fb8:	f84e 4b04 	str.w	r4, [lr], #4
 8025fbc:	f851 4b04 	ldr.w	r4, [r1], #4
 8025fc0:	f8be 2000 	ldrh.w	r2, [lr]
 8025fc4:	0c24      	lsrs	r4, r4, #16
 8025fc6:	fb09 2404 	mla	r4, r9, r4, r2
 8025fca:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8025fce:	458c      	cmp	ip, r1
 8025fd0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8025fd4:	d8e7      	bhi.n	8025fa6 <__multiply+0xfe>
 8025fd6:	9a01      	ldr	r2, [sp, #4]
 8025fd8:	50b4      	str	r4, [r6, r2]
 8025fda:	3604      	adds	r6, #4
 8025fdc:	e7a3      	b.n	8025f26 <__multiply+0x7e>
 8025fde:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8025fe2:	2b00      	cmp	r3, #0
 8025fe4:	d1a5      	bne.n	8025f32 <__multiply+0x8a>
 8025fe6:	3f01      	subs	r7, #1
 8025fe8:	e7a1      	b.n	8025f2e <__multiply+0x86>
 8025fea:	bf00      	nop
 8025fec:	080431d5 	.word	0x080431d5
 8025ff0:	08043252 	.word	0x08043252

08025ff4 <__pow5mult>:
 8025ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025ff8:	4615      	mov	r5, r2
 8025ffa:	f012 0203 	ands.w	r2, r2, #3
 8025ffe:	4606      	mov	r6, r0
 8026000:	460f      	mov	r7, r1
 8026002:	d007      	beq.n	8026014 <__pow5mult+0x20>
 8026004:	4c25      	ldr	r4, [pc, #148]	; (802609c <__pow5mult+0xa8>)
 8026006:	3a01      	subs	r2, #1
 8026008:	2300      	movs	r3, #0
 802600a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802600e:	f7ff fe9b 	bl	8025d48 <__multadd>
 8026012:	4607      	mov	r7, r0
 8026014:	10ad      	asrs	r5, r5, #2
 8026016:	d03d      	beq.n	8026094 <__pow5mult+0xa0>
 8026018:	6a74      	ldr	r4, [r6, #36]	; 0x24
 802601a:	b97c      	cbnz	r4, 802603c <__pow5mult+0x48>
 802601c:	2010      	movs	r0, #16
 802601e:	f7fc f8a9 	bl	8022174 <malloc>
 8026022:	4602      	mov	r2, r0
 8026024:	6270      	str	r0, [r6, #36]	; 0x24
 8026026:	b928      	cbnz	r0, 8026034 <__pow5mult+0x40>
 8026028:	4b1d      	ldr	r3, [pc, #116]	; (80260a0 <__pow5mult+0xac>)
 802602a:	481e      	ldr	r0, [pc, #120]	; (80260a4 <__pow5mult+0xb0>)
 802602c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8026030:	f7fe fc6e 	bl	8024910 <__assert_func>
 8026034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8026038:	6004      	str	r4, [r0, #0]
 802603a:	60c4      	str	r4, [r0, #12]
 802603c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8026040:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8026044:	b94c      	cbnz	r4, 802605a <__pow5mult+0x66>
 8026046:	f240 2171 	movw	r1, #625	; 0x271
 802604a:	4630      	mov	r0, r6
 802604c:	f7ff ff16 	bl	8025e7c <__i2b>
 8026050:	2300      	movs	r3, #0
 8026052:	f8c8 0008 	str.w	r0, [r8, #8]
 8026056:	4604      	mov	r4, r0
 8026058:	6003      	str	r3, [r0, #0]
 802605a:	f04f 0900 	mov.w	r9, #0
 802605e:	07eb      	lsls	r3, r5, #31
 8026060:	d50a      	bpl.n	8026078 <__pow5mult+0x84>
 8026062:	4639      	mov	r1, r7
 8026064:	4622      	mov	r2, r4
 8026066:	4630      	mov	r0, r6
 8026068:	f7ff ff1e 	bl	8025ea8 <__multiply>
 802606c:	4639      	mov	r1, r7
 802606e:	4680      	mov	r8, r0
 8026070:	4630      	mov	r0, r6
 8026072:	f7ff fe47 	bl	8025d04 <_Bfree>
 8026076:	4647      	mov	r7, r8
 8026078:	106d      	asrs	r5, r5, #1
 802607a:	d00b      	beq.n	8026094 <__pow5mult+0xa0>
 802607c:	6820      	ldr	r0, [r4, #0]
 802607e:	b938      	cbnz	r0, 8026090 <__pow5mult+0x9c>
 8026080:	4622      	mov	r2, r4
 8026082:	4621      	mov	r1, r4
 8026084:	4630      	mov	r0, r6
 8026086:	f7ff ff0f 	bl	8025ea8 <__multiply>
 802608a:	6020      	str	r0, [r4, #0]
 802608c:	f8c0 9000 	str.w	r9, [r0]
 8026090:	4604      	mov	r4, r0
 8026092:	e7e4      	b.n	802605e <__pow5mult+0x6a>
 8026094:	4638      	mov	r0, r7
 8026096:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802609a:	bf00      	nop
 802609c:	080433a8 	.word	0x080433a8
 80260a0:	08042bec 	.word	0x08042bec
 80260a4:	08043252 	.word	0x08043252

080260a8 <__lshift>:
 80260a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80260ac:	460c      	mov	r4, r1
 80260ae:	6849      	ldr	r1, [r1, #4]
 80260b0:	6923      	ldr	r3, [r4, #16]
 80260b2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80260b6:	68a3      	ldr	r3, [r4, #8]
 80260b8:	4607      	mov	r7, r0
 80260ba:	4691      	mov	r9, r2
 80260bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80260c0:	f108 0601 	add.w	r6, r8, #1
 80260c4:	42b3      	cmp	r3, r6
 80260c6:	db0b      	blt.n	80260e0 <__lshift+0x38>
 80260c8:	4638      	mov	r0, r7
 80260ca:	f7ff fddb 	bl	8025c84 <_Balloc>
 80260ce:	4605      	mov	r5, r0
 80260d0:	b948      	cbnz	r0, 80260e6 <__lshift+0x3e>
 80260d2:	4602      	mov	r2, r0
 80260d4:	4b28      	ldr	r3, [pc, #160]	; (8026178 <__lshift+0xd0>)
 80260d6:	4829      	ldr	r0, [pc, #164]	; (802617c <__lshift+0xd4>)
 80260d8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80260dc:	f7fe fc18 	bl	8024910 <__assert_func>
 80260e0:	3101      	adds	r1, #1
 80260e2:	005b      	lsls	r3, r3, #1
 80260e4:	e7ee      	b.n	80260c4 <__lshift+0x1c>
 80260e6:	2300      	movs	r3, #0
 80260e8:	f100 0114 	add.w	r1, r0, #20
 80260ec:	f100 0210 	add.w	r2, r0, #16
 80260f0:	4618      	mov	r0, r3
 80260f2:	4553      	cmp	r3, sl
 80260f4:	db33      	blt.n	802615e <__lshift+0xb6>
 80260f6:	6920      	ldr	r0, [r4, #16]
 80260f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80260fc:	f104 0314 	add.w	r3, r4, #20
 8026100:	f019 091f 	ands.w	r9, r9, #31
 8026104:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8026108:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802610c:	d02b      	beq.n	8026166 <__lshift+0xbe>
 802610e:	f1c9 0e20 	rsb	lr, r9, #32
 8026112:	468a      	mov	sl, r1
 8026114:	2200      	movs	r2, #0
 8026116:	6818      	ldr	r0, [r3, #0]
 8026118:	fa00 f009 	lsl.w	r0, r0, r9
 802611c:	4302      	orrs	r2, r0
 802611e:	f84a 2b04 	str.w	r2, [sl], #4
 8026122:	f853 2b04 	ldr.w	r2, [r3], #4
 8026126:	459c      	cmp	ip, r3
 8026128:	fa22 f20e 	lsr.w	r2, r2, lr
 802612c:	d8f3      	bhi.n	8026116 <__lshift+0x6e>
 802612e:	ebac 0304 	sub.w	r3, ip, r4
 8026132:	3b15      	subs	r3, #21
 8026134:	f023 0303 	bic.w	r3, r3, #3
 8026138:	3304      	adds	r3, #4
 802613a:	f104 0015 	add.w	r0, r4, #21
 802613e:	4584      	cmp	ip, r0
 8026140:	bf38      	it	cc
 8026142:	2304      	movcc	r3, #4
 8026144:	50ca      	str	r2, [r1, r3]
 8026146:	b10a      	cbz	r2, 802614c <__lshift+0xa4>
 8026148:	f108 0602 	add.w	r6, r8, #2
 802614c:	3e01      	subs	r6, #1
 802614e:	4638      	mov	r0, r7
 8026150:	612e      	str	r6, [r5, #16]
 8026152:	4621      	mov	r1, r4
 8026154:	f7ff fdd6 	bl	8025d04 <_Bfree>
 8026158:	4628      	mov	r0, r5
 802615a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802615e:	f842 0f04 	str.w	r0, [r2, #4]!
 8026162:	3301      	adds	r3, #1
 8026164:	e7c5      	b.n	80260f2 <__lshift+0x4a>
 8026166:	3904      	subs	r1, #4
 8026168:	f853 2b04 	ldr.w	r2, [r3], #4
 802616c:	f841 2f04 	str.w	r2, [r1, #4]!
 8026170:	459c      	cmp	ip, r3
 8026172:	d8f9      	bhi.n	8026168 <__lshift+0xc0>
 8026174:	e7ea      	b.n	802614c <__lshift+0xa4>
 8026176:	bf00      	nop
 8026178:	080431d5 	.word	0x080431d5
 802617c:	08043252 	.word	0x08043252

08026180 <__mcmp>:
 8026180:	b530      	push	{r4, r5, lr}
 8026182:	6902      	ldr	r2, [r0, #16]
 8026184:	690c      	ldr	r4, [r1, #16]
 8026186:	1b12      	subs	r2, r2, r4
 8026188:	d10e      	bne.n	80261a8 <__mcmp+0x28>
 802618a:	f100 0314 	add.w	r3, r0, #20
 802618e:	3114      	adds	r1, #20
 8026190:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8026194:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8026198:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802619c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80261a0:	42a5      	cmp	r5, r4
 80261a2:	d003      	beq.n	80261ac <__mcmp+0x2c>
 80261a4:	d305      	bcc.n	80261b2 <__mcmp+0x32>
 80261a6:	2201      	movs	r2, #1
 80261a8:	4610      	mov	r0, r2
 80261aa:	bd30      	pop	{r4, r5, pc}
 80261ac:	4283      	cmp	r3, r0
 80261ae:	d3f3      	bcc.n	8026198 <__mcmp+0x18>
 80261b0:	e7fa      	b.n	80261a8 <__mcmp+0x28>
 80261b2:	f04f 32ff 	mov.w	r2, #4294967295
 80261b6:	e7f7      	b.n	80261a8 <__mcmp+0x28>

080261b8 <__mdiff>:
 80261b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261bc:	460c      	mov	r4, r1
 80261be:	4606      	mov	r6, r0
 80261c0:	4611      	mov	r1, r2
 80261c2:	4620      	mov	r0, r4
 80261c4:	4617      	mov	r7, r2
 80261c6:	f7ff ffdb 	bl	8026180 <__mcmp>
 80261ca:	1e05      	subs	r5, r0, #0
 80261cc:	d110      	bne.n	80261f0 <__mdiff+0x38>
 80261ce:	4629      	mov	r1, r5
 80261d0:	4630      	mov	r0, r6
 80261d2:	f7ff fd57 	bl	8025c84 <_Balloc>
 80261d6:	b930      	cbnz	r0, 80261e6 <__mdiff+0x2e>
 80261d8:	4b39      	ldr	r3, [pc, #228]	; (80262c0 <__mdiff+0x108>)
 80261da:	4602      	mov	r2, r0
 80261dc:	f240 2132 	movw	r1, #562	; 0x232
 80261e0:	4838      	ldr	r0, [pc, #224]	; (80262c4 <__mdiff+0x10c>)
 80261e2:	f7fe fb95 	bl	8024910 <__assert_func>
 80261e6:	2301      	movs	r3, #1
 80261e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80261ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261f0:	bfa4      	itt	ge
 80261f2:	463b      	movge	r3, r7
 80261f4:	4627      	movge	r7, r4
 80261f6:	4630      	mov	r0, r6
 80261f8:	6879      	ldr	r1, [r7, #4]
 80261fa:	bfa6      	itte	ge
 80261fc:	461c      	movge	r4, r3
 80261fe:	2500      	movge	r5, #0
 8026200:	2501      	movlt	r5, #1
 8026202:	f7ff fd3f 	bl	8025c84 <_Balloc>
 8026206:	b920      	cbnz	r0, 8026212 <__mdiff+0x5a>
 8026208:	4b2d      	ldr	r3, [pc, #180]	; (80262c0 <__mdiff+0x108>)
 802620a:	4602      	mov	r2, r0
 802620c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8026210:	e7e6      	b.n	80261e0 <__mdiff+0x28>
 8026212:	693e      	ldr	r6, [r7, #16]
 8026214:	60c5      	str	r5, [r0, #12]
 8026216:	6925      	ldr	r5, [r4, #16]
 8026218:	f107 0114 	add.w	r1, r7, #20
 802621c:	f104 0914 	add.w	r9, r4, #20
 8026220:	f100 0e14 	add.w	lr, r0, #20
 8026224:	f107 0210 	add.w	r2, r7, #16
 8026228:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 802622c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8026230:	46f2      	mov	sl, lr
 8026232:	2700      	movs	r7, #0
 8026234:	f859 3b04 	ldr.w	r3, [r9], #4
 8026238:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802623c:	fa1f f883 	uxth.w	r8, r3
 8026240:	fa17 f78b 	uxtah	r7, r7, fp
 8026244:	0c1b      	lsrs	r3, r3, #16
 8026246:	eba7 0808 	sub.w	r8, r7, r8
 802624a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802624e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8026252:	fa1f f888 	uxth.w	r8, r8
 8026256:	141f      	asrs	r7, r3, #16
 8026258:	454d      	cmp	r5, r9
 802625a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802625e:	f84a 3b04 	str.w	r3, [sl], #4
 8026262:	d8e7      	bhi.n	8026234 <__mdiff+0x7c>
 8026264:	1b2b      	subs	r3, r5, r4
 8026266:	3b15      	subs	r3, #21
 8026268:	f023 0303 	bic.w	r3, r3, #3
 802626c:	3304      	adds	r3, #4
 802626e:	3415      	adds	r4, #21
 8026270:	42a5      	cmp	r5, r4
 8026272:	bf38      	it	cc
 8026274:	2304      	movcc	r3, #4
 8026276:	4419      	add	r1, r3
 8026278:	4473      	add	r3, lr
 802627a:	469e      	mov	lr, r3
 802627c:	460d      	mov	r5, r1
 802627e:	4565      	cmp	r5, ip
 8026280:	d30e      	bcc.n	80262a0 <__mdiff+0xe8>
 8026282:	f10c 0203 	add.w	r2, ip, #3
 8026286:	1a52      	subs	r2, r2, r1
 8026288:	f022 0203 	bic.w	r2, r2, #3
 802628c:	3903      	subs	r1, #3
 802628e:	458c      	cmp	ip, r1
 8026290:	bf38      	it	cc
 8026292:	2200      	movcc	r2, #0
 8026294:	441a      	add	r2, r3
 8026296:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 802629a:	b17b      	cbz	r3, 80262bc <__mdiff+0x104>
 802629c:	6106      	str	r6, [r0, #16]
 802629e:	e7a5      	b.n	80261ec <__mdiff+0x34>
 80262a0:	f855 8b04 	ldr.w	r8, [r5], #4
 80262a4:	fa17 f488 	uxtah	r4, r7, r8
 80262a8:	1422      	asrs	r2, r4, #16
 80262aa:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80262ae:	b2a4      	uxth	r4, r4
 80262b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80262b4:	f84e 4b04 	str.w	r4, [lr], #4
 80262b8:	1417      	asrs	r7, r2, #16
 80262ba:	e7e0      	b.n	802627e <__mdiff+0xc6>
 80262bc:	3e01      	subs	r6, #1
 80262be:	e7ea      	b.n	8026296 <__mdiff+0xde>
 80262c0:	080431d5 	.word	0x080431d5
 80262c4:	08043252 	.word	0x08043252

080262c8 <__d2b>:
 80262c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80262cc:	4689      	mov	r9, r1
 80262ce:	2101      	movs	r1, #1
 80262d0:	ec57 6b10 	vmov	r6, r7, d0
 80262d4:	4690      	mov	r8, r2
 80262d6:	f7ff fcd5 	bl	8025c84 <_Balloc>
 80262da:	4604      	mov	r4, r0
 80262dc:	b930      	cbnz	r0, 80262ec <__d2b+0x24>
 80262de:	4602      	mov	r2, r0
 80262e0:	4b25      	ldr	r3, [pc, #148]	; (8026378 <__d2b+0xb0>)
 80262e2:	4826      	ldr	r0, [pc, #152]	; (802637c <__d2b+0xb4>)
 80262e4:	f240 310a 	movw	r1, #778	; 0x30a
 80262e8:	f7fe fb12 	bl	8024910 <__assert_func>
 80262ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80262f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80262f4:	bb35      	cbnz	r5, 8026344 <__d2b+0x7c>
 80262f6:	2e00      	cmp	r6, #0
 80262f8:	9301      	str	r3, [sp, #4]
 80262fa:	d028      	beq.n	802634e <__d2b+0x86>
 80262fc:	4668      	mov	r0, sp
 80262fe:	9600      	str	r6, [sp, #0]
 8026300:	f7ff fd8c 	bl	8025e1c <__lo0bits>
 8026304:	9900      	ldr	r1, [sp, #0]
 8026306:	b300      	cbz	r0, 802634a <__d2b+0x82>
 8026308:	9a01      	ldr	r2, [sp, #4]
 802630a:	f1c0 0320 	rsb	r3, r0, #32
 802630e:	fa02 f303 	lsl.w	r3, r2, r3
 8026312:	430b      	orrs	r3, r1
 8026314:	40c2      	lsrs	r2, r0
 8026316:	6163      	str	r3, [r4, #20]
 8026318:	9201      	str	r2, [sp, #4]
 802631a:	9b01      	ldr	r3, [sp, #4]
 802631c:	61a3      	str	r3, [r4, #24]
 802631e:	2b00      	cmp	r3, #0
 8026320:	bf14      	ite	ne
 8026322:	2202      	movne	r2, #2
 8026324:	2201      	moveq	r2, #1
 8026326:	6122      	str	r2, [r4, #16]
 8026328:	b1d5      	cbz	r5, 8026360 <__d2b+0x98>
 802632a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802632e:	4405      	add	r5, r0
 8026330:	f8c9 5000 	str.w	r5, [r9]
 8026334:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8026338:	f8c8 0000 	str.w	r0, [r8]
 802633c:	4620      	mov	r0, r4
 802633e:	b003      	add	sp, #12
 8026340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8026344:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8026348:	e7d5      	b.n	80262f6 <__d2b+0x2e>
 802634a:	6161      	str	r1, [r4, #20]
 802634c:	e7e5      	b.n	802631a <__d2b+0x52>
 802634e:	a801      	add	r0, sp, #4
 8026350:	f7ff fd64 	bl	8025e1c <__lo0bits>
 8026354:	9b01      	ldr	r3, [sp, #4]
 8026356:	6163      	str	r3, [r4, #20]
 8026358:	2201      	movs	r2, #1
 802635a:	6122      	str	r2, [r4, #16]
 802635c:	3020      	adds	r0, #32
 802635e:	e7e3      	b.n	8026328 <__d2b+0x60>
 8026360:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8026364:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8026368:	f8c9 0000 	str.w	r0, [r9]
 802636c:	6918      	ldr	r0, [r3, #16]
 802636e:	f7ff fd35 	bl	8025ddc <__hi0bits>
 8026372:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8026376:	e7df      	b.n	8026338 <__d2b+0x70>
 8026378:	080431d5 	.word	0x080431d5
 802637c:	08043252 	.word	0x08043252

08026380 <_calloc_r>:
 8026380:	b513      	push	{r0, r1, r4, lr}
 8026382:	434a      	muls	r2, r1
 8026384:	4611      	mov	r1, r2
 8026386:	9201      	str	r2, [sp, #4]
 8026388:	f7fc fa10 	bl	80227ac <_malloc_r>
 802638c:	4604      	mov	r4, r0
 802638e:	b118      	cbz	r0, 8026398 <_calloc_r+0x18>
 8026390:	9a01      	ldr	r2, [sp, #4]
 8026392:	2100      	movs	r1, #0
 8026394:	f7fb ff34 	bl	8022200 <memset>
 8026398:	4620      	mov	r0, r4
 802639a:	b002      	add	sp, #8
 802639c:	bd10      	pop	{r4, pc}

0802639e <_realloc_r>:
 802639e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80263a0:	4607      	mov	r7, r0
 80263a2:	4614      	mov	r4, r2
 80263a4:	460e      	mov	r6, r1
 80263a6:	b921      	cbnz	r1, 80263b2 <_realloc_r+0x14>
 80263a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80263ac:	4611      	mov	r1, r2
 80263ae:	f7fc b9fd 	b.w	80227ac <_malloc_r>
 80263b2:	b922      	cbnz	r2, 80263be <_realloc_r+0x20>
 80263b4:	f7fc f9aa 	bl	802270c <_free_r>
 80263b8:	4625      	mov	r5, r4
 80263ba:	4628      	mov	r0, r5
 80263bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80263be:	f000 fef7 	bl	80271b0 <_malloc_usable_size_r>
 80263c2:	42a0      	cmp	r0, r4
 80263c4:	d20f      	bcs.n	80263e6 <_realloc_r+0x48>
 80263c6:	4621      	mov	r1, r4
 80263c8:	4638      	mov	r0, r7
 80263ca:	f7fc f9ef 	bl	80227ac <_malloc_r>
 80263ce:	4605      	mov	r5, r0
 80263d0:	2800      	cmp	r0, #0
 80263d2:	d0f2      	beq.n	80263ba <_realloc_r+0x1c>
 80263d4:	4631      	mov	r1, r6
 80263d6:	4622      	mov	r2, r4
 80263d8:	f7fb feea 	bl	80221b0 <memcpy>
 80263dc:	4631      	mov	r1, r6
 80263de:	4638      	mov	r0, r7
 80263e0:	f7fc f994 	bl	802270c <_free_r>
 80263e4:	e7e9      	b.n	80263ba <_realloc_r+0x1c>
 80263e6:	4635      	mov	r5, r6
 80263e8:	e7e7      	b.n	80263ba <_realloc_r+0x1c>

080263ea <__ssputs_r>:
 80263ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80263ee:	688e      	ldr	r6, [r1, #8]
 80263f0:	429e      	cmp	r6, r3
 80263f2:	4682      	mov	sl, r0
 80263f4:	460c      	mov	r4, r1
 80263f6:	4690      	mov	r8, r2
 80263f8:	461f      	mov	r7, r3
 80263fa:	d838      	bhi.n	802646e <__ssputs_r+0x84>
 80263fc:	898a      	ldrh	r2, [r1, #12]
 80263fe:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8026402:	d032      	beq.n	802646a <__ssputs_r+0x80>
 8026404:	6825      	ldr	r5, [r4, #0]
 8026406:	6909      	ldr	r1, [r1, #16]
 8026408:	eba5 0901 	sub.w	r9, r5, r1
 802640c:	6965      	ldr	r5, [r4, #20]
 802640e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8026412:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8026416:	3301      	adds	r3, #1
 8026418:	444b      	add	r3, r9
 802641a:	106d      	asrs	r5, r5, #1
 802641c:	429d      	cmp	r5, r3
 802641e:	bf38      	it	cc
 8026420:	461d      	movcc	r5, r3
 8026422:	0553      	lsls	r3, r2, #21
 8026424:	d531      	bpl.n	802648a <__ssputs_r+0xa0>
 8026426:	4629      	mov	r1, r5
 8026428:	f7fc f9c0 	bl	80227ac <_malloc_r>
 802642c:	4606      	mov	r6, r0
 802642e:	b950      	cbnz	r0, 8026446 <__ssputs_r+0x5c>
 8026430:	230c      	movs	r3, #12
 8026432:	f8ca 3000 	str.w	r3, [sl]
 8026436:	89a3      	ldrh	r3, [r4, #12]
 8026438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802643c:	81a3      	strh	r3, [r4, #12]
 802643e:	f04f 30ff 	mov.w	r0, #4294967295
 8026442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026446:	6921      	ldr	r1, [r4, #16]
 8026448:	464a      	mov	r2, r9
 802644a:	f7fb feb1 	bl	80221b0 <memcpy>
 802644e:	89a3      	ldrh	r3, [r4, #12]
 8026450:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8026454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8026458:	81a3      	strh	r3, [r4, #12]
 802645a:	6126      	str	r6, [r4, #16]
 802645c:	6165      	str	r5, [r4, #20]
 802645e:	444e      	add	r6, r9
 8026460:	eba5 0509 	sub.w	r5, r5, r9
 8026464:	6026      	str	r6, [r4, #0]
 8026466:	60a5      	str	r5, [r4, #8]
 8026468:	463e      	mov	r6, r7
 802646a:	42be      	cmp	r6, r7
 802646c:	d900      	bls.n	8026470 <__ssputs_r+0x86>
 802646e:	463e      	mov	r6, r7
 8026470:	4632      	mov	r2, r6
 8026472:	6820      	ldr	r0, [r4, #0]
 8026474:	4641      	mov	r1, r8
 8026476:	f7fb fea9 	bl	80221cc <memmove>
 802647a:	68a3      	ldr	r3, [r4, #8]
 802647c:	6822      	ldr	r2, [r4, #0]
 802647e:	1b9b      	subs	r3, r3, r6
 8026480:	4432      	add	r2, r6
 8026482:	60a3      	str	r3, [r4, #8]
 8026484:	6022      	str	r2, [r4, #0]
 8026486:	2000      	movs	r0, #0
 8026488:	e7db      	b.n	8026442 <__ssputs_r+0x58>
 802648a:	462a      	mov	r2, r5
 802648c:	f7ff ff87 	bl	802639e <_realloc_r>
 8026490:	4606      	mov	r6, r0
 8026492:	2800      	cmp	r0, #0
 8026494:	d1e1      	bne.n	802645a <__ssputs_r+0x70>
 8026496:	6921      	ldr	r1, [r4, #16]
 8026498:	4650      	mov	r0, sl
 802649a:	f7fc f937 	bl	802270c <_free_r>
 802649e:	e7c7      	b.n	8026430 <__ssputs_r+0x46>

080264a0 <_svfiprintf_r>:
 80264a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80264a4:	4698      	mov	r8, r3
 80264a6:	898b      	ldrh	r3, [r1, #12]
 80264a8:	061b      	lsls	r3, r3, #24
 80264aa:	b09d      	sub	sp, #116	; 0x74
 80264ac:	4607      	mov	r7, r0
 80264ae:	460d      	mov	r5, r1
 80264b0:	4614      	mov	r4, r2
 80264b2:	d50e      	bpl.n	80264d2 <_svfiprintf_r+0x32>
 80264b4:	690b      	ldr	r3, [r1, #16]
 80264b6:	b963      	cbnz	r3, 80264d2 <_svfiprintf_r+0x32>
 80264b8:	2140      	movs	r1, #64	; 0x40
 80264ba:	f7fc f977 	bl	80227ac <_malloc_r>
 80264be:	6028      	str	r0, [r5, #0]
 80264c0:	6128      	str	r0, [r5, #16]
 80264c2:	b920      	cbnz	r0, 80264ce <_svfiprintf_r+0x2e>
 80264c4:	230c      	movs	r3, #12
 80264c6:	603b      	str	r3, [r7, #0]
 80264c8:	f04f 30ff 	mov.w	r0, #4294967295
 80264cc:	e0d1      	b.n	8026672 <_svfiprintf_r+0x1d2>
 80264ce:	2340      	movs	r3, #64	; 0x40
 80264d0:	616b      	str	r3, [r5, #20]
 80264d2:	2300      	movs	r3, #0
 80264d4:	9309      	str	r3, [sp, #36]	; 0x24
 80264d6:	2320      	movs	r3, #32
 80264d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80264dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80264e0:	2330      	movs	r3, #48	; 0x30
 80264e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 802668c <_svfiprintf_r+0x1ec>
 80264e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80264ea:	f04f 0901 	mov.w	r9, #1
 80264ee:	4623      	mov	r3, r4
 80264f0:	469a      	mov	sl, r3
 80264f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80264f6:	b10a      	cbz	r2, 80264fc <_svfiprintf_r+0x5c>
 80264f8:	2a25      	cmp	r2, #37	; 0x25
 80264fa:	d1f9      	bne.n	80264f0 <_svfiprintf_r+0x50>
 80264fc:	ebba 0b04 	subs.w	fp, sl, r4
 8026500:	d00b      	beq.n	802651a <_svfiprintf_r+0x7a>
 8026502:	465b      	mov	r3, fp
 8026504:	4622      	mov	r2, r4
 8026506:	4629      	mov	r1, r5
 8026508:	4638      	mov	r0, r7
 802650a:	f7ff ff6e 	bl	80263ea <__ssputs_r>
 802650e:	3001      	adds	r0, #1
 8026510:	f000 80aa 	beq.w	8026668 <_svfiprintf_r+0x1c8>
 8026514:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026516:	445a      	add	r2, fp
 8026518:	9209      	str	r2, [sp, #36]	; 0x24
 802651a:	f89a 3000 	ldrb.w	r3, [sl]
 802651e:	2b00      	cmp	r3, #0
 8026520:	f000 80a2 	beq.w	8026668 <_svfiprintf_r+0x1c8>
 8026524:	2300      	movs	r3, #0
 8026526:	f04f 32ff 	mov.w	r2, #4294967295
 802652a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802652e:	f10a 0a01 	add.w	sl, sl, #1
 8026532:	9304      	str	r3, [sp, #16]
 8026534:	9307      	str	r3, [sp, #28]
 8026536:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802653a:	931a      	str	r3, [sp, #104]	; 0x68
 802653c:	4654      	mov	r4, sl
 802653e:	2205      	movs	r2, #5
 8026540:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026544:	4851      	ldr	r0, [pc, #324]	; (802668c <_svfiprintf_r+0x1ec>)
 8026546:	f7d9 fe93 	bl	8000270 <memchr>
 802654a:	9a04      	ldr	r2, [sp, #16]
 802654c:	b9d8      	cbnz	r0, 8026586 <_svfiprintf_r+0xe6>
 802654e:	06d0      	lsls	r0, r2, #27
 8026550:	bf44      	itt	mi
 8026552:	2320      	movmi	r3, #32
 8026554:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026558:	0711      	lsls	r1, r2, #28
 802655a:	bf44      	itt	mi
 802655c:	232b      	movmi	r3, #43	; 0x2b
 802655e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026562:	f89a 3000 	ldrb.w	r3, [sl]
 8026566:	2b2a      	cmp	r3, #42	; 0x2a
 8026568:	d015      	beq.n	8026596 <_svfiprintf_r+0xf6>
 802656a:	9a07      	ldr	r2, [sp, #28]
 802656c:	4654      	mov	r4, sl
 802656e:	2000      	movs	r0, #0
 8026570:	f04f 0c0a 	mov.w	ip, #10
 8026574:	4621      	mov	r1, r4
 8026576:	f811 3b01 	ldrb.w	r3, [r1], #1
 802657a:	3b30      	subs	r3, #48	; 0x30
 802657c:	2b09      	cmp	r3, #9
 802657e:	d94e      	bls.n	802661e <_svfiprintf_r+0x17e>
 8026580:	b1b0      	cbz	r0, 80265b0 <_svfiprintf_r+0x110>
 8026582:	9207      	str	r2, [sp, #28]
 8026584:	e014      	b.n	80265b0 <_svfiprintf_r+0x110>
 8026586:	eba0 0308 	sub.w	r3, r0, r8
 802658a:	fa09 f303 	lsl.w	r3, r9, r3
 802658e:	4313      	orrs	r3, r2
 8026590:	9304      	str	r3, [sp, #16]
 8026592:	46a2      	mov	sl, r4
 8026594:	e7d2      	b.n	802653c <_svfiprintf_r+0x9c>
 8026596:	9b03      	ldr	r3, [sp, #12]
 8026598:	1d19      	adds	r1, r3, #4
 802659a:	681b      	ldr	r3, [r3, #0]
 802659c:	9103      	str	r1, [sp, #12]
 802659e:	2b00      	cmp	r3, #0
 80265a0:	bfbb      	ittet	lt
 80265a2:	425b      	neglt	r3, r3
 80265a4:	f042 0202 	orrlt.w	r2, r2, #2
 80265a8:	9307      	strge	r3, [sp, #28]
 80265aa:	9307      	strlt	r3, [sp, #28]
 80265ac:	bfb8      	it	lt
 80265ae:	9204      	strlt	r2, [sp, #16]
 80265b0:	7823      	ldrb	r3, [r4, #0]
 80265b2:	2b2e      	cmp	r3, #46	; 0x2e
 80265b4:	d10c      	bne.n	80265d0 <_svfiprintf_r+0x130>
 80265b6:	7863      	ldrb	r3, [r4, #1]
 80265b8:	2b2a      	cmp	r3, #42	; 0x2a
 80265ba:	d135      	bne.n	8026628 <_svfiprintf_r+0x188>
 80265bc:	9b03      	ldr	r3, [sp, #12]
 80265be:	1d1a      	adds	r2, r3, #4
 80265c0:	681b      	ldr	r3, [r3, #0]
 80265c2:	9203      	str	r2, [sp, #12]
 80265c4:	2b00      	cmp	r3, #0
 80265c6:	bfb8      	it	lt
 80265c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80265cc:	3402      	adds	r4, #2
 80265ce:	9305      	str	r3, [sp, #20]
 80265d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 802669c <_svfiprintf_r+0x1fc>
 80265d4:	7821      	ldrb	r1, [r4, #0]
 80265d6:	2203      	movs	r2, #3
 80265d8:	4650      	mov	r0, sl
 80265da:	f7d9 fe49 	bl	8000270 <memchr>
 80265de:	b140      	cbz	r0, 80265f2 <_svfiprintf_r+0x152>
 80265e0:	2340      	movs	r3, #64	; 0x40
 80265e2:	eba0 000a 	sub.w	r0, r0, sl
 80265e6:	fa03 f000 	lsl.w	r0, r3, r0
 80265ea:	9b04      	ldr	r3, [sp, #16]
 80265ec:	4303      	orrs	r3, r0
 80265ee:	3401      	adds	r4, #1
 80265f0:	9304      	str	r3, [sp, #16]
 80265f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80265f6:	4826      	ldr	r0, [pc, #152]	; (8026690 <_svfiprintf_r+0x1f0>)
 80265f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80265fc:	2206      	movs	r2, #6
 80265fe:	f7d9 fe37 	bl	8000270 <memchr>
 8026602:	2800      	cmp	r0, #0
 8026604:	d038      	beq.n	8026678 <_svfiprintf_r+0x1d8>
 8026606:	4b23      	ldr	r3, [pc, #140]	; (8026694 <_svfiprintf_r+0x1f4>)
 8026608:	bb1b      	cbnz	r3, 8026652 <_svfiprintf_r+0x1b2>
 802660a:	9b03      	ldr	r3, [sp, #12]
 802660c:	3307      	adds	r3, #7
 802660e:	f023 0307 	bic.w	r3, r3, #7
 8026612:	3308      	adds	r3, #8
 8026614:	9303      	str	r3, [sp, #12]
 8026616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026618:	4433      	add	r3, r6
 802661a:	9309      	str	r3, [sp, #36]	; 0x24
 802661c:	e767      	b.n	80264ee <_svfiprintf_r+0x4e>
 802661e:	fb0c 3202 	mla	r2, ip, r2, r3
 8026622:	460c      	mov	r4, r1
 8026624:	2001      	movs	r0, #1
 8026626:	e7a5      	b.n	8026574 <_svfiprintf_r+0xd4>
 8026628:	2300      	movs	r3, #0
 802662a:	3401      	adds	r4, #1
 802662c:	9305      	str	r3, [sp, #20]
 802662e:	4619      	mov	r1, r3
 8026630:	f04f 0c0a 	mov.w	ip, #10
 8026634:	4620      	mov	r0, r4
 8026636:	f810 2b01 	ldrb.w	r2, [r0], #1
 802663a:	3a30      	subs	r2, #48	; 0x30
 802663c:	2a09      	cmp	r2, #9
 802663e:	d903      	bls.n	8026648 <_svfiprintf_r+0x1a8>
 8026640:	2b00      	cmp	r3, #0
 8026642:	d0c5      	beq.n	80265d0 <_svfiprintf_r+0x130>
 8026644:	9105      	str	r1, [sp, #20]
 8026646:	e7c3      	b.n	80265d0 <_svfiprintf_r+0x130>
 8026648:	fb0c 2101 	mla	r1, ip, r1, r2
 802664c:	4604      	mov	r4, r0
 802664e:	2301      	movs	r3, #1
 8026650:	e7f0      	b.n	8026634 <_svfiprintf_r+0x194>
 8026652:	ab03      	add	r3, sp, #12
 8026654:	9300      	str	r3, [sp, #0]
 8026656:	462a      	mov	r2, r5
 8026658:	4b0f      	ldr	r3, [pc, #60]	; (8026698 <_svfiprintf_r+0x1f8>)
 802665a:	a904      	add	r1, sp, #16
 802665c:	4638      	mov	r0, r7
 802665e:	f7fc f98f 	bl	8022980 <_printf_float>
 8026662:	1c42      	adds	r2, r0, #1
 8026664:	4606      	mov	r6, r0
 8026666:	d1d6      	bne.n	8026616 <_svfiprintf_r+0x176>
 8026668:	89ab      	ldrh	r3, [r5, #12]
 802666a:	065b      	lsls	r3, r3, #25
 802666c:	f53f af2c 	bmi.w	80264c8 <_svfiprintf_r+0x28>
 8026670:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026672:	b01d      	add	sp, #116	; 0x74
 8026674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026678:	ab03      	add	r3, sp, #12
 802667a:	9300      	str	r3, [sp, #0]
 802667c:	462a      	mov	r2, r5
 802667e:	4b06      	ldr	r3, [pc, #24]	; (8026698 <_svfiprintf_r+0x1f8>)
 8026680:	a904      	add	r1, sp, #16
 8026682:	4638      	mov	r0, r7
 8026684:	f7fc fc08 	bl	8022e98 <_printf_i>
 8026688:	e7eb      	b.n	8026662 <_svfiprintf_r+0x1c2>
 802668a:	bf00      	nop
 802668c:	080433b4 	.word	0x080433b4
 8026690:	080433be 	.word	0x080433be
 8026694:	08022981 	.word	0x08022981
 8026698:	080263eb 	.word	0x080263eb
 802669c:	080433ba 	.word	0x080433ba

080266a0 <_sungetc_r>:
 80266a0:	b538      	push	{r3, r4, r5, lr}
 80266a2:	1c4b      	adds	r3, r1, #1
 80266a4:	4614      	mov	r4, r2
 80266a6:	d103      	bne.n	80266b0 <_sungetc_r+0x10>
 80266a8:	f04f 35ff 	mov.w	r5, #4294967295
 80266ac:	4628      	mov	r0, r5
 80266ae:	bd38      	pop	{r3, r4, r5, pc}
 80266b0:	8993      	ldrh	r3, [r2, #12]
 80266b2:	f023 0320 	bic.w	r3, r3, #32
 80266b6:	8193      	strh	r3, [r2, #12]
 80266b8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80266ba:	6852      	ldr	r2, [r2, #4]
 80266bc:	b2cd      	uxtb	r5, r1
 80266be:	b18b      	cbz	r3, 80266e4 <_sungetc_r+0x44>
 80266c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80266c2:	4293      	cmp	r3, r2
 80266c4:	dd08      	ble.n	80266d8 <_sungetc_r+0x38>
 80266c6:	6823      	ldr	r3, [r4, #0]
 80266c8:	1e5a      	subs	r2, r3, #1
 80266ca:	6022      	str	r2, [r4, #0]
 80266cc:	f803 5c01 	strb.w	r5, [r3, #-1]
 80266d0:	6863      	ldr	r3, [r4, #4]
 80266d2:	3301      	adds	r3, #1
 80266d4:	6063      	str	r3, [r4, #4]
 80266d6:	e7e9      	b.n	80266ac <_sungetc_r+0xc>
 80266d8:	4621      	mov	r1, r4
 80266da:	f000 fced 	bl	80270b8 <__submore>
 80266de:	2800      	cmp	r0, #0
 80266e0:	d0f1      	beq.n	80266c6 <_sungetc_r+0x26>
 80266e2:	e7e1      	b.n	80266a8 <_sungetc_r+0x8>
 80266e4:	6921      	ldr	r1, [r4, #16]
 80266e6:	6823      	ldr	r3, [r4, #0]
 80266e8:	b151      	cbz	r1, 8026700 <_sungetc_r+0x60>
 80266ea:	4299      	cmp	r1, r3
 80266ec:	d208      	bcs.n	8026700 <_sungetc_r+0x60>
 80266ee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80266f2:	42a9      	cmp	r1, r5
 80266f4:	d104      	bne.n	8026700 <_sungetc_r+0x60>
 80266f6:	3b01      	subs	r3, #1
 80266f8:	3201      	adds	r2, #1
 80266fa:	6023      	str	r3, [r4, #0]
 80266fc:	6062      	str	r2, [r4, #4]
 80266fe:	e7d5      	b.n	80266ac <_sungetc_r+0xc>
 8026700:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8026704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026708:	6363      	str	r3, [r4, #52]	; 0x34
 802670a:	2303      	movs	r3, #3
 802670c:	63a3      	str	r3, [r4, #56]	; 0x38
 802670e:	4623      	mov	r3, r4
 8026710:	f803 5f46 	strb.w	r5, [r3, #70]!
 8026714:	6023      	str	r3, [r4, #0]
 8026716:	2301      	movs	r3, #1
 8026718:	e7dc      	b.n	80266d4 <_sungetc_r+0x34>

0802671a <__ssrefill_r>:
 802671a:	b510      	push	{r4, lr}
 802671c:	460c      	mov	r4, r1
 802671e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8026720:	b169      	cbz	r1, 802673e <__ssrefill_r+0x24>
 8026722:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8026726:	4299      	cmp	r1, r3
 8026728:	d001      	beq.n	802672e <__ssrefill_r+0x14>
 802672a:	f7fb ffef 	bl	802270c <_free_r>
 802672e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8026730:	6063      	str	r3, [r4, #4]
 8026732:	2000      	movs	r0, #0
 8026734:	6360      	str	r0, [r4, #52]	; 0x34
 8026736:	b113      	cbz	r3, 802673e <__ssrefill_r+0x24>
 8026738:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802673a:	6023      	str	r3, [r4, #0]
 802673c:	bd10      	pop	{r4, pc}
 802673e:	6923      	ldr	r3, [r4, #16]
 8026740:	6023      	str	r3, [r4, #0]
 8026742:	2300      	movs	r3, #0
 8026744:	6063      	str	r3, [r4, #4]
 8026746:	89a3      	ldrh	r3, [r4, #12]
 8026748:	f043 0320 	orr.w	r3, r3, #32
 802674c:	81a3      	strh	r3, [r4, #12]
 802674e:	f04f 30ff 	mov.w	r0, #4294967295
 8026752:	e7f3      	b.n	802673c <__ssrefill_r+0x22>

08026754 <__ssvfiscanf_r>:
 8026754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026758:	460c      	mov	r4, r1
 802675a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 802675e:	2100      	movs	r1, #0
 8026760:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8026764:	49b2      	ldr	r1, [pc, #712]	; (8026a30 <__ssvfiscanf_r+0x2dc>)
 8026766:	91a0      	str	r1, [sp, #640]	; 0x280
 8026768:	f10d 0804 	add.w	r8, sp, #4
 802676c:	49b1      	ldr	r1, [pc, #708]	; (8026a34 <__ssvfiscanf_r+0x2e0>)
 802676e:	4fb2      	ldr	r7, [pc, #712]	; (8026a38 <__ssvfiscanf_r+0x2e4>)
 8026770:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8026a3c <__ssvfiscanf_r+0x2e8>
 8026774:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8026778:	4606      	mov	r6, r0
 802677a:	91a1      	str	r1, [sp, #644]	; 0x284
 802677c:	9300      	str	r3, [sp, #0]
 802677e:	f892 a000 	ldrb.w	sl, [r2]
 8026782:	f1ba 0f00 	cmp.w	sl, #0
 8026786:	f000 8151 	beq.w	8026a2c <__ssvfiscanf_r+0x2d8>
 802678a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 802678e:	f013 0308 	ands.w	r3, r3, #8
 8026792:	f102 0501 	add.w	r5, r2, #1
 8026796:	d019      	beq.n	80267cc <__ssvfiscanf_r+0x78>
 8026798:	6863      	ldr	r3, [r4, #4]
 802679a:	2b00      	cmp	r3, #0
 802679c:	dd0f      	ble.n	80267be <__ssvfiscanf_r+0x6a>
 802679e:	6823      	ldr	r3, [r4, #0]
 80267a0:	781a      	ldrb	r2, [r3, #0]
 80267a2:	5cba      	ldrb	r2, [r7, r2]
 80267a4:	0712      	lsls	r2, r2, #28
 80267a6:	d401      	bmi.n	80267ac <__ssvfiscanf_r+0x58>
 80267a8:	462a      	mov	r2, r5
 80267aa:	e7e8      	b.n	802677e <__ssvfiscanf_r+0x2a>
 80267ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80267ae:	3201      	adds	r2, #1
 80267b0:	9245      	str	r2, [sp, #276]	; 0x114
 80267b2:	6862      	ldr	r2, [r4, #4]
 80267b4:	3301      	adds	r3, #1
 80267b6:	3a01      	subs	r2, #1
 80267b8:	6062      	str	r2, [r4, #4]
 80267ba:	6023      	str	r3, [r4, #0]
 80267bc:	e7ec      	b.n	8026798 <__ssvfiscanf_r+0x44>
 80267be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80267c0:	4621      	mov	r1, r4
 80267c2:	4630      	mov	r0, r6
 80267c4:	4798      	blx	r3
 80267c6:	2800      	cmp	r0, #0
 80267c8:	d0e9      	beq.n	802679e <__ssvfiscanf_r+0x4a>
 80267ca:	e7ed      	b.n	80267a8 <__ssvfiscanf_r+0x54>
 80267cc:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80267d0:	f040 8083 	bne.w	80268da <__ssvfiscanf_r+0x186>
 80267d4:	9341      	str	r3, [sp, #260]	; 0x104
 80267d6:	9343      	str	r3, [sp, #268]	; 0x10c
 80267d8:	7853      	ldrb	r3, [r2, #1]
 80267da:	2b2a      	cmp	r3, #42	; 0x2a
 80267dc:	bf02      	ittt	eq
 80267de:	2310      	moveq	r3, #16
 80267e0:	1c95      	addeq	r5, r2, #2
 80267e2:	9341      	streq	r3, [sp, #260]	; 0x104
 80267e4:	220a      	movs	r2, #10
 80267e6:	46ab      	mov	fp, r5
 80267e8:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80267ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80267f0:	2b09      	cmp	r3, #9
 80267f2:	d91d      	bls.n	8026830 <__ssvfiscanf_r+0xdc>
 80267f4:	4891      	ldr	r0, [pc, #580]	; (8026a3c <__ssvfiscanf_r+0x2e8>)
 80267f6:	2203      	movs	r2, #3
 80267f8:	f7d9 fd3a 	bl	8000270 <memchr>
 80267fc:	b140      	cbz	r0, 8026810 <__ssvfiscanf_r+0xbc>
 80267fe:	2301      	movs	r3, #1
 8026800:	eba0 0009 	sub.w	r0, r0, r9
 8026804:	fa03 f000 	lsl.w	r0, r3, r0
 8026808:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802680a:	4318      	orrs	r0, r3
 802680c:	9041      	str	r0, [sp, #260]	; 0x104
 802680e:	465d      	mov	r5, fp
 8026810:	f815 3b01 	ldrb.w	r3, [r5], #1
 8026814:	2b78      	cmp	r3, #120	; 0x78
 8026816:	d806      	bhi.n	8026826 <__ssvfiscanf_r+0xd2>
 8026818:	2b57      	cmp	r3, #87	; 0x57
 802681a:	d810      	bhi.n	802683e <__ssvfiscanf_r+0xea>
 802681c:	2b25      	cmp	r3, #37	; 0x25
 802681e:	d05c      	beq.n	80268da <__ssvfiscanf_r+0x186>
 8026820:	d856      	bhi.n	80268d0 <__ssvfiscanf_r+0x17c>
 8026822:	2b00      	cmp	r3, #0
 8026824:	d074      	beq.n	8026910 <__ssvfiscanf_r+0x1bc>
 8026826:	2303      	movs	r3, #3
 8026828:	9347      	str	r3, [sp, #284]	; 0x11c
 802682a:	230a      	movs	r3, #10
 802682c:	9342      	str	r3, [sp, #264]	; 0x108
 802682e:	e081      	b.n	8026934 <__ssvfiscanf_r+0x1e0>
 8026830:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8026832:	fb02 1303 	mla	r3, r2, r3, r1
 8026836:	3b30      	subs	r3, #48	; 0x30
 8026838:	9343      	str	r3, [sp, #268]	; 0x10c
 802683a:	465d      	mov	r5, fp
 802683c:	e7d3      	b.n	80267e6 <__ssvfiscanf_r+0x92>
 802683e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8026842:	2a20      	cmp	r2, #32
 8026844:	d8ef      	bhi.n	8026826 <__ssvfiscanf_r+0xd2>
 8026846:	a101      	add	r1, pc, #4	; (adr r1, 802684c <__ssvfiscanf_r+0xf8>)
 8026848:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802684c:	0802691f 	.word	0x0802691f
 8026850:	08026827 	.word	0x08026827
 8026854:	08026827 	.word	0x08026827
 8026858:	0802697d 	.word	0x0802697d
 802685c:	08026827 	.word	0x08026827
 8026860:	08026827 	.word	0x08026827
 8026864:	08026827 	.word	0x08026827
 8026868:	08026827 	.word	0x08026827
 802686c:	08026827 	.word	0x08026827
 8026870:	08026827 	.word	0x08026827
 8026874:	08026827 	.word	0x08026827
 8026878:	08026993 	.word	0x08026993
 802687c:	08026969 	.word	0x08026969
 8026880:	080268d7 	.word	0x080268d7
 8026884:	080268d7 	.word	0x080268d7
 8026888:	080268d7 	.word	0x080268d7
 802688c:	08026827 	.word	0x08026827
 8026890:	0802696d 	.word	0x0802696d
 8026894:	08026827 	.word	0x08026827
 8026898:	08026827 	.word	0x08026827
 802689c:	08026827 	.word	0x08026827
 80268a0:	08026827 	.word	0x08026827
 80268a4:	080269a3 	.word	0x080269a3
 80268a8:	08026975 	.word	0x08026975
 80268ac:	08026917 	.word	0x08026917
 80268b0:	08026827 	.word	0x08026827
 80268b4:	08026827 	.word	0x08026827
 80268b8:	0802699f 	.word	0x0802699f
 80268bc:	08026827 	.word	0x08026827
 80268c0:	08026969 	.word	0x08026969
 80268c4:	08026827 	.word	0x08026827
 80268c8:	08026827 	.word	0x08026827
 80268cc:	0802691f 	.word	0x0802691f
 80268d0:	3b45      	subs	r3, #69	; 0x45
 80268d2:	2b02      	cmp	r3, #2
 80268d4:	d8a7      	bhi.n	8026826 <__ssvfiscanf_r+0xd2>
 80268d6:	2305      	movs	r3, #5
 80268d8:	e02b      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 80268da:	6863      	ldr	r3, [r4, #4]
 80268dc:	2b00      	cmp	r3, #0
 80268de:	dd0d      	ble.n	80268fc <__ssvfiscanf_r+0x1a8>
 80268e0:	6823      	ldr	r3, [r4, #0]
 80268e2:	781a      	ldrb	r2, [r3, #0]
 80268e4:	4552      	cmp	r2, sl
 80268e6:	f040 80a1 	bne.w	8026a2c <__ssvfiscanf_r+0x2d8>
 80268ea:	3301      	adds	r3, #1
 80268ec:	6862      	ldr	r2, [r4, #4]
 80268ee:	6023      	str	r3, [r4, #0]
 80268f0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80268f2:	3a01      	subs	r2, #1
 80268f4:	3301      	adds	r3, #1
 80268f6:	6062      	str	r2, [r4, #4]
 80268f8:	9345      	str	r3, [sp, #276]	; 0x114
 80268fa:	e755      	b.n	80267a8 <__ssvfiscanf_r+0x54>
 80268fc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80268fe:	4621      	mov	r1, r4
 8026900:	4630      	mov	r0, r6
 8026902:	4798      	blx	r3
 8026904:	2800      	cmp	r0, #0
 8026906:	d0eb      	beq.n	80268e0 <__ssvfiscanf_r+0x18c>
 8026908:	9844      	ldr	r0, [sp, #272]	; 0x110
 802690a:	2800      	cmp	r0, #0
 802690c:	f040 8084 	bne.w	8026a18 <__ssvfiscanf_r+0x2c4>
 8026910:	f04f 30ff 	mov.w	r0, #4294967295
 8026914:	e086      	b.n	8026a24 <__ssvfiscanf_r+0x2d0>
 8026916:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026918:	f042 0220 	orr.w	r2, r2, #32
 802691c:	9241      	str	r2, [sp, #260]	; 0x104
 802691e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8026920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8026924:	9241      	str	r2, [sp, #260]	; 0x104
 8026926:	2210      	movs	r2, #16
 8026928:	2b6f      	cmp	r3, #111	; 0x6f
 802692a:	9242      	str	r2, [sp, #264]	; 0x108
 802692c:	bf34      	ite	cc
 802692e:	2303      	movcc	r3, #3
 8026930:	2304      	movcs	r3, #4
 8026932:	9347      	str	r3, [sp, #284]	; 0x11c
 8026934:	6863      	ldr	r3, [r4, #4]
 8026936:	2b00      	cmp	r3, #0
 8026938:	dd41      	ble.n	80269be <__ssvfiscanf_r+0x26a>
 802693a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802693c:	0659      	lsls	r1, r3, #25
 802693e:	d404      	bmi.n	802694a <__ssvfiscanf_r+0x1f6>
 8026940:	6823      	ldr	r3, [r4, #0]
 8026942:	781a      	ldrb	r2, [r3, #0]
 8026944:	5cba      	ldrb	r2, [r7, r2]
 8026946:	0712      	lsls	r2, r2, #28
 8026948:	d440      	bmi.n	80269cc <__ssvfiscanf_r+0x278>
 802694a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802694c:	2b02      	cmp	r3, #2
 802694e:	dc4f      	bgt.n	80269f0 <__ssvfiscanf_r+0x29c>
 8026950:	466b      	mov	r3, sp
 8026952:	4622      	mov	r2, r4
 8026954:	a941      	add	r1, sp, #260	; 0x104
 8026956:	4630      	mov	r0, r6
 8026958:	f000 f9ce 	bl	8026cf8 <_scanf_chars>
 802695c:	2801      	cmp	r0, #1
 802695e:	d065      	beq.n	8026a2c <__ssvfiscanf_r+0x2d8>
 8026960:	2802      	cmp	r0, #2
 8026962:	f47f af21 	bne.w	80267a8 <__ssvfiscanf_r+0x54>
 8026966:	e7cf      	b.n	8026908 <__ssvfiscanf_r+0x1b4>
 8026968:	220a      	movs	r2, #10
 802696a:	e7dd      	b.n	8026928 <__ssvfiscanf_r+0x1d4>
 802696c:	2300      	movs	r3, #0
 802696e:	9342      	str	r3, [sp, #264]	; 0x108
 8026970:	2303      	movs	r3, #3
 8026972:	e7de      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 8026974:	2308      	movs	r3, #8
 8026976:	9342      	str	r3, [sp, #264]	; 0x108
 8026978:	2304      	movs	r3, #4
 802697a:	e7da      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 802697c:	4629      	mov	r1, r5
 802697e:	4640      	mov	r0, r8
 8026980:	f000 fb60 	bl	8027044 <__sccl>
 8026984:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802698a:	9341      	str	r3, [sp, #260]	; 0x104
 802698c:	4605      	mov	r5, r0
 802698e:	2301      	movs	r3, #1
 8026990:	e7cf      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 8026992:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8026994:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8026998:	9341      	str	r3, [sp, #260]	; 0x104
 802699a:	2300      	movs	r3, #0
 802699c:	e7c9      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 802699e:	2302      	movs	r3, #2
 80269a0:	e7c7      	b.n	8026932 <__ssvfiscanf_r+0x1de>
 80269a2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80269a4:	06c3      	lsls	r3, r0, #27
 80269a6:	f53f aeff 	bmi.w	80267a8 <__ssvfiscanf_r+0x54>
 80269aa:	9b00      	ldr	r3, [sp, #0]
 80269ac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80269ae:	1d19      	adds	r1, r3, #4
 80269b0:	9100      	str	r1, [sp, #0]
 80269b2:	681b      	ldr	r3, [r3, #0]
 80269b4:	07c0      	lsls	r0, r0, #31
 80269b6:	bf4c      	ite	mi
 80269b8:	801a      	strhmi	r2, [r3, #0]
 80269ba:	601a      	strpl	r2, [r3, #0]
 80269bc:	e6f4      	b.n	80267a8 <__ssvfiscanf_r+0x54>
 80269be:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80269c0:	4621      	mov	r1, r4
 80269c2:	4630      	mov	r0, r6
 80269c4:	4798      	blx	r3
 80269c6:	2800      	cmp	r0, #0
 80269c8:	d0b7      	beq.n	802693a <__ssvfiscanf_r+0x1e6>
 80269ca:	e79d      	b.n	8026908 <__ssvfiscanf_r+0x1b4>
 80269cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80269ce:	3201      	adds	r2, #1
 80269d0:	9245      	str	r2, [sp, #276]	; 0x114
 80269d2:	6862      	ldr	r2, [r4, #4]
 80269d4:	3a01      	subs	r2, #1
 80269d6:	2a00      	cmp	r2, #0
 80269d8:	6062      	str	r2, [r4, #4]
 80269da:	dd02      	ble.n	80269e2 <__ssvfiscanf_r+0x28e>
 80269dc:	3301      	adds	r3, #1
 80269de:	6023      	str	r3, [r4, #0]
 80269e0:	e7ae      	b.n	8026940 <__ssvfiscanf_r+0x1ec>
 80269e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80269e4:	4621      	mov	r1, r4
 80269e6:	4630      	mov	r0, r6
 80269e8:	4798      	blx	r3
 80269ea:	2800      	cmp	r0, #0
 80269ec:	d0a8      	beq.n	8026940 <__ssvfiscanf_r+0x1ec>
 80269ee:	e78b      	b.n	8026908 <__ssvfiscanf_r+0x1b4>
 80269f0:	2b04      	cmp	r3, #4
 80269f2:	dc06      	bgt.n	8026a02 <__ssvfiscanf_r+0x2ae>
 80269f4:	466b      	mov	r3, sp
 80269f6:	4622      	mov	r2, r4
 80269f8:	a941      	add	r1, sp, #260	; 0x104
 80269fa:	4630      	mov	r0, r6
 80269fc:	f000 f9d4 	bl	8026da8 <_scanf_i>
 8026a00:	e7ac      	b.n	802695c <__ssvfiscanf_r+0x208>
 8026a02:	4b0f      	ldr	r3, [pc, #60]	; (8026a40 <__ssvfiscanf_r+0x2ec>)
 8026a04:	2b00      	cmp	r3, #0
 8026a06:	f43f aecf 	beq.w	80267a8 <__ssvfiscanf_r+0x54>
 8026a0a:	466b      	mov	r3, sp
 8026a0c:	4622      	mov	r2, r4
 8026a0e:	a941      	add	r1, sp, #260	; 0x104
 8026a10:	4630      	mov	r0, r6
 8026a12:	f3af 8000 	nop.w
 8026a16:	e7a1      	b.n	802695c <__ssvfiscanf_r+0x208>
 8026a18:	89a3      	ldrh	r3, [r4, #12]
 8026a1a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8026a1e:	bf18      	it	ne
 8026a20:	f04f 30ff 	movne.w	r0, #4294967295
 8026a24:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8026a28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a2c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8026a2e:	e7f9      	b.n	8026a24 <__ssvfiscanf_r+0x2d0>
 8026a30:	080266a1 	.word	0x080266a1
 8026a34:	0802671b 	.word	0x0802671b
 8026a38:	08042ae5 	.word	0x08042ae5
 8026a3c:	080433ba 	.word	0x080433ba
 8026a40:	00000000 	.word	0x00000000

08026a44 <__sfputc_r>:
 8026a44:	6893      	ldr	r3, [r2, #8]
 8026a46:	3b01      	subs	r3, #1
 8026a48:	2b00      	cmp	r3, #0
 8026a4a:	b410      	push	{r4}
 8026a4c:	6093      	str	r3, [r2, #8]
 8026a4e:	da08      	bge.n	8026a62 <__sfputc_r+0x1e>
 8026a50:	6994      	ldr	r4, [r2, #24]
 8026a52:	42a3      	cmp	r3, r4
 8026a54:	db01      	blt.n	8026a5a <__sfputc_r+0x16>
 8026a56:	290a      	cmp	r1, #10
 8026a58:	d103      	bne.n	8026a62 <__sfputc_r+0x1e>
 8026a5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026a5e:	f7fd be39 	b.w	80246d4 <__swbuf_r>
 8026a62:	6813      	ldr	r3, [r2, #0]
 8026a64:	1c58      	adds	r0, r3, #1
 8026a66:	6010      	str	r0, [r2, #0]
 8026a68:	7019      	strb	r1, [r3, #0]
 8026a6a:	4608      	mov	r0, r1
 8026a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8026a70:	4770      	bx	lr

08026a72 <__sfputs_r>:
 8026a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026a74:	4606      	mov	r6, r0
 8026a76:	460f      	mov	r7, r1
 8026a78:	4614      	mov	r4, r2
 8026a7a:	18d5      	adds	r5, r2, r3
 8026a7c:	42ac      	cmp	r4, r5
 8026a7e:	d101      	bne.n	8026a84 <__sfputs_r+0x12>
 8026a80:	2000      	movs	r0, #0
 8026a82:	e007      	b.n	8026a94 <__sfputs_r+0x22>
 8026a84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026a88:	463a      	mov	r2, r7
 8026a8a:	4630      	mov	r0, r6
 8026a8c:	f7ff ffda 	bl	8026a44 <__sfputc_r>
 8026a90:	1c43      	adds	r3, r0, #1
 8026a92:	d1f3      	bne.n	8026a7c <__sfputs_r+0xa>
 8026a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08026a98 <_vfiprintf_r>:
 8026a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026a9c:	460d      	mov	r5, r1
 8026a9e:	b09d      	sub	sp, #116	; 0x74
 8026aa0:	4614      	mov	r4, r2
 8026aa2:	4698      	mov	r8, r3
 8026aa4:	4606      	mov	r6, r0
 8026aa6:	b118      	cbz	r0, 8026ab0 <_vfiprintf_r+0x18>
 8026aa8:	6983      	ldr	r3, [r0, #24]
 8026aaa:	b90b      	cbnz	r3, 8026ab0 <_vfiprintf_r+0x18>
 8026aac:	f7fe fea2 	bl	80257f4 <__sinit>
 8026ab0:	4b89      	ldr	r3, [pc, #548]	; (8026cd8 <_vfiprintf_r+0x240>)
 8026ab2:	429d      	cmp	r5, r3
 8026ab4:	d11b      	bne.n	8026aee <_vfiprintf_r+0x56>
 8026ab6:	6875      	ldr	r5, [r6, #4]
 8026ab8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026aba:	07d9      	lsls	r1, r3, #31
 8026abc:	d405      	bmi.n	8026aca <_vfiprintf_r+0x32>
 8026abe:	89ab      	ldrh	r3, [r5, #12]
 8026ac0:	059a      	lsls	r2, r3, #22
 8026ac2:	d402      	bmi.n	8026aca <_vfiprintf_r+0x32>
 8026ac4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026ac6:	f7ff f845 	bl	8025b54 <__retarget_lock_acquire_recursive>
 8026aca:	89ab      	ldrh	r3, [r5, #12]
 8026acc:	071b      	lsls	r3, r3, #28
 8026ace:	d501      	bpl.n	8026ad4 <_vfiprintf_r+0x3c>
 8026ad0:	692b      	ldr	r3, [r5, #16]
 8026ad2:	b9eb      	cbnz	r3, 8026b10 <_vfiprintf_r+0x78>
 8026ad4:	4629      	mov	r1, r5
 8026ad6:	4630      	mov	r0, r6
 8026ad8:	f7fd fe60 	bl	802479c <__swsetup_r>
 8026adc:	b1c0      	cbz	r0, 8026b10 <_vfiprintf_r+0x78>
 8026ade:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ae0:	07dc      	lsls	r4, r3, #31
 8026ae2:	d50e      	bpl.n	8026b02 <_vfiprintf_r+0x6a>
 8026ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8026ae8:	b01d      	add	sp, #116	; 0x74
 8026aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026aee:	4b7b      	ldr	r3, [pc, #492]	; (8026cdc <_vfiprintf_r+0x244>)
 8026af0:	429d      	cmp	r5, r3
 8026af2:	d101      	bne.n	8026af8 <_vfiprintf_r+0x60>
 8026af4:	68b5      	ldr	r5, [r6, #8]
 8026af6:	e7df      	b.n	8026ab8 <_vfiprintf_r+0x20>
 8026af8:	4b79      	ldr	r3, [pc, #484]	; (8026ce0 <_vfiprintf_r+0x248>)
 8026afa:	429d      	cmp	r5, r3
 8026afc:	bf08      	it	eq
 8026afe:	68f5      	ldreq	r5, [r6, #12]
 8026b00:	e7da      	b.n	8026ab8 <_vfiprintf_r+0x20>
 8026b02:	89ab      	ldrh	r3, [r5, #12]
 8026b04:	0598      	lsls	r0, r3, #22
 8026b06:	d4ed      	bmi.n	8026ae4 <_vfiprintf_r+0x4c>
 8026b08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026b0a:	f7ff f825 	bl	8025b58 <__retarget_lock_release_recursive>
 8026b0e:	e7e9      	b.n	8026ae4 <_vfiprintf_r+0x4c>
 8026b10:	2300      	movs	r3, #0
 8026b12:	9309      	str	r3, [sp, #36]	; 0x24
 8026b14:	2320      	movs	r3, #32
 8026b16:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8026b1a:	f8cd 800c 	str.w	r8, [sp, #12]
 8026b1e:	2330      	movs	r3, #48	; 0x30
 8026b20:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8026ce4 <_vfiprintf_r+0x24c>
 8026b24:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8026b28:	f04f 0901 	mov.w	r9, #1
 8026b2c:	4623      	mov	r3, r4
 8026b2e:	469a      	mov	sl, r3
 8026b30:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026b34:	b10a      	cbz	r2, 8026b3a <_vfiprintf_r+0xa2>
 8026b36:	2a25      	cmp	r2, #37	; 0x25
 8026b38:	d1f9      	bne.n	8026b2e <_vfiprintf_r+0x96>
 8026b3a:	ebba 0b04 	subs.w	fp, sl, r4
 8026b3e:	d00b      	beq.n	8026b58 <_vfiprintf_r+0xc0>
 8026b40:	465b      	mov	r3, fp
 8026b42:	4622      	mov	r2, r4
 8026b44:	4629      	mov	r1, r5
 8026b46:	4630      	mov	r0, r6
 8026b48:	f7ff ff93 	bl	8026a72 <__sfputs_r>
 8026b4c:	3001      	adds	r0, #1
 8026b4e:	f000 80aa 	beq.w	8026ca6 <_vfiprintf_r+0x20e>
 8026b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026b54:	445a      	add	r2, fp
 8026b56:	9209      	str	r2, [sp, #36]	; 0x24
 8026b58:	f89a 3000 	ldrb.w	r3, [sl]
 8026b5c:	2b00      	cmp	r3, #0
 8026b5e:	f000 80a2 	beq.w	8026ca6 <_vfiprintf_r+0x20e>
 8026b62:	2300      	movs	r3, #0
 8026b64:	f04f 32ff 	mov.w	r2, #4294967295
 8026b68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8026b6c:	f10a 0a01 	add.w	sl, sl, #1
 8026b70:	9304      	str	r3, [sp, #16]
 8026b72:	9307      	str	r3, [sp, #28]
 8026b74:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8026b78:	931a      	str	r3, [sp, #104]	; 0x68
 8026b7a:	4654      	mov	r4, sl
 8026b7c:	2205      	movs	r2, #5
 8026b7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026b82:	4858      	ldr	r0, [pc, #352]	; (8026ce4 <_vfiprintf_r+0x24c>)
 8026b84:	f7d9 fb74 	bl	8000270 <memchr>
 8026b88:	9a04      	ldr	r2, [sp, #16]
 8026b8a:	b9d8      	cbnz	r0, 8026bc4 <_vfiprintf_r+0x12c>
 8026b8c:	06d1      	lsls	r1, r2, #27
 8026b8e:	bf44      	itt	mi
 8026b90:	2320      	movmi	r3, #32
 8026b92:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026b96:	0713      	lsls	r3, r2, #28
 8026b98:	bf44      	itt	mi
 8026b9a:	232b      	movmi	r3, #43	; 0x2b
 8026b9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8026ba0:	f89a 3000 	ldrb.w	r3, [sl]
 8026ba4:	2b2a      	cmp	r3, #42	; 0x2a
 8026ba6:	d015      	beq.n	8026bd4 <_vfiprintf_r+0x13c>
 8026ba8:	9a07      	ldr	r2, [sp, #28]
 8026baa:	4654      	mov	r4, sl
 8026bac:	2000      	movs	r0, #0
 8026bae:	f04f 0c0a 	mov.w	ip, #10
 8026bb2:	4621      	mov	r1, r4
 8026bb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8026bb8:	3b30      	subs	r3, #48	; 0x30
 8026bba:	2b09      	cmp	r3, #9
 8026bbc:	d94e      	bls.n	8026c5c <_vfiprintf_r+0x1c4>
 8026bbe:	b1b0      	cbz	r0, 8026bee <_vfiprintf_r+0x156>
 8026bc0:	9207      	str	r2, [sp, #28]
 8026bc2:	e014      	b.n	8026bee <_vfiprintf_r+0x156>
 8026bc4:	eba0 0308 	sub.w	r3, r0, r8
 8026bc8:	fa09 f303 	lsl.w	r3, r9, r3
 8026bcc:	4313      	orrs	r3, r2
 8026bce:	9304      	str	r3, [sp, #16]
 8026bd0:	46a2      	mov	sl, r4
 8026bd2:	e7d2      	b.n	8026b7a <_vfiprintf_r+0xe2>
 8026bd4:	9b03      	ldr	r3, [sp, #12]
 8026bd6:	1d19      	adds	r1, r3, #4
 8026bd8:	681b      	ldr	r3, [r3, #0]
 8026bda:	9103      	str	r1, [sp, #12]
 8026bdc:	2b00      	cmp	r3, #0
 8026bde:	bfbb      	ittet	lt
 8026be0:	425b      	neglt	r3, r3
 8026be2:	f042 0202 	orrlt.w	r2, r2, #2
 8026be6:	9307      	strge	r3, [sp, #28]
 8026be8:	9307      	strlt	r3, [sp, #28]
 8026bea:	bfb8      	it	lt
 8026bec:	9204      	strlt	r2, [sp, #16]
 8026bee:	7823      	ldrb	r3, [r4, #0]
 8026bf0:	2b2e      	cmp	r3, #46	; 0x2e
 8026bf2:	d10c      	bne.n	8026c0e <_vfiprintf_r+0x176>
 8026bf4:	7863      	ldrb	r3, [r4, #1]
 8026bf6:	2b2a      	cmp	r3, #42	; 0x2a
 8026bf8:	d135      	bne.n	8026c66 <_vfiprintf_r+0x1ce>
 8026bfa:	9b03      	ldr	r3, [sp, #12]
 8026bfc:	1d1a      	adds	r2, r3, #4
 8026bfe:	681b      	ldr	r3, [r3, #0]
 8026c00:	9203      	str	r2, [sp, #12]
 8026c02:	2b00      	cmp	r3, #0
 8026c04:	bfb8      	it	lt
 8026c06:	f04f 33ff 	movlt.w	r3, #4294967295
 8026c0a:	3402      	adds	r4, #2
 8026c0c:	9305      	str	r3, [sp, #20]
 8026c0e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8026cf4 <_vfiprintf_r+0x25c>
 8026c12:	7821      	ldrb	r1, [r4, #0]
 8026c14:	2203      	movs	r2, #3
 8026c16:	4650      	mov	r0, sl
 8026c18:	f7d9 fb2a 	bl	8000270 <memchr>
 8026c1c:	b140      	cbz	r0, 8026c30 <_vfiprintf_r+0x198>
 8026c1e:	2340      	movs	r3, #64	; 0x40
 8026c20:	eba0 000a 	sub.w	r0, r0, sl
 8026c24:	fa03 f000 	lsl.w	r0, r3, r0
 8026c28:	9b04      	ldr	r3, [sp, #16]
 8026c2a:	4303      	orrs	r3, r0
 8026c2c:	3401      	adds	r4, #1
 8026c2e:	9304      	str	r3, [sp, #16]
 8026c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8026c34:	482c      	ldr	r0, [pc, #176]	; (8026ce8 <_vfiprintf_r+0x250>)
 8026c36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8026c3a:	2206      	movs	r2, #6
 8026c3c:	f7d9 fb18 	bl	8000270 <memchr>
 8026c40:	2800      	cmp	r0, #0
 8026c42:	d03f      	beq.n	8026cc4 <_vfiprintf_r+0x22c>
 8026c44:	4b29      	ldr	r3, [pc, #164]	; (8026cec <_vfiprintf_r+0x254>)
 8026c46:	bb1b      	cbnz	r3, 8026c90 <_vfiprintf_r+0x1f8>
 8026c48:	9b03      	ldr	r3, [sp, #12]
 8026c4a:	3307      	adds	r3, #7
 8026c4c:	f023 0307 	bic.w	r3, r3, #7
 8026c50:	3308      	adds	r3, #8
 8026c52:	9303      	str	r3, [sp, #12]
 8026c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026c56:	443b      	add	r3, r7
 8026c58:	9309      	str	r3, [sp, #36]	; 0x24
 8026c5a:	e767      	b.n	8026b2c <_vfiprintf_r+0x94>
 8026c5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8026c60:	460c      	mov	r4, r1
 8026c62:	2001      	movs	r0, #1
 8026c64:	e7a5      	b.n	8026bb2 <_vfiprintf_r+0x11a>
 8026c66:	2300      	movs	r3, #0
 8026c68:	3401      	adds	r4, #1
 8026c6a:	9305      	str	r3, [sp, #20]
 8026c6c:	4619      	mov	r1, r3
 8026c6e:	f04f 0c0a 	mov.w	ip, #10
 8026c72:	4620      	mov	r0, r4
 8026c74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026c78:	3a30      	subs	r2, #48	; 0x30
 8026c7a:	2a09      	cmp	r2, #9
 8026c7c:	d903      	bls.n	8026c86 <_vfiprintf_r+0x1ee>
 8026c7e:	2b00      	cmp	r3, #0
 8026c80:	d0c5      	beq.n	8026c0e <_vfiprintf_r+0x176>
 8026c82:	9105      	str	r1, [sp, #20]
 8026c84:	e7c3      	b.n	8026c0e <_vfiprintf_r+0x176>
 8026c86:	fb0c 2101 	mla	r1, ip, r1, r2
 8026c8a:	4604      	mov	r4, r0
 8026c8c:	2301      	movs	r3, #1
 8026c8e:	e7f0      	b.n	8026c72 <_vfiprintf_r+0x1da>
 8026c90:	ab03      	add	r3, sp, #12
 8026c92:	9300      	str	r3, [sp, #0]
 8026c94:	462a      	mov	r2, r5
 8026c96:	4b16      	ldr	r3, [pc, #88]	; (8026cf0 <_vfiprintf_r+0x258>)
 8026c98:	a904      	add	r1, sp, #16
 8026c9a:	4630      	mov	r0, r6
 8026c9c:	f7fb fe70 	bl	8022980 <_printf_float>
 8026ca0:	4607      	mov	r7, r0
 8026ca2:	1c78      	adds	r0, r7, #1
 8026ca4:	d1d6      	bne.n	8026c54 <_vfiprintf_r+0x1bc>
 8026ca6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8026ca8:	07d9      	lsls	r1, r3, #31
 8026caa:	d405      	bmi.n	8026cb8 <_vfiprintf_r+0x220>
 8026cac:	89ab      	ldrh	r3, [r5, #12]
 8026cae:	059a      	lsls	r2, r3, #22
 8026cb0:	d402      	bmi.n	8026cb8 <_vfiprintf_r+0x220>
 8026cb2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8026cb4:	f7fe ff50 	bl	8025b58 <__retarget_lock_release_recursive>
 8026cb8:	89ab      	ldrh	r3, [r5, #12]
 8026cba:	065b      	lsls	r3, r3, #25
 8026cbc:	f53f af12 	bmi.w	8026ae4 <_vfiprintf_r+0x4c>
 8026cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8026cc2:	e711      	b.n	8026ae8 <_vfiprintf_r+0x50>
 8026cc4:	ab03      	add	r3, sp, #12
 8026cc6:	9300      	str	r3, [sp, #0]
 8026cc8:	462a      	mov	r2, r5
 8026cca:	4b09      	ldr	r3, [pc, #36]	; (8026cf0 <_vfiprintf_r+0x258>)
 8026ccc:	a904      	add	r1, sp, #16
 8026cce:	4630      	mov	r0, r6
 8026cd0:	f7fc f8e2 	bl	8022e98 <_printf_i>
 8026cd4:	e7e4      	b.n	8026ca0 <_vfiprintf_r+0x208>
 8026cd6:	bf00      	nop
 8026cd8:	08043208 	.word	0x08043208
 8026cdc:	08043228 	.word	0x08043228
 8026ce0:	080431e8 	.word	0x080431e8
 8026ce4:	080433b4 	.word	0x080433b4
 8026ce8:	080433be 	.word	0x080433be
 8026cec:	08022981 	.word	0x08022981
 8026cf0:	08026a73 	.word	0x08026a73
 8026cf4:	080433ba 	.word	0x080433ba

08026cf8 <_scanf_chars>:
 8026cf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026cfc:	4615      	mov	r5, r2
 8026cfe:	688a      	ldr	r2, [r1, #8]
 8026d00:	4680      	mov	r8, r0
 8026d02:	460c      	mov	r4, r1
 8026d04:	b932      	cbnz	r2, 8026d14 <_scanf_chars+0x1c>
 8026d06:	698a      	ldr	r2, [r1, #24]
 8026d08:	2a00      	cmp	r2, #0
 8026d0a:	bf0c      	ite	eq
 8026d0c:	2201      	moveq	r2, #1
 8026d0e:	f04f 32ff 	movne.w	r2, #4294967295
 8026d12:	608a      	str	r2, [r1, #8]
 8026d14:	6822      	ldr	r2, [r4, #0]
 8026d16:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8026da4 <_scanf_chars+0xac>
 8026d1a:	06d1      	lsls	r1, r2, #27
 8026d1c:	bf5f      	itttt	pl
 8026d1e:	681a      	ldrpl	r2, [r3, #0]
 8026d20:	1d11      	addpl	r1, r2, #4
 8026d22:	6019      	strpl	r1, [r3, #0]
 8026d24:	6816      	ldrpl	r6, [r2, #0]
 8026d26:	2700      	movs	r7, #0
 8026d28:	69a0      	ldr	r0, [r4, #24]
 8026d2a:	b188      	cbz	r0, 8026d50 <_scanf_chars+0x58>
 8026d2c:	2801      	cmp	r0, #1
 8026d2e:	d107      	bne.n	8026d40 <_scanf_chars+0x48>
 8026d30:	682b      	ldr	r3, [r5, #0]
 8026d32:	781a      	ldrb	r2, [r3, #0]
 8026d34:	6963      	ldr	r3, [r4, #20]
 8026d36:	5c9b      	ldrb	r3, [r3, r2]
 8026d38:	b953      	cbnz	r3, 8026d50 <_scanf_chars+0x58>
 8026d3a:	bb27      	cbnz	r7, 8026d86 <_scanf_chars+0x8e>
 8026d3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026d40:	2802      	cmp	r0, #2
 8026d42:	d120      	bne.n	8026d86 <_scanf_chars+0x8e>
 8026d44:	682b      	ldr	r3, [r5, #0]
 8026d46:	781b      	ldrb	r3, [r3, #0]
 8026d48:	f813 3009 	ldrb.w	r3, [r3, r9]
 8026d4c:	071b      	lsls	r3, r3, #28
 8026d4e:	d41a      	bmi.n	8026d86 <_scanf_chars+0x8e>
 8026d50:	6823      	ldr	r3, [r4, #0]
 8026d52:	06da      	lsls	r2, r3, #27
 8026d54:	bf5e      	ittt	pl
 8026d56:	682b      	ldrpl	r3, [r5, #0]
 8026d58:	781b      	ldrbpl	r3, [r3, #0]
 8026d5a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8026d5e:	682a      	ldr	r2, [r5, #0]
 8026d60:	686b      	ldr	r3, [r5, #4]
 8026d62:	3201      	adds	r2, #1
 8026d64:	602a      	str	r2, [r5, #0]
 8026d66:	68a2      	ldr	r2, [r4, #8]
 8026d68:	3b01      	subs	r3, #1
 8026d6a:	3a01      	subs	r2, #1
 8026d6c:	606b      	str	r3, [r5, #4]
 8026d6e:	3701      	adds	r7, #1
 8026d70:	60a2      	str	r2, [r4, #8]
 8026d72:	b142      	cbz	r2, 8026d86 <_scanf_chars+0x8e>
 8026d74:	2b00      	cmp	r3, #0
 8026d76:	dcd7      	bgt.n	8026d28 <_scanf_chars+0x30>
 8026d78:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8026d7c:	4629      	mov	r1, r5
 8026d7e:	4640      	mov	r0, r8
 8026d80:	4798      	blx	r3
 8026d82:	2800      	cmp	r0, #0
 8026d84:	d0d0      	beq.n	8026d28 <_scanf_chars+0x30>
 8026d86:	6823      	ldr	r3, [r4, #0]
 8026d88:	f013 0310 	ands.w	r3, r3, #16
 8026d8c:	d105      	bne.n	8026d9a <_scanf_chars+0xa2>
 8026d8e:	68e2      	ldr	r2, [r4, #12]
 8026d90:	3201      	adds	r2, #1
 8026d92:	60e2      	str	r2, [r4, #12]
 8026d94:	69a2      	ldr	r2, [r4, #24]
 8026d96:	b102      	cbz	r2, 8026d9a <_scanf_chars+0xa2>
 8026d98:	7033      	strb	r3, [r6, #0]
 8026d9a:	6923      	ldr	r3, [r4, #16]
 8026d9c:	441f      	add	r7, r3
 8026d9e:	6127      	str	r7, [r4, #16]
 8026da0:	2000      	movs	r0, #0
 8026da2:	e7cb      	b.n	8026d3c <_scanf_chars+0x44>
 8026da4:	08042ae5 	.word	0x08042ae5

08026da8 <_scanf_i>:
 8026da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026dac:	4698      	mov	r8, r3
 8026dae:	4b74      	ldr	r3, [pc, #464]	; (8026f80 <_scanf_i+0x1d8>)
 8026db0:	460c      	mov	r4, r1
 8026db2:	4682      	mov	sl, r0
 8026db4:	4616      	mov	r6, r2
 8026db6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8026dba:	b087      	sub	sp, #28
 8026dbc:	ab03      	add	r3, sp, #12
 8026dbe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8026dc2:	4b70      	ldr	r3, [pc, #448]	; (8026f84 <_scanf_i+0x1dc>)
 8026dc4:	69a1      	ldr	r1, [r4, #24]
 8026dc6:	4a70      	ldr	r2, [pc, #448]	; (8026f88 <_scanf_i+0x1e0>)
 8026dc8:	2903      	cmp	r1, #3
 8026dca:	bf18      	it	ne
 8026dcc:	461a      	movne	r2, r3
 8026dce:	68a3      	ldr	r3, [r4, #8]
 8026dd0:	9201      	str	r2, [sp, #4]
 8026dd2:	1e5a      	subs	r2, r3, #1
 8026dd4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8026dd8:	bf88      	it	hi
 8026dda:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8026dde:	4627      	mov	r7, r4
 8026de0:	bf82      	ittt	hi
 8026de2:	eb03 0905 	addhi.w	r9, r3, r5
 8026de6:	f240 135d 	movwhi	r3, #349	; 0x15d
 8026dea:	60a3      	strhi	r3, [r4, #8]
 8026dec:	f857 3b1c 	ldr.w	r3, [r7], #28
 8026df0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8026df4:	bf98      	it	ls
 8026df6:	f04f 0900 	movls.w	r9, #0
 8026dfa:	6023      	str	r3, [r4, #0]
 8026dfc:	463d      	mov	r5, r7
 8026dfe:	f04f 0b00 	mov.w	fp, #0
 8026e02:	6831      	ldr	r1, [r6, #0]
 8026e04:	ab03      	add	r3, sp, #12
 8026e06:	7809      	ldrb	r1, [r1, #0]
 8026e08:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8026e0c:	2202      	movs	r2, #2
 8026e0e:	f7d9 fa2f 	bl	8000270 <memchr>
 8026e12:	b328      	cbz	r0, 8026e60 <_scanf_i+0xb8>
 8026e14:	f1bb 0f01 	cmp.w	fp, #1
 8026e18:	d159      	bne.n	8026ece <_scanf_i+0x126>
 8026e1a:	6862      	ldr	r2, [r4, #4]
 8026e1c:	b92a      	cbnz	r2, 8026e2a <_scanf_i+0x82>
 8026e1e:	6822      	ldr	r2, [r4, #0]
 8026e20:	2308      	movs	r3, #8
 8026e22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8026e26:	6063      	str	r3, [r4, #4]
 8026e28:	6022      	str	r2, [r4, #0]
 8026e2a:	6822      	ldr	r2, [r4, #0]
 8026e2c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8026e30:	6022      	str	r2, [r4, #0]
 8026e32:	68a2      	ldr	r2, [r4, #8]
 8026e34:	1e51      	subs	r1, r2, #1
 8026e36:	60a1      	str	r1, [r4, #8]
 8026e38:	b192      	cbz	r2, 8026e60 <_scanf_i+0xb8>
 8026e3a:	6832      	ldr	r2, [r6, #0]
 8026e3c:	1c51      	adds	r1, r2, #1
 8026e3e:	6031      	str	r1, [r6, #0]
 8026e40:	7812      	ldrb	r2, [r2, #0]
 8026e42:	f805 2b01 	strb.w	r2, [r5], #1
 8026e46:	6872      	ldr	r2, [r6, #4]
 8026e48:	3a01      	subs	r2, #1
 8026e4a:	2a00      	cmp	r2, #0
 8026e4c:	6072      	str	r2, [r6, #4]
 8026e4e:	dc07      	bgt.n	8026e60 <_scanf_i+0xb8>
 8026e50:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8026e54:	4631      	mov	r1, r6
 8026e56:	4650      	mov	r0, sl
 8026e58:	4790      	blx	r2
 8026e5a:	2800      	cmp	r0, #0
 8026e5c:	f040 8085 	bne.w	8026f6a <_scanf_i+0x1c2>
 8026e60:	f10b 0b01 	add.w	fp, fp, #1
 8026e64:	f1bb 0f03 	cmp.w	fp, #3
 8026e68:	d1cb      	bne.n	8026e02 <_scanf_i+0x5a>
 8026e6a:	6863      	ldr	r3, [r4, #4]
 8026e6c:	b90b      	cbnz	r3, 8026e72 <_scanf_i+0xca>
 8026e6e:	230a      	movs	r3, #10
 8026e70:	6063      	str	r3, [r4, #4]
 8026e72:	6863      	ldr	r3, [r4, #4]
 8026e74:	4945      	ldr	r1, [pc, #276]	; (8026f8c <_scanf_i+0x1e4>)
 8026e76:	6960      	ldr	r0, [r4, #20]
 8026e78:	1ac9      	subs	r1, r1, r3
 8026e7a:	f000 f8e3 	bl	8027044 <__sccl>
 8026e7e:	f04f 0b00 	mov.w	fp, #0
 8026e82:	68a3      	ldr	r3, [r4, #8]
 8026e84:	6822      	ldr	r2, [r4, #0]
 8026e86:	2b00      	cmp	r3, #0
 8026e88:	d03d      	beq.n	8026f06 <_scanf_i+0x15e>
 8026e8a:	6831      	ldr	r1, [r6, #0]
 8026e8c:	6960      	ldr	r0, [r4, #20]
 8026e8e:	f891 c000 	ldrb.w	ip, [r1]
 8026e92:	f810 000c 	ldrb.w	r0, [r0, ip]
 8026e96:	2800      	cmp	r0, #0
 8026e98:	d035      	beq.n	8026f06 <_scanf_i+0x15e>
 8026e9a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8026e9e:	d124      	bne.n	8026eea <_scanf_i+0x142>
 8026ea0:	0510      	lsls	r0, r2, #20
 8026ea2:	d522      	bpl.n	8026eea <_scanf_i+0x142>
 8026ea4:	f10b 0b01 	add.w	fp, fp, #1
 8026ea8:	f1b9 0f00 	cmp.w	r9, #0
 8026eac:	d003      	beq.n	8026eb6 <_scanf_i+0x10e>
 8026eae:	3301      	adds	r3, #1
 8026eb0:	f109 39ff 	add.w	r9, r9, #4294967295
 8026eb4:	60a3      	str	r3, [r4, #8]
 8026eb6:	6873      	ldr	r3, [r6, #4]
 8026eb8:	3b01      	subs	r3, #1
 8026eba:	2b00      	cmp	r3, #0
 8026ebc:	6073      	str	r3, [r6, #4]
 8026ebe:	dd1b      	ble.n	8026ef8 <_scanf_i+0x150>
 8026ec0:	6833      	ldr	r3, [r6, #0]
 8026ec2:	3301      	adds	r3, #1
 8026ec4:	6033      	str	r3, [r6, #0]
 8026ec6:	68a3      	ldr	r3, [r4, #8]
 8026ec8:	3b01      	subs	r3, #1
 8026eca:	60a3      	str	r3, [r4, #8]
 8026ecc:	e7d9      	b.n	8026e82 <_scanf_i+0xda>
 8026ece:	f1bb 0f02 	cmp.w	fp, #2
 8026ed2:	d1ae      	bne.n	8026e32 <_scanf_i+0x8a>
 8026ed4:	6822      	ldr	r2, [r4, #0]
 8026ed6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8026eda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8026ede:	d1bf      	bne.n	8026e60 <_scanf_i+0xb8>
 8026ee0:	2310      	movs	r3, #16
 8026ee2:	6063      	str	r3, [r4, #4]
 8026ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8026ee8:	e7a2      	b.n	8026e30 <_scanf_i+0x88>
 8026eea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8026eee:	6022      	str	r2, [r4, #0]
 8026ef0:	780b      	ldrb	r3, [r1, #0]
 8026ef2:	f805 3b01 	strb.w	r3, [r5], #1
 8026ef6:	e7de      	b.n	8026eb6 <_scanf_i+0x10e>
 8026ef8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8026efc:	4631      	mov	r1, r6
 8026efe:	4650      	mov	r0, sl
 8026f00:	4798      	blx	r3
 8026f02:	2800      	cmp	r0, #0
 8026f04:	d0df      	beq.n	8026ec6 <_scanf_i+0x11e>
 8026f06:	6823      	ldr	r3, [r4, #0]
 8026f08:	05d9      	lsls	r1, r3, #23
 8026f0a:	d50d      	bpl.n	8026f28 <_scanf_i+0x180>
 8026f0c:	42bd      	cmp	r5, r7
 8026f0e:	d909      	bls.n	8026f24 <_scanf_i+0x17c>
 8026f10:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8026f14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8026f18:	4632      	mov	r2, r6
 8026f1a:	4650      	mov	r0, sl
 8026f1c:	4798      	blx	r3
 8026f1e:	f105 39ff 	add.w	r9, r5, #4294967295
 8026f22:	464d      	mov	r5, r9
 8026f24:	42bd      	cmp	r5, r7
 8026f26:	d028      	beq.n	8026f7a <_scanf_i+0x1d2>
 8026f28:	6822      	ldr	r2, [r4, #0]
 8026f2a:	f012 0210 	ands.w	r2, r2, #16
 8026f2e:	d113      	bne.n	8026f58 <_scanf_i+0x1b0>
 8026f30:	702a      	strb	r2, [r5, #0]
 8026f32:	6863      	ldr	r3, [r4, #4]
 8026f34:	9e01      	ldr	r6, [sp, #4]
 8026f36:	4639      	mov	r1, r7
 8026f38:	4650      	mov	r0, sl
 8026f3a:	47b0      	blx	r6
 8026f3c:	f8d8 3000 	ldr.w	r3, [r8]
 8026f40:	6821      	ldr	r1, [r4, #0]
 8026f42:	1d1a      	adds	r2, r3, #4
 8026f44:	f8c8 2000 	str.w	r2, [r8]
 8026f48:	f011 0f20 	tst.w	r1, #32
 8026f4c:	681b      	ldr	r3, [r3, #0]
 8026f4e:	d00f      	beq.n	8026f70 <_scanf_i+0x1c8>
 8026f50:	6018      	str	r0, [r3, #0]
 8026f52:	68e3      	ldr	r3, [r4, #12]
 8026f54:	3301      	adds	r3, #1
 8026f56:	60e3      	str	r3, [r4, #12]
 8026f58:	1bed      	subs	r5, r5, r7
 8026f5a:	44ab      	add	fp, r5
 8026f5c:	6925      	ldr	r5, [r4, #16]
 8026f5e:	445d      	add	r5, fp
 8026f60:	6125      	str	r5, [r4, #16]
 8026f62:	2000      	movs	r0, #0
 8026f64:	b007      	add	sp, #28
 8026f66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026f6a:	f04f 0b00 	mov.w	fp, #0
 8026f6e:	e7ca      	b.n	8026f06 <_scanf_i+0x15e>
 8026f70:	07ca      	lsls	r2, r1, #31
 8026f72:	bf4c      	ite	mi
 8026f74:	8018      	strhmi	r0, [r3, #0]
 8026f76:	6018      	strpl	r0, [r3, #0]
 8026f78:	e7eb      	b.n	8026f52 <_scanf_i+0x1aa>
 8026f7a:	2001      	movs	r0, #1
 8026f7c:	e7f2      	b.n	8026f64 <_scanf_i+0x1bc>
 8026f7e:	bf00      	nop
 8026f80:	08027440 	.word	0x08027440
 8026f84:	08024251 	.word	0x08024251
 8026f88:	08024141 	.word	0x08024141
 8026f8c:	080433de 	.word	0x080433de

08026f90 <_putc_r>:
 8026f90:	b570      	push	{r4, r5, r6, lr}
 8026f92:	460d      	mov	r5, r1
 8026f94:	4614      	mov	r4, r2
 8026f96:	4606      	mov	r6, r0
 8026f98:	b118      	cbz	r0, 8026fa2 <_putc_r+0x12>
 8026f9a:	6983      	ldr	r3, [r0, #24]
 8026f9c:	b90b      	cbnz	r3, 8026fa2 <_putc_r+0x12>
 8026f9e:	f7fe fc29 	bl	80257f4 <__sinit>
 8026fa2:	4b1c      	ldr	r3, [pc, #112]	; (8027014 <_putc_r+0x84>)
 8026fa4:	429c      	cmp	r4, r3
 8026fa6:	d124      	bne.n	8026ff2 <_putc_r+0x62>
 8026fa8:	6874      	ldr	r4, [r6, #4]
 8026faa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026fac:	07d8      	lsls	r0, r3, #31
 8026fae:	d405      	bmi.n	8026fbc <_putc_r+0x2c>
 8026fb0:	89a3      	ldrh	r3, [r4, #12]
 8026fb2:	0599      	lsls	r1, r3, #22
 8026fb4:	d402      	bmi.n	8026fbc <_putc_r+0x2c>
 8026fb6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026fb8:	f7fe fdcc 	bl	8025b54 <__retarget_lock_acquire_recursive>
 8026fbc:	68a3      	ldr	r3, [r4, #8]
 8026fbe:	3b01      	subs	r3, #1
 8026fc0:	2b00      	cmp	r3, #0
 8026fc2:	60a3      	str	r3, [r4, #8]
 8026fc4:	da05      	bge.n	8026fd2 <_putc_r+0x42>
 8026fc6:	69a2      	ldr	r2, [r4, #24]
 8026fc8:	4293      	cmp	r3, r2
 8026fca:	db1c      	blt.n	8027006 <_putc_r+0x76>
 8026fcc:	b2eb      	uxtb	r3, r5
 8026fce:	2b0a      	cmp	r3, #10
 8026fd0:	d019      	beq.n	8027006 <_putc_r+0x76>
 8026fd2:	6823      	ldr	r3, [r4, #0]
 8026fd4:	1c5a      	adds	r2, r3, #1
 8026fd6:	6022      	str	r2, [r4, #0]
 8026fd8:	701d      	strb	r5, [r3, #0]
 8026fda:	b2ed      	uxtb	r5, r5
 8026fdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8026fde:	07da      	lsls	r2, r3, #31
 8026fe0:	d405      	bmi.n	8026fee <_putc_r+0x5e>
 8026fe2:	89a3      	ldrh	r3, [r4, #12]
 8026fe4:	059b      	lsls	r3, r3, #22
 8026fe6:	d402      	bmi.n	8026fee <_putc_r+0x5e>
 8026fe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8026fea:	f7fe fdb5 	bl	8025b58 <__retarget_lock_release_recursive>
 8026fee:	4628      	mov	r0, r5
 8026ff0:	bd70      	pop	{r4, r5, r6, pc}
 8026ff2:	4b09      	ldr	r3, [pc, #36]	; (8027018 <_putc_r+0x88>)
 8026ff4:	429c      	cmp	r4, r3
 8026ff6:	d101      	bne.n	8026ffc <_putc_r+0x6c>
 8026ff8:	68b4      	ldr	r4, [r6, #8]
 8026ffa:	e7d6      	b.n	8026faa <_putc_r+0x1a>
 8026ffc:	4b07      	ldr	r3, [pc, #28]	; (802701c <_putc_r+0x8c>)
 8026ffe:	429c      	cmp	r4, r3
 8027000:	bf08      	it	eq
 8027002:	68f4      	ldreq	r4, [r6, #12]
 8027004:	e7d1      	b.n	8026faa <_putc_r+0x1a>
 8027006:	4629      	mov	r1, r5
 8027008:	4622      	mov	r2, r4
 802700a:	4630      	mov	r0, r6
 802700c:	f7fd fb62 	bl	80246d4 <__swbuf_r>
 8027010:	4605      	mov	r5, r0
 8027012:	e7e3      	b.n	8026fdc <_putc_r+0x4c>
 8027014:	08043208 	.word	0x08043208
 8027018:	08043228 	.word	0x08043228
 802701c:	080431e8 	.word	0x080431e8

08027020 <_read_r>:
 8027020:	b538      	push	{r3, r4, r5, lr}
 8027022:	4d07      	ldr	r5, [pc, #28]	; (8027040 <_read_r+0x20>)
 8027024:	4604      	mov	r4, r0
 8027026:	4608      	mov	r0, r1
 8027028:	4611      	mov	r1, r2
 802702a:	2200      	movs	r2, #0
 802702c:	602a      	str	r2, [r5, #0]
 802702e:	461a      	mov	r2, r3
 8027030:	f7df f856 	bl	80060e0 <_read>
 8027034:	1c43      	adds	r3, r0, #1
 8027036:	d102      	bne.n	802703e <_read_r+0x1e>
 8027038:	682b      	ldr	r3, [r5, #0]
 802703a:	b103      	cbz	r3, 802703e <_read_r+0x1e>
 802703c:	6023      	str	r3, [r4, #0]
 802703e:	bd38      	pop	{r3, r4, r5, pc}
 8027040:	2002e4e8 	.word	0x2002e4e8

08027044 <__sccl>:
 8027044:	b570      	push	{r4, r5, r6, lr}
 8027046:	780b      	ldrb	r3, [r1, #0]
 8027048:	4604      	mov	r4, r0
 802704a:	2b5e      	cmp	r3, #94	; 0x5e
 802704c:	bf0b      	itete	eq
 802704e:	784b      	ldrbeq	r3, [r1, #1]
 8027050:	1c48      	addne	r0, r1, #1
 8027052:	1c88      	addeq	r0, r1, #2
 8027054:	2200      	movne	r2, #0
 8027056:	bf08      	it	eq
 8027058:	2201      	moveq	r2, #1
 802705a:	1e61      	subs	r1, r4, #1
 802705c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8027060:	f801 2f01 	strb.w	r2, [r1, #1]!
 8027064:	42a9      	cmp	r1, r5
 8027066:	d1fb      	bne.n	8027060 <__sccl+0x1c>
 8027068:	b90b      	cbnz	r3, 802706e <__sccl+0x2a>
 802706a:	3801      	subs	r0, #1
 802706c:	bd70      	pop	{r4, r5, r6, pc}
 802706e:	f082 0101 	eor.w	r1, r2, #1
 8027072:	54e1      	strb	r1, [r4, r3]
 8027074:	1c42      	adds	r2, r0, #1
 8027076:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 802707a:	2d2d      	cmp	r5, #45	; 0x2d
 802707c:	f102 36ff 	add.w	r6, r2, #4294967295
 8027080:	4610      	mov	r0, r2
 8027082:	d006      	beq.n	8027092 <__sccl+0x4e>
 8027084:	2d5d      	cmp	r5, #93	; 0x5d
 8027086:	d0f1      	beq.n	802706c <__sccl+0x28>
 8027088:	b90d      	cbnz	r5, 802708e <__sccl+0x4a>
 802708a:	4630      	mov	r0, r6
 802708c:	e7ee      	b.n	802706c <__sccl+0x28>
 802708e:	462b      	mov	r3, r5
 8027090:	e7ef      	b.n	8027072 <__sccl+0x2e>
 8027092:	7816      	ldrb	r6, [r2, #0]
 8027094:	2e5d      	cmp	r6, #93	; 0x5d
 8027096:	d0fa      	beq.n	802708e <__sccl+0x4a>
 8027098:	42b3      	cmp	r3, r6
 802709a:	dcf8      	bgt.n	802708e <__sccl+0x4a>
 802709c:	4618      	mov	r0, r3
 802709e:	3001      	adds	r0, #1
 80270a0:	4286      	cmp	r6, r0
 80270a2:	5421      	strb	r1, [r4, r0]
 80270a4:	dcfb      	bgt.n	802709e <__sccl+0x5a>
 80270a6:	43d8      	mvns	r0, r3
 80270a8:	4430      	add	r0, r6
 80270aa:	1c5d      	adds	r5, r3, #1
 80270ac:	42b3      	cmp	r3, r6
 80270ae:	bfa8      	it	ge
 80270b0:	2000      	movge	r0, #0
 80270b2:	182b      	adds	r3, r5, r0
 80270b4:	3202      	adds	r2, #2
 80270b6:	e7de      	b.n	8027076 <__sccl+0x32>

080270b8 <__submore>:
 80270b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80270bc:	460c      	mov	r4, r1
 80270be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80270c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80270c4:	4299      	cmp	r1, r3
 80270c6:	d11d      	bne.n	8027104 <__submore+0x4c>
 80270c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80270cc:	f7fb fb6e 	bl	80227ac <_malloc_r>
 80270d0:	b918      	cbnz	r0, 80270da <__submore+0x22>
 80270d2:	f04f 30ff 	mov.w	r0, #4294967295
 80270d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80270da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80270de:	63a3      	str	r3, [r4, #56]	; 0x38
 80270e0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80270e4:	6360      	str	r0, [r4, #52]	; 0x34
 80270e6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80270ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80270ee:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80270f2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80270f6:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80270fa:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80270fe:	6020      	str	r0, [r4, #0]
 8027100:	2000      	movs	r0, #0
 8027102:	e7e8      	b.n	80270d6 <__submore+0x1e>
 8027104:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8027106:	0077      	lsls	r7, r6, #1
 8027108:	463a      	mov	r2, r7
 802710a:	f7ff f948 	bl	802639e <_realloc_r>
 802710e:	4605      	mov	r5, r0
 8027110:	2800      	cmp	r0, #0
 8027112:	d0de      	beq.n	80270d2 <__submore+0x1a>
 8027114:	eb00 0806 	add.w	r8, r0, r6
 8027118:	4601      	mov	r1, r0
 802711a:	4632      	mov	r2, r6
 802711c:	4640      	mov	r0, r8
 802711e:	f7fb f847 	bl	80221b0 <memcpy>
 8027122:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8027126:	f8c4 8000 	str.w	r8, [r4]
 802712a:	e7e9      	b.n	8027100 <__submore+0x48>

0802712c <__ascii_wctomb>:
 802712c:	b149      	cbz	r1, 8027142 <__ascii_wctomb+0x16>
 802712e:	2aff      	cmp	r2, #255	; 0xff
 8027130:	bf85      	ittet	hi
 8027132:	238a      	movhi	r3, #138	; 0x8a
 8027134:	6003      	strhi	r3, [r0, #0]
 8027136:	700a      	strbls	r2, [r1, #0]
 8027138:	f04f 30ff 	movhi.w	r0, #4294967295
 802713c:	bf98      	it	ls
 802713e:	2001      	movls	r0, #1
 8027140:	4770      	bx	lr
 8027142:	4608      	mov	r0, r1
 8027144:	4770      	bx	lr

08027146 <abort>:
 8027146:	b508      	push	{r3, lr}
 8027148:	2006      	movs	r0, #6
 802714a:	f000 f861 	bl	8027210 <raise>
 802714e:	2001      	movs	r0, #1
 8027150:	f7de ffc0 	bl	80060d4 <_exit>

08027154 <__env_lock>:
 8027154:	4801      	ldr	r0, [pc, #4]	; (802715c <__env_lock+0x8>)
 8027156:	f7fe bcfd 	b.w	8025b54 <__retarget_lock_acquire_recursive>
 802715a:	bf00      	nop
 802715c:	2002fdc6 	.word	0x2002fdc6

08027160 <__env_unlock>:
 8027160:	4801      	ldr	r0, [pc, #4]	; (8027168 <__env_unlock+0x8>)
 8027162:	f7fe bcf9 	b.w	8025b58 <__retarget_lock_release_recursive>
 8027166:	bf00      	nop
 8027168:	2002fdc6 	.word	0x2002fdc6

0802716c <_fstat_r>:
 802716c:	b538      	push	{r3, r4, r5, lr}
 802716e:	4d07      	ldr	r5, [pc, #28]	; (802718c <_fstat_r+0x20>)
 8027170:	2300      	movs	r3, #0
 8027172:	4604      	mov	r4, r0
 8027174:	4608      	mov	r0, r1
 8027176:	4611      	mov	r1, r2
 8027178:	602b      	str	r3, [r5, #0]
 802717a:	f7de ffc3 	bl	8006104 <_fstat>
 802717e:	1c43      	adds	r3, r0, #1
 8027180:	d102      	bne.n	8027188 <_fstat_r+0x1c>
 8027182:	682b      	ldr	r3, [r5, #0]
 8027184:	b103      	cbz	r3, 8027188 <_fstat_r+0x1c>
 8027186:	6023      	str	r3, [r4, #0]
 8027188:	bd38      	pop	{r3, r4, r5, pc}
 802718a:	bf00      	nop
 802718c:	2002e4e8 	.word	0x2002e4e8

08027190 <_isatty_r>:
 8027190:	b538      	push	{r3, r4, r5, lr}
 8027192:	4d06      	ldr	r5, [pc, #24]	; (80271ac <_isatty_r+0x1c>)
 8027194:	2300      	movs	r3, #0
 8027196:	4604      	mov	r4, r0
 8027198:	4608      	mov	r0, r1
 802719a:	602b      	str	r3, [r5, #0]
 802719c:	f7de ffb8 	bl	8006110 <_isatty>
 80271a0:	1c43      	adds	r3, r0, #1
 80271a2:	d102      	bne.n	80271aa <_isatty_r+0x1a>
 80271a4:	682b      	ldr	r3, [r5, #0]
 80271a6:	b103      	cbz	r3, 80271aa <_isatty_r+0x1a>
 80271a8:	6023      	str	r3, [r4, #0]
 80271aa:	bd38      	pop	{r3, r4, r5, pc}
 80271ac:	2002e4e8 	.word	0x2002e4e8

080271b0 <_malloc_usable_size_r>:
 80271b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80271b4:	1f18      	subs	r0, r3, #4
 80271b6:	2b00      	cmp	r3, #0
 80271b8:	bfbc      	itt	lt
 80271ba:	580b      	ldrlt	r3, [r1, r0]
 80271bc:	18c0      	addlt	r0, r0, r3
 80271be:	4770      	bx	lr

080271c0 <_raise_r>:
 80271c0:	291f      	cmp	r1, #31
 80271c2:	b538      	push	{r3, r4, r5, lr}
 80271c4:	4604      	mov	r4, r0
 80271c6:	460d      	mov	r5, r1
 80271c8:	d904      	bls.n	80271d4 <_raise_r+0x14>
 80271ca:	2316      	movs	r3, #22
 80271cc:	6003      	str	r3, [r0, #0]
 80271ce:	f04f 30ff 	mov.w	r0, #4294967295
 80271d2:	bd38      	pop	{r3, r4, r5, pc}
 80271d4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80271d6:	b112      	cbz	r2, 80271de <_raise_r+0x1e>
 80271d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80271dc:	b94b      	cbnz	r3, 80271f2 <_raise_r+0x32>
 80271de:	4620      	mov	r0, r4
 80271e0:	f000 f830 	bl	8027244 <_getpid_r>
 80271e4:	462a      	mov	r2, r5
 80271e6:	4601      	mov	r1, r0
 80271e8:	4620      	mov	r0, r4
 80271ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80271ee:	f000 b817 	b.w	8027220 <_kill_r>
 80271f2:	2b01      	cmp	r3, #1
 80271f4:	d00a      	beq.n	802720c <_raise_r+0x4c>
 80271f6:	1c59      	adds	r1, r3, #1
 80271f8:	d103      	bne.n	8027202 <_raise_r+0x42>
 80271fa:	2316      	movs	r3, #22
 80271fc:	6003      	str	r3, [r0, #0]
 80271fe:	2001      	movs	r0, #1
 8027200:	e7e7      	b.n	80271d2 <_raise_r+0x12>
 8027202:	2400      	movs	r4, #0
 8027204:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8027208:	4628      	mov	r0, r5
 802720a:	4798      	blx	r3
 802720c:	2000      	movs	r0, #0
 802720e:	e7e0      	b.n	80271d2 <_raise_r+0x12>

08027210 <raise>:
 8027210:	4b02      	ldr	r3, [pc, #8]	; (802721c <raise+0xc>)
 8027212:	4601      	mov	r1, r0
 8027214:	6818      	ldr	r0, [r3, #0]
 8027216:	f7ff bfd3 	b.w	80271c0 <_raise_r>
 802721a:	bf00      	nop
 802721c:	20000488 	.word	0x20000488

08027220 <_kill_r>:
 8027220:	b538      	push	{r3, r4, r5, lr}
 8027222:	4d07      	ldr	r5, [pc, #28]	; (8027240 <_kill_r+0x20>)
 8027224:	2300      	movs	r3, #0
 8027226:	4604      	mov	r4, r0
 8027228:	4608      	mov	r0, r1
 802722a:	4611      	mov	r1, r2
 802722c:	602b      	str	r3, [r5, #0]
 802722e:	f7de ff49 	bl	80060c4 <_kill>
 8027232:	1c43      	adds	r3, r0, #1
 8027234:	d102      	bne.n	802723c <_kill_r+0x1c>
 8027236:	682b      	ldr	r3, [r5, #0]
 8027238:	b103      	cbz	r3, 802723c <_kill_r+0x1c>
 802723a:	6023      	str	r3, [r4, #0]
 802723c:	bd38      	pop	{r3, r4, r5, pc}
 802723e:	bf00      	nop
 8027240:	2002e4e8 	.word	0x2002e4e8

08027244 <_getpid_r>:
 8027244:	f7de bf3c 	b.w	80060c0 <_getpid>

08027248 <_init>:
 8027248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802724a:	bf00      	nop
 802724c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802724e:	bc08      	pop	{r3}
 8027250:	469e      	mov	lr, r3
 8027252:	4770      	bx	lr

08027254 <_fini>:
 8027254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027256:	bf00      	nop
 8027258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802725a:	bc08      	pop	{r3}
 802725c:	469e      	mov	lr, r3
 802725e:	4770      	bx	lr

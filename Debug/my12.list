
my12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00028c20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001cf94  08028e20  08028e20  00038e20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045db4  08045db4  0006069c  2**0
                  CONTENTS
  4 .ARM          00000008  08045db4  08045db4  00055db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045dbc  08045dbc  0006069c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045dbc  08045dbc  00055dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045dc0  08045dc0  00055dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000069c  20000000  08045dc4  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002f9b4  200006a0  08046460  000606a0  2**3
                  ALLOC
 10 ._user_heap_stack 0001c804  20030054  08046460  00070054  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0006069c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0008f443  00000000  00000000  000606ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00013612  00000000  00000000  000efb0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00052c45  00000000  00000000  0010311f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003770  00000000  00000000  00155d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00009568  00000000  00000000  001594d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00049ce0  00000000  00000000  00162a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000915bc  00000000  00000000  001ac720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0013a5f1  00000000  00000000  0023dcdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  003782cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d604  00000000  00000000  00378320  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200006a0 	.word	0x200006a0
 800021c:	00000000 	.word	0x00000000
 8000220:	08028e08 	.word	0x08028e08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200006a4 	.word	0x200006a4
 800023c:	08028e08 	.word	0x08028e08

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
 8000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 8000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 800026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_ldivmod>:
 8000310:	b97b      	cbnz	r3, 8000332 <__aeabi_ldivmod+0x22>
 8000312:	b972      	cbnz	r2, 8000332 <__aeabi_ldivmod+0x22>
 8000314:	2900      	cmp	r1, #0
 8000316:	bfbe      	ittt	lt
 8000318:	2000      	movlt	r0, #0
 800031a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800031e:	e006      	blt.n	800032e <__aeabi_ldivmod+0x1e>
 8000320:	bf08      	it	eq
 8000322:	2800      	cmpeq	r0, #0
 8000324:	bf1c      	itt	ne
 8000326:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800032a:	f04f 30ff 	movne.w	r0, #4294967295
 800032e:	f000 b9bf 	b.w	80006b0 <__aeabi_idiv0>
 8000332:	f1ad 0c08 	sub.w	ip, sp, #8
 8000336:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800033a:	2900      	cmp	r1, #0
 800033c:	db09      	blt.n	8000352 <__aeabi_ldivmod+0x42>
 800033e:	2b00      	cmp	r3, #0
 8000340:	db1a      	blt.n	8000378 <__aeabi_ldivmod+0x68>
 8000342:	f000 f84d 	bl	80003e0 <__udivmoddi4>
 8000346:	f8dd e004 	ldr.w	lr, [sp, #4]
 800034a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800034e:	b004      	add	sp, #16
 8000350:	4770      	bx	lr
 8000352:	4240      	negs	r0, r0
 8000354:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000358:	2b00      	cmp	r3, #0
 800035a:	db1b      	blt.n	8000394 <__aeabi_ldivmod+0x84>
 800035c:	f000 f840 	bl	80003e0 <__udivmoddi4>
 8000360:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000364:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000368:	b004      	add	sp, #16
 800036a:	4240      	negs	r0, r0
 800036c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000370:	4252      	negs	r2, r2
 8000372:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000376:	4770      	bx	lr
 8000378:	4252      	negs	r2, r2
 800037a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800037e:	f000 f82f 	bl	80003e0 <__udivmoddi4>
 8000382:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000386:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038a:	b004      	add	sp, #16
 800038c:	4240      	negs	r0, r0
 800038e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000392:	4770      	bx	lr
 8000394:	4252      	negs	r2, r2
 8000396:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800039a:	f000 f821 	bl	80003e0 <__udivmoddi4>
 800039e:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003a6:	b004      	add	sp, #16
 80003a8:	4252      	negs	r2, r2
 80003aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b974 	b.w	80006b0 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	4604      	mov	r4, r0
 80003e8:	468e      	mov	lr, r1
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d14d      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ee:	428a      	cmp	r2, r1
 80003f0:	4694      	mov	ip, r2
 80003f2:	d969      	bls.n	80004c8 <__udivmoddi4+0xe8>
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	b152      	cbz	r2, 8000410 <__udivmoddi4+0x30>
 80003fa:	fa01 f302 	lsl.w	r3, r1, r2
 80003fe:	f1c2 0120 	rsb	r1, r2, #32
 8000402:	fa20 f101 	lsr.w	r1, r0, r1
 8000406:	fa0c fc02 	lsl.w	ip, ip, r2
 800040a:	ea41 0e03 	orr.w	lr, r1, r3
 800040e:	4094      	lsls	r4, r2
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	0c21      	lsrs	r1, r4, #16
 8000416:	fbbe f6f8 	udiv	r6, lr, r8
 800041a:	fa1f f78c 	uxth.w	r7, ip
 800041e:	fb08 e316 	mls	r3, r8, r6, lr
 8000422:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000426:	fb06 f107 	mul.w	r1, r6, r7
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f106 30ff 	add.w	r0, r6, #4294967295
 8000436:	f080 811f 	bcs.w	8000678 <__udivmoddi4+0x298>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 811c 	bls.w	8000678 <__udivmoddi4+0x298>
 8000440:	3e02      	subs	r6, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f0f8 	udiv	r0, r3, r8
 800044c:	fb08 3310 	mls	r3, r8, r0, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb00 f707 	mul.w	r7, r0, r7
 8000458:	42a7      	cmp	r7, r4
 800045a:	d90a      	bls.n	8000472 <__udivmoddi4+0x92>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 33ff 	add.w	r3, r0, #4294967295
 8000464:	f080 810a 	bcs.w	800067c <__udivmoddi4+0x29c>
 8000468:	42a7      	cmp	r7, r4
 800046a:	f240 8107 	bls.w	800067c <__udivmoddi4+0x29c>
 800046e:	4464      	add	r4, ip
 8000470:	3802      	subs	r0, #2
 8000472:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000476:	1be4      	subs	r4, r4, r7
 8000478:	2600      	movs	r6, #0
 800047a:	b11d      	cbz	r5, 8000484 <__udivmoddi4+0xa4>
 800047c:	40d4      	lsrs	r4, r2
 800047e:	2300      	movs	r3, #0
 8000480:	e9c5 4300 	strd	r4, r3, [r5]
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d909      	bls.n	80004a2 <__udivmoddi4+0xc2>
 800048e:	2d00      	cmp	r5, #0
 8000490:	f000 80ef 	beq.w	8000672 <__udivmoddi4+0x292>
 8000494:	2600      	movs	r6, #0
 8000496:	e9c5 0100 	strd	r0, r1, [r5]
 800049a:	4630      	mov	r0, r6
 800049c:	4631      	mov	r1, r6
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	fab3 f683 	clz	r6, r3
 80004a6:	2e00      	cmp	r6, #0
 80004a8:	d14a      	bne.n	8000540 <__udivmoddi4+0x160>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d302      	bcc.n	80004b4 <__udivmoddi4+0xd4>
 80004ae:	4282      	cmp	r2, r0
 80004b0:	f200 80f9 	bhi.w	80006a6 <__udivmoddi4+0x2c6>
 80004b4:	1a84      	subs	r4, r0, r2
 80004b6:	eb61 0303 	sbc.w	r3, r1, r3
 80004ba:	2001      	movs	r0, #1
 80004bc:	469e      	mov	lr, r3
 80004be:	2d00      	cmp	r5, #0
 80004c0:	d0e0      	beq.n	8000484 <__udivmoddi4+0xa4>
 80004c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004c6:	e7dd      	b.n	8000484 <__udivmoddi4+0xa4>
 80004c8:	b902      	cbnz	r2, 80004cc <__udivmoddi4+0xec>
 80004ca:	deff      	udf	#255	; 0xff
 80004cc:	fab2 f282 	clz	r2, r2
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	f040 8092 	bne.w	80005fa <__udivmoddi4+0x21a>
 80004d6:	eba1 010c 	sub.w	r1, r1, ip
 80004da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004de:	fa1f fe8c 	uxth.w	lr, ip
 80004e2:	2601      	movs	r6, #1
 80004e4:	0c20      	lsrs	r0, r4, #16
 80004e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ea:	fb07 1113 	mls	r1, r7, r3, r1
 80004ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004f2:	fb0e f003 	mul.w	r0, lr, r3
 80004f6:	4288      	cmp	r0, r1
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x12c>
 80004fa:	eb1c 0101 	adds.w	r1, ip, r1
 80004fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x12a>
 8000504:	4288      	cmp	r0, r1
 8000506:	f200 80cb 	bhi.w	80006a0 <__udivmoddi4+0x2c0>
 800050a:	4643      	mov	r3, r8
 800050c:	1a09      	subs	r1, r1, r0
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb1 f0f7 	udiv	r0, r1, r7
 8000514:	fb07 1110 	mls	r1, r7, r0, r1
 8000518:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800051c:	fb0e fe00 	mul.w	lr, lr, r0
 8000520:	45a6      	cmp	lr, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x156>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f100 31ff 	add.w	r1, r0, #4294967295
 800052c:	d202      	bcs.n	8000534 <__udivmoddi4+0x154>
 800052e:	45a6      	cmp	lr, r4
 8000530:	f200 80bb 	bhi.w	80006aa <__udivmoddi4+0x2ca>
 8000534:	4608      	mov	r0, r1
 8000536:	eba4 040e 	sub.w	r4, r4, lr
 800053a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x9a>
 8000540:	f1c6 0720 	rsb	r7, r6, #32
 8000544:	40b3      	lsls	r3, r6
 8000546:	fa22 fc07 	lsr.w	ip, r2, r7
 800054a:	ea4c 0c03 	orr.w	ip, ip, r3
 800054e:	fa20 f407 	lsr.w	r4, r0, r7
 8000552:	fa01 f306 	lsl.w	r3, r1, r6
 8000556:	431c      	orrs	r4, r3
 8000558:	40f9      	lsrs	r1, r7
 800055a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800055e:	fa00 f306 	lsl.w	r3, r0, r6
 8000562:	fbb1 f8f9 	udiv	r8, r1, r9
 8000566:	0c20      	lsrs	r0, r4, #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fb09 1118 	mls	r1, r9, r8, r1
 8000570:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000574:	fb08 f00e 	mul.w	r0, r8, lr
 8000578:	4288      	cmp	r0, r1
 800057a:	fa02 f206 	lsl.w	r2, r2, r6
 800057e:	d90b      	bls.n	8000598 <__udivmoddi4+0x1b8>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f108 3aff 	add.w	sl, r8, #4294967295
 8000588:	f080 8088 	bcs.w	800069c <__udivmoddi4+0x2bc>
 800058c:	4288      	cmp	r0, r1
 800058e:	f240 8085 	bls.w	800069c <__udivmoddi4+0x2bc>
 8000592:	f1a8 0802 	sub.w	r8, r8, #2
 8000596:	4461      	add	r1, ip
 8000598:	1a09      	subs	r1, r1, r0
 800059a:	b2a4      	uxth	r4, r4
 800059c:	fbb1 f0f9 	udiv	r0, r1, r9
 80005a0:	fb09 1110 	mls	r1, r9, r0, r1
 80005a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80005a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80005ac:	458e      	cmp	lr, r1
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x1e2>
 80005b0:	eb1c 0101 	adds.w	r1, ip, r1
 80005b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80005b8:	d26c      	bcs.n	8000694 <__udivmoddi4+0x2b4>
 80005ba:	458e      	cmp	lr, r1
 80005bc:	d96a      	bls.n	8000694 <__udivmoddi4+0x2b4>
 80005be:	3802      	subs	r0, #2
 80005c0:	4461      	add	r1, ip
 80005c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005c6:	fba0 9402 	umull	r9, r4, r0, r2
 80005ca:	eba1 010e 	sub.w	r1, r1, lr
 80005ce:	42a1      	cmp	r1, r4
 80005d0:	46c8      	mov	r8, r9
 80005d2:	46a6      	mov	lr, r4
 80005d4:	d356      	bcc.n	8000684 <__udivmoddi4+0x2a4>
 80005d6:	d053      	beq.n	8000680 <__udivmoddi4+0x2a0>
 80005d8:	b15d      	cbz	r5, 80005f2 <__udivmoddi4+0x212>
 80005da:	ebb3 0208 	subs.w	r2, r3, r8
 80005de:	eb61 010e 	sbc.w	r1, r1, lr
 80005e2:	fa01 f707 	lsl.w	r7, r1, r7
 80005e6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ea:	40f1      	lsrs	r1, r6
 80005ec:	431f      	orrs	r7, r3
 80005ee:	e9c5 7100 	strd	r7, r1, [r5]
 80005f2:	2600      	movs	r6, #0
 80005f4:	4631      	mov	r1, r6
 80005f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	40d8      	lsrs	r0, r3
 8000600:	fa0c fc02 	lsl.w	ip, ip, r2
 8000604:	fa21 f303 	lsr.w	r3, r1, r3
 8000608:	4091      	lsls	r1, r2
 800060a:	4301      	orrs	r1, r0
 800060c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000610:	fa1f fe8c 	uxth.w	lr, ip
 8000614:	fbb3 f0f7 	udiv	r0, r3, r7
 8000618:	fb07 3610 	mls	r6, r7, r0, r3
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000622:	fb00 f60e 	mul.w	r6, r0, lr
 8000626:	429e      	cmp	r6, r3
 8000628:	fa04 f402 	lsl.w	r4, r4, r2
 800062c:	d908      	bls.n	8000640 <__udivmoddi4+0x260>
 800062e:	eb1c 0303 	adds.w	r3, ip, r3
 8000632:	f100 38ff 	add.w	r8, r0, #4294967295
 8000636:	d22f      	bcs.n	8000698 <__udivmoddi4+0x2b8>
 8000638:	429e      	cmp	r6, r3
 800063a:	d92d      	bls.n	8000698 <__udivmoddi4+0x2b8>
 800063c:	3802      	subs	r0, #2
 800063e:	4463      	add	r3, ip
 8000640:	1b9b      	subs	r3, r3, r6
 8000642:	b289      	uxth	r1, r1
 8000644:	fbb3 f6f7 	udiv	r6, r3, r7
 8000648:	fb07 3316 	mls	r3, r7, r6, r3
 800064c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000650:	fb06 f30e 	mul.w	r3, r6, lr
 8000654:	428b      	cmp	r3, r1
 8000656:	d908      	bls.n	800066a <__udivmoddi4+0x28a>
 8000658:	eb1c 0101 	adds.w	r1, ip, r1
 800065c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000660:	d216      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000662:	428b      	cmp	r3, r1
 8000664:	d914      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000666:	3e02      	subs	r6, #2
 8000668:	4461      	add	r1, ip
 800066a:	1ac9      	subs	r1, r1, r3
 800066c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000670:	e738      	b.n	80004e4 <__udivmoddi4+0x104>
 8000672:	462e      	mov	r6, r5
 8000674:	4628      	mov	r0, r5
 8000676:	e705      	b.n	8000484 <__udivmoddi4+0xa4>
 8000678:	4606      	mov	r6, r0
 800067a:	e6e3      	b.n	8000444 <__udivmoddi4+0x64>
 800067c:	4618      	mov	r0, r3
 800067e:	e6f8      	b.n	8000472 <__udivmoddi4+0x92>
 8000680:	454b      	cmp	r3, r9
 8000682:	d2a9      	bcs.n	80005d8 <__udivmoddi4+0x1f8>
 8000684:	ebb9 0802 	subs.w	r8, r9, r2
 8000688:	eb64 0e0c 	sbc.w	lr, r4, ip
 800068c:	3801      	subs	r0, #1
 800068e:	e7a3      	b.n	80005d8 <__udivmoddi4+0x1f8>
 8000690:	4646      	mov	r6, r8
 8000692:	e7ea      	b.n	800066a <__udivmoddi4+0x28a>
 8000694:	4620      	mov	r0, r4
 8000696:	e794      	b.n	80005c2 <__udivmoddi4+0x1e2>
 8000698:	4640      	mov	r0, r8
 800069a:	e7d1      	b.n	8000640 <__udivmoddi4+0x260>
 800069c:	46d0      	mov	r8, sl
 800069e:	e77b      	b.n	8000598 <__udivmoddi4+0x1b8>
 80006a0:	3b02      	subs	r3, #2
 80006a2:	4461      	add	r1, ip
 80006a4:	e732      	b.n	800050c <__udivmoddi4+0x12c>
 80006a6:	4630      	mov	r0, r6
 80006a8:	e709      	b.n	80004be <__udivmoddi4+0xde>
 80006aa:	4464      	add	r4, ip
 80006ac:	3802      	subs	r0, #2
 80006ae:	e742      	b.n	8000536 <__udivmoddi4+0x156>

080006b0 <__aeabi_idiv0>:
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop

080006b4 <ADC_MultiModeDMAConvM0Cplt>:
//	HAL_TIM_Base_Start_IT(&htim5);
}

// these two are the real DMA Conversion complete interrupts
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
	dmabufno = 0;
 80006b4:	4908      	ldr	r1, [pc, #32]	; (80006d8 <ADC_MultiModeDMAConvM0Cplt+0x24>)
 80006b6:	2000      	movs	r0, #0
	timestamp = TIM2->CNT;			// real time
 80006b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <ADC_MultiModeDMAConvM0Cplt+0x28>)
void ADC_MultiModeDMAConvM0Cplt(ADC_HandleTypeDef *hadc) {
 80006be:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006c0:	6a54      	ldr	r4, [r2, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006c2:	2219      	movs	r2, #25
	dmabufno = 0;
 80006c4:	6008      	str	r0, [r1, #0]
	TIM5->DIER = 0x01;
 80006c6:	2101      	movs	r1, #1
	timestamp = TIM2->CNT;			// real time
 80006c8:	4805      	ldr	r0, [pc, #20]	; (80006e0 <ADC_MultiModeDMAConvM0Cplt+0x2c>)
 80006ca:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006cc:	60d9      	str	r1, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006ce:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006d2:	601a      	str	r2, [r3, #0]
}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200006d0 	.word	0x200006d0
 80006dc:	40000c00 	.word	0x40000c00
 80006e0:	2000074c 	.word	0x2000074c

080006e4 <ADC_MultiModeDMAConvM1Cplt>:

void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {

	dmabufno = 1;
 80006e4:	2201      	movs	r2, #1
 80006e6:	4807      	ldr	r0, [pc, #28]	; (8000704 <ADC_MultiModeDMAConvM1Cplt+0x20>)
	timestamp = TIM2->CNT;			// real time
 80006e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	TIM5->DIER = 0x01;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <ADC_MultiModeDMAConvM1Cplt+0x24>)
void ADC_MultiModeDMAConvM1Cplt(ADC_HandleTypeDef *hadc) {
 80006ee:	b410      	push	{r4}
	timestamp = TIM2->CNT;			// real time
 80006f0:	6a4c      	ldr	r4, [r1, #36]	; 0x24
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 80006f2:	2119      	movs	r1, #25
	dmabufno = 1;
 80006f4:	6002      	str	r2, [r0, #0]
	timestamp = TIM2->CNT;			// real time
 80006f6:	4805      	ldr	r0, [pc, #20]	; (800070c <ADC_MultiModeDMAConvM1Cplt+0x28>)
 80006f8:	6004      	str	r4, [r0, #0]
	TIM5->DIER = 0x01;
 80006fa:	60da      	str	r2, [r3, #12]
	ADC_ConvCpltCallback(hadc);
}
 80006fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	TIM5->CR1 = 0x19;// restart timer to generate a follow-on interrupt for the *real* dma conversion complete processing at IRQ level 5
 8000700:	6019      	str	r1, [r3, #0]
}
 8000702:	4770      	bx	lr
 8000704:	200006d0 	.word	0x200006d0
 8000708:	40000c00 	.word	0x40000c00
 800070c:	2000074c 	.word	0x2000074c

08000710 <ADC_MultiModeDMAError>:
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000710:	4602      	mov	r2, r0
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8000712:	2340      	movs	r3, #64	; 0x40
	printf("Multi-mode DMA Error\n");
 8000714:	4807      	ldr	r0, [pc, #28]	; (8000734 <ADC_MultiModeDMAError+0x24>)
void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma) {
 8000716:	b510      	push	{r4, lr}
	ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef*) ((DMA_HandleTypeDef*) hdma)->Parent;
 8000718:	6b94      	ldr	r4, [r2, #56]	; 0x38
	hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800071a:	6423      	str	r3, [r4, #64]	; 0x40
	hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800071c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800071e:	f043 0304 	orr.w	r3, r3, #4
 8000722:	6463      	str	r3, [r4, #68]	; 0x44
	printf("Multi-mode DMA Error\n");
 8000724:	f024 fc32 	bl	8024f8c <puts>
	HAL_ADC_ErrorCallback(hadc);
 8000728:	4620      	mov	r0, r4
}
 800072a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_ADC_ErrorCallback(hadc);
 800072e:	f007 bcc5 	b.w	80080bc <HAL_ADC_ErrorCallback>
 8000732:	bf00      	nop
 8000734:	0802900c 	.word	0x0802900c

08000738 <HAL_ADCEx_MultiModeStart_DBDMA>:
		uint32_t Length) {
 8000738:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800073c:	4605      	mov	r5, r0
 800073e:	4691      	mov	r9, r2
 8000740:	b085      	sub	sp, #20
	__IO uint32_t counter = 0;
 8000742:	2000      	movs	r0, #0
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8000744:	69aa      	ldr	r2, [r5, #24]
		uint32_t Length) {
 8000746:	4688      	mov	r8, r1
 8000748:	461f      	mov	r7, r3
	__IO uint32_t counter = 0;
 800074a:	9003      	str	r0, [sp, #12]
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800074c:	2a01      	cmp	r2, #1
 800074e:	d903      	bls.n	8000758 <HAL_ADCEx_MultiModeStart_DBDMA+0x20>
 8000750:	219b      	movs	r1, #155	; 0x9b
 8000752:	4845      	ldr	r0, [pc, #276]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000754:	f004 f86c 	bl	8004830 <assert_failed>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000758:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800075a:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 800075e:	d179      	bne.n	8000854 <HAL_ADCEx_MultiModeStart_DBDMA+0x11c>
	assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8000760:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000764:	2b01      	cmp	r3, #1
 8000766:	d903      	bls.n	8000770 <HAL_ADCEx_MultiModeStart_DBDMA+0x38>
 8000768:	219d      	movs	r1, #157	; 0x9d
 800076a:	483f      	ldr	r0, [pc, #252]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 800076c:	f004 f860 	bl	8004830 <assert_failed>
	__HAL_LOCK(hadc);
 8000770:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8000774:	2b01      	cmp	r3, #1
 8000776:	d072      	beq.n	800085e <HAL_ADCEx_MultiModeStart_DBDMA+0x126>
 8000778:	2301      	movs	r3, #1
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 800077a:	682e      	ldr	r6, [r5, #0]
	__HAL_LOCK(hadc);
 800077c:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
	if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON) {
 8000780:	68b3      	ldr	r3, [r6, #8]
 8000782:	07d9      	lsls	r1, r3, #31
 8000784:	d414      	bmi.n	80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000786:	4b39      	ldr	r3, [pc, #228]	; (800086c <HAL_ADCEx_MultiModeStart_DBDMA+0x134>)
 8000788:	4a39      	ldr	r2, [pc, #228]	; (8000870 <HAL_ADCEx_MultiModeStart_DBDMA+0x138>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
		__HAL_ADC_ENABLE(hadc);
 8000790:	68b2      	ldr	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000792:	0c9b      	lsrs	r3, r3, #18
		__HAL_ADC_ENABLE(hadc);
 8000794:	f042 0201 	orr.w	r2, r2, #1
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
		__HAL_ADC_ENABLE(hadc);
 800079c:	60b2      	str	r2, [r6, #8]
		counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800079e:	9303      	str	r3, [sp, #12]
		while (counter != 0) {
 80007a0:	9b03      	ldr	r3, [sp, #12]
 80007a2:	b12b      	cbz	r3, 80007b0 <HAL_ADCEx_MultiModeStart_DBDMA+0x78>
			counter--;
 80007a4:	9c03      	ldr	r4, [sp, #12]
 80007a6:	3c01      	subs	r4, #1
 80007a8:	9403      	str	r4, [sp, #12]
		while (counter != 0) {
 80007aa:	9803      	ldr	r0, [sp, #12]
 80007ac:	2800      	cmp	r0, #0
 80007ae:	d1f9      	bne.n	80007a4 <HAL_ADCEx_MultiModeStart_DBDMA+0x6c>
	if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON)) {
 80007b0:	68b3      	ldr	r3, [r6, #8]
 80007b2:	07da      	lsls	r2, r3, #31
 80007b4:	d543      	bpl.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
		ADC_STATE_CLR_SET(hadc->State,
 80007b6:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80007b8:	4b2e      	ldr	r3, [pc, #184]	; (8000874 <HAL_ADCEx_MultiModeStart_DBDMA+0x13c>)
 80007ba:	4013      	ands	r3, r2
 80007bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c0:	642b      	str	r3, [r5, #64]	; 0x40
		if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET) {
 80007c2:	6873      	ldr	r3, [r6, #4]
 80007c4:	055b      	lsls	r3, r3, #21
 80007c6:	d505      	bpl.n	80007d4 <HAL_ADCEx_MultiModeStart_DBDMA+0x9c>
			ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80007c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80007ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80007d2:	642b      	str	r3, [r5, #64]	; 0x40
		if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY)) {
 80007d4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80007d6:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 80007da:	d039      	beq.n	8000850 <HAL_ADCEx_MultiModeStart_DBDMA+0x118>
			CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80007dc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 80007de:	f023 0306 	bic.w	r3, r3, #6
 80007e2:	646b      	str	r3, [r5, #68]	; 0x44
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007e4:	6ba8      	ldr	r0, [r5, #56]	; 0x38
		__HAL_UNLOCK(hadc);
 80007e6:	2300      	movs	r3, #0
			ADC->CCR |= ADC_CCR_DDS;
 80007e8:	4a23      	ldr	r2, [pc, #140]	; (8000878 <HAL_ADCEx_MultiModeStart_DBDMA+0x140>)
		__HAL_UNLOCK(hadc);
 80007ea:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
		hadc->DMA_Handle->XferM1HalfCpltCallback = NULL;
 80007ee:	6483      	str	r3, [r0, #72]	; 0x48
		hadc->DMA_Handle->XferHalfCpltCallback = NULL;
 80007f0:	6403      	str	r3, [r0, #64]	; 0x40
		hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvM0Cplt;
 80007f2:	4b22      	ldr	r3, [pc, #136]	; (800087c <HAL_ADCEx_MultiModeStart_DBDMA+0x144>)
 80007f4:	63c3      	str	r3, [r0, #60]	; 0x3c
		hadc->DMA_Handle->XferM1CpltCallback = ADC_MultiModeDMAConvM1Cplt;
 80007f6:	4b22      	ldr	r3, [pc, #136]	; (8000880 <HAL_ADCEx_MultiModeStart_DBDMA+0x148>)
 80007f8:	6443      	str	r3, [r0, #68]	; 0x44
		hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError;
 80007fa:	4b22      	ldr	r3, [pc, #136]	; (8000884 <HAL_ADCEx_MultiModeStart_DBDMA+0x14c>)
 80007fc:	64c3      	str	r3, [r0, #76]	; 0x4c
		__HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80007fe:	f06f 0302 	mvn.w	r3, #2
 8000802:	6033      	str	r3, [r6, #0]
		__HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000804:	6873      	ldr	r3, [r6, #4]
 8000806:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800080a:	6073      	str	r3, [r6, #4]
		if (hadc->Init.DMAContinuousRequests != DISABLE) {
 800080c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
 8000810:	b1cb      	cbz	r3, 8000846 <HAL_ADCEx_MultiModeStart_DBDMA+0x10e>
			ADC->CCR |= ADC_CCR_DDS;
 8000812:	6853      	ldr	r3, [r2, #4]
 8000814:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000818:	6053      	str	r3, [r2, #4]
		HAL_DMAEx_MultiBufferStart_IT(hadc->DMA_Handle, (uint32_t) &ADC->CDR, (uint32_t) pData, (uint32_t) pData2,
 800081a:	464b      	mov	r3, r9
 800081c:	4642      	mov	r2, r8
 800081e:	491a      	ldr	r1, [pc, #104]	; (8000888 <HAL_ADCEx_MultiModeStart_DBDMA+0x150>)
 8000820:	9700      	str	r7, [sp, #0]
 8000822:	f008 fd8d 	bl	8009340 <HAL_DMAEx_MultiBufferStart_IT>
		if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) {
 8000826:	682b      	ldr	r3, [r5, #0]
 8000828:	6898      	ldr	r0, [r3, #8]
 800082a:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800082e:	d106      	bne.n	800083e <HAL_ADCEx_MultiModeStart_DBDMA+0x106>
			hadc->Instance->CR2 |= (uint32_t) ADC_CR2_SWSTART;
 8000830:	689a      	ldr	r2, [r3, #8]
 8000832:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000836:	609a      	str	r2, [r3, #8]
}
 8000838:	b005      	add	sp, #20
 800083a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return HAL_OK;
 800083e:	2000      	movs	r0, #0
}
 8000840:	b005      	add	sp, #20
 8000842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			ADC->CCR &= ~ADC_CCR_DDS;
 8000846:	6853      	ldr	r3, [r2, #4]
 8000848:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800084c:	6053      	str	r3, [r2, #4]
 800084e:	e7e4      	b.n	800081a <HAL_ADCEx_MultiModeStart_DBDMA+0xe2>
			ADC_CLEAR_ERRORCODE(hadc);
 8000850:	646b      	str	r3, [r5, #68]	; 0x44
 8000852:	e7c7      	b.n	80007e4 <HAL_ADCEx_MultiModeStart_DBDMA+0xac>
	assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8000854:	219c      	movs	r1, #156	; 0x9c
 8000856:	4804      	ldr	r0, [pc, #16]	; (8000868 <HAL_ADCEx_MultiModeStart_DBDMA+0x130>)
 8000858:	f003 ffea 	bl	8004830 <assert_failed>
 800085c:	e780      	b.n	8000760 <HAL_ADCEx_MultiModeStart_DBDMA+0x28>
	__HAL_LOCK(hadc);
 800085e:	2002      	movs	r0, #2
}
 8000860:	b005      	add	sp, #20
 8000862:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000866:	bf00      	nop
 8000868:	08029024 	.word	0x08029024
 800086c:	20000260 	.word	0x20000260
 8000870:	431bde83 	.word	0x431bde83
 8000874:	fffff8fe 	.word	0xfffff8fe
 8000878:	40012300 	.word	0x40012300
 800087c:	080006b5 	.word	0x080006b5
 8000880:	080006e5 	.word	0x080006e5
 8000884:	08000711 	.word	0x08000711
 8000888:	40012308 	.word	0x40012308

0800088c <ADC_Conv_complete>:
	if (dmabufno == 1) {		// second buffer is ready
 800088c:	4b7f      	ldr	r3, [pc, #508]	; (8000a8c <ADC_Conv_complete+0x200>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 800088e:	4a80      	ldr	r2, [pc, #512]	; (8000a90 <ADC_Conv_complete+0x204>)
	if (dmabufno == 1) {		// second buffer is ready
 8000890:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000892:	4980      	ldr	r1, [pc, #512]	; (8000a94 <ADC_Conv_complete+0x208>)
	if (dmabufno == 1) {		// second buffer is ready
 8000894:	2b01      	cmp	r3, #1
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 8000896:	4b80      	ldr	r3, [pc, #512]	; (8000a98 <ADC_Conv_complete+0x20c>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 8000898:	4880      	ldr	r0, [pc, #512]	; (8000a9c <ADC_Conv_complete+0x210>)
ADC_Conv_complete() {
 800089a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 800089e:	681c      	ldr	r4, [r3, #0]
ADC_Conv_complete() {
 80008a0:	b087      	sub	sp, #28
	(*buf)[3] = timestamp;		// this may not get set until now
 80008a2:	4b7f      	ldr	r3, [pc, #508]	; (8000aa0 <ADC_Conv_complete+0x214>)
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008a4:	7815      	ldrb	r5, [r2, #0]
		buf = &((*pktbuf)[(UDPBUFSIZE / 4)]);
 80008a6:	bf08      	it	eq
 80008a8:	f504 64b8 	addeq.w	r4, r4, #1472	; 0x5c0
	(*buf)[3] = timestamp;		// this may not get set until now
 80008ac:	681b      	ldr	r3, [r3, #0]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ae:	f8b1 205c 	ldrh.w	r2, [r1, #92]	; 0x5c
	(*buf)[3] = timestamp;		// this may not get set until now
 80008b2:	60e3      	str	r3, [r4, #12]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008b4:	022b      	lsls	r3, r5, #8
 80008b6:	9505      	str	r5, [sp, #20]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008b8:	460d      	mov	r5, r1
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008be:	4a79      	ldr	r2, [pc, #484]	; (8000aa4 <ADC_Conv_complete+0x218>)
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c0:	f8d1 108c 	ldr.w	r1, [r1, #140]	; 0x8c
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c4:	7812      	ldrb	r2, [r2, #0]
	(*buf)[2] = statuspkt.epochsecs; // statuspkt.NavPvt.iTOW;
 80008c6:	60a1      	str	r1, [r4, #8]
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008c8:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 80008cc:	7802      	ldrb	r2, [r0, #0]
	if (sigsend) {		// oops overrun
 80008ce:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8000af4 <ADC_Conv_complete+0x268>
	(*buf)[1] = (statuspkt.uid << 16) | (adcbatchid << 8) | (rtseconds << 2) | (adcbufnum++ & 3);// ADC completed packet counter (24 bits)
 80008d2:	f002 0103 	and.w	r1, r2, #3
 80008d6:	3201      	adds	r2, #1
 80008d8:	430b      	orrs	r3, r1
 80008da:	7002      	strb	r2, [r0, #0]
 80008dc:	6063      	str	r3, [r4, #4]
	if (sigsend) {		// oops overrun
 80008de:	f8d9 3000 	ldr.w	r3, [r9]
 80008e2:	b12b      	cbz	r3, 80008f0 <ADC_Conv_complete+0x64>
		statuspkt.adcudpover++;		// debug adc overruning the udp railgun
 80008e4:	6fab      	ldr	r3, [r5, #120]	; 0x78
 80008e6:	3301      	adds	r3, #1
 80008e8:	67ab      	str	r3, [r5, #120]	; 0x78
		sigsend = 0;		// cancel previous signal
 80008ea:	2300      	movs	r3, #0
 80008ec:	f8c9 3000 	str.w	r3, [r9]
	if (sigsuppress) {
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <ADC_Conv_complete+0x21c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d03c      	beq.n	8000972 <ADC_Conv_complete+0xe6>
		sigsend = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f8c9 3000 	str.w	r3, [r9]
	if (sigsend) {
 80008fe:	f8d9 3000 	ldr.w	r3, [r9]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d02c      	beq.n	8000960 <ADC_Conv_complete+0xd4>
		if (sigprev == 0) {		// no trigger last time, so this is a new event
 8000906:	4b69      	ldr	r3, [pc, #420]	; (8000aac <ADC_Conv_complete+0x220>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	2a00      	cmp	r2, #0
 800090c:	f000 809d 	beq.w	8000a4a <ADC_Conv_complete+0x1be>
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000910:	4860      	ldr	r0, [pc, #384]	; (8000a94 <ADC_Conv_complete+0x208>)
		sigprev = 1;	// remember this trigger for next packet
 8000912:	2101      	movs	r1, #1
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000914:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
		sigprev = 1;	// remember this trigger for next packet
 8000916:	6019      	str	r1, [r3, #0]
		statuspkt.trigcount++;	//  no of triggered packets detected
 8000918:	440a      	add	r2, r1
		ledhang = 15;		// 15 x 10ms in Idle proc
 800091a:	4b65      	ldr	r3, [pc, #404]	; (8000ab0 <ADC_Conv_complete+0x224>)
 800091c:	210f      	movs	r1, #15
		statuspkt.trigcount++;	//  no of triggered packets detected
 800091e:	67c2      	str	r2, [r0, #124]	; 0x7c
		ledhang = 15;		// 15 x 10ms in Idle proc
 8000920:	6019      	str	r1, [r3, #0]
	if (++samplecnt == 2048) {		// 2k adc bufffers sampled approx 0.5 sec
 8000922:	4a64      	ldr	r2, [pc, #400]	; (8000ab4 <ADC_Conv_complete+0x228>)
 8000924:	6813      	ldr	r3, [r2, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800092c:	6013      	str	r3, [r2, #0]
 800092e:	d10b      	bne.n	8000948 <ADC_Conv_complete+0xbc>
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000930:	4961      	ldr	r1, [pc, #388]	; (8000ab8 <ADC_Conv_complete+0x22c>)
		adcbgbaseacc = 0;
 8000932:	2000      	movs	r0, #0
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000934:	4d61      	ldr	r5, [pc, #388]	; (8000abc <ADC_Conv_complete+0x230>)
 8000936:	680b      	ldr	r3, [r1, #0]
		samplecnt = 0;
 8000938:	6010      	str	r0, [r2, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 800093a:	08db      	lsrs	r3, r3, #3
 800093c:	4c60      	ldr	r4, [pc, #384]	; (8000ac0 <ADC_Conv_complete+0x234>)
		adcbgbaseacc = 0;
 800093e:	6008      	str	r0, [r1, #0]
		globaladcavg = (adcbgbaseacc / (ADCBUFSIZE / 2)) >> 11;
 8000940:	fba5 2303 	umull	r2, r3, r5, r3
 8000944:	0b9b      	lsrs	r3, r3, #14
 8000946:	6023      	str	r3, [r4, #0]
	if (xTaskToNotify == NULL) {
 8000948:	4b5e      	ldr	r3, [pc, #376]	; (8000ac4 <ADC_Conv_complete+0x238>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	2a00      	cmp	r2, #0
 800094e:	f000 8097 	beq.w	8000a80 <ADC_Conv_complete+0x1f4>
	} else if (sigsend) {
 8000952:	f8d9 2000 	ldr.w	r2, [r9]
 8000956:	2a00      	cmp	r2, #0
 8000958:	d17c      	bne.n	8000a54 <ADC_Conv_complete+0x1c8>
}
 800095a:	b007      	add	sp, #28
 800095c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (sigprev) {		// but there was a trigger the last packet
 8000960:	4b52      	ldr	r3, [pc, #328]	; (8000aac <ADC_Conv_complete+0x220>)
 8000962:	681a      	ldr	r2, [r3, #0]
 8000964:	b112      	cbz	r2, 800096c <ADC_Conv_complete+0xe0>
			sendendstatus = 1;		// so tell udpstream to send the end of sequence status packet
 8000966:	4a58      	ldr	r2, [pc, #352]	; (8000ac8 <ADC_Conv_complete+0x23c>)
 8000968:	2101      	movs	r1, #1
 800096a:	7011      	strb	r1, [r2, #0]
		sigprev = 0;
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	e7d7      	b.n	8000922 <ADC_Conv_complete+0x96>
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 8000972:	469c      	mov	ip, r3
 8000974:	4b55      	ldr	r3, [pc, #340]	; (8000acc <ADC_Conv_complete+0x240>)
 8000976:	340e      	adds	r4, #14
 8000978:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8000af8 <ADC_Conv_complete+0x26c>
 800097c:	881b      	ldrh	r3, [r3, #0]
 800097e:	4f54      	ldr	r7, [pc, #336]	; (8000ad0 <ADC_Conv_complete+0x244>)
 8000980:	9302      	str	r3, [sp, #8]
 8000982:	4b54      	ldr	r3, [pc, #336]	; (8000ad4 <ADC_Conv_complete+0x248>)
 8000984:	f8cd c010 	str.w	ip, [sp, #16]
 8000988:	881b      	ldrh	r3, [r3, #0]
				pretrigcnt++;
 800098a:	9400      	str	r4, [sp, #0]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 800098c:	9303      	str	r3, [sp, #12]
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000990:	681d      	ldr	r5, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000994:	6818      	ldr	r0, [r3, #0]
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <ADC_Conv_complete+0x250>)
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	4b51      	ldr	r3, [pc, #324]	; (8000ae0 <ADC_Conv_complete+0x254>)
 800099c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80009a0:	4b50      	ldr	r3, [pc, #320]	; (8000ae4 <ADC_Conv_complete+0x258>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	9301      	str	r3, [sp, #4]
			lastmeanwindiff = abs(meanwindiff);
 80009a6:	2900      	cmp	r1, #0
			thissamp = (*adcbuf16)[i];
 80009a8:	9c00      	ldr	r4, [sp, #0]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009aa:	f00c 0a1f 	and.w	sl, ip, #31
			if (sigsend)
 80009ae:	f8d9 b000 	ldr.w	fp, [r9]
			lastmeanwindiff = abs(meanwindiff);
 80009b2:	bfb8      	it	lt
 80009b4:	4249      	neglt	r1, r1
			thissamp = (*adcbuf16)[i];
 80009b6:	f834 3f02 	ldrh.w	r3, [r4, #2]!
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 80009ba:	f10c 0c01 	add.w	ip, ip, #1
			lastmeanwindiff = abs(meanwindiff);
 80009be:	b28e      	uxth	r6, r1
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c0:	9903      	ldr	r1, [sp, #12]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009c2:	4418      	add	r0, r3
			adcbgbaseacc += thissamp; // accumulator used to find avg level of signal over long time (for base)
 80009c4:	441d      	add	r5, r3
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009c6:	eb06 0e01 	add.w	lr, r6, r1
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009ca:	f838 101a 	ldrh.w	r1, [r8, sl, lsl #1]
			lastsamp[j] = thissamp;			// save last samples
 80009ce:	f828 301a 	strh.w	r3, [r8, sl, lsl #1]
			wmeanacc = wmeanacc + thissamp - lastsamp[j];		// window mean acc
 80009d2:	1a40      	subs	r0, r0, r1
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009d4:	f857 102a 	ldr.w	r1, [r7, sl, lsl #2]
			thissamp = (*adcbuf16)[i];
 80009d8:	9400      	str	r4, [sp, #0]
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009da:	1a52      	subs	r2, r2, r1
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009dc:	f340 114f 	sbfx	r1, r0, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009e0:	9c02      	ldr	r4, [sp, #8]
			thiswindiff = abs(thissamp - winmean);			// find difference from window mean
 80009e2:	1a5b      	subs	r3, r3, r1
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bfb8      	it	lt
 80009e8:	425b      	neglt	r3, r3
			wdacc = wdacc - windiff[j] + thiswindiff; // difference accumulator for WINSIZE samples
 80009ea:	441a      	add	r2, r3
			meanwindiff = wdacc >> (WINSHIFT); // sliding mean of window differences
 80009ec:	f342 114f 	sbfx	r1, r2, #5, #16
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f0:	ea81 73e1 	eor.w	r3, r1, r1, asr #31
			windiff[j] = meanwindiff;	// store latest window mean of differences
 80009f4:	f847 102a 	str.w	r1, [r7, sl, lsl #2]
			if ((abs(meanwindiff) + pretrigthresh) > (lastmeanwindiff + trigthresh)) {
 80009f8:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	eb03 0a04 	add.w	sl, r3, r4
 8000a02:	45f2      	cmp	sl, lr
 8000a04:	dd04      	ble.n	8000a10 <ADC_Conv_complete+0x184>
				pretrigcnt++;
 8000a06:	9c01      	ldr	r4, [sp, #4]
 8000a08:	3401      	adds	r4, #1
 8000a0a:	9401      	str	r4, [sp, #4]
 8000a0c:	2401      	movs	r4, #1
 8000a0e:	9404      	str	r4, [sp, #16]
			if (abs(meanwindiff) > (lastmeanwindiff + trigthresh)) { // if new mean diff > last mean diff +1
 8000a10:	4573      	cmp	r3, lr
 8000a12:	dd05      	ble.n	8000a20 <ADC_Conv_complete+0x194>
 8000a14:	f1bb 0f00 	cmp.w	fp, #0
 8000a18:	d102      	bne.n	8000a20 <ADC_Conv_complete+0x194>
				sigsend = 1; // the real trigger
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	f8c9 3000 	str.w	r3, [r9]
		for (i = 0; i < (ADCBUFSIZE >> 1); i++) {	// 2 // scan the buffer content
 8000a20:	f5bc 7f36 	cmp.w	ip, #728	; 0x2d8
 8000a24:	d1bf      	bne.n	80009a6 <ADC_Conv_complete+0x11a>
 8000a26:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <ADC_Conv_complete+0x22c>)
 8000a28:	601d      	str	r5, [r3, #0]
 8000a2a:	4b2b      	ldr	r3, [pc, #172]	; (8000ad8 <ADC_Conv_complete+0x24c>)
 8000a2c:	6018      	str	r0, [r3, #0]
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <ADC_Conv_complete+0x250>)
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <ADC_Conv_complete+0x254>)
 8000a34:	8019      	strh	r1, [r3, #0]
 8000a36:	4b2c      	ldr	r3, [pc, #176]	; (8000ae8 <ADC_Conv_complete+0x25c>)
 8000a38:	801e      	strh	r6, [r3, #0]
 8000a3a:	9b04      	ldr	r3, [sp, #16]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f43f af5e 	beq.w	80008fe <ADC_Conv_complete+0x72>
 8000a42:	4b28      	ldr	r3, [pc, #160]	; (8000ae4 <ADC_Conv_complete+0x258>)
 8000a44:	9a01      	ldr	r2, [sp, #4]
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	e759      	b.n	80008fe <ADC_Conv_complete+0x72>
			++adcbatchid; // start a new adc batch number
 8000a4a:	9a05      	ldr	r2, [sp, #20]
 8000a4c:	4910      	ldr	r1, [pc, #64]	; (8000a90 <ADC_Conv_complete+0x204>)
 8000a4e:	3201      	adds	r2, #1
 8000a50:	700a      	strb	r2, [r1, #0]
 8000a52:	e75d      	b.n	8000910 <ADC_Conv_complete+0x84>
		vTaskNotifyGiveFromISR(xTaskToNotify, &xHigherPriorityTaskWoken);
 8000a54:	4c25      	ldr	r4, [pc, #148]	; (8000aec <ADC_Conv_complete+0x260>)
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	4621      	mov	r1, r4
 8000a5a:	f016 f85b 	bl	8016b14 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8000a5e:	6823      	ldr	r3, [r4, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	f43f af7a 	beq.w	800095a <ADC_Conv_complete+0xce>
 8000a66:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000a6e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
}
 8000a7a:	b007      	add	sp, #28
 8000a7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printf("Notify task null\n");
 8000a80:	481b      	ldr	r0, [pc, #108]	; (8000af0 <ADC_Conv_complete+0x264>)
}
 8000a82:	b007      	add	sp, #28
 8000a84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("Notify task null\n");
 8000a88:	f024 ba80 	b.w	8024f8c <puts>
 8000a8c:	200006d0 	.word	0x200006d0
 8000a90:	200006bc 	.word	0x200006bc
 8000a94:	20002f6c 	.word	0x20002f6c
 8000a98:	20000728 	.word	0x20000728
 8000a9c:	200006cc 	.word	0x200006cc
 8000aa0:	2000074c 	.word	0x2000074c
 8000aa4:	20000730 	.word	0x20000730
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	2000073c 	.word	0x2000073c
 8000ab0:	20000720 	.word	0x20000720
 8000ab4:	20000734 	.word	0x20000734
 8000ab8:	200006c0 	.word	0x200006c0
 8000abc:	16816817 	.word	0x16816817
 8000ac0:	200006d4 	.word	0x200006d4
 8000ac4:	200007dc 	.word	0x200007dc
 8000ac8:	20000738 	.word	0x20000738
 8000acc:	20000000 	.word	0x20000000
 8000ad0:	20000754 	.word	0x20000754
 8000ad4:	20000002 	.word	0x20000002
 8000ad8:	200007d4 	.word	0x200007d4
 8000adc:	20000750 	.word	0x20000750
 8000ae0:	20000724 	.word	0x20000724
 8000ae4:	2000072c 	.word	0x2000072c
 8000ae8:	200006dc 	.word	0x200006dc
 8000aec:	200007d8 	.word	0x200007d8
 8000af0:	0802903c 	.word	0x0802903c
 8000af4:	20000740 	.word	0x20000740
 8000af8:	200006e0 	.word	0x200006e0

08000afc <startadc>:

void startadc() {
 8000afc:	b538      	push	{r3, r4, r5, lr}
	int i, lastbuf = 0;
//	uint16_t *adcbufdum1, *adcbufdum2;		// debug
//	adcbufdum1 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer
//	adcbufdum2 = pvPortMalloc(UDPBUFSIZE);	//  dummy buffer

	statuspkt.clktrim = 108000000;
 8000afe:	492b      	ldr	r1, [pc, #172]	; (8000bac <startadc+0xb0>)
	statuspkt.adcpktssent = 0;
 8000b00:	2200      	movs	r2, #0
	statuspkt.clktrim = 108000000;
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <startadc+0xb4>)

	printf("Starting ADC DMA\n");
 8000b04:	482b      	ldr	r0, [pc, #172]	; (8000bb4 <startadc+0xb8>)
	statuspkt.clktrim = 108000000;
 8000b06:	6599      	str	r1, [r3, #88]	; 0x58
	osDelay(100);
// get some heap for the ADC stream DMA buffer 1
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b08:	4d2b      	ldr	r5, [pc, #172]	; (8000bb8 <startadc+0xbc>)
	statuspkt.adcpktssent = 0;
 8000b0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
	printf("Starting ADC DMA\n");
 8000b0e:	f024 fa3d 	bl	8024f8c <puts>
	osDelay(100);
 8000b12:	2064      	movs	r0, #100	; 0x64
 8000b14:	f014 fa08 	bl	8014f28 <osDelay>
	pktbuf = pvPortMalloc(UDPBUFSIZE * 2);	// two buffers concatenated
 8000b18:	f44f 6038 	mov.w	r0, #2944	; 0xb80
 8000b1c:	f016 fcec 	bl	80174f8 <pvPortMalloc>
 8000b20:	6028      	str	r0, [r5, #0]
	if (pktbuf == NULL) {
 8000b22:	2800      	cmp	r0, #0
 8000b24:	d03d      	beq.n	8000ba2 <startadc+0xa6>
		printf("pvPortMalloc returned nil for pktbuf\n");
		for (;;)
			;
	}
	if (((uint32_t) pktbuf & 3) > 0) {
 8000b26:	0783      	lsls	r3, r0, #30
 8000b28:	4604      	mov	r4, r0
 8000b2a:	d128      	bne.n	8000b7e <startadc+0x82>

//	printf("(&(*pktbuf)[0])=0x%x ", &((*pktbuf)[0]));
//	printf("(&(*pktbuf)[UDPBUFSIZE / 4])=0x%x\n", &((*pktbuf)[UDPBUFSIZE / 4]));

	for (i = 0; i < UDPBUFSIZE / 4; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0x55555555;
 8000b2c:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b30:	2155      	movs	r1, #85	; 0x55
 8000b32:	4620      	mov	r0, r4
 8000b34:	f023 f9f0 	bl	8023f18 <memset>
	}
	for (i = UDPBUFSIZE / 4; i < UDPBUFSIZE / 2; i++) {	// fill buffers, 4 bytes at a time
		(*pktbuf)[i] = 0xaaaaaaaa;
 8000b38:	f44f 62b8 	mov.w	r2, #1472	; 0x5c0
 8000b3c:	21aa      	movs	r1, #170	; 0xaa
 8000b3e:	18a0      	adds	r0, r4, r2
 8000b40:	f023 f9ea 	bl	8023f18 <memset>
	}

	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b44:	f504 62ba 	add.w	r2, r4, #1488	; 0x5d0
 8000b48:	481c      	ldr	r0, [pc, #112]	; (8000bbc <startadc+0xc0>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b4a:	f104 0110 	add.w	r1, r4, #16
 8000b4e:	4c1c      	ldr	r4, [pc, #112]	; (8000bc0 <startadc+0xc4>)

	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b50:	f44f 7336 	mov.w	r3, #728	; 0x2d8
	adcbuf2 = &(*pktbuf)[(ADCBUFHEAD / 4) + (ADCBUFSIZE / 4) + (ADCBUFHEAD / 4)];	// leave room in start of 2nd buffer
 8000b54:	6002      	str	r2, [r0, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b56:	481b      	ldr	r0, [pc, #108]	; (8000bc4 <startadc+0xc8>)
	adcbuf1 = &(*pktbuf)[ADCBUFHEAD / 4];	// leave room in start of first buffer
 8000b58:	6021      	str	r1, [r4, #0]
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b5a:	f7ff fded 	bl	8000738 <HAL_ADCEx_MultiModeStart_DBDMA>
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <startadc+0xcc>)
 8000b60:	4602      	mov	r2, r0

//	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbufdum1, adcbufdum2, (ADCBUFSIZE / 4));		// DEBUG
//		printf("ADC_MM_Start returned %u\r\n", adcstat);

	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b62:	481a      	ldr	r0, [pc, #104]	; (8000bcc <startadc+0xd0>)
	adcstat = HAL_ADCEx_MultiModeStart_DBDMA(&hadc1, adcbuf1, adcbuf2, (ADCBUFSIZE / 2));	// len in 16bit words
 8000b64:	701a      	strb	r2, [r3, #0]
	if (HAL_ADC_Start(&hadc3) != HAL_OK)
 8000b66:	f007 f9fb 	bl	8007f60 <HAL_ADC_Start>
 8000b6a:	b9b0      	cbnz	r0, 8000b9a <startadc+0x9e>
		printf("ADC3 failed start\r\n");
	if (HAL_ADC_Start(&hadc2) != HAL_OK)
 8000b6c:	4818      	ldr	r0, [pc, #96]	; (8000bd0 <startadc+0xd4>)
 8000b6e:	f007 f9f7 	bl	8007f60 <HAL_ADC_Start>
 8000b72:	b970      	cbnz	r0, 8000b92 <startadc+0x96>
		printf("ADC2 failed start\r\n");
	if (HAL_ADC_Start(&hadc1) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <startadc+0xc8>)
 8000b76:	f007 f9f3 	bl	8007f60 <HAL_ADC_Start>
 8000b7a:	b928      	cbnz	r0, 8000b88 <startadc+0x8c>
//			HAL_GPIO_WritePin(GPIOB, LD3_Pin, GPIO_PIN_SET);		// red led on

			//	myhexDump ("INITBUFF1---------------------------------------", *adcbuf1, ADCBUFLEN*2);
		}
#endif
}
 8000b7c:	bd38      	pop	{r3, r4, r5, pc}
		printf("******** pvPortMalloc not on word boundary *********\n");
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <startadc+0xd8>)
 8000b80:	f024 fa04 	bl	8024f8c <puts>
		(*pktbuf)[i] = 0x55555555;
 8000b84:	682c      	ldr	r4, [r5, #0]
 8000b86:	e7d1      	b.n	8000b2c <startadc+0x30>
		printf("ADC1 failed start\r\n");
 8000b88:	4813      	ldr	r0, [pc, #76]	; (8000bd8 <startadc+0xdc>)
}
 8000b8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		printf("ADC1 failed start\r\n");
 8000b8e:	f024 b9fd 	b.w	8024f8c <puts>
		printf("ADC2 failed start\r\n");
 8000b92:	4812      	ldr	r0, [pc, #72]	; (8000bdc <startadc+0xe0>)
 8000b94:	f024 f9fa 	bl	8024f8c <puts>
 8000b98:	e7ec      	b.n	8000b74 <startadc+0x78>
		printf("ADC3 failed start\r\n");
 8000b9a:	4811      	ldr	r0, [pc, #68]	; (8000be0 <startadc+0xe4>)
 8000b9c:	f024 f9f6 	bl	8024f8c <puts>
 8000ba0:	e7e4      	b.n	8000b6c <startadc+0x70>
		printf("pvPortMalloc returned nil for pktbuf\n");
 8000ba2:	4810      	ldr	r0, [pc, #64]	; (8000be4 <startadc+0xe8>)
 8000ba4:	f024 f9f2 	bl	8024f8c <puts>
		for (;;)
 8000ba8:	e7fe      	b.n	8000ba8 <startadc+0xac>
 8000baa:	bf00      	nop
 8000bac:	066ff300 	.word	0x066ff300
 8000bb0:	20002f6c 	.word	0x20002f6c
 8000bb4:	08029050 	.word	0x08029050
 8000bb8:	20000728 	.word	0x20000728
 8000bbc:	200006c8 	.word	0x200006c8
 8000bc0:	200006c4 	.word	0x200006c4
 8000bc4:	20002124 	.word	0x20002124
 8000bc8:	200006cd 	.word	0x200006cd
 8000bcc:	200021b4 	.word	0x200021b4
 8000bd0:	2000216c 	.word	0x2000216c
 8000bd4:	0802908c 	.word	0x0802908c
 8000bd8:	080290ec 	.word	0x080290ec
 8000bdc:	080290d8 	.word	0x080290d8
 8000be0:	080290c4 	.word	0x080290c4
 8000be4:	08029064 	.word	0x08029064

08000be8 <xcrc32>:
@end deftypefn
*/

unsigned int
xcrc32 (const unsigned char *buf, int len, unsigned int init)
{
 8000be8:	4684      	mov	ip, r0
  unsigned int crc = init;
  while (len--)
 8000bea:	b169      	cbz	r1, 8000c08 <xcrc32+0x20>
 8000bec:	4401      	add	r1, r0
  unsigned int crc = init;
 8000bee:	4610      	mov	r0, r2
 8000bf0:	4a06      	ldr	r2, [pc, #24]	; (8000c0c <xcrc32+0x24>)
    {
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bf2:	f81c 3b01 	ldrb.w	r3, [ip], #1
 8000bf6:	ea83 6310 	eor.w	r3, r3, r0, lsr #24
  while (len--)
 8000bfa:	458c      	cmp	ip, r1
      crc = (crc << 8) ^ crc32_table[((crc >> 24) ^ *buf) & 255];
 8000bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c00:	ea83 2000 	eor.w	r0, r3, r0, lsl #8
  while (len--)
 8000c04:	d1f5      	bne.n	8000bf2 <xcrc32+0xa>
 8000c06:	4770      	bx	lr
  unsigned int crc = init;
 8000c08:	4610      	mov	r0, r2
      buf++;
    }
  return crc;
}
 8000c0a:	4770      	bx	lr
 8000c0c:	08029100 	.word	0x08029100

08000c10 <stampboot>:
		return (0);
	}
}

// make sure the boot vector points to this running program
void stampboot() {
 8000c10:	b500      	push	{lr}
 8000c12:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options, addr;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000c14:	4668      	mov	r0, sp
 8000c16:	f00a fa1f 	bl	800b058 <HAL_FLASHEx_OBGetConfig>

	addr = (uint32_t) stampboot & LOADER_BASE_MEM2; 	// where are we running this code?
 8000c1a:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <stampboot+0x7c>)
 8000c1c:	f003 6301 	and.w	r3, r3, #135266304	; 0x8100000
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000

	if (OBInitStruct.BootAddr0 != newadd) {
 8000c24:	9b06      	ldr	r3, [sp, #24]
	newadd = (addr == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8000c26:	d01b      	beq.n	8000c60 <stampboot+0x50>
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c28:	f5b3 5f01 	cmp.w	r3, #8256	; 0x2040
 8000c2c:	d015      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c2e:	f00a f82f 	bl	800ac90 <HAL_FLASH_OB_Unlock>

		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c32:	f44f 5301 	mov.w	r3, #8256	; 0x2040
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c3a:	9306      	str	r3, [sp, #24]

		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c3c:	9b05      	ldr	r3, [sp, #20]

		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c3e:	4668      	mov	r0, sp
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c40:	9207      	str	r2, [sp, #28]
		OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000c42:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000c46:	9305      	str	r3, [sp, #20]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000c48:	f00a f92e 	bl	800aea8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 8000c4c:	b9c0      	cbnz	r0, 8000c80 <stampboot+0x70>
			printf("stampboot: failed to OBProgram %d\n", res);
		}

		res = HAL_FLASH_OB_Launch();
 8000c4e:	f00a f83b 	bl	800acc8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 8000c52:	b980      	cbnz	r0, 8000c76 <stampboot+0x66>
			printf("stampboot: failed to OBLaunch %d\n", res);
		}
		printf(".......re-stamped boot vector.......\n");
 8000c54:	480e      	ldr	r0, [pc, #56]	; (8000c90 <stampboot+0x80>)
 8000c56:	f024 f999 	bl	8024f8c <puts>
	}
}
 8000c5a:	b009      	add	sp, #36	; 0x24
 8000c5c:	f85d fb04 	ldr.w	pc, [sp], #4
	if (OBInitStruct.BootAddr0 != newadd) {
 8000c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000c64:	d0f9      	beq.n	8000c5a <stampboot+0x4a>
		HAL_FLASH_OB_Unlock();
 8000c66:	f00a f813 	bl	800ac90 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c6a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c6e:	f44f 5201 	mov.w	r2, #8256	; 0x2040
		OBInitStruct.BootAddr0 = newadd;	// stamp the running boot address
 8000c72:	9306      	str	r3, [sp, #24]
		OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000c74:	e7e2      	b.n	8000c3c <stampboot+0x2c>
			printf("stampboot: failed to OBLaunch %d\n", res);
 8000c76:	4601      	mov	r1, r0
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <stampboot+0x84>)
 8000c7a:	f024 f8eb 	bl	8024e54 <iprintf>
 8000c7e:	e7e9      	b.n	8000c54 <stampboot+0x44>
			printf("stampboot: failed to OBProgram %d\n", res);
 8000c80:	4601      	mov	r1, r0
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <stampboot+0x88>)
 8000c84:	f024 f8e6 	bl	8024e54 <iprintf>
 8000c88:	e7e1      	b.n	8000c4e <stampboot+0x3e>
 8000c8a:	bf00      	nop
 8000c8c:	08000c11 	.word	0x08000c11
 8000c90:	08029548 	.word	0x08029548
 8000c94:	08029524 	.word	0x08029524
 8000c98:	08029500 	.word	0x08029500

08000c9c <printflasherr>:
void printflasherr() {
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		printf("Flash operation failed: %s error\n", msg);
 8000c9e:	4d1e      	ldr	r5, [pc, #120]	; (8000d18 <printflasherr+0x7c>)
		msg = "Programming alignment";
 8000ca0:	4f1e      	ldr	r7, [pc, #120]	; (8000d1c <printflasherr+0x80>)
		msg = "Erasing Sequence";
 8000ca2:	4e1f      	ldr	r6, [pc, #124]	; (8000d20 <printflasherr+0x84>)
	err = HAL_FLASH_GetError();
 8000ca4:	f00a f83e 	bl	800ad24 <HAL_FLASH_GetError>
	switch (err) {
 8000ca8:	1e83      	subs	r3, r0, #2
	err = HAL_FLASH_GetError();
 8000caa:	4604      	mov	r4, r0
	switch (err) {
 8000cac:	2b1e      	cmp	r3, #30
 8000cae:	d811      	bhi.n	8000cd4 <printflasherr+0x38>
 8000cb0:	e8df f003 	tbb	[pc, r3]
 8000cb4:	102f102b 	.word	0x102f102b
 8000cb8:	102d1010 	.word	0x102d1010
 8000cbc:	10101010 	.word	0x10101010
 8000cc0:	10291010 	.word	0x10291010
 8000cc4:	10101010 	.word	0x10101010
 8000cc8:	10101010 	.word	0x10101010
 8000ccc:	10101010 	.word	0x10101010
 8000cd0:	1010      	.short	0x1010
 8000cd2:	1d          	.byte	0x1d
 8000cd3:	00          	.byte	0x00
		sprintf(msg, "Unknown err 0x%0x", err);
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	4913      	ldr	r1, [pc, #76]	; (8000d24 <printflasherr+0x88>)
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f024 faa5 	bl	8025228 <siprintf>
		printf("Flash failed Unknown err 0x%0x\n", err);
 8000cde:	4621      	mov	r1, r4
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <printflasherr+0x8c>)
 8000ce2:	f024 f8b7 	bl	8024e54 <iprintf>
	res = HAL_FLASH_Lock();
 8000ce6:	f009 ffc9 	bl	800ac7c <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cea:	b940      	cbnz	r0, 8000cfe <printflasherr+0x62>
}
 8000cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		msg = "Operation";
 8000cee:	490f      	ldr	r1, [pc, #60]	; (8000d2c <printflasherr+0x90>)
		printf("Flash operation failed: %s error\n", msg);
 8000cf0:	4628      	mov	r0, r5
 8000cf2:	f024 f8af 	bl	8024e54 <iprintf>
	res = HAL_FLASH_Lock();
 8000cf6:	f009 ffc1 	bl	800ac7c <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d0f6      	beq.n	8000cec <printflasherr+0x50>
		printf("LockFlash: failed to lock\n");
 8000cfe:	480c      	ldr	r0, [pc, #48]	; (8000d30 <printflasherr+0x94>)
 8000d00:	f024 f944 	bl	8024f8c <puts>
		printflasherr();
 8000d04:	e7ce      	b.n	8000ca4 <printflasherr+0x8>
		msg = "Write Protected";
 8000d06:	490b      	ldr	r1, [pc, #44]	; (8000d34 <printflasherr+0x98>)
		break;
 8000d08:	e7f2      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Erasing Sequence";
 8000d0a:	4631      	mov	r1, r6
 8000d0c:	e7f0      	b.n	8000cf0 <printflasherr+0x54>
		msg = "Programming alignment";
 8000d0e:	4639      	mov	r1, r7
 8000d10:	e7ee      	b.n	8000cf0 <printflasherr+0x54>
	switch (err) {
 8000d12:	4909      	ldr	r1, [pc, #36]	; (8000d38 <printflasherr+0x9c>)
 8000d14:	e7ec      	b.n	8000cf0 <printflasherr+0x54>
 8000d16:	bf00      	nop
 8000d18:	08029604 	.word	0x08029604
 8000d1c:	08029590 	.word	0x08029590
 8000d20:	0802957c 	.word	0x0802957c
 8000d24:	080295d0 	.word	0x080295d0
 8000d28:	080295e4 	.word	0x080295e4
 8000d2c:	08029570 	.word	0x08029570
 8000d30:	08029628 	.word	0x08029628
 8000d34:	080295a8 	.word	0x080295a8
 8000d38:	080295b8 	.word	0x080295b8

08000d3c <WriteFlashWord.part.0>:
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d3c:	b570      	push	{r4, r5, r6, lr}
	__HAL_FLASH_ART_DISABLE();
 8000d3e:	4c1a      	ldr	r4, [pc, #104]	; (8000da8 <WriteFlashWord.part.0+0x6c>)
HAL_StatusTypeDef WriteFlashWord(uint32_t address, uint32_t data) {
 8000d40:	4605      	mov	r5, r0
 8000d42:	460e      	mov	r6, r1
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d44:	2300      	movs	r3, #0
	__HAL_FLASH_ART_DISABLE();
 8000d46:	6822      	ldr	r2, [r4, #0]
 8000d48:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000d4c:	6022      	str	r2, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d4e:	460a      	mov	r2, r1
 8000d50:	4601      	mov	r1, r0
 8000d52:	2002      	movs	r0, #2
 8000d54:	f00a f818 	bl	800ad88 <HAL_FLASH_Program>
 8000d58:	b990      	cbnz	r0, 8000d80 <WriteFlashWord.part.0+0x44>
	__HAL_FLASH_ART_RESET();
 8000d5a:	6823      	ldr	r3, [r4, #0]
 8000d5c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d60:	6023      	str	r3, [r4, #0]
	__HAL_FLASH_ART_ENABLE();
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d68:	6023      	str	r3, [r4, #0]
	if (*(uint32_t*) address != data) {
 8000d6a:	682b      	ldr	r3, [r5, #0]
 8000d6c:	429e      	cmp	r6, r3
 8000d6e:	d100      	bne.n	8000d72 <WriteFlashWord.part.0+0x36>
}
 8000d70:	bd70      	pop	{r4, r5, r6, pc}
		printf("WriteFlashWord: Failed at 0x%08x with data=%08x, read=0x%08x\n", address, data, *(uint32_t*) address);
 8000d72:	4632      	mov	r2, r6
 8000d74:	4629      	mov	r1, r5
 8000d76:	480d      	ldr	r0, [pc, #52]	; (8000dac <WriteFlashWord.part.0+0x70>)
 8000d78:	f024 f86c 	bl	8024e54 <iprintf>
		return (HAL_ERROR);
 8000d7c:	2001      	movs	r0, #1
}
 8000d7e:	bd70      	pop	{r4, r5, r6, pc}
		printflasherr();		// deleteme
 8000d80:	f7ff ff8c 	bl	8000c9c <printflasherr>
			printflasherr();
 8000d84:	f7ff ff8a 	bl	8000c9c <printflasherr>
			printf("WriteFlashWord: failed write at 0x%0x err=0x%x\n", address, res);
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4629      	mov	r1, r5
 8000d8c:	4808      	ldr	r0, [pc, #32]	; (8000db0 <WriteFlashWord.part.0+0x74>)
 8000d8e:	f024 f861 	bl	8024e54 <iprintf>
			__HAL_FLASH_ART_RESET();
 8000d92:	6823      	ldr	r3, [r4, #0]
	while ((res = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data) != HAL_OK)) {
 8000d94:	2001      	movs	r0, #1
			__HAL_FLASH_ART_RESET();
 8000d96:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d9a:	6023      	str	r3, [r4, #0]
			__HAL_FLASH_ART_ENABLE();
 8000d9c:	6823      	ldr	r3, [r4, #0]
 8000d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000da2:	6023      	str	r3, [r4, #0]
}
 8000da4:	bd70      	pop	{r4, r5, r6, pc}
 8000da6:	bf00      	nop
 8000da8:	40023c00 	.word	0x40023c00
 8000dac:	08029698 	.word	0x08029698
 8000db0:	08029668 	.word	0x08029668

08000db4 <EraseFlash>:
HAL_StatusTypeDef EraseFlash(void *memptr) {
 8000db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000db6:	b083      	sub	sp, #12
 8000db8:	4604      	mov	r4, r0
	res = HAL_FLASH_Unlock();
 8000dba:	f009 ff4b 	bl	800ac54 <HAL_FLASH_Unlock>
	if (res != HAL_OK) {
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d14f      	bne.n	8000e62 <EraseFlash+0xae>
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dc2:	f004 6301 	and.w	r3, r4, #135266304	; 0x8100000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dc6:	4d34      	ldr	r5, [pc, #208]	; (8000e98 <EraseFlash+0xe4>)
 8000dc8:	2202      	movs	r2, #2
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dca:	4626      	mov	r6, r4
 8000dcc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;		// should this be 2???
 8000dd0:	612a      	str	r2, [r5, #16]
	if (((uint32_t) memptr & 0x8100000) == 0x8000000)	// the lower 512K
 8000dd2:	d041      	beq.n	8000e58 <EraseFlash+0xa4>
		EraseInitStruct.Sector = FLASH_SECTOR_8;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	e9c5 3202 	strd	r3, r2, [r5, #8]
	for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000dda:	4930      	ldr	r1, [pc, #192]	; (8000e9c <EraseFlash+0xe8>)
 8000ddc:	1f23      	subs	r3, r4, #4
 8000dde:	4421      	add	r1, r4
 8000de0:	e001      	b.n	8000de6 <EraseFlash+0x32>
 8000de2:	428b      	cmp	r3, r1
 8000de4:	d006      	beq.n	8000df4 <EraseFlash+0x40>
		if (*ptr != 0xffffffff) {
 8000de6:	f853 2f04 	ldr.w	r2, [r3, #4]!
 8000dea:	3201      	adds	r2, #1
 8000dec:	d0f9      	beq.n	8000de2 <EraseFlash+0x2e>
	if ((dirty) && (notflashed)) {
 8000dee:	4f2c      	ldr	r7, [pc, #176]	; (8000ea0 <EraseFlash+0xec>)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	b92b      	cbnz	r3, 8000e00 <EraseFlash+0x4c>
		printf("Flash erase unnecessary\n");
 8000df4:	482b      	ldr	r0, [pc, #172]	; (8000ea4 <EraseFlash+0xf0>)
 8000df6:	f024 f8c9 	bl	8024f8c <puts>
}
 8000dfa:	2000      	movs	r0, #0
 8000dfc:	b003      	add	sp, #12
 8000dfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		osDelay(1000);
 8000e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e04:	f014 f890 	bl	8014f28 <osDelay>
		printf("Erasing Flash for %d sector(s) from %d\n", EraseInitStruct.NbSectors, EraseInitStruct.Sector);
 8000e08:	4827      	ldr	r0, [pc, #156]	; (8000ea8 <EraseFlash+0xf4>)
 8000e0a:	e9d5 2102 	ldrd	r2, r1, [r5, #8]
 8000e0e:	f024 f821 	bl	8024e54 <iprintf>
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e12:	2200      	movs	r2, #0
 8000e14:	2301      	movs	r3, #1
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e16:	a901      	add	r1, sp, #4
 8000e18:	481f      	ldr	r0, [pc, #124]	; (8000e98 <EraseFlash+0xe4>)
		EraseInitStruct.Banks = FLASH_BANK_1;
 8000e1a:	e9c5 2300 	strd	r2, r3, [r5]
		EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000e1e:	2302      	movs	r3, #2
 8000e20:	612b      	str	r3, [r5, #16]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e22:	f00a f985 	bl	800b130 <HAL_FLASHEx_Erase>
		if (SectorError != 0xffffffff) {
 8000e26:	9901      	ldr	r1, [sp, #4]
		res = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError);
 8000e28:	4605      	mov	r5, r0
		if (SectorError != 0xffffffff) {
 8000e2a:	1c48      	adds	r0, r1, #1
 8000e2c:	d12d      	bne.n	8000e8a <EraseFlash+0xd6>
		if (res != HAL_OK) {
 8000e2e:	bb25      	cbnz	r5, 8000e7a <EraseFlash+0xc6>
			printf("Flash successfully erased\n");
 8000e30:	481e      	ldr	r0, [pc, #120]	; (8000eac <EraseFlash+0xf8>)
 8000e32:	f504 2400 	add.w	r4, r4, #524288	; 0x80000
 8000e36:	f024 f8a9 	bl	8024f8c <puts>
			notflashed = 0;
 8000e3a:	603d      	str	r5, [r7, #0]
			for (ptr = memptr; ptr < (uint32_t) (memptr + 0x80000); ptr++) {		// 512K
 8000e3c:	e001      	b.n	8000e42 <EraseFlash+0x8e>
 8000e3e:	42b4      	cmp	r4, r6
 8000e40:	d0db      	beq.n	8000dfa <EraseFlash+0x46>
 8000e42:	4631      	mov	r1, r6
				if (*ptr != 0xffffffff) {
 8000e44:	3604      	adds	r6, #4
 8000e46:	680b      	ldr	r3, [r1, #0]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	d0f8      	beq.n	8000e3e <EraseFlash+0x8a>
				notflashed = 1;
 8000e4c:	2301      	movs	r3, #1
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e4e:	4818      	ldr	r0, [pc, #96]	; (8000eb0 <EraseFlash+0xfc>)
				notflashed = 1;
 8000e50:	603b      	str	r3, [r7, #0]
				printf("*** ERROR: Flash was erased but bits still dirty at 0x%08x\n",ptr);
 8000e52:	f023 ffff 	bl	8024e54 <iprintf>
 8000e56:	e7d0      	b.n	8000dfa <EraseFlash+0x46>
		EraseInitStruct.NbSectors = 6;
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2306      	movs	r3, #6
 8000e5c:	e9c5 2302 	strd	r2, r3, [r5, #8]
 8000e60:	e7bb      	b.n	8000dda <EraseFlash+0x26>
		printf("UnlockFlash: failed to unlock 0x%x\n", res);
 8000e62:	4601      	mov	r1, r0
 8000e64:	4813      	ldr	r0, [pc, #76]	; (8000eb4 <EraseFlash+0x100>)
 8000e66:	f023 fff5 	bl	8024e54 <iprintf>
		printflasherr();
 8000e6a:	f7ff ff17 	bl	8000c9c <printflasherr>
		printf("EraseFlash: unlock failed\n");
 8000e6e:	4812      	ldr	r0, [pc, #72]	; (8000eb8 <EraseFlash+0x104>)
 8000e70:	f024 f88c 	bl	8024f8c <puts>
		printflasherr();
 8000e74:	f7ff ff12 	bl	8000c9c <printflasherr>
 8000e78:	e7a3      	b.n	8000dc2 <EraseFlash+0xe>
			printf("EraseFlash: failed\n");
 8000e7a:	4810      	ldr	r0, [pc, #64]	; (8000ebc <EraseFlash+0x108>)
 8000e7c:	f024 f886 	bl	8024f8c <puts>
			printflasherr();
 8000e80:	f7ff ff0c 	bl	8000c9c <printflasherr>
}
 8000e84:	2000      	movs	r0, #0
 8000e86:	b003      	add	sp, #12
 8000e88:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("Flash Erase failed sectorerror 0x%08x\n", SectorError);
 8000e8a:	480d      	ldr	r0, [pc, #52]	; (8000ec0 <EraseFlash+0x10c>)
 8000e8c:	f023 ffe2 	bl	8024e54 <iprintf>
		if (res != HAL_OK) {
 8000e90:	2d00      	cmp	r5, #0
 8000e92:	d0cd      	beq.n	8000e30 <EraseFlash+0x7c>
 8000e94:	e7f1      	b.n	8000e7a <EraseFlash+0xc6>
 8000e96:	bf00      	nop
 8000e98:	200007e0 	.word	0x200007e0
 8000e9c:	0007fffc 	.word	0x0007fffc
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	08029774 	.word	0x08029774
 8000ea8:	080296f4 	.word	0x080296f4
 8000eac:	08029758 	.word	0x08029758
 8000eb0:	0802978c 	.word	0x0802978c
 8000eb4:	08029644 	.word	0x08029644
 8000eb8:	080296d8 	.word	0x080296d8
 8000ebc:	08029744 	.word	0x08029744
 8000ec0:	0802971c 	.word	0x0802971c

08000ec4 <swapboot>:

/// fix up the boot vectors in the option flash
void swapboot() {
 8000ec4:	b500      	push	{lr}
 8000ec6:	b089      	sub	sp, #36	; 0x24
	HAL_StatusTypeDef res;
	FLASH_OBProgramInitTypeDef OBInitStruct;
	uint32_t *newadd, options;

	HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8000ec8:	4668      	mov	r0, sp
 8000eca:	f00a f8c5 	bl	800b058 <HAL_FLASHEx_OBGetConfig>
	HAL_FLASH_OB_Unlock();
 8000ece:	f009 fedf 	bl	800ac90 <HAL_FLASH_OB_Unlock>

	// swap boot address (maybe)

	newadd = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;	// toggle boot segment start add
 8000ed2:	9b06      	ldr	r3, [sp, #24]
 8000ed4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ed8:	d008      	beq.n	8000eec <swapboot+0x28>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	3201      	adds	r2, #1
 8000ee2:	d009      	beq.n	8000ef8 <swapboot+0x34>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ee4:	9306      	str	r3, [sp, #24]
	}
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ee6:	f44f 5201 	mov.w	r2, #8256	; 0x2040
 8000eea:	e007      	b.n	8000efc <swapboot+0x38>
	if (*newadd != 0xffffffff) {	// if new area is not an empty region
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	3301      	adds	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <swapboot+0x22>
		OBInitStruct.BootAddr0 = newadd;	// change boot address
 8000ef2:	f44f 5301 	mov.w	r3, #8256	; 0x2040
 8000ef6:	9306      	str	r3, [sp, #24]
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000ef8:	f44f 5200 	mov.w	r2, #8192	; 0x2000

	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBOOT;		// disable mirrored flash dual boot
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000efc:	9b05      	ldr	r3, [sp, #20]

	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000efe:	4668      	mov	r0, sp
	OBInitStruct.BootAddr1 = (OBInitStruct.BootAddr0 == 0x2000) ? 0x2040 : 0x2000;// flip alternate (this is only used if boot pin inverted)
 8000f00:	9207      	str	r2, [sp, #28]
	OBInitStruct.USERConfig |= FLASH_OPTCR_nDBANK;
 8000f02:	f043 5340 	orr.w	r3, r3, #805306368	; 0x30000000
 8000f06:	9305      	str	r3, [sp, #20]
	res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 8000f08:	f009 ffce 	bl	800aea8 <HAL_FLASHEx_OBProgram>
	if (res != HAL_OK) {
 8000f0c:	b990      	cbnz	r0, 8000f34 <swapboot+0x70>
		printf("swapboot: failed to OBProgram %d\n", res);
	}

	res = HAL_FLASH_OB_Launch();
 8000f0e:	f009 fedb 	bl	800acc8 <HAL_FLASH_OB_Launch>
	if (res != HAL_OK) {
 8000f12:	b950      	cbnz	r0, 8000f2a <swapboot+0x66>
		printf("swapboot: failed to OBLaunch %d\n", res);
	}
	printf("swapping boot....\n");
 8000f14:	480a      	ldr	r0, [pc, #40]	; (8000f40 <swapboot+0x7c>)
 8000f16:	f024 f839 	bl	8024f8c <puts>
	HAL_FLASH_OB_Lock();
 8000f1a:	f009 fecb 	bl	800acb4 <HAL_FLASH_OB_Lock>

	printf("swapboot ran\n");
 8000f1e:	4809      	ldr	r0, [pc, #36]	; (8000f44 <swapboot+0x80>)
 8000f20:	f024 f834 	bl	8024f8c <puts>
}
 8000f24:	b009      	add	sp, #36	; 0x24
 8000f26:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("swapboot: failed to OBLaunch %d\n", res);
 8000f2a:	4601      	mov	r1, r0
 8000f2c:	4806      	ldr	r0, [pc, #24]	; (8000f48 <swapboot+0x84>)
 8000f2e:	f023 ff91 	bl	8024e54 <iprintf>
 8000f32:	e7ef      	b.n	8000f14 <swapboot+0x50>
		printf("swapboot: failed to OBProgram %d\n", res);
 8000f34:	4601      	mov	r1, r0
 8000f36:	4805      	ldr	r0, [pc, #20]	; (8000f4c <swapboot+0x88>)
 8000f38:	f023 ff8c 	bl	8024e54 <iprintf>
 8000f3c:	e7e7      	b.n	8000f0e <swapboot+0x4a>
 8000f3e:	bf00      	nop
 8000f40:	08029834 	.word	0x08029834
 8000f44:	08029848 	.word	0x08029848
 8000f48:	08029810 	.word	0x08029810
 8000f4c:	080297ec 	.word	0x080297ec

08000f50 <flash_writeword>:
static void* memread() {

}

// write tp flash with data at memptr
int flash_writeword(uint32_t worddata) {
 8000f50:	b538      	push	{r3, r4, r5, lr}
	HAL_StatusTypeDef res;

	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f52:	4d10      	ldr	r5, [pc, #64]	; (8000f94 <flash_writeword+0x44>)
 8000f54:	682b      	ldr	r3, [r5, #0]
	if (((int) address < FLASH_START_ADDRESS) || ((int) address > (FLASH_END_ADDRESS))) {
 8000f56:	f103 4278 	add.w	r2, r3, #4160749568	; 0xf8000000
 8000f5a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8000f5e:	d20a      	bcs.n	8000f76 <flash_writeword+0x26>
 8000f60:	4604      	mov	r4, r0
 8000f62:	4601      	mov	r1, r0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff fee9 	bl	8000d3c <WriteFlashWord.part.0>
	if ((res = WriteFlashWord(flash_memptr, worddata)) != 0) {
 8000f6a:	b938      	cbnz	r0, 8000f7c <flash_writeword+0x2c>
		printf("memwrite: WriteFlash error\n");
		return (-1);
	}
	if (*(uint32_t*) flash_memptr != worddata) {
 8000f6c:	6829      	ldr	r1, [r5, #0]
 8000f6e:	680b      	ldr	r3, [r1, #0]
 8000f70:	42a3      	cmp	r3, r4
 8000f72:	d109      	bne.n	8000f88 <flash_writeword+0x38>
		printf("memwrite: Readback error at %08x\n", flash_memptr);
		return (-1);
	}
	return (0);
}
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
		printf("WriteFlash: failed address check\n");
 8000f76:	4808      	ldr	r0, [pc, #32]	; (8000f98 <flash_writeword+0x48>)
 8000f78:	f024 f808 	bl	8024f8c <puts>
		printf("memwrite: WriteFlash error\n");
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <flash_writeword+0x4c>)
 8000f7e:	f024 f805 	bl	8024f8c <puts>
		return (-1);
 8000f82:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f86:	bd38      	pop	{r3, r4, r5, pc}
		printf("memwrite: Readback error at %08x\n", flash_memptr);
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <flash_writeword+0x50>)
 8000f8a:	f023 ff63 	bl	8024e54 <iprintf>
		return (-1);
 8000f8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000f92:	bd38      	pop	{r3, r4, r5, pc}
 8000f94:	20000820 	.word	0x20000820
 8000f98:	080297c8 	.word	0x080297c8
 8000f9c:	08029858 	.word	0x08029858
 8000fa0:	08029874 	.word	0x08029874

08000fa4 <flash_memwrite>:

// flash_memwrite - this writes an unspecified block size to Flash (with verification)
// assume mem is pointing at byte array
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	volatile int i, j, k;
	volatile uint32_t data;
	HAL_StatusTypeDef res;
	static int lastbyte = 0;

	flash_filelength += (int) len;
 8000fa8:	4e49      	ldr	r6, [pc, #292]	; (80010d0 <flash_memwrite+0x12c>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000faa:	b085      	sub	sp, #20
//	}
//	printf("\n");
//////////////////////////////////////////////////////
#endif

	if ((!(flash_abort)) && (notflashed)) {
 8000fac:	4949      	ldr	r1, [pc, #292]	; (80010d4 <flash_memwrite+0x130>)
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fae:	4615      	mov	r5, r2
	flash_filelength += (int) len;
 8000fb0:	6833      	ldr	r3, [r6, #0]
int flash_memwrite(const uint8_t buf[], size_t size, size_t len, volatile void *mem) {
 8000fb2:	4604      	mov	r4, r0
	if ((!(flash_abort)) && (notflashed)) {
 8000fb4:	680f      	ldr	r7, [r1, #0]
	flash_filelength += (int) len;
 8000fb6:	4413      	add	r3, r2
 8000fb8:	6033      	str	r3, [r6, #0]
	if ((!(flash_abort)) && (notflashed)) {
 8000fba:	b92f      	cbnz	r7, 8000fc8 <flash_memwrite+0x24>
 8000fbc:	f8df 8124 	ldr.w	r8, [pc, #292]	; 80010e4 <flash_memwrite+0x140>
 8000fc0:	f8d8 3000 	ldr.w	r3, [r8]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d179      	bne.n	80010bc <flash_memwrite+0x118>
	}
	if (len % 2 != 0) {
		printf("memwrite: len %d chunk not multiple of 2 at %u\n", len, flash_filelength);
	}
#endif
	if (len == 0) {
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d071      	beq.n	80010b0 <flash_memwrite+0x10c>
		printf("memwrite: len %d at %u\n", len, flash_filelength);
	}


	data = 0xffffffff;		// the 32 bit word we will write
 8000fcc:	f04f 33ff 	mov.w	r3, #4294967295

	lastbyte = 0;
	if (q_index > 0) {		// some residual data from last time through here
 8000fd0:	4f41      	ldr	r7, [pc, #260]	; (80010d8 <flash_memwrite+0x134>)
	lastbyte = 0;
 8000fd2:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80010e8 <flash_memwrite+0x144>
	if (q_index > 0) {		// some residual data from last time through here
 8000fd6:	6839      	ldr	r1, [r7, #0]
	data = 0xffffffff;		// the 32 bit word we will write
 8000fd8:	9303      	str	r3, [sp, #12]
	lastbyte = 0;
 8000fda:	2300      	movs	r3, #0
	if (q_index > 0) {		// some residual data from last time through here
 8000fdc:	4299      	cmp	r1, r3
	lastbyte = 0;
 8000fde:	f8c8 3000 	str.w	r3, [r8]
	if (q_index > 0) {		// some residual data from last time through here
 8000fe2:	dd1a      	ble.n	800101a <flash_memwrite+0x76>
		for (i = 0; i < q_index;) {
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	9b00      	ldr	r3, [sp, #0]
 8000fe8:	4299      	cmp	r1, r3
 8000fea:	dd16      	ble.n	800101a <flash_memwrite+0x76>
 8000fec:	2201      	movs	r2, #1
 8000fee:	4e3b      	ldr	r6, [pc, #236]	; (80010dc <flash_memwrite+0x138>)
			data >>= 8;
 8000ff0:	9b03      	ldr	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
			lastbyte++;
 8000ff2:	4610      	mov	r0, r2
		for (i = 0; i < q_index;) {
 8000ff4:	3201      	adds	r2, #1
			data >>= 8;
 8000ff6:	0a1b      	lsrs	r3, r3, #8
 8000ff8:	9303      	str	r3, [sp, #12]
			data |= (q_bytes[i++] << 24);
 8000ffa:	9b00      	ldr	r3, [sp, #0]
 8000ffc:	f103 0e01 	add.w	lr, r3, #1
 8001000:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
 8001004:	f8cd e000 	str.w	lr, [sp]
 8001008:	9b03      	ldr	r3, [sp, #12]
 800100a:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
 800100e:	9303      	str	r3, [sp, #12]
		for (i = 0; i < q_index;) {
 8001010:	9b00      	ldr	r3, [sp, #0]
 8001012:	4299      	cmp	r1, r3
 8001014:	dcec      	bgt.n	8000ff0 <flash_memwrite+0x4c>
 8001016:	f8c8 0000 	str.w	r0, [r8]
		}
	}

	k = len % 4;		// see if buf fits full into 32 bit words
 800101a:	f005 0303 	and.w	r3, r5, #3

	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800101e:	2600      	movs	r6, #0
	k = len % 4;		// see if buf fits full into 32 bit words
 8001020:	9302      	str	r3, [sp, #8]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001022:	9600      	str	r6, [sp, #0]
 8001024:	9b00      	ldr	r3, [sp, #0]
 8001026:	4419      	add	r1, r3
 8001028:	9b02      	ldr	r3, [sp, #8]
 800102a:	1aeb      	subs	r3, r5, r3
 800102c:	4299      	cmp	r1, r3
 800102e:	d229      	bcs.n	8001084 <flash_memwrite+0xe0>
 8001030:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80010ec <flash_memwrite+0x148>
		for (j = lastbyte; j < 4; j++) {
 8001034:	f8d8 3000 	ldr.w	r3, [r8]
 8001038:	9301      	str	r3, [sp, #4]
 800103a:	9b01      	ldr	r3, [sp, #4]
 800103c:	2b03      	cmp	r3, #3
 800103e:	dc10      	bgt.n	8001062 <flash_memwrite+0xbe>
			data >>= 8;
 8001040:	9b03      	ldr	r3, [sp, #12]
 8001042:	0a1b      	lsrs	r3, r3, #8
 8001044:	9303      	str	r3, [sp, #12]
			data |= buf[i++] << 24;
 8001046:	9b00      	ldr	r3, [sp, #0]
 8001048:	1c59      	adds	r1, r3, #1
 800104a:	5ce2      	ldrb	r2, [r4, r3]
 800104c:	9100      	str	r1, [sp, #0]
 800104e:	9b03      	ldr	r3, [sp, #12]
 8001050:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001054:	9303      	str	r3, [sp, #12]
		for (j = lastbyte; j < 4; j++) {
 8001056:	9b01      	ldr	r3, [sp, #4]
 8001058:	3301      	adds	r3, #1
 800105a:	9301      	str	r3, [sp, #4]
 800105c:	9b01      	ldr	r3, [sp, #4]
 800105e:	2b03      	cmp	r3, #3
 8001060:	ddee      	ble.n	8001040 <flash_memwrite+0x9c>
		patt += 4;
#endif
		lastbyte = 0;	// no more residual

		//		printf("memptr=%08x, data[%d]=%08x\n", (uint32_t) memptr, i, data);
		flash_writeword(data);
 8001062:	9803      	ldr	r0, [sp, #12]
		lastbyte = 0;	// no more residual
 8001064:	f8c8 6000 	str.w	r6, [r8]
		flash_writeword(data);
 8001068:	f7ff ff72 	bl	8000f50 <flash_writeword>
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800106c:	9800      	ldr	r0, [sp, #0]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	9b02      	ldr	r3, [sp, #8]

		flash_memptr += 4;
 8001072:	f8d9 1000 	ldr.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001076:	4402      	add	r2, r0
 8001078:	1aeb      	subs	r3, r5, r3
		flash_memptr += 4;
 800107a:	3104      	adds	r1, #4
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 800107c:	429a      	cmp	r2, r3
		flash_memptr += 4;
 800107e:	f8c9 1000 	str.w	r1, [r9]
	for (i = 0; (i + q_index) < (len - k);) {		// take full words, avoid read buffer overflow
 8001082:	d3d7      	bcc.n	8001034 <flash_memwrite+0x90>
	}

	for (q_index = 0; i < len;) {
 8001084:	9b00      	ldr	r3, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	429d      	cmp	r5, r3
 800108a:	603a      	str	r2, [r7, #0]
 800108c:	d90c      	bls.n	80010a8 <flash_memwrite+0x104>
 800108e:	4913      	ldr	r1, [pc, #76]	; (80010dc <flash_memwrite+0x138>)
 8001090:	2301      	movs	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 8001092:	9a00      	ldr	r2, [sp, #0]
 8001094:	1c50      	adds	r0, r2, #1
 8001096:	5ca2      	ldrb	r2, [r4, r2]
 8001098:	603b      	str	r3, [r7, #0]
	for (q_index = 0; i < len;) {
 800109a:	3301      	adds	r3, #1
		q_bytes[q_index++] = buf[i++];		// put extra odd bytes in queue
 800109c:	9000      	str	r0, [sp, #0]
 800109e:	f841 2b04 	str.w	r2, [r1], #4
	for (q_index = 0; i < len;) {
 80010a2:	9a00      	ldr	r2, [sp, #0]
 80010a4:	42aa      	cmp	r2, r5
 80010a6:	d3f4      	bcc.n	8001092 <flash_memwrite+0xee>
	}

///	memptr += len;
//	printf("memwrite: buf=0x%0x, size=%d, size_=%d, memptr=0x%x\n",(uint32_t)buf,size,len,(uint32_t)mem);
	return ((int) len);
}
 80010a8:	4628      	mov	r0, r5
 80010aa:	b005      	add	sp, #20
 80010ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		printf("memwrite: len %d at %u\n", len, flash_filelength);
 80010b0:	6832      	ldr	r2, [r6, #0]
 80010b2:	4629      	mov	r1, r5
 80010b4:	480a      	ldr	r0, [pc, #40]	; (80010e0 <flash_memwrite+0x13c>)
 80010b6:	f023 fecd 	bl	8024e54 <iprintf>
 80010ba:	e787      	b.n	8000fcc <flash_memwrite+0x28>
		res = EraseFlash(flash_memptr);
 80010bc:	f8df 902c 	ldr.w	r9, [pc, #44]	; 80010ec <flash_memwrite+0x148>
 80010c0:	f8d9 0000 	ldr.w	r0, [r9]
 80010c4:	f7ff fe76 	bl	8000db4 <EraseFlash>
		notflashed = 0;
 80010c8:	f8c8 7000 	str.w	r7, [r8]
 80010cc:	e77c      	b.n	8000fc8 <flash_memwrite+0x24>
 80010ce:	bf00      	nop
 80010d0:	2000081c 	.word	0x2000081c
 80010d4:	20000818 	.word	0x20000818
 80010d8:	20000838 	.word	0x20000838
 80010dc:	20000828 	.word	0x20000828
 80010e0:	08029898 	.word	0x08029898
 80010e4:	20000008 	.word	0x20000008
 80010e8:	20000824 	.word	0x20000824
 80010ec:	20000820 	.word	0x20000820

080010f0 <memclose>:
	static FLASH_OBProgramInitTypeDef OBInitStruct;
	HAL_StatusTypeDef res;
	int i;

	notflashed = 1;		// now assumed dirty
	if (flash_abort) {
 80010f0:	4b47      	ldr	r3, [pc, #284]	; (8001210 <memclose+0x120>)
	notflashed = 1;		// now assumed dirty
 80010f2:	2101      	movs	r1, #1
 80010f4:	4a47      	ldr	r2, [pc, #284]	; (8001214 <memclose+0x124>)
	if (flash_abort) {
 80010f6:	6818      	ldr	r0, [r3, #0]
	notflashed = 1;		// now assumed dirty
 80010f8:	6011      	str	r1, [r2, #0]
	if (flash_abort) {
 80010fa:	2800      	cmp	r0, #0
 80010fc:	d16e      	bne.n	80011dc <memclose+0xec>
		flash_abort = 0;
		http_downloading = NOT_LOADING;
		return;
	}

	if (q_index > 0) {			// unfinished residual write still needed
 80010fe:	4b46      	ldr	r3, [pc, #280]	; (8001218 <memclose+0x128>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
void* memclose() {
 8001104:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001106:	b085      	sub	sp, #20
	if (q_index > 0) {			// unfinished residual write still needed
 8001108:	dd0b      	ble.n	8001122 <memclose+0x32>
 800110a:	4a44      	ldr	r2, [pc, #272]	; (800121c <memclose+0x12c>)
 800110c:	f102 0110 	add.w	r1, r2, #16
		residual = 0;
		for (i = 0; i < 4; i++) {
			residual >>= 8;
			residual |= (q_bytes[i] << 24);
 8001110:	f852 3b04 	ldr.w	r3, [r2], #4
 8001114:	061b      	lsls	r3, r3, #24
		for (i = 0; i < 4; i++) {
 8001116:	4291      	cmp	r1, r2
			residual |= (q_bytes[i] << 24);
 8001118:	ea43 2010 	orr.w	r0, r3, r0, lsr #8
		for (i = 0; i < 4; i++) {
 800111c:	d1f8      	bne.n	8001110 <memclose+0x20>
		}
		flash_writeword(residual);
 800111e:	f7ff ff17 	bl	8000f50 <flash_writeword>
	}

	printf("eeprom memclose: flash_load_addr=0x%08x, filelength=%d, flash_memptr=0x%0x total=%d\n", flash_load_address,
 8001122:	4e3f      	ldr	r6, [pc, #252]	; (8001220 <memclose+0x130>)
 8001124:	4b3f      	ldr	r3, [pc, #252]	; (8001224 <memclose+0x134>)
 8001126:	6832      	ldr	r2, [r6, #0]
 8001128:	4c3f      	ldr	r4, [pc, #252]	; (8001228 <memclose+0x138>)
 800112a:	4d40      	ldr	r5, [pc, #256]	; (800122c <memclose+0x13c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	6829      	ldr	r1, [r5, #0]
 8001130:	9200      	str	r2, [sp, #0]
 8001132:	483f      	ldr	r0, [pc, #252]	; (8001230 <memclose+0x140>)
 8001134:	6822      	ldr	r2, [r4, #0]
 8001136:	f023 fe8d 	bl	8024e54 <iprintf>
			flash_filelength, (unsigned int) flash_memptr, down_total);
	osDelay(1000);
 800113a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800113e:	f013 fef3 	bl	8014f28 <osDelay>
	res = HAL_FLASH_Lock();
 8001142:	f009 fd9b 	bl	800ac7c <HAL_FLASH_Lock>
	if (res != HAL_OK) {
 8001146:	2800      	cmp	r0, #0
 8001148:	d14d      	bne.n	80011e6 <memclose+0xf6>
	if (LockFlash() != HAL_OK) {
		printf("eeprom: flash2 failed\n");
		return ((void*) 0);
	}

	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 800114a:	6823      	ldr	r3, [r4, #0]

// calculate the crc over a range of memory
uint32_t flash_findcrc(void *base, int length) {
	uint32_t crc, xinit = 0xffffffff;

	crc = xcrc32(base, length, xinit);
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
	xcrc = flash_findcrc(flash_load_address, flash_filelength);
 8001150:	682f      	ldr	r7, [r5, #0]
	crc = xcrc32(base, length, xinit);
 8001152:	4619      	mov	r1, r3
 8001154:	9303      	str	r3, [sp, #12]
 8001156:	4638      	mov	r0, r7
 8001158:	f7ff fd46 	bl	8000be8 <xcrc32>
 800115c:	4604      	mov	r4, r0
	printf("findcrc: crc=0x%08x, base=0x%08x, len=%d\n", crc, base, length);
 800115e:	9b03      	ldr	r3, [sp, #12]
 8001160:	463a      	mov	r2, r7
 8001162:	4834      	ldr	r0, [pc, #208]	; (8001234 <memclose+0x144>)
 8001164:	4621      	mov	r1, r4
 8001166:	f023 fe75 	bl	8024e54 <iprintf>
	if ((dl_filecrc != xcrc) && (dl_filecrc != 0xffffffff)) {
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <memclose+0x148>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	1c53      	adds	r3, r2, #1
 8001170:	d007      	beq.n	8001182 <memclose+0x92>
 8001172:	42a2      	cmp	r2, r4
 8001174:	d005      	beq.n	8001182 <memclose+0x92>
		printf(
 8001176:	6833      	ldr	r3, [r6, #0]
 8001178:	4621      	mov	r1, r4
 800117a:	4830      	ldr	r0, [pc, #192]	; (800123c <memclose+0x14c>)
 800117c:	f023 fe6a 	bl	8024e54 <iprintf>
 8001180:	e027      	b.n	80011d2 <memclose+0xe2>
		osDelay(5);
 8001182:	2005      	movs	r0, #5
 8001184:	f013 fed0 	bl	8014f28 <osDelay>
		HAL_FLASHEx_OBGetConfig(&OBInitStruct);
 8001188:	482d      	ldr	r0, [pc, #180]	; (8001240 <memclose+0x150>)
 800118a:	f009 ff65 	bl	800b058 <HAL_FLASHEx_OBGetConfig>
		HAL_FLASH_OB_Unlock();
 800118e:	f009 fd7f 	bl	800ac90 <HAL_FLASH_OB_Unlock>
		OBInitStruct.BootAddr0 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2000 : 0x2040;
 8001192:	682b      	ldr	r3, [r5, #0]
 8001194:	482a      	ldr	r0, [pc, #168]	; (8001240 <memclose+0x150>)
 8001196:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800119a:	bf0b      	itete	eq
 800119c:	f44f 5200 	moveq.w	r2, #8192	; 0x2000
 80011a0:	f44f 5201 	movne.w	r2, #8256	; 0x2040
 80011a4:	f44f 5301 	moveq.w	r3, #8256	; 0x2040
 80011a8:	f44f 5300 	movne.w	r3, #8192	; 0x2000
		OBInitStruct.BootAddr1 = (flash_load_address == LOADER_BASE_MEM1) ? 0x2040 : 0x2000;
 80011ac:	e9c0 2306 	strd	r2, r3, [r0, #24]
		res = HAL_FLASHEx_OBProgram(&OBInitStruct);
 80011b0:	f009 fe7a 	bl	800aea8 <HAL_FLASHEx_OBProgram>
		if (res != HAL_OK) {
 80011b4:	bb38      	cbnz	r0, 8001206 <memclose+0x116>
		res = HAL_FLASH_OB_Launch();
 80011b6:	f009 fd87 	bl	800acc8 <HAL_FLASH_OB_Launch>
		if (res != HAL_OK) {
 80011ba:	b9f8      	cbnz	r0, 80011fc <memclose+0x10c>
		HAL_FLASH_OB_Lock();
 80011bc:	f009 fd7a 	bl	800acb4 <HAL_FLASH_OB_Lock>
		printf("New FLASH image loaded; rebooting please wait 45 secs...\n");
 80011c0:	4820      	ldr	r0, [pc, #128]	; (8001244 <memclose+0x154>)
 80011c2:	f023 fee3 	bl	8024f8c <puts>
		osDelay(50);
 80011c6:	2032      	movs	r0, #50	; 0x32
 80011c8:	f013 feae 	bl	8014f28 <osDelay>
		rebootme(0);
 80011cc:	2000      	movs	r0, #0
 80011ce:	f002 f955 	bl	800347c <rebootme>
	http_downloading = NOT_LOADING;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <memclose+0x158>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	b005      	add	sp, #20
 80011da:	bdf0      	pop	{r4, r5, r6, r7, pc}
		flash_abort = 0;
 80011dc:	2200      	movs	r2, #0
		http_downloading = NOT_LOADING;
 80011de:	491a      	ldr	r1, [pc, #104]	; (8001248 <memclose+0x158>)
		flash_abort = 0;
 80011e0:	601a      	str	r2, [r3, #0]
		http_downloading = NOT_LOADING;
 80011e2:	600a      	str	r2, [r1, #0]
}
 80011e4:	4770      	bx	lr
		printf("LockFlash: failed to lock\n");
 80011e6:	4819      	ldr	r0, [pc, #100]	; (800124c <memclose+0x15c>)
 80011e8:	f023 fed0 	bl	8024f8c <puts>
		printflasherr();
 80011ec:	f7ff fd56 	bl	8000c9c <printflasherr>
		printf("eeprom: flash2 failed\n");
 80011f0:	4817      	ldr	r0, [pc, #92]	; (8001250 <memclose+0x160>)
 80011f2:	f023 fecb 	bl	8024f8c <puts>
		return ((void*) 0);
 80011f6:	2000      	movs	r0, #0
}
 80011f8:	b005      	add	sp, #20
 80011fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("memclose: failed to OBLaunch %d\n", res);
 80011fc:	4601      	mov	r1, r0
 80011fe:	4815      	ldr	r0, [pc, #84]	; (8001254 <memclose+0x164>)
 8001200:	f023 fe28 	bl	8024e54 <iprintf>
 8001204:	e7da      	b.n	80011bc <memclose+0xcc>
			printf("memclose: failed to OBProgram %d\n", res);
 8001206:	4601      	mov	r1, r0
 8001208:	4813      	ldr	r0, [pc, #76]	; (8001258 <memclose+0x168>)
 800120a:	f023 fe23 	bl	8024e54 <iprintf>
 800120e:	e7d2      	b.n	80011b6 <memclose+0xc6>
 8001210:	20000818 	.word	0x20000818
 8001214:	20000008 	.word	0x20000008
 8001218:	20000838 	.word	0x20000838
 800121c:	20000828 	.word	0x20000828
 8001220:	20001634 	.word	0x20001634
 8001224:	20000820 	.word	0x20000820
 8001228:	2000081c 	.word	0x2000081c
 800122c:	20000004 	.word	0x20000004
 8001230:	080298b0 	.word	0x080298b0
 8001234:	08029a10 	.word	0x08029a10
 8001238:	20000814 	.word	0x20000814
 800123c:	08029920 	.word	0x08029920
 8001240:	200007f4 	.word	0x200007f4
 8001244:	080299d4 	.word	0x080299d4
 8001248:	20001880 	.word	0x20001880
 800124c:	08029628 	.word	0x08029628
 8001250:	08029908 	.word	0x08029908
 8001254:	080299b0 	.word	0x080299b0
 8001258:	0802998c 	.word	0x0802998c

0800125c <vApplicationIdleHook>:
	 specified, or call vTaskDelay()). If the application makes use of the
	 vTaskDelete() API function (as this demo application does) then it is also
	 important that vApplicationIdleHook() is permitted to return to its calling
	 function, because it is the responsibility of the idle task to clean up
	 memory allocated by the kernel to any task that has since been deleted. */
}
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop

08001260 <vApplicationStackOverflowHook>:
/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName) {
	/* Run time stack overflow checking is performed if
	 configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
	 called if a stack overflow is detected. */
}
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop

08001264 <vApplicationMallocFailedHook>:
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop

08001268 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <vApplicationGetIdleTaskMemory+0x18>)
{
 800126a:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800126c:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800126e:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001272:	4c04      	ldr	r4, [pc, #16]	; (8001284 <vApplicationGetIdleTaskMemory+0x1c>)
 8001274:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001276:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800127a:	6013      	str	r3, [r2, #0]
}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000c3c 	.word	0x20000c3c
 8001284:	2000083c 	.word	0x2000083c

08001288 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <vApplicationGetTimerTaskMemory+0x18>)
{
 800128a:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800128c:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800128e:	f44f 7300 	mov.w	r3, #512	; 0x200
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8001292:	4c04      	ldr	r4, [pc, #16]	; (80012a4 <vApplicationGetTimerTaskMemory+0x1c>)
 8001294:	600c      	str	r4, [r1, #0]
  /* place for user code */
}
 8001296:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 800129a:	6013      	str	r3, [r2, #0]
}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	200014f0 	.word	0x200014f0
 80012a4:	20000cf0 	.word	0x20000cf0

080012a8 <httpc_tcp_sent>:
	/* nothing to do here for now */
	LWIP_UNUSED_ARG(arg);
	LWIP_UNUSED_ARG(pcb);
	LWIP_UNUSED_ARG(len);
	return ERR_OK;
}
 80012a8:	2000      	movs	r0, #0
 80012aa:	4770      	bx	lr

080012ac <RecvHttpHeaderCallback>:
uint32_t http_content_len = 0;
char rxbuffer[540];
char domain_name[30];
err_t error;

err_t RecvHttpHeaderCallback(httpc_state_t *connection, void *arg, struct pbuf *hdr, u16_t hdr_len, u32_t content_len) {
 80012ac:	9a00      	ldr	r2, [sp, #0]
//	for (i = 0; i < hdr_len; i++) {
//		putchar(buf[i]);
//	}
//	printf("\n");
	return ERR_OK;
}
 80012ae:	2000      	movs	r0, #0
	http_content_len = content_len;
 80012b0:	4b01      	ldr	r3, [pc, #4]	; (80012b8 <RecvHttpHeaderCallback+0xc>)
 80012b2:	601a      	str	r2, [r3, #0]
}
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20001638 	.word	0x20001638

080012bc <httpc_get_internal_addr>:
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012bc:	b570      	push	{r4, r5, r6, lr}
	LWIP_ASSERT("req != NULL", req != NULL);
 80012be:	4604      	mov	r4, r0
static err_t httpc_get_internal_addr(httpc_state_t *req, const ip_addr_t *ipaddr) {
 80012c0:	460d      	mov	r5, r1
	LWIP_ASSERT("req != NULL", req != NULL);
 80012c2:	b158      	cbz	r0, 80012dc <httpc_get_internal_addr+0x20>
	if (&req->remote_addr != ipaddr) {
 80012c4:	1d21      	adds	r1, r4, #4
 80012c6:	42a9      	cmp	r1, r5
 80012c8:	d001      	beq.n	80012ce <httpc_get_internal_addr+0x12>
		req->remote_addr = *ipaddr;
 80012ca:	682b      	ldr	r3, [r5, #0]
 80012cc:	6063      	str	r3, [r4, #4]
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012ce:	8922      	ldrh	r2, [r4, #8]
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <httpc_get_internal_addr+0x30>)
}
 80012d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = altcp_connect(req->pcb, &req->remote_addr, req->remote_port, httpc_tcp_connected);
 80012d8:	f01a b9b4 	b.w	801b644 <tcp_connect>
	LWIP_ASSERT("req != NULL", req != NULL);
 80012dc:	4b04      	ldr	r3, [pc, #16]	; (80012f0 <httpc_get_internal_addr+0x34>)
 80012de:	f240 1299 	movw	r2, #409	; 0x199
 80012e2:	4904      	ldr	r1, [pc, #16]	; (80012f4 <httpc_get_internal_addr+0x38>)
 80012e4:	4804      	ldr	r0, [pc, #16]	; (80012f8 <httpc_get_internal_addr+0x3c>)
 80012e6:	f023 fdb5 	bl	8024e54 <iprintf>
 80012ea:	e7eb      	b.n	80012c4 <httpc_get_internal_addr+0x8>
 80012ec:	08001735 	.word	0x08001735
 80012f0:	08029a3c 	.word	0x08029a3c
 80012f4:	08029a58 	.word	0x08029a58
 80012f8:	08029a64 	.word	0x08029a64

080012fc <httpc_free_state>:
static err_t httpc_free_state(httpc_state_t *req) {
 80012fc:	b538      	push	{r3, r4, r5, lr}
 80012fe:	4604      	mov	r4, r0
	if (req->request != NULL) {
 8001300:	6900      	ldr	r0, [r0, #16]
 8001302:	b118      	cbz	r0, 800130c <httpc_free_state+0x10>
		pbuf_free(req->request);
 8001304:	f019 fce4 	bl	801acd0 <pbuf_free>
		req->request = NULL;
 8001308:	2300      	movs	r3, #0
 800130a:	6123      	str	r3, [r4, #16]
	if (req->rx_hdrs != NULL) {
 800130c:	6960      	ldr	r0, [r4, #20]
 800130e:	b118      	cbz	r0, 8001318 <httpc_free_state+0x1c>
		pbuf_free(req->rx_hdrs);
 8001310:	f019 fcde 	bl	801acd0 <pbuf_free>
		req->rx_hdrs = NULL;
 8001314:	2300      	movs	r3, #0
 8001316:	6163      	str	r3, [r4, #20]
	tpcb = req->pcb;
 8001318:	6825      	ldr	r5, [r4, #0]
	mem_free(req);
 800131a:	4620      	mov	r0, r4
 800131c:	f018 fc2c 	bl	8019b78 <mem_free>
	if (tpcb != NULL) {
 8001320:	b1c5      	cbz	r5, 8001354 <httpc_free_state+0x58>
		altcp_arg(tpcb, NULL);
 8001322:	2100      	movs	r1, #0
 8001324:	4628      	mov	r0, r5
 8001326:	f01a fa93 	bl	801b850 <tcp_arg>
		altcp_recv(tpcb, NULL);
 800132a:	2100      	movs	r1, #0
 800132c:	4628      	mov	r0, r5
 800132e:	f01a fa93 	bl	801b858 <tcp_recv>
		altcp_err(tpcb, NULL);
 8001332:	2100      	movs	r1, #0
 8001334:	4628      	mov	r0, r5
 8001336:	f01a fac7 	bl	801b8c8 <tcp_err>
		altcp_poll(tpcb, NULL, 0);
 800133a:	2200      	movs	r2, #0
 800133c:	4628      	mov	r0, r5
 800133e:	4611      	mov	r1, r2
 8001340:	f01a fae4 	bl	801b90c <tcp_poll>
		altcp_sent(tpcb, NULL);
 8001344:	4628      	mov	r0, r5
 8001346:	2100      	movs	r1, #0
 8001348:	f01a faa2 	bl	801b890 <tcp_sent>
		r = altcp_close(tpcb);
 800134c:	4628      	mov	r0, r5
 800134e:	f01b f93b 	bl	801c5c8 <tcp_close>
		if (r != ERR_OK) {
 8001352:	b908      	cbnz	r0, 8001358 <httpc_free_state+0x5c>
	return ERR_OK;
 8001354:	2000      	movs	r0, #0
}
 8001356:	bd38      	pop	{r3, r4, r5, pc}
			altcp_abort(tpcb);
 8001358:	4628      	mov	r0, r5
 800135a:	f01a ff3d 	bl	801c1d8 <tcp_abort>
			return ERR_ABRT;
 800135e:	f06f 000c 	mvn.w	r0, #12
}
 8001362:	bd38      	pop	{r3, r4, r5, pc}

08001364 <HttpClientFileReceiveCallback>:

//	printf("HttpClientPageResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
	returnpage(rxbuffer, down_total, err);
}

int HttpClientFileReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001364:	b510      	push	{r4, lr}
	char *buf;
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

	if (http_downloading == FLASH_LOADING) {
 8001366:	4c08      	ldr	r4, [pc, #32]	; (8001388 <HttpClientFileReceiveCallback+0x24>)
 8001368:	6824      	ldr	r4, [r4, #0]
 800136a:	2c01      	cmp	r4, #1
 800136c:	d003      	beq.n	8001376 <HttpClientFileReceiveCallback+0x12>
		stm_rx_callback(arg, pcb, p, err);
	} else if (http_downloading == NXT_LOADING) {
 800136e:	2c02      	cmp	r4, #2
 8001370:	d005      	beq.n	800137e <HttpClientFileReceiveCallback+0x1a>
		nxt_rx_callback(arg, pcb, p, err);
	}

	return (0);
}
 8001372:	2000      	movs	r0, #0
 8001374:	bd10      	pop	{r4, pc}
		stm_rx_callback(arg, pcb, p, err);
 8001376:	f000 fda5 	bl	8001ec4 <stm_rx_callback>
}
 800137a:	2000      	movs	r0, #0
 800137c:	bd10      	pop	{r4, pc}
		nxt_rx_callback(arg, pcb, p, err);
 800137e:	f003 fde5 	bl	8004f4c <nxt_rx_callback>
}
 8001382:	2000      	movs	r0, #0
 8001384:	bd10      	pop	{r4, pc}
 8001386:	bf00      	nop
 8001388:	20001880 	.word	0x20001880

0800138c <httpc_create_request_string.constprop.0.isra.0>:
static int httpc_create_request_string(const httpc_connection_t *settings, const char *server_name, int server_port,
 800138c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001390:	b084      	sub	sp, #16
 8001392:	460c      	mov	r4, r1
 8001394:	461d      	mov	r5, r3
 8001396:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
	if (settings->use_proxy) {
 800139a:	b968      	cbnz	r0, 80013b8 <httpc_create_request_string.constprop.0.isra.0+0x2c>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 800139c:	2900      	cmp	r1, #0
 800139e:	d032      	beq.n	8001406 <httpc_create_request_string.constprop.0.isra.0+0x7a>
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013a0:	4a1d      	ldr	r2, [pc, #116]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013a2:	462b      	mov	r3, r5
 80013a4:	4641      	mov	r1, r8
 80013a6:	4638      	mov	r0, r7
 80013a8:	e9cd 240a 	strd	r2, r4, [sp, #40]	; 0x28
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <httpc_create_request_string.constprop.0.isra.0+0x90>)
}
 80013ae:	b004      	add	sp, #16
 80013b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return snprintf(buffer, buffer_size, HTTPC_REQ_11_HOST_FORMAT(uri, server_name));
 80013b4:	f023 bf04 	b.w	80251c0 <sniprintf>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013b8:	4616      	mov	r6, r2
 80013ba:	b1e1      	cbz	r1, 80013f6 <httpc_create_request_string.constprop.0.isra.0+0x6a>
		if (server_port != HTTP_DEFAULT_PORT) {
 80013bc:	2e50      	cmp	r6, #80	; 0x50
 80013be:	d00d      	beq.n	80013dc <httpc_create_request_string.constprop.0.isra.0+0x50>
			return snprintf(buffer, buffer_size,
 80013c0:	4623      	mov	r3, r4
 80013c2:	9403      	str	r4, [sp, #12]
 80013c4:	4c14      	ldr	r4, [pc, #80]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013c6:	4641      	mov	r1, r8
 80013c8:	4a15      	ldr	r2, [pc, #84]	; (8001420 <httpc_create_request_string.constprop.0.isra.0+0x94>)
 80013ca:	4638      	mov	r0, r7
 80013cc:	9501      	str	r5, [sp, #4]
 80013ce:	9600      	str	r6, [sp, #0]
 80013d0:	9402      	str	r4, [sp, #8]
 80013d2:	f023 fef5 	bl	80251c0 <sniprintf>
}
 80013d6:	b004      	add	sp, #16
 80013d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return snprintf(buffer, buffer_size, HTTPC_REQ_11_PROXY_FORMAT(server_name, uri, server_name));
 80013dc:	4a0e      	ldr	r2, [pc, #56]	; (8001418 <httpc_create_request_string.constprop.0.isra.0+0x8c>)
 80013de:	4641      	mov	r1, r8
 80013e0:	4623      	mov	r3, r4
 80013e2:	4638      	mov	r0, r7
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	4a0f      	ldr	r2, [pc, #60]	; (8001424 <httpc_create_request_string.constprop.0.isra.0+0x98>)
 80013e8:	9402      	str	r4, [sp, #8]
 80013ea:	9500      	str	r5, [sp, #0]
 80013ec:	f023 fee8 	bl	80251c0 <sniprintf>
}
 80013f0:	b004      	add	sp, #16
 80013f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 80013f8:	f240 12db 	movw	r2, #475	; 0x1db
 80013fc:	490b      	ldr	r1, [pc, #44]	; (800142c <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 80013fe:	480c      	ldr	r0, [pc, #48]	; (8001430 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8001400:	f023 fd28 	bl	8024e54 <iprintf>
 8001404:	e7da      	b.n	80013bc <httpc_create_request_string.constprop.0.isra.0+0x30>
		LWIP_ASSERT("server_name != NULL", server_name != NULL);
 8001406:	4b08      	ldr	r3, [pc, #32]	; (8001428 <httpc_create_request_string.constprop.0.isra.0+0x9c>)
 8001408:	f240 12e3 	movw	r2, #483	; 0x1e3
 800140c:	4907      	ldr	r1, [pc, #28]	; (800142c <httpc_create_request_string.constprop.0.isra.0+0xa0>)
 800140e:	4808      	ldr	r0, [pc, #32]	; (8001430 <httpc_create_request_string.constprop.0.isra.0+0xa4>)
 8001410:	f023 fd20 	bl	8024e54 <iprintf>
 8001414:	e7c4      	b.n	80013a0 <httpc_create_request_string.constprop.0.isra.0+0x14>
 8001416:	bf00      	nop
 8001418:	08029afc 	.word	0x08029afc
 800141c:	08029b8c 	.word	0x08029b8c
 8001420:	08029aa0 	.word	0x08029aa0
 8001424:	08029b34 	.word	0x08029b34
 8001428:	08029a3c 	.word	0x08029a3c
 800142c:	08029a8c 	.word	0x08029a8c
 8001430:	08029a64 	.word	0x08029a64

08001434 <httpc_init_connection_common.constprop.0>:
static err_t httpc_init_connection_common(httpc_state_t **connection, const httpc_connection_t *settings,
 8001434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001438:	b085      	sub	sp, #20
 800143a:	460d      	mov	r5, r1
 800143c:	4690      	mov	r8, r2
 800143e:	461e      	mov	r6, r3
 8001440:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8001444:	9003      	str	r0, [sp, #12]
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001446:	f1ba 0f00 	cmp.w	sl, #0
 800144a:	d063      	beq.n	8001514 <httpc_init_connection_common.constprop.0+0xe0>
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 800144c:	f04f 0900 	mov.w	r9, #0
 8001450:	4653      	mov	r3, sl
 8001452:	4632      	mov	r2, r6
 8001454:	4641      	mov	r1, r8
 8001456:	46b3      	mov	fp, r6
 8001458:	e9cd 9900 	strd	r9, r9, [sp]
 800145c:	79a8      	ldrb	r0, [r5, #6]
 800145e:	f7ff ff95 	bl	800138c <httpc_create_request_string.constprop.0.isra.0>
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001462:	f64f 73fe 	movw	r3, #65534	; 0xfffe
	req_len = httpc_create_request_string(settings, server_name, server_port, uri, use_host, NULL, 0);
 8001466:	4607      	mov	r7, r0
	if ((mem_alloc_len < alloc_len) || (req_len + 1 > 0xFFFF)) {
 8001468:	4298      	cmp	r0, r3
 800146a:	d861      	bhi.n	8001530 <httpc_init_connection_common.constprop.0+0xfc>
	req = (httpc_state_t*) mem_malloc((mem_size_t) alloc_len);
 800146c:	2034      	movs	r0, #52	; 0x34
 800146e:	f018 fd3f 	bl	8019ef0 <mem_malloc>
	if (req == NULL) {
 8001472:	4604      	mov	r4, r0
 8001474:	2800      	cmp	r0, #0
 8001476:	d064      	beq.n	8001542 <httpc_init_connection_common.constprop.0+0x10e>
	memset(req, 0, sizeof(httpc_state_t));
 8001478:	4649      	mov	r1, r9
 800147a:	2234      	movs	r2, #52	; 0x34
 800147c:	f022 fd4c 	bl	8023f18 <memset>
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001480:	4648      	mov	r0, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001482:	2364      	movs	r3, #100	; 0x64
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001484:	f107 0901 	add.w	r9, r7, #1
 8001488:	f44f 7220 	mov.w	r2, #640	; 0x280
 800148c:	fa1f f189 	uxth.w	r1, r9
	req->timeout_ticks = HTTPC_POLL_TIMEOUT;
 8001490:	60e3      	str	r3, [r4, #12]
	req->request = pbuf_alloc(PBUF_RAW, (u16_t) (req_len + 1), PBUF_RAM);
 8001492:	f019 fa4b 	bl	801a92c <pbuf_alloc>
 8001496:	6120      	str	r0, [r4, #16]
	if (req->request == NULL) {
 8001498:	2800      	cmp	r0, #0
 800149a:	d043      	beq.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	if (req->request->next != NULL) {
 800149c:	6803      	ldr	r3, [r0, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d140      	bne.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	req->hdr_content_len = HTTPC_CONTENT_LEN_INVALID;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	62e3      	str	r3, [r4, #44]	; 0x2c
	req->pcb = altcp_new(settings->altcp_allocator);
 80014a8:	f01a ffb6 	bl	801c418 <tcp_new>
 80014ac:	6020      	str	r0, [r4, #0]
	if (req->pcb == NULL) {
 80014ae:	2800      	cmp	r0, #0
 80014b0:	d038      	beq.n	8001524 <httpc_init_connection_common.constprop.0+0xf0>
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014b2:	79ab      	ldrb	r3, [r5, #6]
 80014b4:	bb63      	cbnz	r3, 8001510 <httpc_init_connection_common.constprop.0+0xdc>
	altcp_arg(req->pcb, req);
 80014b6:	4621      	mov	r1, r4
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 80014b8:	8126      	strh	r6, [r4, #8]
	altcp_arg(req->pcb, req);
 80014ba:	f01a f9c9 	bl	801b850 <tcp_arg>
	altcp_recv(req->pcb, httpc_tcp_recv);
 80014be:	4922      	ldr	r1, [pc, #136]	; (8001548 <httpc_init_connection_common.constprop.0+0x114>)
 80014c0:	6820      	ldr	r0, [r4, #0]
 80014c2:	f01a f9c9 	bl	801b858 <tcp_recv>
	altcp_err(req->pcb, httpc_tcp_err);
 80014c6:	4921      	ldr	r1, [pc, #132]	; (800154c <httpc_init_connection_common.constprop.0+0x118>)
 80014c8:	6820      	ldr	r0, [r4, #0]
 80014ca:	f01a f9fd 	bl	801b8c8 <tcp_err>
	altcp_poll(req->pcb, httpc_tcp_poll, HTTPC_POLL_INTERVAL);
 80014ce:	2203      	movs	r2, #3
 80014d0:	491f      	ldr	r1, [pc, #124]	; (8001550 <httpc_init_connection_common.constprop.0+0x11c>)
 80014d2:	6820      	ldr	r0, [r4, #0]
 80014d4:	f01a fa1a 	bl	801b90c <tcp_poll>
	altcp_sent(req->pcb, httpc_tcp_sent);
 80014d8:	491e      	ldr	r1, [pc, #120]	; (8001554 <httpc_init_connection_common.constprop.0+0x120>)
 80014da:	6820      	ldr	r0, [r4, #0]
 80014dc:	f01a f9d8 	bl	801b890 <tcp_sent>
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014e0:	f8cd 9004 	str.w	r9, [sp, #4]
			(char*) req->request->payload, req_len + 1);
 80014e4:	6920      	ldr	r0, [r4, #16]
	req_len2 = httpc_create_request_string(settings, server_name, server_port, uri, use_host,
 80014e6:	4653      	mov	r3, sl
 80014e8:	465a      	mov	r2, fp
 80014ea:	4641      	mov	r1, r8
 80014ec:	6840      	ldr	r0, [r0, #4]
 80014ee:	9000      	str	r0, [sp, #0]
 80014f0:	79a8      	ldrb	r0, [r5, #6]
 80014f2:	f7ff ff4b 	bl	800138c <httpc_create_request_string.constprop.0.isra.0>
	if (req_len2 != req_len) {
 80014f6:	4287      	cmp	r7, r0
 80014f8:	d11d      	bne.n	8001536 <httpc_init_connection_common.constprop.0+0x102>
	req->recv_fn = recv_fn;
 80014fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	return ERR_OK;
 80014fc:	2000      	movs	r0, #0
	req->conn_settings = settings;
 80014fe:	e9c4 3507 	strd	r3, r5, [r4, #28]
	req->callback_arg = callback_arg;
 8001502:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001504:	6263      	str	r3, [r4, #36]	; 0x24
	*connection = req;
 8001506:	9b03      	ldr	r3, [sp, #12]
 8001508:	601c      	str	r4, [r3, #0]
}
 800150a:	b005      	add	sp, #20
 800150c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	req->remote_port = settings->use_proxy ? settings->proxy_port : server_port;
 8001510:	88ae      	ldrh	r6, [r5, #4]
 8001512:	e7d0      	b.n	80014b6 <httpc_init_connection_common.constprop.0+0x82>
	LWIP_ASSERT("uri != NULL", uri != NULL);
 8001514:	4b10      	ldr	r3, [pc, #64]	; (8001558 <httpc_init_connection_common.constprop.0+0x124>)
 8001516:	f44f 72fb 	mov.w	r2, #502	; 0x1f6
 800151a:	4910      	ldr	r1, [pc, #64]	; (800155c <httpc_init_connection_common.constprop.0+0x128>)
 800151c:	4810      	ldr	r0, [pc, #64]	; (8001560 <httpc_init_connection_common.constprop.0+0x12c>)
 800151e:	f023 fc99 	bl	8024e54 <iprintf>
 8001522:	e793      	b.n	800144c <httpc_init_connection_common.constprop.0+0x18>
		httpc_free_state(req);
 8001524:	4620      	mov	r0, r4
 8001526:	f7ff fee9 	bl	80012fc <httpc_free_state>
		return ERR_MEM;
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	e7ec      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_VAL;
 8001530:	f06f 0005 	mvn.w	r0, #5
 8001534:	e7e9      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		httpc_free_state(req);
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fee0 	bl	80012fc <httpc_free_state>
		return ERR_VAL;
 800153c:	f06f 0005 	mvn.w	r0, #5
 8001540:	e7e3      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
		return ERR_MEM;
 8001542:	f04f 30ff 	mov.w	r0, #4294967295
 8001546:	e7e0      	b.n	800150a <httpc_init_connection_common.constprop.0+0xd6>
 8001548:	080018c5 	.word	0x080018c5
 800154c:	080015f9 	.word	0x080015f9
 8001550:	08001889 	.word	0x08001889
 8001554:	080012a9 	.word	0x080012a9
 8001558:	08029a3c 	.word	0x08029a3c
 800155c:	08029bdc 	.word	0x08029bdc
 8001560:	08029a64 	.word	0x08029a64

08001564 <HttpClientPageResultCallback>:
		err_t err) {
 8001564:	b530      	push	{r4, r5, lr}
 8001566:	b083      	sub	sp, #12
 8001568:	f99d 5018 	ldrsb.w	r5, [sp, #24]
	if (httpc_result != HTTPC_RESULT_OK) {
 800156c:	b949      	cbnz	r1, 8001582 <HttpClientPageResultCallback+0x1e>
	if (err != ERR_OK) {
 800156e:	b9d5      	cbnz	r5, 80015a6 <HttpClientPageResultCallback+0x42>
 8001570:	4c18      	ldr	r4, [pc, #96]	; (80015d4 <HttpClientPageResultCallback+0x70>)
	returnpage(rxbuffer, down_total, err);
 8001572:	462a      	mov	r2, r5
 8001574:	6821      	ldr	r1, [r4, #0]
 8001576:	4818      	ldr	r0, [pc, #96]	; (80015d8 <HttpClientPageResultCallback+0x74>)
}
 8001578:	b003      	add	sp, #12
 800157a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	returnpage(rxbuffer, down_total, err);
 800157e:	f006 b983 	b.w	8007888 <returnpage>
 8001582:	2909      	cmp	r1, #9
 8001584:	460c      	mov	r4, r1
	switch (err) {
 8001586:	d823      	bhi.n	80015d0 <HttpClientPageResultCallback+0x6c>
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <HttpClientPageResultCallback+0x78>)
 800158a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 800158e:	4611      	mov	r1, r2
 8001590:	4813      	ldr	r0, [pc, #76]	; (80015e0 <HttpClientPageResultCallback+0x7c>)
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	f023 fc5e 	bl	8024e54 <iprintf>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001598:	9a01      	ldr	r2, [sp, #4]
 800159a:	4621      	mov	r1, r4
 800159c:	4811      	ldr	r0, [pc, #68]	; (80015e4 <HttpClientPageResultCallback+0x80>)
 800159e:	f023 fc59 	bl	8024e54 <iprintf>
	if (err != ERR_OK) {
 80015a2:	2d00      	cmp	r5, #0
 80015a4:	d0e4      	beq.n	8001570 <HttpClientPageResultCallback+0xc>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80015a6:	f105 0310 	add.w	r3, r5, #16
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b10      	cmp	r3, #16
 80015ae:	d905      	bls.n	80015bc <HttpClientPageResultCallback+0x58>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 80015b0:	4c08      	ldr	r4, [pc, #32]	; (80015d4 <HttpClientPageResultCallback+0x70>)
 80015b2:	480d      	ldr	r0, [pc, #52]	; (80015e8 <HttpClientPageResultCallback+0x84>)
 80015b4:	6821      	ldr	r1, [r4, #0]
 80015b6:	f023 fc4d 	bl	8024e54 <iprintf>
 80015ba:	e7da      	b.n	8001572 <HttpClientPageResultCallback+0xe>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80015bc:	4269      	negs	r1, r5
 80015be:	4c05      	ldr	r4, [pc, #20]	; (80015d4 <HttpClientPageResultCallback+0x70>)
 80015c0:	4b0a      	ldr	r3, [pc, #40]	; (80015ec <HttpClientPageResultCallback+0x88>)
 80015c2:	6822      	ldr	r2, [r4, #0]
 80015c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80015c8:	4809      	ldr	r0, [pc, #36]	; (80015f0 <HttpClientPageResultCallback+0x8c>)
 80015ca:	f023 fc43 	bl	8024e54 <iprintf>
}
 80015ce:	e7d0      	b.n	8001572 <HttpClientPageResultCallback+0xe>
		printf("HttpClientPageResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80015d0:	4a08      	ldr	r2, [pc, #32]	; (80015f4 <HttpClientPageResultCallback+0x90>)
 80015d2:	e7dc      	b.n	800158e <HttpClientPageResultCallback+0x2a>
 80015d4:	20001634 	.word	0x20001634
 80015d8:	2000163c 	.word	0x2000163c
 80015dc:	08029fe8 	.word	0x08029fe8
 80015e0:	08029c04 	.word	0x08029c04
 80015e4:	08029c18 	.word	0x08029c18
 80015e8:	08029c40 	.word	0x08029c40
 80015ec:	0802a010 	.word	0x0802a010
 80015f0:	08029c60 	.word	0x08029c60
 80015f4:	08029be8 	.word	0x08029be8

080015f8 <httpc_tcp_err>:
static void httpc_tcp_err(void *arg, err_t err) {
 80015f8:	b570      	push	{r4, r5, r6, lr}
 80015fa:	4604      	mov	r4, r0
 80015fc:	b082      	sub	sp, #8
	printf("httpc_tcp_err: %d", err);
 80015fe:	480c      	ldr	r0, [pc, #48]	; (8001630 <httpc_tcp_err+0x38>)
static void httpc_tcp_err(void *arg, err_t err) {
 8001600:	460d      	mov	r5, r1
	printf("httpc_tcp_err: %d", err);
 8001602:	f023 fc27 	bl	8024e54 <iprintf>
	if (req != NULL) {
 8001606:	b184      	cbz	r4, 800162a <httpc_tcp_err+0x32>
		req->pcb = NULL;
 8001608:	2300      	movs	r3, #0
		if (req->conn_settings != NULL) {
 800160a:	6a22      	ldr	r2, [r4, #32]
		req->pcb = NULL;
 800160c:	6023      	str	r3, [r4, #0]
		if (req->conn_settings != NULL) {
 800160e:	b132      	cbz	r2, 800161e <httpc_tcp_err+0x26>
			if (req->conn_settings->result_fn != NULL) {
 8001610:	6896      	ldr	r6, [r2, #8]
 8001612:	b126      	cbz	r6, 800161e <httpc_tcp_err+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001614:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001616:	2104      	movs	r1, #4
 8001618:	9500      	str	r5, [sp, #0]
 800161a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800161c:	47b0      	blx	r6
		return httpc_free_state(req);
 800161e:	4620      	mov	r0, r4
}
 8001620:	b002      	add	sp, #8
 8001622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001626:	f7ff be69 	b.w	80012fc <httpc_free_state>
}
 800162a:	b002      	add	sp, #8
 800162c:	bd70      	pop	{r4, r5, r6, pc}
 800162e:	bf00      	nop
 8001630:	08029c80 	.word	0x08029c80

08001634 <HttpClientFileResultCallback>:
		err_t err) {
 8001634:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001636:	b083      	sub	sp, #12
 8001638:	4616      	mov	r6, r2
 800163a:	461d      	mov	r5, r3
 800163c:	f99d 7020 	ldrsb.w	r7, [sp, #32]
	if (httpc_result != HTTPC_RESULT_OK) {
 8001640:	b971      	cbnz	r1, 8001660 <HttpClientFileResultCallback+0x2c>
	if (err != ERR_OK) {
 8001642:	2f00      	cmp	r7, #0
 8001644:	d13d      	bne.n	80016c2 <HttpClientFileResultCallback+0x8e>
	if (flash_memptr != 0) {
 8001646:	4b20      	ldr	r3, [pc, #128]	; (80016c8 <HttpClientFileResultCallback+0x94>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	b10b      	cbz	r3, 8001650 <HttpClientFileResultCallback+0x1c>
		memclose();
 800164c:	f7ff fd50 	bl	80010f0 <memclose>
	printf("HttpClientFileResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 8001650:	4632      	mov	r2, r6
 8001652:	4629      	mov	r1, r5
 8001654:	481d      	ldr	r0, [pc, #116]	; (80016cc <HttpClientFileResultCallback+0x98>)
}
 8001656:	b003      	add	sp, #12
 8001658:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	printf("HttpClientFileResultCallback: srv_res=%lu, content bytes=%lu\n", srv_res, rx_content_len);
 800165c:	f023 bbfa 	b.w	8024e54 <iprintf>
 8001660:	2909      	cmp	r1, #9
 8001662:	460c      	mov	r4, r1
	switch (err) {
 8001664:	d821      	bhi.n	80016aa <HttpClientFileResultCallback+0x76>
 8001666:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <HttpClientFileResultCallback+0x9c>)
 8001668:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
	printf("clientresult: %s\n", msg);
 800166c:	4611      	mov	r1, r2
 800166e:	4819      	ldr	r0, [pc, #100]	; (80016d4 <HttpClientFileResultCallback+0xa0>)
 8001670:	9201      	str	r2, [sp, #4]
 8001672:	f023 fbef 	bl	8024e54 <iprintf>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 8001676:	9a01      	ldr	r2, [sp, #4]
 8001678:	4621      	mov	r1, r4
 800167a:	4817      	ldr	r0, [pc, #92]	; (80016d8 <HttpClientFileResultCallback+0xa4>)
 800167c:	f023 fbea 	bl	8024e54 <iprintf>
		flash_memptr = 0;
 8001680:	4c11      	ldr	r4, [pc, #68]	; (80016c8 <HttpClientFileResultCallback+0x94>)
 8001682:	2300      	movs	r3, #0
		nxt_abort = 1;
 8001684:	2201      	movs	r2, #1
		flash_memptr = 0;
 8001686:	6023      	str	r3, [r4, #0]
		nxt_abort = 1;
 8001688:	4b14      	ldr	r3, [pc, #80]	; (80016dc <HttpClientFileResultCallback+0xa8>)
 800168a:	601a      	str	r2, [r3, #0]
	if (err != ERR_OK) {
 800168c:	2f00      	cmp	r7, #0
 800168e:	d0df      	beq.n	8001650 <HttpClientFileResultCallback+0x1c>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b10      	cmp	r3, #16
 8001698:	d909      	bls.n	80016ae <HttpClientFileResultCallback+0x7a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HttpClientFileResultCallback+0xac>)
 800169c:	4811      	ldr	r0, [pc, #68]	; (80016e4 <HttpClientFileResultCallback+0xb0>)
 800169e:	6819      	ldr	r1, [r3, #0]
 80016a0:	f023 fbd8 	bl	8024e54 <iprintf>
		flash_memptr = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	6023      	str	r3, [r4, #0]
	if (flash_memptr != 0) {
 80016a8:	e7d2      	b.n	8001650 <HttpClientFileResultCallback+0x1c>
		printf("HttpClientFileResultCallback: %u: %s\n", httpc_result, clientresult(httpc_result));
 80016aa:	4a0f      	ldr	r2, [pc, #60]	; (80016e8 <HttpClientFileResultCallback+0xb4>)
 80016ac:	e7de      	b.n	800166c <HttpClientFileResultCallback+0x38>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 80016ae:	4279      	negs	r1, r7
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <HttpClientFileResultCallback+0xb8>)
 80016b2:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <HttpClientFileResultCallback+0xac>)
 80016b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80016b8:	6812      	ldr	r2, [r2, #0]
 80016ba:	480d      	ldr	r0, [pc, #52]	; (80016f0 <HttpClientFileResultCallback+0xbc>)
 80016bc:	f023 fbca 	bl	8024e54 <iprintf>
}
 80016c0:	e7f0      	b.n	80016a4 <HttpClientFileResultCallback+0x70>
 80016c2:	4c01      	ldr	r4, [pc, #4]	; (80016c8 <HttpClientFileResultCallback+0x94>)
 80016c4:	e7e4      	b.n	8001690 <HttpClientFileResultCallback+0x5c>
 80016c6:	bf00      	nop
 80016c8:	20000820 	.word	0x20000820
 80016cc:	08029cbc 	.word	0x08029cbc
 80016d0:	08029fe8 	.word	0x08029fe8
 80016d4:	08029c04 	.word	0x08029c04
 80016d8:	08029c94 	.word	0x08029c94
 80016dc:	20003040 	.word	0x20003040
 80016e0:	20001634 	.word	0x20001634
 80016e4:	08029c40 	.word	0x08029c40
 80016e8:	08029be8 	.word	0x08029be8
 80016ec:	0802a010 	.word	0x0802a010
 80016f0:	08029c60 	.word	0x08029c60

080016f4 <httpc_dns_found>:
static void httpc_dns_found(const char *hostname, const ip_addr_t *ipaddr, void *arg) {
 80016f4:	b530      	push	{r4, r5, lr}
 80016f6:	4614      	mov	r4, r2
 80016f8:	b083      	sub	sp, #12
	if (ipaddr != NULL) {
 80016fa:	b1b1      	cbz	r1, 800172a <httpc_dns_found+0x36>
		err = httpc_get_internal_addr(req, ipaddr);
 80016fc:	4610      	mov	r0, r2
 80016fe:	f7ff fddd 	bl	80012bc <httpc_get_internal_addr>
		if (err == ERR_OK) {
 8001702:	b180      	cbz	r0, 8001726 <httpc_dns_found+0x32>
		result = HTTPC_RESULT_ERR_CONNECT;
 8001704:	2102      	movs	r1, #2
	if (req != NULL) {
 8001706:	b174      	cbz	r4, 8001726 <httpc_dns_found+0x32>
		if (req->conn_settings != NULL) {
 8001708:	6a23      	ldr	r3, [r4, #32]
 800170a:	b133      	cbz	r3, 800171a <httpc_dns_found+0x26>
			if (req->conn_settings->result_fn != NULL) {
 800170c:	689d      	ldr	r5, [r3, #8]
 800170e:	b125      	cbz	r5, 800171a <httpc_dns_found+0x26>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001710:	9000      	str	r0, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001718:	47a8      	blx	r5
		return httpc_free_state(req);
 800171a:	4620      	mov	r0, r4
}
 800171c:	b003      	add	sp, #12
 800171e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 8001722:	f7ff bdeb 	b.w	80012fc <httpc_free_state>
}
 8001726:	b003      	add	sp, #12
 8001728:	bd30      	pop	{r4, r5, pc}
		result = HTTPC_RESULT_ERR_HOSTNAME;
 800172a:	2103      	movs	r1, #3
		err = ERR_ARG;
 800172c:	f06f 000f 	mvn.w	r0, #15
 8001730:	e7e9      	b.n	8001706 <httpc_dns_found+0x12>
 8001732:	bf00      	nop

08001734 <httpc_tcp_connected>:
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001734:	6901      	ldr	r1, [r0, #16]
 8001736:	2301      	movs	r3, #1
 8001738:	894a      	ldrh	r2, [r1, #10]
 800173a:	6849      	ldr	r1, [r1, #4]
 800173c:	3a01      	subs	r2, #1
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 800173e:	b570      	push	{r4, r5, r6, lr}
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001740:	b292      	uxth	r2, r2
static err_t httpc_tcp_connected(void *arg, struct altcp_pcb *pcb, err_t err) {
 8001742:	b082      	sub	sp, #8
 8001744:	4604      	mov	r4, r0
	r = altcp_write(req->pcb, req->request->payload, req->request->len - 1, TCP_WRITE_FLAG_COPY);
 8001746:	6800      	ldr	r0, [r0, #0]
 8001748:	f01c fe5a 	bl	801e400 <tcp_write>
	if (r != ERR_OK) {
 800174c:	4605      	mov	r5, r0
 800174e:	b948      	cbnz	r0, 8001764 <httpc_tcp_connected+0x30>
	pbuf_free(req->request);
 8001750:	6920      	ldr	r0, [r4, #16]
 8001752:	f019 fabd 	bl	801acd0 <pbuf_free>
	altcp_output(req->pcb);
 8001756:	6820      	ldr	r0, [r4, #0]
	req->request = NULL;
 8001758:	6125      	str	r5, [r4, #16]
	altcp_output(req->pcb);
 800175a:	f01d fc6b 	bl	801f034 <tcp_output>
}
 800175e:	4628      	mov	r0, r5
 8001760:	b002      	add	sp, #8
 8001762:	bd70      	pop	{r4, r5, r6, pc}
		if (req->conn_settings != NULL) {
 8001764:	6a23      	ldr	r3, [r4, #32]
 8001766:	b13b      	cbz	r3, 8001778 <httpc_tcp_connected+0x44>
			if (req->conn_settings->result_fn != NULL) {
 8001768:	689e      	ldr	r6, [r3, #8]
 800176a:	b12e      	cbz	r6, 8001778 <httpc_tcp_connected+0x44>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 800176c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800176e:	2300      	movs	r3, #0
 8001770:	9000      	str	r0, [sp, #0]
 8001772:	2107      	movs	r1, #7
 8001774:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001776:	47b0      	blx	r6
		return httpc_free_state(req);
 8001778:	4620      	mov	r0, r4
}
 800177a:	b002      	add	sp, #8
 800177c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return httpc_free_state(req);
 8001780:	f7ff bdbc 	b.w	80012fc <httpc_free_state>

08001784 <HttpClientPageReceiveCallback>:

// build a webpage from pbufs
void HttpClientPageReceiveCallback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001788:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("HttpClientPageReceiveCallback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 800178a:	2a00      	cmp	r2, #0
 800178c:	d048      	beq.n	8001820 <HttpClientPageReceiveCallback+0x9c>
	if (err != ERR_OK) {
 800178e:	2b00      	cmp	r3, #0
 8001790:	d14f      	bne.n	8001832 <HttpClientPageReceiveCallback+0xae>
 8001792:	4688      	mov	r8, r1
 8001794:	4617      	mov	r7, r2
 8001796:	4614      	mov	r4, r2
 8001798:	4d33      	ldr	r5, [pc, #204]	; (8001868 <HttpClientPageReceiveCallback+0xe4>)
 800179a:	4e34      	ldr	r6, [pc, #208]	; (800186c <HttpClientPageReceiveCallback+0xe8>)
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800179c:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8001884 <HttpClientPageReceiveCallback+0x100>
		count += q->len;
		tlen = q->tot_len;
		len = q->len;

		buf = q->payload;
		for (i = 0; i < q->len; i++) {
 80017a0:	8963      	ldrh	r3, [r4, #10]
		buf = q->payload;
 80017a2:	f8d4 c004 	ldr.w	ip, [r4, #4]
		for (i = 0; i < q->len; i++) {
 80017a6:	b1bb      	cbz	r3, 80017d8 <HttpClientPageReceiveCallback+0x54>
 80017a8:	2300      	movs	r3, #0
//			putchar(buf[i]);
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017aa:	f240 211a 	movw	r1, #538	; 0x21a
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
			} else {
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017ae:	469e      	mov	lr, r3
 80017b0:	e007      	b.n	80017c2 <HttpClientPageReceiveCallback+0x3e>
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017b2:	602a      	str	r2, [r5, #0]
 80017b4:	f81c 2003 	ldrb.w	r2, [ip, r3]
		for (i = 0; i < q->len; i++) {
 80017b8:	3301      	adds	r3, #1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017ba:	5432      	strb	r2, [r6, r0]
		for (i = 0; i < q->len; i++) {
 80017bc:	8962      	ldrh	r2, [r4, #10]
 80017be:	4293      	cmp	r3, r2
 80017c0:	da0a      	bge.n	80017d8 <HttpClientPageReceiveCallback+0x54>
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017c2:	6828      	ldr	r0, [r5, #0]
 80017c4:	4288      	cmp	r0, r1
				rxbuffer[down_total++] = buf[i];		// add recvd page data into buffer
 80017c6:	f100 0201 	add.w	r2, r0, #1
			if (down_total < (sizeof(rxbuffer) - 1)) {
 80017ca:	d9f2      	bls.n	80017b2 <HttpClientPageReceiveCallback+0x2e>
		for (i = 0; i < q->len; i++) {
 80017cc:	3301      	adds	r3, #1
				rxbuffer[(sizeof(rxbuffer) - 1)] = 0;
 80017ce:	f886 e21b 	strb.w	lr, [r6, #539]	; 0x21b
		for (i = 0; i < q->len; i++) {
 80017d2:	8962      	ldrh	r2, [r4, #10]
 80017d4:	4293      	cmp	r3, r2
 80017d6:	dbf4      	blt.n	80017c2 <HttpClientPageReceiveCallback+0x3e>
			}
		}

		altcp_recved(pcb, p->tot_len);
 80017d8:	8939      	ldrh	r1, [r7, #8]
 80017da:	4640      	mov	r0, r8
 80017dc:	f019 fef8 	bl	801b5d0 <tcp_recved>
		err = pbuf_free_callback(p);
 80017e0:	4638      	mov	r0, r7
 80017e2:	f016 f8a5 	bl	8017930 <pbuf_free_callback>
		if (err != ERR_OK) {
 80017e6:	4682      	mov	sl, r0
 80017e8:	b920      	cbnz	r0, 80017f4 <HttpClientPageReceiveCallback+0x70>
	for (q = p; q != NULL; q = q->next) {
 80017ea:	6824      	ldr	r4, [r4, #0]
 80017ec:	2c00      	cmp	r4, #0
 80017ee:	d1d7      	bne.n	80017a0 <HttpClientPageReceiveCallback+0x1c>
			putchar('!');
			printlwiperr(err);
		}
//		printf("HttpClientPageReceiveCallback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
}
 80017f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			putchar('!');
 80017f4:	2021      	movs	r0, #33	; 0x21
 80017f6:	f023 fb45 	bl	8024e84 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 80017fa:	f10a 0310 	add.w	r3, sl, #16
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b10      	cmp	r3, #16
 8001802:	d904      	bls.n	800180e <HttpClientPageReceiveCallback+0x8a>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001804:	6829      	ldr	r1, [r5, #0]
 8001806:	481a      	ldr	r0, [pc, #104]	; (8001870 <HttpClientPageReceiveCallback+0xec>)
 8001808:	f023 fb24 	bl	8024e54 <iprintf>
 800180c:	e7ed      	b.n	80017ea <HttpClientPageReceiveCallback+0x66>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 800180e:	f1ca 0100 	rsb	r1, sl, #0
 8001812:	682a      	ldr	r2, [r5, #0]
 8001814:	4817      	ldr	r0, [pc, #92]	; (8001874 <HttpClientPageReceiveCallback+0xf0>)
 8001816:	f859 3021 	ldr.w	r3, [r9, r1, lsl #2]
 800181a:	f023 fb1b 	bl	8024e54 <iprintf>
}
 800181e:	e7e4      	b.n	80017ea <HttpClientPageReceiveCallback+0x66>
	LWIP_ASSERT("p != NULL", p != NULL);
 8001820:	4b15      	ldr	r3, [pc, #84]	; (8001878 <HttpClientPageReceiveCallback+0xf4>)
 8001822:	f44f 6283 	mov.w	r2, #1048	; 0x418
 8001826:	4915      	ldr	r1, [pc, #84]	; (800187c <HttpClientPageReceiveCallback+0xf8>)
 8001828:	4815      	ldr	r0, [pc, #84]	; (8001880 <HttpClientPageReceiveCallback+0xfc>)
 800182a:	f023 fb13 	bl	8024e54 <iprintf>
	if (err != ERR_OK) {
 800182e:	2c00      	cmp	r4, #0
 8001830:	d0de      	beq.n	80017f0 <HttpClientPageReceiveCallback+0x6c>
		putchar('^');
 8001832:	205e      	movs	r0, #94	; 0x5e
 8001834:	f023 fb26 	bl	8024e84 <putchar>
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001838:	f104 0310 	add.w	r3, r4, #16
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b10      	cmp	r3, #16
 8001840:	d906      	bls.n	8001850 <HttpClientPageReceiveCallback+0xcc>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HttpClientPageReceiveCallback+0xe4>)
 8001844:	480a      	ldr	r0, [pc, #40]	; (8001870 <HttpClientPageReceiveCallback+0xec>)
 8001846:	6819      	ldr	r1, [r3, #0]
}
 8001848:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP: Unknown error: total=%d\n", down_total);
 800184c:	f023 bb02 	b.w	8024e54 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001850:	4261      	negs	r1, r4
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HttpClientPageReceiveCallback+0x100>)
 8001854:	4a04      	ldr	r2, [pc, #16]	; (8001868 <HttpClientPageReceiveCallback+0xe4>)
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <HttpClientPageReceiveCallback+0xf0>)
 8001858:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800185c:	6812      	ldr	r2, [r2, #0]
}
 800185e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001862:	f023 baf7 	b.w	8024e54 <iprintf>
 8001866:	bf00      	nop
 8001868:	20001634 	.word	0x20001634
 800186c:	2000163c 	.word	0x2000163c
 8001870:	08029c40 	.word	0x08029c40
 8001874:	08029c60 	.word	0x08029c60
 8001878:	08029a3c 	.word	0x08029a3c
 800187c:	08044d9c 	.word	0x08044d9c
 8001880:	08029a64 	.word	0x08029a64
 8001884:	0802a010 	.word	0x0802a010

08001888 <httpc_tcp_poll>:
	if (req != NULL) {
 8001888:	b1d0      	cbz	r0, 80018c0 <httpc_tcp_poll+0x38>
		if (req->timeout_ticks) {
 800188a:	68c3      	ldr	r3, [r0, #12]
static err_t httpc_tcp_poll(void *arg, struct altcp_pcb *pcb) {
 800188c:	b530      	push	{r4, r5, lr}
 800188e:	4604      	mov	r4, r0
 8001890:	b083      	sub	sp, #12
		if (req->timeout_ticks) {
 8001892:	b12b      	cbz	r3, 80018a0 <httpc_tcp_poll+0x18>
			req->timeout_ticks--;
 8001894:	3b01      	subs	r3, #1
 8001896:	60c3      	str	r3, [r0, #12]
		if (!req->timeout_ticks) {
 8001898:	b113      	cbz	r3, 80018a0 <httpc_tcp_poll+0x18>
}
 800189a:	2000      	movs	r0, #0
 800189c:	b003      	add	sp, #12
 800189e:	bd30      	pop	{r4, r5, pc}
		if (req->conn_settings != NULL) {
 80018a0:	6a23      	ldr	r3, [r4, #32]
 80018a2:	b13b      	cbz	r3, 80018b4 <httpc_tcp_poll+0x2c>
			if (req->conn_settings->result_fn != NULL) {
 80018a4:	689d      	ldr	r5, [r3, #8]
 80018a6:	b12d      	cbz	r5, 80018b4 <httpc_tcp_poll+0x2c>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 80018a8:	2300      	movs	r3, #0
 80018aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018ac:	2105      	movs	r1, #5
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80018b2:	47a8      	blx	r5
		return httpc_free_state(req);
 80018b4:	4620      	mov	r0, r4
}
 80018b6:	b003      	add	sp, #12
 80018b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return httpc_free_state(req);
 80018bc:	f7ff bd1e 	b.w	80012fc <httpc_free_state>
}
 80018c0:	2000      	movs	r0, #0
 80018c2:	4770      	bx	lr

080018c4 <httpc_tcp_recv>:
static err_t httpc_tcp_recv(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t r) {
 80018c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018c8:	4604      	mov	r4, r0
 80018ca:	b089      	sub	sp, #36	; 0x24
	if (p == NULL) {
 80018cc:	4615      	mov	r5, r2
 80018ce:	2a00      	cmp	r2, #0
 80018d0:	f000 80e2 	beq.w	8001a98 <httpc_tcp_recv+0x1d4>
	if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 80018d4:	f890 a030 	ldrb.w	sl, [r0, #48]	; 0x30
 80018d8:	460e      	mov	r6, r1
 80018da:	461f      	mov	r7, r3
 80018dc:	f1ba 0f02 	cmp.w	sl, #2
 80018e0:	f000 80c8 	beq.w	8001a74 <httpc_tcp_recv+0x1b0>
		if (req->rx_hdrs == NULL) {
 80018e4:	6940      	ldr	r0, [r0, #20]
 80018e6:	b190      	cbz	r0, 800190e <httpc_tcp_recv+0x4a>
			pbuf_cat(req->rx_hdrs, p);
 80018e8:	4611      	mov	r1, r2
 80018ea:	f019 fa23 	bl	801ad34 <pbuf_cat>
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 80018ee:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 80018f2:	f1ba 0f00 	cmp.w	sl, #0
 80018f6:	d00e      	beq.n	8001916 <httpc_tcp_recv+0x52>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 80018f8:	f1ba 0f01 	cmp.w	sl, #1
 80018fc:	d06e      	beq.n	80019dc <httpc_tcp_recv+0x118>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 80018fe:	f1ba 0f02 	cmp.w	sl, #2
 8001902:	f000 80b7 	beq.w	8001a74 <httpc_tcp_recv+0x1b0>
}
 8001906:	2000      	movs	r0, #0
 8001908:	b009      	add	sp, #36	; 0x24
 800190a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			req->rx_hdrs = p;
 800190e:	6162      	str	r2, [r4, #20]
		if (req->parse_state == HTTPC_PARSE_WAIT_FIRST_LINE) {
 8001910:	f1ba 0f00 	cmp.w	sl, #0
 8001914:	d1f0      	bne.n	80018f8 <httpc_tcp_recv+0x34>
			err_t err = http_parse_response_status(req->rx_hdrs, &req->rx_http_version, &req->rx_status,
 8001916:	f8d4 8014 	ldr.w	r8, [r4, #20]
	if (end1 != 0xFFFF) {
 800191a:	f64f 7bff 	movw	fp, #65535	; 0xffff
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 800191e:	4653      	mov	r3, sl
 8001920:	2202      	movs	r2, #2
 8001922:	4989      	ldr	r1, [pc, #548]	; (8001b48 <httpc_tcp_recv+0x284>)
 8001924:	4640      	mov	r0, r8
 8001926:	f019 fbf3 	bl	801b110 <pbuf_memfind>
	if (end1 != 0xFFFF) {
 800192a:	4558      	cmp	r0, fp
	u16_t end1 = pbuf_memfind(p, "\r\n", 2, 0);
 800192c:	9003      	str	r0, [sp, #12]
	if (end1 != 0xFFFF) {
 800192e:	f000 8105 	beq.w	8001b3c <httpc_tcp_recv+0x278>
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001932:	4653      	mov	r3, sl
 8001934:	2201      	movs	r2, #1
 8001936:	4985      	ldr	r1, [pc, #532]	; (8001b4c <httpc_tcp_recv+0x288>)
 8001938:	4640      	mov	r0, r8
 800193a:	f019 fbe9 	bl	801b110 <pbuf_memfind>
		if (space1 != 0xFFFF) {
 800193e:	4558      	cmp	r0, fp
		space1 = pbuf_memfind(p, " ", 1, 0);
 8001940:	4681      	mov	r9, r0
		if (space1 != 0xFFFF) {
 8001942:	f000 80fb 	beq.w	8001b3c <httpc_tcp_recv+0x278>
			if ((pbuf_memcmp(p, 0, "HTTP/", 5) == 0) && (pbuf_get_at(p, 6) == '.')) {
 8001946:	4651      	mov	r1, sl
 8001948:	2305      	movs	r3, #5
 800194a:	4a81      	ldr	r2, [pc, #516]	; (8001b50 <httpc_tcp_recv+0x28c>)
 800194c:	4640      	mov	r0, r8
 800194e:	f019 fba7 	bl	801b0a0 <pbuf_memcmp>
 8001952:	2800      	cmp	r0, #0
 8001954:	f040 80f2 	bne.w	8001b3c <httpc_tcp_recv+0x278>
 8001958:	2106      	movs	r1, #6
 800195a:	4640      	mov	r0, r8
 800195c:	f019 fb74 	bl	801b048 <pbuf_get_at>
 8001960:	282e      	cmp	r0, #46	; 0x2e
 8001962:	f040 80eb 	bne.w	8001b3c <httpc_tcp_recv+0x278>
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001966:	2105      	movs	r1, #5
 8001968:	4640      	mov	r0, r8
 800196a:	f019 fb6d 	bl	801b048 <pbuf_get_at>
 800196e:	3830      	subs	r0, #48	; 0x30
				version |= pbuf_get_at(p, 7) - '0';
 8001970:	2107      	movs	r1, #7
				u16_t version = pbuf_get_at(p, 5) - '0';
 8001972:	fa1f fa80 	uxth.w	sl, r0
				version |= pbuf_get_at(p, 7) - '0';
 8001976:	4640      	mov	r0, r8
 8001978:	f019 fb66 	bl	801b048 <pbuf_get_at>
 800197c:	3830      	subs	r0, #48	; 0x30
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800197e:	f109 0301 	add.w	r3, r9, #1
 8001982:	2201      	movs	r2, #1
				version |= pbuf_get_at(p, 7) - '0';
 8001984:	ea40 200a 	orr.w	r0, r0, sl, lsl #8
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 8001988:	4970      	ldr	r1, [pc, #448]	; (8001b4c <httpc_tcp_recv+0x288>)
 800198a:	b29b      	uxth	r3, r3
				*http_version = version;
 800198c:	8320      	strh	r0, [r4, #24]
				space2 = pbuf_memfind(p, " ", 1, space1 + 1);
 800198e:	4640      	mov	r0, r8
 8001990:	9302      	str	r3, [sp, #8]
 8001992:	f019 fbbd 	bl	801b110 <pbuf_memfind>
				if (space2 != 0xFFFF) {
 8001996:	4558      	cmp	r0, fp
 8001998:	9b02      	ldr	r3, [sp, #8]
 800199a:	f000 80a2 	beq.w	8001ae2 <httpc_tcp_recv+0x21e>
					status_num_len = space2 - space1 - 1;
 800199e:	eba0 0909 	sub.w	r9, r0, r9
 80019a2:	f109 39ff 	add.w	r9, r9, #4294967295
				memset(status_num, 0, sizeof(status_num));
 80019a6:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019a8:	4640      	mov	r0, r8
 80019aa:	a904      	add	r1, sp, #16
				memset(status_num, 0, sizeof(status_num));
 80019ac:	f8ad 2018 	strh.w	r2, [sp, #24]
 80019b0:	e9cd 2204 	strd	r2, r2, [sp, #16]
				if (pbuf_copy_partial(p, status_num, (u16_t) status_num_len, space1 + 1) == status_num_len) {
 80019b4:	fa1f f289 	uxth.w	r2, r9
 80019b8:	f019 fa2e 	bl	801ae18 <pbuf_copy_partial>
 80019bc:	4581      	cmp	r9, r0
 80019be:	f040 80bd 	bne.w	8001b3c <httpc_tcp_recv+0x278>
					int status = atoi(status_num);
 80019c2:	a804      	add	r0, sp, #16
 80019c4:	f022 f82a 	bl	8023a1c <atoi>
					if ((status > 0) && (status <= 0xFFFF)) {
 80019c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80019cc:	1e42      	subs	r2, r0, #1
 80019ce:	429a      	cmp	r2, r3
 80019d0:	f200 80b4 	bhi.w	8001b3c <httpc_tcp_recv+0x278>
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019d4:	2301      	movs	r3, #1
						*http_status = (u16_t) status;
 80019d6:	8360      	strh	r0, [r4, #26]
				req->parse_state = HTTPC_PARSE_WAIT_HEADERS;
 80019d8:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
			err_t err = http_wait_headers(req->rx_hdrs, &req->hdr_content_len, &total_header_len);
 80019dc:	f8d4 9014 	ldr.w	r9, [r4, #20]
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019e0:	2300      	movs	r3, #0
 80019e2:	2204      	movs	r2, #4
 80019e4:	495b      	ldr	r1, [pc, #364]	; (8001b54 <httpc_tcp_recv+0x290>)
 80019e6:	4648      	mov	r0, r9
 80019e8:	f019 fb92 	bl	801b110 <pbuf_memfind>
	if (end1 < (0xFFFF - 2)) {
 80019ec:	f64f 73fc 	movw	r3, #65532	; 0xfffc
	u16_t end1 = pbuf_memfind(p, "\r\n\r\n", 4, 0);
 80019f0:	4680      	mov	r8, r0
	if (end1 < (0xFFFF - 2)) {
 80019f2:	4298      	cmp	r0, r3
 80019f4:	f200 80a5 	bhi.w	8001b42 <httpc_tcp_recv+0x27e>
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 80019f8:	f04f 33ff 	mov.w	r3, #4294967295
		if (content_len_hdr != 0xFFFF) {
 80019fc:	f64f 7aff 	movw	sl, #65535	; 0xffff
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a00:	2210      	movs	r2, #16
 8001a02:	4955      	ldr	r1, [pc, #340]	; (8001b58 <httpc_tcp_recv+0x294>)
		*content_length = HTTPC_CONTENT_LEN_INVALID;
 8001a04:	62e3      	str	r3, [r4, #44]	; 0x2c
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a06:	4648      	mov	r0, r9
 8001a08:	2300      	movs	r3, #0
 8001a0a:	f019 fb81 	bl	801b110 <pbuf_memfind>
		if (content_len_hdr != 0xFFFF) {
 8001a0e:	4550      	cmp	r0, sl
		content_len_hdr = pbuf_memfind(p, "Content-Length: ", 16, 0);
 8001a10:	4605      	mov	r5, r0
		if (content_len_hdr != 0xFFFF) {
 8001a12:	d16e      	bne.n	8001af2 <httpc_tcp_recv+0x22e>
		*total_header_len = end1 + 4;
 8001a14:	f108 0504 	add.w	r5, r8, #4
				altcp_recved(pcb, total_header_len);
 8001a18:	4630      	mov	r0, r6
		*total_header_len = end1 + 4;
 8001a1a:	b2ad      	uxth	r5, r5
				altcp_recved(pcb, total_header_len);
 8001a1c:	4629      	mov	r1, r5
 8001a1e:	f019 fdd7 	bl	801b5d0 <tcp_recved>
				if (req->conn_settings) {
 8001a22:	6a23      	ldr	r3, [r4, #32]
 8001a24:	b1cb      	cbz	r3, 8001a5a <httpc_tcp_recv+0x196>
					if (req->conn_settings->headers_done_fn) {
 8001a26:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8001a2a:	f1b8 0f00 	cmp.w	r8, #0
 8001a2e:	d014      	beq.n	8001a5a <httpc_tcp_recv+0x196>
						err = req->conn_settings->headers_done_fn(req, req->callback_arg, req->rx_hdrs,
 8001a30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a32:	4620      	mov	r0, r4
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	462b      	mov	r3, r5
 8001a38:	6962      	ldr	r2, [r4, #20]
 8001a3a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8001a3c:	47c0      	blx	r8
						if (err != ERR_OK) {
 8001a3e:	b160      	cbz	r0, 8001a5a <httpc_tcp_recv+0x196>
		if (req->conn_settings != NULL) {
 8001a40:	6a23      	ldr	r3, [r4, #32]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d037      	beq.n	8001ab6 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001a46:	689d      	ldr	r5, [r3, #8]
 8001a48:	2d00      	cmp	r5, #0
 8001a4a:	d034      	beq.n	8001ab6 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001a4c:	8b63      	ldrh	r3, [r4, #26]
 8001a4e:	2108      	movs	r1, #8
 8001a50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a52:	9000      	str	r0, [sp, #0]
 8001a54:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a56:	47a8      	blx	r5
 8001a58:	e02d      	b.n	8001ab6 <httpc_tcp_recv+0x1f2>
				q = pbuf_free_header(req->rx_hdrs, total_header_len);
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	6960      	ldr	r0, [r4, #20]
 8001a5e:	f019 f91b 	bl	801ac98 <pbuf_free_header>
				req->rx_hdrs = NULL;
 8001a62:	2300      	movs	r3, #0
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a64:	4605      	mov	r5, r0
				req->rx_hdrs = NULL;
 8001a66:	6163      	str	r3, [r4, #20]
				req->parse_state = HTTPC_PARSE_RX_DATA;
 8001a68:	2302      	movs	r3, #2
 8001a6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001a6e:	2800      	cmp	r0, #0
 8001a70:	f43f af49 	beq.w	8001906 <httpc_tcp_recv+0x42>
		req->rx_content_len += p->tot_len;
 8001a74:	8929      	ldrh	r1, [r5, #8]
 8001a76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a78:	f8d4 e01c 	ldr.w	lr, [r4, #28]
		req->rx_content_len += p->tot_len;
 8001a7c:	440b      	add	r3, r1
 8001a7e:	62a3      	str	r3, [r4, #40]	; 0x28
		if (req->recv_fn != NULL) {
 8001a80:	f1be 0f00 	cmp.w	lr, #0
 8001a84:	d026      	beq.n	8001ad4 <httpc_tcp_recv+0x210>
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a86:	463b      	mov	r3, r7
 8001a88:	462a      	mov	r2, r5
 8001a8a:	4631      	mov	r1, r6
 8001a8c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001a8e:	46f4      	mov	ip, lr
}
 8001a90:	b009      	add	sp, #36	; 0x24
 8001a92:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			return req->recv_fn(req->callback_arg, pcb, p, r);
 8001a96:	4760      	bx	ip
		if (req->parse_state != HTTPC_PARSE_RX_DATA) {
 8001a98:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d010      	beq.n	8001ac2 <httpc_tcp_recv+0x1fe>
			result = HTTPC_RESULT_ERR_CLOSED;
 8001aa0:	2104      	movs	r1, #4
		if (req->conn_settings != NULL) {
 8001aa2:	6a23      	ldr	r3, [r4, #32]
 8001aa4:	b13b      	cbz	r3, 8001ab6 <httpc_tcp_recv+0x1f2>
			if (req->conn_settings->result_fn != NULL) {
 8001aa6:	689d      	ldr	r5, [r3, #8]
 8001aa8:	b12d      	cbz	r5, 8001ab6 <httpc_tcp_recv+0x1f2>
				req->conn_settings->result_fn(req->callback_arg, result, req->rx_content_len, server_response, err);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	8b63      	ldrh	r3, [r4, #26]
 8001aae:	9200      	str	r2, [sp, #0]
 8001ab0:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001ab4:	47a8      	blx	r5
		return httpc_free_state(req);
 8001ab6:	4620      	mov	r0, r4
}
 8001ab8:	b009      	add	sp, #36	; 0x24
 8001aba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return httpc_free_state(req);
 8001abe:	f7ff bc1d 	b.w	80012fc <httpc_free_state>
		} else if ((req->hdr_content_len != HTTPC_CONTENT_LEN_INVALID)
 8001ac2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8001ac4:	1c4b      	adds	r3, r1, #1
 8001ac6:	d012      	beq.n	8001aee <httpc_tcp_recv+0x22a>
				&& (req->hdr_content_len != req->rx_content_len)) {
 8001ac8:	6a85      	ldr	r5, [r0, #40]	; 0x28
			result = HTTPC_RESULT_ERR_CONTENT_LEN;
 8001aca:	42a9      	cmp	r1, r5
 8001acc:	bf14      	ite	ne
 8001ace:	2109      	movne	r1, #9
 8001ad0:	2100      	moveq	r1, #0
 8001ad2:	e7e6      	b.n	8001aa2 <httpc_tcp_recv+0x1de>
			altcp_recved(pcb, p->tot_len);
 8001ad4:	4630      	mov	r0, r6
 8001ad6:	f019 fd7b 	bl	801b5d0 <tcp_recved>
			pbuf_free(p);
 8001ada:	4628      	mov	r0, r5
 8001adc:	f019 f8f8 	bl	801acd0 <pbuf_free>
 8001ae0:	e711      	b.n	8001906 <httpc_tcp_recv+0x42>
					status_num_len = end1 - space1 - 1;
 8001ae2:	9a03      	ldr	r2, [sp, #12]
 8001ae4:	eba2 0909 	sub.w	r9, r2, r9
 8001ae8:	f109 39ff 	add.w	r9, r9, #4294967295
 8001aec:	e75b      	b.n	80019a6 <httpc_tcp_recv+0xe2>
			result = HTTPC_RESULT_OK;
 8001aee:	4611      	mov	r1, r2
 8001af0:	e7d7      	b.n	8001aa2 <httpc_tcp_recv+0x1de>
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001af2:	4603      	mov	r3, r0
 8001af4:	2202      	movs	r2, #2
 8001af6:	4914      	ldr	r1, [pc, #80]	; (8001b48 <httpc_tcp_recv+0x284>)
 8001af8:	4648      	mov	r0, r9
 8001afa:	f019 fb09 	bl	801b110 <pbuf_memfind>
			if (content_len_line_end != 0xFFFF) {
 8001afe:	4550      	cmp	r0, sl
			u16_t content_len_line_end = pbuf_memfind(p, "\r\n", 2, content_len_hdr);
 8001b00:	4603      	mov	r3, r0
			if (content_len_line_end != 0xFFFF) {
 8001b02:	d087      	beq.n	8001a14 <httpc_tcp_recv+0x150>
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b04:	f64f 72f0 	movw	r2, #65520	; 0xfff0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b08:	4648      	mov	r0, r9
 8001b0a:	a904      	add	r1, sp, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b0c:	1b52      	subs	r2, r2, r5
 8001b0e:	441a      	add	r2, r3
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b10:	f105 0310 	add.w	r3, r5, #16
				u16_t content_len_num_len = (u16_t) (content_len_line_end - content_len_hdr - 16);
 8001b14:	b295      	uxth	r5, r2
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b16:	2200      	movs	r2, #0
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b18:	b29b      	uxth	r3, r3
				memset(content_len_num, 0, sizeof(content_len_num));
 8001b1a:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001b1e:	e9cd 2206 	strd	r2, r2, [sp, #24]
				if (pbuf_copy_partial(p, content_len_num, content_len_num_len, content_len_hdr + 16)
 8001b22:	462a      	mov	r2, r5
 8001b24:	f019 f978 	bl	801ae18 <pbuf_copy_partial>
 8001b28:	4285      	cmp	r5, r0
 8001b2a:	f47f af73 	bne.w	8001a14 <httpc_tcp_recv+0x150>
					int len = atoi(content_len_num);
 8001b2e:	a804      	add	r0, sp, #16
 8001b30:	f021 ff74 	bl	8023a1c <atoi>
					if ((len >= 0) && ((u32_t) len < HTTPC_CONTENT_LEN_INVALID)) {
 8001b34:	2800      	cmp	r0, #0
						*content_length = (u32_t) len;
 8001b36:	bfa8      	it	ge
 8001b38:	62e0      	strge	r0, [r4, #44]	; 0x2c
			if (err == ERR_OK) {
 8001b3a:	e76b      	b.n	8001a14 <httpc_tcp_recv+0x150>
		if (req->parse_state == HTTPC_PARSE_WAIT_HEADERS) {
 8001b3c:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b40:	e6da      	b.n	80018f8 <httpc_tcp_recv+0x34>
	if ((p != NULL) && (req->parse_state == HTTPC_PARSE_RX_DATA)) {
 8001b42:	f894 a030 	ldrb.w	sl, [r4, #48]	; 0x30
 8001b46:	e6da      	b.n	80018fe <httpc_tcp_recv+0x3a>
 8001b48:	08029b88 	.word	0x08029b88
 8001b4c:	0802bee8 	.word	0x0802bee8
 8001b50:	08029cfc 	.word	0x08029cfc
 8001b54:	08029d04 	.word	0x08029d04
 8001b58:	08029d0c 	.word	0x08029d0c

08001b5c <httpc_get_file_dns>:
		altcp_recv_fn recv_fn, void *callback_arg, httpc_state_t **connection) {
 8001b5c:	b570      	push	{r4, r5, r6, lr}
 8001b5e:	b088      	sub	sp, #32
 8001b60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001b62:	2d00      	cmp	r5, #0
 8001b64:	bf18      	it	ne
 8001b66:	2a00      	cmpne	r2, #0
 8001b68:	d044      	beq.n	8001bf4 <httpc_get_file_dns+0x98>
 8001b6a:	4604      	mov	r4, r0
 8001b6c:	2800      	cmp	r0, #0
 8001b6e:	d041      	beq.n	8001bf4 <httpc_get_file_dns+0x98>
	err = httpc_init_connection(&req, settings, server_name, port, uri, recv_fn, callback_arg);
 8001b70:	4610      	mov	r0, r2
 8001b72:	461e      	mov	r6, r3
	return httpc_init_connection_common(connection, settings, server_name, server_port, uri, recv_fn, callback_arg, 1);
 8001b74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001b76:	460b      	mov	r3, r1
 8001b78:	9000      	str	r0, [sp, #0]
 8001b7a:	4631      	mov	r1, r6
 8001b7c:	a807      	add	r0, sp, #28
 8001b7e:	e9cd 5201 	strd	r5, r2, [sp, #4]
 8001b82:	4622      	mov	r2, r4
 8001b84:	f7ff fc56 	bl	8001434 <httpc_init_connection_common.constprop.0>
	if (err != ERR_OK) {
 8001b88:	4605      	mov	r5, r0
 8001b8a:	b998      	cbnz	r0, 8001bb4 <httpc_get_file_dns+0x58>
	if (settings->use_proxy) {
 8001b8c:	79b3      	ldrb	r3, [r6, #6]
 8001b8e:	b9a3      	cbnz	r3, 8001bba <httpc_get_file_dns+0x5e>
		err = httpc_get_internal_dns(req, server_name);
 8001b90:	9e07      	ldr	r6, [sp, #28]
	LWIP_ASSERT("req != NULL", req != NULL);
 8001b92:	b33e      	cbz	r6, 8001be4 <httpc_get_file_dns+0x88>
	err = dns_gethostbyname(server_name, &req->remote_addr, httpc_dns_found, req);
 8001b94:	1d31      	adds	r1, r6, #4
 8001b96:	4633      	mov	r3, r6
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4a1b      	ldr	r2, [pc, #108]	; (8001c08 <httpc_get_file_dns+0xac>)
 8001b9c:	9105      	str	r1, [sp, #20]
 8001b9e:	f017 fd6f 	bl	8019680 <dns_gethostbyname>
	if (err == ERR_OK) {
 8001ba2:	9905      	ldr	r1, [sp, #20]
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b1c0      	cbz	r0, 8001bda <httpc_get_file_dns+0x7e>
	} else if (err == ERR_INPROGRESS) {
 8001ba8:	1d42      	adds	r2, r0, #5
 8001baa:	d00d      	beq.n	8001bc8 <httpc_get_file_dns+0x6c>
		httpc_free_state(req);
 8001bac:	9807      	ldr	r0, [sp, #28]
		return err;
 8001bae:	461d      	mov	r5, r3
		httpc_free_state(req);
 8001bb0:	f7ff fba4 	bl	80012fc <httpc_free_state>
}
 8001bb4:	4628      	mov	r0, r5
 8001bb6:	b008      	add	sp, #32
 8001bb8:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &settings->proxy_addr);
 8001bba:	4631      	mov	r1, r6
 8001bbc:	9807      	ldr	r0, [sp, #28]
 8001bbe:	f7ff fb7d 	bl	80012bc <httpc_get_internal_addr>
 8001bc2:	4603      	mov	r3, r0
	if (err != ERR_OK) {
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1f1      	bne.n	8001bac <httpc_get_file_dns+0x50>
	if (connection != NULL) {
 8001bc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f2      	beq.n	8001bb4 <httpc_get_file_dns+0x58>
		*connection = req;
 8001bce:	9b07      	ldr	r3, [sp, #28]
}
 8001bd0:	4628      	mov	r0, r5
		*connection = req;
 8001bd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bd4:	6013      	str	r3, [r2, #0]
}
 8001bd6:	b008      	add	sp, #32
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
		err = httpc_get_internal_addr(req, &req->remote_addr);
 8001bda:	4630      	mov	r0, r6
 8001bdc:	f7ff fb6e 	bl	80012bc <httpc_get_internal_addr>
 8001be0:	4603      	mov	r3, r0
 8001be2:	e7ef      	b.n	8001bc4 <httpc_get_file_dns+0x68>
	LWIP_ASSERT("req != NULL", req != NULL);
 8001be4:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <httpc_get_file_dns+0xb0>)
 8001be6:	f240 12c7 	movw	r2, #455	; 0x1c7
 8001bea:	4909      	ldr	r1, [pc, #36]	; (8001c10 <httpc_get_file_dns+0xb4>)
 8001bec:	4809      	ldr	r0, [pc, #36]	; (8001c14 <httpc_get_file_dns+0xb8>)
 8001bee:	f023 f931 	bl	8024e54 <iprintf>
 8001bf2:	e7cf      	b.n	8001b94 <httpc_get_file_dns+0x38>
	LWIP_ERROR("invalid parameters", (server_name != NULL) && (uri != NULL) && (recv_fn != NULL), return ERR_ARG;);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <httpc_get_file_dns+0xb0>)
 8001bf6:	f240 2292 	movw	r2, #658	; 0x292
 8001bfa:	4907      	ldr	r1, [pc, #28]	; (8001c18 <httpc_get_file_dns+0xbc>)
 8001bfc:	f06f 050f 	mvn.w	r5, #15
 8001c00:	4804      	ldr	r0, [pc, #16]	; (8001c14 <httpc_get_file_dns+0xb8>)
 8001c02:	f023 f927 	bl	8024e54 <iprintf>
 8001c06:	e7d5      	b.n	8001bb4 <httpc_get_file_dns+0x58>
 8001c08:	080016f5 	.word	0x080016f5
 8001c0c:	08029a3c 	.word	0x08029a3c
 8001c10:	08029a58 	.word	0x08029a58
 8001c14:	08029a64 	.word	0x08029a64
 8001c18:	08029d20 	.word	0x08029d20

08001c1c <printlwiperr>:
	if ((err > 0) || (-err >= (err_t) LWIP_ARRAYSIZE(lerr_strerr))) {
 8001c1c:	f100 0310 	add.w	r3, r0, #16
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	2b10      	cmp	r3, #16
 8001c24:	d904      	bls.n	8001c30 <printlwiperr+0x14>
		printf("LWIP: Unknown error: total=%d\n", down_total);
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <printlwiperr+0x28>)
 8001c28:	4807      	ldr	r0, [pc, #28]	; (8001c48 <printlwiperr+0x2c>)
 8001c2a:	6819      	ldr	r1, [r3, #0]
 8001c2c:	f023 b912 	b.w	8024e54 <iprintf>
		printf("LWIP error %d: total=%d, %s\n", -err, down_total, lerr_strerr[-err]);
 8001c30:	4241      	negs	r1, r0
 8001c32:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <printlwiperr+0x30>)
 8001c34:	4a03      	ldr	r2, [pc, #12]	; (8001c44 <printlwiperr+0x28>)
 8001c36:	4806      	ldr	r0, [pc, #24]	; (8001c50 <printlwiperr+0x34>)
 8001c38:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	f023 b909 	b.w	8024e54 <iprintf>
 8001c42:	bf00      	nop
 8001c44:	20001634 	.word	0x20001634
 8001c48:	08029c40 	.word	0x08029c40
 8001c4c:	0802a010 	.word	0x0802a010
 8001c50:	08029c60 	.word	0x08029c60

08001c54 <http_dlclient>:

// download a file
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	err_t error;

	connection1 = &conn1;	// point to static
	settings1 = &set1;		// point to static
	memset(settings1, 0, sizeof(set1));
 8001c58:	2400      	movs	r4, #0
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c5a:	b086      	sub	sp, #24
	connection1 = &conn1;	// point to static
 8001c5c:	4f23      	ldr	r7, [pc, #140]	; (8001cec <http_dlclient+0x98>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c5e:	4688      	mov	r8, r1
	settings1 = &set1;		// point to static
 8001c60:	4d23      	ldr	r5, [pc, #140]	; (8001cf0 <http_dlclient+0x9c>)
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c62:	4606      	mov	r6, r0
	connection1 = &conn1;	// point to static
 8001c64:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8001d14 <http_dlclient+0xc0>
	memset(connection1, 0, sizeof(conn1));
 8001c68:	4621      	mov	r1, r4
	settings1 = &set1;		// point to static
 8001c6a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8001d18 <http_dlclient+0xc4>
	memset(connection1, 0, sizeof(conn1));
 8001c6e:	4638      	mov	r0, r7
void http_dlclient(char *filename, char *host, void *flash_memptr) {
 8001c70:	9205      	str	r2, [sp, #20]
	memset(connection1, 0, sizeof(conn1));
 8001c72:	2234      	movs	r2, #52	; 0x34
	connection1 = &conn1;	// point to static
 8001c74:	f8c9 7000 	str.w	r7, [r9]
	settings1 = &set1;		// point to static
 8001c78:	f8ca 5000 	str.w	r5, [sl]
	memset(settings1, 0, sizeof(set1));
 8001c7c:	e9c5 4400 	strd	r4, r4, [r5]
	memset(connection1, 0, sizeof(conn1));
 8001c80:	f022 f94a 	bl	8023f18 <memset>

	settings1->use_proxy = 0;
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c84:	4a1b      	ldr	r2, [pc, #108]	; (8001cf4 <http_dlclient+0xa0>)
	settings1->result_fn = HttpClientFileResultCallback;

	connection1->timeout_ticks = 1;

	strcpy(domain_name, host);
 8001c86:	4641      	mov	r1, r8
	settings1->result_fn = HttpClientFileResultCallback;
 8001c88:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001d1c <http_dlclient+0xc8>
	settings1->headers_done_fn = RecvHttpHeaderCallback;
 8001c8c:	60ea      	str	r2, [r5, #12]
	connection1->timeout_ticks = 1;
 8001c8e:	2201      	movs	r2, #1
	strcpy(domain_name, host);
 8001c90:	4819      	ldr	r0, [pc, #100]	; (8001cf8 <http_dlclient+0xa4>)
	connection1->timeout_ticks = 1;
 8001c92:	60fa      	str	r2, [r7, #12]
	settings1->result_fn = HttpClientFileResultCallback;
 8001c94:	f8c5 8008 	str.w	r8, [r5, #8]
	strcpy(domain_name, host);
 8001c98:	f023 fb6d 	bl	8025376 <strcpy>
	strcpy(rxbuffer, filename);
 8001c9c:	4631      	mov	r1, r6
 8001c9e:	4817      	ldr	r0, [pc, #92]	; (8001cfc <http_dlclient+0xa8>)
 8001ca0:	f023 fb69 	bl	8025376 <strcpy>

	printf("http_dlclient: domain=%s, rxbuffer=%s, flash_add=0x%08x\n", domain_name, rxbuffer, flash_memptr);
 8001ca4:	9b05      	ldr	r3, [sp, #20]
 8001ca6:	4a15      	ldr	r2, [pc, #84]	; (8001cfc <http_dlclient+0xa8>)
 8001ca8:	4913      	ldr	r1, [pc, #76]	; (8001cf8 <http_dlclient+0xa4>)
 8001caa:	4815      	ldr	r0, [pc, #84]	; (8001d00 <http_dlclient+0xac>)
 8001cac:	f023 f8d2 	bl	8024e54 <iprintf>

	down_total = 0;
 8001cb0:	4914      	ldr	r1, [pc, #80]	; (8001d04 <http_dlclient+0xb0>)
	expectedapage = 0;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb2:	4a15      	ldr	r2, [pc, #84]	; (8001d08 <http_dlclient+0xb4>)
	expectedapage = 0;
 8001cb4:	4815      	ldr	r0, [pc, #84]	; (8001d0c <http_dlclient+0xb8>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8001cba:	f8cd 8004 	str.w	r8, [sp, #4]
 8001cbe:	f8da 3000 	ldr.w	r3, [sl]
	down_total = 0;
 8001cc2:	600c      	str	r4, [r1, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001cc4:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001cc8:	9200      	str	r2, [sp, #0]
	expectedapage = 0;
 8001cca:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings1, HttpClientFileReceiveCallback,
 8001ccc:	4a0b      	ldr	r2, [pc, #44]	; (8001cfc <http_dlclient+0xa8>)
 8001cce:	480a      	ldr	r0, [pc, #40]	; (8001cf8 <http_dlclient+0xa4>)
 8001cd0:	f7ff ff44 	bl	8001b5c <httpc_get_file_dns>
			HttpClientFileResultCallback, &connection1);
	if (error != HTTPC_RESULT_OK) {
 8001cd4:	b910      	cbnz	r0, 8001cdc <http_dlclient+0x88>
		printf("httpc_get_file_dns: returned, err=%d\n", error);
	}
}
 8001cd6:	b006      	add	sp, #24
 8001cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001cdc:	4601      	mov	r1, r0
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <http_dlclient+0xbc>)
}
 8001ce0:	b006      	add	sp, #24
 8001ce2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		printf("httpc_get_file_dns: returned, err=%d\n", error);
 8001ce6:	f023 b8b5 	b.w	8024e54 <iprintf>
 8001cea:	bf00      	nop
 8001cec:	200015a4 	.word	0x200015a4
 8001cf0:	20001858 	.word	0x20001858
 8001cf4:	080012ad 	.word	0x080012ad
 8001cf8:	20001614 	.word	0x20001614
 8001cfc:	2000163c 	.word	0x2000163c
 8001d00:	08029d34 	.word	0x08029d34
 8001d04:	20001634 	.word	0x20001634
 8001d08:	08001365 	.word	0x08001365
 8001d0c:	200033d8 	.word	0x200033d8
 8001d10:	08029d70 	.word	0x08029d70
 8001d14:	2000160c 	.word	0x2000160c
 8001d18:	20001878 	.word	0x20001878
 8001d1c:	08001635 	.word	0x08001635

08001d20 <hc_open>:

// request a webpage
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	err_t error;

	connection2 = &conn2;	// point to static
	settings2 = &set2;		// point to static
	memset(settings2, 0, sizeof(set2));
 8001d24:	2200      	movs	r2, #0
	settings2 = &set2;		// point to static
 8001d26:	4c28      	ldr	r4, [pc, #160]	; (8001dc8 <hc_open+0xa8>)
	connection2 = &conn2;	// point to static
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <hc_open+0xac>)
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d2a:	460d      	mov	r5, r1
	memset(settings2, 0, sizeof(set2));
 8001d2c:	6022      	str	r2, [r4, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d2e:	4611      	mov	r1, r2
	memset(settings2, 0, sizeof(set2));
 8001d30:	6062      	str	r2, [r4, #4]
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d32:	4606      	mov	r6, r0
	settings2 = &set2;		// point to static
 8001d34:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <hc_open+0xb0>)
	memset(connection2, 0, sizeof(conn2));
 8001d36:	4618      	mov	r0, r3
	connection2 = &conn2;	// point to static
 8001d38:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8001df4 <hc_open+0xd4>
int hc_open(char *servername, char *page, char Postvars, void *returpage) {
 8001d3c:	b084      	sub	sp, #16
	settings2 = &set2;		// point to static
 8001d3e:	6014      	str	r4, [r2, #0]
	memset(connection2, 0, sizeof(conn2));
 8001d40:	2234      	movs	r2, #52	; 0x34
	connection2 = &conn2;	// point to static
 8001d42:	f8c8 3000 	str.w	r3, [r8]
	memset(connection2, 0, sizeof(conn2));
 8001d46:	f022 f8e7 	bl	8023f18 <memset>

	settings2->use_proxy = 0;
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d4a:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <hc_open+0xb4>)
	settings2->result_fn = HttpClientPageResultCallback;
 8001d4c:	4f22      	ldr	r7, [pc, #136]	; (8001dd8 <hc_open+0xb8>)
	settings2->headers_done_fn = RecvHttpHeaderCallback;
 8001d4e:	60e2      	str	r2, [r4, #12]

	connection2->timeout_ticks = 1;
 8001d50:	2201      	movs	r2, #1
	settings2->result_fn = HttpClientPageResultCallback;
 8001d52:	60a7      	str	r7, [r4, #8]
	connection2->timeout_ticks = 1;
 8001d54:	60c2      	str	r2, [r0, #12]

	if ((isalnum(*servername) || (*servername == '/'))) {
 8001d56:	4c21      	ldr	r4, [pc, #132]	; (8001ddc <hc_open+0xbc>)
 8001d58:	7833      	ldrb	r3, [r6, #0]
 8001d5a:	5ce2      	ldrb	r2, [r4, r3]
 8001d5c:	0751      	lsls	r1, r2, #29
 8001d5e:	d101      	bne.n	8001d64 <hc_open+0x44>
 8001d60:	2b2f      	cmp	r3, #47	; 0x2f
 8001d62:	d126      	bne.n	8001db2 <hc_open+0x92>
		strcpy(domain_name, servername);
 8001d64:	4631      	mov	r1, r6
 8001d66:	481e      	ldr	r0, [pc, #120]	; (8001de0 <hc_open+0xc0>)
 8001d68:	f023 fb05 	bl	8025376 <strcpy>
	} else {
		strcpy(domain_name, SERVER_DESTINATION);
	}

	if ((isalnum(*page) || (*page == '/'))) {
 8001d6c:	782b      	ldrb	r3, [r5, #0]
 8001d6e:	5ce2      	ldrb	r2, [r4, r3]
 8001d70:	0752      	lsls	r2, r2, #29
 8001d72:	d101      	bne.n	8001d78 <hc_open+0x58>
 8001d74:	2b2f      	cmp	r3, #47	; 0x2f
 8001d76:	d118      	bne.n	8001daa <hc_open+0x8a>
		strcpy(rxbuffer, page);			// rxbuffer has url
 8001d78:	4629      	mov	r1, r5
 8001d7a:	481a      	ldr	r0, [pc, #104]	; (8001de4 <hc_open+0xc4>)
 8001d7c:	f023 fafb 	bl	8025376 <strcpy>

//	printf("hc_open: domain=%s, rxbuffer=%s\n", domain_name, rxbuffer);

	down_total = 0;
	expectedapage = 1;
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d80:	4a19      	ldr	r2, [pc, #100]	; (8001de8 <hc_open+0xc8>)
	down_total = 0;
 8001d82:	2400      	movs	r4, #0
 8001d84:	4819      	ldr	r0, [pc, #100]	; (8001dec <hc_open+0xcc>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d86:	f641 7193 	movw	r1, #8083	; 0x1f93
 8001d8a:	f8cd 8008 	str.w	r8, [sp, #8]
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	; (8001dc8 <hc_open+0xa8>)
 8001d90:	e9cd 2700 	strd	r2, r7, [sp]
	down_total = 0;
 8001d94:	6004      	str	r4, [r0, #0]
	expectedapage = 1;
 8001d96:	2401      	movs	r4, #1
 8001d98:	4815      	ldr	r0, [pc, #84]	; (8001df0 <hc_open+0xd0>)
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <hc_open+0xc4>)
	expectedapage = 1;
 8001d9c:	6004      	str	r4, [r0, #0]
	error = httpc_get_file_dns(domain_name, DOWNLOAD_PORT, rxbuffer, settings2, HttpClientPageReceiveCallback,
 8001d9e:	4810      	ldr	r0, [pc, #64]	; (8001de0 <hc_open+0xc0>)
 8001da0:	f7ff fedc 	bl	8001b5c <httpc_get_file_dns>
			HttpClientPageResultCallback, &connection2);
}
 8001da4:	b004      	add	sp, #16
 8001da6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		strcpy(rxbuffer, "/");
 8001daa:	4b0e      	ldr	r3, [pc, #56]	; (8001de4 <hc_open+0xc4>)
 8001dac:	222f      	movs	r2, #47	; 0x2f
 8001dae:	801a      	strh	r2, [r3, #0]
 8001db0:	e7e6      	b.n	8001d80 <hc_open+0x60>
		strcpy(domain_name, SERVER_DESTINATION);
 8001db2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8001df8 <hc_open+0xd8>
 8001db6:	4e0a      	ldr	r6, [pc, #40]	; (8001de0 <hc_open+0xc0>)
 8001db8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001dbc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001dbe:	f8dc 3000 	ldr.w	r3, [ip]
 8001dc2:	6033      	str	r3, [r6, #0]
 8001dc4:	e7d2      	b.n	8001d6c <hc_open+0x4c>
 8001dc6:	bf00      	nop
 8001dc8:	20001868 	.word	0x20001868
 8001dcc:	200015d8 	.word	0x200015d8
 8001dd0:	2000187c 	.word	0x2000187c
 8001dd4:	080012ad 	.word	0x080012ad
 8001dd8:	08001565 	.word	0x08001565
 8001ddc:	08045585 	.word	0x08045585
 8001de0:	20001614 	.word	0x20001614
 8001de4:	2000163c 	.word	0x2000163c
 8001de8:	08001785 	.word	0x08001785
 8001dec:	20001634 	.word	0x20001634
 8001df0:	200033d8 	.word	0x200033d8
 8001df4:	20001610 	.word	0x20001610
 8001df8:	08029d98 	.word	0x08029d98

08001dfc <httploader>:
#include "tftp/tftp_loader.h"

int http_downloading = NOT_LOADING;

// attempt to load new firmware
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e00:	460c      	mov	r4, r1
	volatile uint32_t addr;
	char segment;

	dl_filecrc = 0;

	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e02:	4924      	ldr	r1, [pc, #144]	; (8001e94 <httploader+0x98>)
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e04:	b084      	sub	sp, #16
	dl_filecrc = 0;
 8001e06:	4e24      	ldr	r6, [pc, #144]	; (8001e98 <httploader+0x9c>)
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e08:	f001 6101 	and.w	r1, r1, #135266304	; 0x8100000
void httploader(char filename[], char host[], uint32_t crc1, uint32_t crc2) {
 8001e0c:	4605      	mov	r5, r0
	addr = (uint32_t)httploader & LOADER_BASE_MEM2; 	// where are we running this code?
 8001e0e:	9103      	str	r1, [sp, #12]
	dl_filecrc = 0;
 8001e10:	2100      	movs	r1, #0
 8001e12:	6031      	str	r1, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e14:	9903      	ldr	r1, [sp, #12]
 8001e16:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8001e1a:	d033      	beq.n	8001e84 <httploader+0x88>
 8001e1c:	4f1f      	ldr	r7, [pc, #124]	; (8001e9c <httploader+0xa0>)
 8001e1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000

	switch (flash_load_address) {		// assign a code letter for the load address filename
	case LOADER_BASE_MEM1:
		segment = 'A';
		dl_filecrc = crc1;
		break;
 8001e22:	f04f 0841 	mov.w	r8, #65	; 0x41
		dl_filecrc = crc1;
 8001e26:	6032      	str	r2, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e28:	6039      	str	r1, [r7, #0]
	default:
		printf("httploader: bad load address\n");
		return;
	}

	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e2a:	4629      	mov	r1, r5
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	481c      	ldr	r0, [pc, #112]	; (8001ea0 <httploader+0xa4>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	4622      	mov	r2, r4

	flash_memptr = flash_load_address;
 8001e34:	4e1b      	ldr	r6, [pc, #108]	; (8001ea4 <httploader+0xa8>)
	printf("httploader: fliename=%s, host=%s, crc1=%u, crc2=%u\n",filename,host,crc1,crc2);
 8001e36:	f023 f80d 	bl	8024e54 <iprintf>
	flash_filelength = 0;

	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e3a:	481b      	ldr	r0, [pc, #108]	; (8001ea8 <httploader+0xac>)
	flash_memptr = flash_load_address;
 8001e3c:	6839      	ldr	r1, [r7, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e3e:	462a      	mov	r2, r5
 8001e40:	6800      	ldr	r0, [r0, #0]
 8001e42:	4643      	mov	r3, r8
	flash_memptr = flash_load_address;
 8001e44:	6031      	str	r1, [r6, #0]
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);

	http_downloading = FLASH_LOADING;
 8001e46:	2501      	movs	r5, #1
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e48:	9001      	str	r0, [sp, #4]
 8001e4a:	4818      	ldr	r0, [pc, #96]	; (8001eac <httploader+0xb0>)
	flash_filelength = 0;
 8001e4c:	4918      	ldr	r1, [pc, #96]	; (8001eb0 <httploader+0xb4>)
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e4e:	6800      	ldr	r0, [r0, #0]
 8001e50:	9000      	str	r0, [sp, #0]
	flash_filelength = 0;
 8001e52:	2000      	movs	r0, #0
 8001e54:	6008      	str	r0, [r1, #0]
	sprintf(newfilename, "/firmware/%s-%c%02u-%04u.bin", filename, segment, circuitboardpcb, newbuild);
 8001e56:	4917      	ldr	r1, [pc, #92]	; (8001eb4 <httploader+0xb8>)
 8001e58:	4817      	ldr	r0, [pc, #92]	; (8001eb8 <httploader+0xbc>)
 8001e5a:	f023 f9e5 	bl	8025228 <siprintf>
	printf("Attempting to download new firmware %s to 0x%08x from %s, ******* DO NOT SWITCH OFF ******\n", newfilename, flash_memptr, host);
 8001e5e:	4623      	mov	r3, r4
 8001e60:	6832      	ldr	r2, [r6, #0]
 8001e62:	4915      	ldr	r1, [pc, #84]	; (8001eb8 <httploader+0xbc>)
 8001e64:	4815      	ldr	r0, [pc, #84]	; (8001ebc <httploader+0xc0>)
 8001e66:	f022 fff5 	bl	8024e54 <iprintf>
	http_downloading = FLASH_LOADING;
 8001e6a:	4b15      	ldr	r3, [pc, #84]	; (8001ec0 <httploader+0xc4>)
	http_dlclient(newfilename, host, flash_memptr);
 8001e6c:	4812      	ldr	r0, [pc, #72]	; (8001eb8 <httploader+0xbc>)
 8001e6e:	4621      	mov	r1, r4
 8001e70:	6832      	ldr	r2, [r6, #0]
	http_downloading = FLASH_LOADING;
 8001e72:	601d      	str	r5, [r3, #0]
	http_dlclient(newfilename, host, flash_memptr);
 8001e74:	f7ff feee 	bl	8001c54 <http_dlclient>
	osDelay(5);
 8001e78:	2005      	movs	r0, #5
}
 8001e7a:	b004      	add	sp, #16
 8001e7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	osDelay(5);
 8001e80:	f013 b852 	b.w	8014f28 <osDelay>
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e84:	4f05      	ldr	r7, [pc, #20]	; (8001e9c <httploader+0xa0>)
 8001e86:	f04f 6101 	mov.w	r1, #135266304	; 0x8100000
		break;
 8001e8a:	f04f 0849 	mov.w	r8, #73	; 0x49
		dl_filecrc = crc2;
 8001e8e:	6033      	str	r3, [r6, #0]
	flash_load_address = (addr == LOADER_BASE_MEM1) ? LOADER_BASE_MEM2 : LOADER_BASE_MEM1; // find the other segment
 8001e90:	6039      	str	r1, [r7, #0]
		break;
 8001e92:	e7ca      	b.n	8001e2a <httploader+0x2e>
 8001e94:	08001dfd 	.word	0x08001dfd
 8001e98:	20000814 	.word	0x20000814
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	0802a054 	.word	0x0802a054
 8001ea4:	20000820 	.word	0x20000820
 8001ea8:	20002d80 	.word	0x20002d80
 8001eac:	200020d4 	.word	0x200020d4
 8001eb0:	2000081c 	.word	0x2000081c
 8001eb4:	0802a088 	.word	0x0802a088
 8001eb8:	20001884 	.word	0x20001884
 8001ebc:	0802a0a8 	.word	0x0802a0a8
 8001ec0:	20001880 	.word	0x20001880

08001ec4 <stm_rx_callback>:


// http callback for stm firmware download
// this gets called for each downloaded chunk received
//
int stm_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8001ec4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec8:	461c      	mov	r4, r3
	struct pbuf *q;
	int count = 0, tlen = 0, len = 0;

//	printf("stm_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8001eca:	b362      	cbz	r2, 8001f26 <stm_rx_callback+0x62>
	if (err != ERR_OK) {
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d132      	bne.n	8001f36 <stm_rx_callback+0x72>
 8001ed0:	460f      	mov	r7, r1
 8001ed2:	4615      	mov	r5, r2
 8001ed4:	4614      	mov	r4, r2
 8001ed6:	f8df 809c 	ldr.w	r8, [pc, #156]	; 8001f74 <stm_rx_callback+0xb0>
		tlen = q->tot_len;
		len = q->len;
#if 0
		putchar('.');
#endif
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001eda:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001f78 <stm_rx_callback+0xb4>
				flash_memptr = 0;
				printf("Flash Write failed from http client\n");
				return (-1);
			}
		}
		down_total += q->len;
 8001ede:	4e20      	ldr	r6, [pc, #128]	; (8001f60 <stm_rx_callback+0x9c>)
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ee0:	f8d8 b000 	ldr.w	fp, [r8]
		count += q->len;
 8001ee4:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ee8:	f1bb 0f00 	cmp.w	fp, #0
 8001eec:	d10b      	bne.n	8001f06 <stm_rx_callback+0x42>
 8001eee:	f8d9 3000 	ldr.w	r3, [r9]
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001ef2:	4652      	mov	r2, sl
 8001ef4:	2101      	movs	r1, #1
		if ((flash_abort == 0) && (flash_memptr != 0)) { // we need to write this data to flash
 8001ef6:	b133      	cbz	r3, 8001f06 <stm_rx_callback+0x42>
			if (flash_memwrite(q->payload, 1, q->len, flash_memptr) != (size_t) len) {
 8001ef8:	6860      	ldr	r0, [r4, #4]
 8001efa:	f7ff f853 	bl	8000fa4 <flash_memwrite>
 8001efe:	4582      	cmp	sl, r0
 8001f00:	d121      	bne.n	8001f46 <stm_rx_callback+0x82>
		down_total += q->len;
 8001f02:	f8b4 a00a 	ldrh.w	sl, [r4, #10]
 8001f06:	6833      	ldr	r3, [r6, #0]

		altcp_recved(pcb, p->tot_len);
 8001f08:	4638      	mov	r0, r7
 8001f0a:	8929      	ldrh	r1, [r5, #8]
		down_total += q->len;
 8001f0c:	4453      	add	r3, sl
 8001f0e:	6033      	str	r3, [r6, #0]
		altcp_recved(pcb, p->tot_len);
 8001f10:	f019 fb5e 	bl	801b5d0 <tcp_recved>
		pbuf_free(p);
 8001f14:	4628      	mov	r0, r5
 8001f16:	f018 fedb 	bl	801acd0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 8001f1a:	6824      	ldr	r4, [r4, #0]
 8001f1c:	2c00      	cmp	r4, #0
 8001f1e:	d1df      	bne.n	8001ee0 <stm_rx_callback+0x1c>

//		p = p->next;
//		printf("stm_rx_callback: chunk=%d, tlen=%d, len=%d, total=%d\n", count, tlen, len, tlen);
	}
	return (0);
 8001f20:	2000      	movs	r0, #0
}
 8001f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	LWIP_ASSERT("p != NULL", p != NULL);
 8001f26:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <stm_rx_callback+0xa0>)
 8001f28:	224f      	movs	r2, #79	; 0x4f
 8001f2a:	490f      	ldr	r1, [pc, #60]	; (8001f68 <stm_rx_callback+0xa4>)
 8001f2c:	480f      	ldr	r0, [pc, #60]	; (8001f6c <stm_rx_callback+0xa8>)
 8001f2e:	f022 ff91 	bl	8024e54 <iprintf>
	if (err != ERR_OK) {
 8001f32:	2c00      	cmp	r4, #0
 8001f34:	d0f4      	beq.n	8001f20 <stm_rx_callback+0x5c>
		putchar('#');
 8001f36:	2023      	movs	r0, #35	; 0x23
 8001f38:	f022 ffa4 	bl	8024e84 <putchar>
		printlwiperr(err);
 8001f3c:	4620      	mov	r0, r4
}
 8001f3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8001f42:	f7ff be6b 	b.w	8001c1c <printlwiperr>
				flash_abort = 1;
 8001f46:	2301      	movs	r3, #1
				printf("Flash Write failed from http client\n");
 8001f48:	4809      	ldr	r0, [pc, #36]	; (8001f70 <stm_rx_callback+0xac>)
				flash_memptr = 0;
 8001f4a:	f8c9 b000 	str.w	fp, [r9]
				flash_abort = 1;
 8001f4e:	f8c8 3000 	str.w	r3, [r8]
				printf("Flash Write failed from http client\n");
 8001f52:	f023 f81b 	bl	8024f8c <puts>
				return (-1);
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001f5a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5e:	bf00      	nop
 8001f60:	20001634 	.word	0x20001634
 8001f64:	0802a104 	.word	0x0802a104
 8001f68:	08044d9c 	.word	0x08044d9c
 8001f6c:	08029a64 	.word	0x08029a64
 8001f70:	0802a120 	.word	0x0802a120
 8001f74:	20000818 	.word	0x20000818
 8001f78:	20000820 	.word	0x20000820

08001f7c <wait_armtx>:
// then re-arm the wait flag
// returns -1 on timeout, 0 on okay
int wait_armtx(void) {
	volatile int timeoutcnt;

	timeoutcnt = 0;
 8001f7c:	2300      	movs	r3, #0
int wait_armtx(void) {
 8001f7e:	b510      	push	{r4, lr}
 8001f80:	b082      	sub	sp, #8
	timeoutcnt = 0;
 8001f82:	9301      	str	r3, [sp, #4]
	while (timeoutcnt < 150) {
 8001f84:	9b01      	ldr	r3, [sp, #4]
 8001f86:	2b95      	cmp	r3, #149	; 0x95
 8001f88:	dc0d      	bgt.n	8001fa6 <wait_armtx+0x2a>
 8001f8a:	4c0e      	ldr	r4, [pc, #56]	; (8001fc4 <wait_armtx+0x48>)
 8001f8c:	e007      	b.n	8001f9e <wait_armtx+0x22>
		if (txdmadone == 1)		// its ready
			break;
//		printf("UART5 Wait Tx %d\n", timeoutcnt);
		timeoutcnt++;
 8001f8e:	9b01      	ldr	r3, [sp, #4]
 8001f90:	4403      	add	r3, r0
 8001f92:	9301      	str	r3, [sp, #4]
			volatile int busywait;
			for (busywait = 0; busywait < 100000; busywait++)
				;
		}
#endif
		osDelay(1);		// wait 1ms +
 8001f94:	f012 ffc8 	bl	8014f28 <osDelay>
	while (timeoutcnt < 150) {
 8001f98:	9b01      	ldr	r3, [sp, #4]
 8001f9a:	2b95      	cmp	r3, #149	; 0x95
 8001f9c:	dc03      	bgt.n	8001fa6 <wait_armtx+0x2a>
		osDelay(1);		// wait 1ms +
 8001f9e:	2001      	movs	r0, #1
		if (txdmadone == 1)		// its ready
 8001fa0:	6823      	ldr	r3, [r4, #0]
 8001fa2:	4283      	cmp	r3, r0
 8001fa4:	d1f3      	bne.n	8001f8e <wait_armtx+0x12>
	}

	if (timeoutcnt >= 250) {
 8001fa6:	9b01      	ldr	r3, [sp, #4]
 8001fa8:	2bf9      	cmp	r3, #249	; 0xf9
 8001faa:	dc02      	bgt.n	8001fb2 <wait_armtx+0x36>
		txdmadone = 1;	// re-arm the flag even though we have a problem
		return (-1);
	}
//	printf("UART5 Tx ARMED\n");

	return (0);
 8001fac:	2000      	movs	r0, #0
}
 8001fae:	b002      	add	sp, #8
 8001fb0:	bd10      	pop	{r4, pc}
		printf("UART5 Tx timeout\n");
 8001fb2:	4805      	ldr	r0, [pc, #20]	; (8001fc8 <wait_armtx+0x4c>)
 8001fb4:	f022 ffea 	bl	8024f8c <puts>
		txdmadone = 1;	// re-arm the flag even though we have a problem
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <wait_armtx+0x48>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc0:	601a      	str	r2, [r3, #0]
		return (-1);
 8001fc2:	e7f4      	b.n	8001fae <wait_armtx+0x32>
 8001fc4:	200020cc 	.word	0x200020cc
 8001fc8:	0802a144 	.word	0x0802a144

08001fcc <uart5_rxdone>:

// UART 5 Rx DMA complete
void uart5_rxdone() {

//	printf("UART5 Rx Complete\n");
}
 8001fcc:	4770      	bx	lr
 8001fce:	bf00      	nop

08001fd0 <HAL_UART_TxCpltCallback>:

// Transmit completed callback
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
	volatile uint32_t reg;

	if (huart->Instance == UART5) {
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <HAL_UART_TxCpltCallback+0x14>)
 8001fd2:	6802      	ldr	r2, [r0, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d000      	beq.n	8001fda <HAL_UART_TxCpltCallback+0xa>
		}

#endif
		txdmadone = 1;		// its finished transmission
	}
}
 8001fd8:	4770      	bx	lr
		txdmadone = 1;		// its finished transmission
 8001fda:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_UART_TxCpltCallback+0x18>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	40005000 	.word	0x40005000
 8001fe8:	200020cc 	.word	0x200020cc

08001fec <lcd_uart_init>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

void lcd_uart_init(int baud) {
 8001fec:	b570      	push	{r4, r5, r6, lr}
#if 0
	HAL_UART_DMAStop(&huart5);
	HAL_UARTEx_DisableStopMode(&huart5);
#endif
#if 1
	HAL_UART_Abort(&huart5);
 8001fee:	4c1a      	ldr	r4, [pc, #104]	; (8002058 <lcd_uart_init+0x6c>)
	lcdrxoutidx = 0;		// buffer consumer index
 8001ff0:	2500      	movs	r5, #0
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	; (800205c <lcd_uart_init+0x70>)
void lcd_uart_init(int baud) {
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	4606      	mov	r6, r0
	HAL_UART_Abort(&huart5);
 8001ff8:	4620      	mov	r0, r4
	lcdrxoutidx = 0;		// buffer consumer index
 8001ffa:	601d      	str	r5, [r3, #0]
	HAL_UART_Abort(&huart5);
 8001ffc:	f00f fd4e 	bl	8011a9c <HAL_UART_Abort>
	HAL_UART_DeInit(&huart5);
 8002000:	4620      	mov	r0, r4
 8002002:	f00f fc99 	bl	8011938 <HAL_UART_DeInit>
#endif
	huart5.Instance = UART5;
 8002006:	4a16      	ldr	r2, [pc, #88]	; (8002060 <lcd_uart_init+0x74>)
	huart5.Init.BaudRate = baud;
#if 1
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
	huart5.Init.StopBits = UART_STOPBITS_1;
	huart5.Init.Parity = UART_PARITY_NONE;
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002008:	230c      	movs	r3, #12
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
#endif
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 800200a:	4620      	mov	r0, r4
	huart5.Instance = UART5;
 800200c:	e9c4 2600 	strd	r2, r6, [r4]
	huart5.Init.StopBits = UART_STOPBITS_1;
 8002010:	e9c4 5502 	strd	r5, r5, [r4, #8]
	huart5.Init.Mode = UART_MODE_TX_RX;
 8002014:	e9c4 5304 	strd	r5, r3, [r4, #16]
	huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002018:	e9c4 5506 	strd	r5, r5, [r4, #24]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201c:	e9c4 5508 	strd	r5, r5, [r4, #32]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 8002020:	f010 fd36 	bl	8012a90 <HAL_UART_Init>
 8002024:	b958      	cbnz	r0, 800203e <lcd_uart_init+0x52>
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
	}

#if 1
	stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// start Rx cyclic DMA
 8002026:	2280      	movs	r2, #128	; 0x80
 8002028:	490e      	ldr	r1, [pc, #56]	; (8002064 <lcd_uart_init+0x78>)
 800202a:	480b      	ldr	r0, [pc, #44]	; (8002058 <lcd_uart_init+0x6c>)
 800202c:	f010 ff20 	bl	8012e70 <HAL_UART_Receive_DMA>
 8002030:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 8002034:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002038:	b933      	cbnz	r3, 8002048 <lcd_uart_init+0x5c>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
	}
#endif
}
 800203a:	b002      	add	sp, #8
 800203c:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_init: Failed to change UART5 baud to %d\n", baud);
 800203e:	4631      	mov	r1, r6
 8002040:	4809      	ldr	r0, [pc, #36]	; (8002068 <lcd_uart_init+0x7c>)
 8002042:	f022 ff07 	bl	8024e54 <iprintf>
 8002046:	e7ee      	b.n	8002026 <lcd_uart_init+0x3a>
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002048:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <lcd_uart_init+0x80>)
}
 800204e:	b002      	add	sp, #8
 8002050:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printf("lcd_init: 1 Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 8002054:	f022 befe 	b.w	8024e54 <iprintf>
 8002058:	20002b50 	.word	0x20002b50
 800205c:	20001a94 	.word	0x20001a94
 8002060:	40005000 	.word	0x40005000
 8002064:	20001914 	.word	0x20001914
 8002068:	0802a158 	.word	0x0802a158
 800206c:	0802a188 	.word	0x0802a188

08002070 <lcd_init>:

// lcd_init:  sends LCD reset command and them two set hi-speed commands
void lcd_init(int baud) {
 8002070:	b570      	push	{r4, r5, r6, lr}
	volatile HAL_StatusTypeDef stat;
	int i;

	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 8002072:	4a39      	ldr	r2, [pc, #228]	; (8002158 <lcd_init+0xe8>)
void lcd_init(int baud) {
 8002074:	b08c      	sub	sp, #48	; 0x30
 8002076:	4605      	mov	r5, r0
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002078:	4b38      	ldr	r3, [pc, #224]	; (800215c <lcd_init+0xec>)
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800207a:	f10d 0e08 	add.w	lr, sp, #8
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 800207e:	ac08      	add	r4, sp, #32
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 8002080:	4e37      	ldr	r6, [pc, #220]	; (8002160 <lcd_init+0xf0>)
 8002082:	f10d 0c10 	add.w	ip, sp, #16
	int siz, page;
	volatile char *cmd;

//	printf("lcd_init: baud=%d\n", baud);
	if (!((baud == 9600) || (baud == 230400))) {
 8002086:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
	const unsigned char lcd_reset[] = { "rest\xff\xff\xff" };
 800208a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800208e:	e88e 0003 	stmia.w	lr, {r0, r1}
	const unsigned char lcd_fast[] = { "baud=230400\xff\xff\xff" };
 8002092:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002094:	c407      	stmia	r4!, {r0, r1, r2}
 8002096:	f824 3b02 	strh.w	r3, [r4], #2
 800209a:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800209e:	7023      	strb	r3, [r4, #0]
	const unsigned char lcd_slow[] = { "baud=9600\xff\xff\xff" };
 80020a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80020a4:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80020a8:	f88c 3000 	strb.w	r3, [ip]
	if (!((baud == 9600) || (baud == 230400))) {
 80020ac:	d008      	beq.n	80020c0 <lcd_init+0x50>
 80020ae:	f5b5 3f61 	cmp.w	r5, #230400	; 0x38400
 80020b2:	d005      	beq.n	80020c0 <lcd_init+0x50>
		printf("lcd_init: ***** bad baud rate requested %d **** \n", baud);
 80020b4:	4629      	mov	r1, r5
 80020b6:	482b      	ldr	r0, [pc, #172]	; (8002164 <lcd_init+0xf4>)
 80020b8:	f022 fecc 	bl	8024e54 <iprintf>
//		printf("lcd_init: waiting1 for txdmadone\n");
		osDelay(1);		// wait for comms to complete
	}
	txdmadone = 0;	// TX is NOT free
	osDelay(120);
}
 80020bc:	b00c      	add	sp, #48	; 0x30
 80020be:	bd70      	pop	{r4, r5, r6, pc}
	txdmadone = 0;	// TX is NOT free
 80020c0:	2300      	movs	r3, #0
 80020c2:	4c29      	ldr	r4, [pc, #164]	; (8002168 <lcd_init+0xf8>)
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020c4:	4671      	mov	r1, lr
 80020c6:	2207      	movs	r2, #7
 80020c8:	4828      	ldr	r0, [pc, #160]	; (800216c <lcd_init+0xfc>)
	txdmadone = 0;	// TX is NOT free
 80020ca:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, lcd_reset, sizeof(lcd_reset) - 1);  // current baud
 80020cc:	f00f fc90 	bl	80119f0 <HAL_UART_Transmit_DMA>
 80020d0:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {
 80020d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020d8:	b14b      	cbz	r3, 80020ee <lcd_init+0x7e>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80020da:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80020de:	4824      	ldr	r0, [pc, #144]	; (8002170 <lcd_init+0x100>)
 80020e0:	f022 feb8 	bl	8024e54 <iprintf>
	while (!(txdmadone)) {
 80020e4:	6823      	ldr	r3, [r4, #0]
 80020e6:	b92b      	cbnz	r3, 80020f4 <lcd_init+0x84>
		osDelay(1);		// wait for comms to complete
 80020e8:	2001      	movs	r0, #1
 80020ea:	f012 ff1d 	bl	8014f28 <osDelay>
	while (!(txdmadone)) {
 80020ee:	6823      	ldr	r3, [r4, #0]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f9      	beq.n	80020e8 <lcd_init+0x78>
	txdmadone = 0;	// TX is NOT free
 80020f4:	2300      	movs	r3, #0
	osDelay(800);
 80020f6:	f44f 7048 	mov.w	r0, #800	; 0x320
	txdmadone = 0;	// TX is NOT free
 80020fa:	6023      	str	r3, [r4, #0]
	osDelay(800);
 80020fc:	f012 ff14 	bl	8014f28 <osDelay>
	if (baud == 9600)
 8002100:	f5b5 5f16 	cmp.w	r5, #9600	; 0x2580
 8002104:	d017      	beq.n	8002136 <lcd_init+0xc6>
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_fast, sizeof(lcd_fast) - 1);		// if leading nulls on tx line
 8002106:	220e      	movs	r2, #14
 8002108:	a908      	add	r1, sp, #32
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <lcd_init+0xfc>)
 800210c:	f00f fc70 	bl	80119f0 <HAL_UART_Transmit_DMA>
 8002110:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8002114:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002118:	b11b      	cbz	r3, 8002122 <lcd_init+0xb2>
 800211a:	e017      	b.n	800214c <lcd_init+0xdc>
		osDelay(1);		// wait for comms to complete
 800211c:	2001      	movs	r0, #1
 800211e:	f012 ff03 	bl	8014f28 <osDelay>
	while (!(txdmadone)) {
 8002122:	6823      	ldr	r3, [r4, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d0f9      	beq.n	800211c <lcd_init+0xac>
	txdmadone = 0;	// TX is NOT free
 8002128:	2300      	movs	r3, #0
	osDelay(120);
 800212a:	2078      	movs	r0, #120	; 0x78
	txdmadone = 0;	// TX is NOT free
 800212c:	6023      	str	r3, [r4, #0]
	osDelay(120);
 800212e:	f012 fefb 	bl	8014f28 <osDelay>
}
 8002132:	b00c      	add	sp, #48	; 0x30
 8002134:	bd70      	pop	{r4, r5, r6, pc}
		stat = HAL_UART_Transmit_DMA(&huart5, lcd_slow, sizeof(lcd_slow) - 1);		// if leading nulls on tx line
 8002136:	220c      	movs	r2, #12
 8002138:	a904      	add	r1, sp, #16
 800213a:	480c      	ldr	r0, [pc, #48]	; (800216c <lcd_init+0xfc>)
 800213c:	f00f fc58 	bl	80119f0 <HAL_UART_Transmit_DMA>
 8002140:	f88d 0007 	strb.w	r0, [sp, #7]
	if (stat != HAL_OK) {														// this cmd will be rejected
 8002144:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d0ea      	beq.n	8002122 <lcd_init+0xb2>
		printf("lcd_init: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800214c:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8002150:	4807      	ldr	r0, [pc, #28]	; (8002170 <lcd_init+0x100>)
 8002152:	f022 fe7f 	bl	8024e54 <iprintf>
 8002156:	e7e4      	b.n	8002122 <lcd_init+0xb2>
 8002158:	0802a21c 	.word	0x0802a21c
 800215c:	0802a224 	.word	0x0802a224
 8002160:	0802a234 	.word	0x0802a234
 8002164:	0802a1b8 	.word	0x0802a1b8
 8002168:	200020cc 	.word	0x200020cc
 800216c:	20002b50 	.word	0x20002b50
 8002170:	0802a1ec 	.word	0x0802a1ec

08002174 <lcd_writeblock>:
	}
	return (stat);
}

// send a binary block to the LCD
int lcd_writeblock(uint8_t *buf, int len) {
 8002174:	b570      	push	{r4, r5, r6, lr}
 8002176:	4605      	mov	r5, r0
 8002178:	460e      	mov	r6, r1
	HAL_StatusTypeDef stat;
	volatile int i;
	uint32_t reg;
	uint8_t by;

	if (wait_armtx() == -1)
 800217a:	f7ff feff 	bl	8001f7c <wait_armtx>
 800217e:	4604      	mov	r4, r0
 8002180:	3001      	adds	r0, #1
 8002182:	d009      	beq.n	8002198 <lcd_writeblock+0x24>
		return (-1);
//	printf("lcd_writeblock: %d\n", len);
	txdmadone = 0;	// TX in progress
 8002184:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <lcd_writeblock+0x34>)
 8002186:	2400      	movs	r4, #0

//	myhexDump("NXT:", buf, len);

	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002188:	b2b2      	uxth	r2, r6
 800218a:	4629      	mov	r1, r5
 800218c:	4807      	ldr	r0, [pc, #28]	; (80021ac <lcd_writeblock+0x38>)
	txdmadone = 0;	// TX in progress
 800218e:	601c      	str	r4, [r3, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buf, len);
 8002190:	f00f fc2e 	bl	80119f0 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002194:	4604      	mov	r4, r0
	if (stat != HAL_OK) {
 8002196:	b908      	cbnz	r0, 800219c <lcd_writeblock+0x28>
	}
	return (stat);
}
 8002198:	4620      	mov	r0, r4
 800219a:	bd70      	pop	{r4, r5, r6, pc}
		printf("lcd_writeblock: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 800219c:	4621      	mov	r1, r4
 800219e:	4804      	ldr	r0, [pc, #16]	; (80021b0 <lcd_writeblock+0x3c>)
 80021a0:	f022 fe58 	bl	8024e54 <iprintf>
}
 80021a4:	4620      	mov	r0, r4
 80021a6:	bd70      	pop	{r4, r5, r6, pc}
 80021a8:	200020cc 	.word	0x200020cc
 80021ac:	20002b50 	.word	0x20002b50
 80021b0:	0802a244 	.word	0x0802a244

080021b4 <lcd_puts>:

// put a null terminated string
int lcd_puts(char *str) {
 80021b4:	b530      	push	{r4, r5, lr}
 80021b6:	b083      	sub	sp, #12
 80021b8:	4604      	mov	r4, r0
	HAL_StatusTypeDef stat;
	volatile int i;
	static char buffer[96];
	uint32_t reg;

	if (wait_armtx() == -1)
 80021ba:	f7ff fedf 	bl	8001f7c <wait_armtx>
 80021be:	4605      	mov	r5, r0
 80021c0:	3001      	adds	r0, #1
 80021c2:	d01d      	beq.n	8002200 <lcd_puts+0x4c>
		return (-1);

	i = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	4813      	ldr	r0, [pc, #76]	; (8002214 <lcd_puts+0x60>)
 80021c8:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	5ce3      	ldrb	r3, [r4, r3]
 80021ce:	b153      	cbz	r3, 80021e6 <lcd_puts+0x32>
		buffer[i] = str[i];
 80021d0:	9901      	ldr	r1, [sp, #4]
 80021d2:	9a01      	ldr	r2, [sp, #4]
		i++;
 80021d4:	9b01      	ldr	r3, [sp, #4]
		buffer[i] = str[i];
 80021d6:	5c61      	ldrb	r1, [r4, r1]
		i++;
 80021d8:	3301      	adds	r3, #1
		buffer[i] = str[i];
 80021da:	5481      	strb	r1, [r0, r2]
		i++;
 80021dc:	9301      	str	r3, [sp, #4]
	while (str[i] != '\0') {
 80021de:	9b01      	ldr	r3, [sp, #4]
 80021e0:	5ce3      	ldrb	r3, [r4, r3]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f4      	bne.n	80021d0 <lcd_puts+0x1c>
	}
	buffer[i] = '\0';
 80021e6:	9901      	ldr	r1, [sp, #4]
 80021e8:	2300      	movs	r3, #0
//	printf("lcd_puts: %s\n",buffer);

	txdmadone = 0;	// TX in progress
//	printf("lcd_puts: len=%d, [%s]\n", i, str);

	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021ea:	9a01      	ldr	r2, [sp, #4]
	txdmadone = 0;	// TX in progress
 80021ec:	4c0a      	ldr	r4, [pc, #40]	; (8002218 <lcd_puts+0x64>)
	buffer[i] = '\0';
 80021ee:	5443      	strb	r3, [r0, r1]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021f0:	b292      	uxth	r2, r2
 80021f2:	4908      	ldr	r1, [pc, #32]	; (8002214 <lcd_puts+0x60>)
 80021f4:	4809      	ldr	r0, [pc, #36]	; (800221c <lcd_puts+0x68>)
	txdmadone = 0;	// TX in progress
 80021f6:	6023      	str	r3, [r4, #0]
	stat = HAL_UART_Transmit_DMA(&huart5, buffer, i);
 80021f8:	f00f fbfa 	bl	80119f0 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 80021fc:	4605      	mov	r5, r0
	if (stat != HAL_OK) {
 80021fe:	b910      	cbnz	r0, 8002206 <lcd_puts+0x52>
	}
	return (stat);
}
 8002200:	4628      	mov	r0, r5
 8002202:	b003      	add	sp, #12
 8002204:	bd30      	pop	{r4, r5, pc}
		printf("lcd_puts: Err %d HAL_UART_Transmit_DMA uart5\n", stat);
 8002206:	4629      	mov	r1, r5
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <lcd_puts+0x6c>)
 800220a:	f022 fe23 	bl	8024e54 <iprintf>
}
 800220e:	4628      	mov	r0, r5
 8002210:	b003      	add	sp, #12
 8002212:	bd30      	pop	{r4, r5, pc}
 8002214:	200018b4 	.word	0x200018b4
 8002218:	200020cc 	.word	0x200020cc
 800221c:	20002b50 	.word	0x20002b50
 8002220:	0802a278 	.word	0x0802a278

08002224 <lcd_rxdma>:

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// get Rx chars if available - non blocking using DMA
// copies all dma rx'd chars into the lcd rx buffer
int lcd_rxdma() {
 8002224:	b530      	push	{r4, r5, lr}
	HAL_StatusTypeDef stat;
	volatile int count = 0;
 8002226:	2300      	movs	r3, #0
int lcd_rxdma() {
 8002228:	b083      	sub	sp, #12
	volatile int dmaindex = 0;

	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 800222a:	4a17      	ldr	r2, [pc, #92]	; (8002288 <lcd_rxdma+0x64>)
	volatile int count = 0;
 800222c:	9300      	str	r3, [sp, #0]
	volatile int dmaindex = 0;
 800222e:	9301      	str	r3, [sp, #4]
	dmaindex = DMARXBUFSIZE - DMA1_Stream0->NDTR;  // next index position the DMA will fill
 8002230:	6953      	ldr	r3, [r2, #20]
 8002232:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002236:	9301      	str	r3, [sp, #4]
	if (dmaindex == 128) {
 8002238:	9a01      	ldr	r2, [sp, #4]
 800223a:	2a80      	cmp	r2, #128	; 0x80
 800223c:	d016      	beq.n	800226c <lcd_rxdma+0x48>
		}
#endif
		dmaindex = 0;	// DMA count-to-go had zero
	}

	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800223e:	4d13      	ldr	r5, [pc, #76]	; (800228c <lcd_rxdma+0x68>)
 8002240:	9a01      	ldr	r2, [sp, #4]
 8002242:	682b      	ldr	r3, [r5, #0]
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <lcd_rxdma+0x42>
 8002248:	4c11      	ldr	r4, [pc, #68]	; (8002290 <lcd_rxdma+0x6c>)
 800224a:	4812      	ldr	r0, [pc, #72]	; (8002294 <lcd_rxdma+0x70>)
#if 0
		osDelay(10);
		printf("0x%02x ", dmarxbuffer[lcdrxoutidx]);
#endif
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 800224c:	5cc1      	ldrb	r1, [r0, r3]
		count++;
 800224e:	9a00      	ldr	r2, [sp, #0]
		lcdrxbuffer[lcdrxoutidx] = dmarxbuffer[lcdrxoutidx];	// copy the next char to lcd rx buffer
 8002250:	54e1      	strb	r1, [r4, r3]
	if (++index >= limit)
 8002252:	3301      	adds	r3, #1
		count++;
 8002254:	3201      	adds	r2, #1
		return (0);
 8002256:	2b80      	cmp	r3, #128	; 0x80
		count++;
 8002258:	9200      	str	r2, [sp, #0]
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 800225a:	9a01      	ldr	r2, [sp, #4]
		return (0);
 800225c:	bfa8      	it	ge
 800225e:	2300      	movge	r3, #0
	while (dmaindex != lcdrxoutidx) {		// dma in index has moved on from lcd rx out index
 8002260:	429a      	cmp	r2, r3
 8002262:	d1f3      	bne.n	800224c <lcd_rxdma+0x28>
 8002264:	602b      	str	r3, [r5, #0]
	}
#if 0
	if (count > 0)
		printf("\n");
#endif
	return (count);
 8002266:	9800      	ldr	r0, [sp, #0]
}
 8002268:	b003      	add	sp, #12
 800226a:	bd30      	pop	{r4, r5, pc}
		stat = HAL_UART_Receive_DMA(&huart5, dmarxbuffer, DMARXBUFSIZE);	// restart Rx cyclic DMA
 800226c:	4909      	ldr	r1, [pc, #36]	; (8002294 <lcd_rxdma+0x70>)
 800226e:	480a      	ldr	r0, [pc, #40]	; (8002298 <lcd_rxdma+0x74>)
 8002270:	f010 fdfe 	bl	8012e70 <HAL_UART_Receive_DMA>
		if (stat != HAL_OK) {
 8002274:	b910      	cbnz	r0, 800227c <lcd_rxdma+0x58>
		dmaindex = 0;	// DMA count-to-go had zero
 8002276:	2300      	movs	r3, #0
 8002278:	9301      	str	r3, [sp, #4]
 800227a:	e7e0      	b.n	800223e <lcd_rxdma+0x1a>
			printf("lcd_rxdma: Err HAL_UART_Receive_DMA uart5 %d\n", stat);
 800227c:	4601      	mov	r1, r0
 800227e:	4807      	ldr	r0, [pc, #28]	; (800229c <lcd_rxdma+0x78>)
 8002280:	f022 fde8 	bl	8024e54 <iprintf>
 8002284:	e7f7      	b.n	8002276 <lcd_rxdma+0x52>
 8002286:	bf00      	nop
 8002288:	40026000 	.word	0x40026000
 800228c:	20001a94 	.word	0x20001a94
 8002290:	20001a14 	.word	0x20001a14
 8002294:	20001914 	.word	0x20001914
 8002298:	20002b50 	.word	0x20002b50
 800229c:	0802a2a8 	.word	0x0802a2a8

080022a0 <lcd_getc>:
int lcd_getc() {
	volatile static int lastidx = 0;
	int ch;

	ch = -1;
	if (lastidx != lcdrxoutidx) {		// something there
 80022a0:	4a0c      	ldr	r2, [pc, #48]	; (80022d4 <lcd_getc+0x34>)
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <lcd_getc+0x38>)
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4299      	cmp	r1, r3
 80022aa:	d00f      	beq.n	80022cc <lcd_getc+0x2c>
		ch = lcdrxbuffer[lastidx];
 80022ac:	6810      	ldr	r0, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80022ae:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 80022b0:	490a      	ldr	r1, [pc, #40]	; (80022dc <lcd_getc+0x3c>)
	if (++index >= limit)
 80022b2:	3301      	adds	r3, #1
		return (0);
 80022b4:	2b80      	cmp	r3, #128	; 0x80
 80022b6:	bfa8      	it	ge
 80022b8:	2300      	movge	r3, #0
int lcd_getc() {
 80022ba:	b410      	push	{r4}
		ch = lcdrxbuffer[lastidx];
 80022bc:	4c08      	ldr	r4, [pc, #32]	; (80022e0 <lcd_getc+0x40>)
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80022be:	6013      	str	r3, [r2, #0]
		rxtimeout = 100;
 80022c0:	2364      	movs	r3, #100	; 0x64
		ch = lcdrxbuffer[lastidx];
 80022c2:	5c20      	ldrb	r0, [r4, r0]
//  printf("lcd_getc() got %02x\n", ch);
	}

	return (ch);
}
 80022c4:	f85d 4b04 	ldr.w	r4, [sp], #4
		rxtimeout = 100;
 80022c8:	600b      	str	r3, [r1, #0]
}
 80022ca:	4770      	bx	lr
	ch = -1;
 80022cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	20001a00 	.word	0x20001a00
 80022d8:	20001a94 	.word	0x20001a94
 80022dc:	20001e8c 	.word	0x20001e8c
 80022e0:	20001a14 	.word	0x20001a14

080022e4 <writelcdcmd>:
}

// send a var string to the LCD (len max 255) - can be blocked
// terminate with three 0xff's
// returns 0 if sent
int writelcdcmd(char *str) {
 80022e4:	b500      	push	{lr}
 80022e6:	b099      	sub	sp, #100	; 0x64
 80022e8:	4601      	mov	r1, r0
	char i = 0;
	char pkt[96];  //  __attribute__ ((aligned (16)));

	strcpy(pkt, str);
 80022ea:	4668      	mov	r0, sp
 80022ec:	f023 f82d 	bl	802534a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 80022f0:	4907      	ldr	r1, [pc, #28]	; (8002310 <writelcdcmd+0x2c>)
	if (!(lcd_txblocked))
 80022f2:	4b08      	ldr	r3, [pc, #32]	; (8002314 <writelcdcmd+0x30>)
	strcpy(pkt, str);
 80022f4:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 80022f6:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 80022f8:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 80022fa:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 80022fc:	b92b      	cbnz	r3, 800230a <writelcdcmd+0x26>
		return (lcd_puts(pkt));
 80022fe:	4668      	mov	r0, sp
 8002300:	f7ff ff58 	bl	80021b4 <lcd_puts>
	else
		return (-1);
}
 8002304:	b019      	add	sp, #100	; 0x64
 8002306:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 800230a:	f04f 30ff 	mov.w	r0, #4294967295
 800230e:	e7f9      	b.n	8002304 <writelcdcmd+0x20>
 8002310:	0802a220 	.word	0x0802a220
 8002314:	20001a10 	.word	0x20001a10

08002318 <setlcdtext>:

// send some text to a lcd text object
int setlcdtext(char id[], char string[]) {
 8002318:	b510      	push	{r4, lr}
 800231a:	b0b2      	sub	sp, #200	; 0xc8
	int i;
	char str[96];
	volatile int result = 0;
 800231c:	2400      	movs	r4, #0
int setlcdtext(char id[], char string[]) {
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1

	sprintf(str, "%s=\"%s\"", id, string);
 8002322:	a802      	add	r0, sp, #8
 8002324:	490c      	ldr	r1, [pc, #48]	; (8002358 <setlcdtext+0x40>)
	volatile int result = 0;
 8002326:	9401      	str	r4, [sp, #4]
	sprintf(str, "%s=\"%s\"", id, string);
 8002328:	f022 ff7e 	bl	8025228 <siprintf>
	strcpy(pkt, str);
 800232c:	a902      	add	r1, sp, #8
 800232e:	a81a      	add	r0, sp, #104	; 0x68
 8002330:	f023 f80b 	bl	802534a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002334:	4909      	ldr	r1, [pc, #36]	; (800235c <setlcdtext+0x44>)
	if (!(lcd_txblocked))
 8002336:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <setlcdtext+0x48>)
	strcpy(pkt, str);
 8002338:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 800233a:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 800233c:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 800233e:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002340:	b933      	cbnz	r3, 8002350 <setlcdtext+0x38>
		return (lcd_puts(pkt));
 8002342:	a81a      	add	r0, sp, #104	; 0x68
 8002344:	f7ff ff36 	bl	80021b4 <lcd_puts>
//	printf("setcdtext: %s\n",str);
	result = writelcdcmd(str);
 8002348:	9001      	str	r0, [sp, #4]
	return (result);
 800234a:	9801      	ldr	r0, [sp, #4]
}
 800234c:	b032      	add	sp, #200	; 0xc8
 800234e:	bd10      	pop	{r4, pc}
		return (-1);
 8002350:	f04f 30ff 	mov.w	r0, #4294967295
 8002354:	e7f8      	b.n	8002348 <setlcdtext+0x30>
 8002356:	bf00      	nop
 8002358:	0802a2d8 	.word	0x0802a2d8
 800235c:	0802a220 	.word	0x0802a220
 8002360:	20001a10 	.word	0x20001a10

08002364 <setlcdbin>:

// send some numbers to a lcd obj.val object, param is binary long number
int setlcdbin(char *id, unsigned long value) {
 8002364:	b500      	push	{lr}
 8002366:	b0a1      	sub	sp, #132	; 0x84
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
	char buffer[32];
	volatile int result;

	sprintf(buffer, "%s=%lu", id, value);
 800236c:	4911      	ldr	r1, [pc, #68]	; (80023b4 <setlcdbin+0x50>)
 800236e:	4668      	mov	r0, sp
 8002370:	f022 ff5a 	bl	8025228 <siprintf>
	strcpy(pkt, str);
 8002374:	4669      	mov	r1, sp
 8002376:	a808      	add	r0, sp, #32
 8002378:	f022 ffe7 	bl	802534a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 800237c:	490e      	ldr	r1, [pc, #56]	; (80023b8 <setlcdbin+0x54>)
	if (!(lcd_txblocked))
 800237e:	4b0f      	ldr	r3, [pc, #60]	; (80023bc <setlcdbin+0x58>)
	strcpy(pkt, str);
 8002380:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002382:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002384:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002386:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002388:	b98b      	cbnz	r3, 80023ae <setlcdbin+0x4a>
		return (lcd_puts(pkt));
 800238a:	a808      	add	r0, sp, #32
 800238c:	f7ff ff12 	bl	80021b4 <lcd_puts>
	result = writelcdcmd(buffer);
 8002390:	9008      	str	r0, [sp, #32]
	if (result == -1) {		// wait for response
 8002392:	9b08      	ldr	r3, [sp, #32]
 8002394:	3301      	adds	r3, #1
 8002396:	d003      	beq.n	80023a0 <setlcdbin+0x3c>
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
	}
	return (result);
 8002398:	9808      	ldr	r0, [sp, #32]
}
 800239a:	b021      	add	sp, #132	; 0x84
 800239c:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 80023a0:	4807      	ldr	r0, [pc, #28]	; (80023c0 <setlcdbin+0x5c>)
 80023a2:	f022 fd57 	bl	8024e54 <iprintf>
	return (result);
 80023a6:	9808      	ldr	r0, [sp, #32]
}
 80023a8:	b021      	add	sp, #132	; 0x84
 80023aa:	f85d fb04 	ldr.w	pc, [sp], #4
		return (-1);
 80023ae:	f04f 30ff 	mov.w	r0, #4294967295
 80023b2:	e7ed      	b.n	8002390 <setlcdbin+0x2c>
 80023b4:	0802a2e0 	.word	0x0802a2e0
 80023b8:	0802a220 	.word	0x0802a220
 80023bc:	20001a10 	.word	0x20001a10
 80023c0:	0802a2e8 	.word	0x0802a2e8

080023c4 <lcd_clearrxbuf>:
	}
	lcd_txblocked = 0;		// allow others sending to the LCD
	return (result);
}

lcd_clearrxbuf() {
 80023c4:	b510      	push	{r4, lr}
	int result;

	lcd_rxdma();			// clear the dma rx buffer
 80023c6:	f7ff ff2d 	bl	8002224 <lcd_rxdma>
	if (lastidx != lcdrxoutidx) {		// something there
 80023ca:	4a0e      	ldr	r2, [pc, #56]	; (8002404 <lcd_clearrxbuf+0x40>)
 80023cc:	490e      	ldr	r1, [pc, #56]	; (8002408 <lcd_clearrxbuf+0x44>)
 80023ce:	6813      	ldr	r3, [r2, #0]
 80023d0:	6809      	ldr	r1, [r1, #0]
 80023d2:	428b      	cmp	r3, r1
 80023d4:	d014      	beq.n	8002400 <lcd_clearrxbuf+0x3c>
		ch = lcdrxbuffer[lastidx];
 80023d6:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 80023d8:	2464      	movs	r4, #100	; 0x64
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80023da:	6813      	ldr	r3, [r2, #0]
		rxtimeout = 100;
 80023dc:	480b      	ldr	r0, [pc, #44]	; (800240c <lcd_clearrxbuf+0x48>)
	if (++index >= limit)
 80023de:	3301      	adds	r3, #1
		rxtimeout = 100;
 80023e0:	6004      	str	r4, [r0, #0]
		return (0);
 80023e2:	2b80      	cmp	r3, #128	; 0x80
 80023e4:	bfa8      	it	ge
 80023e6:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80023e8:	6013      	str	r3, [r2, #0]
	result = lcd_getc();
	while (result != -1) {
 80023ea:	e006      	b.n	80023fa <lcd_clearrxbuf+0x36>
		ch = lcdrxbuffer[lastidx];
 80023ec:	6813      	ldr	r3, [r2, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80023ee:	6813      	ldr	r3, [r2, #0]
	if (++index >= limit)
 80023f0:	3301      	adds	r3, #1
		return (0);
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	bfa8      	it	ge
 80023f6:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 80023f8:	6013      	str	r3, [r2, #0]
	if (lastidx != lcdrxoutidx) {		// something there
 80023fa:	6813      	ldr	r3, [r2, #0]
 80023fc:	4299      	cmp	r1, r3
 80023fe:	d1f5      	bne.n	80023ec <lcd_clearrxbuf+0x28>
		result = lcd_getc();	// consume anything in the copied rx buffer
	}
}
 8002400:	bd10      	pop	{r4, pc}
 8002402:	bf00      	nop
 8002404:	20001a00 	.word	0x20001a00
 8002408:	20001a94 	.word	0x20001a94
 800240c:	20001e8c 	.word	0x20001e8c

08002410 <isnexpkt>:
}

// Check if this is an LCD packet
// try to get a single message packet from the LCD
// returns packet and end index (or 0 or -1)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002410:	b530      	push	{r4, r5, lr}
	if (lastidx != lcdrxoutidx) {		// something there
 8002412:	4b33      	ldr	r3, [pc, #204]	; (80024e0 <isnexpkt+0xd0>)
int isnexpkt(unsigned char buffer[], uint8_t size) {
 8002414:	b083      	sub	sp, #12
	if (lastidx != lcdrxoutidx) {		// something there
 8002416:	4c33      	ldr	r4, [pc, #204]	; (80024e4 <isnexpkt+0xd4>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6822      	ldr	r2, [r4, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d05d      	beq.n	80024dc <isnexpkt+0xcc>
		ch = lcdrxbuffer[lastidx];
 8002420:	6825      	ldr	r5, [r4, #0]
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 8002422:	6823      	ldr	r3, [r4, #0]
		rxtimeout = 100;
 8002424:	4a30      	ldr	r2, [pc, #192]	; (80024e8 <isnexpkt+0xd8>)
	if (++index >= limit)
 8002426:	3301      	adds	r3, #1
		return (0);
 8002428:	2b80      	cmp	r3, #128	; 0x80
 800242a:	bfa8      	it	ge
 800242c:	2300      	movge	r3, #0
		lastidx = cycinc(lastidx, LCDRXBUFSIZE);
 800242e:	6023      	str	r3, [r4, #0]
		rxtimeout = 100;
 8002430:	2364      	movs	r3, #100	; 0x64
			printf("rawch=0x%02x %c\n", rawchar, rawchar);
		else
			printf("rawch=0x%02x\n", rawchar);
#endif
		ch = rawchar & 0xff;
		buffer[i++] = ch;
 8002432:	4c2e      	ldr	r4, [pc, #184]	; (80024ec <isnexpkt+0xdc>)
		rxtimeout = 100;
 8002434:	6013      	str	r3, [r2, #0]
		ch = lcdrxbuffer[lastidx];
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <isnexpkt+0xe0>)
 8002438:	5d5b      	ldrb	r3, [r3, r5]
		ch = rawchar & 0xff;
 800243a:	f88d 3007 	strb.w	r3, [sp, #7]
		buffer[i++] = ch;
 800243e:	7823      	ldrb	r3, [r4, #0]
 8002440:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002444:	54c5      	strb	r5, [r0, r3]
 8002446:	3301      	adds	r3, #1

		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002448:	4d2a      	ldr	r5, [pc, #168]	; (80024f4 <isnexpkt+0xe4>)
		buffer[i++] = ch;
 800244a:	b2db      	uxtb	r3, r3
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 800244c:	682d      	ldr	r5, [r5, #0]
		buffer[i++] = ch;
 800244e:	7023      	strb	r3, [r4, #0]
		if (http_downloading == NXT_LOADING) {		// LCD is in upload to Nextion mode
 8002450:	2d02      	cmp	r5, #2
 8002452:	d02c      	beq.n	80024ae <isnexpkt+0x9e>
				index = i;
				return (index);
			}
		}

		if (ch == 0xff) {
 8002454:	f89d 5007 	ldrb.w	r5, [sp, #7]
 8002458:	2dff      	cmp	r5, #255	; 0xff
 800245a:	d02e      	beq.n	80024ba <isnexpkt+0xaa>
				i = 0;
				termcnt = 0;
				return (index);
			}
		} else {
			retcode = ch;	// remember ch prior to 0xff 0xff 0xff
 800245c:	f89d c007 	ldrb.w	ip, [sp, #7]
 8002460:	4d25      	ldr	r5, [pc, #148]	; (80024f8 <isnexpkt+0xe8>)
 8002462:	f885 c000 	strb.w	ip, [r5]
			termcnt = 0;
 8002466:	f04f 0c00 	mov.w	ip, #0
 800246a:	4d24      	ldr	r5, [pc, #144]	; (80024fc <isnexpkt+0xec>)
 800246c:	f885 c000 	strb.w	ip, [r5]
		}

		if (i == size) { // overrun
 8002470:	428b      	cmp	r3, r1
 8002472:	d102      	bne.n	800247a <isnexpkt+0x6a>
			i = 0;
 8002474:	2300      	movs	r3, #0
 8002476:	7023      	strb	r3, [r4, #0]
			termcnt = 0;
 8002478:	702b      	strb	r3, [r5, #0]
		}
	}
	if (rxtimeout > 0)
 800247a:	6813      	ldr	r3, [r2, #0]
 800247c:	b97b      	cbnz	r3, 800249e <isnexpkt+0x8e>
		rxtimeout--;
	if (rxtimeout == 0) {
		termcnt = 0;
 800247e:	2300      	movs	r3, #0
 8002480:	4a1e      	ldr	r2, [pc, #120]	; (80024fc <isnexpkt+0xec>)
		for (i = 0; i < size; buffer[i++] = 0)
 8002482:	4c1a      	ldr	r4, [pc, #104]	; (80024ec <isnexpkt+0xdc>)
		termcnt = 0;
 8002484:	7013      	strb	r3, [r2, #0]
		for (i = 0; i < size; buffer[i++] = 0)
 8002486:	7023      	strb	r3, [r4, #0]
 8002488:	b119      	cbz	r1, 8002492 <isnexpkt+0x82>
 800248a:	460a      	mov	r2, r1
 800248c:	4619      	mov	r1, r3
 800248e:	f021 fd43 	bl	8023f18 <memset>
			;
		i = 0;
 8002492:	2300      	movs	r3, #0
		return (-1);
 8002494:	f04f 30ff 	mov.w	r0, #4294967295
		i = 0;
 8002498:	7023      	strb	r3, [r4, #0]
	}
	return (-2);  // no char available
}
 800249a:	b003      	add	sp, #12
 800249c:	bd30      	pop	{r4, r5, pc}
		rxtimeout--;
 800249e:	3b01      	subs	r3, #1
 80024a0:	6013      	str	r3, [r2, #0]
	if (rxtimeout == 0) {
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d0eb      	beq.n	800247e <isnexpkt+0x6e>
	return (-2);  // no char available
 80024a6:	f06f 0001 	mvn.w	r0, #1
}
 80024aa:	b003      	add	sp, #12
 80024ac:	bd30      	pop	{r4, r5, pc}
			if (ch == 0x05) {
 80024ae:	f89d 5007 	ldrb.w	r5, [sp, #7]
 80024b2:	2d05      	cmp	r5, #5
 80024b4:	d1ce      	bne.n	8002454 <isnexpkt+0x44>
				index = i;
 80024b6:	4618      	mov	r0, r3
				return (index);
 80024b8:	e7ef      	b.n	800249a <isnexpkt+0x8a>
			termcnt++;
 80024ba:	4d10      	ldr	r5, [pc, #64]	; (80024fc <isnexpkt+0xec>)
 80024bc:	f895 c000 	ldrb.w	ip, [r5]
 80024c0:	f10c 0c01 	add.w	ip, ip, #1
 80024c4:	fa5f fc8c 	uxtb.w	ip, ip
			if (termcnt == 3) {
 80024c8:	f1bc 0f03 	cmp.w	ip, #3
			termcnt++;
 80024cc:	f885 c000 	strb.w	ip, [r5]
			if (termcnt == 3) {
 80024d0:	d1ce      	bne.n	8002470 <isnexpkt+0x60>
				i = 0;
 80024d2:	2200      	movs	r2, #0
				index = i;
 80024d4:	4618      	mov	r0, r3
				i = 0;
 80024d6:	7022      	strb	r2, [r4, #0]
				termcnt = 0;
 80024d8:	702a      	strb	r2, [r5, #0]
				return (index);
 80024da:	e7de      	b.n	800249a <isnexpkt+0x8a>
 80024dc:	4a02      	ldr	r2, [pc, #8]	; (80024e8 <isnexpkt+0xd8>)
 80024de:	e7cc      	b.n	800247a <isnexpkt+0x6a>
 80024e0:	20001a94 	.word	0x20001a94
 80024e4:	20001a00 	.word	0x20001a00
 80024e8:	20001e8c 	.word	0x20001e8c
 80024ec:	200019f8 	.word	0x200019f8
 80024f0:	20001a14 	.word	0x20001a14
 80024f4:	20001880 	.word	0x20001880
 80024f8:	20001e88 	.word	0x20001e88
 80024fc:	20001eb8 	.word	0x20001eb8

08002500 <decode_lcdtype>:

// try to extract LCD type from what could be the connect string response
int decode_lcdtype(char *str) {
	int i, j, k;
	const char next[] = { "NX" };
 8002500:	4a25      	ldr	r2, [pc, #148]	; (8002598 <decode_lcdtype+0x98>)
 8002502:	6813      	ldr	r3, [r2, #0]
int decode_lcdtype(char *str) {
 8002504:	b570      	push	{r4, r5, r6, lr}
	const char next[] = { "NX" };
 8002506:	0c1a      	lsrs	r2, r3, #16
int decode_lcdtype(char *str) {
 8002508:	b082      	sub	sp, #8

	i = 0;
	j = 0;
	k = 0;
	nex_model[i] = '\0';
 800250a:	4e24      	ldr	r6, [pc, #144]	; (800259c <decode_lcdtype+0x9c>)
 800250c:	2400      	movs	r4, #0
	const char next[] = { "NX" };
 800250e:	f88d 2006 	strb.w	r2, [sp, #6]
	nex_model[i] = '\0';
 8002512:	7034      	strb	r4, [r6, #0]

	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002514:	7802      	ldrb	r2, [r0, #0]
	const char next[] = { "NX" };
 8002516:	f8ad 3004 	strh.w	r3, [sp, #4]
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 800251a:	1e53      	subs	r3, r2, #1
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2bfd      	cmp	r3, #253	; 0xfd
 8002520:	d81a      	bhi.n	8002558 <decode_lcdtype+0x58>
 8002522:	4605      	mov	r5, r0
 8002524:	4601      	mov	r1, r0
 8002526:	f04f 0c4e 	mov.w	ip, #78	; 0x4e
 800252a:	f1c0 0e01 	rsb	lr, r0, #1
 800252e:	e00b      	b.n	8002548 <decode_lcdtype+0x48>
		if (str[i++] == next[j]) {
 8002530:	f104 0308 	add.w	r3, r4, #8
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 8002534:	f811 2f01 	ldrb.w	r2, [r1, #1]!
		if (str[i++] == next[j]) {
 8002538:	eb0d 0c03 	add.w	ip, sp, r3
	while ((str[i] != '\0') && (str[i] != 0xff)) {
 800253c:	1e53      	subs	r3, r2, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	2bfd      	cmp	r3, #253	; 0xfd
 8002542:	d809      	bhi.n	8002558 <decode_lcdtype+0x58>
		if (str[i++] == next[j]) {
 8002544:	f81c cc04 	ldrb.w	ip, [ip, #-4]
 8002548:	eb0e 0301 	add.w	r3, lr, r1
 800254c:	4594      	cmp	ip, r2
 800254e:	4618      	mov	r0, r3
 8002550:	d1ee      	bne.n	8002530 <decode_lcdtype+0x30>
			j++;
			if (j >= 2) {		// found N...X
 8002552:	b924      	cbnz	r4, 800255e <decode_lcdtype+0x5e>
 8002554:	2401      	movs	r4, #1
 8002556:	e7eb      	b.n	8002530 <decode_lcdtype+0x30>
				nex_model[i] = '\0';
				return (i);
			}
		}
	}
	return (0);
 8002558:	2000      	movs	r0, #0
}
 800255a:	b002      	add	sp, #8
 800255c:	bd70      	pop	{r4, r5, r6, pc}
				nex_model[k++] = 'M';
 800255e:	f645 024d 	movw	r2, #22605	; 0x584d
 8002562:	8032      	strh	r2, [r6, #0]
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002564:	5cea      	ldrb	r2, [r5, r3]
 8002566:	442b      	add	r3, r5
 8002568:	1e51      	subs	r1, r2, #1
 800256a:	b2c9      	uxtb	r1, r1
 800256c:	29fd      	cmp	r1, #253	; 0xfd
 800256e:	d80f      	bhi.n	8002590 <decode_lcdtype+0x90>
 8002570:	2a2c      	cmp	r2, #44	; 0x2c
 8002572:	d00d      	beq.n	8002590 <decode_lcdtype+0x90>
 8002574:	4c0a      	ldr	r4, [pc, #40]	; (80025a0 <decode_lcdtype+0xa0>)
 8002576:	e001      	b.n	800257c <decode_lcdtype+0x7c>
 8002578:	2a2c      	cmp	r2, #44	; 0x2c
 800257a:	d009      	beq.n	8002590 <decode_lcdtype+0x90>
					nex_model[k++] = str[i++];
 800257c:	eb03 000e 	add.w	r0, r3, lr
 8002580:	f804 2f01 	strb.w	r2, [r4, #1]!
				while ((str[i] != '\0') && (str[i] != 0xff) && (str[i] != ',')) {
 8002584:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002588:	1e51      	subs	r1, r2, #1
 800258a:	b2c9      	uxtb	r1, r1
 800258c:	29fd      	cmp	r1, #253	; 0xfd
 800258e:	d9f3      	bls.n	8002578 <decode_lcdtype+0x78>
				nex_model[i] = '\0';
 8002590:	2300      	movs	r3, #0
 8002592:	5433      	strb	r3, [r6, r0]
}
 8002594:	b002      	add	sp, #8
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	0802a304 	.word	0x0802a304
 800259c:	20001aa8 	.word	0x20001aa8
 80025a0:	20001aa9 	.word	0x20001aa9

080025a4 <lcd_time>:

// send the time to t0.txt
void lcd_time() {
	unsigned char str[16];

	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80025a4:	4a1e      	ldr	r2, [pc, #120]	; (8002620 <lcd_time+0x7c>)
 80025a6:	f648 41a0 	movw	r1, #36000	; 0x8ca0
 80025aa:	481e      	ldr	r0, [pc, #120]	; (8002624 <lcd_time+0x80>)
 80025ac:	e9d2 3200 	ldrd	r3, r2, [r2]
void lcd_time() {
 80025b0:	b510      	push	{r4, lr}
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80025b2:	185b      	adds	r3, r3, r1
void lcd_time() {
 80025b4:	b084      	sub	sp, #16
	timeinfo = *localtime(&localepochtime);
 80025b6:	4c1c      	ldr	r4, [pc, #112]	; (8002628 <lcd_time+0x84>)
	localepochtime = epochtime + (time_t) (10 * 60 * 60);		// add ten hours
 80025b8:	f142 0200 	adc.w	r2, r2, #0
 80025bc:	e9c0 3200 	strd	r3, r2, [r0]
	timeinfo = *localtime(&localepochtime);
 80025c0:	f021 fb4a 	bl	8023c58 <localtime>
 80025c4:	4684      	mov	ip, r0
 80025c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80025ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025cc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80025d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80025d2:	4623      	mov	r3, r4
 80025d4:	f8dc 4000 	ldr.w	r4, [ip]
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 80025d8:	4a14      	ldr	r2, [pc, #80]	; (800262c <lcd_time+0x88>)
 80025da:	2128      	movs	r1, #40	; 0x28
	timeinfo = *localtime(&localepochtime);
 80025dc:	f843 4920 	str.w	r4, [r3], #-32
	strftime(sbuffer, sizeof(sbuffer), "%H:%M:%S", &timeinfo);
 80025e0:	4813      	ldr	r0, [pc, #76]	; (8002630 <lcd_time+0x8c>)
 80025e2:	f023 fc09 	bl	8025df8 <strftime>
	setlcdtext("t0.txt", sbuffer);
 80025e6:	4912      	ldr	r1, [pc, #72]	; (8002630 <lcd_time+0x8c>)
 80025e8:	4812      	ldr	r0, [pc, #72]	; (8002634 <lcd_time+0x90>)
 80025ea:	f7ff fe95 	bl	8002318 <setlcdtext>

	if (gpslocked) {
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <lcd_time+0x94>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	b12b      	cbz	r3, 8002600 <lcd_time+0x5c>
		writelcdcmd("vis t3,0");	// hide warning
 80025f4:	4811      	ldr	r0, [pc, #68]	; (800263c <lcd_time+0x98>)
	} else {
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
		setlcdtext("t3.txt", str);
		writelcdcmd("vis t3,1");
	}
}
 80025f6:	b004      	add	sp, #16
 80025f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		writelcdcmd("vis t3,0");	// hide warning
 80025fc:	f7ff be72 	b.w	80022e4 <writelcdcmd>
		sprintf(str, "AQUIRE GPS:%d", statuspkt.NavPvt.numSV);
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <lcd_time+0x9c>)
 8002602:	4668      	mov	r0, sp
 8002604:	490f      	ldr	r1, [pc, #60]	; (8002644 <lcd_time+0xa0>)
 8002606:	7eda      	ldrb	r2, [r3, #27]
 8002608:	f022 fe0e 	bl	8025228 <siprintf>
		setlcdtext("t3.txt", str);
 800260c:	4669      	mov	r1, sp
 800260e:	480e      	ldr	r0, [pc, #56]	; (8002648 <lcd_time+0xa4>)
 8002610:	f7ff fe82 	bl	8002318 <setlcdtext>
		writelcdcmd("vis t3,1");
 8002614:	480d      	ldr	r0, [pc, #52]	; (800264c <lcd_time+0xa8>)
 8002616:	f7ff fe65 	bl	80022e4 <writelcdcmd>
}
 800261a:	b004      	add	sp, #16
 800261c:	bd10      	pop	{r4, pc}
 800261e:	bf00      	nop
 8002620:	20002e20 	.word	0x20002e20
 8002624:	20001aa0 	.word	0x20001aa0
 8002628:	20001ebc 	.word	0x20001ebc
 800262c:	0802a308 	.word	0x0802a308
 8002630:	20001e90 	.word	0x20001e90
 8002634:	0802a314 	.word	0x0802a314
 8002638:	200033b8 	.word	0x200033b8
 800263c:	0802a31c 	.word	0x0802a31c
 8002640:	20002f6c 	.word	0x20002f6c
 8002644:	0802a328 	.word	0x0802a328
 8002648:	0802a338 	.word	0x0802a338
 800264c:	0802a340 	.word	0x0802a340

08002650 <lcd_showvars>:
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
	setlcdtext("t1.txt", sbuffer);
}

// populate the page2 vars
void lcd_showvars() {
 8002650:	b530      	push	{r4, r5, lr}
	unsigned char str[96];
	unsigned long board;
	static uint16_t toggle = 0;

	switch (toggle) {
 8002652:	4c62      	ldr	r4, [pc, #392]	; (80027dc <lcd_showvars+0x18c>)
void lcd_showvars() {
 8002654:	b09f      	sub	sp, #124	; 0x7c
	switch (toggle) {
 8002656:	8823      	ldrh	r3, [r4, #0]
 8002658:	2b03      	cmp	r3, #3
 800265a:	d81f      	bhi.n	800269c <lcd_showvars+0x4c>
 800265c:	e8df f003 	tbb	[pc, r3]
 8002660:	02203760 	.word	0x02203760
		setlcdtext("t5.txt", str);
		toggle = 3;
		break;

	case 3:
		sprintf(str, "Ver %d.%d Build:%d PCB=%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, circuitboardpcb,
 8002664:	4b5e      	ldr	r3, [pc, #376]	; (80027e0 <lcd_showvars+0x190>)
 8002666:	495f      	ldr	r1, [pc, #380]	; (80027e4 <lcd_showvars+0x194>)
 8002668:	f8d3 2428 	ldr.w	r2, [r3, #1064]	; 0x428
 800266c:	6808      	ldr	r0, [r1, #0]
 800266e:	9204      	str	r2, [sp, #16]
 8002670:	f8d3 2424 	ldr.w	r2, [r3, #1060]	; 0x424
 8002674:	9203      	str	r2, [sp, #12]
 8002676:	f242 722e 	movw	r2, #10030	; 0x272e
 800267a:	f8d3 1420 	ldr.w	r1, [r3, #1056]	; 0x420
 800267e:	2310      	movs	r3, #16
 8002680:	e9cd 2000 	strd	r2, r0, [sp]
 8002684:	9102      	str	r1, [sp, #8]
 8002686:	2200      	movs	r2, #0
 8002688:	4957      	ldr	r1, [pc, #348]	; (80027e8 <lcd_showvars+0x198>)
 800268a:	a806      	add	r0, sp, #24
 800268c:	f022 fdcc 	bl	8025228 <siprintf>
		STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
//		sprintf(str, "Ver %d.%d, Build:%d\\rUID=%lx %lx %lx", MAJORVERSION, MINORVERSION, BUILD, STM32_UUID[0],
//				STM32_UUID[1], STM32_UUID[2]);
		setlcdtext("t26.txt", str);
 8002690:	a906      	add	r1, sp, #24
 8002692:	4856      	ldr	r0, [pc, #344]	; (80027ec <lcd_showvars+0x19c>)
 8002694:	f7ff fe40 	bl	8002318 <setlcdtext>
		toggle = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	8023      	strh	r3, [r4, #0]
		break;
	}
}
 800269c:	b01f      	add	sp, #124	; 0x7c
 800269e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 80026a0:	4d53      	ldr	r5, [pc, #332]	; (80027f0 <lcd_showvars+0x1a0>)
 80026a2:	a806      	add	r0, sp, #24
 80026a4:	4953      	ldr	r1, [pc, #332]	; (80027f4 <lcd_showvars+0x1a4>)
 80026a6:	6fea      	ldr	r2, [r5, #124]	; 0x7c
 80026a8:	f022 fdbe 	bl	8025228 <siprintf>
		setlcdtext("t4.txt", str);
 80026ac:	a906      	add	r1, sp, #24
 80026ae:	4852      	ldr	r0, [pc, #328]	; (80027f8 <lcd_showvars+0x1a8>)
 80026b0:	f7ff fe32 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.sysuptime);	// system up time
 80026b4:	6e6a      	ldr	r2, [r5, #100]	; 0x64
 80026b6:	494f      	ldr	r1, [pc, #316]	; (80027f4 <lcd_showvars+0x1a4>)
 80026b8:	a806      	add	r0, sp, #24
 80026ba:	f022 fdb5 	bl	8025228 <siprintf>
		setlcdtext("t5.txt", str);
 80026be:	a906      	add	r1, sp, #24
 80026c0:	484e      	ldr	r0, [pc, #312]	; (80027fc <lcd_showvars+0x1ac>)
 80026c2:	f7ff fe29 	bl	8002318 <setlcdtext>
		toggle = 3;
 80026c6:	2303      	movs	r3, #3
 80026c8:	8023      	strh	r3, [r4, #0]
}
 80026ca:	b01f      	add	sp, #124	; 0x7c
 80026cc:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d", statuspkt.NavPvt.numSV);	// satellites
 80026ce:	4d48      	ldr	r5, [pc, #288]	; (80027f0 <lcd_showvars+0x1a0>)
 80026d0:	a806      	add	r0, sp, #24
 80026d2:	4948      	ldr	r1, [pc, #288]	; (80027f4 <lcd_showvars+0x1a4>)
 80026d4:	7eea      	ldrb	r2, [r5, #27]
 80026d6:	f022 fda7 	bl	8025228 <siprintf>
		setlcdtext("t0.txt", str);
 80026da:	a906      	add	r1, sp, #24
 80026dc:	4848      	ldr	r0, [pc, #288]	; (8002800 <lcd_showvars+0x1b0>)
 80026de:	f7ff fe1b 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lat);	// latitude
 80026e2:	6a2a      	ldr	r2, [r5, #32]
 80026e4:	4943      	ldr	r1, [pc, #268]	; (80027f4 <lcd_showvars+0x1a4>)
 80026e6:	a806      	add	r0, sp, #24
 80026e8:	f022 fd9e 	bl	8025228 <siprintf>
		setlcdtext("t1.txt", str);
 80026ec:	a906      	add	r1, sp, #24
 80026ee:	4845      	ldr	r0, [pc, #276]	; (8002804 <lcd_showvars+0x1b4>)
 80026f0:	f7ff fe12 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.lon);	// longtitude
 80026f4:	69ea      	ldr	r2, [r5, #28]
 80026f6:	493f      	ldr	r1, [pc, #252]	; (80027f4 <lcd_showvars+0x1a4>)
 80026f8:	a806      	add	r0, sp, #24
 80026fa:	f022 fd95 	bl	8025228 <siprintf>
		setlcdtext("t2.txt", str);
 80026fe:	a906      	add	r1, sp, #24
 8002700:	4841      	ldr	r0, [pc, #260]	; (8002808 <lcd_showvars+0x1b8>)
 8002702:	f7ff fe09 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.NavPvt.height);	// height
 8002706:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8002708:	493a      	ldr	r1, [pc, #232]	; (80027f4 <lcd_showvars+0x1a4>)
 800270a:	a806      	add	r0, sp, #24
 800270c:	f022 fd8c 	bl	8025228 <siprintf>
		setlcdtext("t3.txt", str);
 8002710:	a906      	add	r1, sp, #24
 8002712:	483e      	ldr	r0, [pc, #248]	; (800280c <lcd_showvars+0x1bc>)
 8002714:	f7ff fe00 	bl	8002318 <setlcdtext>
		toggle = 2;
 8002718:	2302      	movs	r3, #2
 800271a:	8023      	strh	r3, [r4, #0]
}
 800271c:	b01f      	add	sp, #124	; 0x7c
 800271e:	bd30      	pop	{r4, r5, pc}
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002720:	4b3b      	ldr	r3, [pc, #236]	; (8002810 <lcd_showvars+0x1c0>)
 8002722:	a806      	add	r0, sp, #24
		sprintf(str, "%d", statuspkt.uid);
 8002724:	4d32      	ldr	r5, [pc, #200]	; (80027f0 <lcd_showvars+0x1a0>)
		sprintf(str, "%d.%d.%d.%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	0e11      	lsrs	r1, r2, #24
 800272a:	f3c2 4307 	ubfx	r3, r2, #16, #8
 800272e:	e9cd 3100 	strd	r3, r1, [sp]
 8002732:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8002736:	4937      	ldr	r1, [pc, #220]	; (8002814 <lcd_showvars+0x1c4>)
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f022 fd75 	bl	8025228 <siprintf>
		setlcdtext("t11.txt", str);
 800273e:	a906      	add	r1, sp, #24
 8002740:	4835      	ldr	r0, [pc, #212]	; (8002818 <lcd_showvars+0x1c8>)
 8002742:	f7ff fde9 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.uid);
 8002746:	f8b5 205c 	ldrh.w	r2, [r5, #92]	; 0x5c
 800274a:	492a      	ldr	r1, [pc, #168]	; (80027f4 <lcd_showvars+0x1a4>)
 800274c:	a806      	add	r0, sp, #24
 800274e:	b292      	uxth	r2, r2
 8002750:	f022 fd6a 	bl	8025228 <siprintf>
		setlcdtext("t10.txt", str);
 8002754:	a906      	add	r1, sp, #24
 8002756:	4831      	ldr	r0, [pc, #196]	; (800281c <lcd_showvars+0x1cc>)
 8002758:	f7ff fdde 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcpktssent);
 800275c:	f8b5 205e 	ldrh.w	r2, [r5, #94]	; 0x5e
 8002760:	4924      	ldr	r1, [pc, #144]	; (80027f4 <lcd_showvars+0x1a4>)
 8002762:	a806      	add	r0, sp, #24
 8002764:	b292      	uxth	r2, r2
 8002766:	f022 fd5f 	bl	8025228 <siprintf>
		setlcdtext("t9.txt", str);
 800276a:	a906      	add	r1, sp, #24
 800276c:	482c      	ldr	r0, [pc, #176]	; (8002820 <lcd_showvars+0x1d0>)
 800276e:	f7ff fdd3 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", (globaladcavg & 0xfff));  // base
 8002772:	4b2c      	ldr	r3, [pc, #176]	; (8002824 <lcd_showvars+0x1d4>)
 8002774:	491f      	ldr	r1, [pc, #124]	; (80027f4 <lcd_showvars+0x1a4>)
 8002776:	a806      	add	r0, sp, #24
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800277e:	f022 fd53 	bl	8025228 <siprintf>
		setlcdtext("t8.txt", str);
 8002782:	a906      	add	r1, sp, #24
 8002784:	4828      	ldr	r0, [pc, #160]	; (8002828 <lcd_showvars+0x1d8>)
 8002786:	f7ff fdc7 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800278a:	4b28      	ldr	r3, [pc, #160]	; (800282c <lcd_showvars+0x1dc>)
 800278c:	4919      	ldr	r1, [pc, #100]	; (80027f4 <lcd_showvars+0x1a4>)
 800278e:	a806      	add	r0, sp, #24
 8002790:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002794:	2a00      	cmp	r2, #0
 8002796:	bfb8      	it	lt
 8002798:	4252      	neglt	r2, r2
 800279a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800279e:	f022 fd43 	bl	8025228 <siprintf>
		setlcdtext("t7.txt", str);
 80027a2:	a906      	add	r1, sp, #24
 80027a4:	4822      	ldr	r0, [pc, #136]	; (8002830 <lcd_showvars+0x1e0>)
 80027a6:	f7ff fdb7 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", pgagain);	// gain
 80027aa:	4b22      	ldr	r3, [pc, #136]	; (8002834 <lcd_showvars+0x1e4>)
 80027ac:	4911      	ldr	r1, [pc, #68]	; (80027f4 <lcd_showvars+0x1a4>)
 80027ae:	a806      	add	r0, sp, #24
 80027b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027b4:	f022 fd38 	bl	8025228 <siprintf>
		setlcdtext("t6.txt", str);
 80027b8:	a906      	add	r1, sp, #24
 80027ba:	481f      	ldr	r0, [pc, #124]	; (8002838 <lcd_showvars+0x1e8>)
 80027bc:	f7ff fdac 	bl	8002318 <setlcdtext>
		sprintf(str, "%d", statuspkt.adcudpover);	// overuns
 80027c0:	6faa      	ldr	r2, [r5, #120]	; 0x78
 80027c2:	490c      	ldr	r1, [pc, #48]	; (80027f4 <lcd_showvars+0x1a4>)
 80027c4:	a806      	add	r0, sp, #24
 80027c6:	f022 fd2f 	bl	8025228 <siprintf>
		setlcdtext("t24.txt", str);
 80027ca:	a906      	add	r1, sp, #24
 80027cc:	481b      	ldr	r0, [pc, #108]	; (800283c <lcd_showvars+0x1ec>)
 80027ce:	f7ff fda3 	bl	8002318 <setlcdtext>
		toggle = 1;
 80027d2:	2301      	movs	r3, #1
 80027d4:	8023      	strh	r3, [r4, #0]
}
 80027d6:	b01f      	add	sp, #124	; 0x7c
 80027d8:	bd30      	pop	{r4, r5, pc}
 80027da:	bf00      	nop
 80027dc:	20001ee0 	.word	0x20001ee0
 80027e0:	1ff0f000 	.word	0x1ff0f000
 80027e4:	200020d4 	.word	0x200020d4
 80027e8:	0802a3c4 	.word	0x0802a3c4
 80027ec:	0802a3f0 	.word	0x0802a3f0
 80027f0:	20002f6c 	.word	0x20002f6c
 80027f4:	0802a428 	.word	0x0802a428
 80027f8:	0802a3b4 	.word	0x0802a3b4
 80027fc:	0802a3bc 	.word	0x0802a3bc
 8002800:	0802a314 	.word	0x0802a314
 8002804:	0802a35c 	.word	0x0802a35c
 8002808:	0802a3ac 	.word	0x0802a3ac
 800280c:	0802a338 	.word	0x0802a338
 8002810:	20002d78 	.word	0x20002d78
 8002814:	0802a364 	.word	0x0802a364
 8002818:	0802a374 	.word	0x0802a374
 800281c:	0802a37c 	.word	0x0802a37c
 8002820:	0802a384 	.word	0x0802a384
 8002824:	200006d4 	.word	0x200006d4
 8002828:	0802a38c 	.word	0x0802a38c
 800282c:	20000724 	.word	0x20000724
 8002830:	0802a394 	.word	0x0802a394
 8002834:	20003340 	.word	0x20003340
 8002838:	0802a39c 	.word	0x0802a39c
 800283c:	0802a3a4 	.word	0x0802a3a4

08002840 <lcd_trigcharts>:

// display / refresh  the entire trigger and noise chart
void lcd_trigcharts() {
 8002840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	trigvec[i] = i % 120;
}
#endif

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Triggers");
 8002844:	4931      	ldr	r1, [pc, #196]	; (800290c <lcd_trigcharts+0xcc>)
void lcd_trigcharts() {
 8002846:	b089      	sub	sp, #36	; 0x24
	setlcdtext("t3.txt", "Triggers");
 8002848:	4831      	ldr	r0, [pc, #196]	; (8002910 <lcd_trigcharts+0xd0>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
	setlcdtext("t2.txt", str);

//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
	buffi = trigindex;
 800284a:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Triggers");
 800284e:	f7ff fd63 	bl	8002318 <setlcdtext>
	setlcdtext("t18.txt", "Triggers");
 8002852:	492e      	ldr	r1, [pc, #184]	; (800290c <lcd_trigcharts+0xcc>)
 8002854:	482f      	ldr	r0, [pc, #188]	; (8002914 <lcd_trigcharts+0xd4>)
 8002856:	f7ff fd5f 	bl	8002318 <setlcdtext>
	setlcdtext("t4.txt", "Noise");
 800285a:	492f      	ldr	r1, [pc, #188]	; (8002918 <lcd_trigcharts+0xd8>)
 800285c:	482f      	ldr	r0, [pc, #188]	; (800291c <lcd_trigcharts+0xdc>)
 800285e:	f7ff fd5b 	bl	8002318 <setlcdtext>
	setlcdtext("t1.txt", "Noise");
 8002862:	492d      	ldr	r1, [pc, #180]	; (8002918 <lcd_trigcharts+0xd8>)
 8002864:	482e      	ldr	r0, [pc, #184]	; (8002920 <lcd_trigcharts+0xe0>)
 8002866:	f7ff fd57 	bl	8002318 <setlcdtext>
	sprintf(str, "%d", statuspkt.trigcount);	// trigger count
 800286a:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <lcd_trigcharts+0xe4>)
 800286c:	492e      	ldr	r1, [pc, #184]	; (8002928 <lcd_trigcharts+0xe8>)
 800286e:	4668      	mov	r0, sp
 8002870:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8002872:	f022 fcd9 	bl	8025228 <siprintf>
	setlcdtext("t0.txt", str);
 8002876:	4669      	mov	r1, sp
 8002878:	482c      	ldr	r0, [pc, #176]	; (800292c <lcd_trigcharts+0xec>)
 800287a:	f7ff fd4d 	bl	8002318 <setlcdtext>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800287e:	4b2c      	ldr	r3, [pc, #176]	; (8002930 <lcd_trigcharts+0xf0>)
 8002880:	4929      	ldr	r1, [pc, #164]	; (8002928 <lcd_trigcharts+0xe8>)
 8002882:	4668      	mov	r0, sp
 8002884:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002888:	4f2a      	ldr	r7, [pc, #168]	; (8002934 <lcd_trigcharts+0xf4>)
 800288a:	2a00      	cmp	r2, #0
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 2)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 800288c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8002950 <lcd_trigcharts+0x110>
 8002890:	4e29      	ldr	r6, [pc, #164]	; (8002938 <lcd_trigcharts+0xf8>)
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 8002892:	bfb8      	it	lt
 8002894:	4252      	neglt	r2, r2
		writelcdcmd(str);
		osDelay(15);

		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 8002896:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8002954 <lcd_trigcharts+0x114>
	sprintf(str, "%d", abs(meanwindiff) & 0xfff);  // noise
 800289a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800289e:	f022 fcc3 	bl	8025228 <siprintf>
	setlcdtext("t2.txt", str);
 80028a2:	4669      	mov	r1, sp
 80028a4:	4825      	ldr	r0, [pc, #148]	; (800293c <lcd_trigcharts+0xfc>)
 80028a6:	f7ff fd37 	bl	8002318 <setlcdtext>
	writelcdcmd("b2.bco=123" /*23275*/);		// dark grey
 80028aa:	4825      	ldr	r0, [pc, #148]	; (8002940 <lcd_trigcharts+0x100>)
 80028ac:	f7ff fd1a 	bl	80022e4 <writelcdcmd>
	buffi = trigindex;
 80028b0:	4b24      	ldr	r3, [pc, #144]	; (8002944 <lcd_trigcharts+0x104>)
 80028b2:	681c      	ldr	r4, [r3, #0]
	for (i = 0; i < LCDXPIXELS; i++) {
 80028b4:	e01c      	b.n	80028f0 <lcd_trigcharts+0xb0>
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80028b6:	f819 2004 	ldrb.w	r2, [r9, r4]
 80028ba:	f022 fcb5 	bl	8025228 <siprintf>
		writelcdcmd(str);
 80028be:	4668      	mov	r0, sp
 80028c0:	f7ff fd10 	bl	80022e4 <writelcdcmd>
		osDelay(15);
 80028c4:	200f      	movs	r0, #15
 80028c6:	f012 fb2f 	bl	8014f28 <osDelay>
		sprintf(str, "add 5,0,%d", noisevec[buffi]);
 80028ca:	f818 2004 	ldrb.w	r2, [r8, r4]
 80028ce:	491e      	ldr	r1, [pc, #120]	; (8002948 <lcd_trigcharts+0x108>)
 80028d0:	4668      	mov	r0, sp
 80028d2:	f022 fca9 	bl	8025228 <siprintf>
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80028d6:	3401      	adds	r4, #1
		writelcdcmd(str);
 80028d8:	4668      	mov	r0, sp
 80028da:	f7ff fd03 	bl	80022e4 <writelcdcmd>
		osDelay(15);
 80028de:	200f      	movs	r0, #15
 80028e0:	f012 fb22 	bl	8014f28 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80028e4:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80028e8:	bfc8      	it	gt
 80028ea:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80028ec:	3d01      	subs	r5, #1
 80028ee:	d007      	beq.n	8002900 <lcd_trigcharts+0xc0>
		if (our_currentpage != 2)		// impatient user
 80028f0:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", trigvec[buffi]);
 80028f2:	4631      	mov	r1, r6
 80028f4:	4668      	mov	r0, sp
		if (our_currentpage != 2)		// impatient user
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d0dd      	beq.n	80028b6 <lcd_trigcharts+0x76>
	}
//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80028fa:	b009      	add	sp, #36	; 0x24
 80028fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 8002900:	4812      	ldr	r0, [pc, #72]	; (800294c <lcd_trigcharts+0x10c>)
 8002902:	f7ff fcef 	bl	80022e4 <writelcdcmd>
}
 8002906:	b009      	add	sp, #36	; 0x24
 8002908:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800290c:	0802a3f8 	.word	0x0802a3f8
 8002910:	0802a338 	.word	0x0802a338
 8002914:	0802a404 	.word	0x0802a404
 8002918:	0802a40c 	.word	0x0802a40c
 800291c:	0802a3b4 	.word	0x0802a3b4
 8002920:	0802a35c 	.word	0x0802a35c
 8002924:	20002f6c 	.word	0x20002f6c
 8002928:	0802a428 	.word	0x0802a428
 800292c:	0802a314 	.word	0x0802a314
 8002930:	20000724 	.word	0x20000724
 8002934:	20001ca0 	.word	0x20001ca0
 8002938:	0802a420 	.word	0x0802a420
 800293c:	0802a3ac 	.word	0x0802a3ac
 8002940:	0802a414 	.word	0x0802a414
 8002944:	20001ee4 	.word	0x20001ee4
 8002948:	0802a42c 	.word	0x0802a42c
 800294c:	0802a438 	.word	0x0802a438
 8002950:	20001ee8 	.word	0x20001ee8
 8002954:	20001ac0 	.word	0x20001ac0

08002958 <lcd_presscharts>:
		trigindex = 0;
}

/// PRESSURE //////////////
// display / refresh  the entire pressure chart
void lcd_presscharts() {
 8002958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i, buffi;
	unsigned char str[32];

// refresh the labels as pior page queued commands can clobber them
	setlcdtext("t3.txt", "Pressure");
 800295c:	4920      	ldr	r1, [pc, #128]	; (80029e0 <lcd_presscharts+0x88>)
void lcd_presscharts() {
 800295e:	b088      	sub	sp, #32
	setlcdtext("t3.txt", "Pressure");
 8002960:	4820      	ldr	r0, [pc, #128]	; (80029e4 <lcd_presscharts+0x8c>)
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
	setlcdtext("t0.txt", str);

//	writelcdcmd("tsw b2,1");	// enable touch controls
	writelcdcmd("b2.bco=123");		// normal grey
	buffi = pressindex;
 8002962:	f44f 75f0 	mov.w	r5, #480	; 0x1e0
	setlcdtext("t3.txt", "Pressure");
 8002966:	f7ff fcd7 	bl	8002318 <setlcdtext>
	setlcdtext("t18.txt", "Pressure");
 800296a:	491d      	ldr	r1, [pc, #116]	; (80029e0 <lcd_presscharts+0x88>)
 800296c:	481e      	ldr	r0, [pc, #120]	; (80029e8 <lcd_presscharts+0x90>)
 800296e:	f7ff fcd3 	bl	8002318 <setlcdtext>
	sprintf(str, "%d.%03d kPa", pressure, pressfrac >> 2);	// pressure
 8002972:	4b1e      	ldr	r3, [pc, #120]	; (80029ec <lcd_presscharts+0x94>)
 8002974:	4a1e      	ldr	r2, [pc, #120]	; (80029f0 <lcd_presscharts+0x98>)
 8002976:	4668      	mov	r0, sp
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	491d      	ldr	r1, [pc, #116]	; (80029f4 <lcd_presscharts+0x9c>)
 8002980:	f022 fc52 	bl	8025228 <siprintf>
	setlcdtext("t0.txt", str);
 8002984:	4669      	mov	r1, sp
 8002986:	481c      	ldr	r0, [pc, #112]	; (80029f8 <lcd_presscharts+0xa0>)
 8002988:	f7ff fcc6 	bl	8002318 <setlcdtext>
	writelcdcmd("b2.bco=123");		// normal grey
 800298c:	481b      	ldr	r0, [pc, #108]	; (80029fc <lcd_presscharts+0xa4>)
 800298e:	f7ff fca9 	bl	80022e4 <writelcdcmd>
	buffi = pressindex;
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <lcd_presscharts+0xa8>)
 8002994:	4f1b      	ldr	r7, [pc, #108]	; (8002a04 <lcd_presscharts+0xac>)
	for (i = 0; i < LCDXPIXELS; i++) {
		if (our_currentpage != 3)		// impatient user
			return;
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 8002996:	f8df 8078 	ldr.w	r8, [pc, #120]	; 8002a10 <lcd_presscharts+0xb8>
	buffi = pressindex;
 800299a:	681c      	ldr	r4, [r3, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 800299c:	4e1a      	ldr	r6, [pc, #104]	; (8002a08 <lcd_presscharts+0xb0>)
 800299e:	e010      	b.n	80029c2 <lcd_presscharts+0x6a>
 80029a0:	f818 2004 	ldrb.w	r2, [r8, r4]
		writelcdcmd(str);
		osDelay(15);

		buffi++;
 80029a4:	3401      	adds	r4, #1
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80029a6:	f022 fc3f 	bl	8025228 <siprintf>
		writelcdcmd(str);
 80029aa:	4668      	mov	r0, sp
 80029ac:	f7ff fc9a 	bl	80022e4 <writelcdcmd>
		osDelay(15);
 80029b0:	200f      	movs	r0, #15
 80029b2:	f012 fab9 	bl	8014f28 <osDelay>
		if (buffi > LCDXPIXELS)
			buffi = 0;
 80029b6:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 80029ba:	bfc8      	it	gt
 80029bc:	2400      	movgt	r4, #0
	for (i = 0; i < LCDXPIXELS; i++) {
 80029be:	3d01      	subs	r5, #1
 80029c0:	d007      	beq.n	80029d2 <lcd_presscharts+0x7a>
		if (our_currentpage != 3)		// impatient user
 80029c2:	783b      	ldrb	r3, [r7, #0]
		sprintf(str, "add 2,0,%d", pressvec[buffi]);
 80029c4:	4631      	mov	r1, r6
 80029c6:	4668      	mov	r0, sp
		if (our_currentpage != 3)		// impatient user
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d0e9      	beq.n	80029a0 <lcd_presscharts+0x48>
	}
//	writelcdcmd("tsw b2,0");	// disable touch controls
	writelcdcmd("b2.bco=63422");		// normal grey
}
 80029cc:	b008      	add	sp, #32
 80029ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	writelcdcmd("b2.bco=63422");		// normal grey
 80029d2:	480e      	ldr	r0, [pc, #56]	; (8002a0c <lcd_presscharts+0xb4>)
 80029d4:	f7ff fc86 	bl	80022e4 <writelcdcmd>
}
 80029d8:	b008      	add	sp, #32
 80029da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029de:	bf00      	nop
 80029e0:	0802a448 	.word	0x0802a448
 80029e4:	0802a338 	.word	0x0802a338
 80029e8:	0802a404 	.word	0x0802a404
 80029ec:	20003344 	.word	0x20003344
 80029f0:	20003348 	.word	0x20003348
 80029f4:	0802a454 	.word	0x0802a454
 80029f8:	0802a314 	.word	0x0802a314
 80029fc:	0802a414 	.word	0x0802a414
 8002a00:	20001ca4 	.word	0x20001ca4
 8002a04:	20001ca0 	.word	0x20001ca0
 8002a08:	0802a420 	.word	0x0802a420
 8002a0c:	0802a438 	.word	0x0802a438
 8002a10:	20001ca8 	.word	0x20001ca8

08002a14 <lcd_controls>:
	if (pressindex >= LCDXPIXELS)
		pressindex = 0;
}

// refresh the entire control page on the lcd
lcd_controls() {
 8002a14:	b500      	push	{lr}
	unsigned char str[48];

	osDelay(100);
 8002a16:	2064      	movs	r0, #100	; 0x64
lcd_controls() {
 8002a18:	b08d      	sub	sp, #52	; 0x34
	osDelay(100);
 8002a1a:	f012 fa85 	bl	8014f28 <osDelay>
	if (our_currentpage == 4) {		// if currently displaying on LCD
 8002a1e:	4b0f      	ldr	r3, [pc, #60]	; (8002a5c <lcd_controls+0x48>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d002      	beq.n	8002a2c <lcd_controls+0x18>
//	sprintf(str,"%s Control Server IP: %lu.%lu.%lu.%lu", SERVER_DESTINATION, ip & 0xff, (ip & 0xff00) >> 8,
//			(ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
		sprintf(str, "Target UDP host: %s\n", udp_target);
		setlcdtext("t3.txt", str);
	}
}
 8002a26:	b00d      	add	sp, #52	; 0x34
 8002a28:	f85d fb04 	ldr.w	pc, [sp], #4
		setlcdtext("t0.txt", "Sound");
 8002a2c:	490c      	ldr	r1, [pc, #48]	; (8002a60 <lcd_controls+0x4c>)
 8002a2e:	480d      	ldr	r0, [pc, #52]	; (8002a64 <lcd_controls+0x50>)
 8002a30:	f7ff fc72 	bl	8002318 <setlcdtext>
		setlcdtext("t1.txt", "LEDS");
 8002a34:	490c      	ldr	r1, [pc, #48]	; (8002a68 <lcd_controls+0x54>)
 8002a36:	480d      	ldr	r0, [pc, #52]	; (8002a6c <lcd_controls+0x58>)
 8002a38:	f7ff fc6e 	bl	8002318 <setlcdtext>
		setlcdtext("t2.txt", "LCD Brightness");
 8002a3c:	490c      	ldr	r1, [pc, #48]	; (8002a70 <lcd_controls+0x5c>)
 8002a3e:	480d      	ldr	r0, [pc, #52]	; (8002a74 <lcd_controls+0x60>)
 8002a40:	f7ff fc6a 	bl	8002318 <setlcdtext>
		sprintf(str, "Target UDP host: %s\n", udp_target);
 8002a44:	4a0c      	ldr	r2, [pc, #48]	; (8002a78 <lcd_controls+0x64>)
 8002a46:	490d      	ldr	r1, [pc, #52]	; (8002a7c <lcd_controls+0x68>)
 8002a48:	4668      	mov	r0, sp
 8002a4a:	f022 fbed 	bl	8025228 <siprintf>
		setlcdtext("t3.txt", str);
 8002a4e:	4669      	mov	r1, sp
 8002a50:	480b      	ldr	r0, [pc, #44]	; (8002a80 <lcd_controls+0x6c>)
 8002a52:	f7ff fc61 	bl	8002318 <setlcdtext>
}
 8002a56:	b00d      	add	sp, #52	; 0x34
 8002a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a5c:	20001ca0 	.word	0x20001ca0
 8002a60:	0802a460 	.word	0x0802a460
 8002a64:	0802a314 	.word	0x0802a314
 8002a68:	0802a468 	.word	0x0802a468
 8002a6c:	0802a35c 	.word	0x0802a35c
 8002a70:	0802a470 	.word	0x0802a470
 8002a74:	0802a3ac 	.word	0x0802a3ac
 8002a78:	20003420 	.word	0x20003420
 8002a7c:	0802a480 	.word	0x0802a480
 8002a80:	0802a338 	.word	0x0802a338

08002a84 <lcd_pagechange>:
lcd_pagechange(uint8_t newpage) {
 8002a84:	b510      	push	{r4, lr}
	if (newpage == our_currentpage)			// we are already on the page the LCD is on
 8002a86:	4c1b      	ldr	r4, [pc, #108]	; (8002af4 <lcd_pagechange+0x70>)
 8002a88:	7823      	ldrb	r3, [r4, #0]
 8002a8a:	4283      	cmp	r3, r0
 8002a8c:	d016      	beq.n	8002abc <lcd_pagechange+0x38>
	our_currentpage = newpage;
 8002a8e:	7020      	strb	r0, [r4, #0]
	switch (newpage) {
 8002a90:	2805      	cmp	r0, #5
 8002a92:	d82a      	bhi.n	8002aea <lcd_pagechange+0x66>
 8002a94:	e8df f000 	tbb	[pc, r0]
 8002a98:	241f1a03 	.word	0x241f1a03
 8002a9c:	1215      	.short	0x1215
		lcd_time();
 8002a9e:	f7ff fd81 	bl	80025a4 <lcd_time>
	lastday = timeinfo.tm_yday;
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <lcd_pagechange+0x74>)
 8002aa4:	4915      	ldr	r1, [pc, #84]	; (8002afc <lcd_pagechange+0x78>)
 8002aa6:	69d8      	ldr	r0, [r3, #28]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <lcd_pagechange+0x7c>)
	lastday = timeinfo.tm_yday;
 8002aaa:	6008      	str	r0, [r1, #0]
	strftime(sbuffer, sizeof(sbuffer), "%a %e %h %Y ", &timeinfo);
 8002aac:	2128      	movs	r1, #40	; 0x28
 8002aae:	4815      	ldr	r0, [pc, #84]	; (8002b04 <lcd_pagechange+0x80>)
 8002ab0:	f023 f9a2 	bl	8025df8 <strftime>
	setlcdtext("t1.txt", sbuffer);
 8002ab4:	4913      	ldr	r1, [pc, #76]	; (8002b04 <lcd_pagechange+0x80>)
 8002ab6:	4814      	ldr	r0, [pc, #80]	; (8002b08 <lcd_pagechange+0x84>)
 8002ab8:	f7ff fc2e 	bl	8002318 <setlcdtext>
	return (our_currentpage);
 8002abc:	7820      	ldrb	r0, [r4, #0]
 8002abe:	b2c0      	uxtb	r0, r0
}
 8002ac0:	bd10      	pop	{r4, pc}
		lcd_controls();
 8002ac2:	f7ff ffa7 	bl	8002a14 <lcd_controls>
	return (our_currentpage);
 8002ac6:	7820      	ldrb	r0, [r4, #0]
 8002ac8:	b2c0      	uxtb	r0, r0
}
 8002aca:	bd10      	pop	{r4, pc}
		lcd_showvars();		// display vars on the lcd
 8002acc:	f7ff fdc0 	bl	8002650 <lcd_showvars>
	return (our_currentpage);
 8002ad0:	7820      	ldrb	r0, [r4, #0]
 8002ad2:	b2c0      	uxtb	r0, r0
}
 8002ad4:	bd10      	pop	{r4, pc}
		lcd_trigcharts();		// display chart
 8002ad6:	f7ff feb3 	bl	8002840 <lcd_trigcharts>
	return (our_currentpage);
 8002ada:	7820      	ldrb	r0, [r4, #0]
 8002adc:	b2c0      	uxtb	r0, r0
}
 8002ade:	bd10      	pop	{r4, pc}
		lcd_presscharts();			// display pressure chart
 8002ae0:	f7ff ff3a 	bl	8002958 <lcd_presscharts>
	return (our_currentpage);
 8002ae4:	7820      	ldrb	r0, [r4, #0]
 8002ae6:	b2c0      	uxtb	r0, r0
}
 8002ae8:	bd10      	pop	{r4, pc}
		printf("Unknown page number\n");
 8002aea:	4808      	ldr	r0, [pc, #32]	; (8002b0c <lcd_pagechange+0x88>)
 8002aec:	f022 fa4e 	bl	8024f8c <puts>
		break;
 8002af0:	e7e4      	b.n	8002abc <lcd_pagechange+0x38>
 8002af2:	bf00      	nop
 8002af4:	20001ca0 	.word	0x20001ca0
 8002af8:	20001ebc 	.word	0x20001ebc
 8002afc:	200019fc 	.word	0x200019fc
 8002b00:	0802a34c 	.word	0x0802a34c
 8002b04:	20001e90 	.word	0x20001e90
 8002b08:	0802a35c 	.word	0x0802a35c
 8002b0c:	0802a498 	.word	0x0802a498

08002b10 <lcd_event_process>:
int lcd_event_process(void) {
 8002b10:	b530      	push	{r4, r5, lr}
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002b12:	4c8f      	ldr	r4, [pc, #572]	; (8002d50 <lcd_event_process+0x240>)
int lcd_event_process(void) {
 8002b14:	b083      	sub	sp, #12
	result = isnexpkt(eventbuffer, sizeof(eventbuffer));
 8002b16:	2160      	movs	r1, #96	; 0x60
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f7ff fc79 	bl	8002410 <isnexpkt>
 8002b1e:	9001      	str	r0, [sp, #4]
	if (result <= 0) {
 8002b20:	9b01      	ldr	r3, [sp, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	dd27      	ble.n	8002b76 <lcd_event_process+0x66>
		lcdstatus = eventbuffer[0];
 8002b26:	7821      	ldrb	r1, [r4, #0]
 8002b28:	4b8a      	ldr	r3, [pc, #552]	; (8002d54 <lcd_event_process+0x244>)
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002b2a:	2923      	cmp	r1, #35	; 0x23
		lcdstatus = eventbuffer[0];
 8002b2c:	7019      	strb	r1, [r3, #0]
		if ((eventbuffer[0] >= NEX_SINV) && (eventbuffer[0] <= NEX_SLEN)) {	// a status code packet - eg error
 8002b2e:	d91e      	bls.n	8002b6e <lcd_event_process+0x5e>
			switch (eventbuffer[0]) {
 8002b30:	2924      	cmp	r1, #36	; 0x24
 8002b32:	f000 80cb 	beq.w	8002ccc <lcd_event_process+0x1bc>
 8002b36:	f1a1 0363 	sub.w	r3, r1, #99	; 0x63
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	2a25      	cmp	r2, #37	; 0x25
 8002b3e:	d81d      	bhi.n	8002b7c <lcd_event_process+0x6c>
 8002b40:	2b25      	cmp	r3, #37	; 0x25
 8002b42:	d81b      	bhi.n	8002b7c <lcd_event_process+0x6c>
 8002b44:	e8df f003 	tbb	[pc, r3]
 8002b48:	6c8c1a98 	.word	0x6c8c1a98
 8002b4c:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b50:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b54:	1aa41a1a 	.word	0x1aa41a1a
 8002b58:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b5c:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b60:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b64:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b68:	1a1a1a1a 	.word	0x1a1a1a1a
 8002b6c:	671a      	.short	0x671a
			if (eventbuffer[0] != NEX_SOK) {		// returned status from instruction was not OK
 8002b6e:	2901      	cmp	r1, #1
 8002b70:	d123      	bne.n	8002bba <lcd_event_process+0xaa>
}
 8002b72:	b003      	add	sp, #12
 8002b74:	bd30      	pop	{r4, r5, pc}
		return (result);		// 0 = nothing found, -1 = timeout, -2=no char
 8002b76:	9801      	ldr	r0, [sp, #4]
}
 8002b78:	b003      	add	sp, #12
 8002b7a:	bd30      	pop	{r4, r5, pc}
				printf("lcd_event_process: unknown response received 0x%x\n", eventbuffer[0]);
 8002b7c:	4876      	ldr	r0, [pc, #472]	; (8002d58 <lcd_event_process+0x248>)
 8002b7e:	f022 f969 	bl	8024e54 <iprintf>
				i = 0;
 8002b82:	2300      	movs	r3, #0
 8002b84:	9300      	str	r3, [sp, #0]
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002b86:	9b00      	ldr	r3, [sp, #0]
 8002b88:	5ce3      	ldrb	r3, [r4, r3]
 8002b8a:	2bff      	cmp	r3, #255	; 0xff
 8002b8c:	d00f      	beq.n	8002bae <lcd_event_process+0x9e>
					printf(" 0x%02x", eventbuffer[i++]);
 8002b8e:	4d73      	ldr	r5, [pc, #460]	; (8002d5c <lcd_event_process+0x24c>)
 8002b90:	e009      	b.n	8002ba6 <lcd_event_process+0x96>
 8002b92:	9b00      	ldr	r3, [sp, #0]
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	5ce1      	ldrb	r1, [r4, r3]
 8002b98:	9200      	str	r2, [sp, #0]
 8002b9a:	f022 f95b 	bl	8024e54 <iprintf>
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002b9e:	9b00      	ldr	r3, [sp, #0]
 8002ba0:	5ce3      	ldrb	r3, [r4, r3]
 8002ba2:	2bff      	cmp	r3, #255	; 0xff
 8002ba4:	d003      	beq.n	8002bae <lcd_event_process+0x9e>
 8002ba6:	9b00      	ldr	r3, [sp, #0]
					printf(" 0x%02x", eventbuffer[i++]);
 8002ba8:	4628      	mov	r0, r5
				while ((eventbuffer[i] != 0xff) && (i < sizeof(eventbuffer))) {
 8002baa:	2b5f      	cmp	r3, #95	; 0x5f
 8002bac:	d9f1      	bls.n	8002b92 <lcd_event_process+0x82>
				printf("\n");
 8002bae:	200a      	movs	r0, #10
 8002bb0:	f022 f968 	bl	8024e84 <putchar>
				return (-1);
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	e7db      	b.n	8002b72 <lcd_event_process+0x62>
				printf("Nextion reported: ");
 8002bba:	4869      	ldr	r0, [pc, #420]	; (8002d60 <lcd_event_process+0x250>)
 8002bbc:	f022 f94a 	bl	8024e54 <iprintf>
				switch (eventbuffer[0]) {
 8002bc0:	7821      	ldrb	r1, [r4, #0]
 8002bc2:	2924      	cmp	r1, #36	; 0x24
 8002bc4:	f200 8087 	bhi.w	8002cd6 <lcd_event_process+0x1c6>
 8002bc8:	e8df f011 	tbh	[pc, r1, lsl #1]
 8002bcc:	01100115 	.word	0x01100115
 8002bd0:	0085010b 	.word	0x0085010b
 8002bd4:	01020085 	.word	0x01020085
 8002bd8:	00850085 	.word	0x00850085
 8002bdc:	00850085 	.word	0x00850085
 8002be0:	00850085 	.word	0x00850085
 8002be4:	00850085 	.word	0x00850085
 8002be8:	00850085 	.word	0x00850085
 8002bec:	00850085 	.word	0x00850085
 8002bf0:	008500fa 	.word	0x008500fa
 8002bf4:	00850085 	.word	0x00850085
 8002bf8:	00850085 	.word	0x00850085
 8002bfc:	00850085 	.word	0x00850085
 8002c00:	008500f2 	.word	0x008500f2
 8002c04:	008500bc 	.word	0x008500bc
 8002c08:	008500b6 	.word	0x008500b6
 8002c0c:	008500aa 	.word	0x008500aa
 8002c10:	00a40085 	.word	0x00a40085
 8002c14:	00b0      	.short	0x00b0
				printf("Nextion returned 0x88 - Ready!\n");
 8002c16:	4853      	ldr	r0, [pc, #332]	; (8002d64 <lcd_event_process+0x254>)
 8002c18:	f022 f9b8 	bl	8024f8c <puts>
			return (0);
 8002c1c:	2000      	movs	r0, #0
				break;
 8002c1e:	e7a8      	b.n	8002b72 <lcd_event_process+0x62>
				setlcddim(lcdbright);
 8002c20:	4951      	ldr	r1, [pc, #324]	; (8002d68 <lcd_event_process+0x258>)
	dimtimer = DIMTIME;
 8002c22:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002c26:	4b51      	ldr	r3, [pc, #324]	; (8002d6c <lcd_event_process+0x25c>)
				setlcddim(lcdbright);
 8002c28:	6809      	ldr	r1, [r1, #0]
	setlcdbin("dim", level);
 8002c2a:	4851      	ldr	r0, [pc, #324]	; (8002d70 <lcd_event_process+0x260>)
 8002c2c:	2963      	cmp	r1, #99	; 0x63
	dimtimer = DIMTIME;
 8002c2e:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002c30:	bf28      	it	cs
 8002c32:	2163      	movcs	r1, #99	; 0x63
 8002c34:	f7ff fb96 	bl	8002364 <setlcdbin>
				if (((lcd_pagechange(eventbuffer[1]) < 0) || (lcd_pagechange(eventbuffer[1]) > 5)))	// page number limits
 8002c38:	7860      	ldrb	r0, [r4, #1]
 8002c3a:	f7ff ff23 	bl	8002a84 <lcd_pagechange>
 8002c3e:	2800      	cmp	r0, #0
 8002c40:	db05      	blt.n	8002c4e <lcd_event_process+0x13e>
 8002c42:	7860      	ldrb	r0, [r4, #1]
 8002c44:	f7ff ff1e 	bl	8002a84 <lcd_pagechange>
 8002c48:	2805      	cmp	r0, #5
 8002c4a:	f340 80dd 	ble.w	8002e08 <lcd_event_process+0x2f8>
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002c4e:	7860      	ldrb	r0, [r4, #1]
 8002c50:	f7ff ff18 	bl	8002a84 <lcd_pagechange>
 8002c54:	4601      	mov	r1, r0
 8002c56:	4847      	ldr	r0, [pc, #284]	; (8002d74 <lcd_event_process+0x264>)
 8002c58:	f022 f8fc 	bl	8024e54 <iprintf>
			return (0);
 8002c5c:	2000      	movs	r0, #0
					printf("lcd_event_process: invalid page received %d\n", lcd_pagechange(eventbuffer[1]));
 8002c5e:	e788      	b.n	8002b72 <lcd_event_process+0x62>
				printf("lcd_event_process: Got Touch event %0x %0x %0x\n", eventbuffer[1], eventbuffer[2],
 8002c60:	78e3      	ldrb	r3, [r4, #3]
 8002c62:	78a2      	ldrb	r2, [r4, #2]
 8002c64:	7861      	ldrb	r1, [r4, #1]
 8002c66:	4844      	ldr	r0, [pc, #272]	; (8002d78 <lcd_event_process+0x268>)
 8002c68:	f022 f8f4 	bl	8024e54 <iprintf>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002c6c:	7863      	ldrb	r3, [r4, #1]
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d037      	beq.n	8002ce2 <lcd_event_process+0x1d2>
			return (0);
 8002c72:	2000      	movs	r0, #0
}
 8002c74:	b003      	add	sp, #12
 8002c76:	bd30      	pop	{r4, r5, pc}
				decode_lcdtype(eventbuffer);
 8002c78:	4835      	ldr	r0, [pc, #212]	; (8002d50 <lcd_event_process+0x240>)
 8002c7a:	f7ff fc41 	bl	8002500 <decode_lcdtype>
				if (nex_model[0] != '\0') {
 8002c7e:	493f      	ldr	r1, [pc, #252]	; (8002d7c <lcd_event_process+0x26c>)
 8002c80:	780b      	ldrb	r3, [r1, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f5      	beq.n	8002c72 <lcd_event_process+0x162>
					printf("Nextion LCD Model: %s\n", nex_model);
 8002c86:	483e      	ldr	r0, [pc, #248]	; (8002d80 <lcd_event_process+0x270>)
 8002c88:	f022 f8e4 	bl	8024e54 <iprintf>
			return (0);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	e770      	b.n	8002b72 <lcd_event_process+0x62>
	if ((str[0] == 0x71) && (str[5] = 0xff) && (str[6] == 0xff) && (str[7] == 0xff)) {
 8002c90:	79a3      	ldrb	r3, [r4, #6]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	79e1      	ldrb	r1, [r4, #7]
 8002c96:	7162      	strb	r2, [r4, #5]
 8002c98:	400b      	ands	r3, r1
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	f040 80b1 	bne.w	8002e02 <lcd_event_process+0x2f2>
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	; (8002d50 <lcd_event_process+0x240>)
	number = 0;
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	1d10      	adds	r0, r2, #4
			number = number | (str[i] << 24);
 8002ca6:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8002caa:	061b      	lsls	r3, r3, #24
		for (i = 1; i < 5; i++) {
 8002cac:	4290      	cmp	r0, r2
			number = number | (str[i] << 24);
 8002cae:	ea43 2121 	orr.w	r1, r3, r1, asr #8
		for (i = 1; i < 5; i++) {
 8002cb2:	d1f8      	bne.n	8002ca6 <lcd_event_process+0x196>
				if (nex_model[0] != '\0') {
 8002cb4:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <lcd_event_process+0x26c>)
				lcd_sys0 = decode_int(eventbuffer);
 8002cb6:	4b33      	ldr	r3, [pc, #204]	; (8002d84 <lcd_event_process+0x274>)
				if (nex_model[0] != '\0') {
 8002cb8:	7812      	ldrb	r2, [r2, #0]
				lcd_sys0 = decode_int(eventbuffer);
 8002cba:	6019      	str	r1, [r3, #0]
				if (nex_model[0] != '\0') {
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	d0d8      	beq.n	8002c72 <lcd_event_process+0x162>
					printf("Nextion LCD Integer: 0x%0x\n", lcd_sys0);
 8002cc0:	6819      	ldr	r1, [r3, #0]
 8002cc2:	4831      	ldr	r0, [pc, #196]	; (8002d88 <lcd_event_process+0x278>)
 8002cc4:	f022 f8c6 	bl	8024e54 <iprintf>
			return (0);
 8002cc8:	2000      	movs	r0, #0
 8002cca:	e752      	b.n	8002b72 <lcd_event_process+0x62>
				printf("Serial Buffer Overflow!\n");
 8002ccc:	482f      	ldr	r0, [pc, #188]	; (8002d8c <lcd_event_process+0x27c>)
 8002cce:	f022 f95d 	bl	8024f8c <puts>
				return (1);
 8002cd2:	2001      	movs	r0, #1
 8002cd4:	e74d      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Error status 0x%02x\n\r", eventbuffer[0]);
 8002cd6:	482e      	ldr	r0, [pc, #184]	; (8002d90 <lcd_event_process+0x280>)
 8002cd8:	f022 f8bc 	bl	8024e54 <iprintf>
				return (-1);		// some kindof error
 8002cdc:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002ce0:	e747      	b.n	8002b72 <lcd_event_process+0x62>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 6)) {		// p4 id 6 brightness slider
 8002ce2:	78a3      	ldrb	r3, [r4, #2]
 8002ce4:	2b06      	cmp	r3, #6
 8002ce6:	f000 80a9 	beq.w	8002e3c <lcd_event_process+0x32c>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	f000 80c9 	beq.w	8002e82 <lcd_event_process+0x372>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	f000 8092 	beq.w	8002e1a <lcd_event_process+0x30a>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d1bb      	bne.n	8002c72 <lcd_event_process+0x162>
					if (eventbuffer[3] == 1) 		// sound on
 8002cfa:	78e3      	ldrb	r3, [r4, #3]
 8002cfc:	4a25      	ldr	r2, [pc, #148]	; (8002d94 <lcd_event_process+0x284>)
 8002cfe:	f1a3 0301 	sub.w	r3, r3, #1
					printf("LEDS touch\n");
 8002d02:	4825      	ldr	r0, [pc, #148]	; (8002d98 <lcd_event_process+0x288>)
					if (eventbuffer[3] == 1) 		// sound on
 8002d04:	fab3 f383 	clz	r3, r3
 8002d08:	095b      	lsrs	r3, r3, #5
 8002d0a:	8013      	strh	r3, [r2, #0]
					printf("LEDS touch\n");
 8002d0c:	f022 f93e 	bl	8024f8c <puts>
			return (0);
 8002d10:	2000      	movs	r0, #0
 8002d12:	e72e      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Variable name too long\n");
 8002d14:	4821      	ldr	r0, [pc, #132]	; (8002d9c <lcd_event_process+0x28c>)
 8002d16:	f022 f939 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002d1a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d1e:	e728      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Invalid escape char\n");
 8002d20:	481f      	ldr	r0, [pc, #124]	; (8002da0 <lcd_event_process+0x290>)
 8002d22:	f022 f933 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002d26:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d2a:	e722      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Ser Buffer overflow\n");
 8002d2c:	481d      	ldr	r0, [pc, #116]	; (8002da4 <lcd_event_process+0x294>)
 8002d2e:	f022 f92d 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002d32:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d36:	e71c      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Invalid number of parameters\n");
 8002d38:	481b      	ldr	r0, [pc, #108]	; (8002da8 <lcd_event_process+0x298>)
 8002d3a:	f022 f927 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002d3e:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d42:	e716      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Attribute assignment failed\n");
 8002d44:	4819      	ldr	r0, [pc, #100]	; (8002dac <lcd_event_process+0x29c>)
 8002d46:	f022 f921 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002d4a:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002d4e:	e710      	b.n	8002b72 <lcd_event_process+0x62>
 8002d50:	20001994 	.word	0x20001994
 8002d54:	20001a98 	.word	0x20001a98
 8002d58:	0802a6dc 	.word	0x0802a6dc
 8002d5c:	0802a710 	.word	0x0802a710
 8002d60:	0802a4ac 	.word	0x0802a4ac
 8002d64:	0802a634 	.word	0x0802a634
 8002d68:	20000010 	.word	0x20000010
 8002d6c:	2000000c 	.word	0x2000000c
 8002d70:	0802a300 	.word	0x0802a300
 8002d74:	0802a6ac 	.word	0x0802a6ac
 8002d78:	0802a654 	.word	0x0802a654
 8002d7c:	20001aa8 	.word	0x20001aa8
 8002d80:	0802a600 	.word	0x0802a600
 8002d84:	20001a0c 	.word	0x20001a0c
 8002d88:	0802a618 	.word	0x0802a618
 8002d8c:	0802a5e8 	.word	0x0802a5e8
 8002d90:	0802a5d0 	.word	0x0802a5d0
 8002d94:	20000254 	.word	0x20000254
 8002d98:	0802a6a0 	.word	0x0802a6a0
 8002d9c:	0802a4e4 	.word	0x0802a4e4
 8002da0:	0802a530 	.word	0x0802a530
 8002da4:	0802a4fc 	.word	0x0802a4fc
 8002da8:	0802a510 	.word	0x0802a510
 8002dac:	0802a544 	.word	0x0802a544
					printf("Invalid variable\n");		// so we might be on the wrong LCD page?
 8002db0:	483b      	ldr	r0, [pc, #236]	; (8002ea0 <lcd_event_process+0x390>)
 8002db2:	f022 f8eb 	bl	8024f8c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 8002db6:	f000 f9d3 	bl	8003160 <getlcdpage>
				return (-1);		// some kindof error
 8002dba:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002dbe:	e6d8      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Invalid waveform ID\n");
 8002dc0:	4838      	ldr	r0, [pc, #224]	; (8002ea4 <lcd_event_process+0x394>)
 8002dc2:	f022 f8e3 	bl	8024f8c <puts>
					getlcdpage();				// no point in waiting for result to come in the rx queue
 8002dc6:	f000 f9cb 	bl	8003160 <getlcdpage>
				return (-1);		// some kindof error
 8002dca:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002dce:	e6d0      	b.n	8002b72 <lcd_event_process+0x62>
					if (http_downloading == NXT_LOADING) {	// return code 0x05 is good - block rcv'd
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <lcd_event_process+0x398>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b02      	cmp	r3, #2
 8002dd6:	d04a      	beq.n	8002e6e <lcd_event_process+0x35e>
						printf("NXT Error 0x05\n");
 8002dd8:	4834      	ldr	r0, [pc, #208]	; (8002eac <lcd_event_process+0x39c>)
 8002dda:	f022 f8d7 	bl	8024f8c <puts>
					return (0);
 8002dde:	2000      	movs	r0, #0
 8002de0:	e6c7      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Invalid Component ID\n");
 8002de2:	4833      	ldr	r0, [pc, #204]	; (8002eb0 <lcd_event_process+0x3a0>)
 8002de4:	f022 f8d2 	bl	8024f8c <puts>
					return (0);
 8002de8:	2000      	movs	r0, #0
 8002dea:	e6c2      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Successful execution\n");
 8002dec:	4831      	ldr	r0, [pc, #196]	; (8002eb4 <lcd_event_process+0x3a4>)
 8002dee:	f022 f8cd 	bl	8024f8c <puts>
					return (0);
 8002df2:	2000      	movs	r0, #0
 8002df4:	e6bd      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Invalid command\n");
 8002df6:	4830      	ldr	r0, [pc, #192]	; (8002eb8 <lcd_event_process+0x3a8>)
 8002df8:	f022 f8c8 	bl	8024f8c <puts>
				return (-1);		// some kindof error
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295
					break;
 8002e00:	e6b7      	b.n	8002b72 <lcd_event_process+0x62>
		return (0xffffffff);
 8002e02:	f04f 31ff 	mov.w	r1, #4294967295
 8002e06:	e755      	b.n	8002cb4 <lcd_event_process+0x1a4>
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002e08:	7860      	ldrb	r0, [r4, #1]
 8002e0a:	f7ff fe3b 	bl	8002a84 <lcd_pagechange>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a2a      	ldr	r2, [pc, #168]	; (8002ebc <lcd_event_process+0x3ac>)
			return (0);
 8002e12:	2000      	movs	r0, #0
					lcd_currentpage = lcd_pagechange(eventbuffer[1]);
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	7013      	strb	r3, [r2, #0]
 8002e18:	e6ab      	b.n	8002b72 <lcd_event_process+0x62>
					if (eventbuffer[3] == 1) 		// sound on
 8002e1a:	78e3      	ldrb	r3, [r4, #3]
 8002e1c:	4a28      	ldr	r2, [pc, #160]	; (8002ec0 <lcd_event_process+0x3b0>)
 8002e1e:	f1a3 0301 	sub.w	r3, r3, #1
					printf("Sound touch\n");
 8002e22:	4828      	ldr	r0, [pc, #160]	; (8002ec4 <lcd_event_process+0x3b4>)
					if (eventbuffer[3] == 1) 		// sound on
 8002e24:	fab3 f383 	clz	r3, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	8013      	strh	r3, [r2, #0]
					printf("Sound touch\n");
 8002e2c:	f022 f8ae 	bl	8024f8c <puts>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 3)) {		// p4 LED radio button
 8002e30:	7863      	ldrb	r3, [r4, #1]
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	f47f af1d 	bne.w	8002c72 <lcd_event_process+0x162>
 8002e38:	78a3      	ldrb	r3, [r4, #2]
 8002e3a:	e75c      	b.n	8002cf6 <lcd_event_process+0x1e6>
					lcdbright = eventbuffer[3];
 8002e3c:	4b22      	ldr	r3, [pc, #136]	; (8002ec8 <lcd_event_process+0x3b8>)
 8002e3e:	78e2      	ldrb	r2, [r4, #3]
 8002e40:	601a      	str	r2, [r3, #0]
					if (lcdbright < 14)
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	2a0d      	cmp	r2, #13
 8002e46:	dc01      	bgt.n	8002e4c <lcd_event_process+0x33c>
						lcdbright = 14;		// prevent black
 8002e48:	220e      	movs	r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]
					setlcddim(lcdbright);
 8002e4c:	6819      	ldr	r1, [r3, #0]
	dimtimer = DIMTIME;
 8002e4e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8002e52:	4b1e      	ldr	r3, [pc, #120]	; (8002ecc <lcd_event_process+0x3bc>)
	setlcdbin("dim", level);
 8002e54:	2963      	cmp	r1, #99	; 0x63
 8002e56:	481e      	ldr	r0, [pc, #120]	; (8002ed0 <lcd_event_process+0x3c0>)
	dimtimer = DIMTIME;
 8002e58:	601a      	str	r2, [r3, #0]
	setlcdbin("dim", level);
 8002e5a:	bf28      	it	cs
 8002e5c:	2163      	movcs	r1, #99	; 0x63
 8002e5e:	f7ff fa81 	bl	8002364 <setlcdbin>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 8)) {		// p4 reset button
 8002e62:	7863      	ldrb	r3, [r4, #1]
 8002e64:	2b04      	cmp	r3, #4
 8002e66:	f47f af04 	bne.w	8002c72 <lcd_event_process+0x162>
 8002e6a:	78a3      	ldrb	r3, [r4, #2]
 8002e6c:	e73d      	b.n	8002cea <lcd_event_process+0x1da>
						printf("Nextion DL acked block %d\n", nxt_blocksacked);
 8002e6e:	4c19      	ldr	r4, [pc, #100]	; (8002ed4 <lcd_event_process+0x3c4>)
 8002e70:	4819      	ldr	r0, [pc, #100]	; (8002ed8 <lcd_event_process+0x3c8>)
 8002e72:	6821      	ldr	r1, [r4, #0]
 8002e74:	f021 ffee 	bl	8024e54 <iprintf>
						nxt_blocksacked++;
 8002e78:	6823      	ldr	r3, [r4, #0]
					return (0);
 8002e7a:	2000      	movs	r0, #0
						nxt_blocksacked++;
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	6023      	str	r3, [r4, #0]
 8002e80:	e677      	b.n	8002b72 <lcd_event_process+0x62>
					printf("Reboot touch\n");
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <lcd_event_process+0x3cc>)
 8002e84:	f022 f882 	bl	8024f8c <puts>
					osDelay(100);
 8002e88:	2064      	movs	r0, #100	; 0x64
 8002e8a:	f012 f84d 	bl	8014f28 <osDelay>
					rebootme();
 8002e8e:	f000 faf5 	bl	800347c <rebootme>
				if ((eventbuffer[1] == 4) && (eventbuffer[2] == 2)) {		// p4 sound radio button
 8002e92:	7863      	ldrb	r3, [r4, #1]
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	f47f aeec 	bne.w	8002c72 <lcd_event_process+0x162>
 8002e9a:	78a3      	ldrb	r3, [r4, #2]
 8002e9c:	e728      	b.n	8002cf0 <lcd_event_process+0x1e0>
 8002e9e:	bf00      	nop
 8002ea0:	0802a4d0 	.word	0x0802a4d0
 8002ea4:	0802a560 	.word	0x0802a560
 8002ea8:	20001880 	.word	0x20001880
 8002eac:	0802a5c0 	.word	0x0802a5c0
 8002eb0:	0802a58c 	.word	0x0802a58c
 8002eb4:	0802a574 	.word	0x0802a574
 8002eb8:	0802a4c0 	.word	0x0802a4c0
 8002ebc:	20001a04 	.word	0x20001a04
 8002ec0:	2000025a 	.word	0x2000025a
 8002ec4:	0802a694 	.word	0x0802a694
 8002ec8:	20000010 	.word	0x20000010
 8002ecc:	2000000c 	.word	0x2000000c
 8002ed0:	0802a300 	.word	0x0802a300
 8002ed4:	20003044 	.word	0x20003044
 8002ed8:	0802a5a4 	.word	0x0802a5a4
 8002edc:	0802a684 	.word	0x0802a684

08002ee0 <processnex>:
void processnex() {		// process Nextion - called at regular intervals
 8002ee0:	b570      	push	{r4, r5, r6, lr}
	switch (lcduart_error) {
 8002ee2:	4d50      	ldr	r5, [pc, #320]	; (8003024 <processnex+0x144>)
void processnex() {		// process Nextion - called at regular intervals
 8002ee4:	b0a2      	sub	sp, #136	; 0x88
	switch (lcduart_error) {
 8002ee6:	682b      	ldr	r3, [r5, #0]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d06d      	beq.n	8002fc8 <processnex+0xe8>
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d066      	beq.n	8002fbe <processnex+0xde>
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d04b      	beq.n	8002f8c <processnex+0xac>
 8002ef4:	4c4c      	ldr	r4, [pc, #304]	; (8003028 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002ef6:	2600      	movs	r6, #0
 8002ef8:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002efa:	6823      	ldr	r3, [r4, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d04e      	beq.n	8002f9e <processnex+0xbe>
	if (lcd_initflag == 2) {	// wait after giving cmd for lcd to change LCD to fast
 8002f00:	6823      	ldr	r3, [r4, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d07f      	beq.n	8003006 <processnex+0x126>
	if (lcd_initflag == 3) {	// uart only
 8002f06:	6823      	ldr	r3, [r4, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d069      	beq.n	8002fe0 <processnex+0x100>
	lcd_rxdma();		// get any new characters received
 8002f0c:	f7ff f98a 	bl	8002224 <lcd_rxdma>
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002f10:	f7ff fdfe 	bl	8002b10 <lcd_event_process>
	if (dimtimer > 50000) {
 8002f14:	4a45      	ldr	r2, [pc, #276]	; (800302c <processnex+0x14c>)
 8002f16:	f24c 3150 	movw	r1, #50000	; 0xc350
	result = lcd_event_process();	// this can trigger the lcd_reinit flag
 8002f1a:	9001      	str	r0, [sp, #4]
	if (dimtimer > 50000) {
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	428b      	cmp	r3, r1
 8002f20:	d903      	bls.n	8002f2a <processnex+0x4a>
		dimtimer--;
 8002f22:	3b01      	subs	r3, #1
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	b022      	add	sp, #136	; 0x88
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002f2a:	4841      	ldr	r0, [pc, #260]	; (8003030 <processnex+0x150>)
		dimtimer = 60000;
 8002f2c:	f64e 2360 	movw	r3, #60000	; 0xea60
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002f30:	6801      	ldr	r1, [r0, #0]
		dimtimer = 60000;
 8002f32:	6013      	str	r3, [r2, #0]
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002f34:	6804      	ldr	r4, [r0, #0]
 8002f36:	6803      	ldr	r3, [r0, #0]
 8002f38:	6802      	ldr	r2, [r0, #0]
 8002f3a:	109b      	asrs	r3, r3, #2
 8002f3c:	eb03 0364 	add.w	r3, r3, r4, asr #1
 8002f40:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8002f44:	1aca      	subs	r2, r1, r3
		if (i < 2)
 8002f46:	2a01      	cmp	r2, #1
 8002f48:	dd45      	ble.n	8002fd6 <processnex+0xf6>
 8002f4a:	2a63      	cmp	r2, #99	; 0x63
		i = lcdbright - (((lcdbright >> 1) + (lcdbright >> 2) + (lcdbright >> 4)));		// - 87.5% dim
 8002f4c:	4939      	ldr	r1, [pc, #228]	; (8003034 <processnex+0x154>)
 8002f4e:	4613      	mov	r3, r2
 8002f50:	bf28      	it	cs
 8002f52:	2363      	movcs	r3, #99	; 0x63
 8002f54:	600a      	str	r2, [r1, #0]
	sprintf(buffer, "%s=%lu", id, value);
 8002f56:	4a38      	ldr	r2, [pc, #224]	; (8003038 <processnex+0x158>)
 8002f58:	a802      	add	r0, sp, #8
 8002f5a:	4938      	ldr	r1, [pc, #224]	; (800303c <processnex+0x15c>)
 8002f5c:	f022 f964 	bl	8025228 <siprintf>
	strcpy(pkt, str);
 8002f60:	a902      	add	r1, sp, #8
 8002f62:	a80a      	add	r0, sp, #40	; 0x28
 8002f64:	f022 f9f1 	bl	802534a <stpcpy>
	strcat(pkt, "\xff\xff\xff");
 8002f68:	4935      	ldr	r1, [pc, #212]	; (8003040 <processnex+0x160>)
	if (!(lcd_txblocked))
 8002f6a:	4b36      	ldr	r3, [pc, #216]	; (8003044 <processnex+0x164>)
	strcpy(pkt, str);
 8002f6c:	4602      	mov	r2, r0
	strcat(pkt, "\xff\xff\xff");
 8002f6e:	6808      	ldr	r0, [r1, #0]
	if (!(lcd_txblocked))
 8002f70:	681b      	ldr	r3, [r3, #0]
	strcat(pkt, "\xff\xff\xff");
 8002f72:	6010      	str	r0, [r2, #0]
	if (!(lcd_txblocked))
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d152      	bne.n	800301e <processnex+0x13e>
		return (lcd_puts(pkt));
 8002f78:	a80a      	add	r0, sp, #40	; 0x28
 8002f7a:	f7ff f91b 	bl	80021b4 <lcd_puts>
	result = writelcdcmd(buffer);
 8002f7e:	900a      	str	r0, [sp, #40]	; 0x28
	if (result == -1) {		// wait for response
 8002f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002f82:	3301      	adds	r3, #1
 8002f84:	d047      	beq.n	8003016 <processnex+0x136>
	return (result);
 8002f86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
}
 8002f88:	b022      	add	sp, #136	; 0x88
 8002f8a:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART NOISE\n");
 8002f8c:	4c26      	ldr	r4, [pc, #152]	; (8003028 <processnex+0x148>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f8e:	2600      	movs	r6, #0
		printf("LCD UART NOISE\n");
 8002f90:	482d      	ldr	r0, [pc, #180]	; (8003048 <processnex+0x168>)
 8002f92:	f021 fffb 	bl	8024f8c <puts>
	lcduart_error = HAL_UART_ERROR_NONE;
 8002f96:	602e      	str	r6, [r5, #0]
	if (lcd_initflag == 1) {		// full init
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d1b0      	bne.n	8002f00 <processnex+0x20>
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002f9e:	482b      	ldr	r0, [pc, #172]	; (800304c <processnex+0x16c>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002fa0:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(9600)\n");
 8002fa2:	f021 fff3 	bl	8024f8c <puts>
		lcd_uart_init(9600);	// switch us to 9600
 8002fa6:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002faa:	f7ff f81f 	bl	8001fec <lcd_uart_init>
		lcd_init(9600);		// try to reset LCD
 8002fae:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8002fb2:	f7ff f85d 	bl	8002070 <lcd_init>
		lcd_initflag = 2;		// request wait for lcd to process baud speedup command
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	6023      	str	r3, [r4, #0]
}
 8002fba:	b022      	add	sp, #136	; 0x88
 8002fbc:	bd70      	pop	{r4, r5, r6, pc}
		printf("LCD UART OVERRUN\n");
 8002fbe:	4824      	ldr	r0, [pc, #144]	; (8003050 <processnex+0x170>)
 8002fc0:	4c19      	ldr	r4, [pc, #100]	; (8003028 <processnex+0x148>)
 8002fc2:	f021 ffe3 	bl	8024f8c <puts>
 8002fc6:	e796      	b.n	8002ef6 <processnex+0x16>
		printf("LCD UART FRAMING\n");
 8002fc8:	4822      	ldr	r0, [pc, #136]	; (8003054 <processnex+0x174>)
 8002fca:	f021 ffdf 	bl	8024f8c <puts>
		lcd_initflag = 1;		// assume display has dropped back to 9600
 8002fce:	4c16      	ldr	r4, [pc, #88]	; (8003028 <processnex+0x148>)
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	6023      	str	r3, [r4, #0]
		break;
 8002fd4:	e78f      	b.n	8002ef6 <processnex+0x16>
			i = 2;	// prevent black
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4916      	ldr	r1, [pc, #88]	; (8003034 <processnex+0x154>)
 8002fda:	4613      	mov	r3, r2
 8002fdc:	600a      	str	r2, [r1, #0]
 8002fde:	e7ba      	b.n	8002f56 <processnex+0x76>
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002fe0:	481d      	ldr	r0, [pc, #116]	; (8003058 <processnex+0x178>)
		lcduart_error = HAL_UART_ERROR_NONE;
 8002fe2:	602e      	str	r6, [r5, #0]
		printf("processnex: calling lcd_uart_init(230400)\n");
 8002fe4:	f021 ffd2 	bl	8024f8c <puts>
		lcd_uart_init(230400);
 8002fe8:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002fec:	f7fe fffe 	bl	8001fec <lcd_uart_init>
		lcd_init(230400);		// try to reset LCD
 8002ff0:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8002ff4:	f7ff f83c 	bl	8002070 <lcd_init>
		osDelay(100);
 8002ff8:	2064      	movs	r0, #100	; 0x64
		lcd_initflag = 0;		// done
 8002ffa:	6026      	str	r6, [r4, #0]
}
 8002ffc:	b022      	add	sp, #136	; 0x88
 8002ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		osDelay(100);
 8003002:	f011 bf91 	b.w	8014f28 <osDelay>
		osDelay(500);
 8003006:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800300a:	f011 ff8d 	bl	8014f28 <osDelay>
		lcd_initflag = 3;
 800300e:	2303      	movs	r3, #3
 8003010:	6023      	str	r3, [r4, #0]
}
 8003012:	b022      	add	sp, #136	; 0x88
 8003014:	bd70      	pop	{r4, r5, r6, pc}
		printf("setlcdbin: Cmd failed\n\r");  // never happens always 0
 8003016:	4811      	ldr	r0, [pc, #68]	; (800305c <processnex+0x17c>)
 8003018:	f021 ff1c 	bl	8024e54 <iprintf>
 800301c:	e7b3      	b.n	8002f86 <processnex+0xa6>
		return (-1);
 800301e:	f04f 30ff 	mov.w	r0, #4294967295
 8003022:	e7ac      	b.n	8002f7e <processnex+0x9e>
 8003024:	20001a9c 	.word	0x20001a9c
 8003028:	20001a08 	.word	0x20001a08
 800302c:	2000000c 	.word	0x2000000c
 8003030:	20000010 	.word	0x20000010
 8003034:	200019f4 	.word	0x200019f4
 8003038:	0802a300 	.word	0x0802a300
 800303c:	0802a2e0 	.word	0x0802a2e0
 8003040:	0802a220 	.word	0x0802a220
 8003044:	20001a10 	.word	0x20001a10
 8003048:	0802a718 	.word	0x0802a718
 800304c:	0802a750 	.word	0x0802a750
 8003050:	0802a73c 	.word	0x0802a73c
 8003054:	0802a728 	.word	0x0802a728
 8003058:	0802a778 	.word	0x0802a778
 800305c:	0802a2e8 	.word	0x0802a2e8

08003060 <lcd_getlack>:
uint8_t lcd_getlack() {
 8003060:	b570      	push	{r4, r5, r6, lr}
	while (lcdstatus == 0xff) {
 8003062:	4d11      	ldr	r5, [pc, #68]	; (80030a8 <lcd_getlack+0x48>)
	processnex();
 8003064:	f7ff ff3c 	bl	8002ee0 <processnex>
	while (lcdstatus == 0xff) {
 8003068:	782b      	ldrb	r3, [r5, #0]
 800306a:	2bff      	cmp	r3, #255	; 0xff
 800306c:	d118      	bne.n	80030a0 <lcd_getlack+0x40>
 800306e:	b2de      	uxtb	r6, r3
 8003070:	4c0e      	ldr	r4, [pc, #56]	; (80030ac <lcd_getlack+0x4c>)
 8003072:	e007      	b.n	8003084 <lcd_getlack+0x24>
		trys++;
 8003074:	6022      	str	r2, [r4, #0]
		osDelay(1);
 8003076:	f011 ff57 	bl	8014f28 <osDelay>
		processnex();
 800307a:	f7ff ff31 	bl	8002ee0 <processnex>
	while (lcdstatus == 0xff) {
 800307e:	782b      	ldrb	r3, [r5, #0]
 8003080:	2bff      	cmp	r3, #255	; 0xff
 8003082:	d10d      	bne.n	80030a0 <lcd_getlack+0x40>
		if (trys > 1000) {
 8003084:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003086:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003088:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 800308c:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 8003090:	d9f0      	bls.n	8003074 <lcd_getlack+0x14>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 8003092:	4807      	ldr	r0, [pc, #28]	; (80030b0 <lcd_getlack+0x50>)
 8003094:	f021 fede 	bl	8024e54 <iprintf>
			trys = 0;
 8003098:	2300      	movs	r3, #0
}
 800309a:	4630      	mov	r0, r6
			trys = 0;
 800309c:	6023      	str	r3, [r4, #0]
}
 800309e:	bd70      	pop	{r4, r5, r6, pc}
	return (lcdstatus);
 80030a0:	782e      	ldrb	r6, [r5, #0]
 80030a2:	b2f6      	uxtb	r6, r6
}
 80030a4:	4630      	mov	r0, r6
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	20001a98 	.word	0x20001a98
 80030ac:	200020c8 	.word	0x200020c8
 80030b0:	0802a7a4 	.word	0x0802a7a4

080030b4 <lcd_getid>:
lcd_getid(void) {
 80030b4:	b510      	push	{r4, lr}
	lcd_txblocked = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	4c11      	ldr	r4, [pc, #68]	; (8003100 <lcd_getid+0x4c>)
lcd_getid(void) {
 80030ba:	b098      	sub	sp, #96	; 0x60
	lcd_txblocked = 0;
 80030bc:	6023      	str	r3, [r4, #0]
	lcd_clearrxbuf();
 80030be:	f7ff f981 	bl	80023c4 <lcd_clearrxbuf>
	strcpy(pkt, str);
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <lcd_getid+0x50>)
	lcdstatus = 0xff;
 80030c4:	20ff      	movs	r0, #255	; 0xff
 80030c6:	4910      	ldr	r1, [pc, #64]	; (8003108 <lcd_getid+0x54>)
	strcat(pkt, "\xff\xff\xff");
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <lcd_getid+0x58>)
	lcdstatus = 0xff;
 80030ca:	7008      	strb	r0, [r1, #0]
	strcpy(pkt, str);
 80030cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80030d0:	9000      	str	r0, [sp, #0]
 80030d2:	0c0b      	lsrs	r3, r1, #16
	strcat(pkt, "\xff\xff\xff");
 80030d4:	6810      	ldr	r0, [r2, #0]
	strcpy(pkt, str);
 80030d6:	f8ad 1004 	strh.w	r1, [sp, #4]
	strcat(pkt, "\xff\xff\xff");
 80030da:	f8cd 0007 	str.w	r0, [sp, #7]
	return (lcd_puts(pkt));
 80030de:	4668      	mov	r0, sp
	strcpy(pkt, str);
 80030e0:	f88d 3006 	strb.w	r3, [sp, #6]
	return (lcd_puts(pkt));
 80030e4:	f7ff f866 	bl	80021b4 <lcd_puts>
	if (result == -1) {		// send err
 80030e8:	3001      	adds	r0, #1
 80030ea:	d005      	beq.n	80030f8 <lcd_getid+0x44>
	result = lcd_getlack();		// wait for a response
 80030ec:	f7ff ffb8 	bl	8003060 <lcd_getlack>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80030f0:	2300      	movs	r3, #0
 80030f2:	6023      	str	r3, [r4, #0]
}
 80030f4:	b018      	add	sp, #96	; 0x60
 80030f6:	bd10      	pop	{r4, pc}
		printf("getid: Cmd failed\n\r");
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <lcd_getid+0x5c>)
 80030fa:	f021 feab 	bl	8024e54 <iprintf>
 80030fe:	e7f5      	b.n	80030ec <lcd_getid+0x38>
 8003100:	20001a10 	.word	0x20001a10
 8003104:	0802a7d4 	.word	0x0802a7d4
 8003108:	20001a98 	.word	0x20001a98
 800310c:	0802a220 	.word	0x0802a220
 8003110:	0802a7dc 	.word	0x0802a7dc

08003114 <lcd_startdl>:
void lcd_startdl(int filesize) {
 8003114:	b530      	push	{r4, r5, lr}
	lcd_txblocked = 1;
 8003116:	4c0e      	ldr	r4, [pc, #56]	; (8003150 <lcd_startdl+0x3c>)
void lcd_startdl(int filesize) {
 8003118:	b08b      	sub	sp, #44	; 0x2c
	lcd_txblocked = 1;
 800311a:	2501      	movs	r5, #1
void lcd_startdl(int filesize) {
 800311c:	9001      	str	r0, [sp, #4]
	lcd_txblocked = 1;
 800311e:	6025      	str	r5, [r4, #0]
	lcd_clearrxbuf();
 8003120:	f7ff f950 	bl	80023c4 <lcd_clearrxbuf>
	lcdstatus = 0xff;
 8003124:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <lcd_startdl+0x40>)
 8003126:	21ff      	movs	r1, #255	; 0xff
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 8003128:	9a01      	ldr	r2, [sp, #4]
 800312a:	a802      	add	r0, sp, #8
	lcdstatus = 0xff;
 800312c:	7019      	strb	r1, [r3, #0]
	sprintf(cmd, "whmi-wri %i,230400,0", filesize);
 800312e:	490a      	ldr	r1, [pc, #40]	; (8003158 <lcd_startdl+0x44>)
 8003130:	f022 f87a 	bl	8025228 <siprintf>
	printf("lcd_startdl: \"%s\"\n", cmd);
 8003134:	a902      	add	r1, sp, #8
 8003136:	4809      	ldr	r0, [pc, #36]	; (800315c <lcd_startdl+0x48>)
 8003138:	f021 fe8c 	bl	8024e54 <iprintf>
	lcd_txblocked = 0;
 800313c:	2300      	movs	r3, #0
	writelcdcmd(cmd);
 800313e:	a802      	add	r0, sp, #8
	lcd_txblocked = 0;
 8003140:	6023      	str	r3, [r4, #0]
	writelcdcmd(cmd);
 8003142:	f7ff f8cf 	bl	80022e4 <writelcdcmd>
	result = lcd_getlack();		// wait for a response
 8003146:	f7ff ff8b 	bl	8003060 <lcd_getlack>
	lcd_txblocked = 1;		// keep LCD sending blocked
 800314a:	6025      	str	r5, [r4, #0]
}
 800314c:	b00b      	add	sp, #44	; 0x2c
 800314e:	bd30      	pop	{r4, r5, pc}
 8003150:	20001a10 	.word	0x20001a10
 8003154:	20001a98 	.word	0x20001a98
 8003158:	0802a7f0 	.word	0x0802a7f0
 800315c:	0802a808 	.word	0x0802a808

08003160 <getlcdpage>:
int getlcdpage(void) {
 8003160:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003164:	2301      	movs	r3, #1
 8003166:	f8df 8118 	ldr.w	r8, [pc, #280]	; 8003280 <getlcdpage+0x120>
	strcpy(pkt, str);
 800316a:	4e3f      	ldr	r6, [pc, #252]	; (8003268 <getlcdpage+0x108>)
int getlcdpage(void) {
 800316c:	b09b      	sub	sp, #108	; 0x6c
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 800316e:	2096      	movs	r0, #150	; 0x96
	lcd_txblocked = 1;		// stop others sending to the LCD
 8003170:	f8c8 3000 	str.w	r3, [r8]
	strcat(pkt, "\xff\xff\xff");
 8003174:	4f3d      	ldr	r7, [pc, #244]	; (800326c <getlcdpage+0x10c>)
	osDelay(150);			// wait for Tx queue to clear and hopefully Rx queue
 8003176:	f011 fed7 	bl	8014f28 <osDelay>
	lcdstatus = 0xff;
 800317a:	4d3d      	ldr	r5, [pc, #244]	; (8003270 <getlcdpage+0x110>)
 800317c:	23ff      	movs	r3, #255	; 0xff
	strcpy(pkt, str);
 800317e:	e896 0003 	ldmia.w	r6, {r0, r1}
	lcdstatus = 0xff;
 8003182:	702b      	strb	r3, [r5, #0]
	strcpy(pkt, str);
 8003184:	9002      	str	r0, [sp, #8]
	strcat(pkt, "\xff\xff\xff");
 8003186:	6838      	ldr	r0, [r7, #0]
	strcpy(pkt, str);
 8003188:	f8ad 100c 	strh.w	r1, [sp, #12]
	strcat(pkt, "\xff\xff\xff");
 800318c:	f8cd 000e 	str.w	r0, [sp, #14]
	return (lcd_puts(pkt));
 8003190:	a802      	add	r0, sp, #8
 8003192:	f7ff f80f 	bl	80021b4 <lcd_puts>
	result = intwritelcdcmd("sendme");
 8003196:	9001      	str	r0, [sp, #4]
	if (result == -1) {		// send err
 8003198:	9b01      	ldr	r3, [sp, #4]
 800319a:	3301      	adds	r3, #1
 800319c:	d060      	beq.n	8003260 <getlcdpage+0x100>
	processnex();
 800319e:	f7ff fe9f 	bl	8002ee0 <processnex>
	while (lcdstatus == 0xff) {
 80031a2:	782b      	ldrb	r3, [r5, #0]
 80031a4:	2bff      	cmp	r3, #255	; 0xff
 80031a6:	d121      	bne.n	80031ec <getlcdpage+0x8c>
 80031a8:	4c32      	ldr	r4, [pc, #200]	; (8003274 <getlcdpage+0x114>)
 80031aa:	e007      	b.n	80031bc <getlcdpage+0x5c>
		trys++;
 80031ac:	6022      	str	r2, [r4, #0]
		osDelay(1);
 80031ae:	f011 febb 	bl	8014f28 <osDelay>
		processnex();
 80031b2:	f7ff fe95 	bl	8002ee0 <processnex>
	while (lcdstatus == 0xff) {
 80031b6:	782b      	ldrb	r3, [r5, #0]
 80031b8:	2bff      	cmp	r3, #255	; 0xff
 80031ba:	d117      	bne.n	80031ec <getlcdpage+0x8c>
		if (trys > 1000) {
 80031bc:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 80031be:	2001      	movs	r0, #1
		if (trys > 1000) {
 80031c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 80031c4:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 80031c8:	d9f0      	bls.n	80031ac <getlcdpage+0x4c>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 80031ca:	482b      	ldr	r0, [pc, #172]	; (8003278 <getlcdpage+0x118>)
 80031cc:	f021 fe42 	bl	8024e54 <iprintf>
			trys = 0;
 80031d0:	2300      	movs	r3, #0
 80031d2:	6023      	str	r3, [r4, #0]
 80031d4:	23ff      	movs	r3, #255	; 0xff
	result = lcd_getlack();		// wait for a response
 80031d6:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 80031d8:	9b01      	ldr	r3, [sp, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	d00c      	beq.n	80031f8 <getlcdpage+0x98>
	lcd_txblocked = 0;		// allow others sending to the LCD
 80031de:	2300      	movs	r3, #0
 80031e0:	f8c8 3000 	str.w	r3, [r8]
	return (result);
 80031e4:	9801      	ldr	r0, [sp, #4]
}
 80031e6:	b01b      	add	sp, #108	; 0x6c
 80031e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return (lcdstatus);
 80031ec:	782b      	ldrb	r3, [r5, #0]
 80031ee:	b2db      	uxtb	r3, r3
	result = lcd_getlack();		// wait for a response
 80031f0:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 80031f2:	9b01      	ldr	r3, [sp, #4]
 80031f4:	3301      	adds	r3, #1
 80031f6:	d1f2      	bne.n	80031de <getlcdpage+0x7e>
	strcat(pkt, "\xff\xff\xff");
 80031f8:	683f      	ldr	r7, [r7, #0]
			printf("getlcdpage2: Cmd failed\n\r");
 80031fa:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8003284 <getlcdpage+0x124>
 80031fe:	4c1d      	ldr	r4, [pc, #116]	; (8003274 <getlcdpage+0x114>)
	strcat(pkt, "\xff\xff\xff");
 8003200:	f8cd 700e 	str.w	r7, [sp, #14]
	strcpy(pkt, str);
 8003204:	e896 0003 	ldmia.w	r6, {r0, r1}
 8003208:	9002      	str	r0, [sp, #8]
	return (lcd_puts(pkt));
 800320a:	a802      	add	r0, sp, #8
	strcpy(pkt, str);
 800320c:	f8ad 100c 	strh.w	r1, [sp, #12]
	return (lcd_puts(pkt));
 8003210:	f7fe ffd0 	bl	80021b4 <lcd_puts>
		result = intwritelcdcmd("sendme");
 8003214:	9001      	str	r0, [sp, #4]
		if (result == -1) {		// send err
 8003216:	9b01      	ldr	r3, [sp, #4]
 8003218:	3301      	adds	r3, #1
 800321a:	d10a      	bne.n	8003232 <getlcdpage+0xd2>
 800321c:	e01c      	b.n	8003258 <getlcdpage+0xf8>
		if (trys > 1000) {
 800321e:	6823      	ldr	r3, [r4, #0]
		osDelay(1);
 8003220:	2001      	movs	r0, #1
		if (trys > 1000) {
 8003222:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
		trys++;
 8003226:	eb03 0200 	add.w	r2, r3, r0
		if (trys > 1000) {
 800322a:	d80e      	bhi.n	800324a <getlcdpage+0xea>
		trys++;
 800322c:	6022      	str	r2, [r4, #0]
		osDelay(1);
 800322e:	f011 fe7b 	bl	8014f28 <osDelay>
		processnex();
 8003232:	f7ff fe55 	bl	8002ee0 <processnex>
	while (lcdstatus == 0xff) {
 8003236:	782b      	ldrb	r3, [r5, #0]
 8003238:	2bff      	cmp	r3, #255	; 0xff
 800323a:	d0f0      	beq.n	800321e <getlcdpage+0xbe>
	return (lcdstatus);
 800323c:	782b      	ldrb	r3, [r5, #0]
 800323e:	b2db      	uxtb	r3, r3
		result = lcd_getlack();		// wait for a response
 8003240:	9301      	str	r3, [sp, #4]
	while (result == -1) {	// try again
 8003242:	9b01      	ldr	r3, [sp, #4]
 8003244:	3301      	adds	r3, #1
 8003246:	d0db      	beq.n	8003200 <getlcdpage+0xa0>
 8003248:	e7c9      	b.n	80031de <getlcdpage+0x7e>
			printf("getlcdack: Timeout waiting for LCD response\n\r");
 800324a:	480b      	ldr	r0, [pc, #44]	; (8003278 <getlcdpage+0x118>)
 800324c:	f021 fe02 	bl	8024e54 <iprintf>
			trys = 0;
 8003250:	2200      	movs	r2, #0
 8003252:	23ff      	movs	r3, #255	; 0xff
 8003254:	6022      	str	r2, [r4, #0]
			return (-1);
 8003256:	e7f3      	b.n	8003240 <getlcdpage+0xe0>
			printf("getlcdpage2: Cmd failed\n\r");
 8003258:	4648      	mov	r0, r9
 800325a:	f021 fdfb 	bl	8024e54 <iprintf>
 800325e:	e7e8      	b.n	8003232 <getlcdpage+0xd2>
		printf("getlcdpage: Cmd failed\n\r");
 8003260:	4806      	ldr	r0, [pc, #24]	; (800327c <getlcdpage+0x11c>)
 8003262:	f021 fdf7 	bl	8024e54 <iprintf>
 8003266:	e79a      	b.n	800319e <getlcdpage+0x3e>
 8003268:	0802a81c 	.word	0x0802a81c
 800326c:	0802a220 	.word	0x0802a220
 8003270:	20001a98 	.word	0x20001a98
 8003274:	200020c8 	.word	0x200020c8
 8003278:	0802a7a4 	.word	0x0802a7a4
 800327c:	0802a824 	.word	0x0802a824
 8003280:	20001a10 	.word	0x20001a10
 8003284:	0802a840 	.word	0x0802a840

08003288 <MX_NVIC_Init>:

/**
 * @brief NVIC Configuration.
 * @retval None
 */
static void MX_NVIC_Init(void) {
 8003288:	b508      	push	{r3, lr}
	/* USART2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART2_IRQn, 7, 0);
 800328a:	2200      	movs	r2, #0
 800328c:	2107      	movs	r1, #7
 800328e:	2026      	movs	r0, #38	; 0x26
 8003290:	f005 f93a 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003294:	2026      	movs	r0, #38	; 0x26
 8003296:	f005 f981 	bl	800859c <HAL_NVIC_EnableIRQ>
	/* USART6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(USART6_IRQn, 6, 0);
 800329a:	2200      	movs	r2, #0
 800329c:	2106      	movs	r1, #6
 800329e:	2047      	movs	r0, #71	; 0x47
 80032a0:	f005 f932 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART6_IRQn);
 80032a4:	2047      	movs	r0, #71	; 0x47
 80032a6:	f005 f979 	bl	800859c <HAL_NVIC_EnableIRQ>
	/* ADC_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(ADC_IRQn, 6, 0);
 80032aa:	2200      	movs	r2, #0
 80032ac:	2106      	movs	r1, #6
 80032ae:	2012      	movs	r0, #18
 80032b0:	f005 f92a 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ADC_IRQn);
 80032b4:	2012      	movs	r0, #18
 80032b6:	f005 f971 	bl	800859c <HAL_NVIC_EnableIRQ>
	/* EXTI15_10_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80032ba:	2200      	movs	r2, #0
 80032bc:	2106      	movs	r1, #6
 80032be:	2028      	movs	r0, #40	; 0x28
 80032c0:	f005 f922 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80032c4:	2028      	movs	r0, #40	; 0x28
 80032c6:	f005 f969 	bl	800859c <HAL_NVIC_EnableIRQ>
	/* TIM8_TRG_COM_TIM14_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 1, 0);
 80032ca:	202d      	movs	r0, #45	; 0x2d
 80032cc:	2200      	movs	r2, #0
 80032ce:	2101      	movs	r1, #1
 80032d0:	f005 f91a 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80032d4:	202d      	movs	r0, #45	; 0x2d
}
 80032d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80032da:	f005 b95f 	b.w	800859c <HAL_NVIC_EnableIRQ>
 80032de:	bf00      	nop

080032e0 <netif_status_callbk_fn>:
	}
}

void netif_status_callbk_fn(struct netif *netif) {

	printf("netif_status changed\n");
 80032e0:	4801      	ldr	r0, [pc, #4]	; (80032e8 <netif_status_callbk_fn+0x8>)
 80032e2:	f021 be53 	b.w	8024f8c <puts>
 80032e6:	bf00      	nop
 80032e8:	0802a870 	.word	0x0802a870

080032ec <Callback01>:
}

/* Callback01 function */
void Callback01(void const *argument) {
	/* USER CODE BEGIN Callback01 */
	printf("Callback01\n");
 80032ec:	4801      	ldr	r0, [pc, #4]	; (80032f4 <Callback01+0x8>)
 80032ee:	f021 be4d 	b.w	8024f8c <puts>
 80032f2:	bf00      	nop
 80032f4:	0802a888 	.word	0x0802a888

080032f8 <_write>:
	if (file == 1) {
 80032f8:	2801      	cmp	r0, #1
int _write(int file, char *ptr, int len) {
 80032fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032fc:	460c      	mov	r4, r1
 80032fe:	4617      	mov	r7, r2
	if (file == 1) {
 8003300:	d00e      	beq.n	8003320 <_write+0x28>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003302:	2a00      	cmp	r2, #0
 8003304:	dd0a      	ble.n	800331c <_write+0x24>
 8003306:	188e      	adds	r6, r1, r2
			HAL_UART_Transmit(&huart5, (uint8_t*) *ptr++, 1, 10);
 8003308:	4d0b      	ldr	r5, [pc, #44]	; (8003338 <_write+0x40>)
 800330a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800330e:	230a      	movs	r3, #10
 8003310:	2201      	movs	r2, #1
 8003312:	4628      	mov	r0, r5
 8003314:	f00f fb14 	bl	8012940 <HAL_UART_Transmit>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003318:	42a6      	cmp	r6, r4
 800331a:	d1f6      	bne.n	800330a <_write+0x12>
}
 800331c:	4638      	mov	r0, r7
 800331e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8003320:	2a00      	cmp	r2, #0
 8003322:	ddfb      	ble.n	800331c <_write+0x24>
 8003324:	188d      	adds	r5, r1, r2
			__io_putchar(*ptr++);
 8003326:	f814 0b01 	ldrb.w	r0, [r4], #1
 800332a:	f001 fa83 	bl	8004834 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800332e:	42ac      	cmp	r4, r5
 8003330:	d1f9      	bne.n	8003326 <_write+0x2e>
}
 8003332:	4638      	mov	r0, r7
 8003334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003336:	bf00      	nop
 8003338:	20002b50 	.word	0x20002b50

0800333c <crc_rom>:
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 800333c:	4b10      	ldr	r3, [pc, #64]	; (8003380 <crc_rom+0x44>)
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 800333e:	4811      	ldr	r0, [pc, #68]	; (8003384 <crc_rom+0x48>)
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 8003340:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003344:	4b10      	ldr	r3, [pc, #64]	; (8003388 <crc_rom+0x4c>)
 8003346:	4a11      	ldr	r2, [pc, #68]	; (800338c <crc_rom+0x50>)
 8003348:	4403      	add	r3, r0
	if ((unsigned long) MX_NVIC_Init < 0x8100000) {
 800334a:	bf2c      	ite	cs
 800334c:	f04f 6101 	movcs.w	r1, #135266304	; 0x8100000
 8003350:	f04f 6100 	movcc.w	r1, #134217728	; 0x8000000
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 8003354:	1a9b      	subs	r3, r3, r2
	romcrc = xcrc32(base, length, xinit);
 8003356:	f04f 32ff 	mov.w	r2, #4294967295
crc_rom() {
 800335a:	b510      	push	{r4, lr}
	length = (uint32_t) &__fini_array_end - (uint32_t) base + ((uint32_t) &_edata - (uint32_t) &_sdata);
 800335c:	1a5b      	subs	r3, r3, r1
		base = 0x8000000;
 800335e:	460c      	mov	r4, r1
crc_rom() {
 8003360:	b082      	sub	sp, #8
	romcrc = xcrc32(base, length, xinit);
 8003362:	4619      	mov	r1, r3
 8003364:	4620      	mov	r0, r4
 8003366:	9301      	str	r3, [sp, #4]
 8003368:	f7fd fc3e 	bl	8000be8 <xcrc32>
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 800336c:	9b01      	ldr	r3, [sp, #4]
	romcrc = xcrc32(base, length, xinit);
 800336e:	4601      	mov	r1, r0
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 8003370:	4622      	mov	r2, r4
 8003372:	4807      	ldr	r0, [pc, #28]	; (8003390 <crc_rom+0x54>)
}
 8003374:	b002      	add	sp, #8
 8003376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	printf("XCRC=0x%08x, base=0x%08x, len=%d\n", romcrc, base, length);
 800337a:	f021 bd6b 	b.w	8024e54 <iprintf>
 800337e:	bf00      	nop
 8003380:	08003289 	.word	0x08003289
 8003384:	2000069c 	.word	0x2000069c
 8003388:	08045dc4 	.word	0x08045dc4
 800338c:	20000000 	.word	0x20000000
 8003390:	0802a894 	.word	0x0802a894

08003394 <err_leds>:
err_leds(int why) {
 8003394:	b500      	push	{lr}
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 8003396:	4e37      	ldr	r6, [pc, #220]	; (8003474 <err_leds+0xe0>)
err_leds(int why) {
 8003398:	b083      	sub	sp, #12
		for (i = 0; i < 3500000; i++)
 800339a:	4d37      	ldr	r5, [pc, #220]	; (8003478 <err_leds+0xe4>)
 800339c:	1e44      	subs	r4, r0, #1
		switch (why) {
 800339e:	2c07      	cmp	r4, #7
 80033a0:	d80f      	bhi.n	80033c2 <err_leds+0x2e>
 80033a2:	e8df f004 	tbb	[pc, r4]
 80033a6:	5c51      	.short	0x5c51
 80033a8:	25303b46 	.word	0x25303b46
 80033ac:	041a      	.short	0x041a
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80033ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033b2:	4630      	mov	r0, r6
 80033b4:	f008 f9ec 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 80033b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033bc:	4630      	mov	r0, r6
 80033be:	f008 f9e7 	bl	800b790 <HAL_GPIO_TogglePin>
		for (i = 0; i < 3500000; i++)
 80033c2:	2300      	movs	r3, #0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	9b01      	ldr	r3, [sp, #4]
 80033c8:	42ab      	cmp	r3, r5
 80033ca:	dae8      	bge.n	800339e <err_leds+0xa>
 80033cc:	9b01      	ldr	r3, [sp, #4]
 80033ce:	3301      	adds	r3, #1
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	9b01      	ldr	r3, [sp, #4]
 80033d4:	42ab      	cmp	r3, r5
 80033d6:	dbf9      	blt.n	80033cc <err_leds+0x38>
 80033d8:	e7e1      	b.n	800339e <err_leds+0xa>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80033da:	4630      	mov	r0, r6
 80033dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033e0:	f008 f9d6 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D5_Pin);
 80033e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80033e8:	4630      	mov	r0, r6
 80033ea:	f008 f9d1 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 80033ee:	e7e8      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80033f0:	4630      	mov	r0, r6
 80033f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80033f6:	f008 f9cb 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 80033fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80033fe:	4630      	mov	r0, r6
 8003400:	f008 f9c6 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 8003404:	e7dd      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003406:	4630      	mov	r0, r6
 8003408:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800340c:	f008 f9c0 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 8003410:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003414:	4630      	mov	r0, r6
 8003416:	f008 f9bb 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 800341a:	e7d2      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 800341c:	4630      	mov	r0, r6
 800341e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003422:	f008 f9b5 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800342a:	4630      	mov	r0, r6
 800342c:	f008 f9b0 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 8003430:	e7c7      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003432:	4630      	mov	r0, r6
 8003434:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003438:	f008 f9aa 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D4_Pin);
 800343c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003440:	4630      	mov	r0, r6
 8003442:	f008 f9a5 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 8003446:	e7bc      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 8003448:	4630      	mov	r0, r6
 800344a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800344e:	f008 f99f 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D2_Pin);
 8003452:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003456:	4630      	mov	r0, r6
 8003458:	f008 f99a 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 800345c:	e7b1      	b.n	80033c2 <err_leds+0x2e>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800345e:	4630      	mov	r0, r6
 8003460:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003464:	f008 f994 	bl	800b790 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 8003468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800346c:	4630      	mov	r0, r6
 800346e:	f008 f98f 	bl	800b790 <HAL_GPIO_TogglePin>
			break;
 8003472:	e7a6      	b.n	80033c2 <err_leds+0x2e>
 8003474:	40020c00 	.word	0x40020c00
 8003478:	003567e0 	.word	0x003567e0

0800347c <rebootme>:
void rebootme(int why) {
 800347c:	b508      	push	{r3, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800347e:	b672      	cpsid	i
		err_leds(why);
 8003480:	f7ff ff88 	bl	8003394 <err_leds>

08003484 <netif_link_callbk_fn>:
	if (netif->flags & NETIF_FLAG_LINK_UP) {
 8003484:	f890 1035 	ldrb.w	r1, [r0, #53]	; 0x35
 8003488:	074a      	lsls	r2, r1, #29
 800348a:	d502      	bpl.n	8003492 <netif_link_callbk_fn+0xe>
		printf("netif_link UP, flags=0x%02x\n", netif->flags);
 800348c:	4809      	ldr	r0, [pc, #36]	; (80034b4 <netif_link_callbk_fn+0x30>)
 800348e:	f021 bce1 	b.w	8024e54 <iprintf>
void netif_link_callbk_fn(struct netif *netif) {
 8003492:	b510      	push	{r4, lr}
 8003494:	4604      	mov	r4, r0
		printf("netif_link DOWN, flags=0x%02x\n", netif->flags);
 8003496:	4808      	ldr	r0, [pc, #32]	; (80034b8 <netif_link_callbk_fn+0x34>)
 8003498:	f021 fcdc 	bl	8024e54 <iprintf>
		if (!(netif_is_link_up(netif))) {
 800349c:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80034a0:	075b      	lsls	r3, r3, #29
 80034a2:	d500      	bpl.n	80034a6 <netif_link_callbk_fn+0x22>
}
 80034a4:	bd10      	pop	{r4, pc}
			printf("LAN interface appears disconnected, rebooting...\n");
 80034a6:	4805      	ldr	r0, [pc, #20]	; (80034bc <netif_link_callbk_fn+0x38>)
 80034a8:	f021 fd70 	bl	8024f8c <puts>
			rebootme(1);
 80034ac:	2001      	movs	r0, #1
 80034ae:	f7ff ffe5 	bl	800347c <rebootme>
 80034b2:	bf00      	nop
 80034b4:	0802a8b8 	.word	0x0802a8b8
 80034b8:	0802a8d8 	.word	0x0802a8d8
 80034bc:	0802a8f8 	.word	0x0802a8f8

080034c0 <StarLPTask>:
	char str[82] = { "empty" };
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <StarLPTask+0xf8>)
 80034c2:	224c      	movs	r2, #76	; 0x4c
 80034c4:	e893 0003 	ldmia.w	r3, {r0, r1}
void StarLPTask(void const *argument) {
 80034c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	statuspkt.adcudpover = 0;		// debug use count overruns
 80034ca:	2500      	movs	r5, #0
void StarLPTask(void const *argument) {
 80034cc:	b099      	sub	sp, #100	; 0x64
	char str[82] = { "empty" };
 80034ce:	9003      	str	r0, [sp, #12]
 80034d0:	f10d 0012 	add.w	r0, sp, #18
 80034d4:	f8ad 1010 	strh.w	r1, [sp, #16]
 80034d8:	4629      	mov	r1, r5
 80034da:	f020 fd1d 	bl	8023f18 <memset>
	statuspkt.adcudpover = 0;		// debug use count overruns
 80034de:	4b37      	ldr	r3, [pc, #220]	; (80035bc <StarLPTask+0xfc>)
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 80034e0:	462a      	mov	r2, r5
 80034e2:	2101      	movs	r1, #1
 80034e4:	2050      	movs	r0, #80	; 0x50
	statuspkt.adcudpover = 0;		// debug use count overruns
 80034e6:	679d      	str	r5, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80034e8:	67dd      	str	r5, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 80034ea:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
	consolerxq = xQueueCreate(80, sizeof(unsigned char));		// set up a console rx buffer
 80034ee:	f012 f813 	bl	8015518 <xQueueGenericCreate>
 80034f2:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <StarLPTask+0x100>)
 80034f4:	6018      	str	r0, [r3, #0]
	if (consolerxq == NULL) {
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d056      	beq.n	80035a8 <StarLPTask+0xe8>
	strcpy(udp_target, SERVER_DESTINATION);
 80034fa:	f8df c0ec 	ldr.w	ip, [pc, #236]	; 80035e8 <StarLPTask+0x128>
 80034fe:	4f31      	ldr	r7, [pc, #196]	; (80035c4 <StarLPTask+0x104>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003500:	4e31      	ldr	r6, [pc, #196]	; (80035c8 <StarLPTask+0x108>)
		HAL_IWDG_Refresh(&hiwdg);
 8003502:	4c32      	ldr	r4, [pc, #200]	; (80035cc <StarLPTask+0x10c>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003504:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8003508:	6038      	str	r0, [r7, #0]
 800350a:	f8dc 0000 	ldr.w	r0, [ip]
 800350e:	6079      	str	r1, [r7, #4]
 8003510:	60ba      	str	r2, [r7, #8]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003512:	2201      	movs	r2, #1
 8003514:	492e      	ldr	r1, [pc, #184]	; (80035d0 <StarLPTask+0x110>)
	strcpy(udp_target, SERVER_DESTINATION);
 8003516:	6138      	str	r0, [r7, #16]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 8003518:	482e      	ldr	r0, [pc, #184]	; (80035d4 <StarLPTask+0x114>)
	strcpy(udp_target, SERVER_DESTINATION);
 800351a:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 800351c:	f00f fc2e 	bl	8012d7c <HAL_UART_Receive_IT>
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8003520:	f44f 5016 	mov.w	r0, #9600	; 0x2580
	lcduart_error = HAL_UART_ERROR_NONE;
 8003524:	6035      	str	r5, [r6, #0]
	lcd_init(9600);  // reset LCD to 9600 from current (unknown) speed
 8003526:	f7fe fda3 	bl	8002070 <lcd_init>
	lcd_uart_init(9600); // then change our baud to match
 800352a:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 800352e:	f7fe fd5d 	bl	8001fec <lcd_uart_init>
	lcd_init(9600);  // reset LCD (might be 2nd time or not)
 8003532:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 8003536:	f7fe fd9b 	bl	8002070 <lcd_init>
	osDelay(600);
 800353a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800353e:	f011 fcf3 	bl	8014f28 <osDelay>
	lcd_init(230400);  //  LCD *should* return in 230400 baud
 8003542:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003546:	f7fe fd93 	bl	8002070 <lcd_init>
	osDelay(600);
 800354a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800354e:	f011 fceb 	bl	8014f28 <osDelay>
	lcd_uart_init(230400); // then change our baud to match
 8003552:	f44f 3061 	mov.w	r0, #230400	; 0x38400
 8003556:	f7fe fd49 	bl	8001fec <lcd_uart_init>
	osDelay(600);
 800355a:	f44f 7016 	mov.w	r0, #600	; 0x258
 800355e:	f011 fce3 	bl	8014f28 <osDelay>
	writelcdcmd("page 0");
 8003562:	481d      	ldr	r0, [pc, #116]	; (80035d8 <StarLPTask+0x118>)
	lcduart_error = HAL_UART_ERROR_NONE;
 8003564:	6035      	str	r5, [r6, #0]
	writelcdcmd("page 0");
 8003566:	f7fe febd 	bl	80022e4 <writelcdcmd>
	lcd_getid();		// what display is connected?
 800356a:	f7ff fda3 	bl	80030b4 <lcd_getid>
	osDelay(600);
 800356e:	f44f 7016 	mov.w	r0, #600	; 0x258
 8003572:	f011 fcd9 	bl	8014f28 <osDelay>
	writelcdcmd("cls BLACK");
 8003576:	4819      	ldr	r0, [pc, #100]	; (80035dc <StarLPTask+0x11c>)
 8003578:	f7fe feb4 	bl	80022e4 <writelcdcmd>
	sprintf(str, "xstr 5,10,470,32,3,BLACK,WHITE,0,1,1,\"Ver %d.%d Build:%d\"", MAJORVERSION, MINORVERSION,
 800357c:	f242 732e 	movw	r3, #10030	; 0x272e
 8003580:	462a      	mov	r2, r5
 8003582:	4917      	ldr	r1, [pc, #92]	; (80035e0 <StarLPTask+0x120>)
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	a803      	add	r0, sp, #12
 8003588:	2310      	movs	r3, #16
 800358a:	f021 fe4d 	bl	8025228 <siprintf>
	writelcdcmd(str);
 800358e:	a803      	add	r0, sp, #12
	lcduart_error = HAL_UART_ERROR_NONE;
 8003590:	6035      	str	r5, [r6, #0]
	writelcdcmd(str);
 8003592:	f7fe fea7 	bl	80022e4 <writelcdcmd>
	lcduart_error = HAL_UART_ERROR_NONE;
 8003596:	6035      	str	r5, [r6, #0]
		osDelay(5000);
 8003598:	f241 3088 	movw	r0, #5000	; 0x1388
 800359c:	f011 fcc4 	bl	8014f28 <osDelay>
		HAL_IWDG_Refresh(&hiwdg);
 80035a0:	4620      	mov	r0, r4
 80035a2:	f008 ff5f 	bl	800c464 <HAL_IWDG_Refresh>
	for (;;) {
 80035a6:	e7f7      	b.n	8003598 <StarLPTask+0xd8>
 80035a8:	4604      	mov	r4, r0
		printf("Console Rx Queue not created... rebooting...\n");
 80035aa:	480e      	ldr	r0, [pc, #56]	; (80035e4 <StarLPTask+0x124>)
 80035ac:	f021 fcee 	bl	8024f8c <puts>
		rebootme(0);
 80035b0:	4620      	mov	r0, r4
 80035b2:	f7ff ff63 	bl	800347c <rebootme>
 80035b6:	bf00      	nop
 80035b8:	08028e20 	.word	0x08028e20
 80035bc:	20002f6c 	.word	0x20002f6c
 80035c0:	200020dc 	.word	0x200020dc
 80035c4:	20003420 	.word	0x20003420
 80035c8:	20001a9c 	.word	0x20001a9c
 80035cc:	20002618 	.word	0x20002618
 80035d0:	200020d8 	.word	0x200020d8
 80035d4:	200029c4 	.word	0x200029c4
 80035d8:	0802a95c 	.word	0x0802a95c
 80035dc:	0802a964 	.word	0x0802a964
 80035e0:	0802a970 	.word	0x0802a970
 80035e4:	0802a92c 	.word	0x0802a92c
 80035e8:	08029d98 	.word	0x08029d98

080035ec <HAL_DAC_ConvCpltCallbackCh1>:
	HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
 80035ec:	2100      	movs	r1, #0
 80035ee:	f005 b97f 	b.w	80088f0 <HAL_DAC_Stop_DMA>
 80035f2:	bf00      	nop

080035f4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) { // every second 1 pps (on external signal)
 80035f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (htim->Instance == TIM2) {
 80035f6:	6803      	ldr	r3, [r0, #0]
 80035f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035fc:	d003      	beq.n	8003606 <HAL_TIM_IC_CaptureCallback+0x12>
	} else if (htim->Instance == TIM4) {
 80035fe:	4a1b      	ldr	r2, [pc, #108]	; (800366c <HAL_TIM_IC_CaptureCallback+0x78>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d02d      	beq.n	8003660 <HAL_TIM_IC_CaptureCallback+0x6c>
}
 8003604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003606:	4c1a      	ldr	r4, [pc, #104]	; (8003670 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8003608:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <HAL_TIM_IC_CaptureCallback+0x80>)
 800360a:	7ba1      	ldrb	r1, [r4, #14]
		if (!(ledsenabled)) {
 800360c:	4a1a      	ldr	r2, [pc, #104]	; (8003678 <HAL_TIM_IC_CaptureCallback+0x84>)
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 800360e:	3101      	adds	r1, #1
 8003610:	481a      	ldr	r0, [pc, #104]	; (800367c <HAL_TIM_IC_CaptureCallback+0x88>)
		if (!(ledsenabled)) {
 8003612:	8812      	ldrh	r2, [r2, #0]
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003614:	fba3 5301 	umull	r5, r3, r3, r1
 8003618:	095b      	lsrs	r3, r3, #5
 800361a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800361e:	eba1 0383 	sub.w	r3, r1, r3, lsl #2
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003622:	f44f 6100 	mov.w	r1, #2048	; 0x800
		rtseconds = (statuspkt.NavPvt.sec + 1) % 60; // assume we get here before serial comms updates gps seconds field
 8003626:	7003      	strb	r3, [r0, #0]
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 8003628:	4815      	ldr	r0, [pc, #84]	; (8003680 <HAL_TIM_IC_CaptureCallback+0x8c>)
		if (!(ledsenabled)) {
 800362a:	b1b2      	cbz	r2, 800365a <HAL_TIM_IC_CaptureCallback+0x66>
			HAL_GPIO_TogglePin(GPIOD, LED_D1_Pin);
 800362c:	f008 f8b0 	bl	800b790 <HAL_GPIO_TogglePin>
		diff = lastcap;
 8003630:	4d14      	ldr	r5, [pc, #80]	; (8003684 <HAL_TIM_IC_CaptureCallback+0x90>)
	uint32_t sum = 0;
 8003632:	2100      	movs	r1, #0
		diff = lastcap;
 8003634:	4e14      	ldr	r6, [pc, #80]	; (8003688 <HAL_TIM_IC_CaptureCallback+0x94>)
 8003636:	462b      	mov	r3, r5
 8003638:	f105 003c 	add.w	r0, r5, #60	; 0x3c
 800363c:	6837      	ldr	r7, [r6, #0]
		data[i] = data[i + 1];		// old data is low index
 800363e:	685a      	ldr	r2, [r3, #4]
 8003640:	f843 2b04 	str.w	r2, [r3], #4
	for (i = 0; i < 15; i++) {
 8003644:	4298      	cmp	r0, r3
		sum += data[i];
 8003646:	4411      	add	r1, r2
	for (i = 0; i < 15; i++) {
 8003648:	d1f9      	bne.n	800363e <HAL_TIM_IC_CaptureCallback+0x4a>
	sum += new;
 800364a:	4439      	add	r1, r7
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 800364c:	4b0f      	ldr	r3, [pc, #60]	; (800368c <HAL_TIM_IC_CaptureCallback+0x98>)
	data[15] = new;		// new data at the end
 800364e:	63ef      	str	r7, [r5, #60]	; 0x3c
	return (sum >> 4);
 8003650:	0909      	lsrs	r1, r1, #4
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003652:	681b      	ldr	r3, [r3, #0]
		statuspkt.clktrim = movavg(diff);
 8003654:	65a1      	str	r1, [r4, #88]	; 0x58
		lastcap = t2cap[0];			// dma has populated t2cap from Channel 3 trigger on Timer 2
 8003656:	6033      	str	r3, [r6, #0]
}
 8003658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			HAL_GPIO_WritePin(GPIOD, LED_D1_Pin, GPIO_PIN_RESET);
 800365a:	f008 f87f 	bl	800b75c <HAL_GPIO_WritePin>
 800365e:	e7e7      	b.n	8003630 <HAL_TIM_IC_CaptureCallback+0x3c>
		printf("Timer4 callback\n");
 8003660:	480b      	ldr	r0, [pc, #44]	; (8003690 <HAL_TIM_IC_CaptureCallback+0x9c>)
}
 8003662:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		printf("Timer4 callback\n");
 8003666:	f021 bc91 	b.w	8024f8c <puts>
 800366a:	bf00      	nop
 800366c:	40000800 	.word	0x40000800
 8003670:	20002f6c 	.word	0x20002f6c
 8003674:	88888889 	.word	0x88888889
 8003678:	20000254 	.word	0x20000254
 800367c:	20000730 	.word	0x20000730
 8003680:	40020c00 	.word	0x40020c00
 8003684:	200020e0 	.word	0x200020e0
 8003688:	20002d60 	.word	0x20002d60
 800368c:	20000748 	.word	0x20000748
 8003690:	0802a9ac 	.word	0x0802a9ac

08003694 <getboardpcb>:
void getboardpcb() {
 8003694:	b508      	push	{r3, lr}
	if ((HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET)) {// floats high on SPLAT1, so this must be a lightningboard
 8003696:	2101      	movs	r1, #1
 8003698:	4804      	ldr	r0, [pc, #16]	; (80036ac <getboardpcb+0x18>)
 800369a:	f008 f84d 	bl	800b738 <HAL_GPIO_ReadPin>
		circuitboardpcb = SPLATBOARD1;		// assumed
 800369e:	2800      	cmp	r0, #0
 80036a0:	4b03      	ldr	r3, [pc, #12]	; (80036b0 <getboardpcb+0x1c>)
 80036a2:	bf0c      	ite	eq
 80036a4:	2216      	moveq	r2, #22
 80036a6:	220b      	movne	r2, #11
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bd08      	pop	{r3, pc}
 80036ac:	40020800 	.word	0x40020800
 80036b0:	200020d4 	.word	0x200020d4

080036b4 <uart2_rxdone>:
void uart2_rxdone() {
 80036b4:	b508      	push	{r3, lr}
	xQueueSendToBackFromISR(consolerxq, &con_ch, NULL);
 80036b6:	4807      	ldr	r0, [pc, #28]	; (80036d4 <uart2_rxdone+0x20>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	4907      	ldr	r1, [pc, #28]	; (80036d8 <uart2_rxdone+0x24>)
 80036bc:	461a      	mov	r2, r3
 80036be:	6800      	ldr	r0, [r0, #0]
 80036c0:	f012 f85c 	bl	801577c <xQueueGenericSendFromISR>
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80036c4:	2201      	movs	r2, #1
 80036c6:	4904      	ldr	r1, [pc, #16]	; (80036d8 <uart2_rxdone+0x24>)
 80036c8:	4804      	ldr	r0, [pc, #16]	; (80036dc <uart2_rxdone+0x28>)
}
 80036ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_UART_Receive_IT(&huart2, &con_ch, 1);
 80036ce:	f00f bb55 	b.w	8012d7c <HAL_UART_Receive_IT>
 80036d2:	bf00      	nop
 80036d4:	200020dc 	.word	0x200020dc
 80036d8:	200020d8 	.word	0x200020d8
 80036dc:	200029c4 	.word	0x200029c4

080036e0 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
	/* USER CODE BEGIN Callback 0 */

#ifdef configGENERATE_RUN_TIME_STATS

	if (htim->Instance == TIM14) {				// TIM14 used for RTOS profiling
 80036e0:	4a25      	ldr	r2, [pc, #148]	; (8003778 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80036e2:	6803      	ldr	r3, [r0, #0]
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d029      	beq.n	800373c <HAL_TIM_PeriodElapsedCallback+0x5c>
		rtos_debug_timer++;
		return;
	}
#endif

	if (htim->Instance == TIM5) {// TIM5 interrupt is used as hook to run ADC_Conv_complete() at a lower IRQ  priority than dmacomplete
 80036e8:	4a24      	ldr	r2, [pc, #144]	; (800377c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d02d      	beq.n	800374a <HAL_TIM_PeriodElapsedCallback+0x6a>
//		printf("T5\n");
		ADC_Conv_complete();			// It is a one-shot
		return;
	}

	if (htim->Instance == TIM2) {
 80036ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f2:	d02c      	beq.n	800374e <HAL_TIM_PeriodElapsedCallback+0x6e>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
		return;
	}
	if (htim->Instance == TIM3) {
 80036f4:	4a22      	ldr	r2, [pc, #136]	; (8003780 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d030      	beq.n	800375c <HAL_TIM_PeriodElapsedCallback+0x7c>
		printf("T3 PeriodElapsedCallback\n");
		return;
	}

	if (htim->Instance == TIM6) { // 1 second (internally timed, not compensated by GPS)
 80036fa:	4a22      	ldr	r2, [pc, #136]	; (8003784 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d005      	beq.n	800370c <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		return;
	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM12) {
 8003700:	4a21      	ldr	r2, [pc, #132]	; (8003788 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d01f      	beq.n	8003746 <HAL_TIM_PeriodElapsedCallback+0x66>
		HAL_IncTick();
	}
	/* USER CODE BEGIN Callback 1 */
	else {
		printf("Unknown Timer Period Elapsed callback\n");
 8003706:	4821      	ldr	r0, [pc, #132]	; (800378c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8003708:	f021 bc40 	b.w	8024f8c <puts>
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800370c:	b510      	push	{r4, lr}
		t1sec++;
 800370e:	4920      	ldr	r1, [pc, #128]	; (8003790 <HAL_TIM_PeriodElapsedCallback+0xb0>)
		statuspkt.sysuptime++;
 8003710:	4c20      	ldr	r4, [pc, #128]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0xb4>)
		t1sec++;
 8003712:	680a      	ldr	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003714:	6e63      	ldr	r3, [r4, #100]	; 0x64
		if (netup)
 8003716:	4820      	ldr	r0, [pc, #128]	; (8003798 <HAL_TIM_PeriodElapsedCallback+0xb8>)
		t1sec++;
 8003718:	3201      	adds	r2, #1
		statuspkt.sysuptime++;
 800371a:	3301      	adds	r3, #1
		if (netup)
 800371c:	7800      	ldrb	r0, [r0, #0]
		t1sec++;
 800371e:	600a      	str	r2, [r1, #0]
		statuspkt.sysuptime++;
 8003720:	6663      	str	r3, [r4, #100]	; 0x64
		if (netup)
 8003722:	b110      	cbz	r0, 800372a <HAL_TIM_PeriodElapsedCallback+0x4a>
			statuspkt.netuptime++;
 8003724:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8003726:	3301      	adds	r3, #1
 8003728:	66a3      	str	r3, [r4, #104]	; 0x68
		if (gpslocked) {
 800372a:	4b1c      	ldr	r3, [pc, #112]	; (800379c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	b9c3      	cbnz	r3, 8003762 <HAL_TIM_PeriodElapsedCallback+0x82>
			epochvalid = 0;
 8003730:	4a1b      	ldr	r2, [pc, #108]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
			statuspkt.gpsuptime = 0;	// gps uptime is zero
 8003732:	66e3      	str	r3, [r4, #108]	; 0x6c
			epochvalid = 0;
 8003734:	7013      	strb	r3, [r2, #0]
			statuspkt.epochsecs = 0;	// make epoch time obviously wrong
 8003736:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
	}
	/* USER CODE END Callback 1 */
}
 800373a:	bd10      	pop	{r4, pc}
		rtos_debug_timer++;
 800373c:	4a19      	ldr	r2, [pc, #100]	; (80037a4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	6013      	str	r3, [r2, #0]
		return;
 8003744:	4770      	bx	lr
		HAL_IncTick();
 8003746:	f004 ba7b 	b.w	8007c40 <HAL_IncTick>
		ADC_Conv_complete();			// It is a one-shot
 800374a:	f7fd b89f 	b.w	800088c <ADC_Conv_complete>
		printf("T2P PeriodElapsedCallback %lu %lu\n", t2cap[0], statuspkt.clktrim);
 800374e:	4a11      	ldr	r2, [pc, #68]	; (8003794 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8003750:	4b15      	ldr	r3, [pc, #84]	; (80037a8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8003752:	4816      	ldr	r0, [pc, #88]	; (80037ac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8003754:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003756:	6819      	ldr	r1, [r3, #0]
 8003758:	f021 bb7c 	b.w	8024e54 <iprintf>
		printf("T3 PeriodElapsedCallback\n");
 800375c:	4814      	ldr	r0, [pc, #80]	; (80037b0 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800375e:	f021 bc15 	b.w	8024f8c <puts>
			statuspkt.gpsuptime++;
 8003762:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003764:	3301      	adds	r3, #1
 8003766:	66e3      	str	r3, [r4, #108]	; 0x6c
				statuspkt.epochsecs = calcepoch32();
 8003768:	f001 f882 	bl	8004870 <calcepoch32>
				epochvalid = 1;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800376e:	2201      	movs	r2, #1
				statuspkt.epochsecs = calcepoch32();
 8003770:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
				epochvalid = 1;
 8003774:	701a      	strb	r2, [r3, #0]
}
 8003776:	bd10      	pop	{r4, pc}
 8003778:	40002000 	.word	0x40002000
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40000400 	.word	0x40000400
 8003784:	40001000 	.word	0x40001000
 8003788:	40001800 	.word	0x40001800
 800378c:	0802aa4c 	.word	0x0802aa4c
 8003790:	20002d8c 	.word	0x20002d8c
 8003794:	20002f6c 	.word	0x20002f6c
 8003798:	20000726 	.word	0x20000726
 800379c:	200033b8 	.word	0x200033b8
 80037a0:	200033b0 	.word	0x200033b0
 80037a4:	20002d84 	.word	0x20002d84
 80037a8:	20000748 	.word	0x20000748
 80037ac:	0802aa0c 	.word	0x0802aa0c
 80037b0:	0802aa30 	.word	0x0802aa30

080037b4 <Error_Handler>:
 */
void Error_Handler(void) {
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
		printf("HAL error (main.c 2343)\n");
 80037b4:	4c02      	ldr	r4, [pc, #8]	; (80037c0 <Error_Handler+0xc>)
void Error_Handler(void) {
 80037b6:	b508      	push	{r3, lr}
		printf("HAL error (main.c 2343)\n");
 80037b8:	4620      	mov	r0, r4
 80037ba:	f021 fbe7 	bl	8024f8c <puts>
	while (1) {
 80037be:	e7fb      	b.n	80037b8 <Error_Handler+0x4>
 80037c0:	0802aa74 	.word	0x0802aa74

080037c4 <SystemClock_Config>:
void SystemClock_Config(void) {
 80037c4:	b530      	push	{r4, r5, lr}
 80037c6:	b095      	sub	sp, #84	; 0x54
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80037c8:	2234      	movs	r2, #52	; 0x34
 80037ca:	2100      	movs	r1, #0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037cc:	2402      	movs	r4, #2
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80037ce:	a807      	add	r0, sp, #28
 80037d0:	f020 fba2 	bl	8023f18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80037d4:	2300      	movs	r3, #0
 80037d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80037da:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80037de:	9306      	str	r3, [sp, #24]
	HAL_PWR_EnableBkUpAccess();
 80037e0:	f009 fbd0 	bl	800cf84 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4a20      	ldr	r2, [pc, #128]	; (8003868 <SystemClock_Config+0xa4>)
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80037e6:	a807      	add	r0, sp, #28
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037e8:	4b20      	ldr	r3, [pc, #128]	; (800386c <SystemClock_Config+0xa8>)
	__HAL_RCC_PWR_CLK_ENABLE();
 80037ea:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80037ec:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80037f0:	6411      	str	r1, [r2, #64]	; 0x40
 80037f2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80037f4:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80037f8:	9200      	str	r2, [sp, #0]
 80037fa:	9a00      	ldr	r2, [sp, #0]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8003802:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSE;
 8003804:	2209      	movs	r2, #9
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003806:	681b      	ldr	r3, [r3, #0]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003808:	940d      	str	r4, [sp, #52]	; 0x34
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800380a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800380e:	9411      	str	r4, [sp, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLR = 2;
 8003810:	9413      	str	r4, [sp, #76]	; 0x4c
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003812:	9301      	str	r3, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003814:	f44f 3380 	mov.w	r3, #65536	; 0x10000
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003818:	9901      	ldr	r1, [sp, #4]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800381a:	e9cd 2307 	strd	r2, r3, [sp, #28]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800381e:	2201      	movs	r2, #1
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003820:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003824:	920c      	str	r2, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLN = 216;
 8003826:	2204      	movs	r2, #4
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003828:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN = 216;
 800382a:	23d8      	movs	r3, #216	; 0xd8
 800382c:	e9cd 230f 	strd	r2, r3, [sp, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLQ = 6;
 8003830:	2306      	movs	r3, #6
 8003832:	9312      	str	r3, [sp, #72]	; 0x48
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003834:	f009 fbe8 	bl	800d008 <HAL_RCC_OscConfig>
 8003838:	b9a0      	cbnz	r0, 8003864 <SystemClock_Config+0xa0>
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 800383a:	f009 fbab 	bl	800cf94 <HAL_PWREx_EnableOverDrive>
 800383e:	4603      	mov	r3, r0
 8003840:	b980      	cbnz	r0, 8003864 <SystemClock_Config+0xa0>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003842:	220f      	movs	r2, #15
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003844:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 8003848:	a802      	add	r0, sp, #8
 800384a:	2107      	movs	r1, #7
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800384c:	e9cd 2402 	strd	r2, r4, [sp, #8]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003854:	e9cd 3504 	strd	r3, r5, [sp, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003858:	9206      	str	r2, [sp, #24]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK) {
 800385a:	f009 feab 	bl	800d5b4 <HAL_RCC_ClockConfig>
 800385e:	b908      	cbnz	r0, 8003864 <SystemClock_Config+0xa0>
}
 8003860:	b015      	add	sp, #84	; 0x54
 8003862:	bd30      	pop	{r4, r5, pc}
		Error_Handler();
 8003864:	f7ff ffa6 	bl	80037b4 <Error_Handler>
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000

08003870 <PeriphCommonClock_Config>:
void PeriphCommonClock_Config(void) {
 8003870:	b510      	push	{r4, lr}
 8003872:	b0a4      	sub	sp, #144	; 0x90
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003874:	228c      	movs	r2, #140	; 0x8c
 8003876:	2100      	movs	r1, #0
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003878:	2403      	movs	r4, #3
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800387a:	a801      	add	r0, sp, #4
 800387c:	f020 fb4c 	bl	8023f18 <memset>
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8003880:	22c0      	movs	r2, #192	; 0xc0
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003882:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8003886:	2302      	movs	r3, #2
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003888:	2101      	movs	r1, #1
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800388a:	9205      	str	r2, [sp, #20]
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 800388c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8003890:	9000      	str	r0, [sp, #0]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003892:	4668      	mov	r0, sp
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8003894:	9408      	str	r4, [sp, #32]
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8003896:	910a      	str	r1, [sp, #40]	; 0x28
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8003898:	921f      	str	r2, [sp, #124]	; 0x7c
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800389a:	e9cd 3306 	strd	r3, r3, [sp, #24]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800389e:	f009 ffef 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 80038a2:	b908      	cbnz	r0, 80038a8 <PeriphCommonClock_Config+0x38>
}
 80038a4:	b024      	add	sp, #144	; 0x90
 80038a6:	bd10      	pop	{r4, pc}
		Error_Handler();
 80038a8:	f7ff ff84 	bl	80037b4 <Error_Handler>

080038ac <main>:
int main(void) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b0dc      	sub	sp, #368	; 0x170
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{

	__ASM volatile ("dsb 0xF":::"memory");
 80038b0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038b4:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80038b8:	4bc2      	ldr	r3, [pc, #776]	; (8003bc4 <main+0x318>)
 80038ba:	2400      	movs	r4, #0
 80038bc:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
	__ASM volatile ("dsb 0xF":::"memory");
 80038c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038c4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80038c8:	695a      	ldr	r2, [r3, #20]
 80038ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038ce:	615a      	str	r2, [r3, #20]
	__ASM volatile ("dsb 0xF":::"memory");
 80038d0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80038d4:	f3bf 8f6f 	isb	sy
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80038d8:	4dbb      	ldr	r5, [pc, #748]	; (8003bc8 <main+0x31c>)
	HAL_Init();
 80038da:	f004 f99f 	bl	8007c1c <HAL_Init>
	SystemClock_Config();
 80038de:	f7ff ff71 	bl	80037c4 <SystemClock_Config>
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038e2:	2703      	movs	r7, #3
	PeriphCommonClock_Config();
 80038e4:	f7ff ffc4 	bl	8003870 <PeriphCommonClock_Config>
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80038e8:	9459      	str	r4, [sp, #356]	; 0x164
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 80038ea:	4622      	mov	r2, r4
 80038ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80038f0:	48b6      	ldr	r0, [pc, #728]	; (8003bcc <main+0x320>)
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038f2:	f44f 1888 	mov.w	r8, #1114112	; 0x110000
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f6:	2601      	movs	r6, #1
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038f8:	f04f 0902 	mov.w	r9, #2
	GPIO_InitStruct.Pin = probe1_Pin;
 80038fc:	f44f 7a00 	mov.w	sl, #512	; 0x200
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003900:	e9cd 4455 	strd	r4, r4, [sp, #340]	; 0x154
 8003904:	e9cd 4457 	strd	r4, r4, [sp, #348]	; 0x15c
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8003908:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800390a:	f043 0310 	orr.w	r3, r3, #16
 800390e:	632b      	str	r3, [r5, #48]	; 0x30
 8003910:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003912:	f003 0310 	and.w	r3, r3, #16
 8003916:	9303      	str	r3, [sp, #12]
 8003918:	9b03      	ldr	r3, [sp, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800391a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800391c:	f043 0304 	orr.w	r3, r3, #4
 8003920:	632b      	str	r3, [r5, #48]	; 0x30
 8003922:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	9304      	str	r3, [sp, #16]
 800392a:	9b04      	ldr	r3, [sp, #16]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800392c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	632b      	str	r3, [r5, #48]	; 0x30
 8003934:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003936:	f003 0320 	and.w	r3, r3, #32
 800393a:	9305      	str	r3, [sp, #20]
 800393c:	9b05      	ldr	r3, [sp, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800393e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003944:	632b      	str	r3, [r5, #48]	; 0x30
 8003946:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800394c:	9306      	str	r3, [sp, #24]
 800394e:	9b06      	ldr	r3, [sp, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003950:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	632b      	str	r3, [r5, #48]	; 0x30
 8003958:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	9307      	str	r3, [sp, #28]
 8003960:	9b07      	ldr	r3, [sp, #28]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003962:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003964:	f043 0302 	orr.w	r3, r3, #2
 8003968:	632b      	str	r3, [r5, #48]	; 0x30
 800396a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800396c:	f003 0302 	and.w	r3, r3, #2
 8003970:	9308      	str	r3, [sp, #32]
 8003972:	9b08      	ldr	r3, [sp, #32]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8003974:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800397a:	632b      	str	r3, [r5, #48]	; 0x30
 800397c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800397e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003982:	9309      	str	r3, [sp, #36]	; 0x24
 8003984:	9b09      	ldr	r3, [sp, #36]	; 0x24
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8003986:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003988:	f043 0308 	orr.w	r3, r3, #8
 800398c:	632b      	str	r3, [r5, #48]	; 0x30
 800398e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003990:	f003 0308 	and.w	r3, r3, #8
 8003994:	930a      	str	r3, [sp, #40]	; 0x28
 8003996:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	HAL_GPIO_WritePin(probe1_GPIO_Port, probe1_Pin, GPIO_PIN_RESET);
 8003998:	f007 fee0 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin, GPIO_PIN_RESET);
 800399c:	4622      	mov	r2, r4
 800399e:	f644 0181 	movw	r1, #18561	; 0x4881
 80039a2:	488b      	ldr	r0, [pc, #556]	; (8003bd0 <main+0x324>)
 80039a4:	f007 feda 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOE, XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15, GPIO_PIN_RESET);
 80039a8:	4622      	mov	r2, r4
 80039aa:	f44f 4154 	mov.w	r1, #54272	; 0xd400
 80039ae:	4889      	ldr	r0, [pc, #548]	; (8003bd4 <main+0x328>)
 80039b0:	f007 fed4 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin, GPIO_PIN_SET);
 80039b4:	f44f 4178 	mov.w	r1, #63488	; 0xf800
 80039b8:	4887      	ldr	r0, [pc, #540]	; (8003bd8 <main+0x32c>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	f007 fece 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin | USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80039c0:	4622      	mov	r2, r4
 80039c2:	2144      	movs	r1, #68	; 0x44
 80039c4:	4885      	ldr	r0, [pc, #532]	; (8003bdc <main+0x330>)
 80039c6:	f007 fec9 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(probe2_GPIO_Port, probe2_Pin, GPIO_PIN_RESET);
 80039ca:	4622      	mov	r2, r4
 80039cc:	2102      	movs	r1, #2
 80039ce:	4882      	ldr	r0, [pc, #520]	; (8003bd8 <main+0x32c>)
 80039d0:	f007 fec4 	bl	800b75c <HAL_GPIO_WritePin>
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 80039d4:	f642 1388 	movw	r3, #10632	; 0x2988
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039d8:	a955      	add	r1, sp, #340	; 0x154
 80039da:	487e      	ldr	r0, [pc, #504]	; (8003bd4 <main+0x328>)
	GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_11 | GPIO_PIN_13;
 80039dc:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039de:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80039e2:	f007 fc0f 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80039e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80039ea:	a955      	add	r1, sp, #340	; 0x154
 80039ec:	487c      	ldr	r0, [pc, #496]	; (8003be0 <main+0x334>)
	GPIO_InitStruct.Pin = USER_Btn_Pin;
 80039ee:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039f0:	f8cd 8158 	str.w	r8, [sp, #344]	; 0x158
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f4:	9457      	str	r4, [sp, #348]	; 0x15c
	HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80039f6:	f007 fc05 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 80039fa:	f643 533c 	movw	r3, #15676	; 0x3d3c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80039fe:	a955      	add	r1, sp, #340	; 0x154
 8003a00:	4872      	ldr	r0, [pc, #456]	; (8003bcc <main+0x320>)
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10 | GPIO_PIN_11
 8003a02:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a04:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a08:	f007 fbfc 	bl	800b204 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003a0c:	a955      	add	r1, sp, #340	; 0x154
 8003a0e:	486f      	ldr	r0, [pc, #444]	; (8003bcc <main+0x320>)
	GPIO_InitStruct.Pin = probe1_Pin;
 8003a10:	f8cd a154 	str.w	sl, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a14:	f8cd 9160 	str.w	r9, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a18:	e9cd 6656 	strd	r6, r6, [sp, #344]	; 0x158
	HAL_GPIO_Init(probe1_GPIO_Port, &GPIO_InitStruct);
 8003a1c:	f007 fbf2 	bl	800b204 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a20:	a955      	add	r1, sp, #340	; 0x154
 8003a22:	486f      	ldr	r0, [pc, #444]	; (8003be0 <main+0x334>)
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a24:	9657      	str	r6, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a26:	e9cd 6455 	strd	r6, r4, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a2a:	f007 fbeb 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a2e:	2340      	movs	r3, #64	; 0x40
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	a955      	add	r1, sp, #340	; 0x154
 8003a32:	486c      	ldr	r0, [pc, #432]	; (8003be4 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003a34:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a36:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f007 fbe3 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8003a3e:	f644 0381 	movw	r3, #18561	; 0x4881
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a42:	a955      	add	r1, sp, #340	; 0x154
 8003a44:	4862      	ldr	r0, [pc, #392]	; (8003bd0 <main+0x324>)
	GPIO_InitStruct.Pin = LD1_Pin | GPIO_PIN_11 | LD3_Pin | LD2_Pin;
 8003a46:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a48:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4e:	f007 fbd9 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8003a52:	2322      	movs	r3, #34	; 0x22
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a54:	a955      	add	r1, sp, #340	; 0x154
 8003a56:	485e      	ldr	r0, [pc, #376]	; (8003bd0 <main+0x324>)
	GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_5;
 8003a58:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5e:	f007 fbd1 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8003a62:	f24d 533b 	movw	r3, #54587	; 0xd53b
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a66:	a955      	add	r1, sp, #340	; 0x154
 8003a68:	485c      	ldr	r0, [pc, #368]	; (8003bdc <main+0x330>)
	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_10
 8003a6a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6c:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a70:	f007 fbc8 	bl	800b204 <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a74:	a955      	add	r1, sp, #340	; 0x154
 8003a76:	4857      	ldr	r0, [pc, #348]	; (8003bd4 <main+0x328>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a78:	9457      	str	r4, [sp, #348]	; 0x15c
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003a7a:	e9cd a855 	strd	sl, r8, [sp, #340]	; 0x154
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a7e:	f007 fbc1 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8003a82:	f44f 4354 	mov.w	r3, #54272	; 0xd400
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a86:	a955      	add	r1, sp, #340	; 0x154
 8003a88:	4852      	ldr	r0, [pc, #328]	; (8003bd4 <main+0x328>)
	GPIO_InitStruct.Pin = XBEE_DTR_Pin | GPIO_PIN_12 | LP_FILT_Pin | GPIO_PIN_15;
 8003a8a:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003a8c:	f04f 0880 	mov.w	r8, #128	; 0x80
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a90:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003a92:	f04f 0a0c 	mov.w	sl, #12
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a96:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a9a:	f007 fbb3 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8003a9e:	f240 4385 	movw	r3, #1157	; 0x485
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aa2:	a955      	add	r1, sp, #340	; 0x154
 8003aa4:	484c      	ldr	r0, [pc, #304]	; (8003bd8 <main+0x32c>)
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_7;
 8003aa6:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003aac:	f007 fbaa 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003ab0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ab4:	a955      	add	r1, sp, #340	; 0x154
 8003ab6:	4848      	ldr	r0, [pc, #288]	; (8003bd8 <main+0x32c>)
	GPIO_InitStruct.Pin = LED_D1_Pin | LED_D2_Pin | LED_D3_Pin | LED_D4_Pin | LED_D5_Pin;
 8003ab8:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aba:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac0:	f007 fba0 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8003ac4:	2344      	movs	r3, #68	; 0x44
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ac6:	a955      	add	r1, sp, #340	; 0x154
 8003ac8:	4844      	ldr	r0, [pc, #272]	; (8003bdc <main+0x330>)
	GPIO_InitStruct.Pin = CS_PGA_Pin | USB_PowerSwitchOn_Pin;
 8003aca:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003acc:	9458      	str	r4, [sp, #352]	; 0x160
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ace:	e9cd 6456 	strd	r6, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ad2:	f007 fb97 	bl	800b204 <HAL_GPIO_Init>
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ad6:	a955      	add	r1, sp, #340	; 0x154
 8003ad8:	4840      	ldr	r0, [pc, #256]	; (8003bdc <main+0x330>)
	GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8003ada:	f8cd 8154 	str.w	r8, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ade:	e9cd 4456 	strd	r4, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003ae2:	f007 fb8f 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003ae6:	f44f 7340 	mov.w	r3, #768	; 0x300
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aea:	a955      	add	r1, sp, #340	; 0x154
 8003aec:	483c      	ldr	r0, [pc, #240]	; (8003be0 <main+0x334>)
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8003aee:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af0:	e9cd 7456 	strd	r7, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003af4:	f007 fb86 	bl	800b204 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003af8:	f44f 6380 	mov.w	r3, #1024	; 0x400
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003afc:	a955      	add	r1, sp, #340	; 0x154
 8003afe:	4839      	ldr	r0, [pc, #228]	; (8003be4 <main+0x338>)
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b00:	9355      	str	r3, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b02:	9758      	str	r7, [sp, #352]	; 0x160
	GPIO_InitStruct.Alternate = GPIO_AF12_MDIOS;
 8003b04:	f8cd a164 	str.w	sl, [sp, #356]	; 0x164
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	e9cd 9456 	strd	r9, r4, [sp, #344]	; 0x158
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b0c:	f007 fb7a 	bl	800b204 <HAL_GPIO_Init>
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003b10:	a955      	add	r1, sp, #340	; 0x154
 8003b12:	4831      	ldr	r0, [pc, #196]	; (8003bd8 <main+0x32c>)
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b14:	e9cd 9655 	strd	r9, r6, [sp, #340]	; 0x154
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b18:	e9cd 6957 	strd	r6, r9, [sp, #348]	; 0x15c
	HAL_GPIO_Init(probe2_GPIO_Port, &GPIO_InitStruct);
 8003b1c:	f007 fb72 	bl	800b204 <HAL_GPIO_Init>
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003b20:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003b22:	4639      	mov	r1, r7
 8003b24:	4622      	mov	r2, r4
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003b2a:	200b      	movs	r0, #11
	__HAL_RCC_DMA1_CLK_ENABLE();
 8003b2c:	632b      	str	r3, [r5, #48]	; 0x30
 8003b2e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	9b01      	ldr	r3, [sp, #4]
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003b38:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003b3a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b3e:	632b      	str	r3, [r5, #48]	; 0x30
 8003b40:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	huart2.Init.BaudRate = 115200;
 8003b42:	4d29      	ldr	r5, [pc, #164]	; (8003be8 <main+0x33c>)
	__HAL_RCC_DMA2_CLK_ENABLE();
 8003b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b48:	9302      	str	r3, [sp, #8]
 8003b4a:	9b02      	ldr	r3, [sp, #8]
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 3, 0);
 8003b4c:	f004 fcdc 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8003b50:	200b      	movs	r0, #11
 8003b52:	f004 fd23 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8003b56:	4622      	mov	r2, r4
 8003b58:	2106      	movs	r1, #6
 8003b5a:	4650      	mov	r0, sl
 8003b5c:	f004 fcd4 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003b60:	4650      	mov	r0, sl
 8003b62:	f004 fd1b 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 6, 0);
 8003b66:	4622      	mov	r2, r4
 8003b68:	2106      	movs	r1, #6
 8003b6a:	2010      	movs	r0, #16
 8003b6c:	f004 fccc 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003b70:	2010      	movs	r0, #16
 8003b72:	f004 fd13 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 3, 0);
 8003b76:	4622      	mov	r2, r4
 8003b78:	4639      	mov	r1, r7
 8003b7a:	2011      	movs	r0, #17
 8003b7c:	f004 fcc4 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003b80:	2011      	movs	r0, #17
 8003b82:	f004 fd0b 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 3, 0);
 8003b86:	4622      	mov	r2, r4
 8003b88:	4639      	mov	r1, r7
 8003b8a:	202f      	movs	r0, #47	; 0x2f
 8003b8c:	f004 fcbc 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8003b90:	202f      	movs	r0, #47	; 0x2f
 8003b92:	f004 fd03 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 6, 0);
 8003b96:	4622      	mov	r2, r4
 8003b98:	2106      	movs	r1, #6
 8003b9a:	2039      	movs	r0, #57	; 0x39
 8003b9c:	f004 fcb4 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003ba0:	2039      	movs	r0, #57	; 0x39
 8003ba2:	f004 fcfb 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 2, 0);
 8003ba6:	4622      	mov	r2, r4
 8003ba8:	4649      	mov	r1, r9
 8003baa:	203c      	movs	r0, #60	; 0x3c
 8003bac:	f004 fcac 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003bb0:	203c      	movs	r0, #60	; 0x3c
 8003bb2:	f004 fcf3 	bl	800859c <HAL_NVIC_EnableIRQ>
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 3, 0);
 8003bb6:	4622      	mov	r2, r4
 8003bb8:	4639      	mov	r1, r7
 8003bba:	2045      	movs	r0, #69	; 0x45
 8003bbc:	f004 fca4 	bl	8008508 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8003bc0:	2045      	movs	r0, #69	; 0x45
 8003bc2:	e013      	b.n	8003bec <main+0x340>
 8003bc4:	e000ed00 	.word	0xe000ed00
 8003bc8:	40023800 	.word	0x40023800
 8003bcc:	40021400 	.word	0x40021400
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40021000 	.word	0x40021000
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021800 	.word	0x40021800
 8003be0:	40020800 	.word	0x40020800
 8003be4:	40020000 	.word	0x40020000
 8003be8:	40004400 	.word	0x40004400
 8003bec:	f004 fcd6 	bl	800859c <HAL_NVIC_EnableIRQ>
	huart2.Instance = USART2;
 8003bf0:	48bd      	ldr	r0, [pc, #756]	; (8003ee8 <main+0x63c>)
	huart2.Init.BaudRate = 115200;
 8003bf2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003bf6:	4622      	mov	r2, r4
 8003bf8:	4621      	mov	r1, r4
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003bfa:	f8c0 a014 	str.w	sl, [r0, #20]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003bfe:	6104      	str	r4, [r0, #16]
	huart2.Init.BaudRate = 115200;
 8003c00:	e9c0 5300 	strd	r5, r3, [r0]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003c04:	4623      	mov	r3, r4
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003c06:	e9c0 4402 	strd	r4, r4, [r0, #8]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c0a:	e9c0 4406 	strd	r4, r4, [r0, #24]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c0e:	e9c0 4408 	strd	r4, r4, [r0, #32]
	if (HAL_RS485Ex_Init(&huart2, UART_DE_POLARITY_HIGH, 0, 0) != HAL_OK) {
 8003c12:	f00f f955 	bl	8012ec0 <HAL_RS485Ex_Init>
 8003c16:	2800      	cmp	r0, #0
 8003c18:	f040 8446 	bne.w	80044a8 <main+0xbfc>
	hadc1.Instance = ADC1;
 8003c1c:	4cb3      	ldr	r4, [pc, #716]	; (8003eec <main+0x640>)
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c1e:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8003c22:	4bb3      	ldr	r3, [pc, #716]	; (8003ef0 <main+0x644>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8003c24:	9022      	str	r0, [sp, #136]	; 0x88
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003c26:	9045      	str	r0, [sp, #276]	; 0x114
 8003c28:	9048      	str	r0, [sp, #288]	; 0x120
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003c2a:	60a0      	str	r0, [r4, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c2c:	6120      	str	r0, [r4, #16]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003c2e:	f884 0020 	strb.w	r0, [r4, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003c32:	62e0      	str	r0, [r4, #44]	; 0x2c
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c34:	60e0      	str	r0, [r4, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003c36:	6160      	str	r0, [r4, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8003c38:	61a6      	str	r6, [r4, #24]
	hadc1.Init.NbrOfConversion = 1;
 8003c3a:	61e6      	str	r6, [r4, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8003c3c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003c40:	e9c4 3500 	strd	r3, r5, [r4]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c44:	4bab      	ldr	r3, [pc, #684]	; (8003ef4 <main+0x648>)
	ADC_MultiModeTypeDef multimode = { 0 };
 8003c46:	e9cd 0023 	strd	r0, r0, [sp, #140]	; 0x8c
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003c4a:	e9cd 0046 	strd	r0, r0, [sp, #280]	; 0x118
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003c4e:	4620      	mov	r0, r4
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003c50:	62a3      	str	r3, [r4, #40]	; 0x28
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003c52:	f004 f819 	bl	8007c88 <HAL_ADC_Init>
 8003c56:	2800      	cmp	r0, #0
 8003c58:	f040 8426 	bne.w	80044a8 <main+0xbfc>
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003c5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
	multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8003c60:	9024      	str	r0, [sp, #144]	; 0x90
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003c62:	2017      	movs	r0, #23
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003c64:	a922      	add	r1, sp, #136	; 0x88
	multimode.DMAAccessMode = ADC_DMAACCESSMODE_2;
 8003c66:	e9cd 0322 	strd	r0, r3, [sp, #136]	; 0x88
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f004 fbcc 	bl	8008408 <HAL_ADCEx_MultiModeConfigChannel>
 8003c70:	2800      	cmp	r0, #0
 8003c72:	f040 8419 	bne.w	80044a8 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003c76:	9047      	str	r0, [sp, #284]	; 0x11c
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c78:	a945      	add	r1, sp, #276	; 0x114
 8003c7a:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c7c:	e9cd 7645 	strd	r7, r6, [sp, #276]	; 0x114
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8003c80:	f004 face 	bl	8008220 <HAL_ADC_ConfigChannel>
 8003c84:	2800      	cmp	r0, #0
 8003c86:	f040 840f 	bne.w	80044a8 <main+0xbfc>
	hadc2.Instance = ADC2;
 8003c8a:	4c9b      	ldr	r4, [pc, #620]	; (8003ef8 <main+0x64c>)
 8003c8c:	4b9b      	ldr	r3, [pc, #620]	; (8003efc <main+0x650>)
	hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003c8e:	6120      	str	r0, [r4, #16]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003c90:	f884 0020 	strb.w	r0, [r4, #32]
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003c94:	60e0      	str	r0, [r4, #12]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8003c96:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003c9a:	6160      	str	r0, [r4, #20]
	hadc2.Init.ContinuousConvMode = ENABLE;
 8003c9c:	61a6      	str	r6, [r4, #24]
	hadc2.Init.NbrOfConversion = 1;
 8003c9e:	61e6      	str	r6, [r4, #28]
	hadc2.Instance = ADC2;
 8003ca0:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003ca2:	e9cd 0041 	strd	r0, r0, [sp, #260]	; 0x104
 8003ca6:	e9cd 0043 	strd	r0, r0, [sp, #268]	; 0x10c
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8003caa:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8003cae:	4620      	mov	r0, r4
 8003cb0:	f003 ffea 	bl	8007c88 <HAL_ADC_Init>
 8003cb4:	2800      	cmp	r0, #0
 8003cb6:	f040 83f7 	bne.w	80044a8 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cba:	9043      	str	r0, [sp, #268]	; 0x10c
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003cbc:	a941      	add	r1, sp, #260	; 0x104
 8003cbe:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003cc0:	e9cd 7641 	strd	r7, r6, [sp, #260]	; 0x104
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8003cc4:	f004 faac 	bl	8008220 <HAL_ADC_ConfigChannel>
 8003cc8:	2800      	cmp	r0, #0
 8003cca:	f040 83ed 	bne.w	80044a8 <main+0xbfc>
	hadc3.Instance = ADC3;
 8003cce:	4c8c      	ldr	r4, [pc, #560]	; (8003f00 <main+0x654>)
 8003cd0:	4b8c      	ldr	r3, [pc, #560]	; (8003f04 <main+0x658>)
	hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003cd2:	6120      	str	r0, [r4, #16]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 8003cd4:	f884 0020 	strb.w	r0, [r4, #32]
	hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003cd8:	60e0      	str	r0, [r4, #12]
	hadc3.Init.DMAContinuousRequests = DISABLE;
 8003cda:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
	hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8003cde:	6160      	str	r0, [r4, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 8003ce0:	61a6      	str	r6, [r4, #24]
	hadc3.Init.NbrOfConversion = 1;
 8003ce2:	61e6      	str	r6, [r4, #28]
	hadc3.Instance = ADC3;
 8003ce4:	6023      	str	r3, [r4, #0]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003ce6:	e9cd 003d 	strd	r0, r0, [sp, #244]	; 0xf4
 8003cea:	e9cd 003f 	strd	r0, r0, [sp, #252]	; 0xfc
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8003cee:	e9c4 5001 	strd	r5, r0, [r4, #4]
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 8003cf2:	4620      	mov	r0, r4
 8003cf4:	f003 ffc8 	bl	8007c88 <HAL_ADC_Init>
 8003cf8:	2800      	cmp	r0, #0
 8003cfa:	f040 83d5 	bne.w	80044a8 <main+0xbfc>
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003cfe:	903f      	str	r0, [sp, #252]	; 0xfc
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8003d00:	a93d      	add	r1, sp, #244	; 0xf4
 8003d02:	4620      	mov	r0, r4
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003d04:	e9cd 763d 	strd	r7, r6, [sp, #244]	; 0xf4
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8003d08:	f004 fa8a 	bl	8008220 <HAL_ADC_ConfigChannel>
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	f040 83cb 	bne.w	80044a8 <main+0xbfc>
	hrng.Instance = RNG;
 8003d12:	487d      	ldr	r0, [pc, #500]	; (8003f08 <main+0x65c>)
 8003d14:	4b7d      	ldr	r3, [pc, #500]	; (8003f0c <main+0x660>)
 8003d16:	6003      	str	r3, [r0, #0]
	if (HAL_RNG_Init(&hrng) != HAL_OK) {
 8003d18:	f00a fa92 	bl	800e240 <HAL_RNG_Init>
 8003d1c:	2800      	cmp	r0, #0
 8003d1e:	f040 83c3 	bne.w	80044a8 <main+0xbfc>
	htim6.Instance = TIM6;
 8003d22:	4b7b      	ldr	r3, [pc, #492]	; (8003f10 <main+0x664>)
	htim6.Init.Prescaler = 10800;
 8003d24:	f642 2230 	movw	r2, #10800	; 0x2a30
 8003d28:	497a      	ldr	r1, [pc, #488]	; (8003f14 <main+0x668>)
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d2a:	9021      	str	r0, [sp, #132]	; 0x84
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d2c:	6098      	str	r0, [r3, #8]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d2e:	f8c3 8018 	str.w	r8, [r3, #24]
	htim6.Init.Prescaler = 10800;
 8003d32:	e9c3 1200 	strd	r1, r2, [r3]
	htim6.Init.Period = 10000;
 8003d36:	f242 7210 	movw	r2, #10000	; 0x2710
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d3a:	e9cd 001f 	strd	r0, r0, [sp, #124]	; 0x7c
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003d3e:	4618      	mov	r0, r3
	htim6.Init.Period = 10000;
 8003d40:	60da      	str	r2, [r3, #12]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003d42:	f00c f86d 	bl	800fe20 <HAL_TIM_Base_Init>
 8003d46:	2800      	cmp	r0, #0
 8003d48:	f040 83ae 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003d4c:	2310      	movs	r3, #16
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8003d4e:	a91f      	add	r1, sp, #124	; 0x7c
 8003d50:	486f      	ldr	r0, [pc, #444]	; (8003f10 <main+0x664>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8003d52:	931f      	str	r3, [sp, #124]	; 0x7c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d54:	2300      	movs	r3, #0
 8003d56:	9321      	str	r3, [sp, #132]	; 0x84
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK) {
 8003d58:	f00d fccc 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003d5c:	2800      	cmp	r0, #0
 8003d5e:	f040 83a3 	bne.w	80044a8 <main+0xbfc>
	htim3.Instance = TIM3;
 8003d62:	4c6d      	ldr	r4, [pc, #436]	; (8003f18 <main+0x66c>)
	htim3.Init.Prescaler = 10800;
 8003d64:	f642 2330 	movw	r3, #10800	; 0x2a30
 8003d68:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 8003f3c <main+0x690>
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d6c:	2780      	movs	r7, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d6e:	9039      	str	r0, [sp, #228]	; 0xe4
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003d70:	905b      	str	r0, [sp, #364]	; 0x16c
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d72:	903c      	str	r0, [sp, #240]	; 0xf0
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d74:	60a0      	str	r0, [r4, #8]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d76:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d78:	901c      	str	r0, [sp, #112]	; 0x70
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003d7a:	61a7      	str	r7, [r4, #24]
	htim3.Init.Prescaler = 10800;
 8003d7c:	e9c4 a300 	strd	sl, r3, [r4]
	htim3.Init.Period = 10000;
 8003d80:	f242 7310 	movw	r3, #10000	; 0x2710
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003d84:	e9cd 0055 	strd	r0, r0, [sp, #340]	; 0x154
 8003d88:	e9cd 0057 	strd	r0, r0, [sp, #348]	; 0x15c
 8003d8c:	e9cd 0059 	strd	r0, r0, [sp, #356]	; 0x164
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003d90:	e9cd 003a 	strd	r0, r0, [sp, #232]	; 0xe8
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003d94:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003d98:	4620      	mov	r0, r4
	htim3.Init.Period = 10000;
 8003d9a:	60e3      	str	r3, [r4, #12]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8003d9c:	f00c f840 	bl	800fe20 <HAL_TIM_Base_Init>
 8003da0:	2800      	cmp	r0, #0
 8003da2:	f040 8381 	bne.w	80044a8 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003da6:	f44f 5680 	mov.w	r6, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003daa:	a939      	add	r1, sp, #228	; 0xe4
 8003dac:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dae:	9639      	str	r6, [sp, #228]	; 0xe4
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8003db0:	f00b facc 	bl	800f34c <HAL_TIM_ConfigClockSource>
 8003db4:	2800      	cmp	r0, #0
 8003db6:	f040 8377 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f00c f9cc 	bl	8010158 <HAL_TIM_PWM_Init>
 8003dc0:	2800      	cmp	r0, #0
 8003dc2:	f040 8371 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dc6:	901c      	str	r0, [sp, #112]	; 0x70
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003dc8:	a91c      	add	r1, sp, #112	; 0x70
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dca:	901e      	str	r0, [sp, #120]	; 0x78
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK) {
 8003dcc:	4620      	mov	r0, r4
 8003dce:	f00d fc91 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003dd2:	2800      	cmp	r0, #0
 8003dd4:	f040 8368 	bne.w	80044a8 <main+0xbfc>
	sConfigOC.Pulse = 10;
 8003dd8:	230a      	movs	r3, #10
 8003dda:	f04f 0960 	mov.w	r9, #96	; 0x60
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003dde:	9057      	str	r0, [sp, #348]	; 0x15c
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003de0:	2204      	movs	r2, #4
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003de2:	9059      	str	r0, [sp, #356]	; 0x164
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003de4:	a955      	add	r1, sp, #340	; 0x154
 8003de6:	4620      	mov	r0, r4
	sConfigOC.Pulse = 10;
 8003de8:	e9cd 9355 	strd	r9, r3, [sp, #340]	; 0x154
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003dec:	f00c fd32 	bl	8010854 <HAL_TIM_PWM_ConfigChannel>
 8003df0:	4605      	mov	r5, r0
 8003df2:	2800      	cmp	r0, #0
 8003df4:	f040 8358 	bne.w	80044a8 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim3);
 8003df8:	4620      	mov	r0, r4
	htim7.Instance = TIM7;
 8003dfa:	4c48      	ldr	r4, [pc, #288]	; (8003f1c <main+0x670>)
	HAL_TIM_MspPostInit(&htim3);
 8003dfc:	f002 fb74 	bl	80064e8 <HAL_TIM_MspPostInit>
	htim7.Instance = TIM7;
 8003e00:	4b47      	ldr	r3, [pc, #284]	; (8003f20 <main+0x674>)
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003e02:	4620      	mov	r0, r4
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003e04:	61a7      	str	r7, [r4, #24]
	htim7.Instance = TIM7;
 8003e06:	6023      	str	r3, [r4, #0]
	htim7.Init.Period = 9600;
 8003e08:	f44f 5316 	mov.w	r3, #9600	; 0x2580
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e0c:	951b      	str	r5, [sp, #108]	; 0x6c
	htim7.Init.Period = 9600;
 8003e0e:	60e3      	str	r3, [r4, #12]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e10:	e9c4 5501 	strd	r5, r5, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e14:	e9cd 5519 	strd	r5, r5, [sp, #100]	; 0x64
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003e18:	f00c f802 	bl	800fe20 <HAL_TIM_Base_Init>
 8003e1c:	2800      	cmp	r0, #0
 8003e1e:	f040 8343 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e22:	2320      	movs	r3, #32
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e24:	901b      	str	r0, [sp, #108]	; 0x6c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003e26:	a919      	add	r1, sp, #100	; 0x64
 8003e28:	4620      	mov	r0, r4
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003e2a:	9319      	str	r3, [sp, #100]	; 0x64
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK) {
 8003e2c:	f00d fc62 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e30:	2800      	cmp	r0, #0
 8003e32:	f040 8339 	bne.w	80044a8 <main+0xbfc>
	htim1.Instance = TIM1;
 8003e36:	4c3b      	ldr	r4, [pc, #236]	; (8003f24 <main+0x678>)
 8003e38:	4b3b      	ldr	r3, [pc, #236]	; (8003f28 <main+0x67c>)
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e3a:	61a0      	str	r0, [r4, #24]
	htim1.Instance = TIM1;
 8003e3c:	6023      	str	r3, [r4, #0]
	htim1.Init.Period = 65535;
 8003e3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e42:	9018      	str	r0, [sp, #96]	; 0x60
	htim1.Init.Period = 65535;
 8003e44:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003e46:	e9cd 0035 	strd	r0, r0, [sp, #212]	; 0xd4
 8003e4a:	e9cd 0037 	strd	r0, r0, [sp, #220]	; 0xdc
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e4e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	htim1.Init.RepetitionCounter = 0;
 8003e52:	e9c4 0004 	strd	r0, r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003e56:	e9cd 0016 	strd	r0, r0, [sp, #88]	; 0x58
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 8003e5a:	4620      	mov	r0, r4
 8003e5c:	f00b ffe0 	bl	800fe20 <HAL_TIM_Base_Init>
 8003e60:	2800      	cmp	r0, #0
 8003e62:	f040 8321 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003e66:	a935      	add	r1, sp, #212	; 0xd4
 8003e68:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003e6a:	9635      	str	r6, [sp, #212]	; 0xd4
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8003e6c:	f00b fa6e 	bl	800f34c <HAL_TIM_ConfigClockSource>
 8003e70:	2800      	cmp	r0, #0
 8003e72:	f040 8319 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003e76:	2300      	movs	r3, #0
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003e78:	a916      	add	r1, sp, #88	; 0x58
 8003e7a:	4620      	mov	r0, r4
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003e7c:	9318      	str	r3, [sp, #96]	; 0x60
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8003e7e:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK) {
 8003e82:	f00d fc37 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2800      	cmp	r0, #0
 8003e8a:	f040 830d 	bne.w	80044a8 <main+0xbfc>
	hcrc.Instance = CRC;
 8003e8e:	4827      	ldr	r0, [pc, #156]	; (8003f2c <main+0x680>)
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003e90:	2601      	movs	r6, #1
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003e92:	8083      	strh	r3, [r0, #4]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003e94:	6206      	str	r6, [r0, #32]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003e96:	e9c0 3305 	strd	r3, r3, [r0, #20]
	hcrc.Instance = CRC;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	; (8003f30 <main+0x684>)
 8003e9c:	6003      	str	r3, [r0, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8003e9e:	f004 fbab 	bl	80085f8 <HAL_CRC_Init>
 8003ea2:	2800      	cmp	r0, #0
 8003ea4:	f040 8300 	bne.w	80044a8 <main+0xbfc>
	htim2.Instance = TIM2;
 8003ea8:	4c22      	ldr	r4, [pc, #136]	; (8003f34 <main+0x688>)
 8003eaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003eae:	902d      	str	r0, [sp, #180]	; 0xb4
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003eb0:	ad49      	add	r5, sp, #292	; 0x124
	htim2.Instance = TIM2;
 8003eb2:	6023      	str	r3, [r4, #0]
	htim2.Init.Period = 4000000000;
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <main+0x68c>)
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003eb6:	9049      	str	r0, [sp, #292]	; 0x124
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003eb8:	9031      	str	r0, [sp, #196]	; 0xc4
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003eba:	9030      	str	r0, [sp, #192]	; 0xc0
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003ebc:	9034      	str	r0, [sp, #208]	; 0xd0
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ebe:	6120      	str	r0, [r4, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ec0:	61a0      	str	r0, [r4, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ec2:	9015      	str	r0, [sp, #84]	; 0x54
	htim2.Init.Period = 4000000000;
 8003ec4:	60e3      	str	r3, [r4, #12]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003ec6:	e9cd 002e 	strd	r0, r0, [sp, #184]	; 0xb8
	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8003eca:	e9cd 004a 	strd	r0, r0, [sp, #296]	; 0x128
 8003ece:	e9cd 004c 	strd	r0, r0, [sp, #304]	; 0x130
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8003ed2:	e9cd 0032 	strd	r0, r0, [sp, #200]	; 0xc8
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ed6:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003eda:	e9cd 0013 	strd	r0, r0, [sp, #76]	; 0x4c
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8003ede:	4620      	mov	r0, r4
 8003ee0:	f00b ff9e 	bl	800fe20 <HAL_TIM_Base_Init>
 8003ee4:	e02c      	b.n	8003f40 <main+0x694>
 8003ee6:	bf00      	nop
 8003ee8:	200029c4 	.word	0x200029c4
 8003eec:	20002124 	.word	0x20002124
 8003ef0:	40012000 	.word	0x40012000
 8003ef4:	0f000001 	.word	0x0f000001
 8003ef8:	2000216c 	.word	0x2000216c
 8003efc:	40012100 	.word	0x40012100
 8003f00:	200021b4 	.word	0x200021b4
 8003f04:	40012200 	.word	0x40012200
 8003f08:	20002628 	.word	0x20002628
 8003f0c:	50060800 	.word	0x50060800
 8003f10:	2000292c 	.word	0x2000292c
 8003f14:	40001000 	.word	0x40001000
 8003f18:	20002848 	.word	0x20002848
 8003f1c:	20002978 	.word	0x20002978
 8003f20:	40001400 	.word	0x40001400
 8003f24:	20002764 	.word	0x20002764
 8003f28:	40010000 	.word	0x40010000
 8003f2c:	200021fc 	.word	0x200021fc
 8003f30:	40023000 	.word	0x40023000
 8003f34:	200027fc 	.word	0x200027fc
 8003f38:	ee6b2800 	.word	0xee6b2800
 8003f3c:	40000400 	.word	0x40000400
 8003f40:	2800      	cmp	r0, #0
 8003f42:	f040 82b1 	bne.w	80044a8 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003f4a:	a92d      	add	r1, sp, #180	; 0xb4
 8003f4c:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003f4e:	932d      	str	r3, [sp, #180]	; 0xb4
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8003f50:	f00b f9fc 	bl	800f34c <HAL_TIM_ConfigClockSource>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	f040 82a7 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f00c f9ca 	bl	80102f4 <HAL_TIM_IC_Init>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	f040 82a1 	bne.w	80044a8 <main+0xbfc>
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003f66:	2704      	movs	r7, #4
 8003f68:	2350      	movs	r3, #80	; 0x50
	sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8003f6a:	904b      	str	r0, [sp, #300]	; 0x12c
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003f6c:	4629      	mov	r1, r5
	sSlaveConfig.TriggerFilter = 0;
 8003f6e:	904d      	str	r0, [sp, #308]	; 0x134
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003f70:	4620      	mov	r0, r4
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8003f72:	e9cd 7349 	strd	r7, r3, [sp, #292]	; 0x124
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8003f76:	f00b fcc3 	bl	800f900 <HAL_TIM_SlaveConfigSynchro>
 8003f7a:	2800      	cmp	r0, #0
 8003f7c:	f040 8294 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003f80:	9013      	str	r0, [sp, #76]	; 0x4c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003f82:	a913      	add	r1, sp, #76	; 0x4c
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003f84:	9015      	str	r0, [sp, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK) {
 8003f86:	4620      	mov	r0, r4
 8003f88:	f00d fbb4 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	2800      	cmp	r0, #0
 8003f90:	f040 828a 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003f94:	a931      	add	r1, sp, #196	; 0xc4
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003f96:	e9cd 0631 	strd	r0, r6, [sp, #196]	; 0xc4
	sConfigIC.ICFilter = 0;
 8003f9a:	e9cd 0033 	strd	r0, r0, [sp, #204]	; 0xcc
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK) {
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f00c fe78 	bl	8010c94 <HAL_TIM_IC_ConfigChannel>
 8003fa4:	2800      	cmp	r0, #0
 8003fa6:	f040 827f 	bne.w	80044a8 <main+0xbfc>
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003faa:	2302      	movs	r3, #2
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003fac:	463a      	mov	r2, r7
 8003fae:	a931      	add	r1, sp, #196	; 0xc4
 8003fb0:	4620      	mov	r0, r4
	sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8003fb2:	9332      	str	r3, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8003fb4:	f00c fe6e 	bl	8010c94 <HAL_TIM_IC_ConfigChannel>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f040 8275 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003fbe:	a931      	add	r1, sp, #196	; 0xc4
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	2208      	movs	r2, #8
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8003fc4:	9632      	str	r6, [sp, #200]	; 0xc8
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8003fc6:	f00c fe65 	bl	8010c94 <HAL_TIM_IC_ConfigChannel>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f040 826c 	bne.w	80044a8 <main+0xbfc>
	huart6.Instance = USART6;
 8003fd0:	48c1      	ldr	r0, [pc, #772]	; (80042d8 <main+0xa2c>)
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003fd2:	2300      	movs	r3, #0
	huart6.Init.BaudRate = 9600;
 8003fd4:	f44f 5816 	mov.w	r8, #9600	; 0x2580
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003fd8:	260c      	movs	r6, #12
	huart6.Init.Parity = UART_PARITY_NONE;
 8003fda:	6103      	str	r3, [r0, #16]
	huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fdc:	6203      	str	r3, [r0, #32]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8003fde:	6146      	str	r6, [r0, #20]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8003fe0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart6.Init.BaudRate = 9600;
 8003fe8:	4bbc      	ldr	r3, [pc, #752]	; (80042dc <main+0xa30>)
 8003fea:	e9c0 3800 	strd	r3, r8, [r0]
	huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8003fee:	2310      	movs	r3, #16
 8003ff0:	6243      	str	r3, [r0, #36]	; 0x24
	huart6.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8003ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff6:	6383      	str	r3, [r0, #56]	; 0x38
	if (HAL_UART_Init(&huart6) != HAL_OK) {
 8003ff8:	f00e fd4a 	bl	8012a90 <HAL_UART_Init>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	f040 8253 	bne.w	80044a8 <main+0xbfc>
	hdac.Instance = DAC;
 8004002:	4cb7      	ldr	r4, [pc, #732]	; (80042e0 <main+0xa34>)
 8004004:	4bb7      	ldr	r3, [pc, #732]	; (80042e4 <main+0xa38>)
	DAC_ChannelConfTypeDef sConfig = { 0 };
 8004006:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800400a:	4620      	mov	r0, r4
	hdac.Instance = DAC;
 800400c:	6023      	str	r3, [r4, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK) {
 800400e:	f004 fbaf 	bl	8008770 <HAL_DAC_Init>
 8004012:	4602      	mov	r2, r0
 8004014:	2800      	cmp	r0, #0
 8004016:	f040 8247 	bne.w	80044a8 <main+0xbfc>
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 800401a:	2314      	movs	r3, #20
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 800401c:	4620      	mov	r0, r4
 800401e:	a90b      	add	r1, sp, #44	; 0x2c
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004020:	920c      	str	r2, [sp, #48]	; 0x30
	sConfig.DAC_Trigger = DAC_TRIGGER_T7_TRGO;
 8004022:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8004024:	f004 fd00 	bl	8008a28 <HAL_DAC_ConfigChannel>
 8004028:	4607      	mov	r7, r0
 800402a:	2800      	cmp	r0, #0
 800402c:	f040 823c 	bne.w	80044a8 <main+0xbfc>
	MX_FATFS_Init();
 8004030:	f00f fda2 	bl	8013b78 <MX_FATFS_Init>
	hi2c1.Instance = I2C1;
 8004034:	4cac      	ldr	r4, [pc, #688]	; (80042e8 <main+0xa3c>)
 8004036:	4bad      	ldr	r3, [pc, #692]	; (80042ec <main+0xa40>)
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004038:	4620      	mov	r0, r4
	hi2c1.Init.OwnAddress1 = 0;
 800403a:	60a7      	str	r7, [r4, #8]
	hi2c1.Instance = I2C1;
 800403c:	6023      	str	r3, [r4, #0]
	hi2c1.Init.Timing = 0x20404768;
 800403e:	f1a3 53fe 	sub.w	r3, r3, #532676608	; 0x1fc00000
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004042:	6227      	str	r7, [r4, #32]
	hi2c1.Init.Timing = 0x20404768;
 8004044:	f6a3 4398 	subw	r3, r3, #3224	; 0xc98
 8004048:	6063      	str	r3, [r4, #4]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800404a:	2301      	movs	r3, #1
	hi2c1.Init.OwnAddress2 = 0;
 800404c:	e9c4 7704 	strd	r7, r7, [r4, #16]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004050:	e9c4 7706 	strd	r7, r7, [r4, #24]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004054:	60e3      	str	r3, [r4, #12]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8004056:	f007 fdb5 	bl	800bbc4 <HAL_I2C_Init>
 800405a:	4601      	mov	r1, r0
 800405c:	2800      	cmp	r0, #0
 800405e:	f040 8223 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 8004062:	4620      	mov	r0, r4
 8004064:	f008 f906 	bl	800c274 <HAL_I2CEx_ConfigAnalogFilter>
 8004068:	4601      	mov	r1, r0
 800406a:	2800      	cmp	r0, #0
 800406c:	f040 821c 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8004070:	4620      	mov	r0, r4
 8004072:	f008 f951 	bl	800c318 <HAL_I2CEx_ConfigDigitalFilter>
 8004076:	4603      	mov	r3, r0
 8004078:	2800      	cmp	r0, #0
 800407a:	f040 8215 	bne.w	80044a8 <main+0xbfc>
	huart4.Instance = UART4;
 800407e:	489c      	ldr	r0, [pc, #624]	; (80042f0 <main+0xa44>)
	huart4.Init.BaudRate = 115200;
 8004080:	f44f 37e1 	mov.w	r7, #115200	; 0x1c200
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 8004084:	f44f 7440 	mov.w	r4, #768	; 0x300
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004088:	6243      	str	r3, [r0, #36]	; 0x24
	huart4.Init.HwFlowCtl = UART_HWCONTROL_RTS_CTS;
 800408a:	6184      	str	r4, [r0, #24]
	huart4.Init.StopBits = UART_STOPBITS_1;
 800408c:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8004090:	e9c0 3604 	strd	r3, r6, [r0, #16]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004094:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart4.Init.BaudRate = 115200;
 8004098:	4b96      	ldr	r3, [pc, #600]	; (80042f4 <main+0xa48>)
 800409a:	e9c0 3700 	strd	r3, r7, [r0]
	if (HAL_UART_Init(&huart4) != HAL_OK) {
 800409e:	f00e fcf7 	bl	8012a90 <HAL_UART_Init>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2800      	cmp	r0, #0
 80040a6:	f040 81ff 	bne.w	80044a8 <main+0xbfc>
	huart5.Instance = UART5;
 80040aa:	4893      	ldr	r0, [pc, #588]	; (80042f8 <main+0xa4c>)
	huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80040ac:	e9c0 8301 	strd	r8, r3, [r0, #4]
	huart5.Init.Parity = UART_PARITY_NONE;
 80040b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
	huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040b4:	e9c0 6305 	strd	r6, r3, [r0, #20]
	huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040b8:	e9c0 3307 	strd	r3, r3, [r0, #28]
	huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040bc:	6243      	str	r3, [r0, #36]	; 0x24
	huart5.Instance = UART5;
 80040be:	4b8f      	ldr	r3, [pc, #572]	; (80042fc <main+0xa50>)
 80040c0:	6003      	str	r3, [r0, #0]
	if (HAL_UART_Init(&huart5) != HAL_OK) {
 80040c2:	f00e fce5 	bl	8012a90 <HAL_UART_Init>
 80040c6:	4602      	mov	r2, r0
 80040c8:	2800      	cmp	r0, #0
 80040ca:	f040 81ed 	bne.w	80044a8 <main+0xbfc>
	huart3.Instance = USART3;
 80040ce:	488c      	ldr	r0, [pc, #560]	; (8004300 <main+0xa54>)
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 80040d0:	4611      	mov	r1, r2
	huart3.Instance = USART3;
 80040d2:	4b8c      	ldr	r3, [pc, #560]	; (8004304 <main+0xa58>)
	huart3.Init.BaudRate = 115200;
 80040d4:	6047      	str	r7, [r0, #4]
	huart3.Instance = USART3;
 80040d6:	6003      	str	r3, [r0, #0]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80040d8:	6146      	str	r6, [r0, #20]
	huart3.Init.Parity = UART_PARITY_NONE;
 80040da:	6102      	str	r2, [r0, #16]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80040dc:	e9c0 2202 	strd	r2, r2, [r0, #8]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80040e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040e4:	e9c0 2208 	strd	r2, r2, [r0, #32]
	if (HAL_MultiProcessor_Init(&huart3, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK) {
 80040e8:	f00e fd80 	bl	8012bec <HAL_MultiProcessor_Init>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2800      	cmp	r0, #0
 80040f0:	f040 81da 	bne.w	80044a8 <main+0xbfc>
	hspi4.Instance = SPI4;
 80040f4:	4884      	ldr	r0, [pc, #528]	; (8004308 <main+0xa5c>)
	hspi4.Init.Mode = SPI_MODE_MASTER;
 80040f6:	4a85      	ldr	r2, [pc, #532]	; (800430c <main+0xa60>)
	hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80040f8:	6303      	str	r3, [r0, #48]	; 0x30
	hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80040fa:	e9c0 3402 	strd	r3, r4, [r0, #8]
	hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80040fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004102:	e9c0 3307 	strd	r3, r3, [r0, #28]
	hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004106:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
	hspi4.Init.Mode = SPI_MODE_MASTER;
 800410a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800410e:	e9c0 2300 	strd	r2, r3, [r0]
	hspi4.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8004112:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004116:	6183      	str	r3, [r0, #24]
	hspi4.Init.CRCPolynomial = 7;
 8004118:	2307      	movs	r3, #7
 800411a:	62c3      	str	r3, [r0, #44]	; 0x2c
	hspi4.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800411c:	2308      	movs	r3, #8
 800411e:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi4) != HAL_OK) {
 8004120:	f00a f9c4 	bl	800e4ac <HAL_SPI_Init>
 8004124:	2800      	cmp	r0, #0
 8004126:	f040 81bf 	bne.w	80044a8 <main+0xbfc>
	hspi3.Instance = SPI3;
 800412a:	4879      	ldr	r0, [pc, #484]	; (8004310 <main+0xa64>)
	hspi3.Init.Mode = SPI_MODE_SLAVE;
 800412c:	2300      	movs	r3, #0
	hspi3.Init.NSS = SPI_NSS_SOFT;
 800412e:	f44f 7600 	mov.w	r6, #512	; 0x200
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004132:	6283      	str	r3, [r0, #40]	; 0x28
	hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8004134:	60c4      	str	r4, [r0, #12]
	hspi3.Init.CRCPolynomial = 7;
 8004136:	2407      	movs	r4, #7
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8004138:	6186      	str	r6, [r0, #24]
	hspi3.Init.CRCPolynomial = 7;
 800413a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800413c:	e9c0 3301 	strd	r3, r3, [r0, #4]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004140:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004144:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004148:	e9c0 330c 	strd	r3, r3, [r0, #48]	; 0x30
	hspi3.Instance = SPI3;
 800414c:	4b71      	ldr	r3, [pc, #452]	; (8004314 <main+0xa68>)
 800414e:	6003      	str	r3, [r0, #0]
	if (HAL_SPI_Init(&hspi3) != HAL_OK) {
 8004150:	f00a f9ac 	bl	800e4ac <HAL_SPI_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2800      	cmp	r0, #0
 8004158:	f040 81a6 	bne.w	80044a8 <main+0xbfc>
	hspi2.Instance = SPI2;
 800415c:	486e      	ldr	r0, [pc, #440]	; (8004318 <main+0xa6c>)
	hspi2.Init.Mode = SPI_MODE_MASTER;
 800415e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 8004348 <main+0xa9c>
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8004162:	6083      	str	r3, [r0, #8]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004164:	6283      	str	r3, [r0, #40]	; 0x28
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004166:	6303      	str	r3, [r0, #48]	; 0x30
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8004168:	6186      	str	r6, [r0, #24]
	hspi2.Init.CRCPolynomial = 7;
 800416a:	62c4      	str	r4, [r0, #44]	; 0x2c
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800416c:	e9c0 3304 	strd	r3, r3, [r0, #16]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004170:	e9c0 3308 	strd	r3, r3, [r0, #32]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8004174:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004178:	e9c0 8300 	strd	r8, r3, [r0]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800417c:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8004180:	60c3      	str	r3, [r0, #12]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8004182:	2338      	movs	r3, #56	; 0x38
 8004184:	61c3      	str	r3, [r0, #28]
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004186:	2308      	movs	r3, #8
 8004188:	6343      	str	r3, [r0, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800418a:	f00a f98f 	bl	800e4ac <HAL_SPI_Init>
 800418e:	2800      	cmp	r0, #0
 8004190:	f040 818a 	bne.w	80044a8 <main+0xbfc>
	hi2c4.Instance = I2C4;
 8004194:	4c61      	ldr	r4, [pc, #388]	; (800431c <main+0xa70>)
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004196:	2601      	movs	r6, #1
	hi2c4.Init.Timing = 0x20404768;
 8004198:	4b61      	ldr	r3, [pc, #388]	; (8004320 <main+0xa74>)
 800419a:	4f62      	ldr	r7, [pc, #392]	; (8004324 <main+0xa78>)
	hi2c4.Init.OwnAddress1 = 0;
 800419c:	60a0      	str	r0, [r4, #8]
	hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800419e:	6220      	str	r0, [r4, #32]
	hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80041a0:	60e6      	str	r6, [r4, #12]
	hi2c4.Init.OwnAddress2 = 0;
 80041a2:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041a6:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80041aa:	4620      	mov	r0, r4
	hi2c4.Init.Timing = 0x20404768;
 80041ac:	e9c4 3700 	strd	r3, r7, [r4]
	if (HAL_I2C_Init(&hi2c4) != HAL_OK) {
 80041b0:	f007 fd08 	bl	800bbc4 <HAL_I2C_Init>
 80041b4:	4601      	mov	r1, r0
 80041b6:	2800      	cmp	r0, #0
 80041b8:	f040 8176 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80041bc:	4620      	mov	r0, r4
 80041be:	f008 f859 	bl	800c274 <HAL_I2CEx_ConfigAnalogFilter>
 80041c2:	4601      	mov	r1, r0
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f040 816f 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK) {
 80041ca:	4620      	mov	r0, r4
 80041cc:	f008 f8a4 	bl	800c318 <HAL_I2CEx_ConfigDigitalFilter>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	f040 8169 	bne.w	80044a8 <main+0xbfc>
	hi2c2.Instance = I2C2;
 80041d6:	4c54      	ldr	r4, [pc, #336]	; (8004328 <main+0xa7c>)
 80041d8:	4b54      	ldr	r3, [pc, #336]	; (800432c <main+0xa80>)
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80041da:	6220      	str	r0, [r4, #32]
	hi2c2.Init.Timing = 0x20404768;
 80041dc:	6067      	str	r7, [r4, #4]
	hi2c2.Instance = I2C2;
 80041de:	6023      	str	r3, [r4, #0]
	hi2c2.Init.OwnAddress1 = 0;
 80041e0:	e9c4 0602 	strd	r0, r6, [r4, #8]
	hi2c2.Init.OwnAddress2 = 0;
 80041e4:	e9c4 0004 	strd	r0, r0, [r4, #16]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80041e8:	e9c4 0006 	strd	r0, r0, [r4, #24]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 80041ec:	4620      	mov	r0, r4
 80041ee:	f007 fce9 	bl	800bbc4 <HAL_I2C_Init>
 80041f2:	4601      	mov	r1, r0
 80041f4:	2800      	cmp	r0, #0
 80041f6:	f040 8157 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK) {
 80041fa:	4620      	mov	r0, r4
 80041fc:	f008 f83a 	bl	800c274 <HAL_I2CEx_ConfigAnalogFilter>
 8004200:	4601      	mov	r1, r0
 8004202:	2800      	cmp	r0, #0
 8004204:	f040 8150 	bne.w	80044a8 <main+0xbfc>
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK) {
 8004208:	4620      	mov	r0, r4
 800420a:	f008 f885 	bl	800c318 <HAL_I2CEx_ConfigDigitalFilter>
 800420e:	2800      	cmp	r0, #0
 8004210:	f040 814a 	bne.w	80044a8 <main+0xbfc>
	htim4.Instance = TIM4;
 8004214:	4c46      	ldr	r4, [pc, #280]	; (8004330 <main+0xa84>)
 8004216:	4b47      	ldr	r3, [pc, #284]	; (8004334 <main+0xa88>)
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004218:	9029      	str	r0, [sp, #164]	; 0xa4
	htim4.Instance = TIM4;
 800421a:	6023      	str	r3, [r4, #0]
	htim4.Init.Period = 1100;
 800421c:	f240 434c 	movw	r3, #1100	; 0x44c
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004220:	904e      	str	r0, [sp, #312]	; 0x138
	htim4.Init.Period = 1100;
 8004222:	60e3      	str	r3, [r4, #12]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004224:	2380      	movs	r3, #128	; 0x80
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004226:	902c      	str	r0, [sp, #176]	; 0xb0
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004228:	6120      	str	r0, [r4, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800422a:	9012      	str	r0, [sp, #72]	; 0x48
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800422c:	61a3      	str	r3, [r4, #24]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800422e:	e9cd 002a 	strd	r0, r0, [sp, #168]	; 0xa8
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8004232:	e9cd 004f 	strd	r0, r0, [sp, #316]	; 0x13c
 8004236:	e9cd 0051 	strd	r0, r0, [sp, #324]	; 0x144
 800423a:	e9cd 0053 	strd	r0, r0, [sp, #332]	; 0x14c
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800423e:	e9c4 0001 	strd	r0, r0, [r4, #4]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8004242:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8004246:	4620      	mov	r0, r4
 8004248:	f00b fdea 	bl	800fe20 <HAL_TIM_Base_Init>
 800424c:	2800      	cmp	r0, #0
 800424e:	f040 812b 	bne.w	80044a8 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004252:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8004256:	a929      	add	r1, sp, #164	; 0xa4
 8004258:	4620      	mov	r0, r4
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800425a:	9329      	str	r3, [sp, #164]	; 0xa4
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 800425c:	f00b f876 	bl	800f34c <HAL_TIM_ConfigClockSource>
 8004260:	2800      	cmp	r0, #0
 8004262:	f040 8121 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8004266:	4620      	mov	r0, r4
 8004268:	f00b fea8 	bl	800ffbc <HAL_TIM_OC_Init>
 800426c:	2800      	cmp	r0, #0
 800426e:	f040 811b 	bne.w	80044a8 <main+0xbfc>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 8004272:	2430      	movs	r4, #48	; 0x30
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004274:	9012      	str	r0, [sp, #72]	; 0x48
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 8004276:	a910      	add	r1, sp, #64	; 0x40
 8004278:	482d      	ldr	r0, [pc, #180]	; (8004330 <main+0xa84>)
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1;
 800427a:	9410      	str	r4, [sp, #64]	; 0x40
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK) {
 800427c:	f00d fa3a 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 8004280:	2800      	cmp	r0, #0
 8004282:	f040 8111 	bne.w	80044a8 <main+0xbfc>
	sConfigOC.Pulse = 550;
 8004286:	f240 2326 	movw	r3, #550	; 0x226
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800428a:	9050      	str	r0, [sp, #320]	; 0x140
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800428c:	9052      	str	r0, [sp, #328]	; 0x148
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 800428e:	2208      	movs	r2, #8
 8004290:	a94e      	add	r1, sp, #312	; 0x138
 8004292:	4827      	ldr	r0, [pc, #156]	; (8004330 <main+0xa84>)
	sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 8004294:	944e      	str	r4, [sp, #312]	; 0x138
	sConfigOC.Pulse = 550;
 8004296:	934f      	str	r3, [sp, #316]	; 0x13c
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK) {
 8004298:	f00c f95e 	bl	8010558 <HAL_TIM_OC_ConfigChannel>
 800429c:	2800      	cmp	r0, #0
 800429e:	f040 8103 	bne.w	80044a8 <main+0xbfc>
	HAL_TIM_MspPostInit(&htim4);
 80042a2:	4823      	ldr	r0, [pc, #140]	; (8004330 <main+0xa84>)
 80042a4:	f002 f920 	bl	80064e8 <HAL_TIM_MspPostInit>
	hiwdg.Instance = IWDG;
 80042a8:	4823      	ldr	r0, [pc, #140]	; (8004338 <main+0xa8c>)
	hiwdg.Init.Window = 4095;
 80042aa:	f640 73ff 	movw	r3, #4095	; 0xfff
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80042ae:	4f23      	ldr	r7, [pc, #140]	; (800433c <main+0xa90>)
	hiwdg.Init.Reload = 4095;
 80042b0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	hiwdg.Init.Prescaler = IWDG_PRESCALER_256;
 80042b4:	2306      	movs	r3, #6
 80042b6:	e9c0 7300 	strd	r7, r3, [r0]
	if (HAL_IWDG_Init(&hiwdg) != HAL_OK) {
 80042ba:	f008 f87d 	bl	800c3b8 <HAL_IWDG_Init>
 80042be:	4603      	mov	r3, r0
 80042c0:	2800      	cmp	r0, #0
 80042c2:	f040 80f1 	bne.w	80044a8 <main+0xbfc>
	htim14.Instance = TIM14;
 80042c6:	481e      	ldr	r0, [pc, #120]	; (8004340 <main+0xa94>)
	htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
	htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80042cc:	6103      	str	r3, [r0, #16]
	htim14.Instance = TIM14;
 80042ce:	4b1d      	ldr	r3, [pc, #116]	; (8004344 <main+0xa98>)
 80042d0:	6003      	str	r3, [r0, #0]
	htim14.Init.Period = 10800;
 80042d2:	f642 2330 	movw	r3, #10800	; 0x2a30
 80042d6:	e039      	b.n	800434c <main+0xaa0>
 80042d8:	20002bd4 	.word	0x20002bd4
 80042dc:	40011400 	.word	0x40011400
 80042e0:	20002220 	.word	0x20002220
 80042e4:	40007400 	.word	0x40007400
 80042e8:	20002534 	.word	0x20002534
 80042ec:	40005400 	.word	0x40005400
 80042f0:	20002acc 	.word	0x20002acc
 80042f4:	40004c00 	.word	0x40004c00
 80042f8:	20002b50 	.word	0x20002b50
 80042fc:	40005000 	.word	0x40005000
 8004300:	20002a48 	.word	0x20002a48
 8004304:	40004800 	.word	0x40004800
 8004308:	20002700 	.word	0x20002700
 800430c:	40013400 	.word	0x40013400
 8004310:	2000269c 	.word	0x2000269c
 8004314:	40003c00 	.word	0x40003c00
 8004318:	20002638 	.word	0x20002638
 800431c:	200025cc 	.word	0x200025cc
 8004320:	40006000 	.word	0x40006000
 8004324:	20404768 	.word	0x20404768
 8004328:	20002580 	.word	0x20002580
 800432c:	40005800 	.word	0x40005800
 8004330:	20002894 	.word	0x20002894
 8004334:	40000800 	.word	0x40000800
 8004338:	20002618 	.word	0x20002618
 800433c:	40003000 	.word	0x40003000
 8004340:	200027b0 	.word	0x200027b0
 8004344:	40002000 	.word	0x40002000
 8004348:	40003800 	.word	0x40003800
 800434c:	60c3      	str	r3, [r0, #12]
	htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800434e:	2380      	movs	r3, #128	; 0x80
 8004350:	6183      	str	r3, [r0, #24]
	if (HAL_TIM_Base_Init(&htim14) != HAL_OK) {
 8004352:	f00b fd65 	bl	800fe20 <HAL_TIM_Base_Init>
 8004356:	2800      	cmp	r0, #0
 8004358:	f040 80a6 	bne.w	80044a8 <main+0xbfc>
	htim5.Instance = TIM5;
 800435c:	4f53      	ldr	r7, [pc, #332]	; (80044ac <main+0xc00>)
	htim5.Init.Period = 4;
 800435e:	2610      	movs	r6, #16
	htim5.Instance = TIM5;
 8004360:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80044e0 <main+0xc34>
	htim5.Init.Period = 4;
 8004364:	f04f 0804 	mov.w	r8, #4
	htim5.Init.Prescaler = 0;
 8004368:	6078      	str	r0, [r7, #4]
	htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800436a:	6138      	str	r0, [r7, #16]
	htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800436c:	61b8      	str	r0, [r7, #24]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800436e:	900f      	str	r0, [sp, #60]	; 0x3c
	htim5.Instance = TIM5;
 8004370:	f8c7 9000 	str.w	r9, [r7]
	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8004374:	e9cd 0025 	strd	r0, r0, [sp, #148]	; 0x94
 8004378:	e9cd 0027 	strd	r0, r0, [sp, #156]	; 0x9c
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800437c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004380:	4638      	mov	r0, r7
	htim5.Init.Period = 4;
 8004382:	e9c7 6802 	strd	r6, r8, [r7, #8]
	if (HAL_TIM_Base_Init(&htim5) != HAL_OK) {
 8004386:	f00b fd4b 	bl	800fe20 <HAL_TIM_Base_Init>
 800438a:	2800      	cmp	r0, #0
 800438c:	f040 808c 	bne.w	80044a8 <main+0xbfc>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004390:	f44f 5480 	mov.w	r4, #4096	; 0x1000
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 8004394:	a925      	add	r1, sp, #148	; 0x94
 8004396:	4638      	mov	r0, r7
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004398:	9425      	str	r4, [sp, #148]	; 0x94
	if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK) {
 800439a:	f00a ffd7 	bl	800f34c <HAL_TIM_ConfigClockSource>
 800439e:	4603      	mov	r3, r0
 80043a0:	2800      	cmp	r0, #0
 80043a2:	f040 8081 	bne.w	80044a8 <main+0xbfc>
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80043a6:	4638      	mov	r0, r7
 80043a8:	a90d      	add	r1, sp, #52	; 0x34
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80043aa:	930d      	str	r3, [sp, #52]	; 0x34
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80043ac:	930f      	str	r3, [sp, #60]	; 0x3c
	if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK) {
 80043ae:	f00d f9a1 	bl	80116f4 <HAL_TIMEx_MasterConfigSynchronization>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d177      	bne.n	80044a8 <main+0xbfc>
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80043b8:	f8d9 2000 	ldr.w	r2, [r9]
	huart8.Instance = UART8;
 80043bc:	483c      	ldr	r0, [pc, #240]	; (80044b0 <main+0xc04>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80043be:	f042 0208 	orr.w	r2, r2, #8
	huart8.Init.BaudRate = 9600;
 80043c2:	493c      	ldr	r1, [pc, #240]	; (80044b4 <main+0xc08>)
	TIM5->CR1 |= (1 << 3);		// one pulse mode
 80043c4:	f8c9 2000 	str.w	r2, [r9]
	huart8.Init.Parity = UART_PARITY_NONE;
 80043c8:	6103      	str	r3, [r0, #16]
	huart8.Init.Mode = UART_MODE_RX;
 80043ca:	f8c0 8014 	str.w	r8, [r0, #20]
	huart8.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80043ce:	6384      	str	r4, [r0, #56]	; 0x38
	huart8.Init.StopBits = UART_STOPBITS_1;
 80043d0:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80043d4:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80043d8:	e9c0 3608 	strd	r3, r6, [r0, #32]
	huart8.Init.BaudRate = 9600;
 80043dc:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80043e0:	e9c0 1300 	strd	r1, r3, [r0]
	if (HAL_UART_Init(&huart8) != HAL_OK) {
 80043e4:	f00e fb54 	bl	8012a90 <HAL_UART_Init>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2800      	cmp	r0, #0
 80043ec:	d15c      	bne.n	80044a8 <main+0xbfc>
	huart7.Instance = UART7;
 80043ee:	4832      	ldr	r0, [pc, #200]	; (80044b8 <main+0xc0c>)
	huart7.Init.BaudRate = 115200;
 80043f0:	4a32      	ldr	r2, [pc, #200]	; (80044bc <main+0xc10>)
	huart7.Init.Parity = UART_PARITY_NONE;
 80043f2:	6103      	str	r3, [r0, #16]
	huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80043f4:	6203      	str	r3, [r0, #32]
	huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80043f6:	6246      	str	r6, [r0, #36]	; 0x24
	huart7.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80043f8:	6384      	str	r4, [r0, #56]	; 0x38
	huart7.Init.StopBits = UART_STOPBITS_1;
 80043fa:	e9c0 3302 	strd	r3, r3, [r0, #8]
	huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80043fe:	e9c0 3306 	strd	r3, r3, [r0, #24]
	huart7.Init.BaudRate = 115200;
 8004402:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8004406:	e9c0 2300 	strd	r2, r3, [r0]
	huart7.Init.Mode = UART_MODE_TX_RX;
 800440a:	230c      	movs	r3, #12
 800440c:	6143      	str	r3, [r0, #20]
	if (HAL_UART_Init(&huart7) != HAL_OK) {
 800440e:	f00e fb3f 	bl	8012a90 <HAL_UART_Init>
 8004412:	2800      	cmp	r0, #0
 8004414:	d148      	bne.n	80044a8 <main+0xbfc>
	osMutexDef(myMutex01);
 8004416:	2600      	movs	r6, #0
	MX_NVIC_Init();
 8004418:	f7fe ff36 	bl	8003288 <MX_NVIC_Init>
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 800441c:	a83d      	add	r0, sp, #244	; 0xf4
	osMessageQDef(myQueue01, 256, uint16_t);
 800441e:	4c28      	ldr	r4, [pc, #160]	; (80044c0 <main+0xc14>)
	osMutexDef(myMutex01);
 8004420:	e9cd 663d 	strd	r6, r6, [sp, #244]	; 0xf4
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004424:	f010 fdaa 	bl	8014f7c <osMutexCreate>
 8004428:	4b26      	ldr	r3, [pc, #152]	; (80044c4 <main+0xc18>)
 800442a:	4602      	mov	r2, r0
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800442c:	2101      	movs	r1, #1
 800442e:	a841      	add	r0, sp, #260	; 0x104
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004430:	f104 0710 	add.w	r7, r4, #16
	myMutex01Handle = osMutexCreate(osMutex(myMutex01));
 8004434:	601a      	str	r2, [r3, #0]
	osSemaphoreDef(ssicontent);
 8004436:	e9cd 6641 	strd	r6, r6, [sp, #260]	; 0x104
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 800443a:	f010 fdfb 	bl	8015034 <osSemaphoreCreate>
 800443e:	4b22      	ldr	r3, [pc, #136]	; (80044c8 <main+0xc1c>)
 8004440:	4602      	mov	r2, r0
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004442:	2101      	movs	r1, #1
 8004444:	a845      	add	r0, sp, #276	; 0x114
	osTimerDef(myTimer01, Callback01);
 8004446:	9646      	str	r6, [sp, #280]	; 0x118
	ssicontentHandle = osSemaphoreCreate(osSemaphore(ssicontent), 1);
 8004448:	601a      	str	r2, [r3, #0]
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 800444a:	4632      	mov	r2, r6
	osTimerDef(myTimer01, Callback01);
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <main+0xc20>)
 800444e:	9345      	str	r3, [sp, #276]	; 0x114
	myTimer01Handle = osTimerCreate(osTimer(myTimer01), osTimerPeriodic, NULL);
 8004450:	f010 fd72 	bl	8014f38 <osTimerCreate>
 8004454:	4b1e      	ldr	r3, [pc, #120]	; (80044d0 <main+0xc24>)
 8004456:	6018      	str	r0, [r3, #0]
	osMessageQDef(myQueue01, 256, uint16_t);
 8004458:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800445c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 8004460:	4628      	mov	r0, r5
 8004462:	4631      	mov	r1, r6
 8004464:	f010 fe60 	bl	8015128 <osMessageCreate>
 8004468:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <main+0xc28>)
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 800446a:	ad4e      	add	r5, sp, #312	; 0x138
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800446c:	342c      	adds	r4, #44	; 0x2c
	myQueue01Handle = osMessageCreate(osMessageQ(myQueue01), NULL);
 800446e:	6018      	str	r0, [r3, #0]
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 2048);
 8004470:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8004472:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004474:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8004478:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800447c:	4631      	mov	r1, r6
 800447e:	a84e      	add	r0, sp, #312	; 0x138
 8004480:	f010 fd20 	bl	8014ec4 <osThreadCreate>
 8004484:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <main+0xc2c>)
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 8004486:	ad55      	add	r5, sp, #340	; 0x154
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004488:	6018      	str	r0, [r3, #0]
	osThreadDef(LPTask, StarLPTask, osPriorityLow, 0, 2048);
 800448a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800448c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800448e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004492:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	LPTaskHandle = osThreadCreate(osThread(LPTask), NULL);
 8004496:	4631      	mov	r1, r6
 8004498:	a855      	add	r0, sp, #340	; 0x154
 800449a:	f010 fd13 	bl	8014ec4 <osThreadCreate>
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <main+0xc30>)
 80044a0:	6018      	str	r0, [r3, #0]
	osKernelStart();
 80044a2:	f010 fd01 	bl	8014ea8 <osKernelStart>
	while (1) {
 80044a6:	e7fe      	b.n	80044a6 <main+0xbfa>
		Error_Handler();
 80044a8:	f7ff f984 	bl	80037b4 <Error_Handler>
 80044ac:	200028e0 	.word	0x200028e0
 80044b0:	20002cdc 	.word	0x20002cdc
 80044b4:	40007c00 	.word	0x40007c00
 80044b8:	20002c58 	.word	0x20002c58
 80044bc:	40007800 	.word	0x40007800
 80044c0:	08028e74 	.word	0x08028e74
 80044c4:	20002d6c 	.word	0x20002d6c
 80044c8:	20002d88 	.word	0x20002d88
 80044cc:	080032ed 	.word	0x080032ed
 80044d0:	20002d74 	.word	0x20002d74
 80044d4:	20002d70 	.word	0x20002d70
 80044d8:	20002120 	.word	0x20002120
 80044dc:	200020d0 	.word	0x200020d0
 80044e0:	40000c00 	.word	0x40000c00

080044e4 <StartDefaultTask>:
void StartDefaultTask(void const *argument) {
 80044e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e8:	b084      	sub	sp, #16
	MX_USB_DEVICE_Init();
 80044ea:	f01f f803 	bl	80234f4 <MX_USB_DEVICE_Init>
	MX_LWIP_Init();
 80044ee:	f00f fb67 	bl	8013bc0 <MX_LWIP_Init>
	if ((i = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) == GPIO_PIN_SET) {		// blue button on stm board
 80044f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044f6:	48a1      	ldr	r0, [pc, #644]	; (800477c <StartDefaultTask+0x298>)
 80044f8:	f007 f91e 	bl	800b738 <HAL_GPIO_ReadPin>
 80044fc:	2801      	cmp	r0, #1
 80044fe:	f000 8120 	beq.w	8004742 <StartDefaultTask+0x25e>
		stampboot();	// make sure this runing program is in the boot vector (debug can avoid it)
 8004502:	f7fc fb85 	bl	8000c10 <stampboot>
	getboardpcb();		// find our daughterboard
 8004506:	f7ff f8c5 	bl	8003694 <getboardpcb>
	printf("%s----------------------------------------------------------------------------\n", str);
 800450a:	499d      	ldr	r1, [pc, #628]	; (8004780 <StartDefaultTask+0x29c>)
 800450c:	489d      	ldr	r0, [pc, #628]	; (8004784 <StartDefaultTask+0x2a0>)
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 800450e:	f242 752e 	movw	r5, #10030	; 0x272e
	printf("%s----------------------------------------------------------------------------\n", str);
 8004512:	f020 fc9f 	bl	8024e54 <iprintf>
	printf("Detector STM_UUID=%lx %lx %lx, SW Ver=%d.%d, Build=%d, PCB=%d\n", STM32_UUID[0], STM32_UUID[1],
 8004516:	4f9c      	ldr	r7, [pc, #624]	; (8004788 <StartDefaultTask+0x2a4>)
 8004518:	499c      	ldr	r1, [pc, #624]	; (800478c <StartDefaultTask+0x2a8>)
 800451a:	2400      	movs	r4, #0
 800451c:	6838      	ldr	r0, [r7, #0]
 800451e:	2610      	movs	r6, #16
 8004520:	f501 6184 	add.w	r1, r1, #1056	; 0x420
 8004524:	c90e      	ldmia	r1, {r1, r2, r3}
 8004526:	e9cd 5002 	strd	r5, r0, [sp, #8]
 800452a:	e9cd 4600 	strd	r4, r6, [sp]
 800452e:	4898      	ldr	r0, [pc, #608]	; (8004790 <StartDefaultTask+0x2ac>)
 8004530:	f020 fc90 	bl	8024e54 <iprintf>
	crc_rom();
 8004534:	f7fe ff02 	bl	800333c <crc_rom>
	if (!(netif_is_link_up(&gnetif))) {
 8004538:	4b96      	ldr	r3, [pc, #600]	; (8004794 <StartDefaultTask+0x2b0>)
 800453a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800453e:	075b      	lsls	r3, r3, #29
 8004540:	d41e      	bmi.n	8004580 <StartDefaultTask+0x9c>
		printf("LAN interface appears disconnected\n\r");
 8004542:	4895      	ldr	r0, [pc, #596]	; (8004798 <StartDefaultTask+0x2b4>)
 8004544:	2432      	movs	r4, #50	; 0x32
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004546:	4d95      	ldr	r5, [pc, #596]	; (800479c <StartDefaultTask+0x2b8>)
		printf("LAN interface appears disconnected\n\r");
 8004548:	f020 fc84 	bl	8024e54 <iprintf>
			osDelay(50);
 800454c:	2032      	movs	r0, #50	; 0x32
 800454e:	f010 fceb 	bl	8014f28 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_SET);	// Splat D5 led on
 8004552:	2201      	movs	r2, #1
 8004554:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004558:	4628      	mov	r0, r5
 800455a:	f007 f8ff 	bl	800b75c <HAL_GPIO_WritePin>
			osDelay(50);
 800455e:	2032      	movs	r0, #50	; 0x32
 8004560:	f010 fce2 	bl	8014f28 <osDelay>
			HAL_GPIO_WritePin(GPIOD, LED_D5_Pin, GPIO_PIN_RESET);	// Splat D5 led off
 8004564:	2200      	movs	r2, #0
 8004566:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800456a:	4628      	mov	r0, r5
 800456c:	f007 f8f6 	bl	800b75c <HAL_GPIO_WritePin>
		for (i = 0; i < 50; i++) {
 8004570:	3c01      	subs	r4, #1
 8004572:	d1eb      	bne.n	800454c <StartDefaultTask+0x68>
		printf("************* REBOOTING **************\n");
 8004574:	488a      	ldr	r0, [pc, #552]	; (80047a0 <StartDefaultTask+0x2bc>)
 8004576:	f020 fd09 	bl	8024f8c <puts>
		rebootme(0);
 800457a:	4620      	mov	r0, r4
 800457c:	f7fe ff7e 	bl	800347c <rebootme>
	globalfreeze = 0;		// Allow UDP streaming
 8004580:	4b88      	ldr	r3, [pc, #544]	; (80047a4 <StartDefaultTask+0x2c0>)
	netif = netif_default;
 8004582:	f8df 82a8 	ldr.w	r8, [pc, #680]	; 800482c <StartDefaultTask+0x348>
	globalfreeze = 0;		// Allow UDP streaming
 8004586:	601c      	str	r4, [r3, #0]
	netif = netif_default;
 8004588:	4b87      	ldr	r3, [pc, #540]	; (80047a8 <StartDefaultTask+0x2c4>)
	netif_set_link_callback(netif, netif_link_callbk_fn);
 800458a:	4988      	ldr	r1, [pc, #544]	; (80047ac <StartDefaultTask+0x2c8>)
	netif = netif_default;
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	f8c8 0000 	str.w	r0, [r8]
	netif_set_link_callback(netif, netif_link_callbk_fn);
 8004592:	f016 f873 	bl	801a67c <netif_set_link_callback>
	netif_set_status_callback(netif, netif_status_callbk_fn);
 8004596:	4986      	ldr	r1, [pc, #536]	; (80047b0 <StartDefaultTask+0x2cc>)
 8004598:	f8d8 0000 	ldr.w	r0, [r8]
 800459c:	f016 f82a 	bl	801a5f4 <netif_set_status_callback>
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80045a0:	4b84      	ldr	r3, [pc, #528]	; (80047b4 <StartDefaultTask+0x2d0>)
 80045a2:	f64f 62ed 	movw	r2, #65261	; 0xfeed
	statuspkt.bconf |= (circuitboardpcb << 8);
 80045a6:	6838      	ldr	r0, [r7, #0]
	statuspkt.uid = 0xFEED;		// 16 bits - this value gets replaced by data from the server
 80045a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	statuspkt.adctrigoff = TRIG_THRES;
 80045ac:	2264      	movs	r2, #100	; 0x64
	statuspkt.majorversion = MAJORVERSION;
 80045ae:	f883 4070 	strb.w	r4, [r3, #112]	; 0x70
	statuspkt.minorversion = MINORVERSION;
 80045b2:	f883 6071 	strb.w	r6, [r3, #113]	; 0x71
	statuspkt.build = BUILDNO;		// from build 10028 onwards
 80045b6:	f8a3 5084 	strh.w	r5, [r3, #132]	; 0x84
	statuspkt.udppknum = 0;
 80045ba:	601c      	str	r4, [r3, #0]
	statuspkt.sysuptime = 0;
 80045bc:	665c      	str	r4, [r3, #100]	; 0x64
	statuspkt.netuptime = 0;
 80045be:	669c      	str	r4, [r3, #104]	; 0x68
	statuspkt.gpsuptime = 0;
 80045c0:	66dc      	str	r4, [r3, #108]	; 0x6c
	statuspkt.adcpktssent = 0;
 80045c2:	f8a3 405e 	strh.w	r4, [r3, #94]	; 0x5e
	statuspkt.adctrigoff = TRIG_THRES;
 80045c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
	statuspkt.adcudpover = 0;		// debug use count overruns
 80045ca:	679c      	str	r4, [r3, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 80045cc:	67dc      	str	r4, [r3, #124]	; 0x7c
	statuspkt.udpsent = 0;		// debug use adc udp sample packet sent count
 80045ce:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	statuspkt.bconf = 0;
 80045d2:	f8c3 4090 	str.w	r4, [r3, #144]	; 0x90
	statuspkt.bconf |= 0x01;	// splat board version 1
 80045d6:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 80045da:	f041 0101 	orr.w	r1, r1, #1
 80045de:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
	statuspkt.bconf |= (circuitboardpcb << 8);
 80045e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 80045e6:	4974      	ldr	r1, [pc, #464]	; (80047b8 <StartDefaultTask+0x2d4>)
	statuspkt.bconf |= (circuitboardpcb << 8);
 80045e8:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80045ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	t2cap[0] = 44444444;
 80045f0:	4a72      	ldr	r2, [pc, #456]	; (80047bc <StartDefaultTask+0x2d8>)
	newbuild = BUILDNO;				// init to the same
 80045f2:	4b73      	ldr	r3, [pc, #460]	; (80047c0 <StartDefaultTask+0x2dc>)
	t2cap[0] = 44444444;
 80045f4:	6011      	str	r1, [r2, #0]
	newbuild = BUILDNO;				// init to the same
 80045f6:	601d      	str	r5, [r3, #0]
	initsplat();
 80045f8:	f001 fb00 	bl	8005bfc <initsplat>
	stat = setupneo();
 80045fc:	f000 fa6c 	bl	8004ad8 <setupneo>
	if (stat != HAL_OK) {
 8004600:	2800      	cmp	r0, #0
 8004602:	f040 80a1 	bne.w	8004748 <StartDefaultTask+0x264>
	printf("Setting up timers\n");
 8004606:	486f      	ldr	r0, [pc, #444]	; (80047c4 <StartDefaultTask+0x2e0>)
 8004608:	f020 fcc0 	bl	8024f8c <puts>
	if ( xSemaphoreGive(ssicontentHandle) != pdTRUE) {	// give the ssi generation semaphore
 800460c:	2300      	movs	r3, #0
 800460e:	486e      	ldr	r0, [pc, #440]	; (80047c8 <StartDefaultTask+0x2e4>)
 8004610:	461a      	mov	r2, r3
 8004612:	4619      	mov	r1, r3
 8004614:	6800      	ldr	r0, [r0, #0]
 8004616:	f010 ffb1 	bl	801557c <xQueueGenericSend>
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800461a:	486c      	ldr	r0, [pc, #432]	; (80047cc <StartDefaultTask+0x2e8>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 800461c:	4c6c      	ldr	r4, [pc, #432]	; (80047d0 <StartDefaultTask+0x2ec>)
	HAL_TIM_Base_Start_IT(&htim6);		// basic packet timestamp 32 bits
 800461e:	f00a fdd3 	bl	800f1c8 <HAL_TIM_Base_Start_IT>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);		// precision uS timer
 8004622:	2200      	movs	r2, #0
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	4611      	mov	r1, r2
 8004628:	f00c fcf8 	bl	801101c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);		// precision uS timer
 800462c:	2200      	movs	r2, #0
 800462e:	2104      	movs	r1, #4
 8004630:	6820      	ldr	r0, [r4, #0]
 8004632:	f00c fcf3 	bl	801101c <TIM_CCxChannelCmd>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_4, TIM_CCx_DISABLE);		// precision uS timer
 8004636:	2200      	movs	r2, #0
 8004638:	210c      	movs	r1, #12
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	f00c fcee 	bl	801101c <TIM_CCxChannelCmd>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);		// precision uS timer
 8004640:	2100      	movs	r1, #0
 8004642:	4620      	mov	r0, r4
 8004644:	f00c ff38 	bl	80114b8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_2);		// precision uS timer
 8004648:	2104      	movs	r1, #4
 800464a:	4620      	mov	r0, r4
 800464c:	f00c ff34 	bl	80114b8 <HAL_TIM_IC_Stop_DMA>
	HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_4);		// precision uS timer
 8004650:	210c      	movs	r1, #12
 8004652:	4620      	mov	r0, r4
 8004654:	f00c ff30 	bl	80114b8 <HAL_TIM_IC_Stop_DMA>
	if ((err = HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_3, t2cap, (sizeof(t2cap) / 4))) != HAL_OK) {
 8004658:	2301      	movs	r3, #1
 800465a:	4a58      	ldr	r2, [pc, #352]	; (80047bc <StartDefaultTask+0x2d8>)
 800465c:	2108      	movs	r1, #8
 800465e:	4620      	mov	r0, r4
 8004660:	f00c fd3a 	bl	80110d8 <HAL_TIM_IC_Start_DMA>
 8004664:	4605      	mov	r5, r0
 8004666:	b128      	cbz	r0, 8004674 <StartDefaultTask+0x190>
		printf("TIM_Base_Start_DMA err %i", err);
 8004668:	4601      	mov	r1, r0
 800466a:	485a      	ldr	r0, [pc, #360]	; (80047d4 <StartDefaultTask+0x2f0>)
 800466c:	f020 fbf2 	bl	8024e54 <iprintf>
		Error_Handler();
 8004670:	f7ff f8a0 	bl	80037b4 <Error_Handler>
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 8004674:	6820      	ldr	r0, [r4, #0]
 8004676:	2201      	movs	r2, #1
 8004678:	2108      	movs	r1, #8
	myip = ip.addr;
 800467a:	4c57      	ldr	r4, [pc, #348]	; (80047d8 <StartDefaultTask+0x2f4>)
	TIM_CCxChannelCmd(htim2.Instance, TIM_CHANNEL_3, TIM_CCx_ENABLE);	// capture precision timer
 800467c:	f00c fcce 	bl	801101c <TIM_CCxChannelCmd>
	dhcp = netif_dhcp_data(netif);		// do not call this too early
 8004680:	f8d8 3000 	ldr.w	r3, [r8]
	ip = dhcp->offered_ip_addr;
 8004684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004686:	69db      	ldr	r3, [r3, #28]
	myip = ip.addr;
 8004688:	6023      	str	r3, [r4, #0]
	if (myip == 0) {
 800468a:	2b00      	cmp	r3, #0
 800468c:	d060      	beq.n	8004750 <StartDefaultTask+0x26c>
	printf("*****************************************\n");
 800468e:	4853      	ldr	r0, [pc, #332]	; (80047dc <StartDefaultTask+0x2f8>)
 8004690:	f020 fc7c 	bl	8024f8c <puts>
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004694:	6821      	ldr	r1, [r4, #0]
	if (http_downloading) {
 8004696:	4c52      	ldr	r4, [pc, #328]	; (80047e0 <StartDefaultTask+0x2fc>)
	printf("This unit's IP address is %d:%d:%d:%d\n", myip & 0xFF, (myip & 0xFF00) >> 8, (myip & 0xFF0000) >> 16,
 8004698:	0e08      	lsrs	r0, r1, #24
 800469a:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800469e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80046a2:	b2c9      	uxtb	r1, r1
 80046a4:	9000      	str	r0, [sp, #0]
 80046a6:	484f      	ldr	r0, [pc, #316]	; (80047e4 <StartDefaultTask+0x300>)
 80046a8:	f020 fbd4 	bl	8024e54 <iprintf>
	printf("*****************************************\n");
 80046ac:	484b      	ldr	r0, [pc, #300]	; (80047dc <StartDefaultTask+0x2f8>)
 80046ae:	f020 fc6d 	bl	8024f8c <puts>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80046b2:	484d      	ldr	r0, [pc, #308]	; (80047e8 <StartDefaultTask+0x304>)
 80046b4:	f007 fed6 	bl	800c464 <HAL_IWDG_Refresh>
	initialapisn();									// get initial s/n and UDP target from http server; reboots if fails
 80046b8:	f003 fa22 	bl	8007b00 <initialapisn>
	HAL_IWDG_Refresh(&hiwdg);							// refresh the hardware watchdog reset system timer
 80046bc:	484a      	ldr	r0, [pc, #296]	; (80047e8 <StartDefaultTask+0x304>)
 80046be:	f007 fed1 	bl	800c464 <HAL_IWDG_Refresh>
	nextionloader("test", "lightning.vk4ya.com", 0);
 80046c2:	462a      	mov	r2, r5
 80046c4:	4949      	ldr	r1, [pc, #292]	; (80047ec <StartDefaultTask+0x308>)
 80046c6:	484a      	ldr	r0, [pc, #296]	; (80047f0 <StartDefaultTask+0x30c>)
 80046c8:	f000 fbf2 	bl	8004eb0 <nextionloader>
	if (http_downloading) {
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d147      	bne.n	8004762 <StartDefaultTask+0x27e>
	printf("Starting httpd web server\n");
 80046d2:	4848      	ldr	r0, [pc, #288]	; (80047f4 <StartDefaultTask+0x310>)
 80046d4:	f020 fc5a 	bl	8024f8c <puts>
	uip = locateudp();
 80046d8:	4d47      	ldr	r5, [pc, #284]	; (80047f8 <StartDefaultTask+0x314>)
	httpd_init();		// start the www server
 80046da:	f014 fa3d 	bl	8018b58 <httpd_init>
	while (lptask_init_done == 0)
 80046de:	4c47      	ldr	r4, [pc, #284]	; (80047fc <StartDefaultTask+0x318>)
	init_httpd_ssi();	// set up the embedded tag handler
 80046e0:	f003 f862 	bl	80077a8 <init_httpd_ssi>
	printf("Warming up the sonic phaser\n");
 80046e4:	4846      	ldr	r0, [pc, #280]	; (8004800 <StartDefaultTask+0x31c>)
 80046e6:	f020 fc51 	bl	8024f8c <puts>
	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, phaser_wav, sizeof(phaser_wav),
 80046ea:	2008      	movs	r0, #8
 80046ec:	4a45      	ldr	r2, [pc, #276]	; (8004804 <StartDefaultTask+0x320>)
 80046ee:	2100      	movs	r1, #0
 80046f0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80046f4:	9000      	str	r0, [sp, #0]
 80046f6:	4844      	ldr	r0, [pc, #272]	; (8004808 <StartDefaultTask+0x324>)
 80046f8:	f004 f85e 	bl	80087b8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim7);	// fast interval DAC timer sample rate
 80046fc:	4843      	ldr	r0, [pc, #268]	; (800480c <StartDefaultTask+0x328>)
 80046fe:	f00a fcab 	bl	800f058 <HAL_TIM_Base_Start>
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8004702:	f012 f887 	bl	8016814 <xTaskGetCurrentTaskHandle>
 8004706:	4b42      	ldr	r3, [pc, #264]	; (8004810 <StartDefaultTask+0x32c>)
 8004708:	6018      	str	r0, [r3, #0]
	uip = locateudp();
 800470a:	f002 fd01 	bl	8007110 <locateudp>
	main_init_done = 1; // let lptask now main has initialised
 800470e:	4b41      	ldr	r3, [pc, #260]	; (8004814 <StartDefaultTask+0x330>)
 8004710:	2201      	movs	r2, #1
	uip = locateudp();
 8004712:	6028      	str	r0, [r5, #0]
	printf("Waiting for lptask to start\n");
 8004714:	4840      	ldr	r0, [pc, #256]	; (8004818 <StartDefaultTask+0x334>)
	main_init_done = 1; // let lptask now main has initialised
 8004716:	601a      	str	r2, [r3, #0]
	printf("Waiting for lptask to start\n");
 8004718:	f020 fc38 	bl	8024f8c <puts>
	while (lptask_init_done == 0)
 800471c:	6823      	ldr	r3, [r4, #0]
 800471e:	b92b      	cbnz	r3, 800472c <StartDefaultTask+0x248>
		osDelay(100); // hold off starting udp railgun until LPtask has initalised
 8004720:	2064      	movs	r0, #100	; 0x64
 8004722:	f010 fc01 	bl	8014f28 <osDelay>
	while (lptask_init_done == 0)
 8004726:	6823      	ldr	r3, [r4, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d0f9      	beq.n	8004720 <StartDefaultTask+0x23c>
	startadc();		// start the ADC DMA loop
 800472c:	f7fc f9e6 	bl	8000afc <startadc>
		startudp(uip);	// should never return
 8004730:	6828      	ldr	r0, [r5, #0]
 8004732:	f002 fd23 	bl	800717c <startudp>
		printf("UDP stream exited!!!\n\r");
 8004736:	4839      	ldr	r0, [pc, #228]	; (800481c <StartDefaultTask+0x338>)
 8004738:	f020 fb8c 	bl	8024e54 <iprintf>
		rebootme(4);
 800473c:	2004      	movs	r0, #4
 800473e:	f7fe fe9d 	bl	800347c <rebootme>
		swapboot();	//  swap the boot vector
 8004742:	f7fc fbbf 	bl	8000ec4 <swapboot>
 8004746:	e6de      	b.n	8004506 <StartDefaultTask+0x22>
		printf("Neo7 setup returned HAL error\n\r");	// but don't reboot
 8004748:	4835      	ldr	r0, [pc, #212]	; (8004820 <StartDefaultTask+0x33c>)
 800474a:	f020 fb83 	bl	8024e54 <iprintf>
 800474e:	e75a      	b.n	8004606 <StartDefaultTask+0x122>
		printf("***** DHCP Failed ******\n");
 8004750:	4834      	ldr	r0, [pc, #208]	; (8004824 <StartDefaultTask+0x340>)
 8004752:	f020 fc1b 	bl	8024f8c <puts>
		osDelay(200);
 8004756:	20c8      	movs	r0, #200	; 0xc8
 8004758:	f010 fbe6 	bl	8014f28 <osDelay>
		rebootme(1);
 800475c:	2001      	movs	r0, #1
 800475e:	f7fe fe8d 	bl	800347c <rebootme>
		printf("Downloading...\n");
 8004762:	4831      	ldr	r0, [pc, #196]	; (8004828 <StartDefaultTask+0x344>)
 8004764:	f020 fc12 	bl	8024f8c <puts>
		while (http_downloading) {
 8004768:	e003      	b.n	8004772 <StartDefaultTask+0x28e>
			osDelay(1000);
 800476a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800476e:	f010 fbdb 	bl	8014f28 <osDelay>
		while (http_downloading) {
 8004772:	6823      	ldr	r3, [r4, #0]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d1f8      	bne.n	800476a <StartDefaultTask+0x286>
 8004778:	e7ab      	b.n	80046d2 <StartDefaultTask+0x1ee>
 800477a:	bf00      	nop
 800477c:	40020800 	.word	0x40020800
 8004780:	0802aa8c 	.word	0x0802aa8c
 8004784:	0802a9bc 	.word	0x0802a9bc
 8004788:	200020d4 	.word	0x200020d4
 800478c:	1ff0f000 	.word	0x1ff0f000
 8004790:	0802aa90 	.word	0x0802aa90
 8004794:	2000348c 	.word	0x2000348c
 8004798:	0802aad0 	.word	0x0802aad0
 800479c:	40020c00 	.word	0x40020c00
 80047a0:	0802aaf8 	.word	0x0802aaf8
 80047a4:	200033b4 	.word	0x200033b4
 80047a8:	2002e37c 	.word	0x2002e37c
 80047ac:	08003485 	.word	0x08003485
 80047b0:	080032e1 	.word	0x080032e1
 80047b4:	20002f6c 	.word	0x20002f6c
 80047b8:	02a62b1c 	.word	0x02a62b1c
 80047bc:	20000748 	.word	0x20000748
 80047c0:	20002d80 	.word	0x20002d80
 80047c4:	0802ab40 	.word	0x0802ab40
 80047c8:	20002d88 	.word	0x20002d88
 80047cc:	2000292c 	.word	0x2000292c
 80047d0:	200027fc 	.word	0x200027fc
 80047d4:	0802ab54 	.word	0x0802ab54
 80047d8:	20002d78 	.word	0x20002d78
 80047dc:	0802ab8c 	.word	0x0802ab8c
 80047e0:	20001880 	.word	0x20001880
 80047e4:	0802abb8 	.word	0x0802abb8
 80047e8:	20002618 	.word	0x20002618
 80047ec:	08029d98 	.word	0x08029d98
 80047f0:	0802abe0 	.word	0x0802abe0
 80047f4:	0802abe8 	.word	0x0802abe8
 80047f8:	20002d90 	.word	0x20002d90
 80047fc:	20002d64 	.word	0x20002d64
 8004800:	0802ac04 	.word	0x0802ac04
 8004804:	0802ac64 	.word	0x0802ac64
 8004808:	20002220 	.word	0x20002220
 800480c:	20002978 	.word	0x20002978
 8004810:	200007dc 	.word	0x200007dc
 8004814:	20002d68 	.word	0x20002d68
 8004818:	0802ac20 	.word	0x0802ac20
 800481c:	0802ac4c 	.word	0x0802ac4c
 8004820:	0802ab20 	.word	0x0802ab20
 8004824:	0802ab70 	.word	0x0802ab70
 8004828:	0802ac3c 	.word	0x0802ac3c
 800482c:	20002d7c 	.word	0x20002d7c

08004830 <assert_failed>:
void assert_failed(uint8_t *file, uint32_t line) {
	/* USER CODE BEGIN 6 */
	/* User can add his own implementation to report the file name and line number,
	 tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	/* USER CODE END 6 */
}
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop

08004834 <__io_putchar>:
/**
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
PUTCHAR_PROTOTYPE {
 8004834:	b500      	push	{lr}
	/* Place your implementation of fputc here */
	/* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	{
		if (ch == '\n')
 8004836:	280a      	cmp	r0, #10
PUTCHAR_PROTOTYPE {
 8004838:	b083      	sub	sp, #12
 800483a:	9001      	str	r0, [sp, #4]
		if (ch == '\n')
 800483c:	d009      	beq.n	8004852 <__io_putchar+0x1e>
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
		else
		HAL_UART_Transmit(&huart2, &ch, 1, 10);
 800483e:	230a      	movs	r3, #10
 8004840:	2201      	movs	r2, #1
 8004842:	a901      	add	r1, sp, #4
 8004844:	4808      	ldr	r0, [pc, #32]	; (8004868 <__io_putchar+0x34>)
 8004846:	f00e f87b 	bl	8012940 <HAL_UART_Transmit>

	return ch;
	}
}
 800484a:	9801      	ldr	r0, [sp, #4]
 800484c:	b003      	add	sp, #12
 800484e:	f85d fb04 	ldr.w	pc, [sp], #4
			HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
 8004852:	4603      	mov	r3, r0
 8004854:	2202      	movs	r2, #2
 8004856:	4905      	ldr	r1, [pc, #20]	; (800486c <__io_putchar+0x38>)
 8004858:	4803      	ldr	r0, [pc, #12]	; (8004868 <__io_putchar+0x34>)
 800485a:	f00e f871 	bl	8012940 <HAL_UART_Transmit>
}
 800485e:	9801      	ldr	r0, [sp, #4]
 8004860:	b003      	add	sp, #12
 8004862:	f85d fb04 	ldr.w	pc, [sp], #4
 8004866:	bf00      	nop
 8004868:	200029c4 	.word	0x200029c4
 800486c:	08029b88 	.word	0x08029b88

08004870 <calcepoch32>:
}
#endif

#if 1	// new version below
struct tm* getgpstime() {
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <calcepoch32+0x40>)
 8004872:	4810      	ldr	r0, [pc, #64]	; (80048b4 <calcepoch32+0x44>)
 8004874:	891a      	ldrh	r2, [r3, #8]
	return (&now);
}

// calculate epoch seconds from 1970 to now using GPS date time fields (32 bit unsigned, not 64 bit time_t as used by the library)
// the number of seconds that have elapsed since January 1, 1970 (midnight UTC/GMT), not counting leap seconds
uint32_t calcepoch32() {
 8004876:	b510      	push	{r4, lr}
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8004878:	f04f 34ff 	mov.w	r4, #4294967295
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 800487c:	7a99      	ldrb	r1, [r3, #10]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 800487e:	b292      	uxth	r2, r2
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8004880:	4421      	add	r1, r4
	now.tm_isdst = -1;        // Is DST on? 1 = yes, 0 = no, -1 = unknown
 8004882:	6204      	str	r4, [r0, #32]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 8004884:	f2a2 726c 	subw	r2, r2, #1900	; 0x76c
	now.tm_mon = statuspkt.NavPvt.month - 1;           // Month, 0 - jan
 8004888:	6101      	str	r1, [r0, #16]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 800488a:	7ad9      	ldrb	r1, [r3, #11]
	now.tm_year = statuspkt.NavPvt.year - 1900;
 800488c:	6142      	str	r2, [r0, #20]
	now.tm_mday = statuspkt.NavPvt.day;          // Day of the month
 800488e:	60c1      	str	r1, [r0, #12]
	now.tm_hour = statuspkt.NavPvt.hour;
 8004890:	7b19      	ldrb	r1, [r3, #12]
	now.tm_min = statuspkt.NavPvt.min;
 8004892:	7b5a      	ldrb	r2, [r3, #13]
	now.tm_sec = statuspkt.NavPvt.sec;
 8004894:	7b9b      	ldrb	r3, [r3, #14]
	now.tm_min = statuspkt.NavPvt.min;
 8004896:	e9c0 2101 	strd	r2, r1, [r0, #4]
	now.tm_sec = statuspkt.NavPvt.sec;
 800489a:	6003      	str	r3, [r0, #0]

	epochtime = mktime(getgpstime());
 800489c:	f01f fc1c 	bl	80240d8 <mktime>
 80048a0:	4a05      	ldr	r2, [pc, #20]	; (80048b8 <calcepoch32+0x48>)
 80048a2:	4603      	mov	r3, r0
	return (uint32_t) (epochtime + (time_t) (10 * 60 * 60));		// add ten hours
#else
    return (uint32_t)(epochtime);
#endif

}
 80048a4:	f648 40a0 	movw	r0, #36000	; 0x8ca0
	epochtime = mktime(getgpstime());
 80048a8:	e9c2 3100 	strd	r3, r1, [r2]
}
 80048ac:	4418      	add	r0, r3
 80048ae:	bd10      	pop	{r4, pc}
 80048b0:	20002f6c 	.word	0x20002f6c
 80048b4:	20002f40 	.word	0x20002f40
 80048b8:	20002e20 	.word	0x20002e20

080048bc <printPacket>:
		9600L,
//4800L,
		};

// Function, printing packet to the PC's serial in hexadecimal form
void printPacket(byte *msg, byte *packet, byte len) {
 80048bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048c0:	b082      	sub	sp, #8
	char temp[3];
	static int cnt = 0;

	for (byte i = 0; i < len; i++) {
 80048c2:	b33a      	cbz	r2, 8004914 <printPacket+0x58>
 80048c4:	4607      	mov	r7, r0
 80048c6:	4616      	mov	r6, r2
 80048c8:	1e4d      	subs	r5, r1, #1
 80048ca:	2400      	movs	r4, #0
		if (i % 16 == 0) {
			printf("\n\r%d %s:", cnt++, msg);
 80048cc:	f8df a054 	ldr.w	sl, [pc, #84]	; 8004924 <printPacket+0x68>
 80048d0:	f8df 9054 	ldr.w	r9, [pc, #84]	; 8004928 <printPacket+0x6c>
		} else {
			printf(" ");
		}
		sprintf(temp, "%.2X", packet[i]);
 80048d4:	f8df 8054 	ldr.w	r8, [pc, #84]	; 800492c <printPacket+0x70>
 80048d8:	e013      	b.n	8004902 <printPacket+0x46>
			printf("\n\r%d %s:", cnt++, msg);
 80048da:	f8da 1000 	ldr.w	r1, [sl]
 80048de:	1c4b      	adds	r3, r1, #1
 80048e0:	f8ca 3000 	str.w	r3, [sl]
 80048e4:	f020 fab6 	bl	8024e54 <iprintf>
	for (byte i = 0; i < len; i++) {
 80048e8:	3401      	adds	r4, #1
		sprintf(temp, "%.2X", packet[i]);
 80048ea:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80048ee:	4641      	mov	r1, r8
 80048f0:	a801      	add	r0, sp, #4
	for (byte i = 0; i < len; i++) {
 80048f2:	b2e4      	uxtb	r4, r4
		sprintf(temp, "%.2X", packet[i]);
 80048f4:	f020 fc98 	bl	8025228 <siprintf>
		printf(temp);
 80048f8:	a801      	add	r0, sp, #4
 80048fa:	f020 faab 	bl	8024e54 <iprintf>
	for (byte i = 0; i < len; i++) {
 80048fe:	42a6      	cmp	r6, r4
 8004900:	d008      	beq.n	8004914 <printPacket+0x58>
		if (i % 16 == 0) {
 8004902:	f014 0f0f 	tst.w	r4, #15
			printf("\n\r%d %s:", cnt++, msg);
 8004906:	463a      	mov	r2, r7
 8004908:	4648      	mov	r0, r9
		if (i % 16 == 0) {
 800490a:	d0e6      	beq.n	80048da <printPacket+0x1e>
			printf(" ");
 800490c:	2020      	movs	r0, #32
 800490e:	f020 fab9 	bl	8024e84 <putchar>
 8004912:	e7e9      	b.n	80048e8 <printPacket+0x2c>
	}
	printf("\n\r");
 8004914:	4802      	ldr	r0, [pc, #8]	; (8004920 <printPacket+0x64>)
 8004916:	f020 fa9d 	bl	8024e54 <iprintf>
}
 800491a:	b002      	add	sp, #8
 800491c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004920:	0802ac60 	.word	0x0802ac60
 8004924:	20002e18 	.word	0x20002e18
 8004928:	0802b364 	.word	0x0802b364
 800492c:	0802b370 	.word	0x0802b370

08004930 <disableNmea>:
	printf("Checking for Neo GPS...\n");
	sendPacket(packet, sizeof(packet));
}

// Function, sending set of packets to the receiver to disable NMEA messages
void disableNmea() {
 8004930:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	// Array of two bytes for CFG-MSG packets payload
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004934:	f8df c09c 	ldr.w	ip, [pc, #156]	; 80049d4 <disableNmea+0xa4>
void disableNmea() {
 8004938:	b08f      	sub	sp, #60	; 0x3c
		for (byte j = 0; j < sizeof(*messages); j++) {
			packet[payloadOffset + j] = messages[i][j];
		}

		// Set checksum bytes to the null
		packet[packetSize - 2] = 0x00;
 800493a:	2600      	movs	r6, #0
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 800493c:	4f24      	ldr	r7, [pc, #144]	; (80049d0 <disableNmea+0xa0>)
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 800493e:	f10d 0e10 	add.w	lr, sp, #16
	byte packet[] = { 0xB5, // sync char 1
 8004942:	f10d 0904 	add.w	r9, sp, #4
 8004946:	ad04      	add	r5, sp, #16
 8004948:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800494c:	f10d 040d 	add.w	r4, sp, #13
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004950:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004954:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004958:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800495c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8004960:	e89c 0003 	ldmia.w	ip, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 8004964:	f10c 0308 	add.w	r3, ip, #8
	byte messages[][2] = { { 0xF0, 0x0A }, { 0xF0, 0x09 }, { 0xF0, 0x00 }, { 0xF0, 0x01 }, { 0xF0, 0x0D },
 8004968:	e88e 0003 	stmia.w	lr, {r0, r1}
	byte packet[] = { 0xB5, // sync char 1
 800496c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004970:	e8a9 0003 	stmia.w	r9!, {r0, r1}
 8004974:	f829 2b02 	strh.w	r2, [r9], #2
 8004978:	0c12      	lsrs	r2, r2, #16
 800497a:	f889 2000 	strb.w	r2, [r9]
		packet[packetSize - 1] = 0x00;
 800497e:	f04f 0e00 	mov.w	lr, #0
			packet[payloadOffset + j] = messages[i][j];
 8004982:	7829      	ldrb	r1, [r5, #0]
 8004984:	786a      	ldrb	r2, [r5, #1]
 8004986:	f10d 0306 	add.w	r3, sp, #6
		packet[packetSize - 1] = 0x00;
 800498a:	46f4      	mov	ip, lr
			packet[payloadOffset + j] = messages[i][j];
 800498c:	f88d 100a 	strb.w	r1, [sp, #10]
 8004990:	f88d 200b 	strb.w	r2, [sp, #11]
		packet[packetSize - 2] = 0x00;
 8004994:	f88d 600d 	strb.w	r6, [sp, #13]
		packet[packetSize - 1] = 0x00;
 8004998:	f88d 600e 	strb.w	r6, [sp, #14]

		// Calculate checksum over the packet buffer excluding sync (first two)
		// and checksum chars (last two)
		for (byte j = 0; j < packetSize - 4; j++) {
			packet[packetSize - 2] += packet[2 + j];
 800499c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049a0:	4494      	add	ip, r2
		for (byte j = 0; j < packetSize - 4; j++) {
 80049a2:	429c      	cmp	r4, r3
			packet[packetSize - 2] += packet[2 + j];
 80049a4:	fa5f fc8c 	uxtb.w	ip, ip
			packet[packetSize - 1] += packet[packetSize - 2];
 80049a8:	44e6      	add	lr, ip
 80049aa:	fa5f fe8e 	uxtb.w	lr, lr
		for (byte j = 0; j < packetSize - 4; j++) {
 80049ae:	d1f5      	bne.n	800499c <disableNmea+0x6c>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80049b0:	3502      	adds	r5, #2
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 80049b2:	2364      	movs	r3, #100	; 0x64
 80049b4:	220b      	movs	r2, #11
 80049b6:	a901      	add	r1, sp, #4
 80049b8:	4638      	mov	r0, r7
 80049ba:	f88d c00d 	strb.w	ip, [sp, #13]
 80049be:	f88d e00e 	strb.w	lr, [sp, #14]
 80049c2:	f00d ffbd 	bl	8012940 <HAL_UART_Transmit>
	for (byte i = 0; i < sizeof(messages) / sizeof(*messages); i++) {
 80049c6:	4545      	cmp	r5, r8
 80049c8:	d1d9      	bne.n	800497e <disableNmea+0x4e>
		}

		sendPacket(packet, packetSize);
	}
}
 80049ca:	b00f      	add	sp, #60	; 0x3c
 80049cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80049d0:	20002eb4 	.word	0x20002eb4
 80049d4:	08028edc 	.word	0x08028edc

080049d8 <isGoodChecksum>:

bool isGoodChecksum(int len) {
	unsigned char CK_A = 0;
	unsigned char CK_B = 0;

	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80049d8:	1cc3      	adds	r3, r0, #3
bool isGoodChecksum(int len) {
 80049da:	b500      	push	{lr}
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80049dc:	db1c      	blt.n	8004a18 <isGoodChecksum+0x40>
 80049de:	4910      	ldr	r1, [pc, #64]	; (8004a20 <isGoodChecksum+0x48>)
	unsigned char CK_B = 0;
 80049e0:	2200      	movs	r2, #0
 80049e2:	f101 0e04 	add.w	lr, r1, #4
	unsigned char CK_A = 0;
 80049e6:	4613      	mov	r3, r2
 80049e8:	4486      	add	lr, r0
			{
		CK_A = CK_A + PACKETstore[i];
 80049ea:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 80049ee:	4463      	add	r3, ip
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80049f0:	4571      	cmp	r1, lr
		CK_A = CK_A + PACKETstore[i];
 80049f2:	b2db      	uxtb	r3, r3
		CK_B = CK_B + CK_A;
 80049f4:	441a      	add	r2, r3
 80049f6:	b2d2      	uxtb	r2, r2
	for (int i = 2; i < (2 + 4 + len); i++)		// skip sync bytes
 80049f8:	d1f7      	bne.n	80049ea <isGoodChecksum+0x12>
	}
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 80049fa:	490a      	ldr	r1, [pc, #40]	; (8004a24 <isGoodChecksum+0x4c>)
 80049fc:	4408      	add	r0, r1
 80049fe:	7981      	ldrb	r1, [r0, #6]
 8004a00:	4299      	cmp	r1, r3
 8004a02:	d002      	beq.n	8004a0a <isGoodChecksum+0x32>
 8004a04:	2000      	movs	r0, #0
}
 8004a06:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((CK_A == PACKETstore[len + 6]) && (CK_B == PACKETstore[len + 7]));
 8004a0a:	79c0      	ldrb	r0, [r0, #7]
 8004a0c:	1a80      	subs	r0, r0, r2
 8004a0e:	fab0 f080 	clz	r0, r0
 8004a12:	0940      	lsrs	r0, r0, #5
}
 8004a14:	f85d fb04 	ldr.w	pc, [sp], #4
	unsigned char CK_B = 0;
 8004a18:	2200      	movs	r2, #0
	unsigned char CK_A = 0;
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	e7ed      	b.n	80049fa <isGoodChecksum+0x22>
 8004a1e:	bf00      	nop
 8004a20:	20002d99 	.word	0x20002d99
 8004a24:	20002d98 	.word	0x20002d98

08004a28 <IsPacketReady>:

// start/complete filling in the current packet
int IsPacketReady(unsigned char c) {
 8004a28:	b570      	push	{r4, r5, r6, lr}
	// get current position in packet
	unsigned char p = UbxGpsv.carriagePosition;
 8004a2a:	4c25      	ldr	r4, [pc, #148]	; (8004ac0 <IsPacketReady+0x98>)
 8004a2c:	78e3      	ldrb	r3, [r4, #3]
	static volatile int len = 0;

	if (p < 4)     // this looks for PVT messages
 8004a2e:	2b03      	cmp	r3, #3
 8004a30:	d814      	bhi.n	8004a5c <IsPacketReady+0x34>
			{
		// are we starting a packet?
		if ((c == UBXGPS_HEADER[p]) || (c == UBXGPS_HEADER2[p])) {
 8004a32:	4a24      	ldr	r2, [pc, #144]	; (8004ac4 <IsPacketReady+0x9c>)
 8004a34:	4619      	mov	r1, r3
 8004a36:	5cd2      	ldrb	r2, [r2, r3]
 8004a38:	4282      	cmp	r2, r0
 8004a3a:	d00a      	beq.n	8004a52 <IsPacketReady+0x2a>
 8004a3c:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <IsPacketReady+0xa0>)
 8004a3e:	5cd2      	ldrb	r2, [r2, r3]
 8004a40:	4282      	cmp	r2, r0
 8004a42:	d006      	beq.n	8004a52 <IsPacketReady+0x2a>
			PACKETstore[p++] = c;
		} else {
			p = 0;
			len = 0;
 8004a44:	2200      	movs	r2, #0
 8004a46:	4921      	ldr	r1, [pc, #132]	; (8004acc <IsPacketReady+0xa4>)
			p = 0;
 8004a48:	4613      	mov	r3, r2
			len = 0;
 8004a4a:	600a      	str	r2, [r1, #0]
				}
			}
		}
	}
	UbxGpsv.carriagePosition = p;
	return 0;
 8004a4c:	2000      	movs	r0, #0
	UbxGpsv.carriagePosition = p;
 8004a4e:	70e3      	strb	r3, [r4, #3]
}
 8004a50:	bd70      	pop	{r4, r5, r6, pc}
			PACKETstore[p++] = c;
 8004a52:	3301      	adds	r3, #1
 8004a54:	4a1e      	ldr	r2, [pc, #120]	; (8004ad0 <IsPacketReady+0xa8>)
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	5450      	strb	r0, [r2, r1]
 8004a5a:	e7f7      	b.n	8004a4c <IsPacketReady+0x24>
		if (p < 6) {
 8004a5c:	2b05      	cmp	r3, #5
 8004a5e:	d917      	bls.n	8004a90 <IsPacketReady+0x68>
		if (p == 6) {
 8004a60:	2b06      	cmp	r3, #6
 8004a62:	d01b      	beq.n	8004a9c <IsPacketReady+0x74>
 8004a64:	4d19      	ldr	r5, [pc, #100]	; (8004acc <IsPacketReady+0xa4>)
		if (p < (2 + 4 + len + 2)) {
 8004a66:	682a      	ldr	r2, [r5, #0]
 8004a68:	4619      	mov	r1, r3
 8004a6a:	3207      	adds	r2, #7
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	dbed      	blt.n	8004a4c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004a70:	3301      	adds	r3, #1
			if (p == (2 + 4 + len + 2)) {
 8004a72:	682a      	ldr	r2, [r5, #0]
			PACKETstore[p++] = c;
 8004a74:	4e16      	ldr	r6, [pc, #88]	; (8004ad0 <IsPacketReady+0xa8>)
 8004a76:	b2db      	uxtb	r3, r3
			if (p == (2 + 4 + len + 2)) {
 8004a78:	3208      	adds	r2, #8
			PACKETstore[p++] = c;
 8004a7a:	5470      	strb	r0, [r6, r1]
			if (p == (2 + 4 + len + 2)) {
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d1e5      	bne.n	8004a4c <IsPacketReady+0x24>
				UbxGpsv.carriagePosition = p;
 8004a80:	2300      	movs	r3, #0
				if (isGoodChecksum(len)) {
 8004a82:	6828      	ldr	r0, [r5, #0]
				UbxGpsv.carriagePosition = p;
 8004a84:	70e3      	strb	r3, [r4, #3]
				if (isGoodChecksum(len)) {
 8004a86:	f7ff ffa7 	bl	80049d8 <isGoodChecksum>
 8004a8a:	b998      	cbnz	r0, 8004ab4 <IsPacketReady+0x8c>
				p = 0;
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	e7dd      	b.n	8004a4c <IsPacketReady+0x24>
			PACKETstore[p++] = c;
 8004a90:	490f      	ldr	r1, [pc, #60]	; (8004ad0 <IsPacketReady+0xa8>)
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	54c8      	strb	r0, [r1, r3]
			return (0);
 8004a96:	2000      	movs	r0, #0
			UbxGpsv.carriagePosition = p;
 8004a98:	70e2      	strb	r2, [r4, #3]
}
 8004a9a:	bd70      	pop	{r4, r5, r6, pc}
			len = PACKETstore[4] + (PACKETstore[5] * 256);
 8004a9c:	490c      	ldr	r1, [pc, #48]	; (8004ad0 <IsPacketReady+0xa8>)
 8004a9e:	794d      	ldrb	r5, [r1, #5]
 8004aa0:	790a      	ldrb	r2, [r1, #4]
 8004aa2:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004aa6:	4d09      	ldr	r5, [pc, #36]	; (8004acc <IsPacketReady+0xa4>)
 8004aa8:	602a      	str	r2, [r5, #0]
			if (len >= sizeof(PACKETstore)) {	// oversize
 8004aaa:	682a      	ldr	r2, [r5, #0]
 8004aac:	2a7f      	cmp	r2, #127	; 0x7f
 8004aae:	d9da      	bls.n	8004a66 <IsPacketReady+0x3e>
				return 0;
 8004ab0:	2000      	movs	r0, #0
}
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
					gpsgood = 1;
 8004ab4:	4b07      	ldr	r3, [pc, #28]	; (8004ad4 <IsPacketReady+0xac>)
 8004ab6:	2201      	movs	r2, #1
					return len;
 8004ab8:	6828      	ldr	r0, [r5, #0]
					gpsgood = 1;
 8004aba:	601a      	str	r2, [r3, #0]
}
 8004abc:	bd70      	pop	{r4, r5, r6, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000240 	.word	0x20000240
 8004ac4:	0802b560 	.word	0x0802b560
 8004ac8:	0802b564 	.word	0x0802b564
 8004acc:	20002f38 	.word	0x20002f38
 8004ad0:	20002d98 	.word	0x20002d98
 8004ad4:	20002e2c 	.word	0x20002e2c

08004ad8 <setupneo>:

		fastdelay_ms(100); // Little delay before flushing
	}
#endif

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8004ad8:	4b74      	ldr	r3, [pc, #464]	; (8004cac <setupneo+0x1d4>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b16      	cmp	r3, #22
HAL_StatusTypeDef setupneo() {
 8004ade:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ae0:	b08d      	sub	sp, #52	; 0x34
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8004ae2:	f000 80ba 	beq.w	8004c5a <setupneo+0x182>
		gpsuarttx = huart7;
		GPSUARTRX = UART8;
	}
	else			// Splat1 or Lightningboard 1 prototype
	{
		gpsuartrx = huart6;
 8004ae6:	2284      	movs	r2, #132	; 0x84
 8004ae8:	4971      	ldr	r1, [pc, #452]	; (8004cb0 <setupneo+0x1d8>)
 8004aea:	4872      	ldr	r0, [pc, #456]	; (8004cb4 <setupneo+0x1dc>)
 8004aec:	f01f f9ec 	bl	8023ec8 <memcpy>
		gpsuarttx = huart6;
 8004af0:	2284      	movs	r2, #132	; 0x84
 8004af2:	496f      	ldr	r1, [pc, #444]	; (8004cb0 <setupneo+0x1d8>)
 8004af4:	4870      	ldr	r0, [pc, #448]	; (8004cb8 <setupneo+0x1e0>)
 8004af6:	f01f f9e7 	bl	8023ec8 <memcpy>
		GPSUARTRX = USART6;
 8004afa:	4b70      	ldr	r3, [pc, #448]	; (8004cbc <setupneo+0x1e4>)
 8004afc:	4a70      	ldr	r2, [pc, #448]	; (8004cc0 <setupneo+0x1e8>)
 8004afe:	601a      	str	r2, [r3, #0]
	 * @note   When the UART parity is enabled (PCE = 1), the received data contain
	 *         the parity bit (MSB position).
	 * @retval HAL status
	 */

	stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004b00:	2201      	movs	r2, #1
 8004b02:	4970      	ldr	r1, [pc, #448]	; (8004cc4 <setupneo+0x1ec>)
 8004b04:	486b      	ldr	r0, [pc, #428]	; (8004cb4 <setupneo+0x1dc>)
 8004b06:	f00e f9b3 	bl	8012e70 <HAL_UART_Receive_DMA>

	if (stat != HAL_OK) {
 8004b0a:	4607      	mov	r7, r0
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	f040 809d 	bne.w	8004c4c <setupneo+0x174>
		return (stat);
	}

	// Disabling NMEA messages by sending appropriate packets
//		printf("Disabling NMEA messages...\n\r");
	disableNmea();
 8004b12:	f7ff ff0d 	bl	8004930 <disableNmea>
	osDelay(500);
 8004b16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b1a:	f010 fa05 	bl	8014f28 <osDelay>
	const byte packet[] = { 0xB5, 0x62, 0x0A, 0x04, 0x00, 0x00, 0x0E, 0x34 };  // MON_VER get receiver/software version
 8004b1e:	4b6a      	ldr	r3, [pc, #424]	; (8004cc8 <setupneo+0x1f0>)
 8004b20:	ae01      	add	r6, sp, #4
 8004b22:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8004b26:	4d69      	ldr	r5, [pc, #420]	; (8004ccc <setupneo+0x1f4>)
 8004b28:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b2c:	e886 0003 	stmia.w	r6, {r0, r1}
	printf("Checking for Neo GPS...\n");
 8004b30:	4867      	ldr	r0, [pc, #412]	; (8004cd0 <setupneo+0x1f8>)
 8004b32:	f020 fa2b 	bl	8024f8c <puts>
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b36:	2364      	movs	r3, #100	; 0x64
 8004b38:	2208      	movs	r2, #8
 8004b3a:	4631      	mov	r1, r6
 8004b3c:	485e      	ldr	r0, [pc, #376]	; (8004cb8 <setupneo+0x1e0>)
 8004b3e:	f00d feff 	bl	8012940 <HAL_UART_Transmit>

	// is there a device - what is it running?
	askneo_ver();
	i = 0;
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004b42:	e004      	b.n	8004b4e <setupneo+0x76>
		i++;
		osDelay(1);
 8004b44:	f010 f9f0 	bl	8014f28 <osDelay>
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004b48:	3c01      	subs	r4, #1
 8004b4a:	f000 80a5 	beq.w	8004c98 <setupneo+0x1c0>
 8004b4e:	682b      	ldr	r3, [r5, #0]
		osDelay(1);
 8004b50:	2001      	movs	r0, #1
	while ((i < 1000 ) && (neoispresent == 0)) {
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f6      	beq.n	8004b44 <setupneo+0x6c>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004b56:	4c5f      	ldr	r4, [pc, #380]	; (8004cd4 <setupneo+0x1fc>)
 8004b58:	46b4      	mov	ip, r6
	byte packet[] = { 0xB5, // sync char 1
 8004b5a:	4635      	mov	r5, r6
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004b5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b5e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004b62:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b66:	2364      	movs	r3, #100	; 0x64
 8004b68:	2215      	movs	r2, #21
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004b6a:	f84c 0b04 	str.w	r0, [ip], #4
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b6e:	4852      	ldr	r0, [pc, #328]	; (8004cb8 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, 0x62, 0x06, 0x09, 0x0D, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
 8004b70:	f88c 1000 	strb.w	r1, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b74:	4631      	mov	r1, r6
 8004b76:	f00d fee3 	bl	8012940 <HAL_UART_Transmit>
		osDelay(200);
		rebootme(2);
	}

	restoreDefaults();
	osDelay(1500);
 8004b7a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8004b7e:	f010 f9d3 	bl	8014f28 <osDelay>

	// 	Set reporting frequency to 1 Sec
	printf("NEO: Changing receiving frequency to 1 Sec...\n\r");
 8004b82:	4855      	ldr	r0, [pc, #340]	; (8004cd8 <setupneo+0x200>)
 8004b84:	f020 f966 	bl	8024e54 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8004b88:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8004b8c:	46b4      	mov	ip, r6
 8004b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004b90:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b94:	4631      	mov	r1, r6
	byte packet[] = { 0xB5, // sync char 1
 8004b96:	f8ac 3000 	strh.w	r3, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004b9a:	220e      	movs	r2, #14
 8004b9c:	2364      	movs	r3, #100	; 0x64
 8004b9e:	4846      	ldr	r0, [pc, #280]	; (8004cb8 <setupneo+0x1e0>)
 8004ba0:	f00d fece 	bl	8012940 <HAL_UART_Transmit>

	changeFrequency();
	osDelay(500);
 8004ba4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ba8:	f010 f9be 	bl	8014f28 <osDelay>

	//rx();		// debugging

	// Disabling unnecessary channels like SBAS or QZSS
	printf("NEO: Disabling unnecessary channels...\r\n");
 8004bac:	484b      	ldr	r0, [pc, #300]	; (8004cdc <setupneo+0x204>)
 8004bae:	f020 f9ed 	bl	8024f8c <puts>
	byte packet[] = { 0xB5, // sync char 1
 8004bb2:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8004bb6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bbc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8004bc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bc2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004bc6:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, // sync char 1
 8004bc8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004bcc:	4631      	mov	r1, r6
 8004bce:	222c      	movs	r2, #44	; 0x2c
 8004bd0:	4839      	ldr	r0, [pc, #228]	; (8004cb8 <setupneo+0x1e0>)
 8004bd2:	f00d feb5 	bl	8012940 <HAL_UART_Transmit>
	disableUnnecessaryChannels();
	osDelay(500);
 8004bd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bda:	f010 f9a5 	bl	8014f28 <osDelay>

	// Enabling NAV-PVT messages
	printf("NEO: Enabling NAV-PVT messages...\n\r");
 8004bde:	4840      	ldr	r0, [pc, #256]	; (8004ce0 <setupneo+0x208>)
 8004be0:	f020 f938 	bl	8024e54 <iprintf>
	byte packet[] = { 0xB5, // sync char 1
 8004be4:	f104 029c 	add.w	r2, r4, #156	; 0x9c
 8004be8:	46b4      	mov	ip, r6
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004bea:	2364      	movs	r3, #100	; 0x64
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004bec:	34a8      	adds	r4, #168	; 0xa8
	byte packet[] = { 0xB5, // sync char 1
 8004bee:	ca07      	ldmia	r2, {r0, r1, r2}
 8004bf0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004bf4:	f82c 2b02 	strh.w	r2, [ip], #2
 8004bf8:	0c12      	lsrs	r2, r2, #16
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004bfa:	4631      	mov	r1, r6
 8004bfc:	482e      	ldr	r0, [pc, #184]	; (8004cb8 <setupneo+0x1e0>)
	byte packet[] = { 0xB5, // sync char 1
 8004bfe:	f88c 2000 	strb.w	r2, [ip]
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004c02:	220b      	movs	r2, #11
 8004c04:	f00d fe9c 	bl	8012940 <HAL_UART_Transmit>
	enableNavPvt();
	osDelay(500);
 8004c08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c0c:	f010 f98c 	bl	8014f28 <osDelay>
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004c10:	46b4      	mov	ip, r6
 8004c12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c14:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c1a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8004c1e:	e894 0003 	ldmia.w	r4, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004c22:	2364      	movs	r3, #100	; 0x64
 8004c24:	2228      	movs	r2, #40	; 0x28
	byte packet[] = { 0xB5, 0x62, 0x06, 0x31, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x40, 0x42,
 8004c26:	e885 0003 	stmia.w	r5, {r0, r1}
	HAL_UART_Transmit(&gpsuarttx, packet, len, 100);
 8004c2a:	4631      	mov	r1, r6
 8004c2c:	4822      	ldr	r0, [pc, #136]	; (8004cb8 <setupneo+0x1e0>)
 8004c2e:	f00d fe87 	bl	8012940 <HAL_UART_Transmit>

// Enable Time pulse
	enableNaTP5();
	osDelay(500);
 8004c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004c36:	f010 f977 	bl	8014f28 <osDelay>

	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004c3a:	4b2a      	ldr	r3, [pc, #168]	; (8004ce4 <setupneo+0x20c>)
 8004c3c:	2200      	movs	r2, #0
	printf("NEO: Auto-configuration is complete\n\r");
 8004c3e:	482a      	ldr	r0, [pc, #168]	; (8004ce8 <setupneo+0x210>)
	statuspkt.NavPvt.flags = 0;		// make sure gps not showing as locked
 8004c40:	765a      	strb	r2, [r3, #25]
	printf("NEO: Auto-configuration is complete\n\r");
 8004c42:	f020 f907 	bl	8024e54 <iprintf>
		printf("Err HAL_UART_Receive_DMA2 %d usart6/8\n", stat);
	}
#endif
//		fastdelay_ms(100); // Little delay before flushing
	return (stat);
}
 8004c46:	4638      	mov	r0, r7
 8004c48:	b00d      	add	sp, #52	; 0x34
 8004c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("Err HAL_UART_Receive_DMA1 %d usart6/8\n", stat);
 8004c4c:	4601      	mov	r1, r0
 8004c4e:	4827      	ldr	r0, [pc, #156]	; (8004cec <setupneo+0x214>)
 8004c50:	f020 f900 	bl	8024e54 <iprintf>
}
 8004c54:	4638      	mov	r0, r7
 8004c56:	b00d      	add	sp, #52	; 0x34
 8004c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
		HAL_UART_Abort_IT(&huart7);
 8004c5a:	4c25      	ldr	r4, [pc, #148]	; (8004cf0 <setupneo+0x218>)
 8004c5c:	4620      	mov	r0, r4
 8004c5e:	f00d f803 	bl	8011c68 <HAL_UART_Abort_IT>
		HAL_UART_DeInit(&huart7);
 8004c62:	4620      	mov	r0, r4
 8004c64:	f00c fe68 	bl	8011938 <HAL_UART_DeInit>
		huart7.Init.BaudRate = 9600;
 8004c68:	f44f 5316 	mov.w	r3, #9600	; 0x2580
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8004c6c:	4620      	mov	r0, r4
		huart7.Init.BaudRate = 9600;
 8004c6e:	6063      	str	r3, [r4, #4]
		if (HAL_UART_Init(&huart7) != HAL_OK)		// UART7 is console with Splat2, GPS with LB1A,B AKA LB2
 8004c70:	f00d ff0e 	bl	8012a90 <HAL_UART_Init>
 8004c74:	b968      	cbnz	r0, 8004c92 <setupneo+0x1ba>
		gpsuartrx = huart8;
 8004c76:	2284      	movs	r2, #132	; 0x84
 8004c78:	491e      	ldr	r1, [pc, #120]	; (8004cf4 <setupneo+0x21c>)
 8004c7a:	480e      	ldr	r0, [pc, #56]	; (8004cb4 <setupneo+0x1dc>)
 8004c7c:	f01f f924 	bl	8023ec8 <memcpy>
		gpsuarttx = huart7;
 8004c80:	2284      	movs	r2, #132	; 0x84
 8004c82:	491b      	ldr	r1, [pc, #108]	; (8004cf0 <setupneo+0x218>)
 8004c84:	480c      	ldr	r0, [pc, #48]	; (8004cb8 <setupneo+0x1e0>)
 8004c86:	f01f f91f 	bl	8023ec8 <memcpy>
		GPSUARTRX = UART8;
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <setupneo+0x1e4>)
 8004c8c:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <setupneo+0x220>)
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	e736      	b.n	8004b00 <setupneo+0x28>
			Error_Handler();
 8004c92:	f7fe fd8f 	bl	80037b4 <Error_Handler>
 8004c96:	e7ee      	b.n	8004c76 <setupneo+0x19e>
		printf("***** Neo7m is not responding.....rebooting\n");
 8004c98:	4818      	ldr	r0, [pc, #96]	; (8004cfc <setupneo+0x224>)
 8004c9a:	f020 f977 	bl	8024f8c <puts>
		osDelay(200);
 8004c9e:	20c8      	movs	r0, #200	; 0xc8
 8004ca0:	f010 f942 	bl	8014f28 <osDelay>
		rebootme(2);
 8004ca4:	2002      	movs	r0, #2
 8004ca6:	f7fe fbe9 	bl	800347c <rebootme>
 8004caa:	e754      	b.n	8004b56 <setupneo+0x7e>
 8004cac:	200020d4 	.word	0x200020d4
 8004cb0:	20002bd4 	.word	0x20002bd4
 8004cb4:	20002e30 	.word	0x20002e30
 8004cb8:	20002eb4 	.word	0x20002eb4
 8004cbc:	20002d94 	.word	0x20002d94
 8004cc0:	40011400 	.word	0x40011400
 8004cc4:	20002f64 	.word	0x20002f64
 8004cc8:	08028ed4 	.word	0x08028ed4
 8004ccc:	20002f3c 	.word	0x20002f3c
 8004cd0:	0802b378 	.word	0x0802b378
 8004cd4:	08028ebc 	.word	0x08028ebc
 8004cd8:	0802b3b8 	.word	0x0802b3b8
 8004cdc:	0802b3e8 	.word	0x0802b3e8
 8004ce0:	0802b410 	.word	0x0802b410
 8004ce4:	20002f6c 	.word	0x20002f6c
 8004ce8:	0802b434 	.word	0x0802b434
 8004cec:	0802b390 	.word	0x0802b390
 8004cf0:	20002c58 	.word	0x20002c58
 8004cf4:	20002cdc 	.word	0x20002cdc
 8004cf8:	40007c00 	.word	0x40007c00
 8004cfc:	0802b45c 	.word	0x0802b45c

08004d00 <HAL_UART_RxCpltCallback>:
//	unsigned char data;
	volatile HAL_StatusTypeDef stat;
	int len;

//	printf("USART6 RxCpl");
	if (huart->Instance == GPSUARTRX) { //our UART
 8004d00:	4a2a      	ldr	r2, [pc, #168]	; (8004dac <HAL_UART_RxCpltCallback+0xac>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8004d02:	b538      	push	{r3, r4, r5, lr}
	if (huart->Instance == GPSUARTRX) { //our UART
 8004d04:	6812      	ldr	r2, [r2, #0]
 8004d06:	6803      	ldr	r3, [r0, #0]
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d011      	beq.n	8004d30 <HAL_UART_RxCpltCallback+0x30>
			}
		}
		return;
	}

	if (huart->Instance == UART5) {
 8004d0c:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <HAL_UART_RxCpltCallback+0xb0>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d024      	beq.n	8004d5c <HAL_UART_RxCpltCallback+0x5c>
		uart5_rxdone();
		return;
	}

	if (huart->Instance == USART6) {
 8004d12:	4a28      	ldr	r2, [pc, #160]	; (8004db4 <HAL_UART_RxCpltCallback+0xb4>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d025      	beq.n	8004d64 <HAL_UART_RxCpltCallback+0x64>
		uart6_rxdone();
		return;
	}

	if (huart->Instance == USART2) {
 8004d18:	4a27      	ldr	r2, [pc, #156]	; (8004db8 <HAL_UART_RxCpltCallback+0xb8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d004      	beq.n	8004d28 <HAL_UART_RxCpltCallback+0x28>
		uart2_rxdone();
		return;
	}

	printf("USART unknown uart int\n");
 8004d1e:	4827      	ldr	r0, [pc, #156]	; (8004dbc <HAL_UART_RxCpltCallback+0xbc>)
}
 8004d20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	printf("USART unknown uart int\n");
 8004d24:	f020 b932 	b.w	8024f8c <puts>
}
 8004d28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart2_rxdone();
 8004d2c:	f7fe bcc2 	b.w	80036b4 <uart2_rxdone>
		data = rxdatabuf[0];
 8004d30:	4923      	ldr	r1, [pc, #140]	; (8004dc0 <HAL_UART_RxCpltCallback+0xc0>)
		flag = 1;
 8004d32:	2401      	movs	r4, #1
		data = rxdatabuf[0];
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_UART_RxCpltCallback+0xc4>)
		flag = 1;
 8004d36:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <HAL_UART_RxCpltCallback+0xc8>)
		data = rxdatabuf[0];
 8004d38:	7808      	ldrb	r0, [r1, #0]
		flag = 1;
 8004d3a:	6014      	str	r4, [r2, #0]
		data = rxdatabuf[0];
 8004d3c:	7018      	strb	r0, [r3, #0]
		if ((len = IsPacketReady(data)) > 0) {
 8004d3e:	f7ff fe73 	bl	8004a28 <IsPacketReady>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	dd1c      	ble.n	8004d80 <HAL_UART_RxCpltCallback+0x80>
			switch (len) {
 8004d46:	2854      	cmp	r0, #84	; 0x54
 8004d48:	d01b      	beq.n	8004d82 <HAL_UART_RxCpltCallback+0x82>
 8004d4a:	2864      	cmp	r0, #100	; 0x64
 8004d4c:	d00e      	beq.n	8004d6c <HAL_UART_RxCpltCallback+0x6c>
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004d4e:	b2c2      	uxtb	r2, r0
 8004d50:	491e      	ldr	r1, [pc, #120]	; (8004dcc <HAL_UART_RxCpltCallback+0xcc>)
 8004d52:	481f      	ldr	r0, [pc, #124]	; (8004dd0 <HAL_UART_RxCpltCallback+0xd0>)
}
 8004d54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				printPacket("***** GPS: Unknown pkt Rx", PACKETstore, len);
 8004d58:	f7ff bdb0 	b.w	80048bc <printPacket>
}
 8004d5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart5_rxdone();
 8004d60:	f7fd b934 	b.w	8001fcc <uart5_rxdone>
}
 8004d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart6_rxdone();
 8004d68:	f000 be3e 	b.w	80059e8 <uart6_rxdone>
				printf("NEO Reports versions: sw=%s, hw=%s, ext=%s\n", &PACKETstore[6], &PACKETstore[36],
 8004d6c:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_UART_RxCpltCallback+0xd4>)
 8004d6e:	481a      	ldr	r0, [pc, #104]	; (8004dd8 <HAL_UART_RxCpltCallback+0xd8>)
 8004d70:	f1a3 020a 	sub.w	r2, r3, #10
 8004d74:	f1a3 0128 	sub.w	r1, r3, #40	; 0x28
 8004d78:	f020 f86c 	bl	8024e54 <iprintf>
				neoispresent = 1;
 8004d7c:	4b17      	ldr	r3, [pc, #92]	; (8004ddc <HAL_UART_RxCpltCallback+0xdc>)
 8004d7e:	601c      	str	r4, [r3, #0]
}
 8004d80:	bd38      	pop	{r3, r4, r5, pc}
					*((char*) (&(statuspkt.NavPvt)) + (i - offset)) = PACKETstore[i]; // copy into global struct
 8004d82:	4d17      	ldr	r5, [pc, #92]	; (8004de0 <HAL_UART_RxCpltCallback+0xe0>)
 8004d84:	224e      	movs	r2, #78	; 0x4e
 8004d86:	4917      	ldr	r1, [pc, #92]	; (8004de4 <HAL_UART_RxCpltCallback+0xe4>)
 8004d88:	1d28      	adds	r0, r5, #4
 8004d8a:	f01f f89d 	bl	8023ec8 <memcpy>
				statuspkt.epochsecs = calcepoch32(); // should not be needed if our 1 sec timer was accurate, also dbg desyncs this
 8004d8e:	f7ff fd6f 	bl	8004870 <calcepoch32>
 8004d92:	f8c5 008c 	str.w	r0, [r5, #140]	; 0x8c
				if (statuspkt.NavPvt.flags & 1) { // locked
 8004d96:	7e6b      	ldrb	r3, [r5, #25]
 8004d98:	f013 0301 	ands.w	r3, r3, #1
 8004d9c:	d002      	beq.n	8004da4 <HAL_UART_RxCpltCallback+0xa4>
					gpslocked = 1;
 8004d9e:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <HAL_UART_RxCpltCallback+0xe8>)
 8004da0:	701c      	strb	r4, [r3, #0]
}
 8004da2:	bd38      	pop	{r3, r4, r5, pc}
					gpslocked = 0;
 8004da4:	4a10      	ldr	r2, [pc, #64]	; (8004de8 <HAL_UART_RxCpltCallback+0xe8>)
 8004da6:	7013      	strb	r3, [r2, #0]
}
 8004da8:	bd38      	pop	{r3, r4, r5, pc}
 8004daa:	bf00      	nop
 8004dac:	20002d94 	.word	0x20002d94
 8004db0:	40005000 	.word	0x40005000
 8004db4:	40011400 	.word	0x40011400
 8004db8:	40004400 	.word	0x40004400
 8004dbc:	0802b4d0 	.word	0x0802b4d0
 8004dc0:	20002f64 	.word	0x20002f64
 8004dc4:	20002e1c 	.word	0x20002e1c
 8004dc8:	20002e28 	.word	0x20002e28
 8004dcc:	20002d98 	.word	0x20002d98
 8004dd0:	0802b4b4 	.word	0x0802b4b4
 8004dd4:	20002dc6 	.word	0x20002dc6
 8004dd8:	0802b488 	.word	0x0802b488
 8004ddc:	20002f3c 	.word	0x20002f3c
 8004de0:	20002f6c 	.word	0x20002f6c
 8004de4:	20002d9e 	.word	0x20002d9e
 8004de8:	200033b8 	.word	0x200033b8

08004dec <HAL_UART_ErrorCallback>:
	__HAL_UART_CLEAR_FEFLAG(huart);
	__HAL_UART_CLEAR_NEFLAG(huart);
	__HAL_UART_CLEAR_OREFLAG(huart);
	__HAL_UART_CLEAR_PEFLAG(huart);

	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004dec:	4926      	ldr	r1, [pc, #152]	; (8004e88 <HAL_UART_ErrorCallback+0x9c>)
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004dee:	2202      	movs	r2, #2
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004df2:	6809      	ldr	r1, [r1, #0]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004df4:	2704      	movs	r7, #4
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004df6:	6803      	ldr	r3, [r0, #0]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004df8:	2608      	movs	r6, #8
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004dfa:	2501      	movs	r5, #1
HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8004dfc:	4604      	mov	r4, r0
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004dfe:	428b      	cmp	r3, r1
	__HAL_UART_CLEAR_FEFLAG(huart);
 8004e00:	621a      	str	r2, [r3, #32]
	__HAL_UART_CLEAR_NEFLAG(huart);
 8004e02:	621f      	str	r7, [r3, #32]
	__HAL_UART_CLEAR_OREFLAG(huart);
 8004e04:	621e      	str	r6, [r3, #32]
	__HAL_UART_CLEAR_PEFLAG(huart);
 8004e06:	621d      	str	r5, [r3, #32]
	if (huart->Instance == GPSUARTRX) { 		// GPS  UART
 8004e08:	d02b      	beq.n	8004e62 <HAL_UART_ErrorCallback+0x76>
		}

		return;
	}

	if (huart->Instance == UART5) { 			//LCD UART
 8004e0a:	4920      	ldr	r1, [pc, #128]	; (8004e8c <HAL_UART_ErrorCallback+0xa0>)
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	d00f      	beq.n	8004e30 <HAL_UART_ErrorCallback+0x44>
				UART5->ICR = USART_ICR_FECF;
		}
		return;
	}

	if (huart->Instance == USART6) { 			//ESP UART
 8004e10:	491f      	ldr	r1, [pc, #124]	; (8004e90 <HAL_UART_ErrorCallback+0xa4>)
 8004e12:	428b      	cmp	r3, r1
 8004e14:	d000      	beq.n	8004e18 <HAL_UART_ErrorCallback+0x2c>
#define  HAL_UART_ERROR_NE         ((uint32_t)0x00000002U)    /*!< Noise error         */
#define  HAL_UART_ERROR_FE         ((uint32_t)0x00000004U)    /*!< frame error         */
#define  HAL_UART_ERROR_ORE        ((uint32_t)0x00000008U)    /*!< Overrun error       */
#define  HAL_UART_ERROR_DMA        ((uint32_t)0x00000010U)    /*!< DMA transfer error  */
#endif
}
 8004e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		error = huart->ErrorCode;
 8004e18:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
		printf("HAL_UART_ErrorCallback: USART6 error=0x%x\n", error);
 8004e1c:	481d      	ldr	r0, [pc, #116]	; (8004e94 <HAL_UART_ErrorCallback+0xa8>)
 8004e1e:	f020 f819 	bl	8024e54 <iprintf>
		__HAL_UART_CLEAR_FEFLAG(huart);
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	2202      	movs	r2, #2
 8004e26:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_NEFLAG(huart);
 8004e28:	621f      	str	r7, [r3, #32]
		__HAL_UART_CLEAR_OREFLAG(huart);
 8004e2a:	621e      	str	r6, [r3, #32]
		__HAL_UART_CLEAR_PEFLAG(huart);
 8004e2c:	621d      	str	r5, [r3, #32]
}
 8004e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(lcd_initflag)) {
 8004e30:	4a19      	ldr	r2, [pc, #100]	; (8004e98 <HAL_UART_ErrorCallback+0xac>)
 8004e32:	6812      	ldr	r2, [r2, #0]
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	d1ee      	bne.n	8004e16 <HAL_UART_ErrorCallback+0x2a>
			lcduart_error = huart->ErrorCode;
 8004e38:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004e3c:	4a17      	ldr	r2, [pc, #92]	; (8004e9c <HAL_UART_ErrorCallback+0xb0>)
 8004e3e:	6011      	str	r1, [r2, #0]
			if (UART5->ISR & USART_ISR_ORE) // Overrun Error
 8004e40:	69da      	ldr	r2, [r3, #28]
 8004e42:	0710      	lsls	r0, r2, #28
 8004e44:	d500      	bpl.n	8004e48 <HAL_UART_ErrorCallback+0x5c>
				UART5->ICR = USART_ICR_ORECF;
 8004e46:	621e      	str	r6, [r3, #32]
			if (UART5->ISR & USART_ISR_NE) // Noise Error
 8004e48:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_UART_ErrorCallback+0xa0>)
 8004e4a:	69da      	ldr	r2, [r3, #28]
 8004e4c:	0751      	lsls	r1, r2, #29
 8004e4e:	d501      	bpl.n	8004e54 <HAL_UART_ErrorCallback+0x68>
				UART5->ICR = USART_ICR_NCF;
 8004e50:	2204      	movs	r2, #4
 8004e52:	621a      	str	r2, [r3, #32]
			if (UART5->ISR & USART_ISR_FE) // Framing Error
 8004e54:	4b0d      	ldr	r3, [pc, #52]	; (8004e8c <HAL_UART_ErrorCallback+0xa0>)
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	0792      	lsls	r2, r2, #30
 8004e5a:	d5dc      	bpl.n	8004e16 <HAL_UART_ErrorCallback+0x2a>
				UART5->ICR = USART_ICR_FECF;
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	621a      	str	r2, [r3, #32]
}
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("GPS UART_Err Callback %0lx, ", huart->ErrorCode);
 8004e62:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8004e66:	480e      	ldr	r0, [pc, #56]	; (8004ea0 <HAL_UART_ErrorCallback+0xb4>)
 8004e68:	f01f fff4 	bl	8024e54 <iprintf>
		stat = HAL_UART_Receive_DMA(&gpsuartrx, rxdatabuf, 1);
 8004e6c:	462a      	mov	r2, r5
 8004e6e:	490d      	ldr	r1, [pc, #52]	; (8004ea4 <HAL_UART_ErrorCallback+0xb8>)
 8004e70:	480d      	ldr	r0, [pc, #52]	; (8004ea8 <HAL_UART_ErrorCallback+0xbc>)
 8004e72:	f00d fffd 	bl	8012e70 <HAL_UART_Receive_DMA>
		if ((stat != HAL_OK) && (stat != HAL_BUSY)) {
 8004e76:	f010 0ffd 	tst.w	r0, #253	; 0xfd
 8004e7a:	d0cc      	beq.n	8004e16 <HAL_UART_ErrorCallback+0x2a>
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	480b      	ldr	r0, [pc, #44]	; (8004eac <HAL_UART_ErrorCallback+0xc0>)
}
 8004e80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			printf("Err HAL_UART_Receive_DMA usart6/8 stat=%d\n", stat);
 8004e84:	f01f bfe6 	b.w	8024e54 <iprintf>
 8004e88:	20002d94 	.word	0x20002d94
 8004e8c:	40005000 	.word	0x40005000
 8004e90:	40011400 	.word	0x40011400
 8004e94:	0802b534 	.word	0x0802b534
 8004e98:	20001a08 	.word	0x20001a08
 8004e9c:	20001a9c 	.word	0x20001a9c
 8004ea0:	0802b4e8 	.word	0x0802b4e8
 8004ea4:	20002f64 	.word	0x20002f64
 8004ea8:	20002e30 	.word	0x20002e30
 8004eac:	0802b508 	.word	0x0802b508

08004eb0 <nextionloader>:
int nxt_abort = 0;			// 1 == abort
int nxt_blocksacked = 0;	// number of acks recieved by the LCD (every 4k bytes)
char nxtbuffer[NXDL_BUFF_SIZE];

// attempt to load new LCD user firmware
void nextionloader(char filename[], char host[], uint32_t crc) {
 8004eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	dl_filecrc = 0;

//	printf("nextionloader: fliename=%s, host=%s, crc=%u\n",filename,host,crc);

	sprintf(newfilename, "/firmware/%s-%04u.tft", filename, newbuild);
 8004eb2:	4b1b      	ldr	r3, [pc, #108]	; (8004f20 <nextionloader+0x70>)
	dl_filecrc = 0;
 8004eb4:	2400      	movs	r4, #0
 8004eb6:	4e1b      	ldr	r6, [pc, #108]	; (8004f24 <nextionloader+0x74>)
void nextionloader(char filename[], char host[], uint32_t crc) {
 8004eb8:	460d      	mov	r5, r1
	sprintf(newfilename, "/firmware/%s-%04u.tft", filename, newbuild);
 8004eba:	681b      	ldr	r3, [r3, #0]
void nextionloader(char filename[], char host[], uint32_t crc) {
 8004ebc:	4602      	mov	r2, r0
	sprintf(newfilename, "/firmware/%s-%04u.tft", filename, newbuild);
 8004ebe:	491a      	ldr	r1, [pc, #104]	; (8004f28 <nextionloader+0x78>)
 8004ec0:	481a      	ldr	r0, [pc, #104]	; (8004f2c <nextionloader+0x7c>)
	dl_filecrc = 0;
 8004ec2:	6034      	str	r4, [r6, #0]
	sprintf(newfilename, "/firmware/%s-%04u.tft", filename, newbuild);
 8004ec4:	f020 f9b0 	bl	8025228 <siprintf>
	printf("Attempting to download new Nextion firmware %s from %s, ******* DO NOT SWITCH OFF ******\n", newfilename,
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4918      	ldr	r1, [pc, #96]	; (8004f2c <nextionloader+0x7c>)
 8004ecc:	4818      	ldr	r0, [pc, #96]	; (8004f30 <nextionloader+0x80>)
 8004ece:	f01f ffc1 	bl	8024e54 <iprintf>
			host);
	osDelay(600);
 8004ed2:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004ed6:	f010 f827 	bl	8014f28 <osDelay>
	http_downloading = NXT_LOADING;		// mode == nextion download
 8004eda:	4f16      	ldr	r7, [pc, #88]	; (8004f34 <nextionloader+0x84>)
 8004edc:	2302      	movs	r3, #2
	nxt_abort = 0;

#define TFTSIZE 1971204

	nxt_blocksacked = 0;
 8004ede:	4e16      	ldr	r6, [pc, #88]	; (8004f38 <nextionloader+0x88>)
	lcd_startdl(TFTSIZE);		// put LCD into upload firmware mode	ZZZ filesize
 8004ee0:	4816      	ldr	r0, [pc, #88]	; (8004f3c <nextionloader+0x8c>)
	http_downloading = NXT_LOADING;		// mode == nextion download
 8004ee2:	603b      	str	r3, [r7, #0]
	nxt_abort = 0;
 8004ee4:	4b16      	ldr	r3, [pc, #88]	; (8004f40 <nextionloader+0x90>)
	nxt_blocksacked = 0;
 8004ee6:	6034      	str	r4, [r6, #0]
	nxt_abort = 0;
 8004ee8:	601c      	str	r4, [r3, #0]
	lcd_startdl(TFTSIZE);		// put LCD into upload firmware mode	ZZZ filesize
 8004eea:	f7fe f913 	bl	8003114 <lcd_startdl>
	osDelay(600);				// wait half a second for LCD to Ack
 8004eee:	f44f 7016 	mov.w	r0, #600	; 0x258
 8004ef2:	f010 f819 	bl	8014f28 <osDelay>
	if (nxt_blocksacked) {		// LCD acks the start, its now in DL mode
 8004ef6:	6833      	ldr	r3, [r6, #0]
 8004ef8:	b16b      	cbz	r3, 8004f16 <nextionloader+0x66>
		nxt_blocksacked = 0;		// reset counter
		http_dlclient(newfilename, host, (void*) 0);
 8004efa:	4622      	mov	r2, r4
 8004efc:	4629      	mov	r1, r5
 8004efe:	480b      	ldr	r0, [pc, #44]	; (8004f2c <nextionloader+0x7c>)
		nxt_blocksacked = 0;		// reset counter
 8004f00:	6034      	str	r4, [r6, #0]
		http_dlclient(newfilename, host, (void*) 0);
 8004f02:	f7fc fea7 	bl	8001c54 <http_dlclient>
		printf("nextionloader: Nextion download not acked start\n");
	}

	// wait for transfer to complete
	// unblock http client
	osDelay(5);
 8004f06:	2005      	movs	r0, #5
 8004f08:	f010 f80e 	bl	8014f28 <osDelay>
	printf("nextionloader: exit\n");
 8004f0c:	480d      	ldr	r0, [pc, #52]	; (8004f44 <nextionloader+0x94>)
}
 8004f0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	printf("nextionloader: exit\n");
 8004f12:	f020 b83b 	b.w	8024f8c <puts>
		printf("nextionloader: Nextion download not acked start\n");
 8004f16:	480c      	ldr	r0, [pc, #48]	; (8004f48 <nextionloader+0x98>)
		http_downloading = NOT_LOADING;
 8004f18:	603b      	str	r3, [r7, #0]
		printf("nextionloader: Nextion download not acked start\n");
 8004f1a:	f020 f837 	bl	8024f8c <puts>
 8004f1e:	e7f2      	b.n	8004f06 <nextionloader+0x56>
 8004f20:	20002d80 	.word	0x20002d80
 8004f24:	20000814 	.word	0x20000814
 8004f28:	0802b568 	.word	0x0802b568
 8004f2c:	20003010 	.word	0x20003010
 8004f30:	0802b580 	.word	0x0802b580
 8004f34:	20001880 	.word	0x20001880
 8004f38:	20003044 	.word	0x20003044
 8004f3c:	001e1404 	.word	0x001e1404
 8004f40:	20003040 	.word	0x20003040
 8004f44:	0802b60c 	.word	0x0802b60c
 8004f48:	0802b5dc 	.word	0x0802b5dc

08004f4c <nxt_rx_callback>:
//#define lcd_writeblock(nxtbuffer, residual) printf("%d ",residual)

// http callback for Nextion firmware download
// this gets called for each downloaded chunk received
//
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8004f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char *buf;
	struct pbuf *q;
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 8004f50:	2000      	movs	r0, #0
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8004f52:	461c      	mov	r4, r3
	static int residual, blockssent = 0;
	static int bytesinblocksent = 0, qlentot = 0, tot_sent = 0;

//	printf("nxt_rx_callback:\n");

	LWIP_ASSERT("p != NULL", p != NULL);
 8004f54:	4690      	mov	r8, r2
int nxt_rx_callback(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err) {
 8004f56:	ed2d 8b02 	vpush	{d8}
 8004f5a:	b08b      	sub	sp, #44	; 0x2c
 8004f5c:	ee08 1a10 	vmov	s16, r1
	volatile int i, pktlen, res, tlen = 0, len = 0, ch;
 8004f60:	9007      	str	r0, [sp, #28]
 8004f62:	9008      	str	r0, [sp, #32]
	LWIP_ASSERT("p != NULL", p != NULL);
 8004f64:	2a00      	cmp	r2, #0
 8004f66:	f000 80f7 	beq.w	8005158 <nxt_rx_callback+0x20c>
	if (err != ERR_OK) {
 8004f6a:	2c00      	cmp	r4, #0
 8004f6c:	f040 80e9 	bne.w	8005142 <nxt_rx_callback+0x1f6>
		return;
	}

//	printf("nxt_rx_callback1: nxt_abort=%d, blockssent=%d, nxt_blocksacked=%d, q->len=%d\n", nxt_abort, blockssent,	nxt_blocksacked, p->len);

	if (nxt_abort)
 8004f70:	4b85      	ldr	r3, [pc, #532]	; (8005188 <nxt_rx_callback+0x23c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	9303      	str	r3, [sp, #12]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f040 8102 	bne.w	8005180 <nxt_rx_callback+0x234>
		return (-1);

	i = 0;
 8004f7c:	9404      	str	r4, [sp, #16]
			nxt_abort = 1;
			return (-1);
		}
	}
#endif
	for (q = p; q != NULL; q = q->next) {
 8004f7e:	f1b8 0f00 	cmp.w	r8, #0
 8004f82:	f000 80d8 	beq.w	8005136 <nxt_rx_callback+0x1ea>
 8004f86:	46a2      	mov	sl, r4
 8004f88:	4f80      	ldr	r7, [pc, #512]	; (800518c <nxt_rx_callback+0x240>)
 8004f8a:	4644      	mov	r4, r8
 8004f8c:	4e80      	ldr	r6, [pc, #512]	; (8005190 <nxt_rx_callback+0x244>)
		tlen = q->tot_len;
		len = q->len;

		if (nxt_abort == 0) { // we need to upload this data to the NXT

			if (residual) {				// residual data from last call to send first
 8004f8e:	f8df b238 	ldr.w	fp, [pc, #568]	; 80051c8 <nxt_rx_callback+0x27c>
						printf("AMISSED ACK\n");
						ch = -1;
					}

					bytesinblocksent = 0;		// start new block
					blockssent++;
 8004f92:	f8df 9238 	ldr.w	r9, [pc, #568]	; 80051cc <nxt_rx_callback+0x280>
 8004f96:	e040      	b.n	800501a <nxt_rx_callback+0xce>
			if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 8004f98:	4d7e      	ldr	r5, [pc, #504]	; (8005194 <nxt_rx_callback+0x248>)
 8004f9a:	682a      	ldr	r2, [r5, #0]
			pktlen = q->len;
 8004f9c:	9305      	str	r3, [sp, #20]
			residual = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f8cb 3000 	str.w	r3, [fp]
			if ((pktlen + bytesinblocksent) > 4096) {	// will we will overflow the 4096 boundary?
 8004fa4:	9b05      	ldr	r3, [sp, #20]
 8004fa6:	4413      	add	r3, r2
 8004fa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fac:	dc55      	bgt.n	800505a <nxt_rx_callback+0x10e>
				len = pktlen;		// just send what we have got
 8004fae:	9b05      	ldr	r3, [sp, #20]
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8004fb0:	6860      	ldr	r0, [r4, #4]
				len = pktlen;		// just send what we have got
 8004fb2:	9308      	str	r3, [sp, #32]
			tot_sent += len;
 8004fb4:	9a08      	ldr	r2, [sp, #32]
 8004fb6:	6833      	ldr	r3, [r6, #0]
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8004fb8:	9908      	ldr	r1, [sp, #32]
			tot_sent += len;
 8004fba:	4413      	add	r3, r2
 8004fbc:	6033      	str	r3, [r6, #0]
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 8004fbe:	f7fd f8d9 	bl	8002174 <lcd_writeblock>
 8004fc2:	1c43      	adds	r3, r0, #1
 8004fc4:	bf0c      	ite	eq
 8004fc6:	2301      	moveq	r3, #1
 8004fc8:	2300      	movne	r3, #0
 8004fca:	9306      	str	r3, [sp, #24]
 8004fcc:	f000 80ab 	beq.w	8005126 <nxt_rx_callback+0x1da>
			bytesinblocksent += len;
 8004fd0:	682a      	ldr	r2, [r5, #0]
 8004fd2:	9b08      	ldr	r3, [sp, #32]
 8004fd4:	4413      	add	r3, r2
			if (bytesinblocksent == 4096) {
 8004fd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
			bytesinblocksent += len;
 8004fda:	602b      	str	r3, [r5, #0]
			if (bytesinblocksent == 4096) {
 8004fdc:	d05f      	beq.n	800509e <nxt_rx_callback+0x152>
				} else {
					nxt_blocksacked++;
				}
			}
		}
		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4d6d      	ldr	r5, [pc, #436]	; (8005198 <nxt_rx_callback+0x24c>)
 8004fe2:	6833      	ldr	r3, [r6, #0]
 8004fe4:	f8d9 1000 	ldr.w	r1, [r9]
 8004fe8:	9200      	str	r2, [sp, #0]
 8004fea:	486c      	ldr	r0, [pc, #432]	; (800519c <nxt_rx_callback+0x250>)
 8004fec:	682a      	ldr	r2, [r5, #0]
 8004fee:	f01f ff31 	bl	8024e54 <iprintf>
		down_total += q->len;			// downloaded but not necessarily all sent to lcd
 8004ff2:	682a      	ldr	r2, [r5, #0]
 8004ff4:	8963      	ldrh	r3, [r4, #10]
		altcp_recved(pcb, p->tot_len);
 8004ff6:	ee18 0a10 	vmov	r0, s16
 8004ffa:	f8b8 1008 	ldrh.w	r1, [r8, #8]
		down_total += q->len;			// downloaded but not necessarily all sent to lcd
 8004ffe:	4413      	add	r3, r2
 8005000:	602b      	str	r3, [r5, #0]
		altcp_recved(pcb, p->tot_len);
 8005002:	f016 fae5 	bl	801b5d0 <tcp_recved>
		pbuf_free(p);
 8005006:	4640      	mov	r0, r8
 8005008:	f015 fe62 	bl	801acd0 <pbuf_free>
	for (q = p; q != NULL; q = q->next) {
 800500c:	6824      	ldr	r4, [r4, #0]
 800500e:	2c00      	cmp	r4, #0
 8005010:	f000 8091 	beq.w	8005136 <nxt_rx_callback+0x1ea>
		if (nxt_abort == 0) { // we need to upload this data to the NXT
 8005014:	4b5c      	ldr	r3, [pc, #368]	; (8005188 <nxt_rx_callback+0x23c>)
 8005016:	f8d3 a000 	ldr.w	sl, [r3]
		qlentot += q->len;
 800501a:	8963      	ldrh	r3, [r4, #10]
 800501c:	683a      	ldr	r2, [r7, #0]
		tlen = q->tot_len;
 800501e:	8921      	ldrh	r1, [r4, #8]
		qlentot += q->len;
 8005020:	441a      	add	r2, r3
		tlen = q->tot_len;
 8005022:	9107      	str	r1, [sp, #28]
		qlentot += q->len;
 8005024:	603a      	str	r2, [r7, #0]
		len = q->len;
 8005026:	9308      	str	r3, [sp, #32]
		if (nxt_abort == 0) { // we need to upload this data to the NXT
 8005028:	f1ba 0f00 	cmp.w	sl, #0
 800502c:	d1d8      	bne.n	8004fe0 <nxt_rx_callback+0x94>
			if (residual) {				// residual data from last call to send first
 800502e:	f8db 1000 	ldr.w	r1, [fp]
 8005032:	2900      	cmp	r1, #0
 8005034:	d0b0      	beq.n	8004f98 <nxt_rx_callback+0x4c>
				tot_sent += residual;
 8005036:	6833      	ldr	r3, [r6, #0]
				if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 8005038:	4859      	ldr	r0, [pc, #356]	; (80051a0 <nxt_rx_callback+0x254>)
				tot_sent += residual;
 800503a:	440b      	add	r3, r1
 800503c:	6033      	str	r3, [r6, #0]
				if ((res = lcd_writeblock(nxtbuffer, residual)) == -1) {
 800503e:	f7fd f899 	bl	8002174 <lcd_writeblock>
 8005042:	1c42      	adds	r2, r0, #1
 8005044:	9006      	str	r0, [sp, #24]
 8005046:	f000 808e 	beq.w	8005166 <nxt_rx_callback+0x21a>
				bytesinblocksent += residual;
 800504a:	4d52      	ldr	r5, [pc, #328]	; (8005194 <nxt_rx_callback+0x248>)
 800504c:	f8db 1000 	ldr.w	r1, [fp]
 8005050:	682a      	ldr	r2, [r5, #0]
			pktlen = q->len;
 8005052:	8963      	ldrh	r3, [r4, #10]
				bytesinblocksent += residual;
 8005054:	440a      	add	r2, r1
 8005056:	602a      	str	r2, [r5, #0]
 8005058:	e7a0      	b.n	8004f9c <nxt_rx_callback+0x50>
				len = 4096 - bytesinblocksent;		// we only have to send 0.. len this time
 800505a:	f5c2 5280 	rsb	r2, r2, #4096	; 0x1000
				buf = q->payload;
 800505e:	6860      	ldr	r0, [r4, #4]
				len = 4096 - bytesinblocksent;		// we only have to send 0.. len this time
 8005060:	9208      	str	r2, [sp, #32]
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8005062:	9b08      	ldr	r3, [sp, #32]
 8005064:	9304      	str	r3, [sp, #16]
 8005066:	9b04      	ldr	r3, [sp, #16]
 8005068:	9a05      	ldr	r2, [sp, #20]
 800506a:	429a      	cmp	r2, r3
 800506c:	dd12      	ble.n	8005094 <nxt_rx_callback+0x148>
 800506e:	4a4c      	ldr	r2, [pc, #304]	; (80051a0 <nxt_rx_callback+0x254>)
 8005070:	f1c2 0c01 	rsb	ip, r2, #1
					nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 8005074:	9b04      	ldr	r3, [sp, #16]
 8005076:	eb0c 0a02 	add.w	sl, ip, r2
 800507a:	5cc1      	ldrb	r1, [r0, r3]
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 800507c:	9b04      	ldr	r3, [sp, #16]
					nxtbuffer[residual++] = buf[i];		// keep the rest back until next time
 800507e:	f802 1b01 	strb.w	r1, [r2], #1
				for (i = len; i < pktlen; i++) {		// copy the extra bytes we cant send into a buffer
 8005082:	3301      	adds	r3, #1
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	9904      	ldr	r1, [sp, #16]
 8005088:	9b05      	ldr	r3, [sp, #20]
 800508a:	4299      	cmp	r1, r3
 800508c:	dbf2      	blt.n	8005074 <nxt_rx_callback+0x128>
			if ((res = lcd_writeblock(q->payload, len) == -1)) {
 800508e:	6860      	ldr	r0, [r4, #4]
 8005090:	f8cb a000 	str.w	sl, [fp]
				len = pktlen - residual;		// work out how many we can send now
 8005094:	9b05      	ldr	r3, [sp, #20]
 8005096:	eba3 030a 	sub.w	r3, r3, sl
 800509a:	9308      	str	r3, [sp, #32]
 800509c:	e78a      	b.n	8004fb4 <nxt_rx_callback+0x68>
				lcd_rxdma();		// get any new characters received
 800509e:	f7fd f8c1 	bl	8002224 <lcd_rxdma>
				for (i = 0; i < 2000; i++) {
 80050a2:	2300      	movs	r3, #0
 80050a4:	9304      	str	r3, [sp, #16]
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050ac:	da32      	bge.n	8005114 <nxt_rx_callback+0x1c8>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80050ae:	f8df a120 	ldr.w	sl, [pc, #288]	; 80051d0 <nxt_rx_callback+0x284>
 80050b2:	e00d      	b.n	80050d0 <nxt_rx_callback+0x184>
				for (i = 0; i < 2000; i++) {
 80050b4:	9a04      	ldr	r2, [sp, #16]
					bytesinblocksent = 0;		// start new block
 80050b6:	2100      	movs	r1, #0
					blockssent++;
 80050b8:	f8d9 3000 	ldr.w	r3, [r9]
				for (i = 0; i < 2000; i++) {
 80050bc:	3201      	adds	r2, #1
					bytesinblocksent = 0;		// start new block
 80050be:	6029      	str	r1, [r5, #0]
					blockssent++;
 80050c0:	3301      	adds	r3, #1
				for (i = 0; i < 2000; i++) {
 80050c2:	9204      	str	r2, [sp, #16]
					blockssent++;
 80050c4:	f8c9 3000 	str.w	r3, [r9]
				for (i = 0; i < 2000; i++) {
 80050c8:	9b04      	ldr	r3, [sp, #16]
 80050ca:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80050ce:	da21      	bge.n	8005114 <nxt_rx_callback+0x1c8>
					ch = lcd_getc();
 80050d0:	f7fd f8e6 	bl	80022a0 <lcd_getc>
 80050d4:	4603      	mov	r3, r0
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80050d6:	4650      	mov	r0, sl
					ch = lcd_getc();
 80050d8:	9309      	str	r3, [sp, #36]	; 0x24
					if (ch >= 0) {
 80050da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db05      	blt.n	80050ec <nxt_rx_callback+0x1a0>
						if (ch == 0x05) {
 80050e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050e2:	2b05      	cmp	r3, #5
 80050e4:	d013      	beq.n	800510e <nxt_rx_callback+0x1c2>
							printf("Not Ack, was %d\n", ch);		// ignore it otherwise
 80050e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050e8:	f01f feb4 	bl	8024e54 <iprintf>
					osDelay(1);
 80050ec:	2001      	movs	r0, #1
 80050ee:	f00f ff1b 	bl	8014f28 <osDelay>
					lcd_rxdma();		// get any new characters received
 80050f2:	f7fd f897 	bl	8002224 <lcd_rxdma>
					if (i == 1999) {
 80050f6:	9a04      	ldr	r2, [sp, #16]
 80050f8:	f240 73cf 	movw	r3, #1999	; 0x7cf
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d1d9      	bne.n	80050b4 <nxt_rx_callback+0x168>
						printf("AMISSED ACK\n");
 8005100:	4828      	ldr	r0, [pc, #160]	; (80051a4 <nxt_rx_callback+0x258>)
 8005102:	f01f ff43 	bl	8024f8c <puts>
						ch = -1;
 8005106:	f04f 33ff 	mov.w	r3, #4294967295
 800510a:	9309      	str	r3, [sp, #36]	; 0x24
 800510c:	e7d2      	b.n	80050b4 <nxt_rx_callback+0x168>
							printf("ACK\n");
 800510e:	4826      	ldr	r0, [pc, #152]	; (80051a8 <nxt_rx_callback+0x25c>)
 8005110:	f01f ff3c 	bl	8024f8c <puts>
				if (ch < 0) {		// error
 8005114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005116:	2b00      	cmp	r3, #0
 8005118:	db28      	blt.n	800516c <nxt_rx_callback+0x220>
					nxt_blocksacked++;
 800511a:	4924      	ldr	r1, [pc, #144]	; (80051ac <nxt_rx_callback+0x260>)
		printf("nxt_rx_5: blk=%d, down_total=%d, tot_sent=%d, qlentot=%d\n", blockssent, down_total, tot_sent, qlentot);
 800511c:	683a      	ldr	r2, [r7, #0]
					nxt_blocksacked++;
 800511e:	680b      	ldr	r3, [r1, #0]
 8005120:	3301      	adds	r3, #1
 8005122:	600b      	str	r3, [r1, #0]
 8005124:	e75c      	b.n	8004fe0 <nxt_rx_callback+0x94>
				printf("NXT Write1 failed from http client\n");
 8005126:	4603      	mov	r3, r0
 8005128:	4821      	ldr	r0, [pc, #132]	; (80051b0 <nxt_rx_callback+0x264>)
				return (-1);
 800512a:	9303      	str	r3, [sp, #12]
				printf("NXT Write1 failed from http client\n");
 800512c:	f01f ff2e 	bl	8024f8c <puts>
				nxt_abort = 1;
 8005130:	2301      	movs	r3, #1
 8005132:	4a15      	ldr	r2, [pc, #84]	; (8005188 <nxt_rx_callback+0x23c>)
 8005134:	6013      	str	r3, [r2, #0]

//		p = p->next;
//		printf("nxt_rx_4: len=%d, tot=%d qlentot=%d\n",  len, down_total, qlentot);
	}
	return (0);
}
 8005136:	9803      	ldr	r0, [sp, #12]
 8005138:	b00b      	add	sp, #44	; 0x2c
 800513a:	ecbd 8b02 	vpop	{d8}
 800513e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		putchar('@');
 8005142:	2040      	movs	r0, #64	; 0x40
 8005144:	f01f fe9e 	bl	8024e84 <putchar>
		printlwiperr(err);
 8005148:	4620      	mov	r0, r4
}
 800514a:	b00b      	add	sp, #44	; 0x2c
 800514c:	ecbd 8b02 	vpop	{d8}
 8005150:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printlwiperr(err);
 8005154:	f7fc bd62 	b.w	8001c1c <printlwiperr>
	LWIP_ASSERT("p != NULL", p != NULL);
 8005158:	4b16      	ldr	r3, [pc, #88]	; (80051b4 <nxt_rx_callback+0x268>)
 800515a:	225b      	movs	r2, #91	; 0x5b
 800515c:	4916      	ldr	r1, [pc, #88]	; (80051b8 <nxt_rx_callback+0x26c>)
 800515e:	4817      	ldr	r0, [pc, #92]	; (80051bc <nxt_rx_callback+0x270>)
 8005160:	f01f fe78 	bl	8024e54 <iprintf>
 8005164:	e701      	b.n	8004f6a <nxt_rx_callback+0x1e>
					printf("NXT Write2 failed from http client\n");
 8005166:	4603      	mov	r3, r0
 8005168:	4815      	ldr	r0, [pc, #84]	; (80051c0 <nxt_rx_callback+0x274>)
 800516a:	e7de      	b.n	800512a <nxt_rx_callback+0x1de>
					return (-1);
 800516c:	f04f 32ff 	mov.w	r2, #4294967295
					nxt_abort = 1;
 8005170:	2301      	movs	r3, #1
					printf("ABORT ERR ON ACK\n");
 8005172:	4814      	ldr	r0, [pc, #80]	; (80051c4 <nxt_rx_callback+0x278>)
					return (-1);
 8005174:	9203      	str	r2, [sp, #12]
					nxt_abort = 1;
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <nxt_rx_callback+0x23c>)
 8005178:	6013      	str	r3, [r2, #0]
					printf("ABORT ERR ON ACK\n");
 800517a:	f01f ff07 	bl	8024f8c <puts>
					return (-1);
 800517e:	e7da      	b.n	8005136 <nxt_rx_callback+0x1ea>
		return (-1);
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	9303      	str	r3, [sp, #12]
 8005186:	e7d6      	b.n	8005136 <nxt_rx_callback+0x1ea>
 8005188:	20003040 	.word	0x20003040
 800518c:	200032a0 	.word	0x200032a0
 8005190:	200032a8 	.word	0x200032a8
 8005194:	2000300c 	.word	0x2000300c
 8005198:	20001634 	.word	0x20001634
 800519c:	0802b6b8 	.word	0x0802b6b8
 80051a0:	20003048 	.word	0x20003048
 80051a4:	0802b698 	.word	0x0802b698
 80051a8:	0802b6a0 	.word	0x0802b6a0
 80051ac:	20003044 	.word	0x20003044
 80051b0:	0802b660 	.word	0x0802b660
 80051b4:	0802b620 	.word	0x0802b620
 80051b8:	08044d9c 	.word	0x08044d9c
 80051bc:	08029a64 	.word	0x08029a64
 80051c0:	0802b63c 	.word	0x0802b63c
 80051c4:	0802b6a4 	.word	0x0802b6a4
 80051c8:	200032a4 	.word	0x200032a4
 80051cc:	20003008 	.word	0x20003008
 80051d0:	0802b684 	.word	0x0802b684
 80051d4:	ffffffff 	.word	0xffffffff

080051d8 <getpressure115.part.0>:
		printf("I2C HAL returned error 1\n\r");
	}
}

// MPL115 low precision pressure sensor, uses floating point, crashes!!
HAL_StatusTypeDef getpressure115(void) {
 80051d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80051dc:	ed2d 8b02 	vpush	{d8}
 80051e0:	b08f      	sub	sp, #60	; 0x3c
	if (result != HAL_OK) {
		printf("I2C MPL115 HAL returned error 7\n\r");
		return (result);
	}

	osDelay(4);		// conversion time max 3mS
 80051e2:	2004      	movs	r0, #4

	for (i = 0; i < 4; i++) {
 80051e4:	2500      	movs	r5, #0
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80051e6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80051ea:	ae0c      	add	r6, sp, #48	; 0x30
 80051ec:	4f6e      	ldr	r7, [pc, #440]	; (80053a8 <getpressure115.part.0+0x1d0>)
		if (result != HAL_OK) {
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 80051ee:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 80053d0 <getpressure115.part.0+0x1f8>
	osDelay(4);		// conversion time max 3mS
 80051f2:	f00f fe99 	bl	8014f28 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 80051f6:	2301      	movs	r3, #1
 80051f8:	9600      	str	r6, [sp, #0]
 80051fa:	b2aa      	uxth	r2, r5
 80051fc:	21c1      	movs	r1, #193	; 0xc1
 80051fe:	4638      	mov	r0, r7
	for (i = 0; i < 4; i++) {
 8005200:	3601      	adds	r6, #1
		result = HAL_I2C_Mem_Read(&hi2c1, (0x60 << 1) | 1, i, 1, &data[i], 1, 1000);	// rd pressure and temp regs
 8005202:	e9cd 3801 	strd	r3, r8, [sp, #4]
 8005206:	f006 ff43 	bl	800c090 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800520a:	4604      	mov	r4, r0
 800520c:	2800      	cmp	r0, #0
 800520e:	f040 80a6 	bne.w	800535e <getpressure115.part.0+0x186>
	for (i = 0; i < 4; i++) {
 8005212:	3501      	adds	r5, #1
 8005214:	2d04      	cmp	r5, #4
 8005216:	d1ee      	bne.n	80051f6 <getpressure115.part.0+0x1e>
		printf(" %hx", dat);
	}
	printf("\n");
#endif

	pr = (data[0] * 256 + data[1]) >> 6;
 8005218:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
	tr = (data[2] * 256 + data[3]) >> 6;
 800521c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
	pr = (data[0] * 256 + data[1]) >> 6;
 8005220:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
	tr = (data[2] * 256 + data[3]) >> 6;
 8005224:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
	pr = (data[0] * 256 + data[1]) >> 6;
 8005228:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	t = tr;
	p = pr;

// Pcomp = a0 + (b1 + c12 x Tadc) x Padc + b2 x Tadc

	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800522c:	485f      	ldr	r0, [pc, #380]	; (80053ac <getpressure115.part.0+0x1d4>)
	tr = (data[2] * 256 + data[3]) >> 6;
 800522e:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8005232:	495f      	ldr	r1, [pc, #380]	; (80053b0 <getpressure115.part.0+0x1d8>)
	pr = (data[0] * 256 + data[1]) >> 6;
 8005234:	0992      	lsrs	r2, r2, #6
	t = tr;
 8005236:	099c      	lsrs	r4, r3, #6
	p = pr;
 8005238:	ee07 2a90 	vmov	s15, r2
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800523c:	4a5d      	ldr	r2, [pc, #372]	; (80053b4 <getpressure115.part.0+0x1dc>)
	t = tr;
 800523e:	ee02 4a10 	vmov	s4, r4
	tr = (data[2] * 256 + data[3]) >> 6;
 8005242:	119d      	asrs	r5, r3, #6
	p = pr;
 8005244:	eeb8 7b67 	vcvt.f64.u32	d7, s15
			}
#endif
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
//	printf("statuspkt.temppress temp=%f, press=%f\n\r", (float) ((statuspkt.temppress >> 20)) / 16.0,
//			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	return (HAL_OK);
 8005248:	2400      	movs	r4, #0
	t = tr;
 800524a:	eeb8 2b42 	vcvt.f64.u32	d2, s4
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800524e:	ed90 1b00 	vldr	d1, [r0]
	t = tr;
 8005252:	ed8d 2b08 	vstr	d2, [sp, #32]
	p = pr;
 8005256:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800525a:	ed9d 7b08 	vldr	d7, [sp, #32]
 800525e:	ed91 4b00 	vldr	d4, [r1]
 8005262:	4955      	ldr	r1, [pc, #340]	; (80053b8 <getpressure115.part.0+0x1e0>)
	ffrac = modf(p, &n);
 8005264:	a80a      	add	r0, sp, #40	; 0x28
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 8005266:	eea1 4b07 	vfma.f64	d4, d1, d7
 800526a:	ed91 6b00 	vldr	d6, [r1]
 800526e:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005272:	ed92 0b00 	vldr	d0, [r2]
 8005276:	eeb0 7b46 	vmov.f64	d7, d6
 800527a:	ed9d 2b08 	vldr	d2, [sp, #32]
 800527e:	eea4 7b08 	vfma.f64	d7, d4, d8
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8005282:	ed9f 3b3d 	vldr	d3, [pc, #244]	; 8005378 <getpressure115.part.0+0x1a0>
 8005286:	ed9f 5b3e 	vldr	d5, [pc, #248]	; 8005380 <getpressure115.part.0+0x1a8>
	p = (a0 + ((b1 + (c12 * t)) * p)) + (b2 * t);
 800528a:	eea0 7b02 	vfma.f64	d7, d0, d2
 800528e:	ed8d 7b06 	vstr	d7, [sp, #24]
	p = (p * ((115.0 - 50.0) / 1023.0)) + 50.0;
 8005292:	ed9d 6b06 	vldr	d6, [sp, #24]
 8005296:	eea6 5b03 	vfma.f64	d5, d6, d3
 800529a:	ed8d 5b06 	vstr	d5, [sp, #24]
	ffrac = modf(p, &n);
 800529e:	ed9d 0b06 	vldr	d0, [sp, #24]
 80052a2:	f01f ff23 	bl	80250ec <modf>
	t = tr * -0.1706 + 112.27; //C
 80052a6:	ee07 5a90 	vmov	s15, r5
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80052aa:	4944      	ldr	r1, [pc, #272]	; (80053bc <getpressure115.part.0+0x1e4>)
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80052ac:	eeb3 1b00 	vmov.f64	d1, #48	; 0x41800000  16.0
	t = tr * -0.1706 + 112.27; //C
 80052b0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
	pressure = (uint32_t) n;
 80052b4:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <getpressure115.part.0+0x1e8>)
	tempfrac = tempfrac * 100;	// now 10,000
 80052b6:	2264      	movs	r2, #100	; 0x64
 80052b8:	4842      	ldr	r0, [pc, #264]	; (80053c4 <getpressure115.part.0+0x1ec>)
	t = tr * -0.1706 + 112.27; //C
 80052ba:	ed9f 2b33 	vldr	d2, [pc, #204]	; 8005388 <getpressure115.part.0+0x1b0>
 80052be:	ed9f 6b34 	vldr	d6, [pc, #208]	; 8005390 <getpressure115.part.0+0x1b8>
	ffrac = modf(p, &n);
 80052c2:	ed8d 0b04 	vstr	d0, [sp, #16]
	pressure = (uint32_t) n;
 80052c6:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80052ca:	ed9f 3b33 	vldr	d3, [pc, #204]	; 8005398 <getpressure115.part.0+0x1c0>
 80052ce:	ed9d 4b04 	vldr	d4, [sp, #16]
	t = tr * -0.1706 + 112.27; //C
 80052d2:	eea7 6b02 	vfma.f64	d6, d7, d2
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80052d6:	ee24 4b03 	vmul.f64	d4, d4, d3
	pressure = (uint32_t) n;
 80052da:	eebc 5bc5 	vcvt.u32.f64	s10, d5
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80052de:	ed9f 2b30 	vldr	d2, [pc, #192]	; 80053a0 <getpressure115.part.0+0x1c8>
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80052e2:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	pressure = (uint32_t) n;
 80052e6:	ed83 5a00 	vstr	s10, [r3]
	temperature = t;
 80052ea:	4b37      	ldr	r3, [pc, #220]	; (80053c8 <getpressure115.part.0+0x1f0>)
	t = tr * -0.1706 + 112.27; //C
 80052ec:	ed8d 6b08 	vstr	d6, [sp, #32]
	pressfrac = (uint32_t) (ffrac * 100);  // eg frac 101.03 = frac 3, 101.52 = 52
 80052f0:	ed81 4a00 	vstr	s8, [r1]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80052f4:	4935      	ldr	r1, [pc, #212]	; (80053cc <getpressure115.part.0+0x1f4>)
	temperature = t;
 80052f6:	ed9d 4b08 	vldr	d4, [sp, #32]
	tempfrac = (t - temperature) * 100;
 80052fa:	ed9d 6b08 	vldr	d6, [sp, #32]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 80052fe:	ed9d 5b08 	vldr	d5, [sp, #32]
	temperature = t;
 8005302:	eebc 4bc4 	vcvt.u32.f64	s8, d4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005306:	ed9d 7b06 	vldr	d7, [sp, #24]
 800530a:	ee25 5b01 	vmul.f64	d5, d5, d1
	temperature = t;
 800530e:	ed83 4a00 	vstr	s8, [r3]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005312:	ee27 7b02 	vmul.f64	d7, d7, d2
	tempfrac = (t - temperature) * 100;
 8005316:	eeb8 2b44 	vcvt.f64.u32	d2, s8
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800531a:	feb8 5b45 	vrinta.f64	d5, d5
	tempfrac = (t - temperature) * 100;
 800531e:	ee36 6b42 	vsub.f64	d6, d6, d2
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005322:	feb8 7b47 	vrinta.f64	d7, d7
 8005326:	eebc 7bc7 	vcvt.u32.f64	s14, d7
	tempfrac = (t - temperature) * 100;
 800532a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800532e:	eebc 6bc6 	vcvt.u32.f64	s12, d6
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005332:	eefc 6bc5 	vcvt.u32.f64	s13, d5
	tempfrac = tempfrac * 100;	// now 10,000
 8005336:	ee16 3a10 	vmov	r3, s12
 800533a:	fb02 f303 	mul.w	r3, r2, r3
 800533e:	461a      	mov	r2, r3
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005340:	ee16 3a90 	vmov	r3, s13
	tempfrac = tempfrac * 100;	// now 10,000
 8005344:	6002      	str	r2, [r0, #0]
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 8005346:	ee17 2a10 	vmov	r2, s14
}
 800534a:	4620      	mov	r0, r4
	statuspkt.temppress = (uint32_t) (round(t * 16)) << 20 | (uint32_t) (round(p * 4000.0));
 800534c:	ea42 5303 	orr.w	r3, r2, r3, lsl #20
 8005350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8005354:	b00f      	add	sp, #60	; 0x3c
 8005356:	ecbd 8b02 	vpop	{d8}
 800535a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			printf("I2C MPL115 HAL returned error %d\n\r", result);
 800535e:	4648      	mov	r0, r9
 8005360:	4621      	mov	r1, r4
 8005362:	f01f fd77 	bl	8024e54 <iprintf>
			if (i == 3)
 8005366:	2d03      	cmp	r5, #3
 8005368:	f47f af53 	bne.w	8005212 <getpressure115.part.0+0x3a>
}
 800536c:	4620      	mov	r0, r4
 800536e:	b00f      	add	sp, #60	; 0x3c
 8005370:	ecbd 8b02 	vpop	{d8}
 8005374:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005378:	04411044 	.word	0x04411044
 800537c:	3fb04411 	.word	0x3fb04411
 8005380:	00000000 	.word	0x00000000
 8005384:	40490000 	.word	0x40490000
 8005388:	86594af5 	.word	0x86594af5
 800538c:	bfc5d638 	.word	0xbfc5d638
 8005390:	ae147ae1 	.word	0xae147ae1
 8005394:	405c1147 	.word	0x405c1147
 8005398:	00000000 	.word	0x00000000
 800539c:	40590000 	.word	0x40590000
 80053a0:	00000000 	.word	0x00000000
 80053a4:	40af4000 	.word	0x40af4000
 80053a8:	20002534 	.word	0x20002534
 80053ac:	200032c8 	.word	0x200032c8
 80053b0:	200032b8 	.word	0x200032b8
 80053b4:	200032c0 	.word	0x200032c0
 80053b8:	200032b0 	.word	0x200032b0
 80053bc:	20003344 	.word	0x20003344
 80053c0:	20003348 	.word	0x20003348
 80053c4:	20003354 	.word	0x20003354
 80053c8:	20003350 	.word	0x20003350
 80053cc:	20002f6c 	.word	0x20002f6c
 80053d0:	0802b6f4 	.word	0x0802b6f4

080053d4 <cycleleds>:
void cycleleds(void) {
 80053d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053d6:	b085      	sub	sp, #20
	const uint16_t pattern[] = {
 80053d8:	4a1b      	ldr	r2, [pc, #108]	; (8005448 <cycleleds+0x74>)
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80053da:	4f1c      	ldr	r7, [pc, #112]	; (800544c <cycleleds+0x78>)
 80053dc:	ac01      	add	r4, sp, #4
 80053de:	f10d 050e 	add.w	r5, sp, #14
	const uint16_t pattern[] = {
 80053e2:	ca07      	ldmia	r2, {r0, r1, r2}
 80053e4:	4623      	mov	r3, r4
 80053e6:	4626      	mov	r6, r4
 80053e8:	c303      	stmia	r3!, {r0, r1}
 80053ea:	801a      	strh	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 80053ec:	f836 1b02 	ldrh.w	r1, [r6], #2
 80053f0:	4638      	mov	r0, r7
 80053f2:	2200      	movs	r2, #0
 80053f4:	f006 f9b2 	bl	800b75c <HAL_GPIO_WritePin>
		osDelay(140);
 80053f8:	208c      	movs	r0, #140	; 0x8c
 80053fa:	f00f fd95 	bl	8014f28 <osDelay>
	for (i = 0; i < 5; i++) {
 80053fe:	42ae      	cmp	r6, r5
 8005400:	d1f4      	bne.n	80053ec <cycleleds+0x18>
	osDelay(600);
 8005402:	f44f 7016 	mov.w	r0, #600	; 0x258
 8005406:	4626      	mov	r6, r4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 8005408:	4f10      	ldr	r7, [pc, #64]	; (800544c <cycleleds+0x78>)
	osDelay(600);
 800540a:	f00f fd8d 	bl	8014f28 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_SET);
 800540e:	f836 1b02 	ldrh.w	r1, [r6], #2
 8005412:	4638      	mov	r0, r7
 8005414:	2201      	movs	r2, #1
 8005416:	f006 f9a1 	bl	800b75c <HAL_GPIO_WritePin>
		osDelay(140);
 800541a:	208c      	movs	r0, #140	; 0x8c
 800541c:	f00f fd84 	bl	8014f28 <osDelay>
	for (i = 0; i < 5; i++) {
 8005420:	42ae      	cmp	r6, r5
 8005422:	d1f4      	bne.n	800540e <cycleleds+0x3a>
	osDelay(500);
 8005424:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 8005428:	4e08      	ldr	r6, [pc, #32]	; (800544c <cycleleds+0x78>)
	osDelay(500);
 800542a:	f00f fd7d 	bl	8014f28 <osDelay>
		HAL_GPIO_WritePin(GPIOD, pattern[i], GPIO_PIN_RESET);
 800542e:	f834 1b02 	ldrh.w	r1, [r4], #2
 8005432:	4630      	mov	r0, r6
 8005434:	2200      	movs	r2, #0
 8005436:	f006 f991 	bl	800b75c <HAL_GPIO_WritePin>
		osDelay(140);
 800543a:	208c      	movs	r0, #140	; 0x8c
 800543c:	f00f fd74 	bl	8014f28 <osDelay>
	for (i = 0; i < 5; i++) {
 8005440:	42ac      	cmp	r4, r5
 8005442:	d1f4      	bne.n	800542e <cycleleds+0x5a>
}
 8005444:	b005      	add	sp, #20
 8005446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005448:	08028f9c 	.word	0x08028f9c
 800544c:	40020c00 	.word	0x40020c00

08005450 <setpgagain>:
void setpgagain(int gain) {		// this takes gain 0..9
 8005450:	b510      	push	{r4, lr}
 8005452:	4604      	mov	r4, r0
 8005454:	b082      	sub	sp, #8
	osDelay(5);
 8005456:	2005      	movs	r0, #5
 8005458:	f00f fd66 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800545c:	2201      	movs	r2, #1
 800545e:	2104      	movs	r1, #4
 8005460:	482e      	ldr	r0, [pc, #184]	; (800551c <setpgagain+0xcc>)
 8005462:	f006 f97b 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 8005466:	2005      	movs	r0, #5
 8005468:	f00f fd5e 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 800546c:	2200      	movs	r2, #0
 800546e:	2104      	movs	r1, #4
 8005470:	482a      	ldr	r0, [pc, #168]	; (800551c <setpgagain+0xcc>)
 8005472:	f006 f973 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 8005476:	2005      	movs	r0, #5
 8005478:	f00f fd56 	bl	8014f28 <osDelay>
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 800547c:	4928      	ldr	r1, [pc, #160]	; (8005520 <setpgagain+0xd0>)
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 800547e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005482:	2201      	movs	r2, #1
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8005484:	5d09      	ldrb	r1, [r1, r4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8005486:	4827      	ldr	r0, [pc, #156]	; (8005524 <setpgagain+0xd4>)
	pgacmd[0] = 0x4000 | (pgaset[gain]);		// write to gain register
 8005488:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800548c:	f8ad 1004 	strh.w	r1, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// select gain
 8005490:	a901      	add	r1, sp, #4
 8005492:	f009 f969 	bl	800e768 <HAL_SPI_Transmit>
 8005496:	bba0      	cbnz	r0, 8005502 <setpgagain+0xb2>
	osDelay(5);
 8005498:	2005      	movs	r0, #5
 800549a:	f00f fd45 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800549e:	2201      	movs	r2, #1
 80054a0:	2104      	movs	r1, #4
 80054a2:	481e      	ldr	r0, [pc, #120]	; (800551c <setpgagain+0xcc>)
 80054a4:	f006 f95a 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 80054a8:	2005      	movs	r0, #5
 80054aa:	f00f fd3d 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 80054ae:	481b      	ldr	r0, [pc, #108]	; (800551c <setpgagain+0xcc>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	2104      	movs	r1, #4
 80054b4:	f006 f952 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 80054b8:	2005      	movs	r0, #5
 80054ba:	f00f fd35 	bl	8014f28 <osDelay>
	if (gain > 6) {		// might be a DC jump
 80054be:	2c06      	cmp	r4, #6
 80054c0:	dd1c      	ble.n	80054fc <setpgagain+0xac>
		sigsuppress = 8;		// prevent trigger for a while
 80054c2:	4b19      	ldr	r3, [pc, #100]	; (8005528 <setpgagain+0xd8>)
 80054c4:	2208      	movs	r2, #8
	if (gain > 7) {
 80054c6:	2c07      	cmp	r4, #7
		sigsuppress = 8;		// prevent trigger for a while
 80054c8:	601a      	str	r2, [r3, #0]
	if (gain > 7) {
 80054ca:	d017      	beq.n	80054fc <setpgagain+0xac>
		pgacmd[0] = 0x4101;			// write to channel reg select ch1
 80054cc:	f244 1001 	movw	r0, #16641	; 0x4101
 80054d0:	f8ad 0004 	strh.w	r0, [sp, #4]
	if ((stat = HAL_SPI_Transmit(&hspi2, &pgacmd[0], 1, 1000)) != HAL_OK) {	// write it out
 80054d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80054d8:	2201      	movs	r2, #1
 80054da:	a901      	add	r1, sp, #4
 80054dc:	4811      	ldr	r0, [pc, #68]	; (8005524 <setpgagain+0xd4>)
 80054de:	f009 f943 	bl	800e768 <HAL_SPI_Transmit>
 80054e2:	b9a8      	cbnz	r0, 8005510 <setpgagain+0xc0>
	osDelay(5);
 80054e4:	2005      	movs	r0, #5
 80054e6:	f00f fd1f 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 80054ea:	2201      	movs	r2, #1
 80054ec:	2104      	movs	r1, #4
 80054ee:	480b      	ldr	r0, [pc, #44]	; (800551c <setpgagain+0xcc>)
 80054f0:	f006 f934 	bl	800b75c <HAL_GPIO_WritePin>
	pgagain = gain;		// update global gain
 80054f4:	4b0d      	ldr	r3, [pc, #52]	; (800552c <setpgagain+0xdc>)
 80054f6:	801c      	strh	r4, [r3, #0]
}
 80054f8:	b002      	add	sp, #8
 80054fa:	bd10      	pop	{r4, pc}
		pgacmd[0] = 0x4100;		// write to channel reg select ch0
 80054fc:	f44f 4082 	mov.w	r0, #16640	; 0x4100
 8005500:	e7e6      	b.n	80054d0 <setpgagain+0x80>
		printf("setpgagain: SPI Error1: %d pgacmd[0]=0x%0x\n", stat, pgacmd[0]);
 8005502:	4601      	mov	r1, r0
 8005504:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005508:	4809      	ldr	r0, [pc, #36]	; (8005530 <setpgagain+0xe0>)
 800550a:	f01f fca3 	bl	8024e54 <iprintf>
 800550e:	e7c3      	b.n	8005498 <setpgagain+0x48>
		printf("setpgagain: SPI Error2: %d\n", stat);
 8005510:	4601      	mov	r1, r0
 8005512:	4808      	ldr	r0, [pc, #32]	; (8005534 <setpgagain+0xe4>)
 8005514:	f01f fc9e 	bl	8024e54 <iprintf>
 8005518:	e7e4      	b.n	80054e4 <setpgagain+0x94>
 800551a:	bf00      	nop
 800551c:	40021800 	.word	0x40021800
 8005520:	0802bb34 	.word	0x0802bb34
 8005524:	20002638 	.word	0x20002638
 8005528:	20000744 	.word	0x20000744
 800552c:	20003340 	.word	0x20003340
 8005530:	0802b718 	.word	0x0802b718
 8005534:	0802b744 	.word	0x0802b744

08005538 <initpga>:
int initpga() {
 8005538:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800553a:	2201      	movs	r2, #1
int initpga() {
 800553c:	b082      	sub	sp, #8
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 800553e:	2104      	movs	r1, #4
 8005540:	4826      	ldr	r0, [pc, #152]	; (80055dc <initpga+0xa4>)
 8005542:	f006 f90b 	bl	800b75c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// reset the PGA seq
 8005546:	2200      	movs	r2, #0
 8005548:	2104      	movs	r1, #4
 800554a:	4824      	ldr	r0, [pc, #144]	; (80055dc <initpga+0xa4>)
 800554c:	f006 f906 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(50);
 8005550:	2032      	movs	r0, #50	; 0x32
 8005552:	f00f fce9 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PGA
 8005556:	2201      	movs	r2, #1
 8005558:	2104      	movs	r1, #4
 800555a:	4820      	ldr	r0, [pc, #128]	; (80055dc <initpga+0xa4>)
 800555c:	f006 f8fe 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 8005560:	2005      	movs	r0, #5
 8005562:	f00f fce1 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8005566:	2200      	movs	r2, #0
 8005568:	2104      	movs	r1, #4
 800556a:	481c      	ldr	r0, [pc, #112]	; (80055dc <initpga+0xa4>)
 800556c:	f006 f8f6 	bl	800b75c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0 }, 1, 1000)) != HAL_OK) {	// nop cmd
 8005570:	2000      	movs	r0, #0
 8005572:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005576:	2201      	movs	r2, #1
 8005578:	f8ad 0004 	strh.w	r0, [sp, #4]
 800557c:	a901      	add	r1, sp, #4
 800557e:	4818      	ldr	r0, [pc, #96]	; (80055e0 <initpga+0xa8>)
 8005580:	f009 f8f2 	bl	800e768 <HAL_SPI_Transmit>
 8005584:	4604      	mov	r4, r0
 8005586:	bb08      	cbnz	r0, 80055cc <initpga+0x94>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_SET);	// deselect the PG
 8005588:	2104      	movs	r1, #4
 800558a:	2201      	movs	r2, #1
 800558c:	4813      	ldr	r0, [pc, #76]	; (80055dc <initpga+0xa4>)
 800558e:	f006 f8e5 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(5);
 8005592:	2005      	movs	r0, #5
 8005594:	f00f fcc8 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOG, CS_PGA_Pin, GPIO_PIN_RESET);	// select the PGA
 8005598:	4622      	mov	r2, r4
 800559a:	2104      	movs	r1, #4
 800559c:	480f      	ldr	r0, [pc, #60]	; (80055dc <initpga+0xa4>)
 800559e:	f006 f8dd 	bl	800b75c <HAL_GPIO_WritePin>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80055a2:	f44f 4482 	mov.w	r4, #16640	; 0x4100
	osDelay(5);
 80055a6:	2005      	movs	r0, #5
 80055a8:	f00f fcbe 	bl	8014f28 <osDelay>
	if ((stat = HAL_SPI_Transmit(&hspi2, (uint16_t[] ) { 0x4100 }, 1, 1000)) != HAL_OK) {	// set the channel to ch0
 80055ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055b0:	2201      	movs	r2, #1
 80055b2:	a901      	add	r1, sp, #4
 80055b4:	480a      	ldr	r0, [pc, #40]	; (80055e0 <initpga+0xa8>)
 80055b6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80055ba:	f009 f8d5 	bl	800e768 <HAL_SPI_Transmit>
 80055be:	4604      	mov	r4, r0
 80055c0:	b920      	cbnz	r0, 80055cc <initpga+0x94>
	setpgagain(0);			// 0 == gain of 1x
 80055c2:	f7ff ff45 	bl	8005450 <setpgagain>
	return (0);
 80055c6:	4620      	mov	r0, r4
}
 80055c8:	b002      	add	sp, #8
 80055ca:	bd10      	pop	{r4, pc}
		printf("initpga: SPI error 2: %d\n\r", stat);
 80055cc:	4621      	mov	r1, r4
 80055ce:	4805      	ldr	r0, [pc, #20]	; (80055e4 <initpga+0xac>)
 80055d0:	f01f fc40 	bl	8024e54 <iprintf>
		return (1);
 80055d4:	2001      	movs	r0, #1
}
 80055d6:	b002      	add	sp, #8
 80055d8:	bd10      	pop	{r4, pc}
 80055da:	bf00      	nop
 80055dc:	40021800 	.word	0x40021800
 80055e0:	20002638 	.word	0x20002638
 80055e4:	0802b760 	.word	0x0802b760

080055e8 <initpressure115>:

// the cheap pressure sensor
HAL_StatusTypeDef initpressure115(void) {
 80055e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055ec:	b088      	sub	sp, #32
	const uint8_t testcoef[] = {0x3E, 0xCE, 0xb3, 0xF9, 0xC5, 0x17, 0x33, 0xC8};
#endif
	int i;

	for (i = 0; i < 8; i++)
		data[i] = 0x5A;
 80055ee:	f04f 335a 	mov.w	r3, #1515870810	; 0x5a5a5a5a
//	if (HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x04 }, 1, 1000) != HAL_OK) {	// CMD Read �Coefficient data byte 1 High byte� = 0x04
//		printf("I2C 115 HAL returned error 5\n\r");
//	}

	for (i = 0; i < 8; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 80055f2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80055f6:	f04f 0801 	mov.w	r8, #1
		data[i] = 0x5A;
 80055fa:	ac06      	add	r4, sp, #24
 80055fc:	f10d 0a20 	add.w	sl, sp, #32
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 8005600:	4f36      	ldr	r7, [pc, #216]	; (80056dc <initpressure115+0xf4>)
 8005602:	f1c4 0904 	rsb	r9, r4, #4
		data[i] = 0x5A;
 8005606:	e9cd 3306 	strd	r3, r3, [sp, #24]
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i + 4, 1, &data[i], 1, 1000);	// rd coeficients reg
 800560a:	eb09 0204 	add.w	r2, r9, r4
 800560e:	2301      	movs	r3, #1
 8005610:	9400      	str	r4, [sp, #0]
 8005612:	21c0      	movs	r1, #192	; 0xc0
 8005614:	b292      	uxth	r2, r2
 8005616:	4638      	mov	r0, r7
 8005618:	441c      	add	r4, r3
 800561a:	e9cd 8601 	strd	r8, r6, [sp, #4]
 800561e:	f006 fd37 	bl	800c090 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005622:	4605      	mov	r5, r0
 8005624:	2800      	cmp	r0, #0
 8005626:	d141      	bne.n	80056ac <initpressure115+0xc4>
	for (i = 0; i < 8; i++) {
 8005628:	45a2      	cmp	sl, r4
 800562a:	d1ee      	bne.n	800560a <initpressure115+0x22>
	for (i = 0; i < 8; i++) {
		printf(" %x", data[i]);
	}
#endif

	if (data[0] == 0x5a) {
 800562c:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8005630:	2b5a      	cmp	r3, #90	; 0x5a
 8005632:	d04a      	beq.n	80056ca <initpressure115+0xe2>
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
		return (HAL_ERROR);		// expected a changed reading - is device present?
	}

	a0co = (data[0] << 8) | data[1];
	b1co = (data[2] << 8) | data[3];
 8005634:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 8005638:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 800563c:	badb      	revsh	r3, r3
 800563e:	f8bd 101a 	ldrh.w	r1, [sp, #26]

//a0co = 0x3ECE ; b1co = 0xB3F9; b2co = 0xC517; c12co = 0x33C8;  // force fixed coeficients

//	printf("\na0co=%hx, b1co=%hx, b2co=%hx, c12co=%hx\n", a0co, b1co, b2co, c12co);

	a0 = (double) a0co / 8;
 8005642:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8005646:	bad2      	revsh	r2, r2
	b1 = (double) b1co / 8192;
	b2 = (double) b2co / 16384;
	c12 = (double) c12co;
 8005648:	109b      	asrs	r3, r3, #2
 800564a:	bac9      	revsh	r1, r1
	a0 = (double) a0co / 8;
 800564c:	bac0      	revsh	r0, r0
	b2 = (double) b2co / 16384;
 800564e:	ee06 2a10 	vmov	s12, r2
 8005652:	eeba 6bc9 	vcvt.f64.s32	d6, d6, #14
	c12 /= (double) 4194304.0;
 8005656:	ee07 3a10 	vmov	s14, r3
 800565a:	eeba 7bc5 	vcvt.f64.s32	d7, d7, #22
 800565e:	4a20      	ldr	r2, [pc, #128]	; (80056e0 <initpressure115+0xf8>)
	b1 = (double) b1co / 8192;
 8005660:	ee05 1a10 	vmov	s10, r1
 8005664:	eeba 5be9 	vcvt.f64.s32	d5, d5, #13
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005668:	9600      	str	r6, [sp, #0]
	a0 = (double) a0co / 8;
 800566a:	ee04 0a10 	vmov	s8, r0
 800566e:	eeba 4bee 	vcvt.f64.s32	d4, d4, #3
 8005672:	4b1c      	ldr	r3, [pc, #112]	; (80056e4 <initpressure115+0xfc>)
	b1 = (double) b1co / 8192;
 8005674:	481c      	ldr	r0, [pc, #112]	; (80056e8 <initpressure115+0x100>)
	b2 = (double) b2co / 16384;
 8005676:	491d      	ldr	r1, [pc, #116]	; (80056ec <initpressure115+0x104>)
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005678:	f88d 5015 	strb.w	r5, [sp, #21]
	c12 /= (double) 4194304.0;
 800567c:	ed82 7b00 	vstr	d7, [r2]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 8005680:	2212      	movs	r2, #18
	a0 = (double) a0co / 8;
 8005682:	ed83 4b00 	vstr	d4, [r3]
	b1 = (double) b1co / 8192;
 8005686:	ed80 5b00 	vstr	d5, [r0]
	b2 = (double) b2co / 16384;
 800568a:	ed81 6b00 	vstr	d6, [r1]
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x12, 0x00 }, 2, 1000);
 800568e:	f88d 2014 	strb.w	r2, [sp, #20]
 8005692:	2302      	movs	r3, #2
 8005694:	aa05      	add	r2, sp, #20
 8005696:	21c0      	movs	r1, #192	; 0xc0
 8005698:	4810      	ldr	r0, [pc, #64]	; (80056dc <initpressure115+0xf4>)
 800569a:	f006 fb65 	bl	800bd68 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800569e:	b968      	cbnz	r0, 80056bc <initpressure115+0xd4>
 80056a0:	f7ff fd9a 	bl	80051d8 <getpressure115.part.0>

//	printf("a0=%f, b1=%f, b2=%f, c12=%f\n", a0, b1, b2, c12);
	getpressure115();
	return (HAL_OK);
}
 80056a4:	4628      	mov	r0, r5
 80056a6:	b008      	add	sp, #32
 80056a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 MPL115A2 I2C HAL returned error %d\n\r", result);
 80056ac:	4601      	mov	r1, r0
 80056ae:	4810      	ldr	r0, [pc, #64]	; (80056f0 <initpressure115+0x108>)
 80056b0:	f01f fbd0 	bl	8024e54 <iprintf>
}
 80056b4:	4628      	mov	r0, r5
 80056b6:	b008      	add	sp, #32
 80056b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		printf("I2C MPL115 HAL returned error 7\n\r");
 80056bc:	480d      	ldr	r0, [pc, #52]	; (80056f4 <initpressure115+0x10c>)
 80056be:	f01f fbc9 	bl	8024e54 <iprintf>
}
 80056c2:	4628      	mov	r0, r5
 80056c4:	b008      	add	sp, #32
 80056c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return (HAL_ERROR);		// expected a changed reading - is device present?
 80056ca:	2501      	movs	r5, #1
		printf("Splat1-2 MPL115A2 I2C not present?\n\r");
 80056cc:	480a      	ldr	r0, [pc, #40]	; (80056f8 <initpressure115+0x110>)
 80056ce:	f01f fbc1 	bl	8024e54 <iprintf>
}
 80056d2:	4628      	mov	r0, r5
 80056d4:	b008      	add	sp, #32
 80056d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056da:	bf00      	nop
 80056dc:	20002534 	.word	0x20002534
 80056e0:	200032c8 	.word	0x200032c8
 80056e4:	200032b0 	.word	0x200032b0
 80056e8:	200032b8 	.word	0x200032b8
 80056ec:	200032c0 	.word	0x200032c0
 80056f0:	0802b7bc 	.word	0x0802b7bc
 80056f4:	0802b798 	.word	0x0802b798
 80056f8:	0802b7ec 	.word	0x0802b7ec

080056fc <getpressure3115>:
//////////////////////////////////////////////
//
// get the pressure and put in globals Sensor MPL3115A2
//
//////////////////////////////////////////////
HAL_StatusTypeDef getpressure3115(void) {
 80056fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005700:	b08c      	sub	sp, #48	; 0x30
	HAL_StatusTypeDef result;
	volatile uint32_t p, t;
//	double ffp, ffn, ffrac;
	volatile uint32_t ifp, ifn, ifrac;

	data[0] = 0x55;
 8005702:	2355      	movs	r3, #85	; 0x55
	for (trys = 0; trys < 4; trys++) {
 8005704:	2500      	movs	r5, #0
		osDelay(10);
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005706:	4f46      	ldr	r7, [pc, #280]	; (8005820 <getpressure3115+0x124>)
 8005708:	ae08      	add	r6, sp, #32
		if (result != HAL_OK) {
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 800570a:	f8df 8134 	ldr.w	r8, [pc, #308]	; 8005840 <getpressure3115+0x144>
	data[0] = 0x55;
 800570e:	f88d 3020 	strb.w	r3, [sp, #32]
		osDelay(10);
 8005712:	200a      	movs	r0, #10
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005714:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
		osDelay(10);
 8005718:	f00f fc06 	bl	8014f28 <osDelay>
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800571c:	2301      	movs	r3, #1
 800571e:	2200      	movs	r2, #0
 8005720:	21c0      	movs	r1, #192	; 0xc0
 8005722:	4638      	mov	r0, r7
 8005724:	9600      	str	r6, [sp, #0]
 8005726:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800572a:	f006 fcb1 	bl	800c090 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 800572e:	4604      	mov	r4, r0
 8005730:	2800      	cmp	r0, #0
 8005732:	d163      	bne.n	80057fc <getpressure3115+0x100>
			if (trys == 3)
				return (result);
		} // no HAL error
		if (data[0] & 0x08)
 8005734:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (trys = 0; trys < 4; trys++) {
 8005738:	3501      	adds	r5, #1
		if (data[0] & 0x08)
 800573a:	071b      	lsls	r3, r3, #28
 800573c:	d401      	bmi.n	8005742 <getpressure3115+0x46>
	for (trys = 0; trys < 4; trys++) {
 800573e:	2d04      	cmp	r5, #4
 8005740:	d1e7      	bne.n	8005712 <getpressure3115+0x16>
 8005742:	2501      	movs	r5, #1
 8005744:	af0a      	add	r7, sp, #40	; 0x28
			break;		// data is ready
	} // for
//		printf("Press stat: 0x%0x\n", data[0]);

	for (i = 1; i < 6; i++) {
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 8005746:	f44f 7a7a 	mov.w	sl, #1000	; 0x3e8
 800574a:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8005820 <getpressure3115+0x124>
 800574e:	46a9      	mov	r9, r5
 8005750:	b2aa      	uxth	r2, r5
 8005752:	2301      	movs	r3, #1
 8005754:	21c0      	movs	r1, #192	; 0xc0
 8005756:	4640      	mov	r0, r8
 8005758:	9600      	str	r6, [sp, #0]
	for (i = 1; i < 6; i++) {
 800575a:	3501      	adds	r5, #1
		result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, i, 1, &data[0], 1, 1000); // rd status reg pressure sense
 800575c:	e9cd 9a01 	strd	r9, sl, [sp, #4]
 8005760:	f006 fc96 	bl	800c090 <HAL_I2C_Mem_Read>
		if (result != HAL_OK) {
 8005764:	4604      	mov	r4, r0
 8005766:	2800      	cmp	r0, #0
 8005768:	d152      	bne.n	8005810 <getpressure3115+0x114>
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
			return (result);
		}
		dataout[i - 1] = data[0];
 800576a:	f89d 3020 	ldrb.w	r3, [sp, #32]
	for (i = 1; i < 6; i++) {
 800576e:	2d06      	cmp	r5, #6
		dataout[i - 1] = data[0];
 8005770:	f807 3b01 	strb.w	r3, [r7], #1
	for (i = 1; i < 6; i++) {
 8005774:	d1ec      	bne.n	8005750 <getpressure3115+0x54>
//				printf("[0x%02x] ", data[0]);
	}  // for

	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005776:	f89d 1029 	ldrb.w	r1, [sp, #41]	; 0x29
 800577a:	f89d 0028 	ldrb.w	r0, [sp, #40]	; 0x28
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800577e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005782:	0209      	lsls	r1, r1, #8
 8005784:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8005788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800578c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005790:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 8005794:	430a      	orrs	r2, r1

	statuspkt.temppress = t << 20 | p;								// update status packet
 8005796:	4923      	ldr	r1, [pc, #140]	; (8005824 <getpressure3115+0x128>)
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 8005798:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 800579c:	0912      	lsrs	r2, r2, #4
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 800579e:	111b      	asrs	r3, r3, #4
	p = ((dataout[0] << 16) | (dataout[1] << 8) | (dataout[2] & 0xF0)) >> 4;	// 20 bits
 80057a0:	9204      	str	r2, [sp, #16]
	t = ((dataout[3] << 8) | (dataout[4] & 0xF0)) >> 4;
 80057a2:	9305      	str	r3, [sp, #20]
	statuspkt.temppress = t << 20 | p;								// update status packet
 80057a4:	9805      	ldr	r0, [sp, #20]
 80057a6:	9a04      	ldr	r2, [sp, #16]
#else

#endif

	// convert quarterpascals to kilopascals
	ifn = p / 4000;		// kilopascals
 80057a8:	4b1f      	ldr	r3, [pc, #124]	; (8005828 <getpressure3115+0x12c>)
	statuspkt.temppress = t << 20 | p;								// update status packet
 80057aa:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
 80057ae:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
	ifrac = (p % 4000);		// fractions of a kilopascal
 80057b2:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
	ifn = p / 4000;		// kilopascals
 80057b6:	9a04      	ldr	r2, [sp, #16]
 80057b8:	fba3 0202 	umull	r0, r2, r3, r2
 80057bc:	0a12      	lsrs	r2, r2, #8
 80057be:	9206      	str	r2, [sp, #24]
	ifrac = (p % 4000);		// fractions of a kilopascal
 80057c0:	9a04      	ldr	r2, [sp, #16]
 80057c2:	fba3 0302 	umull	r0, r3, r3, r2

//	ifn = ifn >> 2;		// kilopascals
//	ifrac = ifrac >> 2;	// fractions of a kilo pascal

	pressure = ifn;
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 80057c6:	4819      	ldr	r0, [pc, #100]	; (800582c <getpressure3115+0x130>)
	ifrac = (p % 4000);		// fractions of a kilopascal
 80057c8:	0a1b      	lsrs	r3, r3, #8
 80057ca:	fb01 2313 	mls	r3, r1, r3, r2
	pressure = ifn;
 80057ce:	4a18      	ldr	r2, [pc, #96]	; (8005830 <getpressure3115+0x134>)

	temperature = t >> 4;
	tempfrac = (t & 0x0F) * 625 * 100;
 80057d0:	f24f 4124 	movw	r1, #62500	; 0xf424
	ifrac = (p % 4000);		// fractions of a kilopascal
 80057d4:	9307      	str	r3, [sp, #28]
	pressure = ifn;
 80057d6:	9b06      	ldr	r3, [sp, #24]
 80057d8:	6013      	str	r3, [r2, #0]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 80057da:	9b07      	ldr	r3, [sp, #28]
	temperature = t >> 4;
 80057dc:	9a05      	ldr	r2, [sp, #20]
	pressfrac = ifrac;  // eg frac 101.03 = frac 3, 101.52 = 52
 80057de:	6003      	str	r3, [r0, #0]
	tempfrac = (t & 0x0F) * 625 * 100;
 80057e0:	9b05      	ldr	r3, [sp, #20]
	temperature = t >> 4;
 80057e2:	0912      	lsrs	r2, r2, #4
 80057e4:	4813      	ldr	r0, [pc, #76]	; (8005834 <getpressure3115+0x138>)
	tempfrac = (t & 0x0F) * 625 * 100;
 80057e6:	f003 030f 	and.w	r3, r3, #15
	temperature = t >> 4;
 80057ea:	6002      	str	r2, [r0, #0]
			(float) ((statuspkt.temppress & 0x000FFFFF) / 4000.0));
	}
#endif

	return (result);
}
 80057ec:	4620      	mov	r0, r4
	tempfrac = (t & 0x0F) * 625 * 100;
 80057ee:	4a12      	ldr	r2, [pc, #72]	; (8005838 <getpressure3115+0x13c>)
 80057f0:	fb01 f303 	mul.w	r3, r1, r3
 80057f4:	6013      	str	r3, [r2, #0]
}
 80057f6:	b00c      	add	sp, #48	; 0x30
 80057f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-1 I2C HAL returned error %d\n\r", result);
 80057fc:	4601      	mov	r1, r0
 80057fe:	4640      	mov	r0, r8
 8005800:	f01f fb28 	bl	8024e54 <iprintf>
			if (trys == 3)
 8005804:	2d03      	cmp	r5, #3
 8005806:	d195      	bne.n	8005734 <getpressure3115+0x38>
}
 8005808:	4620      	mov	r0, r4
 800580a:	b00c      	add	sp, #48	; 0x30
 800580c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("Splat1-2 I2C HAL returned error %d\n\r", result);
 8005810:	4601      	mov	r1, r0
 8005812:	480a      	ldr	r0, [pc, #40]	; (800583c <getpressure3115+0x140>)
 8005814:	f01f fb1e 	bl	8024e54 <iprintf>
}
 8005818:	4620      	mov	r0, r4
 800581a:	b00c      	add	sp, #48	; 0x30
 800581c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005820:	20002534 	.word	0x20002534
 8005824:	20002f6c 	.word	0x20002f6c
 8005828:	10624dd3 	.word	0x10624dd3
 800582c:	20003344 	.word	0x20003344
 8005830:	20003348 	.word	0x20003348
 8005834:	20003350 	.word	0x20003350
 8005838:	20003354 	.word	0x20003354
 800583c:	0802b83c 	.word	0x0802b83c
 8005840:	0802b814 	.word	0x0802b814

08005844 <initpressure3115>:

HAL_StatusTypeDef initpressure3115(void)	// returns 1 on bad MPL3115, 0 on good.
{
 8005844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005846:	b08b      	sub	sp, #44	; 0x2c
	int i, step;
	uint8_t data[8];
	HAL_StatusTypeDef result;

	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 0x0c, 1, &data[0], 1, 1000); // rd who am i register
 8005848:	2501      	movs	r5, #1
 800584a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 800584e:	220c      	movs	r2, #12
 8005850:	a908      	add	r1, sp, #32
 8005852:	462b      	mov	r3, r5
 8005854:	4832      	ldr	r0, [pc, #200]	; (8005920 <initpressure3115+0xdc>)
 8005856:	9100      	str	r1, [sp, #0]
 8005858:	21c0      	movs	r1, #192	; 0xc0
 800585a:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800585e:	f006 fc17 	bl	800c090 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 8005862:	2800      	cmp	r0, #0
 8005864:	d145      	bne.n	80058f2 <initpressure3115+0xae>
		printf("I2C HAL returned error 1\n\r");
		return (result);
	}
	if (data[0] != 0xc4)		// not the default MPL3115 ID
 8005866:	f89d 3020 	ldrb.w	r3, [sp, #32]
 800586a:	2bc4      	cmp	r3, #196	; 0xc4
 800586c:	d003      	beq.n	8005876 <initpressure3115+0x32>
		return (HAL_ERROR);
 800586e:	462c      	mov	r4, r5
	if (result != HAL_OK) {
		printf("MPL3115A2 getpressure failed\n\r");
	}

	return (result);
}
 8005870:	4620      	mov	r0, r4
 8005872:	b00b      	add	sp, #44	; 0x2c
 8005874:	bdf0      	pop	{r4, r5, r6, r7, pc}
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x38 }, 2, 1000);
 8005876:	4f2b      	ldr	r7, [pc, #172]	; (8005924 <initpressure3115+0xe0>)
 8005878:	aa05      	add	r2, sp, #20
 800587a:	21c0      	movs	r1, #192	; 0xc0
 800587c:	4828      	ldr	r0, [pc, #160]	; (8005920 <initpressure3115+0xdc>)
 800587e:	89bb      	ldrh	r3, [r7, #12]
 8005880:	9600      	str	r6, [sp, #0]
 8005882:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005886:	2302      	movs	r3, #2
 8005888:	f006 fa6e 	bl	800bd68 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 800588c:	4604      	mov	r4, r0
 800588e:	2800      	cmp	r0, #0
 8005890:	d136      	bne.n	8005900 <initpressure3115+0xbc>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x13, 0x07 }, 2, 1000); // enbl data flags pressure sense
 8005892:	8a3b      	ldrh	r3, [r7, #16]
 8005894:	aa06      	add	r2, sp, #24
 8005896:	21c0      	movs	r1, #192	; 0xc0
 8005898:	4821      	ldr	r0, [pc, #132]	; (8005920 <initpressure3115+0xdc>)
 800589a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800589e:	2302      	movs	r3, #2
 80058a0:	9600      	str	r6, [sp, #0]
 80058a2:	f006 fa61 	bl	800bd68 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80058a6:	4604      	mov	r4, r0
 80058a8:	bb70      	cbnz	r0, 8005908 <initpressure3115+0xc4>
	result = HAL_I2C_Master_Transmit(&hi2c1, 0x60 << 1, (uint8_t[] ) { 0x26, 0x39 }, 2, 1000); // set active pressure sense
 80058aa:	8aba      	ldrh	r2, [r7, #20]
 80058ac:	2302      	movs	r3, #2
 80058ae:	21c0      	movs	r1, #192	; 0xc0
 80058b0:	481b      	ldr	r0, [pc, #108]	; (8005920 <initpressure3115+0xdc>)
 80058b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80058b6:	aa07      	add	r2, sp, #28
 80058b8:	9600      	str	r6, [sp, #0]
 80058ba:	f006 fa55 	bl	800bd68 <HAL_I2C_Master_Transmit>
	if (result != HAL_OK) {
 80058be:	4604      	mov	r4, r0
 80058c0:	bb50      	cbnz	r0, 8005918 <initpressure3115+0xd4>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 80058c2:	ac08      	add	r4, sp, #32
	osDelay(100);	// allow chip to start up sampling
 80058c4:	2064      	movs	r0, #100	; 0x64
 80058c6:	f00f fb2f 	bl	8014f28 <osDelay>
	result = HAL_I2C_Mem_Read(&hi2c1, 0x60 << 1, 1, 1, &data[0], 1, 1000); // rd msb of press reg to clear ready flags in SR
 80058ca:	462b      	mov	r3, r5
 80058cc:	9400      	str	r4, [sp, #0]
 80058ce:	462a      	mov	r2, r5
 80058d0:	21c0      	movs	r1, #192	; 0xc0
 80058d2:	4813      	ldr	r0, [pc, #76]	; (8005920 <initpressure3115+0xdc>)
 80058d4:	e9cd 5601 	strd	r5, r6, [sp, #4]
 80058d8:	f006 fbda 	bl	800c090 <HAL_I2C_Mem_Read>
	if (result != HAL_OK) {
 80058dc:	4604      	mov	r4, r0
 80058de:	b9b8      	cbnz	r0, 8005910 <initpressure3115+0xcc>
	result = getpressure3115();
 80058e0:	f7ff ff0c 	bl	80056fc <getpressure3115>
	if (result != HAL_OK) {
 80058e4:	4604      	mov	r4, r0
 80058e6:	2800      	cmp	r0, #0
 80058e8:	d0c2      	beq.n	8005870 <initpressure3115+0x2c>
		printf("MPL3115A2 getpressure failed\n\r");
 80058ea:	480f      	ldr	r0, [pc, #60]	; (8005928 <initpressure3115+0xe4>)
 80058ec:	f01f fab2 	bl	8024e54 <iprintf>
 80058f0:	e7be      	b.n	8005870 <initpressure3115+0x2c>
 80058f2:	4604      	mov	r4, r0
		printf("I2C HAL returned error 1\n\r");
 80058f4:	480d      	ldr	r0, [pc, #52]	; (800592c <initpressure3115+0xe8>)
 80058f6:	f01f faad 	bl	8024e54 <iprintf>
}
 80058fa:	4620      	mov	r0, r4
 80058fc:	b00b      	add	sp, #44	; 0x2c
 80058fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printf("I2C HAL returned error 2b\n\r");
 8005900:	480b      	ldr	r0, [pc, #44]	; (8005930 <initpressure3115+0xec>)
 8005902:	f01f faa7 	bl	8024e54 <iprintf>
		return (result);
 8005906:	e7b3      	b.n	8005870 <initpressure3115+0x2c>
		printf("I2C HAL returned error 3\n\r");
 8005908:	480a      	ldr	r0, [pc, #40]	; (8005934 <initpressure3115+0xf0>)
 800590a:	f01f faa3 	bl	8024e54 <iprintf>
		return (result);
 800590e:	e7af      	b.n	8005870 <initpressure3115+0x2c>
		printf("I2C HAL returned error 5\n\r");
 8005910:	4809      	ldr	r0, [pc, #36]	; (8005938 <initpressure3115+0xf4>)
 8005912:	f01f fa9f 	bl	8024e54 <iprintf>
		return (result);
 8005916:	e7ab      	b.n	8005870 <initpressure3115+0x2c>
		printf("I2C HAL returned error 4\n\r");
 8005918:	4808      	ldr	r0, [pc, #32]	; (800593c <initpressure3115+0xf8>)
 800591a:	f01f fa9b 	bl	8024e54 <iprintf>
		return (result);
 800591e:	e7a7      	b.n	8005870 <initpressure3115+0x2c>
 8005920:	20002534 	.word	0x20002534
 8005924:	08028f9c 	.word	0x08028f9c
 8005928:	0802b8d4 	.word	0x0802b8d4
 800592c:	0802b77c 	.word	0x0802b77c
 8005930:	0802b864 	.word	0x0802b864
 8005934:	0802b880 	.word	0x0802b880
 8005938:	0802b8b8 	.word	0x0802b8b8
 800593c:	0802b89c 	.word	0x0802b89c

08005940 <init_esp>:
////////////////////////////////////////////////////////////////////////////
char espch, esprxdatabuf[96];
static int esprxindex = 0;
static int espoutindex = 0;

void init_esp() {
 8005940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef stat;
	int waitforoutput;

	printf("init_esp32_c3_13\n");
 8005944:	4820      	ldr	r0, [pc, #128]	; (80059c8 <init_esp+0x88>)
 8005946:	f01f fb21 	bl	8024f8c <puts>

	stat = HAL_UART_Receive_DMA(&huart6, &espch, 1);		// set up RX
 800594a:	2201      	movs	r2, #1
 800594c:	491f      	ldr	r1, [pc, #124]	; (80059cc <init_esp+0x8c>)
 800594e:	4820      	ldr	r0, [pc, #128]	; (80059d0 <init_esp+0x90>)
 8005950:	f00d fa8e 	bl	8012e70 <HAL_UART_Receive_DMA>
	if (stat != HAL_OK) {
 8005954:	bb98      	cbnz	r0, 80059be <init_esp+0x7e>
		printf("init_esp: huart6 error\n");
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005956:	2200      	movs	r2, #0
 8005958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800595c:	481d      	ldr	r0, [pc, #116]	; (80059d4 <init_esp+0x94>)
	osDelay(20);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 800595e:	f44f 67fa 	mov.w	r7, #2000	; 0x7d0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// put ESP into reset
 8005962:	f005 fefb 	bl	800b75c <HAL_GPIO_WritePin>
	osDelay(20);
 8005966:	4c1c      	ldr	r4, [pc, #112]	; (80059d8 <init_esp+0x98>)
 8005968:	2014      	movs	r0, #20
 800596a:	4d1c      	ldr	r5, [pc, #112]	; (80059dc <init_esp+0x9c>)
	}
}

void printfromesp() {
	while (espoutindex != esprxindex) {
		putchar(esprxdatabuf[espoutindex++]);
 800596c:	4e1c      	ldr	r6, [pc, #112]	; (80059e0 <init_esp+0xa0>)
		if (espoutindex > sizeof(esprxdatabuf))
			espoutindex = 0;
 800596e:	f04f 0800 	mov.w	r8, #0
	osDelay(20);
 8005972:	f00f fad9 	bl	8014f28 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_SET);		// make sure ESP reset is high (i.e. ESP run)
 8005976:	2201      	movs	r2, #1
 8005978:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800597c:	4815      	ldr	r0, [pc, #84]	; (80059d4 <init_esp+0x94>)
 800597e:	f005 feed 	bl	800b75c <HAL_GPIO_WritePin>
	while (espoutindex != esprxindex) {
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	e006      	b.n	8005994 <init_esp+0x54>
		putchar(esprxdatabuf[espoutindex++]);
 8005986:	5cf0      	ldrb	r0, [r6, r3]
 8005988:	6021      	str	r1, [r4, #0]
 800598a:	f01f fa7b 	bl	8024e84 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	2b60      	cmp	r3, #96	; 0x60
 8005992:	d810      	bhi.n	80059b6 <init_esp+0x76>
	while (espoutindex != esprxindex) {
 8005994:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005996:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005998:	429a      	cmp	r2, r3
 800599a:	d1f4      	bne.n	8005986 <init_esp+0x46>
		osDelay(1);
 800599c:	2001      	movs	r0, #1
 800599e:	f00f fac3 	bl	8014f28 <osDelay>
	for (waitforoutput = 0; waitforoutput < 2000; waitforoutput++) {
 80059a2:	3f01      	subs	r7, #1
 80059a4:	d1ed      	bne.n	8005982 <init_esp+0x42>
	osDelay(200);	// wait for prnt to finish
 80059a6:	20c8      	movs	r0, #200	; 0xc8
 80059a8:	f00f fabe 	bl	8014f28 <osDelay>
	printf("\n");
 80059ac:	200a      	movs	r0, #10
}
 80059ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	printf("\n");
 80059b2:	f01f ba67 	b.w	8024e84 <putchar>
			espoutindex = 0;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f8c4 8000 	str.w	r8, [r4]
 80059bc:	e7ea      	b.n	8005994 <init_esp+0x54>
		printf("init_esp: huart6 error\n");
 80059be:	4809      	ldr	r0, [pc, #36]	; (80059e4 <init_esp+0xa4>)
 80059c0:	f01f fae4 	bl	8024f8c <puts>
 80059c4:	e7c7      	b.n	8005956 <init_esp+0x16>
 80059c6:	bf00      	nop
 80059c8:	0802b8f4 	.word	0x0802b8f4
 80059cc:	200032d0 	.word	0x200032d0
 80059d0:	20002bd4 	.word	0x20002bd4
 80059d4:	40021000 	.word	0x40021000
 80059d8:	200032d4 	.word	0x200032d4
 80059dc:	20003338 	.word	0x20003338
 80059e0:	200032d8 	.word	0x200032d8
 80059e4:	0802b908 	.word	0x0802b908

080059e8 <uart6_rxdone>:
uart6_rxdone() {
 80059e8:	b538      	push	{r3, r4, r5, lr}
	i = esprxindex;
 80059ea:	4c0b      	ldr	r4, [pc, #44]	; (8005a18 <uart6_rxdone+0x30>)
	esprxdatabuf[esprxindex++] = espch;
 80059ec:	4b0b      	ldr	r3, [pc, #44]	; (8005a1c <uart6_rxdone+0x34>)
	i = esprxindex;
 80059ee:	6825      	ldr	r5, [r4, #0]
	esprxdatabuf[esprxindex++] = espch;
 80059f0:	7819      	ldrb	r1, [r3, #0]
 80059f2:	1c6b      	adds	r3, r5, #1
 80059f4:	4a0a      	ldr	r2, [pc, #40]	; (8005a20 <uart6_rxdone+0x38>)
	if (esprxindex >= sizeof(esprxdatabuf))
 80059f6:	2b5f      	cmp	r3, #95	; 0x5f
	esprxdatabuf[esprxindex++] = espch;
 80059f8:	5551      	strb	r1, [r2, r5]
 80059fa:	6023      	str	r3, [r4, #0]
	if (esprxindex >= sizeof(esprxdatabuf))
 80059fc:	d902      	bls.n	8005a04 <uart6_rxdone+0x1c>
		esprxindex = 0;
 80059fe:	2200      	movs	r2, #0
 8005a00:	4613      	mov	r3, r2
 8005a02:	6022      	str	r2, [r4, #0]
	if (esprxindex == espoutindex) {	// overrun
 8005a04:	4a07      	ldr	r2, [pc, #28]	; (8005a24 <uart6_rxdone+0x3c>)
 8005a06:	6812      	ldr	r2, [r2, #0]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d000      	beq.n	8005a0e <uart6_rxdone+0x26>
}
 8005a0c:	bd38      	pop	{r3, r4, r5, pc}
		printf("*** ESP RX overrun......\n");
 8005a0e:	4806      	ldr	r0, [pc, #24]	; (8005a28 <uart6_rxdone+0x40>)
 8005a10:	f01f fabc 	bl	8024f8c <puts>
		esprxindex = i;
 8005a14:	6025      	str	r5, [r4, #0]
}
 8005a16:	bd38      	pop	{r3, r4, r5, pc}
 8005a18:	20003338 	.word	0x20003338
 8005a1c:	200032d0 	.word	0x200032d0
 8005a20:	200032d8 	.word	0x200032d8
 8005a24:	200032d4 	.word	0x200032d4
 8005a28:	0802b920 	.word	0x0802b920

08005a2c <esp_cmd>:
void esp_cmd(unsigned char *buffer) {
 8005a2c:	b510      	push	{r4, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	4601      	mov	r1, r0
	strcpy(txbuf, buffer);
 8005a32:	ac02      	add	r4, sp, #8
 8005a34:	4620      	mov	r0, r4
 8005a36:	f01f fc88 	bl	802534a <stpcpy>
	strcat(txbuf, "\r\n");
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	; (8005a70 <esp_cmd+0x44>)
 8005a3c:	8819      	ldrh	r1, [r3, #0]
 8005a3e:	789a      	ldrb	r2, [r3, #2]
 8005a40:	1b03      	subs	r3, r0, r4
 8005a42:	8001      	strh	r1, [r0, #0]
	printf("Sending ESP: %s\n", txbuf);
 8005a44:	4621      	mov	r1, r4
	len = strlen(txbuf);
 8005a46:	3302      	adds	r3, #2
	strcat(txbuf, "\r\n");
 8005a48:	7082      	strb	r2, [r0, #2]
	printf("Sending ESP: %s\n", txbuf);
 8005a4a:	480a      	ldr	r0, [pc, #40]	; (8005a74 <esp_cmd+0x48>)
	len = strlen(txbuf);
 8005a4c:	9301      	str	r3, [sp, #4]
	printf("Sending ESP: %s\n", txbuf);
 8005a4e:	f01f fa01 	bl	8024e54 <iprintf>
	stat = HAL_UART_Transmit_DMA(&huart6, &txbuf[0], len);	// send the command
 8005a52:	9a01      	ldr	r2, [sp, #4]
 8005a54:	4621      	mov	r1, r4
 8005a56:	4808      	ldr	r0, [pc, #32]	; (8005a78 <esp_cmd+0x4c>)
 8005a58:	b292      	uxth	r2, r2
 8005a5a:	f00b ffc9 	bl	80119f0 <HAL_UART_Transmit_DMA>
	if (stat != HAL_OK) {
 8005a5e:	b908      	cbnz	r0, 8005a64 <esp_cmd+0x38>
}
 8005a60:	b006      	add	sp, #24
 8005a62:	bd10      	pop	{r4, pc}
		printf("esp_cmd: Tx uart6 error 0x%0x\n", stat);
 8005a64:	4601      	mov	r1, r0
 8005a66:	4805      	ldr	r0, [pc, #20]	; (8005a7c <esp_cmd+0x50>)
 8005a68:	f01f f9f4 	bl	8024e54 <iprintf>
}
 8005a6c:	b006      	add	sp, #24
 8005a6e:	bd10      	pop	{r4, pc}
 8005a70:	08029b88 	.word	0x08029b88
 8005a74:	0802b93c 	.word	0x0802b93c
 8005a78:	20002bd4 	.word	0x20002bd4
 8005a7c:	0802b950 	.word	0x0802b950

08005a80 <test_esp>:
void test_esp() {
 8005a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	printf("Testing if ESP responds to command:-\n");
 8005a84:	4813      	ldr	r0, [pc, #76]	; (8005ad4 <test_esp+0x54>)
	esp_cmd(getstatus);	// send the command
 8005a86:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
	printf("Testing if ESP responds to command:-\n");
 8005a8a:	f01f fa7f 	bl	8024f8c <puts>
	osDelay(200);
 8005a8e:	4c12      	ldr	r4, [pc, #72]	; (8005ad8 <test_esp+0x58>)
 8005a90:	20c8      	movs	r0, #200	; 0xc8
 8005a92:	4d12      	ldr	r5, [pc, #72]	; (8005adc <test_esp+0x5c>)
		putchar(esprxdatabuf[espoutindex++]);
 8005a94:	4e12      	ldr	r6, [pc, #72]	; (8005ae0 <test_esp+0x60>)
			espoutindex = 0;
 8005a96:	f04f 0800 	mov.w	r8, #0
	osDelay(200);
 8005a9a:	f00f fa45 	bl	8014f28 <osDelay>
	esp_cmd(getstatus);	// send the command
 8005a9e:	4811      	ldr	r0, [pc, #68]	; (8005ae4 <test_esp+0x64>)
 8005aa0:	f7ff ffc4 	bl	8005a2c <esp_cmd>
	while (espoutindex != esprxindex) {
 8005aa4:	6823      	ldr	r3, [r4, #0]
 8005aa6:	e006      	b.n	8005ab6 <test_esp+0x36>
		putchar(esprxdatabuf[espoutindex++]);
 8005aa8:	5cf0      	ldrb	r0, [r6, r3]
 8005aaa:	6021      	str	r1, [r4, #0]
 8005aac:	f01f f9ea 	bl	8024e84 <putchar>
		if (espoutindex > sizeof(esprxdatabuf))
 8005ab0:	6823      	ldr	r3, [r4, #0]
 8005ab2:	2b60      	cmp	r3, #96	; 0x60
 8005ab4:	d80a      	bhi.n	8005acc <test_esp+0x4c>
	while (espoutindex != esprxindex) {
 8005ab6:	682a      	ldr	r2, [r5, #0]
		putchar(esprxdatabuf[espoutindex++]);
 8005ab8:	1c59      	adds	r1, r3, #1
	while (espoutindex != esprxindex) {
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d1f4      	bne.n	8005aa8 <test_esp+0x28>
		osDelay(1);
 8005abe:	2001      	movs	r0, #1
 8005ac0:	f00f fa32 	bl	8014f28 <osDelay>
	for (waitforoutput = 0; waitforoutput < 1000; waitforoutput++) {
 8005ac4:	3f01      	subs	r7, #1
 8005ac6:	d1ed      	bne.n	8005aa4 <test_esp+0x24>
}
 8005ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			espoutindex = 0;
 8005acc:	2300      	movs	r3, #0
 8005ace:	f8c4 8000 	str.w	r8, [r4]
 8005ad2:	e7f0      	b.n	8005ab6 <test_esp+0x36>
 8005ad4:	0802b970 	.word	0x0802b970
 8005ad8:	200032d4 	.word	0x200032d4
 8005adc:	20003338 	.word	0x20003338
 8005ae0:	200032d8 	.word	0x200032d8
 8005ae4:	2000024c 	.word	0x2000024c

08005ae8 <init_ds2485>:
//  DS2485 1 wire bus controller
////////////////////////////////////////////////////////////////////////////

extern I2C_HandleTypeDef hi2c1;

void init_ds2485(void) {
 8005ae8:	b510      	push	{r4, lr}
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("init_ds2485\n");
 8005aea:	4818      	ldr	r0, [pc, #96]	; (8005b4c <init_ds2485+0x64>)
void init_ds2485(void) {
 8005aec:	b086      	sub	sp, #24
	printf("init_ds2485\n");
 8005aee:	f01f fa4d 	bl	8024f8c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x01;		// cmd len
 8005af2:	2201      	movs	r2, #1
	data[2] = 0x01;		// for man id
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8005af4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8005af8:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x01;		// cmd len
 8005afa:	f88d 2009 	strb.w	r2, [sp, #9]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8005afe:	2303      	movs	r3, #3
 8005b00:	9000      	str	r0, [sp, #0]
	data[0] = 0xAA;		// Read status cmd
 8005b02:	f88d 1008 	strb.w	r1, [sp, #8]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8005b06:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x01;		// for man id
 8005b08:	f88d 200a 	strb.w	r2, [sp, #10]
	if ((stat = HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000)) != HAL_OK) {	// DS2485
 8005b0c:	aa02      	add	r2, sp, #8
 8005b0e:	4810      	ldr	r0, [pc, #64]	; (8005b50 <init_ds2485+0x68>)
 8005b10:	f006 f92a 	bl	800bd68 <HAL_I2C_Master_Transmit>
 8005b14:	b9a8      	cbnz	r0, 8005b42 <init_ds2485+0x5a>
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
	}

	osDelay(10);
 8005b16:	200a      	movs	r0, #10
	}

//	HAL_StatusTypeDef HAL_I2C_Mem_Read	(I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t * pData, uint16_t	Size, uint32_t Timeout)

	for (i = 0; i < 1; i++) {
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005b18:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
	osDelay(10);
 8005b1c:	f00f fa04 	bl	8014f28 <osDelay>
		data[i] = 0xA5 + i;
 8005b20:	20a5      	movs	r0, #165	; 0xa5
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005b22:	2181      	movs	r1, #129	; 0x81
 8005b24:	2304      	movs	r3, #4
		data[i] = 0xA5 + i;
 8005b26:	f88d 0008 	strb.w	r0, [sp, #8]
		stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], 4, 1000);	// read ack + len + 1 bytes data
 8005b2a:	aa02      	add	r2, sp, #8
 8005b2c:	4808      	ldr	r0, [pc, #32]	; (8005b50 <init_ds2485+0x68>)
 8005b2e:	9400      	str	r4, [sp, #0]
 8005b30:	f006 f9e2 	bl	800bef8 <HAL_I2C_Master_Receive>
		if (stat != HAL_OK) {
 8005b34:	4601      	mov	r1, r0
 8005b36:	b110      	cbz	r0, 8005b3e <init_ds2485+0x56>
			printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8005b38:	4806      	ldr	r0, [pc, #24]	; (8005b54 <init_ds2485+0x6c>)
 8005b3a:	f01f f98b 	bl	8024e54 <iprintf>
	printf("init_ds2485: read status manid[0] = 0x%02x\n", data[0]);
	printf("init_ds2485: read status manid[1] = 0x%02x\n", data[1]);
	printf("init_ds2485: read status manid[2] = 0x%02x\n", data[2]);
	printf("init_ds2485: read status manid[3] = 0x%02x\n", data[3]);
#endif
}
 8005b3e:	b006      	add	sp, #24
 8005b40:	bd10      	pop	{r4, pc}
		printf("I2C ds2485 HAL returned error %d\n\r", stat);
 8005b42:	4601      	mov	r1, r0
 8005b44:	4803      	ldr	r0, [pc, #12]	; (8005b54 <init_ds2485+0x6c>)
 8005b46:	f01f f985 	bl	8024e54 <iprintf>
 8005b4a:	e7e4      	b.n	8005b16 <init_ds2485+0x2e>
 8005b4c:	0802b998 	.word	0x0802b998
 8005b50:	20002534 	.word	0x20002534
 8005b54:	0802b9a4 	.word	0x0802b9a4

08005b58 <readp_ds2485>:

// read protection status
void readp_ds2485(int b) {
 8005b58:	b570      	push	{r4, r5, r6, lr}
 8005b5a:	4604      	mov	r4, r0
 8005b5c:	b086      	sub	sp, #24
	int i;
	HAL_StatusTypeDef stat;

//HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)

	printf("read protection ds2485\n");
 8005b5e:	4821      	ldr	r0, [pc, #132]	; (8005be4 <readp_ds2485+0x8c>)
 8005b60:	f01f fa14 	bl	8024f8c <puts>

	data[0] = 0xAA;		// Read status cmd
	data[1] = 0x1;		// cmd len
 8005b64:	2201      	movs	r2, #1
	data[2] = 0x00;		// cmd: for protection status
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005b66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
	data[0] = 0xAA;		// Read status cmd
 8005b6a:	21aa      	movs	r1, #170	; 0xaa
	data[1] = 0x1;		// cmd len
 8005b6c:	f88d 200d 	strb.w	r2, [sp, #13]
	data[2] = 0x00;		// cmd: for protection status
 8005b70:	2200      	movs	r2, #0
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2303      	movs	r3, #3
	data[0] = 0xAA;		// Read status cmd
 8005b76:	f88d 100c 	strb.w	r1, [sp, #12]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005b7a:	2180      	movs	r1, #128	; 0x80
	data[2] = 0x00;		// cmd: for protection status
 8005b7c:	f88d 200e 	strb.w	r2, [sp, #14]
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x40 << 1, &data[0], 3, 1000) != HAL_OK) {	// DS2485
 8005b80:	aa03      	add	r2, sp, #12
 8005b82:	4819      	ldr	r0, [pc, #100]	; (8005be8 <readp_ds2485+0x90>)
 8005b84:	f006 f8f0 	bl	800bd68 <HAL_I2C_Master_Transmit>
 8005b88:	bb18      	cbnz	r0, 8005bd2 <readp_ds2485+0x7a>
		printf("I2C ds2485 tx returned error 1\n\r");
	}

	osDelay(30);
 8005b8a:	201e      	movs	r0, #30
// HAL_StatusTypeDef HAL_I2C_Master_Receive (I2C_HandleTypeDef * hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
	for (i = 0; i < 1; i++) {
		data[i] = 0x5A + i;
	}

	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005b8c:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
	osDelay(30);
 8005b90:	f00f f9ca 	bl	8014f28 <osDelay>
		data[i] = 0x5A + i;
 8005b94:	205a      	movs	r0, #90	; 0x5a
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005b96:	b2a3      	uxth	r3, r4
 8005b98:	aa03      	add	r2, sp, #12
		data[i] = 0x5A + i;
 8005b9a:	f88d 000c 	strb.w	r0, [sp, #12]
	stat = HAL_I2C_Master_Receive(&hi2c1, ((0x40 << 1) | 1), &data[0], b, 1000);	// read ack + len + 6 bytes data
 8005b9e:	2181      	movs	r1, #129	; 0x81
 8005ba0:	4811      	ldr	r0, [pc, #68]	; (8005be8 <readp_ds2485+0x90>)
 8005ba2:	9500      	str	r5, [sp, #0]
 8005ba4:	f006 f9a8 	bl	800bef8 <HAL_I2C_Master_Receive>
//		stat = HAL_I2C_Mem_Read(&hi2c1, ((0x40 << 1) | 1), 0x55, 1, &data[i], b, 1000);	// read 7 byte
	if (stat != HAL_OK) {
 8005ba8:	b9b8      	cbnz	r0, 8005bda <readp_ds2485+0x82>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
	}

	printf("init_ds2485: read status protection= ");
 8005baa:	4810      	ldr	r0, [pc, #64]	; (8005bec <readp_ds2485+0x94>)
 8005bac:	f10d 040b 	add.w	r4, sp, #11
 8005bb0:	f10d 0613 	add.w	r6, sp, #19
	for (i = 0; i < 8; i++) {
		printf("0x%02x ", data[i]);
 8005bb4:	4d0e      	ldr	r5, [pc, #56]	; (8005bf0 <readp_ds2485+0x98>)
	printf("init_ds2485: read status protection= ");
 8005bb6:	f01f f94d 	bl	8024e54 <iprintf>
		printf("0x%02x ", data[i]);
 8005bba:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8005bbe:	4628      	mov	r0, r5
 8005bc0:	f01f f948 	bl	8024e54 <iprintf>
	for (i = 0; i < 8; i++) {
 8005bc4:	42b4      	cmp	r4, r6
 8005bc6:	d1f8      	bne.n	8005bba <readp_ds2485+0x62>
	}
	printf("\n");
 8005bc8:	200a      	movs	r0, #10
 8005bca:	f01f f95b 	bl	8024e84 <putchar>
}
 8005bce:	b006      	add	sp, #24
 8005bd0:	bd70      	pop	{r4, r5, r6, pc}
		printf("I2C ds2485 tx returned error 1\n\r");
 8005bd2:	4808      	ldr	r0, [pc, #32]	; (8005bf4 <readp_ds2485+0x9c>)
 8005bd4:	f01f f93e 	bl	8024e54 <iprintf>
 8005bd8:	e7d7      	b.n	8005b8a <readp_ds2485+0x32>
		printf("I2C ds2485 rx  returned error %d\n\r", stat);
 8005bda:	4601      	mov	r1, r0
 8005bdc:	4806      	ldr	r0, [pc, #24]	; (8005bf8 <readp_ds2485+0xa0>)
 8005bde:	f01f f939 	bl	8024e54 <iprintf>
 8005be2:	e7e2      	b.n	8005baa <readp_ds2485+0x52>
 8005be4:	0802b9c8 	.word	0x0802b9c8
 8005be8:	20002534 	.word	0x20002534
 8005bec:	0802ba28 	.word	0x0802ba28
 8005bf0:	0802ba50 	.word	0x0802ba50
 8005bf4:	0802b9e0 	.word	0x0802b9e0
 8005bf8:	0802ba04 	.word	0x0802ba04

08005bfc <initsplat>:
//////////////////////////////////////////////
//
// Initialise the splat board
//
//////////////////////////////////////////////
void initsplat(void) {
 8005bfc:	b530      	push	{r4, r5, lr}
 8005bfe:	b083      	sub	sp, #12

	cycleleds();
	osDelay(500);
	printf("Initsplat: LED cycle\n");

	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8005c00:	4c44      	ldr	r4, [pc, #272]	; (8005d14 <initsplat+0x118>)
	cycleleds();
 8005c02:	f7ff fbe7 	bl	80053d4 <cycleleds>
	osDelay(500);
 8005c06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c0a:	f00f f98d 	bl	8014f28 <osDelay>
	printf("Initsplat: LED cycle\n");
 8005c0e:	4842      	ldr	r0, [pc, #264]	; (8005d18 <initsplat+0x11c>)
 8005c10:	f01f f9bc 	bl	8024f8c <puts>
	if (circuitboardpcb == SPLATBOARD1) {		// only SPLAT1 has Muxes
 8005c14:	6823      	ldr	r3, [r4, #0]
 8005c16:	2b0b      	cmp	r3, #11
 8005c18:	d062      	beq.n	8005ce0 <initsplat+0xe4>
		printf("Initsplat: Dual Mux\n\r");
		initdualmux();
		osDelay(500);
	}
	printf("Initsplat: Programmable Gain Amp\n");
 8005c1a:	4840      	ldr	r0, [pc, #256]	; (8005d1c <initsplat+0x120>)
 8005c1c:	f01f f9b6 	bl	8024f8c <puts>
	initpga();

	osDelay(500);
	printf("initsplat: Pressure sensor\n\r");
	psensor = PNONE;
 8005c20:	4d3f      	ldr	r5, [pc, #252]	; (8005d20 <initsplat+0x124>)
	initpga();
 8005c22:	f7ff fc89 	bl	8005538 <initpga>
	osDelay(500);
 8005c26:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c2a:	f00f f97d 	bl	8014f28 <osDelay>
	printf("initsplat: Pressure sensor\n\r");
 8005c2e:	483d      	ldr	r0, [pc, #244]	; (8005d24 <initsplat+0x128>)
 8005c30:	f01f f910 	bl	8024e54 <iprintf>
	psensor = PNONE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	602b      	str	r3, [r5, #0]
	if (initpressure3115() == HAL_OK) {	// non zero result means MPL3115 nogood
 8005c38:	f7ff fe04 	bl	8005844 <initpressure3115>
 8005c3c:	b9d8      	cbnz	r0, 8005c76 <initsplat+0x7a>
		printf("MPL3115A2 pressure sensor present\n\r");
 8005c3e:	483a      	ldr	r0, [pc, #232]	; (8005d28 <initsplat+0x12c>)
 8005c40:	f01f f908 	bl	8024e54 <iprintf>
		psensor = MPL3115A2;
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005c44:	4a39      	ldr	r2, [pc, #228]	; (8005d2c <initsplat+0x130>)
		psensor = MPL3115A2;
 8005c46:	2102      	movs	r1, #2
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005c48:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
		psensor = MPL3115A2;
 8005c4c:	6029      	str	r1, [r5, #0]
		statuspkt.bconf |= (MPL3115A2 << 3);
 8005c4e:	f043 0310 	orr.w	r3, r3, #16
 8005c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
			statuspkt.bconf |= (MPL115A2 << 3);
		} else {
			printf("NO pressure sensor present\n\r");
		}
	}
	osDelay(500);
 8005c56:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c5a:	f00f f965 	bl	8014f28 <osDelay>

	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	2b16      	cmp	r3, #22
 8005c62:	d01e      	beq.n	8005ca2 <initsplat+0xa6>
		osDelay(500);
		test_esp();
		osDelay(200);
	}

	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005c64:	2200      	movs	r2, #0
 8005c66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c6a:	4831      	ldr	r0, [pc, #196]	; (8005d30 <initsplat+0x134>)
}
 8005c6c:	b003      	add	sp, #12
 8005c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_15, GPIO_PIN_RESET);		// inhibit the ESP - put it into reset
 8005c72:	f005 bd73 	b.w	800b75c <HAL_GPIO_WritePin>
		if (initpressure115() == HAL_OK) {
 8005c76:	f7ff fcb7 	bl	80055e8 <initpressure115>
 8005c7a:	bb68      	cbnz	r0, 8005cd8 <initsplat+0xdc>
			printf("MPL115A2 pressure sensor present\n\r");
 8005c7c:	482d      	ldr	r0, [pc, #180]	; (8005d34 <initsplat+0x138>)
 8005c7e:	f01f f8e9 	bl	8024e54 <iprintf>
			statuspkt.bconf |= (MPL115A2 << 3);
 8005c82:	4a2a      	ldr	r2, [pc, #168]	; (8005d2c <initsplat+0x130>)
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005c84:	2101      	movs	r1, #1
	osDelay(500);
 8005c86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			statuspkt.bconf |= (MPL115A2 << 3);
 8005c8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
			psensor = MPL115A2;		// assume MPL115 fitted instead
 8005c8e:	6029      	str	r1, [r5, #0]
			statuspkt.bconf |= (MPL115A2 << 3);
 8005c90:	f043 0308 	orr.w	r3, r3, #8
 8005c94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	osDelay(500);
 8005c98:	f00f f946 	bl	8014f28 <osDelay>
	if (circuitboardpcb == LIGHTNINGBOARD2) {
 8005c9c:	6823      	ldr	r3, [r4, #0]
 8005c9e:	2b16      	cmp	r3, #22
 8005ca0:	d1e0      	bne.n	8005c64 <initsplat+0x68>
		huart6.Init.BaudRate = 115200;
 8005ca2:	4825      	ldr	r0, [pc, #148]	; (8005d38 <initsplat+0x13c>)
 8005ca4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8005ca8:	6043      	str	r3, [r0, #4]
		if (HAL_UART_Init(&huart6) != HAL_OK)		// UART6 is ESP, was GPS on Splat1
 8005caa:	f00c fef1 	bl	8012a90 <HAL_UART_Init>
 8005cae:	bb68      	cbnz	r0, 8005d0c <initsplat+0x110>
	init_ds2485();
 8005cb0:	f7ff ff1a 	bl	8005ae8 <init_ds2485>
	osDelay(80);
 8005cb4:	2050      	movs	r0, #80	; 0x50
 8005cb6:	f00f f937 	bl	8014f28 <osDelay>
	readp_ds2485(8);
 8005cba:	2008      	movs	r0, #8
 8005cbc:	f7ff ff4c 	bl	8005b58 <readp_ds2485>
		init_esp();
 8005cc0:	f7ff fe3e 	bl	8005940 <init_esp>
		osDelay(500);
 8005cc4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cc8:	f00f f92e 	bl	8014f28 <osDelay>
		test_esp();
 8005ccc:	f7ff fed8 	bl	8005a80 <test_esp>
		osDelay(200);
 8005cd0:	20c8      	movs	r0, #200	; 0xc8
 8005cd2:	f00f f929 	bl	8014f28 <osDelay>
 8005cd6:	e7c5      	b.n	8005c64 <initsplat+0x68>
			printf("NO pressure sensor present\n\r");
 8005cd8:	4818      	ldr	r0, [pc, #96]	; (8005d3c <initsplat+0x140>)
 8005cda:	f01f f8bb 	bl	8024e54 <iprintf>
 8005cde:	e7ba      	b.n	8005c56 <initsplat+0x5a>
		printf("Initsplat: Dual Mux\n\r");
 8005ce0:	4817      	ldr	r0, [pc, #92]	; (8005d40 <initsplat+0x144>)
 8005ce2:	f01f f8b7 	bl	8024e54 <iprintf>
	if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {	// RF dual MUX
 8005ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005cea:	2301      	movs	r3, #1
 8005cec:	4a15      	ldr	r2, [pc, #84]	; (8005d44 <initsplat+0x148>)
 8005cee:	9000      	str	r0, [sp, #0]
 8005cf0:	2188      	movs	r1, #136	; 0x88
 8005cf2:	4815      	ldr	r0, [pc, #84]	; (8005d48 <initsplat+0x14c>)
 8005cf4:	f006 f838 	bl	800bd68 <HAL_I2C_Master_Transmit>
 8005cf8:	b920      	cbnz	r0, 8005d04 <initsplat+0x108>
		osDelay(500);
 8005cfa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005cfe:	f00f f913 	bl	8014f28 <osDelay>
 8005d02:	e78a      	b.n	8005c1a <initsplat+0x1e>
		printf("I2C HAL returned error 1\n\r");
 8005d04:	4811      	ldr	r0, [pc, #68]	; (8005d4c <initsplat+0x150>)
 8005d06:	f01f f8a5 	bl	8024e54 <iprintf>
 8005d0a:	e7f6      	b.n	8005cfa <initsplat+0xfe>
			Error_Handler();
 8005d0c:	f7fd fd52 	bl	80037b4 <Error_Handler>
 8005d10:	e7ce      	b.n	8005cb0 <initsplat+0xb4>
 8005d12:	bf00      	nop
 8005d14:	200020d4 	.word	0x200020d4
 8005d18:	0802ba58 	.word	0x0802ba58
 8005d1c:	0802ba88 	.word	0x0802ba88
 8005d20:	2000334c 	.word	0x2000334c
 8005d24:	0802baac 	.word	0x0802baac
 8005d28:	0802bacc 	.word	0x0802bacc
 8005d2c:	20002f6c 	.word	0x20002f6c
 8005d30:	40021000 	.word	0x40021000
 8005d34:	0802baf0 	.word	0x0802baf0
 8005d38:	20002bd4 	.word	0x20002bd4
 8005d3c:	0802bb14 	.word	0x0802bb14
 8005d40:	0802ba70 	.word	0x0802ba70
 8005d44:	20000258 	.word	0x20000258
 8005d48:	20002534 	.word	0x20002534
 8005d4c:	0802b77c 	.word	0x0802b77c

08005d50 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8005d50:	4b1a      	ldr	r3, [pc, #104]	; (8005dbc <HAL_MspInit+0x6c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d52:	2200      	movs	r2, #0
 8005d54:	210f      	movs	r1, #15
 8005d56:	f06f 0001 	mvn.w	r0, #1
{
 8005d5a:	b510      	push	{r4, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d5c:	6c1c      	ldr	r4, [r3, #64]	; 0x40
{
 8005d5e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d60:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8005d64:	641c      	str	r4, [r3, #64]	; 0x40
 8005d66:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8005d68:	f004 5480 	and.w	r4, r4, #268435456	; 0x10000000
 8005d6c:	9400      	str	r4, [sp, #0]
 8005d6e:	9c00      	ldr	r4, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d70:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 8005d72:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8005d76:	645c      	str	r4, [r3, #68]	; 0x44
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d7e:	9301      	str	r3, [sp, #4]
 8005d80:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8005d82:	f002 fbc1 	bl	8008508 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8005d86:	2200      	movs	r2, #0
 8005d88:	2106      	movs	r1, #6
 8005d8a:	2005      	movs	r0, #5
 8005d8c:	f002 fbbc 	bl	8008508 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005d90:	2005      	movs	r0, #5
 8005d92:	f002 fc03 	bl	800859c <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 6, 0);
 8005d96:	2200      	movs	r2, #0
 8005d98:	2106      	movs	r1, #6
 8005d9a:	2005      	movs	r0, #5
 8005d9c:	f002 fbb4 	bl	8008508 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8005da0:	2005      	movs	r0, #5
 8005da2:	f002 fbfb 	bl	800859c <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 6, 0);
 8005da6:	2051      	movs	r0, #81	; 0x51
 8005da8:	2200      	movs	r2, #0
 8005daa:	2106      	movs	r1, #6
 8005dac:	f002 fbac 	bl	8008508 <HAL_NVIC_SetPriority>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005db0:	2051      	movs	r0, #81	; 0x51

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005db2:	b002      	add	sp, #8
 8005db4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8005db8:	f002 bbf0 	b.w	800859c <HAL_NVIC_EnableIRQ>
 8005dbc:	40023800 	.word	0x40023800

08005dc0 <HAL_ADC_MspInit>:
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8005dc0:	4a49      	ldr	r2, [pc, #292]	; (8005ee8 <HAL_ADC_MspInit+0x128>)
 8005dc2:	6803      	ldr	r3, [r0, #0]
{
 8005dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hadc->Instance==ADC1)
 8005dc6:	4293      	cmp	r3, r2
{
 8005dc8:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dca:	f04f 0400 	mov.w	r4, #0
 8005dce:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8005dd2:	9409      	str	r4, [sp, #36]	; 0x24
 8005dd4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  if(hadc->Instance==ADC1)
 8005dd8:	d007      	beq.n	8005dea <HAL_ADC_MspInit+0x2a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8005dda:	4a44      	ldr	r2, [pc, #272]	; (8005eec <HAL_ADC_MspInit+0x12c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d045      	beq.n	8005e6c <HAL_ADC_MspInit+0xac>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
  else if(hadc->Instance==ADC3)
 8005de0:	4a43      	ldr	r2, [pc, #268]	; (8005ef0 <HAL_ADC_MspInit+0x130>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d05f      	beq.n	8005ea6 <HAL_ADC_MspInit+0xe6>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8005de6:	b00d      	add	sp, #52	; 0x34
 8005de8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005dea:	4b42      	ldr	r3, [pc, #264]	; (8005ef4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005dec:	2703      	movs	r7, #3
 8005dee:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df0:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005df2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df4:	4840      	ldr	r0, [pc, #256]	; (8005ef8 <HAL_ADC_MspInit+0x138>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005df6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    hdma_adc1.Instance = DMA2_Stream4;
 8005dfa:	4e40      	ldr	r6, [pc, #256]	; (8005efc <HAL_ADC_MspInit+0x13c>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005dfc:	645a      	str	r2, [r3, #68]	; 0x44
 8005dfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e00:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005e04:	9201      	str	r2, [sp, #4]
 8005e06:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e0a:	f042 0201 	orr.w	r2, r2, #1
 8005e0e:	631a      	str	r2, [r3, #48]	; 0x30
 8005e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e18:	2308      	movs	r3, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e1a:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e1c:	e9cd 3707 	strd	r3, r7, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e20:	f005 f9f0 	bl	800b204 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream4;
 8005e24:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <HAL_ADC_MspInit+0x140>)
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8005e26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e2a:	4630      	mov	r0, r6
    hdma_adc1.Instance = DMA2_Stream4;
 8005e2c:	6033      	str	r3, [r6, #0]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_adc1.Init.MemBurst = DMA_MBURST_INC4;
 8005e32:	62f2      	str	r2, [r6, #44]	; 0x2c
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e38:	6133      	str	r3, [r6, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3e:	60f4      	str	r4, [r6, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005e40:	6173      	str	r3, [r6, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e42:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005e46:	62b7      	str	r7, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005e48:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e4a:	e9c6 2306 	strd	r2, r3, [r6, #24]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005e4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005e52:	2304      	movs	r3, #4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e54:	e9c6 4401 	strd	r4, r4, [r6, #4]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005e58:	e9c6 2308 	strd	r2, r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e5c:	f002 fe66 	bl	8008b2c <HAL_DMA_Init>
 8005e60:	2800      	cmp	r0, #0
 8005e62:	d13d      	bne.n	8005ee0 <HAL_ADC_MspInit+0x120>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005e64:	63ae      	str	r6, [r5, #56]	; 0x38
 8005e66:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8005e68:	b00d      	add	sp, #52	; 0x34
 8005e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e6c:	4b21      	ldr	r3, [pc, #132]	; (8005ef4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e6e:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e70:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e72:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC2_CLK_ENABLE();
 8005e74:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e7a:	645a      	str	r2, [r3, #68]	; 0x44
 8005e7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e7e:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005e82:	9203      	str	r2, [sp, #12]
 8005e84:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e88:	f042 0201 	orr.w	r2, r2, #1
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8005e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005e90:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e92:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e96:	4818      	ldr	r0, [pc, #96]	; (8005ef8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e98:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e9a:	9304      	str	r3, [sp, #16]
 8005e9c:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e9e:	f005 f9b1 	bl	800b204 <HAL_GPIO_Init>
}
 8005ea2:	b00d      	add	sp, #52	; 0x34
 8005ea4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005ea6:	4b13      	ldr	r3, [pc, #76]	; (8005ef4 <HAL_ADC_MspInit+0x134>)
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005ea8:	2008      	movs	r0, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005eaa:	2403      	movs	r4, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005eac:	a907      	add	r1, sp, #28
    __HAL_RCC_ADC3_CLK_ENABLE();
 8005eae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005eb4:	645a      	str	r2, [r3, #68]	; 0x44
 8005eb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eb8:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005ebc:	9205      	str	r2, [sp, #20]
 8005ebe:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ec0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ec2:	f042 0201 	orr.w	r2, r2, #1
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005eca:	9007      	str	r0, [sp, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ecc:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed0:	4809      	ldr	r0, [pc, #36]	; (8005ef8 <HAL_ADC_MspInit+0x138>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005ed2:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ed4:	9306      	str	r3, [sp, #24]
 8005ed6:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ed8:	f005 f994 	bl	800b204 <HAL_GPIO_Init>
}
 8005edc:	b00d      	add	sp, #52	; 0x34
 8005ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8005ee0:	f7fd fc68 	bl	80037b4 <Error_Handler>
 8005ee4:	e7be      	b.n	8005e64 <HAL_ADC_MspInit+0xa4>
 8005ee6:	bf00      	nop
 8005ee8:	40012000 	.word	0x40012000
 8005eec:	40012100 	.word	0x40012100
 8005ef0:	40012200 	.word	0x40012200
 8005ef4:	40023800 	.word	0x40023800
 8005ef8:	40020000 	.word	0x40020000
 8005efc:	20002234 	.word	0x20002234
 8005f00:	40026470 	.word	0x40026470

08005f04 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8005f04:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <HAL_CRC_MspInit+0x28>)
 8005f06:	6802      	ldr	r2, [r0, #0]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d000      	beq.n	8005f0e <HAL_CRC_MspInit+0xa>
 8005f0c:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8005f0e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8005f12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
{
 8005f16:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
 8005f18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f1c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f24:	9301      	str	r3, [sp, #4]
 8005f26:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8005f28:	b002      	add	sp, #8
 8005f2a:	4770      	bx	lr
 8005f2c:	40023000 	.word	0x40023000

08005f30 <HAL_DAC_MspInit>:
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8005f30:	4b2b      	ldr	r3, [pc, #172]	; (8005fe0 <HAL_DAC_MspInit+0xb0>)
 8005f32:	6802      	ldr	r2, [r0, #0]
{
 8005f34:	b570      	push	{r4, r5, r6, lr}
  if(hdac->Instance==DAC)
 8005f36:	429a      	cmp	r2, r3
{
 8005f38:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f3a:	f04f 0400 	mov.w	r4, #0
 8005f3e:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005f42:	9405      	str	r4, [sp, #20]
 8005f44:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(hdac->Instance==DAC)
 8005f48:	d001      	beq.n	8005f4e <HAL_DAC_MspInit+0x1e>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005f4a:	b008      	add	sp, #32
 8005f4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8005f4e:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005f52:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f54:	a903      	add	r1, sp, #12
    hdma_dac1.Instance = DMA1_Stream5;
 8005f56:	4e23      	ldr	r6, [pc, #140]	; (8005fe4 <HAL_DAC_MspInit+0xb4>)
    __HAL_RCC_DAC_CLK_ENABLE();
 8005f58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f5a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8005f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f62:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f6c:	f042 0201 	orr.w	r2, r2, #1
 8005f70:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005f72:	2210      	movs	r2, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f76:	f003 0301 	and.w	r3, r3, #1
 8005f7a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f7c:	2303      	movs	r3, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f7e:	9802      	ldr	r0, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f80:	4819      	ldr	r0, [pc, #100]	; (8005fe8 <HAL_DAC_MspInit+0xb8>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f82:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f86:	f005 f93d 	bl	800b204 <HAL_GPIO_Init>
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005f8a:	f04f 6360 	mov.w	r3, #234881024	; 0xe000000
    hdma_dac1.Instance = DMA1_Stream5;
 8005f8e:	4a17      	ldr	r2, [pc, #92]	; (8005fec <HAL_DAC_MspInit+0xbc>)
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005f90:	4630      	mov	r0, r6
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8005f92:	6073      	str	r3, [r6, #4]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005f94:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_dac1.Instance = DMA1_Stream5;
 8005f98:	6032      	str	r2, [r6, #0]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005f9a:	2240      	movs	r2, #64	; 0x40
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8005f9c:	6133      	str	r3, [r6, #16]
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005f9e:	2302      	movs	r3, #2
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005fa0:	60b2      	str	r2, [r6, #8]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005fa2:	2204      	movs	r2, #4
    hdma_dac1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_3QUARTERSFULL;
 8005fa4:	62b3      	str	r3, [r6, #40]	; 0x28
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005fa6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005faa:	60f4      	str	r4, [r6, #12]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005fac:	6174      	str	r4, [r6, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005fae:	61b4      	str	r4, [r6, #24]
    hdma_dac1.Init.Mode = DMA_NORMAL;
 8005fb0:	61f4      	str	r4, [r6, #28]
    hdma_dac1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8005fb2:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_dac1.Init.MemBurst = DMA_MBURST_INC4;
 8005fb4:	62f3      	str	r3, [r6, #44]	; 0x2c
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005fb6:	e9c6 4208 	strd	r4, r2, [r6, #32]
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8005fba:	f002 fdb7 	bl	8008b2c <HAL_DMA_Init>
 8005fbe:	b958      	cbnz	r0, 8005fd8 <HAL_DAC_MspInit+0xa8>
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2106      	movs	r1, #6
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005fc4:	60ae      	str	r6, [r5, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005fc6:	2036      	movs	r0, #54	; 0x36
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8005fc8:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 8005fca:	f002 fa9d 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005fce:	2036      	movs	r0, #54	; 0x36
 8005fd0:	f002 fae4 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 8005fd4:	b008      	add	sp, #32
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005fd8:	f7fd fbec 	bl	80037b4 <Error_Handler>
 8005fdc:	e7f0      	b.n	8005fc0 <HAL_DAC_MspInit+0x90>
 8005fde:	bf00      	nop
 8005fe0:	40007400 	.word	0x40007400
 8005fe4:	20002294 	.word	0x20002294
 8005fe8:	40020000 	.word	0x40020000
 8005fec:	40026088 	.word	0x40026088

08005ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005ff0:	b530      	push	{r4, r5, lr}
 8005ff2:	b0b1      	sub	sp, #196	; 0xc4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ff4:	2100      	movs	r1, #0
{
 8005ff6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ff8:	2290      	movs	r2, #144	; 0x90
 8005ffa:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ffc:	910b      	str	r1, [sp, #44]	; 0x2c
 8005ffe:	e9cd 1107 	strd	r1, r1, [sp, #28]
 8006002:	e9cd 1109 	strd	r1, r1, [sp, #36]	; 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006006:	f01d ff87 	bl	8023f18 <memset>
  if(hi2c->Instance==I2C1)
 800600a:	6823      	ldr	r3, [r4, #0]
 800600c:	4a4a      	ldr	r2, [pc, #296]	; (8006138 <HAL_I2C_MspInit+0x148>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d007      	beq.n	8006022 <HAL_I2C_MspInit+0x32>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C2)
 8006012:	4a4a      	ldr	r2, [pc, #296]	; (800613c <HAL_I2C_MspInit+0x14c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d030      	beq.n	800607a <HAL_I2C_MspInit+0x8a>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
  else if(hi2c->Instance==I2C4)
 8006018:	4a49      	ldr	r2, [pc, #292]	; (8006140 <HAL_I2C_MspInit+0x150>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d057      	beq.n	80060ce <HAL_I2C_MspInit+0xde>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800601e:	b031      	add	sp, #196	; 0xc4
 8006020:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006022:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006026:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006028:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800602a:	f007 fc29 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 800602e:	2800      	cmp	r0, #0
 8006030:	d178      	bne.n	8006124 <HAL_I2C_MspInit+0x134>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006032:	4c44      	ldr	r4, [pc, #272]	; (8006144 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8006034:	f44f 7510 	mov.w	r5, #576	; 0x240
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006038:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800603a:	2001      	movs	r0, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800603c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800603e:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006040:	f043 0302 	orr.w	r3, r3, #2
 8006044:	6323      	str	r3, [r4, #48]	; 0x30
 8006046:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006048:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800604c:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006050:	2203      	movs	r2, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006052:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006054:	2304      	movs	r3, #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006056:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006058:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800605c:	483a      	ldr	r0, [pc, #232]	; (8006148 <HAL_I2C_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800605e:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006060:	f005 f8d0 	bl	800b204 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006064:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006066:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800606a:	6423      	str	r3, [r4, #64]	; 0x40
 800606c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800606e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006072:	9302      	str	r3, [sp, #8]
 8006074:	9b02      	ldr	r3, [sp, #8]
}
 8006076:	b031      	add	sp, #196	; 0xc4
 8006078:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800607a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800607e:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006080:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006082:	f007 fbfd 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 8006086:	2800      	cmp	r0, #0
 8006088:	d14f      	bne.n	800612a <HAL_I2C_MspInit+0x13a>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800608a:	4c2e      	ldr	r4, [pc, #184]	; (8006144 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800608c:	2001      	movs	r0, #1
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800608e:	2203      	movs	r2, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006090:	2512      	movs	r5, #18
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006092:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006094:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006096:	f043 0320 	orr.w	r3, r3, #32
 800609a:	6323      	str	r3, [r4, #48]	; 0x30
 800609c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800609e:	9009      	str	r0, [sp, #36]	; 0x24
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060a0:	f003 0320 	and.w	r3, r3, #32
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060a4:	4829      	ldr	r0, [pc, #164]	; (800614c <HAL_I2C_MspInit+0x15c>)
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80060a8:	2304      	movs	r3, #4
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80060aa:	e9cd 2507 	strd	r2, r5, [sp, #28]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80060ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060b2:	9d03      	ldr	r5, [sp, #12]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060b4:	f005 f8a6 	bl	800b204 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80060b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060be:	6423      	str	r3, [r4, #64]	; 0x40
 80060c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	9b04      	ldr	r3, [sp, #16]
}
 80060ca:	b031      	add	sp, #196	; 0xc4
 80060cc:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80060ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060d2:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80060d4:	930c      	str	r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80060d6:	f007 fbd3 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 80060da:	bb48      	cbnz	r0, 8006130 <HAL_I2C_MspInit+0x140>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060dc:	4c19      	ldr	r4, [pc, #100]	; (8006144 <HAL_I2C_MspInit+0x154>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80060de:	f44f 4540 	mov.w	r5, #49152	; 0xc000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060e2:	2212      	movs	r2, #18
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80060e4:	2001      	movs	r0, #1
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80060e8:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060ea:	f043 0320 	orr.w	r3, r3, #32
 80060ee:	6323      	str	r3, [r4, #48]	; 0x30
 80060f0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80060f2:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80060f6:	e9cd 5207 	strd	r5, r2, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80060fa:	2203      	movs	r2, #3
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80060fc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80060fe:	2304      	movs	r3, #4
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006100:	9d05      	ldr	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006102:	e9cd 0209 	strd	r0, r2, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006106:	4811      	ldr	r0, [pc, #68]	; (800614c <HAL_I2C_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8006108:	930b      	str	r3, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800610a:	f005 f87b 	bl	800b204 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800610e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006110:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006114:	6423      	str	r3, [r4, #64]	; 0x40
 8006116:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800611c:	9306      	str	r3, [sp, #24]
 800611e:	9b06      	ldr	r3, [sp, #24]
}
 8006120:	b031      	add	sp, #196	; 0xc4
 8006122:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8006124:	f7fd fb46 	bl	80037b4 <Error_Handler>
 8006128:	e783      	b.n	8006032 <HAL_I2C_MspInit+0x42>
      Error_Handler();
 800612a:	f7fd fb43 	bl	80037b4 <Error_Handler>
 800612e:	e7ac      	b.n	800608a <HAL_I2C_MspInit+0x9a>
      Error_Handler();
 8006130:	f7fd fb40 	bl	80037b4 <Error_Handler>
 8006134:	e7d2      	b.n	80060dc <HAL_I2C_MspInit+0xec>
 8006136:	bf00      	nop
 8006138:	40005400 	.word	0x40005400
 800613c:	40005800 	.word	0x40005800
 8006140:	40006000 	.word	0x40006000
 8006144:	40023800 	.word	0x40023800
 8006148:	40020400 	.word	0x40020400
 800614c:	40021400 	.word	0x40021400

08006150 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8006150:	4b08      	ldr	r3, [pc, #32]	; (8006174 <HAL_RNG_MspInit+0x24>)
 8006152:	6802      	ldr	r2, [r0, #0]
 8006154:	429a      	cmp	r2, r3
 8006156:	d000      	beq.n	800615a <HAL_RNG_MspInit+0xa>
 8006158:	4770      	bx	lr
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800615a:	4b07      	ldr	r3, [pc, #28]	; (8006178 <HAL_RNG_MspInit+0x28>)
{
 800615c:	b082      	sub	sp, #8
    __HAL_RCC_RNG_CLK_ENABLE();
 800615e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006160:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006164:	635a      	str	r2, [r3, #52]	; 0x34
 8006166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	9301      	str	r3, [sp, #4]
 800616e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8006170:	b002      	add	sp, #8
 8006172:	4770      	bx	lr
 8006174:	50060800 	.word	0x50060800
 8006178:	40023800 	.word	0x40023800

0800617c <HAL_SPI_MspInit>:
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hspi->Instance==SPI2)
 800617c:	4a52      	ldr	r2, [pc, #328]	; (80062c8 <HAL_SPI_MspInit+0x14c>)
 800617e:	6803      	ldr	r3, [r0, #0]
{
 8006180:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(hspi->Instance==SPI2)
 8006182:	4293      	cmp	r3, r2
{
 8006184:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006186:	f04f 0400 	mov.w	r4, #0
 800618a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 800618e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8006192:	940d      	str	r4, [sp, #52]	; 0x34
  if(hspi->Instance==SPI2)
 8006194:	d007      	beq.n	80061a6 <HAL_SPI_MspInit+0x2a>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(hspi->Instance==SPI3)
 8006196:	4a4d      	ldr	r2, [pc, #308]	; (80062cc <HAL_SPI_MspInit+0x150>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d038      	beq.n	800620e <HAL_SPI_MspInit+0x92>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
  else if(hspi->Instance==SPI4)
 800619c:	4a4c      	ldr	r2, [pc, #304]	; (80062d0 <HAL_SPI_MspInit+0x154>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d071      	beq.n	8006286 <HAL_SPI_MspInit+0x10a>
  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }

}
 80061a2:	b00f      	add	sp, #60	; 0x3c
 80061a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061a6:	4b4b      	ldr	r3, [pc, #300]	; (80062d4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061a8:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80061aa:	210c      	movs	r1, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80061ac:	2501      	movs	r5, #1
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061b0:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061b2:	4849      	ldr	r0, [pc, #292]	; (80062d8 <HAL_SPI_MspInit+0x15c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 80061b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80061b8:	641a      	str	r2, [r3, #64]	; 0x40
 80061ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061bc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80061c0:	9201      	str	r2, [sp, #4]
 80061c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80061c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061c6:	f042 0204 	orr.w	r2, r2, #4
 80061ca:	631a      	str	r2, [r3, #48]	; 0x30
 80061cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ce:	f002 0204 	and.w	r2, r2, #4
 80061d2:	9202      	str	r2, [sp, #8]
 80061d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d8:	f042 0208 	orr.w	r2, r2, #8
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
 80061de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80061e0:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061e2:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061e6:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061e8:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061ec:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061ee:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80061f0:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061f2:	f005 f807 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80061f6:	2308      	movs	r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80061f8:	a909      	add	r1, sp, #36	; 0x24
 80061fa:	4838      	ldr	r0, [pc, #224]	; (80062dc <HAL_SPI_MspInit+0x160>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80061fc:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80061fe:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006200:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006202:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006206:	f004 fffd 	bl	800b204 <HAL_GPIO_Init>
}
 800620a:	b00f      	add	sp, #60	; 0x3c
 800620c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI3_CLK_ENABLE();
 800620e:	4b31      	ldr	r3, [pc, #196]	; (80062d4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006210:	2602      	movs	r6, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006212:	2104      	movs	r1, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006214:	2503      	movs	r5, #3
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006218:	2706      	movs	r7, #6
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800621a:	4831      	ldr	r0, [pc, #196]	; (80062e0 <HAL_SPI_MspInit+0x164>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 800621c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006220:	641a      	str	r2, [r3, #64]	; 0x40
 8006222:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006224:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8006228:	9204      	str	r2, [sp, #16]
 800622a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800622c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800622e:	4332      	orrs	r2, r6
 8006230:	631a      	str	r2, [r3, #48]	; 0x30
 8006232:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006234:	4032      	ands	r2, r6
 8006236:	9205      	str	r2, [sp, #20]
 8006238:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800623a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800623c:	430a      	orrs	r2, r1
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
 8006240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006242:	950c      	str	r5, [sp, #48]	; 0x30
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006244:	400b      	ands	r3, r1
 8006246:	9306      	str	r3, [sp, #24]
 8006248:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800624a:	2307      	movs	r3, #7
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800624c:	e9cd 1609 	strd	r1, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006250:	a909      	add	r1, sp, #36	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8006252:	930d      	str	r3, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006254:	f004 ffd6 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006258:	f44f 6380 	mov.w	r3, #1024	; 0x400
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800625c:	a909      	add	r1, sp, #36	; 0x24
 800625e:	481e      	ldr	r0, [pc, #120]	; (80062d8 <HAL_SPI_MspInit+0x15c>)
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006260:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006262:	e9cd 640a 	strd	r6, r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006266:	e9cd 570c 	strd	r5, r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800626a:	f004 ffcb 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800626e:	2310      	movs	r3, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006270:	a909      	add	r1, sp, #36	; 0x24
 8006272:	481b      	ldr	r0, [pc, #108]	; (80062e0 <HAL_SPI_MspInit+0x164>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006274:	960a      	str	r6, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006276:	970d      	str	r7, [sp, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8006278:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800627a:	e9cd 450b 	strd	r4, r5, [sp, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627e:	f004 ffc1 	bl	800b204 <HAL_GPIO_Init>
}
 8006282:	b00f      	add	sp, #60	; 0x3c
 8006284:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006286:	4b13      	ldr	r3, [pc, #76]	; (80062d4 <HAL_SPI_MspInit+0x158>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006288:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800628a:	2574      	movs	r5, #116	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800628c:	2403      	movs	r4, #3
    __HAL_RCC_SPI4_CLK_ENABLE();
 800628e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006290:	a909      	add	r1, sp, #36	; 0x24
    __HAL_RCC_SPI4_CLK_ENABLE();
 8006292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800629e:	9207      	str	r2, [sp, #28]
 80062a0:	9a07      	ldr	r2, [sp, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062a4:	f042 0210 	orr.w	r2, r2, #16
 80062a8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80062aa:	2205      	movs	r2, #5
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062ae:	900a      	str	r0, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062b0:	f003 0310 	and.w	r3, r3, #16
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062b4:	480b      	ldr	r0, [pc, #44]	; (80062e4 <HAL_SPI_MspInit+0x168>)
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80062b6:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80062b8:	9308      	str	r3, [sp, #32]
 80062ba:	9b08      	ldr	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80062bc:	e9cd 420c 	strd	r4, r2, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80062c0:	f004 ffa0 	bl	800b204 <HAL_GPIO_Init>
}
 80062c4:	b00f      	add	sp, #60	; 0x3c
 80062c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062c8:	40003800 	.word	0x40003800
 80062cc:	40003c00 	.word	0x40003c00
 80062d0:	40013400 	.word	0x40013400
 80062d4:	40023800 	.word	0x40023800
 80062d8:	40020800 	.word	0x40020800
 80062dc:	40020c00 	.word	0x40020c00
 80062e0:	40020400 	.word	0x40020400
 80062e4:	40021000 	.word	0x40021000

080062e8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 80062e8:	4a73      	ldr	r2, [pc, #460]	; (80064b8 <HAL_TIM_Base_MspInit+0x1d0>)
 80062ea:	6803      	ldr	r3, [r0, #0]
{
 80062ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(htim_base->Instance==TIM1)
 80062ee:	4293      	cmp	r3, r2
{
 80062f0:	b091      	sub	sp, #68	; 0x44
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062f2:	f04f 0400 	mov.w	r4, #0
 80062f6:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80062fa:	940d      	str	r4, [sp, #52]	; 0x34
 80062fc:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  if(htim_base->Instance==TIM1)
 8006300:	d021      	beq.n	8006346 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM1_CLK_ENABLE();
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM2)
 8006302:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006306:	d055      	beq.n	80063b4 <HAL_TIM_Base_MspInit+0xcc>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8006308:	4a6c      	ldr	r2, [pc, #432]	; (80064bc <HAL_TIM_Base_MspInit+0x1d4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d027      	beq.n	800635e <HAL_TIM_Base_MspInit+0x76>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 800630e:	4a6c      	ldr	r2, [pc, #432]	; (80064c0 <HAL_TIM_Base_MspInit+0x1d8>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d043      	beq.n	800639c <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
  else if(htim_base->Instance==TIM5)
 8006314:	4a6b      	ldr	r2, [pc, #428]	; (80064c4 <HAL_TIM_Base_MspInit+0x1dc>)
 8006316:	4293      	cmp	r3, r2
 8006318:	f000 80a5 	beq.w	8006466 <HAL_TIM_Base_MspInit+0x17e>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 800631c:	4a6a      	ldr	r2, [pc, #424]	; (80064c8 <HAL_TIM_Base_MspInit+0x1e0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	f000 80b4 	beq.w	800648c <HAL_TIM_Base_MspInit+0x1a4>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(htim_base->Instance==TIM7)
 8006324:	4a69      	ldr	r2, [pc, #420]	; (80064cc <HAL_TIM_Base_MspInit+0x1e4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d02d      	beq.n	8006386 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM7_CLK_ENABLE();
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
  else if(htim_base->Instance==TIM14)
 800632a:	4a69      	ldr	r2, [pc, #420]	; (80064d0 <HAL_TIM_Base_MspInit+0x1e8>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d114      	bne.n	800635a <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8006330:	4b68      	ldr	r3, [pc, #416]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
 8006332:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006334:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006338:	641a      	str	r2, [r3, #64]	; 0x40
 800633a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006340:	930a      	str	r3, [sp, #40]	; 0x28
 8006342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8006344:	e009      	b.n	800635a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006346:	4b63      	ldr	r3, [pc, #396]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
 8006348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800634a:	f042 0201 	orr.w	r2, r2, #1
 800634e:	645a      	str	r2, [r3, #68]	; 0x44
 8006350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006352:	f003 0301 	and.w	r3, r3, #1
 8006356:	9301      	str	r3, [sp, #4]
 8006358:	9b01      	ldr	r3, [sp, #4]
}
 800635a:	b011      	add	sp, #68	; 0x44
 800635c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM3_CLK_ENABLE();
 800635e:	4b5d      	ldr	r3, [pc, #372]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006360:	4622      	mov	r2, r4
 8006362:	2106      	movs	r1, #6
 8006364:	201d      	movs	r0, #29
    __HAL_RCC_TIM3_CLK_ENABLE();
 8006366:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006368:	f044 0402 	orr.w	r4, r4, #2
 800636c:	641c      	str	r4, [r3, #64]	; 0x40
 800636e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	9305      	str	r3, [sp, #20]
 8006376:	9b05      	ldr	r3, [sp, #20]
    HAL_NVIC_SetPriority(TIM3_IRQn, 6, 0);
 8006378:	f002 f8c6 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800637c:	201d      	movs	r0, #29
 800637e:	f002 f90d 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 8006382:	b011      	add	sp, #68	; 0x44
 8006384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006386:	4b53      	ldr	r3, [pc, #332]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
 8006388:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800638a:	f042 0220 	orr.w	r2, r2, #32
 800638e:	641a      	str	r2, [r3, #64]	; 0x40
 8006390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	9309      	str	r3, [sp, #36]	; 0x24
 8006398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800639a:	e7de      	b.n	800635a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800639c:	4b4d      	ldr	r3, [pc, #308]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
 800639e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063a0:	f042 0204 	orr.w	r2, r2, #4
 80063a4:	641a      	str	r2, [r3, #64]	; 0x40
 80063a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a8:	f003 0304 	and.w	r3, r3, #4
 80063ac:	9306      	str	r3, [sp, #24]
 80063ae:	9b06      	ldr	r3, [sp, #24]
}
 80063b0:	b011      	add	sp, #68	; 0x44
 80063b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063b4:	f503 330e 	add.w	r3, r3, #145408	; 0x23800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b8:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80063ba:	2701      	movs	r7, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063bc:	a90b      	add	r1, sp, #44	; 0x2c
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c0:	4605      	mov	r5, r0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c2:	4845      	ldr	r0, [pc, #276]	; (80064d8 <HAL_TIM_Base_MspInit+0x1f0>)
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063c4:	f042 0201 	orr.w	r2, r2, #1
 80063c8:	641a      	str	r2, [r3, #64]	; 0x40
 80063ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063cc:	f002 0201 	and.w	r2, r2, #1
 80063d0:	9202      	str	r2, [sp, #8]
 80063d2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063d6:	f042 0201 	orr.w	r2, r2, #1
 80063da:	631a      	str	r2, [r3, #48]	; 0x30
 80063dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063de:	f002 0201 	and.w	r2, r2, #1
 80063e2:	9203      	str	r2, [sp, #12]
 80063e4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80063e8:	f042 0202 	orr.w	r2, r2, #2
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
 80063ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063f0:	960c      	str	r6, [sp, #48]	; 0x30
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063f2:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80063f6:	970f      	str	r7, [sp, #60]	; 0x3c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063f8:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80063fa:	2320      	movs	r3, #32
 80063fc:	930b      	str	r3, [sp, #44]	; 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80063fe:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006400:	f004 ff00 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006404:	970f      	str	r7, [sp, #60]	; 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006406:	f44f 6780 	mov.w	r7, #1024	; 0x400
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800640a:	4834      	ldr	r0, [pc, #208]	; (80064dc <HAL_TIM_Base_MspInit+0x1f4>)
 800640c:	a90b      	add	r1, sp, #44	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800640e:	960c      	str	r6, [sp, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8006410:	970b      	str	r7, [sp, #44]	; 0x2c
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006412:	4e33      	ldr	r6, [pc, #204]	; (80064e0 <HAL_TIM_Base_MspInit+0x1f8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006414:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006418:	f004 fef4 	bl	800b204 <HAL_GPIO_Init>
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800641c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 8006420:	4a30      	ldr	r2, [pc, #192]	; (80064e4 <HAL_TIM_Base_MspInit+0x1fc>)
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8006422:	4630      	mov	r0, r6
    hdma_tim2_up_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006424:	6173      	str	r3, [r6, #20]
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006426:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    hdma_tim2_up_ch3.Instance = DMA1_Stream1;
 800642a:	6032      	str	r2, [r6, #0]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800642c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
    hdma_tim2_up_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006430:	61b3      	str	r3, [r6, #24]
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 8006432:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_tim2_up_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8006436:	6137      	str	r7, [r6, #16]
    hdma_tim2_up_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8006438:	6234      	str	r4, [r6, #32]
    hdma_tim2_up_ch3.Init.Channel = DMA_CHANNEL_3;
 800643a:	6072      	str	r2, [r6, #4]
    hdma_tim2_up_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800643c:	6274      	str	r4, [r6, #36]	; 0x24
    hdma_tim2_up_ch3.Init.Mode = DMA_CIRCULAR;
 800643e:	61f3      	str	r3, [r6, #28]
    hdma_tim2_up_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8006440:	e9c6 4402 	strd	r4, r4, [r6, #8]
    if (HAL_DMA_Init(&hdma_tim2_up_ch3) != HAL_OK)
 8006444:	f002 fb72 	bl	8008b2c <HAL_DMA_Init>
 8006448:	2800      	cmp	r0, #0
 800644a:	d132      	bne.n	80064b2 <HAL_TIM_Base_MspInit+0x1ca>
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 800644c:	2200      	movs	r2, #0
 800644e:	2106      	movs	r1, #6
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim2_up_ch3);
 8006450:	622e      	str	r6, [r5, #32]
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006452:	201c      	movs	r0, #28
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim2_up_ch3);
 8006454:	62ee      	str	r6, [r5, #44]	; 0x2c
 8006456:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM2_IRQn, 6, 0);
 8006458:	f002 f856 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800645c:	201c      	movs	r0, #28
 800645e:	f002 f89d 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 8006462:	b011      	add	sp, #68	; 0x44
 8006464:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006466:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006468:	4622      	mov	r2, r4
 800646a:	2105      	movs	r1, #5
 800646c:	2032      	movs	r0, #50	; 0x32
    __HAL_RCC_TIM5_CLK_ENABLE();
 800646e:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006470:	f044 0408 	orr.w	r4, r4, #8
 8006474:	641c      	str	r4, [r3, #64]	; 0x40
 8006476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006478:	f003 0308 	and.w	r3, r3, #8
 800647c:	9307      	str	r3, [sp, #28]
 800647e:	9b07      	ldr	r3, [sp, #28]
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8006480:	f002 f842 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8006484:	2032      	movs	r0, #50	; 0x32
 8006486:	f002 f889 	bl	800859c <HAL_NVIC_EnableIRQ>
 800648a:	e766      	b.n	800635a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800648c:	4b11      	ldr	r3, [pc, #68]	; (80064d4 <HAL_TIM_Base_MspInit+0x1ec>)
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 800648e:	4622      	mov	r2, r4
 8006490:	2106      	movs	r1, #6
 8006492:	2036      	movs	r0, #54	; 0x36
    __HAL_RCC_TIM6_CLK_ENABLE();
 8006494:	6c1c      	ldr	r4, [r3, #64]	; 0x40
 8006496:	f044 0410 	orr.w	r4, r4, #16
 800649a:	641c      	str	r4, [r3, #64]	; 0x40
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	f003 0310 	and.w	r3, r3, #16
 80064a2:	9308      	str	r3, [sp, #32]
 80064a4:	9b08      	ldr	r3, [sp, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 6, 0);
 80064a6:	f002 f82f 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80064aa:	2036      	movs	r0, #54	; 0x36
 80064ac:	f002 f876 	bl	800859c <HAL_NVIC_EnableIRQ>
 80064b0:	e753      	b.n	800635a <HAL_TIM_Base_MspInit+0x72>
      Error_Handler();
 80064b2:	f7fd f97f 	bl	80037b4 <Error_Handler>
 80064b6:	e7c9      	b.n	800644c <HAL_TIM_Base_MspInit+0x164>
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40000400 	.word	0x40000400
 80064c0:	40000800 	.word	0x40000800
 80064c4:	40000c00 	.word	0x40000c00
 80064c8:	40001000 	.word	0x40001000
 80064cc:	40001400 	.word	0x40001400
 80064d0:	40002000 	.word	0x40002000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40020000 	.word	0x40020000
 80064dc:	40020400 	.word	0x40020400
 80064e0:	200022f4 	.word	0x200022f4
 80064e4:	40026028 	.word	0x40026028

080064e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM3)
 80064e8:	491d      	ldr	r1, [pc, #116]	; (8006560 <HAL_TIM_MspPostInit+0x78>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064ea:	2300      	movs	r3, #0
  if(htim->Instance==TIM3)
 80064ec:	6802      	ldr	r2, [r0, #0]
{
 80064ee:	b510      	push	{r4, lr}
  if(htim->Instance==TIM3)
 80064f0:	428a      	cmp	r2, r1
{
 80064f2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064f4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80064f8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80064fc:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM3)
 80064fe:	d004      	beq.n	800650a <HAL_TIM_MspPostInit+0x22>

  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }
  else if(htim->Instance==TIM4)
 8006500:	4b18      	ldr	r3, [pc, #96]	; (8006564 <HAL_TIM_MspPostInit+0x7c>)
 8006502:	429a      	cmp	r2, r3
 8006504:	d016      	beq.n	8006534 <HAL_TIM_MspPostInit+0x4c>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8006506:	b008      	add	sp, #32
 8006508:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800650a:	4b17      	ldr	r3, [pc, #92]	; (8006568 <HAL_TIM_MspPostInit+0x80>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800650c:	2080      	movs	r0, #128	; 0x80
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800650e:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006510:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006514:	f042 0204 	orr.w	r2, r2, #4
 8006518:	631a      	str	r2, [r3, #48]	; 0x30
 800651a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800651c:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800651e:	f003 0304 	and.w	r3, r3, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006522:	4812      	ldr	r0, [pc, #72]	; (800656c <HAL_TIM_MspPostInit+0x84>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800652a:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800652c:	f004 fe6a 	bl	800b204 <HAL_GPIO_Init>
}
 8006530:	b008      	add	sp, #32
 8006532:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006534:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006538:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800653a:	f44f 7080 	mov.w	r0, #256	; 0x100
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800653e:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006542:	4322      	orrs	r2, r4
 8006544:	631a      	str	r2, [r3, #48]	; 0x30
 8006546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006548:	9003      	str	r0, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800654a:	4023      	ands	r3, r4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800654c:	4808      	ldr	r0, [pc, #32]	; (8006570 <HAL_TIM_MspPostInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800654e:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006550:	9302      	str	r3, [sp, #8]
 8006552:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8006554:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006556:	f004 fe55 	bl	800b204 <HAL_GPIO_Init>
}
 800655a:	b008      	add	sp, #32
 800655c:	bd10      	pop	{r4, pc}
 800655e:	bf00      	nop
 8006560:	40000400 	.word	0x40000400
 8006564:	40000800 	.word	0x40000800
 8006568:	40023800 	.word	0x40023800
 800656c:	40020800 	.word	0x40020800
 8006570:	40020400 	.word	0x40020400

08006574 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006578:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800657a:	2100      	movs	r1, #0
{
 800657c:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800657e:	2290      	movs	r2, #144	; 0x90
 8006580:	a818      	add	r0, sp, #96	; 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006582:	9117      	str	r1, [sp, #92]	; 0x5c
 8006584:	e9cd 1113 	strd	r1, r1, [sp, #76]	; 0x4c
 8006588:	e9cd 1115 	strd	r1, r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800658c:	f01d fcc4 	bl	8023f18 <memset>
  if(huart->Instance==UART4)
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	4aa2      	ldr	r2, [pc, #648]	; (800681c <HAL_UART_MspInit+0x2a8>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d070      	beq.n	800667a <HAL_UART_MspInit+0x106>

  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
  else if(huart->Instance==UART5)
 8006598:	4aa1      	ldr	r2, [pc, #644]	; (8006820 <HAL_UART_MspInit+0x2ac>)
 800659a:	4293      	cmp	r3, r2
 800659c:	f000 80c1 	beq.w	8006722 <HAL_UART_MspInit+0x1ae>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
  else if(huart->Instance==UART7)
 80065a0:	4aa0      	ldr	r2, [pc, #640]	; (8006824 <HAL_UART_MspInit+0x2b0>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	f000 815e 	beq.w	8006864 <HAL_UART_MspInit+0x2f0>

  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }
  else if(huart->Instance==UART8)
 80065a8:	4a9f      	ldr	r2, [pc, #636]	; (8006828 <HAL_UART_MspInit+0x2b4>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d00e      	beq.n	80065cc <HAL_UART_MspInit+0x58>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspInit 1 */

  /* USER CODE END UART8_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80065ae:	4a9f      	ldr	r2, [pc, #636]	; (800682c <HAL_UART_MspInit+0x2b8>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	f000 818e 	beq.w	80068d2 <HAL_UART_MspInit+0x35e>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 80065b6:	4a9e      	ldr	r2, [pc, #632]	; (8006830 <HAL_UART_MspInit+0x2bc>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	f000 81b4 	beq.w	8006926 <HAL_UART_MspInit+0x3b2>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
  else if(huart->Instance==USART6)
 80065be:	4a9d      	ldr	r2, [pc, #628]	; (8006834 <HAL_UART_MspInit+0x2c0>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	f000 81df 	beq.w	8006984 <HAL_UART_MspInit+0x410>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80065c6:	b03c      	add	sp, #240	; 0xf0
 80065c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80065cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065d0:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80065d2:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80065d4:	f007 f954 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 80065d8:	2800      	cmp	r0, #0
 80065da:	f040 8261 	bne.w	8006aa0 <HAL_UART_MspInit+0x52c>
    __HAL_RCC_UART8_CLK_ENABLE();
 80065de:	4b96      	ldr	r3, [pc, #600]	; (8006838 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80065e0:	2201      	movs	r2, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e2:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80065e4:	2708      	movs	r7, #8
    __HAL_RCC_UART8_CLK_ENABLE();
 80065e6:	6c19      	ldr	r1, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065e8:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065ea:	4894      	ldr	r0, [pc, #592]	; (800683c <HAL_UART_MspInit+0x2c8>)
    __HAL_RCC_UART8_CLK_ENABLE();
 80065ec:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80065f0:	6419      	str	r1, [r3, #64]	; 0x40
 80065f2:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80065f8:	910a      	str	r1, [sp, #40]	; 0x28
 80065fa:	990a      	ldr	r1, [sp, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80065fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80065fe:	f041 0110 	orr.w	r1, r1, #16
 8006602:	6319      	str	r1, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006604:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006608:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800660a:	f003 0310 	and.w	r3, r3, #16
 800660e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006610:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006612:	e9cd 2513 	strd	r2, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006616:	e9cd 2215 	strd	r2, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800661a:	f004 fdf3 	bl	800b204 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800661e:	4887      	ldr	r0, [pc, #540]	; (800683c <HAL_UART_MspInit+0x2c8>)
 8006620:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8006622:	9717      	str	r7, [sp, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006624:	e9cd 5513 	strd	r5, r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006628:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800662c:	f004 fdea 	bl	800b204 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8006630:	4d83      	ldr	r5, [pc, #524]	; (8006840 <HAL_UART_MspInit+0x2cc>)
 8006632:	4a84      	ldr	r2, [pc, #528]	; (8006844 <HAL_UART_MspInit+0x2d0>)
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8006634:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8006638:	4628      	mov	r0, r5
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 800663a:	e9c5 2300 	strd	r2, r3, [r5]
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 800663e:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006642:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart8_rx.Init.Mode = DMA_CIRCULAR;
 8006646:	61eb      	str	r3, [r5, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 800664c:	612a      	str	r2, [r5, #16]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800664e:	e9c5 6602 	strd	r6, r6, [r5, #8]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006652:	e9c5 6605 	strd	r6, r6, [r5, #20]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006656:	e9c5 3608 	strd	r3, r6, [r5, #32]
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 800665a:	f002 fa67 	bl	8008b2c <HAL_DMA_Init>
 800665e:	2800      	cmp	r0, #0
 8006660:	f040 8221 	bne.w	8006aa6 <HAL_UART_MspInit+0x532>
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 8006664:	2200      	movs	r2, #0
 8006666:	2103      	movs	r1, #3
 8006668:	2053      	movs	r0, #83	; 0x53
    __HAL_LINKDMA(huart,hdmarx,hdma_uart8_rx);
 800666a:	6725      	str	r5, [r4, #112]	; 0x70
 800666c:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 3, 0);
 800666e:	f001 ff4b 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8006672:	2053      	movs	r0, #83	; 0x53
 8006674:	f001 ff92 	bl	800859c <HAL_NVIC_EnableIRQ>
 8006678:	e7a5      	b.n	80065c6 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800667a:	f44f 7300 	mov.w	r3, #512	; 0x200
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800667e:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006680:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006682:	f007 f8fd 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 8006686:	2800      	cmp	r0, #0
 8006688:	f040 8179 	bne.w	800697e <HAL_UART_MspInit+0x40a>
    __HAL_RCC_UART4_CLK_ENABLE();
 800668c:	4b6a      	ldr	r3, [pc, #424]	; (8006838 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800668e:	2702      	movs	r7, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006690:	2600      	movs	r6, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006692:	2503      	movs	r5, #3
    __HAL_RCC_UART4_CLK_ENABLE();
 8006694:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006696:	2408      	movs	r4, #8
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006698:	a913      	add	r1, sp, #76	; 0x4c
 800669a:	486b      	ldr	r0, [pc, #428]	; (8006848 <HAL_UART_MspInit+0x2d4>)
    __HAL_RCC_UART4_CLK_ENABLE();
 800669c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80066a0:	641a      	str	r2, [r3, #64]	; 0x40
 80066a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066a4:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80066a8:	9201      	str	r2, [sp, #4]
 80066aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
 80066b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066b6:	f002 0201 	and.w	r2, r2, #1
 80066ba:	9202      	str	r2, [sp, #8]
 80066bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80066be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c0:	433a      	orrs	r2, r7
 80066c2:	631a      	str	r2, [r3, #48]	; 0x30
 80066c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066c6:	403a      	ands	r2, r7
 80066c8:	9203      	str	r2, [sp, #12]
 80066ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80066ce:	f042 0204 	orr.w	r2, r2, #4
 80066d2:	631a      	str	r2, [r3, #48]	; 0x30
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d6:	9516      	str	r5, [sp, #88]	; 0x58
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066d8:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80066dc:	9417      	str	r4, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066de:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80066e0:	f248 0301 	movw	r3, #32769	; 0x8001
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80066e4:	9a04      	ldr	r2, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_15;
 80066e6:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e8:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066ec:	f004 fd8a 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80066f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80066f4:	a913      	add	r1, sp, #76	; 0x4c
 80066f6:	4855      	ldr	r0, [pc, #340]	; (800684c <HAL_UART_MspInit+0x2d8>)
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80066f8:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fa:	e9cd 7614 	strd	r7, r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80066fe:	e9cd 5416 	strd	r5, r4, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006702:	f004 fd7f 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006706:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800670a:	a913      	add	r1, sp, #76	; 0x4c
 800670c:	4850      	ldr	r0, [pc, #320]	; (8006850 <HAL_UART_MspInit+0x2dc>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800670e:	9714      	str	r7, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006710:	9417      	str	r4, [sp, #92]	; 0x5c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006712:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006714:	e9cd 6515 	strd	r6, r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006718:	f004 fd74 	bl	800b204 <HAL_GPIO_Init>
}
 800671c:	b03c      	add	sp, #240	; 0xf0
 800671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006722:	f44f 6380 	mov.w	r3, #1024	; 0x400
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006726:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8006728:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800672a:	f007 f8a9 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 800672e:	2800      	cmp	r0, #0
 8006730:	f040 81b0 	bne.w	8006a94 <HAL_UART_MspInit+0x520>
    __HAL_RCC_UART5_CLK_ENABLE();
 8006734:	4b40      	ldr	r3, [pc, #256]	; (8006838 <HAL_UART_MspInit+0x2c4>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006736:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006738:	2500      	movs	r5, #0
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800673a:	f44f 5780 	mov.w	r7, #4096	; 0x1000
    __HAL_RCC_UART5_CLK_ENABLE();
 800673e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006740:	f04f 0808 	mov.w	r8, #8
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006744:	a913      	add	r1, sp, #76	; 0x4c
 8006746:	4841      	ldr	r0, [pc, #260]	; (800684c <HAL_UART_MspInit+0x2d8>)
    __HAL_RCC_UART5_CLK_ENABLE();
 8006748:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800674c:	641a      	str	r2, [r3, #64]	; 0x40
 800674e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006750:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006754:	9205      	str	r2, [sp, #20]
 8006756:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800675a:	4332      	orrs	r2, r6
 800675c:	631a      	str	r2, [r3, #48]	; 0x30
 800675e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006760:	4032      	ands	r2, r6
 8006762:	9206      	str	r2, [sp, #24]
 8006764:	9a06      	ldr	r2, [sp, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006768:	f042 0204 	orr.w	r2, r2, #4
 800676c:	631a      	str	r2, [r3, #48]	; 0x30
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006770:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006772:	f003 0304 	and.w	r3, r3, #4
 8006776:	9307      	str	r3, [sp, #28]
 8006778:	9b07      	ldr	r3, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800677a:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800677c:	e9cd 7613 	strd	r7, r6, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006780:	e9cd 3816 	strd	r3, r8, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006784:	f004 fd3e 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006788:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800678a:	4831      	ldr	r0, [pc, #196]	; (8006850 <HAL_UART_MspInit+0x2dc>)
 800678c:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800678e:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006790:	9616      	str	r6, [sp, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006792:	9315      	str	r3, [sp, #84]	; 0x54
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8006794:	4e2f      	ldr	r6, [pc, #188]	; (8006854 <HAL_UART_MspInit+0x2e0>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006796:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006798:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800679c:	f004 fd32 	bl	800b204 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80067a0:	4a2d      	ldr	r2, [pc, #180]	; (8006858 <HAL_UART_MspInit+0x2e4>)
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80067a2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80067a6:	4630      	mov	r0, r6
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80067a8:	60b5      	str	r5, [r6, #8]
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80067aa:	6032      	str	r2, [r6, #0]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80067b0:	6073      	str	r3, [r6, #4]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80067b2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067b6:	60f5      	str	r5, [r6, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80067b8:	e9c6 2504 	strd	r2, r5, [r6, #16]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80067bc:	e9c6 5306 	strd	r5, r3, [r6, #24]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067c0:	e9c6 5508 	strd	r5, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80067c4:	f002 f9b2 	bl	8008b2c <HAL_DMA_Init>
 80067c8:	2800      	cmp	r0, #0
 80067ca:	f040 8160 	bne.w	8006a8e <HAL_UART_MspInit+0x51a>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80067ce:	4d23      	ldr	r5, [pc, #140]	; (800685c <HAL_UART_MspInit+0x2e8>)
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80067d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80067d4:	4922      	ldr	r1, [pc, #136]	; (8006860 <HAL_UART_MspInit+0x2ec>)
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067d6:	2300      	movs	r3, #0
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80067d8:	606a      	str	r2, [r5, #4]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067da:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80067de:	6029      	str	r1, [r5, #0]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067e0:	2140      	movs	r1, #64	; 0x40
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80067e2:	4628      	mov	r0, r5
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80067e4:	6726      	str	r6, [r4, #112]	; 0x70
 80067e6:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80067e8:	60eb      	str	r3, [r5, #12]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80067ea:	616b      	str	r3, [r5, #20]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80067ec:	60a9      	str	r1, [r5, #8]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80067ee:	61ab      	str	r3, [r5, #24]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80067f0:	612a      	str	r2, [r5, #16]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067f2:	626b      	str	r3, [r5, #36]	; 0x24
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80067f4:	e9c5 3307 	strd	r3, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80067f8:	f002 f998 	bl	8008b2c <HAL_DMA_Init>
 80067fc:	2800      	cmp	r0, #0
 80067fe:	f040 8143 	bne.w	8006a88 <HAL_UART_MspInit+0x514>
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 8006802:	2200      	movs	r2, #0
 8006804:	2107      	movs	r1, #7
 8006806:	2035      	movs	r0, #53	; 0x35
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8006808:	66e5      	str	r5, [r4, #108]	; 0x6c
 800680a:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 7, 0);
 800680c:	f001 fe7c 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8006810:	2035      	movs	r0, #53	; 0x35
 8006812:	f001 fec3 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 8006816:	b03c      	add	sp, #240	; 0xf0
 8006818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800681c:	40004c00 	.word	0x40004c00
 8006820:	40005000 	.word	0x40005000
 8006824:	40007800 	.word	0x40007800
 8006828:	40007c00 	.word	0x40007c00
 800682c:	40004400 	.word	0x40004400
 8006830:	40004800 	.word	0x40004800
 8006834:	40011400 	.word	0x40011400
 8006838:	40023800 	.word	0x40023800
 800683c:	40021000 	.word	0x40021000
 8006840:	20002414 	.word	0x20002414
 8006844:	400260a0 	.word	0x400260a0
 8006848:	40020000 	.word	0x40020000
 800684c:	40020400 	.word	0x40020400
 8006850:	40020800 	.word	0x40020800
 8006854:	20002354 	.word	0x20002354
 8006858:	40026010 	.word	0x40026010
 800685c:	200023b4 	.word	0x200023b4
 8006860:	400260b8 	.word	0x400260b8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8006864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006868:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800686a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800686c:	f007 f808 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 8006870:	2800      	cmp	r0, #0
 8006872:	f040 8112 	bne.w	8006a9a <HAL_UART_MspInit+0x526>
    __HAL_RCC_UART7_CLK_ENABLE();
 8006876:	4b8f      	ldr	r3, [pc, #572]	; (8006ab4 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006878:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800687a:	2401      	movs	r4, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800687c:	2502      	movs	r5, #2
    __HAL_RCC_UART7_CLK_ENABLE();
 800687e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8006880:	2608      	movs	r6, #8
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006882:	488d      	ldr	r0, [pc, #564]	; (8006ab8 <HAL_UART_MspInit+0x544>)
    __HAL_RCC_UART7_CLK_ENABLE();
 8006884:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8006888:	641a      	str	r2, [r3, #64]	; 0x40
 800688a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800688c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006890:	9208      	str	r2, [sp, #32]
 8006892:	9a08      	ldr	r2, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8006894:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006896:	f042 0220 	orr.w	r2, r2, #32
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800689c:	2200      	movs	r2, #0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800689e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80068a0:	9113      	str	r1, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068a2:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80068a4:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a8:	9215      	str	r2, [sp, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068aa:	9514      	str	r5, [sp, #80]	; 0x50
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80068ac:	9309      	str	r3, [sp, #36]	; 0x24
 80068ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80068b0:	e9cd 4616 	strd	r4, r6, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068b4:	f004 fca6 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80068b8:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068ba:	a913      	add	r1, sp, #76	; 0x4c
 80068bc:	487e      	ldr	r0, [pc, #504]	; (8006ab8 <HAL_UART_MspInit+0x544>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068be:	9514      	str	r5, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80068c0:	9313      	str	r3, [sp, #76]	; 0x4c
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80068c2:	9617      	str	r6, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80068c4:	e9cd 4415 	strd	r4, r4, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80068c8:	f004 fc9c 	bl	800b204 <HAL_GPIO_Init>
}
 80068cc:	b03c      	add	sp, #240	; 0xf0
 80068ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068d2:	2380      	movs	r3, #128	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068d4:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068d6:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80068d8:	f006 ffd2 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 80068dc:	2800      	cmp	r0, #0
 80068de:	f040 80e5 	bne.w	8006aac <HAL_UART_MspInit+0x538>
    __HAL_RCC_USART2_CLK_ENABLE();
 80068e2:	4b74      	ldr	r3, [pc, #464]	; (8006ab4 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068e4:	2002      	movs	r0, #2
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80068e6:	2570      	movs	r5, #112	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068e8:	2400      	movs	r4, #0
    __HAL_RCC_USART2_CLK_ENABLE();
 80068ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80068ec:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART2_CLK_ENABLE();
 80068ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40
 80068f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068f6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80068fa:	920c      	str	r2, [sp, #48]	; 0x30
 80068fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80068fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006900:	f042 0208 	orr.w	r2, r2, #8
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006906:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690a:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800690c:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006910:	486a      	ldr	r0, [pc, #424]	; (8006abc <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006912:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006914:	930d      	str	r3, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006916:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006918:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800691a:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800691c:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006920:	f004 fc70 	bl	800b204 <HAL_GPIO_Init>
 8006924:	e64f      	b.n	80065c6 <HAL_UART_MspInit+0x52>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006926:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800692a:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800692c:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800692e:	f006 ffa7 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 8006932:	2800      	cmp	r0, #0
 8006934:	f040 809c 	bne.w	8006a70 <HAL_UART_MspInit+0x4fc>
    __HAL_RCC_USART3_CLK_ENABLE();
 8006938:	4b5e      	ldr	r3, [pc, #376]	; (8006ab4 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800693a:	2012      	movs	r0, #18
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800693c:	f44f 7540 	mov.w	r5, #768	; 0x300
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2400      	movs	r4, #0
    __HAL_RCC_USART3_CLK_ENABLE();
 8006942:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006944:	a913      	add	r1, sp, #76	; 0x4c
    __HAL_RCC_USART3_CLK_ENABLE();
 8006946:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800694a:	641a      	str	r2, [r3, #64]	; 0x40
 800694c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800694e:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8006952:	920e      	str	r2, [sp, #56]	; 0x38
 8006954:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006956:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006958:	f042 0208 	orr.w	r2, r2, #8
 800695c:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800695e:	2203      	movs	r2, #3
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006962:	9014      	str	r0, [sp, #80]	; 0x50
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006964:	f003 0308 	and.w	r3, r3, #8
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006968:	4854      	ldr	r0, [pc, #336]	; (8006abc <HAL_UART_MspInit+0x548>)
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800696a:	9513      	str	r5, [sp, #76]	; 0x4c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800696c:	930f      	str	r3, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800696e:	2307      	movs	r3, #7
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006970:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006972:	9317      	str	r3, [sp, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006974:	e9cd 4215 	strd	r4, r2, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006978:	f004 fc44 	bl	800b204 <HAL_GPIO_Init>
 800697c:	e623      	b.n	80065c6 <HAL_UART_MspInit+0x52>
      Error_Handler();
 800697e:	f7fc ff19 	bl	80037b4 <Error_Handler>
 8006982:	e683      	b.n	800668c <HAL_UART_MspInit+0x118>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8006984:	f44f 6300 	mov.w	r3, #2048	; 0x800
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006988:	a818      	add	r0, sp, #96	; 0x60
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800698a:	9318      	str	r3, [sp, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800698c:	f006 ff78 	bl	800d880 <HAL_RCCEx_PeriphCLKConfig>
 8006990:	2800      	cmp	r0, #0
 8006992:	d176      	bne.n	8006a82 <HAL_UART_MspInit+0x50e>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006994:	4b47      	ldr	r3, [pc, #284]	; (8006ab4 <HAL_UART_MspInit+0x540>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006996:	2140      	movs	r1, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006998:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800699a:	2500      	movs	r5, #0
    __HAL_RCC_USART6_CLK_ENABLE();
 800699c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800699e:	2708      	movs	r7, #8
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069a0:	4847      	ldr	r0, [pc, #284]	; (8006ac0 <HAL_UART_MspInit+0x54c>)
    __HAL_RCC_USART6_CLK_ENABLE();
 80069a2:	f042 0220 	orr.w	r2, r2, #32
 80069a6:	645a      	str	r2, [r3, #68]	; 0x44
 80069a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069aa:	f002 0220 	and.w	r2, r2, #32
 80069ae:	9210      	str	r2, [sp, #64]	; 0x40
 80069b0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80069b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069b4:	f042 0204 	orr.w	r2, r2, #4
 80069b8:	631a      	str	r2, [r3, #48]	; 0x30
 80069ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069bc:	f002 0204 	and.w	r2, r2, #4
 80069c0:	9211      	str	r2, [sp, #68]	; 0x44
 80069c2:	9a11      	ldr	r2, [sp, #68]	; 0x44
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80069c6:	430a      	orrs	r2, r1
 80069c8:	631a      	str	r2, [r3, #48]	; 0x30
 80069ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069cc:	9515      	str	r5, [sp, #84]	; 0x54
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069ce:	400b      	ands	r3, r1
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069d0:	9516      	str	r5, [sp, #88]	; 0x58
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80069d2:	9717      	str	r7, [sp, #92]	; 0x5c
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80069d4:	9312      	str	r3, [sp, #72]	; 0x48
 80069d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069d8:	e9cd 1613 	strd	r1, r6, [sp, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069dc:	a913      	add	r1, sp, #76	; 0x4c
 80069de:	f004 fc11 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069e2:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80069e4:	4837      	ldr	r0, [pc, #220]	; (8006ac4 <HAL_UART_MspInit+0x550>)
 80069e6:	a913      	add	r1, sp, #76	; 0x4c
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80069e8:	9315      	str	r3, [sp, #84]	; 0x54
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069ea:	f44f 7300 	mov.w	r3, #512	; 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069ee:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80069f0:	9313      	str	r3, [sp, #76]	; 0x4c
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80069f2:	4e35      	ldr	r6, [pc, #212]	; (8006ac8 <HAL_UART_MspInit+0x554>)
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80069f4:	e9cd 5716 	strd	r5, r7, [sp, #88]	; 0x58
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80069f8:	f004 fc04 	bl	800b204 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80069fc:	4a33      	ldr	r2, [pc, #204]	; (8006acc <HAL_UART_MspInit+0x558>)
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80069fe:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006a02:	4630      	mov	r0, r6
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8006a04:	e886 002c 	stmia.w	r6, {r2, r3, r5}
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006a08:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_rx.Init.Mode = DMA_CIRCULAR;
 8006a10:	61f3      	str	r3, [r6, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a12:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006a16:	e9c6 5203 	strd	r5, r2, [r6, #12]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a1a:	e9c6 5505 	strd	r5, r5, [r6, #20]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a1e:	e9c6 3508 	strd	r3, r5, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8006a22:	f002 f883 	bl	8008b2c <HAL_DMA_Init>
 8006a26:	bb48      	cbnz	r0, 8006a7c <HAL_UART_MspInit+0x508>
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006a28:	4d29      	ldr	r5, [pc, #164]	; (8006ad0 <HAL_UART_MspInit+0x55c>)
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006a2a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006a2e:	4929      	ldr	r1, [pc, #164]	; (8006ad4 <HAL_UART_MspInit+0x560>)
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a30:	2300      	movs	r3, #0
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8006a32:	606a      	str	r2, [r5, #4]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a34:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8006a38:	6029      	str	r1, [r5, #0]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a3a:	2140      	movs	r1, #64	; 0x40
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006a3c:	612a      	str	r2, [r5, #16]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a3e:	2204      	movs	r2, #4
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006a40:	60a9      	str	r1, [r5, #8]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a42:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006a46:	60eb      	str	r3, [r5, #12]
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006a48:	4628      	mov	r0, r5
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006a4a:	616b      	str	r3, [r5, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006a4c:	61ab      	str	r3, [r5, #24]
    hdma_usart6_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8006a4e:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8006a50:	626a      	str	r2, [r5, #36]	; 0x24
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a52:	2203      	movs	r2, #3
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8006a54:	6726      	str	r6, [r4, #112]	; 0x70
 8006a56:	63b4      	str	r4, [r6, #56]	; 0x38
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8006a58:	e9c5 3107 	strd	r3, r1, [r5, #28]
    hdma_usart6_tx.Init.MemBurst = DMA_MBURST_INC4;
 8006a5c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006a60:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8006a64:	f002 f862 	bl	8008b2c <HAL_DMA_Init>
 8006a68:	b928      	cbnz	r0, 8006a76 <HAL_UART_MspInit+0x502>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8006a6a:	66e5      	str	r5, [r4, #108]	; 0x6c
 8006a6c:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8006a6e:	e5aa      	b.n	80065c6 <HAL_UART_MspInit+0x52>
      Error_Handler();
 8006a70:	f7fc fea0 	bl	80037b4 <Error_Handler>
 8006a74:	e760      	b.n	8006938 <HAL_UART_MspInit+0x3c4>
      Error_Handler();
 8006a76:	f7fc fe9d 	bl	80037b4 <Error_Handler>
 8006a7a:	e7f6      	b.n	8006a6a <HAL_UART_MspInit+0x4f6>
      Error_Handler();
 8006a7c:	f7fc fe9a 	bl	80037b4 <Error_Handler>
 8006a80:	e7d2      	b.n	8006a28 <HAL_UART_MspInit+0x4b4>
      Error_Handler();
 8006a82:	f7fc fe97 	bl	80037b4 <Error_Handler>
 8006a86:	e785      	b.n	8006994 <HAL_UART_MspInit+0x420>
      Error_Handler();
 8006a88:	f7fc fe94 	bl	80037b4 <Error_Handler>
 8006a8c:	e6b9      	b.n	8006802 <HAL_UART_MspInit+0x28e>
      Error_Handler();
 8006a8e:	f7fc fe91 	bl	80037b4 <Error_Handler>
 8006a92:	e69c      	b.n	80067ce <HAL_UART_MspInit+0x25a>
      Error_Handler();
 8006a94:	f7fc fe8e 	bl	80037b4 <Error_Handler>
 8006a98:	e64c      	b.n	8006734 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8006a9a:	f7fc fe8b 	bl	80037b4 <Error_Handler>
 8006a9e:	e6ea      	b.n	8006876 <HAL_UART_MspInit+0x302>
      Error_Handler();
 8006aa0:	f7fc fe88 	bl	80037b4 <Error_Handler>
 8006aa4:	e59b      	b.n	80065de <HAL_UART_MspInit+0x6a>
      Error_Handler();
 8006aa6:	f7fc fe85 	bl	80037b4 <Error_Handler>
 8006aaa:	e5db      	b.n	8006664 <HAL_UART_MspInit+0xf0>
      Error_Handler();
 8006aac:	f7fc fe82 	bl	80037b4 <Error_Handler>
 8006ab0:	e717      	b.n	80068e2 <HAL_UART_MspInit+0x36e>
 8006ab2:	bf00      	nop
 8006ab4:	40023800 	.word	0x40023800
 8006ab8:	40021400 	.word	0x40021400
 8006abc:	40020c00 	.word	0x40020c00
 8006ac0:	40020800 	.word	0x40020800
 8006ac4:	40021800 	.word	0x40021800
 8006ac8:	20002474 	.word	0x20002474
 8006acc:	40026428 	.word	0x40026428
 8006ad0:	200024d4 	.word	0x200024d4
 8006ad4:	400264a0 	.word	0x400264a0

08006ad8 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==UART4)
 8006ad8:	4a4f      	ldr	r2, [pc, #316]	; (8006c18 <HAL_UART_MspDeInit+0x140>)
 8006ada:	6803      	ldr	r3, [r0, #0]
 8006adc:	4293      	cmp	r3, r2
{
 8006ade:	b510      	push	{r4, lr}
  if(huart->Instance==UART4)
 8006ae0:	d025      	beq.n	8006b2e <HAL_UART_MspDeInit+0x56>

  /* USER CODE BEGIN UART4_MspDeInit 1 */

  /* USER CODE END UART4_MspDeInit 1 */
  }
  else if(huart->Instance==UART5)
 8006ae2:	4a4e      	ldr	r2, [pc, #312]	; (8006c1c <HAL_UART_MspDeInit+0x144>)
 8006ae4:	4604      	mov	r4, r0
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d038      	beq.n	8006b5c <HAL_UART_MspDeInit+0x84>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
  /* USER CODE BEGIN UART5_MspDeInit 1 */

  /* USER CODE END UART5_MspDeInit 1 */
  }
  else if(huart->Instance==UART7)
 8006aea:	4a4d      	ldr	r2, [pc, #308]	; (8006c20 <HAL_UART_MspDeInit+0x148>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d050      	beq.n	8006b92 <HAL_UART_MspDeInit+0xba>

  /* USER CODE BEGIN UART7_MspDeInit 1 */

  /* USER CODE END UART7_MspDeInit 1 */
  }
  else if(huart->Instance==UART8)
 8006af0:	4a4c      	ldr	r2, [pc, #304]	; (8006c24 <HAL_UART_MspDeInit+0x14c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d009      	beq.n	8006b0a <HAL_UART_MspDeInit+0x32>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
  /* USER CODE BEGIN UART8_MspDeInit 1 */

  /* USER CODE END UART8_MspDeInit 1 */
  }
  else if(huart->Instance==USART2)
 8006af6:	4a4c      	ldr	r2, [pc, #304]	; (8006c28 <HAL_UART_MspDeInit+0x150>)
 8006af8:	4293      	cmp	r3, r2
 8006afa:	d056      	beq.n	8006baa <HAL_UART_MspDeInit+0xd2>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
  else if(huart->Instance==USART3)
 8006afc:	4a4b      	ldr	r2, [pc, #300]	; (8006c2c <HAL_UART_MspDeInit+0x154>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d062      	beq.n	8006bc8 <HAL_UART_MspDeInit+0xf0>

  /* USER CODE BEGIN USART3_MspDeInit 1 */

  /* USER CODE END USART3_MspDeInit 1 */
  }
  else if(huart->Instance==USART6)
 8006b02:	4a4b      	ldr	r2, [pc, #300]	; (8006c30 <HAL_UART_MspDeInit+0x158>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d06c      	beq.n	8006be2 <HAL_UART_MspDeInit+0x10a>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8006b08:	bd10      	pop	{r4, pc}
    __HAL_RCC_UART8_CLK_DISABLE();
 8006b0a:	f502 32de 	add.w	r2, r2, #113664	; 0x1bc00
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8006b0e:	2103      	movs	r1, #3
 8006b10:	4848      	ldr	r0, [pc, #288]	; (8006c34 <HAL_UART_MspDeInit+0x15c>)
    __HAL_RCC_UART8_CLK_DISABLE();
 8006b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b14:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006b18:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_0|GPIO_PIN_1);
 8006b1a:	f004 fd19 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006b1e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006b20:	f002 f9b0 	bl	8008e84 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8006b24:	2053      	movs	r0, #83	; 0x53
}
 8006b26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART8_IRQn);
 8006b2a:	f001 bd4b 	b.w	80085c4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART4_CLK_DISABLE();
 8006b2e:	f502 32f6 	add.w	r2, r2, #125952	; 0x1ec00
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8006b32:	f248 0101 	movw	r1, #32769	; 0x8001
 8006b36:	4840      	ldr	r0, [pc, #256]	; (8006c38 <HAL_UART_MspDeInit+0x160>)
    __HAL_RCC_UART4_CLK_DISABLE();
 8006b38:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b3a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006b3e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0|GPIO_PIN_15);
 8006b40:	f004 fd06 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_15);
 8006b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b48:	483c      	ldr	r0, [pc, #240]	; (8006c3c <HAL_UART_MspDeInit+0x164>)
 8006b4a:	f004 fd01 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8006b4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b52:	483b      	ldr	r0, [pc, #236]	; (8006c40 <HAL_UART_MspDeInit+0x168>)
}
 8006b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_11);
 8006b58:	f004 bcfa 	b.w	800b550 <HAL_GPIO_DeInit>
    __HAL_RCC_UART5_CLK_DISABLE();
 8006b5c:	f502 32f4 	add.w	r2, r2, #124928	; 0x1e800
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b64:	4835      	ldr	r0, [pc, #212]	; (8006c3c <HAL_UART_MspDeInit+0x164>)
    __HAL_RCC_UART5_CLK_DISABLE();
 8006b66:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b68:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006b6c:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12);
 8006b6e:	f004 fcef 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_12);
 8006b72:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006b76:	4832      	ldr	r0, [pc, #200]	; (8006c40 <HAL_UART_MspDeInit+0x168>)
 8006b78:	f004 fcea 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006b7c:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006b7e:	f002 f981 	bl	8008e84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006b82:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006b84:	f002 f97e 	bl	8008e84 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006b88:	2035      	movs	r0, #53	; 0x35
}
 8006b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(UART5_IRQn);
 8006b8e:	f001 bd19 	b.w	80085c4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_UART7_CLK_DISABLE();
 8006b92:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006b96:	21c0      	movs	r1, #192	; 0xc0
 8006b98:	482a      	ldr	r0, [pc, #168]	; (8006c44 <HAL_UART_MspDeInit+0x16c>)
    __HAL_RCC_UART7_CLK_DISABLE();
 8006b9a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
}
 8006ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_UART7_CLK_DISABLE();
 8006ba4:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_6|GPIO_PIN_7);
 8006ba6:	f004 bcd3 	b.w	800b550 <HAL_GPIO_DeInit>
    __HAL_RCC_USART2_CLK_DISABLE();
 8006baa:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006bae:	4826      	ldr	r0, [pc, #152]	; (8006c48 <HAL_UART_MspDeInit+0x170>)
 8006bb0:	2170      	movs	r1, #112	; 0x70
    __HAL_RCC_USART2_CLK_DISABLE();
 8006bb2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006bb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bb8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6);
 8006bba:	f004 fcc9 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006bbe:	2026      	movs	r0, #38	; 0x26
}
 8006bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8006bc4:	f001 bcfe 	b.w	80085c4 <HAL_NVIC_DisableIRQ>
    __HAL_RCC_USART3_CLK_DISABLE();
 8006bc8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8006bcc:	f44f 7140 	mov.w	r1, #768	; 0x300
 8006bd0:	481d      	ldr	r0, [pc, #116]	; (8006c48 <HAL_UART_MspDeInit+0x170>)
    __HAL_RCC_USART3_CLK_DISABLE();
 8006bd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
}
 8006bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_RCC_USART3_CLK_DISABLE();
 8006bdc:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOD, STLK_RX_Pin|STLK_TX_Pin);
 8006bde:	f004 bcb7 	b.w	800b550 <HAL_GPIO_DeInit>
    __HAL_RCC_USART6_CLK_DISABLE();
 8006be2:	f502 3292 	add.w	r2, r2, #74752	; 0x12400
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8006be6:	2140      	movs	r1, #64	; 0x40
 8006be8:	4815      	ldr	r0, [pc, #84]	; (8006c40 <HAL_UART_MspDeInit+0x168>)
    __HAL_RCC_USART6_CLK_DISABLE();
 8006bea:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006bec:	f023 0320 	bic.w	r3, r3, #32
 8006bf0:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6);
 8006bf2:	f004 fcad 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_9);
 8006bf6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006bfa:	4814      	ldr	r0, [pc, #80]	; (8006c4c <HAL_UART_MspDeInit+0x174>)
 8006bfc:	f004 fca8 	bl	800b550 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8006c00:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006c02:	f002 f93f 	bl	8008e84 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8006c06:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006c08:	f002 f93c 	bl	8008e84 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8006c0c:	2047      	movs	r0, #71	; 0x47
}
 8006c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8006c12:	f001 bcd7 	b.w	80085c4 <HAL_NVIC_DisableIRQ>
 8006c16:	bf00      	nop
 8006c18:	40004c00 	.word	0x40004c00
 8006c1c:	40005000 	.word	0x40005000
 8006c20:	40007800 	.word	0x40007800
 8006c24:	40007c00 	.word	0x40007c00
 8006c28:	40004400 	.word	0x40004400
 8006c2c:	40004800 	.word	0x40004800
 8006c30:	40011400 	.word	0x40011400
 8006c34:	40021000 	.word	0x40021000
 8006c38:	40020000 	.word	0x40020000
 8006c3c:	40020400 	.word	0x40020400
 8006c40:	40020800 	.word	0x40020800
 8006c44:	40021400 	.word	0x40021400
 8006c48:	40020c00 	.word	0x40020c00
 8006c4c:	40021800 	.word	0x40021800

08006c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006c50:	b530      	push	{r4, r5, lr}
 8006c52:	4601      	mov	r1, r0
 8006c54:	b089      	sub	sp, #36	; 0x24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM12 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, TickPriority ,0);
 8006c56:	2200      	movs	r2, #0
 8006c58:	202b      	movs	r0, #43	; 0x2b
 8006c5a:	f001 fc55 	bl	8008508 <HAL_NVIC_SetPriority>

  /* Enable the TIM12 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8006c5e:	202b      	movs	r0, #43	; 0x2b
 8006c60:	f001 fc9c 	bl	800859c <HAL_NVIC_EnableIRQ>

  /* Enable TIM12 clock */
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006c64:	4b15      	ldr	r3, [pc, #84]	; (8006cbc <HAL_InitTick+0x6c>)

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c66:	a901      	add	r1, sp, #4
 8006c68:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006c6a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
  /* Compute the prescaler value to have TIM12 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM12 */
  htim12.Instance = TIM12;
 8006c6c:	4c14      	ldr	r4, [pc, #80]	; (8006cc0 <HAL_InitTick+0x70>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006c6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c72:	4d14      	ldr	r5, [pc, #80]	; (8006cc4 <HAL_InitTick+0x74>)
  __HAL_RCC_TIM12_CLK_ENABLE();
 8006c74:	641a      	str	r2, [r3, #64]	; 0x40
 8006c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c7c:	9302      	str	r3, [sp, #8]
 8006c7e:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006c80:	f006 fddc 	bl	800d83c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006c84:	f006 fdba 	bl	800d7fc <HAL_RCC_GetPCLK1Freq>
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim12.Init.Period = (1000000U / 1000U) - 1U;
  htim12.Init.Prescaler = uwPrescalerValue;
  htim12.Init.ClockDivision = 0;
 8006c88:	2200      	movs	r2, #0
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8006c8a:	0043      	lsls	r3, r0, #1
  htim12.Instance = TIM12;
 8006c8c:	490e      	ldr	r1, [pc, #56]	; (8006cc8 <HAL_InitTick+0x78>)
  htim12.Init.ClockDivision = 0;
 8006c8e:	6122      	str	r2, [r4, #16]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006c90:	4620      	mov	r0, r4
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c92:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c94:	fba5 2303 	umull	r2, r3, r5, r3
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006c98:	f240 32e7 	movw	r2, #999	; 0x3e7
  htim12.Instance = TIM12;
 8006c9c:	6021      	str	r1, [r4, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006c9e:	0c9b      	lsrs	r3, r3, #18
  htim12.Init.Period = (1000000U / 1000U) - 1U;
 8006ca0:	60e2      	str	r2, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006ca2:	3b01      	subs	r3, #1
  htim12.Init.Prescaler = uwPrescalerValue;
 8006ca4:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim12) == HAL_OK)
 8006ca6:	f009 f8bb 	bl	800fe20 <HAL_TIM_Base_Init>
 8006caa:	b110      	cbz	r0, 8006cb2 <HAL_InitTick+0x62>
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim12);
  }

  /* Return function status */
  return HAL_ERROR;
 8006cac:	2001      	movs	r0, #1
}
 8006cae:	b009      	add	sp, #36	; 0x24
 8006cb0:	bd30      	pop	{r4, r5, pc}
    return HAL_TIM_Base_Start_IT(&htim12);
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f008 fa88 	bl	800f1c8 <HAL_TIM_Base_Start_IT>
}
 8006cb8:	b009      	add	sp, #36	; 0x24
 8006cba:	bd30      	pop	{r4, r5, pc}
 8006cbc:	40023800 	.word	0x40023800
 8006cc0:	20003358 	.word	0x20003358
 8006cc4:	431bde83 	.word	0x431bde83
 8006cc8:	40001800 	.word	0x40001800

08006ccc <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop

08006cd0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006cd0:	e7fe      	b.n	8006cd0 <HardFault_Handler>
 8006cd2:	bf00      	nop

08006cd4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006cd4:	e7fe      	b.n	8006cd4 <MemManage_Handler>
 8006cd6:	bf00      	nop

08006cd8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006cd8:	e7fe      	b.n	8006cd8 <BusFault_Handler>
 8006cda:	bf00      	nop

08006cdc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006cdc:	e7fe      	b.n	8006cdc <UsageFault_Handler>
 8006cde:	bf00      	nop

08006ce0 <RCC_IRQHandler>:
 8006ce0:	4770      	bx	lr
 8006ce2:	bf00      	nop

08006ce4 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8006ce4:	4801      	ldr	r0, [pc, #4]	; (8006cec <DMA1_Stream0_IRQHandler+0x8>)
 8006ce6:	f002 ba39 	b.w	800915c <HAL_DMA_IRQHandler>
 8006cea:	bf00      	nop
 8006cec:	20002354 	.word	0x20002354

08006cf0 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_up_ch3);
 8006cf0:	4801      	ldr	r0, [pc, #4]	; (8006cf8 <DMA1_Stream1_IRQHandler+0x8>)
 8006cf2:	f002 ba33 	b.w	800915c <HAL_DMA_IRQHandler>
 8006cf6:	bf00      	nop
 8006cf8:	200022f4 	.word	0x200022f4

08006cfc <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8006cfc:	4801      	ldr	r0, [pc, #4]	; (8006d04 <DMA1_Stream5_IRQHandler+0x8>)
 8006cfe:	f002 ba2d 	b.w	800915c <HAL_DMA_IRQHandler>
 8006d02:	bf00      	nop
 8006d04:	20002294 	.word	0x20002294

08006d08 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8006d08:	4801      	ldr	r0, [pc, #4]	; (8006d10 <DMA1_Stream6_IRQHandler+0x8>)
 8006d0a:	f002 ba27 	b.w	800915c <HAL_DMA_IRQHandler>
 8006d0e:	bf00      	nop
 8006d10:	20002414 	.word	0x20002414

08006d14 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8006d14:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8006d16:	4805      	ldr	r0, [pc, #20]	; (8006d2c <ADC_IRQHandler+0x18>)
 8006d18:	f001 f9d2 	bl	80080c0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8006d1c:	4804      	ldr	r0, [pc, #16]	; (8006d30 <ADC_IRQHandler+0x1c>)
 8006d1e:	f001 f9cf 	bl	80080c0 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 8006d22:	4804      	ldr	r0, [pc, #16]	; (8006d34 <ADC_IRQHandler+0x20>)
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8006d24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc3);
 8006d28:	f001 b9ca 	b.w	80080c0 <HAL_ADC_IRQHandler>
 8006d2c:	20002124 	.word	0x20002124
 8006d30:	2000216c 	.word	0x2000216c
 8006d34:	200021b4 	.word	0x200021b4

08006d38 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006d38:	4801      	ldr	r0, [pc, #4]	; (8006d40 <TIM2_IRQHandler+0x8>)
 8006d3a:	f008 bee9 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006d3e:	bf00      	nop
 8006d40:	200027fc 	.word	0x200027fc

08006d44 <TIM3_IRQHandler>:
void TIM3_IRQHandler(void)
{
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006d44:	4801      	ldr	r0, [pc, #4]	; (8006d4c <TIM3_IRQHandler+0x8>)
 8006d46:	f008 bee3 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006d4a:	bf00      	nop
 8006d4c:	20002848 	.word	0x20002848

08006d50 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8006d50:	4801      	ldr	r0, [pc, #4]	; (8006d58 <USART2_IRQHandler+0x8>)
 8006d52:	f00b b961 	b.w	8012018 <HAL_UART_IRQHandler>
 8006d56:	bf00      	nop
 8006d58:	200029c4 	.word	0x200029c4

08006d5c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8006d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006d60:	f004 bd2e 	b.w	800b7c0 <HAL_GPIO_EXTI_IRQHandler>

08006d64 <TIM8_BRK_TIM12_IRQHandler>:
void TIM8_BRK_TIM12_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8006d64:	4801      	ldr	r0, [pc, #4]	; (8006d6c <TIM8_BRK_TIM12_IRQHandler+0x8>)
 8006d66:	f008 bed3 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006d6a:	bf00      	nop
 8006d6c:	20003358 	.word	0x20003358

08006d70 <TIM8_TRG_COM_TIM14_IRQHandler>:
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8006d70:	4801      	ldr	r0, [pc, #4]	; (8006d78 <TIM8_TRG_COM_TIM14_IRQHandler+0x8>)
 8006d72:	f008 becd 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006d76:	bf00      	nop
 8006d78:	200027b0 	.word	0x200027b0

08006d7c <DMA1_Stream7_IRQHandler>:
void DMA1_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8006d7c:	4801      	ldr	r0, [pc, #4]	; (8006d84 <DMA1_Stream7_IRQHandler+0x8>)
 8006d7e:	f002 b9ed 	b.w	800915c <HAL_DMA_IRQHandler>
 8006d82:	bf00      	nop
 8006d84:	200023b4 	.word	0x200023b4

08006d88 <TIM5_IRQHandler>:
void TIM5_IRQHandler(void)
{
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8006d88:	4801      	ldr	r0, [pc, #4]	; (8006d90 <TIM5_IRQHandler+0x8>)
 8006d8a:	f008 bec1 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006d8e:	bf00      	nop
 8006d90:	200028e0 	.word	0x200028e0

08006d94 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006d94:	4801      	ldr	r0, [pc, #4]	; (8006d9c <UART5_IRQHandler+0x8>)
 8006d96:	f00b b93f 	b.w	8012018 <HAL_UART_IRQHandler>
 8006d9a:	bf00      	nop
 8006d9c:	20002b50 	.word	0x20002b50

08006da0 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8006da0:	4804      	ldr	r0, [pc, #16]	; (8006db4 <TIM6_DAC_IRQHandler+0x14>)
{
 8006da2:	b508      	push	{r3, lr}
  HAL_DAC_IRQHandler(&hdac);
 8006da4:	f001 fe0c 	bl	80089c0 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8006da8:	4803      	ldr	r0, [pc, #12]	; (8006db8 <TIM6_DAC_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8006daa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim6);
 8006dae:	f008 beaf 	b.w	800fb10 <HAL_TIM_IRQHandler>
 8006db2:	bf00      	nop
 8006db4:	20002220 	.word	0x20002220
 8006db8:	2000292c 	.word	0x2000292c

08006dbc <DMA2_Stream1_IRQHandler>:
void DMA2_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8006dbc:	4801      	ldr	r0, [pc, #4]	; (8006dc4 <DMA2_Stream1_IRQHandler+0x8>)
 8006dbe:	f002 b9cd 	b.w	800915c <HAL_DMA_IRQHandler>
 8006dc2:	bf00      	nop
 8006dc4:	20002474 	.word	0x20002474

08006dc8 <DMA2_Stream4_IRQHandler>:
void DMA2_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006dc8:	4801      	ldr	r0, [pc, #4]	; (8006dd0 <DMA2_Stream4_IRQHandler+0x8>)
 8006dca:	f002 b9c7 	b.w	800915c <HAL_DMA_IRQHandler>
 8006dce:	bf00      	nop
 8006dd0:	20002234 	.word	0x20002234

08006dd4 <ETH_IRQHandler>:
void ETH_IRQHandler(void)
{
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006dd4:	4801      	ldr	r0, [pc, #4]	; (8006ddc <ETH_IRQHandler+0x8>)
 8006dd6:	f003 b945 	b.w	800a064 <HAL_ETH_IRQHandler>
 8006dda:	bf00      	nop
 8006ddc:	2000657c 	.word	0x2000657c

08006de0 <OTG_FS_IRQHandler>:
void OTG_FS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8006de0:	4801      	ldr	r0, [pc, #4]	; (8006de8 <OTG_FS_IRQHandler+0x8>)
 8006de2:	f005 bc0b 	b.w	800c5fc <HAL_PCD_IRQHandler>
 8006de6:	bf00      	nop
 8006de8:	2002fc18 	.word	0x2002fc18

08006dec <DMA2_Stream6_IRQHandler>:
void DMA2_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8006dec:	4801      	ldr	r0, [pc, #4]	; (8006df4 <DMA2_Stream6_IRQHandler+0x8>)
 8006dee:	f002 b9b5 	b.w	800915c <HAL_DMA_IRQHandler>
 8006df2:	bf00      	nop
 8006df4:	200024d4 	.word	0x200024d4

08006df8 <USART6_IRQHandler>:
void USART6_IRQHandler(void)
{
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006df8:	4801      	ldr	r0, [pc, #4]	; (8006e00 <USART6_IRQHandler+0x8>)
 8006dfa:	f00b b90d 	b.w	8012018 <HAL_UART_IRQHandler>
 8006dfe:	bf00      	nop
 8006e00:	20002bd4 	.word	0x20002bd4

08006e04 <FPU_IRQHandler>:
 8006e04:	4770      	bx	lr
 8006e06:	bf00      	nop

08006e08 <UART8_IRQHandler>:
void UART8_IRQHandler(void)
{
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8006e08:	4801      	ldr	r0, [pc, #4]	; (8006e10 <UART8_IRQHandler+0x8>)
 8006e0a:	f00b b905 	b.w	8012018 <HAL_UART_IRQHandler>
 8006e0e:	bf00      	nop
 8006e10:	20002cdc 	.word	0x20002cdc

08006e14 <_getpid>:
void initialise_monitor_handles() {
}

int _getpid(void) {
	return 1;
}
 8006e14:	2001      	movs	r0, #1
 8006e16:	4770      	bx	lr

08006e18 <_kill>:

int _kill(int pid, int sig) {
	errno = EINVAL;
 8006e18:	4b02      	ldr	r3, [pc, #8]	; (8006e24 <_kill+0xc>)
 8006e1a:	2216      	movs	r2, #22
	return -1;
}
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
 8006e20:	601a      	str	r2, [r3, #0]
}
 8006e22:	4770      	bx	lr
 8006e24:	2003002c 	.word	0x2003002c

08006e28 <_exit>:
	errno = EINVAL;
 8006e28:	4b01      	ldr	r3, [pc, #4]	; (8006e30 <_exit+0x8>)
 8006e2a:	2216      	movs	r2, #22
 8006e2c:	601a      	str	r2, [r3, #0]

void _exit(int status) {
	_kill(status, -1);
	while (1) {
 8006e2e:	e7fe      	b.n	8006e2e <_exit+0x6>
 8006e30:	2003002c 	.word	0x2003002c

08006e34 <_read>:
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8006e34:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006e36:	1e16      	subs	r6, r2, #0
 8006e38:	dd07      	ble.n	8006e4a <_read+0x16>
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	198d      	adds	r5, r1, r6
		*ptr++ = __io_getchar();
 8006e3e:	f3af 8000 	nop.w
 8006e42:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8006e46:	42a5      	cmp	r5, r4
 8006e48:	d1f9      	bne.n	8006e3e <_read+0xa>
	}

	return len;
}
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	bd70      	pop	{r4, r5, r6, pc}
 8006e4e:	bf00      	nop

08006e50 <_close>:
	return len;
}

int _close(int file) {
	return -1;
}
 8006e50:	f04f 30ff 	mov.w	r0, #4294967295
 8006e54:	4770      	bx	lr
 8006e56:	bf00      	nop

08006e58 <_fstat>:

int _fstat(int file, struct stat *st) {
	st->st_mode = S_IFCHR;
 8006e58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006e5c:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006e5e:	604b      	str	r3, [r1, #4]
}
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop

08006e64 <_isatty>:

int _isatty(int file) {
	return 1;
}
 8006e64:	2001      	movs	r0, #1
 8006e66:	4770      	bx	lr

08006e68 <_lseek>:

int _lseek(int file, int ptr, int dir) {
	return 0;
}
 8006e68:	2000      	movs	r0, #0
 8006e6a:	4770      	bx	lr

08006e6c <_sbrk>:
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
	const uint8_t *max_heap = (uint8_t*) stack_limit;
	uint8_t *prev_heap_end;

	/* Initalize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 8006e6c:	490d      	ldr	r1, [pc, #52]	; (8006ea4 <_sbrk+0x38>)
void* _sbrk(ptrdiff_t incr) {
 8006e6e:	4603      	mov	r3, r0
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006e70:	4a0d      	ldr	r2, [pc, #52]	; (8006ea8 <_sbrk+0x3c>)
	if (NULL == __sbrk_heap_end) {
 8006e72:	6808      	ldr	r0, [r1, #0]
void* _sbrk(ptrdiff_t incr) {
 8006e74:	b410      	push	{r4}
	const uint32_t stack_limit = (uint32_t) &_estack - (uint32_t) &_Min_Stack_Size;
 8006e76:	4c0d      	ldr	r4, [pc, #52]	; (8006eac <_sbrk+0x40>)
 8006e78:	1b12      	subs	r2, r2, r4
	if (NULL == __sbrk_heap_end) {
 8006e7a:	b170      	cbz	r0, 8006e9a <_sbrk+0x2e>
		__sbrk_heap_end = &_end;
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 8006e7c:	4403      	add	r3, r0
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d803      	bhi.n	8006e8a <_sbrk+0x1e>

	prev_heap_end = __sbrk_heap_end;
	__sbrk_heap_end += incr;

	return (void*) prev_heap_end;
}
 8006e82:	f85d 4b04 	ldr.w	r4, [sp], #4
	__sbrk_heap_end += incr;
 8006e86:	600b      	str	r3, [r1, #0]
}
 8006e88:	4770      	bx	lr
		errno = ENOMEM;
 8006e8a:	4b09      	ldr	r3, [pc, #36]	; (8006eb0 <_sbrk+0x44>)
 8006e8c:	220c      	movs	r2, #12
		return (void*) -1;
 8006e8e:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006e92:	f85d 4b04 	ldr.w	r4, [sp], #4
		errno = ENOMEM;
 8006e96:	601a      	str	r2, [r3, #0]
}
 8006e98:	4770      	bx	lr
		__sbrk_heap_end = &_end;
 8006e9a:	4c06      	ldr	r4, [pc, #24]	; (8006eb4 <_sbrk+0x48>)
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	600c      	str	r4, [r1, #0]
 8006ea0:	e7ec      	b.n	8006e7c <_sbrk+0x10>
 8006ea2:	bf00      	nop
 8006ea4:	200033a8 	.word	0x200033a8
 8006ea8:	20080000 	.word	0x20080000
 8006eac:	00006800 	.word	0x00006800
 8006eb0:	2003002c 	.word	0x2003002c
 8006eb4:	20030058 	.word	0x20030058

08006eb8 <SystemInit>:
 * @retval None
 */
void SystemInit(void) {
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006eb8:	4a0f      	ldr	r2, [pc, #60]	; (8006ef8 <SystemInit+0x40>)
  #endif
	/* Reset the RCC clock configuration to the default reset state ------------*/
	/* Set HSION bit */
	RCC->CR |= (uint32_t) 0x00000001;
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <SystemInit+0x44>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ebc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;

	/* Reset HSEON, CSSON and PLLON bits */
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006ec0:	490f      	ldr	r1, [pc, #60]	; (8006f00 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ec2:	f440 0070 	orr.w	r0, r0, #15728640	; 0xf00000
void SystemInit(void) {
 8006ec6:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006ec8:	f8c2 0088 	str.w	r0, [r2, #136]	; 0x88
	RCC->CFGR = 0x00000000;
 8006ecc:	2400      	movs	r4, #0
	RCC->CR |= (uint32_t) 0x00000001;
 8006ece:	6818      	ldr	r0, [r3, #0]
 8006ed0:	f040 0001 	orr.w	r0, r0, #1
 8006ed4:	6018      	str	r0, [r3, #0]
	RCC->CFGR = 0x00000000;
 8006ed6:	609c      	str	r4, [r3, #8]
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006ed8:	6818      	ldr	r0, [r3, #0]
 8006eda:	4001      	ands	r1, r0

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x24003010;
 8006edc:	4809      	ldr	r0, [pc, #36]	; (8006f04 <SystemInit+0x4c>)
	RCC->CR &= (uint32_t) 0xFEF6FFFF;
 8006ede:	6019      	str	r1, [r3, #0]
	RCC->PLLCFGR = 0x24003010;
 8006ee0:	6058      	str	r0, [r3, #4]

	/* Reset HSEBYP bit */
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006ee2:	6819      	ldr	r1, [r3, #0]
#else
  extern unsigned int* _progstart;

//	SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
//	SCB->VTOR = 0x8100000 | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ee4:	4808      	ldr	r0, [pc, #32]	; (8006f08 <SystemInit+0x50>)
	RCC->CR &= (uint32_t) 0xFFFBFFFF;
 8006ee6:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 8006eea:	6019      	str	r1, [r3, #0]
	RCC->CIR = 0x00000000;
 8006eec:	60dc      	str	r4, [r3, #12]

#endif
}
 8006eee:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB->VTOR = (unsigned long)&_progstart | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006ef2:	6090      	str	r0, [r2, #8]
}
 8006ef4:	4770      	bx	lr
 8006ef6:	bf00      	nop
 8006ef8:	e000ed00 	.word	0xe000ed00
 8006efc:	40023800 	.word	0x40023800
 8006f00:	fef6ffff 	.word	0xfef6ffff
 8006f04:	24003010 	.word	0x24003010
 8006f08:	08000000 	.word	0x08000000

08006f0c <dnsfound>:
}

// Delayed DNS lookup result callback

void dnsfound(const char *name, const ip_addr_t *ipaddr, void *callback_arg) {
	if (ipaddr->addr == NULL) {
 8006f0c:	680b      	ldr	r3, [r1, #0]
 8006f0e:	4a03      	ldr	r2, [pc, #12]	; (8006f1c <dnsfound+0x10>)
		ip_ready = -1;
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	bf08      	it	eq
 8006f14:	f04f 33ff 	moveq.w	r3, #4294967295
 8006f18:	6013      	str	r3, [r2, #0]
	} else
		ip_ready = ipaddr->addr;
}
 8006f1a:	4770      	bx	lr
 8006f1c:	200033bc 	.word	0x200033bc

08006f20 <myreboot>:
void myreboot(char *msg) {
 8006f20:	4601      	mov	r1, r0
	printf("%s, ... rebooting\n", msg);
 8006f22:	480a      	ldr	r0, [pc, #40]	; (8006f4c <myreboot+0x2c>)
void myreboot(char *msg) {
 8006f24:	b508      	push	{r3, lr}
	printf("%s, ... rebooting\n", msg);
 8006f26:	f01d ff95 	bl	8024e54 <iprintf>
	osDelay(2000);
 8006f2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006f2e:	f00d fffb 	bl	8014f28 <osDelay>
	__ASM volatile ("dsb 0xF":::"memory");
 8006f32:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006f36:	4906      	ldr	r1, [pc, #24]	; (8006f50 <myreboot+0x30>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f38:	4b06      	ldr	r3, [pc, #24]	; (8006f54 <myreboot+0x34>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006f3a:	68ca      	ldr	r2, [r1, #12]
 8006f3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006f40:	4313      	orrs	r3, r2
 8006f42:	60cb      	str	r3, [r1, #12]
 8006f44:	f3bf 8f4f 	dsb	sy
    __NOP();
 8006f48:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006f4a:	e7fd      	b.n	8006f48 <myreboot+0x28>
 8006f4c:	0802bb58 	.word	0x0802bb58
 8006f50:	e000ed00 	.word	0xe000ed00
 8006f54:	05fa0004 	.word	0x05fa0004

08006f58 <sendudp>:
/*inline*/err_t sendudp(struct udp_pcb *pcb, struct pbuf *ps, const ip_addr_t *dst_ip, u16_t dst_port) {
 8006f58:	b500      	push	{lr}
 8006f5a:	b083      	sub	sp, #12
	err = udp_sendto(pcb, ps, &udpdestip, UDP_PORT_NO);
 8006f5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8006f60:	4a16      	ldr	r2, [pc, #88]	; (8006fbc <sendudp+0x64>)
 8006f62:	f018 fee9 	bl	801fd38 <udp_sendto>
 8006f66:	f88d 0007 	strb.w	r0, [sp, #7]
	if (err != ERR_OK) {
 8006f6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f6e:	b943      	cbnz	r3, 8006f82 <sendudp+0x2a>
 8006f70:	b25a      	sxtb	r2, r3
		busycount = 0;
 8006f72:	4b13      	ldr	r3, [pc, #76]	; (8006fc0 <sendudp+0x68>)
 8006f74:	601a      	str	r2, [r3, #0]
	return (err);
 8006f76:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8006f7a:	b240      	sxtb	r0, r0
 8006f7c:	b003      	add	sp, #12
 8006f7e:	f85d fb04 	ldr.w	pc, [sp], #4
		printf("sendudp: err %i\n", err);
 8006f82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8006f86:	480f      	ldr	r0, [pc, #60]	; (8006fc4 <sendudp+0x6c>)
 8006f88:	b249      	sxtb	r1, r1
 8006f8a:	f01d ff63 	bl	8024e54 <iprintf>
		vTaskDelay(100); //some delay!
 8006f8e:	2064      	movs	r0, #100	; 0x64
 8006f90:	f00f fb18 	bl	80165c4 <vTaskDelay>
		if (err == ERR_MEM) {
 8006f94:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006f98:	2bff      	cmp	r3, #255	; 0xff
 8006f9a:	d00c      	beq.n	8006fb6 <sendudp+0x5e>
		if (err == ERR_USE) {
 8006f9c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006fa0:	2bf8      	cmp	r3, #248	; 0xf8
 8006fa2:	d1e8      	bne.n	8006f76 <sendudp+0x1e>
			if (busycount++ > 10)
 8006fa4:	4a06      	ldr	r2, [pc, #24]	; (8006fc0 <sendudp+0x68>)
 8006fa6:	6813      	ldr	r3, [r2, #0]
 8006fa8:	1c59      	adds	r1, r3, #1
 8006faa:	2b0a      	cmp	r3, #10
 8006fac:	6011      	str	r1, [r2, #0]
 8006fae:	dde2      	ble.n	8006f76 <sendudp+0x1e>
				myreboot("sendudp: udp always busy");
 8006fb0:	4805      	ldr	r0, [pc, #20]	; (8006fc8 <sendudp+0x70>)
 8006fb2:	f7ff ffb5 	bl	8006f20 <myreboot>
			myreboot("sendudp: out of mem");
 8006fb6:	4805      	ldr	r0, [pc, #20]	; (8006fcc <sendudp+0x74>)
 8006fb8:	f7ff ffb2 	bl	8006f20 <myreboot>
 8006fbc:	200033d4 	.word	0x200033d4
 8006fc0:	200033ac 	.word	0x200033ac
 8006fc4:	0802bb6c 	.word	0x0802bb6c
 8006fc8:	0802bb94 	.word	0x0802bb94
 8006fcc:	0802bb80 	.word	0x0802bb80

08006fd0 <sendstatus>:
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006fd0:	4b25      	ldr	r3, [pc, #148]	; (8007068 <sendstatus+0x98>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006fd2:	4684      	mov	ip, r0
 8006fd4:	4610      	mov	r0, r2
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006fd6:	f9b3 3000 	ldrsh.w	r3, [r3]
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006fda:	b570      	push	{r4, r5, r6, lr}
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006fdc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006fe0:	4c22      	ldr	r4, [pc, #136]	; (800706c <sendstatus+0x9c>)
/*inline*/void sendstatus(int stype, struct pbuf *ps, struct udp_pcb *pcb, uint8_t batchid) {
 8006fe2:	b082      	sub	sp, #8
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006fe4:	6825      	ldr	r5, [r4, #0]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006fe6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006fea:	4c21      	ldr	r4, [pc, #132]	; (8007070 <sendstatus+0xa0>)
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006fec:	f3c2 020b 	ubfx	r2, r2, #0, #12
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006ff0:	f3c5 050b 	ubfx	r5, r5, #0, #12
 8006ff4:	f9b4 e000 	ldrsh.w	lr, [r4]
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8006ff8:	4c1e      	ldr	r4, [pc, #120]	; (8007074 <sendstatus+0xa4>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8006ffa:	f1be 0f07 	cmp.w	lr, #7
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8006ffe:	ea4f 3e0e 	mov.w	lr, lr, lsl #12
	statuspkt.adcnoise = abs(meanwindiff) & 0xfff;	// agc
 8007002:	f8a4 2072 	strh.w	r2, [r4, #114]	; 0x72
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007006:	4a1c      	ldr	r2, [pc, #112]	; (8007078 <sendstatus+0xa8>)
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007008:	bfc8      	it	gt
 800700a:	f445 5580 	orrgt.w	r5, r5, #4096	; 0x1000
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800700e:	f40e 4ee0 	and.w	lr, lr, #28672	; 0x7000
 8007012:	8812      	ldrh	r2, [r2, #0]
	statuspkt.adcbase = (globaladcavg & 0xfff) | (((pgagain > 7) ? (1 << 12) : 0)); 	// agc + boost gain
 8007014:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007018:	1a9b      	subs	r3, r3, r2
 800701a:	4d18      	ldr	r5, [pc, #96]	; (800707c <sendstatus+0xac>)
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800701c:	4a18      	ldr	r2, [pc, #96]	; (8007080 <sendstatus+0xb0>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800701e:	2b00      	cmp	r3, #0
 8007020:	882d      	ldrh	r5, [r5, #0]
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007022:	6812      	ldr	r2, [r2, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007024:	bfb8      	it	lt
 8007026:	425b      	neglt	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007028:	6f66      	ldr	r6, [r4, #116]	; 0x74
 800702a:	0212      	lsls	r2, r2, #8
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800702c:	442b      	add	r3, r5
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800702e:	4d15      	ldr	r5, [pc, #84]	; (8007084 <sendstatus+0xb4>)
 8007030:	b292      	uxth	r2, r2
 8007032:	782d      	ldrb	r5, [r5, #0]
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007034:	ea43 030e 	orr.w	r3, r3, lr
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 8007038:	432a      	orrs	r2, r5
 800703a:	4d13      	ldr	r5, [pc, #76]	; (8007088 <sendstatus+0xb8>)
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 800703c:	b29b      	uxth	r3, r3
	statuspkt.auxstatus1 = (statuspkt.auxstatus1 & 0xffff0000) | (((jabbertimeout & 0xff) << 8) | adcbatchid);
 800703e:	4035      	ands	r5, r6
 8007040:	432a      	orrs	r2, r5
 8007042:	6762      	str	r2, [r4, #116]	; 0x74
	statuspkt.adctrigoff = abs(meanwindiff - lastmeanwindiff) + trigthresh | ((pgagain & 7) << 12);
 8007044:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 8007048:	684b      	ldr	r3, [r1, #4]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 800704a:	4a10      	ldr	r2, [pc, #64]	; (800708c <sendstatus+0xbc>)
	((uint8_t*) (ps->payload))[3] = stype; // timed status pkt type
 800704c:	f883 c003 	strb.w	ip, [r3, #3]
	err = sendudp(pcb, ps, &udpdestip, UDP_PORT_NO);
 8007050:	f241 3388 	movw	r3, #5000	; 0x1388
 8007054:	f7ff ff80 	bl	8006f58 <sendudp>
 8007058:	f88d 0007 	strb.w	r0, [sp, #7]
	statuspkt.udppknum++;
 800705c:	6823      	ldr	r3, [r4, #0]
 800705e:	3301      	adds	r3, #1
 8007060:	6023      	str	r3, [r4, #0]
}
 8007062:	b002      	add	sp, #8
 8007064:	bd70      	pop	{r4, r5, r6, pc}
 8007066:	bf00      	nop
 8007068:	20000724 	.word	0x20000724
 800706c:	200006d4 	.word	0x200006d4
 8007070:	20003340 	.word	0x20003340
 8007074:	20002f6c 	.word	0x20002f6c
 8007078:	200006dc 	.word	0x200006dc
 800707c:	20000002 	.word	0x20000002
 8007080:	200006d8 	.word	0x200006d8
 8007084:	200006bc 	.word	0x200006bc
 8007088:	ffff0000 	.word	0xffff0000
 800708c:	200033d4 	.word	0x200033d4

08007090 <dnslookup>:

// set destination server IP using DNS lookup
int dnslookup(char *name, struct ip4_addr *ip) {
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	4604      	mov	r4, r0
 8007094:	460f      	mov	r7, r1
	int i, err = 0;

	printf("DNS Resolving %s ", name);
 8007096:	4818      	ldr	r0, [pc, #96]	; (80070f8 <dnslookup+0x68>)
 8007098:	4621      	mov	r1, r4
//	osDelay(500);
	ip_ready = 0;
 800709a:	4e18      	ldr	r6, [pc, #96]	; (80070fc <dnslookup+0x6c>)
	printf("DNS Resolving %s ", name);
 800709c:	f01d feda 	bl	8024e54 <iprintf>
	ip_ready = 0;
 80070a0:	2300      	movs	r3, #0
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80070a2:	4620      	mov	r0, r4
 80070a4:	4a16      	ldr	r2, [pc, #88]	; (8007100 <dnslookup+0x70>)
 80070a6:	4639      	mov	r1, r7
	ip_ready = 0;
 80070a8:	6033      	str	r3, [r6, #0]
	err = dns_gethostbyname(name, ip, dnsfound, 0);
 80070aa:	f012 fae9 	bl	8019680 <dns_gethostbyname>
 80070ae:	4604      	mov	r4, r0

	switch (err) {
 80070b0:	3005      	adds	r0, #5
 80070b2:	d005      	beq.n	80070c0 <dnslookup+0x30>
 80070b4:	b114      	cbz	r4, 80070bc <dnslookup+0x2c>
			}
			if (err == ERR_OK)
				break;
		} // falls through on timeout
	default:
		printf("****** gethostbyname failed *****\n ");
 80070b6:	4813      	ldr	r0, [pc, #76]	; (8007104 <dnslookup+0x74>)
 80070b8:	f01d fecc 	bl	8024e54 <iprintf>
		break;
	}
	return (err);
}
 80070bc:	4620      	mov	r0, r4
 80070be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printf("gethostbyname INPROGRESS");
 80070c0:	4811      	ldr	r0, [pc, #68]	; (8007108 <dnslookup+0x78>)
 80070c2:	2514      	movs	r5, #20
 80070c4:	f01d fec6 	bl	8024e54 <iprintf>
		for (i = 0; i < 20; i++) {
 80070c8:	e001      	b.n	80070ce <dnslookup+0x3e>
 80070ca:	3d01      	subs	r5, #1
 80070cc:	d0f3      	beq.n	80070b6 <dnslookup+0x26>
			osDelay(1000);		// give it 20 seconds
 80070ce:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070d2:	f00d ff29 	bl	8014f28 <osDelay>
			printf(".");
 80070d6:	202e      	movs	r0, #46	; 0x2e
 80070d8:	f01d fed4 	bl	8024e84 <putchar>
			if (ip_ready) {
 80070dc:	6833      	ldr	r3, [r6, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d0f3      	beq.n	80070ca <dnslookup+0x3a>
				if (ip_ready == -1) {
 80070e2:	1c5a      	adds	r2, r3, #1
 80070e4:	d002      	beq.n	80070ec <dnslookup+0x5c>
				return (ERR_OK);
 80070e6:	2400      	movs	r4, #0
				ip->addr = ip_ready;
 80070e8:	603b      	str	r3, [r7, #0]
				return (ERR_OK);
 80070ea:	e7e7      	b.n	80070bc <dnslookup+0x2c>
					ip->addr = "127.0.0.1";	// safe ?
 80070ec:	4b07      	ldr	r3, [pc, #28]	; (800710c <dnslookup+0x7c>)
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80070ee:	f06f 0402 	mvn.w	r4, #2
					ip->addr = "127.0.0.1";	// safe ?
 80070f2:	603b      	str	r3, [r7, #0]
					return (ERR_TIMEOUT);	// not always timeout, but some error
 80070f4:	e7e2      	b.n	80070bc <dnslookup+0x2c>
 80070f6:	bf00      	nop
 80070f8:	0802bbb0 	.word	0x0802bbb0
 80070fc:	200033bc 	.word	0x200033bc
 8007100:	08006f0d 	.word	0x08006f0d
 8007104:	0802bbec 	.word	0x0802bbec
 8007108:	0802bbc4 	.word	0x0802bbc4
 800710c:	0802bbe0 	.word	0x0802bbe0

08007110 <locateudp>:

uint32_t locateudp()		// called from LPtask every n seconds
{
 8007110:	b510      	push	{r4, lr}
	volatile err_t err;
	uint32_t ip = 0;

	printf("Finding %s for UDP streaming\n", udp_target);
 8007112:	4914      	ldr	r1, [pc, #80]	; (8007164 <locateudp+0x54>)
{
 8007114:	b084      	sub	sp, #16
	printf("Finding %s for UDP streaming\n", udp_target);
 8007116:	4814      	ldr	r0, [pc, #80]	; (8007168 <locateudp+0x58>)
 8007118:	f01d fe9c 	bl	8024e54 <iprintf>
	err = dnslookup(udp_target, &udpdestip);
 800711c:	4913      	ldr	r1, [pc, #76]	; (800716c <locateudp+0x5c>)
 800711e:	4811      	ldr	r0, [pc, #68]	; (8007164 <locateudp+0x54>)
 8007120:	f7ff ffb6 	bl	8007090 <dnslookup>
 8007124:	b240      	sxtb	r0, r0
 8007126:	f88d 000f 	strb.w	r0, [sp, #15]
	if (err)
 800712a:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800712e:	b9a3      	cbnz	r3, 800715a <locateudp+0x4a>
		rebootme(3);

	ip = udpdestip.addr;
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <locateudp+0x5c>)
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8007132:	490f      	ldr	r1, [pc, #60]	; (8007170 <locateudp+0x60>)
	ip = udpdestip.addr;
 8007134:	681c      	ldr	r4, [r3, #0]
	sprintf(udp_ips, "%lu.%lu.%lu.%lu", ip & 0xff, (ip & 0xff00) >> 8, (ip & 0xff0000) >> 16, (ip & 0xff000000) >> 24);
 8007136:	480f      	ldr	r0, [pc, #60]	; (8007174 <locateudp+0x64>)
 8007138:	0e22      	lsrs	r2, r4, #24
 800713a:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800713e:	e9cd 3200 	strd	r3, r2, [sp]
 8007142:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8007146:	b2e2      	uxtb	r2, r4
 8007148:	f01e f86e 	bl	8025228 <siprintf>
	printf("\nUDP Target IP: %s\n", udp_ips);
 800714c:	4909      	ldr	r1, [pc, #36]	; (8007174 <locateudp+0x64>)
 800714e:	480a      	ldr	r0, [pc, #40]	; (8007178 <locateudp+0x68>)
 8007150:	f01d fe80 	bl	8024e54 <iprintf>
	return (ip);
}
 8007154:	4620      	mov	r0, r4
 8007156:	b004      	add	sp, #16
 8007158:	bd10      	pop	{r4, pc}
		rebootme(3);
 800715a:	2003      	movs	r0, #3
 800715c:	f7fc f98e 	bl	800347c <rebootme>
 8007160:	e7e6      	b.n	8007130 <locateudp+0x20>
 8007162:	bf00      	nop
 8007164:	20003420 	.word	0x20003420
 8007168:	0802bc10 	.word	0x0802bc10
 800716c:	200033d4 	.word	0x200033d4
 8007170:	0802bc30 	.word	0x0802bc30
 8007174:	200033c4 	.word	0x200033c4
 8007178:	0802bc40 	.word	0x0802bc40

0800717c <startudp>:

void startudp(uint32_t ip) {
 800717c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007180:	ed2d 8b02 	vpush	{d8}
 8007184:	b085      	sub	sp, #20
	volatile err_t err;
	int i;

//printf("Startudp:\n");
	/* Store the handle of the calling task. */
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8007186:	f00f fb45 	bl	8016814 <xTaskGetCurrentTaskHandle>
 800718a:	4b75      	ldr	r3, [pc, #468]	; (8007360 <startudp+0x1e4>)
 800718c:	4602      	mov	r2, r0
	osDelay(1000);
 800718e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	xTaskToNotify = xTaskGetCurrentTaskHandle();
 8007192:	601a      	str	r2, [r3, #0]
	osDelay(1000);
 8007194:	f00d fec8 	bl	8014f28 <osDelay>

	/* get new pcbs */
	pcb = udp_new();
 8007198:	f018 fe9a 	bl	801fed0 <udp_new>
	if (pcb == NULL) {
 800719c:	2800      	cmp	r0, #0
 800719e:	f000 80ce 	beq.w	800733e <startudp+0x1c2>
			;
		return;
	}

	/* bind to any IP address on port UDP_PORT_NO */
	if (udp_bind(pcb, IP_ADDR_ANY, UDP_PORT_NO) != ERR_OK) {
 80071a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071a6:	496f      	ldr	r1, [pc, #444]	; (8007364 <startudp+0x1e8>)
 80071a8:	ee08 0a10 	vmov	s16, r0
 80071ac:	f018 fc40 	bl	801fa30 <udp_bind>
 80071b0:	4605      	mov	r5, r0
 80071b2:	2800      	cmp	r0, #0
 80071b4:	f040 80bf 	bne.w	8007336 <startudp+0x1ba>
			;
	}

//	udp_recv(pcb, myudp_recv, NULL);

	p1 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80071b8:	2241      	movs	r2, #65	; 0x41
 80071ba:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 80071be:	2036      	movs	r0, #54	; 0x36
 80071c0:	f013 fbb4 	bl	801a92c <pbuf_alloc>

	if (p1 == NULL) {
 80071c4:	9000      	str	r0, [sp, #0]
 80071c6:	2800      	cmp	r0, #0
 80071c8:	f000 80bd 	beq.w	8007346 <startudp+0x1ca>
		printf("startudp: p1 buf_alloc failed!\n");
		return;
	}
	p1->payload = &(*pktbuf)[0];
 80071cc:	4c66      	ldr	r4, [pc, #408]	; (8007368 <startudp+0x1ec>)
//	p1->len = ADCBUFSIZE;

	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80071ce:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
	p1->payload = &(*pktbuf)[0];
 80071d2:	9a00      	ldr	r2, [sp, #0]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80071d4:	2036      	movs	r0, #54	; 0x36
	p1->payload = &(*pktbuf)[0];
 80071d6:	6823      	ldr	r3, [r4, #0]
 80071d8:	6053      	str	r3, [r2, #4]
	p2 = pbuf_alloc(PBUF_TRANSPORT, UDPBUFSIZE, PBUF_REF /* PBUF_ROM */); // pk1 pbuf
 80071da:	2241      	movs	r2, #65	; 0x41
 80071dc:	f013 fba6 	bl	801a92c <pbuf_alloc>
	if (p2 == NULL) {
 80071e0:	9001      	str	r0, [sp, #4]
 80071e2:	2800      	cmp	r0, #0
 80071e4:	f000 80b7 	beq.w	8007356 <startudp+0x1da>
		printf("startudp: p2 buf_alloc failed!\n");
		return;
	}
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80071e8:	6823      	ldr	r3, [r4, #0]

//	p2->len = ADCBUFSIZE;

// trailing packet status packet
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80071ea:	219c      	movs	r1, #156	; 0x9c
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80071ec:	9a01      	ldr	r2, [sp, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80071ee:	2036      	movs	r0, #54	; 0x36
	p2->payload = &(*pktbuf)[(UDPBUFSIZE / 4)];	// half way along physical buffer
 80071f0:	f503 63b8 	add.w	r3, r3, #1472	; 0x5c0
 80071f4:	6053      	str	r3, [r2, #4]
	ps = pbuf_alloc(PBUF_TRANSPORT, sizeof(statuspkt), PBUF_ROM);	// pks pbuf
 80071f6:	2201      	movs	r2, #1
 80071f8:	f013 fb98 	bl	801a92c <pbuf_alloc>
	if (ps == NULL) {
 80071fc:	ee08 0a90 	vmov	s17, r0
 8007200:	2800      	cmp	r0, #0
 8007202:	f000 80aa 	beq.w	800735a <startudp+0x1de>
		printf("startudp: ps buf_alloc failed!\n");
		return;
	}
	ps->payload = &statuspkt;	// point at status / GPS data
 8007206:	4c59      	ldr	r4, [pc, #356]	; (800736c <startudp+0x1f0>)
 8007208:	4f59      	ldr	r7, [pc, #356]	; (8007370 <startudp+0x1f4>)
 800720a:	6044      	str	r4, [r0, #4]

	osDelay(5000);
 800720c:	f241 3088 	movw	r0, #5000	; 0x1388
 8007210:	f00d fe8a 	bl	8014f28 <osDelay>

	statuspkt.auxstatus1 = 0;
	statuspkt.adcudpover = 0;		// debug use count overruns
	statuspkt.trigcount = 0;		// debug use adc trigger count
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8007214:	4b57      	ldr	r3, [pc, #348]	; (8007374 <startudp+0x1f8>)
	statuspkt.auxstatus1 = 0;
 8007216:	6765      	str	r5, [r4, #116]	; 0x74

	netup = 1; // this is incomplete - it should be set by the phys layer also
 8007218:	2201      	movs	r2, #1
	statuspkt.adcudpover = 0;		// debug use count overruns
 800721a:	67a5      	str	r5, [r4, #120]	; 0x78
	statuspkt.trigcount = 0;		// debug use adc trigger count
 800721c:	67e5      	str	r5, [r4, #124]	; 0x7c
	statuspkt.udpsent = 0;	// debug use adc udp sample packet sent count
 800721e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
	statuspkt.telltale1 = 0xDEC0EDFE; //  0xFEEDC0DE marker at the end of each status packet
 8007222:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	netup = 1; // this is incomplete - it should be set by the phys layer also
 8007226:	4b54      	ldr	r3, [pc, #336]	; (8007378 <startudp+0x1fc>)
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 8007228:	4854      	ldr	r0, [pc, #336]	; (800737c <startudp+0x200>)
 800722a:	4e55      	ldr	r6, [pc, #340]	; (8007380 <startudp+0x204>)
 800722c:	f8df b188 	ldr.w	fp, [pc, #392]	; 80073b8 <startudp+0x23c>
 8007230:	f8df a188 	ldr.w	sl, [pc, #392]	; 80073bc <startudp+0x240>
 8007234:	f8df 8188 	ldr.w	r8, [pc, #392]	; 80073c0 <startudp+0x244>
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;

				while (pd->ref != 1) {	// old packet not finished with yet
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8007238:	4d52      	ldr	r5, [pc, #328]	; (8007384 <startudp+0x208>)
	netup = 1; // this is incomplete - it should be set by the phys layer also
 800723a:	701a      	strb	r2, [r3, #0]
	printf("Arming UDP Railgun\nSystem ready and operating....\n");
 800723c:	f01d fea6 	bl	8024f8c <puts>
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 8007240:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007244:	2001      	movs	r0, #1
 8007246:	f00f fc2d 	bl	8016aa4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 800724a:	2800      	cmp	r0, #0
 800724c:	d05a      	beq.n	8007304 <startudp+0x188>
			sigsend = 0;
 800724e:	2300      	movs	r3, #0
 8007250:	603b      	str	r3, [r7, #0]
			if ((gpslocked) && (jabbertimeout == 0) && (!(globalfreeze))) { // only send if adc threshold was exceeded and GPS is locked
 8007252:	7833      	ldrb	r3, [r6, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d0f3      	beq.n	8007240 <startudp+0xc4>
 8007258:	f8db 3000 	ldr.w	r3, [fp]
 800725c:	f8da 2000 	ldr.w	r2, [sl]
 8007260:	4313      	orrs	r3, r2
 8007262:	d1ed      	bne.n	8007240 <startudp+0xc4>
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8007264:	4a48      	ldr	r2, [pc, #288]	; (8007388 <startudp+0x20c>)
 8007266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	2a00      	cmp	r2, #0
 800726e:	bf08      	it	eq
 8007270:	4601      	moveq	r1, r0
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8007272:	684a      	ldr	r2, [r1, #4]
				pd = (dmabufno) ? p2 : p1; // which dma buffer to send, dmabuf is last filled buffer, 0 or 1
 8007274:	4689      	mov	r9, r1
				((uint8_t*) (pd->payload))[3] = 0;	// pkt type
 8007276:	70d3      	strb	r3, [r2, #3]
				((uint8_t*) (pd->payload))[0] = statuspkt.udppknum & 0xff;
 8007278:	6822      	ldr	r2, [r4, #0]
 800727a:	684b      	ldr	r3, [r1, #4]
 800727c:	701a      	strb	r2, [r3, #0]
				((uint8_t*) (pd->payload))[1] = (statuspkt.udppknum & 0xff00) >> 8;
 800727e:	6823      	ldr	r3, [r4, #0]
 8007280:	684a      	ldr	r2, [r1, #4]
 8007282:	0a1b      	lsrs	r3, r3, #8
 8007284:	7053      	strb	r3, [r2, #1]
				((uint8_t*) (pd->payload))[2] = (statuspkt.udppknum & 0xff0000) >> 16;
 8007286:	6823      	ldr	r3, [r4, #0]
 8007288:	684a      	ldr	r2, [r1, #4]
 800728a:	0c1b      	lsrs	r3, r3, #16
 800728c:	7093      	strb	r3, [r2, #2]
				while (pd->ref != 1) {	// old packet not finished with yet
 800728e:	7b89      	ldrb	r1, [r1, #14]
 8007290:	2901      	cmp	r1, #1
 8007292:	d006      	beq.n	80072a2 <startudp+0x126>
					printf("*******send sample failed p->ref = %d *******\n", pd->ref);
 8007294:	4628      	mov	r0, r5
 8007296:	f01d fddd 	bl	8024e54 <iprintf>
				while (pd->ref != 1) {	// old packet not finished with yet
 800729a:	f899 100e 	ldrb.w	r1, [r9, #14]
 800729e:	2901      	cmp	r1, #1
 80072a0:	d1f8      	bne.n	8007294 <startudp+0x118>
				}

				err = sendudp(pcb, pd, &udpdestip, UDP_PORT_NO);		// send the sample packet
 80072a2:	f241 3388 	movw	r3, #5000	; 0x1388
 80072a6:	4649      	mov	r1, r9
 80072a8:	4a38      	ldr	r2, [pc, #224]	; (800738c <startudp+0x210>)
 80072aa:	ee18 0a10 	vmov	r0, s16
 80072ae:	f7ff fe53 	bl	8006f58 <sendudp>
 80072b2:	f88d 000f 	strb.w	r0, [sp, #15]

				statuspkt.udpsent++;	// debug no of sample packets set
 80072b6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80072ba:	3301      	adds	r3, #1
 80072bc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
				statuspkt.adcpktssent++;	// UDP sample packet counter
 80072c0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80072c4:	3301      	adds	r3, #1
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
				statuspkt.udppknum++;		// UDP packet number
 80072cc:	6823      	ldr	r3, [r4, #0]
 80072ce:	3301      	adds	r3, #1
 80072d0:	6023      	str	r3, [r4, #0]
					printf("******* end sample status: ps->ref = %d *******\n", ps->ref);
					vTaskDelay(0); // but we need wait to update the data packet next, so wait
				}
#endif
				/* send end of sequence status packet if end of batch sequence */
				if (sendendstatus > 0) {
 80072d2:	4b2f      	ldr	r3, [pc, #188]	; (8007390 <startudp+0x214>)
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d0b2      	beq.n	8007240 <startudp+0xc4>
//					if (jabbertimeout == 0)	// terminate curtailed sequence???
						sendstatus(ENDSEQ, ps, pcb, adcbatchid); // send end of seq status
 80072da:	492e      	ldr	r1, [pc, #184]	; (8007394 <startudp+0x218>)
 80072dc:	ee18 2a10 	vmov	r2, s16
 80072e0:	2001      	movs	r0, #1
 80072e2:	780b      	ldrb	r3, [r1, #0]
 80072e4:	ee18 1a90 	vmov	r1, s17
 80072e8:	f7ff fe72 	bl	8006fd0 <sendstatus>
					sendendstatus = 0;	// cancel the flag
 80072ec:	2300      	movs	r3, #0
 80072ee:	4a28      	ldr	r2, [pc, #160]	; (8007390 <startudp+0x214>)
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80072f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80072f4:	2001      	movs	r0, #1
					statuspkt.adcpktssent = 0;	// end of sequence so start again at 0
 80072f6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
					sendendstatus = 0;	// cancel the flag
 80072fa:	7013      	strb	r3, [r2, #0]
		ulNotificationValue = ulTaskNotifyTake( pdTRUE, xMaxBlockTime);
 80072fc:	f00f fbd2 	bl	8016aa4 <ulTaskNotifyTake>
		if (ulNotificationValue > 0) {		// we were notified
 8007300:	2800      	cmp	r0, #0
 8007302:	d1a4      	bne.n	800724e <startudp+0xd2>
	if ((t1sec != talive) && (t1sec % STAT_TIME == 0)) { // this is a temporary mech to send timed status pkts...
 8007304:	4b24      	ldr	r3, [pc, #144]	; (8007398 <startudp+0x21c>)
 8007306:	f8d8 2000 	ldr.w	r2, [r8]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4293      	cmp	r3, r2
 800730e:	d097      	beq.n	8007240 <startudp+0xc4>
 8007310:	4a22      	ldr	r2, [pc, #136]	; (800739c <startudp+0x220>)
 8007312:	4923      	ldr	r1, [pc, #140]	; (80073a0 <startudp+0x224>)
 8007314:	fb02 f203 	mul.w	r2, r2, r3
 8007318:	ebb1 0ff2 	cmp.w	r1, r2, ror #3
 800731c:	d390      	bcc.n	8007240 <startudp+0xc4>
		talive = t1sec;
 800731e:	f8c8 3000 	str.w	r3, [r8]
		sendstatus(TIMED, ps, pcb, batchid);
 8007322:	ee18 2a10 	vmov	r2, s16
 8007326:	4b1b      	ldr	r3, [pc, #108]	; (8007394 <startudp+0x218>)
 8007328:	ee18 1a90 	vmov	r1, s17
 800732c:	2002      	movs	r0, #2
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	f7ff fe4e 	bl	8006fd0 <sendstatus>
 8007334:	e784      	b.n	8007240 <startudp+0xc4>
		printf("startudp: udp_bind failed!\n");
 8007336:	481b      	ldr	r0, [pc, #108]	; (80073a4 <startudp+0x228>)
 8007338:	f01d fe28 	bl	8024f8c <puts>
		for (;;)
 800733c:	e7fe      	b.n	800733c <startudp+0x1c0>
		printf("startudp: udp_new failed!\n");
 800733e:	481a      	ldr	r0, [pc, #104]	; (80073a8 <startudp+0x22c>)
 8007340:	f01d fe24 	bl	8024f8c <puts>
		for (;;)
 8007344:	e7fe      	b.n	8007344 <startudp+0x1c8>
		printf("startudp: p1 buf_alloc failed!\n");
 8007346:	4819      	ldr	r0, [pc, #100]	; (80073ac <startudp+0x230>)
			sendtimedstatus(ps, pcb, adcbatchid);
//			printf("ulNotificationValue = %d\n",ulNotificationValue );
		}

	} // forever while
}
 8007348:	b005      	add	sp, #20
 800734a:	ecbd 8b02 	vpop	{d8}
 800734e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		printf("startudp: ps buf_alloc failed!\n");
 8007352:	f01d be1b 	b.w	8024f8c <puts>
		printf("startudp: p2 buf_alloc failed!\n");
 8007356:	4816      	ldr	r0, [pc, #88]	; (80073b0 <startudp+0x234>)
 8007358:	e7f6      	b.n	8007348 <startudp+0x1cc>
		printf("startudp: ps buf_alloc failed!\n");
 800735a:	4816      	ldr	r0, [pc, #88]	; (80073b4 <startudp+0x238>)
 800735c:	e7f4      	b.n	8007348 <startudp+0x1cc>
 800735e:	bf00      	nop
 8007360:	200007dc 	.word	0x200007dc
 8007364:	08045328 	.word	0x08045328
 8007368:	20000728 	.word	0x20000728
 800736c:	20002f6c 	.word	0x20002f6c
 8007370:	20000740 	.word	0x20000740
 8007374:	dec0edfe 	.word	0xdec0edfe
 8007378:	20000726 	.word	0x20000726
 800737c:	0802bcec 	.word	0x0802bcec
 8007380:	200033b8 	.word	0x200033b8
 8007384:	0802bd20 	.word	0x0802bd20
 8007388:	200006d0 	.word	0x200006d0
 800738c:	200033d4 	.word	0x200033d4
 8007390:	20000738 	.word	0x20000738
 8007394:	200006bc 	.word	0x200006bc
 8007398:	20002d8c 	.word	0x20002d8c
 800739c:	eeeeeeef 	.word	0xeeeeeeef
 80073a0:	02222222 	.word	0x02222222
 80073a4:	0802bc70 	.word	0x0802bc70
 80073a8:	0802bc54 	.word	0x0802bc54
 80073ac:	0802bc8c 	.word	0x0802bc8c
 80073b0:	0802bcac 	.word	0x0802bcac
 80073b4:	0802bccc 	.word	0x0802bccc
 80073b8:	200033b4 	.word	0x200033b4
 80073bc:	200006d8 	.word	0x200006d8
 80073c0:	200033c0 	.word	0x200033c0

080073c4 <tag_callback>:
const char *tagname[] = { "temp", "pressure", "time", "led1", "sw1A", "sw1B", "sw1C", "sw1D", "sw2A", "sw2B", "sw2C",
		"sw2D", "butt1", "PG0", "PG1", "PG2", "RF1", "devid", "detinfo", "GPS", "AGC", (void*) NULL };
int i, j;

// the tag callback handler
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
//  LOCK_TCPIP_CORE();
	if (ledsenabled) {
 80073c6:	4b52      	ldr	r3, [pc, #328]	; (8007510 <tag_callback+0x14c>)
tSSIHandler tag_callback(int index, char *newstring, int maxlen) {
 80073c8:	4606      	mov	r6, r0
 80073ca:	460f      	mov	r7, r1
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80073cc:	4851      	ldr	r0, [pc, #324]	; (8007514 <tag_callback+0x150>)
	if (ledsenabled) {
 80073ce:	881a      	ldrh	r2, [r3, #0]
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80073d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
	if (ledsenabled) {
 80073d4:	b35a      	cbz	r2, 800742e <tag_callback+0x6a>
		HAL_GPIO_TogglePin(GPIOD, LED_D3_Pin);
 80073d6:	f004 f9db 	bl	800b790 <HAL_GPIO_TogglePin>
 80073da:	4c4f      	ldr	r4, [pc, #316]	; (8007518 <tag_callback+0x154>)
	} else {
		printf("semaphore take2 failed\n");
	}
#endif
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
		printf("sem wait 2\n");
 80073dc:	4d4f      	ldr	r5, [pc, #316]	; (800751c <tag_callback+0x158>)
 80073de:	e001      	b.n	80073e4 <tag_callback+0x20>
 80073e0:	f01d fdd4 	bl	8024f8c <puts>
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80073e4:	2101      	movs	r1, #1
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	f00e fb62 	bl	8015ab0 <xQueueSemaphoreTake>
 80073ec:	4603      	mov	r3, r0
		printf("sem wait 2\n");
 80073ee:	4628      	mov	r0, r5
	while (!(xSemaphoreTake(ssicontentHandle,( TickType_t ) 1 ) == pdTRUE)) {// get the ssi generation semaphore (portMAX_DELAY == infinite)
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d1f5      	bne.n	80073e0 <tag_callback+0x1c>
	}
	{
//		printf("sem2 wait done\n");
	}

	if ((index > 3) && (index < 12)) {		// omux array
 80073f4:	1f32      	subs	r2, r6, #4
 80073f6:	2a07      	cmp	r2, #7
 80073f8:	d81c      	bhi.n	8007434 <tag_callback+0x70>
		i = index - 4;		// 0 to 7
		i = (muxdat[0] & (1 << i));
 80073fa:	4949      	ldr	r1, [pc, #292]	; (8007520 <tag_callback+0x15c>)
 80073fc:	4093      	lsls	r3, r2
 80073fe:	780a      	ldrb	r2, [r1, #0]
 8007400:	4013      	ands	r3, r2
 8007402:	4a48      	ldr	r2, [pc, #288]	; (8007524 <tag_callback+0x160>)
 8007404:	6013      	str	r3, [r2, #0]
		if (i == 0)		// around the houses
 8007406:	bb5b      	cbnz	r3, 8007460 <tag_callback+0x9c>
			strcpy(newstring, "0");
 8007408:	4b47      	ldr	r3, [pc, #284]	; (8007528 <tag_callback+0x164>)
 800740a:	881b      	ldrh	r3, [r3, #0]
 800740c:	803b      	strh	r3, [r7, #0]
			break;
		}
//		sprintf(newstring,"index=%d",index);
//  UNLOCK_TCPIP_CORE();

	if (xSemaphoreGive(ssicontentHandle) != pdTRUE) {		// give the ssi generation semaphore
 800740e:	2300      	movs	r3, #0
 8007410:	6820      	ldr	r0, [r4, #0]
 8007412:	461a      	mov	r2, r3
 8007414:	4619      	mov	r1, r3
 8007416:	f00e f8b1 	bl	801557c <xQueueGenericSend>
 800741a:	2801      	cmp	r0, #1
 800741c:	d002      	beq.n	8007424 <tag_callback+0x60>
		printf("semaphore give2 failed\n");		// expect this to fail as part of the normal setup
 800741e:	4843      	ldr	r0, [pc, #268]	; (800752c <tag_callback+0x168>)
 8007420:	f01d fdb4 	bl	8024f8c <puts>
	}
	return (strlen(newstring));
 8007424:	4638      	mov	r0, r7
}
 8007426:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return (strlen(newstring));
 800742a:	f7f8 bf13 	b.w	8000254 <strlen>
		HAL_GPIO_WritePin(GPIOD, LED_D3_Pin, GPIO_PIN_RESET);
 800742e:	f004 f995 	bl	800b75c <HAL_GPIO_WritePin>
 8007432:	e7d2      	b.n	80073da <tag_callback+0x16>
		switch (index) {
 8007434:	2e14      	cmp	r6, #20
 8007436:	d817      	bhi.n	8007468 <tag_callback+0xa4>
 8007438:	e8df f006 	tbb	[pc, r6]
 800743c:	0b655055 	.word	0x0b655055
 8007440:	16161616 	.word	0x16161616
 8007444:	16161616 	.word	0x16161616
 8007448:	343d5a61 	.word	0x343d5a61
 800744c:	464b2429 	.word	0x464b2429
 8007450:	1c          	.byte	0x1c
 8007451:	00          	.byte	0x00
			if (HAL_GPIO_ReadPin(GPIOD, LED_D4_Pin) == GPIO_PIN_SET)
 8007452:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007456:	482f      	ldr	r0, [pc, #188]	; (8007514 <tag_callback+0x150>)
 8007458:	f004 f96e 	bl	800b738 <HAL_GPIO_ReadPin>
 800745c:	2801      	cmp	r0, #1
 800745e:	d1d3      	bne.n	8007408 <tag_callback+0x44>
			strcpy(newstring, "1");
 8007460:	4b33      	ldr	r3, [pc, #204]	; (8007530 <tag_callback+0x16c>)
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	803b      	strh	r3, [r7, #0]
 8007466:	e7d2      	b.n	800740e <tag_callback+0x4a>
			sprintf(newstring, "\"ssi_handler: bad tag index %d\"", index);
 8007468:	4632      	mov	r2, r6
 800746a:	4932      	ldr	r1, [pc, #200]	; (8007534 <tag_callback+0x170>)
 800746c:	4638      	mov	r0, r7
 800746e:	f01d fedb 	bl	8025228 <siprintf>
			break;
 8007472:	e7cc      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, (agc) ? "1" : "0");		// AGC Status
 8007474:	4b30      	ldr	r3, [pc, #192]	; (8007538 <tag_callback+0x174>)
 8007476:	881b      	ldrh	r3, [r3, #0]
 8007478:	2b00      	cmp	r3, #0
 800747a:	bf14      	ite	ne
 800747c:	2331      	movne	r3, #49	; 0x31
 800747e:	2330      	moveq	r3, #48	; 0x30
 8007480:	803b      	strh	r3, [r7, #0]
			break;
 8007482:	e7c4      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, snstr);			// Detector ID
 8007484:	492d      	ldr	r1, [pc, #180]	; (800753c <tag_callback+0x178>)
 8007486:	4638      	mov	r0, r7
 8007488:	f01d ff75 	bl	8025376 <strcpy>
			break;
 800748c:	e7bf      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, (HAL_GPIO_ReadPin(GPIOE, LP_FILT_Pin) ? "0" : "1"));
 800748e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007492:	482b      	ldr	r0, [pc, #172]	; (8007540 <tag_callback+0x17c>)
 8007494:	f004 f950 	bl	800b738 <HAL_GPIO_ReadPin>
 8007498:	2800      	cmp	r0, #0
 800749a:	bf14      	ite	ne
 800749c:	2330      	movne	r3, #48	; 0x30
 800749e:	2331      	moveq	r3, #49	; 0x31
 80074a0:	803b      	strh	r3, [r7, #0]
			break;
 80074a2:	e7b4      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 4) ? "1" : "0");
 80074a4:	4b27      	ldr	r3, [pc, #156]	; (8007544 <tag_callback+0x180>)
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	f013 0f04 	tst.w	r3, #4
 80074ac:	bf14      	ite	ne
 80074ae:	2331      	movne	r3, #49	; 0x31
 80074b0:	2330      	moveq	r3, #48	; 0x30
 80074b2:	803b      	strh	r3, [r7, #0]
			break;
 80074b4:	e7ab      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 2) ? "1" : "0");
 80074b6:	4b23      	ldr	r3, [pc, #140]	; (8007544 <tag_callback+0x180>)
 80074b8:	881b      	ldrh	r3, [r3, #0]
 80074ba:	f013 0f02 	tst.w	r3, #2
 80074be:	bf14      	ite	ne
 80074c0:	2331      	movne	r3, #49	; 0x31
 80074c2:	2330      	moveq	r3, #48	; 0x30
 80074c4:	803b      	strh	r3, [r7, #0]
			break;
 80074c6:	e7a2      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, gpsstr);		// GPS Status
 80074c8:	491f      	ldr	r1, [pc, #124]	; (8007548 <tag_callback+0x184>)
 80074ca:	4638      	mov	r0, r7
 80074cc:	f01d ff53 	bl	8025376 <strcpy>
			break;
 80074d0:	e79d      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, statstr);		// Detector Status
 80074d2:	491e      	ldr	r1, [pc, #120]	; (800754c <tag_callback+0x188>)
 80074d4:	4638      	mov	r0, r7
 80074d6:	f01d ff4e 	bl	8025376 <strcpy>
			break;
 80074da:	e798      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, pressstr);		// pressure
 80074dc:	491c      	ldr	r1, [pc, #112]	; (8007550 <tag_callback+0x18c>)
 80074de:	4638      	mov	r0, r7
 80074e0:	f01d ff49 	bl	8025376 <strcpy>
			break;
 80074e4:	e793      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, tempstr);		// temperature
 80074e6:	491b      	ldr	r1, [pc, #108]	; (8007554 <tag_callback+0x190>)
 80074e8:	4638      	mov	r0, r7
 80074ea:	f01d ff44 	bl	8025376 <strcpy>
			break;
 80074ee:	e78e      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, (pgagain & 1) ? "1" : "0");
 80074f0:	4b14      	ldr	r3, [pc, #80]	; (8007544 <tag_callback+0x180>)
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	f003 0301 	and.w	r3, r3, #1
 80074f8:	3330      	adds	r3, #48	; 0x30
 80074fa:	803b      	strh	r3, [r7, #0]
			break;
 80074fc:	e787      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, "5");
 80074fe:	4b16      	ldr	r3, [pc, #88]	; (8007558 <tag_callback+0x194>)
 8007500:	881b      	ldrh	r3, [r3, #0]
 8007502:	803b      	strh	r3, [r7, #0]
			break;
 8007504:	e783      	b.n	800740e <tag_callback+0x4a>
			strcpy(newstring, nowtimestr);
 8007506:	4915      	ldr	r1, [pc, #84]	; (800755c <tag_callback+0x198>)
 8007508:	4638      	mov	r0, r7
 800750a:	f01d ff34 	bl	8025376 <strcpy>
			break;
 800750e:	e77e      	b.n	800740e <tag_callback+0x4a>
 8007510:	20000254 	.word	0x20000254
 8007514:	40020c00 	.word	0x40020c00
 8007518:	20002d88 	.word	0x20002d88
 800751c:	0802be08 	.word	0x0802be08
 8007520:	20000258 	.word	0x20000258
 8007524:	200033dc 	.word	0x200033dc
 8007528:	08044f04 	.word	0x08044f04
 800752c:	0802be34 	.word	0x0802be34
 8007530:	0802bbe8 	.word	0x0802bbe8
 8007534:	0802be14 	.word	0x0802be14
 8007538:	20000014 	.word	0x20000014
 800753c:	20000088 	.word	0x20000088
 8007540:	40021000 	.word	0x40021000
 8007544:	20003340 	.word	0x20003340
 8007548:	20000018 	.word	0x20000018
 800754c:	2000012c 	.word	0x2000012c
 8007550:	20000078 	.word	0x20000078
 8007554:	20000234 	.word	0x20000234
 8007558:	080432e8 	.word	0x080432e8
 800755c:	20000058 	.word	0x20000058

08007560 <httpd_cgi_handler>:
		char **http_cgi_param_vals) {
 8007560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007564:	b085      	sub	sp, #20
 8007566:	4615      	mov	r5, r2
 8007568:	460c      	mov	r4, r1
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 800756a:	220a      	movs	r2, #10
 800756c:	a903      	add	r1, sp, #12
 800756e:	6818      	ldr	r0, [r3, #0]
		char **http_cgi_param_vals) {
 8007570:	4699      	mov	r9, r3
 8007572:	9f0e      	ldr	r7, [sp, #56]	; 0x38
	j = strtol(*http_cgi_params, &ptr, 10);		// allow two chars len for the number
 8007574:	f01e fcda 	bl	8025f2c <strtol>
 8007578:	4606      	mov	r6, r0
	printf("httpd_cgi_handler: uri=%s, count=%d j=%d\n", uri, count, j);
 800757a:	4621      	mov	r1, r4
 800757c:	462a      	mov	r2, r5
 800757e:	4871      	ldr	r0, [pc, #452]	; (8007744 <httpd_cgi_handler+0x1e4>)
 8007580:	4633      	mov	r3, r6
 8007582:	f01d fc67 	bl	8024e54 <iprintf>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007586:	2d00      	cmp	r5, #0
 8007588:	dd37      	ble.n	80075fa <httpd_cgi_handler+0x9a>
 800758a:	2400      	movs	r4, #0
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 800758c:	f8df b1e4 	ldr.w	fp, [pc, #484]	; 8007774 <httpd_cgi_handler+0x214>
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 8007590:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8007778 <httpd_cgi_handler+0x218>
		switch (j) {
 8007594:	f1a6 030a 	sub.w	r3, r6, #10
 8007598:	2b0e      	cmp	r3, #14
 800759a:	f200 80cc 	bhi.w	8007736 <httpd_cgi_handler+0x1d6>
 800759e:	e8df f003 	tbb	[pc, r3]
 80075a2:	9eb6      	.short	0x9eb6
 80075a4:	08080808 	.word	0x08080808
 80075a8:	08080808 	.word	0x08080808
 80075ac:	864d6073 	.word	0x864d6073
 80075b0:	3a          	.byte	0x3a
 80075b1:	00          	.byte	0x00
			if (((*http_cgi_param_vals)[i]) == '0') {
 80075b2:	683a      	ldr	r2, [r7, #0]
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80075b4:	2101      	movs	r1, #1
 80075b6:	f1a6 000c 	sub.w	r0, r6, #12
 80075ba:	4b63      	ldr	r3, [pc, #396]	; (8007748 <httpd_cgi_handler+0x1e8>)
			if (((*http_cgi_param_vals)[i]) == '0') {
 80075bc:	5d12      	ldrb	r2, [r2, r4]
			j -= 11;	// now offset 0
 80075be:	f1a6 080b 	sub.w	r8, r6, #11
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80075c2:	4081      	lsls	r1, r0
			if (((*http_cgi_param_vals)[i]) == '0') {
 80075c4:	2a30      	cmp	r2, #48	; 0x30
 80075c6:	d01b      	beq.n	8007600 <httpd_cgi_handler+0xa0>
				muxdat[0] = muxdat[0] | (1 << (j - 1));
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	4311      	orrs	r1, r2
 80075cc:	b2c9      	uxtb	r1, r1
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80075ce:	f001 0202 	and.w	r2, r1, #2
 80075d2:	7019      	strb	r1, [r3, #0]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80075d4:	4650      	mov	r0, sl
			j -= 11;	// now offset 0
 80075d6:	4646      	mov	r6, r8
			logampmode = muxdat[0] & 2;		// lin/logamp output mux
 80075d8:	f8cb 2000 	str.w	r2, [fp]
			printf("setting outmux to 0x%02x\n", muxdat[0]);
 80075dc:	f01d fc3a 	bl	8024e54 <iprintf>
			if (HAL_I2C_Master_Transmit(&hi2c1, 0x44 << 1, &muxdat[0], 1, 1000) != HAL_OK) {		// RF dual MUX
 80075e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80075e4:	2301      	movs	r3, #1
 80075e6:	4a58      	ldr	r2, [pc, #352]	; (8007748 <httpd_cgi_handler+0x1e8>)
 80075e8:	9100      	str	r1, [sp, #0]
 80075ea:	2188      	movs	r1, #136	; 0x88
 80075ec:	4857      	ldr	r0, [pc, #348]	; (800774c <httpd_cgi_handler+0x1ec>)
 80075ee:	f004 fbbb 	bl	800bd68 <HAL_I2C_Master_Transmit>
 80075f2:	b960      	cbnz	r0, 800760e <httpd_cgi_handler+0xae>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80075f4:	3401      	adds	r4, #1
 80075f6:	42a5      	cmp	r5, r4
 80075f8:	d1cc      	bne.n	8007594 <httpd_cgi_handler+0x34>
}
 80075fa:	b005      	add	sp, #20
 80075fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				muxdat[0] = muxdat[0] & ~(1 << (j - 1));
 8007600:	2101      	movs	r1, #1
 8007602:	fa01 f600 	lsl.w	r6, r1, r0
 8007606:	7819      	ldrb	r1, [r3, #0]
 8007608:	ea21 0106 	bic.w	r1, r1, r6
 800760c:	e7df      	b.n	80075ce <httpd_cgi_handler+0x6e>
				printf("I2C HAL returned error 1\n\r");
 800760e:	4850      	ldr	r0, [pc, #320]	; (8007750 <httpd_cgi_handler+0x1f0>)
 8007610:	f01d fc20 	bl	8024e54 <iprintf>
 8007614:	e7ee      	b.n	80075f4 <httpd_cgi_handler+0x94>
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007616:	6839      	ldr	r1, [r7, #0]
 8007618:	3c01      	subs	r4, #1
 800761a:	484e      	ldr	r0, [pc, #312]	; (8007754 <httpd_cgi_handler+0x1f4>)
 800761c:	440c      	add	r4, r1
 800761e:	4623      	mov	r3, r4
 8007620:	f814 2f01 	ldrb.w	r2, [r4, #1]!
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007624:	3302      	adds	r3, #2
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007626:	3a30      	subs	r2, #48	; 0x30
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007628:	eba3 0301 	sub.w	r3, r3, r1
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 800762c:	bf18      	it	ne
 800762e:	2201      	movne	r2, #1
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007630:	429d      	cmp	r5, r3
			agc = (((*http_cgi_param_vals)[i]) == '0' ? 0 : 1);
 8007632:	8002      	strh	r2, [r0, #0]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007634:	dcf3      	bgt.n	800761e <httpd_cgi_handler+0xbe>
}
 8007636:	b005      	add	sp, #20
 8007638:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763c:	4e46      	ldr	r6, [pc, #280]	; (8007758 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007644:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007646:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~1 : pgagain | 1);
 8007648:	2b30      	cmp	r3, #48	; 0x30
 800764a:	bf0c      	ite	eq
 800764c:	f020 0001 	biceq.w	r0, r0, #1
 8007650:	f040 0001 	orrne.w	r0, r0, #1
			setpgagain(val);
 8007654:	f7fd fefc 	bl	8005450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007658:	42a5      	cmp	r5, r4
 800765a:	dcf0      	bgt.n	800763e <httpd_cgi_handler+0xde>
}
 800765c:	b005      	add	sp, #20
 800765e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007662:	4e3d      	ldr	r6, [pc, #244]	; (8007758 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f9b6 0000 	ldrsh.w	r0, [r6]
 800766a:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800766c:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~2 : pgagain | 2);
 800766e:	2b30      	cmp	r3, #48	; 0x30
 8007670:	bf0c      	ite	eq
 8007672:	f020 0002 	biceq.w	r0, r0, #2
 8007676:	f040 0002 	orrne.w	r0, r0, #2
			setpgagain(val);
 800767a:	f7fd fee9 	bl	8005450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 800767e:	42a5      	cmp	r5, r4
 8007680:	dcf0      	bgt.n	8007664 <httpd_cgi_handler+0x104>
}
 8007682:	b005      	add	sp, #20
 8007684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007688:	4e33      	ldr	r6, [pc, #204]	; (8007758 <httpd_cgi_handler+0x1f8>)
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	f9b6 0000 	ldrsh.w	r0, [r6]
 8007690:	5d1b      	ldrb	r3, [r3, r4]
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007692:	3401      	adds	r4, #1
			val = (((*http_cgi_param_vals)[i]) == '0' ? pgagain & ~4 : pgagain | 4);
 8007694:	2b30      	cmp	r3, #48	; 0x30
 8007696:	bf0c      	ite	eq
 8007698:	f020 0004 	biceq.w	r0, r0, #4
 800769c:	f040 0004 	orrne.w	r0, r0, #4
			setpgagain(val);
 80076a0:	f7fd fed6 	bl	8005450 <setpgagain>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80076a4:	42a5      	cmp	r5, r4
 80076a6:	dcf0      	bgt.n	800768a <httpd_cgi_handler+0x12a>
}
 80076a8:	b005      	add	sp, #20
 80076aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076ae:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80076b0:	4e2a      	ldr	r6, [pc, #168]	; (800775c <httpd_cgi_handler+0x1fc>)
 80076b2:	e004      	b.n	80076be <httpd_cgi_handler+0x15e>
 80076b4:	f004 f852 	bl	800b75c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80076b8:	42a5      	cmp	r5, r4
 80076ba:	dd9e      	ble.n	80075fa <httpd_cgi_handler+0x9a>
 80076bc:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '1')
 80076be:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_SET);		// select RF Switches to bypass LP filter
 80076c0:	2201      	movs	r2, #1
 80076c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076c6:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '1')
 80076c8:	4423      	add	r3, r4
 80076ca:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80076ce:	2b31      	cmp	r3, #49	; 0x31
 80076d0:	d1f0      	bne.n	80076b4 <httpd_cgi_handler+0x154>
				HAL_GPIO_WritePin(GPIOE, LP_FILT_Pin, GPIO_PIN_RESET);// select RF Switches to LP filter (normal route)
 80076d2:	2200      	movs	r2, #0
 80076d4:	f004 f842 	bl	800b75c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80076d8:	42a5      	cmp	r5, r4
 80076da:	dcef      	bgt.n	80076bc <httpd_cgi_handler+0x15c>
 80076dc:	e78d      	b.n	80075fa <httpd_cgi_handler+0x9a>
 80076de:	3401      	adds	r4, #1
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80076e0:	4e1f      	ldr	r6, [pc, #124]	; (8007760 <httpd_cgi_handler+0x200>)
 80076e2:	e004      	b.n	80076ee <httpd_cgi_handler+0x18e>
 80076e4:	f004 f83a 	bl	800b75c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 80076e8:	42ac      	cmp	r4, r5
 80076ea:	da86      	bge.n	80075fa <httpd_cgi_handler+0x9a>
 80076ec:	3401      	adds	r4, #1
			if (((*http_cgi_param_vals)[i]) == '0')
 80076ee:	683b      	ldr	r3, [r7, #0]
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_SET);
 80076f0:	2201      	movs	r2, #1
 80076f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076f6:	4630      	mov	r0, r6
			if (((*http_cgi_param_vals)[i]) == '0')
 80076f8:	4423      	add	r3, r4
 80076fa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80076fe:	2b30      	cmp	r3, #48	; 0x30
 8007700:	d1f0      	bne.n	80076e4 <httpd_cgi_handler+0x184>
				HAL_GPIO_WritePin(GPIOD, LED_D4_Pin, GPIO_PIN_RESET);
 8007702:	2200      	movs	r2, #0
 8007704:	f004 f82a 	bl	800b75c <HAL_GPIO_WritePin>
	for (i = 0; i < count; i++) {			/// number of things sent from the form
 8007708:	42a5      	cmp	r5, r4
 800770a:	dcef      	bgt.n	80076ec <httpd_cgi_handler+0x18c>
 800770c:	e775      	b.n	80075fa <httpd_cgi_handler+0x9a>
			printf("Reboot command from wwww\n");
 800770e:	4815      	ldr	r0, [pc, #84]	; (8007764 <httpd_cgi_handler+0x204>)
 8007710:	f01d fc3c 	bl	8024f8c <puts>
			osDelay(500);
 8007714:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007718:	f00d fc06 	bl	8014f28 <osDelay>
 800771c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007720:	4911      	ldr	r1, [pc, #68]	; (8007768 <httpd_cgi_handler+0x208>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007722:	4b12      	ldr	r3, [pc, #72]	; (800776c <httpd_cgi_handler+0x20c>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007724:	68ca      	ldr	r2, [r1, #12]
 8007726:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800772a:	4313      	orrs	r3, r2
 800772c:	60cb      	str	r3, [r1, #12]
 800772e:	f3bf 8f4f 	dsb	sy
    __NOP();
 8007732:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8007734:	e7fd      	b.n	8007732 <httpd_cgi_handler+0x1d2>
			printf("Unknown id in cgi handler %s\n", *http_cgi_params);
 8007736:	f8d9 1000 	ldr.w	r1, [r9]
 800773a:	480d      	ldr	r0, [pc, #52]	; (8007770 <httpd_cgi_handler+0x210>)
 800773c:	f01d fb8a 	bl	8024e54 <iprintf>
			break;
 8007740:	e758      	b.n	80075f4 <httpd_cgi_handler+0x94>
 8007742:	bf00      	nop
 8007744:	0802be4c 	.word	0x0802be4c
 8007748:	20000258 	.word	0x20000258
 800774c:	20002534 	.word	0x20002534
 8007750:	0802b77c 	.word	0x0802b77c
 8007754:	20000014 	.word	0x20000014
 8007758:	20003340 	.word	0x20003340
 800775c:	40021000 	.word	0x40021000
 8007760:	40020c00 	.word	0x40020c00
 8007764:	0802be78 	.word	0x0802be78
 8007768:	e000ed00 	.word	0xe000ed00
 800776c:	05fa0004 	.word	0x05fa0004
 8007770:	0802beb0 	.word	0x0802beb0
 8007774:	2000333c 	.word	0x2000333c
 8007778:	0802be94 	.word	0x0802be94

0800777c <httpd_post_receive_data>:
err_t httpd_post_receive_data(void *connection, struct pbuf *p) {
 800777c:	b508      	push	{r3, lr}
	printf("httpd_post_receive_data: \n");
 800777e:	4802      	ldr	r0, [pc, #8]	; (8007788 <httpd_post_receive_data+0xc>)
 8007780:	f01d fc04 	bl	8024f8c <puts>
}
 8007784:	2000      	movs	r0, #0
 8007786:	bd08      	pop	{r3, pc}
 8007788:	0802bed0 	.word	0x0802bed0

0800778c <httpd_post_begin>:
		int content_len, char *response_uri, u16_t response_uri_len, u8_t *post_auto_wnd) {
 800778c:	b508      	push	{r3, lr}
	printf("httpd_post_begin: \n");
 800778e:	4802      	ldr	r0, [pc, #8]	; (8007798 <httpd_post_begin+0xc>)
 8007790:	f01d fbfc 	bl	8024f8c <puts>
}
 8007794:	2000      	movs	r0, #0
 8007796:	bd08      	pop	{r3, pc}
 8007798:	0802beec 	.word	0x0802beec

0800779c <httpd_post_finished>:
	printf("httpd_post_finished: \n");
 800779c:	4801      	ldr	r0, [pc, #4]	; (80077a4 <httpd_post_finished+0x8>)
 800779e:	f01d bbf5 	b.w	8024f8c <puts>
 80077a2:	bf00      	nop
 80077a4:	0802bf00 	.word	0x0802bf00

080077a8 <init_httpd_ssi>:

// embedded ssi tag handler setup
init_httpd_ssi() {

	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80077a8:	4803      	ldr	r0, [pc, #12]	; (80077b8 <init_httpd_ssi+0x10>)
 80077aa:	2215      	movs	r2, #21
 80077ac:	4903      	ldr	r1, [pc, #12]	; (80077bc <init_httpd_ssi+0x14>)
init_httpd_ssi() {
 80077ae:	b508      	push	{r3, lr}
	http_set_ssi_handler(tag_callback, tagname, 21);	// was 32
 80077b0:	f011 fa1a 	bl	8018be8 <http_set_ssi_handler>
}
 80077b4:	bd08      	pop	{r3, pc}
 80077b6:	bf00      	nop
 80077b8:	080073c5 	.word	0x080073c5
 80077bc:	20000264 	.word	0x20000264

080077c0 <parsep2>:

///////////////////////////////////////////////////////
/// parse p2 params
// return 0 for success
//////////////////////////////////////////////////////
int parsep2(char *buf, char *match, int type, void *value) {
 80077c0:	b570      	push	{r4, r5, r6, lr}
	uint32_t *val;

	i = 0;
	j = 0;
	val = value;
	while ((buf[i]) && (buf[i] != '}')) {
 80077c2:	7804      	ldrb	r4, [r0, #0]
 80077c4:	b194      	cbz	r4, 80077ec <parsep2+0x2c>
 80077c6:	2c7d      	cmp	r4, #125	; 0x7d
 80077c8:	d010      	beq.n	80077ec <parsep2+0x2c>
	j = 0;
 80077ca:	f04f 0e00 	mov.w	lr, #0
	i = 0;
 80077ce:	4675      	mov	r5, lr
		if (buf[i++] == match[j]) {
 80077d0:	f811 600e 	ldrb.w	r6, [r1, lr]
 80077d4:	f105 0c01 	add.w	ip, r5, #1
 80077d8:	42a6      	cmp	r6, r4
			j++;
		} else {
			j = 0;
		}
		if (j > 0) {		// started matching something
			if (buf[i] == ':') {		// end of match
 80077da:	f810 400c 	ldrb.w	r4, [r0, ip]
		if (buf[i++] == match[j]) {
 80077de:	d008      	beq.n	80077f2 <parsep2+0x32>
 80077e0:	4665      	mov	r5, ip
			j = 0;
 80077e2:	f04f 0e00 	mov.w	lr, #0
	while ((buf[i]) && (buf[i] != '}')) {
 80077e6:	b10c      	cbz	r4, 80077ec <parsep2+0x2c>
 80077e8:	2c7d      	cmp	r4, #125	; 0x7d
 80077ea:	d1f1      	bne.n	80077d0 <parsep2+0x10>
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
				}
			}
		}
	}
	return (-1);
 80077ec:	f04f 30ff 	mov.w	r0, #4294967295
}
 80077f0:	bd70      	pop	{r4, r5, r6, pc}
			if (buf[i] == ':') {		// end of match
 80077f2:	2c3a      	cmp	r4, #58	; 0x3a
			j++;
 80077f4:	f10e 0e01 	add.w	lr, lr, #1
			if (buf[i] == ':') {		// end of match
 80077f8:	d001      	beq.n	80077fe <parsep2+0x3e>
		if (buf[i++] == match[j]) {
 80077fa:	4665      	mov	r5, ip
 80077fc:	e7f3      	b.n	80077e6 <parsep2+0x26>
				if (type == 1) {		// looking for a string
 80077fe:	2a01      	cmp	r2, #1
				i++;
 8007800:	f105 0502 	add.w	r5, r5, #2
				if (type == 1) {		// looking for a string
 8007804:	d005      	beq.n	8007812 <parsep2+0x52>
				} else if (type == 2) { // uint32_t base 10 string
 8007806:	2a02      	cmp	r2, #2
 8007808:	d01a      	beq.n	8007840 <parsep2+0x80>
				} else if (type == 3) { // uint32_t hex string
 800780a:	2a03      	cmp	r2, #3
 800780c:	d022      	beq.n	8007854 <parsep2+0x94>
	while ((buf[i]) && (buf[i] != '}')) {
 800780e:	5d44      	ldrb	r4, [r0, r5]
 8007810:	e7e9      	b.n	80077e6 <parsep2+0x26>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007812:	5d44      	ldrb	r4, [r0, r5]
 8007814:	1941      	adds	r1, r0, r5
 8007816:	b36c      	cbz	r4, 8007874 <parsep2+0xb4>
 8007818:	1e5d      	subs	r5, r3, #1
					j = 0;
 800781a:	2200      	movs	r2, #0
 800781c:	4e17      	ldr	r6, [pc, #92]	; (800787c <parsep2+0xbc>)
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 800781e:	5d30      	ldrb	r0, [r6, r4]
 8007820:	0740      	lsls	r0, r0, #29
 8007822:	d101      	bne.n	8007828 <parsep2+0x68>
 8007824:	2c2e      	cmp	r4, #46	; 0x2e
 8007826:	d11f      	bne.n	8007868 <parsep2+0xa8>
						pch[j++] = buf[i++];
 8007828:	f805 4f01 	strb.w	r4, [r5, #1]!
 800782c:	3201      	adds	r2, #1
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 800782e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007832:	2c00      	cmp	r4, #0
 8007834:	d1f3      	bne.n	800781e <parsep2+0x5e>
					pch[j] = 0;
 8007836:	4413      	add	r3, r2
 8007838:	4620      	mov	r0, r4
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
}
 800783e:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%u", val) == 1) ? 0 : -1);
 8007840:	461a      	mov	r2, r3
 8007842:	490f      	ldr	r1, [pc, #60]	; (8007880 <parsep2+0xc0>)
 8007844:	4428      	add	r0, r5
 8007846:	f01d fd0f 	bl	8025268 <siscanf>
 800784a:	3801      	subs	r0, #1
 800784c:	bf18      	it	ne
 800784e:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007852:	bd70      	pop	{r4, r5, r6, pc}
					return ((sscanf(&buf[i], "%x", val) == 1) ? 0 : -1);
 8007854:	461a      	mov	r2, r3
 8007856:	490b      	ldr	r1, [pc, #44]	; (8007884 <parsep2+0xc4>)
 8007858:	4428      	add	r0, r5
 800785a:	f01d fd05 	bl	8025268 <siscanf>
 800785e:	3801      	subs	r0, #1
 8007860:	bf18      	it	ne
 8007862:	f04f 30ff 	movne.w	r0, #4294967295
}
 8007866:	bd70      	pop	{r4, r5, r6, pc}
					return ((j > 0) ? 0 : -1);
 8007868:	fab2 f082 	clz	r0, r2
					pch[j] = 0;
 800786c:	4413      	add	r3, r2
					return ((j > 0) ? 0 : -1);
 800786e:	0940      	lsrs	r0, r0, #5
 8007870:	4240      	negs	r0, r0
 8007872:	e7e2      	b.n	800783a <parsep2+0x7a>
					while ((buf[i]) && ((isalnum(buf[i])) || (buf[i] == '.'))) {
 8007874:	f04f 30ff 	mov.w	r0, #4294967295
 8007878:	e7df      	b.n	800783a <parsep2+0x7a>
 800787a:	bf00      	nop
 800787c:	08045585 	.word	0x08045585
 8007880:	0802bf18 	.word	0x0802bf18
 8007884:	0802bf1c 	.word	0x0802bf1c

08007888 <returnpage>:

 p2 operands (strings):-
 */

// callback with the page
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 8007888:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile int nconv, res, res2;
	volatile int p1;
	volatile char p2[96];
	volatile char filename[32], s1[16];
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
	char host[17] = "192.168.0.248";
 800788a:	4b83      	ldr	r3, [pc, #524]	; (8007a98 <returnpage+0x210>)
void returnpage(volatile char *content, volatile u16_t charcount, int errorm) {
 800788c:	b0b7      	sub	sp, #220	; 0xdc
 800788e:	4606      	mov	r6, r0
 8007890:	4615      	mov	r5, r2
 8007892:	f8ad 100e 	strh.w	r1, [sp, #14]
	char host[17] = "192.168.0.248";
 8007896:	f10d 0c44 	add.w	ip, sp, #68	; 0x44

//	printf("returnpage:\n");
	if (expectedapage) {
 800789a:	4f80      	ldr	r7, [pc, #512]	; (8007a9c <returnpage+0x214>)
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 800789c:	2400      	movs	r4, #0
	char host[17] = "192.168.0.248";
 800789e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80078a0:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80078a4:	f8ac 3000 	strh.w	r3, [ip]
		if (errorm == 0) {
 80078a8:	683b      	ldr	r3, [r7, #0]
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 80078aa:	940b      	str	r4, [sp, #44]	; 0x2c
	char host[17] = "192.168.0.248";
 80078ac:	f88d 4054 	strb.w	r4, [sp, #84]	; 0x54
 80078b0:	f8ad 4052 	strh.w	r4, [sp, #82]	; 0x52
	volatile uint32_t crc1, crc2, n1 = 0, n2 = 0;
 80078b4:	940c      	str	r4, [sp, #48]	; 0x30
		if (errorm == 0) {
 80078b6:	b103      	cbz	r3, 80078ba <returnpage+0x32>
 80078b8:	b11d      	cbz	r5, 80078c2 <returnpage+0x3a>
					rebootme(0);
				}
			}
		}
	}
	expectedapage = 0;
 80078ba:	2300      	movs	r3, #0
 80078bc:	603b      	str	r3, [r7, #0]
}
 80078be:	b037      	add	sp, #220	; 0xdc
 80078c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			printf("server returned page: %.*s\n", charcount, content);
 80078c2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 80078c6:	4632      	mov	r2, r6
 80078c8:	4875      	ldr	r0, [pc, #468]	; (8007aa0 <returnpage+0x218>)
 80078ca:	b289      	uxth	r1, r1
 80078cc:	f01d fac2 	bl	8024e54 <iprintf>
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 80078d0:	ab1e      	add	r3, sp, #120	; 0x78
 80078d2:	4630      	mov	r0, r6
 80078d4:	aa04      	add	r2, sp, #16
 80078d6:	9301      	str	r3, [sp, #4]
 80078d8:	ab08      	add	r3, sp, #32
 80078da:	4972      	ldr	r1, [pc, #456]	; (8007aa4 <returnpage+0x21c>)
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	4b72      	ldr	r3, [pc, #456]	; (8007aa8 <returnpage+0x220>)
			s1[0] = '\0';
 80078e0:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
			nconv = sscanf(content, "%5u%48s%u%s", &sn, udp_target, &p1, &p2);
 80078e4:	f01d fcc0 	bl	8025268 <siscanf>
 80078e8:	9005      	str	r0, [sp, #20]
			if (nconv != EOF) {
 80078ea:	9b05      	ldr	r3, [sp, #20]
 80078ec:	3301      	adds	r3, #1
 80078ee:	f000 80b8 	beq.w	8007a62 <returnpage+0x1da>
				switch (nconv) {
 80078f2:	9b05      	ldr	r3, [sp, #20]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	2b03      	cmp	r3, #3
 80078f8:	f200 80c7 	bhi.w	8007a8a <returnpage+0x202>
 80078fc:	e8df f003 	tbb	[pc, r3]
 8007900:	02505962 	.word	0x02505962
					if (p2[0] == '{') {		// its the start of enclosed params
 8007904:	f89d 3078 	ldrb.w	r3, [sp, #120]	; 0x78
 8007908:	2b7b      	cmp	r3, #123	; 0x7b
 800790a:	d149      	bne.n	80079a0 <returnpage+0x118>
						res = 0;
 800790c:	2200      	movs	r2, #0
						res |= parsep2(&p2[1], "fw", 1, filename);
 800790e:	ab16      	add	r3, sp, #88	; 0x58
 8007910:	4966      	ldr	r1, [pc, #408]	; (8007aac <returnpage+0x224>)
 8007912:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res = 0;
 8007916:	9206      	str	r2, [sp, #24]
						res2 = 0;
 8007918:	9207      	str	r2, [sp, #28]
						res |= parsep2(&p2[1], "fw", 1, filename);
 800791a:	2201      	movs	r2, #1
 800791c:	f7ff ff50 	bl	80077c0 <parsep2>
 8007920:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007922:	2202      	movs	r2, #2
 8007924:	4962      	ldr	r1, [pc, #392]	; (8007ab0 <returnpage+0x228>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 8007926:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 8007928:	4b62      	ldr	r3, [pc, #392]	; (8007ab4 <returnpage+0x22c>)
						res |= parsep2(&p2[1], "fw", 1, filename);
 800792a:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 800792c:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007930:	f7ff ff46 	bl	80077c0 <parsep2>
 8007934:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007936:	2203      	movs	r2, #3
 8007938:	495f      	ldr	r1, [pc, #380]	; (8007ab8 <returnpage+0x230>)
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 800793a:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 800793c:	ab09      	add	r3, sp, #36	; 0x24
						res |= parsep2(&p2[1], "bld", 2, &newbuild);
 800793e:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007940:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007944:	f7ff ff3c 	bl	80077c0 <parsep2>
 8007948:	9b06      	ldr	r3, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 800794a:	2203      	movs	r2, #3
 800794c:	495b      	ldr	r1, [pc, #364]	; (8007abc <returnpage+0x234>)
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 800794e:	4318      	orrs	r0, r3
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007950:	ab0a      	add	r3, sp, #40	; 0x28
						res |= parsep2(&p2[1], "crc1", 3, &crc1);  // low addr
 8007952:	9006      	str	r0, [sp, #24]
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007954:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007958:	f7ff ff32 	bl	80077c0 <parsep2>
 800795c:	9b06      	ldr	r3, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 800795e:	2201      	movs	r2, #1
 8007960:	4957      	ldr	r1, [pc, #348]	; (8007ac0 <returnpage+0x238>)
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007962:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007964:	ab11      	add	r3, sp, #68	; 0x44
						res |= parsep2(&p2[1], "crc2", 3, &crc2);
 8007966:	9006      	str	r0, [sp, #24]
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007968:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 800796c:	f7ff ff28 	bl	80077c0 <parsep2>
 8007970:	9b07      	ldr	r3, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007972:	2203      	movs	r2, #3
 8007974:	4953      	ldr	r1, [pc, #332]	; (8007ac4 <returnpage+0x23c>)
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 8007976:	4318      	orrs	r0, r3
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007978:	ab0c      	add	r3, sp, #48	; 0x30
						res2 |= parsep2(&p2[1], "srv", 1, &host);
 800797a:	9007      	str	r0, [sp, #28]
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800797c:	f10d 0079 	add.w	r0, sp, #121	; 0x79
 8007980:	f7ff ff1e 	bl	80077c0 <parsep2>
 8007984:	9b07      	ldr	r3, [sp, #28]
 8007986:	4602      	mov	r2, r0
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007988:	494f      	ldr	r1, [pc, #316]	; (8007ac8 <returnpage+0x240>)
 800798a:	f10d 0079 	add.w	r0, sp, #121	; 0x79
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 800798e:	431a      	orrs	r2, r3
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007990:	ab0d      	add	r3, sp, #52	; 0x34
						res2 |= parsep2(&p2[1], "n2", 3, &n2);
 8007992:	9207      	str	r2, [sp, #28]
						res2 |= parsep2(&p2[1], "s1", 1, s1);
 8007994:	2201      	movs	r2, #1
 8007996:	f7ff ff13 	bl	80077c0 <parsep2>
 800799a:	9b07      	ldr	r3, [sp, #28]
 800799c:	4318      	orrs	r0, r3
 800799e:	9007      	str	r0, [sp, #28]
					if (p1 == 1) {		// reboot
 80079a0:	9b08      	ldr	r3, [sp, #32]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d04c      	beq.n	8007a40 <returnpage+0x1b8>
					if (p1 == 2) {		// freeze the UDP streaming
 80079a6:	9b08      	ldr	r3, [sp, #32]
 80079a8:	2b02      	cmp	r3, #2
						globalfreeze = 1;
 80079aa:	4b48      	ldr	r3, [pc, #288]	; (8007acc <returnpage+0x244>)
					if (p1 == 2) {		// freeze the UDP streaming
 80079ac:	d053      	beq.n	8007a56 <returnpage+0x1ce>
						globalfreeze = 0;
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
					if (strlen(udp_target) < 7) {					// bad url or ip address
 80079b2:	483d      	ldr	r0, [pc, #244]	; (8007aa8 <returnpage+0x220>)
 80079b4:	f7f8 fc4e 	bl	8000254 <strlen>
 80079b8:	2806      	cmp	r0, #6
 80079ba:	d958      	bls.n	8007a6e <returnpage+0x1e6>
					printf("Server -> Target UDP host: %s\n", udp_target);
 80079bc:	493a      	ldr	r1, [pc, #232]	; (8007aa8 <returnpage+0x220>)
 80079be:	4844      	ldr	r0, [pc, #272]	; (8007ad0 <returnpage+0x248>)
 80079c0:	f01d fa48 	bl	8024e54 <iprintf>
					if (statuspkt.uid != sn) {
 80079c4:	4d43      	ldr	r5, [pc, #268]	; (8007ad4 <returnpage+0x24c>)
 80079c6:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 80079ca:	9a04      	ldr	r2, [sp, #16]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d009      	beq.n	80079e6 <returnpage+0x15e>
						statuspkt.uid = sn;
 80079d2:	9b04      	ldr	r3, [sp, #16]
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80079d4:	4840      	ldr	r0, [pc, #256]	; (8007ad8 <returnpage+0x250>)
						statuspkt.uid = sn;
 80079d6:	b29b      	uxth	r3, r3
 80079d8:	f8a5 305c 	strh.w	r3, [r5, #92]	; 0x5c
						printf("Server -> Serial Number: %lu\n", statuspkt.uid);
 80079dc:	f8b5 105c 	ldrh.w	r1, [r5, #92]	; 0x5c
 80079e0:	b289      	uxth	r1, r1
 80079e2:	f01d fa37 	bl	8024e54 <iprintf>
			if (!res) {		// build changed?
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	b313      	cbz	r3, 8007a30 <returnpage+0x1a8>
			if ((statuspkt.uid != 0xfeed) && (newbuild != BUILDNO) && (http_downloading == NOT_LOADING)) {// the version advertised is different to this one running now
 80079ea:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 80079ee:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 80079f2:	b29b      	uxth	r3, r3
 80079f4:	4293      	cmp	r3, r2
 80079f6:	f43f af60 	beq.w	80078ba <returnpage+0x32>
 80079fa:	4a2e      	ldr	r2, [pc, #184]	; (8007ab4 <returnpage+0x22c>)
 80079fc:	f242 732e 	movw	r3, #10030	; 0x272e
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	429a      	cmp	r2, r3
 8007a04:	f43f af59 	beq.w	80078ba <returnpage+0x32>
 8007a08:	4b34      	ldr	r3, [pc, #208]	; (8007adc <returnpage+0x254>)
 8007a0a:	681c      	ldr	r4, [r3, #0]
 8007a0c:	2c00      	cmp	r4, #0
 8007a0e:	f47f af54 	bne.w	80078ba <returnpage+0x32>
				if (lptask_init_done == 0) {		// if running, reboot before trying to load
 8007a12:	4b33      	ldr	r3, [pc, #204]	; (8007ae0 <returnpage+0x258>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d130      	bne.n	8007a7c <returnpage+0x1f4>
					osDelay(1000);
 8007a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007a1e:	f00d fa83 	bl	8014f28 <osDelay>
					httploader(filename, host, crc1, crc2);	/// zzz  host ip ??
 8007a22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a24:	a911      	add	r1, sp, #68	; 0x44
 8007a26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a28:	a816      	add	r0, sp, #88	; 0x58
 8007a2a:	f7fa f9e7 	bl	8001dfc <httploader>
 8007a2e:	e744      	b.n	80078ba <returnpage+0x32>
				printf("Firmware: this build is %d, the server build is %d\n", BUILDNO, newbuild);
 8007a30:	4b20      	ldr	r3, [pc, #128]	; (8007ab4 <returnpage+0x22c>)
 8007a32:	f242 712e 	movw	r1, #10030	; 0x272e
 8007a36:	482b      	ldr	r0, [pc, #172]	; (8007ae4 <returnpage+0x25c>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	f01d fa0b 	bl	8024e54 <iprintf>
 8007a3e:	e7d4      	b.n	80079ea <returnpage+0x162>
						printf("Server -> commands a reboot...\n");
 8007a40:	4829      	ldr	r0, [pc, #164]	; (8007ae8 <returnpage+0x260>)
 8007a42:	f01d faa3 	bl	8024f8c <puts>
						osDelay(500);
 8007a46:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007a4a:	f00d fa6d 	bl	8014f28 <osDelay>
						rebootme(6);
 8007a4e:	2006      	movs	r0, #6
 8007a50:	f7fb fd14 	bl	800347c <rebootme>
 8007a54:	e7a7      	b.n	80079a6 <returnpage+0x11e>
						globalfreeze = 1;
 8007a56:	2201      	movs	r2, #1
						printf("Server -> commands a streaming freeze\n");
 8007a58:	4824      	ldr	r0, [pc, #144]	; (8007aec <returnpage+0x264>)
						globalfreeze = 1;
 8007a5a:	601a      	str	r2, [r3, #0]
						printf("Server -> commands a streaming freeze\n");
 8007a5c:	f01d fa96 	bl	8024f8c <puts>
 8007a60:	e7a7      	b.n	80079b2 <returnpage+0x12a>
				printf("returnpage: (error returned) errno=%d\n", errorm);
 8007a62:	4621      	mov	r1, r4
 8007a64:	4822      	ldr	r0, [pc, #136]	; (8007af0 <returnpage+0x268>)
 8007a66:	4d1b      	ldr	r5, [pc, #108]	; (8007ad4 <returnpage+0x24c>)
 8007a68:	f01d f9f4 	bl	8024e54 <iprintf>
 8007a6c:	e7bb      	b.n	80079e6 <returnpage+0x15e>
						strcpy(udp_target, SERVER_DESTINATION);		// default it
 8007a6e:	4d21      	ldr	r5, [pc, #132]	; (8007af4 <returnpage+0x26c>)
 8007a70:	4c0d      	ldr	r4, [pc, #52]	; (8007aa8 <returnpage+0x220>)
 8007a72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007a74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	e79f      	b.n	80079bc <returnpage+0x134>
					printf("Rebooting before loading new firmware, wait...\n");
 8007a7c:	481e      	ldr	r0, [pc, #120]	; (8007af8 <returnpage+0x270>)
 8007a7e:	f01d fa85 	bl	8024f8c <puts>
					rebootme(0);
 8007a82:	4620      	mov	r0, r4
 8007a84:	f7fb fcfa 	bl	800347c <rebootme>
 8007a88:	e717      	b.n	80078ba <returnpage+0x32>
					printf("Wrong number of params from Server -> %d\n", nconv);
 8007a8a:	9905      	ldr	r1, [sp, #20]
 8007a8c:	481b      	ldr	r0, [pc, #108]	; (8007afc <returnpage+0x274>)
 8007a8e:	4d11      	ldr	r5, [pc, #68]	; (8007ad4 <returnpage+0x24c>)
 8007a90:	f01d f9e0 	bl	8024e54 <iprintf>
					break;
 8007a94:	e7a7      	b.n	80079e6 <returnpage+0x15e>
 8007a96:	bf00      	nop
 8007a98:	08028fb4 	.word	0x08028fb4
 8007a9c:	200033d8 	.word	0x200033d8
 8007aa0:	0802bf20 	.word	0x0802bf20
 8007aa4:	0802bf3c 	.word	0x0802bf3c
 8007aa8:	20003420 	.word	0x20003420
 8007aac:	0802bf48 	.word	0x0802bf48
 8007ab0:	0802bf4c 	.word	0x0802bf4c
 8007ab4:	20002d80 	.word	0x20002d80
 8007ab8:	0802bf50 	.word	0x0802bf50
 8007abc:	0802bf58 	.word	0x0802bf58
 8007ac0:	0802bf60 	.word	0x0802bf60
 8007ac4:	0802bf64 	.word	0x0802bf64
 8007ac8:	0802bf68 	.word	0x0802bf68
 8007acc:	200033b4 	.word	0x200033b4
 8007ad0:	0802bfb4 	.word	0x0802bfb4
 8007ad4:	20002f6c 	.word	0x20002f6c
 8007ad8:	0802bfd4 	.word	0x0802bfd4
 8007adc:	20001880 	.word	0x20001880
 8007ae0:	20002d64 	.word	0x20002d64
 8007ae4:	0802c048 	.word	0x0802c048
 8007ae8:	0802bf6c 	.word	0x0802bf6c
 8007aec:	0802bf8c 	.word	0x0802bf8c
 8007af0:	0802c020 	.word	0x0802c020
 8007af4:	08029d98 	.word	0x08029d98
 8007af8:	0802c07c 	.word	0x0802c07c
 8007afc:	0802bff4 	.word	0x0802bff4

08007b00 <initialapisn>:

}

// get the serial number and udp target for this device
// reboot if fails
void initialapisn() {
 8007b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	int i, j;

	j = 1;
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007b04:	4c27      	ldr	r4, [pc, #156]	; (8007ba4 <initialapisn+0xa4>)
void initialapisn() {
 8007b06:	b084      	sub	sp, #16

	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007b08:	4d27      	ldr	r5, [pc, #156]	; (8007ba8 <initialapisn+0xa8>)
	sprintf(stmuid, "/api/Device/%lx%lx%lx", STM32_UUID[0], STM32_UUID[1], STM32_UUID[2]);
 8007b0a:	f504 6284 	add.w	r2, r4, #1056	; 0x420
 8007b0e:	4927      	ldr	r1, [pc, #156]	; (8007bac <initialapisn+0xac>)
 8007b10:	4827      	ldr	r0, [pc, #156]	; (8007bb0 <initialapisn+0xb0>)
 8007b12:	ca1c      	ldmia	r2, {r2, r3, r4}
 8007b14:	9400      	str	r4, [sp, #0]
 8007b16:	f01d fb87 	bl	8025228 <siprintf>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007b1a:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007b1e:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d132      	bne.n	8007b8e <initialapisn+0x8e>
	j = 1;
 8007b28:	2701      	movs	r7, #1
	{
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8007b2a:	f8df a094 	ldr.w	sl, [pc, #148]	; 8007bc0 <initialapisn+0xc0>
	printf("getpage: %s\n", page);
 8007b2e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8007bb0 <initialapisn+0xb0>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8007b32:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8007bc4 <initialapisn+0xc4>
		printf("getting S/N and UDP target using http. Try=%d\n", j);
 8007b36:	4639      	mov	r1, r7
 8007b38:	4650      	mov	r0, sl
 8007b3a:	f01d f98b 	bl	8024e54 <iprintf>
	printf("getpage: %s\n", page);
 8007b3e:	4649      	mov	r1, r9
 8007b40:	481c      	ldr	r0, [pc, #112]	; (8007bb4 <initialapisn+0xb4>)
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8007b42:	f241 3488 	movw	r4, #5000	; 0x1388
	printf("getpage: %s\n", page);
 8007b46:	f01d f985 	bl	8024e54 <iprintf>
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	481a      	ldr	r0, [pc, #104]	; (8007bb8 <initialapisn+0xb8>)
		getpage(stmuid);		// get sn and targ
		for (i = 0; i < 5000; i++) {
			if (statuspkt.uid != 0xfeed)
 8007b4e:	f64f 66ed 	movw	r6, #65261	; 0xfeed
	printf("Control Server is %s\n", SERVER_DESTINATION);
 8007b52:	f01d f97f 	bl	8024e54 <iprintf>
	result = hc_open(SERVER_DESTINATION, page, postvars, NULL);
 8007b56:	2300      	movs	r3, #0
 8007b58:	4649      	mov	r1, r9
 8007b5a:	4640      	mov	r0, r8
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	f7fa f8df 	bl	8001d20 <hc_open>
 8007b62:	9003      	str	r0, [sp, #12]
		for (i = 0; i < 5000; i++) {
 8007b64:	e003      	b.n	8007b6e <initialapisn+0x6e>
				break;
			osDelay(1);
 8007b66:	f00d f9df 	bl	8014f28 <osDelay>
		for (i = 0; i < 5000; i++) {
 8007b6a:	3c01      	subs	r4, #1
 8007b6c:	d005      	beq.n	8007b7a <initialapisn+0x7a>
			if (statuspkt.uid != 0xfeed)
 8007b6e:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
			osDelay(1);
 8007b72:	2001      	movs	r0, #1
			if (statuspkt.uid != 0xfeed)
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	42b3      	cmp	r3, r6
 8007b78:	d0f5      	beq.n	8007b66 <initialapisn+0x66>
		}
		j++;
 8007b7a:	3701      	adds	r7, #1
		if (j > 5) {
 8007b7c:	2f05      	cmp	r7, #5
 8007b7e:	dc09      	bgt.n	8007b94 <initialapisn+0x94>
	while (statuspkt.uid == 0xfeed)		// not yet found new S/N from server
 8007b80:	f8b5 305c 	ldrh.w	r3, [r5, #92]	; 0x5c
 8007b84:	f64f 62ed 	movw	r2, #65261	; 0xfeed
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d0d3      	beq.n	8007b36 <initialapisn+0x36>
			printf("************* ABORTED **************\n");
			rebootme(8);
		}
	}
}
 8007b8e:	b004      	add	sp, #16
 8007b90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			printf("************* ABORTED **************\n");
 8007b94:	4809      	ldr	r0, [pc, #36]	; (8007bbc <initialapisn+0xbc>)
 8007b96:	f01d f9f9 	bl	8024f8c <puts>
			rebootme(8);
 8007b9a:	2008      	movs	r0, #8
 8007b9c:	f7fb fc6e 	bl	800347c <rebootme>
 8007ba0:	e7ee      	b.n	8007b80 <initialapisn+0x80>
 8007ba2:	bf00      	nop
 8007ba4:	1ff0f000 	.word	0x1ff0f000
 8007ba8:	20002f6c 	.word	0x20002f6c
 8007bac:	0802c0d4 	.word	0x0802c0d4
 8007bb0:	200033e0 	.word	0x200033e0
 8007bb4:	0802c0ac 	.word	0x0802c0ac
 8007bb8:	0802c0bc 	.word	0x0802c0bc
 8007bbc:	0802c11c 	.word	0x0802c11c
 8007bc0:	0802c0ec 	.word	0x0802c0ec
 8007bc4:	08029d98 	.word	0x08029d98

08007bc8 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

 ldr   sp, =_estack      /* set stack pointer */
 8007bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007bce:	e003      	b.n	8007bd8 <LoopCopyDataInit>

08007bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007bd0:	4b0c      	ldr	r3, [pc, #48]	; (8007c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007bd6:	3104      	adds	r1, #4

08007bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007bd8:	480b      	ldr	r0, [pc, #44]	; (8007c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007be0:	d3f6      	bcc.n	8007bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8007be2:	4a0b      	ldr	r2, [pc, #44]	; (8007c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007be4:	e002      	b.n	8007bec <LoopFillZerobss>

08007be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007be8:	f842 3b04 	str.w	r3, [r2], #4

08007bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007bec:	4b09      	ldr	r3, [pc, #36]	; (8007c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007bf0:	d3f9      	bcc.n	8007be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007bf2:	f7ff f961 	bl	8006eb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007bf6:	f01c f80b 	bl	8023c10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007bfa:	f7fb fe57 	bl	80038ac <main>
  bx  lr    
 8007bfe:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8007c00:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8007c04:	08045dc4 	.word	0x08045dc4
  ldr  r0, =_sdata
 8007c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007c0c:	2000069c 	.word	0x2000069c
  ldr  r2, =_sbss
 8007c10:	200006a0 	.word	0x200006a0
  ldr  r3, = _ebss
 8007c14:	20030054 	.word	0x20030054

08007c18 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007c18:	e7fe      	b.n	8007c18 <CAN1_RX0_IRQHandler>
 8007c1a:	Address 0x0000000008007c1a is out of bounds.


08007c1c <HAL_Init>:
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c1c:	4a07      	ldr	r2, [pc, #28]	; (8007c3c <HAL_Init+0x20>)
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c1e:	2003      	movs	r0, #3
{
 8007c20:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007c22:	6813      	ldr	r3, [r2, #0]
 8007c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c28:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c2a:	f000 fc4f 	bl	80084cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007c2e:	2000      	movs	r0, #0
 8007c30:	f7ff f80e 	bl	8006c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007c34:	f7fe f88c 	bl	8005d50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8007c38:	2000      	movs	r0, #0
 8007c3a:	bd08      	pop	{r3, pc}
 8007c3c:	40023c00 	.word	0x40023c00

08007c40 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8007c40:	4a03      	ldr	r2, [pc, #12]	; (8007c50 <HAL_IncTick+0x10>)
 8007c42:	4b04      	ldr	r3, [pc, #16]	; (8007c54 <HAL_IncTick+0x14>)
 8007c44:	6811      	ldr	r1, [r2, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	440b      	add	r3, r1
 8007c4a:	6013      	str	r3, [r2, #0]
}
 8007c4c:	4770      	bx	lr
 8007c4e:	bf00      	nop
 8007c50:	20003460 	.word	0x20003460
 8007c54:	200002bc 	.word	0x200002bc

08007c58 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8007c58:	4b01      	ldr	r3, [pc, #4]	; (8007c60 <HAL_GetTick+0x8>)
 8007c5a:	6818      	ldr	r0, [r3, #0]
}
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20003460 	.word	0x20003460

08007c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007c64:	b538      	push	{r3, r4, r5, lr}
 8007c66:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8007c68:	f7ff fff6 	bl	8007c58 <HAL_GetTick>
 8007c6c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007c6e:	1c63      	adds	r3, r4, #1
 8007c70:	d002      	beq.n	8007c78 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8007c72:	4b04      	ldr	r3, [pc, #16]	; (8007c84 <HAL_Delay+0x20>)
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007c78:	f7ff ffee 	bl	8007c58 <HAL_GetTick>
 8007c7c:	1b43      	subs	r3, r0, r5
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	d3fa      	bcc.n	8007c78 <HAL_Delay+0x14>
  {
  }
}
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	200002bc 	.word	0x200002bc

08007c88 <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007c88:	2800      	cmp	r0, #0
 8007c8a:	f000 8144 	beq.w	8007f16 <HAL_ADC_Init+0x28e>
  {
    return HAL_ERROR;
  }
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007c8e:	6803      	ldr	r3, [r0, #0]
 8007c90:	49a7      	ldr	r1, [pc, #668]	; (8007f30 <HAL_ADC_Init+0x2a8>)
 8007c92:	4aa8      	ldr	r2, [pc, #672]	; (8007f34 <HAL_ADC_Init+0x2ac>)
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf18      	it	ne
 8007c98:	4293      	cmpne	r3, r2
{
 8007c9a:	b570      	push	{r4, r5, r6, lr}
 8007c9c:	4604      	mov	r4, r0
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007c9e:	d003      	beq.n	8007ca8 <HAL_ADC_Init+0x20>
 8007ca0:	f502 7280 	add.w	r2, r2, #256	; 0x100
 8007ca4:	4293      	cmp	r3, r2
 8007ca6:	d177      	bne.n	8007d98 <HAL_ADC_Init+0x110>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007ca8:	6863      	ldr	r3, [r4, #4]
 8007caa:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007cae:	d17c      	bne.n	8007daa <HAL_ADC_Init+0x122>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007cb6:	f040 8082 	bne.w	8007dbe <HAL_ADC_Init+0x136>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007cba:	6923      	ldr	r3, [r4, #16]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d84e      	bhi.n	8007d5e <HAL_ADC_Init+0xd6>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007cc0:	69a3      	ldr	r3, [r4, #24]
 8007cc2:	2b01      	cmp	r3, #1
 8007cc4:	d845      	bhi.n	8007d52 <HAL_ADC_Init+0xca>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007cc6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007cc8:	f022 7140 	bic.w	r1, r2, #50331648	; 0x3000000
 8007ccc:	f022 7080 	bic.w	r0, r2, #16777216	; 0x1000000
 8007cd0:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8007cd4:	bf18      	it	ne
 8007cd6:	2900      	cmpne	r1, #0
 8007cd8:	bf14      	ite	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	2300      	moveq	r3, #0
 8007cde:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 8007ce2:	bf0c      	ite	eq
 8007ce4:	2300      	moveq	r3, #0
 8007ce6:	f003 0301 	andne.w	r3, r3, #1
 8007cea:	f1b0 6f40 	cmp.w	r0, #201326592	; 0xc000000
 8007cee:	bf0c      	ite	eq
 8007cf0:	2300      	moveq	r3, #0
 8007cf2:	f003 0301 	andne.w	r3, r3, #1
 8007cf6:	b123      	cbz	r3, 8007d02 <HAL_ADC_Init+0x7a>
 8007cf8:	f102 4271 	add.w	r2, r2, #4043309056	; 0xf1000000
 8007cfc:	2a01      	cmp	r2, #1
 8007cfe:	f200 8111 	bhi.w	8007f24 <HAL_ADC_Init+0x29c>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007d02:	68e3      	ldr	r3, [r4, #12]
 8007d04:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 8007d08:	d165      	bne.n	8007dd6 <HAL_ADC_Init+0x14e>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007d0a:	69e3      	ldr	r3, [r4, #28]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	2b0f      	cmp	r3, #15
 8007d10:	d85b      	bhi.n	8007dca <HAL_ADC_Init+0x142>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007d12:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d830      	bhi.n	8007d7c <HAL_ADC_Init+0xf4>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007d1a:	6963      	ldr	r3, [r4, #20]
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d835      	bhi.n	8007d8c <HAL_ADC_Init+0x104>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007d20:	f894 3020 	ldrb.w	r3, [r4, #32]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d823      	bhi.n	8007d70 <HAL_ADC_Init+0xe8>

  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007d28:	4b83      	ldr	r3, [pc, #524]	; (8007f38 <HAL_ADC_Init+0x2b0>)
 8007d2a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d004      	beq.n	8007d3a <HAL_ADC_Init+0xb2>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007d30:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d32:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007d36:	f040 80e8 	bne.w	8007f0a <HAL_ADC_Init+0x282>
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8007d3a:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8007d3c:	2d00      	cmp	r5, #0
 8007d3e:	f000 80d4 	beq.w	8007eea <HAL_ADC_Init+0x262>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007d44:	06db      	lsls	r3, r3, #27
 8007d46:	d54c      	bpl.n	8007de2 <HAL_ADC_Init+0x15a>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007d48:	2300      	movs	r3, #0
    tmp_hal_status = HAL_ERROR;
 8007d4a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8007d4c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
}
 8007d50:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007d52:	f240 1151 	movw	r1, #337	; 0x151
 8007d56:	4879      	ldr	r0, [pc, #484]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d58:	f7fc fd6a 	bl	8004830 <assert_failed>
 8007d5c:	e7b3      	b.n	8007cc6 <HAL_ADC_Init+0x3e>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8007d5e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8007d62:	4876      	ldr	r0, [pc, #472]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d64:	f7fc fd64 	bl	8004830 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007d68:	69a3      	ldr	r3, [r4, #24]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d9ab      	bls.n	8007cc6 <HAL_ADC_Init+0x3e>
 8007d6e:	e7f0      	b.n	8007d52 <HAL_ADC_Init+0xca>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8007d70:	f240 1157 	movw	r1, #343	; 0x157
 8007d74:	4871      	ldr	r0, [pc, #452]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d76:	f7fc fd5b 	bl	8004830 <assert_failed>
 8007d7a:	e7d5      	b.n	8007d28 <HAL_ADC_Init+0xa0>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8007d7c:	f240 1155 	movw	r1, #341	; 0x155
 8007d80:	486e      	ldr	r0, [pc, #440]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d82:	f7fc fd55 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8007d86:	6963      	ldr	r3, [r4, #20]
 8007d88:	2b02      	cmp	r3, #2
 8007d8a:	d9c9      	bls.n	8007d20 <HAL_ADC_Init+0x98>
 8007d8c:	f44f 71ab 	mov.w	r1, #342	; 0x156
 8007d90:	486a      	ldr	r0, [pc, #424]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d92:	f7fc fd4d 	bl	8004830 <assert_failed>
 8007d96:	e7c3      	b.n	8007d20 <HAL_ADC_Init+0x98>
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8007d98:	f240 114d 	movw	r1, #333	; 0x14d
 8007d9c:	4867      	ldr	r0, [pc, #412]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007d9e:	f7fc fd47 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8007da2:	6863      	ldr	r3, [r4, #4]
 8007da4:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8007da8:	d082      	beq.n	8007cb0 <HAL_ADC_Init+0x28>
 8007daa:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8007dae:	4863      	ldr	r0, [pc, #396]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007db0:	f7fc fd3e 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8007db4:	68a3      	ldr	r3, [r4, #8]
 8007db6:	f033 7340 	bics.w	r3, r3, #50331648	; 0x3000000
 8007dba:	f43f af7e 	beq.w	8007cba <HAL_ADC_Init+0x32>
 8007dbe:	f240 114f 	movw	r1, #335	; 0x14f
 8007dc2:	485e      	ldr	r0, [pc, #376]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007dc4:	f7fc fd34 	bl	8004830 <assert_failed>
 8007dc8:	e777      	b.n	8007cba <HAL_ADC_Init+0x32>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8007dca:	f44f 71aa 	mov.w	r1, #340	; 0x154
 8007dce:	485b      	ldr	r0, [pc, #364]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007dd0:	f7fc fd2e 	bl	8004830 <assert_failed>
 8007dd4:	e79d      	b.n	8007d12 <HAL_ADC_Init+0x8a>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8007dd6:	f240 1153 	movw	r1, #339	; 0x153
 8007dda:	4858      	ldr	r0, [pc, #352]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007ddc:	f7fc fd28 	bl	8004830 <assert_failed>
 8007de0:	e793      	b.n	8007d0a <HAL_ADC_Init+0x82>
    ADC_STATE_CLR_SET(hadc->State,
 8007de2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007de4:	4b56      	ldr	r3, [pc, #344]	; (8007f40 <HAL_ADC_Init+0x2b8>)
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007de6:	4a57      	ldr	r2, [pc, #348]	; (8007f44 <HAL_ADC_Init+0x2bc>)
    ADC_STATE_CLR_SET(hadc->State,
 8007de8:	400b      	ands	r3, r1
 8007dea:	f043 0302 	orr.w	r3, r3, #2
 8007dee:	6423      	str	r3, [r4, #64]	; 0x40
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007df0:	6851      	ldr	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007df2:	6823      	ldr	r3, [r4, #0]
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007df4:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8007df8:	6051      	str	r1, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007dfa:	6851      	ldr	r1, [r2, #4]
 8007dfc:	6860      	ldr	r0, [r4, #4]
 8007dfe:	4301      	orrs	r1, r0
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e00:	484d      	ldr	r0, [pc, #308]	; (8007f38 <HAL_ADC_Init+0x2b0>)
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007e02:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e04:	6859      	ldr	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e06:	6925      	ldr	r5, [r4, #16]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007e08:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e0c:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e14:	68a5      	ldr	r5, [r4, #8]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007e16:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007e1e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e20:	6859      	ldr	r1, [r3, #4]
 8007e22:	4329      	orrs	r1, r5
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e24:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007e26:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007e28:	6899      	ldr	r1, [r3, #8]
 8007e2a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8007e2e:	6099      	str	r1, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e30:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e32:	689a      	ldr	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e34:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007e36:	ea42 0205 	orr.w	r2, r2, r5
 8007e3a:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e3c:	d05c      	beq.n	8007ef8 <HAL_ADC_Init+0x270>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e3e:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e40:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007e42:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8007e46:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	4311      	orrs	r1, r2
 8007e4c:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e4e:	6899      	ldr	r1, [r3, #8]
 8007e50:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8007e54:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	432a      	orrs	r2, r5
 8007e5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e5c:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e5e:	69a0      	ldr	r0, [r4, #24]
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e60:	f021 0102 	bic.w	r1, r1, #2
 8007e64:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e66:	689a      	ldr	r2, [r3, #8]
 8007e68:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8007e6c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e6e:	f894 2020 	ldrb.w	r2, [r4, #32]
 8007e72:	2a00      	cmp	r2, #0
 8007e74:	d051      	beq.n	8007f1a <HAL_ADC_Init+0x292>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007e76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007e78:	3a01      	subs	r2, #1
 8007e7a:	2a07      	cmp	r2, #7
 8007e7c:	d864      	bhi.n	8007f48 <HAL_ADC_Init+0x2c0>
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e7e:	6859      	ldr	r1, [r3, #4]
 8007e80:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007e84:	6059      	str	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e86:	6859      	ldr	r1, [r3, #4]
 8007e88:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8007e8c:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e8e:	6859      	ldr	r1, [r3, #4]
 8007e90:	ea41 3242 	orr.w	r2, r1, r2, lsl #13
 8007e94:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ADC_CLEAR_ERRORCODE(hadc);
 8007e98:	2600      	movs	r6, #0
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e9a:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e9c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ea0:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007ea2:	1e48      	subs	r0, r1, #1
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007ea6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ea8:	ea41 5100 	orr.w	r1, r1, r0, lsl #20
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007eac:	4630      	mov	r0, r6
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007eae:	62d9      	str	r1, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007eb0:	6899      	ldr	r1, [r3, #8]
 8007eb2:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8007eb6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007eb8:	6899      	ldr	r1, [r3, #8]
 8007eba:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8007ebe:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8007ec2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ec4:	6899      	ldr	r1, [r3, #8]
 8007ec6:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007eca:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ecc:	689a      	ldr	r2, [r3, #8]
 8007ece:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8007ed2:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8007ed4:	6466      	str	r6, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8007ed6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ed8:	f023 0303 	bic.w	r3, r3, #3
 8007edc:	f043 0301 	orr.w	r3, r3, #1
 8007ee0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007ee8:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8007eea:	4620      	mov	r0, r4
 8007eec:	f7fd ff68 	bl	8005dc0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8007ef0:	6465      	str	r5, [r4, #68]	; 0x44
    hadc->Lock = HAL_UNLOCKED;
 8007ef2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
 8007ef6:	e724      	b.n	8007d42 <HAL_ADC_Init+0xba>
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ef8:	689a      	ldr	r2, [r3, #8]
 8007efa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007efe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007f00:	689a      	ldr	r2, [r3, #8]
 8007f02:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007f06:	609a      	str	r2, [r3, #8]
 8007f08:	e7a8      	b.n	8007e5c <HAL_ADC_Init+0x1d4>
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8007f0a:	f240 115b 	movw	r1, #347	; 0x15b
 8007f0e:	480b      	ldr	r0, [pc, #44]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007f10:	f7fc fc8e 	bl	8004830 <assert_failed>
 8007f14:	e711      	b.n	8007d3a <HAL_ADC_Init+0xb2>
    return HAL_ERROR;
 8007f16:	2001      	movs	r0, #1
}
 8007f18:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007f20:	605a      	str	r2, [r3, #4]
 8007f22:	e7b8      	b.n	8007e96 <HAL_ADC_Init+0x20e>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8007f24:	f44f 71a9 	mov.w	r1, #338	; 0x152
 8007f28:	4804      	ldr	r0, [pc, #16]	; (8007f3c <HAL_ADC_Init+0x2b4>)
 8007f2a:	f7fc fc81 	bl	8004830 <assert_failed>
 8007f2e:	e6e8      	b.n	8007d02 <HAL_ADC_Init+0x7a>
 8007f30:	40012000 	.word	0x40012000
 8007f34:	40012100 	.word	0x40012100
 8007f38:	0f000001 	.word	0x0f000001
 8007f3c:	0802c144 	.word	0x0802c144
 8007f40:	ffffeefd 	.word	0xffffeefd
 8007f44:	40012300 	.word	0x40012300
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 8007f48:	f240 71ac 	movw	r1, #1964	; 0x7ac
 8007f4c:	4803      	ldr	r0, [pc, #12]	; (8007f5c <HAL_ADC_Init+0x2d4>)
 8007f4e:	f7fc fc6f 	bl	8004830 <assert_failed>
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f52:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007f54:	6823      	ldr	r3, [r4, #0]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007f56:	3a01      	subs	r2, #1
 8007f58:	e791      	b.n	8007e7e <HAL_ADC_Init+0x1f6>
 8007f5a:	bf00      	nop
 8007f5c:	0802c144 	.word	0x0802c144

08007f60 <HAL_ADC_Start>:
{
 8007f60:	b510      	push	{r4, lr}
  __IO uint32_t counter = 0;
 8007f62:	2300      	movs	r3, #0
{
 8007f64:	b082      	sub	sp, #8
 8007f66:	4604      	mov	r4, r0
  __IO uint32_t counter = 0;
 8007f68:	9301      	str	r3, [sp, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8007f6a:	6983      	ldr	r3, [r0, #24]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d904      	bls.n	8007f7a <HAL_ADC_Start+0x1a>
 8007f70:	f240 21df 	movw	r1, #735	; 0x2df
 8007f74:	4848      	ldr	r0, [pc, #288]	; (8008098 <HAL_ADC_Start+0x138>)
 8007f76:	f7fc fc5b 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 8007f7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007f7c:	f033 5340 	bics.w	r3, r3, #805306368	; 0x30000000
 8007f80:	d174      	bne.n	800806c <HAL_ADC_Start+0x10c>
  __HAL_LOCK(hadc);
 8007f82:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d079      	beq.n	800807e <HAL_ADC_Start+0x11e>
 8007f8a:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f8c:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hadc);
 8007f8e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007f92:	6893      	ldr	r3, [r2, #8]
 8007f94:	07d8      	lsls	r0, r3, #31
 8007f96:	d414      	bmi.n	8007fc2 <HAL_ADC_Start+0x62>
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007f98:	4b40      	ldr	r3, [pc, #256]	; (800809c <HAL_ADC_Start+0x13c>)
 8007f9a:	4841      	ldr	r0, [pc, #260]	; (80080a0 <HAL_ADC_Start+0x140>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
    __HAL_ADC_ENABLE(hadc);
 8007f9e:	6891      	ldr	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007fa0:	fba0 0303 	umull	r0, r3, r0, r3
    __HAL_ADC_ENABLE(hadc);
 8007fa4:	f041 0101 	orr.w	r1, r1, #1
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007fa8:	0c9b      	lsrs	r3, r3, #18
    __HAL_ADC_ENABLE(hadc);
 8007faa:	6091      	str	r1, [r2, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007fac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007fb0:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007fb2:	9b01      	ldr	r3, [sp, #4]
 8007fb4:	b12b      	cbz	r3, 8007fc2 <HAL_ADC_Start+0x62>
      counter--;
 8007fb6:	9b01      	ldr	r3, [sp, #4]
 8007fb8:	3b01      	subs	r3, #1
 8007fba:	9301      	str	r3, [sp, #4]
    while(counter != 0)
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d1f9      	bne.n	8007fb6 <HAL_ADC_Start+0x56>
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007fc2:	6890      	ldr	r0, [r2, #8]
 8007fc4:	f010 0001 	ands.w	r0, r0, #1
 8007fc8:	d02c      	beq.n	8008024 <HAL_ADC_Start+0xc4>
    ADC_STATE_CLR_SET(hadc->State,
 8007fca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007fcc:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <HAL_ADC_Start+0x144>)
 8007fce:	400b      	ands	r3, r1
 8007fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fd4:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007fd6:	6853      	ldr	r3, [r2, #4]
 8007fd8:	0559      	lsls	r1, r3, #21
 8007fda:	d505      	bpl.n	8007fe8 <HAL_ADC_Start+0x88>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007fdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fde:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007fe2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007fe6:	6423      	str	r3, [r4, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fea:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8007fee:	d02f      	beq.n	8008050 <HAL_ADC_Start+0xf0>
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007ff0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007ff2:	f023 0306 	bic.w	r3, r3, #6
 8007ff6:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007ff8:	f06f 0022 	mvn.w	r0, #34	; 0x22
    __HAL_UNLOCK(hadc);
 8007ffc:	2100      	movs	r1, #0
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007ffe:	4b2a      	ldr	r3, [pc, #168]	; (80080a8 <HAL_ADC_Start+0x148>)
    __HAL_UNLOCK(hadc);
 8008000:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008004:	6010      	str	r0, [r2, #0]
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8008006:	6858      	ldr	r0, [r3, #4]
 8008008:	f010 001f 	ands.w	r0, r0, #31
 800800c:	d114      	bne.n	8008038 <HAL_ADC_Start+0xd8>
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800800e:	6893      	ldr	r3, [r2, #8]
 8008010:	f013 5340 	ands.w	r3, r3, #805306368	; 0x30000000
 8008014:	d10e      	bne.n	8008034 <HAL_ADC_Start+0xd4>
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008016:	6891      	ldr	r1, [r2, #8]
  return HAL_OK;
 8008018:	4618      	mov	r0, r3
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800801a:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 800801e:	6091      	str	r1, [r2, #8]
}
 8008020:	b002      	add	sp, #8
 8008022:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008024:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008026:	f043 0310 	orr.w	r3, r3, #16
 800802a:	6423      	str	r3, [r4, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800802c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800802e:	f043 0301 	orr.w	r3, r3, #1
 8008032:	6463      	str	r3, [r4, #68]	; 0x44
}
 8008034:	b002      	add	sp, #8
 8008036:	bd10      	pop	{r4, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008038:	481c      	ldr	r0, [pc, #112]	; (80080ac <HAL_ADC_Start+0x14c>)
 800803a:	4282      	cmp	r2, r0
 800803c:	d00a      	beq.n	8008054 <HAL_ADC_Start+0xf4>
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800803e:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008040:	06db      	lsls	r3, r3, #27
 8008042:	d402      	bmi.n	800804a <HAL_ADC_Start+0xea>
 8008044:	4c1a      	ldr	r4, [pc, #104]	; (80080b0 <HAL_ADC_Start+0x150>)
 8008046:	42a2      	cmp	r2, r4
 8008048:	d01c      	beq.n	8008084 <HAL_ADC_Start+0x124>
  return HAL_OK;
 800804a:	2000      	movs	r0, #0
}
 800804c:	b002      	add	sp, #8
 800804e:	bd10      	pop	{r4, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 8008050:	6463      	str	r3, [r4, #68]	; 0x44
 8008052:	e7d1      	b.n	8007ff8 <HAL_ADC_Start+0x98>
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008054:	6893      	ldr	r3, [r2, #8]
 8008056:	f013 5f40 	tst.w	r3, #805306368	; 0x30000000
 800805a:	d103      	bne.n	8008064 <HAL_ADC_Start+0x104>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800805c:	6893      	ldr	r3, [r2, #8]
 800805e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008062:	6093      	str	r3, [r2, #8]
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008064:	4b10      	ldr	r3, [pc, #64]	; (80080a8 <HAL_ADC_Start+0x148>)
  return HAL_OK;
 8008066:	2000      	movs	r0, #0
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8008068:	685b      	ldr	r3, [r3, #4]
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800806a:	e7e3      	b.n	8008034 <HAL_ADC_Start+0xd4>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
 800806c:	f44f 7138 	mov.w	r1, #736	; 0x2e0
 8008070:	4809      	ldr	r0, [pc, #36]	; (8008098 <HAL_ADC_Start+0x138>)
 8008072:	f7fc fbdd 	bl	8004830 <assert_failed>
  __HAL_LOCK(hadc);
 8008076:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800807a:	2b01      	cmp	r3, #1
 800807c:	d185      	bne.n	8007f8a <HAL_ADC_Start+0x2a>
 800807e:	2002      	movs	r0, #2
}
 8008080:	b002      	add	sp, #8
 8008082:	bd10      	pop	{r4, pc}
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008084:	68a0      	ldr	r0, [r4, #8]
 8008086:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800808a:	d1de      	bne.n	800804a <HAL_ADC_Start+0xea>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800808c:	68a3      	ldr	r3, [r4, #8]
 800808e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008092:	60a3      	str	r3, [r4, #8]
 8008094:	e7ce      	b.n	8008034 <HAL_ADC_Start+0xd4>
 8008096:	bf00      	nop
 8008098:	0802c144 	.word	0x0802c144
 800809c:	20000260 	.word	0x20000260
 80080a0:	431bde83 	.word	0x431bde83
 80080a4:	fffff8fe 	.word	0xfffff8fe
 80080a8:	40012300 	.word	0x40012300
 80080ac:	40012000 	.word	0x40012000
 80080b0:	40012200 	.word	0x40012200

080080b4 <HAL_ADC_ConvCpltCallback>:
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop

080080b8 <HAL_ADC_LevelOutOfWindowCallback>:
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop

080080bc <HAL_ADC_ErrorCallback>:
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop

080080c0 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80080c0:	6982      	ldr	r2, [r0, #24]
  uint32_t tmp_sr = hadc->Instance->SR;
 80080c2:	6803      	ldr	r3, [r0, #0]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80080c4:	2a01      	cmp	r2, #1
{
 80080c6:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp_sr = hadc->Instance->SR;
 80080c8:	681d      	ldr	r5, [r3, #0]
{
 80080ca:	4604      	mov	r4, r0
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80080cc:	685e      	ldr	r6, [r3, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80080ce:	d904      	bls.n	80080da <HAL_ADC_IRQHandler+0x1a>
 80080d0:	f240 41c1 	movw	r1, #1217	; 0x4c1
 80080d4:	4851      	ldr	r0, [pc, #324]	; (800821c <HAL_ADC_IRQHandler+0x15c>)
 80080d6:	f7fc fbab 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80080da:	69e3      	ldr	r3, [r4, #28]
 80080dc:	3b01      	subs	r3, #1
 80080de:	2b0f      	cmp	r3, #15
 80080e0:	f200 8086 	bhi.w	80081f0 <HAL_ADC_IRQHandler+0x130>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80080e4:	6963      	ldr	r3, [r4, #20]
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d87c      	bhi.n	80081e4 <HAL_ADC_IRQHandler+0x124>
  if(tmp1 && tmp2)
 80080ea:	07ab      	lsls	r3, r5, #30
 80080ec:	d52c      	bpl.n	8008148 <HAL_ADC_IRQHandler+0x88>
 80080ee:	06b0      	lsls	r0, r6, #26
 80080f0:	d52a      	bpl.n	8008148 <HAL_ADC_IRQHandler+0x88>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80080f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080f4:	06d9      	lsls	r1, r3, #27
 80080f6:	d403      	bmi.n	8008100 <HAL_ADC_IRQHandler+0x40>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80080f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080fe:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	689a      	ldr	r2, [r3, #8]
 8008104:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8008108:	d117      	bne.n	800813a <HAL_ADC_IRQHandler+0x7a>
 800810a:	69a2      	ldr	r2, [r4, #24]
 800810c:	b9aa      	cbnz	r2, 800813a <HAL_ADC_IRQHandler+0x7a>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800810e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8008110:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8008114:	d002      	beq.n	800811c <HAL_ADC_IRQHandler+0x5c>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8008116:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8008118:	0552      	lsls	r2, r2, #21
 800811a:	d40e      	bmi.n	800813a <HAL_ADC_IRQHandler+0x7a>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	f022 0220 	bic.w	r2, r2, #32
 8008122:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8008124:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008126:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800812a:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800812c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800812e:	04d8      	lsls	r0, r3, #19
 8008130:	d403      	bmi.n	800813a <HAL_ADC_IRQHandler+0x7a>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008132:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008134:	f043 0301 	orr.w	r3, r3, #1
 8008138:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 800813a:	4620      	mov	r0, r4
 800813c:	f7ff ffba 	bl	80080b4 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8008140:	6823      	ldr	r3, [r4, #0]
 8008142:	f06f 0212 	mvn.w	r2, #18
 8008146:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 8008148:	0769      	lsls	r1, r5, #29
 800814a:	d530      	bpl.n	80081ae <HAL_ADC_IRQHandler+0xee>
 800814c:	0632      	lsls	r2, r6, #24
 800814e:	d52e      	bpl.n	80081ae <HAL_ADC_IRQHandler+0xee>
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008150:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008152:	06db      	lsls	r3, r3, #27
 8008154:	d403      	bmi.n	800815e <HAL_ADC_IRQHandler+0x9e>
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8008156:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008158:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800815c:	6423      	str	r3, [r4, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800815e:	6823      	ldr	r3, [r4, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 8008166:	d11b      	bne.n	80081a0 <HAL_ADC_IRQHandler+0xe0>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800816a:	f412 1f40 	tst.w	r2, #3145728	; 0x300000
 800816e:	d151      	bne.n	8008214 <HAL_ADC_IRQHandler+0x154>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008170:	685a      	ldr	r2, [r3, #4]
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008172:	0551      	lsls	r1, r2, #21
 8008174:	d414      	bmi.n	80081a0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8008176:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8008178:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800817c:	d110      	bne.n	80081a0 <HAL_ADC_IRQHandler+0xe0>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800817e:	69a2      	ldr	r2, [r4, #24]
 8008180:	b972      	cbnz	r2, 80081a0 <HAL_ADC_IRQHandler+0xe0>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8008182:	685a      	ldr	r2, [r3, #4]
 8008184:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008188:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800818a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800818c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008190:	6423      	str	r3, [r4, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8008192:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008194:	05da      	lsls	r2, r3, #23
 8008196:	d403      	bmi.n	80081a0 <HAL_ADC_IRQHandler+0xe0>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8008198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819a:	f043 0301 	orr.w	r3, r3, #1
 800819e:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80081a0:	4620      	mov	r0, r4
 80081a2:	f000 f92f 	bl	8008404 <HAL_ADCEx_InjectedConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	f06f 020c 	mvn.w	r2, #12
 80081ac:	601a      	str	r2, [r3, #0]
  if(tmp1 && tmp2)
 80081ae:	0673      	lsls	r3, r6, #25
 80081b0:	d505      	bpl.n	80081be <HAL_ADC_IRQHandler+0xfe>
 80081b2:	07e8      	lsls	r0, r5, #31
 80081b4:	d503      	bpl.n	80081be <HAL_ADC_IRQHandler+0xfe>
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80081b6:	6823      	ldr	r3, [r4, #0]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	07d9      	lsls	r1, r3, #31
 80081bc:	d41e      	bmi.n	80081fc <HAL_ADC_IRQHandler+0x13c>
  if(tmp1 && tmp2)
 80081be:	06aa      	lsls	r2, r5, #26
 80081c0:	d501      	bpl.n	80081c6 <HAL_ADC_IRQHandler+0x106>
 80081c2:	0173      	lsls	r3, r6, #5
 80081c4:	d400      	bmi.n	80081c8 <HAL_ADC_IRQHandler+0x108>
}
 80081c6:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081ca:	f06f 0520 	mvn.w	r5, #32
 80081ce:	6822      	ldr	r2, [r4, #0]
      HAL_ADC_ErrorCallback(hadc);
 80081d0:	4620      	mov	r0, r4
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80081d2:	f043 0302 	orr.w	r3, r3, #2
 80081d6:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081d8:	6015      	str	r5, [r2, #0]
      HAL_ADC_ErrorCallback(hadc);
 80081da:	f7ff ff6f 	bl	80080bc <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80081de:	6823      	ldr	r3, [r4, #0]
 80081e0:	601d      	str	r5, [r3, #0]
}
 80081e2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 80081e4:	f240 41c3 	movw	r1, #1219	; 0x4c3
 80081e8:	480c      	ldr	r0, [pc, #48]	; (800821c <HAL_ADC_IRQHandler+0x15c>)
 80081ea:	f7fc fb21 	bl	8004830 <assert_failed>
 80081ee:	e77c      	b.n	80080ea <HAL_ADC_IRQHandler+0x2a>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 80081f0:	f240 41c2 	movw	r1, #1218	; 0x4c2
 80081f4:	4809      	ldr	r0, [pc, #36]	; (800821c <HAL_ADC_IRQHandler+0x15c>)
 80081f6:	f7fc fb1b 	bl	8004830 <assert_failed>
 80081fa:	e773      	b.n	80080e4 <HAL_ADC_IRQHandler+0x24>
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80081fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80081fe:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8008200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008204:	6423      	str	r3, [r4, #64]	; 0x40
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8008206:	f7ff ff57 	bl	80080b8 <HAL_ADC_LevelOutOfWindowCallback>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800820a:	6823      	ldr	r3, [r4, #0]
 800820c:	f06f 0201 	mvn.w	r2, #1
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	e7d4      	b.n	80081be <HAL_ADC_IRQHandler+0xfe>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8008214:	689a      	ldr	r2, [r3, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8008216:	0550      	lsls	r0, r2, #21
 8008218:	d4c2      	bmi.n	80081a0 <HAL_ADC_IRQHandler+0xe0>
 800821a:	e7a9      	b.n	8008170 <HAL_ADC_IRQHandler+0xb0>
 800821c:	0802c144 	.word	0x0802c144

08008220 <HAL_ADC_ConfigChannel>:
{
 8008220:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t counter = 0;
 8008222:	2300      	movs	r3, #0
{
 8008224:	b083      	sub	sp, #12
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8008226:	4a71      	ldr	r2, [pc, #452]	; (80083ec <HAL_ADC_ConfigChannel+0x1cc>)
{
 8008228:	460c      	mov	r4, r1
  __IO uint32_t counter = 0;
 800822a:	9301      	str	r3, [sp, #4]
{
 800822c:	4605      	mov	r5, r0
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 800822e:	680b      	ldr	r3, [r1, #0]
 8008230:	4293      	cmp	r3, r2
 8008232:	bf18      	it	ne
 8008234:	2b12      	cmpne	r3, #18
 8008236:	d902      	bls.n	800823e <HAL_ADC_ConfigChannel+0x1e>
 8008238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800823c:	d142      	bne.n	80082c4 <HAL_ADC_ConfigChannel+0xa4>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	3b01      	subs	r3, #1
 8008242:	2b0f      	cmp	r3, #15
 8008244:	d847      	bhi.n	80082d6 <HAL_ADC_ConfigChannel+0xb6>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8008246:	68a3      	ldr	r3, [r4, #8]
 8008248:	2b07      	cmp	r3, #7
 800824a:	d84c      	bhi.n	80082e6 <HAL_ADC_ConfigChannel+0xc6>
  __HAL_LOCK(hadc);
 800824c:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008250:	2b01      	cmp	r3, #1
 8008252:	d051      	beq.n	80082f8 <HAL_ADC_ConfigChannel+0xd8>
 8008254:	2301      	movs	r3, #1
 8008256:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800825a:	6820      	ldr	r0, [r4, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800825c:	682b      	ldr	r3, [r5, #0]
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800825e:	2809      	cmp	r0, #9
 8008260:	d94d      	bls.n	80082fe <HAL_ADC_ConfigChannel+0xde>
 8008262:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8008266:	d04a      	beq.n	80082fe <HAL_ADC_ConfigChannel+0xde>
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008268:	b281      	uxth	r1, r0
 800826a:	f04f 0c07 	mov.w	ip, #7
 800826e:	68de      	ldr	r6, [r3, #12]
 8008270:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008274:	4f5d      	ldr	r7, [pc, #372]	; (80083ec <HAL_ADC_ConfigChannel+0x1cc>)
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008276:	3a1e      	subs	r2, #30
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008278:	42b8      	cmp	r0, r7
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800827a:	fa0c fc02 	lsl.w	ip, ip, r2
 800827e:	ea26 060c 	bic.w	r6, r6, ip
 8008282:	60de      	str	r6, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8008284:	f000 8083 	beq.w	800838e <HAL_ADC_ConfigChannel+0x16e>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008288:	68a6      	ldr	r6, [r4, #8]
 800828a:	4096      	lsls	r6, r2
 800828c:	68da      	ldr	r2, [r3, #12]
 800828e:	4316      	orrs	r6, r2
 8008290:	60de      	str	r6, [r3, #12]
  if (sConfig->Rank < 7)
 8008292:	6862      	ldr	r2, [r4, #4]
 8008294:	2a06      	cmp	r2, #6
 8008296:	d846      	bhi.n	8008326 <HAL_ADC_ConfigChannel+0x106>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008298:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800829c:	241f      	movs	r4, #31
 800829e:	3a05      	subs	r2, #5
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082a0:	4091      	lsls	r1, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80082a2:	4094      	lsls	r4, r2
 80082a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a6:	ea22 0204 	bic.w	r2, r2, r4
 80082aa:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80082ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082ae:	4311      	orrs	r1, r2
 80082b0:	6359      	str	r1, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80082b2:	4a4f      	ldr	r2, [pc, #316]	; (80083f0 <HAL_ADC_ConfigChannel+0x1d0>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d048      	beq.n	800834a <HAL_ADC_ConfigChannel+0x12a>
  __HAL_UNLOCK(hadc);
 80082b8:	2300      	movs	r3, #0
  return HAL_OK;
 80082ba:	4618      	mov	r0, r3
  __HAL_UNLOCK(hadc);
 80082bc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80082c0:	b003      	add	sp, #12
 80082c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80082c4:	f240 618b 	movw	r1, #1675	; 0x68b
 80082c8:	484a      	ldr	r0, [pc, #296]	; (80083f4 <HAL_ADC_ConfigChannel+0x1d4>)
 80082ca:	f7fc fab1 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 80082ce:	6863      	ldr	r3, [r4, #4]
 80082d0:	3b01      	subs	r3, #1
 80082d2:	2b0f      	cmp	r3, #15
 80082d4:	d9b7      	bls.n	8008246 <HAL_ADC_ConfigChannel+0x26>
 80082d6:	f240 618c 	movw	r1, #1676	; 0x68c
 80082da:	4846      	ldr	r0, [pc, #280]	; (80083f4 <HAL_ADC_ConfigChannel+0x1d4>)
 80082dc:	f7fc faa8 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 80082e0:	68a3      	ldr	r3, [r4, #8]
 80082e2:	2b07      	cmp	r3, #7
 80082e4:	d9b2      	bls.n	800824c <HAL_ADC_ConfigChannel+0x2c>
 80082e6:	f240 618d 	movw	r1, #1677	; 0x68d
 80082ea:	4842      	ldr	r0, [pc, #264]	; (80083f4 <HAL_ADC_ConfigChannel+0x1d4>)
 80082ec:	f7fc faa0 	bl	8004830 <assert_failed>
  __HAL_LOCK(hadc);
 80082f0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d1ad      	bne.n	8008254 <HAL_ADC_ConfigChannel+0x34>
 80082f8:	2002      	movs	r0, #2
}
 80082fa:	b003      	add	sp, #12
 80082fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80082fe:	b281      	uxth	r1, r0
 8008300:	f04f 0c07 	mov.w	ip, #7
 8008304:	691e      	ldr	r6, [r3, #16]
 8008306:	eb01 0e41 	add.w	lr, r1, r1, lsl #1
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800830a:	68a2      	ldr	r2, [r4, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800830c:	fa0c fc0e 	lsl.w	ip, ip, lr
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008310:	fa02 f20e 	lsl.w	r2, r2, lr
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008314:	ea26 060c 	bic.w	r6, r6, ip
 8008318:	611e      	str	r6, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800831a:	691e      	ldr	r6, [r3, #16]
 800831c:	4332      	orrs	r2, r6
 800831e:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7)
 8008320:	6862      	ldr	r2, [r4, #4]
 8008322:	2a06      	cmp	r2, #6
 8008324:	d9b8      	bls.n	8008298 <HAL_ADC_ConfigChannel+0x78>
  else if (sConfig->Rank < 13)
 8008326:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008328:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13)
 800832c:	d81c      	bhi.n	8008368 <HAL_ADC_ConfigChannel+0x148>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800832e:	3a23      	subs	r2, #35	; 0x23
 8008330:	241f      	movs	r4, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008332:	4091      	lsls	r1, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8008334:	4094      	lsls	r4, r2
 8008336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008338:	ea22 0204 	bic.w	r2, r2, r4
 800833c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800833e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008340:	4311      	orrs	r1, r2
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008342:	4a2b      	ldr	r2, [pc, #172]	; (80083f0 <HAL_ADC_ConfigChannel+0x1d0>)
 8008344:	4293      	cmp	r3, r2
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8008346:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8008348:	d1b6      	bne.n	80082b8 <HAL_ADC_ConfigChannel+0x98>
 800834a:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800834e:	d017      	beq.n	8008380 <HAL_ADC_ConfigChannel+0x160>
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8008350:	2812      	cmp	r0, #18
 8008352:	d123      	bne.n	800839c <HAL_ADC_ConfigChannel+0x17c>
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8008354:	4b28      	ldr	r3, [pc, #160]	; (80083f8 <HAL_ADC_ConfigChannel+0x1d8>)
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 800835c:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_VBATE;
 800835e:	685a      	ldr	r2, [r3, #4]
 8008360:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8008364:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8008366:	e7a7      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x98>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8008368:	3a41      	subs	r2, #65	; 0x41
 800836a:	241f      	movs	r4, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800836c:	4091      	lsls	r1, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800836e:	4094      	lsls	r4, r2
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	ea22 0204 	bic.w	r2, r2, r4
 8008376:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8008378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800837a:	4311      	orrs	r1, r2
 800837c:	62d9      	str	r1, [r3, #44]	; 0x2c
 800837e:	e798      	b.n	80082b2 <HAL_ADC_ConfigChannel+0x92>
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8008380:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8008384:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8008388:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800838c:	e794      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x98>
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800838e:	68a1      	ldr	r1, [r4, #8]
 8008390:	68da      	ldr	r2, [r3, #12]
 8008392:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8008396:	2112      	movs	r1, #18
 8008398:	60da      	str	r2, [r3, #12]
 800839a:	e77a      	b.n	8008292 <HAL_ADC_ConfigChannel+0x72>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800839c:	4b13      	ldr	r3, [pc, #76]	; (80083ec <HAL_ADC_ConfigChannel+0x1cc>)
 800839e:	4298      	cmp	r0, r3
 80083a0:	d001      	beq.n	80083a6 <HAL_ADC_ConfigChannel+0x186>
 80083a2:	2811      	cmp	r0, #17
 80083a4:	d188      	bne.n	80082b8 <HAL_ADC_ConfigChannel+0x98>
    ADC->CCR &= ~ADC_CCR_VBATE;
 80083a6:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <HAL_ADC_ConfigChannel+0x1d8>)
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083a8:	4910      	ldr	r1, [pc, #64]	; (80083ec <HAL_ADC_ConfigChannel+0x1cc>)
    ADC->CCR &= ~ADC_CCR_VBATE;
 80083aa:	685a      	ldr	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083ac:	4288      	cmp	r0, r1
    ADC->CCR &= ~ADC_CCR_VBATE;
 80083ae:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 80083b2:	605a      	str	r2, [r3, #4]
    ADC->CCR |= ADC_CCR_TSVREFE;
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80083ba:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80083bc:	f47f af7c 	bne.w	80082b8 <HAL_ADC_ConfigChannel+0x98>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80083c0:	4b0e      	ldr	r3, [pc, #56]	; (80083fc <HAL_ADC_ConfigChannel+0x1dc>)
 80083c2:	4a0f      	ldr	r2, [pc, #60]	; (8008400 <HAL_ADC_ConfigChannel+0x1e0>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ca:	0c9b      	lsrs	r3, r3, #18
 80083cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	f43f af6e 	beq.w	80082b8 <HAL_ADC_ConfigChannel+0x98>
        counter--;
 80083dc:	9b01      	ldr	r3, [sp, #4]
 80083de:	3b01      	subs	r3, #1
 80083e0:	9301      	str	r3, [sp, #4]
      while(counter != 0)
 80083e2:	9b01      	ldr	r3, [sp, #4]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1f9      	bne.n	80083dc <HAL_ADC_ConfigChannel+0x1bc>
 80083e8:	e766      	b.n	80082b8 <HAL_ADC_ConfigChannel+0x98>
 80083ea:	bf00      	nop
 80083ec:	10000012 	.word	0x10000012
 80083f0:	40012000 	.word	0x40012000
 80083f4:	0802c144 	.word	0x0802c144
 80083f8:	40012300 	.word	0x40012300
 80083fc:	20000260 	.word	0x20000260
 8008400:	431bde83 	.word	0x431bde83

08008404 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8008404:	4770      	bx	lr
 8008406:	bf00      	nop

08008408 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  multimode  pointer to an ADC_MultiModeTypeDef structure that contains 
  *                     the configuration information for  multimode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8008408:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_MODE(multimode->Mode));
 800840a:	680b      	ldr	r3, [r1, #0]
{
 800840c:	460c      	mov	r4, r1
 800840e:	4605      	mov	r5, r0
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008410:	2b19      	cmp	r3, #25
 8008412:	d93e      	bls.n	8008492 <HAL_ADCEx_MultiModeConfigChannel+0x8a>
 8008414:	f240 31af 	movw	r1, #943	; 0x3af
 8008418:	4829      	ldr	r0, [pc, #164]	; (80084c0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 800841a:	f7fc fa09 	bl	8004830 <assert_failed>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800841e:	6863      	ldr	r3, [r4, #4]
 8008420:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 8008424:	d13e      	bne.n	80084a4 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 8008426:	68a3      	ldr	r3, [r4, #8]
 8008428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800842c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008430:	bf18      	it	ne
 8008432:	2b00      	cmpne	r3, #0
 8008434:	bf14      	ite	ne
 8008436:	2201      	movne	r2, #1
 8008438:	2200      	moveq	r2, #0
 800843a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800843e:	bf0c      	ite	eq
 8008440:	2200      	moveq	r2, #0
 8008442:	f002 0201 	andne.w	r2, r2, #1
 8008446:	b112      	cbz	r2, 800844e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 8008448:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800844c:	d132      	bne.n	80084b4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800844e:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d02c      	beq.n	80084b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
  
  /* Set ADC mode */
  ADC->CCR &= ~(ADC_CCR_MULTI);
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <HAL_ADCEx_MultiModeConfigChannel+0xbc>)
 8008458:	685a      	ldr	r2, [r3, #4]
 800845a:	f022 021f 	bic.w	r2, r2, #31
 800845e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->Mode;
 8008460:	685a      	ldr	r2, [r3, #4]
 8008462:	6821      	ldr	r1, [r4, #0]
 8008464:	430a      	orrs	r2, r1
 8008466:	605a      	str	r2, [r3, #4]
  
  /* Set the ADC DMA access mode */
  ADC->CCR &= ~(ADC_CCR_DMA);
 8008468:	685a      	ldr	r2, [r3, #4]
 800846a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800846e:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->DMAAccessMode;
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	6861      	ldr	r1, [r4, #4]
 8008474:	430a      	orrs	r2, r1
  /* Set delay between two sampling phases */
  ADC->CCR &= ~(ADC_CCR_DELAY);
  ADC->CCR |= multimode->TwoSamplingDelay;
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008476:	2100      	movs	r1, #0
  ADC->CCR |= multimode->DMAAccessMode;
 8008478:	605a      	str	r2, [r3, #4]
  ADC->CCR &= ~(ADC_CCR_DELAY);
 800847a:	685a      	ldr	r2, [r3, #4]
 800847c:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 8008480:	605a      	str	r2, [r3, #4]
  ADC->CCR |= multimode->TwoSamplingDelay;
 8008482:	68a0      	ldr	r0, [r4, #8]
 8008484:	685a      	ldr	r2, [r3, #4]
 8008486:	4302      	orrs	r2, r0
  
  /* Return function status */
  return HAL_OK;
 8008488:	4608      	mov	r0, r1
  ADC->CCR |= multimode->TwoSamplingDelay;
 800848a:	605a      	str	r2, [r3, #4]
  __HAL_UNLOCK(hadc);
 800848c:	f885 103c 	strb.w	r1, [r5, #60]	; 0x3c
}
 8008490:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_MODE(multimode->Mode));
 8008492:	4a0d      	ldr	r2, [pc, #52]	; (80084c8 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8008494:	fa22 f303 	lsr.w	r3, r2, r3
 8008498:	07db      	lsls	r3, r3, #31
 800849a:	d5bb      	bpl.n	8008414 <HAL_ADCEx_MultiModeConfigChannel+0xc>
  assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
 800849c:	6863      	ldr	r3, [r4, #4]
 800849e:	f433 4340 	bics.w	r3, r3, #49152	; 0xc000
 80084a2:	d0c0      	beq.n	8008426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80084a4:	f44f 716c 	mov.w	r1, #944	; 0x3b0
 80084a8:	4805      	ldr	r0, [pc, #20]	; (80084c0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80084aa:	f7fc f9c1 	bl	8004830 <assert_failed>
 80084ae:	e7ba      	b.n	8008426 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
  __HAL_LOCK(hadc);
 80084b0:	2002      	movs	r0, #2
}
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
 80084b4:	f240 31b1 	movw	r1, #945	; 0x3b1
 80084b8:	4801      	ldr	r0, [pc, #4]	; (80084c0 <HAL_ADCEx_MultiModeConfigChannel+0xb8>)
 80084ba:	f7fc f9b9 	bl	8004830 <assert_failed>
 80084be:	e7c6      	b.n	800844e <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80084c0:	0802c17c 	.word	0x0802c17c
 80084c4:	40012300 	.word	0x40012300
 80084c8:	02e602e7 	.word	0x02e602e7

080084cc <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80084cc:	1ec3      	subs	r3, r0, #3
 80084ce:	2b04      	cmp	r3, #4
{
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80084d4:	d80c      	bhi.n	80084f0 <HAL_NVIC_SetPriorityGrouping+0x24>
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084d6:	4909      	ldr	r1, [pc, #36]	; (80084fc <HAL_NVIC_SetPriorityGrouping+0x30>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084d8:	0224      	lsls	r4, r4, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084da:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 80084de:	4b08      	ldr	r3, [pc, #32]	; (8008500 <HAL_NVIC_SetPriorityGrouping+0x34>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084e0:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084e2:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084e6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084e8:	4314      	orrs	r4, r2
  reg_value  =  (reg_value                                   |
 80084ea:	4323      	orrs	r3, r4
  SCB->AIRCR =  reg_value;
 80084ec:	60cb      	str	r3, [r1, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80084ee:	bd10      	pop	{r4, pc}
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80084f0:	2191      	movs	r1, #145	; 0x91
 80084f2:	4804      	ldr	r0, [pc, #16]	; (8008504 <HAL_NVIC_SetPriorityGrouping+0x38>)
 80084f4:	f7fc f99c 	bl	8004830 <assert_failed>
 80084f8:	e7ed      	b.n	80084d6 <HAL_NVIC_SetPriorityGrouping+0xa>
 80084fa:	bf00      	nop
 80084fc:	e000ed00 	.word	0xe000ed00
 8008500:	05fa0000 	.word	0x05fa0000
 8008504:	0802c1b8 	.word	0x0802c1b8

08008508 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008508:	2a0f      	cmp	r2, #15
{ 
 800850a:	b570      	push	{r4, r5, r6, lr}
 800850c:	4616      	mov	r6, r2
 800850e:	4605      	mov	r5, r0
 8008510:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008512:	d836      	bhi.n	8008582 <HAL_NVIC_SetPriority+0x7a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008514:	2c0f      	cmp	r4, #15
 8008516:	d82f      	bhi.n	8008578 <HAL_NVIC_SetPriority+0x70>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008518:	4b1c      	ldr	r3, [pc, #112]	; (800858c <HAL_NVIC_SetPriority+0x84>)
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008520:	f1c3 0007 	rsb	r0, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008524:	1d1a      	adds	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008526:	2804      	cmp	r0, #4
 8008528:	bf28      	it	cs
 800852a:	2004      	movcs	r0, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800852c:	2a06      	cmp	r2, #6
 800852e:	d918      	bls.n	8008562 <HAL_NVIC_SetPriority+0x5a>
 8008530:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008532:	f04f 32ff 	mov.w	r2, #4294967295
 8008536:	409a      	lsls	r2, r3
 8008538:	ea26 0602 	bic.w	r6, r6, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800853c:	f04f 31ff 	mov.w	r1, #4294967295
  if ((int32_t)(IRQn) >= 0)
 8008540:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008542:	fa01 f100 	lsl.w	r1, r1, r0
 8008546:	ea24 0401 	bic.w	r4, r4, r1
 800854a:	fa04 f403 	lsl.w	r4, r4, r3
 800854e:	ea44 0406 	orr.w	r4, r4, r6
  if ((int32_t)(IRQn) >= 0)
 8008552:	db09      	blt.n	8008568 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008554:	0124      	lsls	r4, r4, #4
 8008556:	4b0e      	ldr	r3, [pc, #56]	; (8008590 <HAL_NVIC_SetPriority+0x88>)
 8008558:	b2e4      	uxtb	r4, r4
 800855a:	442b      	add	r3, r5
 800855c:	f883 4300 	strb.w	r4, [r3, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8008560:	bd70      	pop	{r4, r5, r6, pc}
 8008562:	2600      	movs	r6, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008564:	4633      	mov	r3, r6
 8008566:	e7e9      	b.n	800853c <HAL_NVIC_SetPriority+0x34>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008568:	f005 050f 	and.w	r5, r5, #15
 800856c:	0124      	lsls	r4, r4, #4
 800856e:	4b09      	ldr	r3, [pc, #36]	; (8008594 <HAL_NVIC_SetPriority+0x8c>)
 8008570:	b2e4      	uxtb	r4, r4
 8008572:	442b      	add	r3, r5
 8008574:	761c      	strb	r4, [r3, #24]
 8008576:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8008578:	21aa      	movs	r1, #170	; 0xaa
 800857a:	4807      	ldr	r0, [pc, #28]	; (8008598 <HAL_NVIC_SetPriority+0x90>)
 800857c:	f7fc f958 	bl	8004830 <assert_failed>
 8008580:	e7ca      	b.n	8008518 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8008582:	21a9      	movs	r1, #169	; 0xa9
 8008584:	4804      	ldr	r0, [pc, #16]	; (8008598 <HAL_NVIC_SetPriority+0x90>)
 8008586:	f7fc f953 	bl	8004830 <assert_failed>
 800858a:	e7c3      	b.n	8008514 <HAL_NVIC_SetPriority+0xc>
 800858c:	e000ed00 	.word	0xe000ed00
 8008590:	e000e100 	.word	0xe000e100
 8008594:	e000ecfc 	.word	0xe000ecfc
 8008598:	0802c1b8 	.word	0x0802c1b8

0800859c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800859c:	2800      	cmp	r0, #0
 800859e:	db08      	blt.n	80085b2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085a0:	f000 011f 	and.w	r1, r0, #31
 80085a4:	2301      	movs	r3, #1
 80085a6:	0940      	lsrs	r0, r0, #5
 80085a8:	4a04      	ldr	r2, [pc, #16]	; (80085bc <HAL_NVIC_EnableIRQ+0x20>)
 80085aa:	408b      	lsls	r3, r1
 80085ac:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80085b0:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80085b2:	21bd      	movs	r1, #189	; 0xbd
 80085b4:	4802      	ldr	r0, [pc, #8]	; (80085c0 <HAL_NVIC_EnableIRQ+0x24>)
 80085b6:	f7fc b93b 	b.w	8004830 <assert_failed>
 80085ba:	bf00      	nop
 80085bc:	e000e100 	.word	0xe000e100
 80085c0:	0802c1b8 	.word	0x0802c1b8

080085c4 <HAL_NVIC_DisableIRQ>:
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80085c4:	2800      	cmp	r0, #0
 80085c6:	db0e      	blt.n	80085e6 <HAL_NVIC_DisableIRQ+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80085c8:	0943      	lsrs	r3, r0, #5
 80085ca:	2201      	movs	r2, #1
 80085cc:	f000 001f 	and.w	r0, r0, #31
 80085d0:	4907      	ldr	r1, [pc, #28]	; (80085f0 <HAL_NVIC_DisableIRQ+0x2c>)
 80085d2:	3320      	adds	r3, #32
 80085d4:	fa02 f000 	lsl.w	r0, r2, r0
 80085d8:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
 80085dc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80085e0:	f3bf 8f6f 	isb	sy
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80085e4:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80085e6:	21cd      	movs	r1, #205	; 0xcd
 80085e8:	4802      	ldr	r0, [pc, #8]	; (80085f4 <HAL_NVIC_DisableIRQ+0x30>)
 80085ea:	f7fc b921 	b.w	8004830 <assert_failed>
 80085ee:	bf00      	nop
 80085f0:	e000e100 	.word	0xe000e100
 80085f4:	0802c1b8 	.word	0x0802c1b8

080085f8 <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80085f8:	2800      	cmp	r0, #0
 80085fa:	d075      	beq.n	80086e8 <HAL_CRC_Init+0xf0>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 80085fc:	4b3b      	ldr	r3, [pc, #236]	; (80086ec <HAL_CRC_Init+0xf4>)
 80085fe:	6802      	ldr	r2, [r0, #0]
 8008600:	429a      	cmp	r2, r3
{
 8008602:	b510      	push	{r4, lr}
 8008604:	4604      	mov	r4, r0
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));
 8008606:	d003      	beq.n	8008610 <HAL_CRC_Init+0x18>
 8008608:	2170      	movs	r1, #112	; 0x70
 800860a:	4839      	ldr	r0, [pc, #228]	; (80086f0 <HAL_CRC_Init+0xf8>)
 800860c:	f7fc f910 	bl	8004830 <assert_failed>

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008610:	7f63      	ldrb	r3, [r4, #29]
 8008612:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008616:	2b00      	cmp	r3, #0
 8008618:	d055      	beq.n	80086c6 <HAL_CRC_Init+0xce>

  hcrc->State = HAL_CRC_STATE_BUSY;

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800861a:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
 800861c:	2202      	movs	r2, #2
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 800861e:	2b01      	cmp	r3, #1
  hcrc->State = HAL_CRC_STATE_BUSY;
 8008620:	7762      	strb	r2, [r4, #29]
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008622:	d838      	bhi.n	8008696 <HAL_CRC_Init+0x9e>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008624:	2b00      	cmp	r3, #0
 8008626:	d13d      	bne.n	80086a4 <HAL_CRC_Init+0xac>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8008628:	6823      	ldr	r3, [r4, #0]
 800862a:	4a32      	ldr	r2, [pc, #200]	; (80086f4 <HAL_CRC_Init+0xfc>)
 800862c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800862e:	689a      	ldr	r2, [r3, #8]
 8008630:	f022 0218 	bic.w	r2, r2, #24
 8008634:	609a      	str	r2, [r3, #8]
    }
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 8008636:	7963      	ldrb	r3, [r4, #5]
 8008638:	2b01      	cmp	r3, #1
 800863a:	d83c      	bhi.n	80086b6 <HAL_CRC_Init+0xbe>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800863c:	b1e3      	cbz	r3, 8008678 <HAL_CRC_Init+0x80>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800863e:	6922      	ldr	r2, [r4, #16]
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008644:	6962      	ldr	r2, [r4, #20]
 8008646:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 800864a:	d11d      	bne.n	8008688 <HAL_CRC_Init+0x90>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800864c:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800864e:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008650:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8008654:	4311      	orrs	r1, r2
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 8008656:	f030 0280 	bics.w	r2, r0, #128	; 0x80
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800865a:	6099      	str	r1, [r3, #8]
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 800865c:	d13d      	bne.n	80086da <HAL_CRC_Init+0xe2>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800865e:	689a      	ldr	r2, [r3, #8]

  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008660:	6a21      	ldr	r1, [r4, #32]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 8008666:	3901      	subs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8008668:	4302      	orrs	r2, r0
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800866a:	2902      	cmp	r1, #2
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800866c:	609a      	str	r2, [r3, #8]
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 800866e:	d82f      	bhi.n	80086d0 <HAL_CRC_Init+0xd8>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8008670:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8008672:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8008674:	7763      	strb	r3, [r4, #29]
}
 8008676:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	611a      	str	r2, [r3, #16]
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
 8008680:	6962      	ldr	r2, [r4, #20]
 8008682:	f032 0160 	bics.w	r1, r2, #96	; 0x60
 8008686:	d0e1      	beq.n	800864c <HAL_CRC_Init+0x54>
 8008688:	219c      	movs	r1, #156	; 0x9c
 800868a:	4819      	ldr	r0, [pc, #100]	; (80086f0 <HAL_CRC_Init+0xf8>)
 800868c:	f7fc f8d0 	bl	8004830 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8008690:	6962      	ldr	r2, [r4, #20]
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	e7da      	b.n	800864c <HAL_CRC_Init+0x54>
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
 8008696:	217e      	movs	r1, #126	; 0x7e
 8008698:	4815      	ldr	r0, [pc, #84]	; (80086f0 <HAL_CRC_Init+0xf8>)
 800869a:	f7fc f8c9 	bl	8004830 <assert_failed>
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800869e:	7923      	ldrb	r3, [r4, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0c1      	beq.n	8008628 <HAL_CRC_Init+0x30>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80086a4:	4620      	mov	r0, r4
 80086a6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80086aa:	f000 f825 	bl	80086f8 <HAL_CRCEx_Polynomial_Set>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d0c1      	beq.n	8008636 <HAL_CRC_Init+0x3e>
    return HAL_ERROR;
 80086b2:	2001      	movs	r0, #1
}
 80086b4:	bd10      	pop	{r4, pc}
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
 80086b6:	2190      	movs	r1, #144	; 0x90
 80086b8:	480d      	ldr	r0, [pc, #52]	; (80086f0 <HAL_CRC_Init+0xf8>)
 80086ba:	f7fc f8b9 	bl	8004830 <assert_failed>
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80086be:	7963      	ldrb	r3, [r4, #5]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1bc      	bne.n	800863e <HAL_CRC_Init+0x46>
 80086c4:	e7d8      	b.n	8008678 <HAL_CRC_Init+0x80>
    HAL_CRC_MspInit(hcrc);
 80086c6:	4620      	mov	r0, r4
    hcrc->Lock = HAL_UNLOCKED;
 80086c8:	7722      	strb	r2, [r4, #28]
    HAL_CRC_MspInit(hcrc);
 80086ca:	f7fd fc1b 	bl	8005f04 <HAL_CRC_MspInit>
 80086ce:	e7a4      	b.n	800861a <HAL_CRC_Init+0x22>
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));
 80086d0:	21a5      	movs	r1, #165	; 0xa5
 80086d2:	4807      	ldr	r0, [pc, #28]	; (80086f0 <HAL_CRC_Init+0xf8>)
 80086d4:	f7fc f8ac 	bl	8004830 <assert_failed>
 80086d8:	e7ca      	b.n	8008670 <HAL_CRC_Init+0x78>
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
 80086da:	4805      	ldr	r0, [pc, #20]	; (80086f0 <HAL_CRC_Init+0xf8>)
 80086dc:	21a0      	movs	r1, #160	; 0xa0
 80086de:	f7fc f8a7 	bl	8004830 <assert_failed>
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80086e2:	6823      	ldr	r3, [r4, #0]
 80086e4:	69a0      	ldr	r0, [r4, #24]
 80086e6:	e7ba      	b.n	800865e <HAL_CRC_Init+0x66>
    return HAL_ERROR;
 80086e8:	2001      	movs	r0, #1
}
 80086ea:	4770      	bx	lr
 80086ec:	40023000 	.word	0x40023000
 80086f0:	0802c1f4 	.word	0x0802c1f4
 80086f4:	04c11db7 	.word	0x04c11db7

080086f8 <HAL_CRCEx_Polynomial_Set>:
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 80086f8:	f032 0318 	bics.w	r3, r2, #24
{
 80086fc:	b570      	push	{r4, r5, r6, lr}
 80086fe:	4616      	mov	r6, r2
 8008700:	4605      	mov	r5, r0
 8008702:	460c      	mov	r4, r1
  assert_param(IS_CRC_POL_LENGTH(PolyLength));
 8008704:	d003      	beq.n	800870e <HAL_CRCEx_Polynomial_Set+0x16>
 8008706:	215f      	movs	r1, #95	; 0x5f
 8008708:	4818      	ldr	r0, [pc, #96]	; (800876c <HAL_CRCEx_Polynomial_Set+0x74>)
 800870a:	f7fc f891 	bl	8004830 <assert_failed>
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800870e:	231e      	movs	r3, #30
 8008710:	e001      	b.n	8008716 <HAL_CRCEx_Polynomial_Set+0x1e>
 8008712:	3b01      	subs	r3, #1
 8008714:	d315      	bcc.n	8008742 <HAL_CRCEx_Polynomial_Set+0x4a>
 8008716:	fa24 fc03 	lsr.w	ip, r4, r3
 800871a:	f01c 0f01 	tst.w	ip, #1
 800871e:	d0f8      	beq.n	8008712 <HAL_CRCEx_Polynomial_Set+0x1a>
  {
  }

  switch (PolyLength)
 8008720:	2e18      	cmp	r6, #24
 8008722:	d80f      	bhi.n	8008744 <HAL_CRCEx_Polynomial_Set+0x4c>
 8008724:	e8df f006 	tbb	[pc, r6]
 8008728:	0e0e0e12 	.word	0x0e0e0e12
 800872c:	0e0e0e0e 	.word	0x0e0e0e0e
 8008730:	0e0e0e1b 	.word	0x0e0e0e1b
 8008734:	0e0e0e0e 	.word	0x0e0e0e0e
 8008738:	0e0e0e1e 	.word	0x0e0e0e1e
 800873c:	0e0e0e0e 	.word	0x0e0e0e0e
 8008740:	10          	.byte	0x10
 8008741:	00          	.byte	0x00
 8008742:	b11e      	cbz	r6, 800874c <HAL_CRCEx_Polynomial_Set+0x54>
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
      {
        status =   HAL_ERROR;
 8008744:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
 8008746:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_7B)
 8008748:	2b06      	cmp	r3, #6
 800874a:	d8fb      	bhi.n	8008744 <HAL_CRCEx_Polynomial_Set+0x4c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800874c:	6829      	ldr	r1, [r5, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800874e:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
 8008750:	614c      	str	r4, [r1, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8008752:	688b      	ldr	r3, [r1, #8]
 8008754:	f023 0318 	bic.w	r3, r3, #24
 8008758:	4333      	orrs	r3, r6
 800875a:	608b      	str	r3, [r1, #8]
}
 800875c:	bd70      	pop	{r4, r5, r6, pc}
      if (msb >= HAL_CRC_LENGTH_16B)
 800875e:	2b0f      	cmp	r3, #15
 8008760:	d9f4      	bls.n	800874c <HAL_CRCEx_Polynomial_Set+0x54>
 8008762:	e7ef      	b.n	8008744 <HAL_CRCEx_Polynomial_Set+0x4c>
      if (msb >= HAL_CRC_LENGTH_8B)
 8008764:	2b07      	cmp	r3, #7
 8008766:	d9f1      	bls.n	800874c <HAL_CRCEx_Polynomial_Set+0x54>
 8008768:	e7ec      	b.n	8008744 <HAL_CRCEx_Polynomial_Set+0x4c>
 800876a:	bf00      	nop
 800876c:	0802c22c 	.word	0x0802c22c

08008770 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8008770:	b1d8      	cbz	r0, 80087aa <HAL_DAC_Init+0x3a>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8008772:	4b0f      	ldr	r3, [pc, #60]	; (80087b0 <HAL_DAC_Init+0x40>)
 8008774:	6802      	ldr	r2, [r0, #0]
 8008776:	429a      	cmp	r2, r3
{
 8008778:	b510      	push	{r4, lr}
 800877a:	4604      	mov	r4, r0
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 800877c:	d004      	beq.n	8008788 <HAL_DAC_Init+0x18>
 800877e:	f240 1115 	movw	r1, #277	; 0x115
 8008782:	480c      	ldr	r0, [pc, #48]	; (80087b4 <HAL_DAC_Init+0x44>)
 8008784:	f7fc f854 	bl	8004830 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8008788:	7923      	ldrb	r3, [r4, #4]
 800878a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800878e:	b13b      	cbz	r3, 80087a0 <HAL_DAC_Init+0x30>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8008790:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8008792:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008794:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8008796:	7121      	strb	r1, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8008798:	4618      	mov	r0, r3
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800879a:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 800879c:	7122      	strb	r2, [r4, #4]
}
 800879e:	bd10      	pop	{r4, pc}
    HAL_DAC_MspInit(hdac);
 80087a0:	4620      	mov	r0, r4
    hdac->Lock = HAL_UNLOCKED;
 80087a2:	7162      	strb	r2, [r4, #5]
    HAL_DAC_MspInit(hdac);
 80087a4:	f7fd fbc4 	bl	8005f30 <HAL_DAC_MspInit>
 80087a8:	e7f2      	b.n	8008790 <HAL_DAC_Init+0x20>
    return HAL_ERROR;
 80087aa:	2001      	movs	r0, #1
}
 80087ac:	4770      	bx	lr
 80087ae:	bf00      	nop
 80087b0:	40007400 	.word	0x40007400
 80087b4:	0802c268 	.word	0x0802c268

080087b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80087b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087bc:	4698      	mov	r8, r3
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80087be:	f031 0310 	bics.w	r3, r1, #16
{
 80087c2:	460d      	mov	r5, r1
 80087c4:	4604      	mov	r4, r0
 80087c6:	4617      	mov	r7, r2
 80087c8:	9e06      	ldr	r6, [sp, #24]
  assert_param(IS_DAC_CHANNEL(Channel));
 80087ca:	d16b      	bne.n	80088a4 <HAL_DAC_Start_DMA+0xec>
  assert_param(IS_DAC_ALIGN(Alignment));
 80087cc:	f036 0304 	bics.w	r3, r6, #4
 80087d0:	d001      	beq.n	80087d6 <HAL_DAC_Start_DMA+0x1e>
 80087d2:	2e08      	cmp	r6, #8
 80087d4:	d15b      	bne.n	800888e <HAL_DAC_Start_DMA+0xd6>

  /* Process locked */
  __HAL_LOCK(hdac);
 80087d6:	7962      	ldrb	r2, [r4, #5]
 80087d8:	2a01      	cmp	r2, #1
 80087da:	d060      	beq.n	800889e <HAL_DAC_Start_DMA+0xe6>
 80087dc:	2301      	movs	r3, #1

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80087de:	f8d4 c000 	ldr.w	ip, [r4]
  __HAL_LOCK(hdac);
 80087e2:	7163      	strb	r3, [r4, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 80087e4:	2302      	movs	r3, #2
 80087e6:	7123      	strb	r3, [r4, #4]
  if (Channel == DAC_CHANNEL_1)
 80087e8:	bb35      	cbnz	r5, 8008838 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80087ea:	68a0      	ldr	r0, [r4, #8]

    /* Case of use of channel 1 */
    switch (Alignment)
 80087ec:	2e04      	cmp	r6, #4
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80087ee:	4b39      	ldr	r3, [pc, #228]	; (80088d4 <HAL_DAC_Start_DMA+0x11c>)
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80087f0:	4a39      	ldr	r2, [pc, #228]	; (80088d8 <HAL_DAC_Start_DMA+0x120>)
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80087f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80087f4:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80087f8:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80087fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80087fe:	4a37      	ldr	r2, [pc, #220]	; (80088dc <HAL_DAC_Start_DMA+0x124>)
 8008800:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008802:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008806:	d059      	beq.n	80088bc <HAL_DAC_Start_DMA+0x104>
 8008808:	2e08      	cmp	r6, #8
 800880a:	d054      	beq.n	80088b6 <HAL_DAC_Start_DMA+0xfe>
 800880c:	2e00      	cmp	r6, #0
 800880e:	d04f      	beq.n	80088b0 <HAL_DAC_Start_DMA+0xf8>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008810:	462a      	mov	r2, r5

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008812:	f8dc 6000 	ldr.w	r6, [ip]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008816:	4643      	mov	r3, r8
 8008818:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800881a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
 800881e:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008822:	f000 fbe3 	bl	8008fec <HAL_DMA_Start_IT>
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008826:	2300      	movs	r3, #0
 8008828:	7163      	strb	r3, [r4, #5]

  if (status == HAL_OK)
 800882a:	b330      	cbz	r0, 800887a <HAL_DAC_Start_DMA+0xc2>
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	f043 0304 	orr.w	r3, r3, #4
 8008832:	6123      	str	r3, [r4, #16]
  }

  /* Return function status */
  return status;
}
 8008834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008838:	68e0      	ldr	r0, [r4, #12]
    switch (Alignment)
 800883a:	2e04      	cmp	r6, #4
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800883c:	4b28      	ldr	r3, [pc, #160]	; (80088e0 <HAL_DAC_Start_DMA+0x128>)
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800883e:	4a29      	ldr	r2, [pc, #164]	; (80088e4 <HAL_DAC_Start_DMA+0x12c>)
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008840:	63c3      	str	r3, [r0, #60]	; 0x3c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008842:	f8dc 3000 	ldr.w	r3, [ip]
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008846:	6402      	str	r2, [r0, #64]	; 0x40
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800884c:	4a26      	ldr	r2, [pc, #152]	; (80088e8 <HAL_DAC_Start_DMA+0x130>)
 800884e:	64c2      	str	r2, [r0, #76]	; 0x4c
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008850:	f8cc 3000 	str.w	r3, [ip]
    switch (Alignment)
 8008854:	d03b      	beq.n	80088ce <HAL_DAC_Start_DMA+0x116>
 8008856:	2e08      	cmp	r6, #8
 8008858:	d036      	beq.n	80088c8 <HAL_DAC_Start_DMA+0x110>
 800885a:	b396      	cbz	r6, 80088c2 <HAL_DAC_Start_DMA+0x10a>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800885c:	2200      	movs	r2, #0
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800885e:	f8dc 6000 	ldr.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008862:	4643      	mov	r3, r8
 8008864:	4639      	mov	r1, r7
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008866:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800886a:	f8cc 6000 	str.w	r6, [ip]
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800886e:	f000 fbbd 	bl	8008fec <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8008872:	2300      	movs	r3, #0
 8008874:	7163      	strb	r3, [r4, #5]
  if (status == HAL_OK)
 8008876:	2800      	cmp	r0, #0
 8008878:	d1d8      	bne.n	800882c <HAL_DAC_Start_DMA+0x74>
    __HAL_DAC_ENABLE(hdac, Channel);
 800887a:	6823      	ldr	r3, [r4, #0]
 800887c:	f005 0110 	and.w	r1, r5, #16
 8008880:	2501      	movs	r5, #1
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	408d      	lsls	r5, r1
 8008886:	4315      	orrs	r5, r2
 8008888:	601d      	str	r5, [r3, #0]
}
 800888a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_ALIGN(Alignment));
 800888e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8008892:	4816      	ldr	r0, [pc, #88]	; (80088ec <HAL_DAC_Start_DMA+0x134>)
 8008894:	f7fb ffcc 	bl	8004830 <assert_failed>
  __HAL_LOCK(hdac);
 8008898:	7962      	ldrb	r2, [r4, #5]
 800889a:	2a01      	cmp	r2, #1
 800889c:	d19e      	bne.n	80087dc <HAL_DAC_Start_DMA+0x24>
 800889e:	2002      	movs	r0, #2
}
 80088a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 80088a4:	f240 210f 	movw	r1, #527	; 0x20f
 80088a8:	4810      	ldr	r0, [pc, #64]	; (80088ec <HAL_DAC_Start_DMA+0x134>)
 80088aa:	f7fb ffc1 	bl	8004830 <assert_failed>
 80088ae:	e78d      	b.n	80087cc <HAL_DAC_Start_DMA+0x14>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80088b0:	f10c 0208 	add.w	r2, ip, #8
        break;
 80088b4:	e7ad      	b.n	8008812 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80088b6:	f10c 0210 	add.w	r2, ip, #16
        break;
 80088ba:	e7aa      	b.n	8008812 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80088bc:	f10c 020c 	add.w	r2, ip, #12
        break;
 80088c0:	e7a7      	b.n	8008812 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80088c2:	f10c 0214 	add.w	r2, ip, #20
        break;
 80088c6:	e7ca      	b.n	800885e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80088c8:	f10c 021c 	add.w	r2, ip, #28
        break;
 80088cc:	e7c7      	b.n	800885e <HAL_DAC_Start_DMA+0xa6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80088ce:	f10c 0218 	add.w	r2, ip, #24
        break;
 80088d2:	e7c4      	b.n	800885e <HAL_DAC_Start_DMA+0xa6>
 80088d4:	08008981 	.word	0x08008981
 80088d8:	08008995 	.word	0x08008995
 80088dc:	080089a5 	.word	0x080089a5
 80088e0:	08008af9 	.word	0x08008af9
 80088e4:	08008b09 	.word	0x08008b09
 80088e8:	08008b15 	.word	0x08008b15
 80088ec:	0802c268 	.word	0x0802c268

080088f0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80088f0:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 80088f2:	f031 0310 	bics.w	r3, r1, #16
{
 80088f6:	460d      	mov	r5, r1
 80088f8:	4604      	mov	r4, r0
  assert_param(IS_DAC_CHANNEL(Channel));
 80088fa:	d11e      	bne.n	800893a <HAL_DAC_Stop_DMA+0x4a>

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80088fc:	6803      	ldr	r3, [r0, #0]
 80088fe:	f001 0e10 	and.w	lr, r1, #16
 8008902:	f44f 5c80 	mov.w	ip, #4096	; 0x1000

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8008906:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	fa0c fc0e 	lsl.w	ip, ip, lr
  __HAL_DAC_DISABLE(hdac, Channel);
 800890e:	fa01 f10e 	lsl.w	r1, r1, lr
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008912:	ea20 000c 	bic.w	r0, r0, ip
 8008916:	6018      	str	r0, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	ea22 0201 	bic.w	r2, r2, r1
 800891e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8008920:	bb05      	cbnz	r5, 8008964 <HAL_DAC_Stop_DMA+0x74>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008922:	68a0      	ldr	r0, [r4, #8]
 8008924:	f000 fbbe 	bl	80090a4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008928:	6822      	ldr	r2, [r4, #0]
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800892a:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800892c:	6813      	ldr	r3, [r2, #0]
 800892e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008932:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008934:	2301      	movs	r3, #1
 8008936:	7123      	strb	r3, [r4, #4]
}
 8008938:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 800893a:	f240 218f 	movw	r1, #655	; 0x28f
 800893e:	480f      	ldr	r0, [pc, #60]	; (800897c <HAL_DAC_Stop_DMA+0x8c>)
 8008940:	f7fb ff76 	bl	8004830 <assert_failed>
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008944:	f005 0510 	and.w	r5, r5, #16
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __HAL_DAC_DISABLE(hdac, Channel);
 800894e:	2101      	movs	r1, #1
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	40a8      	lsls	r0, r5
  __HAL_DAC_DISABLE(hdac, Channel);
 8008954:	40a9      	lsls	r1, r5
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8008956:	ea22 0200 	bic.w	r2, r2, r0
 800895a:	601a      	str	r2, [r3, #0]
  __HAL_DAC_DISABLE(hdac, Channel);
 800895c:	681d      	ldr	r5, [r3, #0]
 800895e:	ea25 0501 	bic.w	r5, r5, r1
 8008962:	601d      	str	r5, [r3, #0]
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008964:	68e0      	ldr	r0, [r4, #12]
 8008966:	f000 fb9d 	bl	80090a4 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800896a:	6822      	ldr	r2, [r4, #0]
}
 800896c:	2000      	movs	r0, #0
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800896e:	6813      	ldr	r3, [r2, #0]
 8008970:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008974:	6013      	str	r3, [r2, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008976:	2301      	movs	r3, #1
 8008978:	7123      	strb	r3, [r4, #4]
}
 800897a:	bd38      	pop	{r3, r4, r5, pc}
 800897c:	0802c268 	.word	0x0802c268

08008980 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008980:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008982:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008984:	4620      	mov	r0, r4
 8008986:	f7fa fe31 	bl	80035ec <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800898a:	2301      	movs	r3, #1
 800898c:	7123      	strb	r3, [r4, #4]
}
 800898e:	bd10      	pop	{r4, pc}

08008990 <HAL_DAC_ConvHalfCpltCallbackCh1>:
 8008990:	4770      	bx	lr
 8008992:	bf00      	nop

08008994 <DAC_DMAHalfConvCpltCh1>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008994:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008996:	b508      	push	{r3, lr}
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008998:	f7ff fffa 	bl	8008990 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800899c:	bd08      	pop	{r3, pc}
 800899e:	bf00      	nop

080089a0 <HAL_DAC_ErrorCallbackCh1>:
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop

080089a4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80089a4:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089a6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80089a8:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80089aa:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80089ac:	f043 0304 	orr.w	r3, r3, #4
 80089b0:	6123      	str	r3, [r4, #16]
  HAL_DAC_ErrorCallbackCh1(hdac);
 80089b2:	f7ff fff5 	bl	80089a0 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80089b6:	2301      	movs	r3, #1
 80089b8:	7123      	strb	r3, [r4, #4]
}
 80089ba:	bd10      	pop	{r4, pc}

080089bc <HAL_DAC_DMAUnderrunCallbackCh1>:
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop

080089c0 <HAL_DAC_IRQHandler>:
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80089c0:	6803      	ldr	r3, [r0, #0]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	0491      	lsls	r1, r2, #18
{
 80089c6:	b510      	push	{r4, lr}
 80089c8:	4604      	mov	r4, r0
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 80089ca:	d502      	bpl.n	80089d2 <HAL_DAC_IRQHandler+0x12>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80089cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ce:	0492      	lsls	r2, r2, #18
 80089d0:	d418      	bmi.n	8008a04 <HAL_DAC_IRQHandler+0x44>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	0091      	lsls	r1, r2, #2
 80089d6:	d502      	bpl.n	80089de <HAL_DAC_IRQHandler+0x1e>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80089d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089da:	0092      	lsls	r2, r2, #2
 80089dc:	d400      	bmi.n	80089e0 <HAL_DAC_IRQHandler+0x20>
}
 80089de:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 80089e0:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80089e2:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80089e6:	4620      	mov	r0, r4
      hdac->State = HAL_DAC_STATE_ERROR;
 80089e8:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80089ea:	6922      	ldr	r2, [r4, #16]
 80089ec:	f042 0202 	orr.w	r2, r2, #2
 80089f0:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80089f2:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80089f4:	681a      	ldr	r2, [r3, #0]
 80089f6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
}
 80089fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80089fe:	601a      	str	r2, [r3, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8008a00:	f000 b878 	b.w	8008af4 <HAL_DACEx_DMAUnderrunCallbackCh2>
      hdac->State = HAL_DAC_STATE_ERROR;
 8008a04:	2204      	movs	r2, #4
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008a06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
      hdac->State = HAL_DAC_STATE_ERROR;
 8008a0a:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008a0c:	6902      	ldr	r2, [r0, #16]
 8008a0e:	f042 0201 	orr.w	r2, r2, #1
 8008a12:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008a14:	6359      	str	r1, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008a1c:	601a      	str	r2, [r3, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8008a1e:	f7ff ffcd 	bl	80089bc <HAL_DAC_DMAUnderrunCallbackCh1>
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	e7d5      	b.n	80089d2 <HAL_DAC_IRQHandler+0x12>
 8008a26:	bf00      	nop

08008a28 <HAL_DAC_ConfigChannel>:
{
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4604      	mov	r4, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008a2c:	6808      	ldr	r0, [r1, #0]
{
 8008a2e:	4616      	mov	r6, r2
 8008a30:	460d      	mov	r5, r1
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008a32:	f020 0308 	bic.w	r3, r0, #8
 8008a36:	f020 0204 	bic.w	r2, r0, #4
 8008a3a:	2b24      	cmp	r3, #36	; 0x24
 8008a3c:	bf18      	it	ne
 8008a3e:	2a00      	cmpne	r2, #0
 8008a40:	f020 0210 	bic.w	r2, r0, #16
 8008a44:	bf14      	ite	ne
 8008a46:	2301      	movne	r3, #1
 8008a48:	2300      	moveq	r3, #0
 8008a4a:	283c      	cmp	r0, #60	; 0x3c
 8008a4c:	bf0c      	ite	eq
 8008a4e:	2300      	moveq	r3, #0
 8008a50:	f003 0301 	andne.w	r3, r3, #1
 8008a54:	2a0c      	cmp	r2, #12
 8008a56:	bf0c      	ite	eq
 8008a58:	2300      	moveq	r3, #0
 8008a5a:	f003 0301 	andne.w	r3, r3, #1
 8008a5e:	b11b      	cbz	r3, 8008a68 <HAL_DAC_ConfigChannel+0x40>
 8008a60:	f020 0020 	bic.w	r0, r0, #32
 8008a64:	2814      	cmp	r0, #20
 8008a66:	d137      	bne.n	8008ad8 <HAL_DAC_ConfigChannel+0xb0>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008a68:	686b      	ldr	r3, [r5, #4]
 8008a6a:	f033 0302 	bics.w	r3, r3, #2
 8008a6e:	d12d      	bne.n	8008acc <HAL_DAC_ConfigChannel+0xa4>
  assert_param(IS_DAC_CHANNEL(Channel));
 8008a70:	f036 0310 	bics.w	r3, r6, #16
 8008a74:	d120      	bne.n	8008ab8 <HAL_DAC_ConfigChannel+0x90>
  __HAL_LOCK(hdac);
 8008a76:	7963      	ldrb	r3, [r4, #5]
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d025      	beq.n	8008ac8 <HAL_DAC_ConfigChannel+0xa0>
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a7c:	f006 0010 	and.w	r0, r6, #16
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a80:	2302      	movs	r3, #2
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a82:	f640 72fe 	movw	r2, #4094	; 0xffe
  tmpreg1 = hdac->Instance->CR;
 8008a86:	6821      	ldr	r1, [r4, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8008a88:	7123      	strb	r3, [r4, #4]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a8a:	fa02 f600 	lsl.w	r6, r2, r0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a8e:	e9d5 3200 	ldrd	r3, r2, [r5]
  __HAL_UNLOCK(hdac);
 8008a92:	2500      	movs	r5, #0
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8008a94:	4313      	orrs	r3, r2
  tmpreg1 = hdac->Instance->CR;
 8008a96:	680a      	ldr	r2, [r1, #0]
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a98:	4083      	lsls	r3, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8008a9a:	ea22 0206 	bic.w	r2, r2, r6
  hdac->State = HAL_DAC_STATE_READY;
 8008a9e:	2601      	movs	r6, #1
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008aa0:	4313      	orrs	r3, r2
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008aa2:	22c0      	movs	r2, #192	; 0xc0
  hdac->Instance->CR = tmpreg1;
 8008aa4:	600b      	str	r3, [r1, #0]
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008aa6:	4082      	lsls	r2, r0
 8008aa8:	680b      	ldr	r3, [r1, #0]
  return HAL_OK;
 8008aaa:	4628      	mov	r0, r5
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008aac:	ea23 0302 	bic.w	r3, r3, r2
 8008ab0:	600b      	str	r3, [r1, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8008ab2:	7126      	strb	r6, [r4, #4]
  __HAL_UNLOCK(hdac);
 8008ab4:	7165      	strb	r5, [r4, #5]
}
 8008ab6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_CHANNEL(Channel));
 8008ab8:	f240 31a6 	movw	r1, #934	; 0x3a6
 8008abc:	4809      	ldr	r0, [pc, #36]	; (8008ae4 <HAL_DAC_ConfigChannel+0xbc>)
 8008abe:	f7fb feb7 	bl	8004830 <assert_failed>
  __HAL_LOCK(hdac);
 8008ac2:	7963      	ldrb	r3, [r4, #5]
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d1d9      	bne.n	8008a7c <HAL_DAC_ConfigChannel+0x54>
 8008ac8:	2002      	movs	r0, #2
}
 8008aca:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8008acc:	f240 31a5 	movw	r1, #933	; 0x3a5
 8008ad0:	4804      	ldr	r0, [pc, #16]	; (8008ae4 <HAL_DAC_ConfigChannel+0xbc>)
 8008ad2:	f7fb fead 	bl	8004830 <assert_failed>
 8008ad6:	e7cb      	b.n	8008a70 <HAL_DAC_ConfigChannel+0x48>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8008ad8:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <HAL_DAC_ConfigChannel+0xbc>)
 8008ade:	f7fb fea7 	bl	8004830 <assert_failed>
 8008ae2:	e7c1      	b.n	8008a68 <HAL_DAC_ConfigChannel+0x40>
 8008ae4:	0802c268 	.word	0x0802c268

08008ae8 <HAL_DACEx_ConvCpltCallbackCh2>:
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop

08008aec <HAL_DACEx_ConvHalfCpltCallbackCh2>:
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <HAL_DACEx_ErrorCallbackCh2>:
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop

08008af4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop

08008af8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008af8:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008afa:	6b84      	ldr	r4, [r0, #56]	; 0x38

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008afc:	4620      	mov	r0, r4
 8008afe:	f7ff fff3 	bl	8008ae8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b02:	2301      	movs	r3, #1
 8008b04:	7123      	strb	r3, [r4, #4]
}
 8008b06:	bd10      	pop	{r4, pc}

08008b08 <DAC_DMAHalfConvCpltCh2>:
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008b08:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8008b0a:	b508      	push	{r3, lr}
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008b0c:	f7ff ffee 	bl	8008aec <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008b10:	bd08      	pop	{r3, pc}
 8008b12:	bf00      	nop

08008b14 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008b14:	b510      	push	{r4, lr}
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b16:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b18:	6923      	ldr	r3, [r4, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008b1a:	4620      	mov	r0, r4
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b1c:	f043 0304 	orr.w	r3, r3, #4
 8008b20:	6123      	str	r3, [r4, #16]
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008b22:	f7ff ffe5 	bl	8008af0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b26:	2301      	movs	r3, #1
 8008b28:	7123      	strb	r3, [r4, #4]
}
 8008b2a:	bd10      	pop	{r4, pc}

08008b2c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008b2c:	b538      	push	{r3, r4, r5, lr}
 8008b2e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8008b30:	f7ff f892 	bl	8007c58 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008b34:	2c00      	cmp	r4, #0
 8008b36:	f000 8156 	beq.w	8008de6 <HAL_DMA_Init+0x2ba>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008b3a:	6822      	ldr	r2, [r4, #0]
 8008b3c:	4605      	mov	r5, r0
 8008b3e:	4bad      	ldr	r3, [pc, #692]	; (8008df4 <HAL_DMA_Init+0x2c8>)
 8008b40:	49ad      	ldr	r1, [pc, #692]	; (8008df8 <HAL_DMA_Init+0x2cc>)
 8008b42:	429a      	cmp	r2, r3
 8008b44:	bf18      	it	ne
 8008b46:	428a      	cmpne	r2, r1
 8008b48:	f101 0118 	add.w	r1, r1, #24
 8008b4c:	bf14      	ite	ne
 8008b4e:	2301      	movne	r3, #1
 8008b50:	2300      	moveq	r3, #0
 8008b52:	428a      	cmp	r2, r1
 8008b54:	bf0c      	ite	eq
 8008b56:	2300      	moveq	r3, #0
 8008b58:	f003 0301 	andne.w	r3, r3, #1
 8008b5c:	3118      	adds	r1, #24
 8008b5e:	428a      	cmp	r2, r1
 8008b60:	bf0c      	ite	eq
 8008b62:	2300      	moveq	r3, #0
 8008b64:	f003 0301 	andne.w	r3, r3, #1
 8008b68:	3118      	adds	r1, #24
 8008b6a:	428a      	cmp	r2, r1
 8008b6c:	bf0c      	ite	eq
 8008b6e:	2300      	moveq	r3, #0
 8008b70:	f003 0301 	andne.w	r3, r3, #1
 8008b74:	3118      	adds	r1, #24
 8008b76:	428a      	cmp	r2, r1
 8008b78:	bf0c      	ite	eq
 8008b7a:	2300      	moveq	r3, #0
 8008b7c:	f003 0301 	andne.w	r3, r3, #1
 8008b80:	3118      	adds	r1, #24
 8008b82:	428a      	cmp	r2, r1
 8008b84:	bf0c      	ite	eq
 8008b86:	2300      	moveq	r3, #0
 8008b88:	f003 0301 	andne.w	r3, r3, #1
 8008b8c:	3118      	adds	r1, #24
 8008b8e:	428a      	cmp	r2, r1
 8008b90:	bf0c      	ite	eq
 8008b92:	2300      	moveq	r3, #0
 8008b94:	f003 0301 	andne.w	r3, r3, #1
 8008b98:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8008b9c:	428a      	cmp	r2, r1
 8008b9e:	bf0c      	ite	eq
 8008ba0:	2300      	moveq	r3, #0
 8008ba2:	f003 0301 	andne.w	r3, r3, #1
 8008ba6:	3118      	adds	r1, #24
 8008ba8:	428a      	cmp	r2, r1
 8008baa:	bf0c      	ite	eq
 8008bac:	2300      	moveq	r3, #0
 8008bae:	f003 0301 	andne.w	r3, r3, #1
 8008bb2:	3118      	adds	r1, #24
 8008bb4:	428a      	cmp	r2, r1
 8008bb6:	bf0c      	ite	eq
 8008bb8:	2300      	moveq	r3, #0
 8008bba:	f003 0301 	andne.w	r3, r3, #1
 8008bbe:	3118      	adds	r1, #24
 8008bc0:	428a      	cmp	r2, r1
 8008bc2:	bf0c      	ite	eq
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	f003 0301 	andne.w	r3, r3, #1
 8008bca:	3118      	adds	r1, #24
 8008bcc:	428a      	cmp	r2, r1
 8008bce:	bf0c      	ite	eq
 8008bd0:	2300      	moveq	r3, #0
 8008bd2:	f003 0301 	andne.w	r3, r3, #1
 8008bd6:	3118      	adds	r1, #24
 8008bd8:	428a      	cmp	r2, r1
 8008bda:	bf0c      	ite	eq
 8008bdc:	2300      	moveq	r3, #0
 8008bde:	f003 0301 	andne.w	r3, r3, #1
 8008be2:	3118      	adds	r1, #24
 8008be4:	428a      	cmp	r2, r1
 8008be6:	bf0c      	ite	eq
 8008be8:	2300      	moveq	r3, #0
 8008bea:	f003 0301 	andne.w	r3, r3, #1
 8008bee:	b11b      	cbz	r3, 8008bf8 <HAL_DMA_Init+0xcc>
 8008bf0:	4b82      	ldr	r3, [pc, #520]	; (8008dfc <HAL_DMA_Init+0x2d0>)
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	f040 8139 	bne.w	8008e6a <HAL_DMA_Init+0x33e>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008bf8:	6863      	ldr	r3, [r4, #4]
 8008bfa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008bfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c02:	bf18      	it	ne
 8008c04:	2b00      	cmpne	r3, #0
 8008c06:	bf14      	ite	ne
 8008c08:	2201      	movne	r2, #1
 8008c0a:	2200      	moveq	r2, #0
 8008c0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c10:	bf0c      	ite	eq
 8008c12:	2200      	moveq	r2, #0
 8008c14:	f002 0201 	andne.w	r2, r2, #1
 8008c18:	b11a      	cbz	r2, 8008c22 <HAL_DMA_Init+0xf6>
 8008c1a:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008c1e:	f040 8129 	bne.w	8008e74 <HAL_DMA_Init+0x348>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008c22:	68a3      	ldr	r3, [r4, #8]
 8008c24:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8008c28:	d002      	beq.n	8008c30 <HAL_DMA_Init+0x104>
 8008c2a:	2b80      	cmp	r3, #128	; 0x80
 8008c2c:	f040 80a8 	bne.w	8008d80 <HAL_DMA_Init+0x254>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008c30:	68e3      	ldr	r3, [r4, #12]
 8008c32:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008c36:	f040 80ac 	bne.w	8008d92 <HAL_DMA_Init+0x266>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008c3a:	6923      	ldr	r3, [r4, #16]
 8008c3c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008c40:	f040 80b0 	bne.w	8008da4 <HAL_DMA_Init+0x278>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008c44:	6963      	ldr	r3, [r4, #20]
 8008c46:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8008c4a:	d003      	beq.n	8008c54 <HAL_DMA_Init+0x128>
 8008c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c50:	f040 8091 	bne.w	8008d76 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008c54:	69a3      	ldr	r3, [r4, #24]
 8008c56:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8008c5a:	d003      	beq.n	8008c64 <HAL_DMA_Init+0x138>
 8008c5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c60:	f040 8084 	bne.w	8008d6c <HAL_DMA_Init+0x240>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008c64:	69e3      	ldr	r3, [r4, #28]
 8008c66:	f033 0220 	bics.w	r2, r3, #32
 8008c6a:	d002      	beq.n	8008c72 <HAL_DMA_Init+0x146>
 8008c6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c70:	d16f      	bne.n	8008d52 <HAL_DMA_Init+0x226>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008c72:	6a23      	ldr	r3, [r4, #32]
 8008c74:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008c78:	d173      	bne.n	8008d62 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008c7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c7c:	f033 0204 	bics.w	r2, r3, #4
 8008c80:	d15f      	bne.n	8008d42 <HAL_DMA_Init+0x216>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d14d      	bne.n	8008d22 <HAL_DMA_Init+0x1f6>
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008c86:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8008c88:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c8a:	2102      	movs	r1, #2
  __HAL_UNLOCK(hdma);
 8008c8c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8008c90:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8008c94:	681a      	ldr	r2, [r3, #0]
 8008c96:	f022 0201 	bic.w	r2, r2, #1
 8008c9a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008c9c:	e006      	b.n	8008cac <HAL_DMA_Init+0x180>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008c9e:	f7fe ffdb 	bl	8007c58 <HAL_GetTick>
 8008ca2:	1b40      	subs	r0, r0, r5
 8008ca4:	2805      	cmp	r0, #5
 8008ca6:	f200 8082 	bhi.w	8008dae <HAL_DMA_Init+0x282>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008caa:	6823      	ldr	r3, [r4, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	07d1      	lsls	r1, r2, #31
 8008cb0:	d4f5      	bmi.n	8008c9e <HAL_DMA_Init+0x172>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cb2:	e9d4 2501 	ldrd	r2, r5, [r4, #4]
 8008cb6:	68e1      	ldr	r1, [r4, #12]
 8008cb8:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cba:	69a0      	ldr	r0, [r4, #24]
  tmp = hdma->Instance->CR;
 8008cbc:	681d      	ldr	r5, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cbe:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008cc0:	6921      	ldr	r1, [r4, #16]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	6961      	ldr	r1, [r4, #20]
 8008cc6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008cc8:	69e1      	ldr	r1, [r4, #28]
 8008cca:	4302      	orrs	r2, r0
 8008ccc:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008cce:	494c      	ldr	r1, [pc, #304]	; (8008e00 <HAL_DMA_Init+0x2d4>)
 8008cd0:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8008cd2:	6a25      	ldr	r5, [r4, #32]
 8008cd4:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008cd6:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008cd8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008cda:	2904      	cmp	r1, #4
 8008cdc:	d06e      	beq.n	8008dbc <HAL_DMA_Init+0x290>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008cde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008ce0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008ce2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008ce6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008ce8:	b2da      	uxtb	r2, r3
  hdma->Instance->FCR = tmp;
 8008cea:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008cec:	4945      	ldr	r1, [pc, #276]	; (8008e04 <HAL_DMA_Init+0x2d8>)
 8008cee:	3a10      	subs	r2, #16
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008cf0:	4845      	ldr	r0, [pc, #276]	; (8008e08 <HAL_DMA_Init+0x2dc>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008cf2:	fba1 5102 	umull	r5, r1, r1, r2
  
  if (stream_number > 3U)
 8008cf6:	2a5f      	cmp	r2, #95	; 0x5f
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008cf8:	4a44      	ldr	r2, [pc, #272]	; (8008e0c <HAL_DMA_Init+0x2e0>)
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008cfa:	ea4f 1111 	mov.w	r1, r1, lsr #4
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008cfe:	ea02 0203 	and.w	r2, r2, r3
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d02:	f04f 033f 	mov.w	r3, #63	; 0x3f
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d06:	5c41      	ldrb	r1, [r0, r1]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d08:	f04f 0000 	mov.w	r0, #0
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d0c:	bf88      	it	hi
 8008d0e:	3204      	addhi	r2, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d10:	408b      	lsls	r3, r1
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008d12:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008d14:	65a2      	str	r2, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008d16:	6093      	str	r3, [r2, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8008d18:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d1a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8008d1c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008d20:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008d22:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008d24:	2b03      	cmp	r3, #3
 8008d26:	d860      	bhi.n	8008dea <HAL_DMA_Init+0x2be>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008d28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8008d2a:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8008d2e:	d171      	bne.n	8008e14 <HAL_DMA_Init+0x2e8>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8008d30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008d32:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8008d36:	d0a6      	beq.n	8008c86 <HAL_DMA_Init+0x15a>
 8008d38:	21c8      	movs	r1, #200	; 0xc8
 8008d3a:	4835      	ldr	r0, [pc, #212]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d3c:	f7fb fd78 	bl	8004830 <assert_failed>
 8008d40:	e7a1      	b.n	8008c86 <HAL_DMA_Init+0x15a>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8008d42:	21c1      	movs	r1, #193	; 0xc1
 8008d44:	4832      	ldr	r0, [pc, #200]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d46:	f7fb fd73 	bl	8004830 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8008d4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d09a      	beq.n	8008c86 <HAL_DMA_Init+0x15a>
 8008d50:	e7e7      	b.n	8008d22 <HAL_DMA_Init+0x1f6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8008d52:	21bf      	movs	r1, #191	; 0xbf
 8008d54:	482e      	ldr	r0, [pc, #184]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d56:	f7fb fd6b 	bl	8004830 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8008d5a:	6a23      	ldr	r3, [r4, #32]
 8008d5c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8008d60:	d08b      	beq.n	8008c7a <HAL_DMA_Init+0x14e>
 8008d62:	21c0      	movs	r1, #192	; 0xc0
 8008d64:	482a      	ldr	r0, [pc, #168]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d66:	f7fb fd63 	bl	8004830 <assert_failed>
 8008d6a:	e786      	b.n	8008c7a <HAL_DMA_Init+0x14e>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8008d6c:	21be      	movs	r1, #190	; 0xbe
 8008d6e:	4828      	ldr	r0, [pc, #160]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d70:	f7fb fd5e 	bl	8004830 <assert_failed>
 8008d74:	e776      	b.n	8008c64 <HAL_DMA_Init+0x138>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8008d76:	21bd      	movs	r1, #189	; 0xbd
 8008d78:	4825      	ldr	r0, [pc, #148]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d7a:	f7fb fd59 	bl	8004830 <assert_failed>
 8008d7e:	e769      	b.n	8008c54 <HAL_DMA_Init+0x128>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8008d80:	21ba      	movs	r1, #186	; 0xba
 8008d82:	4823      	ldr	r0, [pc, #140]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d84:	f7fb fd54 	bl	8004830 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8008d88:	68e3      	ldr	r3, [r4, #12]
 8008d8a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8008d8e:	f43f af54 	beq.w	8008c3a <HAL_DMA_Init+0x10e>
 8008d92:	21bb      	movs	r1, #187	; 0xbb
 8008d94:	481e      	ldr	r0, [pc, #120]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008d96:	f7fb fd4b 	bl	8004830 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8008d9a:	6923      	ldr	r3, [r4, #16]
 8008d9c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8008da0:	f43f af50 	beq.w	8008c44 <HAL_DMA_Init+0x118>
 8008da4:	21bc      	movs	r1, #188	; 0xbc
 8008da6:	481a      	ldr	r0, [pc, #104]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008da8:	f7fb fd42 	bl	8004830 <assert_failed>
 8008dac:	e74a      	b.n	8008c44 <HAL_DMA_Init+0x118>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008dae:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008db0:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 8008db2:	4618      	mov	r0, r3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008db4:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008db6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008dba:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008dbc:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8008dc0:	4329      	orrs	r1, r5
 8008dc2:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8008dc4:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8008dc6:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8008dc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008dca:	f021 0107 	bic.w	r1, r1, #7
 8008dce:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8008dd0:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008dd4:	2d00      	cmp	r5, #0
 8008dd6:	d087      	beq.n	8008ce8 <HAL_DMA_Init+0x1bc>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008dd8:	bb08      	cbnz	r0, 8008e1e <HAL_DMA_Init+0x2f2>
  {
    switch (tmp)
 8008dda:	2a01      	cmp	r2, #1
 8008ddc:	d040      	beq.n	8008e60 <HAL_DMA_Init+0x334>
 8008dde:	f032 0202 	bics.w	r2, r2, #2
 8008de2:	d181      	bne.n	8008ce8 <HAL_DMA_Init+0x1bc>
 8008de4:	e023      	b.n	8008e2e <HAL_DMA_Init+0x302>
    return HAL_ERROR;
 8008de6:	2001      	movs	r0, #1
}
 8008de8:	bd38      	pop	{r3, r4, r5, pc}
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8008dea:	21c6      	movs	r1, #198	; 0xc6
 8008dec:	4808      	ldr	r0, [pc, #32]	; (8008e10 <HAL_DMA_Init+0x2e4>)
 8008dee:	f7fb fd1f 	bl	8004830 <assert_failed>
 8008df2:	e799      	b.n	8008d28 <HAL_DMA_Init+0x1fc>
 8008df4:	40026010 	.word	0x40026010
 8008df8:	40026028 	.word	0x40026028
 8008dfc:	400264b8 	.word	0x400264b8
 8008e00:	e010803f 	.word	0xe010803f
 8008e04:	aaaaaaab 	.word	0xaaaaaaab
 8008e08:	0802c2d8 	.word	0x0802c2d8
 8008e0c:	fffffc00 	.word	0xfffffc00
 8008e10:	0802c2a0 	.word	0x0802c2a0
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8008e14:	21c7      	movs	r1, #199	; 0xc7
 8008e16:	481a      	ldr	r0, [pc, #104]	; (8008e80 <HAL_DMA_Init+0x354>)
 8008e18:	f7fb fd0a 	bl	8004830 <assert_failed>
 8008e1c:	e788      	b.n	8008d30 <HAL_DMA_Init+0x204>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008e1e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8008e22:	d00e      	beq.n	8008e42 <HAL_DMA_Init+0x316>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008e24:	2a02      	cmp	r2, #2
 8008e26:	d905      	bls.n	8008e34 <HAL_DMA_Init+0x308>
 8008e28:	2a03      	cmp	r2, #3
 8008e2a:	f47f af5d 	bne.w	8008ce8 <HAL_DMA_Init+0x1bc>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008e2e:	01ea      	lsls	r2, r5, #7
 8008e30:	f57f af5a 	bpl.w	8008ce8 <HAL_DMA_Init+0x1bc>
        hdma->State = HAL_DMA_STATE_READY;
 8008e34:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e36:	2240      	movs	r2, #64	; 0x40
        return HAL_ERROR; 
 8008e38:	4618      	mov	r0, r3
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008e3a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8008e3c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8008e40:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8008e42:	2a03      	cmp	r2, #3
 8008e44:	f63f af50 	bhi.w	8008ce8 <HAL_DMA_Init+0x1bc>
 8008e48:	a001      	add	r0, pc, #4	; (adr r0, 8008e50 <HAL_DMA_Init+0x324>)
 8008e4a:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8008e4e:	bf00      	nop
 8008e50:	08008e35 	.word	0x08008e35
 8008e54:	08008e2f 	.word	0x08008e2f
 8008e58:	08008e35 	.word	0x08008e35
 8008e5c:	08008e61 	.word	0x08008e61
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008e60:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8008e64:	f47f af40 	bne.w	8008ce8 <HAL_DMA_Init+0x1bc>
 8008e68:	e7e4      	b.n	8008e34 <HAL_DMA_Init+0x308>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008e6a:	21b8      	movs	r1, #184	; 0xb8
 8008e6c:	4804      	ldr	r0, [pc, #16]	; (8008e80 <HAL_DMA_Init+0x354>)
 8008e6e:	f7fb fcdf 	bl	8004830 <assert_failed>
 8008e72:	e6c1      	b.n	8008bf8 <HAL_DMA_Init+0xcc>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8008e74:	21b9      	movs	r1, #185	; 0xb9
 8008e76:	4802      	ldr	r0, [pc, #8]	; (8008e80 <HAL_DMA_Init+0x354>)
 8008e78:	f7fb fcda 	bl	8004830 <assert_failed>
 8008e7c:	e6d1      	b.n	8008c22 <HAL_DMA_Init+0xf6>
 8008e7e:	bf00      	nop
 8008e80:	0802c2a0 	.word	0x0802c2a0

08008e84 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f000 8097 	beq.w	8008fb8 <HAL_DMA_DeInit+0x134>
{
 8008e8a:	b510      	push	{r4, lr}
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8008e8c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8008e90:	4604      	mov	r4, r0
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	b2d8      	uxtb	r0, r3
 8008e96:	f000 808e 	beq.w	8008fb6 <HAL_DMA_DeInit+0x132>
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008e9a:	6822      	ldr	r2, [r4, #0]
 8008e9c:	4b4b      	ldr	r3, [pc, #300]	; (8008fcc <HAL_DMA_DeInit+0x148>)
 8008e9e:	484c      	ldr	r0, [pc, #304]	; (8008fd0 <HAL_DMA_DeInit+0x14c>)
 8008ea0:	494c      	ldr	r1, [pc, #304]	; (8008fd4 <HAL_DMA_DeInit+0x150>)
 8008ea2:	429a      	cmp	r2, r3
 8008ea4:	bf18      	it	ne
 8008ea6:	4282      	cmpne	r2, r0
 8008ea8:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8008eac:	bf14      	ite	ne
 8008eae:	2301      	movne	r3, #1
 8008eb0:	2300      	moveq	r3, #0
 8008eb2:	428a      	cmp	r2, r1
 8008eb4:	bf0c      	ite	eq
 8008eb6:	2300      	moveq	r3, #0
 8008eb8:	f003 0301 	andne.w	r3, r3, #1
 8008ebc:	3130      	adds	r1, #48	; 0x30
 8008ebe:	4282      	cmp	r2, r0
 8008ec0:	bf0c      	ite	eq
 8008ec2:	2300      	moveq	r3, #0
 8008ec4:	f003 0301 	andne.w	r3, r3, #1
 8008ec8:	3030      	adds	r0, #48	; 0x30
 8008eca:	428a      	cmp	r2, r1
 8008ecc:	bf0c      	ite	eq
 8008ece:	2300      	moveq	r3, #0
 8008ed0:	f003 0301 	andne.w	r3, r3, #1
 8008ed4:	3130      	adds	r1, #48	; 0x30
 8008ed6:	4282      	cmp	r2, r0
 8008ed8:	bf0c      	ite	eq
 8008eda:	2300      	moveq	r3, #0
 8008edc:	f003 0301 	andne.w	r3, r3, #1
 8008ee0:	3030      	adds	r0, #48	; 0x30
 8008ee2:	428a      	cmp	r2, r1
 8008ee4:	bf0c      	ite	eq
 8008ee6:	2300      	moveq	r3, #0
 8008ee8:	f003 0301 	andne.w	r3, r3, #1
 8008eec:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8008ef0:	4282      	cmp	r2, r0
 8008ef2:	bf0c      	ite	eq
 8008ef4:	2300      	moveq	r3, #0
 8008ef6:	f003 0301 	andne.w	r3, r3, #1
 8008efa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8008efe:	428a      	cmp	r2, r1
 8008f00:	bf0c      	ite	eq
 8008f02:	2300      	moveq	r3, #0
 8008f04:	f003 0301 	andne.w	r3, r3, #1
 8008f08:	3130      	adds	r1, #48	; 0x30
 8008f0a:	4282      	cmp	r2, r0
 8008f0c:	bf0c      	ite	eq
 8008f0e:	2300      	moveq	r3, #0
 8008f10:	f003 0301 	andne.w	r3, r3, #1
 8008f14:	3030      	adds	r0, #48	; 0x30
 8008f16:	428a      	cmp	r2, r1
 8008f18:	bf0c      	ite	eq
 8008f1a:	2300      	moveq	r3, #0
 8008f1c:	f003 0301 	andne.w	r3, r3, #1
 8008f20:	3130      	adds	r1, #48	; 0x30
 8008f22:	4282      	cmp	r2, r0
 8008f24:	bf0c      	ite	eq
 8008f26:	2300      	moveq	r3, #0
 8008f28:	f003 0301 	andne.w	r3, r3, #1
 8008f2c:	3030      	adds	r0, #48	; 0x30
 8008f2e:	428a      	cmp	r2, r1
 8008f30:	bf0c      	ite	eq
 8008f32:	2300      	moveq	r3, #0
 8008f34:	f003 0301 	andne.w	r3, r3, #1
 8008f38:	3130      	adds	r1, #48	; 0x30
 8008f3a:	4282      	cmp	r2, r0
 8008f3c:	bf0c      	ite	eq
 8008f3e:	2300      	moveq	r3, #0
 8008f40:	f003 0301 	andne.w	r3, r3, #1
 8008f44:	428a      	cmp	r2, r1
 8008f46:	bf0c      	ite	eq
 8008f48:	2300      	moveq	r3, #0
 8008f4a:	f003 0301 	andne.w	r3, r3, #1
 8008f4e:	b113      	cbz	r3, 8008f56 <HAL_DMA_DeInit+0xd2>
 8008f50:	4b21      	ldr	r3, [pc, #132]	; (8008fd8 <HAL_DMA_DeInit+0x154>)
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d132      	bne.n	8008fbc <HAL_DMA_DeInit+0x138>
  __HAL_DMA_DISABLE(hdma);
 8008f56:	6810      	ldr	r0, [r2, #0]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f58:	b2d3      	uxtb	r3, r2
 8008f5a:	4920      	ldr	r1, [pc, #128]	; (8008fdc <HAL_DMA_DeInit+0x158>)
  __HAL_DMA_DISABLE(hdma);
 8008f5c:	f020 0001 	bic.w	r0, r0, #1
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f60:	3b10      	subs	r3, #16
  __HAL_DMA_DISABLE(hdma);
 8008f62:	6010      	str	r0, [r2, #0]
  hdma->Instance->CR   = 0U;
 8008f64:	2000      	movs	r0, #0
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f66:	fba1 c103 	umull	ip, r1, r1, r3
  if (stream_number > 3U)
 8008f6a:	2b5f      	cmp	r3, #95	; 0x5f
  hdma->Instance->CR   = 0U;
 8008f6c:	6010      	str	r0, [r2, #0]
  hdma->XferCpltCallback = NULL;
 8008f6e:	f04f 0300 	mov.w	r3, #0
  hdma->Instance->NDTR = 0U;
 8008f72:	6050      	str	r0, [r2, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008f74:	ea4f 1111 	mov.w	r1, r1, lsr #4
  hdma->Instance->PAR  = 0U;
 8008f78:	6090      	str	r0, [r2, #8]
  hdma->Instance->M0AR = 0U;
 8008f7a:	60d0      	str	r0, [r2, #12]
  hdma->Instance->M1AR = 0U;
 8008f7c:	6110      	str	r0, [r2, #16]
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8008f7e:	f04f 0021 	mov.w	r0, #33	; 0x21
 8008f82:	6150      	str	r0, [r2, #20]
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f84:	4816      	ldr	r0, [pc, #88]	; (8008fe0 <HAL_DMA_DeInit+0x15c>)
 8008f86:	5c40      	ldrb	r0, [r0, r1]
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f88:	4916      	ldr	r1, [pc, #88]	; (8008fe4 <HAL_DMA_DeInit+0x160>)
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008f8a:	65e0      	str	r0, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f8c:	ea01 0102 	and.w	r1, r1, r2
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f90:	f04f 023f 	mov.w	r2, #63	; 0x3f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008f94:	bf88      	it	hi
 8008f96:	3104      	addhi	r1, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f98:	4082      	lsls	r2, r0
  return HAL_OK;
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	65a1      	str	r1, [r4, #88]	; 0x58
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008f9e:	608a      	str	r2, [r1, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008fa0:	6563      	str	r3, [r4, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8008fa2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8008fa6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  hdma->XferHalfCpltCallback = NULL;
 8008faa:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
  hdma->XferM1HalfCpltCallback = NULL;
 8008fae:	e9c4 3311 	strd	r3, r3, [r4, #68]	; 0x44
  hdma->XferAbortCallback = NULL;  
 8008fb2:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
}
 8008fb6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008fb8:	2001      	movs	r0, #1
}
 8008fba:	4770      	bx	lr
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8008fbc:	f240 1149 	movw	r1, #329	; 0x149
 8008fc0:	4809      	ldr	r0, [pc, #36]	; (8008fe8 <HAL_DMA_DeInit+0x164>)
 8008fc2:	f7fb fc35 	bl	8004830 <assert_failed>
  __HAL_DMA_DISABLE(hdma);
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	e7c5      	b.n	8008f56 <HAL_DMA_DeInit+0xd2>
 8008fca:	bf00      	nop
 8008fcc:	40026010 	.word	0x40026010
 8008fd0:	40026028 	.word	0x40026028
 8008fd4:	40026040 	.word	0x40026040
 8008fd8:	400264b8 	.word	0x400264b8
 8008fdc:	aaaaaaab 	.word	0xaaaaaaab
 8008fe0:	0802c2d8 	.word	0x0802c2d8
 8008fe4:	fffffc00 	.word	0xfffffc00
 8008fe8:	0802c2a0 	.word	0x0802c2a0

08008fec <HAL_DMA_Start_IT>:
{
 8008fec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ff0:	461e      	mov	r6, r3
 8008ff2:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008ff4:	f8d0 9058 	ldr.w	r9, [r0, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8008ff8:	1e58      	subs	r0, r3, #1
 8008ffa:	f64f 73fe 	movw	r3, #65534	; 0xfffe
{
 8008ffe:	4688      	mov	r8, r1
 8009000:	4617      	mov	r7, r2
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009002:	4298      	cmp	r0, r3
 8009004:	d83b      	bhi.n	800907e <HAL_DMA_Start_IT+0x92>
  __HAL_LOCK(hdma);
 8009006:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800900a:	2b01      	cmp	r3, #1
 800900c:	d040      	beq.n	8009090 <HAL_DMA_Start_IT+0xa4>
 800900e:	2301      	movs	r3, #1
 8009010:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009014:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009018:	2b01      	cmp	r3, #1
 800901a:	d005      	beq.n	8009028 <HAL_DMA_Start_IT+0x3c>
    __HAL_UNLOCK(hdma);	  
 800901c:	2300      	movs	r3, #0
    status = HAL_BUSY;
 800901e:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 8009020:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009024:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009028:	2302      	movs	r3, #2
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800902a:	6825      	ldr	r5, [r4, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 800902c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009030:	2300      	movs	r3, #0
 8009032:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009034:	682b      	ldr	r3, [r5, #0]
 8009036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800903a:	602b      	str	r3, [r5, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800903c:	68a3      	ldr	r3, [r4, #8]
  hdma->Instance->NDTR = DataLength;
 800903e:	606e      	str	r6, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009040:	2b40      	cmp	r3, #64	; 0x40
 8009042:	d028      	beq.n	8009096 <HAL_DMA_Start_IT+0xaa>
    hdma->Instance->PAR = SrcAddress;
 8009044:	f8c5 8008 	str.w	r8, [r5, #8]
    hdma->Instance->M0AR = DstAddress;
 8009048:	60ef      	str	r7, [r5, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800904a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800904c:	233f      	movs	r3, #63	; 0x3f
    if(hdma->XferHalfCpltCallback != NULL)
 800904e:	6c22      	ldr	r2, [r4, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009050:	408b      	lsls	r3, r1
 8009052:	f8c9 3008 	str.w	r3, [r9, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8009056:	682b      	ldr	r3, [r5, #0]
 8009058:	f043 0316 	orr.w	r3, r3, #22
 800905c:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800905e:	696b      	ldr	r3, [r5, #20]
 8009060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009064:	616b      	str	r3, [r5, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8009066:	b11a      	cbz	r2, 8009070 <HAL_DMA_Start_IT+0x84>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009068:	682b      	ldr	r3, [r5, #0]
 800906a:	f043 0308 	orr.w	r3, r3, #8
 800906e:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma);
 8009070:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009072:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009074:	f043 0301 	orr.w	r3, r3, #1
 8009078:	602b      	str	r3, [r5, #0]
}
 800907a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800907e:	f240 11cd 	movw	r1, #461	; 0x1cd
 8009082:	4807      	ldr	r0, [pc, #28]	; (80090a0 <HAL_DMA_Start_IT+0xb4>)
 8009084:	f7fb fbd4 	bl	8004830 <assert_failed>
  __HAL_LOCK(hdma);
 8009088:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800908c:	2b01      	cmp	r3, #1
 800908e:	d1be      	bne.n	800900e <HAL_DMA_Start_IT+0x22>
 8009090:	2002      	movs	r0, #2
}
 8009092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->Instance->PAR = DstAddress;
 8009096:	60af      	str	r7, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 8009098:	f8c5 800c 	str.w	r8, [r5, #12]
 800909c:	e7d5      	b.n	800904a <HAL_DMA_Start_IT+0x5e>
 800909e:	bf00      	nop
 80090a0:	0802c2a0 	.word	0x0802c2a0

080090a4 <HAL_DMA_Abort>:
{
 80090a4:	b570      	push	{r4, r5, r6, lr}
 80090a6:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80090a8:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 80090aa:	f7fe fdd5 	bl	8007c58 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80090ae:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d006      	beq.n	80090c4 <HAL_DMA_Abort+0x20>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090b6:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 80090b8:	2300      	movs	r3, #0
    return HAL_ERROR;
 80090ba:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80090bc:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 80090be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	4605      	mov	r5, r0
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	f022 0216 	bic.w	r2, r2, #22
 80090ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80090d0:	695a      	ldr	r2, [r3, #20]
 80090d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090d6:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80090d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80090da:	b33a      	cbz	r2, 800912c <HAL_DMA_Abort+0x88>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80090dc:	681a      	ldr	r2, [r3, #0]
 80090de:	f022 0208 	bic.w	r2, r2, #8
 80090e2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80090e4:	681a      	ldr	r2, [r3, #0]
 80090e6:	f022 0201 	bic.w	r2, r2, #1
 80090ea:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090ec:	e005      	b.n	80090fa <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80090ee:	f7fe fdb3 	bl	8007c58 <HAL_GetTick>
 80090f2:	1b43      	subs	r3, r0, r5
 80090f4:	2b05      	cmp	r3, #5
 80090f6:	d80f      	bhi.n	8009118 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80090f8:	6823      	ldr	r3, [r4, #0]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f013 0301 	ands.w	r3, r3, #1
 8009100:	d1f5      	bne.n	80090ee <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009102:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009104:	223f      	movs	r2, #63	; 0x3f
  return HAL_OK;
 8009106:	4618      	mov	r0, r3
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009108:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 800910a:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800910c:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 800910e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8009112:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8009116:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009118:	2303      	movs	r3, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800911a:	2120      	movs	r1, #32
        __HAL_UNLOCK(hdma);
 800911c:	2200      	movs	r2, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800911e:	6561      	str	r1, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 8009120:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009122:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009126:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
}
 800912a:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800912c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800912e:	2a00      	cmp	r2, #0
 8009130:	d1d4      	bne.n	80090dc <HAL_DMA_Abort+0x38>
 8009132:	e7d7      	b.n	80090e4 <HAL_DMA_Abort+0x40>

08009134 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009134:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
{
 8009138:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800913a:	2a02      	cmp	r2, #2
 800913c:	d003      	beq.n	8009146 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800913e:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009140:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009142:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009144:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8009146:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8009148:	2105      	movs	r1, #5
  return HAL_OK;
 800914a:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_ABORT;
 800914c:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8009150:	6813      	ldr	r3, [r2, #0]
 8009152:	f023 0301 	bic.w	r3, r3, #1
 8009156:	6013      	str	r3, [r2, #0]
}
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop

0800915c <HAL_DMA_IRQHandler>:
{
 800915c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0;
 8009160:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600;
 8009162:	4b74      	ldr	r3, [pc, #464]	; (8009334 <HAL_DMA_IRQHandler+0x1d8>)
{
 8009164:	b082      	sub	sp, #8
 8009166:	4680      	mov	r8, r0
  uint32_t timeout = SystemCoreClock / 9600;
 8009168:	681d      	ldr	r5, [r3, #0]
  __IO uint32_t count = 0;
 800916a:	9201      	str	r2, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800916c:	2208      	movs	r2, #8
 800916e:	e9d0 6316 	ldrd	r6, r3, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 8009172:	6834      	ldr	r4, [r6, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009174:	409a      	lsls	r2, r3
 8009176:	4222      	tst	r2, r4
 8009178:	d004      	beq.n	8009184 <HAL_DMA_IRQHandler+0x28>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800917a:	6801      	ldr	r1, [r0, #0]
 800917c:	680f      	ldr	r7, [r1, #0]
 800917e:	0778      	lsls	r0, r7, #29
 8009180:	f100 80ab 	bmi.w	80092da <HAL_DMA_IRQHandler+0x17e>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8009184:	2201      	movs	r2, #1
 8009186:	409a      	lsls	r2, r3
 8009188:	4222      	tst	r2, r4
 800918a:	d005      	beq.n	8009198 <HAL_DMA_IRQHandler+0x3c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800918c:	f8d8 1000 	ldr.w	r1, [r8]
 8009190:	6949      	ldr	r1, [r1, #20]
 8009192:	0609      	lsls	r1, r1, #24
 8009194:	f100 8099 	bmi.w	80092ca <HAL_DMA_IRQHandler+0x16e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8009198:	2204      	movs	r2, #4
 800919a:	409a      	lsls	r2, r3
 800919c:	4222      	tst	r2, r4
 800919e:	d005      	beq.n	80091ac <HAL_DMA_IRQHandler+0x50>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80091a0:	f8d8 1000 	ldr.w	r1, [r8]
 80091a4:	6809      	ldr	r1, [r1, #0]
 80091a6:	078f      	lsls	r7, r1, #30
 80091a8:	f100 8087 	bmi.w	80092ba <HAL_DMA_IRQHandler+0x15e>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80091ac:	2210      	movs	r2, #16
 80091ae:	409a      	lsls	r2, r3
 80091b0:	4222      	tst	r2, r4
 80091b2:	d004      	beq.n	80091be <HAL_DMA_IRQHandler+0x62>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80091b4:	f8d8 1000 	ldr.w	r1, [r8]
 80091b8:	680f      	ldr	r7, [r1, #0]
 80091ba:	0738      	lsls	r0, r7, #28
 80091bc:	d468      	bmi.n	8009290 <HAL_DMA_IRQHandler+0x134>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80091be:	2220      	movs	r2, #32
 80091c0:	409a      	lsls	r2, r3
 80091c2:	4222      	tst	r2, r4
 80091c4:	d017      	beq.n	80091f6 <HAL_DMA_IRQHandler+0x9a>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80091c6:	f8d8 1000 	ldr.w	r1, [r8]
 80091ca:	680c      	ldr	r4, [r1, #0]
 80091cc:	06e0      	lsls	r0, r4, #27
 80091ce:	d512      	bpl.n	80091f6 <HAL_DMA_IRQHandler+0x9a>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80091d0:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80091d2:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 80091d6:	2a05      	cmp	r2, #5
 80091d8:	d039      	beq.n	800924e <HAL_DMA_IRQHandler+0xf2>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80091da:	680b      	ldr	r3, [r1, #0]
 80091dc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80091e0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80091e2:	f000 808d 	beq.w	8009300 <HAL_DMA_IRQHandler+0x1a4>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80091e6:	0319      	lsls	r1, r3, #12
 80091e8:	f140 8098 	bpl.w	800931c <HAL_DMA_IRQHandler+0x1c0>
        if(hdma->XferCpltCallback != NULL)
 80091ec:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 80091f0:	b10b      	cbz	r3, 80091f6 <HAL_DMA_IRQHandler+0x9a>
          hdma->XferCpltCallback(hdma);
 80091f2:	4640      	mov	r0, r8
 80091f4:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091f6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d045      	beq.n	800928a <HAL_DMA_IRQHandler+0x12e>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80091fe:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8009202:	07da      	lsls	r2, r3, #31
 8009204:	d51b      	bpl.n	800923e <HAL_DMA_IRQHandler+0xe2>
      __HAL_DMA_DISABLE(hdma);
 8009206:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 800920a:	2305      	movs	r3, #5
  uint32_t timeout = SystemCoreClock / 9600;
 800920c:	494a      	ldr	r1, [pc, #296]	; (8009338 <HAL_DMA_IRQHandler+0x1dc>)
      hdma->State = HAL_DMA_STATE_ABORT;
 800920e:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009212:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600;
 8009214:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 8009218:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600;
 800921c:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 800921e:	6013      	str	r3, [r2, #0]
 8009220:	e002      	b.n	8009228 <HAL_DMA_IRQHandler+0xcc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009222:	6813      	ldr	r3, [r2, #0]
 8009224:	07db      	lsls	r3, r3, #31
 8009226:	d504      	bpl.n	8009232 <HAL_DMA_IRQHandler+0xd6>
        if (++count > timeout)
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	3301      	adds	r3, #1
 800922c:	42ab      	cmp	r3, r5
 800922e:	9301      	str	r3, [sp, #4]
 8009230:	d9f7      	bls.n	8009222 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_READY;
 8009232:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 8009234:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 8009236:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800923a:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 800923e:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 8009242:	b313      	cbz	r3, 800928a <HAL_DMA_IRQHandler+0x12e>
      hdma->XferErrorCallback(hdma);
 8009244:	4640      	mov	r0, r8
}
 8009246:	b002      	add	sp, #8
 8009248:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 800924c:	4718      	bx	r3
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800924e:	680a      	ldr	r2, [r1, #0]
 8009250:	f022 0216 	bic.w	r2, r2, #22
 8009254:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8009256:	694a      	ldr	r2, [r1, #20]
 8009258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800925c:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800925e:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8009262:	2a00      	cmp	r2, #0
 8009264:	d060      	beq.n	8009328 <HAL_DMA_IRQHandler+0x1cc>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009266:	680a      	ldr	r2, [r1, #0]
 8009268:	f022 0208 	bic.w	r2, r2, #8
 800926c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800926e:	223f      	movs	r2, #63	; 0x3f
        hdma->State = HAL_DMA_STATE_READY;
 8009270:	2101      	movs	r1, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009272:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8009276:	2200      	movs	r2, #0
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009278:	60b3      	str	r3, [r6, #8]
        if(hdma->XferAbortCallback != NULL)
 800927a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
 800927e:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8009282:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8009286:	2b00      	cmp	r3, #0
 8009288:	d1dc      	bne.n	8009244 <HAL_DMA_IRQHandler+0xe8>
}
 800928a:	b002      	add	sp, #8
 800928c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009290:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009292:	680a      	ldr	r2, [r1, #0]
 8009294:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009298:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800929a:	d12a      	bne.n	80092f2 <HAL_DMA_IRQHandler+0x196>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800929c:	05d7      	lsls	r7, r2, #23
 800929e:	d403      	bmi.n	80092a8 <HAL_DMA_IRQHandler+0x14c>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80092a0:	680a      	ldr	r2, [r1, #0]
 80092a2:	f022 0208 	bic.w	r2, r2, #8
 80092a6:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80092a8:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	d086      	beq.n	80091be <HAL_DMA_IRQHandler+0x62>
          hdma->XferHalfCpltCallback(hdma);
 80092b0:	4640      	mov	r0, r8
 80092b2:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80092b4:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 80092b8:	e781      	b.n	80091be <HAL_DMA_IRQHandler+0x62>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80092ba:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80092bc:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80092c0:	f042 0204 	orr.w	r2, r2, #4
 80092c4:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80092c8:	e770      	b.n	80091ac <HAL_DMA_IRQHandler+0x50>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80092ca:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80092cc:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80092d0:	f042 0202 	orr.w	r2, r2, #2
 80092d4:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80092d8:	e75e      	b.n	8009198 <HAL_DMA_IRQHandler+0x3c>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80092da:	680f      	ldr	r7, [r1, #0]
 80092dc:	f027 0704 	bic.w	r7, r7, #4
 80092e0:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80092e2:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80092e4:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 80092e8:	f042 0201 	orr.w	r2, r2, #1
 80092ec:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 80092f0:	e748      	b.n	8009184 <HAL_DMA_IRQHandler+0x28>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80092f2:	0312      	lsls	r2, r2, #12
 80092f4:	d5d8      	bpl.n	80092a8 <HAL_DMA_IRQHandler+0x14c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80092f6:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	d1d8      	bne.n	80092b0 <HAL_DMA_IRQHandler+0x154>
 80092fe:	e75e      	b.n	80091be <HAL_DMA_IRQHandler+0x62>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009300:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8009304:	f47f af72 	bne.w	80091ec <HAL_DMA_IRQHandler+0x90>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009308:	680a      	ldr	r2, [r1, #0]
 800930a:	f022 0210 	bic.w	r2, r2, #16
 800930e:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8009310:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 8009312:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8009316:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800931a:	e767      	b.n	80091ec <HAL_DMA_IRQHandler+0x90>
          if(hdma->XferM1CpltCallback != NULL)
 800931c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8009320:	2b00      	cmp	r3, #0
 8009322:	f47f af66 	bne.w	80091f2 <HAL_DMA_IRQHandler+0x96>
 8009326:	e766      	b.n	80091f6 <HAL_DMA_IRQHandler+0x9a>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009328:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800932c:	2a00      	cmp	r2, #0
 800932e:	d19a      	bne.n	8009266 <HAL_DMA_IRQHandler+0x10a>
 8009330:	e79d      	b.n	800926e <HAL_DMA_IRQHandler+0x112>
 8009332:	bf00      	nop
 8009334:	20000260 	.word	0x20000260
 8009338:	1b4e81b5 	.word	0x1b4e81b5

0800933c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800933c:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800933e:	4770      	bx	lr

08009340 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8009340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009344:	9f08      	ldr	r7, [sp, #32]
 8009346:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009348:	f64f 70fe 	movw	r0, #65534	; 0xfffe
{
 800934c:	4688      	mov	r8, r1
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800934e:	1e7d      	subs	r5, r7, #1
{
 8009350:	4691      	mov	r9, r2
 8009352:	461e      	mov	r6, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009354:	4285      	cmp	r5, r0
 8009356:	d85f      	bhi.n	8009418 <HAL_DMAEx_MultiBufferStart_IT+0xd8>
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009358:	68a0      	ldr	r0, [r4, #8]
 800935a:	2880      	cmp	r0, #128	; 0x80
 800935c:	d063      	beq.n	8009426 <HAL_DMAEx_MultiBufferStart_IT+0xe6>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
    return HAL_ERROR;
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800935e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8009362:	2b01      	cmp	r3, #1
 8009364:	f000 8090 	beq.w	8009488 <HAL_DMAEx_MultiBufferStart_IT+0x148>
 8009368:	2301      	movs	r3, #1
 800936a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800936e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8009372:	2b01      	cmp	r3, #1
 8009374:	d005      	beq.n	8009382 <HAL_DMAEx_MultiBufferStart_IT+0x42>
    __HAL_DMA_ENABLE(hdma); 
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8009376:	2300      	movs	r3, #0
    
    /* Return error status */
    status = HAL_BUSY;
 8009378:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);	  
 800937a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  }  
  return status; 
}
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8009382:	2302      	movs	r3, #2
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8009384:	6825      	ldr	r5, [r4, #0]
{
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009386:	2840      	cmp	r0, #64	; 0x40
    hdma->State = HAL_DMA_STATE_BUSY;
 8009388:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800938c:	f04f 0300 	mov.w	r3, #0
 8009390:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8009392:	682b      	ldr	r3, [r5, #0]
 8009394:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009398:	602b      	str	r3, [r5, #0]
    hdma->Instance->M1AR = SecondMemAddress;
 800939a:	612e      	str	r6, [r5, #16]
  hdma->Instance->NDTR = DataLength;
 800939c:	606f      	str	r7, [r5, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800939e:	d06a      	beq.n	8009476 <HAL_DMAEx_MultiBufferStart_IT+0x136>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 80093a0:	f8c5 8008 	str.w	r8, [r5, #8]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 80093a4:	f8c5 900c 	str.w	r9, [r5, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093a8:	4b93      	ldr	r3, [pc, #588]	; (80095f8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80093aa:	429d      	cmp	r5, r3
 80093ac:	d941      	bls.n	8009432 <HAL_DMAEx_MultiBufferStart_IT+0xf2>
 80093ae:	3b48      	subs	r3, #72	; 0x48
 80093b0:	4992      	ldr	r1, [pc, #584]	; (80095fc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80093b2:	4a93      	ldr	r2, [pc, #588]	; (8009600 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80093b4:	429d      	cmp	r5, r3
 80093b6:	bf18      	it	ne
 80093b8:	428d      	cmpne	r5, r1
 80093ba:	bf14      	ite	ne
 80093bc:	2301      	movne	r3, #1
 80093be:	2300      	moveq	r3, #0
 80093c0:	4295      	cmp	r5, r2
 80093c2:	bf0c      	ite	eq
 80093c4:	2300      	moveq	r3, #0
 80093c6:	f003 0301 	andne.w	r3, r3, #1
 80093ca:	b11b      	cbz	r3, 80093d4 <HAL_DMAEx_MultiBufferStart_IT+0x94>
 80093cc:	4b8d      	ldr	r3, [pc, #564]	; (8009604 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80093ce:	429d      	cmp	r5, r3
 80093d0:	f040 812e 	bne.w	8009630 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>
 80093d4:	4b8c      	ldr	r3, [pc, #560]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80093d6:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80093d8:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80093da:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80093dc:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80093de:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80093e0:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80093e2:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80093e4:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80093e6:	2201      	movs	r2, #1
 80093e8:	4b87      	ldr	r3, [pc, #540]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 80093ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80093ec:	682b      	ldr	r3, [r5, #0]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093ee:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80093f0:	f043 0316 	orr.w	r3, r3, #22
 80093f4:	602b      	str	r3, [r5, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80093f6:	696b      	ldr	r3, [r5, #20]
 80093f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093fc:	616b      	str	r3, [r5, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80093fe:	2a00      	cmp	r2, #0
 8009400:	d03e      	beq.n	8009480 <HAL_DMAEx_MultiBufferStart_IT+0x140>
      hdma->Instance->CR  |= DMA_IT_HT;
 8009402:	682b      	ldr	r3, [r5, #0]
 8009404:	f043 0308 	orr.w	r3, r3, #8
 8009408:	602b      	str	r3, [r5, #0]
    __HAL_DMA_ENABLE(hdma); 
 800940a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800940c:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma); 
 800940e:	f043 0301 	orr.w	r3, r3, #1
 8009412:	602b      	str	r3, [r5, #0]
}
 8009414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8009418:	487c      	ldr	r0, [pc, #496]	; (800960c <HAL_DMAEx_MultiBufferStart_IT+0x2cc>)
 800941a:	21a1      	movs	r1, #161	; 0xa1
 800941c:	f7fb fa08 	bl	8004830 <assert_failed>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009420:	68a0      	ldr	r0, [r4, #8]
 8009422:	2880      	cmp	r0, #128	; 0x80
 8009424:	d19b      	bne.n	800935e <HAL_DMAEx_MultiBufferStart_IT+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8009426:	f44f 7380 	mov.w	r3, #256	; 0x100
    return HAL_ERROR;
 800942a:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 800942c:	6563      	str	r3, [r4, #84]	; 0x54
}
 800942e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009432:	4b77      	ldr	r3, [pc, #476]	; (8009610 <HAL_DMAEx_MultiBufferStart_IT+0x2d0>)
 8009434:	429d      	cmp	r5, r3
 8009436:	d929      	bls.n	800948c <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8009438:	3ba8      	subs	r3, #168	; 0xa8
 800943a:	4976      	ldr	r1, [pc, #472]	; (8009614 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 800943c:	4a70      	ldr	r2, [pc, #448]	; (8009600 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800943e:	429d      	cmp	r5, r3
 8009440:	bf18      	it	ne
 8009442:	428d      	cmpne	r5, r1
 8009444:	bf14      	ite	ne
 8009446:	2301      	movne	r3, #1
 8009448:	2300      	moveq	r3, #0
 800944a:	4295      	cmp	r5, r2
 800944c:	bf0c      	ite	eq
 800944e:	2300      	moveq	r3, #0
 8009450:	f003 0301 	andne.w	r3, r3, #1
 8009454:	b113      	cbz	r3, 800945c <HAL_DMAEx_MultiBufferStart_IT+0x11c>
 8009456:	4b6b      	ldr	r3, [pc, #428]	; (8009604 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8009458:	429d      	cmp	r5, r3
 800945a:	d15a      	bne.n	8009512 <HAL_DMAEx_MultiBufferStart_IT+0x1d2>
 800945c:	4b6a      	ldr	r3, [pc, #424]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 800945e:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009460:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009462:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009464:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009466:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009468:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800946a:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800946c:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800946e:	2301      	movs	r3, #1
 8009470:	4a65      	ldr	r2, [pc, #404]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
 8009472:	6093      	str	r3, [r2, #8]
 8009474:	e7ba      	b.n	80093ec <HAL_DMAEx_MultiBufferStart_IT+0xac>
    hdma->Instance->PAR = DstAddress;
 8009476:	f8c5 9008 	str.w	r9, [r5, #8]
    hdma->Instance->M0AR = SrcAddress;
 800947a:	f8c5 800c 	str.w	r8, [r5, #12]
 800947e:	e793      	b.n	80093a8 <HAL_DMAEx_MultiBufferStart_IT+0x68>
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009480:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1bd      	bne.n	8009402 <HAL_DMAEx_MultiBufferStart_IT+0xc2>
 8009486:	e7c0      	b.n	800940a <HAL_DMAEx_MultiBufferStart_IT+0xca>
  __HAL_LOCK(hdma);
 8009488:	2002      	movs	r0, #2
 800948a:	e778      	b.n	800937e <HAL_DMAEx_MultiBufferStart_IT+0x3e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800948c:	4b62      	ldr	r3, [pc, #392]	; (8009618 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>)
 800948e:	429d      	cmp	r5, r3
 8009490:	d91f      	bls.n	80094d2 <HAL_DMAEx_MultiBufferStart_IT+0x192>
 8009492:	3b48      	subs	r3, #72	; 0x48
 8009494:	495f      	ldr	r1, [pc, #380]	; (8009614 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 8009496:	4a5a      	ldr	r2, [pc, #360]	; (8009600 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8009498:	429d      	cmp	r5, r3
 800949a:	bf18      	it	ne
 800949c:	428d      	cmpne	r5, r1
 800949e:	bf14      	ite	ne
 80094a0:	2301      	movne	r3, #1
 80094a2:	2300      	moveq	r3, #0
 80094a4:	4295      	cmp	r5, r2
 80094a6:	bf0c      	ite	eq
 80094a8:	2300      	moveq	r3, #0
 80094aa:	f003 0301 	andne.w	r3, r3, #1
 80094ae:	b11b      	cbz	r3, 80094b8 <HAL_DMAEx_MultiBufferStart_IT+0x178>
 80094b0:	4b54      	ldr	r3, [pc, #336]	; (8009604 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80094b2:	429d      	cmp	r5, r3
 80094b4:	f040 8152 	bne.w	800975c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
 80094b8:	4b58      	ldr	r3, [pc, #352]	; (800961c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80094ba:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094bc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80094be:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094c0:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094c2:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80094c4:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80094c6:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80094c8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80094ca:	2301      	movs	r3, #1
 80094cc:	4a53      	ldr	r2, [pc, #332]	; (800961c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80094ce:	60d3      	str	r3, [r2, #12]
 80094d0:	e78c      	b.n	80093ec <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80094d2:	4b50      	ldr	r3, [pc, #320]	; (8009614 <HAL_DMAEx_MultiBufferStart_IT+0x2d4>)
 80094d4:	4949      	ldr	r1, [pc, #292]	; (80095fc <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80094d6:	4a4a      	ldr	r2, [pc, #296]	; (8009600 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80094d8:	429d      	cmp	r5, r3
 80094da:	bf18      	it	ne
 80094dc:	428d      	cmpne	r5, r1
 80094de:	bf14      	ite	ne
 80094e0:	2301      	movne	r3, #1
 80094e2:	2300      	moveq	r3, #0
 80094e4:	4295      	cmp	r5, r2
 80094e6:	bf0c      	ite	eq
 80094e8:	2300      	moveq	r3, #0
 80094ea:	f003 0301 	andne.w	r3, r3, #1
 80094ee:	b11b      	cbz	r3, 80094f8 <HAL_DMAEx_MultiBufferStart_IT+0x1b8>
 80094f0:	4b44      	ldr	r3, [pc, #272]	; (8009604 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80094f2:	429d      	cmp	r5, r3
 80094f4:	f040 80be 	bne.w	8009674 <HAL_DMAEx_MultiBufferStart_IT+0x334>
 80094f8:	4b48      	ldr	r3, [pc, #288]	; (800961c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 80094fa:	2120      	movs	r1, #32
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80094fc:	2210      	movs	r2, #16
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80094fe:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009500:	2108      	movs	r1, #8
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009502:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009504:	2204      	movs	r2, #4
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009506:	6099      	str	r1, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009508:	609a      	str	r2, [r3, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800950a:	2301      	movs	r3, #1
 800950c:	4a43      	ldr	r2, [pc, #268]	; (800961c <HAL_DMAEx_MultiBufferStart_IT+0x2dc>)
 800950e:	6093      	str	r3, [r2, #8]
 8009510:	e76c      	b.n	80093ec <HAL_DMAEx_MultiBufferStart_IT+0xac>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009512:	3b48      	subs	r3, #72	; 0x48
 8009514:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009518:	3218      	adds	r2, #24
 800951a:	429d      	cmp	r5, r3
 800951c:	bf18      	it	ne
 800951e:	428d      	cmpne	r5, r1
 8009520:	bf14      	ite	ne
 8009522:	2301      	movne	r3, #1
 8009524:	2300      	moveq	r3, #0
 8009526:	4295      	cmp	r5, r2
 8009528:	bf0c      	ite	eq
 800952a:	2300      	moveq	r3, #0
 800952c:	f003 0301 	andne.w	r3, r3, #1
 8009530:	b11b      	cbz	r3, 800953a <HAL_DMAEx_MultiBufferStart_IT+0x1fa>
 8009532:	4b3b      	ldr	r3, [pc, #236]	; (8009620 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009534:	429d      	cmp	r5, r3
 8009536:	f040 8210 	bne.w	800995a <HAL_DMAEx_MultiBufferStart_IT+0x61a>
 800953a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800953e:	4b39      	ldr	r3, [pc, #228]	; (8009624 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009540:	4839      	ldr	r0, [pc, #228]	; (8009628 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009542:	4a31      	ldr	r2, [pc, #196]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009544:	429d      	cmp	r5, r3
 8009546:	bf18      	it	ne
 8009548:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800954a:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800954c:	f5a2 725e 	sub.w	r2, r2, #888	; 0x378
 8009550:	bf14      	ite	ne
 8009552:	2301      	movne	r3, #1
 8009554:	2300      	moveq	r3, #0
 8009556:	4295      	cmp	r5, r2
 8009558:	bf0c      	ite	eq
 800955a:	2300      	moveq	r3, #0
 800955c:	f003 0301 	andne.w	r3, r3, #1
 8009560:	b11b      	cbz	r3, 800956a <HAL_DMAEx_MultiBufferStart_IT+0x22a>
 8009562:	4b2f      	ldr	r3, [pc, #188]	; (8009620 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009564:	429d      	cmp	r5, r3
 8009566:	f040 8212 	bne.w	800998e <HAL_DMAEx_MultiBufferStart_IT+0x64e>
 800956a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800956e:	4b2d      	ldr	r3, [pc, #180]	; (8009624 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8009570:	482d      	ldr	r0, [pc, #180]	; (8009628 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009572:	4925      	ldr	r1, [pc, #148]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009574:	429d      	cmp	r5, r3
 8009576:	bf18      	it	ne
 8009578:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800957a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800957c:	bf14      	ite	ne
 800957e:	2301      	movne	r3, #1
 8009580:	2300      	moveq	r3, #0
 8009582:	4a2a      	ldr	r2, [pc, #168]	; (800962c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8009584:	4295      	cmp	r5, r2
 8009586:	bf0c      	ite	eq
 8009588:	2300      	moveq	r3, #0
 800958a:	f003 0301 	andne.w	r3, r3, #1
 800958e:	b11b      	cbz	r3, 8009598 <HAL_DMAEx_MultiBufferStart_IT+0x258>
 8009590:	4b23      	ldr	r3, [pc, #140]	; (8009620 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8009592:	429d      	cmp	r5, r3
 8009594:	f040 822b 	bne.w	80099ee <HAL_DMAEx_MultiBufferStart_IT+0x6ae>
 8009598:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800959c:	4b22      	ldr	r3, [pc, #136]	; (8009628 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800959e:	4821      	ldr	r0, [pc, #132]	; (8009624 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095a0:	4919      	ldr	r1, [pc, #100]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095a2:	429d      	cmp	r5, r3
 80095a4:	bf18      	it	ne
 80095a6:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80095a8:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095aa:	bf14      	ite	ne
 80095ac:	2301      	movne	r3, #1
 80095ae:	2300      	moveq	r3, #0
 80095b0:	4a1e      	ldr	r2, [pc, #120]	; (800962c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80095b2:	4295      	cmp	r5, r2
 80095b4:	bf0c      	ite	eq
 80095b6:	2300      	moveq	r3, #0
 80095b8:	f003 0301 	andne.w	r3, r3, #1
 80095bc:	b11b      	cbz	r3, 80095c6 <HAL_DMAEx_MultiBufferStart_IT+0x286>
 80095be:	4b18      	ldr	r3, [pc, #96]	; (8009620 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80095c0:	429d      	cmp	r5, r3
 80095c2:	f040 81fc 	bne.w	80099be <HAL_DMAEx_MultiBufferStart_IT+0x67e>
 80095c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095ca:	4b17      	ldr	r3, [pc, #92]	; (8009628 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80095cc:	4815      	ldr	r0, [pc, #84]	; (8009624 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095ce:	490e      	ldr	r1, [pc, #56]	; (8009608 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095d0:	429d      	cmp	r5, r3
 80095d2:	bf18      	it	ne
 80095d4:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80095d6:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80095d8:	bf14      	ite	ne
 80095da:	2301      	movne	r3, #1
 80095dc:	2300      	moveq	r3, #0
 80095de:	4a13      	ldr	r2, [pc, #76]	; (800962c <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80095e0:	4295      	cmp	r5, r2
 80095e2:	bf0c      	ite	eq
 80095e4:	2300      	moveq	r3, #0
 80095e6:	f003 0301 	andne.w	r3, r3, #1
 80095ea:	b11b      	cbz	r3, 80095f4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>
 80095ec:	4b0c      	ldr	r3, [pc, #48]	; (8009620 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80095ee:	429d      	cmp	r5, r3
 80095f0:	f040 8215 	bne.w	8009a1e <HAL_DMAEx_MultiBufferStart_IT+0x6de>
 80095f4:	2340      	movs	r3, #64	; 0x40
 80095f6:	e73b      	b.n	8009470 <HAL_DMAEx_MultiBufferStart_IT+0x130>
 80095f8:	40026458 	.word	0x40026458
 80095fc:	40026010 	.word	0x40026010
 8009600:	40026070 	.word	0x40026070
 8009604:	40026470 	.word	0x40026470
 8009608:	40026400 	.word	0x40026400
 800960c:	0802c2e0 	.word	0x0802c2e0
 8009610:	400260b8 	.word	0x400260b8
 8009614:	40026410 	.word	0x40026410
 8009618:	40026058 	.word	0x40026058
 800961c:	40026000 	.word	0x40026000
 8009620:	40026488 	.word	0x40026488
 8009624:	40026028 	.word	0x40026028
 8009628:	40026428 	.word	0x40026428
 800962c:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009630:	3b48      	subs	r3, #72	; 0x48
 8009632:	3118      	adds	r1, #24
 8009634:	3218      	adds	r2, #24
 8009636:	429d      	cmp	r5, r3
 8009638:	bf18      	it	ne
 800963a:	428d      	cmpne	r5, r1
 800963c:	bf14      	ite	ne
 800963e:	2301      	movne	r3, #1
 8009640:	2300      	moveq	r3, #0
 8009642:	4295      	cmp	r5, r2
 8009644:	bf0c      	ite	eq
 8009646:	2300      	moveq	r3, #0
 8009648:	f003 0301 	andne.w	r3, r3, #1
 800964c:	b11b      	cbz	r3, 8009656 <HAL_DMAEx_MultiBufferStart_IT+0x316>
 800964e:	4b7d      	ldr	r3, [pc, #500]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009650:	429d      	cmp	r5, r3
 8009652:	f040 8103 	bne.w	800985c <HAL_DMAEx_MultiBufferStart_IT+0x51c>
 8009656:	4b7c      	ldr	r3, [pc, #496]	; (8009848 <HAL_DMAEx_MultiBufferStart_IT+0x508>)
 8009658:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800965c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009660:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009662:	f44f 7100 	mov.w	r1, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009666:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009668:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800966c:	60d9      	str	r1, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800966e:	60da      	str	r2, [r3, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009670:	2240      	movs	r2, #64	; 0x40
 8009672:	e6b9      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009674:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009678:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 800967c:	3218      	adds	r2, #24
 800967e:	429d      	cmp	r5, r3
 8009680:	bf18      	it	ne
 8009682:	428d      	cmpne	r5, r1
 8009684:	bf14      	ite	ne
 8009686:	2301      	movne	r3, #1
 8009688:	2300      	moveq	r3, #0
 800968a:	4295      	cmp	r5, r2
 800968c:	bf0c      	ite	eq
 800968e:	2300      	moveq	r3, #0
 8009690:	f003 0301 	andne.w	r3, r3, #1
 8009694:	b11b      	cbz	r3, 800969e <HAL_DMAEx_MultiBufferStart_IT+0x35e>
 8009696:	4b6b      	ldr	r3, [pc, #428]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009698:	429d      	cmp	r5, r3
 800969a:	f040 81d8 	bne.w	8009a4e <HAL_DMAEx_MultiBufferStart_IT+0x70e>
 800969e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096a2:	4b6a      	ldr	r3, [pc, #424]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80096a4:	486a      	ldr	r0, [pc, #424]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096a6:	4a6b      	ldr	r2, [pc, #428]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096a8:	429d      	cmp	r5, r3
 80096aa:	bf18      	it	ne
 80096ac:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80096ae:	6091      	str	r1, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096b0:	f102 0288 	add.w	r2, r2, #136	; 0x88
 80096b4:	bf14      	ite	ne
 80096b6:	2301      	movne	r3, #1
 80096b8:	2300      	moveq	r3, #0
 80096ba:	4295      	cmp	r5, r2
 80096bc:	bf0c      	ite	eq
 80096be:	2300      	moveq	r3, #0
 80096c0:	f003 0301 	andne.w	r3, r3, #1
 80096c4:	b11b      	cbz	r3, 80096ce <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80096c6:	4b5f      	ldr	r3, [pc, #380]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80096c8:	429d      	cmp	r5, r3
 80096ca:	f040 81d9 	bne.w	8009a80 <HAL_DMAEx_MultiBufferStart_IT+0x740>
 80096ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096d2:	4b5e      	ldr	r3, [pc, #376]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80096d4:	485e      	ldr	r0, [pc, #376]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096d6:	495f      	ldr	r1, [pc, #380]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096d8:	429d      	cmp	r5, r3
 80096da:	bf18      	it	ne
 80096dc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80096de:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80096e0:	bf14      	ite	ne
 80096e2:	2301      	movne	r3, #1
 80096e4:	2300      	moveq	r3, #0
 80096e6:	4a5c      	ldr	r2, [pc, #368]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80096e8:	4295      	cmp	r5, r2
 80096ea:	bf0c      	ite	eq
 80096ec:	2300      	moveq	r3, #0
 80096ee:	f003 0301 	andne.w	r3, r3, #1
 80096f2:	b11b      	cbz	r3, 80096fc <HAL_DMAEx_MultiBufferStart_IT+0x3bc>
 80096f4:	4b53      	ldr	r3, [pc, #332]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80096f6:	429d      	cmp	r5, r3
 80096f8:	f040 822c 	bne.w	8009b54 <HAL_DMAEx_MultiBufferStart_IT+0x814>
 80096fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009700:	4b53      	ldr	r3, [pc, #332]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009702:	4852      	ldr	r0, [pc, #328]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009704:	4953      	ldr	r1, [pc, #332]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009706:	429d      	cmp	r5, r3
 8009708:	bf18      	it	ne
 800970a:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800970c:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800970e:	bf14      	ite	ne
 8009710:	2301      	movne	r3, #1
 8009712:	2300      	moveq	r3, #0
 8009714:	4a50      	ldr	r2, [pc, #320]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009716:	4295      	cmp	r5, r2
 8009718:	bf0c      	ite	eq
 800971a:	2300      	moveq	r3, #0
 800971c:	f003 0301 	andne.w	r3, r3, #1
 8009720:	b11b      	cbz	r3, 800972a <HAL_DMAEx_MultiBufferStart_IT+0x3ea>
 8009722:	4b48      	ldr	r3, [pc, #288]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009724:	429d      	cmp	r5, r3
 8009726:	f040 81db 	bne.w	8009ae0 <HAL_DMAEx_MultiBufferStart_IT+0x7a0>
 800972a:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800972e:	4b47      	ldr	r3, [pc, #284]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 8009730:	4847      	ldr	r0, [pc, #284]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009732:	4948      	ldr	r1, [pc, #288]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009734:	429d      	cmp	r5, r3
 8009736:	bf18      	it	ne
 8009738:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800973a:	608a      	str	r2, [r1, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800973c:	bf14      	ite	ne
 800973e:	2301      	movne	r3, #1
 8009740:	2300      	moveq	r3, #0
 8009742:	4a45      	ldr	r2, [pc, #276]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 8009744:	4295      	cmp	r5, r2
 8009746:	bf0c      	ite	eq
 8009748:	2300      	moveq	r3, #0
 800974a:	f003 0301 	andne.w	r3, r3, #1
 800974e:	b11b      	cbz	r3, 8009758 <HAL_DMAEx_MultiBufferStart_IT+0x418>
 8009750:	4b3c      	ldr	r3, [pc, #240]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009752:	429d      	cmp	r5, r3
 8009754:	f040 822d 	bne.w	8009bb2 <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8009758:	2340      	movs	r3, #64	; 0x40
 800975a:	e6d7      	b.n	800950c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800975c:	3b48      	subs	r3, #72	; 0x48
 800975e:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009762:	3218      	adds	r2, #24
 8009764:	429d      	cmp	r5, r3
 8009766:	bf18      	it	ne
 8009768:	428d      	cmpne	r5, r1
 800976a:	bf14      	ite	ne
 800976c:	2301      	movne	r3, #1
 800976e:	2300      	moveq	r3, #0
 8009770:	4295      	cmp	r5, r2
 8009772:	bf0c      	ite	eq
 8009774:	2300      	moveq	r3, #0
 8009776:	f003 0301 	andne.w	r3, r3, #1
 800977a:	b11b      	cbz	r3, 8009784 <HAL_DMAEx_MultiBufferStart_IT+0x444>
 800977c:	4b31      	ldr	r3, [pc, #196]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800977e:	429d      	cmp	r5, r3
 8009780:	f040 81d0 	bne.w	8009b24 <HAL_DMAEx_MultiBufferStart_IT+0x7e4>
 8009784:	f44f 6100 	mov.w	r1, #2048	; 0x800
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009788:	4b31      	ldr	r3, [pc, #196]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 800978a:	4830      	ldr	r0, [pc, #192]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800978c:	4a31      	ldr	r2, [pc, #196]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800978e:	429d      	cmp	r5, r3
 8009790:	bf18      	it	ne
 8009792:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009794:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009796:	f102 0288 	add.w	r2, r2, #136	; 0x88
 800979a:	bf14      	ite	ne
 800979c:	2301      	movne	r3, #1
 800979e:	2300      	moveq	r3, #0
 80097a0:	4295      	cmp	r5, r2
 80097a2:	bf0c      	ite	eq
 80097a4:	2300      	moveq	r3, #0
 80097a6:	f003 0301 	andne.w	r3, r3, #1
 80097aa:	b11b      	cbz	r3, 80097b4 <HAL_DMAEx_MultiBufferStart_IT+0x474>
 80097ac:	4b25      	ldr	r3, [pc, #148]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80097ae:	429d      	cmp	r5, r3
 80097b0:	f040 817e 	bne.w	8009ab0 <HAL_DMAEx_MultiBufferStart_IT+0x770>
 80097b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80097b8:	4b24      	ldr	r3, [pc, #144]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
 80097ba:	4825      	ldr	r0, [pc, #148]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80097bc:	4925      	ldr	r1, [pc, #148]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80097be:	429d      	cmp	r5, r3
 80097c0:	bf18      	it	ne
 80097c2:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80097c4:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80097c6:	bf14      	ite	ne
 80097c8:	2301      	movne	r3, #1
 80097ca:	2300      	moveq	r3, #0
 80097cc:	4a22      	ldr	r2, [pc, #136]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80097ce:	4295      	cmp	r5, r2
 80097d0:	bf0c      	ite	eq
 80097d2:	2300      	moveq	r3, #0
 80097d4:	f003 0301 	andne.w	r3, r3, #1
 80097d8:	b11b      	cbz	r3, 80097e2 <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 80097da:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 80097dc:	429d      	cmp	r5, r3
 80097de:	f040 81fe 	bne.w	8009bde <HAL_DMAEx_MultiBufferStart_IT+0x89e>
 80097e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80097e6:	4b1a      	ldr	r3, [pc, #104]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 80097e8:	4818      	ldr	r0, [pc, #96]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80097ea:	491a      	ldr	r1, [pc, #104]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80097ec:	429d      	cmp	r5, r3
 80097ee:	bf18      	it	ne
 80097f0:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80097f2:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80097f4:	bf14      	ite	ne
 80097f6:	2301      	movne	r3, #1
 80097f8:	2300      	moveq	r3, #0
 80097fa:	4a17      	ldr	r2, [pc, #92]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 80097fc:	4295      	cmp	r5, r2
 80097fe:	bf0c      	ite	eq
 8009800:	2300      	moveq	r3, #0
 8009802:	f003 0301 	andne.w	r3, r3, #1
 8009806:	b11b      	cbz	r3, 8009810 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8009808:	4b0e      	ldr	r3, [pc, #56]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 800980a:	429d      	cmp	r5, r3
 800980c:	f040 81ba 	bne.w	8009b84 <HAL_DMAEx_MultiBufferStart_IT+0x844>
 8009810:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009814:	4b0e      	ldr	r3, [pc, #56]	; (8009850 <HAL_DMAEx_MultiBufferStart_IT+0x510>)
 8009816:	480d      	ldr	r0, [pc, #52]	; (800984c <HAL_DMAEx_MultiBufferStart_IT+0x50c>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009818:	490e      	ldr	r1, [pc, #56]	; (8009854 <HAL_DMAEx_MultiBufferStart_IT+0x514>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800981a:	429d      	cmp	r5, r3
 800981c:	bf18      	it	ne
 800981e:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009820:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009822:	bf14      	ite	ne
 8009824:	2301      	movne	r3, #1
 8009826:	2300      	moveq	r3, #0
 8009828:	4a0b      	ldr	r2, [pc, #44]	; (8009858 <HAL_DMAEx_MultiBufferStart_IT+0x518>)
 800982a:	4295      	cmp	r5, r2
 800982c:	bf0c      	ite	eq
 800982e:	2300      	moveq	r3, #0
 8009830:	f003 0301 	andne.w	r3, r3, #1
 8009834:	b11b      	cbz	r3, 800983e <HAL_DMAEx_MultiBufferStart_IT+0x4fe>
 8009836:	4b03      	ldr	r3, [pc, #12]	; (8009844 <HAL_DMAEx_MultiBufferStart_IT+0x504>)
 8009838:	429d      	cmp	r5, r3
 800983a:	f040 81e6 	bne.w	8009c0a <HAL_DMAEx_MultiBufferStart_IT+0x8ca>
 800983e:	2340      	movs	r3, #64	; 0x40
 8009840:	e644      	b.n	80094cc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009842:	bf00      	nop
 8009844:	40026488 	.word	0x40026488
 8009848:	40026400 	.word	0x40026400
 800984c:	40026428 	.word	0x40026428
 8009850:	40026028 	.word	0x40026028
 8009854:	40026000 	.word	0x40026000
 8009858:	40026088 	.word	0x40026088
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800985c:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8009860:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009864:	3218      	adds	r2, #24
 8009866:	429d      	cmp	r5, r3
 8009868:	bf18      	it	ne
 800986a:	428d      	cmpne	r5, r1
 800986c:	bf14      	ite	ne
 800986e:	2301      	movne	r3, #1
 8009870:	2300      	moveq	r3, #0
 8009872:	4295      	cmp	r5, r2
 8009874:	bf0c      	ite	eq
 8009876:	2300      	moveq	r3, #0
 8009878:	f003 0301 	andne.w	r3, r3, #1
 800987c:	2b00      	cmp	r3, #0
 800987e:	f000 81e6 	beq.w	8009c4e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 8009882:	4ba3      	ldr	r3, [pc, #652]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009884:	429d      	cmp	r5, r3
 8009886:	f000 81e2 	beq.w	8009c4e <HAL_DMAEx_MultiBufferStart_IT+0x90e>
 800988a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800988e:	4ba1      	ldr	r3, [pc, #644]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009890:	48a1      	ldr	r0, [pc, #644]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009892:	4aa2      	ldr	r2, [pc, #648]	; (8009b1c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009894:	429d      	cmp	r5, r3
 8009896:	bf18      	it	ne
 8009898:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800989a:	60d1      	str	r1, [r2, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800989c:	f5a2 7258 	sub.w	r2, r2, #864	; 0x360
 80098a0:	bf14      	ite	ne
 80098a2:	2301      	movne	r3, #1
 80098a4:	2300      	moveq	r3, #0
 80098a6:	4295      	cmp	r5, r2
 80098a8:	bf0c      	ite	eq
 80098aa:	2300      	moveq	r3, #0
 80098ac:	f003 0301 	andne.w	r3, r3, #1
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f000 81c9 	beq.w	8009c48 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 80098b6:	4b96      	ldr	r3, [pc, #600]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80098b8:	429d      	cmp	r5, r3
 80098ba:	f000 81c5 	beq.w	8009c48 <HAL_DMAEx_MultiBufferStart_IT+0x908>
 80098be:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098c2:	4b94      	ldr	r3, [pc, #592]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80098c4:	4894      	ldr	r0, [pc, #592]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80098c6:	4995      	ldr	r1, [pc, #596]	; (8009b1c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098c8:	429d      	cmp	r5, r3
 80098ca:	bf18      	it	ne
 80098cc:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80098ce:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098d0:	bf14      	ite	ne
 80098d2:	2301      	movne	r3, #1
 80098d4:	2300      	moveq	r3, #0
 80098d6:	4a92      	ldr	r2, [pc, #584]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80098d8:	4295      	cmp	r5, r2
 80098da:	bf0c      	ite	eq
 80098dc:	2300      	moveq	r3, #0
 80098de:	f003 0301 	andne.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	f000 81ad 	beq.w	8009c42 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 80098e8:	4b89      	ldr	r3, [pc, #548]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80098ea:	429d      	cmp	r5, r3
 80098ec:	f000 81a9 	beq.w	8009c42 <HAL_DMAEx_MultiBufferStart_IT+0x902>
 80098f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098f4:	4b87      	ldr	r3, [pc, #540]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80098f6:	4888      	ldr	r0, [pc, #544]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80098f8:	4988      	ldr	r1, [pc, #544]	; (8009b1c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80098fa:	429d      	cmp	r5, r3
 80098fc:	bf18      	it	ne
 80098fe:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009900:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009902:	bf14      	ite	ne
 8009904:	2301      	movne	r3, #1
 8009906:	2300      	moveq	r3, #0
 8009908:	4a85      	ldr	r2, [pc, #532]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800990a:	4295      	cmp	r5, r2
 800990c:	bf0c      	ite	eq
 800990e:	2300      	moveq	r3, #0
 8009910:	f003 0301 	andne.w	r3, r3, #1
 8009914:	2b00      	cmp	r3, #0
 8009916:	f000 8191 	beq.w	8009c3c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 800991a:	4b7d      	ldr	r3, [pc, #500]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800991c:	429d      	cmp	r5, r3
 800991e:	f000 818d 	beq.w	8009c3c <HAL_DMAEx_MultiBufferStart_IT+0x8fc>
 8009922:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009926:	4b7b      	ldr	r3, [pc, #492]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009928:	487b      	ldr	r0, [pc, #492]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 800992a:	497c      	ldr	r1, [pc, #496]	; (8009b1c <HAL_DMAEx_MultiBufferStart_IT+0x7dc>)
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 800992c:	429d      	cmp	r5, r3
 800992e:	bf18      	it	ne
 8009930:	4285      	cmpne	r5, r0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009932:	60ca      	str	r2, [r1, #12]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009934:	bf14      	ite	ne
 8009936:	2301      	movne	r3, #1
 8009938:	2300      	moveq	r3, #0
 800993a:	4a79      	ldr	r2, [pc, #484]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 800993c:	4295      	cmp	r5, r2
 800993e:	bf0c      	ite	eq
 8009940:	2300      	moveq	r3, #0
 8009942:	f003 0301 	andne.w	r3, r3, #1
 8009946:	2b00      	cmp	r3, #0
 8009948:	f000 8174 	beq.w	8009c34 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 800994c:	4b70      	ldr	r3, [pc, #448]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 800994e:	429d      	cmp	r5, r3
 8009950:	f000 8170 	beq.w	8009c34 <HAL_DMAEx_MultiBufferStart_IT+0x8f4>
 8009954:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8009958:	e546      	b.n	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800995a:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 800995e:	f501 6183 	add.w	r1, r1, #1048	; 0x418
 8009962:	3218      	adds	r2, #24
 8009964:	429d      	cmp	r5, r3
 8009966:	bf18      	it	ne
 8009968:	428d      	cmpne	r5, r1
 800996a:	bf14      	ite	ne
 800996c:	2301      	movne	r3, #1
 800996e:	2300      	moveq	r3, #0
 8009970:	4295      	cmp	r5, r2
 8009972:	bf0c      	ite	eq
 8009974:	2300      	moveq	r3, #0
 8009976:	f003 0301 	andne.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 816d 	beq.w	8009c5a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009980:	4b63      	ldr	r3, [pc, #396]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009982:	429d      	cmp	r5, r3
 8009984:	f000 8169 	beq.w	8009c5a <HAL_DMAEx_MultiBufferStart_IT+0x91a>
 8009988:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800998c:	e5d7      	b.n	800953e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800998e:	4b62      	ldr	r3, [pc, #392]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009990:	4960      	ldr	r1, [pc, #384]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009992:	4a63      	ldr	r2, [pc, #396]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009994:	429d      	cmp	r5, r3
 8009996:	bf18      	it	ne
 8009998:	428d      	cmpne	r5, r1
 800999a:	bf14      	ite	ne
 800999c:	2301      	movne	r3, #1
 800999e:	2300      	moveq	r3, #0
 80099a0:	4295      	cmp	r5, r2
 80099a2:	bf0c      	ite	eq
 80099a4:	2300      	moveq	r3, #0
 80099a6:	f003 0301 	andne.w	r3, r3, #1
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	f000 815b 	beq.w	8009c66 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 80099b0:	4b57      	ldr	r3, [pc, #348]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80099b2:	429d      	cmp	r5, r3
 80099b4:	f000 8157 	beq.w	8009c66 <HAL_DMAEx_MultiBufferStart_IT+0x926>
 80099b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80099bc:	e5d7      	b.n	800956e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 80099be:	4b55      	ldr	r3, [pc, #340]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80099c0:	4955      	ldr	r1, [pc, #340]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80099c2:	4a57      	ldr	r2, [pc, #348]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80099c4:	429d      	cmp	r5, r3
 80099c6:	bf18      	it	ne
 80099c8:	428d      	cmpne	r5, r1
 80099ca:	bf14      	ite	ne
 80099cc:	2301      	movne	r3, #1
 80099ce:	2300      	moveq	r3, #0
 80099d0:	4295      	cmp	r5, r2
 80099d2:	bf0c      	ite	eq
 80099d4:	2300      	moveq	r3, #0
 80099d6:	f003 0301 	andne.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f000 8140 	beq.w	8009c60 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 80099e0:	4b4b      	ldr	r3, [pc, #300]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 80099e2:	429d      	cmp	r5, r3
 80099e4:	f000 813c 	beq.w	8009c60 <HAL_DMAEx_MultiBufferStart_IT+0x920>
 80099e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099ec:	e5ed      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80099ee:	4b49      	ldr	r3, [pc, #292]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 80099f0:	4949      	ldr	r1, [pc, #292]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 80099f2:	4a4b      	ldr	r2, [pc, #300]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 80099f4:	429d      	cmp	r5, r3
 80099f6:	bf18      	it	ne
 80099f8:	428d      	cmpne	r5, r1
 80099fa:	bf14      	ite	ne
 80099fc:	2301      	movne	r3, #1
 80099fe:	2300      	moveq	r3, #0
 8009a00:	4295      	cmp	r5, r2
 8009a02:	bf0c      	ite	eq
 8009a04:	2300      	moveq	r3, #0
 8009a06:	f003 0301 	andne.w	r3, r3, #1
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 812e 	beq.w	8009c6c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009a10:	4b3f      	ldr	r3, [pc, #252]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a12:	429d      	cmp	r5, r3
 8009a14:	f000 812a 	beq.w	8009c6c <HAL_DMAEx_MultiBufferStart_IT+0x92c>
 8009a18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009a1c:	e5be      	b.n	800959c <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009a1e:	4b3d      	ldr	r3, [pc, #244]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a20:	493d      	ldr	r1, [pc, #244]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009a22:	4a3f      	ldr	r2, [pc, #252]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009a24:	429d      	cmp	r5, r3
 8009a26:	bf18      	it	ne
 8009a28:	428d      	cmpne	r5, r1
 8009a2a:	bf14      	ite	ne
 8009a2c:	2301      	movne	r3, #1
 8009a2e:	2300      	moveq	r3, #0
 8009a30:	4295      	cmp	r5, r2
 8009a32:	bf0c      	ite	eq
 8009a34:	2300      	moveq	r3, #0
 8009a36:	f003 0301 	andne.w	r3, r3, #1
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	f000 810a 	beq.w	8009c54 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009a40:	4b33      	ldr	r3, [pc, #204]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a42:	429d      	cmp	r5, r3
 8009a44:	f000 8106 	beq.w	8009c54 <HAL_DMAEx_MultiBufferStart_IT+0x914>
 8009a48:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009a4c:	e510      	b.n	8009470 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009a4e:	3b48      	subs	r3, #72	; 0x48
 8009a50:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 8009a54:	3218      	adds	r2, #24
 8009a56:	429d      	cmp	r5, r3
 8009a58:	bf18      	it	ne
 8009a5a:	428d      	cmpne	r5, r1
 8009a5c:	bf14      	ite	ne
 8009a5e:	2301      	movne	r3, #1
 8009a60:	2300      	moveq	r3, #0
 8009a62:	4295      	cmp	r5, r2
 8009a64:	bf0c      	ite	eq
 8009a66:	2300      	moveq	r3, #0
 8009a68:	f003 0301 	andne.w	r3, r3, #1
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f000 8112 	beq.w	8009c96 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009a72:	4b27      	ldr	r3, [pc, #156]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009a74:	429d      	cmp	r5, r3
 8009a76:	f000 810e 	beq.w	8009c96 <HAL_DMAEx_MultiBufferStart_IT+0x956>
 8009a7a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009a7e:	e610      	b.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009a80:	4b24      	ldr	r3, [pc, #144]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009a82:	4925      	ldr	r1, [pc, #148]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009a84:	4a26      	ldr	r2, [pc, #152]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009a86:	429d      	cmp	r5, r3
 8009a88:	bf18      	it	ne
 8009a8a:	428d      	cmpne	r5, r1
 8009a8c:	bf14      	ite	ne
 8009a8e:	2301      	movne	r3, #1
 8009a90:	2300      	moveq	r3, #0
 8009a92:	4295      	cmp	r5, r2
 8009a94:	bf0c      	ite	eq
 8009a96:	2300      	moveq	r3, #0
 8009a98:	f003 0301 	andne.w	r3, r3, #1
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 80ee 	beq.w	8009c7e <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009aa2:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009aa4:	429d      	cmp	r5, r3
 8009aa6:	f000 80ea 	beq.w	8009c7e <HAL_DMAEx_MultiBufferStart_IT+0x93e>
 8009aaa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009aae:	e610      	b.n	80096d2 <HAL_DMAEx_MultiBufferStart_IT+0x392>
 8009ab0:	4b19      	ldr	r3, [pc, #100]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ab2:	4918      	ldr	r1, [pc, #96]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009ab4:	4a1a      	ldr	r2, [pc, #104]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009ab6:	429d      	cmp	r5, r3
 8009ab8:	bf18      	it	ne
 8009aba:	428d      	cmpne	r5, r1
 8009abc:	bf14      	ite	ne
 8009abe:	2301      	movne	r3, #1
 8009ac0:	2300      	moveq	r3, #0
 8009ac2:	4295      	cmp	r5, r2
 8009ac4:	bf0c      	ite	eq
 8009ac6:	2300      	moveq	r3, #0
 8009ac8:	f003 0301 	andne.w	r3, r3, #1
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 80e8 	beq.w	8009ca2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009ad2:	4b0f      	ldr	r3, [pc, #60]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009ad4:	429d      	cmp	r5, r3
 8009ad6:	f000 80e4 	beq.w	8009ca2 <HAL_DMAEx_MultiBufferStart_IT+0x962>
 8009ada:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8009ade:	e66b      	b.n	80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ae0:	4b0d      	ldr	r3, [pc, #52]	; (8009b18 <HAL_DMAEx_MultiBufferStart_IT+0x7d8>)
 8009ae2:	490c      	ldr	r1, [pc, #48]	; (8009b14 <HAL_DMAEx_MultiBufferStart_IT+0x7d4>)
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <HAL_DMAEx_MultiBufferStart_IT+0x7e0>)
 8009ae6:	429d      	cmp	r5, r3
 8009ae8:	bf18      	it	ne
 8009aea:	428d      	cmpne	r5, r1
 8009aec:	bf14      	ite	ne
 8009aee:	2301      	movne	r3, #1
 8009af0:	2300      	moveq	r3, #0
 8009af2:	4295      	cmp	r5, r2
 8009af4:	bf0c      	ite	eq
 8009af6:	2300      	moveq	r3, #0
 8009af8:	f003 0301 	andne.w	r3, r3, #1
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f000 80bb 	beq.w	8009c78 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009b02:	4b03      	ldr	r3, [pc, #12]	; (8009b10 <HAL_DMAEx_MultiBufferStart_IT+0x7d0>)
 8009b04:	429d      	cmp	r5, r3
 8009b06:	f000 80b7 	beq.w	8009c78 <HAL_DMAEx_MultiBufferStart_IT+0x938>
 8009b0a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009b0e:	e60e      	b.n	800972e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8009b10:	400264a0 	.word	0x400264a0
 8009b14:	40026040 	.word	0x40026040
 8009b18:	40026440 	.word	0x40026440
 8009b1c:	40026400 	.word	0x40026400
 8009b20:	400260a0 	.word	0x400260a0
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009b24:	3b48      	subs	r3, #72	; 0x48
 8009b26:	3118      	adds	r1, #24
 8009b28:	3218      	adds	r2, #24
 8009b2a:	429d      	cmp	r5, r3
 8009b2c:	bf18      	it	ne
 8009b2e:	428d      	cmpne	r5, r1
 8009b30:	bf14      	ite	ne
 8009b32:	2301      	movne	r3, #1
 8009b34:	2300      	moveq	r3, #0
 8009b36:	4295      	cmp	r5, r2
 8009b38:	bf0c      	ite	eq
 8009b3a:	2300      	moveq	r3, #0
 8009b3c:	f003 0301 	andne.w	r3, r3, #1
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	f000 80ab 	beq.w	8009c9c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009b46:	4b5a      	ldr	r3, [pc, #360]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b48:	429d      	cmp	r5, r3
 8009b4a:	f000 80a7 	beq.w	8009c9c <HAL_DMAEx_MultiBufferStart_IT+0x95c>
 8009b4e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8009b52:	e619      	b.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009b54:	4b57      	ldr	r3, [pc, #348]	; (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009b56:	4958      	ldr	r1, [pc, #352]	; (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009b58:	4a58      	ldr	r2, [pc, #352]	; (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009b5a:	429d      	cmp	r5, r3
 8009b5c:	bf18      	it	ne
 8009b5e:	428d      	cmpne	r5, r1
 8009b60:	bf14      	ite	ne
 8009b62:	2301      	movne	r3, #1
 8009b64:	2300      	moveq	r3, #0
 8009b66:	4295      	cmp	r5, r2
 8009b68:	bf0c      	ite	eq
 8009b6a:	2300      	moveq	r3, #0
 8009b6c:	f003 0301 	andne.w	r3, r3, #1
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 808a 	beq.w	8009c8a <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009b76:	4b4e      	ldr	r3, [pc, #312]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	f000 8086 	beq.w	8009c8a <HAL_DMAEx_MultiBufferStart_IT+0x94a>
 8009b7e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009b82:	e5bd      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009b84:	4b4c      	ldr	r3, [pc, #304]	; (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009b86:	494b      	ldr	r1, [pc, #300]	; (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009b88:	4a4c      	ldr	r2, [pc, #304]	; (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009b8a:	429d      	cmp	r5, r3
 8009b8c:	bf18      	it	ne
 8009b8e:	428d      	cmpne	r5, r1
 8009b90:	bf14      	ite	ne
 8009b92:	2301      	movne	r3, #1
 8009b94:	2300      	moveq	r3, #0
 8009b96:	4295      	cmp	r5, r2
 8009b98:	bf0c      	ite	eq
 8009b9a:	2300      	moveq	r3, #0
 8009b9c:	f003 0301 	andne.w	r3, r3, #1
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f000 8081 	beq.w	8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009ba6:	4b42      	ldr	r3, [pc, #264]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009ba8:	429d      	cmp	r5, r3
 8009baa:	d07d      	beq.n	8009ca8 <HAL_DMAEx_MultiBufferStart_IT+0x968>
 8009bac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009bb0:	e630      	b.n	8009814 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009bb2:	4b40      	ldr	r3, [pc, #256]	; (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009bb4:	4940      	ldr	r1, [pc, #256]	; (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009bb6:	4a41      	ldr	r2, [pc, #260]	; (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009bb8:	429d      	cmp	r5, r3
 8009bba:	bf18      	it	ne
 8009bbc:	428d      	cmpne	r5, r1
 8009bbe:	bf14      	ite	ne
 8009bc0:	2301      	movne	r3, #1
 8009bc2:	2300      	moveq	r3, #0
 8009bc4:	4295      	cmp	r5, r2
 8009bc6:	bf0c      	ite	eq
 8009bc8:	2300      	moveq	r3, #0
 8009bca:	f003 0301 	andne.w	r3, r3, #1
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d058      	beq.n	8009c84 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009bd2:	4b37      	ldr	r3, [pc, #220]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009bd4:	429d      	cmp	r5, r3
 8009bd6:	d055      	beq.n	8009c84 <HAL_DMAEx_MultiBufferStart_IT+0x944>
 8009bd8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009bdc:	e496      	b.n	800950c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009bde:	4b35      	ldr	r3, [pc, #212]	; (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009be0:	4935      	ldr	r1, [pc, #212]	; (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009be2:	4a36      	ldr	r2, [pc, #216]	; (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009be4:	429d      	cmp	r5, r3
 8009be6:	bf18      	it	ne
 8009be8:	428d      	cmpne	r5, r1
 8009bea:	bf14      	ite	ne
 8009bec:	2301      	movne	r3, #1
 8009bee:	2300      	moveq	r3, #0
 8009bf0:	4295      	cmp	r5, r2
 8009bf2:	bf0c      	ite	eq
 8009bf4:	2300      	moveq	r3, #0
 8009bf6:	f003 0301 	andne.w	r3, r3, #1
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d048      	beq.n	8009c90 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009bfe:	4b2c      	ldr	r3, [pc, #176]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009c00:	429d      	cmp	r5, r3
 8009c02:	d045      	beq.n	8009c90 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8009c04:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009c08:	e5ed      	b.n	80097e6 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c0a:	4b2a      	ldr	r3, [pc, #168]	; (8009cb4 <HAL_DMAEx_MultiBufferStart_IT+0x974>)
 8009c0c:	492a      	ldr	r1, [pc, #168]	; (8009cb8 <HAL_DMAEx_MultiBufferStart_IT+0x978>)
 8009c0e:	4a2b      	ldr	r2, [pc, #172]	; (8009cbc <HAL_DMAEx_MultiBufferStart_IT+0x97c>)
 8009c10:	429d      	cmp	r5, r3
 8009c12:	bf18      	it	ne
 8009c14:	428d      	cmpne	r5, r1
 8009c16:	bf14      	ite	ne
 8009c18:	2301      	movne	r3, #1
 8009c1a:	2300      	moveq	r3, #0
 8009c1c:	4295      	cmp	r5, r2
 8009c1e:	bf0c      	ite	eq
 8009c20:	2300      	moveq	r3, #0
 8009c22:	f003 0301 	andne.w	r3, r3, #1
 8009c26:	b323      	cbz	r3, 8009c72 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009c28:	4b21      	ldr	r3, [pc, #132]	; (8009cb0 <HAL_DMAEx_MultiBufferStart_IT+0x970>)
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	d021      	beq.n	8009c72 <HAL_DMAEx_MultiBufferStart_IT+0x932>
 8009c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009c32:	e44b      	b.n	80094cc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
 8009c34:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8009c38:	f7ff bbd6 	b.w	80093e8 <HAL_DMAEx_MultiBufferStart_IT+0xa8>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c40:	e671      	b.n	8009926 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c42:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c46:	e655      	b.n	80098f4 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c4c:	e639      	b.n	80098c2 <HAL_DMAEx_MultiBufferStart_IT+0x582>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c52:	e61c      	b.n	800988e <HAL_DMAEx_MultiBufferStart_IT+0x54e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c58:	e40a      	b.n	8009470 <HAL_DMAEx_MultiBufferStart_IT+0x130>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c5e:	e46e      	b.n	800953e <HAL_DMAEx_MultiBufferStart_IT+0x1fe>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c60:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c64:	e4b1      	b.n	80095ca <HAL_DMAEx_MultiBufferStart_IT+0x28a>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c6a:	e480      	b.n	800956e <HAL_DMAEx_MultiBufferStart_IT+0x22e>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c6c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c70:	e494      	b.n	800959c <HAL_DMAEx_MultiBufferStart_IT+0x25c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c76:	e429      	b.n	80094cc <HAL_DMAEx_MultiBufferStart_IT+0x18c>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009c78:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009c7c:	e557      	b.n	800972e <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009c7e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009c82:	e526      	b.n	80096d2 <HAL_DMAEx_MultiBufferStart_IT+0x392>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8009c84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009c88:	e440      	b.n	800950c <HAL_DMAEx_MultiBufferStart_IT+0x1cc>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8009c8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c8e:	e537      	b.n	8009700 <HAL_DMAEx_MultiBufferStart_IT+0x3c0>
 8009c90:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009c94:	e5a7      	b.n	80097e6 <HAL_DMAEx_MultiBufferStart_IT+0x4a6>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8009c96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c9a:	e502      	b.n	80096a2 <HAL_DMAEx_MultiBufferStart_IT+0x362>
 8009c9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009ca0:	e572      	b.n	8009788 <HAL_DMAEx_MultiBufferStart_IT+0x448>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8009ca2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009ca6:	e587      	b.n	80097b8 <HAL_DMAEx_MultiBufferStart_IT+0x478>
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8009ca8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009cac:	e5b2      	b.n	8009814 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8009cae:	bf00      	nop
 8009cb0:	400264a0 	.word	0x400264a0
 8009cb4:	40026040 	.word	0x40026040
 8009cb8:	40026440 	.word	0x40026440
 8009cbc:	400260a0 	.word	0x400260a0

08009cc0 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4604      	mov	r4, r0
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009cc4:	2900      	cmp	r1, #0
 8009cc6:	d15b      	bne.n	8009d80 <ETH_MACDMAConfig+0xc0>
                       macinit.Jabber | 
                       macinit.InterFrameGap |
                       macinit.CarrierSense |
                       (heth->Init).Speed | 
                       macinit.ReceiveOwn |
                       macinit.LoopbackMode |
 8009cc8:	e9d0 3102 	ldrd	r3, r1, [r0, #8]
 8009ccc:	4319      	orrs	r1, r3
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	b90b      	cbnz	r3, 8009cd6 <ETH_MACDMAConfig+0x16>
                       (heth->Init).DuplexMode | 
 8009cd2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
  tmpreg = (heth->Instance)->MACCR;
 8009cd6:	6822      	ldr	r2, [r4, #0]
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cd8:	2001      	movs	r0, #1
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009cda:	4b2e      	ldr	r3, [pc, #184]	; (8009d94 <ETH_MACDMAConfig+0xd4>)
  tmpreg = (heth->Instance)->MACCR;
 8009cdc:	6815      	ldr	r5, [r2, #0]
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8009cde:	402b      	ands	r3, r5
 8009ce0:	430b      	orrs	r3, r1
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8009ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8009ce6:	6013      	str	r3, [r2, #0]
  tmpreg = (heth->Instance)->MACCR;
 8009ce8:	6815      	ldr	r5, [r2, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cea:	f7fd ffbb 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8009cee:	6823      	ldr	r3, [r4, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009cf0:	2240      	movs	r2, #64	; 0x40
                                        macinit.UnicastFramesFilter);
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cf2:	2001      	movs	r0, #1
  (heth->Instance)->MACCR = tmpreg; 
 8009cf4:	601d      	str	r5, [r3, #0]
   (heth->Instance)->MACFFR = tmpreg;
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009cf6:	2500      	movs	r5, #0
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009cf8:	605a      	str	r2, [r3, #4]
   tmpreg = (heth->Instance)->MACFFR;
 8009cfa:	685e      	ldr	r6, [r3, #4]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009cfc:	f7fd ffb2 	bl	8007c64 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8009d00:	6823      	ldr	r3, [r4, #0]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009d02:	f64f 7141 	movw	r1, #65345	; 0xff41
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d06:	2001      	movs	r0, #1
   (heth->Instance)->MACFFR = tmpreg;
 8009d08:	605e      	str	r6, [r3, #4]
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8009d0a:	609d      	str	r5, [r3, #8]
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8009d0c:	60dd      	str	r5, [r3, #12]
   tmpreg = (heth->Instance)->MACFCR;
 8009d0e:	699a      	ldr	r2, [r3, #24]
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 8009d10:	400a      	ands	r2, r1
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8009d12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8009d16:	619a      	str	r2, [r3, #24]
   tmpreg = (heth->Instance)->MACFCR;
 8009d18:	699e      	ldr	r6, [r3, #24]
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d1a:	f7fd ffa3 	bl	8007c64 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8009d1e:	6823      	ldr	r3, [r4, #0]
                                            macinit.VLANTagIdentifier);
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d20:	2001      	movs	r0, #1
   (heth->Instance)->MACFCR = tmpreg;
 8009d22:	619e      	str	r6, [r3, #24]
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009d24:	61dd      	str	r5, [r3, #28]
    tmpreg = (heth->Instance)->MACVLANTR;
 8009d26:	69dd      	ldr	r5, [r3, #28]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d28:	f7fd ff9c 	bl	8007c64 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8009d2c:	6820      	ldr	r0, [r4, #0]
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009d2e:	491a      	ldr	r1, [pc, #104]	; (8009d98 <ETH_MACDMAConfig+0xd8>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009d30:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
    (heth->Instance)->MACVLANTR = tmpreg;
 8009d34:	61c5      	str	r5, [r0, #28]
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009d36:	4a19      	ldr	r2, [pc, #100]	; (8009d9c <ETH_MACDMAConfig+0xdc>)
    tmpreg = (heth->Instance)->DMAOMR;
 8009d38:	6998      	ldr	r0, [r3, #24]
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8009d3a:	4001      	ands	r1, r0
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d3c:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8009d3e:	430a      	orrs	r2, r1
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8009d40:	619a      	str	r2, [r3, #24]
    tmpreg = (heth->Instance)->DMAOMR;
 8009d42:	699d      	ldr	r5, [r3, #24]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d44:	f7fd ff8e 	bl	8007c64 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8009d48:	6823      	ldr	r3, [r4, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d4a:	2001      	movs	r0, #1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009d4c:	4a14      	ldr	r2, [pc, #80]	; (8009da0 <ETH_MACDMAConfig+0xe0>)
    (heth->Instance)->DMAOMR = tmpreg;
 8009d4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d52:	619d      	str	r5, [r3, #24]
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009d54:	601a      	str	r2, [r3, #0]
     tmpreg = (heth->Instance)->DMABMR;
 8009d56:	681d      	ldr	r5, [r3, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009d58:	f7fd ff84 	bl	8007c64 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8009d5c:	6823      	ldr	r3, [r4, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009d5e:	69a2      	ldr	r2, [r4, #24]
     (heth->Instance)->DMABMR = tmpreg;
 8009d60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009d64:	2a01      	cmp	r2, #1
     (heth->Instance)->DMABMR = tmpreg;
 8009d66:	601d      	str	r5, [r3, #0]
     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009d68:	d103      	bne.n	8009d72 <ETH_MACDMAConfig+0xb2>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8009d6a:	69d9      	ldr	r1, [r3, #28]
 8009d6c:	4a0d      	ldr	r2, [pc, #52]	; (8009da4 <ETH_MACDMAConfig+0xe4>)
 8009d6e:	430a      	orrs	r2, r1
 8009d70:	61da      	str	r2, [r3, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8009d72:	6962      	ldr	r2, [r4, #20]
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009d74:	4b0c      	ldr	r3, [pc, #48]	; (8009da8 <ETH_MACDMAConfig+0xe8>)
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8009d76:	8891      	ldrh	r1, [r2, #4]
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8009d78:	6419      	str	r1, [r3, #64]	; 0x40
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8009d7a:	6812      	ldr	r2, [r2, #0]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8009d7c:	645a      	str	r2, [r3, #68]	; 0x44
}
 8009d7e:	bd70      	pop	{r4, r5, r6, pc}
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8009d80:	f44f 6200 	mov.w	r2, #2048	; 0x800
    (heth->Init).Speed = ETH_SPEED_100M;
 8009d84:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009d88:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8009d8c:	e9c0 3202 	strd	r3, r2, [r0, #8]
 8009d90:	e79d      	b.n	8009cce <ETH_MACDMAConfig+0xe>
 8009d92:	bf00      	nop
 8009d94:	ff20810f 	.word	0xff20810f
 8009d98:	f8de3f23 	.word	0xf8de3f23
 8009d9c:	02200004 	.word	0x02200004
 8009da0:	02c12080 	.word	0x02c12080
 8009da4:	00010040 	.word	0x00010040
 8009da8:	40028000 	.word	0x40028000

08009dac <HAL_ETH_DMATxDescListInit>:
{
 8009dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009db0:	4680      	mov	r8, r0
  __HAL_LOCK(heth);
 8009db2:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009db6:	2801      	cmp	r0, #1
 8009db8:	d03b      	beq.n	8009e32 <HAL_ETH_DMATxDescListInit+0x86>
 8009dba:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009dbe:	2002      	movs	r0, #2
  heth->TxDesc = DMATxDescTab;
 8009dc0:	f8c8 102c 	str.w	r1, [r8, #44]	; 0x2c
  __HAL_LOCK(heth);
 8009dc4:	f888 c045 	strb.w	ip, [r8, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009dc8:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  for(i=0; i < TxBuffCount; i++)
 8009dcc:	b31b      	cbz	r3, 8009e16 <HAL_ETH_DMATxDescListInit+0x6a>
 8009dce:	4614      	mov	r4, r2
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009dd0:	f8d8 a01c 	ldr.w	sl, [r8, #28]
    if(i < (TxBuffCount-1))
 8009dd4:	f103 39ff 	add.w	r9, r3, #4294967295
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009dd8:	460a      	mov	r2, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009dda:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    if(i < (TxBuffCount-1))
 8009dde:	f10c 36ff 	add.w	r6, ip, #4294967295
 8009de2:	f102 0e20 	add.w	lr, r2, #32
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8009de6:	460d      	mov	r5, r1
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8009de8:	6010      	str	r0, [r2, #0]
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8009dea:	6094      	str	r4, [r2, #8]
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009dec:	f1ba 0f00 	cmp.w	sl, #0
 8009df0:	d103      	bne.n	8009dfa <HAL_ETH_DMATxDescListInit+0x4e>
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8009df2:	6817      	ldr	r7, [r2, #0]
 8009df4:	f447 0740 	orr.w	r7, r7, #12582912	; 0xc00000
 8009df8:	6017      	str	r7, [r2, #0]
    if(i < (TxBuffCount-1))
 8009dfa:	454e      	cmp	r6, r9
  for(i=0; i < TxBuffCount; i++)
 8009dfc:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
 8009e00:	bf34      	ite	cc
 8009e02:	4675      	movcc	r5, lr
 8009e04:	f102 0e20 	addcs.w	lr, r2, #32
 8009e08:	4563      	cmp	r3, ip
 8009e0a:	60d5      	str	r5, [r2, #12]
 8009e0c:	f10c 0501 	add.w	r5, ip, #1
 8009e10:	4672      	mov	r2, lr
 8009e12:	46ac      	mov	ip, r5
 8009e14:	d8e3      	bhi.n	8009dde <HAL_ETH_DMATxDescListInit+0x32>
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009e16:	f8d8 3000 	ldr.w	r3, [r8]
  __HAL_UNLOCK(heth);
 8009e1a:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009e1c:	2001      	movs	r0, #1
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8009e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e22:	6119      	str	r1, [r3, #16]
  heth->State= HAL_ETH_STATE_READY;
 8009e24:	f888 0044 	strb.w	r0, [r8, #68]	; 0x44
  return HAL_OK;
 8009e28:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009e2a:	f888 2045 	strb.w	r2, [r8, #69]	; 0x45
}
 8009e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(heth);
 8009e32:	2002      	movs	r0, #2
}
 8009e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08009e38 <HAL_ETH_DMARxDescListInit>:
{
 8009e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e3c:	4606      	mov	r6, r0
  __HAL_LOCK(heth);
 8009e3e:	f890 0045 	ldrb.w	r0, [r0, #69]	; 0x45
 8009e42:	2801      	cmp	r0, #1
 8009e44:	d033      	beq.n	8009eae <HAL_ETH_DMARxDescListInit+0x76>
 8009e46:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009e4a:	2002      	movs	r0, #2
  heth->RxDesc = DMARxDescTab; 
 8009e4c:	62b1      	str	r1, [r6, #40]	; 0x28
  __HAL_LOCK(heth);
 8009e4e:	f886 c045 	strb.w	ip, [r6, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009e52:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  for(i=0; i < RxBuffCount; i++)
 8009e56:	b1eb      	cbz	r3, 8009e94 <HAL_ETH_DMARxDescListInit+0x5c>
 8009e58:	4614      	mov	r4, r2
    if(i < (RxBuffCount-1))
 8009e5a:	f103 38ff 	add.w	r8, r3, #4294967295
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009e5e:	460a      	mov	r2, r1
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009e60:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009e64:	f244 50f4 	movw	r0, #17908	; 0x45f4
    if(i < (RxBuffCount-1))
 8009e68:	f10c 3eff 	add.w	lr, ip, #4294967295
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8009e6c:	460d      	mov	r5, r1
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8009e6e:	6094      	str	r4, [r2, #8]
  for(i=0; i < RxBuffCount; i++)
 8009e70:	f204 54f4 	addw	r4, r4, #1524	; 0x5f4
    if(i < (RxBuffCount-1))
 8009e74:	45c6      	cmp	lr, r8
 8009e76:	f102 0e20 	add.w	lr, r2, #32
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8009e7a:	6017      	str	r7, [r2, #0]
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009e7c:	bf34      	ite	cc
 8009e7e:	4675      	movcc	r5, lr
 8009e80:	f102 0e20 	addcs.w	lr, r2, #32
  for(i=0; i < RxBuffCount; i++)
 8009e84:	4563      	cmp	r3, ip
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8009e86:	6050      	str	r0, [r2, #4]
    if(i < (RxBuffCount-1))
 8009e88:	60d5      	str	r5, [r2, #12]
  for(i=0; i < RxBuffCount; i++)
 8009e8a:	f10c 0501 	add.w	r5, ip, #1
 8009e8e:	4672      	mov	r2, lr
 8009e90:	46ac      	mov	ip, r5
 8009e92:	d8e9      	bhi.n	8009e68 <HAL_ETH_DMARxDescListInit+0x30>
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009e94:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(heth);
 8009e96:	2200      	movs	r2, #0
  heth->State= HAL_ETH_STATE_READY;
 8009e98:	2001      	movs	r0, #1
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8009e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e9e:	60d9      	str	r1, [r3, #12]
  heth->State= HAL_ETH_STATE_READY;
 8009ea0:	f886 0044 	strb.w	r0, [r6, #68]	; 0x44
  return HAL_OK;
 8009ea4:	4610      	mov	r0, r2
  __HAL_UNLOCK(heth);
 8009ea6:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
}
 8009eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(heth);
 8009eae:	2002      	movs	r0, #2
}
 8009eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009eb4 <HAL_ETH_TransmitFrame>:
  __HAL_LOCK(heth);
 8009eb4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d078      	beq.n	8009fae <HAL_ETH_TransmitFrame+0xfa>
 8009ebc:	f04f 0c01 	mov.w	ip, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	4602      	mov	r2, r0
  __HAL_LOCK(heth);
 8009ec4:	f880 c045 	strb.w	ip, [r0, #69]	; 0x45
  heth->State = HAL_ETH_STATE_BUSY;
 8009ec8:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
  if (FrameLength == 0) 
 8009ecc:	2900      	cmp	r1, #0
 8009ece:	d03c      	beq.n	8009f4a <HAL_ETH_TransmitFrame+0x96>
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009ed0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009ed2:	6818      	ldr	r0, [r3, #0]
 8009ed4:	2800      	cmp	r0, #0
 8009ed6:	db60      	blt.n	8009f9a <HAL_ETH_TransmitFrame+0xe6>
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009ed8:	f240 50f4 	movw	r0, #1524	; 0x5f4
 8009edc:	4281      	cmp	r1, r0
{
 8009ede:	b530      	push	{r4, r5, lr}
  if (FrameLength > ETH_TX_BUF_SIZE)
 8009ee0:	d93c      	bls.n	8009f5c <HAL_ETH_TransmitFrame+0xa8>
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8009ee2:	4c34      	ldr	r4, [pc, #208]	; (8009fb4 <HAL_ETH_TransmitFrame+0x100>)
 8009ee4:	fba4 4c01 	umull	r4, ip, r4, r1
 8009ee8:	ea4f 2c9c 	mov.w	ip, ip, lsr #10
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8009eec:	fb00 101c 	mls	r0, r0, ip, r1
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d030      	beq.n	8009f56 <HAL_ETH_TransmitFrame+0xa2>
      bufcount++;
 8009ef4:	f10c 0c01 	add.w	ip, ip, #1
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009ef8:	482f      	ldr	r0, [pc, #188]	; (8009fb8 <HAL_ETH_TransmitFrame+0x104>)
 8009efa:	f201 51f4 	addw	r1, r1, #1524	; 0x5f4
    for (i=0; i< bufcount; i++)
 8009efe:	2400      	movs	r4, #0
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009f00:	f240 55f4 	movw	r5, #1524	; 0x5f4
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8009f04:	fb00 110c 	mla	r1, r0, ip, r1
      if (i == (bufcount-1))
 8009f08:	f10c 3eff 	add.w	lr, ip, #4294967295
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009f0c:	f3c1 010c 	ubfx	r1, r1, #0, #13
 8009f10:	e00f      	b.n	8009f32 <HAL_ETH_TransmitFrame+0x7e>
      if (i == (bufcount-1))
 8009f12:	45a6      	cmp	lr, r4
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009f14:	605d      	str	r5, [r3, #4]
      if (i == (bufcount-1))
 8009f16:	d104      	bne.n	8009f22 <HAL_ETH_TransmitFrame+0x6e>
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009f18:	6818      	ldr	r0, [r3, #0]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8009f1a:	6059      	str	r1, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8009f1c:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8009f20:	6018      	str	r0, [r3, #0]
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009f22:	6818      	ldr	r0, [r3, #0]
    for (i=0; i< bufcount; i++)
 8009f24:	3401      	adds	r4, #1
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009f26:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
    for (i=0; i< bufcount; i++)
 8009f2a:	4564      	cmp	r4, ip
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009f2c:	6018      	str	r0, [r3, #0]
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009f2e:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< bufcount; i++)
 8009f30:	d03b      	beq.n	8009faa <HAL_ETH_TransmitFrame+0xf6>
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8009f38:	6018      	str	r0, [r3, #0]
      if (i == 0) 
 8009f3a:	2c00      	cmp	r4, #0
 8009f3c:	d1e9      	bne.n	8009f12 <HAL_ETH_TransmitFrame+0x5e>
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009f3e:	6818      	ldr	r0, [r3, #0]
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8009f40:	605d      	str	r5, [r3, #4]
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8009f42:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8009f46:	6018      	str	r0, [r3, #0]
      if (i == (bufcount-1))
 8009f48:	e7eb      	b.n	8009f22 <HAL_ETH_TransmitFrame+0x6e>
    return  HAL_ERROR;                                    
 8009f4a:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_READY;
 8009f4c:	f882 c044 	strb.w	ip, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009f50:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
    return  HAL_ERROR;                                    
 8009f54:	4770      	bx	lr
  if (bufcount == 1)
 8009f56:	f1bc 0f01 	cmp.w	ip, #1
 8009f5a:	d1cd      	bne.n	8009ef8 <HAL_ETH_TransmitFrame+0x44>
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009f5c:	6818      	ldr	r0, [r3, #0]
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009f5e:	f3c1 010c 	ubfx	r1, r1, #0, #13
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009f62:	68dc      	ldr	r4, [r3, #12]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009f64:	f040 5040 	orr.w	r0, r0, #805306368	; 0x30000000
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8009f68:	6059      	str	r1, [r3, #4]
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8009f6a:	6018      	str	r0, [r3, #0]
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8009f6c:	6819      	ldr	r1, [r3, #0]
 8009f6e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8009f72:	6019      	str	r1, [r3, #0]
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8009f74:	62d4      	str	r4, [r2, #44]	; 0x2c
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8009f76:	6813      	ldr	r3, [r2, #0]
 8009f78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f7c:	6959      	ldr	r1, [r3, #20]
 8009f7e:	0749      	lsls	r1, r1, #29
 8009f80:	d503      	bpl.n	8009f8a <HAL_ETH_TransmitFrame+0xd6>
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8009f82:	2004      	movs	r0, #4
    (heth->Instance)->DMATPDR = 0;
 8009f84:	2100      	movs	r1, #0
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8009f86:	6158      	str	r0, [r3, #20]
    (heth->Instance)->DMATPDR = 0;
 8009f88:	6059      	str	r1, [r3, #4]
  __HAL_UNLOCK(heth);
 8009f8a:	2300      	movs	r3, #0
  heth->State = HAL_ETH_STATE_READY;
 8009f8c:	2101      	movs	r1, #1
  return HAL_OK;
 8009f8e:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 8009f90:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 8009f94:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
}
 8009f98:	bd30      	pop	{r4, r5, pc}
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009f9a:	2112      	movs	r1, #18
    __HAL_UNLOCK(heth);
 8009f9c:	2300      	movs	r3, #0
    return HAL_ERROR;
 8009f9e:	4660      	mov	r0, ip
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8009fa0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    __HAL_UNLOCK(heth);
 8009fa4:	f882 3045 	strb.w	r3, [r2, #69]	; 0x45
    return HAL_ERROR;
 8009fa8:	4770      	bx	lr
 8009faa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009fac:	e7e3      	b.n	8009f76 <HAL_ETH_TransmitFrame+0xc2>
  __HAL_LOCK(heth);
 8009fae:	2002      	movs	r0, #2
}
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	ac02b00b 	.word	0xac02b00b
 8009fb8:	fffffa0c 	.word	0xfffffa0c

08009fbc <HAL_ETH_GetReceivedFrame_IT>:
  __HAL_LOCK(heth);
 8009fbc:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d02f      	beq.n	800a024 <HAL_ETH_GetReceivedFrame_IT+0x68>
  heth->State = HAL_ETH_STATE_BUSY;
 8009fc4:	2102      	movs	r1, #2
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009fc6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8009fc8:	4602      	mov	r2, r0
{
 8009fca:	b430      	push	{r4, r5}
  __HAL_LOCK(heth);
 8009fcc:	2401      	movs	r4, #1
  heth->State = HAL_ETH_STATE_BUSY;
 8009fce:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 8009fd2:	f880 4045 	strb.w	r4, [r0, #69]	; 0x45
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009fd6:	6819      	ldr	r1, [r3, #0]
 8009fd8:	2900      	cmp	r1, #0
 8009fda:	db15      	blt.n	800a008 <HAL_ETH_GetReceivedFrame_IT+0x4c>
  uint32_t descriptorscancounter = 0;
 8009fdc:	2000      	movs	r0, #0
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009fde:	6819      	ldr	r1, [r3, #0]
    descriptorscancounter++;
 8009fe0:	3001      	adds	r0, #1
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8009fe2:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8009fe6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009fea:	d016      	beq.n	800a01a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009fec:	6819      	ldr	r1, [r3, #0]
 8009fee:	f411 7f40 	tst.w	r1, #768	; 0x300
      (heth->RxFrameInfos.SegCount)++;
 8009ff2:	6b91      	ldr	r1, [r2, #56]	; 0x38
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8009ff4:	d118      	bne.n	800a028 <HAL_ETH_GetReceivedFrame_IT+0x6c>
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009ff6:	68db      	ldr	r3, [r3, #12]
      (heth->RxFrameInfos.SegCount)++;
 8009ff8:	3101      	adds	r1, #1
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8009ffa:	6293      	str	r3, [r2, #40]	; 0x28
      (heth->RxFrameInfos.SegCount)++;
 8009ffc:	6391      	str	r1, [r2, #56]	; 0x38
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8009ffe:	6819      	ldr	r1, [r3, #0]
 800a000:	2900      	cmp	r1, #0
 800a002:	db01      	blt.n	800a008 <HAL_ETH_GetReceivedFrame_IT+0x4c>
 800a004:	2804      	cmp	r0, #4
 800a006:	d1ea      	bne.n	8009fde <HAL_ETH_GetReceivedFrame_IT+0x22>
  heth->State = HAL_ETH_STATE_READY;
 800a008:	2301      	movs	r3, #1
  __HAL_UNLOCK(heth);
 800a00a:	2100      	movs	r1, #0
  return HAL_ERROR;
 800a00c:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a00e:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a012:	f882 1045 	strb.w	r1, [r2, #69]	; 0x45
}
 800a016:	bc30      	pop	{r4, r5}
 800a018:	4770      	bx	lr
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a01a:	6313      	str	r3, [r2, #48]	; 0x30
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a01c:	68db      	ldr	r3, [r3, #12]
      heth->RxFrameInfos.SegCount = 1;   
 800a01e:	6394      	str	r4, [r2, #56]	; 0x38
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a020:	6293      	str	r3, [r2, #40]	; 0x28
 800a022:	e7ec      	b.n	8009ffe <HAL_ETH_GetReceivedFrame_IT+0x42>
  __HAL_LOCK(heth);
 800a024:	2002      	movs	r0, #2
}
 800a026:	4770      	bx	lr
      (heth->RxFrameInfos.SegCount)++;
 800a028:	3101      	adds	r1, #1
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800a02a:	6353      	str	r3, [r2, #52]	; 0x34
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a02c:	2901      	cmp	r1, #1
      (heth->RxFrameInfos.SegCount)++;
 800a02e:	6391      	str	r1, [r2, #56]	; 0x38
      if ((heth->RxFrameInfos.SegCount) == 1)
 800a030:	d011      	beq.n	800a056 <HAL_ETH_GetReceivedFrame_IT+0x9a>
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a032:	6b10      	ldr	r0, [r2, #48]	; 0x30
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a034:	6819      	ldr	r1, [r3, #0]
      __HAL_UNLOCK(heth);
 800a036:	2400      	movs	r4, #0
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a038:	6885      	ldr	r5, [r0, #8]
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a03a:	68d8      	ldr	r0, [r3, #12]
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a03c:	f3c1 430d 	ubfx	r3, r1, #16, #14
      heth->State = HAL_ETH_STATE_READY;
 800a040:	2101      	movs	r1, #1
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800a042:	6415      	str	r5, [r2, #64]	; 0x40
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a044:	3b04      	subs	r3, #4
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800a046:	6290      	str	r0, [r2, #40]	; 0x28
      heth->State = HAL_ETH_STATE_READY;
 800a048:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
      return HAL_OK;
 800a04c:	4620      	mov	r0, r4
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800a04e:	63d3      	str	r3, [r2, #60]	; 0x3c
      __HAL_UNLOCK(heth);
 800a050:	f882 4045 	strb.w	r4, [r2, #69]	; 0x45
      return HAL_OK;
 800a054:	e7df      	b.n	800a016 <HAL_ETH_GetReceivedFrame_IT+0x5a>
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800a056:	4618      	mov	r0, r3
 800a058:	6313      	str	r3, [r2, #48]	; 0x30
 800a05a:	e7eb      	b.n	800a034 <HAL_ETH_GetReceivedFrame_IT+0x78>

0800a05c <HAL_ETH_TxCpltCallback>:
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop

0800a060 <HAL_ETH_ErrorCallback>:
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop

0800a064 <HAL_ETH_IRQHandler>:
{
 800a064:	b538      	push	{r3, r4, r5, lr}
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a066:	6803      	ldr	r3, [r0, #0]
{
 800a068:	4604      	mov	r4, r0
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800a06a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a06e:	695d      	ldr	r5, [r3, #20]
 800a070:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800a074:	d125      	bne.n	800a0c2 <HAL_ETH_IRQHandler+0x5e>
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800a076:	695a      	ldr	r2, [r3, #20]
 800a078:	07d2      	lsls	r2, r2, #31
 800a07a:	d416      	bmi.n	800a0aa <HAL_ETH_IRQHandler+0x46>
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800a07c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a080:	615a      	str	r2, [r3, #20]
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800a082:	695b      	ldr	r3, [r3, #20]
 800a084:	041b      	lsls	r3, r3, #16
 800a086:	d400      	bmi.n	800a08a <HAL_ETH_IRQHandler+0x26>
}
 800a088:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_ErrorCallback(heth);
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff ffe8 	bl	800a060 <HAL_ETH_ErrorCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a090:	6823      	ldr	r3, [r4, #0]
 800a092:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    heth->State = HAL_ETH_STATE_READY;
 800a096:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a098:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a09c:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800a09e:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a0a0:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a0a4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a0a8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ETH_TxCpltCallback(heth);
 800a0aa:	f7ff ffd7 	bl	800a05c <HAL_ETH_TxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	2201      	movs	r2, #1
 800a0b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0b6:	615a      	str	r2, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a0b8:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a0bc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 800a0c0:	e7dc      	b.n	800a07c <HAL_ETH_IRQHandler+0x18>
    HAL_ETH_RxCpltCallback(heth);
 800a0c2:	f009 ff4f 	bl	8013f64 <HAL_ETH_RxCpltCallback>
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a0c6:	6823      	ldr	r3, [r4, #0]
 800a0c8:	2040      	movs	r0, #64	; 0x40
    heth->State = HAL_ETH_STATE_READY;
 800a0ca:	2101      	movs	r1, #1
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a0cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    __HAL_UNLOCK(heth);
 800a0d0:	2200      	movs	r2, #0
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800a0d2:	6158      	str	r0, [r3, #20]
    heth->State = HAL_ETH_STATE_READY;
 800a0d4:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
    __HAL_UNLOCK(heth);
 800a0d8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 800a0dc:	e7ce      	b.n	800a07c <HAL_ETH_IRQHandler+0x18>
 800a0de:	bf00      	nop

0800a0e0 <HAL_ETH_ReadPHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a0e0:	8a03      	ldrh	r3, [r0, #16]
 800a0e2:	2b20      	cmp	r3, #32
{
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	4604      	mov	r4, r0
 800a0e8:	460e      	mov	r6, r1
 800a0ea:	4615      	mov	r5, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a0ec:	d834      	bhi.n	800a158 <HAL_ETH_ReadPHYRegister+0x78>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a0ee:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a0f2:	2b82      	cmp	r3, #130	; 0x82
 800a0f4:	d039      	beq.n	800a16a <HAL_ETH_ReadPHYRegister+0x8a>
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a0f6:	2382      	movs	r3, #130	; 0x82
  tmpreg = heth->Instance->MACMIIAR;
 800a0f8:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a0fa:	01b1      	lsls	r1, r6, #6
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800a0fc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a100:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a102:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a106:	6902      	ldr	r2, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a108:	02db      	lsls	r3, r3, #11
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a10a:	f002 021c 	and.w	r2, r2, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800a10e:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800a110:	430b      	orrs	r3, r1
 800a112:	4313      	orrs	r3, r2
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800a114:	f043 0301 	orr.w	r3, r3, #1
  heth->Instance->MACMIIAR = tmpreg;
 800a118:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a11a:	f7fd fd9d 	bl	8007c58 <HAL_GetTick>
 800a11e:	4606      	mov	r6, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a120:	e004      	b.n	800a12c <HAL_ETH_ReadPHYRegister+0x4c>
    tmpreg = heth->Instance->MACMIIAR;
 800a122:	6821      	ldr	r1, [r4, #0]
 800a124:	690b      	ldr	r3, [r1, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a126:	f013 0301 	ands.w	r3, r3, #1
 800a12a:	d00d      	beq.n	800a148 <HAL_ETH_ReadPHYRegister+0x68>
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800a12c:	f7fd fd94 	bl	8007c58 <HAL_GetTick>
 800a130:	1b83      	subs	r3, r0, r6
 800a132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a136:	d3f4      	bcc.n	800a122 <HAL_ETH_ReadPHYRegister+0x42>
      heth->State= HAL_ETH_STATE_READY;
 800a138:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a13a:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a13c:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a13e:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a142:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a146:	bd70      	pop	{r4, r5, r6, pc}
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a148:	694a      	ldr	r2, [r1, #20]
  heth->State = HAL_ETH_STATE_READY;
 800a14a:	2101      	movs	r1, #1
  return HAL_OK;
 800a14c:	4618      	mov	r0, r3
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800a14e:	b292      	uxth	r2, r2
 800a150:	602a      	str	r2, [r5, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a152:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
}
 800a156:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a158:	f240 5116 	movw	r1, #1302	; 0x516
 800a15c:	4804      	ldr	r0, [pc, #16]	; (800a170 <HAL_ETH_ReadPHYRegister+0x90>)
 800a15e:	f7fa fb67 	bl	8004830 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800a162:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a166:	2b82      	cmp	r3, #130	; 0x82
 800a168:	d1c5      	bne.n	800a0f6 <HAL_ETH_ReadPHYRegister+0x16>
    return HAL_BUSY;
 800a16a:	2002      	movs	r0, #2
}
 800a16c:	bd70      	pop	{r4, r5, r6, pc}
 800a16e:	bf00      	nop
 800a170:	0802c31c 	.word	0x0802c31c

0800a174 <HAL_ETH_WritePHYRegister>:
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a174:	8a03      	ldrh	r3, [r0, #16]
 800a176:	2b20      	cmp	r3, #32
{
 800a178:	b570      	push	{r4, r5, r6, lr}
 800a17a:	4604      	mov	r4, r0
 800a17c:	460d      	mov	r5, r1
 800a17e:	4616      	mov	r6, r2
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a180:	d833      	bhi.n	800a1ea <HAL_ETH_WritePHYRegister+0x76>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a182:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a186:	2b42      	cmp	r3, #66	; 0x42
 800a188:	d038      	beq.n	800a1fc <HAL_ETH_WritePHYRegister+0x88>
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a18a:	2342      	movs	r3, #66	; 0x42
  tmpreg = heth->Instance->MACMIIAR;
 800a18c:	6820      	ldr	r0, [r4, #0]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a18e:	01a9      	lsls	r1, r5, #6
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800a190:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  tmpreg = heth->Instance->MACMIIAR;
 800a194:	b2b6      	uxth	r6, r6
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a196:	8a23      	ldrh	r3, [r4, #16]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a198:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
  tmpreg = heth->Instance->MACMIIAR;
 800a19c:	6905      	ldr	r5, [r0, #16]
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a19e:	02db      	lsls	r3, r3, #11
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800a1a0:	6146      	str	r6, [r0, #20]
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 800a1a2:	f005 051c 	and.w	r5, r5, #28
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800a1a6:	b29b      	uxth	r3, r3
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800a1a8:	430b      	orrs	r3, r1
 800a1aa:	432b      	orrs	r3, r5
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 800a1ac:	f043 0303 	orr.w	r3, r3, #3
  heth->Instance->MACMIIAR = tmpreg;
 800a1b0:	6103      	str	r3, [r0, #16]
  tickstart = HAL_GetTick();
 800a1b2:	f7fd fd51 	bl	8007c58 <HAL_GetTick>
 800a1b6:	4605      	mov	r5, r0
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a1b8:	e004      	b.n	800a1c4 <HAL_ETH_WritePHYRegister+0x50>
    tmpreg = heth->Instance->MACMIIAR;
 800a1ba:	6823      	ldr	r3, [r4, #0]
 800a1bc:	691b      	ldr	r3, [r3, #16]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800a1be:	f013 0301 	ands.w	r3, r3, #1
 800a1c2:	d00d      	beq.n	800a1e0 <HAL_ETH_WritePHYRegister+0x6c>
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800a1c4:	f7fd fd48 	bl	8007c58 <HAL_GetTick>
 800a1c8:	1b43      	subs	r3, r0, r5
 800a1ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1ce:	d3f4      	bcc.n	800a1ba <HAL_ETH_WritePHYRegister+0x46>
      heth->State= HAL_ETH_STATE_READY;
 800a1d0:	2201      	movs	r2, #1
      __HAL_UNLOCK(heth);
 800a1d2:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 800a1d4:	2003      	movs	r0, #3
      heth->State= HAL_ETH_STATE_READY;
 800a1d6:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a1da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 800a1de:	bd70      	pop	{r4, r5, r6, pc}
  heth->State = HAL_ETH_STATE_READY;
 800a1e0:	2201      	movs	r2, #1
  return HAL_OK; 
 800a1e2:	4618      	mov	r0, r3
  heth->State = HAL_ETH_STATE_READY;
 800a1e4:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
}
 800a1e8:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
 800a1ea:	f240 515e 	movw	r1, #1374	; 0x55e
 800a1ee:	4804      	ldr	r0, [pc, #16]	; (800a200 <HAL_ETH_WritePHYRegister+0x8c>)
 800a1f0:	f7fa fb1e 	bl	8004830 <assert_failed>
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800a1f4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a1f8:	2b42      	cmp	r3, #66	; 0x42
 800a1fa:	d1c6      	bne.n	800a18a <HAL_ETH_WritePHYRegister+0x16>
    return HAL_BUSY;
 800a1fc:	2002      	movs	r0, #2
}
 800a1fe:	bd70      	pop	{r4, r5, r6, pc}
 800a200:	0802c31c 	.word	0x0802c31c

0800a204 <HAL_ETH_Init>:
{
 800a204:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tempreg = 0, phyreg = 0;
 800a206:	2300      	movs	r3, #0
{
 800a208:	b083      	sub	sp, #12
  uint32_t tempreg = 0, phyreg = 0;
 800a20a:	9300      	str	r3, [sp, #0]
  if(heth == NULL)
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f000 80f5 	beq.w	800a3fc <HAL_ETH_Init+0x1f8>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a212:	6843      	ldr	r3, [r0, #4]
 800a214:	4604      	mov	r4, r0
 800a216:	2b01      	cmp	r3, #1
 800a218:	f200 809c 	bhi.w	800a354 <HAL_ETH_Init+0x150>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a21c:	69a3      	ldr	r3, [r4, #24]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	f200 808f 	bhi.w	800a342 <HAL_ETH_Init+0x13e>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a224:	69e3      	ldr	r3, [r4, #28]
 800a226:	2b01      	cmp	r3, #1
 800a228:	d873      	bhi.n	800a312 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a22a:	6a23      	ldr	r3, [r4, #32]
 800a22c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a230:	d177      	bne.n	800a322 <HAL_ETH_Init+0x11e>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a232:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a236:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d07b      	beq.n	800a336 <HAL_ETH_Init+0x132>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a23e:	4b91      	ldr	r3, [pc, #580]	; (800a484 <HAL_ETH_Init+0x280>)
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a240:	4a91      	ldr	r2, [pc, #580]	; (800a488 <HAL_ETH_Init+0x284>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a242:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800a244:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800a248:	6459      	str	r1, [r3, #68]	; 0x44
 800a24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a24c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a250:	9301      	str	r3, [sp, #4]
 800a252:	9901      	ldr	r1, [sp, #4]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a254:	6851      	ldr	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a256:	6823      	ldr	r3, [r4, #0]
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a258:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a25c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800a260:	6051      	str	r1, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800a262:	6851      	ldr	r1, [r2, #4]
 800a264:	6a20      	ldr	r0, [r4, #32]
 800a266:	4301      	orrs	r1, r0
 800a268:	6051      	str	r1, [r2, #4]
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	f042 0201 	orr.w	r2, r2, #1
 800a270:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800a272:	f7fd fcf1 	bl	8007c58 <HAL_GetTick>
 800a276:	4605      	mov	r5, r0
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a278:	e005      	b.n	800a286 <HAL_ETH_Init+0x82>
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800a27a:	f7fd fced 	bl	8007c58 <HAL_GetTick>
 800a27e:	1b43      	subs	r3, r0, r5
 800a280:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a284:	d86f      	bhi.n	800a366 <HAL_ETH_Init+0x162>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a28c:	6812      	ldr	r2, [r2, #0]
 800a28e:	07d0      	lsls	r0, r2, #31
 800a290:	d4f3      	bmi.n	800a27a <HAL_ETH_Init+0x76>
  tempreg = (heth->Instance)->MACMIIAR;
 800a292:	691d      	ldr	r5, [r3, #16]
  hclk = HAL_RCC_GetHCLKFreq();
 800a294:	f003 faac 	bl	800d7f0 <HAL_RCC_GetHCLKFreq>
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a298:	4b7c      	ldr	r3, [pc, #496]	; (800a48c <HAL_ETH_Init+0x288>)
 800a29a:	4a7d      	ldr	r2, [pc, #500]	; (800a490 <HAL_ETH_Init+0x28c>)
  tempreg &= ETH_MACMIIAR_CR_MASK;
 800a29c:	f025 051c 	bic.w	r5, r5, #28
  if((hclk >= 20000000)&&(hclk < 35000000))
 800a2a0:	4403      	add	r3, r0
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d274      	bcs.n	800a390 <HAL_ETH_Init+0x18c>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800a2a6:	f045 0508 	orr.w	r5, r5, #8
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a2aa:	6823      	ldr	r3, [r4, #0]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a2ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a2b0:	2100      	movs	r1, #0
 800a2b2:	4620      	mov	r0, r4
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 800a2b4:	611d      	str	r5, [r3, #16]
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800a2b6:	f7ff ff5d 	bl	800a174 <HAL_ETH_WritePHYRegister>
 800a2ba:	4605      	mov	r5, r0
 800a2bc:	2800      	cmp	r0, #0
 800a2be:	d15c      	bne.n	800a37a <HAL_ETH_Init+0x176>
  HAL_Delay(PHY_RESET_DELAY);
 800a2c0:	20ff      	movs	r0, #255	; 0xff
 800a2c2:	f7fd fccf 	bl	8007c64 <HAL_Delay>
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800a2c6:	6863      	ldr	r3, [r4, #4]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d178      	bne.n	800a3be <HAL_ETH_Init+0x1ba>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a2cc:	68a3      	ldr	r3, [r4, #8]
 800a2ce:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a2d2:	f040 809e 	bne.w	800a412 <HAL_ETH_Init+0x20e>
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a2d6:	68e3      	ldr	r3, [r4, #12]
 800a2d8:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800a2dc:	f040 8092 	bne.w	800a404 <HAL_ETH_Init+0x200>
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 800a2e0:	68a2      	ldr	r2, [r4, #8]
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a2e2:	08db      	lsrs	r3, r3, #3
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	4620      	mov	r0, r4
 800a2e8:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
 800a2ec:	b292      	uxth	r2, r2
 800a2ee:	f7ff ff41 	bl	800a174 <HAL_ETH_WritePHYRegister>
 800a2f2:	2800      	cmp	r0, #0
 800a2f4:	d141      	bne.n	800a37a <HAL_ETH_Init+0x176>
    HAL_Delay(PHY_CONFIG_DELAY);
 800a2f6:	f640 70ff 	movw	r0, #4095	; 0xfff
 800a2fa:	f7fd fcb3 	bl	8007c64 <HAL_Delay>
  ETH_MACDMAConfig(heth, err);
 800a2fe:	4620      	mov	r0, r4
 800a300:	2100      	movs	r1, #0
 800a302:	f7ff fcdd 	bl	8009cc0 <ETH_MACDMAConfig>
  heth->State= HAL_ETH_STATE_READY;
 800a306:	2301      	movs	r3, #1
}
 800a308:	4628      	mov	r0, r5
  heth->State= HAL_ETH_STATE_READY;
 800a30a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a30e:	b003      	add	sp, #12
 800a310:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a312:	21e0      	movs	r1, #224	; 0xe0
 800a314:	485f      	ldr	r0, [pc, #380]	; (800a494 <HAL_ETH_Init+0x290>)
 800a316:	f7fa fa8b 	bl	8004830 <assert_failed>
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
 800a31a:	6a23      	ldr	r3, [r4, #32]
 800a31c:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a320:	d087      	beq.n	800a232 <HAL_ETH_Init+0x2e>
 800a322:	21e1      	movs	r1, #225	; 0xe1
 800a324:	485b      	ldr	r0, [pc, #364]	; (800a494 <HAL_ETH_Init+0x290>)
 800a326:	f7fa fa83 	bl	8004830 <assert_failed>
  if(heth->State == HAL_ETH_STATE_RESET)
 800a32a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a32e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a332:	2b00      	cmp	r3, #0
 800a334:	d183      	bne.n	800a23e <HAL_ETH_Init+0x3a>
    HAL_ETH_MspInit(heth);
 800a336:	4620      	mov	r0, r4
    heth->Lock = HAL_UNLOCKED;
 800a338:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
    HAL_ETH_MspInit(heth);
 800a33c:	f009 fd84 	bl	8013e48 <HAL_ETH_MspInit>
 800a340:	e77d      	b.n	800a23e <HAL_ETH_Init+0x3a>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a342:	21df      	movs	r1, #223	; 0xdf
 800a344:	4853      	ldr	r0, [pc, #332]	; (800a494 <HAL_ETH_Init+0x290>)
 800a346:	f7fa fa73 	bl	8004830 <assert_failed>
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
 800a34a:	69e3      	ldr	r3, [r4, #28]
 800a34c:	2b01      	cmp	r3, #1
 800a34e:	f67f af6c 	bls.w	800a22a <HAL_ETH_Init+0x26>
 800a352:	e7de      	b.n	800a312 <HAL_ETH_Init+0x10e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
 800a354:	21de      	movs	r1, #222	; 0xde
 800a356:	484f      	ldr	r0, [pc, #316]	; (800a494 <HAL_ETH_Init+0x290>)
 800a358:	f7fa fa6a 	bl	8004830 <assert_failed>
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
 800a35c:	69a3      	ldr	r3, [r4, #24]
 800a35e:	2b01      	cmp	r3, #1
 800a360:	f67f af60 	bls.w	800a224 <HAL_ETH_Init+0x20>
 800a364:	e7ed      	b.n	800a342 <HAL_ETH_Init+0x13e>
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a366:	2303      	movs	r3, #3
      __HAL_UNLOCK(heth);
 800a368:	2200      	movs	r2, #0
      return HAL_TIMEOUT;
 800a36a:	461d      	mov	r5, r3
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800a36c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(heth);
 800a370:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
}
 800a374:	4628      	mov	r0, r5
 800a376:	b003      	add	sp, #12
 800a378:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ETH_MACDMAConfig(heth, err);
 800a37a:	4620      	mov	r0, r4
 800a37c:	2101      	movs	r1, #1
 800a37e:	f7ff fc9f 	bl	8009cc0 <ETH_MACDMAConfig>
      heth->State = HAL_ETH_STATE_READY;
 800a382:	2301      	movs	r3, #1
      return HAL_ERROR;
 800a384:	461d      	mov	r5, r3
      heth->State = HAL_ETH_STATE_READY;
 800a386:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800a38a:	4628      	mov	r0, r5
 800a38c:	b003      	add	sp, #12
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if((hclk >= 35000000)&&(hclk < 60000000))
 800a390:	4b41      	ldr	r3, [pc, #260]	; (800a498 <HAL_ETH_Init+0x294>)
 800a392:	4a42      	ldr	r2, [pc, #264]	; (800a49c <HAL_ETH_Init+0x298>)
 800a394:	4403      	add	r3, r0
 800a396:	4293      	cmp	r3, r2
 800a398:	d90e      	bls.n	800a3b8 <HAL_ETH_Init+0x1b4>
  else if((hclk >= 60000000)&&(hclk < 100000000))
 800a39a:	4b41      	ldr	r3, [pc, #260]	; (800a4a0 <HAL_ETH_Init+0x29c>)
 800a39c:	4a41      	ldr	r2, [pc, #260]	; (800a4a4 <HAL_ETH_Init+0x2a0>)
 800a39e:	4403      	add	r3, r0
 800a3a0:	4293      	cmp	r3, r2
 800a3a2:	d382      	bcc.n	800a2aa <HAL_ETH_Init+0xa6>
  else if((hclk >= 100000000)&&(hclk < 150000000))
 800a3a4:	4b40      	ldr	r3, [pc, #256]	; (800a4a8 <HAL_ETH_Init+0x2a4>)
 800a3a6:	4a41      	ldr	r2, [pc, #260]	; (800a4ac <HAL_ETH_Init+0x2a8>)
 800a3a8:	4403      	add	r3, r0
 800a3aa:	4293      	cmp	r3, r2
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800a3ac:	bf94      	ite	ls
 800a3ae:	f045 0504 	orrls.w	r5, r5, #4
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800a3b2:	f045 0510 	orrhi.w	r5, r5, #16
 800a3b6:	e778      	b.n	800a2aa <HAL_ETH_Init+0xa6>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800a3b8:	f045 050c 	orr.w	r5, r5, #12
 800a3bc:	e775      	b.n	800a2aa <HAL_ETH_Init+0xa6>
    tickstart = HAL_GetTick();
 800a3be:	f7fd fc4b 	bl	8007c58 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a3c2:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	e002      	b.n	800a3d0 <HAL_ETH_Init+0x1cc>
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800a3ca:	9b00      	ldr	r3, [sp, #0]
 800a3cc:	0759      	lsls	r1, r3, #29
 800a3ce:	d426      	bmi.n	800a41e <HAL_ETH_Init+0x21a>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a3d0:	466a      	mov	r2, sp
 800a3d2:	2101      	movs	r1, #1
 800a3d4:	4620      	mov	r0, r4
 800a3d6:	f7ff fe83 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800a3da:	f7fd fc3d 	bl	8007c58 <HAL_GetTick>
 800a3de:	1b80      	subs	r0, r0, r6
 800a3e0:	42b8      	cmp	r0, r7
 800a3e2:	d9f2      	bls.n	800a3ca <HAL_ETH_Init+0x1c6>
        ETH_MACDMAConfig(heth, err);
 800a3e4:	2101      	movs	r1, #1
 800a3e6:	4620      	mov	r0, r4
 800a3e8:	f7ff fc6a 	bl	8009cc0 <ETH_MACDMAConfig>
        heth->State= HAL_ETH_STATE_READY;
 800a3ec:	2201      	movs	r2, #1
        __HAL_UNLOCK(heth);
 800a3ee:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a3f0:	2503      	movs	r5, #3
        heth->State= HAL_ETH_STATE_READY;
 800a3f2:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
        __HAL_UNLOCK(heth);
 800a3f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
        return HAL_TIMEOUT;
 800a3fa:	e7bb      	b.n	800a374 <HAL_ETH_Init+0x170>
    return HAL_ERROR;
 800a3fc:	2501      	movs	r5, #1
}
 800a3fe:	4628      	mov	r0, r5
 800a400:	b003      	add	sp, #12
 800a402:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
 800a404:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 800a408:	4822      	ldr	r0, [pc, #136]	; (800a494 <HAL_ETH_Init+0x290>)
 800a40a:	f7fa fa11 	bl	8004830 <assert_failed>
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800a40e:	68e3      	ldr	r3, [r4, #12]
 800a410:	e766      	b.n	800a2e0 <HAL_ETH_Init+0xdc>
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a412:	f240 11c5 	movw	r1, #453	; 0x1c5
 800a416:	481f      	ldr	r0, [pc, #124]	; (800a494 <HAL_ETH_Init+0x290>)
 800a418:	f7fa fa0a 	bl	8004830 <assert_failed>
 800a41c:	e75b      	b.n	800a2d6 <HAL_ETH_Init+0xd2>
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800a41e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a422:	2100      	movs	r1, #0
 800a424:	4620      	mov	r0, r4
 800a426:	f7ff fea5 	bl	800a174 <HAL_ETH_WritePHYRegister>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d1a5      	bne.n	800a37a <HAL_ETH_Init+0x176>
    tickstart = HAL_GetTick();
 800a42e:	f7fd fc13 	bl	8007c58 <HAL_GetTick>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a432:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800a436:	4606      	mov	r6, r0
 800a438:	e002      	b.n	800a440 <HAL_ETH_Init+0x23c>
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800a43a:	9b00      	ldr	r3, [sp, #0]
 800a43c:	069a      	lsls	r2, r3, #26
 800a43e:	d40a      	bmi.n	800a456 <HAL_ETH_Init+0x252>
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800a440:	466a      	mov	r2, sp
 800a442:	2101      	movs	r1, #1
 800a444:	4620      	mov	r0, r4
 800a446:	f7ff fe4b 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 800a44a:	f7fd fc05 	bl	8007c58 <HAL_GetTick>
 800a44e:	1b80      	subs	r0, r0, r6
 800a450:	42b8      	cmp	r0, r7
 800a452:	d9f2      	bls.n	800a43a <HAL_ETH_Init+0x236>
 800a454:	e7c6      	b.n	800a3e4 <HAL_ETH_Init+0x1e0>
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800a456:	466a      	mov	r2, sp
 800a458:	2110      	movs	r1, #16
 800a45a:	4620      	mov	r0, r4
 800a45c:	f7ff fe40 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
 800a460:	2800      	cmp	r0, #0
 800a462:	d18a      	bne.n	800a37a <HAL_ETH_Init+0x176>
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800a464:	9b00      	ldr	r3, [sp, #0]
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800a466:	f013 0204 	ands.w	r2, r3, #4
 800a46a:	bf18      	it	ne
 800a46c:	f44f 6200 	movne.w	r2, #2048	; 0x800
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800a470:	079b      	lsls	r3, r3, #30
 800a472:	60e2      	str	r2, [r4, #12]
 800a474:	d501      	bpl.n	800a47a <HAL_ETH_Init+0x276>
      (heth->Init).Speed = ETH_SPEED_10M; 
 800a476:	60a0      	str	r0, [r4, #8]
 800a478:	e741      	b.n	800a2fe <HAL_ETH_Init+0xfa>
      (heth->Init).Speed = ETH_SPEED_100M;
 800a47a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a47e:	60a3      	str	r3, [r4, #8]
 800a480:	e73d      	b.n	800a2fe <HAL_ETH_Init+0xfa>
 800a482:	bf00      	nop
 800a484:	40023800 	.word	0x40023800
 800a488:	40013800 	.word	0x40013800
 800a48c:	feced300 	.word	0xfeced300
 800a490:	00e4e1c0 	.word	0x00e4e1c0
 800a494:	0802c31c 	.word	0x0802c31c
 800a498:	fde9f140 	.word	0xfde9f140
 800a49c:	017d783f 	.word	0x017d783f
 800a4a0:	fc6c7900 	.word	0xfc6c7900
 800a4a4:	02625a00 	.word	0x02625a00
 800a4a8:	fa0a1f00 	.word	0xfa0a1f00
 800a4ac:	02faf07f 	.word	0x02faf07f

0800a4b0 <HAL_ETH_Start>:
  __HAL_LOCK(heth);
 800a4b0:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d044      	beq.n	800a542 <HAL_ETH_Start+0x92>
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
  __IO uint32_t tmpreg = 0;
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a4b8:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a4ba:	2202      	movs	r2, #2
{  
 800a4bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(heth);
 800a4be:	2601      	movs	r6, #1
{  
 800a4c0:	b084      	sub	sp, #16
  __IO uint32_t tmpreg = 0;
 800a4c2:	2500      	movs	r5, #0
  heth->State = HAL_ETH_STATE_BUSY;
 800a4c4:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a4c8:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
 800a4cc:	4604      	mov	r4, r0
  __IO uint32_t tmpreg = 0;
 800a4ce:	9503      	str	r5, [sp, #12]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4d0:	4630      	mov	r0, r6
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	f042 0208 	orr.w	r2, r2, #8
 800a4d8:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4de:	f7fd fbc1 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a4e2:	9a03      	ldr	r2, [sp, #12]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4e4:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	601a      	str	r2, [r3, #0]
  __IO uint32_t tmpreg = 0;
 800a4ea:	9502      	str	r5, [sp, #8]
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800a4ec:	681a      	ldr	r2, [r3, #0]
 800a4ee:	f042 0204 	orr.w	r2, r2, #4
 800a4f2:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4f8:	f7fd fbb4 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a4fc:	9a02      	ldr	r2, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a4fe:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a500:	6823      	ldr	r3, [r4, #0]
 800a502:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a504:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a508:	9501      	str	r5, [sp, #4]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a50a:	699a      	ldr	r2, [r3, #24]
 800a50c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a510:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a516:	f7fd fba5 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a51a:	6823      	ldr	r3, [r4, #0]
  return HAL_OK;
 800a51c:	4628      	mov	r0, r5
  (heth->Instance)->DMAOMR = tmpreg;
 800a51e:	9a01      	ldr	r2, [sp, #4]
 800a520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a524:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800a526:	699a      	ldr	r2, [r3, #24]
 800a528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a52c:	619a      	str	r2, [r3, #24]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800a52e:	699a      	ldr	r2, [r3, #24]
 800a530:	f042 0202 	orr.w	r2, r2, #2
 800a534:	619a      	str	r2, [r3, #24]
  heth->State= HAL_ETH_STATE_READY;
 800a536:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a53a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a53e:	b004      	add	sp, #16
 800a540:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a542:	2002      	movs	r0, #2
}
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop

0800a548 <HAL_ETH_Stop>:
  __HAL_LOCK(heth);
 800a548:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d046      	beq.n	800a5de <HAL_ETH_Stop+0x96>
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a550:	6803      	ldr	r3, [r0, #0]
  heth->State = HAL_ETH_STATE_BUSY;
 800a552:	2102      	movs	r1, #2
{  
 800a554:	b570      	push	{r4, r5, r6, lr}
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a556:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
  __HAL_LOCK(heth);
 800a55a:	2601      	movs	r6, #1
  heth->State = HAL_ETH_STATE_BUSY;
 800a55c:	f880 1044 	strb.w	r1, [r0, #68]	; 0x44
{  
 800a560:	b084      	sub	sp, #16
  __HAL_LOCK(heth);
 800a562:	f880 6045 	strb.w	r6, [r0, #69]	; 0x45
  __IO uint32_t tmpreg = 0;
 800a566:	2500      	movs	r5, #0
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a568:	6991      	ldr	r1, [r2, #24]
 800a56a:	4604      	mov	r4, r0
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a56c:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800a56e:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 800a572:	6191      	str	r1, [r2, #24]
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800a574:	6991      	ldr	r1, [r2, #24]
 800a576:	f021 0102 	bic.w	r1, r1, #2
 800a57a:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a57c:	9503      	str	r5, [sp, #12]
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	f022 0204 	bic.w	r2, r2, #4
 800a584:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	9303      	str	r3, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a58a:	f7fd fb6b 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a58e:	9a03      	ldr	r2, [sp, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a590:	4630      	mov	r0, r6
  (heth->Instance)->MACCR = tmpreg;
 800a592:	6823      	ldr	r3, [r4, #0]
 800a594:	601a      	str	r2, [r3, #0]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
  __IO uint32_t tmpreg = 0;
 800a59a:	9502      	str	r5, [sp, #8]
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800a59c:	699a      	ldr	r2, [r3, #24]
 800a59e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a5a2:	619a      	str	r2, [r3, #24]
  tmpreg = (heth->Instance)->DMAOMR;
 800a5a4:	699b      	ldr	r3, [r3, #24]
 800a5a6:	9302      	str	r3, [sp, #8]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a5a8:	f7fd fb5c 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800a5ac:	6823      	ldr	r3, [r4, #0]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a5ae:	4630      	mov	r0, r6
  (heth->Instance)->DMAOMR = tmpreg;
 800a5b0:	9902      	ldr	r1, [sp, #8]
 800a5b2:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800a5b6:	6191      	str	r1, [r2, #24]
  __IO uint32_t tmpreg = 0;
 800a5b8:	9501      	str	r5, [sp, #4]
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800a5ba:	681a      	ldr	r2, [r3, #0]
 800a5bc:	f022 0208 	bic.w	r2, r2, #8
 800a5c0:	601a      	str	r2, [r3, #0]
  tmpreg = (heth->Instance)->MACCR;
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	9301      	str	r3, [sp, #4]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800a5c6:	f7fd fb4d 	bl	8007c64 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 800a5ca:	9a01      	ldr	r2, [sp, #4]
  return HAL_OK;
 800a5cc:	4628      	mov	r0, r5
  (heth->Instance)->MACCR = tmpreg;
 800a5ce:	6823      	ldr	r3, [r4, #0]
 800a5d0:	601a      	str	r2, [r3, #0]
  heth->State = HAL_ETH_STATE_READY;
 800a5d2:	f884 6044 	strb.w	r6, [r4, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a5d6:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
}
 800a5da:	b004      	add	sp, #16
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(heth);
 800a5de:	2002      	movs	r0, #2
}
 800a5e0:	4770      	bx	lr
 800a5e2:	bf00      	nop

0800a5e4 <HAL_ETH_ConfigMAC>:
  __HAL_LOCK(heth);
 800a5e4:	f890 3045 	ldrb.w	r3, [r0, #69]	; 0x45
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	f000 8249 	beq.w	800aa80 <HAL_ETH_ConfigMAC+0x49c>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a5ee:	6883      	ldr	r3, [r0, #8]
  heth->State= HAL_ETH_STATE_BUSY;
 800a5f0:	2202      	movs	r2, #2
{
 800a5f2:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a5f4:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 800a5f8:	460c      	mov	r4, r1
  __HAL_LOCK(heth);
 800a5fa:	f04f 0101 	mov.w	r1, #1
 800a5fe:	4605      	mov	r5, r0
  heth->State= HAL_ETH_STATE_BUSY;
 800a600:	f880 2044 	strb.w	r2, [r0, #68]	; 0x44
  __HAL_LOCK(heth);
 800a604:	f880 1045 	strb.w	r1, [r0, #69]	; 0x45
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800a608:	f040 8207 	bne.w	800aa1a <HAL_ETH_ConfigMAC+0x436>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a60c:	68eb      	ldr	r3, [r5, #12]
 800a60e:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 800a612:	f040 8114 	bne.w	800a83e <HAL_ETH_ConfigMAC+0x25a>
  if (macconf != NULL)
 800a616:	2c00      	cmp	r4, #0
 800a618:	f000 8119 	beq.w	800a84e <HAL_ETH_ConfigMAC+0x26a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a61c:	6823      	ldr	r3, [r4, #0]
 800a61e:	f433 0300 	bics.w	r3, r3, #8388608	; 0x800000
 800a622:	f040 8139 	bne.w	800a898 <HAL_ETH_ConfigMAC+0x2b4>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a626:	6863      	ldr	r3, [r4, #4]
 800a628:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a62c:	f040 816b 	bne.w	800a906 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a630:	68a3      	ldr	r3, [r4, #8]
 800a632:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a636:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a63a:	d002      	beq.n	800a642 <HAL_ETH_ConfigMAC+0x5e>
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	f040 8221 	bne.w	800aa84 <HAL_ETH_ConfigMAC+0x4a0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a642:	68e3      	ldr	r3, [r4, #12]
 800a644:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a648:	f040 8152 	bne.w	800a8f0 <HAL_ETH_ConfigMAC+0x30c>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a64c:	6923      	ldr	r3, [r4, #16]
 800a64e:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a652:	f040 8142 	bne.w	800a8da <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a656:	6963      	ldr	r3, [r4, #20]
 800a658:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a65c:	f040 8132 	bne.w	800a8c4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a660:	69a3      	ldr	r3, [r4, #24]
 800a662:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a666:	f040 8122 	bne.w	800a8ae <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a66a:	69e3      	ldr	r3, [r4, #28]
 800a66c:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a670:	f040 81a3 	bne.w	800a9ba <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a674:	6a23      	ldr	r3, [r4, #32]
 800a676:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a67a:	f040 818e 	bne.w	800a99a <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a680:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a684:	f040 8193 	bne.w	800a9ae <HAL_ETH_ConfigMAC+0x3ca>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a688:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800a68a:	f033 0310 	bics.w	r3, r3, #16
 800a68e:	f040 8179 	bne.w	800a984 <HAL_ETH_ConfigMAC+0x3a0>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a692:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a694:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a698:	f040 819a 	bne.w	800a9d0 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a69c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a69e:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a6a2:	d003      	beq.n	800a6ac <HAL_ETH_ConfigMAC+0xc8>
 800a6a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6a8:	f040 81d8 	bne.w	800aa5c <HAL_ETH_ConfigMAC+0x478>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800a6ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6b2:	2a40      	cmp	r2, #64	; 0x40
 800a6b4:	d002      	beq.n	800a6bc <HAL_ETH_ConfigMAC+0xd8>
 800a6b6:	2b80      	cmp	r3, #128	; 0x80
 800a6b8:	f040 81ba 	bne.w	800aa30 <HAL_ETH_ConfigMAC+0x44c>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a6bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a6be:	f033 0320 	bics.w	r3, r3, #32
 800a6c2:	f040 80de 	bne.w	800a882 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a6c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a6c8:	f033 0308 	bics.w	r3, r3, #8
 800a6cc:	f040 80cf 	bne.w	800a86e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a6d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	f200 80a5 	bhi.w	800a822 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a6d8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a6da:	f240 4204 	movw	r2, #1028	; 0x404
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	bf18      	it	ne
 800a6e2:	2b10      	cmpne	r3, #16
 800a6e4:	d003      	beq.n	800a6ee <HAL_ETH_ConfigMAC+0x10a>
 800a6e6:	f033 0304 	bics.w	r3, r3, #4
 800a6ea:	f040 81c3 	bne.w	800aa74 <HAL_ETH_ConfigMAC+0x490>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800a6ee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800a6f0:	f033 0202 	bics.w	r2, r3, #2
 800a6f4:	d004      	beq.n	800a700 <HAL_ETH_ConfigMAC+0x11c>
 800a6f6:	f240 4202 	movw	r2, #1026	; 0x402
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	f040 81a3 	bne.w	800aa46 <HAL_ETH_ConfigMAC+0x462>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a700:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a706:	f080 816e 	bcs.w	800a9e6 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a70a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a70c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a710:	f040 8173 	bne.w	800a9fa <HAL_ETH_ConfigMAC+0x416>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800a714:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a716:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800a71a:	f040 8178 	bne.w	800aa0e <HAL_ETH_ConfigMAC+0x42a>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a71e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a720:	f033 0308 	bics.w	r3, r3, #8
 800a724:	f040 8123 	bne.w	800a96e <HAL_ETH_ConfigMAC+0x38a>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a728:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a72a:	f033 0304 	bics.w	r3, r3, #4
 800a72e:	f040 8113 	bne.w	800a958 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a732:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a734:	f033 0302 	bics.w	r3, r3, #2
 800a738:	f040 8103 	bne.w	800a942 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a73c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a73e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a742:	f040 80f3 	bne.w	800a92c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a746:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a74c:	f080 80e8 	bcs.w	800a920 <HAL_ETH_ConfigMAC+0x33c>
    tmpreg = (heth->Instance)->MACCR;
 800a750:	682a      	ldr	r2, [r5, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a752:	49b5      	ldr	r1, [pc, #724]	; (800aa28 <HAL_ETH_ConfigMAC+0x444>)
    tmpreg = (heth->Instance)->MACCR;
 800a754:	6810      	ldr	r0, [r2, #0]
                         macconf->BackOffLimit | 
 800a756:	6823      	ldr	r3, [r4, #0]
    tmpreg &= ETH_MACCR_CLEAR_MASK;
 800a758:	4001      	ands	r1, r0
                         macconf->BackOffLimit | 
 800a75a:	6860      	ldr	r0, [r4, #4]
 800a75c:	4303      	orrs	r3, r0
 800a75e:	68a0      	ldr	r0, [r4, #8]
 800a760:	4303      	orrs	r3, r0
 800a762:	68e0      	ldr	r0, [r4, #12]
 800a764:	4303      	orrs	r3, r0
 800a766:	6920      	ldr	r0, [r4, #16]
 800a768:	4303      	orrs	r3, r0
 800a76a:	6960      	ldr	r0, [r4, #20]
 800a76c:	4303      	orrs	r3, r0
 800a76e:	69a0      	ldr	r0, [r4, #24]
 800a770:	4303      	orrs	r3, r0
 800a772:	69e0      	ldr	r0, [r4, #28]
 800a774:	4303      	orrs	r3, r0
 800a776:	6a20      	ldr	r0, [r4, #32]
 800a778:	4303      	orrs	r3, r0
 800a77a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a77c:	4303      	orrs	r3, r0
 800a77e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800a780:	4303      	orrs	r3, r0
 800a782:	68a8      	ldr	r0, [r5, #8]
 800a784:	4303      	orrs	r3, r0
 800a786:	68e8      	ldr	r0, [r5, #12]
 800a788:	4303      	orrs	r3, r0
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a78a:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(macconf->Watchdog | 
 800a78c:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a78e:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a790:	6816      	ldr	r6, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a792:	f7fd fa67 	bl	8007c64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg; 
 800a796:	682a      	ldr	r2, [r5, #0]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a798:	2001      	movs	r0, #1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a79a:	e9d4 310b 	ldrd	r3, r1, [r4, #44]	; 0x2c
    (heth->Instance)->MACCR = tmpreg; 
 800a79e:	6016      	str	r6, [r2, #0]
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a7a0:	430b      	orrs	r3, r1
                                          macconf->SourceAddrFilter |
 800a7a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a7a4:	430b      	orrs	r3, r1
                                          macconf->PassControlFrames |
 800a7a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800a7a8:	430b      	orrs	r3, r1
                                          macconf->BroadcastFramesReception | 
 800a7aa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800a7ac:	430b      	orrs	r3, r1
                                          macconf->DestinationAddrFilter |
 800a7ae:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800a7b0:	430b      	orrs	r3, r1
                                          macconf->PromiscuousMode |
 800a7b2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7b4:	430b      	orrs	r3, r1
                                          macconf->MulticastFramesFilter |
 800a7b6:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800a7b8:	430b      	orrs	r3, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800a7ba:	6053      	str	r3, [r2, #4]
     tmpreg = (heth->Instance)->MACFFR;
 800a7bc:	6856      	ldr	r6, [r2, #4]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7be:	f7fd fa51 	bl	8007c64 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg;
 800a7c2:	682a      	ldr	r2, [r5, #0]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a7c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a7c6:	6d21      	ldr	r1, [r4, #80]	; 0x50
     (heth->Instance)->MACFFR = tmpreg;
 800a7c8:	6056      	str	r6, [r2, #4]
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800a7ca:	6093      	str	r3, [r2, #8]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a7cc:	f64f 7341 	movw	r3, #65345	; 0xff41
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800a7d0:	60d1      	str	r1, [r2, #12]
     tmpreg = (heth->Instance)->MACFCR;
 800a7d2:	6991      	ldr	r1, [r2, #24]
     tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800a7d4:	4019      	ands	r1, r3
                          macconf->ReceiveFlowControl |
 800a7d6:	e9d4 3016 	ldrd	r3, r0, [r4, #88]	; 0x58
 800a7da:	4303      	orrs	r3, r0
 800a7dc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800a7de:	4303      	orrs	r3, r0
 800a7e0:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800a7e2:	4303      	orrs	r3, r0
 800a7e4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800a7e6:	4303      	orrs	r3, r0
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a7e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
                          macconf->ReceiveFlowControl |
 800a7ea:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7ee:	2001      	movs	r0, #1
     tmpreg |= (uint32_t)((macconf->PauseTime << 16) | 
 800a7f0:	430b      	orrs	r3, r1
     (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800a7f2:	6193      	str	r3, [r2, #24]
     tmpreg = (heth->Instance)->MACFCR;
 800a7f4:	6996      	ldr	r6, [r2, #24]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7f6:	f7fd fa35 	bl	8007c64 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg;
 800a7fa:	682b      	ldr	r3, [r5, #0]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a7fc:	2001      	movs	r0, #1
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a7fe:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
     (heth->Instance)->MACFCR = tmpreg;
 800a802:	619e      	str	r6, [r3, #24]
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800a804:	430a      	orrs	r2, r1
 800a806:	61da      	str	r2, [r3, #28]
      tmpreg = (heth->Instance)->MACVLANTR;
 800a808:	69dc      	ldr	r4, [r3, #28]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800a80a:	f7fd fa2b 	bl	8007c64 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg;
 800a80e:	682b      	ldr	r3, [r5, #0]
 800a810:	61dc      	str	r4, [r3, #28]
  __HAL_UNLOCK(heth);
 800a812:	2300      	movs	r3, #0
  heth->State= HAL_ETH_STATE_READY;
 800a814:	2201      	movs	r2, #1
  return HAL_OK;  
 800a816:	4618      	mov	r0, r3
  heth->State= HAL_ETH_STATE_READY;
 800a818:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
  __HAL_UNLOCK(heth);
 800a81c:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
}
 800a820:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a822:	f240 6123 	movw	r1, #1571	; 0x623
 800a826:	4881      	ldr	r0, [pc, #516]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a828:	f7fa f802 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800a82c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800a82e:	f240 4204 	movw	r2, #1028	; 0x404
 800a832:	4293      	cmp	r3, r2
 800a834:	bf18      	it	ne
 800a836:	2b10      	cmpne	r3, #16
 800a838:	f47f af55 	bne.w	800a6e6 <HAL_ETH_ConfigMAC+0x102>
 800a83c:	e757      	b.n	800a6ee <HAL_ETH_ConfigMAC+0x10a>
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
 800a83e:	f240 610e 	movw	r1, #1550	; 0x60e
 800a842:	487a      	ldr	r0, [pc, #488]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a844:	f7f9 fff4 	bl	8004830 <assert_failed>
  if (macconf != NULL)
 800a848:	2c00      	cmp	r4, #0
 800a84a:	f47f aee7 	bne.w	800a61c <HAL_ETH_ConfigMAC+0x38>
    tmpreg = (heth->Instance)->MACCR;
 800a84e:	682a      	ldr	r2, [r5, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a850:	2001      	movs	r0, #1
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a852:	e9d5 3402 	ldrd	r3, r4, [r5, #8]
    tmpreg = (heth->Instance)->MACCR;
 800a856:	6811      	ldr	r1, [r2, #0]
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a858:	4323      	orrs	r3, r4
    tmpreg &= ~((uint32_t)0x00004800);
 800a85a:	f421 4190 	bic.w	r1, r1, #18432	; 0x4800
    tmpreg |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800a85e:	430b      	orrs	r3, r1
    (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800a860:	6013      	str	r3, [r2, #0]
    tmpreg = (heth->Instance)->MACCR;
 800a862:	6814      	ldr	r4, [r2, #0]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800a864:	f7fd f9fe 	bl	8007c64 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg;
 800a868:	682b      	ldr	r3, [r5, #0]
 800a86a:	601c      	str	r4, [r3, #0]
 800a86c:	e7d1      	b.n	800a812 <HAL_ETH_ConfigMAC+0x22e>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a86e:	f240 6122 	movw	r1, #1570	; 0x622
 800a872:	486e      	ldr	r0, [pc, #440]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a874:	f7f9 ffdc 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_PROMISCUOUS_MODE(macconf->PromiscuousMode));
 800a878:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a87a:	2b01      	cmp	r3, #1
 800a87c:	f67f af2c 	bls.w	800a6d8 <HAL_ETH_ConfigMAC+0xf4>
 800a880:	e7cf      	b.n	800a822 <HAL_ETH_ConfigMAC+0x23e>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800a882:	f240 6121 	movw	r1, #1569	; 0x621
 800a886:	4869      	ldr	r0, [pc, #420]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a888:	f7f9 ffd2 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_DESTINATION_ADDR_FILTER(macconf->DestinationAddrFilter));
 800a88c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a88e:	f033 0308 	bics.w	r3, r3, #8
 800a892:	f43f af1d 	beq.w	800a6d0 <HAL_ETH_ConfigMAC+0xec>
 800a896:	e7ea      	b.n	800a86e <HAL_ETH_ConfigMAC+0x28a>
    assert_param(IS_ETH_WATCHDOG(macconf->Watchdog));
 800a898:	f240 6113 	movw	r1, #1555	; 0x613
 800a89c:	4863      	ldr	r0, [pc, #396]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a89e:	f7f9 ffc7 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a8a2:	6863      	ldr	r3, [r4, #4]
 800a8a4:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800a8a8:	f43f aec2 	beq.w	800a630 <HAL_ETH_ConfigMAC+0x4c>
 800a8ac:	e02b      	b.n	800a906 <HAL_ETH_ConfigMAC+0x322>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a8ae:	f240 6119 	movw	r1, #1561	; 0x619
 800a8b2:	485e      	ldr	r0, [pc, #376]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a8b4:	f7f9 ffbc 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a8b8:	69e3      	ldr	r3, [r4, #28]
 800a8ba:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800a8be:	f43f aed9 	beq.w	800a674 <HAL_ETH_ConfigMAC+0x90>
 800a8c2:	e07a      	b.n	800a9ba <HAL_ETH_ConfigMAC+0x3d6>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a8c4:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 800a8c8:	4858      	ldr	r0, [pc, #352]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a8ca:	f7f9 ffb1 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_CHECKSUM_OFFLOAD(macconf->ChecksumOffload));
 800a8ce:	69a3      	ldr	r3, [r4, #24]
 800a8d0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800a8d4:	f43f aec9 	beq.w	800a66a <HAL_ETH_ConfigMAC+0x86>
 800a8d8:	e7e9      	b.n	800a8ae <HAL_ETH_ConfigMAC+0x2ca>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a8da:	f240 6117 	movw	r1, #1559	; 0x617
 800a8de:	4853      	ldr	r0, [pc, #332]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a8e0:	f7f9 ffa6 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_LOOPBACK_MODE(macconf->LoopbackMode));
 800a8e4:	6963      	ldr	r3, [r4, #20]
 800a8e6:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800a8ea:	f43f aeb9 	beq.w	800a660 <HAL_ETH_ConfigMAC+0x7c>
 800a8ee:	e7e9      	b.n	800a8c4 <HAL_ETH_ConfigMAC+0x2e0>
    assert_param(IS_ETH_CARRIER_SENSE(macconf->CarrierSense));
 800a8f0:	f240 6116 	movw	r1, #1558	; 0x616
 800a8f4:	484d      	ldr	r0, [pc, #308]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a8f6:	f7f9 ff9b 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_RECEIVE_OWN(macconf->ReceiveOwn));
 800a8fa:	6923      	ldr	r3, [r4, #16]
 800a8fc:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 800a900:	f43f aea9 	beq.w	800a656 <HAL_ETH_ConfigMAC+0x72>
 800a904:	e7e9      	b.n	800a8da <HAL_ETH_ConfigMAC+0x2f6>
    assert_param(IS_ETH_JABBER(macconf->Jabber));
 800a906:	f240 6114 	movw	r1, #1556	; 0x614
 800a90a:	4848      	ldr	r0, [pc, #288]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a90c:	f7f9 ff90 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800a910:	68a3      	ldr	r3, [r4, #8]
 800a912:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800a916:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a91a:	f47f ae8f 	bne.w	800a63c <HAL_ETH_ConfigMAC+0x58>
 800a91e:	e690      	b.n	800a642 <HAL_ETH_ConfigMAC+0x5e>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a920:	f240 612d 	movw	r1, #1581	; 0x62d
 800a924:	4841      	ldr	r0, [pc, #260]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a926:	f7f9 ff83 	bl	8004830 <assert_failed>
 800a92a:	e711      	b.n	800a750 <HAL_ETH_ConfigMAC+0x16c>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a92c:	f240 612c 	movw	r1, #1580	; 0x62c
 800a930:	483e      	ldr	r0, [pc, #248]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a932:	f7f9 ff7d 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
 800a936:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800a938:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a93c:	f4ff af08 	bcc.w	800a750 <HAL_ETH_ConfigMAC+0x16c>
 800a940:	e7ee      	b.n	800a920 <HAL_ETH_ConfigMAC+0x33c>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a942:	f240 612b 	movw	r1, #1579	; 0x62b
 800a946:	4839      	ldr	r0, [pc, #228]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a948:	f7f9 ff72 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
 800a94c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800a94e:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800a952:	f43f aef8 	beq.w	800a746 <HAL_ETH_ConfigMAC+0x162>
 800a956:	e7e9      	b.n	800a92c <HAL_ETH_ConfigMAC+0x348>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a958:	f240 612a 	movw	r1, #1578	; 0x62a
 800a95c:	4833      	ldr	r0, [pc, #204]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a95e:	f7f9 ff67 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_TRANSMIT_FLOWCONTROL(macconf->TransmitFlowControl));
 800a962:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 800a964:	f033 0302 	bics.w	r3, r3, #2
 800a968:	f43f aee8 	beq.w	800a73c <HAL_ETH_ConfigMAC+0x158>
 800a96c:	e7e9      	b.n	800a942 <HAL_ETH_ConfigMAC+0x35e>
    assert_param(IS_ETH_UNICAST_PAUSE_FRAME_DETECT(macconf->UnicastPauseFrameDetect));
 800a96e:	f240 6129 	movw	r1, #1577	; 0x629
 800a972:	482e      	ldr	r0, [pc, #184]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a974:	f7f9 ff5c 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_RECEIVE_FLOWCONTROL(macconf->ReceiveFlowControl));
 800a978:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a97a:	f033 0304 	bics.w	r3, r3, #4
 800a97e:	f43f aed8 	beq.w	800a732 <HAL_ETH_ConfigMAC+0x14e>
 800a982:	e7e9      	b.n	800a958 <HAL_ETH_ConfigMAC+0x374>
    assert_param(IS_ETH_DEFERRAL_CHECK(macconf->DeferralCheck));
 800a984:	f240 611d 	movw	r1, #1565	; 0x61d
 800a988:	4828      	ldr	r0, [pc, #160]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a98a:	f7f9 ff51 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a98e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800a990:	f033 4300 	bics.w	r3, r3, #2147483648	; 0x80000000
 800a994:	f43f ae82 	beq.w	800a69c <HAL_ETH_ConfigMAC+0xb8>
 800a998:	e01a      	b.n	800a9d0 <HAL_ETH_ConfigMAC+0x3ec>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a99a:	f240 611b 	movw	r1, #1563	; 0x61b
 800a99e:	4823      	ldr	r0, [pc, #140]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a9a0:	f7f9 ff46 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_BACKOFF_LIMIT(macconf->BackOffLimit));
 800a9a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9a6:	f033 0360 	bics.w	r3, r3, #96	; 0x60
 800a9aa:	f43f ae6d 	beq.w	800a688 <HAL_ETH_ConfigMAC+0xa4>
 800a9ae:	f240 611c 	movw	r1, #1564	; 0x61c
 800a9b2:	481e      	ldr	r0, [pc, #120]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a9b4:	f7f9 ff3c 	bl	8004830 <assert_failed>
 800a9b8:	e666      	b.n	800a688 <HAL_ETH_ConfigMAC+0xa4>
    assert_param(IS_ETH_RETRY_TRANSMISSION(macconf->RetryTransmission));
 800a9ba:	f240 611a 	movw	r1, #1562	; 0x61a
 800a9be:	481b      	ldr	r0, [pc, #108]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a9c0:	f7f9 ff36 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_AUTOMATIC_PADCRC_STRIP(macconf->AutomaticPadCRCStrip));
 800a9c4:	6a23      	ldr	r3, [r4, #32]
 800a9c6:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a9ca:	f43f ae58 	beq.w	800a67e <HAL_ETH_ConfigMAC+0x9a>
 800a9ce:	e7e4      	b.n	800a99a <HAL_ETH_ConfigMAC+0x3b6>
    assert_param(IS_ETH_RECEIVE_ALL(macconf->ReceiveAll));
 800a9d0:	f240 611e 	movw	r1, #1566	; 0x61e
 800a9d4:	4815      	ldr	r0, [pc, #84]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a9d6:	f7f9 ff2b 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800a9da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800a9dc:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800a9e0:	f47f ae60 	bne.w	800a6a4 <HAL_ETH_ConfigMAC+0xc0>
 800a9e4:	e662      	b.n	800a6ac <HAL_ETH_ConfigMAC+0xc8>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800a9e6:	f240 6126 	movw	r1, #1574	; 0x626
 800a9ea:	4810      	ldr	r0, [pc, #64]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800a9ec:	f7f9 ff20 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_ZEROQUANTA_PAUSE(macconf->ZeroQuantaPause));
 800a9f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a9f2:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800a9f6:	f43f ae8d 	beq.w	800a714 <HAL_ETH_ConfigMAC+0x130>
 800a9fa:	f240 6127 	movw	r1, #1575	; 0x627
 800a9fe:	480b      	ldr	r0, [pc, #44]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800aa00:	f7f9 ff16 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_PAUSE_LOW_THRESHOLD(macconf->PauseLowThreshold));
 800aa04:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800aa06:	f033 0330 	bics.w	r3, r3, #48	; 0x30
 800aa0a:	f43f ae88 	beq.w	800a71e <HAL_ETH_ConfigMAC+0x13a>
 800aa0e:	f44f 61c5 	mov.w	r1, #1576	; 0x628
 800aa12:	4806      	ldr	r0, [pc, #24]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800aa14:	f7f9 ff0c 	bl	8004830 <assert_failed>
 800aa18:	e681      	b.n	800a71e <HAL_ETH_ConfigMAC+0x13a>
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
 800aa1a:	f240 610d 	movw	r1, #1549	; 0x60d
 800aa1e:	4803      	ldr	r0, [pc, #12]	; (800aa2c <HAL_ETH_ConfigMAC+0x448>)
 800aa20:	f7f9 ff06 	bl	8004830 <assert_failed>
 800aa24:	e5f2      	b.n	800a60c <HAL_ETH_ConfigMAC+0x28>
 800aa26:	bf00      	nop
 800aa28:	ff20810f 	.word	0xff20810f
 800aa2c:	0802c31c 	.word	0x0802c31c
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800aa30:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800aa34:	4816      	ldr	r0, [pc, #88]	; (800aa90 <HAL_ETH_ConfigMAC+0x4ac>)
 800aa36:	f7f9 fefb 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_BROADCAST_FRAMES_RECEPTION(macconf->BroadcastFramesReception));
 800aa3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800aa3c:	f033 0320 	bics.w	r3, r3, #32
 800aa40:	f43f ae41 	beq.w	800a6c6 <HAL_ETH_ConfigMAC+0xe2>
 800aa44:	e71d      	b.n	800a882 <HAL_ETH_ConfigMAC+0x29e>
    assert_param(IS_ETH_UNICAST_FRAMES_FILTER(macconf->UnicastFramesFilter));
 800aa46:	f240 6125 	movw	r1, #1573	; 0x625
 800aa4a:	4811      	ldr	r0, [pc, #68]	; (800aa90 <HAL_ETH_ConfigMAC+0x4ac>)
 800aa4c:	f7f9 fef0 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_PAUSE_TIME(macconf->PauseTime));
 800aa50:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aa52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa56:	f4ff ae58 	bcc.w	800a70a <HAL_ETH_ConfigMAC+0x126>
 800aa5a:	e7c4      	b.n	800a9e6 <HAL_ETH_ConfigMAC+0x402>
    assert_param(IS_ETH_SOURCE_ADDR_FILTER(macconf->SourceAddrFilter));
 800aa5c:	f240 611f 	movw	r1, #1567	; 0x61f
 800aa60:	480b      	ldr	r0, [pc, #44]	; (800aa90 <HAL_ETH_ConfigMAC+0x4ac>)
 800aa62:	f7f9 fee5 	bl	8004830 <assert_failed>
    assert_param(IS_ETH_CONTROL_FRAMES(macconf->PassControlFrames));
 800aa66:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa68:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aa6c:	2a40      	cmp	r2, #64	; 0x40
 800aa6e:	f47f ae22 	bne.w	800a6b6 <HAL_ETH_ConfigMAC+0xd2>
 800aa72:	e623      	b.n	800a6bc <HAL_ETH_ConfigMAC+0xd8>
    assert_param(IS_ETH_MULTICAST_FRAMES_FILTER(macconf->MulticastFramesFilter));
 800aa74:	f240 6124 	movw	r1, #1572	; 0x624
 800aa78:	4805      	ldr	r0, [pc, #20]	; (800aa90 <HAL_ETH_ConfigMAC+0x4ac>)
 800aa7a:	f7f9 fed9 	bl	8004830 <assert_failed>
 800aa7e:	e636      	b.n	800a6ee <HAL_ETH_ConfigMAC+0x10a>
  __HAL_LOCK(heth);
 800aa80:	2002      	movs	r0, #2
}
 800aa82:	4770      	bx	lr
    assert_param(IS_ETH_INTER_FRAME_GAP(macconf->InterFrameGap));
 800aa84:	f240 6115 	movw	r1, #1557	; 0x615
 800aa88:	4801      	ldr	r0, [pc, #4]	; (800aa90 <HAL_ETH_ConfigMAC+0x4ac>)
 800aa8a:	f7f9 fed1 	bl	8004830 <assert_failed>
 800aa8e:	e5d8      	b.n	800a642 <HAL_ETH_ConfigMAC+0x5e>
 800aa90:	0802c31c 	.word	0x0802c31c

0800aa94 <FLASH_SetErrorCode>:
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800aa94:	4b18      	ldr	r3, [pc, #96]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aa96:	68db      	ldr	r3, [r3, #12]
 800aa98:	079b      	lsls	r3, r3, #30
 800aa9a:	d504      	bpl.n	800aaa6 <FLASH_SetErrorCode+0x12>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800aa9c:	4a17      	ldr	r2, [pc, #92]	; (800aafc <FLASH_SetErrorCode+0x68>)
 800aa9e:	6993      	ldr	r3, [r2, #24]
 800aaa0:	f043 0320 	orr.w	r3, r3, #32
 800aaa4:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800aaa6:	4b14      	ldr	r3, [pc, #80]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aaa8:	68db      	ldr	r3, [r3, #12]
 800aaaa:	06d8      	lsls	r0, r3, #27
 800aaac:	d504      	bpl.n	800aab8 <FLASH_SetErrorCode+0x24>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800aaae:	4a13      	ldr	r2, [pc, #76]	; (800aafc <FLASH_SetErrorCode+0x68>)
 800aab0:	6993      	ldr	r3, [r2, #24]
 800aab2:	f043 0310 	orr.w	r3, r3, #16
 800aab6:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800aab8:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aaba:	68db      	ldr	r3, [r3, #12]
 800aabc:	0699      	lsls	r1, r3, #26
 800aabe:	d504      	bpl.n	800aaca <FLASH_SetErrorCode+0x36>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800aac0:	4a0e      	ldr	r2, [pc, #56]	; (800aafc <FLASH_SetErrorCode+0x68>)
 800aac2:	6993      	ldr	r3, [r2, #24]
 800aac4:	f043 0308 	orr.w	r3, r3, #8
 800aac8:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800aaca:	4b0b      	ldr	r3, [pc, #44]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aacc:	68db      	ldr	r3, [r3, #12]
 800aace:	065a      	lsls	r2, r3, #25
 800aad0:	d504      	bpl.n	800aadc <FLASH_SetErrorCode+0x48>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800aad2:	4a0a      	ldr	r2, [pc, #40]	; (800aafc <FLASH_SetErrorCode+0x68>)
 800aad4:	6993      	ldr	r3, [r2, #24]
 800aad6:	f043 0304 	orr.w	r3, r3, #4
 800aada:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aade:	68db      	ldr	r3, [r3, #12]
 800aae0:	061b      	lsls	r3, r3, #24
 800aae2:	d504      	bpl.n	800aaee <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 800aae4:	4a05      	ldr	r2, [pc, #20]	; (800aafc <FLASH_SetErrorCode+0x68>)
 800aae6:	6993      	ldr	r3, [r2, #24]
 800aae8:	f043 0302 	orr.w	r3, r3, #2
 800aaec:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800aaee:	4b02      	ldr	r3, [pc, #8]	; (800aaf8 <FLASH_SetErrorCode+0x64>)
 800aaf0:	22f2      	movs	r2, #242	; 0xf2
 800aaf2:	60da      	str	r2, [r3, #12]
}
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	40023c00 	.word	0x40023c00
 800aafc:	20003464 	.word	0x20003464

0800ab00 <FLASH_Program_Byte>:
{
 800ab00:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab02:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ab06:	4604      	mov	r4, r0
 800ab08:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab0a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab0e:	d304      	bcc.n	800ab1a <FLASH_Program_Byte+0x1a>
 800ab10:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <FLASH_Program_Byte+0x44>)
 800ab12:	4403      	add	r3, r0
 800ab14:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ab18:	d20e      	bcs.n	800ab38 <FLASH_Program_Byte+0x38>
  FLASH->CR &= CR_PSIZE_MASK;
 800ab1a:	4b0b      	ldr	r3, [pc, #44]	; (800ab48 <FLASH_Program_Byte+0x48>)
 800ab1c:	691a      	ldr	r2, [r3, #16]
 800ab1e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ab22:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800ab24:	691a      	ldr	r2, [r3, #16]
 800ab26:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab28:	691a      	ldr	r2, [r3, #16]
 800ab2a:	f042 0201 	orr.w	r2, r2, #1
 800ab2e:	611a      	str	r2, [r3, #16]
  *(__IO uint8_t*)Address = Data;
 800ab30:	7025      	strb	r5, [r4, #0]
	__ASM volatile ("dsb 0xF":::"memory");
 800ab32:	f3bf 8f4f 	dsb	sy
}
 800ab36:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab38:	f240 21ee 	movw	r1, #750	; 0x2ee
 800ab3c:	4803      	ldr	r0, [pc, #12]	; (800ab4c <FLASH_Program_Byte+0x4c>)
 800ab3e:	f7f9 fe77 	bl	8004830 <assert_failed>
 800ab42:	e7ea      	b.n	800ab1a <FLASH_Program_Byte+0x1a>
 800ab44:	e00f1000 	.word	0xe00f1000
 800ab48:	40023c00 	.word	0x40023c00
 800ab4c:	0802c354 	.word	0x0802c354

0800ab50 <FLASH_Program_HalfWord>:
{
 800ab50:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab52:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ab56:	4604      	mov	r4, r0
 800ab58:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab5e:	d304      	bcc.n	800ab6a <FLASH_Program_HalfWord+0x1a>
 800ab60:	4b0d      	ldr	r3, [pc, #52]	; (800ab98 <FLASH_Program_HalfWord+0x48>)
 800ab62:	4403      	add	r3, r0
 800ab64:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ab68:	d210      	bcs.n	800ab8c <FLASH_Program_HalfWord+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800ab6a:	4b0c      	ldr	r3, [pc, #48]	; (800ab9c <FLASH_Program_HalfWord+0x4c>)
 800ab6c:	691a      	ldr	r2, [r3, #16]
 800ab6e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ab72:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800ab74:	691a      	ldr	r2, [r3, #16]
 800ab76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab7a:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ab7c:	691a      	ldr	r2, [r3, #16]
 800ab7e:	f042 0201 	orr.w	r2, r2, #1
 800ab82:	611a      	str	r2, [r3, #16]
  *(__IO uint16_t*)Address = Data;
 800ab84:	8025      	strh	r5, [r4, #0]
 800ab86:	f3bf 8f4f 	dsb	sy
}
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ab8c:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 800ab90:	4803      	ldr	r0, [pc, #12]	; (800aba0 <FLASH_Program_HalfWord+0x50>)
 800ab92:	f7f9 fe4d 	bl	8004830 <assert_failed>
 800ab96:	e7e8      	b.n	800ab6a <FLASH_Program_HalfWord+0x1a>
 800ab98:	e00f1000 	.word	0xe00f1000
 800ab9c:	40023c00 	.word	0x40023c00
 800aba0:	0802c354 	.word	0x0802c354

0800aba4 <FLASH_Program_Word>:
{
 800aba4:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_FLASH_ADDRESS(Address));
 800aba6:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800abaa:	4604      	mov	r4, r0
 800abac:	460d      	mov	r5, r1
  assert_param(IS_FLASH_ADDRESS(Address));
 800abae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abb2:	d304      	bcc.n	800abbe <FLASH_Program_Word+0x1a>
 800abb4:	4b0d      	ldr	r3, [pc, #52]	; (800abec <FLASH_Program_Word+0x48>)
 800abb6:	4403      	add	r3, r0
 800abb8:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800abbc:	d210      	bcs.n	800abe0 <FLASH_Program_Word+0x3c>
  FLASH->CR &= CR_PSIZE_MASK;
 800abbe:	4b0c      	ldr	r3, [pc, #48]	; (800abf0 <FLASH_Program_Word+0x4c>)
 800abc0:	691a      	ldr	r2, [r3, #16]
 800abc2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800abc6:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800abc8:	691a      	ldr	r2, [r3, #16]
 800abca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abce:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_PG;
 800abd0:	691a      	ldr	r2, [r3, #16]
 800abd2:	f042 0201 	orr.w	r2, r2, #1
 800abd6:	611a      	str	r2, [r3, #16]
  *(__IO uint32_t*)Address = Data;
 800abd8:	6025      	str	r5, [r4, #0]
 800abda:	f3bf 8f4f 	dsb	sy
}
 800abde:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800abe0:	f240 21b3 	movw	r1, #691	; 0x2b3
 800abe4:	4803      	ldr	r0, [pc, #12]	; (800abf4 <FLASH_Program_Word+0x50>)
 800abe6:	f7f9 fe23 	bl	8004830 <assert_failed>
 800abea:	e7e8      	b.n	800abbe <FLASH_Program_Word+0x1a>
 800abec:	e00f1000 	.word	0xe00f1000
 800abf0:	40023c00 	.word	0x40023c00
 800abf4:	0802c354 	.word	0x0802c354

0800abf8 <FLASH_Program_DoubleWord>:
{
 800abf8:	b570      	push	{r4, r5, r6, lr}
 800abfa:	461d      	mov	r5, r3
  assert_param(IS_FLASH_ADDRESS(Address));
 800abfc:	f100 4378 	add.w	r3, r0, #4160749568	; 0xf8000000
{
 800ac00:	4604      	mov	r4, r0
 800ac02:	4616      	mov	r6, r2
  assert_param(IS_FLASH_ADDRESS(Address));
 800ac04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac08:	d304      	bcc.n	800ac14 <FLASH_Program_DoubleWord+0x1c>
 800ac0a:	4b0f      	ldr	r3, [pc, #60]	; (800ac48 <FLASH_Program_DoubleWord+0x50>)
 800ac0c:	4403      	add	r3, r0
 800ac0e:	f5b3 6f84 	cmp.w	r3, #1056	; 0x420
 800ac12:	d213      	bcs.n	800ac3c <FLASH_Program_DoubleWord+0x44>
  FLASH->CR &= CR_PSIZE_MASK;
 800ac14:	490d      	ldr	r1, [pc, #52]	; (800ac4c <FLASH_Program_DoubleWord+0x54>)
 800ac16:	690b      	ldr	r3, [r1, #16]
 800ac18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac1c:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800ac1e:	690b      	ldr	r3, [r1, #16]
 800ac20:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ac24:	610b      	str	r3, [r1, #16]
  FLASH->CR |= FLASH_CR_PG;
 800ac26:	690b      	ldr	r3, [r1, #16]
 800ac28:	f043 0301 	orr.w	r3, r3, #1
 800ac2c:	610b      	str	r3, [r1, #16]
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800ac2e:	6026      	str	r6, [r4, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800ac30:	f3bf 8f6f 	isb	sy
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800ac34:	6065      	str	r5, [r4, #4]
	__ASM volatile ("dsb 0xF":::"memory");
 800ac36:	f3bf 8f4f 	dsb	sy
}
 800ac3a:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_FLASH_ADDRESS(Address));
 800ac3c:	f240 218e 	movw	r1, #654	; 0x28e
 800ac40:	4803      	ldr	r0, [pc, #12]	; (800ac50 <FLASH_Program_DoubleWord+0x58>)
 800ac42:	f7f9 fdf5 	bl	8004830 <assert_failed>
 800ac46:	e7e5      	b.n	800ac14 <FLASH_Program_DoubleWord+0x1c>
 800ac48:	e00f1000 	.word	0xe00f1000
 800ac4c:	40023c00 	.word	0x40023c00
 800ac50:	0802c354 	.word	0x0802c354

0800ac54 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ac54:	4b06      	ldr	r3, [pc, #24]	; (800ac70 <HAL_FLASH_Unlock+0x1c>)
 800ac56:	691a      	ldr	r2, [r3, #16]
 800ac58:	2a00      	cmp	r2, #0
 800ac5a:	db01      	blt.n	800ac60 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 800ac5c:	2000      	movs	r0, #0
}
 800ac5e:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ac60:	4904      	ldr	r1, [pc, #16]	; (800ac74 <HAL_FLASH_Unlock+0x20>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ac62:	4a05      	ldr	r2, [pc, #20]	; (800ac78 <HAL_FLASH_Unlock+0x24>)
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800ac64:	6059      	str	r1, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800ac66:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800ac68:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 800ac6a:	0fc0      	lsrs	r0, r0, #31
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	40023c00 	.word	0x40023c00
 800ac74:	45670123 	.word	0x45670123
 800ac78:	cdef89ab 	.word	0xcdef89ab

0800ac7c <HAL_FLASH_Lock>:
  FLASH->CR |= FLASH_CR_LOCK;
 800ac7c:	4a03      	ldr	r2, [pc, #12]	; (800ac8c <HAL_FLASH_Lock+0x10>)
}
 800ac7e:	2000      	movs	r0, #0
  FLASH->CR |= FLASH_CR_LOCK;
 800ac80:	6913      	ldr	r3, [r2, #16]
 800ac82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ac86:	6113      	str	r3, [r2, #16]
}
 800ac88:	4770      	bx	lr
 800ac8a:	bf00      	nop
 800ac8c:	40023c00 	.word	0x40023c00

0800ac90 <HAL_FLASH_OB_Unlock>:
  if((FLASH->OPTCR & FLASH_OPTCR_OPTLOCK) != RESET)
 800ac90:	4b05      	ldr	r3, [pc, #20]	; (800aca8 <HAL_FLASH_OB_Unlock+0x18>)
 800ac92:	695a      	ldr	r2, [r3, #20]
 800ac94:	07d2      	lsls	r2, r2, #31
 800ac96:	d505      	bpl.n	800aca4 <HAL_FLASH_OB_Unlock+0x14>
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800ac98:	4904      	ldr	r1, [pc, #16]	; (800acac <HAL_FLASH_OB_Unlock+0x1c>)
  return HAL_OK;  
 800ac9a:	2000      	movs	r0, #0
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800ac9c:	4a04      	ldr	r2, [pc, #16]	; (800acb0 <HAL_FLASH_OB_Unlock+0x20>)
    FLASH->OPTKEYR = FLASH_OPT_KEY1;
 800ac9e:	6099      	str	r1, [r3, #8]
    FLASH->OPTKEYR = FLASH_OPT_KEY2;
 800aca0:	609a      	str	r2, [r3, #8]
  return HAL_OK;  
 800aca2:	4770      	bx	lr
    return HAL_ERROR;
 800aca4:	2001      	movs	r0, #1
}
 800aca6:	4770      	bx	lr
 800aca8:	40023c00 	.word	0x40023c00
 800acac:	08192a3b 	.word	0x08192a3b
 800acb0:	4c5d6e7f 	.word	0x4c5d6e7f

0800acb4 <HAL_FLASH_OB_Lock>:
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800acb4:	4a03      	ldr	r2, [pc, #12]	; (800acc4 <HAL_FLASH_OB_Lock+0x10>)
}
 800acb6:	2000      	movs	r0, #0
  FLASH->OPTCR |= FLASH_OPTCR_OPTLOCK;
 800acb8:	6953      	ldr	r3, [r2, #20]
 800acba:	f043 0301 	orr.w	r3, r3, #1
 800acbe:	6153      	str	r3, [r2, #20]
}
 800acc0:	4770      	bx	lr
 800acc2:	bf00      	nop
 800acc4:	40023c00 	.word	0x40023c00

0800acc8 <HAL_FLASH_OB_Launch>:
{
 800acc8:	b570      	push	{r4, r5, r6, lr}
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800acca:	4c14      	ldr	r4, [pc, #80]	; (800ad1c <HAL_FLASH_OB_Launch+0x54>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800accc:	2100      	movs	r1, #0
 800acce:	4a14      	ldr	r2, [pc, #80]	; (800ad20 <HAL_FLASH_OB_Launch+0x58>)
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800acd0:	f24c 3650 	movw	r6, #50000	; 0xc350
  FLASH->OPTCR |= FLASH_OPTCR_OPTSTRT;
 800acd4:	6963      	ldr	r3, [r4, #20]
 800acd6:	f043 0302 	orr.w	r3, r3, #2
 800acda:	6163      	str	r3, [r4, #20]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800acdc:	6191      	str	r1, [r2, #24]
  tickstart = HAL_GetTick();
 800acde:	f7fc ffbb 	bl	8007c58 <HAL_GetTick>
 800ace2:	4605      	mov	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ace4:	e004      	b.n	800acf0 <HAL_FLASH_OB_Launch+0x28>
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800ace6:	f7fc ffb7 	bl	8007c58 <HAL_GetTick>
 800acea:	1b40      	subs	r0, r0, r5
 800acec:	42b0      	cmp	r0, r6
 800acee:	d80e      	bhi.n	800ad0e <HAL_FLASH_OB_Launch+0x46>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800acf0:	68e3      	ldr	r3, [r4, #12]
 800acf2:	03db      	lsls	r3, r3, #15
 800acf4:	d4f7      	bmi.n	800ace6 <HAL_FLASH_OB_Launch+0x1e>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800acf6:	68e2      	ldr	r2, [r4, #12]
 800acf8:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800acfc:	d109      	bne.n	800ad12 <HAL_FLASH_OB_Launch+0x4a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800acfe:	68e0      	ldr	r0, [r4, #12]
 800ad00:	f010 0001 	ands.w	r0, r0, #1
 800ad04:	d002      	beq.n	800ad0c <HAL_FLASH_OB_Launch+0x44>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ad06:	2301      	movs	r3, #1
  return HAL_OK;
 800ad08:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ad0a:	60e3      	str	r3, [r4, #12]
}
 800ad0c:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_TIMEOUT;
 800ad0e:	2003      	movs	r0, #3
}
 800ad10:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800ad12:	f7ff febf 	bl	800aa94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ad16:	2001      	movs	r0, #1
}
 800ad18:	bd70      	pop	{r4, r5, r6, pc}
 800ad1a:	bf00      	nop
 800ad1c:	40023c00 	.word	0x40023c00
 800ad20:	20003464 	.word	0x20003464

0800ad24 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 800ad24:	4b01      	ldr	r3, [pc, #4]	; (800ad2c <HAL_FLASH_GetError+0x8>)
 800ad26:	6998      	ldr	r0, [r3, #24]
}  
 800ad28:	4770      	bx	lr
 800ad2a:	bf00      	nop
 800ad2c:	20003464 	.word	0x20003464

0800ad30 <FLASH_WaitForLastOperation>:
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad30:	4b13      	ldr	r3, [pc, #76]	; (800ad80 <FLASH_WaitForLastOperation+0x50>)
 800ad32:	2200      	movs	r2, #0
{ 
 800ad34:	b570      	push	{r4, r5, r6, lr}
 800ad36:	4604      	mov	r4, r0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800ad38:	619a      	str	r2, [r3, #24]
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ad3a:	4d12      	ldr	r5, [pc, #72]	; (800ad84 <FLASH_WaitForLastOperation+0x54>)
  tickstart = HAL_GetTick();
 800ad3c:	f7fc ff8c 	bl	8007c58 <HAL_GetTick>
 800ad40:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ad42:	e001      	b.n	800ad48 <FLASH_WaitForLastOperation+0x18>
    if(Timeout != HAL_MAX_DELAY)
 800ad44:	1c62      	adds	r2, r4, #1
 800ad46:	d10e      	bne.n	800ad66 <FLASH_WaitForLastOperation+0x36>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800ad48:	68eb      	ldr	r3, [r5, #12]
 800ad4a:	03db      	lsls	r3, r3, #15
 800ad4c:	d4fa      	bmi.n	800ad44 <FLASH_WaitForLastOperation+0x14>
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 800ad4e:	68ea      	ldr	r2, [r5, #12]
 800ad50:	f012 02f2 	ands.w	r2, r2, #242	; 0xf2
 800ad54:	d10f      	bne.n	800ad76 <FLASH_WaitForLastOperation+0x46>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800ad56:	68e8      	ldr	r0, [r5, #12]
 800ad58:	f010 0001 	ands.w	r0, r0, #1
 800ad5c:	d002      	beq.n	800ad64 <FLASH_WaitForLastOperation+0x34>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ad5e:	2301      	movs	r3, #1
  return HAL_OK;
 800ad60:	4610      	mov	r0, r2
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800ad62:	60eb      	str	r3, [r5, #12]
}  
 800ad64:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 800ad66:	b124      	cbz	r4, 800ad72 <FLASH_WaitForLastOperation+0x42>
 800ad68:	f7fc ff76 	bl	8007c58 <HAL_GetTick>
 800ad6c:	1b80      	subs	r0, r0, r6
 800ad6e:	42a0      	cmp	r0, r4
 800ad70:	d9ea      	bls.n	800ad48 <FLASH_WaitForLastOperation+0x18>
        return HAL_TIMEOUT;
 800ad72:	2003      	movs	r0, #3
}  
 800ad74:	bd70      	pop	{r4, r5, r6, pc}
    FLASH_SetErrorCode();
 800ad76:	f7ff fe8d 	bl	800aa94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800ad7a:	2001      	movs	r0, #1
}  
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	bf00      	nop
 800ad80:	20003464 	.word	0x20003464
 800ad84:	40023c00 	.word	0x40023c00

0800ad88 <HAL_FLASH_Program>:
{
 800ad88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 800ad8c:	4d23      	ldr	r5, [pc, #140]	; (800ae1c <HAL_FLASH_Program+0x94>)
{
 800ad8e:	4617      	mov	r7, r2
  __HAL_LOCK(&pFlash);
 800ad90:	7d2a      	ldrb	r2, [r5, #20]
 800ad92:	2a01      	cmp	r2, #1
 800ad94:	d03a      	beq.n	800ae0c <HAL_FLASH_Program+0x84>
 800ad96:	4698      	mov	r8, r3
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ad98:	2803      	cmp	r0, #3
  __HAL_LOCK(&pFlash);
 800ad9a:	f04f 0301 	mov.w	r3, #1
 800ad9e:	4604      	mov	r4, r0
 800ada0:	752b      	strb	r3, [r5, #20]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ada2:	d81d      	bhi.n	800ade0 <HAL_FLASH_Program+0x58>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ada4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800ada8:	460e      	mov	r6, r1
 800adaa:	f7ff ffc1 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800adae:	b998      	cbnz	r0, 800add8 <HAL_FLASH_Program+0x50>
    switch(TypeProgram)
 800adb0:	3c01      	subs	r4, #1
 800adb2:	2c02      	cmp	r4, #2
 800adb4:	d82d      	bhi.n	800ae12 <HAL_FLASH_Program+0x8a>
 800adb6:	e8df f004 	tbb	[pc, r4]
 800adba:	1e02      	.short	0x1e02
 800adbc:	23          	.byte	0x23
 800adbd:	00          	.byte	0x00
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800adbe:	b2b9      	uxth	r1, r7
 800adc0:	4630      	mov	r0, r6
 800adc2:	f7ff fec5 	bl	800ab50 <FLASH_Program_HalfWord>
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800adc6:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adca:	f7ff ffb1 	bl	800ad30 <FLASH_WaitForLastOperation>
    FLASH->CR &= (~FLASH_CR_PG);
 800adce:	4a14      	ldr	r2, [pc, #80]	; (800ae20 <HAL_FLASH_Program+0x98>)
 800add0:	6913      	ldr	r3, [r2, #16]
 800add2:	f023 0301 	bic.w	r3, r3, #1
 800add6:	6113      	str	r3, [r2, #16]
  __HAL_UNLOCK(&pFlash);
 800add8:	2300      	movs	r3, #0
 800adda:	752b      	strb	r3, [r5, #20]
}
 800addc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 800ade0:	4810      	ldr	r0, [pc, #64]	; (800ae24 <HAL_FLASH_Program+0x9c>)
 800ade2:	21aa      	movs	r1, #170	; 0xaa
 800ade4:	f7f9 fd24 	bl	8004830 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800ade8:	f24c 3050 	movw	r0, #50000	; 0xc350
 800adec:	f7ff ffa0 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800adf0:	2800      	cmp	r0, #0
 800adf2:	d1f1      	bne.n	800add8 <HAL_FLASH_Program+0x50>
 800adf4:	e7e7      	b.n	800adc6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_Word(Address, (uint32_t) Data);
 800adf6:	4639      	mov	r1, r7
 800adf8:	4630      	mov	r0, r6
 800adfa:	f7ff fed3 	bl	800aba4 <FLASH_Program_Word>
        break;
 800adfe:	e7e2      	b.n	800adc6 <HAL_FLASH_Program+0x3e>
        FLASH_Program_DoubleWord(Address, Data);
 800ae00:	463a      	mov	r2, r7
 800ae02:	4643      	mov	r3, r8
 800ae04:	4630      	mov	r0, r6
 800ae06:	f7ff fef7 	bl	800abf8 <FLASH_Program_DoubleWord>
        break;
 800ae0a:	e7dc      	b.n	800adc6 <HAL_FLASH_Program+0x3e>
  __HAL_LOCK(&pFlash);
 800ae0c:	2002      	movs	r0, #2
}
 800ae0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_Program_Byte(Address, (uint8_t) Data);
 800ae12:	b2f9      	uxtb	r1, r7
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff fe73 	bl	800ab00 <FLASH_Program_Byte>
        break;
 800ae1a:	e7d4      	b.n	800adc6 <HAL_FLASH_Program+0x3e>
 800ae1c:	20003464 	.word	0x20003464
 800ae20:	40023c00 	.word	0x40023c00
 800ae24:	0802c354 	.word	0x0802c354

0800ae28 <FLASH_MassErase>:
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ae28:	2803      	cmp	r0, #3
{
 800ae2a:	b538      	push	{r3, r4, r5, lr}
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	460d      	mov	r5, r1
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ae30:	d82f      	bhi.n	800ae92 <FLASH_MassErase+0x6a>
  assert_param(IS_FLASH_BANK(Banks));
 800ae32:	1e6b      	subs	r3, r5, #1
 800ae34:	2b02      	cmp	r3, #2
 800ae36:	d81c      	bhi.n	800ae72 <FLASH_MassErase+0x4a>

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800ae38:	4b19      	ldr	r3, [pc, #100]	; (800aea0 <FLASH_MassErase+0x78>)
  if(Banks == FLASH_BANK_BOTH)
 800ae3a:	2d03      	cmp	r5, #3
  FLASH->CR &= CR_PSIZE_MASK;
 800ae3c:	691a      	ldr	r2, [r3, #16]
 800ae3e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800ae42:	611a      	str	r2, [r3, #16]
  if(Banks == FLASH_BANK_BOTH)
 800ae44:	d10e      	bne.n	800ae64 <FLASH_MassErase+0x3c>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 800ae46:	6919      	ldr	r1, [r3, #16]
 800ae48:	f248 0204 	movw	r2, #32772	; 0x8004
 800ae4c:	430a      	orrs	r2, r1
 800ae4e:	611a      	str	r2, [r3, #16]
  else
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;    
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 800ae50:	4a13      	ldr	r2, [pc, #76]	; (800aea0 <FLASH_MassErase+0x78>)
 800ae52:	6910      	ldr	r0, [r2, #16]
 800ae54:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 800ae58:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800ae5c:	6110      	str	r0, [r2, #16]
 800ae5e:	f3bf 8f4f 	dsb	sy
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800ae62:	bd38      	pop	{r3, r4, r5, pc}
  else if(Banks == FLASH_BANK_2)
 800ae64:	2d02      	cmp	r5, #2
 800ae66:	d10e      	bne.n	800ae86 <FLASH_MassErase+0x5e>
    FLASH->CR |= FLASH_CR_MER2;
 800ae68:	691a      	ldr	r2, [r3, #16]
 800ae6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ae6e:	611a      	str	r2, [r3, #16]
 800ae70:	e7ee      	b.n	800ae50 <FLASH_MassErase+0x28>
  assert_param(IS_FLASH_BANK(Banks));
 800ae72:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 800ae76:	480b      	ldr	r0, [pc, #44]	; (800aea4 <FLASH_MassErase+0x7c>)
 800ae78:	f7f9 fcda 	bl	8004830 <assert_failed>
  FLASH->CR &= CR_PSIZE_MASK;
 800ae7c:	4a08      	ldr	r2, [pc, #32]	; (800aea0 <FLASH_MassErase+0x78>)
 800ae7e:	6913      	ldr	r3, [r2, #16]
 800ae80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ae84:	6113      	str	r3, [r2, #16]
    FLASH->CR |= FLASH_CR_MER1;    
 800ae86:	4a06      	ldr	r2, [pc, #24]	; (800aea0 <FLASH_MassErase+0x78>)
 800ae88:	6913      	ldr	r3, [r2, #16]
 800ae8a:	f043 0304 	orr.w	r3, r3, #4
 800ae8e:	6113      	str	r3, [r2, #16]
 800ae90:	e7de      	b.n	800ae50 <FLASH_MassErase+0x28>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800ae92:	f240 11bb 	movw	r1, #443	; 0x1bb
 800ae96:	4803      	ldr	r0, [pc, #12]	; (800aea4 <FLASH_MassErase+0x7c>)
 800ae98:	f7f9 fcca 	bl	8004830 <assert_failed>
 800ae9c:	e7c9      	b.n	800ae32 <FLASH_MassErase+0xa>
 800ae9e:	bf00      	nop
 800aea0:	40023c00 	.word	0x40023c00
 800aea4:	0802c390 	.word	0x0802c390

0800aea8 <HAL_FLASHEx_OBProgram>:
{
 800aea8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(&pFlash);
 800aeaa:	4d64      	ldr	r5, [pc, #400]	; (800b03c <HAL_FLASHEx_OBProgram+0x194>)
 800aeac:	7d2b      	ldrb	r3, [r5, #20]
 800aeae:	2b01      	cmp	r3, #1
 800aeb0:	f000 80bb 	beq.w	800b02a <HAL_FLASHEx_OBProgram+0x182>
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	4604      	mov	r4, r0
 800aeb8:	752b      	strb	r3, [r5, #20]
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800aeba:	6803      	ldr	r3, [r0, #0]
 800aebc:	2b3f      	cmp	r3, #63	; 0x3f
 800aebe:	f200 808c 	bhi.w	800afda <HAL_FLASHEx_OBProgram+0x132>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800aec2:	07d9      	lsls	r1, r3, #31
 800aec4:	d40d      	bmi.n	800aee2 <HAL_FLASHEx_OBProgram+0x3a>
  HAL_StatusTypeDef status = HAL_ERROR;
 800aec6:	2001      	movs	r0, #1
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800aec8:	079a      	lsls	r2, r3, #30
 800aeca:	d42c      	bmi.n	800af26 <HAL_FLASHEx_OBProgram+0x7e>
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800aecc:	075e      	lsls	r6, r3, #29
 800aece:	d440      	bmi.n	800af52 <HAL_FLASHEx_OBProgram+0xaa>
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800aed0:	0719      	lsls	r1, r3, #28
 800aed2:	d44f      	bmi.n	800af74 <HAL_FLASHEx_OBProgram+0xcc>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800aed4:	06da      	lsls	r2, r3, #27
 800aed6:	d45b      	bmi.n	800af90 <HAL_FLASHEx_OBProgram+0xe8>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800aed8:	069b      	lsls	r3, r3, #26
 800aeda:	d46c      	bmi.n	800afb6 <HAL_FLASHEx_OBProgram+0x10e>
  __HAL_UNLOCK(&pFlash);
 800aedc:	2300      	movs	r3, #0
 800aede:	752b      	strb	r3, [r5, #20]
}
 800aee0:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
 800aee2:	6863      	ldr	r3, [r4, #4]
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d905      	bls.n	800aef4 <HAL_FLASHEx_OBProgram+0x4c>
 800aee8:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800aeec:	4854      	ldr	r0, [pc, #336]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800aeee:	f7f9 fc9f 	bl	8004830 <assert_failed>
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800aef2:	6863      	ldr	r3, [r4, #4]
      status = FLASH_OB_EnableWRP(pOBInit->WRPSector);
 800aef4:	68a6      	ldr	r6, [r4, #8]
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800aef6:	2b01      	cmp	r3, #1
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800aef8:	4b52      	ldr	r3, [pc, #328]	; (800b044 <HAL_FLASHEx_OBProgram+0x19c>)
 800aefa:	ea03 0306 	and.w	r3, r3, r6
    if(pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 800aefe:	d07f      	beq.n	800b000 <HAL_FLASHEx_OBProgram+0x158>
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WRPSector)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800af00:	b903      	cbnz	r3, 800af04 <HAL_FLASHEx_OBProgram+0x5c>
 800af02:	b926      	cbnz	r6, 800af0e <HAL_FLASHEx_OBProgram+0x66>
 800af04:	f240 314f 	movw	r1, #847	; 0x34f
 800af08:	484d      	ldr	r0, [pc, #308]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800af0a:	f7f9 fc91 	bl	8004830 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af0e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af12:	f7ff ff0d 	bl	800ad30 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800af16:	b918      	cbnz	r0, 800af20 <HAL_FLASHEx_OBProgram+0x78>
  {
    /* Write protection disabled on sectors */
    FLASH->OPTCR |= (WRPSector); 
 800af18:	4b4b      	ldr	r3, [pc, #300]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800af1a:	695a      	ldr	r2, [r3, #20]
 800af1c:	4316      	orrs	r6, r2
 800af1e:	615e      	str	r6, [r3, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800af20:	6823      	ldr	r3, [r4, #0]
 800af22:	079a      	lsls	r2, r3, #30
 800af24:	d5d2      	bpl.n	800aecc <HAL_FLASHEx_OBProgram+0x24>
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 800af26:	7b26      	ldrb	r6, [r4, #12]
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t Level)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(Level));
 800af28:	2eaa      	cmp	r6, #170	; 0xaa
 800af2a:	bf18      	it	ne
 800af2c:	2e55      	cmpne	r6, #85	; 0x55
 800af2e:	d006      	beq.n	800af3e <HAL_FLASHEx_OBProgram+0x96>
 800af30:	2ecc      	cmp	r6, #204	; 0xcc
 800af32:	d004      	beq.n	800af3e <HAL_FLASHEx_OBProgram+0x96>
 800af34:	f240 316e 	movw	r1, #878	; 0x36e
 800af38:	4841      	ldr	r0, [pc, #260]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800af3a:	f7f9 fc79 	bl	8004830 <assert_failed>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af3e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af42:	f7ff fef5 	bl	800ad30 <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 800af46:	b908      	cbnz	r0, 800af4c <HAL_FLASHEx_OBProgram+0xa4>
  { 
    *(__IO uint8_t*)OPTCR_BYTE1_ADDRESS = Level;
 800af48:	4b3f      	ldr	r3, [pc, #252]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800af4a:	755e      	strb	r6, [r3, #21]
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800af4c:	6823      	ldr	r3, [r4, #0]
 800af4e:	075e      	lsls	r6, r3, #29
 800af50:	d5be      	bpl.n	800aed0 <HAL_FLASHEx_OBProgram+0x28>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af52:	f24c 3050 	movw	r0, #50000	; 0xc350
    status = FLASH_OB_UserConfig(pOBInit->USERConfig & OB_WWDG_SW, 
 800af56:	6966      	ldr	r6, [r4, #20]
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af58:	f7ff feea 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800af5c:	b938      	cbnz	r0, 800af6e <HAL_FLASHEx_OBProgram+0xc6>
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800af5e:	493a      	ldr	r1, [pc, #232]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800af60:	4b3a      	ldr	r3, [pc, #232]	; (800b04c <HAL_FLASHEx_OBProgram+0x1a4>)
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800af62:	4a3b      	ldr	r2, [pc, #236]	; (800b050 <HAL_FLASHEx_OBProgram+0x1a8>)
    useroptionvalue = (Iwdg | Wwdg | Stop | Stdby | Iwdgstop | Iwdgstdby | NDBoot | NDBank);
 800af64:	4033      	ands	r3, r6
    MODIFY_REG(FLASH->OPTCR, useroptionmask, useroptionvalue);
 800af66:	694e      	ldr	r6, [r1, #20]
 800af68:	4032      	ands	r2, r6
 800af6a:	4313      	orrs	r3, r2
 800af6c:	614b      	str	r3, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOR) == OPTIONBYTE_BOR)
 800af6e:	6823      	ldr	r3, [r4, #0]
 800af70:	0719      	lsls	r1, r3, #28
 800af72:	d5af      	bpl.n	800aed4 <HAL_FLASHEx_OBProgram+0x2c>
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800af74:	6926      	ldr	r6, [r4, #16]
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_BOR_LevelConfig(uint8_t Level)
{
  /* Check the parameters */
  assert_param(IS_OB_BOR_LEVEL(Level));
 800af76:	f016 0ff3 	tst.w	r6, #243	; 0xf3
 800af7a:	d158      	bne.n	800b02e <HAL_FLASHEx_OBProgram+0x186>

  /* Set the BOR Level */
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800af7c:	4932      	ldr	r1, [pc, #200]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800af7e:	b2f6      	uxtb	r6, r6
    status = FLASH_OB_BOR_LevelConfig(pOBInit->BORLevel);
 800af80:	2000      	movs	r0, #0
  MODIFY_REG(FLASH->OPTCR, FLASH_OPTCR_BOR_LEV, Level);
 800af82:	694a      	ldr	r2, [r1, #20]
 800af84:	f022 020c 	bic.w	r2, r2, #12
 800af88:	4332      	orrs	r2, r6
 800af8a:	614a      	str	r2, [r1, #20]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800af8c:	06da      	lsls	r2, r3, #27
 800af8e:	d5a3      	bpl.n	800aed8 <HAL_FLASHEx_OBProgram+0x30>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_0, pOBInit->BootAddr0);
 800af90:	69a6      	ldr	r6, [r4, #24]
static HAL_StatusTypeDef FLASH_OB_BootAddressConfig(uint32_t BootOption, uint32_t Address)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  /* Check the parameters */
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800af92:	f248 0313 	movw	r3, #32787	; 0x8013
 800af96:	429e      	cmp	r6, r3
 800af98:	d826      	bhi.n	800afe8 <HAL_FLASHEx_OBProgram+0x140>
    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800af9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800af9e:	f7ff fec7 	bl	800ad30 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 800afa2:	b928      	cbnz	r0, 800afb0 <HAL_FLASHEx_OBProgram+0x108>
  {
    if(BootOption == OPTIONBYTE_BOOTADDR_0)
    {			
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD0, Address);
 800afa4:	4a28      	ldr	r2, [pc, #160]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800afa6:	4b2b      	ldr	r3, [pc, #172]	; (800b054 <HAL_FLASHEx_OBProgram+0x1ac>)
 800afa8:	6991      	ldr	r1, [r2, #24]
 800afaa:	400b      	ands	r3, r1
 800afac:	4333      	orrs	r3, r6
 800afae:	6193      	str	r3, [r2, #24]
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_1) == OPTIONBYTE_BOOTADDR_1)
 800afb0:	6823      	ldr	r3, [r4, #0]
 800afb2:	069b      	lsls	r3, r3, #26
 800afb4:	d592      	bpl.n	800aedc <HAL_FLASHEx_OBProgram+0x34>
    status = FLASH_OB_BootAddressConfig(OPTIONBYTE_BOOTADDR_1, pOBInit->BootAddr1);
 800afb6:	69e4      	ldr	r4, [r4, #28]
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800afb8:	f248 0313 	movw	r3, #32787	; 0x8013
 800afbc:	429c      	cmp	r4, r3
 800afbe:	d819      	bhi.n	800aff4 <HAL_FLASHEx_OBProgram+0x14c>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800afc0:	f24c 3050 	movw	r0, #50000	; 0xc350
 800afc4:	f7ff feb4 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800afc8:	2800      	cmp	r0, #0
 800afca:	d187      	bne.n	800aedc <HAL_FLASHEx_OBProgram+0x34>
    }
    else
    {
      MODIFY_REG(FLASH->OPTCR1, FLASH_OPTCR1_BOOT_ADD1, (Address << 16));
 800afcc:	4a1e      	ldr	r2, [pc, #120]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800afce:	6993      	ldr	r3, [r2, #24]
 800afd0:	b29b      	uxth	r3, r3
 800afd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800afd6:	6193      	str	r3, [r2, #24]
 800afd8:	e780      	b.n	800aedc <HAL_FLASHEx_OBProgram+0x34>
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));
 800afda:	f240 1125 	movw	r1, #293	; 0x125
 800afde:	4818      	ldr	r0, [pc, #96]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800afe0:	f7f9 fc26 	bl	8004830 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 800afe4:	6823      	ldr	r3, [r4, #0]
 800afe6:	e76c      	b.n	800aec2 <HAL_FLASHEx_OBProgram+0x1a>
  assert_param(IS_OB_BOOT_ADDRESS(Address));
 800afe8:	f240 31a9 	movw	r1, #937	; 0x3a9
 800afec:	4814      	ldr	r0, [pc, #80]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800afee:	f7f9 fc1f 	bl	8004830 <assert_failed>
 800aff2:	e7d2      	b.n	800af9a <HAL_FLASHEx_OBProgram+0xf2>
 800aff4:	f240 31a9 	movw	r1, #937	; 0x3a9
 800aff8:	4811      	ldr	r0, [pc, #68]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800affa:	f7f9 fc19 	bl	8004830 <assert_failed>
 800affe:	e7df      	b.n	800afc0 <HAL_FLASHEx_OBProgram+0x118>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b000:	b96b      	cbnz	r3, 800b01e <HAL_FLASHEx_OBProgram+0x176>
 800b002:	b166      	cbz	r6, 800b01e <HAL_FLASHEx_OBProgram+0x176>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b004:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b008:	f7ff fe92 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b00c:	2800      	cmp	r0, #0
 800b00e:	d187      	bne.n	800af20 <HAL_FLASHEx_OBProgram+0x78>
    FLASH->OPTCR &= (~WRPSector);  
 800b010:	4a0d      	ldr	r2, [pc, #52]	; (800b048 <HAL_FLASHEx_OBProgram+0x1a0>)
 800b012:	6953      	ldr	r3, [r2, #20]
 800b014:	ea23 0606 	bic.w	r6, r3, r6
 800b018:	6156      	str	r6, [r2, #20]
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 800b01a:	6823      	ldr	r3, [r4, #0]
 800b01c:	e754      	b.n	800aec8 <HAL_FLASHEx_OBProgram+0x20>
  assert_param(IS_OB_WRP_SECTOR(WRPSector));
 800b01e:	f240 312b 	movw	r1, #811	; 0x32b
 800b022:	4807      	ldr	r0, [pc, #28]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800b024:	f7f9 fc04 	bl	8004830 <assert_failed>
 800b028:	e7ec      	b.n	800b004 <HAL_FLASHEx_OBProgram+0x15c>
  __HAL_LOCK(&pFlash);
 800b02a:	2002      	movs	r0, #2
}
 800b02c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_OB_BOR_LEVEL(Level));
 800b02e:	f44f 7162 	mov.w	r1, #904	; 0x388
 800b032:	4803      	ldr	r0, [pc, #12]	; (800b040 <HAL_FLASHEx_OBProgram+0x198>)
 800b034:	f7f9 fbfc 	bl	8004830 <assert_failed>
  if((pOBInit->OptionType & OPTIONBYTE_BOOTADDR_0) == OPTIONBYTE_BOOTADDR_0)
 800b038:	6823      	ldr	r3, [r4, #0]
 800b03a:	e79f      	b.n	800af7c <HAL_FLASHEx_OBProgram+0xd4>
 800b03c:	20003464 	.word	0x20003464
 800b040:	0802c390 	.word	0x0802c390
 800b044:	f000ffff 	.word	0xf000ffff
 800b048:	40023c00 	.word	0x40023c00
 800b04c:	f00000f0 	.word	0xf00000f0
 800b050:	0fffff0f 	.word	0x0fffff0f
 800b054:	ffff0000 	.word	0xffff0000

0800b058 <HAL_FLASHEx_OBGetConfig>:
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b058:	4a11      	ldr	r2, [pc, #68]	; (800b0a0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b05a:	213f      	movs	r1, #63	; 0x3f
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b05c:	4b11      	ldr	r3, [pc, #68]	; (800b0a4 <HAL_FLASHEx_OBGetConfig+0x4c>)
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER |\
 800b05e:	6001      	str	r1, [r0, #0]
  return ((uint32_t)(FLASH->OPTCR & 0x0FFF0000));
 800b060:	6951      	ldr	r1, [r2, #20]
 800b062:	400b      	ands	r3, r1
  pOBInit->WRPSector = FLASH_OB_GetWRP();
 800b064:	6083      	str	r3, [r0, #8]
  */
static uint8_t FLASH_OB_GetRDP(void)
{
  uint8_t readstatus = OB_RDP_LEVEL_0;
  
  if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_0)
 800b066:	7d51      	ldrb	r1, [r2, #21]
 800b068:	29aa      	cmp	r1, #170	; 0xaa
 800b06a:	b2cb      	uxtb	r3, r1
 800b06c:	d015      	beq.n	800b09a <HAL_FLASHEx_OBGetConfig+0x42>
  {
    readstatus = OB_RDP_LEVEL_0;
  }
  else if ((*(__IO uint8_t*)(OPTCR_BYTE1_ADDRESS)) == OB_RDP_LEVEL_2)
 800b06e:	7d53      	ldrb	r3, [r2, #21]
 800b070:	2bcc      	cmp	r3, #204	; 0xcc
 800b072:	bf0c      	ite	eq
 800b074:	22cc      	moveq	r2, #204	; 0xcc
 800b076:	2255      	movne	r2, #85	; 0x55
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b078:	4b09      	ldr	r3, [pc, #36]	; (800b0a0 <HAL_FLASHEx_OBGetConfig+0x48>)
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 800b07a:	60c2      	str	r2, [r0, #12]
  return ((uint32_t)(FLASH->OPTCR & 0xF00000F0U));
 800b07c:	4a0a      	ldr	r2, [pc, #40]	; (800b0a8 <HAL_FLASHEx_OBGetConfig+0x50>)
 800b07e:	6959      	ldr	r1, [r3, #20]
 800b080:	400a      	ands	r2, r1
  pOBInit->USERConfig = FLASH_OB_GetUser();
 800b082:	6142      	str	r2, [r0, #20]
  *           - OB_BOR_OFF   : Supply voltage ranges from 1.62 to 2.1 V  
  */
static uint32_t FLASH_OB_GetBOR(void)
{
  /* Return the FLASH BOR level */
  return ((uint32_t)(FLASH->OPTCR & 0x0C));
 800b084:	695a      	ldr	r2, [r3, #20]
 800b086:	f002 020c 	and.w	r2, r2, #12
  pOBInit->BORLevel = FLASH_OB_GetBOR();
 800b08a:	6102      	str	r2, [r0, #16]
  uint32_t Address = 0;
    
	/* Return the Boot base Address */
  if(BootOption == OPTIONBYTE_BOOTADDR_0)
  {			
    Address = FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD0;
 800b08c:	699a      	ldr	r2, [r3, #24]
 800b08e:	b292      	uxth	r2, r2
  pOBInit->BootAddr0 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_0);
 800b090:	6182      	str	r2, [r0, #24]
	}
  else
	{
		Address = ((FLASH->OPTCR1 & FLASH_OPTCR1_BOOT_ADD1) >> 16);
 800b092:	699b      	ldr	r3, [r3, #24]
 800b094:	0c1b      	lsrs	r3, r3, #16
  pOBInit->BootAddr1 = FLASH_OB_GetBootAddress(OPTIONBYTE_BOOTADDR_1);
 800b096:	61c3      	str	r3, [r0, #28]
}
 800b098:	4770      	bx	lr
 800b09a:	461a      	mov	r2, r3
 800b09c:	e7ec      	b.n	800b078 <HAL_FLASHEx_OBGetConfig+0x20>
 800b09e:	bf00      	nop
 800b0a0:	40023c00 	.word	0x40023c00
 800b0a4:	0fff0000 	.word	0x0fff0000
 800b0a8:	f00000f0 	.word	0xf00000f0

0800b0ac <FLASH_Erase_Sector>:
  assert_param(IS_FLASH_SECTOR(Sector));
 800b0ac:	2817      	cmp	r0, #23
{
 800b0ae:	b538      	push	{r3, r4, r5, lr}
 800b0b0:	4605      	mov	r5, r0
 800b0b2:	460c      	mov	r4, r1
  assert_param(IS_FLASH_SECTOR(Sector));
 800b0b4:	d82b      	bhi.n	800b10e <FLASH_Erase_Sector+0x62>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b0b6:	2c03      	cmp	r4, #3
 800b0b8:	d821      	bhi.n	800b0fe <FLASH_Erase_Sector+0x52>
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800b0ba:	b9dc      	cbnz	r4, 800b0f4 <FLASH_Erase_Sector+0x48>
  FLASH->CR &= CR_PSIZE_MASK;
 800b0bc:	4b1a      	ldr	r3, [pc, #104]	; (800b128 <FLASH_Erase_Sector+0x7c>)
  if(Sector > FLASH_SECTOR_11) 
 800b0be:	2d0b      	cmp	r5, #11
  FLASH->CR &= CR_PSIZE_MASK;
 800b0c0:	691a      	ldr	r2, [r3, #16]
    Sector += 4;
 800b0c2:	bf88      	it	hi
 800b0c4:	3504      	addhi	r5, #4
  FLASH->CR &= CR_PSIZE_MASK;
 800b0c6:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800b0ca:	611a      	str	r2, [r3, #16]
  FLASH->CR |= tmp_psize;
 800b0cc:	6919      	ldr	r1, [r3, #16]
 800b0ce:	430c      	orrs	r4, r1
 800b0d0:	611c      	str	r4, [r3, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800b0d2:	691a      	ldr	r2, [r3, #16]
 800b0d4:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800b0d8:	611a      	str	r2, [r3, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800b0da:	6918      	ldr	r0, [r3, #16]
 800b0dc:	ea40 05c5 	orr.w	r5, r0, r5, lsl #3
 800b0e0:	f045 0502 	orr.w	r5, r5, #2
 800b0e4:	611d      	str	r5, [r3, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800b0e6:	691a      	ldr	r2, [r3, #16]
 800b0e8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800b0ec:	611a      	str	r2, [r3, #16]
 800b0ee:	f3bf 8f4f 	dsb	sy
}
 800b0f2:	bd38      	pop	{r3, r4, r5, pc}
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b0f4:	2c01      	cmp	r4, #1
 800b0f6:	d110      	bne.n	800b11a <FLASH_Erase_Sector+0x6e>
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800b0f8:	f44f 7480 	mov.w	r4, #256	; 0x100
 800b0fc:	e7de      	b.n	800b0bc <FLASH_Erase_Sector+0x10>
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b0fe:	f44f 71f6 	mov.w	r1, #492	; 0x1ec
 800b102:	480a      	ldr	r0, [pc, #40]	; (800b12c <FLASH_Erase_Sector+0x80>)
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b104:	f44f 7440 	mov.w	r4, #768	; 0x300
  assert_param(IS_VOLTAGERANGE(VoltageRange));
 800b108:	f7f9 fb92 	bl	8004830 <assert_failed>
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800b10c:	e7d6      	b.n	800b0bc <FLASH_Erase_Sector+0x10>
  assert_param(IS_FLASH_SECTOR(Sector));
 800b10e:	f240 11eb 	movw	r1, #491	; 0x1eb
 800b112:	4806      	ldr	r0, [pc, #24]	; (800b12c <FLASH_Erase_Sector+0x80>)
 800b114:	f7f9 fb8c 	bl	8004830 <assert_failed>
 800b118:	e7cd      	b.n	800b0b6 <FLASH_Erase_Sector+0xa>
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800b11a:	2c02      	cmp	r4, #2
 800b11c:	bf0c      	ite	eq
 800b11e:	f44f 7400 	moveq.w	r4, #512	; 0x200
 800b122:	f44f 7440 	movne.w	r4, #768	; 0x300
 800b126:	e7c9      	b.n	800b0bc <FLASH_Erase_Sector+0x10>
 800b128:	40023c00 	.word	0x40023c00
 800b12c:	0802c390 	.word	0x0802c390

0800b130 <HAL_FLASHEx_Erase>:
{
 800b130:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  __HAL_LOCK(&pFlash);
 800b134:	4f2f      	ldr	r7, [pc, #188]	; (800b1f4 <HAL_FLASHEx_Erase+0xc4>)
 800b136:	7d3b      	ldrb	r3, [r7, #20]
 800b138:	2b01      	cmp	r3, #1
 800b13a:	d040      	beq.n	800b1be <HAL_FLASHEx_Erase+0x8e>
 800b13c:	2301      	movs	r3, #1
 800b13e:	4604      	mov	r4, r0
 800b140:	4688      	mov	r8, r1
 800b142:	753b      	strb	r3, [r7, #20]
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800b144:	6803      	ldr	r3, [r0, #0]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d903      	bls.n	800b152 <HAL_FLASHEx_Erase+0x22>
 800b14a:	21a5      	movs	r1, #165	; 0xa5
 800b14c:	482a      	ldr	r0, [pc, #168]	; (800b1f8 <HAL_FLASHEx_Erase+0xc8>)
 800b14e:	f7f9 fb6f 	bl	8004830 <assert_failed>
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b152:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b156:	f7ff fdeb 	bl	800ad30 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800b15a:	4606      	mov	r6, r0
 800b15c:	bb50      	cbnz	r0, 800b1b4 <HAL_FLASHEx_Erase+0x84>
    *SectorError = 0xFFFFFFFFU;
 800b15e:	f04f 33ff 	mov.w	r3, #4294967295
 800b162:	f8c8 3000 	str.w	r3, [r8]
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800b166:	6823      	ldr	r3, [r4, #0]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d034      	beq.n	800b1d6 <HAL_FLASHEx_Erase+0xa6>
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b16c:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b170:	442b      	add	r3, r5
 800b172:	1e5a      	subs	r2, r3, #1
 800b174:	2a17      	cmp	r2, #23
 800b176:	d826      	bhi.n	800b1c6 <HAL_FLASHEx_Erase+0x96>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b178:	429d      	cmp	r5, r3
 800b17a:	d21b      	bcs.n	800b1b4 <HAL_FLASHEx_Erase+0x84>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b17c:	f8df 907c 	ldr.w	r9, [pc, #124]	; 800b1fc <HAL_FLASHEx_Erase+0xcc>
 800b180:	e005      	b.n	800b18e <HAL_FLASHEx_Erase+0x5e>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b182:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
 800b186:	3501      	adds	r5, #1
 800b188:	4413      	add	r3, r2
 800b18a:	42ab      	cmp	r3, r5
 800b18c:	d912      	bls.n	800b1b4 <HAL_FLASHEx_Erase+0x84>
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800b18e:	4628      	mov	r0, r5
 800b190:	7c21      	ldrb	r1, [r4, #16]
 800b192:	f7ff ff8b 	bl	800b0ac <FLASH_Erase_Sector>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b196:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b19a:	f7ff fdc9 	bl	800ad30 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 800b19e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800b1a6:	f8c9 3010 	str.w	r3, [r9, #16]
        if(status != HAL_OK) 
 800b1aa:	2800      	cmp	r0, #0
 800b1ac:	d0e9      	beq.n	800b182 <HAL_FLASHEx_Erase+0x52>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b1ae:	4606      	mov	r6, r0
          *SectorError = index;
 800b1b0:	f8c8 5000 	str.w	r5, [r8]
  __HAL_UNLOCK(&pFlash);
 800b1b4:	2300      	movs	r3, #0
}
 800b1b6:	4630      	mov	r0, r6
  __HAL_UNLOCK(&pFlash);
 800b1b8:	753b      	strb	r3, [r7, #20]
}
 800b1ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(&pFlash);
 800b1be:	2602      	movs	r6, #2
}
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));
 800b1c6:	21c1      	movs	r1, #193	; 0xc1
 800b1c8:	480b      	ldr	r0, [pc, #44]	; (800b1f8 <HAL_FLASHEx_Erase+0xc8>)
 800b1ca:	f7f9 fb31 	bl	8004830 <assert_failed>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800b1ce:	e9d4 5302 	ldrd	r5, r3, [r4, #8]
 800b1d2:	442b      	add	r3, r5
 800b1d4:	e7d0      	b.n	800b178 <HAL_FLASHEx_Erase+0x48>
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800b1d6:	6861      	ldr	r1, [r4, #4]
 800b1d8:	7c20      	ldrb	r0, [r4, #16]
 800b1da:	f7ff fe25 	bl	800ae28 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b1de:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b1e2:	f7ff fda5 	bl	800ad30 <FLASH_WaitForLastOperation>
      FLASH->CR &= (~FLASH_MER_BIT);
 800b1e6:	4a05      	ldr	r2, [pc, #20]	; (800b1fc <HAL_FLASHEx_Erase+0xcc>)
 800b1e8:	4b05      	ldr	r3, [pc, #20]	; (800b200 <HAL_FLASHEx_Erase+0xd0>)
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800b1ea:	4606      	mov	r6, r0
      FLASH->CR &= (~FLASH_MER_BIT);
 800b1ec:	6911      	ldr	r1, [r2, #16]
 800b1ee:	400b      	ands	r3, r1
 800b1f0:	6113      	str	r3, [r2, #16]
 800b1f2:	e7df      	b.n	800b1b4 <HAL_FLASHEx_Erase+0x84>
 800b1f4:	20003464 	.word	0x20003464
 800b1f8:	0802c390 	.word	0x0802c390
 800b1fc:	40023c00 	.word	0x40023c00
 800b200:	ffff7ffb 	.word	0xffff7ffb

0800b204 <HAL_GPIO_Init>:
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t temp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b204:	4bb9      	ldr	r3, [pc, #740]	; (800b4ec <HAL_GPIO_Init+0x2e8>)
 800b206:	4aba      	ldr	r2, [pc, #744]	; (800b4f0 <HAL_GPIO_Init+0x2ec>)
 800b208:	4290      	cmp	r0, r2
 800b20a:	bf18      	it	ne
 800b20c:	4298      	cmpne	r0, r3
{
 800b20e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b212:	bf18      	it	ne
 800b214:	2301      	movne	r3, #1
{
 800b216:	b085      	sub	sp, #20
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b218:	bf08      	it	eq
 800b21a:	2300      	moveq	r3, #0
{
 800b21c:	4606      	mov	r6, r0
 800b21e:	460f      	mov	r7, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b220:	9301      	str	r3, [sp, #4]
 800b222:	d026      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b224:	4bb3      	ldr	r3, [pc, #716]	; (800b4f4 <HAL_GPIO_Init+0x2f0>)
 800b226:	4298      	cmp	r0, r3
 800b228:	d023      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b22a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b22e:	4298      	cmp	r0, r3
 800b230:	d01f      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b236:	4298      	cmp	r0, r3
 800b238:	d01b      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b23a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b23e:	4298      	cmp	r0, r3
 800b240:	d017      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b242:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b246:	4298      	cmp	r0, r3
 800b248:	d013      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b24a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b24e:	4298      	cmp	r0, r3
 800b250:	d00f      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b252:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800b256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25a:	4290      	cmp	r0, r2
 800b25c:	bf18      	it	ne
 800b25e:	4298      	cmpne	r0, r3
 800b260:	d007      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b262:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b266:	4298      	cmp	r0, r3
 800b268:	d003      	beq.n	800b272 <HAL_GPIO_Init+0x6e>
 800b26a:	21aa      	movs	r1, #170	; 0xaa
 800b26c:	48a2      	ldr	r0, [pc, #648]	; (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b26e:	f7f9 fadf 	bl	8004830 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b272:	883b      	ldrh	r3, [r7, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	f000 811a 	beq.w	800b4ae <HAL_GPIO_Init+0x2aa>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b27a:	687a      	ldr	r2, [r7, #4]
 800b27c:	f5b2 1f04 	cmp.w	r2, #2162688	; 0x210000
 800b280:	bf18      	it	ne
 800b282:	2a03      	cmpne	r2, #3
 800b284:	f422 1100 	bic.w	r1, r2, #2097152	; 0x200000
 800b288:	bf8c      	ite	hi
 800b28a:	2301      	movhi	r3, #1
 800b28c:	2300      	movls	r3, #0
 800b28e:	f5b2 1f08 	cmp.w	r2, #2228224	; 0x220000
 800b292:	bf0c      	ite	eq
 800b294:	2300      	moveq	r3, #0
 800b296:	f003 0301 	andne.w	r3, r3, #1
 800b29a:	3a11      	subs	r2, #17
 800b29c:	2a01      	cmp	r2, #1
 800b29e:	bf94      	ite	ls
 800b2a0:	2300      	movls	r3, #0
 800b2a2:	f003 0301 	andhi.w	r3, r3, #1
 800b2a6:	f5b1 1f88 	cmp.w	r1, #1114112	; 0x110000
 800b2aa:	bf0c      	ite	eq
 800b2ac:	2300      	moveq	r3, #0
 800b2ae:	f003 0301 	andne.w	r3, r3, #1
 800b2b2:	b11b      	cbz	r3, 800b2bc <HAL_GPIO_Init+0xb8>
 800b2b4:	f5b1 1f90 	cmp.w	r1, #1179648	; 0x120000
 800b2b8:	f040 813e 	bne.w	800b538 <HAL_GPIO_Init+0x334>
{
 800b2bc:	2500      	movs	r5, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b2be:	f8df a260 	ldr.w	sl, [pc, #608]	; 800b520 <HAL_GPIO_Init+0x31c>

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b2c2:	46b8      	mov	r8, r7
 800b2c4:	e003      	b.n	800b2ce <HAL_GPIO_Init+0xca>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b2c6:	3501      	adds	r5, #1
 800b2c8:	2d10      	cmp	r5, #16
 800b2ca:	f000 80b3 	beq.w	800b434 <HAL_GPIO_Init+0x230>
    ioposition = ((uint32_t)0x01) << position;
 800b2ce:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2d0:	f8d8 3000 	ldr.w	r3, [r8]
    ioposition = ((uint32_t)0x01) << position;
 800b2d4:	40ac      	lsls	r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b2d6:	ea04 0903 	and.w	r9, r4, r3
    if(iocurrent == ioposition)
 800b2da:	ea34 0303 	bics.w	r3, r4, r3
 800b2de:	d1f2      	bne.n	800b2c6 <HAL_GPIO_Init+0xc2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800b2e0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b2e4:	f001 0303 	and.w	r3, r1, #3
 800b2e8:	1e5a      	subs	r2, r3, #1
 800b2ea:	2a01      	cmp	r2, #1
 800b2ec:	f240 80a5 	bls.w	800b43a <HAL_GPIO_Init+0x236>
 800b2f0:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b2f2:	f04f 0b03 	mov.w	fp, #3
 800b2f6:	fa0b fb07 	lsl.w	fp, fp, r7
 800b2fa:	ea6f 0b0b 	mvn.w	fp, fp
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d025      	beq.n	800b34e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b302:	f8d8 0008 	ldr.w	r0, [r8, #8]
 800b306:	2802      	cmp	r0, #2
 800b308:	f200 80b3 	bhi.w	800b472 <HAL_GPIO_Init+0x26e>
        temp = GPIOx->PUPDR;
 800b30c:	68f4      	ldr	r4, [r6, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b30e:	40b8      	lsls	r0, r7
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b310:	2b02      	cmp	r3, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b312:	ea04 040b 	and.w	r4, r4, fp
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b316:	ea40 0004 	orr.w	r0, r0, r4
        GPIOx->PUPDR = temp;
 800b31a:	60f0      	str	r0, [r6, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b31c:	d117      	bne.n	800b34e <HAL_GPIO_Init+0x14a>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b31e:	f8d8 0010 	ldr.w	r0, [r8, #16]
 800b322:	280f      	cmp	r0, #15
 800b324:	f200 80c8 	bhi.w	800b4b8 <HAL_GPIO_Init+0x2b4>
        temp = GPIOx->AFR[position >> 3];
 800b328:	08ec      	lsrs	r4, r5, #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b32a:	f005 0e07 	and.w	lr, r5, #7
 800b32e:	f04f 0c0f 	mov.w	ip, #15
 800b332:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 800b336:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800b33a:	6a22      	ldr	r2, [r4, #32]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b33c:	fa00 f00e 	lsl.w	r0, r0, lr
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b340:	fa0c fe0e 	lsl.w	lr, ip, lr
 800b344:	ea22 0c0e 	bic.w	ip, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b348:	ea40 000c 	orr.w	r0, r0, ip
        GPIOx->AFR[position >> 3] = temp;
 800b34c:	6220      	str	r0, [r4, #32]
      temp = GPIOx->MODER;
 800b34e:	6832      	ldr	r2, [r6, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b350:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b352:	f411 3f40 	tst.w	r1, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b356:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b35a:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800b35e:	6033      	str	r3, [r6, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800b360:	d0b1      	beq.n	800b2c6 <HAL_GPIO_Init+0xc2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b362:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b366:	f025 0303 	bic.w	r3, r5, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b36a:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b36e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b372:	00a4      	lsls	r4, r4, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b374:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
 800b378:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
 800b37c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800b380:	9203      	str	r2, [sp, #12]
 800b382:	4a5e      	ldr	r2, [pc, #376]	; (800b4fc <HAL_GPIO_Init+0x2f8>)
 800b384:	9803      	ldr	r0, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 800b386:	441a      	add	r2, r3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b388:	230f      	movs	r3, #15
        temp = SYSCFG->EXTICR[position >> 2];
 800b38a:	6890      	ldr	r0, [r2, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b38c:	40a3      	lsls	r3, r4
 800b38e:	ea20 0303 	bic.w	r3, r0, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b392:	4857      	ldr	r0, [pc, #348]	; (800b4f0 <HAL_GPIO_Init+0x2ec>)
 800b394:	4286      	cmp	r6, r0
 800b396:	d025      	beq.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	2800      	cmp	r0, #0
 800b39c:	d07d      	beq.n	800b49a <HAL_GPIO_Init+0x296>
 800b39e:	4855      	ldr	r0, [pc, #340]	; (800b4f4 <HAL_GPIO_Init+0x2f0>)
 800b3a0:	4286      	cmp	r6, r0
 800b3a2:	d07f      	beq.n	800b4a4 <HAL_GPIO_Init+0x2a0>
 800b3a4:	4856      	ldr	r0, [pc, #344]	; (800b500 <HAL_GPIO_Init+0x2fc>)
 800b3a6:	4286      	cmp	r6, r0
 800b3a8:	f000 8091 	beq.w	800b4ce <HAL_GPIO_Init+0x2ca>
 800b3ac:	4855      	ldr	r0, [pc, #340]	; (800b504 <HAL_GPIO_Init+0x300>)
 800b3ae:	4286      	cmp	r6, r0
 800b3b0:	f000 8092 	beq.w	800b4d8 <HAL_GPIO_Init+0x2d4>
 800b3b4:	4854      	ldr	r0, [pc, #336]	; (800b508 <HAL_GPIO_Init+0x304>)
 800b3b6:	4286      	cmp	r6, r0
 800b3b8:	f000 80b4 	beq.w	800b524 <HAL_GPIO_Init+0x320>
 800b3bc:	4853      	ldr	r0, [pc, #332]	; (800b50c <HAL_GPIO_Init+0x308>)
 800b3be:	4286      	cmp	r6, r0
 800b3c0:	f000 80b5 	beq.w	800b52e <HAL_GPIO_Init+0x32a>
 800b3c4:	4852      	ldr	r0, [pc, #328]	; (800b510 <HAL_GPIO_Init+0x30c>)
 800b3c6:	4286      	cmp	r6, r0
 800b3c8:	f000 808b 	beq.w	800b4e2 <HAL_GPIO_Init+0x2de>
 800b3cc:	4851      	ldr	r0, [pc, #324]	; (800b514 <HAL_GPIO_Init+0x310>)
 800b3ce:	4286      	cmp	r6, r0
 800b3d0:	f000 80b7 	beq.w	800b542 <HAL_GPIO_Init+0x33e>
 800b3d4:	4850      	ldr	r0, [pc, #320]	; (800b518 <HAL_GPIO_Init+0x314>)
 800b3d6:	4286      	cmp	r6, r0
 800b3d8:	bf0c      	ite	eq
 800b3da:	2009      	moveq	r0, #9
 800b3dc:	200a      	movne	r0, #10
 800b3de:	fa00 f404 	lsl.w	r4, r0, r4
 800b3e2:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2] = temp;
 800b3e4:	6093      	str	r3, [r2, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 800b3e6:	ea6f 0009 	mvn.w	r0, r9
        temp = EXTI->RTSR;
 800b3ea:	4b4c      	ldr	r3, [pc, #304]	; (800b51c <HAL_GPIO_Init+0x318>)
  for(position = 0; position < GPIO_NUMBER; position++)
 800b3ec:	3501      	adds	r5, #1
        temp = EXTI->RTSR;
 800b3ee:	689a      	ldr	r2, [r3, #8]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800b3f0:	02cb      	lsls	r3, r1, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800b3f2:	4b4a      	ldr	r3, [pc, #296]	; (800b51c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b3f4:	bf54      	ite	pl
 800b3f6:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b3f8:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800b3fc:	028f      	lsls	r7, r1, #10
        EXTI->RTSR = temp;
 800b3fe:	609a      	str	r2, [r3, #8]
        temp = EXTI->FTSR;
 800b400:	68da      	ldr	r2, [r3, #12]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 800b402:	4b46      	ldr	r3, [pc, #280]	; (800b51c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b404:	bf54      	ite	pl
 800b406:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b408:	ea49 0202 	orrmi.w	r2, r9, r2

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800b40c:	038c      	lsls	r4, r1, #14
        EXTI->FTSR = temp;
 800b40e:	60da      	str	r2, [r3, #12]
        temp = EXTI->EMR;
 800b410:	685a      	ldr	r2, [r3, #4]
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800b412:	4b42      	ldr	r3, [pc, #264]	; (800b51c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b414:	bf54      	ite	pl
 800b416:	4002      	andpl	r2, r0
          temp |= iocurrent;
 800b418:	ea49 0202 	orrmi.w	r2, r9, r2
        EXTI->EMR = temp;
 800b41c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800b41e:	03ca      	lsls	r2, r1, #15
        temp = EXTI->IMR;
 800b420:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800b422:	4a3e      	ldr	r2, [pc, #248]	; (800b51c <HAL_GPIO_Init+0x318>)
        temp &= ~((uint32_t)iocurrent);
 800b424:	bf54      	ite	pl
 800b426:	4003      	andpl	r3, r0
          temp |= iocurrent;
 800b428:	ea49 0303 	orrmi.w	r3, r9, r3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b42c:	2d10      	cmp	r5, #16
        EXTI->IMR = temp;
 800b42e:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b430:	f47f af4d 	bne.w	800b2ce <HAL_GPIO_Init+0xca>
      }
    }
  }
}
 800b434:	b005      	add	sp, #20
 800b436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b43a:	f8d8 000c 	ldr.w	r0, [r8, #12]
 800b43e:	2803      	cmp	r0, #3
 800b440:	d820      	bhi.n	800b484 <HAL_GPIO_Init+0x280>
        temp = GPIOx->OSPEEDR; 
 800b442:	006f      	lsls	r7, r5, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b444:	f04f 0b03 	mov.w	fp, #3
        temp |= (GPIO_Init->Speed << (position * 2));
 800b448:	fa00 fc07 	lsl.w	ip, r0, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b44c:	fa0b fb07 	lsl.w	fp, fp, r7
        temp = GPIOx->OSPEEDR; 
 800b450:	68b0      	ldr	r0, [r6, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b452:	ea20 000b 	bic.w	r0, r0, fp
 800b456:	ea6f 0b0b 	mvn.w	fp, fp
        temp |= (GPIO_Init->Speed << (position * 2));
 800b45a:	ea4c 0000 	orr.w	r0, ip, r0
        GPIOx->OSPEEDR = temp;
 800b45e:	60b0      	str	r0, [r6, #8]
        temp = GPIOx->OTYPER;
 800b460:	6870      	ldr	r0, [r6, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b462:	ea20 0004 	bic.w	r0, r0, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b466:	f3c1 1400 	ubfx	r4, r1, #4, #1
 800b46a:	40ac      	lsls	r4, r5
 800b46c:	4304      	orrs	r4, r0
        GPIOx->OTYPER = temp;
 800b46e:	6074      	str	r4, [r6, #4]
 800b470:	e745      	b.n	800b2fe <HAL_GPIO_Init+0xfa>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800b472:	21ce      	movs	r1, #206	; 0xce
 800b474:	4820      	ldr	r0, [pc, #128]	; (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b476:	f7f9 f9db 	bl	8004830 <assert_failed>
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800b47a:	e9d8 1001 	ldrd	r1, r0, [r8, #4]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b47e:	f001 0303 	and.w	r3, r1, #3
 800b482:	e743      	b.n	800b30c <HAL_GPIO_Init+0x108>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800b484:	21bd      	movs	r1, #189	; 0xbd
 800b486:	481c      	ldr	r0, [pc, #112]	; (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b488:	f7f9 f9d2 	bl	8004830 <assert_failed>
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b48c:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= (GPIO_Init->Speed << (position * 2));
 800b490:	f8d8 000c 	ldr.w	r0, [r8, #12]
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b494:	f001 0303 	and.w	r3, r1, #3
 800b498:	e7d3      	b.n	800b442 <HAL_GPIO_Init+0x23e>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b49a:	2001      	movs	r0, #1
 800b49c:	fa00 f404 	lsl.w	r4, r0, r4
 800b4a0:	4323      	orrs	r3, r4
 800b4a2:	e79f      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b4a4:	2002      	movs	r0, #2
 800b4a6:	fa00 f404 	lsl.w	r4, r0, r4
 800b4aa:	4323      	orrs	r3, r4
 800b4ac:	e79a      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800b4ae:	21ab      	movs	r1, #171	; 0xab
 800b4b0:	4811      	ldr	r0, [pc, #68]	; (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b4b2:	f7f9 f9bd 	bl	8004830 <assert_failed>
 800b4b6:	e6e0      	b.n	800b27a <HAL_GPIO_Init+0x76>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800b4b8:	21db      	movs	r1, #219	; 0xdb
 800b4ba:	480f      	ldr	r0, [pc, #60]	; (800b4f8 <HAL_GPIO_Init+0x2f4>)
 800b4bc:	f7f9 f9b8 	bl	8004830 <assert_failed>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b4c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800b4c4:	f8d8 0010 	ldr.w	r0, [r8, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800b4c8:	f001 0303 	and.w	r3, r1, #3
 800b4cc:	e72c      	b.n	800b328 <HAL_GPIO_Init+0x124>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b4ce:	2003      	movs	r0, #3
 800b4d0:	fa00 f404 	lsl.w	r4, r0, r4
 800b4d4:	4323      	orrs	r3, r4
 800b4d6:	e785      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b4d8:	2004      	movs	r0, #4
 800b4da:	fa00 f404 	lsl.w	r4, r0, r4
 800b4de:	4323      	orrs	r3, r4
 800b4e0:	e780      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b4e2:	2007      	movs	r0, #7
 800b4e4:	fa00 f404 	lsl.w	r4, r0, r4
 800b4e8:	4323      	orrs	r3, r4
 800b4ea:	e77b      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b4ec:	40020400 	.word	0x40020400
 800b4f0:	40020000 	.word	0x40020000
 800b4f4:	40020800 	.word	0x40020800
 800b4f8:	0802c3d0 	.word	0x0802c3d0
 800b4fc:	40013800 	.word	0x40013800
 800b500:	40020c00 	.word	0x40020c00
 800b504:	40021000 	.word	0x40021000
 800b508:	40021400 	.word	0x40021400
 800b50c:	40021800 	.word	0x40021800
 800b510:	40021c00 	.word	0x40021c00
 800b514:	40022000 	.word	0x40022000
 800b518:	40022400 	.word	0x40022400
 800b51c:	40013c00 	.word	0x40013c00
 800b520:	40023800 	.word	0x40023800
 800b524:	2005      	movs	r0, #5
 800b526:	fa00 f404 	lsl.w	r4, r0, r4
 800b52a:	4323      	orrs	r3, r4
 800b52c:	e75a      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b52e:	2006      	movs	r0, #6
 800b530:	fa00 f404 	lsl.w	r4, r0, r4
 800b534:	4323      	orrs	r3, r4
 800b536:	e755      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800b538:	21ac      	movs	r1, #172	; 0xac
 800b53a:	4804      	ldr	r0, [pc, #16]	; (800b54c <HAL_GPIO_Init+0x348>)
 800b53c:	f7f9 f978 	bl	8004830 <assert_failed>
 800b540:	e6bc      	b.n	800b2bc <HAL_GPIO_Init+0xb8>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800b542:	2008      	movs	r0, #8
 800b544:	fa00 f404 	lsl.w	r4, r0, r4
 800b548:	4323      	orrs	r3, r4
 800b54a:	e74b      	b.n	800b3e4 <HAL_GPIO_Init+0x1e0>
 800b54c:	0802c3d0 	.word	0x0802c3d0

0800b550 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b550:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00;
  uint32_t iocurrent = 0x00;
  uint32_t tmp = 0x00;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b554:	4f6b      	ldr	r7, [pc, #428]	; (800b704 <HAL_GPIO_DeInit+0x1b4>)
{
 800b556:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b558:	4b6b      	ldr	r3, [pc, #428]	; (800b708 <HAL_GPIO_DeInit+0x1b8>)
{
 800b55a:	460d      	mov	r5, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800b55c:	42b8      	cmp	r0, r7
 800b55e:	bf18      	it	ne
 800b560:	4298      	cmpne	r0, r3
 800b562:	bf14      	ite	ne
 800b564:	2701      	movne	r7, #1
 800b566:	2700      	moveq	r7, #0
 800b568:	d027      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b56a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b56e:	4298      	cmp	r0, r3
 800b570:	d023      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b572:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b576:	4298      	cmp	r0, r3
 800b578:	d01f      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b57a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b57e:	4298      	cmp	r0, r3
 800b580:	d01b      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b582:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b586:	4298      	cmp	r0, r3
 800b588:	d017      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b58a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b58e:	4298      	cmp	r0, r3
 800b590:	d013      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b592:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b596:	4298      	cmp	r0, r3
 800b598:	d00f      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b59a:	4a5c      	ldr	r2, [pc, #368]	; (800b70c <HAL_GPIO_DeInit+0x1bc>)
 800b59c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5a0:	4290      	cmp	r0, r2
 800b5a2:	bf18      	it	ne
 800b5a4:	4298      	cmpne	r0, r3
 800b5a6:	d008      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b5a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b5ac:	4298      	cmp	r0, r3
 800b5ae:	d004      	beq.n	800b5ba <HAL_GPIO_DeInit+0x6a>
 800b5b0:	f240 112b 	movw	r1, #299	; 0x12b
 800b5b4:	4856      	ldr	r0, [pc, #344]	; (800b710 <HAL_GPIO_DeInit+0x1c0>)
 800b5b6:	f7f9 f93b 	bl	8004830 <assert_failed>
{
 800b5ba:	2300      	movs	r3, #0
 800b5bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800b730 <HAL_GPIO_DeInit+0x1e0>
    if(iocurrent == ioposition)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b5c0:	f8df a140 	ldr.w	sl, [pc, #320]	; 800b704 <HAL_GPIO_DeInit+0x1b4>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b5c4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800b734 <HAL_GPIO_DeInit+0x1e4>
 800b5c8:	e002      	b.n	800b5d0 <HAL_GPIO_DeInit+0x80>
  for(position = 0; position < GPIO_NUMBER; position++)
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	2b10      	cmp	r3, #16
 800b5ce:	d07b      	beq.n	800b6c8 <HAL_GPIO_DeInit+0x178>
    ioposition = ((uint32_t)0x01) << position;
 800b5d0:	2001      	movs	r0, #1
 800b5d2:	fa00 f203 	lsl.w	r2, r0, r3
    if(iocurrent == ioposition)
 800b5d6:	ea32 0105 	bics.w	r1, r2, r5
    iocurrent = (GPIO_Pin) & ioposition;
 800b5da:	ea02 0e05 	and.w	lr, r2, r5
    if(iocurrent == ioposition)
 800b5de:	d1f4      	bne.n	800b5ca <HAL_GPIO_DeInit+0x7a>
      tmp = SYSCFG->EXTICR[position >> 2];
 800b5e0:	f023 0603 	bic.w	r6, r3, #3
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b5e4:	f003 0103 	and.w	r1, r3, #3
 800b5e8:	f04f 0c0f 	mov.w	ip, #15
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b5ec:	4554      	cmp	r4, sl
 800b5ee:	445e      	add	r6, fp
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b5f0:	ea4f 0181 	mov.w	r1, r1, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2];
 800b5f4:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800b5f8:	fa0c fc01 	lsl.w	ip, ip, r1
 800b5fc:	ea0c 0808 	and.w	r8, ip, r8
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b600:	d01e      	beq.n	800b640 <HAL_GPIO_DeInit+0xf0>
 800b602:	2f00      	cmp	r7, #0
 800b604:	d063      	beq.n	800b6ce <HAL_GPIO_DeInit+0x17e>
 800b606:	4843      	ldr	r0, [pc, #268]	; (800b714 <HAL_GPIO_DeInit+0x1c4>)
 800b608:	4284      	cmp	r4, r0
 800b60a:	d063      	beq.n	800b6d4 <HAL_GPIO_DeInit+0x184>
 800b60c:	4842      	ldr	r0, [pc, #264]	; (800b718 <HAL_GPIO_DeInit+0x1c8>)
 800b60e:	4284      	cmp	r4, r0
 800b610:	d064      	beq.n	800b6dc <HAL_GPIO_DeInit+0x18c>
 800b612:	4842      	ldr	r0, [pc, #264]	; (800b71c <HAL_GPIO_DeInit+0x1cc>)
 800b614:	4284      	cmp	r4, r0
 800b616:	d065      	beq.n	800b6e4 <HAL_GPIO_DeInit+0x194>
 800b618:	4841      	ldr	r0, [pc, #260]	; (800b720 <HAL_GPIO_DeInit+0x1d0>)
 800b61a:	4284      	cmp	r4, r0
 800b61c:	d066      	beq.n	800b6ec <HAL_GPIO_DeInit+0x19c>
 800b61e:	4841      	ldr	r0, [pc, #260]	; (800b724 <HAL_GPIO_DeInit+0x1d4>)
 800b620:	4284      	cmp	r4, r0
 800b622:	d053      	beq.n	800b6cc <HAL_GPIO_DeInit+0x17c>
 800b624:	4840      	ldr	r0, [pc, #256]	; (800b728 <HAL_GPIO_DeInit+0x1d8>)
 800b626:	4284      	cmp	r4, r0
 800b628:	d064      	beq.n	800b6f4 <HAL_GPIO_DeInit+0x1a4>
 800b62a:	4838      	ldr	r0, [pc, #224]	; (800b70c <HAL_GPIO_DeInit+0x1bc>)
 800b62c:	4284      	cmp	r4, r0
 800b62e:	d065      	beq.n	800b6fc <HAL_GPIO_DeInit+0x1ac>
 800b630:	483e      	ldr	r0, [pc, #248]	; (800b72c <HAL_GPIO_DeInit+0x1dc>)
 800b632:	4284      	cmp	r4, r0
 800b634:	bf14      	ite	ne
 800b636:	200a      	movne	r0, #10
 800b638:	2009      	moveq	r0, #9
 800b63a:	fa00 f101 	lsl.w	r1, r0, r1
 800b63e:	e000      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b640:	2100      	movs	r1, #0
 800b642:	4588      	cmp	r8, r1
 800b644:	d11b      	bne.n	800b67e <HAL_GPIO_DeInit+0x12e>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b646:	f8d9 1000 	ldr.w	r1, [r9]
 800b64a:	ea21 010e 	bic.w	r1, r1, lr
 800b64e:	f8c9 1000 	str.w	r1, [r9]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b652:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b656:	ea21 010e 	bic.w	r1, r1, lr
 800b65a:	f8c9 1004 	str.w	r1, [r9, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b65e:	f8d9 100c 	ldr.w	r1, [r9, #12]
 800b662:	ea21 010e 	bic.w	r1, r1, lr
 800b666:	f8c9 100c 	str.w	r1, [r9, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b66a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800b66e:	ea21 010e 	bic.w	r1, r1, lr
 800b672:	f8c9 1008 	str.w	r1, [r9, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 800b676:	68b1      	ldr	r1, [r6, #8]
 800b678:	ea21 010c 	bic.w	r1, r1, ip
 800b67c:	60b1      	str	r1, [r6, #8]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b67e:	0059      	lsls	r1, r3, #1
 800b680:	2003      	movs	r0, #3

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b682:	f003 0c07 	and.w	ip, r3, #7
 800b686:	260f      	movs	r6, #15
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b688:	fa00 f101 	lsl.w	r1, r0, r1
 800b68c:	6820      	ldr	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b68e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b692:	ea20 0001 	bic.w	r0, r0, r1
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b696:	fa06 fc0c 	lsl.w	ip, r6, ip
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800b69a:	6020      	str	r0, [r4, #0]
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b69c:	08d8      	lsrs	r0, r3, #3
  for(position = 0; position < GPIO_NUMBER; position++)
 800b69e:	3301      	adds	r3, #1
 800b6a0:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800b6a4:	2b10      	cmp	r3, #16
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800b6a6:	6a06      	ldr	r6, [r0, #32]
 800b6a8:	ea26 060c 	bic.w	r6, r6, ip
 800b6ac:	6206      	str	r6, [r0, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800b6ae:	68e0      	ldr	r0, [r4, #12]
 800b6b0:	ea20 0001 	bic.w	r0, r0, r1
 800b6b4:	60e0      	str	r0, [r4, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b6b6:	6860      	ldr	r0, [r4, #4]
 800b6b8:	ea20 0202 	bic.w	r2, r0, r2
 800b6bc:	6062      	str	r2, [r4, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800b6be:	68a2      	ldr	r2, [r4, #8]
 800b6c0:	ea22 0101 	bic.w	r1, r2, r1
 800b6c4:	60a1      	str	r1, [r4, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800b6c6:	d183      	bne.n	800b5d0 <HAL_GPIO_DeInit+0x80>
    }
  }
}
 800b6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800b6cc:	2006      	movs	r0, #6
 800b6ce:	fa00 f101 	lsl.w	r1, r0, r1
 800b6d2:	e7b6      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6d4:	2002      	movs	r0, #2
 800b6d6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6da:	e7b2      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6dc:	2003      	movs	r0, #3
 800b6de:	fa00 f101 	lsl.w	r1, r0, r1
 800b6e2:	e7ae      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6e4:	2004      	movs	r0, #4
 800b6e6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6ea:	e7aa      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6ec:	2005      	movs	r0, #5
 800b6ee:	fa00 f101 	lsl.w	r1, r0, r1
 800b6f2:	e7a6      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6f4:	2007      	movs	r0, #7
 800b6f6:	fa00 f101 	lsl.w	r1, r0, r1
 800b6fa:	e7a2      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b6fc:	2008      	movs	r0, #8
 800b6fe:	fa00 f101 	lsl.w	r1, r0, r1
 800b702:	e79e      	b.n	800b642 <HAL_GPIO_DeInit+0xf2>
 800b704:	40020000 	.word	0x40020000
 800b708:	40020400 	.word	0x40020400
 800b70c:	40022000 	.word	0x40022000
 800b710:	0802c3d0 	.word	0x0802c3d0
 800b714:	40020800 	.word	0x40020800
 800b718:	40020c00 	.word	0x40020c00
 800b71c:	40021000 	.word	0x40021000
 800b720:	40021400 	.word	0x40021400
 800b724:	40021800 	.word	0x40021800
 800b728:	40021c00 	.word	0x40021c00
 800b72c:	40022400 	.word	0x40022400
 800b730:	40013800 	.word	0x40013800
 800b734:	40013c00 	.word	0x40013c00

0800b738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	4605      	mov	r5, r0
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b73c:	460c      	mov	r4, r1
 800b73e:	b129      	cbz	r1, 800b74c <HAL_GPIO_ReadPin+0x14>

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800b740:	692b      	ldr	r3, [r5, #16]
 800b742:	421c      	tst	r4, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800b744:	bf14      	ite	ne
 800b746:	2001      	movne	r0, #1
 800b748:	2000      	moveq	r0, #0
 800b74a:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b74c:	f240 1177 	movw	r1, #375	; 0x177
 800b750:	4801      	ldr	r0, [pc, #4]	; (800b758 <HAL_GPIO_ReadPin+0x20>)
 800b752:	f7f9 f86d 	bl	8004830 <assert_failed>
 800b756:	e7f3      	b.n	800b740 <HAL_GPIO_ReadPin+0x8>
 800b758:	0802c3d0 	.word	0x0802c3d0

0800b75c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b75c:	b570      	push	{r4, r5, r6, lr}
 800b75e:	4606      	mov	r6, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b760:	460c      	mov	r4, r1
{
 800b762:	4615      	mov	r5, r2
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b764:	b161      	cbz	r1, 800b780 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b766:	2d01      	cmp	r5, #1
 800b768:	d803      	bhi.n	800b772 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 800b76a:	b905      	cbnz	r5, 800b76e <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b76c:	0424      	lsls	r4, r4, #16
 800b76e:	61b4      	str	r4, [r6, #24]
  }
}
 800b770:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800b772:	f44f 71cc 	mov.w	r1, #408	; 0x198
 800b776:	4805      	ldr	r0, [pc, #20]	; (800b78c <HAL_GPIO_WritePin+0x30>)
 800b778:	f7f9 f85a 	bl	8004830 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800b77c:	61b4      	str	r4, [r6, #24]
}
 800b77e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b780:	f240 1197 	movw	r1, #407	; 0x197
 800b784:	4801      	ldr	r0, [pc, #4]	; (800b78c <HAL_GPIO_WritePin+0x30>)
 800b786:	f7f9 f853 	bl	8004830 <assert_failed>
 800b78a:	e7ec      	b.n	800b766 <HAL_GPIO_WritePin+0xa>
 800b78c:	0802c3d0 	.word	0x0802c3d0

0800b790 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800b790:	b538      	push	{r3, r4, r5, lr}
 800b792:	4605      	mov	r5, r0
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b794:	460c      	mov	r4, r1
 800b796:	b141      	cbz	r1, 800b7aa <HAL_GPIO_TogglePin+0x1a>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800b798:	6969      	ldr	r1, [r5, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800b79a:	ea04 0301 	and.w	r3, r4, r1
 800b79e:	ea24 0401 	bic.w	r4, r4, r1
 800b7a2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800b7a6:	61ac      	str	r4, [r5, #24]
}
 800b7a8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800b7aa:	f240 11af 	movw	r1, #431	; 0x1af
 800b7ae:	4802      	ldr	r0, [pc, #8]	; (800b7b8 <HAL_GPIO_TogglePin+0x28>)
 800b7b0:	f7f9 f83e 	bl	8004830 <assert_failed>
 800b7b4:	e7f0      	b.n	800b798 <HAL_GPIO_TogglePin+0x8>
 800b7b6:	bf00      	nop
 800b7b8:	0802c3d0 	.word	0x0802c3d0

0800b7bc <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800b7bc:	4770      	bx	lr
 800b7be:	bf00      	nop

0800b7c0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800b7c0:	4a04      	ldr	r2, [pc, #16]	; (800b7d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800b7c2:	6951      	ldr	r1, [r2, #20]
 800b7c4:	4201      	tst	r1, r0
 800b7c6:	d100      	bne.n	800b7ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 800b7c8:	4770      	bx	lr
{
 800b7ca:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800b7cc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800b7ce:	f7ff fff5 	bl	800b7bc <HAL_GPIO_EXTI_Callback>
}
 800b7d2:	bd08      	pop	{r3, pc}
 800b7d4:	40013c00 	.word	0x40013c00

0800b7d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7dc:	460d      	mov	r5, r1
 800b7de:	4614      	mov	r4, r2
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7e0:	4926      	ldr	r1, [pc, #152]	; (800b87c <I2C_TransferConfig+0xa4>)
{
 800b7e2:	461e      	mov	r6, r3
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7e4:	4a26      	ldr	r2, [pc, #152]	; (800b880 <I2C_TransferConfig+0xa8>)
{
 800b7e6:	4680      	mov	r8, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7e8:	6803      	ldr	r3, [r0, #0]
{
 800b7ea:	9f06      	ldr	r7, [sp, #24]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b7ec:	4293      	cmp	r3, r2
 800b7ee:	bf18      	it	ne
 800b7f0:	428b      	cmpne	r3, r1
 800b7f2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b7f6:	bf14      	ite	ne
 800b7f8:	2201      	movne	r2, #1
 800b7fa:	2200      	moveq	r2, #0
 800b7fc:	428b      	cmp	r3, r1
 800b7fe:	bf0c      	ite	eq
 800b800:	2200      	moveq	r2, #0
 800b802:	f002 0201 	andne.w	r2, r2, #1
 800b806:	b112      	cbz	r2, 800b80e <I2C_TransferConfig+0x36>
 800b808:	4a1e      	ldr	r2, [pc, #120]	; (800b884 <I2C_TransferConfig+0xac>)
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d123      	bne.n	800b856 <I2C_TransferConfig+0x7e>
  assert_param(IS_TRANSFER_MODE(Mode));
 800b80e:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b812:	d002      	beq.n	800b81a <I2C_TransferConfig+0x42>
 800b814:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b818:	d129      	bne.n	800b86e <I2C_TransferConfig+0x96>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800b81a:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <I2C_TransferConfig+0xb0>)
 800b81c:	429f      	cmp	r7, r3
 800b81e:	d005      	beq.n	800b82c <I2C_TransferConfig+0x54>
 800b820:	f427 6380 	bic.w	r3, r7, #1024	; 0x400
 800b824:	4a19      	ldr	r2, [pc, #100]	; (800b88c <I2C_TransferConfig+0xb4>)
 800b826:	4293      	cmp	r3, r2
 800b828:	d000      	beq.n	800b82c <I2C_TransferConfig+0x54>
 800b82a:	b9d7      	cbnz	r7, 800b862 <I2C_TransferConfig+0x8a>

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b82c:	ea47 4204 	orr.w	r2, r7, r4, lsl #16
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b830:	f8d8 1000 	ldr.w	r1, [r8]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b834:	f3c5 0309 	ubfx	r3, r5, #0, #10
 800b838:	ea42 0406 	orr.w	r4, r2, r6
  MODIFY_REG(hi2c->Instance->CR2, \
 800b83c:	4a14      	ldr	r2, [pc, #80]	; (800b890 <I2C_TransferConfig+0xb8>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b83e:	4323      	orrs	r3, r4
  MODIFY_REG(hi2c->Instance->CR2, \
 800b840:	ea42 5257 	orr.w	r2, r2, r7, lsr #21
 800b844:	684f      	ldr	r7, [r1, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b846:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 800b84a:	ea27 0702 	bic.w	r7, r7, r2
 800b84e:	433b      	orrs	r3, r7
 800b850:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b852:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800b856:	f641 213a 	movw	r1, #6714	; 0x1a3a
 800b85a:	480e      	ldr	r0, [pc, #56]	; (800b894 <I2C_TransferConfig+0xbc>)
 800b85c:	f7f8 ffe8 	bl	8004830 <assert_failed>
 800b860:	e7d5      	b.n	800b80e <I2C_TransferConfig+0x36>
  assert_param(IS_TRANSFER_REQUEST(Request));
 800b862:	f641 213c 	movw	r1, #6716	; 0x1a3c
 800b866:	480b      	ldr	r0, [pc, #44]	; (800b894 <I2C_TransferConfig+0xbc>)
 800b868:	f7f8 ffe2 	bl	8004830 <assert_failed>
 800b86c:	e7de      	b.n	800b82c <I2C_TransferConfig+0x54>
  assert_param(IS_TRANSFER_MODE(Mode));
 800b86e:	f641 213b 	movw	r1, #6715	; 0x1a3b
 800b872:	4808      	ldr	r0, [pc, #32]	; (800b894 <I2C_TransferConfig+0xbc>)
 800b874:	f7f8 ffdc 	bl	8004830 <assert_failed>
 800b878:	e7cf      	b.n	800b81a <I2C_TransferConfig+0x42>
 800b87a:	bf00      	nop
 800b87c:	40005800 	.word	0x40005800
 800b880:	40005400 	.word	0x40005400
 800b884:	40006000 	.word	0x40006000
 800b888:	80004000 	.word	0x80004000
 800b88c:	80002000 	.word	0x80002000
 800b890:	03ff63ff 	.word	0x03ff63ff
 800b894:	0802c40c 	.word	0x0802c40c

0800b898 <I2C_IsErrorOccurred>:
{
 800b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 800b89c:	6803      	ldr	r3, [r0, #0]
{
 800b89e:	460d      	mov	r5, r1
 800b8a0:	4604      	mov	r4, r0
  uint32_t itflag   = hi2c->Instance->ISR;
 800b8a2:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b8a4:	f011 0110 	ands.w	r1, r1, #16
 800b8a8:	d045      	beq.n	800b936 <I2C_IsErrorOccurred+0x9e>
 800b8aa:	4617      	mov	r7, r2
  HAL_StatusTypeDef status = HAL_OK;
 800b8ac:	f04f 0900 	mov.w	r9, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8b0:	2210      	movs	r2, #16
              hi2c->State = HAL_I2C_STATE_READY;
 800b8b2:	f04f 0820 	mov.w	r8, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b8b6:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b8b8:	699a      	ldr	r2, [r3, #24]
 800b8ba:	0696      	lsls	r6, r2, #26
 800b8bc:	f100 808d 	bmi.w	800b9da <I2C_IsErrorOccurred+0x142>
 800b8c0:	f1b9 0f00 	cmp.w	r9, #0
 800b8c4:	f040 808d 	bne.w	800b9e2 <I2C_IsErrorOccurred+0x14a>
      if (Timeout != HAL_MAX_DELAY)
 800b8c8:	1c6a      	adds	r2, r5, #1
 800b8ca:	d152      	bne.n	800b972 <I2C_IsErrorOccurred+0xda>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b8cc:	699a      	ldr	r2, [r3, #24]
 800b8ce:	0697      	lsls	r7, r2, #26
 800b8d0:	d5fc      	bpl.n	800b8cc <I2C_IsErrorOccurred+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8d2:	2220      	movs	r2, #32
    error_code |= HAL_I2C_ERROR_AF;
 800b8d4:	2104      	movs	r1, #4
    status = HAL_ERROR;
 800b8d6:	f04f 0901 	mov.w	r9, #1
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b8da:	61da      	str	r2, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800b8dc:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b8de:	05d5      	lsls	r5, r2, #23
 800b8e0:	d42d      	bmi.n	800b93e <I2C_IsErrorOccurred+0xa6>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b8e2:	0557      	lsls	r7, r2, #21
 800b8e4:	d53d      	bpl.n	800b962 <I2C_IsErrorOccurred+0xca>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b8e6:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b8ea:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b8ee:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b8f0:	0596      	lsls	r6, r2, #22
 800b8f2:	d504      	bpl.n	800b8fe <I2C_IsErrorOccurred+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b8f4:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800b8f8:	f041 0102 	orr.w	r1, r1, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b8fc:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b8fe:	699a      	ldr	r2, [r3, #24]
 800b900:	0790      	lsls	r0, r2, #30
 800b902:	d501      	bpl.n	800b908 <I2C_IsErrorOccurred+0x70>
    hi2c->Instance->TXDR = 0x00U;
 800b904:	2200      	movs	r2, #0
 800b906:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b908:	699a      	ldr	r2, [r3, #24]
 800b90a:	07d2      	lsls	r2, r2, #31
 800b90c:	d524      	bpl.n	800b958 <I2C_IsErrorOccurred+0xc0>
    I2C_RESET_CR2(hi2c);
 800b90e:	685a      	ldr	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b910:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800b912:	4835      	ldr	r0, [pc, #212]	; (800b9e8 <I2C_IsErrorOccurred+0x150>)
    __HAL_UNLOCK(hi2c);
 800b914:	f04f 0901 	mov.w	r9, #1
    I2C_RESET_CR2(hi2c);
 800b918:	4002      	ands	r2, r0
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b91a:	2000      	movs	r0, #0
    I2C_RESET_CR2(hi2c);
 800b91c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800b91e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800b920:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800b924:	4319      	orrs	r1, r3
 800b926:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b928:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b92c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 800b930:	4648      	mov	r0, r9
 800b932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800b936:	4689      	mov	r9, r1
  itflag = hi2c->Instance->ISR;
 800b938:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b93a:	05d5      	lsls	r5, r2, #23
 800b93c:	d5d1      	bpl.n	800b8e2 <I2C_IsErrorOccurred+0x4a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b93e:	f44f 7080 	mov.w	r0, #256	; 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 800b942:	f041 0101 	orr.w	r1, r1, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b946:	61d8      	str	r0, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b948:	0550      	lsls	r0, r2, #21
 800b94a:	d5d1      	bpl.n	800b8f0 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b94c:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800b950:	f041 0108 	orr.w	r1, r1, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b954:	61d8      	str	r0, [r3, #28]
 800b956:	e7cb      	b.n	800b8f0 <I2C_IsErrorOccurred+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b958:	699a      	ldr	r2, [r3, #24]
 800b95a:	f042 0201 	orr.w	r2, r2, #1
 800b95e:	619a      	str	r2, [r3, #24]
 800b960:	e7d5      	b.n	800b90e <I2C_IsErrorOccurred+0x76>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b962:	0595      	lsls	r5, r2, #22
 800b964:	d4c6      	bmi.n	800b8f4 <I2C_IsErrorOccurred+0x5c>
  if (status != HAL_OK)
 800b966:	f1b9 0f00 	cmp.w	r9, #0
 800b96a:	d1c8      	bne.n	800b8fe <I2C_IsErrorOccurred+0x66>
}
 800b96c:	4648      	mov	r0, r9
 800b96e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b972:	f7fc f971 	bl	8007c58 <HAL_GetTick>
 800b976:	1bc0      	subs	r0, r0, r7
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b978:	6823      	ldr	r3, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b97a:	42a8      	cmp	r0, r5
 800b97c:	d801      	bhi.n	800b982 <I2C_IsErrorOccurred+0xea>
 800b97e:	2d00      	cmp	r5, #0
 800b980:	d19a      	bne.n	800b8b8 <I2C_IsErrorOccurred+0x20>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b982:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800b984:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b988:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800b98a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b98c:	040e      	lsls	r6, r1, #16
 800b98e:	d50d      	bpl.n	800b9ac <I2C_IsErrorOccurred+0x114>
              (tmp1 != I2C_CR2_STOP) && \
 800b990:	0441      	lsls	r1, r0, #17
 800b992:	d40b      	bmi.n	800b9ac <I2C_IsErrorOccurred+0x114>
 800b994:	2a20      	cmp	r2, #32
 800b996:	d009      	beq.n	800b9ac <I2C_IsErrorOccurred+0x114>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b998:	685a      	ldr	r2, [r3, #4]
 800b99a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b99e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b9a0:	f7fc f95a 	bl	8007c58 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9a4:	6823      	ldr	r3, [r4, #0]
            tickstart = HAL_GetTick();
 800b9a6:	4607      	mov	r7, r0
 800b9a8:	e000      	b.n	800b9ac <I2C_IsErrorOccurred+0x114>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	699e      	ldr	r6, [r3, #24]
 800b9ae:	f016 0620 	ands.w	r6, r6, #32
 800b9b2:	d181      	bne.n	800b8b8 <I2C_IsErrorOccurred+0x20>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b9b4:	f7fc f950 	bl	8007c58 <HAL_GetTick>
 800b9b8:	1bc0      	subs	r0, r0, r7
 800b9ba:	2819      	cmp	r0, #25
 800b9bc:	d9f5      	bls.n	800b9aa <I2C_IsErrorOccurred+0x112>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9be:	6c63      	ldr	r3, [r4, #68]	; 0x44
              status = HAL_ERROR;
 800b9c0:	f04f 0901 	mov.w	r9, #1
              __HAL_UNLOCK(hi2c);
 800b9c4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b9c8:	f043 0320 	orr.w	r3, r3, #32
 800b9cc:	6463      	str	r3, [r4, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b9ce:	f884 8041 	strb.w	r8, [r4, #65]	; 0x41
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9d2:	6823      	ldr	r3, [r4, #0]
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b9d4:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
              status = HAL_ERROR;
 800b9d8:	e7e8      	b.n	800b9ac <I2C_IsErrorOccurred+0x114>
    if (status == HAL_OK)
 800b9da:	f1b9 0f00 	cmp.w	r9, #0
 800b9de:	f43f af78 	beq.w	800b8d2 <I2C_IsErrorOccurred+0x3a>
    error_code |= HAL_I2C_ERROR_AF;
 800b9e2:	2104      	movs	r1, #4
 800b9e4:	e7a8      	b.n	800b938 <I2C_IsErrorOccurred+0xa0>
 800b9e6:	bf00      	nop
 800b9e8:	fe00e800 	.word	0xfe00e800

0800b9ec <I2C_WaitOnTXISFlagUntilTimeout>:
{
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	460d      	mov	r5, r1
 800b9f2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b9f4:	e004      	b.n	800ba00 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b9f6:	f7ff ff4f 	bl	800b898 <I2C_IsErrorOccurred>
 800b9fa:	b950      	cbnz	r0, 800ba12 <I2C_WaitOnTXISFlagUntilTimeout+0x26>
    if (Timeout != HAL_MAX_DELAY)
 800b9fc:	1c6a      	adds	r2, r5, #1
 800b9fe:	d10a      	bne.n	800ba16 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba00:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba02:	4632      	mov	r2, r6
 800ba04:	4629      	mov	r1, r5
 800ba06:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	079b      	lsls	r3, r3, #30
 800ba0c:	d5f3      	bpl.n	800b9f6 <I2C_WaitOnTXISFlagUntilTimeout+0xa>
  return HAL_OK;
 800ba0e:	2000      	movs	r0, #0
}
 800ba10:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ba12:	2001      	movs	r0, #1
}
 800ba14:	bd70      	pop	{r4, r5, r6, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba16:	f7fc f91f 	bl	8007c58 <HAL_GetTick>
 800ba1a:	1b80      	subs	r0, r0, r6
 800ba1c:	42a8      	cmp	r0, r5
 800ba1e:	d801      	bhi.n	800ba24 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
 800ba20:	2d00      	cmp	r5, #0
 800ba22:	d1ed      	bne.n	800ba00 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba24:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba26:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba28:	2200      	movs	r2, #0
        return HAL_ERROR;
 800ba2a:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba2c:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ba2e:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba32:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba34:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba38:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800ba3c:	bd70      	pop	{r4, r5, r6, pc}
 800ba3e:	bf00      	nop

0800ba40 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 800ba40:	b570      	push	{r4, r5, r6, lr}
 800ba42:	4605      	mov	r5, r0
 800ba44:	460c      	mov	r4, r1
 800ba46:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba48:	e008      	b.n	800ba5c <I2C_WaitOnSTOPFlagUntilTimeout+0x1c>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba4a:	f7ff ff25 	bl	800b898 <I2C_IsErrorOccurred>
 800ba4e:	b9d8      	cbnz	r0, 800ba88 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba50:	f7fc f902 	bl	8007c58 <HAL_GetTick>
 800ba54:	1b80      	subs	r0, r0, r6
 800ba56:	42a0      	cmp	r0, r4
 800ba58:	d809      	bhi.n	800ba6e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 800ba5a:	b144      	cbz	r4, 800ba6e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba5c:	682b      	ldr	r3, [r5, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba5e:	4632      	mov	r2, r6
 800ba60:	4621      	mov	r1, r4
 800ba62:	4628      	mov	r0, r5
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ba64:	699b      	ldr	r3, [r3, #24]
 800ba66:	069b      	lsls	r3, r3, #26
 800ba68:	d5ef      	bpl.n	800ba4a <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
  return HAL_OK;
 800ba6a:	2000      	movs	r0, #0
}
 800ba6c:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba6e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba70:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba72:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 800ba74:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba76:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800ba78:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ba7c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800ba7e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba82:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800ba86:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800ba88:	2001      	movs	r0, #1
}
 800ba8a:	bd70      	pop	{r4, r5, r6, pc}

0800ba8c <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 800ba8c:	b570      	push	{r4, r5, r6, lr}
 800ba8e:	4604      	mov	r4, r0
 800ba90:	460d      	mov	r5, r1
 800ba92:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ba94:	e00c      	b.n	800bab0 <I2C_WaitOnRXNEFlagUntilTimeout+0x24>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800ba96:	f7ff feff 	bl	800b898 <I2C_IsErrorOccurred>
 800ba9a:	b9e8      	cbnz	r0, 800bad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ba9c:	6823      	ldr	r3, [r4, #0]
 800ba9e:	699a      	ldr	r2, [r3, #24]
 800baa0:	0691      	lsls	r1, r2, #26
 800baa2:	d41b      	bmi.n	800badc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800baa4:	f7fc f8d8 	bl	8007c58 <HAL_GetTick>
 800baa8:	1b80      	subs	r0, r0, r6
 800baaa:	42a8      	cmp	r0, r5
 800baac:	d809      	bhi.n	800bac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
 800baae:	b145      	cbz	r5, 800bac2 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bab0:	6823      	ldr	r3, [r4, #0]
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800bab2:	4632      	mov	r2, r6
 800bab4:	4629      	mov	r1, r5
 800bab6:	4620      	mov	r0, r4
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bab8:	699b      	ldr	r3, [r3, #24]
 800baba:	075b      	lsls	r3, r3, #29
 800babc:	d5eb      	bpl.n	800ba96 <I2C_WaitOnRXNEFlagUntilTimeout+0xa>
        return HAL_OK;
 800babe:	2000      	movs	r0, #0
}
 800bac0:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bac2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bac4:	2220      	movs	r2, #32
      __HAL_UNLOCK(hi2c);
 800bac6:	2100      	movs	r1, #0
      return HAL_ERROR;
 800bac8:	2001      	movs	r0, #1
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800baca:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 800bacc:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bad0:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800bad2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
}
 800bad6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800bad8:	2001      	movs	r0, #1
}
 800bada:	bd70      	pop	{r4, r5, r6, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800badc:	699a      	ldr	r2, [r3, #24]
 800bade:	0752      	lsls	r2, r2, #29
 800bae0:	d502      	bpl.n	800bae8 <I2C_WaitOnRXNEFlagUntilTimeout+0x5c>
 800bae2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800bae4:	2a00      	cmp	r2, #0
 800bae6:	d1ea      	bne.n	800babe <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bae8:	699a      	ldr	r2, [r3, #24]
 800baea:	f012 0210 	ands.w	r2, r2, #16
 800baee:	d012      	beq.n	800bb16 <I2C_WaitOnRXNEFlagUntilTimeout+0x8a>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baf0:	2110      	movs	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800baf2:	2204      	movs	r2, #4
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800baf4:	61d9      	str	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800baf6:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800baf8:	2520      	movs	r5, #32
        I2C_RESET_CR2(hi2c);
 800bafa:	4808      	ldr	r0, [pc, #32]	; (800bb1c <I2C_WaitOnRXNEFlagUntilTimeout+0x90>)
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bafc:	2100      	movs	r1, #0
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bafe:	61dd      	str	r5, [r3, #28]
        I2C_RESET_CR2(hi2c);
 800bb00:	685a      	ldr	r2, [r3, #4]
 800bb02:	4002      	ands	r2, r0
        return HAL_ERROR;
 800bb04:	2001      	movs	r0, #1
        I2C_RESET_CR2(hi2c);
 800bb06:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 800bb08:	f884 5041 	strb.w	r5, [r4, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 800bb0c:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb10:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
}
 800bb14:	bd70      	pop	{r4, r5, r6, pc}
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bb16:	6462      	str	r2, [r4, #68]	; 0x44
 800bb18:	e7ee      	b.n	800baf8 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
 800bb1a:	bf00      	nop
 800bb1c:	fe00e800 	.word	0xfe00e800

0800bb20 <I2C_RequestMemoryRead>:
{
 800bb20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb24:	4c26      	ldr	r4, [pc, #152]	; (800bbc0 <I2C_RequestMemoryRead+0xa0>)
{
 800bb26:	b083      	sub	sp, #12
 800bb28:	4698      	mov	r8, r3
 800bb2a:	4605      	mov	r5, r0
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb2c:	9400      	str	r4, [sp, #0]
{
 800bb2e:	4691      	mov	r9, r2
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb30:	2300      	movs	r3, #0
 800bb32:	fa5f f288 	uxtb.w	r2, r8
{
 800bb36:	e9dd 470a 	ldrd	r4, r7, [sp, #40]	; 0x28
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800bb3a:	f7ff fe4d 	bl	800b7d8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb3e:	4628      	mov	r0, r5
 800bb40:	463a      	mov	r2, r7
 800bb42:	4621      	mov	r1, r4
 800bb44:	f7ff ff52 	bl	800b9ec <I2C_WaitOnTXISFlagUntilTimeout>
 800bb48:	b9e0      	cbnz	r0, 800bb84 <I2C_RequestMemoryRead+0x64>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800bb4a:	f1b8 0f01 	cmp.w	r8, #1
 800bb4e:	4606      	mov	r6, r0
 800bb50:	d10d      	bne.n	800bb6e <I2C_RequestMemoryRead+0x4e>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800bb52:	fa5f f389 	uxtb.w	r3, r9
 800bb56:	682a      	ldr	r2, [r5, #0]
 800bb58:	6293      	str	r3, [r2, #40]	; 0x28
 800bb5a:	e001      	b.n	800bb60 <I2C_RequestMemoryRead+0x40>
    if (Timeout != HAL_MAX_DELAY)
 800bb5c:	1c61      	adds	r1, r4, #1
 800bb5e:	d116      	bne.n	800bb8e <I2C_RequestMemoryRead+0x6e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb60:	6993      	ldr	r3, [r2, #24]
 800bb62:	065b      	lsls	r3, r3, #25
 800bb64:	d5fa      	bpl.n	800bb5c <I2C_RequestMemoryRead+0x3c>
}
 800bb66:	4630      	mov	r0, r6
 800bb68:	b003      	add	sp, #12
 800bb6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb6e:	ea4f 2219 	mov.w	r2, r9, lsr #8
 800bb72:	682b      	ldr	r3, [r5, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb74:	4621      	mov	r1, r4
 800bb76:	4628      	mov	r0, r5
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800bb78:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800bb7a:	463a      	mov	r2, r7
 800bb7c:	f7ff ff36 	bl	800b9ec <I2C_WaitOnTXISFlagUntilTimeout>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d0e6      	beq.n	800bb52 <I2C_RequestMemoryRead+0x32>
    return HAL_ERROR;
 800bb84:	2601      	movs	r6, #1
}
 800bb86:	4630      	mov	r0, r6
 800bb88:	b003      	add	sp, #12
 800bb8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb8e:	f7fc f863 	bl	8007c58 <HAL_GetTick>
 800bb92:	1bc0      	subs	r0, r0, r7
 800bb94:	4284      	cmp	r4, r0
 800bb96:	d302      	bcc.n	800bb9e <I2C_RequestMemoryRead+0x7e>
 800bb98:	b10c      	cbz	r4, 800bb9e <I2C_RequestMemoryRead+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bb9a:	682a      	ldr	r2, [r5, #0]
 800bb9c:	e7e0      	b.n	800bb60 <I2C_RequestMemoryRead+0x40>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bb9e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bba0:	2120      	movs	r1, #32
    return HAL_ERROR;
 800bba2:	2601      	movs	r6, #1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bba4:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bba6:	430b      	orrs	r3, r1
}
 800bba8:	4630      	mov	r0, r6
        __HAL_UNLOCK(hi2c);
 800bbaa:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800bbae:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800bbb0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800bbb4:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800bbb8:	b003      	add	sp, #12
 800bbba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bbbe:	bf00      	nop
 800bbc0:	80002000 	.word	0x80002000

0800bbc4 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f000 80c1 	beq.w	800bd4c <HAL_I2C_Init+0x188>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bbca:	4b61      	ldr	r3, [pc, #388]	; (800bd50 <HAL_I2C_Init+0x18c>)
 800bbcc:	6802      	ldr	r2, [r0, #0]
 800bbce:	4961      	ldr	r1, [pc, #388]	; (800bd54 <HAL_I2C_Init+0x190>)
{
 800bbd0:	b510      	push	{r4, lr}
 800bbd2:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bbd4:	4860      	ldr	r0, [pc, #384]	; (800bd58 <HAL_I2C_Init+0x194>)
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	bf18      	it	ne
 800bbda:	4282      	cmpne	r2, r0
 800bbdc:	bf14      	ite	ne
 800bbde:	2301      	movne	r3, #1
 800bbe0:	2300      	moveq	r3, #0
 800bbe2:	428a      	cmp	r2, r1
 800bbe4:	bf0c      	ite	eq
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	f003 0301 	andne.w	r3, r3, #1
 800bbec:	b11b      	cbz	r3, 800bbf6 <HAL_I2C_Init+0x32>
 800bbee:	4b5b      	ldr	r3, [pc, #364]	; (800bd5c <HAL_I2C_Init+0x198>)
 800bbf0:	429a      	cmp	r2, r3
 800bbf2:	f040 80a5 	bne.w	800bd40 <HAL_I2C_Init+0x17c>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800bbf6:	68a3      	ldr	r3, [r4, #8]
 800bbf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bbfc:	f080 809a 	bcs.w	800bd34 <HAL_I2C_Init+0x170>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800bc00:	68e3      	ldr	r3, [r4, #12]
 800bc02:	3b01      	subs	r3, #1
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d855      	bhi.n	800bcb4 <HAL_I2C_Init+0xf0>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800bc08:	6923      	ldr	r3, [r4, #16]
 800bc0a:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800bc0e:	d15a      	bne.n	800bcc6 <HAL_I2C_Init+0x102>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800bc10:	6963      	ldr	r3, [r4, #20]
 800bc12:	2bff      	cmp	r3, #255	; 0xff
 800bc14:	d85f      	bhi.n	800bcd6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800bc16:	69a3      	ldr	r3, [r4, #24]
 800bc18:	2b07      	cmp	r3, #7
 800bc1a:	d864      	bhi.n	800bce6 <HAL_I2C_Init+0x122>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800bc1c:	69e3      	ldr	r3, [r4, #28]
 800bc1e:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800bc22:	d169      	bne.n	800bcf8 <HAL_I2C_Init+0x134>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800bc24:	6a23      	ldr	r3, [r4, #32]
 800bc26:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800bc2a:	d16e      	bne.n	800bd0a <HAL_I2C_Init+0x146>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bc2c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800bc30:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d073      	beq.n	800bd20 <HAL_I2C_Init+0x15c>
  __HAL_I2C_DISABLE(hi2c);
 800bc38:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc3a:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc3c:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800bc3e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800bc42:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc48:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 800bc4a:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc4e:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
 800bc50:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800bc52:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800bc54:	689a      	ldr	r2, [r3, #8]
 800bc56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800bc5a:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bc5c:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800bc5e:	d065      	beq.n	800bd2c <HAL_I2C_Init+0x168>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc60:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc64:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800bc66:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bc68:	d102      	bne.n	800bc70 <HAL_I2C_Init+0xac>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800bc6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bc6e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc70:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
 800bc72:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc76:	493a      	ldr	r1, [pc, #232]	; (800bd60 <HAL_I2C_Init+0x19c>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc78:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800bc7a:	4301      	orrs	r1, r0
 800bc7c:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800bc7e:	68d9      	ldr	r1, [r3, #12]
 800bc80:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 800bc84:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800bc86:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc8a:	4302      	orrs	r2, r0
 800bc8c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc90:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800bc94:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bc96:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc98:	4301      	orrs	r1, r0
  return HAL_OK;
 800bc9a:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800bc9c:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800bc9e:	6819      	ldr	r1, [r3, #0]
 800bca0:	f041 0101 	orr.w	r1, r1, #1
 800bca4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bca6:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800bca8:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800bcac:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bcae:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800bcb2:	bd10      	pop	{r4, pc}
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800bcb4:	f240 2117 	movw	r1, #535	; 0x217
 800bcb8:	482a      	ldr	r0, [pc, #168]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bcba:	f7f8 fdb9 	bl	8004830 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 800bcbe:	6923      	ldr	r3, [r4, #16]
 800bcc0:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 800bcc4:	d0a4      	beq.n	800bc10 <HAL_I2C_Init+0x4c>
 800bcc6:	f44f 7106 	mov.w	r1, #536	; 0x218
 800bcca:	4826      	ldr	r0, [pc, #152]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bccc:	f7f8 fdb0 	bl	8004830 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 800bcd0:	6963      	ldr	r3, [r4, #20]
 800bcd2:	2bff      	cmp	r3, #255	; 0xff
 800bcd4:	d99f      	bls.n	800bc16 <HAL_I2C_Init+0x52>
 800bcd6:	f240 2119 	movw	r1, #537	; 0x219
 800bcda:	4822      	ldr	r0, [pc, #136]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bcdc:	f7f8 fda8 	bl	8004830 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 800bce0:	69a3      	ldr	r3, [r4, #24]
 800bce2:	2b07      	cmp	r3, #7
 800bce4:	d99a      	bls.n	800bc1c <HAL_I2C_Init+0x58>
 800bce6:	f240 211a 	movw	r1, #538	; 0x21a
 800bcea:	481e      	ldr	r0, [pc, #120]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bcec:	f7f8 fda0 	bl	8004830 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 800bcf0:	69e3      	ldr	r3, [r4, #28]
 800bcf2:	f433 2300 	bics.w	r3, r3, #524288	; 0x80000
 800bcf6:	d095      	beq.n	800bc24 <HAL_I2C_Init+0x60>
 800bcf8:	f240 211b 	movw	r1, #539	; 0x21b
 800bcfc:	4819      	ldr	r0, [pc, #100]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bcfe:	f7f8 fd97 	bl	8004830 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 800bd02:	6a23      	ldr	r3, [r4, #32]
 800bd04:	f433 3300 	bics.w	r3, r3, #131072	; 0x20000
 800bd08:	d090      	beq.n	800bc2c <HAL_I2C_Init+0x68>
 800bd0a:	f44f 7107 	mov.w	r1, #540	; 0x21c
 800bd0e:	4815      	ldr	r0, [pc, #84]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bd10:	f7f8 fd8e 	bl	8004830 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800bd14:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800bd18:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d18b      	bne.n	800bc38 <HAL_I2C_Init+0x74>
    HAL_I2C_MspInit(hi2c);
 800bd20:	4620      	mov	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 800bd22:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800bd26:	f7fa f963 	bl	8005ff0 <HAL_I2C_MspInit>
 800bd2a:	e785      	b.n	800bc38 <HAL_I2C_Init+0x74>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800bd2c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800bd30:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800bd32:	e79d      	b.n	800bc70 <HAL_I2C_Init+0xac>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800bd34:	f240 2116 	movw	r1, #534	; 0x216
 800bd38:	480a      	ldr	r0, [pc, #40]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bd3a:	f7f8 fd79 	bl	8004830 <assert_failed>
 800bd3e:	e75f      	b.n	800bc00 <HAL_I2C_Init+0x3c>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800bd40:	f240 2115 	movw	r1, #533	; 0x215
 800bd44:	4807      	ldr	r0, [pc, #28]	; (800bd64 <HAL_I2C_Init+0x1a0>)
 800bd46:	f7f8 fd73 	bl	8004830 <assert_failed>
 800bd4a:	e754      	b.n	800bbf6 <HAL_I2C_Init+0x32>
    return HAL_ERROR;
 800bd4c:	2001      	movs	r0, #1
}
 800bd4e:	4770      	bx	lr
 800bd50:	40005400 	.word	0x40005400
 800bd54:	40005c00 	.word	0x40005c00
 800bd58:	40005800 	.word	0x40005800
 800bd5c:	40006000 	.word	0x40006000
 800bd60:	02008000 	.word	0x02008000
 800bd64:	0802c40c 	.word	0x0802c40c

0800bd68 <HAL_I2C_Master_Transmit>:
{
 800bd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bd6c:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd6e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bd72:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd74:	2b20      	cmp	r3, #32
{
 800bd76:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bd78:	d16d      	bne.n	800be56 <HAL_I2C_Master_Transmit+0xee>
    __HAL_LOCK(hi2c);
 800bd7a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bd7e:	4604      	mov	r4, r0
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d068      	beq.n	800be56 <HAL_I2C_Master_Transmit+0xee>
 800bd84:	2301      	movs	r3, #1
 800bd86:	460f      	mov	r7, r1
 800bd88:	4691      	mov	r9, r2
 800bd8a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bd8e:	f7fb ff63 	bl	8007c58 <HAL_GetTick>
 800bd92:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bd94:	e004      	b.n	800bda0 <HAL_I2C_Master_Transmit+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd96:	f7fb ff5f 	bl	8007c58 <HAL_GetTick>
 800bd9a:	1b80      	subs	r0, r0, r6
 800bd9c:	2819      	cmp	r0, #25
 800bd9e:	d85e      	bhi.n	800be5e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bda0:	6823      	ldr	r3, [r4, #0]
 800bda2:	6999      	ldr	r1, [r3, #24]
 800bda4:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800bda8:	d1f5      	bne.n	800bd96 <HAL_I2C_Master_Transmit+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bdaa:	2321      	movs	r3, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 800bdac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800bdb0:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800bdb2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bdb6:	2310      	movs	r3, #16
 800bdb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bdbc:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bdbe:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bdc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bdc4:	b29b      	uxth	r3, r3
 800bdc6:	2bff      	cmp	r3, #255	; 0xff
 800bdc8:	d86d      	bhi.n	800bea6 <HAL_I2C_Master_Transmit+0x13e>
      hi2c->XferSize = hi2c->XferCount;
 800bdca:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdcc:	4639      	mov	r1, r7
 800bdce:	4b48      	ldr	r3, [pc, #288]	; (800bef0 <HAL_I2C_Master_Transmit+0x188>)
 800bdd0:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800bdd2:	b292      	uxth	r2, r2
 800bdd4:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bdd6:	b2d2      	uxtb	r2, r2
 800bdd8:	9300      	str	r3, [sp, #0]
 800bdda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bdde:	f7ff fcfb 	bl	800b7d8 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bde2:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bde6:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bdea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdec:	4632      	mov	r2, r6
 800bdee:	4629      	mov	r1, r5
 800bdf0:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bdf2:	b29b      	uxth	r3, r3
 800bdf4:	b1eb      	cbz	r3, 800be32 <HAL_I2C_Master_Transmit+0xca>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bdf6:	f7ff fdf9 	bl	800b9ec <I2C_WaitOnTXISFlagUntilTimeout>
 800bdfa:	2800      	cmp	r0, #0
 800bdfc:	d174      	bne.n	800bee8 <HAL_I2C_Master_Transmit+0x180>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800bdfe:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be00:	6821      	ldr	r1, [r4, #0]
 800be02:	f810 2b01 	ldrb.w	r2, [r0], #1
      hi2c->XferSize--;
 800be06:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800be08:	628a      	str	r2, [r1, #40]	; 0x28
      hi2c->XferCount--;
 800be0a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800be0c:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800be0e:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 800be10:	3a01      	subs	r2, #1
      hi2c->XferSize--;
 800be12:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800be14:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800be16:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800be18:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800be1a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800be1c:	b292      	uxth	r2, r2
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d1e3      	bne.n	800bdea <HAL_I2C_Master_Transmit+0x82>
 800be22:	bb6a      	cbnz	r2, 800be80 <HAL_I2C_Master_Transmit+0x118>
    while (hi2c->XferCount > 0U)
 800be24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be26:	4632      	mov	r2, r6
 800be28:	4629      	mov	r1, r5
 800be2a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800be2c:	b29b      	uxth	r3, r3
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d1e1      	bne.n	800bdf6 <HAL_I2C_Master_Transmit+0x8e>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800be32:	f7ff fe05 	bl	800ba40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800be36:	2800      	cmp	r0, #0
 800be38:	d156      	bne.n	800bee8 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800be3e:	4d2d      	ldr	r5, [pc, #180]	; (800bef4 <HAL_I2C_Master_Transmit+0x18c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be40:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800be42:	685a      	ldr	r2, [r3, #4]
 800be44:	402a      	ands	r2, r5
 800be46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800be48:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800be4c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800be50:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800be54:	e000      	b.n	800be58 <HAL_I2C_Master_Transmit+0xf0>
    return HAL_BUSY;
 800be56:	2002      	movs	r0, #2
}
 800be58:	b003      	add	sp, #12
 800be5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be5e:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be60:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be62:	2200      	movs	r2, #0
          return HAL_ERROR;
 800be64:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be66:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800be68:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800be6c:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800be6e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800be72:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800be76:	b003      	add	sp, #12
 800be78:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800be7c:	1c6a      	adds	r2, r5, #1
 800be7e:	d11d      	bne.n	800bebc <HAL_I2C_Master_Transmit+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800be80:	698b      	ldr	r3, [r1, #24]
 800be82:	061b      	lsls	r3, r3, #24
 800be84:	d5fa      	bpl.n	800be7c <HAL_I2C_Master_Transmit+0x114>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800be86:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800be88:	b29b      	uxth	r3, r3
 800be8a:	2bff      	cmp	r3, #255	; 0xff
 800be8c:	d91f      	bls.n	800bece <HAL_I2C_Master_Transmit+0x166>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800be8e:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800be92:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800be96:	22ff      	movs	r2, #255	; 0xff
 800be98:	4639      	mov	r1, r7
 800be9a:	4620      	mov	r0, r4
 800be9c:	f8cd 8000 	str.w	r8, [sp]
 800bea0:	f7ff fc9a 	bl	800b7d8 <I2C_TransferConfig>
 800bea4:	e7a1      	b.n	800bdea <HAL_I2C_Master_Transmit+0x82>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bea6:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bea8:	4b11      	ldr	r3, [pc, #68]	; (800bef0 <HAL_I2C_Master_Transmit+0x188>)
 800beaa:	4639      	mov	r1, r7
 800beac:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800beae:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800beb0:	9300      	str	r3, [sp, #0]
 800beb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800beb6:	f7ff fc8f 	bl	800b7d8 <I2C_TransferConfig>
 800beba:	e792      	b.n	800bde2 <HAL_I2C_Master_Transmit+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bebc:	f7fb fecc 	bl	8007c58 <HAL_GetTick>
 800bec0:	1b80      	subs	r0, r0, r6
 800bec2:	4285      	cmp	r5, r0
 800bec4:	d3cb      	bcc.n	800be5e <HAL_I2C_Master_Transmit+0xf6>
 800bec6:	2d00      	cmp	r5, #0
 800bec8:	d0c9      	beq.n	800be5e <HAL_I2C_Master_Transmit+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800beca:	6821      	ldr	r1, [r4, #0]
 800becc:	e7d8      	b.n	800be80 <HAL_I2C_Master_Transmit+0x118>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bece:	f8cd 8000 	str.w	r8, [sp]
 800bed2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800bed6:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bed8:	4639      	mov	r1, r7
 800beda:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800bedc:	b292      	uxth	r2, r2
 800bede:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bee0:	b2d2      	uxtb	r2, r2
 800bee2:	f7ff fc79 	bl	800b7d8 <I2C_TransferConfig>
 800bee6:	e780      	b.n	800bdea <HAL_I2C_Master_Transmit+0x82>
        return HAL_ERROR;
 800bee8:	2001      	movs	r0, #1
}
 800beea:	b003      	add	sp, #12
 800beec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bef0:	80002000 	.word	0x80002000
 800bef4:	fe00e800 	.word	0xfe00e800

0800bef8 <HAL_I2C_Master_Receive>:
{
 800bef8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800befc:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800befe:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800bf02:	b083      	sub	sp, #12
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf04:	2b20      	cmp	r3, #32
{
 800bf06:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800bf08:	f040 8088 	bne.w	800c01c <HAL_I2C_Master_Receive+0x124>
    __HAL_LOCK(hi2c);
 800bf0c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800bf10:	4604      	mov	r4, r0
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	f000 8082 	beq.w	800c01c <HAL_I2C_Master_Receive+0x124>
 800bf18:	2301      	movs	r3, #1
 800bf1a:	460f      	mov	r7, r1
 800bf1c:	4691      	mov	r9, r2
 800bf1e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800bf22:	f7fb fe99 	bl	8007c58 <HAL_GetTick>
 800bf26:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf28:	e004      	b.n	800bf34 <HAL_I2C_Master_Receive+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf2a:	f7fb fe95 	bl	8007c58 <HAL_GetTick>
 800bf2e:	1b80      	subs	r0, r0, r6
 800bf30:	2819      	cmp	r0, #25
 800bf32:	d87e      	bhi.n	800c032 <HAL_I2C_Master_Receive+0x13a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	6999      	ldr	r1, [r3, #24]
 800bf38:	f411 4100 	ands.w	r1, r1, #32768	; 0x8000
 800bf3c:	d1f5      	bne.n	800bf2a <HAL_I2C_Master_Receive+0x32>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf3e:	2322      	movs	r3, #34	; 0x22
    hi2c->pBuffPtr  = pData;
 800bf40:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 800bf44:	6361      	str	r1, [r4, #52]	; 0x34
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800bf46:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800bf4a:	2310      	movs	r3, #16
 800bf4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800bf50:	6461      	str	r1, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800bf52:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf56:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	2bff      	cmp	r3, #255	; 0xff
 800bf5c:	d878      	bhi.n	800c050 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 800bf5e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf60:	4639      	mov	r1, r7
 800bf62:	4b49      	ldr	r3, [pc, #292]	; (800c088 <HAL_I2C_Master_Receive+0x190>)
 800bf64:	4620      	mov	r0, r4
      hi2c->XferSize = hi2c->XferCount;
 800bf66:	b292      	uxth	r2, r2
 800bf68:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf6a:	b2d2      	uxtb	r2, r2
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bf72:	f7ff fc31 	bl	800b7d8 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800bf76:	f04f 0800 	mov.w	r8, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
    while (hi2c->XferCount > 0U)
 800bf7e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf80:	4632      	mov	r2, r6
 800bf82:	4629      	mov	r1, r5
 800bf84:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bf86:	b29b      	uxth	r3, r3
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d035      	beq.n	800bff8 <HAL_I2C_Master_Receive+0x100>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bf8c:	f7ff fd7e 	bl	800ba8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d175      	bne.n	800c080 <HAL_I2C_Master_Receive+0x188>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bf94:	6822      	ldr	r2, [r4, #0]
 800bf96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800bf9a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800bf9c:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800bf9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800bfa0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800bfa2:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800bfa4:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800bfa6:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800bfa8:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800bfaa:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800bfac:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfae:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800bfb0:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfb2:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800bfb4:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d1e1      	bne.n	800bf7e <HAL_I2C_Master_Receive+0x86>
 800bfba:	2a00      	cmp	r2, #0
 800bfbc:	d0df      	beq.n	800bf7e <HAL_I2C_Master_Receive+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfbe:	6822      	ldr	r2, [r4, #0]
 800bfc0:	e001      	b.n	800bfc6 <HAL_I2C_Master_Receive+0xce>
    if (Timeout != HAL_MAX_DELAY)
 800bfc2:	1c69      	adds	r1, r5, #1
 800bfc4:	d12e      	bne.n	800c024 <HAL_I2C_Master_Receive+0x12c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bfc6:	6993      	ldr	r3, [r2, #24]
 800bfc8:	061b      	lsls	r3, r3, #24
 800bfca:	d5fa      	bpl.n	800bfc2 <HAL_I2C_Master_Receive+0xca>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bfcc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800bfce:	b29b      	uxth	r3, r3
 800bfd0:	2bff      	cmp	r3, #255	; 0xff
 800bfd2:	d948      	bls.n	800c066 <HAL_I2C_Master_Receive+0x16e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bfd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800bfd8:	22ff      	movs	r2, #255	; 0xff
 800bfda:	4639      	mov	r1, r7
 800bfdc:	4620      	mov	r0, r4
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfde:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800bfe2:	f8cd 8000 	str.w	r8, [sp]
 800bfe6:	f7ff fbf7 	bl	800b7d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800bfea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bfec:	4632      	mov	r2, r6
 800bfee:	4629      	mov	r1, r5
    while (hi2c->XferCount > 0U)
 800bff0:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bff2:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d1c9      	bne.n	800bf8c <HAL_I2C_Master_Receive+0x94>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800bff8:	f7ff fd22 	bl	800ba40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800bffc:	2800      	cmp	r0, #0
 800bffe:	d13f      	bne.n	800c080 <HAL_I2C_Master_Receive+0x188>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c004:	4d21      	ldr	r5, [pc, #132]	; (800c08c <HAL_I2C_Master_Receive+0x194>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c006:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c008:	685a      	ldr	r2, [r3, #4]
 800c00a:	402a      	ands	r2, r5
 800c00c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c00e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c012:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c016:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800c01a:	e000      	b.n	800c01e <HAL_I2C_Master_Receive+0x126>
    return HAL_BUSY;
 800c01c:	2002      	movs	r0, #2
}
 800c01e:	b003      	add	sp, #12
 800c020:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c024:	f7fb fe18 	bl	8007c58 <HAL_GetTick>
 800c028:	1b80      	subs	r0, r0, r6
 800c02a:	4285      	cmp	r5, r0
 800c02c:	d301      	bcc.n	800c032 <HAL_I2C_Master_Receive+0x13a>
 800c02e:	2d00      	cmp	r5, #0
 800c030:	d1c5      	bne.n	800bfbe <HAL_I2C_Master_Receive+0xc6>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c032:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c034:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c036:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c038:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c03a:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c03c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c040:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c042:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c046:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800c04a:	b003      	add	sp, #12
 800c04c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c050:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c052:	4b0d      	ldr	r3, [pc, #52]	; (800c088 <HAL_I2C_Master_Receive+0x190>)
 800c054:	4639      	mov	r1, r7
 800c056:	4620      	mov	r0, r4
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c058:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c05a:	9300      	str	r3, [sp, #0]
 800c05c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c060:	f7ff fbba 	bl	800b7d8 <I2C_TransferConfig>
 800c064:	e787      	b.n	800bf76 <HAL_I2C_Master_Receive+0x7e>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c066:	f8cd 8000 	str.w	r8, [sp]
 800c06a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c06e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c070:	4639      	mov	r1, r7
 800c072:	4620      	mov	r0, r4
          hi2c->XferSize = hi2c->XferCount;
 800c074:	b292      	uxth	r2, r2
 800c076:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c078:	b2d2      	uxtb	r2, r2
 800c07a:	f7ff fbad 	bl	800b7d8 <I2C_TransferConfig>
 800c07e:	e77e      	b.n	800bf7e <HAL_I2C_Master_Receive+0x86>
        return HAL_ERROR;
 800c080:	2001      	movs	r0, #1
}
 800c082:	b003      	add	sp, #12
 800c084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c088:	80002400 	.word	0x80002400
 800c08c:	fe00e800 	.word	0xfe00e800

0800c090 <HAL_I2C_Mem_Read>:
{
 800c090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c094:	461f      	mov	r7, r3
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c096:	3b01      	subs	r3, #1
{
 800c098:	b083      	sub	sp, #12
 800c09a:	4605      	mov	r5, r0
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c09c:	2b01      	cmp	r3, #1
{
 800c09e:	4688      	mov	r8, r1
 800c0a0:	4691      	mov	r9, r2
 800c0a2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 800c0a6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 800c0a8:	d904      	bls.n	800c0b4 <HAL_I2C_Mem_Read+0x24>
 800c0aa:	f640 11d4 	movw	r1, #2516	; 0x9d4
 800c0ae:	486e      	ldr	r0, [pc, #440]	; (800c268 <HAL_I2C_Mem_Read+0x1d8>)
 800c0b0:	f7f8 fbbe 	bl	8004830 <assert_failed>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800c0b4:	f895 3041 	ldrb.w	r3, [r5, #65]	; 0x41
 800c0b8:	2b20      	cmp	r3, #32
 800c0ba:	d17f      	bne.n	800c1bc <HAL_I2C_Mem_Read+0x12c>
    if ((pData == NULL) || (Size == 0U))
 800c0bc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d075      	beq.n	800c1ae <HAL_I2C_Mem_Read+0x11e>
 800c0c2:	f1ba 0f00 	cmp.w	sl, #0
 800c0c6:	d072      	beq.n	800c1ae <HAL_I2C_Mem_Read+0x11e>
    __HAL_LOCK(hi2c);
 800c0c8:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
 800c0cc:	2b01      	cmp	r3, #1
 800c0ce:	d075      	beq.n	800c1bc <HAL_I2C_Mem_Read+0x12c>
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    tickstart = HAL_GetTick();
 800c0d6:	f7fb fdbf 	bl	8007c58 <HAL_GetTick>
 800c0da:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0dc:	e004      	b.n	800c0e8 <HAL_I2C_Mem_Read+0x58>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0de:	f7fb fdbb 	bl	8007c58 <HAL_GetTick>
 800c0e2:	1b80      	subs	r0, r0, r6
 800c0e4:	2819      	cmp	r0, #25
 800c0e6:	d874      	bhi.n	800c1d2 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c0e8:	682b      	ldr	r3, [r5, #0]
 800c0ea:	699b      	ldr	r3, [r3, #24]
 800c0ec:	f413 4b00 	ands.w	fp, r3, #32768	; 0x8000
 800c0f0:	d1f5      	bne.n	800c0de <HAL_I2C_Mem_Read+0x4e>
    hi2c->pBuffPtr  = pData;
 800c0f2:	990c      	ldr	r1, [sp, #48]	; 0x30
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0f4:	463b      	mov	r3, r7
    hi2c->XferISR   = NULL;
 800c0f6:	f8c5 b034 	str.w	fp, [r5, #52]	; 0x34
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c0fa:	464a      	mov	r2, r9
    hi2c->pBuffPtr  = pData;
 800c0fc:	6269      	str	r1, [r5, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c0fe:	2122      	movs	r1, #34	; 0x22
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c100:	4628      	mov	r0, r5
 800c102:	e9cd 4600 	strd	r4, r6, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800c106:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800c10a:	2140      	movs	r1, #64	; 0x40
 800c10c:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c110:	4641      	mov	r1, r8
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c112:	f8c5 b044 	str.w	fp, [r5, #68]	; 0x44
    hi2c->XferCount = Size;
 800c116:	f8a5 a02a 	strh.w	sl, [r5, #42]	; 0x2a
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800c11a:	f7ff fd01 	bl	800bb20 <I2C_RequestMemoryRead>
 800c11e:	2800      	cmp	r0, #0
 800c120:	f040 8083 	bne.w	800c22a <HAL_I2C_Mem_Read+0x19a>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c124:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c126:	b29b      	uxth	r3, r3
 800c128:	2bff      	cmp	r3, #255	; 0xff
 800c12a:	f240 808e 	bls.w	800c24a <HAL_I2C_Mem_Read+0x1ba>
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c12e:	4b4f      	ldr	r3, [pc, #316]	; (800c26c <HAL_I2C_Mem_Read+0x1dc>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c130:	22ff      	movs	r2, #255	; 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c132:	4641      	mov	r1, r8
 800c134:	4628      	mov	r0, r5
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c136:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c13e:	f7ff fb4b 	bl	800b7d8 <I2C_TransferConfig>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c142:	2700      	movs	r7, #0
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c144:	f04f 09ff 	mov.w	r9, #255	; 0xff
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c148:	682a      	ldr	r2, [r5, #0]
 800c14a:	e001      	b.n	800c150 <HAL_I2C_Mem_Read+0xc0>
    if (Timeout != HAL_MAX_DELAY)
 800c14c:	1c63      	adds	r3, r4, #1
 800c14e:	d139      	bne.n	800c1c4 <HAL_I2C_Mem_Read+0x134>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c150:	6993      	ldr	r3, [r2, #24]
 800c152:	0758      	lsls	r0, r3, #29
 800c154:	d5fa      	bpl.n	800c14c <HAL_I2C_Mem_Read+0xbc>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800c156:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c158:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c15a:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800c15c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->XferSize--;
 800c15e:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
      hi2c->XferCount--;
 800c160:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800c162:	6a69      	ldr	r1, [r5, #36]	; 0x24
      hi2c->XferSize--;
 800c164:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800c166:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800c168:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800c16a:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800c16c:	856a      	strh	r2, [r5, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c16e:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800c170:	6269      	str	r1, [r5, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c172:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800c174:	852b      	strh	r3, [r5, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800c176:	b90b      	cbnz	r3, 800c17c <HAL_I2C_Mem_Read+0xec>
 800c178:	2a00      	cmp	r2, #0
 800c17a:	d140      	bne.n	800c1fe <HAL_I2C_Mem_Read+0x16e>
    } while (hi2c->XferCount > 0U);
 800c17c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c17e:	b29b      	uxth	r3, r3
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e1      	bne.n	800c148 <HAL_I2C_Mem_Read+0xb8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800c184:	4632      	mov	r2, r6
 800c186:	4621      	mov	r1, r4
 800c188:	4628      	mov	r0, r5
 800c18a:	f7ff fc59 	bl	800ba40 <I2C_WaitOnSTOPFlagUntilTimeout>
 800c18e:	2800      	cmp	r0, #0
 800c190:	d168      	bne.n	800c264 <HAL_I2C_Mem_Read+0x1d4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
 800c196:	4c36      	ldr	r4, [pc, #216]	; (800c270 <HAL_I2C_Mem_Read+0x1e0>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800c198:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800c19a:	685a      	ldr	r2, [r3, #4]
 800c19c:	4022      	ands	r2, r4
 800c19e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800c1a0:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c1a4:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800c1a8:	f885 0042 	strb.w	r0, [r5, #66]	; 0x42
    return HAL_OK;
 800c1ac:	e003      	b.n	800c1b6 <HAL_I2C_Mem_Read+0x126>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c1ae:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
 800c1b2:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800c1b4:	646b      	str	r3, [r5, #68]	; 0x44
}
 800c1b6:	b003      	add	sp, #12
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800c1bc:	2002      	movs	r0, #2
}
 800c1be:	b003      	add	sp, #12
 800c1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1c4:	f7fb fd48 	bl	8007c58 <HAL_GetTick>
 800c1c8:	1b80      	subs	r0, r0, r6
 800c1ca:	4284      	cmp	r4, r0
 800c1cc:	d301      	bcc.n	800c1d2 <HAL_I2C_Mem_Read+0x142>
 800c1ce:	2c00      	cmp	r4, #0
 800c1d0:	d1ba      	bne.n	800c148 <HAL_I2C_Mem_Read+0xb8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1d2:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1d4:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1d6:	2200      	movs	r2, #0
          return HAL_ERROR;
 800c1d8:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1da:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 800c1dc:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800c1e0:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800c1e2:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800c1e6:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800c1ea:	b003      	add	sp, #12
 800c1ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1f0:	f7fb fd32 	bl	8007c58 <HAL_GetTick>
 800c1f4:	1b80      	subs	r0, r0, r6
 800c1f6:	4284      	cmp	r4, r0
 800c1f8:	d3eb      	bcc.n	800c1d2 <HAL_I2C_Mem_Read+0x142>
 800c1fa:	2c00      	cmp	r4, #0
 800c1fc:	d0e9      	beq.n	800c1d2 <HAL_I2C_Mem_Read+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c1fe:	682a      	ldr	r2, [r5, #0]
 800c200:	e001      	b.n	800c206 <HAL_I2C_Mem_Read+0x176>
    if (Timeout != HAL_MAX_DELAY)
 800c202:	1c61      	adds	r1, r4, #1
 800c204:	d1f4      	bne.n	800c1f0 <HAL_I2C_Mem_Read+0x160>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800c206:	6993      	ldr	r3, [r2, #24]
 800c208:	061b      	lsls	r3, r3, #24
 800c20a:	d5fa      	bpl.n	800c202 <HAL_I2C_Mem_Read+0x172>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c20c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800c20e:	b29b      	uxth	r3, r3
 800c210:	2bff      	cmp	r3, #255	; 0xff
 800c212:	d90e      	bls.n	800c232 <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800c214:	f8a5 9028 	strh.w	r9, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800c218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c21c:	22ff      	movs	r2, #255	; 0xff
 800c21e:	4641      	mov	r1, r8
 800c220:	4628      	mov	r0, r5
 800c222:	9700      	str	r7, [sp, #0]
 800c224:	f7ff fad8 	bl	800b7d8 <I2C_TransferConfig>
 800c228:	e7a8      	b.n	800c17c <HAL_I2C_Mem_Read+0xec>
      return HAL_ERROR;
 800c22a:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
 800c22c:	f885 b040 	strb.w	fp, [r5, #64]	; 0x40
      return HAL_ERROR;
 800c230:	e7c1      	b.n	800c1b6 <HAL_I2C_Mem_Read+0x126>
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c232:	9700      	str	r7, [sp, #0]
 800c234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800c238:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c23a:	4641      	mov	r1, r8
 800c23c:	4628      	mov	r0, r5
          hi2c->XferSize = hi2c->XferCount;
 800c23e:	b292      	uxth	r2, r2
 800c240:	852a      	strh	r2, [r5, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	f7ff fac8 	bl	800b7d8 <I2C_TransferConfig>
 800c248:	e798      	b.n	800c17c <HAL_I2C_Mem_Read+0xec>
      hi2c->XferSize = hi2c->XferCount;
 800c24a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c24c:	4641      	mov	r1, r8
 800c24e:	4b07      	ldr	r3, [pc, #28]	; (800c26c <HAL_I2C_Mem_Read+0x1dc>)
 800c250:	4628      	mov	r0, r5
      hi2c->XferSize = hi2c->XferCount;
 800c252:	b292      	uxth	r2, r2
 800c254:	852a      	strh	r2, [r5, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800c256:	b2d2      	uxtb	r2, r2
 800c258:	9300      	str	r3, [sp, #0]
 800c25a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c25e:	f7ff fabb 	bl	800b7d8 <I2C_TransferConfig>
 800c262:	e76e      	b.n	800c142 <HAL_I2C_Mem_Read+0xb2>
      return HAL_ERROR;
 800c264:	2001      	movs	r0, #1
 800c266:	e7a6      	b.n	800c1b6 <HAL_I2C_Mem_Read+0x126>
 800c268:	0802c40c 	.word	0x0802c40c
 800c26c:	80002400 	.word	0x80002400
 800c270:	fe00e800 	.word	0xfe00e800

0800c274 <HAL_I2CEx_ConfigAnalogFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c274:	4b23      	ldr	r3, [pc, #140]	; (800c304 <HAL_I2CEx_ConfigAnalogFilter+0x90>)
 800c276:	6802      	ldr	r2, [r0, #0]
{
 800c278:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c27a:	4d23      	ldr	r5, [pc, #140]	; (800c308 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
{
 800c27c:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c27e:	4e23      	ldr	r6, [pc, #140]	; (800c30c <HAL_I2CEx_ConfigAnalogFilter+0x98>)
 800c280:	429a      	cmp	r2, r3
 800c282:	bf18      	it	ne
 800c284:	42aa      	cmpne	r2, r5
{
 800c286:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c288:	bf14      	ite	ne
 800c28a:	2301      	movne	r3, #1
 800c28c:	2300      	moveq	r3, #0
 800c28e:	42b2      	cmp	r2, r6
 800c290:	bf0c      	ite	eq
 800c292:	2300      	moveq	r3, #0
 800c294:	f003 0301 	andne.w	r3, r3, #1
 800c298:	b113      	cbz	r3, 800c2a0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c29a:	4b1d      	ldr	r3, [pc, #116]	; (800c310 <HAL_I2CEx_ConfigAnalogFilter+0x9c>)
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d12c      	bne.n	800c2fa <HAL_I2CEx_ConfigAnalogFilter+0x86>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c2a0:	f435 5380 	bics.w	r3, r5, #4096	; 0x1000
 800c2a4:	d124      	bne.n	800c2f0 <HAL_I2CEx_ConfigAnalogFilter+0x7c>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2a6:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c2aa:	2b20      	cmp	r3, #32
 800c2ac:	b2de      	uxtb	r6, r3
 800c2ae:	d11d      	bne.n	800c2ec <HAL_I2CEx_ConfigAnalogFilter+0x78>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2b0:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d019      	beq.n	800c2ec <HAL_I2CEx_ConfigAnalogFilter+0x78>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2b8:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2ba:	2224      	movs	r2, #36	; 0x24
 800c2bc:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	f022 0201 	bic.w	r2, r2, #1
 800c2c6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c2c8:	681a      	ldr	r2, [r3, #0]
 800c2ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c2ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2d0:	6819      	ldr	r1, [r3, #0]
 800c2d2:	430d      	orrs	r5, r1
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c2d4:	2100      	movs	r1, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800c2d6:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c2d8:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c2da:	681a      	ldr	r2, [r3, #0]
 800c2dc:	f042 0201 	orr.w	r2, r2, #1
 800c2e0:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c2e2:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c2e6:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c2ea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c2ec:	2002      	movs	r0, #2
}
 800c2ee:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 800c2f0:	215f      	movs	r1, #95	; 0x5f
 800c2f2:	4808      	ldr	r0, [pc, #32]	; (800c314 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c2f4:	f7f8 fa9c 	bl	8004830 <assert_failed>
 800c2f8:	e7d5      	b.n	800c2a6 <HAL_I2CEx_ConfigAnalogFilter+0x32>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c2fa:	215e      	movs	r1, #94	; 0x5e
 800c2fc:	4805      	ldr	r0, [pc, #20]	; (800c314 <HAL_I2CEx_ConfigAnalogFilter+0xa0>)
 800c2fe:	f7f8 fa97 	bl	8004830 <assert_failed>
 800c302:	e7cd      	b.n	800c2a0 <HAL_I2CEx_ConfigAnalogFilter+0x2c>
 800c304:	40005400 	.word	0x40005400
 800c308:	40005800 	.word	0x40005800
 800c30c:	40005c00 	.word	0x40005c00
 800c310:	40006000 	.word	0x40006000
 800c314:	0802c444 	.word	0x0802c444

0800c318 <HAL_I2CEx_ConfigDigitalFilter>:
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c318:	4b22      	ldr	r3, [pc, #136]	; (800c3a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>)
 800c31a:	6802      	ldr	r2, [r0, #0]
{
 800c31c:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c31e:	4d22      	ldr	r5, [pc, #136]	; (800c3a8 <HAL_I2CEx_ConfigDigitalFilter+0x90>)
{
 800c320:	4604      	mov	r4, r0
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c322:	4e22      	ldr	r6, [pc, #136]	; (800c3ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c324:	429a      	cmp	r2, r3
 800c326:	bf18      	it	ne
 800c328:	42aa      	cmpne	r2, r5
{
 800c32a:	460d      	mov	r5, r1
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c32c:	bf14      	ite	ne
 800c32e:	2301      	movne	r3, #1
 800c330:	2300      	moveq	r3, #0
 800c332:	42b2      	cmp	r2, r6
 800c334:	bf0c      	ite	eq
 800c336:	2300      	moveq	r3, #0
 800c338:	f003 0301 	andne.w	r3, r3, #1
 800c33c:	b113      	cbz	r3, 800c344 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c33e:	4b1c      	ldr	r3, [pc, #112]	; (800c3b0 <HAL_I2CEx_ConfigDigitalFilter+0x98>)
 800c340:	429a      	cmp	r2, r3
 800c342:	d12a      	bne.n	800c39a <HAL_I2CEx_ConfigDigitalFilter+0x82>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c344:	2d0f      	cmp	r5, #15
 800c346:	d823      	bhi.n	800c390 <HAL_I2CEx_ConfigDigitalFilter+0x78>

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c348:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c34c:	2b20      	cmp	r3, #32
 800c34e:	b2de      	uxtb	r6, r3
 800c350:	d11c      	bne.n	800c38c <HAL_I2CEx_ConfigDigitalFilter+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c352:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c356:	2b01      	cmp	r3, #1
 800c358:	d018      	beq.n	800c38c <HAL_I2CEx_ConfigDigitalFilter+0x74>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c35a:	6823      	ldr	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 800c35c:	2224      	movs	r2, #36	; 0x24
 800c35e:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800c362:	681a      	ldr	r2, [r3, #0]
 800c364:	f022 0201 	bic.w	r2, r2, #1
 800c368:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c36a:	6819      	ldr	r1, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c36c:	f421 6170 	bic.w	r1, r1, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c370:	ea41 2505 	orr.w	r5, r1, r5, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c374:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 800c376:	601d      	str	r5, [r3, #0]

    return HAL_OK;
 800c378:	4608      	mov	r0, r1
    __HAL_I2C_ENABLE(hi2c);
 800c37a:	681a      	ldr	r2, [r3, #0]
 800c37c:	f042 0201 	orr.w	r2, r2, #1
 800c380:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800c382:	f884 6041 	strb.w	r6, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800c386:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800c38a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800c38c:	2002      	movs	r0, #2
}
 800c38e:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 800c390:	218d      	movs	r1, #141	; 0x8d
 800c392:	4808      	ldr	r0, [pc, #32]	; (800c3b4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c394:	f7f8 fa4c 	bl	8004830 <assert_failed>
 800c398:	e7d6      	b.n	800c348 <HAL_I2CEx_ConfigDigitalFilter+0x30>
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800c39a:	218c      	movs	r1, #140	; 0x8c
 800c39c:	4805      	ldr	r0, [pc, #20]	; (800c3b4 <HAL_I2CEx_ConfigDigitalFilter+0x9c>)
 800c39e:	f7f8 fa47 	bl	8004830 <assert_failed>
 800c3a2:	e7cf      	b.n	800c344 <HAL_I2CEx_ConfigDigitalFilter+0x2c>
 800c3a4:	40005400 	.word	0x40005400
 800c3a8:	40005800 	.word	0x40005800
 800c3ac:	40005c00 	.word	0x40005c00
 800c3b0:	40006000 	.word	0x40006000
 800c3b4:	0802c444 	.word	0x0802c444

0800c3b8 <HAL_IWDG_Init>:
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c3b8:	2800      	cmp	r0, #0
 800c3ba:	d04c      	beq.n	800c456 <HAL_IWDG_Init+0x9e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c3bc:	6802      	ldr	r2, [r0, #0]
{
 800c3be:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
 800c3c0:	4b26      	ldr	r3, [pc, #152]	; (800c45c <HAL_IWDG_Init+0xa4>)
 800c3c2:	4604      	mov	r4, r0
 800c3c4:	429a      	cmp	r2, r3
 800c3c6:	d003      	beq.n	800c3d0 <HAL_IWDG_Init+0x18>
 800c3c8:	21b5      	movs	r1, #181	; 0xb5
 800c3ca:	4825      	ldr	r0, [pc, #148]	; (800c460 <HAL_IWDG_Init+0xa8>)
 800c3cc:	f7f8 fa30 	bl	8004830 <assert_failed>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c3d0:	6863      	ldr	r3, [r4, #4]
 800c3d2:	2b06      	cmp	r3, #6
 800c3d4:	d835      	bhi.n	800c442 <HAL_IWDG_Init+0x8a>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c3d6:	68a3      	ldr	r3, [r4, #8]
 800c3d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3dc:	d22c      	bcs.n	800c438 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c3de:	68e3      	ldr	r3, [r4, #12]
 800c3e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3e4:	d223      	bcs.n	800c42e <HAL_IWDG_Init+0x76>

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c3e6:	f64c 40cc 	movw	r0, #52428	; 0xcccc
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c3ea:	68a2      	ldr	r2, [r4, #8]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c3ec:	e9d4 3100 	ldrd	r3, r1, [r4]
  __HAL_IWDG_START(hiwdg);
 800c3f0:	6018      	str	r0, [r3, #0]
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c3f2:	f245 5055 	movw	r0, #21845	; 0x5555
 800c3f6:	6018      	str	r0, [r3, #0]
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c3f8:	6059      	str	r1, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c3fa:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c3fc:	f7fb fc2c 	bl	8007c58 <HAL_GetTick>

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c400:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c402:	4605      	mov	r5, r0
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c404:	68da      	ldr	r2, [r3, #12]
 800c406:	0751      	lsls	r1, r2, #29
 800c408:	d00a      	beq.n	800c420 <HAL_IWDG_Init+0x68>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c40a:	f7fb fc25 	bl	8007c58 <HAL_GetTick>
 800c40e:	1b43      	subs	r3, r0, r5
 800c410:	2b31      	cmp	r3, #49	; 0x31
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c412:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c414:	d9f6      	bls.n	800c404 <HAL_IWDG_Init+0x4c>
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c416:	68da      	ldr	r2, [r3, #12]
 800c418:	0752      	lsls	r2, r2, #29
 800c41a:	d0f3      	beq.n	800c404 <HAL_IWDG_Init+0x4c>
      {
        return HAL_TIMEOUT;
 800c41c:	2003      	movs	r0, #3
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
  }

  /* Return function status */
  return HAL_OK;
}
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800c420:	6919      	ldr	r1, [r3, #16]
 800c422:	68e2      	ldr	r2, [r4, #12]
 800c424:	4291      	cmp	r1, r2
 800c426:	d011      	beq.n	800c44c <HAL_IWDG_Init+0x94>
  return HAL_OK;
 800c428:	2000      	movs	r0, #0
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800c42a:	611a      	str	r2, [r3, #16]
}
 800c42c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));
 800c42e:	21b8      	movs	r1, #184	; 0xb8
 800c430:	480b      	ldr	r0, [pc, #44]	; (800c460 <HAL_IWDG_Init+0xa8>)
 800c432:	f7f8 f9fd 	bl	8004830 <assert_failed>
 800c436:	e7d6      	b.n	800c3e6 <HAL_IWDG_Init+0x2e>
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
 800c438:	21b7      	movs	r1, #183	; 0xb7
 800c43a:	4809      	ldr	r0, [pc, #36]	; (800c460 <HAL_IWDG_Init+0xa8>)
 800c43c:	f7f8 f9f8 	bl	8004830 <assert_failed>
 800c440:	e7cd      	b.n	800c3de <HAL_IWDG_Init+0x26>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
 800c442:	21b6      	movs	r1, #182	; 0xb6
 800c444:	4806      	ldr	r0, [pc, #24]	; (800c460 <HAL_IWDG_Init+0xa8>)
 800c446:	f7f8 f9f3 	bl	8004830 <assert_failed>
 800c44a:	e7c4      	b.n	800c3d6 <HAL_IWDG_Init+0x1e>
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c44c:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
  return HAL_OK;
 800c450:	2000      	movs	r0, #0
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c452:	601a      	str	r2, [r3, #0]
}
 800c454:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c456:	2001      	movs	r0, #1
}
 800c458:	4770      	bx	lr
 800c45a:	bf00      	nop
 800c45c:	40003000 	.word	0x40003000
 800c460:	0802c480 	.word	0x0802c480

0800c464 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c464:	4603      	mov	r3, r0
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c466:	f64a 22aa 	movw	r2, #43690	; 0xaaaa

  /* Return function status */
  return HAL_OK;
}
 800c46a:	2000      	movs	r0, #0
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	601a      	str	r2, [r3, #0]
}
 800c470:	4770      	bx	lr
 800c472:	bf00      	nop

0800c474 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c476:	b08b      	sub	sp, #44	; 0x2c
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c478:	2800      	cmp	r0, #0
 800c47a:	f000 809d 	beq.w	800c5b8 <HAL_PCD_Init+0x144>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c47e:	6804      	ldr	r4, [r0, #0]
 800c480:	4605      	mov	r5, r0
 800c482:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 800c486:	d003      	beq.n	800c490 <HAL_PCD_Init+0x1c>
 800c488:	4b4f      	ldr	r3, [pc, #316]	; (800c5c8 <HAL_PCD_Init+0x154>)
 800c48a:	429c      	cmp	r4, r3
 800c48c:	f040 8081 	bne.w	800c592 <HAL_PCD_Init+0x11e>

  USBx = hpcd->Instance;

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c490:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
 800c494:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c498:	2b00      	cmp	r3, #0
 800c49a:	f000 8086 	beq.w	800c5aa <HAL_PCD_Init+0x136>
 800c49e:	4620      	mov	r0, r4
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c4a0:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c4a2:	462e      	mov	r6, r5
 800c4a4:	1d2f      	adds	r7, r5, #4
  hpcd->State = HAL_PCD_STATE_BUSY;
 800c4a6:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c4aa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c4ac:	466c      	mov	r4, sp
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800c4ae:	f413 7380 	ands.w	r3, r3, #256	; 0x100
    hpcd->Init.dma_enable = 0U;
 800c4b2:	bf08      	it	eq
 800c4b4:	612b      	streq	r3, [r5, #16]
  __HAL_PCD_DISABLE(hpcd);
 800c4b6:	f006 fe87 	bl	80131c8 <USB_DisableGlobalInt>
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c4ba:	f856 eb10 	ldr.w	lr, [r6], #16
 800c4be:	46b4      	mov	ip, r6
 800c4c0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4c6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c4ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c4cc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800c4d0:	e884 0003 	stmia.w	r4, {r0, r1}
 800c4d4:	4670      	mov	r0, lr
 800c4d6:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c4da:	f006 fdb5 	bl	8013048 <USB_CoreInit>
 800c4de:	4604      	mov	r4, r0
 800c4e0:	b130      	cbz	r0, 800c4f0 <HAL_PCD_Init+0x7c>

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
    return HAL_ERROR;
 800c4e2:	2401      	movs	r4, #1
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c4e4:	2302      	movs	r3, #2
  }

  (void)USB_DevDisconnect(hpcd->Instance);

  return HAL_OK;
}
 800c4e6:	4620      	mov	r0, r4
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c4e8:	f885 33bd 	strb.w	r3, [r5, #957]	; 0x3bd
}
 800c4ec:	b00b      	add	sp, #44	; 0x2c
 800c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800c4f0:	4601      	mov	r1, r0
 800c4f2:	6828      	ldr	r0, [r5, #0]
 800c4f4:	f006 fe70 	bl	80131d8 <USB_SetCurrentMode>
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c4f8:	6868      	ldr	r0, [r5, #4]
 800c4fa:	b358      	cbz	r0, 800c554 <HAL_PCD_Init+0xe0>
 800c4fc:	4622      	mov	r2, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c4fe:	f04f 0e01 	mov.w	lr, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c502:	4621      	mov	r1, r4
    hpcd->IN_ep[i].is_in = 1U;
 800c504:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c508:	f102 0c01 	add.w	ip, r2, #1
    hpcd->IN_ep[i].is_in = 1U;
 800c50c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->IN_ep[i].num = i;
 800c510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c514:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c518:	fa5f f28c 	uxtb.w	r2, ip
    hpcd->IN_ep[i].is_in = 1U;
 800c51c:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c520:	4282      	cmp	r2, r0
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c522:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].xfer_len = 0U;
 800c526:	6519      	str	r1, [r3, #80]	; 0x50
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c528:	e9c3 1111 	strd	r1, r1, [r3, #68]	; 0x44
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c52c:	d3ea      	bcc.n	800c504 <HAL_PCD_Init+0x90>
    hpcd->OUT_ep[i].is_in = 0U;
 800c52e:	2200      	movs	r2, #0
 800c530:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c534:	1c61      	adds	r1, r4, #1
    hpcd->OUT_ep[i].is_in = 0U;
 800c536:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    hpcd->OUT_ep[i].num = i;
 800c53a:	f883 41fc 	strb.w	r4, [r3, #508]	; 0x1fc
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c53e:	b2cc      	uxtb	r4, r1
    hpcd->OUT_ep[i].is_in = 0U;
 800c540:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c544:	4284      	cmp	r4, r0
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c546:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c54a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c54e:	e9c3 2281 	strd	r2, r2, [r3, #516]	; 0x204
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c552:	d3ed      	bcc.n	800c530 <HAL_PCD_Init+0xbc>
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c554:	466c      	mov	r4, sp
 800c556:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c558:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c55a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c55c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c55e:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c562:	e884 0003 	stmia.w	r4, {r0, r1}
 800c566:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 800c56a:	6828      	ldr	r0, [r5, #0]
 800c56c:	f006 feb8 	bl	80132e0 <USB_DevInit>
 800c570:	4604      	mov	r4, r0
 800c572:	2800      	cmp	r0, #0
 800c574:	d1b5      	bne.n	800c4e2 <HAL_PCD_Init+0x6e>
  hpcd->State = HAL_PCD_STATE_READY;
 800c576:	2201      	movs	r2, #1
  if (hpcd->Init.lpm_enable == 1U)
 800c578:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  hpcd->USB_Address = 0U;
 800c57a:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
  if (hpcd->Init.lpm_enable == 1U)
 800c57e:	4293      	cmp	r3, r2
  hpcd->State = HAL_PCD_STATE_READY;
 800c580:	f885 23bd 	strb.w	r2, [r5, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
 800c584:	d01c      	beq.n	800c5c0 <HAL_PCD_Init+0x14c>
  (void)USB_DevDisconnect(hpcd->Instance);
 800c586:	6828      	ldr	r0, [r5, #0]
 800c588:	f007 fa72 	bl	8013a70 <USB_DevDisconnect>
}
 800c58c:	4620      	mov	r0, r4
 800c58e:	b00b      	add	sp, #44	; 0x2c
 800c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
 800c592:	2187      	movs	r1, #135	; 0x87
 800c594:	480d      	ldr	r0, [pc, #52]	; (800c5cc <HAL_PCD_Init+0x158>)
 800c596:	f7f8 f94b 	bl	8004830 <assert_failed>
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c59a:	f895 33bd 	ldrb.w	r3, [r5, #957]	; 0x3bd
  USBx = hpcd->Instance;
 800c59e:	682c      	ldr	r4, [r5, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c5a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	f47f af7a 	bne.w	800c49e <HAL_PCD_Init+0x2a>
    HAL_PCD_MspInit(hpcd);
 800c5aa:	4628      	mov	r0, r5
    hpcd->Lock = HAL_UNLOCKED;
 800c5ac:	f885 23bc 	strb.w	r2, [r5, #956]	; 0x3bc
    HAL_PCD_MspInit(hpcd);
 800c5b0:	f017 f894 	bl	80236dc <HAL_PCD_MspInit>
  __HAL_PCD_DISABLE(hpcd);
 800c5b4:	6828      	ldr	r0, [r5, #0]
 800c5b6:	e773      	b.n	800c4a0 <HAL_PCD_Init+0x2c>
    return HAL_ERROR;
 800c5b8:	2401      	movs	r4, #1
}
 800c5ba:	4620      	mov	r0, r4
 800c5bc:	b00b      	add	sp, #44	; 0x2c
 800c5be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c5c0:	4628      	mov	r0, r5
 800c5c2:	f000 fcc7 	bl	800cf54 <HAL_PCDEx_ActivateLPM>
 800c5c6:	e7de      	b.n	800c586 <HAL_PCD_Init+0x112>
 800c5c8:	40040000 	.word	0x40040000
 800c5cc:	0802c4bc 	.word	0x0802c4bc

0800c5d0 <HAL_PCD_Start>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800c5d0:	f890 33bc 	ldrb.w	r3, [r0, #956]	; 0x3bc
 800c5d4:	2b01      	cmp	r3, #1
 800c5d6:	d00f      	beq.n	800c5f8 <HAL_PCD_Start+0x28>
 800c5d8:	2301      	movs	r3, #1
{
 800c5da:	b510      	push	{r4, lr}
 800c5dc:	4604      	mov	r4, r0
  __HAL_PCD_ENABLE(hpcd);
 800c5de:	6800      	ldr	r0, [r0, #0]
  __HAL_LOCK(hpcd);
 800c5e0:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  __HAL_PCD_ENABLE(hpcd);
 800c5e4:	f006 fde8 	bl	80131b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c5e8:	6820      	ldr	r0, [r4, #0]
 800c5ea:	f007 fa31 	bl	8013a50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c5ee:	2300      	movs	r3, #0

  return HAL_OK;
 800c5f0:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800c5f2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800c5f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800c5f8:	2002      	movs	r0, #2
}
 800c5fa:	4770      	bx	lr

0800c5fc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c5fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c600:	6807      	ldr	r7, [r0, #0]
{
 800c602:	b089      	sub	sp, #36	; 0x24
 800c604:	4604      	mov	r4, r0
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c606:	4638      	mov	r0, r7
 800c608:	f007 fa70 	bl	8013aec <USB_GetMode>
 800c60c:	b110      	cbz	r0, 800c614 <HAL_PCD_IRQHandler+0x18>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
    }
  }
}
 800c60e:	b009      	add	sp, #36	; 0x24
 800c610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c614:	4683      	mov	fp, r0
 800c616:	6820      	ldr	r0, [r4, #0]
 800c618:	f007 fa3a 	bl	8013a90 <USB_ReadInterrupts>
 800c61c:	2800      	cmp	r0, #0
 800c61e:	d0f6      	beq.n	800c60e <HAL_PCD_IRQHandler+0x12>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c620:	6820      	ldr	r0, [r4, #0]
 800c622:	f007 fa35 	bl	8013a90 <USB_ReadInterrupts>
 800c626:	f010 0f02 	tst.w	r0, #2
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c62a:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c62c:	d003      	beq.n	800c636 <HAL_PCD_IRQHandler+0x3a>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c62e:	6943      	ldr	r3, [r0, #20]
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	6143      	str	r3, [r0, #20]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c636:	f007 fa2b 	bl	8013a90 <USB_ReadInterrupts>
 800c63a:	f010 0f10 	tst.w	r0, #16
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c63e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c640:	d012      	beq.n	800c668 <HAL_PCD_IRQHandler+0x6c>
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c642:	6983      	ldr	r3, [r0, #24]
 800c644:	f023 0310 	bic.w	r3, r3, #16
 800c648:	6183      	str	r3, [r0, #24]
      temp = USBx->GRXSTSP;
 800c64a:	6a3d      	ldr	r5, [r7, #32]
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c64c:	f3c5 4343 	ubfx	r3, r5, #17, #4
      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800c650:	f005 060f 	and.w	r6, r5, #15
      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c654:	2b02      	cmp	r3, #2
 800c656:	f000 8253 	beq.w	800cb00 <HAL_PCD_IRQHandler+0x504>
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800c65a:	2b06      	cmp	r3, #6
 800c65c:	f000 81b1 	beq.w	800c9c2 <HAL_PCD_IRQHandler+0x3c6>
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c660:	6983      	ldr	r3, [r0, #24]
 800c662:	f043 0310 	orr.w	r3, r3, #16
 800c666:	6183      	str	r3, [r0, #24]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c668:	f007 fa12 	bl	8013a90 <USB_ReadInterrupts>
 800c66c:	f410 2f00 	tst.w	r0, #524288	; 0x80000
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c670:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c672:	f040 80cf 	bne.w	800c814 <HAL_PCD_IRQHandler+0x218>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c676:	f007 fa0b 	bl	8013a90 <USB_ReadInterrupts>
 800c67a:	f410 2f80 	tst.w	r0, #262144	; 0x40000
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c67e:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c680:	d175      	bne.n	800c76e <HAL_PCD_IRQHandler+0x172>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c682:	f007 fa05 	bl	8013a90 <USB_ReadInterrupts>
 800c686:	2800      	cmp	r0, #0
 800c688:	db5d      	blt.n	800c746 <HAL_PCD_IRQHandler+0x14a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c68a:	6820      	ldr	r0, [r4, #0]
 800c68c:	f007 fa00 	bl	8013a90 <USB_ReadInterrupts>
 800c690:	0500      	lsls	r0, r0, #20
 800c692:	d44d      	bmi.n	800c730 <HAL_PCD_IRQHandler+0x134>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800c694:	6820      	ldr	r0, [r4, #0]
 800c696:	f007 f9fb 	bl	8013a90 <USB_ReadInterrupts>
 800c69a:	0102      	lsls	r2, r0, #4
 800c69c:	d514      	bpl.n	800c6c8 <HAL_PCD_IRQHandler+0xcc>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800c69e:	6822      	ldr	r2, [r4, #0]
 800c6a0:	6953      	ldr	r3, [r2, #20]
 800c6a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6a6:	6153      	str	r3, [r2, #20]
      if (hpcd->LPM_State == LPM_L0)
 800c6a8:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	f040 8172 	bne.w	800c996 <HAL_PCD_IRQHandler+0x39a>
        hpcd->LPM_State = LPM_L1;
 800c6b2:	2101      	movs	r1, #1
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c6b4:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L1;
 800c6b6:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800c6ba:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800c6bc:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800c6c0:	f8c4 33f8 	str.w	r3, [r4, #1016]	; 0x3f8
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800c6c4:	f017 f978 	bl	80239b8 <HAL_PCDEx_LPM_Callback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c6c8:	6820      	ldr	r0, [r4, #0]
 800c6ca:	f007 f9e1 	bl	8013a90 <USB_ReadInterrupts>
 800c6ce:	04c3      	lsls	r3, r0, #19
 800c6d0:	f100 8116 	bmi.w	800c900 <HAL_PCD_IRQHandler+0x304>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c6d4:	6820      	ldr	r0, [r4, #0]
 800c6d6:	f007 f9db 	bl	8013a90 <USB_ReadInterrupts>
 800c6da:	f410 5f00 	tst.w	r0, #8192	; 0x2000
      (void)USB_ActivateSetup(hpcd->Instance);
 800c6de:	6820      	ldr	r0, [r4, #0]
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c6e0:	f040 80f7 	bne.w	800c8d2 <HAL_PCD_IRQHandler+0x2d6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c6e4:	f007 f9d4 	bl	8013a90 <USB_ReadInterrupts>
 800c6e8:	0707      	lsls	r7, r0, #28
 800c6ea:	f100 80e9 	bmi.w	800c8c0 <HAL_PCD_IRQHandler+0x2c4>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c6ee:	6820      	ldr	r0, [r4, #0]
 800c6f0:	f007 f9ce 	bl	8013a90 <USB_ReadInterrupts>
 800c6f4:	02c6      	lsls	r6, r0, #11
 800c6f6:	f100 80d9 	bmi.w	800c8ac <HAL_PCD_IRQHandler+0x2b0>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c6fa:	6820      	ldr	r0, [r4, #0]
 800c6fc:	f007 f9c8 	bl	8013a90 <USB_ReadInterrupts>
 800c700:	0285      	lsls	r5, r0, #10
 800c702:	f100 80c9 	bmi.w	800c898 <HAL_PCD_IRQHandler+0x29c>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c706:	6820      	ldr	r0, [r4, #0]
 800c708:	f007 f9c2 	bl	8013a90 <USB_ReadInterrupts>
 800c70c:	0040      	lsls	r0, r0, #1
 800c70e:	f100 80ba 	bmi.w	800c886 <HAL_PCD_IRQHandler+0x28a>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c712:	6820      	ldr	r0, [r4, #0]
 800c714:	f007 f9bc 	bl	8013a90 <USB_ReadInterrupts>
 800c718:	0741      	lsls	r1, r0, #29
 800c71a:	f57f af78 	bpl.w	800c60e <HAL_PCD_IRQHandler+0x12>
      temp = hpcd->Instance->GOTGINT;
 800c71e:	6823      	ldr	r3, [r4, #0]
 800c720:	685d      	ldr	r5, [r3, #4]
      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c722:	076a      	lsls	r2, r5, #29
 800c724:	f100 820d 	bmi.w	800cb42 <HAL_PCD_IRQHandler+0x546>
      hpcd->Instance->GOTGINT |= temp;
 800c728:	685a      	ldr	r2, [r3, #4]
 800c72a:	432a      	orrs	r2, r5
 800c72c:	605a      	str	r2, [r3, #4]
 800c72e:	e76e      	b.n	800c60e <HAL_PCD_IRQHandler+0x12>
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c730:	f8d7 3808 	ldr.w	r3, [r7, #2056]	; 0x808
 800c734:	07d9      	lsls	r1, r3, #31
 800c736:	f100 8200 	bmi.w	800cb3a <HAL_PCD_IRQHandler+0x53e>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c73a:	6820      	ldr	r0, [r4, #0]
 800c73c:	6943      	ldr	r3, [r0, #20]
 800c73e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c742:	6143      	str	r3, [r0, #20]
 800c744:	e7a7      	b.n	800c696 <HAL_PCD_IRQHandler+0x9a>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c746:	f8d7 2804 	ldr.w	r2, [r7, #2052]	; 0x804
 800c74a:	f022 0201 	bic.w	r2, r2, #1
 800c74e:	f8c7 2804 	str.w	r2, [r7, #2052]	; 0x804
      if (hpcd->LPM_State == LPM_L1)
 800c752:	f894 33f4 	ldrb.w	r3, [r4, #1012]	; 0x3f4
 800c756:	2b01      	cmp	r3, #1
 800c758:	f000 812c 	beq.w	800c9b4 <HAL_PCD_IRQHandler+0x3b8>
        HAL_PCD_ResumeCallback(hpcd);
 800c75c:	4620      	mov	r0, r4
 800c75e:	f017 f859 	bl	8023814 <HAL_PCD_ResumeCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c762:	6820      	ldr	r0, [r4, #0]
 800c764:	6943      	ldr	r3, [r0, #20]
 800c766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c76a:	6143      	str	r3, [r0, #20]
 800c76c:	e78e      	b.n	800c68c <HAL_PCD_IRQHandler+0x90>
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c76e:	f007 f99b 	bl	8013aa8 <USB_ReadDevAllInEpInterrupt>
      while (ep_intr != 0U)
 800c772:	4680      	mov	r8, r0
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c774:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c776:	f1b8 0f00 	cmp.w	r8, #0
 800c77a:	d082      	beq.n	800c682 <HAL_PCD_IRQHandler+0x86>
 800c77c:	4626      	mov	r6, r4
 800c77e:	f507 6910 	add.w	r9, r7, #2304	; 0x900
      epnum = 0U;
 800c782:	f04f 0a00 	mov.w	sl, #0
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c786:	e9cd 7b03 	strd	r7, fp, [sp, #12]
 800c78a:	e009      	b.n	800c7a0 <HAL_PCD_IRQHandler+0x1a4>
      while (ep_intr != 0U)
 800c78c:	ea5f 0858 	movs.w	r8, r8, lsr #1
        epnum++;
 800c790:	f10a 0a01 	add.w	sl, sl, #1
      while (ep_intr != 0U)
 800c794:	f106 061c 	add.w	r6, r6, #28
 800c798:	f109 0920 	add.w	r9, r9, #32
 800c79c:	f000 8126 	beq.w	800c9ec <HAL_PCD_IRQHandler+0x3f0>
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c7a0:	f018 0f01 	tst.w	r8, #1
 800c7a4:	d0f2      	beq.n	800c78c <HAL_PCD_IRQHandler+0x190>
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c7a6:	fa5f f78a 	uxtb.w	r7, sl
 800c7aa:	4639      	mov	r1, r7
 800c7ac:	f007 f98e 	bl	8013acc <USB_ReadDevInEPInterrupt>
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c7b0:	07c3      	lsls	r3, r0, #31
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c7b2:	4605      	mov	r5, r0
          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c7b4:	d515      	bpl.n	800c7e2 <HAL_PCD_IRQHandler+0x1e6>
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c7b6:	9903      	ldr	r1, [sp, #12]
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c7b8:	f00a 030f 	and.w	r3, sl, #15
 800c7bc:	2201      	movs	r2, #1
 800c7be:	409a      	lsls	r2, r3
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c7c0:	f8d1 3834 	ldr.w	r3, [r1, #2100]	; 0x834
 800c7c4:	ea23 0302 	bic.w	r3, r3, r2
 800c7c8:	f8c1 3834 	str.w	r3, [r1, #2100]	; 0x834
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c7cc:	2301      	movs	r3, #1
            if (hpcd->Init.dma_enable == 1U)
 800c7ce:	6921      	ldr	r1, [r4, #16]
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c7d0:	f8c9 3008 	str.w	r3, [r9, #8]
            if (hpcd->Init.dma_enable == 1U)
 800c7d4:	4299      	cmp	r1, r3
 800c7d6:	f000 81b9 	beq.w	800cb4c <HAL_PCD_IRQHandler+0x550>
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c7da:	4639      	mov	r1, r7
 800c7dc:	4620      	mov	r0, r4
 800c7de:	f016 ffdd 	bl	802379c <HAL_PCD_DataInStageCallback>
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c7e2:	0728      	lsls	r0, r5, #28
 800c7e4:	d502      	bpl.n	800c7ec <HAL_PCD_IRQHandler+0x1f0>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c7e6:	2308      	movs	r3, #8
 800c7e8:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c7ec:	06e9      	lsls	r1, r5, #27
 800c7ee:	d502      	bpl.n	800c7f6 <HAL_PCD_IRQHandler+0x1fa>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c7f0:	2310      	movs	r3, #16
 800c7f2:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c7f6:	066a      	lsls	r2, r5, #25
 800c7f8:	d502      	bpl.n	800c800 <HAL_PCD_IRQHandler+0x204>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c800:	07ab      	lsls	r3, r5, #30
 800c802:	d502      	bpl.n	800c80a <HAL_PCD_IRQHandler+0x20e>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c804:	2302      	movs	r3, #2
 800c806:	f8c9 3008 	str.w	r3, [r9, #8]
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c80a:	062d      	lsls	r5, r5, #24
 800c80c:	f100 80f1 	bmi.w	800c9f2 <HAL_PCD_IRQHandler+0x3f6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c810:	6820      	ldr	r0, [r4, #0]
 800c812:	e7bb      	b.n	800c78c <HAL_PCD_IRQHandler+0x190>
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c814:	f007 f940 	bl	8013a98 <USB_ReadDevAllOutEpInterrupt>
      while (ep_intr != 0U)
 800c818:	4605      	mov	r5, r0
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c81a:	6820      	ldr	r0, [r4, #0]
      while (ep_intr != 0U)
 800c81c:	2d00      	cmp	r5, #0
 800c81e:	f43f af2a 	beq.w	800c676 <HAL_PCD_IRQHandler+0x7a>
 800c822:	f507 6630 	add.w	r6, r7, #2816	; 0xb00
 800c826:	46a2      	mov	sl, r4
      epnum = 0U;
 800c828:	f04f 0800 	mov.w	r8, #0
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c82c:	9703      	str	r7, [sp, #12]
 800c82e:	e008      	b.n	800c842 <HAL_PCD_IRQHandler+0x246>
      while (ep_intr != 0U)
 800c830:	086d      	lsrs	r5, r5, #1
        epnum++;
 800c832:	f108 0801 	add.w	r8, r8, #1
      while (ep_intr != 0U)
 800c836:	f106 0620 	add.w	r6, r6, #32
 800c83a:	f10a 0a1c 	add.w	sl, sl, #28
 800c83e:	f000 80d3 	beq.w	800c9e8 <HAL_PCD_IRQHandler+0x3ec>
        if ((ep_intr & 0x1U) != 0U)
 800c842:	07ef      	lsls	r7, r5, #31
 800c844:	d5f4      	bpl.n	800c830 <HAL_PCD_IRQHandler+0x234>
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c846:	fa5f f788 	uxtb.w	r7, r8
 800c84a:	4639      	mov	r1, r7
 800c84c:	f007 f934 	bl	8013ab8 <USB_ReadDevOutEPInterrupt>
 800c850:	4681      	mov	r9, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c852:	6820      	ldr	r0, [r4, #0]
          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c854:	f019 0f01 	tst.w	r9, #1
 800c858:	f040 8135 	bne.w	800cac6 <HAL_PCD_IRQHandler+0x4ca>
          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c85c:	f019 0f08 	tst.w	r9, #8
 800c860:	f040 8119 	bne.w	800ca96 <HAL_PCD_IRQHandler+0x49a>
          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c864:	f019 0f10 	tst.w	r9, #16
 800c868:	d001      	beq.n	800c86e <HAL_PCD_IRQHandler+0x272>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c86a:	2310      	movs	r3, #16
 800c86c:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c86e:	f019 0f20 	tst.w	r9, #32
 800c872:	d001      	beq.n	800c878 <HAL_PCD_IRQHandler+0x27c>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c874:	2320      	movs	r3, #32
 800c876:	60b3      	str	r3, [r6, #8]
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c878:	f419 5f00 	tst.w	r9, #8192	; 0x2000
 800c87c:	d0d8      	beq.n	800c830 <HAL_PCD_IRQHandler+0x234>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c87e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c882:	60b3      	str	r3, [r6, #8]
 800c884:	e7d4      	b.n	800c830 <HAL_PCD_IRQHandler+0x234>
      HAL_PCD_ConnectCallback(hpcd);
 800c886:	4620      	mov	r0, r4
 800c888:	f016 ffd0 	bl	802382c <HAL_PCD_ConnectCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c88c:	6820      	ldr	r0, [r4, #0]
 800c88e:	6943      	ldr	r3, [r0, #20]
 800c890:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c894:	6143      	str	r3, [r0, #20]
 800c896:	e73d      	b.n	800c714 <HAL_PCD_IRQHandler+0x118>
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c898:	4620      	mov	r0, r4
 800c89a:	2100      	movs	r1, #0
 800c89c:	f016 ffbe 	bl	802381c <HAL_PCD_ISOOUTIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c8a0:	6820      	ldr	r0, [r4, #0]
 800c8a2:	6943      	ldr	r3, [r0, #20]
 800c8a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c8a8:	6143      	str	r3, [r0, #20]
 800c8aa:	e72d      	b.n	800c708 <HAL_PCD_IRQHandler+0x10c>
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c8ac:	4620      	mov	r0, r4
 800c8ae:	2100      	movs	r1, #0
 800c8b0:	f016 ffb8 	bl	8023824 <HAL_PCD_ISOINIncompleteCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c8b4:	6820      	ldr	r0, [r4, #0]
 800c8b6:	6943      	ldr	r3, [r0, #20]
 800c8b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c8bc:	6143      	str	r3, [r0, #20]
 800c8be:	e71d      	b.n	800c6fc <HAL_PCD_IRQHandler+0x100>
      HAL_PCD_SOFCallback(hpcd);
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f016 ff75 	bl	80237b0 <HAL_PCD_SOFCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c8c6:	6820      	ldr	r0, [r4, #0]
 800c8c8:	6943      	ldr	r3, [r0, #20]
 800c8ca:	f003 0308 	and.w	r3, r3, #8
 800c8ce:	6143      	str	r3, [r0, #20]
 800c8d0:	e70e      	b.n	800c6f0 <HAL_PCD_IRQHandler+0xf4>
      (void)USB_ActivateSetup(hpcd->Instance);
 800c8d2:	f007 f90f 	bl	8013af4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c8d6:	6820      	ldr	r0, [r4, #0]
 800c8d8:	f006 fdc0 	bl	801345c <USB_GetDevSpeed>
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c8dc:	6825      	ldr	r5, [r4, #0]
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c8de:	60e0      	str	r0, [r4, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c8e0:	f000 ff86 	bl	800d7f0 <HAL_RCC_GetHCLKFreq>
 800c8e4:	7b22      	ldrb	r2, [r4, #12]
 800c8e6:	4601      	mov	r1, r0
 800c8e8:	4628      	mov	r0, r5
 800c8ea:	f006 fbeb 	bl	80130c4 <USB_SetTurnaroundTime>
      HAL_PCD_ResetCallback(hpcd);
 800c8ee:	4620      	mov	r0, r4
 800c8f0:	f016 ff62 	bl	80237b8 <HAL_PCD_ResetCallback>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c8f4:	6820      	ldr	r0, [r4, #0]
 800c8f6:	6943      	ldr	r3, [r0, #20]
 800c8f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c8fc:	6143      	str	r3, [r0, #20]
 800c8fe:	e6f1      	b.n	800c6e4 <HAL_PCD_IRQHandler+0xe8>
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c900:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 800c904:	f507 6500 	add.w	r5, r7, #2048	; 0x800
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c908:	2110      	movs	r1, #16
 800c90a:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c90c:	f023 0301 	bic.w	r3, r3, #1
 800c910:	606b      	str	r3, [r5, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c912:	f006 fc97 	bl	8013244 <USB_FlushTxFifo>
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c916:	6860      	ldr	r0, [r4, #4]
 800c918:	b1e0      	cbz	r0, 800c954 <HAL_PCD_IRQHandler+0x358>
 800c91a:	f507 6310 	add.w	r3, r7, #2304	; 0x900
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c91e:	f64f 317f 	movw	r1, #64383	; 0xfb7f
 800c922:	6099      	str	r1, [r3, #8]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c924:	f10b 0b01 	add.w	fp, fp, #1
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c928:	681a      	ldr	r2, [r3, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c92a:	3320      	adds	r3, #32
 800c92c:	4583      	cmp	fp, r0
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c92e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800c932:	f843 2c20 	str.w	r2, [r3, #-32]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c936:	f8c3 11e8 	str.w	r1, [r3, #488]	; 0x1e8
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c93a:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800c93e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800c942:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c946:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800c94a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 800c94e:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c952:	d1e6      	bne.n	800c922 <HAL_PCD_IRQHandler+0x326>
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c954:	69eb      	ldr	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c956:	6b22      	ldr	r2, [r4, #48]	; 0x30
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c958:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800c95c:	61eb      	str	r3, [r5, #28]
      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c95e:	b9f2      	cbnz	r2, 800c99e <HAL_PCD_IRQHandler+0x3a2>
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c960:	696a      	ldr	r2, [r5, #20]
 800c962:	f242 032b 	movw	r3, #8235	; 0x202b
 800c966:	4313      	orrs	r3, r2
 800c968:	616b      	str	r3, [r5, #20]
        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c96a:	692b      	ldr	r3, [r5, #16]
 800c96c:	f043 030b 	orr.w	r3, r3, #11
 800c970:	612b      	str	r3, [r5, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c972:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c976:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800c97a:	7c21      	ldrb	r1, [r4, #16]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c97c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c980:	6820      	ldr	r0, [r4, #0]
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c982:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c986:	f007 f8cb 	bl	8013b20 <USB_EP0_OutStart>
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c98a:	6820      	ldr	r0, [r4, #0]
 800c98c:	6943      	ldr	r3, [r0, #20]
 800c98e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c992:	6143      	str	r3, [r0, #20]
 800c994:	e69f      	b.n	800c6d6 <HAL_PCD_IRQHandler+0xda>
        HAL_PCD_SuspendCallback(hpcd);
 800c996:	4620      	mov	r0, r4
 800c998:	f016 ff24 	bl	80237e4 <HAL_PCD_SuspendCallback>
 800c99c:	e694      	b.n	800c6c8 <HAL_PCD_IRQHandler+0xcc>
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c99e:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800c9a2:	f043 030b 	orr.w	r3, r3, #11
 800c9a6:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c9aa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 800c9ac:	f043 030b 	orr.w	r3, r3, #11
 800c9b0:	646b      	str	r3, [r5, #68]	; 0x44
 800c9b2:	e7de      	b.n	800c972 <HAL_PCD_IRQHandler+0x376>
        hpcd->LPM_State = LPM_L0;
 800c9b4:	2100      	movs	r1, #0
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c9b6:	4620      	mov	r0, r4
        hpcd->LPM_State = LPM_L0;
 800c9b8:	f884 13f4 	strb.w	r1, [r4, #1012]	; 0x3f4
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c9bc:	f016 fffc 	bl	80239b8 <HAL_PCDEx_LPM_Callback>
 800c9c0:	e6cf      	b.n	800c762 <HAL_PCD_IRQHandler+0x166>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c9c2:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c9c6:	2208      	movs	r2, #8
 800c9c8:	f504 7171 	add.w	r1, r4, #964	; 0x3c4
 800c9cc:	4638      	mov	r0, r7
 800c9ce:	f006 ffa9 	bl	8013924 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c9d2:	f3c5 130a 	ubfx	r3, r5, #4, #11
 800c9d6:	eb04 0286 	add.w	r2, r4, r6, lsl #2
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c9da:	6820      	ldr	r0, [r4, #0]
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c9dc:	f8d2 1214 	ldr.w	r1, [r2, #532]	; 0x214
 800c9e0:	440b      	add	r3, r1
 800c9e2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 800c9e6:	e63b      	b.n	800c660 <HAL_PCD_IRQHandler+0x64>
 800c9e8:	9f03      	ldr	r7, [sp, #12]
 800c9ea:	e644      	b.n	800c676 <HAL_PCD_IRQHandler+0x7a>
 800c9ec:	e9dd 7b03 	ldrd	r7, fp, [sp, #12]
 800c9f0:	e647      	b.n	800c682 <HAL_PCD_IRQHandler+0x86>
  if (ep->xfer_count > ep->xfer_len)
 800c9f2:	e9d6 5314 	ldrd	r5, r3, [r6, #80]	; 0x50
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9f6:	f8d4 b000 	ldr.w	fp, [r4]
  if (ep->xfer_count > ep->xfer_len)
 800c9fa:	42ab      	cmp	r3, r5
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9fc:	4658      	mov	r0, fp
  if (ep->xfer_count > ep->xfer_len)
 800c9fe:	f63f aec5 	bhi.w	800c78c <HAL_PCD_IRQHandler+0x190>
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca02:	f50b 6210 	add.w	r2, fp, #2304	; 0x900
  len32b = (len + 3U) / 4U;
 800ca06:	6c71      	ldr	r1, [r6, #68]	; 0x44
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca08:	f8cd b01c 	str.w	fp, [sp, #28]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca0c:	eb02 124a 	add.w	r2, r2, sl, lsl #5
 800ca10:	9205      	str	r2, [sp, #20]
  len = ep->xfer_len - ep->xfer_count;
 800ca12:	1aea      	subs	r2, r5, r3
  len32b = (len + 3U) / 4U;
 800ca14:	428a      	cmp	r2, r1
 800ca16:	bf28      	it	cs
 800ca18:	460a      	movcs	r2, r1
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca1a:	9905      	ldr	r1, [sp, #20]
 800ca1c:	6989      	ldr	r1, [r1, #24]
  len32b = (len + 3U) / 4U;
 800ca1e:	3203      	adds	r2, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca20:	b289      	uxth	r1, r1
 800ca22:	ebb1 0f92 	cmp.w	r1, r2, lsr #2
 800ca26:	f0c0 80bc 	bcc.w	800cba2 <HAL_PCD_IRQHandler+0x5a6>
 800ca2a:	f8cd 8018 	str.w	r8, [sp, #24]
 800ca2e:	46a0      	mov	r8, r4
 800ca30:	9c05      	ldr	r4, [sp, #20]
 800ca32:	e01a      	b.n	800ca6a <HAL_PCD_IRQHandler+0x46e>
 800ca34:	6c73      	ldr	r3, [r6, #68]	; 0x44
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800ca36:	463a      	mov	r2, r7
 800ca38:	6cb1      	ldr	r1, [r6, #72]	; 0x48
 800ca3a:	4658      	mov	r0, fp
 800ca3c:	429d      	cmp	r5, r3
 800ca3e:	bf28      	it	cs
 800ca40:	461d      	movcs	r5, r3
 800ca42:	f898 3010 	ldrb.w	r3, [r8, #16]
 800ca46:	9300      	str	r3, [sp, #0]
 800ca48:	b2ab      	uxth	r3, r5
 800ca4a:	f006 ff55 	bl	80138f8 <USB_WritePacket>
    ep->xfer_buff  += len;
 800ca4e:	6cb3      	ldr	r3, [r6, #72]	; 0x48
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca50:	69a1      	ldr	r1, [r4, #24]
    ep->xfer_buff  += len;
 800ca52:	442b      	add	r3, r5
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca54:	b289      	uxth	r1, r1
    ep->xfer_buff  += len;
 800ca56:	64b3      	str	r3, [r6, #72]	; 0x48
    ep->xfer_count += len;
 800ca58:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800ca5a:	442b      	add	r3, r5
    len32b = (len + 3U) / 4U;
 800ca5c:	3503      	adds	r5, #3
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca5e:	ebb1 0f95 	cmp.w	r1, r5, lsr #2
    ep->xfer_count += len;
 800ca62:	6573      	str	r3, [r6, #84]	; 0x54
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800ca64:	f0c0 8096 	bcc.w	800cb94 <HAL_PCD_IRQHandler+0x598>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ca68:	6d35      	ldr	r5, [r6, #80]	; 0x50
 800ca6a:	42ab      	cmp	r3, r5
    len = ep->xfer_len - ep->xfer_count;
 800ca6c:	eba5 0503 	sub.w	r5, r5, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800ca70:	d3e0      	bcc.n	800ca34 <HAL_PCD_IRQHandler+0x438>
 800ca72:	4644      	mov	r4, r8
 800ca74:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800ca78:	f8d4 b000 	ldr.w	fp, [r4]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca7c:	9b07      	ldr	r3, [sp, #28]
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ca7e:	2201      	movs	r2, #1
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800ca80:	4658      	mov	r0, fp
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca82:	f503 6100 	add.w	r1, r3, #2048	; 0x800
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800ca86:	f00a 030f 	and.w	r3, sl, #15
 800ca8a:	409a      	lsls	r2, r3
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800ca8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800ca8e:	ea23 0302 	bic.w	r3, r3, r2
 800ca92:	634b      	str	r3, [r1, #52]	; 0x34
 800ca94:	e67a      	b.n	800c78c <HAL_PCD_IRQHandler+0x190>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ca96:	2208      	movs	r2, #8
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ca98:	eb00 1348 	add.w	r3, r0, r8, lsl #5
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800ca9c:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ca9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800caa2:	6c02      	ldr	r2, [r0, #64]	; 0x40

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800caa4:	485f      	ldr	r0, [pc, #380]	; (800cc24 <HAL_PCD_IRQHandler+0x628>)
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800caa6:	6899      	ldr	r1, [r3, #8]
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800caa8:	4282      	cmp	r2, r0
 800caaa:	d961      	bls.n	800cb70 <HAL_PCD_IRQHandler+0x574>
 800caac:	040a      	lsls	r2, r1, #16
 800caae:	d502      	bpl.n	800cab6 <HAL_PCD_IRQHandler+0x4ba>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cab0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800cab4:	609a      	str	r2, [r3, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cab6:	4620      	mov	r0, r4
 800cab8:	f016 fe60 	bl	802377c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cabc:	6921      	ldr	r1, [r4, #16]
 800cabe:	2901      	cmp	r1, #1
 800cac0:	d07f      	beq.n	800cbc2 <HAL_PCD_IRQHandler+0x5c6>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cac2:	6820      	ldr	r0, [r4, #0]
 800cac4:	e6ce      	b.n	800c864 <HAL_PCD_IRQHandler+0x268>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800cac6:	2201      	movs	r2, #1
  if (hpcd->Init.dma_enable == 1U)
 800cac8:	6921      	ldr	r1, [r4, #16]
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800caca:	60b2      	str	r2, [r6, #8]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cacc:	f500 6230 	add.w	r2, r0, #2816	; 0xb00
  if (hpcd->Init.dma_enable == 1U)
 800cad0:	2901      	cmp	r1, #1
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cad2:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cad6:	eb02 1248 	add.w	r2, r2, r8, lsl #5
 800cada:	6893      	ldr	r3, [r2, #8]
  if (hpcd->Init.dma_enable == 1U)
 800cadc:	d04d      	beq.n	800cb7a <HAL_PCD_IRQHandler+0x57e>
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cade:	4952      	ldr	r1, [pc, #328]	; (800cc28 <HAL_PCD_IRQHandler+0x62c>)
 800cae0:	458c      	cmp	ip, r1
 800cae2:	d062      	beq.n	800cbaa <HAL_PCD_IRQHandler+0x5ae>
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cae4:	f1b8 0f00 	cmp.w	r8, #0
 800cae8:	d104      	bne.n	800caf4 <HAL_PCD_IRQHandler+0x4f8>
 800caea:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800caee:	2a00      	cmp	r2, #0
 800caf0:	f000 8092 	beq.w	800cc18 <HAL_PCD_IRQHandler+0x61c>
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800caf4:	4620      	mov	r0, r4
 800caf6:	4639      	mov	r1, r7
 800caf8:	f016 fe46 	bl	8023788 <HAL_PCD_DataOutStageCallback>
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cafc:	6820      	ldr	r0, [r4, #0]
 800cafe:	e6ad      	b.n	800c85c <HAL_PCD_IRQHandler+0x260>
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800cb00:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800cb04:	421d      	tst	r5, r3
 800cb06:	f43f adab 	beq.w	800c660 <HAL_PCD_IRQHandler+0x64>
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800cb0a:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
 800cb0e:	f3c5 120a 	ubfx	r2, r5, #4, #11
 800cb12:	4638      	mov	r0, r7
 800cb14:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800cb18:	4615      	mov	r5, r2
 800cb1a:	f8d6 1208 	ldr.w	r1, [r6, #520]	; 0x208
 800cb1e:	f006 ff01 	bl	8013924 <USB_ReadPacket>
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cb22:	f8d6 3208 	ldr.w	r3, [r6, #520]	; 0x208
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800cb26:	6820      	ldr	r0, [r4, #0]
          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cb28:	442b      	add	r3, r5
 800cb2a:	f8c6 3208 	str.w	r3, [r6, #520]	; 0x208
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800cb2e:	f8d6 3214 	ldr.w	r3, [r6, #532]	; 0x214
 800cb32:	442b      	add	r3, r5
 800cb34:	f8c6 3214 	str.w	r3, [r6, #532]	; 0x214
 800cb38:	e592      	b.n	800c660 <HAL_PCD_IRQHandler+0x64>
        HAL_PCD_SuspendCallback(hpcd);
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	f016 fe52 	bl	80237e4 <HAL_PCD_SuspendCallback>
 800cb40:	e5fb      	b.n	800c73a <HAL_PCD_IRQHandler+0x13e>
        HAL_PCD_DisconnectCallback(hpcd);
 800cb42:	4620      	mov	r0, r4
 800cb44:	f016 fe76 	bl	8023834 <HAL_PCD_DisconnectCallback>
      hpcd->Instance->GOTGINT |= temp;
 800cb48:	6823      	ldr	r3, [r4, #0]
 800cb4a:	e5ed      	b.n	800c728 <HAL_PCD_IRQHandler+0x12c>
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800cb4c:	e9d6 2311 	ldrd	r2, r3, [r6, #68]	; 0x44
 800cb50:	4413      	add	r3, r2
 800cb52:	64b3      	str	r3, [r6, #72]	; 0x48
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800cb54:	f1ba 0f00 	cmp.w	sl, #0
 800cb58:	f47f ae3f 	bne.w	800c7da <HAL_PCD_IRQHandler+0x1de>
 800cb5c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	f47f ae3b 	bne.w	800c7da <HAL_PCD_IRQHandler+0x1de>
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cb64:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cb68:	6820      	ldr	r0, [r4, #0]
 800cb6a:	f006 ffd9 	bl	8013b20 <USB_EP0_OutStart>
 800cb6e:	e634      	b.n	800c7da <HAL_PCD_IRQHandler+0x1de>
  HAL_PCD_SetupStageCallback(hpcd);
 800cb70:	4620      	mov	r0, r4
 800cb72:	f016 fe03 	bl	802377c <HAL_PCD_SetupStageCallback>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800cb76:	6820      	ldr	r0, [r4, #0]
 800cb78:	e674      	b.n	800c864 <HAL_PCD_IRQHandler+0x268>
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800cb7a:	0719      	lsls	r1, r3, #28
 800cb7c:	d51c      	bpl.n	800cbb8 <HAL_PCD_IRQHandler+0x5bc>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cb7e:	4929      	ldr	r1, [pc, #164]	; (800cc24 <HAL_PCD_IRQHandler+0x628>)
 800cb80:	458c      	cmp	ip, r1
 800cb82:	f67f ae6b 	bls.w	800c85c <HAL_PCD_IRQHandler+0x260>
 800cb86:	041f      	lsls	r7, r3, #16
 800cb88:	f57f ae68 	bpl.w	800c85c <HAL_PCD_IRQHandler+0x260>
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cb8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb90:	6093      	str	r3, [r2, #8]
 800cb92:	e663      	b.n	800c85c <HAL_PCD_IRQHandler+0x260>
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cb94:	4644      	mov	r4, r8
  if (ep->xfer_len <= ep->xfer_count)
 800cb96:	6d35      	ldr	r5, [r6, #80]	; 0x50
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800cb98:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800cb9c:	f8d4 b000 	ldr.w	fp, [r4]
 800cba0:	4658      	mov	r0, fp
  if (ep->xfer_len <= ep->xfer_count)
 800cba2:	42ab      	cmp	r3, r5
 800cba4:	f4ff adf2 	bcc.w	800c78c <HAL_PCD_IRQHandler+0x190>
 800cba8:	e768      	b.n	800ca7c <HAL_PCD_IRQHandler+0x480>
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cbaa:	0419      	lsls	r1, r3, #16
 800cbac:	d4ee      	bmi.n	800cb8c <HAL_PCD_IRQHandler+0x590>
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cbae:	0699      	lsls	r1, r3, #26
 800cbb0:	d5a0      	bpl.n	800caf4 <HAL_PCD_IRQHandler+0x4f8>
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cbb2:	2120      	movs	r1, #32
 800cbb4:	6091      	str	r1, [r2, #8]
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cbb6:	e79d      	b.n	800caf4 <HAL_PCD_IRQHandler+0x4f8>
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800cbb8:	0699      	lsls	r1, r3, #26
 800cbba:	d508      	bpl.n	800cbce <HAL_PCD_IRQHandler+0x5d2>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cbbc:	2320      	movs	r3, #32
 800cbbe:	6093      	str	r3, [r2, #8]
 800cbc0:	e64c      	b.n	800c85c <HAL_PCD_IRQHandler+0x260>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cbc2:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cbc6:	6820      	ldr	r0, [r4, #0]
 800cbc8:	f006 ffaa 	bl	8013b20 <USB_EP0_OutStart>
 800cbcc:	e779      	b.n	800cac2 <HAL_PCD_IRQHandler+0x4c6>
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800cbce:	f013 0f28 	tst.w	r3, #40	; 0x28
 800cbd2:	f47f ae43 	bne.w	800c85c <HAL_PCD_IRQHandler+0x260>
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cbd6:	4913      	ldr	r1, [pc, #76]	; (800cc24 <HAL_PCD_IRQHandler+0x628>)
 800cbd8:	458c      	cmp	ip, r1
 800cbda:	d901      	bls.n	800cbe0 <HAL_PCD_IRQHandler+0x5e4>
 800cbdc:	041b      	lsls	r3, r3, #16
 800cbde:	d4d5      	bmi.n	800cb8c <HAL_PCD_IRQHandler+0x590>
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbe0:	6912      	ldr	r2, [r2, #16]
          hpcd->OUT_ep[epnum].maxpacket -
 800cbe2:	f8da 1204 	ldr.w	r1, [sl, #516]	; 0x204
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cbe6:	f3c2 0212 	ubfx	r2, r2, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800cbea:	1a8a      	subs	r2, r1, r2
        hpcd->OUT_ep[epnum].xfer_count =
 800cbec:	f8ca 2214 	str.w	r2, [sl, #532]	; 0x214
        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800cbf0:	f8da 2208 	ldr.w	r2, [sl, #520]	; 0x208
 800cbf4:	440a      	add	r2, r1
 800cbf6:	f8ca 2208 	str.w	r2, [sl, #520]	; 0x208
        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cbfa:	f1b8 0f00 	cmp.w	r8, #0
 800cbfe:	f47f af79 	bne.w	800caf4 <HAL_PCD_IRQHandler+0x4f8>
 800cc02:	f8d4 2210 	ldr.w	r2, [r4, #528]	; 0x210
 800cc06:	2a00      	cmp	r2, #0
 800cc08:	f47f af74 	bne.w	800caf4 <HAL_PCD_IRQHandler+0x4f8>
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cc0c:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cc10:	2101      	movs	r1, #1
 800cc12:	f006 ff85 	bl	8013b20 <USB_EP0_OutStart>
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cc16:	e76d      	b.n	800caf4 <HAL_PCD_IRQHandler+0x4f8>
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cc18:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800cc1c:	4641      	mov	r1, r8
 800cc1e:	f006 ff7f 	bl	8013b20 <USB_EP0_OutStart>
 800cc22:	e767      	b.n	800caf4 <HAL_PCD_IRQHandler+0x4f8>
 800cc24:	4f54300a 	.word	0x4f54300a
 800cc28:	4f54310a 	.word	0x4f54310a

0800cc2c <HAL_PCD_SetAddress>:
  __HAL_LOCK(hpcd);
 800cc2c:	f890 23bc 	ldrb.w	r2, [r0, #956]	; 0x3bc
 800cc30:	2a01      	cmp	r2, #1
 800cc32:	d00e      	beq.n	800cc52 <HAL_PCD_SetAddress+0x26>
 800cc34:	2201      	movs	r2, #1
{
 800cc36:	b510      	push	{r4, lr}
 800cc38:	4604      	mov	r4, r0
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc3a:	6800      	ldr	r0, [r0, #0]
  hpcd->USB_Address = address;
 800cc3c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
  __HAL_LOCK(hpcd);
 800cc40:	f884 23bc 	strb.w	r2, [r4, #956]	; 0x3bc
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc44:	f006 fef2 	bl	8013a2c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cc48:	2300      	movs	r3, #0
  return HAL_OK;
 800cc4a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cc4c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cc50:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800cc52:	2002      	movs	r0, #2
}
 800cc54:	4770      	bx	lr
 800cc56:	bf00      	nop

0800cc58 <HAL_PCD_EP_Open>:
{
 800cc58:	b510      	push	{r4, lr}
 800cc5a:	f001 0e0f 	and.w	lr, r1, #15
  if ((ep_addr & 0x80U) == 0x80U)
 800cc5e:	0609      	lsls	r1, r1, #24
{
 800cc60:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800cc62:	d427      	bmi.n	800ccb4 <HAL_PCD_EP_Open+0x5c>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cc64:	f04f 0c1c 	mov.w	ip, #28
 800cc68:	fb0c 0c0e 	mla	ip, ip, lr, r0
 800cc6c:	f50c 71fe 	add.w	r1, ip, #508	; 0x1fc
    ep->is_in = 0U;
 800cc70:	ebce 0cce 	rsb	ip, lr, lr, lsl #3
 800cc74:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800cc78:	2000      	movs	r0, #0
 800cc7a:	f88c 01fd 	strb.w	r0, [ip, #509]	; 0x1fd
  ep->maxpacket = ep_mps;
 800cc7e:	608a      	str	r2, [r1, #8]
  if (ep->is_in != 0U)
 800cc80:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cc82:	f881 e000 	strb.w	lr, [r1]
  ep->type = ep_type;
 800cc86:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 800cc88:	b10a      	cbz	r2, 800cc8e <HAL_PCD_EP_Open+0x36>
    ep->tx_fifo_num = ep->num;
 800cc8a:	f8a1 e006 	strh.w	lr, [r1, #6]
  if (ep_type == EP_TYPE_BULK)
 800cc8e:	2b02      	cmp	r3, #2
 800cc90:	d101      	bne.n	800cc96 <HAL_PCD_EP_Open+0x3e>
    ep->data_pid_start = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 800cc96:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cc9a:	2b01      	cmp	r3, #1
 800cc9c:	d018      	beq.n	800ccd0 <HAL_PCD_EP_Open+0x78>
 800cc9e:	2301      	movs	r3, #1
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cca0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cca2:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cca6:	f006 fbe5 	bl	8013474 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ccaa:	2300      	movs	r3, #0
  return ret;
 800ccac:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ccae:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800ccb2:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccb4:	201c      	movs	r0, #28
    ep->is_in = 1U;
 800ccb6:	f04f 0c01 	mov.w	ip, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccba:	fb00 400e 	mla	r0, r0, lr, r4
 800ccbe:	f100 013c 	add.w	r1, r0, #60	; 0x3c
    ep->is_in = 1U;
 800ccc2:	ebce 00ce 	rsb	r0, lr, lr, lsl #3
 800ccc6:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800ccca:	f880 c03d 	strb.w	ip, [r0, #61]	; 0x3d
 800ccce:	e7d6      	b.n	800cc7e <HAL_PCD_EP_Open+0x26>
  __HAL_LOCK(hpcd);
 800ccd0:	2002      	movs	r0, #2
}
 800ccd2:	bd10      	pop	{r4, pc}

0800ccd4 <HAL_PCD_EP_Close>:
  if ((ep_addr & 0x80U) == 0x80U)
 800ccd4:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ccd8:	f001 030f 	and.w	r3, r1, #15
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccdc:	f04f 011c 	mov.w	r1, #28
{
 800cce0:	b510      	push	{r4, lr}
 800cce2:	4604      	mov	r4, r0
  if ((ep_addr & 0x80U) == 0x80U)
 800cce4:	d11a      	bne.n	800cd1c <HAL_PCD_EP_Close+0x48>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cce6:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ccea:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800ccee:	2000      	movs	r0, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccf0:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800ccf4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ccf8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num   = ep_addr & EP_ADDR_MSK;
 800ccfc:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800ccfe:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cd02:	2b01      	cmp	r3, #1
 800cd04:	d019      	beq.n	800cd3a <HAL_PCD_EP_Close+0x66>
 800cd06:	2301      	movs	r3, #1
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cd08:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cd0a:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cd0e:	f006 fbf9 	bl	8013504 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd12:	2300      	movs	r3, #0
  return HAL_OK;
 800cd14:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800cd16:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800cd1a:	bd10      	pop	{r4, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd1c:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800cd20:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
 800cd24:	2001      	movs	r0, #1
 800cd26:	eb04 0282 	add.w	r2, r4, r2, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd2a:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800cd2c:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num   = ep_addr & EP_ADDR_MSK;
 800cd30:	700b      	strb	r3, [r1, #0]
  __HAL_LOCK(hpcd);
 800cd32:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cd36:	2b01      	cmp	r3, #1
 800cd38:	d1e5      	bne.n	800cd06 <HAL_PCD_EP_Close+0x32>
 800cd3a:	2002      	movs	r0, #2
}
 800cd3c:	bd10      	pop	{r4, pc}
 800cd3e:	bf00      	nop

0800cd40 <HAL_PCD_EP_Receive>:
{
 800cd40:	b510      	push	{r4, lr}
 800cd42:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd46:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800cd48:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd4c:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800cd50:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd54:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
  ep->xfer_len = len;
 800cd58:	f8cc 3210 	str.w	r3, [ip, #528]	; 0x210
  ep->xfer_count = 0U;
 800cd5c:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800cd5e:	f8cc 2208 	str.w	r2, [ip, #520]	; 0x208
  ep->num = ep_addr & EP_ADDR_MSK;
 800cd62:	f88c 41fc 	strb.w	r4, [ip, #508]	; 0x1fc
  ep->xfer_count = 0U;
 800cd66:	f8cc 3214 	str.w	r3, [ip, #532]	; 0x214
  ep->is_in = 0U;
 800cd6a:	f88c 31fd 	strb.w	r3, [ip, #509]	; 0x1fd
  if (hpcd->Init.dma_enable == 1U)
 800cd6e:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd70:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800cd72:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800cd74:	bf08      	it	eq
 800cd76:	f8cc 220c 	streq.w	r2, [ip, #524]	; 0x20c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd7a:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cd7c:	b91c      	cbnz	r4, 800cd86 <HAL_PCD_EP_Receive+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd7e:	f006 fd37 	bl	80137f0 <USB_EP0StartXfer>
}
 800cd82:	2000      	movs	r0, #0
 800cd84:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cd86:	f006 fc1b 	bl	80135c0 <USB_EPStartXfer>
}
 800cd8a:	2000      	movs	r0, #0
 800cd8c:	bd10      	pop	{r4, pc}
 800cd8e:	bf00      	nop

0800cd90 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800cd90:	f001 010f 	and.w	r1, r1, #15
 800cd94:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800cd98:	eb00 0181 	add.w	r1, r0, r1, lsl #2
}
 800cd9c:	f8d1 0214 	ldr.w	r0, [r1, #532]	; 0x214
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop

0800cda4 <HAL_PCD_EP_Transmit>:
{
 800cda4:	b510      	push	{r4, lr}
 800cda6:	f001 040f 	and.w	r4, r1, #15
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdaa:	211c      	movs	r1, #28
  ep->xfer_buff = pBuf;
 800cdac:	ebc4 0cc4 	rsb	ip, r4, r4, lsl #3
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdb0:	fb01 0104 	mla	r1, r1, r4, r0
  ep->xfer_buff = pBuf;
 800cdb4:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cdb8:	313c      	adds	r1, #60	; 0x3c
  ep->xfer_len = len;
 800cdba:	f8cc 3050 	str.w	r3, [ip, #80]	; 0x50
  ep->xfer_count = 0U;
 800cdbe:	2300      	movs	r3, #0
  ep->xfer_buff = pBuf;
 800cdc0:	f8cc 2048 	str.w	r2, [ip, #72]	; 0x48
  ep->xfer_count = 0U;
 800cdc4:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
  ep->is_in = 1U;
 800cdc8:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdca:	f88c 403c 	strb.w	r4, [ip, #60]	; 0x3c
  ep->is_in = 1U;
 800cdce:	f88c 303d 	strb.w	r3, [ip, #61]	; 0x3d
  if (hpcd->Init.dma_enable == 1U)
 800cdd2:	6903      	ldr	r3, [r0, #16]
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdd4:	6800      	ldr	r0, [r0, #0]
  if (hpcd->Init.dma_enable == 1U)
 800cdd6:	2b01      	cmp	r3, #1
    ep->dma_addr = (uint32_t)pBuf;
 800cdd8:	bf08      	it	eq
 800cdda:	f8cc 204c 	streq.w	r2, [ip, #76]	; 0x4c
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdde:	b2da      	uxtb	r2, r3
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cde0:	b91c      	cbnz	r4, 800cdea <HAL_PCD_EP_Transmit+0x46>
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cde2:	f006 fd05 	bl	80137f0 <USB_EP0StartXfer>
}
 800cde6:	2000      	movs	r0, #0
 800cde8:	bd10      	pop	{r4, pc}
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cdea:	f006 fbe9 	bl	80135c0 <USB_EPStartXfer>
}
 800cdee:	2000      	movs	r0, #0
 800cdf0:	bd10      	pop	{r4, pc}
 800cdf2:	bf00      	nop

0800cdf4 <HAL_PCD_EP_SetStall>:
{
 800cdf4:	b538      	push	{r3, r4, r5, lr}
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cdf6:	6843      	ldr	r3, [r0, #4]
 800cdf8:	f001 050f 	and.w	r5, r1, #15
 800cdfc:	429d      	cmp	r5, r3
 800cdfe:	d834      	bhi.n	800ce6a <HAL_PCD_EP_SetStall+0x76>
  if ((0x80U & ep_addr) == 0x80U)
 800ce00:	060b      	lsls	r3, r1, #24
 800ce02:	4604      	mov	r4, r0
 800ce04:	d41d      	bmi.n	800ce42 <HAL_PCD_EP_SetStall+0x4e>
    ep = &hpcd->OUT_ep[ep_addr];
 800ce06:	221c      	movs	r2, #28
    ep->is_in = 0U;
 800ce08:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
    ep = &hpcd->OUT_ep[ep_addr];
 800ce0c:	fb02 0101 	mla	r1, r2, r1, r0
    ep->is_in = 0U;
 800ce10:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ce14:	2200      	movs	r2, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800ce16:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800ce1a:	f883 21fd 	strb.w	r2, [r3, #509]	; 0x1fd
  ep->is_stall = 1U;
 800ce1e:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce20:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ce22:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ce24:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d01c      	beq.n	800ce66 <HAL_PCD_EP_SetStall+0x72>
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ce2c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800ce2e:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPSetStall(hpcd->Instance, ep);
 800ce32:	f006 fd9b 	bl	801396c <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ce36:	b1d5      	cbz	r5, 800ce6e <HAL_PCD_EP_SetStall+0x7a>
  __HAL_UNLOCK(hpcd);
 800ce38:	2300      	movs	r3, #0
  return HAL_OK;
 800ce3a:	4618      	mov	r0, r3
  __HAL_UNLOCK(hpcd);
 800ce3c:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
}
 800ce40:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce42:	211c      	movs	r1, #28
    ep->is_in = 1U;
 800ce44:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
 800ce48:	2201      	movs	r2, #1
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce4a:	fb01 0105 	mla	r1, r1, r5, r0
    ep->is_in = 1U;
 800ce4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce52:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ce54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  ep->is_stall = 1U;
 800ce58:	2301      	movs	r3, #1
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce5a:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 800ce5c:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800ce5e:	f894 23bc 	ldrb.w	r2, [r4, #956]	; 0x3bc
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d1e2      	bne.n	800ce2c <HAL_PCD_EP_SetStall+0x38>
 800ce66:	2002      	movs	r0, #2
}
 800ce68:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ce6a:	2001      	movs	r0, #1
}
 800ce6c:	bd38      	pop	{r3, r4, r5, pc}
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800ce6e:	f504 7271 	add.w	r2, r4, #964	; 0x3c4
 800ce72:	7c21      	ldrb	r1, [r4, #16]
 800ce74:	6820      	ldr	r0, [r4, #0]
 800ce76:	f006 fe53 	bl	8013b20 <USB_EP0_OutStart>
 800ce7a:	e7dd      	b.n	800ce38 <HAL_PCD_EP_SetStall+0x44>

0800ce7c <HAL_PCD_EP_ClrStall>:
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ce7c:	6842      	ldr	r2, [r0, #4]
{
 800ce7e:	b538      	push	{r3, r4, r5, lr}
 800ce80:	f001 030f 	and.w	r3, r1, #15
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800ce84:	4293      	cmp	r3, r2
 800ce86:	d832      	bhi.n	800ceee <HAL_PCD_EP_ClrStall+0x72>
  if ((0x80U & ep_addr) == 0x80U)
 800ce88:	f011 0f80 	tst.w	r1, #128	; 0x80
 800ce8c:	4604      	mov	r4, r0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ce8e:	f04f 011c 	mov.w	r1, #28
    ep->is_in = 1U;
 800ce92:	ebc3 02c3 	rsb	r2, r3, r3, lsl #3
  if ((0x80U & ep_addr) == 0x80U)
 800ce96:	d119      	bne.n	800cecc <HAL_PCD_EP_ClrStall+0x50>
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce98:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 0U;
 800ce9c:	2000      	movs	r0, #0
 800ce9e:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800cea2:	2500      	movs	r5, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cea4:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
    ep->is_in = 0U;
 800cea8:	f882 01fd 	strb.w	r0, [r2, #509]	; 0x1fd
  ep->num = ep_addr & EP_ADDR_MSK;
 800ceac:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800ceae:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800ceb0:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d018      	beq.n	800ceea <HAL_PCD_EP_ClrStall+0x6e>
 800ceb8:	2301      	movs	r3, #1
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800ceba:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 800cebc:	f884 33bc 	strb.w	r3, [r4, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800cec0:	f006 fd88 	bl	80139d4 <USB_EPClearStall>
  return HAL_OK;
 800cec4:	4628      	mov	r0, r5
  __HAL_UNLOCK(hpcd);
 800cec6:	f884 53bc 	strb.w	r5, [r4, #956]	; 0x3bc
}
 800ceca:	bd38      	pop	{r3, r4, r5, pc}
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cecc:	fb01 4103 	mla	r1, r1, r3, r4
    ep->is_in = 1U;
 800ced0:	2001      	movs	r0, #1
 800ced2:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  ep->is_stall = 0U;
 800ced6:	2500      	movs	r5, #0
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ced8:	313c      	adds	r1, #60	; 0x3c
    ep->is_in = 1U;
 800ceda:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  ep->num = ep_addr & EP_ADDR_MSK;
 800cede:	700b      	strb	r3, [r1, #0]
  ep->is_stall = 0U;
 800cee0:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 800cee2:	f894 33bc 	ldrb.w	r3, [r4, #956]	; 0x3bc
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d1e6      	bne.n	800ceb8 <HAL_PCD_EP_ClrStall+0x3c>
 800ceea:	2002      	movs	r0, #2
}
 800ceec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800ceee:	2001      	movs	r0, #1
}
 800cef0:	bd38      	pop	{r3, r4, r5, pc}
 800cef2:	bf00      	nop

0800cef4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cef4:	b410      	push	{r4}
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cef6:	6804      	ldr	r4, [r0, #0]
 800cef8:	6a60      	ldr	r0, [r4, #36]	; 0x24

  if (fifo == 0U)
 800cefa:	b931      	cbnz	r1, 800cf0a <HAL_PCDEx_SetTxFiFo+0x16>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cefc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800cf00:	62a0      	str	r0, [r4, #40]	; 0x28
    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
  }

  return HAL_OK;
}
 800cf02:	2000      	movs	r0, #0
 800cf04:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf08:	4770      	bx	lr
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cf0a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    for (i = 0U; i < (fifo - 1U); i++)
 800cf0c:	f1b1 0c01 	subs.w	ip, r1, #1
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cf10:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800cf14:	d00b      	beq.n	800cf2e <HAL_PCDEx_SetTxFiFo+0x3a>
 800cf16:	2300      	movs	r3, #0
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf18:	f103 0140 	add.w	r1, r3, #64	; 0x40
    for (i = 0U; i < (fifo - 1U); i++)
 800cf1c:	3301      	adds	r3, #1
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf1e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    for (i = 0U; i < (fifo - 1U); i++)
 800cf22:	b2db      	uxtb	r3, r3
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf24:	6849      	ldr	r1, [r1, #4]
    for (i = 0U; i < (fifo - 1U); i++)
 800cf26:	4563      	cmp	r3, ip
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cf28:	eb00 4011 	add.w	r0, r0, r1, lsr #16
    for (i = 0U; i < (fifo - 1U); i++)
 800cf2c:	d3f4      	bcc.n	800cf18 <HAL_PCDEx_SetTxFiFo+0x24>
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cf2e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 800cf32:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800cf36:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
}
 800cf3a:	f85d 4b04 	ldr.w	r4, [sp], #4
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800cf3e:	f8cc 0004 	str.w	r0, [ip, #4]
}
 800cf42:	2000      	movs	r0, #0
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop

0800cf48 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800cf48:	4603      	mov	r3, r0
  hpcd->Instance->GRXFSIZ = size;

  return HAL_OK;
}
 800cf4a:	2000      	movs	r0, #0
  hpcd->Instance->GRXFSIZ = size;
 800cf4c:	681b      	ldr	r3, [r3, #0]
 800cf4e:	6259      	str	r1, [r3, #36]	; 0x24
}
 800cf50:	4770      	bx	lr
 800cf52:	bf00      	nop

0800cf54 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800cf54:	4603      	mov	r3, r0
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;

  hpcd->lpm_active = 1U;
  hpcd->LPM_State = LPM_L0;
 800cf56:	f04f 0c00 	mov.w	ip, #0
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cf5a:	4909      	ldr	r1, [pc, #36]	; (800cf80 <HAL_PCDEx_ActivateLPM+0x2c>)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cf5c:	681a      	ldr	r2, [r3, #0]

  return HAL_OK;
}
 800cf5e:	4660      	mov	r0, ip
{
 800cf60:	b410      	push	{r4}
  hpcd->lpm_active = 1U;
 800cf62:	2401      	movs	r4, #1
  hpcd->LPM_State = LPM_L0;
 800cf64:	f883 c3f4 	strb.w	ip, [r3, #1012]	; 0x3f4
  hpcd->lpm_active = 1U;
 800cf68:	f8c3 43fc 	str.w	r4, [r3, #1020]	; 0x3fc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cf6c:	6993      	ldr	r3, [r2, #24]
}
 800cf6e:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800cf72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cf76:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800cf78:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cf7a:	4319      	orrs	r1, r3
 800cf7c:	6551      	str	r1, [r2, #84]	; 0x54
}
 800cf7e:	4770      	bx	lr
 800cf80:	10000003 	.word	0x10000003

0800cf84 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cf84:	4a02      	ldr	r2, [pc, #8]	; (800cf90 <HAL_PWR_EnableBkUpAccess+0xc>)
 800cf86:	6813      	ldr	r3, [r2, #0]
 800cf88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf8c:	6013      	str	r3, [r2, #0]
}
 800cf8e:	4770      	bx	lr
 800cf90:	40007000 	.word	0x40007000

0800cf94 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800cf94:	4b1a      	ldr	r3, [pc, #104]	; (800d000 <HAL_PWREx_EnableOverDrive+0x6c>)
 800cf96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cf98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
{
 800cf9c:	b530      	push	{r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 800cf9e:	641a      	str	r2, [r3, #64]	; 0x40
{
 800cfa0:	b083      	sub	sp, #12
  __HAL_RCC_PWR_CLK_ENABLE();
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cfa4:	4c17      	ldr	r4, [pc, #92]	; (800d004 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800cfa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfaa:	9301      	str	r3, [sp, #4]
 800cfac:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 800cfae:	6823      	ldr	r3, [r4, #0]
 800cfb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800cfb4:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cfb6:	f7fa fe4f 	bl	8007c58 <HAL_GetTick>
 800cfba:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cfbc:	e005      	b.n	800cfca <HAL_PWREx_EnableOverDrive+0x36>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cfbe:	f7fa fe4b 	bl	8007c58 <HAL_GetTick>
 800cfc2:	1b40      	subs	r0, r0, r5
 800cfc4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cfc8:	d817      	bhi.n	800cffa <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800cfca:	6863      	ldr	r3, [r4, #4]
 800cfcc:	03da      	lsls	r2, r3, #15
 800cfce:	d5f6      	bpl.n	800cfbe <HAL_PWREx_EnableOverDrive+0x2a>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cfd0:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cfd2:	4d0c      	ldr	r5, [pc, #48]	; (800d004 <HAL_PWREx_EnableOverDrive+0x70>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800cfd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfd8:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800cfda:	f7fa fe3d 	bl	8007c58 <HAL_GetTick>
 800cfde:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cfe0:	e005      	b.n	800cfee <HAL_PWREx_EnableOverDrive+0x5a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800cfe2:	f7fa fe39 	bl	8007c58 <HAL_GetTick>
 800cfe6:	1b00      	subs	r0, r0, r4
 800cfe8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800cfec:	d805      	bhi.n	800cffa <HAL_PWREx_EnableOverDrive+0x66>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800cfee:	686b      	ldr	r3, [r5, #4]
 800cff0:	039b      	lsls	r3, r3, #14
 800cff2:	d5f6      	bpl.n	800cfe2 <HAL_PWREx_EnableOverDrive+0x4e>
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 800cff4:	2000      	movs	r0, #0
}
 800cff6:	b003      	add	sp, #12
 800cff8:	bd30      	pop	{r4, r5, pc}
      return HAL_TIMEOUT;
 800cffa:	2003      	movs	r0, #3
}
 800cffc:	b003      	add	sp, #12
 800cffe:	bd30      	pop	{r4, r5, pc}
 800d000:	40023800 	.word	0x40023800
 800d004:	40007000 	.word	0x40007000

0800d008 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d008:	2800      	cmp	r0, #0
 800d00a:	f000 828c 	beq.w	800d526 <HAL_RCC_OscConfig+0x51e>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d00e:	6803      	ldr	r3, [r0, #0]
 800d010:	2b0f      	cmp	r3, #15
{
 800d012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d016:	4604      	mov	r4, r0
 800d018:	b082      	sub	sp, #8
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d01a:	f200 8123 	bhi.w	800d264 <HAL_RCC_OscConfig+0x25c>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d01e:	07dd      	lsls	r5, r3, #31
 800d020:	d534      	bpl.n	800d08c <HAL_RCC_OscConfig+0x84>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d022:	6863      	ldr	r3, [r4, #4]
 800d024:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 800d028:	d003      	beq.n	800d032 <HAL_RCC_OscConfig+0x2a>
 800d02a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d02e:	f040 8175 	bne.w	800d31c <HAL_RCC_OscConfig+0x314>
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800d032:	4aa3      	ldr	r2, [pc, #652]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d034:	6893      	ldr	r3, [r2, #8]
 800d036:	f003 030c 	and.w	r3, r3, #12
 800d03a:	2b04      	cmp	r3, #4
 800d03c:	d01d      	beq.n	800d07a <HAL_RCC_OscConfig+0x72>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d03e:	6893      	ldr	r3, [r2, #8]
 800d040:	f003 030c 	and.w	r3, r3, #12
 800d044:	2b08      	cmp	r3, #8
 800d046:	d015      	beq.n	800d074 <HAL_RCC_OscConfig+0x6c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d048:	6863      	ldr	r3, [r4, #4]
 800d04a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d04e:	f000 816b 	beq.w	800d328 <HAL_RCC_OscConfig+0x320>
 800d052:	2b00      	cmp	r3, #0
 800d054:	f000 819c 	beq.w	800d390 <HAL_RCC_OscConfig+0x388>
 800d058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d05c:	4b98      	ldr	r3, [pc, #608]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	f000 822d 	beq.w	800d4be <HAL_RCC_OscConfig+0x4b6>
 800d064:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d068:	601a      	str	r2, [r3, #0]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d070:	601a      	str	r2, [r3, #0]
 800d072:	e15e      	b.n	800d332 <HAL_RCC_OscConfig+0x32a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d074:	6853      	ldr	r3, [r2, #4]
 800d076:	0258      	lsls	r0, r3, #9
 800d078:	d5e6      	bpl.n	800d048 <HAL_RCC_OscConfig+0x40>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d07a:	4b91      	ldr	r3, [pc, #580]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	0399      	lsls	r1, r3, #14
 800d080:	d503      	bpl.n	800d08a <HAL_RCC_OscConfig+0x82>
 800d082:	6863      	ldr	r3, [r4, #4]
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 80ff 	beq.w	800d288 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d08a:	6823      	ldr	r3, [r4, #0]
 800d08c:	079f      	lsls	r7, r3, #30
 800d08e:	d531      	bpl.n	800d0f4 <HAL_RCC_OscConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d090:	68e3      	ldr	r3, [r4, #12]
 800d092:	2b01      	cmp	r3, #1
 800d094:	f200 80fc 	bhi.w	800d290 <HAL_RCC_OscConfig+0x288>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d098:	6923      	ldr	r3, [r4, #16]
 800d09a:	2b1f      	cmp	r3, #31
 800d09c:	f200 8101 	bhi.w	800d2a2 <HAL_RCC_OscConfig+0x29a>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800d0a0:	4b87      	ldr	r3, [pc, #540]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d0a2:	689a      	ldr	r2, [r3, #8]
 800d0a4:	f012 0f0c 	tst.w	r2, #12
 800d0a8:	f000 80e7 	beq.w	800d27a <HAL_RCC_OscConfig+0x272>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d0ac:	689a      	ldr	r2, [r3, #8]
 800d0ae:	f002 020c 	and.w	r2, r2, #12
 800d0b2:	2a08      	cmp	r2, #8
 800d0b4:	f000 80dd 	beq.w	800d272 <HAL_RCC_OscConfig+0x26a>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0b8:	68e3      	ldr	r3, [r4, #12]
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d0ba:	4d81      	ldr	r5, [pc, #516]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	f000 819d 	beq.w	800d3fc <HAL_RCC_OscConfig+0x3f4>
        __HAL_RCC_HSI_ENABLE();
 800d0c2:	682b      	ldr	r3, [r5, #0]
 800d0c4:	f043 0301 	orr.w	r3, r3, #1
 800d0c8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ca:	f7fa fdc5 	bl	8007c58 <HAL_GetTick>
 800d0ce:	4606      	mov	r6, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0d0:	e005      	b.n	800d0de <HAL_RCC_OscConfig+0xd6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d0d2:	f7fa fdc1 	bl	8007c58 <HAL_GetTick>
 800d0d6:	1b80      	subs	r0, r0, r6
 800d0d8:	2802      	cmp	r0, #2
 800d0da:	f200 8155 	bhi.w	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d0de:	682b      	ldr	r3, [r5, #0]
 800d0e0:	0798      	lsls	r0, r3, #30
 800d0e2:	d5f6      	bpl.n	800d0d2 <HAL_RCC_OscConfig+0xca>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d0e4:	682b      	ldr	r3, [r5, #0]
 800d0e6:	6922      	ldr	r2, [r4, #16]
 800d0e8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d0ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d0f0:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d0f2:	6823      	ldr	r3, [r4, #0]
 800d0f4:	071a      	lsls	r2, r3, #28
 800d0f6:	d42a      	bmi.n	800d14e <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d0f8:	075e      	lsls	r6, r3, #29
 800d0fa:	d544      	bpl.n	800d186 <HAL_RCC_OscConfig+0x17e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800d0fc:	68a3      	ldr	r3, [r4, #8]
 800d0fe:	2b01      	cmp	r3, #1
 800d100:	d906      	bls.n	800d110 <HAL_RCC_OscConfig+0x108>
 800d102:	2b05      	cmp	r3, #5
 800d104:	d004      	beq.n	800d110 <HAL_RCC_OscConfig+0x108>
 800d106:	f240 2106 	movw	r1, #518	; 0x206
 800d10a:	486e      	ldr	r0, [pc, #440]	; (800d2c4 <HAL_RCC_OscConfig+0x2bc>)
 800d10c:	f7f7 fb90 	bl	8004830 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d110:	4b6b      	ldr	r3, [pc, #428]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d112:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d114:	00d5      	lsls	r5, r2, #3
 800d116:	f140 80ec 	bpl.w	800d2f2 <HAL_RCC_OscConfig+0x2ea>
  FlagStatus pwrclkchanged = RESET;
 800d11a:	2500      	movs	r5, #0
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d11c:	4e6a      	ldr	r6, [pc, #424]	; (800d2c8 <HAL_RCC_OscConfig+0x2c0>)
 800d11e:	6833      	ldr	r3, [r6, #0]
 800d120:	05d8      	lsls	r0, r3, #23
 800d122:	f140 8121 	bpl.w	800d368 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d126:	68a3      	ldr	r3, [r4, #8]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	f000 8179 	beq.w	800d420 <HAL_RCC_OscConfig+0x418>
 800d12e:	2b00      	cmp	r3, #0
 800d130:	f000 8144 	beq.w	800d3bc <HAL_RCC_OscConfig+0x3b4>
 800d134:	2b05      	cmp	r3, #5
 800d136:	4b62      	ldr	r3, [pc, #392]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d138:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d13a:	f000 81c8 	beq.w	800d4ce <HAL_RCC_OscConfig+0x4c6>
 800d13e:	f022 0201 	bic.w	r2, r2, #1
 800d142:	671a      	str	r2, [r3, #112]	; 0x70
 800d144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d146:	f022 0204 	bic.w	r2, r2, #4
 800d14a:	671a      	str	r2, [r3, #112]	; 0x70
 800d14c:	e16d      	b.n	800d42a <HAL_RCC_OscConfig+0x422>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d14e:	6963      	ldr	r3, [r4, #20]
 800d150:	2b01      	cmp	r3, #1
 800d152:	f200 80c4 	bhi.w	800d2de <HAL_RCC_OscConfig+0x2d6>
      __HAL_RCC_LSI_ENABLE();
 800d156:	4d5a      	ldr	r5, [pc, #360]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d158:	2b00      	cmp	r3, #0
 800d15a:	f000 80a8 	beq.w	800d2ae <HAL_RCC_OscConfig+0x2a6>
      __HAL_RCC_LSI_ENABLE();
 800d15e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d160:	f043 0301 	orr.w	r3, r3, #1
 800d164:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d166:	f7fa fd77 	bl	8007c58 <HAL_GetTick>
 800d16a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d16c:	e005      	b.n	800d17a <HAL_RCC_OscConfig+0x172>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d16e:	f7fa fd73 	bl	8007c58 <HAL_GetTick>
 800d172:	1b80      	subs	r0, r0, r6
 800d174:	2802      	cmp	r0, #2
 800d176:	f200 8107 	bhi.w	800d388 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d17a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d17c:	079b      	lsls	r3, r3, #30
 800d17e:	d5f6      	bpl.n	800d16e <HAL_RCC_OscConfig+0x166>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d180:	6823      	ldr	r3, [r4, #0]
 800d182:	075e      	lsls	r6, r3, #29
 800d184:	d4ba      	bmi.n	800d0fc <HAL_RCC_OscConfig+0xf4>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d186:	69a0      	ldr	r0, [r4, #24]
 800d188:	2802      	cmp	r0, #2
 800d18a:	f200 80bd 	bhi.w	800d308 <HAL_RCC_OscConfig+0x300>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d18e:	2800      	cmp	r0, #0
 800d190:	d064      	beq.n	800d25c <HAL_RCC_OscConfig+0x254>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800d192:	4d4b      	ldr	r5, [pc, #300]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d194:	68ab      	ldr	r3, [r5, #8]
 800d196:	f003 030c 	and.w	r3, r3, #12
 800d19a:	2b08      	cmp	r3, #8
 800d19c:	f000 8158 	beq.w	800d450 <HAL_RCC_OscConfig+0x448>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d1a0:	2802      	cmp	r0, #2
 800d1a2:	f040 81ae 	bne.w	800d502 <HAL_RCC_OscConfig+0x4fa>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d1a6:	69e3      	ldr	r3, [r4, #28]
 800d1a8:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 800d1ac:	f040 81a3 	bne.w	800d4f6 <HAL_RCC_OscConfig+0x4ee>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d1b0:	6a23      	ldr	r3, [r4, #32]
 800d1b2:	3b02      	subs	r3, #2
 800d1b4:	2b3d      	cmp	r3, #61	; 0x3d
 800d1b6:	f200 8198 	bhi.w	800d4ea <HAL_RCC_OscConfig+0x4e2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d1ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d1bc:	3b32      	subs	r3, #50	; 0x32
 800d1be:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800d1c2:	f200 818c 	bhi.w	800d4de <HAL_RCC_OscConfig+0x4d6>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d1c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d1c8:	2b08      	cmp	r3, #8
 800d1ca:	f200 8172 	bhi.w	800d4b2 <HAL_RCC_OscConfig+0x4aa>
 800d1ce:	f44f 72aa 	mov.w	r2, #340	; 0x154
 800d1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800d1d6:	07d8      	lsls	r0, r3, #31
 800d1d8:	f140 816b 	bpl.w	800d4b2 <HAL_RCC_OscConfig+0x4aa>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d1dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d1de:	3b02      	subs	r3, #2
 800d1e0:	2b0d      	cmp	r3, #13
 800d1e2:	f200 81a8 	bhi.w	800d536 <HAL_RCC_OscConfig+0x52e>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d1e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d1e8:	3b02      	subs	r3, #2
 800d1ea:	2b05      	cmp	r3, #5
 800d1ec:	f200 819d 	bhi.w	800d52a <HAL_RCC_OscConfig+0x522>
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d1f0:	4d33      	ldr	r5, [pc, #204]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d1f2:	682b      	ldr	r3, [r5, #0]
 800d1f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d1f8:	602b      	str	r3, [r5, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d1fa:	f7fa fd2d 	bl	8007c58 <HAL_GetTick>
 800d1fe:	4606      	mov	r6, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d200:	e005      	b.n	800d20e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d202:	f7fa fd29 	bl	8007c58 <HAL_GetTick>
 800d206:	1b80      	subs	r0, r0, r6
 800d208:	2802      	cmp	r0, #2
 800d20a:	f200 80bd 	bhi.w	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d20e:	682b      	ldr	r3, [r5, #0]
 800d210:	0199      	lsls	r1, r3, #6
 800d212:	d4f6      	bmi.n	800d202 <HAL_RCC_OscConfig+0x1fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d214:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800d218:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d21a:	430b      	orrs	r3, r1
 800d21c:	6b21      	ldr	r1, [r4, #48]	; 0x30

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d21e:	4e28      	ldr	r6, [pc, #160]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800d220:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800d224:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
 800d228:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800d22c:	0852      	lsrs	r2, r2, #1
 800d22e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800d232:	3a01      	subs	r2, #1
 800d234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d238:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d240:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d242:	f7fa fd09 	bl	8007c58 <HAL_GetTick>
 800d246:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d248:	e005      	b.n	800d256 <HAL_RCC_OscConfig+0x24e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d24a:	f7fa fd05 	bl	8007c58 <HAL_GetTick>
 800d24e:	1b00      	subs	r0, r0, r4
 800d250:	2802      	cmp	r0, #2
 800d252:	f200 8099 	bhi.w	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d256:	6833      	ldr	r3, [r6, #0]
 800d258:	019a      	lsls	r2, r3, #6
 800d25a:	d5f6      	bpl.n	800d24a <HAL_RCC_OscConfig+0x242>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 800d25c:	2000      	movs	r0, #0
}
 800d25e:	b002      	add	sp, #8
 800d260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800d264:	f240 1163 	movw	r1, #355	; 0x163
 800d268:	4816      	ldr	r0, [pc, #88]	; (800d2c4 <HAL_RCC_OscConfig+0x2bc>)
 800d26a:	f7f7 fae1 	bl	8004830 <assert_failed>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d26e:	6823      	ldr	r3, [r4, #0]
 800d270:	e6d5      	b.n	800d01e <HAL_RCC_OscConfig+0x16>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d272:	685b      	ldr	r3, [r3, #4]
 800d274:	025e      	lsls	r6, r3, #9
 800d276:	f53f af1f 	bmi.w	800d0b8 <HAL_RCC_OscConfig+0xb0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d27a:	4b11      	ldr	r3, [pc, #68]	; (800d2c0 <HAL_RCC_OscConfig+0x2b8>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	079d      	lsls	r5, r3, #30
 800d280:	d565      	bpl.n	800d34e <HAL_RCC_OscConfig+0x346>
 800d282:	68e3      	ldr	r3, [r4, #12]
 800d284:	2b01      	cmp	r3, #1
 800d286:	d062      	beq.n	800d34e <HAL_RCC_OscConfig+0x346>
        return HAL_ERROR;
 800d288:	2001      	movs	r0, #1
}
 800d28a:	b002      	add	sp, #8
 800d28c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800d290:	f240 119b 	movw	r1, #411	; 0x19b
 800d294:	480b      	ldr	r0, [pc, #44]	; (800d2c4 <HAL_RCC_OscConfig+0x2bc>)
 800d296:	f7f7 facb 	bl	8004830 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800d29a:	6923      	ldr	r3, [r4, #16]
 800d29c:	2b1f      	cmp	r3, #31
 800d29e:	f67f aeff 	bls.w	800d0a0 <HAL_RCC_OscConfig+0x98>
 800d2a2:	f44f 71ce 	mov.w	r1, #412	; 0x19c
 800d2a6:	4807      	ldr	r0, [pc, #28]	; (800d2c4 <HAL_RCC_OscConfig+0x2bc>)
 800d2a8:	f7f7 fac2 	bl	8004830 <assert_failed>
 800d2ac:	e6f8      	b.n	800d0a0 <HAL_RCC_OscConfig+0x98>
      __HAL_RCC_LSI_DISABLE();
 800d2ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d2b0:	f023 0301 	bic.w	r3, r3, #1
 800d2b4:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800d2b6:	f7fa fccf 	bl	8007c58 <HAL_GetTick>
 800d2ba:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2bc:	e00b      	b.n	800d2d6 <HAL_RCC_OscConfig+0x2ce>
 800d2be:	bf00      	nop
 800d2c0:	40023800 	.word	0x40023800
 800d2c4:	0802c4f4 	.word	0x0802c4f4
 800d2c8:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d2cc:	f7fa fcc4 	bl	8007c58 <HAL_GetTick>
 800d2d0:	1b80      	subs	r0, r0, r6
 800d2d2:	2802      	cmp	r0, #2
 800d2d4:	d858      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d2d6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800d2d8:	079f      	lsls	r7, r3, #30
 800d2da:	d4f7      	bmi.n	800d2cc <HAL_RCC_OscConfig+0x2c4>
 800d2dc:	e750      	b.n	800d180 <HAL_RCC_OscConfig+0x178>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 800d2de:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 800d2e2:	4898      	ldr	r0, [pc, #608]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d2e4:	f7f7 faa4 	bl	8004830 <assert_failed>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d2e8:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800d2ea:	4d97      	ldr	r5, [pc, #604]	; (800d548 <HAL_RCC_OscConfig+0x540>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0de      	beq.n	800d2ae <HAL_RCC_OscConfig+0x2a6>
 800d2f0:	e735      	b.n	800d15e <HAL_RCC_OscConfig+0x156>
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 800d2f4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800d2f6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d2fa:	641a      	str	r2, [r3, #64]	; 0x40
 800d2fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d302:	9301      	str	r3, [sp, #4]
 800d304:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800d306:	e709      	b.n	800d11c <HAL_RCC_OscConfig+0x114>
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800d308:	488e      	ldr	r0, [pc, #568]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d30a:	f240 214a 	movw	r1, #586	; 0x24a
 800d30e:	f7f7 fa8f 	bl	8004830 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d312:	69a0      	ldr	r0, [r4, #24]
 800d314:	2800      	cmp	r0, #0
 800d316:	f47f af3c 	bne.w	800d192 <HAL_RCC_OscConfig+0x18a>
 800d31a:	e79f      	b.n	800d25c <HAL_RCC_OscConfig+0x254>
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800d31c:	f240 1169 	movw	r1, #361	; 0x169
 800d320:	4888      	ldr	r0, [pc, #544]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d322:	f7f7 fa85 	bl	8004830 <assert_failed>
 800d326:	e684      	b.n	800d032 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d328:	4a87      	ldr	r2, [pc, #540]	; (800d548 <HAL_RCC_OscConfig+0x540>)
 800d32a:	6813      	ldr	r3, [r2, #0]
 800d32c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d330:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800d332:	f7fa fc91 	bl	8007c58 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d336:	4e84      	ldr	r6, [pc, #528]	; (800d548 <HAL_RCC_OscConfig+0x540>)
        tickstart = HAL_GetTick();
 800d338:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d33a:	e004      	b.n	800d346 <HAL_RCC_OscConfig+0x33e>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d33c:	f7fa fc8c 	bl	8007c58 <HAL_GetTick>
 800d340:	1b40      	subs	r0, r0, r5
 800d342:	2864      	cmp	r0, #100	; 0x64
 800d344:	d820      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d346:	6833      	ldr	r3, [r6, #0]
 800d348:	039a      	lsls	r2, r3, #14
 800d34a:	d5f7      	bpl.n	800d33c <HAL_RCC_OscConfig+0x334>
 800d34c:	e69d      	b.n	800d08a <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d34e:	4a7e      	ldr	r2, [pc, #504]	; (800d548 <HAL_RCC_OscConfig+0x540>)
 800d350:	6921      	ldr	r1, [r4, #16]
 800d352:	6813      	ldr	r3, [r2, #0]
 800d354:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800d358:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800d35c:	6013      	str	r3, [r2, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d35e:	6823      	ldr	r3, [r4, #0]
 800d360:	071a      	lsls	r2, r3, #28
 800d362:	f57f aec9 	bpl.w	800d0f8 <HAL_RCC_OscConfig+0xf0>
 800d366:	e6f2      	b.n	800d14e <HAL_RCC_OscConfig+0x146>
      PWR->CR1 |= PWR_CR1_DBP;
 800d368:	6833      	ldr	r3, [r6, #0]
 800d36a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d36e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800d370:	f7fa fc72 	bl	8007c58 <HAL_GetTick>
 800d374:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800d376:	6833      	ldr	r3, [r6, #0]
 800d378:	05d9      	lsls	r1, r3, #23
 800d37a:	f53f aed4 	bmi.w	800d126 <HAL_RCC_OscConfig+0x11e>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d37e:	f7fa fc6b 	bl	8007c58 <HAL_GetTick>
 800d382:	1bc0      	subs	r0, r0, r7
 800d384:	2864      	cmp	r0, #100	; 0x64
 800d386:	d9f6      	bls.n	800d376 <HAL_RCC_OscConfig+0x36e>
            return HAL_TIMEOUT;
 800d388:	2003      	movs	r0, #3
}
 800d38a:	b002      	add	sp, #8
 800d38c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d390:	4d6d      	ldr	r5, [pc, #436]	; (800d548 <HAL_RCC_OscConfig+0x540>)
 800d392:	682b      	ldr	r3, [r5, #0]
 800d394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d398:	602b      	str	r3, [r5, #0]
 800d39a:	682b      	ldr	r3, [r5, #0]
 800d39c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800d3a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d3a2:	f7fa fc59 	bl	8007c58 <HAL_GetTick>
 800d3a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3a8:	e004      	b.n	800d3b4 <HAL_RCC_OscConfig+0x3ac>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d3aa:	f7fa fc55 	bl	8007c58 <HAL_GetTick>
 800d3ae:	1b80      	subs	r0, r0, r6
 800d3b0:	2864      	cmp	r0, #100	; 0x64
 800d3b2:	d8e9      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d3b4:	682b      	ldr	r3, [r5, #0]
 800d3b6:	039b      	lsls	r3, r3, #14
 800d3b8:	d4f7      	bmi.n	800d3aa <HAL_RCC_OscConfig+0x3a2>
 800d3ba:	e666      	b.n	800d08a <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3bc:	4e62      	ldr	r6, [pc, #392]	; (800d548 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3be:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d3c2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d3c4:	f023 0301 	bic.w	r3, r3, #1
 800d3c8:	6733      	str	r3, [r6, #112]	; 0x70
 800d3ca:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d3cc:	f023 0304 	bic.w	r3, r3, #4
 800d3d0:	6733      	str	r3, [r6, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d3d2:	f7fa fc41 	bl	8007c58 <HAL_GetTick>
 800d3d6:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d3d8:	e004      	b.n	800d3e4 <HAL_RCC_OscConfig+0x3dc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d3da:	f7fa fc3d 	bl	8007c58 <HAL_GetTick>
 800d3de:	1bc0      	subs	r0, r0, r7
 800d3e0:	4540      	cmp	r0, r8
 800d3e2:	d8d1      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d3e4:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800d3e6:	079b      	lsls	r3, r3, #30
 800d3e8:	d4f7      	bmi.n	800d3da <HAL_RCC_OscConfig+0x3d2>
    if (pwrclkchanged == SET)
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	f43f aecb 	beq.w	800d186 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800d3f0:	4a55      	ldr	r2, [pc, #340]	; (800d548 <HAL_RCC_OscConfig+0x540>)
 800d3f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d3f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3f8:	6413      	str	r3, [r2, #64]	; 0x40
 800d3fa:	e6c4      	b.n	800d186 <HAL_RCC_OscConfig+0x17e>
        __HAL_RCC_HSI_DISABLE();
 800d3fc:	682b      	ldr	r3, [r5, #0]
 800d3fe:	f023 0301 	bic.w	r3, r3, #1
 800d402:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d404:	f7fa fc28 	bl	8007c58 <HAL_GetTick>
 800d408:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d40a:	e004      	b.n	800d416 <HAL_RCC_OscConfig+0x40e>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d40c:	f7fa fc24 	bl	8007c58 <HAL_GetTick>
 800d410:	1b80      	subs	r0, r0, r6
 800d412:	2802      	cmp	r0, #2
 800d414:	d8b8      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d416:	682b      	ldr	r3, [r5, #0]
 800d418:	0799      	lsls	r1, r3, #30
 800d41a:	d4f7      	bmi.n	800d40c <HAL_RCC_OscConfig+0x404>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d41c:	6823      	ldr	r3, [r4, #0]
 800d41e:	e669      	b.n	800d0f4 <HAL_RCC_OscConfig+0xec>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d420:	4a49      	ldr	r2, [pc, #292]	; (800d548 <HAL_RCC_OscConfig+0x540>)
 800d422:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800d424:	f043 0301 	orr.w	r3, r3, #1
 800d428:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800d42a:	f7fa fc15 	bl	8007c58 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d42e:	4f46      	ldr	r7, [pc, #280]	; (800d548 <HAL_RCC_OscConfig+0x540>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d430:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800d434:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d436:	e004      	b.n	800d442 <HAL_RCC_OscConfig+0x43a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d438:	f7fa fc0e 	bl	8007c58 <HAL_GetTick>
 800d43c:	1b80      	subs	r0, r0, r6
 800d43e:	4540      	cmp	r0, r8
 800d440:	d8a2      	bhi.n	800d388 <HAL_RCC_OscConfig+0x380>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d444:	079a      	lsls	r2, r3, #30
 800d446:	d5f7      	bpl.n	800d438 <HAL_RCC_OscConfig+0x430>
    if (pwrclkchanged == SET)
 800d448:	2d00      	cmp	r5, #0
 800d44a:	f43f ae9c 	beq.w	800d186 <HAL_RCC_OscConfig+0x17e>
 800d44e:	e7cf      	b.n	800d3f0 <HAL_RCC_OscConfig+0x3e8>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d450:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 800d452:	686a      	ldr	r2, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d454:	f43f af03 	beq.w	800d25e <HAL_RCC_OscConfig+0x256>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d458:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d45c:	69e1      	ldr	r1, [r4, #28]
 800d45e:	428b      	cmp	r3, r1
 800d460:	f47f af12 	bne.w	800d288 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d464:	f002 033f 	and.w	r3, r2, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d468:	6a21      	ldr	r1, [r4, #32]
 800d46a:	428b      	cmp	r3, r1
 800d46c:	f47f af0c 	bne.w	800d288 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800d474:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d476:	4013      	ands	r3, r2
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800d478:	ebb3 1f81 	cmp.w	r3, r1, lsl #6
 800d47c:	f47f af04 	bne.w	800d288 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d480:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d482:	f402 3140 	and.w	r1, r2, #196608	; 0x30000
 800d486:	085b      	lsrs	r3, r3, #1
 800d488:	3b01      	subs	r3, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800d48a:	ebb1 4f03 	cmp.w	r1, r3, lsl #16
 800d48e:	f47f aefb 	bne.w	800d288 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d492:	f002 6370 	and.w	r3, r2, #251658240	; 0xf000000
 800d496:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800d498:	ebb3 6f01 	cmp.w	r3, r1, lsl #24
 800d49c:	f47f aef4 	bne.w	800d288 <HAL_RCC_OscConfig+0x280>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800d4a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d4a2:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800d4a6:	ebb2 7f03 	cmp.w	r2, r3, lsl #28
  return HAL_OK;
 800d4aa:	bf14      	ite	ne
 800d4ac:	2001      	movne	r0, #1
 800d4ae:	2000      	moveq	r0, #0
 800d4b0:	e6d5      	b.n	800d25e <HAL_RCC_OscConfig+0x256>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 800d4b2:	f240 2156 	movw	r1, #598	; 0x256
 800d4b6:	4823      	ldr	r0, [pc, #140]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d4b8:	f7f7 f9ba 	bl	8004830 <assert_failed>
 800d4bc:	e68e      	b.n	800d1dc <HAL_RCC_OscConfig+0x1d4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d4be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800d4c2:	601a      	str	r2, [r3, #0]
 800d4c4:	681a      	ldr	r2, [r3, #0]
 800d4c6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800d4ca:	601a      	str	r2, [r3, #0]
 800d4cc:	e731      	b.n	800d332 <HAL_RCC_OscConfig+0x32a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d4ce:	f042 0204 	orr.w	r2, r2, #4
 800d4d2:	671a      	str	r2, [r3, #112]	; 0x70
 800d4d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d4d6:	f042 0201 	orr.w	r2, r2, #1
 800d4da:	671a      	str	r2, [r3, #112]	; 0x70
 800d4dc:	e7a5      	b.n	800d42a <HAL_RCC_OscConfig+0x422>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800d4de:	f240 2155 	movw	r1, #597	; 0x255
 800d4e2:	4818      	ldr	r0, [pc, #96]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d4e4:	f7f7 f9a4 	bl	8004830 <assert_failed>
 800d4e8:	e66d      	b.n	800d1c6 <HAL_RCC_OscConfig+0x1be>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800d4ea:	f44f 7115 	mov.w	r1, #596	; 0x254
 800d4ee:	4815      	ldr	r0, [pc, #84]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d4f0:	f7f7 f99e 	bl	8004830 <assert_failed>
 800d4f4:	e661      	b.n	800d1ba <HAL_RCC_OscConfig+0x1b2>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800d4f6:	f240 2153 	movw	r1, #595	; 0x253
 800d4fa:	4812      	ldr	r0, [pc, #72]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d4fc:	f7f7 f998 	bl	8004830 <assert_failed>
 800d500:	e656      	b.n	800d1b0 <HAL_RCC_OscConfig+0x1a8>
        __HAL_RCC_PLL_DISABLE();
 800d502:	682b      	ldr	r3, [r5, #0]
 800d504:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800d508:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800d50a:	f7fa fba5 	bl	8007c58 <HAL_GetTick>
 800d50e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d510:	e005      	b.n	800d51e <HAL_RCC_OscConfig+0x516>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d512:	f7fa fba1 	bl	8007c58 <HAL_GetTick>
 800d516:	1b00      	subs	r0, r0, r4
 800d518:	2802      	cmp	r0, #2
 800d51a:	f63f af35 	bhi.w	800d388 <HAL_RCC_OscConfig+0x380>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d51e:	682b      	ldr	r3, [r5, #0]
 800d520:	019b      	lsls	r3, r3, #6
 800d522:	d4f6      	bmi.n	800d512 <HAL_RCC_OscConfig+0x50a>
 800d524:	e69a      	b.n	800d25c <HAL_RCC_OscConfig+0x254>
    return HAL_ERROR;
 800d526:	2001      	movs	r0, #1
}
 800d528:	4770      	bx	lr
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 800d52a:	f240 2159 	movw	r1, #601	; 0x259
 800d52e:	4805      	ldr	r0, [pc, #20]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d530:	f7f7 f97e 	bl	8004830 <assert_failed>
 800d534:	e65c      	b.n	800d1f0 <HAL_RCC_OscConfig+0x1e8>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 800d536:	f240 2157 	movw	r1, #599	; 0x257
 800d53a:	4802      	ldr	r0, [pc, #8]	; (800d544 <HAL_RCC_OscConfig+0x53c>)
 800d53c:	f7f7 f978 	bl	8004830 <assert_failed>
 800d540:	e651      	b.n	800d1e6 <HAL_RCC_OscConfig+0x1de>
 800d542:	bf00      	nop
 800d544:	0802c4f4 	.word	0x0802c4f4
 800d548:	40023800 	.word	0x40023800

0800d54c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d54c:	4916      	ldr	r1, [pc, #88]	; (800d5a8 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800d54e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d550:	688b      	ldr	r3, [r1, #8]
 800d552:	f003 030c 	and.w	r3, r3, #12
 800d556:	2b04      	cmp	r3, #4
 800d558:	d01b      	beq.n	800d592 <HAL_RCC_GetSysClockFreq+0x46>
 800d55a:	2b08      	cmp	r3, #8
 800d55c:	d117      	bne.n	800d58e <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d55e:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d560:	684b      	ldr	r3, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d562:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d566:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800d568:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
 800d56c:	d113      	bne.n	800d596 <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d56e:	480f      	ldr	r0, [pc, #60]	; (800d5ac <HAL_RCC_GetSysClockFreq+0x60>)
 800d570:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d574:	fba1 0100 	umull	r0, r1, r1, r0
 800d578:	f7f2 ff1a 	bl	80003b0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800d57c:	4b0a      	ldr	r3, [pc, #40]	; (800d5a8 <HAL_RCC_GetSysClockFreq+0x5c>)
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800d584:	3301      	adds	r3, #1
 800d586:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 800d588:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800d58c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 800d58e:	4807      	ldr	r0, [pc, #28]	; (800d5ac <HAL_RCC_GetSysClockFreq+0x60>)
}
 800d590:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d592:	4807      	ldr	r0, [pc, #28]	; (800d5b0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800d594:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d596:	4806      	ldr	r0, [pc, #24]	; (800d5b0 <HAL_RCC_GetSysClockFreq+0x64>)
 800d598:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800d59c:	2300      	movs	r3, #0
 800d59e:	fba1 0100 	umull	r0, r1, r1, r0
 800d5a2:	f7f2 ff05 	bl	80003b0 <__aeabi_uldivmod>
 800d5a6:	e7e9      	b.n	800d57c <HAL_RCC_GetSysClockFreq+0x30>
 800d5a8:	40023800 	.word	0x40023800
 800d5ac:	00f42400 	.word	0x00f42400
 800d5b0:	007a1200 	.word	0x007a1200

0800d5b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	f000 80f6 	beq.w	800d7a6 <HAL_RCC_ClockConfig+0x1f2>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d5ba:	6803      	ldr	r3, [r0, #0]
 800d5bc:	3b01      	subs	r3, #1
 800d5be:	2b0e      	cmp	r3, #14
{
 800d5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d5c8:	f200 80d6 	bhi.w	800d778 <HAL_RCC_ClockConfig+0x1c4>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d5cc:	2d0f      	cmp	r5, #15
 800d5ce:	f200 80c3 	bhi.w	800d758 <HAL_RCC_ClockConfig+0x1a4>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d5d2:	4a81      	ldr	r2, [pc, #516]	; (800d7d8 <HAL_RCC_ClockConfig+0x224>)
 800d5d4:	6813      	ldr	r3, [r2, #0]
 800d5d6:	f003 030f 	and.w	r3, r3, #15
 800d5da:	42ab      	cmp	r3, r5
 800d5dc:	d36f      	bcc.n	800d6be <HAL_RCC_ClockConfig+0x10a>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d5de:	6823      	ldr	r3, [r4, #0]
 800d5e0:	0798      	lsls	r0, r3, #30
 800d5e2:	d530      	bpl.n	800d646 <HAL_RCC_ClockConfig+0x92>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d5e4:	0759      	lsls	r1, r3, #29
 800d5e6:	d504      	bpl.n	800d5f2 <HAL_RCC_ClockConfig+0x3e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d5e8:	497c      	ldr	r1, [pc, #496]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d5ea:	688a      	ldr	r2, [r1, #8]
 800d5ec:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 800d5f0:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d5f2:	071a      	lsls	r2, r3, #28
 800d5f4:	d504      	bpl.n	800d600 <HAL_RCC_ClockConfig+0x4c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d5f6:	4979      	ldr	r1, [pc, #484]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d5f8:	688a      	ldr	r2, [r1, #8]
 800d5fa:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 800d5fe:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d600:	68a1      	ldr	r1, [r4, #8]
 800d602:	f021 0220 	bic.w	r2, r1, #32
 800d606:	f021 0080 	bic.w	r0, r1, #128	; 0x80
 800d60a:	2a90      	cmp	r2, #144	; 0x90
 800d60c:	bf18      	it	ne
 800d60e:	2800      	cmpne	r0, #0
 800d610:	f021 0040 	bic.w	r0, r1, #64	; 0x40
 800d614:	bf14      	ite	ne
 800d616:	2201      	movne	r2, #1
 800d618:	2200      	moveq	r2, #0
 800d61a:	29f0      	cmp	r1, #240	; 0xf0
 800d61c:	bf0c      	ite	eq
 800d61e:	2200      	moveq	r2, #0
 800d620:	f002 0201 	andne.w	r2, r2, #1
 800d624:	28a0      	cmp	r0, #160	; 0xa0
 800d626:	bf0c      	ite	eq
 800d628:	2200      	moveq	r2, #0
 800d62a:	f002 0201 	andne.w	r2, r2, #1
 800d62e:	b122      	cbz	r2, 800d63a <HAL_RCC_ClockConfig+0x86>
 800d630:	f021 0210 	bic.w	r2, r1, #16
 800d634:	2ac0      	cmp	r2, #192	; 0xc0
 800d636:	f040 80b8 	bne.w	800d7aa <HAL_RCC_ClockConfig+0x1f6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d63a:	4868      	ldr	r0, [pc, #416]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d63c:	6882      	ldr	r2, [r0, #8]
 800d63e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800d642:	4311      	orrs	r1, r2
 800d644:	6081      	str	r1, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d646:	07df      	lsls	r7, r3, #31
 800d648:	d526      	bpl.n	800d698 <HAL_RCC_ClockConfig+0xe4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d64a:	6863      	ldr	r3, [r4, #4]
 800d64c:	2b02      	cmp	r3, #2
 800d64e:	f200 80a1 	bhi.w	800d794 <HAL_RCC_ClockConfig+0x1e0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d652:	4a62      	ldr	r2, [pc, #392]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d654:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d656:	6812      	ldr	r2, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d658:	f000 8098 	beq.w	800d78c <HAL_RCC_ClockConfig+0x1d8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800d65c:	2b02      	cmp	r3, #2
 800d65e:	f000 8091 	beq.w	800d784 <HAL_RCC_ClockConfig+0x1d0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d662:	0791      	lsls	r1, r2, #30
 800d664:	d528      	bpl.n	800d6b8 <HAL_RCC_ClockConfig+0x104>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d666:	4e5d      	ldr	r6, [pc, #372]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d668:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d66c:	68b2      	ldr	r2, [r6, #8]
 800d66e:	f022 0203 	bic.w	r2, r2, #3
 800d672:	4313      	orrs	r3, r2
 800d674:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800d676:	f7fa faef 	bl	8007c58 <HAL_GetTick>
 800d67a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d67c:	e005      	b.n	800d68a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d67e:	f7fa faeb 	bl	8007c58 <HAL_GetTick>
 800d682:	1bc0      	subs	r0, r0, r7
 800d684:	4540      	cmp	r0, r8
 800d686:	f200 808c 	bhi.w	800d7a2 <HAL_RCC_ClockConfig+0x1ee>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d68a:	68b3      	ldr	r3, [r6, #8]
 800d68c:	6862      	ldr	r2, [r4, #4]
 800d68e:	f003 030c 	and.w	r3, r3, #12
 800d692:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800d696:	d1f2      	bne.n	800d67e <HAL_RCC_ClockConfig+0xca>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d698:	4a4f      	ldr	r2, [pc, #316]	; (800d7d8 <HAL_RCC_ClockConfig+0x224>)
 800d69a:	6813      	ldr	r3, [r2, #0]
 800d69c:	f003 030f 	and.w	r3, r3, #15
 800d6a0:	42ab      	cmp	r3, r5
 800d6a2:	d91a      	bls.n	800d6da <HAL_RCC_ClockConfig+0x126>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6a4:	6813      	ldr	r3, [r2, #0]
 800d6a6:	f023 030f 	bic.w	r3, r3, #15
 800d6aa:	432b      	orrs	r3, r5
 800d6ac:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6ae:	6813      	ldr	r3, [r2, #0]
 800d6b0:	f003 030f 	and.w	r3, r3, #15
 800d6b4:	42ab      	cmp	r3, r5
 800d6b6:	d010      	beq.n	800d6da <HAL_RCC_ClockConfig+0x126>
    return HAL_ERROR;
 800d6b8:	2001      	movs	r0, #1
}
 800d6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d6be:	6813      	ldr	r3, [r2, #0]
 800d6c0:	f023 030f 	bic.w	r3, r3, #15
 800d6c4:	432b      	orrs	r3, r5
 800d6c6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d6c8:	6813      	ldr	r3, [r2, #0]
 800d6ca:	f003 030f 	and.w	r3, r3, #15
 800d6ce:	42ab      	cmp	r3, r5
 800d6d0:	d1f2      	bne.n	800d6b8 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d6d2:	6823      	ldr	r3, [r4, #0]
 800d6d4:	0798      	lsls	r0, r3, #30
 800d6d6:	d485      	bmi.n	800d5e4 <HAL_RCC_ClockConfig+0x30>
 800d6d8:	e7b5      	b.n	800d646 <HAL_RCC_ClockConfig+0x92>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	075a      	lsls	r2, r3, #29
 800d6de:	d512      	bpl.n	800d706 <HAL_RCC_ClockConfig+0x152>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d6e0:	68e1      	ldr	r1, [r4, #12]
 800d6e2:	f421 5280 	bic.w	r2, r1, #4096	; 0x1000
 800d6e6:	f421 6000 	bic.w	r0, r1, #2048	; 0x800
 800d6ea:	f5b0 5fa0 	cmp.w	r0, #5120	; 0x1400
 800d6ee:	bf18      	it	ne
 800d6f0:	2a00      	cmpne	r2, #0
 800d6f2:	d002      	beq.n	800d6fa <HAL_RCC_ClockConfig+0x146>
 800d6f4:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800d6f8:	d15f      	bne.n	800d7ba <HAL_RCC_ClockConfig+0x206>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d6fa:	4838      	ldr	r0, [pc, #224]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d6fc:	6882      	ldr	r2, [r0, #8]
 800d6fe:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800d702:	430a      	orrs	r2, r1
 800d704:	6082      	str	r2, [r0, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d706:	071b      	lsls	r3, r3, #28
 800d708:	d513      	bpl.n	800d732 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d70a:	6922      	ldr	r2, [r4, #16]
 800d70c:	f422 6100 	bic.w	r1, r2, #2048	; 0x800
 800d710:	f422 5380 	bic.w	r3, r2, #4096	; 0x1000
 800d714:	f5b1 5fa0 	cmp.w	r1, #5120	; 0x1400
 800d718:	bf18      	it	ne
 800d71a:	2b00      	cmpne	r3, #0
 800d71c:	d002      	beq.n	800d724 <HAL_RCC_ClockConfig+0x170>
 800d71e:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800d722:	d152      	bne.n	800d7ca <HAL_RCC_ClockConfig+0x216>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d724:	492d      	ldr	r1, [pc, #180]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d726:	688b      	ldr	r3, [r1, #8]
 800d728:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800d72c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800d730:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d732:	f7ff ff0b 	bl	800d54c <HAL_RCC_GetSysClockFreq>
 800d736:	4a29      	ldr	r2, [pc, #164]	; (800d7dc <HAL_RCC_ClockConfig+0x228>)
 800d738:	4c29      	ldr	r4, [pc, #164]	; (800d7e0 <HAL_RCC_ClockConfig+0x22c>)
 800d73a:	4603      	mov	r3, r0
 800d73c:	6892      	ldr	r2, [r2, #8]
  HAL_InitTick(uwTickPrio);
 800d73e:	4829      	ldr	r0, [pc, #164]	; (800d7e4 <HAL_RCC_ClockConfig+0x230>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d740:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800d744:	4928      	ldr	r1, [pc, #160]	; (800d7e8 <HAL_RCC_ClockConfig+0x234>)
  HAL_InitTick(uwTickPrio);
 800d746:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d748:	5ca2      	ldrb	r2, [r4, r2]
 800d74a:	40d3      	lsrs	r3, r2
 800d74c:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 800d74e:	f7f9 fa7f 	bl	8006c50 <HAL_InitTick>
  return HAL_OK;
 800d752:	2000      	movs	r0, #0
}
 800d754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 800d758:	f240 21de 	movw	r1, #734	; 0x2de
 800d75c:	4823      	ldr	r0, [pc, #140]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d75e:	f7f7 f867 	bl	8004830 <assert_failed>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d762:	4b1d      	ldr	r3, [pc, #116]	; (800d7d8 <HAL_RCC_ClockConfig+0x224>)
      return HAL_ERROR;
 800d764:	2001      	movs	r0, #1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d766:	681a      	ldr	r2, [r3, #0]
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d768:	6819      	ldr	r1, [r3, #0]
 800d76a:	f021 010f 	bic.w	r1, r1, #15
 800d76e:	430d      	orrs	r5, r1
 800d770:	601d      	str	r5, [r3, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d772:	681b      	ldr	r3, [r3, #0]
}
 800d774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 800d778:	f240 21dd 	movw	r1, #733	; 0x2dd
 800d77c:	481b      	ldr	r0, [pc, #108]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d77e:	f7f7 f857 	bl	8004830 <assert_failed>
 800d782:	e723      	b.n	800d5cc <HAL_RCC_ClockConfig+0x18>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d784:	0190      	lsls	r0, r2, #6
 800d786:	f53f af6e 	bmi.w	800d666 <HAL_RCC_ClockConfig+0xb2>
 800d78a:	e795      	b.n	800d6b8 <HAL_RCC_ClockConfig+0x104>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d78c:	0396      	lsls	r6, r2, #14
 800d78e:	f53f af6a 	bmi.w	800d666 <HAL_RCC_ClockConfig+0xb2>
 800d792:	e791      	b.n	800d6b8 <HAL_RCC_ClockConfig+0x104>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800d794:	f240 3109 	movw	r1, #777	; 0x309
 800d798:	4814      	ldr	r0, [pc, #80]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d79a:	f7f7 f849 	bl	8004830 <assert_failed>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d79e:	6863      	ldr	r3, [r4, #4]
 800d7a0:	e757      	b.n	800d652 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 800d7a2:	2003      	movs	r0, #3
 800d7a4:	e789      	b.n	800d6ba <HAL_RCC_ClockConfig+0x106>
    return HAL_ERROR;
 800d7a6:	2001      	movs	r0, #1
}
 800d7a8:	4770      	bx	lr
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800d7aa:	f240 3102 	movw	r1, #770	; 0x302
 800d7ae:	480f      	ldr	r0, [pc, #60]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d7b0:	f7f7 f83e 	bl	8004830 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d7b4:	68a1      	ldr	r1, [r4, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d7b6:	6823      	ldr	r3, [r4, #0]
 800d7b8:	e73f      	b.n	800d63a <HAL_RCC_ClockConfig+0x86>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800d7ba:	f240 3146 	movw	r1, #838	; 0x346
 800d7be:	480b      	ldr	r0, [pc, #44]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d7c0:	f7f7 f836 	bl	8004830 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d7c4:	68e1      	ldr	r1, [r4, #12]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d7c6:	6823      	ldr	r3, [r4, #0]
 800d7c8:	e797      	b.n	800d6fa <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800d7ca:	f240 314d 	movw	r1, #845	; 0x34d
 800d7ce:	4807      	ldr	r0, [pc, #28]	; (800d7ec <HAL_RCC_ClockConfig+0x238>)
 800d7d0:	f7f7 f82e 	bl	8004830 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800d7d4:	6922      	ldr	r2, [r4, #16]
 800d7d6:	e7a5      	b.n	800d724 <HAL_RCC_ClockConfig+0x170>
 800d7d8:	40023c00 	.word	0x40023c00
 800d7dc:	40023800 	.word	0x40023800
 800d7e0:	0802bb40 	.word	0x0802bb40
 800d7e4:	200002c0 	.word	0x200002c0
 800d7e8:	20000260 	.word	0x20000260
 800d7ec:	0802c4f4 	.word	0x0802c4f4

0800d7f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 800d7f0:	4b01      	ldr	r3, [pc, #4]	; (800d7f8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800d7f2:	6818      	ldr	r0, [r3, #0]
 800d7f4:	4770      	bx	lr
 800d7f6:	bf00      	nop
 800d7f8:	20000260 	.word	0x20000260

0800d7fc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d7fc:	4b04      	ldr	r3, [pc, #16]	; (800d810 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800d7fe:	4905      	ldr	r1, [pc, #20]	; (800d814 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d800:	689b      	ldr	r3, [r3, #8]
 800d802:	4a05      	ldr	r2, [pc, #20]	; (800d818 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800d804:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800d808:	6808      	ldr	r0, [r1, #0]
 800d80a:	5cd3      	ldrb	r3, [r2, r3]
}
 800d80c:	40d8      	lsrs	r0, r3
 800d80e:	4770      	bx	lr
 800d810:	40023800 	.word	0x40023800
 800d814:	20000260 	.word	0x20000260
 800d818:	0802bb50 	.word	0x0802bb50

0800d81c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d81c:	4b04      	ldr	r3, [pc, #16]	; (800d830 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800d81e:	4905      	ldr	r1, [pc, #20]	; (800d834 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	4a05      	ldr	r2, [pc, #20]	; (800d838 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800d824:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800d828:	6808      	ldr	r0, [r1, #0]
 800d82a:	5cd3      	ldrb	r3, [r2, r3]
}
 800d82c:	40d8      	lsrs	r0, r3
 800d82e:	4770      	bx	lr
 800d830:	40023800 	.word	0x40023800
 800d834:	20000260 	.word	0x20000260
 800d838:	0802bb50 	.word	0x0802bb50

0800d83c <HAL_RCC_GetClockConfig>:
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d83c:	4b0e      	ldr	r3, [pc, #56]	; (800d878 <HAL_RCC_GetClockConfig+0x3c>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d83e:	220f      	movs	r2, #15
 800d840:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d842:	689a      	ldr	r2, [r3, #8]
 800d844:	f002 0203 	and.w	r2, r2, #3
 800d848:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d84a:	689a      	ldr	r2, [r3, #8]
 800d84c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 800d850:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d852:	689a      	ldr	r2, [r3, #8]
 800d854:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 800d858:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d85a:	689b      	ldr	r3, [r3, #8]
 800d85c:	08db      	lsrs	r3, r3, #3
{
 800d85e:	b410      	push	{r4}
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d860:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d864:	4c05      	ldr	r4, [pc, #20]	; (800d87c <HAL_RCC_GetClockConfig+0x40>)
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800d866:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d868:	6823      	ldr	r3, [r4, #0]
}
 800d86a:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d86e:	f003 030f 	and.w	r3, r3, #15
 800d872:	600b      	str	r3, [r1, #0]
}
 800d874:	4770      	bx	lr
 800d876:	bf00      	nop
 800d878:	40023800 	.word	0x40023800
 800d87c:	40023c00 	.word	0x40023c00

0800d880 <HAL_RCCEx_PeriphCLKConfig>:
  uint32_t tmpreg1 = 0;
  uint32_t plli2sused = 0;
  uint32_t pllsaiused = 0;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d880:	4a56      	ldr	r2, [pc, #344]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 800d882:	6803      	ldr	r3, [r0, #0]
 800d884:	401a      	ands	r2, r3
{
 800d886:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d88a:	4604      	mov	r4, r0
 800d88c:	b083      	sub	sp, #12
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800d88e:	2a00      	cmp	r2, #0
 800d890:	f000 833f 	beq.w	800df12 <HAL_RCCEx_PeriphCLKConfig+0x692>

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800d894:	f013 0601 	ands.w	r6, r3, #1
 800d898:	d00f      	beq.n	800d8ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800d89a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800d89c:	f436 0200 	bics.w	r2, r6, #8388608	; 0x800000
 800d8a0:	f040 8342 	bne.w	800df28 <HAL_RCCEx_PeriphCLKConfig+0x6a8>

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d8a4:	4a4e      	ldr	r2, [pc, #312]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800d8a6:	6891      	ldr	r1, [r2, #8]
 800d8a8:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 800d8ac:	6091      	str	r1, [r2, #8]
 800d8ae:	6891      	ldr	r1, [r2, #8]
 800d8b0:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800d8b2:	fab6 f686 	clz	r6, r6
 800d8b6:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d8b8:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800d8ba:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 800d8be:	d014      	beq.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800d8c0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800d8c2:	f435 1240 	bics.w	r2, r5, #3145728	; 0x300000
 800d8c6:	f040 838d 	bne.w	800dfe4 <HAL_RCCEx_PeriphCLKConfig+0x764>

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8ca:	4945      	ldr	r1, [pc, #276]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d8cc:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d8d0:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 800d8d4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800d8d8:	ea42 0205 	orr.w	r2, r2, r5
 800d8dc:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800d8e0:	f000 831f 	beq.w	800df22 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
    {
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800d8e4:	fab5 f585 	clz	r5, r5
 800d8e8:	096d      	lsrs	r5, r5, #5
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800d8ea:	02d9      	lsls	r1, r3, #11
 800d8ec:	d514      	bpl.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800d8ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d8f0:	f431 0240 	bics.w	r2, r1, #12582912	; 0xc00000
 800d8f4:	f040 837d 	bne.w	800dff2 <HAL_RCCEx_PeriphCLKConfig+0x772>

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d8f8:	4839      	ldr	r0, [pc, #228]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d8fa:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800d8fe:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800d902:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800d906:	ea42 0201 	orr.w	r2, r2, r1
 800d90a:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800d90e:	f000 8306 	beq.w	800df1e <HAL_RCCEx_PeriphCLKConfig+0x69e>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 800d912:	2900      	cmp	r1, #0
 800d914:	bf08      	it	eq
 800d916:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 800d918:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800d91c:	bf18      	it	ne
 800d91e:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800d920:	069a      	lsls	r2, r3, #26
 800d922:	f140 8099 	bpl.w	800da58 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800d926:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800d928:	482e      	ldr	r0, [pc, #184]	; (800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800d92a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800d92e:	bf18      	it	ne
 800d930:	f5b2 7f00 	cmpne.w	r2, #512	; 0x200
 800d934:	f422 27a0 	bic.w	r7, r2, #327680	; 0x50000
 800d938:	f422 3140 	bic.w	r1, r2, #196608	; 0x30000
 800d93c:	bf14      	ite	ne
 800d93e:	2301      	movne	r3, #1
 800d940:	2300      	moveq	r3, #0
 800d942:	4287      	cmp	r7, r0
 800d944:	bf0c      	ite	eq
 800d946:	2300      	moveq	r3, #0
 800d948:	f003 0301 	andne.w	r3, r3, #1
 800d94c:	f422 2710 	bic.w	r7, r2, #589824	; 0x90000
 800d950:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800d954:	4287      	cmp	r7, r0
 800d956:	bf0c      	ite	eq
 800d958:	2300      	moveq	r3, #0
 800d95a:	f003 0301 	andne.w	r3, r3, #1
 800d95e:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d962:	f422 1788 	bic.w	r7, r2, #1114112	; 0x110000
 800d966:	4281      	cmp	r1, r0
 800d968:	bf0c      	ite	eq
 800d96a:	2300      	moveq	r3, #0
 800d96c:	f003 0301 	andne.w	r3, r3, #1
 800d970:	f500 20c0 	add.w	r0, r0, #393216	; 0x60000
 800d974:	4287      	cmp	r7, r0
 800d976:	bf0c      	ite	eq
 800d978:	2300      	moveq	r3, #0
 800d97a:	f003 0301 	andne.w	r3, r3, #1
 800d97e:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 800d982:	4281      	cmp	r1, r0
 800d984:	bf0c      	ite	eq
 800d986:	2300      	moveq	r3, #0
 800d988:	f003 0301 	andne.w	r3, r3, #1
 800d98c:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d990:	4281      	cmp	r1, r0
 800d992:	bf0c      	ite	eq
 800d994:	2300      	moveq	r3, #0
 800d996:	f003 0301 	andne.w	r3, r3, #1
 800d99a:	f500 2080 	add.w	r0, r0, #262144	; 0x40000
 800d99e:	4281      	cmp	r1, r0
 800d9a0:	bf0c      	ite	eq
 800d9a2:	2300      	moveq	r3, #0
 800d9a4:	f003 0301 	andne.w	r3, r3, #1
 800d9a8:	b12b      	cbz	r3, 800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d9aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800d9ae:	4b0e      	ldr	r3, [pc, #56]	; (800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	f040 8438 	bne.w	800e226 <HAL_RCCEx_PeriphCLKConfig+0x9a6>

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800d9b6:	4b0a      	ldr	r3, [pc, #40]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800d9b8:	4f0c      	ldr	r7, [pc, #48]	; (800d9ec <HAL_RCCEx_PeriphCLKConfig+0x16c>)
    __HAL_RCC_PWR_CLK_ENABLE();
 800d9ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d9bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d9c0:	641a      	str	r2, [r3, #64]	; 0x40
 800d9c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d9c8:	9301      	str	r3, [sp, #4]
 800d9ca:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 800d9cc:	683b      	ldr	r3, [r7, #0]
 800d9ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9d2:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d9d4:	f7fa f940 	bl	8007c58 <HAL_GetTick>
 800d9d8:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d9da:	e010      	b.n	800d9fe <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800d9dc:	1dfffff9 	.word	0x1dfffff9
 800d9e0:	40023800 	.word	0x40023800
 800d9e4:	00020300 	.word	0x00020300
 800d9e8:	001c0300 	.word	0x001c0300
 800d9ec:	40007000 	.word	0x40007000
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d9f0:	f7fa f932 	bl	8007c58 <HAL_GetTick>
 800d9f4:	eba0 0008 	sub.w	r0, r0, r8
 800d9f8:	2864      	cmp	r0, #100	; 0x64
 800d9fa:	f200 8286 	bhi.w	800df0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	05db      	lsls	r3, r3, #23
 800da02:	d5f5      	bpl.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800da04:	4fb0      	ldr	r7, [pc, #704]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800da06:	6b23      	ldr	r3, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800da08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800da0a:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800da0e:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800da12:	d011      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800da14:	4291      	cmp	r1, r2
 800da16:	d00f      	beq.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800da18:	6f3a      	ldr	r2, [r7, #112]	; 0x70

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800da1a:	6f38      	ldr	r0, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800da1c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 800da20:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 800da24:	6738      	str	r0, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800da26:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800da28:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
 800da2c:	6738      	str	r0, [r7, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800da2e:	673a      	str	r2, [r7, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800da30:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800da32:	07d0      	lsls	r0, r2, #31
 800da34:	f100 836c 	bmi.w	800e110 <HAL_RCCEx_PeriphCLKConfig+0x890>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800da38:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800da3c:	f000 82c9 	beq.w	800dfd2 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800da40:	49a1      	ldr	r1, [pc, #644]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800da42:	688a      	ldr	r2, [r1, #8]
 800da44:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800da48:	608a      	str	r2, [r1, #8]
 800da4a:	4a9f      	ldr	r2, [pc, #636]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800da4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800da50:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800da52:	430b      	orrs	r3, r1
 800da54:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800da56:	6823      	ldr	r3, [r4, #0]
 800da58:	06da      	lsls	r2, r3, #27
 800da5a:	d510      	bpl.n	800da7e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800da5c:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 800da5e:	f037 7280 	bics.w	r2, r7, #16777216	; 0x1000000
 800da62:	f040 82db 	bne.w	800e01c <HAL_RCCEx_PeriphCLKConfig+0x79c>

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800da66:	4a98      	ldr	r2, [pc, #608]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800da68:	f8d2 008c 	ldr.w	r0, [r2, #140]	; 0x8c
 800da6c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
 800da70:	f8c2 008c 	str.w	r0, [r2, #140]	; 0x8c
 800da74:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800da78:	4339      	orrs	r1, r7
 800da7a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800da7e:	045f      	lsls	r7, r3, #17
 800da80:	d50f      	bpl.n	800daa2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800da82:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800da84:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 800da88:	d003      	beq.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800da8a:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800da8e:	f040 8299 	bne.w	800dfc4 <HAL_RCCEx_PeriphCLKConfig+0x744>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800da92:	488d      	ldr	r0, [pc, #564]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800da94:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800da98:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800da9c:	430a      	orrs	r2, r1
 800da9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800daa2:	0418      	lsls	r0, r3, #16
 800daa4:	d50f      	bpl.n	800dac6 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800daa6:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800daa8:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 800daac:	d003      	beq.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 800daae:	f5b1 2f00 	cmp.w	r1, #524288	; 0x80000
 800dab2:	f040 826a 	bne.w	800df8a <HAL_RCCEx_PeriphCLKConfig+0x70a>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800dab6:	4884      	ldr	r0, [pc, #528]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dab8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dabc:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800dac0:	430a      	orrs	r2, r1
 800dac2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800dac6:	03d9      	lsls	r1, r3, #15
 800dac8:	d50f      	bpl.n	800daea <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800daca:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800dacc:	f431 1280 	bics.w	r2, r1, #1048576	; 0x100000
 800dad0:	d003      	beq.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800dad2:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800dad6:	f040 8260 	bne.w	800df9a <HAL_RCCEx_PeriphCLKConfig+0x71a>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dada:	487b      	ldr	r0, [pc, #492]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dadc:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dae0:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800dae4:	430a      	orrs	r2, r1
 800dae6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800daea:	039a      	lsls	r2, r3, #14
 800daec:	d50f      	bpl.n	800db0e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800daee:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800daf0:	f431 0280 	bics.w	r2, r1, #4194304	; 0x400000
 800daf4:	d003      	beq.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800daf6:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800dafa:	f040 825b 	bne.w	800dfb4 <HAL_RCCEx_PeriphCLKConfig+0x734>

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dafe:	4872      	ldr	r0, [pc, #456]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db00:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db04:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800db08:	430a      	orrs	r2, r1
 800db0a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800db0e:	065f      	lsls	r7, r3, #25
 800db10:	d50b      	bpl.n	800db2a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800db12:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800db14:	2903      	cmp	r1, #3
 800db16:	f200 82b3 	bhi.w	800e080 <HAL_RCCEx_PeriphCLKConfig+0x800>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800db1a:	486b      	ldr	r0, [pc, #428]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db1c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db20:	f022 0203 	bic.w	r2, r2, #3
 800db24:	430a      	orrs	r2, r1
 800db26:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800db2a:	0618      	lsls	r0, r3, #24
 800db2c:	d50c      	bpl.n	800db48 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800db2e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800db30:	f031 020c 	bics.w	r2, r1, #12
 800db34:	f040 82b4 	bne.w	800e0a0 <HAL_RCCEx_PeriphCLKConfig+0x820>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800db38:	4863      	ldr	r0, [pc, #396]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db3a:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db3e:	f022 020c 	bic.w	r2, r2, #12
 800db42:	430a      	orrs	r2, r1
 800db44:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800db48:	05d9      	lsls	r1, r3, #23
 800db4a:	d50c      	bpl.n	800db66 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800db4c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800db4e:	f031 0230 	bics.w	r2, r1, #48	; 0x30
 800db52:	f040 82ad 	bne.w	800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x830>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800db56:	485c      	ldr	r0, [pc, #368]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db5c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800db60:	430a      	orrs	r2, r1
 800db62:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800db66:	059a      	lsls	r2, r3, #22
 800db68:	d50c      	bpl.n	800db84 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800db6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800db6c:	f031 02c0 	bics.w	r2, r1, #192	; 0xc0
 800db70:	f040 82a6 	bne.w	800e0c0 <HAL_RCCEx_PeriphCLKConfig+0x840>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800db74:	4854      	ldr	r0, [pc, #336]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db76:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800db7e:	430a      	orrs	r2, r1
 800db80:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800db84:	055f      	lsls	r7, r3, #21
 800db86:	d50c      	bpl.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0x322>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800db88:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800db8a:	f431 7240 	bics.w	r2, r1, #768	; 0x300
 800db8e:	f040 829f 	bne.w	800e0d0 <HAL_RCCEx_PeriphCLKConfig+0x850>

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800db92:	484d      	ldr	r0, [pc, #308]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800db94:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800db98:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800db9c:	430a      	orrs	r2, r1
 800db9e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800dba2:	0518      	lsls	r0, r3, #20
 800dba4:	d50c      	bpl.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800dba6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800dba8:	f431 6240 	bics.w	r2, r1, #3072	; 0xc00
 800dbac:	f040 8298 	bne.w	800e0e0 <HAL_RCCEx_PeriphCLKConfig+0x860>

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800dbb0:	4845      	ldr	r0, [pc, #276]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dbb2:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dbb6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800dbba:	430a      	orrs	r2, r1
 800dbbc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800dbc0:	04d9      	lsls	r1, r3, #19
 800dbc2:	d50c      	bpl.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0x35e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800dbc4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800dbc6:	f431 5240 	bics.w	r2, r1, #12288	; 0x3000
 800dbca:	f040 8291 	bne.w	800e0f0 <HAL_RCCEx_PeriphCLKConfig+0x870>

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800dbce:	483e      	ldr	r0, [pc, #248]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dbd0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dbd4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800dbd8:	430a      	orrs	r2, r1
 800dbda:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800dbde:	049a      	lsls	r2, r3, #18
 800dbe0:	d50c      	bpl.n	800dbfc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800dbe2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800dbe4:	f431 4240 	bics.w	r2, r1, #49152	; 0xc000
 800dbe8:	f040 828a 	bne.w	800e100 <HAL_RCCEx_PeriphCLKConfig+0x880>

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800dbec:	4836      	ldr	r0, [pc, #216]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dbee:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dbf2:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800dbf6:	430a      	orrs	r2, r1
 800dbf8:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dbfc:	025f      	lsls	r7, r3, #9
 800dbfe:	d50c      	bpl.n	800dc1a <HAL_RCCEx_PeriphCLKConfig+0x39a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800dc00:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800dc02:	f031 6280 	bics.w	r2, r1, #67108864	; 0x4000000
 800dc06:	f040 8222 	bne.w	800e04e <HAL_RCCEx_PeriphCLKConfig+0x7ce>

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800dc0a:	482f      	ldr	r0, [pc, #188]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc0c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc10:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 800dc14:	430a      	orrs	r2, r1
 800dc16:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800dc1a:	0298      	lsls	r0, r3, #10
 800dc1c:	d510      	bpl.n	800dc40 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800dc1e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800dc20:	f031 6200 	bics.w	r2, r1, #134217728	; 0x8000000
 800dc24:	f040 821b 	bne.w	800e05e <HAL_RCCEx_PeriphCLKConfig+0x7de>

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dc28:	4827      	ldr	r0, [pc, #156]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 800dc2a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dc2e:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pllsaiused = 1;
 800dc32:	bf08      	it	eq
 800dc34:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800dc36:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
 800dc3a:	430a      	orrs	r2, r1
 800dc3c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 800dc40:	f013 0f08 	tst.w	r3, #8
 800dc44:	bf18      	it	ne
 800dc46:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc48:	0359      	lsls	r1, r3, #13
 800dc4a:	d50c      	bpl.n	800dc66 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800dc4c:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800dc4e:	f031 7240 	bics.w	r2, r1, #50331648	; 0x3000000
 800dc52:	f040 821d 	bne.w	800e090 <HAL_RCCEx_PeriphCLKConfig+0x810>

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dc56:	481c      	ldr	r0, [pc, #112]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc58:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc5c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800dc60:	430a      	orrs	r2, r1
 800dc62:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800dc66:	021a      	lsls	r2, r3, #8
 800dc68:	d50d      	bpl.n	800dc86 <HAL_RCCEx_PeriphCLKConfig+0x406>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800dc6a:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800dc6e:	f031 5280 	bics.w	r2, r1, #268435456	; 0x10000000
 800dc72:	f040 81fc 	bne.w	800e06e <HAL_RCCEx_PeriphCLKConfig+0x7ee>

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800dc76:	4814      	ldr	r0, [pc, #80]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc78:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc7c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800dc80:	430a      	orrs	r2, r1
 800dc82:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800dc86:	015f      	lsls	r7, r3, #5
 800dc88:	d50d      	bpl.n	800dca6 <HAL_RCCEx_PeriphCLKConfig+0x426>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800dc8a:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 800dc8e:	f031 5200 	bics.w	r2, r1, #536870912	; 0x20000000
 800dc92:	f040 81ca 	bne.w	800e02a <HAL_RCCEx_PeriphCLKConfig+0x7aa>

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800dc96:	480c      	ldr	r0, [pc, #48]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dc98:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 800dc9c:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800dca0:	430a      	orrs	r2, r1
 800dca2:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800dca6:	0118      	lsls	r0, r3, #4
 800dca8:	d510      	bpl.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x44c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800dcaa:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800dcae:	f031 7200 	bics.w	r2, r1, #33554432	; 0x2000000
 800dcb2:	f040 81c3 	bne.w	800e03c <HAL_RCCEx_PeriphCLKConfig+0x7bc>

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800dcb6:	4804      	ldr	r0, [pc, #16]	; (800dcc8 <HAL_RCCEx_PeriphCLKConfig+0x448>)
 800dcb8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800dcbc:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
 800dcc6:	e001      	b.n	800dccc <HAL_RCCEx_PeriphCLKConfig+0x44c>
 800dcc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800dccc:	00d9      	lsls	r1, r3, #3
 800dcce:	d50d      	bpl.n	800dcec <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800dcd0:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800dcd4:	f032 6380 	bics.w	r3, r2, #67108864	; 0x4000000
 800dcd8:	f040 8198 	bne.w	800e00c <HAL_RCCEx_PeriphCLKConfig+0x78c>

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800dcdc:	49b3      	ldr	r1, [pc, #716]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dcde:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 800dce2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dce6:	4313      	orrs	r3, r2
 800dce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800dcec:	2e01      	cmp	r6, #1
 800dcee:	d003      	beq.n	800dcf8 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	019a      	lsls	r2, r3, #6
 800dcf4:	f140 8083 	bpl.w	800ddfe <HAL_RCCEx_PeriphCLKConfig+0x57e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800dcf8:	4eac      	ldr	r6, [pc, #688]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dcfa:	6833      	ldr	r3, [r6, #0]
 800dcfc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800dd00:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dd02:	f7f9 ffa9 	bl	8007c58 <HAL_GetTick>
 800dd06:	4607      	mov	r7, r0

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dd08:	e005      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0x496>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800dd0a:	f7f9 ffa5 	bl	8007c58 <HAL_GetTick>
 800dd0e:	1bc0      	subs	r0, r0, r7
 800dd10:	2864      	cmp	r0, #100	; 0x64
 800dd12:	f200 80fa 	bhi.w	800df0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800dd16:	6833      	ldr	r3, [r6, #0]
 800dd18:	011b      	lsls	r3, r3, #4
 800dd1a:	d4f6      	bmi.n	800dd0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
        return HAL_TIMEOUT;
      }
    }

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800dd1c:	6863      	ldr	r3, [r4, #4]
 800dd1e:	3b32      	subs	r3, #50	; 0x32
 800dd20:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800dd24:	f200 816c 	bhi.w	800e000 <HAL_RCCEx_PeriphCLKConfig+0x780>

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800dd28:	6823      	ldr	r3, [r4, #0]
 800dd2a:	07df      	lsls	r7, r3, #31
 800dd2c:	d517      	bpl.n	800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800dd2e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800dd30:	b9aa      	cbnz	r2, 800dd5e <HAL_RCCEx_PeriphCLKConfig+0x4de>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800dd32:	68a7      	ldr	r7, [r4, #8]
 800dd34:	1eba      	subs	r2, r7, #2
 800dd36:	2a05      	cmp	r2, #5
 800dd38:	f200 820c 	bhi.w	800e154 <HAL_RCCEx_PeriphCLKConfig+0x8d4>

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dd3c:	499b      	ldr	r1, [pc, #620]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dd3e:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800dd40:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd44:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800dd48:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 800dd4c:	f006 6670 	and.w	r6, r6, #251658240	; 0xf000000
 800dd50:	4332      	orrs	r2, r6
 800dd52:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800dd56:	ea42 7207 	orr.w	r2, r2, r7, lsl #28
 800dd5a:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800dd5e:	031e      	lsls	r6, r3, #12
 800dd60:	f100 80e9 	bmi.w	800df36 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
 800dd64:	02d8      	lsls	r0, r3, #11
 800dd66:	d504      	bpl.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800dd68:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800dd6a:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 800dd6e:	f000 80e7 	beq.w	800df40 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dd72:	01d9      	lsls	r1, r3, #7
 800dd74:	d514      	bpl.n	800dda0 <HAL_RCCEx_PeriphCLKConfig+0x520>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800dd76:	6927      	ldr	r7, [r4, #16]
 800dd78:	2f03      	cmp	r7, #3
 800dd7a:	f200 81f9 	bhi.w	800e170 <HAL_RCCEx_PeriphCLKConfig+0x8f0>

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd7e:	498b      	ldr	r1, [pc, #556]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800dd80:	6860      	ldr	r0, [r4, #4]
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800dd82:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800dd86:	f8d1 6084 	ldr.w	r6, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800dd8a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800dd8e:	f006 46e0 	and.w	r6, r6, #1879048192	; 0x70000000
 800dd92:	4332      	orrs	r2, r6
 800dd94:	ea42 1280 	orr.w	r2, r2, r0, lsl #6
 800dd98:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800dd9c:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800dda0:	019a      	lsls	r2, r3, #6
 800dda2:	d51a      	bpl.n	800ddda <HAL_RCCEx_PeriphCLKConfig+0x55a>
    {
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800dda4:	6923      	ldr	r3, [r4, #16]
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	f200 81dc 	bhi.w	800e164 <HAL_RCCEx_PeriphCLKConfig+0x8e4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800ddac:	68a3      	ldr	r3, [r4, #8]
 800ddae:	3b02      	subs	r3, #2
 800ddb0:	2b05      	cmp	r3, #5
 800ddb2:	f200 81ec 	bhi.w	800e18e <HAL_RCCEx_PeriphCLKConfig+0x90e>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800ddb6:	68e2      	ldr	r2, [r4, #12]
 800ddb8:	1e93      	subs	r3, r2, #2
 800ddba:	2b0d      	cmp	r3, #13
 800ddbc:	f200 81e0 	bhi.w	800e180 <HAL_RCCEx_PeriphCLKConfig+0x900>

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800ddc0:	6923      	ldr	r3, [r4, #16]
 800ddc2:	6861      	ldr	r1, [r4, #4]
 800ddc4:	041b      	lsls	r3, r3, #16
 800ddc6:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800ddca:	68a1      	ldr	r1, [r4, #8]
 800ddcc:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800ddd0:	4976      	ldr	r1, [pc, #472]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800ddd2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800ddd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800ddda:	4e74      	ldr	r6, [pc, #464]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800dddc:	6833      	ldr	r3, [r6, #0]
 800ddde:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800dde2:	6033      	str	r3, [r6, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dde4:	f7f9 ff38 	bl	8007c58 <HAL_GetTick>
 800dde8:	4607      	mov	r7, r0

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ddea:	e005      	b.n	800ddf8 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ddec:	f7f9 ff34 	bl	8007c58 <HAL_GetTick>
 800ddf0:	1bc0      	subs	r0, r0, r7
 800ddf2:	2864      	cmp	r0, #100	; 0x64
 800ddf4:	f200 8089 	bhi.w	800df0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ddf8:	6833      	ldr	r3, [r6, #0]
 800ddfa:	011b      	lsls	r3, r3, #4
 800ddfc:	d5f6      	bpl.n	800ddec <HAL_RCCEx_PeriphCLKConfig+0x56c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ddfe:	2d01      	cmp	r5, #1
 800de00:	d003      	beq.n	800de0a <HAL_RCCEx_PeriphCLKConfig+0x58a>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800de02:	2000      	movs	r0, #0
}
 800de04:	b003      	add	sp, #12
 800de06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_PLLSAI_DISABLE();
 800de0a:	4d68      	ldr	r5, [pc, #416]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800de0c:	682b      	ldr	r3, [r5, #0]
 800de0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800de12:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800de14:	f7f9 ff20 	bl	8007c58 <HAL_GetTick>
 800de18:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800de1a:	e004      	b.n	800de26 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800de1c:	f7f9 ff1c 	bl	8007c58 <HAL_GetTick>
 800de20:	1b80      	subs	r0, r0, r6
 800de22:	2864      	cmp	r0, #100	; 0x64
 800de24:	d871      	bhi.n	800df0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800de26:	682b      	ldr	r3, [r5, #0]
 800de28:	009f      	lsls	r7, r3, #2
 800de2a:	d4f7      	bmi.n	800de1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800de2c:	6963      	ldr	r3, [r4, #20]
 800de2e:	3b32      	subs	r3, #50	; 0x32
 800de30:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 800de34:	f200 81b9 	bhi.w	800e1aa <HAL_RCCEx_PeriphCLKConfig+0x92a>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800de38:	6823      	ldr	r3, [r4, #0]
 800de3a:	031d      	lsls	r5, r3, #12
 800de3c:	f140 81ad 	bpl.w	800e19a <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800de40:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800de42:	2a00      	cmp	r2, #0
 800de44:	f040 81a9 	bne.w	800e19a <HAL_RCCEx_PeriphCLKConfig+0x91a>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800de48:	69a3      	ldr	r3, [r4, #24]
 800de4a:	3b02      	subs	r3, #2
 800de4c:	2b0d      	cmp	r3, #13
 800de4e:	f200 81d5 	bhi.w	800e1fc <HAL_RCCEx_PeriphCLKConfig+0x97c>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800de52:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800de54:	1e59      	subs	r1, r3, #1
 800de56:	291f      	cmp	r1, #31
 800de58:	f200 81c8 	bhi.w	800e1ec <HAL_RCCEx_PeriphCLKConfig+0x96c>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800de5c:	4a53      	ldr	r2, [pc, #332]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800de5e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800de62:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800de66:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800de6a:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800de6e:	4303      	orrs	r3, r0
 800de70:	6960      	ldr	r0, [r4, #20]
 800de72:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800de76:	69a0      	ldr	r0, [r4, #24]
 800de78:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800de7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800de80:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800de84:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800de88:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800de8c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	0299      	lsls	r1, r3, #10
 800de94:	d504      	bpl.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x620>
 800de96:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800de98:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
 800de9c:	f000 818b 	beq.w	800e1b6 <HAL_RCCEx_PeriphCLKConfig+0x936>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800dea0:	071a      	lsls	r2, r3, #28
 800dea2:	d522      	bpl.n	800deea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800dea4:	69e3      	ldr	r3, [r4, #28]
 800dea6:	3b02      	subs	r3, #2
 800dea8:	2b05      	cmp	r3, #5
 800deaa:	f200 8199 	bhi.w	800e1e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800deae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800deb0:	f430 3340 	bics.w	r3, r0, #196608	; 0x30000
 800deb4:	f040 81a8 	bne.w	800e208 <HAL_RCCEx_PeriphCLKConfig+0x988>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800deb8:	4a3c      	ldr	r2, [pc, #240]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800deba:	6965      	ldr	r5, [r4, #20]
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800debc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800dec0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800dec4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800dec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800decc:	430b      	orrs	r3, r1
 800dece:	69e1      	ldr	r1, [r4, #28]
 800ded0:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 800ded4:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800ded8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800dedc:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800dee0:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800dee4:	4303      	orrs	r3, r0
 800dee6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLSAI_ENABLE();
 800deea:	4c30      	ldr	r4, [pc, #192]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800deec:	6823      	ldr	r3, [r4, #0]
 800deee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800def2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800def4:	f7f9 feb0 	bl	8007c58 <HAL_GetTick>
 800def8:	4605      	mov	r5, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800defa:	6823      	ldr	r3, [r4, #0]
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	d480      	bmi.n	800de02 <HAL_RCCEx_PeriphCLKConfig+0x582>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800df00:	f7f9 feaa 	bl	8007c58 <HAL_GetTick>
 800df04:	1b40      	subs	r0, r0, r5
 800df06:	2864      	cmp	r0, #100	; 0x64
 800df08:	d9f7      	bls.n	800defa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        return HAL_TIMEOUT;
 800df0a:	2003      	movs	r0, #3
}
 800df0c:	b003      	add	sp, #12
 800df0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800df12:	2172      	movs	r1, #114	; 0x72
 800df14:	4826      	ldr	r0, [pc, #152]	; (800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800df16:	f7f6 fc8b 	bl	8004830 <assert_failed>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800df1a:	6823      	ldr	r3, [r4, #0]
 800df1c:	e4ba      	b.n	800d894 <HAL_RCCEx_PeriphCLKConfig+0x14>
      plli2sused = 1;
 800df1e:	2601      	movs	r6, #1
 800df20:	e4fa      	b.n	800d918 <HAL_RCCEx_PeriphCLKConfig+0x98>
  uint32_t pllsaiused = 0;
 800df22:	2500      	movs	r5, #0
      plli2sused = 1;
 800df24:	2601      	movs	r6, #1
 800df26:	e4e0      	b.n	800d8ea <HAL_RCCEx_PeriphCLKConfig+0x6a>
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800df28:	2178      	movs	r1, #120	; 0x78
 800df2a:	4821      	ldr	r0, [pc, #132]	; (800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800df2c:	f7f6 fc80 	bl	8004830 <assert_failed>
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800df30:	6b66      	ldr	r6, [r4, #52]	; 0x34
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	e4b6      	b.n	800d8a4 <HAL_RCCEx_PeriphCLKConfig+0x24>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800df36:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800df38:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 800df3c:	f47f af12 	bne.w	800dd64 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800df40:	68e3      	ldr	r3, [r4, #12]
 800df42:	3b02      	subs	r3, #2
 800df44:	2b0d      	cmp	r3, #13
 800df46:	f200 80f7 	bhi.w	800e138 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800df4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800df4c:	1e59      	subs	r1, r3, #1
 800df4e:	291f      	cmp	r1, #31
 800df50:	f200 80f8 	bhi.w	800e144 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800df54:	4a15      	ldr	r2, [pc, #84]	; (800dfac <HAL_RCCEx_PeriphCLKConfig+0x72c>)
 800df56:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800df5a:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800df5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800df62:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800df66:	4303      	orrs	r3, r0
 800df68:	6860      	ldr	r0, [r4, #4]
 800df6a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800df6e:	68e0      	ldr	r0, [r4, #12]
 800df70:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800df74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800df78:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800df7c:	f023 031f 	bic.w	r3, r3, #31
 800df80:	430b      	orrs	r3, r1
 800df82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800df86:	6823      	ldr	r3, [r4, #0]
 800df88:	e6f3      	b.n	800dd72 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 800df8a:	f240 1105 	movw	r1, #261	; 0x105
 800df8e:	4808      	ldr	r0, [pc, #32]	; (800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800df90:	f7f6 fc4e 	bl	8004830 <assert_failed>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800df94:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800df96:	6823      	ldr	r3, [r4, #0]
 800df98:	e58d      	b.n	800dab6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800df9a:	f240 110f 	movw	r1, #271	; 0x10f
 800df9e:	4804      	ldr	r0, [pc, #16]	; (800dfb0 <HAL_RCCEx_PeriphCLKConfig+0x730>)
 800dfa0:	f7f6 fc46 	bl	8004830 <assert_failed>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800dfa4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800dfa6:	6823      	ldr	r3, [r4, #0]
 800dfa8:	e597      	b.n	800dada <HAL_RCCEx_PeriphCLKConfig+0x25a>
 800dfaa:	bf00      	nop
 800dfac:	40023800 	.word	0x40023800
 800dfb0:	0802c52c 	.word	0x0802c52c
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
 800dfb4:	f240 1119 	movw	r1, #281	; 0x119
 800dfb8:	489e      	ldr	r0, [pc, #632]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dfba:	f7f6 fc39 	bl	8004830 <assert_failed>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800dfbe:	6f21      	ldr	r1, [r4, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800dfc0:	6823      	ldr	r3, [r4, #0]
 800dfc2:	e59c      	b.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 800dfc4:	21fb      	movs	r1, #251	; 0xfb
 800dfc6:	489b      	ldr	r0, [pc, #620]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dfc8:	f7f6 fc32 	bl	8004830 <assert_failed>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800dfcc:	6e61      	ldr	r1, [r4, #100]	; 0x64
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	e55f      	b.n	800da92 <HAL_RCCEx_PeriphCLKConfig+0x212>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800dfd2:	4899      	ldr	r0, [pc, #612]	; (800e238 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800dfd4:	4999      	ldr	r1, [pc, #612]	; (800e23c <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800dfd6:	6882      	ldr	r2, [r0, #8]
 800dfd8:	4019      	ands	r1, r3
 800dfda:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	6082      	str	r2, [r0, #8]
 800dfe2:	e532      	b.n	800da4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 800dfe4:	2188      	movs	r1, #136	; 0x88
 800dfe6:	4893      	ldr	r0, [pc, #588]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dfe8:	f7f6 fc22 	bl	8004830 <assert_failed>
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800dfec:	6be5      	ldr	r5, [r4, #60]	; 0x3c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	e46b      	b.n	800d8ca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
 800dff2:	219c      	movs	r1, #156	; 0x9c
 800dff4:	488f      	ldr	r0, [pc, #572]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800dff6:	f7f6 fc1b 	bl	8004830 <assert_failed>
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800dffa:	6c21      	ldr	r1, [r4, #64]	; 0x40
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800dffc:	6823      	ldr	r3, [r4, #0]
 800dffe:	e47b      	b.n	800d8f8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
 800e000:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800e004:	488b      	ldr	r0, [pc, #556]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e006:	f7f6 fc13 	bl	8004830 <assert_failed>
 800e00a:	e68d      	b.n	800dd28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));
 800e00c:	f44f 71df 	mov.w	r1, #446	; 0x1be
 800e010:	4888      	ldr	r0, [pc, #544]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e012:	f7f6 fc0d 	bl	8004830 <assert_failed>
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800e016:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 800e01a:	e65f      	b.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x45c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
 800e01c:	21f1      	movs	r1, #241	; 0xf1
 800e01e:	4885      	ldr	r0, [pc, #532]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e020:	f7f6 fc06 	bl	8004830 <assert_failed>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e024:	6ba7      	ldr	r7, [r4, #56]	; 0x38
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e026:	6823      	ldr	r3, [r4, #0]
 800e028:	e51d      	b.n	800da66 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
 800e02a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e02e:	4881      	ldr	r0, [pc, #516]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e030:	f7f6 fbfe 	bl	8004830 <assert_failed>
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800e034:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e038:	6823      	ldr	r3, [r4, #0]
 800e03a:	e62c      	b.n	800dc96 <HAL_RCCEx_PeriphCLKConfig+0x416>
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));
 800e03c:	f44f 71da 	mov.w	r1, #436	; 0x1b4
 800e040:	487c      	ldr	r0, [pc, #496]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e042:	f7f6 fbf5 	bl	8004830 <assert_failed>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e046:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800e04a:	6823      	ldr	r3, [r4, #0]
 800e04c:	e633      	b.n	800dcb6 <HAL_RCCEx_PeriphCLKConfig+0x436>
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
 800e04e:	f240 1173 	movw	r1, #371	; 0x173
 800e052:	4878      	ldr	r0, [pc, #480]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e054:	f7f6 fbec 	bl	8004830 <assert_failed>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e058:	6fa1      	ldr	r1, [r4, #120]	; 0x78
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e05a:	6823      	ldr	r3, [r4, #0]
 800e05c:	e5d5      	b.n	800dc0a <HAL_RCCEx_PeriphCLKConfig+0x38a>
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));
 800e05e:	f240 117d 	movw	r1, #381	; 0x17d
 800e062:	4874      	ldr	r0, [pc, #464]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e064:	f7f6 fbe4 	bl	8004830 <assert_failed>
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e068:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e06a:	6823      	ldr	r3, [r4, #0]
 800e06c:	e5dc      	b.n	800dc28 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
 800e06e:	f240 119f 	movw	r1, #415	; 0x19f
 800e072:	4870      	ldr	r0, [pc, #448]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e074:	f7f6 fbdc 	bl	8004830 <assert_failed>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e078:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800e07c:	6823      	ldr	r3, [r4, #0]
 800e07e:	e5fa      	b.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 800e080:	f240 1123 	movw	r1, #291	; 0x123
 800e084:	486b      	ldr	r0, [pc, #428]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e086:	f7f6 fbd3 	bl	8004830 <assert_failed>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e08a:	6c61      	ldr	r1, [r4, #68]	; 0x44
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e08c:	6823      	ldr	r3, [r4, #0]
 800e08e:	e544      	b.n	800db1a <HAL_RCCEx_PeriphCLKConfig+0x29a>
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
 800e090:	f240 1195 	movw	r1, #405	; 0x195
 800e094:	4867      	ldr	r0, [pc, #412]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e096:	f7f6 fbcb 	bl	8004830 <assert_failed>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e09a:	6f61      	ldr	r1, [r4, #116]	; 0x74
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e09c:	6823      	ldr	r3, [r4, #0]
 800e09e:	e5da      	b.n	800dc56 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 800e0a0:	f240 112d 	movw	r1, #301	; 0x12d
 800e0a4:	4863      	ldr	r0, [pc, #396]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0a6:	f7f6 fbc3 	bl	8004830 <assert_failed>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e0aa:	6ca1      	ldr	r1, [r4, #72]	; 0x48
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e0ac:	6823      	ldr	r3, [r4, #0]
 800e0ae:	e543      	b.n	800db38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 800e0b0:	f240 1137 	movw	r1, #311	; 0x137
 800e0b4:	485f      	ldr	r0, [pc, #380]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0b6:	f7f6 fbbb 	bl	8004830 <assert_failed>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e0ba:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e0bc:	6823      	ldr	r3, [r4, #0]
 800e0be:	e54a      	b.n	800db56 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 800e0c0:	f240 1141 	movw	r1, #321	; 0x141
 800e0c4:	485b      	ldr	r0, [pc, #364]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0c6:	f7f6 fbb3 	bl	8004830 <assert_failed>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e0ca:	6d21      	ldr	r1, [r4, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e0cc:	6823      	ldr	r3, [r4, #0]
 800e0ce:	e551      	b.n	800db74 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
 800e0d0:	f240 114b 	movw	r1, #331	; 0x14b
 800e0d4:	4857      	ldr	r0, [pc, #348]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0d6:	f7f6 fbab 	bl	8004830 <assert_failed>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e0da:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e0dc:	6823      	ldr	r3, [r4, #0]
 800e0de:	e558      	b.n	800db92 <HAL_RCCEx_PeriphCLKConfig+0x312>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
 800e0e0:	f240 1155 	movw	r1, #341	; 0x155
 800e0e4:	4853      	ldr	r0, [pc, #332]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0e6:	f7f6 fba3 	bl	8004830 <assert_failed>
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e0ea:	6da1      	ldr	r1, [r4, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e0ec:	6823      	ldr	r3, [r4, #0]
 800e0ee:	e55f      	b.n	800dbb0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
 800e0f0:	f240 115f 	movw	r1, #351	; 0x15f
 800e0f4:	484f      	ldr	r0, [pc, #316]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e0f6:	f7f6 fb9b 	bl	8004830 <assert_failed>
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e0fa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e0fc:	6823      	ldr	r3, [r4, #0]
 800e0fe:	e566      	b.n	800dbce <HAL_RCCEx_PeriphCLKConfig+0x34e>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
 800e100:	f240 1169 	movw	r1, #361	; 0x169
 800e104:	484b      	ldr	r0, [pc, #300]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e106:	f7f6 fb93 	bl	8004830 <assert_failed>
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e10a:	6e21      	ldr	r1, [r4, #96]	; 0x60
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e10c:	6823      	ldr	r3, [r4, #0]
 800e10e:	e56d      	b.n	800dbec <HAL_RCCEx_PeriphCLKConfig+0x36c>
        tickstart = HAL_GetTick();
 800e110:	f7f9 fda2 	bl	8007c58 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e114:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800e118:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e11a:	e006      	b.n	800e12a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e11c:	f7f9 fd9c 	bl	8007c58 <HAL_GetTick>
 800e120:	eba0 0008 	sub.w	r0, r0, r8
 800e124:	4548      	cmp	r0, r9
 800e126:	f63f aef0 	bhi.w	800df0a <HAL_RCCEx_PeriphCLKConfig+0x68a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e12a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e12c:	0799      	lsls	r1, r3, #30
 800e12e:	d5f5      	bpl.n	800e11c <HAL_RCCEx_PeriphCLKConfig+0x89c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e130:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800e132:	f403 7140 	and.w	r1, r3, #768	; 0x300
 800e136:	e47f      	b.n	800da38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e138:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 800e13c:	483d      	ldr	r0, [pc, #244]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e13e:	f7f6 fb77 	bl	8004830 <assert_failed>
 800e142:	e702      	b.n	800df4a <HAL_RCCEx_PeriphCLKConfig+0x6ca>
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));
 800e144:	f44f 71f9 	mov.w	r1, #498	; 0x1f2
 800e148:	483a      	ldr	r0, [pc, #232]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e14a:	f7f6 fb71 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800e14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e150:	1e59      	subs	r1, r3, #1
 800e152:	e6ff      	b.n	800df54 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e154:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 800e158:	4836      	ldr	r0, [pc, #216]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e15a:	f7f6 fb69 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800e15e:	68a7      	ldr	r7, [r4, #8]
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800e160:	6823      	ldr	r3, [r4, #0]
 800e162:	e5eb      	b.n	800dd3c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e164:	f44f 7105 	mov.w	r1, #532	; 0x214
 800e168:	4832      	ldr	r0, [pc, #200]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e16a:	f7f6 fb61 	bl	8004830 <assert_failed>
 800e16e:	e61d      	b.n	800ddac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
 800e170:	f240 2105 	movw	r1, #517	; 0x205
 800e174:	482f      	ldr	r0, [pc, #188]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e176:	f7f6 fb5b 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800e17a:	6927      	ldr	r7, [r4, #16]
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	e5fe      	b.n	800dd7e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
 800e180:	f240 2116 	movw	r1, #534	; 0x216
 800e184:	482b      	ldr	r0, [pc, #172]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e186:	f7f6 fb53 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800e18a:	68e2      	ldr	r2, [r4, #12]
 800e18c:	e618      	b.n	800ddc0 <HAL_RCCEx_PeriphCLKConfig+0x540>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
 800e18e:	f240 2115 	movw	r1, #533	; 0x215
 800e192:	4828      	ldr	r0, [pc, #160]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e194:	f7f6 fb4c 	bl	8004830 <assert_failed>
 800e198:	e60d      	b.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x536>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800e19a:	02d8      	lsls	r0, r3, #11
 800e19c:	f57f ae79 	bpl.w	800de92 <HAL_RCCEx_PeriphCLKConfig+0x612>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800e1a0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800e1a2:	2a00      	cmp	r2, #0
 800e1a4:	f47f ae75 	bne.w	800de92 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800e1a8:	e64e      	b.n	800de48 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));
 800e1aa:	f44f 7111 	mov.w	r1, #580	; 0x244
 800e1ae:	4821      	ldr	r0, [pc, #132]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1b0:	f7f6 fb3e 	bl	8004830 <assert_failed>
 800e1b4:	e640      	b.n	800de38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e1b6:	6a20      	ldr	r0, [r4, #32]
 800e1b8:	2803      	cmp	r0, #3
 800e1ba:	d82c      	bhi.n	800e216 <HAL_RCCEx_PeriphCLKConfig+0x996>
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800e1bc:	491e      	ldr	r1, [pc, #120]	; (800e238 <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800e1be:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800e1c2:	f8d1 5088 	ldr.w	r5, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e1c6:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800e1ca:	f005 45e0 	and.w	r5, r5, #1879048192	; 0x70000000
 800e1ce:	432a      	orrs	r2, r5
 800e1d0:	6965      	ldr	r5, [r4, #20]
 800e1d2:	ea42 1285 	orr.w	r2, r2, r5, lsl #6
 800e1d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800e1da:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
 800e1de:	e65f      	b.n	800dea0 <HAL_RCCEx_PeriphCLKConfig+0x620>
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
 800e1e0:	f240 216f 	movw	r1, #623	; 0x26f
 800e1e4:	4813      	ldr	r0, [pc, #76]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1e6:	f7f6 fb23 	bl	8004830 <assert_failed>
 800e1ea:	e660      	b.n	800deae <HAL_RCCEx_PeriphCLKConfig+0x62e>
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));
 800e1ec:	f240 214d 	movw	r1, #589	; 0x24d
 800e1f0:	4810      	ldr	r0, [pc, #64]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e1f2:	f7f6 fb1d 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800e1f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800e1f8:	1e59      	subs	r1, r3, #1
 800e1fa:	e62f      	b.n	800de5c <HAL_RCCEx_PeriphCLKConfig+0x5dc>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
 800e1fc:	f240 214b 	movw	r1, #587	; 0x24b
 800e200:	480c      	ldr	r0, [pc, #48]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e202:	f7f6 fb15 	bl	8004830 <assert_failed>
 800e206:	e624      	b.n	800de52 <HAL_RCCEx_PeriphCLKConfig+0x5d2>
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));
 800e208:	480a      	ldr	r0, [pc, #40]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e20a:	f44f 711c 	mov.w	r1, #624	; 0x270
 800e20e:	f7f6 fb0f 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800e212:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800e214:	e650      	b.n	800deb8 <HAL_RCCEx_PeriphCLKConfig+0x638>
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
 800e216:	4807      	ldr	r0, [pc, #28]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e218:	f44f 7118 	mov.w	r1, #608	; 0x260
 800e21c:	f7f6 fb08 	bl	8004830 <assert_failed>
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800e220:	6a20      	ldr	r0, [r4, #32]
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800e222:	6823      	ldr	r3, [r4, #0]
 800e224:	e7ca      	b.n	800e1bc <HAL_RCCEx_PeriphCLKConfig+0x93c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 800e226:	21b7      	movs	r1, #183	; 0xb7
 800e228:	4802      	ldr	r0, [pc, #8]	; (800e234 <HAL_RCCEx_PeriphCLKConfig+0x9b4>)
 800e22a:	f7f6 fb01 	bl	8004830 <assert_failed>
 800e22e:	f7ff bbc2 	b.w	800d9b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800e232:	bf00      	nop
 800e234:	0802c52c 	.word	0x0802c52c
 800e238:	40023800 	.word	0x40023800
 800e23c:	0ffffcff 	.word	0x0ffffcff

0800e240 <HAL_RNG_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e240:	b308      	cbz	r0, 800e286 <HAL_RNG_Init+0x46>
  {
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e242:	4b12      	ldr	r3, [pc, #72]	; (800e28c <HAL_RNG_Init+0x4c>)
 800e244:	6802      	ldr	r2, [r0, #0]
 800e246:	429a      	cmp	r2, r3
{
 800e248:	b510      	push	{r4, lr}
 800e24a:	4604      	mov	r4, r0
  assert_param(IS_RNG_ALL_INSTANCE(hrng->Instance));
 800e24c:	d003      	beq.n	800e256 <HAL_RNG_Init+0x16>
 800e24e:	21a3      	movs	r1, #163	; 0xa3
 800e250:	480f      	ldr	r0, [pc, #60]	; (800e290 <HAL_RNG_Init+0x50>)
 800e252:	f7f6 faed 	bl	8004830 <assert_failed>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e256:	7963      	ldrb	r3, [r4, #5]
 800e258:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e25c:	b173      	cbz	r3, 800e27c <HAL_RNG_Init+0x3c>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e25e:	6821      	ldr	r1, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800e260:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e262:	2200      	movs	r2, #0
  hrng->State = HAL_RNG_STATE_READY;
 800e264:	f04f 0c01 	mov.w	ip, #1
  hrng->State = HAL_RNG_STATE_BUSY;
 800e268:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 800e26a:	680b      	ldr	r3, [r1, #0]

  /* Return function status */
  return HAL_OK;
 800e26c:	4610      	mov	r0, r2
  __HAL_RNG_ENABLE(hrng);
 800e26e:	f043 0304 	orr.w	r3, r3, #4
 800e272:	600b      	str	r3, [r1, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800e274:	f884 c005 	strb.w	ip, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e278:	60a2      	str	r2, [r4, #8]
}
 800e27a:	bd10      	pop	{r4, pc}
    HAL_RNG_MspInit(hrng);
 800e27c:	4620      	mov	r0, r4
    hrng->Lock = HAL_UNLOCKED;
 800e27e:	7122      	strb	r2, [r4, #4]
    HAL_RNG_MspInit(hrng);
 800e280:	f7f7 ff66 	bl	8006150 <HAL_RNG_MspInit>
 800e284:	e7eb      	b.n	800e25e <HAL_RNG_Init+0x1e>
    return HAL_ERROR;
 800e286:	2001      	movs	r0, #1
}
 800e288:	4770      	bx	lr
 800e28a:	bf00      	nop
 800e28c:	50060800 	.word	0x50060800
 800e290:	0802c568 	.word	0x0802c568

0800e294 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 800e294:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e296:	460c      	mov	r4, r1
 800e298:	4615      	mov	r5, r2
 800e29a:	b083      	sub	sp, #12
 800e29c:	4606      	mov	r6, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e29e:	4425      	add	r5, r4
 800e2a0:	f7f9 fcda 	bl	8007c58 <HAL_GetTick>
 800e2a4:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 800e2a6:	f7f9 fcd7 	bl	8007c58 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e2aa:	4b25      	ldr	r3, [pc, #148]	; (800e340 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xac>)
  tmp_tickstart = HAL_GetTick();
 800e2ac:	4607      	mov	r7, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 800e2b4:	fb05 f303 	mul.w	r3, r5, r3
 800e2b8:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2ba:	6832      	ldr	r2, [r6, #0]
 800e2bc:	e001      	b.n	800e2c2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2e>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e2be:	1c63      	adds	r3, r4, #1
 800e2c0:	d106      	bne.n	800e2d0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3c>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e2c2:	6893      	ldr	r3, [r2, #8]
 800e2c4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800e2c8:	d1f9      	bne.n	800e2be <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
      }
      count--;
    }
  }

  return HAL_OK;
 800e2ca:	4618      	mov	r0, r3
}
 800e2cc:	b003      	add	sp, #12
 800e2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e2d0:	f7f9 fcc2 	bl	8007c58 <HAL_GetTick>
 800e2d4:	1bc0      	subs	r0, r0, r7
 800e2d6:	42a8      	cmp	r0, r5
 800e2d8:	d208      	bcs.n	800e2ec <SPI_WaitFlagStateUntilTimeout.constprop.0+0x58>
      if (count == 0U)
 800e2da:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800e2dc:	2b00      	cmp	r3, #0
      count--;
 800e2de:	9b01      	ldr	r3, [sp, #4]
 800e2e0:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e2e4:	bf08      	it	eq
 800e2e6:	2500      	moveq	r5, #0
      count--;
 800e2e8:	9301      	str	r3, [sp, #4]
 800e2ea:	e7e6      	b.n	800e2ba <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2ec:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2f0:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2f2:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e2f6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e2fa:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e2fc:	d014      	beq.n	800e328 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x94>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e2fe:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e300:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e304:	d007      	beq.n	800e316 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x82>
        hspi->State = HAL_SPI_STATE_READY;
 800e306:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e308:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e30a:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e30c:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e310:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e314:	e7da      	b.n	800e2cc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
          SPI_RESET_CRC(hspi);
 800e316:	681a      	ldr	r2, [r3, #0]
 800e318:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e31c:	601a      	str	r2, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e324:	601a      	str	r2, [r3, #0]
 800e326:	e7ee      	b.n	800e306 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x72>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e328:	68b2      	ldr	r2, [r6, #8]
 800e32a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e32e:	d002      	beq.n	800e336 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa2>
 800e330:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e334:	d1e3      	bne.n	800e2fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
          __HAL_SPI_DISABLE(hspi);
 800e336:	681a      	ldr	r2, [r3, #0]
 800e338:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e33c:	601a      	str	r2, [r3, #0]
 800e33e:	e7de      	b.n	800e2fe <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6a>
 800e340:	20000260 	.word	0x20000260

0800e344 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e344:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e348:	4615      	mov	r5, r2
 800e34a:	4698      	mov	r8, r3
 800e34c:	b083      	sub	sp, #12
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800e34e:	2300      	movs	r3, #0

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e350:	44a8      	add	r8, r5
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e352:	4606      	mov	r6, r0
  __IO uint8_t  tmpreg8 = 0;
 800e354:	f88d 3003 	strb.w	r3, [sp, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800e358:	460c      	mov	r4, r1
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800e35a:	f7f9 fc7d 	bl	8007c58 <HAL_GetTick>
 800e35e:	eba8 0700 	sub.w	r7, r8, r0
  tmp_tickstart = HAL_GetTick();
 800e362:	f7f9 fc79 	bl	8007c58 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e366:	4b2e      	ldr	r3, [pc, #184]	; (800e420 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xdc>)
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800e368:	f8d6 9000 	ldr.w	r9, [r6]
  tmp_tickstart = HAL_GetTick();
 800e36c:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e36e:	681b      	ldr	r3, [r3, #0]

  while ((hspi->Instance->SR & Fifo) != State)
 800e370:	464a      	mov	r2, r9
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800e372:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800e376:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800e37a:	0d1b      	lsrs	r3, r3, #20
 800e37c:	fb07 f303 	mul.w	r3, r7, r3
 800e380:	9301      	str	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e382:	e00b      	b.n	800e39c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800e384:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
 800e388:	d106      	bne.n	800e398 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800e38a:	f899 300c 	ldrb.w	r3, [r9, #12]
 800e38e:	b2db      	uxtb	r3, r3
 800e390:	f88d 3003 	strb.w	r3, [sp, #3]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800e394:	f89d 3003 	ldrb.w	r3, [sp, #3]
    }

    if (Timeout != HAL_MAX_DELAY)
 800e398:	1c6b      	adds	r3, r5, #1
 800e39a:	d106      	bne.n	800e3aa <SPI_WaitFifoStateUntilTimeout.constprop.0+0x66>
  while ((hspi->Instance->SR & Fifo) != State)
 800e39c:	6893      	ldr	r3, [r2, #8]
 800e39e:	4023      	ands	r3, r4
 800e3a0:	d1f0      	bne.n	800e384 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x40>
      }
      count--;
    }
  }

  return HAL_OK;
 800e3a2:	4618      	mov	r0, r3
}
 800e3a4:	b003      	add	sp, #12
 800e3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e3aa:	f7f9 fc55 	bl	8007c58 <HAL_GetTick>
 800e3ae:	eba0 0008 	sub.w	r0, r0, r8
 800e3b2:	42b8      	cmp	r0, r7
 800e3b4:	d209      	bcs.n	800e3ca <SPI_WaitFifoStateUntilTimeout.constprop.0+0x86>
      if (count == 0U)
 800e3b6:	9b01      	ldr	r3, [sp, #4]
  while ((hspi->Instance->SR & Fifo) != State)
 800e3b8:	6832      	ldr	r2, [r6, #0]
        tmp_timeout = 0U;
 800e3ba:	2b00      	cmp	r3, #0
      count--;
 800e3bc:	9b01      	ldr	r3, [sp, #4]
 800e3be:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 800e3c2:	bf08      	it	eq
 800e3c4:	2700      	moveq	r7, #0
      count--;
 800e3c6:	9301      	str	r3, [sp, #4]
 800e3c8:	e7e8      	b.n	800e39c <SPI_WaitFifoStateUntilTimeout.constprop.0+0x58>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3ca:	e9d6 3100 	ldrd	r3, r1, [r6]
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e3ce:	685a      	ldr	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3d0:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e3d4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800e3d8:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e3da:	d014      	beq.n	800e406 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xc2>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e3dc:	6ab2      	ldr	r2, [r6, #40]	; 0x28
 800e3de:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800e3e2:	d007      	beq.n	800e3f4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xb0>
        hspi->State = HAL_SPI_STATE_READY;
 800e3e4:	2101      	movs	r1, #1
        __HAL_UNLOCK(hspi);
 800e3e6:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 800e3e8:	2003      	movs	r0, #3
        hspi->State = HAL_SPI_STATE_READY;
 800e3ea:	f886 105d 	strb.w	r1, [r6, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800e3ee:	f886 205c 	strb.w	r2, [r6, #92]	; 0x5c
        return HAL_TIMEOUT;
 800e3f2:	e7d7      	b.n	800e3a4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x60>
          SPI_RESET_CRC(hspi);
 800e3f4:	681a      	ldr	r2, [r3, #0]
 800e3f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e3fa:	601a      	str	r2, [r3, #0]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e402:	601a      	str	r2, [r3, #0]
 800e404:	e7ee      	b.n	800e3e4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xa0>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e406:	68b2      	ldr	r2, [r6, #8]
 800e408:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800e40c:	d002      	beq.n	800e414 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>
 800e40e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800e412:	d1e3      	bne.n	800e3dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
          __HAL_SPI_DISABLE(hspi);
 800e414:	681a      	ldr	r2, [r3, #0]
 800e416:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e41a:	601a      	str	r2, [r3, #0]
 800e41c:	e7de      	b.n	800e3dc <SPI_WaitFifoStateUntilTimeout.constprop.0+0x98>
 800e41e:	bf00      	nop
 800e420:	20000260 	.word	0x20000260

0800e424 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e424:	b570      	push	{r4, r5, r6, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	4613      	mov	r3, r2
 800e42a:	460e      	mov	r6, r1
 800e42c:	4605      	mov	r5, r0
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e42e:	9201      	str	r2, [sp, #4]
 800e430:	460a      	mov	r2, r1
 800e432:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800e436:	f7ff ff85 	bl	800e344 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e43a:	9b01      	ldr	r3, [sp, #4]
 800e43c:	bb58      	cbnz	r0, 800e496 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e43e:	4919      	ldr	r1, [pc, #100]	; (800e4a4 <SPI_EndRxTxTransaction+0x80>)
 800e440:	4a19      	ldr	r2, [pc, #100]	; (800e4a8 <SPI_EndRxTxTransaction+0x84>)
 800e442:	6808      	ldr	r0, [r1, #0]
 800e444:	fba2 2000 	umull	r2, r0, r2, r0
 800e448:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e44c:	0d40      	lsrs	r0, r0, #21
 800e44e:	fb02 f000 	mul.w	r0, r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e452:	686a      	ldr	r2, [r5, #4]
 800e454:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e458:	9003      	str	r0, [sp, #12]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e45a:	d107      	bne.n	800e46c <SPI_EndRxTxTransaction+0x48>
 800e45c:	e012      	b.n	800e484 <SPI_EndRxTxTransaction+0x60>
    {
      if (count == 0U)
      {
        break;
      }
      count--;
 800e45e:	9c03      	ldr	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e460:	682a      	ldr	r2, [r5, #0]
      count--;
 800e462:	3c01      	subs	r4, #1
 800e464:	9403      	str	r4, [sp, #12]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e466:	6894      	ldr	r4, [r2, #8]
 800e468:	0622      	lsls	r2, r4, #24
 800e46a:	d502      	bpl.n	800e472 <SPI_EndRxTxTransaction+0x4e>
      if (count == 0U)
 800e46c:	9c03      	ldr	r4, [sp, #12]
 800e46e:	2c00      	cmp	r4, #0
 800e470:	d1f5      	bne.n	800e45e <SPI_EndRxTxTransaction+0x3a>
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800e472:	4632      	mov	r2, r6
 800e474:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800e478:	4628      	mov	r0, r5
 800e47a:	f7ff ff63 	bl	800e344 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800e47e:	b950      	cbnz	r0, 800e496 <SPI_EndRxTxTransaction+0x72>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 800e480:	b004      	add	sp, #16
 800e482:	bd70      	pop	{r4, r5, r6, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e484:	461a      	mov	r2, r3
 800e486:	4631      	mov	r1, r6
 800e488:	4628      	mov	r0, r5
 800e48a:	9301      	str	r3, [sp, #4]
 800e48c:	f7ff ff02 	bl	800e294 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800e490:	9b01      	ldr	r3, [sp, #4]
 800e492:	2800      	cmp	r0, #0
 800e494:	d0ed      	beq.n	800e472 <SPI_EndRxTxTransaction+0x4e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e496:	6e2b      	ldr	r3, [r5, #96]	; 0x60
    return HAL_TIMEOUT;
 800e498:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e49a:	f043 0320 	orr.w	r3, r3, #32
 800e49e:	662b      	str	r3, [r5, #96]	; 0x60
}
 800e4a0:	b004      	add	sp, #16
 800e4a2:	bd70      	pop	{r4, r5, r6, pc}
 800e4a4:	20000260 	.word	0x20000260
 800e4a8:	165e9f81 	.word	0x165e9f81

0800e4ac <HAL_SPI_Init>:
  if (hspi == NULL)
 800e4ac:	2800      	cmp	r0, #0
 800e4ae:	f000 8128 	beq.w	800e702 <HAL_SPI_Init+0x256>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e4b2:	6802      	ldr	r2, [r0, #0]
 800e4b4:	4ba7      	ldr	r3, [pc, #668]	; (800e754 <HAL_SPI_Init+0x2a8>)
 800e4b6:	49a8      	ldr	r1, [pc, #672]	; (800e758 <HAL_SPI_Init+0x2ac>)
{
 800e4b8:	b570      	push	{r4, r5, r6, lr}
 800e4ba:	4604      	mov	r4, r0
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e4bc:	48a7      	ldr	r0, [pc, #668]	; (800e75c <HAL_SPI_Init+0x2b0>)
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	bf18      	it	ne
 800e4c2:	4282      	cmpne	r2, r0
 800e4c4:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
 800e4c8:	bf14      	ite	ne
 800e4ca:	2301      	movne	r3, #1
 800e4cc:	2300      	moveq	r3, #0
 800e4ce:	428a      	cmp	r2, r1
 800e4d0:	bf0c      	ite	eq
 800e4d2:	2300      	moveq	r3, #0
 800e4d4:	f003 0301 	andne.w	r3, r3, #1
 800e4d8:	f501 318a 	add.w	r1, r1, #70656	; 0x11400
 800e4dc:	4282      	cmp	r2, r0
 800e4de:	bf0c      	ite	eq
 800e4e0:	2300      	moveq	r3, #0
 800e4e2:	f003 0301 	andne.w	r3, r3, #1
 800e4e6:	428a      	cmp	r2, r1
 800e4e8:	bf0c      	ite	eq
 800e4ea:	2300      	moveq	r3, #0
 800e4ec:	f003 0301 	andne.w	r3, r3, #1
 800e4f0:	b11b      	cbz	r3, 800e4fa <HAL_SPI_Init+0x4e>
 800e4f2:	4b9b      	ldr	r3, [pc, #620]	; (800e760 <HAL_SPI_Init+0x2b4>)
 800e4f4:	429a      	cmp	r2, r3
 800e4f6:	f040 80fe 	bne.w	800e6f6 <HAL_SPI_Init+0x24a>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e4fa:	6863      	ldr	r3, [r4, #4]
 800e4fc:	b11b      	cbz	r3, 800e506 <HAL_SPI_Init+0x5a>
 800e4fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e502:	f040 80cd 	bne.w	800e6a0 <HAL_SPI_Init+0x1f4>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e506:	68a3      	ldr	r3, [r4, #8]
 800e508:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 800e50c:	d003      	beq.n	800e516 <HAL_SPI_Init+0x6a>
 800e50e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e512:	f040 80db 	bne.w	800e6cc <HAL_SPI_Init+0x220>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e516:	68e2      	ldr	r2, [r4, #12]
 800e518:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800e51c:	f422 7040 	bic.w	r0, r2, #768	; 0x300
 800e520:	f422 6110 	bic.w	r1, r2, #2304	; 0x900
 800e524:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800e528:	bf18      	it	ne
 800e52a:	f5b0 6f00 	cmpne.w	r0, #2048	; 0x800
 800e52e:	bf14      	ite	ne
 800e530:	2301      	movne	r3, #1
 800e532:	2300      	moveq	r3, #0
 800e534:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 800e538:	bf0c      	ite	eq
 800e53a:	2300      	moveq	r3, #0
 800e53c:	f003 0301 	andne.w	r3, r3, #1
 800e540:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800e544:	bf0c      	ite	eq
 800e546:	2300      	moveq	r3, #0
 800e548:	f003 0301 	andne.w	r3, r3, #1
 800e54c:	b12b      	cbz	r3, 800e55a <HAL_SPI_Init+0xae>
 800e54e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e552:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800e556:	f040 80f7 	bne.w	800e748 <HAL_SPI_Init+0x29c>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e55a:	69a3      	ldr	r3, [r4, #24]
 800e55c:	f433 7200 	bics.w	r2, r3, #512	; 0x200
 800e560:	d003      	beq.n	800e56a <HAL_SPI_Init+0xbe>
 800e562:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800e566:	f040 80a1 	bne.w	800e6ac <HAL_SPI_Init+0x200>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e56a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e56c:	f033 0308 	bics.w	r3, r3, #8
 800e570:	f040 80a6 	bne.w	800e6c0 <HAL_SPI_Init+0x214>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e574:	69e3      	ldr	r3, [r4, #28]
 800e576:	f023 0318 	bic.w	r3, r3, #24
 800e57a:	2b20      	cmp	r3, #32
 800e57c:	d002      	beq.n	800e584 <HAL_SPI_Init+0xd8>
 800e57e:	2b00      	cmp	r3, #0
 800e580:	f040 80d6 	bne.w	800e730 <HAL_SPI_Init+0x284>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e584:	6a23      	ldr	r3, [r4, #32]
 800e586:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800e58a:	f040 80a8 	bne.w	800e6de <HAL_SPI_Init+0x232>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e58e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e590:	f033 0210 	bics.w	r2, r3, #16
 800e594:	d17b      	bne.n	800e68e <HAL_SPI_Init+0x1e2>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e596:	2b00      	cmp	r3, #0
 800e598:	d16e      	bne.n	800e678 <HAL_SPI_Init+0x1cc>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e59a:	6923      	ldr	r3, [r4, #16]
 800e59c:	f033 0302 	bics.w	r3, r3, #2
 800e5a0:	f040 80c0 	bne.w	800e724 <HAL_SPI_Init+0x278>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 800e5a4:	6963      	ldr	r3, [r4, #20]
 800e5a6:	2b01      	cmp	r3, #1
 800e5a8:	d904      	bls.n	800e5b4 <HAL_SPI_Init+0x108>
 800e5aa:	f44f 71a9 	mov.w	r1, #338	; 0x152
 800e5ae:	486d      	ldr	r0, [pc, #436]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e5b0:	f7f6 f93e 	bl	8004830 <assert_failed>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e5b4:	6863      	ldr	r3, [r4, #4]
 800e5b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800e5ba:	f000 80a4 	beq.w	800e706 <HAL_SPI_Init+0x25a>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5c2:	2200      	movs	r2, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5c4:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e5c8:	62a2      	str	r2, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800e5ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	f000 808b 	beq.w	800e6ea <HAL_SPI_Init+0x23e>
  __HAL_SPI_DISABLE(hspi);
 800e5d4:	6825      	ldr	r5, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e5d6:	2202      	movs	r2, #2
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e5d8:	68e3      	ldr	r3, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 800e5da:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 800e5de:	682a      	ldr	r2, [r5, #0]
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e5e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 800e5e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800e5e8:	bf8c      	ite	hi
 800e5ea:	f04f 0c00 	movhi.w	ip, #0
 800e5ee:	f44f 5c80 	movls.w	ip, #4096	; 0x1000
  __HAL_SPI_DISABLE(hspi);
 800e5f2:	602a      	str	r2, [r5, #0]
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800e5f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800e5f8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 800e5fc:	d16c      	bne.n	800e6d8 <HAL_SPI_Init+0x22c>
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e5fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800e600:	f402 5000 	and.w	r0, r2, #8192	; 0x2000
 800e604:	6861      	ldr	r1, [r4, #4]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e606:	f403 6e70 	and.w	lr, r3, #3840	; 0xf00
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e60a:	6923      	ldr	r3, [r4, #16]
 800e60c:	f401 7282 	and.w	r2, r1, #260	; 0x104
 800e610:	68a1      	ldr	r1, [r4, #8]
 800e612:	f003 0302 	and.w	r3, r3, #2
 800e616:	69a6      	ldr	r6, [r4, #24]
 800e618:	f401 4104 	and.w	r1, r1, #33792	; 0x8400
 800e61c:	430a      	orrs	r2, r1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e61e:	6b61      	ldr	r1, [r4, #52]	; 0x34
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e620:	431a      	orrs	r2, r3
 800e622:	6963      	ldr	r3, [r4, #20]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e624:	f001 0108 	and.w	r1, r1, #8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e628:	f003 0301 	and.w	r3, r3, #1
 800e62c:	431a      	orrs	r2, r3
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e62e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e630:	f003 0310 	and.w	r3, r3, #16
 800e634:	430b      	orrs	r3, r1
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e636:	69e1      	ldr	r1, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e638:	ea43 030e 	orr.w	r3, r3, lr
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e63c:	f406 7e00 	and.w	lr, r6, #512	; 0x200
 800e640:	f001 0138 	and.w	r1, r1, #56	; 0x38
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e644:	0c36      	lsrs	r6, r6, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e646:	ea42 020e 	orr.w	r2, r2, lr
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e64a:	f006 0604 	and.w	r6, r6, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e64e:	430a      	orrs	r2, r1
 800e650:	6a21      	ldr	r1, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e652:	4333      	orrs	r3, r6
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e654:	f001 0180 	and.w	r1, r1, #128	; 0x80
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e658:	ea43 030c 	orr.w	r3, r3, ip
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e65c:	430a      	orrs	r2, r1
 800e65e:	4302      	orrs	r2, r0
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e660:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800e662:	602a      	str	r2, [r5, #0]
  hspi->State     = HAL_SPI_STATE_READY;
 800e664:	2201      	movs	r2, #1
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800e666:	606b      	str	r3, [r5, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800e668:	69eb      	ldr	r3, [r5, #28]
 800e66a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e66e:	61eb      	str	r3, [r5, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800e670:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800e672:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
}
 800e676:	bd70      	pop	{r4, r5, r6, pc}
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e678:	69e3      	ldr	r3, [r4, #28]
 800e67a:	f023 0318 	bic.w	r3, r3, #24
 800e67e:	2b20      	cmp	r3, #32
 800e680:	d001      	beq.n	800e686 <HAL_SPI_Init+0x1da>
 800e682:	2b00      	cmp	r3, #0
 800e684:	d15a      	bne.n	800e73c <HAL_SPI_Init+0x290>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800e686:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800e688:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800e68c:	e799      	b.n	800e5c2 <HAL_SPI_Init+0x116>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 800e68e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800e692:	4834      	ldr	r0, [pc, #208]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e694:	f7f6 f8cc 	bl	8004830 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800e698:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1ec      	bne.n	800e678 <HAL_SPI_Init+0x1cc>
 800e69e:	e77c      	b.n	800e59a <HAL_SPI_Init+0xee>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 800e6a0:	f240 1147 	movw	r1, #327	; 0x147
 800e6a4:	482f      	ldr	r0, [pc, #188]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6a6:	f7f6 f8c3 	bl	8004830 <assert_failed>
 800e6aa:	e72c      	b.n	800e506 <HAL_SPI_Init+0x5a>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 800e6ac:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800e6b0:	482c      	ldr	r0, [pc, #176]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6b2:	f7f6 f8bd 	bl	8004830 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800e6b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6b8:	f033 0308 	bics.w	r3, r3, #8
 800e6bc:	f43f af5a 	beq.w	800e574 <HAL_SPI_Init+0xc8>
 800e6c0:	f240 114b 	movw	r1, #331	; 0x14b
 800e6c4:	4827      	ldr	r0, [pc, #156]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6c6:	f7f6 f8b3 	bl	8004830 <assert_failed>
 800e6ca:	e753      	b.n	800e574 <HAL_SPI_Init+0xc8>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 800e6cc:	f44f 71a4 	mov.w	r1, #328	; 0x148
 800e6d0:	4824      	ldr	r0, [pc, #144]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6d2:	f7f6 f8ad 	bl	8004830 <assert_failed>
 800e6d6:	e71e      	b.n	800e516 <HAL_SPI_Init+0x6a>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e6d8:	2000      	movs	r0, #0
 800e6da:	62a0      	str	r0, [r4, #40]	; 0x28
 800e6dc:	e792      	b.n	800e604 <HAL_SPI_Init+0x158>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 800e6de:	f240 114d 	movw	r1, #333	; 0x14d
 800e6e2:	4820      	ldr	r0, [pc, #128]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6e4:	f7f6 f8a4 	bl	8004830 <assert_failed>
 800e6e8:	e751      	b.n	800e58e <HAL_SPI_Init+0xe2>
    HAL_SPI_MspInit(hspi);
 800e6ea:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800e6ec:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 800e6f0:	f7f7 fd44 	bl	800617c <HAL_SPI_MspInit>
 800e6f4:	e76e      	b.n	800e5d4 <HAL_SPI_Init+0x128>
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800e6f6:	f44f 71a3 	mov.w	r1, #326	; 0x146
 800e6fa:	481a      	ldr	r0, [pc, #104]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e6fc:	f7f6 f898 	bl	8004830 <assert_failed>
 800e700:	e6fb      	b.n	800e4fa <HAL_SPI_Init+0x4e>
    return HAL_ERROR;
 800e702:	2001      	movs	r0, #1
}
 800e704:	4770      	bx	lr
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e706:	69e3      	ldr	r3, [r4, #28]
 800e708:	f023 0318 	bic.w	r3, r3, #24
 800e70c:	2b20      	cmp	r3, #32
 800e70e:	f43f af58 	beq.w	800e5c2 <HAL_SPI_Init+0x116>
 800e712:	2b00      	cmp	r3, #0
 800e714:	f43f af55 	beq.w	800e5c2 <HAL_SPI_Init+0x116>
 800e718:	f44f 71ab 	mov.w	r1, #342	; 0x156
 800e71c:	4811      	ldr	r0, [pc, #68]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e71e:	f7f6 f887 	bl	8004830 <assert_failed>
 800e722:	e74e      	b.n	800e5c2 <HAL_SPI_Init+0x116>
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800e724:	f240 1151 	movw	r1, #337	; 0x151
 800e728:	480e      	ldr	r0, [pc, #56]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e72a:	f7f6 f881 	bl	8004830 <assert_failed>
 800e72e:	e739      	b.n	800e5a4 <HAL_SPI_Init+0xf8>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e730:	f44f 71a6 	mov.w	r1, #332	; 0x14c
 800e734:	480b      	ldr	r0, [pc, #44]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e736:	f7f6 f87b 	bl	8004830 <assert_failed>
 800e73a:	e723      	b.n	800e584 <HAL_SPI_Init+0xd8>
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800e73c:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800e740:	4808      	ldr	r0, [pc, #32]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e742:	f7f6 f875 	bl	8004830 <assert_failed>
 800e746:	e79e      	b.n	800e686 <HAL_SPI_Init+0x1da>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 800e748:	f240 1149 	movw	r1, #329	; 0x149
 800e74c:	4805      	ldr	r0, [pc, #20]	; (800e764 <HAL_SPI_Init+0x2b8>)
 800e74e:	f7f6 f86f 	bl	8004830 <assert_failed>
 800e752:	e702      	b.n	800e55a <HAL_SPI_Init+0xae>
 800e754:	40013000 	.word	0x40013000
 800e758:	40003c00 	.word	0x40003c00
 800e75c:	40003800 	.word	0x40003800
 800e760:	40015400 	.word	0x40015400
 800e764:	0802c5a0 	.word	0x0802c5a0

0800e768 <HAL_SPI_Transmit>:
{
 800e768:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e76c:	461d      	mov	r5, r3
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e76e:	6883      	ldr	r3, [r0, #8]
{
 800e770:	b082      	sub	sp, #8
 800e772:	4604      	mov	r4, r0
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e774:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
{
 800e778:	460f      	mov	r7, r1
 800e77a:	4690      	mov	r8, r2
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e77c:	d171      	bne.n	800e862 <HAL_SPI_Transmit+0xfa>
  __HAL_LOCK(hspi);
 800e77e:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e782:	2b01      	cmp	r3, #1
 800e784:	d076      	beq.n	800e874 <HAL_SPI_Transmit+0x10c>
 800e786:	2301      	movs	r3, #1
 800e788:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 800e78c:	f7f9 fa64 	bl	8007c58 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 800e790:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tickstart = HAL_GetTick();
 800e794:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800e796:	2b01      	cmp	r3, #1
 800e798:	b2d8      	uxtb	r0, r3
 800e79a:	d009      	beq.n	800e7b0 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 800e79c:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 800e79e:	2201      	movs	r2, #1
  __HAL_UNLOCK(hspi);
 800e7a0:	2300      	movs	r3, #0
  hspi->State = HAL_SPI_STATE_READY;
 800e7a2:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800e7a6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800e7aa:	b002      	add	sp, #8
 800e7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((pData == NULL) || (Size == 0U))
 800e7b0:	2f00      	cmp	r7, #0
 800e7b2:	d0f4      	beq.n	800e79e <HAL_SPI_Transmit+0x36>
 800e7b4:	fab8 f388 	clz	r3, r8
 800e7b8:	095b      	lsrs	r3, r3, #5
 800e7ba:	f1b8 0f00 	cmp.w	r8, #0
 800e7be:	d0ee      	beq.n	800e79e <HAL_SPI_Transmit+0x36>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7c0:	2203      	movs	r2, #3
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e7c2:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800e7c4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e7c8:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e7cc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 800e7ce:	f8a4 803e 	strh.w	r8, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 800e7d2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800e7d6:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800e7d8:	f8a4 803c 	strh.w	r8, [r4, #60]	; 0x3c
  hspi->RxISR       = NULL;
 800e7dc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7e0:	68a3      	ldr	r3, [r4, #8]
 800e7e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    __HAL_SPI_DISABLE(hspi);
 800e7e6:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e7e8:	d07a      	beq.n	800e8e0 <HAL_SPI_Transmit+0x178>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e7ea:	681a      	ldr	r2, [r3, #0]
 800e7ec:	0652      	lsls	r2, r2, #25
 800e7ee:	d403      	bmi.n	800e7f8 <HAL_SPI_Transmit+0x90>
    __HAL_SPI_ENABLE(hspi);
 800e7f0:	681a      	ldr	r2, [r3, #0]
 800e7f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e7f6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e7f8:	68e2      	ldr	r2, [r4, #12]
 800e7fa:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e7fe:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800e800:	d93c      	bls.n	800e87c <HAL_SPI_Transmit+0x114>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e802:	b112      	cbz	r2, 800e80a <HAL_SPI_Transmit+0xa2>
 800e804:	f1b8 0f01 	cmp.w	r8, #1
 800e808:	d107      	bne.n	800e81a <HAL_SPI_Transmit+0xb2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e80a:	f837 2b02 	ldrh.w	r2, [r7], #2
 800e80e:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800e810:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e812:	63a7      	str	r7, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800e814:	3a01      	subs	r2, #1
 800e816:	b292      	uxth	r2, r2
 800e818:	87e2      	strh	r2, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e81a:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e81c:	b292      	uxth	r2, r2
 800e81e:	b992      	cbnz	r2, 800e846 <HAL_SPI_Transmit+0xde>
 800e820:	e072      	b.n	800e908 <HAL_SPI_Transmit+0x1a0>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e822:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800e824:	f832 1b02 	ldrh.w	r1, [r2], #2
 800e828:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 800e82a:	f8b4 c03e 	ldrh.w	ip, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e82e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e830:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e834:	fa1f fc8c 	uxth.w	ip, ip
 800e838:	f8a4 c03e 	strh.w	ip, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e83c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e83e:	b29b      	uxth	r3, r3
 800e840:	2b00      	cmp	r3, #0
 800e842:	d061      	beq.n	800e908 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e844:	6823      	ldr	r3, [r4, #0]
 800e846:	689a      	ldr	r2, [r3, #8]
 800e848:	0797      	lsls	r7, r2, #30
 800e84a:	d4ea      	bmi.n	800e822 <HAL_SPI_Transmit+0xba>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e84c:	f7f9 fa04 	bl	8007c58 <HAL_GetTick>
 800e850:	1b80      	subs	r0, r0, r6
 800e852:	42a8      	cmp	r0, r5
 800e854:	d301      	bcc.n	800e85a <HAL_SPI_Transmit+0xf2>
 800e856:	1c68      	adds	r0, r5, #1
 800e858:	d101      	bne.n	800e85e <HAL_SPI_Transmit+0xf6>
 800e85a:	2d00      	cmp	r5, #0
 800e85c:	d1ee      	bne.n	800e83c <HAL_SPI_Transmit+0xd4>
          errorcode = HAL_TIMEOUT;
 800e85e:	2003      	movs	r0, #3
 800e860:	e79d      	b.n	800e79e <HAL_SPI_Transmit+0x36>
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));
 800e862:	f240 313d 	movw	r1, #829	; 0x33d
 800e866:	4838      	ldr	r0, [pc, #224]	; (800e948 <HAL_SPI_Transmit+0x1e0>)
 800e868:	f7f5 ffe2 	bl	8004830 <assert_failed>
  __HAL_LOCK(hspi);
 800e86c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 800e870:	2b01      	cmp	r3, #1
 800e872:	d188      	bne.n	800e786 <HAL_SPI_Transmit+0x1e>
 800e874:	2002      	movs	r0, #2
}
 800e876:	b002      	add	sp, #8
 800e878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e87c:	b112      	cbz	r2, 800e884 <HAL_SPI_Transmit+0x11c>
 800e87e:	f1b8 0f01 	cmp.w	r8, #1
 800e882:	d10b      	bne.n	800e89c <HAL_SPI_Transmit+0x134>
      if (hspi->TxXferCount > 1U)
 800e884:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800e886:	b292      	uxth	r2, r2
 800e888:	2a01      	cmp	r2, #1
 800e88a:	d953      	bls.n	800e934 <HAL_SPI_Transmit+0x1cc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e88c:	f837 2b02 	ldrh.w	r2, [r7], #2
 800e890:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount -= 2U;
 800e892:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e894:	63a7      	str	r7, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800e896:	3b02      	subs	r3, #2
 800e898:	b29b      	uxth	r3, r3
 800e89a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e89c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e89e:	b29b      	uxth	r3, r3
 800e8a0:	b983      	cbnz	r3, 800e8c4 <HAL_SPI_Transmit+0x15c>
 800e8a2:	e031      	b.n	800e908 <HAL_SPI_Transmit+0x1a0>
        if (hspi->TxXferCount > 1U)
 800e8a4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800e8a6:	b29b      	uxth	r3, r3
 800e8a8:	2b01      	cmp	r3, #1
 800e8aa:	d922      	bls.n	800e8f2 <HAL_SPI_Transmit+0x18a>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800e8ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800e8ae:	f831 3b02 	ldrh.w	r3, [r1], #2
 800e8b2:	60d3      	str	r3, [r2, #12]
          hspi->TxXferCount -= 2U;
 800e8b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800e8b6:	63a1      	str	r1, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800e8b8:	3b02      	subs	r3, #2
 800e8ba:	b29b      	uxth	r3, r3
 800e8bc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800e8be:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
 800e8c0:	b289      	uxth	r1, r1
 800e8c2:	b309      	cbz	r1, 800e908 <HAL_SPI_Transmit+0x1a0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e8c4:	6822      	ldr	r2, [r4, #0]
 800e8c6:	6893      	ldr	r3, [r2, #8]
 800e8c8:	0799      	lsls	r1, r3, #30
 800e8ca:	d4eb      	bmi.n	800e8a4 <HAL_SPI_Transmit+0x13c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e8cc:	f7f9 f9c4 	bl	8007c58 <HAL_GetTick>
 800e8d0:	1b80      	subs	r0, r0, r6
 800e8d2:	42a8      	cmp	r0, r5
 800e8d4:	d301      	bcc.n	800e8da <HAL_SPI_Transmit+0x172>
 800e8d6:	1c6b      	adds	r3, r5, #1
 800e8d8:	d1c1      	bne.n	800e85e <HAL_SPI_Transmit+0xf6>
 800e8da:	2d00      	cmp	r5, #0
 800e8dc:	d1ef      	bne.n	800e8be <HAL_SPI_Transmit+0x156>
 800e8de:	e7be      	b.n	800e85e <HAL_SPI_Transmit+0xf6>
    __HAL_SPI_DISABLE(hspi);
 800e8e0:	681a      	ldr	r2, [r3, #0]
 800e8e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e8e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e8e8:	681a      	ldr	r2, [r3, #0]
 800e8ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e8ee:	601a      	str	r2, [r3, #0]
 800e8f0:	e77b      	b.n	800e7ea <HAL_SPI_Transmit+0x82>
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e8f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8f4:	781b      	ldrb	r3, [r3, #0]
 800e8f6:	7313      	strb	r3, [r2, #12]
          hspi->TxXferCount--;
 800e8f8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
          hspi->pTxBuffPtr++;
 800e8fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800e8fc:	3b01      	subs	r3, #1
          hspi->pTxBuffPtr++;
 800e8fe:	3201      	adds	r2, #1
          hspi->TxXferCount--;
 800e900:	b29b      	uxth	r3, r3
          hspi->pTxBuffPtr++;
 800e902:	63a2      	str	r2, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 800e904:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e906:	e7da      	b.n	800e8be <HAL_SPI_Transmit+0x156>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e908:	4632      	mov	r2, r6
 800e90a:	4629      	mov	r1, r5
 800e90c:	4620      	mov	r0, r4
 800e90e:	f7ff fd89 	bl	800e424 <SPI_EndRxTxTransaction>
 800e912:	b108      	cbz	r0, 800e918 <HAL_SPI_Transmit+0x1b0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e914:	2320      	movs	r3, #32
 800e916:	6623      	str	r3, [r4, #96]	; 0x60
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e918:	68a3      	ldr	r3, [r4, #8]
 800e91a:	b933      	cbnz	r3, 800e92a <HAL_SPI_Transmit+0x1c2>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e91c:	6822      	ldr	r2, [r4, #0]
 800e91e:	9301      	str	r3, [sp, #4]
 800e920:	68d3      	ldr	r3, [r2, #12]
 800e922:	9301      	str	r3, [sp, #4]
 800e924:	6893      	ldr	r3, [r2, #8]
 800e926:	9301      	str	r3, [sp, #4]
 800e928:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e92a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 800e92c:	3800      	subs	r0, #0
 800e92e:	bf18      	it	ne
 800e930:	2001      	movne	r0, #1
error:
 800e932:	e734      	b.n	800e79e <HAL_SPI_Transmit+0x36>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800e934:	783a      	ldrb	r2, [r7, #0]
 800e936:	731a      	strb	r2, [r3, #12]
        hspi->TxXferCount--;
 800e938:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr ++;
 800e93a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e93c:	3b01      	subs	r3, #1
        hspi->pTxBuffPtr ++;
 800e93e:	3201      	adds	r2, #1
        hspi->TxXferCount--;
 800e940:	b29b      	uxth	r3, r3
        hspi->pTxBuffPtr ++;
 800e942:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800e944:	87e3      	strh	r3, [r4, #62]	; 0x3e
 800e946:	e7a9      	b.n	800e89c <HAL_SPI_Transmit+0x134>
 800e948:	0802c5a0 	.word	0x0802c5a0

0800e94c <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e94c:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e94e:	4a12      	ldr	r2, [pc, #72]	; (800e998 <TIM_OC5_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
{
 800e954:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800e956:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e958:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800e95a:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800e95c:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800e95e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800e962:	402a      	ands	r2, r5
  tmpccmrx |= OC_Config->OCMode;
 800e964:	680d      	ldr	r5, [r1, #0]
 800e966:	432a      	orrs	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800e968:	688d      	ldr	r5, [r1, #8]
 800e96a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e96e:	4d0b      	ldr	r5, [pc, #44]	; (800e99c <TIM_OC5_SetConfig+0x50>)
 800e970:	42a8      	cmp	r0, r5
 800e972:	d00a      	beq.n	800e98a <TIM_OC5_SetConfig+0x3e>
 800e974:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e978:	42a8      	cmp	r0, r5
 800e97a:	d006      	beq.n	800e98a <TIM_OC5_SetConfig+0x3e>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800e97c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800e97e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800e980:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 800e982:	6581      	str	r1, [r0, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e984:	6203      	str	r3, [r0, #32]
}
 800e986:	bc30      	pop	{r4, r5}
 800e988:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS5;
 800e98a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800e98e:	694d      	ldr	r5, [r1, #20]
 800e990:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 800e994:	e7f2      	b.n	800e97c <TIM_OC5_SetConfig+0x30>
 800e996:	bf00      	nop
 800e998:	fffeff8f 	.word	0xfffeff8f
 800e99c:	40010000 	.word	0x40010000

0800e9a0 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9a0:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e9a2:	4a12      	ldr	r2, [pc, #72]	; (800e9ec <TIM_OC6_SetConfig+0x4c>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9a4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
{
 800e9a8:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800e9aa:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800e9ac:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800e9ae:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR3;
 800e9b0:	6d45      	ldr	r5, [r0, #84]	; 0x54
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800e9b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800e9b6:	402a      	ands	r2, r5
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800e9b8:	680d      	ldr	r5, [r1, #0]
 800e9ba:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800e9be:	688d      	ldr	r5, [r1, #8]
 800e9c0:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800e9c4:	4d0a      	ldr	r5, [pc, #40]	; (800e9f0 <TIM_OC6_SetConfig+0x50>)
 800e9c6:	42a8      	cmp	r0, r5
 800e9c8:	d00a      	beq.n	800e9e0 <TIM_OC6_SetConfig+0x40>
 800e9ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800e9ce:	42a8      	cmp	r0, r5
 800e9d0:	d006      	beq.n	800e9e0 <TIM_OC6_SetConfig+0x40>

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800e9d2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800e9d4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR3 = tmpccmrx;
 800e9d6:	6542      	str	r2, [r0, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 800e9d8:	65c1      	str	r1, [r0, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800e9da:	6203      	str	r3, [r0, #32]
}
 800e9dc:	bc30      	pop	{r4, r5}
 800e9de:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_OIS6;
 800e9e0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800e9e4:	694d      	ldr	r5, [r1, #20]
 800e9e6:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 800e9ea:	e7f2      	b.n	800e9d2 <TIM_OC6_SetConfig+0x32>
 800e9ec:	feff8fff 	.word	0xfeff8fff
 800e9f0:	40010000 	.word	0x40010000

0800e9f4 <TIM_OC1_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9f4:	6a03      	ldr	r3, [r0, #32]
 800e9f6:	f023 0301 	bic.w	r3, r3, #1
{
 800e9fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e9fe:	6203      	str	r3, [r0, #32]
{
 800ea00:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800ea02:	6a05      	ldr	r5, [r0, #32]
{
 800ea04:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800ea06:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea0a:	4b27      	ldr	r3, [pc, #156]	; (800eaa8 <TIM_OC1_SetConfig+0xb4>)
  tmpccer &= ~TIM_CCER_CC1P;
 800ea0c:	f025 0502 	bic.w	r5, r5, #2
  tmpccmrx = TIMx->CCMR1;
 800ea10:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= OC_Config->OCMode;
 800ea12:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea14:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ea16:	431f      	orrs	r7, r3
  tmpccer |= OC_Config->OCPolarity;
 800ea18:	688b      	ldr	r3, [r1, #8]
 800ea1a:	431d      	orrs	r5, r3
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea1c:	4b23      	ldr	r3, [pc, #140]	; (800eaac <TIM_OC1_SetConfig+0xb8>)
 800ea1e:	4298      	cmp	r0, r3
 800ea20:	d00b      	beq.n	800ea3a <TIM_OC1_SetConfig+0x46>
 800ea22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ea26:	4298      	cmp	r0, r3
 800ea28:	d007      	beq.n	800ea3a <TIM_OC1_SetConfig+0x46>
  TIMx->CCR1 = OC_Config->Pulse;
 800ea2a:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800ea2c:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 800ea30:	61a7      	str	r7, [r4, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800ea32:	6362      	str	r2, [r4, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800ea34:	6225      	str	r5, [r4, #32]
}
 800ea36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ea3a:	68f3      	ldr	r3, [r6, #12]
 800ea3c:	f033 0208 	bics.w	r2, r3, #8
 800ea40:	d120      	bne.n	800ea84 <TIM_OC1_SetConfig+0x90>
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea42:	f025 0508 	bic.w	r5, r5, #8
    tmpccer |= OC_Config->OCNPolarity;
 800ea46:	431d      	orrs	r5, r3
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ea48:	69b3      	ldr	r3, [r6, #24]
 800ea4a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea4e:	f025 0504 	bic.w	r5, r5, #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ea52:	d11e      	bne.n	800ea92 <TIM_OC1_SetConfig+0x9e>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ea54:	6973      	ldr	r3, [r6, #20]
 800ea56:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800ea5a:	d106      	bne.n	800ea6a <TIM_OC1_SetConfig+0x76>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea5c:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ea60:	69b1      	ldr	r1, [r6, #24]
 800ea62:	430a      	orrs	r2, r1
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea64:	ea42 0803 	orr.w	r8, r2, r3
 800ea68:	e7df      	b.n	800ea2a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ea6a:	f641 316d 	movw	r1, #7021	; 0x1b6d
 800ea6e:	4810      	ldr	r0, [pc, #64]	; (800eab0 <TIM_OC1_SetConfig+0xbc>)
 800ea70:	f7f5 fede 	bl	8004830 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ea74:	f428 7240 	bic.w	r2, r8, #768	; 0x300
 800ea78:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= OC_Config->OCIdleState;
 800ea7a:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= OC_Config->OCNIdleState;
 800ea7c:	430a      	orrs	r2, r1
 800ea7e:	ea42 0803 	orr.w	r8, r2, r3
 800ea82:	e7d2      	b.n	800ea2a <TIM_OC1_SetConfig+0x36>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800ea84:	f641 315f 	movw	r1, #7007	; 0x1b5f
 800ea88:	4809      	ldr	r0, [pc, #36]	; (800eab0 <TIM_OC1_SetConfig+0xbc>)
 800ea8a:	f7f5 fed1 	bl	8004830 <assert_failed>
    tmpccer |= OC_Config->OCNPolarity;
 800ea8e:	68f3      	ldr	r3, [r6, #12]
 800ea90:	e7d7      	b.n	800ea42 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800ea92:	f641 316c 	movw	r1, #7020	; 0x1b6c
 800ea96:	4806      	ldr	r0, [pc, #24]	; (800eab0 <TIM_OC1_SetConfig+0xbc>)
 800ea98:	f7f5 feca 	bl	8004830 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ea9c:	6973      	ldr	r3, [r6, #20]
 800ea9e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800eaa2:	d0db      	beq.n	800ea5c <TIM_OC1_SetConfig+0x68>
 800eaa4:	e7e1      	b.n	800ea6a <TIM_OC1_SetConfig+0x76>
 800eaa6:	bf00      	nop
 800eaa8:	fffeff8c 	.word	0xfffeff8c
 800eaac:	40010000 	.word	0x40010000
 800eab0:	0802c5d8 	.word	0x0802c5d8

0800eab4 <TIM_OC3_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eab4:	6a03      	ldr	r3, [r0, #32]
 800eab6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
{
 800eaba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800eabe:	6203      	str	r3, [r0, #32]
{
 800eac0:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 800eac2:	6a05      	ldr	r5, [r0, #32]
{
 800eac4:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 800eac6:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800eaca:	4b29      	ldr	r3, [pc, #164]	; (800eb70 <TIM_OC3_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC3P;
 800eacc:	f425 7500 	bic.w	r5, r5, #512	; 0x200
  tmpccmrx = TIMx->CCMR2;
 800ead0:	69c2      	ldr	r2, [r0, #28]
  tmpccmrx |= OC_Config->OCMode;
 800ead2:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ead4:	4013      	ands	r3, r2
  tmpccmrx |= OC_Config->OCMode;
 800ead6:	431f      	orrs	r7, r3
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ead8:	688b      	ldr	r3, [r1, #8]
 800eada:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800eade:	4b25      	ldr	r3, [pc, #148]	; (800eb74 <TIM_OC3_SetConfig+0xc0>)
 800eae0:	4298      	cmp	r0, r3
 800eae2:	d00b      	beq.n	800eafc <TIM_OC3_SetConfig+0x48>
 800eae4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800eae8:	4298      	cmp	r0, r3
 800eaea:	d007      	beq.n	800eafc <TIM_OC3_SetConfig+0x48>
  TIMx->CCR3 = OC_Config->Pulse;
 800eaec:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 800eaee:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800eaf2:	61e7      	str	r7, [r4, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800eaf4:	63e2      	str	r2, [r4, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800eaf6:	6225      	str	r5, [r4, #32]
}
 800eaf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800eafc:	68f3      	ldr	r3, [r6, #12]
 800eafe:	f033 0208 	bics.w	r2, r3, #8
 800eb02:	d123      	bne.n	800eb4c <TIM_OC3_SetConfig+0x98>
    tmpccer &= ~TIM_CCER_CC3NP;
 800eb04:	f425 6500 	bic.w	r5, r5, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb08:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800eb0c:	69b3      	ldr	r3, [r6, #24]
 800eb0e:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC3NE;
 800eb12:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800eb16:	d120      	bne.n	800eb5a <TIM_OC3_SetConfig+0xa6>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800eb18:	6973      	ldr	r3, [r6, #20]
 800eb1a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800eb1e:	d107      	bne.n	800eb30 <TIM_OC3_SetConfig+0x7c>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb20:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb24:	69b1      	ldr	r1, [r6, #24]
 800eb26:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800eb2a:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800eb2e:	e7dd      	b.n	800eaec <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800eb30:	f641 4103 	movw	r1, #7171	; 0x1c03
 800eb34:	4810      	ldr	r0, [pc, #64]	; (800eb78 <TIM_OC3_SetConfig+0xc4>)
 800eb36:	f7f5 fe7b 	bl	8004830 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800eb3a:	f428 5240 	bic.w	r2, r8, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb3e:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800eb40:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eb42:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 800eb46:	ea42 1803 	orr.w	r8, r2, r3, lsl #4
 800eb4a:	e7cf      	b.n	800eaec <TIM_OC3_SetConfig+0x38>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 800eb4c:	f641 31f5 	movw	r1, #7157	; 0x1bf5
 800eb50:	4809      	ldr	r0, [pc, #36]	; (800eb78 <TIM_OC3_SetConfig+0xc4>)
 800eb52:	f7f5 fe6d 	bl	8004830 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800eb56:	68f3      	ldr	r3, [r6, #12]
 800eb58:	e7d4      	b.n	800eb04 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 800eb5a:	f641 4102 	movw	r1, #7170	; 0x1c02
 800eb5e:	4806      	ldr	r0, [pc, #24]	; (800eb78 <TIM_OC3_SetConfig+0xc4>)
 800eb60:	f7f5 fe66 	bl	8004830 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800eb64:	6973      	ldr	r3, [r6, #20]
 800eb66:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800eb6a:	d0d9      	beq.n	800eb20 <TIM_OC3_SetConfig+0x6c>
 800eb6c:	e7e0      	b.n	800eb30 <TIM_OC3_SetConfig+0x7c>
 800eb6e:	bf00      	nop
 800eb70:	fffeff8c 	.word	0xfffeff8c
 800eb74:	40010000 	.word	0x40010000
 800eb78:	0802c5d8 	.word	0x0802c5d8

0800eb7c <TIM_OC4_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb7c:	6a03      	ldr	r3, [r0, #32]
 800eb7e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
{
 800eb82:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800eb84:	6203      	str	r3, [r0, #32]
{
 800eb86:	460d      	mov	r5, r1
  tmpccer = TIMx->CCER;
 800eb88:	6a06      	ldr	r6, [r0, #32]
{
 800eb8a:	b083      	sub	sp, #12
  tmpcr2 =  TIMx->CR2;
 800eb8c:	6842      	ldr	r2, [r0, #4]
{
 800eb8e:	4604      	mov	r4, r0
  tmpccmrx = TIMx->CCMR2;
 800eb90:	69c1      	ldr	r1, [r0, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800eb92:	f426 5600 	bic.w	r6, r6, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb96:	4b16      	ldr	r3, [pc, #88]	; (800ebf0 <TIM_OC4_SetConfig+0x74>)
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb98:	682f      	ldr	r7, [r5, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800eb9a:	400b      	ands	r3, r1
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb9c:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800eba0:	68ab      	ldr	r3, [r5, #8]
 800eba2:	ea46 3603 	orr.w	r6, r6, r3, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eba6:	4b13      	ldr	r3, [pc, #76]	; (800ebf4 <TIM_OC4_SetConfig+0x78>)
 800eba8:	4298      	cmp	r0, r3
 800ebaa:	d00a      	beq.n	800ebc2 <TIM_OC4_SetConfig+0x46>
 800ebac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ebb0:	4298      	cmp	r0, r3
 800ebb2:	d006      	beq.n	800ebc2 <TIM_OC4_SetConfig+0x46>
  TIMx->CCR4 = OC_Config->Pulse;
 800ebb4:	686b      	ldr	r3, [r5, #4]
  TIMx->CR2 = tmpcr2;
 800ebb6:	6062      	str	r2, [r4, #4]
  TIMx->CCMR2 = tmpccmrx;
 800ebb8:	61e7      	str	r7, [r4, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800ebba:	6423      	str	r3, [r4, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800ebbc:	6226      	str	r6, [r4, #32]
}
 800ebbe:	b003      	add	sp, #12
 800ebc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ebc2:	696b      	ldr	r3, [r5, #20]
 800ebc4:	f433 7180 	bics.w	r1, r3, #256	; 0x100
 800ebc8:	d104      	bne.n	800ebd4 <TIM_OC4_SetConfig+0x58>
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebce:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800ebd2:	e7ef      	b.n	800ebb4 <TIM_OC4_SetConfig+0x38>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 800ebd4:	f641 4141 	movw	r1, #7233	; 0x1c41
 800ebd8:	4807      	ldr	r0, [pc, #28]	; (800ebf8 <TIM_OC4_SetConfig+0x7c>)
 800ebda:	9201      	str	r2, [sp, #4]
 800ebdc:	f7f5 fe28 	bl	8004830 <assert_failed>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebe0:	9a01      	ldr	r2, [sp, #4]
 800ebe2:	696b      	ldr	r3, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ebe4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ebe8:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800ebec:	e7e2      	b.n	800ebb4 <TIM_OC4_SetConfig+0x38>
 800ebee:	bf00      	nop
 800ebf0:	feff8cff 	.word	0xfeff8cff
 800ebf4:	40010000 	.word	0x40010000
 800ebf8:	0802c5d8 	.word	0x0802c5d8

0800ebfc <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ebfc:	6803      	ldr	r3, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ebfe:	684a      	ldr	r2, [r1, #4]
{
 800ec00:	b570      	push	{r4, r5, r6, lr}
 800ec02:	460c      	mov	r4, r1
  tmpsmcr = htim->Instance->SMCR;
 800ec04:	6899      	ldr	r1, [r3, #8]
{
 800ec06:	4605      	mov	r5, r0

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800ec08:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_TS;
 800ec0a:	f021 0c70 	bic.w	ip, r1, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ec0e:	4980      	ldr	r1, [pc, #512]	; (800ee10 <TIM_SlaveTimer_SetConfig+0x214>)
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ec10:	6820      	ldr	r0, [r4, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800ec12:	ea42 0c0c 	orr.w	ip, r2, ip
  tmpsmcr &= ~TIM_SMCR_SMS;
 800ec16:	ea0c 0101 	and.w	r1, ip, r1
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800ec1a:	ea41 0100 	orr.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800ec1e:	6099      	str	r1, [r3, #8]
  switch (sSlaveConfig->InputTrigger)
 800ec20:	f000 8104 	beq.w	800ee2c <TIM_SlaveTimer_SetConfig+0x230>
 800ec24:	d953      	bls.n	800ecce <TIM_SlaveTimer_SetConfig+0xd2>
 800ec26:	2a60      	cmp	r2, #96	; 0x60
 800ec28:	f000 816b 	beq.w	800ef02 <TIM_SlaveTimer_SetConfig+0x306>
 800ec2c:	2a70      	cmp	r2, #112	; 0x70
 800ec2e:	d151      	bne.n	800ecd4 <TIM_SlaveTimer_SetConfig+0xd8>
  {
    case TIM_TS_ETRF:
    {
      /* Check the parameters */
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800ec30:	4a78      	ldr	r2, [pc, #480]	; (800ee14 <TIM_SlaveTimer_SetConfig+0x218>)
 800ec32:	4979      	ldr	r1, [pc, #484]	; (800ee18 <TIM_SlaveTimer_SetConfig+0x21c>)
 800ec34:	4293      	cmp	r3, r2
 800ec36:	bf18      	it	ne
 800ec38:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ec3c:	bf14      	ite	ne
 800ec3e:	2201      	movne	r2, #1
 800ec40:	2200      	moveq	r2, #0
 800ec42:	428b      	cmp	r3, r1
 800ec44:	bf0c      	ite	eq
 800ec46:	2200      	moveq	r2, #0
 800ec48:	f002 0201 	andne.w	r2, r2, #1
 800ec4c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec50:	428b      	cmp	r3, r1
 800ec52:	bf0c      	ite	eq
 800ec54:	2200      	moveq	r2, #0
 800ec56:	f002 0201 	andne.w	r2, r2, #1
 800ec5a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ec5e:	428b      	cmp	r3, r1
 800ec60:	bf0c      	ite	eq
 800ec62:	2200      	moveq	r2, #0
 800ec64:	f002 0201 	andne.w	r2, r2, #1
 800ec68:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ec6c:	428b      	cmp	r3, r1
 800ec6e:	bf0c      	ite	eq
 800ec70:	2200      	moveq	r2, #0
 800ec72:	f002 0201 	andne.w	r2, r2, #1
 800ec76:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ec7a:	428b      	cmp	r3, r1
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2200      	moveq	r2, #0
 800ec80:	f002 0201 	andne.w	r2, r2, #1
 800ec84:	b11a      	cbz	r2, 800ec8e <TIM_SlaveTimer_SetConfig+0x92>
 800ec86:	4a65      	ldr	r2, [pc, #404]	; (800ee1c <TIM_SlaveTimer_SetConfig+0x220>)
 800ec88:	4293      	cmp	r3, r2
 800ec8a:	f040 81bb 	bne.w	800f004 <TIM_SlaveTimer_SetConfig+0x408>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800ec8e:	68e3      	ldr	r3, [r4, #12]
 800ec90:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800ec94:	f040 819e 	bne.w	800efd4 <TIM_SlaveTimer_SetConfig+0x3d8>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ec98:	68a3      	ldr	r3, [r4, #8]
 800ec9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec9e:	bf18      	it	ne
 800eca0:	2b0a      	cmpne	r3, #10
 800eca2:	d003      	beq.n	800ecac <TIM_SlaveTimer_SetConfig+0xb0>
 800eca4:	f033 0302 	bics.w	r3, r3, #2
 800eca8:	f040 81a6 	bne.w	800eff8 <TIM_SlaveTimer_SetConfig+0x3fc>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ecac:	6921      	ldr	r1, [r4, #16]
 800ecae:	290f      	cmp	r1, #15
 800ecb0:	f200 8175 	bhi.w	800ef9e <TIM_SlaveTimer_SetConfig+0x3a2>
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800ecb4:	682d      	ldr	r5, [r5, #0]
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ecb6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
 800ecba:	68aa      	ldr	r2, [r5, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecbc:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800ecbe:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ecc0:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800ecc4:	4313      	orrs	r3, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ecc6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ecca:	60ab      	str	r3, [r5, #8]
}
 800eccc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ecce:	2a40      	cmp	r2, #64	; 0x40
 800ecd0:	d03a      	beq.n	800ed48 <TIM_SlaveTimer_SetConfig+0x14c>
 800ecd2:	d901      	bls.n	800ecd8 <TIM_SlaveTimer_SetConfig+0xdc>
        return HAL_ERROR;
 800ecd4:	2001      	movs	r0, #1
}
 800ecd6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ecd8:	2a20      	cmp	r2, #32
 800ecda:	d002      	beq.n	800ece2 <TIM_SlaveTimer_SetConfig+0xe6>
 800ecdc:	d930      	bls.n	800ed40 <TIM_SlaveTimer_SetConfig+0x144>
 800ecde:	2a30      	cmp	r2, #48	; 0x30
 800ece0:	d1f8      	bne.n	800ecd4 <TIM_SlaveTimer_SetConfig+0xd8>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ece2:	4a4c      	ldr	r2, [pc, #304]	; (800ee14 <TIM_SlaveTimer_SetConfig+0x218>)
 800ece4:	484c      	ldr	r0, [pc, #304]	; (800ee18 <TIM_SlaveTimer_SetConfig+0x21c>)
 800ece6:	4293      	cmp	r3, r2
 800ece8:	bf18      	it	ne
 800ecea:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ecee:	494c      	ldr	r1, [pc, #304]	; (800ee20 <TIM_SlaveTimer_SetConfig+0x224>)
 800ecf0:	4c4c      	ldr	r4, [pc, #304]	; (800ee24 <TIM_SlaveTimer_SetConfig+0x228>)
 800ecf2:	bf14      	ite	ne
 800ecf4:	2201      	movne	r2, #1
 800ecf6:	2200      	moveq	r2, #0
 800ecf8:	4283      	cmp	r3, r0
 800ecfa:	bf0c      	ite	eq
 800ecfc:	2200      	moveq	r2, #0
 800ecfe:	f002 0201 	andne.w	r2, r2, #1
 800ed02:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 800ed06:	428b      	cmp	r3, r1
 800ed08:	bf0c      	ite	eq
 800ed0a:	2200      	moveq	r2, #0
 800ed0c:	f002 0201 	andne.w	r2, r2, #1
 800ed10:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800ed14:	42a3      	cmp	r3, r4
 800ed16:	bf0c      	ite	eq
 800ed18:	2200      	moveq	r2, #0
 800ed1a:	f002 0201 	andne.w	r2, r2, #1
 800ed1e:	4283      	cmp	r3, r0
 800ed20:	bf0c      	ite	eq
 800ed22:	2200      	moveq	r2, #0
 800ed24:	f002 0201 	andne.w	r2, r2, #1
 800ed28:	428b      	cmp	r3, r1
 800ed2a:	bf0c      	ite	eq
 800ed2c:	2200      	moveq	r2, #0
 800ed2e:	f002 0201 	andne.w	r2, r2, #1
 800ed32:	b11a      	cbz	r2, 800ed3c <TIM_SlaveTimer_SetConfig+0x140>
 800ed34:	4a39      	ldr	r2, [pc, #228]	; (800ee1c <TIM_SlaveTimer_SetConfig+0x220>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	f040 816a 	bne.w	800f010 <TIM_SlaveTimer_SetConfig+0x414>
  HAL_StatusTypeDef status = HAL_OK;
 800ed3c:	2000      	movs	r0, #0
}
 800ed3e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sSlaveConfig->InputTrigger)
 800ed40:	f032 0210 	bics.w	r2, r2, #16
 800ed44:	d1c6      	bne.n	800ecd4 <TIM_SlaveTimer_SetConfig+0xd8>
 800ed46:	e7cc      	b.n	800ece2 <TIM_SlaveTimer_SetConfig+0xe6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ed48:	4a32      	ldr	r2, [pc, #200]	; (800ee14 <TIM_SlaveTimer_SetConfig+0x218>)
 800ed4a:	4933      	ldr	r1, [pc, #204]	; (800ee18 <TIM_SlaveTimer_SetConfig+0x21c>)
 800ed4c:	4293      	cmp	r3, r2
 800ed4e:	bf18      	it	ne
 800ed50:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ed54:	bf14      	ite	ne
 800ed56:	2201      	movne	r2, #1
 800ed58:	2200      	moveq	r2, #0
 800ed5a:	428b      	cmp	r3, r1
 800ed5c:	bf0c      	ite	eq
 800ed5e:	2200      	moveq	r2, #0
 800ed60:	f002 0201 	andne.w	r2, r2, #1
 800ed64:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	bf0c      	ite	eq
 800ed6c:	2200      	moveq	r2, #0
 800ed6e:	f002 0201 	andne.w	r2, r2, #1
 800ed72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ed76:	428b      	cmp	r3, r1
 800ed78:	bf0c      	ite	eq
 800ed7a:	2200      	moveq	r2, #0
 800ed7c:	f002 0201 	andne.w	r2, r2, #1
 800ed80:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf0c      	ite	eq
 800ed88:	2200      	moveq	r2, #0
 800ed8a:	f002 0201 	andne.w	r2, r2, #1
 800ed8e:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ed92:	428b      	cmp	r3, r1
 800ed94:	bf0c      	ite	eq
 800ed96:	2200      	moveq	r2, #0
 800ed98:	f002 0201 	andne.w	r2, r2, #1
 800ed9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eda0:	428b      	cmp	r3, r1
 800eda2:	bf0c      	ite	eq
 800eda4:	2200      	moveq	r2, #0
 800eda6:	f002 0201 	andne.w	r2, r2, #1
 800edaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800edae:	428b      	cmp	r3, r1
 800edb0:	bf0c      	ite	eq
 800edb2:	2200      	moveq	r2, #0
 800edb4:	f002 0201 	andne.w	r2, r2, #1
 800edb8:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800edbc:	428b      	cmp	r3, r1
 800edbe:	bf0c      	ite	eq
 800edc0:	2200      	moveq	r2, #0
 800edc2:	f002 0201 	andne.w	r2, r2, #1
 800edc6:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800edca:	428b      	cmp	r3, r1
 800edcc:	bf0c      	ite	eq
 800edce:	2200      	moveq	r2, #0
 800edd0:	f002 0201 	andne.w	r2, r2, #1
 800edd4:	b11a      	cbz	r2, 800edde <TIM_SlaveTimer_SetConfig+0x1e2>
 800edd6:	4a14      	ldr	r2, [pc, #80]	; (800ee28 <TIM_SlaveTimer_SetConfig+0x22c>)
 800edd8:	4293      	cmp	r3, r2
 800edda:	f040 8126 	bne.w	800f02a <TIM_SlaveTimer_SetConfig+0x42e>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800edde:	6923      	ldr	r3, [r4, #16]
 800ede0:	2b0f      	cmp	r3, #15
 800ede2:	f200 80ea 	bhi.w	800efba <TIM_SlaveTimer_SetConfig+0x3be>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800ede6:	6823      	ldr	r3, [r4, #0]
 800ede8:	2b05      	cmp	r3, #5
 800edea:	f43f af73 	beq.w	800ecd4 <TIM_SlaveTimer_SetConfig+0xd8>
      tmpccer = htim->Instance->CCER;
 800edee:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edf0:	2000      	movs	r0, #0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800edf2:	6925      	ldr	r5, [r4, #16]
      tmpccer = htim->Instance->CCER;
 800edf4:	6a1c      	ldr	r4, [r3, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800edf6:	6a19      	ldr	r1, [r3, #32]
 800edf8:	f021 0101 	bic.w	r1, r1, #1
 800edfc:	6219      	str	r1, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800edfe:	699a      	ldr	r2, [r3, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ee00:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800ee04:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 800ee08:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800ee0a:	621c      	str	r4, [r3, #32]
}
 800ee0c:	bd70      	pop	{r4, r5, r6, pc}
 800ee0e:	bf00      	nop
 800ee10:	fffefff8 	.word	0xfffefff8
 800ee14:	40010000 	.word	0x40010000
 800ee18:	40000400 	.word	0x40000400
 800ee1c:	40001800 	.word	0x40001800
 800ee20:	40000800 	.word	0x40000800
 800ee24:	40000c00 	.word	0x40000c00
 800ee28:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800ee2c:	4a85      	ldr	r2, [pc, #532]	; (800f044 <TIM_SlaveTimer_SetConfig+0x448>)
 800ee2e:	4986      	ldr	r1, [pc, #536]	; (800f048 <TIM_SlaveTimer_SetConfig+0x44c>)
 800ee30:	4293      	cmp	r3, r2
 800ee32:	bf18      	it	ne
 800ee34:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ee38:	bf14      	ite	ne
 800ee3a:	2201      	movne	r2, #1
 800ee3c:	2200      	moveq	r2, #0
 800ee3e:	428b      	cmp	r3, r1
 800ee40:	bf0c      	ite	eq
 800ee42:	2200      	moveq	r2, #0
 800ee44:	f002 0201 	andne.w	r2, r2, #1
 800ee48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee4c:	428b      	cmp	r3, r1
 800ee4e:	bf0c      	ite	eq
 800ee50:	2200      	moveq	r2, #0
 800ee52:	f002 0201 	andne.w	r2, r2, #1
 800ee56:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee5a:	428b      	cmp	r3, r1
 800ee5c:	bf0c      	ite	eq
 800ee5e:	2200      	moveq	r2, #0
 800ee60:	f002 0201 	andne.w	r2, r2, #1
 800ee64:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ee68:	428b      	cmp	r3, r1
 800ee6a:	bf0c      	ite	eq
 800ee6c:	2200      	moveq	r2, #0
 800ee6e:	f002 0201 	andne.w	r2, r2, #1
 800ee72:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ee76:	428b      	cmp	r3, r1
 800ee78:	bf0c      	ite	eq
 800ee7a:	2200      	moveq	r2, #0
 800ee7c:	f002 0201 	andne.w	r2, r2, #1
 800ee80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee84:	428b      	cmp	r3, r1
 800ee86:	bf0c      	ite	eq
 800ee88:	2200      	moveq	r2, #0
 800ee8a:	f002 0201 	andne.w	r2, r2, #1
 800ee8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ee92:	428b      	cmp	r3, r1
 800ee94:	bf0c      	ite	eq
 800ee96:	2200      	moveq	r2, #0
 800ee98:	f002 0201 	andne.w	r2, r2, #1
 800ee9c:	f5a1 3198 	sub.w	r1, r1, #77824	; 0x13000
 800eea0:	428b      	cmp	r3, r1
 800eea2:	bf0c      	ite	eq
 800eea4:	2200      	moveq	r2, #0
 800eea6:	f002 0201 	andne.w	r2, r2, #1
 800eeaa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800eeae:	428b      	cmp	r3, r1
 800eeb0:	bf0c      	ite	eq
 800eeb2:	2200      	moveq	r2, #0
 800eeb4:	f002 0201 	andne.w	r2, r2, #1
 800eeb8:	b11a      	cbz	r2, 800eec2 <TIM_SlaveTimer_SetConfig+0x2c6>
 800eeba:	4a64      	ldr	r2, [pc, #400]	; (800f04c <TIM_SlaveTimer_SetConfig+0x450>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	f040 80ba 	bne.w	800f036 <TIM_SlaveTimer_SetConfig+0x43a>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800eec2:	68a3      	ldr	r3, [r4, #8]
 800eec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800eec8:	bf18      	it	ne
 800eeca:	2b0a      	cmpne	r3, #10
 800eecc:	d003      	beq.n	800eed6 <TIM_SlaveTimer_SetConfig+0x2da>
 800eece:	f033 0302 	bics.w	r3, r3, #2
 800eed2:	f040 808b 	bne.w	800efec <TIM_SlaveTimer_SetConfig+0x3f0>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800eed6:	6926      	ldr	r6, [r4, #16]
 800eed8:	2e0f      	cmp	r6, #15
 800eeda:	d874      	bhi.n	800efc6 <TIM_SlaveTimer_SetConfig+0x3ca>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800eedc:	682b      	ldr	r3, [r5, #0]
 800eede:	68a1      	ldr	r1, [r4, #8]
  tmpccer = TIMx->CCER;
 800eee0:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eee2:	6a1c      	ldr	r4, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800eee4:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eee8:	f024 0401 	bic.w	r4, r4, #1
  tmpccer |= TIM_ICPolarity;
 800eeec:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800eeee:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800eef0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eef2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800eef4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800eef8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800eefc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800eefe:	6219      	str	r1, [r3, #32]
}
 800ef00:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800ef02:	4a50      	ldr	r2, [pc, #320]	; (800f044 <TIM_SlaveTimer_SetConfig+0x448>)
 800ef04:	4950      	ldr	r1, [pc, #320]	; (800f048 <TIM_SlaveTimer_SetConfig+0x44c>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	bf18      	it	ne
 800ef0a:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 800ef0e:	bf14      	ite	ne
 800ef10:	2201      	movne	r2, #1
 800ef12:	2200      	moveq	r2, #0
 800ef14:	428b      	cmp	r3, r1
 800ef16:	bf0c      	ite	eq
 800ef18:	2200      	moveq	r2, #0
 800ef1a:	f002 0201 	andne.w	r2, r2, #1
 800ef1e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef22:	428b      	cmp	r3, r1
 800ef24:	bf0c      	ite	eq
 800ef26:	2200      	moveq	r2, #0
 800ef28:	f002 0201 	andne.w	r2, r2, #1
 800ef2c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ef30:	428b      	cmp	r3, r1
 800ef32:	bf0c      	ite	eq
 800ef34:	2200      	moveq	r2, #0
 800ef36:	f002 0201 	andne.w	r2, r2, #1
 800ef3a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800ef3e:	428b      	cmp	r3, r1
 800ef40:	bf0c      	ite	eq
 800ef42:	2200      	moveq	r2, #0
 800ef44:	f002 0201 	andne.w	r2, r2, #1
 800ef48:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800ef4c:	428b      	cmp	r3, r1
 800ef4e:	bf0c      	ite	eq
 800ef50:	2200      	moveq	r2, #0
 800ef52:	f002 0201 	andne.w	r2, r2, #1
 800ef56:	b112      	cbz	r2, 800ef5e <TIM_SlaveTimer_SetConfig+0x362>
 800ef58:	4a3d      	ldr	r2, [pc, #244]	; (800f050 <TIM_SlaveTimer_SetConfig+0x454>)
 800ef5a:	4293      	cmp	r3, r2
 800ef5c:	d15f      	bne.n	800f01e <TIM_SlaveTimer_SetConfig+0x422>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800ef5e:	68a3      	ldr	r3, [r4, #8]
 800ef60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef64:	bf18      	it	ne
 800ef66:	2b0a      	cmpne	r3, #10
 800ef68:	d002      	beq.n	800ef70 <TIM_SlaveTimer_SetConfig+0x374>
 800ef6a:	f033 0302 	bics.w	r3, r3, #2
 800ef6e:	d137      	bne.n	800efe0 <TIM_SlaveTimer_SetConfig+0x3e4>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ef70:	6926      	ldr	r6, [r4, #16]
 800ef72:	2e0f      	cmp	r6, #15
 800ef74:	d81a      	bhi.n	800efac <TIM_SlaveTimer_SetConfig+0x3b0>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef76:	682b      	ldr	r3, [r5, #0]
 800ef78:	68a4      	ldr	r4, [r4, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef7a:	6a18      	ldr	r0, [r3, #32]
 800ef7c:	f020 0010 	bic.w	r0, r0, #16
 800ef80:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800ef82:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800ef84:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800ef86:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ef88:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ef8c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ef90:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800ef94:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800ef98:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800ef9a:	621a      	str	r2, [r3, #32]
}
 800ef9c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800ef9e:	f641 41e9 	movw	r1, #7401	; 0x1ce9
 800efa2:	482c      	ldr	r0, [pc, #176]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efa4:	f7f5 fc44 	bl	8004830 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800efa8:	6921      	ldr	r1, [r4, #16]
 800efaa:	e683      	b.n	800ecb4 <TIM_SlaveTimer_SetConfig+0xb8>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800efac:	f641 511f 	movw	r1, #7455	; 0x1d1f
 800efb0:	4828      	ldr	r0, [pc, #160]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efb2:	f7f5 fc3d 	bl	8004830 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800efb6:	6926      	ldr	r6, [r4, #16]
 800efb8:	e7dd      	b.n	800ef76 <TIM_SlaveTimer_SetConfig+0x37a>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800efba:	f641 41f6 	movw	r1, #7414	; 0x1cf6
 800efbe:	4825      	ldr	r0, [pc, #148]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efc0:	f7f5 fc36 	bl	8004830 <assert_failed>
 800efc4:	e70f      	b.n	800ede6 <TIM_SlaveTimer_SetConfig+0x1ea>
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
 800efc6:	f641 5111 	movw	r1, #7441	; 0x1d11
 800efca:	4822      	ldr	r0, [pc, #136]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efcc:	f7f5 fc30 	bl	8004830 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800efd0:	6926      	ldr	r6, [r4, #16]
 800efd2:	e783      	b.n	800eedc <TIM_SlaveTimer_SetConfig+0x2e0>
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
 800efd4:	f641 41e7 	movw	r1, #7399	; 0x1ce7
 800efd8:	481e      	ldr	r0, [pc, #120]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efda:	f7f5 fc29 	bl	8004830 <assert_failed>
 800efde:	e65b      	b.n	800ec98 <TIM_SlaveTimer_SetConfig+0x9c>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800efe0:	f641 511e 	movw	r1, #7454	; 0x1d1e
 800efe4:	481b      	ldr	r0, [pc, #108]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800efe6:	f7f5 fc23 	bl	8004830 <assert_failed>
 800efea:	e7c1      	b.n	800ef70 <TIM_SlaveTimer_SetConfig+0x374>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800efec:	f641 5110 	movw	r1, #7440	; 0x1d10
 800eff0:	4818      	ldr	r0, [pc, #96]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800eff2:	f7f5 fc1d 	bl	8004830 <assert_failed>
 800eff6:	e76e      	b.n	800eed6 <TIM_SlaveTimer_SetConfig+0x2da>
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
 800eff8:	f641 41e8 	movw	r1, #7400	; 0x1ce8
 800effc:	4815      	ldr	r0, [pc, #84]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800effe:	f7f5 fc17 	bl	8004830 <assert_failed>
 800f002:	e653      	b.n	800ecac <TIM_SlaveTimer_SetConfig+0xb0>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f004:	f641 41e6 	movw	r1, #7398	; 0x1ce6
 800f008:	4812      	ldr	r0, [pc, #72]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800f00a:	f7f5 fc11 	bl	8004830 <assert_failed>
 800f00e:	e63e      	b.n	800ec8e <TIM_SlaveTimer_SetConfig+0x92>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f010:	f641 512e 	movw	r1, #7470	; 0x1d2e
 800f014:	480f      	ldr	r0, [pc, #60]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800f016:	f7f5 fc0b 	bl	8004830 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f01a:	2000      	movs	r0, #0
}
 800f01c:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 800f01e:	f641 511d 	movw	r1, #7453	; 0x1d1d
 800f022:	480c      	ldr	r0, [pc, #48]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800f024:	f7f5 fc04 	bl	8004830 <assert_failed>
 800f028:	e799      	b.n	800ef5e <TIM_SlaveTimer_SetConfig+0x362>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f02a:	f641 41f5 	movw	r1, #7413	; 0x1cf5
 800f02e:	4809      	ldr	r0, [pc, #36]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800f030:	f7f5 fbfe 	bl	8004830 <assert_failed>
 800f034:	e6d3      	b.n	800edde <TIM_SlaveTimer_SetConfig+0x1e2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 800f036:	f641 510f 	movw	r1, #7439	; 0x1d0f
 800f03a:	4806      	ldr	r0, [pc, #24]	; (800f054 <TIM_SlaveTimer_SetConfig+0x458>)
 800f03c:	f7f5 fbf8 	bl	8004830 <assert_failed>
 800f040:	e73f      	b.n	800eec2 <TIM_SlaveTimer_SetConfig+0x2c6>
 800f042:	bf00      	nop
 800f044:	40010000 	.word	0x40010000
 800f048:	40000400 	.word	0x40000400
 800f04c:	40002000 	.word	0x40002000
 800f050:	40001800 	.word	0x40001800
 800f054:	0802c5d8 	.word	0x0802c5d8

0800f058 <HAL_TIM_Base_Start>:
{
 800f058:	b538      	push	{r3, r4, r5, lr}
 800f05a:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f05c:	4b52      	ldr	r3, [pc, #328]	; (800f1a8 <HAL_TIM_Base_Start+0x150>)
 800f05e:	4d53      	ldr	r5, [pc, #332]	; (800f1ac <HAL_TIM_Base_Start+0x154>)
 800f060:	6822      	ldr	r2, [r4, #0]
 800f062:	4953      	ldr	r1, [pc, #332]	; (800f1b0 <HAL_TIM_Base_Start+0x158>)
 800f064:	429a      	cmp	r2, r3
 800f066:	bf18      	it	ne
 800f068:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f06c:	4851      	ldr	r0, [pc, #324]	; (800f1b4 <HAL_TIM_Base_Start+0x15c>)
 800f06e:	bf14      	ite	ne
 800f070:	2301      	movne	r3, #1
 800f072:	2300      	moveq	r3, #0
 800f074:	42aa      	cmp	r2, r5
 800f076:	bf0c      	ite	eq
 800f078:	2300      	moveq	r3, #0
 800f07a:	f003 0301 	andne.w	r3, r3, #1
 800f07e:	428a      	cmp	r2, r1
 800f080:	bf0c      	ite	eq
 800f082:	2300      	moveq	r3, #0
 800f084:	f003 0301 	andne.w	r3, r3, #1
 800f088:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f08c:	4282      	cmp	r2, r0
 800f08e:	bf0c      	ite	eq
 800f090:	2300      	moveq	r3, #0
 800f092:	f003 0301 	andne.w	r3, r3, #1
 800f096:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f09a:	428a      	cmp	r2, r1
 800f09c:	bf0c      	ite	eq
 800f09e:	2300      	moveq	r3, #0
 800f0a0:	f003 0301 	andne.w	r3, r3, #1
 800f0a4:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f0a8:	4282      	cmp	r2, r0
 800f0aa:	bf0c      	ite	eq
 800f0ac:	2300      	moveq	r3, #0
 800f0ae:	f003 0301 	andne.w	r3, r3, #1
 800f0b2:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f0b6:	428a      	cmp	r2, r1
 800f0b8:	bf0c      	ite	eq
 800f0ba:	2300      	moveq	r3, #0
 800f0bc:	f003 0301 	andne.w	r3, r3, #1
 800f0c0:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f0c4:	4282      	cmp	r2, r0
 800f0c6:	bf0c      	ite	eq
 800f0c8:	2300      	moveq	r3, #0
 800f0ca:	f003 0301 	andne.w	r3, r3, #1
 800f0ce:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f0d2:	428a      	cmp	r2, r1
 800f0d4:	bf0c      	ite	eq
 800f0d6:	2300      	moveq	r3, #0
 800f0d8:	f003 0301 	andne.w	r3, r3, #1
 800f0dc:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f0e0:	4282      	cmp	r2, r0
 800f0e2:	bf0c      	ite	eq
 800f0e4:	2300      	moveq	r3, #0
 800f0e6:	f003 0301 	andne.w	r3, r3, #1
 800f0ea:	428a      	cmp	r2, r1
 800f0ec:	bf0c      	ite	eq
 800f0ee:	2300      	moveq	r3, #0
 800f0f0:	f003 0301 	andne.w	r3, r3, #1
 800f0f4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f0f8:	428a      	cmp	r2, r1
 800f0fa:	bf0c      	ite	eq
 800f0fc:	2300      	moveq	r3, #0
 800f0fe:	f003 0301 	andne.w	r3, r3, #1
 800f102:	b113      	cbz	r3, 800f10a <HAL_TIM_Base_Start+0xb2>
 800f104:	4b2c      	ldr	r3, [pc, #176]	; (800f1b8 <HAL_TIM_Base_Start+0x160>)
 800f106:	429a      	cmp	r2, r3
 800f108:	d143      	bne.n	800f192 <HAL_TIM_Base_Start+0x13a>
  if (htim->State != HAL_TIM_STATE_READY)
 800f10a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d13b      	bne.n	800f18a <HAL_TIM_Base_Start+0x132>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f112:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f114:	2002      	movs	r0, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f116:	4b24      	ldr	r3, [pc, #144]	; (800f1a8 <HAL_TIM_Base_Start+0x150>)
 800f118:	4d24      	ldr	r5, [pc, #144]	; (800f1ac <HAL_TIM_Base_Start+0x154>)
 800f11a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f11e:	bf18      	it	ne
 800f120:	429a      	cmpne	r2, r3
 800f122:	4923      	ldr	r1, [pc, #140]	; (800f1b0 <HAL_TIM_Base_Start+0x158>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f124:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f128:	bf0c      	ite	eq
 800f12a:	2301      	moveq	r3, #1
 800f12c:	2300      	movne	r3, #0
 800f12e:	4c21      	ldr	r4, [pc, #132]	; (800f1b4 <HAL_TIM_Base_Start+0x15c>)
 800f130:	42aa      	cmp	r2, r5
 800f132:	bf08      	it	eq
 800f134:	f043 0301 	orreq.w	r3, r3, #1
 800f138:	4820      	ldr	r0, [pc, #128]	; (800f1bc <HAL_TIM_Base_Start+0x164>)
 800f13a:	428a      	cmp	r2, r1
 800f13c:	bf08      	it	eq
 800f13e:	f043 0301 	orreq.w	r3, r3, #1
 800f142:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
 800f146:	42a2      	cmp	r2, r4
 800f148:	bf08      	it	eq
 800f14a:	f043 0301 	orreq.w	r3, r3, #1
 800f14e:	4282      	cmp	r2, r0
 800f150:	bf08      	it	eq
 800f152:	f043 0301 	orreq.w	r3, r3, #1
 800f156:	428a      	cmp	r2, r1
 800f158:	bf08      	it	eq
 800f15a:	f043 0301 	orreq.w	r3, r3, #1
 800f15e:	b933      	cbnz	r3, 800f16e <HAL_TIM_Base_Start+0x116>
 800f160:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f164:	1a10      	subs	r0, r2, r0
 800f166:	fab0 f080 	clz	r0, r0
 800f16a:	0940      	lsrs	r0, r0, #5
 800f16c:	b1b8      	cbz	r0, 800f19e <HAL_TIM_Base_Start+0x146>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f16e:	6891      	ldr	r1, [r2, #8]
 800f170:	4b13      	ldr	r3, [pc, #76]	; (800f1c0 <HAL_TIM_Base_Start+0x168>)
 800f172:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f174:	2b06      	cmp	r3, #6
 800f176:	d00a      	beq.n	800f18e <HAL_TIM_Base_Start+0x136>
 800f178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f17c:	d007      	beq.n	800f18e <HAL_TIM_Base_Start+0x136>
      __HAL_TIM_ENABLE(htim);
 800f17e:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f180:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f182:	f043 0301 	orr.w	r3, r3, #1
 800f186:	6013      	str	r3, [r2, #0]
}
 800f188:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f18a:	2001      	movs	r0, #1
}
 800f18c:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f18e:	2000      	movs	r0, #0
}
 800f190:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f192:	f240 1197 	movw	r1, #407	; 0x197
 800f196:	480b      	ldr	r0, [pc, #44]	; (800f1c4 <HAL_TIM_Base_Start+0x16c>)
 800f198:	f7f5 fb4a 	bl	8004830 <assert_failed>
 800f19c:	e7b5      	b.n	800f10a <HAL_TIM_Base_Start+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f19e:	6813      	ldr	r3, [r2, #0]
 800f1a0:	f043 0301 	orr.w	r3, r3, #1
 800f1a4:	6013      	str	r3, [r2, #0]
}
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	40010000 	.word	0x40010000
 800f1ac:	40000400 	.word	0x40000400
 800f1b0:	40000800 	.word	0x40000800
 800f1b4:	40000c00 	.word	0x40000c00
 800f1b8:	40002000 	.word	0x40002000
 800f1bc:	40010400 	.word	0x40010400
 800f1c0:	00010007 	.word	0x00010007
 800f1c4:	0802c5d8 	.word	0x0802c5d8

0800f1c8 <HAL_TIM_Base_Start_IT>:
{
 800f1c8:	b538      	push	{r3, r4, r5, lr}
 800f1ca:	4604      	mov	r4, r0
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f1cc:	4b54      	ldr	r3, [pc, #336]	; (800f320 <HAL_TIM_Base_Start_IT+0x158>)
 800f1ce:	4d55      	ldr	r5, [pc, #340]	; (800f324 <HAL_TIM_Base_Start_IT+0x15c>)
 800f1d0:	6822      	ldr	r2, [r4, #0]
 800f1d2:	4955      	ldr	r1, [pc, #340]	; (800f328 <HAL_TIM_Base_Start_IT+0x160>)
 800f1d4:	429a      	cmp	r2, r3
 800f1d6:	bf18      	it	ne
 800f1d8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f1dc:	4853      	ldr	r0, [pc, #332]	; (800f32c <HAL_TIM_Base_Start_IT+0x164>)
 800f1de:	bf14      	ite	ne
 800f1e0:	2301      	movne	r3, #1
 800f1e2:	2300      	moveq	r3, #0
 800f1e4:	42aa      	cmp	r2, r5
 800f1e6:	bf0c      	ite	eq
 800f1e8:	2300      	moveq	r3, #0
 800f1ea:	f003 0301 	andne.w	r3, r3, #1
 800f1ee:	428a      	cmp	r2, r1
 800f1f0:	bf0c      	ite	eq
 800f1f2:	2300      	moveq	r3, #0
 800f1f4:	f003 0301 	andne.w	r3, r3, #1
 800f1f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f1fc:	4282      	cmp	r2, r0
 800f1fe:	bf0c      	ite	eq
 800f200:	2300      	moveq	r3, #0
 800f202:	f003 0301 	andne.w	r3, r3, #1
 800f206:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f20a:	428a      	cmp	r2, r1
 800f20c:	bf0c      	ite	eq
 800f20e:	2300      	moveq	r3, #0
 800f210:	f003 0301 	andne.w	r3, r3, #1
 800f214:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f218:	4282      	cmp	r2, r0
 800f21a:	bf0c      	ite	eq
 800f21c:	2300      	moveq	r3, #0
 800f21e:	f003 0301 	andne.w	r3, r3, #1
 800f222:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f226:	428a      	cmp	r2, r1
 800f228:	bf0c      	ite	eq
 800f22a:	2300      	moveq	r3, #0
 800f22c:	f003 0301 	andne.w	r3, r3, #1
 800f230:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f234:	4282      	cmp	r2, r0
 800f236:	bf0c      	ite	eq
 800f238:	2300      	moveq	r3, #0
 800f23a:	f003 0301 	andne.w	r3, r3, #1
 800f23e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f242:	428a      	cmp	r2, r1
 800f244:	bf0c      	ite	eq
 800f246:	2300      	moveq	r3, #0
 800f248:	f003 0301 	andne.w	r3, r3, #1
 800f24c:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f250:	4282      	cmp	r2, r0
 800f252:	bf0c      	ite	eq
 800f254:	2300      	moveq	r3, #0
 800f256:	f003 0301 	andne.w	r3, r3, #1
 800f25a:	428a      	cmp	r2, r1
 800f25c:	bf0c      	ite	eq
 800f25e:	2300      	moveq	r3, #0
 800f260:	f003 0301 	andne.w	r3, r3, #1
 800f264:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f268:	428a      	cmp	r2, r1
 800f26a:	bf0c      	ite	eq
 800f26c:	2300      	moveq	r3, #0
 800f26e:	f003 0301 	andne.w	r3, r3, #1
 800f272:	b113      	cbz	r3, 800f27a <HAL_TIM_Base_Start_IT+0xb2>
 800f274:	4b2e      	ldr	r3, [pc, #184]	; (800f330 <HAL_TIM_Base_Start_IT+0x168>)
 800f276:	429a      	cmp	r2, r3
 800f278:	d147      	bne.n	800f30a <HAL_TIM_Base_Start_IT+0x142>
  if (htim->State != HAL_TIM_STATE_READY)
 800f27a:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d13f      	bne.n	800f302 <HAL_TIM_Base_Start_IT+0x13a>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f282:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800f284:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f286:	4b26      	ldr	r3, [pc, #152]	; (800f320 <HAL_TIM_Base_Start_IT+0x158>)
 800f288:	4d26      	ldr	r5, [pc, #152]	; (800f324 <HAL_TIM_Base_Start_IT+0x15c>)
 800f28a:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 800f28e:	bf18      	it	ne
 800f290:	429a      	cmpne	r2, r3
 800f292:	4825      	ldr	r0, [pc, #148]	; (800f328 <HAL_TIM_Base_Start_IT+0x160>)
  htim->State = HAL_TIM_STATE_BUSY;
 800f294:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f298:	bf0c      	ite	eq
 800f29a:	2301      	moveq	r3, #1
 800f29c:	2300      	movne	r3, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f29e:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2a0:	42aa      	cmp	r2, r5
 800f2a2:	bf08      	it	eq
 800f2a4:	f043 0301 	orreq.w	r3, r3, #1
 800f2a8:	4c20      	ldr	r4, [pc, #128]	; (800f32c <HAL_TIM_Base_Start_IT+0x164>)
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f2aa:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2ae:	4282      	cmp	r2, r0
 800f2b0:	bf08      	it	eq
 800f2b2:	f043 0301 	orreq.w	r3, r3, #1
 800f2b6:	f500 407c 	add.w	r0, r0, #64512	; 0xfc00
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800f2ba:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f2bc:	42a2      	cmp	r2, r4
 800f2be:	bf08      	it	eq
 800f2c0:	f043 0301 	orreq.w	r3, r3, #1
 800f2c4:	491b      	ldr	r1, [pc, #108]	; (800f334 <HAL_TIM_Base_Start_IT+0x16c>)
 800f2c6:	4282      	cmp	r2, r0
 800f2c8:	bf08      	it	eq
 800f2ca:	f043 0301 	orreq.w	r3, r3, #1
 800f2ce:	428a      	cmp	r2, r1
 800f2d0:	bf08      	it	eq
 800f2d2:	f043 0301 	orreq.w	r3, r3, #1
 800f2d6:	b933      	cbnz	r3, 800f2e6 <HAL_TIM_Base_Start_IT+0x11e>
 800f2d8:	f5a0 406c 	sub.w	r0, r0, #60416	; 0xec00
 800f2dc:	1a10      	subs	r0, r2, r0
 800f2de:	fab0 f080 	clz	r0, r0
 800f2e2:	0940      	lsrs	r0, r0, #5
 800f2e4:	b1b8      	cbz	r0, 800f316 <HAL_TIM_Base_Start_IT+0x14e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f2e6:	6891      	ldr	r1, [r2, #8]
 800f2e8:	4b13      	ldr	r3, [pc, #76]	; (800f338 <HAL_TIM_Base_Start_IT+0x170>)
 800f2ea:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f2ec:	2b06      	cmp	r3, #6
 800f2ee:	d00a      	beq.n	800f306 <HAL_TIM_Base_Start_IT+0x13e>
 800f2f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f2f4:	d007      	beq.n	800f306 <HAL_TIM_Base_Start_IT+0x13e>
      __HAL_TIM_ENABLE(htim);
 800f2f6:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
 800f2f8:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 800f2fa:	f043 0301 	orr.w	r3, r3, #1
 800f2fe:	6013      	str	r3, [r2, #0]
}
 800f300:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800f302:	2001      	movs	r0, #1
}
 800f304:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 800f306:	2000      	movs	r0, #0
}
 800f308:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f30a:	f44f 71e9 	mov.w	r1, #466	; 0x1d2
 800f30e:	480b      	ldr	r0, [pc, #44]	; (800f33c <HAL_TIM_Base_Start_IT+0x174>)
 800f310:	f7f5 fa8e 	bl	8004830 <assert_failed>
 800f314:	e7b1      	b.n	800f27a <HAL_TIM_Base_Start_IT+0xb2>
    __HAL_TIM_ENABLE(htim);
 800f316:	6813      	ldr	r3, [r2, #0]
 800f318:	f043 0301 	orr.w	r3, r3, #1
 800f31c:	6013      	str	r3, [r2, #0]
}
 800f31e:	bd38      	pop	{r3, r4, r5, pc}
 800f320:	40010000 	.word	0x40010000
 800f324:	40000400 	.word	0x40000400
 800f328:	40000800 	.word	0x40000800
 800f32c:	40000c00 	.word	0x40000c00
 800f330:	40002000 	.word	0x40002000
 800f334:	40014000 	.word	0x40014000
 800f338:	00010007 	.word	0x00010007
 800f33c:	0802c5d8 	.word	0x0802c5d8

0800f340 <HAL_TIM_OC_MspInit>:
 800f340:	4770      	bx	lr
 800f342:	bf00      	nop

0800f344 <HAL_TIM_PWM_MspInit>:
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop

0800f348 <HAL_TIM_IC_MspInit>:
 800f348:	4770      	bx	lr
 800f34a:	bf00      	nop

0800f34c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800f34c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800f350:	2b01      	cmp	r3, #1
 800f352:	f000 8151 	beq.w	800f5f8 <HAL_TIM_ConfigClockSource+0x2ac>
 800f356:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f358:	2302      	movs	r3, #2
{
 800f35a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800f35c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f360:	460d      	mov	r5, r1
 800f362:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f366:	4604      	mov	r4, r0
 800f368:	680b      	ldr	r3, [r1, #0]
 800f36a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f36e:	bf18      	it	ne
 800f370:	f5b3 5f00 	cmpne.w	r3, #8192	; 0x2000
 800f374:	bf14      	ite	ne
 800f376:	2201      	movne	r2, #1
 800f378:	2200      	moveq	r2, #0
 800f37a:	f033 0130 	bics.w	r1, r3, #48	; 0x30
 800f37e:	f002 0201 	and.w	r2, r2, #1
 800f382:	bf08      	it	eq
 800f384:	2200      	moveq	r2, #0
 800f386:	b112      	cbz	r2, 800f38e <HAL_TIM_ConfigClockSource+0x42>
 800f388:	2940      	cmp	r1, #64	; 0x40
 800f38a:	f040 8267 	bne.w	800f85c <HAL_TIM_ConfigClockSource+0x510>
  tmpsmcr = htim->Instance->SMCR;
 800f38e:	6822      	ldr	r2, [r4, #0]
  switch (sClockSourceConfig->ClockSource)
 800f390:	2b60      	cmp	r3, #96	; 0x60
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f392:	499a      	ldr	r1, [pc, #616]	; (800f5fc <HAL_TIM_ConfigClockSource+0x2b0>)
  tmpsmcr = htim->Instance->SMCR;
 800f394:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f396:	ea01 0100 	and.w	r1, r1, r0
  htim->Instance->SMCR = tmpsmcr;
 800f39a:	6091      	str	r1, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 800f39c:	f000 8138 	beq.w	800f610 <HAL_TIM_ConfigClockSource+0x2c4>
 800f3a0:	d84f      	bhi.n	800f442 <HAL_TIM_ConfigClockSource+0xf6>
 800f3a2:	2b40      	cmp	r3, #64	; 0x40
 800f3a4:	f000 81d7 	beq.w	800f756 <HAL_TIM_ConfigClockSource+0x40a>
 800f3a8:	f240 80a2 	bls.w	800f4f0 <HAL_TIM_ConfigClockSource+0x1a4>
 800f3ac:	2b50      	cmp	r3, #80	; 0x50
 800f3ae:	f040 8097 	bne.w	800f4e0 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f3b2:	4b93      	ldr	r3, [pc, #588]	; (800f600 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f3b4:	4993      	ldr	r1, [pc, #588]	; (800f604 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	bf18      	it	ne
 800f3ba:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f3be:	bf14      	ite	ne
 800f3c0:	2301      	movne	r3, #1
 800f3c2:	2300      	moveq	r3, #0
 800f3c4:	428a      	cmp	r2, r1
 800f3c6:	bf0c      	ite	eq
 800f3c8:	2300      	moveq	r3, #0
 800f3ca:	f003 0301 	andne.w	r3, r3, #1
 800f3ce:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3d2:	428a      	cmp	r2, r1
 800f3d4:	bf0c      	ite	eq
 800f3d6:	2300      	moveq	r3, #0
 800f3d8:	f003 0301 	andne.w	r3, r3, #1
 800f3dc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f3e0:	428a      	cmp	r2, r1
 800f3e2:	bf0c      	ite	eq
 800f3e4:	2300      	moveq	r3, #0
 800f3e6:	f003 0301 	andne.w	r3, r3, #1
 800f3ea:	b11b      	cbz	r3, 800f3f4 <HAL_TIM_ConfigClockSource+0xa8>
 800f3ec:	4b86      	ldr	r3, [pc, #536]	; (800f608 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	f040 8222 	bne.w	800f838 <HAL_TIM_ConfigClockSource+0x4ec>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f3f4:	686b      	ldr	r3, [r5, #4]
 800f3f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f3fa:	bf18      	it	ne
 800f3fc:	2b0a      	cmpne	r3, #10
 800f3fe:	d003      	beq.n	800f408 <HAL_TIM_ConfigClockSource+0xbc>
 800f400:	f033 0302 	bics.w	r3, r3, #2
 800f404:	f040 81fe 	bne.w	800f804 <HAL_TIM_ConfigClockSource+0x4b8>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f408:	68ee      	ldr	r6, [r5, #12]
 800f40a:	2e0f      	cmp	r6, #15
 800f40c:	f200 8242 	bhi.w	800f894 <HAL_TIM_ConfigClockSource+0x548>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f414:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f416:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f418:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f41c:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f420:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f422:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f424:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f426:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f428:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f42c:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f430:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f432:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f434:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f436:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f43a:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800f43e:	609a      	str	r2, [r3, #8]
}
 800f440:	e04f      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f446:	f000 812c 	beq.w	800f6a2 <HAL_TIM_ConfigClockSource+0x356>
 800f44a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f44e:	d17e      	bne.n	800f54e <HAL_TIM_ConfigClockSource+0x202>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f450:	4b6b      	ldr	r3, [pc, #428]	; (800f600 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f452:	496c      	ldr	r1, [pc, #432]	; (800f604 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f454:	429a      	cmp	r2, r3
 800f456:	bf18      	it	ne
 800f458:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f45c:	bf14      	ite	ne
 800f45e:	2301      	movne	r3, #1
 800f460:	2300      	moveq	r3, #0
 800f462:	428a      	cmp	r2, r1
 800f464:	bf0c      	ite	eq
 800f466:	2300      	moveq	r3, #0
 800f468:	f003 0301 	andne.w	r3, r3, #1
 800f46c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f470:	428a      	cmp	r2, r1
 800f472:	bf0c      	ite	eq
 800f474:	2300      	moveq	r3, #0
 800f476:	f003 0301 	andne.w	r3, r3, #1
 800f47a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f47e:	428a      	cmp	r2, r1
 800f480:	bf0c      	ite	eq
 800f482:	2300      	moveq	r3, #0
 800f484:	f003 0301 	andne.w	r3, r3, #1
 800f488:	b11b      	cbz	r3, 800f492 <HAL_TIM_ConfigClockSource+0x146>
 800f48a:	4b5f      	ldr	r3, [pc, #380]	; (800f608 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f48c:	429a      	cmp	r2, r3
 800f48e:	f040 81c5 	bne.w	800f81c <HAL_TIM_ConfigClockSource+0x4d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f492:	68ab      	ldr	r3, [r5, #8]
 800f494:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f498:	f040 8210 	bne.w	800f8bc <HAL_TIM_ConfigClockSource+0x570>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f49c:	686b      	ldr	r3, [r5, #4]
 800f49e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f4a2:	bf18      	it	ne
 800f4a4:	2b0a      	cmpne	r3, #10
 800f4a6:	d003      	beq.n	800f4b0 <HAL_TIM_ConfigClockSource+0x164>
 800f4a8:	f033 0302 	bics.w	r3, r3, #2
 800f4ac:	f040 81a4 	bne.w	800f7f8 <HAL_TIM_ConfigClockSource+0x4ac>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f4b0:	68ee      	ldr	r6, [r5, #12]
 800f4b2:	2e0f      	cmp	r6, #15
 800f4b4:	f200 81d9 	bhi.w	800f86a <HAL_TIM_ConfigClockSource+0x51e>
      TIM_ETR_SetConfig(htim->Instance,
 800f4b8:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f4ba:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f4be:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f4c0:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f4c2:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f4c4:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f4c8:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f4ca:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f4ce:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f4d0:	6893      	ldr	r3, [r2, #8]
 800f4d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f4d6:	6093      	str	r3, [r2, #8]
      break;
 800f4d8:	e003      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f4da:	f033 0110 	bics.w	r1, r3, #16
 800f4de:	d00c      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x1ae>
 800f4e0:	2001      	movs	r0, #1
  htim->State = HAL_TIM_STATE_READY;
 800f4e2:	2201      	movs	r2, #1
  __HAL_UNLOCK(htim);
 800f4e4:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800f4e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f4ea:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f4ee:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800f4f0:	2b20      	cmp	r3, #32
 800f4f2:	d002      	beq.n	800f4fa <HAL_TIM_ConfigClockSource+0x1ae>
 800f4f4:	d9f1      	bls.n	800f4da <HAL_TIM_ConfigClockSource+0x18e>
 800f4f6:	2b30      	cmp	r3, #48	; 0x30
 800f4f8:	d1f2      	bne.n	800f4e0 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f4fa:	4941      	ldr	r1, [pc, #260]	; (800f600 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f4fc:	4841      	ldr	r0, [pc, #260]	; (800f604 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f4fe:	428a      	cmp	r2, r1
 800f500:	bf18      	it	ne
 800f502:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f506:	bf14      	ite	ne
 800f508:	2101      	movne	r1, #1
 800f50a:	2100      	moveq	r1, #0
 800f50c:	4282      	cmp	r2, r0
 800f50e:	bf0c      	ite	eq
 800f510:	2100      	moveq	r1, #0
 800f512:	f001 0101 	andne.w	r1, r1, #1
 800f516:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f51a:	4282      	cmp	r2, r0
 800f51c:	bf0c      	ite	eq
 800f51e:	2100      	moveq	r1, #0
 800f520:	f001 0101 	andne.w	r1, r1, #1
 800f524:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 800f528:	4282      	cmp	r2, r0
 800f52a:	bf0c      	ite	eq
 800f52c:	2100      	moveq	r1, #0
 800f52e:	f001 0101 	andne.w	r1, r1, #1
 800f532:	b119      	cbz	r1, 800f53c <HAL_TIM_ConfigClockSource+0x1f0>
 800f534:	4934      	ldr	r1, [pc, #208]	; (800f608 <HAL_TIM_ConfigClockSource+0x2bc>)
 800f536:	428a      	cmp	r2, r1
 800f538:	f040 8176 	bne.w	800f828 <HAL_TIM_ConfigClockSource+0x4dc>
  tmpsmcr = TIMx->SMCR;
 800f53c:	6891      	ldr	r1, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800f53e:	2000      	movs	r0, #0
  tmpsmcr &= ~TIM_SMCR_TS;
 800f540:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f544:	430b      	orrs	r3, r1
 800f546:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 800f54a:	6093      	str	r3, [r2, #8]
}
 800f54c:	e7c9      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
  switch (sClockSourceConfig->ClockSource)
 800f54e:	2b70      	cmp	r3, #112	; 0x70
 800f550:	d1c6      	bne.n	800f4e0 <HAL_TIM_ConfigClockSource+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f552:	4b2b      	ldr	r3, [pc, #172]	; (800f600 <HAL_TIM_ConfigClockSource+0x2b4>)
 800f554:	492b      	ldr	r1, [pc, #172]	; (800f604 <HAL_TIM_ConfigClockSource+0x2b8>)
 800f556:	429a      	cmp	r2, r3
 800f558:	bf18      	it	ne
 800f55a:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f55e:	bf14      	ite	ne
 800f560:	2301      	movne	r3, #1
 800f562:	2300      	moveq	r3, #0
 800f564:	428a      	cmp	r2, r1
 800f566:	bf0c      	ite	eq
 800f568:	2300      	moveq	r3, #0
 800f56a:	f003 0301 	andne.w	r3, r3, #1
 800f56e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f572:	428a      	cmp	r2, r1
 800f574:	bf0c      	ite	eq
 800f576:	2300      	moveq	r3, #0
 800f578:	f003 0301 	andne.w	r3, r3, #1
 800f57c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f580:	428a      	cmp	r2, r1
 800f582:	bf0c      	ite	eq
 800f584:	2300      	moveq	r3, #0
 800f586:	f003 0301 	andne.w	r3, r3, #1
 800f58a:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f58e:	428a      	cmp	r2, r1
 800f590:	bf0c      	ite	eq
 800f592:	2300      	moveq	r3, #0
 800f594:	f003 0301 	andne.w	r3, r3, #1
 800f598:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f59c:	428a      	cmp	r2, r1
 800f59e:	bf0c      	ite	eq
 800f5a0:	2300      	moveq	r3, #0
 800f5a2:	f003 0301 	andne.w	r3, r3, #1
 800f5a6:	b11b      	cbz	r3, 800f5b0 <HAL_TIM_ConfigClockSource+0x264>
 800f5a8:	4b18      	ldr	r3, [pc, #96]	; (800f60c <HAL_TIM_ConfigClockSource+0x2c0>)
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	f040 818c 	bne.w	800f8c8 <HAL_TIM_ConfigClockSource+0x57c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f5b0:	68ab      	ldr	r3, [r5, #8]
 800f5b2:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 800f5b6:	f040 817b 	bne.w	800f8b0 <HAL_TIM_ConfigClockSource+0x564>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f5ba:	686b      	ldr	r3, [r5, #4]
 800f5bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f5c0:	bf18      	it	ne
 800f5c2:	2b0a      	cmpne	r3, #10
 800f5c4:	d003      	beq.n	800f5ce <HAL_TIM_ConfigClockSource+0x282>
 800f5c6:	f033 0302 	bics.w	r3, r3, #2
 800f5ca:	f040 8121 	bne.w	800f810 <HAL_TIM_ConfigClockSource+0x4c4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f5ce:	68ee      	ldr	r6, [r5, #12]
 800f5d0:	2e0f      	cmp	r6, #15
 800f5d2:	f200 8166 	bhi.w	800f8a2 <HAL_TIM_ConfigClockSource+0x556>
      TIM_ETR_SetConfig(htim->Instance,
 800f5d6:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800f5d8:	e9d5 0301 	ldrd	r0, r3, [r5, #4]
 800f5dc:	6891      	ldr	r1, [r2, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5de:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f5e0:	2000      	movs	r0, #0
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f5e2:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
 800f5e6:	430b      	orrs	r3, r1
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f5e8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
  TIMx->SMCR = tmpsmcr;
 800f5ec:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 800f5ee:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f5f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800f5f4:	6093      	str	r3, [r2, #8]
      break;
 800f5f6:	e774      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
  __HAL_LOCK(htim);
 800f5f8:	2002      	movs	r0, #2
}
 800f5fa:	4770      	bx	lr
 800f5fc:	fffe0088 	.word	0xfffe0088
 800f600:	40010000 	.word	0x40010000
 800f604:	40000400 	.word	0x40000400
 800f608:	40010400 	.word	0x40010400
 800f60c:	40001800 	.word	0x40001800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f610:	4bb0      	ldr	r3, [pc, #704]	; (800f8d4 <HAL_TIM_ConfigClockSource+0x588>)
 800f612:	49b1      	ldr	r1, [pc, #708]	; (800f8d8 <HAL_TIM_ConfigClockSource+0x58c>)
 800f614:	429a      	cmp	r2, r3
 800f616:	bf18      	it	ne
 800f618:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f61c:	bf14      	ite	ne
 800f61e:	2301      	movne	r3, #1
 800f620:	2300      	moveq	r3, #0
 800f622:	428a      	cmp	r2, r1
 800f624:	bf0c      	ite	eq
 800f626:	2300      	moveq	r3, #0
 800f628:	f003 0301 	andne.w	r3, r3, #1
 800f62c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f630:	428a      	cmp	r2, r1
 800f632:	bf0c      	ite	eq
 800f634:	2300      	moveq	r3, #0
 800f636:	f003 0301 	andne.w	r3, r3, #1
 800f63a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f63e:	428a      	cmp	r2, r1
 800f640:	bf0c      	ite	eq
 800f642:	2300      	moveq	r3, #0
 800f644:	f003 0301 	andne.w	r3, r3, #1
 800f648:	b11b      	cbz	r3, 800f652 <HAL_TIM_ConfigClockSource+0x306>
 800f64a:	4ba4      	ldr	r3, [pc, #656]	; (800f8dc <HAL_TIM_ConfigClockSource+0x590>)
 800f64c:	429a      	cmp	r2, r3
 800f64e:	f040 80ff 	bne.w	800f850 <HAL_TIM_ConfigClockSource+0x504>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f652:	686b      	ldr	r3, [r5, #4]
 800f654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f658:	bf18      	it	ne
 800f65a:	2b0a      	cmpne	r3, #10
 800f65c:	d003      	beq.n	800f666 <HAL_TIM_ConfigClockSource+0x31a>
 800f65e:	f033 0302 	bics.w	r3, r3, #2
 800f662:	f040 80c3 	bne.w	800f7ec <HAL_TIM_ConfigClockSource+0x4a0>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f666:	68ee      	ldr	r6, [r5, #12]
 800f668:	2e0f      	cmp	r6, #15
 800f66a:	f200 810c 	bhi.w	800f886 <HAL_TIM_ConfigClockSource+0x53a>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f66e:	6823      	ldr	r3, [r4, #0]
 800f670:	686d      	ldr	r5, [r5, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f672:	6a18      	ldr	r0, [r3, #32]
 800f674:	f020 0010 	bic.w	r0, r0, #16
 800f678:	6218      	str	r0, [r3, #32]
  HAL_StatusTypeDef status = HAL_OK;
 800f67a:	2000      	movs	r0, #0
  tmpccmr1 = TIMx->CCMR1;
 800f67c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800f67e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f680:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f684:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f688:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 800f68c:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800f690:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 800f692:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f694:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f696:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f69a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800f69e:	609a      	str	r2, [r3, #8]
}
 800f6a0:	e71f      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f6a2:	4b8c      	ldr	r3, [pc, #560]	; (800f8d4 <HAL_TIM_ConfigClockSource+0x588>)
 800f6a4:	488c      	ldr	r0, [pc, #560]	; (800f8d8 <HAL_TIM_ConfigClockSource+0x58c>)
 800f6a6:	429a      	cmp	r2, r3
 800f6a8:	bf18      	it	ne
 800f6aa:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f6ae:	498c      	ldr	r1, [pc, #560]	; (800f8e0 <HAL_TIM_ConfigClockSource+0x594>)
 800f6b0:	bf14      	ite	ne
 800f6b2:	2301      	movne	r3, #1
 800f6b4:	2300      	moveq	r3, #0
 800f6b6:	4282      	cmp	r2, r0
 800f6b8:	bf0c      	ite	eq
 800f6ba:	2300      	moveq	r3, #0
 800f6bc:	f003 0301 	andne.w	r3, r3, #1
 800f6c0:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f6c4:	428a      	cmp	r2, r1
 800f6c6:	bf0c      	ite	eq
 800f6c8:	2300      	moveq	r3, #0
 800f6ca:	f003 0301 	andne.w	r3, r3, #1
 800f6ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d2:	4282      	cmp	r2, r0
 800f6d4:	bf0c      	ite	eq
 800f6d6:	2300      	moveq	r3, #0
 800f6d8:	f003 0301 	andne.w	r3, r3, #1
 800f6dc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f6e0:	428a      	cmp	r2, r1
 800f6e2:	bf0c      	ite	eq
 800f6e4:	2300      	moveq	r3, #0
 800f6e6:	f003 0301 	andne.w	r3, r3, #1
 800f6ea:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800f6ee:	4282      	cmp	r2, r0
 800f6f0:	bf0c      	ite	eq
 800f6f2:	2300      	moveq	r3, #0
 800f6f4:	f003 0301 	andne.w	r3, r3, #1
 800f6f8:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800f6fc:	428a      	cmp	r2, r1
 800f6fe:	bf0c      	ite	eq
 800f700:	2300      	moveq	r3, #0
 800f702:	f003 0301 	andne.w	r3, r3, #1
 800f706:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800f70a:	4282      	cmp	r2, r0
 800f70c:	bf0c      	ite	eq
 800f70e:	2300      	moveq	r3, #0
 800f710:	f003 0301 	andne.w	r3, r3, #1
 800f714:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800f718:	428a      	cmp	r2, r1
 800f71a:	bf0c      	ite	eq
 800f71c:	2300      	moveq	r3, #0
 800f71e:	f003 0301 	andne.w	r3, r3, #1
 800f722:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800f726:	4282      	cmp	r2, r0
 800f728:	bf0c      	ite	eq
 800f72a:	2300      	moveq	r3, #0
 800f72c:	f003 0301 	andne.w	r3, r3, #1
 800f730:	428a      	cmp	r2, r1
 800f732:	bf0c      	ite	eq
 800f734:	2300      	moveq	r3, #0
 800f736:	f003 0301 	andne.w	r3, r3, #1
 800f73a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f73e:	428a      	cmp	r2, r1
 800f740:	bf0c      	ite	eq
 800f742:	2300      	moveq	r3, #0
 800f744:	f003 0301 	andne.w	r3, r3, #1
 800f748:	b11b      	cbz	r3, 800f752 <HAL_TIM_ConfigClockSource+0x406>
 800f74a:	4b66      	ldr	r3, [pc, #408]	; (800f8e4 <HAL_TIM_ConfigClockSource+0x598>)
 800f74c:	429a      	cmp	r2, r3
 800f74e:	f040 80cd 	bne.w	800f8ec <HAL_TIM_ConfigClockSource+0x5a0>
  HAL_StatusTypeDef status = HAL_OK;
 800f752:	2000      	movs	r0, #0
 800f754:	e6c5      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f756:	4b5f      	ldr	r3, [pc, #380]	; (800f8d4 <HAL_TIM_ConfigClockSource+0x588>)
 800f758:	495f      	ldr	r1, [pc, #380]	; (800f8d8 <HAL_TIM_ConfigClockSource+0x58c>)
 800f75a:	429a      	cmp	r2, r3
 800f75c:	bf18      	it	ne
 800f75e:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f762:	bf14      	ite	ne
 800f764:	2301      	movne	r3, #1
 800f766:	2300      	moveq	r3, #0
 800f768:	428a      	cmp	r2, r1
 800f76a:	bf0c      	ite	eq
 800f76c:	2300      	moveq	r3, #0
 800f76e:	f003 0301 	andne.w	r3, r3, #1
 800f772:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f776:	428a      	cmp	r2, r1
 800f778:	bf0c      	ite	eq
 800f77a:	2300      	moveq	r3, #0
 800f77c:	f003 0301 	andne.w	r3, r3, #1
 800f780:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f784:	428a      	cmp	r2, r1
 800f786:	bf0c      	ite	eq
 800f788:	2300      	moveq	r3, #0
 800f78a:	f003 0301 	andne.w	r3, r3, #1
 800f78e:	b113      	cbz	r3, 800f796 <HAL_TIM_ConfigClockSource+0x44a>
 800f790:	4b52      	ldr	r3, [pc, #328]	; (800f8dc <HAL_TIM_ConfigClockSource+0x590>)
 800f792:	429a      	cmp	r2, r3
 800f794:	d156      	bne.n	800f844 <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f796:	686b      	ldr	r3, [r5, #4]
 800f798:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f79c:	bf18      	it	ne
 800f79e:	2b0a      	cmpne	r3, #10
 800f7a0:	d002      	beq.n	800f7a8 <HAL_TIM_ConfigClockSource+0x45c>
 800f7a2:	f033 0302 	bics.w	r3, r3, #2
 800f7a6:	d11b      	bne.n	800f7e0 <HAL_TIM_ConfigClockSource+0x494>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f7a8:	68ee      	ldr	r6, [r5, #12]
 800f7aa:	2e0f      	cmp	r6, #15
 800f7ac:	d864      	bhi.n	800f878 <HAL_TIM_ConfigClockSource+0x52c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f7ae:	6823      	ldr	r3, [r4, #0]
 800f7b0:	6869      	ldr	r1, [r5, #4]
  tmpccer = TIMx->CCER;
 800f7b2:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7b4:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f7b6:	f020 000a 	bic.w	r0, r0, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7ba:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800f7be:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 800f7c0:	2000      	movs	r0, #0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f7c2:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7c4:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f7c6:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f7ca:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800f7ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7d0:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800f7d2:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7d4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7d8:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 800f7dc:	609a      	str	r2, [r3, #8]
}
 800f7de:	e680      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f7e0:	f241 51a6 	movw	r1, #5542	; 0x15a6
 800f7e4:	4840      	ldr	r0, [pc, #256]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f7e6:	f7f5 f823 	bl	8004830 <assert_failed>
 800f7ea:	e7dd      	b.n	800f7a8 <HAL_TIM_ConfigClockSource+0x45c>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f7ec:	f241 5196 	movw	r1, #5526	; 0x1596
 800f7f0:	483d      	ldr	r0, [pc, #244]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f7f2:	f7f5 f81d 	bl	8004830 <assert_failed>
 800f7f6:	e736      	b.n	800f666 <HAL_TIM_ConfigClockSource+0x31a>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f7f8:	f241 5173 	movw	r1, #5491	; 0x1573
 800f7fc:	483a      	ldr	r0, [pc, #232]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f7fe:	f7f5 f817 	bl	8004830 <assert_failed>
 800f802:	e655      	b.n	800f4b0 <HAL_TIM_ConfigClockSource+0x164>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f804:	f241 5186 	movw	r1, #5510	; 0x1586
 800f808:	4837      	ldr	r0, [pc, #220]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f80a:	f7f5 f811 	bl	8004830 <assert_failed>
 800f80e:	e5fb      	b.n	800f408 <HAL_TIM_ConfigClockSource+0xbc>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800f810:	f241 515b 	movw	r1, #5467	; 0x155b
 800f814:	4834      	ldr	r0, [pc, #208]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f816:	f7f5 f80b 	bl	8004830 <assert_failed>
 800f81a:	e6d8      	b.n	800f5ce <HAL_TIM_ConfigClockSource+0x282>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 800f81c:	f241 516f 	movw	r1, #5487	; 0x156f
 800f820:	4831      	ldr	r0, [pc, #196]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f822:	f7f5 f805 	bl	8004830 <assert_failed>
 800f826:	e634      	b.n	800f492 <HAL_TIM_ConfigClockSource+0x146>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 800f828:	f241 51b6 	movw	r1, #5558	; 0x15b6
 800f82c:	482e      	ldr	r0, [pc, #184]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f82e:	f7f4 ffff 	bl	8004830 <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f832:	6822      	ldr	r2, [r4, #0]
 800f834:	682b      	ldr	r3, [r5, #0]
 800f836:	e681      	b.n	800f53c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f838:	f241 5183 	movw	r1, #5507	; 0x1583
 800f83c:	482a      	ldr	r0, [pc, #168]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f83e:	f7f4 fff7 	bl	8004830 <assert_failed>
 800f842:	e5d7      	b.n	800f3f4 <HAL_TIM_ConfigClockSource+0xa8>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f844:	f241 51a3 	movw	r1, #5539	; 0x15a3
 800f848:	4827      	ldr	r0, [pc, #156]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f84a:	f7f4 fff1 	bl	8004830 <assert_failed>
 800f84e:	e7a2      	b.n	800f796 <HAL_TIM_ConfigClockSource+0x44a>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 800f850:	f241 5193 	movw	r1, #5523	; 0x1593
 800f854:	4824      	ldr	r0, [pc, #144]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f856:	f7f4 ffeb 	bl	8004830 <assert_failed>
 800f85a:	e6fa      	b.n	800f652 <HAL_TIM_ConfigClockSource+0x306>
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800f85c:	f241 5144 	movw	r1, #5444	; 0x1544
 800f860:	4821      	ldr	r0, [pc, #132]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f862:	f7f4 ffe5 	bl	8004830 <assert_failed>
  switch (sClockSourceConfig->ClockSource)
 800f866:	682b      	ldr	r3, [r5, #0]
 800f868:	e591      	b.n	800f38e <HAL_TIM_ConfigClockSource+0x42>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f86a:	f241 5174 	movw	r1, #5492	; 0x1574
 800f86e:	481e      	ldr	r0, [pc, #120]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f870:	f7f4 ffde 	bl	8004830 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f874:	68ee      	ldr	r6, [r5, #12]
 800f876:	e61f      	b.n	800f4b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f878:	f241 51a7 	movw	r1, #5543	; 0x15a7
 800f87c:	481a      	ldr	r0, [pc, #104]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f87e:	f7f4 ffd7 	bl	8004830 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f882:	68ee      	ldr	r6, [r5, #12]
 800f884:	e793      	b.n	800f7ae <HAL_TIM_ConfigClockSource+0x462>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f886:	f241 5197 	movw	r1, #5527	; 0x1597
 800f88a:	4817      	ldr	r0, [pc, #92]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f88c:	f7f4 ffd0 	bl	8004830 <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f890:	68ee      	ldr	r6, [r5, #12]
 800f892:	e6ec      	b.n	800f66e <HAL_TIM_ConfigClockSource+0x322>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f894:	f241 5187 	movw	r1, #5511	; 0x1587
 800f898:	4813      	ldr	r0, [pc, #76]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f89a:	f7f4 ffc9 	bl	8004830 <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f89e:	68ee      	ldr	r6, [r5, #12]
 800f8a0:	e5b6      	b.n	800f410 <HAL_TIM_ConfigClockSource+0xc4>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800f8a2:	f241 515c 	movw	r1, #5468	; 0x155c
 800f8a6:	4810      	ldr	r0, [pc, #64]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f8a8:	f7f4 ffc2 	bl	8004830 <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 800f8ac:	68ee      	ldr	r6, [r5, #12]
 800f8ae:	e692      	b.n	800f5d6 <HAL_TIM_ConfigClockSource+0x28a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f8b0:	f241 515a 	movw	r1, #5466	; 0x155a
 800f8b4:	480c      	ldr	r0, [pc, #48]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f8b6:	f7f4 ffbb 	bl	8004830 <assert_failed>
 800f8ba:	e67e      	b.n	800f5ba <HAL_TIM_ConfigClockSource+0x26e>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800f8bc:	f241 5172 	movw	r1, #5490	; 0x1572
 800f8c0:	4809      	ldr	r0, [pc, #36]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f8c2:	f7f4 ffb5 	bl	8004830 <assert_failed>
 800f8c6:	e5e9      	b.n	800f49c <HAL_TIM_ConfigClockSource+0x150>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800f8c8:	f241 5157 	movw	r1, #5463	; 0x1557
 800f8cc:	4806      	ldr	r0, [pc, #24]	; (800f8e8 <HAL_TIM_ConfigClockSource+0x59c>)
 800f8ce:	f7f4 ffaf 	bl	8004830 <assert_failed>
 800f8d2:	e66d      	b.n	800f5b0 <HAL_TIM_ConfigClockSource+0x264>
 800f8d4:	40010000 	.word	0x40010000
 800f8d8:	40000400 	.word	0x40000400
 800f8dc:	40010400 	.word	0x40010400
 800f8e0:	40000800 	.word	0x40000800
 800f8e4:	40002000 	.word	0x40002000
 800f8e8:	0802c5d8 	.word	0x0802c5d8
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800f8ec:	4803      	ldr	r0, [pc, #12]	; (800f8fc <HAL_TIM_ConfigClockSource+0x5b0>)
 800f8ee:	f241 5150 	movw	r1, #5456	; 0x1550
 800f8f2:	f7f4 ff9d 	bl	8004830 <assert_failed>
  HAL_StatusTypeDef status = HAL_OK;
 800f8f6:	2000      	movs	r0, #0
 800f8f8:	e5f3      	b.n	800f4e2 <HAL_TIM_ConfigClockSource+0x196>
 800f8fa:	bf00      	nop
 800f8fc:	0802c5d8 	.word	0x0802c5d8

0800f900 <HAL_TIM_SlaveConfigSynchro>:
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f900:	6802      	ldr	r2, [r0, #0]
{
 800f902:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f904:	4b39      	ldr	r3, [pc, #228]	; (800f9ec <HAL_TIM_SlaveConfigSynchro+0xec>)
{
 800f906:	460d      	mov	r5, r1
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f908:	4f39      	ldr	r7, [pc, #228]	; (800f9f0 <HAL_TIM_SlaveConfigSynchro+0xf0>)
{
 800f90a:	4604      	mov	r4, r0
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f90c:	429a      	cmp	r2, r3
 800f90e:	bf18      	it	ne
 800f910:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 800f914:	4e37      	ldr	r6, [pc, #220]	; (800f9f4 <HAL_TIM_SlaveConfigSynchro+0xf4>)
 800f916:	4938      	ldr	r1, [pc, #224]	; (800f9f8 <HAL_TIM_SlaveConfigSynchro+0xf8>)
 800f918:	bf14      	ite	ne
 800f91a:	2301      	movne	r3, #1
 800f91c:	2300      	moveq	r3, #0
 800f91e:	42ba      	cmp	r2, r7
 800f920:	bf0c      	ite	eq
 800f922:	2300      	moveq	r3, #0
 800f924:	f003 0301 	andne.w	r3, r3, #1
 800f928:	42b2      	cmp	r2, r6
 800f92a:	bf0c      	ite	eq
 800f92c:	2300      	moveq	r3, #0
 800f92e:	f003 0301 	andne.w	r3, r3, #1
 800f932:	428a      	cmp	r2, r1
 800f934:	bf0c      	ite	eq
 800f936:	2300      	moveq	r3, #0
 800f938:	f003 0301 	andne.w	r3, r3, #1
 800f93c:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 800f940:	428a      	cmp	r2, r1
 800f942:	bf0c      	ite	eq
 800f944:	2300      	moveq	r3, #0
 800f946:	f003 0301 	andne.w	r3, r3, #1
 800f94a:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 800f94e:	428a      	cmp	r2, r1
 800f950:	bf0c      	ite	eq
 800f952:	2300      	moveq	r3, #0
 800f954:	f003 0301 	andne.w	r3, r3, #1
 800f958:	b113      	cbz	r3, 800f960 <HAL_TIM_SlaveConfigSynchro+0x60>
 800f95a:	4b28      	ldr	r3, [pc, #160]	; (800f9fc <HAL_TIM_SlaveConfigSynchro+0xfc>)
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d138      	bne.n	800f9d2 <HAL_TIM_SlaveConfigSynchro+0xd2>
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800f960:	682b      	ldr	r3, [r5, #0]
 800f962:	1f1a      	subs	r2, r3, #4
 800f964:	2a03      	cmp	r2, #3
 800f966:	d902      	bls.n	800f96e <HAL_TIM_SlaveConfigSynchro+0x6e>
 800f968:	f433 3380 	bics.w	r3, r3, #65536	; 0x10000
 800f96c:	d12b      	bne.n	800f9c6 <HAL_TIM_SlaveConfigSynchro+0xc6>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800f96e:	686b      	ldr	r3, [r5, #4]
 800f970:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800f974:	2b40      	cmp	r3, #64	; 0x40
 800f976:	d000      	beq.n	800f97a <HAL_TIM_SlaveConfigSynchro+0x7a>
 800f978:	bb8b      	cbnz	r3, 800f9de <HAL_TIM_SlaveConfigSynchro+0xde>
  __HAL_LOCK(htim);
 800f97a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d01f      	beq.n	800f9c2 <HAL_TIM_SlaveConfigSynchro+0xc2>
 800f982:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800f984:	2302      	movs	r3, #2
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f986:	4629      	mov	r1, r5
 800f988:	4620      	mov	r0, r4
  __HAL_LOCK(htim);
 800f98a:	f884 603c 	strb.w	r6, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800f98e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800f992:	f7ff f933 	bl	800ebfc <TIM_SlaveTimer_SetConfig>
 800f996:	b968      	cbnz	r0, 800f9b4 <HAL_TIM_SlaveConfigSynchro+0xb4>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800f998:	6823      	ldr	r3, [r4, #0]
 800f99a:	68da      	ldr	r2, [r3, #12]
 800f99c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800f9a0:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800f9a2:	68da      	ldr	r2, [r3, #12]
 800f9a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800f9a8:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 800f9aa:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800f9ae:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800f9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(htim);
 800f9b4:	2300      	movs	r3, #0
    return HAL_ERROR;
 800f9b6:	4630      	mov	r0, r6
    htim->State = HAL_TIM_STATE_READY;
 800f9b8:	f884 603d 	strb.w	r6, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800f9bc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800f9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800f9c2:	2002      	movs	r0, #2
}
 800f9c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
 800f9c6:	f241 51f7 	movw	r1, #5623	; 0x15f7
 800f9ca:	480d      	ldr	r0, [pc, #52]	; (800fa00 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f9cc:	f7f4 ff30 	bl	8004830 <assert_failed>
 800f9d0:	e7cd      	b.n	800f96e <HAL_TIM_SlaveConfigSynchro+0x6e>
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
 800f9d2:	f241 51f6 	movw	r1, #5622	; 0x15f6
 800f9d6:	480a      	ldr	r0, [pc, #40]	; (800fa00 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f9d8:	f7f4 ff2a 	bl	8004830 <assert_failed>
 800f9dc:	e7c0      	b.n	800f960 <HAL_TIM_SlaveConfigSynchro+0x60>
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
 800f9de:	f241 51f8 	movw	r1, #5624	; 0x15f8
 800f9e2:	4807      	ldr	r0, [pc, #28]	; (800fa00 <HAL_TIM_SlaveConfigSynchro+0x100>)
 800f9e4:	f7f4 ff24 	bl	8004830 <assert_failed>
 800f9e8:	e7c7      	b.n	800f97a <HAL_TIM_SlaveConfigSynchro+0x7a>
 800f9ea:	bf00      	nop
 800f9ec:	40010000 	.word	0x40010000
 800f9f0:	40000400 	.word	0x40000400
 800f9f4:	40000800 	.word	0x40000800
 800f9f8:	40000c00 	.word	0x40000c00
 800f9fc:	40001800 	.word	0x40001800
 800fa00:	0802c5d8 	.word	0x0802c5d8

0800fa04 <HAL_TIM_OC_DelayElapsedCallback>:
 800fa04:	4770      	bx	lr
 800fa06:	bf00      	nop

0800fa08 <TIM_DMACaptureCplt>:
{
 800fa08:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa0a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fa0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fa0e:	4283      	cmp	r3, r0
 800fa10:	d01e      	beq.n	800fa50 <TIM_DMACaptureCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fa12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fa14:	4283      	cmp	r3, r0
 800fa16:	d00b      	beq.n	800fa30 <TIM_DMACaptureCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fa18:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fa1a:	4283      	cmp	r3, r0
 800fa1c:	d027      	beq.n	800fa6e <TIM_DMACaptureCplt+0x66>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fa1e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fa20:	4283      	cmp	r3, r0
 800fa22:	d02f      	beq.n	800fa84 <TIM_DMACaptureCplt+0x7c>
  HAL_TIM_IC_CaptureCallback(htim);
 800fa24:	4620      	mov	r0, r4
 800fa26:	f7f3 fde5 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa2a:	2300      	movs	r3, #0
 800fa2c:	7723      	strb	r3, [r4, #28]
}
 800fa2e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fa30:	2202      	movs	r2, #2
 800fa32:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fa34:	69db      	ldr	r3, [r3, #28]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1f4      	bne.n	800fa24 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fa3a:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureCallback(htim);
 800fa3c:	4620      	mov	r0, r4
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fa3e:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fa42:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  HAL_TIM_IC_CaptureCallback(htim);
 800fa46:	f7f3 fdd5 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	7723      	strb	r3, [r4, #28]
}
 800fa4e:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fa50:	2201      	movs	r2, #1
 800fa52:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fa54:	69db      	ldr	r3, [r3, #28]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e4      	bne.n	800fa24 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fa5a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
  HAL_TIM_IC_CaptureCallback(htim);
 800fa5e:	4620      	mov	r0, r4
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fa60:	f884 2044 	strb.w	r2, [r4, #68]	; 0x44
  HAL_TIM_IC_CaptureCallback(htim);
 800fa64:	f7f3 fdc6 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fa68:	2300      	movs	r3, #0
 800fa6a:	7723      	strb	r3, [r4, #28]
}
 800fa6c:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fa6e:	2204      	movs	r2, #4
 800fa70:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fa72:	69db      	ldr	r3, [r3, #28]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d1d5      	bne.n	800fa24 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fa78:	2301      	movs	r3, #1
 800fa7a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fa7e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800fa82:	e7cf      	b.n	800fa24 <TIM_DMACaptureCplt+0x1c>
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fa84:	2208      	movs	r2, #8
 800fa86:	7722      	strb	r2, [r4, #28]
    if (hdma->Init.Mode == DMA_NORMAL)
 800fa88:	69db      	ldr	r3, [r3, #28]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d1ca      	bne.n	800fa24 <TIM_DMACaptureCplt+0x1c>
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fa8e:	2301      	movs	r3, #1
 800fa90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fa94:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
 800fa98:	e7c4      	b.n	800fa24 <TIM_DMACaptureCplt+0x1c>
 800fa9a:	bf00      	nop

0800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>:
 800fa9c:	4770      	bx	lr
 800fa9e:	bf00      	nop

0800faa0 <TIM_DMACaptureHalfCplt>:
{
 800faa0:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800faa2:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800faa4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800faa6:	4283      	cmp	r3, r0
 800faa8:	d016      	beq.n	800fad8 <TIM_DMACaptureHalfCplt+0x38>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800faaa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800faac:	4283      	cmp	r3, r0
 800faae:	d00b      	beq.n	800fac8 <TIM_DMACaptureHalfCplt+0x28>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fab0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fab2:	4283      	cmp	r3, r0
 800fab4:	d018      	beq.n	800fae8 <TIM_DMACaptureHalfCplt+0x48>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fab6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fab8:	4283      	cmp	r3, r0
 800faba:	d01d      	beq.n	800faf8 <TIM_DMACaptureHalfCplt+0x58>
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fabc:	4620      	mov	r0, r4
 800fabe:	f7ff ffed 	bl	800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fac2:	2300      	movs	r3, #0
 800fac4:	7723      	strb	r3, [r4, #28]
}
 800fac6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fac8:	2302      	movs	r3, #2
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800faca:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800facc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800face:	f7ff ffe5 	bl	800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fad2:	2300      	movs	r3, #0
 800fad4:	7723      	strb	r3, [r4, #28]
}
 800fad6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fad8:	2301      	movs	r3, #1
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fada:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fadc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fade:	f7ff ffdd 	bl	800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fae2:	2300      	movs	r3, #0
 800fae4:	7723      	strb	r3, [r4, #28]
}
 800fae6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fae8:	2304      	movs	r3, #4
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800faea:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800faec:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800faee:	f7ff ffd5 	bl	800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800faf2:	2300      	movs	r3, #0
 800faf4:	7723      	strb	r3, [r4, #28]
}
 800faf6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800faf8:	2308      	movs	r3, #8
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fafa:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fafc:	7723      	strb	r3, [r4, #28]
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800fafe:	f7ff ffcd 	bl	800fa9c <HAL_TIM_IC_CaptureHalfCpltCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fb02:	2300      	movs	r3, #0
 800fb04:	7723      	strb	r3, [r4, #28]
}
 800fb06:	bd10      	pop	{r4, pc}

0800fb08 <HAL_TIM_PWM_PulseFinishedCallback>:
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop

0800fb0c <HAL_TIM_TriggerCallback>:
 800fb0c:	4770      	bx	lr
 800fb0e:	bf00      	nop

0800fb10 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb10:	6803      	ldr	r3, [r0, #0]
 800fb12:	691a      	ldr	r2, [r3, #16]
 800fb14:	0791      	lsls	r1, r2, #30
{
 800fb16:	b510      	push	{r4, lr}
 800fb18:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800fb1a:	d502      	bpl.n	800fb22 <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800fb1c:	68da      	ldr	r2, [r3, #12]
 800fb1e:	0792      	lsls	r2, r2, #30
 800fb20:	d468      	bmi.n	800fbf4 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fb22:	691a      	ldr	r2, [r3, #16]
 800fb24:	0752      	lsls	r2, r2, #29
 800fb26:	d502      	bpl.n	800fb2e <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800fb28:	68da      	ldr	r2, [r3, #12]
 800fb2a:	0750      	lsls	r0, r2, #29
 800fb2c:	d44f      	bmi.n	800fbce <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fb2e:	691a      	ldr	r2, [r3, #16]
 800fb30:	0711      	lsls	r1, r2, #28
 800fb32:	d502      	bpl.n	800fb3a <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800fb34:	68da      	ldr	r2, [r3, #12]
 800fb36:	0712      	lsls	r2, r2, #28
 800fb38:	d437      	bmi.n	800fbaa <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fb3a:	691a      	ldr	r2, [r3, #16]
 800fb3c:	06d0      	lsls	r0, r2, #27
 800fb3e:	d502      	bpl.n	800fb46 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800fb40:	68da      	ldr	r2, [r3, #12]
 800fb42:	06d1      	lsls	r1, r2, #27
 800fb44:	d41e      	bmi.n	800fb84 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fb46:	691a      	ldr	r2, [r3, #16]
 800fb48:	07d2      	lsls	r2, r2, #31
 800fb4a:	d502      	bpl.n	800fb52 <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800fb4c:	68da      	ldr	r2, [r3, #12]
 800fb4e:	07d0      	lsls	r0, r2, #31
 800fb50:	d469      	bmi.n	800fc26 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fb52:	691a      	ldr	r2, [r3, #16]
 800fb54:	0611      	lsls	r1, r2, #24
 800fb56:	d502      	bpl.n	800fb5e <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fb58:	68da      	ldr	r2, [r3, #12]
 800fb5a:	0612      	lsls	r2, r2, #24
 800fb5c:	d46b      	bmi.n	800fc36 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fb5e:	691a      	ldr	r2, [r3, #16]
 800fb60:	05d0      	lsls	r0, r2, #23
 800fb62:	d502      	bpl.n	800fb6a <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800fb64:	68da      	ldr	r2, [r3, #12]
 800fb66:	0611      	lsls	r1, r2, #24
 800fb68:	d46d      	bmi.n	800fc46 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fb6a:	691a      	ldr	r2, [r3, #16]
 800fb6c:	0652      	lsls	r2, r2, #25
 800fb6e:	d502      	bpl.n	800fb76 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800fb70:	68da      	ldr	r2, [r3, #12]
 800fb72:	0650      	lsls	r0, r2, #25
 800fb74:	d46f      	bmi.n	800fc56 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fb76:	691a      	ldr	r2, [r3, #16]
 800fb78:	0691      	lsls	r1, r2, #26
 800fb7a:	d502      	bpl.n	800fb82 <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800fb7c:	68da      	ldr	r2, [r3, #12]
 800fb7e:	0692      	lsls	r2, r2, #26
 800fb80:	d449      	bmi.n	800fc16 <HAL_TIM_IRQHandler+0x106>
}
 800fb82:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb84:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb88:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800fb8a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800fb8c:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fb8e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800fb90:	69db      	ldr	r3, [r3, #28]
 800fb92:	f413 7f40 	tst.w	r3, #768	; 0x300
 800fb96:	d16f      	bne.n	800fc78 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fb98:	f7ff ff34 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fb9c:	4620      	mov	r0, r4
 800fb9e:	f7ff ffb3 	bl	800fb08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fba2:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800fba4:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fba6:	7722      	strb	r2, [r4, #28]
 800fba8:	e7cd      	b.n	800fb46 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbaa:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbae:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800fbb0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800fbb2:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fbb4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800fbb6:	69db      	ldr	r3, [r3, #28]
 800fbb8:	079b      	lsls	r3, r3, #30
 800fbba:	d15a      	bne.n	800fc72 <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbbc:	f7ff ff22 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbc0:	4620      	mov	r0, r4
 800fbc2:	f7ff ffa1 	bl	800fb08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbc6:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800fbc8:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbca:	7722      	strb	r2, [r4, #28]
 800fbcc:	e7b5      	b.n	800fb3a <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbce:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbd2:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
 800fbd4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800fbd6:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fbd8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800fbda:	699b      	ldr	r3, [r3, #24]
 800fbdc:	f413 7f40 	tst.w	r3, #768	; 0x300
 800fbe0:	d144      	bne.n	800fc6c <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800fbe2:	f7ff ff0f 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fbe6:	4620      	mov	r0, r4
 800fbe8:	f7ff ff8e 	bl	800fb08 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbec:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800fbee:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fbf0:	7722      	strb	r2, [r4, #28]
 800fbf2:	e79c      	b.n	800fb2e <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fbf4:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbf8:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800fbfa:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fbfc:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800fbfe:	699b      	ldr	r3, [r3, #24]
 800fc00:	0799      	lsls	r1, r3, #30
 800fc02:	d130      	bne.n	800fc66 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800fc04:	f7ff fefe 	bl	800fa04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800fc08:	4620      	mov	r0, r4
 800fc0a:	f7ff ff7d 	bl	800fb08 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc0e:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800fc10:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fc12:	7722      	strb	r2, [r4, #28]
 800fc14:	e785      	b.n	800fb22 <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc16:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800fc1a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800fc1c:	611a      	str	r2, [r3, #16]
}
 800fc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 800fc22:	f001 be53 	b.w	80118cc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc26:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc2a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800fc2c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800fc2e:	f7f3 fd57 	bl	80036e0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800fc32:	6823      	ldr	r3, [r4, #0]
 800fc34:	e78d      	b.n	800fb52 <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc36:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800fc3a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800fc3c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800fc3e:	f001 fe47 	bl	80118d0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800fc42:	6823      	ldr	r3, [r4, #0]
 800fc44:	e78b      	b.n	800fb5e <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc46:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
 800fc4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800fc4c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800fc4e:	f001 fe41 	bl	80118d4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800fc52:	6823      	ldr	r3, [r4, #0]
 800fc54:	e789      	b.n	800fb6a <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc56:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800fc5a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800fc5c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800fc5e:	f7ff ff55 	bl	800fb0c <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800fc62:	6823      	ldr	r3, [r4, #0]
 800fc64:	e787      	b.n	800fb76 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
 800fc66:	f7f3 fcc5 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800fc6a:	e7d0      	b.n	800fc0e <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
 800fc6c:	f7f3 fcc2 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800fc70:	e7bc      	b.n	800fbec <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
 800fc72:	f7f3 fcbf 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800fc76:	e7a6      	b.n	800fbc6 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
 800fc78:	f7f3 fcbc 	bl	80035f4 <HAL_TIM_IC_CaptureCallback>
 800fc7c:	e791      	b.n	800fba2 <HAL_TIM_IRQHandler+0x92>
 800fc7e:	bf00      	nop

0800fc80 <HAL_TIM_ErrorCallback>:
 800fc80:	4770      	bx	lr
 800fc82:	bf00      	nop

0800fc84 <TIM_DMAError>:
{
 800fc84:	b510      	push	{r4, lr}
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc86:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800fc88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fc8a:	4283      	cmp	r3, r0
 800fc8c:	d01c      	beq.n	800fcc8 <TIM_DMAError+0x44>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800fc8e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800fc90:	4283      	cmp	r3, r0
 800fc92:	d00e      	beq.n	800fcb2 <TIM_DMAError+0x2e>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800fc94:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800fc96:	4283      	cmp	r3, r0
 800fc98:	d020      	beq.n	800fcdc <TIM_DMAError+0x58>
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800fc9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800fc9c:	4283      	cmp	r3, r0
 800fc9e:	d028      	beq.n	800fcf2 <TIM_DMAError+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 800fca0:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800fca2:	4620      	mov	r0, r4
    htim->State = HAL_TIM_STATE_READY;
 800fca4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_TIM_ErrorCallback(htim);
 800fca8:	f7ff ffea 	bl	800fc80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcac:	2300      	movs	r3, #0
 800fcae:	7723      	strb	r3, [r4, #28]
}
 800fcb0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fcb2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcb4:	2202      	movs	r2, #2
  HAL_TIM_ErrorCallback(htim);
 800fcb6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800fcb8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800fcbc:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800fcbe:	f7ff ffdf 	bl	800fc80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcc2:	2300      	movs	r3, #0
 800fcc4:	7723      	strb	r3, [r4, #28]
}
 800fcc6:	bd10      	pop	{r4, pc}
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fcc8:	2301      	movs	r3, #1
  HAL_TIM_ErrorCallback(htim);
 800fcca:	4620      	mov	r0, r4
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800fccc:	7723      	strb	r3, [r4, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800fcce:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  HAL_TIM_ErrorCallback(htim);
 800fcd2:	f7ff ffd5 	bl	800fc80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	7723      	strb	r3, [r4, #28]
}
 800fcda:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fcdc:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fcde:	2204      	movs	r2, #4
  HAL_TIM_ErrorCallback(htim);
 800fce0:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800fce2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800fce6:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800fce8:	f7ff ffca 	bl	800fc80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fcec:	2300      	movs	r3, #0
 800fcee:	7723      	strb	r3, [r4, #28]
}
 800fcf0:	bd10      	pop	{r4, pc}
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fcf2:	2301      	movs	r3, #1
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcf4:	2208      	movs	r2, #8
  HAL_TIM_ErrorCallback(htim);
 800fcf6:	4620      	mov	r0, r4
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800fcf8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800fcfc:	7722      	strb	r2, [r4, #28]
  HAL_TIM_ErrorCallback(htim);
 800fcfe:	f7ff ffbf 	bl	800fc80 <HAL_TIM_ErrorCallback>
  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800fd02:	2300      	movs	r3, #0
 800fd04:	7723      	strb	r3, [r4, #28]
}
 800fd06:	bd10      	pop	{r4, pc}

0800fd08 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd08:	4a3c      	ldr	r2, [pc, #240]	; (800fdfc <TIM_Base_SetConfig+0xf4>)
 800fd0a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 800fd0e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd10:	eba0 0202 	sub.w	r2, r0, r2
 800fd14:	fab2 f282 	clz	r2, r2
{
 800fd18:	b470      	push	{r4, r5, r6}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd1a:	ea4f 1252 	mov.w	r2, r2, lsr #5
 800fd1e:	d010      	beq.n	800fd42 <TIM_Base_SetConfig+0x3a>
 800fd20:	b97a      	cbnz	r2, 800fd42 <TIM_Base_SetConfig+0x3a>
 800fd22:	4d37      	ldr	r5, [pc, #220]	; (800fe00 <TIM_Base_SetConfig+0xf8>)
 800fd24:	4c37      	ldr	r4, [pc, #220]	; (800fe04 <TIM_Base_SetConfig+0xfc>)
 800fd26:	42a0      	cmp	r0, r4
 800fd28:	bf18      	it	ne
 800fd2a:	42a8      	cmpne	r0, r5
 800fd2c:	d12b      	bne.n	800fd86 <TIM_Base_SetConfig+0x7e>
 800fd2e:	4c36      	ldr	r4, [pc, #216]	; (800fe08 <TIM_Base_SetConfig+0x100>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800fd34:	684d      	ldr	r5, [r1, #4]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd36:	1b04      	subs	r4, r0, r4
    tmpcr1 |= Structure->CounterMode;
 800fd38:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd3a:	fab4 f484 	clz	r4, r4
 800fd3e:	0964      	lsrs	r4, r4, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd40:	e008      	b.n	800fd54 <TIM_Base_SetConfig+0x4c>
    tmpcr1 |= Structure->CounterMode;
 800fd42:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fd44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800fd48:	4323      	orrs	r3, r4
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd4a:	4c2f      	ldr	r4, [pc, #188]	; (800fe08 <TIM_Base_SetConfig+0x100>)
 800fd4c:	1b04      	subs	r4, r0, r4
 800fd4e:	fab4 f484 	clz	r4, r4
 800fd52:	0964      	lsrs	r4, r4, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd54:	68cd      	ldr	r5, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800fd56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800fd5a:	432b      	orrs	r3, r5
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fd5c:	694d      	ldr	r5, [r1, #20]
 800fd5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fd62:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800fd64:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fd66:	688b      	ldr	r3, [r1, #8]
 800fd68:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800fd6a:	680b      	ldr	r3, [r1, #0]
 800fd6c:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fd6e:	b922      	cbnz	r2, 800fd7a <TIM_Base_SetConfig+0x72>
 800fd70:	b91c      	cbnz	r4, 800fd7a <TIM_Base_SetConfig+0x72>
  TIMx->EGR = TIM_EGR_UG;
 800fd72:	2301      	movs	r3, #1
}
 800fd74:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800fd76:	6143      	str	r3, [r0, #20]
}
 800fd78:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 800fd7a:	690b      	ldr	r3, [r1, #16]
 800fd7c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800fd7e:	2301      	movs	r3, #1
}
 800fd80:	bc70      	pop	{r4, r5, r6}
  TIMx->EGR = TIM_EGR_UG;
 800fd82:	6143      	str	r3, [r0, #20]
}
 800fd84:	4770      	bx	lr
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fd86:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800fd8a:	42a0      	cmp	r0, r4
 800fd8c:	d024      	beq.n	800fdd8 <TIM_Base_SetConfig+0xd0>
 800fd8e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 800fd92:	42a0      	cmp	r0, r4
 800fd94:	d020      	beq.n	800fdd8 <TIM_Base_SetConfig+0xd0>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fd96:	4c1d      	ldr	r4, [pc, #116]	; (800fe0c <TIM_Base_SetConfig+0x104>)
 800fd98:	4d1d      	ldr	r5, [pc, #116]	; (800fe10 <TIM_Base_SetConfig+0x108>)
 800fd9a:	42a0      	cmp	r0, r4
 800fd9c:	bf18      	it	ne
 800fd9e:	42a8      	cmpne	r0, r5
 800fda0:	bf0c      	ite	eq
 800fda2:	2401      	moveq	r4, #1
 800fda4:	2400      	movne	r4, #0
 800fda6:	d027      	beq.n	800fdf8 <TIM_Base_SetConfig+0xf0>
 800fda8:	4e1a      	ldr	r6, [pc, #104]	; (800fe14 <TIM_Base_SetConfig+0x10c>)
 800fdaa:	f5a5 3594 	sub.w	r5, r5, #75776	; 0x12800
 800fdae:	42a8      	cmp	r0, r5
 800fdb0:	bf18      	it	ne
 800fdb2:	42b0      	cmpne	r0, r6
 800fdb4:	d0ce      	beq.n	800fd54 <TIM_Base_SetConfig+0x4c>
 800fdb6:	4c18      	ldr	r4, [pc, #96]	; (800fe18 <TIM_Base_SetConfig+0x110>)
 800fdb8:	42a0      	cmp	r0, r4
 800fdba:	d01d      	beq.n	800fdf8 <TIM_Base_SetConfig+0xf0>
 800fdbc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800fdc0:	42a0      	cmp	r0, r4
 800fdc2:	d019      	beq.n	800fdf8 <TIM_Base_SetConfig+0xf0>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdc4:	694d      	ldr	r5, [r1, #20]
 800fdc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdca:	688c      	ldr	r4, [r1, #8]
  TIMx->PSC = Structure->Prescaler;
 800fdcc:	680a      	ldr	r2, [r1, #0]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800fdce:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800fdd0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800fdd2:	62c4      	str	r4, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800fdd4:	6282      	str	r2, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800fdd6:	e7cc      	b.n	800fd72 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 800fdd8:	684d      	ldr	r5, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800fdda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fdde:	4c0a      	ldr	r4, [pc, #40]	; (800fe08 <TIM_Base_SetConfig+0x100>)
    tmpcr1 |= Structure->CounterMode;
 800fde0:	432b      	orrs	r3, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fde2:	4d0e      	ldr	r5, [pc, #56]	; (800fe1c <TIM_Base_SetConfig+0x114>)
 800fde4:	1b04      	subs	r4, r0, r4
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fde6:	42a8      	cmp	r0, r5
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800fde8:	fab4 f484 	clz	r4, r4
 800fdec:	ea4f 1454 	mov.w	r4, r4, lsr #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800fdf0:	d0b0      	beq.n	800fd54 <TIM_Base_SetConfig+0x4c>
 800fdf2:	2c00      	cmp	r4, #0
 800fdf4:	d1ae      	bne.n	800fd54 <TIM_Base_SetConfig+0x4c>
 800fdf6:	e7ce      	b.n	800fd96 <TIM_Base_SetConfig+0x8e>
 800fdf8:	2400      	movs	r4, #0
 800fdfa:	e7ab      	b.n	800fd54 <TIM_Base_SetConfig+0x4c>
 800fdfc:	40010000 	.word	0x40010000
 800fe00:	40000400 	.word	0x40000400
 800fe04:	40000800 	.word	0x40000800
 800fe08:	40010400 	.word	0x40010400
 800fe0c:	40014400 	.word	0x40014400
 800fe10:	40014000 	.word	0x40014000
 800fe14:	40014800 	.word	0x40014800
 800fe18:	40001c00 	.word	0x40001c00
 800fe1c:	40000c00 	.word	0x40000c00

0800fe20 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 800fe20:	2800      	cmp	r0, #0
 800fe22:	f000 80b8 	beq.w	800ff96 <HAL_TIM_Base_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe26:	6802      	ldr	r2, [r0, #0]
 800fe28:	4b5f      	ldr	r3, [pc, #380]	; (800ffa8 <HAL_TIM_Base_Init+0x188>)
 800fe2a:	4960      	ldr	r1, [pc, #384]	; (800ffac <HAL_TIM_Base_Init+0x18c>)
 800fe2c:	429a      	cmp	r2, r3
 800fe2e:	bf18      	it	ne
 800fe30:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800fe34:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800fe36:	bf14      	ite	ne
 800fe38:	2301      	movne	r3, #1
 800fe3a:	2300      	moveq	r3, #0
 800fe3c:	4604      	mov	r4, r0
 800fe3e:	485c      	ldr	r0, [pc, #368]	; (800ffb0 <HAL_TIM_Base_Init+0x190>)
 800fe40:	4282      	cmp	r2, r0
 800fe42:	bf0c      	ite	eq
 800fe44:	2300      	moveq	r3, #0
 800fe46:	f003 0301 	andne.w	r3, r3, #1
 800fe4a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fe4e:	428a      	cmp	r2, r1
 800fe50:	bf0c      	ite	eq
 800fe52:	2300      	moveq	r3, #0
 800fe54:	f003 0301 	andne.w	r3, r3, #1
 800fe58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe5c:	4282      	cmp	r2, r0
 800fe5e:	bf0c      	ite	eq
 800fe60:	2300      	moveq	r3, #0
 800fe62:	f003 0301 	andne.w	r3, r3, #1
 800fe66:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fe6a:	428a      	cmp	r2, r1
 800fe6c:	bf0c      	ite	eq
 800fe6e:	2300      	moveq	r3, #0
 800fe70:	f003 0301 	andne.w	r3, r3, #1
 800fe74:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 800fe78:	4282      	cmp	r2, r0
 800fe7a:	bf0c      	ite	eq
 800fe7c:	2300      	moveq	r3, #0
 800fe7e:	f003 0301 	andne.w	r3, r3, #1
 800fe82:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 800fe86:	428a      	cmp	r2, r1
 800fe88:	bf0c      	ite	eq
 800fe8a:	2300      	moveq	r3, #0
 800fe8c:	f003 0301 	andne.w	r3, r3, #1
 800fe90:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 800fe94:	4282      	cmp	r2, r0
 800fe96:	bf0c      	ite	eq
 800fe98:	2300      	moveq	r3, #0
 800fe9a:	f003 0301 	andne.w	r3, r3, #1
 800fe9e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800fea2:	428a      	cmp	r2, r1
 800fea4:	bf0c      	ite	eq
 800fea6:	2300      	moveq	r3, #0
 800fea8:	f003 0301 	andne.w	r3, r3, #1
 800feac:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 800feb0:	4282      	cmp	r2, r0
 800feb2:	bf0c      	ite	eq
 800feb4:	2300      	moveq	r3, #0
 800feb6:	f003 0301 	andne.w	r3, r3, #1
 800feba:	428a      	cmp	r2, r1
 800febc:	bf0c      	ite	eq
 800febe:	2300      	moveq	r3, #0
 800fec0:	f003 0301 	andne.w	r3, r3, #1
 800fec4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800fec8:	428a      	cmp	r2, r1
 800feca:	bf0c      	ite	eq
 800fecc:	2300      	moveq	r3, #0
 800fece:	f003 0301 	andne.w	r3, r3, #1
 800fed2:	b113      	cbz	r3, 800feda <HAL_TIM_Base_Init+0xba>
 800fed4:	4b37      	ldr	r3, [pc, #220]	; (800ffb4 <HAL_TIM_Base_Init+0x194>)
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d15f      	bne.n	800ff9a <HAL_TIM_Base_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800feda:	68a3      	ldr	r3, [r4, #8]
 800fedc:	f023 0210 	bic.w	r2, r3, #16
 800fee0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800fee4:	2920      	cmp	r1, #32
 800fee6:	bf18      	it	ne
 800fee8:	2a00      	cmpne	r2, #0
 800feea:	d001      	beq.n	800fef0 <HAL_TIM_Base_Init+0xd0>
 800feec:	2b40      	cmp	r3, #64	; 0x40
 800feee:	d14c      	bne.n	800ff8a <HAL_TIM_Base_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800fef0:	6923      	ldr	r3, [r4, #16]
 800fef2:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 800fef6:	d002      	beq.n	800fefe <HAL_TIM_Base_Init+0xde>
 800fef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fefc:	d12b      	bne.n	800ff56 <HAL_TIM_Base_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800fefe:	69a3      	ldr	r3, [r4, #24]
 800ff00:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ff04:	d130      	bne.n	800ff68 <HAL_TIM_Base_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ff06:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ff0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ff0e:	b3b3      	cbz	r3, 800ff7e <HAL_TIM_Base_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff10:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 800ff12:	2302      	movs	r3, #2
 800ff14:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ff18:	f851 0b04 	ldr.w	r0, [r1], #4
 800ff1c:	f7ff fef4 	bl	800fd08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff20:	2301      	movs	r3, #1
  return HAL_OK;
 800ff22:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ff24:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff28:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800ff2c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800ff30:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800ff34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 800ff38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ff3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ff40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800ff44:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ff48:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 800ff4c:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ff50:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800ff54:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 800ff56:	f44f 718c 	mov.w	r1, #280	; 0x118
 800ff5a:	4817      	ldr	r0, [pc, #92]	; (800ffb8 <HAL_TIM_Base_Init+0x198>)
 800ff5c:	f7f4 fc68 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800ff60:	69a3      	ldr	r3, [r4, #24]
 800ff62:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 800ff66:	d0ce      	beq.n	800ff06 <HAL_TIM_Base_Init+0xe6>
 800ff68:	f240 1119 	movw	r1, #281	; 0x119
 800ff6c:	4812      	ldr	r0, [pc, #72]	; (800ffb8 <HAL_TIM_Base_Init+0x198>)
 800ff6e:	f7f4 fc5f 	bl	8004830 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ff72:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800ff76:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1c8      	bne.n	800ff10 <HAL_TIM_Base_Init+0xf0>
    HAL_TIM_Base_MspInit(htim);
 800ff7e:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 800ff80:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800ff84:	f7f6 f9b0 	bl	80062e8 <HAL_TIM_Base_MspInit>
 800ff88:	e7c2      	b.n	800ff10 <HAL_TIM_Base_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 800ff8a:	f240 1117 	movw	r1, #279	; 0x117
 800ff8e:	480a      	ldr	r0, [pc, #40]	; (800ffb8 <HAL_TIM_Base_Init+0x198>)
 800ff90:	f7f4 fc4e 	bl	8004830 <assert_failed>
 800ff94:	e7ac      	b.n	800fef0 <HAL_TIM_Base_Init+0xd0>
    return HAL_ERROR;
 800ff96:	2001      	movs	r0, #1
}
 800ff98:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ff9a:	f44f 718b 	mov.w	r1, #278	; 0x116
 800ff9e:	4806      	ldr	r0, [pc, #24]	; (800ffb8 <HAL_TIM_Base_Init+0x198>)
 800ffa0:	f7f4 fc46 	bl	8004830 <assert_failed>
 800ffa4:	e799      	b.n	800feda <HAL_TIM_Base_Init+0xba>
 800ffa6:	bf00      	nop
 800ffa8:	40010000 	.word	0x40010000
 800ffac:	40000800 	.word	0x40000800
 800ffb0:	40000400 	.word	0x40000400
 800ffb4:	40002000 	.word	0x40002000
 800ffb8:	0802c5d8 	.word	0x0802c5d8

0800ffbc <HAL_TIM_OC_Init>:
  if (htim == NULL)
 800ffbc:	2800      	cmp	r0, #0
 800ffbe:	f000 80b8 	beq.w	8010132 <HAL_TIM_OC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffc2:	6802      	ldr	r2, [r0, #0]
 800ffc4:	4b5f      	ldr	r3, [pc, #380]	; (8010144 <HAL_TIM_OC_Init+0x188>)
 800ffc6:	4960      	ldr	r1, [pc, #384]	; (8010148 <HAL_TIM_OC_Init+0x18c>)
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	bf18      	it	ne
 800ffcc:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 800ffd0:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800ffd2:	bf14      	ite	ne
 800ffd4:	2301      	movne	r3, #1
 800ffd6:	2300      	moveq	r3, #0
 800ffd8:	4604      	mov	r4, r0
 800ffda:	485c      	ldr	r0, [pc, #368]	; (801014c <HAL_TIM_OC_Init+0x190>)
 800ffdc:	4282      	cmp	r2, r0
 800ffde:	bf0c      	ite	eq
 800ffe0:	2300      	moveq	r3, #0
 800ffe2:	f003 0301 	andne.w	r3, r3, #1
 800ffe6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800ffea:	428a      	cmp	r2, r1
 800ffec:	bf0c      	ite	eq
 800ffee:	2300      	moveq	r3, #0
 800fff0:	f003 0301 	andne.w	r3, r3, #1
 800fff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fff8:	4282      	cmp	r2, r0
 800fffa:	bf0c      	ite	eq
 800fffc:	2300      	moveq	r3, #0
 800fffe:	f003 0301 	andne.w	r3, r3, #1
 8010002:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010006:	428a      	cmp	r2, r1
 8010008:	bf0c      	ite	eq
 801000a:	2300      	moveq	r3, #0
 801000c:	f003 0301 	andne.w	r3, r3, #1
 8010010:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 8010014:	4282      	cmp	r2, r0
 8010016:	bf0c      	ite	eq
 8010018:	2300      	moveq	r3, #0
 801001a:	f003 0301 	andne.w	r3, r3, #1
 801001e:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 8010022:	428a      	cmp	r2, r1
 8010024:	bf0c      	ite	eq
 8010026:	2300      	moveq	r3, #0
 8010028:	f003 0301 	andne.w	r3, r3, #1
 801002c:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010030:	4282      	cmp	r2, r0
 8010032:	bf0c      	ite	eq
 8010034:	2300      	moveq	r3, #0
 8010036:	f003 0301 	andne.w	r3, r3, #1
 801003a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801003e:	428a      	cmp	r2, r1
 8010040:	bf0c      	ite	eq
 8010042:	2300      	moveq	r3, #0
 8010044:	f003 0301 	andne.w	r3, r3, #1
 8010048:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 801004c:	4282      	cmp	r2, r0
 801004e:	bf0c      	ite	eq
 8010050:	2300      	moveq	r3, #0
 8010052:	f003 0301 	andne.w	r3, r3, #1
 8010056:	428a      	cmp	r2, r1
 8010058:	bf0c      	ite	eq
 801005a:	2300      	moveq	r3, #0
 801005c:	f003 0301 	andne.w	r3, r3, #1
 8010060:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010064:	428a      	cmp	r2, r1
 8010066:	bf0c      	ite	eq
 8010068:	2300      	moveq	r3, #0
 801006a:	f003 0301 	andne.w	r3, r3, #1
 801006e:	b113      	cbz	r3, 8010076 <HAL_TIM_OC_Init+0xba>
 8010070:	4b37      	ldr	r3, [pc, #220]	; (8010150 <HAL_TIM_OC_Init+0x194>)
 8010072:	429a      	cmp	r2, r3
 8010074:	d15f      	bne.n	8010136 <HAL_TIM_OC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010076:	68a3      	ldr	r3, [r4, #8]
 8010078:	f023 0210 	bic.w	r2, r3, #16
 801007c:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8010080:	2920      	cmp	r1, #32
 8010082:	bf18      	it	ne
 8010084:	2a00      	cmpne	r2, #0
 8010086:	d001      	beq.n	801008c <HAL_TIM_OC_Init+0xd0>
 8010088:	2b40      	cmp	r3, #64	; 0x40
 801008a:	d14c      	bne.n	8010126 <HAL_TIM_OC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801008c:	6923      	ldr	r3, [r4, #16]
 801008e:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010092:	d002      	beq.n	801009a <HAL_TIM_OC_Init+0xde>
 8010094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010098:	d12b      	bne.n	80100f2 <HAL_TIM_OC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801009a:	69a3      	ldr	r3, [r4, #24]
 801009c:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80100a0:	d130      	bne.n	8010104 <HAL_TIM_OC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80100a2:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80100a6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80100aa:	b3b3      	cbz	r3, 801011a <HAL_TIM_OC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80100ac:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80100ae:	2302      	movs	r3, #2
 80100b0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80100b4:	f851 0b04 	ldr.w	r0, [r1], #4
 80100b8:	f7ff fe26 	bl	800fd08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100bc:	2301      	movs	r3, #1
  return HAL_OK;
 80100be:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80100c0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100c4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80100c8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80100cc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80100d0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80100d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80100d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80100dc:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80100e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80100e4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80100e8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80100ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80100f0:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80100f2:	f240 2197 	movw	r1, #663	; 0x297
 80100f6:	4817      	ldr	r0, [pc, #92]	; (8010154 <HAL_TIM_OC_Init+0x198>)
 80100f8:	f7f4 fb9a 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80100fc:	69a3      	ldr	r3, [r4, #24]
 80100fe:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 8010102:	d0ce      	beq.n	80100a2 <HAL_TIM_OC_Init+0xe6>
 8010104:	f44f 7126 	mov.w	r1, #664	; 0x298
 8010108:	4812      	ldr	r0, [pc, #72]	; (8010154 <HAL_TIM_OC_Init+0x198>)
 801010a:	f7f4 fb91 	bl	8004830 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 801010e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010112:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010116:	2b00      	cmp	r3, #0
 8010118:	d1c8      	bne.n	80100ac <HAL_TIM_OC_Init+0xf0>
    HAL_TIM_OC_MspInit(htim);
 801011a:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 801011c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_OC_MspInit(htim);
 8010120:	f7ff f90e 	bl	800f340 <HAL_TIM_OC_MspInit>
 8010124:	e7c2      	b.n	80100ac <HAL_TIM_OC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010126:	f240 2196 	movw	r1, #662	; 0x296
 801012a:	480a      	ldr	r0, [pc, #40]	; (8010154 <HAL_TIM_OC_Init+0x198>)
 801012c:	f7f4 fb80 	bl	8004830 <assert_failed>
 8010130:	e7ac      	b.n	801008c <HAL_TIM_OC_Init+0xd0>
    return HAL_ERROR;
 8010132:	2001      	movs	r0, #1
}
 8010134:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8010136:	f240 2195 	movw	r1, #661	; 0x295
 801013a:	4806      	ldr	r0, [pc, #24]	; (8010154 <HAL_TIM_OC_Init+0x198>)
 801013c:	f7f4 fb78 	bl	8004830 <assert_failed>
 8010140:	e799      	b.n	8010076 <HAL_TIM_OC_Init+0xba>
 8010142:	bf00      	nop
 8010144:	40010000 	.word	0x40010000
 8010148:	40000800 	.word	0x40000800
 801014c:	40000400 	.word	0x40000400
 8010150:	40002000 	.word	0x40002000
 8010154:	0802c5d8 	.word	0x0802c5d8

08010158 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8010158:	2800      	cmp	r0, #0
 801015a:	f000 80b8 	beq.w	80102ce <HAL_TIM_PWM_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801015e:	6802      	ldr	r2, [r0, #0]
 8010160:	4b5f      	ldr	r3, [pc, #380]	; (80102e0 <HAL_TIM_PWM_Init+0x188>)
 8010162:	4960      	ldr	r1, [pc, #384]	; (80102e4 <HAL_TIM_PWM_Init+0x18c>)
 8010164:	429a      	cmp	r2, r3
 8010166:	bf18      	it	ne
 8010168:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 801016c:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801016e:	bf14      	ite	ne
 8010170:	2301      	movne	r3, #1
 8010172:	2300      	moveq	r3, #0
 8010174:	4604      	mov	r4, r0
 8010176:	485c      	ldr	r0, [pc, #368]	; (80102e8 <HAL_TIM_PWM_Init+0x190>)
 8010178:	4282      	cmp	r2, r0
 801017a:	bf0c      	ite	eq
 801017c:	2300      	moveq	r3, #0
 801017e:	f003 0301 	andne.w	r3, r3, #1
 8010182:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010186:	428a      	cmp	r2, r1
 8010188:	bf0c      	ite	eq
 801018a:	2300      	moveq	r3, #0
 801018c:	f003 0301 	andne.w	r3, r3, #1
 8010190:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010194:	4282      	cmp	r2, r0
 8010196:	bf0c      	ite	eq
 8010198:	2300      	moveq	r3, #0
 801019a:	f003 0301 	andne.w	r3, r3, #1
 801019e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80101a2:	428a      	cmp	r2, r1
 80101a4:	bf0c      	ite	eq
 80101a6:	2300      	moveq	r3, #0
 80101a8:	f003 0301 	andne.w	r3, r3, #1
 80101ac:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 80101b0:	4282      	cmp	r2, r0
 80101b2:	bf0c      	ite	eq
 80101b4:	2300      	moveq	r3, #0
 80101b6:	f003 0301 	andne.w	r3, r3, #1
 80101ba:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 80101be:	428a      	cmp	r2, r1
 80101c0:	bf0c      	ite	eq
 80101c2:	2300      	moveq	r3, #0
 80101c4:	f003 0301 	andne.w	r3, r3, #1
 80101c8:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 80101cc:	4282      	cmp	r2, r0
 80101ce:	bf0c      	ite	eq
 80101d0:	2300      	moveq	r3, #0
 80101d2:	f003 0301 	andne.w	r3, r3, #1
 80101d6:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80101da:	428a      	cmp	r2, r1
 80101dc:	bf0c      	ite	eq
 80101de:	2300      	moveq	r3, #0
 80101e0:	f003 0301 	andne.w	r3, r3, #1
 80101e4:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 80101e8:	4282      	cmp	r2, r0
 80101ea:	bf0c      	ite	eq
 80101ec:	2300      	moveq	r3, #0
 80101ee:	f003 0301 	andne.w	r3, r3, #1
 80101f2:	428a      	cmp	r2, r1
 80101f4:	bf0c      	ite	eq
 80101f6:	2300      	moveq	r3, #0
 80101f8:	f003 0301 	andne.w	r3, r3, #1
 80101fc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010200:	428a      	cmp	r2, r1
 8010202:	bf0c      	ite	eq
 8010204:	2300      	moveq	r3, #0
 8010206:	f003 0301 	andne.w	r3, r3, #1
 801020a:	b113      	cbz	r3, 8010212 <HAL_TIM_PWM_Init+0xba>
 801020c:	4b37      	ldr	r3, [pc, #220]	; (80102ec <HAL_TIM_PWM_Init+0x194>)
 801020e:	429a      	cmp	r2, r3
 8010210:	d15f      	bne.n	80102d2 <HAL_TIM_PWM_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8010212:	68a3      	ldr	r3, [r4, #8]
 8010214:	f023 0210 	bic.w	r2, r3, #16
 8010218:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 801021c:	2920      	cmp	r1, #32
 801021e:	bf18      	it	ne
 8010220:	2a00      	cmpne	r2, #0
 8010222:	d001      	beq.n	8010228 <HAL_TIM_PWM_Init+0xd0>
 8010224:	2b40      	cmp	r3, #64	; 0x40
 8010226:	d14c      	bne.n	80102c2 <HAL_TIM_PWM_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8010228:	6923      	ldr	r3, [r4, #16]
 801022a:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 801022e:	d002      	beq.n	8010236 <HAL_TIM_PWM_Init+0xde>
 8010230:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010234:	d12b      	bne.n	801028e <HAL_TIM_PWM_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010236:	69a3      	ldr	r3, [r4, #24]
 8010238:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801023c:	d130      	bne.n	80102a0 <HAL_TIM_PWM_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 801023e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8010242:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8010246:	b3b3      	cbz	r3, 80102b6 <HAL_TIM_PWM_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010248:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 801024a:	2302      	movs	r3, #2
 801024c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010250:	f851 0b04 	ldr.w	r0, [r1], #4
 8010254:	f7ff fd58 	bl	800fd08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010258:	2301      	movs	r3, #1
  return HAL_OK;
 801025a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801025c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010260:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010264:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010268:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 801026c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8010270:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010274:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010278:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 801027c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010280:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010284:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010288:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 801028c:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801028e:	f240 5132 	movw	r1, #1330	; 0x532
 8010292:	4817      	ldr	r0, [pc, #92]	; (80102f0 <HAL_TIM_PWM_Init+0x198>)
 8010294:	f7f4 facc 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010298:	69a3      	ldr	r3, [r4, #24]
 801029a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801029e:	d0ce      	beq.n	801023e <HAL_TIM_PWM_Init+0xe6>
 80102a0:	f240 5133 	movw	r1, #1331	; 0x533
 80102a4:	4812      	ldr	r0, [pc, #72]	; (80102f0 <HAL_TIM_PWM_Init+0x198>)
 80102a6:	f7f4 fac3 	bl	8004830 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 80102aa:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80102ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d1c8      	bne.n	8010248 <HAL_TIM_PWM_Init+0xf0>
    HAL_TIM_PWM_MspInit(htim);
 80102b6:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80102b8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80102bc:	f7ff f842 	bl	800f344 <HAL_TIM_PWM_MspInit>
 80102c0:	e7c2      	b.n	8010248 <HAL_TIM_PWM_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80102c2:	f240 5131 	movw	r1, #1329	; 0x531
 80102c6:	480a      	ldr	r0, [pc, #40]	; (80102f0 <HAL_TIM_PWM_Init+0x198>)
 80102c8:	f7f4 fab2 	bl	8004830 <assert_failed>
 80102cc:	e7ac      	b.n	8010228 <HAL_TIM_PWM_Init+0xd0>
    return HAL_ERROR;
 80102ce:	2001      	movs	r0, #1
}
 80102d0:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80102d2:	f44f 61a6 	mov.w	r1, #1328	; 0x530
 80102d6:	4806      	ldr	r0, [pc, #24]	; (80102f0 <HAL_TIM_PWM_Init+0x198>)
 80102d8:	f7f4 faaa 	bl	8004830 <assert_failed>
 80102dc:	e799      	b.n	8010212 <HAL_TIM_PWM_Init+0xba>
 80102de:	bf00      	nop
 80102e0:	40010000 	.word	0x40010000
 80102e4:	40000800 	.word	0x40000800
 80102e8:	40000400 	.word	0x40000400
 80102ec:	40002000 	.word	0x40002000
 80102f0:	0802c5d8 	.word	0x0802c5d8

080102f4 <HAL_TIM_IC_Init>:
  if (htim == NULL)
 80102f4:	2800      	cmp	r0, #0
 80102f6:	f000 80b8 	beq.w	801046a <HAL_TIM_IC_Init+0x176>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 80102fa:	6802      	ldr	r2, [r0, #0]
 80102fc:	4b5f      	ldr	r3, [pc, #380]	; (801047c <HAL_TIM_IC_Init+0x188>)
 80102fe:	4960      	ldr	r1, [pc, #384]	; (8010480 <HAL_TIM_IC_Init+0x18c>)
 8010300:	429a      	cmp	r2, r3
 8010302:	bf18      	it	ne
 8010304:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
{
 8010308:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801030a:	bf14      	ite	ne
 801030c:	2301      	movne	r3, #1
 801030e:	2300      	moveq	r3, #0
 8010310:	4604      	mov	r4, r0
 8010312:	485c      	ldr	r0, [pc, #368]	; (8010484 <HAL_TIM_IC_Init+0x190>)
 8010314:	4282      	cmp	r2, r0
 8010316:	bf0c      	ite	eq
 8010318:	2300      	moveq	r3, #0
 801031a:	f003 0301 	andne.w	r3, r3, #1
 801031e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010322:	428a      	cmp	r2, r1
 8010324:	bf0c      	ite	eq
 8010326:	2300      	moveq	r3, #0
 8010328:	f003 0301 	andne.w	r3, r3, #1
 801032c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010330:	4282      	cmp	r2, r0
 8010332:	bf0c      	ite	eq
 8010334:	2300      	moveq	r3, #0
 8010336:	f003 0301 	andne.w	r3, r3, #1
 801033a:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 801033e:	428a      	cmp	r2, r1
 8010340:	bf0c      	ite	eq
 8010342:	2300      	moveq	r3, #0
 8010344:	f003 0301 	andne.w	r3, r3, #1
 8010348:	f501 4174 	add.w	r1, r1, #62464	; 0xf400
 801034c:	4282      	cmp	r2, r0
 801034e:	bf0c      	ite	eq
 8010350:	2300      	moveq	r3, #0
 8010352:	f003 0301 	andne.w	r3, r3, #1
 8010356:	f500 3096 	add.w	r0, r0, #76800	; 0x12c00
 801035a:	428a      	cmp	r2, r1
 801035c:	bf0c      	ite	eq
 801035e:	2300      	moveq	r3, #0
 8010360:	f003 0301 	andne.w	r3, r3, #1
 8010364:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8010368:	4282      	cmp	r2, r0
 801036a:	bf0c      	ite	eq
 801036c:	2300      	moveq	r3, #0
 801036e:	f003 0301 	andne.w	r3, r3, #1
 8010372:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8010376:	428a      	cmp	r2, r1
 8010378:	bf0c      	ite	eq
 801037a:	2300      	moveq	r3, #0
 801037c:	f003 0301 	andne.w	r3, r3, #1
 8010380:	f5a1 3196 	sub.w	r1, r1, #76800	; 0x12c00
 8010384:	4282      	cmp	r2, r0
 8010386:	bf0c      	ite	eq
 8010388:	2300      	moveq	r3, #0
 801038a:	f003 0301 	andne.w	r3, r3, #1
 801038e:	428a      	cmp	r2, r1
 8010390:	bf0c      	ite	eq
 8010392:	2300      	moveq	r3, #0
 8010394:	f003 0301 	andne.w	r3, r3, #1
 8010398:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 801039c:	428a      	cmp	r2, r1
 801039e:	bf0c      	ite	eq
 80103a0:	2300      	moveq	r3, #0
 80103a2:	f003 0301 	andne.w	r3, r3, #1
 80103a6:	b113      	cbz	r3, 80103ae <HAL_TIM_IC_Init+0xba>
 80103a8:	4b37      	ldr	r3, [pc, #220]	; (8010488 <HAL_TIM_IC_Init+0x194>)
 80103aa:	429a      	cmp	r2, r3
 80103ac:	d15f      	bne.n	801046e <HAL_TIM_IC_Init+0x17a>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80103ae:	68a3      	ldr	r3, [r4, #8]
 80103b0:	f023 0210 	bic.w	r2, r3, #16
 80103b4:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80103b8:	2920      	cmp	r1, #32
 80103ba:	bf18      	it	ne
 80103bc:	2a00      	cmpne	r2, #0
 80103be:	d001      	beq.n	80103c4 <HAL_TIM_IC_Init+0xd0>
 80103c0:	2b40      	cmp	r3, #64	; 0x40
 80103c2:	d14c      	bne.n	801045e <HAL_TIM_IC_Init+0x16a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80103c4:	6923      	ldr	r3, [r4, #16]
 80103c6:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80103ca:	d002      	beq.n	80103d2 <HAL_TIM_IC_Init+0xde>
 80103cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103d0:	d12b      	bne.n	801042a <HAL_TIM_IC_Init+0x136>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80103d2:	69a3      	ldr	r3, [r4, #24]
 80103d4:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 80103d8:	d130      	bne.n	801043c <HAL_TIM_IC_Init+0x148>
  if (htim->State == HAL_TIM_STATE_RESET)
 80103da:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80103de:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80103e2:	b3b3      	cbz	r3, 8010452 <HAL_TIM_IC_Init+0x15e>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103e4:	4621      	mov	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 80103e6:	2302      	movs	r3, #2
 80103e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80103ec:	f851 0b04 	ldr.w	r0, [r1], #4
 80103f0:	f7ff fc8a 	bl	800fd08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103f4:	2301      	movs	r3, #1
  return HAL_OK;
 80103f6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80103f8:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80103fc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8010400:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8010404:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8010408:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 801040c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010414:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8010418:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801041c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8010420:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8010424:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8010428:	bd10      	pop	{r4, pc}
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801042a:	f240 71cc 	movw	r1, #1996	; 0x7cc
 801042e:	4817      	ldr	r0, [pc, #92]	; (801048c <HAL_TIM_IC_Init+0x198>)
 8010430:	f7f4 f9fe 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8010434:	69a3      	ldr	r3, [r4, #24]
 8010436:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801043a:	d0ce      	beq.n	80103da <HAL_TIM_IC_Init+0xe6>
 801043c:	f240 71cd 	movw	r1, #1997	; 0x7cd
 8010440:	4812      	ldr	r0, [pc, #72]	; (801048c <HAL_TIM_IC_Init+0x198>)
 8010442:	f7f4 f9f5 	bl	8004830 <assert_failed>
  if (htim->State == HAL_TIM_STATE_RESET)
 8010446:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 801044a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 801044e:	2b00      	cmp	r3, #0
 8010450:	d1c8      	bne.n	80103e4 <HAL_TIM_IC_Init+0xf0>
    HAL_TIM_IC_MspInit(htim);
 8010452:	4620      	mov	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8010454:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    HAL_TIM_IC_MspInit(htim);
 8010458:	f7fe ff76 	bl	800f348 <HAL_TIM_IC_MspInit>
 801045c:	e7c2      	b.n	80103e4 <HAL_TIM_IC_Init+0xf0>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 801045e:	f240 71cb 	movw	r1, #1995	; 0x7cb
 8010462:	480a      	ldr	r0, [pc, #40]	; (801048c <HAL_TIM_IC_Init+0x198>)
 8010464:	f7f4 f9e4 	bl	8004830 <assert_failed>
 8010468:	e7ac      	b.n	80103c4 <HAL_TIM_IC_Init+0xd0>
    return HAL_ERROR;
 801046a:	2001      	movs	r0, #1
}
 801046c:	4770      	bx	lr
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801046e:	f240 71ca 	movw	r1, #1994	; 0x7ca
 8010472:	4806      	ldr	r0, [pc, #24]	; (801048c <HAL_TIM_IC_Init+0x198>)
 8010474:	f7f4 f9dc 	bl	8004830 <assert_failed>
 8010478:	e799      	b.n	80103ae <HAL_TIM_IC_Init+0xba>
 801047a:	bf00      	nop
 801047c:	40010000 	.word	0x40010000
 8010480:	40000800 	.word	0x40000800
 8010484:	40000400 	.word	0x40000400
 8010488:	40002000 	.word	0x40002000
 801048c:	0802c5d8 	.word	0x0802c5d8

08010490 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010490:	6a03      	ldr	r3, [r0, #32]
 8010492:	f023 0310 	bic.w	r3, r3, #16
{
 8010496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801049a:	6203      	str	r3, [r0, #32]
{
 801049c:	4604      	mov	r4, r0
  tmpccer = TIMx->CCER;
 801049e:	6a05      	ldr	r5, [r0, #32]
{
 80104a0:	460e      	mov	r6, r1
  tmpcr2 =  TIMx->CR2;
 80104a2:	f8d0 8004 	ldr.w	r8, [r0, #4]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104a6:	4b29      	ldr	r3, [pc, #164]	; (801054c <TIM_OC2_SetConfig+0xbc>)
  tmpccer &= ~TIM_CCER_CC2P;
 80104a8:	f025 0520 	bic.w	r5, r5, #32
  tmpccmrx = TIMx->CCMR1;
 80104ac:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104ae:	680f      	ldr	r7, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80104b0:	4013      	ands	r3, r2
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80104b2:	ea43 2707 	orr.w	r7, r3, r7, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80104b6:	688b      	ldr	r3, [r1, #8]
 80104b8:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80104bc:	4b24      	ldr	r3, [pc, #144]	; (8010550 <TIM_OC2_SetConfig+0xc0>)
 80104be:	4298      	cmp	r0, r3
 80104c0:	d00b      	beq.n	80104da <TIM_OC2_SetConfig+0x4a>
 80104c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80104c6:	4298      	cmp	r0, r3
 80104c8:	d007      	beq.n	80104da <TIM_OC2_SetConfig+0x4a>
  TIMx->CCR2 = OC_Config->Pulse;
 80104ca:	6872      	ldr	r2, [r6, #4]
  TIMx->CR2 = tmpcr2;
 80104cc:	f8c4 8004 	str.w	r8, [r4, #4]
  TIMx->CCMR1 = tmpccmrx;
 80104d0:	61a7      	str	r7, [r4, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80104d2:	63a2      	str	r2, [r4, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80104d4:	6225      	str	r5, [r4, #32]
}
 80104d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 80104da:	68f3      	ldr	r3, [r6, #12]
 80104dc:	f033 0208 	bics.w	r2, r3, #8
 80104e0:	d123      	bne.n	801052a <TIM_OC2_SetConfig+0x9a>
    tmpccer &= ~TIM_CCER_CC2NP;
 80104e2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80104e6:	ea45 1503 	orr.w	r5, r5, r3, lsl #4
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80104ea:	69b3      	ldr	r3, [r6, #24]
 80104ec:	f433 7300 	bics.w	r3, r3, #512	; 0x200
    tmpccer &= ~TIM_CCER_CC2NE;
 80104f0:	f025 0540 	bic.w	r5, r5, #64	; 0x40
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 80104f4:	d120      	bne.n	8010538 <TIM_OC2_SetConfig+0xa8>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 80104f6:	6973      	ldr	r3, [r6, #20]
 80104f8:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 80104fc:	d107      	bne.n	801050e <TIM_OC2_SetConfig+0x7e>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80104fe:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010502:	69b1      	ldr	r1, [r6, #24]
 8010504:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010508:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 801050c:	e7dd      	b.n	80104ca <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 801050e:	f641 31b9 	movw	r1, #7097	; 0x1bb9
 8010512:	4810      	ldr	r0, [pc, #64]	; (8010554 <TIM_OC2_SetConfig+0xc4>)
 8010514:	f7f4 f98c 	bl	8004830 <assert_failed>
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8010518:	f428 6240 	bic.w	r2, r8, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 801051c:	69b1      	ldr	r1, [r6, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 801051e:	6973      	ldr	r3, [r6, #20]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8010520:	ea42 0281 	orr.w	r2, r2, r1, lsl #2
 8010524:	ea42 0883 	orr.w	r8, r2, r3, lsl #2
 8010528:	e7cf      	b.n	80104ca <TIM_OC2_SetConfig+0x3a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 801052a:	f641 31aa 	movw	r1, #7082	; 0x1baa
 801052e:	4809      	ldr	r0, [pc, #36]	; (8010554 <TIM_OC2_SetConfig+0xc4>)
 8010530:	f7f4 f97e 	bl	8004830 <assert_failed>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8010534:	68f3      	ldr	r3, [r6, #12]
 8010536:	e7d4      	b.n	80104e2 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
 8010538:	f641 31b8 	movw	r1, #7096	; 0x1bb8
 801053c:	4805      	ldr	r0, [pc, #20]	; (8010554 <TIM_OC2_SetConfig+0xc4>)
 801053e:	f7f4 f977 	bl	8004830 <assert_failed>
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
 8010542:	6973      	ldr	r3, [r6, #20]
 8010544:	f433 7280 	bics.w	r2, r3, #256	; 0x100
 8010548:	d0d9      	beq.n	80104fe <TIM_OC2_SetConfig+0x6e>
 801054a:	e7e0      	b.n	801050e <TIM_OC2_SetConfig+0x7e>
 801054c:	feff8cff 	.word	0xfeff8cff
 8010550:	40010000 	.word	0x40010000
 8010554:	0802c5d8 	.word	0x0802c5d8

08010558 <HAL_TIM_OC_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010558:	2a14      	cmp	r2, #20
{
 801055a:	b570      	push	{r4, r5, r6, lr}
 801055c:	4614      	mov	r4, r2
 801055e:	4605      	mov	r5, r0
 8010560:	460e      	mov	r6, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 8010562:	d937      	bls.n	80105d4 <HAL_TIM_OC_ConfigChannel+0x7c>
 8010564:	2a3c      	cmp	r2, #60	; 0x3c
 8010566:	d139      	bne.n	80105dc <HAL_TIM_OC_ConfigChannel+0x84>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 8010568:	6833      	ldr	r3, [r6, #0]
 801056a:	f023 0210 	bic.w	r2, r3, #16
 801056e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8010572:	2a40      	cmp	r2, #64	; 0x40
 8010574:	bf18      	it	ne
 8010576:	2b00      	cmpne	r3, #0
 8010578:	d003      	beq.n	8010582 <HAL_TIM_OC_ConfigChannel+0x2a>
 801057a:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 801057e:	f040 8138 	bne.w	80107f2 <HAL_TIM_OC_ConfigChannel+0x29a>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010582:	68b3      	ldr	r3, [r6, #8]
 8010584:	f033 0302 	bics.w	r3, r3, #2
 8010588:	d12e      	bne.n	80105e8 <HAL_TIM_OC_ConfigChannel+0x90>
  __HAL_LOCK(htim);
 801058a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801058e:	2b01      	cmp	r3, #1
 8010590:	d033      	beq.n	80105fa <HAL_TIM_OC_ConfigChannel+0xa2>
 8010592:	2301      	movs	r3, #1
 8010594:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010598:	2c14      	cmp	r4, #20
 801059a:	d816      	bhi.n	80105ca <HAL_TIM_OC_ConfigChannel+0x72>
 801059c:	e8df f014 	tbh	[pc, r4, lsl #1]
 80105a0:	0015002f 	.word	0x0015002f
 80105a4:	00150015 	.word	0x00150015
 80105a8:	00150080 	.word	0x00150080
 80105ac:	00150015 	.word	0x00150015
 80105b0:	001500b5 	.word	0x001500b5
 80105b4:	00150015 	.word	0x00150015
 80105b8:	001500db 	.word	0x001500db
 80105bc:	00150015 	.word	0x00150015
 80105c0:	00150101 	.word	0x00150101
 80105c4:	00150015 	.word	0x00150015
 80105c8:	010e      	.short	0x010e
 80105ca:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80105cc:	2300      	movs	r3, #0
 80105ce:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80105d2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80105d4:	4b98      	ldr	r3, [pc, #608]	; (8010838 <HAL_TIM_OC_ConfigChannel+0x2e0>)
 80105d6:	40d3      	lsrs	r3, r2
 80105d8:	07db      	lsls	r3, r3, #31
 80105da:	d4c5      	bmi.n	8010568 <HAL_TIM_OC_ConfigChannel+0x10>
 80105dc:	f640 71df 	movw	r1, #4063	; 0xfdf
 80105e0:	4896      	ldr	r0, [pc, #600]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80105e2:	f7f4 f925 	bl	8004830 <assert_failed>
 80105e6:	e7bf      	b.n	8010568 <HAL_TIM_OC_ConfigChannel+0x10>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80105e8:	f640 71e1 	movw	r1, #4065	; 0xfe1
 80105ec:	4893      	ldr	r0, [pc, #588]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80105ee:	f7f4 f91f 	bl	8004830 <assert_failed>
  __HAL_LOCK(htim);
 80105f2:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d1cb      	bne.n	8010592 <HAL_TIM_OC_ConfigChannel+0x3a>
 80105fa:	2002      	movs	r0, #2
}
 80105fc:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80105fe:	6828      	ldr	r0, [r5, #0]
 8010600:	4b8f      	ldr	r3, [pc, #572]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 8010602:	4a90      	ldr	r2, [pc, #576]	; (8010844 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010604:	4298      	cmp	r0, r3
 8010606:	bf18      	it	ne
 8010608:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801060c:	bf14      	ite	ne
 801060e:	2301      	movne	r3, #1
 8010610:	2300      	moveq	r3, #0
 8010612:	4290      	cmp	r0, r2
 8010614:	bf0c      	ite	eq
 8010616:	2300      	moveq	r3, #0
 8010618:	f003 0301 	andne.w	r3, r3, #1
 801061c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010620:	4290      	cmp	r0, r2
 8010622:	bf0c      	ite	eq
 8010624:	2300      	moveq	r3, #0
 8010626:	f003 0301 	andne.w	r3, r3, #1
 801062a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801062e:	4290      	cmp	r0, r2
 8010630:	bf0c      	ite	eq
 8010632:	2300      	moveq	r3, #0
 8010634:	f003 0301 	andne.w	r3, r3, #1
 8010638:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801063c:	4290      	cmp	r0, r2
 801063e:	bf0c      	ite	eq
 8010640:	2300      	moveq	r3, #0
 8010642:	f003 0301 	andne.w	r3, r3, #1
 8010646:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 801064a:	4290      	cmp	r0, r2
 801064c:	bf0c      	ite	eq
 801064e:	2300      	moveq	r3, #0
 8010650:	f003 0301 	andne.w	r3, r3, #1
 8010654:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010658:	4290      	cmp	r0, r2
 801065a:	bf0c      	ite	eq
 801065c:	2300      	moveq	r3, #0
 801065e:	f003 0301 	andne.w	r3, r3, #1
 8010662:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010666:	4290      	cmp	r0, r2
 8010668:	bf0c      	ite	eq
 801066a:	2300      	moveq	r3, #0
 801066c:	f003 0301 	andne.w	r3, r3, #1
 8010670:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010674:	4290      	cmp	r0, r2
 8010676:	bf0c      	ite	eq
 8010678:	2300      	moveq	r3, #0
 801067a:	f003 0301 	andne.w	r3, r3, #1
 801067e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010682:	4290      	cmp	r0, r2
 8010684:	bf0c      	ite	eq
 8010686:	2300      	moveq	r3, #0
 8010688:	f003 0301 	andne.w	r3, r3, #1
 801068c:	b11b      	cbz	r3, 8010696 <HAL_TIM_OC_ConfigChannel+0x13e>
 801068e:	4b6e      	ldr	r3, [pc, #440]	; (8010848 <HAL_TIM_OC_ConfigChannel+0x2f0>)
 8010690:	4298      	cmp	r0, r3
 8010692:	f040 80c9 	bne.w	8010828 <HAL_TIM_OC_ConfigChannel+0x2d0>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010696:	4631      	mov	r1, r6
 8010698:	f7fe f9ac 	bl	800e9f4 <TIM_OC1_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 801069c:	2000      	movs	r0, #0
      break;
 801069e:	e795      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80106a0:	6828      	ldr	r0, [r5, #0]
 80106a2:	4b67      	ldr	r3, [pc, #412]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80106a4:	4a67      	ldr	r2, [pc, #412]	; (8010844 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 80106a6:	4298      	cmp	r0, r3
 80106a8:	bf18      	it	ne
 80106aa:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80106ae:	bf14      	ite	ne
 80106b0:	2301      	movne	r3, #1
 80106b2:	2300      	moveq	r3, #0
 80106b4:	4290      	cmp	r0, r2
 80106b6:	bf0c      	ite	eq
 80106b8:	2300      	moveq	r3, #0
 80106ba:	f003 0301 	andne.w	r3, r3, #1
 80106be:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80106c2:	4290      	cmp	r0, r2
 80106c4:	bf0c      	ite	eq
 80106c6:	2300      	moveq	r3, #0
 80106c8:	f003 0301 	andne.w	r3, r3, #1
 80106cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80106d0:	4290      	cmp	r0, r2
 80106d2:	bf0c      	ite	eq
 80106d4:	2300      	moveq	r3, #0
 80106d6:	f003 0301 	andne.w	r3, r3, #1
 80106da:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80106de:	4290      	cmp	r0, r2
 80106e0:	bf0c      	ite	eq
 80106e2:	2300      	moveq	r3, #0
 80106e4:	f003 0301 	andne.w	r3, r3, #1
 80106e8:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80106ec:	4290      	cmp	r0, r2
 80106ee:	bf0c      	ite	eq
 80106f0:	2300      	moveq	r3, #0
 80106f2:	f003 0301 	andne.w	r3, r3, #1
 80106f6:	b11b      	cbz	r3, 8010700 <HAL_TIM_OC_ConfigChannel+0x1a8>
 80106f8:	4b54      	ldr	r3, [pc, #336]	; (801084c <HAL_TIM_OC_ConfigChannel+0x2f4>)
 80106fa:	4298      	cmp	r0, r3
 80106fc:	f040 808d 	bne.w	801081a <HAL_TIM_OC_ConfigChannel+0x2c2>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010700:	4631      	mov	r1, r6
 8010702:	f7ff fec5 	bl	8010490 <TIM_OC2_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010706:	2000      	movs	r0, #0
      break;
 8010708:	e760      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801070a:	6828      	ldr	r0, [r5, #0]
 801070c:	4b4c      	ldr	r3, [pc, #304]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 801070e:	4a4d      	ldr	r2, [pc, #308]	; (8010844 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 8010710:	4298      	cmp	r0, r3
 8010712:	bf18      	it	ne
 8010714:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010718:	bf14      	ite	ne
 801071a:	2301      	movne	r3, #1
 801071c:	2300      	moveq	r3, #0
 801071e:	4290      	cmp	r0, r2
 8010720:	bf0c      	ite	eq
 8010722:	2300      	moveq	r3, #0
 8010724:	f003 0301 	andne.w	r3, r3, #1
 8010728:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801072c:	4290      	cmp	r0, r2
 801072e:	bf0c      	ite	eq
 8010730:	2300      	moveq	r3, #0
 8010732:	f003 0301 	andne.w	r3, r3, #1
 8010736:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801073a:	4290      	cmp	r0, r2
 801073c:	bf0c      	ite	eq
 801073e:	2300      	moveq	r3, #0
 8010740:	f003 0301 	andne.w	r3, r3, #1
 8010744:	b113      	cbz	r3, 801074c <HAL_TIM_OC_ConfigChannel+0x1f4>
 8010746:	4b42      	ldr	r3, [pc, #264]	; (8010850 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010748:	4298      	cmp	r0, r3
 801074a:	d15f      	bne.n	801080c <HAL_TIM_OC_ConfigChannel+0x2b4>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 801074c:	4631      	mov	r1, r6
 801074e:	f7fe f9b1 	bl	800eab4 <TIM_OC3_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 8010752:	2000      	movs	r0, #0
      break;
 8010754:	e73a      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010756:	6828      	ldr	r0, [r5, #0]
 8010758:	4b39      	ldr	r3, [pc, #228]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 801075a:	4a3a      	ldr	r2, [pc, #232]	; (8010844 <HAL_TIM_OC_ConfigChannel+0x2ec>)
 801075c:	4298      	cmp	r0, r3
 801075e:	bf18      	it	ne
 8010760:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010764:	bf14      	ite	ne
 8010766:	2301      	movne	r3, #1
 8010768:	2300      	moveq	r3, #0
 801076a:	4290      	cmp	r0, r2
 801076c:	bf0c      	ite	eq
 801076e:	2300      	moveq	r3, #0
 8010770:	f003 0301 	andne.w	r3, r3, #1
 8010774:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010778:	4290      	cmp	r0, r2
 801077a:	bf0c      	ite	eq
 801077c:	2300      	moveq	r3, #0
 801077e:	f003 0301 	andne.w	r3, r3, #1
 8010782:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010786:	4290      	cmp	r0, r2
 8010788:	bf0c      	ite	eq
 801078a:	2300      	moveq	r3, #0
 801078c:	f003 0301 	andne.w	r3, r3, #1
 8010790:	b113      	cbz	r3, 8010798 <HAL_TIM_OC_ConfigChannel+0x240>
 8010792:	4b2f      	ldr	r3, [pc, #188]	; (8010850 <HAL_TIM_OC_ConfigChannel+0x2f8>)
 8010794:	4298      	cmp	r0, r3
 8010796:	d132      	bne.n	80107fe <HAL_TIM_OC_ConfigChannel+0x2a6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010798:	4631      	mov	r1, r6
 801079a:	f7fe f9ef 	bl	800eb7c <TIM_OC4_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 801079e:	2000      	movs	r0, #0
      break;
 80107a0:	e714      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80107a2:	6828      	ldr	r0, [r5, #0]
 80107a4:	4b26      	ldr	r3, [pc, #152]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80107a6:	4298      	cmp	r0, r3
 80107a8:	d003      	beq.n	80107b2 <HAL_TIM_OC_ConfigChannel+0x25a>
 80107aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107ae:	4298      	cmp	r0, r3
 80107b0:	d118      	bne.n	80107e4 <HAL_TIM_OC_ConfigChannel+0x28c>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80107b2:	4631      	mov	r1, r6
 80107b4:	f7fe f8ca 	bl	800e94c <TIM_OC5_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80107b8:	2000      	movs	r0, #0
      break;
 80107ba:	e707      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80107bc:	6828      	ldr	r0, [r5, #0]
 80107be:	4b20      	ldr	r3, [pc, #128]	; (8010840 <HAL_TIM_OC_ConfigChannel+0x2e8>)
 80107c0:	4298      	cmp	r0, r3
 80107c2:	d003      	beq.n	80107cc <HAL_TIM_OC_ConfigChannel+0x274>
 80107c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80107c8:	4298      	cmp	r0, r3
 80107ca:	d104      	bne.n	80107d6 <HAL_TIM_OC_ConfigChannel+0x27e>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80107cc:	4631      	mov	r1, r6
 80107ce:	f7fe f8e7 	bl	800e9a0 <TIM_OC6_SetConfig>
  HAL_StatusTypeDef status = HAL_OK;
 80107d2:	2000      	movs	r0, #0
      break;
 80107d4:	e6fa      	b.n	80105cc <HAL_TIM_OC_ConfigChannel+0x74>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 80107d6:	4819      	ldr	r0, [pc, #100]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80107d8:	f241 011d 	movw	r1, #4125	; 0x101d
 80107dc:	f7f4 f828 	bl	8004830 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80107e0:	6828      	ldr	r0, [r5, #0]
 80107e2:	e7f3      	b.n	80107cc <HAL_TIM_OC_ConfigChannel+0x274>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80107e4:	4815      	ldr	r0, [pc, #84]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80107e6:	f241 0113 	movw	r1, #4115	; 0x1013
 80107ea:	f7f4 f821 	bl	8004830 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80107ee:	6828      	ldr	r0, [r5, #0]
 80107f0:	e7df      	b.n	80107b2 <HAL_TIM_OC_ConfigChannel+0x25a>
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
 80107f2:	f44f 617e 	mov.w	r1, #4064	; 0xfe0
 80107f6:	4811      	ldr	r0, [pc, #68]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 80107f8:	f7f4 f81a 	bl	8004830 <assert_failed>
 80107fc:	e6c1      	b.n	8010582 <HAL_TIM_OC_ConfigChannel+0x2a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80107fe:	480f      	ldr	r0, [pc, #60]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 8010800:	f241 0109 	movw	r1, #4105	; 0x1009
 8010804:	f7f4 f814 	bl	8004830 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010808:	6828      	ldr	r0, [r5, #0]
 801080a:	e7c5      	b.n	8010798 <HAL_TIM_OC_ConfigChannel+0x240>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 801080c:	480b      	ldr	r0, [pc, #44]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 801080e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8010812:	f7f4 f80d 	bl	8004830 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010816:	6828      	ldr	r0, [r5, #0]
 8010818:	e798      	b.n	801074c <HAL_TIM_OC_ConfigChannel+0x1f4>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 801081a:	4808      	ldr	r0, [pc, #32]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 801081c:	f640 71f5 	movw	r1, #4085	; 0xff5
 8010820:	f7f4 f806 	bl	8004830 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010824:	6828      	ldr	r0, [r5, #0]
 8010826:	e76b      	b.n	8010700 <HAL_TIM_OC_ConfigChannel+0x1a8>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010828:	4804      	ldr	r0, [pc, #16]	; (801083c <HAL_TIM_OC_ConfigChannel+0x2e4>)
 801082a:	f640 71eb 	movw	r1, #4075	; 0xfeb
 801082e:	f7f3 ffff 	bl	8004830 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010832:	6828      	ldr	r0, [r5, #0]
 8010834:	e72f      	b.n	8010696 <HAL_TIM_OC_ConfigChannel+0x13e>
 8010836:	bf00      	nop
 8010838:	00111111 	.word	0x00111111
 801083c:	0802c5d8 	.word	0x0802c5d8
 8010840:	40010000 	.word	0x40010000
 8010844:	40000400 	.word	0x40000400
 8010848:	40002000 	.word	0x40002000
 801084c:	40001800 	.word	0x40001800
 8010850:	40010400 	.word	0x40010400

08010854 <HAL_TIM_PWM_ConfigChannel>:
  assert_param(IS_TIM_CHANNELS(Channel));
 8010854:	2a14      	cmp	r2, #20
{
 8010856:	b570      	push	{r4, r5, r6, lr}
 8010858:	4616      	mov	r6, r2
 801085a:	4605      	mov	r5, r0
 801085c:	460c      	mov	r4, r1
  assert_param(IS_TIM_CHANNELS(Channel));
 801085e:	d933      	bls.n	80108c8 <HAL_TIM_PWM_ConfigChannel+0x74>
 8010860:	2a3c      	cmp	r2, #60	; 0x3c
 8010862:	d135      	bne.n	80108d0 <HAL_TIM_PWM_ConfigChannel+0x7c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010864:	6822      	ldr	r2, [r4, #0]
 8010866:	4b90      	ldr	r3, [pc, #576]	; (8010aa8 <HAL_TIM_PWM_ConfigChannel+0x254>)
 8010868:	4013      	ands	r3, r2
 801086a:	2b60      	cmp	r3, #96	; 0x60
 801086c:	d004      	beq.n	8010878 <HAL_TIM_PWM_ConfigChannel+0x24>
 801086e:	f022 0210 	bic.w	r2, r2, #16
 8010872:	4b8e      	ldr	r3, [pc, #568]	; (8010aac <HAL_TIM_PWM_ConfigChannel+0x258>)
 8010874:	429a      	cmp	r2, r3
 8010876:	d147      	bne.n	8010908 <HAL_TIM_PWM_ConfigChannel+0xb4>
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 8010878:	68a3      	ldr	r3, [r4, #8]
 801087a:	f033 0302 	bics.w	r3, r3, #2
 801087e:	d13d      	bne.n	80108fc <HAL_TIM_PWM_ConfigChannel+0xa8>
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 8010880:	6923      	ldr	r3, [r4, #16]
 8010882:	f033 0304 	bics.w	r3, r3, #4
 8010886:	d12e      	bne.n	80108e6 <HAL_TIM_PWM_ConfigChannel+0x92>
  __HAL_LOCK(htim);
 8010888:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 801088c:	2b01      	cmp	r3, #1
 801088e:	d033      	beq.n	80108f8 <HAL_TIM_PWM_ConfigChannel+0xa4>
 8010890:	2301      	movs	r3, #1
 8010892:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  switch (Channel)
 8010896:	2e14      	cmp	r6, #20
 8010898:	d820      	bhi.n	80108dc <HAL_TIM_PWM_ConfigChannel+0x88>
 801089a:	e8df f016 	tbh	[pc, r6, lsl #1]
 801089e:	00a7      	.short	0x00a7
 80108a0:	001f001f 	.word	0x001f001f
 80108a4:	0115001f 	.word	0x0115001f
 80108a8:	001f001f 	.word	0x001f001f
 80108ac:	0157001f 	.word	0x0157001f
 80108b0:	001f001f 	.word	0x001f001f
 80108b4:	0057001f 	.word	0x0057001f
 80108b8:	001f001f 	.word	0x001f001f
 80108bc:	008c001f 	.word	0x008c001f
 80108c0:	001f001f 	.word	0x001f001f
 80108c4:	003b001f 	.word	0x003b001f
  assert_param(IS_TIM_CHANNELS(Channel));
 80108c8:	4b79      	ldr	r3, [pc, #484]	; (8010ab0 <HAL_TIM_PWM_ConfigChannel+0x25c>)
 80108ca:	40d3      	lsrs	r3, r2
 80108cc:	07db      	lsls	r3, r3, #31
 80108ce:	d4c9      	bmi.n	8010864 <HAL_TIM_PWM_ConfigChannel+0x10>
 80108d0:	f241 01a7 	movw	r1, #4263	; 0x10a7
 80108d4:	4877      	ldr	r0, [pc, #476]	; (8010ab4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80108d6:	f7f3 ffab 	bl	8004830 <assert_failed>
 80108da:	e7c3      	b.n	8010864 <HAL_TIM_PWM_ConfigChannel+0x10>
  switch (Channel)
 80108dc:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 80108de:	2300      	movs	r3, #0
 80108e0:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 80108e4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
 80108e6:	f241 01aa 	movw	r1, #4266	; 0x10aa
 80108ea:	4872      	ldr	r0, [pc, #456]	; (8010ab4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 80108ec:	f7f3 ffa0 	bl	8004830 <assert_failed>
  __HAL_LOCK(htim);
 80108f0:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 80108f4:	2b01      	cmp	r3, #1
 80108f6:	d1cb      	bne.n	8010890 <HAL_TIM_PWM_ConfigChannel+0x3c>
 80108f8:	2002      	movs	r0, #2
}
 80108fa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
 80108fc:	f241 01a9 	movw	r1, #4265	; 0x10a9
 8010900:	486c      	ldr	r0, [pc, #432]	; (8010ab4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 8010902:	f7f3 ff95 	bl	8004830 <assert_failed>
 8010906:	e7bb      	b.n	8010880 <HAL_TIM_PWM_ConfigChannel+0x2c>
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
 8010908:	f241 01a8 	movw	r1, #4264	; 0x10a8
 801090c:	4869      	ldr	r0, [pc, #420]	; (8010ab4 <HAL_TIM_PWM_ConfigChannel+0x260>)
 801090e:	f7f3 ff8f 	bl	8004830 <assert_failed>
 8010912:	e7b1      	b.n	8010878 <HAL_TIM_PWM_ConfigChannel+0x24>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010914:	6828      	ldr	r0, [r5, #0]
 8010916:	4b68      	ldr	r3, [pc, #416]	; (8010ab8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010918:	4298      	cmp	r0, r3
 801091a:	d004      	beq.n	8010926 <HAL_TIM_PWM_ConfigChannel+0xd2>
 801091c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010920:	4298      	cmp	r0, r3
 8010922:	f040 814d 	bne.w	8010bc0 <HAL_TIM_PWM_ConfigChannel+0x36c>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010926:	4621      	mov	r1, r4
 8010928:	f7fe f83a 	bl	800e9a0 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 801092c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 801092e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8010930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8010932:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010936:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8010938:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801093a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 801093e:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010942:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010946:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8010948:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 801094a:	e7c8      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 801094c:	6828      	ldr	r0, [r5, #0]
 801094e:	4b5a      	ldr	r3, [pc, #360]	; (8010ab8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 8010950:	4a5a      	ldr	r2, [pc, #360]	; (8010abc <HAL_TIM_PWM_ConfigChannel+0x268>)
 8010952:	4298      	cmp	r0, r3
 8010954:	bf18      	it	ne
 8010956:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 801095a:	bf14      	ite	ne
 801095c:	2301      	movne	r3, #1
 801095e:	2300      	moveq	r3, #0
 8010960:	4290      	cmp	r0, r2
 8010962:	bf0c      	ite	eq
 8010964:	2300      	moveq	r3, #0
 8010966:	f003 0301 	andne.w	r3, r3, #1
 801096a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801096e:	4290      	cmp	r0, r2
 8010970:	bf0c      	ite	eq
 8010972:	2300      	moveq	r3, #0
 8010974:	f003 0301 	andne.w	r3, r3, #1
 8010978:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801097c:	4290      	cmp	r0, r2
 801097e:	bf0c      	ite	eq
 8010980:	2300      	moveq	r3, #0
 8010982:	f003 0301 	andne.w	r3, r3, #1
 8010986:	b11b      	cbz	r3, 8010990 <HAL_TIM_PWM_ConfigChannel+0x13c>
 8010988:	4b4d      	ldr	r3, [pc, #308]	; (8010ac0 <HAL_TIM_PWM_ConfigChannel+0x26c>)
 801098a:	4298      	cmp	r0, r3
 801098c:	f040 811f 	bne.w	8010bce <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010990:	4621      	mov	r1, r4
 8010992:	f7fe f8f3 	bl	800eb7c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8010996:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8010998:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 801099a:	69d9      	ldr	r1, [r3, #28]
 801099c:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80109a0:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80109a2:	69d9      	ldr	r1, [r3, #28]
 80109a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80109a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109aa:	69da      	ldr	r2, [r3, #28]
 80109ac:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 80109b0:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80109b2:	61da      	str	r2, [r3, #28]
      break;
 80109b4:	e793      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 80109b6:	6828      	ldr	r0, [r5, #0]
 80109b8:	4b3f      	ldr	r3, [pc, #252]	; (8010ab8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80109ba:	4298      	cmp	r0, r3
 80109bc:	d004      	beq.n	80109c8 <HAL_TIM_PWM_ConfigChannel+0x174>
 80109be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80109c2:	4298      	cmp	r0, r3
 80109c4:	f040 80f5 	bne.w	8010bb2 <HAL_TIM_PWM_ConfigChannel+0x35e>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80109c8:	4621      	mov	r1, r4
 80109ca:	f7fd ffbf 	bl	800e94c <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80109ce:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80109d0:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80109d2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80109d4:	f041 0108 	orr.w	r1, r1, #8
 80109d8:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80109da:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80109dc:	f021 0104 	bic.w	r1, r1, #4
 80109e0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80109e2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80109e4:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 80109e6:	2000      	movs	r0, #0
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80109e8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80109ea:	e778      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 80109ec:	6828      	ldr	r0, [r5, #0]
 80109ee:	4b32      	ldr	r3, [pc, #200]	; (8010ab8 <HAL_TIM_PWM_ConfigChannel+0x264>)
 80109f0:	4a32      	ldr	r2, [pc, #200]	; (8010abc <HAL_TIM_PWM_ConfigChannel+0x268>)
 80109f2:	4298      	cmp	r0, r3
 80109f4:	bf18      	it	ne
 80109f6:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 80109fa:	bf14      	ite	ne
 80109fc:	2301      	movne	r3, #1
 80109fe:	2300      	moveq	r3, #0
 8010a00:	4290      	cmp	r0, r2
 8010a02:	bf0c      	ite	eq
 8010a04:	2300      	moveq	r3, #0
 8010a06:	f003 0301 	andne.w	r3, r3, #1
 8010a0a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a0e:	4290      	cmp	r0, r2
 8010a10:	bf0c      	ite	eq
 8010a12:	2300      	moveq	r3, #0
 8010a14:	f003 0301 	andne.w	r3, r3, #1
 8010a18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a1c:	4290      	cmp	r0, r2
 8010a1e:	bf0c      	ite	eq
 8010a20:	2300      	moveq	r3, #0
 8010a22:	f003 0301 	andne.w	r3, r3, #1
 8010a26:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010a2a:	4290      	cmp	r0, r2
 8010a2c:	bf0c      	ite	eq
 8010a2e:	2300      	moveq	r3, #0
 8010a30:	f003 0301 	andne.w	r3, r3, #1
 8010a34:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010a38:	4290      	cmp	r0, r2
 8010a3a:	bf0c      	ite	eq
 8010a3c:	2300      	moveq	r3, #0
 8010a3e:	f003 0301 	andne.w	r3, r3, #1
 8010a42:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a46:	4290      	cmp	r0, r2
 8010a48:	bf0c      	ite	eq
 8010a4a:	2300      	moveq	r3, #0
 8010a4c:	f003 0301 	andne.w	r3, r3, #1
 8010a50:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a54:	4290      	cmp	r0, r2
 8010a56:	bf0c      	ite	eq
 8010a58:	2300      	moveq	r3, #0
 8010a5a:	f003 0301 	andne.w	r3, r3, #1
 8010a5e:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010a62:	4290      	cmp	r0, r2
 8010a64:	bf0c      	ite	eq
 8010a66:	2300      	moveq	r3, #0
 8010a68:	f003 0301 	andne.w	r3, r3, #1
 8010a6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010a70:	4290      	cmp	r0, r2
 8010a72:	bf0c      	ite	eq
 8010a74:	2300      	moveq	r3, #0
 8010a76:	f003 0301 	andne.w	r3, r3, #1
 8010a7a:	b11b      	cbz	r3, 8010a84 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010a7c:	4b11      	ldr	r3, [pc, #68]	; (8010ac4 <HAL_TIM_PWM_ConfigChannel+0x270>)
 8010a7e:	4298      	cmp	r0, r3
 8010a80:	f040 80ba 	bne.w	8010bf8 <HAL_TIM_PWM_ConfigChannel+0x3a4>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010a84:	4621      	mov	r1, r4
 8010a86:	f7fd ffb5 	bl	800e9f4 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010a8a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010a8c:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8010a8e:	6999      	ldr	r1, [r3, #24]
 8010a90:	f041 0108 	orr.w	r1, r1, #8
 8010a94:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8010a96:	6999      	ldr	r1, [r3, #24]
 8010a98:	f021 0104 	bic.w	r1, r1, #4
 8010a9c:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010a9e:	699a      	ldr	r2, [r3, #24]
 8010aa0:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010aa2:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8010aa4:	619a      	str	r2, [r3, #24]
      break;
 8010aa6:	e71a      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
 8010aa8:	fffeffef 	.word	0xfffeffef
 8010aac:	00010040 	.word	0x00010040
 8010ab0:	00111111 	.word	0x00111111
 8010ab4:	0802c5d8 	.word	0x0802c5d8
 8010ab8:	40010000 	.word	0x40010000
 8010abc:	40000400 	.word	0x40000400
 8010ac0:	40010400 	.word	0x40010400
 8010ac4:	40002000 	.word	0x40002000
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010ac8:	6828      	ldr	r0, [r5, #0]
 8010aca:	4b4f      	ldr	r3, [pc, #316]	; (8010c08 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8010acc:	4a4f      	ldr	r2, [pc, #316]	; (8010c0c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8010ace:	4298      	cmp	r0, r3
 8010ad0:	bf18      	it	ne
 8010ad2:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010ad6:	bf14      	ite	ne
 8010ad8:	2301      	movne	r3, #1
 8010ada:	2300      	moveq	r3, #0
 8010adc:	4290      	cmp	r0, r2
 8010ade:	bf0c      	ite	eq
 8010ae0:	2300      	moveq	r3, #0
 8010ae2:	f003 0301 	andne.w	r3, r3, #1
 8010ae6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010aea:	4290      	cmp	r0, r2
 8010aec:	bf0c      	ite	eq
 8010aee:	2300      	moveq	r3, #0
 8010af0:	f003 0301 	andne.w	r3, r3, #1
 8010af4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010af8:	4290      	cmp	r0, r2
 8010afa:	bf0c      	ite	eq
 8010afc:	2300      	moveq	r3, #0
 8010afe:	f003 0301 	andne.w	r3, r3, #1
 8010b02:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010b06:	4290      	cmp	r0, r2
 8010b08:	bf0c      	ite	eq
 8010b0a:	2300      	moveq	r3, #0
 8010b0c:	f003 0301 	andne.w	r3, r3, #1
 8010b10:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010b14:	4290      	cmp	r0, r2
 8010b16:	bf0c      	ite	eq
 8010b18:	2300      	moveq	r3, #0
 8010b1a:	f003 0301 	andne.w	r3, r3, #1
 8010b1e:	b113      	cbz	r3, 8010b26 <HAL_TIM_PWM_ConfigChannel+0x2d2>
 8010b20:	4b3b      	ldr	r3, [pc, #236]	; (8010c10 <HAL_TIM_PWM_ConfigChannel+0x3bc>)
 8010b22:	4298      	cmp	r0, r3
 8010b24:	d161      	bne.n	8010bea <HAL_TIM_PWM_ConfigChannel+0x396>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010b26:	4621      	mov	r1, r4
 8010b28:	f7ff fcb2 	bl	8010490 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010b2c:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b2e:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8010b30:	6999      	ldr	r1, [r3, #24]
 8010b32:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8010b36:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8010b38:	6999      	ldr	r1, [r3, #24]
 8010b3a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8010b3e:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b40:	699a      	ldr	r2, [r3, #24]
 8010b42:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  HAL_StatusTypeDef status = HAL_OK;
 8010b46:	2000      	movs	r0, #0
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8010b48:	619a      	str	r2, [r3, #24]
      break;
 8010b4a:	e6c8      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010b4c:	6828      	ldr	r0, [r5, #0]
 8010b4e:	4b2e      	ldr	r3, [pc, #184]	; (8010c08 <HAL_TIM_PWM_ConfigChannel+0x3b4>)
 8010b50:	4a2e      	ldr	r2, [pc, #184]	; (8010c0c <HAL_TIM_PWM_ConfigChannel+0x3b8>)
 8010b52:	4298      	cmp	r0, r3
 8010b54:	bf18      	it	ne
 8010b56:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8010b5a:	bf14      	ite	ne
 8010b5c:	2301      	movne	r3, #1
 8010b5e:	2300      	moveq	r3, #0
 8010b60:	4290      	cmp	r0, r2
 8010b62:	bf0c      	ite	eq
 8010b64:	2300      	moveq	r3, #0
 8010b66:	f003 0301 	andne.w	r3, r3, #1
 8010b6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b6e:	4290      	cmp	r0, r2
 8010b70:	bf0c      	ite	eq
 8010b72:	2300      	moveq	r3, #0
 8010b74:	f003 0301 	andne.w	r3, r3, #1
 8010b78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010b7c:	4290      	cmp	r0, r2
 8010b7e:	bf0c      	ite	eq
 8010b80:	2300      	moveq	r3, #0
 8010b82:	f003 0301 	andne.w	r3, r3, #1
 8010b86:	b113      	cbz	r3, 8010b8e <HAL_TIM_PWM_ConfigChannel+0x33a>
 8010b88:	4b22      	ldr	r3, [pc, #136]	; (8010c14 <HAL_TIM_PWM_ConfigChannel+0x3c0>)
 8010b8a:	4298      	cmp	r0, r3
 8010b8c:	d126      	bne.n	8010bdc <HAL_TIM_PWM_ConfigChannel+0x388>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010b8e:	4621      	mov	r1, r4
 8010b90:	f7fd ff90 	bl	800eab4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010b94:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010b96:	6920      	ldr	r0, [r4, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8010b98:	69d9      	ldr	r1, [r3, #28]
 8010b9a:	f041 0108 	orr.w	r1, r1, #8
 8010b9e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8010ba0:	69d9      	ldr	r1, [r3, #28]
 8010ba2:	f021 0104 	bic.w	r1, r1, #4
 8010ba6:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010ba8:	69da      	ldr	r2, [r3, #28]
 8010baa:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010bac:	2000      	movs	r0, #0
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8010bae:	61da      	str	r2, [r3, #28]
      break;
 8010bb0:	e695      	b.n	80108de <HAL_TIM_PWM_ConfigChannel+0x8a>
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));
 8010bb2:	4819      	ldr	r0, [pc, #100]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bb4:	f241 01f8 	movw	r1, #4344	; 0x10f8
 8010bb8:	f7f3 fe3a 	bl	8004830 <assert_failed>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8010bbc:	6828      	ldr	r0, [r5, #0]
 8010bbe:	e703      	b.n	80109c8 <HAL_TIM_PWM_ConfigChannel+0x174>
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));
 8010bc0:	4815      	ldr	r0, [pc, #84]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bc2:	f241 1109 	movw	r1, #4361	; 0x1109
 8010bc6:	f7f3 fe33 	bl	8004830 <assert_failed>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8010bca:	6828      	ldr	r0, [r5, #0]
 8010bcc:	e6ab      	b.n	8010926 <HAL_TIM_PWM_ConfigChannel+0xd2>
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010bce:	4812      	ldr	r0, [pc, #72]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bd0:	f241 01e7 	movw	r1, #4327	; 0x10e7
 8010bd4:	f7f3 fe2c 	bl	8004830 <assert_failed>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8010bd8:	6828      	ldr	r0, [r5, #0]
 8010bda:	e6d9      	b.n	8010990 <HAL_TIM_PWM_ConfigChannel+0x13c>
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010bdc:	480e      	ldr	r0, [pc, #56]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bde:	f241 01d6 	movw	r1, #4310	; 0x10d6
 8010be2:	f7f3 fe25 	bl	8004830 <assert_failed>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8010be6:	6828      	ldr	r0, [r5, #0]
 8010be8:	e7d1      	b.n	8010b8e <HAL_TIM_PWM_ConfigChannel+0x33a>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010bea:	480b      	ldr	r0, [pc, #44]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bec:	f241 01c5 	movw	r1, #4293	; 0x10c5
 8010bf0:	f7f3 fe1e 	bl	8004830 <assert_failed>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8010bf4:	6828      	ldr	r0, [r5, #0]
 8010bf6:	e796      	b.n	8010b26 <HAL_TIM_PWM_ConfigChannel+0x2d2>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010bf8:	4807      	ldr	r0, [pc, #28]	; (8010c18 <HAL_TIM_PWM_ConfigChannel+0x3c4>)
 8010bfa:	f241 01b4 	movw	r1, #4276	; 0x10b4
 8010bfe:	f7f3 fe17 	bl	8004830 <assert_failed>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8010c02:	6828      	ldr	r0, [r5, #0]
 8010c04:	e73e      	b.n	8010a84 <HAL_TIM_PWM_ConfigChannel+0x230>
 8010c06:	bf00      	nop
 8010c08:	40010000 	.word	0x40010000
 8010c0c:	40000400 	.word	0x40000400
 8010c10:	40001800 	.word	0x40001800
 8010c14:	40010400 	.word	0x40010400
 8010c18:	0802c5d8 	.word	0x0802c5d8

08010c1c <TIM_TI1_SetConfig>:
{
 8010c1c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c1e:	6a04      	ldr	r4, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010c20:	4e1b      	ldr	r6, [pc, #108]	; (8010c90 <TIM_TI1_SetConfig+0x74>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c22:	f024 0401 	bic.w	r4, r4, #1
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010c26:	42b0      	cmp	r0, r6
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8010c28:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8010c2a:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8010c2c:	6a05      	ldr	r5, [r0, #32]
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8010c2e:	d01d      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c30:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8010c34:	d01a      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c36:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8010c3a:	42b0      	cmp	r0, r6
 8010c3c:	d016      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c42:	42b0      	cmp	r0, r6
 8010c44:	d012      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c46:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8010c4a:	42b0      	cmp	r0, r6
 8010c4c:	d00e      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c4e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 8010c52:	42b0      	cmp	r0, r6
 8010c54:	d00a      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c56:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 8010c5a:	42b0      	cmp	r0, r6
 8010c5c:	d006      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
 8010c5e:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8010c62:	42b0      	cmp	r0, r6
 8010c64:	d002      	beq.n	8010c6c <TIM_TI1_SetConfig+0x50>
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8010c66:	f044 0201 	orr.w	r2, r4, #1
 8010c6a:	e002      	b.n	8010c72 <TIM_TI1_SetConfig+0x56>
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8010c6c:	f024 0403 	bic.w	r4, r4, #3
    tmpccmr1 |= TIM_ICSelection;
 8010c70:	4322      	orrs	r2, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010c72:	011b      	lsls	r3, r3, #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8010c74:	f025 040a 	bic.w	r4, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8010c78:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010c7c:	f001 010a 	and.w	r1, r1, #10
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010c80:	b2db      	uxtb	r3, r3
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8010c82:	4321      	orrs	r1, r4
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8010c84:	4313      	orrs	r3, r2
}
 8010c86:	bc70      	pop	{r4, r5, r6}
  TIMx->CCMR1 = tmpccmr1;
 8010c88:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8010c8a:	6201      	str	r1, [r0, #32]
}
 8010c8c:	4770      	bx	lr
 8010c8e:	bf00      	nop
 8010c90:	40010000 	.word	0x40010000

08010c94 <HAL_TIM_IC_ConfigChannel>:
{
 8010c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010c96:	4ba8      	ldr	r3, [pc, #672]	; (8010f38 <HAL_TIM_IC_ConfigChannel+0x2a4>)
{
 8010c98:	460c      	mov	r4, r1
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010c9a:	6801      	ldr	r1, [r0, #0]
{
 8010c9c:	4616      	mov	r6, r2
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010c9e:	4fa7      	ldr	r7, [pc, #668]	; (8010f3c <HAL_TIM_IC_ConfigChannel+0x2a8>)
{
 8010ca0:	4605      	mov	r5, r0
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010ca2:	4299      	cmp	r1, r3
 8010ca4:	bf18      	it	ne
 8010ca6:	f1b1 4f80 	cmpne.w	r1, #1073741824	; 0x40000000
 8010caa:	4aa5      	ldr	r2, [pc, #660]	; (8010f40 <HAL_TIM_IC_ConfigChannel+0x2ac>)
 8010cac:	bf14      	ite	ne
 8010cae:	2301      	movne	r3, #1
 8010cb0:	2300      	moveq	r3, #0
 8010cb2:	42b9      	cmp	r1, r7
 8010cb4:	bf0c      	ite	eq
 8010cb6:	2300      	moveq	r3, #0
 8010cb8:	f003 0301 	andne.w	r3, r3, #1
 8010cbc:	4291      	cmp	r1, r2
 8010cbe:	bf0c      	ite	eq
 8010cc0:	2300      	moveq	r3, #0
 8010cc2:	f003 0301 	andne.w	r3, r3, #1
 8010cc6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cca:	4291      	cmp	r1, r2
 8010ccc:	bf0c      	ite	eq
 8010cce:	2300      	moveq	r3, #0
 8010cd0:	f003 0301 	andne.w	r3, r3, #1
 8010cd4:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8010cd8:	4291      	cmp	r1, r2
 8010cda:	bf0c      	ite	eq
 8010cdc:	2300      	moveq	r3, #0
 8010cde:	f003 0301 	andne.w	r3, r3, #1
 8010ce2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8010ce6:	4291      	cmp	r1, r2
 8010ce8:	bf0c      	ite	eq
 8010cea:	2300      	moveq	r3, #0
 8010cec:	f003 0301 	andne.w	r3, r3, #1
 8010cf0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010cf4:	4291      	cmp	r1, r2
 8010cf6:	bf0c      	ite	eq
 8010cf8:	2300      	moveq	r3, #0
 8010cfa:	f003 0301 	andne.w	r3, r3, #1
 8010cfe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d02:	4291      	cmp	r1, r2
 8010d04:	bf0c      	ite	eq
 8010d06:	2300      	moveq	r3, #0
 8010d08:	f003 0301 	andne.w	r3, r3, #1
 8010d0c:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8010d10:	4291      	cmp	r1, r2
 8010d12:	bf0c      	ite	eq
 8010d14:	2300      	moveq	r3, #0
 8010d16:	f003 0301 	andne.w	r3, r3, #1
 8010d1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8010d1e:	4291      	cmp	r1, r2
 8010d20:	bf0c      	ite	eq
 8010d22:	2300      	moveq	r3, #0
 8010d24:	f003 0301 	andne.w	r3, r3, #1
 8010d28:	b11b      	cbz	r3, 8010d32 <HAL_TIM_IC_ConfigChannel+0x9e>
 8010d2a:	4b86      	ldr	r3, [pc, #536]	; (8010f44 <HAL_TIM_IC_ConfigChannel+0x2b0>)
 8010d2c:	4299      	cmp	r1, r3
 8010d2e:	f040 8158 	bne.w	8010fe2 <HAL_TIM_IC_ConfigChannel+0x34e>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010d32:	6823      	ldr	r3, [r4, #0]
 8010d34:	f033 0202 	bics.w	r2, r3, #2
 8010d38:	d001      	beq.n	8010d3e <HAL_TIM_IC_ConfigChannel+0xaa>
 8010d3a:	2b0a      	cmp	r3, #10
 8010d3c:	d11e      	bne.n	8010d7c <HAL_TIM_IC_ConfigChannel+0xe8>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010d3e:	6863      	ldr	r3, [r4, #4]
 8010d40:	3b01      	subs	r3, #1
 8010d42:	2b02      	cmp	r3, #2
 8010d44:	d823      	bhi.n	8010d8e <HAL_TIM_IC_ConfigChannel+0xfa>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010d46:	68a3      	ldr	r3, [r4, #8]
 8010d48:	f033 030c 	bics.w	r3, r3, #12
 8010d4c:	d128      	bne.n	8010da0 <HAL_TIM_IC_ConfigChannel+0x10c>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010d4e:	68e3      	ldr	r3, [r4, #12]
 8010d50:	2b0f      	cmp	r3, #15
 8010d52:	d82d      	bhi.n	8010db0 <HAL_TIM_IC_ConfigChannel+0x11c>
  __HAL_LOCK(htim);
 8010d54:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010d58:	2b01      	cmp	r3, #1
 8010d5a:	d032      	beq.n	8010dc2 <HAL_TIM_IC_ConfigChannel+0x12e>
 8010d5c:	2001      	movs	r0, #1
 8010d5e:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
  if (Channel == TIM_CHANNEL_1)
 8010d62:	b386      	cbz	r6, 8010dc6 <HAL_TIM_IC_ConfigChannel+0x132>
  else if (Channel == TIM_CHANNEL_2)
 8010d64:	2e04      	cmp	r6, #4
 8010d66:	d042      	beq.n	8010dee <HAL_TIM_IC_ConfigChannel+0x15a>
  else if (Channel == TIM_CHANNEL_3)
 8010d68:	2e08      	cmp	r6, #8
 8010d6a:	f000 80f3 	beq.w	8010f54 <HAL_TIM_IC_ConfigChannel+0x2c0>
  else if (Channel == TIM_CHANNEL_4)
 8010d6e:	2e0c      	cmp	r6, #12
 8010d70:	f000 8095 	beq.w	8010e9e <HAL_TIM_IC_ConfigChannel+0x20a>
  __HAL_UNLOCK(htim);
 8010d74:	2300      	movs	r3, #0
 8010d76:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
}
 8010d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8010d7c:	f241 0141 	movw	r1, #4161	; 0x1041
 8010d80:	4871      	ldr	r0, [pc, #452]	; (8010f48 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010d82:	f7f3 fd55 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8010d86:	6863      	ldr	r3, [r4, #4]
 8010d88:	3b01      	subs	r3, #1
 8010d8a:	2b02      	cmp	r3, #2
 8010d8c:	d9db      	bls.n	8010d46 <HAL_TIM_IC_ConfigChannel+0xb2>
 8010d8e:	f241 0142 	movw	r1, #4162	; 0x1042
 8010d92:	486d      	ldr	r0, [pc, #436]	; (8010f48 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010d94:	f7f3 fd4c 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8010d98:	68a3      	ldr	r3, [r4, #8]
 8010d9a:	f033 030c 	bics.w	r3, r3, #12
 8010d9e:	d0d6      	beq.n	8010d4e <HAL_TIM_IC_ConfigChannel+0xba>
 8010da0:	f241 0143 	movw	r1, #4163	; 0x1043
 8010da4:	4868      	ldr	r0, [pc, #416]	; (8010f48 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010da6:	f7f3 fd43 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8010daa:	68e3      	ldr	r3, [r4, #12]
 8010dac:	2b0f      	cmp	r3, #15
 8010dae:	d9d1      	bls.n	8010d54 <HAL_TIM_IC_ConfigChannel+0xc0>
 8010db0:	f241 0144 	movw	r1, #4164	; 0x1044
 8010db4:	4864      	ldr	r0, [pc, #400]	; (8010f48 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010db6:	f7f3 fd3b 	bl	8004830 <assert_failed>
  __HAL_LOCK(htim);
 8010dba:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8010dbe:	2b01      	cmp	r3, #1
 8010dc0:	d1cc      	bne.n	8010d5c <HAL_TIM_IC_ConfigChannel+0xc8>
 8010dc2:	2002      	movs	r0, #2
}
 8010dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TIM_TI1_SetConfig(htim->Instance,
 8010dc6:	e9d4 1200 	ldrd	r1, r2, [r4]
 8010dca:	68e3      	ldr	r3, [r4, #12]
 8010dcc:	6828      	ldr	r0, [r5, #0]
 8010dce:	f7ff ff25 	bl	8010c1c <TIM_TI1_SetConfig>
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010dd2:	682b      	ldr	r3, [r5, #0]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010dd4:	68a4      	ldr	r4, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8010dd6:	4630      	mov	r0, r6
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8010dd8:	6999      	ldr	r1, [r3, #24]
 8010dda:	f021 010c 	bic.w	r1, r1, #12
 8010dde:	6199      	str	r1, [r3, #24]
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8010de0:	699a      	ldr	r2, [r3, #24]
 8010de2:	4322      	orrs	r2, r4
 8010de4:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8010de6:	2300      	movs	r3, #0
 8010de8:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010dec:	e7c5      	b.n	8010d7a <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010dee:	682a      	ldr	r2, [r5, #0]
 8010df0:	4b51      	ldr	r3, [pc, #324]	; (8010f38 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8010df2:	4952      	ldr	r1, [pc, #328]	; (8010f3c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010df4:	429a      	cmp	r2, r3
 8010df6:	bf18      	it	ne
 8010df8:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 8010dfc:	bf14      	ite	ne
 8010dfe:	2301      	movne	r3, #1
 8010e00:	2300      	moveq	r3, #0
 8010e02:	428a      	cmp	r2, r1
 8010e04:	bf0c      	ite	eq
 8010e06:	2300      	moveq	r3, #0
 8010e08:	f003 0301 	andne.w	r3, r3, #1
 8010e0c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e10:	428a      	cmp	r2, r1
 8010e12:	bf0c      	ite	eq
 8010e14:	2300      	moveq	r3, #0
 8010e16:	f003 0301 	andne.w	r3, r3, #1
 8010e1a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010e1e:	428a      	cmp	r2, r1
 8010e20:	bf0c      	ite	eq
 8010e22:	2300      	moveq	r3, #0
 8010e24:	f003 0301 	andne.w	r3, r3, #1
 8010e28:	f501 4178 	add.w	r1, r1, #63488	; 0xf800
 8010e2c:	428a      	cmp	r2, r1
 8010e2e:	bf0c      	ite	eq
 8010e30:	2300      	moveq	r3, #0
 8010e32:	f003 0301 	andne.w	r3, r3, #1
 8010e36:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 8010e3a:	428a      	cmp	r2, r1
 8010e3c:	bf0c      	ite	eq
 8010e3e:	2300      	moveq	r3, #0
 8010e40:	f003 0301 	andne.w	r3, r3, #1
 8010e44:	b11b      	cbz	r3, 8010e4e <HAL_TIM_IC_ConfigChannel+0x1ba>
 8010e46:	4b41      	ldr	r3, [pc, #260]	; (8010f4c <HAL_TIM_IC_ConfigChannel+0x2b8>)
 8010e48:	429a      	cmp	r2, r3
 8010e4a:	f040 80d7 	bne.w	8010ffc <HAL_TIM_IC_ConfigChannel+0x368>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e4e:	6a16      	ldr	r6, [r2, #32]
    TIM_TI2_SetConfig(htim->Instance,
 8010e50:	68e3      	ldr	r3, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e52:	f026 0610 	bic.w	r6, r6, #16
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010e56:	031b      	lsls	r3, r3, #12
    TIM_TI2_SetConfig(htim->Instance,
 8010e58:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8010e5c:	6216      	str	r6, [r2, #32]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010e5e:	b29b      	uxth	r3, r3
  tmpccmr1 = TIMx->CCMR1;
 8010e60:	6991      	ldr	r1, [r2, #24]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010e62:	0100      	lsls	r0, r0, #4
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010e64:	68a4      	ldr	r4, [r4, #8]
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8010e66:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010e6a:	f000 00a0 	and.w	r0, r0, #160	; 0xa0
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8010e6e:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8010e72:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8010e76:	430b      	orrs	r3, r1
  tmpccer = TIMx->CCER;
 8010e78:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8010e7a:	6193      	str	r3, [r2, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8010e7c:	f021 03a0 	bic.w	r3, r1, #160	; 0xa0
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8010e80:	4303      	orrs	r3, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010e82:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010e84:	6213      	str	r3, [r2, #32]
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8010e86:	6991      	ldr	r1, [r2, #24]
 8010e88:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010e8c:	6191      	str	r1, [r2, #24]
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8010e8e:	6993      	ldr	r3, [r2, #24]
 8010e90:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 8010e94:	6193      	str	r3, [r2, #24]
  __HAL_UNLOCK(htim);
 8010e96:	2300      	movs	r3, #0
 8010e98:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010e9c:	e76d      	b.n	8010d7a <HAL_TIM_IC_ConfigChannel+0xe6>
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8010e9e:	682b      	ldr	r3, [r5, #0]
 8010ea0:	4a25      	ldr	r2, [pc, #148]	; (8010f38 <HAL_TIM_IC_ConfigChannel+0x2a4>)
 8010ea2:	4926      	ldr	r1, [pc, #152]	; (8010f3c <HAL_TIM_IC_ConfigChannel+0x2a8>)
 8010ea4:	4293      	cmp	r3, r2
 8010ea6:	bf18      	it	ne
 8010ea8:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010eac:	bf14      	ite	ne
 8010eae:	2201      	movne	r2, #1
 8010eb0:	2200      	moveq	r2, #0
 8010eb2:	428b      	cmp	r3, r1
 8010eb4:	bf0c      	ite	eq
 8010eb6:	2200      	moveq	r2, #0
 8010eb8:	f002 0201 	andne.w	r2, r2, #1
 8010ebc:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ec0:	428b      	cmp	r3, r1
 8010ec2:	bf0c      	ite	eq
 8010ec4:	2200      	moveq	r2, #0
 8010ec6:	f002 0201 	andne.w	r2, r2, #1
 8010eca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010ece:	428b      	cmp	r3, r1
 8010ed0:	bf0c      	ite	eq
 8010ed2:	2200      	moveq	r2, #0
 8010ed4:	f002 0201 	andne.w	r2, r2, #1
 8010ed8:	b142      	cbz	r2, 8010eec <HAL_TIM_IC_ConfigChannel+0x258>
 8010eda:	4a1d      	ldr	r2, [pc, #116]	; (8010f50 <HAL_TIM_IC_ConfigChannel+0x2bc>)
 8010edc:	4293      	cmp	r3, r2
 8010ede:	d005      	beq.n	8010eec <HAL_TIM_IC_ConfigChannel+0x258>
 8010ee0:	f241 017a 	movw	r1, #4218	; 0x107a
 8010ee4:	4818      	ldr	r0, [pc, #96]	; (8010f48 <HAL_TIM_IC_ConfigChannel+0x2b4>)
 8010ee6:	f7f3 fca3 	bl	8004830 <assert_failed>
    TIM_TI4_SetConfig(htim->Instance,
 8010eea:	682b      	ldr	r3, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010eec:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI4_SetConfig(htim->Instance,
 8010eee:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010ef0:	f426 5680 	bic.w	r6, r6, #4096	; 0x1000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010ef4:	0312      	lsls	r2, r2, #12
    TIM_TI4_SetConfig(htim->Instance,
 8010ef6:	e9d4 0700 	ldrd	r0, r7, [r4]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8010efa:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010efc:	b292      	uxth	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010efe:	69d9      	ldr	r1, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010f00:	0300      	lsls	r0, r0, #12
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010f02:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8010f04:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010f08:	f400 4020 	and.w	r0, r0, #40960	; 0xa000
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8010f0c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8010f10:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8010f14:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8010f16:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCMR2 = tmpccmr2;
 8010f18:	61da      	str	r2, [r3, #28]
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8010f1a:	f421 4220 	bic.w	r2, r1, #40960	; 0xa000
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8010f1e:	4302      	orrs	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010f20:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer ;
 8010f22:	621a      	str	r2, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8010f24:	69d9      	ldr	r1, [r3, #28]
 8010f26:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
 8010f2a:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8010f2c:	69da      	ldr	r2, [r3, #28]
 8010f2e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 8010f32:	61da      	str	r2, [r3, #28]
 8010f34:	e71e      	b.n	8010d74 <HAL_TIM_IC_ConfigChannel+0xe0>
 8010f36:	bf00      	nop
 8010f38:	40010000 	.word	0x40010000
 8010f3c:	40000400 	.word	0x40000400
 8010f40:	40000800 	.word	0x40000800
 8010f44:	40002000 	.word	0x40002000
 8010f48:	0802c5d8 	.word	0x0802c5d8
 8010f4c:	40001800 	.word	0x40001800
 8010f50:	40010400 	.word	0x40010400
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010f54:	682b      	ldr	r3, [r5, #0]
 8010f56:	4a2d      	ldr	r2, [pc, #180]	; (801100c <HAL_TIM_IC_ConfigChannel+0x378>)
 8010f58:	492d      	ldr	r1, [pc, #180]	; (8011010 <HAL_TIM_IC_ConfigChannel+0x37c>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	bf18      	it	ne
 8010f5e:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8010f62:	bf14      	ite	ne
 8010f64:	2201      	movne	r2, #1
 8010f66:	2200      	moveq	r2, #0
 8010f68:	428b      	cmp	r3, r1
 8010f6a:	bf0c      	ite	eq
 8010f6c:	2200      	moveq	r2, #0
 8010f6e:	f002 0201 	andne.w	r2, r2, #1
 8010f72:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010f76:	428b      	cmp	r3, r1
 8010f78:	bf0c      	ite	eq
 8010f7a:	2200      	moveq	r2, #0
 8010f7c:	f002 0201 	andne.w	r2, r2, #1
 8010f80:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8010f84:	428b      	cmp	r3, r1
 8010f86:	bf0c      	ite	eq
 8010f88:	2200      	moveq	r2, #0
 8010f8a:	f002 0201 	andne.w	r2, r2, #1
 8010f8e:	b112      	cbz	r2, 8010f96 <HAL_TIM_IC_ConfigChannel+0x302>
 8010f90:	4a20      	ldr	r2, [pc, #128]	; (8011014 <HAL_TIM_IC_ConfigChannel+0x380>)
 8010f92:	4293      	cmp	r3, r2
 8010f94:	d12b      	bne.n	8010fee <HAL_TIM_IC_ConfigChannel+0x35a>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f96:	6a1e      	ldr	r6, [r3, #32]
    TIM_TI3_SetConfig(htim->Instance,
 8010f98:	68e2      	ldr	r2, [r4, #12]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010f9a:	f426 7680 	bic.w	r6, r6, #256	; 0x100
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010f9e:	0112      	lsls	r2, r2, #4
    TIM_TI3_SetConfig(htim->Instance,
 8010fa0:	e9d4 0100 	ldrd	r0, r1, [r4]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8010fa4:	621e      	str	r6, [r3, #32]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010fa6:	b2d2      	uxtb	r2, r2
  tmpccmr2 = TIMx->CCMR2;
 8010fa8:	69de      	ldr	r6, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010faa:	0200      	lsls	r0, r0, #8
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010fac:	68a4      	ldr	r4, [r4, #8]
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8010fae:	f026 0603 	bic.w	r6, r6, #3
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010fb2:	f400 6020 	and.w	r0, r0, #2560	; 0xa00
  tmpccmr2 |= TIM_ICSelection;
 8010fb6:	4331      	orrs	r1, r6
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8010fb8:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8010fbc:	430a      	orrs	r2, r1
  tmpccer = TIMx->CCER;
 8010fbe:	6a19      	ldr	r1, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8010fc0:	f421 6120 	bic.w	r1, r1, #2560	; 0xa00
  TIMx->CCMR2 = tmpccmr2;
 8010fc4:	61da      	str	r2, [r3, #28]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8010fc6:	4301      	orrs	r1, r0
  HAL_StatusTypeDef status = HAL_OK;
 8010fc8:	2000      	movs	r0, #0
  TIMx->CCER = tmpccer;
 8010fca:	6219      	str	r1, [r3, #32]
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8010fcc:	69d9      	ldr	r1, [r3, #28]
 8010fce:	f021 010c 	bic.w	r1, r1, #12
 8010fd2:	61d9      	str	r1, [r3, #28]
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8010fd4:	69da      	ldr	r2, [r3, #28]
 8010fd6:	4322      	orrs	r2, r4
 8010fd8:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8010fda:	2300      	movs	r3, #0
 8010fdc:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  return status;
 8010fe0:	e6cb      	b.n	8010d7a <HAL_TIM_IC_ConfigChannel+0xe6>
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8010fe2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8010fe6:	480c      	ldr	r0, [pc, #48]	; (8011018 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010fe8:	f7f3 fc22 	bl	8004830 <assert_failed>
 8010fec:	e6a1      	b.n	8010d32 <HAL_TIM_IC_ConfigChannel+0x9e>
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8010fee:	f241 016a 	movw	r1, #4202	; 0x106a
 8010ff2:	4809      	ldr	r0, [pc, #36]	; (8011018 <HAL_TIM_IC_ConfigChannel+0x384>)
 8010ff4:	f7f3 fc1c 	bl	8004830 <assert_failed>
    TIM_TI3_SetConfig(htim->Instance,
 8010ff8:	682b      	ldr	r3, [r5, #0]
 8010ffa:	e7cc      	b.n	8010f96 <HAL_TIM_IC_ConfigChannel+0x302>
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8010ffc:	f241 015a 	movw	r1, #4186	; 0x105a
 8011000:	4805      	ldr	r0, [pc, #20]	; (8011018 <HAL_TIM_IC_ConfigChannel+0x384>)
 8011002:	f7f3 fc15 	bl	8004830 <assert_failed>
    TIM_TI2_SetConfig(htim->Instance,
 8011006:	682a      	ldr	r2, [r5, #0]
 8011008:	e721      	b.n	8010e4e <HAL_TIM_IC_ConfigChannel+0x1ba>
 801100a:	bf00      	nop
 801100c:	40010000 	.word	0x40010000
 8011010:	40000400 	.word	0x40000400
 8011014:	40010400 	.word	0x40010400
 8011018:	0802c5d8 	.word	0x0802c5d8

0801101c <TIM_CCxChannelCmd>:
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 801101c:	4b2b      	ldr	r3, [pc, #172]	; (80110cc <TIM_CCxChannelCmd+0xb0>)
 801101e:	4298      	cmp	r0, r3
{
 8011020:	b530      	push	{r4, r5, lr}
 8011022:	4604      	mov	r4, r0
 8011024:	b083      	sub	sp, #12
 8011026:	460d      	mov	r5, r1
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8011028:	d031      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 801102a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 801102e:	d02e      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011030:	f5a3 437c 	sub.w	r3, r3, #64512	; 0xfc00
 8011034:	4298      	cmp	r0, r3
 8011036:	d02a      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011038:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801103c:	4298      	cmp	r0, r3
 801103e:	d026      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011040:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011044:	4298      	cmp	r0, r3
 8011046:	d022      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011048:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 801104c:	4298      	cmp	r0, r3
 801104e:	d01e      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011050:	f503 5370 	add.w	r3, r3, #15360	; 0x3c00
 8011054:	4298      	cmp	r0, r3
 8011056:	d01a      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011058:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801105c:	4298      	cmp	r0, r3
 801105e:	d016      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011060:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011064:	4298      	cmp	r0, r3
 8011066:	d012      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011068:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 801106c:	4298      	cmp	r0, r3
 801106e:	d00e      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011070:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011074:	4298      	cmp	r0, r3
 8011076:	d00a      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801107c:	4298      	cmp	r0, r3
 801107e:	d006      	beq.n	801108e <TIM_CCxChannelCmd+0x72>
 8011080:	f641 6199 	movw	r1, #7833	; 0x1e99
 8011084:	4812      	ldr	r0, [pc, #72]	; (80110d0 <TIM_CCxChannelCmd+0xb4>)
 8011086:	9201      	str	r2, [sp, #4]
 8011088:	f7f3 fbd2 	bl	8004830 <assert_failed>
 801108c:	9a01      	ldr	r2, [sp, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
 801108e:	2d14      	cmp	r5, #20
 8011090:	d90f      	bls.n	80110b2 <TIM_CCxChannelCmd+0x96>
 8011092:	2d3c      	cmp	r5, #60	; 0x3c
 8011094:	d111      	bne.n	80110ba <TIM_CCxChannelCmd+0x9e>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8011096:	f005 051f 	and.w	r5, r5, #31
 801109a:	2101      	movs	r1, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801109c:	6a23      	ldr	r3, [r4, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 801109e:	40a9      	lsls	r1, r5

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110a0:	40aa      	lsls	r2, r5
  TIMx->CCER &= ~tmp;
 80110a2:	ea23 0301 	bic.w	r3, r3, r1
 80110a6:	6223      	str	r3, [r4, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80110a8:	6a25      	ldr	r5, [r4, #32]
 80110aa:	4315      	orrs	r5, r2
 80110ac:	6225      	str	r5, [r4, #32]
}
 80110ae:	b003      	add	sp, #12
 80110b0:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_CHANNELS(Channel));
 80110b2:	4b08      	ldr	r3, [pc, #32]	; (80110d4 <TIM_CCxChannelCmd+0xb8>)
 80110b4:	40eb      	lsrs	r3, r5
 80110b6:	07db      	lsls	r3, r3, #31
 80110b8:	d4ed      	bmi.n	8011096 <TIM_CCxChannelCmd+0x7a>
 80110ba:	f641 619a 	movw	r1, #7834	; 0x1e9a
 80110be:	4804      	ldr	r0, [pc, #16]	; (80110d0 <TIM_CCxChannelCmd+0xb4>)
 80110c0:	9201      	str	r2, [sp, #4]
 80110c2:	f7f3 fbb5 	bl	8004830 <assert_failed>
 80110c6:	9a01      	ldr	r2, [sp, #4]
 80110c8:	e7e5      	b.n	8011096 <TIM_CCxChannelCmd+0x7a>
 80110ca:	bf00      	nop
 80110cc:	40010000 	.word	0x40010000
 80110d0:	0802c5d8 	.word	0x0802c5d8
 80110d4:	00111111 	.word	0x00111111

080110d8 <HAL_TIM_IC_Start_DMA>:
{
 80110d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110dc:	4604      	mov	r4, r0
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110de:	460d      	mov	r5, r1
{
 80110e0:	4617      	mov	r7, r2
 80110e2:	4698      	mov	r8, r3
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110e4:	2900      	cmp	r1, #0
 80110e6:	f040 8087 	bne.w	80111f8 <HAL_TIM_IC_Start_DMA+0x120>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80110ea:	6803      	ldr	r3, [r0, #0]
 80110ec:	4aa4      	ldr	r2, [pc, #656]	; (8011380 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110ee:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80110f2:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110f4:	f890 9044 	ldrb.w	r9, [r0, #68]	; 0x44
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80110f8:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80110fa:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80110fe:	d037      	beq.n	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011104:	d034      	beq.n	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011106:	4a9f      	ldr	r2, [pc, #636]	; (8011384 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011108:	4293      	cmp	r3, r2
 801110a:	d031      	beq.n	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 801110c:	4a9e      	ldr	r2, [pc, #632]	; (8011388 <HAL_TIM_IC_Start_DMA+0x2b0>)
 801110e:	4293      	cmp	r3, r2
 8011110:	d066      	beq.n	80111e0 <HAL_TIM_IC_Start_DMA+0x108>
 8011112:	4a9e      	ldr	r2, [pc, #632]	; (801138c <HAL_TIM_IC_Start_DMA+0x2b4>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d063      	beq.n	80111e0 <HAL_TIM_IC_Start_DMA+0x108>
 8011118:	4a9d      	ldr	r2, [pc, #628]	; (8011390 <HAL_TIM_IC_Start_DMA+0x2b8>)
 801111a:	4293      	cmp	r3, r2
 801111c:	f040 80f7 	bne.w	801130e <HAL_TIM_IC_Start_DMA+0x236>
 8011120:	2d14      	cmp	r5, #20
 8011122:	d862      	bhi.n	80111ea <HAL_TIM_IC_Start_DMA+0x112>
 8011124:	4a9b      	ldr	r2, [pc, #620]	; (8011394 <HAL_TIM_IC_Start_DMA+0x2bc>)
 8011126:	40ea      	lsrs	r2, r5
 8011128:	07d2      	lsls	r2, r2, #31
 801112a:	d55e      	bpl.n	80111ea <HAL_TIM_IC_Start_DMA+0x112>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801112c:	4994      	ldr	r1, [pc, #592]	; (8011380 <HAL_TIM_IC_Start_DMA+0x2a8>)
 801112e:	4a95      	ldr	r2, [pc, #596]	; (8011384 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011130:	428b      	cmp	r3, r1
 8011132:	bf18      	it	ne
 8011134:	f1b3 4f80 	cmpne.w	r3, #1073741824	; 0x40000000
 8011138:	bf14      	ite	ne
 801113a:	2101      	movne	r1, #1
 801113c:	2100      	moveq	r1, #0
 801113e:	4293      	cmp	r3, r2
 8011140:	bf0c      	ite	eq
 8011142:	2100      	moveq	r1, #0
 8011144:	f001 0101 	andne.w	r1, r1, #1
 8011148:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801114c:	4293      	cmp	r3, r2
 801114e:	bf0c      	ite	eq
 8011150:	2100      	moveq	r1, #0
 8011152:	f001 0101 	andne.w	r1, r1, #1
 8011156:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801115a:	4293      	cmp	r3, r2
 801115c:	bf0c      	ite	eq
 801115e:	2100      	moveq	r1, #0
 8011160:	f001 0101 	andne.w	r1, r1, #1
 8011164:	b121      	cbz	r1, 8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011166:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 801116a:	4293      	cmp	r3, r2
 801116c:	f040 80c5 	bne.w	80112fa <HAL_TIM_IC_Start_DMA+0x222>
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8011170:	2e02      	cmp	r6, #2
 8011172:	d06a      	beq.n	801124a <HAL_TIM_IC_Start_DMA+0x172>
 8011174:	f1b9 0f02 	cmp.w	r9, #2
 8011178:	d067      	beq.n	801124a <HAL_TIM_IC_Start_DMA+0x172>
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 801117a:	2e01      	cmp	r6, #1
 801117c:	d106      	bne.n	801118c <HAL_TIM_IC_Start_DMA+0xb4>
 801117e:	f1b9 0f01 	cmp.w	r9, #1
 8011182:	d103      	bne.n	801118c <HAL_TIM_IC_Start_DMA+0xb4>
    if ((pData == NULL) && (Length > 0U))
 8011184:	b92f      	cbnz	r7, 8011192 <HAL_TIM_IC_Start_DMA+0xba>
 8011186:	f1b8 0f00 	cmp.w	r8, #0
 801118a:	d002      	beq.n	8011192 <HAL_TIM_IC_Start_DMA+0xba>
    return HAL_ERROR;
 801118c:	2001      	movs	r0, #1
}
 801118e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011192:	2302      	movs	r3, #2
 8011194:	2d00      	cmp	r5, #0
 8011196:	d05b      	beq.n	8011250 <HAL_TIM_IC_Start_DMA+0x178>
 8011198:	2d04      	cmp	r5, #4
 801119a:	f000 8119 	beq.w	80113d0 <HAL_TIM_IC_Start_DMA+0x2f8>
 801119e:	2d08      	cmp	r5, #8
 80111a0:	f000 8141 	beq.w	8011426 <HAL_TIM_IC_Start_DMA+0x34e>
 80111a4:	2d0c      	cmp	r5, #12
 80111a6:	f000 815d 	beq.w	8011464 <HAL_TIM_IC_Start_DMA+0x38c>
 80111aa:	2d10      	cmp	r5, #16
 80111ac:	f000 812f 	beq.w	801140e <HAL_TIM_IC_Start_DMA+0x336>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80111b0:	4629      	mov	r1, r5
  switch (Channel)
 80111b2:	3d04      	subs	r5, #4
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80111b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80111b8:	2201      	movs	r2, #1
 80111ba:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80111bc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80111c0:	f7ff ff2c 	bl	801101c <TIM_CCxChannelCmd>
  switch (Channel)
 80111c4:	2d08      	cmp	r5, #8
 80111c6:	f200 812b 	bhi.w	8011420 <HAL_TIM_IC_Start_DMA+0x348>
 80111ca:	e8df f015 	tbh	[pc, r5, lsl #1]
 80111ce:	010a      	.short	0x010a
 80111d0:	01290129 	.word	0x01290129
 80111d4:	01350129 	.word	0x01350129
 80111d8:	01290129 	.word	0x01290129
 80111dc:	01540129 	.word	0x01540129
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80111e0:	f035 0204 	bics.w	r2, r5, #4
 80111e4:	d0a2      	beq.n	801112c <HAL_TIM_IC_Start_DMA+0x54>
 80111e6:	2a08      	cmp	r2, #8
 80111e8:	d0a0      	beq.n	801112c <HAL_TIM_IC_Start_DMA+0x54>
 80111ea:	f640 114a 	movw	r1, #2378	; 0x94a
 80111ee:	486a      	ldr	r0, [pc, #424]	; (8011398 <HAL_TIM_IC_Start_DMA+0x2c0>)
 80111f0:	f7f3 fb1e 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80111f4:	6823      	ldr	r3, [r4, #0]
 80111f6:	e799      	b.n	801112c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80111f8:	2904      	cmp	r1, #4
 80111fa:	f000 8090 	beq.w	801131e <HAL_TIM_IC_Start_DMA+0x246>
 80111fe:	2908      	cmp	r1, #8
 8011200:	f000 80e0 	beq.w	80113c4 <HAL_TIM_IC_Start_DMA+0x2ec>
 8011204:	290c      	cmp	r1, #12
 8011206:	d07e      	beq.n	8011306 <HAL_TIM_IC_Start_DMA+0x22e>
 8011208:	2910      	cmp	r1, #16
 801120a:	f000 814a 	beq.w	80114a2 <HAL_TIM_IC_Start_DMA+0x3ca>
 801120e:	f890 6043 	ldrb.w	r6, [r0, #67]	; 0x43
 8011212:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011214:	6823      	ldr	r3, [r4, #0]
 8011216:	4a5a      	ldr	r2, [pc, #360]	; (8011380 <HAL_TIM_IC_Start_DMA+0x2a8>)
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011218:	f894 9047 	ldrb.w	r9, [r4, #71]	; 0x47
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801121c:	4293      	cmp	r3, r2
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801121e:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011222:	f000 8098 	beq.w	8011356 <HAL_TIM_IC_Start_DMA+0x27e>
 8011226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801122a:	f000 8088 	beq.w	801133e <HAL_TIM_IC_Start_DMA+0x266>
 801122e:	4a55      	ldr	r2, [pc, #340]	; (8011384 <HAL_TIM_IC_Start_DMA+0x2ac>)
 8011230:	4293      	cmp	r3, r2
 8011232:	f47f af6b 	bne.w	801110c <HAL_TIM_IC_Start_DMA+0x34>
 8011236:	f035 020c 	bics.w	r2, r5, #12
 801123a:	d099      	beq.n	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 801123c:	4a57      	ldr	r2, [pc, #348]	; (801139c <HAL_TIM_IC_Start_DMA+0x2c4>)
 801123e:	4293      	cmp	r3, r2
 8011240:	d1d3      	bne.n	80111ea <HAL_TIM_IC_Start_DMA+0x112>
 8011242:	2d00      	cmp	r5, #0
 8011244:	f43f af72 	beq.w	801112c <HAL_TIM_IC_Start_DMA+0x54>
 8011248:	e7cf      	b.n	80111ea <HAL_TIM_IC_Start_DMA+0x112>
    return HAL_BUSY;
 801124a:	2002      	movs	r0, #2
}
 801124c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011250:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011254:	4629      	mov	r1, r5
 8011256:	2201      	movs	r2, #1
 8011258:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801125a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801125e:	f7ff fedd 	bl	801101c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8011262:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8011264:	494e      	ldr	r1, [pc, #312]	; (80113a0 <HAL_TIM_IC_Start_DMA+0x2c8>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8011266:	4643      	mov	r3, r8
 8011268:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 801126a:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 801126c:	494d      	ldr	r1, [pc, #308]	; (80113a4 <HAL_TIM_IC_Start_DMA+0x2cc>)
 801126e:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8011270:	494d      	ldr	r1, [pc, #308]	; (80113a8 <HAL_TIM_IC_Start_DMA+0x2d0>)
 8011272:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8011274:	6821      	ldr	r1, [r4, #0]
 8011276:	3134      	adds	r1, #52	; 0x34
 8011278:	f7f7 feb8 	bl	8008fec <HAL_DMA_Start_IT>
 801127c:	2800      	cmp	r0, #0
 801127e:	d185      	bne.n	801118c <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8011280:	6822      	ldr	r2, [r4, #0]
 8011282:	68d3      	ldr	r3, [r2, #12]
 8011284:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011288:	60d3      	str	r3, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801128a:	4b3d      	ldr	r3, [pc, #244]	; (8011380 <HAL_TIM_IC_Start_DMA+0x2a8>)
 801128c:	4c3d      	ldr	r4, [pc, #244]	; (8011384 <HAL_TIM_IC_Start_DMA+0x2ac>)
 801128e:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8011292:	bf18      	it	ne
 8011294:	429a      	cmpne	r2, r3
 8011296:	493c      	ldr	r1, [pc, #240]	; (8011388 <HAL_TIM_IC_Start_DMA+0x2b0>)
 8011298:	bf0c      	ite	eq
 801129a:	2301      	moveq	r3, #1
 801129c:	2300      	movne	r3, #0
 801129e:	42a2      	cmp	r2, r4
 80112a0:	bf08      	it	eq
 80112a2:	f043 0301 	orreq.w	r3, r3, #1
 80112a6:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80112aa:	428a      	cmp	r2, r1
 80112ac:	bf08      	it	eq
 80112ae:	f043 0301 	orreq.w	r3, r3, #1
 80112b2:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 80112b6:	42a2      	cmp	r2, r4
 80112b8:	bf08      	it	eq
 80112ba:	f043 0301 	orreq.w	r3, r3, #1
 80112be:	428a      	cmp	r2, r1
 80112c0:	bf08      	it	eq
 80112c2:	f043 0301 	orreq.w	r3, r3, #1
 80112c6:	f501 5170 	add.w	r1, r1, #15360	; 0x3c00
 80112ca:	428a      	cmp	r2, r1
 80112cc:	bf08      	it	eq
 80112ce:	f043 0301 	orreq.w	r3, r3, #1
 80112d2:	b913      	cbnz	r3, 80112da <HAL_TIM_IC_Start_DMA+0x202>
 80112d4:	4b35      	ldr	r3, [pc, #212]	; (80113ac <HAL_TIM_IC_Start_DMA+0x2d4>)
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d109      	bne.n	80112ee <HAL_TIM_IC_Start_DMA+0x216>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80112da:	6891      	ldr	r1, [r2, #8]
 80112dc:	4b34      	ldr	r3, [pc, #208]	; (80113b0 <HAL_TIM_IC_Start_DMA+0x2d8>)
 80112de:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80112e0:	2b06      	cmp	r3, #6
 80112e2:	f43f af54 	beq.w	801118e <HAL_TIM_IC_Start_DMA+0xb6>
 80112e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80112ea:	f43f af50 	beq.w	801118e <HAL_TIM_IC_Start_DMA+0xb6>
    __HAL_TIM_ENABLE(htim);
 80112ee:	6813      	ldr	r3, [r2, #0]
 80112f0:	f043 0301 	orr.w	r3, r3, #1
 80112f4:	6013      	str	r3, [r2, #0]
}
 80112f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80112fa:	f640 114b 	movw	r1, #2379	; 0x94b
 80112fe:	4826      	ldr	r0, [pc, #152]	; (8011398 <HAL_TIM_IC_Start_DMA+0x2c0>)
 8011300:	f7f3 fa96 	bl	8004830 <assert_failed>
 8011304:	e734      	b.n	8011170 <HAL_TIM_IC_Start_DMA+0x98>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011306:	f890 6041 	ldrb.w	r6, [r0, #65]	; 0x41
 801130a:	b2f6      	uxtb	r6, r6
 801130c:	e782      	b.n	8011214 <HAL_TIM_IC_Start_DMA+0x13c>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801130e:	4a29      	ldr	r2, [pc, #164]	; (80113b4 <HAL_TIM_IC_Start_DMA+0x2dc>)
 8011310:	4293      	cmp	r3, r2
 8011312:	d128      	bne.n	8011366 <HAL_TIM_IC_Start_DMA+0x28e>
 8011314:	f035 0204 	bics.w	r2, r5, #4
 8011318:	f47f af67 	bne.w	80111ea <HAL_TIM_IC_Start_DMA+0x112>
 801131c:	e706      	b.n	801112c <HAL_TIM_IC_Start_DMA+0x54>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 801131e:	f890 603f 	ldrb.w	r6, [r0, #63]	; 0x3f
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8011322:	f890 9045 	ldrb.w	r9, [r0, #69]	; 0x45
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8011326:	b2f6      	uxtb	r6, r6
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011328:	6823      	ldr	r3, [r4, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 801132a:	fa5f f989 	uxtb.w	r9, r9
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801132e:	4a14      	ldr	r2, [pc, #80]	; (8011380 <HAL_TIM_IC_Start_DMA+0x2a8>)
 8011330:	4293      	cmp	r3, r2
 8011332:	f43f af1d 	beq.w	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801133a:	f47f af78 	bne.w	801122e <HAL_TIM_IC_Start_DMA+0x156>
 801133e:	f035 020c 	bics.w	r2, r5, #12
 8011342:	f43f af15 	beq.w	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011346:	4a1c      	ldr	r2, [pc, #112]	; (80113b8 <HAL_TIM_IC_Start_DMA+0x2e0>)
 8011348:	4293      	cmp	r3, r2
 801134a:	f47f af77 	bne.w	801123c <HAL_TIM_IC_Start_DMA+0x164>
 801134e:	2d00      	cmp	r5, #0
 8011350:	f43f aeec 	beq.w	801112c <HAL_TIM_IC_Start_DMA+0x54>
 8011354:	e749      	b.n	80111ea <HAL_TIM_IC_Start_DMA+0x112>
 8011356:	f025 0204 	bic.w	r2, r5, #4
 801135a:	2a08      	cmp	r2, #8
 801135c:	f43f af08 	beq.w	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011360:	2a10      	cmp	r2, #16
 8011362:	f43f af05 	beq.w	8011170 <HAL_TIM_IC_Start_DMA+0x98>
 8011366:	4a15      	ldr	r2, [pc, #84]	; (80113bc <HAL_TIM_IC_Start_DMA+0x2e4>)
 8011368:	4293      	cmp	r3, r2
 801136a:	f43f af6a 	beq.w	8011242 <HAL_TIM_IC_Start_DMA+0x16a>
 801136e:	4a14      	ldr	r2, [pc, #80]	; (80113c0 <HAL_TIM_IC_Start_DMA+0x2e8>)
 8011370:	4293      	cmp	r3, r2
 8011372:	f43f af66 	beq.w	8011242 <HAL_TIM_IC_Start_DMA+0x16a>
 8011376:	4a0d      	ldr	r2, [pc, #52]	; (80113ac <HAL_TIM_IC_Start_DMA+0x2d4>)
 8011378:	4293      	cmp	r3, r2
 801137a:	d0cb      	beq.n	8011314 <HAL_TIM_IC_Start_DMA+0x23c>
 801137c:	e7e3      	b.n	8011346 <HAL_TIM_IC_Start_DMA+0x26e>
 801137e:	bf00      	nop
 8011380:	40010000 	.word	0x40010000
 8011384:	40000400 	.word	0x40000400
 8011388:	40000800 	.word	0x40000800
 801138c:	40000c00 	.word	0x40000c00
 8011390:	40010400 	.word	0x40010400
 8011394:	00111111 	.word	0x00111111
 8011398:	0802c5d8 	.word	0x0802c5d8
 801139c:	40002000 	.word	0x40002000
 80113a0:	0800fa09 	.word	0x0800fa09
 80113a4:	0800faa1 	.word	0x0800faa1
 80113a8:	0800fc85 	.word	0x0800fc85
 80113ac:	40001800 	.word	0x40001800
 80113b0:	00010007 	.word	0x00010007
 80113b4:	40014000 	.word	0x40014000
 80113b8:	40001c00 	.word	0x40001c00
 80113bc:	40014400 	.word	0x40014400
 80113c0:	40014800 	.word	0x40014800
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80113c4:	f890 6040 	ldrb.w	r6, [r0, #64]	; 0x40
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80113c8:	f890 9046 	ldrb.w	r9, [r0, #70]	; 0x46
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80113cc:	b2f6      	uxtb	r6, r6
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80113ce:	e7ab      	b.n	8011328 <HAL_TIM_IC_Start_DMA+0x250>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80113d0:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80113d4:	4629      	mov	r1, r5
 80113d6:	2201      	movs	r2, #1
 80113d8:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80113da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80113de:	f7ff fe1d 	bl	801101c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80113e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80113e4:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80113e6:	4931      	ldr	r1, [pc, #196]	; (80114ac <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80113e8:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80113ea:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80113ec:	4930      	ldr	r1, [pc, #192]	; (80114b0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 80113ee:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80113f0:	4930      	ldr	r1, [pc, #192]	; (80114b4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 80113f2:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 80113f4:	6821      	ldr	r1, [r4, #0]
 80113f6:	3138      	adds	r1, #56	; 0x38
 80113f8:	f7f7 fdf8 	bl	8008fec <HAL_DMA_Start_IT>
 80113fc:	2800      	cmp	r0, #0
 80113fe:	f47f aec5 	bne.w	801118c <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8011402:	6822      	ldr	r2, [r4, #0]
 8011404:	68d3      	ldr	r3, [r2, #12]
 8011406:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 801140a:	60d3      	str	r3, [r2, #12]
      break;
 801140c:	e73d      	b.n	801128a <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801140e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011412:	2201      	movs	r2, #1
 8011414:	4629      	mov	r1, r5
 8011416:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011418:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801141c:	f7ff fdfe 	bl	801101c <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011420:	6822      	ldr	r2, [r4, #0]
      status = HAL_ERROR;
 8011422:	2001      	movs	r0, #1
 8011424:	e731      	b.n	801128a <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011426:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 801142a:	4629      	mov	r1, r5
 801142c:	2201      	movs	r2, #1
 801142e:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011430:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011434:	f7ff fdf2 	bl	801101c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011438:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801143a:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 801143c:	491b      	ldr	r1, [pc, #108]	; (80114ac <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801143e:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8011440:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011442:	491b      	ldr	r1, [pc, #108]	; (80114b0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011444:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8011446:	491b      	ldr	r1, [pc, #108]	; (80114b4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011448:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 801144a:	6821      	ldr	r1, [r4, #0]
 801144c:	313c      	adds	r1, #60	; 0x3c
 801144e:	f7f7 fdcd 	bl	8008fec <HAL_DMA_Start_IT>
 8011452:	2800      	cmp	r0, #0
 8011454:	f47f ae9a 	bne.w	801118c <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8011458:	6822      	ldr	r2, [r4, #0]
 801145a:	68d3      	ldr	r3, [r2, #12]
 801145c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011460:	60d3      	str	r3, [r2, #12]
      break;
 8011462:	e712      	b.n	801128a <HAL_TIM_IC_Start_DMA+0x1b2>
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8011464:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011468:	4629      	mov	r1, r5
 801146a:	2201      	movs	r2, #1
 801146c:	6820      	ldr	r0, [r4, #0]
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 801146e:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8011472:	f7ff fdd3 	bl	801101c <TIM_CCxChannelCmd>
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8011476:	6b20      	ldr	r0, [r4, #48]	; 0x30
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011478:	4643      	mov	r3, r8
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801147a:	490c      	ldr	r1, [pc, #48]	; (80114ac <HAL_TIM_IC_Start_DMA+0x3d4>)
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 801147c:	463a      	mov	r2, r7
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 801147e:	63c1      	str	r1, [r0, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8011480:	490b      	ldr	r1, [pc, #44]	; (80114b0 <HAL_TIM_IC_Start_DMA+0x3d8>)
 8011482:	6401      	str	r1, [r0, #64]	; 0x40
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8011484:	490b      	ldr	r1, [pc, #44]	; (80114b4 <HAL_TIM_IC_Start_DMA+0x3dc>)
 8011486:	64c1      	str	r1, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8011488:	6821      	ldr	r1, [r4, #0]
 801148a:	3140      	adds	r1, #64	; 0x40
 801148c:	f7f7 fdae 	bl	8008fec <HAL_DMA_Start_IT>
 8011490:	2800      	cmp	r0, #0
 8011492:	f47f ae7b 	bne.w	801118c <HAL_TIM_IC_Start_DMA+0xb4>
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8011496:	6822      	ldr	r2, [r4, #0]
 8011498:	68d3      	ldr	r3, [r2, #12]
 801149a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801149e:	60d3      	str	r3, [r2, #12]
      break;
 80114a0:	e6f3      	b.n	801128a <HAL_TIM_IC_Start_DMA+0x1b2>
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80114a2:	f890 6042 	ldrb.w	r6, [r0, #66]	; 0x42
 80114a6:	b2f6      	uxtb	r6, r6
 80114a8:	e6b4      	b.n	8011214 <HAL_TIM_IC_Start_DMA+0x13c>
 80114aa:	bf00      	nop
 80114ac:	0800fa09 	.word	0x0800fa09
 80114b0:	0800faa1 	.word	0x0800faa1
 80114b4:	0800fc85 	.word	0x0800fc85

080114b8 <HAL_TIM_IC_Stop_DMA>:
{
 80114b8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114ba:	4b82      	ldr	r3, [pc, #520]	; (80116c4 <HAL_TIM_IC_Stop_DMA+0x20c>)
{
 80114bc:	4604      	mov	r4, r0
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114be:	6800      	ldr	r0, [r0, #0]
{
 80114c0:	460d      	mov	r5, r1
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 80114c2:	4298      	cmp	r0, r3
 80114c4:	f000 80cc 	beq.w	8011660 <HAL_TIM_IC_Stop_DMA+0x1a8>
 80114c8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80114cc:	d056      	beq.n	801157c <HAL_TIM_IC_Stop_DMA+0xc4>
 80114ce:	4b7e      	ldr	r3, [pc, #504]	; (80116c8 <HAL_TIM_IC_Stop_DMA+0x210>)
 80114d0:	4298      	cmp	r0, r3
 80114d2:	d053      	beq.n	801157c <HAL_TIM_IC_Stop_DMA+0xc4>
 80114d4:	4b7d      	ldr	r3, [pc, #500]	; (80116cc <HAL_TIM_IC_Stop_DMA+0x214>)
 80114d6:	4298      	cmp	r0, r3
 80114d8:	d050      	beq.n	801157c <HAL_TIM_IC_Stop_DMA+0xc4>
 80114da:	4b7d      	ldr	r3, [pc, #500]	; (80116d0 <HAL_TIM_IC_Stop_DMA+0x218>)
 80114dc:	4298      	cmp	r0, r3
 80114de:	d04d      	beq.n	801157c <HAL_TIM_IC_Stop_DMA+0xc4>
 80114e0:	4b7c      	ldr	r3, [pc, #496]	; (80116d4 <HAL_TIM_IC_Stop_DMA+0x21c>)
 80114e2:	4298      	cmp	r0, r3
 80114e4:	f000 80bc 	beq.w	8011660 <HAL_TIM_IC_Stop_DMA+0x1a8>
 80114e8:	4b7b      	ldr	r3, [pc, #492]	; (80116d8 <HAL_TIM_IC_Stop_DMA+0x220>)
 80114ea:	4298      	cmp	r0, r3
 80114ec:	d00c      	beq.n	8011508 <HAL_TIM_IC_Stop_DMA+0x50>
 80114ee:	4b7b      	ldr	r3, [pc, #492]	; (80116dc <HAL_TIM_IC_Stop_DMA+0x224>)
 80114f0:	4298      	cmp	r0, r3
 80114f2:	f000 80d9 	beq.w	80116a8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80114f6:	4b7a      	ldr	r3, [pc, #488]	; (80116e0 <HAL_TIM_IC_Stop_DMA+0x228>)
 80114f8:	4298      	cmp	r0, r3
 80114fa:	f000 80d5 	beq.w	80116a8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80114fe:	f5a3 3398 	sub.w	r3, r3, #77824	; 0x13000
 8011502:	4298      	cmp	r0, r3
 8011504:	f040 80c9 	bne.w	801169a <HAL_TIM_IC_Stop_DMA+0x1e2>
 8011508:	f035 0304 	bics.w	r3, r5, #4
 801150c:	f000 80cf 	beq.w	80116ae <HAL_TIM_IC_Stop_DMA+0x1f6>
 8011510:	4874      	ldr	r0, [pc, #464]	; (80116e4 <HAL_TIM_IC_Stop_DMA+0x22c>)
 8011512:	f640 11e5 	movw	r1, #2533	; 0x9e5
 8011516:	f7f3 f98b 	bl	8004830 <assert_failed>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 801151a:	6820      	ldr	r0, [r4, #0]
 801151c:	4b69      	ldr	r3, [pc, #420]	; (80116c4 <HAL_TIM_IC_Stop_DMA+0x20c>)
 801151e:	4a6a      	ldr	r2, [pc, #424]	; (80116c8 <HAL_TIM_IC_Stop_DMA+0x210>)
 8011520:	4298      	cmp	r0, r3
 8011522:	bf18      	it	ne
 8011524:	f1b0 4f80 	cmpne.w	r0, #1073741824	; 0x40000000
 8011528:	bf14      	ite	ne
 801152a:	2301      	movne	r3, #1
 801152c:	2300      	moveq	r3, #0
 801152e:	4290      	cmp	r0, r2
 8011530:	bf0c      	ite	eq
 8011532:	2300      	moveq	r3, #0
 8011534:	f003 0301 	andne.w	r3, r3, #1
 8011538:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801153c:	4290      	cmp	r0, r2
 801153e:	bf0c      	ite	eq
 8011540:	2300      	moveq	r3, #0
 8011542:	f003 0301 	andne.w	r3, r3, #1
 8011546:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 801154a:	4290      	cmp	r0, r2
 801154c:	bf0c      	ite	eq
 801154e:	2300      	moveq	r3, #0
 8011550:	f003 0301 	andne.w	r3, r3, #1
 8011554:	b11b      	cbz	r3, 801155e <HAL_TIM_IC_Stop_DMA+0xa6>
 8011556:	4b5f      	ldr	r3, [pc, #380]	; (80116d4 <HAL_TIM_IC_Stop_DMA+0x21c>)
 8011558:	4298      	cmp	r0, r3
 801155a:	f040 80a8 	bne.w	80116ae <HAL_TIM_IC_Stop_DMA+0x1f6>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 801155e:	2200      	movs	r2, #0
 8011560:	4629      	mov	r1, r5
 8011562:	f7ff fd5b 	bl	801101c <TIM_CCxChannelCmd>
  switch (Channel)
 8011566:	2d0c      	cmp	r5, #12
 8011568:	d80c      	bhi.n	8011584 <HAL_TIM_IC_Stop_DMA+0xcc>
 801156a:	e8df f005 	tbb	[pc, r5]
 801156e:	0b0d      	.short	0x0b0d
 8011570:	0b640b0b 	.word	0x0b640b0b
 8011574:	0b4a0b0b 	.word	0x0b4a0b0b
 8011578:	0b0b      	.short	0x0b0b
 801157a:	22          	.byte	0x22
 801157b:	00          	.byte	0x00
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801157c:	f035 030c 	bics.w	r3, r5, #12
 8011580:	d1c6      	bne.n	8011510 <HAL_TIM_IC_Stop_DMA+0x58>
 8011582:	e7ec      	b.n	801155e <HAL_TIM_IC_Stop_DMA+0xa6>
  switch (Channel)
 8011584:	2001      	movs	r0, #1
}
 8011586:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8011588:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 801158a:	6a60      	ldr	r0, [r4, #36]	; 0x24
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 801158c:	68d3      	ldr	r3, [r2, #12]
 801158e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011592:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8011594:	f7f7 fdce 	bl	8009134 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	f241 1211 	movw	r2, #4369	; 0x1111
 801159e:	6a19      	ldr	r1, [r3, #32]
 80115a0:	4211      	tst	r1, r2
 80115a2:	d06c      	beq.n	801167e <HAL_TIM_IC_Stop_DMA+0x1c6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115a4:	2301      	movs	r3, #1
 80115a6:	2000      	movs	r0, #0
 80115a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80115b0:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80115b2:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80115b4:	6b20      	ldr	r0, [r4, #48]	; 0x30
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80115b6:	68d3      	ldr	r3, [r2, #12]
 80115b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115bc:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80115be:	f7f7 fdb9 	bl	8009134 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 80115c2:	6823      	ldr	r3, [r4, #0]
 80115c4:	f241 1211 	movw	r2, #4369	; 0x1111
 80115c8:	6a19      	ldr	r1, [r3, #32]
 80115ca:	4211      	tst	r1, r2
 80115cc:	d161      	bne.n	8011692 <HAL_TIM_IC_Stop_DMA+0x1da>
 80115ce:	6a19      	ldr	r1, [r3, #32]
 80115d0:	f240 4244 	movw	r2, #1092	; 0x444
 80115d4:	4211      	tst	r1, r2
 80115d6:	d15c      	bne.n	8011692 <HAL_TIM_IC_Stop_DMA+0x1da>
 80115d8:	681a      	ldr	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115da:	2d04      	cmp	r5, #4
    __HAL_TIM_DISABLE(htim);
 80115dc:	f022 0201 	bic.w	r2, r2, #1
 80115e0:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115e2:	d036      	beq.n	8011652 <HAL_TIM_IC_Stop_DMA+0x19a>
 80115e4:	2d08      	cmp	r5, #8
 80115e6:	d01f      	beq.n	8011628 <HAL_TIM_IC_Stop_DMA+0x170>
 80115e8:	2d0c      	cmp	r5, #12
 80115ea:	d052      	beq.n	8011692 <HAL_TIM_IC_Stop_DMA+0x1da>
 80115ec:	2d10      	cmp	r5, #16
 80115ee:	f04f 0301 	mov.w	r3, #1
 80115f2:	d063      	beq.n	80116bc <HAL_TIM_IC_Stop_DMA+0x204>
 80115f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80115f8:	2301      	movs	r3, #1
 80115fa:	2000      	movs	r0, #0
 80115fc:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
}
 8011600:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011602:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8011604:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8011606:	68d3      	ldr	r3, [r2, #12]
 8011608:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801160c:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 801160e:	f7f7 fd91 	bl	8009134 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011612:	6823      	ldr	r3, [r4, #0]
 8011614:	f241 1211 	movw	r2, #4369	; 0x1111
 8011618:	6a19      	ldr	r1, [r3, #32]
 801161a:	4211      	tst	r1, r2
 801161c:	d104      	bne.n	8011628 <HAL_TIM_IC_Stop_DMA+0x170>
 801161e:	6a19      	ldr	r1, [r3, #32]
 8011620:	f240 4244 	movw	r2, #1092	; 0x444
 8011624:	4211      	tst	r1, r2
 8011626:	d0d7      	beq.n	80115d8 <HAL_TIM_IC_Stop_DMA+0x120>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011628:	2301      	movs	r3, #1
 801162a:	2000      	movs	r0, #0
 801162c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011630:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
}
 8011634:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8011636:	6822      	ldr	r2, [r4, #0]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011638:	6aa0      	ldr	r0, [r4, #40]	; 0x28
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 801163a:	68d3      	ldr	r3, [r2, #12]
 801163c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8011640:	60d3      	str	r3, [r2, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8011642:	f7f7 fd77 	bl	8009134 <HAL_DMA_Abort_IT>
    __HAL_TIM_DISABLE(htim);
 8011646:	6823      	ldr	r3, [r4, #0]
 8011648:	f241 1211 	movw	r2, #4369	; 0x1111
 801164c:	6a19      	ldr	r1, [r3, #32]
 801164e:	4211      	tst	r1, r2
 8011650:	d00f      	beq.n	8011672 <HAL_TIM_IC_Stop_DMA+0x1ba>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011652:	2301      	movs	r3, #1
 8011654:	2000      	movs	r0, #0
 8011656:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 801165a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
}
 801165e:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8011660:	2d14      	cmp	r5, #20
 8011662:	f63f af55 	bhi.w	8011510 <HAL_TIM_IC_Stop_DMA+0x58>
 8011666:	4b20      	ldr	r3, [pc, #128]	; (80116e8 <HAL_TIM_IC_Stop_DMA+0x230>)
 8011668:	40eb      	lsrs	r3, r5
 801166a:	07db      	lsls	r3, r3, #31
 801166c:	f53f af77 	bmi.w	801155e <HAL_TIM_IC_Stop_DMA+0xa6>
 8011670:	e74e      	b.n	8011510 <HAL_TIM_IC_Stop_DMA+0x58>
    __HAL_TIM_DISABLE(htim);
 8011672:	6a19      	ldr	r1, [r3, #32]
 8011674:	f240 4244 	movw	r2, #1092	; 0x444
 8011678:	4211      	tst	r1, r2
 801167a:	d0ad      	beq.n	80115d8 <HAL_TIM_IC_Stop_DMA+0x120>
 801167c:	e7e9      	b.n	8011652 <HAL_TIM_IC_Stop_DMA+0x19a>
 801167e:	6a19      	ldr	r1, [r3, #32]
 8011680:	f240 4244 	movw	r2, #1092	; 0x444
 8011684:	4211      	tst	r1, r2
 8011686:	d18d      	bne.n	80115a4 <HAL_TIM_IC_Stop_DMA+0xec>
 8011688:	681a      	ldr	r2, [r3, #0]
 801168a:	f022 0201 	bic.w	r2, r2, #1
 801168e:	601a      	str	r2, [r3, #0]
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8011690:	e788      	b.n	80115a4 <HAL_TIM_IC_Stop_DMA+0xec>
 8011692:	2301      	movs	r3, #1
 8011694:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8011698:	e7ae      	b.n	80115f8 <HAL_TIM_IC_Stop_DMA+0x140>
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 801169a:	4b14      	ldr	r3, [pc, #80]	; (80116ec <HAL_TIM_IC_Stop_DMA+0x234>)
 801169c:	4298      	cmp	r0, r3
 801169e:	d003      	beq.n	80116a8 <HAL_TIM_IC_Stop_DMA+0x1f0>
 80116a0:	4b13      	ldr	r3, [pc, #76]	; (80116f0 <HAL_TIM_IC_Stop_DMA+0x238>)
 80116a2:	4298      	cmp	r0, r3
 80116a4:	f47f af34 	bne.w	8011510 <HAL_TIM_IC_Stop_DMA+0x58>
 80116a8:	2d00      	cmp	r5, #0
 80116aa:	f47f af31 	bne.w	8011510 <HAL_TIM_IC_Stop_DMA+0x58>
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));
 80116ae:	480d      	ldr	r0, [pc, #52]	; (80116e4 <HAL_TIM_IC_Stop_DMA+0x22c>)
 80116b0:	f640 11e6 	movw	r1, #2534	; 0x9e6
 80116b4:	f7f3 f8bc 	bl	8004830 <assert_failed>
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80116b8:	6820      	ldr	r0, [r4, #0]
 80116ba:	e750      	b.n	801155e <HAL_TIM_IC_Stop_DMA+0xa6>
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80116bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80116c0:	e79a      	b.n	80115f8 <HAL_TIM_IC_Stop_DMA+0x140>
 80116c2:	bf00      	nop
 80116c4:	40010000 	.word	0x40010000
 80116c8:	40000400 	.word	0x40000400
 80116cc:	40000800 	.word	0x40000800
 80116d0:	40000c00 	.word	0x40000c00
 80116d4:	40010400 	.word	0x40010400
 80116d8:	40014000 	.word	0x40014000
 80116dc:	40014400 	.word	0x40014400
 80116e0:	40014800 	.word	0x40014800
 80116e4:	0802c5d8 	.word	0x0802c5d8
 80116e8:	00111111 	.word	0x00111111
 80116ec:	40001c00 	.word	0x40001c00
 80116f0:	40002000 	.word	0x40002000

080116f4 <HAL_TIMEx_MasterConfigSynchronization>:
{
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80116f4:	6802      	ldr	r2, [r0, #0]
{
 80116f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80116fa:	4b6d      	ldr	r3, [pc, #436]	; (80118b0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>)
{
 80116fc:	460d      	mov	r5, r1
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 80116fe:	4f6d      	ldr	r7, [pc, #436]	; (80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
{
 8011700:	4604      	mov	r4, r0
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011702:	429a      	cmp	r2, r3
 8011704:	bf18      	it	ne
 8011706:	f1b2 4f80 	cmpne.w	r2, #1073741824	; 0x40000000
 801170a:	4e6b      	ldr	r6, [pc, #428]	; (80118b8 <HAL_TIMEx_MasterConfigSynchronization+0x1c4>)
 801170c:	496b      	ldr	r1, [pc, #428]	; (80118bc <HAL_TIMEx_MasterConfigSynchronization+0x1c8>)
 801170e:	bf14      	ite	ne
 8011710:	2301      	movne	r3, #1
 8011712:	2300      	moveq	r3, #0
 8011714:	42ba      	cmp	r2, r7
 8011716:	bf0c      	ite	eq
 8011718:	2300      	moveq	r3, #0
 801171a:	f003 0301 	andne.w	r3, r3, #1
 801171e:	42b2      	cmp	r2, r6
 8011720:	bf0c      	ite	eq
 8011722:	2300      	moveq	r3, #0
 8011724:	f003 0301 	andne.w	r3, r3, #1
 8011728:	428a      	cmp	r2, r1
 801172a:	bf0c      	ite	eq
 801172c:	2300      	moveq	r3, #0
 801172e:	f003 0301 	andne.w	r3, r3, #1
 8011732:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011736:	428a      	cmp	r2, r1
 8011738:	bf0c      	ite	eq
 801173a:	2300      	moveq	r3, #0
 801173c:	f003 0301 	andne.w	r3, r3, #1
 8011740:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8011744:	428a      	cmp	r2, r1
 8011746:	bf0c      	ite	eq
 8011748:	2300      	moveq	r3, #0
 801174a:	f003 0301 	andne.w	r3, r3, #1
 801174e:	b11b      	cbz	r3, 8011758 <HAL_TIMEx_MasterConfigSynchronization+0x64>
 8011750:	4b5b      	ldr	r3, [pc, #364]	; (80118c0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>)
 8011752:	429a      	cmp	r2, r3
 8011754:	f040 808c 	bne.w	8011870 <HAL_TIMEx_MasterConfigSynchronization+0x17c>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8011758:	682b      	ldr	r3, [r5, #0]
 801175a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 801175e:	2b40      	cmp	r3, #64	; 0x40
 8011760:	d002      	beq.n	8011768 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8011762:	2b00      	cmp	r3, #0
 8011764:	f040 808a 	bne.w	801187c <HAL_TIMEx_MasterConfigSynchronization+0x188>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011768:	68ab      	ldr	r3, [r5, #8]
 801176a:	f033 0380 	bics.w	r3, r3, #128	; 0x80
 801176e:	d173      	bne.n	8011858 <HAL_TIMEx_MasterConfigSynchronization+0x164>

  /* Check input state */
  __HAL_LOCK(htim);
 8011770:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011774:	2b01      	cmp	r3, #1
 8011776:	d078      	beq.n	801186a <HAL_TIMEx_MasterConfigSynchronization+0x176>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8011778:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(htim);
 801177a:	2101      	movs	r1, #1

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801177c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80118b0 <HAL_TIMEx_MasterConfigSynchronization+0x1bc>
  htim->State = HAL_TIM_STATE_BUSY;
 8011780:	2302      	movs	r3, #2
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011782:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80118c0 <HAL_TIMEx_MasterConfigSynchronization+0x1cc>
  __HAL_LOCK(htim);
 8011786:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801178a:	eba2 0009 	sub.w	r0, r2, r9
 801178e:	eba2 0108 	sub.w	r1, r2, r8
  htim->State = HAL_TIM_STATE_BUSY;
 8011792:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8011796:	fab0 f080 	clz	r0, r0
  tmpcr2 = htim->Instance->CR2;
 801179a:	6857      	ldr	r7, [r2, #4]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801179c:	fab1 f181 	clz	r1, r1
  tmpsmcr = htim->Instance->SMCR;
 80117a0:	6896      	ldr	r6, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80117a2:	0940      	lsrs	r0, r0, #5
 80117a4:	0949      	lsrs	r1, r1, #5
 80117a6:	ea50 0301 	orrs.w	r3, r0, r1
 80117aa:	d135      	bne.n	8011818 <HAL_TIMEx_MasterConfigSynchronization+0x124>
 80117ac:	4619      	mov	r1, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117ae:	430b      	orrs	r3, r1
 80117b0:	4940      	ldr	r1, [pc, #256]	; (80118b4 <HAL_TIMEx_MasterConfigSynchronization+0x1c0>)
  tmpcr2 &= ~TIM_CR2_MMS;
 80117b2:	f027 0770 	bic.w	r7, r7, #112	; 0x70
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117b6:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80117ba:	bf08      	it	eq
 80117bc:	f043 0301 	orreq.w	r3, r3, #1
 80117c0:	428a      	cmp	r2, r1
 80117c2:	bf08      	it	eq
 80117c4:	f043 0301 	orreq.w	r3, r3, #1
 80117c8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80117cc:	428a      	cmp	r2, r1
 80117ce:	bf08      	it	eq
 80117d0:	f043 0301 	orreq.w	r3, r3, #1
 80117d4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80117d8:	428a      	cmp	r2, r1
 80117da:	bf08      	it	eq
 80117dc:	f043 0301 	orreq.w	r3, r3, #1
 80117e0:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80117e4:	428a      	cmp	r2, r1
 80117e6:	bf08      	it	eq
 80117e8:	f043 0301 	orreq.w	r3, r3, #1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80117ec:	6829      	ldr	r1, [r5, #0]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117ee:	b2db      	uxtb	r3, r3
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80117f0:	430f      	orrs	r7, r1
  htim->Instance->CR2 = tmpcr2;
 80117f2:	6057      	str	r7, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80117f4:	b913      	cbnz	r3, 80117fc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80117f6:	4b33      	ldr	r3, [pc, #204]	; (80118c4 <HAL_TIMEx_MasterConfigSynchronization+0x1d0>)
 80117f8:	429a      	cmp	r2, r3
 80117fa:	d104      	bne.n	8011806 <HAL_TIMEx_MasterConfigSynchronization+0x112>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80117fc:	68ab      	ldr	r3, [r5, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80117fe:	f026 0680 	bic.w	r6, r6, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8011802:	431e      	orrs	r6, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8011804:	6096      	str	r6, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8011806:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8011808:	2201      	movs	r2, #1

  return HAL_OK;
 801180a:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
 801180c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8011810:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8011814:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011818:	f8d5 e004 	ldr.w	lr, [r5, #4]
 801181c:	f42e 1340 	bic.w	r3, lr, #3145728	; 0x300000
 8011820:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011824:	bf18      	it	ne
 8011826:	2b00      	cmpne	r3, #0
 8011828:	bf14      	ite	ne
 801182a:	f04f 0c01 	movne.w	ip, #1
 801182e:	f04f 0c00 	moveq.w	ip, #0
 8011832:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011836:	bf0c      	ite	eq
 8011838:	f04f 0c00 	moveq.w	ip, #0
 801183c:	f00c 0c01 	andne.w	ip, ip, #1
 8011840:	f1bc 0f00 	cmp.w	ip, #0
 8011844:	d002      	beq.n	801184c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 8011846:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 801184a:	d11d      	bne.n	8011888 <HAL_TIMEx_MasterConfigSynchronization+0x194>
    tmpcr2 &= ~TIM_CR2_MMS2;
 801184c:	f427 0770 	bic.w	r7, r7, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011850:	4603      	mov	r3, r0
 8011852:	ea47 070e 	orr.w	r7, r7, lr
 8011856:	e7aa      	b.n	80117ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8011858:	f240 71b5 	movw	r1, #1973	; 0x7b5
 801185c:	481a      	ldr	r0, [pc, #104]	; (80118c8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 801185e:	f7f2 ffe7 	bl	8004830 <assert_failed>
  __HAL_LOCK(htim);
 8011862:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8011866:	2b01      	cmp	r3, #1
 8011868:	d186      	bne.n	8011778 <HAL_TIMEx_MasterConfigSynchronization+0x84>
 801186a:	2002      	movs	r0, #2
}
 801186c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
 8011870:	f240 71b3 	movw	r1, #1971	; 0x7b3
 8011874:	4814      	ldr	r0, [pc, #80]	; (80118c8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011876:	f7f2 ffdb 	bl	8004830 <assert_failed>
 801187a:	e76d      	b.n	8011758 <HAL_TIMEx_MasterConfigSynchronization+0x64>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 801187c:	f240 71b4 	movw	r1, #1972	; 0x7b4
 8011880:	4811      	ldr	r0, [pc, #68]	; (80118c8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 8011882:	f7f2 ffd5 	bl	8004830 <assert_failed>
 8011886:	e76f      	b.n	8011768 <HAL_TIMEx_MasterConfigSynchronization+0x74>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
 8011888:	f240 71c7 	movw	r1, #1991	; 0x7c7
 801188c:	480e      	ldr	r0, [pc, #56]	; (80118c8 <HAL_TIMEx_MasterConfigSynchronization+0x1d4>)
 801188e:	f7f2 ffcf 	bl	8004830 <assert_failed>
  htim->Instance->CR2 = tmpcr2;
 8011892:	6822      	ldr	r2, [r4, #0]
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8011894:	f8d5 e004 	ldr.w	lr, [r5, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8011898:	eba2 0309 	sub.w	r3, r2, r9
 801189c:	eba2 0c08 	sub.w	ip, r2, r8
 80118a0:	4258      	negs	r0, r3
 80118a2:	4158      	adcs	r0, r3
 80118a4:	f1dc 0100 	rsbs	r1, ip, #0
 80118a8:	eb41 010c 	adc.w	r1, r1, ip
 80118ac:	e7ce      	b.n	801184c <HAL_TIMEx_MasterConfigSynchronization+0x158>
 80118ae:	bf00      	nop
 80118b0:	40010000 	.word	0x40010000
 80118b4:	40000400 	.word	0x40000400
 80118b8:	40000800 	.word	0x40000800
 80118bc:	40000c00 	.word	0x40000c00
 80118c0:	40010400 	.word	0x40010400
 80118c4:	40001800 	.word	0x40001800
 80118c8:	0802c610 	.word	0x0802c610

080118cc <HAL_TIMEx_CommutCallback>:
 80118cc:	4770      	bx	lr
 80118ce:	bf00      	nop

080118d0 <HAL_TIMEx_BreakCallback>:
 80118d0:	4770      	bx	lr
 80118d2:	bf00      	nop

080118d4 <HAL_TIMEx_Break2Callback>:
 80118d4:	4770      	bx	lr
 80118d6:	bf00      	nop

080118d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80118d8:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118da:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80118de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e2:	e842 3100 	strex	r1, r3, [r2]
 80118e6:	2900      	cmp	r1, #0
 80118e8:	d1f7      	bne.n	80118da <UART_EndRxTransfer+0x2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ea:	f102 0308 	add.w	r3, r2, #8
 80118ee:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118f2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118f6:	f102 0c08 	add.w	ip, r2, #8
 80118fa:	e84c 3100 	strex	r1, r3, [ip]
 80118fe:	2900      	cmp	r1, #0
 8011900:	d1f3      	bne.n	80118ea <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011902:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011904:	2b01      	cmp	r3, #1
 8011906:	d005      	beq.n	8011914 <UART_EndRxTransfer+0x3c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011908:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 801190a:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801190c:	6643      	str	r3, [r0, #100]	; 0x64
  huart->RxState = HAL_UART_STATE_READY;
 801190e:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011910:	6603      	str	r3, [r0, #96]	; 0x60
}
 8011912:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011914:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011918:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191c:	e842 3100 	strex	r1, r3, [r2]
 8011920:	2900      	cmp	r1, #0
 8011922:	d0f1      	beq.n	8011908 <UART_EndRxTransfer+0x30>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011924:	e852 3f00 	ldrex	r3, [r2]
 8011928:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801192c:	e842 3100 	strex	r1, r3, [r2]
 8011930:	2900      	cmp	r1, #0
 8011932:	d1ef      	bne.n	8011914 <UART_EndRxTransfer+0x3c>
 8011934:	e7e8      	b.n	8011908 <UART_EndRxTransfer+0x30>
 8011936:	bf00      	nop

08011938 <HAL_UART_DeInit>:
  if (huart == NULL)
 8011938:	2800      	cmp	r0, #0
 801193a:	d046      	beq.n	80119ca <HAL_UART_DeInit+0x92>
  assert_param(IS_UART_INSTANCE(huart->Instance));
 801193c:	6802      	ldr	r2, [r0, #0]
 801193e:	4927      	ldr	r1, [pc, #156]	; (80119dc <HAL_UART_DeInit+0xa4>)
{
 8011940:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_INSTANCE(huart->Instance));
 8011942:	4b27      	ldr	r3, [pc, #156]	; (80119e0 <HAL_UART_DeInit+0xa8>)
 8011944:	4604      	mov	r4, r0
 8011946:	4827      	ldr	r0, [pc, #156]	; (80119e4 <HAL_UART_DeInit+0xac>)
 8011948:	429a      	cmp	r2, r3
 801194a:	bf18      	it	ne
 801194c:	4282      	cmpne	r2, r0
 801194e:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8011952:	bf14      	ite	ne
 8011954:	2301      	movne	r3, #1
 8011956:	2300      	moveq	r3, #0
 8011958:	428a      	cmp	r2, r1
 801195a:	bf0c      	ite	eq
 801195c:	2300      	moveq	r3, #0
 801195e:	f003 0301 	andne.w	r3, r3, #1
 8011962:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8011966:	4282      	cmp	r2, r0
 8011968:	bf0c      	ite	eq
 801196a:	2300      	moveq	r3, #0
 801196c:	f003 0301 	andne.w	r3, r3, #1
 8011970:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8011974:	428a      	cmp	r2, r1
 8011976:	bf0c      	ite	eq
 8011978:	2300      	moveq	r3, #0
 801197a:	f003 0301 	andne.w	r3, r3, #1
 801197e:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8011982:	4282      	cmp	r2, r0
 8011984:	bf0c      	ite	eq
 8011986:	2300      	moveq	r3, #0
 8011988:	f003 0301 	andne.w	r3, r3, #1
 801198c:	428a      	cmp	r2, r1
 801198e:	bf0c      	ite	eq
 8011990:	2300      	moveq	r3, #0
 8011992:	f003 0301 	andne.w	r3, r3, #1
 8011996:	b113      	cbz	r3, 801199e <HAL_UART_DeInit+0x66>
 8011998:	4b13      	ldr	r3, [pc, #76]	; (80119e8 <HAL_UART_DeInit+0xb0>)
 801199a:	429a      	cmp	r2, r3
 801199c:	d117      	bne.n	80119ce <HAL_UART_DeInit+0x96>
  huart->gState = HAL_UART_STATE_BUSY;
 801199e:	2324      	movs	r3, #36	; 0x24
  huart->Instance->CR1 = 0x0U;
 80119a0:	2500      	movs	r5, #0
  HAL_UART_MspDeInit(huart);
 80119a2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80119a4:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 80119a6:	6813      	ldr	r3, [r2, #0]
 80119a8:	f023 0301 	bic.w	r3, r3, #1
 80119ac:	6013      	str	r3, [r2, #0]
  huart->Instance->CR1 = 0x0U;
 80119ae:	6015      	str	r5, [r2, #0]
  huart->Instance->CR2 = 0x0U;
 80119b0:	6055      	str	r5, [r2, #4]
  huart->Instance->CR3 = 0x0U;
 80119b2:	6095      	str	r5, [r2, #8]
  HAL_UART_MspDeInit(huart);
 80119b4:	f7f5 f890 	bl	8006ad8 <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80119b8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
  return HAL_OK;
 80119bc:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 80119be:	67a5      	str	r5, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80119c0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_RESET;
 80119c4:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80119c6:	6625      	str	r5, [r4, #96]	; 0x60
}
 80119c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80119ca:	2001      	movs	r0, #1
}
 80119cc:	4770      	bx	lr
  assert_param(IS_UART_INSTANCE(huart->Instance));
 80119ce:	f240 2167 	movw	r1, #615	; 0x267
 80119d2:	4806      	ldr	r0, [pc, #24]	; (80119ec <HAL_UART_DeInit+0xb4>)
 80119d4:	f7f2 ff2c 	bl	8004830 <assert_failed>
  __HAL_UART_DISABLE(huart);
 80119d8:	6822      	ldr	r2, [r4, #0]
 80119da:	e7e0      	b.n	801199e <HAL_UART_DeInit+0x66>
 80119dc:	40004800 	.word	0x40004800
 80119e0:	40011000 	.word	0x40011000
 80119e4:	40004400 	.word	0x40004400
 80119e8:	40007c00 	.word	0x40007c00
 80119ec:	0802c64c 	.word	0x0802c64c

080119f0 <HAL_UART_Transmit_DMA>:
{
 80119f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_READY)
 80119f2:	6f87      	ldr	r7, [r0, #120]	; 0x78
 80119f4:	2f20      	cmp	r7, #32
 80119f6:	d141      	bne.n	8011a7c <HAL_UART_Transmit_DMA+0x8c>
    if ((pData == NULL) || (Size == 0U))
 80119f8:	2900      	cmp	r1, #0
 80119fa:	d03d      	beq.n	8011a78 <HAL_UART_Transmit_DMA+0x88>
 80119fc:	fab2 f682 	clz	r6, r2
 8011a00:	0976      	lsrs	r6, r6, #5
 8011a02:	2a00      	cmp	r2, #0
 8011a04:	d038      	beq.n	8011a78 <HAL_UART_Transmit_DMA+0x88>
 8011a06:	4604      	mov	r4, r0
    __HAL_LOCK(huart);
 8011a08:	f890 0074 	ldrb.w	r0, [r0, #116]	; 0x74
 8011a0c:	2801      	cmp	r0, #1
 8011a0e:	d035      	beq.n	8011a7c <HAL_UART_Transmit_DMA+0x8c>
 8011a10:	2501      	movs	r5, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a12:	2321      	movs	r3, #33	; 0x21
    if (huart->hdmatx != NULL)
 8011a14:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    huart->TxXferCount = Size;
 8011a16:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    huart->pTxBuffPtr  = pData;
 8011a1a:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011a1c:	f8c4 6080 	str.w	r6, [r4, #128]	; 0x80
    huart->TxXferSize  = Size;
 8011a20:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    __HAL_LOCK(huart);
 8011a24:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011a28:	67a3      	str	r3, [r4, #120]	; 0x78
    if (huart->hdmatx != NULL)
 8011a2a:	b190      	cbz	r0, 8011a52 <HAL_UART_Transmit_DMA+0x62>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011a2c:	f8df c060 	ldr.w	ip, [pc, #96]	; 8011a90 <HAL_UART_Transmit_DMA+0xa0>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011a30:	4613      	mov	r3, r2
 8011a32:	6822      	ldr	r2, [r4, #0]
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8011a34:	f8c0 c03c 	str.w	ip, [r0, #60]	; 0x3c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011a38:	f8df c058 	ldr.w	ip, [pc, #88]	; 8011a94 <HAL_UART_Transmit_DMA+0xa4>
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011a3c:	3228      	adds	r2, #40	; 0x28
      huart->hdmatx->XferAbortCallback = NULL;
 8011a3e:	6506      	str	r6, [r0, #80]	; 0x50
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8011a40:	f8c0 c040 	str.w	ip, [r0, #64]	; 0x40
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8011a44:	f8df c050 	ldr.w	ip, [pc, #80]	; 8011a98 <HAL_UART_Transmit_DMA+0xa8>
 8011a48:	f8c0 c04c 	str.w	ip, [r0, #76]	; 0x4c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8011a4c:	f7f7 face 	bl	8008fec <HAL_DMA_Start_IT>
 8011a50:	b9b0      	cbnz	r0, 8011a80 <HAL_UART_Transmit_DMA+0x90>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011a52:	6822      	ldr	r2, [r4, #0]
 8011a54:	2140      	movs	r1, #64	; 0x40
    __HAL_UNLOCK(huart);
 8011a56:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8011a58:	6211      	str	r1, [r2, #32]
    __HAL_UNLOCK(huart);
 8011a5a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a5e:	f102 0308 	add.w	r3, r2, #8
 8011a62:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a6a:	f102 0108 	add.w	r1, r2, #8
 8011a6e:	e841 3000 	strex	r0, r3, [r1]
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d1f3      	bne.n	8011a5e <HAL_UART_Transmit_DMA+0x6e>
}
 8011a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      return HAL_ERROR;
 8011a78:	2001      	movs	r0, #1
}
 8011a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8011a7c:	2002      	movs	r0, #2
}
 8011a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a80:	2310      	movs	r3, #16
        return HAL_ERROR;
 8011a82:	4628      	mov	r0, r5
        __HAL_UNLOCK(huart);
 8011a84:	f884 6074 	strb.w	r6, [r4, #116]	; 0x74
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011a88:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
        huart->gState = HAL_UART_STATE_READY;
 8011a8c:	67a7      	str	r7, [r4, #120]	; 0x78
}
 8011a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a90:	08011ba1 	.word	0x08011ba1
 8011a94:	08011be9 	.word	0x08011be9
 8011a98:	08011bf9 	.word	0x08011bf9

08011a9c <HAL_UART_Abort>:
{
 8011a9c:	b538      	push	{r3, r4, r5, lr}
 8011a9e:	4604      	mov	r4, r0
 8011aa0:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011aa6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aaa:	e843 2100 	strex	r1, r2, [r3]
 8011aae:	2900      	cmp	r1, #0
 8011ab0:	d1f7      	bne.n	8011aa2 <HAL_UART_Abort+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ab2:	f103 0208 	add.w	r2, r3, #8
 8011ab6:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011aba:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011abe:	f103 0008 	add.w	r0, r3, #8
 8011ac2:	e840 2100 	strex	r1, r2, [r0]
 8011ac6:	2900      	cmp	r1, #0
 8011ac8:	d1f3      	bne.n	8011ab2 <HAL_UART_Abort+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011aca:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8011acc:	2a01      	cmp	r2, #1
 8011ace:	d043      	beq.n	8011b58 <HAL_UART_Abort+0xbc>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011ad0:	6899      	ldr	r1, [r3, #8]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	0608      	lsls	r0, r1, #24
 8011ad6:	d42a      	bmi.n	8011b2e <HAL_UART_Abort+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011ad8:	6899      	ldr	r1, [r3, #8]
 8011ada:	0649      	lsls	r1, r1, #25
 8011adc:	d514      	bpl.n	8011b08 <HAL_UART_Abort+0x6c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ade:	f103 0208 	add.w	r2, r3, #8
 8011ae2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011ae6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aea:	f103 0008 	add.w	r0, r3, #8
 8011aee:	e840 2100 	strex	r1, r2, [r0]
 8011af2:	2900      	cmp	r1, #0
 8011af4:	d1f3      	bne.n	8011ade <HAL_UART_Abort+0x42>
    if (huart->hdmarx != NULL)
 8011af6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011af8:	2800      	cmp	r0, #0
 8011afa:	d03e      	beq.n	8011b7a <HAL_UART_Abort+0xde>
      huart->hdmarx->XferAbortCallback = NULL;
 8011afc:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8011afe:	f7f7 fad1 	bl	80090a4 <HAL_DMA_Abort>
 8011b02:	2800      	cmp	r0, #0
 8011b04:	d145      	bne.n	8011b92 <HAL_UART_Abort+0xf6>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011b06:	6822      	ldr	r2, [r4, #0]
  huart->TxXferCount = 0U;
 8011b08:	2300      	movs	r3, #0
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011b0a:	210f      	movs	r1, #15
  huart->gState  = HAL_UART_STATE_READY;
 8011b0c:	2520      	movs	r5, #32
  huart->TxXferCount = 0U;
 8011b0e:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
  return HAL_OK;
 8011b12:	4618      	mov	r0, r3
  huart->RxXferCount = 0U;
 8011b14:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011b18:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011b1a:	6991      	ldr	r1, [r2, #24]
 8011b1c:	f041 0108 	orr.w	r1, r1, #8
 8011b20:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011b22:	67a5      	str	r5, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011b24:	67e5      	str	r5, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b26:	6623      	str	r3, [r4, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011b28:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011b2c:	bd38      	pop	{r3, r4, r5, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b2e:	f103 0208 	add.w	r2, r3, #8
 8011b32:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b3a:	f103 0008 	add.w	r0, r3, #8
 8011b3e:	e840 2100 	strex	r1, r2, [r0]
 8011b42:	2900      	cmp	r1, #0
 8011b44:	d1f3      	bne.n	8011b2e <HAL_UART_Abort+0x92>
    if (huart->hdmatx != NULL)
 8011b46:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011b48:	b120      	cbz	r0, 8011b54 <HAL_UART_Abort+0xb8>
      huart->hdmatx->XferAbortCallback = NULL;
 8011b4a:	6501      	str	r1, [r0, #80]	; 0x50
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8011b4c:	f7f7 faaa 	bl	80090a4 <HAL_DMA_Abort>
 8011b50:	b9a8      	cbnz	r0, 8011b7e <HAL_UART_Abort+0xe2>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011b52:	6823      	ldr	r3, [r4, #0]
 8011b54:	461a      	mov	r2, r3
 8011b56:	e7bf      	b.n	8011ad8 <HAL_UART_Abort+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b58:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011b5c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b60:	e843 2100 	strex	r1, r2, [r3]
 8011b64:	2900      	cmp	r1, #0
 8011b66:	d0b3      	beq.n	8011ad0 <HAL_UART_Abort+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b68:	e853 2f00 	ldrex	r2, [r3]
 8011b6c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b70:	e843 2100 	strex	r1, r2, [r3]
 8011b74:	2900      	cmp	r1, #0
 8011b76:	d1ef      	bne.n	8011b58 <HAL_UART_Abort+0xbc>
 8011b78:	e7aa      	b.n	8011ad0 <HAL_UART_Abort+0x34>
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	e7c4      	b.n	8011b08 <HAL_UART_Abort+0x6c>
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8011b7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8011b80:	f7f7 fbdc 	bl	800933c <HAL_DMA_GetError>
 8011b84:	2820      	cmp	r0, #32
 8011b86:	d1e4      	bne.n	8011b52 <HAL_UART_Abort+0xb6>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b88:	2310      	movs	r3, #16
          return HAL_TIMEOUT;
 8011b8a:	2003      	movs	r0, #3
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011b8c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8011b90:	bd38      	pop	{r3, r4, r5, pc}
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8011b92:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8011b94:	f7f7 fbd2 	bl	800933c <HAL_DMA_GetError>
 8011b98:	2820      	cmp	r0, #32
 8011b9a:	d1b4      	bne.n	8011b06 <HAL_UART_Abort+0x6a>
 8011b9c:	e7f4      	b.n	8011b88 <HAL_UART_Abort+0xec>
 8011b9e:	bf00      	nop

08011ba0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011ba0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ba2:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011ba4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011baa:	d018      	beq.n	8011bde <UART_DMATransmitCplt+0x3e>
  {
    huart->TxXferCount = 0U;
 8011bac:	2300      	movs	r3, #0
 8011bae:	6802      	ldr	r2, [r0, #0]
 8011bb0:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bb4:	f102 0308 	add.w	r3, r2, #8
 8011bb8:	e853 3f00 	ldrex	r3, [r3]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc0:	f102 0008 	add.w	r0, r2, #8
 8011bc4:	e840 3100 	strex	r1, r3, [r0]
 8011bc8:	2900      	cmp	r1, #0
 8011bca:	d1f3      	bne.n	8011bb4 <UART_DMATransmitCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bcc:	e852 3f00 	ldrex	r3, [r2]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011bd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bd4:	e842 3100 	strex	r1, r3, [r2]
 8011bd8:	2900      	cmp	r1, #0
 8011bda:	d1f7      	bne.n	8011bcc <UART_DMATransmitCplt+0x2c>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011bdc:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8011bde:	f7f0 f9f7 	bl	8001fd0 <HAL_UART_TxCpltCallback>
}
 8011be2:	bd08      	pop	{r3, pc}

08011be4 <HAL_UART_TxHalfCpltCallback>:
 8011be4:	4770      	bx	lr
 8011be6:	bf00      	nop

08011be8 <UART_DMATxHalfCplt>:
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011be8:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011bea:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8011bec:	f7ff fffa 	bl	8011be4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bf0:	bd08      	pop	{r3, pc}
 8011bf2:	bf00      	nop

08011bf4 <HAL_UART_RxHalfCpltCallback>:
 8011bf4:	4770      	bx	lr
 8011bf6:	bf00      	nop

08011bf8 <UART_DMAError>:
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bf8:	6b80      	ldr	r0, [r0, #56]	; 0x38

  const HAL_UART_StateTypeDef gstate = huart->gState;
  const HAL_UART_StateTypeDef rxstate = huart->RxState;

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011bfa:	6802      	ldr	r2, [r0, #0]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011bfc:	6f81      	ldr	r1, [r0, #120]	; 0x78
{
 8011bfe:	b510      	push	{r4, lr}
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011c00:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011c02:	6893      	ldr	r3, [r2, #8]
 8011c04:	061b      	lsls	r3, r3, #24
 8011c06:	d501      	bpl.n	8011c0c <UART_DMAError+0x14>
 8011c08:	2921      	cmp	r1, #33	; 0x21
 8011c0a:	d00d      	beq.n	8011c28 <UART_DMAError+0x30>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011c0c:	6893      	ldr	r3, [r2, #8]
 8011c0e:	065b      	lsls	r3, r3, #25
 8011c10:	d501      	bpl.n	8011c16 <UART_DMAError+0x1e>
 8011c12:	2c22      	cmp	r4, #34	; 0x22
 8011c14:	d016      	beq.n	8011c44 <UART_DMAError+0x4c>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011c16:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8011c1a:	f043 0310 	orr.w	r3, r3, #16
 8011c1e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c22:	f7f3 f8e3 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c26:	bd10      	pop	{r4, pc}
    huart->TxXferCount = 0U;
 8011c28:	2300      	movs	r3, #0
 8011c2a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c2e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c32:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c36:	e842 3100 	strex	r1, r3, [r2]
 8011c3a:	2900      	cmp	r1, #0
 8011c3c:	d1f7      	bne.n	8011c2e <UART_DMAError+0x36>
  huart->gState = HAL_UART_STATE_READY;
 8011c3e:	2320      	movs	r3, #32
 8011c40:	6783      	str	r3, [r0, #120]	; 0x78
}
 8011c42:	e7e3      	b.n	8011c0c <UART_DMAError+0x14>
    huart->RxXferCount = 0U;
 8011c44:	2300      	movs	r3, #0
 8011c46:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8011c4a:	f7ff fe45 	bl	80118d8 <UART_EndRxTransfer>
 8011c4e:	e7e2      	b.n	8011c16 <UART_DMAError+0x1e>

08011c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011c50:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c52:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
 8011c54:	2300      	movs	r3, #0
 8011c56:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8011c5a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c5e:	f7f3 f8c5 	bl	8004dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c62:	bd08      	pop	{r3, pc}

08011c64 <HAL_UART_AbortCpltCallback>:
 8011c64:	4770      	bx	lr
 8011c66:	bf00      	nop

08011c68 <HAL_UART_Abort_IT>:
{
 8011c68:	b570      	push	{r4, r5, r6, lr}
 8011c6a:	6803      	ldr	r3, [r0, #0]
 8011c6c:	4605      	mov	r5, r0
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c6e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 8011c72:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c76:	e843 2100 	strex	r1, r2, [r3]
 8011c7a:	2900      	cmp	r1, #0
 8011c7c:	d1f7      	bne.n	8011c6e <HAL_UART_Abort_IT+0x6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c7e:	f103 0208 	add.w	r2, r3, #8
 8011c82:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011c86:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c8a:	f103 0008 	add.w	r0, r3, #8
 8011c8e:	e840 2100 	strex	r1, r2, [r0]
 8011c92:	2900      	cmp	r1, #0
 8011c94:	d1f3      	bne.n	8011c7e <HAL_UART_Abort_IT+0x16>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c96:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 8011c98:	2a01      	cmp	r2, #1
 8011c9a:	d05e      	beq.n	8011d5a <HAL_UART_Abort_IT+0xf2>
  if (huart->hdmatx != NULL)
 8011c9c:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d071      	beq.n	8011d86 <HAL_UART_Abort_IT+0x11e>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011ca2:	689a      	ldr	r2, [r3, #8]
 8011ca4:	461c      	mov	r4, r3
 8011ca6:	f012 0280 	ands.w	r2, r2, #128	; 0x80
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 8011caa:	bf18      	it	ne
 8011cac:	4a3b      	ldrne	r2, [pc, #236]	; (8011d9c <HAL_UART_Abort_IT+0x134>)
      huart->hdmatx->XferAbortCallback = NULL;
 8011cae:	6502      	str	r2, [r0, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011cb0:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011cb2:	b129      	cbz	r1, 8011cc0 <HAL_UART_Abort_IT+0x58>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cb4:	689a      	ldr	r2, [r3, #8]
 8011cb6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 8011cba:	bf18      	it	ne
 8011cbc:	4a38      	ldrne	r2, [pc, #224]	; (8011da0 <HAL_UART_Abort_IT+0x138>)
      huart->hdmarx->XferAbortCallback = NULL;
 8011cbe:	650a      	str	r2, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011cc0:	689a      	ldr	r2, [r3, #8]
 8011cc2:	0612      	lsls	r2, r2, #24
 8011cc4:	d430      	bmi.n	8011d28 <HAL_UART_Abort_IT+0xc0>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011cc6:	689a      	ldr	r2, [r3, #8]
 8011cc8:	0656      	lsls	r6, r2, #25
 8011cca:	d515      	bpl.n	8011cf8 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011ccc:	2401      	movs	r4, #1
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cce:	f103 0208 	add.w	r2, r3, #8
 8011cd2:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011cd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cda:	f103 0008 	add.w	r0, r3, #8
 8011cde:	e840 2600 	strex	r6, r2, [r0]
 8011ce2:	2e00      	cmp	r6, #0
 8011ce4:	d1f3      	bne.n	8011cce <HAL_UART_Abort_IT+0x66>
    if (huart->hdmarx != NULL)
 8011ce6:	2900      	cmp	r1, #0
 8011ce8:	d04f      	beq.n	8011d8a <HAL_UART_Abort_IT+0x122>
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8011cea:	4608      	mov	r0, r1
 8011cec:	f7f7 fa22 	bl	8009134 <HAL_DMA_Abort_IT>
 8011cf0:	b1c0      	cbz	r0, 8011d24 <HAL_UART_Abort_IT+0xbc>
        huart->hdmarx->XferAbortCallback = NULL;
 8011cf2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011cf4:	682c      	ldr	r4, [r5, #0]
        huart->hdmarx->XferAbortCallback = NULL;
 8011cf6:	651e      	str	r6, [r3, #80]	; 0x50
    huart->TxXferCount = 0U;
 8011cf8:	2300      	movs	r3, #0
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011cfa:	220f      	movs	r2, #15
    huart->gState  = HAL_UART_STATE_READY;
 8011cfc:	2120      	movs	r1, #32
    HAL_UART_AbortCpltCallback(huart);
 8011cfe:	4628      	mov	r0, r5
    huart->TxXferCount = 0U;
 8011d00:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
    huart->RxISR = NULL;
 8011d04:	666b      	str	r3, [r5, #100]	; 0x64
    huart->RxXferCount = 0U;
 8011d06:	f8a5 305a 	strh.w	r3, [r5, #90]	; 0x5a
    huart->TxISR = NULL;
 8011d0a:	66ab      	str	r3, [r5, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011d0c:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011d10:	6222      	str	r2, [r4, #32]
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011d12:	69a2      	ldr	r2, [r4, #24]
 8011d14:	f042 0208 	orr.w	r2, r2, #8
 8011d18:	61a2      	str	r2, [r4, #24]
    huart->gState  = HAL_UART_STATE_READY;
 8011d1a:	67a9      	str	r1, [r5, #120]	; 0x78
    huart->RxState = HAL_UART_STATE_READY;
 8011d1c:	67e9      	str	r1, [r5, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d1e:	662b      	str	r3, [r5, #96]	; 0x60
    HAL_UART_AbortCpltCallback(huart);
 8011d20:	f7ff ffa0 	bl	8011c64 <HAL_UART_AbortCpltCallback>
}
 8011d24:	2000      	movs	r0, #0
 8011d26:	bd70      	pop	{r4, r5, r6, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d28:	f103 0208 	add.w	r2, r3, #8
 8011d2c:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011d30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d34:	f103 0608 	add.w	r6, r3, #8
 8011d38:	e846 2400 	strex	r4, r2, [r6]
 8011d3c:	2c00      	cmp	r4, #0
 8011d3e:	d1f3      	bne.n	8011d28 <HAL_UART_Abort_IT+0xc0>
    if (huart->hdmatx != NULL)
 8011d40:	b1e0      	cbz	r0, 8011d7c <HAL_UART_Abort_IT+0x114>
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011d42:	f7f7 f9f7 	bl	8009134 <HAL_DMA_Abort_IT>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d46:	682b      	ldr	r3, [r5, #0]
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8011d48:	b318      	cbz	r0, 8011d92 <HAL_UART_Abort_IT+0x12a>
        huart->hdmatx->XferAbortCallback = NULL;
 8011d4a:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d4c:	689a      	ldr	r2, [r3, #8]
        huart->hdmatx->XferAbortCallback = NULL;
 8011d4e:	650c      	str	r4, [r1, #80]	; 0x50
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d50:	461c      	mov	r4, r3
 8011d52:	0651      	lsls	r1, r2, #25
 8011d54:	d5d0      	bpl.n	8011cf8 <HAL_UART_Abort_IT+0x90>
  uint32_t abortcplt = 1U;
 8011d56:	2401      	movs	r4, #1
 8011d58:	e01e      	b.n	8011d98 <HAL_UART_Abort_IT+0x130>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d5a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8011d5e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d62:	e843 2100 	strex	r1, r2, [r3]
 8011d66:	2900      	cmp	r1, #0
 8011d68:	d098      	beq.n	8011c9c <HAL_UART_Abort_IT+0x34>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d6a:	e853 2f00 	ldrex	r2, [r3]
 8011d6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d72:	e843 2100 	strex	r1, r2, [r3]
 8011d76:	2900      	cmp	r1, #0
 8011d78:	d1ef      	bne.n	8011d5a <HAL_UART_Abort_IT+0xf2>
 8011d7a:	e78f      	b.n	8011c9c <HAL_UART_Abort_IT+0x34>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d7c:	689a      	ldr	r2, [r3, #8]
 8011d7e:	461c      	mov	r4, r3
 8011d80:	0652      	lsls	r2, r2, #25
 8011d82:	d5b9      	bpl.n	8011cf8 <HAL_UART_Abort_IT+0x90>
 8011d84:	e7a2      	b.n	8011ccc <HAL_UART_Abort_IT+0x64>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8011d86:	461c      	mov	r4, r3
 8011d88:	e792      	b.n	8011cb0 <HAL_UART_Abort_IT+0x48>
  if (abortcplt == 1U)
 8011d8a:	2c01      	cmp	r4, #1
 8011d8c:	d1ca      	bne.n	8011d24 <HAL_UART_Abort_IT+0xbc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011d8e:	461c      	mov	r4, r3
 8011d90:	e7b2      	b.n	8011cf8 <HAL_UART_Abort_IT+0x90>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011d92:	689a      	ldr	r2, [r3, #8]
 8011d94:	0650      	lsls	r0, r2, #25
 8011d96:	d5c5      	bpl.n	8011d24 <HAL_UART_Abort_IT+0xbc>
 8011d98:	6f29      	ldr	r1, [r5, #112]	; 0x70
 8011d9a:	e798      	b.n	8011cce <HAL_UART_Abort_IT+0x66>
 8011d9c:	08011de5 	.word	0x08011de5
 8011da0:	08011da5 	.word	0x08011da5

08011da4 <UART_DMARxAbortCallback>:
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011da4:	6b80      	ldr	r0, [r0, #56]	; 0x38

  huart->hdmarx->XferAbortCallback = NULL;
 8011da6:	2100      	movs	r1, #0

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8011da8:	e9d0 321b 	ldrd	r3, r2, [r0, #108]	; 0x6c
  huart->hdmarx->XferAbortCallback = NULL;
 8011dac:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmatx != NULL)
 8011dae:	b113      	cbz	r3, 8011db6 <UART_DMARxAbortCallback+0x12>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8011db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011db2:	b103      	cbz	r3, 8011db6 <UART_DMARxAbortCallback+0x12>
 8011db4:	4770      	bx	lr
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 8011db6:	2300      	movs	r3, #0

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011db8:	6802      	ldr	r2, [r0, #0]
 8011dba:	210f      	movs	r1, #15
{
 8011dbc:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011dbe:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8011dc2:	2420      	movs	r4, #32
  huart->RxXferCount = 0U;
 8011dc4:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011dc8:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011dcc:	6211      	str	r1, [r2, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011dce:	6991      	ldr	r1, [r2, #24]
 8011dd0:	f041 0108 	orr.w	r1, r1, #8
 8011dd4:	6191      	str	r1, [r2, #24]
  huart->gState  = HAL_UART_STATE_READY;
 8011dd6:	6784      	str	r4, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011dd8:	67c4      	str	r4, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011dda:	6603      	str	r3, [r0, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8011ddc:	f7ff ff42 	bl	8011c64 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011de0:	bd10      	pop	{r4, pc}
 8011de2:	bf00      	nop

08011de4 <UART_DMATxAbortCallback>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011de4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->hdmatx->XferAbortCallback = NULL;
 8011de6:	2100      	movs	r1, #0
  if (huart->hdmarx != NULL)
 8011de8:	e9d0 231b 	ldrd	r2, r3, [r0, #108]	; 0x6c
  huart->hdmatx->XferAbortCallback = NULL;
 8011dec:	6511      	str	r1, [r2, #80]	; 0x50
  if (huart->hdmarx != NULL)
 8011dee:	b113      	cbz	r3, 8011df6 <UART_DMATxAbortCallback+0x12>
    if (huart->hdmarx->XferAbortCallback != NULL)
 8011df0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011df2:	b103      	cbz	r3, 8011df6 <UART_DMATxAbortCallback+0x12>
 8011df4:	4770      	bx	lr
{
 8011df6:	b510      	push	{r4, lr}
  huart->TxXferCount = 0U;
 8011df8:	2300      	movs	r3, #0
  huart->gState  = HAL_UART_STATE_READY;
 8011dfa:	2220      	movs	r2, #32
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011dfc:	6801      	ldr	r1, [r0, #0]
 8011dfe:	240f      	movs	r4, #15
  huart->TxXferCount = 0U;
 8011e00:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  huart->RxXferCount = 0U;
 8011e04:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011e08:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8011e0c:	620c      	str	r4, [r1, #32]
  huart->gState  = HAL_UART_STATE_READY;
 8011e0e:	6782      	str	r2, [r0, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8011e10:	67c2      	str	r2, [r0, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e12:	6603      	str	r3, [r0, #96]	; 0x60
  HAL_UART_AbortCpltCallback(huart);
 8011e14:	f7ff ff26 	bl	8011c64 <HAL_UART_AbortCpltCallback>
}
 8011e18:	bd10      	pop	{r4, pc}
 8011e1a:	bf00      	nop

08011e1c <HAL_UARTEx_RxEventCallback>:
}
 8011e1c:	4770      	bx	lr
 8011e1e:	bf00      	nop

08011e20 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011e20:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e22:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011e24:	2b22      	cmp	r3, #34	; 0x22
 8011e26:	d005      	beq.n	8011e34 <UART_RxISR_8BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e28:	6802      	ldr	r2, [r0, #0]
 8011e2a:	6993      	ldr	r3, [r2, #24]
 8011e2c:	f043 0308 	orr.w	r3, r3, #8
 8011e30:	6193      	str	r3, [r2, #24]
  }
}
 8011e32:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e34:	6803      	ldr	r3, [r0, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e36:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e3c:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8011e3e:	400b      	ands	r3, r1
 8011e40:	7013      	strb	r3, [r2, #0]
    huart->RxXferCount--;
 8011e42:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
    huart->pRxBuffPtr++;
 8011e46:	6d42      	ldr	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011e48:	3b01      	subs	r3, #1
    huart->pRxBuffPtr++;
 8011e4a:	3201      	adds	r2, #1
    huart->RxXferCount--;
 8011e4c:	b29b      	uxth	r3, r3
    huart->pRxBuffPtr++;
 8011e4e:	6542      	str	r2, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011e50:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011e54:	f8b0 305a 	ldrh.w	r3, [r0, #90]	; 0x5a
 8011e58:	b29b      	uxth	r3, r3
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d1e9      	bne.n	8011e32 <UART_RxISR_8BIT+0x12>
 8011e5e:	6803      	ldr	r3, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e60:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011e64:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e68:	e843 2100 	strex	r1, r2, [r3]
 8011e6c:	2900      	cmp	r1, #0
 8011e6e:	d1f7      	bne.n	8011e60 <UART_RxISR_8BIT+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e70:	f103 0208 	add.w	r2, r3, #8
 8011e74:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011e78:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e7c:	f103 0c08 	add.w	ip, r3, #8
 8011e80:	e84c 2100 	strex	r1, r2, [ip]
 8011e84:	2900      	cmp	r1, #0
 8011e86:	d1f3      	bne.n	8011e70 <UART_RxISR_8BIT+0x50>
      huart->RxState = HAL_UART_STATE_READY;
 8011e88:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011e8a:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011e8c:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e8e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011e90:	2a01      	cmp	r2, #1
 8011e92:	d112      	bne.n	8011eba <UART_RxISR_8BIT+0x9a>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e94:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e96:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e9a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e9e:	e843 2100 	strex	r1, r2, [r3]
 8011ea2:	2900      	cmp	r1, #0
 8011ea4:	d1f7      	bne.n	8011e96 <UART_RxISR_8BIT+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011ea6:	69da      	ldr	r2, [r3, #28]
 8011ea8:	06d2      	lsls	r2, r2, #27
 8011eaa:	d501      	bpl.n	8011eb0 <UART_RxISR_8BIT+0x90>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011eac:	2210      	movs	r2, #16
 8011eae:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011eb0:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011eb4:	f7ff ffb2 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
}
 8011eb8:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011eba:	f7f2 ff21 	bl	8004d00 <HAL_UART_RxCpltCallback>
}
 8011ebe:	bd08      	pop	{r3, pc}

08011ec0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011ec0:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ec2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8011ec4:	2b22      	cmp	r3, #34	; 0x22
 8011ec6:	d005      	beq.n	8011ed4 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011ec8:	6802      	ldr	r2, [r0, #0]
 8011eca:	6993      	ldr	r3, [r2, #24]
 8011ecc:	f043 0308 	orr.w	r3, r3, #8
 8011ed0:	6193      	str	r3, [r2, #24]
  }
}
 8011ed2:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ed4:	6803      	ldr	r3, [r0, #0]
    *tmp = (uint16_t)(uhdata & uhMask);
 8011ed6:	f8b0 c05c 	ldrh.w	ip, [r0, #92]	; 0x5c
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011eda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
 8011edc:	6d41      	ldr	r1, [r0, #84]	; 0x54
 8011ede:	ea02 020c 	and.w	r2, r2, ip
 8011ee2:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
 8011ee6:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
    huart->pRxBuffPtr += 2U;
 8011eea:	6541      	str	r1, [r0, #84]	; 0x54
    huart->RxXferCount--;
 8011eec:	3a01      	subs	r2, #1
 8011eee:	b292      	uxth	r2, r2
 8011ef0:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    if (huart->RxXferCount == 0U)
 8011ef4:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8011ef8:	b292      	uxth	r2, r2
 8011efa:	2a00      	cmp	r2, #0
 8011efc:	d1e9      	bne.n	8011ed2 <UART_RxISR_16BIT+0x12>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011efe:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8011f02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f06:	e843 2100 	strex	r1, r2, [r3]
 8011f0a:	2900      	cmp	r1, #0
 8011f0c:	d1f7      	bne.n	8011efe <UART_RxISR_16BIT+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f0e:	f103 0208 	add.w	r2, r3, #8
 8011f12:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f16:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1a:	f103 0c08 	add.w	ip, r3, #8
 8011f1e:	e84c 2100 	strex	r1, r2, [ip]
 8011f22:	2900      	cmp	r1, #0
 8011f24:	d1f3      	bne.n	8011f0e <UART_RxISR_16BIT+0x4e>
      huart->RxState = HAL_UART_STATE_READY;
 8011f26:	2220      	movs	r2, #32
      huart->RxISR = NULL;
 8011f28:	6641      	str	r1, [r0, #100]	; 0x64
      huart->RxState = HAL_UART_STATE_READY;
 8011f2a:	67c2      	str	r2, [r0, #124]	; 0x7c
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f2c:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011f2e:	2a01      	cmp	r2, #1
 8011f30:	d112      	bne.n	8011f58 <UART_RxISR_16BIT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011f32:	6601      	str	r1, [r0, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f34:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011f38:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f3c:	e843 2100 	strex	r1, r2, [r3]
 8011f40:	2900      	cmp	r1, #0
 8011f42:	d1f7      	bne.n	8011f34 <UART_RxISR_16BIT+0x74>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011f44:	69da      	ldr	r2, [r3, #28]
 8011f46:	06d2      	lsls	r2, r2, #27
 8011f48:	d501      	bpl.n	8011f4e <UART_RxISR_16BIT+0x8e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011f4a:	2210      	movs	r2, #16
 8011f4c:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011f4e:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011f52:	f7ff ff63 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
}
 8011f56:	bd08      	pop	{r3, pc}
        HAL_UART_RxCpltCallback(huart);
 8011f58:	f7f2 fed2 	bl	8004d00 <HAL_UART_RxCpltCallback>
}
 8011f5c:	bd08      	pop	{r3, pc}
 8011f5e:	bf00      	nop

08011f60 <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f60:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8011f62:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011f64:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011f66:	2b01      	cmp	r3, #1
 8011f68:	d002      	beq.n	8011f70 <UART_DMARxHalfCplt+0x10>
    HAL_UART_RxHalfCpltCallback(huart);
 8011f6a:	f7ff fe43 	bl	8011bf4 <HAL_UART_RxHalfCpltCallback>
}
 8011f6e:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8011f70:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 8011f74:	0849      	lsrs	r1, r1, #1
 8011f76:	f7ff ff51 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
}
 8011f7a:	bd08      	pop	{r3, pc}

08011f7c <UART_DMAReceiveCplt>:
{
 8011f7c:	b508      	push	{r3, lr}
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f7e:	69c3      	ldr	r3, [r0, #28]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011f80:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011f82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f86:	d028      	beq.n	8011fda <UART_DMAReceiveCplt+0x5e>
    huart->RxXferCount = 0U;
 8011f88:	2200      	movs	r2, #0
 8011f8a:	6803      	ldr	r3, [r0, #0]
 8011f8c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f90:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f98:	e843 2100 	strex	r1, r2, [r3]
 8011f9c:	2900      	cmp	r1, #0
 8011f9e:	d1f7      	bne.n	8011f90 <UART_DMAReceiveCplt+0x14>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fa0:	f103 0208 	add.w	r2, r3, #8
 8011fa4:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011fa8:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fac:	f103 0c08 	add.w	ip, r3, #8
 8011fb0:	e84c 2100 	strex	r1, r2, [ip]
 8011fb4:	2900      	cmp	r1, #0
 8011fb6:	d1f3      	bne.n	8011fa0 <UART_DMAReceiveCplt+0x24>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb8:	f103 0208 	add.w	r2, r3, #8
 8011fbc:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011fc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fc4:	f103 0c08 	add.w	ip, r3, #8
 8011fc8:	e84c 2100 	strex	r1, r2, [ip]
 8011fcc:	2900      	cmp	r1, #0
 8011fce:	d1f3      	bne.n	8011fb8 <UART_DMAReceiveCplt+0x3c>
    huart->RxState = HAL_UART_STATE_READY;
 8011fd0:	2220      	movs	r2, #32
 8011fd2:	67c2      	str	r2, [r0, #124]	; 0x7c
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fd4:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8011fd6:	2a01      	cmp	r2, #1
 8011fd8:	d005      	beq.n	8011fe6 <UART_DMAReceiveCplt+0x6a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fda:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8011fdc:	2b01      	cmp	r3, #1
 8011fde:	d013      	beq.n	8012008 <UART_DMAReceiveCplt+0x8c>
    HAL_UART_RxCpltCallback(huart);
 8011fe0:	f7f2 fe8e 	bl	8004d00 <HAL_UART_RxCpltCallback>
}
 8011fe4:	bd08      	pop	{r3, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fe6:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fee:	e843 2100 	strex	r1, r2, [r3]
 8011ff2:	2900      	cmp	r1, #0
 8011ff4:	d0f1      	beq.n	8011fda <UART_DMAReceiveCplt+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ff6:	e853 2f00 	ldrex	r2, [r3]
 8011ffa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ffe:	e843 2100 	strex	r1, r2, [r3]
 8012002:	2900      	cmp	r1, #0
 8012004:	d1ef      	bne.n	8011fe6 <UART_DMAReceiveCplt+0x6a>
 8012006:	e7e8      	b.n	8011fda <UART_DMAReceiveCplt+0x5e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012008:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
 801200c:	f7ff ff06 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
}
 8012010:	bd08      	pop	{r3, pc}
 8012012:	bf00      	nop

08012014 <HAL_UARTEx_WakeupCallback>:
}
 8012014:	4770      	bx	lr
 8012016:	bf00      	nop

08012018 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8012018:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801201a:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801201e:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8012020:	6819      	ldr	r1, [r3, #0]
  if (errorflags == 0U)
 8012022:	ea12 0f0c 	tst.w	r2, ip
{
 8012026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801202a:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801202c:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 801202e:	d17d      	bne.n	801212c <HAL_UART_IRQHandler+0x114>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8012030:	0697      	lsls	r7, r2, #26
 8012032:	d502      	bpl.n	801203a <HAL_UART_IRQHandler+0x22>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8012034:	068e      	lsls	r6, r1, #26
 8012036:	f100 80f4 	bmi.w	8012222 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801203a:	6e20      	ldr	r0, [r4, #96]	; 0x60
 801203c:	2801      	cmp	r0, #1
 801203e:	d024      	beq.n	801208a <HAL_UART_IRQHandler+0x72>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8012040:	02d0      	lsls	r0, r2, #11
 8012042:	d502      	bpl.n	801204a <HAL_UART_IRQHandler+0x32>
 8012044:	026f      	lsls	r7, r5, #9
 8012046:	f100 80f1 	bmi.w	801222c <HAL_UART_IRQHandler+0x214>
  if (((isrflags & USART_ISR_TXE) != 0U)
 801204a:	0616      	lsls	r6, r2, #24
 801204c:	d414      	bmi.n	8012078 <HAL_UART_IRQHandler+0x60>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801204e:	0650      	lsls	r0, r2, #25
 8012050:	d501      	bpl.n	8012056 <HAL_UART_IRQHandler+0x3e>
 8012052:	064a      	lsls	r2, r1, #25
 8012054:	d401      	bmi.n	801205a <HAL_UART_IRQHandler+0x42>
}
 8012056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801205a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801205e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012062:	e843 2100 	strex	r1, r2, [r3]
 8012066:	2900      	cmp	r1, #0
 8012068:	d1f7      	bne.n	801205a <HAL_UART_IRQHandler+0x42>
  huart->gState = HAL_UART_STATE_READY;
 801206a:	2320      	movs	r3, #32
  HAL_UART_TxCpltCallback(huart);
 801206c:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 801206e:	66a1      	str	r1, [r4, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
 8012070:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
 8012072:	f7ef ffad 	bl	8001fd0 <HAL_UART_TxCpltCallback>
}
 8012076:	e7ee      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8012078:	060d      	lsls	r5, r1, #24
 801207a:	d5e8      	bpl.n	801204e <HAL_UART_IRQHandler+0x36>
    if (huart->TxISR != NULL)
 801207c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 801207e:	2b00      	cmp	r3, #0
 8012080:	d0e9      	beq.n	8012056 <HAL_UART_IRQHandler+0x3e>
      huart->TxISR(huart);
 8012082:	4620      	mov	r0, r4
}
 8012084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      huart->TxISR(huart);
 8012088:	4718      	bx	r3
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801208a:	06d7      	lsls	r7, r2, #27
 801208c:	d5d8      	bpl.n	8012040 <HAL_UART_IRQHandler+0x28>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801208e:	06ce      	lsls	r6, r1, #27
 8012090:	d5d6      	bpl.n	8012040 <HAL_UART_IRQHandler+0x28>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012092:	2210      	movs	r2, #16
 8012094:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8012096:	689a      	ldr	r2, [r3, #8]
 8012098:	0655      	lsls	r5, r2, #25
 801209a:	f140 80d9 	bpl.w	8012250 <HAL_UART_IRQHandler+0x238>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801209e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80120a0:	6802      	ldr	r2, [r0, #0]
 80120a2:	6852      	ldr	r2, [r2, #4]
 80120a4:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 80120a6:	2a00      	cmp	r2, #0
 80120a8:	d0d5      	beq.n	8012056 <HAL_UART_IRQHandler+0x3e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80120aa:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 80120ae:	4291      	cmp	r1, r2
 80120b0:	d9d1      	bls.n	8012056 <HAL_UART_IRQHandler+0x3e>
        huart->RxXferCount = nb_remaining_rx_data;
 80120b2:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80120b6:	69c2      	ldr	r2, [r0, #28]
 80120b8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80120bc:	d02e      	beq.n	801211c <HAL_UART_IRQHandler+0x104>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120be:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80120c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120c6:	e843 2100 	strex	r1, r2, [r3]
 80120ca:	2900      	cmp	r1, #0
 80120cc:	d1f7      	bne.n	80120be <HAL_UART_IRQHandler+0xa6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ce:	f103 0208 	add.w	r2, r3, #8
 80120d2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80120d6:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120da:	f103 0508 	add.w	r5, r3, #8
 80120de:	e845 2100 	strex	r1, r2, [r5]
 80120e2:	2900      	cmp	r1, #0
 80120e4:	d1f3      	bne.n	80120ce <HAL_UART_IRQHandler+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120e6:	f103 0208 	add.w	r2, r3, #8
 80120ea:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80120ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120f2:	f103 0508 	add.w	r5, r3, #8
 80120f6:	e845 2100 	strex	r1, r2, [r5]
 80120fa:	2900      	cmp	r1, #0
 80120fc:	d1f3      	bne.n	80120e6 <HAL_UART_IRQHandler+0xce>
          huart->RxState = HAL_UART_STATE_READY;
 80120fe:	2220      	movs	r2, #32
 8012100:	67e2      	str	r2, [r4, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012102:	6621      	str	r1, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012104:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012108:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210c:	e843 2100 	strex	r1, r2, [r3]
 8012110:	2900      	cmp	r1, #0
 8012112:	d1f7      	bne.n	8012104 <HAL_UART_IRQHandler+0xec>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8012114:	f7f6 ffc6 	bl	80090a4 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8012118:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
 801211c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8012120:	4620      	mov	r0, r4
 8012122:	1ac9      	subs	r1, r1, r3
 8012124:	b289      	uxth	r1, r1
 8012126:	f7ff fe79 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
 801212a:	e794      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801212c:	4864      	ldr	r0, [pc, #400]	; (80122c0 <HAL_UART_IRQHandler+0x2a8>)
      && (((cr3its & USART_CR3_EIE) != 0U)
 801212e:	f005 0601 	and.w	r6, r5, #1
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8012132:	4008      	ands	r0, r1
 8012134:	4330      	orrs	r0, r6
 8012136:	d080      	beq.n	801203a <HAL_UART_IRQHandler+0x22>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8012138:	07d5      	lsls	r5, r2, #31
 801213a:	461f      	mov	r7, r3
 801213c:	d509      	bpl.n	8012152 <HAL_UART_IRQHandler+0x13a>
 801213e:	05c8      	lsls	r0, r1, #23
 8012140:	d507      	bpl.n	8012152 <HAL_UART_IRQHandler+0x13a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012142:	2001      	movs	r0, #1
 8012144:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012146:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 801214a:	f040 0001 	orr.w	r0, r0, #1
 801214e:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012152:	0795      	lsls	r5, r2, #30
 8012154:	d560      	bpl.n	8012218 <HAL_UART_IRQHandler+0x200>
 8012156:	b18e      	cbz	r6, 801217c <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012158:	2002      	movs	r0, #2
 801215a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801215c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012160:	f040 0004 	orr.w	r0, r0, #4
 8012164:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012168:	0750      	lsls	r0, r2, #29
 801216a:	d507      	bpl.n	801217c <HAL_UART_IRQHandler+0x164>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801216c:	2004      	movs	r0, #4
 801216e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012170:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012174:	f040 0002 	orr.w	r0, r0, #2
 8012178:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_ORE) != 0U)
 801217c:	0710      	lsls	r0, r2, #28
 801217e:	d50b      	bpl.n	8012198 <HAL_UART_IRQHandler+0x180>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8012180:	f001 0020 	and.w	r0, r1, #32
 8012184:	4330      	orrs	r0, r6
 8012186:	d007      	beq.n	8012198 <HAL_UART_IRQHandler+0x180>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8012188:	2008      	movs	r0, #8
 801218a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801218c:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8012190:	f040 0008 	orr.w	r0, r0, #8
 8012194:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8012198:	0516      	lsls	r6, r2, #20
 801219a:	d50a      	bpl.n	80121b2 <HAL_UART_IRQHandler+0x19a>
 801219c:	014d      	lsls	r5, r1, #5
 801219e:	d508      	bpl.n	80121b2 <HAL_UART_IRQHandler+0x19a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80121a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80121a4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80121a6:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80121aa:	f043 0320 	orr.w	r3, r3, #32
 80121ae:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80121b2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	f43f af4d 	beq.w	8012056 <HAL_UART_IRQHandler+0x3e>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80121bc:	0690      	lsls	r0, r2, #26
 80121be:	d501      	bpl.n	80121c4 <HAL_UART_IRQHandler+0x1ac>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80121c0:	0689      	lsls	r1, r1, #26
 80121c2:	d43e      	bmi.n	8012242 <HAL_UART_IRQHandler+0x22a>
      errorcode = huart->ErrorCode;
 80121c4:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
        UART_EndRxTransfer(huart);
 80121c8:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80121ca:	68bb      	ldr	r3, [r7, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80121cc:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80121d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80121d4:	431d      	orrs	r5, r3
 80121d6:	d06e      	beq.n	80122b6 <HAL_UART_IRQHandler+0x29e>
        UART_EndRxTransfer(huart);
 80121d8:	f7ff fb7e 	bl	80118d8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80121dc:	6823      	ldr	r3, [r4, #0]
 80121de:	689a      	ldr	r2, [r3, #8]
 80121e0:	0652      	lsls	r2, r2, #25
 80121e2:	d52a      	bpl.n	801223a <HAL_UART_IRQHandler+0x222>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121e4:	f103 0208 	add.w	r2, r3, #8
 80121e8:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80121ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121f0:	f103 0008 	add.w	r0, r3, #8
 80121f4:	e840 2100 	strex	r1, r2, [r0]
 80121f8:	2900      	cmp	r1, #0
 80121fa:	d1f3      	bne.n	80121e4 <HAL_UART_IRQHandler+0x1cc>
          if (huart->hdmarx != NULL)
 80121fc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80121fe:	b1e0      	cbz	r0, 801223a <HAL_UART_IRQHandler+0x222>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8012200:	4b30      	ldr	r3, [pc, #192]	; (80122c4 <HAL_UART_IRQHandler+0x2ac>)
 8012202:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8012204:	f7f6 ff96 	bl	8009134 <HAL_DMA_Abort_IT>
 8012208:	2800      	cmp	r0, #0
 801220a:	f43f af24 	beq.w	8012056 <HAL_UART_IRQHandler+0x3e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801220e:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
 8012210:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8012214:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8012216:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012218:	0755      	lsls	r5, r2, #29
 801221a:	d5af      	bpl.n	801217c <HAL_UART_IRQHandler+0x164>
 801221c:	2e00      	cmp	r6, #0
 801221e:	d1a5      	bne.n	801216c <HAL_UART_IRQHandler+0x154>
 8012220:	e7ac      	b.n	801217c <HAL_UART_IRQHandler+0x164>
      if (huart->RxISR != NULL)
 8012222:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8012224:	2b00      	cmp	r3, #0
 8012226:	f47f af2d 	bne.w	8012084 <HAL_UART_IRQHandler+0x6c>
 801222a:	e714      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801222c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8012230:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8012232:	621a      	str	r2, [r3, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8012234:	f7ff feee 	bl	8012014 <HAL_UARTEx_WakeupCallback>
    return;
 8012238:	e70d      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
            HAL_UART_ErrorCallback(huart);
 801223a:	4620      	mov	r0, r4
 801223c:	f7f2 fdd6 	bl	8004dec <HAL_UART_ErrorCallback>
 8012240:	e709      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
        if (huart->RxISR != NULL)
 8012242:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8012244:	2b00      	cmp	r3, #0
 8012246:	d0bd      	beq.n	80121c4 <HAL_UART_IRQHandler+0x1ac>
          huart->RxISR(huart);
 8012248:	4620      	mov	r0, r4
 801224a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801224c:	6827      	ldr	r7, [r4, #0]
 801224e:	e7b9      	b.n	80121c4 <HAL_UART_IRQHandler+0x1ac>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012250:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8012254:	f8b4 1058 	ldrh.w	r1, [r4, #88]	; 0x58
      if ((huart->RxXferCount > 0U)
 8012258:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801225c:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
 801225e:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8012260:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8012262:	2900      	cmp	r1, #0
 8012264:	f43f aef7 	beq.w	8012056 <HAL_UART_IRQHandler+0x3e>
 8012268:	2a00      	cmp	r2, #0
 801226a:	f43f aef4 	beq.w	8012056 <HAL_UART_IRQHandler+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801226e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012272:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012276:	e843 2000 	strex	r0, r2, [r3]
 801227a:	2800      	cmp	r0, #0
 801227c:	d1f7      	bne.n	801226e <HAL_UART_IRQHandler+0x256>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801227e:	f103 0208 	add.w	r2, r3, #8
 8012282:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012286:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801228a:	f103 0508 	add.w	r5, r3, #8
 801228e:	e845 2000 	strex	r0, r2, [r5]
 8012292:	2800      	cmp	r0, #0
 8012294:	d1f3      	bne.n	801227e <HAL_UART_IRQHandler+0x266>
        huart->RxState = HAL_UART_STATE_READY;
 8012296:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 8012298:	6660      	str	r0, [r4, #100]	; 0x64
        huart->RxState = HAL_UART_STATE_READY;
 801229a:	67e2      	str	r2, [r4, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801229c:	6620      	str	r0, [r4, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801229e:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80122a2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a6:	e843 2000 	strex	r0, r2, [r3]
 80122aa:	2800      	cmp	r0, #0
 80122ac:	d1f7      	bne.n	801229e <HAL_UART_IRQHandler+0x286>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80122ae:	4620      	mov	r0, r4
 80122b0:	f7ff fdb4 	bl	8011e1c <HAL_UARTEx_RxEventCallback>
 80122b4:	e6cf      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
        HAL_UART_ErrorCallback(huart);
 80122b6:	f7f2 fd99 	bl	8004dec <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122ba:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
 80122be:	e6ca      	b.n	8012056 <HAL_UART_IRQHandler+0x3e>
 80122c0:	04000120 	.word	0x04000120
 80122c4:	08011c51 	.word	0x08011c51

080122c8 <UART_SetConfig>:
{
 80122c8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80122ca:	6842      	ldr	r2, [r0, #4]
{
 80122cc:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80122ce:	4bac      	ldr	r3, [pc, #688]	; (8012580 <UART_SetConfig+0x2b8>)
 80122d0:	429a      	cmp	r2, r3
 80122d2:	f200 80bb 	bhi.w	801244c <UART_SetConfig+0x184>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80122d6:	68a3      	ldr	r3, [r4, #8]
 80122d8:	f433 5280 	bics.w	r2, r3, #4096	; 0x1000
 80122dc:	d002      	beq.n	80122e4 <UART_SetConfig+0x1c>
 80122de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80122e2:	d179      	bne.n	80123d8 <UART_SetConfig+0x110>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80122e4:	68e3      	ldr	r3, [r4, #12]
 80122e6:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80122ea:	d17e      	bne.n	80123ea <UART_SetConfig+0x122>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80122ec:	6a23      	ldr	r3, [r4, #32]
 80122ee:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80122f2:	f040 8084 	bne.w	80123fe <UART_SetConfig+0x136>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80122f6:	6923      	ldr	r3, [r4, #16]
 80122f8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80122fc:	d002      	beq.n	8012304 <UART_SetConfig+0x3c>
 80122fe:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8012302:	d163      	bne.n	80123cc <UART_SetConfig+0x104>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8012304:	6963      	ldr	r3, [r4, #20]
 8012306:	f033 020c 	bics.w	r2, r3, #12
 801230a:	d146      	bne.n	801239a <UART_SetConfig+0xd2>
 801230c:	2b00      	cmp	r3, #0
 801230e:	d044      	beq.n	801239a <UART_SetConfig+0xd2>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8012310:	69a3      	ldr	r3, [r4, #24]
 8012312:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 8012316:	d149      	bne.n	80123ac <UART_SetConfig+0xe4>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8012318:	69e0      	ldr	r0, [r4, #28]
 801231a:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 801231e:	d14e      	bne.n	80123be <UART_SetConfig+0xf6>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012320:	6921      	ldr	r1, [r4, #16]
 8012322:	68a2      	ldr	r2, [r4, #8]
 8012324:	6823      	ldr	r3, [r4, #0]
 8012326:	430a      	orrs	r2, r1
 8012328:	6961      	ldr	r1, [r4, #20]
 801232a:	681d      	ldr	r5, [r3, #0]
 801232c:	430a      	orrs	r2, r1
 801232e:	4995      	ldr	r1, [pc, #596]	; (8012584 <UART_SetConfig+0x2bc>)
 8012330:	4029      	ands	r1, r5
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012332:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012334:	430a      	orrs	r2, r1
 8012336:	4302      	orrs	r2, r0
 8012338:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801233a:	6859      	ldr	r1, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801233c:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801233e:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8012342:	4329      	orrs	r1, r5
 8012344:	6059      	str	r1, [r3, #4]
  tmpreg |= huart->Init.OneBitSampling;
 8012346:	6a21      	ldr	r1, [r4, #32]
 8012348:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801234a:	6899      	ldr	r1, [r3, #8]
 801234c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8012350:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012352:	498d      	ldr	r1, [pc, #564]	; (8012588 <UART_SetConfig+0x2c0>)
 8012354:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012356:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012358:	d07e      	beq.n	8012458 <UART_SetConfig+0x190>
 801235a:	4a8c      	ldr	r2, [pc, #560]	; (801258c <UART_SetConfig+0x2c4>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d054      	beq.n	801240a <UART_SetConfig+0x142>
 8012360:	4a8b      	ldr	r2, [pc, #556]	; (8012590 <UART_SetConfig+0x2c8>)
 8012362:	4293      	cmp	r3, r2
 8012364:	f000 812a 	beq.w	80125bc <UART_SetConfig+0x2f4>
 8012368:	4a8a      	ldr	r2, [pc, #552]	; (8012594 <UART_SetConfig+0x2cc>)
 801236a:	4293      	cmp	r3, r2
 801236c:	f000 8137 	beq.w	80125de <UART_SetConfig+0x316>
 8012370:	4a89      	ldr	r2, [pc, #548]	; (8012598 <UART_SetConfig+0x2d0>)
 8012372:	4293      	cmp	r3, r2
 8012374:	f000 809e 	beq.w	80124b4 <UART_SetConfig+0x1ec>
 8012378:	4a88      	ldr	r2, [pc, #544]	; (801259c <UART_SetConfig+0x2d4>)
 801237a:	4293      	cmp	r3, r2
 801237c:	f000 80d1 	beq.w	8012522 <UART_SetConfig+0x25a>
 8012380:	4a87      	ldr	r2, [pc, #540]	; (80125a0 <UART_SetConfig+0x2d8>)
 8012382:	4293      	cmp	r3, r2
 8012384:	f000 8151 	beq.w	801262a <UART_SetConfig+0x362>
 8012388:	4a86      	ldr	r2, [pc, #536]	; (80125a4 <UART_SetConfig+0x2dc>)
 801238a:	4293      	cmp	r3, r2
 801238c:	f000 8164 	beq.w	8012658 <UART_SetConfig+0x390>
    switch (clocksource)
 8012390:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8012392:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8012394:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012398:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_UART_MODE(huart->Init.Mode));
 801239a:	f640 3176 	movw	r1, #2934	; 0xb76
 801239e:	4882      	ldr	r0, [pc, #520]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123a0:	f7f2 fa46 	bl	8004830 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80123a4:	69a3      	ldr	r3, [r4, #24]
 80123a6:	f433 7340 	bics.w	r3, r3, #768	; 0x300
 80123aa:	d0b5      	beq.n	8012318 <UART_SetConfig+0x50>
 80123ac:	487e      	ldr	r0, [pc, #504]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123ae:	f640 3177 	movw	r1, #2935	; 0xb77
 80123b2:	f7f2 fa3d 	bl	8004830 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80123b6:	69e0      	ldr	r0, [r4, #28]
 80123b8:	f430 4300 	bics.w	r3, r0, #32768	; 0x8000
 80123bc:	d0b0      	beq.n	8012320 <UART_SetConfig+0x58>
 80123be:	487a      	ldr	r0, [pc, #488]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123c0:	f640 3178 	movw	r1, #2936	; 0xb78
 80123c4:	f7f2 fa34 	bl	8004830 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80123c8:	69e0      	ldr	r0, [r4, #28]
 80123ca:	e7a9      	b.n	8012320 <UART_SetConfig+0x58>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80123cc:	f640 3175 	movw	r1, #2933	; 0xb75
 80123d0:	4875      	ldr	r0, [pc, #468]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123d2:	f7f2 fa2d 	bl	8004830 <assert_failed>
 80123d6:	e795      	b.n	8012304 <UART_SetConfig+0x3c>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80123d8:	f640 3171 	movw	r1, #2929	; 0xb71
 80123dc:	4872      	ldr	r0, [pc, #456]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123de:	f7f2 fa27 	bl	8004830 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80123e2:	68e3      	ldr	r3, [r4, #12]
 80123e4:	f433 5340 	bics.w	r3, r3, #12288	; 0x3000
 80123e8:	d080      	beq.n	80122ec <UART_SetConfig+0x24>
 80123ea:	f640 3172 	movw	r1, #2930	; 0xb72
 80123ee:	486e      	ldr	r0, [pc, #440]	; (80125a8 <UART_SetConfig+0x2e0>)
 80123f0:	f7f2 fa1e 	bl	8004830 <assert_failed>
  assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80123f4:	6a23      	ldr	r3, [r4, #32]
 80123f6:	f433 6300 	bics.w	r3, r3, #2048	; 0x800
 80123fa:	f43f af7c 	beq.w	80122f6 <UART_SetConfig+0x2e>
 80123fe:	f640 3173 	movw	r1, #2931	; 0xb73
 8012402:	4869      	ldr	r0, [pc, #420]	; (80125a8 <UART_SetConfig+0x2e0>)
 8012404:	f7f2 fa14 	bl	8004830 <assert_failed>
 8012408:	e775      	b.n	80122f6 <UART_SetConfig+0x2e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801240a:	4b68      	ldr	r3, [pc, #416]	; (80125ac <UART_SetConfig+0x2e4>)
 801240c:	4a68      	ldr	r2, [pc, #416]	; (80125b0 <UART_SetConfig+0x2e8>)
 801240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012412:	f003 030c 	and.w	r3, r3, #12
 8012416:	5cd3      	ldrb	r3, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012418:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801241c:	d033      	beq.n	8012486 <UART_SetConfig+0x1be>
    switch (clocksource)
 801241e:	2b08      	cmp	r3, #8
 8012420:	d8b6      	bhi.n	8012390 <UART_SetConfig+0xc8>
 8012422:	a201      	add	r2, pc, #4	; (adr r2, 8012428 <UART_SetConfig+0x160>)
 8012424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012428:	080124e3 	.word	0x080124e3
 801242c:	0801246f 	.word	0x0801246f
 8012430:	08012539 	.word	0x08012539
 8012434:	08012391 	.word	0x08012391
 8012438:	080124d7 	.word	0x080124d7
 801243c:	08012391 	.word	0x08012391
 8012440:	08012391 	.word	0x08012391
 8012444:	08012391 	.word	0x08012391
 8012448:	080124f9 	.word	0x080124f9
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 801244c:	f44f 6137 	mov.w	r1, #2928	; 0xb70
 8012450:	4855      	ldr	r0, [pc, #340]	; (80125a8 <UART_SetConfig+0x2e0>)
 8012452:	f7f2 f9ed 	bl	8004830 <assert_failed>
 8012456:	e73e      	b.n	80122d6 <UART_SetConfig+0xe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012458:	4b54      	ldr	r3, [pc, #336]	; (80125ac <UART_SetConfig+0x2e4>)
 801245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801245e:	f003 0303 	and.w	r3, r3, #3
 8012462:	3b01      	subs	r3, #1
 8012464:	2b02      	cmp	r3, #2
 8012466:	d90b      	bls.n	8012480 <UART_SetConfig+0x1b8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012468:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 801246c:	d066      	beq.n	801253c <UART_SetConfig+0x274>
        pclk = HAL_RCC_GetPCLK2Freq();
 801246e:	f7fb f9d5 	bl	800d81c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012472:	2800      	cmp	r0, #0
 8012474:	d142      	bne.n	80124fc <UART_SetConfig+0x234>
  huart->RxISR = NULL;
 8012476:	2300      	movs	r3, #0
 8012478:	2000      	movs	r0, #0
  huart->TxISR = NULL;
 801247a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 801247e:	bd38      	pop	{r3, r4, r5, pc}
 8012480:	4a4c      	ldr	r2, [pc, #304]	; (80125b4 <UART_SetConfig+0x2ec>)
 8012482:	5cd3      	ldrb	r3, [r2, r3]
 8012484:	e7c8      	b.n	8012418 <UART_SetConfig+0x150>
    switch (clocksource)
 8012486:	2b08      	cmp	r3, #8
 8012488:	d882      	bhi.n	8012390 <UART_SetConfig+0xc8>
 801248a:	a201      	add	r2, pc, #4	; (adr r2, 8012490 <UART_SetConfig+0x1c8>)
 801248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012490:	08012579 	.word	0x08012579
 8012494:	0801253d 	.word	0x0801253d
 8012498:	08012621 	.word	0x08012621
 801249c:	08012391 	.word	0x08012391
 80124a0:	08012573 	.word	0x08012573
 80124a4:	08012391 	.word	0x08012391
 80124a8:	08012391 	.word	0x08012391
 80124ac:	08012391 	.word	0x08012391
 80124b0:	08012625 	.word	0x08012625
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124b4:	4b3d      	ldr	r3, [pc, #244]	; (80125ac <UART_SetConfig+0x2e4>)
 80124b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80124be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124c2:	d036      	beq.n	8012532 <UART_SetConfig+0x26a>
 80124c4:	d810      	bhi.n	80124e8 <UART_SetConfig+0x220>
 80124c6:	b14b      	cbz	r3, 80124dc <UART_SetConfig+0x214>
 80124c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80124cc:	f47f af60 	bne.w	8012390 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124d0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80124d4:	d04d      	beq.n	8012572 <UART_SetConfig+0x2aa>
        pclk = HAL_RCC_GetSysClockFreq();
 80124d6:	f7fb f839 	bl	800d54c <HAL_RCC_GetSysClockFreq>
        break;
 80124da:	e7ca      	b.n	8012472 <UART_SetConfig+0x1aa>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124dc:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80124e0:	d04a      	beq.n	8012578 <UART_SetConfig+0x2b0>
        pclk = HAL_RCC_GetPCLK1Freq();
 80124e2:	f7fb f98b 	bl	800d7fc <HAL_RCC_GetPCLK1Freq>
        break;
 80124e6:	e7c4      	b.n	8012472 <UART_SetConfig+0x1aa>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80124e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80124ec:	f47f af50 	bne.w	8012390 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80124f0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80124f4:	f000 8096 	beq.w	8012624 <UART_SetConfig+0x35c>
        pclk = (uint32_t) LSE_VALUE;
 80124f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80124fc:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80124fe:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8012502:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8012506:	fbb0 f3f3 	udiv	r3, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801250a:	f1a3 0110 	sub.w	r1, r3, #16
 801250e:	4291      	cmp	r1, r2
 8012510:	f63f af3e 	bhi.w	8012390 <UART_SetConfig+0xc8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8012514:	6822      	ldr	r2, [r4, #0]
 8012516:	2000      	movs	r0, #0
 8012518:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 801251a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 801251c:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64
}
 8012520:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012522:	4b22      	ldr	r3, [pc, #136]	; (80125ac <UART_SetConfig+0x2e4>)
 8012524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012528:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801252c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8012530:	d168      	bne.n	8012604 <UART_SetConfig+0x33c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012532:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8012536:	d073      	beq.n	8012620 <UART_SetConfig+0x358>
    switch (clocksource)
 8012538:	481f      	ldr	r0, [pc, #124]	; (80125b8 <UART_SetConfig+0x2f0>)
 801253a:	e7df      	b.n	80124fc <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK2Freq();
 801253c:	f7fb f96e 	bl	800d81c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8012540:	2800      	cmp	r0, #0
 8012542:	d098      	beq.n	8012476 <UART_SetConfig+0x1ae>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8012544:	0043      	lsls	r3, r0, #1
 8012546:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012548:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801254c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8012550:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8012554:	f1a3 0210 	sub.w	r2, r3, #16
 8012558:	428a      	cmp	r2, r1
 801255a:	f63f af19 	bhi.w	8012390 <UART_SetConfig+0xc8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801255e:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8012562:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8012566:	6821      	ldr	r1, [r4, #0]
 8012568:	2000      	movs	r0, #0
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801256a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 801256c:	4313      	orrs	r3, r2
 801256e:	60cb      	str	r3, [r1, #12]
 8012570:	e70f      	b.n	8012392 <UART_SetConfig+0xca>
        pclk = HAL_RCC_GetSysClockFreq();
 8012572:	f7fa ffeb 	bl	800d54c <HAL_RCC_GetSysClockFreq>
        break;
 8012576:	e7e3      	b.n	8012540 <UART_SetConfig+0x278>
        pclk = HAL_RCC_GetPCLK1Freq();
 8012578:	f7fb f940 	bl	800d7fc <HAL_RCC_GetPCLK1Freq>
        break;
 801257c:	e7e0      	b.n	8012540 <UART_SetConfig+0x278>
 801257e:	bf00      	nop
 8012580:	019bfcc0 	.word	0x019bfcc0
 8012584:	efff69f3 	.word	0xefff69f3
 8012588:	40011000 	.word	0x40011000
 801258c:	40004400 	.word	0x40004400
 8012590:	40004800 	.word	0x40004800
 8012594:	40004c00 	.word	0x40004c00
 8012598:	40005000 	.word	0x40005000
 801259c:	40011400 	.word	0x40011400
 80125a0:	40007800 	.word	0x40007800
 80125a4:	40007c00 	.word	0x40007c00
 80125a8:	0802c64c 	.word	0x0802c64c
 80125ac:	40023800 	.word	0x40023800
 80125b0:	0802c68c 	.word	0x0802c68c
 80125b4:	0802c688 	.word	0x0802c688
 80125b8:	00f42400 	.word	0x00f42400
  UART_GETCLOCKSOURCE(huart, clocksource);
 80125bc:	4b32      	ldr	r3, [pc, #200]	; (8012688 <UART_SetConfig+0x3c0>)
 80125be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80125c6:	2b20      	cmp	r3, #32
 80125c8:	d0b3      	beq.n	8012532 <UART_SetConfig+0x26a>
 80125ca:	d805      	bhi.n	80125d8 <UART_SetConfig+0x310>
 80125cc:	2b00      	cmp	r3, #0
 80125ce:	d085      	beq.n	80124dc <UART_SetConfig+0x214>
 80125d0:	2b10      	cmp	r3, #16
 80125d2:	f43f af7d 	beq.w	80124d0 <UART_SetConfig+0x208>
 80125d6:	e6db      	b.n	8012390 <UART_SetConfig+0xc8>
 80125d8:	2b30      	cmp	r3, #48	; 0x30
 80125da:	d089      	beq.n	80124f0 <UART_SetConfig+0x228>
 80125dc:	e6d8      	b.n	8012390 <UART_SetConfig+0xc8>
 80125de:	4b2a      	ldr	r3, [pc, #168]	; (8012688 <UART_SetConfig+0x3c0>)
 80125e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80125e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80125e8:	2b80      	cmp	r3, #128	; 0x80
 80125ea:	d0a2      	beq.n	8012532 <UART_SetConfig+0x26a>
 80125ec:	d806      	bhi.n	80125fc <UART_SetConfig+0x334>
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	f43f af74 	beq.w	80124dc <UART_SetConfig+0x214>
 80125f4:	2b40      	cmp	r3, #64	; 0x40
 80125f6:	f43f af6b 	beq.w	80124d0 <UART_SetConfig+0x208>
 80125fa:	e6c9      	b.n	8012390 <UART_SetConfig+0xc8>
 80125fc:	2bc0      	cmp	r3, #192	; 0xc0
 80125fe:	f43f af77 	beq.w	80124f0 <UART_SetConfig+0x228>
 8012602:	e6c5      	b.n	8012390 <UART_SetConfig+0xc8>
 8012604:	d807      	bhi.n	8012616 <UART_SetConfig+0x34e>
 8012606:	2b00      	cmp	r3, #0
 8012608:	f43f af2e 	beq.w	8012468 <UART_SetConfig+0x1a0>
 801260c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012610:	f43f af5e 	beq.w	80124d0 <UART_SetConfig+0x208>
 8012614:	e6bc      	b.n	8012390 <UART_SetConfig+0xc8>
 8012616:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801261a:	f43f af69 	beq.w	80124f0 <UART_SetConfig+0x228>
 801261e:	e6b7      	b.n	8012390 <UART_SetConfig+0xc8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012620:	4b1a      	ldr	r3, [pc, #104]	; (801268c <UART_SetConfig+0x3c4>)
 8012622:	e790      	b.n	8012546 <UART_SetConfig+0x27e>
    switch (clocksource)
 8012624:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8012628:	e78d      	b.n	8012546 <UART_SetConfig+0x27e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 801262a:	4b17      	ldr	r3, [pc, #92]	; (8012688 <UART_SetConfig+0x3c0>)
 801262c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012630:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8012634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012638:	f43f af7b 	beq.w	8012532 <UART_SetConfig+0x26a>
 801263c:	d807      	bhi.n	801264e <UART_SetConfig+0x386>
 801263e:	2b00      	cmp	r3, #0
 8012640:	f43f af4c 	beq.w	80124dc <UART_SetConfig+0x214>
 8012644:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012648:	f43f af42 	beq.w	80124d0 <UART_SetConfig+0x208>
 801264c:	e6a0      	b.n	8012390 <UART_SetConfig+0xc8>
 801264e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8012652:	f43f af4d 	beq.w	80124f0 <UART_SetConfig+0x228>
 8012656:	e69b      	b.n	8012390 <UART_SetConfig+0xc8>
 8012658:	4b0b      	ldr	r3, [pc, #44]	; (8012688 <UART_SetConfig+0x3c0>)
 801265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801265e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8012662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012666:	f43f af64 	beq.w	8012532 <UART_SetConfig+0x26a>
 801266a:	d807      	bhi.n	801267c <UART_SetConfig+0x3b4>
 801266c:	2b00      	cmp	r3, #0
 801266e:	f43f af35 	beq.w	80124dc <UART_SetConfig+0x214>
 8012672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012676:	f43f af2b 	beq.w	80124d0 <UART_SetConfig+0x208>
 801267a:	e689      	b.n	8012390 <UART_SetConfig+0xc8>
 801267c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8012680:	f43f af36 	beq.w	80124f0 <UART_SetConfig+0x228>
 8012684:	e684      	b.n	8012390 <UART_SetConfig+0xc8>
 8012686:	bf00      	nop
 8012688:	40023800 	.word	0x40023800
 801268c:	01e84800 	.word	0x01e84800

08012690 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012690:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8012692:	2bff      	cmp	r3, #255	; 0xff
{
 8012694:	b510      	push	{r4, lr}
 8012696:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012698:	d87b      	bhi.n	8012792 <UART_AdvFeatureConfig+0x102>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801269a:	07da      	lsls	r2, r3, #31
 801269c:	d50a      	bpl.n	80126b4 <UART_AdvFeatureConfig+0x24>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 801269e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80126a0:	f431 3200 	bics.w	r2, r1, #131072	; 0x20000
 80126a4:	f040 808e 	bne.w	80127c4 <UART_AdvFeatureConfig+0x134>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80126a8:	6820      	ldr	r0, [r4, #0]
 80126aa:	6842      	ldr	r2, [r0, #4]
 80126ac:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80126b0:	430a      	orrs	r2, r1
 80126b2:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80126b4:	0798      	lsls	r0, r3, #30
 80126b6:	d50a      	bpl.n	80126ce <UART_AdvFeatureConfig+0x3e>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80126b8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80126ba:	f431 3280 	bics.w	r2, r1, #65536	; 0x10000
 80126be:	f040 8089 	bne.w	80127d4 <UART_AdvFeatureConfig+0x144>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80126c2:	6820      	ldr	r0, [r4, #0]
 80126c4:	6842      	ldr	r2, [r0, #4]
 80126c6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80126ca:	430a      	orrs	r2, r1
 80126cc:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80126ce:	0759      	lsls	r1, r3, #29
 80126d0:	d50a      	bpl.n	80126e8 <UART_AdvFeatureConfig+0x58>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80126d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80126d4:	f431 2280 	bics.w	r2, r1, #262144	; 0x40000
 80126d8:	f040 8084 	bne.w	80127e4 <UART_AdvFeatureConfig+0x154>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80126dc:	6820      	ldr	r0, [r4, #0]
 80126de:	6842      	ldr	r2, [r0, #4]
 80126e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80126e4:	430a      	orrs	r2, r1
 80126e6:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80126e8:	071a      	lsls	r2, r3, #28
 80126ea:	d509      	bpl.n	8012700 <UART_AdvFeatureConfig+0x70>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80126ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126ee:	f431 4200 	bics.w	r2, r1, #32768	; 0x8000
 80126f2:	d17f      	bne.n	80127f4 <UART_AdvFeatureConfig+0x164>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80126f4:	6820      	ldr	r0, [r4, #0]
 80126f6:	6842      	ldr	r2, [r0, #4]
 80126f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80126fc:	430a      	orrs	r2, r1
 80126fe:	6042      	str	r2, [r0, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012700:	06d8      	lsls	r0, r3, #27
 8012702:	d509      	bpl.n	8012718 <UART_AdvFeatureConfig+0x88>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012704:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8012706:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 801270a:	d17b      	bne.n	8012804 <UART_AdvFeatureConfig+0x174>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801270c:	6820      	ldr	r0, [r4, #0]
 801270e:	6882      	ldr	r2, [r0, #8]
 8012710:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8012714:	430a      	orrs	r2, r1
 8012716:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012718:	0699      	lsls	r1, r3, #26
 801271a:	d509      	bpl.n	8012730 <UART_AdvFeatureConfig+0xa0>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 801271c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801271e:	f431 5200 	bics.w	r2, r1, #8192	; 0x2000
 8012722:	d177      	bne.n	8012814 <UART_AdvFeatureConfig+0x184>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012724:	6820      	ldr	r0, [r4, #0]
 8012726:	6882      	ldr	r2, [r0, #8]
 8012728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801272c:	430a      	orrs	r2, r1
 801272e:	6082      	str	r2, [r0, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012730:	065a      	lsls	r2, r3, #25
 8012732:	d521      	bpl.n	8012778 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012734:	4b46      	ldr	r3, [pc, #280]	; (8012850 <UART_AdvFeatureConfig+0x1c0>)
 8012736:	6822      	ldr	r2, [r4, #0]
 8012738:	4846      	ldr	r0, [pc, #280]	; (8012854 <UART_AdvFeatureConfig+0x1c4>)
 801273a:	4947      	ldr	r1, [pc, #284]	; (8012858 <UART_AdvFeatureConfig+0x1c8>)
 801273c:	429a      	cmp	r2, r3
 801273e:	bf18      	it	ne
 8012740:	4282      	cmpne	r2, r0
 8012742:	bf14      	ite	ne
 8012744:	2301      	movne	r3, #1
 8012746:	2300      	moveq	r3, #0
 8012748:	428a      	cmp	r2, r1
 801274a:	bf0c      	ite	eq
 801274c:	2300      	moveq	r3, #0
 801274e:	f003 0301 	andne.w	r3, r3, #1
 8012752:	b113      	cbz	r3, 801275a <UART_AdvFeatureConfig+0xca>
 8012754:	4b41      	ldr	r3, [pc, #260]	; (801285c <UART_AdvFeatureConfig+0x1cc>)
 8012756:	429a      	cmp	r2, r3
 8012758:	d16b      	bne.n	8012832 <UART_AdvFeatureConfig+0x1a2>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 801275a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801275c:	f432 1380 	bics.w	r3, r2, #1048576	; 0x100000
 8012760:	d160      	bne.n	8012824 <UART_AdvFeatureConfig+0x194>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012762:	6821      	ldr	r1, [r4, #0]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012764:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012768:	684b      	ldr	r3, [r1, #4]
 801276a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801276e:	ea43 0302 	orr.w	r3, r3, r2
 8012772:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8012774:	d014      	beq.n	80127a0 <UART_AdvFeatureConfig+0x110>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8012776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012778:	061b      	lsls	r3, r3, #24
 801277a:	d509      	bpl.n	8012790 <UART_AdvFeatureConfig+0x100>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 801277c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 801277e:	f432 2300 	bics.w	r3, r2, #524288	; 0x80000
 8012782:	d118      	bne.n	80127b6 <UART_AdvFeatureConfig+0x126>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8012784:	6821      	ldr	r1, [r4, #0]
 8012786:	684b      	ldr	r3, [r1, #4]
 8012788:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 801278c:	4313      	orrs	r3, r2
 801278e:	604b      	str	r3, [r1, #4]
}
 8012790:	bd10      	pop	{r4, pc}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8012792:	f640 31f9 	movw	r1, #3065	; 0xbf9
 8012796:	4832      	ldr	r0, [pc, #200]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 8012798:	f7f2 f84a 	bl	8004830 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801279c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801279e:	e77c      	b.n	801269a <UART_AdvFeatureConfig+0xa>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 80127a0:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80127a2:	f430 03c0 	bics.w	r3, r0, #6291456	; 0x600000
 80127a6:	d14a      	bne.n	801283e <UART_AdvFeatureConfig+0x1ae>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80127a8:	684a      	ldr	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80127aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80127ac:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80127b0:	4302      	orrs	r2, r0
 80127b2:	604a      	str	r2, [r1, #4]
 80127b4:	e7e0      	b.n	8012778 <UART_AdvFeatureConfig+0xe8>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 80127b6:	f640 4136 	movw	r1, #3126	; 0xc36
 80127ba:	4829      	ldr	r0, [pc, #164]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 80127bc:	f7f2 f838 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80127c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80127c2:	e7df      	b.n	8012784 <UART_AdvFeatureConfig+0xf4>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 80127c4:	f640 31fe 	movw	r1, #3070	; 0xbfe
 80127c8:	4825      	ldr	r0, [pc, #148]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 80127ca:	f7f2 f831 	bl	8004830 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80127ce:	e9d4 3109 	ldrd	r3, r1, [r4, #36]	; 0x24
 80127d2:	e769      	b.n	80126a8 <UART_AdvFeatureConfig+0x18>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80127d4:	f640 4105 	movw	r1, #3077	; 0xc05
 80127d8:	4821      	ldr	r0, [pc, #132]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 80127da:	f7f2 f829 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80127de:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80127e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127e2:	e76e      	b.n	80126c2 <UART_AdvFeatureConfig+0x32>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 80127e4:	f640 410c 	movw	r1, #3084	; 0xc0c
 80127e8:	481d      	ldr	r0, [pc, #116]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 80127ea:	f7f2 f821 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80127ee:	6b21      	ldr	r1, [r4, #48]	; 0x30
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80127f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80127f2:	e773      	b.n	80126dc <UART_AdvFeatureConfig+0x4c>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 80127f4:	f640 4113 	movw	r1, #3091	; 0xc13
 80127f8:	4819      	ldr	r0, [pc, #100]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 80127fa:	f7f2 f819 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80127fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8012800:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012802:	e777      	b.n	80126f4 <UART_AdvFeatureConfig+0x64>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8012804:	f640 411a 	movw	r1, #3098	; 0xc1a
 8012808:	4815      	ldr	r0, [pc, #84]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 801280a:	f7f2 f811 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801280e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8012810:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012812:	e77b      	b.n	801270c <UART_AdvFeatureConfig+0x7c>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8012814:	f640 4121 	movw	r1, #3105	; 0xc21
 8012818:	4811      	ldr	r0, [pc, #68]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 801281a:	f7f2 f809 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801281e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8012820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012822:	e77f      	b.n	8012724 <UART_AdvFeatureConfig+0x94>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8012824:	f640 4129 	movw	r1, #3113	; 0xc29
 8012828:	480d      	ldr	r0, [pc, #52]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 801282a:	f7f2 f801 	bl	8004830 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801282e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8012830:	e797      	b.n	8012762 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8012832:	f640 4128 	movw	r1, #3112	; 0xc28
 8012836:	480a      	ldr	r0, [pc, #40]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 8012838:	f7f1 fffa 	bl	8004830 <assert_failed>
 801283c:	e78d      	b.n	801275a <UART_AdvFeatureConfig+0xca>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 801283e:	f640 412e 	movw	r1, #3118	; 0xc2e
 8012842:	4807      	ldr	r0, [pc, #28]	; (8012860 <UART_AdvFeatureConfig+0x1d0>)
 8012844:	f7f1 fff4 	bl	8004830 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012848:	6821      	ldr	r1, [r4, #0]
 801284a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 801284c:	e7ac      	b.n	80127a8 <UART_AdvFeatureConfig+0x118>
 801284e:	bf00      	nop
 8012850:	40011000 	.word	0x40011000
 8012854:	40004400 	.word	0x40004400
 8012858:	40004800 	.word	0x40004800
 801285c:	40011400 	.word	0x40011400
 8012860:	0802c64c 	.word	0x0802c64c

08012864 <UART_WaitOnFlagUntilTimeout>:
{
 8012864:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801286c:	4681      	mov	r9, r0
 801286e:	460f      	mov	r7, r1
 8012870:	4616      	mov	r6, r2
 8012872:	469a      	mov	sl, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012874:	6805      	ldr	r5, [r0, #0]
 8012876:	e002      	b.n	801287e <UART_WaitOnFlagUntilTimeout+0x1a>
    if (Timeout != HAL_MAX_DELAY)
 8012878:	f1b8 3fff 	cmp.w	r8, #4294967295
 801287c:	d10c      	bne.n	8012898 <UART_WaitOnFlagUntilTimeout+0x34>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801287e:	69ec      	ldr	r4, [r5, #28]
 8012880:	ea37 0304 	bics.w	r3, r7, r4
 8012884:	bf0c      	ite	eq
 8012886:	f04f 0c01 	moveq.w	ip, #1
 801288a:	f04f 0c00 	movne.w	ip, #0
 801288e:	45b4      	cmp	ip, r6
 8012890:	d0f2      	beq.n	8012878 <UART_WaitOnFlagUntilTimeout+0x14>
  return HAL_OK;
 8012892:	2000      	movs	r0, #0
}
 8012894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8012898:	f7f5 f9de 	bl	8007c58 <HAL_GetTick>
 801289c:	eba0 000a 	sub.w	r0, r0, sl
 80128a0:	4540      	cmp	r0, r8
 80128a2:	d82d      	bhi.n	8012900 <UART_WaitOnFlagUntilTimeout+0x9c>
 80128a4:	f1b8 0f00 	cmp.w	r8, #0
 80128a8:	d02a      	beq.n	8012900 <UART_WaitOnFlagUntilTimeout+0x9c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80128aa:	f8d9 5000 	ldr.w	r5, [r9]
 80128ae:	682b      	ldr	r3, [r5, #0]
 80128b0:	462a      	mov	r2, r5
 80128b2:	0759      	lsls	r1, r3, #29
 80128b4:	d5e3      	bpl.n	801287e <UART_WaitOnFlagUntilTimeout+0x1a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80128b6:	69eb      	ldr	r3, [r5, #28]
 80128b8:	051b      	lsls	r3, r3, #20
 80128ba:	d5e0      	bpl.n	801287e <UART_WaitOnFlagUntilTimeout+0x1a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80128bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80128c0:	622b      	str	r3, [r5, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128c2:	e852 3f00 	ldrex	r3, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80128c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128ca:	e842 3100 	strex	r1, r3, [r2]
 80128ce:	2900      	cmp	r1, #0
 80128d0:	d1f7      	bne.n	80128c2 <UART_WaitOnFlagUntilTimeout+0x5e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128d2:	f102 0308 	add.w	r3, r2, #8
 80128d6:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128da:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128de:	f102 0008 	add.w	r0, r2, #8
 80128e2:	e840 3100 	strex	r1, r3, [r0]
 80128e6:	2900      	cmp	r1, #0
 80128e8:	d1f3      	bne.n	80128d2 <UART_WaitOnFlagUntilTimeout+0x6e>
          huart->gState = HAL_UART_STATE_READY;
 80128ea:	2320      	movs	r3, #32
          return HAL_TIMEOUT;
 80128ec:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80128ee:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
          huart->gState = HAL_UART_STATE_READY;
 80128f2:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80128f6:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80128fa:	f8c9 3080 	str.w	r3, [r9, #128]	; 0x80
          return HAL_TIMEOUT;
 80128fe:	e7c9      	b.n	8012894 <UART_WaitOnFlagUntilTimeout+0x30>
 8012900:	f8d9 2000 	ldr.w	r2, [r9]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012904:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012908:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801290c:	e842 3100 	strex	r1, r3, [r2]
 8012910:	2900      	cmp	r1, #0
 8012912:	d1f7      	bne.n	8012904 <UART_WaitOnFlagUntilTimeout+0xa0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012914:	f102 0308 	add.w	r3, r2, #8
 8012918:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801291c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012920:	f102 0008 	add.w	r0, r2, #8
 8012924:	e840 3100 	strex	r1, r3, [r0]
 8012928:	2900      	cmp	r1, #0
 801292a:	d1f3      	bne.n	8012914 <UART_WaitOnFlagUntilTimeout+0xb0>
        huart->gState = HAL_UART_STATE_READY;
 801292c:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 801292e:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8012930:	f889 1074 	strb.w	r1, [r9, #116]	; 0x74
        huart->gState = HAL_UART_STATE_READY;
 8012934:	f8c9 3078 	str.w	r3, [r9, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8012938:	f8c9 307c 	str.w	r3, [r9, #124]	; 0x7c
        return HAL_TIMEOUT;
 801293c:	e7aa      	b.n	8012894 <UART_WaitOnFlagUntilTimeout+0x30>
 801293e:	bf00      	nop

08012940 <HAL_UART_Transmit>:
{
 8012940:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012944:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8012946:	6f83      	ldr	r3, [r0, #120]	; 0x78
{
 8012948:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 801294a:	2b20      	cmp	r3, #32
 801294c:	d14b      	bne.n	80129e6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 801294e:	460d      	mov	r5, r1
 8012950:	2900      	cmp	r1, #0
 8012952:	d044      	beq.n	80129de <HAL_UART_Transmit+0x9e>
 8012954:	fab2 f982 	clz	r9, r2
 8012958:	4617      	mov	r7, r2
 801295a:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801295e:	2a00      	cmp	r2, #0
 8012960:	d03d      	beq.n	80129de <HAL_UART_Transmit+0x9e>
    __HAL_LOCK(huart);
 8012962:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8012966:	4604      	mov	r4, r0
 8012968:	2b01      	cmp	r3, #1
 801296a:	d03c      	beq.n	80129e6 <HAL_UART_Transmit+0xa6>
 801296c:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801296e:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
    __HAL_LOCK(huart);
 8012972:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012976:	2321      	movs	r3, #33	; 0x21
 8012978:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 801297a:	f7f5 f96d 	bl	8007c58 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801297e:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8012980:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8012982:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 801298a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801298e:	d040      	beq.n	8012a12 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8012990:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    __HAL_UNLOCK(huart);
 8012994:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8012996:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8012998:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 801299c:	b973      	cbnz	r3, 80129bc <HAL_UART_Transmit+0x7c>
 801299e:	e02a      	b.n	80129f6 <HAL_UART_Transmit+0xb6>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80129a0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80129a4:	6823      	ldr	r3, [r4, #0]
 80129a6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->TxXferCount--;
 80129a8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80129ac:	3a01      	subs	r2, #1
 80129ae:	b292      	uxth	r2, r2
 80129b0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80129b4:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80129b8:	b292      	uxth	r2, r2
 80129ba:	b1e2      	cbz	r2, 80129f6 <HAL_UART_Transmit+0xb6>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80129bc:	4643      	mov	r3, r8
 80129be:	2200      	movs	r2, #0
 80129c0:	2180      	movs	r1, #128	; 0x80
 80129c2:	4620      	mov	r0, r4
 80129c4:	9600      	str	r6, [sp, #0]
 80129c6:	f7ff ff4d 	bl	8012864 <UART_WaitOnFlagUntilTimeout>
 80129ca:	b980      	cbnz	r0, 80129ee <HAL_UART_Transmit+0xae>
      if (pdata8bits == NULL)
 80129cc:	2d00      	cmp	r5, #0
 80129ce:	d1e7      	bne.n	80129a0 <HAL_UART_Transmit+0x60>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80129d0:	f839 3b02 	ldrh.w	r3, [r9], #2
 80129d4:	6822      	ldr	r2, [r4, #0]
 80129d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129da:	6293      	str	r3, [r2, #40]	; 0x28
        pdata16bits++;
 80129dc:	e7e4      	b.n	80129a8 <HAL_UART_Transmit+0x68>
      return  HAL_ERROR;
 80129de:	2001      	movs	r0, #1
}
 80129e0:	b003      	add	sp, #12
 80129e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80129e6:	2002      	movs	r0, #2
}
 80129e8:	b003      	add	sp, #12
 80129ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80129ee:	2003      	movs	r0, #3
}
 80129f0:	b003      	add	sp, #12
 80129f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80129f6:	4643      	mov	r3, r8
 80129f8:	2200      	movs	r2, #0
 80129fa:	2140      	movs	r1, #64	; 0x40
 80129fc:	4620      	mov	r0, r4
 80129fe:	9600      	str	r6, [sp, #0]
 8012a00:	f7ff ff30 	bl	8012864 <UART_WaitOnFlagUntilTimeout>
 8012a04:	2800      	cmp	r0, #0
 8012a06:	d1f2      	bne.n	80129ee <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8012a08:	2320      	movs	r3, #32
 8012a0a:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8012a0c:	b003      	add	sp, #12
 8012a0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012a12:	6923      	ldr	r3, [r4, #16]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d1bb      	bne.n	8012990 <HAL_UART_Transmit+0x50>
 8012a18:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8012a1a:	461d      	mov	r5, r3
 8012a1c:	e7b8      	b.n	8012990 <HAL_UART_Transmit+0x50>
 8012a1e:	bf00      	nop

08012a20 <UART_CheckIdleState>:
{
 8012a20:	b570      	push	{r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a22:	2600      	movs	r6, #0
{
 8012a24:	4604      	mov	r4, r0
 8012a26:	b082      	sub	sp, #8
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012a28:	f8c0 6080 	str.w	r6, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 8012a2c:	f7f5 f914 	bl	8007c58 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012a30:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8012a32:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	0712      	lsls	r2, r2, #28
 8012a38:	d40c      	bmi.n	8012a54 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	075b      	lsls	r3, r3, #29
 8012a3e:	d418      	bmi.n	8012a72 <UART_CheckIdleState+0x52>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a40:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8012a42:	2220      	movs	r2, #32
  return HAL_OK;
 8012a44:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
 8012a46:	67a2      	str	r2, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8012a48:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8012a4c:	67e2      	str	r2, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a4e:	6623      	str	r3, [r4, #96]	; 0x60
}
 8012a50:	b002      	add	sp, #8
 8012a52:	bd70      	pop	{r4, r5, r6, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a54:	f06f 417e 	mvn.w	r1, #4261412864	; 0xfe000000
 8012a58:	4603      	mov	r3, r0
 8012a5a:	4632      	mov	r2, r6
 8012a5c:	4620      	mov	r0, r4
 8012a5e:	9100      	str	r1, [sp, #0]
 8012a60:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8012a64:	f7ff fefe 	bl	8012864 <UART_WaitOnFlagUntilTimeout>
 8012a68:	b978      	cbnz	r0, 8012a8a <UART_CheckIdleState+0x6a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8012a6a:	6823      	ldr	r3, [r4, #0]
 8012a6c:	681b      	ldr	r3, [r3, #0]
 8012a6e:	075b      	lsls	r3, r3, #29
 8012a70:	d5e6      	bpl.n	8012a40 <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8012a72:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
 8012a76:	462b      	mov	r3, r5
 8012a78:	2200      	movs	r2, #0
 8012a7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8012a7e:	9000      	str	r0, [sp, #0]
 8012a80:	4620      	mov	r0, r4
 8012a82:	f7ff feef 	bl	8012864 <UART_WaitOnFlagUntilTimeout>
 8012a86:	2800      	cmp	r0, #0
 8012a88:	d0da      	beq.n	8012a40 <UART_CheckIdleState+0x20>
      return HAL_TIMEOUT;
 8012a8a:	2003      	movs	r0, #3
}
 8012a8c:	b002      	add	sp, #8
 8012a8e:	bd70      	pop	{r4, r5, r6, pc}

08012a90 <HAL_UART_Init>:
  if (huart == NULL)
 8012a90:	2800      	cmp	r0, #0
 8012a92:	f000 8099 	beq.w	8012bc8 <HAL_UART_Init+0x138>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012a96:	6983      	ldr	r3, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012a98:	6802      	ldr	r2, [r0, #0]
{
 8012a9a:	b510      	push	{r4, lr}
 8012a9c:	4604      	mov	r4, r0
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	d051      	beq.n	8012b46 <HAL_UART_Init+0xb6>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012aa2:	4b4d      	ldr	r3, [pc, #308]	; (8012bd8 <HAL_UART_Init+0x148>)
 8012aa4:	484d      	ldr	r0, [pc, #308]	; (8012bdc <HAL_UART_Init+0x14c>)
 8012aa6:	494e      	ldr	r1, [pc, #312]	; (8012be0 <HAL_UART_Init+0x150>)
 8012aa8:	429a      	cmp	r2, r3
 8012aaa:	bf18      	it	ne
 8012aac:	4282      	cmpne	r2, r0
 8012aae:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012ab2:	bf14      	ite	ne
 8012ab4:	2301      	movne	r3, #1
 8012ab6:	2300      	moveq	r3, #0
 8012ab8:	428a      	cmp	r2, r1
 8012aba:	bf0c      	ite	eq
 8012abc:	2300      	moveq	r3, #0
 8012abe:	f003 0301 	andne.w	r3, r3, #1
 8012ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ac6:	4282      	cmp	r2, r0
 8012ac8:	bf0c      	ite	eq
 8012aca:	2300      	moveq	r3, #0
 8012acc:	f003 0301 	andne.w	r3, r3, #1
 8012ad0:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012ad4:	428a      	cmp	r2, r1
 8012ad6:	bf0c      	ite	eq
 8012ad8:	2300      	moveq	r3, #0
 8012ada:	f003 0301 	andne.w	r3, r3, #1
 8012ade:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012ae2:	4282      	cmp	r2, r0
 8012ae4:	bf0c      	ite	eq
 8012ae6:	2300      	moveq	r3, #0
 8012ae8:	f003 0301 	andne.w	r3, r3, #1
 8012aec:	428a      	cmp	r2, r1
 8012aee:	bf0c      	ite	eq
 8012af0:	2300      	moveq	r3, #0
 8012af2:	f003 0301 	andne.w	r3, r3, #1
 8012af6:	b113      	cbz	r3, 8012afe <HAL_UART_Init+0x6e>
 8012af8:	4b3a      	ldr	r3, [pc, #232]	; (8012be4 <HAL_UART_Init+0x154>)
 8012afa:	429a      	cmp	r2, r3
 8012afc:	d166      	bne.n	8012bcc <HAL_UART_Init+0x13c>
  if (huart->gState == HAL_UART_STATE_RESET)
 8012afe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d057      	beq.n	8012bb4 <HAL_UART_Init+0x124>
  __HAL_UART_DISABLE(huart);
 8012b04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012b06:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012b08:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8012b0a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012b0c:	6813      	ldr	r3, [r2, #0]
 8012b0e:	f023 0301 	bic.w	r3, r3, #1
 8012b12:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012b14:	f7ff fbd8 	bl	80122c8 <UART_SetConfig>
 8012b18:	2801      	cmp	r0, #1
 8012b1a:	d049      	beq.n	8012bb0 <HAL_UART_Init+0x120>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012b1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d14e      	bne.n	8012bc0 <HAL_UART_Init+0x130>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b22:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 8012b24:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012b26:	685a      	ldr	r2, [r3, #4]
 8012b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012b2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012b2e:	689a      	ldr	r2, [r3, #8]
 8012b30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012b34:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8012b36:	681a      	ldr	r2, [r3, #0]
 8012b38:	f042 0201 	orr.w	r2, r2, #1
}
 8012b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8012b40:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012b42:	f7ff bf6d 	b.w	8012a20 <UART_CheckIdleState>
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8012b46:	4b24      	ldr	r3, [pc, #144]	; (8012bd8 <HAL_UART_Init+0x148>)
 8012b48:	4824      	ldr	r0, [pc, #144]	; (8012bdc <HAL_UART_Init+0x14c>)
 8012b4a:	4925      	ldr	r1, [pc, #148]	; (8012be0 <HAL_UART_Init+0x150>)
 8012b4c:	429a      	cmp	r2, r3
 8012b4e:	bf18      	it	ne
 8012b50:	4282      	cmpne	r2, r0
 8012b52:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 8012b56:	bf14      	ite	ne
 8012b58:	2301      	movne	r3, #1
 8012b5a:	2300      	moveq	r3, #0
 8012b5c:	428a      	cmp	r2, r1
 8012b5e:	bf0c      	ite	eq
 8012b60:	2300      	moveq	r3, #0
 8012b62:	f003 0301 	andne.w	r3, r3, #1
 8012b66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012b6a:	4282      	cmp	r2, r0
 8012b6c:	bf0c      	ite	eq
 8012b6e:	2300      	moveq	r3, #0
 8012b70:	f003 0301 	andne.w	r3, r3, #1
 8012b74:	f500 4048 	add.w	r0, r0, #51200	; 0xc800
 8012b78:	428a      	cmp	r2, r1
 8012b7a:	bf0c      	ite	eq
 8012b7c:	2300      	moveq	r3, #0
 8012b7e:	f003 0301 	andne.w	r3, r3, #1
 8012b82:	f501 5120 	add.w	r1, r1, #10240	; 0x2800
 8012b86:	4282      	cmp	r2, r0
 8012b88:	bf0c      	ite	eq
 8012b8a:	2300      	moveq	r3, #0
 8012b8c:	f003 0301 	andne.w	r3, r3, #1
 8012b90:	428a      	cmp	r2, r1
 8012b92:	bf0c      	ite	eq
 8012b94:	2300      	moveq	r3, #0
 8012b96:	f003 0301 	andne.w	r3, r3, #1
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d0af      	beq.n	8012afe <HAL_UART_Init+0x6e>
 8012b9e:	4b11      	ldr	r3, [pc, #68]	; (8012be4 <HAL_UART_Init+0x154>)
 8012ba0:	429a      	cmp	r2, r3
 8012ba2:	d0ac      	beq.n	8012afe <HAL_UART_Init+0x6e>
 8012ba4:	f240 1131 	movw	r1, #305	; 0x131
 8012ba8:	480f      	ldr	r0, [pc, #60]	; (8012be8 <HAL_UART_Init+0x158>)
 8012baa:	f7f1 fe41 	bl	8004830 <assert_failed>
 8012bae:	e7a6      	b.n	8012afe <HAL_UART_Init+0x6e>
}
 8012bb0:	2001      	movs	r0, #1
 8012bb2:	bd10      	pop	{r4, pc}
    HAL_UART_MspInit(huart);
 8012bb4:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012bb6:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012bba:	f7f3 fcdb 	bl	8006574 <HAL_UART_MspInit>
 8012bbe:	e7a1      	b.n	8012b04 <HAL_UART_Init+0x74>
    UART_AdvFeatureConfig(huart);
 8012bc0:	4620      	mov	r0, r4
 8012bc2:	f7ff fd65 	bl	8012690 <UART_AdvFeatureConfig>
 8012bc6:	e7ac      	b.n	8012b22 <HAL_UART_Init+0x92>
}
 8012bc8:	2001      	movs	r0, #1
 8012bca:	4770      	bx	lr
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8012bcc:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8012bd0:	4805      	ldr	r0, [pc, #20]	; (8012be8 <HAL_UART_Init+0x158>)
 8012bd2:	f7f1 fe2d 	bl	8004830 <assert_failed>
 8012bd6:	e792      	b.n	8012afe <HAL_UART_Init+0x6e>
 8012bd8:	40011000 	.word	0x40011000
 8012bdc:	40004400 	.word	0x40004400
 8012be0:	40004800 	.word	0x40004800
 8012be4:	40007c00 	.word	0x40007c00
 8012be8:	0802c64c 	.word	0x0802c64c

08012bec <HAL_MultiProcessor_Init>:
  if (huart == NULL)
 8012bec:	2800      	cmp	r0, #0
 8012bee:	d04a      	beq.n	8012c86 <HAL_MultiProcessor_Init+0x9a>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012bf0:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
{
 8012bf4:	b570      	push	{r4, r5, r6, lr}
 8012bf6:	460e      	mov	r6, r1
 8012bf8:	4604      	mov	r4, r0
 8012bfa:	4615      	mov	r5, r2
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012bfc:	d13d      	bne.n	8012c7a <HAL_MultiProcessor_Init+0x8e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8012bfe:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d034      	beq.n	8012c6e <HAL_MultiProcessor_Init+0x82>
  __HAL_UART_DISABLE(huart);
 8012c04:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8012c06:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c08:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 8012c0a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012c0c:	6813      	ldr	r3, [r2, #0]
 8012c0e:	f023 0301 	bic.w	r3, r3, #1
 8012c12:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012c14:	f7ff fb58 	bl	80122c8 <UART_SetConfig>
 8012c18:	2801      	cmp	r0, #1
 8012c1a:	d026      	beq.n	8012c6a <HAL_MultiProcessor_Init+0x7e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012c1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012c1e:	bb03      	cbnz	r3, 8012c62 <HAL_MultiProcessor_Init+0x76>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c20:	6823      	ldr	r3, [r4, #0]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012c22:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012c26:	685a      	ldr	r2, [r3, #4]
 8012c28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012c2c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012c2e:	689a      	ldr	r2, [r3, #8]
 8012c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012c34:	609a      	str	r2, [r3, #8]
  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 8012c36:	d00d      	beq.n	8012c54 <HAL_MultiProcessor_Init+0x68>
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012c38:	681a      	ldr	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012c3a:	4620      	mov	r0, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 8012c3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012c40:	4315      	orrs	r5, r2
 8012c42:	601d      	str	r5, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012c44:	681a      	ldr	r2, [r3, #0]
 8012c46:	f042 0201 	orr.w	r2, r2, #1
}
 8012c4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  __HAL_UART_ENABLE(huart);
 8012c4e:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012c50:	f7ff bee6 	b.w	8012a20 <UART_CheckIdleState>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 8012c54:	6859      	ldr	r1, [r3, #4]
 8012c56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8012c5a:	ea41 6606 	orr.w	r6, r1, r6, lsl #24
 8012c5e:	605e      	str	r6, [r3, #4]
 8012c60:	e7ea      	b.n	8012c38 <HAL_MultiProcessor_Init+0x4c>
    UART_AdvFeatureConfig(huart);
 8012c62:	4620      	mov	r0, r4
 8012c64:	f7ff fd14 	bl	8012690 <UART_AdvFeatureConfig>
 8012c68:	e7da      	b.n	8012c20 <HAL_MultiProcessor_Init+0x34>
}
 8012c6a:	2001      	movs	r0, #1
 8012c6c:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UART_MspInit(huart);
 8012c6e:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
 8012c70:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012c74:	f7f3 fc7e 	bl	8006574 <HAL_UART_MspInit>
 8012c78:	e7c4      	b.n	8012c04 <HAL_MultiProcessor_Init+0x18>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 8012c7a:	f240 211d 	movw	r1, #541	; 0x21d
 8012c7e:	4803      	ldr	r0, [pc, #12]	; (8012c8c <HAL_MultiProcessor_Init+0xa0>)
 8012c80:	f7f1 fdd6 	bl	8004830 <assert_failed>
 8012c84:	e7bb      	b.n	8012bfe <HAL_MultiProcessor_Init+0x12>
}
 8012c86:	2001      	movs	r0, #1
 8012c88:	4770      	bx	lr
 8012c8a:	bf00      	nop
 8012c8c:	0802c64c 	.word	0x0802c64c

08012c90 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
 8012c90:	6883      	ldr	r3, [r0, #8]
{
 8012c92:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
 8012c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
 8012c98:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
 8012c9c:	6541      	str	r1, [r0, #84]	; 0x54
  huart->RxXferSize  = Size;
 8012c9e:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxXferCount = Size;
 8012ca2:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
  huart->RxISR       = NULL;
 8012ca6:	6644      	str	r4, [r0, #100]	; 0x64
  UART_MASK_COMPUTATION(huart);
 8012ca8:	d04f      	beq.n	8012d4a <UART_Start_Receive_IT+0xba>
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d043      	beq.n	8012d36 <UART_Start_Receive_IT+0xa6>
 8012cae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012cb2:	d057      	beq.n	8012d64 <UART_Start_Receive_IT+0xd4>
 8012cb4:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cb8:	2100      	movs	r1, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012cba:	2322      	movs	r3, #34	; 0x22
 8012cbc:	6802      	ldr	r2, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012cbe:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012cc2:	67c3      	str	r3, [r0, #124]	; 0x7c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cc4:	f102 0308 	add.w	r3, r2, #8
 8012cc8:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ccc:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cd0:	f102 0408 	add.w	r4, r2, #8
 8012cd4:	e844 3100 	strex	r1, r3, [r4]
 8012cd8:	2900      	cmp	r1, #0
 8012cda:	d1f3      	bne.n	8012cc4 <UART_Start_Receive_IT+0x34>
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012cdc:	6883      	ldr	r3, [r0, #8]
 8012cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012ce2:	d011      	beq.n	8012d08 <UART_Start_Receive_IT+0x78>
 8012ce4:	4c23      	ldr	r4, [pc, #140]	; (8012d74 <UART_Start_Receive_IT+0xe4>)
 8012ce6:	6903      	ldr	r3, [r0, #16]
  __HAL_UNLOCK(huart);
 8012ce8:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012cec:	6644      	str	r4, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012cee:	b18b      	cbz	r3, 8012d14 <UART_Start_Receive_IT+0x84>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cf0:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8012cf4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cf8:	e842 3100 	strex	r1, r3, [r2]
 8012cfc:	2900      	cmp	r1, #0
 8012cfe:	d1f7      	bne.n	8012cf0 <UART_Start_Receive_IT+0x60>
}
 8012d00:	2000      	movs	r0, #0
 8012d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012d06:	4770      	bx	lr
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012d08:	6903      	ldr	r3, [r0, #16]
 8012d0a:	bb33      	cbnz	r3, 8012d5a <UART_Start_Receive_IT+0xca>
 8012d0c:	491a      	ldr	r1, [pc, #104]	; (8012d78 <UART_Start_Receive_IT+0xe8>)
  __HAL_UNLOCK(huart);
 8012d0e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
 8012d12:	6641      	str	r1, [r0, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d14:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8012d18:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d1c:	e842 3100 	strex	r1, r3, [r2]
 8012d20:	2900      	cmp	r1, #0
 8012d22:	d0ed      	beq.n	8012d00 <UART_Start_Receive_IT+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012d24:	e852 3f00 	ldrex	r3, [r2]
 8012d28:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012d2c:	e842 3100 	strex	r1, r3, [r2]
 8012d30:	2900      	cmp	r1, #0
 8012d32:	d1ef      	bne.n	8012d14 <UART_Start_Receive_IT+0x84>
 8012d34:	e7e4      	b.n	8012d00 <UART_Start_Receive_IT+0x70>
  UART_MASK_COMPUTATION(huart);
 8012d36:	6903      	ldr	r3, [r0, #16]
 8012d38:	b91b      	cbnz	r3, 8012d42 <UART_Start_Receive_IT+0xb2>
 8012d3a:	23ff      	movs	r3, #255	; 0xff
 8012d3c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012d40:	e7ba      	b.n	8012cb8 <UART_Start_Receive_IT+0x28>
 8012d42:	237f      	movs	r3, #127	; 0x7f
 8012d44:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012d48:	e7b6      	b.n	8012cb8 <UART_Start_Receive_IT+0x28>
 8012d4a:	6903      	ldr	r3, [r0, #16]
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d1f4      	bne.n	8012d3a <UART_Start_Receive_IT+0xaa>
 8012d50:	f240 13ff 	movw	r3, #511	; 0x1ff
 8012d54:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012d58:	e7ae      	b.n	8012cb8 <UART_Start_Receive_IT+0x28>
    huart->RxISR = UART_RxISR_8BIT;
 8012d5a:	4b06      	ldr	r3, [pc, #24]	; (8012d74 <UART_Start_Receive_IT+0xe4>)
  __HAL_UNLOCK(huart);
 8012d5c:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
 8012d60:	6643      	str	r3, [r0, #100]	; 0x64
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012d62:	e7c5      	b.n	8012cf0 <UART_Start_Receive_IT+0x60>
  UART_MASK_COMPUTATION(huart);
 8012d64:	6903      	ldr	r3, [r0, #16]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d0eb      	beq.n	8012d42 <UART_Start_Receive_IT+0xb2>
 8012d6a:	233f      	movs	r3, #63	; 0x3f
 8012d6c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8012d70:	e7a2      	b.n	8012cb8 <UART_Start_Receive_IT+0x28>
 8012d72:	bf00      	nop
 8012d74:	08011e21 	.word	0x08011e21
 8012d78:	08011ec1 	.word	0x08011ec1

08012d7c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012d7c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012d7e:	2b20      	cmp	r3, #32
 8012d80:	d11e      	bne.n	8012dc0 <HAL_UART_Receive_IT+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012d82:	b1d9      	cbz	r1, 8012dbc <HAL_UART_Receive_IT+0x40>
 8012d84:	fab2 f382 	clz	r3, r2
 8012d88:	095b      	lsrs	r3, r3, #5
 8012d8a:	b1ba      	cbz	r2, 8012dbc <HAL_UART_Receive_IT+0x40>
{
 8012d8c:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012d8e:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012d92:	2c01      	cmp	r4, #1
 8012d94:	d016      	beq.n	8012dc4 <HAL_UART_Receive_IT+0x48>
 8012d96:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012d98:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012d9a:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012d9c:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012da0:	6863      	ldr	r3, [r4, #4]
 8012da2:	021b      	lsls	r3, r3, #8
 8012da4:	d507      	bpl.n	8012db6 <HAL_UART_Receive_IT+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012da6:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012daa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012dae:	e844 3500 	strex	r5, r3, [r4]
 8012db2:	2d00      	cmp	r5, #0
 8012db4:	d1f7      	bne.n	8012da6 <HAL_UART_Receive_IT+0x2a>
}
 8012db6:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_IT(huart, pData, Size));
 8012db8:	f7ff bf6a 	b.w	8012c90 <UART_Start_Receive_IT>
      return HAL_ERROR;
 8012dbc:	2001      	movs	r0, #1
}
 8012dbe:	4770      	bx	lr
    return HAL_BUSY;
 8012dc0:	2002      	movs	r0, #2
 8012dc2:	4770      	bx	lr
 8012dc4:	2002      	movs	r0, #2
}
 8012dc6:	bc30      	pop	{r4, r5}
 8012dc8:	4770      	bx	lr
 8012dca:	bf00      	nop

08012dcc <UART_Start_Receive_DMA>:
{
 8012dcc:	b570      	push	{r4, r5, r6, lr}
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012dce:	2322      	movs	r3, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dd0:	2500      	movs	r5, #0
{
 8012dd2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8012dd4:	6541      	str	r1, [r0, #84]	; 0x54
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012dd6:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  huart->RxXferSize = Size;
 8012dda:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012dde:	67c3      	str	r3, [r0, #124]	; 0x7c
  if (huart->hdmarx != NULL)
 8012de0:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8012de2:	b168      	cbz	r0, 8012e00 <UART_Start_Receive_DMA+0x34>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012de4:	4e1f      	ldr	r6, [pc, #124]	; (8012e64 <UART_Start_Receive_DMA+0x98>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012de6:	4613      	mov	r3, r2
 8012de8:	460a      	mov	r2, r1
 8012dea:	6821      	ldr	r1, [r4, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8012dec:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012dee:	4e1e      	ldr	r6, [pc, #120]	; (8012e68 <UART_Start_Receive_DMA+0x9c>)
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012df0:	3124      	adds	r1, #36	; 0x24
    huart->hdmarx->XferAbortCallback = NULL;
 8012df2:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8012df4:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8012df6:	4e1d      	ldr	r6, [pc, #116]	; (8012e6c <UART_Start_Receive_DMA+0xa0>)
 8012df8:	64c6      	str	r6, [r0, #76]	; 0x4c
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8012dfa:	f7f6 f8f7 	bl	8008fec <HAL_DMA_Start_IT>
 8012dfe:	bb40      	cbnz	r0, 8012e52 <UART_Start_Receive_DMA+0x86>
  __HAL_UNLOCK(huart);
 8012e00:	2200      	movs	r2, #0
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012e02:	6923      	ldr	r3, [r4, #16]
  __HAL_UNLOCK(huart);
 8012e04:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
  if (huart->Init.Parity != UART_PARITY_NONE)
 8012e08:	b14b      	cbz	r3, 8012e1e <UART_Start_Receive_DMA+0x52>
 8012e0a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e0c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012e10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e14:	e843 2100 	strex	r1, r2, [r3]
 8012e18:	2900      	cmp	r1, #0
 8012e1a:	d1f7      	bne.n	8012e0c <UART_Start_Receive_DMA+0x40>
 8012e1c:	e000      	b.n	8012e20 <UART_Start_Receive_DMA+0x54>
 8012e1e:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e20:	f103 0208 	add.w	r2, r3, #8
 8012e24:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012e28:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e2c:	f103 0008 	add.w	r0, r3, #8
 8012e30:	e840 2100 	strex	r1, r2, [r0]
 8012e34:	2900      	cmp	r1, #0
 8012e36:	d1f3      	bne.n	8012e20 <UART_Start_Receive_DMA+0x54>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e38:	f103 0208 	add.w	r2, r3, #8
 8012e3c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8012e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012e44:	f103 0108 	add.w	r1, r3, #8
 8012e48:	e841 2000 	strex	r0, r2, [r1]
 8012e4c:	2800      	cmp	r0, #0
 8012e4e:	d1f3      	bne.n	8012e38 <UART_Start_Receive_DMA+0x6c>
}
 8012e50:	bd70      	pop	{r4, r5, r6, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012e52:	2210      	movs	r2, #16
      huart->RxState = HAL_UART_STATE_READY;
 8012e54:	2320      	movs	r3, #32
      return HAL_ERROR;
 8012e56:	2001      	movs	r0, #1
      __HAL_UNLOCK(huart);
 8012e58:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8012e5c:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
      huart->RxState = HAL_UART_STATE_READY;
 8012e60:	67e3      	str	r3, [r4, #124]	; 0x7c
}
 8012e62:	bd70      	pop	{r4, r5, r6, pc}
 8012e64:	08011f7d 	.word	0x08011f7d
 8012e68:	08011f61 	.word	0x08011f61
 8012e6c:	08011bf9 	.word	0x08011bf9

08012e70 <HAL_UART_Receive_DMA>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8012e70:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8012e72:	2b20      	cmp	r3, #32
 8012e74:	d11e      	bne.n	8012eb4 <HAL_UART_Receive_DMA+0x44>
    if ((pData == NULL) || (Size == 0U))
 8012e76:	b1d9      	cbz	r1, 8012eb0 <HAL_UART_Receive_DMA+0x40>
 8012e78:	fab2 f382 	clz	r3, r2
 8012e7c:	095b      	lsrs	r3, r3, #5
 8012e7e:	b1ba      	cbz	r2, 8012eb0 <HAL_UART_Receive_DMA+0x40>
{
 8012e80:	b430      	push	{r4, r5}
    __HAL_LOCK(huart);
 8012e82:	f890 4074 	ldrb.w	r4, [r0, #116]	; 0x74
 8012e86:	2c01      	cmp	r4, #1
 8012e88:	d016      	beq.n	8012eb8 <HAL_UART_Receive_DMA+0x48>
 8012e8a:	2501      	movs	r5, #1
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012e8c:	6804      	ldr	r4, [r0, #0]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012e8e:	6603      	str	r3, [r0, #96]	; 0x60
    __HAL_LOCK(huart);
 8012e90:	f880 5074 	strb.w	r5, [r0, #116]	; 0x74
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012e94:	6863      	ldr	r3, [r4, #4]
 8012e96:	021b      	lsls	r3, r3, #8
 8012e98:	d507      	bpl.n	8012eaa <HAL_UART_Receive_DMA+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012e9a:	e854 3f00 	ldrex	r3, [r4]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012e9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012ea2:	e844 3500 	strex	r5, r3, [r4]
 8012ea6:	2d00      	cmp	r5, #0
 8012ea8:	d1f7      	bne.n	8012e9a <HAL_UART_Receive_DMA+0x2a>
}
 8012eaa:	bc30      	pop	{r4, r5}
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8012eac:	f7ff bf8e 	b.w	8012dcc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8012eb0:	2001      	movs	r0, #1
}
 8012eb2:	4770      	bx	lr
    return HAL_BUSY;
 8012eb4:	2002      	movs	r0, #2
 8012eb6:	4770      	bx	lr
 8012eb8:	2002      	movs	r0, #2
}
 8012eba:	bc30      	pop	{r4, r5}
 8012ebc:	4770      	bx	lr
 8012ebe:	bf00      	nop

08012ec0 <HAL_RS485Ex_Init>:
                                   uint32_t DeassertionTime)
{
  uint32_t temp;

  /* Check the UART handle allocation */
  if (huart == NULL)
 8012ec0:	2800      	cmp	r0, #0
 8012ec2:	f000 808a 	beq.w	8012fda <HAL_RS485Ex_Init+0x11a>
{
 8012ec6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }
  /* Check the Driver Enable UART instance */
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012eca:	4c47      	ldr	r4, [pc, #284]	; (8012fe8 <HAL_RS485Ex_Init+0x128>)
 8012ecc:	4617      	mov	r7, r2
 8012ece:	461d      	mov	r5, r3
 8012ed0:	4a46      	ldr	r2, [pc, #280]	; (8012fec <HAL_RS485Ex_Init+0x12c>)
 8012ed2:	6803      	ldr	r3, [r0, #0]
 8012ed4:	460e      	mov	r6, r1
 8012ed6:	4680      	mov	r8, r0
 8012ed8:	42a3      	cmp	r3, r4
 8012eda:	bf18      	it	ne
 8012edc:	4293      	cmpne	r3, r2
 8012ede:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012ee2:	bf14      	ite	ne
 8012ee4:	2401      	movne	r4, #1
 8012ee6:	2400      	moveq	r4, #0
 8012ee8:	4293      	cmp	r3, r2
 8012eea:	bf0c      	ite	eq
 8012eec:	2400      	moveq	r4, #0
 8012eee:	f004 0401 	andne.w	r4, r4, #1
 8012ef2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	bf0c      	ite	eq
 8012efa:	2400      	moveq	r4, #0
 8012efc:	f004 0401 	andne.w	r4, r4, #1
 8012f00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f04:	4293      	cmp	r3, r2
 8012f06:	bf0c      	ite	eq
 8012f08:	2400      	moveq	r4, #0
 8012f0a:	f004 0401 	andne.w	r4, r4, #1
 8012f0e:	f502 4244 	add.w	r2, r2, #50176	; 0xc400
 8012f12:	4293      	cmp	r3, r2
 8012f14:	bf0c      	ite	eq
 8012f16:	2400      	moveq	r4, #0
 8012f18:	f004 0401 	andne.w	r4, r4, #1
 8012f1c:	f5a2 421c 	sub.w	r2, r2, #39936	; 0x9c00
 8012f20:	4293      	cmp	r3, r2
 8012f22:	bf0c      	ite	eq
 8012f24:	2400      	moveq	r4, #0
 8012f26:	f004 0401 	andne.w	r4, r4, #1
 8012f2a:	b11c      	cbz	r4, 8012f34 <HAL_RS485Ex_Init+0x74>
 8012f2c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8012f30:	4293      	cmp	r3, r2
 8012f32:	d154      	bne.n	8012fde <HAL_RS485Ex_Init+0x11e>

  /* Check the Driver Enable polarity */
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012f34:	f436 4300 	bics.w	r3, r6, #32768	; 0x8000
 8012f38:	d14a      	bne.n	8012fd0 <HAL_RS485Ex_Init+0x110>

  /* Check the Driver Enable assertion time */
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8012f3a:	2f1f      	cmp	r7, #31
 8012f3c:	d843      	bhi.n	8012fc6 <HAL_RS485Ex_Init+0x106>

  /* Check the Driver Enable deassertion time */
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012f3e:	2d1f      	cmp	r5, #31
 8012f40:	d83c      	bhi.n	8012fbc <HAL_RS485Ex_Init+0xfc>

  if (huart->gState == HAL_UART_STATE_RESET)
 8012f42:	f8d8 3078 	ldr.w	r3, [r8, #120]	; 0x78
 8012f46:	b39b      	cbz	r3, 8012fb0 <HAL_RS485Ex_Init+0xf0>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8012f48:	f8d8 2000 	ldr.w	r2, [r8]
  huart->gState = HAL_UART_STATE_BUSY;
 8012f4c:	2324      	movs	r3, #36	; 0x24

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012f4e:	4640      	mov	r0, r8
  huart->gState = HAL_UART_STATE_BUSY;
 8012f50:	f8c8 3078 	str.w	r3, [r8, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8012f54:	6813      	ldr	r3, [r2, #0]
 8012f56:	f023 0301 	bic.w	r3, r3, #1
 8012f5a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012f5c:	f7ff f9b4 	bl	80122c8 <UART_SetConfig>
 8012f60:	2801      	cmp	r0, #1
 8012f62:	d022      	beq.n	8012faa <HAL_RS485Ex_Init+0xea>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012f64:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
 8012f68:	b9db      	cbnz	r3, 8012fa2 <HAL_RS485Ex_Init+0xe2>
  {
    UART_AdvFeatureConfig(huart);
  }

  /* Enable the Driver Enable mode by setting the DEM bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012f6a:	f8d8 3000 	ldr.w	r3, [r8]
  /* Set the Driver Enable polarity */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);

  /* Set the Driver Enable assertion and deassertion times */
  temp = (AssertionTime << UART_CR1_DEAT_ADDRESS_LSB_POS);
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012f6e:	042d      	lsls	r5, r5, #16

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012f70:	4640      	mov	r0, r8
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012f72:	689a      	ldr	r2, [r3, #8]
  temp |= (DeassertionTime << UART_CR1_DEDT_ADDRESS_LSB_POS);
 8012f74:	ea45 5747 	orr.w	r7, r5, r7, lsl #21
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012f78:	4d1d      	ldr	r5, [pc, #116]	; (8012ff0 <HAL_RS485Ex_Init+0x130>)
  SET_BIT(huart->Instance->CR3, USART_CR3_DEM);
 8012f7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8012f7e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_DEP, Polarity);
 8012f80:	6899      	ldr	r1, [r3, #8]
 8012f82:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8012f86:	430e      	orrs	r6, r1
 8012f88:	609e      	str	r6, [r3, #8]
  MODIFY_REG(huart->Instance->CR1, (USART_CR1_DEDT | USART_CR1_DEAT), temp);
 8012f8a:	681a      	ldr	r2, [r3, #0]
 8012f8c:	4015      	ands	r5, r2
 8012f8e:	432f      	orrs	r7, r5
 8012f90:	601f      	str	r7, [r3, #0]
  __HAL_UART_ENABLE(huart);
 8012f92:	681a      	ldr	r2, [r3, #0]
 8012f94:	f042 0201 	orr.w	r2, r2, #1
}
 8012f98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_UART_ENABLE(huart);
 8012f9c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8012f9e:	f7ff bd3f 	b.w	8012a20 <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
 8012fa2:	4640      	mov	r0, r8
 8012fa4:	f7ff fb74 	bl	8012690 <UART_AdvFeatureConfig>
 8012fa8:	e7df      	b.n	8012f6a <HAL_RS485Ex_Init+0xaa>
}
 8012faa:	2001      	movs	r0, #1
 8012fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    HAL_UART_MspInit(huart);
 8012fb0:	4640      	mov	r0, r8
    huart->Lock = HAL_UNLOCKED;
 8012fb2:	f888 3074 	strb.w	r3, [r8, #116]	; 0x74
    HAL_UART_MspInit(huart);
 8012fb6:	f7f3 fadd 	bl	8006574 <HAL_UART_MspInit>
 8012fba:	e7c5      	b.n	8012f48 <HAL_RS485Ex_Init+0x88>
  assert_param(IS_UART_DEASSERTIONTIME(DeassertionTime));
 8012fbc:	21aa      	movs	r1, #170	; 0xaa
 8012fbe:	480d      	ldr	r0, [pc, #52]	; (8012ff4 <HAL_RS485Ex_Init+0x134>)
 8012fc0:	f7f1 fc36 	bl	8004830 <assert_failed>
 8012fc4:	e7bd      	b.n	8012f42 <HAL_RS485Ex_Init+0x82>
  assert_param(IS_UART_ASSERTIONTIME(AssertionTime));
 8012fc6:	21a7      	movs	r1, #167	; 0xa7
 8012fc8:	480a      	ldr	r0, [pc, #40]	; (8012ff4 <HAL_RS485Ex_Init+0x134>)
 8012fca:	f7f1 fc31 	bl	8004830 <assert_failed>
 8012fce:	e7b6      	b.n	8012f3e <HAL_RS485Ex_Init+0x7e>
  assert_param(IS_UART_DE_POLARITY(Polarity));
 8012fd0:	21a4      	movs	r1, #164	; 0xa4
 8012fd2:	4808      	ldr	r0, [pc, #32]	; (8012ff4 <HAL_RS485Ex_Init+0x134>)
 8012fd4:	f7f1 fc2c 	bl	8004830 <assert_failed>
 8012fd8:	e7af      	b.n	8012f3a <HAL_RS485Ex_Init+0x7a>
}
 8012fda:	2001      	movs	r0, #1
 8012fdc:	4770      	bx	lr
  assert_param(IS_UART_DRIVER_ENABLE_INSTANCE(huart->Instance));
 8012fde:	21a1      	movs	r1, #161	; 0xa1
 8012fe0:	4804      	ldr	r0, [pc, #16]	; (8012ff4 <HAL_RS485Ex_Init+0x134>)
 8012fe2:	f7f1 fc25 	bl	8004830 <assert_failed>
 8012fe6:	e7a5      	b.n	8012f34 <HAL_RS485Ex_Init+0x74>
 8012fe8:	40011000 	.word	0x40011000
 8012fec:	40004400 	.word	0x40004400
 8012ff0:	fc00ffff 	.word	0xfc00ffff
 8012ff4:	0802c69c 	.word	0x0802c69c

08012ff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012ff8:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8012ffa:	2300      	movs	r3, #0

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8012ffc:	4a11      	ldr	r2, [pc, #68]	; (8013044 <USB_CoreReset+0x4c>)
  __IO uint32_t count = 0U;
 8012ffe:	9301      	str	r3, [sp, #4]
 8013000:	e002      	b.n	8013008 <USB_CoreReset+0x10>
    {
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013002:	6903      	ldr	r3, [r0, #16]
 8013004:	2b00      	cmp	r3, #0
 8013006:	db07      	blt.n	8013018 <USB_CoreReset+0x20>
    if (++count > 200000U)
 8013008:	9b01      	ldr	r3, [sp, #4]
 801300a:	3301      	adds	r3, #1
 801300c:	4293      	cmp	r3, r2
 801300e:	9301      	str	r3, [sp, #4]
 8013010:	d9f7      	bls.n	8013002 <USB_CoreReset+0xa>
      return HAL_TIMEOUT;
 8013012:	2003      	movs	r0, #3
      return HAL_TIMEOUT;
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);

  return HAL_OK;
}
 8013014:	b002      	add	sp, #8
 8013016:	4770      	bx	lr
  count = 0U;
 8013018:	2300      	movs	r3, #0
    if (++count > 200000U)
 801301a:	4a0a      	ldr	r2, [pc, #40]	; (8013044 <USB_CoreReset+0x4c>)
  count = 0U;
 801301c:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801301e:	6903      	ldr	r3, [r0, #16]
 8013020:	f043 0301 	orr.w	r3, r3, #1
 8013024:	6103      	str	r3, [r0, #16]
 8013026:	e003      	b.n	8013030 <USB_CoreReset+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8013028:	6903      	ldr	r3, [r0, #16]
 801302a:	f013 0301 	ands.w	r3, r3, #1
 801302e:	d005      	beq.n	801303c <USB_CoreReset+0x44>
    if (++count > 200000U)
 8013030:	9b01      	ldr	r3, [sp, #4]
 8013032:	3301      	adds	r3, #1
 8013034:	4293      	cmp	r3, r2
 8013036:	9301      	str	r3, [sp, #4]
 8013038:	d9f6      	bls.n	8013028 <USB_CoreReset+0x30>
 801303a:	e7ea      	b.n	8013012 <USB_CoreReset+0x1a>
  return HAL_OK;
 801303c:	4618      	mov	r0, r3
}
 801303e:	b002      	add	sp, #8
 8013040:	4770      	bx	lr
 8013042:	bf00      	nop
 8013044:	00030d40 	.word	0x00030d40

08013048 <USB_CoreInit>:
{
 8013048:	b084      	sub	sp, #16
 801304a:	b510      	push	{r4, lr}
 801304c:	f10d 0c0c 	add.w	ip, sp, #12
 8013050:	4604      	mov	r4, r0
 8013052:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013056:	9b08      	ldr	r3, [sp, #32]
 8013058:	2b01      	cmp	r3, #1
 801305a:	d122      	bne.n	80130a2 <USB_CoreInit+0x5a>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801305c:	6b82      	ldr	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801305e:	f1a3 1342 	sub.w	r3, r3, #4325442	; 0x420042
    if (cfg.use_external_vbus == 1U)
 8013062:	990f      	ldr	r1, [sp, #60]	; 0x3c
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8013064:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    if (cfg.use_external_vbus == 1U)
 8013068:	2901      	cmp	r1, #1
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801306a:	6382      	str	r2, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801306c:	68c2      	ldr	r2, [r0, #12]
 801306e:	ea03 0302 	and.w	r3, r3, r2
 8013072:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013074:	68c3      	ldr	r3, [r0, #12]
 8013076:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 801307a:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 801307c:	d01c      	beq.n	80130b8 <USB_CoreInit+0x70>
    ret = USB_CoreReset(USBx);
 801307e:	4620      	mov	r0, r4
 8013080:	f7ff ffba 	bl	8012ff8 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8013084:	9b06      	ldr	r3, [sp, #24]
 8013086:	2b01      	cmp	r3, #1
 8013088:	d107      	bne.n	801309a <USB_CoreInit+0x52>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801308a:	68a3      	ldr	r3, [r4, #8]
 801308c:	f043 0306 	orr.w	r3, r3, #6
 8013090:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8013092:	68a3      	ldr	r3, [r4, #8]
 8013094:	f043 0320 	orr.w	r3, r3, #32
 8013098:	60a3      	str	r3, [r4, #8]
}
 801309a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801309e:	b004      	add	sp, #16
 80130a0:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80130a2:	68c3      	ldr	r3, [r0, #12]
 80130a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130a8:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80130aa:	f7ff ffa5 	bl	8012ff8 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80130ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80130b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80130b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80130b6:	e7e5      	b.n	8013084 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80130b8:	68c3      	ldr	r3, [r0, #12]
 80130ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80130be:	60c3      	str	r3, [r0, #12]
 80130c0:	e7dd      	b.n	801307e <USB_CoreInit+0x36>
 80130c2:	bf00      	nop

080130c4 <USB_SetTurnaroundTime>:
  if (speed == USBD_FS_SPEED)
 80130c4:	2a02      	cmp	r2, #2
{
 80130c6:	4603      	mov	r3, r0
  if (speed == USBD_FS_SPEED)
 80130c8:	d00b      	beq.n	80130e2 <USB_SetTurnaroundTime+0x1e>
 80130ca:	f44f 5c10 	mov.w	ip, #9216	; 0x2400
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80130ce:	68d9      	ldr	r1, [r3, #12]
}
 80130d0:	2000      	movs	r0, #0
  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80130d2:	f421 5170 	bic.w	r1, r1, #15360	; 0x3c00
 80130d6:	60d9      	str	r1, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80130d8:	68da      	ldr	r2, [r3, #12]
 80130da:	ea42 020c 	orr.w	r2, r2, ip
 80130de:	60da      	str	r2, [r3, #12]
}
 80130e0:	4770      	bx	lr
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80130e2:	4a23      	ldr	r2, [pc, #140]	; (8013170 <USB_SetTurnaroundTime+0xac>)
 80130e4:	4823      	ldr	r0, [pc, #140]	; (8013174 <USB_SetTurnaroundTime+0xb0>)
 80130e6:	440a      	add	r2, r1
 80130e8:	4282      	cmp	r2, r0
 80130ea:	d92c      	bls.n	8013146 <USB_SetTurnaroundTime+0x82>
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80130ec:	4a22      	ldr	r2, [pc, #136]	; (8013178 <USB_SetTurnaroundTime+0xb4>)
 80130ee:	4823      	ldr	r0, [pc, #140]	; (801317c <USB_SetTurnaroundTime+0xb8>)
 80130f0:	440a      	add	r2, r1
 80130f2:	4282      	cmp	r2, r0
 80130f4:	d92a      	bls.n	801314c <USB_SetTurnaroundTime+0x88>
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80130f6:	4a22      	ldr	r2, [pc, #136]	; (8013180 <USB_SetTurnaroundTime+0xbc>)
 80130f8:	4822      	ldr	r0, [pc, #136]	; (8013184 <USB_SetTurnaroundTime+0xc0>)
 80130fa:	440a      	add	r2, r1
 80130fc:	4282      	cmp	r2, r0
 80130fe:	d928      	bls.n	8013152 <USB_SetTurnaroundTime+0x8e>
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8013100:	4a21      	ldr	r2, [pc, #132]	; (8013188 <USB_SetTurnaroundTime+0xc4>)
 8013102:	4822      	ldr	r0, [pc, #136]	; (801318c <USB_SetTurnaroundTime+0xc8>)
 8013104:	440a      	add	r2, r1
 8013106:	4282      	cmp	r2, r0
 8013108:	d326      	bcc.n	8013158 <USB_SetTurnaroundTime+0x94>
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801310a:	4a21      	ldr	r2, [pc, #132]	; (8013190 <USB_SetTurnaroundTime+0xcc>)
 801310c:	4821      	ldr	r0, [pc, #132]	; (8013194 <USB_SetTurnaroundTime+0xd0>)
 801310e:	440a      	add	r2, r1
 8013110:	4282      	cmp	r2, r0
 8013112:	d924      	bls.n	801315e <USB_SetTurnaroundTime+0x9a>
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8013114:	4a20      	ldr	r2, [pc, #128]	; (8013198 <USB_SetTurnaroundTime+0xd4>)
 8013116:	4821      	ldr	r0, [pc, #132]	; (801319c <USB_SetTurnaroundTime+0xd8>)
 8013118:	440a      	add	r2, r1
 801311a:	4282      	cmp	r2, r0
 801311c:	d322      	bcc.n	8013164 <USB_SetTurnaroundTime+0xa0>
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801311e:	4a20      	ldr	r2, [pc, #128]	; (80131a0 <USB_SetTurnaroundTime+0xdc>)
 8013120:	4820      	ldr	r0, [pc, #128]	; (80131a4 <USB_SetTurnaroundTime+0xe0>)
 8013122:	440a      	add	r2, r1
 8013124:	4282      	cmp	r2, r0
 8013126:	d3d0      	bcc.n	80130ca <USB_SetTurnaroundTime+0x6>
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8013128:	4a1f      	ldr	r2, [pc, #124]	; (80131a8 <USB_SetTurnaroundTime+0xe4>)
 801312a:	4820      	ldr	r0, [pc, #128]	; (80131ac <USB_SetTurnaroundTime+0xe8>)
 801312c:	440a      	add	r2, r1
 801312e:	4282      	cmp	r2, r0
 8013130:	d31b      	bcc.n	801316a <USB_SetTurnaroundTime+0xa6>
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8013132:	4a1f      	ldr	r2, [pc, #124]	; (80131b0 <USB_SetTurnaroundTime+0xec>)
 8013134:	481f      	ldr	r0, [pc, #124]	; (80131b4 <USB_SetTurnaroundTime+0xf0>)
 8013136:	440a      	add	r2, r1
 8013138:	4282      	cmp	r2, r0
 801313a:	bf34      	ite	cc
 801313c:	f44f 5ce0 	movcc.w	ip, #7168	; 0x1c00
 8013140:	f44f 5cc0 	movcs.w	ip, #6144	; 0x1800
 8013144:	e7c3      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 8013146:	f44f 5c70 	mov.w	ip, #15360	; 0x3c00
 801314a:	e7c0      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 801314c:	f44f 5c60 	mov.w	ip, #14336	; 0x3800
 8013150:	e7bd      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 8013152:	f44f 5c50 	mov.w	ip, #13312	; 0x3400
 8013156:	e7ba      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 8013158:	f44f 5c40 	mov.w	ip, #12288	; 0x3000
 801315c:	e7b7      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 801315e:	f44f 5c30 	mov.w	ip, #11264	; 0x2c00
 8013162:	e7b4      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 8013164:	f44f 5c20 	mov.w	ip, #10240	; 0x2800
 8013168:	e7b1      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 801316a:	f44f 5c00 	mov.w	ip, #8192	; 0x2000
 801316e:	e7ae      	b.n	80130ce <USB_SetTurnaroundTime+0xa>
 8013170:	ff275340 	.word	0xff275340
 8013174:	000c34ff 	.word	0x000c34ff
 8013178:	ff1b1e40 	.word	0xff1b1e40
 801317c:	000f423f 	.word	0x000f423f
 8013180:	ff0bdc00 	.word	0xff0bdc00
 8013184:	00124f7f 	.word	0x00124f7f
 8013188:	fef98c80 	.word	0xfef98c80
 801318c:	0013d620 	.word	0x0013d620
 8013190:	fee5b660 	.word	0xfee5b660
 8013194:	0016e35f 	.word	0x0016e35f
 8013198:	feced300 	.word	0xfeced300
 801319c:	001b7740 	.word	0x001b7740
 80131a0:	feb35bc0 	.word	0xfeb35bc0
 80131a4:	002191c0 	.word	0x002191c0
 80131a8:	fe91ca00 	.word	0xfe91ca00
 80131ac:	00387520 	.word	0x00387520
 80131b0:	fe5954e0 	.word	0xfe5954e0
 80131b4:	00419ce0 	.word	0x00419ce0

080131b8 <USB_EnableGlobalInt>:
{
 80131b8:	4603      	mov	r3, r0
}
 80131ba:	2000      	movs	r0, #0
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80131bc:	689a      	ldr	r2, [r3, #8]
 80131be:	f042 0201 	orr.w	r2, r2, #1
 80131c2:	609a      	str	r2, [r3, #8]
}
 80131c4:	4770      	bx	lr
 80131c6:	bf00      	nop

080131c8 <USB_DisableGlobalInt>:
{
 80131c8:	4603      	mov	r3, r0
}
 80131ca:	2000      	movs	r0, #0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80131cc:	689a      	ldr	r2, [r3, #8]
 80131ce:	f022 0201 	bic.w	r2, r2, #1
 80131d2:	609a      	str	r2, [r3, #8]
}
 80131d4:	4770      	bx	lr
 80131d6:	bf00      	nop

080131d8 <USB_SetCurrentMode>:
{
 80131d8:	b538      	push	{r3, r4, r5, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80131da:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80131dc:	2901      	cmp	r1, #1
{
 80131de:	4605      	mov	r5, r0
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80131e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80131e4:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80131e6:	d017      	beq.n	8013218 <USB_SetCurrentMode+0x40>
  else if (mode == USB_DEVICE_MODE)
 80131e8:	b9a1      	cbnz	r1, 8013214 <USB_SetCurrentMode+0x3c>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80131ea:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 80131ec:	460c      	mov	r4, r1
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80131ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80131f2:	60c3      	str	r3, [r0, #12]
 80131f4:	e001      	b.n	80131fa <USB_SetCurrentMode+0x22>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80131f6:	2c32      	cmp	r4, #50	; 0x32
 80131f8:	d00c      	beq.n	8013214 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 80131fa:	2001      	movs	r0, #1
      ms++;
 80131fc:	4404      	add	r4, r0
      HAL_Delay(1U);
 80131fe:	f7f4 fd31 	bl	8007c64 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8013202:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8013204:	07db      	lsls	r3, r3, #31
 8013206:	d4f6      	bmi.n	80131f6 <USB_SetCurrentMode+0x1e>
    return HAL_ERROR;
 8013208:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801320c:	fab0 f080 	clz	r0, r0
 8013210:	0940      	lsrs	r0, r0, #5
}
 8013212:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8013214:	2001      	movs	r0, #1
}
 8013216:	bd38      	pop	{r3, r4, r5, pc}
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8013218:	68c3      	ldr	r3, [r0, #12]
  uint32_t ms = 0U;
 801321a:	2400      	movs	r4, #0
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801321c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013220:	60c3      	str	r3, [r0, #12]
 8013222:	e001      	b.n	8013228 <USB_SetCurrentMode+0x50>
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013224:	2c32      	cmp	r4, #50	; 0x32
 8013226:	d0f5      	beq.n	8013214 <USB_SetCurrentMode+0x3c>
      HAL_Delay(1U);
 8013228:	2001      	movs	r0, #1
      ms++;
 801322a:	4404      	add	r4, r0
      HAL_Delay(1U);
 801322c:	f7f4 fd1a 	bl	8007c64 <HAL_Delay>
  return ((USBx->GINTSTS) & 0x1U);
 8013230:	696b      	ldr	r3, [r5, #20]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8013232:	07da      	lsls	r2, r3, #31
 8013234:	d5f6      	bpl.n	8013224 <USB_SetCurrentMode+0x4c>
    return HAL_ERROR;
 8013236:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
 801323a:	fab0 f080 	clz	r0, r0
 801323e:	0940      	lsrs	r0, r0, #5
 8013240:	e7e7      	b.n	8013212 <USB_SetCurrentMode+0x3a>
 8013242:	bf00      	nop

08013244 <USB_FlushTxFifo>:
{
 8013244:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8013246:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013248:	4a11      	ldr	r2, [pc, #68]	; (8013290 <USB_FlushTxFifo+0x4c>)
  __IO uint32_t count = 0U;
 801324a:	9301      	str	r3, [sp, #4]
 801324c:	e002      	b.n	8013254 <USB_FlushTxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801324e:	6903      	ldr	r3, [r0, #16]
 8013250:	2b00      	cmp	r3, #0
 8013252:	db07      	blt.n	8013264 <USB_FlushTxFifo+0x20>
    if (++count > 200000U)
 8013254:	9b01      	ldr	r3, [sp, #4]
 8013256:	3301      	adds	r3, #1
 8013258:	4293      	cmp	r3, r2
 801325a:	9301      	str	r3, [sp, #4]
 801325c:	d9f7      	bls.n	801324e <USB_FlushTxFifo+0xa>
      return HAL_TIMEOUT;
 801325e:	2003      	movs	r0, #3
}
 8013260:	b002      	add	sp, #8
 8013262:	4770      	bx	lr
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013264:	0189      	lsls	r1, r1, #6
  count = 0U;
 8013266:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013268:	4a09      	ldr	r2, [pc, #36]	; (8013290 <USB_FlushTxFifo+0x4c>)
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801326a:	f041 0120 	orr.w	r1, r1, #32
  count = 0U;
 801326e:	9301      	str	r3, [sp, #4]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013270:	6101      	str	r1, [r0, #16]
 8013272:	e003      	b.n	801327c <USB_FlushTxFifo+0x38>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013274:	6903      	ldr	r3, [r0, #16]
 8013276:	f013 0320 	ands.w	r3, r3, #32
 801327a:	d005      	beq.n	8013288 <USB_FlushTxFifo+0x44>
    if (++count > 200000U)
 801327c:	9b01      	ldr	r3, [sp, #4]
 801327e:	3301      	adds	r3, #1
 8013280:	4293      	cmp	r3, r2
 8013282:	9301      	str	r3, [sp, #4]
 8013284:	d9f6      	bls.n	8013274 <USB_FlushTxFifo+0x30>
 8013286:	e7ea      	b.n	801325e <USB_FlushTxFifo+0x1a>
  return HAL_OK;
 8013288:	4618      	mov	r0, r3
}
 801328a:	b002      	add	sp, #8
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	00030d40 	.word	0x00030d40

08013294 <USB_FlushRxFifo>:
{
 8013294:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8013296:	2300      	movs	r3, #0
    if (++count > 200000U)
 8013298:	4a10      	ldr	r2, [pc, #64]	; (80132dc <USB_FlushRxFifo+0x48>)
  __IO uint32_t count = 0U;
 801329a:	9301      	str	r3, [sp, #4]
 801329c:	e002      	b.n	80132a4 <USB_FlushRxFifo+0x10>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801329e:	6903      	ldr	r3, [r0, #16]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	db07      	blt.n	80132b4 <USB_FlushRxFifo+0x20>
    if (++count > 200000U)
 80132a4:	9b01      	ldr	r3, [sp, #4]
 80132a6:	3301      	adds	r3, #1
 80132a8:	4293      	cmp	r3, r2
 80132aa:	9301      	str	r3, [sp, #4]
 80132ac:	d9f7      	bls.n	801329e <USB_FlushRxFifo+0xa>
      return HAL_TIMEOUT;
 80132ae:	2003      	movs	r0, #3
}
 80132b0:	b002      	add	sp, #8
 80132b2:	4770      	bx	lr
  count = 0U;
 80132b4:	2100      	movs	r1, #0
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80132b6:	2310      	movs	r3, #16
    if (++count > 200000U)
 80132b8:	4a08      	ldr	r2, [pc, #32]	; (80132dc <USB_FlushRxFifo+0x48>)
  count = 0U;
 80132ba:	9101      	str	r1, [sp, #4]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80132bc:	6103      	str	r3, [r0, #16]
 80132be:	e003      	b.n	80132c8 <USB_FlushRxFifo+0x34>
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80132c0:	6903      	ldr	r3, [r0, #16]
 80132c2:	f013 0310 	ands.w	r3, r3, #16
 80132c6:	d005      	beq.n	80132d4 <USB_FlushRxFifo+0x40>
    if (++count > 200000U)
 80132c8:	9b01      	ldr	r3, [sp, #4]
 80132ca:	3301      	adds	r3, #1
 80132cc:	4293      	cmp	r3, r2
 80132ce:	9301      	str	r3, [sp, #4]
 80132d0:	d9f6      	bls.n	80132c0 <USB_FlushRxFifo+0x2c>
 80132d2:	e7ec      	b.n	80132ae <USB_FlushRxFifo+0x1a>
  return HAL_OK;
 80132d4:	4618      	mov	r0, r3
}
 80132d6:	b002      	add	sp, #8
 80132d8:	4770      	bx	lr
 80132da:	bf00      	nop
 80132dc:	00030d40 	.word	0x00030d40

080132e0 <USB_DevInit>:
{
 80132e0:	b084      	sub	sp, #16
 80132e2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80132e6:	ad09      	add	r5, sp, #36	; 0x24
 80132e8:	4604      	mov	r4, r0
 80132ea:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80132ec:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 80132f0:	2300      	movs	r3, #0
 80132f2:	460d      	mov	r5, r1
    USBx->DIEPTXF[i] = 0U;
 80132f4:	4619      	mov	r1, r3
 80132f6:	f103 0240 	add.w	r2, r3, #64	; 0x40
  for (i = 0U; i < 15U; i++)
 80132fa:	3301      	adds	r3, #1
    USBx->DIEPTXF[i] = 0U;
 80132fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8013300:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8013302:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8013304:	d1f7      	bne.n	80132f6 <USB_DevInit+0x16>
  if (cfg.vbus_sensing_enable == 0U)
 8013306:	2e00      	cmp	r6, #0
 8013308:	f040 8092 	bne.w	8013430 <USB_DevInit+0x150>
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801330c:	f8d4 3804 	ldr.w	r3, [r4, #2052]	; 0x804
 8013310:	f504 6700 	add.w	r7, r4, #2048	; 0x800
 8013314:	f043 0302 	orr.w	r3, r3, #2
 8013318:	607b      	str	r3, [r7, #4]
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 801331a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801331c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013320:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8013322:	6823      	ldr	r3, [r4, #0]
 8013324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013328:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 801332a:	6823      	ldr	r3, [r4, #0]
 801332c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013330:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8013332:	2300      	movs	r3, #0
 8013334:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8013338:	683b      	ldr	r3, [r7, #0]
 801333a:	603b      	str	r3, [r7, #0]
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801333c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801333e:	2b01      	cmp	r3, #1
 8013340:	d07d      	beq.n	801343e <USB_DevInit+0x15e>
  USBx_DEVICE->DCFG |= speed;
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	f043 0303 	orr.w	r3, r3, #3
 8013348:	603b      	str	r3, [r7, #0]
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 801334a:	2110      	movs	r1, #16
 801334c:	4620      	mov	r0, r4
 801334e:	f7ff ff79 	bl	8013244 <USB_FlushTxFifo>
 8013352:	4680      	mov	r8, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013354:	4620      	mov	r0, r4
 8013356:	f7ff ff9d 	bl	8013294 <USB_FlushRxFifo>
 801335a:	ea48 0000 	orr.w	r0, r8, r0
  USBx_DEVICE->DIEPMSK = 0U;
 801335e:	2200      	movs	r2, #0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013360:	b2c0      	uxtb	r0, r0
  USBx_DEVICE->DIEPMSK = 0U;
 8013362:	613a      	str	r2, [r7, #16]
    ret = HAL_ERROR;
 8013364:	3800      	subs	r0, #0
  USBx_DEVICE->DOEPMSK = 0U;
 8013366:	617a      	str	r2, [r7, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8013368:	61fa      	str	r2, [r7, #28]
    ret = HAL_ERROR;
 801336a:	bf18      	it	ne
 801336c:	2001      	movne	r0, #1
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801336e:	b1ed      	cbz	r5, 80133ac <USB_DevInit+0xcc>
 8013370:	f504 6310 	add.w	r3, r4, #2304	; 0x900
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8013374:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8013378:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_INEP(i)->DIEPCTL = 0U;
 801337c:	4694      	mov	ip, r2
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801337e:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8013382:	e009      	b.n	8013398 <USB_DevInit+0xb8>
      USBx_INEP(i)->DIEPCTL = 0U;
 8013384:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013388:	3201      	adds	r2, #1
    USBx_INEP(i)->DIEPTSIZ = 0U;
 801338a:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801338e:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013392:	3320      	adds	r3, #32
 8013394:	4295      	cmp	r5, r2
 8013396:	d02c      	beq.n	80133f2 <USB_DevInit+0x112>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013398:	6819      	ldr	r1, [r3, #0]
 801339a:	2900      	cmp	r1, #0
 801339c:	daf2      	bge.n	8013384 <USB_DevInit+0xa4>
      if (i == 0U)
 801339e:	b112      	cbz	r2, 80133a6 <USB_DevInit+0xc6>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80133a0:	f8c3 8000 	str.w	r8, [r3]
 80133a4:	e7f0      	b.n	8013388 <USB_DevInit+0xa8>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80133a6:	f8c3 9000 	str.w	r9, [r3]
 80133aa:	e7ed      	b.n	8013388 <USB_DevInit+0xa8>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80133ac:	693b      	ldr	r3, [r7, #16]
  USBx->GINTMSK = 0U;
 80133ae:	2200      	movs	r2, #0
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80133b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80133b4:	613b      	str	r3, [r7, #16]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80133b6:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
  USBx->GINTMSK = 0U;
 80133ba:	61a2      	str	r2, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 80133bc:	6163      	str	r3, [r4, #20]
  if (cfg.dma_enable == 0U)
 80133be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80133c0:	b91b      	cbnz	r3, 80133ca <USB_DevInit+0xea>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80133c2:	69a3      	ldr	r3, [r4, #24]
 80133c4:	f043 0310 	orr.w	r3, r3, #16
 80133c8:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80133ca:	69a2      	ldr	r2, [r4, #24]
 80133cc:	4b21      	ldr	r3, [pc, #132]	; (8013454 <USB_DevInit+0x174>)
 80133ce:	4313      	orrs	r3, r2
  if (cfg.Sof_enable != 0U)
 80133d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80133d2:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 80133d4:	b11a      	cbz	r2, 80133de <USB_DevInit+0xfe>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80133d6:	69a3      	ldr	r3, [r4, #24]
 80133d8:	f043 0308 	orr.w	r3, r3, #8
 80133dc:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 80133de:	2e01      	cmp	r6, #1
 80133e0:	d103      	bne.n	80133ea <USB_DevInit+0x10a>
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80133e2:	69a2      	ldr	r2, [r4, #24]
 80133e4:	4b1c      	ldr	r3, [pc, #112]	; (8013458 <USB_DevInit+0x178>)
 80133e6:	4313      	orrs	r3, r2
 80133e8:	61a3      	str	r3, [r4, #24]
}
 80133ea:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80133ee:	b004      	add	sp, #16
 80133f0:	4770      	bx	lr
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80133f2:	2200      	movs	r2, #0
 80133f4:	f504 6330 	add.w	r3, r4, #2816	; 0xb00
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80133f8:	f04f 4890 	mov.w	r8, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80133fc:	f04f 6900 	mov.w	r9, #134217728	; 0x8000000
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013400:	4694      	mov	ip, r2
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013402:	f64f 3e7f 	movw	lr, #64383	; 0xfb7f
 8013406:	e009      	b.n	801341c <USB_DevInit+0x13c>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8013408:	f8c3 c000 	str.w	ip, [r3]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801340c:	3201      	adds	r2, #1
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801340e:	f8c3 c010 	str.w	ip, [r3, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013412:	f8c3 e008 	str.w	lr, [r3, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013416:	3320      	adds	r3, #32
 8013418:	4295      	cmp	r5, r2
 801341a:	d0c7      	beq.n	80133ac <USB_DevInit+0xcc>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801341c:	6819      	ldr	r1, [r3, #0]
 801341e:	2900      	cmp	r1, #0
 8013420:	daf2      	bge.n	8013408 <USB_DevInit+0x128>
      if (i == 0U)
 8013422:	b112      	cbz	r2, 801342a <USB_DevInit+0x14a>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013424:	f8c3 8000 	str.w	r8, [r3]
 8013428:	e7f0      	b.n	801340c <USB_DevInit+0x12c>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 801342a:	f8c3 9000 	str.w	r9, [r3]
 801342e:	e7ed      	b.n	801340c <USB_DevInit+0x12c>
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013430:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013432:	f504 6700 	add.w	r7, r4, #2048	; 0x800
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8013436:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801343a:	63a3      	str	r3, [r4, #56]	; 0x38
 801343c:	e779      	b.n	8013332 <USB_DevInit+0x52>
    if (cfg.speed == USBD_HS_SPEED)
 801343e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013440:	b913      	cbnz	r3, 8013448 <USB_DevInit+0x168>
  USBx_DEVICE->DCFG |= speed;
 8013442:	683b      	ldr	r3, [r7, #0]
 8013444:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013446:	e780      	b.n	801334a <USB_DevInit+0x6a>
  USBx_DEVICE->DCFG |= speed;
 8013448:	683b      	ldr	r3, [r7, #0]
 801344a:	f043 0301 	orr.w	r3, r3, #1
 801344e:	603b      	str	r3, [r7, #0]
  return HAL_OK;
 8013450:	e77b      	b.n	801334a <USB_DevInit+0x6a>
 8013452:	bf00      	nop
 8013454:	803c3800 	.word	0x803c3800
 8013458:	40000004 	.word	0x40000004

0801345c <USB_GetDevSpeed>:
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801345c:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013460:	f013 0006 	ands.w	r0, r3, #6
 8013464:	d004      	beq.n	8013470 <USB_GetDevSpeed+0x14>
    speed = 0xFU;
 8013466:	f013 0f02 	tst.w	r3, #2
 801346a:	bf14      	ite	ne
 801346c:	2002      	movne	r0, #2
 801346e:	200f      	moveq	r0, #15
}
 8013470:	4770      	bx	lr
 8013472:	bf00      	nop

08013474 <USB_ActivateEndpoint>:
{
 8013474:	b430      	push	{r4, r5}
  if (ep->is_in == 1U)
 8013476:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013478:	780a      	ldrb	r2, [r1, #0]
  if (ep->is_in == 1U)
 801347a:	2b01      	cmp	r3, #1
 801347c:	d020      	beq.n	80134c0 <USB_ActivateEndpoint+0x4c>
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801347e:	f002 0c0f 	and.w	ip, r2, #15
 8013482:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013486:	f8d0 481c 	ldr.w	r4, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801348a:	eb00 1242 	add.w	r2, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801348e:	fa03 f30c 	lsl.w	r3, r3, ip
 8013492:	4323      	orrs	r3, r4
 8013494:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013498:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 801349c:	041b      	lsls	r3, r3, #16
 801349e:	d40c      	bmi.n	80134ba <USB_ActivateEndpoint+0x46>
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134a0:	688b      	ldr	r3, [r1, #8]
 80134a2:	f8d2 4b00 	ldr.w	r4, [r2, #2816]	; 0xb00
 80134a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80134aa:	78c8      	ldrb	r0, [r1, #3]
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80134ac:	4914      	ldr	r1, [pc, #80]	; (8013500 <USB_ActivateEndpoint+0x8c>)
 80134ae:	4323      	orrs	r3, r4
 80134b0:	ea43 4380 	orr.w	r3, r3, r0, lsl #18
 80134b4:	4319      	orrs	r1, r3
 80134b6:	f8c2 1b00 	str.w	r1, [r2, #2816]	; 0xb00
}
 80134ba:	2000      	movs	r0, #0
 80134bc:	bc30      	pop	{r4, r5}
 80134be:	4770      	bx	lr
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80134c0:	f500 6400 	add.w	r4, r0, #2048	; 0x800
 80134c4:	f002 050f 	and.w	r5, r2, #15
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80134c8:	eb00 1042 	add.w	r0, r0, r2, lsl #5
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80134cc:	40ab      	lsls	r3, r5
 80134ce:	69e5      	ldr	r5, [r4, #28]
 80134d0:	432b      	orrs	r3, r5
 80134d2:	61e3      	str	r3, [r4, #28]
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80134d4:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80134d8:	041c      	lsls	r4, r3, #16
 80134da:	d4ee      	bmi.n	80134ba <USB_ActivateEndpoint+0x46>
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134dc:	688b      	ldr	r3, [r1, #8]
 80134de:	f8d0 5900 	ldr.w	r5, [r0, #2304]	; 0x900
 80134e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80134e6:	78cc      	ldrb	r4, [r1, #3]
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134e8:	4905      	ldr	r1, [pc, #20]	; (8013500 <USB_ActivateEndpoint+0x8c>)
 80134ea:	432b      	orrs	r3, r5
 80134ec:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80134f0:	ea43 5282 	orr.w	r2, r3, r2, lsl #22
 80134f4:	4311      	orrs	r1, r2
}
 80134f6:	bc30      	pop	{r4, r5}
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80134f8:	f8c0 1900 	str.w	r1, [r0, #2304]	; 0x900
}
 80134fc:	2000      	movs	r0, #0
 80134fe:	4770      	bx	lr
 8013500:	10008000 	.word	0x10008000

08013504 <USB_DeactivateEndpoint>:
  if (ep->is_in == 1U)
 8013504:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 8013506:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013508:	2a01      	cmp	r2, #1
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801350a:	eb00 1c43 	add.w	ip, r0, r3, lsl #5
  if (ep->is_in == 1U)
 801350e:	d02a      	beq.n	8013566 <USB_DeactivateEndpoint+0x62>
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013510:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013514:	2a00      	cmp	r2, #0
 8013516:	db19      	blt.n	801354c <USB_DeactivateEndpoint+0x48>
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013518:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801351c:	f003 030f 	and.w	r3, r3, #15
 8013520:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013524:	fa02 f303 	lsl.w	r3, r2, r3
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013528:	4a23      	ldr	r2, [pc, #140]	; (80135b8 <USB_DeactivateEndpoint+0xb4>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801352a:	ea21 0103 	bic.w	r1, r1, r3
 801352e:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013532:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 8013536:	ea21 0303 	bic.w	r3, r1, r3
 801353a:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 801353e:	2000      	movs	r0, #0
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013540:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013544:	401a      	ands	r2, r3
 8013546:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
}
 801354a:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801354c:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 8013550:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013554:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013558:	f8dc 2b00 	ldr.w	r2, [ip, #2816]	; 0xb00
 801355c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013560:	f8cc 2b00 	str.w	r2, [ip, #2816]	; 0xb00
 8013564:	e7d8      	b.n	8013518 <USB_DeactivateEndpoint+0x14>
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013566:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801356a:	2a00      	cmp	r2, #0
 801356c:	da0b      	bge.n	8013586 <USB_DeactivateEndpoint+0x82>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801356e:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 8013572:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013576:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801357a:	f8dc 2900 	ldr.w	r2, [ip, #2304]	; 0x900
 801357e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8013582:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013586:	f003 020f 	and.w	r2, r3, #15
 801358a:	2301      	movs	r3, #1
 801358c:	f8d0 183c 	ldr.w	r1, [r0, #2108]	; 0x83c
 8013590:	4093      	lsls	r3, r2
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013592:	4a0a      	ldr	r2, [pc, #40]	; (80135bc <USB_DeactivateEndpoint+0xb8>)
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013594:	ea21 0103 	bic.w	r1, r1, r3
 8013598:	f8c0 183c 	str.w	r1, [r0, #2108]	; 0x83c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801359c:	f8d0 181c 	ldr.w	r1, [r0, #2076]	; 0x81c
 80135a0:	ea21 0303 	bic.w	r3, r1, r3
 80135a4:	f8c0 381c 	str.w	r3, [r0, #2076]	; 0x81c
}
 80135a8:	2000      	movs	r0, #0
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80135aa:	f8dc 3900 	ldr.w	r3, [ip, #2304]	; 0x900
 80135ae:	401a      	ands	r2, r3
 80135b0:	f8cc 2900 	str.w	r2, [ip, #2304]	; 0x900
}
 80135b4:	4770      	bx	lr
 80135b6:	bf00      	nop
 80135b8:	eff37800 	.word	0xeff37800
 80135bc:	ec337800 	.word	0xec337800

080135c0 <USB_EPStartXfer>:
{
 80135c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (ep->is_in == 1U)
 80135c4:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80135c6:	f891 c000 	ldrb.w	ip, [r1]
  if (ep->is_in == 1U)
 80135ca:	2b01      	cmp	r3, #1
 80135cc:	d051      	beq.n	8013672 <USB_EPStartXfer+0xb2>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80135ce:	eb00 1c4c 	add.w	ip, r0, ip, lsl #5
 80135d2:	4c84      	ldr	r4, [pc, #528]	; (80137e4 <USB_EPStartXfer+0x224>)
 80135d4:	f8dc 5b10 	ldr.w	r5, [ip, #2832]	; 0xb10
 80135d8:	f50c 6330 	add.w	r3, ip, #2816	; 0xb00
 80135dc:	402c      	ands	r4, r5
 80135de:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80135e0:	4c81      	ldr	r4, [pc, #516]	; (80137e8 <USB_EPStartXfer+0x228>)
 80135e2:	691d      	ldr	r5, [r3, #16]
 80135e4:	402c      	ands	r4, r5
 80135e6:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len == 0U)
 80135e8:	694c      	ldr	r4, [r1, #20]
 80135ea:	b384      	cbz	r4, 801364e <USB_EPStartXfer+0x8e>
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80135ec:	688d      	ldr	r5, [r1, #8]
    if (dma == 1U)
 80135ee:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80135f0:	4e7e      	ldr	r6, [pc, #504]	; (80137ec <USB_EPStartXfer+0x22c>)
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80135f2:	442c      	add	r4, r5
 80135f4:	f104 34ff 	add.w	r4, r4, #4294967295
 80135f8:	fbb4 f4f5 	udiv	r4, r4, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80135fc:	ea06 4ec4 	and.w	lr, r6, r4, lsl #19
 8013600:	b2a4      	uxth	r4, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013602:	fb05 f404 	mul.w	r4, r5, r4
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013606:	691d      	ldr	r5, [r3, #16]
 8013608:	ea4e 0505 	orr.w	r5, lr, r5
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801360c:	f3c4 0412 	ubfx	r4, r4, #0, #19
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8013610:	611d      	str	r5, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8013612:	691d      	ldr	r5, [r3, #16]
 8013614:	ea44 0405 	orr.w	r4, r4, r5
 8013618:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 801361a:	d025      	beq.n	8013668 <USB_EPStartXfer+0xa8>
    if (ep->type == EP_TYPE_ISOC)
 801361c:	78cb      	ldrb	r3, [r1, #3]
 801361e:	2b01      	cmp	r3, #1
 8013620:	d10c      	bne.n	801363c <USB_EPStartXfer+0x7c>
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013622:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013626:	f413 7f80 	tst.w	r3, #256	; 0x100
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801362a:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 801362e:	bf0c      	ite	eq
 8013630:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013634:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013638:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801363c:	f8dc 3b00 	ldr.w	r3, [ip, #2816]	; 0xb00
 8013640:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013644:	f8cc 3b00 	str.w	r3, [ip, #2816]	; 0xb00
}
 8013648:	2000      	movs	r0, #0
 801364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 801364e:	688c      	ldr	r4, [r1, #8]
    if (dma == 1U)
 8013650:	2a01      	cmp	r2, #1
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013652:	691d      	ldr	r5, [r3, #16]
 8013654:	f3c4 0412 	ubfx	r4, r4, #0, #19
 8013658:	ea44 0405 	orr.w	r4, r4, r5
 801365c:	611c      	str	r4, [r3, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801365e:	691c      	ldr	r4, [r3, #16]
 8013660:	f444 2400 	orr.w	r4, r4, #524288	; 0x80000
 8013664:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013666:	d1d9      	bne.n	801361c <USB_EPStartXfer+0x5c>
      if ((uint32_t)ep->xfer_buff != 0U)
 8013668:	68ca      	ldr	r2, [r1, #12]
 801366a:	2a00      	cmp	r2, #0
 801366c:	d0d6      	beq.n	801361c <USB_EPStartXfer+0x5c>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801366e:	615a      	str	r2, [r3, #20]
 8013670:	e7d4      	b.n	801361c <USB_EPStartXfer+0x5c>
    if (ep->xfer_len == 0U)
 8013672:	694d      	ldr	r5, [r1, #20]
 8013674:	2d00      	cmp	r5, #0
 8013676:	d03d      	beq.n	80136f4 <USB_EPStartXfer+0x134>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013678:	eb00 144c 	add.w	r4, r0, ip, lsl #5
 801367c:	4e59      	ldr	r6, [pc, #356]	; (80137e4 <USB_EPStartXfer+0x224>)
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 801367e:	f8d1 e008 	ldr.w	lr, [r1, #8]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013682:	f8d4 8910 	ldr.w	r8, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013686:	4f58      	ldr	r7, [pc, #352]	; (80137e8 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013688:	ea08 0606 	and.w	r6, r8, r6
 801368c:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013690:	eb05 060e 	add.w	r6, r5, lr
 8013694:	3e01      	subs	r6, #1
 8013696:	fbb6 fefe 	udiv	lr, r6, lr
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801369a:	f8d4 6910 	ldr.w	r6, [r4, #2320]	; 0x910
 801369e:	4037      	ands	r7, r6
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80136a0:	4e52      	ldr	r6, [pc, #328]	; (80137ec <USB_EPStartXfer+0x22c>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80136a2:	f8c4 7910 	str.w	r7, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80136a6:	ea06 46ce 	and.w	r6, r6, lr, lsl #19
 80136aa:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 80136ae:	433e      	orrs	r6, r7
 80136b0:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80136b4:	f3c5 0612 	ubfx	r6, r5, #0, #19
 80136b8:	f8d4 7910 	ldr.w	r7, [r4, #2320]	; 0x910
 80136bc:	433e      	orrs	r6, r7
 80136be:	f8c4 6910 	str.w	r6, [r4, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80136c2:	f504 6610 	add.w	r6, r4, #2304	; 0x900
      if (ep->type == EP_TYPE_ISOC)
 80136c6:	f891 e003 	ldrb.w	lr, [r1, #3]
 80136ca:	f1be 0f01 	cmp.w	lr, #1
 80136ce:	d057      	beq.n	8013780 <USB_EPStartXfer+0x1c0>
    if (dma == 1U)
 80136d0:	2a01      	cmp	r2, #1
 80136d2:	d072      	beq.n	80137ba <USB_EPStartXfer+0x1fa>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136d4:	f8d4 2900 	ldr.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136d8:	f00c 0c0f 	and.w	ip, ip, #15
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136dc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136e0:	fa03 f30c 	lsl.w	r3, r3, ip
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80136e4:	f8c4 2900 	str.w	r2, [r4, #2304]	; 0x900
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80136e8:	f8d0 2834 	ldr.w	r2, [r0, #2100]	; 0x834
 80136ec:	4313      	orrs	r3, r2
 80136ee:	f8c0 3834 	str.w	r3, [r0, #2100]	; 0x834
  return HAL_OK;
 80136f2:	e7a9      	b.n	8013648 <USB_EPStartXfer+0x88>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80136f4:	eb00 134c 	add.w	r3, r0, ip, lsl #5
 80136f8:	4e3b      	ldr	r6, [pc, #236]	; (80137e8 <USB_EPStartXfer+0x228>)
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80136fa:	4c3a      	ldr	r4, [pc, #232]	; (80137e4 <USB_EPStartXfer+0x224>)
    if (dma == 1U)
 80136fc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80136fe:	f8d3 7910 	ldr.w	r7, [r3, #2320]	; 0x910
 8013702:	ea06 0607 	and.w	r6, r6, r7
 8013706:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801370a:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 801370e:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 8013712:	f8c3 6910 	str.w	r6, [r3, #2320]	; 0x910
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013716:	f8d3 6910 	ldr.w	r6, [r3, #2320]	; 0x910
 801371a:	ea04 0406 	and.w	r4, r4, r6
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801371e:	f503 6610 	add.w	r6, r3, #2304	; 0x900
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013722:	f8c3 4910 	str.w	r4, [r3, #2320]	; 0x910
      if (ep->type == EP_TYPE_ISOC)
 8013726:	f891 e003 	ldrb.w	lr, [r1, #3]
    if (dma == 1U)
 801372a:	d03a      	beq.n	80137a2 <USB_EPStartXfer+0x1e2>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801372c:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 8013730:	f1be 0f01 	cmp.w	lr, #1
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013734:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8013738:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 801373c:	d184      	bne.n	8013648 <USB_EPStartXfer+0x88>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801373e:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8013742:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013746:	6833      	ldr	r3, [r6, #0]
 8013748:	bf0c      	ite	eq
 801374a:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801374e:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 8013752:	6033      	str	r3, [r6, #0]
  if (dma == 0U)
 8013754:	2a00      	cmp	r2, #0
 8013756:	f47f af77 	bne.w	8013648 <USB_EPStartXfer+0x88>
    count32b = ((uint32_t)len + 3U) / 4U;
 801375a:	b2ad      	uxth	r5, r5
 801375c:	3503      	adds	r5, #3
    for (i = 0U; i < count32b; i++)
 801375e:	08ad      	lsrs	r5, r5, #2
 8013760:	f43f af72 	beq.w	8013648 <USB_EPStartXfer+0x88>
        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8013764:	68cb      	ldr	r3, [r1, #12]
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013766:	eb00 3c0c 	add.w	ip, r0, ip, lsl #12
 801376a:	eb03 0185 	add.w	r1, r3, r5, lsl #2
 801376e:	f50c 5c80 	add.w	ip, ip, #4096	; 0x1000
 8013772:	f853 2b04 	ldr.w	r2, [r3], #4
    for (i = 0U; i < count32b; i++)
 8013776:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013778:	f8cc 2000 	str.w	r2, [ip]
    for (i = 0U; i < count32b; i++)
 801377c:	d1f9      	bne.n	8013772 <USB_EPStartXfer+0x1b2>
 801377e:	e763      	b.n	8013648 <USB_EPStartXfer+0x88>
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013780:	6933      	ldr	r3, [r6, #16]
    if (dma == 1U)
 8013782:	2a01      	cmp	r2, #1
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013784:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013788:	6133      	str	r3, [r6, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801378a:	6933      	ldr	r3, [r6, #16]
 801378c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013790:	6133      	str	r3, [r6, #16]
    if (dma == 1U)
 8013792:	d017      	beq.n	80137c4 <USB_EPStartXfer+0x204>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8013794:	f8d4 3900 	ldr.w	r3, [r4, #2304]	; 0x900
 8013798:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801379c:	f8c4 3900 	str.w	r3, [r4, #2304]	; 0x900
      if (ep->type != EP_TYPE_ISOC)
 80137a0:	e7cd      	b.n	801373e <USB_EPStartXfer+0x17e>
      if ((uint32_t)ep->dma_addr != 0U)
 80137a2:	690b      	ldr	r3, [r1, #16]
 80137a4:	b963      	cbnz	r3, 80137c0 <USB_EPStartXfer+0x200>
      if (ep->type == EP_TYPE_ISOC)
 80137a6:	f1be 0f01 	cmp.w	lr, #1
 80137aa:	d00e      	beq.n	80137ca <USB_EPStartXfer+0x20a>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80137ac:	6833      	ldr	r3, [r6, #0]
}
 80137ae:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80137b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80137b4:	6033      	str	r3, [r6, #0]
}
 80137b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((uint32_t)ep->dma_addr != 0U)
 80137ba:	690b      	ldr	r3, [r1, #16]
 80137bc:	2b00      	cmp	r3, #0
 80137be:	d0f5      	beq.n	80137ac <USB_EPStartXfer+0x1ec>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80137c0:	6173      	str	r3, [r6, #20]
 80137c2:	e7f0      	b.n	80137a6 <USB_EPStartXfer+0x1e6>
      if ((uint32_t)ep->dma_addr != 0U)
 80137c4:	690b      	ldr	r3, [r1, #16]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d1fa      	bne.n	80137c0 <USB_EPStartXfer+0x200>
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80137ca:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 80137ce:	f413 7f80 	tst.w	r3, #256	; 0x100
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80137d2:	6833      	ldr	r3, [r6, #0]
 80137d4:	bf0c      	ite	eq
 80137d6:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80137da:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
 80137de:	6033      	str	r3, [r6, #0]
 80137e0:	e7e4      	b.n	80137ac <USB_EPStartXfer+0x1ec>
 80137e2:	bf00      	nop
 80137e4:	fff80000 	.word	0xfff80000
 80137e8:	e007ffff 	.word	0xe007ffff
 80137ec:	1ff80000 	.word	0x1ff80000

080137f0 <USB_EP0StartXfer>:
{
 80137f0:	b4f0      	push	{r4, r5, r6, r7}
  if (ep->is_in == 1U)
 80137f2:	784b      	ldrb	r3, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80137f4:	780c      	ldrb	r4, [r1, #0]
  if (ep->is_in == 1U)
 80137f6:	2b01      	cmp	r3, #1
 80137f8:	d027      	beq.n	801384a <USB_EP0StartXfer+0x5a>
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80137fa:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 80137fe:	4c3c      	ldr	r4, [pc, #240]	; (80138f0 <USB_EP0StartXfer+0x100>)
 8013800:	f8d0 5b10 	ldr.w	r5, [r0, #2832]	; 0xb10
 8013804:	f500 6330 	add.w	r3, r0, #2816	; 0xb00
 8013808:	402c      	ands	r4, r5
 801380a:	611c      	str	r4, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801380c:	4c39      	ldr	r4, [pc, #228]	; (80138f4 <USB_EP0StartXfer+0x104>)
 801380e:	691d      	ldr	r5, [r3, #16]
 8013810:	402c      	ands	r4, r5
 8013812:	611c      	str	r4, [r3, #16]
    if (ep->xfer_len > 0U)
 8013814:	694c      	ldr	r4, [r1, #20]
 8013816:	b9ac      	cbnz	r4, 8013844 <USB_EP0StartXfer+0x54>
      if (ep->xfer_len > ep->maxpacket)
 8013818:	688c      	ldr	r4, [r1, #8]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801381a:	691d      	ldr	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 801381c:	f3c4 0412 	ubfx	r4, r4, #0, #19
    if (dma == 1U)
 8013820:	2a01      	cmp	r2, #1
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013822:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 8013826:	611d      	str	r5, [r3, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8013828:	691d      	ldr	r5, [r3, #16]
 801382a:	ea44 0405 	orr.w	r4, r4, r5
 801382e:	611c      	str	r4, [r3, #16]
    if (dma == 1U)
 8013830:	d03e      	beq.n	80138b0 <USB_EP0StartXfer+0xc0>
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013832:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013836:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801383a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801383e:	2000      	movs	r0, #0
 8013840:	bcf0      	pop	{r4, r5, r6, r7}
 8013842:	4770      	bx	lr
      ep->xfer_len = ep->maxpacket;
 8013844:	688c      	ldr	r4, [r1, #8]
 8013846:	614c      	str	r4, [r1, #20]
 8013848:	e7e7      	b.n	801381a <USB_EP0StartXfer+0x2a>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801384a:	eb00 1344 	add.w	r3, r0, r4, lsl #5
    if (ep->xfer_len == 0U)
 801384e:	694d      	ldr	r5, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
    if (ep->xfer_len == 0U)
 8013854:	2d00      	cmp	r5, #0
 8013856:	d030      	beq.n	80138ba <USB_EP0StartXfer+0xca>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013858:	691f      	ldr	r7, [r3, #16]
 801385a:	4e25      	ldr	r6, [pc, #148]	; (80138f0 <USB_EP0StartXfer+0x100>)
 801385c:	403e      	ands	r6, r7
 801385e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013860:	4e24      	ldr	r6, [pc, #144]	; (80138f4 <USB_EP0StartXfer+0x104>)
 8013862:	691f      	ldr	r7, [r3, #16]
 8013864:	403e      	ands	r6, r7
 8013866:	611e      	str	r6, [r3, #16]
      if (ep->xfer_len > ep->maxpacket)
 8013868:	688e      	ldr	r6, [r1, #8]
 801386a:	42b5      	cmp	r5, r6
 801386c:	d901      	bls.n	8013872 <USB_EP0StartXfer+0x82>
        ep->xfer_len = ep->maxpacket;
 801386e:	4635      	mov	r5, r6
 8013870:	614e      	str	r6, [r1, #20]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013872:	691e      	ldr	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013874:	f3c5 0512 	ubfx	r5, r5, #0, #19
    if (dma == 1U)
 8013878:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801387a:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
 801387e:	611e      	str	r6, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013880:	691e      	ldr	r6, [r3, #16]
 8013882:	ea45 0506 	orr.w	r5, r5, r6
 8013886:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 8013888:	d027      	beq.n	80138da <USB_EP0StartXfer+0xea>
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801388a:	681a      	ldr	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 801388c:	6949      	ldr	r1, [r1, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801388e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8013892:	601a      	str	r2, [r3, #0]
      if (ep->xfer_len > 0U)
 8013894:	2900      	cmp	r1, #0
 8013896:	d0d2      	beq.n	801383e <USB_EP0StartXfer+0x4e>
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013898:	f004 020f 	and.w	r2, r4, #15
 801389c:	2401      	movs	r4, #1
 801389e:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
 80138a2:	4094      	lsls	r4, r2
 80138a4:	431c      	orrs	r4, r3
 80138a6:	f8c0 4834 	str.w	r4, [r0, #2100]	; 0x834
}
 80138aa:	2000      	movs	r0, #0
 80138ac:	bcf0      	pop	{r4, r5, r6, r7}
 80138ae:	4770      	bx	lr
      if ((uint32_t)ep->xfer_buff != 0U)
 80138b0:	68ca      	ldr	r2, [r1, #12]
 80138b2:	2a00      	cmp	r2, #0
 80138b4:	d0bd      	beq.n	8013832 <USB_EP0StartXfer+0x42>
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80138b6:	615a      	str	r2, [r3, #20]
 80138b8:	e7bb      	b.n	8013832 <USB_EP0StartXfer+0x42>
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138ba:	691e      	ldr	r6, [r3, #16]
    if (dma == 1U)
 80138bc:	2a01      	cmp	r2, #1
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80138be:	4d0d      	ldr	r5, [pc, #52]	; (80138f4 <USB_EP0StartXfer+0x104>)
 80138c0:	ea05 0506 	and.w	r5, r5, r6
 80138c4:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80138c6:	691d      	ldr	r5, [r3, #16]
 80138c8:	f445 2500 	orr.w	r5, r5, #524288	; 0x80000
 80138cc:	611d      	str	r5, [r3, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80138ce:	4d08      	ldr	r5, [pc, #32]	; (80138f0 <USB_EP0StartXfer+0x100>)
 80138d0:	691e      	ldr	r6, [r3, #16]
 80138d2:	ea05 0506 	and.w	r5, r5, r6
 80138d6:	611d      	str	r5, [r3, #16]
    if (dma == 1U)
 80138d8:	d1d7      	bne.n	801388a <USB_EP0StartXfer+0x9a>
      if ((uint32_t)ep->dma_addr != 0U)
 80138da:	690a      	ldr	r2, [r1, #16]
 80138dc:	b102      	cbz	r2, 80138e0 <USB_EP0StartXfer+0xf0>
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80138de:	615a      	str	r2, [r3, #20]
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138e0:	681a      	ldr	r2, [r3, #0]
}
 80138e2:	2000      	movs	r0, #0
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138e4:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
}
 80138e8:	bcf0      	pop	{r4, r5, r6, r7}
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80138ea:	601a      	str	r2, [r3, #0]
}
 80138ec:	4770      	bx	lr
 80138ee:	bf00      	nop
 80138f0:	fff80000 	.word	0xfff80000
 80138f4:	e007ffff 	.word	0xe007ffff

080138f8 <USB_WritePacket>:
{
 80138f8:	b410      	push	{r4}
 80138fa:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if (dma == 0U)
 80138fe:	b964      	cbnz	r4, 801391a <USB_WritePacket+0x22>
    count32b = ((uint32_t)len + 3U) / 4U;
 8013900:	3303      	adds	r3, #3
    for (i = 0U; i < count32b; i++)
 8013902:	089b      	lsrs	r3, r3, #2
 8013904:	d009      	beq.n	801391a <USB_WritePacket+0x22>
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013906:	3201      	adds	r2, #1
 8013908:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801390c:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8013910:	f851 2b04 	ldr.w	r2, [r1], #4
    for (i = 0U; i < count32b; i++)
 8013914:	428b      	cmp	r3, r1
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013916:	6002      	str	r2, [r0, #0]
    for (i = 0U; i < count32b; i++)
 8013918:	d1fa      	bne.n	8013910 <USB_WritePacket+0x18>
}
 801391a:	2000      	movs	r0, #0
 801391c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013920:	4770      	bx	lr
 8013922:	bf00      	nop

08013924 <USB_ReadPacket>:
  for (i = 0U; i < count32b; i++)
 8013924:	ea5f 0c92 	movs.w	ip, r2, lsr #2
{
 8013928:	b570      	push	{r4, r5, r6, lr}
 801392a:	4605      	mov	r5, r0
  uint16_t remaining_bytes = len % 4U;
 801392c:	f002 0603 	and.w	r6, r2, #3
  for (i = 0U; i < count32b; i++)
 8013930:	d01a      	beq.n	8013968 <USB_ReadPacket+0x44>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8013932:	f500 5e80 	add.w	lr, r0, #4096	; 0x1000
  uint8_t *pDest = dest;
 8013936:	460a      	mov	r2, r1
  for (i = 0U; i < count32b; i++)
 8013938:	2300      	movs	r3, #0
 801393a:	3301      	adds	r3, #1
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 801393c:	f8de 4000 	ldr.w	r4, [lr]
  for (i = 0U; i < count32b; i++)
 8013940:	459c      	cmp	ip, r3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8013942:	f842 4b04 	str.w	r4, [r2], #4
  for (i = 0U; i < count32b; i++)
 8013946:	d1f8      	bne.n	801393a <USB_ReadPacket+0x16>
    pDest++;
 8013948:	eb01 008c 	add.w	r0, r1, ip, lsl #2
  if (remaining_bytes != 0U)
 801394c:	b15e      	cbz	r6, 8013966 <USB_ReadPacket+0x42>
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801394e:	f505 5580 	add.w	r5, r5, #4096	; 0x1000
 8013952:	4406      	add	r6, r0
 8013954:	2200      	movs	r2, #0
 8013956:	6829      	ldr	r1, [r5, #0]
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8013958:	fa21 f302 	lsr.w	r3, r1, r2
 801395c:	3208      	adds	r2, #8
 801395e:	f800 3b01 	strb.w	r3, [r0], #1
    } while (remaining_bytes != 0U);
 8013962:	42b0      	cmp	r0, r6
 8013964:	d1f8      	bne.n	8013958 <USB_ReadPacket+0x34>
}
 8013966:	bd70      	pop	{r4, r5, r6, pc}
  uint8_t *pDest = dest;
 8013968:	4608      	mov	r0, r1
 801396a:	e7ef      	b.n	801394c <USB_ReadPacket+0x28>

0801396c <USB_EPSetStall>:
  if (ep->is_in == 1U)
 801396c:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 801396e:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 8013970:	2a01      	cmp	r2, #1
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013972:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 8013976:	d00c      	beq.n	8013992 <USB_EPSetStall+0x26>
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013978:	f8d0 2b00 	ldr.w	r2, [r0, #2816]	; 0xb00
 801397c:	b10b      	cbz	r3, 8013982 <USB_EPSetStall+0x16>
 801397e:	2a00      	cmp	r2, #0
 8013980:	da14      	bge.n	80139ac <USB_EPSetStall+0x40>
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8013982:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013986:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801398a:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 801398e:	2000      	movs	r0, #0
 8013990:	4770      	bx	lr
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013992:	f8d0 2900 	ldr.w	r2, [r0, #2304]	; 0x900
 8013996:	2a00      	cmp	r2, #0
 8013998:	db00      	blt.n	801399c <USB_EPSetStall+0x30>
 801399a:	b973      	cbnz	r3, 80139ba <USB_EPSetStall+0x4e>
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801399c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80139a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80139a4:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 80139a8:	2000      	movs	r0, #0
 80139aa:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80139ac:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80139b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80139b4:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
 80139b8:	e7e3      	b.n	8013982 <USB_EPSetStall+0x16>
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80139ba:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80139be:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80139c2:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80139c6:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 80139ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80139ce:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
 80139d2:	e7e9      	b.n	80139a8 <USB_EPSetStall+0x3c>

080139d4 <USB_EPClearStall>:
  if (ep->is_in == 1U)
 80139d4:	784a      	ldrb	r2, [r1, #1]
  uint32_t epnum = (uint32_t)ep->num;
 80139d6:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in == 1U)
 80139d8:	2a01      	cmp	r2, #1
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80139da:	eb00 1043 	add.w	r0, r0, r3, lsl #5
  if (ep->is_in == 1U)
 80139de:	d013      	beq.n	8013a08 <USB_EPClearStall+0x34>
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80139e0:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80139e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80139e8:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80139ec:	78cb      	ldrb	r3, [r1, #3]
 80139ee:	3b02      	subs	r3, #2
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d901      	bls.n	80139f8 <USB_EPClearStall+0x24>
}
 80139f4:	2000      	movs	r0, #0
 80139f6:	4770      	bx	lr
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80139f8:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 80139fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a00:	f8c0 3b00 	str.w	r3, [r0, #2816]	; 0xb00
}
 8013a04:	2000      	movs	r0, #0
 8013a06:	4770      	bx	lr
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013a08:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013a0c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013a10:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013a14:	78cb      	ldrb	r3, [r1, #3]
 8013a16:	3b02      	subs	r3, #2
 8013a18:	2b01      	cmp	r3, #1
 8013a1a:	d8eb      	bhi.n	80139f4 <USB_EPClearStall+0x20>
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013a1c:	f8d0 3900 	ldr.w	r3, [r0, #2304]	; 0x900
 8013a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013a24:	f8c0 3900 	str.w	r3, [r0, #2304]	; 0x900
}
 8013a28:	2000      	movs	r0, #0
 8013a2a:	4770      	bx	lr

08013a2c <USB_SetDevAddress>:
{
 8013a2c:	4603      	mov	r3, r0
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a2e:	0109      	lsls	r1, r1, #4
}
 8013a30:	2000      	movs	r0, #0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013a32:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a36:	f401 61fe 	and.w	r1, r1, #2032	; 0x7f0
  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8013a3a:	f422 62fe 	bic.w	r2, r2, #2032	; 0x7f0
 8013a3e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8013a42:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8013a46:	4311      	orrs	r1, r2
 8013a48:	f8c3 1800 	str.w	r1, [r3, #2048]	; 0x800
}
 8013a4c:	4770      	bx	lr
 8013a4e:	bf00      	nop

08013a50 <USB_DevConnect>:
{
 8013a50:	4603      	mov	r3, r0
}
 8013a52:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a54:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013a58:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a5c:	f022 0203 	bic.w	r2, r2, #3
 8013a60:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013a64:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013a68:	f023 0302 	bic.w	r3, r3, #2
 8013a6c:	604b      	str	r3, [r1, #4]
}
 8013a6e:	4770      	bx	lr

08013a70 <USB_DevDisconnect>:
{
 8013a70:	4603      	mov	r3, r0
}
 8013a72:	2000      	movs	r0, #0
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a74:	f8d3 2e00 	ldr.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a78:	f503 6100 	add.w	r1, r3, #2048	; 0x800
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8013a7c:	f022 0203 	bic.w	r2, r2, #3
 8013a80:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013a84:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013a88:	f043 0302 	orr.w	r3, r3, #2
 8013a8c:	604b      	str	r3, [r1, #4]
}
 8013a8e:	4770      	bx	lr

08013a90 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 8013a90:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 8013a92:	6980      	ldr	r0, [r0, #24]
}
 8013a94:	4010      	ands	r0, r2
 8013a96:	4770      	bx	lr

08013a98 <USB_ReadDevAllOutEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013a98:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013a9c:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013aa0:	4018      	ands	r0, r3
}
 8013aa2:	0c00      	lsrs	r0, r0, #16
 8013aa4:	4770      	bx	lr
 8013aa6:	bf00      	nop

08013aa8 <USB_ReadDevAllInEpInterrupt>:
  tmpreg  = USBx_DEVICE->DAINT;
 8013aa8:	f8d0 3818 	ldr.w	r3, [r0, #2072]	; 0x818
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8013aac:	f8d0 081c 	ldr.w	r0, [r0, #2076]	; 0x81c
 8013ab0:	4018      	ands	r0, r3
}
 8013ab2:	b280      	uxth	r0, r0
 8013ab4:	4770      	bx	lr
 8013ab6:	bf00      	nop

08013ab8 <USB_ReadDevOutEPInterrupt>:
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013ab8:	eb00 1141 	add.w	r1, r0, r1, lsl #5
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013abc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8013ac0:	f8d1 2b08 	ldr.w	r2, [r1, #2824]	; 0xb08
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8013ac4:	6940      	ldr	r0, [r0, #20]
}
 8013ac6:	4010      	ands	r0, r2
 8013ac8:	4770      	bx	lr
 8013aca:	bf00      	nop

08013acc <USB_ReadDevInEPInterrupt>:
  msk = USBx_DEVICE->DIEPMSK;
 8013acc:	f8d0 2810 	ldr.w	r2, [r0, #2064]	; 0x810
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013ad0:	f8d0 3834 	ldr.w	r3, [r0, #2100]	; 0x834
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013ad4:	eb00 1041 	add.w	r0, r0, r1, lsl #5
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013ad8:	f001 010f 	and.w	r1, r1, #15
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013adc:	f8d0 0908 	ldr.w	r0, [r0, #2312]	; 0x908
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8013ae0:	40cb      	lsrs	r3, r1
 8013ae2:	01db      	lsls	r3, r3, #7
 8013ae4:	b2db      	uxtb	r3, r3
 8013ae6:	4313      	orrs	r3, r2
}
 8013ae8:	4018      	ands	r0, r3
 8013aea:	4770      	bx	lr

08013aec <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 8013aec:	6940      	ldr	r0, [r0, #20]
}
 8013aee:	f000 0001 	and.w	r0, r0, #1
 8013af2:	4770      	bx	lr

08013af4 <USB_ActivateSetup>:
{
 8013af4:	4603      	mov	r3, r0
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013af6:	4a09      	ldr	r2, [pc, #36]	; (8013b1c <USB_ActivateSetup+0x28>)
}
 8013af8:	2000      	movs	r0, #0
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013afa:	f503 6100 	add.w	r1, r3, #2048	; 0x800
{
 8013afe:	b410      	push	{r4}
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013b00:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8013b04:	4022      	ands	r2, r4
}
 8013b06:	f85d 4b04 	ldr.w	r4, [sp], #4
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8013b0a:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013b0e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8013b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013b16:	604b      	str	r3, [r1, #4]
}
 8013b18:	4770      	bx	lr
 8013b1a:	bf00      	nop
 8013b1c:	fffff800 	.word	0xfffff800

08013b20 <USB_EP0_OutStart>:
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013b20:	4b14      	ldr	r3, [pc, #80]	; (8013b74 <USB_EP0_OutStart+0x54>)
{
 8013b22:	b410      	push	{r4}
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8013b24:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013b26:	429c      	cmp	r4, r3
 8013b28:	d81a      	bhi.n	8013b60 <USB_EP0_OutStart+0x40>
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013b2a:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013b2e:	2300      	movs	r3, #0
  if (dma == 1U)
 8013b30:	2901      	cmp	r1, #1
  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013b32:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8013b34:	6903      	ldr	r3, [r0, #16]
 8013b36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013b3a:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013b3c:	6903      	ldr	r3, [r0, #16]
 8013b3e:	f043 0318 	orr.w	r3, r3, #24
 8013b42:	6103      	str	r3, [r0, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013b44:	6903      	ldr	r3, [r0, #16]
 8013b46:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013b4a:	6103      	str	r3, [r0, #16]
  if (dma == 1U)
 8013b4c:	d104      	bne.n	8013b58 <USB_EP0_OutStart+0x38>
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013b4e:	6142      	str	r2, [r0, #20]
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8013b50:	6803      	ldr	r3, [r0, #0]
 8013b52:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8013b56:	6003      	str	r3, [r0, #0]
}
 8013b58:	2000      	movs	r0, #0
 8013b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b5e:	4770      	bx	lr
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013b60:	f8d0 3b00 	ldr.w	r3, [r0, #2816]	; 0xb00
 8013b64:	f500 6030 	add.w	r0, r0, #2816	; 0xb00
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	dae0      	bge.n	8013b2e <USB_EP0_OutStart+0xe>
}
 8013b6c:	2000      	movs	r0, #0
 8013b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b72:	4770      	bx	lr
 8013b74:	4f54300a 	.word	0x4f54300a

08013b78 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013b78:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8013b7a:	4903      	ldr	r1, [pc, #12]	; (8013b88 <MX_FATFS_Init+0x10>)
 8013b7c:	4803      	ldr	r0, [pc, #12]	; (8013b8c <MX_FATFS_Init+0x14>)
 8013b7e:	f001 f96f 	bl	8014e60 <FATFS_LinkDriver>
 8013b82:	4b03      	ldr	r3, [pc, #12]	; (8013b90 <MX_FATFS_Init+0x18>)
 8013b84:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013b86:	bd08      	pop	{r3, pc}
 8013b88:	20003480 	.word	0x20003480
 8013b8c:	200002c8 	.word	0x200002c8
 8013b90:	20003484 	.word	0x20003484

08013b94 <USER_initialize>:
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8013b94:	4b02      	ldr	r3, [pc, #8]	; (8013ba0 <USER_initialize+0xc>)
 8013b96:	2201      	movs	r2, #1
 8013b98:	701a      	strb	r2, [r3, #0]
    return Stat;
 8013b9a:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END INIT */
}
 8013b9c:	4770      	bx	lr
 8013b9e:	bf00      	nop
 8013ba0:	200002c4 	.word	0x200002c4

08013ba4 <USER_read>:
)
{
  /* USER CODE BEGIN READ */
    return RES_OK;
  /* USER CODE END READ */
}
 8013ba4:	2000      	movs	r0, #0
 8013ba6:	4770      	bx	lr

08013ba8 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8013ba8:	2001      	movs	r0, #1
 8013baa:	4770      	bx	lr

08013bac <USER_write>:
 8013bac:	2000      	movs	r0, #0
 8013bae:	4770      	bx	lr

08013bb0 <USER_status>:
 8013bb0:	4b02      	ldr	r3, [pc, #8]	; (8013bbc <USER_status+0xc>)
 8013bb2:	2201      	movs	r2, #1
 8013bb4:	701a      	strb	r2, [r3, #0]
 8013bb6:	7818      	ldrb	r0, [r3, #0]
 8013bb8:	4770      	bx	lr
 8013bba:	bf00      	nop
 8013bbc:	200002c4 	.word	0x200002c4

08013bc0 <MX_LWIP_Init>:
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013bc0:	2100      	movs	r1, #0
{
 8013bc2:	b570      	push	{r4, r5, r6, lr}
  tcpip_init( NULL, NULL );
 8013bc4:	4608      	mov	r0, r1
{
 8013bc6:	b08e      	sub	sp, #56	; 0x38
  tcpip_init( NULL, NULL );
 8013bc8:	f003 fe6c 	bl	80178a4 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8013bcc:	2000      	movs	r0, #0
  netmask.addr = 0;
  gw.addr = 0;
 8013bce:	4b1f      	ldr	r3, [pc, #124]	; (8013c4c <MX_LWIP_Init+0x8c>)
  ipaddr.addr = 0;
 8013bd0:	491f      	ldr	r1, [pc, #124]	; (8013c50 <MX_LWIP_Init+0x90>)
  netmask.addr = 0;
 8013bd2:	4a20      	ldr	r2, [pc, #128]	; (8013c54 <MX_LWIP_Init+0x94>)

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013bd4:	9000      	str	r0, [sp, #0]
  gw.addr = 0;
 8013bd6:	6018      	str	r0, [r3, #0]
  ipaddr.addr = 0;
 8013bd8:	6008      	str	r0, [r1, #0]
  netmask.addr = 0;
 8013bda:	6010      	str	r0, [r2, #0]
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013bdc:	481e      	ldr	r0, [pc, #120]	; (8013c58 <MX_LWIP_Init+0x98>)
 8013bde:	4d1f      	ldr	r5, [pc, #124]	; (8013c5c <MX_LWIP_Init+0x9c>)
 8013be0:	9002      	str	r0, [sp, #8]
 8013be2:	481f      	ldr	r0, [pc, #124]	; (8013c60 <MX_LWIP_Init+0xa0>)
 8013be4:	9001      	str	r0, [sp, #4]
 8013be6:	4628      	mov	r0, r5
 8013be8:	f006 fc0a 	bl	801a400 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013bec:	4628      	mov	r0, r5
 8013bee:	f006 fcb5 	bl	801a55c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013bf2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013bf6:	4628      	mov	r0, r5
  if (netif_is_link_up(&gnetif))
 8013bf8:	075b      	lsls	r3, r3, #29
 8013bfa:	d524      	bpl.n	8013c46 <MX_LWIP_Init+0x86>
    netif_set_up(&gnetif);
 8013bfc:	f006 fcb4 	bl	801a568 <netif_set_up>
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8013c00:	4918      	ldr	r1, [pc, #96]	; (8013c64 <MX_LWIP_Init+0xa4>)
 8013c02:	4816      	ldr	r0, [pc, #88]	; (8013c5c <MX_LWIP_Init+0x9c>)
 8013c04:	f006 fd3a 	bl	801a67c <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8013c08:	2300      	movs	r3, #0
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013c0a:	2101      	movs	r1, #1
 8013c0c:	a805      	add	r0, sp, #20

  link_arg.netif = &gnetif;
 8013c0e:	4e16      	ldr	r6, [pc, #88]	; (8013c68 <MX_LWIP_Init+0xa8>)
  link_arg.semaphore = Netif_LinkSemaphore;
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013c10:	4c16      	ldr	r4, [pc, #88]	; (8013c6c <MX_LWIP_Init+0xac>)
  osSemaphoreDef(Netif_SEM);
 8013c12:	e9cd 3305 	strd	r3, r3, [sp, #20]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013c16:	f001 fa0d 	bl	8015034 <osSemaphoreCreate>
 8013c1a:	4b15      	ldr	r3, [pc, #84]	; (8013c70 <MX_LWIP_Init+0xb0>)
  link_arg.semaphore = Netif_LinkSemaphore;
 8013c1c:	6070      	str	r0, [r6, #4]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013c1e:	f10d 0c1c 	add.w	ip, sp, #28
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8013c22:	6018      	str	r0, [r3, #0]
  link_arg.netif = &gnetif;
 8013c24:	6035      	str	r5, [r6, #0]
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013c26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013c2c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8013c30:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8013c34:	4631      	mov	r1, r6
 8013c36:	a807      	add	r0, sp, #28
 8013c38:	f001 f944 	bl	8014ec4 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8013c3c:	4807      	ldr	r0, [pc, #28]	; (8013c5c <MX_LWIP_Init+0x9c>)
 8013c3e:	f00d fca7 	bl	8021590 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013c42:	b00e      	add	sp, #56	; 0x38
 8013c44:	bd70      	pop	{r4, r5, r6, pc}
    netif_set_down(&gnetif);
 8013c46:	f006 fcb1 	bl	801a5ac <netif_set_down>
 8013c4a:	e7d9      	b.n	8013c00 <MX_LWIP_Init+0x40>
 8013c4c:	200034c8 	.word	0x200034c8
 8013c50:	200034cc 	.word	0x200034cc
 8013c54:	200034d8 	.word	0x200034d8
 8013c58:	0801781d 	.word	0x0801781d
 8013c5c:	2000348c 	.word	0x2000348c
 8013c60:	08013f71 	.word	0x08013f71
 8013c64:	08014151 	.word	0x08014151
 8013c68:	200034d0 	.word	0x200034d0
 8013c6c:	08028fc8 	.word	0x08028fc8
 8013c70:	20003488 	.word	0x20003488

08013c74 <low_level_output>:

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013c74:	4b2c      	ldr	r3, [pc, #176]	; (8013d28 <low_level_output+0xb4>)
{
 8013c76:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013c7a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
{
 8013c7c:	b083      	sub	sp, #12
  uint32_t payloadoffset = 0;
  DmaTxDesc = heth.TxDesc;
  bufferoffset = 0;

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8013c7e:	468b      	mov	fp, r1
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8013c80:	68a3      	ldr	r3, [r4, #8]
  for(q = p; q != NULL; q = q->next)
 8013c82:	2900      	cmp	r1, #0
 8013c84:	d04d      	beq.n	8013d22 <low_level_output+0xae>
  bufferoffset = 0;
 8013c86:	2600      	movs	r6, #0
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
      payloadoffset = 0;

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013c88:	f240 59f4 	movw	r9, #1524	; 0x5f4
  uint32_t framelength = 0;
 8013c8c:	46b0      	mov	r8, r6
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013c8e:	6822      	ldr	r2, [r4, #0]
 8013c90:	2a00      	cmp	r2, #0
 8013c92:	db1b      	blt.n	8013ccc <low_level_output+0x58>
      byteslefttocopy = q->len;
 8013c94:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013c98:	1995      	adds	r5, r2, r6
 8013c9a:	454d      	cmp	r5, r9
 8013c9c:	d93c      	bls.n	8013d18 <low_level_output+0xa4>
      payloadoffset = 0;
 8013c9e:	2700      	movs	r7, #0
 8013ca0:	e002      	b.n	8013ca8 <low_level_output+0x34>
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013ca2:	454d      	cmp	r5, r9
        {
          errval = ERR_USE;
          goto error;
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8013ca4:	68a3      	ldr	r3, [r4, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013ca6:	d921      	bls.n	8013cec <low_level_output+0x78>
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013ca8:	eba9 0a06 	sub.w	sl, r9, r6
 8013cac:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013cb0:	1998      	adds	r0, r3, r6

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
        bufferoffset = 0;
 8013cb2:	2600      	movs	r6, #0
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013cb4:	4439      	add	r1, r7
 8013cb6:	4652      	mov	r2, sl
 8013cb8:	f010 f906 	bl	8023ec8 <memcpy>
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8013cbc:	68e4      	ldr	r4, [r4, #12]
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8013cbe:	f2a5 55f4 	subw	r5, r5, #1524	; 0x5f4
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8013cc2:	4457      	add	r7, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013cc4:	6823      	ldr	r3, [r4, #0]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8013cc6:	44d0      	add	r8, sl
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013cc8:	42b3      	cmp	r3, r6
 8013cca:	daea      	bge.n	8013ca2 <low_level_output+0x2e>
        errval = ERR_USE;
 8013ccc:	f06f 0007 	mvn.w	r0, #7
  errval = ERR_OK;

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8013cd0:	4b15      	ldr	r3, [pc, #84]	; (8013d28 <low_level_output+0xb4>)
 8013cd2:	681b      	ldr	r3, [r3, #0]
 8013cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8013cd8:	695a      	ldr	r2, [r3, #20]
 8013cda:	0692      	lsls	r2, r2, #26
 8013cdc:	d503      	bpl.n	8013ce6 <low_level_output+0x72>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013cde:	2120      	movs	r1, #32

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8013ce0:	2200      	movs	r2, #0
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8013ce2:	6159      	str	r1, [r3, #20]
    heth.Instance->DMATPDR = 0;
 8013ce4:	605a      	str	r2, [r3, #4]
  }
  return errval;
}
 8013ce6:	b003      	add	sp, #12
 8013ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013cec:	4618      	mov	r0, r3
 8013cee:	462e      	mov	r6, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013cf0:	f8db 1004 	ldr.w	r1, [fp, #4]
 8013cf4:	462a      	mov	r2, r5
 8013cf6:	9301      	str	r3, [sp, #4]
      framelength = framelength + byteslefttocopy;
 8013cf8:	44a8      	add	r8, r5
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013cfa:	4439      	add	r1, r7
 8013cfc:	f010 f8e4 	bl	8023ec8 <memcpy>
  for(q = p; q != NULL; q = q->next)
 8013d00:	f8db b000 	ldr.w	fp, [fp]
 8013d04:	9b01      	ldr	r3, [sp, #4]
 8013d06:	f1bb 0f00 	cmp.w	fp, #0
 8013d0a:	d1c0      	bne.n	8013c8e <low_level_output+0x1a>
  HAL_ETH_TransmitFrame(&heth, framelength);
 8013d0c:	4641      	mov	r1, r8
 8013d0e:	4806      	ldr	r0, [pc, #24]	; (8013d28 <low_level_output+0xb4>)
 8013d10:	f7f6 f8d0 	bl	8009eb4 <HAL_ETH_TransmitFrame>
  errval = ERR_OK;
 8013d14:	2000      	movs	r0, #0
 8013d16:	e7db      	b.n	8013cd0 <low_level_output+0x5c>
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013d18:	1998      	adds	r0, r3, r6
      payloadoffset = 0;
 8013d1a:	2700      	movs	r7, #0
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013d1c:	462e      	mov	r6, r5
      byteslefttocopy = q->len;
 8013d1e:	4615      	mov	r5, r2
 8013d20:	e7e6      	b.n	8013cf0 <low_level_output+0x7c>
  uint32_t framelength = 0;
 8013d22:	4688      	mov	r8, r1
 8013d24:	e7f2      	b.n	8013d0c <low_level_output+0x98>
 8013d26:	bf00      	nop
 8013d28:	2000657c 	.word	0x2000657c

08013d2c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8013d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d30:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8013e44 <ethernetif_input+0x118>
 8013d34:	b083      	sub	sp, #12
 8013d36:	9001      	str	r0, [sp, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8013d38:	4b40      	ldr	r3, [pc, #256]	; (8013e3c <ethernetif_input+0x110>)
 8013d3a:	f04f 31ff 	mov.w	r1, #4294967295
 8013d3e:	6818      	ldr	r0, [r3, #0]
 8013d40:	f001 f99e 	bl	8015080 <osSemaphoreWait>
 8013d44:	2800      	cmp	r0, #0
 8013d46:	d1f7      	bne.n	8013d38 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8013d48:	483d      	ldr	r0, [pc, #244]	; (8013e40 <ethernetif_input+0x114>)
 8013d4a:	f00f fbb5 	bl	80234b8 <sys_mutex_lock>
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8013d4e:	483d      	ldr	r0, [pc, #244]	; (8013e44 <ethernetif_input+0x118>)
 8013d50:	f7f6 f934 	bl	8009fbc <HAL_ETH_GetReceivedFrame_IT>
 8013d54:	4604      	mov	r4, r0
 8013d56:	2800      	cmp	r0, #0
 8013d58:	d168      	bne.n	8013e2c <ethernetif_input+0x100>
  len = heth.RxFrameInfos.length;
 8013d5a:	f8b9 103c 	ldrh.w	r1, [r9, #60]	; 0x3c
  if (len > 0)
 8013d5e:	bb51      	cbnz	r1, 8013db6 <ethernetif_input+0x8a>
  struct pbuf *p = NULL;
 8013d60:	f04f 0a00 	mov.w	sl, #0
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013d64:	f8d9 0038 	ldr.w	r0, [r9, #56]	; 0x38
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013d68:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013d6c:	b140      	cbz	r0, 8013d80 <ethernetif_input+0x54>
 8013d6e:	2100      	movs	r1, #0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013d70:	681a      	ldr	r2, [r3, #0]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013d72:	3101      	adds	r1, #1
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013d74:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013d78:	4281      	cmp	r1, r0
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013d7a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013d7c:	68db      	ldr	r3, [r3, #12]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013d7e:	d1f7      	bne.n	8013d70 <ethernetif_input+0x44>
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013d80:	f8d9 3000 	ldr.w	r3, [r9]
    heth.RxFrameInfos.SegCount =0;
 8013d84:	2200      	movs	r2, #0
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    heth.RxFrameInfos.SegCount =0;
 8013d8a:	f8c9 2038 	str.w	r2, [r9, #56]	; 0x38
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8013d8e:	695a      	ldr	r2, [r3, #20]
 8013d90:	0612      	lsls	r2, r2, #24
 8013d92:	d503      	bpl.n	8013d9c <ethernetif_input+0x70>
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8013d94:	2280      	movs	r2, #128	; 0x80
 8013d96:	615a      	str	r2, [r3, #20]
    heth.Instance->DMARPDR = 0;
 8013d98:	2200      	movs	r2, #0
 8013d9a:	609a      	str	r2, [r3, #8]
        p = low_level_input( netif );
        if   (p != NULL)
 8013d9c:	f1ba 0f00 	cmp.w	sl, #0
 8013da0:	d044      	beq.n	8013e2c <ethernetif_input+0x100>
        {
          if (netif->input( p, netif) != ERR_OK )
 8013da2:	9901      	ldr	r1, [sp, #4]
 8013da4:	4650      	mov	r0, sl
 8013da6:	690b      	ldr	r3, [r1, #16]
 8013da8:	4798      	blx	r3
 8013daa:	2800      	cmp	r0, #0
 8013dac:	d142      	bne.n	8013e34 <ethernetif_input+0x108>
          {
            pbuf_free(p);
          }
        }
        UNLOCK_TCPIP_CORE();
 8013dae:	4824      	ldr	r0, [pc, #144]	; (8013e40 <ethernetif_input+0x114>)
 8013db0:	f00f fb88 	bl	80234c4 <sys_mutex_unlock>
      } while(p!=NULL);
 8013db4:	e7c8      	b.n	8013d48 <ethernetif_input+0x1c>
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013db6:	f44f 72c1 	mov.w	r2, #386	; 0x182
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8013dba:	f8d9 7040 	ldr.w	r7, [r9, #64]	; 0x40
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8013dbe:	f006 fdb5 	bl	801a92c <pbuf_alloc>
  if (p != NULL)
 8013dc2:	4682      	mov	sl, r0
 8013dc4:	2800      	cmp	r0, #0
 8013dc6:	d0cb      	beq.n	8013d60 <ethernetif_input+0x34>
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013dc8:	4683      	mov	fp, r0
    bufferoffset = 0;
 8013dca:	4621      	mov	r1, r4
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013dcc:	f240 58f4 	movw	r8, #1524	; 0x5f4
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013dd0:	f8d9 6030 	ldr.w	r6, [r9, #48]	; 0x30
      byteslefttocopy = q->len;
 8013dd4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013dd8:	1854      	adds	r4, r2, r1
 8013dda:	4544      	cmp	r4, r8
 8013ddc:	d923      	bls.n	8013e26 <ethernetif_input+0xfa>
      payloadoffset = 0;
 8013dde:	2500      	movs	r5, #0
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013de0:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013de4:	eba8 0201 	sub.w	r2, r8, r1
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8013de8:	f2a4 54f4 	subw	r4, r4, #1524	; 0x5f4
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013dec:	4439      	add	r1, r7
 8013dee:	4428      	add	r0, r5
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8013df0:	4415      	add	r5, r2
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8013df2:	f010 f869 	bl	8023ec8 <memcpy>
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8013df6:	68f6      	ldr	r6, [r6, #12]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013df8:	4544      	cmp	r4, r8
        bufferoffset = 0;
 8013dfa:	f04f 0100 	mov.w	r1, #0
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8013dfe:	68b7      	ldr	r7, [r6, #8]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013e00:	d8ee      	bhi.n	8013de0 <ethernetif_input+0xb4>
 8013e02:	4639      	mov	r1, r7
 8013e04:	4622      	mov	r2, r4
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013e06:	f8db 0004 	ldr.w	r0, [fp, #4]
 8013e0a:	4428      	add	r0, r5
 8013e0c:	f010 f85c 	bl	8023ec8 <memcpy>
    for(q = p; q != NULL; q = q->next)
 8013e10:	f8db b000 	ldr.w	fp, [fp]
 8013e14:	f1bb 0f00 	cmp.w	fp, #0
 8013e18:	d0a4      	beq.n	8013d64 <ethernetif_input+0x38>
 8013e1a:	4621      	mov	r1, r4
      byteslefttocopy = q->len;
 8013e1c:	f8bb 200a 	ldrh.w	r2, [fp, #10]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013e20:	1854      	adds	r4, r2, r1
 8013e22:	4544      	cmp	r4, r8
 8013e24:	d8db      	bhi.n	8013dde <ethernetif_input+0xb2>
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8013e26:	4439      	add	r1, r7
      payloadoffset = 0;
 8013e28:	2500      	movs	r5, #0
 8013e2a:	e7ec      	b.n	8013e06 <ethernetif_input+0xda>
        UNLOCK_TCPIP_CORE();
 8013e2c:	4804      	ldr	r0, [pc, #16]	; (8013e40 <ethernetif_input+0x114>)
 8013e2e:	f00f fb49 	bl	80234c4 <sys_mutex_unlock>
      } while(p!=NULL);
 8013e32:	e781      	b.n	8013d38 <ethernetif_input+0xc>
            pbuf_free(p);
 8013e34:	4650      	mov	r0, sl
 8013e36:	f006 ff4b 	bl	801acd0 <pbuf_free>
 8013e3a:	e7b8      	b.n	8013dae <ethernetif_input+0x82>
 8013e3c:	200065c4 	.word	0x200065c4
 8013e40:	2001e884 	.word	0x2001e884
 8013e44:	2000657c 	.word	0x2000657c

08013e48 <HAL_ETH_MspInit>:
  if(ethHandle->Instance==ETH)
 8013e48:	4b41      	ldr	r3, [pc, #260]	; (8013f50 <HAL_ETH_MspInit+0x108>)
 8013e4a:	6802      	ldr	r2, [r0, #0]
{
 8013e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(ethHandle->Instance==ETH)
 8013e4e:	429a      	cmp	r2, r3
{
 8013e50:	b08d      	sub	sp, #52	; 0x34
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e52:	f04f 0400 	mov.w	r4, #0
 8013e56:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8013e5a:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 8013e5e:	940b      	str	r4, [sp, #44]	; 0x2c
  if(ethHandle->Instance==ETH)
 8013e60:	d001      	beq.n	8013e66 <HAL_ETH_MspInit+0x1e>
}
 8013e62:	b00d      	add	sp, #52	; 0x34
 8013e64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_ETH_CLK_ENABLE();
 8013e66:	f5a3 4390 	sub.w	r3, r3, #18432	; 0x4800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013e6a:	2702      	movs	r7, #2
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8013e6c:	2132      	movs	r1, #50	; 0x32
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013e6e:	2603      	movs	r6, #3
    __HAL_RCC_ETH_CLK_ENABLE();
 8013e70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013e72:	250b      	movs	r5, #11
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013e74:	4837      	ldr	r0, [pc, #220]	; (8013f54 <HAL_ETH_MspInit+0x10c>)
    __HAL_RCC_ETH_CLK_ENABLE();
 8013e76:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8013e7a:	631a      	str	r2, [r3, #48]	; 0x30
 8013e7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e7e:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
 8013e82:	9200      	str	r2, [sp, #0]
 8013e84:	9a00      	ldr	r2, [sp, #0]
 8013e86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e88:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8013e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8013e8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e90:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8013e94:	9201      	str	r2, [sp, #4]
 8013e96:	9a01      	ldr	r2, [sp, #4]
 8013e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013e9a:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8013e9e:	631a      	str	r2, [r3, #48]	; 0x30
 8013ea0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ea2:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8013ea6:	9202      	str	r2, [sp, #8]
 8013ea8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8013eaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013eac:	f042 0204 	orr.w	r2, r2, #4
 8013eb0:	631a      	str	r2, [r3, #48]	; 0x30
 8013eb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013eb4:	f002 0204 	and.w	r2, r2, #4
 8013eb8:	9203      	str	r2, [sp, #12]
 8013eba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013ebc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ebe:	f042 0201 	orr.w	r2, r2, #1
 8013ec2:	631a      	str	r2, [r3, #48]	; 0x30
 8013ec4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ec6:	f002 0201 	and.w	r2, r2, #1
 8013eca:	9204      	str	r2, [sp, #16]
 8013ecc:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013ece:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ed0:	433a      	orrs	r2, r7
 8013ed2:	631a      	str	r2, [r3, #48]	; 0x30
 8013ed4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ed6:	403a      	ands	r2, r7
 8013ed8:	9205      	str	r2, [sp, #20]
 8013eda:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013edc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013ede:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8013ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ee6:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013eec:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013eee:	e9cd 1707 	strd	r1, r7, [sp, #28]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013ef2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ef4:	a907      	add	r1, sp, #28
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013ef6:	9b06      	ldr	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013ef8:	f7f7 f984 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013efc:	2386      	movs	r3, #134	; 0x86
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013efe:	a907      	add	r1, sp, #28
 8013f00:	4815      	ldr	r0, [pc, #84]	; (8013f58 <HAL_ETH_MspInit+0x110>)
    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8013f02:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f04:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013f08:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013f0c:	f7f7 f97a 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8013f14:	a907      	add	r1, sp, #28
 8013f16:	4811      	ldr	r0, [pc, #68]	; (8013f5c <HAL_ETH_MspInit+0x114>)
    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8013f18:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f1a:	e9cd 7408 	strd	r7, r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013f1e:	e9cd 650a 	strd	r6, r5, [sp, #40]	; 0x28
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8013f22:	f7f7 f96f 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8013f26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013f2a:	a907      	add	r1, sp, #28
 8013f2c:	480c      	ldr	r0, [pc, #48]	; (8013f60 <HAL_ETH_MspInit+0x118>)
    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8013f2e:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f30:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8013f32:	950b      	str	r5, [sp, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f34:	e9cd 4609 	strd	r4, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013f38:	f7f7 f964 	bl	800b204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ETH_IRQn, 6, 0);
 8013f3c:	4622      	mov	r2, r4
 8013f3e:	2106      	movs	r1, #6
 8013f40:	203d      	movs	r0, #61	; 0x3d
 8013f42:	f7f4 fae1 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8013f46:	203d      	movs	r0, #61	; 0x3d
 8013f48:	f7f4 fb28 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 8013f4c:	b00d      	add	sp, #52	; 0x34
 8013f4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013f50:	40028000 	.word	0x40028000
 8013f54:	40020800 	.word	0x40020800
 8013f58:	40020000 	.word	0x40020000
 8013f5c:	40020400 	.word	0x40020400
 8013f60:	40021800 	.word	0x40021800

08013f64 <HAL_ETH_RxCpltCallback>:
  osSemaphoreRelease(s_xSemaphore);
 8013f64:	4b01      	ldr	r3, [pc, #4]	; (8013f6c <HAL_ETH_RxCpltCallback+0x8>)
 8013f66:	6818      	ldr	r0, [r3, #0]
 8013f68:	f001 b8b6 	b.w	80150d8 <osSemaphoreRelease>
 8013f6c:	200065c4 	.word	0x200065c4

08013f70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8013f70:	b5f0      	push	{r4, r5, r6, r7, lr}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013f72:	4604      	mov	r4, r0
{
 8013f74:	b08d      	sub	sp, #52	; 0x34
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8013f76:	2800      	cmp	r0, #0
 8013f78:	f000 809e 	beq.w	80140b8 <ethernetif_init+0x148>
  heth.Instance = ETH;
 8013f7c:	4d52      	ldr	r5, [pc, #328]	; (80140c8 <ethernetif_init+0x158>)
  uint32_t regvalue = 0;
 8013f7e:	2200      	movs	r2, #0
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8013f80:	f247 4173 	movw	r1, #29811	; 0x7473
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013f84:	4b51      	ldr	r3, [pc, #324]	; (80140cc <ethernetif_init+0x15c>)
  uint32_t regvalue = 0;
 8013f86:	9200      	str	r2, [sp, #0]
  MACAddr[1] = 0x80;
 8013f88:	2080      	movs	r0, #128	; 0x80
  MACAddr[0] = 0x00;
 8013f8a:	f88d 2004 	strb.w	r2, [sp, #4]
  MACAddr[3] = 0x00;
 8013f8e:	f88d 2007 	strb.w	r2, [sp, #7]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8013f92:	822a      	strh	r2, [r5, #16]
  MACAddr[2] = 0xE1;
 8013f94:	22e1      	movs	r2, #225	; 0xe1
  netif->name[0] = IFNAME0;
 8013f96:	86e1      	strh	r1, [r4, #54]	; 0x36
  MACAddr[2] = 0xE1;
 8013f98:	f88d 2006 	strb.w	r2, [sp, #6]
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8013f9c:	494c      	ldr	r1, [pc, #304]	; (80140d0 <ethernetif_init+0x160>)
  heth.Instance = ETH;
 8013f9e:	4a4d      	ldr	r2, [pc, #308]	; (80140d4 <ethernetif_init+0x164>)
  netif->output = etharp_output;
 8013fa0:	6161      	str	r1, [r4, #20]
  heth.Instance = ETH;
 8013fa2:	602a      	str	r2, [r5, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013fa4:	2201      	movs	r2, #1

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8013fa6:	494c      	ldr	r1, [pc, #304]	; (80140d8 <ethernetif_init+0x168>)
  MACAddr[1] = 0x80;
 8013fa8:	f88d 0005 	strb.w	r0, [sp, #5]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013fac:	606a      	str	r2, [r5, #4]
  netif->linkoutput = low_level_output;
 8013fae:	61a1      	str	r1, [r4, #24]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013fb0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_SOFTWARE;
 8013fb4:	e9c5 2206 	strd	r2, r2, [r5, #24]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013fb8:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013fbc:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013fc0:	6229      	str	r1, [r5, #32]
heth.Init.MACAddr[5] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF;
 8013fc2:	4042      	eors	r2, r0
 8013fc4:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013fc8:	404a      	eors	r2, r1
 8013fca:	f88d 2009 	strb.w	r2, [sp, #9]
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8013fce:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8013fd2:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8013fd6:	f8d3 1428 	ldr.w	r1, [r3, #1064]	; 0x428
 8013fda:	ea82 0300 	eor.w	r3, r2, r0
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013fde:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013fe2:	4628      	mov	r0, r5
heth.Init.MACAddr[4] = (STM32_UUID[0] ^ STM32_UUID[1] ^ STM32_UUID[2]) & 0xFF00 >> 8;		// fiddle mac address; eventually use EEPROM stored value? TODO
 8013fe4:	404b      	eors	r3, r1
 8013fe6:	f88d 3008 	strb.w	r3, [sp, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8013fea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013fee:	e9c5 2302 	strd	r2, r3, [r5, #8]
  heth.Init.MACAddr = &MACAddr[0];
 8013ff2:	ab01      	add	r3, sp, #4
 8013ff4:	616b      	str	r3, [r5, #20]
  hal_eth_init_status = HAL_ETH_Init(&heth);
 8013ff6:	f7f6 f905 	bl	800a204 <HAL_ETH_Init>
  if (hal_eth_init_status == HAL_OK)
 8013ffa:	b928      	cbnz	r0, 8014008 <ethernetif_init+0x98>
    netif->flags |= NETIF_FLAG_LINK_UP;
 8013ffc:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8014000:	f043 0304 	orr.w	r3, r3, #4
 8014004:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014008:	2304      	movs	r3, #4
 801400a:	4a34      	ldr	r2, [pc, #208]	; (80140dc <ethernetif_init+0x16c>)
 801400c:	4934      	ldr	r1, [pc, #208]	; (80140e0 <ethernetif_init+0x170>)
  osSemaphoreDef(SEM);
 801400e:	2700      	movs	r7, #0
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8014010:	482d      	ldr	r0, [pc, #180]	; (80140c8 <ethernetif_init+0x158>)
 8014012:	f7f5 fecb 	bl	8009dac <HAL_ETH_DMATxDescListInit>
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8014016:	2304      	movs	r3, #4
 8014018:	4a32      	ldr	r2, [pc, #200]	; (80140e4 <ethernetif_init+0x174>)
 801401a:	4933      	ldr	r1, [pc, #204]	; (80140e8 <ethernetif_init+0x178>)
 801401c:	482a      	ldr	r0, [pc, #168]	; (80140c8 <ethernetif_init+0x158>)
 801401e:	f7f5 ff0b 	bl	8009e38 <HAL_ETH_DMARxDescListInit>
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014022:	696b      	ldr	r3, [r5, #20]
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014024:	2006      	movs	r0, #6
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014026:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
  netif->mtu = 1500;
 801402a:	f240 51dc 	movw	r1, #1500	; 0x5dc
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801402e:	4e2f      	ldr	r6, [pc, #188]	; (80140ec <ethernetif_init+0x17c>)
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8014030:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014034:	f042 020a 	orr.w	r2, r2, #10
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8014038:	7818      	ldrb	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801403a:	ad05      	add	r5, sp, #20
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801403c:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8014040:	7858      	ldrb	r0, [r3, #1]
 8014042:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8014046:	7898      	ldrb	r0, [r3, #2]
 8014048:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801404c:	78d8      	ldrb	r0, [r3, #3]
 801404e:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8014052:	7918      	ldrb	r0, [r3, #4]
 8014054:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8014058:	a803      	add	r0, sp, #12
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801405a:	795b      	ldrb	r3, [r3, #5]
  netif->mtu = 1500;
 801405c:	85a1      	strh	r1, [r4, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801405e:	2101      	movs	r1, #1
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8014060:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8014064:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  osSemaphoreDef(SEM);
 8014068:	e9cd 7703 	strd	r7, r7, [sp, #12]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801406c:	f000 ffe2 	bl	8015034 <osSemaphoreCreate>
 8014070:	4b1f      	ldr	r3, [pc, #124]	; (80140f0 <ethernetif_init+0x180>)
 8014072:	6018      	str	r0, [r3, #0]
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8014074:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8014076:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8014078:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801407c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8014080:	4621      	mov	r1, r4
 8014082:	a805      	add	r0, sp, #20
 8014084:	f000 ff1e 	bl	8014ec4 <osThreadCreate>
  HAL_ETH_Start(&heth);
 8014088:	480f      	ldr	r0, [pc, #60]	; (80140c8 <ethernetif_init+0x158>)
 801408a:	f7f6 fa11 	bl	800a4b0 <HAL_ETH_Start>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801408e:	466a      	mov	r2, sp
 8014090:	211d      	movs	r1, #29
 8014092:	480d      	ldr	r0, [pc, #52]	; (80140c8 <ethernetif_init+0x158>)
 8014094:	f7f6 f824 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8014098:	9a00      	ldr	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801409a:	211d      	movs	r1, #29
 801409c:	480a      	ldr	r0, [pc, #40]	; (80140c8 <ethernetif_init+0x158>)
  regvalue |= (PHY_ISFR_INT4);
 801409e:	f042 020b 	orr.w	r2, r2, #11
 80140a2:	9200      	str	r2, [sp, #0]
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80140a4:	f7f6 f866 	bl	800a174 <HAL_ETH_WritePHYRegister>
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80140a8:	466a      	mov	r2, sp
 80140aa:	211d      	movs	r1, #29
 80140ac:	4806      	ldr	r0, [pc, #24]	; (80140c8 <ethernetif_init+0x158>)
 80140ae:	f7f6 f817 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>

  /* initialize the hardware */
  low_level_init(netif);

  return ERR_OK;
}
 80140b2:	4638      	mov	r0, r7
 80140b4:	b00d      	add	sp, #52	; 0x34
 80140b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80140b8:	4b0e      	ldr	r3, [pc, #56]	; (80140f4 <ethernetif_init+0x184>)
 80140ba:	f240 223a 	movw	r2, #570	; 0x23a
 80140be:	490e      	ldr	r1, [pc, #56]	; (80140f8 <ethernetif_init+0x188>)
 80140c0:	480e      	ldr	r0, [pc, #56]	; (80140fc <ethernetif_init+0x18c>)
 80140c2:	f010 fec7 	bl	8024e54 <iprintf>
 80140c6:	e759      	b.n	8013f7c <ethernetif_init+0xc>
 80140c8:	2000657c 	.word	0x2000657c
 80140cc:	1ff0f000 	.word	0x1ff0f000
 80140d0:	08022111 	.word	0x08022111
 80140d4:	40028000 	.word	0x40028000
 80140d8:	08013c75 	.word	0x08013c75
 80140dc:	20004dac 	.word	0x20004dac
 80140e0:	2000355c 	.word	0x2000355c
 80140e4:	200035dc 	.word	0x200035dc
 80140e8:	200034dc 	.word	0x200034dc
 80140ec:	08028fe4 	.word	0x08028fe4
 80140f0:	200065c4 	.word	0x200065c4
 80140f4:	0802c6e8 	.word	0x0802c6e8
 80140f8:	0802c704 	.word	0x0802c704
 80140fc:	08029a64 	.word	0x08029a64

08014100 <sys_now>:
 8014100:	f7f3 bdaa 	b.w	8007c58 <HAL_GetTick>

08014104 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8014104:	b530      	push	{r4, r5, lr}
  uint32_t regvalue = 0;
 8014106:	2300      	movs	r3, #0
{
 8014108:	b083      	sub	sp, #12
  struct link_str *link_arg = (struct link_str *)argument;

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801410a:	4d0f      	ldr	r5, [pc, #60]	; (8014148 <ethernetif_set_link+0x44>)
{
 801410c:	4604      	mov	r4, r0
  uint32_t regvalue = 0;
 801410e:	9301      	str	r3, [sp, #4]
  struct link_str *link_arg = (struct link_str *)argument;
 8014110:	e003      	b.n	801411a <ethernetif_set_link+0x16>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8014112:	b1b3      	cbz	r3, 8014142 <ethernetif_set_link+0x3e>
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 8014114:	20c8      	movs	r0, #200	; 0xc8
 8014116:	f000 ff07 	bl	8014f28 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 801411a:	aa01      	add	r2, sp, #4
 801411c:	2101      	movs	r1, #1
 801411e:	4628      	mov	r0, r5
 8014120:	f7f5 ffde 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014124:	6820      	ldr	r0, [r4, #0]
    regvalue &= PHY_LINKED_STATUS;
 8014126:	9b01      	ldr	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014128:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
    regvalue &= PHY_LINKED_STATUS;
 801412c:	f003 0304 	and.w	r3, r3, #4
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014130:	0751      	lsls	r1, r2, #29
    regvalue &= PHY_LINKED_STATUS;
 8014132:	9301      	str	r3, [sp, #4]
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8014134:	d4ed      	bmi.n	8014112 <ethernetif_set_link+0xe>
 8014136:	b113      	cbz	r3, 801413e <ethernetif_set_link+0x3a>
      netif_set_link_up(link_arg->netif);
 8014138:	f006 fa60 	bl	801a5fc <netif_set_link_up>
 801413c:	e7ea      	b.n	8014114 <ethernetif_set_link+0x10>
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 801413e:	0753      	lsls	r3, r2, #29
 8014140:	d5e8      	bpl.n	8014114 <ethernetif_set_link+0x10>
      netif_set_link_down(link_arg->netif);
 8014142:	f006 fa81 	bl	801a648 <netif_set_link_down>
 8014146:	e7e5      	b.n	8014114 <ethernetif_set_link+0x10>
 8014148:	2000657c 	.word	0x2000657c

0801414c <ethernetif_notify_conn_changed>:
{
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 801414c:	4770      	bx	lr
 801414e:	bf00      	nop

08014150 <ethernetif_update_config>:
{
 8014150:	b530      	push	{r4, r5, lr}
  if(netif_is_link_up(netif))
 8014152:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
{
 8014156:	b083      	sub	sp, #12
  __IO uint32_t tickstart = 0;
 8014158:	2100      	movs	r1, #0
{
 801415a:	4605      	mov	r5, r0
  if(netif_is_link_up(netif))
 801415c:	0758      	lsls	r0, r3, #29
  __IO uint32_t tickstart = 0;
 801415e:	9100      	str	r1, [sp, #0]
  uint32_t regvalue = 0;
 8014160:	9101      	str	r1, [sp, #4]
  if(netif_is_link_up(netif))
 8014162:	d538      	bpl.n	80141d6 <ethernetif_update_config+0x86>
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8014164:	4c32      	ldr	r4, [pc, #200]	; (8014230 <ethernetif_update_config+0xe0>)
 8014166:	6863      	ldr	r3, [r4, #4]
 8014168:	b9e3      	cbnz	r3, 80141a4 <ethernetif_update_config+0x54>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 801416a:	68a3      	ldr	r3, [r4, #8]
 801416c:	f433 4380 	bics.w	r3, r3, #16384	; 0x4000
 8014170:	d140      	bne.n	80141f4 <ethernetif_update_config+0xa4>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 8014172:	68e2      	ldr	r2, [r4, #12]
 8014174:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8014178:	d135      	bne.n	80141e6 <ethernetif_update_config+0x96>
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 801417a:	68a3      	ldr	r3, [r4, #8]
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 801417c:	08d2      	lsrs	r2, r2, #3
 801417e:	2100      	movs	r1, #0
 8014180:	482b      	ldr	r0, [pc, #172]	; (8014230 <ethernetif_update_config+0xe0>)
 8014182:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 8014186:	b292      	uxth	r2, r2
 8014188:	f7f5 fff4 	bl	800a174 <HAL_ETH_WritePHYRegister>
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 801418c:	2100      	movs	r1, #0
 801418e:	4828      	ldr	r0, [pc, #160]	; (8014230 <ethernetif_update_config+0xe0>)
 8014190:	f7f6 fa28 	bl	800a5e4 <HAL_ETH_ConfigMAC>
    HAL_ETH_Start(&heth);
 8014194:	4826      	ldr	r0, [pc, #152]	; (8014230 <ethernetif_update_config+0xe0>)
 8014196:	f7f6 f98b 	bl	800a4b0 <HAL_ETH_Start>
  ethernetif_notify_conn_changed(netif);
 801419a:	4628      	mov	r0, r5
 801419c:	f7ff ffd6 	bl	801414c <ethernetif_notify_conn_changed>
}
 80141a0:	b003      	add	sp, #12
 80141a2:	bd30      	pop	{r4, r5, pc}
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80141a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80141a8:	4620      	mov	r0, r4
 80141aa:	f7f5 ffe3 	bl	800a174 <HAL_ETH_WritePHYRegister>
      tickstart = HAL_GetTick();
 80141ae:	f7f3 fd53 	bl	8007c58 <HAL_GetTick>
 80141b2:	9000      	str	r0, [sp, #0]
 80141b4:	e002      	b.n	80141bc <ethernetif_update_config+0x6c>
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80141b6:	9b01      	ldr	r3, [sp, #4]
 80141b8:	069a      	lsls	r2, r3, #26
 80141ba:	d425      	bmi.n	8014208 <ethernetif_update_config+0xb8>
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80141bc:	aa01      	add	r2, sp, #4
 80141be:	2101      	movs	r1, #1
 80141c0:	4620      	mov	r0, r4
 80141c2:	f7f5 ff8d 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
        if((HAL_GetTick() - tickstart ) > 1000)
 80141c6:	f7f3 fd47 	bl	8007c58 <HAL_GetTick>
 80141ca:	9b00      	ldr	r3, [sp, #0]
 80141cc:	1ac3      	subs	r3, r0, r3
 80141ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80141d2:	d9f0      	bls.n	80141b6 <ethernetif_update_config+0x66>
 80141d4:	e7c9      	b.n	801416a <ethernetif_update_config+0x1a>
    HAL_ETH_Stop(&heth);
 80141d6:	4816      	ldr	r0, [pc, #88]	; (8014230 <ethernetif_update_config+0xe0>)
 80141d8:	f7f6 f9b6 	bl	800a548 <HAL_ETH_Stop>
  ethernetif_notify_conn_changed(netif);
 80141dc:	4628      	mov	r0, r5
 80141de:	f7ff ffb5 	bl	801414c <ethernetif_notify_conn_changed>
}
 80141e2:	b003      	add	sp, #12
 80141e4:	bd30      	pop	{r4, r5, pc}
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80141e6:	f240 21e3 	movw	r1, #739	; 0x2e3
 80141ea:	4812      	ldr	r0, [pc, #72]	; (8014234 <ethernetif_update_config+0xe4>)
 80141ec:	f7f0 fb20 	bl	8004830 <assert_failed>
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80141f0:	68e2      	ldr	r2, [r4, #12]
 80141f2:	e7c2      	b.n	801417a <ethernetif_update_config+0x2a>
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
 80141f4:	f240 21e2 	movw	r1, #738	; 0x2e2
 80141f8:	480e      	ldr	r0, [pc, #56]	; (8014234 <ethernetif_update_config+0xe4>)
 80141fa:	f7f0 fb19 	bl	8004830 <assert_failed>
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
 80141fe:	68e2      	ldr	r2, [r4, #12]
 8014200:	f432 6300 	bics.w	r3, r2, #2048	; 0x800
 8014204:	d0b9      	beq.n	801417a <ethernetif_update_config+0x2a>
 8014206:	e7ee      	b.n	80141e6 <ethernetif_update_config+0x96>
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8014208:	aa01      	add	r2, sp, #4
 801420a:	2110      	movs	r1, #16
 801420c:	4808      	ldr	r0, [pc, #32]	; (8014230 <ethernetif_update_config+0xe0>)
 801420e:	f7f5 ff67 	bl	800a0e0 <HAL_ETH_ReadPHYRegister>
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8014212:	9b01      	ldr	r3, [sp, #4]
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8014214:	f013 0204 	ands.w	r2, r3, #4
 8014218:	bf18      	it	ne
 801421a:	f44f 6200 	movne.w	r2, #2048	; 0x800
      if(regvalue & PHY_SPEED_STATUS)
 801421e:	079b      	lsls	r3, r3, #30
        heth.Init.Speed = ETH_SPEED_10M;
 8014220:	bf4c      	ite	mi
 8014222:	2300      	movmi	r3, #0
        heth.Init.Speed = ETH_SPEED_100M;
 8014224:	f44f 4380 	movpl.w	r3, #16384	; 0x4000
 8014228:	60e2      	str	r2, [r4, #12]
 801422a:	60a3      	str	r3, [r4, #8]
 801422c:	e7ae      	b.n	801418c <ethernetif_update_config+0x3c>
 801422e:	bf00      	nop
 8014230:	2000657c 	.word	0x2000657c
 8014234:	0802c6e8 	.word	0x0802c6e8

08014238 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014238:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 801423c:	b183      	cbz	r3, 8014260 <USBD_CDC_EP0_RxReady+0x28>
{
 801423e:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014240:	f8d0 42bc 	ldr.w	r4, [r0, #700]	; 0x2bc
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8014244:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8014248:	28ff      	cmp	r0, #255	; 0xff
 801424a:	d007      	beq.n	801425c <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801424c:	689b      	ldr	r3, [r3, #8]
 801424e:	4621      	mov	r1, r4
 8014250:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8014254:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8014256:	23ff      	movs	r3, #255	; 0xff
 8014258:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
}
 801425c:	2000      	movs	r0, #0
 801425e:	bd10      	pop	{r4, pc}
 8014260:	2000      	movs	r0, #0
 8014262:	4770      	bx	lr

08014264 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8014264:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8014266:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgFSDesc;
}
 8014268:	4801      	ldr	r0, [pc, #4]	; (8014270 <USBD_CDC_GetFSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 801426a:	801a      	strh	r2, [r3, #0]
}
 801426c:	4770      	bx	lr
 801426e:	bf00      	nop
 8014270:	20000314 	.word	0x20000314

08014274 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8014274:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8014276:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_CfgHSDesc;
}
 8014278:	4801      	ldr	r0, [pc, #4]	; (8014280 <USBD_CDC_GetHSCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 801427a:	801a      	strh	r2, [r3, #0]
}
 801427c:	4770      	bx	lr
 801427e:	bf00      	nop
 8014280:	20000358 	.word	0x20000358

08014284 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014284:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8014286:	2243      	movs	r2, #67	; 0x43

  return USBD_CDC_OtherSpeedCfgDesc;
}
 8014288:	4801      	ldr	r0, [pc, #4]	; (8014290 <USBD_CDC_GetOtherSpeedCfgDesc+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 801428a:	801a      	strh	r2, [r3, #0]
}
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	200003a8 	.word	0x200003a8

08014294 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014294:	4603      	mov	r3, r0
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8014296:	220a      	movs	r2, #10

  return USBD_CDC_DeviceQualifierDesc;
}
 8014298:	4801      	ldr	r0, [pc, #4]	; (80142a0 <USBD_CDC_GetDeviceQualifierDescriptor+0xc>)
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801429a:	801a      	strh	r2, [r3, #0]
}
 801429c:	4770      	bx	lr
 801429e:	bf00      	nop
 80142a0:	2000039c 	.word	0x2000039c

080142a4 <USBD_CDC_DataOut>:
{
 80142a4:	b538      	push	{r3, r4, r5, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80142a6:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
  if (pdev->pClassData == NULL)
 80142aa:	b17d      	cbz	r5, 80142cc <USBD_CDC_DataOut+0x28>
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80142ac:	4604      	mov	r4, r0
 80142ae:	f00f fb7f 	bl	80239b0 <USBD_LL_GetRxDataSize>
 80142b2:	4602      	mov	r2, r0
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80142b4:	f505 7103 	add.w	r1, r5, #524	; 0x20c
 80142b8:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 80142bc:	f8d5 0204 	ldr.w	r0, [r5, #516]	; 0x204
 80142c0:	68db      	ldr	r3, [r3, #12]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80142c2:	f8c5 220c 	str.w	r2, [r5, #524]	; 0x20c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80142c6:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 80142c8:	2000      	movs	r0, #0
}
 80142ca:	bd38      	pop	{r3, r4, r5, pc}
    return (uint8_t)USBD_FAIL;
 80142cc:	2003      	movs	r0, #3
}
 80142ce:	bd38      	pop	{r3, r4, r5, pc}

080142d0 <USBD_CDC_DataIn>:
{
 80142d0:	b570      	push	{r4, r5, r6, lr}
  if (pdev->pClassData == NULL)
 80142d2:	f8d0 52bc 	ldr.w	r5, [r0, #700]	; 0x2bc
 80142d6:	b34d      	cbz	r5, 801432c <USBD_CDC_DataIn+0x5c>
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80142d8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80142dc:	4686      	mov	lr, r0
 80142de:	460a      	mov	r2, r1
 80142e0:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80142e4:	f8dc 3018 	ldr.w	r3, [ip, #24]
 80142e8:	b15b      	cbz	r3, 8014302 <USBD_CDC_DataIn+0x32>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80142ea:	ebc1 06c1 	rsb	r6, r1, r1, lsl #3
 80142ee:	f8d0 42c4 	ldr.w	r4, [r0, #708]	; 0x2c4
 80142f2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80142f6:	6c64      	ldr	r4, [r4, #68]	; 0x44
 80142f8:	fbb3 f6f4 	udiv	r6, r3, r4
 80142fc:	fb04 3416 	mls	r4, r4, r6, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8014300:	b164      	cbz	r4, 801431c <USBD_CDC_DataIn+0x4c>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014302:	f8de 32c0 	ldr.w	r3, [lr, #704]	; 0x2c0
    hcdc->TxState = 0U;
 8014306:	2400      	movs	r4, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014308:	f505 7104 	add.w	r1, r5, #528	; 0x210
 801430c:	f8d5 0208 	ldr.w	r0, [r5, #520]	; 0x208
 8014310:	691b      	ldr	r3, [r3, #16]
    hcdc->TxState = 0U;
 8014312:	f8c5 4214 	str.w	r4, [r5, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8014316:	4798      	blx	r3
  return (uint8_t)USBD_OK;
 8014318:	4620      	mov	r0, r4
}
 801431a:	bd70      	pop	{r4, r5, r6, pc}
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801431c:	4623      	mov	r3, r4
 801431e:	4622      	mov	r2, r4
    pdev->ep_in[epnum].total_length = 0U;
 8014320:	f8cc 4018 	str.w	r4, [ip, #24]
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8014324:	f00f fb28 	bl	8023978 <USBD_LL_Transmit>
  return (uint8_t)USBD_OK;
 8014328:	4620      	mov	r0, r4
}
 801432a:	bd70      	pop	{r4, r5, r6, pc}
    return (uint8_t)USBD_FAIL;
 801432c:	2003      	movs	r0, #3
}
 801432e:	bd70      	pop	{r4, r5, r6, pc}

08014330 <USBD_CDC_Setup>:
{
 8014330:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014332:	f891 c000 	ldrb.w	ip, [r1]
{
 8014336:	b083      	sub	sp, #12
  uint8_t ifalt = 0U;
 8014338:	2300      	movs	r3, #0
{
 801433a:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801433c:	f01c 0660 	ands.w	r6, ip, #96	; 0x60
{
 8014340:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014342:	f8d0 72bc 	ldr.w	r7, [r0, #700]	; 0x2bc
  uint8_t ifalt = 0U;
 8014346:	f88d 3005 	strb.w	r3, [sp, #5]
  uint16_t status_info = 0U;
 801434a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801434e:	d01c      	beq.n	801438a <USBD_CDC_Setup+0x5a>
 8014350:	2e20      	cmp	r6, #32
 8014352:	d112      	bne.n	801437a <USBD_CDC_Setup+0x4a>
    if (req->wLength != 0U)
 8014354:	88ca      	ldrh	r2, [r1, #6]
 8014356:	2a00      	cmp	r2, #0
 8014358:	d036      	beq.n	80143c8 <USBD_CDC_Setup+0x98>
      if ((req->bmRequest & 0x80U) != 0U)
 801435a:	f01c 0f80 	tst.w	ip, #128	; 0x80
 801435e:	d055      	beq.n	801440c <USBD_CDC_Setup+0xdc>
  USBD_StatusTypeDef ret = USBD_OK;
 8014360:	461e      	mov	r6, r3
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8014362:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
 8014366:	4639      	mov	r1, r7
 8014368:	7860      	ldrb	r0, [r4, #1]
 801436a:	689b      	ldr	r3, [r3, #8]
 801436c:	4798      	blx	r3
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801436e:	88e2      	ldrh	r2, [r4, #6]
 8014370:	4639      	mov	r1, r7
 8014372:	4628      	mov	r0, r5
 8014374:	f000 fd2c 	bl	8014dd0 <USBD_CtlSendData>
 8014378:	e004      	b.n	8014384 <USBD_CDC_Setup+0x54>
      USBD_CtlError(pdev, req);
 801437a:	4621      	mov	r1, r4
 801437c:	4628      	mov	r0, r5
      ret = USBD_FAIL;
 801437e:	2603      	movs	r6, #3
      USBD_CtlError(pdev, req);
 8014380:	f000 fcf0 	bl	8014d64 <USBD_CtlError>
}
 8014384:	4630      	mov	r0, r6
 8014386:	b003      	add	sp, #12
 8014388:	bdf0      	pop	{r4, r5, r6, r7, pc}
    switch (req->bRequest)
 801438a:	784b      	ldrb	r3, [r1, #1]
 801438c:	2b0b      	cmp	r3, #11
 801438e:	d8f4      	bhi.n	801437a <USBD_CDC_Setup+0x4a>
 8014390:	a201      	add	r2, pc, #4	; (adr r2, 8014398 <USBD_CDC_Setup+0x68>)
 8014392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014396:	bf00      	nop
 8014398:	080143db 	.word	0x080143db
 801439c:	08014385 	.word	0x08014385
 80143a0:	0801437b 	.word	0x0801437b
 80143a4:	0801437b 	.word	0x0801437b
 80143a8:	0801437b 	.word	0x0801437b
 80143ac:	0801437b 	.word	0x0801437b
 80143b0:	0801437b 	.word	0x0801437b
 80143b4:	0801437b 	.word	0x0801437b
 80143b8:	0801437b 	.word	0x0801437b
 80143bc:	0801437b 	.word	0x0801437b
 80143c0:	080143f9 	.word	0x080143f9
 80143c4:	080143ef 	.word	0x080143ef
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80143c8:	f8d0 32c0 	ldr.w	r3, [r0, #704]	; 0x2c0
  USBD_StatusTypeDef ret = USBD_OK;
 80143cc:	4616      	mov	r6, r2
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80143ce:	7848      	ldrb	r0, [r1, #1]
 80143d0:	689b      	ldr	r3, [r3, #8]
 80143d2:	4798      	blx	r3
}
 80143d4:	4630      	mov	r0, r6
 80143d6:	b003      	add	sp, #12
 80143d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143da:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80143de:	2a03      	cmp	r2, #3
 80143e0:	d01e      	beq.n	8014420 <USBD_CDC_Setup+0xf0>
        USBD_CtlError(pdev, req);
 80143e2:	4621      	mov	r1, r4
 80143e4:	4628      	mov	r0, r5
        ret = USBD_FAIL;
 80143e6:	2603      	movs	r6, #3
        USBD_CtlError(pdev, req);
 80143e8:	f000 fcbc 	bl	8014d64 <USBD_CtlError>
        ret = USBD_FAIL;
 80143ec:	e7ca      	b.n	8014384 <USBD_CDC_Setup+0x54>
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80143ee:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80143f2:	2b03      	cmp	r3, #3
 80143f4:	d0c6      	beq.n	8014384 <USBD_CDC_Setup+0x54>
 80143f6:	e7f4      	b.n	80143e2 <USBD_CDC_Setup+0xb2>
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80143f8:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80143fc:	2b03      	cmp	r3, #3
 80143fe:	d1f0      	bne.n	80143e2 <USBD_CDC_Setup+0xb2>
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8014400:	2201      	movs	r2, #1
 8014402:	f10d 0105 	add.w	r1, sp, #5
 8014406:	f000 fce3 	bl	8014dd0 <USBD_CtlSendData>
 801440a:	e7bb      	b.n	8014384 <USBD_CDC_Setup+0x54>
        hcdc->CmdOpCode = req->bRequest;
 801440c:	7849      	ldrb	r1, [r1, #1]
  USBD_StatusTypeDef ret = USBD_OK;
 801440e:	461e      	mov	r6, r3
        hcdc->CmdLength = (uint8_t)req->wLength;
 8014410:	f887 2201 	strb.w	r2, [r7, #513]	; 0x201
        hcdc->CmdOpCode = req->bRequest;
 8014414:	f887 1200 	strb.w	r1, [r7, #512]	; 0x200
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8014418:	4639      	mov	r1, r7
 801441a:	f000 fcf1 	bl	8014e00 <USBD_CtlPrepareRx>
 801441e:	e7b1      	b.n	8014384 <USBD_CDC_Setup+0x54>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014420:	2202      	movs	r2, #2
 8014422:	f10d 0106 	add.w	r1, sp, #6
  USBD_StatusTypeDef ret = USBD_OK;
 8014426:	461e      	mov	r6, r3
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8014428:	f000 fcd2 	bl	8014dd0 <USBD_CtlSendData>
 801442c:	e7aa      	b.n	8014384 <USBD_CDC_Setup+0x54>
 801442e:	bf00      	nop

08014430 <USBD_CDC_DeInit>:
{
 8014430:	b538      	push	{r3, r4, r5, lr}
 8014432:	4604      	mov	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014434:	2500      	movs	r5, #0
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8014436:	2181      	movs	r1, #129	; 0x81
 8014438:	f00f fa52 	bl	80238e0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801443c:	2101      	movs	r1, #1
 801443e:	4620      	mov	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8014440:	8725      	strh	r5, [r4, #56]	; 0x38
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8014442:	f00f fa4d 	bl	80238e0 <USBD_LL_CloseEP>
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8014446:	2182      	movs	r1, #130	; 0x82
 8014448:	4620      	mov	r0, r4
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801444a:	f8a4 5178 	strh.w	r5, [r4, #376]	; 0x178
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801444e:	f00f fa47 	bl	80238e0 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 8014452:	f8d4 32bc 	ldr.w	r3, [r4, #700]	; 0x2bc
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8014456:	64e5      	str	r5, [r4, #76]	; 0x4c
  if (pdev->pClassData != NULL)
 8014458:	b14b      	cbz	r3, 801446e <USBD_CDC_DeInit+0x3e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801445a:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
 801445e:	685b      	ldr	r3, [r3, #4]
 8014460:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8014462:	f8d4 02bc 	ldr.w	r0, [r4, #700]	; 0x2bc
 8014466:	f00f fd17 	bl	8023e98 <free>
    pdev->pClassData = NULL;
 801446a:	f8c4 52bc 	str.w	r5, [r4, #700]	; 0x2bc
}
 801446e:	2000      	movs	r0, #0
 8014470:	bd38      	pop	{r3, r4, r5, pc}
 8014472:	bf00      	nop

08014474 <USBD_CDC_Init>:
{
 8014474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014478:	4604      	mov	r4, r0
  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 801447a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801447e:	f00f fd03 	bl	8023e88 <malloc>
  if (hcdc == NULL)
 8014482:	4605      	mov	r5, r0
 8014484:	2800      	cmp	r0, #0
 8014486:	d04c      	beq.n	8014522 <USBD_CDC_Init+0xae>
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014488:	7c23      	ldrb	r3, [r4, #16]
  pdev->pClassData = (void *)hcdc;
 801448a:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801448e:	b393      	cbz	r3, 80144f6 <USBD_CDC_Init+0x82>
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8014490:	2340      	movs	r3, #64	; 0x40
 8014492:	2202      	movs	r2, #2
 8014494:	2181      	movs	r1, #129	; 0x81
 8014496:	4620      	mov	r0, r4
 8014498:	f00f fa10 	bl	80238bc <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 801449c:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801449e:	2340      	movs	r3, #64	; 0x40
 80144a0:	4631      	mov	r1, r6
 80144a2:	2202      	movs	r2, #2
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80144a4:	8726      	strh	r6, [r4, #56]	; 0x38
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80144a6:	4620      	mov	r0, r4
 80144a8:	f00f fa08 	bl	80238bc <USBD_LL_OpenEP>
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80144ac:	2310      	movs	r3, #16
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80144ae:	2203      	movs	r2, #3
 80144b0:	2182      	movs	r1, #130	; 0x82
      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80144b2:	f8a4 6178 	strh.w	r6, [r4, #376]	; 0x178
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80144b6:	4620      	mov	r0, r4
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80144b8:	f8a4 304e 	strh.w	r3, [r4, #78]	; 0x4e
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80144bc:	2308      	movs	r3, #8
 80144be:	f00f f9fd 	bl	80238bc <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80144c2:	f04f 0801 	mov.w	r8, #1
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80144c6:	f8d4 32c0 	ldr.w	r3, [r4, #704]	; 0x2c0
  hcdc->TxState = 0U;
 80144ca:	2700      	movs	r7, #0
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80144cc:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	4798      	blx	r3
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144d4:	7c26      	ldrb	r6, [r4, #16]
  hcdc->TxState = 0U;
 80144d6:	f8c5 7214 	str.w	r7, [r5, #532]	; 0x214
  hcdc->RxState = 0U;
 80144da:	f8c5 7218 	str.w	r7, [r5, #536]	; 0x218
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80144de:	b9ae      	cbnz	r6, 801450c <USBD_CDC_Init+0x98>
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80144e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144e4:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 80144e8:	4641      	mov	r1, r8
 80144ea:	4620      	mov	r0, r4
 80144ec:	f00f fa52 	bl	8023994 <USBD_LL_PrepareReceive>
}
 80144f0:	4630      	mov	r0, r6
 80144f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80144f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80144fa:	2202      	movs	r2, #2
 80144fc:	2181      	movs	r1, #129	; 0x81
 80144fe:	4620      	mov	r0, r4
 8014500:	f00f f9dc 	bl	80238bc <USBD_LL_OpenEP>
     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8014504:	2601      	movs	r6, #1
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8014506:	f44f 7300 	mov.w	r3, #512	; 0x200
 801450a:	e7c9      	b.n	80144a0 <USBD_CDC_Init+0x2c>
  return (uint8_t)USBD_OK;
 801450c:	463e      	mov	r6, r7
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801450e:	2340      	movs	r3, #64	; 0x40
 8014510:	f8d5 2204 	ldr.w	r2, [r5, #516]	; 0x204
 8014514:	4641      	mov	r1, r8
 8014516:	4620      	mov	r0, r4
 8014518:	f00f fa3c 	bl	8023994 <USBD_LL_PrepareReceive>
}
 801451c:	4630      	mov	r0, r6
 801451e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return (uint8_t)USBD_EMEM;
 8014522:	2602      	movs	r6, #2
    pdev->pClassData = NULL;
 8014524:	f8c4 02bc 	str.w	r0, [r4, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8014528:	e7e2      	b.n	80144f0 <USBD_CDC_Init+0x7c>
 801452a:	bf00      	nop

0801452c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 801452c:	4603      	mov	r3, r0
  if (fops == NULL)
 801452e:	b119      	cbz	r1, 8014538 <USBD_CDC_RegisterInterface+0xc>
    return (uint8_t)USBD_FAIL;
  }

  pdev->pUserData = fops;

  return (uint8_t)USBD_OK;
 8014530:	2000      	movs	r0, #0
  pdev->pUserData = fops;
 8014532:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
  return (uint8_t)USBD_OK;
 8014536:	4770      	bx	lr
    return (uint8_t)USBD_FAIL;
 8014538:	2003      	movs	r0, #3
}
 801453a:	4770      	bx	lr

0801453c <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801453c:	4603      	mov	r3, r0

  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;

  return (uint8_t)USBD_OK;
}
 801453e:	2000      	movs	r0, #0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014540:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
  hcdc->TxBuffer = pbuff;
 8014544:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8014548:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 801454c:	4770      	bx	lr
 801454e:	bf00      	nop

08014550 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8014550:	4603      	mov	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;

  hcdc->RxBuffer = pbuff;

  return (uint8_t)USBD_OK;
}
 8014552:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8014554:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014558:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 801455c:	4770      	bx	lr
 801455e:	bf00      	nop

08014560 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8014560:	f8d0 22bc 	ldr.w	r2, [r0, #700]	; 0x2bc
{
 8014564:	b510      	push	{r4, lr}

  if (pdev->pClassData == NULL)
 8014566:	b19a      	cbz	r2, 8014590 <USBD_CDC_ReceivePacket+0x30>
  {
    return (uint8_t)USBD_FAIL;
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014568:	7c04      	ldrb	r4, [r0, #16]
 801456a:	b144      	cbz	r4, 801457e <USBD_CDC_ReceivePacket+0x1e>
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801456c:	2400      	movs	r4, #0
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801456e:	2340      	movs	r3, #64	; 0x40
 8014570:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014574:	2101      	movs	r1, #1
 8014576:	f00f fa0d 	bl	8023994 <USBD_LL_PrepareReceive>
}
 801457a:	4620      	mov	r0, r4
 801457c:	bd10      	pop	{r4, pc}
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801457e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014582:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8014586:	2101      	movs	r1, #1
 8014588:	f00f fa04 	bl	8023994 <USBD_LL_PrepareReceive>
}
 801458c:	4620      	mov	r0, r4
 801458e:	bd10      	pop	{r4, pc}
    return (uint8_t)USBD_FAIL;
 8014590:	2403      	movs	r4, #3
}
 8014592:	4620      	mov	r0, r4
 8014594:	bd10      	pop	{r4, pc}
 8014596:	bf00      	nop

08014598 <USBD_Init>:
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8014598:	b1a0      	cbz	r0, 80145c4 <USBD_Init+0x2c>
#endif
    return USBD_FAIL;
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 801459a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801459e:	b113      	cbz	r3, 80145a6 <USBD_Init+0xe>
  {
    pdev->pClass = NULL;
 80145a0:	2300      	movs	r3, #0
 80145a2:	f8c0 32b8 	str.w	r3, [r0, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80145a6:	f8d0 32cc 	ldr.w	r3, [r0, #716]	; 0x2cc
 80145aa:	b113      	cbz	r3, 80145b2 <USBD_Init+0x1a>
  {
    pdev->pConfDesc = NULL;
 80145ac:	2300      	movs	r3, #0
 80145ae:	f8c0 32cc 	str.w	r3, [r0, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80145b2:	b109      	cbz	r1, 80145b8 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80145b4:	f8c0 12b4 	str.w	r1, [r0, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145b8:	2301      	movs	r3, #1
  pdev->id = id;
 80145ba:	7002      	strb	r2, [r0, #0]
  pdev->dev_state = USBD_STATE_DEFAULT;
 80145bc:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80145c0:	f00f b93c 	b.w	802383c <USBD_LL_Init>

  return ret;
}
 80145c4:	2003      	movs	r0, #3
 80145c6:	4770      	bx	lr

080145c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80145c8:	b530      	push	{r4, r5, lr}
  uint16_t len = 0U;
 80145ca:	2400      	movs	r4, #0
{
 80145cc:	b083      	sub	sp, #12
  uint16_t len = 0U;
 80145ce:	f8ad 4006 	strh.w	r4, [sp, #6]

  if (pclass == NULL)
 80145d2:	b159      	cbz	r1, 80145ec <USBD_RegisterClass+0x24>
#endif
    return USBD_FAIL;
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80145d4:	4605      	mov	r5, r0

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80145d6:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80145d8:	f10d 0006 	add.w	r0, sp, #6
  pdev->pClass = pclass;
 80145dc:	f8c5 12b8 	str.w	r1, [r5, #696]	; 0x2b8
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80145e0:	4798      	blx	r3
 80145e2:	f8c5 02cc 	str.w	r0, [r5, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
}
 80145e6:	4620      	mov	r0, r4
 80145e8:	b003      	add	sp, #12
 80145ea:	bd30      	pop	{r4, r5, pc}
    return USBD_FAIL;
 80145ec:	2403      	movs	r4, #3
}
 80145ee:	4620      	mov	r0, r4
 80145f0:	b003      	add	sp, #12
 80145f2:	bd30      	pop	{r4, r5, pc}

080145f4 <USBD_Start>:
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80145f4:	f00f b954 	b.w	80238a0 <USBD_LL_Start>

080145f8 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 80145f8:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80145fc:	b10b      	cbz	r3, 8014602 <USBD_SetClassConfig+0xa>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	4718      	bx	r3
  }

  return ret;
}
 8014602:	2003      	movs	r0, #3
 8014604:	4770      	bx	lr
 8014606:	bf00      	nop

08014608 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014608:	b508      	push	{r3, lr}
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801460a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801460e:	b10b      	cbz	r3, 8014614 <USBD_ClrClassConfig+0xc>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8014610:	685b      	ldr	r3, [r3, #4]
 8014612:	4798      	blx	r3
  }

  return USBD_OK;
}
 8014614:	2000      	movs	r0, #0
 8014616:	bd08      	pop	{r3, pc}

08014618 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8014618:	b538      	push	{r3, r4, r5, lr}
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801461a:	f200 25aa 	addw	r5, r0, #682	; 0x2aa
{
 801461e:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8014620:	4628      	mov	r0, r5
 8014622:	f000 fb93 	bl	8014d4c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8014626:	2201      	movs	r2, #1

  pdev->ep0_data_len = pdev->request.wLength;
 8014628:	f8b4 32b0 	ldrh.w	r3, [r4, #688]	; 0x2b0

  switch (pdev->request.bmRequest & 0x1FU)
 801462c:	f894 12aa 	ldrb.w	r1, [r4, #682]	; 0x2aa
  pdev->ep0_data_len = pdev->request.wLength;
 8014630:	e9c4 23a5 	strd	r2, r3, [r4, #660]	; 0x294
  switch (pdev->request.bmRequest & 0x1FU)
 8014634:	f001 031f 	and.w	r3, r1, #31
 8014638:	4293      	cmp	r3, r2
 801463a:	d009      	beq.n	8014650 <USBD_LL_SetupStage+0x38>
 801463c:	2b02      	cmp	r3, #2
 801463e:	d013      	beq.n	8014668 <USBD_LL_SetupStage+0x50>
 8014640:	b163      	cbz	r3, 801465c <USBD_LL_SetupStage+0x44>
    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
      break;

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8014642:	4620      	mov	r0, r4
 8014644:	f001 0180 	and.w	r1, r1, #128	; 0x80
      break;
  }

  return ret;
}
 8014648:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801464c:	f00f b956 	b.w	80238fc <USBD_LL_StallEP>
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014650:	4629      	mov	r1, r5
 8014652:	4620      	mov	r0, r4
}
 8014654:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8014658:	f000 ba9e 	b.w	8014b98 <USBD_StdItfReq>
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801465c:	4629      	mov	r1, r5
 801465e:	4620      	mov	r0, r4
}
 8014660:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8014664:	f000 b8fa 	b.w	801485c <USBD_StdDevReq>
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014668:	4629      	mov	r1, r5
 801466a:	4620      	mov	r0, r4
}
 801466c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8014670:	f000 baca 	b.w	8014c08 <USBD_StdEPReq>

08014674 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8014674:	b570      	push	{r4, r5, r6, lr}
 8014676:	4605      	mov	r5, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8014678:	b939      	cbnz	r1, 801468a <USBD_LL_DataOutStage+0x16>
 801467a:	4613      	mov	r3, r2
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801467c:	f8d0 2294 	ldr.w	r2, [r0, #660]	; 0x294
 8014680:	460c      	mov	r4, r1
 8014682:	2a03      	cmp	r2, #3
 8014684:	d00e      	beq.n	80146a4 <USBD_LL_DataOutStage+0x30>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 8014686:	2000      	movs	r0, #0
}
 8014688:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataOut != NULL) &&
 801468a:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801468e:	699b      	ldr	r3, [r3, #24]
 8014690:	b133      	cbz	r3, 80146a0 <USBD_LL_DataOutStage+0x2c>
 8014692:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014696:	2a03      	cmp	r2, #3
 8014698:	d102      	bne.n	80146a0 <USBD_LL_DataOutStage+0x2c>
}
 801469a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 801469e:	4718      	bx	r3
    return USBD_FAIL;
 80146a0:	2003      	movs	r0, #3
}
 80146a2:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 80146a4:	e9d0 1257 	ldrd	r1, r2, [r0, #348]	; 0x15c
 80146a8:	4291      	cmp	r1, r2
 80146aa:	d80d      	bhi.n	80146c8 <USBD_LL_DataOutStage+0x54>
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80146ac:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80146b0:	691b      	ldr	r3, [r3, #16]
 80146b2:	b123      	cbz	r3, 80146be <USBD_LL_DataOutStage+0x4a>
 80146b4:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 80146b8:	2a03      	cmp	r2, #3
 80146ba:	d100      	bne.n	80146be <USBD_LL_DataOutStage+0x4a>
          pdev->pClass->EP0_RxReady(pdev);
 80146bc:	4798      	blx	r3
        (void)USBD_CtlSendStatus(pdev);
 80146be:	4628      	mov	r0, r5
 80146c0:	f000 fbb6 	bl	8014e30 <USBD_CtlSendStatus>
  return USBD_OK;
 80146c4:	2000      	movs	r0, #0
 80146c6:	e7df      	b.n	8014688 <USBD_LL_DataOutStage+0x14>
        pep->rem_length -= pep->maxpacket;
 80146c8:	1a89      	subs	r1, r1, r2
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80146ca:	428a      	cmp	r2, r1
        pep->rem_length -= pep->maxpacket;
 80146cc:	f8c0 115c 	str.w	r1, [r0, #348]	; 0x15c
        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80146d0:	bf28      	it	cs
 80146d2:	460a      	movcs	r2, r1
 80146d4:	4619      	mov	r1, r3
 80146d6:	f000 fba1 	bl	8014e1c <USBD_CtlContinueRx>
  return USBD_OK;
 80146da:	4620      	mov	r0, r4
}
 80146dc:	bd70      	pop	{r4, r5, r6, pc}
 80146de:	bf00      	nop

080146e0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80146e0:	b570      	push	{r4, r5, r6, lr}
 80146e2:	4604      	mov	r4, r0
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80146e4:	b949      	cbnz	r1, 80146fa <USBD_LL_DataInStage+0x1a>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80146e6:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80146ea:	2b02      	cmp	r3, #2
 80146ec:	d012      	beq.n	8014714 <USBD_LL_DataInStage+0x34>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80146ee:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 80146f2:	2b01      	cmp	r3, #1
 80146f4:	d027      	beq.n	8014746 <USBD_LL_DataInStage+0x66>
  {
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
 80146f6:	2000      	movs	r0, #0
}
 80146f8:	bd70      	pop	{r4, r5, r6, pc}
  else if ((pdev->pClass->DataIn != NULL) &&
 80146fa:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80146fe:	695b      	ldr	r3, [r3, #20]
 8014700:	b133      	cbz	r3, 8014710 <USBD_LL_DataInStage+0x30>
 8014702:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 8014706:	2a03      	cmp	r2, #3
 8014708:	d102      	bne.n	8014710 <USBD_LL_DataInStage+0x30>
}
 801470a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801470e:	4718      	bx	r3
    return USBD_FAIL;
 8014710:	2003      	movs	r0, #3
}
 8014712:	bd70      	pop	{r4, r5, r6, pc}
      if (pep->rem_length > pep->maxpacket)
 8014714:	e9d0 3607 	ldrd	r3, r6, [r0, #28]
 8014718:	460d      	mov	r5, r1
 801471a:	42b3      	cmp	r3, r6
 801471c:	d818      	bhi.n	8014750 <USBD_LL_DataInStage+0x70>
        if ((pep->maxpacket == pep->rem_length) &&
 801471e:	d027      	beq.n	8014770 <USBD_LL_DataInStage+0x90>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8014720:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014724:	68db      	ldr	r3, [r3, #12]
 8014726:	b11b      	cbz	r3, 8014730 <USBD_LL_DataInStage+0x50>
 8014728:	f894 229c 	ldrb.w	r2, [r4, #668]	; 0x29c
 801472c:	2a03      	cmp	r2, #3
 801472e:	d01c      	beq.n	801476a <USBD_LL_DataInStage+0x8a>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014730:	2180      	movs	r1, #128	; 0x80
 8014732:	4620      	mov	r0, r4
 8014734:	f00f f8e2 	bl	80238fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8014738:	4620      	mov	r0, r4
 801473a:	f000 fb85 	bl	8014e48 <USBD_CtlReceiveStatus>
    if (pdev->dev_test_mode == 1U)
 801473e:	f894 32a0 	ldrb.w	r3, [r4, #672]	; 0x2a0
 8014742:	2b01      	cmp	r3, #1
 8014744:	d1d7      	bne.n	80146f6 <USBD_LL_DataInStage+0x16>
      pdev->dev_test_mode = 0U;
 8014746:	2300      	movs	r3, #0
  return USBD_OK;
 8014748:	4618      	mov	r0, r3
      pdev->dev_test_mode = 0U;
 801474a:	f884 32a0 	strb.w	r3, [r4, #672]	; 0x2a0
}
 801474e:	bd70      	pop	{r4, r5, r6, pc}
        pep->rem_length -= pep->maxpacket;
 8014750:	1b9b      	subs	r3, r3, r6
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014752:	4611      	mov	r1, r2
        pep->rem_length -= pep->maxpacket;
 8014754:	61c3      	str	r3, [r0, #28]
        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8014756:	461a      	mov	r2, r3
 8014758:	f000 fb48 	bl	8014dec <USBD_CtlContinueSendData>
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801475c:	462b      	mov	r3, r5
 801475e:	462a      	mov	r2, r5
 8014760:	4629      	mov	r1, r5
 8014762:	4620      	mov	r0, r4
 8014764:	f00f f916 	bl	8023994 <USBD_LL_PrepareReceive>
 8014768:	e7c1      	b.n	80146ee <USBD_LL_DataInStage+0xe>
            pdev->pClass->EP0_TxSent(pdev);
 801476a:	4620      	mov	r0, r4
 801476c:	4798      	blx	r3
 801476e:	e7df      	b.n	8014730 <USBD_LL_DataInStage+0x50>
            (pep->total_length >= pep->maxpacket) &&
 8014770:	6982      	ldr	r2, [r0, #24]
        if ((pep->maxpacket == pep->rem_length) &&
 8014772:	4293      	cmp	r3, r2
 8014774:	d8d4      	bhi.n	8014720 <USBD_LL_DataInStage+0x40>
            (pep->total_length >= pep->maxpacket) &&
 8014776:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
 801477a:	429a      	cmp	r2, r3
 801477c:	d2d0      	bcs.n	8014720 <USBD_LL_DataInStage+0x40>
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801477e:	460a      	mov	r2, r1
 8014780:	f000 fb34 	bl	8014dec <USBD_CtlContinueSendData>
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014784:	462b      	mov	r3, r5
 8014786:	462a      	mov	r2, r5
 8014788:	4629      	mov	r1, r5
 801478a:	4620      	mov	r0, r4
          pdev->ep0_data_len = 0U;
 801478c:	f8c4 5298 	str.w	r5, [r4, #664]	; 0x298
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014790:	f00f f900 	bl	8023994 <USBD_LL_PrepareReceive>
 8014794:	e7ab      	b.n	80146ee <USBD_LL_DataInStage+0xe>
 8014796:	bf00      	nop

08014798 <USBD_LL_Reset>:

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
  pdev->ep0_state = USBD_EP0_IDLE;
 8014798:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 801479a:	2201      	movs	r2, #1
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;

  if (pdev->pClassData != NULL)
 801479c:	f8d0 32bc 	ldr.w	r3, [r0, #700]	; 0x2bc
{
 80147a0:	b570      	push	{r4, r5, r6, lr}
 80147a2:	4604      	mov	r4, r0
  pdev->dev_state = USBD_STATE_DEFAULT;
 80147a4:	f880 229c 	strb.w	r2, [r0, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80147a8:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  pdev->dev_config = 0U;
 80147ac:	6041      	str	r1, [r0, #4]
  pdev->dev_remote_wakeup = 0U;
 80147ae:	f8c0 12a4 	str.w	r1, [r0, #676]	; 0x2a4
  if (pdev->pClassData != NULL)
 80147b2:	b11b      	cbz	r3, 80147bc <USBD_LL_Reset+0x24>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80147b4:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 80147b8:	685b      	ldr	r3, [r3, #4]
 80147ba:	4798      	blx	r3

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80147bc:	2540      	movs	r5, #64	; 0x40
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147be:	2200      	movs	r2, #0
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80147c0:	2601      	movs	r6, #1
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147c2:	4620      	mov	r0, r4
 80147c4:	462b      	mov	r3, r5
 80147c6:	4611      	mov	r1, r2
 80147c8:	f00f f878 	bl	80238bc <USBD_LL_OpenEP>

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147cc:	462b      	mov	r3, r5
 80147ce:	2200      	movs	r2, #0
 80147d0:	2180      	movs	r1, #128	; 0x80
 80147d2:	4620      	mov	r0, r4
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80147d4:	f8a4 6164 	strh.w	r6, [r4, #356]	; 0x164
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80147d8:	f8c4 5160 	str.w	r5, [r4, #352]	; 0x160
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80147dc:	f00f f86e 	bl	80238bc <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  return USBD_OK;
}
 80147e0:	2000      	movs	r0, #0
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80147e2:	84a6      	strh	r6, [r4, #36]	; 0x24
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80147e4:	6225      	str	r5, [r4, #32]
}
 80147e6:	bd70      	pop	{r4, r5, r6, pc}

080147e8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80147e8:	4603      	mov	r3, r0
  pdev->dev_speed = speed;

  return USBD_OK;
}
 80147ea:	2000      	movs	r0, #0
  pdev->dev_speed = speed;
 80147ec:	7419      	strb	r1, [r3, #16]
}
 80147ee:	4770      	bx	lr

080147f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80147f0:	4603      	mov	r3, r0
  pdev->dev_old_state = pdev->dev_state;
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80147f2:	2104      	movs	r1, #4

  return USBD_OK;
}
 80147f4:	2000      	movs	r0, #0
  pdev->dev_old_state = pdev->dev_state;
 80147f6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80147fa:	f883 129c 	strb.w	r1, [r3, #668]	; 0x29c
  pdev->dev_old_state = pdev->dev_state;
 80147fe:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
}
 8014802:	4770      	bx	lr

08014804 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8014804:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014808:	2b04      	cmp	r3, #4
 801480a:	d103      	bne.n	8014814 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 801480c:	f890 329d 	ldrb.w	r3, [r0, #669]	; 0x29d
 8014810:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
  }

  return USBD_OK;
}
 8014814:	2000      	movs	r0, #0
 8014816:	4770      	bx	lr

08014818 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014818:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801481c:	2a03      	cmp	r2, #3
 801481e:	d001      	beq.n	8014824 <USBD_LL_SOF+0xc>
      pdev->pClass->SOF(pdev);
    }
  }

  return USBD_OK;
}
 8014820:	2000      	movs	r0, #0
 8014822:	4770      	bx	lr
{
 8014824:	b508      	push	{r3, lr}
    if (pdev->pClass->SOF != NULL)
 8014826:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 801482a:	69db      	ldr	r3, [r3, #28]
 801482c:	b103      	cbz	r3, 8014830 <USBD_LL_SOF+0x18>
      pdev->pClass->SOF(pdev);
 801482e:	4798      	blx	r3
}
 8014830:	2000      	movs	r0, #0
 8014832:	bd08      	pop	{r3, pc}

08014834 <USBD_LL_IsoINIncomplete>:
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
}
 8014834:	2000      	movs	r0, #0
 8014836:	4770      	bx	lr

08014838 <USBD_LL_IsoOUTIncomplete>:
 8014838:	2000      	movs	r0, #0
 801483a:	4770      	bx	lr

0801483c <USBD_LL_DevConnected>:
 801483c:	2000      	movs	r0, #0
 801483e:	4770      	bx	lr

08014840 <USBD_LL_DevDisconnected>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014840:	2101      	movs	r1, #1

  if (pdev->pClass != NULL)
 8014842:	f8d0 22b8 	ldr.w	r2, [r0, #696]	; 0x2b8
  pdev->dev_state = USBD_STATE_DEFAULT;
 8014846:	f880 129c 	strb.w	r1, [r0, #668]	; 0x29c
  if (pdev->pClass != NULL)
 801484a:	b12a      	cbz	r2, 8014858 <USBD_LL_DevDisconnected+0x18>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801484c:	6852      	ldr	r2, [r2, #4]
 801484e:	7901      	ldrb	r1, [r0, #4]
{
 8014850:	b508      	push	{r3, lr}
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8014852:	4790      	blx	r2
  }

  return USBD_OK;
}
 8014854:	2000      	movs	r0, #0
 8014856:	bd08      	pop	{r3, pc}
 8014858:	2000      	movs	r0, #0
 801485a:	4770      	bx	lr

0801485c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801485c:	b570      	push	{r4, r5, r6, lr}
 801485e:	780c      	ldrb	r4, [r1, #0]
 8014860:	b082      	sub	sp, #8
 8014862:	460e      	mov	r6, r1
 8014864:	4605      	mov	r5, r0
  USBD_StatusTypeDef ret = USBD_OK;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014866:	f004 0460 	and.w	r4, r4, #96	; 0x60
 801486a:	2c20      	cmp	r4, #32
 801486c:	d00e      	beq.n	801488c <USBD_StdDevReq+0x30>
 801486e:	2c40      	cmp	r4, #64	; 0x40
 8014870:	d00c      	beq.n	801488c <USBD_StdDevReq+0x30>
 8014872:	b1a4      	cbz	r4, 801489e <USBD_StdDevReq+0x42>

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014874:	2180      	movs	r1, #128	; 0x80
 8014876:	4628      	mov	r0, r5
 8014878:	f00f f840 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801487c:	2100      	movs	r1, #0
 801487e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014880:	460c      	mov	r4, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014882:	f00f f83b 	bl	80238fc <USBD_LL_StallEP>
}
 8014886:	4620      	mov	r0, r4
 8014888:	b002      	add	sp, #8
 801488a:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801488c:	f8d5 32b8 	ldr.w	r3, [r5, #696]	; 0x2b8
 8014890:	4631      	mov	r1, r6
 8014892:	4628      	mov	r0, r5
 8014894:	689b      	ldr	r3, [r3, #8]
}
 8014896:	b002      	add	sp, #8
 8014898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801489c:	4718      	bx	r3
    switch (req->bRequest)
 801489e:	784b      	ldrb	r3, [r1, #1]
 80148a0:	2b09      	cmp	r3, #9
 80148a2:	d8e7      	bhi.n	8014874 <USBD_StdDevReq+0x18>
 80148a4:	a201      	add	r2, pc, #4	; (adr r2, 80148ac <USBD_StdDevReq+0x50>)
 80148a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80148aa:	bf00      	nop
 80148ac:	0801490b 	.word	0x0801490b
 80148b0:	08014939 	.word	0x08014939
 80148b4:	08014875 	.word	0x08014875
 80148b8:	08014957 	.word	0x08014957
 80148bc:	08014875 	.word	0x08014875
 80148c0:	0801495f 	.word	0x0801495f
 80148c4:	08014997 	.word	0x08014997
 80148c8:	08014875 	.word	0x08014875
 80148cc:	080149bb 	.word	0x080149bb
 80148d0:	080148d5 	.word	0x080148d5
  cfgidx = (uint8_t)(req->wValue);
 80148d4:	7889      	ldrb	r1, [r1, #2]
 80148d6:	4eaa      	ldr	r6, [pc, #680]	; (8014b80 <USBD_StdDevReq+0x324>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148d8:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);
 80148da:	7031      	strb	r1, [r6, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80148dc:	f200 8146 	bhi.w	8014b6c <USBD_StdDevReq+0x310>
  switch (pdev->dev_state)
 80148e0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80148e4:	2b02      	cmp	r3, #2
 80148e6:	f000 8130 	beq.w	8014b4a <USBD_StdDevReq+0x2ee>
 80148ea:	2b03      	cmp	r3, #3
 80148ec:	f000 810c 	beq.w	8014b08 <USBD_StdDevReq+0x2ac>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148f0:	2180      	movs	r1, #128	; 0x80
    ret = USBD_FAIL;
 80148f2:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80148f4:	f00f f802 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80148f8:	2100      	movs	r1, #0
 80148fa:	4628      	mov	r0, r5
 80148fc:	f00e fffe 	bl	80238fc <USBD_LL_StallEP>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014900:	7831      	ldrb	r1, [r6, #0]
 8014902:	4628      	mov	r0, r5
 8014904:	f7ff fe80 	bl	8014608 <USBD_ClrClassConfig>
    break;
 8014908:	e7bd      	b.n	8014886 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 801490a:	f890 229c 	ldrb.w	r2, [r0, #668]	; 0x29c
 801490e:	3a01      	subs	r2, #1
 8014910:	2a02      	cmp	r2, #2
 8014912:	d868      	bhi.n	80149e6 <USBD_StdDevReq+0x18a>
    if (req->wLength != 0x2U)
 8014914:	88ca      	ldrh	r2, [r1, #6]
 8014916:	2a02      	cmp	r2, #2
 8014918:	d165      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801491a:	2101      	movs	r1, #1
    if (pdev->dev_remote_wakeup != 0U)
 801491c:	f8d0 22a4 	ldr.w	r2, [r0, #676]	; 0x2a4
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014920:	60c1      	str	r1, [r0, #12]
    if (pdev->dev_remote_wakeup != 0U)
 8014922:	b10a      	cbz	r2, 8014928 <USBD_StdDevReq+0xcc>
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014924:	2203      	movs	r2, #3
 8014926:	60c2      	str	r2, [r0, #12]
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014928:	2202      	movs	r2, #2
 801492a:	f105 010c 	add.w	r1, r5, #12
 801492e:	4628      	mov	r0, r5
  USBD_StatusTypeDef ret = USBD_OK;
 8014930:	461c      	mov	r4, r3
    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8014932:	f000 fa4d 	bl	8014dd0 <USBD_CtlSendData>
    break;
 8014936:	e7a6      	b.n	8014886 <USBD_StdDevReq+0x2a>
  switch (pdev->dev_state)
 8014938:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 801493c:	3b01      	subs	r3, #1
 801493e:	2b02      	cmp	r3, #2
 8014940:	d851      	bhi.n	80149e6 <USBD_StdDevReq+0x18a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014942:	884b      	ldrh	r3, [r1, #2]
 8014944:	2b01      	cmp	r3, #1
 8014946:	d19e      	bne.n	8014886 <USBD_StdDevReq+0x2a>
        pdev->dev_remote_wakeup = 0U;
 8014948:	2300      	movs	r3, #0
        (void)USBD_CtlSendStatus(pdev);
 801494a:	4628      	mov	r0, r5
        pdev->dev_remote_wakeup = 0U;
 801494c:	f8c5 32a4 	str.w	r3, [r5, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8014950:	f000 fa6e 	bl	8014e30 <USBD_CtlSendStatus>
 8014954:	e797      	b.n	8014886 <USBD_StdDevReq+0x2a>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014956:	884b      	ldrh	r3, [r1, #2]
 8014958:	2b01      	cmp	r3, #1
 801495a:	d194      	bne.n	8014886 <USBD_StdDevReq+0x2a>
 801495c:	e7f5      	b.n	801494a <USBD_StdDevReq+0xee>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801495e:	888b      	ldrh	r3, [r1, #4]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d140      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
 8014964:	88cb      	ldrh	r3, [r1, #6]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d13d      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
 801496a:	884e      	ldrh	r6, [r1, #2]
 801496c:	2e7f      	cmp	r6, #127	; 0x7f
 801496e:	d83a      	bhi.n	80149e6 <USBD_StdDevReq+0x18a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014970:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014974:	2b03      	cmp	r3, #3
 8014976:	d036      	beq.n	80149e6 <USBD_StdDevReq+0x18a>
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014978:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 801497a:	f880 129e 	strb.w	r1, [r0, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 801497e:	f00e ffed 	bl	802395c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014982:	4628      	mov	r0, r5
 8014984:	f000 fa54 	bl	8014e30 <USBD_CtlSendStatus>
      if (dev_addr != 0U)
 8014988:	2e00      	cmp	r6, #0
 801498a:	f040 80da 	bne.w	8014b42 <USBD_StdDevReq+0x2e6>
        pdev->dev_state = USBD_STATE_DEFAULT;
 801498e:	2301      	movs	r3, #1
 8014990:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014994:	e777      	b.n	8014886 <USBD_StdDevReq+0x2a>
  uint16_t len = 0U;
 8014996:	2300      	movs	r3, #0
  switch (req->wValue >> 8)
 8014998:	884a      	ldrh	r2, [r1, #2]
  uint16_t len = 0U;
 801499a:	f8ad 3006 	strh.w	r3, [sp, #6]
  switch (req->wValue >> 8)
 801499e:	0a13      	lsrs	r3, r2, #8
 80149a0:	3b01      	subs	r3, #1
 80149a2:	2b0e      	cmp	r3, #14
 80149a4:	d81f      	bhi.n	80149e6 <USBD_StdDevReq+0x18a>
 80149a6:	e8df f003 	tbb	[pc, r3]
 80149aa:	6b77      	.short	0x6b77
 80149ac:	4f1e1e59 	.word	0x4f1e1e59
 80149b0:	1e1e1e43 	.word	0x1e1e1e43
 80149b4:	1e1e1e1e 	.word	0x1e1e1e1e
 80149b8:	29          	.byte	0x29
 80149b9:	00          	.byte	0x00
  if (req->wLength != 1U)
 80149ba:	88ca      	ldrh	r2, [r1, #6]
 80149bc:	2a01      	cmp	r2, #1
 80149be:	d112      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
    switch (pdev->dev_state)
 80149c0:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 80149c4:	2b02      	cmp	r3, #2
 80149c6:	f200 8098 	bhi.w	8014afa <USBD_StdDevReq+0x29e>
 80149ca:	2b00      	cmp	r3, #0
 80149cc:	f43f af52 	beq.w	8014874 <USBD_StdDevReq+0x18>
      pdev->dev_default_config = 0U;
 80149d0:	4601      	mov	r1, r0
 80149d2:	2300      	movs	r3, #0
 80149d4:	f841 3f08 	str.w	r3, [r1, #8]!
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80149d8:	f000 f9fa 	bl	8014dd0 <USBD_CtlSendData>
      break;
 80149dc:	e753      	b.n	8014886 <USBD_StdDevReq+0x2a>
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80149de:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 80149e2:	699b      	ldr	r3, [r3, #24]
 80149e4:	b97b      	cbnz	r3, 8014a06 <USBD_StdDevReq+0x1aa>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 80149e6:	2180      	movs	r1, #128	; 0x80
 80149e8:	4628      	mov	r0, r5
 80149ea:	f00e ff87 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80149ee:	2100      	movs	r1, #0
 80149f0:	4628      	mov	r0, r5
 80149f2:	f00e ff83 	bl	80238fc <USBD_LL_StallEP>
}
 80149f6:	4620      	mov	r0, r4
 80149f8:	b002      	add	sp, #8
 80149fa:	bd70      	pop	{r4, r5, r6, pc}
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 80149fc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014a00:	69db      	ldr	r3, [r3, #28]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d0ef      	beq.n	80149e6 <USBD_StdDevReq+0x18a>
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014a06:	f10d 0106 	add.w	r1, sp, #6
 8014a0a:	7c28      	ldrb	r0, [r5, #16]
 8014a0c:	4798      	blx	r3
    if (req->wLength != 0U)
 8014a0e:	88f2      	ldrh	r2, [r6, #6]
 8014a10:	2a00      	cmp	r2, #0
 8014a12:	d06e      	beq.n	8014af2 <USBD_StdDevReq+0x296>
      if (len != 0U)
 8014a14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d0e4      	beq.n	80149e6 <USBD_StdDevReq+0x18a>
        len = MIN(len, req->wLength);
 8014a1c:	429a      	cmp	r2, r3
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014a1e:	4601      	mov	r1, r0
 8014a20:	4628      	mov	r0, r5
        len = MIN(len, req->wLength);
 8014a22:	bf28      	it	cs
 8014a24:	461a      	movcs	r2, r3
 8014a26:	f8ad 2006 	strh.w	r2, [sp, #6]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8014a2a:	f000 f9d1 	bl	8014dd0 <USBD_CtlSendData>
 8014a2e:	e72a      	b.n	8014886 <USBD_StdDevReq+0x2a>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a30:	7c03      	ldrb	r3, [r0, #16]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d1d7      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014a36:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014a3a:	f10d 0006 	add.w	r0, sp, #6
 8014a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014a40:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014a42:	2307      	movs	r3, #7
 8014a44:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014a46:	e7e2      	b.n	8014a0e <USBD_StdDevReq+0x1b2>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a48:	7c03      	ldrb	r3, [r0, #16]
 8014a4a:	2b00      	cmp	r3, #0
 8014a4c:	d1cb      	bne.n	80149e6 <USBD_StdDevReq+0x18a>
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014a4e:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014a52:	f10d 0006 	add.w	r0, sp, #6
 8014a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a58:	4798      	blx	r3
  if (err != 0U)
 8014a5a:	e7d8      	b.n	8014a0e <USBD_StdDevReq+0x1b2>
    switch ((uint8_t)(req->wValue))
 8014a5c:	b2d2      	uxtb	r2, r2
 8014a5e:	2a05      	cmp	r2, #5
 8014a60:	d8c1      	bhi.n	80149e6 <USBD_StdDevReq+0x18a>
 8014a62:	a301      	add	r3, pc, #4	; (adr r3, 8014a68 <USBD_StdDevReq+0x20c>)
 8014a64:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8014a68:	08014ad9 	.word	0x08014ad9
 8014a6c:	08014acd 	.word	0x08014acd
 8014a70:	08014ac1 	.word	0x08014ac1
 8014a74:	08014ab5 	.word	0x08014ab5
 8014a78:	08014aa9 	.word	0x08014aa9
 8014a7c:	080149df 	.word	0x080149df
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014a80:	7c03      	ldrb	r3, [r0, #16]
 8014a82:	2b00      	cmp	r3, #0
 8014a84:	d17e      	bne.n	8014b84 <USBD_StdDevReq+0x328>
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8014a86:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014a8a:	f10d 0006 	add.w	r0, sp, #6
 8014a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a90:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014a92:	2302      	movs	r3, #2
 8014a94:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014a96:	e7ba      	b.n	8014a0e <USBD_StdDevReq+0x1b2>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8014a98:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014a9c:	f10d 0106 	add.w	r1, sp, #6
 8014aa0:	7c00      	ldrb	r0, [r0, #16]
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	4798      	blx	r3
  if (err != 0U)
 8014aa6:	e7b2      	b.n	8014a0e <USBD_StdDevReq+0x1b2>
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014aa8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014aac:	695b      	ldr	r3, [r3, #20]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d1a9      	bne.n	8014a06 <USBD_StdDevReq+0x1aa>
 8014ab2:	e798      	b.n	80149e6 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014ab4:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ab8:	691b      	ldr	r3, [r3, #16]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d1a3      	bne.n	8014a06 <USBD_StdDevReq+0x1aa>
 8014abe:	e792      	b.n	80149e6 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8014ac0:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ac4:	68db      	ldr	r3, [r3, #12]
 8014ac6:	2b00      	cmp	r3, #0
 8014ac8:	d19d      	bne.n	8014a06 <USBD_StdDevReq+0x1aa>
 8014aca:	e78c      	b.n	80149e6 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8014acc:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014ad0:	689b      	ldr	r3, [r3, #8]
 8014ad2:	2b00      	cmp	r3, #0
 8014ad4:	d197      	bne.n	8014a06 <USBD_StdDevReq+0x1aa>
 8014ad6:	e786      	b.n	80149e6 <USBD_StdDevReq+0x18a>
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014ad8:	f8d0 32b4 	ldr.w	r3, [r0, #692]	; 0x2b4
 8014adc:	685b      	ldr	r3, [r3, #4]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d191      	bne.n	8014a06 <USBD_StdDevReq+0x1aa>
 8014ae2:	e780      	b.n	80149e6 <USBD_StdDevReq+0x18a>
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014ae4:	2302      	movs	r3, #2
      pdev->dev_config = cfgidx;
 8014ae6:	6041      	str	r1, [r0, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8014ae8:	460c      	mov	r4, r1
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8014aea:	f880 329c 	strb.w	r3, [r0, #668]	; 0x29c
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014aee:	f7ff fd8b 	bl	8014608 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8014af2:	4628      	mov	r0, r5
 8014af4:	f000 f99c 	bl	8014e30 <USBD_CtlSendStatus>
 8014af8:	e6c5      	b.n	8014886 <USBD_StdDevReq+0x2a>
    switch (pdev->dev_state)
 8014afa:	2b03      	cmp	r3, #3
 8014afc:	f47f aeba 	bne.w	8014874 <USBD_StdDevReq+0x18>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8014b00:	1d01      	adds	r1, r0, #4
 8014b02:	f000 f965 	bl	8014dd0 <USBD_CtlSendData>
      break;
 8014b06:	e6be      	b.n	8014886 <USBD_StdDevReq+0x2a>
    if (cfgidx == 0U)
 8014b08:	2900      	cmp	r1, #0
 8014b0a:	d0eb      	beq.n	8014ae4 <USBD_StdDevReq+0x288>
    else if (cfgidx != pdev->dev_config)
 8014b0c:	6841      	ldr	r1, [r0, #4]
 8014b0e:	2901      	cmp	r1, #1
 8014b10:	d0ef      	beq.n	8014af2 <USBD_StdDevReq+0x296>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014b12:	b2c9      	uxtb	r1, r1
 8014b14:	f7ff fd78 	bl	8014608 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8014b18:	7831      	ldrb	r1, [r6, #0]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b1a:	4628      	mov	r0, r5
      pdev->dev_config = cfgidx;
 8014b1c:	6069      	str	r1, [r5, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b1e:	f7ff fd6b 	bl	80145f8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8014b22:	4606      	mov	r6, r0
 8014b24:	2800      	cmp	r0, #0
 8014b26:	d0e4      	beq.n	8014af2 <USBD_StdDevReq+0x296>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b28:	2180      	movs	r1, #128	; 0x80
 8014b2a:	4628      	mov	r0, r5
 8014b2c:	f00e fee6 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014b30:	2100      	movs	r1, #0
 8014b32:	4628      	mov	r0, r5
 8014b34:	4634      	mov	r4, r6
 8014b36:	f00e fee1 	bl	80238fc <USBD_LL_StallEP>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014b3a:	7929      	ldrb	r1, [r5, #4]
 8014b3c:	4628      	mov	r0, r5
 8014b3e:	f7ff fd63 	bl	8014608 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014b42:	2302      	movs	r3, #2
 8014b44:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014b48:	e69d      	b.n	8014886 <USBD_StdDevReq+0x2a>
    if (cfgidx != 0U)
 8014b4a:	2900      	cmp	r1, #0
 8014b4c:	d0d1      	beq.n	8014af2 <USBD_StdDevReq+0x296>
      pdev->dev_config = cfgidx;
 8014b4e:	2101      	movs	r1, #1
 8014b50:	6041      	str	r1, [r0, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8014b52:	f7ff fd51 	bl	80145f8 <USBD_SetClassConfig>
      if (ret != USBD_OK)
 8014b56:	4604      	mov	r4, r0
 8014b58:	2800      	cmp	r0, #0
 8014b5a:	f47f af44 	bne.w	80149e6 <USBD_StdDevReq+0x18a>
        (void)USBD_CtlSendStatus(pdev);
 8014b5e:	4628      	mov	r0, r5
 8014b60:	f000 f966 	bl	8014e30 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8014b64:	2303      	movs	r3, #3
 8014b66:	f885 329c 	strb.w	r3, [r5, #668]	; 0x29c
 8014b6a:	e68c      	b.n	8014886 <USBD_StdDevReq+0x2a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b6c:	2180      	movs	r1, #128	; 0x80
    return USBD_FAIL;
 8014b6e:	2403      	movs	r4, #3
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014b70:	f00e fec4 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014b74:	2100      	movs	r1, #0
 8014b76:	4628      	mov	r0, r5
 8014b78:	f00e fec0 	bl	80238fc <USBD_LL_StallEP>
}
 8014b7c:	e683      	b.n	8014886 <USBD_StdDevReq+0x2a>
 8014b7e:	bf00      	nop
 8014b80:	200065c8 	.word	0x200065c8
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8014b84:	f8d0 32b8 	ldr.w	r3, [r0, #696]	; 0x2b8
 8014b88:	f10d 0006 	add.w	r0, sp, #6
 8014b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b8e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014b90:	2302      	movs	r3, #2
 8014b92:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8014b94:	e73b      	b.n	8014a0e <USBD_StdDevReq+0x1b2>
 8014b96:	bf00      	nop

08014b98 <USBD_StdItfReq>:
{
 8014b98:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014b9a:	780b      	ldrb	r3, [r1, #0]
{
 8014b9c:	460d      	mov	r5, r1
 8014b9e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014ba0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8014ba4:	2a40      	cmp	r2, #64	; 0x40
 8014ba6:	d00b      	beq.n	8014bc0 <USBD_StdItfReq+0x28>
 8014ba8:	065b      	lsls	r3, r3, #25
 8014baa:	d509      	bpl.n	8014bc0 <USBD_StdItfReq+0x28>
  USBD_StatusTypeDef ret = USBD_OK;
 8014bac:	2500      	movs	r5, #0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bae:	2180      	movs	r1, #128	; 0x80
 8014bb0:	f00e fea4 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bb4:	4620      	mov	r0, r4
 8014bb6:	4629      	mov	r1, r5
 8014bb8:	f00e fea0 	bl	80238fc <USBD_LL_StallEP>
}
 8014bbc:	4628      	mov	r0, r5
 8014bbe:	bd38      	pop	{r3, r4, r5, pc}
    switch (pdev->dev_state)
 8014bc0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
 8014bc4:	3b01      	subs	r3, #1
 8014bc6:	2b02      	cmp	r3, #2
 8014bc8:	d812      	bhi.n	8014bf0 <USBD_StdItfReq+0x58>
      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8014bca:	792b      	ldrb	r3, [r5, #4]
 8014bcc:	2b01      	cmp	r3, #1
 8014bce:	d80f      	bhi.n	8014bf0 <USBD_StdItfReq+0x58>
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bd0:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4620      	mov	r0, r4
 8014bd8:	689b      	ldr	r3, [r3, #8]
 8014bda:	4798      	blx	r3
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014bdc:	88eb      	ldrh	r3, [r5, #6]
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014bde:	4605      	mov	r5, r0
        if ((req->wLength == 0U) && (ret == USBD_OK))
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d1eb      	bne.n	8014bbc <USBD_StdItfReq+0x24>
 8014be4:	2800      	cmp	r0, #0
 8014be6:	d1e9      	bne.n	8014bbc <USBD_StdItfReq+0x24>
          (void)USBD_CtlSendStatus(pdev);
 8014be8:	4620      	mov	r0, r4
 8014bea:	f000 f921 	bl	8014e30 <USBD_CtlSendStatus>
 8014bee:	e7e5      	b.n	8014bbc <USBD_StdItfReq+0x24>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014bf0:	2180      	movs	r1, #128	; 0x80
 8014bf2:	4620      	mov	r0, r4
 8014bf4:	f00e fe82 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bf8:	2100      	movs	r1, #0
 8014bfa:	4620      	mov	r0, r4
  USBD_StatusTypeDef ret = USBD_OK;
 8014bfc:	460d      	mov	r5, r1
  (void)USBD_LL_StallEP(pdev, 0U);
 8014bfe:	f00e fe7d 	bl	80238fc <USBD_LL_StallEP>
}
 8014c02:	4628      	mov	r0, r5
 8014c04:	bd38      	pop	{r3, r4, r5, pc}
 8014c06:	bf00      	nop

08014c08 <USBD_StdEPReq>:
{
 8014c08:	b570      	push	{r4, r5, r6, lr}
 8014c0a:	780b      	ldrb	r3, [r1, #0]
 8014c0c:	460d      	mov	r5, r1
 8014c0e:	4604      	mov	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8014c10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8014c14:	2b20      	cmp	r3, #32
 8014c16:	d00c      	beq.n	8014c32 <USBD_StdEPReq+0x2a>
 8014c18:	2b40      	cmp	r3, #64	; 0x40
 8014c1a:	d00a      	beq.n	8014c32 <USBD_StdEPReq+0x2a>
 8014c1c:	b18b      	cbz	r3, 8014c42 <USBD_StdEPReq+0x3a>
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014c1e:	2180      	movs	r1, #128	; 0x80
 8014c20:	4620      	mov	r0, r4
 8014c22:	f00e fe6b 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014c26:	2100      	movs	r1, #0
 8014c28:	4620      	mov	r0, r4
 8014c2a:	f00e fe67 	bl	80238fc <USBD_LL_StallEP>
}
 8014c2e:	2000      	movs	r0, #0
 8014c30:	bd70      	pop	{r4, r5, r6, pc}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014c32:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014c36:	4629      	mov	r1, r5
 8014c38:	4620      	mov	r0, r4
 8014c3a:	689b      	ldr	r3, [r3, #8]
}
 8014c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014c40:	4718      	bx	r3
    switch (req->bRequest)
 8014c42:	786b      	ldrb	r3, [r5, #1]
  ep_addr = LOBYTE(req->wIndex);
 8014c44:	888a      	ldrh	r2, [r1, #4]
 8014c46:	2b01      	cmp	r3, #1
 8014c48:	b2d1      	uxtb	r1, r2
    switch (req->bRequest)
 8014c4a:	d036      	beq.n	8014cba <USBD_StdEPReq+0xb2>
 8014c4c:	2b03      	cmp	r3, #3
 8014c4e:	d023      	beq.n	8014c98 <USBD_StdEPReq+0x90>
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d1e4      	bne.n	8014c1e <USBD_StdEPReq+0x16>
      switch (pdev->dev_state)
 8014c54:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014c58:	2b02      	cmp	r3, #2
 8014c5a:	d04c      	beq.n	8014cf6 <USBD_StdEPReq+0xee>
 8014c5c:	2b03      	cmp	r3, #3
 8014c5e:	d1de      	bne.n	8014c1e <USBD_StdEPReq+0x16>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c60:	f001 030f 	and.w	r3, r1, #15
        if ((ep_addr & 0x80U) == 0x80U)
 8014c64:	0612      	lsls	r2, r2, #24
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014c66:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8014c6a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        if ((ep_addr & 0x80U) == 0x80U)
 8014c6e:	d453      	bmi.n	8014d18 <USBD_StdEPReq+0x110>
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8014c70:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
 8014c74:	2b00      	cmp	r3, #0
 8014c76:	d0d2      	beq.n	8014c1e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014c78:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014c7c:	2514      	movs	r5, #20
 8014c7e:	fb05 0503 	mla	r5, r5, r3, r0
 8014c82:	f505 75aa 	add.w	r5, r5, #340	; 0x154
          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d152      	bne.n	8014d30 <USBD_StdEPReq+0x128>
            pep->status = 0x0001U;
 8014c8a:	602b      	str	r3, [r5, #0]
          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014c8c:	2202      	movs	r2, #2
 8014c8e:	4629      	mov	r1, r5
 8014c90:	4620      	mov	r0, r4
 8014c92:	f000 f89d 	bl	8014dd0 <USBD_CtlSendData>
          break;
 8014c96:	e7ca      	b.n	8014c2e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014c98:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014c9c:	2b02      	cmp	r3, #2
 8014c9e:	d021      	beq.n	8014ce4 <USBD_StdEPReq+0xdc>
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d1bc      	bne.n	8014c1e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014ca4:	886b      	ldrh	r3, [r5, #2]
 8014ca6:	b923      	cbnz	r3, 8014cb2 <USBD_StdEPReq+0xaa>
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8014ca8:	064a      	lsls	r2, r1, #25
 8014caa:	d002      	beq.n	8014cb2 <USBD_StdEPReq+0xaa>
 8014cac:	88eb      	ldrh	r3, [r5, #6]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d049      	beq.n	8014d46 <USBD_StdEPReq+0x13e>
        (void)USBD_CtlSendStatus(pdev);
 8014cb2:	4620      	mov	r0, r4
 8014cb4:	f000 f8bc 	bl	8014e30 <USBD_CtlSendStatus>
        break;
 8014cb8:	e7b9      	b.n	8014c2e <USBD_StdEPReq+0x26>
      switch (pdev->dev_state)
 8014cba:	f890 329c 	ldrb.w	r3, [r0, #668]	; 0x29c
 8014cbe:	2b02      	cmp	r3, #2
 8014cc0:	d010      	beq.n	8014ce4 <USBD_StdEPReq+0xdc>
 8014cc2:	2b03      	cmp	r3, #3
 8014cc4:	d1ab      	bne.n	8014c1e <USBD_StdEPReq+0x16>
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014cc6:	886b      	ldrh	r3, [r5, #2]
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d1b0      	bne.n	8014c2e <USBD_StdEPReq+0x26>
          if ((ep_addr & 0x7FU) != 0x00U)
 8014ccc:	064e      	lsls	r6, r1, #25
 8014cce:	d135      	bne.n	8014d3c <USBD_StdEPReq+0x134>
          (void)USBD_CtlSendStatus(pdev);
 8014cd0:	4620      	mov	r0, r4
 8014cd2:	f000 f8ad 	bl	8014e30 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8014cd6:	f8d4 32b8 	ldr.w	r3, [r4, #696]	; 0x2b8
 8014cda:	4629      	mov	r1, r5
 8014cdc:	4620      	mov	r0, r4
 8014cde:	689b      	ldr	r3, [r3, #8]
 8014ce0:	4798      	blx	r3
 8014ce2:	e7a4      	b.n	8014c2e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014ce4:	064b      	lsls	r3, r1, #25
 8014ce6:	d09a      	beq.n	8014c1e <USBD_StdEPReq+0x16>
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8014ce8:	f00e fe08 	bl	80238fc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8014cec:	2180      	movs	r1, #128	; 0x80
 8014cee:	4620      	mov	r0, r4
 8014cf0:	f00e fe04 	bl	80238fc <USBD_LL_StallEP>
 8014cf4:	e79b      	b.n	8014c2e <USBD_StdEPReq+0x26>
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014cf6:	0648      	lsls	r0, r1, #25
 8014cf8:	d191      	bne.n	8014c1e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014cfa:	0611      	lsls	r1, r2, #24
        pep->status = 0x0000U;
 8014cfc:	f04f 0300 	mov.w	r3, #0
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d00:	f04f 0202 	mov.w	r2, #2
 8014d04:	4620      	mov	r0, r4
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d06:	bf4c      	ite	mi
 8014d08:	f104 0114 	addmi.w	r1, r4, #20
 8014d0c:	f504 71aa 	addpl.w	r1, r4, #340	; 0x154
        pep->status = 0x0000U;
 8014d10:	600b      	str	r3, [r1, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8014d12:	f000 f85d 	bl	8014dd0 <USBD_CtlSendData>
        break;
 8014d16:	e78a      	b.n	8014c2e <USBD_StdEPReq+0x26>
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8014d18:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	f43f af7f 	beq.w	8014c1e <USBD_StdEPReq+0x16>
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014d20:	f001 037f 	and.w	r3, r1, #127	; 0x7f
 8014d24:	1c5d      	adds	r5, r3, #1
 8014d26:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8014d2a:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 8014d2e:	e7aa      	b.n	8014c86 <USBD_StdEPReq+0x7e>
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8014d30:	4620      	mov	r0, r4
 8014d32:	f00e fdff 	bl	8023934 <USBD_LL_IsStallEP>
 8014d36:	b120      	cbz	r0, 8014d42 <USBD_StdEPReq+0x13a>
            pep->status = 0x0001U;
 8014d38:	2301      	movs	r3, #1
 8014d3a:	e7a6      	b.n	8014c8a <USBD_StdEPReq+0x82>
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8014d3c:	f00e fdec 	bl	8023918 <USBD_LL_ClearStallEP>
 8014d40:	e7c6      	b.n	8014cd0 <USBD_StdEPReq+0xc8>
            pep->status = 0x0000U;
 8014d42:	6028      	str	r0, [r5, #0]
 8014d44:	e7a2      	b.n	8014c8c <USBD_StdEPReq+0x84>
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8014d46:	f00e fdd9 	bl	80238fc <USBD_LL_StallEP>
 8014d4a:	e7b2      	b.n	8014cb2 <USBD_StdEPReq+0xaa>

08014d4c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pbuff);
 8014d4c:	780b      	ldrb	r3, [r1, #0]
 8014d4e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pbuff);
 8014d50:	784b      	ldrb	r3, [r1, #1]
 8014d52:	7043      	strb	r3, [r0, #1]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;

  _Byte1 = *(uint8_t *)_pbuff;
  _pbuff++;
  _Byte2 = *(uint8_t *)_pbuff;
 8014d54:	884b      	ldrh	r3, [r1, #2]
  req->wValue = SWAPBYTE(pbuff);
 8014d56:	8043      	strh	r3, [r0, #2]
 8014d58:	888b      	ldrh	r3, [r1, #4]
  req->wIndex = SWAPBYTE(pbuff);
 8014d5a:	8083      	strh	r3, [r0, #4]
 8014d5c:	88cb      	ldrh	r3, [r1, #6]
  req->wLength = SWAPBYTE(pbuff);
 8014d5e:	80c3      	strh	r3, [r0, #6]
}
 8014d60:	4770      	bx	lr
 8014d62:	bf00      	nop

08014d64 <USBD_CtlError>:
{
 8014d64:	b510      	push	{r4, lr}
 8014d66:	4604      	mov	r4, r0
  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014d68:	2180      	movs	r1, #128	; 0x80
 8014d6a:	f00e fdc7 	bl	80238fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014d6e:	2100      	movs	r1, #0
 8014d70:	4620      	mov	r0, r4
}
 8014d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  (void)USBD_LL_StallEP(pdev, 0U);
 8014d76:	f00e bdc1 	b.w	80238fc <USBD_LL_StallEP>
 8014d7a:	bf00      	nop

08014d7c <USBD_GetString>:
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
  uint8_t idx = 0U;
  uint8_t *pdesc;

  if (desc == NULL)
 8014d7c:	b318      	cbz	r0, 8014dc6 <USBD_GetString+0x4a>
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;
  uint8_t *pbuff = buf;

  while (*pbuff != (uint8_t)'\0')
 8014d7e:	7803      	ldrb	r3, [r0, #0]
{
 8014d80:	b430      	push	{r4, r5}
  while (*pbuff != (uint8_t)'\0')
 8014d82:	b30b      	cbz	r3, 8014dc8 <USBD_GetString+0x4c>
 8014d84:	4604      	mov	r4, r0
 8014d86:	f1c0 0c01 	rsb	ip, r0, #1
  {
    len++;
 8014d8a:	eb04 030c 	add.w	r3, r4, ip
  while (*pbuff != (uint8_t)'\0')
 8014d8e:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	2d00      	cmp	r5, #0
 8014d96:	d1f8      	bne.n	8014d8a <USBD_GetString+0xe>
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8014d98:	3301      	adds	r3, #1
 8014d9a:	005b      	lsls	r3, r3, #1
 8014d9c:	b2dc      	uxtb	r4, r3
 8014d9e:	8013      	strh	r3, [r2, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014da0:	2303      	movs	r3, #3
  unicode[idx] = *(uint8_t *)len;
 8014da2:	700c      	strb	r4, [r1, #0]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8014da4:	704b      	strb	r3, [r1, #1]
  while (*pdesc != (uint8_t)'\0')
 8014da6:	7804      	ldrb	r4, [r0, #0]
 8014da8:	b15c      	cbz	r4, 8014dc2 <USBD_GetString+0x46>
  idx++;
 8014daa:	2302      	movs	r3, #2
    unicode[idx] = 0U;
 8014dac:	2500      	movs	r5, #0
    idx++;
 8014dae:	1c5a      	adds	r2, r3, #1
    unicode[idx] = *pdesc;
 8014db0:	54cc      	strb	r4, [r1, r3]
    idx++;
 8014db2:	3302      	adds	r3, #2
    unicode[idx] = 0U;
 8014db4:	b2d2      	uxtb	r2, r2
    idx++;
 8014db6:	b2db      	uxtb	r3, r3
    unicode[idx] = 0U;
 8014db8:	548d      	strb	r5, [r1, r2]
  while (*pdesc != (uint8_t)'\0')
 8014dba:	f810 4f01 	ldrb.w	r4, [r0, #1]!
 8014dbe:	2c00      	cmp	r4, #0
 8014dc0:	d1f5      	bne.n	8014dae <USBD_GetString+0x32>
}
 8014dc2:	bc30      	pop	{r4, r5}
 8014dc4:	4770      	bx	lr
 8014dc6:	4770      	bx	lr
  while (*pbuff != (uint8_t)'\0')
 8014dc8:	2402      	movs	r4, #2
 8014dca:	4623      	mov	r3, r4
 8014dcc:	e7e7      	b.n	8014d9e <USBD_GetString+0x22>
 8014dce:	bf00      	nop

08014dd0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014dd0:	b510      	push	{r4, lr}
 8014dd2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014dd4:	2402      	movs	r4, #2
{
 8014dd6:	460a      	mov	r2, r1
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dd8:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8014dda:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_in[0].rem_length = len;
 8014dde:	e9c0 3306 	strd	r3, r3, [r0, #24]
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014de2:	f00e fdc9 	bl	8023978 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014de6:	2000      	movs	r0, #0
 8014de8:	bd10      	pop	{r4, pc}
 8014dea:	bf00      	nop

08014dec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8014dec:	468c      	mov	ip, r1
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014dee:	2100      	movs	r1, #0
{
 8014df0:	b508      	push	{r3, lr}
 8014df2:	4613      	mov	r3, r2
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014df4:	4662      	mov	r2, ip
 8014df6:	f00e fdbf 	bl	8023978 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014dfa:	2000      	movs	r0, #0
 8014dfc:	bd08      	pop	{r3, pc}
 8014dfe:	bf00      	nop

08014e00 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8014e00:	b510      	push	{r4, lr}
 8014e02:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014e04:	2403      	movs	r4, #3
{
 8014e06:	460a      	mov	r2, r1
  pdev->ep_out[0].total_length = len;
  pdev->ep_out[0].rem_length = len;

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e08:	2100      	movs	r1, #0
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8014e0a:	f8c0 4294 	str.w	r4, [r0, #660]	; 0x294
  pdev->ep_out[0].rem_length = len;
 8014e0e:	e9c0 3356 	strd	r3, r3, [r0, #344]	; 0x158
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e12:	f00e fdbf 	bl	8023994 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014e16:	2000      	movs	r0, #0
 8014e18:	bd10      	pop	{r4, pc}
 8014e1a:	bf00      	nop

08014e1c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014e1c:	468c      	mov	ip, r1
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e1e:	2100      	movs	r1, #0
{
 8014e20:	b508      	push	{r3, lr}
 8014e22:	4613      	mov	r3, r2
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8014e24:	4662      	mov	r2, ip
 8014e26:	f00e fdb5 	bl	8023994 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014e2a:	2000      	movs	r0, #0
 8014e2c:	bd08      	pop	{r3, pc}
 8014e2e:	bf00      	nop

08014e30 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014e30:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e32:	2104      	movs	r1, #4

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e34:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8014e36:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014e3a:	461a      	mov	r2, r3
 8014e3c:	4619      	mov	r1, r3
 8014e3e:	f00e fd9b 	bl	8023978 <USBD_LL_Transmit>

  return USBD_OK;
}
 8014e42:	2000      	movs	r0, #0
 8014e44:	bd08      	pop	{r3, pc}
 8014e46:	bf00      	nop

08014e48 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8014e48:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e4a:	2105      	movs	r1, #5

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e4c:	2300      	movs	r3, #0
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014e4e:	f8c0 1294 	str.w	r1, [r0, #660]	; 0x294
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014e52:	461a      	mov	r2, r3
 8014e54:	4619      	mov	r1, r3
 8014e56:	f00e fd9d 	bl	8023994 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8014e5a:	2000      	movs	r0, #0
 8014e5c:	bd08      	pop	{r3, pc}
 8014e5e:	bf00      	nop

08014e60 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8014e60:	4b10      	ldr	r3, [pc, #64]	; (8014ea4 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014e62:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8014e64:	7a5c      	ldrb	r4, [r3, #9]
 8014e66:	b9cc      	cbnz	r4, 8014e9c <FATFS_LinkDriver+0x3c>
 8014e68:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8014e6a:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8014e6e:	7a5c      	ldrb	r4, [r3, #9]
 8014e70:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8014e72:	7a5c      	ldrb	r4, [r3, #9]
 8014e74:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8014e78:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8014e7a:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8014e7c:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8014e7e:	441c      	add	r4, r3
 8014e80:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8014e82:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8014e84:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8014e86:	b2e4      	uxtb	r4, r4
 8014e88:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8014e8a:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8014e8c:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8014e8e:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8014e90:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8014e92:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8014e94:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8014e98:	708b      	strb	r3, [r1, #2]
}
 8014e9a:	4770      	bx	lr
  uint8_t ret = 1;
 8014e9c:	2001      	movs	r0, #1
}
 8014e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014ea2:	4770      	bx	lr
 8014ea4:	200065cc 	.word	0x200065cc

08014ea8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8014ea8:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8014eaa:	f001 f9c9 	bl	8016240 <vTaskStartScheduler>
  
  return osOK;
}
 8014eae:	2000      	movs	r0, #0
 8014eb0:	bd08      	pop	{r3, pc}
 8014eb2:	bf00      	nop

08014eb4 <osKernelSysTick>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014eb4:	f3ef 8305 	mrs	r3, IPSR
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
  if (inHandlerMode()) {
 8014eb8:	b10b      	cbz	r3, 8014ebe <osKernelSysTick+0xa>
    return xTaskGetTickCountFromISR();
 8014eba:	f001 ba23 	b.w	8016304 <xTaskGetTickCountFromISR>
  }
  else {
    return xTaskGetTickCount();
 8014ebe:	f001 ba1b 	b.w	80162f8 <xTaskGetTickCount>
 8014ec2:	bf00      	nop

08014ec4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8014ec4:	b570      	push	{r4, r5, r6, lr}
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014ec6:	6944      	ldr	r4, [r0, #20]
{
 8014ec8:	b086      	sub	sp, #24
 8014eca:	4684      	mov	ip, r0
 8014ecc:	460b      	mov	r3, r1
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8014ece:	b1ac      	cbz	r4, 8014efc <osThreadCreate+0x38>
 8014ed0:	6986      	ldr	r6, [r0, #24]
 8014ed2:	b19e      	cbz	r6, 8014efc <osThreadCreate+0x38>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ed4:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8014ed8:	f8dc 1000 	ldr.w	r1, [ip]
  if (priority != osPriorityError) {
 8014edc:	f1be 0f84 	cmp.w	lr, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014ee0:	f8dc 2010 	ldr.w	r2, [ip, #16]
 8014ee4:	6840      	ldr	r0, [r0, #4]
    fpriority += (priority - osPriorityIdle);
 8014ee6:	bf14      	ite	ne
 8014ee8:	f10e 0503 	addne.w	r5, lr, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014eec:	2500      	moveq	r5, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014eee:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8014ef2:	9500      	str	r5, [sp, #0]
 8014ef4:	f001 f932 	bl	801615c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8014ef8:	b006      	add	sp, #24
 8014efa:	bd70      	pop	{r4, r5, r6, pc}
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014efc:	f9bc 4008 	ldrsh.w	r4, [ip, #8]
 8014f00:	f8bc 2010 	ldrh.w	r2, [ip, #16]
  if (priority != osPriorityError) {
 8014f04:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 8014f06:	bf14      	ite	ne
 8014f08:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8014f0a:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8014f0c:	e9dc 1000 	ldrd	r1, r0, [ip]
 8014f10:	9400      	str	r4, [sp, #0]
 8014f12:	ac05      	add	r4, sp, #20
 8014f14:	9401      	str	r4, [sp, #4]
 8014f16:	f001 f961 	bl	80161dc <xTaskCreate>
 8014f1a:	2801      	cmp	r0, #1
  return handle;
 8014f1c:	bf0c      	ite	eq
 8014f1e:	9805      	ldreq	r0, [sp, #20]
      return NULL;
 8014f20:	2000      	movne	r0, #0
}
 8014f22:	b006      	add	sp, #24
 8014f24:	bd70      	pop	{r4, r5, r6, pc}
 8014f26:	bf00      	nop

08014f28 <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014f28:	2801      	cmp	r0, #1
{
 8014f2a:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8014f2c:	bf38      	it	cc
 8014f2e:	2001      	movcc	r0, #1
 8014f30:	f001 fb48 	bl	80165c4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8014f34:	2000      	movs	r0, #0
 8014f36:	bd08      	pop	{r3, pc}

08014f38 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8014f38:	b510      	push	{r4, lr}
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 8014f3a:	6844      	ldr	r4, [r0, #4]
{
 8014f3c:	b082      	sub	sp, #8
 8014f3e:	4613      	mov	r3, r2
  if(timer_def->controlblock != NULL) {
 8014f40:	b16c      	cbz	r4, 8014f5e <osTimerCreate+0x26>
    return xTimerCreateStatic((const char *)"",
 8014f42:	f1a1 0201 	sub.w	r2, r1, #1
 8014f46:	6800      	ldr	r0, [r0, #0]
 8014f48:	2101      	movs	r1, #1
 8014f4a:	fab2 f282 	clz	r2, r2
 8014f4e:	0952      	lsrs	r2, r2, #5
 8014f50:	e9cd 0400 	strd	r0, r4, [sp]
 8014f54:	4808      	ldr	r0, [pc, #32]	; (8014f78 <osTimerCreate+0x40>)
 8014f56:	f001 fee9 	bl	8016d2c <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8014f5a:	b002      	add	sp, #8
 8014f5c:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8014f5e:	f1a1 0201 	sub.w	r2, r1, #1
 8014f62:	6804      	ldr	r4, [r0, #0]
 8014f64:	2101      	movs	r1, #1
 8014f66:	4804      	ldr	r0, [pc, #16]	; (8014f78 <osTimerCreate+0x40>)
 8014f68:	fab2 f282 	clz	r2, r2
 8014f6c:	9400      	str	r4, [sp, #0]
 8014f6e:	0952      	lsrs	r2, r2, #5
 8014f70:	f001 feac 	bl	8016ccc <xTimerCreate>
}
 8014f74:	b002      	add	sp, #8
 8014f76:	bd10      	pop	{r4, pc}
 8014f78:	08029d08 	.word	0x08029d08

08014f7c <osMutexCreate>:
{
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8014f7c:	6841      	ldr	r1, [r0, #4]
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014f7e:	2001      	movs	r0, #1
  if (mutex_def->controlblock != NULL) {
 8014f80:	b109      	cbz	r1, 8014f86 <osMutexCreate+0xa>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8014f82:	f000 bbc9 	b.w	8015718 <xQueueCreateMutexStatic>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8014f86:	f000 bbdf 	b.w	8015748 <xQueueCreateMutex>
 8014f8a:	bf00      	nop

08014f8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8014f8c:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8014f8e:	2400      	movs	r4, #0
{
 8014f90:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8014f92:	9401      	str	r4, [sp, #4]
  
  
  if (mutex_id == NULL) {
 8014f94:	b310      	cbz	r0, 8014fdc <osMutexWait+0x50>
 8014f96:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 8014f9a:	b933      	cbnz	r3, 8014faa <osMutexWait+0x1e>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8014f9c:	f000 fd88 	bl	8015ab0 <xQueueSemaphoreTake>
 8014fa0:	2801      	cmp	r0, #1
 8014fa2:	d118      	bne.n	8014fd6 <osMutexWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8014fa4:	2000      	movs	r0, #0
}
 8014fa6:	b002      	add	sp, #8
 8014fa8:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014faa:	aa01      	add	r2, sp, #4
 8014fac:	4621      	mov	r1, r4
 8014fae:	f000 fe63 	bl	8015c78 <xQueueReceiveFromISR>
 8014fb2:	2801      	cmp	r0, #1
 8014fb4:	d10f      	bne.n	8014fd6 <osMutexWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 8014fb6:	9b01      	ldr	r3, [sp, #4]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d0f3      	beq.n	8014fa4 <osMutexWait+0x18>
 8014fbc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8014fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014fc4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	f3bf 8f6f 	isb	sy
  return osOK;
 8014fd0:	4620      	mov	r0, r4
}
 8014fd2:	b002      	add	sp, #8
 8014fd4:	bd10      	pop	{r4, pc}
    return osErrorOS;
 8014fd6:	20ff      	movs	r0, #255	; 0xff
}
 8014fd8:	b002      	add	sp, #8
 8014fda:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 8014fdc:	2080      	movs	r0, #128	; 0x80
}
 8014fde:	b002      	add	sp, #8
 8014fe0:	bd10      	pop	{r4, pc}
 8014fe2:	bf00      	nop

08014fe4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8014fe4:	b510      	push	{r4, lr}
  osStatus result = osOK;
  portBASE_TYPE taskWoken = pdFALSE;
 8014fe6:	2400      	movs	r4, #0
{
 8014fe8:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;
 8014fea:	9401      	str	r4, [sp, #4]
 8014fec:	f3ef 8305 	mrs	r3, IPSR
  
  if (inHandlerMode()) {
 8014ff0:	b19b      	cbz	r3, 801501a <osMutexRelease+0x36>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8014ff2:	a901      	add	r1, sp, #4
 8014ff4:	f000 fc34 	bl	8015860 <xQueueGiveFromISR>
 8014ff8:	2801      	cmp	r0, #1
 8014ffa:	d114      	bne.n	8015026 <osMutexRelease+0x42>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 8014ffc:	9b01      	ldr	r3, [sp, #4]
 8014ffe:	b1ab      	cbz	r3, 801502c <osMutexRelease+0x48>
 8015000:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015004:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015008:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801500c:	f3bf 8f4f 	dsb	sy
 8015010:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8015014:	4620      	mov	r0, r4
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
  {
    result = osErrorOS;
  }
  return result;
}
 8015016:	b002      	add	sp, #8
 8015018:	bd10      	pop	{r4, pc}
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 801501a:	461a      	mov	r2, r3
 801501c:	4619      	mov	r1, r3
 801501e:	f000 faad 	bl	801557c <xQueueGenericSend>
 8015022:	2801      	cmp	r0, #1
 8015024:	d002      	beq.n	801502c <osMutexRelease+0x48>
    result = osErrorOS;
 8015026:	20ff      	movs	r0, #255	; 0xff
}
 8015028:	b002      	add	sp, #8
 801502a:	bd10      	pop	{r4, pc}
  osStatus result = osOK;
 801502c:	2000      	movs	r0, #0
}
 801502e:	b002      	add	sp, #8
 8015030:	bd10      	pop	{r4, pc}
 8015032:	bf00      	nop

08015034 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8015034:	b530      	push	{r4, r5, lr}
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8015036:	6844      	ldr	r4, [r0, #4]
{ 
 8015038:	b083      	sub	sp, #12
 801503a:	4608      	mov	r0, r1
  if (semaphore_def->controlblock != NULL){
 801503c:	b184      	cbz	r4, 8015060 <osSemaphoreCreate+0x2c>
    if (count == 1) {
 801503e:	2901      	cmp	r1, #1
 8015040:	d003      	beq.n	801504a <osSemaphoreCreate+0x16>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8015042:	2400      	movs	r4, #0
#else
    return NULL;
#endif
  }
#endif
}
 8015044:	4620      	mov	r0, r4
 8015046:	b003      	add	sp, #12
 8015048:	bd30      	pop	{r4, r5, pc}
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 801504a:	2200      	movs	r2, #0
 801504c:	2503      	movs	r5, #3
 801504e:	4623      	mov	r3, r4
 8015050:	4611      	mov	r1, r2
 8015052:	9500      	str	r5, [sp, #0]
 8015054:	f000 fa08 	bl	8015468 <xQueueGenericCreateStatic>
 8015058:	4604      	mov	r4, r0
}
 801505a:	4620      	mov	r0, r4
 801505c:	b003      	add	sp, #12
 801505e:	bd30      	pop	{r4, r5, pc}
    if (count == 1) {
 8015060:	2901      	cmp	r1, #1
 8015062:	d1ef      	bne.n	8015044 <osSemaphoreCreate+0x10>
      vSemaphoreCreateBinary(sema);
 8015064:	4621      	mov	r1, r4
 8015066:	2203      	movs	r2, #3
 8015068:	f000 fa56 	bl	8015518 <xQueueGenericCreate>
 801506c:	4604      	mov	r4, r0
 801506e:	2800      	cmp	r0, #0
 8015070:	d0e8      	beq.n	8015044 <osSemaphoreCreate+0x10>
 8015072:	2300      	movs	r3, #0
 8015074:	461a      	mov	r2, r3
 8015076:	4619      	mov	r1, r3
 8015078:	f000 fa80 	bl	801557c <xQueueGenericSend>
 801507c:	e7e2      	b.n	8015044 <osSemaphoreCreate+0x10>
 801507e:	bf00      	nop

08015080 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8015080:	b510      	push	{r4, lr}
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8015082:	2400      	movs	r4, #0
{
 8015084:	b082      	sub	sp, #8
  portBASE_TYPE taskWoken = pdFALSE;  
 8015086:	9401      	str	r4, [sp, #4]
  
  
  if (semaphore_id == NULL) {
 8015088:	b310      	cbz	r0, 80150d0 <osSemaphoreWait+0x50>
 801508a:	f3ef 8305 	mrs	r3, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 801508e:	b933      	cbnz	r3, 801509e <osSemaphoreWait+0x1e>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
      return osErrorOS;
    }
	portEND_SWITCHING_ISR(taskWoken);
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8015090:	f000 fd0e 	bl	8015ab0 <xQueueSemaphoreTake>
 8015094:	2801      	cmp	r0, #1
 8015096:	d118      	bne.n	80150ca <osSemaphoreWait+0x4a>
    return osErrorOS;
  }
  
  return osOK;
 8015098:	2000      	movs	r0, #0
}
 801509a:	b002      	add	sp, #8
 801509c:	bd10      	pop	{r4, pc}
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801509e:	aa01      	add	r2, sp, #4
 80150a0:	4621      	mov	r1, r4
 80150a2:	f000 fde9 	bl	8015c78 <xQueueReceiveFromISR>
 80150a6:	2801      	cmp	r0, #1
 80150a8:	d10f      	bne.n	80150ca <osSemaphoreWait+0x4a>
	portEND_SWITCHING_ISR(taskWoken);
 80150aa:	9b01      	ldr	r3, [sp, #4]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d0f3      	beq.n	8015098 <osSemaphoreWait+0x18>
 80150b0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80150b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150b8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80150bc:	f3bf 8f4f 	dsb	sy
 80150c0:	f3bf 8f6f 	isb	sy
  return osOK;
 80150c4:	4620      	mov	r0, r4
}
 80150c6:	b002      	add	sp, #8
 80150c8:	bd10      	pop	{r4, pc}
    return osErrorOS;
 80150ca:	20ff      	movs	r0, #255	; 0xff
}
 80150cc:	b002      	add	sp, #8
 80150ce:	bd10      	pop	{r4, pc}
    return osErrorParameter;
 80150d0:	2080      	movs	r0, #128	; 0x80
}
 80150d2:	b002      	add	sp, #8
 80150d4:	bd10      	pop	{r4, pc}
 80150d6:	bf00      	nop

080150d8 <osSemaphoreRelease>:
 80150d8:	b510      	push	{r4, lr}
 80150da:	2400      	movs	r4, #0
 80150dc:	b082      	sub	sp, #8
 80150de:	9401      	str	r4, [sp, #4]
 80150e0:	f3ef 8305 	mrs	r3, IPSR
 80150e4:	b19b      	cbz	r3, 801510e <osSemaphoreRelease+0x36>
 80150e6:	a901      	add	r1, sp, #4
 80150e8:	f000 fbba 	bl	8015860 <xQueueGiveFromISR>
 80150ec:	2801      	cmp	r0, #1
 80150ee:	d114      	bne.n	801511a <osSemaphoreRelease+0x42>
 80150f0:	9b01      	ldr	r3, [sp, #4]
 80150f2:	b1ab      	cbz	r3, 8015120 <osSemaphoreRelease+0x48>
 80150f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80150f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80150fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015100:	f3bf 8f4f 	dsb	sy
 8015104:	f3bf 8f6f 	isb	sy
 8015108:	4620      	mov	r0, r4
 801510a:	b002      	add	sp, #8
 801510c:	bd10      	pop	{r4, pc}
 801510e:	461a      	mov	r2, r3
 8015110:	4619      	mov	r1, r3
 8015112:	f000 fa33 	bl	801557c <xQueueGenericSend>
 8015116:	2801      	cmp	r0, #1
 8015118:	d002      	beq.n	8015120 <osSemaphoreRelease+0x48>
 801511a:	20ff      	movs	r0, #255	; 0xff
 801511c:	b002      	add	sp, #8
 801511e:	bd10      	pop	{r4, pc}
 8015120:	2000      	movs	r0, #0
 8015122:	b002      	add	sp, #8
 8015124:	bd10      	pop	{r4, pc}
 8015126:	bf00      	nop

08015128 <osMessageCreate>:
{
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8015128:	6882      	ldr	r2, [r0, #8]
 801512a:	b15a      	cbz	r2, 8015144 <osMessageCreate+0x1c>
 801512c:	68c3      	ldr	r3, [r0, #12]
 801512e:	b14b      	cbz	r3, 8015144 <osMessageCreate+0x1c>
{
 8015130:	b510      	push	{r4, lr}
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015132:	2400      	movs	r4, #0
{
 8015134:	b082      	sub	sp, #8
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8015136:	e9d0 0100 	ldrd	r0, r1, [r0]
 801513a:	9400      	str	r4, [sp, #0]
 801513c:	f000 f994 	bl	8015468 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8015140:	b002      	add	sp, #8
 8015142:	bd10      	pop	{r4, pc}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8015144:	2200      	movs	r2, #0
 8015146:	e9d0 0100 	ldrd	r0, r1, [r0]
 801514a:	f000 b9e5 	b.w	8015518 <xQueueGenericCreate>
 801514e:	bf00      	nop

08015150 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8015150:	b510      	push	{r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 8015152:	2400      	movs	r4, #0
{
 8015154:	b084      	sub	sp, #16
 8015156:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8015158:	9403      	str	r4, [sp, #12]
 801515a:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 801515e:	b15b      	cbz	r3, 8015178 <osMessagePut+0x28>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8015160:	4623      	mov	r3, r4
 8015162:	aa03      	add	r2, sp, #12
 8015164:	a901      	add	r1, sp, #4
 8015166:	f000 fb09 	bl	801577c <xQueueGenericSendFromISR>
 801516a:	2801      	cmp	r0, #1
 801516c:	d10c      	bne.n	8015188 <osMessagePut+0x38>
      return osErrorOS;
    }
    portEND_SWITCHING_ISR(taskWoken);
 801516e:	9b03      	ldr	r3, [sp, #12]
 8015170:	b96b      	cbnz	r3, 801518e <osMessagePut+0x3e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
      return osErrorOS;
    }
  }
  
  return osOK;
 8015172:	2000      	movs	r0, #0
}
 8015174:	b004      	add	sp, #16
 8015176:	bd10      	pop	{r4, pc}
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8015178:	2a01      	cmp	r2, #1
 801517a:	a901      	add	r1, sp, #4
 801517c:	bf38      	it	cc
 801517e:	2201      	movcc	r2, #1
 8015180:	f000 f9fc 	bl	801557c <xQueueGenericSend>
 8015184:	2801      	cmp	r0, #1
 8015186:	d0f4      	beq.n	8015172 <osMessagePut+0x22>
      return osErrorOS;
 8015188:	20ff      	movs	r0, #255	; 0xff
}
 801518a:	b004      	add	sp, #16
 801518c:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 801518e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015196:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801519a:	f3bf 8f4f 	dsb	sy
 801519e:	f3bf 8f6f 	isb	sy
  return osOK;
 80151a2:	4620      	mov	r0, r4
}
 80151a4:	b004      	add	sp, #16
 80151a6:	bd10      	pop	{r4, pc}

080151a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80151a8:	b570      	push	{r4, r5, r6, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 80151aa:	2600      	movs	r6, #0
{
 80151ac:	b084      	sub	sp, #16
 80151ae:	4604      	mov	r4, r0
  event.def.message_id = queue_id;
 80151b0:	e9cd 6102 	strd	r6, r1, [sp, #8]
  
  if (queue_id == NULL) {
 80151b4:	b379      	cbz	r1, 8015216 <osMessageGet+0x6e>
    event.status = osErrorParameter;
    return event;
  }
  
  taskWoken = pdFALSE;
 80151b6:	460b      	mov	r3, r1
 80151b8:	9600      	str	r6, [sp, #0]
 80151ba:	f3ef 8105 	mrs	r1, IPSR
    if (ticks == 0) {
      ticks = 1;
    }
  }
  
  if (inHandlerMode()) {
 80151be:	b991      	cbnz	r1, 80151e6 <osMessageGet+0x3e>
      event.status = osOK;
    }
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80151c0:	a902      	add	r1, sp, #8
 80151c2:	4618      	mov	r0, r3
 80151c4:	4615      	mov	r5, r2
 80151c6:	f000 fbab 	bl	8015920 <xQueueReceive>
 80151ca:	2801      	cmp	r0, #1
 80151cc:	d02d      	beq.n	801522a <osMessageGet+0x82>
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80151ce:	2d00      	cmp	r5, #0
 80151d0:	bf18      	it	ne
 80151d2:	2540      	movne	r5, #64	; 0x40
 80151d4:	9501      	str	r5, [sp, #4]
    }
  }
  
  return event;
 80151d6:	ab04      	add	r3, sp, #16
 80151d8:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80151dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80151e0:	4620      	mov	r0, r4
 80151e2:	b004      	add	sp, #16
 80151e4:	bd70      	pop	{r4, r5, r6, pc}
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80151e6:	466a      	mov	r2, sp
 80151e8:	4618      	mov	r0, r3
 80151ea:	a902      	add	r1, sp, #8
 80151ec:	f000 fd44 	bl	8015c78 <xQueueReceiveFromISR>
      event.status = osOK;
 80151f0:	2801      	cmp	r0, #1
    portEND_SWITCHING_ISR(taskWoken);
 80151f2:	9b00      	ldr	r3, [sp, #0]
      event.status = osOK;
 80151f4:	bf0c      	ite	eq
 80151f6:	2210      	moveq	r2, #16
 80151f8:	2200      	movne	r2, #0
 80151fa:	9201      	str	r2, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d0ea      	beq.n	80151d6 <osMessageGet+0x2e>
 8015200:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015204:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015208:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801520c:	f3bf 8f4f 	dsb	sy
 8015210:	f3bf 8f6f 	isb	sy
 8015214:	e7df      	b.n	80151d6 <osMessageGet+0x2e>
    event.status = osErrorParameter;
 8015216:	2380      	movs	r3, #128	; 0x80
 8015218:	9301      	str	r3, [sp, #4]
    return event;
 801521a:	ab04      	add	r3, sp, #16
 801521c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8015220:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8015224:	4620      	mov	r0, r4
 8015226:	b004      	add	sp, #16
 8015228:	bd70      	pop	{r4, r5, r6, pc}
      event.status = osEventMessage;
 801522a:	2310      	movs	r3, #16
 801522c:	9301      	str	r3, [sp, #4]
 801522e:	e7d2      	b.n	80151d6 <osMessageGet+0x2e>

08015230 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015230:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8015234:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8015238:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801523a:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801523c:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801523e:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8015240:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8015244:	4770      	bx	lr
 8015246:	bf00      	nop

08015248 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8015248:	2300      	movs	r3, #0
 801524a:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop

08015250 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8015250:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8015252:	6802      	ldr	r2, [r0, #0]
{
 8015254:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8015256:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
 8015258:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
 801525a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801525c:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801525e:	689c      	ldr	r4, [r3, #8]
 8015260:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8015262:	6099      	str	r1, [r3, #8]
}
 8015264:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
 8015268:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 801526a:	6002      	str	r2, [r0, #0]
}
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop

08015270 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8015270:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8015272:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8015274:	1c6b      	adds	r3, r5, #1
 8015276:	d010      	beq.n	801529a <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8015278:	f100 0308 	add.w	r3, r0, #8
 801527c:	461c      	mov	r4, r3
 801527e:	685b      	ldr	r3, [r3, #4]
 8015280:	681a      	ldr	r2, [r3, #0]
 8015282:	42aa      	cmp	r2, r5
 8015284:	d9fa      	bls.n	801527c <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8015286:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8015288:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 801528a:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801528c:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801528e:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8015290:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
 8015292:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8015294:	6002      	str	r2, [r0, #0]
}
 8015296:	bc30      	pop	{r4, r5}
 8015298:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 801529a:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
 801529c:	6863      	ldr	r3, [r4, #4]
 801529e:	e7f2      	b.n	8015286 <vListInsert+0x16>

080152a0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80152a0:	6903      	ldr	r3, [r0, #16]
{
 80152a2:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80152a4:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80152a6:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
 80152aa:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
 80152ac:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80152b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80152b2:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
 80152b4:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80152b8:	bf08      	it	eq
 80152ba:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
 80152bc:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
 80152be:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80152c0:	3a01      	subs	r2, #1
 80152c2:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
 80152c4:	6818      	ldr	r0, [r3, #0]
}
 80152c6:	4770      	bx	lr

080152c8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80152c8:	b570      	push	{r4, r5, r6, lr}
 80152ca:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80152cc:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80152ce:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80152d0:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80152d2:	b92a      	cbnz	r2, 80152e0 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80152d4:	6805      	ldr	r5, [r0, #0]
 80152d6:	b365      	cbz	r5, 8015332 <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152d8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80152da:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152dc:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
 80152de:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80152e0:	b97d      	cbnz	r5, 8015302 <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80152e2:	6840      	ldr	r0, [r0, #4]
 80152e4:	f00e fdf0 	bl	8023ec8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80152e8:	6863      	ldr	r3, [r4, #4]
 80152ea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80152ec:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80152ee:	68a2      	ldr	r2, [r4, #8]
 80152f0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80152f2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80152f4:	d319      	bcc.n	801532a <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80152f6:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152f8:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 80152fa:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80152fc:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80152fe:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015300:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015302:	68c0      	ldr	r0, [r0, #12]
 8015304:	f00e fde0 	bl	8023ec8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015308:	6c22      	ldr	r2, [r4, #64]	; 0x40
 801530a:	68e3      	ldr	r3, [r4, #12]
 801530c:	4251      	negs	r1, r2
 801530e:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015310:	6822      	ldr	r2, [r4, #0]
 8015312:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015314:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015316:	d202      	bcs.n	801531e <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8015318:	68a3      	ldr	r3, [r4, #8]
 801531a:	440b      	add	r3, r1
 801531c:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 801531e:	2d02      	cmp	r5, #2
 8015320:	d00d      	beq.n	801533e <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015322:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 8015324:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015326:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015328:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801532a:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
 801532c:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801532e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8015330:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015332:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8015334:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015336:	f001 fadb 	bl	80168f0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801533a:	60a5      	str	r5, [r4, #8]
 801533c:	e7ce      	b.n	80152dc <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801533e:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
 8015340:	f04f 0000 	mov.w	r0, #0
 8015344:	bf38      	it	cc
 8015346:	2601      	movcc	r6, #1
 8015348:	e7c8      	b.n	80152dc <prvCopyDataToQueue+0x14>
 801534a:	bf00      	nop

0801534c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801534c:	b570      	push	{r4, r5, r6, lr}
 801534e:	4605      	mov	r5, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015350:	f001 ff68 	bl	8017224 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015354:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8015358:	b25c      	sxtb	r4, r3

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801535a:	2c00      	cmp	r4, #0
 801535c:	dd14      	ble.n	8015388 <prvUnlockQueue+0x3c>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801535e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8015362:	e003      	b.n	801536c <prvUnlockQueue+0x20>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8015364:	1e63      	subs	r3, r4, #1
 8015366:	b2da      	uxtb	r2, r3
 8015368:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801536a:	b16a      	cbz	r2, 8015388 <prvUnlockQueue+0x3c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801536c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801536e:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015370:	b153      	cbz	r3, 8015388 <prvUnlockQueue+0x3c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015372:	f001 f9a5 	bl	80166c0 <xTaskRemoveFromEventList>
 8015376:	2800      	cmp	r0, #0
 8015378:	d0f4      	beq.n	8015364 <prvUnlockQueue+0x18>
						vTaskMissedYield();
 801537a:	f001 fa45 	bl	8016808 <vTaskMissedYield>
			--cTxLock;
 801537e:	1e63      	subs	r3, r4, #1
 8015380:	b2da      	uxtb	r2, r3
 8015382:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015384:	2a00      	cmp	r2, #0
 8015386:	d1f1      	bne.n	801536c <prvUnlockQueue+0x20>
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015388:	23ff      	movs	r3, #255	; 0xff
 801538a:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801538e:	f001 ff6f 	bl	8017270 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8015392:	f001 ff47 	bl	8017224 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015396:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 801539a:	b25c      	sxtb	r4, r3

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801539c:	2c00      	cmp	r4, #0
 801539e:	dd14      	ble.n	80153ca <prvUnlockQueue+0x7e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153a0:	f105 0610 	add.w	r6, r5, #16
 80153a4:	e003      	b.n	80153ae <prvUnlockQueue+0x62>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80153a6:	1e63      	subs	r3, r4, #1
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80153ac:	b16a      	cbz	r2, 80153ca <prvUnlockQueue+0x7e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153ae:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153b0:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80153b2:	b153      	cbz	r3, 80153ca <prvUnlockQueue+0x7e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80153b4:	f001 f984 	bl	80166c0 <xTaskRemoveFromEventList>
 80153b8:	2800      	cmp	r0, #0
 80153ba:	d0f4      	beq.n	80153a6 <prvUnlockQueue+0x5a>
					vTaskMissedYield();
 80153bc:	f001 fa24 	bl	8016808 <vTaskMissedYield>
				--cRxLock;
 80153c0:	1e63      	subs	r3, r4, #1
 80153c2:	b2da      	uxtb	r2, r3
 80153c4:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80153c6:	2a00      	cmp	r2, #0
 80153c8:	d1f1      	bne.n	80153ae <prvUnlockQueue+0x62>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80153ca:	23ff      	movs	r3, #255	; 0xff
 80153cc:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
}
 80153d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 80153d4:	f001 bf4c 	b.w	8017270 <vPortExitCritical>

080153d8 <xQueueGenericReset>:
{
 80153d8:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
 80153da:	b1e0      	cbz	r0, 8015416 <xQueueGenericReset+0x3e>
 80153dc:	4604      	mov	r4, r0
 80153de:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
 80153e0:	f001 ff20 	bl	8017224 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153e4:	6822      	ldr	r2, [r4, #0]
 80153e6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80153ea:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153ec:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153f0:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153f2:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153f4:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153f6:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80153f8:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80153fa:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80153fc:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80153fe:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8015400:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8015404:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8015408:	b985      	cbnz	r5, 801542c <xQueueGenericReset+0x54>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801540a:	6923      	ldr	r3, [r4, #16]
 801540c:	b9d3      	cbnz	r3, 8015444 <xQueueGenericReset+0x6c>
	taskEXIT_CRITICAL();
 801540e:	f001 ff2f 	bl	8017270 <vPortExitCritical>
}
 8015412:	2001      	movs	r0, #1
 8015414:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8015416:	f04f 0330 	mov.w	r3, #48	; 0x30
 801541a:	b672      	cpsid	i
 801541c:	f383 8811 	msr	BASEPRI, r3
 8015420:	f3bf 8f6f 	isb	sy
 8015424:	f3bf 8f4f 	dsb	sy
 8015428:	b662      	cpsie	i
	configASSERT( pxQueue );
 801542a:	e7fe      	b.n	801542a <xQueueGenericReset+0x52>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 801542c:	f104 0010 	add.w	r0, r4, #16
 8015430:	f7ff fefe 	bl	8015230 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8015434:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015438:	f7ff fefa 	bl	8015230 <vListInitialise>
	taskEXIT_CRITICAL();
 801543c:	f001 ff18 	bl	8017270 <vPortExitCritical>
}
 8015440:	2001      	movs	r0, #1
 8015442:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015444:	f104 0010 	add.w	r0, r4, #16
 8015448:	f001 f93a 	bl	80166c0 <xTaskRemoveFromEventList>
 801544c:	2800      	cmp	r0, #0
 801544e:	d0de      	beq.n	801540e <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 8015450:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015454:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015458:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801545c:	f3bf 8f4f 	dsb	sy
 8015460:	f3bf 8f6f 	isb	sy
 8015464:	e7d3      	b.n	801540e <xQueueGenericReset+0x36>
 8015466:	bf00      	nop

08015468 <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015468:	b950      	cbnz	r0, 8015480 <xQueueGenericCreateStatic+0x18>
 801546a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801546e:	b672      	cpsid	i
 8015470:	f383 8811 	msr	BASEPRI, r3
 8015474:	f3bf 8f6f 	isb	sy
 8015478:	f3bf 8f4f 	dsb	sy
 801547c:	b662      	cpsie	i
 801547e:	e7fe      	b.n	801547e <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8015480:	b17b      	cbz	r3, 80154a2 <xQueueGenericCreateStatic+0x3a>
	{
 8015482:	b510      	push	{r4, lr}
 8015484:	460c      	mov	r4, r1
 8015486:	b084      	sub	sp, #16
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8015488:	b33a      	cbz	r2, 80154da <xQueueGenericCreateStatic+0x72>
 801548a:	b9a9      	cbnz	r1, 80154b8 <xQueueGenericCreateStatic+0x50>
 801548c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015490:	b672      	cpsid	i
 8015492:	f383 8811 	msr	BASEPRI, r3
 8015496:	f3bf 8f6f 	isb	sy
 801549a:	f3bf 8f4f 	dsb	sy
 801549e:	b662      	cpsie	i
 80154a0:	e7fe      	b.n	80154a0 <xQueueGenericCreateStatic+0x38>
 80154a2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154a6:	b672      	cpsid	i
 80154a8:	f383 8811 	msr	BASEPRI, r3
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f3bf 8f4f 	dsb	sy
 80154b4:	b662      	cpsie	i
		configASSERT( pxStaticQueue != NULL );
 80154b6:	e7fe      	b.n	80154b6 <xQueueGenericCreateStatic+0x4e>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80154b8:	b17a      	cbz	r2, 80154da <xQueueGenericCreateStatic+0x72>
			volatile size_t xSize = sizeof( StaticQueue_t );
 80154ba:	2148      	movs	r1, #72	; 0x48
 80154bc:	9103      	str	r1, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 80154be:	9903      	ldr	r1, [sp, #12]
 80154c0:	2948      	cmp	r1, #72	; 0x48
 80154c2:	d017      	beq.n	80154f4 <xQueueGenericCreateStatic+0x8c>
 80154c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154c8:	b672      	cpsid	i
 80154ca:	f383 8811 	msr	BASEPRI, r3
 80154ce:	f3bf 8f6f 	isb	sy
 80154d2:	f3bf 8f4f 	dsb	sy
 80154d6:	b662      	cpsie	i
 80154d8:	e7fe      	b.n	80154d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80154da:	2c00      	cmp	r4, #0
 80154dc:	d0ed      	beq.n	80154ba <xQueueGenericCreateStatic+0x52>
 80154de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80154e2:	b672      	cpsid	i
 80154e4:	f383 8811 	msr	BASEPRI, r3
 80154e8:	f3bf 8f6f 	isb	sy
 80154ec:	f3bf 8f4f 	dsb	sy
 80154f0:	b662      	cpsie	i
 80154f2:	e7fe      	b.n	80154f2 <xQueueGenericCreateStatic+0x8a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80154f4:	2c00      	cmp	r4, #0
 80154f6:	bf08      	it	eq
 80154f8:	461a      	moveq	r2, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80154fa:	2101      	movs	r1, #1
	pxNewQueue->uxLength = uxQueueLength;
 80154fc:	63d8      	str	r0, [r3, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80154fe:	4618      	mov	r0, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8015500:	f883 1046 	strb.w	r1, [r3, #70]	; 0x46
 8015504:	601a      	str	r2, [r3, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 8015506:	641c      	str	r4, [r3, #64]	; 0x40
 8015508:	9301      	str	r3, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801550a:	9a03      	ldr	r2, [sp, #12]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801550c:	f7ff ff64 	bl	80153d8 <xQueueGenericReset>
	}
 8015510:	9b01      	ldr	r3, [sp, #4]
 8015512:	4618      	mov	r0, r3
 8015514:	b004      	add	sp, #16
 8015516:	bd10      	pop	{r4, pc}

08015518 <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8015518:	b950      	cbnz	r0, 8015530 <xQueueGenericCreate+0x18>
 801551a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801551e:	b672      	cpsid	i
 8015520:	f383 8811 	msr	BASEPRI, r3
 8015524:	f3bf 8f6f 	isb	sy
 8015528:	f3bf 8f4f 	dsb	sy
 801552c:	b662      	cpsie	i
 801552e:	e7fe      	b.n	801552e <xQueueGenericCreate+0x16>
	{
 8015530:	b570      	push	{r4, r5, r6, lr}
 8015532:	4605      	mov	r5, r0
 8015534:	460e      	mov	r6, r1
		if( uxItemSize == ( UBaseType_t ) 0 )
 8015536:	b979      	cbnz	r1, 8015558 <xQueueGenericCreate+0x40>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015538:	2048      	movs	r0, #72	; 0x48
 801553a:	f001 ffdd 	bl	80174f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 801553e:	4604      	mov	r4, r0
 8015540:	b1c0      	cbz	r0, 8015574 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015542:	f884 6046 	strb.w	r6, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015546:	6024      	str	r4, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015548:	2101      	movs	r1, #1
 801554a:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 801554c:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015550:	f7ff ff42 	bl	80153d8 <xQueueGenericReset>
	}
 8015554:	4620      	mov	r0, r4
 8015556:	bd70      	pop	{r4, r5, r6, pc}
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015558:	fb01 f000 	mul.w	r0, r1, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801555c:	3048      	adds	r0, #72	; 0x48
 801555e:	f001 ffcb 	bl	80174f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015562:	4604      	mov	r4, r0
 8015564:	b130      	cbz	r0, 8015574 <xQueueGenericCreate+0x5c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015566:	2200      	movs	r2, #0
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8015568:	f100 0348 	add.w	r3, r0, #72	; 0x48
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801556c:	f880 2046 	strb.w	r2, [r0, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8015570:	6003      	str	r3, [r0, #0]
 8015572:	e7e9      	b.n	8015548 <xQueueGenericCreate+0x30>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8015574:	2400      	movs	r4, #0
	}
 8015576:	4620      	mov	r0, r4
 8015578:	bd70      	pop	{r4, r5, r6, pc}
 801557a:	bf00      	nop

0801557c <xQueueGenericSend>:
{
 801557c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015580:	b085      	sub	sp, #20
 8015582:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8015584:	2800      	cmp	r0, #0
 8015586:	f000 8083 	beq.w	8015690 <xQueueGenericSend+0x114>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801558a:	460f      	mov	r7, r1
 801558c:	4604      	mov	r4, r0
 801558e:	461e      	mov	r6, r3
 8015590:	2900      	cmp	r1, #0
 8015592:	d06b      	beq.n	801566c <xQueueGenericSend+0xf0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8015594:	2e02      	cmp	r6, #2
 8015596:	d10d      	bne.n	80155b4 <xQueueGenericSend+0x38>
 8015598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801559a:	2b01      	cmp	r3, #1
 801559c:	d00a      	beq.n	80155b4 <xQueueGenericSend+0x38>
 801559e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80155a2:	b672      	cpsid	i
 80155a4:	f383 8811 	msr	BASEPRI, r3
 80155a8:	f3bf 8f6f 	isb	sy
 80155ac:	f3bf 8f4f 	dsb	sy
 80155b0:	b662      	cpsie	i
 80155b2:	e7fe      	b.n	80155b2 <xQueueGenericSend+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80155b4:	f001 f934 	bl	8016820 <xTaskGetSchedulerState>
 80155b8:	2800      	cmp	r0, #0
 80155ba:	d074      	beq.n	80156a6 <xQueueGenericSend+0x12a>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155bc:	f1a6 0802 	sub.w	r8, r6, #2
 80155c0:	2500      	movs	r5, #0
 80155c2:	fab8 f888 	clz	r8, r8
		prvLockQueue( pxQueue );
 80155c6:	46a9      	mov	r9, r5
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155c8:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80155cc:	e007      	b.n	80155de <xQueueGenericSend+0x62>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80155ce:	f001 fe4f 	bl	8017270 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80155d2:	4620      	mov	r0, r4
 80155d4:	f7ff feba 	bl	801534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80155d8:	f000 ffe2 	bl	80165a0 <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155dc:	2501      	movs	r5, #1
		taskENTER_CRITICAL();
 80155de:	f001 fe21 	bl	8017224 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80155e2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80155e4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80155e6:	4290      	cmp	r0, r2
 80155e8:	d36b      	bcc.n	80156c2 <xQueueGenericSend+0x146>
 80155ea:	f1b8 0f00 	cmp.w	r8, #0
 80155ee:	d168      	bne.n	80156c2 <xQueueGenericSend+0x146>
				if( xTicksToWait == ( TickType_t ) 0 )
 80155f0:	9b01      	ldr	r3, [sp, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d07d      	beq.n	80156f2 <xQueueGenericSend+0x176>
				else if( xEntryTimeSet == pdFALSE )
 80155f6:	2d00      	cmp	r5, #0
 80155f8:	d046      	beq.n	8015688 <xQueueGenericSend+0x10c>
		taskEXIT_CRITICAL();
 80155fa:	f001 fe39 	bl	8017270 <vPortExitCritical>
		vTaskSuspendAll();
 80155fe:	f000 fe73 	bl	80162e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015602:	f001 fe0f 	bl	8017224 <vPortEnterCritical>
 8015606:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801560a:	2bff      	cmp	r3, #255	; 0xff
 801560c:	d101      	bne.n	8015612 <xQueueGenericSend+0x96>
 801560e:	f884 9044 	strb.w	r9, [r4, #68]	; 0x44
 8015612:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015616:	2bff      	cmp	r3, #255	; 0xff
 8015618:	d101      	bne.n	801561e <xQueueGenericSend+0xa2>
 801561a:	f884 9045 	strb.w	r9, [r4, #69]	; 0x45
 801561e:	f001 fe27 	bl	8017270 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015622:	a901      	add	r1, sp, #4
 8015624:	a802      	add	r0, sp, #8
 8015626:	f001 f8a3 	bl	8016770 <xTaskCheckForTimeOut>
 801562a:	2800      	cmp	r0, #0
 801562c:	d165      	bne.n	80156fa <xQueueGenericSend+0x17e>
	taskENTER_CRITICAL();
 801562e:	f001 fdf9 	bl	8017224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8015632:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8015634:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015636:	429a      	cmp	r2, r3
 8015638:	d1c9      	bne.n	80155ce <xQueueGenericSend+0x52>
	taskEXIT_CRITICAL();
 801563a:	f001 fe19 	bl	8017270 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 801563e:	9901      	ldr	r1, [sp, #4]
 8015640:	f104 0010 	add.w	r0, r4, #16
 8015644:	f001 f800 	bl	8016648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015648:	4620      	mov	r0, r4
 801564a:	f7ff fe7f 	bl	801534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801564e:	f000 ffa7 	bl	80165a0 <xTaskResumeAll>
 8015652:	2800      	cmp	r0, #0
 8015654:	d1c2      	bne.n	80155dc <xQueueGenericSend+0x60>
					portYIELD_WITHIN_API();
 8015656:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801565a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801565e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015662:	f3bf 8f4f 	dsb	sy
 8015666:	f3bf 8f6f 	isb	sy
 801566a:	e7b7      	b.n	80155dc <xQueueGenericSend+0x60>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801566c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 801566e:	2b00      	cmp	r3, #0
 8015670:	d090      	beq.n	8015594 <xQueueGenericSend+0x18>
 8015672:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015676:	b672      	cpsid	i
 8015678:	f383 8811 	msr	BASEPRI, r3
 801567c:	f3bf 8f6f 	isb	sy
 8015680:	f3bf 8f4f 	dsb	sy
 8015684:	b662      	cpsie	i
 8015686:	e7fe      	b.n	8015686 <xQueueGenericSend+0x10a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015688:	a802      	add	r0, sp, #8
 801568a:	f001 f865 	bl	8016758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801568e:	e7b4      	b.n	80155fa <xQueueGenericSend+0x7e>
 8015690:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015694:	b672      	cpsid	i
 8015696:	f383 8811 	msr	BASEPRI, r3
 801569a:	f3bf 8f6f 	isb	sy
 801569e:	f3bf 8f4f 	dsb	sy
 80156a2:	b662      	cpsie	i
	configASSERT( pxQueue );
 80156a4:	e7fe      	b.n	80156a4 <xQueueGenericSend+0x128>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80156a6:	9b01      	ldr	r3, [sp, #4]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d087      	beq.n	80155bc <xQueueGenericSend+0x40>
 80156ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80156b0:	b672      	cpsid	i
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	b662      	cpsie	i
 80156c0:	e7fe      	b.n	80156c0 <xQueueGenericSend+0x144>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80156c2:	4632      	mov	r2, r6
 80156c4:	4639      	mov	r1, r7
 80156c6:	4620      	mov	r0, r4
 80156c8:	f7ff fdfe 	bl	80152c8 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80156cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80156ce:	b9db      	cbnz	r3, 8015708 <xQueueGenericSend+0x18c>
					else if( xYieldRequired != pdFALSE )
 80156d0:	b148      	cbz	r0, 80156e6 <xQueueGenericSend+0x16a>
						queueYIELD_IF_USING_PREEMPTION();
 80156d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80156d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156da:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80156de:	f3bf 8f4f 	dsb	sy
 80156e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80156e6:	f001 fdc3 	bl	8017270 <vPortExitCritical>
				return pdPASS;
 80156ea:	2001      	movs	r0, #1
}
 80156ec:	b005      	add	sp, #20
 80156ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					taskEXIT_CRITICAL();
 80156f2:	f001 fdbd 	bl	8017270 <vPortExitCritical>
					return errQUEUE_FULL;
 80156f6:	4640      	mov	r0, r8
 80156f8:	e7f8      	b.n	80156ec <xQueueGenericSend+0x170>
			prvUnlockQueue( pxQueue );
 80156fa:	4620      	mov	r0, r4
 80156fc:	f7ff fe26 	bl	801534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015700:	f000 ff4e 	bl	80165a0 <xTaskResumeAll>
			return errQUEUE_FULL;
 8015704:	2000      	movs	r0, #0
 8015706:	e7f1      	b.n	80156ec <xQueueGenericSend+0x170>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015708:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801570c:	f000 ffd8 	bl	80166c0 <xTaskRemoveFromEventList>
 8015710:	2800      	cmp	r0, #0
 8015712:	d0e8      	beq.n	80156e6 <xQueueGenericSend+0x16a>
 8015714:	e7dd      	b.n	80156d2 <xQueueGenericSend+0x156>
 8015716:	bf00      	nop

08015718 <xQueueCreateMutexStatic>:
	{
 8015718:	b510      	push	{r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801571a:	2200      	movs	r2, #0
	{
 801571c:	4604      	mov	r4, r0
 801571e:	b082      	sub	sp, #8
 8015720:	460b      	mov	r3, r1
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8015722:	2001      	movs	r0, #1
 8015724:	4611      	mov	r1, r2
 8015726:	9400      	str	r4, [sp, #0]
 8015728:	f7ff fe9e 	bl	8015468 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 801572c:	4604      	mov	r4, r0
 801572e:	b138      	cbz	r0, 8015740 <xQueueCreateMutexStatic+0x28>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015730:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015732:	461a      	mov	r2, r3
 8015734:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8015736:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015738:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801573a:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 801573c:	f7ff ff1e 	bl	801557c <xQueueGenericSend>
	}
 8015740:	4620      	mov	r0, r4
 8015742:	b002      	add	sp, #8
 8015744:	bd10      	pop	{r4, pc}
 8015746:	bf00      	nop

08015748 <xQueueCreateMutex>:
	{
 8015748:	b538      	push	{r3, r4, r5, lr}
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 801574a:	2048      	movs	r0, #72	; 0x48
 801574c:	f001 fed4 	bl	80174f8 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8015750:	4604      	mov	r4, r0
 8015752:	b188      	cbz	r0, 8015778 <xQueueCreateMutex+0x30>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8015754:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 8015756:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8015758:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801575a:	f880 5046 	strb.w	r5, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 801575e:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8015762:	f7ff fe39 	bl	80153d8 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015766:	462b      	mov	r3, r5
 8015768:	462a      	mov	r2, r5
 801576a:	4629      	mov	r1, r5
 801576c:	4620      	mov	r0, r4
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 801576e:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8015770:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8015772:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8015774:	f7ff ff02 	bl	801557c <xQueueGenericSend>
	}
 8015778:	4620      	mov	r0, r4
 801577a:	bd38      	pop	{r3, r4, r5, pc}

0801577c <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
 801577c:	2800      	cmp	r0, #0
 801577e:	d053      	beq.n	8015828 <xQueueGenericSendFromISR+0xac>
{
 8015780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015784:	460e      	mov	r6, r1
 8015786:	4604      	mov	r4, r0
 8015788:	4617      	mov	r7, r2
 801578a:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801578c:	b359      	cbz	r1, 80157e6 <xQueueGenericSendFromISR+0x6a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801578e:	2d02      	cmp	r5, #2
 8015790:	d10d      	bne.n	80157ae <xQueueGenericSendFromISR+0x32>
 8015792:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8015794:	2b01      	cmp	r3, #1
 8015796:	d00a      	beq.n	80157ae <xQueueGenericSendFromISR+0x32>
 8015798:	f04f 0330 	mov.w	r3, #48	; 0x30
 801579c:	b672      	cpsid	i
 801579e:	f383 8811 	msr	BASEPRI, r3
 80157a2:	f3bf 8f6f 	isb	sy
 80157a6:	f3bf 8f4f 	dsb	sy
 80157aa:	b662      	cpsie	i
 80157ac:	e7fe      	b.n	80157ac <xQueueGenericSendFromISR+0x30>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80157ae:	f001 fe3f 	bl	8017430 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80157b2:	f3ef 8811 	mrs	r8, BASEPRI
 80157b6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80157ba:	b672      	cpsid	i
 80157bc:	f383 8811 	msr	BASEPRI, r3
 80157c0:	f3bf 8f6f 	isb	sy
 80157c4:	f3bf 8f4f 	dsb	sy
 80157c8:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80157ca:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80157cc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80157ce:	429a      	cmp	r2, r3
 80157d0:	d317      	bcc.n	8015802 <xQueueGenericSendFromISR+0x86>
 80157d2:	f1a5 0002 	sub.w	r0, r5, #2
 80157d6:	fab0 f080 	clz	r0, r0
 80157da:	0940      	lsrs	r0, r0, #5
 80157dc:	b988      	cbnz	r0, 8015802 <xQueueGenericSendFromISR+0x86>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80157de:	f388 8811 	msr	BASEPRI, r8
}
 80157e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80157e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d0d0      	beq.n	801578e <xQueueGenericSendFromISR+0x12>
	__asm volatile
 80157ec:	f04f 0330 	mov.w	r3, #48	; 0x30
 80157f0:	b672      	cpsid	i
 80157f2:	f383 8811 	msr	BASEPRI, r3
 80157f6:	f3bf 8f6f 	isb	sy
 80157fa:	f3bf 8f4f 	dsb	sy
 80157fe:	b662      	cpsie	i
 8015800:	e7fe      	b.n	8015800 <xQueueGenericSendFromISR+0x84>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015802:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
 8015804:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8015808:	4631      	mov	r1, r6
 801580a:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 801580c:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801580e:	f7ff fd5b 	bl	80152c8 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8015812:	1c6b      	adds	r3, r5, #1
 8015814:	d013      	beq.n	801583e <xQueueGenericSendFromISR+0xc2>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8015816:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
 8015818:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801581a:	b25b      	sxtb	r3, r3
 801581c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
 8015820:	f388 8811 	msr	BASEPRI, r8
}
 8015824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 8015828:	f04f 0330 	mov.w	r3, #48	; 0x30
 801582c:	b672      	cpsid	i
 801582e:	f383 8811 	msr	BASEPRI, r3
 8015832:	f3bf 8f6f 	isb	sy
 8015836:	f3bf 8f4f 	dsb	sy
 801583a:	b662      	cpsie	i
	configASSERT( pxQueue );
 801583c:	e7fe      	b.n	801583c <xQueueGenericSendFromISR+0xc0>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801583e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015840:	b90b      	cbnz	r3, 8015846 <xQueueGenericSendFromISR+0xca>
			xReturn = pdPASS;
 8015842:	2001      	movs	r0, #1
 8015844:	e7cb      	b.n	80157de <xQueueGenericSendFromISR+0x62>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015846:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801584a:	f000 ff39 	bl	80166c0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801584e:	2800      	cmp	r0, #0
 8015850:	d0f7      	beq.n	8015842 <xQueueGenericSendFromISR+0xc6>
 8015852:	2f00      	cmp	r7, #0
 8015854:	d0f5      	beq.n	8015842 <xQueueGenericSendFromISR+0xc6>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015856:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015858:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 801585a:	603b      	str	r3, [r7, #0]
 801585c:	e7bf      	b.n	80157de <xQueueGenericSendFromISR+0x62>
 801585e:	bf00      	nop

08015860 <xQueueGiveFromISR>:
	configASSERT( pxQueue );
 8015860:	b380      	cbz	r0, 80158c4 <xQueueGiveFromISR+0x64>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015862:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 8015864:	b570      	push	{r4, r5, r6, lr}
 8015866:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
 8015868:	b153      	cbz	r3, 8015880 <xQueueGiveFromISR+0x20>
 801586a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801586e:	b672      	cpsid	i
 8015870:	f383 8811 	msr	BASEPRI, r3
 8015874:	f3bf 8f6f 	isb	sy
 8015878:	f3bf 8f4f 	dsb	sy
 801587c:	b662      	cpsie	i
 801587e:	e7fe      	b.n	801587e <xQueueGiveFromISR+0x1e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8015880:	6803      	ldr	r3, [r0, #0]
 8015882:	460d      	mov	r5, r1
 8015884:	b34b      	cbz	r3, 80158da <xQueueGiveFromISR+0x7a>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015886:	f001 fdd3 	bl	8017430 <vPortValidateInterruptPriority>
	__asm volatile
 801588a:	f3ef 8611 	mrs	r6, BASEPRI
 801588e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015892:	b672      	cpsid	i
 8015894:	f383 8811 	msr	BASEPRI, r3
 8015898:	f3bf 8f6f 	isb	sy
 801589c:	f3bf 8f4f 	dsb	sy
 80158a0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80158a2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 80158a4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80158a6:	429a      	cmp	r2, r3
 80158a8:	d925      	bls.n	80158f6 <xQueueGiveFromISR+0x96>
			const int8_t cTxLock = pxQueue->cTxLock;
 80158aa:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80158ae:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
 80158b0:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80158b2:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
 80158b4:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
 80158b6:	d022      	beq.n	80158fe <xQueueGiveFromISR+0x9e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158b8:	3301      	adds	r3, #1
			xReturn = pdPASS;
 80158ba:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80158bc:	b25b      	sxtb	r3, r3
 80158be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80158c2:	e019      	b.n	80158f8 <xQueueGiveFromISR+0x98>
	__asm volatile
 80158c4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80158c8:	b672      	cpsid	i
 80158ca:	f383 8811 	msr	BASEPRI, r3
 80158ce:	f3bf 8f6f 	isb	sy
 80158d2:	f3bf 8f4f 	dsb	sy
 80158d6:	b662      	cpsie	i
	configASSERT( pxQueue );
 80158d8:	e7fe      	b.n	80158d8 <xQueueGiveFromISR+0x78>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80158da:	6883      	ldr	r3, [r0, #8]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d0d2      	beq.n	8015886 <xQueueGiveFromISR+0x26>
 80158e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80158e4:	b672      	cpsid	i
 80158e6:	f383 8811 	msr	BASEPRI, r3
 80158ea:	f3bf 8f6f 	isb	sy
 80158ee:	f3bf 8f4f 	dsb	sy
 80158f2:	b662      	cpsie	i
 80158f4:	e7fe      	b.n	80158f4 <xQueueGiveFromISR+0x94>
			xReturn = errQUEUE_FULL;
 80158f6:	2000      	movs	r0, #0
	__asm volatile
 80158f8:	f386 8811 	msr	BASEPRI, r6
}
 80158fc:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80158fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8015900:	b90b      	cbnz	r3, 8015906 <xQueueGiveFromISR+0xa6>
			xReturn = pdPASS;
 8015902:	2001      	movs	r0, #1
 8015904:	e7f8      	b.n	80158f8 <xQueueGiveFromISR+0x98>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8015906:	f104 0024 	add.w	r0, r4, #36	; 0x24
 801590a:	f000 fed9 	bl	80166c0 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
 801590e:	2d00      	cmp	r5, #0
 8015910:	d0f7      	beq.n	8015902 <xQueueGiveFromISR+0xa2>
 8015912:	2800      	cmp	r0, #0
 8015914:	d0f5      	beq.n	8015902 <xQueueGiveFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8015916:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015918:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
 801591a:	602b      	str	r3, [r5, #0]
 801591c:	e7ec      	b.n	80158f8 <xQueueGiveFromISR+0x98>
 801591e:	bf00      	nop

08015920 <xQueueReceive>:
{
 8015920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015924:	b085      	sub	sp, #20
 8015926:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015928:	2800      	cmp	r0, #0
 801592a:	f000 80a4 	beq.w	8015a76 <xQueueReceive+0x156>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801592e:	460d      	mov	r5, r1
 8015930:	4604      	mov	r4, r0
 8015932:	2900      	cmp	r1, #0
 8015934:	d047      	beq.n	80159c6 <xQueueReceive+0xa6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015936:	f000 ff73 	bl	8016820 <xTaskGetSchedulerState>
 801593a:	2800      	cmp	r0, #0
 801593c:	d051      	beq.n	80159e2 <xQueueReceive+0xc2>
		taskENTER_CRITICAL();
 801593e:	f001 fc71 	bl	8017224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015942:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015944:	2e00      	cmp	r6, #0
 8015946:	d16b      	bne.n	8015a20 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015948:	9b01      	ldr	r3, [sp, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d035      	beq.n	80159ba <xQueueReceive+0x9a>
		prvLockQueue( pxQueue );
 801594e:	4637      	mov	r7, r6
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015950:	f104 0824 	add.w	r8, r4, #36	; 0x24
					portYIELD_WITHIN_API();
 8015954:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015958:	a802      	add	r0, sp, #8
 801595a:	f000 fefd 	bl	8016758 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 801595e:	f001 fc87 	bl	8017270 <vPortExitCritical>
		vTaskSuspendAll();
 8015962:	f000 fcc1 	bl	80162e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015966:	f001 fc5d 	bl	8017224 <vPortEnterCritical>
 801596a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 801596e:	2bff      	cmp	r3, #255	; 0xff
 8015970:	d101      	bne.n	8015976 <xQueueReceive+0x56>
 8015972:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015976:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801597a:	2bff      	cmp	r3, #255	; 0xff
 801597c:	d101      	bne.n	8015982 <xQueueReceive+0x62>
 801597e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015982:	f001 fc75 	bl	8017270 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015986:	a901      	add	r1, sp, #4
 8015988:	a802      	add	r0, sp, #8
 801598a:	f000 fef1 	bl	8016770 <xTaskCheckForTimeOut>
 801598e:	2800      	cmp	r0, #0
 8015990:	d135      	bne.n	80159fe <xQueueReceive+0xde>
	taskENTER_CRITICAL();
 8015992:	f001 fc47 	bl	8017224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015996:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015998:	2b00      	cmp	r3, #0
 801599a:	d056      	beq.n	8015a4a <xQueueReceive+0x12a>
	taskEXIT_CRITICAL();
 801599c:	f001 fc68 	bl	8017270 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80159a0:	4620      	mov	r0, r4
 80159a2:	f7ff fcd3 	bl	801534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80159a6:	f000 fdfb 	bl	80165a0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 80159aa:	f001 fc3b 	bl	8017224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80159ae:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80159b0:	2e00      	cmp	r6, #0
 80159b2:	d135      	bne.n	8015a20 <xQueueReceive+0x100>
				if( xTicksToWait == ( TickType_t ) 0 )
 80159b4:	9b01      	ldr	r3, [sp, #4]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d1d1      	bne.n	801595e <xQueueReceive+0x3e>
					taskEXIT_CRITICAL();
 80159ba:	f001 fc59 	bl	8017270 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80159be:	2000      	movs	r0, #0
}
 80159c0:	b005      	add	sp, #20
 80159c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80159c6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d0b4      	beq.n	8015936 <xQueueReceive+0x16>
	__asm volatile
 80159cc:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159d0:	b672      	cpsid	i
 80159d2:	f383 8811 	msr	BASEPRI, r3
 80159d6:	f3bf 8f6f 	isb	sy
 80159da:	f3bf 8f4f 	dsb	sy
 80159de:	b662      	cpsie	i
 80159e0:	e7fe      	b.n	80159e0 <xQueueReceive+0xc0>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80159e2:	9b01      	ldr	r3, [sp, #4]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d0aa      	beq.n	801593e <xQueueReceive+0x1e>
 80159e8:	f04f 0330 	mov.w	r3, #48	; 0x30
 80159ec:	b672      	cpsid	i
 80159ee:	f383 8811 	msr	BASEPRI, r3
 80159f2:	f3bf 8f6f 	isb	sy
 80159f6:	f3bf 8f4f 	dsb	sy
 80159fa:	b662      	cpsie	i
 80159fc:	e7fe      	b.n	80159fc <xQueueReceive+0xdc>
			prvUnlockQueue( pxQueue );
 80159fe:	4620      	mov	r0, r4
 8015a00:	f7ff fca4 	bl	801534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015a04:	f000 fdcc 	bl	80165a0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015a08:	f001 fc0c 	bl	8017224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015a0c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015a0e:	2b00      	cmp	r3, #0
 8015a10:	d0d3      	beq.n	80159ba <xQueueReceive+0x9a>
	taskEXIT_CRITICAL();
 8015a12:	f001 fc2d 	bl	8017270 <vPortExitCritical>
		taskENTER_CRITICAL();
 8015a16:	f001 fc05 	bl	8017224 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015a1a:	6ba6      	ldr	r6, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015a1c:	2e00      	cmp	r6, #0
 8015a1e:	d0c9      	beq.n	80159b4 <xQueueReceive+0x94>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015a20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8015a22:	b152      	cbz	r2, 8015a3a <xQueueReceive+0x11a>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a24:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015a26:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a28:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015a2a:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015a2c:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015a2e:	d301      	bcc.n	8015a34 <xQueueReceive+0x114>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015a30:	6821      	ldr	r1, [r4, #0]
 8015a32:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015a34:	4628      	mov	r0, r5
 8015a36:	f00e fa47 	bl	8023ec8 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015a3a:	3e01      	subs	r6, #1
 8015a3c:	63a6      	str	r6, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015a3e:	6923      	ldr	r3, [r4, #16]
 8015a40:	bb23      	cbnz	r3, 8015a8c <xQueueReceive+0x16c>
				taskEXIT_CRITICAL();
 8015a42:	f001 fc15 	bl	8017270 <vPortExitCritical>
				return pdPASS;
 8015a46:	2001      	movs	r0, #1
 8015a48:	e7ba      	b.n	80159c0 <xQueueReceive+0xa0>
	taskEXIT_CRITICAL();
 8015a4a:	f001 fc11 	bl	8017270 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015a4e:	9901      	ldr	r1, [sp, #4]
 8015a50:	4640      	mov	r0, r8
 8015a52:	f000 fdf9 	bl	8016648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015a56:	4620      	mov	r0, r4
 8015a58:	f7ff fc78 	bl	801534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015a5c:	f000 fda0 	bl	80165a0 <xTaskResumeAll>
 8015a60:	2800      	cmp	r0, #0
 8015a62:	d1d8      	bne.n	8015a16 <xQueueReceive+0xf6>
					portYIELD_WITHIN_API();
 8015a64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015a68:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8015a6c:	f3bf 8f4f 	dsb	sy
 8015a70:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
 8015a74:	e7cf      	b.n	8015a16 <xQueueReceive+0xf6>
 8015a76:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015a7a:	b672      	cpsid	i
 8015a7c:	f383 8811 	msr	BASEPRI, r3
 8015a80:	f3bf 8f6f 	isb	sy
 8015a84:	f3bf 8f4f 	dsb	sy
 8015a88:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015a8a:	e7fe      	b.n	8015a8a <xQueueReceive+0x16a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015a8c:	f104 0010 	add.w	r0, r4, #16
 8015a90:	f000 fe16 	bl	80166c0 <xTaskRemoveFromEventList>
 8015a94:	2800      	cmp	r0, #0
 8015a96:	d0d4      	beq.n	8015a42 <xQueueReceive+0x122>
						queueYIELD_IF_USING_PREEMPTION();
 8015a98:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015a9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015aa0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015aa4:	f3bf 8f4f 	dsb	sy
 8015aa8:	f3bf 8f6f 	isb	sy
 8015aac:	e7c9      	b.n	8015a42 <xQueueReceive+0x122>
 8015aae:	bf00      	nop

08015ab0 <xQueueSemaphoreTake>:
{
 8015ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8015ab6:	2800      	cmp	r0, #0
 8015ab8:	d057      	beq.n	8015b6a <xQueueSemaphoreTake+0xba>
	configASSERT( pxQueue->uxItemSize == 0 );
 8015aba:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8015abc:	4604      	mov	r4, r0
 8015abe:	b156      	cbz	r6, 8015ad6 <xQueueSemaphoreTake+0x26>
 8015ac0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015ac4:	b672      	cpsid	i
 8015ac6:	f383 8811 	msr	BASEPRI, r3
 8015aca:	f3bf 8f6f 	isb	sy
 8015ace:	f3bf 8f4f 	dsb	sy
 8015ad2:	b662      	cpsie	i
 8015ad4:	e7fe      	b.n	8015ad4 <xQueueSemaphoreTake+0x24>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015ad6:	f000 fea3 	bl	8016820 <xTaskGetSchedulerState>
 8015ada:	4605      	mov	r5, r0
 8015adc:	2800      	cmp	r0, #0
 8015ade:	d04f      	beq.n	8015b80 <xQueueSemaphoreTake+0xd0>
 8015ae0:	4635      	mov	r5, r6
		taskENTER_CRITICAL();
 8015ae2:	f001 fb9f 	bl	8017224 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015ae6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		prvLockQueue( pxQueue );
 8015ae8:	2700      	movs	r7, #0
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015aea:	bb8b      	cbnz	r3, 8015b50 <xQueueSemaphoreTake+0xa0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8015aec:	9b01      	ldr	r3, [sp, #4]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	f000 809f 	beq.w	8015c32 <xQueueSemaphoreTake+0x182>
				else if( xEntryTimeSet == pdFALSE )
 8015af4:	2d00      	cmp	r5, #0
 8015af6:	d05d      	beq.n	8015bb4 <xQueueSemaphoreTake+0x104>
		taskEXIT_CRITICAL();
 8015af8:	f001 fbba 	bl	8017270 <vPortExitCritical>
		vTaskSuspendAll();
 8015afc:	f000 fbf4 	bl	80162e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8015b00:	f001 fb90 	bl	8017224 <vPortEnterCritical>
 8015b04:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015b08:	2bff      	cmp	r3, #255	; 0xff
 8015b0a:	d101      	bne.n	8015b10 <xQueueSemaphoreTake+0x60>
 8015b0c:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8015b10:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015b14:	2bff      	cmp	r3, #255	; 0xff
 8015b16:	d101      	bne.n	8015b1c <xQueueSemaphoreTake+0x6c>
 8015b18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015b1c:	f001 fba8 	bl	8017270 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015b20:	a901      	add	r1, sp, #4
 8015b22:	a802      	add	r0, sp, #8
 8015b24:	f000 fe24 	bl	8016770 <xTaskCheckForTimeOut>
 8015b28:	2800      	cmp	r0, #0
 8015b2a:	d137      	bne.n	8015b9c <xQueueSemaphoreTake+0xec>
	taskENTER_CRITICAL();
 8015b2c:	f001 fb7a 	bl	8017224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015b30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d042      	beq.n	8015bbc <xQueueSemaphoreTake+0x10c>
	taskEXIT_CRITICAL();
 8015b36:	f001 fb9b 	bl	8017270 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8015b3a:	4620      	mov	r0, r4
 8015b3c:	f7ff fc06 	bl	801534c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015b40:	f000 fd2e 	bl	80165a0 <xTaskResumeAll>
		taskENTER_CRITICAL();
 8015b44:	f001 fb6e 	bl	8017224 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015b48:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015b4a:	2501      	movs	r5, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d0cd      	beq.n	8015aec <xQueueSemaphoreTake+0x3c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015b50:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b52:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015b54:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015b56:	2a00      	cmp	r2, #0
 8015b58:	f000 8089 	beq.w	8015c6e <xQueueSemaphoreTake+0x1be>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015b5c:	6923      	ldr	r3, [r4, #16]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d174      	bne.n	8015c4c <xQueueSemaphoreTake+0x19c>
				return pdPASS;
 8015b62:	2601      	movs	r6, #1
				taskEXIT_CRITICAL();
 8015b64:	f001 fb84 	bl	8017270 <vPortExitCritical>
				return pdPASS;
 8015b68:	e046      	b.n	8015bf8 <xQueueSemaphoreTake+0x148>
 8015b6a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b6e:	b672      	cpsid	i
 8015b70:	f383 8811 	msr	BASEPRI, r3
 8015b74:	f3bf 8f6f 	isb	sy
 8015b78:	f3bf 8f4f 	dsb	sy
 8015b7c:	b662      	cpsie	i
	configASSERT( ( pxQueue ) );
 8015b7e:	e7fe      	b.n	8015b7e <xQueueSemaphoreTake+0xce>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015b80:	9b01      	ldr	r3, [sp, #4]
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	d03b      	beq.n	8015bfe <xQueueSemaphoreTake+0x14e>
 8015b86:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015b8a:	b672      	cpsid	i
 8015b8c:	f383 8811 	msr	BASEPRI, r3
 8015b90:	f3bf 8f6f 	isb	sy
 8015b94:	f3bf 8f4f 	dsb	sy
 8015b98:	b662      	cpsie	i
 8015b9a:	e7fe      	b.n	8015b9a <xQueueSemaphoreTake+0xea>
			prvUnlockQueue( pxQueue );
 8015b9c:	4620      	mov	r0, r4
 8015b9e:	f7ff fbd5 	bl	801534c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015ba2:	f000 fcfd 	bl	80165a0 <xTaskResumeAll>
	taskENTER_CRITICAL();
 8015ba6:	f001 fb3d 	bl	8017224 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8015baa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015bac:	b30b      	cbz	r3, 8015bf2 <xQueueSemaphoreTake+0x142>
	taskEXIT_CRITICAL();
 8015bae:	f001 fb5f 	bl	8017270 <vPortExitCritical>
	return xReturn;
 8015bb2:	e7c7      	b.n	8015b44 <xQueueSemaphoreTake+0x94>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8015bb4:	a802      	add	r0, sp, #8
 8015bb6:	f000 fdcf 	bl	8016758 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8015bba:	e79d      	b.n	8015af8 <xQueueSemaphoreTake+0x48>
	taskEXIT_CRITICAL();
 8015bbc:	f001 fb58 	bl	8017270 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015bc0:	6823      	ldr	r3, [r4, #0]
 8015bc2:	b36b      	cbz	r3, 8015c20 <xQueueSemaphoreTake+0x170>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015bc4:	9901      	ldr	r1, [sp, #4]
 8015bc6:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015bca:	f000 fd3d 	bl	8016648 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015bce:	4620      	mov	r0, r4
 8015bd0:	f7ff fbbc 	bl	801534c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015bd4:	f000 fce4 	bl	80165a0 <xTaskResumeAll>
 8015bd8:	2800      	cmp	r0, #0
 8015bda:	d1b3      	bne.n	8015b44 <xQueueSemaphoreTake+0x94>
					portYIELD_WITHIN_API();
 8015bdc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015be4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015be8:	f3bf 8f4f 	dsb	sy
 8015bec:	f3bf 8f6f 	isb	sy
 8015bf0:	e7a8      	b.n	8015b44 <xQueueSemaphoreTake+0x94>
	taskEXIT_CRITICAL();
 8015bf2:	f001 fb3d 	bl	8017270 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 8015bf6:	b926      	cbnz	r6, 8015c02 <xQueueSemaphoreTake+0x152>
}
 8015bf8:	4630      	mov	r0, r6
 8015bfa:	b005      	add	sp, #20
 8015bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015bfe:	4606      	mov	r6, r0
 8015c00:	e76f      	b.n	8015ae2 <xQueueSemaphoreTake+0x32>
						taskENTER_CRITICAL();
 8015c02:	f001 fb0f 	bl	8017224 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8015c06:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8015c08:	b119      	cbz	r1, 8015c12 <xQueueSemaphoreTake+0x162>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8015c0a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8015c0c:	6819      	ldr	r1, [r3, #0]
 8015c0e:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015c12:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
 8015c14:	2600      	movs	r6, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8015c16:	f000 fecb 	bl	80169b0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 8015c1a:	f001 fb29 	bl	8017270 <vPortExitCritical>
 8015c1e:	e7eb      	b.n	8015bf8 <xQueueSemaphoreTake+0x148>
						taskENTER_CRITICAL();
 8015c20:	f001 fb00 	bl	8017224 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015c24:	68a0      	ldr	r0, [r4, #8]
 8015c26:	f000 fe0b 	bl	8016840 <xTaskPriorityInherit>
 8015c2a:	4606      	mov	r6, r0
						taskEXIT_CRITICAL();
 8015c2c:	f001 fb20 	bl	8017270 <vPortExitCritical>
 8015c30:	e7c8      	b.n	8015bc4 <xQueueSemaphoreTake+0x114>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015c32:	2e00      	cmp	r6, #0
 8015c34:	d0f1      	beq.n	8015c1a <xQueueSemaphoreTake+0x16a>
 8015c36:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c3a:	b672      	cpsid	i
 8015c3c:	f383 8811 	msr	BASEPRI, r3
 8015c40:	f3bf 8f6f 	isb	sy
 8015c44:	f3bf 8f4f 	dsb	sy
 8015c48:	b662      	cpsie	i
 8015c4a:	e7fe      	b.n	8015c4a <xQueueSemaphoreTake+0x19a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015c4c:	f104 0010 	add.w	r0, r4, #16
 8015c50:	f000 fd36 	bl	80166c0 <xTaskRemoveFromEventList>
 8015c54:	2800      	cmp	r0, #0
 8015c56:	d084      	beq.n	8015b62 <xQueueSemaphoreTake+0xb2>
						queueYIELD_IF_USING_PREEMPTION();
 8015c58:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015c60:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015c64:	f3bf 8f4f 	dsb	sy
 8015c68:	f3bf 8f6f 	isb	sy
 8015c6c:	e779      	b.n	8015b62 <xQueueSemaphoreTake+0xb2>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015c6e:	f000 ff0d 	bl	8016a8c <pvTaskIncrementMutexHeldCount>
 8015c72:	60a0      	str	r0, [r4, #8]
 8015c74:	e772      	b.n	8015b5c <xQueueSemaphoreTake+0xac>
 8015c76:	bf00      	nop

08015c78 <xQueueReceiveFromISR>:
{
 8015c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
 8015c7c:	b330      	cbz	r0, 8015ccc <xQueueReceiveFromISR+0x54>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015c7e:	460e      	mov	r6, r1
 8015c80:	4604      	mov	r4, r0
 8015c82:	4617      	mov	r7, r2
 8015c84:	b1a1      	cbz	r1, 8015cb0 <xQueueReceiveFromISR+0x38>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015c86:	f001 fbd3 	bl	8017430 <vPortValidateInterruptPriority>
	__asm volatile
 8015c8a:	f3ef 8911 	mrs	r9, BASEPRI
 8015c8e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015c92:	b672      	cpsid	i
 8015c94:	f383 8811 	msr	BASEPRI, r3
 8015c98:	f3bf 8f6f 	isb	sy
 8015c9c:	f3bf 8f4f 	dsb	sy
 8015ca0:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015ca2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015ca4:	b9ed      	cbnz	r5, 8015ce2 <xQueueReceiveFromISR+0x6a>
			xReturn = pdFAIL;
 8015ca6:	4628      	mov	r0, r5
	__asm volatile
 8015ca8:	f389 8811 	msr	BASEPRI, r9
}
 8015cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8015cb0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d0e7      	beq.n	8015c86 <xQueueReceiveFromISR+0xe>
	__asm volatile
 8015cb6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015cba:	b672      	cpsid	i
 8015cbc:	f383 8811 	msr	BASEPRI, r3
 8015cc0:	f3bf 8f6f 	isb	sy
 8015cc4:	f3bf 8f4f 	dsb	sy
 8015cc8:	b662      	cpsie	i
 8015cca:	e7fe      	b.n	8015cca <xQueueReceiveFromISR+0x52>
 8015ccc:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015cd0:	b672      	cpsid	i
 8015cd2:	f383 8811 	msr	BASEPRI, r3
 8015cd6:	f3bf 8f6f 	isb	sy
 8015cda:	f3bf 8f4f 	dsb	sy
 8015cde:	b662      	cpsie	i
	configASSERT( pxQueue );
 8015ce0:	e7fe      	b.n	8015ce0 <xQueueReceiveFromISR+0x68>
			const int8_t cRxLock = pxQueue->cRxLock;
 8015ce2:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015ce6:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
 8015ce8:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8015cec:	b142      	cbz	r2, 8015d00 <xQueueReceiveFromISR+0x88>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cee:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015cf0:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cf2:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015cf4:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8015cf6:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8015cf8:	d215      	bcs.n	8015d26 <xQueueReceiveFromISR+0xae>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015cfa:	4630      	mov	r0, r6
 8015cfc:	f00e f8e4 	bl	8023ec8 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d00:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8015d02:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015d06:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8015d08:	d009      	beq.n	8015d1e <xQueueReceiveFromISR+0xa6>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015d0a:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
 8015d0e:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8015d10:	b25b      	sxtb	r3, r3
 8015d12:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
 8015d16:	f389 8811 	msr	BASEPRI, r9
}
 8015d1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8015d1e:	6923      	ldr	r3, [r4, #16]
 8015d20:	b923      	cbnz	r3, 8015d2c <xQueueReceiveFromISR+0xb4>
			xReturn = pdPASS;
 8015d22:	2001      	movs	r0, #1
 8015d24:	e7c0      	b.n	8015ca8 <xQueueReceiveFromISR+0x30>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8015d26:	6821      	ldr	r1, [r4, #0]
 8015d28:	60e1      	str	r1, [r4, #12]
 8015d2a:	e7e6      	b.n	8015cfa <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015d2c:	f104 0010 	add.w	r0, r4, #16
 8015d30:	f000 fcc6 	bl	80166c0 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
 8015d34:	2f00      	cmp	r7, #0
 8015d36:	d0f4      	beq.n	8015d22 <xQueueReceiveFromISR+0xaa>
 8015d38:	2800      	cmp	r0, #0
 8015d3a:	d0f2      	beq.n	8015d22 <xQueueReceiveFromISR+0xaa>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015d3c:	2301      	movs	r3, #1
			xReturn = pdPASS;
 8015d3e:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
 8015d40:	603b      	str	r3, [r7, #0]
 8015d42:	e7b1      	b.n	8015ca8 <xQueueReceiveFromISR+0x30>

08015d44 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8015d44:	b410      	push	{r4}
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015d46:	2300      	movs	r3, #0
 8015d48:	4c08      	ldr	r4, [pc, #32]	; (8015d6c <vQueueAddToRegistry+0x28>)
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8015d4a:	f854 2033 	ldr.w	r2, [r4, r3, lsl #3]
 8015d4e:	b12a      	cbz	r2, 8015d5c <vQueueAddToRegistry+0x18>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015d50:	3301      	adds	r3, #1
 8015d52:	2b08      	cmp	r3, #8
 8015d54:	d1f9      	bne.n	8015d4a <vQueueAddToRegistry+0x6>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8015d56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015d5a:	4770      	bx	lr
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015d5c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015d60:	f844 1033 	str.w	r1, [r4, r3, lsl #3]
	}
 8015d64:	f85d 4b04 	ldr.w	r4, [sp], #4
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015d68:	6050      	str	r0, [r2, #4]
	}
 8015d6a:	4770      	bx	lr
 8015d6c:	200065d8 	.word	0x200065d8

08015d70 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015d70:	b570      	push	{r4, r5, r6, lr}
 8015d72:	4604      	mov	r4, r0
 8015d74:	460e      	mov	r6, r1
 8015d76:	4615      	mov	r5, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015d78:	f001 fa54 	bl	8017224 <vPortEnterCritical>
 8015d7c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8015d80:	2bff      	cmp	r3, #255	; 0xff
 8015d82:	d102      	bne.n	8015d8a <vQueueWaitForMessageRestricted+0x1a>
 8015d84:	2300      	movs	r3, #0
 8015d86:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8015d8a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8015d8e:	2bff      	cmp	r3, #255	; 0xff
 8015d90:	d102      	bne.n	8015d98 <vQueueWaitForMessageRestricted+0x28>
 8015d92:	2300      	movs	r3, #0
 8015d94:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8015d98:	f001 fa6a 	bl	8017270 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8015d9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8015d9e:	b123      	cbz	r3, 8015daa <vQueueWaitForMessageRestricted+0x3a>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8015da0:	4620      	mov	r0, r4
	}
 8015da2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015da6:	f7ff bad1 	b.w	801534c <prvUnlockQueue>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8015daa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8015dae:	462a      	mov	r2, r5
 8015db0:	4631      	mov	r1, r6
 8015db2:	f000 fc65 	bl	8016680 <vTaskPlaceOnEventListRestricted>
		prvUnlockQueue( pxQueue );
 8015db6:	4620      	mov	r0, r4
	}
 8015db8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8015dbc:	f7ff bac6 	b.w	801534c <prvUnlockQueue>

08015dc0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015dc4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015dc6:	f001 fa2d 	bl	8017224 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015dca:	4a35      	ldr	r2, [pc, #212]	; (8015ea0 <prvAddNewTaskToReadyList+0xe0>)
		if( pxCurrentTCB == NULL )
 8015dcc:	4d35      	ldr	r5, [pc, #212]	; (8015ea4 <prvAddNewTaskToReadyList+0xe4>)
		uxCurrentNumberOfTasks++;
 8015dce:	6813      	ldr	r3, [r2, #0]
 8015dd0:	3301      	adds	r3, #1
 8015dd2:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015dd4:	682b      	ldr	r3, [r5, #0]
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d034      	beq.n	8015e44 <prvAddNewTaskToReadyList+0x84>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015dda:	4e33      	ldr	r6, [pc, #204]	; (8015ea8 <prvAddNewTaskToReadyList+0xe8>)
 8015ddc:	6833      	ldr	r3, [r6, #0]
 8015dde:	b343      	cbz	r3, 8015e32 <prvAddNewTaskToReadyList+0x72>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015de0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015de2:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8015ecc <prvAddNewTaskToReadyList+0x10c>
 8015de6:	2201      	movs	r2, #1
		uxTaskNumber++;
 8015de8:	4f30      	ldr	r7, [pc, #192]	; (8015eac <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
 8015dea:	4931      	ldr	r1, [pc, #196]	; (8015eb0 <prvAddNewTaskToReadyList+0xf0>)
 8015dec:	409a      	lsls	r2, r3
 8015dee:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8015df2:	eb08 0083 	add.w	r0, r8, r3, lsl #2
		uxTaskNumber++;
 8015df6:	683b      	ldr	r3, [r7, #0]
 8015df8:	3301      	adds	r3, #1
 8015dfa:	603b      	str	r3, [r7, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015dfc:	680b      	ldr	r3, [r1, #0]
 8015dfe:	431a      	orrs	r2, r3
 8015e00:	600a      	str	r2, [r1, #0]
 8015e02:	1d21      	adds	r1, r4, #4
 8015e04:	f7ff fa24 	bl	8015250 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015e08:	f001 fa32 	bl	8017270 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015e0c:	6833      	ldr	r3, [r6, #0]
 8015e0e:	b173      	cbz	r3, 8015e2e <prvAddNewTaskToReadyList+0x6e>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015e10:	682a      	ldr	r2, [r5, #0]
 8015e12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015e14:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015e16:	429a      	cmp	r2, r3
 8015e18:	d209      	bcs.n	8015e2e <prvAddNewTaskToReadyList+0x6e>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015e1a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8015e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015e22:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8015e26:	f3bf 8f4f 	dsb	sy
 8015e2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015e32:	682a      	ldr	r2, [r5, #0]
 8015e34:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015e36:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8015e38:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8015ecc <prvAddNewTaskToReadyList+0x10c>
 8015e3c:	429a      	cmp	r2, r3
 8015e3e:	d8d2      	bhi.n	8015de6 <prvAddNewTaskToReadyList+0x26>
					pxCurrentTCB = pxNewTCB;
 8015e40:	602c      	str	r4, [r5, #0]
 8015e42:	e7d0      	b.n	8015de6 <prvAddNewTaskToReadyList+0x26>
			pxCurrentTCB = pxNewTCB;
 8015e44:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015e46:	6813      	ldr	r3, [r2, #0]
 8015e48:	2b01      	cmp	r3, #1
 8015e4a:	d004      	beq.n	8015e56 <prvAddNewTaskToReadyList+0x96>
		prvAddTaskToReadyList( pxNewTCB );
 8015e4c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8015e4e:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8015ecc <prvAddNewTaskToReadyList+0x10c>
 8015e52:	4e15      	ldr	r6, [pc, #84]	; (8015ea8 <prvAddNewTaskToReadyList+0xe8>)
 8015e54:	e7c7      	b.n	8015de6 <prvAddNewTaskToReadyList+0x26>
 8015e56:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8015ecc <prvAddNewTaskToReadyList+0x10c>
 8015e5a:	4646      	mov	r6, r8
 8015e5c:	f108 078c 	add.w	r7, r8, #140	; 0x8c
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e60:	4630      	mov	r0, r6
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e62:	3614      	adds	r6, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015e64:	f7ff f9e4 	bl	8015230 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015e68:	42b7      	cmp	r7, r6
 8015e6a:	d1f9      	bne.n	8015e60 <prvAddNewTaskToReadyList+0xa0>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015e6c:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8015ed0 <prvAddNewTaskToReadyList+0x110>
	vListInitialise( &xDelayedTaskList2 );
 8015e70:	4f10      	ldr	r7, [pc, #64]	; (8015eb4 <prvAddNewTaskToReadyList+0xf4>)
	vListInitialise( &xDelayedTaskList1 );
 8015e72:	4648      	mov	r0, r9
 8015e74:	4e0c      	ldr	r6, [pc, #48]	; (8015ea8 <prvAddNewTaskToReadyList+0xe8>)
 8015e76:	f7ff f9db 	bl	8015230 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015e7a:	4638      	mov	r0, r7
 8015e7c:	f7ff f9d8 	bl	8015230 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015e80:	480d      	ldr	r0, [pc, #52]	; (8015eb8 <prvAddNewTaskToReadyList+0xf8>)
 8015e82:	f7ff f9d5 	bl	8015230 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015e86:	480d      	ldr	r0, [pc, #52]	; (8015ebc <prvAddNewTaskToReadyList+0xfc>)
 8015e88:	f7ff f9d2 	bl	8015230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015e8c:	480c      	ldr	r0, [pc, #48]	; (8015ec0 <prvAddNewTaskToReadyList+0x100>)
 8015e8e:	f7ff f9cf 	bl	8015230 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015e92:	4b0c      	ldr	r3, [pc, #48]	; (8015ec4 <prvAddNewTaskToReadyList+0x104>)
 8015e94:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015e98:	4b0b      	ldr	r3, [pc, #44]	; (8015ec8 <prvAddNewTaskToReadyList+0x108>)
 8015e9a:	601f      	str	r7, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8015e9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
}
 8015e9e:	e7a2      	b.n	8015de6 <prvAddNewTaskToReadyList+0x26>
 8015ea0:	200066b0 	.word	0x200066b0
 8015ea4:	20006618 	.word	0x20006618
 8015ea8:	2000670c 	.word	0x2000670c
 8015eac:	200066c0 	.word	0x200066c0
 8015eb0:	200066c4 	.word	0x200066c4
 8015eb4:	200066dc 	.word	0x200066dc
 8015eb8:	200066f8 	.word	0x200066f8
 8015ebc:	20006724 	.word	0x20006724
 8015ec0:	20006710 	.word	0x20006710
 8015ec4:	2000661c 	.word	0x2000661c
 8015ec8:	20006620 	.word	0x20006620
 8015ecc:	20006624 	.word	0x20006624
 8015ed0:	200066c8 	.word	0x200066c8

08015ed4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015ed6:	4b1b      	ldr	r3, [pc, #108]	; (8015f44 <prvAddCurrentTaskToDelayedList+0x70>)
{
 8015ed8:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015eda:	4e1b      	ldr	r6, [pc, #108]	; (8015f48 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8015edc:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8015ede:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015ee0:	6833      	ldr	r3, [r6, #0]
 8015ee2:	1d18      	adds	r0, r3, #4
 8015ee4:	f7ff f9dc 	bl	80152a0 <uxListRemove>
 8015ee8:	b948      	cbnz	r0, 8015efe <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8015eea:	6833      	ldr	r3, [r6, #0]
 8015eec:	4917      	ldr	r1, [pc, #92]	; (8015f4c <prvAddCurrentTaskToDelayedList+0x78>)
 8015eee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015ef0:	2301      	movs	r3, #1
 8015ef2:	fa03 f202 	lsl.w	r2, r3, r2
 8015ef6:	680b      	ldr	r3, [r1, #0]
 8015ef8:	ea23 0302 	bic.w	r3, r3, r2
 8015efc:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015efe:	1c63      	adds	r3, r4, #1
 8015f00:	d100      	bne.n	8015f04 <prvAddCurrentTaskToDelayedList+0x30>
 8015f02:	b9bf      	cbnz	r7, 8015f34 <prvAddCurrentTaskToDelayedList+0x60>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015f04:	192c      	adds	r4, r5, r4

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015f06:	6833      	ldr	r3, [r6, #0]
 8015f08:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 8015f0a:	d307      	bcc.n	8015f1c <prvAddCurrentTaskToDelayedList+0x48>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015f0c:	4b10      	ldr	r3, [pc, #64]	; (8015f50 <prvAddCurrentTaskToDelayedList+0x7c>)
 8015f0e:	6818      	ldr	r0, [r3, #0]
 8015f10:	6831      	ldr	r1, [r6, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015f12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015f16:	3104      	adds	r1, #4
 8015f18:	f7ff b9aa 	b.w	8015270 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015f1c:	4b0d      	ldr	r3, [pc, #52]	; (8015f54 <prvAddCurrentTaskToDelayedList+0x80>)
 8015f1e:	6818      	ldr	r0, [r3, #0]
 8015f20:	6831      	ldr	r1, [r6, #0]
 8015f22:	3104      	adds	r1, #4
 8015f24:	f7ff f9a4 	bl	8015270 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015f28:	4b0b      	ldr	r3, [pc, #44]	; (8015f58 <prvAddCurrentTaskToDelayedList+0x84>)
 8015f2a:	681a      	ldr	r2, [r3, #0]
 8015f2c:	42a2      	cmp	r2, r4
 8015f2e:	d900      	bls.n	8015f32 <prvAddCurrentTaskToDelayedList+0x5e>
					xNextTaskUnblockTime = xTimeToWake;
 8015f30:	601c      	str	r4, [r3, #0]
}
 8015f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015f34:	6831      	ldr	r1, [r6, #0]
 8015f36:	4809      	ldr	r0, [pc, #36]	; (8015f5c <prvAddCurrentTaskToDelayedList+0x88>)
 8015f38:	3104      	adds	r1, #4
}
 8015f3a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015f3e:	f7ff b987 	b.w	8015250 <vListInsertEnd>
 8015f42:	bf00      	nop
 8015f44:	20006738 	.word	0x20006738
 8015f48:	20006618 	.word	0x20006618
 8015f4c:	200066c4 	.word	0x200066c4
 8015f50:	20006620 	.word	0x20006620
 8015f54:	2000661c 	.word	0x2000661c
 8015f58:	200066f0 	.word	0x200066f0
 8015f5c:	20006710 	.word	0x20006710

08015f60 <prvDeleteTCB>:
	{
 8015f60:	b510      	push	{r4, lr}
 8015f62:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015f64:	304c      	adds	r0, #76	; 0x4c
 8015f66:	f00f f865 	bl	8025034 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015f6a:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 8015f6e:	b173      	cbz	r3, 8015f8e <prvDeleteTCB+0x2e>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d015      	beq.n	8015fa0 <prvDeleteTCB+0x40>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015f74:	2b02      	cmp	r3, #2
 8015f76:	d012      	beq.n	8015f9e <prvDeleteTCB+0x3e>
	__asm volatile
 8015f78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8015f7c:	b672      	cpsid	i
 8015f7e:	f383 8811 	msr	BASEPRI, r3
 8015f82:	f3bf 8f6f 	isb	sy
 8015f86:	f3bf 8f4f 	dsb	sy
 8015f8a:	b662      	cpsie	i
 8015f8c:	e7fe      	b.n	8015f8c <prvDeleteTCB+0x2c>
				vPortFree( pxTCB->pxStack );
 8015f8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8015f90:	f001 fb4e 	bl	8017630 <vPortFree>
				vPortFree( pxTCB );
 8015f94:	4620      	mov	r0, r4
	}
 8015f96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015f9a:	f001 bb49 	b.w	8017630 <vPortFree>
	}
 8015f9e:	bd10      	pop	{r4, pc}
				vPortFree( pxTCB );
 8015fa0:	4620      	mov	r0, r4
	}
 8015fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8015fa6:	f001 bb43 	b.w	8017630 <vPortFree>
 8015faa:	bf00      	nop

08015fac <prvIdleTask>:
{
 8015fac:	4c16      	ldr	r4, [pc, #88]	; (8016008 <prvIdleTask+0x5c>)
				taskYIELD();
 8015fae:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8015fb2:	4e16      	ldr	r6, [pc, #88]	; (801600c <prvIdleTask+0x60>)
 8015fb4:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 8015fb8:	4d15      	ldr	r5, [pc, #84]	; (8016010 <prvIdleTask+0x64>)
 8015fba:	f8df a058 	ldr.w	sl, [pc, #88]	; 8016014 <prvIdleTask+0x68>
{
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	e011      	b.n	8015fe6 <prvIdleTask+0x3a>
			taskENTER_CRITICAL();
 8015fc2:	f001 f92f 	bl	8017224 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fc6:	68f3      	ldr	r3, [r6, #12]
 8015fc8:	68df      	ldr	r7, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015fca:	1d38      	adds	r0, r7, #4
 8015fcc:	f7ff f968 	bl	80152a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015fd0:	682b      	ldr	r3, [r5, #0]
 8015fd2:	3b01      	subs	r3, #1
 8015fd4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015fd6:	6823      	ldr	r3, [r4, #0]
 8015fd8:	3b01      	subs	r3, #1
 8015fda:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8015fdc:	f001 f948 	bl	8017270 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8015fe0:	4638      	mov	r0, r7
 8015fe2:	f7ff ffbd 	bl	8015f60 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015fe6:	6823      	ldr	r3, [r4, #0]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d1ea      	bne.n	8015fc2 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015fec:	f8da 3000 	ldr.w	r3, [sl]
 8015ff0:	2b01      	cmp	r3, #1
 8015ff2:	d905      	bls.n	8016000 <prvIdleTask+0x54>
				taskYIELD();
 8015ff4:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
 8015ff8:	f3bf 8f4f 	dsb	sy
 8015ffc:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 8016000:	f7eb f92c 	bl	800125c <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8016004:	e7ef      	b.n	8015fe6 <prvIdleTask+0x3a>
 8016006:	bf00      	nop
 8016008:	200066b4 	.word	0x200066b4
 801600c:	20006724 	.word	0x20006724
 8016010:	200066b0 	.word	0x200066b0
 8016014:	20006624 	.word	0x20006624

08016018 <vTaskSwitchContext.part.0>:
		xYieldPending = pdFALSE;
 8016018:	4b1d      	ldr	r3, [pc, #116]	; (8016090 <vTaskSwitchContext.part.0+0x78>)
 801601a:	2200      	movs	r2, #0
void vTaskSwitchContext( void )
 801601c:	b510      	push	{r4, lr}
		taskCHECK_FOR_STACK_OVERFLOW();
 801601e:	4c1d      	ldr	r4, [pc, #116]	; (8016094 <vTaskSwitchContext.part.0+0x7c>)
		xYieldPending = pdFALSE;
 8016020:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8016022:	6822      	ldr	r2, [r4, #0]
 8016024:	6823      	ldr	r3, [r4, #0]
 8016026:	6812      	ldr	r2, [r2, #0]
 8016028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801602a:	429a      	cmp	r2, r3
 801602c:	d927      	bls.n	801607e <vTaskSwitchContext.part.0+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801602e:	4b1a      	ldr	r3, [pc, #104]	; (8016098 <vTaskSwitchContext.part.0+0x80>)
 8016030:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8016032:	fab3 f383 	clz	r3, r3
 8016036:	b2db      	uxtb	r3, r3
 8016038:	4a18      	ldr	r2, [pc, #96]	; (801609c <vTaskSwitchContext.part.0+0x84>)
 801603a:	f1c3 031f 	rsb	r3, r3, #31
 801603e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016042:	0099      	lsls	r1, r3, #2
 8016044:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8016048:	5850      	ldr	r0, [r2, r1]
 801604a:	b950      	cbnz	r0, 8016062 <vTaskSwitchContext.part.0+0x4a>
	__asm volatile
 801604c:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016050:	b672      	cpsid	i
 8016052:	f383 8811 	msr	BASEPRI, r3
 8016056:	f3bf 8f6f 	isb	sy
 801605a:	f3bf 8f4f 	dsb	sy
 801605e:	b662      	cpsie	i
 8016060:	e7fe      	b.n	8016060 <vTaskSwitchContext.part.0+0x48>
 8016062:	6858      	ldr	r0, [r3, #4]
 8016064:	3108      	adds	r1, #8
 8016066:	6840      	ldr	r0, [r0, #4]
 8016068:	440a      	add	r2, r1
 801606a:	4290      	cmp	r0, r2
 801606c:	6058      	str	r0, [r3, #4]
 801606e:	d00c      	beq.n	801608a <vTaskSwitchContext.part.0+0x72>
 8016070:	68c3      	ldr	r3, [r0, #12]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016072:	4a0b      	ldr	r2, [pc, #44]	; (80160a0 <vTaskSwitchContext.part.0+0x88>)
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016074:	6023      	str	r3, [r4, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016076:	6823      	ldr	r3, [r4, #0]
 8016078:	334c      	adds	r3, #76	; 0x4c
 801607a:	6013      	str	r3, [r2, #0]
}
 801607c:	bd10      	pop	{r4, pc}
		taskCHECK_FOR_STACK_OVERFLOW();
 801607e:	6820      	ldr	r0, [r4, #0]
 8016080:	6821      	ldr	r1, [r4, #0]
 8016082:	3134      	adds	r1, #52	; 0x34
 8016084:	f7eb f8ec 	bl	8001260 <vApplicationStackOverflowHook>
 8016088:	e7d1      	b.n	801602e <vTaskSwitchContext.part.0+0x16>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801608a:	6840      	ldr	r0, [r0, #4]
 801608c:	6058      	str	r0, [r3, #4]
 801608e:	e7ef      	b.n	8016070 <vTaskSwitchContext.part.0+0x58>
 8016090:	2000673c 	.word	0x2000673c
 8016094:	20006618 	.word	0x20006618
 8016098:	200066c4 	.word	0x200066c4
 801609c:	20006624 	.word	0x20006624
 80160a0:	2000046c 	.word	0x2000046c

080160a4 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80160a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160a8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80160aa:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160ac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80160b0:	4607      	mov	r7, r0
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160b2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80160b4:	4413      	add	r3, r2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80160b6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80160ba:	eb06 0683 	add.w	r6, r6, r3, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80160be:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 80160c2:	2900      	cmp	r1, #0
 80160c4:	d041      	beq.n	801614a <prvInitialiseNewTask.constprop.0+0xa6>
 80160c6:	f101 3cff 	add.w	ip, r1, #4294967295
 80160ca:	f104 0e33 	add.w	lr, r4, #51	; 0x33
 80160ce:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80160d0:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
 80160d4:	f80e 5f01 	strb.w	r5, [lr, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 80160d8:	b10d      	cbz	r5, 80160de <prvInitialiseNewTask.constprop.0+0x3a>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80160da:	458c      	cmp	ip, r1
 80160dc:	d1f8      	bne.n	80160d0 <prvInitialiseNewTask.constprop.0+0x2c>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80160de:	2300      	movs	r3, #0
 80160e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80160e4:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80160e6:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80160ea:	1d20      	adds	r0, r4, #4
 80160ec:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80160ee:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80160f2:	bf28      	it	cs
 80160f4:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80160f6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80160f8:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80160fa:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80160fe:	f7ff f8a3 	bl	8015248 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8016102:	f104 0018 	add.w	r0, r4, #24
 8016106:	f7ff f89f 	bl	8015248 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801610a:	4651      	mov	r1, sl
 801610c:	2260      	movs	r2, #96	; 0x60
		pxNewTCB->ulNotifiedValue = 0;
 801610e:	f8c4 a0ac 	str.w	sl, [r4, #172]	; 0xac
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016112:	f104 004c 	add.w	r0, r4, #76	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016116:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8016118:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801611a:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801611c:	f884 a0b0 	strb.w	sl, [r4, #176]	; 0xb0
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8016120:	f00d fefa 	bl	8023f18 <memset>
 8016124:	4b0a      	ldr	r3, [pc, #40]	; (8016150 <prvInitialiseNewTask.constprop.0+0xac>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016126:	464a      	mov	r2, r9
 8016128:	4639      	mov	r1, r7
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801612a:	6523      	str	r3, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801612c:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801612e:	4b09      	ldr	r3, [pc, #36]	; (8016154 <prvInitialiseNewTask.constprop.0+0xb0>)
 8016130:	6563      	str	r3, [r4, #84]	; 0x54
 8016132:	4b09      	ldr	r3, [pc, #36]	; (8016158 <prvInitialiseNewTask.constprop.0+0xb4>)
 8016134:	65a3      	str	r3, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8016136:	f001 f847 	bl	80171c8 <pxPortInitialiseStack>
 801613a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 801613c:	f1b8 0f00 	cmp.w	r8, #0
 8016140:	d001      	beq.n	8016146 <prvInitialiseNewTask.constprop.0+0xa2>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8016142:	f8c8 4000 	str.w	r4, [r8]
}
 8016146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801614a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 801614e:	e7c9      	b.n	80160e4 <prvInitialiseNewTask.constprop.0+0x40>
 8016150:	080456a8 	.word	0x080456a8
 8016154:	080456c8 	.word	0x080456c8
 8016158:	08045688 	.word	0x08045688

0801615c <xTaskCreateStatic>:
	{
 801615c:	b530      	push	{r4, r5, lr}
 801615e:	b087      	sub	sp, #28
 8016160:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8016162:	b1e4      	cbz	r4, 801619e <xTaskCreateStatic+0x42>
		configASSERT( pxTaskBuffer != NULL );
 8016164:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016166:	b17d      	cbz	r5, 8016188 <xTaskCreateStatic+0x2c>
			volatile size_t xSize = sizeof( StaticTask_t );
 8016168:	25b4      	movs	r5, #180	; 0xb4
 801616a:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 801616c:	9d05      	ldr	r5, [sp, #20]
 801616e:	2db4      	cmp	r5, #180	; 0xb4
 8016170:	d020      	beq.n	80161b4 <xTaskCreateStatic+0x58>
 8016172:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016176:	b672      	cpsid	i
 8016178:	f383 8811 	msr	BASEPRI, r3
 801617c:	f3bf 8f6f 	isb	sy
 8016180:	f3bf 8f4f 	dsb	sy
 8016184:	b662      	cpsie	i
 8016186:	e7fe      	b.n	8016186 <xTaskCreateStatic+0x2a>
 8016188:	f04f 0330 	mov.w	r3, #48	; 0x30
 801618c:	b672      	cpsid	i
 801618e:	f383 8811 	msr	BASEPRI, r3
 8016192:	f3bf 8f6f 	isb	sy
 8016196:	f3bf 8f4f 	dsb	sy
 801619a:	b662      	cpsie	i
		configASSERT( pxTaskBuffer != NULL );
 801619c:	e7fe      	b.n	801619c <xTaskCreateStatic+0x40>
 801619e:	f04f 0330 	mov.w	r3, #48	; 0x30
 80161a2:	b672      	cpsid	i
 80161a4:	f383 8811 	msr	BASEPRI, r3
 80161a8:	f3bf 8f6f 	isb	sy
 80161ac:	f3bf 8f4f 	dsb	sy
 80161b0:	b662      	cpsie	i
		configASSERT( puxStackBuffer != NULL );
 80161b2:	e7fe      	b.n	80161b2 <xTaskCreateStatic+0x56>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80161b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161b6:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161b8:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80161ba:	9502      	str	r5, [sp, #8]
 80161bc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80161be:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80161c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80161c2:	f885 40b1 	strb.w	r4, [r5, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80161c6:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80161c8:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80161ca:	9401      	str	r4, [sp, #4]
 80161cc:	f7ff ff6a 	bl	80160a4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80161d0:	980c      	ldr	r0, [sp, #48]	; 0x30
 80161d2:	f7ff fdf5 	bl	8015dc0 <prvAddNewTaskToReadyList>
	}
 80161d6:	9804      	ldr	r0, [sp, #16]
 80161d8:	b007      	add	sp, #28
 80161da:	bd30      	pop	{r4, r5, pc}

080161dc <xTaskCreate>:
	{
 80161dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80161e0:	4607      	mov	r7, r0
 80161e2:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80161e4:	0090      	lsls	r0, r2, #2
	{
 80161e6:	4615      	mov	r5, r2
 80161e8:	4688      	mov	r8, r1
 80161ea:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80161ec:	f001 f984 	bl	80174f8 <pvPortMalloc>
			if( pxStack != NULL )
 80161f0:	b1d8      	cbz	r0, 801622a <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80161f2:	4604      	mov	r4, r0
 80161f4:	20b4      	movs	r0, #180	; 0xb4
 80161f6:	f001 f97f 	bl	80174f8 <pvPortMalloc>
				if( pxNewTCB != NULL )
 80161fa:	4606      	mov	r6, r0
 80161fc:	b1d0      	cbz	r0, 8016234 <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
 80161fe:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016200:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8016202:	464b      	mov	r3, r9
 8016204:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8016206:	f886 40b1 	strb.w	r4, [r6, #177]	; 0xb1
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801620a:	4641      	mov	r1, r8
 801620c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801620e:	4638      	mov	r0, r7
 8016210:	9602      	str	r6, [sp, #8]
 8016212:	9401      	str	r4, [sp, #4]
 8016214:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8016216:	9400      	str	r4, [sp, #0]
 8016218:	f7ff ff44 	bl	80160a4 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 801621c:	4630      	mov	r0, r6
 801621e:	f7ff fdcf 	bl	8015dc0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8016222:	2001      	movs	r0, #1
	}
 8016224:	b005      	add	sp, #20
 8016226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801622a:	f04f 30ff 	mov.w	r0, #4294967295
	}
 801622e:	b005      	add	sp, #20
 8016230:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8016234:	4620      	mov	r0, r4
 8016236:	f001 f9fb 	bl	8017630 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801623a:	f04f 30ff 	mov.w	r0, #4294967295
 801623e:	e7f1      	b.n	8016224 <xTaskCreate+0x48>

08016240 <vTaskStartScheduler>:
{
 8016240:	b510      	push	{r4, lr}
 8016242:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8016244:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016246:	aa07      	add	r2, sp, #28
 8016248:	a906      	add	r1, sp, #24
 801624a:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801624c:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8016250:	f7eb f80a 	bl	8001268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8016254:	4623      	mov	r3, r4
 8016256:	9a07      	ldr	r2, [sp, #28]
 8016258:	9400      	str	r4, [sp, #0]
 801625a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 801625e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016262:	491a      	ldr	r1, [pc, #104]	; (80162cc <vTaskStartScheduler+0x8c>)
 8016264:	481a      	ldr	r0, [pc, #104]	; (80162d0 <vTaskStartScheduler+0x90>)
 8016266:	f7ff ff79 	bl	801615c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 801626a:	b1f8      	cbz	r0, 80162ac <vTaskStartScheduler+0x6c>
			xReturn = xTimerCreateTimerTask();
 801626c:	f000 fcfa 	bl	8016c64 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8016270:	2801      	cmp	r0, #1
 8016272:	d11d      	bne.n	80162b0 <vTaskStartScheduler+0x70>
 8016274:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016278:	b672      	cpsid	i
 801627a:	f383 8811 	msr	BASEPRI, r3
 801627e:	f3bf 8f6f 	isb	sy
 8016282:	f3bf 8f4f 	dsb	sy
 8016286:	b662      	cpsie	i
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016288:	4b12      	ldr	r3, [pc, #72]	; (80162d4 <vTaskStartScheduler+0x94>)
 801628a:	4a13      	ldr	r2, [pc, #76]	; (80162d8 <vTaskStartScheduler+0x98>)
 801628c:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 801628e:	4913      	ldr	r1, [pc, #76]	; (80162dc <vTaskStartScheduler+0x9c>)
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016290:	334c      	adds	r3, #76	; 0x4c
 8016292:	6013      	str	r3, [r2, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 8016294:	f04f 33ff 	mov.w	r3, #4294967295
		xSchedulerRunning = pdTRUE;
 8016298:	4a11      	ldr	r2, [pc, #68]	; (80162e0 <vTaskStartScheduler+0xa0>)
		xNextTaskUnblockTime = portMAX_DELAY;
 801629a:	600b      	str	r3, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801629c:	4b11      	ldr	r3, [pc, #68]	; (80162e4 <vTaskStartScheduler+0xa4>)
		xSchedulerRunning = pdTRUE;
 801629e:	6010      	str	r0, [r2, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80162a0:	601c      	str	r4, [r3, #0]
}
 80162a2:	b008      	add	sp, #32
 80162a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 80162a8:	f001 b858 	b.w	801735c <xPortStartScheduler>
}
 80162ac:	b008      	add	sp, #32
 80162ae:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80162b0:	3001      	adds	r0, #1
 80162b2:	d1fb      	bne.n	80162ac <vTaskStartScheduler+0x6c>
 80162b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80162b8:	b672      	cpsid	i
 80162ba:	f383 8811 	msr	BASEPRI, r3
 80162be:	f3bf 8f6f 	isb	sy
 80162c2:	f3bf 8f4f 	dsb	sy
 80162c6:	b662      	cpsie	i
 80162c8:	e7fe      	b.n	80162c8 <vTaskStartScheduler+0x88>
 80162ca:	bf00      	nop
 80162cc:	0802c714 	.word	0x0802c714
 80162d0:	08015fad 	.word	0x08015fad
 80162d4:	20006618 	.word	0x20006618
 80162d8:	2000046c 	.word	0x2000046c
 80162dc:	200066f0 	.word	0x200066f0
 80162e0:	2000670c 	.word	0x2000670c
 80162e4:	20006738 	.word	0x20006738

080162e8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80162e8:	4a02      	ldr	r2, [pc, #8]	; (80162f4 <vTaskSuspendAll+0xc>)
 80162ea:	6813      	ldr	r3, [r2, #0]
 80162ec:	3301      	adds	r3, #1
 80162ee:	6013      	str	r3, [r2, #0]
}
 80162f0:	4770      	bx	lr
 80162f2:	bf00      	nop
 80162f4:	200066bc 	.word	0x200066bc

080162f8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80162f8:	4b01      	ldr	r3, [pc, #4]	; (8016300 <xTaskGetTickCount+0x8>)
 80162fa:	6818      	ldr	r0, [r3, #0]
}
 80162fc:	4770      	bx	lr
 80162fe:	bf00      	nop
 8016300:	20006738 	.word	0x20006738

08016304 <xTaskGetTickCountFromISR>:
{
 8016304:	b508      	push	{r3, lr}
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016306:	f001 f893 	bl	8017430 <vPortValidateInterruptPriority>
		xReturn = xTickCount;
 801630a:	4b01      	ldr	r3, [pc, #4]	; (8016310 <xTaskGetTickCountFromISR+0xc>)
 801630c:	6818      	ldr	r0, [r3, #0]
}
 801630e:	bd08      	pop	{r3, pc}
 8016310:	20006738 	.word	0x20006738

08016314 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016314:	4b52      	ldr	r3, [pc, #328]	; (8016460 <xTaskIncrementTick+0x14c>)
 8016316:	681b      	ldr	r3, [r3, #0]
{
 8016318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801631c:	b083      	sub	sp, #12
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801631e:	2b00      	cmp	r3, #0
 8016320:	d14c      	bne.n	80163bc <xTaskIncrementTick+0xa8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8016322:	4b50      	ldr	r3, [pc, #320]	; (8016464 <xTaskIncrementTick+0x150>)
 8016324:	681d      	ldr	r5, [r3, #0]
 8016326:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
 8016328:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801632a:	2d00      	cmp	r5, #0
 801632c:	d054      	beq.n	80163d8 <xTaskIncrementTick+0xc4>
 801632e:	4b4e      	ldr	r3, [pc, #312]	; (8016468 <xTaskIncrementTick+0x154>)
 8016330:	9301      	str	r3, [sp, #4]
		if( xConstTickCount >= xNextTaskUnblockTime )
 8016332:	9b01      	ldr	r3, [sp, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	42ab      	cmp	r3, r5
 8016338:	d85d      	bhi.n	80163f6 <xTaskIncrementTick+0xe2>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801633a:	4e4c      	ldr	r6, [pc, #304]	; (801646c <xTaskIncrementTick+0x158>)
 801633c:	6833      	ldr	r3, [r6, #0]
 801633e:	681c      	ldr	r4, [r3, #0]
 8016340:	2c00      	cmp	r4, #0
 8016342:	d07c      	beq.n	801643e <xTaskIncrementTick+0x12a>
BaseType_t xSwitchRequired = pdFALSE;
 8016344:	2400      	movs	r4, #0
 8016346:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8016484 <xTaskIncrementTick+0x170>
 801634a:	f8df 913c 	ldr.w	r9, [pc, #316]	; 8016488 <xTaskIncrementTick+0x174>
					prvAddTaskToReadyList( pxTCB );
 801634e:	f04f 0a01 	mov.w	sl, #1
 8016352:	4f47      	ldr	r7, [pc, #284]	; (8016470 <xTaskIncrementTick+0x15c>)
 8016354:	e024      	b.n	80163a0 <xTaskIncrementTick+0x8c>
 8016356:	9100      	str	r1, [sp, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016358:	f7fe ffa2 	bl	80152a0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801635c:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016360:	f10b 0018 	add.w	r0, fp, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8016364:	9900      	ldr	r1, [sp, #0]
 8016366:	b112      	cbz	r2, 801636e <xTaskIncrementTick+0x5a>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8016368:	f7fe ff9a 	bl	80152a0 <uxListRemove>
 801636c:	9900      	ldr	r1, [sp, #0]
					prvAddTaskToReadyList( pxTCB );
 801636e:	f8db 002c 	ldr.w	r0, [fp, #44]	; 0x2c
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	fa0a f200 	lsl.w	r2, sl, r0
 8016378:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 801637c:	431a      	orrs	r2, r3
 801637e:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8016382:	603a      	str	r2, [r7, #0]
 8016384:	f7fe ff64 	bl	8015250 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8016388:	f8d9 3000 	ldr.w	r3, [r9]
 801638c:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 8016390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8016392:	429a      	cmp	r2, r3
 8016394:	bf28      	it	cs
 8016396:	2401      	movcs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8016398:	6833      	ldr	r3, [r6, #0]
 801639a:	681b      	ldr	r3, [r3, #0]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d052      	beq.n	8016446 <xTaskIncrementTick+0x132>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163a0:	6833      	ldr	r3, [r6, #0]
 80163a2:	68db      	ldr	r3, [r3, #12]
 80163a4:	f8d3 b00c 	ldr.w	fp, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80163a8:	f8db 2004 	ldr.w	r2, [fp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163ac:	f10b 0104 	add.w	r1, fp, #4
					if( xConstTickCount < xItemValue )
 80163b0:	4295      	cmp	r5, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80163b2:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
 80163b4:	d2cf      	bcs.n	8016356 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 80163b6:	9b01      	ldr	r3, [sp, #4]
 80163b8:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80163ba:	e021      	b.n	8016400 <xTaskIncrementTick+0xec>
		++uxPendedTicks;
 80163bc:	4a2d      	ldr	r2, [pc, #180]	; (8016474 <xTaskIncrementTick+0x160>)
BaseType_t xSwitchRequired = pdFALSE;
 80163be:	2400      	movs	r4, #0
		++uxPendedTicks;
 80163c0:	6813      	ldr	r3, [r2, #0]
 80163c2:	3301      	adds	r3, #1
 80163c4:	6013      	str	r3, [r2, #0]
		if( xYieldPending != pdFALSE )
 80163c6:	4b2c      	ldr	r3, [pc, #176]	; (8016478 <xTaskIncrementTick+0x164>)
 80163c8:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 80163ca:	2b00      	cmp	r3, #0
}
 80163cc:	bf0c      	ite	eq
 80163ce:	4620      	moveq	r0, r4
 80163d0:	2001      	movne	r0, #1
 80163d2:	b003      	add	sp, #12
 80163d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 80163d8:	4b24      	ldr	r3, [pc, #144]	; (801646c <xTaskIncrementTick+0x158>)
 80163da:	681a      	ldr	r2, [r3, #0]
 80163dc:	6812      	ldr	r2, [r2, #0]
 80163de:	b1da      	cbz	r2, 8016418 <xTaskIncrementTick+0x104>
 80163e0:	f04f 0330 	mov.w	r3, #48	; 0x30
 80163e4:	b672      	cpsid	i
 80163e6:	f383 8811 	msr	BASEPRI, r3
 80163ea:	f3bf 8f6f 	isb	sy
 80163ee:	f3bf 8f4f 	dsb	sy
 80163f2:	b662      	cpsie	i
 80163f4:	e7fe      	b.n	80163f4 <xTaskIncrementTick+0xe0>
BaseType_t xSwitchRequired = pdFALSE;
 80163f6:	2400      	movs	r4, #0
 80163f8:	f8df 8088 	ldr.w	r8, [pc, #136]	; 8016484 <xTaskIncrementTick+0x170>
 80163fc:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8016488 <xTaskIncrementTick+0x174>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8016400:	f8d9 3000 	ldr.w	r3, [r9]
 8016404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016406:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801640a:	009b      	lsls	r3, r3, #2
 801640c:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8016410:	2b02      	cmp	r3, #2
 8016412:	bf28      	it	cs
 8016414:	2401      	movcs	r4, #1
 8016416:	e7d6      	b.n	80163c6 <xTaskIncrementTick+0xb2>
			taskSWITCH_DELAYED_LISTS();
 8016418:	4a18      	ldr	r2, [pc, #96]	; (801647c <xTaskIncrementTick+0x168>)
 801641a:	6818      	ldr	r0, [r3, #0]
 801641c:	6811      	ldr	r1, [r2, #0]
 801641e:	6019      	str	r1, [r3, #0]
 8016420:	4917      	ldr	r1, [pc, #92]	; (8016480 <xTaskIncrementTick+0x16c>)
 8016422:	6010      	str	r0, [r2, #0]
 8016424:	680a      	ldr	r2, [r1, #0]
 8016426:	3201      	adds	r2, #1
 8016428:	600a      	str	r2, [r1, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	6812      	ldr	r2, [r2, #0]
 801642e:	b97a      	cbnz	r2, 8016450 <xTaskIncrementTick+0x13c>
		xNextTaskUnblockTime = portMAX_DELAY;
 8016430:	4b0d      	ldr	r3, [pc, #52]	; (8016468 <xTaskIncrementTick+0x154>)
 8016432:	461a      	mov	r2, r3
 8016434:	9301      	str	r3, [sp, #4]
 8016436:	f04f 33ff 	mov.w	r3, #4294967295
 801643a:	6013      	str	r3, [r2, #0]
 801643c:	e779      	b.n	8016332 <xTaskIncrementTick+0x1e>
 801643e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8016484 <xTaskIncrementTick+0x170>
 8016442:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8016488 <xTaskIncrementTick+0x174>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016446:	f04f 33ff 	mov.w	r3, #4294967295
 801644a:	9a01      	ldr	r2, [sp, #4]
 801644c:	6013      	str	r3, [r2, #0]
					break;
 801644e:	e7d7      	b.n	8016400 <xTaskIncrementTick+0xec>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016450:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016452:	4a05      	ldr	r2, [pc, #20]	; (8016468 <xTaskIncrementTick+0x154>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016454:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016456:	9201      	str	r2, [sp, #4]
 8016458:	68db      	ldr	r3, [r3, #12]
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	6013      	str	r3, [r2, #0]
}
 801645e:	e768      	b.n	8016332 <xTaskIncrementTick+0x1e>
 8016460:	200066bc 	.word	0x200066bc
 8016464:	20006738 	.word	0x20006738
 8016468:	200066f0 	.word	0x200066f0
 801646c:	2000661c 	.word	0x2000661c
 8016470:	200066c4 	.word	0x200066c4
 8016474:	200066b8 	.word	0x200066b8
 8016478:	2000673c 	.word	0x2000673c
 801647c:	20006620 	.word	0x20006620
 8016480:	200066f4 	.word	0x200066f4
 8016484:	20006624 	.word	0x20006624
 8016488:	20006618 	.word	0x20006618

0801648c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
 801648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016490:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8016492:	f000 fec7 	bl	8017224 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8016496:	4b38      	ldr	r3, [pc, #224]	; (8016578 <xTaskResumeAll.part.0+0xec>)
 8016498:	681a      	ldr	r2, [r3, #0]
 801649a:	3a01      	subs	r2, #1
 801649c:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801649e:	681b      	ldr	r3, [r3, #0]
 80164a0:	2b00      	cmp	r3, #0
 80164a2:	d159      	bne.n	8016558 <xTaskResumeAll.part.0+0xcc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80164a4:	4b35      	ldr	r3, [pc, #212]	; (801657c <xTaskResumeAll.part.0+0xf0>)
 80164a6:	681b      	ldr	r3, [r3, #0]
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d055      	beq.n	8016558 <xTaskResumeAll.part.0+0xcc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80164ac:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8016594 <xTaskResumeAll.part.0+0x108>
 80164b0:	f8da 3000 	ldr.w	r3, [sl]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d05c      	beq.n	8016572 <xTaskResumeAll.part.0+0xe6>
 80164b8:	4d31      	ldr	r5, [pc, #196]	; (8016580 <xTaskResumeAll.part.0+0xf4>)
					prvAddTaskToReadyList( pxTCB );
 80164ba:	2601      	movs	r6, #1
 80164bc:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8016598 <xTaskResumeAll.part.0+0x10c>
 80164c0:	4f30      	ldr	r7, [pc, #192]	; (8016584 <xTaskResumeAll.part.0+0xf8>)
 80164c2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 801659c <xTaskResumeAll.part.0+0x110>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80164c6:	f8da 300c 	ldr.w	r3, [sl, #12]
 80164ca:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164cc:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80164d0:	f104 0018 	add.w	r0, r4, #24
 80164d4:	f7fe fee4 	bl	80152a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80164d8:	4658      	mov	r0, fp
 80164da:	f7fe fee1 	bl	80152a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80164de:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80164e0:	682a      	ldr	r2, [r5, #0]
 80164e2:	4659      	mov	r1, fp
 80164e4:	fa06 f300 	lsl.w	r3, r6, r0
 80164e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80164ec:	4313      	orrs	r3, r2
 80164ee:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 80164f2:	602b      	str	r3, [r5, #0]
 80164f4:	f7fe feac 	bl	8015250 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80164f8:	683b      	ldr	r3, [r7, #0]
 80164fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80164fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164fe:	429a      	cmp	r2, r3
 8016500:	d301      	bcc.n	8016506 <xTaskResumeAll.part.0+0x7a>
						xYieldPending = pdTRUE;
 8016502:	f8c9 6000 	str.w	r6, [r9]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8016506:	f8da 3000 	ldr.w	r3, [sl]
 801650a:	2b00      	cmp	r3, #0
 801650c:	d1db      	bne.n	80164c6 <xTaskResumeAll.part.0+0x3a>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801650e:	4b1e      	ldr	r3, [pc, #120]	; (8016588 <xTaskResumeAll.part.0+0xfc>)
 8016510:	681a      	ldr	r2, [r3, #0]
 8016512:	6812      	ldr	r2, [r2, #0]
 8016514:	b342      	cbz	r2, 8016568 <xTaskResumeAll.part.0+0xdc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016516:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8016518:	4b1c      	ldr	r3, [pc, #112]	; (801658c <xTaskResumeAll.part.0+0x100>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801651a:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801651c:	68d2      	ldr	r2, [r2, #12]
 801651e:	6852      	ldr	r2, [r2, #4]
 8016520:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8016522:	4e1b      	ldr	r6, [pc, #108]	; (8016590 <xTaskResumeAll.part.0+0x104>)
 8016524:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8016526:	b144      	cbz	r4, 801653a <xTaskResumeAll.part.0+0xae>
								xYieldPending = pdTRUE;
 8016528:	2501      	movs	r5, #1
							if( xTaskIncrementTick() != pdFALSE )
 801652a:	f7ff fef3 	bl	8016314 <xTaskIncrementTick>
 801652e:	b108      	cbz	r0, 8016534 <xTaskResumeAll.part.0+0xa8>
								xYieldPending = pdTRUE;
 8016530:	f8c9 5000 	str.w	r5, [r9]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8016534:	3c01      	subs	r4, #1
 8016536:	d1f8      	bne.n	801652a <xTaskResumeAll.part.0+0x9e>
						uxPendedTicks = 0;
 8016538:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 801653a:	f8d9 3000 	ldr.w	r3, [r9]
 801653e:	b15b      	cbz	r3, 8016558 <xTaskResumeAll.part.0+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
 8016540:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016544:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016548:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 801654c:	f3bf 8f4f 	dsb	sy
 8016550:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8016554:	2001      	movs	r0, #1
 8016556:	e000      	b.n	801655a <xTaskResumeAll.part.0+0xce>
BaseType_t xAlreadyYielded = pdFALSE;
 8016558:	2000      	movs	r0, #0
 801655a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 801655c:	f000 fe88 	bl	8017270 <vPortExitCritical>
}
 8016560:	9801      	ldr	r0, [sp, #4]
 8016562:	b003      	add	sp, #12
 8016564:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		xNextTaskUnblockTime = portMAX_DELAY;
 8016568:	4b08      	ldr	r3, [pc, #32]	; (801658c <xTaskResumeAll.part.0+0x100>)
 801656a:	f04f 32ff 	mov.w	r2, #4294967295
 801656e:	601a      	str	r2, [r3, #0]
 8016570:	e7d7      	b.n	8016522 <xTaskResumeAll.part.0+0x96>
 8016572:	f8df 9028 	ldr.w	r9, [pc, #40]	; 801659c <xTaskResumeAll.part.0+0x110>
 8016576:	e7d4      	b.n	8016522 <xTaskResumeAll.part.0+0x96>
 8016578:	200066bc 	.word	0x200066bc
 801657c:	200066b0 	.word	0x200066b0
 8016580:	200066c4 	.word	0x200066c4
 8016584:	20006618 	.word	0x20006618
 8016588:	2000661c 	.word	0x2000661c
 801658c:	200066f0 	.word	0x200066f0
 8016590:	200066b8 	.word	0x200066b8
 8016594:	200066f8 	.word	0x200066f8
 8016598:	20006624 	.word	0x20006624
 801659c:	2000673c 	.word	0x2000673c

080165a0 <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
 80165a0:	4b07      	ldr	r3, [pc, #28]	; (80165c0 <xTaskResumeAll+0x20>)
 80165a2:	681b      	ldr	r3, [r3, #0]
 80165a4:	b953      	cbnz	r3, 80165bc <xTaskResumeAll+0x1c>
 80165a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165aa:	b672      	cpsid	i
 80165ac:	f383 8811 	msr	BASEPRI, r3
 80165b0:	f3bf 8f6f 	isb	sy
 80165b4:	f3bf 8f4f 	dsb	sy
 80165b8:	b662      	cpsie	i
 80165ba:	e7fe      	b.n	80165ba <xTaskResumeAll+0x1a>
 80165bc:	f7ff bf66 	b.w	801648c <xTaskResumeAll.part.0>
 80165c0:	200066bc 	.word	0x200066bc

080165c4 <vTaskDelay>:
	{
 80165c4:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80165c6:	b950      	cbnz	r0, 80165de <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 80165c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80165cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80165d4:	f3bf 8f4f 	dsb	sy
 80165d8:	f3bf 8f6f 	isb	sy
	}
 80165dc:	bd10      	pop	{r4, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80165de:	4c12      	ldr	r4, [pc, #72]	; (8016628 <vTaskDelay+0x64>)
 80165e0:	6821      	ldr	r1, [r4, #0]
 80165e2:	b151      	cbz	r1, 80165fa <vTaskDelay+0x36>
 80165e4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80165e8:	b672      	cpsid	i
 80165ea:	f383 8811 	msr	BASEPRI, r3
 80165ee:	f3bf 8f6f 	isb	sy
 80165f2:	f3bf 8f4f 	dsb	sy
 80165f6:	b662      	cpsie	i
 80165f8:	e7fe      	b.n	80165f8 <vTaskDelay+0x34>
	++uxSchedulerSuspended;
 80165fa:	6823      	ldr	r3, [r4, #0]
 80165fc:	3301      	adds	r3, #1
 80165fe:	6023      	str	r3, [r4, #0]
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8016600:	f7ff fc68 	bl	8015ed4 <prvAddCurrentTaskToDelayedList>
	configASSERT( uxSchedulerSuspended );
 8016604:	6823      	ldr	r3, [r4, #0]
 8016606:	b953      	cbnz	r3, 801661e <vTaskDelay+0x5a>
 8016608:	f04f 0330 	mov.w	r3, #48	; 0x30
 801660c:	b672      	cpsid	i
 801660e:	f383 8811 	msr	BASEPRI, r3
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	f3bf 8f4f 	dsb	sy
 801661a:	b662      	cpsie	i
 801661c:	e7fe      	b.n	801661c <vTaskDelay+0x58>
 801661e:	f7ff ff35 	bl	801648c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
 8016622:	2800      	cmp	r0, #0
 8016624:	d0d0      	beq.n	80165c8 <vTaskDelay+0x4>
	}
 8016626:	bd10      	pop	{r4, pc}
 8016628:	200066bc 	.word	0x200066bc

0801662c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801662c:	4b04      	ldr	r3, [pc, #16]	; (8016640 <vTaskSwitchContext+0x14>)
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	b11b      	cbz	r3, 801663a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
 8016632:	4b04      	ldr	r3, [pc, #16]	; (8016644 <vTaskSwitchContext+0x18>)
 8016634:	2201      	movs	r2, #1
 8016636:	601a      	str	r2, [r3, #0]
}
 8016638:	4770      	bx	lr
 801663a:	f7ff bced 	b.w	8016018 <vTaskSwitchContext.part.0>
 801663e:	bf00      	nop
 8016640:	200066bc 	.word	0x200066bc
 8016644:	2000673c 	.word	0x2000673c

08016648 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8016648:	b160      	cbz	r0, 8016664 <vTaskPlaceOnEventList+0x1c>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801664a:	4b0c      	ldr	r3, [pc, #48]	; (801667c <vTaskPlaceOnEventList+0x34>)
{
 801664c:	b510      	push	{r4, lr}
 801664e:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016650:	6819      	ldr	r1, [r3, #0]
 8016652:	3118      	adds	r1, #24
 8016654:	f7fe fe0c 	bl	8015270 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016658:	4620      	mov	r0, r4
 801665a:	2101      	movs	r1, #1
}
 801665c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016660:	f7ff bc38 	b.w	8015ed4 <prvAddCurrentTaskToDelayedList>
 8016664:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016668:	b672      	cpsid	i
 801666a:	f383 8811 	msr	BASEPRI, r3
 801666e:	f3bf 8f6f 	isb	sy
 8016672:	f3bf 8f4f 	dsb	sy
 8016676:	b662      	cpsie	i
	configASSERT( pxEventList );
 8016678:	e7fe      	b.n	8016678 <vTaskPlaceOnEventList+0x30>
 801667a:	bf00      	nop
 801667c:	20006618 	.word	0x20006618

08016680 <vTaskPlaceOnEventListRestricted>:
	{
 8016680:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
 8016682:	b180      	cbz	r0, 80166a6 <vTaskPlaceOnEventListRestricted+0x26>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016684:	4b0d      	ldr	r3, [pc, #52]	; (80166bc <vTaskPlaceOnEventListRestricted+0x3c>)
 8016686:	460d      	mov	r5, r1
 8016688:	4614      	mov	r4, r2
 801668a:	6819      	ldr	r1, [r3, #0]
 801668c:	3118      	adds	r1, #24
 801668e:	f7fe fddf 	bl	8015250 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8016692:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8016694:	4621      	mov	r1, r4
 8016696:	bf0c      	ite	eq
 8016698:	4628      	moveq	r0, r5
 801669a:	f04f 30ff 	movne.w	r0, #4294967295
	}
 801669e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80166a2:	f7ff bc17 	b.w	8015ed4 <prvAddCurrentTaskToDelayedList>
 80166a6:	f04f 0330 	mov.w	r3, #48	; 0x30
 80166aa:	b672      	cpsid	i
 80166ac:	f383 8811 	msr	BASEPRI, r3
 80166b0:	f3bf 8f6f 	isb	sy
 80166b4:	f3bf 8f4f 	dsb	sy
 80166b8:	b662      	cpsie	i
		configASSERT( pxEventList );
 80166ba:	e7fe      	b.n	80166ba <vTaskPlaceOnEventListRestricted+0x3a>
 80166bc:	20006618 	.word	0x20006618

080166c0 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166c0:	68c3      	ldr	r3, [r0, #12]
{
 80166c2:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80166c4:	68dc      	ldr	r4, [r3, #12]
{
 80166c6:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
 80166c8:	b364      	cbz	r4, 8016724 <xTaskRemoveFromEventList+0x64>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80166ca:	f104 0518 	add.w	r5, r4, #24
 80166ce:	4628      	mov	r0, r5
 80166d0:	f7fe fde6 	bl	80152a0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80166d4:	4b1a      	ldr	r3, [pc, #104]	; (8016740 <xTaskRemoveFromEventList+0x80>)
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	b17b      	cbz	r3, 80166fa <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80166da:	4629      	mov	r1, r5
 80166dc:	4819      	ldr	r0, [pc, #100]	; (8016744 <xTaskRemoveFromEventList+0x84>)
 80166de:	f7fe fdb7 	bl	8015250 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80166e2:	4b19      	ldr	r3, [pc, #100]	; (8016748 <xTaskRemoveFromEventList+0x88>)
 80166e4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d925      	bls.n	801673a <xTaskRemoveFromEventList+0x7a>
		xYieldPending = pdTRUE;
 80166ee:	2301      	movs	r3, #1
 80166f0:	4a16      	ldr	r2, [pc, #88]	; (801674c <xTaskRemoveFromEventList+0x8c>)
		xReturn = pdTRUE;
 80166f2:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
 80166f4:	6013      	str	r3, [r2, #0]
}
 80166f6:	b003      	add	sp, #12
 80166f8:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80166fa:	1d21      	adds	r1, r4, #4
 80166fc:	4608      	mov	r0, r1
 80166fe:	9101      	str	r1, [sp, #4]
 8016700:	f7fe fdce 	bl	80152a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016704:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016706:	4a12      	ldr	r2, [pc, #72]	; (8016750 <xTaskRemoveFromEventList+0x90>)
 8016708:	2301      	movs	r3, #1
 801670a:	9901      	ldr	r1, [sp, #4]
 801670c:	6815      	ldr	r5, [r2, #0]
 801670e:	4083      	lsls	r3, r0
 8016710:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016714:	432b      	orrs	r3, r5
 8016716:	6013      	str	r3, [r2, #0]
 8016718:	4b0e      	ldr	r3, [pc, #56]	; (8016754 <xTaskRemoveFromEventList+0x94>)
 801671a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801671e:	f7fe fd97 	bl	8015250 <vListInsertEnd>
 8016722:	e7de      	b.n	80166e2 <xTaskRemoveFromEventList+0x22>
 8016724:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016728:	b672      	cpsid	i
 801672a:	f383 8811 	msr	BASEPRI, r3
 801672e:	f3bf 8f6f 	isb	sy
 8016732:	f3bf 8f4f 	dsb	sy
 8016736:	b662      	cpsie	i
	configASSERT( pxUnblockedTCB );
 8016738:	e7fe      	b.n	8016738 <xTaskRemoveFromEventList+0x78>
		xReturn = pdFALSE;
 801673a:	2000      	movs	r0, #0
}
 801673c:	b003      	add	sp, #12
 801673e:	bd30      	pop	{r4, r5, pc}
 8016740:	200066bc 	.word	0x200066bc
 8016744:	200066f8 	.word	0x200066f8
 8016748:	20006618 	.word	0x20006618
 801674c:	2000673c 	.word	0x2000673c
 8016750:	200066c4 	.word	0x200066c4
 8016754:	20006624 	.word	0x20006624

08016758 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8016758:	4a03      	ldr	r2, [pc, #12]	; (8016768 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 801675a:	4b04      	ldr	r3, [pc, #16]	; (801676c <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801675c:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801675e:	681b      	ldr	r3, [r3, #0]
 8016760:	e9c0 2300 	strd	r2, r3, [r0]
}
 8016764:	4770      	bx	lr
 8016766:	bf00      	nop
 8016768:	200066f4 	.word	0x200066f4
 801676c:	20006738 	.word	0x20006738

08016770 <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
 8016770:	b338      	cbz	r0, 80167c2 <xTaskCheckForTimeOut+0x52>
{
 8016772:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016774:	460d      	mov	r5, r1
 8016776:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
 8016778:	b1c1      	cbz	r1, 80167ac <xTaskCheckForTimeOut+0x3c>
 801677a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 801677c:	f000 fd52 	bl	8017224 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
 8016780:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
 8016782:	4a1f      	ldr	r2, [pc, #124]	; (8016800 <xTaskCheckForTimeOut+0x90>)
			if( *pxTicksToWait == portMAX_DELAY )
 8016784:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
 8016786:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8016788:	d034      	beq.n	80167f4 <xTaskCheckForTimeOut+0x84>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801678a:	f8df c078 	ldr.w	ip, [pc, #120]	; 8016804 <xTaskCheckForTimeOut+0x94>
 801678e:	6826      	ldr	r6, [r4, #0]
 8016790:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016794:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8016796:	42be      	cmp	r6, r7
 8016798:	d01e      	beq.n	80167d8 <xTaskCheckForTimeOut+0x68>
 801679a:	4288      	cmp	r0, r1
 801679c:	d81c      	bhi.n	80167d8 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
 801679e:	2001      	movs	r0, #1
 80167a0:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
 80167a2:	f000 fd65 	bl	8017270 <vPortExitCritical>
}
 80167a6:	9801      	ldr	r0, [sp, #4]
 80167a8:	b003      	add	sp, #12
 80167aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80167ac:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167b0:	b672      	cpsid	i
 80167b2:	f383 8811 	msr	BASEPRI, r3
 80167b6:	f3bf 8f6f 	isb	sy
 80167ba:	f3bf 8f4f 	dsb	sy
 80167be:	b662      	cpsie	i
	configASSERT( pxTicksToWait );
 80167c0:	e7fe      	b.n	80167c0 <xTaskCheckForTimeOut+0x50>
 80167c2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80167c6:	b672      	cpsid	i
 80167c8:	f383 8811 	msr	BASEPRI, r3
 80167cc:	f3bf 8f6f 	isb	sy
 80167d0:	f3bf 8f4f 	dsb	sy
 80167d4:	b662      	cpsie	i
	configASSERT( pxTimeOut );
 80167d6:	e7fe      	b.n	80167d6 <xTaskCheckForTimeOut+0x66>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80167d8:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80167dc:	4573      	cmp	r3, lr
 80167de:	d90b      	bls.n	80167f8 <xTaskCheckForTimeOut+0x88>
			*pxTicksToWait -= xElapsedTime;
 80167e0:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80167e2:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167e6:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
 80167e8:	4403      	add	r3, r0
			xReturn = pdFALSE;
 80167ea:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
 80167ec:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80167ee:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
 80167f2:	e7d5      	b.n	80167a0 <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
 80167f4:	2000      	movs	r0, #0
 80167f6:	e7d3      	b.n	80167a0 <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
 80167f8:	2300      	movs	r3, #0
			xReturn = pdTRUE;
 80167fa:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
 80167fc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 80167fe:	e7cf      	b.n	80167a0 <xTaskCheckForTimeOut+0x30>
 8016800:	20006738 	.word	0x20006738
 8016804:	200066f4 	.word	0x200066f4

08016808 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8016808:	4b01      	ldr	r3, [pc, #4]	; (8016810 <vTaskMissedYield+0x8>)
 801680a:	2201      	movs	r2, #1
 801680c:	601a      	str	r2, [r3, #0]
}
 801680e:	4770      	bx	lr
 8016810:	2000673c 	.word	0x2000673c

08016814 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 8016814:	4b01      	ldr	r3, [pc, #4]	; (801681c <xTaskGetCurrentTaskHandle+0x8>)
 8016816:	6818      	ldr	r0, [r3, #0]
	}
 8016818:	4770      	bx	lr
 801681a:	bf00      	nop
 801681c:	20006618 	.word	0x20006618

08016820 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8016820:	4b05      	ldr	r3, [pc, #20]	; (8016838 <xTaskGetSchedulerState+0x18>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	b133      	cbz	r3, 8016834 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016826:	4b05      	ldr	r3, [pc, #20]	; (801683c <xTaskGetSchedulerState+0x1c>)
 8016828:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
 801682a:	2b00      	cmp	r3, #0
 801682c:	bf0c      	ite	eq
 801682e:	2002      	moveq	r0, #2
 8016830:	2000      	movne	r0, #0
 8016832:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8016834:	2001      	movs	r0, #1
	}
 8016836:	4770      	bx	lr
 8016838:	2000670c 	.word	0x2000670c
 801683c:	200066bc 	.word	0x200066bc

08016840 <xTaskPriorityInherit>:
	{
 8016840:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8016842:	4604      	mov	r4, r0
	{
 8016844:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
 8016846:	b1c8      	cbz	r0, 801687c <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8016848:	4d26      	ldr	r5, [pc, #152]	; (80168e4 <xTaskPriorityInherit+0xa4>)
 801684a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 801684c:	682a      	ldr	r2, [r5, #0]
 801684e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8016850:	4293      	cmp	r3, r2
 8016852:	d215      	bcs.n	8016880 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016854:	6982      	ldr	r2, [r0, #24]
 8016856:	2a00      	cmp	r2, #0
 8016858:	db04      	blt.n	8016864 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801685a:	682a      	ldr	r2, [r5, #0]
 801685c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 801685e:	f1c2 0207 	rsb	r2, r2, #7
 8016862:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8016864:	4e20      	ldr	r6, [pc, #128]	; (80168e8 <xTaskPriorityInherit+0xa8>)
 8016866:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801686a:	6962      	ldr	r2, [r4, #20]
 801686c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016870:	429a      	cmp	r2, r3
 8016872:	d00e      	beq.n	8016892 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016874:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
 8016876:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801687a:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
 801687c:	b002      	add	sp, #8
 801687e:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8016880:	682b      	ldr	r3, [r5, #0]
 8016882:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016886:	4298      	cmp	r0, r3
 8016888:	bf2c      	ite	cs
 801688a:	2000      	movcs	r0, #0
 801688c:	2001      	movcc	r0, #1
	}
 801688e:	b002      	add	sp, #8
 8016890:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016892:	1d21      	adds	r1, r4, #4
 8016894:	4608      	mov	r0, r1
 8016896:	9101      	str	r1, [sp, #4]
 8016898:	f7fe fd02 	bl	80152a0 <uxListRemove>
 801689c:	9901      	ldr	r1, [sp, #4]
 801689e:	b970      	cbnz	r0, 80168be <xTaskPriorityInherit+0x7e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80168a0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80168a2:	4a12      	ldr	r2, [pc, #72]	; (80168ec <xTaskPriorityInherit+0xac>)
 80168a4:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 80168a8:	009b      	lsls	r3, r3, #2
 80168aa:	58f3      	ldr	r3, [r6, r3]
 80168ac:	b943      	cbnz	r3, 80168c0 <xTaskPriorityInherit+0x80>
 80168ae:	2301      	movs	r3, #1
 80168b0:	fa03 f000 	lsl.w	r0, r3, r0
 80168b4:	6813      	ldr	r3, [r2, #0]
 80168b6:	ea23 0300 	bic.w	r3, r3, r0
 80168ba:	6013      	str	r3, [r2, #0]
 80168bc:	e000      	b.n	80168c0 <xTaskPriorityInherit+0x80>
 80168be:	4a0b      	ldr	r2, [pc, #44]	; (80168ec <xTaskPriorityInherit+0xac>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80168c0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80168c2:	6815      	ldr	r5, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80168c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80168c6:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80168c8:	2401      	movs	r4, #1
 80168ca:	eb03 0083 	add.w	r0, r3, r3, lsl #2
 80168ce:	fa04 f303 	lsl.w	r3, r4, r3
 80168d2:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 80168d6:	432b      	orrs	r3, r5
 80168d8:	6013      	str	r3, [r2, #0]
 80168da:	f7fe fcb9 	bl	8015250 <vListInsertEnd>
				xReturn = pdTRUE;
 80168de:	4620      	mov	r0, r4
 80168e0:	e7cc      	b.n	801687c <xTaskPriorityInherit+0x3c>
 80168e2:	bf00      	nop
 80168e4:	20006618 	.word	0x20006618
 80168e8:	20006624 	.word	0x20006624
 80168ec:	200066c4 	.word	0x200066c4

080168f0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80168f0:	b340      	cbz	r0, 8016944 <xTaskPriorityDisinherit+0x54>
			configASSERT( pxTCB == pxCurrentTCB );
 80168f2:	4b2c      	ldr	r3, [pc, #176]	; (80169a4 <xTaskPriorityDisinherit+0xb4>)
 80168f4:	681b      	ldr	r3, [r3, #0]
 80168f6:	4283      	cmp	r3, r0
	{
 80168f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80168fa:	4604      	mov	r4, r0
 80168fc:	b083      	sub	sp, #12
			configASSERT( pxTCB == pxCurrentTCB );
 80168fe:	d00a      	beq.n	8016916 <xTaskPriorityDisinherit+0x26>
 8016900:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016904:	b672      	cpsid	i
 8016906:	f383 8811 	msr	BASEPRI, r3
 801690a:	f3bf 8f6f 	isb	sy
 801690e:	f3bf 8f4f 	dsb	sy
 8016912:	b662      	cpsie	i
 8016914:	e7fe      	b.n	8016914 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8016916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8016918:	b14b      	cbz	r3, 801692e <xTaskPriorityDisinherit+0x3e>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801691a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 801691c:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801691e:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8016920:	6483      	str	r3, [r0, #72]	; 0x48
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016922:	4291      	cmp	r1, r2
 8016924:	d000      	beq.n	8016928 <xTaskPriorityDisinherit+0x38>
 8016926:	b17b      	cbz	r3, 8016948 <xTaskPriorityDisinherit+0x58>
	BaseType_t xReturn = pdFALSE;
 8016928:	2000      	movs	r0, #0
	}
 801692a:	b003      	add	sp, #12
 801692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801692e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016932:	b672      	cpsid	i
 8016934:	f383 8811 	msr	BASEPRI, r3
 8016938:	f3bf 8f6f 	isb	sy
 801693c:	f3bf 8f4f 	dsb	sy
 8016940:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 8016942:	e7fe      	b.n	8016942 <xTaskPriorityDisinherit+0x52>
	BaseType_t xReturn = pdFALSE;
 8016944:	2000      	movs	r0, #0
	}
 8016946:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016948:	1d01      	adds	r1, r0, #4
 801694a:	4608      	mov	r0, r1
 801694c:	9101      	str	r1, [sp, #4]
 801694e:	f7fe fca7 	bl	80152a0 <uxListRemove>
 8016952:	9901      	ldr	r1, [sp, #4]
 8016954:	b1a0      	cbz	r0, 8016980 <xTaskPriorityDisinherit+0x90>
 8016956:	4814      	ldr	r0, [pc, #80]	; (80169a8 <xTaskPriorityDisinherit+0xb8>)
 8016958:	4a14      	ldr	r2, [pc, #80]	; (80169ac <xTaskPriorityDisinherit+0xbc>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801695a:	6c63      	ldr	r3, [r4, #68]	; 0x44
					prvAddTaskToReadyList( pxTCB );
 801695c:	2501      	movs	r5, #1
 801695e:	6816      	ldr	r6, [r2, #0]
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016960:	f1c3 0707 	rsb	r7, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016964:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016966:	61a7      	str	r7, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8016968:	fa05 f403 	lsl.w	r4, r5, r3
 801696c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8016970:	4334      	orrs	r4, r6
 8016972:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8016976:	6014      	str	r4, [r2, #0]
 8016978:	f7fe fc6a 	bl	8015250 <vListInsertEnd>
					xReturn = pdTRUE;
 801697c:	4628      	mov	r0, r5
		return xReturn;
 801697e:	e7d4      	b.n	801692a <xTaskPriorityDisinherit+0x3a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016980:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8016982:	4809      	ldr	r0, [pc, #36]	; (80169a8 <xTaskPriorityDisinherit+0xb8>)
 8016984:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8016988:	4a08      	ldr	r2, [pc, #32]	; (80169ac <xTaskPriorityDisinherit+0xbc>)
 801698a:	009b      	lsls	r3, r3, #2
 801698c:	58c3      	ldr	r3, [r0, r3]
 801698e:	2b00      	cmp	r3, #0
 8016990:	d1e3      	bne.n	801695a <xTaskPriorityDisinherit+0x6a>
 8016992:	2301      	movs	r3, #1
 8016994:	fa03 f505 	lsl.w	r5, r3, r5
 8016998:	6813      	ldr	r3, [r2, #0]
 801699a:	ea23 0305 	bic.w	r3, r3, r5
 801699e:	6013      	str	r3, [r2, #0]
 80169a0:	e7db      	b.n	801695a <xTaskPriorityDisinherit+0x6a>
 80169a2:	bf00      	nop
 80169a4:	20006618 	.word	0x20006618
 80169a8:	20006624 	.word	0x20006624
 80169ac:	200066c4 	.word	0x200066c4

080169b0 <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80169b0:	2800      	cmp	r0, #0
 80169b2:	d044      	beq.n	8016a3e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 80169b4:	6c83      	ldr	r3, [r0, #72]	; 0x48
	{
 80169b6:	b530      	push	{r4, r5, lr}
 80169b8:	4604      	mov	r4, r0
 80169ba:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
 80169bc:	b153      	cbz	r3, 80169d4 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80169be:	6c40      	ldr	r0, [r0, #68]	; 0x44
			if( pxTCB->uxPriority != uxPriorityToUse )
 80169c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80169c2:	4281      	cmp	r1, r0
 80169c4:	bf38      	it	cc
 80169c6:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80169c8:	428a      	cmp	r2, r1
 80169ca:	d001      	beq.n	80169d0 <vTaskPriorityDisinheritAfterTimeout+0x20>
 80169cc:	2b01      	cmp	r3, #1
 80169ce:	d00c      	beq.n	80169ea <vTaskPriorityDisinheritAfterTimeout+0x3a>
	}
 80169d0:	b003      	add	sp, #12
 80169d2:	bd30      	pop	{r4, r5, pc}
 80169d4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80169d8:	b672      	cpsid	i
 80169da:	f383 8811 	msr	BASEPRI, r3
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	b662      	cpsie	i
			configASSERT( pxTCB->uxMutexesHeld );
 80169e8:	e7fe      	b.n	80169e8 <vTaskPriorityDisinheritAfterTimeout+0x38>
					configASSERT( pxTCB != pxCurrentTCB );
 80169ea:	4b25      	ldr	r3, [pc, #148]	; (8016a80 <vTaskPriorityDisinheritAfterTimeout+0xd0>)
 80169ec:	681b      	ldr	r3, [r3, #0]
 80169ee:	42a3      	cmp	r3, r4
 80169f0:	d026      	beq.n	8016a40 <vTaskPriorityDisinheritAfterTimeout+0x90>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80169f2:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
 80169f4:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	db02      	blt.n	8016a00 <vTaskPriorityDisinheritAfterTimeout+0x50>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80169fa:	f1c1 0107 	rsb	r1, r1, #7
 80169fe:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016a00:	4d20      	ldr	r5, [pc, #128]	; (8016a84 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8016a02:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8016a06:	6961      	ldr	r1, [r4, #20]
 8016a08:	eb05 0382 	add.w	r3, r5, r2, lsl #2
 8016a0c:	4299      	cmp	r1, r3
 8016a0e:	d1df      	bne.n	80169d0 <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a10:	1d21      	adds	r1, r4, #4
 8016a12:	4608      	mov	r0, r1
 8016a14:	9101      	str	r1, [sp, #4]
 8016a16:	f7fe fc43 	bl	80152a0 <uxListRemove>
 8016a1a:	9901      	ldr	r1, [sp, #4]
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016a1c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016a1e:	b1d0      	cbz	r0, 8016a56 <vTaskPriorityDisinheritAfterTimeout+0xa6>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016a20:	2301      	movs	r3, #1
 8016a22:	0090      	lsls	r0, r2, #2
 8016a24:	4c18      	ldr	r4, [pc, #96]	; (8016a88 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016a26:	4093      	lsls	r3, r2
						prvAddTaskToReadyList( pxTCB );
 8016a28:	4410      	add	r0, r2
 8016a2a:	6822      	ldr	r2, [r4, #0]
 8016a2c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8016a30:	4313      	orrs	r3, r2
 8016a32:	6023      	str	r3, [r4, #0]
	}
 8016a34:	b003      	add	sp, #12
 8016a36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
 8016a3a:	f7fe bc09 	b.w	8015250 <vListInsertEnd>
 8016a3e:	4770      	bx	lr
 8016a40:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016a44:	b672      	cpsid	i
 8016a46:	f383 8811 	msr	BASEPRI, r3
 8016a4a:	f3bf 8f6f 	isb	sy
 8016a4e:	f3bf 8f4f 	dsb	sy
 8016a52:	b662      	cpsie	i
					configASSERT( pxTCB != pxCurrentTCB );
 8016a54:	e7fe      	b.n	8016a54 <vTaskPriorityDisinheritAfterTimeout+0xa4>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8016a56:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8016a5a:	0090      	lsls	r0, r2, #2
 8016a5c:	009b      	lsls	r3, r3, #2
 8016a5e:	58eb      	ldr	r3, [r5, r3]
 8016a60:	b11b      	cbz	r3, 8016a6a <vTaskPriorityDisinheritAfterTimeout+0xba>
 8016a62:	2301      	movs	r3, #1
 8016a64:	4c08      	ldr	r4, [pc, #32]	; (8016a88 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016a66:	4093      	lsls	r3, r2
 8016a68:	e7de      	b.n	8016a28 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016a6a:	4c07      	ldr	r4, [pc, #28]	; (8016a88 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8016a6c:	2301      	movs	r3, #1
 8016a6e:	f8d4 c000 	ldr.w	ip, [r4]
 8016a72:	4093      	lsls	r3, r2
 8016a74:	ea2c 0c03 	bic.w	ip, ip, r3
 8016a78:	f8c4 c000 	str.w	ip, [r4]
 8016a7c:	e7d4      	b.n	8016a28 <vTaskPriorityDisinheritAfterTimeout+0x78>
 8016a7e:	bf00      	nop
 8016a80:	20006618 	.word	0x20006618
 8016a84:	20006624 	.word	0x20006624
 8016a88:	200066c4 	.word	0x200066c4

08016a8c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8016a8c:	4b04      	ldr	r3, [pc, #16]	; (8016aa0 <pvTaskIncrementMutexHeldCount+0x14>)
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	b11a      	cbz	r2, 8016a9a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8016a92:	6819      	ldr	r1, [r3, #0]
 8016a94:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8016a96:	3201      	adds	r2, #1
 8016a98:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8016a9a:	6818      	ldr	r0, [r3, #0]
	}
 8016a9c:	4770      	bx	lr
 8016a9e:	bf00      	nop
 8016aa0:	20006618 	.word	0x20006618

08016aa4 <ulTaskNotifyTake>:
	{
 8016aa4:	b570      	push	{r4, r5, r6, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016aa6:	4c1a      	ldr	r4, [pc, #104]	; (8016b10 <ulTaskNotifyTake+0x6c>)
	{
 8016aa8:	4606      	mov	r6, r0
 8016aaa:	460d      	mov	r5, r1
		taskENTER_CRITICAL();
 8016aac:	f000 fbba 	bl	8017224 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8016ab0:	6823      	ldr	r3, [r4, #0]
 8016ab2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8016ab6:	b923      	cbnz	r3, 8016ac2 <ulTaskNotifyTake+0x1e>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8016ab8:	6823      	ldr	r3, [r4, #0]
 8016aba:	2101      	movs	r1, #1
 8016abc:	f883 10b0 	strb.w	r1, [r3, #176]	; 0xb0
				if( xTicksToWait > ( TickType_t ) 0 )
 8016ac0:	b9c5      	cbnz	r5, 8016af4 <ulTaskNotifyTake+0x50>
		taskEXIT_CRITICAL();
 8016ac2:	f000 fbd5 	bl	8017270 <vPortExitCritical>
		taskENTER_CRITICAL();
 8016ac6:	f000 fbad 	bl	8017224 <vPortEnterCritical>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8016aca:	6823      	ldr	r3, [r4, #0]
 8016acc:	f8d3 50ac 	ldr.w	r5, [r3, #172]	; 0xac
			if( ulReturn != 0UL )
 8016ad0:	b125      	cbz	r5, 8016adc <ulTaskNotifyTake+0x38>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016ad2:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 8016ad4:	b156      	cbz	r6, 8016aec <ulTaskNotifyTake+0x48>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8016adc:	6823      	ldr	r3, [r4, #0]
 8016ade:	2200      	movs	r2, #0
 8016ae0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
		taskEXIT_CRITICAL();
 8016ae4:	f000 fbc4 	bl	8017270 <vPortExitCritical>
	}
 8016ae8:	4628      	mov	r0, r5
 8016aea:	bd70      	pop	{r4, r5, r6, pc}
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8016aec:	1e6a      	subs	r2, r5, #1
 8016aee:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8016af2:	e7f3      	b.n	8016adc <ulTaskNotifyTake+0x38>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8016af4:	4628      	mov	r0, r5
 8016af6:	f7ff f9ed 	bl	8015ed4 <prvAddCurrentTaskToDelayedList>
					portYIELD_WITHIN_API();
 8016afa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8016afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016b02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8016b06:	f3bf 8f4f 	dsb	sy
 8016b0a:	f3bf 8f6f 	isb	sy
 8016b0e:	e7d8      	b.n	8016ac2 <ulTaskNotifyTake+0x1e>
 8016b10:	20006618 	.word	0x20006618

08016b14 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 8016b14:	b318      	cbz	r0, 8016b5e <vTaskNotifyGiveFromISR+0x4a>
	{
 8016b16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016b18:	b083      	sub	sp, #12
 8016b1a:	4604      	mov	r4, r0
 8016b1c:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016b1e:	f000 fc87 	bl	8017430 <vPortValidateInterruptPriority>
	__asm volatile
 8016b22:	f3ef 8611 	mrs	r6, BASEPRI
 8016b26:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b2a:	b672      	cpsid	i
 8016b2c:	f383 8811 	msr	BASEPRI, r3
 8016b30:	f3bf 8f6f 	isb	sy
 8016b34:	f3bf 8f4f 	dsb	sy
 8016b38:	b662      	cpsie	i
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016b3a:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016b3c:	f894 20b0 	ldrb.w	r2, [r4, #176]	; 0xb0
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016b40:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016b44:	2a01      	cmp	r2, #1
			( pxTCB->ulNotifiedValue )++;
 8016b46:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016b4a:	b2d7      	uxtb	r7, r2
			( pxTCB->ulNotifiedValue )++;
 8016b4c:	f103 0301 	add.w	r3, r3, #1
 8016b50:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8016b54:	d00e      	beq.n	8016b74 <vTaskNotifyGiveFromISR+0x60>
	__asm volatile
 8016b56:	f386 8811 	msr	BASEPRI, r6
	}
 8016b5a:	b003      	add	sp, #12
 8016b5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	__asm volatile
 8016b5e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b62:	b672      	cpsid	i
 8016b64:	f383 8811 	msr	BASEPRI, r3
 8016b68:	f3bf 8f6f 	isb	sy
 8016b6c:	f3bf 8f4f 	dsb	sy
 8016b70:	b662      	cpsie	i
		configASSERT( xTaskToNotify );
 8016b72:	e7fe      	b.n	8016b72 <vTaskNotifyGiveFromISR+0x5e>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016b74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016b76:	b153      	cbz	r3, 8016b8e <vTaskNotifyGiveFromISR+0x7a>
 8016b78:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016b7c:	b672      	cpsid	i
 8016b7e:	f383 8811 	msr	BASEPRI, r3
 8016b82:	f3bf 8f6f 	isb	sy
 8016b86:	f3bf 8f4f 	dsb	sy
 8016b8a:	b662      	cpsie	i
 8016b8c:	e7fe      	b.n	8016b8c <vTaskNotifyGiveFromISR+0x78>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016b8e:	4b14      	ldr	r3, [pc, #80]	; (8016be0 <vTaskNotifyGiveFromISR+0xcc>)
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	b18b      	cbz	r3, 8016bb8 <vTaskNotifyGiveFromISR+0xa4>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016b94:	f104 0118 	add.w	r1, r4, #24
 8016b98:	4812      	ldr	r0, [pc, #72]	; (8016be4 <vTaskNotifyGiveFromISR+0xd0>)
 8016b9a:	f7fe fb59 	bl	8015250 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016b9e:	4b12      	ldr	r3, [pc, #72]	; (8016be8 <vTaskNotifyGiveFromISR+0xd4>)
 8016ba0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d9d5      	bls.n	8016b56 <vTaskNotifyGiveFromISR+0x42>
					if( pxHigherPriorityTaskWoken != NULL )
 8016baa:	b10d      	cbz	r5, 8016bb0 <vTaskNotifyGiveFromISR+0x9c>
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016bac:	2301      	movs	r3, #1
 8016bae:	602b      	str	r3, [r5, #0]
					xYieldPending = pdTRUE;
 8016bb0:	4b0e      	ldr	r3, [pc, #56]	; (8016bec <vTaskNotifyGiveFromISR+0xd8>)
 8016bb2:	2201      	movs	r2, #1
 8016bb4:	601a      	str	r2, [r3, #0]
 8016bb6:	e7ce      	b.n	8016b56 <vTaskNotifyGiveFromISR+0x42>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016bb8:	1d21      	adds	r1, r4, #4
 8016bba:	4608      	mov	r0, r1
 8016bbc:	9101      	str	r1, [sp, #4]
 8016bbe:	f7fe fb6f 	bl	80152a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016bc2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8016bc4:	4b0a      	ldr	r3, [pc, #40]	; (8016bf0 <vTaskNotifyGiveFromISR+0xdc>)
 8016bc6:	4087      	lsls	r7, r0
 8016bc8:	4a0a      	ldr	r2, [pc, #40]	; (8016bf4 <vTaskNotifyGiveFromISR+0xe0>)
 8016bca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8016bce:	9901      	ldr	r1, [sp, #4]
 8016bd0:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8016bd4:	681a      	ldr	r2, [r3, #0]
 8016bd6:	4317      	orrs	r7, r2
 8016bd8:	601f      	str	r7, [r3, #0]
 8016bda:	f7fe fb39 	bl	8015250 <vListInsertEnd>
 8016bde:	e7de      	b.n	8016b9e <vTaskNotifyGiveFromISR+0x8a>
 8016be0:	200066bc 	.word	0x200066bc
 8016be4:	200066f8 	.word	0x200066f8
 8016be8:	20006618 	.word	0x20006618
 8016bec:	2000673c 	.word	0x2000673c
 8016bf0:	200066c4 	.word	0x200066c4
 8016bf4:	20006624 	.word	0x20006624

08016bf8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8016bfa:	4c12      	ldr	r4, [pc, #72]	; (8016c44 <prvCheckForValidListAndQueue+0x4c>)
{
 8016bfc:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
 8016bfe:	f000 fb11 	bl	8017224 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8016c02:	6825      	ldr	r5, [r4, #0]
 8016c04:	b125      	cbz	r5, 8016c10 <prvCheckForValidListAndQueue+0x18>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8016c06:	b003      	add	sp, #12
 8016c08:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8016c0c:	f000 bb30 	b.w	8017270 <vPortExitCritical>
			vListInitialise( &xActiveTimerList1 );
 8016c10:	4f0d      	ldr	r7, [pc, #52]	; (8016c48 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList2 );
 8016c12:	4e0e      	ldr	r6, [pc, #56]	; (8016c4c <prvCheckForValidListAndQueue+0x54>)
			vListInitialise( &xActiveTimerList1 );
 8016c14:	4638      	mov	r0, r7
 8016c16:	f7fe fb0b 	bl	8015230 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016c1a:	4630      	mov	r0, r6
 8016c1c:	f7fe fb08 	bl	8015230 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8016c20:	4a0b      	ldr	r2, [pc, #44]	; (8016c50 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016c22:	9500      	str	r5, [sp, #0]
 8016c24:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 8016c26:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016c28:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8016c2a:	4a0a      	ldr	r2, [pc, #40]	; (8016c54 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016c2c:	4b0a      	ldr	r3, [pc, #40]	; (8016c58 <prvCheckForValidListAndQueue+0x60>)
			pxOverflowTimerList = &xActiveTimerList2;
 8016c2e:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8016c30:	4a0a      	ldr	r2, [pc, #40]	; (8016c5c <prvCheckForValidListAndQueue+0x64>)
 8016c32:	f7fe fc19 	bl	8015468 <xQueueGenericCreateStatic>
 8016c36:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
 8016c38:	2800      	cmp	r0, #0
 8016c3a:	d0e4      	beq.n	8016c06 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8016c3c:	4908      	ldr	r1, [pc, #32]	; (8016c60 <prvCheckForValidListAndQueue+0x68>)
 8016c3e:	f7ff f881 	bl	8015d44 <vQueueAddToRegistry>
 8016c42:	e7e0      	b.n	8016c06 <prvCheckForValidListAndQueue+0xe>
 8016c44:	2000685c 	.word	0x2000685c
 8016c48:	200067e8 	.word	0x200067e8
 8016c4c:	200067fc 	.word	0x200067fc
 8016c50:	20006740 	.word	0x20006740
 8016c54:	20006744 	.word	0x20006744
 8016c58:	20006814 	.word	0x20006814
 8016c5c:	20006748 	.word	0x20006748
 8016c60:	0802c71c 	.word	0x0802c71c

08016c64 <xTimerCreateTimerTask>:
{
 8016c64:	b530      	push	{r4, r5, lr}
 8016c66:	b089      	sub	sp, #36	; 0x24
	prvCheckForValidListAndQueue();
 8016c68:	f7ff ffc6 	bl	8016bf8 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8016c6c:	4b13      	ldr	r3, [pc, #76]	; (8016cbc <xTimerCreateTimerTask+0x58>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	b1cb      	cbz	r3, 8016ca6 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016c72:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016c74:	aa07      	add	r2, sp, #28
 8016c76:	a906      	add	r1, sp, #24
 8016c78:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016c7a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016c7c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016c80:	f7ea fb02 	bl	8001288 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016c84:	4623      	mov	r3, r4
 8016c86:	9a07      	ldr	r2, [sp, #28]
 8016c88:	9500      	str	r5, [sp, #0]
 8016c8a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
 8016c8e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8016c92:	490b      	ldr	r1, [pc, #44]	; (8016cc0 <xTimerCreateTimerTask+0x5c>)
 8016c94:	480b      	ldr	r0, [pc, #44]	; (8016cc4 <xTimerCreateTimerTask+0x60>)
 8016c96:	f7ff fa61 	bl	801615c <xTaskCreateStatic>
 8016c9a:	4b0b      	ldr	r3, [pc, #44]	; (8016cc8 <xTimerCreateTimerTask+0x64>)
 8016c9c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8016c9e:	b110      	cbz	r0, 8016ca6 <xTimerCreateTimerTask+0x42>
}
 8016ca0:	2001      	movs	r0, #1
 8016ca2:	b009      	add	sp, #36	; 0x24
 8016ca4:	bd30      	pop	{r4, r5, pc}
 8016ca6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016caa:	b672      	cpsid	i
 8016cac:	f383 8811 	msr	BASEPRI, r3
 8016cb0:	f3bf 8f6f 	isb	sy
 8016cb4:	f3bf 8f4f 	dsb	sy
 8016cb8:	b662      	cpsie	i
	configASSERT( xReturn );
 8016cba:	e7fe      	b.n	8016cba <xTimerCreateTimerTask+0x56>
 8016cbc:	2000685c 	.word	0x2000685c
 8016cc0:	0802c724 	.word	0x0802c724
 8016cc4:	08016ec5 	.word	0x08016ec5
 8016cc8:	20006860 	.word	0x20006860

08016ccc <xTimerCreate>:
	{
 8016ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016cd0:	4607      	mov	r7, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016cd2:	2028      	movs	r0, #40	; 0x28
	{
 8016cd4:	4688      	mov	r8, r1
 8016cd6:	4615      	mov	r5, r2
 8016cd8:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016cda:	f000 fc0d 	bl	80174f8 <pvPortMalloc>
		if( pxNewTimer != NULL )
 8016cde:	4604      	mov	r4, r0
 8016ce0:	b1b0      	cbz	r0, 8016d10 <xTimerCreate+0x44>
			pxNewTimer->ucStatus = 0x00;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016ce8:	f1b8 0f00 	cmp.w	r8, #0
 8016cec:	d013      	beq.n	8016d16 <xTimerCreate+0x4a>
		prvCheckForValidListAndQueue();
 8016cee:	f7ff ff83 	bl	8016bf8 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016cf2:	9b06      	ldr	r3, [sp, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016cf4:	1d20      	adds	r0, r4, #4
		pxNewTimer->pcTimerName = pcTimerName;
 8016cf6:	6027      	str	r7, [r4, #0]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016cf8:	6223      	str	r3, [r4, #32]
		pxNewTimer->pvTimerID = pvTimerID;
 8016cfa:	e9c4 8606 	strd	r8, r6, [r4, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016cfe:	f7fe faa3 	bl	8015248 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016d02:	b12d      	cbz	r5, 8016d10 <xTimerCreate+0x44>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016d04:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8016d08:	f043 0304 	orr.w	r3, r3, #4
 8016d0c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	}
 8016d10:	4620      	mov	r0, r4
 8016d12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016d16:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d1a:	b672      	cpsid	i
 8016d1c:	f383 8811 	msr	BASEPRI, r3
 8016d20:	f3bf 8f6f 	isb	sy
 8016d24:	f3bf 8f4f 	dsb	sy
 8016d28:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016d2a:	e7fe      	b.n	8016d2a <xTimerCreate+0x5e>

08016d2c <xTimerCreateStatic>:
	{
 8016d2c:	b530      	push	{r4, r5, lr}
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016d2e:	2428      	movs	r4, #40	; 0x28
	{
 8016d30:	b087      	sub	sp, #28
			volatile size_t xSize = sizeof( StaticTimer_t );
 8016d32:	9405      	str	r4, [sp, #20]
			configASSERT( xSize == sizeof( Timer_t ) );
 8016d34:	9d05      	ldr	r5, [sp, #20]
 8016d36:	2d28      	cmp	r5, #40	; 0x28
 8016d38:	d00a      	beq.n	8016d50 <xTimerCreateStatic+0x24>
 8016d3a:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016d3e:	b672      	cpsid	i
 8016d40:	f383 8811 	msr	BASEPRI, r3
 8016d44:	f3bf 8f6f 	isb	sy
 8016d48:	f3bf 8f4f 	dsb	sy
 8016d4c:	b662      	cpsie	i
 8016d4e:	e7fe      	b.n	8016d4e <xTimerCreateStatic+0x22>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016d50:	4604      	mov	r4, r0
 8016d52:	9805      	ldr	r0, [sp, #20]
		configASSERT( pxTimerBuffer );
 8016d54:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016d56:	b318      	cbz	r0, 8016da0 <xTimerCreateStatic+0x74>
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8016d58:	2002      	movs	r0, #2
 8016d5a:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8016d5c:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016d60:	b349      	cbz	r1, 8016db6 <xTimerCreateStatic+0x8a>
		prvCheckForValidListAndQueue();
 8016d62:	9101      	str	r1, [sp, #4]
 8016d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016d68:	f7ff ff46 	bl	8016bf8 <prvCheckForValidListAndQueue>
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016d6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016d6e:	9901      	ldr	r1, [sp, #4]
		pxNewTimer->pvTimerID = pvTimerID;
 8016d70:	461a      	mov	r2, r3
		pxNewTimer->pcTimerName = pcTimerName;
 8016d72:	601c      	str	r4, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016d74:	6199      	str	r1, [r3, #24]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016d76:	1d18      	adds	r0, r3, #4
		pxNewTimer->pvTimerID = pvTimerID;
 8016d78:	9b03      	ldr	r3, [sp, #12]
 8016d7a:	61d3      	str	r3, [r2, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016d7c:	4613      	mov	r3, r2
 8016d7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d80:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016d82:	f7fe fa61 	bl	8015248 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016d86:	9a02      	ldr	r2, [sp, #8]
 8016d88:	b13a      	cbz	r2, 8016d9a <xTimerCreateStatic+0x6e>
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016d8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016d8c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8016d8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8016d92:	f043 0304 	orr.w	r3, r3, #4
 8016d96:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
	}
 8016d9a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016d9c:	b007      	add	sp, #28
 8016d9e:	bd30      	pop	{r4, r5, pc}
 8016da0:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016da4:	b672      	cpsid	i
 8016da6:	f383 8811 	msr	BASEPRI, r3
 8016daa:	f3bf 8f6f 	isb	sy
 8016dae:	f3bf 8f4f 	dsb	sy
 8016db2:	b662      	cpsie	i
		configASSERT( pxTimerBuffer );
 8016db4:	e7fe      	b.n	8016db4 <xTimerCreateStatic+0x88>
 8016db6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016dba:	b672      	cpsid	i
 8016dbc:	f383 8811 	msr	BASEPRI, r3
 8016dc0:	f3bf 8f6f 	isb	sy
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	b662      	cpsie	i
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016dca:	e7fe      	b.n	8016dca <xTimerCreateStatic+0x9e>

08016dcc <xTimerGenericCommand>:
	configASSERT( xTimer );
 8016dcc:	b1c8      	cbz	r0, 8016e02 <xTimerGenericCommand+0x36>
{
 8016dce:	b530      	push	{r4, r5, lr}
	if( xTimerQueue != NULL )
 8016dd0:	4d19      	ldr	r5, [pc, #100]	; (8016e38 <xTimerGenericCommand+0x6c>)
{
 8016dd2:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
 8016dd4:	682c      	ldr	r4, [r5, #0]
 8016dd6:	b18c      	cbz	r4, 8016dfc <xTimerGenericCommand+0x30>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016dd8:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016dda:	9002      	str	r0, [sp, #8]
		xMessage.xMessageID = xCommandID;
 8016ddc:	e9cd 1200 	strd	r1, r2, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016de0:	dc1a      	bgt.n	8016e18 <xTimerGenericCommand+0x4c>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016de2:	f7ff fd1d 	bl	8016820 <xTaskGetSchedulerState>
 8016de6:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016de8:	f04f 0300 	mov.w	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016dec:	d01d      	beq.n	8016e2a <xTimerGenericCommand+0x5e>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016dee:	4669      	mov	r1, sp
 8016df0:	461a      	mov	r2, r3
 8016df2:	6828      	ldr	r0, [r5, #0]
 8016df4:	f7fe fbc2 	bl	801557c <xQueueGenericSend>
}
 8016df8:	b005      	add	sp, #20
 8016dfa:	bd30      	pop	{r4, r5, pc}
BaseType_t xReturn = pdFAIL;
 8016dfc:	4620      	mov	r0, r4
}
 8016dfe:	b005      	add	sp, #20
 8016e00:	bd30      	pop	{r4, r5, pc}
 8016e02:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016e06:	b672      	cpsid	i
 8016e08:	f383 8811 	msr	BASEPRI, r3
 8016e0c:	f3bf 8f6f 	isb	sy
 8016e10:	f3bf 8f4f 	dsb	sy
 8016e14:	b662      	cpsie	i
	configASSERT( xTimer );
 8016e16:	e7fe      	b.n	8016e16 <xTimerGenericCommand+0x4a>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016e18:	469c      	mov	ip, r3
 8016e1a:	4669      	mov	r1, sp
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	4620      	mov	r0, r4
 8016e20:	4662      	mov	r2, ip
 8016e22:	f7fe fcab 	bl	801577c <xQueueGenericSendFromISR>
}
 8016e26:	b005      	add	sp, #20
 8016e28:	bd30      	pop	{r4, r5, pc}
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016e2a:	9a08      	ldr	r2, [sp, #32]
 8016e2c:	4669      	mov	r1, sp
 8016e2e:	6828      	ldr	r0, [r5, #0]
 8016e30:	f7fe fba4 	bl	801557c <xQueueGenericSend>
 8016e34:	e7e3      	b.n	8016dfe <xTimerGenericCommand+0x32>
 8016e36:	bf00      	nop
 8016e38:	2000685c 	.word	0x2000685c

08016e3c <prvSwitchTimerLists>:
{
 8016e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e40:	4e1e      	ldr	r6, [pc, #120]	; (8016ebc <prvSwitchTimerLists+0x80>)
 8016e42:	b082      	sub	sp, #8
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016e44:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016e48:	e00d      	b.n	8016e66 <prvSwitchTimerLists+0x2a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016e4a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016e4c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016e4e:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016e50:	1d25      	adds	r5, r4, #4
 8016e52:	4628      	mov	r0, r5
 8016e54:	f7fe fa24 	bl	80152a0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016e58:	6a23      	ldr	r3, [r4, #32]
 8016e5a:	4620      	mov	r0, r4
 8016e5c:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016e5e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8016e62:	075b      	lsls	r3, r3, #29
 8016e64:	d40a      	bmi.n	8016e7c <prvSwitchTimerLists+0x40>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016e66:	6833      	ldr	r3, [r6, #0]
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	2a00      	cmp	r2, #0
 8016e6c:	d1ed      	bne.n	8016e4a <prvSwitchTimerLists+0xe>
	pxCurrentTimerList = pxOverflowTimerList;
 8016e6e:	4a14      	ldr	r2, [pc, #80]	; (8016ec0 <prvSwitchTimerLists+0x84>)
 8016e70:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016e72:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8016e74:	6031      	str	r1, [r6, #0]
}
 8016e76:	b002      	add	sp, #8
 8016e78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016e7c:	69a2      	ldr	r2, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016e7e:	4629      	mov	r1, r5
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016e80:	2300      	movs	r3, #0
 8016e82:	4620      	mov	r0, r4
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8016e84:	18bd      	adds	r5, r7, r2
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016e86:	463a      	mov	r2, r7
			if( xReloadTime > xNextExpireTime )
 8016e88:	42af      	cmp	r7, r5
 8016e8a:	d205      	bcs.n	8016e98 <prvSwitchTimerLists+0x5c>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016e8c:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8016e8e:	6065      	str	r5, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016e90:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016e92:	f7fe f9ed 	bl	8015270 <vListInsert>
 8016e96:	e7e6      	b.n	8016e66 <prvSwitchTimerLists+0x2a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016e98:	4619      	mov	r1, r3
 8016e9a:	f8cd 8000 	str.w	r8, [sp]
 8016e9e:	f7ff ff95 	bl	8016dcc <xTimerGenericCommand>
				configASSERT( xResult );
 8016ea2:	2800      	cmp	r0, #0
 8016ea4:	d1df      	bne.n	8016e66 <prvSwitchTimerLists+0x2a>
 8016ea6:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016eaa:	b672      	cpsid	i
 8016eac:	f383 8811 	msr	BASEPRI, r3
 8016eb0:	f3bf 8f6f 	isb	sy
 8016eb4:	f3bf 8f4f 	dsb	sy
 8016eb8:	b662      	cpsie	i
 8016eba:	e7fe      	b.n	8016eba <prvSwitchTimerLists+0x7e>
 8016ebc:	20006740 	.word	0x20006740
 8016ec0:	20006744 	.word	0x20006744

08016ec4 <prvTimerTask>:
{
 8016ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ec8:	4e9a      	ldr	r6, [pc, #616]	; (8017134 <prvTimerTask+0x270>)
 8016eca:	b087      	sub	sp, #28
 8016ecc:	4d9a      	ldr	r5, [pc, #616]	; (8017138 <prvTimerTask+0x274>)
					portYIELD_WITHIN_API();
 8016ece:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
 8016ed2:	4c9a      	ldr	r4, [pc, #616]	; (801713c <prvTimerTask+0x278>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016ed4:	6833      	ldr	r3, [r6, #0]
 8016ed6:	681f      	ldr	r7, [r3, #0]
 8016ed8:	2f00      	cmp	r7, #0
 8016eda:	f000 80ac 	beq.w	8017036 <prvTimerTask+0x172>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
 8016ee2:	f7ff fa01 	bl	80162e8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8016ee6:	f7ff fa07 	bl	80162f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016eea:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016eec:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8016eee:	4290      	cmp	r0, r2
 8016ef0:	f0c0 80a9 	bcc.w	8017046 <prvTimerTask+0x182>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016ef4:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
 8016ef6:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016ef8:	f200 80ca 	bhi.w	8017090 <prvTimerTask+0x1cc>
				( void ) xTaskResumeAll();
 8016efc:	f7ff fb50 	bl	80165a0 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016f00:	6832      	ldr	r2, [r6, #0]
 8016f02:	68d2      	ldr	r2, [r2, #12]
 8016f04:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f08:	f10b 0804 	add.w	r8, fp, #4
 8016f0c:	4640      	mov	r0, r8
 8016f0e:	f7fe f9c7 	bl	80152a0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016f12:	f89b 0024 	ldrb.w	r0, [fp, #36]	; 0x24
 8016f16:	0743      	lsls	r3, r0, #29
 8016f18:	f100 80ca 	bmi.w	80170b0 <prvTimerTask+0x1ec>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016f1c:	f020 0001 	bic.w	r0, r0, #1
 8016f20:	f88b 0024 	strb.w	r0, [fp, #36]	; 0x24
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016f24:	f8db 3020 	ldr.w	r3, [fp, #32]
 8016f28:	4658      	mov	r0, fp
 8016f2a:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016f2c:	2200      	movs	r2, #0
 8016f2e:	a902      	add	r1, sp, #8
 8016f30:	6820      	ldr	r0, [r4, #0]
 8016f32:	f7fe fcf5 	bl	8015920 <xQueueReceive>
 8016f36:	2800      	cmp	r0, #0
 8016f38:	d0cc      	beq.n	8016ed4 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016f3a:	9b02      	ldr	r3, [sp, #8]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	db71      	blt.n	8017024 <prvTimerTask+0x160>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016f40:	9f04      	ldr	r7, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016f42:	697b      	ldr	r3, [r7, #20]
 8016f44:	b113      	cbz	r3, 8016f4c <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016f46:	1d38      	adds	r0, r7, #4
 8016f48:	f7fe f9aa 	bl	80152a0 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8016f4c:	f7ff f9d4 	bl	80162f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8016f50:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8016f52:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
 8016f54:	4298      	cmp	r0, r3
 8016f56:	d37d      	bcc.n	8017054 <prvTimerTask+0x190>
			switch( xMessage.xMessageID )
 8016f58:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 8016f5a:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
 8016f5e:	2b09      	cmp	r3, #9
 8016f60:	d8e4      	bhi.n	8016f2c <prvTimerTask+0x68>
 8016f62:	e8df f003 	tbb	[pc, r3]
 8016f66:	0505      	.short	0x0505
 8016f68:	56394f05 	.word	0x56394f05
 8016f6c:	394f0505 	.word	0x394f0505
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016f70:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016f74:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016f76:	f042 0201 	orr.w	r2, r2, #1
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016f7a:	69b9      	ldr	r1, [r7, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016f7c:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016f7e:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016f82:	185a      	adds	r2, r3, r1
 8016f84:	bf2c      	ite	cs
 8016f86:	2001      	movcs	r0, #1
 8016f88:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
 8016f8a:	4542      	cmp	r2, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016f8c:	607a      	str	r2, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016f8e:	f200 8081 	bhi.w	8017094 <prvTimerTask+0x1d0>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016f92:	eba8 0303 	sub.w	r3, r8, r3
 8016f96:	4299      	cmp	r1, r3
 8016f98:	f200 80b5 	bhi.w	8017106 <prvTimerTask+0x242>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016f9c:	6a3b      	ldr	r3, [r7, #32]
 8016f9e:	4638      	mov	r0, r7
 8016fa0:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016fa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016fa6:	0759      	lsls	r1, r3, #29
 8016fa8:	d5c0      	bpl.n	8016f2c <prvTimerTask+0x68>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016faa:	2200      	movs	r2, #0
 8016fac:	69bb      	ldr	r3, [r7, #24]
 8016fae:	4638      	mov	r0, r7
 8016fb0:	9200      	str	r2, [sp, #0]
 8016fb2:	9a03      	ldr	r2, [sp, #12]
 8016fb4:	441a      	add	r2, r3
 8016fb6:	2300      	movs	r3, #0
 8016fb8:	4619      	mov	r1, r3
 8016fba:	f7ff ff07 	bl	8016dcc <xTimerGenericCommand>
							configASSERT( xResult );
 8016fbe:	2800      	cmp	r0, #0
 8016fc0:	d1b4      	bne.n	8016f2c <prvTimerTask+0x68>
 8016fc2:	f04f 0330 	mov.w	r3, #48	; 0x30
 8016fc6:	b672      	cpsid	i
 8016fc8:	f383 8811 	msr	BASEPRI, r3
 8016fcc:	f3bf 8f6f 	isb	sy
 8016fd0:	f3bf 8f4f 	dsb	sy
 8016fd4:	b662      	cpsie	i
 8016fd6:	e7fe      	b.n	8016fd6 <prvTimerTask+0x112>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016fd8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016fdc:	9b03      	ldr	r3, [sp, #12]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016fde:	f042 0201 	orr.w	r2, r2, #1
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016fe2:	61bb      	str	r3, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016fe4:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	f000 8098 	beq.w	801711e <prvTimerTask+0x25a>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016fee:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016ff0:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016ff2:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
 8016ff4:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016ff6:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
 8016ff8:	d856      	bhi.n	80170a8 <prvTimerTask+0x1e4>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016ffa:	4b51      	ldr	r3, [pc, #324]	; (8017140 <prvTimerTask+0x27c>)
 8016ffc:	6818      	ldr	r0, [r3, #0]
 8016ffe:	f7fe f937 	bl	8015270 <vListInsert>
	return xProcessTimerNow;
 8017002:	e793      	b.n	8016f2c <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017004:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017008:	f023 0301 	bic.w	r3, r3, #1
 801700c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
					break;
 8017010:	e78c      	b.n	8016f2c <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8017012:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8017016:	079a      	lsls	r2, r3, #30
 8017018:	d56c      	bpl.n	80170f4 <prvTimerTask+0x230>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801701a:	f023 0301 	bic.w	r3, r3, #1
 801701e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8017022:	e783      	b.n	8016f2c <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8017024:	9b03      	ldr	r3, [sp, #12]
 8017026:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801702a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801702c:	9b02      	ldr	r3, [sp, #8]
 801702e:	2b00      	cmp	r3, #0
 8017030:	f6ff af7c 	blt.w	8016f2c <prvTimerTask+0x68>
 8017034:	e784      	b.n	8016f40 <prvTimerTask+0x7c>
	vTaskSuspendAll();
 8017036:	f7ff f957 	bl	80162e8 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 801703a:	f7ff f95d 	bl	80162f8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 801703e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
 8017040:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
 8017042:	4282      	cmp	r2, r0
 8017044:	d909      	bls.n	801705a <prvTimerTask+0x196>
		prvSwitchTimerLists();
 8017046:	f7ff fef9 	bl	8016e3c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 801704a:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
 801704e:	f7ff faa7 	bl	80165a0 <xTaskResumeAll>
 8017052:	e76b      	b.n	8016f2c <prvTimerTask+0x68>
		prvSwitchTimerLists();
 8017054:	f7ff fef2 	bl	8016e3c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8017058:	e77e      	b.n	8016f58 <prvTimerTask+0x94>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801705a:	4b39      	ldr	r3, [pc, #228]	; (8017140 <prvTimerTask+0x27c>)
	xLastTime = xTimeNow;
 801705c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8017060:	681a      	ldr	r2, [r3, #0]
 8017062:	6812      	ldr	r2, [r2, #0]
 8017064:	fab2 f282 	clz	r2, r2
 8017068:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801706a:	eba7 010a 	sub.w	r1, r7, sl
 801706e:	6820      	ldr	r0, [r4, #0]
 8017070:	f7fe fe7e 	bl	8015d70 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8017074:	f7ff fa94 	bl	80165a0 <xTaskResumeAll>
 8017078:	2800      	cmp	r0, #0
 801707a:	f47f af57 	bne.w	8016f2c <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
 801707e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8017082:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	f3bf 8f6f 	isb	sy
 801708e:	e74d      	b.n	8016f2c <prvTimerTask+0x68>
 8017090:	2200      	movs	r2, #0
 8017092:	e7ea      	b.n	801706a <prvTimerTask+0x1a6>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8017094:	4543      	cmp	r3, r8
 8017096:	d902      	bls.n	801709e <prvTimerTask+0x1da>
 8017098:	2800      	cmp	r0, #0
 801709a:	f43f af7f 	beq.w	8016f9c <prvTimerTask+0xd8>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801709e:	1d39      	adds	r1, r7, #4
 80170a0:	6830      	ldr	r0, [r6, #0]
 80170a2:	f7fe f8e5 	bl	8015270 <vListInsert>
	return xProcessTimerNow;
 80170a6:	e741      	b.n	8016f2c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80170a8:	6830      	ldr	r0, [r6, #0]
 80170aa:	f7fe f8e1 	bl	8015270 <vListInsert>
 80170ae:	e73d      	b.n	8016f2c <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80170b0:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80170b4:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80170b8:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
 80170ba:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80170bc:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
 80170c0:	d31c      	bcc.n	80170fc <prvTimerTask+0x238>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80170c2:	ebaa 0307 	sub.w	r3, sl, r7
 80170c6:	429a      	cmp	r2, r3
 80170c8:	d823      	bhi.n	8017112 <prvTimerTask+0x24e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80170ca:	2300      	movs	r3, #0
 80170cc:	463a      	mov	r2, r7
 80170ce:	4658      	mov	r0, fp
 80170d0:	4619      	mov	r1, r3
 80170d2:	9300      	str	r3, [sp, #0]
 80170d4:	f7ff fe7a 	bl	8016dcc <xTimerGenericCommand>
			configASSERT( xResult );
 80170d8:	2800      	cmp	r0, #0
 80170da:	f47f af23 	bne.w	8016f24 <prvTimerTask+0x60>
 80170de:	f04f 0330 	mov.w	r3, #48	; 0x30
 80170e2:	b672      	cpsid	i
 80170e4:	f383 8811 	msr	BASEPRI, r3
 80170e8:	f3bf 8f6f 	isb	sy
 80170ec:	f3bf 8f4f 	dsb	sy
 80170f0:	b662      	cpsie	i
 80170f2:	e7fe      	b.n	80170f2 <prvTimerTask+0x22e>
							vPortFree( pxTimer );
 80170f4:	4638      	mov	r0, r7
 80170f6:	f000 fa9b 	bl	8017630 <vPortFree>
 80170fa:	e717      	b.n	8016f2c <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80170fc:	4641      	mov	r1, r8
 80170fe:	6830      	ldr	r0, [r6, #0]
 8017100:	f7fe f8b6 	bl	8015270 <vListInsert>
	return xProcessTimerNow;
 8017104:	e70e      	b.n	8016f24 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017106:	4b0e      	ldr	r3, [pc, #56]	; (8017140 <prvTimerTask+0x27c>)
 8017108:	1d39      	adds	r1, r7, #4
 801710a:	6818      	ldr	r0, [r3, #0]
 801710c:	f7fe f8b0 	bl	8015270 <vListInsert>
	return xProcessTimerNow;
 8017110:	e70c      	b.n	8016f2c <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8017112:	4b0b      	ldr	r3, [pc, #44]	; (8017140 <prvTimerTask+0x27c>)
 8017114:	4641      	mov	r1, r8
 8017116:	6818      	ldr	r0, [r3, #0]
 8017118:	f7fe f8aa 	bl	8015270 <vListInsert>
	return xProcessTimerNow;
 801711c:	e702      	b.n	8016f24 <prvTimerTask+0x60>
 801711e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017122:	b672      	cpsid	i
 8017124:	f383 8811 	msr	BASEPRI, r3
 8017128:	f3bf 8f6f 	isb	sy
 801712c:	f3bf 8f4f 	dsb	sy
 8017130:	b662      	cpsie	i
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8017132:	e7fe      	b.n	8017132 <prvTimerTask+0x26e>
 8017134:	20006740 	.word	0x20006740
 8017138:	20006810 	.word	0x20006810
 801713c:	2000685c 	.word	0x2000685c
 8017140:	20006744 	.word	0x20006744

08017144 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017144:	4808      	ldr	r0, [pc, #32]	; (8017168 <prvPortStartFirstTask+0x24>)
 8017146:	6800      	ldr	r0, [r0, #0]
 8017148:	6800      	ldr	r0, [r0, #0]
 801714a:	f380 8808 	msr	MSP, r0
 801714e:	f04f 0000 	mov.w	r0, #0
 8017152:	f380 8814 	msr	CONTROL, r0
 8017156:	b662      	cpsie	i
 8017158:	b661      	cpsie	f
 801715a:	f3bf 8f4f 	dsb	sy
 801715e:	f3bf 8f6f 	isb	sy
 8017162:	df00      	svc	0
 8017164:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8017166:	0000      	.short	0x0000
 8017168:	e000ed08 	.word	0xe000ed08

0801716c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801716c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801717c <vPortEnableVFP+0x10>
 8017170:	6801      	ldr	r1, [r0, #0]
 8017172:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8017176:	6001      	str	r1, [r0, #0]
 8017178:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801717a:	0000      	.short	0x0000
 801717c:	e000ed88 	.word	0xe000ed88

08017180 <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
 8017180:	4b10      	ldr	r3, [pc, #64]	; (80171c4 <prvTaskExitError+0x44>)
{
 8017182:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8017184:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 8017186:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
 8017188:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 801718a:	3301      	adds	r3, #1
 801718c:	d00a      	beq.n	80171a4 <prvTaskExitError+0x24>
 801718e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017192:	b672      	cpsid	i
 8017194:	f383 8811 	msr	BASEPRI, r3
 8017198:	f3bf 8f6f 	isb	sy
 801719c:	f3bf 8f4f 	dsb	sy
 80171a0:	b662      	cpsie	i
 80171a2:	e7fe      	b.n	80171a2 <prvTaskExitError+0x22>
 80171a4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80171a8:	b672      	cpsid	i
 80171aa:	f383 8811 	msr	BASEPRI, r3
 80171ae:	f3bf 8f6f 	isb	sy
 80171b2:	f3bf 8f4f 	dsb	sy
 80171b6:	b662      	cpsie	i
	while( ulDummy == 0 )
 80171b8:	9b01      	ldr	r3, [sp, #4]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d0fc      	beq.n	80171b8 <prvTaskExitError+0x38>
}
 80171be:	b002      	add	sp, #8
 80171c0:	4770      	bx	lr
 80171c2:	bf00      	nop
 80171c4:	200003ec 	.word	0x200003ec

080171c8 <pxPortInitialiseStack>:
{
 80171c8:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80171ca:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80171ce:	4809      	ldr	r0, [pc, #36]	; (80171f4 <pxPortInitialiseStack+0x2c>)
{
 80171d0:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80171d2:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80171d6:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80171da:	f843 2c20 	str.w	r2, [r3, #-32]
}
 80171de:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80171e2:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80171e6:	f06f 0102 	mvn.w	r1, #2
}
 80171ea:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80171ee:	f843 1c24 	str.w	r1, [r3, #-36]
}
 80171f2:	4770      	bx	lr
 80171f4:	08017181 	.word	0x08017181
 80171f8:	ffffffff 	.word	0xffffffff
 80171fc:	ffffffff 	.word	0xffffffff

08017200 <SVC_Handler>:
	__asm volatile (
 8017200:	4b07      	ldr	r3, [pc, #28]	; (8017220 <pxCurrentTCBConst2>)
 8017202:	6819      	ldr	r1, [r3, #0]
 8017204:	6808      	ldr	r0, [r1, #0]
 8017206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801720a:	f380 8809 	msr	PSP, r0
 801720e:	f3bf 8f6f 	isb	sy
 8017212:	f04f 0000 	mov.w	r0, #0
 8017216:	f380 8811 	msr	BASEPRI, r0
 801721a:	4770      	bx	lr
 801721c:	f3af 8000 	nop.w

08017220 <pxCurrentTCBConst2>:
 8017220:	20006618 	.word	0x20006618

08017224 <vPortEnterCritical>:
 8017224:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017228:	b672      	cpsid	i
 801722a:	f383 8811 	msr	BASEPRI, r3
 801722e:	f3bf 8f6f 	isb	sy
 8017232:	f3bf 8f4f 	dsb	sy
 8017236:	b662      	cpsie	i
	uxCriticalNesting++;
 8017238:	4a0c      	ldr	r2, [pc, #48]	; (801726c <vPortEnterCritical+0x48>)
 801723a:	6813      	ldr	r3, [r2, #0]
 801723c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 801723e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8017240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8017242:	d000      	beq.n	8017246 <vPortEnterCritical+0x22>
}
 8017244:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017246:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801724a:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
 801724e:	b2db      	uxtb	r3, r3
 8017250:	2b00      	cmp	r3, #0
 8017252:	d0f7      	beq.n	8017244 <vPortEnterCritical+0x20>
 8017254:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017258:	b672      	cpsid	i
 801725a:	f383 8811 	msr	BASEPRI, r3
 801725e:	f3bf 8f6f 	isb	sy
 8017262:	f3bf 8f4f 	dsb	sy
 8017266:	b662      	cpsie	i
 8017268:	e7fe      	b.n	8017268 <vPortEnterCritical+0x44>
 801726a:	bf00      	nop
 801726c:	200003ec 	.word	0x200003ec

08017270 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8017270:	4a09      	ldr	r2, [pc, #36]	; (8017298 <vPortExitCritical+0x28>)
 8017272:	6813      	ldr	r3, [r2, #0]
 8017274:	b953      	cbnz	r3, 801728c <vPortExitCritical+0x1c>
 8017276:	f04f 0330 	mov.w	r3, #48	; 0x30
 801727a:	b672      	cpsid	i
 801727c:	f383 8811 	msr	BASEPRI, r3
 8017280:	f3bf 8f6f 	isb	sy
 8017284:	f3bf 8f4f 	dsb	sy
 8017288:	b662      	cpsie	i
 801728a:	e7fe      	b.n	801728a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 801728c:	3b01      	subs	r3, #1
 801728e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8017290:	b90b      	cbnz	r3, 8017296 <vPortExitCritical+0x26>
	__asm volatile
 8017292:	f383 8811 	msr	BASEPRI, r3
}
 8017296:	4770      	bx	lr
 8017298:	200003ec 	.word	0x200003ec
 801729c:	ffffffff 	.word	0xffffffff

080172a0 <PendSV_Handler>:
	__asm volatile
 80172a0:	f3ef 8009 	mrs	r0, PSP
 80172a4:	f3bf 8f6f 	isb	sy
 80172a8:	4b15      	ldr	r3, [pc, #84]	; (8017300 <pxCurrentTCBConst>)
 80172aa:	681a      	ldr	r2, [r3, #0]
 80172ac:	f01e 0f10 	tst.w	lr, #16
 80172b0:	bf08      	it	eq
 80172b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80172b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ba:	6010      	str	r0, [r2, #0]
 80172bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80172c0:	f04f 0030 	mov.w	r0, #48	; 0x30
 80172c4:	b672      	cpsid	i
 80172c6:	f380 8811 	msr	BASEPRI, r0
 80172ca:	f3bf 8f4f 	dsb	sy
 80172ce:	f3bf 8f6f 	isb	sy
 80172d2:	b662      	cpsie	i
 80172d4:	f7ff f9aa 	bl	801662c <vTaskSwitchContext>
 80172d8:	f04f 0000 	mov.w	r0, #0
 80172dc:	f380 8811 	msr	BASEPRI, r0
 80172e0:	bc09      	pop	{r0, r3}
 80172e2:	6819      	ldr	r1, [r3, #0]
 80172e4:	6808      	ldr	r0, [r1, #0]
 80172e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80172ea:	f01e 0f10 	tst.w	lr, #16
 80172ee:	bf08      	it	eq
 80172f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80172f4:	f380 8809 	msr	PSP, r0
 80172f8:	f3bf 8f6f 	isb	sy
 80172fc:	4770      	bx	lr
 80172fe:	bf00      	nop

08017300 <pxCurrentTCBConst>:
 8017300:	20006618 	.word	0x20006618

08017304 <SysTick_Handler>:
{
 8017304:	b508      	push	{r3, lr}
	__asm volatile
 8017306:	f04f 0330 	mov.w	r3, #48	; 0x30
 801730a:	b672      	cpsid	i
 801730c:	f383 8811 	msr	BASEPRI, r3
 8017310:	f3bf 8f6f 	isb	sy
 8017314:	f3bf 8f4f 	dsb	sy
 8017318:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 801731a:	f7fe fffb 	bl	8016314 <xTaskIncrementTick>
 801731e:	b128      	cbz	r0, 801732c <SysTick_Handler+0x28>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8017320:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8017324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017328:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
 801732c:	2300      	movs	r3, #0
 801732e:	f383 8811 	msr	BASEPRI, r3
}
 8017332:	bd08      	pop	{r3, pc}

08017334 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017334:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8017338:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801733a:	4b06      	ldr	r3, [pc, #24]	; (8017354 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801733c:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801733e:	4806      	ldr	r0, [pc, #24]	; (8017358 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017340:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017342:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	fba0 0303 	umull	r0, r3, r0, r3
 801734a:	099b      	lsrs	r3, r3, #6
 801734c:	3b01      	subs	r3, #1
 801734e:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8017350:	6111      	str	r1, [r2, #16]
}
 8017352:	4770      	bx	lr
 8017354:	20000260 	.word	0x20000260
 8017358:	10624dd3 	.word	0x10624dd3

0801735c <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801735c:	4b30      	ldr	r3, [pc, #192]	; (8017420 <xPortStartScheduler+0xc4>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801735e:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017362:	4830      	ldr	r0, [pc, #192]	; (8017424 <xPortStartScheduler+0xc8>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017364:	4930      	ldr	r1, [pc, #192]	; (8017428 <xPortStartScheduler+0xcc>)
{
 8017366:	b530      	push	{r4, r5, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8017368:	781a      	ldrb	r2, [r3, #0]
{
 801736a:	b083      	sub	sp, #12
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801736c:	b2d2      	uxtb	r2, r2
 801736e:	9201      	str	r2, [sp, #4]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017370:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017372:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8017376:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017378:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801737a:	b2db      	uxtb	r3, r3
 801737c:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017380:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017384:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017388:	f003 0330 	and.w	r3, r3, #48	; 0x30
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801738c:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801738e:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017390:	d50f      	bpl.n	80173b2 <xPortStartScheduler+0x56>
 8017392:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017394:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8017398:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801739a:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801739c:	005b      	lsls	r3, r3, #1
 801739e:	b2db      	uxtb	r3, r3
 80173a0:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80173a4:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80173a8:	061b      	lsls	r3, r3, #24
 80173aa:	d4f3      	bmi.n	8017394 <xPortStartScheduler+0x38>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80173ac:	2903      	cmp	r1, #3
 80173ae:	d00b      	beq.n	80173c8 <xPortStartScheduler+0x6c>
 80173b0:	6001      	str	r1, [r0, #0]
	__asm volatile
 80173b2:	f04f 0330 	mov.w	r3, #48	; 0x30
 80173b6:	b672      	cpsid	i
 80173b8:	f383 8811 	msr	BASEPRI, r3
 80173bc:	f3bf 8f6f 	isb	sy
 80173c0:	f3bf 8f4f 	dsb	sy
 80173c4:	b662      	cpsie	i
 80173c6:	e7fe      	b.n	80173c6 <xPortStartScheduler+0x6a>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80173c8:	9b01      	ldr	r3, [sp, #4]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80173ca:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80173ce:	4a14      	ldr	r2, [pc, #80]	; (8017420 <xPortStartScheduler+0xc4>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80173d0:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80173d4:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
 80173d6:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80173d8:	6001      	str	r1, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80173da:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80173dc:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80173e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80173e4:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80173e8:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
 80173ec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80173f0:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
 80173f4:	f7ff ff9e 	bl	8017334 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80173f8:	4b0c      	ldr	r3, [pc, #48]	; (801742c <xPortStartScheduler+0xd0>)
 80173fa:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 80173fc:	f7ff feb6 	bl	801716c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8017400:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
 8017404:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8017408:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
 801740c:	f7ff fe9a 	bl	8017144 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8017410:	f7ff f90c 	bl	801662c <vTaskSwitchContext>
}
 8017414:	4628      	mov	r0, r5
	prvTaskExitError();
 8017416:	f7ff feb3 	bl	8017180 <prvTaskExitError>
}
 801741a:	b003      	add	sp, #12
 801741c:	bd30      	pop	{r4, r5, pc}
 801741e:	bf00      	nop
 8017420:	e000e400 	.word	0xe000e400
 8017424:	20006868 	.word	0x20006868
 8017428:	20006864 	.word	0x20006864
 801742c:	200003ec 	.word	0x200003ec

08017430 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8017430:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8017434:	2b0f      	cmp	r3, #15
 8017436:	d910      	bls.n	801745a <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8017438:	4913      	ldr	r1, [pc, #76]	; (8017488 <vPortValidateInterruptPriority+0x58>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801743a:	4a14      	ldr	r2, [pc, #80]	; (801748c <vPortValidateInterruptPriority+0x5c>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801743c:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801743e:	7812      	ldrb	r2, [r2, #0]
 8017440:	429a      	cmp	r2, r3
 8017442:	d90a      	bls.n	801745a <vPortValidateInterruptPriority+0x2a>
 8017444:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017448:	b672      	cpsid	i
 801744a:	f383 8811 	msr	BASEPRI, r3
 801744e:	f3bf 8f6f 	isb	sy
 8017452:	f3bf 8f4f 	dsb	sy
 8017456:	b662      	cpsie	i
 8017458:	e7fe      	b.n	8017458 <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801745a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 801745e:	4a0c      	ldr	r2, [pc, #48]	; (8017490 <vPortValidateInterruptPriority+0x60>)
 8017460:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
 8017464:	6812      	ldr	r2, [r2, #0]
 8017466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801746a:	4293      	cmp	r3, r2
 801746c:	d90a      	bls.n	8017484 <vPortValidateInterruptPriority+0x54>
 801746e:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017472:	b672      	cpsid	i
 8017474:	f383 8811 	msr	BASEPRI, r3
 8017478:	f3bf 8f6f 	isb	sy
 801747c:	f3bf 8f4f 	dsb	sy
 8017480:	b662      	cpsie	i
 8017482:	e7fe      	b.n	8017482 <vPortValidateInterruptPriority+0x52>
	}
 8017484:	4770      	bx	lr
 8017486:	bf00      	nop
 8017488:	e000e3f0 	.word	0xe000e3f0
 801748c:	20006864 	.word	0x20006864
 8017490:	20006868 	.word	0x20006868

08017494 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017494:	4b16      	ldr	r3, [pc, #88]	; (80174f0 <prvInsertBlockIntoFreeList+0x5c>)
{
 8017496:	b410      	push	{r4}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8017498:	461a      	mov	r2, r3
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4283      	cmp	r3, r0
 801749e:	d3fb      	bcc.n	8017498 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80174a0:	6851      	ldr	r1, [r2, #4]
 80174a2:	eb02 0c01 	add.w	ip, r2, r1
 80174a6:	4560      	cmp	r0, ip
 80174a8:	d00b      	beq.n	80174c2 <prvInsertBlockIntoFreeList+0x2e>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80174aa:	6841      	ldr	r1, [r0, #4]
 80174ac:	eb00 0c01 	add.w	ip, r0, r1
 80174b0:	4563      	cmp	r3, ip
 80174b2:	d00e      	beq.n	80174d2 <prvInsertBlockIntoFreeList+0x3e>

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80174b4:	4290      	cmp	r0, r2
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80174b6:	6003      	str	r3, [r0, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80174b8:	f85d 4b04 	ldr.w	r4, [sp], #4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80174bc:	bf18      	it	ne
 80174be:	6010      	strne	r0, [r2, #0]
}
 80174c0:	4770      	bx	lr
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80174c2:	6844      	ldr	r4, [r0, #4]
 80174c4:	4610      	mov	r0, r2
 80174c6:	4421      	add	r1, r4
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80174c8:	eb00 0c01 	add.w	ip, r0, r1
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80174cc:	6051      	str	r1, [r2, #4]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80174ce:	4563      	cmp	r3, ip
 80174d0:	d1f0      	bne.n	80174b4 <prvInsertBlockIntoFreeList+0x20>
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80174d2:	4c08      	ldr	r4, [pc, #32]	; (80174f4 <prvInsertBlockIntoFreeList+0x60>)
 80174d4:	6824      	ldr	r4, [r4, #0]
 80174d6:	42a3      	cmp	r3, r4
 80174d8:	d0ec      	beq.n	80174b4 <prvInsertBlockIntoFreeList+0x20>
	if( pxIterator != pxBlockToInsert )
 80174da:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80174dc:	e9d3 3400 	ldrd	r3, r4, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80174e0:	4421      	add	r1, r4
}
 80174e2:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80174e6:	e9c0 3100 	strd	r3, r1, [r0]
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80174ea:	bf18      	it	ne
 80174ec:	6010      	strne	r0, [r2, #0]
}
 80174ee:	4770      	bx	lr
 80174f0:	2001e87c 	.word	0x2001e87c
 80174f4:	2000686c 	.word	0x2000686c

080174f8 <pvPortMalloc>:
{
 80174f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80174fc:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80174fe:	f7fe fef3 	bl	80162e8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8017502:	f8df c128 	ldr.w	ip, [pc, #296]	; 801762c <pvPortMalloc+0x134>
 8017506:	f8dc 3000 	ldr.w	r3, [ip]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d05d      	beq.n	80175ca <pvPortMalloc+0xd2>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801750e:	4b42      	ldr	r3, [pc, #264]	; (8017618 <pvPortMalloc+0x120>)
 8017510:	681d      	ldr	r5, [r3, #0]
 8017512:	422c      	tst	r4, r5
 8017514:	d130      	bne.n	8017578 <pvPortMalloc+0x80>
			if( xWantedSize > 0 )
 8017516:	b37c      	cbz	r4, 8017578 <pvPortMalloc+0x80>
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017518:	0760      	lsls	r0, r4, #29
				xWantedSize += xHeapStructSize;
 801751a:	f104 0108 	add.w	r1, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801751e:	d002      	beq.n	8017526 <pvPortMalloc+0x2e>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8017520:	f021 0107 	bic.w	r1, r1, #7
 8017524:	3108      	adds	r1, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8017526:	b339      	cbz	r1, 8017578 <pvPortMalloc+0x80>
 8017528:	4f3c      	ldr	r7, [pc, #240]	; (801761c <pvPortMalloc+0x124>)
 801752a:	683e      	ldr	r6, [r7, #0]
 801752c:	428e      	cmp	r6, r1
 801752e:	d323      	bcc.n	8017578 <pvPortMalloc+0x80>
				pxBlock = xStart.pxNextFreeBlock;
 8017530:	483b      	ldr	r0, [pc, #236]	; (8017620 <pvPortMalloc+0x128>)
 8017532:	6804      	ldr	r4, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8017534:	e003      	b.n	801753e <pvPortMalloc+0x46>
 8017536:	6823      	ldr	r3, [r4, #0]
 8017538:	b123      	cbz	r3, 8017544 <pvPortMalloc+0x4c>
 801753a:	4620      	mov	r0, r4
 801753c:	461c      	mov	r4, r3
 801753e:	6862      	ldr	r2, [r4, #4]
 8017540:	428a      	cmp	r2, r1
 8017542:	d3f8      	bcc.n	8017536 <pvPortMalloc+0x3e>
				if( pxBlock != pxEnd )
 8017544:	f8dc 3000 	ldr.w	r3, [ip]
 8017548:	42a3      	cmp	r3, r4
 801754a:	d015      	beq.n	8017578 <pvPortMalloc+0x80>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801754c:	6803      	ldr	r3, [r0, #0]
 801754e:	f103 0808 	add.w	r8, r3, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017552:	6823      	ldr	r3, [r4, #0]
 8017554:	6003      	str	r3, [r0, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8017556:	1a53      	subs	r3, r2, r1
 8017558:	2b10      	cmp	r3, #16
 801755a:	d91b      	bls.n	8017594 <pvPortMalloc+0x9c>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801755c:	1860      	adds	r0, r4, r1
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801755e:	0742      	lsls	r2, r0, #29
 8017560:	d013      	beq.n	801758a <pvPortMalloc+0x92>
 8017562:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017566:	b672      	cpsid	i
 8017568:	f383 8811 	msr	BASEPRI, r3
 801756c:	f3bf 8f6f 	isb	sy
 8017570:	f3bf 8f4f 	dsb	sy
 8017574:	b662      	cpsie	i
 8017576:	e7fe      	b.n	8017576 <pvPortMalloc+0x7e>
			vApplicationMallocFailedHook();
 8017578:	f04f 0800 	mov.w	r8, #0
	( void ) xTaskResumeAll();
 801757c:	f7ff f810 	bl	80165a0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
 8017580:	f7e9 fe70 	bl	8001264 <vApplicationMallocFailedHook>
}
 8017584:	4640      	mov	r0, r8
 8017586:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801758a:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 801758c:	6061      	str	r1, [r4, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801758e:	f7ff ff81 	bl	8017494 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017592:	6862      	ldr	r2, [r4, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8017594:	4b23      	ldr	r3, [pc, #140]	; (8017624 <pvPortMalloc+0x12c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017596:	1ab6      	subs	r6, r6, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017598:	432a      	orrs	r2, r5
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801759a:	6819      	ldr	r1, [r3, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801759c:	603e      	str	r6, [r7, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801759e:	428e      	cmp	r6, r1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80175a0:	bf38      	it	cc
 80175a2:	601e      	strcc	r6, [r3, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80175a4:	2300      	movs	r3, #0
 80175a6:	e9c4 3200 	strd	r3, r2, [r4]
	( void ) xTaskResumeAll();
 80175aa:	f7fe fff9 	bl	80165a0 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80175ae:	f018 0f07 	tst.w	r8, #7
 80175b2:	d0e7      	beq.n	8017584 <pvPortMalloc+0x8c>
 80175b4:	f04f 0330 	mov.w	r3, #48	; 0x30
 80175b8:	b672      	cpsid	i
 80175ba:	f383 8811 	msr	BASEPRI, r3
 80175be:	f3bf 8f6f 	isb	sy
 80175c2:	f3bf 8f4f 	dsb	sy
 80175c6:	b662      	cpsie	i
 80175c8:	e7fe      	b.n	80175c8 <pvPortMalloc+0xd0>
	uxAddress = ( size_t ) ucHeap;
 80175ca:	4b17      	ldr	r3, [pc, #92]	; (8017628 <pvPortMalloc+0x130>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80175cc:	075d      	lsls	r5, r3, #29
 80175ce:	d11b      	bne.n	8017608 <pvPortMalloc+0x110>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80175d0:	461a      	mov	r2, r3
 80175d2:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 80175d6:	4610      	mov	r0, r2
	uxAddress -= xHeapStructSize;
 80175d8:	3b08      	subs	r3, #8
	xStart.xBlockSize = ( size_t ) 0;
 80175da:	2100      	movs	r1, #0
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80175dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80175e0:	f023 0307 	bic.w	r3, r3, #7
}
 80175e4:	4635      	mov	r5, r6
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80175e6:	1a9a      	subs	r2, r3, r2
	pxEnd = ( void * ) uxAddress;
 80175e8:	f8cc 3000 	str.w	r3, [ip]
	pxEnd->pxNextFreeBlock = NULL;
 80175ec:	e9c3 1100 	strd	r1, r1, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80175f0:	e9c0 3200 	strd	r3, r2, [r0]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80175f4:	4b0a      	ldr	r3, [pc, #40]	; (8017620 <pvPortMalloc+0x128>)
	xStart.xBlockSize = ( size_t ) 0;
 80175f6:	e9c3 0100 	strd	r0, r1, [r3]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175fa:	4b0a      	ldr	r3, [pc, #40]	; (8017624 <pvPortMalloc+0x12c>)
 80175fc:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80175fe:	4b07      	ldr	r3, [pc, #28]	; (801761c <pvPortMalloc+0x124>)
 8017600:	601a      	str	r2, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017602:	4b05      	ldr	r3, [pc, #20]	; (8017618 <pvPortMalloc+0x120>)
 8017604:	601e      	str	r6, [r3, #0]
}
 8017606:	e784      	b.n	8017512 <pvPortMalloc+0x1a>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8017608:	1dda      	adds	r2, r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801760a:	f503 33c0 	add.w	r3, r3, #98304	; 0x18000
 801760e:	f022 0207 	bic.w	r2, r2, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017612:	4610      	mov	r0, r2
 8017614:	e7e0      	b.n	80175d8 <pvPortMalloc+0xe0>
 8017616:	bf00      	nop
 8017618:	2001e870 	.word	0x2001e870
 801761c:	2001e874 	.word	0x2001e874
 8017620:	2001e87c 	.word	0x2001e87c
 8017624:	2001e878 	.word	0x2001e878
 8017628:	20006870 	.word	0x20006870
 801762c:	2000686c 	.word	0x2000686c

08017630 <vPortFree>:
	if( pv != NULL )
 8017630:	b1f0      	cbz	r0, 8017670 <vPortFree+0x40>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017632:	4a1c      	ldr	r2, [pc, #112]	; (80176a4 <vPortFree+0x74>)
 8017634:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8017638:	6812      	ldr	r2, [r2, #0]
 801763a:	4213      	tst	r3, r2
 801763c:	d00d      	beq.n	801765a <vPortFree+0x2a>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801763e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8017642:	b1b1      	cbz	r1, 8017672 <vPortFree+0x42>
 8017644:	f04f 0330 	mov.w	r3, #48	; 0x30
 8017648:	b672      	cpsid	i
 801764a:	f383 8811 	msr	BASEPRI, r3
 801764e:	f3bf 8f6f 	isb	sy
 8017652:	f3bf 8f4f 	dsb	sy
 8017656:	b662      	cpsie	i
 8017658:	e7fe      	b.n	8017658 <vPortFree+0x28>
 801765a:	f04f 0330 	mov.w	r3, #48	; 0x30
 801765e:	b672      	cpsid	i
 8017660:	f383 8811 	msr	BASEPRI, r3
 8017664:	f3bf 8f6f 	isb	sy
 8017668:	f3bf 8f4f 	dsb	sy
 801766c:	b662      	cpsie	i
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801766e:	e7fe      	b.n	801766e <vPortFree+0x3e>
 8017670:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017672:	ea23 0302 	bic.w	r3, r3, r2
{
 8017676:	b500      	push	{lr}
 8017678:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801767a:	f840 3c04 	str.w	r3, [r0, #-4]
 801767e:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
 8017680:	f7fe fe32 	bl	80162e8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017684:	4a08      	ldr	r2, [pc, #32]	; (80176a8 <vPortFree+0x78>)
 8017686:	9801      	ldr	r0, [sp, #4]
 8017688:	6811      	ldr	r1, [r2, #0]
 801768a:	f850 3c04 	ldr.w	r3, [r0, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801768e:	3808      	subs	r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017690:	440b      	add	r3, r1
 8017692:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017694:	f7ff fefe 	bl	8017494 <prvInsertBlockIntoFreeList>
}
 8017698:	b003      	add	sp, #12
 801769a:	f85d eb04 	ldr.w	lr, [sp], #4
				( void ) xTaskResumeAll();
 801769e:	f7fe bf7f 	b.w	80165a0 <xTaskResumeAll>
 80176a2:	bf00      	nop
 80176a4:	2001e870 	.word	0x2001e870
 80176a8:	2001e874 	.word	0x2001e874

080176ac <pbuf_free_int>:
 */
static void
pbuf_free_int(void *p)
{
  struct pbuf *q = (struct pbuf *)p;
  pbuf_free(q);
 80176ac:	f003 bb10 	b.w	801acd0 <pbuf_free>

080176b0 <tcpip_thread>:
{
 80176b0:	b580      	push	{r7, lr}
  LOCK_TCPIP_CORE();
 80176b2:	4839      	ldr	r0, [pc, #228]	; (8017798 <tcpip_thread+0xe8>)
{
 80176b4:	b082      	sub	sp, #8
  LOCK_TCPIP_CORE();
 80176b6:	f00b feff 	bl	80234b8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80176ba:	4b38      	ldr	r3, [pc, #224]	; (801779c <tcpip_thread+0xec>)
 80176bc:	681b      	ldr	r3, [r3, #0]
 80176be:	b113      	cbz	r3, 80176c6 <tcpip_thread+0x16>
    tcpip_init_done(tcpip_init_done_arg);
 80176c0:	4a37      	ldr	r2, [pc, #220]	; (80177a0 <tcpip_thread+0xf0>)
 80176c2:	6810      	ldr	r0, [r2, #0]
 80176c4:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 80176c6:	4d34      	ldr	r5, [pc, #208]	; (8017798 <tcpip_thread+0xe8>)
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80176c8:	4e36      	ldr	r6, [pc, #216]	; (80177a4 <tcpip_thread+0xf4>)
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80176ca:	4f37      	ldr	r7, [pc, #220]	; (80177a8 <tcpip_thread+0xf8>)
 80176cc:	e010      	b.n	80176f0 <tcpip_thread+0x40>
  } else if (sleeptime == 0) {
 80176ce:	b168      	cbz	r0, 80176ec <tcpip_thread+0x3c>
  UNLOCK_TCPIP_CORE();
 80176d0:	4628      	mov	r0, r5
 80176d2:	f00b fef7 	bl	80234c4 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80176d6:	4622      	mov	r2, r4
 80176d8:	a901      	add	r1, sp, #4
 80176da:	4630      	mov	r0, r6
 80176dc:	f00b fea8 	bl	8023430 <sys_arch_mbox_fetch>
 80176e0:	4604      	mov	r4, r0
  LOCK_TCPIP_CORE();
 80176e2:	4628      	mov	r0, r5
 80176e4:	f00b fee8 	bl	80234b8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80176e8:	3401      	adds	r4, #1
 80176ea:	d111      	bne.n	8017710 <tcpip_thread+0x60>
    sys_check_timeouts();
 80176ec:	f008 f85c 	bl	801f7a8 <sys_check_timeouts>
  sleeptime = sys_timeouts_sleeptime();
 80176f0:	f008 f882 	bl	801f7f8 <sys_timeouts_sleeptime>
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80176f4:	1c43      	adds	r3, r0, #1
  sleeptime = sys_timeouts_sleeptime();
 80176f6:	4604      	mov	r4, r0
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80176f8:	d1e9      	bne.n	80176ce <tcpip_thread+0x1e>
    UNLOCK_TCPIP_CORE();
 80176fa:	4628      	mov	r0, r5
 80176fc:	f00b fee2 	bl	80234c4 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017700:	2200      	movs	r2, #0
 8017702:	a901      	add	r1, sp, #4
 8017704:	4630      	mov	r0, r6
 8017706:	f00b fe93 	bl	8023430 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 801770a:	4628      	mov	r0, r5
 801770c:	f00b fed4 	bl	80234b8 <sys_mutex_lock>
    if (msg == NULL) {
 8017710:	9c01      	ldr	r4, [sp, #4]
 8017712:	b37c      	cbz	r4, 8017774 <tcpip_thread+0xc4>
  switch (msg->type) {
 8017714:	7823      	ldrb	r3, [r4, #0]
 8017716:	2b04      	cmp	r3, #4
 8017718:	d837      	bhi.n	801778a <tcpip_thread+0xda>
 801771a:	e8df f003 	tbb	[pc, r3]
 801771e:	1821      	.short	0x1821
 8017720:	070f      	.short	0x070f
 8017722:	03          	.byte	0x03
 8017723:	00          	.byte	0x00
      msg->msg.cb.function(msg->msg.cb.ctx);
 8017724:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017728:	4798      	blx	r3
      break;
 801772a:	e7e1      	b.n	80176f0 <tcpip_thread+0x40>
      msg->msg.cb.function(msg->msg.cb.ctx);
 801772c:	e9d4 3001 	ldrd	r3, r0, [r4, #4]
 8017730:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017732:	4621      	mov	r1, r4
 8017734:	2009      	movs	r0, #9
 8017736:	f002 fdb3 	bl	801a2a0 <memp_free>
      break;
 801773a:	e7d9      	b.n	80176f0 <tcpip_thread+0x40>
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 801773c:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 8017740:	f008 f814 	bl	801f76c <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017744:	4621      	mov	r1, r4
 8017746:	2009      	movs	r0, #9
 8017748:	f002 fdaa 	bl	801a2a0 <memp_free>
      break;
 801774c:	e7d0      	b.n	80176f0 <tcpip_thread+0x40>
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 801774e:	1d20      	adds	r0, r4, #4
 8017750:	c807      	ldmia	r0, {r0, r1, r2}
 8017752:	f007 ffed 	bl	801f730 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8017756:	4621      	mov	r1, r4
 8017758:	2009      	movs	r0, #9
 801775a:	f002 fda1 	bl	801a2a0 <memp_free>
      break;
 801775e:	e7c7      	b.n	80176f0 <tcpip_thread+0x40>
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8017760:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8017764:	6860      	ldr	r0, [r4, #4]
 8017766:	4798      	blx	r3
 8017768:	b958      	cbnz	r0, 8017782 <tcpip_thread+0xd2>
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801776a:	4621      	mov	r1, r4
 801776c:	200a      	movs	r0, #10
 801776e:	f002 fd97 	bl	801a2a0 <memp_free>
      break;
 8017772:	e7bd      	b.n	80176f0 <tcpip_thread+0x40>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8017774:	463b      	mov	r3, r7
 8017776:	2291      	movs	r2, #145	; 0x91
 8017778:	490c      	ldr	r1, [pc, #48]	; (80177ac <tcpip_thread+0xfc>)
 801777a:	480d      	ldr	r0, [pc, #52]	; (80177b0 <tcpip_thread+0x100>)
 801777c:	f00d fb6a 	bl	8024e54 <iprintf>
      continue;
 8017780:	e7b6      	b.n	80176f0 <tcpip_thread+0x40>
        pbuf_free(msg->msg.inp.p);
 8017782:	6860      	ldr	r0, [r4, #4]
 8017784:	f003 faa4 	bl	801acd0 <pbuf_free>
 8017788:	e7ef      	b.n	801776a <tcpip_thread+0xba>
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801778a:	463b      	mov	r3, r7
 801778c:	22cf      	movs	r2, #207	; 0xcf
 801778e:	4907      	ldr	r1, [pc, #28]	; (80177ac <tcpip_thread+0xfc>)
 8017790:	4807      	ldr	r0, [pc, #28]	; (80177b0 <tcpip_thread+0x100>)
 8017792:	f00d fb5f 	bl	8024e54 <iprintf>
      break;
 8017796:	e7ab      	b.n	80176f0 <tcpip_thread+0x40>
 8017798:	2001e884 	.word	0x2001e884
 801779c:	2001e888 	.word	0x2001e888
 80177a0:	2001e88c 	.word	0x2001e88c
 80177a4:	2001e890 	.word	0x2001e890
 80177a8:	0802c72c 	.word	0x0802c72c
 80177ac:	0802c75c 	.word	0x0802c75c
 80177b0:	08029a64 	.word	0x08029a64

080177b4 <tcpip_inpkt>:
{
 80177b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177b6:	4607      	mov	r7, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80177b8:	4814      	ldr	r0, [pc, #80]	; (801780c <tcpip_inpkt+0x58>)
{
 80177ba:	460e      	mov	r6, r1
 80177bc:	4615      	mov	r5, r2
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80177be:	f00b fe59 	bl	8023474 <sys_mbox_valid>
 80177c2:	b188      	cbz	r0, 80177e8 <tcpip_inpkt+0x34>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80177c4:	22fe      	movs	r2, #254	; 0xfe
 80177c6:	4912      	ldr	r1, [pc, #72]	; (8017810 <tcpip_inpkt+0x5c>)
 80177c8:	200a      	movs	r0, #10
 80177ca:	f002 fd33 	bl	801a234 <memp_malloc_fn>
  if (msg == NULL) {
 80177ce:	4604      	mov	r4, r0
 80177d0:	b1c0      	cbz	r0, 8017804 <tcpip_inpkt+0x50>
  msg->type = TCPIP_MSG_INPKT;
 80177d2:	2300      	movs	r3, #0
  msg->msg.inp.p = p;
 80177d4:	6047      	str	r7, [r0, #4]
  msg->msg.inp.netif = inp;
 80177d6:	6086      	str	r6, [r0, #8]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80177d8:	4601      	mov	r1, r0
  msg->type = TCPIP_MSG_INPKT;
 80177da:	7003      	strb	r3, [r0, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80177dc:	480b      	ldr	r0, [pc, #44]	; (801780c <tcpip_inpkt+0x58>)
  msg->msg.inp.input_fn = input_fn;
 80177de:	60e5      	str	r5, [r4, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80177e0:	f00b fe1c 	bl	802341c <sys_mbox_trypost>
 80177e4:	b938      	cbnz	r0, 80177f6 <tcpip_inpkt+0x42>
}
 80177e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80177e8:	4b09      	ldr	r3, [pc, #36]	; (8017810 <tcpip_inpkt+0x5c>)
 80177ea:	22fc      	movs	r2, #252	; 0xfc
 80177ec:	4909      	ldr	r1, [pc, #36]	; (8017814 <tcpip_inpkt+0x60>)
 80177ee:	480a      	ldr	r0, [pc, #40]	; (8017818 <tcpip_inpkt+0x64>)
 80177f0:	f00d fb30 	bl	8024e54 <iprintf>
 80177f4:	e7e6      	b.n	80177c4 <tcpip_inpkt+0x10>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80177f6:	4621      	mov	r1, r4
 80177f8:	200a      	movs	r0, #10
 80177fa:	f002 fd51 	bl	801a2a0 <memp_free>
    return ERR_MEM;
 80177fe:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_MEM;
 8017804:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801780a:	bf00      	nop
 801780c:	2001e890 	.word	0x2001e890
 8017810:	0802c72c 	.word	0x0802c72c
 8017814:	0802c77c 	.word	0x0802c77c
 8017818:	08029a64 	.word	0x08029a64

0801781c <tcpip_input>:
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801781c:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 8017820:	f013 0f18 	tst.w	r3, #24
 8017824:	d002      	beq.n	801782c <tcpip_input+0x10>
    return tcpip_inpkt(p, inp, ethernet_input);
 8017826:	4a03      	ldr	r2, [pc, #12]	; (8017834 <tcpip_input+0x18>)
 8017828:	f7ff bfc4 	b.w	80177b4 <tcpip_inpkt>
    return tcpip_inpkt(p, inp, ip_input);
 801782c:	4a02      	ldr	r2, [pc, #8]	; (8017838 <tcpip_input+0x1c>)
 801782e:	f7ff bfc1 	b.w	80177b4 <tcpip_inpkt>
 8017832:	bf00      	nop
 8017834:	080232dd 	.word	0x080232dd
 8017838:	08022539 	.word	0x08022539

0801783c <tcpip_try_callback>:
{
 801783c:	b570      	push	{r4, r5, r6, lr}
 801783e:	4606      	mov	r6, r0
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017840:	4814      	ldr	r0, [pc, #80]	; (8017894 <tcpip_try_callback+0x58>)
{
 8017842:	460d      	mov	r5, r1
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017844:	f00b fe16 	bl	8023474 <sys_mbox_valid>
 8017848:	b188      	cbz	r0, 801786e <tcpip_try_callback+0x32>
  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 801784a:	f240 125f 	movw	r2, #351	; 0x15f
 801784e:	4912      	ldr	r1, [pc, #72]	; (8017898 <tcpip_try_callback+0x5c>)
 8017850:	2009      	movs	r0, #9
 8017852:	f002 fcef 	bl	801a234 <memp_malloc_fn>
  if (msg == NULL) {
 8017856:	4604      	mov	r4, r0
 8017858:	b1c0      	cbz	r0, 801788c <tcpip_try_callback+0x50>
  msg->type = TCPIP_MSG_CALLBACK;
 801785a:	2303      	movs	r3, #3
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801785c:	4601      	mov	r1, r0
  msg->msg.cb.ctx = ctx;
 801785e:	e9c0 6501 	strd	r6, r5, [r0, #4]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017862:	480c      	ldr	r0, [pc, #48]	; (8017894 <tcpip_try_callback+0x58>)
  msg->type = TCPIP_MSG_CALLBACK;
 8017864:	7023      	strb	r3, [r4, #0]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017866:	f00b fdd9 	bl	802341c <sys_mbox_trypost>
 801786a:	b940      	cbnz	r0, 801787e <tcpip_try_callback+0x42>
}
 801786c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801786e:	4b0a      	ldr	r3, [pc, #40]	; (8017898 <tcpip_try_callback+0x5c>)
 8017870:	f240 125d 	movw	r2, #349	; 0x15d
 8017874:	4909      	ldr	r1, [pc, #36]	; (801789c <tcpip_try_callback+0x60>)
 8017876:	480a      	ldr	r0, [pc, #40]	; (80178a0 <tcpip_try_callback+0x64>)
 8017878:	f00d faec 	bl	8024e54 <iprintf>
 801787c:	e7e5      	b.n	801784a <tcpip_try_callback+0xe>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 801787e:	4621      	mov	r1, r4
 8017880:	2009      	movs	r0, #9
 8017882:	f002 fd0d 	bl	801a2a0 <memp_free>
    return ERR_MEM;
 8017886:	f04f 30ff 	mov.w	r0, #4294967295
}
 801788a:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 801788c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017890:	bd70      	pop	{r4, r5, r6, pc}
 8017892:	bf00      	nop
 8017894:	2001e890 	.word	0x2001e890
 8017898:	0802c72c 	.word	0x0802c72c
 801789c:	0802c77c 	.word	0x0802c77c
 80178a0:	08029a64 	.word	0x08029a64

080178a4 <tcpip_init>:
{
 80178a4:	b530      	push	{r4, r5, lr}
 80178a6:	b083      	sub	sp, #12
 80178a8:	4605      	mov	r5, r0
 80178aa:	460c      	mov	r4, r1
  lwip_init();
 80178ac:	f001 ffae 	bl	801980c <lwip_init>
  tcpip_init_done = initfunc;
 80178b0:	4a15      	ldr	r2, [pc, #84]	; (8017908 <tcpip_init+0x64>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80178b2:	2140      	movs	r1, #64	; 0x40
  tcpip_init_done_arg = arg;
 80178b4:	4b15      	ldr	r3, [pc, #84]	; (801790c <tcpip_init+0x68>)
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80178b6:	4816      	ldr	r0, [pc, #88]	; (8017910 <tcpip_init+0x6c>)
  tcpip_init_done = initfunc;
 80178b8:	6015      	str	r5, [r2, #0]
  tcpip_init_done_arg = arg;
 80178ba:	601c      	str	r4, [r3, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80178bc:	f00b fd98 	bl	80233f0 <sys_mbox_new>
 80178c0:	b968      	cbnz	r0, 80178de <tcpip_init+0x3a>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80178c2:	4814      	ldr	r0, [pc, #80]	; (8017914 <tcpip_init+0x70>)
 80178c4:	f00b fde8 	bl	8023498 <sys_mutex_new>
 80178c8:	b9a8      	cbnz	r0, 80178f6 <tcpip_init+0x52>
  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80178ca:	2200      	movs	r2, #0
 80178cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80178d0:	4911      	ldr	r1, [pc, #68]	; (8017918 <tcpip_init+0x74>)
 80178d2:	9200      	str	r2, [sp, #0]
 80178d4:	4811      	ldr	r0, [pc, #68]	; (801791c <tcpip_init+0x78>)
 80178d6:	f00b fdf9 	bl	80234cc <sys_thread_new>
}
 80178da:	b003      	add	sp, #12
 80178dc:	bd30      	pop	{r4, r5, pc}
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80178de:	4b10      	ldr	r3, [pc, #64]	; (8017920 <tcpip_init+0x7c>)
 80178e0:	f240 2261 	movw	r2, #609	; 0x261
 80178e4:	490f      	ldr	r1, [pc, #60]	; (8017924 <tcpip_init+0x80>)
 80178e6:	4810      	ldr	r0, [pc, #64]	; (8017928 <tcpip_init+0x84>)
 80178e8:	f00d fab4 	bl	8024e54 <iprintf>
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80178ec:	4809      	ldr	r0, [pc, #36]	; (8017914 <tcpip_init+0x70>)
 80178ee:	f00b fdd3 	bl	8023498 <sys_mutex_new>
 80178f2:	2800      	cmp	r0, #0
 80178f4:	d0e9      	beq.n	80178ca <tcpip_init+0x26>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80178f6:	4b0a      	ldr	r3, [pc, #40]	; (8017920 <tcpip_init+0x7c>)
 80178f8:	f240 2265 	movw	r2, #613	; 0x265
 80178fc:	490b      	ldr	r1, [pc, #44]	; (801792c <tcpip_init+0x88>)
 80178fe:	480a      	ldr	r0, [pc, #40]	; (8017928 <tcpip_init+0x84>)
 8017900:	f00d faa8 	bl	8024e54 <iprintf>
 8017904:	e7e1      	b.n	80178ca <tcpip_init+0x26>
 8017906:	bf00      	nop
 8017908:	2001e888 	.word	0x2001e888
 801790c:	2001e88c 	.word	0x2001e88c
 8017910:	2001e890 	.word	0x2001e890
 8017914:	2001e884 	.word	0x2001e884
 8017918:	080176b1 	.word	0x080176b1
 801791c:	0802c7d4 	.word	0x0802c7d4
 8017920:	0802c72c 	.word	0x0802c72c
 8017924:	0802c78c 	.word	0x0802c78c
 8017928:	08029a64 	.word	0x08029a64
 801792c:	0802c7b0 	.word	0x0802c7b0

08017930 <pbuf_free_callback>:
 * @param p The pbuf (chain) to be dereferenced.
 * @return ERR_OK if callback could be enqueued, an err_t if not
 */
err_t
pbuf_free_callback(struct pbuf *p)
{
 8017930:	4601      	mov	r1, r0
  return tcpip_try_callback(pbuf_free_int, p);
 8017932:	4801      	ldr	r0, [pc, #4]	; (8017938 <pbuf_free_callback+0x8>)
 8017934:	f7ff bf82 	b.w	801783c <tcpip_try_callback>
 8017938:	080176ad 	.word	0x080176ad

0801793c <fs_open>:
err_t
fs_open(struct fs_file *file, const char *name)
{
  const struct fsdata_file *f;

  if ((file == NULL) || (name == NULL)) {
 801793c:	b1e8      	cbz	r0, 801797a <fs_open+0x3e>
{
 801793e:	b570      	push	{r4, r5, r6, lr}
 8017940:	460d      	mov	r5, r1
  if ((file == NULL) || (name == NULL)) {
 8017942:	b1b9      	cbz	r1, 8017974 <fs_open+0x38>
 8017944:	4606      	mov	r6, r0
 8017946:	490e      	ldr	r1, [pc, #56]	; (8017980 <fs_open+0x44>)
    return ERR_OK;
  }
  file->is_custom_file = 0;
#endif /* LWIP_HTTPD_CUSTOM_FILES */

  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017948:	4c0e      	ldr	r4, [pc, #56]	; (8017984 <fs_open+0x48>)
 801794a:	e000      	b.n	801794e <fs_open+0x12>
    if (!strcmp(name, (const char *)f->name)) {
 801794c:	6861      	ldr	r1, [r4, #4]
 801794e:	4628      	mov	r0, r5
 8017950:	f7e8 fc76 	bl	8000240 <strcmp>
 8017954:	b128      	cbz	r0, 8017962 <fs_open+0x26>
  for (f = FS_ROOT; f != NULL; f = f->next) {
 8017956:	6824      	ldr	r4, [r4, #0]
 8017958:	2c00      	cmp	r4, #0
 801795a:	d1f7      	bne.n	801794c <fs_open+0x10>
#endif /* #if LWIP_HTTPD_FILE_STATE */
      return ERR_OK;
    }
  }
  /* file not found */
  return ERR_VAL;
 801795c:	f06f 0005 	mvn.w	r0, #5
}
 8017960:	bd70      	pop	{r4, r5, r6, pc}
      file->len = f->len;
 8017962:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
      file->pextension = NULL;
 8017966:	60f0      	str	r0, [r6, #12]
      file->index = f->len;
 8017968:	60b3      	str	r3, [r6, #8]
      file->len = f->len;
 801796a:	e9c6 2300 	strd	r2, r3, [r6]
      file->flags = f->flags;
 801796e:	7c23      	ldrb	r3, [r4, #16]
 8017970:	7433      	strb	r3, [r6, #16]
}
 8017972:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 8017974:	f06f 000f 	mvn.w	r0, #15
}
 8017978:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_ARG;
 801797a:	f06f 000f 	mvn.w	r0, #15
}
 801797e:	4770      	bx	lr
 8017980:	08037668 	.word	0x08037668
 8017984:	080427d4 	.word	0x080427d4

08017988 <fs_close>:
#endif /* LWIP_HTTPD_CUSTOM_FILES */
#if LWIP_HTTPD_FILE_STATE
  fs_state_free(file, file->state);
#endif /* #if LWIP_HTTPD_FILE_STATE */
  LWIP_UNUSED_ARG(file);
}
 8017988:	4770      	bx	lr
 801798a:	bf00      	nop

0801798c <fs_bytes_left>:
#endif /* LWIP_HTTPD_FS_ASYNC_READ */
/*-----------------------------------------------------------------------------------*/
int
fs_bytes_left(struct fs_file *file)
{
  return file->len - file->index;
 801798c:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
}
 8017990:	1a10      	subs	r0, r2, r0
 8017992:	4770      	bx	lr

08017994 <http_write>:
 * @param apiflags directly passed to tcp_write
 * @return the return value of tcp_write
 */
static err_t
http_write(struct altcp_pcb *pcb, const void *ptr, u16_t *length, u8_t apiflags)
{
 8017994:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len, max_len;
  err_t err;
  LWIP_ASSERT("length != NULL", length != NULL);
  len = *length;
 8017998:	8814      	ldrh	r4, [r2, #0]
  if (len == 0) {
 801799a:	b374      	cbz	r4, 80179fa <http_write+0x66>
  if (max_len < len) {
    len = max_len;
  }
#ifdef HTTPD_MAX_WRITE_LEN
  /* Additional limitation: e.g. don't enqueue more than 2*mss at once */
  max_len = HTTPD_MAX_WRITE_LEN(pcb);
 801799c:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 80179a0:	4617      	mov	r7, r2
 80179a2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
 80179a6:	4605      	mov	r5, r0
 80179a8:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80179ac:	460e      	mov	r6, r1
 80179ae:	4698      	mov	r8, r3
 80179b0:	fa1f fc8c 	uxth.w	ip, ip
 80179b4:	4594      	cmp	ip, r2
 80179b6:	bf28      	it	cs
 80179b8:	4694      	movcs	ip, r2
 80179ba:	4564      	cmp	r4, ip
 80179bc:	bf28      	it	cs
 80179be:	4664      	movcs	r4, ip
    len = max_len;
  }
#endif /* HTTPD_MAX_WRITE_LEN */
  do {
    LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE, ("Trying to send %d bytes\n", len));
    err = altcp_write(pcb, ptr, len, apiflags);
 80179c0:	4643      	mov	r3, r8
 80179c2:	4622      	mov	r2, r4
 80179c4:	4631      	mov	r1, r6
 80179c6:	4628      	mov	r0, r5
 80179c8:	f006 fd1a 	bl	801e400 <tcp_write>
    if (err == ERR_MEM) {
 80179cc:	1c43      	adds	r3, r0, #1
 80179ce:	d007      	beq.n	80179e0 <http_write+0x4c>
      LWIP_DEBUGF(HTTPD_DEBUG | LWIP_DBG_TRACE,
                  ("Send failed, trying less (%d bytes)\n", len));
    }
  } while ((err == ERR_MEM) && (len > 1));

  if (err == ERR_OK) {
 80179d0:	b970      	cbnz	r0, 80179f0 <http_write+0x5c>
 80179d2:	803c      	strh	r4, [r7, #0]

#if LWIP_HTTPD_SUPPORT_11_KEEPALIVE
  /* ensure nagle is normally enabled (only disabled for persistent connections
     when all data has been enqueued but the connection stays open for the next
     request */
  altcp_nagle_enable(pcb);
 80179d4:	8b6b      	ldrh	r3, [r5, #26]
 80179d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80179da:	836b      	strh	r3, [r5, #26]
#endif

  return err;
}
 80179dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((altcp_sndbuf(pcb) == 0) ||
 80179e0:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
 80179e4:	b123      	cbz	r3, 80179f0 <http_write+0x5c>
 80179e6:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        len /= 2;
 80179ea:	0864      	lsrs	r4, r4, #1
      if ((altcp_sndbuf(pcb) == 0) ||
 80179ec:	2b08      	cmp	r3, #8
 80179ee:	d901      	bls.n	80179f4 <http_write+0x60>
    *length = 0;
 80179f0:	2400      	movs	r4, #0
 80179f2:	e7ee      	b.n	80179d2 <http_write+0x3e>
  } while ((err == ERR_MEM) && (len > 1));
 80179f4:	2c01      	cmp	r4, #1
 80179f6:	d8e3      	bhi.n	80179c0 <http_write+0x2c>
 80179f8:	e7fa      	b.n	80179f0 <http_write+0x5c>
    return ERR_OK;
 80179fa:	4620      	mov	r0, r4
}
 80179fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08017a00 <http_get_404_file>:
 * @param uri pointer that receives the actual file name URI
 * @return file struct for the error page or NULL no matching file was found
 */
static struct fs_file *
http_get_404_file(struct http_state *hs, const char **uri)
{
 8017a00:	b538      	push	{r3, r4, r5, lr}
  err_t err;

  *uri = "/404.html";
 8017a02:	4b0e      	ldr	r3, [pc, #56]	; (8017a3c <http_get_404_file+0x3c>)
{
 8017a04:	460d      	mov	r5, r1
  err = fs_open(&hs->file_handle, *uri);
 8017a06:	4604      	mov	r4, r0
 8017a08:	4619      	mov	r1, r3
  *uri = "/404.html";
 8017a0a:	602b      	str	r3, [r5, #0]
  err = fs_open(&hs->file_handle, *uri);
 8017a0c:	f7ff ff96 	bl	801793c <fs_open>
  if (err != ERR_OK) {
 8017a10:	b908      	cbnz	r0, 8017a16 <http_get_404_file+0x16>
      }
    }
  }

  return &hs->file_handle;
}
 8017a12:	4620      	mov	r0, r4
 8017a14:	bd38      	pop	{r3, r4, r5, pc}
    *uri = "/404.htm";
 8017a16:	490a      	ldr	r1, [pc, #40]	; (8017a40 <http_get_404_file+0x40>)
    err = fs_open(&hs->file_handle, *uri);
 8017a18:	4620      	mov	r0, r4
    *uri = "/404.htm";
 8017a1a:	6029      	str	r1, [r5, #0]
    err = fs_open(&hs->file_handle, *uri);
 8017a1c:	f7ff ff8e 	bl	801793c <fs_open>
    if (err != ERR_OK) {
 8017a20:	2800      	cmp	r0, #0
 8017a22:	d0f6      	beq.n	8017a12 <http_get_404_file+0x12>
      *uri = "/404.shtml";
 8017a24:	4907      	ldr	r1, [pc, #28]	; (8017a44 <http_get_404_file+0x44>)
      err = fs_open(&hs->file_handle, *uri);
 8017a26:	4620      	mov	r0, r4
      *uri = "/404.shtml";
 8017a28:	6029      	str	r1, [r5, #0]
      err = fs_open(&hs->file_handle, *uri);
 8017a2a:	f7ff ff87 	bl	801793c <fs_open>
      if (err != ERR_OK) {
 8017a2e:	2800      	cmp	r0, #0
 8017a30:	d0ef      	beq.n	8017a12 <http_get_404_file+0x12>
        *uri = NULL;
 8017a32:	2300      	movs	r3, #0
        return NULL;
 8017a34:	461c      	mov	r4, r3
        *uri = NULL;
 8017a36:	602b      	str	r3, [r5, #0]
        return NULL;
 8017a38:	e7eb      	b.n	8017a12 <http_get_404_file+0x12>
 8017a3a:	bf00      	nop
 8017a3c:	080427e8 	.word	0x080427e8
 8017a40:	080427f4 	.word	0x080427f4
 8017a44:	08042800 	.word	0x08042800

08017a48 <http_accept>:
  struct http_state *hs;
  LWIP_UNUSED_ARG(err);
  LWIP_UNUSED_ARG(arg);
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_accept %p / %p\n", (void *)pcb, arg));

  if ((err != ERR_OK) || (pcb == NULL)) {
 8017a48:	bb82      	cbnz	r2, 8017aac <http_accept+0x64>
{
 8017a4a:	b570      	push	{r4, r5, r6, lr}
  if ((err != ERR_OK) || (pcb == NULL)) {
 8017a4c:	fab1 f581 	clz	r5, r1
 8017a50:	460c      	mov	r4, r1
 8017a52:	096d      	lsrs	r5, r5, #5
 8017a54:	b339      	cbz	r1, 8017aa6 <http_accept+0x5e>
    return ERR_VAL;
  }

  /* Set priority */
  altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8017a56:	2101      	movs	r1, #1
 8017a58:	4620      	mov	r0, r4
 8017a5a:	f003 fec3 	bl	801b7e4 <tcp_setprio>
  struct http_state *ret = HTTP_ALLOC_HTTP_STATE();
 8017a5e:	2034      	movs	r0, #52	; 0x34
 8017a60:	f002 fa46 	bl	8019ef0 <mem_malloc>
  if (ret != NULL) {
 8017a64:	4606      	mov	r6, r0
 8017a66:	b1d8      	cbz	r0, 8017aa0 <http_accept+0x58>
  memset(hs, 0, sizeof(struct http_state));
 8017a68:	2234      	movs	r2, #52	; 0x34
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	f00c fa54 	bl	8023f18 <memset>
  }
  hs->pcb = pcb;

  /* Tell TCP that this is the structure we wish to be passed for our
     callbacks. */
  altcp_arg(pcb, hs);
 8017a70:	4631      	mov	r1, r6
 8017a72:	4620      	mov	r0, r4
  hs->pcb = pcb;
 8017a74:	61f4      	str	r4, [r6, #28]
  altcp_arg(pcb, hs);
 8017a76:	f003 feeb 	bl	801b850 <tcp_arg>

  /* Set up the various callback functions */
  altcp_recv(pcb, http_recv);
 8017a7a:	4620      	mov	r0, r4
 8017a7c:	490d      	ldr	r1, [pc, #52]	; (8017ab4 <http_accept+0x6c>)
 8017a7e:	f003 feeb 	bl	801b858 <tcp_recv>
  altcp_err(pcb, http_err);
 8017a82:	4620      	mov	r0, r4
 8017a84:	490c      	ldr	r1, [pc, #48]	; (8017ab8 <http_accept+0x70>)
 8017a86:	f003 ff1f 	bl	801b8c8 <tcp_err>
  altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017a8a:	2204      	movs	r2, #4
 8017a8c:	4620      	mov	r0, r4
 8017a8e:	490b      	ldr	r1, [pc, #44]	; (8017abc <http_accept+0x74>)
 8017a90:	f003 ff3c 	bl	801b90c <tcp_poll>
  altcp_sent(pcb, http_sent);
 8017a94:	4620      	mov	r0, r4
 8017a96:	490a      	ldr	r1, [pc, #40]	; (8017ac0 <http_accept+0x78>)
 8017a98:	f003 fefa 	bl	801b890 <tcp_sent>

  return ERR_OK;
 8017a9c:	4628      	mov	r0, r5
}
 8017a9e:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_MEM;
 8017aa0:	f04f 30ff 	mov.w	r0, #4294967295
}
 8017aa4:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017aa6:	f06f 0005 	mvn.w	r0, #5
}
 8017aaa:	bd70      	pop	{r4, r5, r6, pc}
    return ERR_VAL;
 8017aac:	f06f 0005 	mvn.w	r0, #5
}
 8017ab0:	4770      	bx	lr
 8017ab2:	bf00      	nop
 8017ab4:	08018721 	.word	0x08018721
 8017ab8:	08018009 	.word	0x08018009
 8017abc:	080186c9 	.word	0x080186c9
 8017ac0:	080186b1 	.word	0x080186b1

08017ac4 <http_init_file>:
{
 8017ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac8:	b087      	sub	sp, #28
 8017aca:	4604      	mov	r4, r0
  if (file != NULL) {
 8017acc:	460e      	mov	r6, r1
{
 8017ace:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
 8017ad2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017ad4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (file != NULL) {
 8017ad8:	2900      	cmp	r1, #0
 8017ada:	f000 80aa 	beq.w	8017c32 <http_init_file+0x16e>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8017ade:	680b      	ldr	r3, [r1, #0]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	f000 80ac 	beq.w	8017c3e <http_init_file+0x17a>
    if (tag_check) {
 8017ae6:	2f00      	cmp	r7, #0
 8017ae8:	d16f      	bne.n	8017bca <http_init_file+0x106>
    hs->handle = file;
 8017aea:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8017aec:	2d00      	cmp	r5, #0
 8017aee:	d04f      	beq.n	8017b90 <http_init_file+0xcc>
  if (!params || (params[0] == '\0')) {
 8017af0:	782b      	ldrb	r3, [r5, #0]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	f000 80c0 	beq.w	8017c78 <http_init_file+0x1b4>
 8017af8:	4b61      	ldr	r3, [pc, #388]	; (8017c80 <http_init_file+0x1bc>)
 8017afa:	2701      	movs	r7, #1
 8017afc:	9405      	str	r4, [sp, #20]
 8017afe:	462c      	mov	r4, r5
 8017b00:	f8df 9180 	ldr.w	r9, [pc, #384]	; 8017c84 <http_init_file+0x1c0>
 8017b04:	4698      	mov	r8, r3
 8017b06:	9304      	str	r3, [sp, #16]
 8017b08:	e017      	b.n	8017b3a <http_init_file+0x76>
 8017b0a:	2d0e      	cmp	r5, #14
      *pair = '\0';
 8017b0c:	f04f 0300 	mov.w	r3, #0
 8017b10:	bfcc      	ite	gt
 8017b12:	2500      	movgt	r5, #0
 8017b14:	2501      	movle	r5, #1
 8017b16:	f80b 3b01 	strb.w	r3, [fp], #1
    equals = strchr(equals, '=');
 8017b1a:	4620      	mov	r0, r4
 8017b1c:	213d      	movs	r1, #61	; 0x3d
 8017b1e:	f00d fc1d 	bl	802535c <strchr>
    if (equals) {
 8017b22:	b320      	cbz	r0, 8017b6e <http_init_file+0xaa>
      *equals = '\0';
 8017b24:	f04f 0300 	mov.w	r3, #0
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017b28:	f108 0804 	add.w	r8, r8, #4
 8017b2c:	3701      	adds	r7, #1
 8017b2e:	465c      	mov	r4, fp
      *equals = '\0';
 8017b30:	f800 3b01 	strb.w	r3, [r0], #1
      http_cgi_param_vals[loop] = equals + 1;
 8017b34:	f848 0c04 	str.w	r0, [r8, #-4]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017b38:	b30d      	cbz	r5, 8017b7e <http_init_file+0xba>
    pair = strchr(pair, '&');
 8017b3a:	4620      	mov	r0, r4
 8017b3c:	2126      	movs	r1, #38	; 0x26
    http_cgi_params[loop] = pair;
 8017b3e:	f849 4b04 	str.w	r4, [r9], #4
    pair = strchr(pair, '&');
 8017b42:	1e7d      	subs	r5, r7, #1
 8017b44:	f00d fc0a 	bl	802535c <strchr>
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017b48:	46ba      	mov	sl, r7
    if (pair) {
 8017b4a:	4683      	mov	fp, r0
 8017b4c:	2800      	cmp	r0, #0
 8017b4e:	d1dc      	bne.n	8017b0a <http_init_file+0x46>
      pair = strchr(equals, ' ');
 8017b50:	4620      	mov	r0, r4
 8017b52:	2120      	movs	r1, #32
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017b54:	465d      	mov	r5, fp
      pair = strchr(equals, ' ');
 8017b56:	f00d fc01 	bl	802535c <strchr>
      if (pair) {
 8017b5a:	2800      	cmp	r0, #0
 8017b5c:	d0dd      	beq.n	8017b1a <http_init_file+0x56>
        *pair = '\0';
 8017b5e:	f880 b000 	strb.w	fp, [r0]
    equals = strchr(equals, '=');
 8017b62:	213d      	movs	r1, #61	; 0x3d
 8017b64:	4620      	mov	r0, r4
 8017b66:	f00d fbf9 	bl	802535c <strchr>
    if (equals) {
 8017b6a:	2800      	cmp	r0, #0
 8017b6c:	d1da      	bne.n	8017b24 <http_init_file+0x60>
      http_cgi_param_vals[loop] = NULL;
 8017b6e:	f8c8 0000 	str.w	r0, [r8]
  for (loop = 0; (loop < LWIP_HTTPD_MAX_CGI_PARAMETERS) && pair; loop++) {
 8017b72:	3701      	adds	r7, #1
 8017b74:	f108 0804 	add.w	r8, r8, #4
 8017b78:	465c      	mov	r4, fp
 8017b7a:	2d00      	cmp	r5, #0
 8017b7c:	d1dd      	bne.n	8017b3a <http_init_file+0x76>
 8017b7e:	4652      	mov	r2, sl
 8017b80:	9c05      	ldr	r4, [sp, #20]
      httpd_cgi_handler(file, uri, count, http_cgi_params, http_cgi_param_vals
 8017b82:	9b04      	ldr	r3, [sp, #16]
 8017b84:	4630      	mov	r0, r6
 8017b86:	9903      	ldr	r1, [sp, #12]
 8017b88:	9300      	str	r3, [sp, #0]
 8017b8a:	4b3e      	ldr	r3, [pc, #248]	; (8017c84 <http_init_file+0x1c0>)
 8017b8c:	f7ef fce8 	bl	8007560 <httpd_cgi_handler>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017b90:	e9d6 3200 	ldrd	r3, r2, [r6]
 8017b94:	2a00      	cmp	r2, #0
    hs->file = file->data;
 8017b96:	61a3      	str	r3, [r4, #24]
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017b98:	db5c      	blt.n	8017c54 <http_init_file+0x190>
    hs->retries = 0;
 8017b9a:	2100      	movs	r1, #0
    LWIP_ASSERT("HTTP headers not included in file system",
 8017b9c:	6963      	ldr	r3, [r4, #20]
      hs->left = (u32_t)file->len;
 8017b9e:	6262      	str	r2, [r4, #36]	; 0x24
    hs->retries = 0;
 8017ba0:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
    LWIP_ASSERT("HTTP headers not included in file system",
 8017ba4:	7c1b      	ldrb	r3, [r3, #16]
 8017ba6:	07d9      	lsls	r1, r3, #31
 8017ba8:	d526      	bpl.n	8017bf8 <http_init_file+0x134>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8017baa:	9b02      	ldr	r3, [sp, #8]
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d132      	bne.n	8017c16 <http_init_file+0x152>
  if (hs->keepalive) {
 8017bb0:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8017bb4:	b12b      	cbz	r3, 8017bc2 <http_init_file+0xfe>
    if (hs->ssi != NULL) {
 8017bb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8017bb8:	2b00      	cmp	r3, #0
 8017bba:	d054      	beq.n	8017c66 <http_init_file+0x1a2>
      hs->keepalive = 0;
 8017bbc:	2300      	movs	r3, #0
 8017bbe:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
}
 8017bc2:	2000      	movs	r0, #0
 8017bc4:	b007      	add	sp, #28
 8017bc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  struct http_ssi_state *ret = HTTP_ALLOC_SSI_STATE();
 8017bca:	f44f 7090 	mov.w	r0, #288	; 0x120
 8017bce:	f002 f98f 	bl	8019ef0 <mem_malloc>
  if (ret != NULL) {
 8017bd2:	4607      	mov	r7, r0
 8017bd4:	2800      	cmp	r0, #0
 8017bd6:	d088      	beq.n	8017aea <http_init_file+0x26>
    memset(ret, 0, sizeof(struct http_ssi_state));
 8017bd8:	f44f 7290 	mov.w	r2, #288	; 0x120
 8017bdc:	2100      	movs	r1, #0
 8017bde:	f00c f99b 	bl	8023f18 <memset>
        ssi->parsed = file->data;
 8017be2:	6833      	ldr	r3, [r6, #0]
        ssi->parse_left = file->len;
 8017be4:	6872      	ldr	r2, [r6, #4]
        ssi->parsed = file->data;
 8017be6:	603b      	str	r3, [r7, #0]
        ssi->parse_left = file->len;
 8017be8:	e9c7 3202 	strd	r3, r2, [r7, #8]
        hs->ssi = ssi;
 8017bec:	62e7      	str	r7, [r4, #44]	; 0x2c
    hs->handle = file;
 8017bee:	6166      	str	r6, [r4, #20]
    if (params != NULL) {
 8017bf0:	2d00      	cmp	r5, #0
 8017bf2:	f47f af7d 	bne.w	8017af0 <http_init_file+0x2c>
 8017bf6:	e7cb      	b.n	8017b90 <http_init_file+0xcc>
    LWIP_ASSERT("HTTP headers not included in file system",
 8017bf8:	4b23      	ldr	r3, [pc, #140]	; (8017c88 <http_init_file+0x1c4>)
 8017bfa:	f640 1243 	movw	r2, #2371	; 0x943
 8017bfe:	4923      	ldr	r1, [pc, #140]	; (8017c8c <http_init_file+0x1c8>)
 8017c00:	4823      	ldr	r0, [pc, #140]	; (8017c90 <http_init_file+0x1cc>)
 8017c02:	f00d f927 	bl	8024e54 <iprintf>
    if (is_09 && ((hs->handle->flags & FS_FILE_FLAGS_HEADER_INCLUDED) != 0)) {
 8017c06:	9b02      	ldr	r3, [sp, #8]
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d0d1      	beq.n	8017bb0 <http_init_file+0xec>
 8017c0c:	6963      	ldr	r3, [r4, #20]
 8017c0e:	7c1b      	ldrb	r3, [r3, #16]
 8017c10:	07db      	lsls	r3, r3, #31
 8017c12:	d5cd      	bpl.n	8017bb0 <http_init_file+0xec>
      char *file_start = lwip_strnstr(hs->file, CRLF CRLF, hs->left);
 8017c14:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8017c16:	491f      	ldr	r1, [pc, #124]	; (8017c94 <http_init_file+0x1d0>)
 8017c18:	69a0      	ldr	r0, [r4, #24]
 8017c1a:	f001 f823 	bl	8018c64 <lwip_strnstr>
      if (file_start != NULL) {
 8017c1e:	2800      	cmp	r0, #0
 8017c20:	d0c6      	beq.n	8017bb0 <http_init_file+0xec>
        int diff = file_start + 4 - hs->file;
 8017c22:	3004      	adds	r0, #4
 8017c24:	69a2      	ldr	r2, [r4, #24]
        hs->left -= (u32_t)diff;
 8017c26:	6a63      	ldr	r3, [r4, #36]	; 0x24
        int diff = file_start + 4 - hs->file;
 8017c28:	1a82      	subs	r2, r0, r2
        hs->file += diff;
 8017c2a:	61a0      	str	r0, [r4, #24]
        hs->left -= (u32_t)diff;
 8017c2c:	1a9b      	subs	r3, r3, r2
 8017c2e:	6263      	str	r3, [r4, #36]	; 0x24
 8017c30:	e7be      	b.n	8017bb0 <http_init_file+0xec>
    hs->file = NULL;
 8017c32:	e9c0 1105 	strd	r1, r1, [r0, #20]
    hs->left = 0;
 8017c36:	6261      	str	r1, [r4, #36]	; 0x24
    hs->retries = 0;
 8017c38:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
 8017c3c:	e7b8      	b.n	8017bb0 <http_init_file+0xec>
    LWIP_ASSERT("file->data != NULL", file->data != NULL);
 8017c3e:	4b12      	ldr	r3, [pc, #72]	; (8017c88 <http_init_file+0x1c4>)
 8017c40:	f640 120b 	movw	r2, #2315	; 0x90b
 8017c44:	4914      	ldr	r1, [pc, #80]	; (8017c98 <http_init_file+0x1d4>)
 8017c46:	4812      	ldr	r0, [pc, #72]	; (8017c90 <http_init_file+0x1cc>)
 8017c48:	f00d f904 	bl	8024e54 <iprintf>
    if (tag_check) {
 8017c4c:	2f00      	cmp	r7, #0
 8017c4e:	f43f af4c 	beq.w	8017aea <http_init_file+0x26>
 8017c52:	e7ba      	b.n	8017bca <http_init_file+0x106>
    LWIP_ASSERT("File length must be positive!", (file->len >= 0));
 8017c54:	f640 1234 	movw	r2, #2356	; 0x934
 8017c58:	4b0b      	ldr	r3, [pc, #44]	; (8017c88 <http_init_file+0x1c4>)
 8017c5a:	4910      	ldr	r1, [pc, #64]	; (8017c9c <http_init_file+0x1d8>)
 8017c5c:	480c      	ldr	r0, [pc, #48]	; (8017c90 <http_init_file+0x1cc>)
 8017c5e:	f00d f8f9 	bl	8024e54 <iprintf>
      hs->left = (u32_t)file->len;
 8017c62:	6872      	ldr	r2, [r6, #4]
 8017c64:	e799      	b.n	8017b9a <http_init_file+0xd6>
      if ((hs->handle != NULL) &&
 8017c66:	6963      	ldr	r3, [r4, #20]
 8017c68:	2b00      	cmp	r3, #0
 8017c6a:	d0aa      	beq.n	8017bc2 <http_init_file+0xfe>
 8017c6c:	7c1b      	ldrb	r3, [r3, #16]
 8017c6e:	f003 0303 	and.w	r3, r3, #3
 8017c72:	2b01      	cmp	r3, #1
 8017c74:	d1a5      	bne.n	8017bc2 <http_init_file+0xfe>
 8017c76:	e7a1      	b.n	8017bbc <http_init_file+0xf8>
    return (0);
 8017c78:	461a      	mov	r2, r3
 8017c7a:	4b01      	ldr	r3, [pc, #4]	; (8017c80 <http_init_file+0x1bc>)
 8017c7c:	9304      	str	r3, [sp, #16]
 8017c7e:	e780      	b.n	8017b82 <http_init_file+0xbe>
 8017c80:	2001e894 	.word	0x2001e894
 8017c84:	2001e8d4 	.word	0x2001e8d4
 8017c88:	0804280c 	.word	0x0804280c
 8017c8c:	08042878 	.word	0x08042878
 8017c90:	08029a64 	.word	0x08029a64
 8017c94:	08029d04 	.word	0x08029d04
 8017c98:	08042844 	.word	0x08042844
 8017c9c:	08042858 	.word	0x08042858

08017ca0 <http_find_file>:
{
 8017ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ca4:	ed2d 8b02 	vpush	{d8}
 8017ca8:	b087      	sub	sp, #28
 8017caa:	4605      	mov	r5, r0
  size_t uri_len = strlen(uri);
 8017cac:	4608      	mov	r0, r1
 8017cae:	460c      	mov	r4, r1
{
 8017cb0:	4690      	mov	r8, r2
 8017cb2:	9105      	str	r1, [sp, #20]
  size_t uri_len = strlen(uri);
 8017cb4:	f7e8 face 	bl	8000254 <strlen>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017cb8:	4606      	mov	r6, r0
 8017cba:	b148      	cbz	r0, 8017cd0 <http_find_file+0x30>
 8017cbc:	f100 39ff 	add.w	r9, r0, #4294967295
 8017cc0:	f814 3009 	ldrb.w	r3, [r4, r9]
 8017cc4:	2b2f      	cmp	r3, #47	; 0x2f
 8017cc6:	d06a      	beq.n	8017d9e <http_find_file+0xfe>
      err = fs_open(&hs->file_handle, file_name);
 8017cc8:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8017cca:	f04f 0900 	mov.w	r9, #0
 8017cce:	e001      	b.n	8017cd4 <http_find_file+0x34>
      err = fs_open(&hs->file_handle, file_name);
 8017cd0:	462f      	mov	r7, r5
  u8_t tag_check = 0;
 8017cd2:	4681      	mov	r9, r0
    params = (char *)strchr(uri, '?');
 8017cd4:	213f      	movs	r1, #63	; 0x3f
 8017cd6:	4620      	mov	r0, r4
 8017cd8:	f00d fb40 	bl	802535c <strchr>
    if (params != NULL) {
 8017cdc:	4606      	mov	r6, r0
 8017cde:	b118      	cbz	r0, 8017ce8 <http_find_file+0x48>
      *params = '\0';
 8017ce0:	2300      	movs	r3, #0
 8017ce2:	f806 3b01 	strb.w	r3, [r6], #1
    err = fs_open(&hs->file_handle, uri);
 8017ce6:	9c05      	ldr	r4, [sp, #20]
 8017ce8:	4621      	mov	r1, r4
 8017cea:	4628      	mov	r0, r5
 8017cec:	f7ff fe26 	bl	801793c <fs_open>
    if (err == ERR_OK) {
 8017cf0:	b9b0      	cbnz	r0, 8017d20 <http_find_file+0x80>
    if (file != NULL) {
 8017cf2:	b1e7      	cbz	r7, 8017d2e <http_find_file+0x8e>
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8017cf4:	f897 9010 	ldrb.w	r9, [r7, #16]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017cf8:	9c05      	ldr	r4, [sp, #20]
      if (file->flags & FS_FILE_FLAGS_SSI) {
 8017cfa:	f019 0908 	ands.w	r9, r9, #8
 8017cfe:	d01d      	beq.n	8017d3c <http_find_file+0x9c>
        tag_check = 1;
 8017d00:	f04f 0901 	mov.w	r9, #1
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017d04:	4623      	mov	r3, r4
 8017d06:	4642      	mov	r2, r8
 8017d08:	4639      	mov	r1, r7
 8017d0a:	4628      	mov	r0, r5
 8017d0c:	9601      	str	r6, [sp, #4]
 8017d0e:	f8cd 9000 	str.w	r9, [sp]
 8017d12:	f7ff fed7 	bl	8017ac4 <http_init_file>
}
 8017d16:	b007      	add	sp, #28
 8017d18:	ecbd 8b02 	vpop	{d8}
 8017d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      file = http_get_404_file(hs, &uri);
 8017d20:	a905      	add	r1, sp, #20
 8017d22:	4628      	mov	r0, r5
 8017d24:	f7ff fe6c 	bl	8017a00 <http_get_404_file>
 8017d28:	4607      	mov	r7, r0
    if (file != NULL) {
 8017d2a:	2f00      	cmp	r7, #0
 8017d2c:	d1e2      	bne.n	8017cf4 <http_find_file+0x54>
    file = http_get_404_file(hs, &uri);
 8017d2e:	a905      	add	r1, sp, #20
 8017d30:	4628      	mov	r0, r5
 8017d32:	f7ff fe65 	bl	8017a00 <http_get_404_file>
 8017d36:	4607      	mov	r7, r0
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017d38:	9c05      	ldr	r4, [sp, #20]
 8017d3a:	e7e3      	b.n	8017d04 <http_find_file+0x64>
    char *param = (char *)strstr(uri, "?");
 8017d3c:	213f      	movs	r1, #63	; 0x3f
 8017d3e:	4620      	mov	r0, r4
 8017d40:	f00d fb0c 	bl	802535c <strchr>
    if (param != NULL) {
 8017d44:	4682      	mov	sl, r0
 8017d46:	b108      	cbz	r0, 8017d4c <http_find_file+0xac>
      *param = 0;
 8017d48:	f880 9000 	strb.w	r9, [r0]
    for (sub = strstr(sub, "."); sub != NULL; sub = strstr(sub, ".")) {
 8017d4c:	212e      	movs	r1, #46	; 0x2e
 8017d4e:	4620      	mov	r0, r4
 8017d50:	f00d fb04 	bl	802535c <strchr>
 8017d54:	4603      	mov	r3, r0
 8017d56:	b138      	cbz	r0, 8017d68 <http_find_file+0xc8>
 8017d58:	1c58      	adds	r0, r3, #1
 8017d5a:	212e      	movs	r1, #46	; 0x2e
 8017d5c:	461c      	mov	r4, r3
 8017d5e:	f00d fafd 	bl	802535c <strchr>
 8017d62:	4603      	mov	r3, r0
 8017d64:	2800      	cmp	r0, #0
 8017d66:	d1f7      	bne.n	8017d58 <http_find_file+0xb8>
  u8_t tag_check = 0;
 8017d68:	4940      	ldr	r1, [pc, #256]	; (8017e6c <http_find_file+0x1cc>)
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017d6a:	4620      	mov	r0, r4
 8017d6c:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8017e7c <http_find_file+0x1dc>
 8017d70:	f000 ffa0 	bl	8018cb4 <lwip_stricmp>
 8017d74:	b148      	cbz	r0, 8017d8a <http_find_file+0xea>
    for (loop = 0; loop < NUM_SHTML_EXTENSIONS; loop++) {
 8017d76:	4b3e      	ldr	r3, [pc, #248]	; (8017e70 <http_find_file+0x1d0>)
 8017d78:	459b      	cmp	fp, r3
 8017d7a:	d008      	beq.n	8017d8e <http_find_file+0xee>
      if (!lwip_stricmp(ext, g_pcSSIExtensions[loop])) {
 8017d7c:	f85b 1b04 	ldr.w	r1, [fp], #4
 8017d80:	4620      	mov	r0, r4
 8017d82:	f000 ff97 	bl	8018cb4 <lwip_stricmp>
 8017d86:	2800      	cmp	r0, #0
 8017d88:	d1f5      	bne.n	8017d76 <http_find_file+0xd6>
        tag_check = 1;
 8017d8a:	f04f 0901 	mov.w	r9, #1
    if (param != NULL) {
 8017d8e:	f1ba 0f00 	cmp.w	sl, #0
 8017d92:	d0d1      	beq.n	8017d38 <http_find_file+0x98>
      *param = '?';
 8017d94:	233f      	movs	r3, #63	; 0x3f
 8017d96:	f88a 3000 	strb.w	r3, [sl]
  return http_init_file(hs, file, is_09, uri, tag_check, params);
 8017d9a:	9c05      	ldr	r4, [sp, #20]
 8017d9c:	e7b2      	b.n	8017d04 <http_find_file+0x64>
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017d9e:	4b35      	ldr	r3, [pc, #212]	; (8017e74 <http_find_file+0x1d4>)
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017da0:	429c      	cmp	r4, r3
  if ((uri_len > 0) && (uri[uri_len - 1] == '/') &&
 8017da2:	9302      	str	r3, [sp, #8]
      ((uri != http_uri_buf) || (uri_len == 1))) {
 8017da4:	d106      	bne.n	8017db4 <http_find_file+0x114>
 8017da6:	f1a0 0001 	sub.w	r0, r0, #1
 8017daa:	fab0 f080 	clz	r0, r0
 8017dae:	0940      	lsrs	r0, r0, #5
 8017db0:	2800      	cmp	r0, #0
 8017db2:	d057      	beq.n	8017e64 <http_find_file+0x1c4>
    size_t copy_len = LWIP_MIN(sizeof(http_uri_buf) - 1, uri_len - 1);
 8017db4:	f1b9 0f3f 	cmp.w	r9, #63	; 0x3f
 8017db8:	bf28      	it	cs
 8017dba:	f04f 093f 	movcs.w	r9, #63	; 0x3f
    if (copy_len > 0) {
 8017dbe:	2e01      	cmp	r6, #1
 8017dc0:	d008      	beq.n	8017dd4 <http_find_file+0x134>
      MEMCPY(http_uri_buf, uri, copy_len);
 8017dc2:	464a      	mov	r2, r9
 8017dc4:	4621      	mov	r1, r4
 8017dc6:	482b      	ldr	r0, [pc, #172]	; (8017e74 <http_find_file+0x1d4>)
 8017dc8:	f00c f87e 	bl	8023ec8 <memcpy>
      http_uri_buf[copy_len] = 0;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	9a02      	ldr	r2, [sp, #8]
 8017dd0:	f802 3009 	strb.w	r3, [r2, r9]
      err = fs_open(&hs->file_handle, file_name);
 8017dd4:	462f      	mov	r7, r5
 8017dd6:	f04f 0b00 	mov.w	fp, #0
        file_name = http_uri_buf;
 8017dda:	f8df a098 	ldr.w	sl, [pc, #152]	; 8017e74 <http_find_file+0x1d4>
 8017dde:	ee08 8a10 	vmov	s16, r8
      if (copy_len > 0) {
 8017de2:	2e01      	cmp	r6, #1
        file_name = http_uri_buf;
 8017de4:	46d0      	mov	r8, sl
      if (copy_len > 0) {
 8017de6:	d012      	beq.n	8017e0e <http_find_file+0x16e>
        if (len_left > 0) {
 8017de8:	f1d9 023f 	rsbs	r2, r9, #63	; 0x3f
 8017dec:	d113      	bne.n	8017e16 <http_find_file+0x176>
      err = fs_open(&hs->file_handle, file_name);
 8017dee:	4641      	mov	r1, r8
 8017df0:	4628      	mov	r0, r5
 8017df2:	f7ff fda3 	bl	801793c <fs_open>
      if (err == ERR_OK) {
 8017df6:	b338      	cbz	r0, 8017e48 <http_find_file+0x1a8>
    for (loop = 0; loop < NUM_DEFAULT_FILENAMES; loop++) {
 8017df8:	f10b 0b01 	add.w	fp, fp, #1
 8017dfc:	f1bb 0f05 	cmp.w	fp, #5
 8017e00:	d1ef      	bne.n	8017de2 <http_find_file+0x142>
    params = (char *)strchr(uri, '?');
 8017e02:	ee18 8a10 	vmov	r8, s16
 8017e06:	9c05      	ldr	r4, [sp, #20]
  u8_t tag_check = 0;
 8017e08:	f04f 0900 	mov.w	r9, #0
 8017e0c:	e762      	b.n	8017cd4 <http_find_file+0x34>
        file_name = httpd_default_filenames[loop].name;
 8017e0e:	4b1a      	ldr	r3, [pc, #104]	; (8017e78 <http_find_file+0x1d8>)
 8017e10:	f853 803b 	ldr.w	r8, [r3, fp, lsl #3]
 8017e14:	e7eb      	b.n	8017dee <http_find_file+0x14e>
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017e16:	4b18      	ldr	r3, [pc, #96]	; (8017e78 <http_find_file+0x1d8>)
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017e18:	9c02      	ldr	r4, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017e1a:	f853 103b 	ldr.w	r1, [r3, fp, lsl #3]
 8017e1e:	9204      	str	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017e20:	444c      	add	r4, r9
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017e22:	4608      	mov	r0, r1
 8017e24:	9103      	str	r1, [sp, #12]
        file_name = http_uri_buf;
 8017e26:	f8cd a008 	str.w	sl, [sp, #8]
          size_t name_len = strlen(httpd_default_filenames[loop].name);
 8017e2a:	f7e8 fa13 	bl	8000254 <strlen>
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017e2e:	9a04      	ldr	r2, [sp, #16]
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017e30:	9903      	ldr	r1, [sp, #12]
          size_t name_copy_len = LWIP_MIN(len_left, name_len);
 8017e32:	4282      	cmp	r2, r0
 8017e34:	bf28      	it	cs
 8017e36:	4602      	movcs	r2, r0
          MEMCPY(&http_uri_buf[copy_len], httpd_default_filenames[loop].name, name_copy_len);
 8017e38:	4620      	mov	r0, r4
 8017e3a:	9203      	str	r2, [sp, #12]
 8017e3c:	f00c f844 	bl	8023ec8 <memcpy>
          http_uri_buf[copy_len + name_copy_len] = 0;
 8017e40:	2300      	movs	r3, #0
 8017e42:	9a03      	ldr	r2, [sp, #12]
 8017e44:	54a3      	strb	r3, [r4, r2]
 8017e46:	e7d2      	b.n	8017dee <http_find_file+0x14e>
        tag_check = httpd_default_filenames[loop].shtml;
 8017e48:	4a0b      	ldr	r2, [pc, #44]	; (8017e78 <http_find_file+0x1d8>)
        uri = file_name;
 8017e4a:	4644      	mov	r4, r8
 8017e4c:	ee18 8a10 	vmov	r8, s16
        tag_check = httpd_default_filenames[loop].shtml;
 8017e50:	eb02 03cb 	add.w	r3, r2, fp, lsl #3
        uri = file_name;
 8017e54:	9405      	str	r4, [sp, #20]
        tag_check = httpd_default_filenames[loop].shtml;
 8017e56:	f893 9004 	ldrb.w	r9, [r3, #4]
  if (file == NULL) {
 8017e5a:	2d00      	cmp	r5, #0
 8017e5c:	f43f af3a 	beq.w	8017cd4 <http_find_file+0x34>
  char *params = NULL;
 8017e60:	4606      	mov	r6, r0
 8017e62:	e74f      	b.n	8017d04 <http_find_file+0x64>
      err = fs_open(&hs->file_handle, file_name);
 8017e64:	462f      	mov	r7, r5
 8017e66:	461c      	mov	r4, r3
  u8_t tag_check = 0;
 8017e68:	4681      	mov	r9, r0
 8017e6a:	e733      	b.n	8017cd4 <http_find_file+0x34>
 8017e6c:	080428cc 	.word	0x080428cc
 8017e70:	08042b18 	.word	0x08042b18
 8017e74:	2001e914 	.word	0x2001e914
 8017e78:	08042b28 	.word	0x08042b28
 8017e7c:	08042b08 	.word	0x08042b08

08017e80 <http_post_rxpbuf>:
{
 8017e80:	b538      	push	{r3, r4, r5, lr}
 8017e82:	4604      	mov	r4, r0
  if (p != NULL) {
 8017e84:	b1c9      	cbz	r1, 8017eba <http_post_rxpbuf+0x3a>
    if (hs->post_content_len_left < p->tot_len) {
 8017e86:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8017e88:	890a      	ldrh	r2, [r1, #8]
 8017e8a:	4293      	cmp	r3, r2
 8017e8c:	d31a      	bcc.n	8017ec4 <http_post_rxpbuf+0x44>
      hs->post_content_len_left -= p->tot_len;
 8017e8e:	1a9b      	subs	r3, r3, r2
    err = httpd_post_receive_data(hs, p);
 8017e90:	4620      	mov	r0, r4
 8017e92:	6323      	str	r3, [r4, #48]	; 0x30
 8017e94:	f7ef fc72 	bl	800777c <httpd_post_receive_data>
  if (err != ERR_OK) {
 8017e98:	b178      	cbz	r0, 8017eba <http_post_rxpbuf+0x3a>
    hs->post_content_len_left = 0;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	6323      	str	r3, [r4, #48]	; 0x30
  http_uri_buf[0] = 0;
 8017e9e:	490a      	ldr	r1, [pc, #40]	; (8017ec8 <http_post_rxpbuf+0x48>)
 8017ea0:	2500      	movs	r5, #0
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017ea2:	4620      	mov	r0, r4
 8017ea4:	223f      	movs	r2, #63	; 0x3f
  http_uri_buf[0] = 0;
 8017ea6:	700d      	strb	r5, [r1, #0]
  httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017ea8:	f7ef fc78 	bl	800779c <httpd_post_finished>
  return http_find_file(hs, http_uri_buf, 0);
 8017eac:	462a      	mov	r2, r5
 8017eae:	4620      	mov	r0, r4
 8017eb0:	4905      	ldr	r1, [pc, #20]	; (8017ec8 <http_post_rxpbuf+0x48>)
}
 8017eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_find_file(hs, http_uri_buf, 0);
 8017eb6:	f7ff bef3 	b.w	8017ca0 <http_find_file>
  if (hs->post_content_len_left == 0) {
 8017eba:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	d0ee      	beq.n	8017e9e <http_post_rxpbuf+0x1e>
}
 8017ec0:	2000      	movs	r0, #0
 8017ec2:	bd38      	pop	{r3, r4, r5, pc}
      hs->post_content_len_left = 0;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	e7e3      	b.n	8017e90 <http_post_rxpbuf+0x10>
 8017ec8:	2001e914 	.word	0x2001e914

08017ecc <http_find_error_file>:
  if (error_nr == 501) {
 8017ecc:	f240 13f5 	movw	r3, #501	; 0x1f5
    uri3 = "/400.shtml";
 8017ed0:	4a17      	ldr	r2, [pc, #92]	; (8017f30 <http_find_error_file+0x64>)
 8017ed2:	4299      	cmp	r1, r3
 8017ed4:	4b17      	ldr	r3, [pc, #92]	; (8017f34 <http_find_error_file+0x68>)
 8017ed6:	4918      	ldr	r1, [pc, #96]	; (8017f38 <http_find_error_file+0x6c>)
{
 8017ed8:	b570      	push	{r4, r5, r6, lr}
    uri3 = "/400.shtml";
 8017eda:	4e18      	ldr	r6, [pc, #96]	; (8017f3c <http_find_error_file+0x70>)
 8017edc:	bf18      	it	ne
 8017ede:	461e      	movne	r6, r3
 8017ee0:	4b17      	ldr	r3, [pc, #92]	; (8017f40 <http_find_error_file+0x74>)
 8017ee2:	bf18      	it	ne
 8017ee4:	460b      	movne	r3, r1
{
 8017ee6:	b084      	sub	sp, #16
 8017ee8:	4604      	mov	r4, r0
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017eea:	4619      	mov	r1, r3
    uri3 = "/400.shtml";
 8017eec:	4d15      	ldr	r5, [pc, #84]	; (8017f44 <http_find_error_file+0x78>)
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017eee:	9303      	str	r3, [sp, #12]
    uri3 = "/400.shtml";
 8017ef0:	bf08      	it	eq
 8017ef2:	4615      	moveq	r5, r2
  if (fs_open(&hs->file_handle, uri1) == ERR_OK) {
 8017ef4:	f7ff fd22 	bl	801793c <fs_open>
 8017ef8:	9b03      	ldr	r3, [sp, #12]
 8017efa:	b128      	cbz	r0, 8017f08 <http_find_error_file+0x3c>
  } else if (fs_open(&hs->file_handle, uri2) == ERR_OK) {
 8017efc:	4629      	mov	r1, r5
 8017efe:	4620      	mov	r0, r4
 8017f00:	f7ff fd1c 	bl	801793c <fs_open>
 8017f04:	b948      	cbnz	r0, 8017f1a <http_find_error_file+0x4e>
    uri = uri2;
 8017f06:	462b      	mov	r3, r5
  return http_init_file(hs, &hs->file_handle, 0, uri, 0, NULL);
 8017f08:	2200      	movs	r2, #0
 8017f0a:	4621      	mov	r1, r4
 8017f0c:	4620      	mov	r0, r4
 8017f0e:	e9cd 2200 	strd	r2, r2, [sp]
 8017f12:	f7ff fdd7 	bl	8017ac4 <http_init_file>
}
 8017f16:	b004      	add	sp, #16
 8017f18:	bd70      	pop	{r4, r5, r6, pc}
  } else if (fs_open(&hs->file_handle, uri3) == ERR_OK) {
 8017f1a:	4631      	mov	r1, r6
 8017f1c:	4620      	mov	r0, r4
 8017f1e:	f7ff fd0d 	bl	801793c <fs_open>
 8017f22:	b908      	cbnz	r0, 8017f28 <http_find_error_file+0x5c>
    uri = uri3;
 8017f24:	4633      	mov	r3, r6
 8017f26:	e7ef      	b.n	8017f08 <http_find_error_file+0x3c>
    return ERR_ARG;
 8017f28:	f06f 000f 	mvn.w	r0, #15
 8017f2c:	e7f3      	b.n	8017f16 <http_find_error_file+0x4a>
 8017f2e:	bf00      	nop
 8017f30:	080428b0 	.word	0x080428b0
 8017f34:	080428c8 	.word	0x080428c8
 8017f38:	080428e0 	.word	0x080428e0
 8017f3c:	080428a4 	.word	0x080428a4
 8017f40:	080428bc 	.word	0x080428bc
 8017f44:	080428d4 	.word	0x080428d4

08017f48 <http_close_or_abort_conn.constprop.0>:
http_close_or_abort_conn(struct altcp_pcb *pcb, struct http_state *hs, u8_t abort_conn)
 8017f48:	b538      	push	{r3, r4, r5, lr}
 8017f4a:	4605      	mov	r5, r0
  if (hs != NULL) {
 8017f4c:	460c      	mov	r4, r1
 8017f4e:	2900      	cmp	r1, #0
 8017f50:	d041      	beq.n	8017fd6 <http_close_or_abort_conn.constprop.0+0x8e>
    if ((hs->post_content_len_left != 0)
 8017f52:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8017f54:	bb83      	cbnz	r3, 8017fb8 <http_close_or_abort_conn.constprop.0+0x70>
  altcp_arg(pcb, NULL);
 8017f56:	2100      	movs	r1, #0
 8017f58:	4628      	mov	r0, r5
 8017f5a:	f003 fc79 	bl	801b850 <tcp_arg>
  altcp_recv(pcb, NULL);
 8017f5e:	2100      	movs	r1, #0
 8017f60:	4628      	mov	r0, r5
 8017f62:	f003 fc79 	bl	801b858 <tcp_recv>
  altcp_err(pcb, NULL);
 8017f66:	2100      	movs	r1, #0
 8017f68:	4628      	mov	r0, r5
 8017f6a:	f003 fcad 	bl	801b8c8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8017f6e:	2200      	movs	r2, #0
 8017f70:	4628      	mov	r0, r5
 8017f72:	4611      	mov	r1, r2
 8017f74:	f003 fcca 	bl	801b90c <tcp_poll>
  altcp_sent(pcb, NULL);
 8017f78:	4628      	mov	r0, r5
 8017f7a:	2100      	movs	r1, #0
 8017f7c:	f003 fc88 	bl	801b890 <tcp_sent>
  if (hs->handle) {
 8017f80:	6960      	ldr	r0, [r4, #20]
 8017f82:	b118      	cbz	r0, 8017f8c <http_close_or_abort_conn.constprop.0+0x44>
    fs_close(hs->handle);
 8017f84:	f7ff fd00 	bl	8017988 <fs_close>
    hs->handle = NULL;
 8017f88:	2300      	movs	r3, #0
 8017f8a:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8017f8c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8017f8e:	b118      	cbz	r0, 8017f98 <http_close_or_abort_conn.constprop.0+0x50>
    HTTP_FREE_SSI_STATE(ssi);
 8017f90:	f001 fdf2 	bl	8019b78 <mem_free>
    hs->ssi = NULL;
 8017f94:	2300      	movs	r3, #0
 8017f96:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8017f98:	6a20      	ldr	r0, [r4, #32]
 8017f9a:	b118      	cbz	r0, 8017fa4 <http_close_or_abort_conn.constprop.0+0x5c>
    pbuf_free(hs->req);
 8017f9c:	f002 fe98 	bl	801acd0 <pbuf_free>
    hs->req = NULL;
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8017fa4:	4620      	mov	r0, r4
 8017fa6:	f001 fde7 	bl	8019b78 <mem_free>
  err = altcp_close(pcb);
 8017faa:	4628      	mov	r0, r5
 8017fac:	f004 fb0c 	bl	801c5c8 <tcp_close>
  if (err != ERR_OK) {
 8017fb0:	4604      	mov	r4, r0
 8017fb2:	b948      	cbnz	r0, 8017fc8 <http_close_or_abort_conn.constprop.0+0x80>
}
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	bd38      	pop	{r3, r4, r5, pc}
      http_uri_buf[0] = 0;
 8017fb8:	4911      	ldr	r1, [pc, #68]	; (8018000 <http_close_or_abort_conn.constprop.0+0xb8>)
 8017fba:	2300      	movs	r3, #0
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017fbc:	223f      	movs	r2, #63	; 0x3f
 8017fbe:	4620      	mov	r0, r4
      http_uri_buf[0] = 0;
 8017fc0:	700b      	strb	r3, [r1, #0]
      httpd_post_finished(hs, http_uri_buf, LWIP_HTTPD_URI_BUF_LEN);
 8017fc2:	f7ef fbeb 	bl	800779c <httpd_post_finished>
 8017fc6:	e7c6      	b.n	8017f56 <http_close_or_abort_conn.constprop.0+0xe>
    altcp_poll(pcb, http_poll, HTTPD_POLL_INTERVAL);
 8017fc8:	4628      	mov	r0, r5
 8017fca:	2204      	movs	r2, #4
 8017fcc:	490d      	ldr	r1, [pc, #52]	; (8018004 <http_close_or_abort_conn.constprop.0+0xbc>)
 8017fce:	f003 fc9d 	bl	801b90c <tcp_poll>
}
 8017fd2:	4620      	mov	r0, r4
 8017fd4:	bd38      	pop	{r3, r4, r5, pc}
  altcp_arg(pcb, NULL);
 8017fd6:	f003 fc3b 	bl	801b850 <tcp_arg>
  altcp_recv(pcb, NULL);
 8017fda:	4621      	mov	r1, r4
 8017fdc:	4628      	mov	r0, r5
 8017fde:	f003 fc3b 	bl	801b858 <tcp_recv>
  altcp_err(pcb, NULL);
 8017fe2:	4621      	mov	r1, r4
 8017fe4:	4628      	mov	r0, r5
 8017fe6:	f003 fc6f 	bl	801b8c8 <tcp_err>
  altcp_poll(pcb, NULL, 0);
 8017fea:	4621      	mov	r1, r4
 8017fec:	4628      	mov	r0, r5
 8017fee:	4622      	mov	r2, r4
 8017ff0:	f003 fc8c 	bl	801b90c <tcp_poll>
  altcp_sent(pcb, NULL);
 8017ff4:	4621      	mov	r1, r4
 8017ff6:	4628      	mov	r0, r5
 8017ff8:	f003 fc4a 	bl	801b890 <tcp_sent>
  if (hs != NULL) {
 8017ffc:	e7d5      	b.n	8017faa <http_close_or_abort_conn.constprop.0+0x62>
 8017ffe:	bf00      	nop
 8018000:	2001e914 	.word	0x2001e914
 8018004:	080186c9 	.word	0x080186c9

08018008 <http_err>:
  if (hs != NULL) {
 8018008:	b1c0      	cbz	r0, 801803c <http_err+0x34>
{
 801800a:	b510      	push	{r4, lr}
 801800c:	4604      	mov	r4, r0
  if (hs->handle) {
 801800e:	6940      	ldr	r0, [r0, #20]
 8018010:	b118      	cbz	r0, 801801a <http_err+0x12>
    fs_close(hs->handle);
 8018012:	f7ff fcb9 	bl	8017988 <fs_close>
    hs->handle = NULL;
 8018016:	2300      	movs	r3, #0
 8018018:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 801801a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801801c:	b118      	cbz	r0, 8018026 <http_err+0x1e>
    HTTP_FREE_SSI_STATE(ssi);
 801801e:	f001 fdab 	bl	8019b78 <mem_free>
    hs->ssi = NULL;
 8018022:	2300      	movs	r3, #0
 8018024:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018026:	6a20      	ldr	r0, [r4, #32]
 8018028:	b118      	cbz	r0, 8018032 <http_err+0x2a>
    pbuf_free(hs->req);
 801802a:	f002 fe51 	bl	801acd0 <pbuf_free>
    hs->req = NULL;
 801802e:	2300      	movs	r3, #0
 8018030:	6223      	str	r3, [r4, #32]
    HTTP_FREE_HTTP_STATE(hs);
 8018032:	4620      	mov	r0, r4
}
 8018034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HTTP_FREE_HTTP_STATE(hs);
 8018038:	f001 bd9e 	b.w	8019b78 <mem_free>
 801803c:	4770      	bx	lr
 801803e:	bf00      	nop

08018040 <http_eof>:
{
 8018040:	b538      	push	{r3, r4, r5, lr}
  if (hs->keepalive) {
 8018042:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
 8018046:	b1fb      	cbz	r3, 8018088 <http_eof+0x48>
 8018048:	4605      	mov	r5, r0
  if (hs->handle) {
 801804a:	6948      	ldr	r0, [r1, #20]
 801804c:	460c      	mov	r4, r1
 801804e:	b118      	cbz	r0, 8018058 <http_eof+0x18>
    fs_close(hs->handle);
 8018050:	f7ff fc9a 	bl	8017988 <fs_close>
    hs->handle = NULL;
 8018054:	2300      	movs	r3, #0
 8018056:	6163      	str	r3, [r4, #20]
  if (hs->ssi) {
 8018058:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 801805a:	b118      	cbz	r0, 8018064 <http_eof+0x24>
    HTTP_FREE_SSI_STATE(ssi);
 801805c:	f001 fd8c 	bl	8019b78 <mem_free>
    hs->ssi = NULL;
 8018060:	2300      	movs	r3, #0
 8018062:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (hs->req) {
 8018064:	6a20      	ldr	r0, [r4, #32]
 8018066:	b108      	cbz	r0, 801806c <http_eof+0x2c>
    pbuf_free(hs->req);
 8018068:	f002 fe32 	bl	801acd0 <pbuf_free>
  memset(hs, 0, sizeof(struct http_state));
 801806c:	2234      	movs	r2, #52	; 0x34
 801806e:	2100      	movs	r1, #0
 8018070:	4620      	mov	r0, r4
 8018072:	f00b ff51 	bl	8023f18 <memset>
    hs->keepalive = 1;
 8018076:	2301      	movs	r3, #1
    hs->pcb = pcb;
 8018078:	61e5      	str	r5, [r4, #28]
    hs->keepalive = 1;
 801807a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    altcp_nagle_disable(pcb);
 801807e:	8b6b      	ldrh	r3, [r5, #26]
 8018080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018084:	836b      	strh	r3, [r5, #26]
}
 8018086:	bd38      	pop	{r3, r4, r5, pc}
 8018088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return http_close_or_abort_conn(pcb, hs, 0);
 801808c:	f7ff bf5c 	b.w	8017f48 <http_close_or_abort_conn.constprop.0>

08018090 <http_send>:
{
 8018090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (hs == NULL) {
 8018094:	460d      	mov	r5, r1
{
 8018096:	b087      	sub	sp, #28
  if (hs == NULL) {
 8018098:	2900      	cmp	r1, #0
 801809a:	f000 824b 	beq.w	8018534 <http_send+0x4a4>
  if (hs->left == 0) {
 801809e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 80180a0:	4607      	mov	r7, r0
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	f000 818c 	beq.w	80183c0 <http_send+0x330>
  if (hs->ssi) {
 80180a8:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80180aa:	2c00      	cmp	r4, #0
 80180ac:	f000 819a 	beq.w	80183e4 <http_send+0x354>
  if (ssi->parsed > hs->file) {
 80180b0:	6823      	ldr	r3, [r4, #0]
 80180b2:	69a9      	ldr	r1, [r5, #24]
  len = altcp_sndbuf(pcb);
 80180b4:	f8b7 2064 	ldrh.w	r2, [r7, #100]	; 0x64
  if (ssi->parsed > hs->file) {
 80180b8:	428b      	cmp	r3, r1
  len = altcp_sndbuf(pcb);
 80180ba:	f8ad 2016 	strh.w	r2, [sp, #22]
  if (ssi->parsed > hs->file) {
 80180be:	f200 80c3 	bhi.w	8018248 <http_send+0x1b8>
  u8_t data_to_send = 0;
 80180c2:	f04f 0800 	mov.w	r8, #0
  err_t err = ERR_OK;
 80180c6:	4646      	mov	r6, r8
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80180c8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
              ssi->tag_index = 0;
 80180cc:	f04f 0b00 	mov.w	fp, #0
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80180d0:	2b04      	cmp	r3, #4
 80180d2:	d003      	beq.n	80180dc <http_send+0x4c>
 80180d4:	68e1      	ldr	r1, [r4, #12]
 80180d6:	2900      	cmp	r1, #0
 80180d8:	f000 8091 	beq.w	80181fe <http_send+0x16e>
 80180dc:	2e00      	cmp	r6, #0
 80180de:	f040 811b 	bne.w	8018318 <http_send+0x288>
    if (len == 0) {
 80180e2:	2a00      	cmp	r2, #0
 80180e4:	f000 811b 	beq.w	801831e <http_send+0x28e>
    switch (ssi->tag_state) {
 80180e8:	2b04      	cmp	r3, #4
 80180ea:	d8f1      	bhi.n	80180d0 <http_send+0x40>
 80180ec:	e8df f003 	tbb	[pc, r3]
 80180f0:	23407466 	.word	0x23407466
 80180f4:	03          	.byte	0x03
 80180f5:	00          	.byte	0x00
        if (ssi->tag_end > hs->file) {
 80180f6:	68a3      	ldr	r3, [r4, #8]
 80180f8:	69a9      	ldr	r1, [r5, #24]
 80180fa:	428b      	cmp	r3, r1
 80180fc:	f240 80f1 	bls.w	80182e2 <http_send+0x252>
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018100:	6863      	ldr	r3, [r4, #4]
 8018102:	4299      	cmp	r1, r3
 8018104:	f200 81fc 	bhi.w	8018500 <http_send+0x470>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018108:	1a5a      	subs	r2, r3, r1
 801810a:	f64f 70fe 	movw	r0, #65534	; 0xfffe
 801810e:	4282      	cmp	r2, r0
 8018110:	f340 8117 	ble.w	8018342 <http_send+0x2b2>
 8018114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8018118:	f8ad 3016 	strh.w	r3, [sp, #22]
            err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801811c:	2300      	movs	r3, #0
 801811e:	f10d 0216 	add.w	r2, sp, #22
 8018122:	4638      	mov	r0, r7
 8018124:	f7ff fc36 	bl	8017994 <http_write>
          if (err == ERR_OK) {
 8018128:	2800      	cmp	r0, #0
 801812a:	f000 81fe 	beq.w	801852a <http_send+0x49a>
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801812e:	4606      	mov	r6, r0
    if (len == 0) {
 8018130:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018134:	e11a      	b.n	801836c <http_send+0x2dc>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8018136:	6821      	ldr	r1, [r4, #0]
 8018138:	8a20      	ldrh	r0, [r4, #16]
 801813a:	f891 e000 	ldrb.w	lr, [r1]
 801813e:	2800      	cmp	r0, #0
 8018140:	f040 80b9 	bne.w	80182b6 <http_send+0x226>
 8018144:	f1ae 0c09 	sub.w	ip, lr, #9
 8018148:	fa5f fc8c 	uxtb.w	ip, ip
 801814c:	f1bc 0f17 	cmp.w	ip, #23
 8018150:	f200 80b1 	bhi.w	80182b6 <http_send+0x226>
 8018154:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 80184fc <http_send+0x46c>
 8018158:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 801815c:	f01c 0f01 	tst.w	ip, #1
 8018160:	f000 80a9 	beq.w	80182b6 <http_send+0x226>
          ssi->parsed++;
 8018164:	3101      	adds	r1, #1
 8018166:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 8018168:	68e1      	ldr	r1, [r4, #12]
 801816a:	3901      	subs	r1, #1
 801816c:	60e1      	str	r1, [r4, #12]
          break;
 801816e:	e7af      	b.n	80180d0 <http_send+0x40>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 8018170:	8a20      	ldrh	r0, [r4, #16]
 8018172:	2800      	cmp	r0, #0
 8018174:	f040 8083 	bne.w	801827e <http_send+0x1ee>
 8018178:	6821      	ldr	r1, [r4, #0]
 801817a:	f891 e000 	ldrb.w	lr, [r1]
 801817e:	f1ae 0c09 	sub.w	ip, lr, #9
 8018182:	fa5f fc8c 	uxtb.w	ip, ip
 8018186:	f1bc 0f17 	cmp.w	ip, #23
 801818a:	f240 8110 	bls.w	80183ae <http_send+0x31e>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801818e:	f8df c350 	ldr.w	ip, [pc, #848]	; 80184e0 <http_send+0x450>
 8018192:	f894 9014 	ldrb.w	r9, [r4, #20]
 8018196:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 801819a:	f8dc c004 	ldr.w	ip, [ip, #4]
 801819e:	f89c c000 	ldrb.w	ip, [ip]
 80181a2:	45f4      	cmp	ip, lr
 80181a4:	f000 8083 	beq.w	80182ae <http_send+0x21e>
            ssi->tag_name[ssi->tag_index++] = *ssi->parsed;
 80181a8:	f100 0c01 	add.w	ip, r0, #1
 80181ac:	4420      	add	r0, r4
 80181ae:	f8a4 c010 	strh.w	ip, [r4, #16]
 80181b2:	f891 c000 	ldrb.w	ip, [r1]
 80181b6:	f880 c016 	strb.w	ip, [r0, #22]
 80181ba:	e7d3      	b.n	8018164 <http_send+0xd4>
          if (*ssi->parsed == http_ssi_tag_desc[tag_type].lead_in[0]) {
 80181bc:	6821      	ldr	r1, [r4, #0]
 80181be:	7808      	ldrb	r0, [r1, #0]
 80181c0:	283c      	cmp	r0, #60	; 0x3c
 80181c2:	d002      	beq.n	80181ca <http_send+0x13a>
 80181c4:	282f      	cmp	r0, #47	; 0x2f
 80181c6:	d1cd      	bne.n	8018164 <http_send+0xd4>
        for (tag_type = 0; tag_type < LWIP_ARRAYSIZE(http_ssi_tag_desc); tag_type++) {
 80181c8:	2301      	movs	r3, #1
            ssi->tag_type = tag_type;
 80181ca:	7523      	strb	r3, [r4, #20]
            ssi->tag_state = TAG_LEADIN;
 80181cc:	2301      	movs	r3, #1
            ssi->tag_started = ssi->parsed;
 80181ce:	6061      	str	r1, [r4, #4]
            ssi->tag_state = TAG_LEADIN;
 80181d0:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            ssi->tag_index = 1;
 80181d4:	8223      	strh	r3, [r4, #16]
            break;
 80181d6:	e7c5      	b.n	8018164 <http_send+0xd4>
        if (http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index] == 0) {
 80181d8:	49c1      	ldr	r1, [pc, #772]	; (80184e0 <http_send+0x450>)
 80181da:	7d20      	ldrb	r0, [r4, #20]
 80181dc:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 80181e0:	f851 1030 	ldr.w	r1, [r1, r0, lsl #3]
 80181e4:	f811 100c 	ldrb.w	r1, [r1, ip]
 80181e8:	2900      	cmp	r1, #0
 80181ea:	f040 8086 	bne.w	80182fa <http_send+0x26a>
          ssi->tag_state = TAG_FOUND;
 80181ee:	2302      	movs	r3, #2
          ssi->tag_index = 0;
 80181f0:	8221      	strh	r1, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80181f2:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_state = TAG_FOUND;
 80181f4:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80181f8:	2900      	cmp	r1, #0
 80181fa:	f47f af6f 	bne.w	80180dc <http_send+0x4c>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 80181fe:	6823      	ldr	r3, [r4, #0]
 8018200:	69a9      	ldr	r1, [r5, #24]
 8018202:	428b      	cmp	r3, r1
 8018204:	f240 808b 	bls.w	801831e <http_send+0x28e>
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018208:	1a5b      	subs	r3, r3, r1
 801820a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801820e:	4638      	mov	r0, r7
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018210:	4293      	cmp	r3, r2
 8018212:	bfa8      	it	ge
 8018214:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018216:	f10d 0216 	add.w	r2, sp, #22
      len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801821a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801821e:	2300      	movs	r3, #0
 8018220:	f7ff fbb8 	bl	8017994 <http_write>
    if (err == ERR_OK) {
 8018224:	2800      	cmp	r0, #0
 8018226:	d17a      	bne.n	801831e <http_send+0x28e>
    hs->file += len;
 8018228:	f8bd 1016 	ldrh.w	r1, [sp, #22]
    data_to_send = 1;
 801822c:	f04f 0801 	mov.w	r8, #1
    hs->file += len;
 8018230:	69aa      	ldr	r2, [r5, #24]
    hs->left -= len;
 8018232:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    hs->file += len;
 8018234:	440a      	add	r2, r1
    hs->left -= len;
 8018236:	1a5b      	subs	r3, r3, r1
    hs->file += len;
 8018238:	61aa      	str	r2, [r5, #24]
    hs->left -= len;
 801823a:	626b      	str	r3, [r5, #36]	; 0x24
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801823c:	2b00      	cmp	r3, #0
 801823e:	d071      	beq.n	8018324 <http_send+0x294>
}
 8018240:	4640      	mov	r0, r8
 8018242:	b007      	add	sp, #28
 8018244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018248:	1a5b      	subs	r3, r3, r1
 801824a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801824e:	4638      	mov	r0, r7
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 8018250:	4293      	cmp	r3, r2
 8018252:	bfa8      	it	ge
 8018254:	4613      	movge	r3, r2
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018256:	f10d 0216 	add.w	r2, sp, #22
    len = (u16_t)LWIP_MIN(ssi->parsed - hs->file, 0xffff);
 801825a:	f8ad 3016 	strh.w	r3, [sp, #22]
    err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801825e:	2300      	movs	r3, #0
 8018260:	f7ff fb98 	bl	8017994 <http_write>
    if (err == ERR_OK) {
 8018264:	4606      	mov	r6, r0
 8018266:	2800      	cmp	r0, #0
 8018268:	f000 8154 	beq.w	8018514 <http_send+0x484>
  u8_t data_to_send = 0;
 801826c:	f04f 0800 	mov.w	r8, #0
    if (altcp_sndbuf(pcb) == 0) {
 8018270:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018274:	2b00      	cmp	r3, #0
 8018276:	d052      	beq.n	801831e <http_send+0x28e>
    if (len == 0) {
 8018278:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801827c:	e724      	b.n	80180c8 <http_send+0x38>
        if ((*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) ||
 801827e:	f8df 9260 	ldr.w	r9, [pc, #608]	; 80184e0 <http_send+0x450>
 8018282:	7d21      	ldrb	r1, [r4, #20]
 8018284:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
 8018288:	f8d1 e004 	ldr.w	lr, [r1, #4]
 801828c:	6821      	ldr	r1, [r4, #0]
 801828e:	f89e a000 	ldrb.w	sl, [lr]
 8018292:	f891 c000 	ldrb.w	ip, [r1]
 8018296:	45e2      	cmp	sl, ip
 8018298:	d072      	beq.n	8018380 <http_send+0x2f0>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 801829a:	f1ac 0c09 	sub.w	ip, ip, #9
 801829e:	fa5f fc8c 	uxtb.w	ip, ip
 80182a2:	f1bc 0f17 	cmp.w	ip, #23
 80182a6:	d964      	bls.n	8018372 <http_send+0x2e2>
          if (ssi->tag_index < LWIP_HTTPD_MAX_TAG_NAME_LEN) {
 80182a8:	2807      	cmp	r0, #7
 80182aa:	f67f af7d 	bls.w	80181a8 <http_send+0x118>
            ssi->tag_state = TAG_NONE;
 80182ae:	2300      	movs	r3, #0
 80182b0:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
 80182b4:	e756      	b.n	8018164 <http_send+0xd4>
        if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index]) {
 80182b6:	f894 9014 	ldrb.w	r9, [r4, #20]
 80182ba:	f8df c224 	ldr.w	ip, [pc, #548]	; 80184e0 <http_send+0x450>
 80182be:	eb0c 0cc9 	add.w	ip, ip, r9, lsl #3
 80182c2:	f8dc c004 	ldr.w	ip, [ip, #4]
 80182c6:	f81c 9000 	ldrb.w	r9, [ip, r0]
 80182ca:	45f1      	cmp	r9, lr
 80182cc:	f000 80a1 	beq.w	8018412 <http_send+0x382>
          ssi->parse_left--;
 80182d0:	68e3      	ldr	r3, [r4, #12]
          ssi->parsed++;
 80182d2:	3101      	adds	r1, #1
          ssi->tag_state = TAG_NONE;
 80182d4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 80182d8:	3b01      	subs	r3, #1
          ssi->parsed++;
 80182da:	6021      	str	r1, [r4, #0]
          ssi->parse_left--;
 80182dc:	60e3      	str	r3, [r4, #12]
          ssi->tag_state = TAG_NONE;
 80182de:	2300      	movs	r3, #0
 80182e0:	e6f8      	b.n	80180d4 <http_send+0x44>
          if (ssi->tag_index < ssi->tag_insert_len) {
 80182e2:	8a21      	ldrh	r1, [r4, #16]
 80182e4:	8a60      	ldrh	r0, [r4, #18]
 80182e6:	4281      	cmp	r1, r0
 80182e8:	f0c0 80e0 	bcc.w	80184ac <http_send+0x41c>
              ssi->parsed = ssi->tag_end;
 80182ec:	6023      	str	r3, [r4, #0]
 80182ee:	2300      	movs	r3, #0
              ssi->tag_index = 0;
 80182f0:	f8a4 b010 	strh.w	fp, [r4, #16]
              ssi->tag_state = TAG_NONE;
 80182f4:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
              ssi->parsed = ssi->tag_end;
 80182f8:	e6ec      	b.n	80180d4 <http_send+0x44>
          if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_in[ssi->tag_index]) {
 80182fa:	6820      	ldr	r0, [r4, #0]
 80182fc:	f890 e000 	ldrb.w	lr, [r0]
 8018300:	458e      	cmp	lr, r1
 8018302:	f000 80ce 	beq.w	80184a2 <http_send+0x412>
            ssi->tag_state = TAG_NONE;
 8018306:	2300      	movs	r3, #0
 8018308:	f884 b11e 	strb.w	fp, [r4, #286]	; 0x11e
          ssi->parse_left--;
 801830c:	68e1      	ldr	r1, [r4, #12]
          ssi->parsed++;
 801830e:	3001      	adds	r0, #1
          ssi->parse_left--;
 8018310:	3901      	subs	r1, #1
          ssi->parsed++;
 8018312:	6020      	str	r0, [r4, #0]
          ssi->parse_left--;
 8018314:	60e1      	str	r1, [r4, #12]
          ssi->parsed++;
 8018316:	e6db      	b.n	80180d0 <http_send+0x40>
  if ((ssi->tag_state != TAG_SENDING) && (ssi->parsed > hs->file)) {
 8018318:	2b04      	cmp	r3, #4
 801831a:	f47f af70 	bne.w	80181fe <http_send+0x16e>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801831e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018320:	2b00      	cmp	r3, #0
 8018322:	d18d      	bne.n	8018240 <http_send+0x1b0>
 8018324:	6968      	ldr	r0, [r5, #20]
 8018326:	f7ff fb31 	bl	801798c <fs_bytes_left>
 801832a:	2800      	cmp	r0, #0
 801832c:	dc88      	bgt.n	8018240 <http_send+0x1b0>
      return 0;
 801832e:	f04f 0800 	mov.w	r8, #0
    http_eof(pcb, hs);
 8018332:	4638      	mov	r0, r7
 8018334:	4629      	mov	r1, r5
 8018336:	f7ff fe83 	bl	8018040 <http_eof>
}
 801833a:	4640      	mov	r0, r8
 801833c:	b007      	add	sp, #28
 801833e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018342:	b292      	uxth	r2, r2
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018344:	f8ad 2016 	strh.w	r2, [sp, #22]
          if (len != 0) {
 8018348:	2a00      	cmp	r2, #0
 801834a:	f47f aee7 	bne.w	801811c <http_send+0x8c>
            if (ssi->tag_started <= hs->file) {
 801834e:	428b      	cmp	r3, r1
 8018350:	d805      	bhi.n	801835e <http_send+0x2ce>
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018352:	68a0      	ldr	r0, [r4, #8]
 8018354:	1ac3      	subs	r3, r0, r3
 8018356:	441a      	add	r2, r3
 8018358:	b292      	uxth	r2, r2
 801835a:	f8ad 2016 	strh.w	r2, [sp, #22]
            hs->file += len;
 801835e:	4411      	add	r1, r2
 8018360:	61a9      	str	r1, [r5, #24]
            hs->left -= len;
 8018362:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            data_to_send = 1;
 8018364:	f04f 0801 	mov.w	r8, #1
            hs->left -= len;
 8018368:	1a9b      	subs	r3, r3, r2
 801836a:	626b      	str	r3, [r5, #36]	; 0x24
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 801836c:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 8018370:	e6ae      	b.n	80180d0 <http_send+0x40>
            (*ssi->parsed == ' ')  || (*ssi->parsed == '\t') ||
 8018372:	f8df a188 	ldr.w	sl, [pc, #392]	; 80184fc <http_send+0x46c>
 8018376:	fa2a fc0c 	lsr.w	ip, sl, ip
            (*ssi->parsed == '\n') || (*ssi->parsed == '\r')) {
 801837a:	f01c 0f01 	tst.w	ip, #1
 801837e:	d093      	beq.n	80182a8 <http_send+0x218>
            ssi->tag_state = TAG_LEADOUT;
 8018380:	2303      	movs	r3, #3
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018382:	28ff      	cmp	r0, #255	; 0xff
            ssi->tag_state = TAG_LEADOUT;
 8018384:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 8018388:	f200 80e0 	bhi.w	801854c <http_send+0x4bc>
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801838c:	7560      	strb	r0, [r4, #21]
            ssi->tag_name[ssi->tag_index] = '\0';
 801838e:	4420      	add	r0, r4
 8018390:	f880 b016 	strb.w	fp, [r0, #22]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 8018394:	f89e 3000 	ldrb.w	r3, [lr]
 8018398:	780a      	ldrb	r2, [r1, #0]
 801839a:	429a      	cmp	r2, r3
 801839c:	f000 80cf 	beq.w	801853e <http_send+0x4ae>
              ssi->tag_index = 0;
 80183a0:	f8a4 b010 	strh.w	fp, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80183a4:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 80183a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 80183ac:	e6da      	b.n	8018164 <http_send+0xd4>
        if ((ssi->tag_index == 0) && ((*ssi->parsed == ' ') ||
 80183ae:	f8df 914c 	ldr.w	r9, [pc, #332]	; 80184fc <http_send+0x46c>
 80183b2:	fa29 fc0c 	lsr.w	ip, r9, ip
                                      (*ssi->parsed == '\t') || (*ssi->parsed == '\n') ||
 80183b6:	f01c 0f01 	tst.w	ip, #1
 80183ba:	f47f aed3 	bne.w	8018164 <http_send+0xd4>
 80183be:	e6e6      	b.n	801818e <http_send+0xfe>
  if (hs->handle == NULL) {
 80183c0:	6948      	ldr	r0, [r1, #20]
 80183c2:	2800      	cmp	r0, #0
 80183c4:	d0b3      	beq.n	801832e <http_send+0x29e>
  bytes_left = fs_bytes_left(hs->handle);
 80183c6:	f7ff fae1 	bl	801798c <fs_bytes_left>
  if (bytes_left <= 0) {
 80183ca:	2800      	cmp	r0, #0
 80183cc:	ddaf      	ble.n	801832e <http_send+0x29e>
  LWIP_ASSERT("SSI and DYNAMIC_HEADERS turned off but eof not reached", 0);
 80183ce:	4b45      	ldr	r3, [pc, #276]	; (80184e4 <http_send+0x454>)
 80183d0:	f240 429d 	movw	r2, #1181	; 0x49d
 80183d4:	4944      	ldr	r1, [pc, #272]	; (80184e8 <http_send+0x458>)
 80183d6:	4845      	ldr	r0, [pc, #276]	; (80184ec <http_send+0x45c>)
 80183d8:	f00c fd3c 	bl	8024e54 <iprintf>
  if (hs->ssi) {
 80183dc:	6aec      	ldr	r4, [r5, #44]	; 0x2c
 80183de:	2c00      	cmp	r4, #0
 80183e0:	f47f ae66 	bne.w	80180b0 <http_send+0x20>
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80183e4:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 80183e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80183ec:	6a6a      	ldr	r2, [r5, #36]	; 0x24
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183ee:	4638      	mov	r0, r7
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80183f0:	428a      	cmp	r2, r1
 80183f2:	bf88      	it	hi
 80183f4:	461a      	movhi	r2, r3
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183f6:	4623      	mov	r3, r4
 80183f8:	69a9      	ldr	r1, [r5, #24]
  len = (u16_t)LWIP_MIN(hs->left, 0xffff);
 80183fa:	f8ad 2016 	strh.w	r2, [sp, #22]
  err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 80183fe:	f10d 0216 	add.w	r2, sp, #22
 8018402:	f7ff fac7 	bl	8017994 <http_write>
  if (err == ERR_OK) {
 8018406:	2800      	cmp	r0, #0
 8018408:	f43f af0e 	beq.w	8018228 <http_send+0x198>
  if ((hs->left == 0) && (fs_bytes_left(hs->handle) <= 0)) {
 801840c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  u8_t data_to_send = 0;
 801840e:	46a0      	mov	r8, r4
 8018410:	e714      	b.n	801823c <http_send+0x1ac>
          ssi->parsed++;
 8018412:	3101      	adds	r1, #1
          ssi->tag_index++;
 8018414:	3001      	adds	r0, #1
          ssi->parsed++;
 8018416:	6021      	str	r1, [r4, #0]
          ssi->tag_index++;
 8018418:	b280      	uxth	r0, r0
          ssi->parse_left--;
 801841a:	68e1      	ldr	r1, [r4, #12]
          ssi->tag_index++;
 801841c:	8220      	strh	r0, [r4, #16]
          ssi->parse_left--;
 801841e:	3901      	subs	r1, #1
 8018420:	60e1      	str	r1, [r4, #12]
          if (http_ssi_tag_desc[ssi->tag_type].lead_out[ssi->tag_index] == 0) {
 8018422:	f81c 1000 	ldrb.w	r1, [ip, r0]
 8018426:	2900      	cmp	r1, #0
 8018428:	f47f ae52 	bne.w	80180d0 <http_send+0x40>
  ssi = hs->ssi;
 801842c:	f8d5 902c 	ldr.w	r9, [r5, #44]	; 0x2c
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018430:	f1b9 0f00 	cmp.w	r9, #0
 8018434:	f000 8115 	beq.w	8018662 <http_send+0x5d2>
  if (httpd_ssi_handler
 8018438:	4b2d      	ldr	r3, [pc, #180]	; (80184f0 <http_send+0x460>)
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	9300      	str	r3, [sp, #0]
 801843e:	2b00      	cmp	r3, #0
 8018440:	f000 8093 	beq.w	801856a <http_send+0x4da>
      && httpd_tags && httpd_num_tags
 8018444:	4b2b      	ldr	r3, [pc, #172]	; (80184f4 <http_send+0x464>)
 8018446:	681a      	ldr	r2, [r3, #0]
 8018448:	2a00      	cmp	r2, #0
 801844a:	f000 808e 	beq.w	801856a <http_send+0x4da>
 801844e:	4b2a      	ldr	r3, [pc, #168]	; (80184f8 <http_send+0x468>)
 8018450:	681b      	ldr	r3, [r3, #0]
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018452:	2b00      	cmp	r3, #0
      && httpd_tags && httpd_num_tags
 8018454:	4619      	mov	r1, r3
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018456:	f340 8088 	ble.w	801856a <http_send+0x4da>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801845a:	f109 0a16 	add.w	sl, r9, #22
 801845e:	3a04      	subs	r2, #4
    for (tag = 0; tag < httpd_num_tags; tag++) {
 8018460:	2300      	movs	r3, #0
 8018462:	9503      	str	r5, [sp, #12]
 8018464:	460d      	mov	r5, r1
 8018466:	e9cd 4601 	strd	r4, r6, [sp, #4]
 801846a:	4656      	mov	r6, sl
 801846c:	461c      	mov	r4, r3
 801846e:	4692      	mov	sl, r2
 8018470:	e003      	b.n	801847a <http_send+0x3ea>
 8018472:	3401      	adds	r4, #1
 8018474:	42a5      	cmp	r5, r4
 8018476:	f000 8105 	beq.w	8018684 <http_send+0x5f4>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801847a:	f85a 1f04 	ldr.w	r1, [sl, #4]!
 801847e:	4630      	mov	r0, r6
 8018480:	f7e7 fede 	bl	8000240 <strcmp>
 8018484:	2800      	cmp	r0, #0
 8018486:	d1f4      	bne.n	8018472 <http_send+0x3e2>
        ssi->tag_insert_len = httpd_ssi_handler(tag, ssi->tag_insert,
 8018488:	4623      	mov	r3, r4
 801848a:	22fe      	movs	r2, #254	; 0xfe
 801848c:	f109 011f 	add.w	r1, r9, #31
 8018490:	9e02      	ldr	r6, [sp, #8]
 8018492:	4618      	mov	r0, r3
 8018494:	9b00      	ldr	r3, [sp, #0]
 8018496:	9c01      	ldr	r4, [sp, #4]
 8018498:	9d03      	ldr	r5, [sp, #12]
 801849a:	4798      	blx	r3
 801849c:	f8a9 0012 	strh.w	r0, [r9, #18]
          return;
 80184a0:	e0a6      	b.n	80185f0 <http_send+0x560>
            ssi->tag_index++;
 80184a2:	f10c 0c01 	add.w	ip, ip, #1
 80184a6:	f8a4 c010 	strh.w	ip, [r4, #16]
 80184aa:	e72f      	b.n	801830c <http_send+0x27c>
            len = (ssi->tag_insert_len - ssi->tag_index);
 80184ac:	1a40      	subs	r0, r0, r1
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80184ae:	311f      	adds	r1, #31
 80184b0:	f10d 0216 	add.w	r2, sp, #22
 80184b4:	2301      	movs	r3, #1
            len = (ssi->tag_insert_len - ssi->tag_index);
 80184b6:	f8ad 0016 	strh.w	r0, [sp, #22]
            err = http_write(pcb, &(ssi->tag_insert[ssi->tag_index]), &len,
 80184ba:	4421      	add	r1, r4
 80184bc:	4638      	mov	r0, r7
 80184be:	f7ff fa69 	bl	8017994 <http_write>
              ssi->tag_index += len;
 80184c2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
            if (err == ERR_OK) {
 80184c6:	4606      	mov	r6, r0
 80184c8:	2800      	cmp	r0, #0
 80184ca:	f47f af4f 	bne.w	801836c <http_send+0x2dc>
              ssi->tag_index += len;
 80184ce:	8a23      	ldrh	r3, [r4, #16]
              data_to_send = 1;
 80184d0:	f04f 0801 	mov.w	r8, #1
              ssi->tag_index += len;
 80184d4:	4413      	add	r3, r2
 80184d6:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 80184d8:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
 80184dc:	e5f8      	b.n	80180d0 <http_send+0x40>
 80184de:	bf00      	nop
 80184e0:	08042b18 	.word	0x08042b18
 80184e4:	0804280c 	.word	0x0804280c
 80184e8:	080428ec 	.word	0x080428ec
 80184ec:	08029a64 	.word	0x08029a64
 80184f0:	2001ed58 	.word	0x2001ed58
 80184f4:	2001ed5c 	.word	0x2001ed5c
 80184f8:	2001e954 	.word	0x2001e954
 80184fc:	00800013 	.word	0x00800013
          LWIP_ASSERT("hs->started >= hs->file", ssi->tag_started >= hs->file);
 8018500:	4b63      	ldr	r3, [pc, #396]	; (8018690 <http_send+0x600>)
 8018502:	f240 52ac 	movw	r2, #1452	; 0x5ac
 8018506:	4963      	ldr	r1, [pc, #396]	; (8018694 <http_send+0x604>)
 8018508:	4863      	ldr	r0, [pc, #396]	; (8018698 <http_send+0x608>)
 801850a:	f00c fca3 	bl	8024e54 <iprintf>
          len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801850e:	6863      	ldr	r3, [r4, #4]
 8018510:	69a9      	ldr	r1, [r5, #24]
 8018512:	e5f9      	b.n	8018108 <http_send+0x78>
      hs->file += len;
 8018514:	f8bd 2016 	ldrh.w	r2, [sp, #22]
      data_to_send = 1;
 8018518:	f04f 0801 	mov.w	r8, #1
      hs->file += len;
 801851c:	69ab      	ldr	r3, [r5, #24]
 801851e:	4413      	add	r3, r2
 8018520:	61ab      	str	r3, [r5, #24]
      hs->left -= len;
 8018522:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018524:	1a9b      	subs	r3, r3, r2
 8018526:	626b      	str	r3, [r5, #36]	; 0x24
 8018528:	e6a2      	b.n	8018270 <http_send+0x1e0>
            if (ssi->tag_started <= hs->file) {
 801852a:	6863      	ldr	r3, [r4, #4]
 801852c:	69a9      	ldr	r1, [r5, #24]
              len += (u16_t)(ssi->tag_end - ssi->tag_started);
 801852e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8018532:	e70c      	b.n	801834e <http_send+0x2be>
    return 0;
 8018534:	4688      	mov	r8, r1
}
 8018536:	4640      	mov	r0, r8
 8018538:	b007      	add	sp, #28
 801853a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
              ssi->tag_index = 1;
 801853e:	2301      	movs	r3, #1
 8018540:	8223      	strh	r3, [r4, #16]
  while (((ssi->tag_state == TAG_SENDING) || ssi->parse_left) && (err == ERR_OK)) {
 8018542:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
    if (len == 0) {
 8018546:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801854a:	e60b      	b.n	8018164 <http_send+0xd4>
            LWIP_ASSERT("ssi->tag_index <= 0xff", ssi->tag_index <= 0xff);
 801854c:	4b50      	ldr	r3, [pc, #320]	; (8018690 <http_send+0x600>)
 801854e:	f240 523a 	movw	r2, #1338	; 0x53a
 8018552:	4952      	ldr	r1, [pc, #328]	; (801869c <http_send+0x60c>)
 8018554:	4850      	ldr	r0, [pc, #320]	; (8018698 <http_send+0x608>)
 8018556:	f00c fc7d 	bl	8024e54 <iprintf>
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801855a:	7d23      	ldrb	r3, [r4, #20]
            ssi->tag_name_len = (u8_t)ssi->tag_index;
 801855c:	8a20      	ldrh	r0, [r4, #16]
            if (*ssi->parsed == http_ssi_tag_desc[ssi->tag_type].lead_out[0]) {
 801855e:	eb09 09c3 	add.w	r9, r9, r3, lsl #3
 8018562:	6821      	ldr	r1, [r4, #0]
 8018564:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8018568:	e710      	b.n	801838c <http_send+0x2fc>
      if (strcmp(ssi->tag_name, httpd_tags[tag]) == 0)
 801856a:	f109 0a16 	add.w	sl, r9, #22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 801856e:	4650      	mov	r0, sl
 8018570:	f7e7 fe70 	bl	8000254 <strlen>
 8018574:	28e4      	cmp	r0, #228	; 0xe4
 8018576:	d865      	bhi.n	8018644 <http_send+0x5b4>
 8018578:	2809      	cmp	r0, #9
 801857a:	bf28      	it	cs
 801857c:	2009      	movcs	r0, #9
 801857e:	f100 0331 	add.w	r3, r0, #49	; 0x31
 8018582:	4686      	mov	lr, r0
 8018584:	9300      	str	r3, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 8018586:	f100 0319 	add.w	r3, r0, #25
 801858a:	9301      	str	r3, [sp, #4]
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 801858c:	f8df c11c 	ldr.w	ip, [pc, #284]	; 80186ac <http_send+0x61c>
 8018590:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8018594:	f8c9 302b 	str.w	r3, [r9, #43]	; 0x2b
 8018598:	f8bc 3000 	ldrh.w	r3, [ip]
 801859c:	f8c9 001f 	str.w	r0, [r9, #31]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80185a0:	f109 0031 	add.w	r0, r9, #49	; 0x31
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80185a4:	f8c9 1023 	str.w	r1, [r9, #35]	; 0x23
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80185a8:	4651      	mov	r1, sl
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80185aa:	f8c9 2027 	str.w	r2, [r9, #39]	; 0x27
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80185ae:	4672      	mov	r2, lr
  MEMCPY(ssi->tag_insert, UNKNOWN_TAG1_TEXT, UNKNOWN_TAG1_LEN);
 80185b0:	f8a9 302f 	strh.w	r3, [r9, #47]	; 0x2f
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN], ssi->tag_name, len);
 80185b4:	f00b fc88 	bl	8023ec8 <memcpy>
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80185b8:	4b39      	ldr	r3, [pc, #228]	; (80186a0 <http_send+0x610>)
 80185ba:	9a00      	ldr	r2, [sp, #0]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80185bc:	9901      	ldr	r1, [sp, #4]
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80185be:	eb09 0e02 	add.w	lr, r9, r2
 80185c2:	6818      	ldr	r0, [r3, #0]
 80185c4:	f8b3 c004 	ldrh.w	ip, [r3, #4]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80185c8:	4449      	add	r1, r9
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80185ca:	799b      	ldrb	r3, [r3, #6]
 80185cc:	f849 0002 	str.w	r0, [r9, r2]
  len = strlen(ssi->tag_insert);
 80185d0:	f109 001f 	add.w	r0, r9, #31
  MEMCPY(&ssi->tag_insert[UNKNOWN_TAG1_LEN + len], UNKNOWN_TAG2_TEXT, UNKNOWN_TAG2_LEN);
 80185d4:	f8ae c004 	strh.w	ip, [lr, #4]
 80185d8:	f88e 3006 	strb.w	r3, [lr, #6]
  ssi->tag_insert[UNKNOWN_TAG1_LEN + len + UNKNOWN_TAG2_LEN] = 0;
 80185dc:	f881 b01f 	strb.w	fp, [r1, #31]
  len = strlen(ssi->tag_insert);
 80185e0:	f7e7 fe38 	bl	8000254 <strlen>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80185e4:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
  len = strlen(ssi->tag_insert);
 80185e8:	4682      	mov	sl, r0
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 80185ea:	d232      	bcs.n	8018652 <http_send+0x5c2>
  ssi->tag_insert_len = (u16_t)len;
 80185ec:	f8a9 a012 	strh.w	sl, [r9, #18]
            ssi->tag_state = TAG_SENDING;
 80185f0:	2304      	movs	r3, #4
            ssi->tag_end = ssi->parsed;
 80185f2:	6820      	ldr	r0, [r4, #0]
            ssi->parsed = ssi->tag_started;
 80185f4:	6862      	ldr	r2, [r4, #4]
            ssi->tag_state = TAG_SENDING;
 80185f6:	f884 311e 	strb.w	r3, [r4, #286]	; 0x11e
            if (ssi->tag_end > hs->file) {
 80185fa:	69a9      	ldr	r1, [r5, #24]
            ssi->tag_index = 0;
 80185fc:	f8a4 b010 	strh.w	fp, [r4, #16]
            if (ssi->tag_end > hs->file) {
 8018600:	4288      	cmp	r0, r1
            ssi->tag_end = ssi->parsed;
 8018602:	60a0      	str	r0, [r4, #8]
            ssi->parsed = ssi->tag_started;
 8018604:	6022      	str	r2, [r4, #0]
            if (ssi->tag_end > hs->file) {
 8018606:	d802      	bhi.n	801860e <http_send+0x57e>
    if (len == 0) {
 8018608:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801860c:	e566      	b.n	80180dc <http_send+0x4c>
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801860e:	1a52      	subs	r2, r2, r1
 8018610:	f64f 73ff 	movw	r3, #65535	; 0xffff
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018614:	4638      	mov	r0, r7
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 8018616:	429a      	cmp	r2, r3
 8018618:	bfa8      	it	ge
 801861a:	461a      	movge	r2, r3
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 801861c:	2300      	movs	r3, #0
              len = (u16_t)LWIP_MIN(ssi->tag_started - hs->file, 0xffff);
 801861e:	f8ad 2016 	strh.w	r2, [sp, #22]
              err = http_write(pcb, hs->file, &len, HTTP_IS_DATA_VOLATILE(hs));
 8018622:	f10d 0216 	add.w	r2, sp, #22
 8018626:	f7ff f9b5 	bl	8017994 <http_write>
              if (err == ERR_OK) {
 801862a:	4606      	mov	r6, r0
 801862c:	2800      	cmp	r0, #0
 801862e:	f47f ad7f 	bne.w	8018130 <http_send+0xa0>
                if (ssi->tag_started <= hs->file) {
 8018632:	6861      	ldr	r1, [r4, #4]
 8018634:	69ab      	ldr	r3, [r5, #24]
 8018636:	4299      	cmp	r1, r3
 8018638:	d91b      	bls.n	8018672 <http_send+0x5e2>
                hs->file += len;
 801863a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801863e:	4413      	add	r3, r2
 8018640:	61ab      	str	r3, [r5, #24]
                hs->left -= len;
 8018642:	e68e      	b.n	8018362 <http_send+0x2d2>
 8018644:	233a      	movs	r3, #58	; 0x3a
 8018646:	2222      	movs	r2, #34	; 0x22
  len = LWIP_MIN(sizeof(ssi->tag_name), LWIP_MIN(strlen(ssi->tag_name),
 8018648:	f04f 0e09 	mov.w	lr, #9
 801864c:	e9cd 3200 	strd	r3, r2, [sp]
 8018650:	e79c      	b.n	801858c <http_send+0x4fc>
  LWIP_ASSERT("len <= 0xffff", len <= 0xffff);
 8018652:	4b0f      	ldr	r3, [pc, #60]	; (8018690 <http_send+0x600>)
 8018654:	f240 323f 	movw	r2, #831	; 0x33f
 8018658:	4912      	ldr	r1, [pc, #72]	; (80186a4 <http_send+0x614>)
 801865a:	480f      	ldr	r0, [pc, #60]	; (8018698 <http_send+0x608>)
 801865c:	f00c fbfa 	bl	8024e54 <iprintf>
 8018660:	e7c4      	b.n	80185ec <http_send+0x55c>
  LWIP_ASSERT("ssi != NULL", ssi != NULL);
 8018662:	4b0b      	ldr	r3, [pc, #44]	; (8018690 <http_send+0x600>)
 8018664:	f240 3206 	movw	r2, #774	; 0x306
 8018668:	490f      	ldr	r1, [pc, #60]	; (80186a8 <http_send+0x618>)
 801866a:	480b      	ldr	r0, [pc, #44]	; (8018698 <http_send+0x608>)
 801866c:	f00c fbf2 	bl	8024e54 <iprintf>
 8018670:	e6e2      	b.n	8018438 <http_send+0x3a8>
                  len += (u16_t)(ssi->tag_end - ssi->tag_started);
 8018672:	68a2      	ldr	r2, [r4, #8]
 8018674:	1a52      	subs	r2, r2, r1
 8018676:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801867a:	440a      	add	r2, r1
 801867c:	b292      	uxth	r2, r2
 801867e:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018682:	e7dc      	b.n	801863e <http_send+0x5ae>
 8018684:	46b2      	mov	sl, r6
 8018686:	9c01      	ldr	r4, [sp, #4]
 8018688:	e9dd 6502 	ldrd	r6, r5, [sp, #8]
 801868c:	e76f      	b.n	801856e <http_send+0x4de>
 801868e:	bf00      	nop
 8018690:	0804280c 	.word	0x0804280c
 8018694:	08042974 	.word	0x08042974
 8018698:	08029a64 	.word	0x08029a64
 801869c:	08042924 	.word	0x08042924
 80186a0:	0804295c 	.word	0x0804295c
 80186a4:	08042964 	.word	0x08042964
 80186a8:	0804293c 	.word	0x0804293c
 80186ac:	08042948 	.word	0x08042948

080186b0 <http_sent>:
{
 80186b0:	b508      	push	{r3, lr}
  if (hs == NULL) {
 80186b2:	4603      	mov	r3, r0
 80186b4:	b130      	cbz	r0, 80186c4 <http_sent+0x14>
  hs->retries = 0;
 80186b6:	2200      	movs	r2, #0
 80186b8:	4608      	mov	r0, r1
  http_send(pcb, hs);
 80186ba:	4619      	mov	r1, r3
  hs->retries = 0;
 80186bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  http_send(pcb, hs);
 80186c0:	f7ff fce6 	bl	8018090 <http_send>
}
 80186c4:	2000      	movs	r0, #0
 80186c6:	bd08      	pop	{r3, pc}

080186c8 <http_poll>:
{
 80186c8:	b510      	push	{r4, lr}
 80186ca:	460c      	mov	r4, r1
  if (hs == NULL) {
 80186cc:	b1a8      	cbz	r0, 80186fa <http_poll+0x32>
    hs->retries++;
 80186ce:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80186d2:	3301      	adds	r3, #1
 80186d4:	b2db      	uxtb	r3, r3
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80186d6:	2b04      	cmp	r3, #4
    hs->retries++;
 80186d8:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
    if (hs->retries == HTTPD_MAX_RETRIES) {
 80186dc:	d019      	beq.n	8018712 <http_poll+0x4a>
    if (hs->handle) {
 80186de:	6943      	ldr	r3, [r0, #20]
 80186e0:	b123      	cbz	r3, 80186ec <http_poll+0x24>
      if (http_send(pcb, hs)) {
 80186e2:	4601      	mov	r1, r0
 80186e4:	4620      	mov	r0, r4
 80186e6:	f7ff fcd3 	bl	8018090 <http_send>
 80186ea:	b908      	cbnz	r0, 80186f0 <http_poll+0x28>
  return ERR_OK;
 80186ec:	2000      	movs	r0, #0
}
 80186ee:	bd10      	pop	{r4, pc}
        altcp_output(pcb);
 80186f0:	4620      	mov	r0, r4
 80186f2:	f006 fc9f 	bl	801f034 <tcp_output>
  return ERR_OK;
 80186f6:	2000      	movs	r0, #0
 80186f8:	e7f9      	b.n	80186ee <http_poll+0x26>
  return http_close_or_abort_conn(pcb, hs, 0);
 80186fa:	4601      	mov	r1, r0
 80186fc:	4620      	mov	r0, r4
 80186fe:	f7ff fc23 	bl	8017f48 <http_close_or_abort_conn.constprop.0>
    if (closed == ERR_MEM) {
 8018702:	3001      	adds	r0, #1
 8018704:	d1f2      	bne.n	80186ec <http_poll+0x24>
      altcp_abort(pcb);
 8018706:	4620      	mov	r0, r4
 8018708:	f003 fd66 	bl	801c1d8 <tcp_abort>
      return ERR_ABRT;
 801870c:	f06f 000c 	mvn.w	r0, #12
}
 8018710:	bd10      	pop	{r4, pc}
  return http_close_or_abort_conn(pcb, hs, 0);
 8018712:	4601      	mov	r1, r0
 8018714:	4620      	mov	r0, r4
 8018716:	f7ff fc17 	bl	8017f48 <http_close_or_abort_conn.constprop.0>
      return ERR_OK;
 801871a:	2000      	movs	r0, #0
}
 801871c:	bd10      	pop	{r4, pc}
 801871e:	bf00      	nop

08018720 <http_recv>:
{
 8018720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018724:	4605      	mov	r5, r0
 8018726:	b08d      	sub	sp, #52	; 0x34
 8018728:	460e      	mov	r6, r1
 801872a:	4614      	mov	r4, r2
  if ((err != ERR_OK) || (p == NULL) || (hs == NULL)) {
 801872c:	b9ab      	cbnz	r3, 801875a <http_recv+0x3a>
 801872e:	fab2 f782 	clz	r7, r2
 8018732:	097f      	lsrs	r7, r7, #5
 8018734:	b1ca      	cbz	r2, 801876a <http_recv+0x4a>
 8018736:	b188      	cbz	r0, 801875c <http_recv+0x3c>
    altcp_recved(pcb, p->tot_len);
 8018738:	8911      	ldrh	r1, [r2, #8]
 801873a:	4630      	mov	r0, r6
 801873c:	f002 ff48 	bl	801b5d0 <tcp_recved>
  if (hs->post_content_len_left > 0) {
 8018740:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8018742:	2b00      	cmp	r3, #0
 8018744:	f040 813c 	bne.w	80189c0 <http_recv+0x2a0>
    if (hs->handle == NULL) {
 8018748:	696b      	ldr	r3, [r5, #20]
 801874a:	b1b3      	cbz	r3, 801877a <http_recv+0x5a>
      pbuf_free(p);
 801874c:	4620      	mov	r0, r4
 801874e:	f002 fabf 	bl	801acd0 <pbuf_free>
}
 8018752:	2000      	movs	r0, #0
 8018754:	b00d      	add	sp, #52	; 0x34
 8018756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (p != NULL) {
 801875a:	b132      	cbz	r2, 801876a <http_recv+0x4a>
      altcp_recved(pcb, p->tot_len);
 801875c:	4630      	mov	r0, r6
 801875e:	8921      	ldrh	r1, [r4, #8]
 8018760:	f002 ff36 	bl	801b5d0 <tcp_recved>
      pbuf_free(p);
 8018764:	4620      	mov	r0, r4
 8018766:	f002 fab3 	bl	801acd0 <pbuf_free>
  return http_close_or_abort_conn(pcb, hs, 0);
 801876a:	4629      	mov	r1, r5
 801876c:	4630      	mov	r0, r6
 801876e:	f7ff fbeb 	bl	8017f48 <http_close_or_abort_conn.constprop.0>
}
 8018772:	2000      	movs	r0, #0
 8018774:	b00d      	add	sp, #52	; 0x34
 8018776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801877a:	69ab      	ldr	r3, [r5, #24]
        if (hs->req != NULL) {
 801877c:	6a28      	ldr	r0, [r5, #32]
  if ((hs->handle != NULL) || (hs->file != NULL)) {
 801877e:	2b00      	cmp	r3, #0
 8018780:	f040 8173 	bne.w	8018a6a <http_recv+0x34a>
  if (hs->req == NULL) {
 8018784:	2800      	cmp	r0, #0
 8018786:	f000 8136 	beq.w	80189f6 <http_recv+0x2d6>
    pbuf_cat(hs->req, p);
 801878a:	4621      	mov	r1, r4
 801878c:	f002 fad2 	bl	801ad34 <pbuf_cat>
  pbuf_ref(p);
 8018790:	4620      	mov	r0, r4
 8018792:	f002 fabb 	bl	801ad0c <pbuf_ref>
  if (hs->req->next != NULL) {
 8018796:	6a28      	ldr	r0, [r5, #32]
 8018798:	6803      	ldr	r3, [r0, #0]
 801879a:	2b00      	cmp	r3, #0
 801879c:	f000 812d 	beq.w	80189fa <http_recv+0x2da>
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80187a0:	8907      	ldrh	r7, [r0, #8]
 80187a2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80187a6:	49bc      	ldr	r1, [pc, #752]	; (8018a98 <http_recv+0x378>)
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80187a8:	429f      	cmp	r7, r3
    data = httpd_req_buf;
 80187aa:	4688      	mov	r8, r1
    data_len = LWIP_MIN(hs->req->tot_len, LWIP_HTTPD_MAX_REQ_LENGTH);
 80187ac:	bf28      	it	cs
 80187ae:	461f      	movcs	r7, r3
    pbuf_copy_partial(hs->req, httpd_req_buf, data_len, 0);
 80187b0:	2300      	movs	r3, #0
 80187b2:	463a      	mov	r2, r7
 80187b4:	f002 fb30 	bl	801ae18 <pbuf_copy_partial>
  if (data_len >= MIN_REQ_LEN) {
 80187b8:	2f06      	cmp	r7, #6
 80187ba:	f240 80ef 	bls.w	801899c <http_recv+0x27c>
    crlf = lwip_strnstr(data, CRLF, data_len);
 80187be:	463a      	mov	r2, r7
 80187c0:	49b6      	ldr	r1, [pc, #728]	; (8018a9c <http_recv+0x37c>)
 80187c2:	4640      	mov	r0, r8
 80187c4:	f000 fa4e 	bl	8018c64 <lwip_strnstr>
    if (crlf != NULL) {
 80187c8:	2800      	cmp	r0, #0
 80187ca:	f000 80e7 	beq.w	801899c <http_recv+0x27c>
      if (!strncmp(data, "GET ", 4)) {
 80187ce:	2204      	movs	r2, #4
 80187d0:	49b3      	ldr	r1, [pc, #716]	; (8018aa0 <http_recv+0x380>)
 80187d2:	4640      	mov	r0, r8
 80187d4:	f00d fb12 	bl	8025dfc <strncmp>
 80187d8:	4682      	mov	sl, r0
 80187da:	2800      	cmp	r0, #0
 80187dc:	f040 8118 	bne.w	8018a10 <http_recv+0x2f0>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 80187e0:	1f3a      	subs	r2, r7, #4
 80187e2:	f108 0b04 	add.w	fp, r8, #4
        sp1 = data + 3;
 80187e6:	f108 0303 	add.w	r3, r8, #3
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 80187ea:	49ae      	ldr	r1, [pc, #696]	; (8018aa4 <http_recv+0x384>)
 80187ec:	b292      	uxth	r2, r2
 80187ee:	4658      	mov	r0, fp
 80187f0:	e9cd 3204 	strd	r3, r2, [sp, #16]
 80187f4:	f000 fa36 	bl	8018c64 <lwip_strnstr>
      if (sp2 == NULL) {
 80187f8:	9a05      	ldr	r2, [sp, #20]
 80187fa:	4681      	mov	r9, r0
 80187fc:	2800      	cmp	r0, #0
 80187fe:	f000 8123 	beq.w	8018a48 <http_recv+0x328>
      int is_09 = 0;
 8018802:	4653      	mov	r3, sl
      if ((sp2 != 0) && (sp2 > sp1)) {
 8018804:	9305      	str	r3, [sp, #20]
 8018806:	f1b9 0f00 	cmp.w	r9, #0
 801880a:	f000 80c7 	beq.w	801899c <http_recv+0x27c>
 801880e:	9b04      	ldr	r3, [sp, #16]
 8018810:	4599      	cmp	r9, r3
 8018812:	f240 80c3 	bls.w	801899c <http_recv+0x27c>
        if (lwip_strnstr(data, CRLF CRLF, data_len) != NULL) {
 8018816:	463a      	mov	r2, r7
 8018818:	49a3      	ldr	r1, [pc, #652]	; (8018aa8 <http_recv+0x388>)
 801881a:	4640      	mov	r0, r8
 801881c:	f000 fa22 	bl	8018c64 <lwip_strnstr>
 8018820:	2800      	cmp	r0, #0
 8018822:	f000 80bb 	beq.w	801899c <http_recv+0x27c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018826:	9b05      	ldr	r3, [sp, #20]
 8018828:	2b00      	cmp	r3, #0
 801882a:	f000 812b 	beq.w	8018a84 <http_recv+0x364>
            hs->keepalive = 0;
 801882e:	2000      	movs	r0, #0
      uri_len = (u16_t)(sp2 - (sp1 + 1));
 8018830:	eba9 020b 	sub.w	r2, r9, fp
 8018834:	f885 0029 	strb.w	r0, [r5, #41]	; 0x29
          *sp1 = 0;
 8018838:	2100      	movs	r1, #0
 801883a:	9804      	ldr	r0, [sp, #16]
          uri[uri_len] = 0;
 801883c:	b292      	uxth	r2, r2
          *sp1 = 0;
 801883e:	7001      	strb	r1, [r0, #0]
          uri[uri_len] = 0;
 8018840:	f80b 1002 	strb.w	r1, [fp, r2]
 8018844:	445a      	add	r2, fp
 8018846:	9206      	str	r2, [sp, #24]
          if (is_post) {
 8018848:	f1ba 0f00 	cmp.w	sl, #0
 801884c:	f000 8113 	beq.w	8018a76 <http_recv+0x356>
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 8018850:	f109 0301 	add.w	r3, r9, #1
 8018854:	4994      	ldr	r1, [pc, #592]	; (8018aa8 <http_recv+0x388>)
            struct pbuf *q = hs->req;
 8018856:	f8d5 a020 	ldr.w	sl, [r5, #32]
  char *crlfcrlf = lwip_strnstr(uri_end + 1, CRLF CRLF, data_len - (uri_end + 1 - data));
 801885a:	eba3 0208 	sub.w	r2, r3, r8
 801885e:	4618      	mov	r0, r3
 8018860:	9305      	str	r3, [sp, #20]
 8018862:	1aba      	subs	r2, r7, r2
 8018864:	f000 f9fe 	bl	8018c64 <lwip_strnstr>
  if (crlfcrlf != NULL) {
 8018868:	9008      	str	r0, [sp, #32]
 801886a:	2800      	cmp	r0, #0
 801886c:	f000 8168 	beq.w	8018b40 <http_recv+0x420>
    char *scontent_len = lwip_strnstr(uri_end + 1, HTTP_HDR_CONTENT_LEN, crlfcrlf - (uri_end + 1));
 8018870:	9b05      	ldr	r3, [sp, #20]
 8018872:	498e      	ldr	r1, [pc, #568]	; (8018aac <http_recv+0x38c>)
 8018874:	1ac2      	subs	r2, r0, r3
 8018876:	4618      	mov	r0, r3
 8018878:	f000 f9f4 	bl	8018c64 <lwip_strnstr>
    if (scontent_len != NULL) {
 801887c:	4603      	mov	r3, r0
 801887e:	9009      	str	r0, [sp, #36]	; 0x24
 8018880:	2800      	cmp	r0, #0
 8018882:	f000 812f 	beq.w	8018ae4 <http_recv+0x3c4>
      char *scontent_len_end = lwip_strnstr(scontent_len + HTTP_HDR_CONTENT_LEN_LEN, CRLF, HTTP_HDR_CONTENT_LEN_DIGIT_MAX_LEN);
 8018886:	3310      	adds	r3, #16
 8018888:	220a      	movs	r2, #10
 801888a:	4984      	ldr	r1, [pc, #528]	; (8018a9c <http_recv+0x37c>)
 801888c:	4618      	mov	r0, r3
 801888e:	9307      	str	r3, [sp, #28]
 8018890:	f000 f9e8 	bl	8018c64 <lwip_strnstr>
      if (scontent_len_end != NULL) {
 8018894:	2800      	cmp	r0, #0
 8018896:	f000 8125 	beq.w	8018ae4 <http_recv+0x3c4>
        content_len = atoi(content_len_num);
 801889a:	9b07      	ldr	r3, [sp, #28]
 801889c:	4618      	mov	r0, r3
 801889e:	f00b f8bd 	bl	8023a1c <atoi>
        if (content_len == 0) {
 80188a2:	1e02      	subs	r2, r0, #0
 80188a4:	9207      	str	r2, [sp, #28]
 80188a6:	f040 811b 	bne.w	8018ae0 <http_recv+0x3c0>
          if ((content_len_num[0] != '0') || (content_len_num[1] != '\r')) {
 80188aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188ac:	7c1b      	ldrb	r3, [r3, #16]
 80188ae:	2b30      	cmp	r3, #48	; 0x30
 80188b0:	f040 8118 	bne.w	8018ae4 <http_recv+0x3c4>
 80188b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80188b6:	7c5b      	ldrb	r3, [r3, #17]
 80188b8:	2b0d      	cmp	r3, #13
 80188ba:	f040 8113 	bne.w	8018ae4 <http_recv+0x3c4>
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80188be:	9b08      	ldr	r3, [sp, #32]
          u8_t post_auto_wnd = 1;
 80188c0:	2001      	movs	r0, #1
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80188c2:	9a05      	ldr	r2, [sp, #20]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80188c4:	4659      	mov	r1, fp
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80188c6:	3304      	adds	r3, #4
          http_uri_buf[0] = 0;
 80188c8:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8018ac4 <http_recv+0x3a4>
          u8_t post_auto_wnd = 1;
 80188cc:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80188d0:	eba3 0808 	sub.w	r8, r3, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80188d4:	1a9b      	subs	r3, r3, r2
          *crlfcrlf = 0;
 80188d6:	9808      	ldr	r0, [sp, #32]
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80188d8:	4547      	cmp	r7, r8
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80188da:	9a05      	ldr	r2, [sp, #20]
 80188dc:	bfb4      	ite	lt
 80188de:	46b8      	movlt	r8, r7
          u16_t hdr_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - data);
 80188e0:	fa1f f888 	uxthge.w	r8, r8
          u16_t hdr_data_len = (u16_t)LWIP_MIN(data_len, crlfcrlf + 4 - hdr_start_after_uri);
 80188e4:	429f      	cmp	r7, r3
 80188e6:	bfa8      	it	ge
 80188e8:	b29f      	uxthge	r7, r3
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80188ea:	463b      	mov	r3, r7
          http_uri_buf[0] = 0;
 80188ec:	2700      	movs	r7, #0
 80188ee:	f88b 7000 	strb.w	r7, [fp]
          *crlfcrlf = 0;
 80188f2:	7007      	strb	r7, [r0, #0]
          err = httpd_post_begin(hs, uri, hdr_start_after_uri, hdr_data_len, content_len,
 80188f4:	9807      	ldr	r0, [sp, #28]
 80188f6:	f8cd b004 	str.w	fp, [sp, #4]
 80188fa:	9000      	str	r0, [sp, #0]
 80188fc:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
 8018900:	9003      	str	r0, [sp, #12]
 8018902:	203f      	movs	r0, #63	; 0x3f
 8018904:	9002      	str	r0, [sp, #8]
 8018906:	4628      	mov	r0, r5
 8018908:	f7ee ff40 	bl	800778c <httpd_post_begin>
          if (err == ERR_OK) {
 801890c:	2800      	cmp	r0, #0
 801890e:	f040 80f7 	bne.w	8018b00 <http_recv+0x3e0>
            hs->post_content_len_left = (u32_t)content_len;
 8018912:	9807      	ldr	r0, [sp, #28]
 8018914:	6328      	str	r0, [r5, #48]	; 0x30
            while ((q != NULL) && (q->len <= start_offset)) {
 8018916:	f1ba 0f00 	cmp.w	sl, #0
 801891a:	f000 80d5 	beq.w	8018ac8 <http_recv+0x3a8>
 801891e:	4652      	mov	r2, sl
 8018920:	e005      	b.n	801892e <http_recv+0x20e>
              q = q->next;
 8018922:	6812      	ldr	r2, [r2, #0]
              start_offset -= q->len;
 8018924:	fa1f f883 	uxth.w	r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018928:	2a00      	cmp	r2, #0
 801892a:	f000 80cd 	beq.w	8018ac8 <http_recv+0x3a8>
 801892e:	8953      	ldrh	r3, [r2, #10]
 8018930:	4543      	cmp	r3, r8
              start_offset -= q->len;
 8018932:	eba8 0303 	sub.w	r3, r8, r3
            while ((q != NULL) && (q->len <= start_offset)) {
 8018936:	d9f4      	bls.n	8018922 <http_recv+0x202>
 8018938:	4692      	mov	sl, r2
              pbuf_remove_header(q, start_offset);
 801893a:	4641      	mov	r1, r8
 801893c:	4610      	mov	r0, r2
 801893e:	f002 f93b 	bl	801abb8 <pbuf_remove_header>
              pbuf_ref(q);
 8018942:	4650      	mov	r0, sl
 8018944:	f002 f9e2 	bl	801ad0c <pbuf_ref>
              return http_post_rxpbuf(hs, q);
 8018948:	4651      	mov	r1, sl
 801894a:	4628      	mov	r0, r5
 801894c:	f7ff fa98 	bl	8017e80 <http_post_rxpbuf>
 8018950:	4607      	mov	r7, r0
            if (err != ERR_OK) {
 8018952:	2f00      	cmp	r7, #0
 8018954:	f000 80ba 	beq.w	8018acc <http_recv+0x3ac>
              *sp1 = ' ';
 8018958:	2320      	movs	r3, #32
 801895a:	9a04      	ldr	r2, [sp, #16]
            if (err == ERR_ARG) {
 801895c:	f117 0f10 	cmn.w	r7, #16
              *sp1 = ' ';
 8018960:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018962:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018964:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018968:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 801896a:	d022      	beq.n	80189b2 <http_recv+0x292>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 801896c:	2f00      	cmp	r7, #0
 801896e:	d048      	beq.n	8018a02 <http_recv+0x2e2>
 8018970:	1d7a      	adds	r2, r7, #5
 8018972:	f43f aeeb 	beq.w	801874c <http_recv+0x2c>
 8018976:	f027 0308 	bic.w	r3, r7, #8
 801897a:	b25b      	sxtb	r3, r3
 801897c:	3310      	adds	r3, #16
 801897e:	d12e      	bne.n	80189de <http_recv+0x2be>
        if (hs->req != NULL) {
 8018980:	6a28      	ldr	r0, [r5, #32]
 8018982:	b3a0      	cbz	r0, 80189ee <http_recv+0x2ce>
          pbuf_free(hs->req);
 8018984:	f002 f9a4 	bl	801acd0 <pbuf_free>
          hs->req = NULL;
 8018988:	2300      	movs	r3, #0
 801898a:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 801898c:	4620      	mov	r0, r4
 801898e:	f002 f99f 	bl	801acd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8018992:	b1df      	cbz	r7, 80189cc <http_recv+0x2ac>
      } else if (parsed == ERR_ARG) {
 8018994:	3710      	adds	r7, #16
 8018996:	f43f aee8 	beq.w	801876a <http_recv+0x4a>
 801899a:	e6ea      	b.n	8018772 <http_recv+0x52>
  clen = pbuf_clen(hs->req);
 801899c:	6a28      	ldr	r0, [r5, #32]
 801899e:	f002 f9ab 	bl	801acf8 <pbuf_clen>
  if ((hs->req->tot_len <= LWIP_HTTPD_REQ_BUFSIZE) &&
 80189a2:	6a2b      	ldr	r3, [r5, #32]
 80189a4:	891b      	ldrh	r3, [r3, #8]
 80189a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80189aa:	d202      	bcs.n	80189b2 <http_recv+0x292>
 80189ac:	2805      	cmp	r0, #5
 80189ae:	f67f aecd 	bls.w	801874c <http_recv+0x2c>
    return http_find_error_file(hs, 400);
 80189b2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80189b6:	4628      	mov	r0, r5
 80189b8:	f7ff fa88 	bl	8017ecc <http_find_error_file>
 80189bc:	4607      	mov	r7, r0
 80189be:	e7d5      	b.n	801896c <http_recv+0x24c>
    http_post_rxpbuf(hs, p);
 80189c0:	4621      	mov	r1, r4
 80189c2:	4628      	mov	r0, r5
    hs->retries = 0;
 80189c4:	f885 7028 	strb.w	r7, [r5, #40]	; 0x28
    http_post_rxpbuf(hs, p);
 80189c8:	f7ff fa5a 	bl	8017e80 <http_post_rxpbuf>
    if (hs->post_content_len_left == 0) {
 80189cc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80189ce:	2b00      	cmp	r3, #0
 80189d0:	f47f aecf 	bne.w	8018772 <http_recv+0x52>
      http_send(pcb, hs);
 80189d4:	4629      	mov	r1, r5
 80189d6:	4630      	mov	r0, r6
 80189d8:	f7ff fb5a 	bl	8018090 <http_send>
 80189dc:	e6c9      	b.n	8018772 <http_recv+0x52>
      LWIP_ASSERT("http_parse_request: unexpected return value", parsed == ERR_OK
 80189de:	4b34      	ldr	r3, [pc, #208]	; (8018ab0 <http_recv+0x390>)
 80189e0:	f640 2204 	movw	r2, #2564	; 0xa04
 80189e4:	4933      	ldr	r1, [pc, #204]	; (8018ab4 <http_recv+0x394>)
 80189e6:	4834      	ldr	r0, [pc, #208]	; (8018ab8 <http_recv+0x398>)
 80189e8:	f00c fa34 	bl	8024e54 <iprintf>
 80189ec:	e7c8      	b.n	8018980 <http_recv+0x260>
      pbuf_free(p);
 80189ee:	4620      	mov	r0, r4
 80189f0:	f002 f96e 	bl	801acd0 <pbuf_free>
      if (parsed == ERR_OK) {
 80189f4:	e7ce      	b.n	8018994 <http_recv+0x274>
    hs->req = p;
 80189f6:	622c      	str	r4, [r5, #32]
 80189f8:	e6ca      	b.n	8018790 <http_recv+0x70>
    data = (char *)p->payload;
 80189fa:	f8d4 8004 	ldr.w	r8, [r4, #4]
    data_len = p->len;
 80189fe:	8967      	ldrh	r7, [r4, #10]
    if (p->len != p->tot_len) {
 8018a00:	e6da      	b.n	80187b8 <http_recv+0x98>
      if (parsed != ERR_INPROGRESS) {
 8018a02:	1d7b      	adds	r3, r7, #5
 8018a04:	f43f aea2 	beq.w	801874c <http_recv+0x2c>
        if (hs->req != NULL) {
 8018a08:	6a28      	ldr	r0, [r5, #32]
 8018a0a:	2800      	cmp	r0, #0
 8018a0c:	d0be      	beq.n	801898c <http_recv+0x26c>
 8018a0e:	e7b9      	b.n	8018984 <http_recv+0x264>
      } else if (!strncmp(data, "POST ", 5)) {
 8018a10:	2205      	movs	r2, #5
 8018a12:	492a      	ldr	r1, [pc, #168]	; (8018abc <http_recv+0x39c>)
 8018a14:	4640      	mov	r0, r8
 8018a16:	f00d f9f1 	bl	8025dfc <strncmp>
 8018a1a:	9005      	str	r0, [sp, #20]
 8018a1c:	b9d8      	cbnz	r0, 8018a56 <http_recv+0x336>
      left_len = (u16_t)(data_len - ((sp1 + 1) - data));
 8018a1e:	f1a7 0a05 	sub.w	sl, r7, #5
 8018a22:	f108 0b05 	add.w	fp, r8, #5
        sp1 = data + 4;
 8018a26:	f108 0304 	add.w	r3, r8, #4
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018a2a:	491e      	ldr	r1, [pc, #120]	; (8018aa4 <http_recv+0x384>)
 8018a2c:	fa1f fa8a 	uxth.w	sl, sl
 8018a30:	4658      	mov	r0, fp
        sp1 = data + 4;
 8018a32:	9304      	str	r3, [sp, #16]
      sp2 = lwip_strnstr(sp1 + 1, " ", left_len);
 8018a34:	4652      	mov	r2, sl
 8018a36:	f000 f915 	bl	8018c64 <lwip_strnstr>
      if (sp2 == NULL) {
 8018a3a:	4681      	mov	r9, r0
 8018a3c:	2800      	cmp	r0, #0
 8018a3e:	d059      	beq.n	8018af4 <http_recv+0x3d4>
        is_post = 1;
 8018a40:	f04f 0a01 	mov.w	sl, #1
 8018a44:	9b05      	ldr	r3, [sp, #20]
 8018a46:	e6dd      	b.n	8018804 <http_recv+0xe4>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018a48:	4914      	ldr	r1, [pc, #80]	; (8018a9c <http_recv+0x37c>)
 8018a4a:	4658      	mov	r0, fp
 8018a4c:	f000 f90a 	bl	8018c64 <lwip_strnstr>
        is_09 = 1;
 8018a50:	2301      	movs	r3, #1
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018a52:	4681      	mov	r9, r0
        if (is_post) {
 8018a54:	e6d6      	b.n	8018804 <http_recv+0xe4>
        data[4] = 0;
 8018a56:	2300      	movs	r3, #0
        return http_find_error_file(hs, 501);
 8018a58:	f240 11f5 	movw	r1, #501	; 0x1f5
 8018a5c:	4628      	mov	r0, r5
        data[4] = 0;
 8018a5e:	f888 3004 	strb.w	r3, [r8, #4]
        return http_find_error_file(hs, 501);
 8018a62:	f7ff fa33 	bl	8017ecc <http_find_error_file>
 8018a66:	4607      	mov	r7, r0
 8018a68:	e780      	b.n	801896c <http_recv+0x24c>
        if (hs->req != NULL) {
 8018a6a:	2800      	cmp	r0, #0
 8018a6c:	f43f ae6e 	beq.w	801874c <http_recv+0x2c>
 8018a70:	f06f 0707 	mvn.w	r7, #7
 8018a74:	e786      	b.n	8018984 <http_recv+0x264>
            return http_find_file(hs, uri, is_09);
 8018a76:	461a      	mov	r2, r3
 8018a78:	4659      	mov	r1, fp
 8018a7a:	4628      	mov	r0, r5
 8018a7c:	f7ff f910 	bl	8017ca0 <http_find_file>
 8018a80:	4607      	mov	r7, r0
 8018a82:	e773      	b.n	801896c <http_recv+0x24c>
          if (!is_09 && (lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE, data_len) ||
 8018a84:	463a      	mov	r2, r7
 8018a86:	490e      	ldr	r1, [pc, #56]	; (8018ac0 <http_recv+0x3a0>)
 8018a88:	4640      	mov	r0, r8
 8018a8a:	f000 f8eb 	bl	8018c64 <lwip_strnstr>
 8018a8e:	9b05      	ldr	r3, [sp, #20]
 8018a90:	2800      	cmp	r0, #0
 8018a92:	d047      	beq.n	8018b24 <http_recv+0x404>
            hs->keepalive = 1;
 8018a94:	2001      	movs	r0, #1
 8018a96:	e6cb      	b.n	8018830 <http_recv+0x110>
 8018a98:	2001e958 	.word	0x2001e958
 8018a9c:	08029b88 	.word	0x08029b88
 8018aa0:	0804298c 	.word	0x0804298c
 8018aa4:	0802bee8 	.word	0x0802bee8
 8018aa8:	08029d04 	.word	0x08029d04
 8018aac:	08029d0c 	.word	0x08029d0c
 8018ab0:	0804280c 	.word	0x0804280c
 8018ab4:	080429cc 	.word	0x080429cc
 8018ab8:	08029a64 	.word	0x08029a64
 8018abc:	08042994 	.word	0x08042994
 8018ac0:	0804299c 	.word	0x0804299c
 8018ac4:	2001e914 	.word	0x2001e914
            } else if (hs->post_content_len_left == 0) {
 8018ac8:	9b07      	ldr	r3, [sp, #28]
 8018aca:	b303      	cbz	r3, 8018b0e <http_recv+0x3ee>
        if (hs->req != NULL) {
 8018acc:	6a28      	ldr	r0, [r5, #32]
 8018ace:	b398      	cbz	r0, 8018b38 <http_recv+0x418>
          pbuf_free(hs->req);
 8018ad0:	f002 f8fe 	bl	801acd0 <pbuf_free>
          hs->req = NULL;
 8018ad4:	2300      	movs	r3, #0
      pbuf_free(p);
 8018ad6:	4620      	mov	r0, r4
          hs->req = NULL;
 8018ad8:	622b      	str	r3, [r5, #32]
      pbuf_free(p);
 8018ada:	f002 f8f9 	bl	801acd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8018ade:	e775      	b.n	80189cc <http_recv+0x2ac>
        if (content_len >= 0) {
 8018ae0:	f6bf aeed 	bge.w	80188be <http_recv+0x19e>
              *sp1 = ' ';
 8018ae4:	2320      	movs	r3, #32
 8018ae6:	9a04      	ldr	r2, [sp, #16]
 8018ae8:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018aea:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018aec:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018af0:	7013      	strb	r3, [r2, #0]
            if (err == ERR_ARG) {
 8018af2:	e75e      	b.n	80189b2 <http_recv+0x292>
        sp2 = lwip_strnstr(sp1 + 1, CRLF, left_len);
 8018af4:	4652      	mov	r2, sl
 8018af6:	4658      	mov	r0, fp
 8018af8:	4915      	ldr	r1, [pc, #84]	; (8018b50 <http_recv+0x430>)
 8018afa:	f000 f8b3 	bl	8018c64 <lwip_strnstr>
        if (is_post) {
 8018afe:	e758      	b.n	80189b2 <http_recv+0x292>
            return http_find_file(hs, http_uri_buf, 0);
 8018b00:	463a      	mov	r2, r7
 8018b02:	4659      	mov	r1, fp
 8018b04:	4628      	mov	r0, r5
 8018b06:	f7ff f8cb 	bl	8017ca0 <http_find_file>
 8018b0a:	4607      	mov	r7, r0
 8018b0c:	e721      	b.n	8018952 <http_recv+0x232>
              q = pbuf_alloc(PBUF_RAW, 0, PBUF_REF);
 8018b0e:	9907      	ldr	r1, [sp, #28]
 8018b10:	2241      	movs	r2, #65	; 0x41
 8018b12:	4608      	mov	r0, r1
 8018b14:	f001 ff0a 	bl	801a92c <pbuf_alloc>
 8018b18:	4601      	mov	r1, r0
              return http_post_rxpbuf(hs, q);
 8018b1a:	4628      	mov	r0, r5
 8018b1c:	f7ff f9b0 	bl	8017e80 <http_post_rxpbuf>
 8018b20:	4607      	mov	r7, r0
 8018b22:	e716      	b.n	8018952 <http_recv+0x232>
                         lwip_strnstr(data, HTTP11_CONNECTIONKEEPALIVE2, data_len))) {
 8018b24:	463a      	mov	r2, r7
 8018b26:	490b      	ldr	r1, [pc, #44]	; (8018b54 <http_recv+0x434>)
 8018b28:	4640      	mov	r0, r8
 8018b2a:	f000 f89b 	bl	8018c64 <lwip_strnstr>
            hs->keepalive = 1;
 8018b2e:	3800      	subs	r0, #0
 8018b30:	9b05      	ldr	r3, [sp, #20]
 8018b32:	bf18      	it	ne
 8018b34:	2001      	movne	r0, #1
 8018b36:	e67b      	b.n	8018830 <http_recv+0x110>
      pbuf_free(p);
 8018b38:	4620      	mov	r0, r4
 8018b3a:	f002 f8c9 	bl	801acd0 <pbuf_free>
      if (parsed == ERR_OK) {
 8018b3e:	e745      	b.n	80189cc <http_recv+0x2ac>
              *sp1 = ' ';
 8018b40:	2320      	movs	r3, #32
 8018b42:	9a04      	ldr	r2, [sp, #16]
 8018b44:	7013      	strb	r3, [r2, #0]
              uri[uri_len] = ' ';
 8018b46:	9a06      	ldr	r2, [sp, #24]
              *sp2 = ' ';
 8018b48:	f889 3000 	strb.w	r3, [r9]
              uri[uri_len] = ' ';
 8018b4c:	7013      	strb	r3, [r2, #0]
      if (parsed != ERR_INPROGRESS) {
 8018b4e:	e5fd      	b.n	801874c <http_recv+0x2c>
 8018b50:	08029b88 	.word	0x08029b88
 8018b54:	080429b4 	.word	0x080429b4

08018b58 <httpd_init>:
 * @ingroup httpd
 * Initialize the httpd: set up a listening PCB and bind it to the defined port
 */
void
httpd_init(void)
{
 8018b58:	b510      	push	{r4, lr}
#endif
  LWIP_DEBUGF(HTTPD_DEBUG, ("httpd_init\n"));

  /* LWIP_ASSERT_CORE_LOCKED(); is checked by tcp_new() */

  pcb = altcp_tcp_new_ip_type(IPADDR_TYPE_ANY);
 8018b5a:	202e      	movs	r0, #46	; 0x2e
 8018b5c:	f003 fc60 	bl	801c420 <tcp_new_ip_type>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018b60:	b358      	cbz	r0, 8018bba <httpd_init+0x62>
  httpd_init_pcb(pcb, HTTPD_SERVER_PORT);
 8018b62:	4604      	mov	r4, r0
    altcp_setprio(pcb, HTTPD_TCP_PRIO);
 8018b64:	2101      	movs	r1, #1
 8018b66:	f002 fe3d 	bl	801b7e4 <tcp_setprio>
    err = altcp_bind(pcb, IP_ANY_TYPE, port);
 8018b6a:	2250      	movs	r2, #80	; 0x50
 8018b6c:	4917      	ldr	r1, [pc, #92]	; (8018bcc <httpd_init+0x74>)
 8018b6e:	4620      	mov	r0, r4
 8018b70:	f002 fc0c 	bl	801b38c <tcp_bind>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018b74:	b958      	cbnz	r0, 8018b8e <httpd_init+0x36>
    pcb = altcp_listen(pcb);
 8018b76:	4620      	mov	r0, r4
 8018b78:	21ff      	movs	r1, #255	; 0xff
 8018b7a:	f002 fce9 	bl	801b550 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018b7e:	4604      	mov	r4, r0
 8018b80:	b198      	cbz	r0, 8018baa <httpd_init+0x52>
    altcp_accept(pcb, http_accept);
 8018b82:	4620      	mov	r0, r4
 8018b84:	4912      	ldr	r1, [pc, #72]	; (8018bd0 <httpd_init+0x78>)
}
 8018b86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    altcp_accept(pcb, http_accept);
 8018b8a:	f002 beb9 	b.w	801b900 <tcp_accept>
    LWIP_ASSERT("httpd_init: tcp_bind failed", err == ERR_OK);
 8018b8e:	4b11      	ldr	r3, [pc, #68]	; (8018bd4 <httpd_init+0x7c>)
 8018b90:	f640 2257 	movw	r2, #2647	; 0xa57
 8018b94:	4910      	ldr	r1, [pc, #64]	; (8018bd8 <httpd_init+0x80>)
 8018b96:	4811      	ldr	r0, [pc, #68]	; (8018bdc <httpd_init+0x84>)
 8018b98:	f00c f95c 	bl	8024e54 <iprintf>
    pcb = altcp_listen(pcb);
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	21ff      	movs	r1, #255	; 0xff
 8018ba0:	f002 fcd6 	bl	801b550 <tcp_listen_with_backlog>
    LWIP_ASSERT("httpd_init: tcp_listen failed", pcb != NULL);
 8018ba4:	4604      	mov	r4, r0
 8018ba6:	2800      	cmp	r0, #0
 8018ba8:	d1eb      	bne.n	8018b82 <httpd_init+0x2a>
 8018baa:	4b0a      	ldr	r3, [pc, #40]	; (8018bd4 <httpd_init+0x7c>)
 8018bac:	f640 2259 	movw	r2, #2649	; 0xa59
 8018bb0:	490b      	ldr	r1, [pc, #44]	; (8018be0 <httpd_init+0x88>)
 8018bb2:	480a      	ldr	r0, [pc, #40]	; (8018bdc <httpd_init+0x84>)
 8018bb4:	f00c f94e 	bl	8024e54 <iprintf>
 8018bb8:	e7e3      	b.n	8018b82 <httpd_init+0x2a>
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018bba:	4b06      	ldr	r3, [pc, #24]	; (8018bd4 <httpd_init+0x7c>)
 8018bbc:	f640 2272 	movw	r2, #2674	; 0xa72
 8018bc0:	4908      	ldr	r1, [pc, #32]	; (8018be4 <httpd_init+0x8c>)
 8018bc2:	4806      	ldr	r0, [pc, #24]	; (8018bdc <httpd_init+0x84>)
}
 8018bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  LWIP_ASSERT("httpd_init: tcp_new failed", pcb != NULL);
 8018bc8:	f00c b944 	b.w	8024e54 <iprintf>
 8018bcc:	08045328 	.word	0x08045328
 8018bd0:	08017a49 	.word	0x08017a49
 8018bd4:	0804280c 	.word	0x0804280c
 8018bd8:	08042a14 	.word	0x08042a14
 8018bdc:	08029a64 	.word	0x08029a64
 8018be0:	08042a30 	.word	0x08042a30
 8018be4:	080429f8 	.word	0x080429f8

08018be8 <http_set_ssi_handler>:
 * @param tags an array of SSI tag strings to search for in SSI-enabled files
 * @param num_tags number of tags in the 'tags' array
 */
void
http_set_ssi_handler(tSSIHandler ssi_handler, const char **tags, int num_tags)
{
 8018be8:	b570      	push	{r4, r5, r6, lr}
 8018bea:	460d      	mov	r5, r1
  LWIP_DEBUGF(HTTPD_DEBUG, ("http_set_ssi_handler\n"));

  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018bec:	4606      	mov	r6, r0
{
 8018bee:	4614      	mov	r4, r2
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018bf0:	b1c8      	cbz	r0, 8018c26 <http_set_ssi_handler+0x3e>
  httpd_ssi_handler = ssi_handler;
 8018bf2:	4b11      	ldr	r3, [pc, #68]	; (8018c38 <http_set_ssi_handler+0x50>)
 8018bf4:	601e      	str	r6, [r3, #0]

#if LWIP_HTTPD_SSI_RAW
  LWIP_UNUSED_ARG(tags);
  LWIP_UNUSED_ARG(num_tags);
#else /* LWIP_HTTPD_SSI_RAW */
  LWIP_ASSERT("no tags given", tags != NULL);
 8018bf6:	b175      	cbz	r5, 8018c16 <http_set_ssi_handler+0x2e>
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018bf8:	2c00      	cmp	r4, #0
 8018bfa:	dd04      	ble.n	8018c06 <http_set_ssi_handler+0x1e>

  httpd_tags = tags;
 8018bfc:	4a0f      	ldr	r2, [pc, #60]	; (8018c3c <http_set_ssi_handler+0x54>)
  httpd_num_tags = num_tags;
 8018bfe:	4b10      	ldr	r3, [pc, #64]	; (8018c40 <http_set_ssi_handler+0x58>)
  httpd_tags = tags;
 8018c00:	6015      	str	r5, [r2, #0]
  httpd_num_tags = num_tags;
 8018c02:	601c      	str	r4, [r3, #0]
#endif /* !LWIP_HTTPD_SSI_RAW */
}
 8018c04:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid number of tags", num_tags > 0);
 8018c06:	4b0f      	ldr	r3, [pc, #60]	; (8018c44 <http_set_ssi_handler+0x5c>)
 8018c08:	f640 229f 	movw	r2, #2719	; 0xa9f
 8018c0c:	490e      	ldr	r1, [pc, #56]	; (8018c48 <http_set_ssi_handler+0x60>)
 8018c0e:	480f      	ldr	r0, [pc, #60]	; (8018c4c <http_set_ssi_handler+0x64>)
 8018c10:	f00c f920 	bl	8024e54 <iprintf>
 8018c14:	e7f2      	b.n	8018bfc <http_set_ssi_handler+0x14>
  LWIP_ASSERT("no tags given", tags != NULL);
 8018c16:	4b0b      	ldr	r3, [pc, #44]	; (8018c44 <http_set_ssi_handler+0x5c>)
 8018c18:	f640 229e 	movw	r2, #2718	; 0xa9e
 8018c1c:	490c      	ldr	r1, [pc, #48]	; (8018c50 <http_set_ssi_handler+0x68>)
 8018c1e:	480b      	ldr	r0, [pc, #44]	; (8018c4c <http_set_ssi_handler+0x64>)
 8018c20:	f00c f918 	bl	8024e54 <iprintf>
 8018c24:	e7e8      	b.n	8018bf8 <http_set_ssi_handler+0x10>
  LWIP_ASSERT("no ssi_handler given", ssi_handler != NULL);
 8018c26:	4b07      	ldr	r3, [pc, #28]	; (8018c44 <http_set_ssi_handler+0x5c>)
 8018c28:	f640 2297 	movw	r2, #2711	; 0xa97
 8018c2c:	4909      	ldr	r1, [pc, #36]	; (8018c54 <http_set_ssi_handler+0x6c>)
 8018c2e:	4807      	ldr	r0, [pc, #28]	; (8018c4c <http_set_ssi_handler+0x64>)
 8018c30:	f00c f910 	bl	8024e54 <iprintf>
 8018c34:	e7dd      	b.n	8018bf2 <http_set_ssi_handler+0xa>
 8018c36:	bf00      	nop
 8018c38:	2001ed58 	.word	0x2001ed58
 8018c3c:	2001ed5c 	.word	0x2001ed5c
 8018c40:	2001e954 	.word	0x2001e954
 8018c44:	0804280c 	.word	0x0804280c
 8018c48:	08042a78 	.word	0x08042a78
 8018c4c:	08029a64 	.word	0x08029a64
 8018c50:	08042a68 	.word	0x08042a68
 8018c54:	08042a50 	.word	0x08042a50

08018c58 <lwip_htons>:
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
  return PP_HTONS(n);
 8018c58:	ba40      	rev16	r0, r0
}
 8018c5a:	b280      	uxth	r0, r0
 8018c5c:	4770      	bx	lr
 8018c5e:	bf00      	nop

08018c60 <lwip_htonl>:
 */
u32_t
lwip_htonl(u32_t n)
{
  return PP_HTONL(n);
}
 8018c60:	ba00      	rev	r0, r0
 8018c62:	4770      	bx	lr

08018c64 <lwip_strnstr>:
 * lwIP default implementation for strnstr() non-standard function.
 * This can be \#defined to strnstr() depending on your platform port.
 */
char *
lwip_strnstr(const char *buffer, const char *token, size_t n)
{
 8018c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018c68:	4604      	mov	r4, r0
  const char *p;
  size_t tokenlen = strlen(token);
 8018c6a:	4608      	mov	r0, r1
{
 8018c6c:	4688      	mov	r8, r1
 8018c6e:	4616      	mov	r6, r2
  size_t tokenlen = strlen(token);
 8018c70:	f7e7 faf0 	bl	8000254 <strlen>
  if (tokenlen == 0) {
 8018c74:	b1c0      	cbz	r0, 8018ca8 <lwip_strnstr+0x44>
    return LWIP_CONST_CAST(char *, buffer);
  }
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018c76:	4605      	mov	r5, r0
 8018c78:	7820      	ldrb	r0, [r4, #0]
 8018c7a:	b1b0      	cbz	r0, 8018caa <lwip_strnstr+0x46>
 8018c7c:	4426      	add	r6, r4
 8018c7e:	1962      	adds	r2, r4, r5
 8018c80:	4296      	cmp	r6, r2
 8018c82:	d314      	bcc.n	8018cae <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018c84:	f898 7000 	ldrb.w	r7, [r8]
 8018c88:	e005      	b.n	8018c96 <lwip_strnstr+0x32>
  for (p = buffer; *p && (p + tokenlen <= buffer + n); p++) {
 8018c8a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8018c8e:	1962      	adds	r2, r4, r5
 8018c90:	b158      	cbz	r0, 8018caa <lwip_strnstr+0x46>
 8018c92:	4296      	cmp	r6, r2
 8018c94:	d30b      	bcc.n	8018cae <lwip_strnstr+0x4a>
    if ((*p == *token) && (strncmp(p, token, tokenlen) == 0)) {
 8018c96:	4287      	cmp	r7, r0
 8018c98:	d1f7      	bne.n	8018c8a <lwip_strnstr+0x26>
 8018c9a:	4620      	mov	r0, r4
 8018c9c:	462a      	mov	r2, r5
 8018c9e:	4641      	mov	r1, r8
 8018ca0:	f00d f8ac 	bl	8025dfc <strncmp>
 8018ca4:	2800      	cmp	r0, #0
 8018ca6:	d1f0      	bne.n	8018c8a <lwip_strnstr+0x26>
 8018ca8:	4620      	mov	r0, r4
      return LWIP_CONST_CAST(char *, p);
    }
  }
  return NULL;
}
 8018caa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return NULL;
 8018cae:	2000      	movs	r0, #0
}
 8018cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018cb4 <lwip_stricmp>:
lwip_stricmp(const char *str1, const char *str2)
{
  char c1, c2;

  do {
    c1 = *str1++;
 8018cb4:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018cb8:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8018cbc:	4293      	cmp	r3, r2
 8018cbe:	d01c      	beq.n	8018cfa <lwip_stricmp+0x46>
 8018cc0:	f043 0c20 	orr.w	ip, r3, #32
{
 8018cc4:	b500      	push	{lr}
 8018cc6:	f042 0e20 	orr.w	lr, r2, #32
 8018cca:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018cce:	2a19      	cmp	r2, #25
 8018cd0:	d810      	bhi.n	8018cf4 <lwip_stricmp+0x40>
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8018cd2:	45f4      	cmp	ip, lr
 8018cd4:	d10e      	bne.n	8018cf4 <lwip_stricmp+0x40>
      } else {
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
  } while (c1 != 0);
 8018cd6:	b1a3      	cbz	r3, 8018d02 <lwip_stricmp+0x4e>
    c1 = *str1++;
 8018cd8:	f810 3b01 	ldrb.w	r3, [r0], #1
    c2 = *str2++;
 8018cdc:	f811 2b01 	ldrb.w	r2, [r1], #1
    if (c1 != c2) {
 8018ce0:	4293      	cmp	r3, r2
 8018ce2:	d0f8      	beq.n	8018cd6 <lwip_stricmp+0x22>
 8018ce4:	f043 0c20 	orr.w	ip, r3, #32
 8018ce8:	f042 0e20 	orr.w	lr, r2, #32
 8018cec:	f1ac 0261 	sub.w	r2, ip, #97	; 0x61
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018cf0:	2a19      	cmp	r2, #25
 8018cf2:	d9ee      	bls.n	8018cd2 <lwip_stricmp+0x1e>
        return 1;
 8018cf4:	2001      	movs	r0, #1
  return 0;
}
 8018cf6:	f85d fb04 	ldr.w	pc, [sp], #4
  } while (c1 != 0);
 8018cfa:	2b00      	cmp	r3, #0
 8018cfc:	d1da      	bne.n	8018cb4 <lwip_stricmp>
  return 0;
 8018cfe:	4618      	mov	r0, r3
}
 8018d00:	4770      	bx	lr
  return 0;
 8018d02:	4618      	mov	r0, r3
}
 8018d04:	f85d fb04 	ldr.w	pc, [sp], #4

08018d08 <lwip_strnicmp>:
 * lwIP default implementation for strnicmp() non-standard function.
 * This can be \#defined to strnicmp() depending on your platform port.
 */
int
lwip_strnicmp(const char *str1, const char *str2, size_t len)
{
 8018d08:	4684      	mov	ip, r0
 8018d0a:	b570      	push	{r4, r5, r6, lr}
 8018d0c:	e004      	b.n	8018d18 <lwip_strnicmp+0x10>
      char c1_upc = c1 | 0x20;
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
        /* characters are not equal an one is in the alphabet range:
        downcase both chars and check again */
        char c2_upc = c2 | 0x20;
        if (c1_upc != c2_upc) {
 8018d0e:	42b4      	cmp	r4, r6
 8018d10:	d113      	bne.n	8018d3a <lwip_strnicmp+0x32>
        /* characters are not equal but none is in the alphabet range */
        return 1;
      }
    }
    len--;
  } while ((len != 0) && (c1 != 0));
 8018d12:	42e8      	cmn	r0, r5
 8018d14:	d013      	beq.n	8018d3e <lwip_strnicmp+0x36>
 8018d16:	b193      	cbz	r3, 8018d3e <lwip_strnicmp+0x36>
    c1 = *str1++;
 8018d18:	f81c 3b01 	ldrb.w	r3, [ip], #1
    c2 = *str2++;
 8018d1c:	f811 eb01 	ldrb.w	lr, [r1], #1
      char c1_upc = c1 | 0x20;
 8018d20:	f043 0420 	orr.w	r4, r3, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018d24:	eba2 050c 	sub.w	r5, r2, ip
    if (c1 != c2) {
 8018d28:	4573      	cmp	r3, lr
        if (c1_upc != c2_upc) {
 8018d2a:	f04e 0620 	orr.w	r6, lr, #32
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018d2e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
    if (c1 != c2) {
 8018d32:	d0ee      	beq.n	8018d12 <lwip_strnicmp+0xa>
      if ((c1_upc >= 'a') && (c1_upc <= 'z')) {
 8018d34:	f1be 0f19 	cmp.w	lr, #25
 8018d38:	d9e9      	bls.n	8018d0e <lwip_strnicmp+0x6>
        return 1;
 8018d3a:	2001      	movs	r0, #1
  return 0;
}
 8018d3c:	bd70      	pop	{r4, r5, r6, pc}
  return 0;
 8018d3e:	2000      	movs	r0, #0
}
 8018d40:	bd70      	pop	{r4, r5, r6, pc}
 8018d42:	bf00      	nop

08018d44 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8018d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d48:	4605      	mov	r5, r0
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018d4a:	4f24      	ldr	r7, [pc, #144]	; (8018ddc <dns_call_found+0x98>)
 8018d4c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8018d50:	4c23      	ldr	r4, [pc, #140]	; (8018de0 <dns_call_found+0x9c>)
{
 8018d52:	468a      	mov	sl, r1
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018d54:	012e      	lsls	r6, r5, #4
 8018d56:	eb07 1000 	add.w	r0, r7, r0, lsl #4
 8018d5a:	f104 0930 	add.w	r9, r4, #48	; 0x30
      /* flush this entry */
      dns_requests[i].found = NULL;
 8018d5e:	f04f 0b00 	mov.w	fp, #0
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018d62:	f100 0810 	add.w	r8, r0, #16
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8018d66:	6823      	ldr	r3, [r4, #0]
 8018d68:	b143      	cbz	r3, 8018d7c <dns_call_found+0x38>
 8018d6a:	7a22      	ldrb	r2, [r4, #8]
 8018d6c:	42aa      	cmp	r2, r5
 8018d6e:	d105      	bne.n	8018d7c <dns_call_found+0x38>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8018d70:	6862      	ldr	r2, [r4, #4]
 8018d72:	4651      	mov	r1, sl
 8018d74:	4640      	mov	r0, r8
 8018d76:	4798      	blx	r3
      dns_requests[i].found = NULL;
 8018d78:	f8c4 b000 	str.w	fp, [r4]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018d7c:	340c      	adds	r4, #12
 8018d7e:	454c      	cmp	r4, r9
 8018d80:	d1f1      	bne.n	8018d66 <dns_call_found+0x22>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
    if (i == idx) {
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018d82:	1973      	adds	r3, r6, r5
 8018d84:	2400      	movs	r4, #0
 8018d86:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8018d8a:	4f14      	ldr	r7, [pc, #80]	; (8018ddc <dns_call_found+0x98>)
 8018d8c:	7bd9      	ldrb	r1, [r3, #15]
 8018d8e:	463a      	mov	r2, r7
    if (i == idx) {
 8018d90:	b2e3      	uxtb	r3, r4
 8018d92:	3401      	adds	r4, #1
 8018d94:	429d      	cmp	r5, r3
 8018d96:	d002      	beq.n	8018d9e <dns_call_found+0x5a>
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8018d98:	7a93      	ldrb	r3, [r2, #10]
 8018d9a:	2b02      	cmp	r3, #2
 8018d9c:	d015      	beq.n	8018dca <dns_call_found+0x86>
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8018d9e:	2c04      	cmp	r4, #4
 8018da0:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8018da4:	d1f4      	bne.n	8018d90 <dns_call_found+0x4c>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
        break;
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018da6:	2903      	cmp	r1, #3
 8018da8:	d80d      	bhi.n	8018dc6 <dns_call_found+0x82>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018daa:	4435      	add	r5, r6
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018dac:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8018de4 <dns_call_found+0xa0>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018db0:	eb07 1705 	add.w	r7, r7, r5, lsl #4
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8018db4:	f858 0021 	ldr.w	r0, [r8, r1, lsl #2]
 8018db8:	f007 f860 	bl	801fe7c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018dbc:	2200      	movs	r2, #0
 8018dbe:	7bfb      	ldrb	r3, [r7, #15]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018dc0:	73fc      	strb	r4, [r7, #15]
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8018dc2:	f848 2023 	str.w	r2, [r8, r3, lsl #2]
  }
#endif
}
 8018dc6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8018dca:	7bd3      	ldrb	r3, [r2, #15]
 8018dcc:	428b      	cmp	r3, r1
 8018dce:	d1e6      	bne.n	8018d9e <dns_call_found+0x5a>
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8018dd0:	4435      	add	r5, r6
 8018dd2:	2304      	movs	r3, #4
 8018dd4:	eb07 1705 	add.w	r7, r7, r5, lsl #4
 8018dd8:	73fb      	strb	r3, [r7, #15]
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8018dda:	e7f4      	b.n	8018dc6 <dns_call_found+0x82>
 8018ddc:	2001edb0 	.word	0x2001edb0
 8018de0:	2001ed74 	.word	0x2001ed74
 8018de4:	2001ed64 	.word	0x2001ed64

08018de8 <dns_send.isra.0>:
dns_send(u8_t idx)
 8018de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018dec:	0103      	lsls	r3, r0, #4
dns_send(u8_t idx)
 8018dee:	b087      	sub	sp, #28
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018df0:	eb00 1400 	add.w	r4, r0, r0, lsl #4
dns_send(u8_t idx)
 8018df4:	4681      	mov	r9, r0
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8018df6:	9301      	str	r3, [sp, #4]
 8018df8:	4b56      	ldr	r3, [pc, #344]	; (8018f54 <dns_send.isra.0+0x16c>)
 8018dfa:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8018dfe:	7ae3      	ldrb	r3, [r4, #11]
 8018e00:	2b01      	cmp	r3, #1
 8018e02:	d907      	bls.n	8018e14 <dns_send.isra.0+0x2c>
 8018e04:	4b54      	ldr	r3, [pc, #336]	; (8018f58 <dns_send.isra.0+0x170>)
 8018e06:	f240 22fa 	movw	r2, #762	; 0x2fa
 8018e0a:	4954      	ldr	r1, [pc, #336]	; (8018f5c <dns_send.isra.0+0x174>)
 8018e0c:	4854      	ldr	r0, [pc, #336]	; (8018f60 <dns_send.isra.0+0x178>)
 8018e0e:	f00c f821 	bl	8024e54 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 8018e12:	7ae3      	ldrb	r3, [r4, #11]
 8018e14:	4a53      	ldr	r2, [pc, #332]	; (8018f64 <dns_send.isra.0+0x17c>)
 8018e16:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8018e1a:	2c00      	cmp	r4, #0
 8018e1c:	f000 808b 	beq.w	8018f36 <dns_send.isra.0+0x14e>
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 8018e20:	9b01      	ldr	r3, [sp, #4]
 8018e22:	4e4c      	ldr	r6, [pc, #304]	; (8018f54 <dns_send.isra.0+0x16c>)
 8018e24:	eb03 0409 	add.w	r4, r3, r9
 8018e28:	0124      	lsls	r4, r4, #4
 8018e2a:	f104 0510 	add.w	r5, r4, #16
 8018e2e:	4435      	add	r5, r6
 8018e30:	4628      	mov	r0, r5
 8018e32:	f7e7 fa0f 	bl	8000254 <strlen>
 8018e36:	3012      	adds	r0, #18
 8018e38:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e3c:	b281      	uxth	r1, r0
 8018e3e:	2036      	movs	r0, #54	; 0x36
 8018e40:	f001 fd74 	bl	801a92c <pbuf_alloc>
  if (p != NULL) {
 8018e44:	4680      	mov	r8, r0
 8018e46:	2800      	cmp	r0, #0
 8018e48:	d06d      	beq.n	8018f26 <dns_send.isra.0+0x13e>
    hdr.id = lwip_htons(entry->txid);
 8018e4a:	4434      	add	r4, r6
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8018e4c:	2300      	movs	r3, #0
    query_idx = SIZEOF_DNS_HDR;
 8018e4e:	260c      	movs	r6, #12
    --hostname;
 8018e50:	3d01      	subs	r5, #1
    hdr.id = lwip_htons(entry->txid);
 8018e52:	8920      	ldrh	r0, [r4, #8]
      if (query_idx + n + 1 > 0xFFFF) {
 8018e54:	f64f 7afe 	movw	sl, #65534	; 0xfffe
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8018e58:	9305      	str	r3, [sp, #20]
 8018e5a:	e9cd 3303 	strd	r3, r3, [sp, #12]
    hdr.id = lwip_htons(entry->txid);
 8018e5e:	f7ff fefb 	bl	8018c58 <lwip_htons>
    hdr.flags1 = DNS_FLAG1_RD;
 8018e62:	2301      	movs	r3, #1
    hdr.id = lwip_htons(entry->txid);
 8018e64:	f8ad 000c 	strh.w	r0, [sp, #12]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018e68:	a903      	add	r1, sp, #12
    hdr.flags1 = DNS_FLAG1_RD;
 8018e6a:	f88d 300e 	strb.w	r3, [sp, #14]
    hdr.numquestions = PP_HTONS(1);
 8018e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018e72:	4632      	mov	r2, r6
 8018e74:	4640      	mov	r0, r8
    hdr.numquestions = PP_HTONS(1);
 8018e76:	f8ad 3010 	strh.w	r3, [sp, #16]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8018e7a:	f002 f81d 	bl	801aeb8 <pbuf_take>
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018e7e:	786b      	ldrb	r3, [r5, #1]
      ++hostname;
 8018e80:	1c6f      	adds	r7, r5, #1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018e82:	2b2e      	cmp	r3, #46	; 0x2e
 8018e84:	d052      	beq.n	8018f2c <dns_send.isra.0+0x144>
 8018e86:	2b00      	cmp	r3, #0
 8018e88:	d050      	beq.n	8018f2c <dns_send.isra.0+0x144>
      ++hostname;
 8018e8a:	463d      	mov	r5, r7
 8018e8c:	f1c7 0101 	rsb	r1, r7, #1
        ++n;
 8018e90:	186c      	adds	r4, r5, r1
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018e92:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8018e96:	2b2e      	cmp	r3, #46	; 0x2e
 8018e98:	b2e4      	uxtb	r4, r4
 8018e9a:	d001      	beq.n	8018ea0 <dns_send.isra.0+0xb8>
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d1f7      	bne.n	8018e90 <dns_send.isra.0+0xa8>
      copy_len = (u16_t)(hostname - hostname_part);
 8018ea0:	eba5 0b07 	sub.w	fp, r5, r7
      if (query_idx + n + 1 > 0xFFFF) {
 8018ea4:	4623      	mov	r3, r4
      copy_len = (u16_t)(hostname - hostname_part);
 8018ea6:	fa1f fb8b 	uxth.w	fp, fp
      if (query_idx + n + 1 > 0xFFFF) {
 8018eaa:	4433      	add	r3, r6
 8018eac:	4553      	cmp	r3, sl
 8018eae:	dc37      	bgt.n	8018f20 <dns_send.isra.0+0x138>
      pbuf_put_at(p, query_idx, n);
 8018eb0:	4622      	mov	r2, r4
 8018eb2:	4631      	mov	r1, r6
 8018eb4:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018eb6:	4434      	add	r4, r6
      pbuf_put_at(p, query_idx, n);
 8018eb8:	f002 f8e4 	bl	801b084 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018ebc:	1c73      	adds	r3, r6, #1
      query_idx = (u16_t)(query_idx + n + 1);
 8018ebe:	b2a4      	uxth	r4, r4
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018ec0:	465a      	mov	r2, fp
 8018ec2:	4639      	mov	r1, r7
 8018ec4:	b29b      	uxth	r3, r3
 8018ec6:	4640      	mov	r0, r8
      query_idx = (u16_t)(query_idx + n + 1);
 8018ec8:	1c66      	adds	r6, r4, #1
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8018eca:	f002 f85b 	bl	801af84 <pbuf_take_at>
    } while (*hostname != 0);
 8018ece:	782a      	ldrb	r2, [r5, #0]
      query_idx = (u16_t)(query_idx + n + 1);
 8018ed0:	b2b6      	uxth	r6, r6
    } while (*hostname != 0);
 8018ed2:	2a00      	cmp	r2, #0
 8018ed4:	d1d3      	bne.n	8018e7e <dns_send.isra.0+0x96>
    pbuf_put_at(p, query_idx, 0);
 8018ed6:	4631      	mov	r1, r6
 8018ed8:	4640      	mov	r0, r8
 8018eda:	f002 f8d3 	bl	801b084 <pbuf_put_at>
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018ede:	f44f 7280 	mov.w	r2, #256	; 0x100
    query_idx++;
 8018ee2:	1ca3      	adds	r3, r4, #2
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018ee4:	a902      	add	r1, sp, #8
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8018ee6:	f8ad 2008 	strh.w	r2, [sp, #8]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018eea:	4640      	mov	r0, r8
 8018eec:	b29b      	uxth	r3, r3
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8018eee:	f8ad 200a 	strh.w	r2, [sp, #10]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8018ef2:	2204      	movs	r2, #4
 8018ef4:	f002 f846 	bl	801af84 <pbuf_take_at>
      dst = &dns_servers[entry->server_idx];
 8018ef8:	9b01      	ldr	r3, [sp, #4]
 8018efa:	4a16      	ldr	r2, [pc, #88]	; (8018f54 <dns_send.isra.0+0x16c>)
 8018efc:	444b      	add	r3, r9
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018efe:	4919      	ldr	r1, [pc, #100]	; (8018f64 <dns_send.isra.0+0x17c>)
      dst = &dns_servers[entry->server_idx];
 8018f00:	4699      	mov	r9, r3
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018f02:	4b19      	ldr	r3, [pc, #100]	; (8018f68 <dns_send.isra.0+0x180>)
      dst = &dns_servers[entry->server_idx];
 8018f04:	eb02 1b09 	add.w	fp, r2, r9, lsl #4
 8018f08:	f89b 200b 	ldrb.w	r2, [fp, #11]
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8018f0c:	f89b 000f 	ldrb.w	r0, [fp, #15]
 8018f10:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018f14:	4641      	mov	r1, r8
 8018f16:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8018f1a:	2335      	movs	r3, #53	; 0x35
 8018f1c:	f006 ff0c 	bl	801fd38 <udp_sendto>
    pbuf_free(p);
 8018f20:	4640      	mov	r0, r8
 8018f22:	f001 fed5 	bl	801acd0 <pbuf_free>
}
 8018f26:	b007      	add	sp, #28
 8018f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018f2c:	2300      	movs	r3, #0
      ++hostname;
 8018f2e:	463d      	mov	r5, r7
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8018f30:	469b      	mov	fp, r3
 8018f32:	461c      	mov	r4, r3
 8018f34:	e7b9      	b.n	8018eaa <dns_send.isra.0+0xc2>
    dns_call_found(idx, NULL);
 8018f36:	4648      	mov	r0, r9
 8018f38:	4621      	mov	r1, r4
 8018f3a:	f7ff ff03 	bl	8018d44 <dns_call_found>
    entry->state = DNS_STATE_UNUSED;
 8018f3e:	9b01      	ldr	r3, [sp, #4]
 8018f40:	444b      	add	r3, r9
 8018f42:	4699      	mov	r9, r3
 8018f44:	4b03      	ldr	r3, [pc, #12]	; (8018f54 <dns_send.isra.0+0x16c>)
 8018f46:	eb03 1b09 	add.w	fp, r3, r9, lsl #4
 8018f4a:	f88b 400a 	strb.w	r4, [fp, #10]
}
 8018f4e:	b007      	add	sp, #28
 8018f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f54:	2001edb0 	.word	0x2001edb0
 8018f58:	08042b50 	.word	0x08042b50
 8018f5c:	08042b80 	.word	0x08042b80
 8018f60:	08029a64 	.word	0x08029a64
 8018f64:	2001eda8 	.word	0x2001eda8
 8018f68:	2001ed64 	.word	0x2001ed64

08018f6c <dns_check_entry>:
dns_check_entry(u8_t i)
{
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018f6c:	2803      	cmp	r0, #3
{
 8018f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f72:	4604      	mov	r4, r0
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8018f74:	d846      	bhi.n	8019004 <dns_check_entry+0x98>

  switch (entry->state) {
 8018f76:	4e3a      	ldr	r6, [pc, #232]	; (8019060 <dns_check_entry+0xf4>)
 8018f78:	eb04 1304 	add.w	r3, r4, r4, lsl #4
 8018f7c:	0125      	lsls	r5, r4, #4
 8018f7e:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8018f82:	7a9b      	ldrb	r3, [r3, #10]
 8018f84:	2b03      	cmp	r3, #3
 8018f86:	d861      	bhi.n	801904c <dns_check_entry+0xe0>
 8018f88:	e8df f003 	tbb	[pc, r3]
 8018f8c:	02270e0c 	.word	0x02270e0c
        }
      }
      break;
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8018f90:	192b      	adds	r3, r5, r4
 8018f92:	011b      	lsls	r3, r3, #4
 8018f94:	58f2      	ldr	r2, [r6, r3]
 8018f96:	2a00      	cmp	r2, #0
 8018f98:	d140      	bne.n	801901c <dns_check_entry+0xb0>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8018f9a:	442c      	add	r4, r5
 8018f9c:	2300      	movs	r3, #0
 8018f9e:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8018fa2:	72b3      	strb	r3, [r6, #10]
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
      break;
  }
}
 8018fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018fa8:	4f2e      	ldr	r7, [pc, #184]	; (8019064 <dns_check_entry+0xf8>)
  txid = (u16_t)DNS_RAND_TXID();
 8018faa:	f00b fff7 	bl	8024f9c <rand>
 8018fae:	4b2c      	ldr	r3, [pc, #176]	; (8019060 <dns_check_entry+0xf4>)
 8018fb0:	b281      	uxth	r1, r0
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8018fb2:	7a9a      	ldrb	r2, [r3, #10]
 8018fb4:	2a02      	cmp	r2, #2
 8018fb6:	d02d      	beq.n	8019014 <dns_check_entry+0xa8>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8018fb8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8018fbc:	429f      	cmp	r7, r3
 8018fbe:	d1f8      	bne.n	8018fb2 <dns_check_entry+0x46>
      entry->txid = dns_create_txid();
 8018fc0:	4425      	add	r5, r4
      entry->state = DNS_STATE_ASKING;
 8018fc2:	2202      	movs	r2, #2
      entry->tmr = 1;
 8018fc4:	2301      	movs	r3, #1
      err = dns_send(i);
 8018fc6:	4620      	mov	r0, r4
      entry->txid = dns_create_txid();
 8018fc8:	eb06 1605 	add.w	r6, r6, r5, lsl #4
 8018fcc:	8131      	strh	r1, [r6, #8]
      entry->state = DNS_STATE_ASKING;
 8018fce:	8172      	strh	r2, [r6, #10]
      entry->tmr = 1;
 8018fd0:	81b3      	strh	r3, [r6, #12]
}
 8018fd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      err = dns_send(i);
 8018fd6:	f7ff bf07 	b.w	8018de8 <dns_send.isra.0>
      if (--entry->tmr == 0) {
 8018fda:	192a      	adds	r2, r5, r4
 8018fdc:	eb06 1202 	add.w	r2, r6, r2, lsl #4
 8018fe0:	7b13      	ldrb	r3, [r2, #12]
 8018fe2:	3b01      	subs	r3, #1
 8018fe4:	b2db      	uxtb	r3, r3
 8018fe6:	7313      	strb	r3, [r2, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d1db      	bne.n	8018fa4 <dns_check_entry+0x38>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8018fec:	7b53      	ldrb	r3, [r2, #13]
 8018fee:	3301      	adds	r3, #1
 8018ff0:	b2db      	uxtb	r3, r3
 8018ff2:	2b04      	cmp	r3, #4
 8018ff4:	7353      	strb	r3, [r2, #13]
 8018ff6:	d016      	beq.n	8019026 <dns_check_entry+0xba>
          entry->tmr = entry->retries;
 8018ff8:	7313      	strb	r3, [r2, #12]
        err = dns_send(i);
 8018ffa:	4620      	mov	r0, r4
}
 8018ffc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        err = dns_send(i);
 8019000:	f7ff bef2 	b.w	8018de8 <dns_send.isra.0>
  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8019004:	4b18      	ldr	r3, [pc, #96]	; (8019068 <dns_check_entry+0xfc>)
 8019006:	f240 421c 	movw	r2, #1052	; 0x41c
 801900a:	4918      	ldr	r1, [pc, #96]	; (801906c <dns_check_entry+0x100>)
 801900c:	4818      	ldr	r0, [pc, #96]	; (8019070 <dns_check_entry+0x104>)
 801900e:	f00b ff21 	bl	8024e54 <iprintf>
 8019012:	e7b0      	b.n	8018f76 <dns_check_entry+0xa>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019014:	891a      	ldrh	r2, [r3, #8]
 8019016:	428a      	cmp	r2, r1
 8019018:	d1ce      	bne.n	8018fb8 <dns_check_entry+0x4c>
 801901a:	e7c6      	b.n	8018faa <dns_check_entry+0x3e>
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 801901c:	3a01      	subs	r2, #1
 801901e:	50f2      	str	r2, [r6, r3]
 8019020:	2a00      	cmp	r2, #0
 8019022:	d0ba      	beq.n	8018f9a <dns_check_entry+0x2e>
 8019024:	e7be      	b.n	8018fa4 <dns_check_entry+0x38>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019026:	7ad3      	ldrb	r3, [r2, #11]
 8019028:	b913      	cbnz	r3, 8019030 <dns_check_entry+0xc4>
 801902a:	4b12      	ldr	r3, [pc, #72]	; (8019074 <dns_check_entry+0x108>)
 801902c:	685b      	ldr	r3, [r3, #4]
 801902e:	b94b      	cbnz	r3, 8019044 <dns_check_entry+0xd8>
            dns_call_found(i, NULL);
 8019030:	4620      	mov	r0, r4
            entry->state = DNS_STATE_UNUSED;
 8019032:	442c      	add	r4, r5
            dns_call_found(i, NULL);
 8019034:	2100      	movs	r1, #0
 8019036:	f7ff fe85 	bl	8018d44 <dns_call_found>
            entry->state = DNS_STATE_UNUSED;
 801903a:	2300      	movs	r3, #0
 801903c:	eb06 1604 	add.w	r6, r6, r4, lsl #4
 8019040:	72b3      	strb	r3, [r6, #10]
            break;
 8019042:	e7af      	b.n	8018fa4 <dns_check_entry+0x38>
            entry->server_idx++;
 8019044:	2301      	movs	r3, #1
 8019046:	72d3      	strb	r3, [r2, #11]
            entry->tmr = 1;
 8019048:	8193      	strh	r3, [r2, #12]
 801904a:	e7d6      	b.n	8018ffa <dns_check_entry+0x8e>
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801904c:	4b06      	ldr	r3, [pc, #24]	; (8019068 <dns_check_entry+0xfc>)
 801904e:	f240 425b 	movw	r2, #1115	; 0x45b
 8019052:	4909      	ldr	r1, [pc, #36]	; (8019078 <dns_check_entry+0x10c>)
 8019054:	4806      	ldr	r0, [pc, #24]	; (8019070 <dns_check_entry+0x104>)
}
 8019056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 801905a:	f00b befb 	b.w	8024e54 <iprintf>
 801905e:	bf00      	nop
 8019060:	2001edb0 	.word	0x2001edb0
 8019064:	2001f1f0 	.word	0x2001f1f0
 8019068:	08042b50 	.word	0x08042b50
 801906c:	08042b98 	.word	0x08042b98
 8019070:	08029a64 	.word	0x08029a64
 8019074:	2001eda8 	.word	0x2001eda8
 8019078:	08042bb4 	.word	0x08042bb4

0801907c <dns_recv>:
/**
 * Receive input function for DNS response packets arriving for the dns UDP pcb.
 */
static void
dns_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801907c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019080:	4614      	mov	r4, r2
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(port);

  /* is the dns message big enough ? */
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8019082:	8912      	ldrh	r2, [r2, #8]
{
 8019084:	b08d      	sub	sp, #52	; 0x34
  if (p->tot_len < (SIZEOF_DNS_HDR + SIZEOF_DNS_QUERY)) {
 8019086:	2a0f      	cmp	r2, #15
 8019088:	d805      	bhi.n	8019096 <dns_recv+0x1a>
    }
  }

ignore_packet:
  /* deallocate memory and return */
  pbuf_free(p);
 801908a:	4620      	mov	r0, r4
 801908c:	f001 fe20 	bl	801acd0 <pbuf_free>
  return;
}
 8019090:	b00d      	add	sp, #52	; 0x34
 8019092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pbuf_copy_partial(p, &hdr, SIZEOF_DNS_HDR, 0) == SIZEOF_DNS_HDR) {
 8019096:	4699      	mov	r9, r3
 8019098:	220c      	movs	r2, #12
 801909a:	2300      	movs	r3, #0
 801909c:	a906      	add	r1, sp, #24
 801909e:	4620      	mov	r0, r4
 80190a0:	f001 feba 	bl	801ae18 <pbuf_copy_partial>
 80190a4:	280c      	cmp	r0, #12
 80190a6:	4605      	mov	r5, r0
 80190a8:	d1ef      	bne.n	801908a <dns_recv+0xe>
    txid = lwip_htons(hdr.id);
 80190aa:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80193a0 <dns_recv+0x324>
 80190ae:	2600      	movs	r6, #0
 80190b0:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 80190b4:	f7ff fdd0 	bl	8018c58 <lwip_htons>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80190b8:	4643      	mov	r3, r8
 80190ba:	b2f7      	uxtb	r7, r6
      if ((entry->state == DNS_STATE_ASKING) &&
 80190bc:	7a9a      	ldrb	r2, [r3, #10]
 80190be:	2a02      	cmp	r2, #2
 80190c0:	d008      	beq.n	80190d4 <dns_recv+0x58>
    for (i = 0; i < DNS_TABLE_SIZE; i++) {
 80190c2:	3601      	adds	r6, #1
 80190c4:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80190c8:	2e04      	cmp	r6, #4
 80190ca:	d0de      	beq.n	801908a <dns_recv+0xe>
      if ((entry->state == DNS_STATE_ASKING) &&
 80190cc:	7a9a      	ldrb	r2, [r3, #10]
 80190ce:	b2f7      	uxtb	r7, r6
 80190d0:	2a02      	cmp	r2, #2
 80190d2:	d1f6      	bne.n	80190c2 <dns_recv+0x46>
 80190d4:	891a      	ldrh	r2, [r3, #8]
 80190d6:	4282      	cmp	r2, r0
 80190d8:	d1f3      	bne.n	80190c2 <dns_recv+0x46>
        nquestions = lwip_htons(hdr.numquestions);
 80190da:	f8bd 001c 	ldrh.w	r0, [sp, #28]
 80190de:	f7ff fdbb 	bl	8018c58 <lwip_htons>
 80190e2:	4682      	mov	sl, r0
        nanswers   = lwip_htons(hdr.numanswers);
 80190e4:	f8bd 001e 	ldrh.w	r0, [sp, #30]
 80190e8:	f7ff fdb6 	bl	8018c58 <lwip_htons>
        if ((hdr.flags1 & DNS_FLAG1_RESPONSE) == 0) {
 80190ec:	f89d 301a 	ldrb.w	r3, [sp, #26]
        nanswers   = lwip_htons(hdr.numanswers);
 80190f0:	9000      	str	r0, [sp, #0]
        if (nquestions != 1) {
 80190f2:	09db      	lsrs	r3, r3, #7
 80190f4:	d0c9      	beq.n	801908a <dns_recv+0xe>
 80190f6:	f1ba 0f01 	cmp.w	sl, #1
 80190fa:	d1c6      	bne.n	801908a <dns_recv+0xe>
          if (!ip_addr_cmp(addr, &dns_servers[entry->server_idx])) {
 80190fc:	eb06 1306 	add.w	r3, r6, r6, lsl #4
 8019100:	49a5      	ldr	r1, [pc, #660]	; (8019398 <dns_recv+0x31c>)
 8019102:	f8d9 2000 	ldr.w	r2, [r9]
 8019106:	eb08 1303 	add.w	r3, r8, r3, lsl #4
 801910a:	7adb      	ldrb	r3, [r3, #11]
 801910c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8019110:	429a      	cmp	r2, r3
 8019112:	d1ba      	bne.n	801908a <dns_recv+0xe>
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019114:	f44f 7388 	mov.w	r3, #272	; 0x110
    if ((n < 0) || (response_offset == 0xFFFF)) {
 8019118:	f64f 7bff 	movw	fp, #65535	; 0xffff
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801911c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 80193a4 <dns_recv+0x328>
 8019120:	fb03 f306 	mul.w	r3, r3, r6
        res_idx = dns_compare_name(entry->name, p, SIZEOF_DNS_HDR);
 8019124:	f103 0210 	add.w	r2, r3, #16
 8019128:	9301      	str	r3, [sp, #4]
 801912a:	4442      	add	r2, r8
 801912c:	e9cd 7602 	strd	r7, r6, [sp, #8]
 8019130:	462e      	mov	r6, r5
 8019132:	4627      	mov	r7, r4
 8019134:	4615      	mov	r5, r2
    n = pbuf_try_get_at(p, response_offset);
 8019136:	4631      	mov	r1, r6
 8019138:	4638      	mov	r0, r7
 801913a:	f001 ff93 	bl	801b064 <pbuf_try_get_at>
    if ((n < 0) || (response_offset == 0xFFFF)) {
 801913e:	2800      	cmp	r0, #0
 8019140:	db2d      	blt.n	801919e <dns_recv+0x122>
 8019142:	455e      	cmp	r6, fp
 8019144:	d02b      	beq.n	801919e <dns_recv+0x122>
    if ((n & 0xc0) == 0xc0) {
 8019146:	f000 03c0 	and.w	r3, r0, #192	; 0xc0
    response_offset++;
 801914a:	1c71      	adds	r1, r6, #1
    if ((n & 0xc0) == 0xc0) {
 801914c:	2bc0      	cmp	r3, #192	; 0xc0
    response_offset++;
 801914e:	b28e      	uxth	r6, r1
    if ((n & 0xc0) == 0xc0) {
 8019150:	d025      	beq.n	801919e <dns_recv+0x122>
      while (n > 0) {
 8019152:	b330      	cbz	r0, 80191a2 <dns_recv+0x126>
 8019154:	46aa      	mov	sl, r5
 8019156:	182c      	adds	r4, r5, r0
 8019158:	e01b      	b.n	8019192 <dns_recv+0x116>
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801915a:	f81a 0b01 	ldrb.w	r0, [sl], #1
        response_offset++;
 801915e:	b2db      	uxtb	r3, r3
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019160:	f819 2000 	ldrb.w	r2, [r9, r0]
 8019164:	4601      	mov	r1, r0
        ++query;
 8019166:	4655      	mov	r5, sl
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 8019168:	f002 0203 	and.w	r2, r2, #3
 801916c:	2a01      	cmp	r2, #1
 801916e:	f819 2003 	ldrb.w	r2, [r9, r3]
 8019172:	f002 0203 	and.w	r2, r2, #3
 8019176:	bf08      	it	eq
 8019178:	f100 0120 	addeq.w	r1, r0, #32
        response_offset++;
 801917c:	1c70      	adds	r0, r6, #1
        if (lwip_tolower((*query)) != lwip_tolower((u8_t)c)) {
 801917e:	2a01      	cmp	r2, #1
 8019180:	bf08      	it	eq
 8019182:	3320      	addeq	r3, #32
        if (response_offset == 0xFFFF) {
 8019184:	455e      	cmp	r6, fp
        response_offset++;
 8019186:	b286      	uxth	r6, r0
        if (response_offset == 0xFFFF) {
 8019188:	d009      	beq.n	801919e <dns_recv+0x122>
 801918a:	4299      	cmp	r1, r3
 801918c:	d107      	bne.n	801919e <dns_recv+0x122>
      while (n > 0) {
 801918e:	4554      	cmp	r4, sl
 8019190:	d007      	beq.n	80191a2 <dns_recv+0x126>
        int c = pbuf_try_get_at(p, response_offset);
 8019192:	4631      	mov	r1, r6
 8019194:	4638      	mov	r0, r7
 8019196:	f001 ff65 	bl	801b064 <pbuf_try_get_at>
        if (c < 0) {
 801919a:	1e03      	subs	r3, r0, #0
 801919c:	dadd      	bge.n	801915a <dns_recv+0xde>
 801919e:	463c      	mov	r4, r7
 80191a0:	e773      	b.n	801908a <dns_recv+0xe>
    n = pbuf_try_get_at(p, response_offset);
 80191a2:	4631      	mov	r1, r6
 80191a4:	4638      	mov	r0, r7
 80191a6:	f001 ff5d 	bl	801b064 <pbuf_try_get_at>
    if (n < 0) {
 80191aa:	2800      	cmp	r0, #0
      ++query;
 80191ac:	f105 0501 	add.w	r5, r5, #1
    if (n < 0) {
 80191b0:	dbf5      	blt.n	801919e <dns_recv+0x122>
  } while (n != 0);
 80191b2:	d1c0      	bne.n	8019136 <dns_recv+0xba>
  if (response_offset == 0xFFFF) {
 80191b4:	4635      	mov	r5, r6
 80191b6:	f64f 79ff 	movw	r9, #65535	; 0xffff
 80191ba:	463c      	mov	r4, r7
 80191bc:	9e03      	ldr	r6, [sp, #12]
 80191be:	454d      	cmp	r5, r9
 80191c0:	9f02      	ldr	r7, [sp, #8]
 80191c2:	f43f af62 	beq.w	801908a <dns_recv+0xe>
  return (u16_t)(response_offset + 1);
 80191c6:	f105 0a01 	add.w	sl, r5, #1
 80191ca:	fa1f fa8a 	uxth.w	sl, sl
        if (res_idx == 0xFFFF) {
 80191ce:	45ca      	cmp	sl, r9
 80191d0:	f43f af5b 	beq.w	801908a <dns_recv+0xe>
        if (pbuf_copy_partial(p, &qry, SIZEOF_DNS_QUERY, res_idx) != SIZEOF_DNS_QUERY) {
 80191d4:	4653      	mov	r3, sl
 80191d6:	2204      	movs	r2, #4
 80191d8:	a904      	add	r1, sp, #16
 80191da:	4620      	mov	r0, r4
 80191dc:	f001 fe1c 	bl	801ae18 <pbuf_copy_partial>
 80191e0:	2804      	cmp	r0, #4
 80191e2:	f47f af52 	bne.w	801908a <dns_recv+0xe>
        if ((qry.cls != PP_HTONS(DNS_RRCLASS_IN)) ||
 80191e6:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80191ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191ee:	f47f af4c 	bne.w	801908a <dns_recv+0xe>
            (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype) && (qry.type != PP_HTONS(DNS_RRTYPE_AAAA))) ||
 80191f2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
        if (res_idx + SIZEOF_DNS_QUERY > 0xFFFF) {
 80191f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80191fa:	f47f af46 	bne.w	801908a <dns_recv+0xe>
 80191fe:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8019202:	459a      	cmp	sl, r3
 8019204:	f63f af41 	bhi.w	801908a <dns_recv+0xe>
        if (hdr.flags2 & DNS_FLAG2_ERR_MASK) {
 8019208:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801920c:	071b      	lsls	r3, r3, #28
 801920e:	d017      	beq.n	8019240 <dns_recv+0x1c4>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8019210:	f44f 7388 	mov.w	r3, #272	; 0x110
 8019214:	fb03 8306 	mla	r3, r3, r6, r8
 8019218:	7adb      	ldrb	r3, [r3, #11]
 801921a:	2b00      	cmp	r3, #0
 801921c:	f040 80ae 	bne.w	801937c <dns_recv+0x300>
 8019220:	4b5d      	ldr	r3, [pc, #372]	; (8019398 <dns_recv+0x31c>)
 8019222:	685b      	ldr	r3, [r3, #4]
 8019224:	2b00      	cmp	r3, #0
 8019226:	f000 80a9 	beq.w	801937c <dns_recv+0x300>
            entry->tmr     = 1;
 801922a:	f44f 7388 	mov.w	r3, #272	; 0x110
            dns_check_entry(i);
 801922e:	4638      	mov	r0, r7
            entry->tmr     = 1;
 8019230:	fb03 8606 	mla	r6, r3, r6, r8
 8019234:	f240 3301 	movw	r3, #769	; 0x301
 8019238:	81b3      	strh	r3, [r6, #12]
            dns_check_entry(i);
 801923a:	f7ff fe97 	bl	8018f6c <dns_check_entry>
            goto ignore_packet;
 801923e:	e724      	b.n	801908a <dns_recv+0xe>
        res_idx = (u16_t)(res_idx + SIZEOF_DNS_QUERY);
 8019240:	3505      	adds	r5, #5
 8019242:	f8dd a000 	ldr.w	sl, [sp]
 8019246:	b2ad      	uxth	r5, r5
          while ((nanswers > 0) && (res_idx < p->tot_len)) {
 8019248:	f1ba 0f00 	cmp.w	sl, #0
 801924c:	f000 8096 	beq.w	801937c <dns_recv+0x300>
 8019250:	8923      	ldrh	r3, [r4, #8]
 8019252:	42ab      	cmp	r3, r5
 8019254:	d80b      	bhi.n	801926e <dns_recv+0x1f2>
 8019256:	e091      	b.n	801937c <dns_recv+0x300>
      if (offset + n >= p->tot_len) {
 8019258:	8922      	ldrh	r2, [r4, #8]
 801925a:	4293      	cmp	r3, r2
 801925c:	f6bf af15 	bge.w	801908a <dns_recv+0xe>
    n = pbuf_try_get_at(p, offset);
 8019260:	4629      	mov	r1, r5
 8019262:	f001 feff 	bl	801b064 <pbuf_try_get_at>
    if (n < 0) {
 8019266:	2800      	cmp	r0, #0
 8019268:	f6ff af0f 	blt.w	801908a <dns_recv+0xe>
  } while (n != 0);
 801926c:	d017      	beq.n	801929e <dns_recv+0x222>
    n = pbuf_try_get_at(p, offset++);
 801926e:	4629      	mov	r1, r5
 8019270:	4620      	mov	r0, r4
 8019272:	f001 fef7 	bl	801b064 <pbuf_try_get_at>
 8019276:	f105 0b01 	add.w	fp, r5, #1
 801927a:	4603      	mov	r3, r0
    n = pbuf_try_get_at(p, offset);
 801927c:	4620      	mov	r0, r4
    n = pbuf_try_get_at(p, offset++);
 801927e:	fa1f fb8b 	uxth.w	fp, fp
    if ((n < 0) || (offset == 0)) {
 8019282:	2b00      	cmp	r3, #0
    if ((n & 0xc0) == 0xc0) {
 8019284:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
      if (offset + n >= p->tot_len) {
 8019288:	445b      	add	r3, fp
    if ((n < 0) || (offset == 0)) {
 801928a:	f6ff aefe 	blt.w	801908a <dns_recv+0xe>
      offset = (u16_t)(offset + n);
 801928e:	b29d      	uxth	r5, r3
    if ((n < 0) || (offset == 0)) {
 8019290:	f1bb 0f00 	cmp.w	fp, #0
 8019294:	f43f aef9 	beq.w	801908a <dns_recv+0xe>
    if ((n & 0xc0) == 0xc0) {
 8019298:	2ac0      	cmp	r2, #192	; 0xc0
 801929a:	d1dd      	bne.n	8019258 <dns_recv+0x1dc>
 801929c:	465d      	mov	r5, fp
  if (offset == 0xFFFF) {
 801929e:	454d      	cmp	r5, r9
 80192a0:	f43f aef3 	beq.w	801908a <dns_recv+0xe>
  return (u16_t)(offset + 1);
 80192a4:	f105 0b01 	add.w	fp, r5, #1
 80192a8:	fa1f fb8b 	uxth.w	fp, fp
            if (res_idx == 0xFFFF) {
 80192ac:	45cb      	cmp	fp, r9
 80192ae:	f43f aeec 	beq.w	801908a <dns_recv+0xe>
            if (pbuf_copy_partial(p, &ans, SIZEOF_DNS_ANSWER, res_idx) != SIZEOF_DNS_ANSWER) {
 80192b2:	465b      	mov	r3, fp
 80192b4:	220a      	movs	r2, #10
 80192b6:	a909      	add	r1, sp, #36	; 0x24
 80192b8:	4620      	mov	r0, r4
 80192ba:	f001 fdad 	bl	801ae18 <pbuf_copy_partial>
            if (res_idx + SIZEOF_DNS_ANSWER > 0xFFFF) {
 80192be:	280a      	cmp	r0, #10
 80192c0:	f47f aee3 	bne.w	801908a <dns_recv+0xe>
 80192c4:	f64f 73f5 	movw	r3, #65525	; 0xfff5
 80192c8:	459b      	cmp	fp, r3
 80192ca:	f63f aede 	bhi.w	801908a <dns_recv+0xe>
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80192ce:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 80192d2:	350b      	adds	r5, #11
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80192d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
            res_idx = (u16_t)(res_idx + SIZEOF_DNS_ANSWER);
 80192d8:	b2ad      	uxth	r5, r5
            if (ans.cls == PP_HTONS(DNS_RRCLASS_IN)) {
 80192da:	d013      	beq.n	8019304 <dns_recv+0x288>
 80192dc:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            if ((int)(res_idx + lwip_htons(ans.len)) > 0xFFFF) {
 80192e0:	f7ff fcba 	bl	8018c58 <lwip_htons>
 80192e4:	4428      	add	r0, r5
 80192e6:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 80192ea:	f6bf aece 	bge.w	801908a <dns_recv+0xe>
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80192ee:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
            --nanswers;
 80192f2:	f10a 3aff 	add.w	sl, sl, #4294967295
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 80192f6:	f7ff fcaf 	bl	8018c58 <lwip_htons>
 80192fa:	4405      	add	r5, r0
            --nanswers;
 80192fc:	fa1f fa8a 	uxth.w	sl, sl
            res_idx = (u16_t)(res_idx + lwip_htons(ans.len));
 8019300:	b2ad      	uxth	r5, r5
            --nanswers;
 8019302:	e7a1      	b.n	8019248 <dns_recv+0x1cc>
              if ((ans.type == PP_HTONS(DNS_RRTYPE_A)) && (ans.len == PP_HTONS(sizeof(ip4_addr_t)))) {
 8019304:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 8019308:	f8bd 002c 	ldrh.w	r0, [sp, #44]	; 0x2c
 801930c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019310:	d1e6      	bne.n	80192e0 <dns_recv+0x264>
 8019312:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8019316:	d1e3      	bne.n	80192e0 <dns_recv+0x264>
                  if (pbuf_copy_partial(p, &ip4addr, sizeof(ip4_addr_t), res_idx) != sizeof(ip4_addr_t)) {
 8019318:	462b      	mov	r3, r5
 801931a:	2204      	movs	r2, #4
 801931c:	a905      	add	r1, sp, #20
 801931e:	4620      	mov	r0, r4
 8019320:	f001 fd7a 	bl	801ae18 <pbuf_copy_partial>
 8019324:	2804      	cmp	r0, #4
 8019326:	f47f aeb0 	bne.w	801908a <dns_recv+0xe>
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 801932a:	f44f 7388 	mov.w	r3, #272	; 0x110
                  pbuf_free(p);
 801932e:	4620      	mov	r0, r4
                  ip_addr_copy_from_ip4(dns_table[i].ipaddr, ip4addr);
 8019330:	fb03 f606 	mul.w	r6, r3, r6
 8019334:	9b05      	ldr	r3, [sp, #20]
 8019336:	eb08 0406 	add.w	r4, r8, r6
 801933a:	6063      	str	r3, [r4, #4]
                  pbuf_free(p);
 801933c:	f001 fcc8 	bl	801acd0 <pbuf_free>
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019340:	980a      	ldr	r0, [sp, #40]	; 0x28
 8019342:	f7ff fc8d 	bl	8018c60 <lwip_htonl>
  if (entry->ttl > DNS_MAX_TTL) {
 8019346:	4a15      	ldr	r2, [pc, #84]	; (801939c <dns_recv+0x320>)
                  dns_correct_response(i, lwip_ntohl(ans.ttl));
 8019348:	4603      	mov	r3, r0
  dns_call_found(idx, &entry->ipaddr);
 801934a:	9901      	ldr	r1, [sp, #4]
 801934c:	4638      	mov	r0, r7
  entry->ttl = ttl;
 801934e:	4293      	cmp	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019350:	f101 0104 	add.w	r1, r1, #4
  entry->ttl = ttl;
 8019354:	bf28      	it	cs
 8019356:	4613      	movcs	r3, r2
  dns_call_found(idx, &entry->ipaddr);
 8019358:	4441      	add	r1, r8
  entry->ttl = ttl;
 801935a:	f848 3006 	str.w	r3, [r8, r6]
  entry->state = DNS_STATE_DONE;
 801935e:	2303      	movs	r3, #3
 8019360:	72a3      	strb	r3, [r4, #10]
  dns_call_found(idx, &entry->ipaddr);
 8019362:	f7ff fcef 	bl	8018d44 <dns_call_found>
  if (entry->ttl == 0) {
 8019366:	f858 3006 	ldr.w	r3, [r8, r6]
 801936a:	2b00      	cmp	r3, #0
 801936c:	f47f ae90 	bne.w	8019090 <dns_recv+0x14>
    if (entry->state == DNS_STATE_DONE) {
 8019370:	7aa2      	ldrb	r2, [r4, #10]
 8019372:	2a03      	cmp	r2, #3
 8019374:	f47f ae8c 	bne.w	8019090 <dns_recv+0x14>
      entry->state = DNS_STATE_UNUSED;
 8019378:	72a3      	strb	r3, [r4, #10]
                  return;
 801937a:	e689      	b.n	8019090 <dns_recv+0x14>
        pbuf_free(p);
 801937c:	4620      	mov	r0, r4
 801937e:	f001 fca7 	bl	801acd0 <pbuf_free>
        dns_call_found(i, NULL);
 8019382:	2100      	movs	r1, #0
 8019384:	4638      	mov	r0, r7
 8019386:	f7ff fcdd 	bl	8018d44 <dns_call_found>
        dns_table[i].state = DNS_STATE_UNUSED;
 801938a:	f44f 7388 	mov.w	r3, #272	; 0x110
 801938e:	2200      	movs	r2, #0
 8019390:	fb03 8606 	mla	r6, r3, r6, r8
 8019394:	72b2      	strb	r2, [r6, #10]
        return;
 8019396:	e67b      	b.n	8019090 <dns_recv+0x14>
 8019398:	2001eda8 	.word	0x2001eda8
 801939c:	00093a80 	.word	0x00093a80
 80193a0:	2001edb0 	.word	0x2001edb0
 80193a4:	08045585 	.word	0x08045585

080193a8 <dns_init>:
}
 80193a8:	4770      	bx	lr
 80193aa:	bf00      	nop

080193ac <dns_setserver>:
  if (numdns < DNS_MAX_SERVERS) {
 80193ac:	2801      	cmp	r0, #1
 80193ae:	d900      	bls.n	80193b2 <dns_setserver+0x6>
}
 80193b0:	4770      	bx	lr
    if (dnsserver != NULL) {
 80193b2:	b121      	cbz	r1, 80193be <dns_setserver+0x12>
      dns_servers[numdns] = (*dnsserver);
 80193b4:	4b05      	ldr	r3, [pc, #20]	; (80193cc <dns_setserver+0x20>)
 80193b6:	680a      	ldr	r2, [r1, #0]
 80193b8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
 80193bc:	4770      	bx	lr
      dns_servers[numdns] = *IP_ADDR_ANY;
 80193be:	4a04      	ldr	r2, [pc, #16]	; (80193d0 <dns_setserver+0x24>)
 80193c0:	4b02      	ldr	r3, [pc, #8]	; (80193cc <dns_setserver+0x20>)
 80193c2:	6812      	ldr	r2, [r2, #0]
 80193c4:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 80193c8:	4770      	bx	lr
 80193ca:	bf00      	nop
 80193cc:	2001eda8 	.word	0x2001eda8
 80193d0:	08045328 	.word	0x08045328

080193d4 <dns_tmr>:
{
 80193d4:	b508      	push	{r3, lr}
    dns_check_entry(i);
 80193d6:	2000      	movs	r0, #0
 80193d8:	f7ff fdc8 	bl	8018f6c <dns_check_entry>
 80193dc:	2001      	movs	r0, #1
 80193de:	f7ff fdc5 	bl	8018f6c <dns_check_entry>
 80193e2:	2002      	movs	r0, #2
 80193e4:	f7ff fdc2 	bl	8018f6c <dns_check_entry>
 80193e8:	2003      	movs	r0, #3
}
 80193ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    dns_check_entry(i);
 80193ee:	f7ff bdbd 	b.w	8018f6c <dns_check_entry>
 80193f2:	bf00      	nop

080193f4 <dns_gethostbyname_addrtype>:
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
  u8_t is_mdns;
#endif
  /* not initialized or no valid server yet, or invalid addr pointer
   * or invalid hostname or invalid hostname length */
  if ((addr == NULL) ||
 80193f4:	2900      	cmp	r1, #0
 80193f6:	f000 812e 	beq.w	8019656 <dns_gethostbyname_addrtype+0x262>
{
 80193fa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((addr == NULL) ||
 80193fe:	fab0 f780 	clz	r7, r0
{
 8019402:	b083      	sub	sp, #12
 8019404:	4606      	mov	r6, r0
  if ((addr == NULL) ||
 8019406:	097f      	lsrs	r7, r7, #5
 8019408:	2800      	cmp	r0, #0
 801940a:	f000 8103 	beq.w	8019614 <dns_gethostbyname_addrtype+0x220>
 801940e:	469b      	mov	fp, r3
      (!hostname) || (!hostname[0])) {
 8019410:	7803      	ldrb	r3, [r0, #0]
 8019412:	2b00      	cmp	r3, #0
 8019414:	f000 80fe 	beq.w	8019614 <dns_gethostbyname_addrtype+0x220>
 8019418:	4615      	mov	r5, r2
 801941a:	4688      	mov	r8, r1
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) == 0)
  if (dns_pcbs[0] == NULL) {
    return ERR_ARG;
  }
#endif
  hostnamelen = strlen(hostname);
 801941c:	f7e6 ff1a 	bl	8000254 <strlen>
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019420:	28ff      	cmp	r0, #255	; 0xff
  hostnamelen = strlen(hostname);
 8019422:	4681      	mov	r9, r0
  if (hostnamelen >= DNS_MAX_NAME_LENGTH) {
 8019424:	f200 80f6 	bhi.w	8019614 <dns_gethostbyname_addrtype+0x220>
    return ERR_OK;
  }
#endif /* LWIP_HAVE_LOOPIF */

  /* host name already in octet notation? set ip addr and return ERR_OK */
  if (ipaddr_aton(hostname, addr)) {
 8019428:	4641      	mov	r1, r8
 801942a:	4630      	mov	r0, r6
 801942c:	f009 fa46 	bl	80228bc <ip4addr_aton>
 8019430:	b118      	cbz	r0, 801943a <dns_gethostbyname_addrtype+0x46>
#if LWIP_IPV4 && LWIP_IPV6
    if ((IP_IS_V6(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV4)) ||
        (IP_IS_V4(addr) && (dns_addrtype != LWIP_DNS_ADDRTYPE_IPV6)))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
    {
      return ERR_OK;
 8019432:	4638      	mov	r0, r7
  }

  /* queue query with specified callback */
  return dns_enqueue(hostname, hostnamelen, found, callback_arg LWIP_DNS_ADDRTYPE_ARG(dns_addrtype)
                     LWIP_DNS_ISMDNS_ARG(is_mdns));
}
 8019434:	b003      	add	sp, #12
 8019436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801943a:	4f88      	ldr	r7, [pc, #544]	; (801965c <dns_gethostbyname_addrtype+0x268>)
  if (ipaddr_aton(hostname, addr)) {
 801943c:	4604      	mov	r4, r0
 801943e:	46ba      	mov	sl, r7
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 8019440:	f81a 3c06 	ldrb.w	r3, [sl, #-6]
 8019444:	2b03      	cmp	r3, #3
 8019446:	d03a      	beq.n	80194be <dns_gethostbyname_addrtype+0xca>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019448:	3401      	adds	r4, #1
 801944a:	f50a 7a88 	add.w	sl, sl, #272	; 0x110
 801944e:	2c04      	cmp	r4, #4
 8019450:	d1f6      	bne.n	8019440 <dns_gethostbyname_addrtype+0x4c>
    if (ip_addr_isany_val(dns_servers[0])) {
 8019452:	4b83      	ldr	r3, [pc, #524]	; (8019660 <dns_gethostbyname_addrtype+0x26c>)
 8019454:	681b      	ldr	r3, [r3, #0]
 8019456:	2b00      	cmp	r3, #0
 8019458:	f000 80f6 	beq.w	8019648 <dns_gethostbyname_addrtype+0x254>
 801945c:	2400      	movs	r4, #0
 801945e:	f8df a20c 	ldr.w	sl, [pc, #524]	; 801966c <dns_gethostbyname_addrtype+0x278>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8019462:	f817 3c06 	ldrb.w	r3, [r7, #-6]
 8019466:	fa5f f884 	uxtb.w	r8, r4
 801946a:	2b02      	cmp	r3, #2
 801946c:	d040      	beq.n	80194f0 <dns_gethostbyname_addrtype+0xfc>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 801946e:	3401      	adds	r4, #1
 8019470:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8019474:	2c04      	cmp	r4, #4
 8019476:	d1f4      	bne.n	8019462 <dns_gethostbyname_addrtype+0x6e>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 8019478:	4a7a      	ldr	r2, [pc, #488]	; (8019664 <dns_gethostbyname_addrtype+0x270>)
  lseqi = DNS_TABLE_SIZE;
 801947a:	4623      	mov	r3, r4
 801947c:	4f7a      	ldr	r7, [pc, #488]	; (8019668 <dns_gethostbyname_addrtype+0x274>)
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 801947e:	2400      	movs	r4, #0
 8019480:	7811      	ldrb	r1, [r2, #0]
  lseq = 0;
 8019482:	46a4      	mov	ip, r4
 8019484:	463a      	mov	r2, r7
    if (entry->state == DNS_STATE_UNUSED) {
 8019486:	7a90      	ldrb	r0, [r2, #10]
 8019488:	fa5f f884 	uxtb.w	r8, r4
 801948c:	2800      	cmp	r0, #0
 801948e:	d041      	beq.n	8019514 <dns_gethostbyname_addrtype+0x120>
    if (entry->state == DNS_STATE_DONE) {
 8019490:	2803      	cmp	r0, #3
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019492:	f104 0401 	add.w	r4, r4, #1
    if (entry->state == DNS_STATE_DONE) {
 8019496:	d023      	beq.n	80194e0 <dns_gethostbyname_addrtype+0xec>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8019498:	2c04      	cmp	r4, #4
 801949a:	f502 7288 	add.w	r2, r2, #272	; 0x110
 801949e:	d1f2      	bne.n	8019486 <dns_gethostbyname_addrtype+0x92>
    if ((lseqi >= DNS_TABLE_SIZE) || (dns_table[lseqi].state != DNS_STATE_DONE)) {
 80194a0:	2b04      	cmp	r3, #4
 80194a2:	d007      	beq.n	80194b4 <dns_gethostbyname_addrtype+0xc0>
 80194a4:	eb03 1403 	add.w	r4, r3, r3, lsl #4
 80194a8:	eb07 1404 	add.w	r4, r7, r4, lsl #4
 80194ac:	7aa2      	ldrb	r2, [r4, #10]
 80194ae:	2a03      	cmp	r2, #3
 80194b0:	f000 80ae 	beq.w	8019610 <dns_gethostbyname_addrtype+0x21c>
      return ERR_MEM;
 80194b4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80194b8:	b003      	add	sp, #12
 80194ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0) &&
 80194be:	4651      	mov	r1, sl
 80194c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80194c4:	4630      	mov	r0, r6
 80194c6:	f7ff fc1f 	bl	8018d08 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_DONE) &&
 80194ca:	2800      	cmp	r0, #0
 80194cc:	d1bc      	bne.n	8019448 <dns_gethostbyname_addrtype+0x54>
        ip_addr_copy(*addr, dns_table[i].ipaddr);
 80194ce:	4b66      	ldr	r3, [pc, #408]	; (8019668 <dns_gethostbyname_addrtype+0x274>)
 80194d0:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80194d4:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 80194d8:	6863      	ldr	r3, [r4, #4]
 80194da:	f8c8 3000 	str.w	r3, [r8]
 80194de:	e7a9      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
      u8_t age = (u8_t)(dns_seqno - entry->seqno);
 80194e0:	7b90      	ldrb	r0, [r2, #14]
 80194e2:	1a08      	subs	r0, r1, r0
 80194e4:	b2c0      	uxtb	r0, r0
      if (age > lseq) {
 80194e6:	4560      	cmp	r0, ip
 80194e8:	d9d6      	bls.n	8019498 <dns_gethostbyname_addrtype+0xa4>
 80194ea:	4643      	mov	r3, r8
 80194ec:	4684      	mov	ip, r0
 80194ee:	e7d3      	b.n	8019498 <dns_gethostbyname_addrtype+0xa4>
        (lwip_strnicmp(name, dns_table[i].name, sizeof(dns_table[i].name)) == 0)) {
 80194f0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80194f4:	4639      	mov	r1, r7
 80194f6:	4630      	mov	r0, r6
 80194f8:	f7ff fc06 	bl	8018d08 <lwip_strnicmp>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 80194fc:	2800      	cmp	r0, #0
 80194fe:	d1b6      	bne.n	801946e <dns_gethostbyname_addrtype+0x7a>
 8019500:	4b5a      	ldr	r3, [pc, #360]	; (801966c <dns_gethostbyname_addrtype+0x278>)
        if (dns_requests[r].found == 0) {
 8019502:	681a      	ldr	r2, [r3, #0]
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019504:	330c      	adds	r3, #12
        if (dns_requests[r].found == 0) {
 8019506:	2a00      	cmp	r2, #0
 8019508:	f000 8091 	beq.w	801962e <dns_gethostbyname_addrtype+0x23a>
      for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801950c:	3001      	adds	r0, #1
 801950e:	2804      	cmp	r0, #4
 8019510:	d1f7      	bne.n	8019502 <dns_gethostbyname_addrtype+0x10e>
 8019512:	e7ac      	b.n	801946e <dns_gethostbyname_addrtype+0x7a>
    entry = &dns_table[i];
 8019514:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8019518:	eb07 1404 	add.w	r4, r7, r4, lsl #4
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801951c:	f8df a14c 	ldr.w	sl, [pc, #332]	; 801966c <dns_gethostbyname_addrtype+0x278>
      entry = &dns_table[i];
 8019520:	2700      	movs	r7, #0
 8019522:	4652      	mov	r2, sl
    if (dns_requests[r].found == NULL) {
 8019524:	6813      	ldr	r3, [r2, #0]
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 8019526:	320c      	adds	r2, #12
    if (dns_requests[r].found == NULL) {
 8019528:	b12b      	cbz	r3, 8019536 <dns_gethostbyname_addrtype+0x142>
  for (r = 0; r < DNS_MAX_REQUESTS; r++) {
 801952a:	3701      	adds	r7, #1
 801952c:	2f04      	cmp	r7, #4
 801952e:	d1f9      	bne.n	8019524 <dns_gethostbyname_addrtype+0x130>
      return ERR_MEM;
 8019530:	f04f 30ff 	mov.w	r0, #4294967295
 8019534:	e7c0      	b.n	80194b8 <dns_gethostbyname_addrtype+0xc4>
  req->dns_table_idx = i;
 8019536:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  entry->seqno = dns_seqno;
 801953a:	73a1      	strb	r1, [r4, #14]
  MEMCPY(entry->name, name, namelen);
 801953c:	f104 0010 	add.w	r0, r4, #16
 8019540:	4631      	mov	r1, r6
  req->found = found;
 8019542:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
  req->dns_table_idx = i;
 8019546:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  entry->seqno = dns_seqno;
 801954a:	9301      	str	r3, [sp, #4]
  req->arg   = callback_arg;
 801954c:	f8c2 b004 	str.w	fp, [r2, #4]
  req->dns_table_idx = i;
 8019550:	f882 8008 	strb.w	r8, [r2, #8]
  entry->state = DNS_STATE_NEW;
 8019554:	2201      	movs	r2, #1
 8019556:	72a2      	strb	r2, [r4, #10]
  MEMCPY(entry->name, name, namelen);
 8019558:	464a      	mov	r2, r9
 801955a:	f00a fcb5 	bl	8023ec8 <memcpy>
  entry->name[namelen] = 0;
 801955e:	44a1      	add	r9, r4
 8019560:	9b01      	ldr	r3, [sp, #4]
 8019562:	461d      	mov	r5, r3
 8019564:	f889 3010 	strb.w	r3, [r9, #16]
  req->dns_table_idx = i;
 8019568:	007b      	lsls	r3, r7, #1
 801956a:	9301      	str	r3, [sp, #4]
 801956c:	4b40      	ldr	r3, [pc, #256]	; (8019670 <dns_gethostbyname_addrtype+0x27c>)
    if (dns_pcbs[i] == NULL) {
 801956e:	f853 2b04 	ldr.w	r2, [r3], #4
 8019572:	b2ee      	uxtb	r6, r5
 8019574:	b30a      	cbz	r2, 80195ba <dns_gethostbyname_addrtype+0x1c6>
  for (i = 0; i < DNS_MAX_SOURCE_PORTS; i++) {
 8019576:	3501      	adds	r5, #1
 8019578:	2d04      	cmp	r5, #4
 801957a:	d1f8      	bne.n	801956e <dns_gethostbyname_addrtype+0x17a>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801957c:	483d      	ldr	r0, [pc, #244]	; (8019674 <dns_gethostbyname_addrtype+0x280>)
 801957e:	2304      	movs	r3, #4
 8019580:	7806      	ldrb	r6, [r0, #0]
 8019582:	3601      	adds	r6, #1
 8019584:	b2f6      	uxtb	r6, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 8019586:	2e03      	cmp	r6, #3
    if (dns_pcbs[idx] != NULL) {
 8019588:	4632      	mov	r2, r6
    if (idx >= DNS_MAX_SOURCE_PORTS) {
 801958a:	d901      	bls.n	8019590 <dns_gethostbyname_addrtype+0x19c>
 801958c:	2600      	movs	r6, #0
      idx = 0;
 801958e:	4632      	mov	r2, r6
    if (dns_pcbs[idx] != NULL) {
 8019590:	4d37      	ldr	r5, [pc, #220]	; (8019670 <dns_gethostbyname_addrtype+0x27c>)
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 8019592:	1c71      	adds	r1, r6, #1
 8019594:	3b01      	subs	r3, #1
    if (dns_pcbs[idx] != NULL) {
 8019596:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801959a:	2a00      	cmp	r2, #0
 801959c:	d13d      	bne.n	801961a <dns_gethostbyname_addrtype+0x226>
  for (i = 0, idx = (u8_t)(dns_last_pcb_idx + 1); i < DNS_MAX_SOURCE_PORTS; i++, idx++) {
 801959e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80195a2:	b2ce      	uxtb	r6, r1
 80195a4:	d1ef      	bne.n	8019586 <dns_gethostbyname_addrtype+0x192>
    req->found = NULL;
 80195a6:	9a01      	ldr	r2, [sp, #4]
    return ERR_MEM;
 80195a8:	f04f 30ff 	mov.w	r0, #4294967295
    entry->state = DNS_STATE_UNUSED;
 80195ac:	72a3      	strb	r3, [r4, #10]
    req->found = NULL;
 80195ae:	443a      	add	r2, r7
 80195b0:	f84a 3022 	str.w	r3, [sl, r2, lsl #2]
  entry->pcb_idx = dns_alloc_pcb();
 80195b4:	2304      	movs	r3, #4
 80195b6:	73e3      	strb	r3, [r4, #15]
    return ERR_MEM;
 80195b8:	e73c      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
  pcb = udp_new_ip_type(IPADDR_TYPE_ANY);
 80195ba:	202e      	movs	r0, #46	; 0x2e
 80195bc:	f006 fc9c 	bl	801fef8 <udp_new_ip_type>
  if (pcb == NULL) {
 80195c0:	4681      	mov	r9, r0
 80195c2:	2800      	cmp	r0, #0
 80195c4:	d043      	beq.n	801964e <dns_gethostbyname_addrtype+0x25a>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80195c6:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801967c <dns_gethostbyname_addrtype+0x288>
    u16_t port = (u16_t)DNS_RAND_TXID();
 80195ca:	f00b fce7 	bl	8024f9c <rand>
 80195ce:	b282      	uxth	r2, r0
    if (DNS_PORT_ALLOWED(port)) {
 80195d0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80195d4:	d3f9      	bcc.n	80195ca <dns_gethostbyname_addrtype+0x1d6>
      err = udp_bind(pcb, IP_ANY_TYPE, port);
 80195d6:	4659      	mov	r1, fp
 80195d8:	4648      	mov	r0, r9
 80195da:	f006 fa29 	bl	801fa30 <udp_bind>
  } while (err == ERR_USE);
 80195de:	f110 0f08 	cmn.w	r0, #8
 80195e2:	d0f2      	beq.n	80195ca <dns_gethostbyname_addrtype+0x1d6>
  if (err != ERR_OK) {
 80195e4:	b9d8      	cbnz	r0, 801961e <dns_gethostbyname_addrtype+0x22a>
  udp_recv(pcb, dns_recv, NULL);
 80195e6:	4602      	mov	r2, r0
 80195e8:	4923      	ldr	r1, [pc, #140]	; (8019678 <dns_gethostbyname_addrtype+0x284>)
 80195ea:	4648      	mov	r0, r9
 80195ec:	f006 fc34 	bl	801fe58 <udp_recv>
    dns_pcbs[i] = dns_alloc_random_port();
 80195f0:	4b1f      	ldr	r3, [pc, #124]	; (8019670 <dns_gethostbyname_addrtype+0x27c>)
 80195f2:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
      dns_last_pcb_idx = i;
 80195f6:	4b1f      	ldr	r3, [pc, #124]	; (8019674 <dns_gethostbyname_addrtype+0x280>)
 80195f8:	701e      	strb	r6, [r3, #0]
  dns_seqno++;
 80195fa:	4a1a      	ldr	r2, [pc, #104]	; (8019664 <dns_gethostbyname_addrtype+0x270>)
  dns_check_entry(i);
 80195fc:	4640      	mov	r0, r8
  entry->pcb_idx = dns_alloc_pcb();
 80195fe:	73e6      	strb	r6, [r4, #15]
  dns_seqno++;
 8019600:	7813      	ldrb	r3, [r2, #0]
 8019602:	3301      	adds	r3, #1
 8019604:	7013      	strb	r3, [r2, #0]
  dns_check_entry(i);
 8019606:	f7ff fcb1 	bl	8018f6c <dns_check_entry>
  return ERR_INPROGRESS;
 801960a:	f06f 0004 	mvn.w	r0, #4
 801960e:	e711      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
      entry = &dns_table[i];
 8019610:	4698      	mov	r8, r3
 8019612:	e783      	b.n	801951c <dns_gethostbyname_addrtype+0x128>
    return ERR_ARG;
 8019614:	f06f 000f 	mvn.w	r0, #15
 8019618:	e70c      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
      dns_last_pcb_idx = idx;
 801961a:	7006      	strb	r6, [r0, #0]
      return idx;
 801961c:	e7ed      	b.n	80195fa <dns_gethostbyname_addrtype+0x206>
    udp_remove(pcb);
 801961e:	4648      	mov	r0, r9
 8019620:	f006 fc2c 	bl	801fe7c <udp_remove>
    dns_pcbs[i] = dns_alloc_random_port();
 8019624:	2300      	movs	r3, #0
 8019626:	4a12      	ldr	r2, [pc, #72]	; (8019670 <dns_gethostbyname_addrtype+0x27c>)
 8019628:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 801962c:	e7a6      	b.n	801957c <dns_gethostbyname_addrtype+0x188>
          dns_requests[r].found = found;
 801962e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8019632:	f84a 5020 	str.w	r5, [sl, r0, lsl #2]
 8019636:	eb0a 0a80 	add.w	sl, sl, r0, lsl #2
          return ERR_INPROGRESS;
 801963a:	f06f 0004 	mvn.w	r0, #4
          dns_requests[r].arg = callback_arg;
 801963e:	f8ca b004 	str.w	fp, [sl, #4]
          dns_requests[r].dns_table_idx = i;
 8019642:	f88a 8008 	strb.w	r8, [sl, #8]
          return ERR_INPROGRESS;
 8019646:	e6f5      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
      return ERR_VAL;
 8019648:	f06f 0005 	mvn.w	r0, #5
 801964c:	e6f2      	b.n	8019434 <dns_gethostbyname_addrtype+0x40>
    dns_pcbs[i] = dns_alloc_random_port();
 801964e:	4b08      	ldr	r3, [pc, #32]	; (8019670 <dns_gethostbyname_addrtype+0x27c>)
 8019650:	f843 9025 	str.w	r9, [r3, r5, lsl #2]
    if (dns_pcbs[i] != NULL) {
 8019654:	e792      	b.n	801957c <dns_gethostbyname_addrtype+0x188>
    return ERR_ARG;
 8019656:	f06f 000f 	mvn.w	r0, #15
}
 801965a:	4770      	bx	lr
 801965c:	2001edc0 	.word	0x2001edc0
 8019660:	2001eda8 	.word	0x2001eda8
 8019664:	2001eda4 	.word	0x2001eda4
 8019668:	2001edb0 	.word	0x2001edb0
 801966c:	2001ed74 	.word	0x2001ed74
 8019670:	2001ed64 	.word	0x2001ed64
 8019674:	2001ed60 	.word	0x2001ed60
 8019678:	0801907d 	.word	0x0801907d
 801967c:	08045328 	.word	0x08045328

08019680 <dns_gethostbyname>:
{
 8019680:	b510      	push	{r4, lr}
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019682:	2400      	movs	r4, #0
{
 8019684:	b082      	sub	sp, #8
  return dns_gethostbyname_addrtype(hostname, addr, found, callback_arg, LWIP_DNS_ADDRTYPE_DEFAULT);
 8019686:	9400      	str	r4, [sp, #0]
 8019688:	f7ff feb4 	bl	80193f4 <dns_gethostbyname_addrtype>
}
 801968c:	b002      	add	sp, #8
 801968e:	bd10      	pop	{r4, pc}

08019690 <lwip_standard_chksum>:
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
  const u8_t *pb = (const u8_t *)dataptr;
  const u16_t *ps;
  u16_t t = 0;
 8019690:	2300      	movs	r3, #0
{
 8019692:	b510      	push	{r4, lr}
  u32_t sum = 0;
  int odd = ((mem_ptr_t)pb & 1);

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 8019694:	4299      	cmp	r1, r3
{
 8019696:	b082      	sub	sp, #8
  int odd = ((mem_ptr_t)pb & 1);
 8019698:	f000 0401 	and.w	r4, r0, #1
  u16_t t = 0;
 801969c:	f8ad 3006 	strh.w	r3, [sp, #6]
  if (odd && len > 0) {
 80196a0:	dd05      	ble.n	80196ae <lwip_standard_chksum+0x1e>
 80196a2:	b124      	cbz	r4, 80196ae <lwip_standard_chksum+0x1e>
    ((u8_t *)&t)[1] = *pb++;
 80196a4:	f810 3b01 	ldrb.w	r3, [r0], #1
    len--;
 80196a8:	3901      	subs	r1, #1
    ((u8_t *)&t)[1] = *pb++;
 80196aa:	f88d 3007 	strb.w	r3, [sp, #7]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
  while (len > 1) {
 80196ae:	2901      	cmp	r1, #1
 80196b0:	dd28      	ble.n	8019704 <lwip_standard_chksum+0x74>
 80196b2:	3902      	subs	r1, #2
  u32_t sum = 0;
 80196b4:	2300      	movs	r3, #0
 80196b6:	ea4f 0e51 	mov.w	lr, r1, lsr #1
 80196ba:	f10e 0c01 	add.w	ip, lr, #1
 80196be:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
    sum += *ps++;
 80196c2:	f830 2b02 	ldrh.w	r2, [r0], #2
  while (len > 1) {
 80196c6:	4584      	cmp	ip, r0
    sum += *ps++;
 80196c8:	4413      	add	r3, r2
  while (len > 1) {
 80196ca:	d1fa      	bne.n	80196c2 <lwip_standard_chksum+0x32>
    len -= 2;
 80196cc:	ebce 7ece 	rsb	lr, lr, lr, lsl #31
 80196d0:	eb01 014e 	add.w	r1, r1, lr, lsl #1
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 80196d4:	2901      	cmp	r1, #1
 80196d6:	d103      	bne.n	80196e0 <lwip_standard_chksum+0x50>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 80196d8:	f89c 2000 	ldrb.w	r2, [ip]
 80196dc:	f88d 2006 	strb.w	r2, [sp, #6]
  }

  /* Add end bytes */
  sum += t;
 80196e0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80196e4:	4403      	add	r3, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 80196e6:	b298      	uxth	r0, r3
 80196e8:	eb00 4313 	add.w	r3, r0, r3, lsr #16
  sum = FOLD_U32T(sum);
 80196ec:	b298      	uxth	r0, r3
 80196ee:	eb00 4013 	add.w	r0, r0, r3, lsr #16

  /* Swap if alignment was odd */
  if (odd) {
 80196f2:	b124      	cbz	r4, 80196fe <lwip_standard_chksum+0x6e>
    sum = SWAP_BYTES_IN_WORD(sum);
 80196f4:	0203      	lsls	r3, r0, #8
 80196f6:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80196fa:	b29b      	uxth	r3, r3
 80196fc:	4318      	orrs	r0, r3
  }

  return (u16_t)sum;
}
 80196fe:	b280      	uxth	r0, r0
 8019700:	b002      	add	sp, #8
 8019702:	bd10      	pop	{r4, pc}
  ps = (const u16_t *)(const void *)pb;
 8019704:	4684      	mov	ip, r0
  u32_t sum = 0;
 8019706:	2300      	movs	r3, #0
 8019708:	e7e4      	b.n	80196d4 <lwip_standard_chksum+0x44>
 801970a:	bf00      	nop

0801970c <inet_cksum_pseudo_base>:
#endif

/** Parts of the pseudo checksum which are common to IPv4 and IPv6 */
static u16_t
inet_cksum_pseudo_base(struct pbuf *p, u8_t proto, u16_t proto_len, u32_t acc)
{
 801970c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019710:	4688      	mov	r8, r1
 8019712:	4617      	mov	r7, r2
 8019714:	461c      	mov	r4, r3
  struct pbuf *q;
  int swapped = 0;

  /* iterate through all pbuf in chain */
  for (q = p; q != NULL; q = q->next) {
 8019716:	b1f8      	cbz	r0, 8019758 <inet_cksum_pseudo_base+0x4c>
 8019718:	4605      	mov	r5, r0
  int swapped = 0;
 801971a:	2600      	movs	r6, #0
    LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): checksumming pbuf %p (has next %p) \n",
                             (void *)q, (void *)q->next));
    acc += LWIP_CHKSUM(q->payload, q->len);
 801971c:	8969      	ldrh	r1, [r5, #10]
 801971e:	6868      	ldr	r0, [r5, #4]
 8019720:	f7ff ffb6 	bl	8019690 <lwip_standard_chksum>
 8019724:	4420      	add	r0, r4
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): unwrapped lwip_chksum()=%"X32_F" \n", acc));*/
    /* just executing this next line is probably faster that the if statement needed
       to check whether we really need to execute it, and does no harm */
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 8019726:	896a      	ldrh	r2, [r5, #10]
    acc = FOLD_U32T(acc);
 8019728:	b284      	uxth	r4, r0
    if (q->len % 2 != 0) {
 801972a:	f012 0f01 	tst.w	r2, #1
    acc = FOLD_U32T(acc);
 801972e:	eb04 4410 	add.w	r4, r4, r0, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 8019732:	ea4f 2304 	mov.w	r3, r4, lsl #8
 8019736:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 801973a:	d004      	beq.n	8019746 <inet_cksum_pseudo_base+0x3a>
      acc = SWAP_BYTES_IN_WORD(acc);
 801973c:	b29b      	uxth	r3, r3
 801973e:	f086 0601 	eor.w	r6, r6, #1
 8019742:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 8019746:	682d      	ldr	r5, [r5, #0]
 8019748:	2d00      	cmp	r5, #0
 801974a:	d1e7      	bne.n	801971c <inet_cksum_pseudo_base+0x10>
    }
    /*LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): wrapped lwip_chksum()=%"X32_F" \n", acc));*/
  }

  if (swapped) {
 801974c:	b126      	cbz	r6, 8019758 <inet_cksum_pseudo_base+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 801974e:	0222      	lsls	r2, r4, #8
 8019750:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8019754:	b292      	uxth	r2, r2
 8019756:	4314      	orrs	r4, r2
  }

  acc += (u32_t)lwip_htons((u16_t)proto);
 8019758:	4640      	mov	r0, r8
 801975a:	f7ff fa7d 	bl	8018c58 <lwip_htons>
 801975e:	4605      	mov	r5, r0
  acc += (u32_t)lwip_htons(proto_len);
 8019760:	4638      	mov	r0, r7
 8019762:	f7ff fa79 	bl	8018c58 <lwip_htons>
 8019766:	4428      	add	r0, r5
 8019768:	4404      	add	r4, r0

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  acc = FOLD_U32T(acc);
 801976a:	b2a0      	uxth	r0, r4
 801976c:	eb00 4414 	add.w	r4, r0, r4, lsr #16
  acc = FOLD_U32T(acc);
 8019770:	b2a0      	uxth	r0, r4
 8019772:	eb00 4014 	add.w	r0, r0, r4, lsr #16
  LWIP_DEBUGF(INET_DEBUG, ("inet_chksum_pseudo(): pbuf chain lwip_chksum()=%"X32_F"\n", acc));
  return (u16_t)~(acc & 0xffffUL);
 8019776:	43c0      	mvns	r0, r0
}
 8019778:	b280      	uxth	r0, r0
 801977a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801977e:	bf00      	nop

08019780 <ip_chksum_pseudo>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
ip_chksum_pseudo(struct pbuf *p, u8_t proto, u16_t proto_len,
                 const ip_addr_t *src, const ip_addr_t *dest)
{
 8019780:	b430      	push	{r4, r5}
 8019782:	9c02      	ldr	r4, [sp, #8]
  addr = ip4_addr_get_u32(src);
 8019784:	681d      	ldr	r5, [r3, #0]
  addr = ip4_addr_get_u32(dest);
 8019786:	6824      	ldr	r4, [r4, #0]
  acc = (u32_t)(acc + ((addr >> 16) & 0xffffUL));
 8019788:	0c23      	lsrs	r3, r4, #16
 801978a:	fa13 f384 	uxtah	r3, r3, r4
 801978e:	fa13 f385 	uxtah	r3, r3, r5
 8019792:	eb03 4315 	add.w	r3, r3, r5, lsr #16
  acc = FOLD_U32T(acc);
 8019796:	b29c      	uxth	r4, r3
 8019798:	eb04 4313 	add.w	r3, r4, r3, lsr #16
  acc = FOLD_U32T(acc);
 801979c:	b29c      	uxth	r4, r3
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 801979e:	eb04 4313 	add.w	r3, r4, r3, lsr #16
#if LWIP_IPV4
  {
    return inet_chksum_pseudo(p, proto, proto_len, ip_2_ip4(src), ip_2_ip4(dest));
  }
#endif /* LWIP_IPV4 */
}
 80197a2:	bc30      	pop	{r4, r5}
  return inet_cksum_pseudo_base(p, proto, proto_len, acc);
 80197a4:	f7ff bfb2 	b.w	801970c <inet_cksum_pseudo_base>

080197a8 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 80197a8:	b508      	push	{r3, lr}
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 80197aa:	f7ff ff71 	bl	8019690 <lwip_standard_chksum>
 80197ae:	43c0      	mvns	r0, r0
}
 80197b0:	b280      	uxth	r0, r0
 80197b2:	bd08      	pop	{r3, pc}

080197b4 <inet_chksum_pbuf>:
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;

  acc = 0;
  for (q = p; q != NULL; q = q->next) {
 80197b4:	b338      	cbz	r0, 8019806 <inet_chksum_pbuf+0x52>
{
 80197b6:	b570      	push	{r4, r5, r6, lr}
  int swapped = 0;
 80197b8:	2600      	movs	r6, #0
 80197ba:	4605      	mov	r5, r0
  acc = 0;
 80197bc:	4634      	mov	r4, r6
    acc += LWIP_CHKSUM(q->payload, q->len);
 80197be:	8969      	ldrh	r1, [r5, #10]
 80197c0:	6868      	ldr	r0, [r5, #4]
 80197c2:	f7ff ff65 	bl	8019690 <lwip_standard_chksum>
 80197c6:	4404      	add	r4, r0
    acc = FOLD_U32T(acc);
    if (q->len % 2 != 0) {
 80197c8:	896b      	ldrh	r3, [r5, #10]
    acc = FOLD_U32T(acc);
 80197ca:	b2a2      	uxth	r2, r4
    if (q->len % 2 != 0) {
 80197cc:	f013 0f01 	tst.w	r3, #1
    acc = FOLD_U32T(acc);
 80197d0:	eb02 4414 	add.w	r4, r2, r4, lsr #16
      swapped = !swapped;
      acc = SWAP_BYTES_IN_WORD(acc);
 80197d4:	ea4f 2304 	mov.w	r3, r4, lsl #8
 80197d8:	f3c4 2207 	ubfx	r2, r4, #8, #8
    if (q->len % 2 != 0) {
 80197dc:	d004      	beq.n	80197e8 <inet_chksum_pbuf+0x34>
      acc = SWAP_BYTES_IN_WORD(acc);
 80197de:	b29b      	uxth	r3, r3
 80197e0:	f086 0601 	eor.w	r6, r6, #1
 80197e4:	ea43 0402 	orr.w	r4, r3, r2
  for (q = p; q != NULL; q = q->next) {
 80197e8:	682d      	ldr	r5, [r5, #0]
 80197ea:	2d00      	cmp	r5, #0
 80197ec:	d1e7      	bne.n	80197be <inet_chksum_pbuf+0xa>
    }
  }

  if (swapped) {
 80197ee:	b13e      	cbz	r6, 8019800 <inet_chksum_pbuf+0x4c>
    acc = SWAP_BYTES_IN_WORD(acc);
 80197f0:	0220      	lsls	r0, r4, #8
 80197f2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80197f6:	b280      	uxth	r0, r0
 80197f8:	4320      	orrs	r0, r4
  }
  return (u16_t)~(acc & 0xffffUL);
 80197fa:	43c0      	mvns	r0, r0
 80197fc:	b280      	uxth	r0, r0
}
 80197fe:	bd70      	pop	{r4, r5, r6, pc}
  return (u16_t)~(acc & 0xffffUL);
 8019800:	43e0      	mvns	r0, r4
 8019802:	b280      	uxth	r0, r0
}
 8019804:	bd70      	pop	{r4, r5, r6, pc}
  for (q = p; q != NULL; q = q->next) {
 8019806:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801980a:	4770      	bx	lr

0801980c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801980c:	b508      	push	{r3, lr}
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801980e:	f009 fe37 	bl	8023480 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8019812:	f000 f975 	bl	8019b00 <mem_init>
  memp_init();
 8019816:	f000 fcf9 	bl	801a20c <memp_init>
  pbuf_init();
  netif_init();
 801981a:	f000 fdbd 	bl	801a398 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801981e:	f005 fffd 	bl	801f81c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8019822:	f001 fd89 	bl	801b338 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8019826:	f7ff fdbf 	bl	80193a8 <dns_init>
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
#endif /* LWIP_TIMERS */
}
 801982a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeouts_init();
 801982e:	f005 bf4d 	b.w	801f6cc <sys_timeouts_init>
 8019832:	bf00      	nop

08019834 <mem_link_valid>:
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
  nmem = ptr_to_mem(mem->next);
  pmem = ptr_to_mem(mem->prev);
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019834:	f242 7310 	movw	r3, #10000	; 0x2710
  pmem = ptr_to_mem(mem->prev);
 8019838:	8841      	ldrh	r1, [r0, #2]
  nmem = ptr_to_mem(mem->next);
 801983a:	f8b0 c000 	ldrh.w	ip, [r0]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801983e:	4299      	cmp	r1, r3
 8019840:	d81b      	bhi.n	801987a <mem_link_valid+0x46>
 8019842:	459c      	cmp	ip, r3
 8019844:	bf94      	ite	ls
 8019846:	2200      	movls	r2, #0
 8019848:	2201      	movhi	r2, #1
 801984a:	b9b2      	cbnz	r2, 801987a <mem_link_valid+0x46>
  return (mem_size_t)((u8_t *)mem - ram);
 801984c:	4b0f      	ldr	r3, [pc, #60]	; (801988c <mem_link_valid+0x58>)
{
 801984e:	b410      	push	{r4}
  return (mem_size_t)((u8_t *)mem - ram);
 8019850:	681c      	ldr	r4, [r3, #0]
 8019852:	1b03      	subs	r3, r0, r4
 8019854:	b29b      	uxth	r3, r3
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8019856:	4299      	cmp	r1, r3
 8019858:	d002      	beq.n	8019860 <mem_link_valid+0x2c>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801985a:	5a61      	ldrh	r1, [r4, r1]
 801985c:	4299      	cmp	r1, r3
 801985e:	d10e      	bne.n	801987e <mem_link_valid+0x4a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8019860:	4a0b      	ldr	r2, [pc, #44]	; (8019890 <mem_link_valid+0x5c>)
  return (struct mem *)(void *)&ram[ptr];
 8019862:	4464      	add	r4, ip
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8019864:	6812      	ldr	r2, [r2, #0]
 8019866:	42a2      	cmp	r2, r4
 8019868:	d00d      	beq.n	8019886 <mem_link_valid+0x52>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801986a:	8860      	ldrh	r0, [r4, #2]
 801986c:	1ac0      	subs	r0, r0, r3
 801986e:	fab0 f080 	clz	r0, r0
 8019872:	0940      	lsrs	r0, r0, #5
    return 0;
  }
  return 1;
}
 8019874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019878:	4770      	bx	lr
    return 0;
 801987a:	2000      	movs	r0, #0
}
 801987c:	4770      	bx	lr
    return 0;
 801987e:	4610      	mov	r0, r2
}
 8019880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019884:	4770      	bx	lr
  return 1;
 8019886:	2001      	movs	r0, #1
 8019888:	e7f4      	b.n	8019874 <mem_link_valid+0x40>
 801988a:	bf00      	nop
 801988c:	2001f214 	.word	0x2001f214
 8019890:	2001f218 	.word	0x2001f218

08019894 <mem_sanity>:

#if MEM_SANITY_CHECK
static void
mem_sanity(void)
{
 8019894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  struct mem *mem;
  u8_t last_used;

  /* begin with first element here */
  mem = (struct mem *)ram;
 8019898:	4f5f      	ldr	r7, [pc, #380]	; (8019a18 <mem_sanity+0x184>)
 801989a:	683e      	ldr	r6, [r7, #0]
  LWIP_ASSERT("heap element used valid", (mem->used == 0) || (mem->used == 1));
 801989c:	7935      	ldrb	r5, [r6, #4]
 801989e:	2d01      	cmp	r5, #1
 80198a0:	d907      	bls.n	80198b2 <mem_sanity+0x1e>
 80198a2:	4b5e      	ldr	r3, [pc, #376]	; (8019a1c <mem_sanity+0x188>)
 80198a4:	f240 223f 	movw	r2, #575	; 0x23f
 80198a8:	495d      	ldr	r1, [pc, #372]	; (8019a20 <mem_sanity+0x18c>)
 80198aa:	485e      	ldr	r0, [pc, #376]	; (8019a24 <mem_sanity+0x190>)
 80198ac:	f00b fad2 	bl	8024e54 <iprintf>
  last_used = mem->used;
 80198b0:	7935      	ldrb	r5, [r6, #4]
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 80198b2:	8873      	ldrh	r3, [r6, #2]
 80198b4:	2b00      	cmp	r3, #0
 80198b6:	f040 80a7 	bne.w	8019a08 <mem_sanity+0x174>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80198ba:	8834      	ldrh	r4, [r6, #0]
 80198bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80198c0:	429c      	cmp	r4, r3
 80198c2:	f200 8098 	bhi.w	80199f6 <mem_sanity+0x162>
  return (struct mem *)(void *)&ram[ptr];
 80198c6:	683b      	ldr	r3, [r7, #0]
 80198c8:	441c      	add	r4, r3
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

  /* check all elements before the end of the heap */
  for (mem = ptr_to_mem(mem->next);
 80198ca:	429c      	cmp	r4, r3
 80198cc:	d961      	bls.n	8019992 <mem_sanity+0xfe>
 80198ce:	f8df 8170 	ldr.w	r8, [pc, #368]	; 8019a40 <mem_sanity+0x1ac>
       ((u8_t *)mem > ram) && (mem < ram_end);
       mem = ptr_to_mem(mem->next)) {
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 80198d2:	f8df a148 	ldr.w	sl, [pc, #328]	; 8019a1c <mem_sanity+0x188>
 80198d6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8019a44 <mem_sanity+0x1b0>
 80198da:	4e52      	ldr	r6, [pc, #328]	; (8019a24 <mem_sanity+0x190>)
 80198dc:	e012      	b.n	8019904 <mem_sanity+0x70>
    LWIP_ASSERT("heap element prev ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->prev) == ptr_to_mem(mem->prev)));
    LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));

    if (last_used == 0) {
      /* 2 unused elements in a row? */
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 80198de:	2b01      	cmp	r3, #1
 80198e0:	d006      	beq.n	80198f0 <mem_sanity+0x5c>
 80198e2:	4653      	mov	r3, sl
 80198e4:	f240 2251 	movw	r2, #593	; 0x251
 80198e8:	494f      	ldr	r1, [pc, #316]	; (8019a28 <mem_sanity+0x194>)
 80198ea:	4630      	mov	r0, r6
 80198ec:	f00b fab2 	bl	8024e54 <iprintf>
    } else {
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
    }

    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 80198f0:	4620      	mov	r0, r4
 80198f2:	f7ff ff9f 	bl	8019834 <mem_link_valid>
 80198f6:	b380      	cbz	r0, 801995a <mem_sanity+0xc6>
  return (struct mem *)(void *)&ram[ptr];
 80198f8:	683b      	ldr	r3, [r7, #0]
 80198fa:	8822      	ldrh	r2, [r4, #0]

    /* used/unused altering */
    last_used = mem->used;
 80198fc:	7925      	ldrb	r5, [r4, #4]
  return (struct mem *)(void *)&ram[ptr];
 80198fe:	189c      	adds	r4, r3, r2
  for (mem = ptr_to_mem(mem->next);
 8019900:	42a3      	cmp	r3, r4
 8019902:	d246      	bcs.n	8019992 <mem_sanity+0xfe>
       ((u8_t *)mem > ram) && (mem < ram_end);
 8019904:	f8d8 2000 	ldr.w	r2, [r8]
 8019908:	42a2      	cmp	r2, r4
 801990a:	d942      	bls.n	8019992 <mem_sanity+0xfe>
    LWIP_ASSERT("heap element aligned", LWIP_MEM_ALIGN(mem) == mem);
 801990c:	1ce2      	adds	r2, r4, #3
 801990e:	f022 0203 	bic.w	r2, r2, #3
 8019912:	4294      	cmp	r4, r2
 8019914:	d006      	beq.n	8019924 <mem_sanity+0x90>
 8019916:	4653      	mov	r3, sl
 8019918:	f240 2249 	movw	r2, #585	; 0x249
 801991c:	4649      	mov	r1, r9
 801991e:	4630      	mov	r0, r6
 8019920:	f00b fa98 	bl	8024e54 <iprintf>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 8019924:	8862      	ldrh	r2, [r4, #2]
 8019926:	f242 7310 	movw	r3, #10000	; 0x2710
 801992a:	429a      	cmp	r2, r3
 801992c:	d81d      	bhi.n	801996a <mem_sanity+0xd6>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 801992e:	8822      	ldrh	r2, [r4, #0]
 8019930:	f242 7310 	movw	r3, #10000	; 0x2710
 8019934:	429a      	cmp	r2, r3
 8019936:	d824      	bhi.n	8019982 <mem_sanity+0xee>
      LWIP_ASSERT("heap element unused?", mem->used == 1);
 8019938:	7923      	ldrb	r3, [r4, #4]
    if (last_used == 0) {
 801993a:	2d00      	cmp	r5, #0
 801993c:	d0cf      	beq.n	80198de <mem_sanity+0x4a>
      LWIP_ASSERT("heap element unused member", (mem->used == 0) || (mem->used == 1));
 801993e:	2b01      	cmp	r3, #1
 8019940:	d9d6      	bls.n	80198f0 <mem_sanity+0x5c>
 8019942:	4653      	mov	r3, sl
 8019944:	f240 2253 	movw	r2, #595	; 0x253
 8019948:	4938      	ldr	r1, [pc, #224]	; (8019a2c <mem_sanity+0x198>)
 801994a:	4630      	mov	r0, r6
 801994c:	f00b fa82 	bl	8024e54 <iprintf>
    LWIP_ASSERT("heap element link valid", mem_link_valid(mem));
 8019950:	4620      	mov	r0, r4
 8019952:	f7ff ff6f 	bl	8019834 <mem_link_valid>
 8019956:	2800      	cmp	r0, #0
 8019958:	d1ce      	bne.n	80198f8 <mem_sanity+0x64>
 801995a:	4653      	mov	r3, sl
 801995c:	f240 2256 	movw	r2, #598	; 0x256
 8019960:	4933      	ldr	r1, [pc, #204]	; (8019a30 <mem_sanity+0x19c>)
 8019962:	4630      	mov	r0, r6
 8019964:	f00b fa76 	bl	8024e54 <iprintf>
 8019968:	e7c6      	b.n	80198f8 <mem_sanity+0x64>
    LWIP_ASSERT("heap element prev ptr valid", mem->prev <= MEM_SIZE_ALIGNED);
 801996a:	4653      	mov	r3, sl
 801996c:	f240 224a 	movw	r2, #586	; 0x24a
 8019970:	4930      	ldr	r1, [pc, #192]	; (8019a34 <mem_sanity+0x1a0>)
 8019972:	4630      	mov	r0, r6
 8019974:	f00b fa6e 	bl	8024e54 <iprintf>
    LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 8019978:	8822      	ldrh	r2, [r4, #0]
 801997a:	f242 7310 	movw	r3, #10000	; 0x2710
 801997e:	429a      	cmp	r2, r3
 8019980:	d9da      	bls.n	8019938 <mem_sanity+0xa4>
 8019982:	4653      	mov	r3, sl
 8019984:	f240 224b 	movw	r2, #587	; 0x24b
 8019988:	492b      	ldr	r1, [pc, #172]	; (8019a38 <mem_sanity+0x1a4>)
 801998a:	4630      	mov	r0, r6
 801998c:	f00b fa62 	bl	8024e54 <iprintf>
 8019990:	e7d2      	b.n	8019938 <mem_sanity+0xa4>
  return (struct mem *)(void *)&ram[ptr];
 8019992:	f242 7210 	movw	r2, #10000	; 0x2710
 8019996:	441a      	add	r2, r3
  }
  LWIP_ASSERT("heap end ptr sanity", mem == ptr_to_mem(MEM_SIZE_ALIGNED));
 8019998:	4294      	cmp	r4, r2
 801999a:	d006      	beq.n	80199aa <mem_sanity+0x116>
 801999c:	4b1f      	ldr	r3, [pc, #124]	; (8019a1c <mem_sanity+0x188>)
 801999e:	f240 225b 	movw	r2, #603	; 0x25b
 80199a2:	4926      	ldr	r1, [pc, #152]	; (8019a3c <mem_sanity+0x1a8>)
 80199a4:	481f      	ldr	r0, [pc, #124]	; (8019a24 <mem_sanity+0x190>)
 80199a6:	f00b fa55 	bl	8024e54 <iprintf>
  LWIP_ASSERT("heap element used valid", mem->used == 1);
 80199aa:	7923      	ldrb	r3, [r4, #4]
 80199ac:	2b01      	cmp	r3, #1
 80199ae:	d006      	beq.n	80199be <mem_sanity+0x12a>
 80199b0:	4b1a      	ldr	r3, [pc, #104]	; (8019a1c <mem_sanity+0x188>)
 80199b2:	f44f 7217 	mov.w	r2, #604	; 0x25c
 80199b6:	491a      	ldr	r1, [pc, #104]	; (8019a20 <mem_sanity+0x18c>)
 80199b8:	481a      	ldr	r0, [pc, #104]	; (8019a24 <mem_sanity+0x190>)
 80199ba:	f00b fa4b 	bl	8024e54 <iprintf>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == MEM_SIZE_ALIGNED);
 80199be:	8862      	ldrh	r2, [r4, #2]
 80199c0:	f242 7310 	movw	r3, #10000	; 0x2710
 80199c4:	429a      	cmp	r2, r3
 80199c6:	d006      	beq.n	80199d6 <mem_sanity+0x142>
 80199c8:	4b14      	ldr	r3, [pc, #80]	; (8019a1c <mem_sanity+0x188>)
 80199ca:	f240 225d 	movw	r2, #605	; 0x25d
 80199ce:	4919      	ldr	r1, [pc, #100]	; (8019a34 <mem_sanity+0x1a0>)
 80199d0:	4814      	ldr	r0, [pc, #80]	; (8019a24 <mem_sanity+0x190>)
 80199d2:	f00b fa3f 	bl	8024e54 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80199d6:	8822      	ldrh	r2, [r4, #0]
 80199d8:	f242 7310 	movw	r3, #10000	; 0x2710
 80199dc:	429a      	cmp	r2, r3
 80199de:	d101      	bne.n	80199e4 <mem_sanity+0x150>
}
 80199e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80199e4:	4b0d      	ldr	r3, [pc, #52]	; (8019a1c <mem_sanity+0x188>)
 80199e6:	f240 225e 	movw	r2, #606	; 0x25e
 80199ea:	4913      	ldr	r1, [pc, #76]	; (8019a38 <mem_sanity+0x1a4>)
 80199ec:	480d      	ldr	r0, [pc, #52]	; (8019a24 <mem_sanity+0x190>)
}
 80199ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  LWIP_ASSERT("heap element next ptr valid", mem->next == MEM_SIZE_ALIGNED);
 80199f2:	f00b ba2f 	b.w	8024e54 <iprintf>
  LWIP_ASSERT("heap element next ptr valid", mem->next <= MEM_SIZE_ALIGNED);
 80199f6:	4b09      	ldr	r3, [pc, #36]	; (8019a1c <mem_sanity+0x188>)
 80199f8:	f240 2242 	movw	r2, #578	; 0x242
 80199fc:	490e      	ldr	r1, [pc, #56]	; (8019a38 <mem_sanity+0x1a4>)
 80199fe:	4809      	ldr	r0, [pc, #36]	; (8019a24 <mem_sanity+0x190>)
 8019a00:	f00b fa28 	bl	8024e54 <iprintf>
  LWIP_ASSERT("heap element next ptr aligned", LWIP_MEM_ALIGN(ptr_to_mem(mem->next) == ptr_to_mem(mem->next)));
 8019a04:	8834      	ldrh	r4, [r6, #0]
 8019a06:	e75e      	b.n	80198c6 <mem_sanity+0x32>
  LWIP_ASSERT("heap element prev ptr valid", mem->prev == 0);
 8019a08:	4b04      	ldr	r3, [pc, #16]	; (8019a1c <mem_sanity+0x188>)
 8019a0a:	f240 2241 	movw	r2, #577	; 0x241
 8019a0e:	4909      	ldr	r1, [pc, #36]	; (8019a34 <mem_sanity+0x1a0>)
 8019a10:	4804      	ldr	r0, [pc, #16]	; (8019a24 <mem_sanity+0x190>)
 8019a12:	f00b fa1f 	bl	8024e54 <iprintf>
 8019a16:	e750      	b.n	80198ba <mem_sanity+0x26>
 8019a18:	2001f214 	.word	0x2001f214
 8019a1c:	08042bd4 	.word	0x08042bd4
 8019a20:	08042c04 	.word	0x08042c04
 8019a24:	08029a64 	.word	0x08029a64
 8019a28:	08042c6c 	.word	0x08042c6c
 8019a2c:	08042c84 	.word	0x08042c84
 8019a30:	08042ca0 	.word	0x08042ca0
 8019a34:	08042c1c 	.word	0x08042c1c
 8019a38:	08042c38 	.word	0x08042c38
 8019a3c:	08042cb8 	.word	0x08042cb8
 8019a40:	2001f218 	.word	0x2001f218
 8019a44:	08042c54 	.word	0x08042c54

08019a48 <mem_overflow_check_raw>:
{
 8019a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a4c:	1e4c      	subs	r4, r1, #1
 8019a4e:	310f      	adds	r1, #15
 8019a50:	b0a3      	sub	sp, #140	; 0x8c
 8019a52:	4606      	mov	r6, r0
 8019a54:	4615      	mov	r5, r2
 8019a56:	4698      	mov	r8, r3
 8019a58:	4404      	add	r4, r0
 8019a5a:	180f      	adds	r7, r1, r0
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019a5c:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8019ad4 <mem_overflow_check_raw+0x8c>
      LWIP_ASSERT(errstr, 0);
 8019a60:	f8df b074 	ldr.w	fp, [pc, #116]	; 8019ad8 <mem_overflow_check_raw+0x90>
 8019a64:	f8df a074 	ldr.w	sl, [pc, #116]	; 8019adc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019a68:	f814 3f01 	ldrb.w	r3, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019a6c:	464a      	mov	r2, r9
 8019a6e:	2180      	movs	r1, #128	; 0x80
 8019a70:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019a72:	2bcd      	cmp	r3, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019a74:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019a76:	d009      	beq.n	8019a8c <mem_overflow_check_raw+0x44>
      snprintf(errstr, sizeof(errstr), "detected mem overflow in %s%s", descr1, descr2);
 8019a78:	f8cd 8000 	str.w	r8, [sp]
 8019a7c:	f00b fba0 	bl	80251c0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019a80:	465b      	mov	r3, fp
 8019a82:	226d      	movs	r2, #109	; 0x6d
 8019a84:	a902      	add	r1, sp, #8
 8019a86:	4650      	mov	r0, sl
 8019a88:	f00b f9e4 	bl	8024e54 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_AFTER_ALIGNED; k++) {
 8019a8c:	42bc      	cmp	r4, r7
 8019a8e:	d1eb      	bne.n	8019a68 <mem_overflow_check_raw+0x20>
 8019a90:	f1a6 0411 	sub.w	r4, r6, #17
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019a94:	4f0e      	ldr	r7, [pc, #56]	; (8019ad0 <mem_overflow_check_raw+0x88>)
 8019a96:	3e01      	subs	r6, #1
      LWIP_ASSERT(errstr, 0);
 8019a98:	f8df a03c 	ldr.w	sl, [pc, #60]	; 8019ad8 <mem_overflow_check_raw+0x90>
 8019a9c:	f8df 903c 	ldr.w	r9, [pc, #60]	; 8019adc <mem_overflow_check_raw+0x94>
    if (m[k] != 0xcd) {
 8019aa0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019aa4:	463a      	mov	r2, r7
 8019aa6:	2180      	movs	r1, #128	; 0x80
 8019aa8:	462b      	mov	r3, r5
    if (m[k] != 0xcd) {
 8019aaa:	28cd      	cmp	r0, #205	; 0xcd
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019aac:	a802      	add	r0, sp, #8
    if (m[k] != 0xcd) {
 8019aae:	d009      	beq.n	8019ac4 <mem_overflow_check_raw+0x7c>
      snprintf(errstr, sizeof(errstr), "detected mem underflow in %s%s", descr1, descr2);
 8019ab0:	f8cd 8000 	str.w	r8, [sp]
 8019ab4:	f00b fb84 	bl	80251c0 <sniprintf>
      LWIP_ASSERT(errstr, 0);
 8019ab8:	4653      	mov	r3, sl
 8019aba:	2278      	movs	r2, #120	; 0x78
 8019abc:	a902      	add	r1, sp, #8
 8019abe:	4648      	mov	r0, r9
 8019ac0:	f00b f9c8 	bl	8024e54 <iprintf>
  for (k = 0; k < MEM_SANITY_REGION_BEFORE_ALIGNED; k++) {
 8019ac4:	42b4      	cmp	r4, r6
 8019ac6:	d1eb      	bne.n	8019aa0 <mem_overflow_check_raw+0x58>
}
 8019ac8:	b023      	add	sp, #140	; 0x8c
 8019aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ace:	bf00      	nop
 8019ad0:	08042cec 	.word	0x08042cec
 8019ad4:	08042ccc 	.word	0x08042ccc
 8019ad8:	08042bd4 	.word	0x08042bd4
 8019adc:	08029a64 	.word	0x08029a64

08019ae0 <mem_overflow_init_raw>:
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019ae0:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8019ae4:	1842      	adds	r2, r0, r1
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019ae6:	f840 3c10 	str.w	r3, [r0, #-16]
 8019aea:	f840 3c0c 	str.w	r3, [r0, #-12]
 8019aee:	f840 3c08 	str.w	r3, [r0, #-8]
 8019af2:	f840 3c04 	str.w	r3, [r0, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019af6:	5043      	str	r3, [r0, r1]
 8019af8:	6053      	str	r3, [r2, #4]
 8019afa:	6093      	str	r3, [r2, #8]
 8019afc:	60d3      	str	r3, [r2, #12]
}
 8019afe:	4770      	bx	lr

08019b00 <mem_init>:
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019b00:	4b14      	ldr	r3, [pc, #80]	; (8019b54 <mem_init+0x54>)
  mem->next = MEM_SIZE_ALIGNED;
 8019b02:	f242 7210 	movw	r2, #10000	; 0x2710
  mem->used = 0;
 8019b06:	2000      	movs	r0, #0
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019b08:	4913      	ldr	r1, [pc, #76]	; (8019b58 <mem_init+0x58>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019b0a:	f023 0303 	bic.w	r3, r3, #3
{
 8019b0e:	b510      	push	{r4, lr}
  mem->next = MEM_SIZE_ALIGNED;
 8019b10:	601a      	str	r2, [r3, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019b12:	441a      	add	r2, r3
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019b14:	4c11      	ldr	r4, [pc, #68]	; (8019b5c <mem_init+0x5c>)
  mem->used = 0;
 8019b16:	7118      	strb	r0, [r3, #4]
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8019b18:	600a      	str	r2, [r1, #0]
  ram_end->next = MEM_SIZE_ALIGNED;
 8019b1a:	f503 5200 	add.w	r2, r3, #8192	; 0x2000
 8019b1e:	4910      	ldr	r1, [pc, #64]	; (8019b60 <mem_init+0x60>)
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8019b20:	6023      	str	r3, [r4, #0]
  ram_end->used = 1;
 8019b22:	2301      	movs	r3, #1
  ram_end->next = MEM_SIZE_ALIGNED;
 8019b24:	f8c2 1710 	str.w	r1, [r2, #1808]	; 0x710
  ram_end->used = 1;
 8019b28:	f882 3714 	strb.w	r3, [r2, #1812]	; 0x714
  MEM_SANITY();
 8019b2c:	f7ff feb2 	bl	8019894 <mem_sanity>
  lfree = (struct mem *)(void *)ram;
 8019b30:	6822      	ldr	r2, [r4, #0]
 8019b32:	4b0c      	ldr	r3, [pc, #48]	; (8019b64 <mem_init+0x64>)
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019b34:	480c      	ldr	r0, [pc, #48]	; (8019b68 <mem_init+0x68>)
  lfree = (struct mem *)(void *)ram;
 8019b36:	601a      	str	r2, [r3, #0]
  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8019b38:	f009 fcae 	bl	8023498 <sys_mutex_new>
 8019b3c:	b900      	cbnz	r0, 8019b40 <mem_init+0x40>
}
 8019b3e:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019b40:	4b0a      	ldr	r3, [pc, #40]	; (8019b6c <mem_init+0x6c>)
 8019b42:	f240 221f 	movw	r2, #543	; 0x21f
 8019b46:	490a      	ldr	r1, [pc, #40]	; (8019b70 <mem_init+0x70>)
 8019b48:	480a      	ldr	r0, [pc, #40]	; (8019b74 <mem_init+0x74>)
}
 8019b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8019b4e:	f00b b981 	b.w	8024e54 <iprintf>
 8019b52:	bf00      	nop
 8019b54:	2001f21f 	.word	0x2001f21f
 8019b58:	2001f218 	.word	0x2001f218
 8019b5c:	2001f214 	.word	0x2001f214
 8019b60:	27102710 	.word	0x27102710
 8019b64:	2001f208 	.word	0x2001f208
 8019b68:	2001f210 	.word	0x2001f210
 8019b6c:	08042bd4 	.word	0x08042bd4
 8019b70:	08042d0c 	.word	0x08042d0c
 8019b74:	08029a64 	.word	0x08029a64

08019b78 <mem_free>:
mem_free(void *rmem)
{
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8019b78:	2800      	cmp	r0, #0
 8019b7a:	d07f      	beq.n	8019c7c <mem_free+0x104>
{
 8019b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8019b80:	f010 0803 	ands.w	r8, r0, #3
 8019b84:	4604      	mov	r4, r0
 8019b86:	d170      	bne.n	8019c6a <mem_free+0xf2>

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019b88:	4e5c      	ldr	r6, [pc, #368]	; (8019cfc <mem_free+0x184>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019b8a:	f1a0 0518 	sub.w	r5, r0, #24
  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8019b8e:	6833      	ldr	r3, [r6, #0]
 8019b90:	42ab      	cmp	r3, r5
 8019b92:	d805      	bhi.n	8019ba0 <mem_free+0x28>
 8019b94:	4f5a      	ldr	r7, [pc, #360]	; (8019d00 <mem_free+0x188>)
 8019b96:	f100 030c 	add.w	r3, r0, #12
 8019b9a:	683a      	ldr	r2, [r7, #0]
 8019b9c:	429a      	cmp	r2, r3
 8019b9e:	d208      	bcs.n	8019bb2 <mem_free+0x3a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019ba0:	4b58      	ldr	r3, [pc, #352]	; (8019d04 <mem_free+0x18c>)
 8019ba2:	f240 227f 	movw	r2, #639	; 0x27f
 8019ba6:	4958      	ldr	r1, [pc, #352]	; (8019d08 <mem_free+0x190>)
 8019ba8:	4858      	ldr	r0, [pc, #352]	; (8019d0c <mem_free+0x194>)
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8019baa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8019bae:	f00b b951 	b.w	8024e54 <iprintf>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019bb2:	4b57      	ldr	r3, [pc, #348]	; (8019d10 <mem_free+0x198>)
 8019bb4:	4a57      	ldr	r2, [pc, #348]	; (8019d14 <mem_free+0x19c>)
 8019bb6:	f830 1c12 	ldrh.w	r1, [r0, #-18]
 8019bba:	f7ff ff45 	bl	8019a48 <mem_overflow_check_raw>
  if (!mem->used) {
 8019bbe:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019bc2:	2b00      	cmp	r3, #0
 8019bc4:	f000 8082 	beq.w	8019ccc <mem_free+0x154>
  if (!mem_link_valid(mem)) {
 8019bc8:	4628      	mov	r0, r5
 8019bca:	f7ff fe33 	bl	8019834 <mem_link_valid>
 8019bce:	2800      	cmp	r0, #0
 8019bd0:	f000 8085 	beq.w	8019cde <mem_free+0x166>
  mem->used = 0;
 8019bd4:	f804 8c14 	strb.w	r8, [r4, #-20]
  if (mem < lfree) {
 8019bd8:	f8df 815c 	ldr.w	r8, [pc, #348]	; 8019d38 <mem_free+0x1c0>
 8019bdc:	f8d8 3000 	ldr.w	r3, [r8]
 8019be0:	42ab      	cmp	r3, r5
 8019be2:	d901      	bls.n	8019be8 <mem_free+0x70>
    lfree = mem;
 8019be4:	f8c8 5000 	str.w	r5, [r8]
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019be8:	6833      	ldr	r3, [r6, #0]
 8019bea:	429d      	cmp	r5, r3
 8019bec:	d351      	bcc.n	8019c92 <mem_free+0x11a>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019bee:	683b      	ldr	r3, [r7, #0]
 8019bf0:	429d      	cmp	r5, r3
 8019bf2:	d258      	bcs.n	8019ca6 <mem_free+0x12e>
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019bf4:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019bf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8019bfc:	4293      	cmp	r3, r2
 8019bfe:	d83e      	bhi.n	8019c7e <mem_free+0x106>
  return (struct mem *)(void *)&ram[ptr];
 8019c00:	6832      	ldr	r2, [r6, #0]
 8019c02:	4413      	add	r3, r2
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8019c04:	429d      	cmp	r5, r3
 8019c06:	d013      	beq.n	8019c30 <mem_free+0xb8>
 8019c08:	7919      	ldrb	r1, [r3, #4]
 8019c0a:	b989      	cbnz	r1, 8019c30 <mem_free+0xb8>
 8019c0c:	6839      	ldr	r1, [r7, #0]
 8019c0e:	428b      	cmp	r3, r1
 8019c10:	d00e      	beq.n	8019c30 <mem_free+0xb8>
    if (lfree == nmem) {
 8019c12:	f8d8 1000 	ldr.w	r1, [r8]
 8019c16:	428b      	cmp	r3, r1
 8019c18:	d06d      	beq.n	8019cf6 <mem_free+0x17e>
    mem->next = nmem->next;
 8019c1a:	8819      	ldrh	r1, [r3, #0]
 8019c1c:	f824 1c18 	strh.w	r1, [r4, #-24]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8019c20:	f242 7110 	movw	r1, #10000	; 0x2710
 8019c24:	881b      	ldrh	r3, [r3, #0]
 8019c26:	428b      	cmp	r3, r1
 8019c28:	d002      	beq.n	8019c30 <mem_free+0xb8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8019c2a:	4413      	add	r3, r2
  return (mem_size_t)((u8_t *)mem - ram);
 8019c2c:	1aa9      	subs	r1, r5, r2
 8019c2e:	8059      	strh	r1, [r3, #2]
  pmem = ptr_to_mem(mem->prev);
 8019c30:	f834 1c16 	ldrh.w	r1, [r4, #-22]
  return (struct mem *)(void *)&ram[ptr];
 8019c34:	1853      	adds	r3, r2, r1
  if (pmem != mem && pmem->used == 0) {
 8019c36:	429d      	cmp	r5, r3
 8019c38:	d010      	beq.n	8019c5c <mem_free+0xe4>
 8019c3a:	7918      	ldrb	r0, [r3, #4]
 8019c3c:	b970      	cbnz	r0, 8019c5c <mem_free+0xe4>
    if (lfree == mem) {
 8019c3e:	f8d8 0000 	ldr.w	r0, [r8]
 8019c42:	4285      	cmp	r5, r0
 8019c44:	d054      	beq.n	8019cf0 <mem_free+0x178>
    pmem->next = mem->next;
 8019c46:	f834 3c18 	ldrh.w	r3, [r4, #-24]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019c4a:	f242 7010 	movw	r0, #10000	; 0x2710
    pmem->next = mem->next;
 8019c4e:	5253      	strh	r3, [r2, r1]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8019c50:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019c54:	4283      	cmp	r3, r0
 8019c56:	d001      	beq.n	8019c5c <mem_free+0xe4>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8019c58:	441a      	add	r2, r3
 8019c5a:	8051      	strh	r1, [r2, #2]
  MEM_SANITY();
 8019c5c:	f7ff fe1a 	bl	8019894 <mem_sanity>
  mem_free_count = 1;
 8019c60:	4b2d      	ldr	r3, [pc, #180]	; (8019d18 <mem_free+0x1a0>)
 8019c62:	2201      	movs	r2, #1
 8019c64:	701a      	strb	r2, [r3, #0]
}
 8019c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019c6a:	4b26      	ldr	r3, [pc, #152]	; (8019d04 <mem_free+0x18c>)
 8019c6c:	f240 2273 	movw	r2, #627	; 0x273
 8019c70:	492a      	ldr	r1, [pc, #168]	; (8019d1c <mem_free+0x1a4>)
 8019c72:	4826      	ldr	r0, [pc, #152]	; (8019d0c <mem_free+0x194>)
}
 8019c74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8019c78:	f00b b8ec 	b.w	8024e54 <iprintf>
 8019c7c:	4770      	bx	lr
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8019c7e:	4b21      	ldr	r3, [pc, #132]	; (8019d04 <mem_free+0x18c>)
 8019c80:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8019c84:	4926      	ldr	r1, [pc, #152]	; (8019d20 <mem_free+0x1a8>)
 8019c86:	4821      	ldr	r0, [pc, #132]	; (8019d0c <mem_free+0x194>)
 8019c88:	f00b f8e4 	bl	8024e54 <iprintf>
  nmem = ptr_to_mem(mem->next);
 8019c8c:	f834 3c18 	ldrh.w	r3, [r4, #-24]
 8019c90:	e7b6      	b.n	8019c00 <mem_free+0x88>
  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8019c92:	4b1c      	ldr	r3, [pc, #112]	; (8019d04 <mem_free+0x18c>)
 8019c94:	f240 12df 	movw	r2, #479	; 0x1df
 8019c98:	4922      	ldr	r1, [pc, #136]	; (8019d24 <mem_free+0x1ac>)
 8019c9a:	481c      	ldr	r0, [pc, #112]	; (8019d0c <mem_free+0x194>)
 8019c9c:	f00b f8da 	bl	8024e54 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8019ca0:	683b      	ldr	r3, [r7, #0]
 8019ca2:	429d      	cmp	r5, r3
 8019ca4:	d306      	bcc.n	8019cb4 <mem_free+0x13c>
 8019ca6:	4b17      	ldr	r3, [pc, #92]	; (8019d04 <mem_free+0x18c>)
 8019ca8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019cac:	491e      	ldr	r1, [pc, #120]	; (8019d28 <mem_free+0x1b0>)
 8019cae:	4817      	ldr	r0, [pc, #92]	; (8019d0c <mem_free+0x194>)
 8019cb0:	f00b f8d0 	bl	8024e54 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8019cb4:	f814 3c14 	ldrb.w	r3, [r4, #-20]
 8019cb8:	2b00      	cmp	r3, #0
 8019cba:	d09b      	beq.n	8019bf4 <mem_free+0x7c>
 8019cbc:	4b11      	ldr	r3, [pc, #68]	; (8019d04 <mem_free+0x18c>)
 8019cbe:	f240 12e1 	movw	r2, #481	; 0x1e1
 8019cc2:	491a      	ldr	r1, [pc, #104]	; (8019d2c <mem_free+0x1b4>)
 8019cc4:	4811      	ldr	r0, [pc, #68]	; (8019d0c <mem_free+0x194>)
 8019cc6:	f00b f8c5 	bl	8024e54 <iprintf>
 8019cca:	e793      	b.n	8019bf4 <mem_free+0x7c>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019ccc:	4b0d      	ldr	r3, [pc, #52]	; (8019d04 <mem_free+0x18c>)
 8019cce:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8019cd2:	4917      	ldr	r1, [pc, #92]	; (8019d30 <mem_free+0x1b8>)
 8019cd4:	480d      	ldr	r0, [pc, #52]	; (8019d0c <mem_free+0x194>)
}
 8019cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8019cda:	f00b b8bb 	b.w	8024e54 <iprintf>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8019cde:	4b09      	ldr	r3, [pc, #36]	; (8019d04 <mem_free+0x18c>)
 8019ce0:	f240 2295 	movw	r2, #661	; 0x295
 8019ce4:	4913      	ldr	r1, [pc, #76]	; (8019d34 <mem_free+0x1bc>)
 8019ce6:	4809      	ldr	r0, [pc, #36]	; (8019d0c <mem_free+0x194>)
}
 8019ce8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8019cec:	f00b b8b2 	b.w	8024e54 <iprintf>
      lfree = pmem;
 8019cf0:	f8c8 3000 	str.w	r3, [r8]
 8019cf4:	e7a7      	b.n	8019c46 <mem_free+0xce>
      lfree = mem;
 8019cf6:	f8c8 5000 	str.w	r5, [r8]
 8019cfa:	e78e      	b.n	8019c1a <mem_free+0xa2>
 8019cfc:	2001f214 	.word	0x2001f214
 8019d00:	2001f218 	.word	0x2001f218
 8019d04:	08042bd4 	.word	0x08042bd4
 8019d08:	08042d4c 	.word	0x08042d4c
 8019d0c:	08029a64 	.word	0x08029a64
 8019d10:	08029d08 	.word	0x08029d08
 8019d14:	08042d68 	.word	0x08042d68
 8019d18:	2001f20c 	.word	0x2001f20c
 8019d1c:	08042d28 	.word	0x08042d28
 8019d20:	08042e1c 	.word	0x08042e1c
 8019d24:	08042dcc 	.word	0x08042dcc
 8019d28:	08042de4 	.word	0x08042de4
 8019d2c:	08042e00 	.word	0x08042e00
 8019d30:	08042d70 	.word	0x08042d70
 8019d34:	08042d98 	.word	0x08042d98
 8019d38:	2001f208 	.word	0x2001f208

08019d3c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8019d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019d40:	1ccc      	adds	r4, r1, #3
    newsize = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019d42:	f242 7310 	movw	r3, #10000	; 0x2710
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8019d46:	f024 0403 	bic.w	r4, r4, #3
 8019d4a:	b2a4      	uxth	r4, r4
  if (newsize < MIN_SIZE_ALIGNED) {
 8019d4c:	2c0c      	cmp	r4, #12
 8019d4e:	bf38      	it	cc
 8019d50:	240c      	movcc	r4, #12
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8019d52:	3420      	adds	r4, #32
 8019d54:	b2a4      	uxth	r4, r4
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8019d56:	429c      	cmp	r4, r3
 8019d58:	d87a      	bhi.n	8019e50 <mem_trim+0x114>
 8019d5a:	42a1      	cmp	r1, r4
 8019d5c:	460e      	mov	r6, r1
 8019d5e:	d877      	bhi.n	8019e50 <mem_trim+0x114>
    return NULL;
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8019d60:	4f58      	ldr	r7, [pc, #352]	; (8019ec4 <mem_trim+0x188>)
 8019d62:	4605      	mov	r5, r0
 8019d64:	683b      	ldr	r3, [r7, #0]
 8019d66:	4283      	cmp	r3, r0
 8019d68:	d803      	bhi.n	8019d72 <mem_trim+0x36>
 8019d6a:	4b57      	ldr	r3, [pc, #348]	; (8019ec8 <mem_trim+0x18c>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	4283      	cmp	r3, r0
 8019d70:	d810      	bhi.n	8019d94 <mem_trim+0x58>
 8019d72:	4b56      	ldr	r3, [pc, #344]	; (8019ecc <mem_trim+0x190>)
 8019d74:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019d78:	4955      	ldr	r1, [pc, #340]	; (8019ed0 <mem_trim+0x194>)
 8019d7a:	4856      	ldr	r0, [pc, #344]	; (8019ed4 <mem_trim+0x198>)
 8019d7c:	f00b f86a 	bl	8024e54 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019d80:	683b      	ldr	r3, [r7, #0]
 8019d82:	42ab      	cmp	r3, r5
 8019d84:	d902      	bls.n	8019d8c <mem_trim+0x50>
{
 8019d86:	4628      	mov	r0, r5
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
}
 8019d88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8019d8c:	4b4e      	ldr	r3, [pc, #312]	; (8019ec8 <mem_trim+0x18c>)
 8019d8e:	681b      	ldr	r3, [r3, #0]
 8019d90:	429d      	cmp	r5, r3
 8019d92:	d2f8      	bcs.n	8019d86 <mem_trim+0x4a>
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019d94:	4b50      	ldr	r3, [pc, #320]	; (8019ed8 <mem_trim+0x19c>)
 8019d96:	4628      	mov	r0, r5
 8019d98:	4a50      	ldr	r2, [pc, #320]	; (8019edc <mem_trim+0x1a0>)
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8019d9a:	f1a5 0818 	sub.w	r8, r5, #24
  mem_overflow_check_raw(p, mem->user_size, "heap", "");
 8019d9e:	f835 1c12 	ldrh.w	r1, [r5, #-18]
 8019da2:	f7ff fe51 	bl	8019a48 <mem_overflow_check_raw>
  return (mem_size_t)((u8_t *)mem - ram);
 8019da6:	683a      	ldr	r2, [r7, #0]
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019da8:	f835 1c18 	ldrh.w	r1, [r5, #-24]
  return (mem_size_t)((u8_t *)mem - ram);
 8019dac:	eba8 0802 	sub.w	r8, r8, r2
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019db0:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
  return (mem_size_t)((u8_t *)mem - ram);
 8019db4:	fa1f f888 	uxth.w	r8, r8
  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8019db8:	eba3 0308 	sub.w	r3, r3, r8
 8019dbc:	b29b      	uxth	r3, r3
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019dbe:	429c      	cmp	r4, r3
 8019dc0:	d83d      	bhi.n	8019e3e <mem_trim+0x102>
  if (newsize == size) {
 8019dc2:	d0e0      	beq.n	8019d86 <mem_trim+0x4a>
  return (struct mem *)(void *)&ram[ptr];
 8019dc4:	eb02 0901 	add.w	r9, r2, r1
  if (mem2->used == 0) {
 8019dc8:	f899 0004 	ldrb.w	r0, [r9, #4]
 8019dcc:	2800      	cmp	r0, #0
 8019dce:	d142      	bne.n	8019e56 <mem_trim+0x11a>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019dd0:	f242 7310 	movw	r3, #10000	; 0x2710
 8019dd4:	4299      	cmp	r1, r3
 8019dd6:	d061      	beq.n	8019e9c <mem_trim+0x160>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019dd8:	f108 0308 	add.w	r3, r8, #8
    if (lfree == mem2) {
 8019ddc:	4940      	ldr	r1, [pc, #256]	; (8019ee0 <mem_trim+0x1a4>)
    next = mem2->next;
 8019dde:	f8b9 0000 	ldrh.w	r0, [r9]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019de2:	441c      	add	r4, r3
    if (lfree == mem2) {
 8019de4:	680b      	ldr	r3, [r1, #0]
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019de6:	b2a4      	uxth	r4, r4
    if (lfree == mem2) {
 8019de8:	454b      	cmp	r3, r9
  return (struct mem *)(void *)&ram[ptr];
 8019dea:	eb02 0304 	add.w	r3, r2, r4
    if (lfree == mem2) {
 8019dee:	d053      	beq.n	8019e98 <mem_trim+0x15c>
    mem2->used = 0;
 8019df0:	2100      	movs	r1, #0
    mem2->next = next;
 8019df2:	8018      	strh	r0, [r3, #0]
    mem2->prev = ptr;
 8019df4:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019df8:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019dfa:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019dfe:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019e02:	881b      	ldrh	r3, [r3, #0]
 8019e04:	428b      	cmp	r3, r1
 8019e06:	d001      	beq.n	8019e0c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019e08:	4413      	add	r3, r2
 8019e0a:	805c      	strh	r4, [r3, #2]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019e0c:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  m = (u8_t *)p + size;
 8019e10:	19aa      	adds	r2, r5, r6
  mem->user_size = user_size;
 8019e12:	f825 6c12 	strh.w	r6, [r5, #-18]
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 8019e16:	f845 3c10 	str.w	r3, [r5, #-16]
 8019e1a:	f845 3c0c 	str.w	r3, [r5, #-12]
 8019e1e:	f845 3c08 	str.w	r3, [r5, #-8]
 8019e22:	f845 3c04 	str.w	r3, [r5, #-4]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 8019e26:	51ab      	str	r3, [r5, r6]
 8019e28:	6053      	str	r3, [r2, #4]
 8019e2a:	6093      	str	r3, [r2, #8]
 8019e2c:	60d3      	str	r3, [r2, #12]
  MEM_SANITY();
 8019e2e:	f7ff fd31 	bl	8019894 <mem_sanity>
  mem_free_count = 1;
 8019e32:	4b2c      	ldr	r3, [pc, #176]	; (8019ee4 <mem_trim+0x1a8>)
 8019e34:	2201      	movs	r2, #1
  return rmem;
 8019e36:	4628      	mov	r0, r5
  mem_free_count = 1;
 8019e38:	701a      	strb	r2, [r3, #0]
}
 8019e3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8019e3e:	4b23      	ldr	r3, [pc, #140]	; (8019ecc <mem_trim+0x190>)
 8019e40:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8019e44:	4928      	ldr	r1, [pc, #160]	; (8019ee8 <mem_trim+0x1ac>)
 8019e46:	4823      	ldr	r0, [pc, #140]	; (8019ed4 <mem_trim+0x198>)
 8019e48:	f00b f804 	bl	8024e54 <iprintf>
    return NULL;
 8019e4c:	2000      	movs	r0, #0
 8019e4e:	e79b      	b.n	8019d88 <mem_trim+0x4c>
    return NULL;
 8019e50:	2000      	movs	r0, #0
}
 8019e52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8019e56:	f104 0014 	add.w	r0, r4, #20
 8019e5a:	4298      	cmp	r0, r3
 8019e5c:	d8d6      	bhi.n	8019e0c <mem_trim+0xd0>
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019e5e:	f108 0308 	add.w	r3, r8, #8
 8019e62:	441c      	add	r4, r3
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019e64:	f242 7310 	movw	r3, #10000	; 0x2710
 8019e68:	4299      	cmp	r1, r3
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8019e6a:	b2a4      	uxth	r4, r4
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019e6c:	d01f      	beq.n	8019eae <mem_trim+0x172>
    if (mem2 < lfree) {
 8019e6e:	481c      	ldr	r0, [pc, #112]	; (8019ee0 <mem_trim+0x1a4>)
  return (struct mem *)(void *)&ram[ptr];
 8019e70:	1913      	adds	r3, r2, r4
    if (mem2 < lfree) {
 8019e72:	6807      	ldr	r7, [r0, #0]
 8019e74:	429f      	cmp	r7, r3
 8019e76:	d900      	bls.n	8019e7a <mem_trim+0x13e>
      lfree = mem2;
 8019e78:	6003      	str	r3, [r0, #0]
    mem2->next = mem->next;
 8019e7a:	8019      	strh	r1, [r3, #0]
    mem2->used = 0;
 8019e7c:	2100      	movs	r1, #0
    mem2->prev = ptr;
 8019e7e:	f8a3 8002 	strh.w	r8, [r3, #2]
    mem2->used = 0;
 8019e82:	7119      	strb	r1, [r3, #4]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019e84:	f242 7110 	movw	r1, #10000	; 0x2710
    mem->next = ptr2;
 8019e88:	f825 4c18 	strh.w	r4, [r5, #-24]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8019e8c:	881b      	ldrh	r3, [r3, #0]
 8019e8e:	428b      	cmp	r3, r1
 8019e90:	d0bc      	beq.n	8019e0c <mem_trim+0xd0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8019e92:	441a      	add	r2, r3
 8019e94:	8054      	strh	r4, [r2, #2]
 8019e96:	e7b9      	b.n	8019e0c <mem_trim+0xd0>
      lfree = ptr_to_mem(ptr2);
 8019e98:	600b      	str	r3, [r1, #0]
 8019e9a:	e7a9      	b.n	8019df0 <mem_trim+0xb4>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019e9c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8019ea0:	4b0a      	ldr	r3, [pc, #40]	; (8019ecc <mem_trim+0x190>)
 8019ea2:	4912      	ldr	r1, [pc, #72]	; (8019eec <mem_trim+0x1b0>)
 8019ea4:	480b      	ldr	r0, [pc, #44]	; (8019ed4 <mem_trim+0x198>)
 8019ea6:	f00a ffd5 	bl	8024e54 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019eaa:	683a      	ldr	r2, [r7, #0]
 8019eac:	e794      	b.n	8019dd8 <mem_trim+0x9c>
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8019eae:	f240 3216 	movw	r2, #790	; 0x316
 8019eb2:	490e      	ldr	r1, [pc, #56]	; (8019eec <mem_trim+0x1b0>)
 8019eb4:	4b05      	ldr	r3, [pc, #20]	; (8019ecc <mem_trim+0x190>)
 8019eb6:	4807      	ldr	r0, [pc, #28]	; (8019ed4 <mem_trim+0x198>)
 8019eb8:	f00a ffcc 	bl	8024e54 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 8019ebc:	683a      	ldr	r2, [r7, #0]
    mem2->next = mem->next;
 8019ebe:	f835 1c18 	ldrh.w	r1, [r5, #-24]
 8019ec2:	e7d4      	b.n	8019e6e <mem_trim+0x132>
 8019ec4:	2001f214 	.word	0x2001f214
 8019ec8:	2001f218 	.word	0x2001f218
 8019ecc:	08042bd4 	.word	0x08042bd4
 8019ed0:	08042e48 	.word	0x08042e48
 8019ed4:	08029a64 	.word	0x08029a64
 8019ed8:	08029d08 	.word	0x08029d08
 8019edc:	08042d68 	.word	0x08042d68
 8019ee0:	2001f208 	.word	0x2001f208
 8019ee4:	2001f20c 	.word	0x2001f20c
 8019ee8:	08042e60 	.word	0x08042e60
 8019eec:	08042e80 	.word	0x08042e80

08019ef0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8019ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8019ef4:	4680      	mov	r8, r0
 8019ef6:	2800      	cmp	r0, #0
 8019ef8:	f000 80b2 	beq.w	801a060 <mem_malloc+0x170>
    return NULL;
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019efc:	f100 0b03 	add.w	fp, r0, #3
    size = MIN_SIZE_ALIGNED;
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019f00:	f242 7410 	movw	r4, #10000	; 0x2710
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8019f04:	f02b 0b03 	bic.w	fp, fp, #3
 8019f08:	fa1f fb8b 	uxth.w	fp, fp
  if (size < MIN_SIZE_ALIGNED) {
 8019f0c:	f1bb 0f0c 	cmp.w	fp, #12
 8019f10:	bf38      	it	cc
 8019f12:	f04f 0b0c 	movcc.w	fp, #12
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
 8019f16:	f10b 0720 	add.w	r7, fp, #32
 8019f1a:	b2bf      	uxth	r7, r7
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8019f1c:	42a7      	cmp	r7, r4
 8019f1e:	f200 809f 	bhi.w	801a060 <mem_malloc+0x170>
 8019f22:	42b8      	cmp	r0, r7
 8019f24:	bf94      	ite	ls
 8019f26:	f04f 0a00 	movls.w	sl, #0
 8019f2a:	f04f 0a01 	movhi.w	sl, #1
 8019f2e:	f1ba 0f00 	cmp.w	sl, #0
 8019f32:	f040 8095 	bne.w	801a060 <mem_malloc+0x170>
    return NULL;
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8019f36:	4866      	ldr	r0, [pc, #408]	; (801a0d0 <mem_malloc+0x1e0>)
 8019f38:	f009 fabe 	bl	80234b8 <sys_mutex_lock>
  return (mem_size_t)((u8_t *)mem - ram);
 8019f3c:	4b65      	ldr	r3, [pc, #404]	; (801a0d4 <mem_malloc+0x1e4>)
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019f3e:	eba4 0c07 	sub.w	ip, r4, r7
 8019f42:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 801a0fc <mem_malloc+0x20c>
  return (mem_size_t)((u8_t *)mem - ram);
 8019f46:	6818      	ldr	r0, [r3, #0]
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019f48:	f06f 0e07 	mvn.w	lr, #7
 8019f4c:	4d62      	ldr	r5, [pc, #392]	; (801a0d8 <mem_malloc+0x1e8>)
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019f4e:	f8d9 6000 	ldr.w	r6, [r9]
  return (mem_size_t)((u8_t *)mem - ram);
 8019f52:	1a36      	subs	r6, r6, r0
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019f54:	b2b3      	uxth	r3, r6
 8019f56:	459c      	cmp	ip, r3
  return (mem_size_t)((u8_t *)mem - ram);
 8019f58:	461e      	mov	r6, r3
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8019f5a:	d97a      	bls.n	801a052 <mem_malloc+0x162>
      mem_free_count = 0;
 8019f5c:	f885 a000 	strb.w	sl, [r5]
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019f60:	ebae 0203 	sub.w	r2, lr, r3
      if (mem_free_count != 0) {
 8019f64:	7829      	ldrb	r1, [r5, #0]
  return (struct mem *)(void *)&ram[ptr];
 8019f66:	18c4      	adds	r4, r0, r3
      if (mem_free_count != 0) {
 8019f68:	2900      	cmp	r1, #0
 8019f6a:	d1f0      	bne.n	8019f4e <mem_malloc+0x5e>
      if ((!mem->used) &&
 8019f6c:	7923      	ldrb	r3, [r4, #4]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d16b      	bne.n	801a04a <mem_malloc+0x15a>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8019f72:	8821      	ldrh	r1, [r4, #0]
 8019f74:	440a      	add	r2, r1
 8019f76:	460b      	mov	r3, r1
      if ((!mem->used) &&
 8019f78:	42ba      	cmp	r2, r7
 8019f7a:	d3ec      	bcc.n	8019f56 <mem_malloc+0x66>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8019f7c:	f107 0314 	add.w	r3, r7, #20
 8019f80:	429a      	cmp	r2, r3
 8019f82:	d371      	bcc.n	801a068 <mem_malloc+0x178>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019f84:	f10b 0a28 	add.w	sl, fp, #40	; 0x28
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019f88:	f242 7310 	movw	r3, #10000	; 0x2710
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8019f8c:	44b2      	add	sl, r6
 8019f8e:	fa1f fa8a 	uxth.w	sl, sl
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8019f92:	459a      	cmp	sl, r3
 8019f94:	f000 808f 	beq.w	801a0b6 <mem_malloc+0x1c6>
  return (struct mem *)(void *)&ram[ptr];
 8019f98:	eb00 030a 	add.w	r3, r0, sl
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
          mem2->used = 0;
 8019f9c:	2200      	movs	r2, #0
 8019f9e:	711a      	strb	r2, [r3, #4]
          mem2->prev = ptr;
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
          mem->used = 1;

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019fa0:	f242 7210 	movw	r2, #10000	; 0x2710
          mem2->next = mem->next;
 8019fa4:	f820 100a 	strh.w	r1, [r0, sl]
          mem2->prev = ptr;
 8019fa8:	805e      	strh	r6, [r3, #2]
          mem->used = 1;
 8019faa:	2301      	movs	r3, #1
          mem->next = ptr2;
 8019fac:	f8a4 a000 	strh.w	sl, [r4]
          mem->used = 1;
 8019fb0:	7123      	strb	r3, [r4, #4]
          if (mem2->next != MEM_SIZE_ALIGNED) {
 8019fb2:	f830 300a 	ldrh.w	r3, [r0, sl]
 8019fb6:	4293      	cmp	r3, r2
 8019fb8:	d002      	beq.n	8019fc0 <mem_malloc+0xd0>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8019fba:	4418      	add	r0, r3
 8019fbc:	f8a0 a002 	strh.w	sl, [r0, #2]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8019fc0:	f8d9 3000 	ldr.w	r3, [r9]
 8019fc4:	42a3      	cmp	r3, r4
 8019fc6:	f040 8081 	bne.w	801a0cc <mem_malloc+0x1dc>
  return (struct mem *)(void *)&ram[ptr];
 8019fca:	4b42      	ldr	r3, [pc, #264]	; (801a0d4 <mem_malloc+0x1e4>)
          struct mem *cur = lfree;
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
            mem_free_count = 0;
 8019fcc:	2000      	movs	r0, #0
          while (cur->used && cur != ram_end) {
 8019fce:	4e43      	ldr	r6, [pc, #268]	; (801a0dc <mem_malloc+0x1ec>)
  return (struct mem *)(void *)&ram[ptr];
 8019fd0:	f8d3 c000 	ldr.w	ip, [r3]
          while (cur->used && cur != ram_end) {
 8019fd4:	6831      	ldr	r1, [r6, #0]
          struct mem *cur = lfree;
 8019fd6:	f8d9 3000 	ldr.w	r3, [r9]
          while (cur->used && cur != ram_end) {
 8019fda:	791a      	ldrb	r2, [r3, #4]
 8019fdc:	b942      	cbnz	r2, 8019ff0 <mem_malloc+0x100>
 8019fde:	e009      	b.n	8019ff4 <mem_malloc+0x104>
            mem_free_count = 0;
 8019fe0:	7028      	strb	r0, [r5, #0]
            LWIP_MEM_ALLOC_UNPROTECT();
            /* prevent high interrupt latency... */
            LWIP_MEM_ALLOC_PROTECT();
            if (mem_free_count != 0) {
 8019fe2:	782a      	ldrb	r2, [r5, #0]
 8019fe4:	2a00      	cmp	r2, #0
 8019fe6:	d142      	bne.n	801a06e <mem_malloc+0x17e>
  return (struct mem *)(void *)&ram[ptr];
 8019fe8:	881b      	ldrh	r3, [r3, #0]
 8019fea:	4463      	add	r3, ip
          while (cur->used && cur != ram_end) {
 8019fec:	791a      	ldrb	r2, [r3, #4]
 8019fee:	b10a      	cbz	r2, 8019ff4 <mem_malloc+0x104>
 8019ff0:	4299      	cmp	r1, r3
 8019ff2:	d1f5      	bne.n	8019fe0 <mem_malloc+0xf0>
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
          }
          lfree = cur;
 8019ff4:	f8c9 3000 	str.w	r3, [r9]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8019ff8:	f8d9 3000 	ldr.w	r3, [r9]
 8019ffc:	4299      	cmp	r1, r3
 8019ffe:	d004      	beq.n	801a00a <mem_malloc+0x11a>
 801a000:	f8d9 3000 	ldr.w	r3, [r9]
 801a004:	791b      	ldrb	r3, [r3, #4]
 801a006:	2b00      	cmp	r3, #0
 801a008:	d14d      	bne.n	801a0a6 <mem_malloc+0x1b6>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a00a:	3708      	adds	r7, #8
        sys_mutex_unlock(&mem_mutex);
 801a00c:	4830      	ldr	r0, [pc, #192]	; (801a0d0 <mem_malloc+0x1e0>)
 801a00e:	f009 fa59 	bl	80234c4 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a012:	6833      	ldr	r3, [r6, #0]
 801a014:	4427      	add	r7, r4
 801a016:	42bb      	cmp	r3, r7
 801a018:	d33d      	bcc.n	801a096 <mem_malloc+0x1a6>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a01a:	07a3      	lsls	r3, r4, #30
 801a01c:	d12c      	bne.n	801a078 <mem_malloc+0x188>
  void *p = (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801a01e:	f104 0518 	add.w	r5, r4, #24
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a022:	f04f 33cd 	mov.w	r3, #3452816845	; 0xcdcdcdcd
  mem->user_size = user_size;
 801a026:	f8a4 8006 	strh.w	r8, [r4, #6]
  m = (u8_t *)p + size;
 801a02a:	eb05 0208 	add.w	r2, r5, r8
  memset(m, 0xcd, MEM_SANITY_REGION_BEFORE_ALIGNED);
 801a02e:	60a3      	str	r3, [r4, #8]
 801a030:	60e3      	str	r3, [r4, #12]
 801a032:	6123      	str	r3, [r4, #16]
 801a034:	6163      	str	r3, [r4, #20]
  memset(m, 0xcd, MEM_SANITY_REGION_AFTER_ALIGNED);
 801a036:	f845 3008 	str.w	r3, [r5, r8]
 801a03a:	6053      	str	r3, [r2, #4]
 801a03c:	6093      	str	r3, [r2, #8]
 801a03e:	60d3      	str	r3, [r2, #12]
                    (((mem_ptr_t)mem) & (MEM_ALIGNMENT - 1)) == 0);

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
 801a040:	f7ff fc28 	bl	8019894 <mem_sanity>
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
}
 801a044:	4628      	mov	r0, r5
 801a046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801a04a:	8826      	ldrh	r6, [r4, #0]
 801a04c:	4633      	mov	r3, r6
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801a04e:	459c      	cmp	ip, r3
 801a050:	d884      	bhi.n	8019f5c <mem_malloc+0x6c>
  return NULL;
 801a052:	2500      	movs	r5, #0
  sys_mutex_unlock(&mem_mutex);
 801a054:	481e      	ldr	r0, [pc, #120]	; (801a0d0 <mem_malloc+0x1e0>)
 801a056:	f009 fa35 	bl	80234c4 <sys_mutex_unlock>
}
 801a05a:	4628      	mov	r0, r5
 801a05c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return NULL;
 801a060:	2500      	movs	r5, #0
}
 801a062:	4628      	mov	r0, r5
 801a064:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
          mem->used = 1;
 801a068:	2301      	movs	r3, #1
 801a06a:	7123      	strb	r3, [r4, #4]
 801a06c:	e7a8      	b.n	8019fc0 <mem_malloc+0xd0>
        if (mem == lfree) {
 801a06e:	f8d9 3000 	ldr.w	r3, [r9]
 801a072:	42a3      	cmp	r3, r4
 801a074:	d0af      	beq.n	8019fd6 <mem_malloc+0xe6>
 801a076:	e7c8      	b.n	801a00a <mem_malloc+0x11a>
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801a078:	4b19      	ldr	r3, [pc, #100]	; (801a0e0 <mem_malloc+0x1f0>)
 801a07a:	f240 32bb 	movw	r2, #955	; 0x3bb
 801a07e:	4919      	ldr	r1, [pc, #100]	; (801a0e4 <mem_malloc+0x1f4>)
 801a080:	4819      	ldr	r0, [pc, #100]	; (801a0e8 <mem_malloc+0x1f8>)
 801a082:	f00a fee7 	bl	8024e54 <iprintf>
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801a086:	4b16      	ldr	r3, [pc, #88]	; (801a0e0 <mem_malloc+0x1f0>)
 801a088:	f240 32bd 	movw	r2, #957	; 0x3bd
 801a08c:	4917      	ldr	r1, [pc, #92]	; (801a0ec <mem_malloc+0x1fc>)
 801a08e:	4816      	ldr	r0, [pc, #88]	; (801a0e8 <mem_malloc+0x1f8>)
 801a090:	f00a fee0 	bl	8024e54 <iprintf>
 801a094:	e7c3      	b.n	801a01e <mem_malloc+0x12e>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801a096:	4b12      	ldr	r3, [pc, #72]	; (801a0e0 <mem_malloc+0x1f0>)
 801a098:	f240 32b9 	movw	r2, #953	; 0x3b9
 801a09c:	4914      	ldr	r1, [pc, #80]	; (801a0f0 <mem_malloc+0x200>)
 801a09e:	4812      	ldr	r0, [pc, #72]	; (801a0e8 <mem_malloc+0x1f8>)
 801a0a0:	f00a fed8 	bl	8024e54 <iprintf>
 801a0a4:	e7b9      	b.n	801a01a <mem_malloc+0x12a>
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801a0a6:	4b0e      	ldr	r3, [pc, #56]	; (801a0e0 <mem_malloc+0x1f0>)
 801a0a8:	f240 32b5 	movw	r2, #949	; 0x3b5
 801a0ac:	4911      	ldr	r1, [pc, #68]	; (801a0f4 <mem_malloc+0x204>)
 801a0ae:	480e      	ldr	r0, [pc, #56]	; (801a0e8 <mem_malloc+0x1f8>)
 801a0b0:	f00a fed0 	bl	8024e54 <iprintf>
 801a0b4:	e7a9      	b.n	801a00a <mem_malloc+0x11a>
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801a0b6:	4b0a      	ldr	r3, [pc, #40]	; (801a0e0 <mem_malloc+0x1f0>)
 801a0b8:	f240 3287 	movw	r2, #903	; 0x387
 801a0bc:	490e      	ldr	r1, [pc, #56]	; (801a0f8 <mem_malloc+0x208>)
 801a0be:	480a      	ldr	r0, [pc, #40]	; (801a0e8 <mem_malloc+0x1f8>)
 801a0c0:	f00a fec8 	bl	8024e54 <iprintf>
  return (struct mem *)(void *)&ram[ptr];
 801a0c4:	4b03      	ldr	r3, [pc, #12]	; (801a0d4 <mem_malloc+0x1e4>)
          mem2->next = mem->next;
 801a0c6:	8821      	ldrh	r1, [r4, #0]
  return (struct mem *)(void *)&ram[ptr];
 801a0c8:	6818      	ldr	r0, [r3, #0]
 801a0ca:	e765      	b.n	8019f98 <mem_malloc+0xa8>
 801a0cc:	4e03      	ldr	r6, [pc, #12]	; (801a0dc <mem_malloc+0x1ec>)
 801a0ce:	e79c      	b.n	801a00a <mem_malloc+0x11a>
 801a0d0:	2001f210 	.word	0x2001f210
 801a0d4:	2001f214 	.word	0x2001f214
 801a0d8:	2001f20c 	.word	0x2001f20c
 801a0dc:	2001f218 	.word	0x2001f218
 801a0e0:	08042bd4 	.word	0x08042bd4
 801a0e4:	08042ee0 	.word	0x08042ee0
 801a0e8:	08029a64 	.word	0x08029a64
 801a0ec:	08042f10 	.word	0x08042f10
 801a0f0:	08042eb0 	.word	0x08042eb0
 801a0f4:	08042e94 	.word	0x08042e94
 801a0f8:	08042e80 	.word	0x08042e80
 801a0fc:	2001f208 	.word	0x2001f208

0801a100 <memp_overflow_check_all>:
 *
 * @see memp_overflow_check_element for a description of the check
 */
static void
memp_overflow_check_all(void)
{
 801a100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a104:	4f12      	ldr	r7, [pc, #72]	; (801a150 <memp_overflow_check_all+0x50>)
 801a106:	2308      	movs	r3, #8
 801a108:	4c12      	ldr	r4, [pc, #72]	; (801a154 <memp_overflow_check_all+0x54>)
 801a10a:	4d13      	ldr	r5, [pc, #76]	; (801a158 <memp_overflow_check_all+0x58>)
 801a10c:	f107 083c 	add.w	r8, r7, #60	; 0x3c
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a110:	f8df 9048 	ldr.w	r9, [pc, #72]	; 801a15c <memp_overflow_check_all+0x5c>
  struct memp *p;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);

  for (i = 0; i < MEMP_MAX; ++i) {
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a114:	3403      	adds	r4, #3
 801a116:	f024 0403 	bic.w	r4, r4, #3
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a11a:	b183      	cbz	r3, 801a13e <memp_overflow_check_all+0x3e>
 801a11c:	88a9      	ldrh	r1, [r5, #4]
 801a11e:	2600      	movs	r6, #0
 801a120:	3601      	adds	r6, #1
  mem_overflow_check_raw((u8_t *)p + MEMP_SIZE, desc->size, "pool ", desc->desc);
 801a122:	f104 001c 	add.w	r0, r4, #28
 801a126:	682b      	ldr	r3, [r5, #0]
 801a128:	464a      	mov	r2, r9
 801a12a:	f7ff fc8d 	bl	8019a48 <mem_overflow_check_raw>
      memp_overflow_check_element(p, memp_pools[i]);
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a12e:	88a9      	ldrh	r1, [r5, #4]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a130:	88e8      	ldrh	r0, [r5, #6]
 801a132:	b2b3      	uxth	r3, r6
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a134:	f101 022c 	add.w	r2, r1, #44	; 0x2c
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a138:	4298      	cmp	r0, r3
      p = LWIP_ALIGNMENT_CAST(struct memp *, ((u8_t *)p + MEMP_SIZE + memp_pools[i]->size + MEM_SANITY_REGION_AFTER_ALIGNED));
 801a13a:	4414      	add	r4, r2
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a13c:	d8f0      	bhi.n	801a120 <memp_overflow_check_all+0x20>
  for (i = 0; i < MEMP_MAX; ++i) {
 801a13e:	45b8      	cmp	r8, r7
 801a140:	d004      	beq.n	801a14c <memp_overflow_check_all+0x4c>
    p = (struct memp *)LWIP_MEM_ALIGN(memp_pools[i]->base);
 801a142:	f857 5b04 	ldr.w	r5, [r7], #4
 801a146:	68ac      	ldr	r4, [r5, #8]
    for (j = 0; j < memp_pools[i]->num; ++j) {
 801a148:	88eb      	ldrh	r3, [r5, #6]
 801a14a:	e7e3      	b.n	801a114 <memp_overflow_check_all+0x14>
    }
  }
  SYS_ARCH_UNPROTECT(old_level);
}
 801a14c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a150:	080431c4 	.word	0x080431c4
 801a154:	20029998 	.word	0x20029998
 801a158:	08043130 	.word	0x08043130
 801a15c:	08042f34 	.word	0x08042f34

0801a160 <do_memp_free_pool>:
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801a160:	078b      	lsls	r3, r1, #30
{
 801a162:	b570      	push	{r4, r5, r6, lr}
 801a164:	460c      	mov	r4, r1
 801a166:	4605      	mov	r5, r0
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a168:	d11f      	bne.n	801a1aa <do_memp_free_pool+0x4a>
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801a16a:	68ea      	ldr	r2, [r5, #12]
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801a16c:	f1a4 031c 	sub.w	r3, r4, #28
  memp->next = *desc->tab;
 801a170:	6811      	ldr	r1, [r2, #0]
 801a172:	f844 1c1c 	str.w	r1, [r4, #-28]
  *desc->tab = memp;
 801a176:	6013      	str	r3, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a178:	f854 2c1c 	ldr.w	r2, [r4, #-28]
 801a17c:	b15a      	cbz	r2, 801a196 <do_memp_free_pool+0x36>
      if (t == h) {
 801a17e:	429a      	cmp	r2, r3
 801a180:	d105      	bne.n	801a18e <do_memp_free_pool+0x2e>
 801a182:	e009      	b.n	801a198 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a184:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a186:	b133      	cbz	r3, 801a196 <do_memp_free_pool+0x36>
 801a188:	b12a      	cbz	r2, 801a196 <do_memp_free_pool+0x36>
      if (t == h) {
 801a18a:	4293      	cmp	r3, r2
 801a18c:	d004      	beq.n	801a198 <do_memp_free_pool+0x38>
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a18e:	6812      	ldr	r2, [r2, #0]
    for (h = t->next; (t != NULL) && (h != NULL); t = t->next,
 801a190:	681b      	ldr	r3, [r3, #0]
         h = ((h->next != NULL) ? h->next->next : NULL)) {
 801a192:	2a00      	cmp	r2, #0
 801a194:	d1f6      	bne.n	801a184 <do_memp_free_pool+0x24>
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801a196:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a198:	4b08      	ldr	r3, [pc, #32]	; (801a1bc <do_memp_free_pool+0x5c>)
 801a19a:	f240 1285 	movw	r2, #389	; 0x185
 801a19e:	4908      	ldr	r1, [pc, #32]	; (801a1c0 <do_memp_free_pool+0x60>)
 801a1a0:	4808      	ldr	r0, [pc, #32]	; (801a1c4 <do_memp_free_pool+0x64>)
}
 801a1a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
 801a1a6:	f00a be55 	b.w	8024e54 <iprintf>
  LWIP_ASSERT("memp_free: mem properly aligned",
 801a1aa:	4b04      	ldr	r3, [pc, #16]	; (801a1bc <do_memp_free_pool+0x5c>)
 801a1ac:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801a1b0:	4905      	ldr	r1, [pc, #20]	; (801a1c8 <do_memp_free_pool+0x68>)
 801a1b2:	4804      	ldr	r0, [pc, #16]	; (801a1c4 <do_memp_free_pool+0x64>)
 801a1b4:	f00a fe4e 	bl	8024e54 <iprintf>
 801a1b8:	e7d7      	b.n	801a16a <do_memp_free_pool+0xa>
 801a1ba:	bf00      	nop
 801a1bc:	08042f3c 	.word	0x08042f3c
 801a1c0:	08042f8c 	.word	0x08042f8c
 801a1c4:	08029a64 	.word	0x08029a64
 801a1c8:	08042f6c 	.word	0x08042f6c

0801a1cc <memp_init_pool>:
{
 801a1cc:	b570      	push	{r4, r5, r6, lr}
  *desc->tab = NULL;
 801a1ce:	2200      	movs	r2, #0
  for (i = 0; i < desc->num; ++i) {
 801a1d0:	88c1      	ldrh	r1, [r0, #6]
  *desc->tab = NULL;
 801a1d2:	e9d0 4302 	ldrd	r4, r3, [r0, #8]
 801a1d6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a1d8:	b1b1      	cbz	r1, 801a208 <memp_init_pool+0x3c>
 801a1da:	3403      	adds	r4, #3
 801a1dc:	4605      	mov	r5, r0
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a1de:	8881      	ldrh	r1, [r0, #4]
  for (i = 0; i < desc->num; ++i) {
 801a1e0:	4616      	mov	r6, r2
 801a1e2:	f024 0403 	bic.w	r4, r4, #3
 801a1e6:	e001      	b.n	801a1ec <memp_init_pool+0x20>
    memp->next = *desc->tab;
 801a1e8:	68eb      	ldr	r3, [r5, #12]
 801a1ea:	681a      	ldr	r2, [r3, #0]
 801a1ec:	6022      	str	r2, [r4, #0]
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a1ee:	f104 001c 	add.w	r0, r4, #28
    *desc->tab = memp;
 801a1f2:	601c      	str	r4, [r3, #0]
  for (i = 0; i < desc->num; ++i) {
 801a1f4:	3601      	adds	r6, #1
  mem_overflow_init_raw((u8_t *)p + MEMP_SIZE, desc->size);
 801a1f6:	f7ff fc73 	bl	8019ae0 <mem_overflow_init_raw>
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a1fa:	88a9      	ldrh	r1, [r5, #4]
  for (i = 0; i < desc->num; ++i) {
 801a1fc:	88eb      	ldrh	r3, [r5, #6]
                                   + MEM_SANITY_REGION_AFTER_ALIGNED
 801a1fe:	f101 022c 	add.w	r2, r1, #44	; 0x2c
  for (i = 0; i < desc->num; ++i) {
 801a202:	42b3      	cmp	r3, r6
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801a204:	4414      	add	r4, r2
  for (i = 0; i < desc->num; ++i) {
 801a206:	dcef      	bgt.n	801a1e8 <memp_init_pool+0x1c>
}
 801a208:	bd70      	pop	{r4, r5, r6, pc}
 801a20a:	bf00      	nop

0801a20c <memp_init>:
{
 801a20c:	b538      	push	{r3, r4, r5, lr}
 801a20e:	4c07      	ldr	r4, [pc, #28]	; (801a22c <memp_init+0x20>)
 801a210:	4807      	ldr	r0, [pc, #28]	; (801a230 <memp_init+0x24>)
 801a212:	f104 053c 	add.w	r5, r4, #60	; 0x3c
 801a216:	e001      	b.n	801a21c <memp_init+0x10>
    memp_init_pool(memp_pools[i]);
 801a218:	f854 0b04 	ldr.w	r0, [r4], #4
 801a21c:	f7ff ffd6 	bl	801a1cc <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801a220:	42ac      	cmp	r4, r5
 801a222:	d1f9      	bne.n	801a218 <memp_init+0xc>
}
 801a224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  memp_overflow_check_all();
 801a228:	f7ff bf6a 	b.w	801a100 <memp_overflow_check_all>
 801a22c:	080431c4 	.word	0x080431c4
 801a230:	08043130 	.word	0x08043130

0801a234 <memp_malloc_fn>:
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a234:	280f      	cmp	r0, #15
{
 801a236:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a238:	d81d      	bhi.n	801a276 <memp_malloc_fn+0x42>
  memp_overflow_check_all();
 801a23a:	4604      	mov	r4, r0
 801a23c:	460e      	mov	r6, r1
 801a23e:	4615      	mov	r5, r2
 801a240:	f7ff ff5e 	bl	801a100 <memp_overflow_check_all>
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
 801a244:	4b11      	ldr	r3, [pc, #68]	; (801a28c <memp_malloc_fn+0x58>)
 801a246:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801a24a:	68db      	ldr	r3, [r3, #12]
  memp = *desc->tab;
 801a24c:	681c      	ldr	r4, [r3, #0]
  if (memp != NULL) {
 801a24e:	b144      	cbz	r4, 801a262 <memp_malloc_fn+0x2e>
    *desc->tab = memp->next;
 801a250:	6822      	ldr	r2, [r4, #0]
 801a252:	601a      	str	r2, [r3, #0]
    memp->next = NULL;
 801a254:	2300      	movs	r3, #0
 801a256:	6023      	str	r3, [r4, #0]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a258:	07a3      	lsls	r3, r4, #30
    memp->line = line;
 801a25a:	e9c4 6501 	strd	r6, r5, [r4, #4]
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a25e:	d102      	bne.n	801a266 <memp_malloc_fn+0x32>
    return ((u8_t *)memp + MEMP_SIZE);
 801a260:	341c      	adds	r4, #28
}
 801a262:	4620      	mov	r0, r4
 801a264:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801a266:	4b0a      	ldr	r3, [pc, #40]	; (801a290 <memp_malloc_fn+0x5c>)
 801a268:	f44f 728c 	mov.w	r2, #280	; 0x118
 801a26c:	4909      	ldr	r1, [pc, #36]	; (801a294 <memp_malloc_fn+0x60>)
 801a26e:	480a      	ldr	r0, [pc, #40]	; (801a298 <memp_malloc_fn+0x64>)
 801a270:	f00a fdf0 	bl	8024e54 <iprintf>
 801a274:	e7f4      	b.n	801a260 <memp_malloc_fn+0x2c>
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801a276:	2400      	movs	r4, #0
 801a278:	4b05      	ldr	r3, [pc, #20]	; (801a290 <memp_malloc_fn+0x5c>)
 801a27a:	f240 1257 	movw	r2, #343	; 0x157
 801a27e:	4907      	ldr	r1, [pc, #28]	; (801a29c <memp_malloc_fn+0x68>)
 801a280:	4805      	ldr	r0, [pc, #20]	; (801a298 <memp_malloc_fn+0x64>)
 801a282:	f00a fde7 	bl	8024e54 <iprintf>
}
 801a286:	4620      	mov	r0, r4
 801a288:	bd70      	pop	{r4, r5, r6, pc}
 801a28a:	bf00      	nop
 801a28c:	080431c0 	.word	0x080431c0
 801a290:	08042f3c 	.word	0x08042f3c
 801a294:	08042fac 	.word	0x08042fac
 801a298:	08029a64 	.word	0x08029a64
 801a29c:	08042fd0 	.word	0x08042fd0

0801a2a0 <memp_free>:
{
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a2a0:	280f      	cmp	r0, #15
 801a2a2:	d80e      	bhi.n	801a2c2 <memp_free+0x22>
{
 801a2a4:	b570      	push	{r4, r5, r6, lr}
 801a2a6:	460d      	mov	r5, r1

  if (mem == NULL) {
 801a2a8:	b151      	cbz	r1, 801a2c0 <memp_free+0x20>
    return;
  }

#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
 801a2aa:	4604      	mov	r4, r0
 801a2ac:	f7ff ff28 	bl	801a100 <memp_overflow_check_all>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801a2b0:	4b07      	ldr	r3, [pc, #28]	; (801a2d0 <memp_free+0x30>)
 801a2b2:	4629      	mov	r1, r5
 801a2b4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801a2b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  do_memp_free_pool(memp_pools[type], mem);
 801a2bc:	f7ff bf50 	b.w	801a160 <do_memp_free_pool>
}
 801a2c0:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801a2c2:	4b04      	ldr	r3, [pc, #16]	; (801a2d4 <memp_free+0x34>)
 801a2c4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801a2c8:	4903      	ldr	r1, [pc, #12]	; (801a2d8 <memp_free+0x38>)
 801a2ca:	4804      	ldr	r0, [pc, #16]	; (801a2dc <memp_free+0x3c>)
 801a2cc:	f00a bdc2 	b.w	8024e54 <iprintf>
 801a2d0:	080431c0 	.word	0x080431c0
 801a2d4:	08042f3c 	.word	0x08042f3c
 801a2d8:	08042ff0 	.word	0x08042ff0
 801a2dc:	08029a64 	.word	0x08029a64

0801a2e0 <netif_null_output_ip4>:
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
}
 801a2e0:	f06f 000b 	mvn.w	r0, #11
 801a2e4:	4770      	bx	lr
 801a2e6:	bf00      	nop

0801a2e8 <netif_issue_reports>:
{
 801a2e8:	b510      	push	{r4, lr}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a2ea:	4604      	mov	r4, r0
 801a2ec:	b150      	cbz	r0, 801a304 <netif_issue_reports+0x1c>
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801a2ee:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 801a2f2:	f003 0205 	and.w	r2, r3, #5
 801a2f6:	2a05      	cmp	r2, #5
 801a2f8:	d103      	bne.n	801a302 <netif_issue_reports+0x1a>
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801a2fa:	6862      	ldr	r2, [r4, #4]
 801a2fc:	b10a      	cbz	r2, 801a302 <netif_issue_reports+0x1a>
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801a2fe:	071b      	lsls	r3, r3, #28
 801a300:	d408      	bmi.n	801a314 <netif_issue_reports+0x2c>
}
 801a302:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801a304:	4b06      	ldr	r3, [pc, #24]	; (801a320 <netif_issue_reports+0x38>)
 801a306:	f240 326d 	movw	r2, #877	; 0x36d
 801a30a:	4906      	ldr	r1, [pc, #24]	; (801a324 <netif_issue_reports+0x3c>)
 801a30c:	4806      	ldr	r0, [pc, #24]	; (801a328 <netif_issue_reports+0x40>)
 801a30e:	f00a fda1 	bl	8024e54 <iprintf>
 801a312:	e7ec      	b.n	801a2ee <netif_issue_reports+0x6>
      etharp_gratuitous(netif);
 801a314:	1d21      	adds	r1, r4, #4
 801a316:	4620      	mov	r0, r4
}
 801a318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      etharp_gratuitous(netif);
 801a31c:	f007 bfac 	b.w	8022278 <etharp_request>
 801a320:	08043200 	.word	0x08043200
 801a324:	08043234 	.word	0x08043234
 801a328:	08029a64 	.word	0x08029a64

0801a32c <netif_do_set_ipaddr.isra.0>:
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a32c:	b570      	push	{r4, r5, r6, lr}
 801a32e:	4605      	mov	r5, r0
 801a330:	b082      	sub	sp, #8
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a332:	460c      	mov	r4, r1
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
 801a334:	4616      	mov	r6, r2
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a336:	b301      	cbz	r1, 801a37a <netif_do_set_ipaddr.isra.0+0x4e>
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801a338:	686b      	ldr	r3, [r5, #4]
 801a33a:	6822      	ldr	r2, [r4, #0]
 801a33c:	429a      	cmp	r2, r3
 801a33e:	d101      	bne.n	801a344 <netif_do_set_ipaddr.isra.0+0x18>
}
 801a340:	b002      	add	sp, #8
 801a342:	bd70      	pop	{r4, r5, r6, pc}
    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801a344:	6033      	str	r3, [r6, #0]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a346:	4630      	mov	r0, r6
 801a348:	a901      	add	r1, sp, #4
    *ip_2_ip4(&new_addr) = *ipaddr;
 801a34a:	9201      	str	r2, [sp, #4]
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801a34c:	f002 fa5a 	bl	801c804 <tcp_netif_ip_addr_changed>
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801a350:	a901      	add	r1, sp, #4
 801a352:	4630      	mov	r0, r6
 801a354:	f005 fde4 	bl	801ff20 <udp_netif_ip_addr_changed>
  raw_netif_ip_addr_changed(old_addr, new_addr);
 801a358:	a901      	add	r1, sp, #4
 801a35a:	4630      	mov	r0, r6
 801a35c:	f000 ff6c 	bl	801b238 <raw_netif_ip_addr_changed>
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a360:	6823      	ldr	r3, [r4, #0]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a362:	2101      	movs	r1, #1
 801a364:	4628      	mov	r0, r5
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801a366:	606b      	str	r3, [r5, #4]
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801a368:	f7ff ffbe 	bl	801a2e8 <netif_issue_reports>
    NETIF_STATUS_CALLBACK(netif);
 801a36c:	69eb      	ldr	r3, [r5, #28]
 801a36e:	2b00      	cmp	r3, #0
 801a370:	d0e6      	beq.n	801a340 <netif_do_set_ipaddr.isra.0+0x14>
 801a372:	4628      	mov	r0, r5
 801a374:	4798      	blx	r3
}
 801a376:	b002      	add	sp, #8
 801a378:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801a37a:	4b04      	ldr	r3, [pc, #16]	; (801a38c <netif_do_set_ipaddr.isra.0+0x60>)
 801a37c:	f240 12cb 	movw	r2, #459	; 0x1cb
 801a380:	4903      	ldr	r1, [pc, #12]	; (801a390 <netif_do_set_ipaddr.isra.0+0x64>)
 801a382:	4804      	ldr	r0, [pc, #16]	; (801a394 <netif_do_set_ipaddr.isra.0+0x68>)
 801a384:	f00a fd66 	bl	8024e54 <iprintf>
 801a388:	e7d6      	b.n	801a338 <netif_do_set_ipaddr.isra.0+0xc>
 801a38a:	bf00      	nop
 801a38c:	08043200 	.word	0x08043200
 801a390:	08043258 	.word	0x08043258
 801a394:	08029a64 	.word	0x08029a64

0801a398 <netif_init>:
}
 801a398:	4770      	bx	lr
 801a39a:	bf00      	nop

0801a39c <netif_set_addr>:
{
 801a39c:	b5f0      	push	{r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY4;
 801a39e:	2900      	cmp	r1, #0
{
 801a3a0:	461f      	mov	r7, r3
    ipaddr = IP4_ADDR_ANY4;
 801a3a2:	4b16      	ldr	r3, [pc, #88]	; (801a3fc <netif_set_addr+0x60>)
  if (ipaddr == NULL) {
 801a3a4:	460c      	mov	r4, r1
{
 801a3a6:	b083      	sub	sp, #12
 801a3a8:	4605      	mov	r5, r0
    ipaddr = IP4_ADDR_ANY4;
 801a3aa:	bf14      	ite	ne
 801a3ac:	460c      	movne	r4, r1
 801a3ae:	461c      	moveq	r4, r3
  if (netmask == NULL) {
 801a3b0:	b30a      	cbz	r2, 801a3f6 <netif_set_addr+0x5a>
 801a3b2:	4616      	mov	r6, r2
  if (gw == NULL) {
 801a3b4:	b1ef      	cbz	r7, 801a3f2 <netif_set_addr+0x56>
  remove = ip4_addr_isany(ipaddr);
 801a3b6:	6823      	ldr	r3, [r4, #0]
 801a3b8:	b993      	cbnz	r3, 801a3e0 <netif_set_addr+0x44>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a3ba:	4621      	mov	r1, r4
 801a3bc:	aa01      	add	r2, sp, #4
 801a3be:	4628      	mov	r0, r5
 801a3c0:	f7ff ffb4 	bl	801a32c <netif_do_set_ipaddr.isra.0>
 801a3c4:	2101      	movs	r1, #1
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801a3c6:	6833      	ldr	r3, [r6, #0]
 801a3c8:	68aa      	ldr	r2, [r5, #8]
 801a3ca:	4293      	cmp	r3, r2
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a3cc:	68ea      	ldr	r2, [r5, #12]
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801a3ce:	bf18      	it	ne
 801a3d0:	60ab      	strne	r3, [r5, #8]
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801a3d2:	683b      	ldr	r3, [r7, #0]
 801a3d4:	4293      	cmp	r3, r2
    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801a3d6:	bf18      	it	ne
 801a3d8:	60eb      	strne	r3, [r5, #12]
  if (!remove) {
 801a3da:	b119      	cbz	r1, 801a3e4 <netif_set_addr+0x48>
}
 801a3dc:	b003      	add	sp, #12
 801a3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
  remove = ip4_addr_isany(ipaddr);
 801a3e0:	2100      	movs	r1, #0
 801a3e2:	e7f0      	b.n	801a3c6 <netif_set_addr+0x2a>
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801a3e4:	aa01      	add	r2, sp, #4
 801a3e6:	4621      	mov	r1, r4
 801a3e8:	4628      	mov	r0, r5
 801a3ea:	f7ff ff9f 	bl	801a32c <netif_do_set_ipaddr.isra.0>
}
 801a3ee:	b003      	add	sp, #12
 801a3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    gw = IP4_ADDR_ANY4;
 801a3f2:	4f02      	ldr	r7, [pc, #8]	; (801a3fc <netif_set_addr+0x60>)
 801a3f4:	e7df      	b.n	801a3b6 <netif_set_addr+0x1a>
    netmask = IP4_ADDR_ANY4;
 801a3f6:	461e      	mov	r6, r3
 801a3f8:	e7dc      	b.n	801a3b4 <netif_set_addr+0x18>
 801a3fa:	bf00      	nop
 801a3fc:	08045328 	.word	0x08045328

0801a400 <netif_add>:
{
 801a400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a406:	4606      	mov	r6, r0
 801a408:	2800      	cmp	r0, #0
 801a40a:	f000 8081 	beq.w	801a510 <netif_add+0x110>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a40e:	2d00      	cmp	r5, #0
 801a410:	f000 8087 	beq.w	801a522 <netif_add+0x122>
  if (ipaddr == NULL) {
 801a414:	2900      	cmp	r1, #0
 801a416:	d06f      	beq.n	801a4f8 <netif_add+0xf8>
  if (netmask == NULL) {
 801a418:	2a00      	cmp	r2, #0
 801a41a:	d068      	beq.n	801a4ee <netif_add+0xee>
  if (gw == NULL) {
 801a41c:	2b00      	cmp	r3, #0
 801a41e:	d069      	beq.n	801a4f4 <netif_add+0xf4>
  netif->state = state;
 801a420:	980a      	ldr	r0, [sp, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801a422:	2400      	movs	r4, #0
  netif->num = netif_num;
 801a424:	f8df a128 	ldr.w	sl, [pc, #296]	; 801a550 <netif_add+0x150>
  netif->state = state;
 801a428:	6270      	str	r0, [r6, #36]	; 0x24
  netif->input = input;
 801a42a:	980c      	ldr	r0, [sp, #48]	; 0x30
  ip_addr_set_zero_ip4(&netif->gw);
 801a42c:	60f4      	str	r4, [r6, #12]
  netif->input = input;
 801a42e:	6130      	str	r0, [r6, #16]
  netif->num = netif_num;
 801a430:	f89a 0000 	ldrb.w	r0, [sl]
  netif->mtu = 0;
 801a434:	85b4      	strh	r4, [r6, #44]	; 0x2c
  netif->num = netif_num;
 801a436:	f886 0038 	strb.w	r0, [r6, #56]	; 0x38
  netif->output = netif_null_output_ip4;
 801a43a:	483e      	ldr	r0, [pc, #248]	; (801a534 <netif_add+0x134>)
  netif->flags = 0;
 801a43c:	f886 4035 	strb.w	r4, [r6, #53]	; 0x35
  netif->output = netif_null_output_ip4;
 801a440:	6170      	str	r0, [r6, #20]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a442:	4630      	mov	r0, r6
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801a444:	62b4      	str	r4, [r6, #40]	; 0x28
  ip_addr_set_zero_ip4(&netif->netmask);
 801a446:	e9c6 4401 	strd	r4, r4, [r6, #4]
  netif->link_callback = NULL;
 801a44a:	e9c6 4407 	strd	r4, r4, [r6, #28]
  netif_set_addr(netif, ipaddr, netmask, gw);
 801a44e:	f7ff ffa5 	bl	801a39c <netif_set_addr>
  if (init(netif) != ERR_OK) {
 801a452:	4630      	mov	r0, r6
 801a454:	47a8      	blx	r5
 801a456:	2800      	cmp	r0, #0
 801a458:	d157      	bne.n	801a50a <netif_add+0x10a>
      if (netif->num == 255) {
 801a45a:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
 801a45e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801a554 <netif_add+0x154>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a462:	f8df b0e0 	ldr.w	fp, [pc, #224]	; 801a544 <netif_add+0x144>
 801a466:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 801a558 <netif_add+0x158>
 801a46a:	4f33      	ldr	r7, [pc, #204]	; (801a538 <netif_add+0x138>)
      if (netif->num == 255) {
 801a46c:	2aff      	cmp	r2, #255	; 0xff
 801a46e:	d102      	bne.n	801a476 <netif_add+0x76>
        netif->num = 0;
 801a470:	2300      	movs	r3, #0
 801a472:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a476:	f8d8 4000 	ldr.w	r4, [r8]
 801a47a:	2c00      	cmp	r4, #0
 801a47c:	d042      	beq.n	801a504 <netif_add+0x104>
      num_netifs = 0;
 801a47e:	2500      	movs	r5, #0
 801a480:	e007      	b.n	801a492 <netif_add+0x92>
        if (netif2->num == netif->num) {
 801a482:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a486:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a48a:	429a      	cmp	r2, r3
 801a48c:	d014      	beq.n	801a4b8 <netif_add+0xb8>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801a48e:	6824      	ldr	r4, [r4, #0]
 801a490:	b1fc      	cbz	r4, 801a4d2 <netif_add+0xd2>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a492:	42a6      	cmp	r6, r4
        num_netifs++;
 801a494:	f105 0501 	add.w	r5, r5, #1
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a498:	d013      	beq.n	801a4c2 <netif_add+0xc2>
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801a49a:	2dff      	cmp	r5, #255	; 0xff
 801a49c:	ddf1      	ble.n	801a482 <netif_add+0x82>
 801a49e:	465b      	mov	r3, fp
 801a4a0:	f240 128d 	movw	r2, #397	; 0x18d
 801a4a4:	4925      	ldr	r1, [pc, #148]	; (801a53c <netif_add+0x13c>)
 801a4a6:	4638      	mov	r0, r7
 801a4a8:	f00a fcd4 	bl	8024e54 <iprintf>
        if (netif2->num == netif->num) {
 801a4ac:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 801a4b0:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a4b4:	429a      	cmp	r2, r3
 801a4b6:	d1ea      	bne.n	801a48e <netif_add+0x8e>
          netif->num++;
 801a4b8:	3201      	adds	r2, #1
 801a4ba:	b2d2      	uxtb	r2, r2
 801a4bc:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
    } while (netif2 != NULL);
 801a4c0:	e7d4      	b.n	801a46c <netif_add+0x6c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801a4c2:	465b      	mov	r3, fp
 801a4c4:	f240 128b 	movw	r2, #395	; 0x18b
 801a4c8:	4649      	mov	r1, r9
 801a4ca:	4638      	mov	r0, r7
 801a4cc:	f00a fcc2 	bl	8024e54 <iprintf>
 801a4d0:	e7e3      	b.n	801a49a <netif_add+0x9a>
  netif->next = netif_list;
 801a4d2:	f8d8 4000 	ldr.w	r4, [r8]
  if (netif->num == 254) {
 801a4d6:	2bfe      	cmp	r3, #254	; 0xfe
 801a4d8:	d012      	beq.n	801a500 <netif_add+0x100>
    netif_num = (u8_t)(netif->num + 1);
 801a4da:	3301      	adds	r3, #1
 801a4dc:	b2db      	uxtb	r3, r3
  return netif;
 801a4de:	4630      	mov	r0, r6
  netif->next = netif_list;
 801a4e0:	6034      	str	r4, [r6, #0]
 801a4e2:	f88a 3000 	strb.w	r3, [sl]
  netif_list = netif;
 801a4e6:	f8c8 6000 	str.w	r6, [r8]
}
 801a4ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801a4ee:	4a14      	ldr	r2, [pc, #80]	; (801a540 <netif_add+0x140>)
  if (gw == NULL) {
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d195      	bne.n	801a420 <netif_add+0x20>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801a4f4:	4b12      	ldr	r3, [pc, #72]	; (801a540 <netif_add+0x140>)
 801a4f6:	e793      	b.n	801a420 <netif_add+0x20>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801a4f8:	4911      	ldr	r1, [pc, #68]	; (801a540 <netif_add+0x140>)
  if (netmask == NULL) {
 801a4fa:	2a00      	cmp	r2, #0
 801a4fc:	d18e      	bne.n	801a41c <netif_add+0x1c>
 801a4fe:	e7f6      	b.n	801a4ee <netif_add+0xee>
    netif_num = 0;
 801a500:	2300      	movs	r3, #0
 801a502:	e7ec      	b.n	801a4de <netif_add+0xde>
  if (netif->num == 254) {
 801a504:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
 801a508:	e7e5      	b.n	801a4d6 <netif_add+0xd6>
    return NULL;
 801a50a:	4620      	mov	r0, r4
}
 801a50c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801a510:	4b0c      	ldr	r3, [pc, #48]	; (801a544 <netif_add+0x144>)
 801a512:	f240 1227 	movw	r2, #295	; 0x127
 801a516:	490c      	ldr	r1, [pc, #48]	; (801a548 <netif_add+0x148>)
 801a518:	4807      	ldr	r0, [pc, #28]	; (801a538 <netif_add+0x138>)
 801a51a:	f00a fc9b 	bl	8024e54 <iprintf>
 801a51e:	4630      	mov	r0, r6
 801a520:	e7e3      	b.n	801a4ea <netif_add+0xea>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801a522:	4b08      	ldr	r3, [pc, #32]	; (801a544 <netif_add+0x144>)
 801a524:	f44f 7294 	mov.w	r2, #296	; 0x128
 801a528:	4908      	ldr	r1, [pc, #32]	; (801a54c <netif_add+0x14c>)
 801a52a:	4803      	ldr	r0, [pc, #12]	; (801a538 <netif_add+0x138>)
 801a52c:	f00a fc92 	bl	8024e54 <iprintf>
 801a530:	4628      	mov	r0, r5
 801a532:	e7da      	b.n	801a4ea <netif_add+0xea>
 801a534:	0801a2e1 	.word	0x0801a2e1
 801a538:	08029a64 	.word	0x08029a64
 801a53c:	080432bc 	.word	0x080432bc
 801a540:	08045328 	.word	0x08045328
 801a544:	08043200 	.word	0x08043200
 801a548:	08043268 	.word	0x08043268
 801a54c:	08043284 	.word	0x08043284
 801a550:	2002e384 	.word	0x2002e384
 801a554:	2002e380 	.word	0x2002e380
 801a558:	080432a8 	.word	0x080432a8

0801a55c <netif_set_default>:
  netif_default = netif;
 801a55c:	4b01      	ldr	r3, [pc, #4]	; (801a564 <netif_set_default+0x8>)
 801a55e:	6018      	str	r0, [r3, #0]
}
 801a560:	4770      	bx	lr
 801a562:	bf00      	nop
 801a564:	2002e37c 	.word	0x2002e37c

0801a568 <netif_set_up>:
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a568:	b198      	cbz	r0, 801a592 <netif_set_up+0x2a>
{
 801a56a:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_UP)) {
 801a56c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a570:	4604      	mov	r4, r0
 801a572:	07da      	lsls	r2, r3, #31
 801a574:	d40c      	bmi.n	801a590 <netif_set_up+0x28>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a576:	f043 0301 	orr.w	r3, r3, #1
    NETIF_STATUS_CALLBACK(netif);
 801a57a:	69c2      	ldr	r2, [r0, #28]
    netif_set_flags(netif, NETIF_FLAG_UP);
 801a57c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    NETIF_STATUS_CALLBACK(netif);
 801a580:	b102      	cbz	r2, 801a584 <netif_set_up+0x1c>
 801a582:	4790      	blx	r2
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a584:	4620      	mov	r0, r4
 801a586:	2103      	movs	r1, #3
}
 801a588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a58c:	f7ff beac 	b.w	801a2e8 <netif_issue_reports>
}
 801a590:	bd10      	pop	{r4, pc}
  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801a592:	4b03      	ldr	r3, [pc, #12]	; (801a5a0 <netif_set_up+0x38>)
 801a594:	f44f 7254 	mov.w	r2, #848	; 0x350
 801a598:	4902      	ldr	r1, [pc, #8]	; (801a5a4 <netif_set_up+0x3c>)
 801a59a:	4803      	ldr	r0, [pc, #12]	; (801a5a8 <netif_set_up+0x40>)
 801a59c:	f00a bc5a 	b.w	8024e54 <iprintf>
 801a5a0:	08043200 	.word	0x08043200
 801a5a4:	080432ec 	.word	0x080432ec
 801a5a8:	08029a64 	.word	0x08029a64

0801a5ac <netif_set_down>:
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a5ac:	b1a8      	cbz	r0, 801a5da <netif_set_down+0x2e>
{
 801a5ae:	b510      	push	{r4, lr}
  if (netif->flags & NETIF_FLAG_UP) {
 801a5b0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a5b4:	4604      	mov	r4, r0
 801a5b6:	07da      	lsls	r2, r3, #31
 801a5b8:	d50b      	bpl.n	801a5d2 <netif_set_down+0x26>
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a5ba:	f023 0201 	bic.w	r2, r3, #1
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a5be:	071b      	lsls	r3, r3, #28
    netif_clear_flags(netif, NETIF_FLAG_UP);
 801a5c0:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801a5c4:	d406      	bmi.n	801a5d4 <netif_set_down+0x28>
    NETIF_STATUS_CALLBACK(netif);
 801a5c6:	69e3      	ldr	r3, [r4, #28]
 801a5c8:	b11b      	cbz	r3, 801a5d2 <netif_set_down+0x26>
 801a5ca:	4620      	mov	r0, r4
}
 801a5cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_STATUS_CALLBACK(netif);
 801a5d0:	4718      	bx	r3
}
 801a5d2:	bd10      	pop	{r4, pc}
      etharp_cleanup_netif(netif);
 801a5d4:	f007 fbc8 	bl	8021d68 <etharp_cleanup_netif>
 801a5d8:	e7f5      	b.n	801a5c6 <netif_set_down+0x1a>
  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801a5da:	4b03      	ldr	r3, [pc, #12]	; (801a5e8 <netif_set_down+0x3c>)
 801a5dc:	f240 329b 	movw	r2, #923	; 0x39b
 801a5e0:	4902      	ldr	r1, [pc, #8]	; (801a5ec <netif_set_down+0x40>)
 801a5e2:	4803      	ldr	r0, [pc, #12]	; (801a5f0 <netif_set_down+0x44>)
 801a5e4:	f00a bc36 	b.w	8024e54 <iprintf>
 801a5e8:	08043200 	.word	0x08043200
 801a5ec:	08043308 	.word	0x08043308
 801a5f0:	08029a64 	.word	0x08029a64

0801a5f4 <netif_set_status_callback>:
  if (netif) {
 801a5f4:	b100      	cbz	r0, 801a5f8 <netif_set_status_callback+0x4>
    netif->status_callback = status_callback;
 801a5f6:	61c1      	str	r1, [r0, #28]
}
 801a5f8:	4770      	bx	lr
 801a5fa:	bf00      	nop

0801a5fc <netif_set_link_up>:
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a5fc:	b1b8      	cbz	r0, 801a62e <netif_set_link_up+0x32>
{
 801a5fe:	b510      	push	{r4, lr}
  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801a600:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 801a604:	4604      	mov	r4, r0
 801a606:	075a      	lsls	r2, r3, #29
 801a608:	d500      	bpl.n	801a60c <netif_set_link_up+0x10>
}
 801a60a:	bd10      	pop	{r4, pc}
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801a60c:	f043 0304 	orr.w	r3, r3, #4
 801a610:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    dhcp_network_changed(netif);
 801a614:	f006 fd96 	bl	8021144 <dhcp_network_changed>
    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801a618:	2103      	movs	r1, #3
 801a61a:	4620      	mov	r0, r4
 801a61c:	f7ff fe64 	bl	801a2e8 <netif_issue_reports>
    NETIF_LINK_CALLBACK(netif);
 801a620:	6a23      	ldr	r3, [r4, #32]
 801a622:	2b00      	cmp	r3, #0
 801a624:	d0f1      	beq.n	801a60a <netif_set_link_up+0xe>
 801a626:	4620      	mov	r0, r4
}
 801a628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    NETIF_LINK_CALLBACK(netif);
 801a62c:	4718      	bx	r3
  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801a62e:	4b03      	ldr	r3, [pc, #12]	; (801a63c <netif_set_link_up+0x40>)
 801a630:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801a634:	4902      	ldr	r1, [pc, #8]	; (801a640 <netif_set_link_up+0x44>)
 801a636:	4803      	ldr	r0, [pc, #12]	; (801a644 <netif_set_link_up+0x48>)
 801a638:	f00a bc0c 	b.w	8024e54 <iprintf>
 801a63c:	08043200 	.word	0x08043200
 801a640:	08043328 	.word	0x08043328
 801a644:	08029a64 	.word	0x08029a64

0801a648 <netif_set_link_down>:
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a648:	b158      	cbz	r0, 801a662 <netif_set_link_down+0x1a>
  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801a64a:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 801a64e:	0751      	lsls	r1, r2, #29
 801a650:	d506      	bpl.n	801a660 <netif_set_link_down+0x18>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a652:	f022 0204 	bic.w	r2, r2, #4
    NETIF_LINK_CALLBACK(netif);
 801a656:	6a01      	ldr	r1, [r0, #32]
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801a658:	f880 2035 	strb.w	r2, [r0, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 801a65c:	b101      	cbz	r1, 801a660 <netif_set_link_down+0x18>
 801a65e:	4708      	bx	r1
}
 801a660:	4770      	bx	lr
  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801a662:	4b03      	ldr	r3, [pc, #12]	; (801a670 <netif_set_link_down+0x28>)
 801a664:	f240 4206 	movw	r2, #1030	; 0x406
 801a668:	4902      	ldr	r1, [pc, #8]	; (801a674 <netif_set_link_down+0x2c>)
 801a66a:	4803      	ldr	r0, [pc, #12]	; (801a678 <netif_set_link_down+0x30>)
 801a66c:	f00a bbf2 	b.w	8024e54 <iprintf>
 801a670:	08043200 	.word	0x08043200
 801a674:	0804334c 	.word	0x0804334c
 801a678:	08029a64 	.word	0x08029a64

0801a67c <netif_set_link_callback>:
  if (netif) {
 801a67c:	b100      	cbz	r0, 801a680 <netif_set_link_callback+0x4>
    netif->link_callback = link_callback;
 801a67e:	6201      	str	r1, [r0, #32]
}
 801a680:	4770      	bx	lr
 801a682:	bf00      	nop

0801a684 <netif_get_by_index>:
{
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801a684:	4602      	mov	r2, r0
 801a686:	b158      	cbz	r0, 801a6a0 <netif_get_by_index+0x1c>
    NETIF_FOREACH(netif) {
 801a688:	4b06      	ldr	r3, [pc, #24]	; (801a6a4 <netif_get_by_index+0x20>)
 801a68a:	6818      	ldr	r0, [r3, #0]
 801a68c:	b910      	cbnz	r0, 801a694 <netif_get_by_index+0x10>
 801a68e:	e007      	b.n	801a6a0 <netif_get_by_index+0x1c>
 801a690:	6800      	ldr	r0, [r0, #0]
 801a692:	b130      	cbz	r0, 801a6a2 <netif_get_by_index+0x1e>
      if (idx == netif_get_index(netif)) {
 801a694:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 801a698:	3301      	adds	r3, #1
 801a69a:	b2db      	uxtb	r3, r3
 801a69c:	4293      	cmp	r3, r2
 801a69e:	d1f7      	bne.n	801a690 <netif_get_by_index+0xc>
      }
    }
  }

  return NULL;
}
 801a6a0:	4770      	bx	lr
 801a6a2:	4770      	bx	lr
 801a6a4:	2002e380 	.word	0x2002e380

0801a6a8 <pbuf_free_ooseq_callback>:
pbuf_free_ooseq(void)
{
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a6a8:	4907      	ldr	r1, [pc, #28]	; (801a6c8 <pbuf_free_ooseq_callback+0x20>)
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a6aa:	2200      	movs	r2, #0
 801a6ac:	4b07      	ldr	r3, [pc, #28]	; (801a6cc <pbuf_free_ooseq_callback+0x24>)
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a6ae:	6808      	ldr	r0, [r1, #0]
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801a6b0:	701a      	strb	r2, [r3, #0]
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801a6b2:	b910      	cbnz	r0, 801a6ba <pbuf_free_ooseq_callback+0x12>
 801a6b4:	e006      	b.n	801a6c4 <pbuf_free_ooseq_callback+0x1c>
 801a6b6:	68c0      	ldr	r0, [r0, #12]
 801a6b8:	b120      	cbz	r0, 801a6c4 <pbuf_free_ooseq_callback+0x1c>
    if (pcb->ooseq != NULL) {
 801a6ba:	6f43      	ldr	r3, [r0, #116]	; 0x74
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d0fa      	beq.n	801a6b6 <pbuf_free_ooseq_callback+0xe>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801a6c0:	f002 b8ca 	b.w	801c858 <tcp_free_ooseq>
static void
pbuf_free_ooseq_callback(void *arg)
{
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
}
 801a6c4:	4770      	bx	lr
 801a6c6:	bf00      	nop
 801a6c8:	2002e38c 	.word	0x2002e38c
 801a6cc:	2002e385 	.word	0x2002e385

0801a6d0 <pbuf_free.part.0>:
 * 2->1->1 becomes 1->1->1
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
 801a6d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  PERF_START;

  count = 0;
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801a6d4:	4604      	mov	r4, r0
 801a6d6:	2800      	cmp	r0, #0
 801a6d8:	d052      	beq.n	801a780 <pbuf_free.part.0+0xb0>
  count = 0;
 801a6da:	2500      	movs	r5, #0
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a6dc:	4f29      	ldr	r7, [pc, #164]	; (801a784 <pbuf_free.part.0+0xb4>)
 801a6de:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 801a794 <pbuf_free.part.0+0xc4>
 801a6e2:	4e29      	ldr	r6, [pc, #164]	; (801a788 <pbuf_free.part.0+0xb8>)
 801a6e4:	e00a      	b.n	801a6fc <pbuf_free.part.0+0x2c>
      alloc_src = pbuf_get_allocsrc(p);
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a6e6:	6923      	ldr	r3, [r4, #16]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d03b      	beq.n	801a764 <pbuf_free.part.0+0x94>
        pc->custom_free_function(p);
 801a6ec:	4620      	mov	r0, r4
 801a6ee:	4798      	blx	r3
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
        }
      }
      count++;
 801a6f0:	3501      	adds	r5, #1
 801a6f2:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a6f4:	f1b9 0f00 	cmp.w	r9, #0
 801a6f8:	d01b      	beq.n	801a732 <pbuf_free.part.0+0x62>
 801a6fa:	464c      	mov	r4, r9
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a6fc:	7ba3      	ldrb	r3, [r4, #14]
 801a6fe:	b1db      	cbz	r3, 801a738 <pbuf_free.part.0+0x68>
    ref = --(p->ref);
 801a700:	3b01      	subs	r3, #1
 801a702:	b2db      	uxtb	r3, r3
 801a704:	73a3      	strb	r3, [r4, #14]
    if (ref == 0) {
 801a706:	b9a3      	cbnz	r3, 801a732 <pbuf_free.part.0+0x62>
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a708:	7b63      	ldrb	r3, [r4, #13]
      q = p->next;
 801a70a:	f8d4 9000 	ldr.w	r9, [r4]
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801a70e:	079b      	lsls	r3, r3, #30
 801a710:	d4e9      	bmi.n	801a6e6 <pbuf_free.part.0+0x16>
      alloc_src = pbuf_get_allocsrc(p);
 801a712:	7b23      	ldrb	r3, [r4, #12]
 801a714:	f003 030f 	and.w	r3, r3, #15
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801a718:	2b02      	cmp	r3, #2
 801a71a:	d01e      	beq.n	801a75a <pbuf_free.part.0+0x8a>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801a71c:	2b01      	cmp	r3, #1
 801a71e:	d02a      	beq.n	801a776 <pbuf_free.part.0+0xa6>
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801a720:	b99b      	cbnz	r3, 801a74a <pbuf_free.part.0+0x7a>
      count++;
 801a722:	3501      	adds	r5, #1
          mem_free(p);
 801a724:	4620      	mov	r0, r4
 801a726:	f7ff fa27 	bl	8019b78 <mem_free>
      count++;
 801a72a:	b2ed      	uxtb	r5, r5
  while (p != NULL) {
 801a72c:	f1b9 0f00 	cmp.w	r9, #0
 801a730:	d1e3      	bne.n	801a6fa <pbuf_free.part.0+0x2a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
}
 801a732:	4628      	mov	r0, r5
 801a734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801a738:	463b      	mov	r3, r7
 801a73a:	f240 22f1 	movw	r2, #753	; 0x2f1
 801a73e:	4641      	mov	r1, r8
 801a740:	4630      	mov	r0, r6
 801a742:	f00a fb87 	bl	8024e54 <iprintf>
    ref = --(p->ref);
 801a746:	7ba3      	ldrb	r3, [r4, #14]
 801a748:	e7da      	b.n	801a700 <pbuf_free.part.0+0x30>
          LWIP_ASSERT("invalid pbuf type", 0);
 801a74a:	463b      	mov	r3, r7
 801a74c:	f240 320f 	movw	r2, #783	; 0x30f
 801a750:	490e      	ldr	r1, [pc, #56]	; (801a78c <pbuf_free.part.0+0xbc>)
 801a752:	4630      	mov	r0, r6
 801a754:	f00a fb7e 	bl	8024e54 <iprintf>
 801a758:	e7ca      	b.n	801a6f0 <pbuf_free.part.0+0x20>
          memp_free(MEMP_PBUF_POOL, p);
 801a75a:	4621      	mov	r1, r4
 801a75c:	200f      	movs	r0, #15
 801a75e:	f7ff fd9f 	bl	801a2a0 <memp_free>
 801a762:	e7c5      	b.n	801a6f0 <pbuf_free.part.0+0x20>
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801a764:	463b      	mov	r3, r7
 801a766:	f240 22ff 	movw	r2, #767	; 0x2ff
 801a76a:	4909      	ldr	r1, [pc, #36]	; (801a790 <pbuf_free.part.0+0xc0>)
 801a76c:	4630      	mov	r0, r6
 801a76e:	f00a fb71 	bl	8024e54 <iprintf>
        pc->custom_free_function(p);
 801a772:	6923      	ldr	r3, [r4, #16]
 801a774:	e7ba      	b.n	801a6ec <pbuf_free.part.0+0x1c>
          memp_free(MEMP_PBUF, p);
 801a776:	4621      	mov	r1, r4
 801a778:	200e      	movs	r0, #14
 801a77a:	f7ff fd91 	bl	801a2a0 <memp_free>
 801a77e:	e7b7      	b.n	801a6f0 <pbuf_free.part.0+0x20>
  count = 0;
 801a780:	4605      	mov	r5, r0
 801a782:	e7d6      	b.n	801a732 <pbuf_free.part.0+0x62>
 801a784:	08043370 	.word	0x08043370
 801a788:	08029a64 	.word	0x08029a64
 801a78c:	080433dc 	.word	0x080433dc
 801a790:	080433b8 	.word	0x080433b8
 801a794:	080433a0 	.word	0x080433a0

0801a798 <pbuf_copy.part.0>:
 * @return ERR_OK if pbuf was copied
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a798:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
  size_t offset_to = 0, offset_from = 0, len;
 801a79c:	2600      	movs	r6, #0
      len = p_to->len - offset_to;
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
    offset_to += len;
    offset_from += len;
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a79e:	f8df a124 	ldr.w	sl, [pc, #292]	; 801a8c4 <pbuf_copy.part.0+0x12c>
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
 801a7a2:	4605      	mov	r5, r0
 801a7a4:	4688      	mov	r8, r1
  size_t offset_to = 0, offset_from = 0, len;
 801a7a6:	4637      	mov	r7, r6
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a7a8:	8944      	ldrh	r4, [r0, #10]
 801a7aa:	894a      	ldrh	r2, [r1, #10]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a7ac:	f8df b128 	ldr.w	fp, [pc, #296]	; 801a8d8 <pbuf_copy.part.0+0x140>
 801a7b0:	f8df 9118 	ldr.w	r9, [pc, #280]	; 801a8cc <pbuf_copy.part.0+0x134>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a7b4:	1be4      	subs	r4, r4, r7
 801a7b6:	1b92      	subs	r2, r2, r6
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a7b8:	6868      	ldr	r0, [r5, #4]
 801a7ba:	4294      	cmp	r4, r2
 801a7bc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a7c0:	4438      	add	r0, r7
 801a7c2:	bf28      	it	cs
 801a7c4:	4614      	movcs	r4, r2
 801a7c6:	4431      	add	r1, r6
 801a7c8:	4622      	mov	r2, r4
    offset_to += len;
 801a7ca:	4427      	add	r7, r4
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801a7cc:	f009 fb7c 	bl	8023ec8 <memcpy>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a7d0:	896b      	ldrh	r3, [r5, #10]
    offset_from += len;
 801a7d2:	4426      	add	r6, r4
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a7d4:	429f      	cmp	r7, r3
 801a7d6:	d837      	bhi.n	801a848 <pbuf_copy.part.0+0xb0>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a7d8:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a7dc:	4296      	cmp	r6, r2
 801a7de:	d829      	bhi.n	801a834 <pbuf_copy.part.0+0x9c>
    if (offset_from >= p_from->len) {
 801a7e0:	4296      	cmp	r6, r2
      /* on to next p_from (if any) */
      offset_from = 0;
      p_from = p_from->next;
    }
    if (offset_to == p_to->len) {
 801a7e2:	896b      	ldrh	r3, [r5, #10]
    if (offset_from >= p_from->len) {
 801a7e4:	d317      	bcc.n	801a816 <pbuf_copy.part.0+0x7e>
    if (offset_to == p_to->len) {
 801a7e6:	429f      	cmp	r7, r3
      p_from = p_from->next;
 801a7e8:	f8d8 8000 	ldr.w	r8, [r8]
    if (offset_to == p_to->len) {
 801a7ec:	d04b      	beq.n	801a886 <pbuf_copy.part.0+0xee>
      offset_to = 0;
      p_to = p_to->next;
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a7ee:	f1b8 0f00 	cmp.w	r8, #0
 801a7f2:	d144      	bne.n	801a87e <pbuf_copy.part.0+0xe6>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a7f4:	892a      	ldrh	r2, [r5, #8]
 801a7f6:	896b      	ldrh	r3, [r5, #10]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	d14c      	bne.n	801a896 <pbuf_copy.part.0+0xfe>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a7fc:	6828      	ldr	r0, [r5, #0]
 801a7fe:	b140      	cbz	r0, 801a812 <pbuf_copy.part.0+0x7a>
 801a800:	4b30      	ldr	r3, [pc, #192]	; (801a8c4 <pbuf_copy.part.0+0x12c>)
 801a802:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801a806:	4930      	ldr	r1, [pc, #192]	; (801a8c8 <pbuf_copy.part.0+0x130>)
 801a808:	4830      	ldr	r0, [pc, #192]	; (801a8cc <pbuf_copy.part.0+0x134>)
 801a80a:	f00a fb23 	bl	8024e54 <iprintf>
 801a80e:	f06f 0005 	mvn.w	r0, #5
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
}
 801a812:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (offset_to == p_to->len) {
 801a816:	429f      	cmp	r7, r3
 801a818:	d040      	beq.n	801a89c <pbuf_copy.part.0+0x104>
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a81a:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801a81e:	4293      	cmp	r3, r2
 801a820:	d01a      	beq.n	801a858 <pbuf_copy.part.0+0xc0>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a822:	896c      	ldrh	r4, [r5, #10]
 801a824:	2d00      	cmp	r5, #0
 801a826:	d0c5      	beq.n	801a7b4 <pbuf_copy.part.0+0x1c>
 801a828:	892b      	ldrh	r3, [r5, #8]
 801a82a:	42a3      	cmp	r3, r4
 801a82c:	d045      	beq.n	801a8ba <pbuf_copy.part.0+0x122>
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801a82e:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a832:	e7bf      	b.n	801a7b4 <pbuf_copy.part.0+0x1c>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801a834:	f240 32da 	movw	r2, #986	; 0x3da
 801a838:	4653      	mov	r3, sl
 801a83a:	4925      	ldr	r1, [pc, #148]	; (801a8d0 <pbuf_copy.part.0+0x138>)
 801a83c:	4648      	mov	r0, r9
 801a83e:	f00a fb09 	bl	8024e54 <iprintf>
    if (offset_from >= p_from->len) {
 801a842:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a846:	e7cb      	b.n	801a7e0 <pbuf_copy.part.0+0x48>
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801a848:	4653      	mov	r3, sl
 801a84a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801a84e:	4659      	mov	r1, fp
 801a850:	4648      	mov	r0, r9
 801a852:	f00a faff 	bl	8024e54 <iprintf>
 801a856:	e7bf      	b.n	801a7d8 <pbuf_copy.part.0+0x40>
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a858:	f8d8 3000 	ldr.w	r3, [r8]
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	d0e0      	beq.n	801a822 <pbuf_copy.part.0+0x8a>
 801a860:	4b18      	ldr	r3, [pc, #96]	; (801a8c4 <pbuf_copy.part.0+0x12c>)
 801a862:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801a866:	4918      	ldr	r1, [pc, #96]	; (801a8c8 <pbuf_copy.part.0+0x130>)
 801a868:	4818      	ldr	r0, [pc, #96]	; (801a8cc <pbuf_copy.part.0+0x134>)
 801a86a:	f00a faf3 	bl	8024e54 <iprintf>
 801a86e:	f06f 0005 	mvn.w	r0, #5
}
 801a872:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a876:	f1b8 0f00 	cmp.w	r8, #0
 801a87a:	d00a      	beq.n	801a892 <pbuf_copy.part.0+0xfa>
      offset_to = 0;
 801a87c:	2700      	movs	r7, #0
 801a87e:	2600      	movs	r6, #0
    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801a880:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 801a884:	e7c9      	b.n	801a81a <pbuf_copy.part.0+0x82>
      p_to = p_to->next;
 801a886:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a888:	2d00      	cmp	r5, #0
 801a88a:	d1f4      	bne.n	801a876 <pbuf_copy.part.0+0xde>
 801a88c:	f1b8 0f00 	cmp.w	r8, #0
 801a890:	d108      	bne.n	801a8a4 <pbuf_copy.part.0+0x10c>
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801a892:	2d00      	cmp	r5, #0
 801a894:	d1ae      	bne.n	801a7f4 <pbuf_copy.part.0+0x5c>
  return ERR_OK;
 801a896:	2000      	movs	r0, #0
}
 801a898:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      p_to = p_to->next;
 801a89c:	682d      	ldr	r5, [r5, #0]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a89e:	b10d      	cbz	r5, 801a8a4 <pbuf_copy.part.0+0x10c>
      offset_to = 0;
 801a8a0:	2700      	movs	r7, #0
 801a8a2:	e7ed      	b.n	801a880 <pbuf_copy.part.0+0xe8>
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801a8a4:	4b07      	ldr	r3, [pc, #28]	; (801a8c4 <pbuf_copy.part.0+0x12c>)
 801a8a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801a8aa:	490a      	ldr	r1, [pc, #40]	; (801a8d4 <pbuf_copy.part.0+0x13c>)
 801a8ac:	4807      	ldr	r0, [pc, #28]	; (801a8cc <pbuf_copy.part.0+0x134>)
 801a8ae:	f00a fad1 	bl	8024e54 <iprintf>
 801a8b2:	f06f 000f 	mvn.w	r0, #15
}
 801a8b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801a8ba:	682b      	ldr	r3, [r5, #0]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d0b6      	beq.n	801a82e <pbuf_copy.part.0+0x96>
 801a8c0:	e79e      	b.n	801a800 <pbuf_copy.part.0+0x68>
 801a8c2:	bf00      	nop
 801a8c4:	08043370 	.word	0x08043370
 801a8c8:	08043434 	.word	0x08043434
 801a8cc:	08029a64 	.word	0x08029a64
 801a8d0:	08043408 	.word	0x08043408
 801a8d4:	08043424 	.word	0x08043424
 801a8d8:	080433f0 	.word	0x080433f0

0801a8dc <pbuf_alloc_reference>:
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a8dc:	f022 0340 	bic.w	r3, r2, #64	; 0x40
 801a8e0:	2b01      	cmp	r3, #1
{
 801a8e2:	b570      	push	{r4, r5, r6, lr}
 801a8e4:	4614      	mov	r4, r2
 801a8e6:	4606      	mov	r6, r0
 801a8e8:	460d      	mov	r5, r1
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a8ea:	d110      	bne.n	801a90e <pbuf_alloc_reference+0x32>
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801a8ec:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 801a8f0:	490b      	ldr	r1, [pc, #44]	; (801a920 <pbuf_alloc_reference+0x44>)
 801a8f2:	200e      	movs	r0, #14
 801a8f4:	f7ff fc9e 	bl	801a234 <memp_malloc_fn>
  if (p == NULL) {
 801a8f8:	b140      	cbz	r0, 801a90c <pbuf_alloc_reference+0x30>
  p->next = NULL;
 801a8fa:	2300      	movs	r3, #0
  p->ref = 1;
 801a8fc:	2201      	movs	r2, #1
  p->payload = payload;
 801a8fe:	6046      	str	r6, [r0, #4]
  p->tot_len = tot_len;
 801a900:	8105      	strh	r5, [r0, #8]
  p->next = NULL;
 801a902:	6003      	str	r3, [r0, #0]
  p->len = len;
 801a904:	8145      	strh	r5, [r0, #10]
  p->type_internal = (u8_t)type;
 801a906:	7304      	strb	r4, [r0, #12]
  p->flags = flags;
 801a908:	7343      	strb	r3, [r0, #13]
  p->ref = 1;
 801a90a:	81c2      	strh	r2, [r0, #14]
}
 801a90c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801a90e:	4b04      	ldr	r3, [pc, #16]	; (801a920 <pbuf_alloc_reference+0x44>)
 801a910:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801a914:	4903      	ldr	r1, [pc, #12]	; (801a924 <pbuf_alloc_reference+0x48>)
 801a916:	4804      	ldr	r0, [pc, #16]	; (801a928 <pbuf_alloc_reference+0x4c>)
 801a918:	f00a fa9c 	bl	8024e54 <iprintf>
 801a91c:	e7e6      	b.n	801a8ec <pbuf_alloc_reference+0x10>
 801a91e:	bf00      	nop
 801a920:	08043370 	.word	0x08043370
 801a924:	08043460 	.word	0x08043460
 801a928:	08029a64 	.word	0x08029a64

0801a92c <pbuf_alloc>:
  switch (type) {
 801a92c:	f5b2 7fc1 	cmp.w	r2, #386	; 0x182
{
 801a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a934:	4689      	mov	r9, r1
  u16_t offset = (u16_t)layer;
 801a936:	fa1f fa80 	uxth.w	sl, r0
  switch (type) {
 801a93a:	d03d      	beq.n	801a9b8 <pbuf_alloc+0x8c>
 801a93c:	d80e      	bhi.n	801a95c <pbuf_alloc+0x30>
 801a93e:	f022 0440 	bic.w	r4, r2, #64	; 0x40
 801a942:	2c01      	cmp	r4, #1
 801a944:	d033      	beq.n	801a9ae <pbuf_alloc+0x82>
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a946:	4b41      	ldr	r3, [pc, #260]	; (801aa4c <pbuf_alloc+0x120>)
 801a948:	f240 1227 	movw	r2, #295	; 0x127
 801a94c:	4940      	ldr	r1, [pc, #256]	; (801aa50 <pbuf_alloc+0x124>)
      return NULL;
 801a94e:	2500      	movs	r5, #0
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801a950:	4840      	ldr	r0, [pc, #256]	; (801aa54 <pbuf_alloc+0x128>)
 801a952:	f00a fa7f 	bl	8024e54 <iprintf>
}
 801a956:	4628      	mov	r0, r5
 801a958:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  switch (type) {
 801a95c:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
 801a960:	d1f1      	bne.n	801a946 <pbuf_alloc+0x1a>
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801a962:	f10a 0303 	add.w	r3, sl, #3
 801a966:	1cca      	adds	r2, r1, #3
 801a968:	4606      	mov	r6, r0
 801a96a:	f022 0203 	bic.w	r2, r2, #3
 801a96e:	f023 0303 	bic.w	r3, r3, #3
 801a972:	4413      	add	r3, r2
 801a974:	b29b      	uxth	r3, r3
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a976:	f103 0010 	add.w	r0, r3, #16
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a97a:	4293      	cmp	r3, r2
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801a97c:	b280      	uxth	r0, r0
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801a97e:	d34d      	bcc.n	801aa1c <pbuf_alloc+0xf0>
 801a980:	4282      	cmp	r2, r0
 801a982:	d84b      	bhi.n	801aa1c <pbuf_alloc+0xf0>
      p = (struct pbuf *)mem_malloc(alloc_len);
 801a984:	f7ff fab4 	bl	8019ef0 <mem_malloc>
      if (p == NULL) {
 801a988:	4605      	mov	r5, r0
 801a98a:	2800      	cmp	r0, #0
 801a98c:	d0e3      	beq.n	801a956 <pbuf_alloc+0x2a>
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a98e:	1983      	adds	r3, r0, r6
  p->next = NULL;
 801a990:	2100      	movs	r1, #0
  p->type_internal = (u8_t)type;
 801a992:	4a31      	ldr	r2, [pc, #196]	; (801aa58 <pbuf_alloc+0x12c>)
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a994:	3313      	adds	r3, #19
  p->tot_len = tot_len;
 801a996:	f8a0 9008 	strh.w	r9, [r0, #8]
  p->next = NULL;
 801a99a:	6001      	str	r1, [r0, #0]
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801a99c:	f023 0303 	bic.w	r3, r3, #3
  p->len = len;
 801a9a0:	f8a0 900a 	strh.w	r9, [r0, #10]
  p->type_internal = (u8_t)type;
 801a9a4:	60c2      	str	r2, [r0, #12]
  p->payload = payload;
 801a9a6:	6043      	str	r3, [r0, #4]
}
 801a9a8:	4628      	mov	r0, r5
 801a9aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      p = pbuf_alloc_reference(NULL, length, type);
 801a9ae:	2000      	movs	r0, #0
}
 801a9b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      p = pbuf_alloc_reference(NULL, length, type);
 801a9b4:	f7ff bf92 	b.w	801a8dc <pbuf_alloc_reference>
  switch (type) {
 801a9b8:	2400      	movs	r4, #0
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a9ba:	f8df 8090 	ldr.w	r8, [pc, #144]	; 801aa4c <pbuf_alloc+0x120>
  p->type_internal = (u8_t)type;
 801a9be:	4f27      	ldr	r7, [pc, #156]	; (801aa5c <pbuf_alloc+0x130>)
  switch (type) {
 801a9c0:	4625      	mov	r5, r4
 801a9c2:	e009      	b.n	801a9d8 <pbuf_alloc+0xac>
          last->next = q;
 801a9c4:	6030      	str	r0, [r6, #0]
        rem_len = (u16_t)(rem_len - qlen);
 801a9c6:	eba9 0303 	sub.w	r3, r9, r3
        offset = 0;
 801a9ca:	f04f 0a00 	mov.w	sl, #0
        rem_len = (u16_t)(rem_len - qlen);
 801a9ce:	fa1f f983 	uxth.w	r9, r3
      } while (rem_len > 0);
 801a9d2:	f1b9 0f00 	cmp.w	r9, #0
 801a9d6:	d0be      	beq.n	801a956 <pbuf_alloc+0x2a>
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801a9d8:	22f3      	movs	r2, #243	; 0xf3
 801a9da:	4641      	mov	r1, r8
 801a9dc:	200f      	movs	r0, #15
 801a9de:	4626      	mov	r6, r4
 801a9e0:	f7ff fc28 	bl	801a234 <memp_malloc_fn>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a9e4:	f10a 0203 	add.w	r2, sl, #3
  p->next = NULL;
 801a9e8:	2100      	movs	r1, #0
        if (q == NULL) {
 801a9ea:	4604      	mov	r4, r0
 801a9ec:	b1d0      	cbz	r0, 801aa24 <pbuf_alloc+0xf8>
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a9ee:	f022 0303 	bic.w	r3, r2, #3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a9f2:	eb00 020a 	add.w	r2, r0, sl
  p->tot_len = tot_len;
 801a9f6:	f8a0 9008 	strh.w	r9, [r0, #8]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801a9fa:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801a9fe:	3213      	adds	r2, #19
  p->next = NULL;
 801aa00:	6001      	str	r1, [r0, #0]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801aa02:	b29b      	uxth	r3, r3
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801aa04:	f022 0203 	bic.w	r2, r2, #3
  p->type_internal = (u8_t)type;
 801aa08:	60c7      	str	r7, [r0, #12]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801aa0a:	454b      	cmp	r3, r9
  p->payload = payload;
 801aa0c:	6042      	str	r2, [r0, #4]
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801aa0e:	bf28      	it	cs
 801aa10:	464b      	movcs	r3, r9
  p->len = len;
 801aa12:	8143      	strh	r3, [r0, #10]
        if (p == NULL) {
 801aa14:	2d00      	cmp	r5, #0
 801aa16:	d1d5      	bne.n	801a9c4 <pbuf_alloc+0x98>
 801aa18:	4605      	mov	r5, r0
 801aa1a:	e7d4      	b.n	801a9c6 <pbuf_alloc+0x9a>
          return NULL;
 801aa1c:	2500      	movs	r5, #0
}
 801aa1e:	4628      	mov	r0, r5
 801aa20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  queued = pbuf_free_ooseq_pending;
 801aa24:	4e0e      	ldr	r6, [pc, #56]	; (801aa60 <pbuf_alloc+0x134>)
  pbuf_free_ooseq_pending = 1;
 801aa26:	2201      	movs	r2, #1
  queued = pbuf_free_ooseq_pending;
 801aa28:	7833      	ldrb	r3, [r6, #0]
  pbuf_free_ooseq_pending = 1;
 801aa2a:	7032      	strb	r2, [r6, #0]
  if (!queued) {
 801aa2c:	b133      	cbz	r3, 801aa3c <pbuf_alloc+0x110>
          if (p) {
 801aa2e:	2d00      	cmp	r5, #0
 801aa30:	d0f4      	beq.n	801aa1c <pbuf_alloc+0xf0>
  if (p == NULL) {
 801aa32:	4628      	mov	r0, r5
          return NULL;
 801aa34:	2500      	movs	r5, #0
 801aa36:	f7ff fe4b 	bl	801a6d0 <pbuf_free.part.0>
 801aa3a:	e78c      	b.n	801a956 <pbuf_alloc+0x2a>
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801aa3c:	4601      	mov	r1, r0
 801aa3e:	4809      	ldr	r0, [pc, #36]	; (801aa64 <pbuf_alloc+0x138>)
 801aa40:	f7fc fefc 	bl	801783c <tcpip_try_callback>
 801aa44:	2800      	cmp	r0, #0
 801aa46:	d0f2      	beq.n	801aa2e <pbuf_alloc+0x102>
 801aa48:	7034      	strb	r4, [r6, #0]
 801aa4a:	e7f0      	b.n	801aa2e <pbuf_alloc+0x102>
 801aa4c:	08043370 	.word	0x08043370
 801aa50:	08043474 	.word	0x08043474
 801aa54:	08029a64 	.word	0x08029a64
 801aa58:	00010080 	.word	0x00010080
 801aa5c:	00010082 	.word	0x00010082
 801aa60:	2002e385 	.word	0x2002e385
 801aa64:	0801a6a9 	.word	0x0801a6a9

0801aa68 <pbuf_alloced_custom>:
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801aa68:	3003      	adds	r0, #3
 801aa6a:	f020 0003 	bic.w	r0, r0, #3
{
 801aa6e:	b510      	push	{r4, lr}
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801aa70:	eb01 0e00 	add.w	lr, r1, r0
{
 801aa74:	f8bd c00c 	ldrh.w	ip, [sp, #12]
 801aa78:	9c02      	ldr	r4, [sp, #8]
  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801aa7a:	45e6      	cmp	lr, ip
 801aa7c:	d80d      	bhi.n	801aa9a <pbuf_alloced_custom+0x32>
  if (payload_mem != NULL) {
 801aa7e:	b104      	cbz	r4, 801aa82 <pbuf_alloced_custom+0x1a>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801aa80:	4404      	add	r4, r0
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801aa82:	4618      	mov	r0, r3
  p->next = NULL;
 801aa84:	2300      	movs	r3, #0
  p->payload = payload;
 801aa86:	6044      	str	r4, [r0, #4]
  p->flags = flags;
 801aa88:	2402      	movs	r4, #2
  p->next = NULL;
 801aa8a:	6003      	str	r3, [r0, #0]
  p->ref = 1;
 801aa8c:	2301      	movs	r3, #1
  p->tot_len = tot_len;
 801aa8e:	8101      	strh	r1, [r0, #8]
  p->len = len;
 801aa90:	8141      	strh	r1, [r0, #10]
  p->type_internal = (u8_t)type;
 801aa92:	7302      	strb	r2, [r0, #12]
  p->flags = flags;
 801aa94:	7344      	strb	r4, [r0, #13]
  p->ref = 1;
 801aa96:	81c3      	strh	r3, [r0, #14]
}
 801aa98:	bd10      	pop	{r4, pc}
    return NULL;
 801aa9a:	2000      	movs	r0, #0
}
 801aa9c:	bd10      	pop	{r4, pc}
 801aa9e:	bf00      	nop

0801aaa0 <pbuf_realloc>:
{
 801aaa0:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801aaa2:	4604      	mov	r4, r0
{
 801aaa4:	460d      	mov	r5, r1
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801aaa6:	2800      	cmp	r0, #0
 801aaa8:	d037      	beq.n	801ab1a <pbuf_realloc+0x7a>
  if (new_len >= p->tot_len) {
 801aaaa:	8922      	ldrh	r2, [r4, #8]
 801aaac:	42aa      	cmp	r2, r5
 801aaae:	d91b      	bls.n	801aae8 <pbuf_realloc+0x48>
  while (rem_len > q->len) {
 801aab0:	8963      	ldrh	r3, [r4, #10]
 801aab2:	429d      	cmp	r5, r3
 801aab4:	d90d      	bls.n	801aad2 <pbuf_realloc+0x32>
 801aab6:	1aa9      	subs	r1, r5, r2
 801aab8:	b289      	uxth	r1, r1
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801aaba:	440a      	add	r2, r1
    rem_len = (u16_t)(rem_len - q->len);
 801aabc:	1aeb      	subs	r3, r5, r3
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801aabe:	8122      	strh	r2, [r4, #8]
    rem_len = (u16_t)(rem_len - q->len);
 801aac0:	b29d      	uxth	r5, r3
    q = q->next;
 801aac2:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801aac4:	2c00      	cmp	r4, #0
 801aac6:	d030      	beq.n	801ab2a <pbuf_realloc+0x8a>
  while (rem_len > q->len) {
 801aac8:	8963      	ldrh	r3, [r4, #10]
 801aaca:	42ab      	cmp	r3, r5
 801aacc:	d201      	bcs.n	801aad2 <pbuf_realloc+0x32>
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801aace:	8922      	ldrh	r2, [r4, #8]
 801aad0:	e7f3      	b.n	801aaba <pbuf_realloc+0x1a>
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801aad2:	7b22      	ldrb	r2, [r4, #12]
 801aad4:	0712      	lsls	r2, r2, #28
 801aad6:	d008      	beq.n	801aaea <pbuf_realloc+0x4a>
  if (q->next != NULL) {
 801aad8:	6820      	ldr	r0, [r4, #0]
  q->len = rem_len;
 801aada:	8165      	strh	r5, [r4, #10]
  q->tot_len = q->len;
 801aadc:	8125      	strh	r5, [r4, #8]
  if (q->next != NULL) {
 801aade:	b108      	cbz	r0, 801aae4 <pbuf_realloc+0x44>
  if (p == NULL) {
 801aae0:	f7ff fdf6 	bl	801a6d0 <pbuf_free.part.0>
  q->next = NULL;
 801aae4:	2300      	movs	r3, #0
 801aae6:	6023      	str	r3, [r4, #0]
}
 801aae8:	bd38      	pop	{r3, r4, r5, pc}
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801aaea:	429d      	cmp	r5, r3
 801aaec:	d0f4      	beq.n	801aad8 <pbuf_realloc+0x38>
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801aaee:	7b63      	ldrb	r3, [r4, #13]
 801aaf0:	079b      	lsls	r3, r3, #30
 801aaf2:	d4f1      	bmi.n	801aad8 <pbuf_realloc+0x38>
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801aaf4:	6863      	ldr	r3, [r4, #4]
 801aaf6:	4620      	mov	r0, r4
 801aaf8:	1b1b      	subs	r3, r3, r4
 801aafa:	18e9      	adds	r1, r5, r3
 801aafc:	b289      	uxth	r1, r1
 801aafe:	f7ff f91d 	bl	8019d3c <mem_trim>
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801ab02:	4604      	mov	r4, r0
 801ab04:	2800      	cmp	r0, #0
 801ab06:	d1e7      	bne.n	801aad8 <pbuf_realloc+0x38>
 801ab08:	4b0c      	ldr	r3, [pc, #48]	; (801ab3c <pbuf_realloc+0x9c>)
 801ab0a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801ab0e:	490c      	ldr	r1, [pc, #48]	; (801ab40 <pbuf_realloc+0xa0>)
 801ab10:	480c      	ldr	r0, [pc, #48]	; (801ab44 <pbuf_realloc+0xa4>)
 801ab12:	f00a f99f 	bl	8024e54 <iprintf>
  q->len = rem_len;
 801ab16:	8164      	strh	r4, [r4, #10]
 801ab18:	deff      	udf	#255	; 0xff
  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801ab1a:	4b08      	ldr	r3, [pc, #32]	; (801ab3c <pbuf_realloc+0x9c>)
 801ab1c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ab20:	4909      	ldr	r1, [pc, #36]	; (801ab48 <pbuf_realloc+0xa8>)
 801ab22:	4808      	ldr	r0, [pc, #32]	; (801ab44 <pbuf_realloc+0xa4>)
 801ab24:	f00a f996 	bl	8024e54 <iprintf>
 801ab28:	e7bf      	b.n	801aaaa <pbuf_realloc+0xa>
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801ab2a:	4b04      	ldr	r3, [pc, #16]	; (801ab3c <pbuf_realloc+0x9c>)
 801ab2c:	f240 12af 	movw	r2, #431	; 0x1af
 801ab30:	4906      	ldr	r1, [pc, #24]	; (801ab4c <pbuf_realloc+0xac>)
 801ab32:	4804      	ldr	r0, [pc, #16]	; (801ab44 <pbuf_realloc+0xa4>)
 801ab34:	f00a f98e 	bl	8024e54 <iprintf>
  while (rem_len > q->len) {
 801ab38:	8963      	ldrh	r3, [r4, #10]
 801ab3a:	deff      	udf	#255	; 0xff
 801ab3c:	08043370 	.word	0x08043370
 801ab40:	080434c0 	.word	0x080434c0
 801ab44:	08029a64 	.word	0x08029a64
 801ab48:	08043490 	.word	0x08043490
 801ab4c:	080434a8 	.word	0x080434a8

0801ab50 <pbuf_add_header>:
{
 801ab50:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ab52:	b310      	cbz	r0, 801ab9a <pbuf_add_header+0x4a>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801ab54:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801ab58:	d20c      	bcs.n	801ab74 <pbuf_add_header+0x24>
  if (header_size_increment == 0) {
 801ab5a:	b169      	cbz	r1, 801ab78 <pbuf_add_header+0x28>
  increment_magnitude = (u16_t)header_size_increment;
 801ab5c:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ab60:	8902      	ldrh	r2, [r0, #8]
 801ab62:	4603      	mov	r3, r0
 801ab64:	4462      	add	r2, ip
 801ab66:	b292      	uxth	r2, r2
 801ab68:	4594      	cmp	ip, r2
 801ab6a:	d803      	bhi.n	801ab74 <pbuf_add_header+0x24>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ab6c:	f990 000c 	ldrsb.w	r0, [r0, #12]
 801ab70:	2800      	cmp	r0, #0
 801ab72:	db03      	blt.n	801ab7c <pbuf_add_header+0x2c>
    return 1;
 801ab74:	2001      	movs	r0, #1
}
 801ab76:	bd08      	pop	{r3, pc}
    return 0;
 801ab78:	4608      	mov	r0, r1
}
 801ab7a:	bd08      	pop	{r3, pc}
    payload = (u8_t *)p->payload - header_size_increment;
 801ab7c:	6858      	ldr	r0, [r3, #4]
 801ab7e:	1a41      	subs	r1, r0, r1
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ab80:	f103 0010 	add.w	r0, r3, #16
 801ab84:	4281      	cmp	r1, r0
 801ab86:	d3f5      	bcc.n	801ab74 <pbuf_add_header+0x24>
  p->len = (u16_t)(p->len + increment_magnitude);
 801ab88:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801ab8c:	2000      	movs	r0, #0
  p->payload = payload;
 801ab8e:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ab90:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ab92:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ab94:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801ab98:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801ab9a:	4b04      	ldr	r3, [pc, #16]	; (801abac <pbuf_add_header+0x5c>)
 801ab9c:	f240 12df 	movw	r2, #479	; 0x1df
 801aba0:	4903      	ldr	r1, [pc, #12]	; (801abb0 <pbuf_add_header+0x60>)
 801aba2:	4804      	ldr	r0, [pc, #16]	; (801abb4 <pbuf_add_header+0x64>)
 801aba4:	f00a f956 	bl	8024e54 <iprintf>
    return 1;
 801aba8:	2001      	movs	r0, #1
}
 801abaa:	bd08      	pop	{r3, pc}
 801abac:	08043370 	.word	0x08043370
 801abb0:	08044d9c 	.word	0x08044d9c
 801abb4:	08029a64 	.word	0x08029a64

0801abb8 <pbuf_remove_header>:
{
 801abb8:	b508      	push	{r3, lr}
  LWIP_ASSERT("p != NULL", p != NULL);
 801abba:	b1c8      	cbz	r0, 801abf0 <pbuf_remove_header+0x38>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801abbc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 801abc0:	d21f      	bcs.n	801ac02 <pbuf_remove_header+0x4a>
  if (header_size_decrement == 0) {
 801abc2:	b199      	cbz	r1, 801abec <pbuf_remove_header+0x34>
  increment_magnitude = (u16_t)header_size_decrement;
 801abc4:	fa1f fc81 	uxth.w	ip, r1
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801abc8:	8942      	ldrh	r2, [r0, #10]
 801abca:	4603      	mov	r3, r0
 801abcc:	4594      	cmp	ip, r2
 801abce:	d81a      	bhi.n	801ac06 <pbuf_remove_header+0x4e>
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801abd0:	6840      	ldr	r0, [r0, #4]
  p->len = (u16_t)(p->len - increment_magnitude);
 801abd2:	eba2 020c 	sub.w	r2, r2, ip
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801abd6:	f8b3 e008 	ldrh.w	lr, [r3, #8]
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801abda:	4401      	add	r1, r0
  p->len = (u16_t)(p->len - increment_magnitude);
 801abdc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801abde:	ebae 0c0c 	sub.w	ip, lr, ip
  return 0;
 801abe2:	2000      	movs	r0, #0
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801abe4:	6059      	str	r1, [r3, #4]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801abe6:	f8a3 c008 	strh.w	ip, [r3, #8]
}
 801abea:	bd08      	pop	{r3, pc}
    return 0;
 801abec:	4608      	mov	r0, r1
}
 801abee:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("p != NULL", p != NULL);
 801abf0:	4b09      	ldr	r3, [pc, #36]	; (801ac18 <pbuf_remove_header+0x60>)
 801abf2:	f240 224b 	movw	r2, #587	; 0x24b
 801abf6:	4909      	ldr	r1, [pc, #36]	; (801ac1c <pbuf_remove_header+0x64>)
 801abf8:	4809      	ldr	r0, [pc, #36]	; (801ac20 <pbuf_remove_header+0x68>)
 801abfa:	f00a f92b 	bl	8024e54 <iprintf>
    return 1;
 801abfe:	2001      	movs	r0, #1
}
 801ac00:	bd08      	pop	{r3, pc}
    return 1;
 801ac02:	2001      	movs	r0, #1
}
 801ac04:	bd08      	pop	{r3, pc}
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ac06:	4b04      	ldr	r3, [pc, #16]	; (801ac18 <pbuf_remove_header+0x60>)
 801ac08:	f240 2255 	movw	r2, #597	; 0x255
 801ac0c:	4905      	ldr	r1, [pc, #20]	; (801ac24 <pbuf_remove_header+0x6c>)
 801ac0e:	4804      	ldr	r0, [pc, #16]	; (801ac20 <pbuf_remove_header+0x68>)
 801ac10:	f00a f920 	bl	8024e54 <iprintf>
 801ac14:	2001      	movs	r0, #1
}
 801ac16:	bd08      	pop	{r3, pc}
 801ac18:	08043370 	.word	0x08043370
 801ac1c:	08044d9c 	.word	0x08044d9c
 801ac20:	08029a64 	.word	0x08029a64
 801ac24:	080434dc 	.word	0x080434dc

0801ac28 <pbuf_header_force>:
  if (header_size_increment < 0) {
 801ac28:	2900      	cmp	r1, #0
 801ac2a:	db1a      	blt.n	801ac62 <pbuf_header_force+0x3a>
{
 801ac2c:	b508      	push	{r3, lr}
 801ac2e:	4603      	mov	r3, r0
  LWIP_ASSERT("p != NULL", p != NULL);
 801ac30:	b1d0      	cbz	r0, 801ac68 <pbuf_header_force+0x40>
  if (header_size_increment == 0) {
 801ac32:	b341      	cbz	r1, 801ac86 <pbuf_header_force+0x5e>
  increment_magnitude = (u16_t)header_size_increment;
 801ac34:	fa1f fc81 	uxth.w	ip, r1
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ac38:	891a      	ldrh	r2, [r3, #8]
 801ac3a:	4462      	add	r2, ip
 801ac3c:	b292      	uxth	r2, r2
 801ac3e:	4594      	cmp	ip, r2
 801ac40:	d81f      	bhi.n	801ac82 <pbuf_header_force+0x5a>
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ac42:	f993 000c 	ldrsb.w	r0, [r3, #12]
 801ac46:	2800      	cmp	r0, #0
    payload = (u8_t *)p->payload - header_size_increment;
 801ac48:	6858      	ldr	r0, [r3, #4]
 801ac4a:	eba0 0101 	sub.w	r1, r0, r1
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ac4e:	db14      	blt.n	801ac7a <pbuf_header_force+0x52>
  p->len = (u16_t)(p->len + increment_magnitude);
 801ac50:	f8b3 e00a 	ldrh.w	lr, [r3, #10]
  return 0;
 801ac54:	2000      	movs	r0, #0
  p->payload = payload;
 801ac56:	6059      	str	r1, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ac58:	44f4      	add	ip, lr
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ac5a:	811a      	strh	r2, [r3, #8]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ac5c:	f8a3 c00a 	strh.w	ip, [r3, #10]
}
 801ac60:	bd08      	pop	{r3, pc}
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801ac62:	4249      	negs	r1, r1
 801ac64:	f7ff bfa8 	b.w	801abb8 <pbuf_remove_header>
  LWIP_ASSERT("p != NULL", p != NULL);
 801ac68:	4b08      	ldr	r3, [pc, #32]	; (801ac8c <pbuf_header_force+0x64>)
 801ac6a:	f240 12df 	movw	r2, #479	; 0x1df
 801ac6e:	4908      	ldr	r1, [pc, #32]	; (801ac90 <pbuf_header_force+0x68>)
 801ac70:	4808      	ldr	r0, [pc, #32]	; (801ac94 <pbuf_header_force+0x6c>)
 801ac72:	f00a f8ef 	bl	8024e54 <iprintf>
    return 1;
 801ac76:	2001      	movs	r0, #1
}
 801ac78:	bd08      	pop	{r3, pc}
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ac7a:	f103 0010 	add.w	r0, r3, #16
 801ac7e:	4281      	cmp	r1, r0
 801ac80:	d2e6      	bcs.n	801ac50 <pbuf_header_force+0x28>
    return 1;
 801ac82:	2001      	movs	r0, #1
}
 801ac84:	bd08      	pop	{r3, pc}
    return 0;
 801ac86:	4608      	mov	r0, r1
}
 801ac88:	bd08      	pop	{r3, pc}
 801ac8a:	bf00      	nop
 801ac8c:	08043370 	.word	0x08043370
 801ac90:	08044d9c 	.word	0x08044d9c
 801ac94:	08029a64 	.word	0x08029a64

0801ac98 <pbuf_free_header>:
{
 801ac98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  while (free_left && p) {
 801ac9a:	4604      	mov	r4, r0
 801ac9c:	b158      	cbz	r0, 801acb6 <pbuf_free_header+0x1e>
 801ac9e:	460d      	mov	r5, r1
 801aca0:	b149      	cbz	r1, 801acb6 <pbuf_free_header+0x1e>
      f->next = 0;
 801aca2:	2700      	movs	r7, #0
    if (free_left >= p->len) {
 801aca4:	8963      	ldrh	r3, [r4, #10]
 801aca6:	4620      	mov	r0, r4
 801aca8:	42ab      	cmp	r3, r5
      free_left = (u16_t)(free_left - p->len);
 801acaa:	eba5 0203 	sub.w	r2, r5, r3
    if (free_left >= p->len) {
 801acae:	d904      	bls.n	801acba <pbuf_free_header+0x22>
      pbuf_remove_header(p, free_left);
 801acb0:	4629      	mov	r1, r5
 801acb2:	f7ff ff81 	bl	801abb8 <pbuf_remove_header>
}
 801acb6:	4620      	mov	r0, r4
 801acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      p = p->next;
 801acba:	6826      	ldr	r6, [r4, #0]
      free_left = (u16_t)(free_left - p->len);
 801acbc:	b295      	uxth	r5, r2
      f->next = 0;
 801acbe:	6027      	str	r7, [r4, #0]
  if (p == NULL) {
 801acc0:	4634      	mov	r4, r6
 801acc2:	f7ff fd05 	bl	801a6d0 <pbuf_free.part.0>
  while (free_left && p) {
 801acc6:	b10d      	cbz	r5, 801accc <pbuf_free_header+0x34>
 801acc8:	2e00      	cmp	r6, #0
 801acca:	d1eb      	bne.n	801aca4 <pbuf_free_header+0xc>
      p = p->next;
 801accc:	4634      	mov	r4, r6
 801acce:	e7f2      	b.n	801acb6 <pbuf_free_header+0x1e>

0801acd0 <pbuf_free>:
  if (p == NULL) {
 801acd0:	b108      	cbz	r0, 801acd6 <pbuf_free+0x6>
 801acd2:	f7ff bcfd 	b.w	801a6d0 <pbuf_free.part.0>
{
 801acd6:	b510      	push	{r4, lr}
 801acd8:	4604      	mov	r4, r0
    LWIP_ASSERT("p != NULL", p != NULL);
 801acda:	4b04      	ldr	r3, [pc, #16]	; (801acec <pbuf_free+0x1c>)
 801acdc:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801ace0:	4903      	ldr	r1, [pc, #12]	; (801acf0 <pbuf_free+0x20>)
 801ace2:	4804      	ldr	r0, [pc, #16]	; (801acf4 <pbuf_free+0x24>)
 801ace4:	f00a f8b6 	bl	8024e54 <iprintf>
}
 801ace8:	4620      	mov	r0, r4
 801acea:	bd10      	pop	{r4, pc}
 801acec:	08043370 	.word	0x08043370
 801acf0:	08044d9c 	.word	0x08044d9c
 801acf4:	08029a64 	.word	0x08029a64

0801acf8 <pbuf_clen>:
  while (p != NULL) {
 801acf8:	4603      	mov	r3, r0
 801acfa:	b130      	cbz	r0, 801ad0a <pbuf_clen+0x12>
  len = 0;
 801acfc:	2000      	movs	r0, #0
    ++len;
 801acfe:	3001      	adds	r0, #1
    p = p->next;
 801ad00:	681b      	ldr	r3, [r3, #0]
    ++len;
 801ad02:	b280      	uxth	r0, r0
  while (p != NULL) {
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d1fa      	bne.n	801acfe <pbuf_clen+0x6>
 801ad08:	4770      	bx	lr
}
 801ad0a:	4770      	bx	lr

0801ad0c <pbuf_ref>:
  if (p != NULL) {
 801ad0c:	b120      	cbz	r0, 801ad18 <pbuf_ref+0xc>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801ad0e:	7b83      	ldrb	r3, [r0, #14]
 801ad10:	3301      	adds	r3, #1
 801ad12:	b2db      	uxtb	r3, r3
 801ad14:	7383      	strb	r3, [r0, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ad16:	b103      	cbz	r3, 801ad1a <pbuf_ref+0xe>
}
 801ad18:	4770      	bx	lr
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ad1a:	4b03      	ldr	r3, [pc, #12]	; (801ad28 <pbuf_ref+0x1c>)
 801ad1c:	f240 3242 	movw	r2, #834	; 0x342
 801ad20:	4902      	ldr	r1, [pc, #8]	; (801ad2c <pbuf_ref+0x20>)
 801ad22:	4803      	ldr	r0, [pc, #12]	; (801ad30 <pbuf_ref+0x24>)
 801ad24:	f00a b896 	b.w	8024e54 <iprintf>
 801ad28:	08043370 	.word	0x08043370
 801ad2c:	080434fc 	.word	0x080434fc
 801ad30:	08029a64 	.word	0x08029a64

0801ad34 <pbuf_cat>:
{
 801ad34:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ad36:	b330      	cbz	r0, 801ad86 <pbuf_cat+0x52>
 801ad38:	460d      	mov	r5, r1
 801ad3a:	b321      	cbz	r1, 801ad86 <pbuf_cat+0x52>
  for (p = h; p->next != NULL; p = p->next) {
 801ad3c:	6803      	ldr	r3, [r0, #0]
 801ad3e:	4604      	mov	r4, r0
 801ad40:	b13b      	cbz	r3, 801ad52 <pbuf_cat+0x1e>
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad42:	8922      	ldrh	r2, [r4, #8]
 801ad44:	8928      	ldrh	r0, [r5, #8]
 801ad46:	4402      	add	r2, r0
 801ad48:	8122      	strh	r2, [r4, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ad4a:	461c      	mov	r4, r3
 801ad4c:	681b      	ldr	r3, [r3, #0]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	d1f7      	bne.n	801ad42 <pbuf_cat+0xe>
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ad52:	8963      	ldrh	r3, [r4, #10]
 801ad54:	8922      	ldrh	r2, [r4, #8]
 801ad56:	429a      	cmp	r2, r3
 801ad58:	d010      	beq.n	801ad7c <pbuf_cat+0x48>
 801ad5a:	4b0f      	ldr	r3, [pc, #60]	; (801ad98 <pbuf_cat+0x64>)
 801ad5c:	f240 3262 	movw	r2, #866	; 0x362
 801ad60:	490e      	ldr	r1, [pc, #56]	; (801ad9c <pbuf_cat+0x68>)
 801ad62:	480f      	ldr	r0, [pc, #60]	; (801ada0 <pbuf_cat+0x6c>)
 801ad64:	f00a f876 	bl	8024e54 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ad68:	6823      	ldr	r3, [r4, #0]
 801ad6a:	b133      	cbz	r3, 801ad7a <pbuf_cat+0x46>
 801ad6c:	4b0a      	ldr	r3, [pc, #40]	; (801ad98 <pbuf_cat+0x64>)
 801ad6e:	f240 3263 	movw	r2, #867	; 0x363
 801ad72:	490c      	ldr	r1, [pc, #48]	; (801ada4 <pbuf_cat+0x70>)
 801ad74:	480a      	ldr	r0, [pc, #40]	; (801ada0 <pbuf_cat+0x6c>)
 801ad76:	f00a f86d 	bl	8024e54 <iprintf>
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad7a:	8923      	ldrh	r3, [r4, #8]
 801ad7c:	892a      	ldrh	r2, [r5, #8]
  p->next = t;
 801ad7e:	6025      	str	r5, [r4, #0]
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ad80:	4413      	add	r3, r2
 801ad82:	8123      	strh	r3, [r4, #8]
}
 801ad84:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ad86:	4b04      	ldr	r3, [pc, #16]	; (801ad98 <pbuf_cat+0x64>)
 801ad88:	f240 3259 	movw	r2, #857	; 0x359
 801ad8c:	4906      	ldr	r1, [pc, #24]	; (801ada8 <pbuf_cat+0x74>)
 801ad8e:	4804      	ldr	r0, [pc, #16]	; (801ada0 <pbuf_cat+0x6c>)
}
 801ad90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ad94:	f00a b85e 	b.w	8024e54 <iprintf>
 801ad98:	08043370 	.word	0x08043370
 801ad9c:	08043548 	.word	0x08043548
 801ada0:	08029a64 	.word	0x08029a64
 801ada4:	08043578 	.word	0x08043578
 801ada8:	08043510 	.word	0x08043510

0801adac <pbuf_chain>:
{
 801adac:	b510      	push	{r4, lr}
 801adae:	460c      	mov	r4, r1
  pbuf_cat(h, t);
 801adb0:	f7ff ffc0 	bl	801ad34 <pbuf_cat>
  if (p != NULL) {
 801adb4:	b124      	cbz	r4, 801adc0 <pbuf_chain+0x14>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801adb6:	7ba3      	ldrb	r3, [r4, #14]
 801adb8:	3301      	adds	r3, #1
 801adba:	b2db      	uxtb	r3, r3
 801adbc:	73a3      	strb	r3, [r4, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801adbe:	b103      	cbz	r3, 801adc2 <pbuf_chain+0x16>
}
 801adc0:	bd10      	pop	{r4, pc}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801adc2:	4b04      	ldr	r3, [pc, #16]	; (801add4 <pbuf_chain+0x28>)
 801adc4:	f240 3242 	movw	r2, #834	; 0x342
 801adc8:	4903      	ldr	r1, [pc, #12]	; (801add8 <pbuf_chain+0x2c>)
 801adca:	4804      	ldr	r0, [pc, #16]	; (801addc <pbuf_chain+0x30>)
}
 801adcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801add0:	f00a b840 	b.w	8024e54 <iprintf>
 801add4:	08043370 	.word	0x08043370
 801add8:	080434fc 	.word	0x080434fc
 801addc:	08029a64 	.word	0x08029a64

0801ade0 <pbuf_copy>:
{
 801ade0:	b508      	push	{r3, lr}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ade2:	b140      	cbz	r0, 801adf6 <pbuf_copy+0x16>
 801ade4:	b139      	cbz	r1, 801adf6 <pbuf_copy+0x16>
 801ade6:	8902      	ldrh	r2, [r0, #8]
 801ade8:	890b      	ldrh	r3, [r1, #8]
 801adea:	429a      	cmp	r2, r3
 801adec:	d303      	bcc.n	801adf6 <pbuf_copy+0x16>
}
 801adee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801adf2:	f7ff bcd1 	b.w	801a798 <pbuf_copy.part.0>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801adf6:	4b05      	ldr	r3, [pc, #20]	; (801ae0c <pbuf_copy+0x2c>)
 801adf8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801adfc:	4904      	ldr	r1, [pc, #16]	; (801ae10 <pbuf_copy+0x30>)
 801adfe:	4805      	ldr	r0, [pc, #20]	; (801ae14 <pbuf_copy+0x34>)
 801ae00:	f00a f828 	bl	8024e54 <iprintf>
}
 801ae04:	f06f 000f 	mvn.w	r0, #15
 801ae08:	bd08      	pop	{r3, pc}
 801ae0a:	bf00      	nop
 801ae0c:	08043370 	.word	0x08043370
 801ae10:	08043588 	.word	0x08043588
 801ae14:	08029a64 	.word	0x08029a64

0801ae18 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801ae18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  const struct pbuf *p;
  u16_t left = 0;
  u16_t buf_copy_len;
  u16_t copied_total = 0;

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ae1c:	4605      	mov	r5, r0
 801ae1e:	b370      	cbz	r0, 801ae7e <pbuf_copy_partial+0x66>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801ae20:	460f      	mov	r7, r1
 801ae22:	2900      	cmp	r1, #0
 801ae24:	d036      	beq.n	801ae94 <pbuf_copy_partial+0x7c>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ae26:	4690      	mov	r8, r2
 801ae28:	b392      	cbz	r2, 801ae90 <pbuf_copy_partial+0x78>
  u16_t left = 0;
 801ae2a:	2600      	movs	r6, #0
 801ae2c:	e005      	b.n	801ae3a <pbuf_copy_partial+0x22>
    if ((offset != 0) && (offset >= p->len)) {
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 801ae2e:	b293      	uxth	r3, r2
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ae30:	682d      	ldr	r5, [r5, #0]
 801ae32:	f1b8 0f00 	cmp.w	r8, #0
 801ae36:	d01f      	beq.n	801ae78 <pbuf_copy_partial+0x60>
 801ae38:	b1f5      	cbz	r5, 801ae78 <pbuf_copy_partial+0x60>
      buf_copy_len = (u16_t)(p->len - offset);
      if (buf_copy_len > len) {
        buf_copy_len = len;
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ae3a:	19b8      	adds	r0, r7, r6
    if ((offset != 0) && (offset >= p->len)) {
 801ae3c:	f8b5 c00a 	ldrh.w	ip, [r5, #10]
 801ae40:	b11b      	cbz	r3, 801ae4a <pbuf_copy_partial+0x32>
 801ae42:	4563      	cmp	r3, ip
      offset = (u16_t)(offset - p->len);
 801ae44:	eba3 020c 	sub.w	r2, r3, ip
    if ((offset != 0) && (offset >= p->len)) {
 801ae48:	d2f1      	bcs.n	801ae2e <pbuf_copy_partial+0x16>
      buf_copy_len = (u16_t)(p->len - offset);
 801ae4a:	ebac 0c03 	sub.w	ip, ip, r3
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ae4e:	6869      	ldr	r1, [r5, #4]
      buf_copy_len = (u16_t)(p->len - offset);
 801ae50:	fa1f f48c 	uxth.w	r4, ip
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ae54:	4419      	add	r1, r3
 801ae56:	4544      	cmp	r4, r8
 801ae58:	bf28      	it	cs
 801ae5a:	4644      	movcs	r4, r8
 801ae5c:	4622      	mov	r2, r4
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801ae5e:	4426      	add	r6, r4
      left = (u16_t)(left + buf_copy_len);
      len = (u16_t)(len - buf_copy_len);
 801ae60:	eba8 0404 	sub.w	r4, r8, r4
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801ae64:	f009 f830 	bl	8023ec8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 801ae68:	b2b6      	uxth	r6, r6
      offset = 0;
 801ae6a:	2300      	movs	r3, #0
      len = (u16_t)(len - buf_copy_len);
 801ae6c:	fa1f f884 	uxth.w	r8, r4
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801ae70:	682d      	ldr	r5, [r5, #0]
 801ae72:	f1b8 0f00 	cmp.w	r8, #0
 801ae76:	d1df      	bne.n	801ae38 <pbuf_copy_partial+0x20>
    }
  }
  return copied_total;
}
 801ae78:	4630      	mov	r0, r6
 801ae7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801ae7e:	4b0a      	ldr	r3, [pc, #40]	; (801aea8 <pbuf_copy_partial+0x90>)
 801ae80:	f240 420a 	movw	r2, #1034	; 0x40a
 801ae84:	4909      	ldr	r1, [pc, #36]	; (801aeac <pbuf_copy_partial+0x94>)
 801ae86:	462e      	mov	r6, r5
 801ae88:	4809      	ldr	r0, [pc, #36]	; (801aeb0 <pbuf_copy_partial+0x98>)
 801ae8a:	f009 ffe3 	bl	8024e54 <iprintf>
 801ae8e:	e7f3      	b.n	801ae78 <pbuf_copy_partial+0x60>
  u16_t left = 0;
 801ae90:	4616      	mov	r6, r2
 801ae92:	e7f1      	b.n	801ae78 <pbuf_copy_partial+0x60>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801ae94:	4b04      	ldr	r3, [pc, #16]	; (801aea8 <pbuf_copy_partial+0x90>)
 801ae96:	f240 420b 	movw	r2, #1035	; 0x40b
 801ae9a:	4906      	ldr	r1, [pc, #24]	; (801aeb4 <pbuf_copy_partial+0x9c>)
 801ae9c:	463e      	mov	r6, r7
 801ae9e:	4804      	ldr	r0, [pc, #16]	; (801aeb0 <pbuf_copy_partial+0x98>)
 801aea0:	f009 ffd8 	bl	8024e54 <iprintf>
 801aea4:	e7e8      	b.n	801ae78 <pbuf_copy_partial+0x60>
 801aea6:	bf00      	nop
 801aea8:	08043370 	.word	0x08043370
 801aeac:	080435b8 	.word	0x080435b8
 801aeb0:	08029a64 	.word	0x08029a64
 801aeb4:	080435d8 	.word	0x080435d8

0801aeb8 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801aeb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
  size_t copied_total = 0;

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801aebc:	2800      	cmp	r0, #0
 801aebe:	d049      	beq.n	801af54 <pbuf_take+0x9c>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801aec0:	460f      	mov	r7, r1
 801aec2:	2900      	cmp	r1, #0
 801aec4:	d03c      	beq.n	801af40 <pbuf_take+0x88>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801aec6:	8903      	ldrh	r3, [r0, #8]
 801aec8:	4604      	mov	r4, r0
 801aeca:	4690      	mov	r8, r2
 801aecc:	4293      	cmp	r3, r2
 801aece:	d32d      	bcc.n	801af2c <pbuf_take+0x74>
  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
    return ERR_ARG;
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801aed0:	b34a      	cbz	r2, 801af26 <pbuf_take+0x6e>
 801aed2:	4615      	mov	r5, r2
  size_t copied_total = 0;
 801aed4:	2600      	movs	r6, #0
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801aed6:	f8df b094 	ldr.w	fp, [pc, #148]	; 801af6c <pbuf_take+0xb4>
 801aeda:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 801af80 <pbuf_take+0xc8>
    buf_copy_len = total_copy_len;
    if (buf_copy_len > p->len) {
 801aede:	8962      	ldrh	r2, [r4, #10]
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801aee0:	19b9      	adds	r1, r7, r6
 801aee2:	6860      	ldr	r0, [r4, #4]
 801aee4:	42aa      	cmp	r2, r5
 801aee6:	bf28      	it	cs
 801aee8:	462a      	movcs	r2, r5
 801aeea:	4691      	mov	r9, r2
    total_copy_len -= buf_copy_len;
    copied_total += buf_copy_len;
 801aeec:	4416      	add	r6, r2
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801aeee:	f008 ffeb 	bl	8023ec8 <memcpy>
  for (p = buf; total_copy_len != 0; p = p->next) {
 801aef2:	6824      	ldr	r4, [r4, #0]
 801aef4:	ebb5 0509 	subs.w	r5, r5, r9
 801aef8:	d009      	beq.n	801af0e <pbuf_take+0x56>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801aefa:	2c00      	cmp	r4, #0
 801aefc:	d1ef      	bne.n	801aede <pbuf_take+0x26>
 801aefe:	465b      	mov	r3, fp
 801af00:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801af04:	4651      	mov	r1, sl
 801af06:	4818      	ldr	r0, [pc, #96]	; (801af68 <pbuf_take+0xb0>)
 801af08:	f009 ffa4 	bl	8024e54 <iprintf>
 801af0c:	e7e7      	b.n	801aede <pbuf_take+0x26>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801af0e:	45b0      	cmp	r8, r6
 801af10:	d009      	beq.n	801af26 <pbuf_take+0x6e>
 801af12:	4b16      	ldr	r3, [pc, #88]	; (801af6c <pbuf_take+0xb4>)
 801af14:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801af18:	4915      	ldr	r1, [pc, #84]	; (801af70 <pbuf_take+0xb8>)
 801af1a:	4813      	ldr	r0, [pc, #76]	; (801af68 <pbuf_take+0xb0>)
 801af1c:	f009 ff9a 	bl	8024e54 <iprintf>
  return ERR_OK;
 801af20:	4628      	mov	r0, r5
}
 801af22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_OK;
 801af26:	2000      	movs	r0, #0
}
 801af28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801af2c:	4b0f      	ldr	r3, [pc, #60]	; (801af6c <pbuf_take+0xb4>)
 801af2e:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801af32:	4910      	ldr	r1, [pc, #64]	; (801af74 <pbuf_take+0xbc>)
 801af34:	480c      	ldr	r0, [pc, #48]	; (801af68 <pbuf_take+0xb0>)
 801af36:	f009 ff8d 	bl	8024e54 <iprintf>
 801af3a:	f04f 30ff 	mov.w	r0, #4294967295
 801af3e:	e7f3      	b.n	801af28 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801af40:	4b0a      	ldr	r3, [pc, #40]	; (801af6c <pbuf_take+0xb4>)
 801af42:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801af46:	490c      	ldr	r1, [pc, #48]	; (801af78 <pbuf_take+0xc0>)
 801af48:	4807      	ldr	r0, [pc, #28]	; (801af68 <pbuf_take+0xb0>)
 801af4a:	f009 ff83 	bl	8024e54 <iprintf>
 801af4e:	f06f 000f 	mvn.w	r0, #15
 801af52:	e7e9      	b.n	801af28 <pbuf_take+0x70>
  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801af54:	4b05      	ldr	r3, [pc, #20]	; (801af6c <pbuf_take+0xb4>)
 801af56:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801af5a:	4908      	ldr	r1, [pc, #32]	; (801af7c <pbuf_take+0xc4>)
 801af5c:	4802      	ldr	r0, [pc, #8]	; (801af68 <pbuf_take+0xb0>)
 801af5e:	f009 ff79 	bl	8024e54 <iprintf>
 801af62:	f06f 000f 	mvn.w	r0, #15
 801af66:	e7df      	b.n	801af28 <pbuf_take+0x70>
 801af68:	08029a64 	.word	0x08029a64
 801af6c:	08043370 	.word	0x08043370
 801af70:	08043668 	.word	0x08043668
 801af74:	08043630 	.word	0x08043630
 801af78:	08043614 	.word	0x08043614
 801af7c:	080435fc 	.word	0x080435fc
 801af80:	08043650 	.word	0x08043650

0801af84 <pbuf_take_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801af84:	b390      	cbz	r0, 801afec <pbuf_take_at+0x68>
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 801af86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af8a:	460f      	mov	r7, r1
 801af8c:	4604      	mov	r4, r0
 801af8e:	e002      	b.n	801af96 <pbuf_take_at+0x12>
    q = q->next;
 801af90:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801af92:	b283      	uxth	r3, r0
  while ((q != NULL) && (q->len <= offset_left)) {
 801af94:	b334      	cbz	r4, 801afe4 <pbuf_take_at+0x60>
 801af96:	8965      	ldrh	r5, [r4, #10]
 801af98:	429d      	cmp	r5, r3
    offset_left = (u16_t)(offset_left - q->len);
 801af9a:	eba3 0005 	sub.w	r0, r3, r5
  while ((q != NULL) && (q->len <= offset_left)) {
 801af9e:	d9f7      	bls.n	801af90 <pbuf_take_at+0xc>
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801afa0:	8921      	ldrh	r1, [r4, #8]
 801afa2:	189e      	adds	r6, r3, r2
 801afa4:	42b1      	cmp	r1, r6
 801afa6:	db1d      	blt.n	801afe4 <pbuf_take_at+0x60>
    u16_t remaining_len = len;
    const u8_t *src_ptr = (const u8_t *)dataptr;
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 801afa8:	1ae9      	subs	r1, r5, r3
 801afaa:	428a      	cmp	r2, r1
 801afac:	dc07      	bgt.n	801afbe <pbuf_take_at+0x3a>
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801afae:	6860      	ldr	r0, [r4, #4]
 801afb0:	4639      	mov	r1, r7
 801afb2:	4418      	add	r0, r3
 801afb4:	f008 ff88 	bl	8023ec8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
    src_ptr += first_copy_len;
    if (remaining_len > 0) {
      return pbuf_take(q->next, src_ptr, remaining_len);
    }
    return ERR_OK;
 801afb8:	2000      	movs	r0, #0
  }
  return ERR_MEM;
}
 801afba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 801afbe:	fa1f f881 	uxth.w	r8, r1
 801afc2:	6860      	ldr	r0, [r4, #4]
 801afc4:	4639      	mov	r1, r7
 801afc6:	4642      	mov	r2, r8
 801afc8:	4418      	add	r0, r3
 801afca:	f008 ff7d 	bl	8023ec8 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 801afce:	1b70      	subs	r0, r6, r5
 801afd0:	b282      	uxth	r2, r0
    if (remaining_len > 0) {
 801afd2:	2a00      	cmp	r2, #0
 801afd4:	d0f0      	beq.n	801afb8 <pbuf_take_at+0x34>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801afd6:	eb07 0108 	add.w	r1, r7, r8
 801afda:	6820      	ldr	r0, [r4, #0]
}
 801afdc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      return pbuf_take(q->next, src_ptr, remaining_len);
 801afe0:	f7ff bf6a 	b.w	801aeb8 <pbuf_take>
  return ERR_MEM;
 801afe4:	f04f 30ff 	mov.w	r0, #4294967295
}
 801afe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ERR_MEM;
 801afec:	f04f 30ff 	mov.w	r0, #4294967295
}
 801aff0:	4770      	bx	lr
 801aff2:	bf00      	nop

0801aff4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801aff4:	b538      	push	{r3, r4, r5, lr}
 801aff6:	4615      	mov	r5, r2
 801aff8:	460a      	mov	r2, r1
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801affa:	8929      	ldrh	r1, [r5, #8]
 801affc:	f7ff fc96 	bl	801a92c <pbuf_alloc>
  if (q == NULL) {
 801b000:	4604      	mov	r4, r0
 801b002:	b138      	cbz	r0, 801b014 <pbuf_clone+0x20>
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b004:	8902      	ldrh	r2, [r0, #8]
 801b006:	892b      	ldrh	r3, [r5, #8]
 801b008:	429a      	cmp	r2, r3
 801b00a:	d305      	bcc.n	801b018 <pbuf_clone+0x24>
 801b00c:	4629      	mov	r1, r5
 801b00e:	f7ff fbc3 	bl	801a798 <pbuf_copy.part.0>
    return NULL;
  }
  err = pbuf_copy(q, p);
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b012:	b940      	cbnz	r0, 801b026 <pbuf_clone+0x32>
  return q;
}
 801b014:	4620      	mov	r0, r4
 801b016:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801b018:	4b07      	ldr	r3, [pc, #28]	; (801b038 <pbuf_clone+0x44>)
 801b01a:	f240 32c9 	movw	r2, #969	; 0x3c9
 801b01e:	4907      	ldr	r1, [pc, #28]	; (801b03c <pbuf_clone+0x48>)
 801b020:	4807      	ldr	r0, [pc, #28]	; (801b040 <pbuf_clone+0x4c>)
 801b022:	f009 ff17 	bl	8024e54 <iprintf>
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801b026:	4b04      	ldr	r3, [pc, #16]	; (801b038 <pbuf_clone+0x44>)
 801b028:	f240 5224 	movw	r2, #1316	; 0x524
 801b02c:	4905      	ldr	r1, [pc, #20]	; (801b044 <pbuf_clone+0x50>)
 801b02e:	4804      	ldr	r0, [pc, #16]	; (801b040 <pbuf_clone+0x4c>)
 801b030:	f009 ff10 	bl	8024e54 <iprintf>
}
 801b034:	4620      	mov	r0, r4
 801b036:	bd38      	pop	{r3, r4, r5, pc}
 801b038:	08043370 	.word	0x08043370
 801b03c:	08043588 	.word	0x08043588
 801b040:	08029a64 	.word	0x08029a64
 801b044:	08043680 	.word	0x08043680

0801b048 <pbuf_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b048:	b918      	cbnz	r0, 801b052 <pbuf_get_at+0xa>
 801b04a:	e00a      	b.n	801b062 <pbuf_get_at+0x1a>
    q = q->next;
 801b04c:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b04e:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b050:	b130      	cbz	r0, 801b060 <pbuf_get_at+0x18>
 801b052:	8943      	ldrh	r3, [r0, #10]
 801b054:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b056:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b05a:	d9f7      	bls.n	801b04c <pbuf_get_at+0x4>
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    return ((u8_t *)q->payload)[q_idx];
 801b05c:	6843      	ldr	r3, [r0, #4]
 801b05e:	5c58      	ldrb	r0, [r3, r1]
}
 801b060:	4770      	bx	lr
 801b062:	4770      	bx	lr

0801b064 <pbuf_try_get_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b064:	b140      	cbz	r0, 801b078 <pbuf_try_get_at+0x14>
 801b066:	8943      	ldrh	r3, [r0, #10]
 801b068:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b06a:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b06e:	d806      	bhi.n	801b07e <pbuf_try_get_at+0x1a>
    q = q->next;
 801b070:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b072:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b074:	2800      	cmp	r0, #0
 801b076:	d1f6      	bne.n	801b066 <pbuf_try_get_at+0x2>
  }
  return -1;
 801b078:	f04f 30ff 	mov.w	r0, #4294967295
}
 801b07c:	4770      	bx	lr
    return ((u8_t *)q->payload)[q_idx];
 801b07e:	6843      	ldr	r3, [r0, #4]
 801b080:	5c58      	ldrb	r0, [r3, r1]
 801b082:	4770      	bx	lr

0801b084 <pbuf_put_at>:
  while ((q != NULL) && (q->len <= offset_left)) {
 801b084:	b918      	cbnz	r0, 801b08e <pbuf_put_at+0xa>
 801b086:	e00a      	b.n	801b09e <pbuf_put_at+0x1a>
    q = q->next;
 801b088:	6800      	ldr	r0, [r0, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b08a:	b299      	uxth	r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b08c:	b130      	cbz	r0, 801b09c <pbuf_put_at+0x18>
 801b08e:	8943      	ldrh	r3, [r0, #10]
 801b090:	428b      	cmp	r3, r1
    offset_left = (u16_t)(offset_left - q->len);
 801b092:	eba1 0303 	sub.w	r3, r1, r3
  while ((q != NULL) && (q->len <= offset_left)) {
 801b096:	d9f7      	bls.n	801b088 <pbuf_put_at+0x4>
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
    ((u8_t *)q->payload)[q_idx] = data;
 801b098:	6843      	ldr	r3, [r0, #4]
 801b09a:	545a      	strb	r2, [r3, r1]
  }
}
 801b09c:	4770      	bx	lr
 801b09e:	4770      	bx	lr

0801b0a0 <pbuf_memcmp>:
 * @return zero if equal, nonzero otherwise
 *         (0xffff if p is too short, diffoffset+1 otherwise)
 */
u16_t
pbuf_memcmp(const struct pbuf *p, u16_t offset, const void *s2, u16_t n)
{
 801b0a0:	b570      	push	{r4, r5, r6, lr}
  u16_t start = offset;
  const struct pbuf *q = p;
  u16_t i;

  /* pbuf long enough to perform check? */
  if (p->tot_len < (offset + n)) {
 801b0a2:	8905      	ldrh	r5, [r0, #8]
 801b0a4:	18cc      	adds	r4, r1, r3
 801b0a6:	42a5      	cmp	r5, r4
 801b0a8:	db2e      	blt.n	801b108 <pbuf_memcmp+0x68>
    return 0xffff;
  }

  /* get the correct pbuf from chain. We know it succeeds because of p->tot_len check above. */
  while ((q != NULL) && (q->len <= start)) {
 801b0aa:	8944      	ldrh	r4, [r0, #10]
 801b0ac:	428c      	cmp	r4, r1
    start = (u16_t)(start - q->len);
 801b0ae:	eba1 0404 	sub.w	r4, r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b0b2:	d803      	bhi.n	801b0bc <pbuf_memcmp+0x1c>
    q = q->next;
 801b0b4:	6800      	ldr	r0, [r0, #0]
    start = (u16_t)(start - q->len);
 801b0b6:	b2a1      	uxth	r1, r4
  while ((q != NULL) && (q->len <= start)) {
 801b0b8:	2800      	cmp	r0, #0
 801b0ba:	d1f6      	bne.n	801b0aa <pbuf_memcmp+0xa>
  }

  /* return requested data if pbuf is OK */
  for (i = 0; i < n; i++) {
 801b0bc:	b1f3      	cbz	r3, 801b0fc <pbuf_memcmp+0x5c>
 801b0be:	2500      	movs	r5, #0
 801b0c0:	1e56      	subs	r6, r2, #1
 801b0c2:	46ae      	mov	lr, r5
    /* We know pbuf_get_at() succeeds because of p->tot_len check above. */
    u8_t a = pbuf_get_at(q, (u16_t)(start + i));
 801b0c4:	eb01 0c0e 	add.w	ip, r1, lr
  while ((q != NULL) && (q->len <= offset_left)) {
 801b0c8:	4604      	mov	r4, r0
 801b0ca:	fa1f fc8c 	uxth.w	ip, ip
 801b0ce:	b920      	cbnz	r0, 801b0da <pbuf_memcmp+0x3a>
 801b0d0:	e00b      	b.n	801b0ea <pbuf_memcmp+0x4a>
    q = q->next;
 801b0d2:	6824      	ldr	r4, [r4, #0]
    offset_left = (u16_t)(offset_left - q->len);
 801b0d4:	fa1f fc82 	uxth.w	ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b0d8:	b13c      	cbz	r4, 801b0ea <pbuf_memcmp+0x4a>
 801b0da:	8962      	ldrh	r2, [r4, #10]
 801b0dc:	4594      	cmp	ip, r2
    offset_left = (u16_t)(offset_left - q->len);
 801b0de:	ebac 0202 	sub.w	r2, ip, r2
  while ((q != NULL) && (q->len <= offset_left)) {
 801b0e2:	d2f6      	bcs.n	801b0d2 <pbuf_memcmp+0x32>
    return ((u8_t *)q->payload)[q_idx];
 801b0e4:	6862      	ldr	r2, [r4, #4]
 801b0e6:	f812 400c 	ldrb.w	r4, [r2, ip]
    u8_t b = ((const u8_t *)s2)[i];
    if (a != b) {
 801b0ea:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 801b0ee:	42a2      	cmp	r2, r4
 801b0f0:	d106      	bne.n	801b100 <pbuf_memcmp+0x60>
  for (i = 0; i < n; i++) {
 801b0f2:	3501      	adds	r5, #1
 801b0f4:	fa1f fe85 	uxth.w	lr, r5
 801b0f8:	4573      	cmp	r3, lr
 801b0fa:	d8e3      	bhi.n	801b0c4 <pbuf_memcmp+0x24>
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
    }
  }
  return 0;
 801b0fc:	2000      	movs	r0, #0
}
 801b0fe:	bd70      	pop	{r4, r5, r6, pc}
      return (u16_t)LWIP_MIN(i + 1, 0xFFFF);
 801b100:	f10e 0001 	add.w	r0, lr, #1
 801b104:	b280      	uxth	r0, r0
}
 801b106:	bd70      	pop	{r4, r5, r6, pc}
    return 0xffff;
 801b108:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b10c:	bd70      	pop	{r4, r5, r6, pc}
 801b10e:	bf00      	nop

0801b110 <pbuf_memfind>:
 * @param start_offset offset into p at which to start searching
 * @return 0xFFFF if substr was not found in p or the index where it was found
 */
u16_t
pbuf_memfind(const struct pbuf *p, const void *mem, u16_t mem_len, u16_t start_offset)
{
 801b110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b112:	461c      	mov	r4, r3
  u16_t i;
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b114:	8905      	ldrh	r5, [r0, #8]
{
 801b116:	4613      	mov	r3, r2
  if (p->tot_len >= mem_len + start_offset) {
 801b118:	4422      	add	r2, r4
 801b11a:	4295      	cmp	r5, r2
 801b11c:	db15      	blt.n	801b14a <pbuf_memfind+0x3a>
  u16_t max_cmp_start = (u16_t)(p->tot_len - mem_len);
 801b11e:	1aed      	subs	r5, r5, r3
 801b120:	4606      	mov	r6, r0
 801b122:	460f      	mov	r7, r1
 801b124:	b2ad      	uxth	r5, r5
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b126:	42a5      	cmp	r5, r4
 801b128:	d204      	bcs.n	801b134 <pbuf_memfind+0x24>
 801b12a:	e00e      	b.n	801b14a <pbuf_memfind+0x3a>
 801b12c:	fa1f f48c 	uxth.w	r4, ip
 801b130:	42a5      	cmp	r5, r4
 801b132:	d30a      	bcc.n	801b14a <pbuf_memfind+0x3a>
      u16_t plus = pbuf_memcmp(p, i, mem, mem_len);
 801b134:	4621      	mov	r1, r4
 801b136:	463a      	mov	r2, r7
 801b138:	4630      	mov	r0, r6
 801b13a:	f7ff ffb1 	bl	801b0a0 <pbuf_memcmp>
    for (i = start_offset; i <= max_cmp_start; i++) {
 801b13e:	f104 0c01 	add.w	ip, r4, #1
      if (plus == 0) {
 801b142:	2800      	cmp	r0, #0
 801b144:	d1f2      	bne.n	801b12c <pbuf_memfind+0x1c>
 801b146:	4620      	mov	r0, r4
        return i;
      }
    }
  }
  return 0xFFFF;
}
 801b148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return 0xFFFF;
 801b14a:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
 801b14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801b150 <raw_input>:
 *           caller).
 *
 */
raw_input_state_t
raw_input(struct pbuf *p, struct netif *inp)
{
 801b150:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct raw_pcb *pcb, *prev;
  s16_t proto;
  raw_input_state_t ret = RAW_INPUT_NONE;
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b154:	4e33      	ldr	r6, [pc, #204]	; (801b224 <raw_input+0xd4>)
{
 801b156:	4680      	mov	r8, r0
  u8_t broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801b158:	6831      	ldr	r1, [r6, #0]
 801b15a:	6970      	ldr	r0, [r6, #20]
 801b15c:	f007 fb90 	bl	8022880 <ip4_addr_isbroadcast_u32>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    proto = IPH_PROTO((struct ip_hdr *)p->payload);
 801b160:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b164:	7a5d      	ldrb	r5, [r3, #9]
  }
#endif /* LWIP_IPV4 */

  prev = NULL;
  pcb = raw_pcbs;
 801b166:	4b30      	ldr	r3, [pc, #192]	; (801b228 <raw_input+0xd8>)
 801b168:	681c      	ldr	r4, [r3, #0]
  /* loop through all raw pcbs until the packet is eaten by one */
  /* this allows multiple pcbs to match against the packet by design */
  while (pcb != NULL) {
 801b16a:	2c00      	cmp	r4, #0
 801b16c:	d056      	beq.n	801b21c <raw_input+0xcc>
 801b16e:	4681      	mov	r9, r0
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b170:	2000      	movs	r0, #0
#ifndef LWIP_NOASSERT
        void *old_payload = p->payload;
#endif
        ret = RAW_INPUT_DELIVERED;
        /* the receive callback function did not eat the packet? */
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b172:	f106 0b10 	add.w	fp, r6, #16
 801b176:	46ca      	mov	sl, r9
  prev = NULL;
 801b178:	4606      	mov	r6, r0
 801b17a:	e004      	b.n	801b186 <raw_input+0x36>
      }
      /* no receive callback function was set for this raw PCB */
    }
    /* drop the packet */
    prev = pcb;
    pcb = pcb->next;
 801b17c:	68e3      	ldr	r3, [r4, #12]
  while (pcb != NULL) {
 801b17e:	4626      	mov	r6, r4
 801b180:	2b00      	cmp	r3, #0
 801b182:	d037      	beq.n	801b1f4 <raw_input+0xa4>
 801b184:	461c      	mov	r4, r3
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b186:	7c23      	ldrb	r3, [r4, #16]
 801b188:	42ab      	cmp	r3, r5
 801b18a:	d1f7      	bne.n	801b17c <raw_input+0x2c>
 801b18c:	7a22      	ldrb	r2, [r4, #8]
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b18e:	b13a      	cbz	r2, 801b1a0 <raw_input+0x50>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b190:	4b24      	ldr	r3, [pc, #144]	; (801b224 <raw_input+0xd4>)
 801b192:	685b      	ldr	r3, [r3, #4]
 801b194:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801b198:	3301      	adds	r3, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b19a:	b2db      	uxtb	r3, r3
 801b19c:	429a      	cmp	r2, r3
 801b19e:	d1ed      	bne.n	801b17c <raw_input+0x2c>
 801b1a0:	6823      	ldr	r3, [r4, #0]
    if (broadcast != 0) {
 801b1a2:	f1ba 0f00 	cmp.w	sl, #0
 801b1a6:	d027      	beq.n	801b1f8 <raw_input+0xa8>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip))) {
 801b1a8:	2b00      	cmp	r3, #0
 801b1aa:	d1e7      	bne.n	801b17c <raw_input+0x2c>
    if ((pcb->protocol == proto) && raw_input_local_match(pcb, broadcast) &&
 801b1ac:	7c63      	ldrb	r3, [r4, #17]
 801b1ae:	07db      	lsls	r3, r3, #31
 801b1b0:	d504      	bpl.n	801b1bc <raw_input+0x6c>
        (((pcb->flags & RAW_FLAGS_CONNECTED) == 0) ||
 801b1b2:	4b1c      	ldr	r3, [pc, #112]	; (801b224 <raw_input+0xd4>)
 801b1b4:	6862      	ldr	r2, [r4, #4]
 801b1b6:	691b      	ldr	r3, [r3, #16]
 801b1b8:	429a      	cmp	r2, r3
 801b1ba:	d1df      	bne.n	801b17c <raw_input+0x2c>
      if (pcb->recv != NULL) {
 801b1bc:	f8d4 9014 	ldr.w	r9, [r4, #20]
 801b1c0:	f1b9 0f00 	cmp.w	r9, #0
 801b1c4:	d0da      	beq.n	801b17c <raw_input+0x2c>
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b1c6:	465b      	mov	r3, fp
 801b1c8:	4642      	mov	r2, r8
 801b1ca:	4621      	mov	r1, r4
 801b1cc:	69a0      	ldr	r0, [r4, #24]
        void *old_payload = p->payload;
 801b1ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
        eaten = pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr());
 801b1d2:	47c8      	blx	r9
        if (eaten != 0) {
 801b1d4:	b9c8      	cbnz	r0, 801b20a <raw_input+0xba>
          LWIP_ASSERT("raw pcb recv callback altered pbuf payload pointer without eating packet",
 801b1d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801b1da:	42bb      	cmp	r3, r7
 801b1dc:	d013      	beq.n	801b206 <raw_input+0xb6>
 801b1de:	4b13      	ldr	r3, [pc, #76]	; (801b22c <raw_input+0xdc>)
 801b1e0:	22c0      	movs	r2, #192	; 0xc0
 801b1e2:	4913      	ldr	r1, [pc, #76]	; (801b230 <raw_input+0xe0>)
 801b1e4:	4626      	mov	r6, r4
 801b1e6:	4813      	ldr	r0, [pc, #76]	; (801b234 <raw_input+0xe4>)
 801b1e8:	f009 fe34 	bl	8024e54 <iprintf>
    pcb = pcb->next;
 801b1ec:	68e3      	ldr	r3, [r4, #12]
        ret = RAW_INPUT_DELIVERED;
 801b1ee:	2002      	movs	r0, #2
  while (pcb != NULL) {
 801b1f0:	2b00      	cmp	r3, #0
 801b1f2:	d1c7      	bne.n	801b184 <raw_input+0x34>
  }
  return ret;
}
 801b1f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) ||
 801b1f8:	2b00      	cmp	r3, #0
 801b1fa:	d0d7      	beq.n	801b1ac <raw_input+0x5c>
 801b1fc:	4a09      	ldr	r2, [pc, #36]	; (801b224 <raw_input+0xd4>)
 801b1fe:	6952      	ldr	r2, [r2, #20]
 801b200:	4293      	cmp	r3, r2
 801b202:	d1bb      	bne.n	801b17c <raw_input+0x2c>
 801b204:	e7d2      	b.n	801b1ac <raw_input+0x5c>
        ret = RAW_INPUT_DELIVERED;
 801b206:	2002      	movs	r0, #2
 801b208:	e7b8      	b.n	801b17c <raw_input+0x2c>
          if (prev != NULL) {
 801b20a:	b14e      	cbz	r6, 801b220 <raw_input+0xd0>
            pcb->next = raw_pcbs;
 801b20c:	4906      	ldr	r1, [pc, #24]	; (801b228 <raw_input+0xd8>)
          return RAW_INPUT_EATEN;
 801b20e:	2001      	movs	r0, #1
            prev->next = pcb->next;
 801b210:	68e2      	ldr	r2, [r4, #12]
            pcb->next = raw_pcbs;
 801b212:	680b      	ldr	r3, [r1, #0]
            prev->next = pcb->next;
 801b214:	60f2      	str	r2, [r6, #12]
            raw_pcbs = pcb;
 801b216:	600c      	str	r4, [r1, #0]
            pcb->next = raw_pcbs;
 801b218:	60e3      	str	r3, [r4, #12]
            raw_pcbs = pcb;
 801b21a:	e7eb      	b.n	801b1f4 <raw_input+0xa4>
  raw_input_state_t ret = RAW_INPUT_NONE;
 801b21c:	4620      	mov	r0, r4
 801b21e:	e7e9      	b.n	801b1f4 <raw_input+0xa4>
          return RAW_INPUT_EATEN;
 801b220:	2001      	movs	r0, #1
 801b222:	e7e7      	b.n	801b1f4 <raw_input+0xa4>
 801b224:	2001f1f0 	.word	0x2001f1f0
 801b228:	2002e388 	.word	0x2002e388
 801b22c:	08043694 	.word	0x08043694
 801b230:	080436c4 	.word	0x080436c4
 801b234:	08029a64 	.word	0x08029a64

0801b238 <raw_netif_ip_addr_changed>:
 */
void raw_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct raw_pcb *rpcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b238:	b110      	cbz	r0, 801b240 <raw_netif_ip_addr_changed+0x8>
 801b23a:	6802      	ldr	r2, [r0, #0]
 801b23c:	b101      	cbz	r1, 801b240 <raw_netif_ip_addr_changed+0x8>
 801b23e:	b902      	cbnz	r2, 801b242 <raw_netif_ip_addr_changed+0xa>
 801b240:	4770      	bx	lr
 801b242:	680b      	ldr	r3, [r1, #0]
 801b244:	2b00      	cmp	r3, #0
 801b246:	d0fb      	beq.n	801b240 <raw_netif_ip_addr_changed+0x8>
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b248:	4b08      	ldr	r3, [pc, #32]	; (801b26c <raw_netif_ip_addr_changed+0x34>)
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	2b00      	cmp	r3, #0
 801b24e:	d0f7      	beq.n	801b240 <raw_netif_ip_addr_changed+0x8>
{
 801b250:	b410      	push	{r4}
 801b252:	e000      	b.n	801b256 <raw_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&rpcb->local_ip, old_addr)) {
 801b254:	6802      	ldr	r2, [r0, #0]
 801b256:	681c      	ldr	r4, [r3, #0]
 801b258:	4294      	cmp	r4, r2
 801b25a:	d101      	bne.n	801b260 <raw_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(rpcb->local_ip, *new_addr);
 801b25c:	680a      	ldr	r2, [r1, #0]
 801b25e:	601a      	str	r2, [r3, #0]
    for (rpcb = raw_pcbs; rpcb != NULL; rpcb = rpcb->next) {
 801b260:	68db      	ldr	r3, [r3, #12]
 801b262:	2b00      	cmp	r3, #0
 801b264:	d1f6      	bne.n	801b254 <raw_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801b266:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b26a:	4770      	bx	lr
 801b26c:	2002e388 	.word	0x2002e388

0801b270 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 801b270:	b4f0      	push	{r4, r5, r6, r7}
 801b272:	4f13      	ldr	r7, [pc, #76]	; (801b2c0 <tcp_new_port+0x50>)
 801b274:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801b278:	4e12      	ldr	r6, [pc, #72]	; (801b2c4 <tcp_new_port+0x54>)
  u16_t n = 0;
  struct tcp_pcb *pcb;

again:
  tcp_port++;
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801b27a:	f64f 7cff 	movw	ip, #65535	; 0xffff
 801b27e:	8838      	ldrh	r0, [r7, #0]
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b280:	4d11      	ldr	r5, [pc, #68]	; (801b2c8 <tcp_new_port+0x58>)
  tcp_port++;
 801b282:	3001      	adds	r0, #1
 801b284:	4c11      	ldr	r4, [pc, #68]	; (801b2cc <tcp_new_port+0x5c>)
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b286:	462b      	mov	r3, r5
  tcp_port++;
 801b288:	b280      	uxth	r0, r0
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801b28a:	4560      	cmp	r0, ip
 801b28c:	bf08      	it	eq
 801b28e:	f44f 4040 	moveq.w	r0, #49152	; 0xc000
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b292:	681b      	ldr	r3, [r3, #0]
 801b294:	b913      	cbnz	r3, 801b29c <tcp_new_port+0x2c>
 801b296:	e00b      	b.n	801b2b0 <tcp_new_port+0x40>
 801b298:	68db      	ldr	r3, [r3, #12]
 801b29a:	b14b      	cbz	r3, 801b2b0 <tcp_new_port+0x40>
      if (pcb->local_port == tcp_port) {
 801b29c:	8ada      	ldrh	r2, [r3, #22]
 801b29e:	4282      	cmp	r2, r0
 801b2a0:	d1fa      	bne.n	801b298 <tcp_new_port+0x28>
        n++;
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 801b2a2:	3901      	subs	r1, #1
 801b2a4:	b289      	uxth	r1, r1
 801b2a6:	2900      	cmp	r1, #0
 801b2a8:	d1eb      	bne.n	801b282 <tcp_new_port+0x12>
 801b2aa:	8038      	strh	r0, [r7, #0]
          return 0;
 801b2ac:	4608      	mov	r0, r1
 801b2ae:	e005      	b.n	801b2bc <tcp_new_port+0x4c>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801b2b0:	42b4      	cmp	r4, r6
 801b2b2:	d002      	beq.n	801b2ba <tcp_new_port+0x4a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 801b2b4:	f854 3b04 	ldr.w	r3, [r4], #4
 801b2b8:	e7eb      	b.n	801b292 <tcp_new_port+0x22>
 801b2ba:	8038      	strh	r0, [r7, #0]
        goto again;
      }
    }
  }
  return tcp_port;
}
 801b2bc:	bcf0      	pop	{r4, r5, r6, r7}
 801b2be:	4770      	bx	lr
 801b2c0:	200003f4 	.word	0x200003f4
 801b2c4:	08043e04 	.word	0x08043e04
 801b2c8:	2002e398 	.word	0x2002e398
 801b2cc:	08043df8 	.word	0x08043df8

0801b2d0 <tcp_close_shutdown_fin>:
{
 801b2d0:	b510      	push	{r4, lr}
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b2d2:	4604      	mov	r4, r0
 801b2d4:	b310      	cbz	r0, 801b31c <tcp_close_shutdown_fin+0x4c>
  switch (pcb->state) {
 801b2d6:	7d23      	ldrb	r3, [r4, #20]
 801b2d8:	2b04      	cmp	r3, #4
 801b2da:	d005      	beq.n	801b2e8 <tcp_close_shutdown_fin+0x18>
 801b2dc:	2b07      	cmp	r3, #7
 801b2de:	d00e      	beq.n	801b2fe <tcp_close_shutdown_fin+0x2e>
 801b2e0:	2b03      	cmp	r3, #3
 801b2e2:	d001      	beq.n	801b2e8 <tcp_close_shutdown_fin+0x18>
 801b2e4:	2000      	movs	r0, #0
}
 801b2e6:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b2e8:	4620      	mov	r0, r4
 801b2ea:	f003 fd33 	bl	801ed54 <tcp_send_fin>
      if (err == ERR_OK) {
 801b2ee:	b950      	cbnz	r0, 801b306 <tcp_close_shutdown_fin+0x36>
        pcb->state = FIN_WAIT_1;
 801b2f0:	2305      	movs	r3, #5
 801b2f2:	7523      	strb	r3, [r4, #20]
    tcp_output(pcb);
 801b2f4:	4620      	mov	r0, r4
 801b2f6:	f003 fe9d 	bl	801f034 <tcp_output>
 801b2fa:	2000      	movs	r0, #0
}
 801b2fc:	bd10      	pop	{r4, pc}
      err = tcp_send_fin(pcb);
 801b2fe:	4620      	mov	r0, r4
 801b300:	f003 fd28 	bl	801ed54 <tcp_send_fin>
      if (err == ERR_OK) {
 801b304:	b138      	cbz	r0, 801b316 <tcp_close_shutdown_fin+0x46>
  } else if (err == ERR_MEM) {
 801b306:	1c43      	adds	r3, r0, #1
 801b308:	d1ed      	bne.n	801b2e6 <tcp_close_shutdown_fin+0x16>
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b30a:	8b63      	ldrh	r3, [r4, #26]
    return ERR_OK;
 801b30c:	2000      	movs	r0, #0
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801b30e:	f043 0308 	orr.w	r3, r3, #8
 801b312:	8363      	strh	r3, [r4, #26]
}
 801b314:	bd10      	pop	{r4, pc}
        pcb->state = LAST_ACK;
 801b316:	2309      	movs	r3, #9
 801b318:	7523      	strb	r3, [r4, #20]
  if (err == ERR_OK) {
 801b31a:	e7eb      	b.n	801b2f4 <tcp_close_shutdown_fin+0x24>
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801b31c:	4b03      	ldr	r3, [pc, #12]	; (801b32c <tcp_close_shutdown_fin+0x5c>)
 801b31e:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801b322:	4903      	ldr	r1, [pc, #12]	; (801b330 <tcp_close_shutdown_fin+0x60>)
 801b324:	4803      	ldr	r0, [pc, #12]	; (801b334 <tcp_close_shutdown_fin+0x64>)
 801b326:	f009 fd95 	bl	8024e54 <iprintf>
 801b32a:	e7d4      	b.n	801b2d6 <tcp_close_shutdown_fin+0x6>
 801b32c:	08043710 	.word	0x08043710
 801b330:	08043740 	.word	0x08043740
 801b334:	08029a64 	.word	0x08029a64

0801b338 <tcp_init>:
{
 801b338:	b508      	push	{r3, lr}
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801b33a:	f009 fe2f 	bl	8024f9c <rand>
 801b33e:	4b02      	ldr	r3, [pc, #8]	; (801b348 <tcp_init+0x10>)
 801b340:	4a02      	ldr	r2, [pc, #8]	; (801b34c <tcp_init+0x14>)
 801b342:	4303      	orrs	r3, r0
 801b344:	8013      	strh	r3, [r2, #0]
}
 801b346:	bd08      	pop	{r3, pc}
 801b348:	ffffc000 	.word	0xffffc000
 801b34c:	200003f4 	.word	0x200003f4

0801b350 <tcp_free>:
{
 801b350:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b352:	7d03      	ldrb	r3, [r0, #20]
{
 801b354:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b356:	2b01      	cmp	r3, #1
 801b358:	d005      	beq.n	801b366 <tcp_free+0x16>
  memp_free(MEMP_TCP_PCB, pcb);
 801b35a:	4621      	mov	r1, r4
 801b35c:	2002      	movs	r0, #2
}
 801b35e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b362:	f7fe bf9d 	b.w	801a2a0 <memp_free>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b366:	4906      	ldr	r1, [pc, #24]	; (801b380 <tcp_free+0x30>)
 801b368:	22d4      	movs	r2, #212	; 0xd4
 801b36a:	4b06      	ldr	r3, [pc, #24]	; (801b384 <tcp_free+0x34>)
 801b36c:	4806      	ldr	r0, [pc, #24]	; (801b388 <tcp_free+0x38>)
 801b36e:	f009 fd71 	bl	8024e54 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801b372:	4621      	mov	r1, r4
 801b374:	2002      	movs	r0, #2
}
 801b376:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801b37a:	f7fe bf91 	b.w	801a2a0 <memp_free>
 801b37e:	bf00      	nop
 801b380:	0804374c 	.word	0x0804374c
 801b384:	08043710 	.word	0x08043710
 801b388:	08029a64 	.word	0x08029a64

0801b38c <tcp_bind>:
    ipaddr = IP4_ADDR_ANY;
 801b38c:	2900      	cmp	r1, #0
{
 801b38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ipaddr = IP4_ADDR_ANY;
 801b390:	4b26      	ldr	r3, [pc, #152]	; (801b42c <tcp_bind+0xa0>)
  if (ipaddr == NULL) {
 801b392:	460e      	mov	r6, r1
    ipaddr = IP4_ADDR_ANY;
 801b394:	bf14      	ite	ne
 801b396:	460e      	movne	r6, r1
 801b398:	461e      	moveq	r6, r3
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b39a:	2800      	cmp	r0, #0
 801b39c:	d03c      	beq.n	801b418 <tcp_bind+0x8c>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b39e:	7d03      	ldrb	r3, [r0, #20]
 801b3a0:	4607      	mov	r7, r0
 801b3a2:	bb7b      	cbnz	r3, 801b404 <tcp_bind+0x78>
  if (port == 0) {
 801b3a4:	b31a      	cbz	r2, 801b3ee <tcp_bind+0x62>
 801b3a6:	4922      	ldr	r1, [pc, #136]	; (801b430 <tcp_bind+0xa4>)
 801b3a8:	4b22      	ldr	r3, [pc, #136]	; (801b434 <tcp_bind+0xa8>)
 801b3aa:	f101 000c 	add.w	r0, r1, #12
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b3ae:	681b      	ldr	r3, [r3, #0]
 801b3b0:	b913      	cbnz	r3, 801b3b8 <tcp_bind+0x2c>
 801b3b2:	e00e      	b.n	801b3d2 <tcp_bind+0x46>
 801b3b4:	68db      	ldr	r3, [r3, #12]
 801b3b6:	b163      	cbz	r3, 801b3d2 <tcp_bind+0x46>
        if (cpcb->local_port == port) {
 801b3b8:	f8b3 c016 	ldrh.w	ip, [r3, #22]
 801b3bc:	4594      	cmp	ip, r2
 801b3be:	d1f9      	bne.n	801b3b4 <tcp_bind+0x28>
                (ip_addr_isany(&cpcb->local_ip) ||
 801b3c0:	681c      	ldr	r4, [r3, #0]
 801b3c2:	b11c      	cbz	r4, 801b3cc <tcp_bind+0x40>
                 ip_addr_isany(ipaddr) ||
 801b3c4:	6835      	ldr	r5, [r6, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801b3c6:	b10d      	cbz	r5, 801b3cc <tcp_bind+0x40>
 801b3c8:	42ac      	cmp	r4, r5
 801b3ca:	d1f3      	bne.n	801b3b4 <tcp_bind+0x28>
              return ERR_USE;
 801b3cc:	f06f 0007 	mvn.w	r0, #7
}
 801b3d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    for (i = 0; i < max_pcb_list; i++) {
 801b3d2:	4281      	cmp	r1, r0
 801b3d4:	d113      	bne.n	801b3fe <tcp_bind+0x72>
  if (!ip_addr_isany(ipaddr)
 801b3d6:	6833      	ldr	r3, [r6, #0]
 801b3d8:	b103      	cbz	r3, 801b3dc <tcp_bind+0x50>
    ip_addr_set(&pcb->local_ip, ipaddr);
 801b3da:	603b      	str	r3, [r7, #0]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b3dc:	4b16      	ldr	r3, [pc, #88]	; (801b438 <tcp_bind+0xac>)
  pcb->local_port = port;
 801b3de:	82fa      	strh	r2, [r7, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 801b3e0:	681a      	ldr	r2, [r3, #0]
 801b3e2:	601f      	str	r7, [r3, #0]
 801b3e4:	60fa      	str	r2, [r7, #12]
 801b3e6:	f004 f951 	bl	801f68c <tcp_timer_needed>
  return ERR_OK;
 801b3ea:	2000      	movs	r0, #0
}
 801b3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    port = tcp_new_port();
 801b3ee:	f7ff ff3f 	bl	801b270 <tcp_new_port>
    if (port == 0) {
 801b3f2:	4602      	mov	r2, r0
 801b3f4:	2800      	cmp	r0, #0
 801b3f6:	d1ee      	bne.n	801b3d6 <tcp_bind+0x4a>
      return ERR_BUF;
 801b3f8:	f06f 0001 	mvn.w	r0, #1
}
 801b3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801b3fe:	f851 3b04 	ldr.w	r3, [r1], #4
 801b402:	e7d4      	b.n	801b3ae <tcp_bind+0x22>
  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 801b404:	4b0d      	ldr	r3, [pc, #52]	; (801b43c <tcp_bind+0xb0>)
 801b406:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b40a:	490d      	ldr	r1, [pc, #52]	; (801b440 <tcp_bind+0xb4>)
 801b40c:	480d      	ldr	r0, [pc, #52]	; (801b444 <tcp_bind+0xb8>)
 801b40e:	f009 fd21 	bl	8024e54 <iprintf>
 801b412:	f06f 0005 	mvn.w	r0, #5
}
 801b416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b418:	4b08      	ldr	r3, [pc, #32]	; (801b43c <tcp_bind+0xb0>)
 801b41a:	f240 22a9 	movw	r2, #681	; 0x2a9
 801b41e:	490a      	ldr	r1, [pc, #40]	; (801b448 <tcp_bind+0xbc>)
 801b420:	4808      	ldr	r0, [pc, #32]	; (801b444 <tcp_bind+0xb8>)
 801b422:	f009 fd17 	bl	8024e54 <iprintf>
 801b426:	f06f 000f 	mvn.w	r0, #15
}
 801b42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b42c:	08045328 	.word	0x08045328
 801b430:	08043df8 	.word	0x08043df8
 801b434:	2002e398 	.word	0x2002e398
 801b438:	2002e394 	.word	0x2002e394
 801b43c:	08043710 	.word	0x08043710
 801b440:	08043778 	.word	0x08043778
 801b444:	08029a64 	.word	0x08029a64
 801b448:	08043760 	.word	0x08043760

0801b44c <tcp_listen_with_backlog_and_err>:
{
 801b44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b44e:	4604      	mov	r4, r0
{
 801b450:	4617      	mov	r7, r2
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b452:	2800      	cmp	r0, #0
 801b454:	d060      	beq.n	801b518 <tcp_listen_with_backlog_and_err+0xcc>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b456:	7d05      	ldrb	r5, [r0, #20]
 801b458:	2d00      	cmp	r5, #0
 801b45a:	d14a      	bne.n	801b4f2 <tcp_listen_with_backlog_and_err+0xa6>
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 801b45c:	f240 3272 	movw	r2, #882	; 0x372
 801b460:	4933      	ldr	r1, [pc, #204]	; (801b530 <tcp_listen_with_backlog_and_err+0xe4>)
 801b462:	2003      	movs	r0, #3
 801b464:	f7fe fee6 	bl	801a234 <memp_malloc_fn>
  if (lpcb == NULL) {
 801b468:	4606      	mov	r6, r0
 801b46a:	2800      	cmp	r0, #0
 801b46c:	d051      	beq.n	801b512 <tcp_listen_with_backlog_and_err+0xc6>
  lpcb->callback_arg = pcb->callback_arg;
 801b46e:	6923      	ldr	r3, [r4, #16]
  lpcb->state = LISTEN;
 801b470:	2201      	movs	r2, #1
  lpcb->callback_arg = pcb->callback_arg;
 801b472:	6103      	str	r3, [r0, #16]
  lpcb->local_port = pcb->local_port;
 801b474:	8ae3      	ldrh	r3, [r4, #22]
  lpcb->state = LISTEN;
 801b476:	7502      	strb	r2, [r0, #20]
  lpcb->local_port = pcb->local_port;
 801b478:	82c3      	strh	r3, [r0, #22]
  lpcb->prio = pcb->prio;
 801b47a:	7d62      	ldrb	r2, [r4, #21]
 801b47c:	7542      	strb	r2, [r0, #21]
  lpcb->so_options = pcb->so_options;
 801b47e:	7a62      	ldrb	r2, [r4, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 801b480:	7205      	strb	r5, [r0, #8]
  lpcb->so_options = pcb->so_options;
 801b482:	7242      	strb	r2, [r0, #9]
  lpcb->ttl = pcb->ttl;
 801b484:	7ae2      	ldrb	r2, [r4, #11]
 801b486:	72c2      	strb	r2, [r0, #11]
  lpcb->tos = pcb->tos;
 801b488:	7aa2      	ldrb	r2, [r4, #10]
 801b48a:	7282      	strb	r2, [r0, #10]
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801b48c:	6822      	ldr	r2, [r4, #0]
 801b48e:	6002      	str	r2, [r0, #0]
  if (pcb->local_port != 0) {
 801b490:	b99b      	cbnz	r3, 801b4ba <tcp_listen_with_backlog_and_err+0x6e>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b492:	7d23      	ldrb	r3, [r4, #20]
 801b494:	2b01      	cmp	r3, #1
 801b496:	d020      	beq.n	801b4da <tcp_listen_with_backlog_and_err+0x8e>
  memp_free(MEMP_TCP_PCB, pcb);
 801b498:	4621      	mov	r1, r4
 801b49a:	2002      	movs	r0, #2
 801b49c:	f7fe ff00 	bl	801a2a0 <memp_free>
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b4a0:	4b24      	ldr	r3, [pc, #144]	; (801b534 <tcp_listen_with_backlog_and_err+0xe8>)
  lpcb->accept = tcp_accept_null;
 801b4a2:	4925      	ldr	r1, [pc, #148]	; (801b538 <tcp_listen_with_backlog_and_err+0xec>)
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b4a4:	681a      	ldr	r2, [r3, #0]
  lpcb->accept = tcp_accept_null;
 801b4a6:	61b1      	str	r1, [r6, #24]
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 801b4a8:	60f2      	str	r2, [r6, #12]
 801b4aa:	601e      	str	r6, [r3, #0]
 801b4ac:	f004 f8ee 	bl	801f68c <tcp_timer_needed>
  res = ERR_OK;
 801b4b0:	2300      	movs	r3, #0
  if (err != NULL) {
 801b4b2:	b107      	cbz	r7, 801b4b6 <tcp_listen_with_backlog_and_err+0x6a>
    *err = res;
 801b4b4:	703b      	strb	r3, [r7, #0]
}
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b4ba:	4a20      	ldr	r2, [pc, #128]	; (801b53c <tcp_listen_with_backlog_and_err+0xf0>)
 801b4bc:	6813      	ldr	r3, [r2, #0]
 801b4be:	42a3      	cmp	r3, r4
 801b4c0:	d012      	beq.n	801b4e8 <tcp_listen_with_backlog_and_err+0x9c>
 801b4c2:	b12b      	cbz	r3, 801b4d0 <tcp_listen_with_backlog_and_err+0x84>
 801b4c4:	68d9      	ldr	r1, [r3, #12]
 801b4c6:	42a1      	cmp	r1, r4
 801b4c8:	d01e      	beq.n	801b508 <tcp_listen_with_backlog_and_err+0xbc>
 801b4ca:	460b      	mov	r3, r1
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d1f9      	bne.n	801b4c4 <tcp_listen_with_backlog_and_err+0x78>
 801b4d0:	2300      	movs	r3, #0
 801b4d2:	60e3      	str	r3, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801b4d4:	7d23      	ldrb	r3, [r4, #20]
 801b4d6:	2b01      	cmp	r3, #1
 801b4d8:	d1de      	bne.n	801b498 <tcp_listen_with_backlog_and_err+0x4c>
 801b4da:	4b15      	ldr	r3, [pc, #84]	; (801b530 <tcp_listen_with_backlog_and_err+0xe4>)
 801b4dc:	22d4      	movs	r2, #212	; 0xd4
 801b4de:	4918      	ldr	r1, [pc, #96]	; (801b540 <tcp_listen_with_backlog_and_err+0xf4>)
 801b4e0:	4818      	ldr	r0, [pc, #96]	; (801b544 <tcp_listen_with_backlog_and_err+0xf8>)
 801b4e2:	f009 fcb7 	bl	8024e54 <iprintf>
 801b4e6:	e7d7      	b.n	801b498 <tcp_listen_with_backlog_and_err+0x4c>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b4e8:	68e3      	ldr	r3, [r4, #12]
 801b4ea:	6013      	str	r3, [r2, #0]
 801b4ec:	2300      	movs	r3, #0
 801b4ee:	60e3      	str	r3, [r4, #12]
 801b4f0:	e7f0      	b.n	801b4d4 <tcp_listen_with_backlog_and_err+0x88>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b4f2:	4b0f      	ldr	r3, [pc, #60]	; (801b530 <tcp_listen_with_backlog_and_err+0xe4>)
 801b4f4:	f240 325a 	movw	r2, #858	; 0x35a
 801b4f8:	4913      	ldr	r1, [pc, #76]	; (801b548 <tcp_listen_with_backlog_and_err+0xfc>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b4fa:	2600      	movs	r6, #0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 801b4fc:	4811      	ldr	r0, [pc, #68]	; (801b544 <tcp_listen_with_backlog_and_err+0xf8>)
 801b4fe:	f009 fca9 	bl	8024e54 <iprintf>
 801b502:	f06f 030e 	mvn.w	r3, #14
 801b506:	e7d4      	b.n	801b4b2 <tcp_listen_with_backlog_and_err+0x66>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801b508:	68e2      	ldr	r2, [r4, #12]
 801b50a:	60da      	str	r2, [r3, #12]
 801b50c:	2300      	movs	r3, #0
 801b50e:	60e3      	str	r3, [r4, #12]
 801b510:	e7e0      	b.n	801b4d4 <tcp_listen_with_backlog_and_err+0x88>
    res = ERR_MEM;
 801b512:	f04f 33ff 	mov.w	r3, #4294967295
 801b516:	e7cc      	b.n	801b4b2 <tcp_listen_with_backlog_and_err+0x66>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b518:	4b05      	ldr	r3, [pc, #20]	; (801b530 <tcp_listen_with_backlog_and_err+0xe4>)
 801b51a:	f240 3259 	movw	r2, #857	; 0x359
 801b51e:	490b      	ldr	r1, [pc, #44]	; (801b54c <tcp_listen_with_backlog_and_err+0x100>)
  struct tcp_pcb_listen *lpcb = NULL;
 801b520:	4606      	mov	r6, r0
  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 801b522:	4808      	ldr	r0, [pc, #32]	; (801b544 <tcp_listen_with_backlog_and_err+0xf8>)
 801b524:	f009 fc96 	bl	8024e54 <iprintf>
 801b528:	f06f 030f 	mvn.w	r3, #15
 801b52c:	e7c1      	b.n	801b4b2 <tcp_listen_with_backlog_and_err+0x66>
 801b52e:	bf00      	nop
 801b530:	08043710 	.word	0x08043710
 801b534:	2002e398 	.word	0x2002e398
 801b538:	0801c1e1 	.word	0x0801c1e1
 801b53c:	2002e394 	.word	0x2002e394
 801b540:	0804374c 	.word	0x0804374c
 801b544:	08029a64 	.word	0x08029a64
 801b548:	080437d0 	.word	0x080437d0
 801b54c:	080437a0 	.word	0x080437a0

0801b550 <tcp_listen_with_backlog>:
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 801b550:	2200      	movs	r2, #0
 801b552:	f7ff bf7b 	b.w	801b44c <tcp_listen_with_backlog_and_err>
 801b556:	bf00      	nop

0801b558 <tcp_update_rcv_ann_wnd>:
{
 801b558:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b55a:	4604      	mov	r4, r0
 801b55c:	b1c0      	cbz	r0, 801b590 <tcp_update_rcv_ann_wnd+0x38>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b55e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b560:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 801b562:	f8b4 c032 	ldrh.w	ip, [r4, #50]	; 0x32
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 801b566:	6a65      	ldr	r5, [r4, #36]	; 0x24
  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 801b568:	1ad0      	subs	r0, r2, r3
 801b56a:	f5bc 6f86 	cmp.w	ip, #1072	; 0x430
 801b56e:	4428      	add	r0, r5
 801b570:	bf94      	ite	ls
 801b572:	eba0 010c 	subls.w	r1, r0, ip
 801b576:	f5a0 6186 	subhi.w	r1, r0, #1072	; 0x430
 801b57a:	2900      	cmp	r1, #0
 801b57c:	db01      	blt.n	801b582 <tcp_update_rcv_ann_wnd+0x2a>
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801b57e:	8562      	strh	r2, [r4, #42]	; 0x2a
}
 801b580:	bd38      	pop	{r3, r4, r5, pc}
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 801b582:	1aea      	subs	r2, r5, r3
 801b584:	2a00      	cmp	r2, #0
 801b586:	dd0b      	ble.n	801b5a0 <tcp_update_rcv_ann_wnd+0x48>
      pcb->rcv_ann_wnd = 0;
 801b588:	2300      	movs	r3, #0
    return 0;
 801b58a:	4618      	mov	r0, r3
      pcb->rcv_ann_wnd = 0;
 801b58c:	8563      	strh	r3, [r4, #42]	; 0x2a
}
 801b58e:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 801b590:	4b0b      	ldr	r3, [pc, #44]	; (801b5c0 <tcp_update_rcv_ann_wnd+0x68>)
 801b592:	f240 32a6 	movw	r2, #934	; 0x3a6
 801b596:	490b      	ldr	r1, [pc, #44]	; (801b5c4 <tcp_update_rcv_ann_wnd+0x6c>)
 801b598:	480b      	ldr	r0, [pc, #44]	; (801b5c8 <tcp_update_rcv_ann_wnd+0x70>)
 801b59a:	f009 fc5b 	bl	8024e54 <iprintf>
 801b59e:	e7de      	b.n	801b55e <tcp_update_rcv_ann_wnd+0x6>
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801b5a0:	1b5d      	subs	r5, r3, r5
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b5a2:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
 801b5a6:	d202      	bcs.n	801b5ae <tcp_update_rcv_ann_wnd+0x56>
    return 0;
 801b5a8:	2000      	movs	r0, #0
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801b5aa:	8565      	strh	r5, [r4, #42]	; 0x2a
}
 801b5ac:	bd38      	pop	{r3, r4, r5, pc}
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801b5ae:	4b04      	ldr	r3, [pc, #16]	; (801b5c0 <tcp_update_rcv_ann_wnd+0x68>)
 801b5b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 801b5b4:	4905      	ldr	r1, [pc, #20]	; (801b5cc <tcp_update_rcv_ann_wnd+0x74>)
 801b5b6:	4804      	ldr	r0, [pc, #16]	; (801b5c8 <tcp_update_rcv_ann_wnd+0x70>)
 801b5b8:	f009 fc4c 	bl	8024e54 <iprintf>
 801b5bc:	e7f4      	b.n	801b5a8 <tcp_update_rcv_ann_wnd+0x50>
 801b5be:	bf00      	nop
 801b5c0:	08043710 	.word	0x08043710
 801b5c4:	08043808 	.word	0x08043808
 801b5c8:	08029a64 	.word	0x08029a64
 801b5cc:	0804382c 	.word	0x0804382c

0801b5d0 <tcp_recved>:
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b5d0:	b340      	cbz	r0, 801b624 <tcp_recved+0x54>
{
 801b5d2:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b5d4:	7d03      	ldrb	r3, [r0, #20]
 801b5d6:	4605      	mov	r5, r0
 801b5d8:	460c      	mov	r4, r1
 801b5da:	2b01      	cmp	r3, #1
 801b5dc:	d01a      	beq.n	801b614 <tcp_recved+0x44>
  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 801b5de:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801b5e0:	1919      	adds	r1, r3, r4
 801b5e2:	b289      	uxth	r1, r1
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801b5e4:	428b      	cmp	r3, r1
 801b5e6:	d802      	bhi.n	801b5ee <tcp_recved+0x1e>
 801b5e8:	f5b1 6f06 	cmp.w	r1, #2144	; 0x860
 801b5ec:	d901      	bls.n	801b5f2 <tcp_recved+0x22>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 801b5ee:	f44f 6106 	mov.w	r1, #2144	; 0x860
  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 801b5f2:	4628      	mov	r0, r5
 801b5f4:	8529      	strh	r1, [r5, #40]	; 0x28
 801b5f6:	f7ff ffaf 	bl	801b558 <tcp_update_rcv_ann_wnd>
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801b5fa:	f5b0 7f06 	cmp.w	r0, #536	; 0x218
 801b5fe:	d200      	bcs.n	801b602 <tcp_recved+0x32>
}
 801b600:	bd70      	pop	{r4, r5, r6, pc}
    tcp_ack_now(pcb);
 801b602:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801b604:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801b606:	f043 0302 	orr.w	r3, r3, #2
 801b60a:	836b      	strh	r3, [r5, #26]
}
 801b60c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tcp_output(pcb);
 801b610:	f003 bd10 	b.w	801f034 <tcp_output>
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801b614:	4b07      	ldr	r3, [pc, #28]	; (801b634 <tcp_recved+0x64>)
 801b616:	f240 32d2 	movw	r2, #978	; 0x3d2
 801b61a:	4907      	ldr	r1, [pc, #28]	; (801b638 <tcp_recved+0x68>)
 801b61c:	4807      	ldr	r0, [pc, #28]	; (801b63c <tcp_recved+0x6c>)
 801b61e:	f009 fc19 	bl	8024e54 <iprintf>
 801b622:	e7dc      	b.n	801b5de <tcp_recved+0xe>
  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801b624:	4b03      	ldr	r3, [pc, #12]	; (801b634 <tcp_recved+0x64>)
 801b626:	f240 32cf 	movw	r2, #975	; 0x3cf
 801b62a:	4905      	ldr	r1, [pc, #20]	; (801b640 <tcp_recved+0x70>)
 801b62c:	4803      	ldr	r0, [pc, #12]	; (801b63c <tcp_recved+0x6c>)
 801b62e:	f009 bc11 	b.w	8024e54 <iprintf>
 801b632:	bf00      	nop
 801b634:	08043710 	.word	0x08043710
 801b638:	08043860 	.word	0x08043860
 801b63c:	08029a64 	.word	0x08029a64
 801b640:	08043848 	.word	0x08043848

0801b644 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 801b644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b646:	2800      	cmp	r0, #0
 801b648:	f000 808c 	beq.w	801b764 <tcp_connect+0x120>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b64c:	2900      	cmp	r1, #0
 801b64e:	d07f      	beq.n	801b750 <tcp_connect+0x10c>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b650:	461e      	mov	r6, r3
 801b652:	7d03      	ldrb	r3, [r0, #20]
 801b654:	4604      	mov	r4, r0
 801b656:	2b00      	cmp	r3, #0
 801b658:	d16a      	bne.n	801b730 <tcp_connect+0xec>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b65a:	680b      	ldr	r3, [r1, #0]
  pcb->remote_port = port;

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b65c:	7a00      	ldrb	r0, [r0, #8]
  pcb->remote_port = port;
 801b65e:	8322      	strh	r2, [r4, #24]
  ip_addr_set(&pcb->remote_ip, ipaddr);
 801b660:	6063      	str	r3, [r4, #4]
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b662:	2800      	cmp	r0, #0
 801b664:	d049      	beq.n	801b6fa <tcp_connect+0xb6>
    netif = netif_get_by_index(pcb->netif_idx);
 801b666:	f7ff f80d 	bl	801a684 <netif_get_by_index>
 801b66a:	4605      	mov	r5, r0
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
  }
  if (netif == NULL) {
 801b66c:	2d00      	cmp	r5, #0
 801b66e:	d06c      	beq.n	801b74a <tcp_connect+0x106>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801b670:	6823      	ldr	r3, [r4, #0]
 801b672:	b90b      	cbnz	r3, 801b678 <tcp_connect+0x34>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
    if (local_ip == NULL) {
      return ERR_RTE;
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801b674:	686b      	ldr	r3, [r5, #4]
 801b676:	6023      	str	r3, [r4, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 801b678:	8ae7      	ldrh	r7, [r4, #22]
  if (pcb->local_port == 0) {
 801b67a:	b927      	cbnz	r7, 801b686 <tcp_connect+0x42>
    pcb->local_port = tcp_new_port();
 801b67c:	f7ff fdf8 	bl	801b270 <tcp_new_port>
 801b680:	82e0      	strh	r0, [r4, #22]
    if (pcb->local_port == 0) {
 801b682:	2800      	cmp	r0, #0
 801b684:	d05e      	beq.n	801b744 <tcp_connect+0x100>
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b686:	4b3c      	ldr	r3, [pc, #240]	; (801b778 <tcp_connect+0x134>)
 801b688:	4a3c      	ldr	r2, [pc, #240]	; (801b77c <tcp_connect+0x138>)
 801b68a:	6811      	ldr	r1, [r2, #0]
 801b68c:	681a      	ldr	r2, [r3, #0]
 801b68e:	440a      	add	r2, r1
  pcb->snd_wnd = TCP_WND;
 801b690:	f44f 6106 	mov.w	r1, #2144	; 0x860
  iss += tcp_ticks;       /* XXX */
 801b694:	601a      	str	r2, [r3, #0]
  pcb->snd_nxt = iss;
 801b696:	6522      	str	r2, [r4, #80]	; 0x50
  pcb->lastack = iss - 1;
 801b698:	3a01      	subs	r2, #1
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b69a:	4b39      	ldr	r3, [pc, #228]	; (801b780 <tcp_connect+0x13c>)
  pcb->lastack = iss - 1;
 801b69c:	6462      	str	r2, [r4, #68]	; 0x44
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801b69e:	62a3      	str	r3, [r4, #40]	; 0x28
#if LWIP_IPV4
  {
    if (outif == NULL) {
      return sendmss;
    }
    mtu = outif->mtu;
 801b6a0:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801b6a2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
  pcb->snd_lbb = iss - 1;
 801b6a6:	e9c4 2216 	strd	r2, r2, [r4, #88]	; 0x58
  pcb->rcv_nxt = 0;
 801b6aa:	2200      	movs	r2, #0
 801b6ac:	6262      	str	r2, [r4, #36]	; 0x24
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801b6ae:	62e2      	str	r2, [r4, #44]	; 0x2c
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b6b0:	2b00      	cmp	r3, #0
 801b6b2:	d037      	beq.n	801b724 <tcp_connect+0xe0>
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b6b4:	2b28      	cmp	r3, #40	; 0x28
 801b6b6:	d907      	bls.n	801b6c8 <tcp_connect+0x84>
 801b6b8:	f1a3 0228 	sub.w	r2, r3, #40	; 0x28
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b6bc:	b292      	uxth	r2, r2
 801b6be:	f5b2 7f06 	cmp.w	r2, #536	; 0x218
 801b6c2:	bf28      	it	cs
 801b6c4:	f44f 7206 	movcs.w	r2, #536	; 0x218
  pcb->cwnd = 1;
 801b6c8:	2301      	movs	r3, #1
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b6ca:	2102      	movs	r1, #2
 801b6cc:	4620      	mov	r0, r4
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801b6ce:	8662      	strh	r2, [r4, #50]	; 0x32
  pcb->connected = connected;
 801b6d0:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pcb->cwnd = 1;
 801b6d4:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801b6d8:	f003 fa90 	bl	801ebfc <tcp_enqueue_flags>
  if (ret == ERR_OK) {
 801b6dc:	4605      	mov	r5, r0
 801b6de:	b9f8      	cbnz	r0, 801b720 <tcp_connect+0xdc>
    pcb->state = SYN_SENT;
 801b6e0:	2302      	movs	r3, #2
 801b6e2:	7523      	strb	r3, [r4, #20]
    if (old_local_port != 0) {
 801b6e4:	b187      	cbz	r7, 801b708 <tcp_connect+0xc4>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b6e6:	4a27      	ldr	r2, [pc, #156]	; (801b784 <tcp_connect+0x140>)
 801b6e8:	6813      	ldr	r3, [r2, #0]
 801b6ea:	42a3      	cmp	r3, r4
 801b6ec:	d01d      	beq.n	801b72a <tcp_connect+0xe6>
 801b6ee:	b15b      	cbz	r3, 801b708 <tcp_connect+0xc4>
 801b6f0:	68da      	ldr	r2, [r3, #12]
 801b6f2:	42a2      	cmp	r2, r4
 801b6f4:	d006      	beq.n	801b704 <tcp_connect+0xc0>
 801b6f6:	4613      	mov	r3, r2
 801b6f8:	e7f9      	b.n	801b6ee <tcp_connect+0xaa>
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801b6fa:	1d20      	adds	r0, r4, #4
 801b6fc:	f006 fee4 	bl	80224c8 <ip4_route>
 801b700:	4605      	mov	r5, r0
 801b702:	e7b3      	b.n	801b66c <tcp_connect+0x28>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b704:	68e2      	ldr	r2, [r4, #12]
 801b706:	60da      	str	r2, [r3, #12]
    TCP_REG_ACTIVE(pcb);
 801b708:	4b1f      	ldr	r3, [pc, #124]	; (801b788 <tcp_connect+0x144>)
 801b70a:	681a      	ldr	r2, [r3, #0]
 801b70c:	601c      	str	r4, [r3, #0]
 801b70e:	60e2      	str	r2, [r4, #12]
 801b710:	f003 ffbc 	bl	801f68c <tcp_timer_needed>
 801b714:	4b1d      	ldr	r3, [pc, #116]	; (801b78c <tcp_connect+0x148>)
 801b716:	2201      	movs	r2, #1
    tcp_output(pcb);
 801b718:	4620      	mov	r0, r4
    TCP_REG_ACTIVE(pcb);
 801b71a:	701a      	strb	r2, [r3, #0]
    tcp_output(pcb);
 801b71c:	f003 fc8a 	bl	801f034 <tcp_output>
}
 801b720:	4628      	mov	r0, r5
 801b722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b724:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b728:	e7ce      	b.n	801b6c8 <tcp_connect+0x84>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801b72a:	68e3      	ldr	r3, [r4, #12]
 801b72c:	6013      	str	r3, [r2, #0]
 801b72e:	e7eb      	b.n	801b708 <tcp_connect+0xc4>
  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 801b730:	4b17      	ldr	r3, [pc, #92]	; (801b790 <tcp_connect+0x14c>)
 801b732:	f44f 6287 	mov.w	r2, #1080	; 0x438
 801b736:	4917      	ldr	r1, [pc, #92]	; (801b794 <tcp_connect+0x150>)
 801b738:	f06f 0509 	mvn.w	r5, #9
 801b73c:	4816      	ldr	r0, [pc, #88]	; (801b798 <tcp_connect+0x154>)
 801b73e:	f009 fb89 	bl	8024e54 <iprintf>
 801b742:	e7ed      	b.n	801b720 <tcp_connect+0xdc>
      return ERR_BUF;
 801b744:	f06f 0501 	mvn.w	r5, #1
 801b748:	e7ea      	b.n	801b720 <tcp_connect+0xdc>
    return ERR_RTE;
 801b74a:	f06f 0503 	mvn.w	r5, #3
 801b74e:	e7e7      	b.n	801b720 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801b750:	4b0f      	ldr	r3, [pc, #60]	; (801b790 <tcp_connect+0x14c>)
 801b752:	f240 4236 	movw	r2, #1078	; 0x436
 801b756:	4911      	ldr	r1, [pc, #68]	; (801b79c <tcp_connect+0x158>)
 801b758:	f06f 050f 	mvn.w	r5, #15
 801b75c:	480e      	ldr	r0, [pc, #56]	; (801b798 <tcp_connect+0x154>)
 801b75e:	f009 fb79 	bl	8024e54 <iprintf>
 801b762:	e7dd      	b.n	801b720 <tcp_connect+0xdc>
  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801b764:	4b0a      	ldr	r3, [pc, #40]	; (801b790 <tcp_connect+0x14c>)
 801b766:	f240 4235 	movw	r2, #1077	; 0x435
 801b76a:	490d      	ldr	r1, [pc, #52]	; (801b7a0 <tcp_connect+0x15c>)
 801b76c:	f06f 050f 	mvn.w	r5, #15
 801b770:	4809      	ldr	r0, [pc, #36]	; (801b798 <tcp_connect+0x154>)
 801b772:	f009 fb6f 	bl	8024e54 <iprintf>
 801b776:	e7d3      	b.n	801b720 <tcp_connect+0xdc>
 801b778:	200003f0 	.word	0x200003f0
 801b77c:	2002e39c 	.word	0x2002e39c
 801b780:	08600860 	.word	0x08600860
 801b784:	2002e394 	.word	0x2002e394
 801b788:	2002e38c 	.word	0x2002e38c
 801b78c:	2002e390 	.word	0x2002e390
 801b790:	08043710 	.word	0x08043710
 801b794:	080438c0 	.word	0x080438c0
 801b798:	08029a64 	.word	0x08029a64
 801b79c:	080438a4 	.word	0x080438a4
 801b7a0:	08043888 	.word	0x08043888

0801b7a4 <tcp_segs_free>:
  while (seg != NULL) {
 801b7a4:	b170      	cbz	r0, 801b7c4 <tcp_segs_free+0x20>
{
 801b7a6:	b538      	push	{r3, r4, r5, lr}
 801b7a8:	4604      	mov	r4, r0
      pbuf_free(seg->p);
 801b7aa:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801b7ac:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b7ae:	6868      	ldr	r0, [r5, #4]
 801b7b0:	b108      	cbz	r0, 801b7b6 <tcp_segs_free+0x12>
      pbuf_free(seg->p);
 801b7b2:	f7ff fa8d 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b7b6:	4629      	mov	r1, r5
 801b7b8:	2004      	movs	r0, #4
 801b7ba:	f7fe fd71 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801b7be:	2c00      	cmp	r4, #0
 801b7c0:	d1f3      	bne.n	801b7aa <tcp_segs_free+0x6>
}
 801b7c2:	bd38      	pop	{r3, r4, r5, pc}
 801b7c4:	4770      	bx	lr
 801b7c6:	bf00      	nop

0801b7c8 <tcp_seg_free>:
  if (seg != NULL) {
 801b7c8:	b158      	cbz	r0, 801b7e2 <tcp_seg_free+0x1a>
{
 801b7ca:	b510      	push	{r4, lr}
 801b7cc:	4604      	mov	r4, r0
    if (seg->p != NULL) {
 801b7ce:	6840      	ldr	r0, [r0, #4]
 801b7d0:	b108      	cbz	r0, 801b7d6 <tcp_seg_free+0xe>
      pbuf_free(seg->p);
 801b7d2:	f7ff fa7d 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b7d6:	4621      	mov	r1, r4
 801b7d8:	2004      	movs	r0, #4
}
 801b7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    memp_free(MEMP_TCP_SEG, seg);
 801b7de:	f7fe bd5f 	b.w	801a2a0 <memp_free>
 801b7e2:	4770      	bx	lr

0801b7e4 <tcp_setprio>:
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b7e4:	b108      	cbz	r0, 801b7ea <tcp_setprio+0x6>
  pcb->prio = prio;
 801b7e6:	7541      	strb	r1, [r0, #21]
}
 801b7e8:	4770      	bx	lr
  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 801b7ea:	4b03      	ldr	r3, [pc, #12]	; (801b7f8 <tcp_setprio+0x14>)
 801b7ec:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 801b7f0:	4902      	ldr	r1, [pc, #8]	; (801b7fc <tcp_setprio+0x18>)
 801b7f2:	4803      	ldr	r0, [pc, #12]	; (801b800 <tcp_setprio+0x1c>)
 801b7f4:	f009 bb2e 	b.w	8024e54 <iprintf>
 801b7f8:	08043710 	.word	0x08043710
 801b7fc:	080438f0 	.word	0x080438f0
 801b800:	08029a64 	.word	0x08029a64

0801b804 <tcp_seg_copy>:
{
 801b804:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b806:	4605      	mov	r5, r0
 801b808:	b1a0      	cbz	r0, 801b834 <tcp_seg_copy+0x30>
  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801b80a:	f240 6284 	movw	r2, #1668	; 0x684
 801b80e:	490d      	ldr	r1, [pc, #52]	; (801b844 <tcp_seg_copy+0x40>)
 801b810:	2004      	movs	r0, #4
 801b812:	f7fe fd0f 	bl	801a234 <memp_malloc_fn>
  if (cseg == NULL) {
 801b816:	4604      	mov	r4, r0
 801b818:	b150      	cbz	r0, 801b830 <tcp_seg_copy+0x2c>
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b81a:	6868      	ldr	r0, [r5, #4]
 801b81c:	6829      	ldr	r1, [r5, #0]
 801b81e:	68aa      	ldr	r2, [r5, #8]
 801b820:	68eb      	ldr	r3, [r5, #12]
 801b822:	6060      	str	r0, [r4, #4]
 801b824:	6021      	str	r1, [r4, #0]
  pbuf_ref(cseg->p);
 801b826:	6860      	ldr	r0, [r4, #4]
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801b828:	60a2      	str	r2, [r4, #8]
 801b82a:	60e3      	str	r3, [r4, #12]
  pbuf_ref(cseg->p);
 801b82c:	f7ff fa6e 	bl	801ad0c <pbuf_ref>
}
 801b830:	4620      	mov	r0, r4
 801b832:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801b834:	4b03      	ldr	r3, [pc, #12]	; (801b844 <tcp_seg_copy+0x40>)
 801b836:	f240 6282 	movw	r2, #1666	; 0x682
 801b83a:	4903      	ldr	r1, [pc, #12]	; (801b848 <tcp_seg_copy+0x44>)
 801b83c:	4803      	ldr	r0, [pc, #12]	; (801b84c <tcp_seg_copy+0x48>)
 801b83e:	f009 fb09 	bl	8024e54 <iprintf>
 801b842:	e7e2      	b.n	801b80a <tcp_seg_copy+0x6>
 801b844:	08043710 	.word	0x08043710
 801b848:	0804390c 	.word	0x0804390c
 801b84c:	08029a64 	.word	0x08029a64

0801b850 <tcp_arg>:
  if (pcb != NULL) {
 801b850:	b100      	cbz	r0, 801b854 <tcp_arg+0x4>
    pcb->callback_arg = arg;
 801b852:	6101      	str	r1, [r0, #16]
}
 801b854:	4770      	bx	lr
 801b856:	bf00      	nop

0801b858 <tcp_recv>:
  if (pcb != NULL) {
 801b858:	b140      	cbz	r0, 801b86c <tcp_recv+0x14>
{
 801b85a:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b85c:	7d03      	ldrb	r3, [r0, #20]
 801b85e:	4604      	mov	r4, r0
 801b860:	460d      	mov	r5, r1
 801b862:	2b01      	cmp	r3, #1
 801b864:	d003      	beq.n	801b86e <tcp_recv+0x16>
    pcb->recv = recv;
 801b866:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b86a:	bd38      	pop	{r3, r4, r5, pc}
 801b86c:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801b86e:	4b05      	ldr	r3, [pc, #20]	; (801b884 <tcp_recv+0x2c>)
 801b870:	f240 72df 	movw	r2, #2015	; 0x7df
 801b874:	4904      	ldr	r1, [pc, #16]	; (801b888 <tcp_recv+0x30>)
 801b876:	4805      	ldr	r0, [pc, #20]	; (801b88c <tcp_recv+0x34>)
 801b878:	f009 faec 	bl	8024e54 <iprintf>
    pcb->recv = recv;
 801b87c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
}
 801b880:	bd38      	pop	{r3, r4, r5, pc}
 801b882:	bf00      	nop
 801b884:	08043710 	.word	0x08043710
 801b888:	08043928 	.word	0x08043928
 801b88c:	08029a64 	.word	0x08029a64

0801b890 <tcp_sent>:
  if (pcb != NULL) {
 801b890:	b140      	cbz	r0, 801b8a4 <tcp_sent+0x14>
{
 801b892:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b894:	7d03      	ldrb	r3, [r0, #20]
 801b896:	4604      	mov	r4, r0
 801b898:	460d      	mov	r5, r1
 801b89a:	2b01      	cmp	r3, #1
 801b89c:	d003      	beq.n	801b8a6 <tcp_sent+0x16>
    pcb->sent = sent;
 801b89e:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801b8a2:	bd38      	pop	{r3, r4, r5, pc}
 801b8a4:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801b8a6:	4b05      	ldr	r3, [pc, #20]	; (801b8bc <tcp_sent+0x2c>)
 801b8a8:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801b8ac:	4904      	ldr	r1, [pc, #16]	; (801b8c0 <tcp_sent+0x30>)
 801b8ae:	4805      	ldr	r0, [pc, #20]	; (801b8c4 <tcp_sent+0x34>)
 801b8b0:	f009 fad0 	bl	8024e54 <iprintf>
    pcb->sent = sent;
 801b8b4:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 801b8b8:	bd38      	pop	{r3, r4, r5, pc}
 801b8ba:	bf00      	nop
 801b8bc:	08043710 	.word	0x08043710
 801b8c0:	08043950 	.word	0x08043950
 801b8c4:	08029a64 	.word	0x08029a64

0801b8c8 <tcp_err>:
  if (pcb != NULL) {
 801b8c8:	b140      	cbz	r0, 801b8dc <tcp_err+0x14>
{
 801b8ca:	b538      	push	{r3, r4, r5, lr}
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b8cc:	7d03      	ldrb	r3, [r0, #20]
 801b8ce:	4604      	mov	r4, r0
 801b8d0:	460d      	mov	r5, r1
 801b8d2:	2b01      	cmp	r3, #1
 801b8d4:	d003      	beq.n	801b8de <tcp_err+0x16>
    pcb->errf = err;
 801b8d6:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801b8da:	bd38      	pop	{r3, r4, r5, pc}
 801b8dc:	4770      	bx	lr
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801b8de:	4b05      	ldr	r3, [pc, #20]	; (801b8f4 <tcp_err+0x2c>)
 801b8e0:	f640 020d 	movw	r2, #2061	; 0x80d
 801b8e4:	4904      	ldr	r1, [pc, #16]	; (801b8f8 <tcp_err+0x30>)
 801b8e6:	4805      	ldr	r0, [pc, #20]	; (801b8fc <tcp_err+0x34>)
 801b8e8:	f009 fab4 	bl	8024e54 <iprintf>
    pcb->errf = err;
 801b8ec:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
 801b8f0:	bd38      	pop	{r3, r4, r5, pc}
 801b8f2:	bf00      	nop
 801b8f4:	08043710 	.word	0x08043710
 801b8f8:	08043978 	.word	0x08043978
 801b8fc:	08029a64 	.word	0x08029a64

0801b900 <tcp_accept>:
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801b900:	b118      	cbz	r0, 801b90a <tcp_accept+0xa>
 801b902:	7d03      	ldrb	r3, [r0, #20]
 801b904:	2b01      	cmp	r3, #1
    lpcb->accept = accept;
 801b906:	bf08      	it	eq
 801b908:	6181      	streq	r1, [r0, #24]
}
 801b90a:	4770      	bx	lr

0801b90c <tcp_poll>:
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b90c:	b1a8      	cbz	r0, 801b93a <tcp_poll+0x2e>
{
 801b90e:	b570      	push	{r4, r5, r6, lr}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b910:	7d03      	ldrb	r3, [r0, #20]
 801b912:	460e      	mov	r6, r1
 801b914:	4604      	mov	r4, r0
 801b916:	4615      	mov	r5, r2
 801b918:	2b01      	cmp	r3, #1
 801b91a:	d003      	beq.n	801b924 <tcp_poll+0x18>
  pcb->poll = poll;
 801b91c:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801b920:	7765      	strb	r5, [r4, #29]
}
 801b922:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801b924:	4b08      	ldr	r3, [pc, #32]	; (801b948 <tcp_poll+0x3c>)
 801b926:	f640 023e 	movw	r2, #2110	; 0x83e
 801b92a:	4908      	ldr	r1, [pc, #32]	; (801b94c <tcp_poll+0x40>)
 801b92c:	4808      	ldr	r0, [pc, #32]	; (801b950 <tcp_poll+0x44>)
 801b92e:	f009 fa91 	bl	8024e54 <iprintf>
  pcb->poll = poll;
 801b932:	f8c4 608c 	str.w	r6, [r4, #140]	; 0x8c
  pcb->pollinterval = interval;
 801b936:	7765      	strb	r5, [r4, #29]
}
 801b938:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801b93a:	4b03      	ldr	r3, [pc, #12]	; (801b948 <tcp_poll+0x3c>)
 801b93c:	f640 023d 	movw	r2, #2109	; 0x83d
 801b940:	4904      	ldr	r1, [pc, #16]	; (801b954 <tcp_poll+0x48>)
 801b942:	4803      	ldr	r0, [pc, #12]	; (801b950 <tcp_poll+0x44>)
 801b944:	f009 ba86 	b.w	8024e54 <iprintf>
 801b948:	08043710 	.word	0x08043710
 801b94c:	080439b8 	.word	0x080439b8
 801b950:	08029a64 	.word	0x08029a64
 801b954:	080439a0 	.word	0x080439a0

0801b958 <tcp_pcb_purge>:
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b958:	2800      	cmp	r0, #0
 801b95a:	d041      	beq.n	801b9e0 <tcp_pcb_purge+0x88>
{
 801b95c:	b570      	push	{r4, r5, r6, lr}
  if (pcb->state != CLOSED &&
 801b95e:	7d03      	ldrb	r3, [r0, #20]
 801b960:	4605      	mov	r5, r0
      pcb->state != TIME_WAIT &&
 801b962:	2b0a      	cmp	r3, #10
 801b964:	d001      	beq.n	801b96a <tcp_pcb_purge+0x12>
 801b966:	2b01      	cmp	r3, #1
 801b968:	d800      	bhi.n	801b96c <tcp_pcb_purge+0x14>
}
 801b96a:	bd70      	pop	{r4, r5, r6, pc}
    if (pcb->refused_data != NULL) {
 801b96c:	6f80      	ldr	r0, [r0, #120]	; 0x78
 801b96e:	b118      	cbz	r0, 801b978 <tcp_pcb_purge+0x20>
      pbuf_free(pcb->refused_data);
 801b970:	f7ff f9ae 	bl	801acd0 <pbuf_free>
      pcb->refused_data = NULL;
 801b974:	2300      	movs	r3, #0
 801b976:	67ab      	str	r3, [r5, #120]	; 0x78
    if (pcb->ooseq != NULL) {
 801b978:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801b97a:	b164      	cbz	r4, 801b996 <tcp_pcb_purge+0x3e>
      pbuf_free(seg->p);
 801b97c:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b97e:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b980:	6870      	ldr	r0, [r6, #4]
 801b982:	b108      	cbz	r0, 801b988 <tcp_pcb_purge+0x30>
      pbuf_free(seg->p);
 801b984:	f7ff f9a4 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b988:	4631      	mov	r1, r6
 801b98a:	2004      	movs	r0, #4
 801b98c:	f7fe fc88 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801b990:	2c00      	cmp	r4, #0
 801b992:	d1f3      	bne.n	801b97c <tcp_pcb_purge+0x24>
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
  if (pcb->ooseq) {
    tcp_segs_free(pcb->ooseq);
    pcb->ooseq = NULL;
 801b994:	676c      	str	r4, [r5, #116]	; 0x74
    pcb->rtime = -1;
 801b996:	f64f 73ff 	movw	r3, #65535	; 0xffff
    tcp_segs_free(pcb->unsent);
 801b99a:	6eec      	ldr	r4, [r5, #108]	; 0x6c
    pcb->rtime = -1;
 801b99c:	862b      	strh	r3, [r5, #48]	; 0x30
  while (seg != NULL) {
 801b99e:	b15c      	cbz	r4, 801b9b8 <tcp_pcb_purge+0x60>
      pbuf_free(seg->p);
 801b9a0:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b9a2:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b9a4:	6870      	ldr	r0, [r6, #4]
 801b9a6:	b108      	cbz	r0, 801b9ac <tcp_pcb_purge+0x54>
      pbuf_free(seg->p);
 801b9a8:	f7ff f992 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b9ac:	4631      	mov	r1, r6
 801b9ae:	2004      	movs	r0, #4
 801b9b0:	f7fe fc76 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801b9b4:	2c00      	cmp	r4, #0
 801b9b6:	d1f3      	bne.n	801b9a0 <tcp_pcb_purge+0x48>
    tcp_segs_free(pcb->unacked);
 801b9b8:	6f2c      	ldr	r4, [r5, #112]	; 0x70
  while (seg != NULL) {
 801b9ba:	b15c      	cbz	r4, 801b9d4 <tcp_pcb_purge+0x7c>
      pbuf_free(seg->p);
 801b9bc:	4626      	mov	r6, r4
    struct tcp_seg *next = seg->next;
 801b9be:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801b9c0:	6870      	ldr	r0, [r6, #4]
 801b9c2:	b108      	cbz	r0, 801b9c8 <tcp_pcb_purge+0x70>
      pbuf_free(seg->p);
 801b9c4:	f7ff f984 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801b9c8:	4631      	mov	r1, r6
 801b9ca:	2004      	movs	r0, #4
 801b9cc:	f7fe fc68 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801b9d0:	2c00      	cmp	r4, #0
 801b9d2:	d1f3      	bne.n	801b9bc <tcp_pcb_purge+0x64>
    pcb->unacked = pcb->unsent = NULL;
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	e9c5 331b 	strd	r3, r3, [r5, #108]	; 0x6c
    pcb->unsent_oversize = 0;
 801b9da:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
}
 801b9de:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801b9e0:	4b03      	ldr	r3, [pc, #12]	; (801b9f0 <tcp_pcb_purge+0x98>)
 801b9e2:	f640 0251 	movw	r2, #2129	; 0x851
 801b9e6:	4903      	ldr	r1, [pc, #12]	; (801b9f4 <tcp_pcb_purge+0x9c>)
 801b9e8:	4803      	ldr	r0, [pc, #12]	; (801b9f8 <tcp_pcb_purge+0xa0>)
 801b9ea:	f009 ba33 	b.w	8024e54 <iprintf>
 801b9ee:	bf00      	nop
 801b9f0:	08043710 	.word	0x08043710
 801b9f4:	080439d8 	.word	0x080439d8
 801b9f8:	08029a64 	.word	0x08029a64

0801b9fc <tcp_slowtmr>:
{
 801b9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ++tcp_ticks;
 801ba00:	4da9      	ldr	r5, [pc, #676]	; (801bca8 <tcp_slowtmr+0x2ac>)
{
 801ba02:	b087      	sub	sp, #28
  ++tcp_timer_ctr;
 801ba04:	f8df b2cc 	ldr.w	fp, [pc, #716]	; 801bcd4 <tcp_slowtmr+0x2d8>
  ++tcp_ticks;
 801ba08:	682b      	ldr	r3, [r5, #0]
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801ba0a:	4fa8      	ldr	r7, [pc, #672]	; (801bcac <tcp_slowtmr+0x2b0>)
  ++tcp_ticks;
 801ba0c:	3301      	adds	r3, #1
 801ba0e:	602b      	str	r3, [r5, #0]
  ++tcp_timer_ctr;
 801ba10:	f89b 3000 	ldrb.w	r3, [fp]
 801ba14:	3301      	adds	r3, #1
 801ba16:	f88b 3000 	strb.w	r3, [fp]
  pcb = tcp_active_pcbs;
 801ba1a:	4ba5      	ldr	r3, [pc, #660]	; (801bcb0 <tcp_slowtmr+0x2b4>)
 801ba1c:	681c      	ldr	r4, [r3, #0]
  while (pcb != NULL) {
 801ba1e:	2c00      	cmp	r4, #0
 801ba20:	f000 808a 	beq.w	801bb38 <tcp_slowtmr+0x13c>
  prev = NULL;
 801ba24:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801ba26:	46b1      	mov	r9, r6
 801ba28:	7d23      	ldrb	r3, [r4, #20]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	f000 80fc 	beq.w	801bc28 <tcp_slowtmr+0x22c>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801ba30:	2b01      	cmp	r3, #1
 801ba32:	f000 8104 	beq.w	801bc3e <tcp_slowtmr+0x242>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801ba36:	2b0a      	cmp	r3, #10
 801ba38:	f000 810c 	beq.w	801bc54 <tcp_slowtmr+0x258>
    if (pcb->last_timer == tcp_timer_ctr) {
 801ba3c:	f89b 2000 	ldrb.w	r2, [fp]
 801ba40:	7fa3      	ldrb	r3, [r4, #30]
 801ba42:	4293      	cmp	r3, r2
 801ba44:	f000 8113 	beq.w	801bc6e <tcp_slowtmr+0x272>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801ba48:	7d23      	ldrb	r3, [r4, #20]
    pcb->last_timer = tcp_timer_ctr;
 801ba4a:	77a2      	strb	r2, [r4, #30]
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801ba4c:	2b02      	cmp	r3, #2
 801ba4e:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801ba52:	f000 8112 	beq.w	801bc7a <tcp_slowtmr+0x27e>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801ba56:	2a0b      	cmp	r2, #11
 801ba58:	f240 80cb 	bls.w	801bbf2 <tcp_slowtmr+0x1f6>
      ++pcb_remove;
 801ba5c:	f04f 0801 	mov.w	r8, #1
    if (pcb->state == FIN_WAIT_2) {
 801ba60:	2b06      	cmp	r3, #6
 801ba62:	f000 80b7 	beq.w	801bbd4 <tcp_slowtmr+0x1d8>
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801ba66:	f894 a009 	ldrb.w	sl, [r4, #9]
 801ba6a:	f01a 0a08 	ands.w	sl, sl, #8
 801ba6e:	d01d      	beq.n	801baac <tcp_slowtmr+0xb0>
 801ba70:	2b04      	cmp	r3, #4
 801ba72:	d007      	beq.n	801ba84 <tcp_slowtmr+0x88>
 801ba74:	f1a3 0307 	sub.w	r3, r3, #7
 801ba78:	fab3 f383 	clz	r3, r3
 801ba7c:	095b      	lsrs	r3, r3, #5
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	f000 80b4 	beq.w	801bbec <tcp_slowtmr+0x1f0>
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ba84:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 801ba88:	4b8a      	ldr	r3, [pc, #552]	; (801bcb4 <tcp_slowtmr+0x2b8>)
 801ba8a:	488b      	ldr	r0, [pc, #556]	; (801bcb8 <tcp_slowtmr+0x2bc>)
 801ba8c:	440b      	add	r3, r1
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ba8e:	682a      	ldr	r2, [r5, #0]
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801ba90:	fba0 0303 	umull	r0, r3, r0, r3
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801ba94:	6a20      	ldr	r0, [r4, #32]
 801ba96:	1a12      	subs	r2, r2, r0
 801ba98:	ebb2 1f53 	cmp.w	r2, r3, lsr #5
 801ba9c:	f240 8160 	bls.w	801bd60 <tcp_slowtmr+0x364>
        ++pcb_remove;
 801baa0:	f108 0801 	add.w	r8, r8, #1
        ++pcb_reset;
 801baa4:	f04f 0a01 	mov.w	sl, #1
        ++pcb_remove;
 801baa8:	fa5f f888 	uxtb.w	r8, r8
    if (pcb->ooseq != NULL &&
 801baac:	6f66      	ldr	r6, [r4, #116]	; 0x74
 801baae:	b156      	cbz	r6, 801bac6 <tcp_slowtmr+0xca>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801bab0:	682b      	ldr	r3, [r5, #0]
 801bab2:	6a22      	ldr	r2, [r4, #32]
 801bab4:	1a9a      	subs	r2, r3, r2
 801bab6:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
 801baba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    if (pcb->ooseq != NULL &&
 801babe:	ebb2 0f43 	cmp.w	r2, r3, lsl #1
 801bac2:	f080 80e1 	bcs.w	801bc88 <tcp_slowtmr+0x28c>
    if (pcb->state == SYN_RCVD) {
 801bac6:	7d23      	ldrb	r3, [r4, #20]
 801bac8:	2b03      	cmp	r3, #3
 801baca:	d057      	beq.n	801bb7c <tcp_slowtmr+0x180>
    if (pcb->state == LAST_ACK) {
 801bacc:	2b09      	cmp	r3, #9
 801bace:	d15a      	bne.n	801bb86 <tcp_slowtmr+0x18a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bad0:	682b      	ldr	r3, [r5, #0]
 801bad2:	6a22      	ldr	r2, [r4, #32]
 801bad4:	1a9b      	subs	r3, r3, r2
 801bad6:	2bf0      	cmp	r3, #240	; 0xf0
 801bad8:	d955      	bls.n	801bb86 <tcp_slowtmr+0x18a>
      tcp_pcb_purge(pcb);
 801bada:	4620      	mov	r0, r4
      tcp_err_fn err_fn = pcb->errf;
 801badc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
      tcp_pcb_purge(pcb);
 801bae0:	f7ff ff3a 	bl	801b958 <tcp_pcb_purge>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801bae4:	4b72      	ldr	r3, [pc, #456]	; (801bcb0 <tcp_slowtmr+0x2b4>)
 801bae6:	681b      	ldr	r3, [r3, #0]
      if (prev != NULL) {
 801bae8:	f1b9 0f00 	cmp.w	r9, #0
 801baec:	f000 817e 	beq.w	801bdec <tcp_slowtmr+0x3f0>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801baf0:	42a3      	cmp	r3, r4
 801baf2:	f000 81df 	beq.w	801beb4 <tcp_slowtmr+0x4b8>
        prev->next = pcb->next;
 801baf6:	68e3      	ldr	r3, [r4, #12]
 801baf8:	f8c9 300c 	str.w	r3, [r9, #12]
      if (pcb_reset) {
 801bafc:	f1ba 0f00 	cmp.w	sl, #0
 801bb00:	f040 8147 	bne.w	801bd92 <tcp_slowtmr+0x396>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bb04:	7d23      	ldrb	r3, [r4, #20]
 801bb06:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801bb08:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bb0c:	f000 8153 	beq.w	801bdb6 <tcp_slowtmr+0x3ba>
  memp_free(MEMP_TCP_PCB, pcb);
 801bb10:	4621      	mov	r1, r4
 801bb12:	2002      	movs	r0, #2
 801bb14:	f7fe fbc4 	bl	801a2a0 <memp_free>
      tcp_active_pcbs_changed = 0;
 801bb18:	4c68      	ldr	r4, [pc, #416]	; (801bcbc <tcp_slowtmr+0x2c0>)
 801bb1a:	2300      	movs	r3, #0
 801bb1c:	7023      	strb	r3, [r4, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801bb1e:	b13e      	cbz	r6, 801bb30 <tcp_slowtmr+0x134>
 801bb20:	f06f 010c 	mvn.w	r1, #12
 801bb24:	4650      	mov	r0, sl
 801bb26:	47b0      	blx	r6
      if (tcp_active_pcbs_changed) {
 801bb28:	7823      	ldrb	r3, [r4, #0]
 801bb2a:	2b00      	cmp	r3, #0
 801bb2c:	f47f af75 	bne.w	801ba1a <tcp_slowtmr+0x1e>
      pcb = pcb->next;
 801bb30:	4644      	mov	r4, r8
  while (pcb != NULL) {
 801bb32:	2c00      	cmp	r4, #0
 801bb34:	f47f af78 	bne.w	801ba28 <tcp_slowtmr+0x2c>
  pcb = tcp_tw_pcbs;
 801bb38:	f8df 919c 	ldr.w	r9, [pc, #412]	; 801bcd8 <tcp_slowtmr+0x2dc>
 801bb3c:	f8d9 4000 	ldr.w	r4, [r9]
  while (pcb != NULL) {
 801bb40:	b1cc      	cbz	r4, 801bb76 <tcp_slowtmr+0x17a>
  prev = NULL;
 801bb42:	2600      	movs	r6, #0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801bb44:	f8df 8164 	ldr.w	r8, [pc, #356]	; 801bcac <tcp_slowtmr+0x2b0>
 801bb48:	f8df a190 	ldr.w	sl, [pc, #400]	; 801bcdc <tcp_slowtmr+0x2e0>
 801bb4c:	4f5c      	ldr	r7, [pc, #368]	; (801bcc0 <tcp_slowtmr+0x2c4>)
 801bb4e:	7d23      	ldrb	r3, [r4, #20]
 801bb50:	2b0a      	cmp	r3, #10
 801bb52:	d006      	beq.n	801bb62 <tcp_slowtmr+0x166>
 801bb54:	4643      	mov	r3, r8
 801bb56:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801bb5a:	4651      	mov	r1, sl
 801bb5c:	4638      	mov	r0, r7
 801bb5e:	f009 f979 	bl	8024e54 <iprintf>
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801bb62:	682b      	ldr	r3, [r5, #0]
 801bb64:	6a22      	ldr	r2, [r4, #32]
 801bb66:	1a9b      	subs	r3, r3, r2
 801bb68:	2bf0      	cmp	r3, #240	; 0xf0
 801bb6a:	f200 80d4 	bhi.w	801bd16 <tcp_slowtmr+0x31a>
      pcb = pcb->next;
 801bb6e:	4626      	mov	r6, r4
 801bb70:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801bb72:	2c00      	cmp	r4, #0
 801bb74:	d1eb      	bne.n	801bb4e <tcp_slowtmr+0x152>
}
 801bb76:	b007      	add	sp, #28
 801bb78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bb7c:	682b      	ldr	r3, [r5, #0]
 801bb7e:	6a22      	ldr	r2, [r4, #32]
 801bb80:	1a9b      	subs	r3, r3, r2
 801bb82:	2b28      	cmp	r3, #40	; 0x28
 801bb84:	d8a9      	bhi.n	801bada <tcp_slowtmr+0xde>
    if (pcb_remove) {
 801bb86:	f1b8 0f00 	cmp.w	r8, #0
 801bb8a:	d1a6      	bne.n	801bada <tcp_slowtmr+0xde>
      ++prev->polltmr;
 801bb8c:	7f23      	ldrb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801bb8e:	7f62      	ldrb	r2, [r4, #29]
      ++prev->polltmr;
 801bb90:	3301      	adds	r3, #1
      pcb = pcb->next;
 801bb92:	68e6      	ldr	r6, [r4, #12]
      ++prev->polltmr;
 801bb94:	b2db      	uxtb	r3, r3
      if (prev->polltmr >= prev->pollinterval) {
 801bb96:	429a      	cmp	r2, r3
      ++prev->polltmr;
 801bb98:	7723      	strb	r3, [r4, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801bb9a:	d815      	bhi.n	801bbc8 <tcp_slowtmr+0x1cc>
        tcp_active_pcbs_changed = 0;
 801bb9c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 801bcbc <tcp_slowtmr+0x2c0>
        TCP_EVENT_POLL(prev, err);
 801bba0:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
        prev->polltmr = 0;
 801bba4:	f884 801c 	strb.w	r8, [r4, #28]
        tcp_active_pcbs_changed = 0;
 801bba8:	f889 8000 	strb.w	r8, [r9]
        TCP_EVENT_POLL(prev, err);
 801bbac:	2b00      	cmp	r3, #0
 801bbae:	f000 80ce 	beq.w	801bd4e <tcp_slowtmr+0x352>
 801bbb2:	4621      	mov	r1, r4
 801bbb4:	6920      	ldr	r0, [r4, #16]
 801bbb6:	4798      	blx	r3
        if (tcp_active_pcbs_changed) {
 801bbb8:	f899 3000 	ldrb.w	r3, [r9]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	f47f af2c 	bne.w	801ba1a <tcp_slowtmr+0x1e>
        if (err == ERR_OK) {
 801bbc2:	2800      	cmp	r0, #0
 801bbc4:	f000 80c3 	beq.w	801bd4e <tcp_slowtmr+0x352>
 801bbc8:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bbca:	4634      	mov	r4, r6
  while (pcb != NULL) {
 801bbcc:	2c00      	cmp	r4, #0
 801bbce:	f47f af2b 	bne.w	801ba28 <tcp_slowtmr+0x2c>
 801bbd2:	e7b1      	b.n	801bb38 <tcp_slowtmr+0x13c>
      if (pcb->flags & TF_RXCLOSED) {
 801bbd4:	8b63      	ldrh	r3, [r4, #26]
 801bbd6:	06db      	lsls	r3, r3, #27
 801bbd8:	d508      	bpl.n	801bbec <tcp_slowtmr+0x1f0>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bbda:	682b      	ldr	r3, [r5, #0]
 801bbdc:	6a22      	ldr	r2, [r4, #32]
 801bbde:	1a9b      	subs	r3, r3, r2
 801bbe0:	2b28      	cmp	r3, #40	; 0x28
 801bbe2:	d903      	bls.n	801bbec <tcp_slowtmr+0x1f0>
          ++pcb_remove;
 801bbe4:	f108 0801 	add.w	r8, r8, #1
 801bbe8:	fa5f f888 	uxtb.w	r8, r8
    pcb_reset = 0;
 801bbec:	f04f 0a00 	mov.w	sl, #0
 801bbf0:	e75c      	b.n	801baac <tcp_slowtmr+0xb0>
      if (pcb->persist_backoff > 0) {
 801bbf2:	f894 8099 	ldrb.w	r8, [r4, #153]	; 0x99
 801bbf6:	f1b8 0f00 	cmp.w	r8, #0
 801bbfa:	d071      	beq.n	801bce0 <tcp_slowtmr+0x2e4>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801bbfc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bbfe:	b133      	cbz	r3, 801bc0e <tcp_slowtmr+0x212>
 801bc00:	463b      	mov	r3, r7
 801bc02:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801bc06:	492f      	ldr	r1, [pc, #188]	; (801bcc4 <tcp_slowtmr+0x2c8>)
 801bc08:	482d      	ldr	r0, [pc, #180]	; (801bcc0 <tcp_slowtmr+0x2c4>)
 801bc0a:	f009 f923 	bl	8024e54 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801bc0e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	f000 8171 	beq.w	801bef8 <tcp_slowtmr+0x4fc>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801bc16:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801bc1a:	2b0b      	cmp	r3, #11
 801bc1c:	f240 80d2 	bls.w	801bdc4 <tcp_slowtmr+0x3c8>
    if (pcb->state == FIN_WAIT_2) {
 801bc20:	7d23      	ldrb	r3, [r4, #20]
          ++pcb_remove; /* max probes reached */
 801bc22:	f04f 0801 	mov.w	r8, #1
 801bc26:	e71b      	b.n	801ba60 <tcp_slowtmr+0x64>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801bc28:	463b      	mov	r3, r7
 801bc2a:	f240 42be 	movw	r2, #1214	; 0x4be
 801bc2e:	4926      	ldr	r1, [pc, #152]	; (801bcc8 <tcp_slowtmr+0x2cc>)
 801bc30:	4823      	ldr	r0, [pc, #140]	; (801bcc0 <tcp_slowtmr+0x2c4>)
 801bc32:	f009 f90f 	bl	8024e54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801bc36:	7d23      	ldrb	r3, [r4, #20]
 801bc38:	2b01      	cmp	r3, #1
 801bc3a:	f47f aefc 	bne.w	801ba36 <tcp_slowtmr+0x3a>
 801bc3e:	463b      	mov	r3, r7
 801bc40:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801bc44:	4921      	ldr	r1, [pc, #132]	; (801bccc <tcp_slowtmr+0x2d0>)
 801bc46:	481e      	ldr	r0, [pc, #120]	; (801bcc0 <tcp_slowtmr+0x2c4>)
 801bc48:	f009 f904 	bl	8024e54 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801bc4c:	7d23      	ldrb	r3, [r4, #20]
 801bc4e:	2b0a      	cmp	r3, #10
 801bc50:	f47f aef4 	bne.w	801ba3c <tcp_slowtmr+0x40>
 801bc54:	463b      	mov	r3, r7
 801bc56:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801bc5a:	491d      	ldr	r1, [pc, #116]	; (801bcd0 <tcp_slowtmr+0x2d4>)
 801bc5c:	4818      	ldr	r0, [pc, #96]	; (801bcc0 <tcp_slowtmr+0x2c4>)
 801bc5e:	f009 f8f9 	bl	8024e54 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801bc62:	f89b 2000 	ldrb.w	r2, [fp]
 801bc66:	7fa3      	ldrb	r3, [r4, #30]
 801bc68:	4293      	cmp	r3, r2
 801bc6a:	f47f aeed 	bne.w	801ba48 <tcp_slowtmr+0x4c>
      continue;
 801bc6e:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bc70:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801bc72:	2c00      	cmp	r4, #0
 801bc74:	f47f aed8 	bne.w	801ba28 <tcp_slowtmr+0x2c>
 801bc78:	e75e      	b.n	801bb38 <tcp_slowtmr+0x13c>
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801bc7a:	2a05      	cmp	r2, #5
 801bc7c:	d9b9      	bls.n	801bbf2 <tcp_slowtmr+0x1f6>
    pcb_reset = 0;
 801bc7e:	f04f 0a00 	mov.w	sl, #0
      ++pcb_remove;
 801bc82:	f04f 0801 	mov.w	r8, #1
 801bc86:	e711      	b.n	801baac <tcp_slowtmr+0xb0>
 801bc88:	9405      	str	r4, [sp, #20]
      pbuf_free(seg->p);
 801bc8a:	4634      	mov	r4, r6
    struct tcp_seg *next = seg->next;
 801bc8c:	6836      	ldr	r6, [r6, #0]
    if (seg->p != NULL) {
 801bc8e:	6860      	ldr	r0, [r4, #4]
 801bc90:	b108      	cbz	r0, 801bc96 <tcp_slowtmr+0x29a>
      pbuf_free(seg->p);
 801bc92:	f7ff f81d 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801bc96:	4621      	mov	r1, r4
 801bc98:	2004      	movs	r0, #4
 801bc9a:	f7fe fb01 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801bc9e:	2e00      	cmp	r6, #0
 801bca0:	d1f3      	bne.n	801bc8a <tcp_slowtmr+0x28e>
    pcb->ooseq = NULL;
 801bca2:	9c05      	ldr	r4, [sp, #20]
 801bca4:	6766      	str	r6, [r4, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801bca6:	e70e      	b.n	801bac6 <tcp_slowtmr+0xca>
 801bca8:	2002e39c 	.word	0x2002e39c
 801bcac:	08043710 	.word	0x08043710
 801bcb0:	2002e38c 	.word	0x2002e38c
 801bcb4:	000a4cb8 	.word	0x000a4cb8
 801bcb8:	10624dd3 	.word	0x10624dd3
 801bcbc:	2002e390 	.word	0x2002e390
 801bcc0:	08029a64 	.word	0x08029a64
 801bcc4:	08043a7c 	.word	0x08043a7c
 801bcc8:	080439f4 	.word	0x080439f4
 801bccc:	08043a20 	.word	0x08043a20
 801bcd0:	08043a4c 	.word	0x08043a4c
 801bcd4:	2002e3a1 	.word	0x2002e3a1
 801bcd8:	2002e3a4 	.word	0x2002e3a4
 801bcdc:	08043b40 	.word	0x08043b40
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801bce0:	f9b4 2030 	ldrsh.w	r2, [r4, #48]	; 0x30
 801bce4:	f647 70fe 	movw	r0, #32766	; 0x7ffe
 801bce8:	b291      	uxth	r1, r2
 801bcea:	4281      	cmp	r1, r0
 801bcec:	d802      	bhi.n	801bcf4 <tcp_slowtmr+0x2f8>
          ++pcb->rtime;
 801bcee:	1c4a      	adds	r2, r1, #1
 801bcf0:	b212      	sxth	r2, r2
 801bcf2:	8622      	strh	r2, [r4, #48]	; 0x30
        if (pcb->rtime >= pcb->rto) {
 801bcf4:	f9b4 1040 	ldrsh.w	r1, [r4, #64]	; 0x40
 801bcf8:	4291      	cmp	r1, r2
 801bcfa:	f73f aeb1 	bgt.w	801ba60 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801bcfe:	4620      	mov	r0, r4
 801bd00:	f003 f85a 	bl	801edb8 <tcp_rexmit_rto_prepare>
 801bd04:	2800      	cmp	r0, #0
 801bd06:	f000 80a0 	beq.w	801be4a <tcp_slowtmr+0x44e>
 801bd0a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bd0c:	2b00      	cmp	r3, #0
 801bd0e:	f000 8098 	beq.w	801be42 <tcp_slowtmr+0x446>
    if (pcb->state == FIN_WAIT_2) {
 801bd12:	7d23      	ldrb	r3, [r4, #20]
 801bd14:	e6a4      	b.n	801ba60 <tcp_slowtmr+0x64>
      tcp_pcb_purge(pcb);
 801bd16:	4620      	mov	r0, r4
 801bd18:	f7ff fe1e 	bl	801b958 <tcp_pcb_purge>
      if (prev != NULL) {
 801bd1c:	2e00      	cmp	r6, #0
 801bd1e:	f000 80d1 	beq.w	801bec4 <tcp_slowtmr+0x4c8>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801bd22:	f8d9 3000 	ldr.w	r3, [r9]
 801bd26:	42a3      	cmp	r3, r4
 801bd28:	f000 80ee 	beq.w	801bf08 <tcp_slowtmr+0x50c>
        prev->next = pcb->next;
 801bd2c:	f8d4 b00c 	ldr.w	fp, [r4, #12]
 801bd30:	f8c6 b00c 	str.w	fp, [r6, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bd34:	7d23      	ldrb	r3, [r4, #20]
 801bd36:	2b01      	cmp	r3, #1
 801bd38:	f000 80d7 	beq.w	801beea <tcp_slowtmr+0x4ee>
  memp_free(MEMP_TCP_PCB, pcb);
 801bd3c:	4621      	mov	r1, r4
      pcb = pcb->next;
 801bd3e:	465c      	mov	r4, fp
  memp_free(MEMP_TCP_PCB, pcb);
 801bd40:	2002      	movs	r0, #2
 801bd42:	f7fe faad 	bl	801a2a0 <memp_free>
  while (pcb != NULL) {
 801bd46:	2c00      	cmp	r4, #0
 801bd48:	f47f af01 	bne.w	801bb4e <tcp_slowtmr+0x152>
 801bd4c:	e713      	b.n	801bb76 <tcp_slowtmr+0x17a>
          tcp_output(prev);
 801bd4e:	4620      	mov	r0, r4
 801bd50:	46a1      	mov	r9, r4
      pcb = pcb->next;
 801bd52:	4634      	mov	r4, r6
          tcp_output(prev);
 801bd54:	f003 f96e 	bl	801f034 <tcp_output>
  while (pcb != NULL) {
 801bd58:	2c00      	cmp	r4, #0
 801bd5a:	f47f ae65 	bne.w	801ba28 <tcp_slowtmr+0x2c>
 801bd5e:	e6eb      	b.n	801bb38 <tcp_slowtmr+0x13c>
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801bd60:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 801bd64:	4870      	ldr	r0, [pc, #448]	; (801bf28 <tcp_slowtmr+0x52c>)
 801bd66:	fb00 1103 	mla	r1, r0, r3, r1
                 / TCP_SLOW_INTERVAL) {
 801bd6a:	4b70      	ldr	r3, [pc, #448]	; (801bf2c <tcp_slowtmr+0x530>)
 801bd6c:	fba3 3101 	umull	r3, r1, r3, r1
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801bd70:	ebb2 1f51 	cmp.w	r2, r1, lsr #5
 801bd74:	f67f af3a 	bls.w	801bbec <tcp_slowtmr+0x1f0>
        err = tcp_keepalive(pcb);
 801bd78:	4620      	mov	r0, r4
 801bd7a:	f003 fb91 	bl	801f4a0 <tcp_keepalive>
        if (err == ERR_OK) {
 801bd7e:	2800      	cmp	r0, #0
 801bd80:	f47f af34 	bne.w	801bbec <tcp_slowtmr+0x1f0>
          pcb->keep_cnt_sent++;
 801bd84:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
    pcb_reset = 0;
 801bd88:	4682      	mov	sl, r0
          pcb->keep_cnt_sent++;
 801bd8a:	3301      	adds	r3, #1
 801bd8c:	f884 309b 	strb.w	r3, [r4, #155]	; 0x9b
 801bd90:	e68c      	b.n	801baac <tcp_slowtmr+0xb0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801bd92:	8b23      	ldrh	r3, [r4, #24]
 801bd94:	4620      	mov	r0, r4
 801bd96:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801bd98:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801bd9a:	9302      	str	r3, [sp, #8]
 801bd9c:	8ae3      	ldrh	r3, [r4, #22]
 801bd9e:	9301      	str	r3, [sp, #4]
 801bda0:	1d23      	adds	r3, r4, #4
 801bda2:	9300      	str	r3, [sp, #0]
 801bda4:	4623      	mov	r3, r4
 801bda6:	f003 f8cb 	bl	801ef40 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bdaa:	7d23      	ldrb	r3, [r4, #20]
 801bdac:	2b01      	cmp	r3, #1
      pcb = pcb->next;
 801bdae:	e9d4 8a03 	ldrd	r8, sl, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bdb2:	f47f aead 	bne.w	801bb10 <tcp_slowtmr+0x114>
 801bdb6:	463b      	mov	r3, r7
 801bdb8:	22d4      	movs	r2, #212	; 0xd4
 801bdba:	495d      	ldr	r1, [pc, #372]	; (801bf30 <tcp_slowtmr+0x534>)
 801bdbc:	485d      	ldr	r0, [pc, #372]	; (801bf34 <tcp_slowtmr+0x538>)
 801bdbe:	f009 f849 	bl	8024e54 <iprintf>
 801bdc2:	e6a5      	b.n	801bb10 <tcp_slowtmr+0x114>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801bdc4:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801bdc8:	4a5b      	ldr	r2, [pc, #364]	; (801bf38 <tcp_slowtmr+0x53c>)
 801bdca:	441a      	add	r2, r3
          if (pcb->persist_cnt < backoff_cnt) {
 801bdcc:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801bdd0:	f812 2c01 	ldrb.w	r2, [r2, #-1]
          if (pcb->persist_cnt < backoff_cnt) {
 801bdd4:	4293      	cmp	r3, r2
 801bdd6:	d216      	bcs.n	801be06 <tcp_slowtmr+0x40a>
            pcb->persist_cnt++;
 801bdd8:	3301      	adds	r3, #1
 801bdda:	b2db      	uxtb	r3, r3
          if (pcb->persist_cnt >= backoff_cnt) {
 801bddc:	4293      	cmp	r3, r2
            pcb->persist_cnt++;
 801bdde:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801bde2:	d210      	bcs.n	801be06 <tcp_slowtmr+0x40a>
    if (pcb->state == FIN_WAIT_2) {
 801bde4:	7d23      	ldrb	r3, [r4, #20]
    pcb_remove = 0;
 801bde6:	f04f 0800 	mov.w	r8, #0
 801bdea:	e639      	b.n	801ba60 <tcp_slowtmr+0x64>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801bdec:	42a3      	cmp	r3, r4
 801bdee:	d006      	beq.n	801bdfe <tcp_slowtmr+0x402>
 801bdf0:	463b      	mov	r3, r7
 801bdf2:	f240 5271 	movw	r2, #1393	; 0x571
 801bdf6:	4951      	ldr	r1, [pc, #324]	; (801bf3c <tcp_slowtmr+0x540>)
 801bdf8:	484e      	ldr	r0, [pc, #312]	; (801bf34 <tcp_slowtmr+0x538>)
 801bdfa:	f009 f82b 	bl	8024e54 <iprintf>
        tcp_active_pcbs = pcb->next;
 801bdfe:	68e3      	ldr	r3, [r4, #12]
 801be00:	4a4f      	ldr	r2, [pc, #316]	; (801bf40 <tcp_slowtmr+0x544>)
 801be02:	6013      	str	r3, [r2, #0]
 801be04:	e67a      	b.n	801bafc <tcp_slowtmr+0x100>
            if (pcb->snd_wnd == 0) {
 801be06:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
 801be0a:	b936      	cbnz	r6, 801be1a <tcp_slowtmr+0x41e>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801be0c:	4620      	mov	r0, r4
 801be0e:	f003 fb6d 	bl	801f4ec <tcp_zero_window_probe>
 801be12:	b140      	cbz	r0, 801be26 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801be14:	46b0      	mov	r8, r6
    if (pcb->state == FIN_WAIT_2) {
 801be16:	7d23      	ldrb	r3, [r4, #20]
 801be18:	e622      	b.n	801ba60 <tcp_slowtmr+0x64>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801be1a:	4631      	mov	r1, r6
 801be1c:	4620      	mov	r0, r4
 801be1e:	f002 fe17 	bl	801ea50 <tcp_split_unsent_seg>
 801be22:	2800      	cmp	r0, #0
 801be24:	d078      	beq.n	801bf18 <tcp_slowtmr+0x51c>
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801be26:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
              pcb->persist_cnt = 0;
 801be2a:	f04f 0800 	mov.w	r8, #0
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801be2e:	2b06      	cmp	r3, #6
              pcb->persist_cnt = 0;
 801be30:	f884 8098 	strb.w	r8, [r4, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801be34:	f63f af6d 	bhi.w	801bd12 <tcp_slowtmr+0x316>
                pcb->persist_backoff++;
 801be38:	3301      	adds	r3, #1
 801be3a:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
    if (pcb->state == FIN_WAIT_2) {
 801be3e:	7d23      	ldrb	r3, [r4, #20]
 801be40:	e60e      	b.n	801ba60 <tcp_slowtmr+0x64>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801be42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801be44:	2b00      	cmp	r3, #0
 801be46:	f43f af64 	beq.w	801bd12 <tcp_slowtmr+0x316>
            if (pcb->state != SYN_SENT) {
 801be4a:	7d23      	ldrb	r3, [r4, #20]
 801be4c:	2b02      	cmp	r3, #2
 801be4e:	d014      	beq.n	801be7a <tcp_slowtmr+0x47e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801be50:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801be54:	f9b4 103c 	ldrsh.w	r1, [r4, #60]	; 0x3c
 801be58:	2a0c      	cmp	r2, #12
 801be5a:	f9b4 303e 	ldrsh.w	r3, [r4, #62]	; 0x3e
 801be5e:	bf28      	it	cs
 801be60:	220c      	movcs	r2, #12
 801be62:	eb03 03e1 	add.w	r3, r3, r1, asr #3
 801be66:	4937      	ldr	r1, [pc, #220]	; (801bf44 <tcp_slowtmr+0x548>)
 801be68:	5c8a      	ldrb	r2, [r1, r2]
 801be6a:	4093      	lsls	r3, r2
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801be6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801be70:	4293      	cmp	r3, r2
 801be72:	bfa8      	it	ge
 801be74:	4613      	movge	r3, r2
 801be76:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801be7a:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
            tcp_rexmit_rto_commit(pcb);
 801be7e:	4620      	mov	r0, r4
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801be80:	f8b4 1048 	ldrh.w	r1, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801be84:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->ssthresh = eff_wnd >> 1;
 801be86:	428b      	cmp	r3, r1
            pcb->cwnd = pcb->mss;
 801be88:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801be8c:	ea4f 0242 	mov.w	r2, r2, lsl #1
            pcb->ssthresh = eff_wnd >> 1;
 801be90:	bf28      	it	cs
 801be92:	460b      	movcs	r3, r1
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801be94:	b292      	uxth	r2, r2
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801be96:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
            pcb->ssthresh = eff_wnd >> 1;
 801be9a:	ea4f 0353 	mov.w	r3, r3, lsr #1
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801be9e:	bf88      	it	hi
 801bea0:	4613      	movhi	r3, r2
 801bea2:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
            pcb->rtime = 0;
 801bea6:	2300      	movs	r3, #0
 801bea8:	8623      	strh	r3, [r4, #48]	; 0x30
            pcb->bytes_acked = 0;
 801beaa:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
            tcp_rexmit_rto_commit(pcb);
 801beae:	f003 faab 	bl	801f408 <tcp_rexmit_rto_commit>
 801beb2:	e72e      	b.n	801bd12 <tcp_slowtmr+0x316>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801beb4:	463b      	mov	r3, r7
 801beb6:	f240 526d 	movw	r2, #1389	; 0x56d
 801beba:	4923      	ldr	r1, [pc, #140]	; (801bf48 <tcp_slowtmr+0x54c>)
 801bebc:	481d      	ldr	r0, [pc, #116]	; (801bf34 <tcp_slowtmr+0x538>)
 801bebe:	f008 ffc9 	bl	8024e54 <iprintf>
 801bec2:	e618      	b.n	801baf6 <tcp_slowtmr+0xfa>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801bec4:	f8d9 3000 	ldr.w	r3, [r9]
 801bec8:	42a3      	cmp	r3, r4
 801beca:	d006      	beq.n	801beda <tcp_slowtmr+0x4de>
 801becc:	4643      	mov	r3, r8
 801bece:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801bed2:	491e      	ldr	r1, [pc, #120]	; (801bf4c <tcp_slowtmr+0x550>)
 801bed4:	4638      	mov	r0, r7
 801bed6:	f008 ffbd 	bl	8024e54 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801beda:	7d23      	ldrb	r3, [r4, #20]
        tcp_tw_pcbs = pcb->next;
 801bedc:	f8d4 b00c 	ldr.w	fp, [r4, #12]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bee0:	2b01      	cmp	r3, #1
        tcp_tw_pcbs = pcb->next;
 801bee2:	f8c9 b000 	str.w	fp, [r9]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801bee6:	f47f af29 	bne.w	801bd3c <tcp_slowtmr+0x340>
 801beea:	4643      	mov	r3, r8
 801beec:	22d4      	movs	r2, #212	; 0xd4
 801beee:	4910      	ldr	r1, [pc, #64]	; (801bf30 <tcp_slowtmr+0x534>)
 801bef0:	4638      	mov	r0, r7
 801bef2:	f008 ffaf 	bl	8024e54 <iprintf>
 801bef6:	e721      	b.n	801bd3c <tcp_slowtmr+0x340>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801bef8:	463b      	mov	r3, r7
 801befa:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801befe:	4914      	ldr	r1, [pc, #80]	; (801bf50 <tcp_slowtmr+0x554>)
 801bf00:	480c      	ldr	r0, [pc, #48]	; (801bf34 <tcp_slowtmr+0x538>)
 801bf02:	f008 ffa7 	bl	8024e54 <iprintf>
 801bf06:	e686      	b.n	801bc16 <tcp_slowtmr+0x21a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801bf08:	4643      	mov	r3, r8
 801bf0a:	f240 52af 	movw	r2, #1455	; 0x5af
 801bf0e:	4911      	ldr	r1, [pc, #68]	; (801bf54 <tcp_slowtmr+0x558>)
 801bf10:	4638      	mov	r0, r7
 801bf12:	f008 ff9f 	bl	8024e54 <iprintf>
 801bf16:	e709      	b.n	801bd2c <tcp_slowtmr+0x330>
                if (tcp_output(pcb) == ERR_OK) {
 801bf18:	4620      	mov	r0, r4
 801bf1a:	f003 f88b 	bl	801f034 <tcp_output>
 801bf1e:	2800      	cmp	r0, #0
 801bf20:	d181      	bne.n	801be26 <tcp_slowtmr+0x42a>
    pcb_remove = 0;
 801bf22:	4680      	mov	r8, r0
    if (pcb->state == FIN_WAIT_2) {
 801bf24:	7d23      	ldrb	r3, [r4, #20]
 801bf26:	e59b      	b.n	801ba60 <tcp_slowtmr+0x64>
 801bf28:	000124f8 	.word	0x000124f8
 801bf2c:	10624dd3 	.word	0x10624dd3
 801bf30:	0804374c 	.word	0x0804374c
 801bf34:	08029a64 	.word	0x08029a64
 801bf38:	08043e04 	.word	0x08043e04
 801bf3c:	08043b14 	.word	0x08043b14
 801bf40:	2002e38c 	.word	0x2002e38c
 801bf44:	08043de4 	.word	0x08043de4
 801bf48:	08043ae8 	.word	0x08043ae8
 801bf4c:	08043b98 	.word	0x08043b98
 801bf50:	08043ab0 	.word	0x08043ab0
 801bf54:	08043b70 	.word	0x08043b70

0801bf58 <tcp_pcb_remove>:
{
 801bf58:	b538      	push	{r3, r4, r5, lr}
 801bf5a:	4605      	mov	r5, r0
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bf5c:	460c      	mov	r4, r1
 801bf5e:	2900      	cmp	r1, #0
 801bf60:	d04a      	beq.n	801bff8 <tcp_pcb_remove+0xa0>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801bf62:	2d00      	cmp	r5, #0
 801bf64:	d051      	beq.n	801c00a <tcp_pcb_remove+0xb2>
  TCP_RMV(pcblist, pcb);
 801bf66:	682b      	ldr	r3, [r5, #0]
 801bf68:	42a3      	cmp	r3, r4
 801bf6a:	d032      	beq.n	801bfd2 <tcp_pcb_remove+0x7a>
 801bf6c:	b12b      	cbz	r3, 801bf7a <tcp_pcb_remove+0x22>
 801bf6e:	68da      	ldr	r2, [r3, #12]
 801bf70:	42a2      	cmp	r2, r4
 801bf72:	d03e      	beq.n	801bff2 <tcp_pcb_remove+0x9a>
 801bf74:	4613      	mov	r3, r2
 801bf76:	2b00      	cmp	r3, #0
 801bf78:	d1f9      	bne.n	801bf6e <tcp_pcb_remove+0x16>
 801bf7a:	2300      	movs	r3, #0
  tcp_pcb_purge(pcb);
 801bf7c:	4620      	mov	r0, r4
  TCP_RMV(pcblist, pcb);
 801bf7e:	60e3      	str	r3, [r4, #12]
  tcp_pcb_purge(pcb);
 801bf80:	f7ff fcea 	bl	801b958 <tcp_pcb_purge>
  if ((pcb->state != TIME_WAIT) &&
 801bf84:	7d23      	ldrb	r3, [r4, #20]
 801bf86:	2b0a      	cmp	r3, #10
 801bf88:	d02d      	beq.n	801bfe6 <tcp_pcb_remove+0x8e>
 801bf8a:	2b01      	cmp	r3, #1
 801bf8c:	d01d      	beq.n	801bfca <tcp_pcb_remove+0x72>
      (pcb->flags & TF_ACK_DELAY)) {
 801bf8e:	8b63      	ldrh	r3, [r4, #26]
      (pcb->state != LISTEN) &&
 801bf90:	07da      	lsls	r2, r3, #31
 801bf92:	d421      	bmi.n	801bfd8 <tcp_pcb_remove+0x80>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bf94:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bf96:	b133      	cbz	r3, 801bfa6 <tcp_pcb_remove+0x4e>
 801bf98:	4b20      	ldr	r3, [pc, #128]	; (801c01c <tcp_pcb_remove+0xc4>)
 801bf9a:	f640 0293 	movw	r2, #2195	; 0x893
 801bf9e:	4920      	ldr	r1, [pc, #128]	; (801c020 <tcp_pcb_remove+0xc8>)
 801bfa0:	4820      	ldr	r0, [pc, #128]	; (801c024 <tcp_pcb_remove+0xcc>)
 801bfa2:	f008 ff57 	bl	8024e54 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801bfa6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801bfa8:	b133      	cbz	r3, 801bfb8 <tcp_pcb_remove+0x60>
 801bfaa:	4b1c      	ldr	r3, [pc, #112]	; (801c01c <tcp_pcb_remove+0xc4>)
 801bfac:	f640 0294 	movw	r2, #2196	; 0x894
 801bfb0:	491d      	ldr	r1, [pc, #116]	; (801c028 <tcp_pcb_remove+0xd0>)
 801bfb2:	481c      	ldr	r0, [pc, #112]	; (801c024 <tcp_pcb_remove+0xcc>)
 801bfb4:	f008 ff4e 	bl	8024e54 <iprintf>
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801bfb8:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801bfba:	b133      	cbz	r3, 801bfca <tcp_pcb_remove+0x72>
 801bfbc:	4b17      	ldr	r3, [pc, #92]	; (801c01c <tcp_pcb_remove+0xc4>)
 801bfbe:	f640 0296 	movw	r2, #2198	; 0x896
 801bfc2:	491a      	ldr	r1, [pc, #104]	; (801c02c <tcp_pcb_remove+0xd4>)
 801bfc4:	4817      	ldr	r0, [pc, #92]	; (801c024 <tcp_pcb_remove+0xcc>)
 801bfc6:	f008 ff45 	bl	8024e54 <iprintf>
  pcb->state = CLOSED;
 801bfca:	2300      	movs	r3, #0
 801bfcc:	7523      	strb	r3, [r4, #20]
  pcb->local_port = 0;
 801bfce:	82e3      	strh	r3, [r4, #22]
}
 801bfd0:	bd38      	pop	{r3, r4, r5, pc}
  TCP_RMV(pcblist, pcb);
 801bfd2:	68e3      	ldr	r3, [r4, #12]
 801bfd4:	602b      	str	r3, [r5, #0]
 801bfd6:	e7d0      	b.n	801bf7a <tcp_pcb_remove+0x22>
    tcp_ack_now(pcb);
 801bfd8:	f043 0302 	orr.w	r3, r3, #2
    tcp_output(pcb);
 801bfdc:	4620      	mov	r0, r4
    tcp_ack_now(pcb);
 801bfde:	8363      	strh	r3, [r4, #26]
    tcp_output(pcb);
 801bfe0:	f003 f828 	bl	801f034 <tcp_output>
  if (pcb->state != LISTEN) {
 801bfe4:	7d23      	ldrb	r3, [r4, #20]
 801bfe6:	2b01      	cmp	r3, #1
 801bfe8:	d0ef      	beq.n	801bfca <tcp_pcb_remove+0x72>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801bfea:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d1d3      	bne.n	801bf98 <tcp_pcb_remove+0x40>
 801bff0:	e7d9      	b.n	801bfa6 <tcp_pcb_remove+0x4e>
  TCP_RMV(pcblist, pcb);
 801bff2:	68e2      	ldr	r2, [r4, #12]
 801bff4:	60da      	str	r2, [r3, #12]
 801bff6:	e7c0      	b.n	801bf7a <tcp_pcb_remove+0x22>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801bff8:	4b08      	ldr	r3, [pc, #32]	; (801c01c <tcp_pcb_remove+0xc4>)
 801bffa:	f640 0283 	movw	r2, #2179	; 0x883
 801bffe:	490c      	ldr	r1, [pc, #48]	; (801c030 <tcp_pcb_remove+0xd8>)
 801c000:	4808      	ldr	r0, [pc, #32]	; (801c024 <tcp_pcb_remove+0xcc>)
 801c002:	f008 ff27 	bl	8024e54 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801c006:	2d00      	cmp	r5, #0
 801c008:	d1ad      	bne.n	801bf66 <tcp_pcb_remove+0xe>
 801c00a:	4b04      	ldr	r3, [pc, #16]	; (801c01c <tcp_pcb_remove+0xc4>)
 801c00c:	f640 0284 	movw	r2, #2180	; 0x884
 801c010:	4908      	ldr	r1, [pc, #32]	; (801c034 <tcp_pcb_remove+0xdc>)
 801c012:	4804      	ldr	r0, [pc, #16]	; (801c024 <tcp_pcb_remove+0xcc>)
 801c014:	f008 ff1e 	bl	8024e54 <iprintf>
 801c018:	e7a5      	b.n	801bf66 <tcp_pcb_remove+0xe>
 801c01a:	bf00      	nop
 801c01c:	08043710 	.word	0x08043710
 801c020:	08043bfc 	.word	0x08043bfc
 801c024:	08029a64 	.word	0x08029a64
 801c028:	08043c14 	.word	0x08043c14
 801c02c:	08043c30 	.word	0x08043c30
 801c030:	08043bc0 	.word	0x08043bc0
 801c034:	08043bdc 	.word	0x08043bdc

0801c038 <tcp_abandon>:
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c038:	2800      	cmp	r0, #0
 801c03a:	f000 80ad 	beq.w	801c198 <tcp_abandon+0x160>
{
 801c03e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c042:	7d03      	ldrb	r3, [r0, #20]
{
 801c044:	b087      	sub	sp, #28
 801c046:	4605      	mov	r5, r0
 801c048:	460e      	mov	r6, r1
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c04a:	2b01      	cmp	r3, #1
 801c04c:	f000 808b 	beq.w	801c166 <tcp_abandon+0x12e>
  if (pcb->state == TIME_WAIT) {
 801c050:	2b0a      	cmp	r3, #10
 801c052:	f000 8093 	beq.w	801c17c <tcp_abandon+0x144>
    seqno = pcb->snd_nxt;
 801c056:	6d2a      	ldr	r2, [r5, #80]	; 0x50
    ackno = pcb->rcv_nxt;
 801c058:	f8d5 b024 	ldr.w	fp, [r5, #36]	; 0x24
    errf = pcb->errf;
 801c05c:	f8d5 8090 	ldr.w	r8, [r5, #144]	; 0x90
    errf_arg = pcb->callback_arg;
 801c060:	f8d5 9010 	ldr.w	r9, [r5, #16]
    seqno = pcb->snd_nxt;
 801c064:	9205      	str	r2, [sp, #20]
    if (pcb->state == CLOSED) {
 801c066:	b96b      	cbnz	r3, 801c084 <tcp_abandon+0x4c>
      if (pcb->local_port != 0) {
 801c068:	8aef      	ldrh	r7, [r5, #22]
 801c06a:	2f00      	cmp	r7, #0
 801c06c:	d052      	beq.n	801c114 <tcp_abandon+0xdc>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c06e:	4a51      	ldr	r2, [pc, #324]	; (801c1b4 <tcp_abandon+0x17c>)
 801c070:	6813      	ldr	r3, [r2, #0]
 801c072:	42ab      	cmp	r3, r5
 801c074:	d074      	beq.n	801c160 <tcp_abandon+0x128>
 801c076:	2b00      	cmp	r3, #0
 801c078:	d050      	beq.n	801c11c <tcp_abandon+0xe4>
 801c07a:	68da      	ldr	r2, [r3, #12]
 801c07c:	42aa      	cmp	r2, r5
 801c07e:	d04b      	beq.n	801c118 <tcp_abandon+0xe0>
 801c080:	4613      	mov	r3, r2
 801c082:	e7f8      	b.n	801c076 <tcp_abandon+0x3e>
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c084:	4629      	mov	r1, r5
 801c086:	484c      	ldr	r0, [pc, #304]	; (801c1b8 <tcp_abandon+0x180>)
      local_port = pcb->local_port;
 801c088:	8aef      	ldrh	r7, [r5, #22]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c08a:	f7ff ff65 	bl	801bf58 <tcp_pcb_remove>
 801c08e:	4b4b      	ldr	r3, [pc, #300]	; (801c1bc <tcp_abandon+0x184>)
 801c090:	2201      	movs	r2, #1
 801c092:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801c094:	6f2c      	ldr	r4, [r5, #112]	; 0x70
 801c096:	b164      	cbz	r4, 801c0b2 <tcp_abandon+0x7a>
      pbuf_free(seg->p);
 801c098:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c09a:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c09c:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c0a0:	b108      	cbz	r0, 801c0a6 <tcp_abandon+0x6e>
      pbuf_free(seg->p);
 801c0a2:	f7fe fe15 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c0a6:	4651      	mov	r1, sl
 801c0a8:	2004      	movs	r0, #4
 801c0aa:	f7fe f8f9 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801c0ae:	2c00      	cmp	r4, #0
 801c0b0:	d1f2      	bne.n	801c098 <tcp_abandon+0x60>
    if (pcb->unsent != NULL) {
 801c0b2:	6eec      	ldr	r4, [r5, #108]	; 0x6c
 801c0b4:	b164      	cbz	r4, 801c0d0 <tcp_abandon+0x98>
      pbuf_free(seg->p);
 801c0b6:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c0b8:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c0ba:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c0be:	b108      	cbz	r0, 801c0c4 <tcp_abandon+0x8c>
      pbuf_free(seg->p);
 801c0c0:	f7fe fe06 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c0c4:	4651      	mov	r1, sl
 801c0c6:	2004      	movs	r0, #4
 801c0c8:	f7fe f8ea 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801c0cc:	2c00      	cmp	r4, #0
 801c0ce:	d1f2      	bne.n	801c0b6 <tcp_abandon+0x7e>
    if (pcb->ooseq != NULL) {
 801c0d0:	6f6c      	ldr	r4, [r5, #116]	; 0x74
 801c0d2:	b164      	cbz	r4, 801c0ee <tcp_abandon+0xb6>
      pbuf_free(seg->p);
 801c0d4:	46a2      	mov	sl, r4
    struct tcp_seg *next = seg->next;
 801c0d6:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c0d8:	f8da 0004 	ldr.w	r0, [sl, #4]
 801c0dc:	b108      	cbz	r0, 801c0e2 <tcp_abandon+0xaa>
      pbuf_free(seg->p);
 801c0de:	f7fe fdf7 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c0e2:	4651      	mov	r1, sl
 801c0e4:	2004      	movs	r0, #4
 801c0e6:	f7fe f8db 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801c0ea:	2c00      	cmp	r4, #0
 801c0ec:	d1f2      	bne.n	801c0d4 <tcp_abandon+0x9c>
    if (send_rst) {
 801c0ee:	b9ce      	cbnz	r6, 801c124 <tcp_abandon+0xec>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c0f0:	7d2b      	ldrb	r3, [r5, #20]
 801c0f2:	2b01      	cmp	r3, #1
 801c0f4:	d024      	beq.n	801c140 <tcp_abandon+0x108>
  memp_free(MEMP_TCP_PCB, pcb);
 801c0f6:	4629      	mov	r1, r5
 801c0f8:	2002      	movs	r0, #2
 801c0fa:	f7fe f8d1 	bl	801a2a0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c0fe:	f1b8 0f00 	cmp.w	r8, #0
 801c102:	d02a      	beq.n	801c15a <tcp_abandon+0x122>
 801c104:	f06f 010c 	mvn.w	r1, #12
 801c108:	4648      	mov	r0, r9
 801c10a:	4643      	mov	r3, r8
}
 801c10c:	b007      	add	sp, #28
 801c10e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c112:	4718      	bx	r3
    int send_rst = 0;
 801c114:	461e      	mov	r6, r3
 801c116:	e7bd      	b.n	801c094 <tcp_abandon+0x5c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c118:	68ea      	ldr	r2, [r5, #12]
 801c11a:	60da      	str	r2, [r3, #12]
 801c11c:	2700      	movs	r7, #0
    int send_rst = 0;
 801c11e:	463e      	mov	r6, r7
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c120:	60ef      	str	r7, [r5, #12]
 801c122:	e7b7      	b.n	801c094 <tcp_abandon+0x5c>
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801c124:	9701      	str	r7, [sp, #4]
 801c126:	465a      	mov	r2, fp
 801c128:	8b2b      	ldrh	r3, [r5, #24]
 801c12a:	4628      	mov	r0, r5
 801c12c:	9905      	ldr	r1, [sp, #20]
 801c12e:	9302      	str	r3, [sp, #8]
 801c130:	1d2b      	adds	r3, r5, #4
 801c132:	9300      	str	r3, [sp, #0]
 801c134:	462b      	mov	r3, r5
 801c136:	f002 ff03 	bl	801ef40 <tcp_rst>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c13a:	7d2b      	ldrb	r3, [r5, #20]
 801c13c:	2b01      	cmp	r3, #1
 801c13e:	d1da      	bne.n	801c0f6 <tcp_abandon+0xbe>
 801c140:	491f      	ldr	r1, [pc, #124]	; (801c1c0 <tcp_abandon+0x188>)
 801c142:	22d4      	movs	r2, #212	; 0xd4
 801c144:	4b1f      	ldr	r3, [pc, #124]	; (801c1c4 <tcp_abandon+0x18c>)
 801c146:	4820      	ldr	r0, [pc, #128]	; (801c1c8 <tcp_abandon+0x190>)
 801c148:	f008 fe84 	bl	8024e54 <iprintf>
  memp_free(MEMP_TCP_PCB, pcb);
 801c14c:	4629      	mov	r1, r5
 801c14e:	2002      	movs	r0, #2
 801c150:	f7fe f8a6 	bl	801a2a0 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801c154:	f1b8 0f00 	cmp.w	r8, #0
 801c158:	d1d4      	bne.n	801c104 <tcp_abandon+0xcc>
}
 801c15a:	b007      	add	sp, #28
 801c15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c160:	68eb      	ldr	r3, [r5, #12]
 801c162:	6013      	str	r3, [r2, #0]
 801c164:	e7da      	b.n	801c11c <tcp_abandon+0xe4>
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801c166:	4b17      	ldr	r3, [pc, #92]	; (801c1c4 <tcp_abandon+0x18c>)
 801c168:	f44f 7210 	mov.w	r2, #576	; 0x240
 801c16c:	4917      	ldr	r1, [pc, #92]	; (801c1cc <tcp_abandon+0x194>)
 801c16e:	4816      	ldr	r0, [pc, #88]	; (801c1c8 <tcp_abandon+0x190>)
 801c170:	f008 fe70 	bl	8024e54 <iprintf>
  if (pcb->state == TIME_WAIT) {
 801c174:	7d2b      	ldrb	r3, [r5, #20]
 801c176:	2b0a      	cmp	r3, #10
 801c178:	f47f af6d 	bne.w	801c056 <tcp_abandon+0x1e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801c17c:	4629      	mov	r1, r5
 801c17e:	4814      	ldr	r0, [pc, #80]	; (801c1d0 <tcp_abandon+0x198>)
 801c180:	f7ff feea 	bl	801bf58 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c184:	7d2b      	ldrb	r3, [r5, #20]
 801c186:	2b01      	cmp	r3, #1
 801c188:	d00d      	beq.n	801c1a6 <tcp_abandon+0x16e>
  memp_free(MEMP_TCP_PCB, pcb);
 801c18a:	4629      	mov	r1, r5
 801c18c:	2002      	movs	r0, #2
}
 801c18e:	b007      	add	sp, #28
 801c190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  memp_free(MEMP_TCP_PCB, pcb);
 801c194:	f7fe b884 	b.w	801a2a0 <memp_free>
  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 801c198:	4b0a      	ldr	r3, [pc, #40]	; (801c1c4 <tcp_abandon+0x18c>)
 801c19a:	f240 223d 	movw	r2, #573	; 0x23d
 801c19e:	490d      	ldr	r1, [pc, #52]	; (801c1d4 <tcp_abandon+0x19c>)
 801c1a0:	4809      	ldr	r0, [pc, #36]	; (801c1c8 <tcp_abandon+0x190>)
 801c1a2:	f008 be57 	b.w	8024e54 <iprintf>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c1a6:	4b07      	ldr	r3, [pc, #28]	; (801c1c4 <tcp_abandon+0x18c>)
 801c1a8:	22d4      	movs	r2, #212	; 0xd4
 801c1aa:	4905      	ldr	r1, [pc, #20]	; (801c1c0 <tcp_abandon+0x188>)
 801c1ac:	4806      	ldr	r0, [pc, #24]	; (801c1c8 <tcp_abandon+0x190>)
 801c1ae:	f008 fe51 	bl	8024e54 <iprintf>
 801c1b2:	e7ea      	b.n	801c18a <tcp_abandon+0x152>
 801c1b4:	2002e394 	.word	0x2002e394
 801c1b8:	2002e38c 	.word	0x2002e38c
 801c1bc:	2002e390 	.word	0x2002e390
 801c1c0:	0804374c 	.word	0x0804374c
 801c1c4:	08043710 	.word	0x08043710
 801c1c8:	08029a64 	.word	0x08029a64
 801c1cc:	08043c64 	.word	0x08043c64
 801c1d0:	2002e3a4 	.word	0x2002e3a4
 801c1d4:	08043c48 	.word	0x08043c48

0801c1d8 <tcp_abort>:
  tcp_abandon(pcb, 1);
 801c1d8:	2101      	movs	r1, #1
 801c1da:	f7ff bf2d 	b.w	801c038 <tcp_abandon>
 801c1de:	bf00      	nop

0801c1e0 <tcp_accept_null>:
{
 801c1e0:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c1e2:	460c      	mov	r4, r1
 801c1e4:	b131      	cbz	r1, 801c1f4 <tcp_accept_null+0x14>
  tcp_abandon(pcb, 1);
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	2101      	movs	r1, #1
 801c1ea:	f7ff ff25 	bl	801c038 <tcp_abandon>
}
 801c1ee:	f06f 000c 	mvn.w	r0, #12
 801c1f2:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 801c1f4:	4b06      	ldr	r3, [pc, #24]	; (801c210 <tcp_accept_null+0x30>)
 801c1f6:	f240 320f 	movw	r2, #783	; 0x30f
 801c1fa:	4906      	ldr	r1, [pc, #24]	; (801c214 <tcp_accept_null+0x34>)
 801c1fc:	4806      	ldr	r0, [pc, #24]	; (801c218 <tcp_accept_null+0x38>)
 801c1fe:	f008 fe29 	bl	8024e54 <iprintf>
  tcp_abandon(pcb, 1);
 801c202:	4620      	mov	r0, r4
 801c204:	2101      	movs	r1, #1
 801c206:	f7ff ff17 	bl	801c038 <tcp_abandon>
}
 801c20a:	f06f 000c 	mvn.w	r0, #12
 801c20e:	bd10      	pop	{r4, pc}
 801c210:	08043710 	.word	0x08043710
 801c214:	08043c98 	.word	0x08043c98
 801c218:	08029a64 	.word	0x08029a64

0801c21c <tcp_netif_ip_addr_changed_pcblist>:
{
 801c21c:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c21e:	4605      	mov	r5, r0
{
 801c220:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c222:	b178      	cbz	r0, 801c244 <tcp_netif_ip_addr_changed_pcblist+0x28>
  while (pcb != NULL) {
 801c224:	b134      	cbz	r4, 801c234 <tcp_netif_ip_addr_changed_pcblist+0x18>
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801c226:	6822      	ldr	r2, [r4, #0]
 801c228:	682b      	ldr	r3, [r5, #0]
 801c22a:	429a      	cmp	r2, r3
 801c22c:	d003      	beq.n	801c236 <tcp_netif_ip_addr_changed_pcblist+0x1a>
      pcb = pcb->next;
 801c22e:	68e4      	ldr	r4, [r4, #12]
  while (pcb != NULL) {
 801c230:	2c00      	cmp	r4, #0
 801c232:	d1f8      	bne.n	801c226 <tcp_netif_ip_addr_changed_pcblist+0xa>
}
 801c234:	bd38      	pop	{r3, r4, r5, pc}
      struct tcp_pcb *next = pcb->next;
 801c236:	68e3      	ldr	r3, [r4, #12]
  tcp_abandon(pcb, 1);
 801c238:	4620      	mov	r0, r4
 801c23a:	2101      	movs	r1, #1
      pcb = next;
 801c23c:	461c      	mov	r4, r3
  tcp_abandon(pcb, 1);
 801c23e:	f7ff fefb 	bl	801c038 <tcp_abandon>
      pcb = next;
 801c242:	e7ef      	b.n	801c224 <tcp_netif_ip_addr_changed_pcblist+0x8>
  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801c244:	4b03      	ldr	r3, [pc, #12]	; (801c254 <tcp_netif_ip_addr_changed_pcblist+0x38>)
 801c246:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801c24a:	4903      	ldr	r1, [pc, #12]	; (801c258 <tcp_netif_ip_addr_changed_pcblist+0x3c>)
 801c24c:	4803      	ldr	r0, [pc, #12]	; (801c25c <tcp_netif_ip_addr_changed_pcblist+0x40>)
 801c24e:	f008 fe01 	bl	8024e54 <iprintf>
 801c252:	e7e7      	b.n	801c224 <tcp_netif_ip_addr_changed_pcblist+0x8>
 801c254:	08043710 	.word	0x08043710
 801c258:	08043cb8 	.word	0x08043cb8
 801c25c:	08029a64 	.word	0x08029a64

0801c260 <tcp_kill_state>:
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c260:	4b0f      	ldr	r3, [pc, #60]	; (801c2a0 <tcp_kill_state+0x40>)
 801c262:	6819      	ldr	r1, [r3, #0]
 801c264:	b1d1      	cbz	r1, 801c29c <tcp_kill_state+0x3c>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c266:	4b0f      	ldr	r3, [pc, #60]	; (801c2a4 <tcp_kill_state+0x44>)
  inactivity = 0;
 801c268:	2200      	movs	r2, #0
{
 801c26a:	b430      	push	{r4, r5}
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c26c:	681d      	ldr	r5, [r3, #0]
  inactive = NULL;
 801c26e:	4614      	mov	r4, r2
 801c270:	e001      	b.n	801c276 <tcp_kill_state+0x16>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c272:	68c9      	ldr	r1, [r1, #12]
 801c274:	b159      	cbz	r1, 801c28e <tcp_kill_state+0x2e>
    if (pcb->state == state) {
 801c276:	7d0b      	ldrb	r3, [r1, #20]
 801c278:	4283      	cmp	r3, r0
 801c27a:	d1fa      	bne.n	801c272 <tcp_kill_state+0x12>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c27c:	6a0b      	ldr	r3, [r1, #32]
 801c27e:	1aeb      	subs	r3, r5, r3
 801c280:	4293      	cmp	r3, r2
 801c282:	d3f6      	bcc.n	801c272 <tcp_kill_state+0x12>
 801c284:	460c      	mov	r4, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c286:	68c9      	ldr	r1, [r1, #12]
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c288:	461a      	mov	r2, r3
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c28a:	2900      	cmp	r1, #0
 801c28c:	d1f3      	bne.n	801c276 <tcp_kill_state+0x16>
  if (inactive != NULL) {
 801c28e:	b11c      	cbz	r4, 801c298 <tcp_kill_state+0x38>
    tcp_abandon(inactive, 0);
 801c290:	4620      	mov	r0, r4
}
 801c292:	bc30      	pop	{r4, r5}
    tcp_abandon(inactive, 0);
 801c294:	f7ff bed0 	b.w	801c038 <tcp_abandon>
}
 801c298:	bc30      	pop	{r4, r5}
 801c29a:	4770      	bx	lr
 801c29c:	4770      	bx	lr
 801c29e:	bf00      	nop
 801c2a0:	2002e38c 	.word	0x2002e38c
 801c2a4:	2002e39c 	.word	0x2002e39c

0801c2a8 <tcp_alloc>:
{
 801c2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c2aa:	f44f 62e6 	mov.w	r2, #1840	; 0x730
{
 801c2ae:	4605      	mov	r5, r0
  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c2b0:	494f      	ldr	r1, [pc, #316]	; (801c3f0 <tcp_alloc+0x148>)
 801c2b2:	2002      	movs	r0, #2
 801c2b4:	f7fd ffbe 	bl	801a234 <memp_malloc_fn>
  if (pcb == NULL) {
 801c2b8:	4603      	mov	r3, r0
 801c2ba:	b320      	cbz	r0, 801c306 <tcp_alloc+0x5e>
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c2bc:	229c      	movs	r2, #156	; 0x9c
 801c2be:	2100      	movs	r1, #0
 801c2c0:	4618      	mov	r0, r3
    pcb->snd_buf = TCP_SND_BUF;
 801c2c2:	f44f 6486 	mov.w	r4, #1072	; 0x430
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c2c6:	f007 fe27 	bl	8023f18 <memset>
    pcb->last_timer = tcp_timer_ctr;
 801c2ca:	494a      	ldr	r1, [pc, #296]	; (801c3f4 <tcp_alloc+0x14c>)
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801c2cc:	4603      	mov	r3, r0
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c2ce:	2206      	movs	r2, #6
    pcb->last_timer = tcp_timer_ctr;
 801c2d0:	7809      	ldrb	r1, [r1, #0]
    pcb->tmr = tcp_ticks;
 801c2d2:	4849      	ldr	r0, [pc, #292]	; (801c3f8 <tcp_alloc+0x150>)
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801c2d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->tmr = tcp_ticks;
 801c2d8:	6800      	ldr	r0, [r0, #0]
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801c2da:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->last_timer = tcp_timer_ctr;
 801c2dc:	7799      	strb	r1, [r3, #30]
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c2de:	4a47      	ldr	r2, [pc, #284]	; (801c3fc <tcp_alloc+0x154>)
    pcb->recv = tcp_recv_null;
 801c2e0:	4947      	ldr	r1, [pc, #284]	; (801c400 <tcp_alloc+0x158>)
    pcb->snd_buf = TCP_SND_BUF;
 801c2e2:	f8a3 4064 	strh.w	r4, [r3, #100]	; 0x64
    pcb->tmr = tcp_ticks;
 801c2e6:	6218      	str	r0, [r3, #32]
    pcb->rtime = -1;
 801c2e8:	4c46      	ldr	r4, [pc, #280]	; (801c404 <tcp_alloc+0x15c>)
    pcb->cwnd = 1;
 801c2ea:	4847      	ldr	r0, [pc, #284]	; (801c408 <tcp_alloc+0x160>)
    pcb->recv = tcp_recv_null;
 801c2ec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801c2f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->ttl = TCP_TTL;
 801c2f4:	22ff      	movs	r2, #255	; 0xff
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c2f6:	4945      	ldr	r1, [pc, #276]	; (801c40c <tcp_alloc+0x164>)
    pcb->cwnd = 1;
 801c2f8:	6498      	str	r0, [r3, #72]	; 0x48
}
 801c2fa:	4618      	mov	r0, r3
    pcb->prio = prio;
 801c2fc:	755d      	strb	r5, [r3, #21]
    pcb->rtime = -1;
 801c2fe:	631c      	str	r4, [r3, #48]	; 0x30
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801c300:	6299      	str	r1, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801c302:	72da      	strb	r2, [r3, #11]
}
 801c304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801c306:	4e42      	ldr	r6, [pc, #264]	; (801c410 <tcp_alloc+0x168>)
 801c308:	6834      	ldr	r4, [r6, #0]
  while (pcb != NULL) {
 801c30a:	b15c      	cbz	r4, 801c324 <tcp_alloc+0x7c>
    struct tcp_pcb *next = pcb->next;
 801c30c:	4620      	mov	r0, r4
 801c30e:	68e4      	ldr	r4, [r4, #12]
    if (pcb->flags & TF_CLOSEPEND) {
 801c310:	8b43      	ldrh	r3, [r0, #26]
 801c312:	0719      	lsls	r1, r3, #28
 801c314:	d5f9      	bpl.n	801c30a <tcp_alloc+0x62>
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c316:	f023 0308 	bic.w	r3, r3, #8
 801c31a:	8343      	strh	r3, [r0, #26]
      tcp_close_shutdown_fin(pcb);
 801c31c:	f7fe ffd8 	bl	801b2d0 <tcp_close_shutdown_fin>
  while (pcb != NULL) {
 801c320:	2c00      	cmp	r4, #0
 801c322:	d1f3      	bne.n	801c30c <tcp_alloc+0x64>
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c324:	4b3b      	ldr	r3, [pc, #236]	; (801c414 <tcp_alloc+0x16c>)
 801c326:	681b      	ldr	r3, [r3, #0]
 801c328:	b193      	cbz	r3, 801c350 <tcp_alloc+0xa8>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c32a:	4a33      	ldr	r2, [pc, #204]	; (801c3f8 <tcp_alloc+0x150>)
 801c32c:	4618      	mov	r0, r3
 801c32e:	6a19      	ldr	r1, [r3, #32]
 801c330:	6814      	ldr	r4, [r2, #0]
 801c332:	1a61      	subs	r1, r4, r1
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c334:	68db      	ldr	r3, [r3, #12]
 801c336:	b143      	cbz	r3, 801c34a <tcp_alloc+0xa2>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c338:	6a1a      	ldr	r2, [r3, #32]
 801c33a:	1aa2      	subs	r2, r4, r2
 801c33c:	428a      	cmp	r2, r1
 801c33e:	d3f9      	bcc.n	801c334 <tcp_alloc+0x8c>
 801c340:	4618      	mov	r0, r3
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c342:	68db      	ldr	r3, [r3, #12]
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801c344:	4611      	mov	r1, r2
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801c346:	2b00      	cmp	r3, #0
 801c348:	d1f6      	bne.n	801c338 <tcp_alloc+0x90>
  tcp_abandon(pcb, 1);
 801c34a:	2101      	movs	r1, #1
 801c34c:	f7ff fe74 	bl	801c038 <tcp_abandon>
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c350:	f240 7239 	movw	r2, #1849	; 0x739
 801c354:	4926      	ldr	r1, [pc, #152]	; (801c3f0 <tcp_alloc+0x148>)
 801c356:	2002      	movs	r0, #2
 801c358:	f7fd ff6c 	bl	801a234 <memp_malloc_fn>
    if (pcb == NULL) {
 801c35c:	4603      	mov	r3, r0
 801c35e:	2800      	cmp	r0, #0
 801c360:	d1ac      	bne.n	801c2bc <tcp_alloc+0x14>
      tcp_kill_state(LAST_ACK);
 801c362:	2009      	movs	r0, #9
 801c364:	f7ff ff7c 	bl	801c260 <tcp_kill_state>
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c368:	f240 723f 	movw	r2, #1855	; 0x73f
 801c36c:	4920      	ldr	r1, [pc, #128]	; (801c3f0 <tcp_alloc+0x148>)
 801c36e:	2002      	movs	r0, #2
 801c370:	f7fd ff60 	bl	801a234 <memp_malloc_fn>
      if (pcb == NULL) {
 801c374:	4603      	mov	r3, r0
 801c376:	2800      	cmp	r0, #0
 801c378:	d1a0      	bne.n	801c2bc <tcp_alloc+0x14>
        tcp_kill_state(CLOSING);
 801c37a:	2008      	movs	r0, #8
 801c37c:	f7ff ff70 	bl	801c260 <tcp_kill_state>
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c380:	f240 7245 	movw	r2, #1861	; 0x745
 801c384:	491a      	ldr	r1, [pc, #104]	; (801c3f0 <tcp_alloc+0x148>)
 801c386:	2002      	movs	r0, #2
 801c388:	f7fd ff54 	bl	801a234 <memp_malloc_fn>
        if (pcb == NULL) {
 801c38c:	4603      	mov	r3, r0
 801c38e:	2800      	cmp	r0, #0
 801c390:	d194      	bne.n	801c2bc <tcp_alloc+0x14>
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c392:	062a      	lsls	r2, r5, #24
 801c394:	d42a      	bmi.n	801c3ec <tcp_alloc+0x144>
  if (mprio == 0) {
 801c396:	b1ed      	cbz	r5, 801c3d4 <tcp_alloc+0x12c>
 801c398:	462a      	mov	r2, r5
  mprio--;
 801c39a:	1e51      	subs	r1, r2, #1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c39c:	6832      	ldr	r2, [r6, #0]
  mprio--;
 801c39e:	b2c9      	uxtb	r1, r1
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3a0:	b1c2      	cbz	r2, 801c3d4 <tcp_alloc+0x12c>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c3a2:	4815      	ldr	r0, [pc, #84]	; (801c3f8 <tcp_alloc+0x150>)
  inactivity = 0;
 801c3a4:	2600      	movs	r6, #0
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c3a6:	6807      	ldr	r7, [r0, #0]
 801c3a8:	e005      	b.n	801c3b6 <tcp_alloc+0x10e>
 801c3aa:	6a14      	ldr	r4, [r2, #32]
      inactivity = tcp_ticks - pcb->tmr;
 801c3ac:	1b3e      	subs	r6, r7, r4
    if ((pcb->prio < mprio) ||
 801c3ae:	4601      	mov	r1, r0
      inactivity = tcp_ticks - pcb->tmr;
 801c3b0:	4613      	mov	r3, r2
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801c3b2:	68d2      	ldr	r2, [r2, #12]
 801c3b4:	b14a      	cbz	r2, 801c3ca <tcp_alloc+0x122>
    if ((pcb->prio < mprio) ||
 801c3b6:	7d50      	ldrb	r0, [r2, #21]
 801c3b8:	4288      	cmp	r0, r1
 801c3ba:	d3f6      	bcc.n	801c3aa <tcp_alloc+0x102>
 801c3bc:	d1f9      	bne.n	801c3b2 <tcp_alloc+0x10a>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801c3be:	6a14      	ldr	r4, [r2, #32]
 801c3c0:	eba7 0e04 	sub.w	lr, r7, r4
 801c3c4:	45b6      	cmp	lr, r6
 801c3c6:	d3f4      	bcc.n	801c3b2 <tcp_alloc+0x10a>
 801c3c8:	e7f0      	b.n	801c3ac <tcp_alloc+0x104>
  if (inactive != NULL) {
 801c3ca:	b11b      	cbz	r3, 801c3d4 <tcp_alloc+0x12c>
  tcp_abandon(pcb, 1);
 801c3cc:	2101      	movs	r1, #1
 801c3ce:	4618      	mov	r0, r3
 801c3d0:	f7ff fe32 	bl	801c038 <tcp_abandon>
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801c3d4:	f240 724b 	movw	r2, #1867	; 0x74b
 801c3d8:	4905      	ldr	r1, [pc, #20]	; (801c3f0 <tcp_alloc+0x148>)
 801c3da:	2002      	movs	r0, #2
 801c3dc:	f7fd ff2a 	bl	801a234 <memp_malloc_fn>
  if (pcb != NULL) {
 801c3e0:	4603      	mov	r3, r0
 801c3e2:	2800      	cmp	r0, #0
 801c3e4:	f47f af6a 	bne.w	801c2bc <tcp_alloc+0x14>
}
 801c3e8:	4618      	mov	r0, r3
 801c3ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801c3ec:	227f      	movs	r2, #127	; 0x7f
 801c3ee:	e7d4      	b.n	801c39a <tcp_alloc+0xf2>
 801c3f0:	08043710 	.word	0x08043710
 801c3f4:	2002e3a1 	.word	0x2002e3a1
 801c3f8:	2002e39c 	.word	0x2002e39c
 801c3fc:	006ddd00 	.word	0x006ddd00
 801c400:	0801c605 	.word	0x0801c605
 801c404:	0218ffff 	.word	0x0218ffff
 801c408:	04300001 	.word	0x04300001
 801c40c:	08600860 	.word	0x08600860
 801c410:	2002e38c 	.word	0x2002e38c
 801c414:	2002e3a4 	.word	0x2002e3a4

0801c418 <tcp_new>:
  return tcp_alloc(TCP_PRIO_NORMAL);
 801c418:	2040      	movs	r0, #64	; 0x40
 801c41a:	f7ff bf45 	b.w	801c2a8 <tcp_alloc>
 801c41e:	bf00      	nop

0801c420 <tcp_new_ip_type>:
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801c420:	2040      	movs	r0, #64	; 0x40
 801c422:	f7ff bf41 	b.w	801c2a8 <tcp_alloc>
 801c426:	bf00      	nop

0801c428 <tcp_close_shutdown>:
{
 801c428:	b530      	push	{r4, r5, lr}
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c42a:	4604      	mov	r4, r0
{
 801c42c:	b085      	sub	sp, #20
 801c42e:	460d      	mov	r5, r1
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c430:	2800      	cmp	r0, #0
 801c432:	d06a      	beq.n	801c50a <tcp_close_shutdown+0xe2>
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801c434:	7d23      	ldrb	r3, [r4, #20]
 801c436:	b11d      	cbz	r5, 801c440 <tcp_close_shutdown+0x18>
 801c438:	2b04      	cmp	r3, #4
 801c43a:	d00c      	beq.n	801c456 <tcp_close_shutdown+0x2e>
 801c43c:	2b07      	cmp	r3, #7
 801c43e:	d00a      	beq.n	801c456 <tcp_close_shutdown+0x2e>
  switch (pcb->state) {
 801c440:	2b01      	cmp	r3, #1
 801c442:	d06a      	beq.n	801c51a <tcp_close_shutdown+0xf2>
 801c444:	2b02      	cmp	r3, #2
 801c446:	d030      	beq.n	801c4aa <tcp_close_shutdown+0x82>
 801c448:	b333      	cbz	r3, 801c498 <tcp_close_shutdown+0x70>
      return tcp_close_shutdown_fin(pcb);
 801c44a:	4620      	mov	r0, r4
}
 801c44c:	b005      	add	sp, #20
 801c44e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      return tcp_close_shutdown_fin(pcb);
 801c452:	f7fe bf3d 	b.w	801b2d0 <tcp_close_shutdown_fin>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c456:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c458:	2a00      	cmp	r2, #0
 801c45a:	d037      	beq.n	801c4cc <tcp_close_shutdown+0xa4>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c45c:	8b63      	ldrh	r3, [r4, #26]
 801c45e:	06db      	lsls	r3, r3, #27
 801c460:	f140 8084 	bpl.w	801c56c <tcp_close_shutdown+0x144>
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801c464:	8b21      	ldrh	r1, [r4, #24]
 801c466:	1d20      	adds	r0, r4, #4
 801c468:	8ae2      	ldrh	r2, [r4, #22]
 801c46a:	4623      	mov	r3, r4
 801c46c:	e9cd 2101 	strd	r2, r1, [sp, #4]
 801c470:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801c472:	6d21      	ldr	r1, [r4, #80]	; 0x50
 801c474:	9000      	str	r0, [sp, #0]
 801c476:	4620      	mov	r0, r4
 801c478:	f002 fd62 	bl	801ef40 <tcp_rst>
      tcp_pcb_purge(pcb);
 801c47c:	4620      	mov	r0, r4
 801c47e:	f7ff fa6b 	bl	801b958 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801c482:	4a45      	ldr	r2, [pc, #276]	; (801c598 <tcp_close_shutdown+0x170>)
 801c484:	6813      	ldr	r3, [r2, #0]
 801c486:	42a3      	cmp	r3, r4
 801c488:	d030      	beq.n	801c4ec <tcp_close_shutdown+0xc4>
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d030      	beq.n	801c4f0 <tcp_close_shutdown+0xc8>
 801c48e:	68da      	ldr	r2, [r3, #12]
 801c490:	42a2      	cmp	r2, r4
 801c492:	d068      	beq.n	801c566 <tcp_close_shutdown+0x13e>
 801c494:	4613      	mov	r3, r2
 801c496:	e7f8      	b.n	801c48a <tcp_close_shutdown+0x62>
      if (pcb->local_port != 0) {
 801c498:	8ae3      	ldrh	r3, [r4, #22]
 801c49a:	b9e3      	cbnz	r3, 801c4d6 <tcp_close_shutdown+0xae>
  memp_free(MEMP_TCP_PCB, pcb);
 801c49c:	4621      	mov	r1, r4
 801c49e:	2002      	movs	r0, #2
 801c4a0:	f7fd fefe 	bl	801a2a0 <memp_free>
}
 801c4a4:	2000      	movs	r0, #0
 801c4a6:	b005      	add	sp, #20
 801c4a8:	bd30      	pop	{r4, r5, pc}
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c4aa:	4621      	mov	r1, r4
 801c4ac:	483a      	ldr	r0, [pc, #232]	; (801c598 <tcp_close_shutdown+0x170>)
 801c4ae:	f7ff fd53 	bl	801bf58 <tcp_pcb_remove>
 801c4b2:	2101      	movs	r1, #1
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c4b4:	7d23      	ldrb	r3, [r4, #20]
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c4b6:	4a39      	ldr	r2, [pc, #228]	; (801c59c <tcp_close_shutdown+0x174>)
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c4b8:	428b      	cmp	r3, r1
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801c4ba:	7011      	strb	r1, [r2, #0]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c4bc:	d1ee      	bne.n	801c49c <tcp_close_shutdown+0x74>
 801c4be:	4b38      	ldr	r3, [pc, #224]	; (801c5a0 <tcp_close_shutdown+0x178>)
 801c4c0:	22d4      	movs	r2, #212	; 0xd4
 801c4c2:	4938      	ldr	r1, [pc, #224]	; (801c5a4 <tcp_close_shutdown+0x17c>)
 801c4c4:	4838      	ldr	r0, [pc, #224]	; (801c5a8 <tcp_close_shutdown+0x180>)
 801c4c6:	f008 fcc5 	bl	8024e54 <iprintf>
 801c4ca:	e7e7      	b.n	801c49c <tcp_close_shutdown+0x74>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801c4cc:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801c4ce:	f5b2 6f06 	cmp.w	r2, #2144	; 0x860
 801c4d2:	d0b5      	beq.n	801c440 <tcp_close_shutdown+0x18>
 801c4d4:	e7c2      	b.n	801c45c <tcp_close_shutdown+0x34>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c4d6:	4a35      	ldr	r2, [pc, #212]	; (801c5ac <tcp_close_shutdown+0x184>)
 801c4d8:	6813      	ldr	r3, [r2, #0]
 801c4da:	42a3      	cmp	r3, r4
 801c4dc:	d051      	beq.n	801c582 <tcp_close_shutdown+0x15a>
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	d03e      	beq.n	801c560 <tcp_close_shutdown+0x138>
 801c4e2:	68da      	ldr	r2, [r3, #12]
 801c4e4:	42a2      	cmp	r2, r4
 801c4e6:	d039      	beq.n	801c55c <tcp_close_shutdown+0x134>
 801c4e8:	4613      	mov	r3, r2
 801c4ea:	e7f8      	b.n	801c4de <tcp_close_shutdown+0xb6>
      TCP_RMV_ACTIVE(pcb);
 801c4ec:	68e3      	ldr	r3, [r4, #12]
 801c4ee:	6013      	str	r3, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c4f0:	4b2f      	ldr	r3, [pc, #188]	; (801c5b0 <tcp_close_shutdown+0x188>)
      TCP_RMV_ACTIVE(pcb);
 801c4f2:	2000      	movs	r0, #0
 801c4f4:	4a29      	ldr	r2, [pc, #164]	; (801c59c <tcp_close_shutdown+0x174>)
 801c4f6:	2101      	movs	r1, #1
      if (tcp_input_pcb == pcb) {
 801c4f8:	681b      	ldr	r3, [r3, #0]
      TCP_RMV_ACTIVE(pcb);
 801c4fa:	60e0      	str	r0, [r4, #12]
      if (tcp_input_pcb == pcb) {
 801c4fc:	42a3      	cmp	r3, r4
      TCP_RMV_ACTIVE(pcb);
 801c4fe:	7011      	strb	r1, [r2, #0]
      if (tcp_input_pcb == pcb) {
 801c500:	d03c      	beq.n	801c57c <tcp_close_shutdown+0x154>
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801c502:	7d23      	ldrb	r3, [r4, #20]
 801c504:	2b01      	cmp	r3, #1
 801c506:	d1c9      	bne.n	801c49c <tcp_close_shutdown+0x74>
 801c508:	e7d9      	b.n	801c4be <tcp_close_shutdown+0x96>
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 801c50a:	4b25      	ldr	r3, [pc, #148]	; (801c5a0 <tcp_close_shutdown+0x178>)
 801c50c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 801c510:	4928      	ldr	r1, [pc, #160]	; (801c5b4 <tcp_close_shutdown+0x18c>)
 801c512:	4825      	ldr	r0, [pc, #148]	; (801c5a8 <tcp_close_shutdown+0x180>)
 801c514:	f008 fc9e 	bl	8024e54 <iprintf>
 801c518:	e78c      	b.n	801c434 <tcp_close_shutdown+0xc>
 801c51a:	4927      	ldr	r1, [pc, #156]	; (801c5b8 <tcp_close_shutdown+0x190>)
      pcb->listener = NULL;
 801c51c:	2000      	movs	r0, #0
  switch (pcb->state) {
 801c51e:	4b23      	ldr	r3, [pc, #140]	; (801c5ac <tcp_close_shutdown+0x184>)
 801c520:	f101 0508 	add.w	r5, r1, #8
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c524:	681b      	ldr	r3, [r3, #0]
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c526:	b133      	cbz	r3, 801c536 <tcp_close_shutdown+0x10e>
    if (pcb->listener == lpcb) {
 801c528:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 801c52a:	4294      	cmp	r4, r2
      pcb->listener = NULL;
 801c52c:	bf08      	it	eq
 801c52e:	67d8      	streq	r0, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801c530:	68db      	ldr	r3, [r3, #12]
 801c532:	2b00      	cmp	r3, #0
 801c534:	d1f8      	bne.n	801c528 <tcp_close_shutdown+0x100>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801c536:	42a9      	cmp	r1, r5
 801c538:	d002      	beq.n	801c540 <tcp_close_shutdown+0x118>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801c53a:	f851 3b04 	ldr.w	r3, [r1], #4
 801c53e:	e7f1      	b.n	801c524 <tcp_close_shutdown+0xfc>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801c540:	4621      	mov	r1, r4
 801c542:	481e      	ldr	r0, [pc, #120]	; (801c5bc <tcp_close_shutdown+0x194>)
 801c544:	f7ff fd08 	bl	801bf58 <tcp_pcb_remove>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c548:	7d23      	ldrb	r3, [r4, #20]
 801c54a:	2b01      	cmp	r3, #1
 801c54c:	d01c      	beq.n	801c588 <tcp_close_shutdown+0x160>
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801c54e:	4621      	mov	r1, r4
 801c550:	2003      	movs	r0, #3
 801c552:	f7fd fea5 	bl	801a2a0 <memp_free>
}
 801c556:	2000      	movs	r0, #0
 801c558:	b005      	add	sp, #20
 801c55a:	bd30      	pop	{r4, r5, pc}
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c55c:	68e2      	ldr	r2, [r4, #12]
 801c55e:	60da      	str	r2, [r3, #12]
 801c560:	2300      	movs	r3, #0
 801c562:	60e3      	str	r3, [r4, #12]
 801c564:	e79a      	b.n	801c49c <tcp_close_shutdown+0x74>
      TCP_RMV_ACTIVE(pcb);
 801c566:	68e2      	ldr	r2, [r4, #12]
 801c568:	60da      	str	r2, [r3, #12]
 801c56a:	e7c1      	b.n	801c4f0 <tcp_close_shutdown+0xc8>
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801c56c:	4b0c      	ldr	r3, [pc, #48]	; (801c5a0 <tcp_close_shutdown+0x178>)
 801c56e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801c572:	4913      	ldr	r1, [pc, #76]	; (801c5c0 <tcp_close_shutdown+0x198>)
 801c574:	480c      	ldr	r0, [pc, #48]	; (801c5a8 <tcp_close_shutdown+0x180>)
 801c576:	f008 fc6d 	bl	8024e54 <iprintf>
 801c57a:	e773      	b.n	801c464 <tcp_close_shutdown+0x3c>
        tcp_trigger_input_pcb_close();
 801c57c:	f001 fd9e 	bl	801e0bc <tcp_trigger_input_pcb_close>
 801c580:	e790      	b.n	801c4a4 <tcp_close_shutdown+0x7c>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801c582:	68e3      	ldr	r3, [r4, #12]
 801c584:	6013      	str	r3, [r2, #0]
 801c586:	e7eb      	b.n	801c560 <tcp_close_shutdown+0x138>
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 801c588:	4b05      	ldr	r3, [pc, #20]	; (801c5a0 <tcp_close_shutdown+0x178>)
 801c58a:	22df      	movs	r2, #223	; 0xdf
 801c58c:	490d      	ldr	r1, [pc, #52]	; (801c5c4 <tcp_close_shutdown+0x19c>)
 801c58e:	4806      	ldr	r0, [pc, #24]	; (801c5a8 <tcp_close_shutdown+0x180>)
 801c590:	f008 fc60 	bl	8024e54 <iprintf>
 801c594:	e7db      	b.n	801c54e <tcp_close_shutdown+0x126>
 801c596:	bf00      	nop
 801c598:	2002e38c 	.word	0x2002e38c
 801c59c:	2002e390 	.word	0x2002e390
 801c5a0:	08043710 	.word	0x08043710
 801c5a4:	0804374c 	.word	0x0804374c
 801c5a8:	08029a64 	.word	0x08029a64
 801c5ac:	2002e394 	.word	0x2002e394
 801c5b0:	2002e3d0 	.word	0x2002e3d0
 801c5b4:	08043cec 	.word	0x08043cec
 801c5b8:	08043dfc 	.word	0x08043dfc
 801c5bc:	2002e398 	.word	0x2002e398
 801c5c0:	08043d0c 	.word	0x08043d0c
 801c5c4:	08043d28 	.word	0x08043d28

0801c5c8 <tcp_close>:
{
 801c5c8:	b508      	push	{r3, lr}
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c5ca:	b158      	cbz	r0, 801c5e4 <tcp_close+0x1c>
  if (pcb->state != LISTEN) {
 801c5cc:	7d03      	ldrb	r3, [r0, #20]
 801c5ce:	2b01      	cmp	r3, #1
 801c5d0:	d003      	beq.n	801c5da <tcp_close+0x12>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c5d2:	8b43      	ldrh	r3, [r0, #26]
 801c5d4:	f043 0310 	orr.w	r3, r3, #16
 801c5d8:	8343      	strh	r3, [r0, #26]
  return tcp_close_shutdown(pcb, 1);
 801c5da:	2101      	movs	r1, #1
}
 801c5dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  return tcp_close_shutdown(pcb, 1);
 801c5e0:	f7ff bf22 	b.w	801c428 <tcp_close_shutdown>
  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801c5e4:	4b04      	ldr	r3, [pc, #16]	; (801c5f8 <tcp_close+0x30>)
 801c5e6:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801c5ea:	4904      	ldr	r1, [pc, #16]	; (801c5fc <tcp_close+0x34>)
 801c5ec:	4804      	ldr	r0, [pc, #16]	; (801c600 <tcp_close+0x38>)
 801c5ee:	f008 fc31 	bl	8024e54 <iprintf>
}
 801c5f2:	f06f 000f 	mvn.w	r0, #15
 801c5f6:	bd08      	pop	{r3, pc}
 801c5f8:	08043710 	.word	0x08043710
 801c5fc:	08043d44 	.word	0x08043d44
 801c600:	08029a64 	.word	0x08029a64

0801c604 <tcp_recv_null>:
{
 801c604:	b510      	push	{r4, lr}
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c606:	b1c9      	cbz	r1, 801c63c <tcp_recv_null+0x38>
  if (p != NULL) {
 801c608:	4614      	mov	r4, r2
 801c60a:	4608      	mov	r0, r1
 801c60c:	b13a      	cbz	r2, 801c61e <tcp_recv_null+0x1a>
    tcp_recved(pcb, p->tot_len);
 801c60e:	8911      	ldrh	r1, [r2, #8]
 801c610:	f7fe ffde 	bl	801b5d0 <tcp_recved>
    pbuf_free(p);
 801c614:	4620      	mov	r0, r4
 801c616:	f7fe fb5b 	bl	801acd0 <pbuf_free>
  return ERR_OK;
 801c61a:	2000      	movs	r0, #0
}
 801c61c:	bd10      	pop	{r4, pc}
  } else if (err == ERR_OK) {
 801c61e:	b10b      	cbz	r3, 801c624 <tcp_recv_null+0x20>
  return ERR_OK;
 801c620:	4610      	mov	r0, r2
}
 801c622:	bd10      	pop	{r4, pc}
  if (pcb->state != LISTEN) {
 801c624:	7d0b      	ldrb	r3, [r1, #20]
 801c626:	2b01      	cmp	r3, #1
 801c628:	d003      	beq.n	801c632 <tcp_recv_null+0x2e>
    tcp_set_flags(pcb, TF_RXCLOSED);
 801c62a:	8b4b      	ldrh	r3, [r1, #26]
 801c62c:	f043 0310 	orr.w	r3, r3, #16
 801c630:	834b      	strh	r3, [r1, #26]
  return tcp_close_shutdown(pcb, 1);
 801c632:	2101      	movs	r1, #1
}
 801c634:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return tcp_close_shutdown(pcb, 1);
 801c638:	f7ff bef6 	b.w	801c428 <tcp_close_shutdown>
  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801c63c:	4b04      	ldr	r3, [pc, #16]	; (801c650 <tcp_recv_null+0x4c>)
 801c63e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801c642:	4904      	ldr	r1, [pc, #16]	; (801c654 <tcp_recv_null+0x50>)
 801c644:	4804      	ldr	r0, [pc, #16]	; (801c658 <tcp_recv_null+0x54>)
 801c646:	f008 fc05 	bl	8024e54 <iprintf>
 801c64a:	f06f 000f 	mvn.w	r0, #15
}
 801c64e:	bd10      	pop	{r4, pc}
 801c650:	08043710 	.word	0x08043710
 801c654:	08043d5c 	.word	0x08043d5c
 801c658:	08029a64 	.word	0x08029a64

0801c65c <tcp_process_refused_data>:
{
 801c65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c65e:	b378      	cbz	r0, 801c6c0 <tcp_process_refused_data+0x64>
    u8_t refused_flags = pcb->refused_data->flags;
 801c660:	6f85      	ldr	r5, [r0, #120]	; 0x78
    pcb->refused_data = NULL;
 801c662:	2300      	movs	r3, #0
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c664:	f8d0 6084 	ldr.w	r6, [r0, #132]	; 0x84
 801c668:	4604      	mov	r4, r0
    u8_t refused_flags = pcb->refused_data->flags;
 801c66a:	7b6f      	ldrb	r7, [r5, #13]
    pcb->refused_data = NULL;
 801c66c:	6783      	str	r3, [r0, #120]	; 0x78
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801c66e:	b156      	cbz	r6, 801c686 <tcp_process_refused_data+0x2a>
 801c670:	4601      	mov	r1, r0
 801c672:	462a      	mov	r2, r5
 801c674:	6900      	ldr	r0, [r0, #16]
 801c676:	47b0      	blx	r6
    if (err == ERR_OK) {
 801c678:	b158      	cbz	r0, 801c692 <tcp_process_refused_data+0x36>
    } else if (err == ERR_ABRT) {
 801c67a:	300d      	adds	r0, #13
 801c67c:	d01d      	beq.n	801c6ba <tcp_process_refused_data+0x5e>
      return ERR_INPROGRESS;
 801c67e:	f06f 0004 	mvn.w	r0, #4
      pcb->refused_data = refused_data;
 801c682:	67a5      	str	r5, [r4, #120]	; 0x78
}
 801c684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_recved(pcb, p->tot_len);
 801c686:	8929      	ldrh	r1, [r5, #8]
 801c688:	f7fe ffa2 	bl	801b5d0 <tcp_recved>
    pbuf_free(p);
 801c68c:	4628      	mov	r0, r5
 801c68e:	f7fe fb1f 	bl	801acd0 <pbuf_free>
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801c692:	06bb      	lsls	r3, r7, #26
 801c694:	d50f      	bpl.n	801c6b6 <tcp_process_refused_data+0x5a>
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801c696:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801c698:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801c69c:	d001      	beq.n	801c6a2 <tcp_process_refused_data+0x46>
          pcb->rcv_wnd++;
 801c69e:	3301      	adds	r3, #1
 801c6a0:	8523      	strh	r3, [r4, #40]	; 0x28
        TCP_EVENT_CLOSED(pcb, err);
 801c6a2:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 801c6a6:	b135      	cbz	r5, 801c6b6 <tcp_process_refused_data+0x5a>
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4621      	mov	r1, r4
 801c6ac:	6920      	ldr	r0, [r4, #16]
 801c6ae:	461a      	mov	r2, r3
 801c6b0:	47a8      	blx	r5
        if (err == ERR_ABRT) {
 801c6b2:	300d      	adds	r0, #13
 801c6b4:	d001      	beq.n	801c6ba <tcp_process_refused_data+0x5e>
  return ERR_OK;
 801c6b6:	2000      	movs	r0, #0
}
 801c6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          return ERR_ABRT;
 801c6ba:	f06f 000c 	mvn.w	r0, #12
}
 801c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801c6c0:	4b04      	ldr	r3, [pc, #16]	; (801c6d4 <tcp_process_refused_data+0x78>)
 801c6c2:	f240 6209 	movw	r2, #1545	; 0x609
 801c6c6:	4904      	ldr	r1, [pc, #16]	; (801c6d8 <tcp_process_refused_data+0x7c>)
 801c6c8:	4804      	ldr	r0, [pc, #16]	; (801c6dc <tcp_process_refused_data+0x80>)
 801c6ca:	f008 fbc3 	bl	8024e54 <iprintf>
 801c6ce:	f06f 000f 	mvn.w	r0, #15
}
 801c6d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6d4:	08043710 	.word	0x08043710
 801c6d8:	08043d78 	.word	0x08043d78
 801c6dc:	08029a64 	.word	0x08029a64

0801c6e0 <tcp_fasttmr>:
{
 801c6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ++tcp_timer_ctr;
 801c6e4:	4d1c      	ldr	r5, [pc, #112]	; (801c758 <tcp_fasttmr+0x78>)
        tcp_active_pcbs_changed = 0;
 801c6e6:	2700      	movs	r7, #0
 801c6e8:	f8df 8074 	ldr.w	r8, [pc, #116]	; 801c760 <tcp_fasttmr+0x80>
  ++tcp_timer_ctr;
 801c6ec:	782b      	ldrb	r3, [r5, #0]
        tcp_active_pcbs_changed = 0;
 801c6ee:	4e1b      	ldr	r6, [pc, #108]	; (801c75c <tcp_fasttmr+0x7c>)
  ++tcp_timer_ctr;
 801c6f0:	3301      	adds	r3, #1
 801c6f2:	702b      	strb	r3, [r5, #0]
  pcb = tcp_active_pcbs;
 801c6f4:	f8d8 4000 	ldr.w	r4, [r8]
  while (pcb != NULL) {
 801c6f8:	b1bc      	cbz	r4, 801c72a <tcp_fasttmr+0x4a>
    if (pcb->last_timer != tcp_timer_ctr) {
 801c6fa:	782a      	ldrb	r2, [r5, #0]
 801c6fc:	7fa3      	ldrb	r3, [r4, #30]
 801c6fe:	4293      	cmp	r3, r2
 801c700:	d015      	beq.n	801c72e <tcp_fasttmr+0x4e>
      if (pcb->flags & TF_ACK_DELAY) {
 801c702:	8b63      	ldrh	r3, [r4, #26]
      pcb->last_timer = tcp_timer_ctr;
 801c704:	77a2      	strb	r2, [r4, #30]
      if (pcb->flags & TF_ACK_DELAY) {
 801c706:	07d9      	lsls	r1, r3, #31
 801c708:	d41a      	bmi.n	801c740 <tcp_fasttmr+0x60>
      if (pcb->flags & TF_CLOSEPEND) {
 801c70a:	071a      	lsls	r2, r3, #28
 801c70c:	d411      	bmi.n	801c732 <tcp_fasttmr+0x52>
      if (pcb->refused_data != NULL) {
 801c70e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
      next = pcb->next;
 801c710:	f8d4 900c 	ldr.w	r9, [r4, #12]
      if (pcb->refused_data != NULL) {
 801c714:	b133      	cbz	r3, 801c724 <tcp_fasttmr+0x44>
        tcp_process_refused_data(pcb);
 801c716:	4620      	mov	r0, r4
        tcp_active_pcbs_changed = 0;
 801c718:	7037      	strb	r7, [r6, #0]
        tcp_process_refused_data(pcb);
 801c71a:	f7ff ff9f 	bl	801c65c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801c71e:	7833      	ldrb	r3, [r6, #0]
 801c720:	2b00      	cmp	r3, #0
 801c722:	d1e7      	bne.n	801c6f4 <tcp_fasttmr+0x14>
      pcb = next;
 801c724:	464c      	mov	r4, r9
  while (pcb != NULL) {
 801c726:	2c00      	cmp	r4, #0
 801c728:	d1e7      	bne.n	801c6fa <tcp_fasttmr+0x1a>
}
 801c72a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      pcb = pcb->next;
 801c72e:	68e4      	ldr	r4, [r4, #12]
 801c730:	e7e2      	b.n	801c6f8 <tcp_fasttmr+0x18>
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c732:	f023 0308 	bic.w	r3, r3, #8
        tcp_close_shutdown_fin(pcb);
 801c736:	4620      	mov	r0, r4
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801c738:	8363      	strh	r3, [r4, #26]
        tcp_close_shutdown_fin(pcb);
 801c73a:	f7fe fdc9 	bl	801b2d0 <tcp_close_shutdown_fin>
 801c73e:	e7e6      	b.n	801c70e <tcp_fasttmr+0x2e>
        tcp_ack_now(pcb);
 801c740:	f043 0302 	orr.w	r3, r3, #2
        tcp_output(pcb);
 801c744:	4620      	mov	r0, r4
        tcp_ack_now(pcb);
 801c746:	8363      	strh	r3, [r4, #26]
        tcp_output(pcb);
 801c748:	f002 fc74 	bl	801f034 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801c74c:	8b63      	ldrh	r3, [r4, #26]
 801c74e:	f023 0303 	bic.w	r3, r3, #3
 801c752:	b29b      	uxth	r3, r3
 801c754:	8363      	strh	r3, [r4, #26]
 801c756:	e7d8      	b.n	801c70a <tcp_fasttmr+0x2a>
 801c758:	2002e3a1 	.word	0x2002e3a1
 801c75c:	2002e390 	.word	0x2002e390
 801c760:	2002e38c 	.word	0x2002e38c

0801c764 <tcp_tmr>:
{
 801c764:	b508      	push	{r3, lr}
  tcp_fasttmr();
 801c766:	f7ff ffbb 	bl	801c6e0 <tcp_fasttmr>
  if (++tcp_timer & 1) {
 801c76a:	4a06      	ldr	r2, [pc, #24]	; (801c784 <tcp_tmr+0x20>)
 801c76c:	7813      	ldrb	r3, [r2, #0]
 801c76e:	3301      	adds	r3, #1
 801c770:	b2db      	uxtb	r3, r3
 801c772:	7013      	strb	r3, [r2, #0]
 801c774:	07db      	lsls	r3, r3, #31
 801c776:	d400      	bmi.n	801c77a <tcp_tmr+0x16>
}
 801c778:	bd08      	pop	{r3, pc}
 801c77a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    tcp_slowtmr();
 801c77e:	f7ff b93d 	b.w	801b9fc <tcp_slowtmr>
 801c782:	bf00      	nop
 801c784:	2002e3a0 	.word	0x2002e3a0

0801c788 <tcp_next_iss>:
{
 801c788:	b508      	push	{r3, lr}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c78a:	b130      	cbz	r0, 801c79a <tcp_next_iss+0x12>
  iss += tcp_ticks;       /* XXX */
 801c78c:	4b07      	ldr	r3, [pc, #28]	; (801c7ac <tcp_next_iss+0x24>)
 801c78e:	4a08      	ldr	r2, [pc, #32]	; (801c7b0 <tcp_next_iss+0x28>)
 801c790:	6818      	ldr	r0, [r3, #0]
 801c792:	6812      	ldr	r2, [r2, #0]
 801c794:	4410      	add	r0, r2
 801c796:	6018      	str	r0, [r3, #0]
}
 801c798:	bd08      	pop	{r3, pc}
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801c79a:	4b06      	ldr	r3, [pc, #24]	; (801c7b4 <tcp_next_iss+0x2c>)
 801c79c:	f640 02af 	movw	r2, #2223	; 0x8af
 801c7a0:	4905      	ldr	r1, [pc, #20]	; (801c7b8 <tcp_next_iss+0x30>)
 801c7a2:	4806      	ldr	r0, [pc, #24]	; (801c7bc <tcp_next_iss+0x34>)
 801c7a4:	f008 fb56 	bl	8024e54 <iprintf>
 801c7a8:	e7f0      	b.n	801c78c <tcp_next_iss+0x4>
 801c7aa:	bf00      	nop
 801c7ac:	200003f0 	.word	0x200003f0
 801c7b0:	2002e39c 	.word	0x2002e39c
 801c7b4:	08043710 	.word	0x08043710
 801c7b8:	08043da0 	.word	0x08043da0
 801c7bc:	08029a64 	.word	0x08029a64

0801c7c0 <tcp_eff_send_mss_netif>:
{
 801c7c0:	b538      	push	{r3, r4, r5, lr}
 801c7c2:	4605      	mov	r5, r0
 801c7c4:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c7c6:	b172      	cbz	r2, 801c7e6 <tcp_eff_send_mss_netif+0x26>
    if (outif == NULL) {
 801c7c8:	b144      	cbz	r4, 801c7dc <tcp_eff_send_mss_netif+0x1c>
    mtu = outif->mtu;
 801c7ca:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
  if (mtu != 0) {
 801c7cc:	b133      	cbz	r3, 801c7dc <tcp_eff_send_mss_netif+0x1c>
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801c7ce:	2b28      	cmp	r3, #40	; 0x28
 801c7d0:	d906      	bls.n	801c7e0 <tcp_eff_send_mss_netif+0x20>
 801c7d2:	3b28      	subs	r3, #40	; 0x28
    sendmss = LWIP_MIN(sendmss, mss_s);
 801c7d4:	b29b      	uxth	r3, r3
 801c7d6:	429d      	cmp	r5, r3
 801c7d8:	bf28      	it	cs
 801c7da:	461d      	movcs	r5, r3
}
 801c7dc:	4628      	mov	r0, r5
 801c7de:	bd38      	pop	{r3, r4, r5, pc}
 801c7e0:	2500      	movs	r5, #0
 801c7e2:	4628      	mov	r0, r5
 801c7e4:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801c7e6:	4b04      	ldr	r3, [pc, #16]	; (801c7f8 <tcp_eff_send_mss_netif+0x38>)
 801c7e8:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801c7ec:	4903      	ldr	r1, [pc, #12]	; (801c7fc <tcp_eff_send_mss_netif+0x3c>)
 801c7ee:	4804      	ldr	r0, [pc, #16]	; (801c800 <tcp_eff_send_mss_netif+0x40>)
 801c7f0:	f008 fb30 	bl	8024e54 <iprintf>
 801c7f4:	e7e8      	b.n	801c7c8 <tcp_eff_send_mss_netif+0x8>
 801c7f6:	bf00      	nop
 801c7f8:	08043710 	.word	0x08043710
 801c7fc:	08043dbc 	.word	0x08043dbc
 801c800:	08029a64 	.word	0x08029a64

0801c804 <tcp_netif_ip_addr_changed>:
  if (!ip_addr_isany(old_addr)) {
 801c804:	b308      	cbz	r0, 801c84a <tcp_netif_ip_addr_changed+0x46>
{
 801c806:	b538      	push	{r3, r4, r5, lr}
  if (!ip_addr_isany(old_addr)) {
 801c808:	6803      	ldr	r3, [r0, #0]
 801c80a:	4604      	mov	r4, r0
 801c80c:	b903      	cbnz	r3, 801c810 <tcp_netif_ip_addr_changed+0xc>
}
 801c80e:	bd38      	pop	{r3, r4, r5, pc}
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801c810:	4b0e      	ldr	r3, [pc, #56]	; (801c84c <tcp_netif_ip_addr_changed+0x48>)
 801c812:	460d      	mov	r5, r1
 801c814:	6819      	ldr	r1, [r3, #0]
 801c816:	f7ff fd01 	bl	801c21c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801c81a:	4b0d      	ldr	r3, [pc, #52]	; (801c850 <tcp_netif_ip_addr_changed+0x4c>)
 801c81c:	4620      	mov	r0, r4
 801c81e:	6819      	ldr	r1, [r3, #0]
 801c820:	f7ff fcfc 	bl	801c21c <tcp_netif_ip_addr_changed_pcblist>
    if (!ip_addr_isany(new_addr)) {
 801c824:	2d00      	cmp	r5, #0
 801c826:	d0f2      	beq.n	801c80e <tcp_netif_ip_addr_changed+0xa>
 801c828:	682b      	ldr	r3, [r5, #0]
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	d0ef      	beq.n	801c80e <tcp_netif_ip_addr_changed+0xa>
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c82e:	4b09      	ldr	r3, [pc, #36]	; (801c854 <tcp_netif_ip_addr_changed+0x50>)
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	2b00      	cmp	r3, #0
 801c834:	d0eb      	beq.n	801c80e <tcp_netif_ip_addr_changed+0xa>
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801c836:	6819      	ldr	r1, [r3, #0]
 801c838:	6822      	ldr	r2, [r4, #0]
 801c83a:	4291      	cmp	r1, r2
 801c83c:	d101      	bne.n	801c842 <tcp_netif_ip_addr_changed+0x3e>
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801c83e:	682a      	ldr	r2, [r5, #0]
 801c840:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801c842:	68db      	ldr	r3, [r3, #12]
 801c844:	2b00      	cmp	r3, #0
 801c846:	d1f6      	bne.n	801c836 <tcp_netif_ip_addr_changed+0x32>
}
 801c848:	bd38      	pop	{r3, r4, r5, pc}
 801c84a:	4770      	bx	lr
 801c84c:	2002e38c 	.word	0x2002e38c
 801c850:	2002e394 	.word	0x2002e394
 801c854:	2002e398 	.word	0x2002e398

0801c858 <tcp_free_ooseq>:
{
 801c858:	b570      	push	{r4, r5, r6, lr}
  if (pcb->ooseq) {
 801c85a:	6f44      	ldr	r4, [r0, #116]	; 0x74
 801c85c:	b16c      	cbz	r4, 801c87a <tcp_free_ooseq+0x22>
 801c85e:	4606      	mov	r6, r0
      pbuf_free(seg->p);
 801c860:	4625      	mov	r5, r4
    struct tcp_seg *next = seg->next;
 801c862:	6824      	ldr	r4, [r4, #0]
    if (seg->p != NULL) {
 801c864:	6868      	ldr	r0, [r5, #4]
 801c866:	b108      	cbz	r0, 801c86c <tcp_free_ooseq+0x14>
      pbuf_free(seg->p);
 801c868:	f7fe fa32 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_TCP_SEG, seg);
 801c86c:	4629      	mov	r1, r5
 801c86e:	2004      	movs	r0, #4
 801c870:	f7fd fd16 	bl	801a2a0 <memp_free>
  while (seg != NULL) {
 801c874:	2c00      	cmp	r4, #0
 801c876:	d1f3      	bne.n	801c860 <tcp_free_ooseq+0x8>
    pcb->ooseq = NULL;
 801c878:	6774      	str	r4, [r6, #116]	; 0x74
}
 801c87a:	bd70      	pop	{r4, r5, r6, pc}

0801c87c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c87e:	4605      	mov	r5, r0
{
 801c880:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c882:	2800      	cmp	r0, #0
 801c884:	d03e      	beq.n	801c904 <tcp_oos_insert_segment+0x88>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c886:	68eb      	ldr	r3, [r5, #12]
 801c888:	8998      	ldrh	r0, [r3, #12]
 801c88a:	f7fc f9e5 	bl	8018c58 <lwip_htons>
 801c88e:	07c2      	lsls	r2, r0, #31
 801c890:	d432      	bmi.n	801c8f8 <tcp_oos_insert_segment+0x7c>
 801c892:	4e20      	ldr	r6, [pc, #128]	; (801c914 <tcp_oos_insert_segment+0x98>)
 801c894:	e005      	b.n	801c8a2 <tcp_oos_insert_segment+0x26>
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
      }
      old_seg = next;
      next = next->next;
 801c896:	6827      	ldr	r7, [r4, #0]
      tcp_seg_free(old_seg);
 801c898:	4620      	mov	r0, r4
 801c89a:	f7fe ff95 	bl	801b7c8 <tcp_seg_free>
    while (next &&
 801c89e:	463c      	mov	r4, r7
 801c8a0:	b1ef      	cbz	r7, 801c8de <tcp_oos_insert_segment+0x62>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c8a2:	68e1      	ldr	r1, [r4, #12]
 801c8a4:	8923      	ldrh	r3, [r4, #8]
 801c8a6:	6837      	ldr	r7, [r6, #0]
 801c8a8:	892a      	ldrh	r2, [r5, #8]
 801c8aa:	6848      	ldr	r0, [r1, #4]
 801c8ac:	443a      	add	r2, r7
 801c8ae:	4403      	add	r3, r0
 801c8b0:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c8b2:	2b00      	cmp	r3, #0
 801c8b4:	db15      	blt.n	801c8e2 <tcp_oos_insert_segment+0x66>
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c8b6:	8988      	ldrh	r0, [r1, #12]
 801c8b8:	f7fc f9ce 	bl	8018c58 <lwip_htons>
 801c8bc:	07c3      	lsls	r3, r0, #31
 801c8be:	d5ea      	bpl.n	801c896 <tcp_oos_insert_segment+0x1a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c8c0:	68eb      	ldr	r3, [r5, #12]
 801c8c2:	2001      	movs	r0, #1
 801c8c4:	899f      	ldrh	r7, [r3, #12]
 801c8c6:	f7fc f9c7 	bl	8018c58 <lwip_htons>
 801c8ca:	68eb      	ldr	r3, [r5, #12]
 801c8cc:	4338      	orrs	r0, r7
      next = next->next;
 801c8ce:	6827      	ldr	r7, [r4, #0]
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c8d0:	8198      	strh	r0, [r3, #12]
      tcp_seg_free(old_seg);
 801c8d2:	4620      	mov	r0, r4
 801c8d4:	f7fe ff78 	bl	801b7c8 <tcp_seg_free>
    while (next &&
 801c8d8:	463c      	mov	r4, r7
 801c8da:	2f00      	cmp	r7, #0
 801c8dc:	d1e1      	bne.n	801c8a2 <tcp_oos_insert_segment+0x26>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
      pbuf_realloc(cseg->p, cseg->len);
    }
  }
  cseg->next = next;
 801c8de:	602c      	str	r4, [r5, #0]
}
 801c8e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c8e2:	1a12      	subs	r2, r2, r0
    if (next &&
 801c8e4:	2a00      	cmp	r2, #0
 801c8e6:	ddfa      	ble.n	801c8de <tcp_oos_insert_segment+0x62>
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c8e8:	1bc1      	subs	r1, r0, r7
      pbuf_realloc(cseg->p, cseg->len);
 801c8ea:	6868      	ldr	r0, [r5, #4]
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c8ec:	b289      	uxth	r1, r1
 801c8ee:	8129      	strh	r1, [r5, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c8f0:	f7fe f8d6 	bl	801aaa0 <pbuf_realloc>
  cseg->next = next;
 801c8f4:	602c      	str	r4, [r5, #0]
}
 801c8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tcp_segs_free(next);
 801c8f8:	4620      	mov	r0, r4
    next = NULL;
 801c8fa:	2400      	movs	r4, #0
    tcp_segs_free(next);
 801c8fc:	f7fe ff52 	bl	801b7a4 <tcp_segs_free>
  cseg->next = next;
 801c900:	602c      	str	r4, [r5, #0]
}
 801c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c904:	4b04      	ldr	r3, [pc, #16]	; (801c918 <tcp_oos_insert_segment+0x9c>)
 801c906:	f240 421f 	movw	r2, #1055	; 0x41f
 801c90a:	4904      	ldr	r1, [pc, #16]	; (801c91c <tcp_oos_insert_segment+0xa0>)
 801c90c:	4804      	ldr	r0, [pc, #16]	; (801c920 <tcp_oos_insert_segment+0xa4>)
 801c90e:	f008 faa1 	bl	8024e54 <iprintf>
 801c912:	e7b8      	b.n	801c886 <tcp_oos_insert_segment+0xa>
 801c914:	2002e3cc 	.word	0x2002e3cc
 801c918:	08043e0c 	.word	0x08043e0c
 801c91c:	08043e40 	.word	0x08043e40
 801c920:	08029a64 	.word	0x08029a64

0801c924 <tcp_input_delayed_close>:
{
 801c924:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c926:	4604      	mov	r4, r0
 801c928:	b1c8      	cbz	r0, 801c95e <tcp_input_delayed_close+0x3a>
  if (recv_flags & TF_CLOSED) {
 801c92a:	4b11      	ldr	r3, [pc, #68]	; (801c970 <tcp_input_delayed_close+0x4c>)
 801c92c:	781b      	ldrb	r3, [r3, #0]
 801c92e:	f013 0310 	ands.w	r3, r3, #16
 801c932:	d101      	bne.n	801c938 <tcp_input_delayed_close+0x14>
  return 0;
 801c934:	4618      	mov	r0, r3
}
 801c936:	bd10      	pop	{r4, pc}
    if (!(pcb->flags & TF_RXCLOSED)) {
 801c938:	8b63      	ldrh	r3, [r4, #26]
 801c93a:	06db      	lsls	r3, r3, #27
 801c93c:	d406      	bmi.n	801c94c <tcp_input_delayed_close+0x28>
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801c93e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 801c942:	b11b      	cbz	r3, 801c94c <tcp_input_delayed_close+0x28>
 801c944:	f06f 010e 	mvn.w	r1, #14
 801c948:	6920      	ldr	r0, [r4, #16]
 801c94a:	4798      	blx	r3
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801c94c:	4621      	mov	r1, r4
 801c94e:	4809      	ldr	r0, [pc, #36]	; (801c974 <tcp_input_delayed_close+0x50>)
 801c950:	f7ff fb02 	bl	801bf58 <tcp_pcb_remove>
    tcp_free(pcb);
 801c954:	4620      	mov	r0, r4
 801c956:	f7fe fcfb 	bl	801b350 <tcp_free>
 801c95a:	2001      	movs	r0, #1
}
 801c95c:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801c95e:	4b06      	ldr	r3, [pc, #24]	; (801c978 <tcp_input_delayed_close+0x54>)
 801c960:	f240 225a 	movw	r2, #602	; 0x25a
 801c964:	4905      	ldr	r1, [pc, #20]	; (801c97c <tcp_input_delayed_close+0x58>)
 801c966:	4806      	ldr	r0, [pc, #24]	; (801c980 <tcp_input_delayed_close+0x5c>)
 801c968:	f008 fa74 	bl	8024e54 <iprintf>
 801c96c:	e7dd      	b.n	801c92a <tcp_input_delayed_close+0x6>
 801c96e:	bf00      	nop
 801c970:	2002e3c8 	.word	0x2002e3c8
 801c974:	2002e38c 	.word	0x2002e38c
 801c978:	08043e0c 	.word	0x08043e0c
 801c97c:	08043e68 	.word	0x08043e68
 801c980:	08029a64 	.word	0x08029a64

0801c984 <tcp_free_acked_segments.constprop.0>:
#endif /* TCP_QUEUE_OOSEQ */

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
 801c984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c988:	b083      	sub	sp, #12
 801c98a:	9201      	str	r2, [sp, #4]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c98c:	2900      	cmp	r1, #0
 801c98e:	d03d      	beq.n	801ca0c <tcp_free_acked_segments.constprop.0+0x88>
 801c990:	4607      	mov	r7, r0
 801c992:	460c      	mov	r4, r1
 801c994:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 801ca5c <tcp_free_acked_segments.constprop.0+0xd8>
    seg_list = seg_list->next;

    clen = pbuf_clen(next->p);
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c998:	f8df b0b4 	ldr.w	fp, [pc, #180]	; 801ca50 <tcp_free_acked_segments.constprop.0+0xcc>
 801c99c:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 801ca60 <tcp_free_acked_segments.constprop.0+0xdc>
 801c9a0:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 801ca58 <tcp_free_acked_segments.constprop.0+0xd4>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c9a4:	68e3      	ldr	r3, [r4, #12]
 801c9a6:	6858      	ldr	r0, [r3, #4]
 801c9a8:	f7fc f95a 	bl	8018c60 <lwip_htonl>
 801c9ac:	68e3      	ldr	r3, [r4, #12]
 801c9ae:	4605      	mov	r5, r0
 801c9b0:	8926      	ldrh	r6, [r4, #8]
 801c9b2:	8998      	ldrh	r0, [r3, #12]
 801c9b4:	f7fc f950 	bl	8018c58 <lwip_htons>
 801c9b8:	f8d8 3000 	ldr.w	r3, [r8]
 801c9bc:	f010 0003 	ands.w	r0, r0, #3
 801c9c0:	eba5 0503 	sub.w	r5, r5, r3
 801c9c4:	bf18      	it	ne
 801c9c6:	2001      	movne	r0, #1
 801c9c8:	4435      	add	r5, r6
 801c9ca:	4428      	add	r0, r5
  while (seg_list != NULL &&
 801c9cc:	2800      	cmp	r0, #0
 801c9ce:	dc37      	bgt.n	801ca40 <tcp_free_acked_segments.constprop.0+0xbc>
    seg_list = seg_list->next;
 801c9d0:	e9d4 6000 	ldrd	r6, r0, [r4]
    clen = pbuf_clen(next->p);
 801c9d4:	f7fe f990 	bl	801acf8 <pbuf_clen>
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c9d8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
    clen = pbuf_clen(next->p);
 801c9dc:	4605      	mov	r5, r0
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c9de:	4298      	cmp	r0, r3
 801c9e0:	d824      	bhi.n	801ca2c <tcp_free_acked_segments.constprop.0+0xa8>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c9e2:	491a      	ldr	r1, [pc, #104]	; (801ca4c <tcp_free_acked_segments.constprop.0+0xc8>)
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c9e4:	1b5b      	subs	r3, r3, r5
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c9e6:	8922      	ldrh	r2, [r4, #8]
    tcp_seg_free(next);
 801c9e8:	4620      	mov	r0, r4
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c9ea:	880d      	ldrh	r5, [r1, #0]
 801c9ec:	4634      	mov	r4, r6
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c9ee:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c9f2:	1953      	adds	r3, r2, r5
 801c9f4:	800b      	strh	r3, [r1, #0]
    tcp_seg_free(next);
 801c9f6:	f7fe fee7 	bl	801b7c8 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c9fa:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801c9fe:	b11b      	cbz	r3, 801ca08 <tcp_free_acked_segments.constprop.0+0x84>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ca00:	9b01      	ldr	r3, [sp, #4]
 801ca02:	ea56 0503 	orrs.w	r5, r6, r3
 801ca06:	d006      	beq.n	801ca16 <tcp_free_acked_segments.constprop.0+0x92>
  while (seg_list != NULL &&
 801ca08:	2e00      	cmp	r6, #0
 801ca0a:	d1cb      	bne.n	801c9a4 <tcp_free_acked_segments.constprop.0+0x20>
 801ca0c:	2500      	movs	r5, #0
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
}
 801ca0e:	4628      	mov	r0, r5
 801ca10:	b003      	add	sp, #12
 801ca12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      LWIP_ASSERT("tcp_receive: valid queue length",
 801ca16:	4b0e      	ldr	r3, [pc, #56]	; (801ca50 <tcp_free_acked_segments.constprop.0+0xcc>)
 801ca18:	f240 4261 	movw	r2, #1121	; 0x461
 801ca1c:	490d      	ldr	r1, [pc, #52]	; (801ca54 <tcp_free_acked_segments.constprop.0+0xd0>)
 801ca1e:	480e      	ldr	r0, [pc, #56]	; (801ca58 <tcp_free_acked_segments.constprop.0+0xd4>)
 801ca20:	f008 fa18 	bl	8024e54 <iprintf>
}
 801ca24:	4628      	mov	r0, r5
 801ca26:	b003      	add	sp, #12
 801ca28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801ca2c:	465b      	mov	r3, fp
 801ca2e:	f240 4257 	movw	r2, #1111	; 0x457
 801ca32:	4651      	mov	r1, sl
 801ca34:	4648      	mov	r0, r9
 801ca36:	f008 fa0d 	bl	8024e54 <iprintf>
    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801ca3a:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 801ca3e:	e7d0      	b.n	801c9e2 <tcp_free_acked_segments.constprop.0+0x5e>
 801ca40:	4625      	mov	r5, r4
}
 801ca42:	4628      	mov	r0, r5
 801ca44:	b003      	add	sp, #12
 801ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca4a:	bf00      	nop
 801ca4c:	2002e3c0 	.word	0x2002e3c0
 801ca50:	08043e0c 	.word	0x08043e0c
 801ca54:	08043eb8 	.word	0x08043eb8
 801ca58:	08029a64 	.word	0x08029a64
 801ca5c:	2002e3a8 	.word	0x2002e3a8
 801ca60:	08043e90 	.word	0x08043e90

0801ca64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801ca64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801ca68:	4604      	mov	r4, r0
 801ca6a:	2800      	cmp	r0, #0
 801ca6c:	f000 8200 	beq.w	801ce70 <tcp_receive+0x40c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ca70:	7d23      	ldrb	r3, [r4, #20]
 801ca72:	2b03      	cmp	r3, #3
 801ca74:	f240 811e 	bls.w	801ccb4 <tcp_receive+0x250>

  if (flags & TCP_ACK) {
 801ca78:	4bb4      	ldr	r3, [pc, #720]	; (801cd4c <tcp_receive+0x2e8>)
 801ca7a:	781b      	ldrb	r3, [r3, #0]
 801ca7c:	06dd      	lsls	r5, r3, #27
 801ca7e:	f100 8097 	bmi.w	801cbb0 <tcp_receive+0x14c>

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ca82:	4fb3      	ldr	r7, [pc, #716]	; (801cd50 <tcp_receive+0x2ec>)
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ca84:	4eb3      	ldr	r6, [pc, #716]	; (801cd54 <tcp_receive+0x2f0>)
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ca86:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ca88:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ca8a:	2900      	cmp	r1, #0
 801ca8c:	d07f      	beq.n	801cb8e <tcp_receive+0x12a>
 801ca8e:	7d22      	ldrb	r2, [r4, #20]
 801ca90:	2a06      	cmp	r2, #6
 801ca92:	d87c      	bhi.n	801cb8e <tcp_receive+0x12a>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ca94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ca96:	eba2 0803 	sub.w	r8, r2, r3
 801ca9a:	f1b8 0f01 	cmp.w	r8, #1
 801ca9e:	d405      	bmi.n	801caac <tcp_receive+0x48>
 801caa0:	1c50      	adds	r0, r2, #1
 801caa2:	1ac0      	subs	r0, r0, r3
 801caa4:	1a41      	subs	r1, r0, r1
 801caa6:	2900      	cmp	r1, #0
 801caa8:	f340 81f3 	ble.w	801ce92 <tcp_receive+0x42e>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801caac:	1a99      	subs	r1, r3, r2
 801caae:	2900      	cmp	r1, #0
 801cab0:	f2c0 81ea 	blt.w	801ce88 <tcp_receive+0x424>
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cab4:	f103 0c01 	add.w	ip, r3, #1
 801cab8:	8d20      	ldrh	r0, [r4, #40]	; 0x28
 801caba:	ebac 0102 	sub.w	r1, ip, r2
 801cabe:	1a09      	subs	r1, r1, r0
 801cac0:	2900      	cmp	r1, #0
 801cac2:	dc39      	bgt.n	801cb38 <tcp_receive+0xd4>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801cac4:	429a      	cmp	r2, r3
 801cac6:	f000 8470 	beq.w	801d3aa <tcp_receive+0x946>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801caca:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801cacc:	2d00      	cmp	r5, #0
 801cace:	f000 8378 	beq.w	801d1c2 <tcp_receive+0x75e>
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
          for (next = pcb->ooseq; next != NULL; next = next->next) {
            if (seqno == next->tcphdr->seqno) {
 801cad2:	68e8      	ldr	r0, [r5, #12]
          struct tcp_seg *next, *prev = NULL;
 801cad4:	f04f 0800 	mov.w	r8, #0
                  break;
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801cad8:	f103 3eff 	add.w	lr, r3, #4294967295
            if (seqno == next->tcphdr->seqno) {
 801cadc:	6842      	ldr	r2, [r0, #4]
 801cade:	429a      	cmp	r2, r3
 801cae0:	d019      	beq.n	801cb16 <tcp_receive+0xb2>
              if (prev == NULL) {
 801cae2:	f1b8 0f00 	cmp.w	r8, #0
 801cae6:	f000 815b 	beq.w	801cda0 <tcp_receive+0x33c>
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801caea:	f8d8 100c 	ldr.w	r1, [r8, #12]
 801caee:	6849      	ldr	r1, [r1, #4]
 801caf0:	ebae 0101 	sub.w	r1, lr, r1
 801caf4:	2900      	cmp	r1, #0
 801caf6:	db04      	blt.n	801cb02 <tcp_receive+0x9e>
 801caf8:	ebac 0102 	sub.w	r1, ip, r2
 801cafc:	2900      	cmp	r1, #0
 801cafe:	f340 8369 	ble.w	801d1d4 <tcp_receive+0x770>
              prev = next;

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801cb02:	6829      	ldr	r1, [r5, #0]
 801cb04:	46a8      	mov	r8, r5
 801cb06:	2900      	cmp	r1, #0
 801cb08:	f000 8159 	beq.w	801cdbe <tcp_receive+0x35a>
 801cb0c:	460d      	mov	r5, r1
            if (seqno == next->tcphdr->seqno) {
 801cb0e:	68e8      	ldr	r0, [r5, #12]
 801cb10:	6842      	ldr	r2, [r0, #4]
 801cb12:	429a      	cmp	r2, r3
 801cb14:	d1e5      	bne.n	801cae2 <tcp_receive+0x7e>
              if (inseg.len > next->len) {
 801cb16:	4890      	ldr	r0, [pc, #576]	; (801cd58 <tcp_receive+0x2f4>)
 801cb18:	892b      	ldrh	r3, [r5, #8]
 801cb1a:	8902      	ldrh	r2, [r0, #8]
 801cb1c:	429a      	cmp	r2, r3
 801cb1e:	d90b      	bls.n	801cb38 <tcp_receive+0xd4>
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cb20:	f7fe fe70 	bl	801b804 <tcp_seg_copy>
                if (cseg != NULL) {
 801cb24:	b140      	cbz	r0, 801cb38 <tcp_receive+0xd4>
                  if (prev != NULL) {
 801cb26:	f1b8 0f00 	cmp.w	r8, #0
 801cb2a:	f000 8414 	beq.w	801d356 <tcp_receive+0x8f2>
                    prev->next = cseg;
 801cb2e:	f8c8 0000 	str.w	r0, [r8]
                  tcp_oos_insert_segment(cseg, next);
 801cb32:	4629      	mov	r1, r5
 801cb34:	f7ff fea2 	bl	801c87c <tcp_oos_insert_segment>
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801cb38:	4620      	mov	r0, r4
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      tcp_ack_now(pcb);
    }
  }
}
 801cb3a:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        tcp_send_empty_ack(pcb);
 801cb3e:	f002 ba47 	b.w	801efd0 <tcp_send_empty_ack>
      if (tcplen == 0) {
 801cb42:	4f83      	ldr	r7, [pc, #524]	; (801cd50 <tcp_receive+0x2ec>)
 801cb44:	8839      	ldrh	r1, [r7, #0]
 801cb46:	2900      	cmp	r1, #0
 801cb48:	f040 8116 	bne.w	801cd78 <tcp_receive+0x314>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cb4c:	44f4      	add	ip, lr
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801cb4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801cb50:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
 801cb54:	4470      	add	r0, lr
 801cb56:	4560      	cmp	r0, ip
 801cb58:	f040 810e 	bne.w	801cd78 <tcp_receive+0x314>
          if (pcb->rtime >= 0) {
 801cb5c:	8e20      	ldrh	r0, [r4, #48]	; 0x30
            if (pcb->lastack == ackno) {
 801cb5e:	0400      	lsls	r0, r0, #16
 801cb60:	f100 810a 	bmi.w	801cd78 <tcp_receive+0x314>
 801cb64:	4590      	cmp	r8, r2
 801cb66:	f040 8107 	bne.w	801cd78 <tcp_receive+0x314>
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801cb6a:	f894 0043 	ldrb.w	r0, [r4, #67]	; 0x43
 801cb6e:	28ff      	cmp	r0, #255	; 0xff
 801cb70:	f000 8393 	beq.w	801d29a <tcp_receive+0x836>
                ++pcb->dupacks;
 801cb74:	3001      	adds	r0, #1
 801cb76:	b2c0      	uxtb	r0, r0
              if (pcb->dupacks > 3) {
 801cb78:	2803      	cmp	r0, #3
                ++pcb->dupacks;
 801cb7a:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
              if (pcb->dupacks > 3) {
 801cb7e:	f200 838c 	bhi.w	801d29a <tcp_receive+0x836>
              if (pcb->dupacks >= 3) {
 801cb82:	f000 8396 	beq.w	801d2b2 <tcp_receive+0x84e>
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801cb86:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801cb88:	2800      	cmp	r0, #0
 801cb8a:	f040 80b6 	bne.w	801ccfa <tcp_receive+0x296>
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801cb8e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801cb90:	1a99      	subs	r1, r3, r2
 801cb92:	2900      	cmp	r1, #0
 801cb94:	db06      	blt.n	801cba4 <tcp_receive+0x140>
 801cb96:	f1c2 0201 	rsb	r2, r2, #1
 801cb9a:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801cb9c:	1a52      	subs	r2, r2, r1
 801cb9e:	4413      	add	r3, r2
 801cba0:	2b00      	cmp	r3, #0
 801cba2:	dd03      	ble.n	801cbac <tcp_receive+0x148>
      tcp_ack_now(pcb);
 801cba4:	8b63      	ldrh	r3, [r4, #26]
 801cba6:	f043 0302 	orr.w	r3, r3, #2
 801cbaa:	8363      	strh	r3, [r4, #26]
}
 801cbac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cbb0:	4e68      	ldr	r6, [pc, #416]	; (801cd54 <tcp_receive+0x2f0>)
 801cbb2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801cbb4:	6833      	ldr	r3, [r6, #0]
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cbb6:	f8b4 e060 	ldrh.w	lr, [r4, #96]	; 0x60
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cbba:	1ad1      	subs	r1, r2, r3
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801cbbc:	f8d4 c058 	ldr.w	ip, [r4, #88]	; 0x58
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cbc0:	2900      	cmp	r1, #0
 801cbc2:	db7f      	blt.n	801ccc4 <tcp_receive+0x260>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cbc4:	4d65      	ldr	r5, [pc, #404]	; (801cd5c <tcp_receive+0x2f8>)
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cbc6:	429a      	cmp	r2, r3
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cbc8:	682a      	ldr	r2, [r5, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801cbca:	f000 80d9 	beq.w	801cd80 <tcp_receive+0x31c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cbce:	4594      	cmp	ip, r2
 801cbd0:	f000 80df 	beq.w	801cd92 <tcp_receive+0x32e>
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801cbd4:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
 801cbd8:	eba2 0108 	sub.w	r1, r2, r8
 801cbdc:	2900      	cmp	r1, #0
 801cbde:	ddb0      	ble.n	801cb42 <tcp_receive+0xde>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cbe0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 801cbe2:	1ad3      	subs	r3, r2, r3
 801cbe4:	2b00      	cmp	r3, #0
 801cbe6:	dc7d      	bgt.n	801cce4 <tcp_receive+0x280>
      if (pcb->flags & TF_INFR) {
 801cbe8:	8b63      	ldrh	r3, [r4, #26]
 801cbea:	0758      	lsls	r0, r3, #29
 801cbec:	d509      	bpl.n	801cc02 <tcp_receive+0x19e>
        tcp_clear_flags(pcb, TF_INFR);
 801cbee:	f023 0304 	bic.w	r3, r3, #4
 801cbf2:	8363      	strh	r3, [r4, #26]
        pcb->cwnd = pcb->ssthresh;
 801cbf4:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 801cbf8:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
        pcb->bytes_acked = 0;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cc02:	f9b4 003c 	ldrsh.w	r0, [r4, #60]	; 0x3c
 801cc06:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      pcb->lastack = ackno;
 801cc08:	6462      	str	r2, [r4, #68]	; 0x44
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cc0a:	eb03 03e0 	add.w	r3, r3, r0, asr #3
      if (pcb->state >= ESTABLISHED) {
 801cc0e:	7d22      	ldrb	r2, [r4, #20]
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cc10:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
      if (pcb->state >= ESTABLISHED) {
 801cc14:	2a03      	cmp	r2, #3
      pcb->nrtx = 0;
 801cc16:	f04f 0300 	mov.w	r3, #0
 801cc1a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
      if (pcb->state >= ESTABLISHED) {
 801cc1e:	d913      	bls.n	801cc48 <tcp_receive+0x1e4>
        if (pcb->cwnd < pcb->ssthresh) {
 801cc20:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801cc24:	b289      	uxth	r1, r1
        if (pcb->cwnd < pcb->ssthresh) {
 801cc26:	f8b4 204a 	ldrh.w	r2, [r4, #74]	; 0x4a
 801cc2a:	429a      	cmp	r2, r3
 801cc2c:	f200 81c9 	bhi.w	801cfc2 <tcp_receive+0x55e>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cc30:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 801cc34:	4411      	add	r1, r2
 801cc36:	b289      	uxth	r1, r1
 801cc38:	428a      	cmp	r2, r1
 801cc3a:	f200 82a9 	bhi.w	801d190 <tcp_receive+0x72c>
          if (pcb->bytes_acked >= pcb->cwnd) {
 801cc3e:	428b      	cmp	r3, r1
 801cc40:	f240 82a8 	bls.w	801d194 <tcp_receive+0x730>
 801cc44:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cc48:	4620      	mov	r0, r4
 801cc4a:	e9d4 211b 	ldrd	r2, r1, [r4, #108]	; 0x6c
 801cc4e:	f7ff fe99 	bl	801c984 <tcp_free_acked_segments.constprop.0>
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cc52:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801cc54:	4602      	mov	r2, r0
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cc56:	6720      	str	r0, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cc58:	4620      	mov	r0, r4
 801cc5a:	f7ff fe93 	bl	801c984 <tcp_free_acked_segments.constprop.0>
      if (pcb->unacked == NULL) {
 801cc5e:	6f22      	ldr	r2, [r4, #112]	; 0x70
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cc60:	66e0      	str	r0, [r4, #108]	; 0x6c
      if (pcb->unacked == NULL) {
 801cc62:	fab2 f382 	clz	r3, r2
 801cc66:	095b      	lsrs	r3, r3, #5
 801cc68:	425b      	negs	r3, r3
 801cc6a:	8623      	strh	r3, [r4, #48]	; 0x30
      pcb->polltmr = 0;
 801cc6c:	2300      	movs	r3, #0
 801cc6e:	7723      	strb	r3, [r4, #28]
      if (pcb->unsent == NULL) {
 801cc70:	2800      	cmp	r0, #0
 801cc72:	f000 81a3 	beq.w	801cfbc <tcp_receive+0x558>
      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cc76:	4b3a      	ldr	r3, [pc, #232]	; (801cd60 <tcp_receive+0x2fc>)
 801cc78:	8819      	ldrh	r1, [r3, #0]
 801cc7a:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 801cc7e:	440b      	add	r3, r1
 801cc80:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      if (pcb->flags & TF_RTO) {
 801cc84:	8b63      	ldrh	r3, [r4, #26]
 801cc86:	0519      	lsls	r1, r3, #20
 801cc88:	f140 80fa 	bpl.w	801ce80 <tcp_receive+0x41c>
        if (pcb->unacked == NULL) {
 801cc8c:	2a00      	cmp	r2, #0
 801cc8e:	f000 81af 	beq.w	801cff0 <tcp_receive+0x58c>
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801cc92:	68d3      	ldr	r3, [r2, #12]
 801cc94:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801cc96:	6858      	ldr	r0, [r3, #4]
 801cc98:	f7fb ffe2 	bl	8018c60 <lwip_htonl>
 801cc9c:	1a38      	subs	r0, r7, r0
 801cc9e:	2800      	cmp	r0, #0
 801cca0:	f300 80ee 	bgt.w	801ce80 <tcp_receive+0x41c>
          tcp_clear_flags(pcb, TF_RTO);
 801cca4:	8b63      	ldrh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cca6:	4f2a      	ldr	r7, [pc, #168]	; (801cd50 <tcp_receive+0x2ec>)
          tcp_clear_flags(pcb, TF_RTO);
 801cca8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ccac:	8839      	ldrh	r1, [r7, #0]
          tcp_clear_flags(pcb, TF_RTO);
 801ccae:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ccb0:	6833      	ldr	r3, [r6, #0]
 801ccb2:	e01d      	b.n	801ccf0 <tcp_receive+0x28c>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801ccb4:	4b2b      	ldr	r3, [pc, #172]	; (801cd64 <tcp_receive+0x300>)
 801ccb6:	f240 427c 	movw	r2, #1148	; 0x47c
 801ccba:	492b      	ldr	r1, [pc, #172]	; (801cd68 <tcp_receive+0x304>)
 801ccbc:	482b      	ldr	r0, [pc, #172]	; (801cd6c <tcp_receive+0x308>)
 801ccbe:	f008 f8c9 	bl	8024e54 <iprintf>
 801ccc2:	e6d9      	b.n	801ca78 <tcp_receive+0x14>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ccc4:	4a2a      	ldr	r2, [pc, #168]	; (801cd70 <tcp_receive+0x30c>)
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801ccc6:	4d25      	ldr	r5, [pc, #148]	; (801cd5c <tcp_receive+0x2f8>)
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801ccc8:	6812      	ldr	r2, [r2, #0]
 801ccca:	89d1      	ldrh	r1, [r2, #14]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cccc:	682a      	ldr	r2, [r5, #0]
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ccce:	f8b4 0062 	ldrh.w	r0, [r4, #98]	; 0x62
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801ccd2:	f8a4 1060 	strh.w	r1, [r4, #96]	; 0x60
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801ccd6:	4288      	cmp	r0, r1
      pcb->snd_wl2 = ackno;
 801ccd8:	e9c4 3215 	strd	r3, r2, [r4, #84]	; 0x54
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ccdc:	bf38      	it	cc
 801ccde:	f8a4 1062 	strhcc.w	r1, [r4, #98]	; 0x62
      pcb->snd_wl1 = seqno;
 801cce2:	e777      	b.n	801cbd4 <tcp_receive+0x170>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801cce4:	4f1a      	ldr	r7, [pc, #104]	; (801cd50 <tcp_receive+0x2ec>)
      tcp_send_empty_ack(pcb);
 801cce6:	4620      	mov	r0, r4
 801cce8:	f002 f972 	bl	801efd0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ccec:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ccee:	8839      	ldrh	r1, [r7, #0]
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801ccf0:	6b60      	ldr	r0, [r4, #52]	; 0x34
 801ccf2:	2800      	cmp	r0, #0
 801ccf4:	f43f aec9 	beq.w	801ca8a <tcp_receive+0x26>
 801ccf8:	682a      	ldr	r2, [r5, #0]
 801ccfa:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 801ccfc:	1aaa      	subs	r2, r5, r2
 801ccfe:	2a00      	cmp	r2, #0
 801cd00:	f6bf aec3 	bge.w	801ca8a <tcp_receive+0x26>
      m = (s16_t)(m - (pcb->sa >> 3));
 801cd04:	f9b4 503c 	ldrsh.w	r5, [r4, #60]	; 0x3c
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801cd08:	b280      	uxth	r0, r0
 801cd0a:	4a1a      	ldr	r2, [pc, #104]	; (801cd74 <tcp_receive+0x310>)
      m = (s16_t)(m - (pcb->sa >> 3));
 801cd0c:	f3c5 0ccf 	ubfx	ip, r5, #3, #16
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801cd10:	f8b2 e000 	ldrh.w	lr, [r2]
      m = (s16_t)(m - (pcb->sa >> 3));
 801cd14:	ebae 020c 	sub.w	r2, lr, ip
 801cd18:	1a12      	subs	r2, r2, r0
 801cd1a:	b292      	uxth	r2, r2
      pcb->sa = (s16_t)(pcb->sa + m);
 801cd1c:	4415      	add	r5, r2
      if (m < 0) {
 801cd1e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
      pcb->sa = (s16_t)(pcb->sa + m);
 801cd22:	b22d      	sxth	r5, r5
 801cd24:	87a5      	strh	r5, [r4, #60]	; 0x3c
      if (m < 0) {
 801cd26:	d003      	beq.n	801cd30 <tcp_receive+0x2cc>
        m = (s16_t) - m;
 801cd28:	ebac 0c0e 	sub.w	ip, ip, lr
 801cd2c:	4460      	add	r0, ip
 801cd2e:	b282      	uxth	r2, r0
      m = (s16_t)(m - (pcb->sv >> 2));
 801cd30:	f9b4 003e 	ldrsh.w	r0, [r4, #62]	; 0x3e
      pcb->sv = (s16_t)(pcb->sv + m);
 801cd34:	eba0 00a0 	sub.w	r0, r0, r0, asr #2
 801cd38:	4410      	add	r0, r2
      pcb->rttest = 0;
 801cd3a:	2200      	movs	r2, #0
      pcb->sv = (s16_t)(pcb->sv + m);
 801cd3c:	b280      	uxth	r0, r0
      pcb->rttest = 0;
 801cd3e:	6362      	str	r2, [r4, #52]	; 0x34
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cd40:	eb00 05e5 	add.w	r5, r0, r5, asr #3
      pcb->sv = (s16_t)(pcb->sv + m);
 801cd44:	87e0      	strh	r0, [r4, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801cd46:	f8a4 5040 	strh.w	r5, [r4, #64]	; 0x40
      pcb->rttest = 0;
 801cd4a:	e69e      	b.n	801ca8a <tcp_receive+0x26>
 801cd4c:	2002e3ac 	.word	0x2002e3ac
 801cd50:	2002e3e6 	.word	0x2002e3e6
 801cd54:	2002e3cc 	.word	0x2002e3cc
 801cd58:	2002e3b0 	.word	0x2002e3b0
 801cd5c:	2002e3a8 	.word	0x2002e3a8
 801cd60:	2002e3c0 	.word	0x2002e3c0
 801cd64:	08043e0c 	.word	0x08043e0c
 801cd68:	08043ef4 	.word	0x08043ef4
 801cd6c:	08029a64 	.word	0x08029a64
 801cd70:	2002e3d8 	.word	0x2002e3d8
 801cd74:	2002e39c 	.word	0x2002e39c
        pcb->dupacks = 0;
 801cd78:	2200      	movs	r2, #0
 801cd7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801cd7e:	e7b7      	b.n	801ccf0 <tcp_receive+0x28c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801cd80:	ebac 0102 	sub.w	r1, ip, r2
 801cd84:	2900      	cmp	r1, #0
 801cd86:	f6bf af22 	bge.w	801cbce <tcp_receive+0x16a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801cd8a:	49ac      	ldr	r1, [pc, #688]	; (801d03c <tcp_receive+0x5d8>)
 801cd8c:	6809      	ldr	r1, [r1, #0]
 801cd8e:	89c9      	ldrh	r1, [r1, #14]
 801cd90:	e79d      	b.n	801ccce <tcp_receive+0x26a>
 801cd92:	49aa      	ldr	r1, [pc, #680]	; (801d03c <tcp_receive+0x5d8>)
 801cd94:	6809      	ldr	r1, [r1, #0]
 801cd96:	89c9      	ldrh	r1, [r1, #14]
 801cd98:	458e      	cmp	lr, r1
 801cd9a:	f4bf af1b 	bcs.w	801cbd4 <tcp_receive+0x170>
 801cd9e:	e796      	b.n	801ccce <tcp_receive+0x26a>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801cda0:	1a99      	subs	r1, r3, r2
 801cda2:	2900      	cmp	r1, #0
 801cda4:	f6bf aead 	bge.w	801cb02 <tcp_receive+0x9e>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801cda8:	48a5      	ldr	r0, [pc, #660]	; (801d040 <tcp_receive+0x5dc>)
 801cdaa:	f7fe fd2b 	bl	801b804 <tcp_seg_copy>
                  if (cseg != NULL) {
 801cdae:	2800      	cmp	r0, #0
 801cdb0:	f43f aec2 	beq.w	801cb38 <tcp_receive+0xd4>
                    tcp_oos_insert_segment(cseg, next);
 801cdb4:	4629      	mov	r1, r5
                    pcb->ooseq = cseg;
 801cdb6:	6760      	str	r0, [r4, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801cdb8:	f7ff fd60 	bl	801c87c <tcp_oos_insert_segment>
 801cdbc:	e6bc      	b.n	801cb38 <tcp_receive+0xd4>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801cdbe:	1a9b      	subs	r3, r3, r2
              if (next->next == NULL &&
 801cdc0:	2b00      	cmp	r3, #0
 801cdc2:	f77f aeb9 	ble.w	801cb38 <tcp_receive+0xd4>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801cdc6:	8980      	ldrh	r0, [r0, #12]
 801cdc8:	f7fb ff46 	bl	8018c58 <lwip_htons>
 801cdcc:	07c1      	lsls	r1, r0, #31
 801cdce:	f53f aeb3 	bmi.w	801cb38 <tcp_receive+0xd4>
                next->next = tcp_seg_copy(&inseg);
 801cdd2:	489b      	ldr	r0, [pc, #620]	; (801d040 <tcp_receive+0x5dc>)
 801cdd4:	f7fe fd16 	bl	801b804 <tcp_seg_copy>
 801cdd8:	6028      	str	r0, [r5, #0]
                if (next->next != NULL) {
 801cdda:	2800      	cmp	r0, #0
 801cddc:	f43f aeac 	beq.w	801cb38 <tcp_receive+0xd4>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801cde0:	68eb      	ldr	r3, [r5, #12]
 801cde2:	892a      	ldrh	r2, [r5, #8]
 801cde4:	6859      	ldr	r1, [r3, #4]
 801cde6:	6833      	ldr	r3, [r6, #0]
 801cde8:	440a      	add	r2, r1
 801cdea:	1ad2      	subs	r2, r2, r3
 801cdec:	2a00      	cmp	r2, #0
 801cdee:	dd05      	ble.n	801cdfc <tcp_receive+0x398>
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801cdf0:	1a5b      	subs	r3, r3, r1
                    pbuf_realloc(next->p, next->len);
 801cdf2:	6868      	ldr	r0, [r5, #4]
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801cdf4:	b299      	uxth	r1, r3
 801cdf6:	8129      	strh	r1, [r5, #8]
                    pbuf_realloc(next->p, next->len);
 801cdf8:	f7fd fe52 	bl	801aaa0 <pbuf_realloc>
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801cdfc:	6832      	ldr	r2, [r6, #0]
 801cdfe:	883b      	ldrh	r3, [r7, #0]
 801ce00:	4413      	add	r3, r2
 801ce02:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ce04:	1a9b      	subs	r3, r3, r2
 801ce06:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801ce08:	1a9b      	subs	r3, r3, r2
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	f77f ae94 	ble.w	801cb38 <tcp_receive+0xd4>
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801ce10:	682b      	ldr	r3, [r5, #0]
 801ce12:	68db      	ldr	r3, [r3, #12]
 801ce14:	8998      	ldrh	r0, [r3, #12]
 801ce16:	f7fb ff1f 	bl	8018c58 <lwip_htons>
 801ce1a:	07c2      	lsls	r2, r0, #31
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801ce1c:	682b      	ldr	r3, [r5, #0]
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801ce1e:	f100 82b1 	bmi.w	801d384 <tcp_receive+0x920>
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801ce22:	8d21      	ldrh	r1, [r4, #40]	; 0x28
 801ce24:	6832      	ldr	r2, [r6, #0]
                    pbuf_realloc(next->next->p, next->next->len);
 801ce26:	6858      	ldr	r0, [r3, #4]
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801ce28:	1a89      	subs	r1, r1, r2
 801ce2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 801ce2c:	4411      	add	r1, r2
 801ce2e:	b289      	uxth	r1, r1
 801ce30:	8119      	strh	r1, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801ce32:	f7fd fe35 	bl	801aaa0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801ce36:	682b      	ldr	r3, [r5, #0]
 801ce38:	891d      	ldrh	r5, [r3, #8]
 801ce3a:	68db      	ldr	r3, [r3, #12]
 801ce3c:	8998      	ldrh	r0, [r3, #12]
 801ce3e:	f7fb ff0b 	bl	8018c58 <lwip_htons>
 801ce42:	f010 0303 	ands.w	r3, r0, #3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ce46:	6831      	ldr	r1, [r6, #0]
                    tcplen = TCP_TCPLEN(next->next);
 801ce48:	bf18      	it	ne
 801ce4a:	2301      	movne	r3, #1
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ce4c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
                    tcplen = TCP_TCPLEN(next->next);
 801ce4e:	442b      	add	r3, r5
 801ce50:	b29b      	uxth	r3, r3
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ce52:	4419      	add	r1, r3
                    tcplen = TCP_TCPLEN(next->next);
 801ce54:	803b      	strh	r3, [r7, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801ce56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801ce58:	4413      	add	r3, r2
 801ce5a:	4299      	cmp	r1, r3
 801ce5c:	f43f ae6c 	beq.w	801cb38 <tcp_receive+0xd4>
 801ce60:	4b78      	ldr	r3, [pc, #480]	; (801d044 <tcp_receive+0x5e0>)
 801ce62:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801ce66:	4978      	ldr	r1, [pc, #480]	; (801d048 <tcp_receive+0x5e4>)
 801ce68:	4878      	ldr	r0, [pc, #480]	; (801d04c <tcp_receive+0x5e8>)
 801ce6a:	f007 fff3 	bl	8024e54 <iprintf>
 801ce6e:	e663      	b.n	801cb38 <tcp_receive+0xd4>
  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801ce70:	4b74      	ldr	r3, [pc, #464]	; (801d044 <tcp_receive+0x5e0>)
 801ce72:	f240 427b 	movw	r2, #1147	; 0x47b
 801ce76:	4976      	ldr	r1, [pc, #472]	; (801d050 <tcp_receive+0x5ec>)
 801ce78:	4874      	ldr	r0, [pc, #464]	; (801d04c <tcp_receive+0x5e8>)
 801ce7a:	f007 ffeb 	bl	8024e54 <iprintf>
 801ce7e:	e5f7      	b.n	801ca70 <tcp_receive+0xc>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce80:	4f74      	ldr	r7, [pc, #464]	; (801d054 <tcp_receive+0x5f0>)
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ce82:	6833      	ldr	r3, [r6, #0]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ce84:	8839      	ldrh	r1, [r7, #0]
 801ce86:	e733      	b.n	801ccf0 <tcp_receive+0x28c>
        tcp_ack_now(pcb);
 801ce88:	8b63      	ldrh	r3, [r4, #26]
 801ce8a:	f043 0302 	orr.w	r3, r3, #2
 801ce8e:	8363      	strh	r3, [r4, #26]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ce90:	e652      	b.n	801cb38 <tcp_receive+0xd4>
      struct pbuf *p = inseg.p;
 801ce92:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 801d040 <tcp_receive+0x5dc>
 801ce96:	f8d9 5004 	ldr.w	r5, [r9, #4]
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801ce9a:	2d00      	cmp	r5, #0
 801ce9c:	f000 8170 	beq.w	801d180 <tcp_receive+0x71c>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cea0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 801cea4:	4598      	cmp	r8, r3
 801cea6:	f200 80c0 	bhi.w	801d02a <tcp_receive+0x5c6>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801ceaa:	f8d9 3004 	ldr.w	r3, [r9, #4]
      off = (u16_t)off32;
 801ceae:	fa1f f888 	uxth.w	r8, r8
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801ceb2:	891a      	ldrh	r2, [r3, #8]
 801ceb4:	4542      	cmp	r2, r8
 801ceb6:	f0c0 80ad 	bcc.w	801d014 <tcp_receive+0x5b0>
      inseg.len -= off;
 801ceba:	f8b9 3008 	ldrh.w	r3, [r9, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cebe:	eba2 0208 	sub.w	r2, r2, r8
      inseg.len -= off;
 801cec2:	eba3 0308 	sub.w	r3, r3, r8
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cec6:	b292      	uxth	r2, r2
      inseg.len -= off;
 801cec8:	f8a9 3008 	strh.w	r3, [r9, #8]
      while (p->len < off) {
 801cecc:	896b      	ldrh	r3, [r5, #10]
 801cece:	4543      	cmp	r3, r8
 801ced0:	d20a      	bcs.n	801cee8 <tcp_receive+0x484>
        p->len = 0;
 801ced2:	2100      	movs	r1, #0
        off -= p->len;
 801ced4:	eba8 0303 	sub.w	r3, r8, r3
        p->len = 0;
 801ced8:	8169      	strh	r1, [r5, #10]
        p->tot_len = new_tot_len;
 801ceda:	812a      	strh	r2, [r5, #8]
        p = p->next;
 801cedc:	682d      	ldr	r5, [r5, #0]
        off -= p->len;
 801cede:	fa1f f883 	uxth.w	r8, r3
      while (p->len < off) {
 801cee2:	896b      	ldrh	r3, [r5, #10]
 801cee4:	4543      	cmp	r3, r8
 801cee6:	d3f5      	bcc.n	801ced4 <tcp_receive+0x470>
      pbuf_remove_header(p, off);
 801cee8:	4641      	mov	r1, r8
 801ceea:	4628      	mov	r0, r5
 801ceec:	f7fd fe64 	bl	801abb8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801cef0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801cef2:	f8d9 200c 	ldr.w	r2, [r9, #12]
 801cef6:	6033      	str	r3, [r6, #0]
 801cef8:	6053      	str	r3, [r2, #4]
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801cefa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801cefc:	2b00      	cmp	r3, #0
 801cefe:	f43f ae1b 	beq.w	801cb38 <tcp_receive+0xd4>
        tcplen = TCP_TCPLEN(&inseg);
 801cf02:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf06:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801cf0a:	8998      	ldrh	r0, [r3, #12]
 801cf0c:	f7fb fea4 	bl	8018c58 <lwip_htons>
 801cf10:	f010 0303 	ands.w	r3, r0, #3
        if (tcplen > pcb->rcv_wnd) {
 801cf14:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        tcplen = TCP_TCPLEN(&inseg);
 801cf16:	bf18      	it	ne
 801cf18:	2301      	movne	r3, #1
 801cf1a:	442b      	add	r3, r5
 801cf1c:	b29b      	uxth	r3, r3
        if (tcplen > pcb->rcv_wnd) {
 801cf1e:	429a      	cmp	r2, r3
        tcplen = TCP_TCPLEN(&inseg);
 801cf20:	803b      	strh	r3, [r7, #0]
        if (tcplen > pcb->rcv_wnd) {
 801cf22:	f0c0 8181 	bcc.w	801d228 <tcp_receive+0x7c4>
        if (pcb->ooseq != NULL) {
 801cf26:	6f63      	ldr	r3, [r4, #116]	; 0x74
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	f000 80a0 	beq.w	801d06e <tcp_receive+0x60a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cf2e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf32:	8998      	ldrh	r0, [r3, #12]
 801cf34:	f7fb fe90 	bl	8018c58 <lwip_htons>
 801cf38:	07c2      	lsls	r2, r0, #31
 801cf3a:	f100 8095 	bmi.w	801d068 <tcp_receive+0x604>
            struct tcp_seg *next = pcb->ooseq;
 801cf3e:	6f65      	ldr	r5, [r4, #116]	; 0x74
            while (next &&
 801cf40:	b955      	cbnz	r5, 801cf58 <tcp_receive+0x4f4>
 801cf42:	e1f4      	b.n	801d32e <tcp_receive+0x8ca>
              next = next->next;
 801cf44:	f8d5 8000 	ldr.w	r8, [r5]
              tcp_seg_free(tmp);
 801cf48:	4628      	mov	r0, r5
 801cf4a:	f7fe fc3d 	bl	801b7c8 <tcp_seg_free>
            while (next &&
 801cf4e:	4645      	mov	r5, r8
 801cf50:	f1b8 0f00 	cmp.w	r8, #0
 801cf54:	f000 81eb 	beq.w	801d32e <tcp_receive+0x8ca>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801cf58:	68e8      	ldr	r0, [r5, #12]
 801cf5a:	883a      	ldrh	r2, [r7, #0]
 801cf5c:	f8d6 e000 	ldr.w	lr, [r6]
 801cf60:	892b      	ldrh	r3, [r5, #8]
 801cf62:	f8d0 c004 	ldr.w	ip, [r0, #4]
 801cf66:	eb02 010e 	add.w	r1, r2, lr
 801cf6a:	4463      	add	r3, ip
 801cf6c:	1acb      	subs	r3, r1, r3
            while (next &&
 801cf6e:	2b00      	cmp	r3, #0
 801cf70:	f2c0 81a5 	blt.w	801d2be <tcp_receive+0x85a>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cf74:	8980      	ldrh	r0, [r0, #12]
 801cf76:	f7fb fe6f 	bl	8018c58 <lwip_htons>
 801cf7a:	07c3      	lsls	r3, r0, #31
 801cf7c:	d5e2      	bpl.n	801cf44 <tcp_receive+0x4e0>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801cf7e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf82:	8998      	ldrh	r0, [r3, #12]
 801cf84:	f7fb fe68 	bl	8018c58 <lwip_htons>
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801cf88:	0780      	lsls	r0, r0, #30
 801cf8a:	d4db      	bmi.n	801cf44 <tcp_receive+0x4e0>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cf8c:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf90:	2001      	movs	r0, #1
 801cf92:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801cf96:	f7fb fe5f 	bl	8018c58 <lwip_htons>
 801cf9a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801cf9e:	ea48 0000 	orr.w	r0, r8, r0
                tcplen = TCP_TCPLEN(&inseg);
 801cfa2:	f8b9 8008 	ldrh.w	r8, [r9, #8]
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801cfa6:	8198      	strh	r0, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801cfa8:	b280      	uxth	r0, r0
 801cfaa:	f7fb fe55 	bl	8018c58 <lwip_htons>
 801cfae:	f010 0003 	ands.w	r0, r0, #3
 801cfb2:	bf18      	it	ne
 801cfb4:	2001      	movne	r0, #1
 801cfb6:	4440      	add	r0, r8
 801cfb8:	8038      	strh	r0, [r7, #0]
 801cfba:	e7c3      	b.n	801cf44 <tcp_receive+0x4e0>
        pcb->unsent_oversize = 0;
 801cfbc:	f8a4 0068 	strh.w	r0, [r4, #104]	; 0x68
 801cfc0:	e659      	b.n	801cc76 <tcp_receive+0x212>
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cfc2:	8b62      	ldrh	r2, [r4, #26]
 801cfc4:	f412 6f00 	tst.w	r2, #2048	; 0x800
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cfc8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801cfca:	bf14      	ite	ne
 801cfcc:	2001      	movne	r0, #1
 801cfce:	2002      	moveq	r0, #2
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801cfd0:	fb12 f200 	smulbb	r2, r2, r0
 801cfd4:	b292      	uxth	r2, r2
          TCP_WND_INC(pcb->cwnd, increase);
 801cfd6:	428a      	cmp	r2, r1
 801cfd8:	bf94      	ite	ls
 801cfda:	1898      	addls	r0, r3, r2
 801cfdc:	1858      	addhi	r0, r3, r1
 801cfde:	b282      	uxth	r2, r0
 801cfe0:	4293      	cmp	r3, r2
 801cfe2:	f240 80e0 	bls.w	801d1a6 <tcp_receive+0x742>
 801cfe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801cfea:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
 801cfee:	e62b      	b.n	801cc48 <tcp_receive+0x1e4>
          if ((pcb->unsent == NULL) ||
 801cff0:	b148      	cbz	r0, 801d006 <tcp_receive+0x5a2>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801cff2:	68c3      	ldr	r3, [r0, #12]
 801cff4:	6ce7      	ldr	r7, [r4, #76]	; 0x4c
 801cff6:	6858      	ldr	r0, [r3, #4]
 801cff8:	f7fb fe32 	bl	8018c60 <lwip_htonl>
 801cffc:	1a38      	subs	r0, r7, r0
          if ((pcb->unsent == NULL) ||
 801cffe:	2800      	cmp	r0, #0
 801d000:	f73f af3e 	bgt.w	801ce80 <tcp_receive+0x41c>
            tcp_clear_flags(pcb, TF_RTO);
 801d004:	8b63      	ldrh	r3, [r4, #26]
 801d006:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d00a:	4f12      	ldr	r7, [pc, #72]	; (801d054 <tcp_receive+0x5f0>)
            tcp_clear_flags(pcb, TF_RTO);
 801d00c:	8363      	strh	r3, [r4, #26]
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d00e:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d010:	6833      	ldr	r3, [r6, #0]
 801d012:	e66d      	b.n	801ccf0 <tcp_receive+0x28c>
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801d014:	4b0b      	ldr	r3, [pc, #44]	; (801d044 <tcp_receive+0x5e0>)
 801d016:	f240 5297 	movw	r2, #1431	; 0x597
 801d01a:	490f      	ldr	r1, [pc, #60]	; (801d058 <tcp_receive+0x5f4>)
 801d01c:	480b      	ldr	r0, [pc, #44]	; (801d04c <tcp_receive+0x5e8>)
 801d01e:	f007 ff19 	bl	8024e54 <iprintf>
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801d022:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d026:	891a      	ldrh	r2, [r3, #8]
 801d028:	e747      	b.n	801ceba <tcp_receive+0x456>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801d02a:	4b06      	ldr	r3, [pc, #24]	; (801d044 <tcp_receive+0x5e0>)
 801d02c:	f240 5295 	movw	r2, #1429	; 0x595
 801d030:	490a      	ldr	r1, [pc, #40]	; (801d05c <tcp_receive+0x5f8>)
 801d032:	4806      	ldr	r0, [pc, #24]	; (801d04c <tcp_receive+0x5e8>)
 801d034:	f007 ff0e 	bl	8024e54 <iprintf>
 801d038:	e737      	b.n	801ceaa <tcp_receive+0x446>
 801d03a:	bf00      	nop
 801d03c:	2002e3d8 	.word	0x2002e3d8
 801d040:	2002e3b0 	.word	0x2002e3b0
 801d044:	08043e0c 	.word	0x08043e0c
 801d048:	08043f40 	.word	0x08043f40
 801d04c:	08029a64 	.word	0x08029a64
 801d050:	08043ed8 	.word	0x08043ed8
 801d054:	2002e3e6 	.word	0x2002e3e6
 801d058:	08043f30 	.word	0x08043f30
 801d05c:	08043f20 	.word	0x08043f20
              pcb->ooseq = pcb->ooseq->next;
 801d060:	6803      	ldr	r3, [r0, #0]
 801d062:	6763      	str	r3, [r4, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801d064:	f7fe fbb0 	bl	801b7c8 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801d068:	6f60      	ldr	r0, [r4, #116]	; 0x74
 801d06a:	2800      	cmp	r0, #0
 801d06c:	d1f8      	bne.n	801d060 <tcp_receive+0x5fc>
        pcb->rcv_nxt = seqno + tcplen;
 801d06e:	883a      	ldrh	r2, [r7, #0]
 801d070:	6831      	ldr	r1, [r6, #0]
 801d072:	4411      	add	r1, r2
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d074:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        pcb->rcv_nxt = seqno + tcplen;
 801d076:	6261      	str	r1, [r4, #36]	; 0x24
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d078:	4293      	cmp	r3, r2
 801d07a:	f0c0 80cb 	bcc.w	801d214 <tcp_receive+0x7b0>
        pcb->rcv_wnd -= tcplen;
 801d07e:	1a9b      	subs	r3, r3, r2
        tcp_update_rcv_ann_wnd(pcb);
 801d080:	4620      	mov	r0, r4
        pcb->rcv_wnd -= tcplen;
 801d082:	8523      	strh	r3, [r4, #40]	; 0x28
        tcp_update_rcv_ann_wnd(pcb);
 801d084:	f7fe fa68 	bl	801b558 <tcp_update_rcv_ann_wnd>
        if (inseg.p->tot_len > 0) {
 801d088:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801d08c:	891a      	ldrh	r2, [r3, #8]
 801d08e:	b122      	cbz	r2, 801d09a <tcp_receive+0x636>
          recv_data = inseg.p;
 801d090:	4ab2      	ldr	r2, [pc, #712]	; (801d35c <tcp_receive+0x8f8>)
 801d092:	6013      	str	r3, [r2, #0]
          inseg.p = NULL;
 801d094:	2300      	movs	r3, #0
 801d096:	f8c9 3004 	str.w	r3, [r9, #4]
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d09a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d09e:	8998      	ldrh	r0, [r3, #12]
 801d0a0:	f7fb fdda 	bl	8018c58 <lwip_htons>
 801d0a4:	07c2      	lsls	r2, r0, #31
 801d0a6:	d504      	bpl.n	801d0b2 <tcp_receive+0x64e>
          recv_flags |= TF_GOT_FIN;
 801d0a8:	4aad      	ldr	r2, [pc, #692]	; (801d360 <tcp_receive+0x8fc>)
 801d0aa:	7813      	ldrb	r3, [r2, #0]
 801d0ac:	f043 0320 	orr.w	r3, r3, #32
 801d0b0:	7013      	strb	r3, [r2, #0]
        while (pcb->ooseq != NULL &&
 801d0b2:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d0b4:	2d00      	cmp	r5, #0
 801d0b6:	d07b      	beq.n	801d1b0 <tcp_receive+0x74c>
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d0b8:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 801d368 <tcp_receive+0x904>
 801d0bc:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 801d380 <tcp_receive+0x91c>
 801d0c0:	4fa8      	ldr	r7, [pc, #672]	; (801d364 <tcp_receive+0x900>)
 801d0c2:	e033      	b.n	801d12c <tcp_receive+0x6c8>
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d0c4:	68eb      	ldr	r3, [r5, #12]
 801d0c6:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d0ca:	8998      	ldrh	r0, [r3, #12]
 801d0cc:	f7fb fdc4 	bl	8018c58 <lwip_htons>
 801d0d0:	f010 0003 	ands.w	r0, r0, #3
 801d0d4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d0d6:	bf18      	it	ne
 801d0d8:	2001      	movne	r0, #1
 801d0da:	4450      	add	r0, sl
 801d0dc:	1a18      	subs	r0, r3, r0
 801d0de:	8520      	strh	r0, [r4, #40]	; 0x28
          tcp_update_rcv_ann_wnd(pcb);
 801d0e0:	4620      	mov	r0, r4
 801d0e2:	f7fe fa39 	bl	801b558 <tcp_update_rcv_ann_wnd>
          if (cseg->p->tot_len > 0) {
 801d0e6:	6869      	ldr	r1, [r5, #4]
 801d0e8:	890b      	ldrh	r3, [r1, #8]
 801d0ea:	b13b      	cbz	r3, 801d0fc <tcp_receive+0x698>
            if (recv_data) {
 801d0ec:	4b9b      	ldr	r3, [pc, #620]	; (801d35c <tcp_receive+0x8f8>)
 801d0ee:	6818      	ldr	r0, [r3, #0]
 801d0f0:	2800      	cmp	r0, #0
 801d0f2:	d05b      	beq.n	801d1ac <tcp_receive+0x748>
              pbuf_cat(recv_data, cseg->p);
 801d0f4:	f7fd fe1e 	bl	801ad34 <pbuf_cat>
            cseg->p = NULL;
 801d0f8:	2300      	movs	r3, #0
 801d0fa:	606b      	str	r3, [r5, #4]
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d0fc:	68eb      	ldr	r3, [r5, #12]
 801d0fe:	8998      	ldrh	r0, [r3, #12]
 801d100:	f7fb fdaa 	bl	8018c58 <lwip_htons>
 801d104:	07c3      	lsls	r3, r0, #31
 801d106:	d509      	bpl.n	801d11c <tcp_receive+0x6b8>
            recv_flags |= TF_GOT_FIN;
 801d108:	4a95      	ldr	r2, [pc, #596]	; (801d360 <tcp_receive+0x8fc>)
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d10a:	7d21      	ldrb	r1, [r4, #20]
            recv_flags |= TF_GOT_FIN;
 801d10c:	7813      	ldrb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d10e:	2904      	cmp	r1, #4
            recv_flags |= TF_GOT_FIN;
 801d110:	f043 0320 	orr.w	r3, r3, #32
 801d114:	7013      	strb	r3, [r2, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d116:	d101      	bne.n	801d11c <tcp_receive+0x6b8>
              pcb->state = CLOSE_WAIT;
 801d118:	2307      	movs	r3, #7
 801d11a:	7523      	strb	r3, [r4, #20]
          pcb->ooseq = cseg->next;
 801d11c:	682b      	ldr	r3, [r5, #0]
          tcp_seg_free(cseg);
 801d11e:	4628      	mov	r0, r5
          pcb->ooseq = cseg->next;
 801d120:	6763      	str	r3, [r4, #116]	; 0x74
          tcp_seg_free(cseg);
 801d122:	f7fe fb51 	bl	801b7c8 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d126:	6f65      	ldr	r5, [r4, #116]	; 0x74
 801d128:	2d00      	cmp	r5, #0
 801d12a:	d041      	beq.n	801d1b0 <tcp_receive+0x74c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d12c:	68ea      	ldr	r2, [r5, #12]
        while (pcb->ooseq != NULL &&
 801d12e:	6a61      	ldr	r1, [r4, #36]	; 0x24
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d130:	6853      	ldr	r3, [r2, #4]
        while (pcb->ooseq != NULL &&
 801d132:	428b      	cmp	r3, r1
 801d134:	d13c      	bne.n	801d1b0 <tcp_receive+0x74c>
          seqno = pcb->ooseq->tcphdr->seqno;
 801d136:	6033      	str	r3, [r6, #0]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d138:	8990      	ldrh	r0, [r2, #12]
 801d13a:	f8b5 a008 	ldrh.w	sl, [r5, #8]
 801d13e:	f7fb fd8b 	bl	8018c58 <lwip_htons>
 801d142:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d144:	f010 0003 	ands.w	r0, r0, #3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d148:	f8b5 b008 	ldrh.w	fp, [r5, #8]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d14c:	bf18      	it	ne
 801d14e:	2001      	movne	r0, #1
 801d150:	449a      	add	sl, r3
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d152:	68eb      	ldr	r3, [r5, #12]
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d154:	4450      	add	r0, sl
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d156:	f8b4 a028 	ldrh.w	sl, [r4, #40]	; 0x28
          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d15a:	6260      	str	r0, [r4, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d15c:	8998      	ldrh	r0, [r3, #12]
 801d15e:	f7fb fd7b 	bl	8018c58 <lwip_htons>
 801d162:	f010 0003 	ands.w	r0, r0, #3
 801d166:	bf18      	it	ne
 801d168:	2001      	movne	r0, #1
 801d16a:	4458      	add	r0, fp
 801d16c:	4582      	cmp	sl, r0
 801d16e:	d2a9      	bcs.n	801d0c4 <tcp_receive+0x660>
 801d170:	464b      	mov	r3, r9
 801d172:	f240 622b 	movw	r2, #1579	; 0x62b
 801d176:	4641      	mov	r1, r8
 801d178:	4638      	mov	r0, r7
 801d17a:	f007 fe6b 	bl	8024e54 <iprintf>
 801d17e:	e7a1      	b.n	801d0c4 <tcp_receive+0x660>
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801d180:	4b79      	ldr	r3, [pc, #484]	; (801d368 <tcp_receive+0x904>)
 801d182:	f240 5294 	movw	r2, #1428	; 0x594
 801d186:	4979      	ldr	r1, [pc, #484]	; (801d36c <tcp_receive+0x908>)
 801d188:	4876      	ldr	r0, [pc, #472]	; (801d364 <tcp_receive+0x900>)
 801d18a:	f007 fe63 	bl	8024e54 <iprintf>
 801d18e:	e687      	b.n	801cea0 <tcp_receive+0x43c>
          TCP_WND_INC(pcb->bytes_acked, acked);
 801d190:	f64f 71ff 	movw	r1, #65535	; 0xffff
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d194:	8e62      	ldrh	r2, [r4, #50]	; 0x32
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d196:	1ac9      	subs	r1, r1, r3
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d198:	441a      	add	r2, r3
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801d19a:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d19e:	b292      	uxth	r2, r2
 801d1a0:	4293      	cmp	r3, r2
 801d1a2:	f63f af20 	bhi.w	801cfe6 <tcp_receive+0x582>
 801d1a6:	f8a4 2048 	strh.w	r2, [r4, #72]	; 0x48
 801d1aa:	e54d      	b.n	801cc48 <tcp_receive+0x1e4>
              recv_data = cseg->p;
 801d1ac:	6019      	str	r1, [r3, #0]
 801d1ae:	e7a3      	b.n	801d0f8 <tcp_receive+0x694>
        tcp_ack(pcb);
 801d1b0:	8b63      	ldrh	r3, [r4, #26]
 801d1b2:	07d8      	lsls	r0, r3, #31
 801d1b4:	d50a      	bpl.n	801d1cc <tcp_receive+0x768>
 801d1b6:	f023 0301 	bic.w	r3, r3, #1
 801d1ba:	f043 0302 	orr.w	r3, r3, #2
 801d1be:	8363      	strh	r3, [r4, #26]
 801d1c0:	e4f4      	b.n	801cbac <tcp_receive+0x148>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d1c2:	486b      	ldr	r0, [pc, #428]	; (801d370 <tcp_receive+0x90c>)
 801d1c4:	f7fe fb1e 	bl	801b804 <tcp_seg_copy>
 801d1c8:	6760      	str	r0, [r4, #116]	; 0x74
 801d1ca:	e4b5      	b.n	801cb38 <tcp_receive+0xd4>
        tcp_ack(pcb);
 801d1cc:	f043 0301 	orr.w	r3, r3, #1
 801d1d0:	8363      	strh	r3, [r4, #26]
 801d1d2:	e4eb      	b.n	801cbac <tcp_receive+0x148>
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d1d4:	4866      	ldr	r0, [pc, #408]	; (801d370 <tcp_receive+0x90c>)
 801d1d6:	f7fe fb15 	bl	801b804 <tcp_seg_copy>
                  if (cseg != NULL) {
 801d1da:	4607      	mov	r7, r0
 801d1dc:	2800      	cmp	r0, #0
 801d1de:	f43f acab 	beq.w	801cb38 <tcp_receive+0xd4>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d1e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801d1e6:	6832      	ldr	r2, [r6, #0]
 801d1e8:	6859      	ldr	r1, [r3, #4]
 801d1ea:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 801d1ee:	440b      	add	r3, r1
 801d1f0:	1a9b      	subs	r3, r3, r2
 801d1f2:	2b00      	cmp	r3, #0
 801d1f4:	dd07      	ble.n	801d206 <tcp_receive+0x7a2>
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d1f6:	1a52      	subs	r2, r2, r1
                      pbuf_realloc(prev->p, prev->len);
 801d1f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d1fc:	b291      	uxth	r1, r2
 801d1fe:	f8a8 1008 	strh.w	r1, [r8, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d202:	f7fd fc4d 	bl	801aaa0 <pbuf_realloc>
                    tcp_oos_insert_segment(cseg, next);
 801d206:	4629      	mov	r1, r5
 801d208:	4638      	mov	r0, r7
                    prev->next = cseg;
 801d20a:	f8c8 7000 	str.w	r7, [r8]
                    tcp_oos_insert_segment(cseg, next);
 801d20e:	f7ff fb35 	bl	801c87c <tcp_oos_insert_segment>
 801d212:	e491      	b.n	801cb38 <tcp_receive+0xd4>
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d214:	4b54      	ldr	r3, [pc, #336]	; (801d368 <tcp_receive+0x904>)
 801d216:	f240 6207 	movw	r2, #1543	; 0x607
 801d21a:	4956      	ldr	r1, [pc, #344]	; (801d374 <tcp_receive+0x910>)
 801d21c:	4851      	ldr	r0, [pc, #324]	; (801d364 <tcp_receive+0x900>)
 801d21e:	f007 fe19 	bl	8024e54 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d222:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d224:	883a      	ldrh	r2, [r7, #0]
 801d226:	e72a      	b.n	801d07e <tcp_receive+0x61a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d228:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d22c:	8998      	ldrh	r0, [r3, #12]
 801d22e:	f7fb fd13 	bl	8018c58 <lwip_htons>
 801d232:	07c5      	lsls	r5, r0, #31
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d234:	f8d9 300c 	ldr.w	r3, [r9, #12]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d238:	d47d      	bmi.n	801d336 <tcp_receive+0x8d2>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d23a:	8998      	ldrh	r0, [r3, #12]
          inseg.len = (u16_t)pcb->rcv_wnd;
 801d23c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 801d23e:	f8a9 3008 	strh.w	r3, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d242:	f7fb fd09 	bl	8018c58 <lwip_htons>
 801d246:	0780      	lsls	r0, r0, #30
            inseg.len -= 1;
 801d248:	f8b9 1008 	ldrh.w	r1, [r9, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d24c:	d503      	bpl.n	801d256 <tcp_receive+0x7f2>
            inseg.len -= 1;
 801d24e:	3901      	subs	r1, #1
 801d250:	b289      	uxth	r1, r1
 801d252:	f8a9 1008 	strh.w	r1, [r9, #8]
          pbuf_realloc(inseg.p, inseg.len);
 801d256:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d25a:	f7fd fc21 	bl	801aaa0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801d25e:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d262:	f8b9 5008 	ldrh.w	r5, [r9, #8]
 801d266:	8998      	ldrh	r0, [r3, #12]
 801d268:	f7fb fcf6 	bl	8018c58 <lwip_htons>
 801d26c:	f010 0303 	ands.w	r3, r0, #3
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d270:	6832      	ldr	r2, [r6, #0]
          tcplen = TCP_TCPLEN(&inseg);
 801d272:	bf18      	it	ne
 801d274:	2301      	movne	r3, #1
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d276:	6a61      	ldr	r1, [r4, #36]	; 0x24
          tcplen = TCP_TCPLEN(&inseg);
 801d278:	442b      	add	r3, r5
 801d27a:	b29b      	uxth	r3, r3
 801d27c:	803b      	strh	r3, [r7, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d27e:	4413      	add	r3, r2
 801d280:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 801d282:	440a      	add	r2, r1
 801d284:	4293      	cmp	r3, r2
 801d286:	f43f ae4e 	beq.w	801cf26 <tcp_receive+0x4c2>
 801d28a:	4b37      	ldr	r3, [pc, #220]	; (801d368 <tcp_receive+0x904>)
 801d28c:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801d290:	4939      	ldr	r1, [pc, #228]	; (801d378 <tcp_receive+0x914>)
 801d292:	4834      	ldr	r0, [pc, #208]	; (801d364 <tcp_receive+0x900>)
 801d294:	f007 fdde 	bl	8024e54 <iprintf>
 801d298:	e645      	b.n	801cf26 <tcp_receive+0x4c2>
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801d29a:	f8b4 2048 	ldrh.w	r2, [r4, #72]	; 0x48
 801d29e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801d2a2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 801d2a4:	4413      	add	r3, r2
 801d2a6:	b29b      	uxth	r3, r3
 801d2a8:	429a      	cmp	r2, r3
 801d2aa:	bf88      	it	hi
 801d2ac:	460b      	movhi	r3, r1
 801d2ae:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
                tcp_rexmit_fast(pcb);
 801d2b2:	4620      	mov	r0, r4
 801d2b4:	f001 fe0a 	bl	801eecc <tcp_rexmit_fast>
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801d2b8:	8839      	ldrh	r1, [r7, #0]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801d2ba:	6833      	ldr	r3, [r6, #0]
 801d2bc:	e518      	b.n	801ccf0 <tcp_receive+0x28c>
                TCP_SEQ_GT(seqno + tcplen,
 801d2be:	eba1 030c 	sub.w	r3, r1, ip
            if (next &&
 801d2c2:	2b00      	cmp	r3, #0
 801d2c4:	dc01      	bgt.n	801d2ca <tcp_receive+0x866>
            pcb->ooseq = next;
 801d2c6:	6765      	str	r5, [r4, #116]	; 0x74
 801d2c8:	e6d4      	b.n	801d074 <tcp_receive+0x610>
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d2ca:	ebac 0c0e 	sub.w	ip, ip, lr
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d2ce:	f8d9 300c 	ldr.w	r3, [r9, #12]
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d2d2:	f8a9 c008 	strh.w	ip, [r9, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d2d6:	8998      	ldrh	r0, [r3, #12]
 801d2d8:	f7fb fcbe 	bl	8018c58 <lwip_htons>
 801d2dc:	0781      	lsls	r1, r0, #30
 801d2de:	d504      	bpl.n	801d2ea <tcp_receive+0x886>
                inseg.len -= 1;
 801d2e0:	f8b9 3008 	ldrh.w	r3, [r9, #8]
 801d2e4:	3b01      	subs	r3, #1
 801d2e6:	f8a9 3008 	strh.w	r3, [r9, #8]
              pbuf_realloc(inseg.p, inseg.len);
 801d2ea:	f8b9 1008 	ldrh.w	r1, [r9, #8]
 801d2ee:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801d2f2:	f7fd fbd5 	bl	801aaa0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d2f6:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d2fa:	f8b9 8008 	ldrh.w	r8, [r9, #8]
 801d2fe:	8998      	ldrh	r0, [r3, #12]
 801d300:	f7fb fcaa 	bl	8018c58 <lwip_htons>
 801d304:	f010 0003 	ands.w	r0, r0, #3
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d308:	68eb      	ldr	r3, [r5, #12]
              tcplen = TCP_TCPLEN(&inseg);
 801d30a:	bf18      	it	ne
 801d30c:	2001      	movne	r0, #1
 801d30e:	eb08 0200 	add.w	r2, r8, r0
 801d312:	b292      	uxth	r2, r2
 801d314:	803a      	strh	r2, [r7, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d316:	6859      	ldr	r1, [r3, #4]
 801d318:	6833      	ldr	r3, [r6, #0]
 801d31a:	4413      	add	r3, r2
 801d31c:	428b      	cmp	r3, r1
 801d31e:	d0d2      	beq.n	801d2c6 <tcp_receive+0x862>
 801d320:	4b11      	ldr	r3, [pc, #68]	; (801d368 <tcp_receive+0x904>)
 801d322:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d326:	4915      	ldr	r1, [pc, #84]	; (801d37c <tcp_receive+0x918>)
 801d328:	480e      	ldr	r0, [pc, #56]	; (801d364 <tcp_receive+0x900>)
 801d32a:	f007 fd93 	bl	8024e54 <iprintf>
        pcb->rcv_nxt = seqno + tcplen;
 801d32e:	883a      	ldrh	r2, [r7, #0]
 801d330:	6831      	ldr	r1, [r6, #0]
 801d332:	4411      	add	r1, r2
 801d334:	e7c7      	b.n	801d2c6 <tcp_receive+0x862>
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801d336:	899d      	ldrh	r5, [r3, #12]
 801d338:	4628      	mov	r0, r5
 801d33a:	f425 557c 	bic.w	r5, r5, #16128	; 0x3f00
 801d33e:	f7fb fc8b 	bl	8018c58 <lwip_htons>
 801d342:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d346:	f7fb fc87 	bl	8018c58 <lwip_htons>
 801d34a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801d34e:	4328      	orrs	r0, r5
 801d350:	8198      	strh	r0, [r3, #12]
 801d352:	b280      	uxth	r0, r0
 801d354:	e772      	b.n	801d23c <tcp_receive+0x7d8>
                    pcb->ooseq = cseg;
 801d356:	6760      	str	r0, [r4, #116]	; 0x74
 801d358:	f7ff bbeb 	b.w	801cb32 <tcp_receive+0xce>
 801d35c:	2002e3c4 	.word	0x2002e3c4
 801d360:	2002e3c8 	.word	0x2002e3c8
 801d364:	08029a64 	.word	0x08029a64
 801d368:	08043e0c 	.word	0x08043e0c
 801d36c:	08043f10 	.word	0x08043f10
 801d370:	2002e3b0 	.word	0x2002e3b0
 801d374:	08043fb4 	.word	0x08043fb4
 801d378:	08043f40 	.word	0x08043f40
 801d37c:	08043f78 	.word	0x08043f78
 801d380:	08043fd4 	.word	0x08043fd4
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d384:	68db      	ldr	r3, [r3, #12]
 801d386:	f8b3 800c 	ldrh.w	r8, [r3, #12]
 801d38a:	4640      	mov	r0, r8
 801d38c:	f428 587c 	bic.w	r8, r8, #16128	; 0x3f00
 801d390:	f7fb fc62 	bl	8018c58 <lwip_htons>
 801d394:	f000 003e 	and.w	r0, r0, #62	; 0x3e
 801d398:	f7fb fc5e 	bl	8018c58 <lwip_htons>
 801d39c:	682b      	ldr	r3, [r5, #0]
 801d39e:	ea48 0800 	orr.w	r8, r8, r0
 801d3a2:	68da      	ldr	r2, [r3, #12]
 801d3a4:	f8a2 800c 	strh.w	r8, [r2, #12]
 801d3a8:	e53b      	b.n	801ce22 <tcp_receive+0x3be>
 801d3aa:	f8df 9004 	ldr.w	r9, [pc, #4]	; 801d3b0 <tcp_receive+0x94c>
 801d3ae:	e5a8      	b.n	801cf02 <tcp_receive+0x49e>
 801d3b0:	2002e3b0 	.word	0x2002e3b0

0801d3b4 <tcp_parseopt.part.0>:

static u8_t
tcp_get_next_optbyte(void)
{
  u16_t optidx = tcp_optidx++;
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3b4:	494a      	ldr	r1, [pc, #296]	; (801d4e0 <tcp_parseopt.part.0+0x12c>)
 801d3b6:	4b4b      	ldr	r3, [pc, #300]	; (801d4e4 <tcp_parseopt.part.0+0x130>)

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d3b8:	4a4b      	ldr	r2, [pc, #300]	; (801d4e8 <tcp_parseopt.part.0+0x134>)
tcp_parseopt(struct tcp_pcb *pcb)
 801d3ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3be:	f8b1 e000 	ldrh.w	lr, [r1]
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d3c2:	2100      	movs	r1, #0
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3c4:	681c      	ldr	r4, [r3, #0]
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d3c6:	fa5f f88e 	uxtb.w	r8, lr
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d3ca:	4b48      	ldr	r3, [pc, #288]	; (801d4ec <tcp_parseopt.part.0+0x138>)
 801d3cc:	f8df 9120 	ldr.w	r9, [pc, #288]	; 801d4f0 <tcp_parseopt.part.0+0x13c>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d3d0:	8816      	ldrh	r6, [r2, #0]
    return tcphdr_opt2[idx];
 801d3d2:	ea6f 0708 	mvn.w	r7, r8
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d3d6:	681d      	ldr	r5, [r3, #0]
 801d3d8:	f8b9 2000 	ldrh.w	r2, [r9]
 801d3dc:	f102 0c14 	add.w	ip, r2, #20
 801d3e0:	44ac      	add	ip, r5
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d3e2:	4296      	cmp	r6, r2
  u16_t optidx = tcp_optidx++;
 801d3e4:	f102 0301 	add.w	r3, r2, #1
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d3e8:	d96d      	bls.n	801d4c6 <tcp_parseopt.part.0+0x112>
  u16_t optidx = tcp_optidx++;
 801d3ea:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3ec:	b1ac      	cbz	r4, 801d41a <tcp_parseopt.part.0+0x66>
 801d3ee:	4596      	cmp	lr, r2
    return tcphdr_opt2[idx];
 801d3f0:	eb07 0103 	add.w	r1, r7, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d3f4:	d811      	bhi.n	801d41a <tcp_parseopt.part.0+0x66>
    return tcphdr_opt2[idx];
 801d3f6:	b2c9      	uxtb	r1, r1
 801d3f8:	5c61      	ldrb	r1, [r4, r1]
      u8_t opt = tcp_get_next_optbyte();
      switch (opt) {
 801d3fa:	2901      	cmp	r1, #1
 801d3fc:	d011      	beq.n	801d422 <tcp_parseopt.part.0+0x6e>
 801d3fe:	2902      	cmp	r1, #2
 801d400:	d017      	beq.n	801d432 <tcp_parseopt.part.0+0x7e>
 801d402:	b191      	cbz	r1, 801d42a <tcp_parseopt.part.0+0x76>
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d404:	b10c      	cbz	r4, 801d40a <tcp_parseopt.part.0+0x56>
 801d406:	4573      	cmp	r3, lr
 801d408:	d242      	bcs.n	801d490 <tcp_parseopt.part.0+0xdc>
    return opts[optidx];
 801d40a:	442b      	add	r3, r5
 801d40c:	7d1b      	ldrb	r3, [r3, #20]
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
          if (data < 2) {
 801d40e:	2b01      	cmp	r3, #1
 801d410:	d961      	bls.n	801d4d6 <tcp_parseopt.part.0+0x122>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d412:	441a      	add	r2, r3
 801d414:	b292      	uxth	r2, r2
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d416:	2101      	movs	r1, #1
 801d418:	e7e0      	b.n	801d3dc <tcp_parseopt.part.0+0x28>
    return opts[optidx];
 801d41a:	f89c 1000 	ldrb.w	r1, [ip]
      switch (opt) {
 801d41e:	2901      	cmp	r1, #1
 801d420:	d1ed      	bne.n	801d3fe <tcp_parseopt.part.0+0x4a>
 801d422:	f10c 0c01 	add.w	ip, ip, #1
  u16_t optidx = tcp_optidx++;
 801d426:	461a      	mov	r2, r3
 801d428:	e7db      	b.n	801d3e2 <tcp_parseopt.part.0+0x2e>
 801d42a:	f8a9 3000 	strh.w	r3, [r9]
      }
    }
  }
}
 801d42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  u16_t optidx = tcp_optidx++;
 801d432:	1c91      	adds	r1, r2, #2
 801d434:	b289      	uxth	r1, r1
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d436:	b10c      	cbz	r4, 801d43c <tcp_parseopt.part.0+0x88>
 801d438:	4573      	cmp	r3, lr
 801d43a:	d224      	bcs.n	801d486 <tcp_parseopt.part.0+0xd2>
    return opts[optidx];
 801d43c:	442b      	add	r3, r5
 801d43e:	7d1b      	ldrb	r3, [r3, #20]
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d440:	2b04      	cmp	r3, #4
 801d442:	d145      	bne.n	801d4d0 <tcp_parseopt.part.0+0x11c>
 801d444:	1c4b      	adds	r3, r1, #1
 801d446:	42b3      	cmp	r3, r6
 801d448:	da42      	bge.n	801d4d0 <tcp_parseopt.part.0+0x11c>
  u16_t optidx = tcp_optidx++;
 801d44a:	1cd3      	adds	r3, r2, #3
 801d44c:	b29b      	uxth	r3, r3
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d44e:	b384      	cbz	r4, 801d4b2 <tcp_parseopt.part.0+0xfe>
 801d450:	458e      	cmp	lr, r1
 801d452:	d822      	bhi.n	801d49a <tcp_parseopt.part.0+0xe6>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d454:	eba1 0108 	sub.w	r1, r1, r8
  u16_t optidx = tcp_optidx++;
 801d458:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d45a:	459e      	cmp	lr, r3
    return tcphdr_opt2[idx];
 801d45c:	b2c9      	uxtb	r1, r1
  u16_t optidx = tcp_optidx++;
 801d45e:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d460:	f814 c001 	ldrb.w	ip, [r4, r1]
 801d464:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d468:	d820      	bhi.n	801d4ac <tcp_parseopt.part.0+0xf8>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d46a:	eba3 0108 	sub.w	r1, r3, r8
    return tcphdr_opt2[idx];
 801d46e:	b2c9      	uxtb	r1, r1
 801d470:	5c63      	ldrb	r3, [r4, r1]
          mss |= tcp_get_next_optbyte();
 801d472:	ea4c 0303 	orr.w	r3, ip, r3
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d476:	1e59      	subs	r1, r3, #1
 801d478:	f5b1 7f06 	cmp.w	r1, #536	; 0x218
 801d47c:	bf28      	it	cs
 801d47e:	f44f 7306 	movcs.w	r3, #536	; 0x218
 801d482:	8643      	strh	r3, [r0, #50]	; 0x32
          break;
 801d484:	e7c7      	b.n	801d416 <tcp_parseopt.part.0+0x62>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d486:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d48a:	b2db      	uxtb	r3, r3
 801d48c:	5ce3      	ldrb	r3, [r4, r3]
 801d48e:	e7d7      	b.n	801d440 <tcp_parseopt.part.0+0x8c>
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d490:	eba3 0308 	sub.w	r3, r3, r8
    return tcphdr_opt2[idx];
 801d494:	b2db      	uxtb	r3, r3
 801d496:	5ce3      	ldrb	r3, [r4, r3]
 801d498:	e7b9      	b.n	801d40e <tcp_parseopt.part.0+0x5a>
    return opts[optidx];
 801d49a:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d49c:	3204      	adds	r2, #4
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d49e:	459e      	cmp	lr, r3
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d4a0:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d4a4:	b292      	uxth	r2, r2
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d4a6:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d4aa:	d9de      	bls.n	801d46a <tcp_parseopt.part.0+0xb6>
    return opts[optidx];
 801d4ac:	442b      	add	r3, r5
 801d4ae:	7d1b      	ldrb	r3, [r3, #20]
 801d4b0:	e7df      	b.n	801d472 <tcp_parseopt.part.0+0xbe>
 801d4b2:	4429      	add	r1, r5
  u16_t optidx = tcp_optidx++;
 801d4b4:	3204      	adds	r2, #4
    return opts[optidx];
 801d4b6:	442b      	add	r3, r5
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d4b8:	f891 c014 	ldrb.w	ip, [r1, #20]
  u16_t optidx = tcp_optidx++;
 801d4bc:	b292      	uxth	r2, r2
    return opts[optidx];
 801d4be:	7d1b      	ldrb	r3, [r3, #20]
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d4c0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
    return opts[optidx];
 801d4c4:	e7d5      	b.n	801d472 <tcp_parseopt.part.0+0xbe>
 801d4c6:	2900      	cmp	r1, #0
 801d4c8:	d0b1      	beq.n	801d42e <tcp_parseopt.part.0+0x7a>
 801d4ca:	f8a9 2000 	strh.w	r2, [r9]
 801d4ce:	e7ae      	b.n	801d42e <tcp_parseopt.part.0+0x7a>
 801d4d0:	f8a9 1000 	strh.w	r1, [r9]
 801d4d4:	e7ab      	b.n	801d42e <tcp_parseopt.part.0+0x7a>
  u16_t optidx = tcp_optidx++;
 801d4d6:	3202      	adds	r2, #2
 801d4d8:	f8a9 2000 	strh.w	r2, [r9]
 801d4dc:	e7a7      	b.n	801d42e <tcp_parseopt.part.0+0x7a>
 801d4de:	bf00      	nop
 801d4e0:	2002e3dc 	.word	0x2002e3dc
 801d4e4:	2002e3e0 	.word	0x2002e3e0
 801d4e8:	2002e3e4 	.word	0x2002e3e4
 801d4ec:	2002e3d8 	.word	0x2002e3d8
 801d4f0:	2002e3d4 	.word	0x2002e3d4

0801d4f4 <tcp_input>:
{
 801d4f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d4f8:	4604      	mov	r4, r0
{
 801d4fa:	b089      	sub	sp, #36	; 0x24
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d4fc:	2800      	cmp	r0, #0
 801d4fe:	f000 80d2 	beq.w	801d6a6 <tcp_input+0x1b2>
  if (p->len < TCP_HLEN) {
 801d502:	8963      	ldrh	r3, [r4, #10]
  tcphdr = (struct tcp_hdr *)p->payload;
 801d504:	4e6b      	ldr	r6, [pc, #428]	; (801d6b4 <tcp_input+0x1c0>)
 801d506:	6862      	ldr	r2, [r4, #4]
  if (p->len < TCP_HLEN) {
 801d508:	2b13      	cmp	r3, #19
  tcphdr = (struct tcp_hdr *)p->payload;
 801d50a:	6032      	str	r2, [r6, #0]
  if (p->len < TCP_HLEN) {
 801d50c:	d805      	bhi.n	801d51a <tcp_input+0x26>
  pbuf_free(p);
 801d50e:	4620      	mov	r0, r4
}
 801d510:	b009      	add	sp, #36	; 0x24
 801d512:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 801d516:	f7fd bbdb 	b.w	801acd0 <pbuf_free>
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d51a:	4f67      	ldr	r7, [pc, #412]	; (801d6b8 <tcp_input+0x1c4>)
 801d51c:	6839      	ldr	r1, [r7, #0]
 801d51e:	6978      	ldr	r0, [r7, #20]
 801d520:	f005 f9ae 	bl	8022880 <ip4_addr_isbroadcast_u32>
 801d524:	2800      	cmp	r0, #0
 801d526:	d1f2      	bne.n	801d50e <tcp_input+0x1a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801d528:	697b      	ldr	r3, [r7, #20]
 801d52a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801d52e:	2be0      	cmp	r3, #224	; 0xe0
 801d530:	d0ed      	beq.n	801d50e <tcp_input+0x1a>
    u16_t chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801d532:	f107 0314 	add.w	r3, r7, #20
 801d536:	f107 0910 	add.w	r9, r7, #16
 801d53a:	2106      	movs	r1, #6
 801d53c:	4620      	mov	r0, r4
 801d53e:	9300      	str	r3, [sp, #0]
 801d540:	464b      	mov	r3, r9
 801d542:	8922      	ldrh	r2, [r4, #8]
 801d544:	f7fc f91c 	bl	8019780 <ip_chksum_pseudo>
    if (chksum != 0) {
 801d548:	4605      	mov	r5, r0
 801d54a:	2800      	cmp	r0, #0
 801d54c:	d1df      	bne.n	801d50e <tcp_input+0x1a>
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801d54e:	6833      	ldr	r3, [r6, #0]
 801d550:	8998      	ldrh	r0, [r3, #12]
 801d552:	f7fb fb81 	bl	8018c58 <lwip_htons>
 801d556:	0a80      	lsrs	r0, r0, #10
 801d558:	f000 01fc 	and.w	r1, r0, #252	; 0xfc
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801d55c:	2913      	cmp	r1, #19
 801d55e:	d9d6      	bls.n	801d50e <tcp_input+0x1a>
 801d560:	8923      	ldrh	r3, [r4, #8]
 801d562:	b28a      	uxth	r2, r1
 801d564:	428b      	cmp	r3, r1
 801d566:	d3d2      	bcc.n	801d50e <tcp_input+0x1a>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d568:	f1a2 0314 	sub.w	r3, r2, #20
 801d56c:	4853      	ldr	r0, [pc, #332]	; (801d6bc <tcp_input+0x1c8>)
  tcphdr_opt2 = NULL;
 801d56e:	f8df 8178 	ldr.w	r8, [pc, #376]	; 801d6e8 <tcp_input+0x1f4>
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d572:	b29b      	uxth	r3, r3
  tcphdr_opt2 = NULL;
 801d574:	f8c8 5000 	str.w	r5, [r8]
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801d578:	8003      	strh	r3, [r0, #0]
  if (p->len >= hdrlen_bytes) {
 801d57a:	8960      	ldrh	r0, [r4, #10]
 801d57c:	4290      	cmp	r0, r2
 801d57e:	f080 819f 	bcs.w	801d8c0 <tcp_input+0x3cc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801d582:	6823      	ldr	r3, [r4, #0]
 801d584:	2b00      	cmp	r3, #0
 801d586:	f000 837b 	beq.w	801dc80 <tcp_input+0x78c>
    pbuf_remove_header(p, TCP_HLEN);
 801d58a:	2114      	movs	r1, #20
 801d58c:	4620      	mov	r0, r4
 801d58e:	f7fd fb13 	bl	801abb8 <pbuf_remove_header>
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d592:	4b4a      	ldr	r3, [pc, #296]	; (801d6bc <tcp_input+0x1c8>)
    tcphdr_opt1len = p->len;
 801d594:	8965      	ldrh	r5, [r4, #10]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d596:	4620      	mov	r0, r4
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d598:	f8b3 a000 	ldrh.w	sl, [r3]
    tcphdr_opt1len = p->len;
 801d59c:	4b48      	ldr	r3, [pc, #288]	; (801d6c0 <tcp_input+0x1cc>)
    pbuf_remove_header(p, tcphdr_opt1len);
 801d59e:	4629      	mov	r1, r5
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d5a0:	ebaa 0b05 	sub.w	fp, sl, r5
    tcphdr_opt1len = p->len;
 801d5a4:	801d      	strh	r5, [r3, #0]
    pbuf_remove_header(p, tcphdr_opt1len);
 801d5a6:	f7fd fb07 	bl	801abb8 <pbuf_remove_header>
    if (opt2len > p->next->len) {
 801d5aa:	6820      	ldr	r0, [r4, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801d5ac:	fa1f fb8b 	uxth.w	fp, fp
    if (opt2len > p->next->len) {
 801d5b0:	8943      	ldrh	r3, [r0, #10]
 801d5b2:	455b      	cmp	r3, fp
 801d5b4:	d3ab      	bcc.n	801d50e <tcp_input+0x1a>
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d5b6:	6843      	ldr	r3, [r0, #4]
    pbuf_remove_header(p->next, opt2len);
 801d5b8:	4659      	mov	r1, fp
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801d5ba:	f8c8 3000 	str.w	r3, [r8]
    pbuf_remove_header(p->next, opt2len);
 801d5be:	f7fd fafb 	bl	801abb8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d5c2:	8923      	ldrh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d5c4:	8962      	ldrh	r2, [r4, #10]
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801d5c6:	442b      	add	r3, r5
 801d5c8:	eba3 030a 	sub.w	r3, r3, sl
 801d5cc:	b29b      	uxth	r3, r3
 801d5ce:	8123      	strh	r3, [r4, #8]
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801d5d0:	2a00      	cmp	r2, #0
 801d5d2:	f040 835c 	bne.w	801dc8e <tcp_input+0x79a>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801d5d6:	6822      	ldr	r2, [r4, #0]
 801d5d8:	8912      	ldrh	r2, [r2, #8]
 801d5da:	429a      	cmp	r2, r3
 801d5dc:	d005      	beq.n	801d5ea <tcp_input+0xf6>
 801d5de:	4b39      	ldr	r3, [pc, #228]	; (801d6c4 <tcp_input+0x1d0>)
 801d5e0:	22e0      	movs	r2, #224	; 0xe0
 801d5e2:	4939      	ldr	r1, [pc, #228]	; (801d6c8 <tcp_input+0x1d4>)
 801d5e4:	4839      	ldr	r0, [pc, #228]	; (801d6cc <tcp_input+0x1d8>)
 801d5e6:	f007 fc35 	bl	8024e54 <iprintf>
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801d5ea:	6835      	ldr	r5, [r6, #0]
 801d5ec:	8828      	ldrh	r0, [r5, #0]
 801d5ee:	f7fb fb33 	bl	8018c58 <lwip_htons>
 801d5f2:	8028      	strh	r0, [r5, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801d5f4:	6835      	ldr	r5, [r6, #0]
 801d5f6:	8868      	ldrh	r0, [r5, #2]
 801d5f8:	f7fb fb2e 	bl	8018c58 <lwip_htons>
 801d5fc:	8068      	strh	r0, [r5, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d5fe:	6835      	ldr	r5, [r6, #0]
 801d600:	6868      	ldr	r0, [r5, #4]
 801d602:	f7fb fb2d 	bl	8018c60 <lwip_htonl>
 801d606:	4b32      	ldr	r3, [pc, #200]	; (801d6d0 <tcp_input+0x1dc>)
 801d608:	6068      	str	r0, [r5, #4]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d60a:	6835      	ldr	r5, [r6, #0]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801d60c:	6018      	str	r0, [r3, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d60e:	68a8      	ldr	r0, [r5, #8]
 801d610:	f7fb fb26 	bl	8018c60 <lwip_htonl>
 801d614:	4b2f      	ldr	r3, [pc, #188]	; (801d6d4 <tcp_input+0x1e0>)
 801d616:	60a8      	str	r0, [r5, #8]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d618:	6835      	ldr	r5, [r6, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801d61a:	6018      	str	r0, [r3, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d61c:	89e8      	ldrh	r0, [r5, #14]
 801d61e:	f7fb fb1b 	bl	8018c58 <lwip_htons>
  flags = TCPH_FLAGS(tcphdr);
 801d622:	6833      	ldr	r3, [r6, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801d624:	81e8      	strh	r0, [r5, #14]
  flags = TCPH_FLAGS(tcphdr);
 801d626:	8998      	ldrh	r0, [r3, #12]
 801d628:	f7fb fb16 	bl	8018c58 <lwip_htons>
 801d62c:	492a      	ldr	r1, [pc, #168]	; (801d6d8 <tcp_input+0x1e4>)
 801d62e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
  tcplen = p->tot_len;
 801d632:	8923      	ldrh	r3, [r4, #8]
  flags = TCPH_FLAGS(tcphdr);
 801d634:	700a      	strb	r2, [r1, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801d636:	0782      	lsls	r2, r0, #30
 801d638:	f040 8139 	bne.w	801d8ae <tcp_input+0x3ba>
  tcplen = p->tot_len;
 801d63c:	4a27      	ldr	r2, [pc, #156]	; (801d6dc <tcp_input+0x1e8>)
 801d63e:	9205      	str	r2, [sp, #20]
 801d640:	8013      	strh	r3, [r2, #0]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d642:	4b27      	ldr	r3, [pc, #156]	; (801d6e0 <tcp_input+0x1ec>)
 801d644:	681d      	ldr	r5, [r3, #0]
 801d646:	2d00      	cmp	r5, #0
 801d648:	f000 80e0 	beq.w	801d80c <tcp_input+0x318>
  prev = NULL;
 801d64c:	f04f 0800 	mov.w	r8, #0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d650:	4b1c      	ldr	r3, [pc, #112]	; (801d6c4 <tcp_input+0x1d0>)
 801d652:	f8df b098 	ldr.w	fp, [pc, #152]	; 801d6ec <tcp_input+0x1f8>
 801d656:	f8df a074 	ldr.w	sl, [pc, #116]	; 801d6cc <tcp_input+0x1d8>
 801d65a:	e019      	b.n	801d690 <tcp_input+0x19c>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d65c:	2a0a      	cmp	r2, #10
 801d65e:	f000 80cd 	beq.w	801d7fc <tcp_input+0x308>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d662:	2a01      	cmp	r2, #1
 801d664:	f000 80c3 	beq.w	801d7ee <tcp_input+0x2fa>
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d668:	7a29      	ldrb	r1, [r5, #8]
 801d66a:	b131      	cbz	r1, 801d67a <tcp_input+0x186>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d66c:	687a      	ldr	r2, [r7, #4]
 801d66e:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801d672:	3201      	adds	r2, #1
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d674:	b2d2      	uxtb	r2, r2
 801d676:	4291      	cmp	r1, r2
 801d678:	d104      	bne.n	801d684 <tcp_input+0x190>
    if (pcb->remote_port == tcphdr->src &&
 801d67a:	6832      	ldr	r2, [r6, #0]
 801d67c:	8b28      	ldrh	r0, [r5, #24]
 801d67e:	8811      	ldrh	r1, [r2, #0]
 801d680:	4288      	cmp	r0, r1
 801d682:	d035      	beq.n	801d6f0 <tcp_input+0x1fc>
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801d684:	68ea      	ldr	r2, [r5, #12]
 801d686:	46a8      	mov	r8, r5
 801d688:	2a00      	cmp	r2, #0
 801d68a:	f000 80bf 	beq.w	801d80c <tcp_input+0x318>
 801d68e:	4615      	mov	r5, r2
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801d690:	7d2a      	ldrb	r2, [r5, #20]
 801d692:	2a00      	cmp	r2, #0
 801d694:	d1e2      	bne.n	801d65c <tcp_input+0x168>
 801d696:	22fb      	movs	r2, #251	; 0xfb
 801d698:	4659      	mov	r1, fp
 801d69a:	4650      	mov	r0, sl
 801d69c:	f007 fbda 	bl	8024e54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d6a0:	7d2a      	ldrb	r2, [r5, #20]
 801d6a2:	4b08      	ldr	r3, [pc, #32]	; (801d6c4 <tcp_input+0x1d0>)
 801d6a4:	e7da      	b.n	801d65c <tcp_input+0x168>
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801d6a6:	4b07      	ldr	r3, [pc, #28]	; (801d6c4 <tcp_input+0x1d0>)
 801d6a8:	2283      	movs	r2, #131	; 0x83
 801d6aa:	490e      	ldr	r1, [pc, #56]	; (801d6e4 <tcp_input+0x1f0>)
 801d6ac:	4807      	ldr	r0, [pc, #28]	; (801d6cc <tcp_input+0x1d8>)
 801d6ae:	f007 fbd1 	bl	8024e54 <iprintf>
 801d6b2:	e726      	b.n	801d502 <tcp_input+0xe>
 801d6b4:	2002e3d8 	.word	0x2002e3d8
 801d6b8:	2001f1f0 	.word	0x2001f1f0
 801d6bc:	2002e3e4 	.word	0x2002e3e4
 801d6c0:	2002e3dc 	.word	0x2002e3dc
 801d6c4:	08043e0c 	.word	0x08043e0c
 801d6c8:	08044030 	.word	0x08044030
 801d6cc:	08029a64 	.word	0x08029a64
 801d6d0:	2002e3cc 	.word	0x2002e3cc
 801d6d4:	2002e3a8 	.word	0x2002e3a8
 801d6d8:	2002e3ac 	.word	0x2002e3ac
 801d6dc:	2002e3e6 	.word	0x2002e3e6
 801d6e0:	2002e38c 	.word	0x2002e38c
 801d6e4:	08043ffc 	.word	0x08043ffc
 801d6e8:	2002e3e0 	.word	0x2002e3e0
 801d6ec:	08044050 	.word	0x08044050
    if (pcb->remote_port == tcphdr->src &&
 801d6f0:	8852      	ldrh	r2, [r2, #2]
 801d6f2:	8ae9      	ldrh	r1, [r5, #22]
 801d6f4:	4291      	cmp	r1, r2
 801d6f6:	d1c5      	bne.n	801d684 <tcp_input+0x190>
        pcb->local_port == tcphdr->dest &&
 801d6f8:	6869      	ldr	r1, [r5, #4]
 801d6fa:	693a      	ldr	r2, [r7, #16]
 801d6fc:	4291      	cmp	r1, r2
 801d6fe:	d1c1      	bne.n	801d684 <tcp_input+0x190>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d700:	6829      	ldr	r1, [r5, #0]
 801d702:	697a      	ldr	r2, [r7, #20]
 801d704:	4291      	cmp	r1, r2
 801d706:	d1bd      	bne.n	801d684 <tcp_input+0x190>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801d708:	68eb      	ldr	r3, [r5, #12]
 801d70a:	42ab      	cmp	r3, r5
 801d70c:	f000 846e 	beq.w	801dfec <tcp_input+0xaf8>
      if (prev != NULL) {
 801d710:	f1b8 0f00 	cmp.w	r8, #0
 801d714:	d009      	beq.n	801d72a <tcp_input+0x236>
        pcb->next = tcp_active_pcbs;
 801d716:	4a75      	ldr	r2, [pc, #468]	; (801d8ec <tcp_input+0x3f8>)
        prev->next = pcb->next;
 801d718:	f8c8 300c 	str.w	r3, [r8, #12]
        pcb->next = tcp_active_pcbs;
 801d71c:	6813      	ldr	r3, [r2, #0]
        tcp_active_pcbs = pcb;
 801d71e:	6015      	str	r5, [r2, #0]
        pcb->next = tcp_active_pcbs;
 801d720:	60eb      	str	r3, [r5, #12]
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801d722:	68eb      	ldr	r3, [r5, #12]
 801d724:	42ab      	cmp	r3, r5
 801d726:	f000 8447 	beq.w	801dfb8 <tcp_input+0xac4>
    inseg.next = NULL;
 801d72a:	2300      	movs	r3, #0
 801d72c:	4f70      	ldr	r7, [pc, #448]	; (801d8f0 <tcp_input+0x3fc>)
    recv_data = NULL;
 801d72e:	f8df 81e8 	ldr.w	r8, [pc, #488]	; 801d918 <tcp_input+0x424>
    recv_flags = 0;
 801d732:	f8df a1e8 	ldr.w	sl, [pc, #488]	; 801d91c <tcp_input+0x428>
    recv_acked = 0;
 801d736:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 801d920 <tcp_input+0x42c>
    inseg.len = p->tot_len;
 801d73a:	8922      	ldrh	r2, [r4, #8]
    inseg.next = NULL;
 801d73c:	603b      	str	r3, [r7, #0]
    recv_data = NULL;
 801d73e:	f8c8 3000 	str.w	r3, [r8]
    recv_flags = 0;
 801d742:	f88a 3000 	strb.w	r3, [sl]
    recv_acked = 0;
 801d746:	f8ab 3000 	strh.w	r3, [fp]
    if (flags & TCP_PSH) {
 801d74a:	4b6a      	ldr	r3, [pc, #424]	; (801d8f4 <tcp_input+0x400>)
    inseg.len = p->tot_len;
 801d74c:	813a      	strh	r2, [r7, #8]
    if (flags & TCP_PSH) {
 801d74e:	781b      	ldrb	r3, [r3, #0]
    inseg.tcphdr = tcphdr;
 801d750:	6832      	ldr	r2, [r6, #0]
    inseg.p = p;
 801d752:	607c      	str	r4, [r7, #4]
    inseg.tcphdr = tcphdr;
 801d754:	60fa      	str	r2, [r7, #12]
    if (flags & TCP_PSH) {
 801d756:	071a      	lsls	r2, r3, #28
 801d758:	d503      	bpl.n	801d762 <tcp_input+0x26e>
      p->flags |= PBUF_FLAG_PUSH;
 801d75a:	7b62      	ldrb	r2, [r4, #13]
 801d75c:	f042 0201 	orr.w	r2, r2, #1
 801d760:	7362      	strb	r2, [r4, #13]
    if (pcb->refused_data != NULL) {
 801d762:	6faa      	ldr	r2, [r5, #120]	; 0x78
 801d764:	b172      	cbz	r2, 801d784 <tcp_input+0x290>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801d766:	4628      	mov	r0, r5
 801d768:	f7fe ff78 	bl	801c65c <tcp_process_refused_data>
 801d76c:	300d      	adds	r0, #13
 801d76e:	f000 8296 	beq.w	801dc9e <tcp_input+0x7aa>
 801d772:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801d774:	b123      	cbz	r3, 801d780 <tcp_input+0x28c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801d776:	9b05      	ldr	r3, [sp, #20]
 801d778:	881b      	ldrh	r3, [r3, #0]
 801d77a:	2b00      	cmp	r3, #0
 801d77c:	f040 828f 	bne.w	801dc9e <tcp_input+0x7aa>
  if (flags & TCP_RST) {
 801d780:	4b5c      	ldr	r3, [pc, #368]	; (801d8f4 <tcp_input+0x400>)
 801d782:	781b      	ldrb	r3, [r3, #0]
    tcp_input_pcb = pcb;
 801d784:	4c5c      	ldr	r4, [pc, #368]	; (801d8f8 <tcp_input+0x404>)
  if (flags & TCP_RST) {
 801d786:	075a      	lsls	r2, r3, #29
    tcp_input_pcb = pcb;
 801d788:	6025      	str	r5, [r4, #0]
  if (flags & TCP_RST) {
 801d78a:	f140 8163 	bpl.w	801da54 <tcp_input+0x560>
    if (pcb->state == SYN_SENT) {
 801d78e:	7d29      	ldrb	r1, [r5, #20]
 801d790:	2902      	cmp	r1, #2
 801d792:	f000 8350 	beq.w	801de36 <tcp_input+0x942>
      if (seqno == pcb->rcv_nxt) {
 801d796:	4b59      	ldr	r3, [pc, #356]	; (801d8fc <tcp_input+0x408>)
 801d798:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 801d79a:	681b      	ldr	r3, [r3, #0]
 801d79c:	429a      	cmp	r2, r3
 801d79e:	f000 844a 	beq.w	801e036 <tcp_input+0xb42>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d7a2:	1a9b      	subs	r3, r3, r2
 801d7a4:	d404      	bmi.n	801d7b0 <tcp_input+0x2bc>
 801d7a6:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 801d7a8:	1a9b      	subs	r3, r3, r2
 801d7aa:	2b00      	cmp	r3, #0
 801d7ac:	f340 833e 	ble.w	801de2c <tcp_input+0x938>
      if (recv_flags & TF_RESET) {
 801d7b0:	f89a 3000 	ldrb.w	r3, [sl]
 801d7b4:	0718      	lsls	r0, r3, #28
 801d7b6:	f140 8278 	bpl.w	801dcaa <tcp_input+0x7b6>
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801d7ba:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 801d7be:	b11b      	cbz	r3, 801d7c8 <tcp_input+0x2d4>
 801d7c0:	f06f 010d 	mvn.w	r1, #13
 801d7c4:	6928      	ldr	r0, [r5, #16]
 801d7c6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801d7c8:	4848      	ldr	r0, [pc, #288]	; (801d8ec <tcp_input+0x3f8>)
 801d7ca:	4629      	mov	r1, r5
 801d7cc:	f7fe fbc4 	bl	801bf58 <tcp_pcb_remove>
        tcp_free(pcb);
 801d7d0:	4628      	mov	r0, r5
 801d7d2:	f7fd fdbd 	bl	801b350 <tcp_free>
    tcp_input_pcb = NULL;
 801d7d6:	2500      	movs	r5, #0
    if (inseg.p != NULL) {
 801d7d8:	6878      	ldr	r0, [r7, #4]
    tcp_input_pcb = NULL;
 801d7da:	6025      	str	r5, [r4, #0]
    recv_data = NULL;
 801d7dc:	f8c8 5000 	str.w	r5, [r8]
    if (inseg.p != NULL) {
 801d7e0:	b110      	cbz	r0, 801d7e8 <tcp_input+0x2f4>
      pbuf_free(inseg.p);
 801d7e2:	f7fd fa75 	bl	801acd0 <pbuf_free>
      inseg.p = NULL;
 801d7e6:	607d      	str	r5, [r7, #4]
}
 801d7e8:	b009      	add	sp, #36	; 0x24
 801d7ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d7ee:	22fd      	movs	r2, #253	; 0xfd
 801d7f0:	4943      	ldr	r1, [pc, #268]	; (801d900 <tcp_input+0x40c>)
 801d7f2:	4650      	mov	r0, sl
 801d7f4:	f007 fb2e 	bl	8024e54 <iprintf>
 801d7f8:	4b42      	ldr	r3, [pc, #264]	; (801d904 <tcp_input+0x410>)
 801d7fa:	e735      	b.n	801d668 <tcp_input+0x174>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801d7fc:	22fc      	movs	r2, #252	; 0xfc
 801d7fe:	4942      	ldr	r1, [pc, #264]	; (801d908 <tcp_input+0x414>)
 801d800:	4650      	mov	r0, sl
 801d802:	f007 fb27 	bl	8024e54 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801d806:	7d2a      	ldrb	r2, [r5, #20]
 801d808:	4b3e      	ldr	r3, [pc, #248]	; (801d904 <tcp_input+0x410>)
 801d80a:	e72a      	b.n	801d662 <tcp_input+0x16e>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d80c:	4b3f      	ldr	r3, [pc, #252]	; (801d90c <tcp_input+0x418>)
 801d80e:	681d      	ldr	r5, [r3, #0]
 801d810:	2d00      	cmp	r5, #0
 801d812:	d05b      	beq.n	801d8cc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d814:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 801d904 <tcp_input+0x410>
 801d818:	f8df b108 	ldr.w	fp, [pc, #264]	; 801d924 <tcp_input+0x430>
 801d81c:	f8df a108 	ldr.w	sl, [pc, #264]	; 801d928 <tcp_input+0x434>
 801d820:	e002      	b.n	801d828 <tcp_input+0x334>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801d822:	68ed      	ldr	r5, [r5, #12]
 801d824:	2d00      	cmp	r5, #0
 801d826:	d051      	beq.n	801d8cc <tcp_input+0x3d8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801d828:	7d2b      	ldrb	r3, [r5, #20]
 801d82a:	2b0a      	cmp	r3, #10
 801d82c:	4643      	mov	r3, r8
 801d82e:	d005      	beq.n	801d83c <tcp_input+0x348>
 801d830:	f240 121f 	movw	r2, #287	; 0x11f
 801d834:	4659      	mov	r1, fp
 801d836:	4650      	mov	r0, sl
 801d838:	f007 fb0c 	bl	8024e54 <iprintf>
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d83c:	7a2a      	ldrb	r2, [r5, #8]
 801d83e:	b132      	cbz	r2, 801d84e <tcp_input+0x35a>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d840:	687b      	ldr	r3, [r7, #4]
 801d842:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801d846:	3301      	adds	r3, #1
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801d848:	b2db      	uxtb	r3, r3
 801d84a:	429a      	cmp	r2, r3
 801d84c:	d1e9      	bne.n	801d822 <tcp_input+0x32e>
      if (pcb->remote_port == tcphdr->src &&
 801d84e:	6832      	ldr	r2, [r6, #0]
 801d850:	8b2b      	ldrh	r3, [r5, #24]
 801d852:	8811      	ldrh	r1, [r2, #0]
 801d854:	428b      	cmp	r3, r1
 801d856:	d1e4      	bne.n	801d822 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d858:	8852      	ldrh	r2, [r2, #2]
      if (pcb->remote_port == tcphdr->src &&
 801d85a:	8ae8      	ldrh	r0, [r5, #22]
 801d85c:	4290      	cmp	r0, r2
 801d85e:	d1e0      	bne.n	801d822 <tcp_input+0x32e>
          pcb->local_port == tcphdr->dest &&
 801d860:	6869      	ldr	r1, [r5, #4]
 801d862:	693a      	ldr	r2, [r7, #16]
 801d864:	4291      	cmp	r1, r2
 801d866:	d1dc      	bne.n	801d822 <tcp_input+0x32e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801d868:	6829      	ldr	r1, [r5, #0]
 801d86a:	697a      	ldr	r2, [r7, #20]
 801d86c:	4291      	cmp	r1, r2
 801d86e:	d1d8      	bne.n	801d822 <tcp_input+0x32e>
  if (flags & TCP_RST) {
 801d870:	4a20      	ldr	r2, [pc, #128]	; (801d8f4 <tcp_input+0x400>)
 801d872:	7812      	ldrb	r2, [r2, #0]
 801d874:	0757      	lsls	r7, r2, #29
 801d876:	f53f ae4a 	bmi.w	801d50e <tcp_input+0x1a>
  if (flags & TCP_SYN) {
 801d87a:	0796      	lsls	r6, r2, #30
 801d87c:	f140 8395 	bpl.w	801dfaa <tcp_input+0xab6>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801d880:	4a1e      	ldr	r2, [pc, #120]	; (801d8fc <tcp_input+0x408>)
 801d882:	6a69      	ldr	r1, [r5, #36]	; 0x24
 801d884:	6812      	ldr	r2, [r2, #0]
 801d886:	1a51      	subs	r1, r2, r1
 801d888:	d404      	bmi.n	801d894 <tcp_input+0x3a0>
 801d88a:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 801d88c:	1b89      	subs	r1, r1, r6
 801d88e:	2900      	cmp	r1, #0
 801d890:	f340 83ba 	ble.w	801e008 <tcp_input+0xb14>
  if ((tcplen > 0)) {
 801d894:	9b05      	ldr	r3, [sp, #20]
 801d896:	881b      	ldrh	r3, [r3, #0]
 801d898:	2b00      	cmp	r3, #0
 801d89a:	f43f ae38 	beq.w	801d50e <tcp_input+0x1a>
    tcp_ack_now(pcb);
 801d89e:	8b6b      	ldrh	r3, [r5, #26]
    tcp_output(pcb);
 801d8a0:	4628      	mov	r0, r5
    tcp_ack_now(pcb);
 801d8a2:	f043 0302 	orr.w	r3, r3, #2
 801d8a6:	836b      	strh	r3, [r5, #26]
    tcp_output(pcb);
 801d8a8:	f001 fbc4 	bl	801f034 <tcp_output>
        pbuf_free(p);
 801d8ac:	e62f      	b.n	801d50e <tcp_input+0x1a>
    tcplen++;
 801d8ae:	1c5a      	adds	r2, r3, #1
 801d8b0:	4917      	ldr	r1, [pc, #92]	; (801d910 <tcp_input+0x41c>)
 801d8b2:	b292      	uxth	r2, r2
 801d8b4:	9105      	str	r1, [sp, #20]
    if (tcplen < p->tot_len) {
 801d8b6:	4293      	cmp	r3, r2
    tcplen++;
 801d8b8:	800a      	strh	r2, [r1, #0]
    if (tcplen < p->tot_len) {
 801d8ba:	f67f aec2 	bls.w	801d642 <tcp_input+0x14e>
 801d8be:	e626      	b.n	801d50e <tcp_input+0x1a>
    tcphdr_opt1len = tcphdr_optlen;
 801d8c0:	4a14      	ldr	r2, [pc, #80]	; (801d914 <tcp_input+0x420>)
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d8c2:	4620      	mov	r0, r4
    tcphdr_opt1len = tcphdr_optlen;
 801d8c4:	8013      	strh	r3, [r2, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801d8c6:	f7fd f977 	bl	801abb8 <pbuf_remove_header>
 801d8ca:	e68e      	b.n	801d5ea <tcp_input+0xf6>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d8cc:	f8df a05c 	ldr.w	sl, [pc, #92]	; 801d92c <tcp_input+0x438>
 801d8d0:	f8da 8000 	ldr.w	r8, [sl]
 801d8d4:	f1b8 0f00 	cmp.w	r8, #0
 801d8d8:	f000 8237 	beq.w	801dd4a <tcp_input+0x856>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d8dc:	f8d7 c004 	ldr.w	ip, [r7, #4]
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d8e0:	4645      	mov	r5, r8
      if (lpcb->local_port == tcphdr->dest) {
 801d8e2:	6830      	ldr	r0, [r6, #0]
    prev = NULL;
 801d8e4:	2100      	movs	r1, #0
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d8e6:	f8d7 e014 	ldr.w	lr, [r7, #20]
 801d8ea:	e027      	b.n	801d93c <tcp_input+0x448>
 801d8ec:	2002e38c 	.word	0x2002e38c
 801d8f0:	2002e3b0 	.word	0x2002e3b0
 801d8f4:	2002e3ac 	.word	0x2002e3ac
 801d8f8:	2002e3d0 	.word	0x2002e3d0
 801d8fc:	2002e3cc 	.word	0x2002e3cc
 801d900:	080440a4 	.word	0x080440a4
 801d904:	08043e0c 	.word	0x08043e0c
 801d908:	08044078 	.word	0x08044078
 801d90c:	2002e3a4 	.word	0x2002e3a4
 801d910:	2002e3e6 	.word	0x2002e3e6
 801d914:	2002e3dc 	.word	0x2002e3dc
 801d918:	2002e3c4 	.word	0x2002e3c4
 801d91c:	2002e3c8 	.word	0x2002e3c8
 801d920:	2002e3c0 	.word	0x2002e3c0
 801d924:	08044124 	.word	0x08044124
 801d928:	08029a64 	.word	0x08029a64
 801d92c:	2002e398 	.word	0x2002e398
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801d930:	68eb      	ldr	r3, [r5, #12]
 801d932:	4629      	mov	r1, r5
 801d934:	461d      	mov	r5, r3
 801d936:	2b00      	cmp	r3, #0
 801d938:	f000 8208 	beq.w	801dd4c <tcp_input+0x858>
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d93c:	7a2a      	ldrb	r2, [r5, #8]
 801d93e:	b12a      	cbz	r2, 801d94c <tcp_input+0x458>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801d940:	f89c 3038 	ldrb.w	r3, [ip, #56]	; 0x38
 801d944:	3301      	adds	r3, #1
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801d946:	b2db      	uxtb	r3, r3
 801d948:	429a      	cmp	r2, r3
 801d94a:	d1f1      	bne.n	801d930 <tcp_input+0x43c>
      if (lpcb->local_port == tcphdr->dest) {
 801d94c:	8aea      	ldrh	r2, [r5, #22]
 801d94e:	8843      	ldrh	r3, [r0, #2]
 801d950:	429a      	cmp	r2, r3
 801d952:	d1ed      	bne.n	801d930 <tcp_input+0x43c>
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801d954:	682a      	ldr	r2, [r5, #0]
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801d956:	b10a      	cbz	r2, 801d95c <tcp_input+0x468>
 801d958:	4572      	cmp	r2, lr
 801d95a:	d1e9      	bne.n	801d930 <tcp_input+0x43c>
      if (prev != NULL) {
 801d95c:	b129      	cbz	r1, 801d96a <tcp_input+0x476>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d95e:	68ea      	ldr	r2, [r5, #12]
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801d960:	f8ca 5000 	str.w	r5, [sl]
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801d964:	60ca      	str	r2, [r1, #12]
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801d966:	f8c5 800c 	str.w	r8, [r5, #12]
  if (flags & TCP_RST) {
 801d96a:	4a9d      	ldr	r2, [pc, #628]	; (801dbe0 <tcp_input+0x6ec>)
 801d96c:	7812      	ldrb	r2, [r2, #0]
 801d96e:	0751      	lsls	r1, r2, #29
 801d970:	f53f adcd 	bmi.w	801d50e <tcp_input+0x1a>
  if (flags & TCP_ACK) {
 801d974:	f012 0810 	ands.w	r8, r2, #16
 801d978:	f040 8273 	bne.w	801de62 <tcp_input+0x96e>
  } else if (flags & TCP_SYN) {
 801d97c:	0791      	lsls	r1, r2, #30
 801d97e:	f57f adc6 	bpl.w	801d50e <tcp_input+0x1a>
    npcb = tcp_alloc(pcb->prio);
 801d982:	7d68      	ldrb	r0, [r5, #21]
 801d984:	f7fe fc90 	bl	801c2a8 <tcp_alloc>
    if (npcb == NULL) {
 801d988:	4681      	mov	r9, r0
 801d98a:	2800      	cmp	r0, #0
 801d98c:	f000 82ce 	beq.w	801df2c <tcp_input+0xa38>
    npcb->rcv_nxt = seqno + 1;
 801d990:	4b94      	ldr	r3, [pc, #592]	; (801dbe4 <tcp_input+0x6f0>)
    npcb->remote_port = tcphdr->src;
 801d992:	6831      	ldr	r1, [r6, #0]
    npcb->rcv_nxt = seqno + 1;
 801d994:	681b      	ldr	r3, [r3, #0]
    npcb->remote_port = tcphdr->src;
 801d996:	780a      	ldrb	r2, [r1, #0]
    npcb->rcv_nxt = seqno + 1;
 801d998:	3301      	adds	r3, #1
    npcb->remote_port = tcphdr->src;
 801d99a:	7849      	ldrb	r1, [r1, #1]
 801d99c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    npcb->local_port = pcb->local_port;
 801d9a0:	8ae9      	ldrh	r1, [r5, #22]
    npcb->rcv_nxt = seqno + 1;
 801d9a2:	6243      	str	r3, [r0, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801d9a4:	62c3      	str	r3, [r0, #44]	; 0x2c
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d9a6:	697b      	ldr	r3, [r7, #20]
    npcb->remote_port = tcphdr->src;
 801d9a8:	8302      	strh	r2, [r0, #24]
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801d9aa:	6003      	str	r3, [r0, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d9ac:	693b      	ldr	r3, [r7, #16]
    npcb->local_port = pcb->local_port;
 801d9ae:	82c1      	strh	r1, [r0, #22]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801d9b0:	6043      	str	r3, [r0, #4]
    npcb->state = SYN_RCVD;
 801d9b2:	2303      	movs	r3, #3
 801d9b4:	7503      	strb	r3, [r0, #20]
    iss = tcp_next_iss(npcb);
 801d9b6:	f7fe fee7 	bl	801c788 <tcp_next_iss>
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d9ba:	4b8a      	ldr	r3, [pc, #552]	; (801dbe4 <tcp_input+0x6f0>)
    npcb->snd_nxt = iss;
 801d9bc:	f8c9 0050 	str.w	r0, [r9, #80]	; 0x50
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d9c0:	681b      	ldr	r3, [r3, #0]
    npcb->lastack = iss;
 801d9c2:	f8c9 0044 	str.w	r0, [r9, #68]	; 0x44
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801d9c6:	3b01      	subs	r3, #1
    npcb->snd_lbb = iss;
 801d9c8:	f8c9 005c 	str.w	r0, [r9, #92]	; 0x5c
    TCP_REG_ACTIVE(npcb);
 801d9cc:	4a86      	ldr	r2, [pc, #536]	; (801dbe8 <tcp_input+0x6f4>)
    npcb->snd_wl2 = iss;
 801d9ce:	e9c9 3015 	strd	r3, r0, [r9, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801d9d2:	692b      	ldr	r3, [r5, #16]
    npcb->listener = pcb;
 801d9d4:	f8c9 507c 	str.w	r5, [r9, #124]	; 0x7c
    npcb->callback_arg = pcb->callback_arg;
 801d9d8:	f8c9 3010 	str.w	r3, [r9, #16]
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801d9dc:	7a6b      	ldrb	r3, [r5, #9]
 801d9de:	f003 030c 	and.w	r3, r3, #12
 801d9e2:	f889 3009 	strb.w	r3, [r9, #9]
    npcb->netif_idx = pcb->netif_idx;
 801d9e6:	7a2b      	ldrb	r3, [r5, #8]
 801d9e8:	f889 3008 	strb.w	r3, [r9, #8]
    TCP_REG_ACTIVE(npcb);
 801d9ec:	6813      	ldr	r3, [r2, #0]
 801d9ee:	f8c2 9000 	str.w	r9, [r2]
 801d9f2:	f8c9 300c 	str.w	r3, [r9, #12]
 801d9f6:	f001 fe49 	bl	801f68c <tcp_timer_needed>
  if (tcphdr_optlen != 0) {
 801d9fa:	4b7c      	ldr	r3, [pc, #496]	; (801dbec <tcp_input+0x6f8>)
    TCP_REG_ACTIVE(npcb);
 801d9fc:	4a7c      	ldr	r2, [pc, #496]	; (801dbf0 <tcp_input+0x6fc>)
 801d9fe:	2101      	movs	r1, #1
  if (tcphdr_optlen != 0) {
 801da00:	881b      	ldrh	r3, [r3, #0]
    TCP_REG_ACTIVE(npcb);
 801da02:	7011      	strb	r1, [r2, #0]
  if (tcphdr_optlen != 0) {
 801da04:	b12b      	cbz	r3, 801da12 <tcp_input+0x51e>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801da06:	4b7b      	ldr	r3, [pc, #492]	; (801dbf4 <tcp_input+0x700>)
 801da08:	4648      	mov	r0, r9
 801da0a:	f8a3 8000 	strh.w	r8, [r3]
 801da0e:	f7ff fcd1 	bl	801d3b4 <tcp_parseopt.part.0>
    npcb->snd_wnd = tcphdr->wnd;
 801da12:	6833      	ldr	r3, [r6, #0]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801da14:	f109 0204 	add.w	r2, r9, #4
 801da18:	f8b9 5032 	ldrh.w	r5, [r9, #50]	; 0x32
    npcb->snd_wnd = tcphdr->wnd;
 801da1c:	89db      	ldrh	r3, [r3, #14]
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801da1e:	4610      	mov	r0, r2
 801da20:	9205      	str	r2, [sp, #20]
    npcb->snd_wnd = tcphdr->wnd;
 801da22:	f8a9 3060 	strh.w	r3, [r9, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801da26:	f8a9 3062 	strh.w	r3, [r9, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801da2a:	f004 fd4d 	bl	80224c8 <ip4_route>
 801da2e:	9a05      	ldr	r2, [sp, #20]
 801da30:	4601      	mov	r1, r0
 801da32:	4628      	mov	r0, r5
 801da34:	f7fe fec4 	bl	801c7c0 <tcp_eff_send_mss_netif>
 801da38:	4603      	mov	r3, r0
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801da3a:	2112      	movs	r1, #18
 801da3c:	4648      	mov	r0, r9
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801da3e:	f8a9 3032 	strh.w	r3, [r9, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801da42:	f001 f8db 	bl	801ebfc <tcp_enqueue_flags>
    if (rc != ERR_OK) {
 801da46:	2800      	cmp	r0, #0
 801da48:	f040 82ca 	bne.w	801dfe0 <tcp_input+0xaec>
    tcp_output(npcb);
 801da4c:	4648      	mov	r0, r9
 801da4e:	f001 faf1 	bl	801f034 <tcp_output>
 801da52:	e55c      	b.n	801d50e <tcp_input+0x1a>
  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801da54:	f013 0102 	ands.w	r1, r3, #2
 801da58:	d004      	beq.n	801da64 <tcp_input+0x570>
 801da5a:	7d2a      	ldrb	r2, [r5, #20]
 801da5c:	3a02      	subs	r2, #2
 801da5e:	2a01      	cmp	r2, #1
 801da60:	f200 81e4 	bhi.w	801de2c <tcp_input+0x938>
  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801da64:	8b6a      	ldrh	r2, [r5, #26]
 801da66:	06d0      	lsls	r0, r2, #27
 801da68:	d402      	bmi.n	801da70 <tcp_input+0x57c>
    pcb->tmr = tcp_ticks;
 801da6a:	4a63      	ldr	r2, [pc, #396]	; (801dbf8 <tcp_input+0x704>)
 801da6c:	6812      	ldr	r2, [r2, #0]
 801da6e:	622a      	str	r2, [r5, #32]
  if (tcphdr_optlen != 0) {
 801da70:	4a5e      	ldr	r2, [pc, #376]	; (801dbec <tcp_input+0x6f8>)
 801da72:	8810      	ldrh	r0, [r2, #0]
  pcb->persist_probe = 0;
 801da74:	2200      	movs	r2, #0
 801da76:	f8a5 209a 	strh.w	r2, [r5, #154]	; 0x9a
  if (tcphdr_optlen != 0) {
 801da7a:	b140      	cbz	r0, 801da8e <tcp_input+0x59a>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801da7c:	485d      	ldr	r0, [pc, #372]	; (801dbf4 <tcp_input+0x700>)
 801da7e:	8002      	strh	r2, [r0, #0]
 801da80:	4628      	mov	r0, r5
 801da82:	e9cd 3106 	strd	r3, r1, [sp, #24]
 801da86:	f7ff fc95 	bl	801d3b4 <tcp_parseopt.part.0>
 801da8a:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
  switch (pcb->state) {
 801da8e:	7d2a      	ldrb	r2, [r5, #20]
 801da90:	3a02      	subs	r2, #2
 801da92:	2a07      	cmp	r2, #7
 801da94:	f63f ae8c 	bhi.w	801d7b0 <tcp_input+0x2bc>
 801da98:	e8df f002 	tbb	[pc, r2]
 801da9c:	89041331 	.word	0x89041331
 801daa0:	55b4046e 	.word	0x55b4046e
      tcp_receive(pcb);
 801daa4:	4628      	mov	r0, r5
 801daa6:	f7fe ffdd 	bl	801ca64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801daaa:	f89a 3000 	ldrb.w	r3, [sl]
 801daae:	069e      	lsls	r6, r3, #26
 801dab0:	f57f ae7e 	bpl.w	801d7b0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801dab4:	8b6b      	ldrh	r3, [r5, #26]
 801dab6:	f043 0302 	orr.w	r3, r3, #2
 801daba:	836b      	strh	r3, [r5, #26]
        pcb->state = CLOSE_WAIT;
 801dabc:	2307      	movs	r3, #7
 801dabe:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801dac0:	e676      	b.n	801d7b0 <tcp_input+0x2bc>
      if (flags & TCP_ACK) {
 801dac2:	06da      	lsls	r2, r3, #27
 801dac4:	f140 821c 	bpl.w	801df00 <tcp_input+0xa0c>
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801dac8:	4b4c      	ldr	r3, [pc, #304]	; (801dbfc <tcp_input+0x708>)
 801daca:	6819      	ldr	r1, [r3, #0]
 801dacc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 801dace:	43db      	mvns	r3, r3
 801dad0:	42cb      	cmn	r3, r1
 801dad2:	d404      	bmi.n	801dade <tcp_input+0x5ea>
 801dad4:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 801dad6:	1acb      	subs	r3, r1, r3
 801dad8:	2b00      	cmp	r3, #0
 801dada:	f340 823a 	ble.w	801df52 <tcp_input+0xa5e>
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dade:	9a05      	ldr	r2, [sp, #20]
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dae0:	6833      	ldr	r3, [r6, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dae2:	8810      	ldrh	r0, [r2, #0]
 801dae4:	4a3f      	ldr	r2, [pc, #252]	; (801dbe4 <tcp_input+0x6f0>)
 801dae6:	6812      	ldr	r2, [r2, #0]
 801dae8:	4402      	add	r2, r0
 801daea:	8818      	ldrh	r0, [r3, #0]
 801daec:	9002      	str	r0, [sp, #8]
 801daee:	4628      	mov	r0, r5
 801daf0:	885b      	ldrh	r3, [r3, #2]
 801daf2:	e9cd 9300 	strd	r9, r3, [sp]
 801daf6:	4b42      	ldr	r3, [pc, #264]	; (801dc00 <tcp_input+0x70c>)
 801daf8:	f001 fa22 	bl	801ef40 <tcp_rst>
    if (err != ERR_ABRT) {
 801dafc:	e658      	b.n	801d7b0 <tcp_input+0x2bc>
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801dafe:	f003 0212 	and.w	r2, r3, #18
 801db02:	2a12      	cmp	r2, #18
 801db04:	f000 813b 	beq.w	801dd7e <tcp_input+0x88a>
      else if (flags & TCP_ACK) {
 801db08:	06d9      	lsls	r1, r3, #27
 801db0a:	f57f ae51 	bpl.w	801d7b0 <tcp_input+0x2bc>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801db0e:	9a05      	ldr	r2, [sp, #20]
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801db10:	6833      	ldr	r3, [r6, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801db12:	8811      	ldrh	r1, [r2, #0]
 801db14:	4a33      	ldr	r2, [pc, #204]	; (801dbe4 <tcp_input+0x6f0>)
 801db16:	8818      	ldrh	r0, [r3, #0]
 801db18:	6812      	ldr	r2, [r2, #0]
 801db1a:	440a      	add	r2, r1
 801db1c:	4937      	ldr	r1, [pc, #220]	; (801dbfc <tcp_input+0x708>)
 801db1e:	6809      	ldr	r1, [r1, #0]
 801db20:	9002      	str	r0, [sp, #8]
 801db22:	4628      	mov	r0, r5
 801db24:	885b      	ldrh	r3, [r3, #2]
 801db26:	e9cd 9300 	strd	r9, r3, [sp]
 801db2a:	4b35      	ldr	r3, [pc, #212]	; (801dc00 <tcp_input+0x70c>)
 801db2c:	f001 fa08 	bl	801ef40 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801db30:	f895 3042 	ldrb.w	r3, [r5, #66]	; 0x42
 801db34:	2b05      	cmp	r3, #5
 801db36:	f63f ae3b 	bhi.w	801d7b0 <tcp_input+0x2bc>
          pcb->rtime = 0;
 801db3a:	2300      	movs	r3, #0
          tcp_rexmit_rto(pcb);
 801db3c:	4628      	mov	r0, r5
          pcb->rtime = 0;
 801db3e:	862b      	strh	r3, [r5, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801db40:	f001 fc80 	bl	801f444 <tcp_rexmit_rto>
    if (err != ERR_ABRT) {
 801db44:	e634      	b.n	801d7b0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801db46:	4628      	mov	r0, r5
 801db48:	f7fe ff8c 	bl	801ca64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801db4c:	4b24      	ldr	r3, [pc, #144]	; (801dbe0 <tcp_input+0x6ec>)
 801db4e:	781b      	ldrb	r3, [r3, #0]
 801db50:	06de      	lsls	r6, r3, #27
 801db52:	f57f ae2d 	bpl.w	801d7b0 <tcp_input+0x2bc>
 801db56:	4b29      	ldr	r3, [pc, #164]	; (801dbfc <tcp_input+0x708>)
 801db58:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801db5a:	681b      	ldr	r3, [r3, #0]
 801db5c:	429a      	cmp	r2, r3
 801db5e:	f47f ae27 	bne.w	801d7b0 <tcp_input+0x2bc>
 801db62:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801db64:	2b00      	cmp	r3, #0
 801db66:	f47f ae23 	bne.w	801d7b0 <tcp_input+0x2bc>
        recv_flags |= TF_CLOSED;
 801db6a:	f89a 3000 	ldrb.w	r3, [sl]
 801db6e:	f043 0310 	orr.w	r3, r3, #16
 801db72:	f88a 3000 	strb.w	r3, [sl]
    if (err != ERR_ABRT) {
 801db76:	e61b      	b.n	801d7b0 <tcp_input+0x2bc>
      tcp_receive(pcb);
 801db78:	4628      	mov	r0, r5
 801db7a:	f7fe ff73 	bl	801ca64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801db7e:	f89a 3000 	ldrb.w	r3, [sl]
 801db82:	069a      	lsls	r2, r3, #26
 801db84:	f57f ae14 	bpl.w	801d7b0 <tcp_input+0x2bc>
        tcp_ack_now(pcb);
 801db88:	8b6b      	ldrh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801db8a:	4628      	mov	r0, r5
        tcp_ack_now(pcb);
 801db8c:	f043 0302 	orr.w	r3, r3, #2
 801db90:	836b      	strh	r3, [r5, #26]
        tcp_pcb_purge(pcb);
 801db92:	f7fd fee1 	bl	801b958 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801db96:	4b14      	ldr	r3, [pc, #80]	; (801dbe8 <tcp_input+0x6f4>)
 801db98:	681b      	ldr	r3, [r3, #0]
 801db9a:	42ab      	cmp	r3, r5
 801db9c:	d061      	beq.n	801dc62 <tcp_input+0x76e>
 801db9e:	2b00      	cmp	r3, #0
 801dba0:	d062      	beq.n	801dc68 <tcp_input+0x774>
 801dba2:	68da      	ldr	r2, [r3, #12]
 801dba4:	42aa      	cmp	r2, r5
 801dba6:	f000 8210 	beq.w	801dfca <tcp_input+0xad6>
 801dbaa:	4613      	mov	r3, r2
 801dbac:	e7f7      	b.n	801db9e <tcp_input+0x6aa>
      tcp_receive(pcb);
 801dbae:	4628      	mov	r0, r5
 801dbb0:	f7fe ff58 	bl	801ca64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801dbb4:	f89a 3000 	ldrb.w	r3, [sl]
 801dbb8:	f013 0f20 	tst.w	r3, #32
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dbbc:	4b08      	ldr	r3, [pc, #32]	; (801dbe0 <tcp_input+0x6ec>)
 801dbbe:	781b      	ldrb	r3, [r3, #0]
      if (recv_flags & TF_GOT_FIN) {
 801dbc0:	f000 818e 	beq.w	801dee0 <tcp_input+0x9ec>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dbc4:	06d8      	lsls	r0, r3, #27
 801dbc6:	d504      	bpl.n	801dbd2 <tcp_input+0x6de>
 801dbc8:	4b0c      	ldr	r3, [pc, #48]	; (801dbfc <tcp_input+0x708>)
 801dbca:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dbcc:	681b      	ldr	r3, [r3, #0]
 801dbce:	429a      	cmp	r2, r3
 801dbd0:	d038      	beq.n	801dc44 <tcp_input+0x750>
          tcp_ack_now(pcb);
 801dbd2:	8b6b      	ldrh	r3, [r5, #26]
 801dbd4:	f043 0302 	orr.w	r3, r3, #2
 801dbd8:	836b      	strh	r3, [r5, #26]
          pcb->state = CLOSING;
 801dbda:	2308      	movs	r3, #8
 801dbdc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801dbde:	e5e7      	b.n	801d7b0 <tcp_input+0x2bc>
 801dbe0:	2002e3ac 	.word	0x2002e3ac
 801dbe4:	2002e3cc 	.word	0x2002e3cc
 801dbe8:	2002e38c 	.word	0x2002e38c
 801dbec:	2002e3e4 	.word	0x2002e3e4
 801dbf0:	2002e390 	.word	0x2002e390
 801dbf4:	2002e3d4 	.word	0x2002e3d4
 801dbf8:	2002e39c 	.word	0x2002e39c
 801dbfc:	2002e3a8 	.word	0x2002e3a8
 801dc00:	2001f204 	.word	0x2001f204
      tcp_receive(pcb);
 801dc04:	4628      	mov	r0, r5
 801dc06:	f7fe ff2d 	bl	801ca64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801dc0a:	4ba8      	ldr	r3, [pc, #672]	; (801deac <tcp_input+0x9b8>)
 801dc0c:	781b      	ldrb	r3, [r3, #0]
 801dc0e:	06db      	lsls	r3, r3, #27
 801dc10:	f57f adce 	bpl.w	801d7b0 <tcp_input+0x2bc>
 801dc14:	4ba6      	ldr	r3, [pc, #664]	; (801deb0 <tcp_input+0x9bc>)
 801dc16:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801dc18:	681b      	ldr	r3, [r3, #0]
 801dc1a:	429a      	cmp	r2, r3
 801dc1c:	f47f adc8 	bne.w	801d7b0 <tcp_input+0x2bc>
 801dc20:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801dc22:	2b00      	cmp	r3, #0
 801dc24:	f47f adc4 	bne.w	801d7b0 <tcp_input+0x2bc>
        tcp_pcb_purge(pcb);
 801dc28:	4628      	mov	r0, r5
 801dc2a:	f7fd fe95 	bl	801b958 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801dc2e:	4ba1      	ldr	r3, [pc, #644]	; (801deb4 <tcp_input+0x9c0>)
 801dc30:	681b      	ldr	r3, [r3, #0]
 801dc32:	42ab      	cmp	r3, r5
 801dc34:	d015      	beq.n	801dc62 <tcp_input+0x76e>
 801dc36:	b1bb      	cbz	r3, 801dc68 <tcp_input+0x774>
 801dc38:	68da      	ldr	r2, [r3, #12]
 801dc3a:	42aa      	cmp	r2, r5
 801dc3c:	f000 81c5 	beq.w	801dfca <tcp_input+0xad6>
 801dc40:	4613      	mov	r3, r2
 801dc42:	e7f8      	b.n	801dc36 <tcp_input+0x742>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dc44:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801dc46:	2b00      	cmp	r3, #0
 801dc48:	d1c3      	bne.n	801dbd2 <tcp_input+0x6de>
          tcp_ack_now(pcb);
 801dc4a:	8b6b      	ldrh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801dc4c:	4628      	mov	r0, r5
          tcp_ack_now(pcb);
 801dc4e:	f043 0302 	orr.w	r3, r3, #2
 801dc52:	836b      	strh	r3, [r5, #26]
          tcp_pcb_purge(pcb);
 801dc54:	f7fd fe80 	bl	801b958 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801dc58:	4b96      	ldr	r3, [pc, #600]	; (801deb4 <tcp_input+0x9c0>)
 801dc5a:	681b      	ldr	r3, [r3, #0]
 801dc5c:	42ab      	cmp	r3, r5
 801dc5e:	f040 81b7 	bne.w	801dfd0 <tcp_input+0xadc>
        TCP_RMV_ACTIVE(pcb);
 801dc62:	68eb      	ldr	r3, [r5, #12]
 801dc64:	4a93      	ldr	r2, [pc, #588]	; (801deb4 <tcp_input+0x9c0>)
 801dc66:	6013      	str	r3, [r2, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801dc68:	4b93      	ldr	r3, [pc, #588]	; (801deb8 <tcp_input+0x9c4>)
        pcb->state = TIME_WAIT;
 801dc6a:	220a      	movs	r2, #10
 801dc6c:	752a      	strb	r2, [r5, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801dc6e:	681a      	ldr	r2, [r3, #0]
 801dc70:	601d      	str	r5, [r3, #0]
 801dc72:	60ea      	str	r2, [r5, #12]
        TCP_RMV_ACTIVE(pcb);
 801dc74:	2201      	movs	r2, #1
 801dc76:	4b91      	ldr	r3, [pc, #580]	; (801debc <tcp_input+0x9c8>)
 801dc78:	701a      	strb	r2, [r3, #0]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801dc7a:	f001 fd07 	bl	801f68c <tcp_timer_needed>
    if (err != ERR_ABRT) {
 801dc7e:	e597      	b.n	801d7b0 <tcp_input+0x2bc>
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801dc80:	4b8f      	ldr	r3, [pc, #572]	; (801dec0 <tcp_input+0x9cc>)
 801dc82:	22c2      	movs	r2, #194	; 0xc2
 801dc84:	498f      	ldr	r1, [pc, #572]	; (801dec4 <tcp_input+0x9d0>)
 801dc86:	4890      	ldr	r0, [pc, #576]	; (801dec8 <tcp_input+0x9d4>)
 801dc88:	f007 f8e4 	bl	8024e54 <iprintf>
 801dc8c:	e47d      	b.n	801d58a <tcp_input+0x96>
    LWIP_ASSERT("p->len == 0", p->len == 0);
 801dc8e:	4b8c      	ldr	r3, [pc, #560]	; (801dec0 <tcp_input+0x9cc>)
 801dc90:	22df      	movs	r2, #223	; 0xdf
 801dc92:	498e      	ldr	r1, [pc, #568]	; (801decc <tcp_input+0x9d8>)
 801dc94:	488c      	ldr	r0, [pc, #560]	; (801dec8 <tcp_input+0x9d4>)
 801dc96:	f007 f8dd 	bl	8024e54 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801dc9a:	8923      	ldrh	r3, [r4, #8]
 801dc9c:	e49b      	b.n	801d5d6 <tcp_input+0xe2>
        if (pcb->rcv_ann_wnd == 0) {
 801dc9e:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	f000 80d9 	beq.w	801de58 <tcp_input+0x964>
 801dca6:	4c8a      	ldr	r4, [pc, #552]	; (801ded0 <tcp_input+0x9dc>)
 801dca8:	e595      	b.n	801d7d6 <tcp_input+0x2e2>
        if (recv_acked > 0) {
 801dcaa:	f8bb 2000 	ldrh.w	r2, [fp]
 801dcae:	b15a      	cbz	r2, 801dcc8 <tcp_input+0x7d4>
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801dcb0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 801dcb4:	b12b      	cbz	r3, 801dcc2 <tcp_input+0x7ce>
 801dcb6:	4629      	mov	r1, r5
 801dcb8:	6928      	ldr	r0, [r5, #16]
 801dcba:	4798      	blx	r3
            if (err == ERR_ABRT) {
 801dcbc:	300d      	adds	r0, #13
 801dcbe:	f43f ad8a 	beq.w	801d7d6 <tcp_input+0x2e2>
          recv_acked = 0;
 801dcc2:	2300      	movs	r3, #0
 801dcc4:	f8ab 3000 	strh.w	r3, [fp]
        if (tcp_input_delayed_close(pcb)) {
 801dcc8:	4628      	mov	r0, r5
 801dcca:	f7fe fe2b 	bl	801c924 <tcp_input_delayed_close>
 801dcce:	2800      	cmp	r0, #0
 801dcd0:	f47f ad81 	bne.w	801d7d6 <tcp_input+0x2e2>
        if (recv_data != NULL) {
 801dcd4:	f8d8 3000 	ldr.w	r3, [r8]
 801dcd8:	b1fb      	cbz	r3, 801dd1a <tcp_input+0x826>
          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801dcda:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801dcdc:	b133      	cbz	r3, 801dcec <tcp_input+0x7f8>
 801dcde:	4b78      	ldr	r3, [pc, #480]	; (801dec0 <tcp_input+0x9cc>)
 801dce0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dce4:	497b      	ldr	r1, [pc, #492]	; (801ded4 <tcp_input+0x9e0>)
 801dce6:	4878      	ldr	r0, [pc, #480]	; (801dec8 <tcp_input+0x9d4>)
 801dce8:	f007 f8b4 	bl	8024e54 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801dcec:	8b6b      	ldrh	r3, [r5, #26]
 801dcee:	f013 0310 	ands.w	r3, r3, #16
 801dcf2:	f040 8113 	bne.w	801df1c <tcp_input+0xa28>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801dcf6:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801dcfa:	2e00      	cmp	r6, #0
 801dcfc:	f000 8121 	beq.w	801df42 <tcp_input+0xa4e>
 801dd00:	f8d8 2000 	ldr.w	r2, [r8]
 801dd04:	4629      	mov	r1, r5
 801dd06:	6928      	ldr	r0, [r5, #16]
 801dd08:	47b0      	blx	r6
          if (err == ERR_ABRT) {
 801dd0a:	f110 0f0d 	cmn.w	r0, #13
 801dd0e:	f43f ad62 	beq.w	801d7d6 <tcp_input+0x2e2>
          if (err != ERR_OK) {
 801dd12:	b110      	cbz	r0, 801dd1a <tcp_input+0x826>
            pcb->refused_data = recv_data;
 801dd14:	f8d8 3000 	ldr.w	r3, [r8]
 801dd18:	67ab      	str	r3, [r5, #120]	; 0x78
        if (recv_flags & TF_GOT_FIN) {
 801dd1a:	f89a 3000 	ldrb.w	r3, [sl]
 801dd1e:	0699      	lsls	r1, r3, #26
 801dd20:	d507      	bpl.n	801dd32 <tcp_input+0x83e>
          if (pcb->refused_data != NULL) {
 801dd22:	6fab      	ldr	r3, [r5, #120]	; 0x78
 801dd24:	2b00      	cmp	r3, #0
 801dd26:	f000 80ad 	beq.w	801de84 <tcp_input+0x990>
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801dd2a:	7b5a      	ldrb	r2, [r3, #13]
 801dd2c:	f042 0220 	orr.w	r2, r2, #32
 801dd30:	735a      	strb	r2, [r3, #13]
        tcp_input_pcb = NULL;
 801dd32:	2300      	movs	r3, #0
        if (tcp_input_delayed_close(pcb)) {
 801dd34:	4628      	mov	r0, r5
        tcp_input_pcb = NULL;
 801dd36:	6023      	str	r3, [r4, #0]
        if (tcp_input_delayed_close(pcb)) {
 801dd38:	f7fe fdf4 	bl	801c924 <tcp_input_delayed_close>
 801dd3c:	2800      	cmp	r0, #0
 801dd3e:	f47f ad4a 	bne.w	801d7d6 <tcp_input+0x2e2>
        tcp_output(pcb);
 801dd42:	4628      	mov	r0, r5
 801dd44:	f001 f976 	bl	801f034 <tcp_output>
 801dd48:	e545      	b.n	801d7d6 <tcp_input+0x2e2>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801dd4a:	6830      	ldr	r0, [r6, #0]
 801dd4c:	8980      	ldrh	r0, [r0, #12]
 801dd4e:	f7fa ff83 	bl	8018c58 <lwip_htons>
 801dd52:	f010 0004 	ands.w	r0, r0, #4
 801dd56:	f47f abda 	bne.w	801d50e <tcp_input+0x1a>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd5a:	9a05      	ldr	r2, [sp, #20]
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801dd5c:	6833      	ldr	r3, [r6, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801dd5e:	8811      	ldrh	r1, [r2, #0]
 801dd60:	4a5d      	ldr	r2, [pc, #372]	; (801ded8 <tcp_input+0x9e4>)
 801dd62:	881d      	ldrh	r5, [r3, #0]
 801dd64:	6812      	ldr	r2, [r2, #0]
 801dd66:	440a      	add	r2, r1
 801dd68:	4951      	ldr	r1, [pc, #324]	; (801deb0 <tcp_input+0x9bc>)
 801dd6a:	6809      	ldr	r1, [r1, #0]
 801dd6c:	9502      	str	r5, [sp, #8]
 801dd6e:	885b      	ldrh	r3, [r3, #2]
 801dd70:	e9cd 9300 	strd	r9, r3, [sp]
 801dd74:	4b59      	ldr	r3, [pc, #356]	; (801dedc <tcp_input+0x9e8>)
 801dd76:	f001 f8e3 	bl	801ef40 <tcp_rst>
 801dd7a:	f7ff bbc8 	b.w	801d50e <tcp_input+0x1a>
          && (ackno == pcb->lastack + 1)) {
 801dd7e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
 801dd80:	494b      	ldr	r1, [pc, #300]	; (801deb0 <tcp_input+0x9bc>)
 801dd82:	3201      	adds	r2, #1
 801dd84:	6809      	ldr	r1, [r1, #0]
 801dd86:	428a      	cmp	r2, r1
 801dd88:	f47f aebe 	bne.w	801db08 <tcp_input+0x614>
        pcb->rcv_nxt = seqno + 1;
 801dd8c:	4b52      	ldr	r3, [pc, #328]	; (801ded8 <tcp_input+0x9e4>)
        pcb->snd_wnd = tcphdr->wnd;
 801dd8e:	6830      	ldr	r0, [r6, #0]
        pcb->rcv_nxt = seqno + 1;
 801dd90:	681b      	ldr	r3, [r3, #0]
        pcb->lastack = ackno;
 801dd92:	646a      	str	r2, [r5, #68]	; 0x44
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801dd94:	1d2a      	adds	r2, r5, #4
        pcb->rcv_nxt = seqno + 1;
 801dd96:	1c59      	adds	r1, r3, #1
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801dd98:	3b01      	subs	r3, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801dd9a:	8e6e      	ldrh	r6, [r5, #50]	; 0x32
        pcb->rcv_nxt = seqno + 1;
 801dd9c:	6269      	str	r1, [r5, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801dd9e:	62e9      	str	r1, [r5, #44]	; 0x2c
        pcb->snd_wnd = tcphdr->wnd;
 801dda0:	89c1      	ldrh	r1, [r0, #14]
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801dda2:	4610      	mov	r0, r2
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801dda4:	656b      	str	r3, [r5, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801dda6:	2304      	movs	r3, #4
        pcb->snd_wnd = tcphdr->wnd;
 801dda8:	f8a5 1060 	strh.w	r1, [r5, #96]	; 0x60
        pcb->state = ESTABLISHED;
 801ddac:	752b      	strb	r3, [r5, #20]
        pcb->snd_wnd_max = pcb->snd_wnd;
 801ddae:	f8a5 1062 	strh.w	r1, [r5, #98]	; 0x62
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801ddb2:	9205      	str	r2, [sp, #20]
 801ddb4:	f004 fb88 	bl	80224c8 <ip4_route>
 801ddb8:	9a05      	ldr	r2, [sp, #20]
 801ddba:	4601      	mov	r1, r0
 801ddbc:	4630      	mov	r0, r6
 801ddbe:	f7fe fcff 	bl	801c7c0 <tcp_eff_send_mss_netif>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ddc2:	f241 131c 	movw	r3, #4380	; 0x111c
 801ddc6:	0042      	lsls	r2, r0, #1
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801ddc8:	8668      	strh	r0, [r5, #50]	; 0x32
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801ddca:	0081      	lsls	r1, r0, #2
 801ddcc:	429a      	cmp	r2, r3
 801ddce:	4616      	mov	r6, r2
 801ddd0:	bf38      	it	cc
 801ddd2:	461e      	movcc	r6, r3
 801ddd4:	ebb6 0f80 	cmp.w	r6, r0, lsl #2
 801ddd8:	f240 814d 	bls.w	801e076 <tcp_input+0xb82>
 801dddc:	b28b      	uxth	r3, r1
 801ddde:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801dde2:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801dde6:	2b00      	cmp	r3, #0
 801dde8:	f000 813d 	beq.w	801e066 <tcp_input+0xb72>
        --pcb->snd_queuelen;
 801ddec:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
        rseg = pcb->unacked;
 801ddf0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
        --pcb->snd_queuelen;
 801ddf2:	3b01      	subs	r3, #1
 801ddf4:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
        if (rseg == NULL) {
 801ddf8:	2e00      	cmp	r6, #0
 801ddfa:	f000 812f 	beq.w	801e05c <tcp_input+0xb68>
          pcb->unacked = rseg->next;
 801ddfe:	6833      	ldr	r3, [r6, #0]
 801de00:	672b      	str	r3, [r5, #112]	; 0x70
        tcp_seg_free(rseg);
 801de02:	4630      	mov	r0, r6
 801de04:	f7fd fce0 	bl	801b7c8 <tcp_seg_free>
        if (pcb->unacked == NULL) {
 801de08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 801de0a:	2b00      	cmp	r3, #0
 801de0c:	f000 8122 	beq.w	801e054 <tcp_input+0xb60>
          pcb->rtime = 0;
 801de10:	2300      	movs	r3, #0
 801de12:	862b      	strh	r3, [r5, #48]	; 0x30
          pcb->nrtx = 0;
 801de14:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801de18:	f8d5 3088 	ldr.w	r3, [r5, #136]	; 0x88
 801de1c:	b133      	cbz	r3, 801de2c <tcp_input+0x938>
 801de1e:	2200      	movs	r2, #0
 801de20:	4629      	mov	r1, r5
 801de22:	6928      	ldr	r0, [r5, #16]
 801de24:	4798      	blx	r3
        if (err == ERR_ABRT) {
 801de26:	300d      	adds	r0, #13
 801de28:	f43f acd5 	beq.w	801d7d6 <tcp_input+0x2e2>
        tcp_ack_now(pcb);
 801de2c:	8b6b      	ldrh	r3, [r5, #26]
 801de2e:	f043 0302 	orr.w	r3, r3, #2
 801de32:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801de34:	e4bc      	b.n	801d7b0 <tcp_input+0x2bc>
      if (ackno == pcb->snd_nxt) {
 801de36:	4b1e      	ldr	r3, [pc, #120]	; (801deb0 <tcp_input+0x9bc>)
 801de38:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801de3a:	681b      	ldr	r3, [r3, #0]
 801de3c:	429a      	cmp	r2, r3
 801de3e:	f47f acb7 	bne.w	801d7b0 <tcp_input+0x2bc>
      recv_flags |= TF_RESET;
 801de42:	f89a 3000 	ldrb.w	r3, [sl]
 801de46:	f043 0308 	orr.w	r3, r3, #8
 801de4a:	f88a 3000 	strb.w	r3, [sl]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801de4e:	8b6b      	ldrh	r3, [r5, #26]
 801de50:	f023 0301 	bic.w	r3, r3, #1
 801de54:	836b      	strh	r3, [r5, #26]
    if (err != ERR_ABRT) {
 801de56:	e4ab      	b.n	801d7b0 <tcp_input+0x2bc>
          tcp_send_empty_ack(pcb);
 801de58:	4628      	mov	r0, r5
 801de5a:	4c1d      	ldr	r4, [pc, #116]	; (801ded0 <tcp_input+0x9dc>)
 801de5c:	f001 f8b8 	bl	801efd0 <tcp_send_empty_ack>
 801de60:	e4b9      	b.n	801d7d6 <tcp_input+0x2e2>
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801de62:	8802      	ldrh	r2, [r0, #0]
 801de64:	e9cd 9300 	strd	r9, r3, [sp]
 801de68:	9b05      	ldr	r3, [sp, #20]
 801de6a:	9202      	str	r2, [sp, #8]
 801de6c:	881a      	ldrh	r2, [r3, #0]
 801de6e:	4b1a      	ldr	r3, [pc, #104]	; (801ded8 <tcp_input+0x9e4>)
 801de70:	681b      	ldr	r3, [r3, #0]
 801de72:	441a      	add	r2, r3
 801de74:	4b0e      	ldr	r3, [pc, #56]	; (801deb0 <tcp_input+0x9bc>)
 801de76:	4628      	mov	r0, r5
 801de78:	6819      	ldr	r1, [r3, #0]
 801de7a:	4b18      	ldr	r3, [pc, #96]	; (801dedc <tcp_input+0x9e8>)
 801de7c:	f001 f860 	bl	801ef40 <tcp_rst>
 801de80:	f7ff bb45 	b.w	801d50e <tcp_input+0x1a>
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801de84:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 801de86:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801de8a:	d001      	beq.n	801de90 <tcp_input+0x99c>
              pcb->rcv_wnd++;
 801de8c:	3301      	adds	r3, #1
 801de8e:	852b      	strh	r3, [r5, #40]	; 0x28
            TCP_EVENT_CLOSED(pcb, err);
 801de90:	f8d5 6084 	ldr.w	r6, [r5, #132]	; 0x84
 801de94:	2e00      	cmp	r6, #0
 801de96:	f43f af4c 	beq.w	801dd32 <tcp_input+0x83e>
 801de9a:	2300      	movs	r3, #0
 801de9c:	4629      	mov	r1, r5
 801de9e:	6928      	ldr	r0, [r5, #16]
 801dea0:	461a      	mov	r2, r3
 801dea2:	47b0      	blx	r6
            if (err == ERR_ABRT) {
 801dea4:	300d      	adds	r0, #13
 801dea6:	f47f af44 	bne.w	801dd32 <tcp_input+0x83e>
 801deaa:	e494      	b.n	801d7d6 <tcp_input+0x2e2>
 801deac:	2002e3ac 	.word	0x2002e3ac
 801deb0:	2002e3a8 	.word	0x2002e3a8
 801deb4:	2002e38c 	.word	0x2002e38c
 801deb8:	2002e3a4 	.word	0x2002e3a4
 801debc:	2002e390 	.word	0x2002e390
 801dec0:	08043e0c 	.word	0x08043e0c
 801dec4:	08044014 	.word	0x08044014
 801dec8:	08029a64 	.word	0x08029a64
 801decc:	08044024 	.word	0x08044024
 801ded0:	2002e3d0 	.word	0x2002e3d0
 801ded4:	080441c0 	.word	0x080441c0
 801ded8:	2002e3cc 	.word	0x2002e3cc
 801dedc:	2001f204 	.word	0x2001f204
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801dee0:	06d9      	lsls	r1, r3, #27
 801dee2:	f57f ac65 	bpl.w	801d7b0 <tcp_input+0x2bc>
 801dee6:	4b6a      	ldr	r3, [pc, #424]	; (801e090 <tcp_input+0xb9c>)
 801dee8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
 801deea:	681b      	ldr	r3, [r3, #0]
 801deec:	429a      	cmp	r2, r3
 801deee:	f47f ac5f 	bne.w	801d7b0 <tcp_input+0x2bc>
 801def2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
 801def4:	2b00      	cmp	r3, #0
 801def6:	f47f ac5b 	bne.w	801d7b0 <tcp_input+0x2bc>
        pcb->state = FIN_WAIT_2;
 801defa:	2306      	movs	r3, #6
 801defc:	752b      	strb	r3, [r5, #20]
    if (err != ERR_ABRT) {
 801defe:	e457      	b.n	801d7b0 <tcp_input+0x2bc>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801df00:	2900      	cmp	r1, #0
 801df02:	f43f ac55 	beq.w	801d7b0 <tcp_input+0x2bc>
 801df06:	4b63      	ldr	r3, [pc, #396]	; (801e094 <tcp_input+0xba0>)
 801df08:	681a      	ldr	r2, [r3, #0]
 801df0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801df0c:	3b01      	subs	r3, #1
 801df0e:	4293      	cmp	r3, r2
 801df10:	f47f ac4e 	bne.w	801d7b0 <tcp_input+0x2bc>
        tcp_rexmit(pcb);
 801df14:	4628      	mov	r0, r5
 801df16:	f000 ff95 	bl	801ee44 <tcp_rexmit>
    if (err != ERR_ABRT) {
 801df1a:	e449      	b.n	801d7b0 <tcp_input+0x2bc>
            pbuf_free(recv_data);
 801df1c:	f8d8 0000 	ldr.w	r0, [r8]
 801df20:	f7fc fed6 	bl	801acd0 <pbuf_free>
            tcp_abort(pcb);
 801df24:	4628      	mov	r0, r5
 801df26:	f7fe f957 	bl	801c1d8 <tcp_abort>
            goto aborted;
 801df2a:	e454      	b.n	801d7d6 <tcp_input+0x2e2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801df2c:	69ab      	ldr	r3, [r5, #24]
 801df2e:	2b00      	cmp	r3, #0
 801df30:	f43f aaed 	beq.w	801d50e <tcp_input+0x1a>
 801df34:	4601      	mov	r1, r0
 801df36:	f04f 32ff 	mov.w	r2, #4294967295
 801df3a:	6928      	ldr	r0, [r5, #16]
 801df3c:	4798      	blx	r3
 801df3e:	f7ff bae6 	b.w	801d50e <tcp_input+0x1a>
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801df42:	4633      	mov	r3, r6
 801df44:	4630      	mov	r0, r6
 801df46:	f8d8 2000 	ldr.w	r2, [r8]
 801df4a:	4629      	mov	r1, r5
 801df4c:	f7fe fb5a 	bl	801c604 <tcp_recv_null>
 801df50:	e6db      	b.n	801dd0a <tcp_input+0x816>
          pcb->state = ESTABLISHED;
 801df52:	2304      	movs	r3, #4
 801df54:	752b      	strb	r3, [r5, #20]
          if (pcb->listener == NULL) {
 801df56:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801df58:	2b00      	cmp	r3, #0
 801df5a:	d0e3      	beq.n	801df24 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801df5c:	699b      	ldr	r3, [r3, #24]
 801df5e:	2b00      	cmp	r3, #0
 801df60:	d05d      	beq.n	801e01e <tcp_input+0xb2a>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801df62:	2200      	movs	r2, #0
 801df64:	4629      	mov	r1, r5
 801df66:	6928      	ldr	r0, [r5, #16]
 801df68:	4798      	blx	r3
          if (err != ERR_OK) {
 801df6a:	2800      	cmp	r0, #0
 801df6c:	d153      	bne.n	801e016 <tcp_input+0xb22>
          tcp_receive(pcb);
 801df6e:	4628      	mov	r0, r5
 801df70:	f7fe fd78 	bl	801ca64 <tcp_receive>
          if (recv_acked != 0) {
 801df74:	f8bb 3000 	ldrh.w	r3, [fp]
 801df78:	b113      	cbz	r3, 801df80 <tcp_input+0xa8c>
            recv_acked--;
 801df7a:	3b01      	subs	r3, #1
 801df7c:	f8ab 3000 	strh.w	r3, [fp]
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801df80:	8e69      	ldrh	r1, [r5, #50]	; 0x32
 801df82:	f241 131c 	movw	r3, #4380	; 0x111c
 801df86:	004a      	lsls	r2, r1, #1
 801df88:	0088      	lsls	r0, r1, #2
 801df8a:	429a      	cmp	r2, r3
 801df8c:	4616      	mov	r6, r2
 801df8e:	bf38      	it	cc
 801df90:	461e      	movcc	r6, r3
 801df92:	ebb6 0f81 	cmp.w	r6, r1, lsl #2
 801df96:	d959      	bls.n	801e04c <tcp_input+0xb58>
 801df98:	b283      	uxth	r3, r0
 801df9a:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
          if (recv_flags & TF_GOT_FIN) {
 801df9e:	f89a 3000 	ldrb.w	r3, [sl]
 801dfa2:	069b      	lsls	r3, r3, #26
 801dfa4:	f57f ac04 	bpl.w	801d7b0 <tcp_input+0x2bc>
 801dfa8:	e584      	b.n	801dab4 <tcp_input+0x5c0>
  } else if (flags & TCP_FIN) {
 801dfaa:	07d0      	lsls	r0, r2, #31
 801dfac:	f57f ac72 	bpl.w	801d894 <tcp_input+0x3a0>
    pcb->tmr = tcp_ticks;
 801dfb0:	4b39      	ldr	r3, [pc, #228]	; (801e098 <tcp_input+0xba4>)
 801dfb2:	681b      	ldr	r3, [r3, #0]
 801dfb4:	622b      	str	r3, [r5, #32]
 801dfb6:	e46d      	b.n	801d894 <tcp_input+0x3a0>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801dfb8:	4b38      	ldr	r3, [pc, #224]	; (801e09c <tcp_input+0xba8>)
 801dfba:	f240 1215 	movw	r2, #277	; 0x115
 801dfbe:	4938      	ldr	r1, [pc, #224]	; (801e0a0 <tcp_input+0xbac>)
 801dfc0:	4838      	ldr	r0, [pc, #224]	; (801e0a4 <tcp_input+0xbb0>)
 801dfc2:	f006 ff47 	bl	8024e54 <iprintf>
 801dfc6:	f7ff bbb0 	b.w	801d72a <tcp_input+0x236>
        TCP_RMV_ACTIVE(pcb);
 801dfca:	68ea      	ldr	r2, [r5, #12]
 801dfcc:	60da      	str	r2, [r3, #12]
 801dfce:	e64b      	b.n	801dc68 <tcp_input+0x774>
          TCP_RMV_ACTIVE(pcb);
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	f43f ae49 	beq.w	801dc68 <tcp_input+0x774>
 801dfd6:	68da      	ldr	r2, [r3, #12]
 801dfd8:	42aa      	cmp	r2, r5
 801dfda:	d0f6      	beq.n	801dfca <tcp_input+0xad6>
 801dfdc:	4613      	mov	r3, r2
 801dfde:	e7f7      	b.n	801dfd0 <tcp_input+0xadc>
      tcp_abandon(npcb, 0);
 801dfe0:	2100      	movs	r1, #0
 801dfe2:	4648      	mov	r0, r9
 801dfe4:	f7fe f828 	bl	801c038 <tcp_abandon>
      return;
 801dfe8:	f7ff ba91 	b.w	801d50e <tcp_input+0x1a>
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801dfec:	4b2b      	ldr	r3, [pc, #172]	; (801e09c <tcp_input+0xba8>)
 801dfee:	f240 120d 	movw	r2, #269	; 0x10d
 801dff2:	492d      	ldr	r1, [pc, #180]	; (801e0a8 <tcp_input+0xbb4>)
 801dff4:	482b      	ldr	r0, [pc, #172]	; (801e0a4 <tcp_input+0xbb0>)
 801dff6:	f006 ff2d 	bl	8024e54 <iprintf>
      if (prev != NULL) {
 801dffa:	f1b8 0f00 	cmp.w	r8, #0
 801dffe:	f43f ab90 	beq.w	801d722 <tcp_input+0x22e>
 801e002:	68eb      	ldr	r3, [r5, #12]
 801e004:	f7ff bb87 	b.w	801d716 <tcp_input+0x222>
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801e008:	e9cd 0301 	strd	r0, r3, [sp, #4]
 801e00c:	9b05      	ldr	r3, [sp, #20]
 801e00e:	f8cd 9000 	str.w	r9, [sp]
 801e012:	881b      	ldrh	r3, [r3, #0]
 801e014:	e72d      	b.n	801de72 <tcp_input+0x97e>
            if (err != ERR_ABRT) {
 801e016:	300d      	adds	r0, #13
 801e018:	f43f abdd 	beq.w	801d7d6 <tcp_input+0x2e2>
 801e01c:	e782      	b.n	801df24 <tcp_input+0xa30>
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801e01e:	4b1f      	ldr	r3, [pc, #124]	; (801e09c <tcp_input+0xba8>)
 801e020:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801e024:	4921      	ldr	r1, [pc, #132]	; (801e0ac <tcp_input+0xbb8>)
 801e026:	481f      	ldr	r0, [pc, #124]	; (801e0a4 <tcp_input+0xbb0>)
 801e028:	f006 ff14 	bl	8024e54 <iprintf>
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801e02c:	6feb      	ldr	r3, [r5, #124]	; 0x7c
 801e02e:	699b      	ldr	r3, [r3, #24]
 801e030:	2b00      	cmp	r3, #0
 801e032:	d196      	bne.n	801df62 <tcp_input+0xa6e>
 801e034:	e776      	b.n	801df24 <tcp_input+0xa30>
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801e036:	2900      	cmp	r1, #0
 801e038:	f47f af03 	bne.w	801de42 <tcp_input+0x94e>
 801e03c:	4b17      	ldr	r3, [pc, #92]	; (801e09c <tcp_input+0xba8>)
 801e03e:	f44f 724e 	mov.w	r2, #824	; 0x338
 801e042:	491b      	ldr	r1, [pc, #108]	; (801e0b0 <tcp_input+0xbbc>)
 801e044:	4817      	ldr	r0, [pc, #92]	; (801e0a4 <tcp_input+0xbb0>)
 801e046:	f006 ff05 	bl	8024e54 <iprintf>
 801e04a:	e6fa      	b.n	801de42 <tcp_input+0x94e>
          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e04c:	429a      	cmp	r2, r3
 801e04e:	bf88      	it	hi
 801e050:	b293      	uxthhi	r3, r2
 801e052:	e7a2      	b.n	801df9a <tcp_input+0xaa6>
          pcb->rtime = -1;
 801e054:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801e058:	862b      	strh	r3, [r5, #48]	; 0x30
 801e05a:	e6dd      	b.n	801de18 <tcp_input+0x924>
          rseg = pcb->unsent;
 801e05c:	6eee      	ldr	r6, [r5, #108]	; 0x6c
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e05e:	b176      	cbz	r6, 801e07e <tcp_input+0xb8a>
          pcb->unsent = rseg->next;
 801e060:	6833      	ldr	r3, [r6, #0]
 801e062:	66eb      	str	r3, [r5, #108]	; 0x6c
 801e064:	e6cd      	b.n	801de02 <tcp_input+0x90e>
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801e066:	4b0d      	ldr	r3, [pc, #52]	; (801e09c <tcp_input+0xba8>)
 801e068:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801e06c:	4911      	ldr	r1, [pc, #68]	; (801e0b4 <tcp_input+0xbc0>)
 801e06e:	480d      	ldr	r0, [pc, #52]	; (801e0a4 <tcp_input+0xbb0>)
 801e070:	f006 fef0 	bl	8024e54 <iprintf>
 801e074:	e6ba      	b.n	801ddec <tcp_input+0x8f8>
        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801e076:	429a      	cmp	r2, r3
 801e078:	bf88      	it	hi
 801e07a:	b293      	uxthhi	r3, r2
 801e07c:	e6af      	b.n	801ddde <tcp_input+0x8ea>
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801e07e:	4b07      	ldr	r3, [pc, #28]	; (801e09c <tcp_input+0xba8>)
 801e080:	f44f 725d 	mov.w	r2, #884	; 0x374
 801e084:	490c      	ldr	r1, [pc, #48]	; (801e0b8 <tcp_input+0xbc4>)
 801e086:	4807      	ldr	r0, [pc, #28]	; (801e0a4 <tcp_input+0xbb0>)
 801e088:	f006 fee4 	bl	8024e54 <iprintf>
 801e08c:	e7e8      	b.n	801e060 <tcp_input+0xb6c>
 801e08e:	bf00      	nop
 801e090:	2002e3a8 	.word	0x2002e3a8
 801e094:	2002e3cc 	.word	0x2002e3cc
 801e098:	2002e39c 	.word	0x2002e39c
 801e09c:	08043e0c 	.word	0x08043e0c
 801e0a0:	080440f8 	.word	0x080440f8
 801e0a4:	08029a64 	.word	0x08029a64
 801e0a8:	080440cc 	.word	0x080440cc
 801e0ac:	080441a0 	.word	0x080441a0
 801e0b0:	08044154 	.word	0x08044154
 801e0b4:	08044174 	.word	0x08044174
 801e0b8:	0804418c 	.word	0x0804418c

0801e0bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
  recv_flags |= TF_CLOSED;
 801e0bc:	4a02      	ldr	r2, [pc, #8]	; (801e0c8 <tcp_trigger_input_pcb_close+0xc>)
 801e0be:	7813      	ldrb	r3, [r2, #0]
 801e0c0:	f043 0310 	orr.w	r3, r3, #16
 801e0c4:	7013      	strb	r3, [r2, #0]
}
 801e0c6:	4770      	bx	lr
 801e0c8:	2002e3c8 	.word	0x2002e3c8

0801e0cc <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801e0cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e0d0:	9f08      	ldr	r7, [sp, #32]
 801e0d2:	4680      	mov	r8, r0
 801e0d4:	460d      	mov	r5, r1
 801e0d6:	4614      	mov	r4, r2
 801e0d8:	461e      	mov	r6, r3
 801e0da:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e0de:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
  struct pbuf *p;
  u16_t alloc = length;

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e0e2:	2f00      	cmp	r7, #0
 801e0e4:	d033      	beq.n	801e14e <tcp_pbuf_prealloc+0x82>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801e0e6:	42a5      	cmp	r5, r4
 801e0e8:	d20e      	bcs.n	801e108 <tcp_pbuf_prealloc+0x3c>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e0ea:	f019 0f02 	tst.w	r9, #2
 801e0ee:	d008      	beq.n	801e102 <tcp_pbuf_prealloc+0x36>
        (!(pcb->flags & TF_NODELAY) &&
         (!first_seg ||
          pcb->unsent != NULL ||
          pcb->unacked != NULL))) {
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801e0f0:	f205 211b 	addw	r1, r5, #539	; 0x21b
 801e0f4:	f021 0103 	bic.w	r1, r1, #3
 801e0f8:	428c      	cmp	r4, r1
 801e0fa:	bf28      	it	cs
 801e0fc:	460c      	movcs	r4, r1
 801e0fe:	b2a1      	uxth	r1, r4
 801e100:	e003      	b.n	801e10a <tcp_pbuf_prealloc+0x3e>
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801e102:	8b7b      	ldrh	r3, [r7, #26]
 801e104:	065b      	lsls	r3, r3, #25
 801e106:	d518      	bpl.n	801e13a <tcp_pbuf_prealloc+0x6e>
 801e108:	4629      	mov	r1, r5
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801e10a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e10e:	4640      	mov	r0, r8
 801e110:	f7fc fc0c 	bl	801a92c <pbuf_alloc>
  if (p == NULL) {
 801e114:	4604      	mov	r4, r0
 801e116:	b168      	cbz	r0, 801e134 <tcp_pbuf_prealloc+0x68>
    return NULL;
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801e118:	6803      	ldr	r3, [r0, #0]
 801e11a:	b133      	cbz	r3, 801e12a <tcp_pbuf_prealloc+0x5e>
 801e11c:	4b0f      	ldr	r3, [pc, #60]	; (801e15c <tcp_pbuf_prealloc+0x90>)
 801e11e:	f240 120b 	movw	r2, #267	; 0x10b
 801e122:	490f      	ldr	r1, [pc, #60]	; (801e160 <tcp_pbuf_prealloc+0x94>)
 801e124:	480f      	ldr	r0, [pc, #60]	; (801e164 <tcp_pbuf_prealloc+0x98>)
 801e126:	f006 fe95 	bl	8024e54 <iprintf>
  *oversize = p->len - length;
 801e12a:	8963      	ldrh	r3, [r4, #10]
 801e12c:	1b5b      	subs	r3, r3, r5
 801e12e:	8033      	strh	r3, [r6, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801e130:	8125      	strh	r5, [r4, #8]
 801e132:	8165      	strh	r5, [r4, #10]
  return p;
}
 801e134:	4620      	mov	r0, r4
 801e136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        (!(pcb->flags & TF_NODELAY) &&
 801e13a:	f1ba 0f00 	cmp.w	sl, #0
 801e13e:	d0d7      	beq.n	801e0f0 <tcp_pbuf_prealloc+0x24>
         (!first_seg ||
 801e140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801e142:	2b00      	cmp	r3, #0
 801e144:	d1d4      	bne.n	801e0f0 <tcp_pbuf_prealloc+0x24>
          pcb->unsent != NULL ||
 801e146:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d1d1      	bne.n	801e0f0 <tcp_pbuf_prealloc+0x24>
 801e14c:	e7dc      	b.n	801e108 <tcp_pbuf_prealloc+0x3c>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801e14e:	4b03      	ldr	r3, [pc, #12]	; (801e15c <tcp_pbuf_prealloc+0x90>)
 801e150:	22e9      	movs	r2, #233	; 0xe9
 801e152:	4905      	ldr	r1, [pc, #20]	; (801e168 <tcp_pbuf_prealloc+0x9c>)
 801e154:	4803      	ldr	r0, [pc, #12]	; (801e164 <tcp_pbuf_prealloc+0x98>)
 801e156:	f006 fe7d 	bl	8024e54 <iprintf>
 801e15a:	e7c4      	b.n	801e0e6 <tcp_pbuf_prealloc+0x1a>
 801e15c:	080441dc 	.word	0x080441dc
 801e160:	08044230 	.word	0x08044230
 801e164:	08029a64 	.word	0x08029a64
 801e168:	08044210 	.word	0x08044210

0801e16c <tcp_create_segment>:
{
 801e16c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e170:	460e      	mov	r6, r1
 801e172:	f89d a020 	ldrb.w	sl, [sp, #32]
 801e176:	4690      	mov	r8, r2
 801e178:	4699      	mov	r9, r3
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e17a:	4607      	mov	r7, r0
 801e17c:	2800      	cmp	r0, #0
 801e17e:	d04c      	beq.n	801e21a <tcp_create_segment+0xae>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e180:	2e00      	cmp	r6, #0
 801e182:	d052      	beq.n	801e22a <tcp_create_segment+0xbe>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e184:	ea4f 058a 	mov.w	r5, sl, lsl #2
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e188:	22a8      	movs	r2, #168	; 0xa8
 801e18a:	4931      	ldr	r1, [pc, #196]	; (801e250 <tcp_create_segment+0xe4>)
 801e18c:	2004      	movs	r0, #4
 801e18e:	f7fc f851 	bl	801a234 <memp_malloc_fn>
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e192:	f005 0504 	and.w	r5, r5, #4
  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801e196:	4604      	mov	r4, r0
 801e198:	2800      	cmp	r0, #0
 801e19a:	d054      	beq.n	801e246 <tcp_create_segment+0xda>
  seg->flags = optflags;
 801e19c:	f880 a00a 	strb.w	sl, [r0, #10]
  seg->next = NULL;
 801e1a0:	2300      	movs	r3, #0
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e1a2:	8932      	ldrh	r2, [r6, #8]
 801e1a4:	fa1f fa85 	uxth.w	sl, r5
  seg->p = p;
 801e1a8:	6046      	str	r6, [r0, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e1aa:	42aa      	cmp	r2, r5
  seg->next = NULL;
 801e1ac:	6003      	str	r3, [r0, #0]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e1ae:	d32c      	bcc.n	801e20a <tcp_create_segment+0x9e>
  seg->len = p->tot_len - optlen;
 801e1b0:	eba2 020a 	sub.w	r2, r2, sl
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e1b4:	4630      	mov	r0, r6
 801e1b6:	2114      	movs	r1, #20
  seg->len = p->tot_len - optlen;
 801e1b8:	8122      	strh	r2, [r4, #8]
  if (pbuf_add_header(p, TCP_HLEN)) {
 801e1ba:	f7fc fcc9 	bl	801ab50 <pbuf_add_header>
 801e1be:	4606      	mov	r6, r0
 801e1c0:	2800      	cmp	r0, #0
 801e1c2:	d139      	bne.n	801e238 <tcp_create_segment+0xcc>
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e1c4:	6863      	ldr	r3, [r4, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e1c6:	02ad      	lsls	r5, r5, #10
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e1c8:	8af8      	ldrh	r0, [r7, #22]
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e1ca:	f8d3 a004 	ldr.w	sl, [r3, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e1ce:	f505 45a0 	add.w	r5, r5, #20480	; 0x5000
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801e1d2:	f8c4 a00c 	str.w	sl, [r4, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801e1d6:	f7fa fd3f 	bl	8018c58 <lwip_htons>
 801e1da:	f8aa 0000 	strh.w	r0, [sl]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801e1de:	8b38      	ldrh	r0, [r7, #24]
 801e1e0:	68e7      	ldr	r7, [r4, #12]
 801e1e2:	f7fa fd39 	bl	8018c58 <lwip_htons>
 801e1e6:	8078      	strh	r0, [r7, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801e1e8:	4648      	mov	r0, r9
 801e1ea:	68e7      	ldr	r7, [r4, #12]
 801e1ec:	f7fa fd38 	bl	8018c60 <lwip_htonl>
 801e1f0:	6078      	str	r0, [r7, #4]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e1f2:	ea45 0008 	orr.w	r0, r5, r8
 801e1f6:	68e7      	ldr	r7, [r4, #12]
 801e1f8:	f7fa fd2e 	bl	8018c58 <lwip_htons>
  seg->tcphdr->urgp = 0;
 801e1fc:	68e3      	ldr	r3, [r4, #12]
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801e1fe:	81b8      	strh	r0, [r7, #12]
  seg->tcphdr->urgp = 0;
 801e200:	749e      	strb	r6, [r3, #18]
 801e202:	74de      	strb	r6, [r3, #19]
}
 801e204:	4620      	mov	r0, r4
 801e206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801e20a:	22b0      	movs	r2, #176	; 0xb0
 801e20c:	4b10      	ldr	r3, [pc, #64]	; (801e250 <tcp_create_segment+0xe4>)
 801e20e:	4911      	ldr	r1, [pc, #68]	; (801e254 <tcp_create_segment+0xe8>)
 801e210:	4811      	ldr	r0, [pc, #68]	; (801e258 <tcp_create_segment+0xec>)
 801e212:	f006 fe1f 	bl	8024e54 <iprintf>
  seg->len = p->tot_len - optlen;
 801e216:	8932      	ldrh	r2, [r6, #8]
 801e218:	e7ca      	b.n	801e1b0 <tcp_create_segment+0x44>
  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801e21a:	4b0d      	ldr	r3, [pc, #52]	; (801e250 <tcp_create_segment+0xe4>)
 801e21c:	22a3      	movs	r2, #163	; 0xa3
 801e21e:	490f      	ldr	r1, [pc, #60]	; (801e25c <tcp_create_segment+0xf0>)
 801e220:	480d      	ldr	r0, [pc, #52]	; (801e258 <tcp_create_segment+0xec>)
 801e222:	f006 fe17 	bl	8024e54 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801e226:	2e00      	cmp	r6, #0
 801e228:	d1ac      	bne.n	801e184 <tcp_create_segment+0x18>
 801e22a:	4b09      	ldr	r3, [pc, #36]	; (801e250 <tcp_create_segment+0xe4>)
 801e22c:	22a4      	movs	r2, #164	; 0xa4
 801e22e:	490c      	ldr	r1, [pc, #48]	; (801e260 <tcp_create_segment+0xf4>)
 801e230:	4809      	ldr	r0, [pc, #36]	; (801e258 <tcp_create_segment+0xec>)
 801e232:	f006 fe0f 	bl	8024e54 <iprintf>
 801e236:	e7a5      	b.n	801e184 <tcp_create_segment+0x18>
    tcp_seg_free(seg);
 801e238:	4620      	mov	r0, r4
    return NULL;
 801e23a:	2400      	movs	r4, #0
    tcp_seg_free(seg);
 801e23c:	f7fd fac4 	bl	801b7c8 <tcp_seg_free>
}
 801e240:	4620      	mov	r0, r4
 801e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_free(p);
 801e246:	4630      	mov	r0, r6
 801e248:	f7fc fd42 	bl	801acd0 <pbuf_free>
    return NULL;
 801e24c:	e7da      	b.n	801e204 <tcp_create_segment+0x98>
 801e24e:	bf00      	nop
 801e250:	080441dc 	.word	0x080441dc
 801e254:	08044288 	.word	0x08044288
 801e258:	08029a64 	.word	0x08029a64
 801e25c:	08044244 	.word	0x08044244
 801e260:	08044264 	.word	0x08044264

0801e264 <tcp_output_alloc_header_common.constprop.0>:
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e264:	3114      	adds	r1, #20
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e26a:	b289      	uxth	r1, r1
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e26c:	4606      	mov	r6, r0
 801e26e:	4617      	mov	r7, r2
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e270:	2022      	movs	r0, #34	; 0x22
 801e272:	f44f 7220 	mov.w	r2, #640	; 0x280
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
 801e276:	461c      	mov	r4, r3
 801e278:	f8bd a020 	ldrh.w	sl, [sp, #32]
 801e27c:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 801e280:	f8bd 8028 	ldrh.w	r8, [sp, #40]	; 0x28
  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801e284:	f7fc fb52 	bl	801a92c <pbuf_alloc>
  if (p != NULL) {
 801e288:	4605      	mov	r5, r0
 801e28a:	b300      	cbz	r0, 801e2ce <tcp_output_alloc_header_common.constprop.0+0x6a>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e28c:	8943      	ldrh	r3, [r0, #10]
 801e28e:	2b13      	cmp	r3, #19
 801e290:	d920      	bls.n	801e2d4 <tcp_output_alloc_header_common.constprop.0+0x70>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
    tcphdr->src = lwip_htons(src_port);
 801e292:	4620      	mov	r0, r4
    tcphdr = (struct tcp_hdr *)p->payload;
 801e294:	686c      	ldr	r4, [r5, #4]
    tcphdr->src = lwip_htons(src_port);
 801e296:	f7fa fcdf 	bl	8018c58 <lwip_htons>
 801e29a:	8020      	strh	r0, [r4, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801e29c:	4650      	mov	r0, sl
 801e29e:	f7fa fcdb 	bl	8018c58 <lwip_htons>
    tcphdr->seqno = seqno_be;
 801e2a2:	6067      	str	r7, [r4, #4]
    tcphdr->dest = lwip_htons(dst_port);
 801e2a4:	8060      	strh	r0, [r4, #2]
    tcphdr->ackno = lwip_htonl(ackno);
 801e2a6:	4630      	mov	r0, r6
 801e2a8:	f7fa fcda 	bl	8018c60 <lwip_htonl>
 801e2ac:	4603      	mov	r3, r0
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e2ae:	f449 40a0 	orr.w	r0, r9, #20480	; 0x5000
    tcphdr->ackno = lwip_htonl(ackno);
 801e2b2:	60a3      	str	r3, [r4, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e2b4:	f7fa fcd0 	bl	8018c58 <lwip_htons>
 801e2b8:	4603      	mov	r3, r0
    tcphdr->wnd = lwip_htons(wnd);
 801e2ba:	4640      	mov	r0, r8
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801e2bc:	81a3      	strh	r3, [r4, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801e2be:	f7fa fccb 	bl	8018c58 <lwip_htons>
    tcphdr->chksum = 0;
 801e2c2:	2300      	movs	r3, #0
    tcphdr->wnd = lwip_htons(wnd);
 801e2c4:	81e0      	strh	r0, [r4, #14]
    tcphdr->chksum = 0;
 801e2c6:	7423      	strb	r3, [r4, #16]
 801e2c8:	7463      	strb	r3, [r4, #17]
    tcphdr->urgp = 0;
 801e2ca:	74a3      	strb	r3, [r4, #18]
 801e2cc:	74e3      	strb	r3, [r4, #19]
  }
  return p;
}
 801e2ce:	4628      	mov	r0, r5
 801e2d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801e2d4:	4b03      	ldr	r3, [pc, #12]	; (801e2e4 <tcp_output_alloc_header_common.constprop.0+0x80>)
 801e2d6:	f240 7223 	movw	r2, #1827	; 0x723
 801e2da:	4903      	ldr	r1, [pc, #12]	; (801e2e8 <tcp_output_alloc_header_common.constprop.0+0x84>)
 801e2dc:	4803      	ldr	r0, [pc, #12]	; (801e2ec <tcp_output_alloc_header_common.constprop.0+0x88>)
 801e2de:	f006 fdb9 	bl	8024e54 <iprintf>
 801e2e2:	e7d6      	b.n	801e292 <tcp_output_alloc_header_common.constprop.0+0x2e>
 801e2e4:	080441dc 	.word	0x080441dc
 801e2e8:	080442a0 	.word	0x080442a0
 801e2ec:	08029a64 	.word	0x08029a64

0801e2f0 <tcp_output_alloc_header.constprop.0>:
 * @param datalen length of tcp data to reserve in pbuf
 * @param seqno_be seqno in network byte order (big-endian)
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e2f0:	b570      	push	{r4, r5, r6, lr}
 801e2f2:	460d      	mov	r5, r1
 801e2f4:	b084      	sub	sp, #16
                        u32_t seqno_be /* already in network byte order */)
{
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e2f6:	4604      	mov	r4, r0
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
 801e2f8:	4616      	mov	r6, r2
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e2fa:	b190      	cbz	r0, 801e322 <tcp_output_alloc_header.constprop.0+0x32>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801e2fc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 801e2fe:	2210      	movs	r2, #16
 801e300:	8b21      	ldrh	r1, [r4, #24]
 801e302:	9302      	str	r3, [sp, #8]
 801e304:	e9cd 1200 	strd	r1, r2, [sp]
 801e308:	4632      	mov	r2, r6
 801e30a:	4629      	mov	r1, r5
 801e30c:	8ae3      	ldrh	r3, [r4, #22]
 801e30e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801e310:	f7ff ffa8 	bl	801e264 <tcp_output_alloc_header_common.constprop.0>
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801e314:	b118      	cbz	r0, 801e31e <tcp_output_alloc_header.constprop.0+0x2e>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801e316:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801e318:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801e31a:	4413      	add	r3, r2
 801e31c:	62e3      	str	r3, [r4, #44]	; 0x2c
  }
  return p;
}
 801e31e:	b004      	add	sp, #16
 801e320:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801e322:	4b04      	ldr	r3, [pc, #16]	; (801e334 <tcp_output_alloc_header.constprop.0+0x44>)
 801e324:	f240 7242 	movw	r2, #1858	; 0x742
 801e328:	4903      	ldr	r1, [pc, #12]	; (801e338 <tcp_output_alloc_header.constprop.0+0x48>)
 801e32a:	4804      	ldr	r0, [pc, #16]	; (801e33c <tcp_output_alloc_header.constprop.0+0x4c>)
 801e32c:	f006 fd92 	bl	8024e54 <iprintf>
 801e330:	e7e4      	b.n	801e2fc <tcp_output_alloc_header.constprop.0+0xc>
 801e332:	bf00      	nop
 801e334:	080441dc 	.word	0x080441dc
 801e338:	080442d0 	.word	0x080442d0
 801e33c:	08029a64 	.word	0x08029a64

0801e340 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801e340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e344:	4605      	mov	r5, r0
 801e346:	b085      	sub	sp, #20
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e348:	460c      	mov	r4, r1
{
 801e34a:	4690      	mov	r8, r2
 801e34c:	461e      	mov	r6, r3
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e34e:	2900      	cmp	r1, #0
 801e350:	d034      	beq.n	801e3bc <tcp_output_control_segment+0x7c>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801e352:	2d00      	cmp	r5, #0
 801e354:	d03a      	beq.n	801e3cc <tcp_output_control_segment+0x8c>
 801e356:	7a28      	ldrb	r0, [r5, #8]
 801e358:	bb10      	cbnz	r0, 801e3a0 <tcp_output_control_segment+0x60>
    return ip_route(src, dst);
 801e35a:	4630      	mov	r0, r6
 801e35c:	f004 f8b4 	bl	80224c8 <ip4_route>

  netif = tcp_route(pcb, src, dst);
  if (netif == NULL) {
 801e360:	4607      	mov	r7, r0
 801e362:	b310      	cbz	r0, 801e3aa <tcp_output_control_segment+0x6a>
  } else {
    u8_t ttl, tos;
#if CHECKSUM_GEN_TCP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_TCP) {
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e364:	9600      	str	r6, [sp, #0]
 801e366:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e368:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e36c:	2106      	movs	r1, #6
 801e36e:	8922      	ldrh	r2, [r4, #8]
 801e370:	4620      	mov	r0, r4
 801e372:	f7fb fa05 	bl	8019780 <ip_chksum_pseudo>
 801e376:	f8a9 0010 	strh.w	r0, [r9, #16]
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801e37a:	7aeb      	ldrb	r3, [r5, #11]
      tos = pcb->tos;
 801e37c:	7aad      	ldrb	r5, [r5, #10]
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
      tos = 0;
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801e37e:	9500      	str	r5, [sp, #0]
 801e380:	2506      	movs	r5, #6
 801e382:	4632      	mov	r2, r6
 801e384:	4641      	mov	r1, r8
 801e386:	9501      	str	r5, [sp, #4]
 801e388:	4620      	mov	r0, r4
 801e38a:	9702      	str	r7, [sp, #8]
 801e38c:	f004 fa66 	bl	802285c <ip4_output_if>
 801e390:	4605      	mov	r5, r0
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801e392:	4620      	mov	r0, r4
 801e394:	f7fc fc9c 	bl	801acd0 <pbuf_free>
  return err;
}
 801e398:	4628      	mov	r0, r5
 801e39a:	b005      	add	sp, #20
 801e39c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return netif_get_by_index(pcb->netif_idx);
 801e3a0:	f7fc f970 	bl	801a684 <netif_get_by_index>
  if (netif == NULL) {
 801e3a4:	4607      	mov	r7, r0
 801e3a6:	2800      	cmp	r0, #0
 801e3a8:	d1dc      	bne.n	801e364 <tcp_output_control_segment+0x24>
    err = ERR_RTE;
 801e3aa:	f06f 0503 	mvn.w	r5, #3
  pbuf_free(p);
 801e3ae:	4620      	mov	r0, r4
 801e3b0:	f7fc fc8e 	bl	801acd0 <pbuf_free>
}
 801e3b4:	4628      	mov	r0, r5
 801e3b6:	b005      	add	sp, #20
 801e3b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801e3bc:	4b0d      	ldr	r3, [pc, #52]	; (801e3f4 <tcp_output_control_segment+0xb4>)
 801e3be:	f240 7287 	movw	r2, #1927	; 0x787
 801e3c2:	490d      	ldr	r1, [pc, #52]	; (801e3f8 <tcp_output_control_segment+0xb8>)
 801e3c4:	480d      	ldr	r0, [pc, #52]	; (801e3fc <tcp_output_control_segment+0xbc>)
 801e3c6:	f006 fd45 	bl	8024e54 <iprintf>
 801e3ca:	e7c2      	b.n	801e352 <tcp_output_control_segment+0x12>
    return ip_route(src, dst);
 801e3cc:	4630      	mov	r0, r6
 801e3ce:	f004 f87b 	bl	80224c8 <ip4_route>
  if (netif == NULL) {
 801e3d2:	4607      	mov	r7, r0
 801e3d4:	2800      	cmp	r0, #0
 801e3d6:	d0e8      	beq.n	801e3aa <tcp_output_control_segment+0x6a>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e3d8:	9600      	str	r6, [sp, #0]
 801e3da:	4643      	mov	r3, r8
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
 801e3dc:	f8d4 9004 	ldr.w	r9, [r4, #4]
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e3e0:	2106      	movs	r1, #6
 801e3e2:	8922      	ldrh	r2, [r4, #8]
 801e3e4:	4620      	mov	r0, r4
 801e3e6:	f7fb f9cb 	bl	8019780 <ip_chksum_pseudo>
      ttl = TCP_TTL;
 801e3ea:	23ff      	movs	r3, #255	; 0xff
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
 801e3ec:	f8a9 0010 	strh.w	r0, [r9, #16]
    if (pcb != NULL) {
 801e3f0:	e7c5      	b.n	801e37e <tcp_output_control_segment+0x3e>
 801e3f2:	bf00      	nop
 801e3f4:	080441dc 	.word	0x080441dc
 801e3f8:	080442f8 	.word	0x080442f8
 801e3fc:	08029a64 	.word	0x08029a64

0801e400 <tcp_write>:
{
 801e400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t oversize = 0;
 801e404:	2400      	movs	r4, #0
{
 801e406:	b091      	sub	sp, #68	; 0x44
 801e408:	9107      	str	r1, [sp, #28]
 801e40a:	9309      	str	r3, [sp, #36]	; 0x24
  u16_t oversize = 0;
 801e40c:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801e410:	2800      	cmp	r0, #0
 801e412:	f000 82fc 	beq.w	801ea0e <tcp_write+0x60e>
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801e416:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 801e41a:	4692      	mov	sl, r2
 801e41c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 801e41e:	4681      	mov	r9, r0
 801e420:	085b      	lsrs	r3, r3, #1
 801e422:	4293      	cmp	r3, r2
 801e424:	bf28      	it	cs
 801e426:	4613      	movcs	r3, r2
 801e428:	469b      	mov	fp, r3
  mss_local = mss_local ? mss_local : pcb->mss;
 801e42a:	2b00      	cmp	r3, #0
 801e42c:	bf08      	it	eq
 801e42e:	4693      	moveq	fp, r2
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e430:	9b07      	ldr	r3, [sp, #28]
 801e432:	2b00      	cmp	r3, #0
 801e434:	f000 82df 	beq.w	801e9f6 <tcp_write+0x5f6>
  if ((pcb->state != ESTABLISHED) &&
 801e438:	7d03      	ldrb	r3, [r0, #20]
      (pcb->state != CLOSE_WAIT) &&
 801e43a:	1e9a      	subs	r2, r3, #2
      (pcb->state != SYN_SENT) &&
 801e43c:	2a02      	cmp	r2, #2
 801e43e:	d902      	bls.n	801e446 <tcp_write+0x46>
 801e440:	2b07      	cmp	r3, #7
 801e442:	f040 829c 	bne.w	801e97e <tcp_write+0x57e>
  } else if (len == 0) {
 801e446:	f1ba 0f00 	cmp.w	sl, #0
 801e44a:	f000 80ec 	beq.w	801e626 <tcp_write+0x226>
  if (len > pcb->snd_buf) {
 801e44e:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e452:	4553      	cmp	r3, sl
 801e454:	f0c0 82b6 	bcc.w	801e9c4 <tcp_write+0x5c4>
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801e458:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e45c:	2e08      	cmp	r6, #8
 801e45e:	f200 82b1 	bhi.w	801e9c4 <tcp_write+0x5c4>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e462:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
  if (pcb->snd_queuelen != 0) {
 801e466:	2e00      	cmp	r6, #0
 801e468:	f000 80d3 	beq.w	801e612 <tcp_write+0x212>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	f040 80dc 	bne.w	801e62a <tcp_write+0x22a>
 801e472:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e476:	f1b8 0f00 	cmp.w	r8, #0
 801e47a:	f000 8263 	beq.w	801e944 <tcp_write+0x544>
 801e47e:	4643      	mov	r3, r8
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e480:	461a      	mov	r2, r3
 801e482:	681b      	ldr	r3, [r3, #0]
 801e484:	2b00      	cmp	r3, #0
 801e486:	d1fb      	bne.n	801e480 <tcp_write+0x80>
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e488:	7a94      	ldrb	r4, [r2, #10]
 801e48a:	4698      	mov	r8, r3
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e48c:	8913      	ldrh	r3, [r2, #8]
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801e48e:	00a4      	lsls	r4, r4, #2
 801e490:	920b      	str	r2, [sp, #44]	; 0x2c
 801e492:	f004 0404 	and.w	r4, r4, #4
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e496:	191a      	adds	r2, r3, r4
 801e498:	4593      	cmp	fp, r2
 801e49a:	f2c0 81a6 	blt.w	801e7ea <tcp_write+0x3ea>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e49e:	ebab 0404 	sub.w	r4, fp, r4
 801e4a2:	1ae4      	subs	r4, r4, r3
    oversize = pcb->unsent_oversize;
 801e4a4:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e4a8:	b2a4      	uxth	r4, r4
    oversize = pcb->unsent_oversize;
 801e4aa:	930a      	str	r3, [sp, #40]	; 0x28
 801e4ac:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
    if (oversize > 0) {
 801e4b0:	2b00      	cmp	r3, #0
 801e4b2:	f000 80cf 	beq.w	801e654 <tcp_write+0x254>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e4b6:	42a3      	cmp	r3, r4
 801e4b8:	f200 818a 	bhi.w	801e7d0 <tcp_write+0x3d0>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e4bc:	45a2      	cmp	sl, r4
 801e4be:	4653      	mov	r3, sl
 801e4c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e4c2:	bf28      	it	cs
 801e4c4:	4623      	movcs	r3, r4
 801e4c6:	4293      	cmp	r3, r2
 801e4c8:	bf28      	it	cs
 801e4ca:	4613      	movcs	r3, r2
      oversize -= oversize_used;
 801e4cc:	1ad2      	subs	r2, r2, r3
      space -= oversize_used;
 801e4ce:	1ae4      	subs	r4, r4, r3
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e4d0:	930a      	str	r3, [sp, #40]	; 0x28
      oversize -= oversize_used;
 801e4d2:	b292      	uxth	r2, r2
      space -= oversize_used;
 801e4d4:	b2a4      	uxth	r4, r4
      oversize -= oversize_used;
 801e4d6:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e4da:	2a00      	cmp	r2, #0
 801e4dc:	f000 8183 	beq.w	801e7e6 <tcp_write+0x3e6>
 801e4e0:	459a      	cmp	sl, r3
 801e4e2:	f000 8180 	beq.w	801e7e6 <tcp_write+0x3e6>
 801e4e6:	4bb2      	ldr	r3, [pc, #712]	; (801e7b0 <tcp_write+0x3b0>)
 801e4e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 801e4ec:	49b1      	ldr	r1, [pc, #708]	; (801e7b4 <tcp_write+0x3b4>)
 801e4ee:	48b2      	ldr	r0, [pc, #712]	; (801e7b8 <tcp_write+0x3b8>)
 801e4f0:	f006 fcb0 	bl	8024e54 <iprintf>
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801e4f6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e4f8:	459a      	cmp	sl, r3
 801e4fa:	f200 80b0 	bhi.w	801e65e <tcp_write+0x25e>
  struct pbuf *concat_p = NULL;
 801e4fe:	2300      	movs	r3, #0
 801e500:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e502:	930c      	str	r3, [sp, #48]	; 0x30
  u16_t extendlen = 0;
 801e504:	930d      	str	r3, [sp, #52]	; 0x34
  while (pos < len) {
 801e506:	45a2      	cmp	sl, r4
 801e508:	f240 80ee 	bls.w	801e6e8 <tcp_write+0x2e8>
 801e50c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e50e:	f04f 0800 	mov.w	r8, #0
 801e512:	f003 0301 	and.w	r3, r3, #1
 801e516:	f8cd 8014 	str.w	r8, [sp, #20]
 801e51a:	9308      	str	r3, [sp, #32]
 801e51c:	4643      	mov	r3, r8
 801e51e:	46d8      	mov	r8, fp
 801e520:	469b      	mov	fp, r3
 801e522:	e042      	b.n	801e5aa <tcp_write+0x1aa>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e524:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e528:	2b00      	cmp	r3, #0
 801e52a:	f040 80f0 	bne.w	801e70e <tcp_write+0x30e>
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801e52e:	2201      	movs	r2, #1
 801e530:	4629      	mov	r1, r5
 801e532:	2036      	movs	r0, #54	; 0x36
 801e534:	f7fc f9fa 	bl	801a92c <pbuf_alloc>
 801e538:	2800      	cmp	r0, #0
 801e53a:	f000 8100 	beq.w	801e73e <tcp_write+0x33e>
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e53e:	9a07      	ldr	r2, [sp, #28]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e540:	2100      	movs	r1, #0
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801e542:	9006      	str	r0, [sp, #24]
 801e544:	4422      	add	r2, r4
 801e546:	6042      	str	r2, [r0, #4]
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e548:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e54c:	2036      	movs	r0, #54	; 0x36
 801e54e:	f7fc f9ed 	bl	801a92c <pbuf_alloc>
 801e552:	9b06      	ldr	r3, [sp, #24]
 801e554:	4607      	mov	r7, r0
 801e556:	2800      	cmp	r0, #0
 801e558:	f000 8195 	beq.w	801e886 <tcp_write+0x486>
      pbuf_cat(p/*header*/, p2/*data*/);
 801e55c:	4619      	mov	r1, r3
 801e55e:	f7fc fbe9 	bl	801ad34 <pbuf_cat>
    queuelen += pbuf_clen(p);
 801e562:	4638      	mov	r0, r7
 801e564:	f7fc fbc8 	bl	801acf8 <pbuf_clen>
 801e568:	4430      	add	r0, r6
 801e56a:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e56c:	2e09      	cmp	r6, #9
 801e56e:	d84a      	bhi.n	801e606 <tcp_write+0x206>
    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e570:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
 801e574:	2200      	movs	r2, #0
 801e576:	4639      	mov	r1, r7
 801e578:	4648      	mov	r0, r9
 801e57a:	4423      	add	r3, r4
 801e57c:	9200      	str	r2, [sp, #0]
 801e57e:	f7ff fdf5 	bl	801e16c <tcp_create_segment>
 801e582:	4607      	mov	r7, r0
 801e584:	2800      	cmp	r0, #0
 801e586:	f000 80da 	beq.w	801e73e <tcp_write+0x33e>
    if (queue == NULL) {
 801e58a:	9b05      	ldr	r3, [sp, #20]
 801e58c:	2b00      	cmp	r3, #0
 801e58e:	f000 80a3 	beq.w	801e6d8 <tcp_write+0x2d8>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e592:	f1bb 0f00 	cmp.w	fp, #0
 801e596:	f000 80c2 	beq.w	801e71e <tcp_write+0x31e>
    pos += seglen;
 801e59a:	442c      	add	r4, r5
      prev_seg->next = seg;
 801e59c:	f8cb 7000 	str.w	r7, [fp]
    pos += seglen;
 801e5a0:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e5a2:	45a2      	cmp	sl, r4
 801e5a4:	f240 809e 	bls.w	801e6e4 <tcp_write+0x2e4>
 801e5a8:	46bb      	mov	fp, r7
    u16_t left = len - pos;
 801e5aa:	ebaa 0504 	sub.w	r5, sl, r4
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e5ae:	9b08      	ldr	r3, [sp, #32]
    u16_t seglen = LWIP_MIN(left, max_len);
 801e5b0:	b2ad      	uxth	r5, r5
 801e5b2:	4545      	cmp	r5, r8
 801e5b4:	bf28      	it	cs
 801e5b6:	4645      	movcs	r5, r8
 801e5b8:	b2ad      	uxth	r5, r5
    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	d0b2      	beq.n	801e524 <tcp_write+0x124>
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801e5be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e5c0:	4642      	mov	r2, r8
 801e5c2:	4629      	mov	r1, r5
 801e5c4:	2036      	movs	r0, #54	; 0x36
 801e5c6:	e9cd 9300 	strd	r9, r3, [sp]
 801e5ca:	9b05      	ldr	r3, [sp, #20]
 801e5cc:	fab3 f383 	clz	r3, r3
 801e5d0:	095b      	lsrs	r3, r3, #5
 801e5d2:	9302      	str	r3, [sp, #8]
 801e5d4:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801e5d8:	f7ff fd78 	bl	801e0cc <tcp_pbuf_prealloc>
 801e5dc:	4607      	mov	r7, r0
 801e5de:	2800      	cmp	r0, #0
 801e5e0:	f000 80ad 	beq.w	801e73e <tcp_write+0x33e>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e5e4:	8943      	ldrh	r3, [r0, #10]
 801e5e6:	42ab      	cmp	r3, r5
 801e5e8:	f0c0 80a1 	bcc.w	801e72e <tcp_write+0x32e>
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801e5ec:	9b07      	ldr	r3, [sp, #28]
 801e5ee:	462a      	mov	r2, r5
 801e5f0:	6878      	ldr	r0, [r7, #4]
 801e5f2:	1919      	adds	r1, r3, r4
 801e5f4:	f005 fc68 	bl	8023ec8 <memcpy>
    queuelen += pbuf_clen(p);
 801e5f8:	4638      	mov	r0, r7
 801e5fa:	f7fc fb7d 	bl	801acf8 <pbuf_clen>
 801e5fe:	4430      	add	r0, r6
 801e600:	b286      	uxth	r6, r0
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801e602:	2e09      	cmp	r6, #9
 801e604:	d9b4      	bls.n	801e570 <tcp_write+0x170>
      pbuf_free(p);
 801e606:	4638      	mov	r0, r7
 801e608:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e60c:	f7fc fb60 	bl	801acd0 <pbuf_free>
      goto memerr;
 801e610:	e097      	b.n	801e742 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e612:	2b00      	cmp	r3, #0
 801e614:	f000 80b6 	beq.w	801e784 <tcp_write+0x384>
 801e618:	4b65      	ldr	r3, [pc, #404]	; (801e7b0 <tcp_write+0x3b0>)
 801e61a:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801e61e:	4967      	ldr	r1, [pc, #412]	; (801e7bc <tcp_write+0x3bc>)
 801e620:	4865      	ldr	r0, [pc, #404]	; (801e7b8 <tcp_write+0x3b8>)
 801e622:	f006 fc17 	bl	8024e54 <iprintf>
  queuelen = pcb->snd_queuelen;
 801e626:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
  if (pcb->unsent != NULL) {
 801e62a:	f8d9 806c 	ldr.w	r8, [r9, #108]	; 0x6c
 801e62e:	f1b8 0f00 	cmp.w	r8, #0
 801e632:	f47f af24 	bne.w	801e47e <tcp_write+0x7e>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e636:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e63a:	2b00      	cmp	r3, #0
 801e63c:	f040 80ac 	bne.w	801e798 <tcp_write+0x398>
  while (pos < len) {
 801e640:	f1ba 0f00 	cmp.w	sl, #0
 801e644:	f000 81c7 	beq.w	801e9d6 <tcp_write+0x5d6>
          extendlen = seglen;
 801e648:	2400      	movs	r4, #0
 801e64a:	940d      	str	r4, [sp, #52]	; 0x34
 801e64c:	940c      	str	r4, [sp, #48]	; 0x30
 801e64e:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 801e652:	e75b      	b.n	801e50c <tcp_write+0x10c>
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801e654:	9f0a      	ldr	r7, [sp, #40]	; 0x28
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801e656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e658:	459a      	cmp	sl, r3
 801e65a:	f67f af50 	bls.w	801e4fe <tcp_write+0xfe>
 801e65e:	2c00      	cmp	r4, #0
 801e660:	f43f af4d 	beq.w	801e4fe <tcp_write+0xfe>
 801e664:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e666:	8912      	ldrh	r2, [r2, #8]
 801e668:	920d      	str	r2, [sp, #52]	; 0x34
 801e66a:	2a00      	cmp	r2, #0
 801e66c:	f000 809c 	beq.w	801e7a8 <tcp_write+0x3a8>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e670:	ebaa 0703 	sub.w	r7, sl, r3
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e674:	9b09      	ldr	r3, [sp, #36]	; 0x24
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e676:	42a7      	cmp	r7, r4
 801e678:	bfa8      	it	ge
 801e67a:	4627      	movge	r7, r4
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e67c:	07da      	lsls	r2, r3, #31
      u16_t seglen = LWIP_MIN(space, len - pos);
 801e67e:	b2bd      	uxth	r5, r7
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801e680:	f100 8187 	bmi.w	801e992 <tcp_write+0x592>
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801e684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e686:	685a      	ldr	r2, [r3, #4]
 801e688:	4613      	mov	r3, r2
 801e68a:	6812      	ldr	r2, [r2, #0]
 801e68c:	2a00      	cmp	r2, #0
 801e68e:	d1fb      	bne.n	801e688 <tcp_write+0x288>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e690:	920c      	str	r2, [sp, #48]	; 0x30
 801e692:	7b1a      	ldrb	r2, [r3, #12]
 801e694:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 801e698:	d106      	bne.n	801e6a8 <tcp_write+0x2a8>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801e69a:	895a      	ldrh	r2, [r3, #10]
 801e69c:	685b      	ldr	r3, [r3, #4]
 801e69e:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801e6a0:	9a07      	ldr	r2, [sp, #28]
 801e6a2:	429a      	cmp	r2, r3
 801e6a4:	f000 8167 	beq.w	801e976 <tcp_write+0x576>
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801e6a8:	2201      	movs	r2, #1
 801e6aa:	4629      	mov	r1, r5
 801e6ac:	2000      	movs	r0, #0
 801e6ae:	f7fc f93d 	bl	801a92c <pbuf_alloc>
 801e6b2:	900c      	str	r0, [sp, #48]	; 0x30
 801e6b4:	2800      	cmp	r0, #0
 801e6b6:	f000 813e 	beq.w	801e936 <tcp_write+0x536>
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801e6ba:	9b07      	ldr	r3, [sp, #28]
 801e6bc:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e6be:	440b      	add	r3, r1
 801e6c0:	6043      	str	r3, [r0, #4]
          queuelen += pbuf_clen(concat_p);
 801e6c2:	f7fc fb19 	bl	801acf8 <pbuf_clen>
 801e6c6:	4406      	add	r6, r0
  u16_t extendlen = 0;
 801e6c8:	2300      	movs	r3, #0
          queuelen += pbuf_clen(concat_p);
 801e6ca:	b2b6      	uxth	r6, r6
  u16_t extendlen = 0;
 801e6cc:	930d      	str	r3, [sp, #52]	; 0x34
      pos += seglen;
 801e6ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6d0:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e6d2:	18ec      	adds	r4, r5, r3
 801e6d4:	b2a4      	uxth	r4, r4
 801e6d6:	e716      	b.n	801e506 <tcp_write+0x106>
    pos += seglen;
 801e6d8:	442c      	add	r4, r5
 801e6da:	9005      	str	r0, [sp, #20]
 801e6dc:	b2a4      	uxth	r4, r4
  while (pos < len) {
 801e6de:	45a2      	cmp	sl, r4
 801e6e0:	f63f af62 	bhi.w	801e5a8 <tcp_write+0x1a8>
 801e6e4:	f8dd 8014 	ldr.w	r8, [sp, #20]
  if (oversize_used > 0) {
 801e6e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e6ea:	2b00      	cmp	r3, #0
 801e6ec:	f000 80db 	beq.w	801e8a6 <tcp_write+0x4a6>
    for (p = last_unsent->p; p; p = p->next) {
 801e6f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e6f2:	6854      	ldr	r4, [r2, #4]
 801e6f4:	2c00      	cmp	r4, #0
 801e6f6:	f000 8090 	beq.w	801e81a <tcp_write+0x41a>
 801e6fa:	469b      	mov	fp, r3
 801e6fc:	9d07      	ldr	r5, [sp, #28]
      p->tot_len += oversize_used;
 801e6fe:	8923      	ldrh	r3, [r4, #8]
      if (p->next == NULL) {
 801e700:	6822      	ldr	r2, [r4, #0]
      p->tot_len += oversize_used;
 801e702:	445b      	add	r3, fp
 801e704:	8123      	strh	r3, [r4, #8]
      if (p->next == NULL) {
 801e706:	2a00      	cmp	r2, #0
 801e708:	d079      	beq.n	801e7fe <tcp_write+0x3fe>
  u16_t extendlen = 0;
 801e70a:	4614      	mov	r4, r2
 801e70c:	e7f7      	b.n	801e6fe <tcp_write+0x2fe>
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801e70e:	4b28      	ldr	r3, [pc, #160]	; (801e7b0 <tcp_write+0x3b0>)
 801e710:	f240 2271 	movw	r2, #625	; 0x271
 801e714:	492a      	ldr	r1, [pc, #168]	; (801e7c0 <tcp_write+0x3c0>)
 801e716:	4828      	ldr	r0, [pc, #160]	; (801e7b8 <tcp_write+0x3b8>)
 801e718:	f006 fb9c 	bl	8024e54 <iprintf>
 801e71c:	e707      	b.n	801e52e <tcp_write+0x12e>
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e71e:	4b24      	ldr	r3, [pc, #144]	; (801e7b0 <tcp_write+0x3b0>)
 801e720:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e724:	4927      	ldr	r1, [pc, #156]	; (801e7c4 <tcp_write+0x3c4>)
 801e726:	4824      	ldr	r0, [pc, #144]	; (801e7b8 <tcp_write+0x3b8>)
 801e728:	f006 fb94 	bl	8024e54 <iprintf>
 801e72c:	e735      	b.n	801e59a <tcp_write+0x19a>
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801e72e:	4b20      	ldr	r3, [pc, #128]	; (801e7b0 <tcp_write+0x3b0>)
 801e730:	f240 2266 	movw	r2, #614	; 0x266
 801e734:	4924      	ldr	r1, [pc, #144]	; (801e7c8 <tcp_write+0x3c8>)
 801e736:	4820      	ldr	r0, [pc, #128]	; (801e7b8 <tcp_write+0x3b8>)
 801e738:	f006 fb8c 	bl	8024e54 <iprintf>
 801e73c:	e756      	b.n	801e5ec <tcp_write+0x1ec>
 801e73e:	f8dd 8014 	ldr.w	r8, [sp, #20]
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e742:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801e746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e74a:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801e74e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e750:	b113      	cbz	r3, 801e758 <tcp_write+0x358>
    pbuf_free(concat_p);
 801e752:	4618      	mov	r0, r3
 801e754:	f7fc fabc 	bl	801acd0 <pbuf_free>
  if (queue != NULL) {
 801e758:	f1b8 0f00 	cmp.w	r8, #0
 801e75c:	d002      	beq.n	801e764 <tcp_write+0x364>
    tcp_segs_free(queue);
 801e75e:	4640      	mov	r0, r8
 801e760:	f7fd f820 	bl	801b7a4 <tcp_segs_free>
  if (pcb->snd_queuelen != 0) {
 801e764:	f8b9 3066 	ldrh.w	r3, [r9, #102]	; 0x66
 801e768:	b13b      	cbz	r3, 801e77a <tcp_write+0x37a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e76a:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e76e:	b923      	cbnz	r3, 801e77a <tcp_write+0x37a>
 801e770:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e774:	2b00      	cmp	r3, #0
 801e776:	f000 808c 	beq.w	801e892 <tcp_write+0x492>
  return ERR_MEM;
 801e77a:	f04f 30ff 	mov.w	r0, #4294967295
}
 801e77e:	b011      	add	sp, #68	; 0x44
 801e780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801e784:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e788:	2b00      	cmp	r3, #0
 801e78a:	f47f af45 	bne.w	801e618 <tcp_write+0x218>
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801e78e:	f8b9 3068 	ldrh.w	r3, [r9, #104]	; 0x68
 801e792:	2b00      	cmp	r3, #0
 801e794:	f43f af58 	beq.w	801e648 <tcp_write+0x248>
 801e798:	4b05      	ldr	r3, [pc, #20]	; (801e7b0 <tcp_write+0x3b0>)
 801e79a:	f240 224a 	movw	r2, #586	; 0x24a
 801e79e:	490b      	ldr	r1, [pc, #44]	; (801e7cc <tcp_write+0x3cc>)
 801e7a0:	4805      	ldr	r0, [pc, #20]	; (801e7b8 <tcp_write+0x3b8>)
 801e7a2:	f006 fb57 	bl	8024e54 <iprintf>
 801e7a6:	e74b      	b.n	801e640 <tcp_write+0x240>
  struct pbuf *concat_p = NULL;
 801e7a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e7aa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e7ac:	930c      	str	r3, [sp, #48]	; 0x30
 801e7ae:	e6ad      	b.n	801e50c <tcp_write+0x10c>
 801e7b0:	080441dc 	.word	0x080441dc
 801e7b4:	08044418 	.word	0x08044418
 801e7b8:	08029a64 	.word	0x08029a64
 801e7bc:	080443ac 	.word	0x080443ac
 801e7c0:	080444d4 	.word	0x080444d4
 801e7c4:	080444e4 	.word	0x080444e4
 801e7c8:	08044494 	.word	0x08044494
 801e7cc:	08044464 	.word	0x08044464
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801e7d0:	4b94      	ldr	r3, [pc, #592]	; (801ea24 <tcp_write+0x624>)
 801e7d2:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801e7d6:	4994      	ldr	r1, [pc, #592]	; (801ea28 <tcp_write+0x628>)
 801e7d8:	4894      	ldr	r0, [pc, #592]	; (801ea2c <tcp_write+0x62c>)
 801e7da:	f006 fb3b 	bl	8024e54 <iprintf>
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801e7de:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e7e2:	930a      	str	r3, [sp, #40]	; 0x28
 801e7e4:	e66a      	b.n	801e4bc <tcp_write+0xbc>
 801e7e6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801e7e8:	e735      	b.n	801e656 <tcp_write+0x256>
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801e7ea:	4b8e      	ldr	r3, [pc, #568]	; (801ea24 <tcp_write+0x624>)
 801e7ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801e7f0:	498f      	ldr	r1, [pc, #572]	; (801ea30 <tcp_write+0x630>)
 801e7f2:	488e      	ldr	r0, [pc, #568]	; (801ea2c <tcp_write+0x62c>)
 801e7f4:	f006 fb2e 	bl	8024e54 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801e7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e7fa:	891b      	ldrh	r3, [r3, #8]
 801e7fc:	e64f      	b.n	801e49e <tcp_write+0x9e>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e7fe:	8963      	ldrh	r3, [r4, #10]
 801e800:	465a      	mov	r2, fp
 801e802:	6860      	ldr	r0, [r4, #4]
 801e804:	4629      	mov	r1, r5
 801e806:	4418      	add	r0, r3
 801e808:	f005 fb5e 	bl	8023ec8 <memcpy>
        p->len += oversize_used;
 801e80c:	8963      	ldrh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e80e:	6822      	ldr	r2, [r4, #0]
        p->len += oversize_used;
 801e810:	445b      	add	r3, fp
 801e812:	8163      	strh	r3, [r4, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e814:	2a00      	cmp	r2, #0
 801e816:	f47f af78 	bne.w	801e70a <tcp_write+0x30a>
    last_unsent->len += oversize_used;
 801e81a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e81c:	990a      	ldr	r1, [sp, #40]	; 0x28
 801e81e:	8913      	ldrh	r3, [r2, #8]
 801e820:	4419      	add	r1, r3
  pcb->unsent_oversize = oversize;
 801e822:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
    last_unsent->len += oversize_used;
 801e826:	8111      	strh	r1, [r2, #8]
  pcb->unsent_oversize = oversize;
 801e828:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e82c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e82e:	2b00      	cmp	r3, #0
 801e830:	d061      	beq.n	801e8f6 <tcp_write+0x4f6>
    pbuf_cat(last_unsent->p, concat_p);
 801e832:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e834:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e836:	6860      	ldr	r0, [r4, #4]
 801e838:	4629      	mov	r1, r5
 801e83a:	f7fc fa7b 	bl	801ad34 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e83e:	892a      	ldrh	r2, [r5, #8]
 801e840:	8923      	ldrh	r3, [r4, #8]
 801e842:	4413      	add	r3, r2
 801e844:	8123      	strh	r3, [r4, #8]
    last_unsent->next = queue;
 801e846:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e848:	f8c3 8000 	str.w	r8, [r3]
  pcb->snd_lbb += len;
 801e84c:	f8d9 305c 	ldr.w	r3, [r9, #92]	; 0x5c
  pcb->snd_queuelen = queuelen;
 801e850:	f8a9 6066 	strh.w	r6, [r9, #102]	; 0x66
  pcb->snd_lbb += len;
 801e854:	4453      	add	r3, sl
 801e856:	f8c9 305c 	str.w	r3, [r9, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e85a:	f8b9 3064 	ldrh.w	r3, [r9, #100]	; 0x64
 801e85e:	eba3 0a0a 	sub.w	sl, r3, sl
 801e862:	f8a9 a064 	strh.w	sl, [r9, #100]	; 0x64
  if (pcb->snd_queuelen != 0) {
 801e866:	b11e      	cbz	r6, 801e870 <tcp_write+0x470>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e868:	f8d9 3070 	ldr.w	r3, [r9, #112]	; 0x70
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d036      	beq.n	801e8de <tcp_write+0x4de>
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e870:	b12f      	cbz	r7, 801e87e <tcp_write+0x47e>
 801e872:	68fb      	ldr	r3, [r7, #12]
 801e874:	b11b      	cbz	r3, 801e87e <tcp_write+0x47e>
 801e876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e878:	f012 0502 	ands.w	r5, r2, #2
 801e87c:	d025      	beq.n	801e8ca <tcp_write+0x4ca>
  return ERR_OK;
 801e87e:	2000      	movs	r0, #0
}
 801e880:	b011      	add	sp, #68	; 0x44
 801e882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        pbuf_free(p2);
 801e886:	4618      	mov	r0, r3
 801e888:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801e88c:	f7fc fa20 	bl	801acd0 <pbuf_free>
        goto memerr;
 801e890:	e757      	b.n	801e742 <tcp_write+0x342>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e892:	4b64      	ldr	r3, [pc, #400]	; (801ea24 <tcp_write+0x624>)
 801e894:	f240 3227 	movw	r2, #807	; 0x327
 801e898:	4966      	ldr	r1, [pc, #408]	; (801ea34 <tcp_write+0x634>)
 801e89a:	4864      	ldr	r0, [pc, #400]	; (801ea2c <tcp_write+0x62c>)
 801e89c:	f006 fada 	bl	8024e54 <iprintf>
  return ERR_MEM;
 801e8a0:	f04f 30ff 	mov.w	r0, #4294967295
 801e8a4:	e76b      	b.n	801e77e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801e8a6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e8aa:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e8ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801e8b0:	2b00      	cmp	r3, #0
 801e8b2:	d051      	beq.n	801e958 <tcp_write+0x558>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e8b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8b6:	2b00      	cmp	r3, #0
 801e8b8:	d1bb      	bne.n	801e832 <tcp_write+0x432>
 801e8ba:	4b5a      	ldr	r3, [pc, #360]	; (801ea24 <tcp_write+0x624>)
 801e8bc:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e8c0:	495d      	ldr	r1, [pc, #372]	; (801ea38 <tcp_write+0x638>)
 801e8c2:	485a      	ldr	r0, [pc, #360]	; (801ea2c <tcp_write+0x62c>)
 801e8c4:	f006 fac6 	bl	8024e54 <iprintf>
 801e8c8:	e7b3      	b.n	801e832 <tcp_write+0x432>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e8ca:	2008      	movs	r0, #8
 801e8cc:	899c      	ldrh	r4, [r3, #12]
 801e8ce:	f7fa f9c3 	bl	8018c58 <lwip_htons>
 801e8d2:	4602      	mov	r2, r0
 801e8d4:	68fb      	ldr	r3, [r7, #12]
  return ERR_OK;
 801e8d6:	4628      	mov	r0, r5
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e8d8:	4314      	orrs	r4, r2
 801e8da:	819c      	strh	r4, [r3, #12]
 801e8dc:	e74f      	b.n	801e77e <tcp_write+0x37e>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e8de:	f8d9 306c 	ldr.w	r3, [r9, #108]	; 0x6c
 801e8e2:	2b00      	cmp	r3, #0
 801e8e4:	d1c4      	bne.n	801e870 <tcp_write+0x470>
 801e8e6:	4b4f      	ldr	r3, [pc, #316]	; (801ea24 <tcp_write+0x624>)
 801e8e8:	f240 3212 	movw	r2, #786	; 0x312
 801e8ec:	4951      	ldr	r1, [pc, #324]	; (801ea34 <tcp_write+0x634>)
 801e8ee:	484f      	ldr	r0, [pc, #316]	; (801ea2c <tcp_write+0x62c>)
 801e8f0:	f006 fab0 	bl	8024e54 <iprintf>
 801e8f4:	e7bc      	b.n	801e870 <tcp_write+0x470>
  } else if (extendlen > 0) {
 801e8f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d0a4      	beq.n	801e846 <tcp_write+0x446>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e8fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e8fe:	6859      	ldr	r1, [r3, #4]
 801e900:	2900      	cmp	r1, #0
 801e902:	d02e      	beq.n	801e962 <tcp_write+0x562>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e904:	680a      	ldr	r2, [r1, #0]
 801e906:	2a00      	cmp	r2, #0
 801e908:	d07f      	beq.n	801ea0a <tcp_write+0x60a>
 801e90a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801e90c:	e000      	b.n	801e910 <tcp_write+0x510>
 801e90e:	4602      	mov	r2, r0
      p->tot_len += extendlen;
 801e910:	890b      	ldrh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e912:	6810      	ldr	r0, [r2, #0]
      p->tot_len += extendlen;
 801e914:	4423      	add	r3, r4
 801e916:	810b      	strh	r3, [r1, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e918:	4611      	mov	r1, r2
 801e91a:	2800      	cmp	r0, #0
 801e91c:	d1f7      	bne.n	801e90e <tcp_write+0x50e>
    p->tot_len += extendlen;
 801e91e:	8913      	ldrh	r3, [r2, #8]
 801e920:	990d      	ldr	r1, [sp, #52]	; 0x34
 801e922:	440b      	add	r3, r1
 801e924:	8113      	strh	r3, [r2, #8]
    p->len += extendlen;
 801e926:	8953      	ldrh	r3, [r2, #10]
 801e928:	440b      	add	r3, r1
 801e92a:	8153      	strh	r3, [r2, #10]
    last_unsent->len += extendlen;
 801e92c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801e92e:	8913      	ldrh	r3, [r2, #8]
 801e930:	440b      	add	r3, r1
 801e932:	8113      	strh	r3, [r2, #8]
 801e934:	e787      	b.n	801e846 <tcp_write+0x446>
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e936:	f8b9 301a 	ldrh.w	r3, [r9, #26]
 801e93a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e93e:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (concat_p != NULL) {
 801e942:	e70f      	b.n	801e764 <tcp_write+0x364>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801e944:	4b37      	ldr	r3, [pc, #220]	; (801ea24 <tcp_write+0x624>)
 801e946:	f240 1255 	movw	r2, #341	; 0x155
 801e94a:	493c      	ldr	r1, [pc, #240]	; (801ea3c <tcp_write+0x63c>)
 801e94c:	4837      	ldr	r0, [pc, #220]	; (801ea2c <tcp_write+0x62c>)
 801e94e:	f006 fa81 	bl	8024e54 <iprintf>
  queuelen = pcb->snd_queuelen;
 801e952:	f8b9 6066 	ldrh.w	r6, [r9, #102]	; 0x66
 801e956:	e668      	b.n	801e62a <tcp_write+0x22a>
  } else if (extendlen > 0) {
 801e958:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e95a:	b19b      	cbz	r3, 801e984 <tcp_write+0x584>
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e95c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e95e:	2b00      	cmp	r3, #0
 801e960:	d1cc      	bne.n	801e8fc <tcp_write+0x4fc>
 801e962:	4b30      	ldr	r3, [pc, #192]	; (801ea24 <tcp_write+0x624>)
 801e964:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e968:	4935      	ldr	r1, [pc, #212]	; (801ea40 <tcp_write+0x640>)
 801e96a:	4830      	ldr	r0, [pc, #192]	; (801ea2c <tcp_write+0x62c>)
 801e96c:	f006 fa72 	bl	8024e54 <iprintf>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e970:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e972:	6859      	ldr	r1, [r3, #4]
 801e974:	e7c6      	b.n	801e904 <tcp_write+0x504>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e978:	bba3      	cbnz	r3, 801e9e4 <tcp_write+0x5e4>
          extendlen = seglen;
 801e97a:	950d      	str	r5, [sp, #52]	; 0x34
 801e97c:	e6a7      	b.n	801e6ce <tcp_write+0x2ce>
    return ERR_CONN;
 801e97e:	f06f 000a 	mvn.w	r0, #10
 801e982:	e6fc      	b.n	801e77e <tcp_write+0x37e>
  if (last_unsent == NULL) {
 801e984:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e986:	2b00      	cmp	r3, #0
 801e988:	f47f af5d 	bne.w	801e846 <tcp_write+0x446>
    pcb->unsent = queue;
 801e98c:	f8c9 806c 	str.w	r8, [r9, #108]	; 0x6c
 801e990:	e75c      	b.n	801e84c <tcp_write+0x44c>
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801e992:	e9cd 9300 	strd	r9, r3, [sp]
 801e996:	2301      	movs	r3, #1
 801e998:	4622      	mov	r2, r4
 801e99a:	4629      	mov	r1, r5
 801e99c:	2000      	movs	r0, #0
 801e99e:	9302      	str	r3, [sp, #8]
 801e9a0:	f10d 033e 	add.w	r3, sp, #62	; 0x3e
 801e9a4:	f7ff fb92 	bl	801e0cc <tcp_pbuf_prealloc>
 801e9a8:	4603      	mov	r3, r0
 801e9aa:	4604      	mov	r4, r0
 801e9ac:	900c      	str	r0, [sp, #48]	; 0x30
 801e9ae:	2800      	cmp	r0, #0
 801e9b0:	d0c1      	beq.n	801e936 <tcp_write+0x536>
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801e9b2:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e9b4:	462a      	mov	r2, r5
 801e9b6:	9907      	ldr	r1, [sp, #28]
 801e9b8:	4401      	add	r1, r0
 801e9ba:	6858      	ldr	r0, [r3, #4]
 801e9bc:	f005 fa84 	bl	8023ec8 <memcpy>
        queuelen += pbuf_clen(concat_p);
 801e9c0:	4620      	mov	r0, r4
 801e9c2:	e67e      	b.n	801e6c2 <tcp_write+0x2c2>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e9c4:	f8b9 301a 	ldrh.w	r3, [r9, #26]
    return ERR_MEM;
 801e9c8:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e9d0:	f8a9 301a 	strh.w	r3, [r9, #26]
  if (err != ERR_OK) {
 801e9d4:	e6d3      	b.n	801e77e <tcp_write+0x37e>
  pcb->unsent_oversize = oversize;
 801e9d6:	f8bd 303e 	ldrh.w	r3, [sp, #62]	; 0x3e
 801e9da:	46d0      	mov	r8, sl
 801e9dc:	4657      	mov	r7, sl
 801e9de:	f8a9 3068 	strh.w	r3, [r9, #104]	; 0x68
  if (concat_p != NULL) {
 801e9e2:	e7d3      	b.n	801e98c <tcp_write+0x58c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801e9e4:	4b0f      	ldr	r3, [pc, #60]	; (801ea24 <tcp_write+0x624>)
 801e9e6:	f240 2231 	movw	r2, #561	; 0x231
 801e9ea:	4916      	ldr	r1, [pc, #88]	; (801ea44 <tcp_write+0x644>)
 801e9ec:	480f      	ldr	r0, [pc, #60]	; (801ea2c <tcp_write+0x62c>)
 801e9ee:	f006 fa31 	bl	8024e54 <iprintf>
          extendlen = seglen;
 801e9f2:	950d      	str	r5, [sp, #52]	; 0x34
 801e9f4:	e66b      	b.n	801e6ce <tcp_write+0x2ce>
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801e9f6:	4b0b      	ldr	r3, [pc, #44]	; (801ea24 <tcp_write+0x624>)
 801e9f8:	f240 12ad 	movw	r2, #429	; 0x1ad
 801e9fc:	4912      	ldr	r1, [pc, #72]	; (801ea48 <tcp_write+0x648>)
 801e9fe:	480b      	ldr	r0, [pc, #44]	; (801ea2c <tcp_write+0x62c>)
 801ea00:	f006 fa28 	bl	8024e54 <iprintf>
 801ea04:	f06f 000f 	mvn.w	r0, #15
 801ea08:	e6b9      	b.n	801e77e <tcp_write+0x37e>
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801ea0a:	460a      	mov	r2, r1
 801ea0c:	e787      	b.n	801e91e <tcp_write+0x51e>
  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801ea0e:	4b05      	ldr	r3, [pc, #20]	; (801ea24 <tcp_write+0x624>)
 801ea10:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801ea14:	490d      	ldr	r1, [pc, #52]	; (801ea4c <tcp_write+0x64c>)
 801ea16:	4805      	ldr	r0, [pc, #20]	; (801ea2c <tcp_write+0x62c>)
 801ea18:	f006 fa1c 	bl	8024e54 <iprintf>
 801ea1c:	f06f 000f 	mvn.w	r0, #15
 801ea20:	e6ad      	b.n	801e77e <tcp_write+0x37e>
 801ea22:	bf00      	nop
 801ea24:	080441dc 	.word	0x080441dc
 801ea28:	080443f8 	.word	0x080443f8
 801ea2c:	08029a64 	.word	0x08029a64
 801ea30:	080443e0 	.word	0x080443e0
 801ea34:	08044568 	.word	0x08044568
 801ea38:	080444f8 	.word	0x080444f8
 801ea3c:	08044370 	.word	0x08044370
 801ea40:	08044530 	.word	0x08044530
 801ea44:	08044438 	.word	0x08044438
 801ea48:	0804433c 	.word	0x0804433c
 801ea4c:	08044324 	.word	0x08044324

0801ea50 <tcp_split_unsent_seg>:
{
 801ea50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ea54:	4605      	mov	r5, r0
{
 801ea56:	b083      	sub	sp, #12
 801ea58:	460c      	mov	r4, r1
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	f000 80a7 	beq.w	801ebae <tcp_split_unsent_seg+0x15e>
  useg = pcb->unsent;
 801ea60:	6eee      	ldr	r6, [r5, #108]	; 0x6c
  if (useg == NULL) {
 801ea62:	b376      	cbz	r6, 801eac2 <tcp_split_unsent_seg+0x72>
  if (split == 0) {
 801ea64:	2c00      	cmp	r4, #0
 801ea66:	f000 80b3 	beq.w	801ebd0 <tcp_split_unsent_seg+0x180>
  if (useg->len <= split) {
 801ea6a:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801ea6e:	45a1      	cmp	r9, r4
 801ea70:	f240 8099 	bls.w	801eba6 <tcp_split_unsent_seg+0x156>
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801ea74:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
 801ea76:	42a3      	cmp	r3, r4
 801ea78:	d328      	bcc.n	801eacc <tcp_split_unsent_seg+0x7c>
  optflags = useg->flags;
 801ea7a:	f896 a00a 	ldrb.w	sl, [r6, #10]
  remainder = useg->len - split;
 801ea7e:	eba9 0804 	sub.w	r8, r9, r4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ea82:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ea86:	2036      	movs	r0, #54	; 0x36
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ea88:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
  remainder = useg->len - split;
 801ea8c:	fa1f f888 	uxth.w	r8, r8
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801ea90:	f00b 0b04 	and.w	fp, fp, #4
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801ea94:	eb08 010b 	add.w	r1, r8, fp
 801ea98:	b289      	uxth	r1, r1
 801ea9a:	f7fb ff47 	bl	801a92c <pbuf_alloc>
  if (p == NULL) {
 801ea9e:	4607      	mov	r7, r0
 801eaa0:	b178      	cbz	r0, 801eac2 <tcp_split_unsent_seg+0x72>
  offset = useg->p->tot_len - useg->len + split;
 801eaa2:	6870      	ldr	r0, [r6, #4]
 801eaa4:	8932      	ldrh	r2, [r6, #8]
 801eaa6:	8903      	ldrh	r3, [r0, #8]
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801eaa8:	6879      	ldr	r1, [r7, #4]
  offset = useg->p->tot_len - useg->len + split;
 801eaaa:	1a9b      	subs	r3, r3, r2
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801eaac:	4642      	mov	r2, r8
 801eaae:	4459      	add	r1, fp
  offset = useg->p->tot_len - useg->len + split;
 801eab0:	4423      	add	r3, r4
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801eab2:	b29b      	uxth	r3, r3
 801eab4:	f7fc f9b0 	bl	801ae18 <pbuf_copy_partial>
 801eab8:	4540      	cmp	r0, r8
 801eaba:	d01d      	beq.n	801eaf8 <tcp_split_unsent_seg+0xa8>
    pbuf_free(p);
 801eabc:	4638      	mov	r0, r7
 801eabe:	f7fc f907 	bl	801acd0 <pbuf_free>
  return ERR_MEM;
 801eac2:	f04f 30ff 	mov.w	r0, #4294967295
}
 801eac6:	b003      	add	sp, #12
 801eac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801eacc:	4b45      	ldr	r3, [pc, #276]	; (801ebe4 <tcp_split_unsent_seg+0x194>)
 801eace:	f240 325b 	movw	r2, #859	; 0x35b
 801ead2:	4945      	ldr	r1, [pc, #276]	; (801ebe8 <tcp_split_unsent_seg+0x198>)
 801ead4:	4845      	ldr	r0, [pc, #276]	; (801ebec <tcp_split_unsent_seg+0x19c>)
 801ead6:	f006 f9bd 	bl	8024e54 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801eada:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801eade:	f1b9 0f00 	cmp.w	r9, #0
 801eae2:	d1ca      	bne.n	801ea7a <tcp_split_unsent_seg+0x2a>
 801eae4:	4b3f      	ldr	r3, [pc, #252]	; (801ebe4 <tcp_split_unsent_seg+0x194>)
 801eae6:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801eaea:	4941      	ldr	r1, [pc, #260]	; (801ebf0 <tcp_split_unsent_seg+0x1a0>)
 801eaec:	483f      	ldr	r0, [pc, #252]	; (801ebec <tcp_split_unsent_seg+0x19c>)
 801eaee:	f006 f9b1 	bl	8024e54 <iprintf>
  remainder = useg->len - split;
 801eaf2:	f8b6 9008 	ldrh.w	r9, [r6, #8]
 801eaf6:	e7c0      	b.n	801ea7a <tcp_split_unsent_seg+0x2a>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801eaf8:	68f3      	ldr	r3, [r6, #12]
 801eafa:	8998      	ldrh	r0, [r3, #12]
 801eafc:	f7fa f8ac 	bl	8018c58 <lwip_htons>
  if (split_flags & TCP_PSH) {
 801eb00:	f010 0b08 	ands.w	fp, r0, #8
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801eb04:	fa5f f880 	uxtb.w	r8, r0
  if (split_flags & TCP_PSH) {
 801eb08:	d159      	bne.n	801ebbe <tcp_split_unsent_seg+0x16e>
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801eb0a:	f008 083f 	and.w	r8, r8, #63	; 0x3f
  if (split_flags & TCP_FIN) {
 801eb0e:	f018 0f01 	tst.w	r8, #1
 801eb12:	d003      	beq.n	801eb1c <tcp_split_unsent_seg+0xcc>
    split_flags &= ~TCP_FIN;
 801eb14:	f008 08fe 	and.w	r8, r8, #254	; 0xfe
    remainder_flags |= TCP_FIN;
 801eb18:	f04b 0b01 	orr.w	fp, fp, #1
  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801eb1c:	68f3      	ldr	r3, [r6, #12]
 801eb1e:	6858      	ldr	r0, [r3, #4]
 801eb20:	f7fa f89e 	bl	8018c60 <lwip_htonl>
 801eb24:	f8cd a000 	str.w	sl, [sp]
 801eb28:	1823      	adds	r3, r4, r0
 801eb2a:	465a      	mov	r2, fp
 801eb2c:	4639      	mov	r1, r7
 801eb2e:	4628      	mov	r0, r5
 801eb30:	f7ff fb1c 	bl	801e16c <tcp_create_segment>
  if (seg == NULL) {
 801eb34:	4682      	mov	sl, r0
 801eb36:	2800      	cmp	r0, #0
 801eb38:	d0c0      	beq.n	801eabc <tcp_split_unsent_seg+0x6c>
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eb3a:	6870      	ldr	r0, [r6, #4]
 801eb3c:	eba4 0409 	sub.w	r4, r4, r9
 801eb40:	f7fc f8da 	bl	801acf8 <pbuf_clen>
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801eb44:	6872      	ldr	r2, [r6, #4]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eb46:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801eb4a:	b2a4      	uxth	r4, r4
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801eb4c:	8911      	ldrh	r1, [r2, #8]
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eb4e:	1a1b      	subs	r3, r3, r0
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801eb50:	4610      	mov	r0, r2
 801eb52:	4421      	add	r1, r4
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801eb54:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801eb58:	b289      	uxth	r1, r1
 801eb5a:	f7fb ffa1 	bl	801aaa0 <pbuf_realloc>
  useg->len -= remainder;
 801eb5e:	8933      	ldrh	r3, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eb60:	4640      	mov	r0, r8
  useg->len -= remainder;
 801eb62:	441c      	add	r4, r3
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eb64:	68f3      	ldr	r3, [r6, #12]
  useg->len -= remainder;
 801eb66:	8134      	strh	r4, [r6, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eb68:	899c      	ldrh	r4, [r3, #12]
 801eb6a:	f7fa f875 	bl	8018c58 <lwip_htons>
 801eb6e:	68f3      	ldr	r3, [r6, #12]
 801eb70:	4304      	orrs	r4, r0
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801eb72:	6870      	ldr	r0, [r6, #4]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801eb74:	819c      	strh	r4, [r3, #12]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801eb76:	f7fc f8bf 	bl	801acf8 <pbuf_clen>
 801eb7a:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801eb7e:	4403      	add	r3, r0
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801eb80:	f8da 0004 	ldr.w	r0, [sl, #4]
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801eb84:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801eb88:	f7fc f8b6 	bl	801acf8 <pbuf_clen>
 801eb8c:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
 801eb90:	4418      	add	r0, r3
  seg->next = useg->next;
 801eb92:	6833      	ldr	r3, [r6, #0]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801eb94:	f8a5 0066 	strh.w	r0, [r5, #102]	; 0x66
  seg->next = useg->next;
 801eb98:	f8ca 3000 	str.w	r3, [sl]
  useg->next = seg;
 801eb9c:	f8c6 a000 	str.w	sl, [r6]
  if (seg->next == NULL) {
 801eba0:	f8da 3000 	ldr.w	r3, [sl]
 801eba4:	b183      	cbz	r3, 801ebc8 <tcp_split_unsent_seg+0x178>
    return ERR_OK;
 801eba6:	2000      	movs	r0, #0
}
 801eba8:	b003      	add	sp, #12
 801ebaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801ebae:	4b0d      	ldr	r3, [pc, #52]	; (801ebe4 <tcp_split_unsent_seg+0x194>)
 801ebb0:	f240 324b 	movw	r2, #843	; 0x34b
 801ebb4:	490f      	ldr	r1, [pc, #60]	; (801ebf4 <tcp_split_unsent_seg+0x1a4>)
 801ebb6:	480d      	ldr	r0, [pc, #52]	; (801ebec <tcp_split_unsent_seg+0x19c>)
 801ebb8:	f006 f94c 	bl	8024e54 <iprintf>
 801ebbc:	e750      	b.n	801ea60 <tcp_split_unsent_seg+0x10>
    split_flags &= ~TCP_PSH;
 801ebbe:	f008 0837 	and.w	r8, r8, #55	; 0x37
    remainder_flags |= TCP_PSH;
 801ebc2:	f04f 0b08 	mov.w	fp, #8
 801ebc6:	e7a2      	b.n	801eb0e <tcp_split_unsent_seg+0xbe>
  return ERR_OK;
 801ebc8:	4618      	mov	r0, r3
    pcb->unsent_oversize = 0;
 801ebca:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801ebce:	e77a      	b.n	801eac6 <tcp_split_unsent_seg+0x76>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801ebd0:	4b04      	ldr	r3, [pc, #16]	; (801ebe4 <tcp_split_unsent_seg+0x194>)
 801ebd2:	f240 3253 	movw	r2, #851	; 0x353
 801ebd6:	4908      	ldr	r1, [pc, #32]	; (801ebf8 <tcp_split_unsent_seg+0x1a8>)
 801ebd8:	4804      	ldr	r0, [pc, #16]	; (801ebec <tcp_split_unsent_seg+0x19c>)
 801ebda:	f006 f93b 	bl	8024e54 <iprintf>
    return ERR_VAL;
 801ebde:	f06f 0005 	mvn.w	r0, #5
 801ebe2:	e770      	b.n	801eac6 <tcp_split_unsent_seg+0x76>
 801ebe4:	080441dc 	.word	0x080441dc
 801ebe8:	080445d0 	.word	0x080445d0
 801ebec:	08029a64 	.word	0x08029a64
 801ebf0:	080445e0 	.word	0x080445e0
 801ebf4:	08044588 	.word	0x08044588
 801ebf8:	080445ac 	.word	0x080445ac

0801ebfc <tcp_enqueue_flags>:
{
 801ebfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ec00:	f011 0703 	ands.w	r7, r1, #3
{
 801ec04:	b082      	sub	sp, #8
 801ec06:	460d      	mov	r5, r1
 801ec08:	4604      	mov	r4, r0
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ec0a:	d05e      	beq.n	801ecca <tcp_enqueue_flags+0xce>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ec0c:	2c00      	cmp	r4, #0
 801ec0e:	d065      	beq.n	801ecdc <tcp_enqueue_flags+0xe0>
  if (flags & TCP_SYN) {
 801ec10:	f015 0802 	ands.w	r8, r5, #2
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ec14:	f44f 7220 	mov.w	r2, #640	; 0x280
  if (flags & TCP_SYN) {
 801ec18:	d049      	beq.n	801ecae <tcp_enqueue_flags+0xb2>
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ec1a:	2104      	movs	r1, #4
 801ec1c:	2036      	movs	r0, #54	; 0x36
 801ec1e:	f7fb fe85 	bl	801a92c <pbuf_alloc>
 801ec22:	4606      	mov	r6, r0
 801ec24:	2800      	cmp	r0, #0
 801ec26:	d049      	beq.n	801ecbc <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ec28:	8943      	ldrh	r3, [r0, #10]
 801ec2a:	2b03      	cmp	r3, #3
 801ec2c:	d872      	bhi.n	801ed14 <tcp_enqueue_flags+0x118>
    optflags = TF_SEG_OPTS_MSS;
 801ec2e:	f04f 0801 	mov.w	r8, #1
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801ec32:	4b40      	ldr	r3, [pc, #256]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801ec34:	f240 4239 	movw	r2, #1081	; 0x439
 801ec38:	493f      	ldr	r1, [pc, #252]	; (801ed38 <tcp_enqueue_flags+0x13c>)
 801ec3a:	4840      	ldr	r0, [pc, #256]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ec3c:	f006 f90a 	bl	8024e54 <iprintf>
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801ec40:	4631      	mov	r1, r6
 801ec42:	f8cd 8000 	str.w	r8, [sp]
 801ec46:	462a      	mov	r2, r5
 801ec48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801ec4a:	4620      	mov	r0, r4
 801ec4c:	f7ff fa8e 	bl	801e16c <tcp_create_segment>
 801ec50:	4606      	mov	r6, r0
 801ec52:	2800      	cmp	r0, #0
 801ec54:	d032      	beq.n	801ecbc <tcp_enqueue_flags+0xc0>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ec56:	68c3      	ldr	r3, [r0, #12]
 801ec58:	079a      	lsls	r2, r3, #30
 801ec5a:	d153      	bne.n	801ed04 <tcp_enqueue_flags+0x108>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ec5c:	8933      	ldrh	r3, [r6, #8]
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d144      	bne.n	801ecec <tcp_enqueue_flags+0xf0>
  if (pcb->unsent == NULL) {
 801ec62:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ec64:	2b00      	cmp	r3, #0
 801ec66:	d04b      	beq.n	801ed00 <tcp_enqueue_flags+0x104>
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801ec68:	461a      	mov	r2, r3
 801ec6a:	681b      	ldr	r3, [r3, #0]
 801ec6c:	2b00      	cmp	r3, #0
 801ec6e:	d1fb      	bne.n	801ec68 <tcp_enqueue_flags+0x6c>
    useg->next = seg;
 801ec70:	6016      	str	r6, [r2, #0]
  pcb->unsent_oversize = 0;
 801ec72:	2300      	movs	r3, #0
 801ec74:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801ec78:	b117      	cbz	r7, 801ec80 <tcp_enqueue_flags+0x84>
    pcb->snd_lbb++;
 801ec7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801ec7c:	3301      	adds	r3, #1
 801ec7e:	65e3      	str	r3, [r4, #92]	; 0x5c
  if (flags & TCP_FIN) {
 801ec80:	07eb      	lsls	r3, r5, #31
 801ec82:	d503      	bpl.n	801ec8c <tcp_enqueue_flags+0x90>
    tcp_set_flags(pcb, TF_FIN);
 801ec84:	8b63      	ldrh	r3, [r4, #26]
 801ec86:	f043 0320 	orr.w	r3, r3, #32
 801ec8a:	8363      	strh	r3, [r4, #26]
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801ec8c:	6870      	ldr	r0, [r6, #4]
 801ec8e:	f7fc f833 	bl	801acf8 <pbuf_clen>
 801ec92:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 801ec96:	4418      	add	r0, r3
 801ec98:	b280      	uxth	r0, r0
 801ec9a:	f8a4 0066 	strh.w	r0, [r4, #102]	; 0x66
  if (pcb->snd_queuelen != 0) {
 801ec9e:	b118      	cbz	r0, 801eca8 <tcp_enqueue_flags+0xac>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801eca0:	6f20      	ldr	r0, [r4, #112]	; 0x70
 801eca2:	2800      	cmp	r0, #0
 801eca4:	d039      	beq.n	801ed1a <tcp_enqueue_flags+0x11e>
  return ERR_OK;
 801eca6:	2000      	movs	r0, #0
}
 801eca8:	b002      	add	sp, #8
 801ecaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801ecae:	4641      	mov	r1, r8
 801ecb0:	2036      	movs	r0, #54	; 0x36
 801ecb2:	f7fb fe3b 	bl	801a92c <pbuf_alloc>
 801ecb6:	4606      	mov	r6, r0
 801ecb8:	2800      	cmp	r0, #0
 801ecba:	d1c1      	bne.n	801ec40 <tcp_enqueue_flags+0x44>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ecbc:	8b63      	ldrh	r3, [r4, #26]
    return ERR_MEM;
 801ecbe:	f04f 30ff 	mov.w	r0, #4294967295
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801ecc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ecc6:	8363      	strh	r3, [r4, #26]
    return ERR_MEM;
 801ecc8:	e7ee      	b.n	801eca8 <tcp_enqueue_flags+0xac>
  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801ecca:	4b1a      	ldr	r3, [pc, #104]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801eccc:	f240 4211 	movw	r2, #1041	; 0x411
 801ecd0:	491b      	ldr	r1, [pc, #108]	; (801ed40 <tcp_enqueue_flags+0x144>)
 801ecd2:	481a      	ldr	r0, [pc, #104]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ecd4:	f006 f8be 	bl	8024e54 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801ecd8:	2c00      	cmp	r4, #0
 801ecda:	d199      	bne.n	801ec10 <tcp_enqueue_flags+0x14>
 801ecdc:	4b15      	ldr	r3, [pc, #84]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801ecde:	f240 4213 	movw	r2, #1043	; 0x413
 801ece2:	4918      	ldr	r1, [pc, #96]	; (801ed44 <tcp_enqueue_flags+0x148>)
 801ece4:	4815      	ldr	r0, [pc, #84]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ece6:	f006 f8b5 	bl	8024e54 <iprintf>
 801ecea:	e791      	b.n	801ec10 <tcp_enqueue_flags+0x14>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801ecec:	4b11      	ldr	r3, [pc, #68]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801ecee:	f240 4243 	movw	r2, #1091	; 0x443
 801ecf2:	4915      	ldr	r1, [pc, #84]	; (801ed48 <tcp_enqueue_flags+0x14c>)
 801ecf4:	4811      	ldr	r0, [pc, #68]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ecf6:	f006 f8ad 	bl	8024e54 <iprintf>
  if (pcb->unsent == NULL) {
 801ecfa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 801ecfc:	2b00      	cmp	r3, #0
 801ecfe:	d1b3      	bne.n	801ec68 <tcp_enqueue_flags+0x6c>
    pcb->unsent = seg;
 801ed00:	66e6      	str	r6, [r4, #108]	; 0x6c
 801ed02:	e7b6      	b.n	801ec72 <tcp_enqueue_flags+0x76>
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801ed04:	4b0b      	ldr	r3, [pc, #44]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801ed06:	f240 4242 	movw	r2, #1090	; 0x442
 801ed0a:	4910      	ldr	r1, [pc, #64]	; (801ed4c <tcp_enqueue_flags+0x150>)
 801ed0c:	480b      	ldr	r0, [pc, #44]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ed0e:	f006 f8a1 	bl	8024e54 <iprintf>
 801ed12:	e7a3      	b.n	801ec5c <tcp_enqueue_flags+0x60>
    optflags = TF_SEG_OPTS_MSS;
 801ed14:	f04f 0801 	mov.w	r8, #1
 801ed18:	e792      	b.n	801ec40 <tcp_enqueue_flags+0x44>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801ed1a:	6ee4      	ldr	r4, [r4, #108]	; 0x6c
 801ed1c:	2c00      	cmp	r4, #0
 801ed1e:	d1c3      	bne.n	801eca8 <tcp_enqueue_flags+0xac>
 801ed20:	4b04      	ldr	r3, [pc, #16]	; (801ed34 <tcp_enqueue_flags+0x138>)
 801ed22:	f240 4265 	movw	r2, #1125	; 0x465
 801ed26:	490a      	ldr	r1, [pc, #40]	; (801ed50 <tcp_enqueue_flags+0x154>)
 801ed28:	4804      	ldr	r0, [pc, #16]	; (801ed3c <tcp_enqueue_flags+0x140>)
 801ed2a:	f006 f893 	bl	8024e54 <iprintf>
  return ERR_OK;
 801ed2e:	4620      	mov	r0, r4
 801ed30:	e7ba      	b.n	801eca8 <tcp_enqueue_flags+0xac>
 801ed32:	bf00      	nop
 801ed34:	080441dc 	.word	0x080441dc
 801ed38:	08044668 	.word	0x08044668
 801ed3c:	08029a64 	.word	0x08029a64
 801ed40:	080445f0 	.word	0x080445f0
 801ed44:	08044648 	.word	0x08044648
 801ed48:	080446bc 	.word	0x080446bc
 801ed4c:	080446a4 	.word	0x080446a4
 801ed50:	080446e8 	.word	0x080446e8

0801ed54 <tcp_send_fin>:
{
 801ed54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ed56:	4606      	mov	r6, r0
 801ed58:	b188      	cbz	r0, 801ed7e <tcp_send_fin+0x2a>
  if (pcb->unsent != NULL) {
 801ed5a:	6ef4      	ldr	r4, [r6, #108]	; 0x6c
 801ed5c:	b14c      	cbz	r4, 801ed72 <tcp_send_fin+0x1e>
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801ed5e:	4625      	mov	r5, r4
 801ed60:	6824      	ldr	r4, [r4, #0]
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	d1fb      	bne.n	801ed5e <tcp_send_fin+0xa>
    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801ed66:	68eb      	ldr	r3, [r5, #12]
 801ed68:	8998      	ldrh	r0, [r3, #12]
 801ed6a:	f7f9 ff75 	bl	8018c58 <lwip_htons>
 801ed6e:	0743      	lsls	r3, r0, #29
 801ed70:	d00d      	beq.n	801ed8e <tcp_send_fin+0x3a>
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ed72:	4630      	mov	r0, r6
 801ed74:	2101      	movs	r1, #1
}
 801ed76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801ed7a:	f7ff bf3f 	b.w	801ebfc <tcp_enqueue_flags>
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801ed7e:	4b0b      	ldr	r3, [pc, #44]	; (801edac <tcp_send_fin+0x58>)
 801ed80:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801ed84:	490a      	ldr	r1, [pc, #40]	; (801edb0 <tcp_send_fin+0x5c>)
 801ed86:	480b      	ldr	r0, [pc, #44]	; (801edb4 <tcp_send_fin+0x60>)
 801ed88:	f006 f864 	bl	8024e54 <iprintf>
 801ed8c:	e7e5      	b.n	801ed5a <tcp_send_fin+0x6>
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ed8e:	68eb      	ldr	r3, [r5, #12]
 801ed90:	2001      	movs	r0, #1
 801ed92:	899f      	ldrh	r7, [r3, #12]
 801ed94:	f7f9 ff60 	bl	8018c58 <lwip_htons>
      tcp_set_flags(pcb, TF_FIN);
 801ed98:	8b73      	ldrh	r3, [r6, #26]
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801ed9a:	4338      	orrs	r0, r7
 801ed9c:	68ea      	ldr	r2, [r5, #12]
      tcp_set_flags(pcb, TF_FIN);
 801ed9e:	f043 0320 	orr.w	r3, r3, #32
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801eda2:	8190      	strh	r0, [r2, #12]
}
 801eda4:	4620      	mov	r0, r4
      tcp_set_flags(pcb, TF_FIN);
 801eda6:	8373      	strh	r3, [r6, #26]
}
 801eda8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801edaa:	bf00      	nop
 801edac:	080441dc 	.word	0x080441dc
 801edb0:	08044710 	.word	0x08044710
 801edb4:	08029a64 	.word	0x08029a64

0801edb8 <tcp_rexmit_rto_prepare>:
{
 801edb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801edba:	4605      	mov	r5, r0
 801edbc:	2800      	cmp	r0, #0
 801edbe:	d032      	beq.n	801ee26 <tcp_rexmit_rto_prepare+0x6e>
  if (pcb->unacked == NULL) {
 801edc0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 801edc2:	b132      	cbz	r2, 801edd2 <tcp_rexmit_rto_prepare+0x1a>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801edc4:	6813      	ldr	r3, [r2, #0]
 801edc6:	4614      	mov	r4, r2
 801edc8:	b15b      	cbz	r3, 801ede2 <tcp_rexmit_rto_prepare+0x2a>
  if (seg->p->ref != 1) {
 801edca:	6863      	ldr	r3, [r4, #4]
 801edcc:	7b9b      	ldrb	r3, [r3, #14]
 801edce:	2b01      	cmp	r3, #1
 801edd0:	d003      	beq.n	801edda <tcp_rexmit_rto_prepare+0x22>
    return ERR_VAL;
 801edd2:	f06f 0305 	mvn.w	r3, #5
}
 801edd6:	4618      	mov	r0, r3
 801edd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801edda:	6824      	ldr	r4, [r4, #0]
 801eddc:	6823      	ldr	r3, [r4, #0]
 801edde:	2b00      	cmp	r3, #0
 801ede0:	d1f3      	bne.n	801edca <tcp_rexmit_rto_prepare+0x12>
  if (seg->p->ref != 1) {
 801ede2:	6863      	ldr	r3, [r4, #4]
 801ede4:	7b9b      	ldrb	r3, [r3, #14]
 801ede6:	2b01      	cmp	r3, #1
 801ede8:	d1f3      	bne.n	801edd2 <tcp_rexmit_rto_prepare+0x1a>
  tcp_set_flags(pcb, TF_RTO);
 801edea:	8b6b      	ldrh	r3, [r5, #26]
  pcb->unacked = NULL;
 801edec:	2700      	movs	r7, #0
  seg->next = pcb->unsent;
 801edee:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
  tcp_set_flags(pcb, TF_RTO);
 801edf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
  seg->next = pcb->unsent;
 801edf4:	6021      	str	r1, [r4, #0]
  tcp_set_flags(pcb, TF_RTO);
 801edf6:	836b      	strh	r3, [r5, #26]
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801edf8:	68e3      	ldr	r3, [r4, #12]
  pcb->unacked = NULL;
 801edfa:	e9c5 271b 	strd	r2, r7, [r5, #108]	; 0x6c
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801edfe:	6858      	ldr	r0, [r3, #4]
 801ee00:	f7f9 ff2e 	bl	8018c60 <lwip_htonl>
 801ee04:	68e3      	ldr	r3, [r4, #12]
 801ee06:	4606      	mov	r6, r0
 801ee08:	8924      	ldrh	r4, [r4, #8]
 801ee0a:	8998      	ldrh	r0, [r3, #12]
 801ee0c:	f7f9 ff24 	bl	8018c58 <lwip_htons>
 801ee10:	f010 0003 	ands.w	r0, r0, #3
 801ee14:	4426      	add	r6, r4
  return ERR_OK;
 801ee16:	463b      	mov	r3, r7
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee18:	bf18      	it	ne
 801ee1a:	2001      	movne	r0, #1
  pcb->rttest = 0;
 801ee1c:	636f      	str	r7, [r5, #52]	; 0x34
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee1e:	4430      	add	r0, r6
 801ee20:	64e8      	str	r0, [r5, #76]	; 0x4c
}
 801ee22:	4618      	mov	r0, r3
 801ee24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801ee26:	4b04      	ldr	r3, [pc, #16]	; (801ee38 <tcp_rexmit_rto_prepare+0x80>)
 801ee28:	f240 6263 	movw	r2, #1635	; 0x663
 801ee2c:	4903      	ldr	r1, [pc, #12]	; (801ee3c <tcp_rexmit_rto_prepare+0x84>)
 801ee2e:	4804      	ldr	r0, [pc, #16]	; (801ee40 <tcp_rexmit_rto_prepare+0x88>)
 801ee30:	f006 f810 	bl	8024e54 <iprintf>
 801ee34:	e7c4      	b.n	801edc0 <tcp_rexmit_rto_prepare+0x8>
 801ee36:	bf00      	nop
 801ee38:	080441dc 	.word	0x080441dc
 801ee3c:	0804472c 	.word	0x0804472c
 801ee40:	08029a64 	.word	0x08029a64

0801ee44 <tcp_rexmit>:
{
 801ee44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ee46:	4607      	mov	r7, r0
 801ee48:	2800      	cmp	r0, #0
 801ee4a:	d031      	beq.n	801eeb0 <tcp_rexmit+0x6c>
  if (pcb->unacked == NULL) {
 801ee4c:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 801ee4e:	b34e      	cbz	r6, 801eea4 <tcp_rexmit+0x60>
  if (seg->p->ref != 1) {
 801ee50:	6873      	ldr	r3, [r6, #4]
 801ee52:	7b9b      	ldrb	r3, [r3, #14]
 801ee54:	2b01      	cmp	r3, #1
 801ee56:	d125      	bne.n	801eea4 <tcp_rexmit+0x60>
  pcb->unacked = seg->next;
 801ee58:	6832      	ldr	r2, [r6, #0]
  cur_seg = &(pcb->unsent);
 801ee5a:	f107 056c 	add.w	r5, r7, #108	; 0x6c
  while (*cur_seg &&
 801ee5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  pcb->unacked = seg->next;
 801ee60:	673a      	str	r2, [r7, #112]	; 0x70
  while (*cur_seg &&
 801ee62:	b91b      	cbnz	r3, 801ee6c <tcp_rexmit+0x28>
 801ee64:	e00f      	b.n	801ee86 <tcp_rexmit+0x42>
    cur_seg = &((*cur_seg)->next );
 801ee66:	682d      	ldr	r5, [r5, #0]
  while (*cur_seg &&
 801ee68:	682b      	ldr	r3, [r5, #0]
 801ee6a:	b163      	cbz	r3, 801ee86 <tcp_rexmit+0x42>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ee6c:	68db      	ldr	r3, [r3, #12]
 801ee6e:	6858      	ldr	r0, [r3, #4]
 801ee70:	f7f9 fef6 	bl	8018c60 <lwip_htonl>
 801ee74:	68f3      	ldr	r3, [r6, #12]
 801ee76:	4604      	mov	r4, r0
 801ee78:	6858      	ldr	r0, [r3, #4]
 801ee7a:	f7f9 fef1 	bl	8018c60 <lwip_htonl>
 801ee7e:	1a24      	subs	r4, r4, r0
  while (*cur_seg &&
 801ee80:	2c00      	cmp	r4, #0
 801ee82:	dbf0      	blt.n	801ee66 <tcp_rexmit+0x22>
  seg->next = *cur_seg;
 801ee84:	682b      	ldr	r3, [r5, #0]
 801ee86:	6033      	str	r3, [r6, #0]
  *cur_seg = seg;
 801ee88:	602e      	str	r6, [r5, #0]
  if (seg->next == NULL) {
 801ee8a:	6833      	ldr	r3, [r6, #0]
 801ee8c:	b16b      	cbz	r3, 801eeaa <tcp_rexmit+0x66>
  if (pcb->nrtx < 0xFF) {
 801ee8e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 801ee92:	2bff      	cmp	r3, #255	; 0xff
 801ee94:	d002      	beq.n	801ee9c <tcp_rexmit+0x58>
    ++pcb->nrtx;
 801ee96:	3301      	adds	r3, #1
 801ee98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  pcb->rttest = 0;
 801ee9c:	2300      	movs	r3, #0
  return ERR_OK;
 801ee9e:	4618      	mov	r0, r3
  pcb->rttest = 0;
 801eea0:	637b      	str	r3, [r7, #52]	; 0x34
}
 801eea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return ERR_VAL;
 801eea4:	f06f 0005 	mvn.w	r0, #5
}
 801eea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pcb->unsent_oversize = 0;
 801eeaa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801eeae:	e7ee      	b.n	801ee8e <tcp_rexmit+0x4a>
  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801eeb0:	4b03      	ldr	r3, [pc, #12]	; (801eec0 <tcp_rexmit+0x7c>)
 801eeb2:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801eeb6:	4903      	ldr	r1, [pc, #12]	; (801eec4 <tcp_rexmit+0x80>)
 801eeb8:	4803      	ldr	r0, [pc, #12]	; (801eec8 <tcp_rexmit+0x84>)
 801eeba:	f005 ffcb 	bl	8024e54 <iprintf>
 801eebe:	e7c5      	b.n	801ee4c <tcp_rexmit+0x8>
 801eec0:	080441dc 	.word	0x080441dc
 801eec4:	08044750 	.word	0x08044750
 801eec8:	08029a64 	.word	0x08029a64

0801eecc <tcp_rexmit_fast>:
{
 801eecc:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801eece:	4604      	mov	r4, r0
 801eed0:	b340      	cbz	r0, 801ef24 <tcp_rexmit_fast+0x58>
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801eed2:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801eed4:	b113      	cbz	r3, 801eedc <tcp_rexmit_fast+0x10>
 801eed6:	8b63      	ldrh	r3, [r4, #26]
 801eed8:	075b      	lsls	r3, r3, #29
 801eeda:	d500      	bpl.n	801eede <tcp_rexmit_fast+0x12>
}
 801eedc:	bd10      	pop	{r4, pc}
    if (tcp_rexmit(pcb) == ERR_OK) {
 801eede:	4620      	mov	r0, r4
 801eee0:	f7ff ffb0 	bl	801ee44 <tcp_rexmit>
 801eee4:	2800      	cmp	r0, #0
 801eee6:	d1f9      	bne.n	801eedc <tcp_rexmit_fast+0x10>
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eee8:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
 801eeec:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eef0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eef2:	4299      	cmp	r1, r3
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eef4:	ea4f 0042 	mov.w	r0, r2, lsl #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801eef8:	bf28      	it	cs
 801eefa:	4619      	movcs	r1, r3
 801eefc:	084b      	lsrs	r3, r1, #1
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801eefe:	ebb0 0f51 	cmp.w	r0, r1, lsr #1
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801ef02:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801ef06:	d902      	bls.n	801ef0e <tcp_rexmit_fast+0x42>
        pcb->ssthresh = 2 * pcb->mss;
 801ef08:	b283      	uxth	r3, r0
 801ef0a:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
      tcp_set_flags(pcb, TF_INFR);
 801ef0e:	8b61      	ldrh	r1, [r4, #26]
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ef10:	4402      	add	r2, r0
      tcp_set_flags(pcb, TF_INFR);
 801ef12:	f041 0104 	orr.w	r1, r1, #4
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ef16:	4413      	add	r3, r2
      pcb->rtime = 0;
 801ef18:	2200      	movs	r2, #0
      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801ef1a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801ef1e:	8361      	strh	r1, [r4, #26]
      pcb->rtime = 0;
 801ef20:	8622      	strh	r2, [r4, #48]	; 0x30
}
 801ef22:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801ef24:	4b03      	ldr	r3, [pc, #12]	; (801ef34 <tcp_rexmit_fast+0x68>)
 801ef26:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801ef2a:	4903      	ldr	r1, [pc, #12]	; (801ef38 <tcp_rexmit_fast+0x6c>)
 801ef2c:	4803      	ldr	r0, [pc, #12]	; (801ef3c <tcp_rexmit_fast+0x70>)
 801ef2e:	f005 ff91 	bl	8024e54 <iprintf>
 801ef32:	e7ce      	b.n	801eed2 <tcp_rexmit_fast+0x6>
 801ef34:	080441dc 	.word	0x080441dc
 801ef38:	08044768 	.word	0x08044768
 801ef3c:	08029a64 	.word	0x08029a64

0801ef40 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801ef40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ef44:	b084      	sub	sp, #16
 801ef46:	4607      	mov	r7, r0
 801ef48:	460e      	mov	r6, r1
 801ef4a:	4615      	mov	r5, r2
 801ef4c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ef50:	461c      	mov	r4, r3
{
 801ef52:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801ef56:	f8bd a038 	ldrh.w	sl, [sp, #56]	; 0x38
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ef5a:	b1fb      	cbz	r3, 801ef9c <tcp_rst+0x5c>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801ef5c:	f1b8 0f00 	cmp.w	r8, #0
 801ef60:	d026      	beq.n	801efb0 <tcp_rst+0x70>
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801ef62:	4630      	mov	r0, r6
 801ef64:	f7f9 fe7c 	bl	8018c60 <lwip_htonl>
 801ef68:	2114      	movs	r1, #20
 801ef6a:	4602      	mov	r2, r0
 801ef6c:	4628      	mov	r0, r5
 801ef6e:	f246 0508 	movw	r5, #24584	; 0x6008
 801ef72:	464b      	mov	r3, r9
 801ef74:	f8cd a000 	str.w	sl, [sp]
 801ef78:	e9cd 1501 	strd	r1, r5, [sp, #4]
 801ef7c:	2100      	movs	r1, #0
 801ef7e:	f7ff f971 	bl	801e264 <tcp_output_alloc_header_common.constprop.0>
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801ef82:	4601      	mov	r1, r0
 801ef84:	b138      	cbz	r0, 801ef96 <tcp_rst+0x56>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ef86:	4643      	mov	r3, r8
 801ef88:	4622      	mov	r2, r4
 801ef8a:	4638      	mov	r0, r7
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801ef8c:	b004      	add	sp, #16
 801ef8e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801ef92:	f7ff b9d5 	b.w	801e340 <tcp_output_control_segment>
}
 801ef96:	b004      	add	sp, #16
 801ef98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801ef9c:	4b08      	ldr	r3, [pc, #32]	; (801efc0 <tcp_rst+0x80>)
 801ef9e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801efa2:	4908      	ldr	r1, [pc, #32]	; (801efc4 <tcp_rst+0x84>)
 801efa4:	4808      	ldr	r0, [pc, #32]	; (801efc8 <tcp_rst+0x88>)
 801efa6:	f005 ff55 	bl	8024e54 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801efaa:	f1b8 0f00 	cmp.w	r8, #0
 801efae:	d1d8      	bne.n	801ef62 <tcp_rst+0x22>
 801efb0:	4b03      	ldr	r3, [pc, #12]	; (801efc0 <tcp_rst+0x80>)
 801efb2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801efb6:	4905      	ldr	r1, [pc, #20]	; (801efcc <tcp_rst+0x8c>)
 801efb8:	4803      	ldr	r0, [pc, #12]	; (801efc8 <tcp_rst+0x88>)
 801efba:	f005 ff4b 	bl	8024e54 <iprintf>
 801efbe:	e7d0      	b.n	801ef62 <tcp_rst+0x22>
 801efc0:	080441dc 	.word	0x080441dc
 801efc4:	08044788 	.word	0x08044788
 801efc8:	08029a64 	.word	0x08029a64
 801efcc:	080447a4 	.word	0x080447a4

0801efd0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801efd0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
  u8_t num_sacks = 0;

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801efd2:	4604      	mov	r4, r0
 801efd4:	b1c0      	cbz	r0, 801f008 <tcp_send_empty_ack+0x38>
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801efd6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801efd8:	f7f9 fe42 	bl	8018c60 <lwip_htonl>
 801efdc:	2100      	movs	r1, #0
 801efde:	4602      	mov	r2, r0
 801efe0:	4620      	mov	r0, r4
 801efe2:	f7ff f985 	bl	801e2f0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801efe6:	4601      	mov	r1, r0
 801efe8:	b1b0      	cbz	r0, 801f018 <tcp_send_empty_ack+0x48>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801efea:	1d23      	adds	r3, r4, #4
 801efec:	4622      	mov	r2, r4
 801efee:	4620      	mov	r0, r4
 801eff0:	f7ff f9a6 	bl	801e340 <tcp_output_control_segment>
  if (err != ERR_OK) {
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eff4:	8b63      	ldrh	r3, [r4, #26]
  if (err != ERR_OK) {
 801eff6:	b118      	cbz	r0, 801f000 <tcp_send_empty_ack+0x30>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801eff8:	f043 0303 	orr.w	r3, r3, #3
 801effc:	8363      	strh	r3, [r4, #26]
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
  }

  return err;
}
 801effe:	bd10      	pop	{r4, pc}
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f000:	f023 0303 	bic.w	r3, r3, #3
 801f004:	8363      	strh	r3, [r4, #26]
}
 801f006:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f008:	4b07      	ldr	r3, [pc, #28]	; (801f028 <tcp_send_empty_ack+0x58>)
 801f00a:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f00e:	4907      	ldr	r1, [pc, #28]	; (801f02c <tcp_send_empty_ack+0x5c>)
 801f010:	4807      	ldr	r0, [pc, #28]	; (801f030 <tcp_send_empty_ack+0x60>)
 801f012:	f005 ff1f 	bl	8024e54 <iprintf>
 801f016:	e7de      	b.n	801efd6 <tcp_send_empty_ack+0x6>
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f018:	8b63      	ldrh	r3, [r4, #26]
    return ERR_BUF;
 801f01a:	f06f 0001 	mvn.w	r0, #1
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f01e:	f043 0303 	orr.w	r3, r3, #3
 801f022:	8363      	strh	r3, [r4, #26]
}
 801f024:	bd10      	pop	{r4, pc}
 801f026:	bf00      	nop
 801f028:	080441dc 	.word	0x080441dc
 801f02c:	080447c0 	.word	0x080447c0
 801f030:	08029a64 	.word	0x08029a64

0801f034 <tcp_output>:
{
 801f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f038:	4604      	mov	r4, r0
{
 801f03a:	b085      	sub	sp, #20
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f03c:	2800      	cmp	r0, #0
 801f03e:	f000 81bc 	beq.w	801f3ba <tcp_output+0x386>
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f042:	7d23      	ldrb	r3, [r4, #20]
 801f044:	2b01      	cmp	r3, #1
 801f046:	f000 8173 	beq.w	801f330 <tcp_output+0x2fc>
  if (tcp_input_pcb == pcb) {
 801f04a:	4bb3      	ldr	r3, [pc, #716]	; (801f318 <tcp_output+0x2e4>)
 801f04c:	681b      	ldr	r3, [r3, #0]
 801f04e:	42a3      	cmp	r3, r4
 801f050:	f000 817a 	beq.w	801f348 <tcp_output+0x314>
  seg = pcb->unsent;
 801f054:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f056:	b345      	cbz	r5, 801f0aa <tcp_output+0x76>
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f058:	7a20      	ldrb	r0, [r4, #8]
  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801f05a:	f104 0904 	add.w	r9, r4, #4
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f05e:	f8b4 7048 	ldrh.w	r7, [r4, #72]	; 0x48
 801f062:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801f066:	2800      	cmp	r0, #0
 801f068:	f040 81af 	bne.w	801f3ca <tcp_output+0x396>
    return ip_route(src, dst);
 801f06c:	4648      	mov	r0, r9
 801f06e:	f003 fa2b 	bl	80224c8 <ip4_route>
 801f072:	4682      	mov	sl, r0
  if (netif == NULL) {
 801f074:	f1ba 0f00 	cmp.w	sl, #0
 801f078:	f000 81b9 	beq.w	801f3ee <tcp_output+0x3ba>
  if (ip_addr_isany(&pcb->local_ip)) {
 801f07c:	6823      	ldr	r3, [r4, #0]
 801f07e:	b913      	cbnz	r3, 801f086 <tcp_output+0x52>
    ip_addr_copy(pcb->local_ip, *local_ip);
 801f080:	f8da 3004 	ldr.w	r3, [sl, #4]
 801f084:	6023      	str	r3, [r4, #0]
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f086:	68eb      	ldr	r3, [r5, #12]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f088:	42b7      	cmp	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f08a:	6858      	ldr	r0, [r3, #4]
  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801f08c:	bf28      	it	cs
 801f08e:	4637      	movcs	r7, r6
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801f090:	f7f9 fde6 	bl	8018c60 <lwip_htonl>
 801f094:	892b      	ldrh	r3, [r5, #8]
 801f096:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801f098:	1a9b      	subs	r3, r3, r2
 801f09a:	4418      	add	r0, r3
 801f09c:	42b8      	cmp	r0, r7
 801f09e:	d90f      	bls.n	801f0c0 <tcp_output+0x8c>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f0a0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801f0a4:	42bb      	cmp	r3, r7
 801f0a6:	f000 8159 	beq.w	801f35c <tcp_output+0x328>
    if (pcb->flags & TF_ACK_NOW) {
 801f0aa:	8b62      	ldrh	r2, [r4, #26]
 801f0ac:	0791      	lsls	r1, r2, #30
 801f0ae:	f100 814f 	bmi.w	801f350 <tcp_output+0x31c>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f0b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
  return ERR_OK;
 801f0b6:	2000      	movs	r0, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f0b8:	8362      	strh	r2, [r4, #26]
}
 801f0ba:	b005      	add	sp, #20
 801f0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  pcb->persist_backoff = 0;
 801f0c0:	2300      	movs	r3, #0
 801f0c2:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  useg = pcb->unacked;
 801f0c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
  if (useg != NULL) {
 801f0c8:	2b00      	cmp	r3, #0
 801f0ca:	f000 8157 	beq.w	801f37c <tcp_output+0x348>
    for (; useg->next != NULL; useg = useg->next);
 801f0ce:	4698      	mov	r8, r3
 801f0d0:	681b      	ldr	r3, [r3, #0]
 801f0d2:	2b00      	cmp	r3, #0
 801f0d4:	d1fb      	bne.n	801f0ce <tcp_output+0x9a>
    LWIP_ASSERT("RST not expected here!",
 801f0d6:	464e      	mov	r6, r9
 801f0d8:	e0b7      	b.n	801f24a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801f0da:	68eb      	ldr	r3, [r5, #12]
 801f0dc:	2010      	movs	r0, #16
 801f0de:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 801f0e2:	f7f9 fdb9 	bl	8018c58 <lwip_htons>
 801f0e6:	ea49 0000 	orr.w	r0, r9, r0
 801f0ea:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f0ee:	f8a9 000c 	strh.w	r0, [r9, #12]
  if (seg->p->ref != 1) {
 801f0f2:	686b      	ldr	r3, [r5, #4]
 801f0f4:	7b9b      	ldrb	r3, [r3, #14]
 801f0f6:	2b01      	cmp	r3, #1
 801f0f8:	d160      	bne.n	801f1bc <tcp_output+0x188>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f0fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801f0fc:	f7f9 fdb0 	bl	8018c60 <lwip_htonl>
 801f100:	f8c9 0008 	str.w	r0, [r9, #8]
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f104:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
 801f106:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f10a:	f7f9 fda5 	bl	8018c58 <lwip_htons>
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f10e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 801f110:	6a63      	ldr	r3, [r4, #36]	; 0x24
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801f112:	f8a9 000e 	strh.w	r0, [r9, #14]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f116:	4413      	add	r3, r2
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f118:	f8d5 900c 	ldr.w	r9, [r5, #12]
  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f11c:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801f11e:	7aab      	ldrb	r3, [r5, #10]
 801f120:	07db      	lsls	r3, r3, #31
 801f122:	f100 80d0 	bmi.w	801f2c6 <tcp_output+0x292>
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801f126:	f109 0b14 	add.w	fp, r9, #20
  if (pcb->rtime < 0) {
 801f12a:	f9b4 3030 	ldrsh.w	r3, [r4, #48]	; 0x30
 801f12e:	2b00      	cmp	r3, #0
 801f130:	da01      	bge.n	801f136 <tcp_output+0x102>
    pcb->rtime = 0;
 801f132:	2300      	movs	r3, #0
 801f134:	8623      	strh	r3, [r4, #48]	; 0x30
  if (pcb->rttest == 0) {
 801f136:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801f138:	2b00      	cmp	r3, #0
 801f13a:	f000 80b9 	beq.w	801f2b0 <tcp_output+0x27c>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f13e:	6868      	ldr	r0, [r5, #4]
  seg->tcphdr->chksum = 0;
 801f140:	f04f 0c00 	mov.w	ip, #0
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f144:	6843      	ldr	r3, [r0, #4]
  seg->p->tot_len -= len;
 801f146:	8902      	ldrh	r2, [r0, #8]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f148:	eba9 0303 	sub.w	r3, r9, r3
  seg->p->len -= len;
 801f14c:	8941      	ldrh	r1, [r0, #10]
  seg->p->payload = seg->tcphdr;
 801f14e:	f8c0 9004 	str.w	r9, [r0, #4]
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f152:	b29b      	uxth	r3, r3
  seg->p->tot_len -= len;
 801f154:	1ad2      	subs	r2, r2, r3
  seg->p->len -= len;
 801f156:	1acb      	subs	r3, r1, r3
  seg->p->tot_len -= len;
 801f158:	b292      	uxth	r2, r2
  seg->p->len -= len;
 801f15a:	8143      	strh	r3, [r0, #10]
  seg->p->tot_len -= len;
 801f15c:	8102      	strh	r2, [r0, #8]
  seg->tcphdr->chksum = 0;
 801f15e:	f889 c010 	strb.w	ip, [r9, #16]
 801f162:	f889 c011 	strb.w	ip, [r9, #17]
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801f166:	7aab      	ldrb	r3, [r5, #10]
 801f168:	009b      	lsls	r3, r3, #2
 801f16a:	f003 0304 	and.w	r3, r3, #4
 801f16e:	3314      	adds	r3, #20
 801f170:	444b      	add	r3, r9
 801f172:	459b      	cmp	fp, r3
 801f174:	d00a      	beq.n	801f18c <tcp_output+0x158>
 801f176:	f240 621c 	movw	r2, #1564	; 0x61c
 801f17a:	4b68      	ldr	r3, [pc, #416]	; (801f31c <tcp_output+0x2e8>)
 801f17c:	4968      	ldr	r1, [pc, #416]	; (801f320 <tcp_output+0x2ec>)
 801f17e:	4869      	ldr	r0, [pc, #420]	; (801f324 <tcp_output+0x2f0>)
 801f180:	f005 fe68 	bl	8024e54 <iprintf>
    seg->tcphdr->chksum = ip_chksum_pseudo(seg->p, IP_PROTO_TCP,
 801f184:	6868      	ldr	r0, [r5, #4]
 801f186:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f18a:	8902      	ldrh	r2, [r0, #8]
 801f18c:	4623      	mov	r3, r4
 801f18e:	2106      	movs	r1, #6
 801f190:	9600      	str	r6, [sp, #0]
 801f192:	f7fa faf5 	bl	8019780 <ip_chksum_pseudo>
 801f196:	f8a9 0010 	strh.w	r0, [r9, #16]
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801f19a:	6868      	ldr	r0, [r5, #4]
 801f19c:	4632      	mov	r2, r6
 801f19e:	f8cd a008 	str.w	sl, [sp, #8]
 801f1a2:	4621      	mov	r1, r4
 801f1a4:	7aa3      	ldrb	r3, [r4, #10]
 801f1a6:	9300      	str	r3, [sp, #0]
 801f1a8:	2306      	movs	r3, #6
 801f1aa:	9301      	str	r3, [sp, #4]
 801f1ac:	7ae3      	ldrb	r3, [r4, #11]
 801f1ae:	f003 fb55 	bl	802285c <ip4_output_if>
    if (err != ERR_OK) {
 801f1b2:	2800      	cmp	r0, #0
 801f1b4:	f040 8116 	bne.w	801f3e4 <tcp_output+0x3b0>
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f1b8:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->unsent = seg->next;
 801f1bc:	682b      	ldr	r3, [r5, #0]
 801f1be:	66e3      	str	r3, [r4, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801f1c0:	7d23      	ldrb	r3, [r4, #20]
 801f1c2:	2b02      	cmp	r3, #2
 801f1c4:	d003      	beq.n	801f1ce <tcp_output+0x19a>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f1c6:	8b63      	ldrh	r3, [r4, #26]
 801f1c8:	f023 0303 	bic.w	r3, r3, #3
 801f1cc:	8363      	strh	r3, [r4, #26]
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f1ce:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f1d2:	f7f9 fd45 	bl	8018c60 <lwip_htonl>
 801f1d6:	68eb      	ldr	r3, [r5, #12]
 801f1d8:	4681      	mov	r9, r0
 801f1da:	f8b5 b008 	ldrh.w	fp, [r5, #8]
 801f1de:	8998      	ldrh	r0, [r3, #12]
 801f1e0:	f7f9 fd3a 	bl	8018c58 <lwip_htons>
 801f1e4:	f010 0003 	ands.w	r0, r0, #3
 801f1e8:	44d9      	add	r9, fp
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f1ea:	6d23      	ldr	r3, [r4, #80]	; 0x50
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801f1ec:	bf18      	it	ne
 801f1ee:	2001      	movne	r0, #1
 801f1f0:	4448      	add	r0, r9
    if (TCP_TCPLEN(seg) > 0) {
 801f1f2:	f8b5 9008 	ldrh.w	r9, [r5, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f1f6:	1a1b      	subs	r3, r3, r0
 801f1f8:	2b00      	cmp	r3, #0
    if (TCP_TCPLEN(seg) > 0) {
 801f1fa:	68eb      	ldr	r3, [r5, #12]
      pcb->snd_nxt = snd_nxt;
 801f1fc:	bfb8      	it	lt
 801f1fe:	6520      	strlt	r0, [r4, #80]	; 0x50
    if (TCP_TCPLEN(seg) > 0) {
 801f200:	8998      	ldrh	r0, [r3, #12]
 801f202:	f7f9 fd29 	bl	8018c58 <lwip_htons>
 801f206:	f010 0003 	ands.w	r0, r0, #3
 801f20a:	bf18      	it	ne
 801f20c:	2001      	movne	r0, #1
 801f20e:	eb10 0f09 	cmn.w	r0, r9
 801f212:	d046      	beq.n	801f2a2 <tcp_output+0x26e>
      seg->next = NULL;
 801f214:	2300      	movs	r3, #0
 801f216:	602b      	str	r3, [r5, #0]
      if (pcb->unacked == NULL) {
 801f218:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f21a:	2b00      	cmp	r3, #0
 801f21c:	d045      	beq.n	801f2aa <tcp_output+0x276>
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801f21e:	68eb      	ldr	r3, [r5, #12]
 801f220:	6858      	ldr	r0, [r3, #4]
 801f222:	f7f9 fd1d 	bl	8018c60 <lwip_htonl>
 801f226:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801f22a:	4681      	mov	r9, r0
 801f22c:	6858      	ldr	r0, [r3, #4]
 801f22e:	f7f9 fd17 	bl	8018c60 <lwip_htonl>
 801f232:	eba9 0000 	sub.w	r0, r9, r0
 801f236:	2800      	cmp	r0, #0
 801f238:	f2c0 80a2 	blt.w	801f380 <tcp_output+0x34c>
          useg->next = seg;
 801f23c:	f8c8 5000 	str.w	r5, [r8]
 801f240:	46a8      	mov	r8, r5
    seg = pcb->unsent;
 801f242:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  while (seg != NULL &&
 801f244:	2d00      	cmp	r5, #0
 801f246:	f000 80c4 	beq.w	801f3d2 <tcp_output+0x39e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801f24a:	68eb      	ldr	r3, [r5, #12]
 801f24c:	6858      	ldr	r0, [r3, #4]
 801f24e:	f7f9 fd07 	bl	8018c60 <lwip_htonl>
 801f252:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801f254:	1ac0      	subs	r0, r0, r3
 801f256:	892b      	ldrh	r3, [r5, #8]
 801f258:	4418      	add	r0, r3
  while (seg != NULL &&
 801f25a:	42b8      	cmp	r0, r7
 801f25c:	f200 80bb 	bhi.w	801f3d6 <tcp_output+0x3a2>
    LWIP_ASSERT("RST not expected here!",
 801f260:	68eb      	ldr	r3, [r5, #12]
 801f262:	8998      	ldrh	r0, [r3, #12]
 801f264:	f7f9 fcf8 	bl	8018c58 <lwip_htons>
 801f268:	0742      	lsls	r2, r0, #29
 801f26a:	d412      	bmi.n	801f292 <tcp_output+0x25e>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f26c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f26e:	b14b      	cbz	r3, 801f284 <tcp_output+0x250>
 801f270:	8b63      	ldrh	r3, [r4, #26]
 801f272:	f013 0f44 	tst.w	r3, #68	; 0x44
 801f276:	461a      	mov	r2, r3
 801f278:	d104      	bne.n	801f284 <tcp_output+0x250>
 801f27a:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 801f27c:	2900      	cmp	r1, #0
 801f27e:	d038      	beq.n	801f2f2 <tcp_output+0x2be>
 801f280:	6808      	ldr	r0, [r1, #0]
 801f282:	b388      	cbz	r0, 801f2e8 <tcp_output+0x2b4>
    if (pcb->state != SYN_SENT) {
 801f284:	7d23      	ldrb	r3, [r4, #20]
 801f286:	2b02      	cmp	r3, #2
 801f288:	f47f af27 	bne.w	801f0da <tcp_output+0xa6>
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801f28c:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f290:	e72f      	b.n	801f0f2 <tcp_output+0xbe>
    LWIP_ASSERT("RST not expected here!",
 801f292:	4b22      	ldr	r3, [pc, #136]	; (801f31c <tcp_output+0x2e8>)
 801f294:	f240 5236 	movw	r2, #1334	; 0x536
 801f298:	4923      	ldr	r1, [pc, #140]	; (801f328 <tcp_output+0x2f4>)
 801f29a:	4822      	ldr	r0, [pc, #136]	; (801f324 <tcp_output+0x2f0>)
 801f29c:	f005 fdda 	bl	8024e54 <iprintf>
 801f2a0:	e7e4      	b.n	801f26c <tcp_output+0x238>
      tcp_seg_free(seg);
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	f7fc fa90 	bl	801b7c8 <tcp_seg_free>
 801f2a8:	e7cb      	b.n	801f242 <tcp_output+0x20e>
        pcb->unacked = seg;
 801f2aa:	46a8      	mov	r8, r5
 801f2ac:	6725      	str	r5, [r4, #112]	; 0x70
        useg = seg;
 801f2ae:	e7c8      	b.n	801f242 <tcp_output+0x20e>
    pcb->rttest = tcp_ticks;
 801f2b0:	4b1e      	ldr	r3, [pc, #120]	; (801f32c <tcp_output+0x2f8>)
 801f2b2:	681b      	ldr	r3, [r3, #0]
 801f2b4:	6363      	str	r3, [r4, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f2b6:	f8d9 0004 	ldr.w	r0, [r9, #4]
 801f2ba:	f7f9 fcd1 	bl	8018c60 <lwip_htonl>
  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801f2be:	f8d5 900c 	ldr.w	r9, [r5, #12]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f2c2:	63a0      	str	r0, [r4, #56]	; 0x38
 801f2c4:	e73b      	b.n	801f13e <tcp_output+0x10a>
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f2c6:	4632      	mov	r2, r6
 801f2c8:	4651      	mov	r1, sl
 801f2ca:	f44f 7006 	mov.w	r0, #536	; 0x218
    opts += 1;
 801f2ce:	f109 0b18 	add.w	fp, r9, #24
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801f2d2:	f7fd fa75 	bl	801c7c0 <tcp_eff_send_mss_netif>
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801f2d6:	f040 7001 	orr.w	r0, r0, #33816576	; 0x2040000
 801f2da:	f7f9 fcc1 	bl	8018c60 <lwip_htonl>
 801f2de:	f8c9 0014 	str.w	r0, [r9, #20]
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801f2e2:	f8d5 900c 	ldr.w	r9, [r5, #12]
 801f2e6:	e720      	b.n	801f12a <tcp_output+0xf6>
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801f2e8:	f8b1 c008 	ldrh.w	ip, [r1, #8]
 801f2ec:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 801f2ee:	4584      	cmp	ip, r0
 801f2f0:	d2c8      	bcs.n	801f284 <tcp_output+0x250>
 801f2f2:	f8b4 0064 	ldrh.w	r0, [r4, #100]	; 0x64
 801f2f6:	2800      	cmp	r0, #0
 801f2f8:	d0c4      	beq.n	801f284 <tcp_output+0x250>
 801f2fa:	f8b4 0066 	ldrh.w	r0, [r4, #102]	; 0x66
 801f2fe:	2808      	cmp	r0, #8
 801f300:	d8c0      	bhi.n	801f284 <tcp_output+0x250>
 801f302:	f013 0fa0 	tst.w	r3, #160	; 0xa0
 801f306:	d1bd      	bne.n	801f284 <tcp_output+0x250>
  if (pcb->unsent == NULL) {
 801f308:	2900      	cmp	r1, #0
 801f30a:	f47f aed2 	bne.w	801f0b2 <tcp_output+0x7e>
    pcb->unsent_oversize = 0;
 801f30e:	2100      	movs	r1, #0
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f310:	461a      	mov	r2, r3
    pcb->unsent_oversize = 0;
 801f312:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 801f316:	e6cc      	b.n	801f0b2 <tcp_output+0x7e>
 801f318:	2002e3d0 	.word	0x2002e3d0
 801f31c:	080441dc 	.word	0x080441dc
 801f320:	08044838 	.word	0x08044838
 801f324:	08029a64 	.word	0x08029a64
 801f328:	08044820 	.word	0x08044820
 801f32c:	2002e39c 	.word	0x2002e39c
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801f330:	4b30      	ldr	r3, [pc, #192]	; (801f3f4 <tcp_output+0x3c0>)
 801f332:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801f336:	4930      	ldr	r1, [pc, #192]	; (801f3f8 <tcp_output+0x3c4>)
 801f338:	4830      	ldr	r0, [pc, #192]	; (801f3fc <tcp_output+0x3c8>)
 801f33a:	f005 fd8b 	bl	8024e54 <iprintf>
  if (tcp_input_pcb == pcb) {
 801f33e:	4b30      	ldr	r3, [pc, #192]	; (801f400 <tcp_output+0x3cc>)
 801f340:	681b      	ldr	r3, [r3, #0]
 801f342:	42a3      	cmp	r3, r4
 801f344:	f47f ae86 	bne.w	801f054 <tcp_output+0x20>
    return ERR_OK;
 801f348:	2000      	movs	r0, #0
}
 801f34a:	b005      	add	sp, #20
 801f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return tcp_send_empty_ack(pcb);
 801f350:	4620      	mov	r0, r4
}
 801f352:	b005      	add	sp, #20
 801f354:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      return tcp_send_empty_ack(pcb);
 801f358:	f7ff be3a 	b.w	801efd0 <tcp_send_empty_ack>
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801f35c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 801f35e:	2b00      	cmp	r3, #0
 801f360:	f47f aea3 	bne.w	801f0aa <tcp_output+0x76>
 801f364:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 801f368:	2b00      	cmp	r3, #0
 801f36a:	f47f ae9e 	bne.w	801f0aa <tcp_output+0x76>
      pcb->persist_cnt = 0;
 801f36e:	f44f 7280 	mov.w	r2, #256	; 0x100
      pcb->persist_probe = 0;
 801f372:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
      pcb->persist_cnt = 0;
 801f376:	f8a4 2098 	strh.w	r2, [r4, #152]	; 0x98
 801f37a:	e696      	b.n	801f0aa <tcp_output+0x76>
 801f37c:	4698      	mov	r8, r3
 801f37e:	e6aa      	b.n	801f0d6 <tcp_output+0xa2>
          while (*cur_seg &&
 801f380:	6f23      	ldr	r3, [r4, #112]	; 0x70
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801f382:	f104 0b70 	add.w	fp, r4, #112	; 0x70
          while (*cur_seg &&
 801f386:	b92b      	cbnz	r3, 801f394 <tcp_output+0x360>
 801f388:	e013      	b.n	801f3b2 <tcp_output+0x37e>
            cur_seg = &((*cur_seg)->next );
 801f38a:	f8db b000 	ldr.w	fp, [fp]
          while (*cur_seg &&
 801f38e:	f8db 3000 	ldr.w	r3, [fp]
 801f392:	b173      	cbz	r3, 801f3b2 <tcp_output+0x37e>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801f394:	68db      	ldr	r3, [r3, #12]
 801f396:	6858      	ldr	r0, [r3, #4]
 801f398:	f7f9 fc62 	bl	8018c60 <lwip_htonl>
 801f39c:	68eb      	ldr	r3, [r5, #12]
 801f39e:	4681      	mov	r9, r0
 801f3a0:	6858      	ldr	r0, [r3, #4]
 801f3a2:	f7f9 fc5d 	bl	8018c60 <lwip_htonl>
 801f3a6:	eba9 0000 	sub.w	r0, r9, r0
          while (*cur_seg &&
 801f3aa:	2800      	cmp	r0, #0
 801f3ac:	dbed      	blt.n	801f38a <tcp_output+0x356>
          seg->next = (*cur_seg);
 801f3ae:	f8db 3000 	ldr.w	r3, [fp]
 801f3b2:	602b      	str	r3, [r5, #0]
          (*cur_seg) = seg;
 801f3b4:	f8cb 5000 	str.w	r5, [fp]
 801f3b8:	e743      	b.n	801f242 <tcp_output+0x20e>
  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801f3ba:	4b0e      	ldr	r3, [pc, #56]	; (801f3f4 <tcp_output+0x3c0>)
 801f3bc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801f3c0:	4910      	ldr	r1, [pc, #64]	; (801f404 <tcp_output+0x3d0>)
 801f3c2:	480e      	ldr	r0, [pc, #56]	; (801f3fc <tcp_output+0x3c8>)
 801f3c4:	f005 fd46 	bl	8024e54 <iprintf>
 801f3c8:	e63b      	b.n	801f042 <tcp_output+0xe>
    return netif_get_by_index(pcb->netif_idx);
 801f3ca:	f7fb f95b 	bl	801a684 <netif_get_by_index>
 801f3ce:	4682      	mov	sl, r0
 801f3d0:	e650      	b.n	801f074 <tcp_output+0x40>
 801f3d2:	8b63      	ldrh	r3, [r4, #26]
 801f3d4:	e79b      	b.n	801f30e <tcp_output+0x2da>
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f3d6:	8b63      	ldrh	r3, [r4, #26]
  if (pcb->unsent == NULL) {
 801f3d8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801f3da:	461a      	mov	r2, r3
  if (pcb->unsent == NULL) {
 801f3dc:	2900      	cmp	r1, #0
 801f3de:	f47f ae68 	bne.w	801f0b2 <tcp_output+0x7e>
 801f3e2:	e794      	b.n	801f30e <tcp_output+0x2da>
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801f3e4:	8b63      	ldrh	r3, [r4, #26]
 801f3e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f3ea:	8363      	strh	r3, [r4, #26]
      return err;
 801f3ec:	e665      	b.n	801f0ba <tcp_output+0x86>
    return ERR_RTE;
 801f3ee:	f06f 0003 	mvn.w	r0, #3
 801f3f2:	e662      	b.n	801f0ba <tcp_output+0x86>
 801f3f4:	080441dc 	.word	0x080441dc
 801f3f8:	080447f8 	.word	0x080447f8
 801f3fc:	08029a64 	.word	0x08029a64
 801f400:	2002e3d0 	.word	0x2002e3d0
 801f404:	080447e0 	.word	0x080447e0

0801f408 <tcp_rexmit_rto_commit>:
{
 801f408:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f40a:	4604      	mov	r4, r0
 801f40c:	b158      	cbz	r0, 801f426 <tcp_rexmit_rto_commit+0x1e>
  if (pcb->nrtx < 0xFF) {
 801f40e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f412:	2bff      	cmp	r3, #255	; 0xff
 801f414:	d002      	beq.n	801f41c <tcp_rexmit_rto_commit+0x14>
    ++pcb->nrtx;
 801f416:	3301      	adds	r3, #1
 801f418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f41c:	4620      	mov	r0, r4
}
 801f41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f422:	f7ff be07 	b.w	801f034 <tcp_output>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f426:	4b04      	ldr	r3, [pc, #16]	; (801f438 <tcp_rexmit_rto_commit+0x30>)
 801f428:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f42c:	4903      	ldr	r1, [pc, #12]	; (801f43c <tcp_rexmit_rto_commit+0x34>)
 801f42e:	4804      	ldr	r0, [pc, #16]	; (801f440 <tcp_rexmit_rto_commit+0x38>)
 801f430:	f005 fd10 	bl	8024e54 <iprintf>
 801f434:	e7eb      	b.n	801f40e <tcp_rexmit_rto_commit+0x6>
 801f436:	bf00      	nop
 801f438:	080441dc 	.word	0x080441dc
 801f43c:	0804484c 	.word	0x0804484c
 801f440:	08029a64 	.word	0x08029a64

0801f444 <tcp_rexmit_rto>:
{
 801f444:	b510      	push	{r4, lr}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f446:	4604      	mov	r4, r0
 801f448:	b118      	cbz	r0, 801f452 <tcp_rexmit_rto+0xe>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f44a:	f7ff fcb5 	bl	801edb8 <tcp_rexmit_rto_prepare>
 801f44e:	b198      	cbz	r0, 801f478 <tcp_rexmit_rto+0x34>
}
 801f450:	bd10      	pop	{r4, pc}
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801f452:	4b0f      	ldr	r3, [pc, #60]	; (801f490 <tcp_rexmit_rto+0x4c>)
 801f454:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801f458:	490e      	ldr	r1, [pc, #56]	; (801f494 <tcp_rexmit_rto+0x50>)
 801f45a:	480f      	ldr	r0, [pc, #60]	; (801f498 <tcp_rexmit_rto+0x54>)
 801f45c:	f005 fcfa 	bl	8024e54 <iprintf>
  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801f460:	4620      	mov	r0, r4
 801f462:	f7ff fca9 	bl	801edb8 <tcp_rexmit_rto_prepare>
 801f466:	2800      	cmp	r0, #0
 801f468:	d1f2      	bne.n	801f450 <tcp_rexmit_rto+0xc>
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801f46a:	4b09      	ldr	r3, [pc, #36]	; (801f490 <tcp_rexmit_rto+0x4c>)
 801f46c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801f470:	490a      	ldr	r1, [pc, #40]	; (801f49c <tcp_rexmit_rto+0x58>)
 801f472:	4809      	ldr	r0, [pc, #36]	; (801f498 <tcp_rexmit_rto+0x54>)
 801f474:	f005 fcee 	bl	8024e54 <iprintf>
  if (pcb->nrtx < 0xFF) {
 801f478:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801f47c:	2bff      	cmp	r3, #255	; 0xff
 801f47e:	d002      	beq.n	801f486 <tcp_rexmit_rto+0x42>
    ++pcb->nrtx;
 801f480:	3301      	adds	r3, #1
 801f482:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  tcp_output(pcb);
 801f486:	4620      	mov	r0, r4
}
 801f488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  tcp_output(pcb);
 801f48c:	f7ff bdd2 	b.w	801f034 <tcp_output>
 801f490:	080441dc 	.word	0x080441dc
 801f494:	08044870 	.word	0x08044870
 801f498:	08029a64 	.word	0x08029a64
 801f49c:	0804484c 	.word	0x0804484c

0801f4a0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f4a0:	b510      	push	{r4, lr}
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f4a2:	4604      	mov	r4, r0
 801f4a4:	b188      	cbz	r0, 801f4ca <tcp_keepalive+0x2a>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f4a6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 801f4a8:	3801      	subs	r0, #1
 801f4aa:	f7f9 fbd9 	bl	8018c60 <lwip_htonl>
 801f4ae:	2100      	movs	r1, #0
 801f4b0:	4602      	mov	r2, r0
 801f4b2:	4620      	mov	r0, r4
 801f4b4:	f7fe ff1c 	bl	801e2f0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f4b8:	4601      	mov	r1, r0
 801f4ba:	b170      	cbz	r0, 801f4da <tcp_keepalive+0x3a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f4bc:	1d23      	adds	r3, r4, #4
 801f4be:	4622      	mov	r2, r4
 801f4c0:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f4c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f4c6:	f7fe bf3b 	b.w	801e340 <tcp_output_control_segment>
  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f4ca:	4b05      	ldr	r3, [pc, #20]	; (801f4e0 <tcp_keepalive+0x40>)
 801f4cc:	f640 0224 	movw	r2, #2084	; 0x824
 801f4d0:	4904      	ldr	r1, [pc, #16]	; (801f4e4 <tcp_keepalive+0x44>)
 801f4d2:	4805      	ldr	r0, [pc, #20]	; (801f4e8 <tcp_keepalive+0x48>)
 801f4d4:	f005 fcbe 	bl	8024e54 <iprintf>
 801f4d8:	e7e5      	b.n	801f4a6 <tcp_keepalive+0x6>
}
 801f4da:	f04f 30ff 	mov.w	r0, #4294967295
 801f4de:	bd10      	pop	{r4, pc}
 801f4e0:	080441dc 	.word	0x080441dc
 801f4e4:	0804488c 	.word	0x0804488c
 801f4e8:	08029a64 	.word	0x08029a64

0801f4ec <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f4f0:	4604      	mov	r4, r0
 801f4f2:	2800      	cmp	r0, #0
 801f4f4:	d051      	beq.n	801f59a <tcp_zero_window_probe+0xae>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f4f6:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
  if (seg == NULL) {
 801f4f8:	2d00      	cmp	r5, #0
 801f4fa:	d04b      	beq.n	801f594 <tcp_zero_window_probe+0xa8>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f4fc:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 801f500:	2bff      	cmp	r3, #255	; 0xff
 801f502:	d002      	beq.n	801f50a <tcp_zero_window_probe+0x1e>
    ++pcb->persist_probe;
 801f504:	3301      	adds	r3, #1
 801f506:	f884 309a 	strb.w	r3, [r4, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f50a:	68eb      	ldr	r3, [r5, #12]
 801f50c:	8998      	ldrh	r0, [r3, #12]
 801f50e:	f7f9 fba3 	bl	8018c58 <lwip_htons>
 801f512:	07c3      	lsls	r3, r0, #31
 801f514:	d527      	bpl.n	801f566 <tcp_zero_window_probe+0x7a>
 801f516:	8929      	ldrh	r1, [r5, #8]
 801f518:	bb29      	cbnz	r1, 801f566 <tcp_zero_window_probe+0x7a>
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f51a:	68eb      	ldr	r3, [r5, #12]
 801f51c:	4620      	mov	r0, r4
 801f51e:	685a      	ldr	r2, [r3, #4]
 801f520:	f7fe fee6 	bl	801e2f0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f524:	4606      	mov	r6, r0
 801f526:	b388      	cbz	r0, 801f58c <tcp_zero_window_probe+0xa0>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f528:	f8d6 8004 	ldr.w	r8, [r6, #4]

  if (is_fin) {
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f52c:	2011      	movs	r0, #17
 801f52e:	f9b8 700c 	ldrsh.w	r7, [r8, #12]
 801f532:	f7f9 fb91 	bl	8018c58 <lwip_htons>
 801f536:	f427 577c 	bic.w	r7, r7, #16128	; 0x3f00
 801f53a:	4338      	orrs	r0, r7
 801f53c:	f8a8 000c 	strh.w	r0, [r8, #12]
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f540:	68eb      	ldr	r3, [r5, #12]
 801f542:	6858      	ldr	r0, [r3, #4]
 801f544:	f7f9 fb8c 	bl	8018c60 <lwip_htonl>
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f548:	6d23      	ldr	r3, [r4, #80]	; 0x50
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f54a:	3001      	adds	r0, #1
    pcb->snd_nxt = snd_nxt;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f54c:	4622      	mov	r2, r4
 801f54e:	4631      	mov	r1, r6
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f550:	1a1b      	subs	r3, r3, r0
 801f552:	2b00      	cmp	r3, #0
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f554:	f104 0304 	add.w	r3, r4, #4
    pcb->snd_nxt = snd_nxt;
 801f558:	bfb8      	it	lt
 801f55a:	6520      	strlt	r0, [r4, #80]	; 0x50
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f55c:	4620      	mov	r0, r4

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
}
 801f55e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f562:	f7fe beed 	b.w	801e340 <tcp_output_control_segment>
  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f566:	68eb      	ldr	r3, [r5, #12]
 801f568:	2101      	movs	r1, #1
 801f56a:	4620      	mov	r0, r4
 801f56c:	685a      	ldr	r2, [r3, #4]
 801f56e:	f7fe febf 	bl	801e2f0 <tcp_output_alloc_header.constprop.0>
  if (p == NULL) {
 801f572:	4606      	mov	r6, r0
 801f574:	b150      	cbz	r0, 801f58c <tcp_zero_window_probe+0xa0>
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f576:	6868      	ldr	r0, [r5, #4]
 801f578:	892a      	ldrh	r2, [r5, #8]
 801f57a:	8903      	ldrh	r3, [r0, #8]
    char *d = ((char *)p->payload + TCP_HLEN);
 801f57c:	6871      	ldr	r1, [r6, #4]
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f57e:	1a9b      	subs	r3, r3, r2
 801f580:	2201      	movs	r2, #1
 801f582:	3114      	adds	r1, #20
 801f584:	b29b      	uxth	r3, r3
 801f586:	f7fb fc47 	bl	801ae18 <pbuf_copy_partial>
 801f58a:	e7d9      	b.n	801f540 <tcp_zero_window_probe+0x54>
    return ERR_MEM;
 801f58c:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return ERR_OK;
 801f594:	4628      	mov	r0, r5
}
 801f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f59a:	4b04      	ldr	r3, [pc, #16]	; (801f5ac <tcp_zero_window_probe+0xc0>)
 801f59c:	f640 024f 	movw	r2, #2127	; 0x84f
 801f5a0:	4903      	ldr	r1, [pc, #12]	; (801f5b0 <tcp_zero_window_probe+0xc4>)
 801f5a2:	4804      	ldr	r0, [pc, #16]	; (801f5b4 <tcp_zero_window_probe+0xc8>)
 801f5a4:	f005 fc56 	bl	8024e54 <iprintf>
 801f5a8:	e7a5      	b.n	801f4f6 <tcp_zero_window_probe+0xa>
 801f5aa:	bf00      	nop
 801f5ac:	080441dc 	.word	0x080441dc
 801f5b0:	080448a8 	.word	0x080448a8
 801f5b4:	08029a64 	.word	0x08029a64

0801f5b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f5b8:	4613      	mov	r3, r2
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f5ba:	22bc      	movs	r2, #188	; 0xbc
{
 801f5bc:	b570      	push	{r4, r5, r6, lr}
 801f5be:	460e      	mov	r6, r1
 801f5c0:	4604      	mov	r4, r0
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f5c2:	4910      	ldr	r1, [pc, #64]	; (801f604 <sys_timeout_abs+0x4c>)
 801f5c4:	200c      	movs	r0, #12
{
 801f5c6:	461d      	mov	r5, r3
  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f5c8:	f7fa fe34 	bl	801a234 <memp_malloc_fn>
  if (timeout == NULL) {
 801f5cc:	b190      	cbz	r0, 801f5f4 <sys_timeout_abs+0x3c>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
    return;
  }

  timeout->next = NULL;
 801f5ce:	2300      	movs	r3, #0
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f5d0:	490d      	ldr	r1, [pc, #52]	; (801f608 <sys_timeout_abs+0x50>)
  timeout->h = handler;
 801f5d2:	6086      	str	r6, [r0, #8]
  timeout->arg = arg;
 801f5d4:	60c5      	str	r5, [r0, #12]
  timeout->time = abs_time;
 801f5d6:	e9c0 3400 	strd	r3, r4, [r0]
  if (next_timeout == NULL) {
 801f5da:	680b      	ldr	r3, [r1, #0]
 801f5dc:	b91b      	cbnz	r3, 801f5e6 <sys_timeout_abs+0x2e>
 801f5de:	e007      	b.n	801f5f0 <sys_timeout_abs+0x38>
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
    timeout->next = next_timeout;
    next_timeout = timeout;
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f5e0:	4619      	mov	r1, r3
 801f5e2:	681b      	ldr	r3, [r3, #0]
 801f5e4:	b11b      	cbz	r3, 801f5ee <sys_timeout_abs+0x36>
 801f5e6:	685a      	ldr	r2, [r3, #4]
 801f5e8:	1aa2      	subs	r2, r4, r2
 801f5ea:	2a00      	cmp	r2, #0
 801f5ec:	daf8      	bge.n	801f5e0 <sys_timeout_abs+0x28>
        timeout->next = t->next;
 801f5ee:	6003      	str	r3, [r0, #0]
        t->next = timeout;
 801f5f0:	6008      	str	r0, [r1, #0]
        break;
      }
    }
  }
}
 801f5f2:	bd70      	pop	{r4, r5, r6, pc}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f5f4:	4b03      	ldr	r3, [pc, #12]	; (801f604 <sys_timeout_abs+0x4c>)
 801f5f6:	22be      	movs	r2, #190	; 0xbe
 801f5f8:	4904      	ldr	r1, [pc, #16]	; (801f60c <sys_timeout_abs+0x54>)
 801f5fa:	4805      	ldr	r0, [pc, #20]	; (801f610 <sys_timeout_abs+0x58>)
}
 801f5fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f600:	f005 bc28 	b.w	8024e54 <iprintf>
 801f604:	080448cc 	.word	0x080448cc
 801f608:	2002e3ec 	.word	0x2002e3ec
 801f60c:	08044900 	.word	0x08044900
 801f610:	08029a64 	.word	0x08029a64

0801f614 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f614:	b538      	push	{r3, r4, r5, lr}
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f616:	6843      	ldr	r3, [r0, #4]
{
 801f618:	4604      	mov	r4, r0
  cyclic->handler();
 801f61a:	4798      	blx	r3

  now = sys_now();
 801f61c:	f7f4 fd70 	bl	8014100 <sys_now>
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f620:	4b09      	ldr	r3, [pc, #36]	; (801f648 <lwip_cyclic_timer+0x34>)
 801f622:	6825      	ldr	r5, [r4, #0]
 801f624:	681b      	ldr	r3, [r3, #0]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f626:	4909      	ldr	r1, [pc, #36]	; (801f64c <lwip_cyclic_timer+0x38>)
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f628:	442b      	add	r3, r5
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f62a:	1a1a      	subs	r2, r3, r0
 801f62c:	2a00      	cmp	r2, #0
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f62e:	4622      	mov	r2, r4
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f630:	da04      	bge.n	801f63c <lwip_cyclic_timer+0x28>
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f632:	4428      	add	r0, r5
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f634:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f638:	f7ff bfbe 	b.w	801f5b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f63c:	4618      	mov	r0, r3
}
 801f63e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f642:	f7ff bfb9 	b.w	801f5b8 <sys_timeout_abs>
 801f646:	bf00      	nop
 801f648:	2002e3e8 	.word	0x2002e3e8
 801f64c:	0801f615 	.word	0x0801f615

0801f650 <tcpip_tcp_timer>:
{
 801f650:	b508      	push	{r3, lr}
  tcp_tmr();
 801f652:	f7fd f887 	bl	801c764 <tcp_tmr>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f656:	4b09      	ldr	r3, [pc, #36]	; (801f67c <tcpip_tcp_timer+0x2c>)
 801f658:	681b      	ldr	r3, [r3, #0]
 801f65a:	b143      	cbz	r3, 801f66e <tcpip_tcp_timer+0x1e>

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f65c:	f7f4 fd50 	bl	8014100 <sys_now>

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f660:	2200      	movs	r2, #0
 801f662:	4907      	ldr	r1, [pc, #28]	; (801f680 <tcpip_tcp_timer+0x30>)
 801f664:	30fa      	adds	r0, #250	; 0xfa
}
 801f666:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f66a:	f7ff bfa5 	b.w	801f5b8 <sys_timeout_abs>
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f66e:	4b05      	ldr	r3, [pc, #20]	; (801f684 <tcpip_tcp_timer+0x34>)
 801f670:	681b      	ldr	r3, [r3, #0]
 801f672:	2b00      	cmp	r3, #0
 801f674:	d1f2      	bne.n	801f65c <tcpip_tcp_timer+0xc>
    tcpip_tcp_timer_active = 0;
 801f676:	4a04      	ldr	r2, [pc, #16]	; (801f688 <tcpip_tcp_timer+0x38>)
 801f678:	6013      	str	r3, [r2, #0]
}
 801f67a:	bd08      	pop	{r3, pc}
 801f67c:	2002e38c 	.word	0x2002e38c
 801f680:	0801f651 	.word	0x0801f651
 801f684:	2002e3a4 	.word	0x2002e3a4
 801f688:	2002e3f0 	.word	0x2002e3f0

0801f68c <tcp_timer_needed>:
{
 801f68c:	b508      	push	{r3, lr}
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f68e:	4b0b      	ldr	r3, [pc, #44]	; (801f6bc <tcp_timer_needed+0x30>)
 801f690:	681a      	ldr	r2, [r3, #0]
 801f692:	b98a      	cbnz	r2, 801f6b8 <tcp_timer_needed+0x2c>
 801f694:	4a0a      	ldr	r2, [pc, #40]	; (801f6c0 <tcp_timer_needed+0x34>)
 801f696:	6812      	ldr	r2, [r2, #0]
 801f698:	b152      	cbz	r2, 801f6b0 <tcp_timer_needed+0x24>
    tcpip_tcp_timer_active = 1;
 801f69a:	2201      	movs	r2, #1
 801f69c:	601a      	str	r2, [r3, #0]
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f69e:	f7f4 fd2f 	bl	8014100 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f6a2:	2200      	movs	r2, #0
 801f6a4:	4907      	ldr	r1, [pc, #28]	; (801f6c4 <tcp_timer_needed+0x38>)
 801f6a6:	30fa      	adds	r0, #250	; 0xfa
}
 801f6a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f6ac:	f7ff bf84 	b.w	801f5b8 <sys_timeout_abs>
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f6b0:	4a05      	ldr	r2, [pc, #20]	; (801f6c8 <tcp_timer_needed+0x3c>)
 801f6b2:	6812      	ldr	r2, [r2, #0]
 801f6b4:	2a00      	cmp	r2, #0
 801f6b6:	d1f0      	bne.n	801f69a <tcp_timer_needed+0xe>
}
 801f6b8:	bd08      	pop	{r3, pc}
 801f6ba:	bf00      	nop
 801f6bc:	2002e3f0 	.word	0x2002e3f0
 801f6c0:	2002e38c 	.word	0x2002e38c
 801f6c4:	0801f651 	.word	0x0801f651
 801f6c8:	2002e3a4 	.word	0x2002e3a4

0801f6cc <sys_timeouts_init>:
{
 801f6cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f6d0:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 801f6d4:	4c11      	ldr	r4, [pc, #68]	; (801f71c <sys_timeouts_init+0x50>)
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f6d6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 801f728 <sys_timeouts_init+0x5c>
 801f6da:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f6de:	f8df 804c 	ldr.w	r8, [pc, #76]	; 801f72c <sys_timeouts_init+0x60>
 801f6e2:	f104 0620 	add.w	r6, r4, #32
 801f6e6:	4f0e      	ldr	r7, [pc, #56]	; (801f720 <sys_timeouts_init+0x54>)
 801f6e8:	d20d      	bcs.n	801f706 <sys_timeouts_init+0x3a>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f6ea:	f7f4 fd09 	bl	8014100 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f6ee:	4622      	mov	r2, r4
 801f6f0:	490c      	ldr	r1, [pc, #48]	; (801f724 <sys_timeouts_init+0x58>)
 801f6f2:	4428      	add	r0, r5
 801f6f4:	f7ff ff60 	bl	801f5b8 <sys_timeout_abs>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f6f8:	42b4      	cmp	r4, r6
 801f6fa:	d00c      	beq.n	801f716 <sys_timeouts_init+0x4a>
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f6fc:	f854 5f08 	ldr.w	r5, [r4, #8]!
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f700:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801f704:	d3f1      	bcc.n	801f6ea <sys_timeouts_init+0x1e>
 801f706:	464b      	mov	r3, r9
 801f708:	4641      	mov	r1, r8
 801f70a:	f240 1229 	movw	r2, #297	; 0x129
 801f70e:	4638      	mov	r0, r7
 801f710:	f005 fba0 	bl	8024e54 <iprintf>
 801f714:	e7e9      	b.n	801f6ea <sys_timeouts_init+0x1e>
}
 801f716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f71a:	bf00      	nop
 801f71c:	08044980 	.word	0x08044980
 801f720:	08029a64 	.word	0x08029a64
 801f724:	0801f615 	.word	0x0801f615
 801f728:	080448cc 	.word	0x080448cc
 801f72c:	08044940 	.word	0x08044940

0801f730 <sys_timeout>:
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f730:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 801f734:	b570      	push	{r4, r5, r6, lr}
 801f736:	4604      	mov	r4, r0
 801f738:	460d      	mov	r5, r1
 801f73a:	4616      	mov	r6, r2
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f73c:	d208      	bcs.n	801f750 <sys_timeout+0x20>
  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f73e:	f7f4 fcdf 	bl	8014100 <sys_now>
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f742:	4632      	mov	r2, r6
 801f744:	4629      	mov	r1, r5
 801f746:	4420      	add	r0, r4
#endif
}
 801f748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f74c:	f7ff bf34 	b.w	801f5b8 <sys_timeout_abs>
  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f750:	4b03      	ldr	r3, [pc, #12]	; (801f760 <sys_timeout+0x30>)
 801f752:	f240 1229 	movw	r2, #297	; 0x129
 801f756:	4903      	ldr	r1, [pc, #12]	; (801f764 <sys_timeout+0x34>)
 801f758:	4803      	ldr	r0, [pc, #12]	; (801f768 <sys_timeout+0x38>)
 801f75a:	f005 fb7b 	bl	8024e54 <iprintf>
 801f75e:	e7ee      	b.n	801f73e <sys_timeout+0xe>
 801f760:	080448cc 	.word	0x080448cc
 801f764:	08044940 	.word	0x08044940
 801f768:	08029a64 	.word	0x08029a64

0801f76c <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 801f76c:	b430      	push	{r4, r5}
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f76e:	4d0d      	ldr	r5, [pc, #52]	; (801f7a4 <sys_untimeout+0x38>)
 801f770:	682b      	ldr	r3, [r5, #0]
 801f772:	b19b      	cbz	r3, 801f79c <sys_untimeout+0x30>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801f774:	2400      	movs	r4, #0
 801f776:	e003      	b.n	801f780 <sys_untimeout+0x14>
 801f778:	681a      	ldr	r2, [r3, #0]
 801f77a:	461c      	mov	r4, r3
 801f77c:	4613      	mov	r3, r2
 801f77e:	b16a      	cbz	r2, 801f79c <sys_untimeout+0x30>
    if ((t->h == handler) && (t->arg == arg)) {
 801f780:	689a      	ldr	r2, [r3, #8]
 801f782:	4282      	cmp	r2, r0
 801f784:	d1f8      	bne.n	801f778 <sys_untimeout+0xc>
 801f786:	68da      	ldr	r2, [r3, #12]
 801f788:	428a      	cmp	r2, r1
 801f78a:	d1f5      	bne.n	801f778 <sys_untimeout+0xc>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
        next_timeout = t->next;
 801f78c:	681a      	ldr	r2, [r3, #0]
      if (prev_t == NULL) {
 801f78e:	b13c      	cbz	r4, 801f7a0 <sys_untimeout+0x34>
      } else {
        prev_t->next = t->next;
 801f790:	6022      	str	r2, [r4, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f792:	4619      	mov	r1, r3
 801f794:	200c      	movs	r0, #12
      return;
    }
  }
  return;
}
 801f796:	bc30      	pop	{r4, r5}
      memp_free(MEMP_SYS_TIMEOUT, t);
 801f798:	f7fa bd82 	b.w	801a2a0 <memp_free>
}
 801f79c:	bc30      	pop	{r4, r5}
 801f79e:	4770      	bx	lr
        next_timeout = t->next;
 801f7a0:	602a      	str	r2, [r5, #0]
 801f7a2:	e7f6      	b.n	801f792 <sys_untimeout+0x26>
 801f7a4:	2002e3ec 	.word	0x2002e3ec

0801f7a8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f7ac:	f7f4 fca8 	bl	8014100 <sys_now>
 801f7b0:	4c0f      	ldr	r4, [pc, #60]	; (801f7f0 <sys_check_timeouts+0x48>)

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
    handler = tmptimeout->h;
    arg = tmptimeout->arg;
    current_timeout_due_time = tmptimeout->time;
 801f7b2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801f7f4 <sys_check_timeouts+0x4c>
  now = sys_now();
 801f7b6:	4607      	mov	r7, r0
 801f7b8:	e00f      	b.n	801f7da <sys_check_timeouts+0x32>
    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f7ba:	685a      	ldr	r2, [r3, #4]
 801f7bc:	eba7 0c02 	sub.w	ip, r7, r2
 801f7c0:	f1bc 0f00 	cmp.w	ip, #0
 801f7c4:	db0e      	blt.n	801f7e4 <sys_check_timeouts+0x3c>
    handler = tmptimeout->h;
 801f7c6:	689d      	ldr	r5, [r3, #8]
    next_timeout = tmptimeout->next;
 801f7c8:	681e      	ldr	r6, [r3, #0]
    arg = tmptimeout->arg;
 801f7ca:	f8d3 900c 	ldr.w	r9, [r3, #12]
    current_timeout_due_time = tmptimeout->time;
 801f7ce:	f8c8 2000 	str.w	r2, [r8]
    next_timeout = tmptimeout->next;
 801f7d2:	6026      	str	r6, [r4, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f7d4:	f7fa fd64 	bl	801a2a0 <memp_free>
    if (handler != NULL) {
 801f7d8:	b935      	cbnz	r5, 801f7e8 <sys_check_timeouts+0x40>
    tmptimeout = next_timeout;
 801f7da:	6823      	ldr	r3, [r4, #0]
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f7dc:	200c      	movs	r0, #12
 801f7de:	4619      	mov	r1, r3
    if (tmptimeout == NULL) {
 801f7e0:	2b00      	cmp	r3, #0
 801f7e2:	d1ea      	bne.n	801f7ba <sys_check_timeouts+0x12>
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f7e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      handler(arg);
 801f7e8:	4648      	mov	r0, r9
 801f7ea:	47a8      	blx	r5
 801f7ec:	e7f5      	b.n	801f7da <sys_check_timeouts+0x32>
 801f7ee:	bf00      	nop
 801f7f0:	2002e3ec 	.word	0x2002e3ec
 801f7f4:	2002e3e8 	.word	0x2002e3e8

0801f7f8 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f7f8:	b510      	push	{r4, lr}
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f7fa:	4c07      	ldr	r4, [pc, #28]	; (801f818 <sys_timeouts_sleeptime+0x20>)
 801f7fc:	6823      	ldr	r3, [r4, #0]
 801f7fe:	b13b      	cbz	r3, 801f810 <sys_timeouts_sleeptime+0x18>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
  }
  now = sys_now();
 801f800:	f7f4 fc7e 	bl	8014100 <sys_now>
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f804:	6823      	ldr	r3, [r4, #0]
 801f806:	685b      	ldr	r3, [r3, #4]
    return 0;
 801f808:	1a18      	subs	r0, r3, r0
 801f80a:	bf48      	it	mi
 801f80c:	2000      	movmi	r0, #0
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
    return ret;
  }
}
 801f80e:	bd10      	pop	{r4, pc}
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f810:	f04f 30ff 	mov.w	r0, #4294967295
}
 801f814:	bd10      	pop	{r4, pc}
 801f816:	bf00      	nop
 801f818:	2002e3ec 	.word	0x2002e3ec

0801f81c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f81c:	b508      	push	{r3, lr}
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f81e:	f005 fbbd 	bl	8024f9c <rand>
 801f822:	4b02      	ldr	r3, [pc, #8]	; (801f82c <udp_init+0x10>)
 801f824:	4a02      	ldr	r2, [pc, #8]	; (801f830 <udp_init+0x14>)
 801f826:	4303      	orrs	r3, r0
 801f828:	8013      	strh	r3, [r2, #0]
#endif /* LWIP_RAND */
}
 801f82a:	bd08      	pop	{r3, pc}
 801f82c:	ffffc000 	.word	0xffffc000
 801f830:	200003f6 	.word	0x200003f6

0801f834 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f838:	4680      	mov	r8, r0
{
 801f83a:	b085      	sub	sp, #20
 801f83c:	460f      	mov	r7, r1
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f83e:	2800      	cmp	r0, #0
 801f840:	f000 80af 	beq.w	801f9a2 <udp_input+0x16e>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f844:	2f00      	cmp	r7, #0
 801f846:	f000 80b5 	beq.w	801f9b4 <udp_input+0x180>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f84a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 801f84e:	2b07      	cmp	r3, #7
 801f850:	f240 8091 	bls.w	801f976 <udp_input+0x142>
  }

  udphdr = (struct udp_hdr *)p->payload;

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f854:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 801fa2c <udp_input+0x1f8>
  udphdr = (struct udp_hdr *)p->payload;
 801f858:	f8d8 4004 	ldr.w	r4, [r8, #4]
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f85c:	f8d9 1000 	ldr.w	r1, [r9]
 801f860:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f864:	f003 f80c 	bl	8022880 <ip4_addr_isbroadcast_u32>
 801f868:	4682      	mov	sl, r0

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f86a:	8820      	ldrh	r0, [r4, #0]
 801f86c:	f7f9 f9f4 	bl	8018c58 <lwip_htons>
 801f870:	4603      	mov	r3, r0
  dest = lwip_ntohs(udphdr->dest);
 801f872:	8860      	ldrh	r0, [r4, #2]
  src = lwip_ntohs(udphdr->src);
 801f874:	9303      	str	r3, [sp, #12]
  dest = lwip_ntohs(udphdr->dest);
 801f876:	f7f9 f9ef 	bl	8018c58 <lwip_htons>
  uncon_pcb = NULL;
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f87a:	4b64      	ldr	r3, [pc, #400]	; (801fa0c <udp_input+0x1d8>)
  dest = lwip_ntohs(udphdr->dest);
 801f87c:	4605      	mov	r5, r0
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f87e:	681c      	ldr	r4, [r3, #0]
 801f880:	2c00      	cmp	r4, #0
 801f882:	d064      	beq.n	801f94e <udp_input+0x11a>
  uncon_pcb = NULL;
 801f884:	f04f 0b00 	mov.w	fp, #0
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f888:	f8df c190 	ldr.w	ip, [pc, #400]	; 801fa1c <udp_input+0x1e8>
 801f88c:	4960      	ldr	r1, [pc, #384]	; (801fa10 <udp_input+0x1dc>)
  prev = NULL;
 801f88e:	465e      	mov	r6, fp
 801f890:	e004      	b.n	801f89c <udp_input+0x68>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f892:	68e2      	ldr	r2, [r4, #12]
 801f894:	4626      	mov	r6, r4
 801f896:	2a00      	cmp	r2, #0
 801f898:	d056      	beq.n	801f948 <udp_input+0x114>
 801f89a:	4614      	mov	r4, r2
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f89c:	8a62      	ldrh	r2, [r4, #18]
 801f89e:	42aa      	cmp	r2, r5
 801f8a0:	d1f7      	bne.n	801f892 <udp_input+0x5e>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f8a2:	2f00      	cmp	r7, #0
 801f8a4:	d06d      	beq.n	801f982 <udp_input+0x14e>
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f8a6:	7a20      	ldrb	r0, [r4, #8]
 801f8a8:	b138      	cbz	r0, 801f8ba <udp_input+0x86>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f8aa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 801f8ae:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
 801f8b2:	3201      	adds	r2, #1
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f8b4:	b2d2      	uxtb	r2, r2
 801f8b6:	4290      	cmp	r0, r2
 801f8b8:	d1eb      	bne.n	801f892 <udp_input+0x5e>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f8ba:	6822      	ldr	r2, [r4, #0]
    if (broadcast != 0) {
 801f8bc:	f1ba 0f00 	cmp.w	sl, #0
 801f8c0:	d038      	beq.n	801f934 <udp_input+0x100>
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f8c2:	b13a      	cbz	r2, 801f8d4 <udp_input+0xa0>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f8c4:	f8d9 0014 	ldr.w	r0, [r9, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f8c8:	1c43      	adds	r3, r0, #1
 801f8ca:	d003      	beq.n	801f8d4 <udp_input+0xa0>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f8cc:	4050      	eors	r0, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f8ce:	68bb      	ldr	r3, [r7, #8]
 801f8d0:	4218      	tst	r0, r3
 801f8d2:	d1de      	bne.n	801f892 <udp_input+0x5e>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f8d4:	7c20      	ldrb	r0, [r4, #16]
 801f8d6:	0743      	lsls	r3, r0, #29
 801f8d8:	d409      	bmi.n	801f8ee <udp_input+0xba>
        if (uncon_pcb == NULL) {
 801f8da:	f1bb 0f00 	cmp.w	fp, #0
 801f8de:	d059      	beq.n	801f994 <udp_input+0x160>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f8e0:	f1ba 0f00 	cmp.w	sl, #0
 801f8e4:	d003      	beq.n	801f8ee <udp_input+0xba>
 801f8e6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f8ea:	3001      	adds	r0, #1
 801f8ec:	d069      	beq.n	801f9c2 <udp_input+0x18e>
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f8ee:	8aa2      	ldrh	r2, [r4, #20]
 801f8f0:	9803      	ldr	r0, [sp, #12]
 801f8f2:	4282      	cmp	r2, r0
 801f8f4:	d1cd      	bne.n	801f892 <udp_input+0x5e>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f8f6:	6862      	ldr	r2, [r4, #4]
      if ((pcb->remote_port == src) &&
 801f8f8:	b11a      	cbz	r2, 801f902 <udp_input+0xce>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f8fa:	f8d9 0010 	ldr.w	r0, [r9, #16]
 801f8fe:	4282      	cmp	r2, r0
 801f900:	d1c7      	bne.n	801f892 <udp_input+0x5e>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f902:	b12e      	cbz	r6, 801f910 <udp_input+0xdc>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f904:	68e3      	ldr	r3, [r4, #12]
          pcb->next = udp_pcbs;
 801f906:	4a41      	ldr	r2, [pc, #260]	; (801fa0c <udp_input+0x1d8>)
          prev->next = pcb->next;
 801f908:	60f3      	str	r3, [r6, #12]
          pcb->next = udp_pcbs;
 801f90a:	6813      	ldr	r3, [r2, #0]
          udp_pcbs = pcb;
 801f90c:	6014      	str	r4, [r2, #0]
          pcb->next = udp_pcbs;
 801f90e:	60e3      	str	r3, [r4, #12]
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f910:	2108      	movs	r1, #8
 801f912:	4640      	mov	r0, r8
 801f914:	f7fb f950 	bl	801abb8 <pbuf_remove_header>
 801f918:	2800      	cmp	r0, #0
 801f91a:	d15b      	bne.n	801f9d4 <udp_input+0x1a0>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f91c:	69a5      	ldr	r5, [r4, #24]
 801f91e:	b355      	cbz	r5, 801f976 <udp_input+0x142>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f920:	9b03      	ldr	r3, [sp, #12]
 801f922:	4642      	mov	r2, r8
 801f924:	69e0      	ldr	r0, [r4, #28]
 801f926:	4621      	mov	r1, r4
 801f928:	9300      	str	r3, [sp, #0]
 801f92a:	4b3a      	ldr	r3, [pc, #232]	; (801fa14 <udp_input+0x1e0>)
 801f92c:	47a8      	blx	r5
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f92e:	b005      	add	sp, #20
 801f930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f934:	2a00      	cmp	r2, #0
 801f936:	d0cd      	beq.n	801f8d4 <udp_input+0xa0>
 801f938:	f8d9 0014 	ldr.w	r0, [r9, #20]
 801f93c:	4282      	cmp	r2, r0
 801f93e:	d0c9      	beq.n	801f8d4 <udp_input+0xa0>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f940:	68e2      	ldr	r2, [r4, #12]
 801f942:	4626      	mov	r6, r4
 801f944:	2a00      	cmp	r2, #0
 801f946:	d1a8      	bne.n	801f89a <udp_input+0x66>
  if (pcb != NULL) {
 801f948:	f1bb 0f00 	cmp.w	fp, #0
 801f94c:	d15b      	bne.n	801fa06 <udp_input+0x1d2>
  if (for_us) {
 801f94e:	687a      	ldr	r2, [r7, #4]
 801f950:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f954:	429a      	cmp	r2, r3
 801f956:	d10e      	bne.n	801f976 <udp_input+0x142>
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f958:	2108      	movs	r1, #8
 801f95a:	4640      	mov	r0, r8
 801f95c:	f7fb f92c 	bl	801abb8 <pbuf_remove_header>
 801f960:	2800      	cmp	r0, #0
 801f962:	d137      	bne.n	801f9d4 <udp_input+0x1a0>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f964:	f1ba 0f00 	cmp.w	sl, #0
 801f968:	d105      	bne.n	801f976 <udp_input+0x142>
 801f96a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 801f96e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f972:	2be0      	cmp	r3, #224	; 0xe0
 801f974:	d13b      	bne.n	801f9ee <udp_input+0x1ba>
      pbuf_free(p);
 801f976:	4640      	mov	r0, r8
}
 801f978:	b005      	add	sp, #20
 801f97a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801f97e:	f7fb b9a7 	b.w	801acd0 <pbuf_free>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f982:	4663      	mov	r3, ip
 801f984:	2288      	movs	r2, #136	; 0x88
 801f986:	4824      	ldr	r0, [pc, #144]	; (801fa18 <udp_input+0x1e4>)
 801f988:	f005 fa64 	bl	8024e54 <iprintf>
 801f98c:	f8df c08c 	ldr.w	ip, [pc, #140]	; 801fa1c <udp_input+0x1e8>
 801f990:	491f      	ldr	r1, [pc, #124]	; (801fa10 <udp_input+0x1dc>)
 801f992:	e788      	b.n	801f8a6 <udp_input+0x72>
      if ((pcb->remote_port == src) &&
 801f994:	8aa2      	ldrh	r2, [r4, #20]
 801f996:	46a3      	mov	fp, r4
 801f998:	9803      	ldr	r0, [sp, #12]
 801f99a:	4282      	cmp	r2, r0
 801f99c:	f47f af79 	bne.w	801f892 <udp_input+0x5e>
 801f9a0:	e7a9      	b.n	801f8f6 <udp_input+0xc2>
  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f9a2:	4b1e      	ldr	r3, [pc, #120]	; (801fa1c <udp_input+0x1e8>)
 801f9a4:	22cf      	movs	r2, #207	; 0xcf
 801f9a6:	491e      	ldr	r1, [pc, #120]	; (801fa20 <udp_input+0x1ec>)
 801f9a8:	481b      	ldr	r0, [pc, #108]	; (801fa18 <udp_input+0x1e4>)
 801f9aa:	f005 fa53 	bl	8024e54 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f9ae:	2f00      	cmp	r7, #0
 801f9b0:	f47f af4b 	bne.w	801f84a <udp_input+0x16>
 801f9b4:	4b19      	ldr	r3, [pc, #100]	; (801fa1c <udp_input+0x1e8>)
 801f9b6:	22d0      	movs	r2, #208	; 0xd0
 801f9b8:	491a      	ldr	r1, [pc, #104]	; (801fa24 <udp_input+0x1f0>)
 801f9ba:	4817      	ldr	r0, [pc, #92]	; (801fa18 <udp_input+0x1e4>)
 801f9bc:	f005 fa4a 	bl	8024e54 <iprintf>
 801f9c0:	e743      	b.n	801f84a <udp_input+0x16>
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f9c2:	6878      	ldr	r0, [r7, #4]
 801f9c4:	f8db 3000 	ldr.w	r3, [fp]
 801f9c8:	4283      	cmp	r3, r0
 801f9ca:	d090      	beq.n	801f8ee <udp_input+0xba>
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f9cc:	4290      	cmp	r0, r2
 801f9ce:	bf08      	it	eq
 801f9d0:	46a3      	moveq	fp, r4
 801f9d2:	e78c      	b.n	801f8ee <udp_input+0xba>
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f9d4:	4b11      	ldr	r3, [pc, #68]	; (801fa1c <udp_input+0x1e8>)
 801f9d6:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f9da:	4913      	ldr	r1, [pc, #76]	; (801fa28 <udp_input+0x1f4>)
 801f9dc:	480e      	ldr	r0, [pc, #56]	; (801fa18 <udp_input+0x1e4>)
 801f9de:	f005 fa39 	bl	8024e54 <iprintf>
      pbuf_free(p);
 801f9e2:	4640      	mov	r0, r8
}
 801f9e4:	b005      	add	sp, #20
 801f9e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      pbuf_free(p);
 801f9ea:	f7fb b971 	b.w	801acd0 <pbuf_free>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f9ee:	f8b9 100c 	ldrh.w	r1, [r9, #12]
 801f9f2:	4640      	mov	r0, r8
 801f9f4:	3108      	adds	r1, #8
 801f9f6:	b209      	sxth	r1, r1
 801f9f8:	f7fb f916 	bl	801ac28 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f9fc:	2103      	movs	r1, #3
 801f9fe:	4640      	mov	r0, r8
 801fa00:	f002 fd5a 	bl	80224b8 <icmp_dest_unreach>
 801fa04:	e7b7      	b.n	801f976 <udp_input+0x142>
 801fa06:	465c      	mov	r4, fp
 801fa08:	e782      	b.n	801f910 <udp_input+0xdc>
 801fa0a:	bf00      	nop
 801fa0c:	2002e3f4 	.word	0x2002e3f4
 801fa10:	08044a0c 	.word	0x08044a0c
 801fa14:	2001f200 	.word	0x2001f200
 801fa18:	08029a64 	.word	0x08029a64
 801fa1c:	080449a8 	.word	0x080449a8
 801fa20:	080449d8 	.word	0x080449d8
 801fa24:	080449f0 	.word	0x080449f0
 801fa28:	08044a34 	.word	0x08044a34
 801fa2c:	2001f1f0 	.word	0x2001f1f0

0801fa30 <udp_bind>:
  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
    ipaddr = IP4_ADDR_ANY;
 801fa30:	4b38      	ldr	r3, [pc, #224]	; (801fb14 <udp_bind+0xe4>)
 801fa32:	2900      	cmp	r1, #0
{
 801fa34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ipaddr = IP4_ADDR_ANY;
 801fa38:	bf08      	it	eq
 801fa3a:	4619      	moveq	r1, r3
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fa3c:	2800      	cmp	r0, #0
 801fa3e:	d05e      	beq.n	801fafe <udp_bind+0xce>
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa40:	4f35      	ldr	r7, [pc, #212]	; (801fb18 <udp_bind+0xe8>)
 801fa42:	683e      	ldr	r6, [r7, #0]
 801fa44:	b34e      	cbz	r6, 801fa9a <udp_bind+0x6a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fa46:	42b0      	cmp	r0, r6
 801fa48:	d031      	beq.n	801faae <udp_bind+0x7e>
 801fa4a:	4634      	mov	r4, r6
 801fa4c:	e001      	b.n	801fa52 <udp_bind+0x22>
 801fa4e:	42a0      	cmp	r0, r4
 801fa50:	d02d      	beq.n	801faae <udp_bind+0x7e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa52:	68e4      	ldr	r4, [r4, #12]
 801fa54:	2c00      	cmp	r4, #0
 801fa56:	d1fa      	bne.n	801fa4e <udp_bind+0x1e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fa58:	b362      	cbz	r2, 801fab4 <udp_bind+0x84>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa5a:	680d      	ldr	r5, [r1, #0]
 801fa5c:	4633      	mov	r3, r6
 801fa5e:	e001      	b.n	801fa64 <udp_bind+0x34>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fa60:	68db      	ldr	r3, [r3, #12]
 801fa62:	b19b      	cbz	r3, 801fa8c <udp_bind+0x5c>
      if (pcb != ipcb) {
 801fa64:	4298      	cmp	r0, r3
 801fa66:	d0fb      	beq.n	801fa60 <udp_bind+0x30>
          if ((ipcb->local_port == port) &&
 801fa68:	8a59      	ldrh	r1, [r3, #18]
 801fa6a:	4291      	cmp	r1, r2
 801fa6c:	d1f8      	bne.n	801fa60 <udp_bind+0x30>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa6e:	6819      	ldr	r1, [r3, #0]
              ip_addr_isany(&ipcb->local_ip))) {
 801fa70:	2900      	cmp	r1, #0
 801fa72:	bf18      	it	ne
 801fa74:	42a9      	cmpne	r1, r5
 801fa76:	d001      	beq.n	801fa7c <udp_bind+0x4c>
 801fa78:	2d00      	cmp	r5, #0
 801fa7a:	d1f1      	bne.n	801fa60 <udp_bind+0x30>
      return ERR_USE;
 801fa7c:	f06f 0307 	mvn.w	r3, #7
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
}
 801fa80:	4618      	mov	r0, r3
 801fa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa86:	680d      	ldr	r5, [r1, #0]
 801fa88:	f8ae 2000 	strh.w	r2, [lr]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fa8c:	6005      	str	r5, [r0, #0]
  pcb->local_port = port;
 801fa8e:	8242      	strh	r2, [r0, #18]
  if (rebind == 0) {
 801fa90:	b13c      	cbz	r4, 801faa2 <udp_bind+0x72>
  return ERR_OK;
 801fa92:	2300      	movs	r3, #0
}
 801fa94:	4618      	mov	r0, r3
 801fa96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (port == 0) {
 801fa9a:	b372      	cbz	r2, 801fafa <udp_bind+0xca>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fa9c:	680b      	ldr	r3, [r1, #0]
  pcb->local_port = port;
 801fa9e:	8242      	strh	r2, [r0, #18]
  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801faa0:	6003      	str	r3, [r0, #0]
  return ERR_OK;
 801faa2:	2300      	movs	r3, #0
    pcb->next = udp_pcbs;
 801faa4:	60c6      	str	r6, [r0, #12]
    udp_pcbs = pcb;
 801faa6:	6038      	str	r0, [r7, #0]
}
 801faa8:	4618      	mov	r0, r3
 801faaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      rebind = 1;
 801faae:	2401      	movs	r4, #1
  if (port == 0) {
 801fab0:	2a00      	cmp	r2, #0
 801fab2:	d1d2      	bne.n	801fa5a <udp_bind+0x2a>
 801fab4:	f8df e070 	ldr.w	lr, [pc, #112]	; 801fb28 <udp_bind+0xf8>
  rebind = 0;
 801fab8:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801fabc:	f64f 78ff 	movw	r8, #65535	; 0xffff
 801fac0:	f8be 2000 	ldrh.w	r2, [lr]
 801fac4:	4542      	cmp	r2, r8
 801fac6:	d015      	beq.n	801faf4 <udp_bind+0xc4>
 801fac8:	3201      	adds	r2, #1
 801faca:	b292      	uxth	r2, r2
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801facc:	2e00      	cmp	r6, #0
 801face:	d0da      	beq.n	801fa86 <udp_bind+0x56>
 801fad0:	4633      	mov	r3, r6
 801fad2:	e002      	b.n	801fada <udp_bind+0xaa>
 801fad4:	68db      	ldr	r3, [r3, #12]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d0d5      	beq.n	801fa86 <udp_bind+0x56>
    if (pcb->local_port == udp_port) {
 801fada:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 801fade:	4594      	cmp	ip, r2
 801fae0:	d1f8      	bne.n	801fad4 <udp_bind+0xa4>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801fae2:	3d01      	subs	r5, #1
 801fae4:	b2ad      	uxth	r5, r5
 801fae6:	2d00      	cmp	r5, #0
 801fae8:	d1ec      	bne.n	801fac4 <udp_bind+0x94>
      return ERR_USE;
 801faea:	f06f 0307 	mvn.w	r3, #7
 801faee:	f8ae 2000 	strh.w	r2, [lr]
 801faf2:	e7cf      	b.n	801fa94 <udp_bind+0x64>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801faf4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801faf8:	e7e8      	b.n	801facc <udp_bind+0x9c>
  rebind = 0;
 801fafa:	4634      	mov	r4, r6
 801fafc:	e7da      	b.n	801fab4 <udp_bind+0x84>
  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fafe:	4b07      	ldr	r3, [pc, #28]	; (801fb1c <udp_bind+0xec>)
 801fb00:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fb04:	4906      	ldr	r1, [pc, #24]	; (801fb20 <udp_bind+0xf0>)
 801fb06:	4807      	ldr	r0, [pc, #28]	; (801fb24 <udp_bind+0xf4>)
 801fb08:	f005 f9a4 	bl	8024e54 <iprintf>
 801fb0c:	f06f 030f 	mvn.w	r3, #15
 801fb10:	e7c0      	b.n	801fa94 <udp_bind+0x64>
 801fb12:	bf00      	nop
 801fb14:	08045328 	.word	0x08045328
 801fb18:	2002e3f4 	.word	0x2002e3f4
 801fb1c:	080449a8 	.word	0x080449a8
 801fb20:	08044a50 	.word	0x08044a50
 801fb24:	08029a64 	.word	0x08029a64
 801fb28:	200003f6 	.word	0x200003f6

0801fb2c <udp_sendto_if_src>:
{
 801fb2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb30:	b085      	sub	sp, #20
 801fb32:	e9dd ba0e 	ldrd	fp, sl, [sp, #56]	; 0x38
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fb36:	2800      	cmp	r0, #0
 801fb38:	f000 8087 	beq.w	801fc4a <udp_sendto_if_src+0x11e>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fb3c:	460d      	mov	r5, r1
 801fb3e:	2900      	cmp	r1, #0
 801fb40:	d079      	beq.n	801fc36 <udp_sendto_if_src+0x10a>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fb42:	4690      	mov	r8, r2
 801fb44:	2a00      	cmp	r2, #0
 801fb46:	d06c      	beq.n	801fc22 <udp_sendto_if_src+0xf6>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fb48:	f1ba 0f00 	cmp.w	sl, #0
 801fb4c:	d05f      	beq.n	801fc0e <udp_sendto_if_src+0xe2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fb4e:	f1bb 0f00 	cmp.w	fp, #0
 801fb52:	f000 8084 	beq.w	801fc5e <udp_sendto_if_src+0x132>
  if (pcb->local_port == 0) {
 801fb56:	8a42      	ldrh	r2, [r0, #18]
 801fb58:	4699      	mov	r9, r3
 801fb5a:	4604      	mov	r4, r0
 801fb5c:	b39a      	cbz	r2, 801fbc6 <udp_sendto_if_src+0x9a>
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fb5e:	892a      	ldrh	r2, [r5, #8]
 801fb60:	f64f 73f7 	movw	r3, #65527	; 0xfff7
 801fb64:	429a      	cmp	r2, r3
 801fb66:	d84f      	bhi.n	801fc08 <udp_sendto_if_src+0xdc>
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fb68:	2108      	movs	r1, #8
 801fb6a:	4628      	mov	r0, r5
 801fb6c:	f7fa fff0 	bl	801ab50 <pbuf_add_header>
 801fb70:	bb98      	cbnz	r0, 801fbda <udp_sendto_if_src+0xae>
 801fb72:	462e      	mov	r6, r5
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fb74:	8973      	ldrh	r3, [r6, #10]
 801fb76:	2b07      	cmp	r3, #7
 801fb78:	d93e      	bls.n	801fbf8 <udp_sendto_if_src+0xcc>
  udphdr = (struct udp_hdr *)q->payload;
 801fb7a:	6877      	ldr	r7, [r6, #4]
  udphdr->src = lwip_htons(pcb->local_port);
 801fb7c:	8a60      	ldrh	r0, [r4, #18]
 801fb7e:	f7f9 f86b 	bl	8018c58 <lwip_htons>
 801fb82:	8038      	strh	r0, [r7, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fb84:	4648      	mov	r0, r9
 801fb86:	f7f9 f867 	bl	8018c58 <lwip_htons>
  udphdr->chksum = 0x0000;
 801fb8a:	2300      	movs	r3, #0
  udphdr->dest = lwip_htons(dst_port);
 801fb8c:	8078      	strh	r0, [r7, #2]
  udphdr->chksum = 0x0000;
 801fb8e:	71bb      	strb	r3, [r7, #6]
 801fb90:	71fb      	strb	r3, [r7, #7]
    udphdr->len = lwip_htons(q->tot_len);
 801fb92:	8930      	ldrh	r0, [r6, #8]
 801fb94:	f7f9 f860 	bl	8018c58 <lwip_htons>
 801fb98:	80b8      	strh	r0, [r7, #4]
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fb9a:	f8cd b008 	str.w	fp, [sp, #8]
 801fb9e:	2011      	movs	r0, #17
 801fba0:	7aa3      	ldrb	r3, [r4, #10]
 801fba2:	4642      	mov	r2, r8
 801fba4:	4651      	mov	r1, sl
 801fba6:	9300      	str	r3, [sp, #0]
 801fba8:	7ae3      	ldrb	r3, [r4, #11]
 801fbaa:	9001      	str	r0, [sp, #4]
 801fbac:	4630      	mov	r0, r6
 801fbae:	f002 fdb9 	bl	8022724 <ip4_output_if_src>
  if (q != p) {
 801fbb2:	42ae      	cmp	r6, r5
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fbb4:	4607      	mov	r7, r0
  if (q != p) {
 801fbb6:	d002      	beq.n	801fbbe <udp_sendto_if_src+0x92>
    pbuf_free(q);
 801fbb8:	4630      	mov	r0, r6
 801fbba:	f7fb f889 	bl	801acd0 <pbuf_free>
}
 801fbbe:	4638      	mov	r0, r7
 801fbc0:	b005      	add	sp, #20
 801fbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fbc6:	4601      	mov	r1, r0
 801fbc8:	f7ff ff32 	bl	801fa30 <udp_bind>
    if (err != ERR_OK) {
 801fbcc:	4607      	mov	r7, r0
 801fbce:	2800      	cmp	r0, #0
 801fbd0:	d0c5      	beq.n	801fb5e <udp_sendto_if_src+0x32>
}
 801fbd2:	4638      	mov	r0, r7
 801fbd4:	b005      	add	sp, #20
 801fbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fbda:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fbde:	2108      	movs	r1, #8
 801fbe0:	2022      	movs	r0, #34	; 0x22
 801fbe2:	f7fa fea3 	bl	801a92c <pbuf_alloc>
    if (q == NULL) {
 801fbe6:	4606      	mov	r6, r0
 801fbe8:	b170      	cbz	r0, 801fc08 <udp_sendto_if_src+0xdc>
    if (p->tot_len != 0) {
 801fbea:	892b      	ldrh	r3, [r5, #8]
 801fbec:	2b00      	cmp	r3, #0
 801fbee:	d0c1      	beq.n	801fb74 <udp_sendto_if_src+0x48>
      pbuf_chain(q, p);
 801fbf0:	4629      	mov	r1, r5
 801fbf2:	f7fb f8db 	bl	801adac <pbuf_chain>
 801fbf6:	e7bd      	b.n	801fb74 <udp_sendto_if_src+0x48>
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fbf8:	4b1e      	ldr	r3, [pc, #120]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fbfa:	f240 320d 	movw	r2, #781	; 0x30d
 801fbfe:	491e      	ldr	r1, [pc, #120]	; (801fc78 <udp_sendto_if_src+0x14c>)
 801fc00:	481e      	ldr	r0, [pc, #120]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc02:	f005 f927 	bl	8024e54 <iprintf>
 801fc06:	e7b8      	b.n	801fb7a <udp_sendto_if_src+0x4e>
    return ERR_MEM;
 801fc08:	f04f 37ff 	mov.w	r7, #4294967295
 801fc0c:	e7d7      	b.n	801fbbe <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fc0e:	4b19      	ldr	r3, [pc, #100]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fc10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fc14:	491a      	ldr	r1, [pc, #104]	; (801fc80 <udp_sendto_if_src+0x154>)
 801fc16:	f06f 070f 	mvn.w	r7, #15
 801fc1a:	4818      	ldr	r0, [pc, #96]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc1c:	f005 f91a 	bl	8024e54 <iprintf>
 801fc20:	e7cd      	b.n	801fbbe <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fc22:	4b14      	ldr	r3, [pc, #80]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fc24:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fc28:	4916      	ldr	r1, [pc, #88]	; (801fc84 <udp_sendto_if_src+0x158>)
 801fc2a:	f06f 070f 	mvn.w	r7, #15
 801fc2e:	4813      	ldr	r0, [pc, #76]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc30:	f005 f910 	bl	8024e54 <iprintf>
 801fc34:	e7c3      	b.n	801fbbe <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fc36:	4b0f      	ldr	r3, [pc, #60]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fc38:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fc3c:	4912      	ldr	r1, [pc, #72]	; (801fc88 <udp_sendto_if_src+0x15c>)
 801fc3e:	f06f 070f 	mvn.w	r7, #15
 801fc42:	480e      	ldr	r0, [pc, #56]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc44:	f005 f906 	bl	8024e54 <iprintf>
 801fc48:	e7b9      	b.n	801fbbe <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc4a:	4b0a      	ldr	r3, [pc, #40]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fc4c:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fc50:	490e      	ldr	r1, [pc, #56]	; (801fc8c <udp_sendto_if_src+0x160>)
 801fc52:	f06f 070f 	mvn.w	r7, #15
 801fc56:	4809      	ldr	r0, [pc, #36]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc58:	f005 f8fc 	bl	8024e54 <iprintf>
 801fc5c:	e7af      	b.n	801fbbe <udp_sendto_if_src+0x92>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fc5e:	4b05      	ldr	r3, [pc, #20]	; (801fc74 <udp_sendto_if_src+0x148>)
 801fc60:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fc64:	490a      	ldr	r1, [pc, #40]	; (801fc90 <udp_sendto_if_src+0x164>)
 801fc66:	f06f 070f 	mvn.w	r7, #15
 801fc6a:	4804      	ldr	r0, [pc, #16]	; (801fc7c <udp_sendto_if_src+0x150>)
 801fc6c:	f005 f8f2 	bl	8024e54 <iprintf>
 801fc70:	e7a5      	b.n	801fbbe <udp_sendto_if_src+0x92>
 801fc72:	bf00      	nop
 801fc74:	080449a8 	.word	0x080449a8
 801fc78:	08044b14 	.word	0x08044b14
 801fc7c:	08029a64 	.word	0x08029a64
 801fc80:	08044acc 	.word	0x08044acc
 801fc84:	08044aa8 	.word	0x08044aa8
 801fc88:	08044a88 	.word	0x08044a88
 801fc8c:	08044a68 	.word	0x08044a68
 801fc90:	08044af0 	.word	0x08044af0

0801fc94 <udp_sendto_if>:
{
 801fc94:	b570      	push	{r4, r5, r6, lr}
 801fc96:	b082      	sub	sp, #8
 801fc98:	9c06      	ldr	r4, [sp, #24]
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc9a:	2800      	cmp	r0, #0
 801fc9c:	d036      	beq.n	801fd0c <udp_sendto_if+0x78>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fc9e:	b359      	cbz	r1, 801fcf8 <udp_sendto_if+0x64>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fca0:	b302      	cbz	r2, 801fce4 <udp_sendto_if+0x50>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fca2:	b1ac      	cbz	r4, 801fcd0 <udp_sendto_if+0x3c>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fca4:	6805      	ldr	r5, [r0, #0]
 801fca6:	b935      	cbnz	r5, 801fcb6 <udp_sendto_if+0x22>
      src_ip = netif_ip_addr4(netif);
 801fca8:	1d25      	adds	r5, r4, #4
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fcaa:	e9cd 4500 	strd	r4, r5, [sp]
 801fcae:	f7ff ff3d 	bl	801fb2c <udp_sendto_if_src>
}
 801fcb2:	b002      	add	sp, #8
 801fcb4:	bd70      	pop	{r4, r5, r6, pc}
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fcb6:	f005 0cf0 	and.w	ip, r5, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fcba:	f1bc 0fe0 	cmp.w	ip, #224	; 0xe0
 801fcbe:	d0f3      	beq.n	801fca8 <udp_sendto_if+0x14>
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fcc0:	6866      	ldr	r6, [r4, #4]
 801fcc2:	42b5      	cmp	r5, r6
 801fcc4:	d101      	bne.n	801fcca <udp_sendto_if+0x36>
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fcc6:	4605      	mov	r5, r0
 801fcc8:	e7ef      	b.n	801fcaa <udp_sendto_if+0x16>
        return ERR_RTE;
 801fcca:	f06f 0003 	mvn.w	r0, #3
 801fcce:	e7f0      	b.n	801fcb2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fcd0:	4b13      	ldr	r3, [pc, #76]	; (801fd20 <udp_sendto_if+0x8c>)
 801fcd2:	f240 2283 	movw	r2, #643	; 0x283
 801fcd6:	4913      	ldr	r1, [pc, #76]	; (801fd24 <udp_sendto_if+0x90>)
 801fcd8:	4813      	ldr	r0, [pc, #76]	; (801fd28 <udp_sendto_if+0x94>)
 801fcda:	f005 f8bb 	bl	8024e54 <iprintf>
 801fcde:	f06f 000f 	mvn.w	r0, #15
 801fce2:	e7e6      	b.n	801fcb2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fce4:	4b0e      	ldr	r3, [pc, #56]	; (801fd20 <udp_sendto_if+0x8c>)
 801fce6:	f240 2282 	movw	r2, #642	; 0x282
 801fcea:	4910      	ldr	r1, [pc, #64]	; (801fd2c <udp_sendto_if+0x98>)
 801fcec:	480e      	ldr	r0, [pc, #56]	; (801fd28 <udp_sendto_if+0x94>)
 801fcee:	f005 f8b1 	bl	8024e54 <iprintf>
 801fcf2:	f06f 000f 	mvn.w	r0, #15
 801fcf6:	e7dc      	b.n	801fcb2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fcf8:	4b09      	ldr	r3, [pc, #36]	; (801fd20 <udp_sendto_if+0x8c>)
 801fcfa:	f240 2281 	movw	r2, #641	; 0x281
 801fcfe:	490c      	ldr	r1, [pc, #48]	; (801fd30 <udp_sendto_if+0x9c>)
 801fd00:	4809      	ldr	r0, [pc, #36]	; (801fd28 <udp_sendto_if+0x94>)
 801fd02:	f005 f8a7 	bl	8024e54 <iprintf>
 801fd06:	f06f 000f 	mvn.w	r0, #15
 801fd0a:	e7d2      	b.n	801fcb2 <udp_sendto_if+0x1e>
  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd0c:	4b04      	ldr	r3, [pc, #16]	; (801fd20 <udp_sendto_if+0x8c>)
 801fd0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fd12:	4908      	ldr	r1, [pc, #32]	; (801fd34 <udp_sendto_if+0xa0>)
 801fd14:	4804      	ldr	r0, [pc, #16]	; (801fd28 <udp_sendto_if+0x94>)
 801fd16:	f005 f89d 	bl	8024e54 <iprintf>
 801fd1a:	f06f 000f 	mvn.w	r0, #15
 801fd1e:	e7c8      	b.n	801fcb2 <udp_sendto_if+0x1e>
 801fd20:	080449a8 	.word	0x080449a8
 801fd24:	08044b9c 	.word	0x08044b9c
 801fd28:	08029a64 	.word	0x08029a64
 801fd2c:	08044b7c 	.word	0x08044b7c
 801fd30:	08044b60 	.word	0x08044b60
 801fd34:	08044b44 	.word	0x08044b44

0801fd38 <udp_sendto>:
{
 801fd38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fd3c:	b082      	sub	sp, #8
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd3e:	b388      	cbz	r0, 801fda4 <udp_sendto+0x6c>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fd40:	460e      	mov	r6, r1
 801fd42:	b329      	cbz	r1, 801fd90 <udp_sendto+0x58>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fd44:	4615      	mov	r5, r2
 801fd46:	b1ca      	cbz	r2, 801fd7c <udp_sendto+0x44>
  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801fd48:	4604      	mov	r4, r0
 801fd4a:	7a00      	ldrb	r0, [r0, #8]
 801fd4c:	4698      	mov	r8, r3
 801fd4e:	b168      	cbz	r0, 801fd6c <udp_sendto+0x34>
    netif = netif_get_by_index(pcb->netif_idx);
 801fd50:	f7fa fc98 	bl	801a684 <netif_get_by_index>
 801fd54:	4607      	mov	r7, r0
  if (netif == NULL) {
 801fd56:	b177      	cbz	r7, 801fd76 <udp_sendto+0x3e>
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fd58:	4643      	mov	r3, r8
 801fd5a:	462a      	mov	r2, r5
 801fd5c:	4631      	mov	r1, r6
 801fd5e:	4620      	mov	r0, r4
 801fd60:	9700      	str	r7, [sp, #0]
 801fd62:	f7ff ff97 	bl	801fc94 <udp_sendto_if>
}
 801fd66:	b002      	add	sp, #8
 801fd68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fd6c:	4610      	mov	r0, r2
 801fd6e:	f002 fbab 	bl	80224c8 <ip4_route>
 801fd72:	4607      	mov	r7, r0
 801fd74:	e7ef      	b.n	801fd56 <udp_sendto+0x1e>
    return ERR_RTE;
 801fd76:	f06f 0003 	mvn.w	r0, #3
 801fd7a:	e7f4      	b.n	801fd66 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fd7c:	4b0e      	ldr	r3, [pc, #56]	; (801fdb8 <udp_sendto+0x80>)
 801fd7e:	f240 221a 	movw	r2, #538	; 0x21a
 801fd82:	490e      	ldr	r1, [pc, #56]	; (801fdbc <udp_sendto+0x84>)
 801fd84:	480e      	ldr	r0, [pc, #56]	; (801fdc0 <udp_sendto+0x88>)
 801fd86:	f005 f865 	bl	8024e54 <iprintf>
 801fd8a:	f06f 000f 	mvn.w	r0, #15
 801fd8e:	e7ea      	b.n	801fd66 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fd90:	4b09      	ldr	r3, [pc, #36]	; (801fdb8 <udp_sendto+0x80>)
 801fd92:	f240 2219 	movw	r2, #537	; 0x219
 801fd96:	490b      	ldr	r1, [pc, #44]	; (801fdc4 <udp_sendto+0x8c>)
 801fd98:	4809      	ldr	r0, [pc, #36]	; (801fdc0 <udp_sendto+0x88>)
 801fd9a:	f005 f85b 	bl	8024e54 <iprintf>
 801fd9e:	f06f 000f 	mvn.w	r0, #15
 801fda2:	e7e0      	b.n	801fd66 <udp_sendto+0x2e>
  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fda4:	4b04      	ldr	r3, [pc, #16]	; (801fdb8 <udp_sendto+0x80>)
 801fda6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fdaa:	4907      	ldr	r1, [pc, #28]	; (801fdc8 <udp_sendto+0x90>)
 801fdac:	4804      	ldr	r0, [pc, #16]	; (801fdc0 <udp_sendto+0x88>)
 801fdae:	f005 f851 	bl	8024e54 <iprintf>
 801fdb2:	f06f 000f 	mvn.w	r0, #15
 801fdb6:	e7d6      	b.n	801fd66 <udp_sendto+0x2e>
 801fdb8:	080449a8 	.word	0x080449a8
 801fdbc:	08044bf0 	.word	0x08044bf0
 801fdc0:	08029a64 	.word	0x08029a64
 801fdc4:	08044bd4 	.word	0x08044bd4
 801fdc8:	08044bbc 	.word	0x08044bbc

0801fdcc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fdcc:	b570      	push	{r4, r5, r6, lr}
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fdce:	b320      	cbz	r0, 801fe1a <udp_connect+0x4e>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fdd0:	460d      	mov	r5, r1
 801fdd2:	b361      	cbz	r1, 801fe2e <udp_connect+0x62>

  if (pcb->local_port == 0) {
 801fdd4:	4616      	mov	r6, r2
 801fdd6:	8a42      	ldrh	r2, [r0, #18]
 801fdd8:	4604      	mov	r4, r0
 801fdda:	b1c2      	cbz	r2, 801fe0e <udp_connect+0x42>
    if (err != ERR_OK) {
      return err;
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fddc:	682a      	ldr	r2, [r5, #0]
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fdde:	7c23      	ldrb	r3, [r4, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fde0:	4918      	ldr	r1, [pc, #96]	; (801fe44 <udp_connect+0x78>)
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fde2:	f043 0304 	orr.w	r3, r3, #4
  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801fde6:	6062      	str	r2, [r4, #4]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fde8:	680a      	ldr	r2, [r1, #0]
  pcb->remote_port = port;
 801fdea:	82a6      	strh	r6, [r4, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801fdec:	7423      	strb	r3, [r4, #16]
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fdee:	b142      	cbz	r2, 801fe02 <udp_connect+0x36>
    if (pcb == ipcb) {
 801fdf0:	4294      	cmp	r4, r2
 801fdf2:	d00a      	beq.n	801fe0a <udp_connect+0x3e>
 801fdf4:	4613      	mov	r3, r2
 801fdf6:	e001      	b.n	801fdfc <udp_connect+0x30>
 801fdf8:	429c      	cmp	r4, r3
 801fdfa:	d006      	beq.n	801fe0a <udp_connect+0x3e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fdfc:	68db      	ldr	r3, [r3, #12]
 801fdfe:	2b00      	cmp	r3, #0
 801fe00:	d1fa      	bne.n	801fdf8 <udp_connect+0x2c>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
  udp_pcbs = pcb;
  return ERR_OK;
 801fe02:	2000      	movs	r0, #0
  pcb->next = udp_pcbs;
 801fe04:	60e2      	str	r2, [r4, #12]
  udp_pcbs = pcb;
 801fe06:	600c      	str	r4, [r1, #0]
}
 801fe08:	bd70      	pop	{r4, r5, r6, pc}
      return ERR_OK;
 801fe0a:	2000      	movs	r0, #0
}
 801fe0c:	bd70      	pop	{r4, r5, r6, pc}
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fe0e:	4601      	mov	r1, r0
 801fe10:	f7ff fe0e 	bl	801fa30 <udp_bind>
    if (err != ERR_OK) {
 801fe14:	2800      	cmp	r0, #0
 801fe16:	d0e1      	beq.n	801fddc <udp_connect+0x10>
}
 801fe18:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe1a:	4b0b      	ldr	r3, [pc, #44]	; (801fe48 <udp_connect+0x7c>)
 801fe1c:	f240 4235 	movw	r2, #1077	; 0x435
 801fe20:	490a      	ldr	r1, [pc, #40]	; (801fe4c <udp_connect+0x80>)
 801fe22:	480b      	ldr	r0, [pc, #44]	; (801fe50 <udp_connect+0x84>)
 801fe24:	f005 f816 	bl	8024e54 <iprintf>
 801fe28:	f06f 000f 	mvn.w	r0, #15
}
 801fe2c:	bd70      	pop	{r4, r5, r6, pc}
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801fe2e:	4b06      	ldr	r3, [pc, #24]	; (801fe48 <udp_connect+0x7c>)
 801fe30:	f240 4236 	movw	r2, #1078	; 0x436
 801fe34:	4907      	ldr	r1, [pc, #28]	; (801fe54 <udp_connect+0x88>)
 801fe36:	4806      	ldr	r0, [pc, #24]	; (801fe50 <udp_connect+0x84>)
 801fe38:	f005 f80c 	bl	8024e54 <iprintf>
 801fe3c:	f06f 000f 	mvn.w	r0, #15
}
 801fe40:	bd70      	pop	{r4, r5, r6, pc}
 801fe42:	bf00      	nop
 801fe44:	2002e3f4 	.word	0x2002e3f4
 801fe48:	080449a8 	.word	0x080449a8
 801fe4c:	08044c0c 	.word	0x08044c0c
 801fe50:	08029a64 	.word	0x08029a64
 801fe54:	08044c28 	.word	0x08044c28

0801fe58 <udp_recv>:
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fe58:	b110      	cbz	r0, 801fe60 <udp_recv+0x8>

  /* remember recv() callback and user data */
  pcb->recv = recv;
  pcb->recv_arg = recv_arg;
 801fe5a:	e9c0 1206 	strd	r1, r2, [r0, #24]
}
 801fe5e:	4770      	bx	lr
  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fe60:	4b03      	ldr	r3, [pc, #12]	; (801fe70 <udp_recv+0x18>)
 801fe62:	f240 428a 	movw	r2, #1162	; 0x48a
 801fe66:	4903      	ldr	r1, [pc, #12]	; (801fe74 <udp_recv+0x1c>)
 801fe68:	4803      	ldr	r0, [pc, #12]	; (801fe78 <udp_recv+0x20>)
 801fe6a:	f004 bff3 	b.w	8024e54 <iprintf>
 801fe6e:	bf00      	nop
 801fe70:	080449a8 	.word	0x080449a8
 801fe74:	08044c44 	.word	0x08044c44
 801fe78:	08029a64 	.word	0x08029a64

0801fe7c <udp_remove>:
{
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fe7c:	4601      	mov	r1, r0
 801fe7e:	b1c0      	cbz	r0, 801feb2 <udp_remove+0x36>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fe80:	4b0f      	ldr	r3, [pc, #60]	; (801fec0 <udp_remove+0x44>)
 801fe82:	681a      	ldr	r2, [r3, #0]
 801fe84:	4282      	cmp	r2, r0
 801fe86:	d00a      	beq.n	801fe9e <udp_remove+0x22>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fe88:	b132      	cbz	r2, 801fe98 <udp_remove+0x1c>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fe8a:	68d3      	ldr	r3, [r2, #12]
 801fe8c:	428b      	cmp	r3, r1
 801fe8e:	d100      	bne.n	801fe92 <udp_remove+0x16>
 801fe90:	b953      	cbnz	r3, 801fea8 <udp_remove+0x2c>
 801fe92:	461a      	mov	r2, r3
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fe94:	2a00      	cmp	r2, #0
 801fe96:	d1f8      	bne.n	801fe8a <udp_remove+0xe>
        pcb2->next = pcb->next;
        break;
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fe98:	2001      	movs	r0, #1
 801fe9a:	f7fa ba01 	b.w	801a2a0 <memp_free>
    udp_pcbs = udp_pcbs->next;
 801fe9e:	68c2      	ldr	r2, [r0, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801fea0:	2001      	movs	r0, #1
    udp_pcbs = udp_pcbs->next;
 801fea2:	601a      	str	r2, [r3, #0]
  memp_free(MEMP_UDP_PCB, pcb);
 801fea4:	f7fa b9fc 	b.w	801a2a0 <memp_free>
        pcb2->next = pcb->next;
 801fea8:	68cb      	ldr	r3, [r1, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801feaa:	2001      	movs	r0, #1
        pcb2->next = pcb->next;
 801feac:	60d3      	str	r3, [r2, #12]
  memp_free(MEMP_UDP_PCB, pcb);
 801feae:	f7fa b9f7 	b.w	801a2a0 <memp_free>
  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801feb2:	4b04      	ldr	r3, [pc, #16]	; (801fec4 <udp_remove+0x48>)
 801feb4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801feb8:	4903      	ldr	r1, [pc, #12]	; (801fec8 <udp_remove+0x4c>)
 801feba:	4804      	ldr	r0, [pc, #16]	; (801fecc <udp_remove+0x50>)
 801febc:	f004 bfca 	b.w	8024e54 <iprintf>
 801fec0:	2002e3f4 	.word	0x2002e3f4
 801fec4:	080449a8 	.word	0x080449a8
 801fec8:	08044c5c 	.word	0x08044c5c
 801fecc:	08029a64 	.word	0x08029a64

0801fed0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fed0:	b510      	push	{r4, lr}
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fed2:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801fed6:	4907      	ldr	r1, [pc, #28]	; (801fef4 <udp_new+0x24>)
 801fed8:	2001      	movs	r0, #1
 801feda:	f7fa f9ab 	bl	801a234 <memp_malloc_fn>
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fede:	4604      	mov	r4, r0
 801fee0:	b128      	cbz	r0, 801feee <udp_new+0x1e>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fee2:	2220      	movs	r2, #32
 801fee4:	2100      	movs	r1, #0
 801fee6:	f004 f817 	bl	8023f18 <memset>
    pcb->ttl = UDP_TTL;
 801feea:	23ff      	movs	r3, #255	; 0xff
 801feec:	72e3      	strb	r3, [r4, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
}
 801feee:	4620      	mov	r0, r4
 801fef0:	bd10      	pop	{r4, pc}
 801fef2:	bf00      	nop
 801fef4:	080449a8 	.word	0x080449a8

0801fef8 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801fef8:	b510      	push	{r4, lr}
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fefa:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801fefe:	4907      	ldr	r1, [pc, #28]	; (801ff1c <udp_new_ip_type+0x24>)
 801ff00:	2001      	movs	r0, #1
 801ff02:	f7fa f997 	bl	801a234 <memp_malloc_fn>
  if (pcb != NULL) {
 801ff06:	4604      	mov	r4, r0
 801ff08:	b128      	cbz	r0, 801ff16 <udp_new_ip_type+0x1e>
    memset(pcb, 0, sizeof(struct udp_pcb));
 801ff0a:	2220      	movs	r2, #32
 801ff0c:	2100      	movs	r1, #0
 801ff0e:	f004 f803 	bl	8023f18 <memset>
    pcb->ttl = UDP_TTL;
 801ff12:	23ff      	movs	r3, #255	; 0xff
 801ff14:	72e3      	strb	r3, [r4, #11]
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
}
 801ff16:	4620      	mov	r0, r4
 801ff18:	bd10      	pop	{r4, pc}
 801ff1a:	bf00      	nop
 801ff1c:	080449a8 	.word	0x080449a8

0801ff20 <udp_netif_ip_addr_changed>:
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801ff20:	b110      	cbz	r0, 801ff28 <udp_netif_ip_addr_changed+0x8>
 801ff22:	6802      	ldr	r2, [r0, #0]
 801ff24:	b101      	cbz	r1, 801ff28 <udp_netif_ip_addr_changed+0x8>
 801ff26:	b902      	cbnz	r2, 801ff2a <udp_netif_ip_addr_changed+0xa>
 801ff28:	4770      	bx	lr
 801ff2a:	680b      	ldr	r3, [r1, #0]
 801ff2c:	2b00      	cmp	r3, #0
 801ff2e:	d0fb      	beq.n	801ff28 <udp_netif_ip_addr_changed+0x8>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ff30:	4b08      	ldr	r3, [pc, #32]	; (801ff54 <udp_netif_ip_addr_changed+0x34>)
 801ff32:	681b      	ldr	r3, [r3, #0]
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	d0f7      	beq.n	801ff28 <udp_netif_ip_addr_changed+0x8>
{
 801ff38:	b410      	push	{r4}
 801ff3a:	e000      	b.n	801ff3e <udp_netif_ip_addr_changed+0x1e>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801ff3c:	6802      	ldr	r2, [r0, #0]
 801ff3e:	681c      	ldr	r4, [r3, #0]
 801ff40:	4294      	cmp	r4, r2
 801ff42:	d101      	bne.n	801ff48 <udp_netif_ip_addr_changed+0x28>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801ff44:	680a      	ldr	r2, [r1, #0]
 801ff46:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801ff48:	68db      	ldr	r3, [r3, #12]
 801ff4a:	2b00      	cmp	r3, #0
 801ff4c:	d1f6      	bne.n	801ff3c <udp_netif_ip_addr_changed+0x1c>
      }
    }
  }
}
 801ff4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ff52:	4770      	bx	lr
 801ff54:	2002e3f4 	.word	0x2002e3f4

0801ff58 <dhcp_option_long>:
  return options_out_len;
}

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801ff58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ff5a:	1d07      	adds	r7, r0, #4
{
 801ff5c:	4604      	mov	r4, r0
 801ff5e:	460d      	mov	r5, r1
 801ff60:	4616      	mov	r6, r2
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ff62:	2f44      	cmp	r7, #68	; 0x44
 801ff64:	d80e      	bhi.n	801ff84 <dhcp_option_long+0x2c>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ff66:	0e33      	lsrs	r3, r6, #24
 801ff68:	1c62      	adds	r2, r4, #1
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ff6a:	0c31      	lsrs	r1, r6, #16
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801ff6c:	552b      	strb	r3, [r5, r4]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ff6e:	b292      	uxth	r2, r2
 801ff70:	1ca3      	adds	r3, r4, #2
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ff72:	3403      	adds	r4, #3
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801ff74:	54a9      	strb	r1, [r5, r2]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ff76:	0a32      	lsrs	r2, r6, #8
 801ff78:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ff7a:	b2a4      	uxth	r4, r4
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801ff7c:	54ea      	strb	r2, [r5, r3]
  return options_out_len;
}
 801ff7e:	b2b8      	uxth	r0, r7
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801ff80:	552e      	strb	r6, [r5, r4]
}
 801ff82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801ff84:	4b03      	ldr	r3, [pc, #12]	; (801ff94 <dhcp_option_long+0x3c>)
 801ff86:	f240 52b7 	movw	r2, #1463	; 0x5b7
 801ff8a:	4903      	ldr	r1, [pc, #12]	; (801ff98 <dhcp_option_long+0x40>)
 801ff8c:	4803      	ldr	r0, [pc, #12]	; (801ff9c <dhcp_option_long+0x44>)
 801ff8e:	f004 ff61 	bl	8024e54 <iprintf>
 801ff92:	e7e8      	b.n	801ff66 <dhcp_option_long+0xe>
 801ff94:	08044c74 	.word	0x08044c74
 801ff98:	08044cac 	.word	0x08044cac
 801ff9c:	08029a64 	.word	0x08029a64

0801ffa0 <dhcp_check>:
{
 801ffa0:	b510      	push	{r4, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801ffa2:	6a84      	ldr	r4, [r0, #40]	; 0x28
  if (new_state != dhcp->state) {
 801ffa4:	7963      	ldrb	r3, [r4, #5]
 801ffa6:	2b08      	cmp	r3, #8
 801ffa8:	d004      	beq.n	801ffb4 <dhcp_check+0x14>
    dhcp->tries = 0;
 801ffaa:	2300      	movs	r3, #0
    dhcp->state = new_state;
 801ffac:	2208      	movs	r2, #8
    dhcp->tries = 0;
 801ffae:	71a3      	strb	r3, [r4, #6]
    dhcp->state = new_state;
 801ffb0:	7162      	strb	r2, [r4, #5]
    dhcp->request_timeout = 0;
 801ffb2:	8123      	strh	r3, [r4, #8]
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801ffb4:	2200      	movs	r2, #0
 801ffb6:	f104 011c 	add.w	r1, r4, #28
 801ffba:	f001 ffab 	bl	8021f14 <etharp_query>
  if (dhcp->tries < 255) {
 801ffbe:	79a3      	ldrb	r3, [r4, #6]
 801ffc0:	2bff      	cmp	r3, #255	; 0xff
 801ffc2:	d001      	beq.n	801ffc8 <dhcp_check+0x28>
    dhcp->tries++;
 801ffc4:	3301      	adds	r3, #1
 801ffc6:	71a3      	strb	r3, [r4, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801ffc8:	2301      	movs	r3, #1
 801ffca:	8123      	strh	r3, [r4, #8]
}
 801ffcc:	bd10      	pop	{r4, pc}
 801ffce:	bf00      	nop

0801ffd0 <dhcp_bind>:
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801ffd0:	2800      	cmp	r0, #0
 801ffd2:	f000 808e 	beq.w	80200f2 <dhcp_bind+0x122>
  dhcp = netif_dhcp_data(netif);
 801ffd6:	6a81      	ldr	r1, [r0, #40]	; 0x28
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801ffd8:	2900      	cmp	r1, #0
 801ffda:	f000 8091 	beq.w	8020100 <dhcp_bind+0x130>
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ffde:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  dhcp->lease_used = 0;
 801ffe0:	2200      	movs	r2, #0
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ffe2:	f1b3 3fff 	cmp.w	r3, #4294967295
{
 801ffe6:	b500      	push	{lr}
  dhcp->lease_used = 0;
 801ffe8:	824a      	strh	r2, [r1, #18]
{
 801ffea:	b083      	sub	sp, #12
  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801ffec:	d00e      	beq.n	802000c <dhcp_bind+0x3c>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801ffee:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 801fff0:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 801fff4:	d258      	bcs.n	80200a8 <dhcp_bind+0xd8>
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fff6:	f1a2 3277 	sub.w	r2, r2, #2004318071	; 0x77777777
    if (dhcp->t0_timeout == 0) {
 801fffa:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801fffc:	fba2 c203 	umull	ip, r2, r2, r3
    dhcp->t0_timeout = (u16_t)timeout;
 8020000:	f3c2 124f 	ubfx	r2, r2, #5, #16
    if (dhcp->t0_timeout == 0) {
 8020004:	f200 8083 	bhi.w	802010e <dhcp_bind+0x13e>
      dhcp->t0_timeout = 1;
 8020008:	2301      	movs	r3, #1
 802000a:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 802000c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 802000e:	1c5a      	adds	r2, r3, #1
 8020010:	d050      	beq.n	80200b4 <dhcp_bind+0xe4>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020012:	331e      	adds	r3, #30
    if (timeout > 0xffff) {
 8020014:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8020018:	d241      	bcs.n	802009e <dhcp_bind+0xce>
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802001a:	4a40      	ldr	r2, [pc, #256]	; (802011c <dhcp_bind+0x14c>)
    if (dhcp->t1_timeout == 0) {
 802001c:	2b3b      	cmp	r3, #59	; 0x3b
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 802001e:	fba2 2c03 	umull	r2, ip, r2, r3
    dhcp->t1_timeout = (u16_t)timeout;
 8020022:	f3cc 1c4f 	ubfx	ip, ip, #5, #16
    if (dhcp->t1_timeout == 0) {
 8020026:	d874      	bhi.n	8020112 <dhcp_bind+0x142>
      dhcp->t1_timeout = 1;
 8020028:	2301      	movs	r3, #1
 802002a:	469c      	mov	ip, r3
 802002c:	814b      	strh	r3, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 802002e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8020030:	f8a1 c00e 	strh.w	ip, [r1, #14]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8020034:	1c53      	adds	r3, r2, #1
 8020036:	d042      	beq.n	80200be <dhcp_bind+0xee>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020038:	321e      	adds	r2, #30
    if (timeout > 0xffff) {
 802003a:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 802003e:	d24b      	bcs.n	80200d8 <dhcp_bind+0x108>
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020040:	4b36      	ldr	r3, [pc, #216]	; (802011c <dhcp_bind+0x14c>)
    if (dhcp->t2_timeout == 0) {
 8020042:	2a3b      	cmp	r2, #59	; 0x3b
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8020044:	fba3 e302 	umull	lr, r3, r3, r2
    dhcp->t2_timeout = (u16_t)timeout;
 8020048:	f3c3 134f 	ubfx	r3, r3, #5, #16
    if (dhcp->t2_timeout == 0) {
 802004c:	d864      	bhi.n	8020118 <dhcp_bind+0x148>
      dhcp->t2_timeout = 1;
 802004e:	2201      	movs	r2, #1
 8020050:	4613      	mov	r3, r2
 8020052:	818a      	strh	r2, [r1, #12]
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8020054:	2201      	movs	r2, #1
 8020056:	820b      	strh	r3, [r1, #16]
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8020058:	459c      	cmp	ip, r3
 802005a:	d302      	bcc.n	8020062 <dhcp_bind+0x92>
 802005c:	b10a      	cbz	r2, 8020062 <dhcp_bind+0x92>
    dhcp->t1_timeout = 0;
 802005e:	2300      	movs	r3, #0
 8020060:	814b      	strh	r3, [r1, #10]
  if (dhcp->subnet_mask_given) {
 8020062:	79cb      	ldrb	r3, [r1, #7]
 8020064:	2b00      	cmp	r3, #0
 8020066:	d02f      	beq.n	80200c8 <dhcp_bind+0xf8>
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8020068:	6a0b      	ldr	r3, [r1, #32]
 802006a:	9300      	str	r3, [sp, #0]
  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 802006c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 802006e:	9301      	str	r3, [sp, #4]
  if (ip4_addr_isany_val(gw_addr)) {
 8020070:	b92b      	cbnz	r3, 802007e <dhcp_bind+0xae>
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8020072:	69cb      	ldr	r3, [r1, #28]
 8020074:	9a00      	ldr	r2, [sp, #0]
 8020076:	4013      	ands	r3, r2
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8020078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 802007c:	9301      	str	r3, [sp, #4]
  if (new_state != dhcp->state) {
 802007e:	794b      	ldrb	r3, [r1, #5]
 8020080:	2b0a      	cmp	r3, #10
 8020082:	d004      	beq.n	802008e <dhcp_bind+0xbe>
    dhcp->tries = 0;
 8020084:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020086:	220a      	movs	r2, #10
    dhcp->tries = 0;
 8020088:	718b      	strb	r3, [r1, #6]
    dhcp->state = new_state;
 802008a:	714a      	strb	r2, [r1, #5]
    dhcp->request_timeout = 0;
 802008c:	810b      	strh	r3, [r1, #8]
  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 802008e:	ab01      	add	r3, sp, #4
 8020090:	466a      	mov	r2, sp
 8020092:	311c      	adds	r1, #28
 8020094:	f7fa f982 	bl	801a39c <netif_set_addr>
}
 8020098:	b003      	add	sp, #12
 802009a:	f85d fb04 	ldr.w	pc, [sp], #4
    dhcp->t1_timeout = (u16_t)timeout;
 802009e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80200a2:	469c      	mov	ip, r3
 80200a4:	814b      	strh	r3, [r1, #10]
    if (dhcp->t1_timeout == 0) {
 80200a6:	e7c2      	b.n	802002e <dhcp_bind+0x5e>
    dhcp->t0_timeout = (u16_t)timeout;
 80200a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80200ac:	828b      	strh	r3, [r1, #20]
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80200ae:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80200b0:	1c5a      	adds	r2, r3, #1
 80200b2:	d1ae      	bne.n	8020012 <dhcp_bind+0x42>
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80200b4:	6b0a      	ldr	r2, [r1, #48]	; 0x30
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80200b6:	f8b1 c00a 	ldrh.w	ip, [r1, #10]
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80200ba:	1c53      	adds	r3, r2, #1
 80200bc:	d1bc      	bne.n	8020038 <dhcp_bind+0x68>
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80200be:	898b      	ldrh	r3, [r1, #12]
 80200c0:	1e1a      	subs	r2, r3, #0
 80200c2:	bf18      	it	ne
 80200c4:	2201      	movne	r2, #1
 80200c6:	e7c7      	b.n	8020058 <dhcp_bind+0x88>
    if (first_octet <= 127) {
 80200c8:	f991 301c 	ldrsb.w	r3, [r1, #28]
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80200cc:	7f0a      	ldrb	r2, [r1, #28]
    if (first_octet <= 127) {
 80200ce:	2b00      	cmp	r3, #0
 80200d0:	db07      	blt.n	80200e2 <dhcp_bind+0x112>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80200d2:	23ff      	movs	r3, #255	; 0xff
 80200d4:	9300      	str	r3, [sp, #0]
 80200d6:	e7c9      	b.n	802006c <dhcp_bind+0x9c>
    dhcp->t2_timeout = (u16_t)timeout;
 80200d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80200dc:	4613      	mov	r3, r2
 80200de:	818a      	strh	r2, [r1, #12]
    if (dhcp->t2_timeout == 0) {
 80200e0:	e7b8      	b.n	8020054 <dhcp_bind+0x84>
    } else if (first_octet >= 192) {
 80200e2:	2abf      	cmp	r2, #191	; 0xbf
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80200e4:	bf8c      	ite	hi
 80200e6:	f06f 437f 	mvnhi.w	r3, #4278190080	; 0xff000000
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80200ea:	f64f 73ff 	movwls	r3, #65535	; 0xffff
 80200ee:	9300      	str	r3, [sp, #0]
 80200f0:	e7bc      	b.n	802006c <dhcp_bind+0x9c>
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80200f2:	4b0b      	ldr	r3, [pc, #44]	; (8020120 <dhcp_bind+0x150>)
 80200f4:	f240 4215 	movw	r2, #1045	; 0x415
 80200f8:	490a      	ldr	r1, [pc, #40]	; (8020124 <dhcp_bind+0x154>)
 80200fa:	480b      	ldr	r0, [pc, #44]	; (8020128 <dhcp_bind+0x158>)
 80200fc:	f004 beaa 	b.w	8024e54 <iprintf>
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8020100:	4b07      	ldr	r3, [pc, #28]	; (8020120 <dhcp_bind+0x150>)
 8020102:	f240 4217 	movw	r2, #1047	; 0x417
 8020106:	4909      	ldr	r1, [pc, #36]	; (802012c <dhcp_bind+0x15c>)
 8020108:	4807      	ldr	r0, [pc, #28]	; (8020128 <dhcp_bind+0x158>)
 802010a:	f004 bea3 	b.w	8024e54 <iprintf>
    dhcp->t0_timeout = (u16_t)timeout;
 802010e:	828a      	strh	r2, [r1, #20]
 8020110:	e77c      	b.n	802000c <dhcp_bind+0x3c>
    dhcp->t1_timeout = (u16_t)timeout;
 8020112:	f8a1 c00a 	strh.w	ip, [r1, #10]
 8020116:	e78a      	b.n	802002e <dhcp_bind+0x5e>
    dhcp->t2_timeout = (u16_t)timeout;
 8020118:	818b      	strh	r3, [r1, #12]
 802011a:	e79b      	b.n	8020054 <dhcp_bind+0x84>
 802011c:	88888889 	.word	0x88888889
 8020120:	08044c74 	.word	0x08044c74
 8020124:	08044ce8 	.word	0x08044ce8
 8020128:	08029a64 	.word	0x08029a64
 802012c:	08044d04 	.word	0x08044d04

08020130 <dhcp_inc_pcb_refcount>:
{
 8020130:	b538      	push	{r3, r4, r5, lr}
  if (dhcp_pcb_refcount == 0) {
 8020132:	4c15      	ldr	r4, [pc, #84]	; (8020188 <dhcp_inc_pcb_refcount+0x58>)
 8020134:	7823      	ldrb	r3, [r4, #0]
 8020136:	b9fb      	cbnz	r3, 8020178 <dhcp_inc_pcb_refcount+0x48>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8020138:	4d14      	ldr	r5, [pc, #80]	; (802018c <dhcp_inc_pcb_refcount+0x5c>)
 802013a:	682b      	ldr	r3, [r5, #0]
 802013c:	b12b      	cbz	r3, 802014a <dhcp_inc_pcb_refcount+0x1a>
 802013e:	4b14      	ldr	r3, [pc, #80]	; (8020190 <dhcp_inc_pcb_refcount+0x60>)
 8020140:	22e5      	movs	r2, #229	; 0xe5
 8020142:	4914      	ldr	r1, [pc, #80]	; (8020194 <dhcp_inc_pcb_refcount+0x64>)
 8020144:	4814      	ldr	r0, [pc, #80]	; (8020198 <dhcp_inc_pcb_refcount+0x68>)
 8020146:	f004 fe85 	bl	8024e54 <iprintf>
    dhcp_pcb = udp_new();
 802014a:	f7ff fec1 	bl	801fed0 <udp_new>
 802014e:	6028      	str	r0, [r5, #0]
    if (dhcp_pcb == NULL) {
 8020150:	b1b0      	cbz	r0, 8020180 <dhcp_inc_pcb_refcount+0x50>
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8020152:	7a42      	ldrb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8020154:	4911      	ldr	r1, [pc, #68]	; (802019c <dhcp_inc_pcb_refcount+0x6c>)
    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8020156:	f042 0220 	orr.w	r2, r2, #32
 802015a:	7242      	strb	r2, [r0, #9]
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 802015c:	2244      	movs	r2, #68	; 0x44
 802015e:	f7ff fc67 	bl	801fa30 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8020162:	2243      	movs	r2, #67	; 0x43
 8020164:	490d      	ldr	r1, [pc, #52]	; (802019c <dhcp_inc_pcb_refcount+0x6c>)
 8020166:	6828      	ldr	r0, [r5, #0]
 8020168:	f7ff fe30 	bl	801fdcc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 802016c:	2200      	movs	r2, #0
 802016e:	490c      	ldr	r1, [pc, #48]	; (80201a0 <dhcp_inc_pcb_refcount+0x70>)
 8020170:	6828      	ldr	r0, [r5, #0]
 8020172:	f7ff fe71 	bl	801fe58 <udp_recv>
  dhcp_pcb_refcount++;
 8020176:	7823      	ldrb	r3, [r4, #0]
 8020178:	3301      	adds	r3, #1
  return ERR_OK;
 802017a:	2000      	movs	r0, #0
  dhcp_pcb_refcount++;
 802017c:	7023      	strb	r3, [r4, #0]
}
 802017e:	bd38      	pop	{r3, r4, r5, pc}
      return ERR_MEM;
 8020180:	f04f 30ff 	mov.w	r0, #4294967295
}
 8020184:	bd38      	pop	{r3, r4, r5, pc}
 8020186:	bf00      	nop
 8020188:	2002e3fc 	.word	0x2002e3fc
 802018c:	2002e3f8 	.word	0x2002e3f8
 8020190:	08044c74 	.word	0x08044c74
 8020194:	08044d1c 	.word	0x08044d1c
 8020198:	08029a64 	.word	0x08029a64
 802019c:	08045328 	.word	0x08045328
 80201a0:	08020a49 	.word	0x08020a49

080201a4 <dhcp_dec_pcb_refcount>:
{
 80201a4:	b538      	push	{r3, r4, r5, lr}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80201a6:	4d0b      	ldr	r5, [pc, #44]	; (80201d4 <dhcp_dec_pcb_refcount+0x30>)
 80201a8:	782c      	ldrb	r4, [r5, #0]
 80201aa:	b154      	cbz	r4, 80201c2 <dhcp_dec_pcb_refcount+0x1e>
  dhcp_pcb_refcount--;
 80201ac:	3c01      	subs	r4, #1
 80201ae:	b2e4      	uxtb	r4, r4
 80201b0:	702c      	strb	r4, [r5, #0]
  if (dhcp_pcb_refcount == 0) {
 80201b2:	b104      	cbz	r4, 80201b6 <dhcp_dec_pcb_refcount+0x12>
}
 80201b4:	bd38      	pop	{r3, r4, r5, pc}
    udp_remove(dhcp_pcb);
 80201b6:	4d08      	ldr	r5, [pc, #32]	; (80201d8 <dhcp_dec_pcb_refcount+0x34>)
 80201b8:	6828      	ldr	r0, [r5, #0]
 80201ba:	f7ff fe5f 	bl	801fe7c <udp_remove>
    dhcp_pcb = NULL;
 80201be:	602c      	str	r4, [r5, #0]
}
 80201c0:	bd38      	pop	{r3, r4, r5, pc}
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80201c2:	4b06      	ldr	r3, [pc, #24]	; (80201dc <dhcp_dec_pcb_refcount+0x38>)
 80201c4:	22ff      	movs	r2, #255	; 0xff
 80201c6:	4906      	ldr	r1, [pc, #24]	; (80201e0 <dhcp_dec_pcb_refcount+0x3c>)
 80201c8:	4806      	ldr	r0, [pc, #24]	; (80201e4 <dhcp_dec_pcb_refcount+0x40>)
 80201ca:	f004 fe43 	bl	8024e54 <iprintf>
  dhcp_pcb_refcount--;
 80201ce:	782c      	ldrb	r4, [r5, #0]
 80201d0:	e7ec      	b.n	80201ac <dhcp_dec_pcb_refcount+0x8>
 80201d2:	bf00      	nop
 80201d4:	2002e3fc 	.word	0x2002e3fc
 80201d8:	2002e3f8 	.word	0x2002e3f8
 80201dc:	08044c74 	.word	0x08044c74
 80201e0:	08044d44 	.word	0x08044d44
 80201e4:	08029a64 	.word	0x08029a64

080201e8 <dhcp_handle_ack.isra.0>:
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80201e8:	b530      	push	{r4, r5, lr}
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80201ea:	4d29      	ldr	r5, [pc, #164]	; (8020290 <dhcp_handle_ack.isra.0+0xa8>)
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80201ec:	2300      	movs	r3, #0
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
 80201ee:	b083      	sub	sp, #12
 80201f0:	4604      	mov	r4, r0
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80201f2:	78ea      	ldrb	r2, [r5, #3]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80201f4:	e9c0 3308 	strd	r3, r3, [r0, #32]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80201f8:	b112      	cbz	r2, 8020200 <dhcp_handle_ack.isra.0+0x18>
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80201fa:	4b26      	ldr	r3, [pc, #152]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 80201fc:	68db      	ldr	r3, [r3, #12]
 80201fe:	6283      	str	r3, [r0, #40]	; 0x28
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8020200:	792b      	ldrb	r3, [r5, #4]
 8020202:	2b00      	cmp	r3, #0
 8020204:	d041      	beq.n	802028a <dhcp_handle_ack.isra.0+0xa2>
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8020206:	4b23      	ldr	r3, [pc, #140]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 8020208:	691b      	ldr	r3, [r3, #16]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 802020a:	796a      	ldrb	r2, [r5, #5]
 802020c:	62e3      	str	r3, [r4, #44]	; 0x2c
 802020e:	b312      	cbz	r2, 8020256 <dhcp_handle_ack.isra.0+0x6e>
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8020210:	4b20      	ldr	r3, [pc, #128]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 8020212:	695b      	ldr	r3, [r3, #20]
 8020214:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020216:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020218:	690a      	ldr	r2, [r1, #16]
 802021a:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 802021c:	bb2b      	cbnz	r3, 802026a <dhcp_handle_ack.isra.0+0x82>
    dhcp->subnet_mask_given = 0;
 802021e:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020220:	79eb      	ldrb	r3, [r5, #7]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d12b      	bne.n	802027e <dhcp_handle_ack.isra.0+0x96>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8020226:	7a2b      	ldrb	r3, [r5, #8]
 8020228:	b19b      	cbz	r3, 8020252 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802022a:	4c1a      	ldr	r4, [pc, #104]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 802022c:	6a20      	ldr	r0, [r4, #32]
 802022e:	f7f8 fd17 	bl	8018c60 <lwip_htonl>
    dns_setserver(n, &dns_addr);
 8020232:	a901      	add	r1, sp, #4
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020234:	9001      	str	r0, [sp, #4]
    dns_setserver(n, &dns_addr);
 8020236:	2000      	movs	r0, #0
 8020238:	f7f9 f8b8 	bl	80193ac <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 802023c:	7a6b      	ldrb	r3, [r5, #9]
 802023e:	b143      	cbz	r3, 8020252 <dhcp_handle_ack.isra.0+0x6a>
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8020240:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020242:	f7f8 fd0d 	bl	8018c60 <lwip_htonl>
 8020246:	4603      	mov	r3, r0
    dns_setserver(n, &dns_addr);
 8020248:	a901      	add	r1, sp, #4
 802024a:	2001      	movs	r0, #1
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 802024c:	9301      	str	r3, [sp, #4]
    dns_setserver(n, &dns_addr);
 802024e:	f7f9 f8ad 	bl	80193ac <dns_setserver>
}
 8020252:	b003      	add	sp, #12
 8020254:	bd30      	pop	{r4, r5, pc}
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8020256:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8020258:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802025c:	08db      	lsrs	r3, r3, #3
 802025e:	6323      	str	r3, [r4, #48]	; 0x30
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020260:	79ab      	ldrb	r3, [r5, #6]
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8020262:	690a      	ldr	r2, [r1, #16]
 8020264:	61e2      	str	r2, [r4, #28]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8020266:	2b00      	cmp	r3, #0
 8020268:	d0d9      	beq.n	802021e <dhcp_handle_ack.isra.0+0x36>
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 802026a:	4b0a      	ldr	r3, [pc, #40]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 802026c:	6998      	ldr	r0, [r3, #24]
 802026e:	f7f8 fcf7 	bl	8018c60 <lwip_htonl>
    dhcp->subnet_mask_given = 1;
 8020272:	2301      	movs	r3, #1
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8020274:	6220      	str	r0, [r4, #32]
    dhcp->subnet_mask_given = 1;
 8020276:	71e3      	strb	r3, [r4, #7]
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8020278:	79eb      	ldrb	r3, [r5, #7]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d0d3      	beq.n	8020226 <dhcp_handle_ack.isra.0+0x3e>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 802027e:	4b05      	ldr	r3, [pc, #20]	; (8020294 <dhcp_handle_ack.isra.0+0xac>)
 8020280:	69d8      	ldr	r0, [r3, #28]
 8020282:	f7f8 fced 	bl	8018c60 <lwip_htonl>
 8020286:	6260      	str	r0, [r4, #36]	; 0x24
 8020288:	e7cd      	b.n	8020226 <dhcp_handle_ack.isra.0+0x3e>
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 802028a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802028c:	085b      	lsrs	r3, r3, #1
 802028e:	e7bc      	b.n	802020a <dhcp_handle_ack.isra.0+0x22>
 8020290:	2002e400 	.word	0x2002e400
 8020294:	2002e40c 	.word	0x2002e40c

08020298 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8020298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 802029c:	4681      	mov	r9, r0
 802029e:	2800      	cmp	r0, #0
 80202a0:	f000 8097 	beq.w	80203d2 <dhcp_create_msg+0x13a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80202a4:	460c      	mov	r4, r1
 80202a6:	2900      	cmp	r1, #0
 80202a8:	f000 808a 	beq.w	80203c0 <dhcp_create_msg+0x128>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 80202ac:	4616      	mov	r6, r2
 80202ae:	f44f 719a 	mov.w	r1, #308	; 0x134
 80202b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80202b6:	2036      	movs	r0, #54	; 0x36
 80202b8:	461f      	mov	r7, r3
 80202ba:	f7fa fb37 	bl	801a92c <pbuf_alloc>
  if (p_out == NULL) {
 80202be:	4605      	mov	r5, r0
 80202c0:	2800      	cmp	r0, #0
 80202c2:	d049      	beq.n	8020358 <dhcp_create_msg+0xc0>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80202c4:	8943      	ldrh	r3, [r0, #10]
 80202c6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80202ca:	d371      	bcc.n	80203b0 <dhcp_create_msg+0x118>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 80202cc:	2e03      	cmp	r6, #3
 80202ce:	d051      	beq.n	8020374 <dhcp_create_msg+0xdc>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 80202d0:	79a3      	ldrb	r3, [r4, #6]
 80202d2:	2b00      	cmp	r3, #0
 80202d4:	d043      	beq.n	802035e <dhcp_create_msg+0xc6>
      xid = LWIP_RAND();
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80202d6:	4b43      	ldr	r3, [pc, #268]	; (80203e4 <dhcp_create_msg+0x14c>)
 80202d8:	6818      	ldr	r0, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80202da:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80202de:	f44f 729a 	mov.w	r2, #308	; 0x134
 80202e2:	2100      	movs	r1, #0
    dhcp->xid = xid;
 80202e4:	6020      	str	r0, [r4, #0]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80202e6:	4640      	mov	r0, r8
 80202e8:	f003 fe16 	bl	8023f18 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80202ec:	2301      	movs	r3, #1
 80202ee:	f888 3000 	strb.w	r3, [r8]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80202f2:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 80202f6:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 80202fa:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80202fe:	6820      	ldr	r0, [r4, #0]
 8020300:	f7f8 fcae 	bl	8018c60 <lwip_htonl>
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020304:	2e04      	cmp	r6, #4
  msg_out->xid = lwip_htonl(dhcp->xid);
 8020306:	f8c8 0004 	str.w	r0, [r8, #4]
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 802030a:	d12d      	bne.n	8020368 <dhcp_create_msg+0xd0>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 802030c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8020310:	f8c8 300c 	str.w	r3, [r8, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020314:	f109 012e 	add.w	r1, r9, #46	; 0x2e
 8020318:	f109 0434 	add.w	r4, r9, #52	; 0x34
 802031c:	f108 0c1c 	add.w	ip, r8, #28
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020320:	f811 eb01 	ldrb.w	lr, [r1], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020324:	428c      	cmp	r4, r1
    msg_out->chaddr[i] = netif->hwaddr[i];
 8020326:	f80c eb01 	strb.w	lr, [ip], #1
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 802032a:	d1f9      	bne.n	8020320 <dhcp_create_msg+0x88>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802032c:	2363      	movs	r3, #99	; 0x63
 802032e:	f06f 027d 	mvn.w	r2, #125	; 0x7d
  options[options_out_len++] = value;
 8020332:	f888 60f2 	strb.w	r6, [r8, #242]	; 0xf2
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020336:	f888 30ec 	strb.w	r3, [r8, #236]	; 0xec
 802033a:	f888 30ef 	strb.w	r3, [r8, #239]	; 0xef
  options[options_out_len++] = option_type;
 802033e:	2335      	movs	r3, #53	; 0x35
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8020340:	f888 20ed 	strb.w	r2, [r8, #237]	; 0xed
 8020344:	2253      	movs	r2, #83	; 0x53
  options[options_out_len++] = option_type;
 8020346:	f888 30f0 	strb.w	r3, [r8, #240]	; 0xf0
  options[options_out_len++] = option_len;
 802034a:	2301      	movs	r3, #1
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 802034c:	f888 20ee 	strb.w	r2, [r8, #238]	; 0xee
  options[options_out_len++] = option_len;
 8020350:	f888 30f1 	strb.w	r3, [r8, #241]	; 0xf1
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
  if (options_out_len) {
    *options_out_len = options_out_len_loc;
 8020354:	2303      	movs	r3, #3
 8020356:	803b      	strh	r3, [r7, #0]
  }
  return p_out;
}
 8020358:	4628      	mov	r0, r5
 802035a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      xid = LWIP_RAND();
 802035e:	f004 fe1d 	bl	8024f9c <rand>
 8020362:	4b20      	ldr	r3, [pc, #128]	; (80203e4 <dhcp_create_msg+0x14c>)
 8020364:	6018      	str	r0, [r3, #0]
 8020366:	e7b8      	b.n	80202da <dhcp_create_msg+0x42>
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8020368:	1ff3      	subs	r3, r6, #7
 802036a:	2b01      	cmp	r3, #1
 802036c:	d9ce      	bls.n	802030c <dhcp_create_msg+0x74>
 802036e:	2e03      	cmp	r6, #3
 8020370:	d1d0      	bne.n	8020314 <dhcp_create_msg+0x7c>
 8020372:	e018      	b.n	80203a6 <dhcp_create_msg+0x10e>
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8020374:	7963      	ldrb	r3, [r4, #5]
 8020376:	2b03      	cmp	r3, #3
 8020378:	d0aa      	beq.n	80202d0 <dhcp_create_msg+0x38>
  msg_out = (struct dhcp_msg *)p_out->payload;
 802037a:	f8d5 8004 	ldr.w	r8, [r5, #4]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 802037e:	f44f 729a 	mov.w	r2, #308	; 0x134
 8020382:	2100      	movs	r1, #0
 8020384:	4640      	mov	r0, r8
 8020386:	f003 fdc7 	bl	8023f18 <memset>
  msg_out->op = DHCP_BOOTREQUEST;
 802038a:	2301      	movs	r3, #1
 802038c:	f888 3000 	strb.w	r3, [r8]
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8020390:	f888 3001 	strb.w	r3, [r8, #1]
  msg_out->hlen = netif->hwaddr_len;
 8020394:	f899 3034 	ldrb.w	r3, [r9, #52]	; 0x34
 8020398:	f888 3002 	strb.w	r3, [r8, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 802039c:	6820      	ldr	r0, [r4, #0]
 802039e:	f7f8 fc5f 	bl	8018c60 <lwip_htonl>
 80203a2:	f8c8 0004 	str.w	r0, [r8, #4]
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80203a6:	7963      	ldrb	r3, [r4, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80203a8:	3b04      	subs	r3, #4
 80203aa:	2b01      	cmp	r3, #1
 80203ac:	d8b2      	bhi.n	8020314 <dhcp_create_msg+0x7c>
 80203ae:	e7ad      	b.n	802030c <dhcp_create_msg+0x74>
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 80203b0:	4b0d      	ldr	r3, [pc, #52]	; (80203e8 <dhcp_create_msg+0x150>)
 80203b2:	f240 7271 	movw	r2, #1905	; 0x771
 80203b6:	490d      	ldr	r1, [pc, #52]	; (80203ec <dhcp_create_msg+0x154>)
 80203b8:	480d      	ldr	r0, [pc, #52]	; (80203f0 <dhcp_create_msg+0x158>)
 80203ba:	f004 fd4b 	bl	8024e54 <iprintf>
 80203be:	e785      	b.n	80202cc <dhcp_create_msg+0x34>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80203c0:	4b09      	ldr	r3, [pc, #36]	; (80203e8 <dhcp_create_msg+0x150>)
 80203c2:	f240 726a 	movw	r2, #1898	; 0x76a
 80203c6:	490b      	ldr	r1, [pc, #44]	; (80203f4 <dhcp_create_msg+0x15c>)
 80203c8:	4625      	mov	r5, r4
 80203ca:	4809      	ldr	r0, [pc, #36]	; (80203f0 <dhcp_create_msg+0x158>)
 80203cc:	f004 fd42 	bl	8024e54 <iprintf>
 80203d0:	e7c2      	b.n	8020358 <dhcp_create_msg+0xc0>
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80203d2:	4b05      	ldr	r3, [pc, #20]	; (80203e8 <dhcp_create_msg+0x150>)
 80203d4:	f240 7269 	movw	r2, #1897	; 0x769
 80203d8:	4907      	ldr	r1, [pc, #28]	; (80203f8 <dhcp_create_msg+0x160>)
 80203da:	464d      	mov	r5, r9
 80203dc:	4804      	ldr	r0, [pc, #16]	; (80203f0 <dhcp_create_msg+0x158>)
 80203de:	f004 fd39 	bl	8024e54 <iprintf>
 80203e2:	e7b9      	b.n	8020358 <dhcp_create_msg+0xc0>
 80203e4:	2002e434 	.word	0x2002e434
 80203e8:	08044c74 	.word	0x08044c74
 80203ec:	08044da8 	.word	0x08044da8
 80203f0:	08029a64 	.word	0x08029a64
 80203f4:	08044d88 	.word	0x08044d88
 80203f8:	08044d68 	.word	0x08044d68

080203fc <dhcp_reboot.isra.0>:
dhcp_reboot(struct netif *netif)
 80203fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020400:	f8d0 a028 	ldr.w	sl, [r0, #40]	; 0x28
dhcp_reboot(struct netif *netif)
 8020404:	b087      	sub	sp, #28
 8020406:	4681      	mov	r9, r0
  if (new_state != dhcp->state) {
 8020408:	f89a 3005 	ldrb.w	r3, [sl, #5]
 802040c:	2b03      	cmp	r3, #3
 802040e:	d007      	beq.n	8020420 <dhcp_reboot.isra.0+0x24>
    dhcp->tries = 0;
 8020410:	2300      	movs	r3, #0
    dhcp->state = new_state;
 8020412:	2203      	movs	r2, #3
    dhcp->tries = 0;
 8020414:	f88a 3006 	strb.w	r3, [sl, #6]
    dhcp->state = new_state;
 8020418:	f88a 2005 	strb.w	r2, [sl, #5]
    dhcp->request_timeout = 0;
 802041c:	f8aa 3008 	strh.w	r3, [sl, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8020420:	f10d 0316 	add.w	r3, sp, #22
 8020424:	2203      	movs	r2, #3
 8020426:	4651      	mov	r1, sl
 8020428:	4648      	mov	r0, r9
 802042a:	f7ff ff35 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 802042e:	4607      	mov	r7, r0
 8020430:	2800      	cmp	r0, #0
 8020432:	f000 808d 	beq.w	8020550 <dhcp_reboot.isra.0+0x154>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020436:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 802043a:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802043c:	f104 0804 	add.w	r8, r4, #4
 8020440:	1ca5      	adds	r5, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020442:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020444:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020448:	f200 80a3 	bhi.w	8020592 <dhcp_reboot.isra.0+0x196>
  options[options_out_len++] = option_type;
 802044c:	2239      	movs	r2, #57	; 0x39
 802044e:	1c63      	adds	r3, r4, #1
 8020450:	fa1f fb85 	uxth.w	fp, r5
 8020454:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020456:	b29b      	uxth	r3, r3
 8020458:	2202      	movs	r2, #2
 802045a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802045c:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020460:	f8ad 5016 	strh.w	r5, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020464:	2b44      	cmp	r3, #68	; 0x44
 8020466:	f200 80ac 	bhi.w	80205c2 <dhcp_reboot.isra.0+0x1c6>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802046a:	2202      	movs	r2, #2
 802046c:	1ce3      	adds	r3, r4, #3
 802046e:	fa1f f588 	uxth.w	r5, r8
 8020472:	f806 200b 	strb.w	r2, [r6, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020476:	b29b      	uxth	r3, r3
 8020478:	2240      	movs	r2, #64	; 0x40
 802047a:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802047c:	1dab      	adds	r3, r5, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 802047e:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020482:	2b44      	cmp	r3, #68	; 0x44
 8020484:	f200 8095 	bhi.w	80205b2 <dhcp_reboot.isra.0+0x1b6>
  options[options_out_len++] = option_type;
 8020488:	1d63      	adds	r3, r4, #5
 802048a:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 802048c:	3406      	adds	r4, #6
  options[options_out_len++] = option_type;
 802048e:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 8020490:	b29b      	uxth	r3, r3
 8020492:	2204      	movs	r2, #4
 8020494:	b2a4      	uxth	r4, r4
 8020496:	54f2      	strb	r2, [r6, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020498:	f8da 001c 	ldr.w	r0, [sl, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 802049c:	f8ad 4016 	strh.w	r4, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80204a0:	f7f8 fbde 	bl	8018c60 <lwip_htonl>
 80204a4:	4631      	mov	r1, r6
 80204a6:	4602      	mov	r2, r0
 80204a8:	4620      	mov	r0, r4
 80204aa:	f7ff fd55 	bl	801ff58 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80204ae:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80204b0:	4605      	mov	r5, r0
 80204b2:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80204b6:	2b44      	cmp	r3, #68	; 0x44
 80204b8:	9303      	str	r3, [sp, #12]
 80204ba:	d872      	bhi.n	80205a2 <dhcp_reboot.isra.0+0x1a6>
  options[options_out_len++] = option_len;
 80204bc:	1cac      	adds	r4, r5, #2
  options[options_out_len++] = option_type;
 80204be:	2237      	movs	r2, #55	; 0x37
 80204c0:	1c6b      	adds	r3, r5, #1
 80204c2:	f8df 8134 	ldr.w	r8, [pc, #308]	; 80205f8 <dhcp_reboot.isra.0+0x1fc>
  options[options_out_len++] = option_len;
 80204c6:	b2a4      	uxth	r4, r4
  options[options_out_len++] = option_type;
 80204c8:	5572      	strb	r2, [r6, r5]
  options[options_out_len++] = option_len;
 80204ca:	b29b      	uxth	r3, r3
 80204cc:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80204ce:	2c43      	cmp	r4, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80204d0:	f04f 0b01 	mov.w	fp, #1
  options[options_out_len++] = option_len;
 80204d4:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80204d6:	493f      	ldr	r1, [pc, #252]	; (80205d4 <dhcp_reboot.isra.0+0x1d8>)
 80204d8:	4b3f      	ldr	r3, [pc, #252]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80204da:	f8ad 4016 	strh.w	r4, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80204de:	d80c      	bhi.n	80204fa <dhcp_reboot.isra.0+0xfe>
  options[options_out_len++] = value;
 80204e0:	1c62      	adds	r2, r4, #1
 80204e2:	f806 b004 	strb.w	fp, [r6, r4]
 80204e6:	b294      	uxth	r4, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80204e8:	4a3c      	ldr	r2, [pc, #240]	; (80205dc <dhcp_reboot.isra.0+0x1e0>)
 80204ea:	4590      	cmp	r8, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80204ec:	f8ad 4016 	strh.w	r4, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80204f0:	d00b      	beq.n	802050a <dhcp_reboot.isra.0+0x10e>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80204f2:	2c43      	cmp	r4, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80204f4:	f818 bb01 	ldrb.w	fp, [r8], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80204f8:	d9f2      	bls.n	80204e0 <dhcp_reboot.isra.0+0xe4>
 80204fa:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80204fe:	4838      	ldr	r0, [pc, #224]	; (80205e0 <dhcp_reboot.isra.0+0x1e4>)
 8020500:	f004 fca8 	bl	8024e54 <iprintf>
 8020504:	4b34      	ldr	r3, [pc, #208]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
 8020506:	4933      	ldr	r1, [pc, #204]	; (80205d4 <dhcp_reboot.isra.0+0x1d8>)
 8020508:	e7ea      	b.n	80204e0 <dhcp_reboot.isra.0+0xe4>
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
  options[options_out_len++] = DHCP_OPTION_END;
 802050a:	1de8      	adds	r0, r5, #7
 802050c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020510:	22ff      	movs	r2, #255	; 0xff
 8020512:	b280      	uxth	r0, r0
 8020514:	54f2      	strb	r2, [r6, r3]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8020516:	2843      	cmp	r0, #67	; 0x43
 8020518:	d808      	bhi.n	802052c <dhcp_reboot.isra.0+0x130>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 802051a:	f1c5 053c 	rsb	r5, r5, #60	; 0x3c
 802051e:	4430      	add	r0, r6
 8020520:	2100      	movs	r1, #0
 8020522:	b2ad      	uxth	r5, r5
 8020524:	1c6a      	adds	r2, r5, #1
 8020526:	f003 fcf7 	bl	8023f18 <memset>
 802052a:	2044      	movs	r0, #68	; 0x44
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802052c:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 8020530:	4638      	mov	r0, r7
 8020532:	b289      	uxth	r1, r1
 8020534:	f7fa fab4 	bl	801aaa0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8020538:	482a      	ldr	r0, [pc, #168]	; (80205e4 <dhcp_reboot.isra.0+0x1e8>)
 802053a:	2343      	movs	r3, #67	; 0x43
 802053c:	4a2a      	ldr	r2, [pc, #168]	; (80205e8 <dhcp_reboot.isra.0+0x1ec>)
 802053e:	6800      	ldr	r0, [r0, #0]
 8020540:	4639      	mov	r1, r7
 8020542:	f8cd 9000 	str.w	r9, [sp]
 8020546:	f7ff fba5 	bl	801fc94 <udp_sendto_if>
    pbuf_free(p_out);
 802054a:	4638      	mov	r0, r7
 802054c:	f7fa fbc0 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 8020550:	f89a 3006 	ldrb.w	r3, [sl, #6]
 8020554:	2bff      	cmp	r3, #255	; 0xff
 8020556:	d016      	beq.n	8020586 <dhcp_reboot.isra.0+0x18a>
    dhcp->tries++;
 8020558:	3301      	adds	r3, #1
 802055a:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802055c:	2b09      	cmp	r3, #9
    dhcp->tries++;
 802055e:	f88a 3006 	strb.w	r3, [sl, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8020562:	d810      	bhi.n	8020586 <dhcp_reboot.isra.0+0x18a>
 8020564:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020568:	4a20      	ldr	r2, [pc, #128]	; (80205ec <dhcp_reboot.isra.0+0x1f0>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802056a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 802056e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020570:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020574:	b29b      	uxth	r3, r3
 8020576:	fba2 2303 	umull	r2, r3, r2, r3
 802057a:	095b      	lsrs	r3, r3, #5
 802057c:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 8020580:	b007      	add	sp, #28
 8020582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020586:	2314      	movs	r3, #20
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020588:	f8aa 3008 	strh.w	r3, [sl, #8]
}
 802058c:	b007      	add	sp, #28
 802058e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020592:	4b11      	ldr	r3, [pc, #68]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
 8020594:	f240 529a 	movw	r2, #1434	; 0x59a
 8020598:	4915      	ldr	r1, [pc, #84]	; (80205f0 <dhcp_reboot.isra.0+0x1f4>)
 802059a:	4811      	ldr	r0, [pc, #68]	; (80205e0 <dhcp_reboot.isra.0+0x1e4>)
 802059c:	f004 fc5a 	bl	8024e54 <iprintf>
 80205a0:	e754      	b.n	802044c <dhcp_reboot.isra.0+0x50>
 80205a2:	4b0d      	ldr	r3, [pc, #52]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
 80205a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80205a8:	4911      	ldr	r1, [pc, #68]	; (80205f0 <dhcp_reboot.isra.0+0x1f4>)
 80205aa:	480d      	ldr	r0, [pc, #52]	; (80205e0 <dhcp_reboot.isra.0+0x1e4>)
 80205ac:	f004 fc52 	bl	8024e54 <iprintf>
 80205b0:	e784      	b.n	80204bc <dhcp_reboot.isra.0+0xc0>
 80205b2:	4b09      	ldr	r3, [pc, #36]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
 80205b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80205b8:	490d      	ldr	r1, [pc, #52]	; (80205f0 <dhcp_reboot.isra.0+0x1f4>)
 80205ba:	4809      	ldr	r0, [pc, #36]	; (80205e0 <dhcp_reboot.isra.0+0x1e4>)
 80205bc:	f004 fc4a 	bl	8024e54 <iprintf>
 80205c0:	e762      	b.n	8020488 <dhcp_reboot.isra.0+0x8c>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80205c2:	4b05      	ldr	r3, [pc, #20]	; (80205d8 <dhcp_reboot.isra.0+0x1dc>)
 80205c4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80205c8:	490a      	ldr	r1, [pc, #40]	; (80205f4 <dhcp_reboot.isra.0+0x1f8>)
 80205ca:	4805      	ldr	r0, [pc, #20]	; (80205e0 <dhcp_reboot.isra.0+0x1e4>)
 80205cc:	f004 fc42 	bl	8024e54 <iprintf>
 80205d0:	e74b      	b.n	802046a <dhcp_reboot.isra.0+0x6e>
 80205d2:	bf00      	nop
 80205d4:	08044e68 	.word	0x08044e68
 80205d8:	08044c74 	.word	0x08044c74
 80205dc:	08044ff0 	.word	0x08044ff0
 80205e0:	08029a64 	.word	0x08029a64
 80205e4:	2002e3f8 	.word	0x2002e3f8
 80205e8:	0804532c 	.word	0x0804532c
 80205ec:	10624dd3 	.word	0x10624dd3
 80205f0:	08044de8 	.word	0x08044de8
 80205f4:	08044e2c 	.word	0x08044e2c
 80205f8:	08044fed 	.word	0x08044fed

080205fc <dhcp_discover>:
{
 80205fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020600:	6a87      	ldr	r7, [r0, #40]	; 0x28
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8020602:	2300      	movs	r3, #0
{
 8020604:	b087      	sub	sp, #28
 8020606:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 8020608:	797a      	ldrb	r2, [r7, #5]
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 802060a:	61fb      	str	r3, [r7, #28]
  if (new_state != dhcp->state) {
 802060c:	2a06      	cmp	r2, #6
 802060e:	d003      	beq.n	8020618 <dhcp_discover+0x1c>
    dhcp->state = new_state;
 8020610:	2206      	movs	r2, #6
    dhcp->tries = 0;
 8020612:	71bb      	strb	r3, [r7, #6]
    dhcp->request_timeout = 0;
 8020614:	813b      	strh	r3, [r7, #8]
    dhcp->state = new_state;
 8020616:	717a      	strb	r2, [r7, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8020618:	f10d 0316 	add.w	r3, sp, #22
 802061c:	2201      	movs	r2, #1
 802061e:	4639      	mov	r1, r7
 8020620:	4658      	mov	r0, fp
 8020622:	f7ff fe39 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 8020626:	4605      	mov	r5, r0
 8020628:	2800      	cmp	r0, #0
 802062a:	f000 8081 	beq.w	8020730 <dhcp_discover+0x134>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802062e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8020632:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020634:	f104 0804 	add.w	r8, r4, #4
 8020638:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802063c:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802063e:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020642:	f200 809a 	bhi.w	802077a <dhcp_discover+0x17e>
  options[options_out_len++] = option_type;
 8020646:	2239      	movs	r2, #57	; 0x39
 8020648:	1c63      	adds	r3, r4, #1
 802064a:	fa1f f189 	uxth.w	r1, r9
 802064e:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 8020650:	b29b      	uxth	r3, r3
 8020652:	2202      	movs	r2, #2
 8020654:	9103      	str	r1, [sp, #12]
 8020656:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020658:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802065a:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802065e:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020660:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020664:	f200 8091 	bhi.w	802078a <dhcp_discover+0x18e>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020668:	1ce3      	adds	r3, r4, #3
 802066a:	fa1f f988 	uxth.w	r9, r8
 802066e:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020672:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020674:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8020676:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8020678:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802067c:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020680:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020684:	2b44      	cmp	r3, #68	; 0x44
 8020686:	d870      	bhi.n	802076a <dhcp_discover+0x16e>
  options[options_out_len++] = option_len;
 8020688:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 802068c:	2237      	movs	r2, #55	; 0x37
 802068e:	1d63      	adds	r3, r4, #5
 8020690:	f8df a130 	ldr.w	sl, [pc, #304]	; 80207c4 <dhcp_discover+0x1c8>
  options[options_out_len++] = option_len;
 8020694:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 8020698:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 802069c:	b29b      	uxth	r3, r3
 802069e:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80206a0:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80206a4:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 80206a8:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80206aa:	493c      	ldr	r1, [pc, #240]	; (802079c <dhcp_discover+0x1a0>)
 80206ac:	4b3c      	ldr	r3, [pc, #240]	; (80207a0 <dhcp_discover+0x1a4>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80206ae:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80206b2:	d80f      	bhi.n	80206d4 <dhcp_discover+0xd8>
  options[options_out_len++] = value;
 80206b4:	f108 0201 	add.w	r2, r8, #1
 80206b8:	f806 9008 	strb.w	r9, [r6, r8]
 80206bc:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80206c0:	4a38      	ldr	r2, [pc, #224]	; (80207a4 <dhcp_discover+0x1a8>)
 80206c2:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80206c4:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80206c8:	d00c      	beq.n	80206e4 <dhcp_discover+0xe8>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80206ca:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80206ce:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80206d2:	d9ef      	bls.n	80206b4 <dhcp_discover+0xb8>
 80206d4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 80206d8:	4833      	ldr	r0, [pc, #204]	; (80207a8 <dhcp_discover+0x1ac>)
 80206da:	f004 fbbb 	bl	8024e54 <iprintf>
 80206de:	4b30      	ldr	r3, [pc, #192]	; (80207a0 <dhcp_discover+0x1a4>)
 80206e0:	492e      	ldr	r1, [pc, #184]	; (802079c <dhcp_discover+0x1a0>)
 80206e2:	e7e7      	b.n	80206b4 <dhcp_discover+0xb8>
  options[options_out_len++] = DHCP_OPTION_END;
 80206e4:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 80206e8:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80206ec:	22ff      	movs	r2, #255	; 0xff
 80206ee:	b280      	uxth	r0, r0
 80206f0:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80206f2:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80206f4:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80206f6:	d808      	bhi.n	802070a <dhcp_discover+0x10e>
    options[options_out_len++] = 0;
 80206f8:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 80206fc:	4430      	add	r0, r6
 80206fe:	2100      	movs	r1, #0
 8020700:	b2a4      	uxth	r4, r4
 8020702:	1c62      	adds	r2, r4, #1
 8020704:	f003 fc08 	bl	8023f18 <memset>
 8020708:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802070a:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802070e:	4628      	mov	r0, r5
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020710:	4c26      	ldr	r4, [pc, #152]	; (80207ac <dhcp_discover+0x1b0>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020712:	b289      	uxth	r1, r1
 8020714:	f7fa f9c4 	bl	801aaa0 <pbuf_realloc>
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020718:	4825      	ldr	r0, [pc, #148]	; (80207b0 <dhcp_discover+0x1b4>)
 802071a:	2343      	movs	r3, #67	; 0x43
 802071c:	4a25      	ldr	r2, [pc, #148]	; (80207b4 <dhcp_discover+0x1b8>)
 802071e:	6800      	ldr	r0, [r0, #0]
 8020720:	4629      	mov	r1, r5
 8020722:	e9cd b400 	strd	fp, r4, [sp]
 8020726:	f7ff fa01 	bl	801fb2c <udp_sendto_if_src>
    pbuf_free(p_out);
 802072a:	4628      	mov	r0, r5
 802072c:	f7fa fad0 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 8020730:	79bb      	ldrb	r3, [r7, #6]
 8020732:	2bff      	cmp	r3, #255	; 0xff
 8020734:	d013      	beq.n	802075e <dhcp_discover+0x162>
    dhcp->tries++;
 8020736:	3301      	adds	r3, #1
 8020738:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802073a:	2a05      	cmp	r2, #5
    dhcp->tries++;
 802073c:	71ba      	strb	r2, [r7, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802073e:	d80e      	bhi.n	802075e <dhcp_discover+0x162>
 8020740:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020744:	491c      	ldr	r1, [pc, #112]	; (80207b8 <dhcp_discover+0x1bc>)
}
 8020746:	2000      	movs	r0, #0
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020748:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802074a:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 802074e:	b29b      	uxth	r3, r3
 8020750:	fba1 2303 	umull	r2, r3, r1, r3
 8020754:	095b      	lsrs	r3, r3, #5
 8020756:	813b      	strh	r3, [r7, #8]
}
 8020758:	b007      	add	sp, #28
 802075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 802075e:	2378      	movs	r3, #120	; 0x78
}
 8020760:	2000      	movs	r0, #0
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020762:	813b      	strh	r3, [r7, #8]
}
 8020764:	b007      	add	sp, #28
 8020766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802076a:	4b0d      	ldr	r3, [pc, #52]	; (80207a0 <dhcp_discover+0x1a4>)
 802076c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020770:	4912      	ldr	r1, [pc, #72]	; (80207bc <dhcp_discover+0x1c0>)
 8020772:	480d      	ldr	r0, [pc, #52]	; (80207a8 <dhcp_discover+0x1ac>)
 8020774:	f004 fb6e 	bl	8024e54 <iprintf>
 8020778:	e786      	b.n	8020688 <dhcp_discover+0x8c>
 802077a:	4b09      	ldr	r3, [pc, #36]	; (80207a0 <dhcp_discover+0x1a4>)
 802077c:	f240 529a 	movw	r2, #1434	; 0x59a
 8020780:	490e      	ldr	r1, [pc, #56]	; (80207bc <dhcp_discover+0x1c0>)
 8020782:	4809      	ldr	r0, [pc, #36]	; (80207a8 <dhcp_discover+0x1ac>)
 8020784:	f004 fb66 	bl	8024e54 <iprintf>
 8020788:	e75d      	b.n	8020646 <dhcp_discover+0x4a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802078a:	4b05      	ldr	r3, [pc, #20]	; (80207a0 <dhcp_discover+0x1a4>)
 802078c:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8020790:	490b      	ldr	r1, [pc, #44]	; (80207c0 <dhcp_discover+0x1c4>)
 8020792:	4805      	ldr	r0, [pc, #20]	; (80207a8 <dhcp_discover+0x1ac>)
 8020794:	f004 fb5e 	bl	8024e54 <iprintf>
 8020798:	e766      	b.n	8020668 <dhcp_discover+0x6c>
 802079a:	bf00      	nop
 802079c:	08044e68 	.word	0x08044e68
 80207a0:	08044c74 	.word	0x08044c74
 80207a4:	08044ff0 	.word	0x08044ff0
 80207a8:	08029a64 	.word	0x08029a64
 80207ac:	08045328 	.word	0x08045328
 80207b0:	2002e3f8 	.word	0x2002e3f8
 80207b4:	0804532c 	.word	0x0804532c
 80207b8:	10624dd3 	.word	0x10624dd3
 80207bc:	08044de8 	.word	0x08044de8
 80207c0:	08044e2c 	.word	0x08044e2c
 80207c4:	08044fed 	.word	0x08044fed

080207c8 <dhcp_select.isra.0>:
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80207c8:	2800      	cmp	r0, #0
 80207ca:	f000 8112 	beq.w	80209f2 <dhcp_select.isra.0+0x22a>
dhcp_select(struct netif *netif)
 80207ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  dhcp = netif_dhcp_data(netif);
 80207d2:	6a86      	ldr	r6, [r0, #40]	; 0x28
dhcp_select(struct netif *netif)
 80207d4:	b087      	sub	sp, #28
 80207d6:	4683      	mov	fp, r0
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80207d8:	2e00      	cmp	r6, #0
 80207da:	f000 8111 	beq.w	8020a00 <dhcp_select.isra.0+0x238>
  if (new_state != dhcp->state) {
 80207de:	7973      	ldrb	r3, [r6, #5]
 80207e0:	2b01      	cmp	r3, #1
 80207e2:	d004      	beq.n	80207ee <dhcp_select.isra.0+0x26>
    dhcp->tries = 0;
 80207e4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80207e6:	2201      	movs	r2, #1
    dhcp->tries = 0;
 80207e8:	71b3      	strb	r3, [r6, #6]
    dhcp->state = new_state;
 80207ea:	7172      	strb	r2, [r6, #5]
    dhcp->request_timeout = 0;
 80207ec:	8133      	strh	r3, [r6, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80207ee:	f10d 0316 	add.w	r3, sp, #22
 80207f2:	2203      	movs	r2, #3
 80207f4:	4631      	mov	r1, r6
 80207f6:	4658      	mov	r0, fp
 80207f8:	f7ff fd4e 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 80207fc:	4605      	mov	r5, r0
 80207fe:	2800      	cmp	r0, #0
 8020800:	f000 80b4 	beq.w	802096c <dhcp_select.isra.0+0x1a4>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020804:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8020808:	6844      	ldr	r4, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802080a:	f107 0804 	add.w	r8, r7, #4
 802080e:	f107 0902 	add.w	r9, r7, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020812:	34f0      	adds	r4, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020814:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 8020818:	f200 80cb 	bhi.w	80209b2 <dhcp_select.isra.0+0x1ea>
  options[options_out_len++] = option_type;
 802081c:	2239      	movs	r2, #57	; 0x39
 802081e:	1c7b      	adds	r3, r7, #1
 8020820:	fa1f f189 	uxth.w	r1, r9
 8020824:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 8020826:	b29b      	uxth	r3, r3
 8020828:	2202      	movs	r2, #2
 802082a:	9103      	str	r1, [sp, #12]
 802082c:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802082e:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020830:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8020834:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8020836:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802083a:	f200 80c2 	bhi.w	80209c2 <dhcp_select.isra.0+0x1fa>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802083e:	1cfb      	adds	r3, r7, #3
 8020840:	fa1f f988 	uxth.w	r9, r8
 8020844:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8020848:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802084a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802084c:	5462      	strb	r2, [r4, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802084e:	f804 a003 	strb.w	sl, [r4, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020852:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8020856:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802085a:	2b44      	cmp	r3, #68	; 0x44
 802085c:	f200 80b9 	bhi.w	80209d2 <dhcp_select.isra.0+0x20a>
  options[options_out_len++] = option_type;
 8020860:	1d7b      	adds	r3, r7, #5
 8020862:	2232      	movs	r2, #50	; 0x32
  options[options_out_len++] = option_len;
 8020864:	3706      	adds	r7, #6
  options[options_out_len++] = option_type;
 8020866:	f804 2009 	strb.w	r2, [r4, r9]
  options[options_out_len++] = option_len;
 802086a:	b29b      	uxth	r3, r3
 802086c:	2204      	movs	r2, #4
 802086e:	b2bf      	uxth	r7, r7
 8020870:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020872:	69f0      	ldr	r0, [r6, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8020874:	f8ad 7016 	strh.w	r7, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020878:	f7f8 f9f2 	bl	8018c60 <lwip_htonl>
 802087c:	4621      	mov	r1, r4
 802087e:	4602      	mov	r2, r0
 8020880:	4638      	mov	r0, r7
 8020882:	f7ff fb69 	bl	801ff58 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8020886:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8020888:	4607      	mov	r7, r0
 802088a:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802088e:	2b44      	cmp	r3, #68	; 0x44
 8020890:	f200 80a7 	bhi.w	80209e2 <dhcp_select.isra.0+0x21a>
  options[options_out_len++] = option_type;
 8020894:	2236      	movs	r2, #54	; 0x36
 8020896:	1c7b      	adds	r3, r7, #1
  options[options_out_len++] = option_len;
 8020898:	f107 0802 	add.w	r8, r7, #2
  options[options_out_len++] = option_type;
 802089c:	55e2      	strb	r2, [r4, r7]
  options[options_out_len++] = option_len;
 802089e:	b29b      	uxth	r3, r3
 80208a0:	2204      	movs	r2, #4
 80208a2:	fa1f f888 	uxth.w	r8, r8
 80208a6:	54e2      	strb	r2, [r4, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80208a8:	69b0      	ldr	r0, [r6, #24]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80208aa:	f8ad 8016 	strh.w	r8, [sp, #22]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80208ae:	f7f8 f9d7 	bl	8018c60 <lwip_htonl>
 80208b2:	4621      	mov	r1, r4
 80208b4:	4602      	mov	r2, r0
 80208b6:	4640      	mov	r0, r8
 80208b8:	f7ff fb4e 	bl	801ff58 <dhcp_option_long>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80208bc:	1d83      	adds	r3, r0, #6
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80208be:	4680      	mov	r8, r0
 80208c0:	f8ad 0016 	strh.w	r0, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80208c4:	2b44      	cmp	r3, #68	; 0x44
 80208c6:	9303      	str	r3, [sp, #12]
 80208c8:	d86b      	bhi.n	80209a2 <dhcp_select.isra.0+0x1da>
  options[options_out_len++] = option_len;
 80208ca:	f108 0702 	add.w	r7, r8, #2
  options[options_out_len++] = option_type;
 80208ce:	2237      	movs	r2, #55	; 0x37
 80208d0:	f108 0301 	add.w	r3, r8, #1
 80208d4:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8020a44 <dhcp_select.isra.0+0x27c>
  options[options_out_len++] = option_len;
 80208d8:	b2bf      	uxth	r7, r7
  options[options_out_len++] = option_type;
 80208da:	f804 2008 	strb.w	r2, [r4, r8]
  options[options_out_len++] = option_len;
 80208de:	b29b      	uxth	r3, r3
 80208e0:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80208e2:	2f43      	cmp	r7, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80208e4:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 80208e8:	54e2      	strb	r2, [r4, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80208ea:	494a      	ldr	r1, [pc, #296]	; (8020a14 <dhcp_select.isra.0+0x24c>)
 80208ec:	4b4a      	ldr	r3, [pc, #296]	; (8020a18 <dhcp_select.isra.0+0x250>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80208ee:	f8ad 7016 	strh.w	r7, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 80208f2:	d80c      	bhi.n	802090e <dhcp_select.isra.0+0x146>
  options[options_out_len++] = value;
 80208f4:	1c7a      	adds	r2, r7, #1
 80208f6:	f804 a007 	strb.w	sl, [r4, r7]
 80208fa:	b297      	uxth	r7, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80208fc:	4a47      	ldr	r2, [pc, #284]	; (8020a1c <dhcp_select.isra.0+0x254>)
 80208fe:	454a      	cmp	r2, r9
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020900:	f8ad 7016 	strh.w	r7, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8020904:	d00b      	beq.n	802091e <dhcp_select.isra.0+0x156>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8020906:	2f43      	cmp	r7, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8020908:	f819 ab01 	ldrb.w	sl, [r9], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802090c:	d9f2      	bls.n	80208f4 <dhcp_select.isra.0+0x12c>
 802090e:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8020912:	4843      	ldr	r0, [pc, #268]	; (8020a20 <dhcp_select.isra.0+0x258>)
 8020914:	f004 fa9e 	bl	8024e54 <iprintf>
 8020918:	4b3f      	ldr	r3, [pc, #252]	; (8020a18 <dhcp_select.isra.0+0x250>)
 802091a:	493e      	ldr	r1, [pc, #248]	; (8020a14 <dhcp_select.isra.0+0x24c>)
 802091c:	e7ea      	b.n	80208f4 <dhcp_select.isra.0+0x12c>
  options[options_out_len++] = DHCP_OPTION_END;
 802091e:	f108 0007 	add.w	r0, r8, #7
 8020922:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8020926:	22ff      	movs	r2, #255	; 0xff
 8020928:	b280      	uxth	r0, r0
 802092a:	54e2      	strb	r2, [r4, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802092c:	2843      	cmp	r0, #67	; 0x43
 802092e:	d80a      	bhi.n	8020946 <dhcp_select.isra.0+0x17e>
    options[options_out_len++] = 0;
 8020930:	f1c8 083c 	rsb	r8, r8, #60	; 0x3c
 8020934:	4420      	add	r0, r4
 8020936:	2100      	movs	r1, #0
 8020938:	fa1f f888 	uxth.w	r8, r8
 802093c:	f108 0201 	add.w	r2, r8, #1
 8020940:	f003 faea 	bl	8023f18 <memset>
 8020944:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8020946:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 802094a:	4628      	mov	r0, r5
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 802094c:	4c35      	ldr	r4, [pc, #212]	; (8020a24 <dhcp_select.isra.0+0x25c>)
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802094e:	b289      	uxth	r1, r1
 8020950:	f7fa f8a6 	bl	801aaa0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8020954:	4834      	ldr	r0, [pc, #208]	; (8020a28 <dhcp_select.isra.0+0x260>)
 8020956:	2343      	movs	r3, #67	; 0x43
 8020958:	4a34      	ldr	r2, [pc, #208]	; (8020a2c <dhcp_select.isra.0+0x264>)
 802095a:	6800      	ldr	r0, [r0, #0]
 802095c:	4629      	mov	r1, r5
 802095e:	e9cd b400 	strd	fp, r4, [sp]
 8020962:	f7ff f8e3 	bl	801fb2c <udp_sendto_if_src>
    pbuf_free(p_out);
 8020966:	4628      	mov	r0, r5
 8020968:	f7fa f9b2 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 802096c:	79b3      	ldrb	r3, [r6, #6]
 802096e:	2bff      	cmp	r3, #255	; 0xff
 8020970:	d012      	beq.n	8020998 <dhcp_select.isra.0+0x1d0>
    dhcp->tries++;
 8020972:	3301      	adds	r3, #1
 8020974:	b2da      	uxtb	r2, r3
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020976:	2a05      	cmp	r2, #5
    dhcp->tries++;
 8020978:	71b2      	strb	r2, [r6, #6]
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 802097a:	d80d      	bhi.n	8020998 <dhcp_select.isra.0+0x1d0>
 802097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020980:	492b      	ldr	r1, [pc, #172]	; (8020a30 <dhcp_select.isra.0+0x268>)
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8020982:	4093      	lsls	r3, r2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8020984:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8020988:	b29b      	uxth	r3, r3
 802098a:	fba1 2303 	umull	r2, r3, r1, r3
 802098e:	095b      	lsrs	r3, r3, #5
 8020990:	8133      	strh	r3, [r6, #8]
}
 8020992:	b007      	add	sp, #28
 8020994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    options[options_out_len++] = 0;
 8020998:	2378      	movs	r3, #120	; 0x78
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802099a:	8133      	strh	r3, [r6, #8]
}
 802099c:	b007      	add	sp, #28
 802099e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209a2:	4b1d      	ldr	r3, [pc, #116]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209a4:	f240 529a 	movw	r2, #1434	; 0x59a
 80209a8:	4922      	ldr	r1, [pc, #136]	; (8020a34 <dhcp_select.isra.0+0x26c>)
 80209aa:	481d      	ldr	r0, [pc, #116]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209ac:	f004 fa52 	bl	8024e54 <iprintf>
 80209b0:	e78b      	b.n	80208ca <dhcp_select.isra.0+0x102>
 80209b2:	4b19      	ldr	r3, [pc, #100]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80209b8:	491e      	ldr	r1, [pc, #120]	; (8020a34 <dhcp_select.isra.0+0x26c>)
 80209ba:	4819      	ldr	r0, [pc, #100]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209bc:	f004 fa4a 	bl	8024e54 <iprintf>
 80209c0:	e72c      	b.n	802081c <dhcp_select.isra.0+0x54>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80209c2:	4b15      	ldr	r3, [pc, #84]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209c4:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80209c8:	491b      	ldr	r1, [pc, #108]	; (8020a38 <dhcp_select.isra.0+0x270>)
 80209ca:	4815      	ldr	r0, [pc, #84]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209cc:	f004 fa42 	bl	8024e54 <iprintf>
 80209d0:	e735      	b.n	802083e <dhcp_select.isra.0+0x76>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80209d2:	4b11      	ldr	r3, [pc, #68]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209d4:	f240 529a 	movw	r2, #1434	; 0x59a
 80209d8:	4916      	ldr	r1, [pc, #88]	; (8020a34 <dhcp_select.isra.0+0x26c>)
 80209da:	4811      	ldr	r0, [pc, #68]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209dc:	f004 fa3a 	bl	8024e54 <iprintf>
 80209e0:	e73e      	b.n	8020860 <dhcp_select.isra.0+0x98>
 80209e2:	4b0d      	ldr	r3, [pc, #52]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209e4:	f240 529a 	movw	r2, #1434	; 0x59a
 80209e8:	4912      	ldr	r1, [pc, #72]	; (8020a34 <dhcp_select.isra.0+0x26c>)
 80209ea:	480d      	ldr	r0, [pc, #52]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209ec:	f004 fa32 	bl	8024e54 <iprintf>
 80209f0:	e750      	b.n	8020894 <dhcp_select.isra.0+0xcc>
  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80209f2:	4b09      	ldr	r3, [pc, #36]	; (8020a18 <dhcp_select.isra.0+0x250>)
 80209f4:	f240 1277 	movw	r2, #375	; 0x177
 80209f8:	4910      	ldr	r1, [pc, #64]	; (8020a3c <dhcp_select.isra.0+0x274>)
 80209fa:	4809      	ldr	r0, [pc, #36]	; (8020a20 <dhcp_select.isra.0+0x258>)
 80209fc:	f004 ba2a 	b.w	8024e54 <iprintf>
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020a00:	4b05      	ldr	r3, [pc, #20]	; (8020a18 <dhcp_select.isra.0+0x250>)
 8020a02:	f240 1279 	movw	r2, #377	; 0x179
 8020a06:	490e      	ldr	r1, [pc, #56]	; (8020a40 <dhcp_select.isra.0+0x278>)
 8020a08:	4805      	ldr	r0, [pc, #20]	; (8020a20 <dhcp_select.isra.0+0x258>)
}
 8020a0a:	b007      	add	sp, #28
 8020a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8020a10:	f004 ba20 	b.w	8024e54 <iprintf>
 8020a14:	08044e68 	.word	0x08044e68
 8020a18:	08044c74 	.word	0x08044c74
 8020a1c:	08044ff0 	.word	0x08044ff0
 8020a20:	08029a64 	.word	0x08029a64
 8020a24:	08045328 	.word	0x08045328
 8020a28:	2002e3f8 	.word	0x2002e3f8
 8020a2c:	0804532c 	.word	0x0804532c
 8020a30:	10624dd3 	.word	0x10624dd3
 8020a34:	08044de8 	.word	0x08044de8
 8020a38:	08044e2c 	.word	0x08044e2c
 8020a3c:	08044ea0 	.word	0x08044ea0
 8020a40:	08044ebc 	.word	0x08044ebc
 8020a44:	08044fed 	.word	0x08044fed

08020a48 <dhcp_recv>:
  struct netif *netif = ip_current_input_netif();
 8020a48:	4ba5      	ldr	r3, [pc, #660]	; (8020ce0 <dhcp_recv+0x298>)
{
 8020a4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct netif *netif = ip_current_input_netif();
 8020a4e:	f8d3 a004 	ldr.w	sl, [r3, #4]
{
 8020a52:	b08b      	sub	sp, #44	; 0x2c
 8020a54:	4693      	mov	fp, r2
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8020a56:	f8da 9028 	ldr.w	r9, [sl, #40]	; 0x28
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8020a5a:	f1b9 0f00 	cmp.w	r9, #0
 8020a5e:	d04b      	beq.n	8020af8 <dhcp_recv+0xb0>
 8020a60:	f899 3004 	ldrb.w	r3, [r9, #4]
 8020a64:	2b00      	cmp	r3, #0
 8020a66:	d047      	beq.n	8020af8 <dhcp_recv+0xb0>
  if (p->len < DHCP_MIN_REPLY_LEN) {
 8020a68:	8953      	ldrh	r3, [r2, #10]
 8020a6a:	2b2b      	cmp	r3, #43	; 0x2b
 8020a6c:	d944      	bls.n	8020af8 <dhcp_recv+0xb0>
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8020a6e:	6855      	ldr	r5, [r2, #4]
  if (reply_msg->op != DHCP_BOOTREPLY) {
 8020a70:	782b      	ldrb	r3, [r5, #0]
 8020a72:	2b02      	cmp	r3, #2
 8020a74:	d140      	bne.n	8020af8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020a76:	f89a 6034 	ldrb.w	r6, [sl, #52]	; 0x34
 8020a7a:	b186      	cbz	r6, 8020a9e <dhcp_recv+0x56>
 8020a7c:	f10a 012e 	add.w	r1, sl, #46	; 0x2e
 8020a80:	f105 021c 	add.w	r2, r5, #28
 8020a84:	2300      	movs	r3, #0
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020a86:	f811 4b01 	ldrb.w	r4, [r1], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020a8a:	3301      	adds	r3, #1
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020a8c:	f812 0b01 	ldrb.w	r0, [r2], #1
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020a90:	b2db      	uxtb	r3, r3
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8020a92:	4284      	cmp	r4, r0
 8020a94:	d130      	bne.n	8020af8 <dhcp_recv+0xb0>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8020a96:	2b06      	cmp	r3, #6
 8020a98:	d001      	beq.n	8020a9e <dhcp_recv+0x56>
 8020a9a:	42b3      	cmp	r3, r6
 8020a9c:	d3f3      	bcc.n	8020a86 <dhcp_recv+0x3e>
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8020a9e:	6868      	ldr	r0, [r5, #4]
 8020aa0:	f7f8 f8de 	bl	8018c60 <lwip_htonl>
 8020aa4:	f8d9 3000 	ldr.w	r3, [r9]
 8020aa8:	4298      	cmp	r0, r3
 8020aaa:	d125      	bne.n	8020af8 <dhcp_recv+0xb0>
  dhcp_clear_all_options(dhcp);
 8020aac:	4b8d      	ldr	r3, [pc, #564]	; (8020ce4 <dhcp_recv+0x29c>)
 8020aae:	2200      	movs	r2, #0
 8020ab0:	605a      	str	r2, [r3, #4]
 8020ab2:	811a      	strh	r2, [r3, #8]
 8020ab4:	601a      	str	r2, [r3, #0]
  if (p->len < DHCP_SNAME_OFS) {
 8020ab6:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8020aba:	2b2b      	cmp	r3, #43	; 0x2b
 8020abc:	d91c      	bls.n	8020af8 <dhcp_recv+0xb0>
  options_idx = DHCP_OPTIONS_OFS;
 8020abe:	f04f 08f0 	mov.w	r8, #240	; 0xf0
  int parse_sname_as_options = 0;
 8020ac2:	9204      	str	r2, [sp, #16]
  options_idx_max = p->tot_len;
 8020ac4:	f8bb 2008 	ldrh.w	r2, [fp, #8]
 8020ac8:	e9cd 8b02 	strd	r8, fp, [sp, #8]
 8020acc:	4693      	mov	fp, r2
 8020ace:	e9cd a906 	strd	sl, r9, [sp, #24]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020ad2:	e9dd 8502 	ldrd	r8, r5, [sp, #8]
 8020ad6:	e000      	b.n	8020ada <dhcp_recv+0x92>
 8020ad8:	896b      	ldrh	r3, [r5, #10]
 8020ada:	4543      	cmp	r3, r8
    options_idx = (u16_t)(options_idx - q->len);
 8020adc:	eba8 0203 	sub.w	r2, r8, r3
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8020ae0:	ebab 0303 	sub.w	r3, fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8020ae4:	d80e      	bhi.n	8020b04 <dhcp_recv+0xbc>
    q = q->next;
 8020ae6:	682d      	ldr	r5, [r5, #0]
    options_idx = (u16_t)(options_idx - q->len);
 8020ae8:	fa1f f882 	uxth.w	r8, r2
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8020aec:	fa1f fb83 	uxth.w	fp, r3
  while ((q != NULL) && (options_idx >= q->len)) {
 8020af0:	2d00      	cmp	r5, #0
 8020af2:	d1f1      	bne.n	8020ad8 <dhcp_recv+0x90>
 8020af4:	f8dd b00c 	ldr.w	fp, [sp, #12]
  pbuf_free(p);
 8020af8:	4658      	mov	r0, fp
}
 8020afa:	b00b      	add	sp, #44	; 0x2c
 8020afc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  pbuf_free(p);
 8020b00:	f7fa b8e6 	b.w	801acd0 <pbuf_free>
  options = (u8_t *)q->payload;
 8020b04:	686b      	ldr	r3, [r5, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020b06:	45d8      	cmp	r8, fp
 8020b08:	f8cd 8008 	str.w	r8, [sp, #8]
  options = (u8_t *)q->payload;
 8020b0c:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020b0e:	f080 8140 	bcs.w	8020d92 <dhcp_recv+0x34a>
 8020b12:	9c02      	ldr	r4, [sp, #8]
 8020b14:	9b01      	ldr	r3, [sp, #4]
 8020b16:	5d1a      	ldrb	r2, [r3, r4]
 8020b18:	2aff      	cmp	r2, #255	; 0xff
 8020b1a:	f000 813a 	beq.w	8020d92 <dhcp_recv+0x34a>
    u16_t val_offset = (u16_t)(offset + 2);
 8020b1e:	1ca7      	adds	r7, r4, #2
 8020b20:	b2bf      	uxth	r7, r7
    if (val_offset < offset) {
 8020b22:	42bc      	cmp	r4, r7
 8020b24:	d8e6      	bhi.n	8020af4 <dhcp_recv+0xac>
    if ((offset + 1) < q->len) {
 8020b26:	1c61      	adds	r1, r4, #1
 8020b28:	896b      	ldrh	r3, [r5, #10]
 8020b2a:	4299      	cmp	r1, r3
 8020b2c:	f280 8129 	bge.w	8020d82 <dhcp_recv+0x33a>
      len = options[offset + 1];
 8020b30:	9801      	ldr	r0, [sp, #4]
 8020b32:	4420      	add	r0, r4
 8020b34:	7846      	ldrb	r6, [r0, #1]
    switch (op) {
 8020b36:	2a3b      	cmp	r2, #59	; 0x3b
 8020b38:	d83e      	bhi.n	8020bb8 <dhcp_recv+0x170>
 8020b3a:	e8df f012 	tbh	[pc, r2, lsl #1]
 8020b3e:	0040      	.short	0x0040
 8020b40:	003d0053 	.word	0x003d0053
 8020b44:	003d00b4 	.word	0x003d00b4
 8020b48:	009f003d 	.word	0x009f003d
 8020b4c:	003d003d 	.word	0x003d003d
 8020b50:	003d003d 	.word	0x003d003d
 8020b54:	003d003d 	.word	0x003d003d
 8020b58:	003d003d 	.word	0x003d003d
 8020b5c:	003d003d 	.word	0x003d003d
 8020b60:	003d003d 	.word	0x003d003d
 8020b64:	003d003d 	.word	0x003d003d
 8020b68:	003d003d 	.word	0x003d003d
 8020b6c:	003d003d 	.word	0x003d003d
 8020b70:	003d003d 	.word	0x003d003d
 8020b74:	003d003d 	.word	0x003d003d
 8020b78:	003d003d 	.word	0x003d003d
 8020b7c:	003d003d 	.word	0x003d003d
 8020b80:	003d003d 	.word	0x003d003d
 8020b84:	003d003d 	.word	0x003d003d
 8020b88:	003d003d 	.word	0x003d003d
 8020b8c:	003d003d 	.word	0x003d003d
 8020b90:	003d003d 	.word	0x003d003d
 8020b94:	003d003d 	.word	0x003d003d
 8020b98:	003d003d 	.word	0x003d003d
 8020b9c:	003d003d 	.word	0x003d003d
 8020ba0:	003d003d 	.word	0x003d003d
 8020ba4:	00f80115 	.word	0x00f80115
 8020ba8:	00df0109 	.word	0x00df0109
 8020bac:	003d003d 	.word	0x003d003d
 8020bb0:	00ec003d 	.word	0x00ec003d
 8020bb4:	00c3      	.short	0x00c3
 8020bb6:	2600      	movs	r6, #0
    if (op == DHCP_OPTION_PAD) {
 8020bb8:	2a00      	cmp	r2, #0
 8020bba:	f040 82a2 	bne.w	8021102 <dhcp_recv+0x6ba>
      offset++;
 8020bbe:	b28c      	uxth	r4, r1
    if (offset >= q->len) {
 8020bc0:	429c      	cmp	r4, r3
 8020bc2:	f0c0 80e3 	bcc.w	8020d8c <dhcp_recv+0x344>
      offset = (u16_t)(offset - q->len);
 8020bc6:	1ae4      	subs	r4, r4, r3
      offset_max = (u16_t)(offset_max - q->len);
 8020bc8:	ebab 0b03 	sub.w	fp, fp, r3
      offset = (u16_t)(offset - q->len);
 8020bcc:	b2a4      	uxth	r4, r4
      offset_max = (u16_t)(offset_max - q->len);
 8020bce:	fa1f fb8b 	uxth.w	fp, fp
      if (offset < offset_max) {
 8020bd2:	455c      	cmp	r4, fp
 8020bd4:	d28e      	bcs.n	8020af4 <dhcp_recv+0xac>
        q = q->next;
 8020bd6:	682d      	ldr	r5, [r5, #0]
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020bd8:	2d00      	cmp	r5, #0
 8020bda:	f000 81e1 	beq.w	8020fa0 <dhcp_recv+0x558>
        options = (u8_t *)q->payload;
 8020bde:	686b      	ldr	r3, [r5, #4]
 8020be0:	9301      	str	r3, [sp, #4]
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020be2:	e797      	b.n	8020b14 <dhcp_recv+0xcc>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020be4:	2e04      	cmp	r6, #4
 8020be6:	f040 81b5 	bne.w	8020f54 <dhcp_recv+0x50c>
      if (offset + len + 2 > 0xFFFF) {
 8020bea:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020bee:	429c      	cmp	r4, r3
 8020bf0:	dc80      	bgt.n	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020bf2:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8020bf4:	f04f 0806 	mov.w	r8, #6
      offset = (u16_t)(offset + len + 2);
 8020bf8:	b2a4      	uxth	r4, r4
        u32_t value = 0;
 8020bfa:	2300      	movs	r3, #0
 8020bfc:	9405      	str	r4, [sp, #20]
 8020bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8020c00:	4b38      	ldr	r3, [pc, #224]	; (8020ce4 <dhcp_recv+0x29c>)
 8020c02:	eb03 0908 	add.w	r9, r3, r8
 8020c06:	4b38      	ldr	r3, [pc, #224]	; (8020ce8 <dhcp_recv+0x2a0>)
 8020c08:	eb03 0a88 	add.w	sl, r3, r8, lsl #2
 8020c0c:	e02b      	b.n	8020c66 <dhcp_recv+0x21e>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8020c0e:	f899 3000 	ldrb.w	r3, [r9]
 8020c12:	2b00      	cmp	r3, #0
 8020c14:	f040 81a8 	bne.w	8020f68 <dhcp_recv+0x520>
          copy_len = LWIP_MIN(decode_len, 4);
 8020c18:	2e04      	cmp	r6, #4
 8020c1a:	4632      	mov	r2, r6
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020c1c:	463b      	mov	r3, r7
 8020c1e:	a909      	add	r1, sp, #36	; 0x24
          copy_len = LWIP_MIN(decode_len, 4);
 8020c20:	bf28      	it	cs
 8020c22:	2204      	movcs	r2, #4
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020c24:	4628      	mov	r0, r5
          copy_len = LWIP_MIN(decode_len, 4);
 8020c26:	b2d4      	uxtb	r4, r2
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8020c28:	4622      	mov	r2, r4
 8020c2a:	f7fa f8f5 	bl	801ae18 <pbuf_copy_partial>
 8020c2e:	4284      	cmp	r4, r0
 8020c30:	f47f af60 	bne.w	8020af4 <dhcp_recv+0xac>
          if (decode_len > 4) {
 8020c34:	2e04      	cmp	r6, #4
 8020c36:	f240 819a 	bls.w	8020f6e <dhcp_recv+0x526>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020c3a:	f016 0f03 	tst.w	r6, #3
            decode_idx++;
 8020c3e:	f108 0801 	add.w	r8, r8, #1
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020c42:	f040 81a3 	bne.w	8020f8c <dhcp_recv+0x544>
            dhcp_got_option(dhcp, decode_idx);
 8020c46:	2301      	movs	r3, #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020c48:	9809      	ldr	r0, [sp, #36]	; 0x24
            decode_len = (u8_t)(decode_len - 4);
 8020c4a:	3e04      	subs	r6, #4
            dhcp_got_option(dhcp, decode_idx);
 8020c4c:	f809 3b01 	strb.w	r3, [r9], #1
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020c50:	f7f8 f806 	bl	8018c60 <lwip_htonl>
            next_val_offset = (u16_t)(val_offset + 4);
 8020c54:	1d3b      	adds	r3, r7, #4
            decode_len = (u8_t)(decode_len - 4);
 8020c56:	b2f6      	uxtb	r6, r6
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8020c58:	f84a 0b04 	str.w	r0, [sl], #4
            next_val_offset = (u16_t)(val_offset + 4);
 8020c5c:	b29b      	uxth	r3, r3
            if (next_val_offset < val_offset) {
 8020c5e:	429f      	cmp	r7, r3
            goto decode_next;
 8020c60:	461f      	mov	r7, r3
            if (next_val_offset < val_offset) {
 8020c62:	f63f af47 	bhi.w	8020af4 <dhcp_recv+0xac>
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8020c66:	f1b8 0f09 	cmp.w	r8, #9
 8020c6a:	d9d0      	bls.n	8020c0e <dhcp_recv+0x1c6>
 8020c6c:	4b1f      	ldr	r3, [pc, #124]	; (8020cec <dhcp_recv+0x2a4>)
 8020c6e:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8020c72:	491f      	ldr	r1, [pc, #124]	; (8020cf0 <dhcp_recv+0x2a8>)
 8020c74:	481f      	ldr	r0, [pc, #124]	; (8020cf4 <dhcp_recv+0x2ac>)
 8020c76:	f004 f8ed 	bl	8024e54 <iprintf>
 8020c7a:	e7c8      	b.n	8020c0e <dhcp_recv+0x1c6>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020c7c:	07b2      	lsls	r2, r6, #30
 8020c7e:	f040 81ae 	bne.w	8020fde <dhcp_recv+0x596>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8020c82:	2e08      	cmp	r6, #8
 8020c84:	4632      	mov	r2, r6
 8020c86:	bf28      	it	cs
 8020c88:	2208      	movcs	r2, #8
 8020c8a:	b2d2      	uxtb	r2, r2
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020c8c:	42b2      	cmp	r2, r6
 8020c8e:	f240 8241 	bls.w	8021114 <dhcp_recv+0x6cc>
 8020c92:	4b16      	ldr	r3, [pc, #88]	; (8020cec <dhcp_recv+0x2a4>)
 8020c94:	f240 623c 	movw	r2, #1596	; 0x63c
 8020c98:	4917      	ldr	r1, [pc, #92]	; (8020cf8 <dhcp_recv+0x2b0>)
 8020c9a:	4816      	ldr	r0, [pc, #88]	; (8020cf4 <dhcp_recv+0x2ac>)
 8020c9c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020ca0:	f004 f8d8 	bl	8024e54 <iprintf>
 8020ca4:	e728      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020ca6:	2e03      	cmp	r6, #3
 8020ca8:	f240 814a 	bls.w	8020f40 <dhcp_recv+0x4f8>
      if (offset + len + 2 > 0xFFFF) {
 8020cac:	4434      	add	r4, r6
 8020cae:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020cb2:	429c      	cmp	r4, r3
 8020cb4:	f73f af1e 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020cb8:	19bc      	adds	r4, r7, r6
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8020cba:	f04f 0807 	mov.w	r8, #7
        decode_len = 4; /* only copy the first given router */
 8020cbe:	2604      	movs	r6, #4
      offset = (u16_t)(offset + len + 2);
 8020cc0:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020cc2:	e79a      	b.n	8020bfa <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020cc4:	2e04      	cmp	r6, #4
 8020cc6:	f040 8131 	bne.w	8020f2c <dhcp_recv+0x4e4>
      if (offset + len + 2 > 0xFFFF) {
 8020cca:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020cce:	429c      	cmp	r4, r3
 8020cd0:	f73f af10 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020cd4:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T2;
 8020cd6:	f04f 0805 	mov.w	r8, #5
      offset = (u16_t)(offset + len + 2);
 8020cda:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020cdc:	e78d      	b.n	8020bfa <dhcp_recv+0x1b2>
 8020cde:	bf00      	nop
 8020ce0:	2001f1f0 	.word	0x2001f1f0
 8020ce4:	2002e400 	.word	0x2002e400
 8020ce8:	2002e40c 	.word	0x2002e40c
 8020cec:	08044c74 	.word	0x08044c74
 8020cf0:	08044f2c 	.word	0x08044f2c
 8020cf4:	08029a64 	.word	0x08029a64
 8020cf8:	08044ee4 	.word	0x08044ee4
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020cfc:	2e04      	cmp	r6, #4
 8020cfe:	f040 80ed 	bne.w	8020edc <dhcp_recv+0x494>
      if (offset + len + 2 > 0xFFFF) {
 8020d02:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020d06:	429c      	cmp	r4, r3
 8020d08:	f73f aef4 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d0c:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8020d0e:	f04f 0802 	mov.w	r8, #2
      offset = (u16_t)(offset + len + 2);
 8020d12:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d14:	e771      	b.n	8020bfa <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020d16:	2e04      	cmp	r6, #4
 8020d18:	f040 80d6 	bne.w	8020ec8 <dhcp_recv+0x480>
      if (offset + len + 2 > 0xFFFF) {
 8020d1c:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020d20:	429c      	cmp	r4, r3
 8020d22:	f73f aee7 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d26:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_T1;
 8020d28:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020d2a:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d2c:	e765      	b.n	8020bfa <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020d2e:	2e01      	cmp	r6, #1
 8020d30:	f040 80e8 	bne.w	8020f04 <dhcp_recv+0x4bc>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020d34:	9b02      	ldr	r3, [sp, #8]
 8020d36:	2bf0      	cmp	r3, #240	; 0xf0
 8020d38:	f040 8147 	bne.w	8020fca <dhcp_recv+0x582>
      if (offset + len + 2 > 0xFFFF) {
 8020d3c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020d40:	4299      	cmp	r1, r3
 8020d42:	f43f aed7 	beq.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d46:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8020d48:	f04f 0800 	mov.w	r8, #0
      offset = (u16_t)(offset + len + 2);
 8020d4c:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d4e:	e754      	b.n	8020bfa <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020d50:	2e01      	cmp	r6, #1
 8020d52:	f040 80cd 	bne.w	8020ef0 <dhcp_recv+0x4a8>
      if (offset + len + 2 > 0xFFFF) {
 8020d56:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8020d5a:	4299      	cmp	r1, r3
 8020d5c:	f43f aeca 	beq.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d60:	3403      	adds	r4, #3
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8020d62:	46b0      	mov	r8, r6
      offset = (u16_t)(offset + len + 2);
 8020d64:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d66:	e748      	b.n	8020bfa <dhcp_recv+0x1b2>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020d68:	2e04      	cmp	r6, #4
 8020d6a:	f040 80d5 	bne.w	8020f18 <dhcp_recv+0x4d0>
      if (offset + len + 2 > 0xFFFF) {
 8020d6e:	f64f 73f9 	movw	r3, #65529	; 0xfff9
 8020d72:	429c      	cmp	r4, r3
 8020d74:	f73f aebe 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8020d78:	3406      	adds	r4, #6
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8020d7a:	f04f 0803 	mov.w	r8, #3
      offset = (u16_t)(offset + len + 2);
 8020d7e:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8020d80:	e73b      	b.n	8020bfa <dhcp_recv+0x1b2>
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8020d82:	6828      	ldr	r0, [r5, #0]
 8020d84:	b310      	cbz	r0, 8020dcc <dhcp_recv+0x384>
 8020d86:	6840      	ldr	r0, [r0, #4]
 8020d88:	7806      	ldrb	r6, [r0, #0]
 8020d8a:	e6d4      	b.n	8020b36 <dhcp_recv+0xee>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8020d8c:	455c      	cmp	r4, fp
 8020d8e:	f4ff aec1 	bcc.w	8020b14 <dhcp_recv+0xcc>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8020d92:	4bb7      	ldr	r3, [pc, #732]	; (8021070 <dhcp_recv+0x628>)
 8020d94:	781b      	ldrb	r3, [r3, #0]
 8020d96:	b163      	cbz	r3, 8020db2 <dhcp_recv+0x36a>
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020d98:	2300      	movs	r3, #0
 8020d9a:	4ab5      	ldr	r2, [pc, #724]	; (8021070 <dhcp_recv+0x628>)
 8020d9c:	7013      	strb	r3, [r2, #0]
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8020d9e:	4bb5      	ldr	r3, [pc, #724]	; (8021074 <dhcp_recv+0x62c>)
 8020da0:	681b      	ldr	r3, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8020da2:	2b01      	cmp	r3, #1
 8020da4:	f000 8108 	beq.w	8020fb8 <dhcp_recv+0x570>
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8020da8:	2b02      	cmp	r3, #2
 8020daa:	d006      	beq.n	8020dba <dhcp_recv+0x372>
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8020dac:	2b03      	cmp	r3, #3
 8020dae:	f000 8101 	beq.w	8020fb4 <dhcp_recv+0x56c>
  } else if (parse_sname_as_options) {
 8020db2:	9b04      	ldr	r3, [sp, #16]
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	f000 811c 	beq.w	8020ff2 <dhcp_recv+0x5aa>
    parse_sname_as_options = 0;
 8020dba:	2300      	movs	r3, #0
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8020dbc:	f04f 0b6c 	mov.w	fp, #108	; 0x6c
    parse_sname_as_options = 0;
 8020dc0:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_SNAME_OFS;
 8020dc2:	232c      	movs	r3, #44	; 0x2c
 8020dc4:	9302      	str	r3, [sp, #8]
  while ((q != NULL) && (options_idx >= q->len)) {
 8020dc6:	9b03      	ldr	r3, [sp, #12]
 8020dc8:	895b      	ldrh	r3, [r3, #10]
 8020dca:	e682      	b.n	8020ad2 <dhcp_recv+0x8a>
    switch (op) {
 8020dcc:	1e50      	subs	r0, r2, #1
 8020dce:	283a      	cmp	r0, #58	; 0x3a
 8020dd0:	f63f aef1 	bhi.w	8020bb6 <dhcp_recv+0x16e>
 8020dd4:	a601      	add	r6, pc, #4	; (adr r6, 8020ddc <dhcp_recv+0x394>)
 8020dd6:	f856 f020 	ldr.w	pc, [r6, r0, lsl #2]
 8020dda:	bf00      	nop
 8020ddc:	08020f55 	.word	0x08020f55
 8020de0:	08020bb7 	.word	0x08020bb7
 8020de4:	08020f41 	.word	0x08020f41
 8020de8:	08020bb7 	.word	0x08020bb7
 8020dec:	08020bb7 	.word	0x08020bb7
 8020df0:	08020bb7 	.word	0x08020bb7
 8020df4:	08020bb7 	.word	0x08020bb7
 8020df8:	08020bb7 	.word	0x08020bb7
 8020dfc:	08020bb7 	.word	0x08020bb7
 8020e00:	08020bb7 	.word	0x08020bb7
 8020e04:	08020bb7 	.word	0x08020bb7
 8020e08:	08020bb7 	.word	0x08020bb7
 8020e0c:	08020bb7 	.word	0x08020bb7
 8020e10:	08020bb7 	.word	0x08020bb7
 8020e14:	08020bb7 	.word	0x08020bb7
 8020e18:	08020bb7 	.word	0x08020bb7
 8020e1c:	08020bb7 	.word	0x08020bb7
 8020e20:	08020bb7 	.word	0x08020bb7
 8020e24:	08020bb7 	.word	0x08020bb7
 8020e28:	08020bb7 	.word	0x08020bb7
 8020e2c:	08020bb7 	.word	0x08020bb7
 8020e30:	08020bb7 	.word	0x08020bb7
 8020e34:	08020bb7 	.word	0x08020bb7
 8020e38:	08020bb7 	.word	0x08020bb7
 8020e3c:	08020bb7 	.word	0x08020bb7
 8020e40:	08020bb7 	.word	0x08020bb7
 8020e44:	08020bb7 	.word	0x08020bb7
 8020e48:	08020bb7 	.word	0x08020bb7
 8020e4c:	08020bb7 	.word	0x08020bb7
 8020e50:	08020bb7 	.word	0x08020bb7
 8020e54:	08020bb7 	.word	0x08020bb7
 8020e58:	08020bb7 	.word	0x08020bb7
 8020e5c:	08020bb7 	.word	0x08020bb7
 8020e60:	08020bb7 	.word	0x08020bb7
 8020e64:	08020bb7 	.word	0x08020bb7
 8020e68:	08020bb7 	.word	0x08020bb7
 8020e6c:	08020bb7 	.word	0x08020bb7
 8020e70:	08020bb7 	.word	0x08020bb7
 8020e74:	08020bb7 	.word	0x08020bb7
 8020e78:	08020bb7 	.word	0x08020bb7
 8020e7c:	08020bb7 	.word	0x08020bb7
 8020e80:	08020bb7 	.word	0x08020bb7
 8020e84:	08020bb7 	.word	0x08020bb7
 8020e88:	08020bb7 	.word	0x08020bb7
 8020e8c:	08020bb7 	.word	0x08020bb7
 8020e90:	08020bb7 	.word	0x08020bb7
 8020e94:	08020bb7 	.word	0x08020bb7
 8020e98:	08020bb7 	.word	0x08020bb7
 8020e9c:	08020bb7 	.word	0x08020bb7
 8020ea0:	08020bb7 	.word	0x08020bb7
 8020ea4:	08020f19 	.word	0x08020f19
 8020ea8:	08020f05 	.word	0x08020f05
 8020eac:	08020ef1 	.word	0x08020ef1
 8020eb0:	08020edd 	.word	0x08020edd
 8020eb4:	08020bb7 	.word	0x08020bb7
 8020eb8:	08020bb7 	.word	0x08020bb7
 8020ebc:	08020bb7 	.word	0x08020bb7
 8020ec0:	08020ec9 	.word	0x08020ec9
 8020ec4:	08020f2d 	.word	0x08020f2d
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020ec8:	4b6b      	ldr	r3, [pc, #428]	; (8021078 <dhcp_recv+0x630>)
 8020eca:	f240 625d 	movw	r2, #1629	; 0x65d
 8020ece:	496b      	ldr	r1, [pc, #428]	; (802107c <dhcp_recv+0x634>)
 8020ed0:	486b      	ldr	r0, [pc, #428]	; (8021080 <dhcp_recv+0x638>)
 8020ed2:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020ed6:	f003 ffbd 	bl	8024e54 <iprintf>
 8020eda:	e60d      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020edc:	4b66      	ldr	r3, [pc, #408]	; (8021078 <dhcp_recv+0x630>)
 8020ede:	f240 6259 	movw	r2, #1625	; 0x659
 8020ee2:	4966      	ldr	r1, [pc, #408]	; (802107c <dhcp_recv+0x634>)
 8020ee4:	4866      	ldr	r0, [pc, #408]	; (8021080 <dhcp_recv+0x638>)
 8020ee6:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020eea:	f003 ffb3 	bl	8024e54 <iprintf>
 8020eee:	e603      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020ef0:	4b61      	ldr	r3, [pc, #388]	; (8021078 <dhcp_recv+0x630>)
 8020ef2:	f240 6255 	movw	r2, #1621	; 0x655
 8020ef6:	4963      	ldr	r1, [pc, #396]	; (8021084 <dhcp_recv+0x63c>)
 8020ef8:	4861      	ldr	r0, [pc, #388]	; (8021080 <dhcp_recv+0x638>)
 8020efa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020efe:	f003 ffa9 	bl	8024e54 <iprintf>
 8020f02:	e5f9      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8020f04:	4b5c      	ldr	r3, [pc, #368]	; (8021078 <dhcp_recv+0x630>)
 8020f06:	f240 624f 	movw	r2, #1615	; 0x64f
 8020f0a:	495e      	ldr	r1, [pc, #376]	; (8021084 <dhcp_recv+0x63c>)
 8020f0c:	485c      	ldr	r0, [pc, #368]	; (8021080 <dhcp_recv+0x638>)
 8020f0e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f12:	f003 ff9f 	bl	8024e54 <iprintf>
 8020f16:	e5ef      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020f18:	4b57      	ldr	r3, [pc, #348]	; (8021078 <dhcp_recv+0x630>)
 8020f1a:	f240 6241 	movw	r2, #1601	; 0x641
 8020f1e:	4957      	ldr	r1, [pc, #348]	; (802107c <dhcp_recv+0x634>)
 8020f20:	4857      	ldr	r0, [pc, #348]	; (8021080 <dhcp_recv+0x638>)
 8020f22:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f26:	f003 ff95 	bl	8024e54 <iprintf>
 8020f2a:	e5e5      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020f2c:	4b52      	ldr	r3, [pc, #328]	; (8021078 <dhcp_recv+0x630>)
 8020f2e:	f240 6261 	movw	r2, #1633	; 0x661
 8020f32:	4952      	ldr	r1, [pc, #328]	; (802107c <dhcp_recv+0x634>)
 8020f34:	4852      	ldr	r0, [pc, #328]	; (8021080 <dhcp_recv+0x638>)
 8020f36:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f3a:	f003 ff8b 	bl	8024e54 <iprintf>
 8020f3e:	e5db      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8020f40:	4b4d      	ldr	r3, [pc, #308]	; (8021078 <dhcp_recv+0x630>)
 8020f42:	f240 6233 	movw	r2, #1587	; 0x633
 8020f46:	4950      	ldr	r1, [pc, #320]	; (8021088 <dhcp_recv+0x640>)
 8020f48:	484d      	ldr	r0, [pc, #308]	; (8021080 <dhcp_recv+0x638>)
 8020f4a:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f4e:	f003 ff81 	bl	8024e54 <iprintf>
 8020f52:	e5d1      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8020f54:	4b48      	ldr	r3, [pc, #288]	; (8021078 <dhcp_recv+0x630>)
 8020f56:	f240 622e 	movw	r2, #1582	; 0x62e
 8020f5a:	4948      	ldr	r1, [pc, #288]	; (802107c <dhcp_recv+0x634>)
 8020f5c:	4848      	ldr	r0, [pc, #288]	; (8021080 <dhcp_recv+0x638>)
 8020f5e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f62:	f003 ff77 	bl	8024e54 <iprintf>
 8020f66:	e5c7      	b.n	8020af8 <dhcp_recv+0xb0>
 8020f68:	9c05      	ldr	r4, [sp, #20]
    if (offset >= q->len) {
 8020f6a:	896b      	ldrh	r3, [r5, #10]
 8020f6c:	e628      	b.n	8020bc0 <dhcp_recv+0x178>
          } else if (decode_len == 4) {
 8020f6e:	9c05      	ldr	r4, [sp, #20]
 8020f70:	d027      	beq.n	8020fc2 <dhcp_recv+0x57a>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8020f72:	2e01      	cmp	r6, #1
 8020f74:	f040 80bb 	bne.w	80210ee <dhcp_recv+0x6a6>
            value = ((u8_t *)&value)[0];
 8020f78:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020f7c:	4b3d      	ldr	r3, [pc, #244]	; (8021074 <dhcp_recv+0x62c>)
          dhcp_got_option(dhcp, decode_idx);
 8020f7e:	4a3c      	ldr	r2, [pc, #240]	; (8021070 <dhcp_recv+0x628>)
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020f80:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
          dhcp_got_option(dhcp, decode_idx);
 8020f84:	2301      	movs	r3, #1
 8020f86:	f802 3008 	strb.w	r3, [r2, r8]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8020f8a:	e7ee      	b.n	8020f6a <dhcp_recv+0x522>
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8020f8c:	4b3a      	ldr	r3, [pc, #232]	; (8021078 <dhcp_recv+0x630>)
 8020f8e:	f240 6281 	movw	r2, #1665	; 0x681
 8020f92:	493e      	ldr	r1, [pc, #248]	; (802108c <dhcp_recv+0x644>)
 8020f94:	483a      	ldr	r0, [pc, #232]	; (8021080 <dhcp_recv+0x638>)
 8020f96:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020f9a:	f003 ff5b 	bl	8024e54 <iprintf>
 8020f9e:	e5ab      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8020fa0:	4b35      	ldr	r3, [pc, #212]	; (8021078 <dhcp_recv+0x630>)
 8020fa2:	f240 629d 	movw	r2, #1693	; 0x69d
 8020fa6:	493a      	ldr	r1, [pc, #232]	; (8021090 <dhcp_recv+0x648>)
 8020fa8:	4835      	ldr	r0, [pc, #212]	; (8021080 <dhcp_recv+0x638>)
 8020faa:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020fae:	f003 ff51 	bl	8024e54 <iprintf>
 8020fb2:	e5a1      	b.n	8020af8 <dhcp_recv+0xb0>
      parse_sname_as_options = 1;
 8020fb4:	2301      	movs	r3, #1
 8020fb6:	9304      	str	r3, [sp, #16]
    options_idx = DHCP_FILE_OFS;
 8020fb8:	236c      	movs	r3, #108	; 0x6c
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8020fba:	f04f 0bec 	mov.w	fp, #236	; 0xec
    options_idx = DHCP_FILE_OFS;
 8020fbe:	9302      	str	r3, [sp, #8]
 8020fc0:	e701      	b.n	8020dc6 <dhcp_recv+0x37e>
            value = lwip_ntohl(value);
 8020fc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8020fc4:	f7f7 fe4c 	bl	8018c60 <lwip_htonl>
 8020fc8:	e7d8      	b.n	8020f7c <dhcp_recv+0x534>
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8020fca:	4b2b      	ldr	r3, [pc, #172]	; (8021078 <dhcp_recv+0x630>)
 8020fcc:	f240 6251 	movw	r2, #1617	; 0x651
 8020fd0:	4930      	ldr	r1, [pc, #192]	; (8021094 <dhcp_recv+0x64c>)
 8020fd2:	482b      	ldr	r0, [pc, #172]	; (8021080 <dhcp_recv+0x638>)
 8020fd4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020fd8:	f003 ff3c 	bl	8024e54 <iprintf>
 8020fdc:	e58c      	b.n	8020af8 <dhcp_recv+0xb0>
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8020fde:	4b26      	ldr	r3, [pc, #152]	; (8021078 <dhcp_recv+0x630>)
 8020fe0:	f240 6239 	movw	r2, #1593	; 0x639
 8020fe4:	492c      	ldr	r1, [pc, #176]	; (8021098 <dhcp_recv+0x650>)
 8020fe6:	4826      	ldr	r0, [pc, #152]	; (8021080 <dhcp_recv+0x638>)
 8020fe8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020fec:	f003 ff32 	bl	8024e54 <iprintf>
 8020ff0:	e582      	b.n	8020af8 <dhcp_recv+0xb0>
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8020ff2:	4b1f      	ldr	r3, [pc, #124]	; (8021070 <dhcp_recv+0x628>)
 8020ff4:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8020ff8:	785b      	ldrb	r3, [r3, #1]
 8020ffa:	e9dd a906 	ldrd	sl, r9, [sp, #24]
 8020ffe:	2b00      	cmp	r3, #0
 8021000:	f43f ad7a 	beq.w	8020af8 <dhcp_recv+0xb0>
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8021004:	4a1b      	ldr	r2, [pc, #108]	; (8021074 <dhcp_recv+0x62c>)
  msg_in = (struct dhcp_msg *)p->payload;
 8021006:	f8db 4004 	ldr.w	r4, [fp, #4]
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 802100a:	7913      	ldrb	r3, [r2, #4]
  if (msg_type == DHCP_ACK) {
 802100c:	2b05      	cmp	r3, #5
 802100e:	d01d      	beq.n	802104c <dhcp_recv+0x604>
  else if ((msg_type == DHCP_NAK) &&
 8021010:	2b06      	cmp	r3, #6
 8021012:	d043      	beq.n	802109c <dhcp_recv+0x654>
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8021014:	2b02      	cmp	r3, #2
 8021016:	f47f ad6f 	bne.w	8020af8 <dhcp_recv+0xb0>
 802101a:	f899 3005 	ldrb.w	r3, [r9, #5]
 802101e:	2b06      	cmp	r3, #6
 8021020:	f47f ad6a 	bne.w	8020af8 <dhcp_recv+0xb0>
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8021024:	4b12      	ldr	r3, [pc, #72]	; (8021070 <dhcp_recv+0x628>)
 8021026:	789b      	ldrb	r3, [r3, #2]
 8021028:	2b00      	cmp	r3, #0
 802102a:	f43f ad65 	beq.w	8020af8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 802102e:	f8da 5028 	ldr.w	r5, [sl, #40]	; 0x28
    dhcp->request_timeout = 0; /* stop timer */
 8021032:	9b04      	ldr	r3, [sp, #16]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021034:	6890      	ldr	r0, [r2, #8]
    dhcp->request_timeout = 0; /* stop timer */
 8021036:	812b      	strh	r3, [r5, #8]
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021038:	f7f7 fe12 	bl	8018c60 <lwip_htonl>
 802103c:	4603      	mov	r3, r0
    dhcp_select(netif);
 802103e:	4650      	mov	r0, sl
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8021040:	61ab      	str	r3, [r5, #24]
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8021042:	6923      	ldr	r3, [r4, #16]
 8021044:	61eb      	str	r3, [r5, #28]
    dhcp_select(netif);
 8021046:	f7ff fbbf 	bl	80207c8 <dhcp_select.isra.0>
 802104a:	e555      	b.n	8020af8 <dhcp_recv+0xb0>
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 802104c:	f899 3005 	ldrb.w	r3, [r9, #5]
 8021050:	2b01      	cmp	r3, #1
 8021052:	d03f      	beq.n	80210d4 <dhcp_recv+0x68c>
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8021054:	3b03      	subs	r3, #3
 8021056:	2b02      	cmp	r3, #2
 8021058:	f63f ad4e 	bhi.w	8020af8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 802105c:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 8021060:	4621      	mov	r1, r4
 8021062:	f7ff f8c1 	bl	80201e8 <dhcp_handle_ack.isra.0>
      dhcp_bind(netif);
 8021066:	4650      	mov	r0, sl
 8021068:	f7fe ffb2 	bl	801ffd0 <dhcp_bind>
 802106c:	e544      	b.n	8020af8 <dhcp_recv+0xb0>
 802106e:	bf00      	nop
 8021070:	2002e400 	.word	0x2002e400
 8021074:	2002e40c 	.word	0x2002e40c
 8021078:	08044c74 	.word	0x08044c74
 802107c:	08044ed8 	.word	0x08044ed8
 8021080:	08029a64 	.word	0x08029a64
 8021084:	08044f08 	.word	0x08044f08
 8021088:	08044ee4 	.word	0x08044ee4
 802108c:	08044f40 	.word	0x08044f40
 8021090:	08044f6c 	.word	0x08044f6c
 8021094:	08044f14 	.word	0x08044f14
 8021098:	08044ef8 	.word	0x08044ef8
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 802109c:	f899 3005 	ldrb.w	r3, [r9, #5]
 80210a0:	1eda      	subs	r2, r3, #3
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80210a2:	2a02      	cmp	r2, #2
 80210a4:	d902      	bls.n	80210ac <dhcp_recv+0x664>
 80210a6:	2b01      	cmp	r3, #1
 80210a8:	f47f ad26 	bne.w	8020af8 <dhcp_recv+0xb0>
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80210ac:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
  if (new_state != dhcp->state) {
 80210b0:	795a      	ldrb	r2, [r3, #5]
 80210b2:	2a0c      	cmp	r2, #12
 80210b4:	d004      	beq.n	80210c0 <dhcp_recv+0x678>
    dhcp->tries = 0;
 80210b6:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80210b8:	210c      	movs	r1, #12
    dhcp->tries = 0;
 80210ba:	719a      	strb	r2, [r3, #6]
    dhcp->state = new_state;
 80210bc:	7159      	strb	r1, [r3, #5]
    dhcp->request_timeout = 0;
 80210be:	811a      	strh	r2, [r3, #8]
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80210c0:	4b1c      	ldr	r3, [pc, #112]	; (8021134 <dhcp_recv+0x6ec>)
 80210c2:	4650      	mov	r0, sl
 80210c4:	461a      	mov	r2, r3
 80210c6:	4619      	mov	r1, r3
 80210c8:	f7f9 f968 	bl	801a39c <netif_set_addr>
  dhcp_discover(netif);
 80210cc:	4650      	mov	r0, sl
 80210ce:	f7ff fa95 	bl	80205fc <dhcp_discover>
}
 80210d2:	e511      	b.n	8020af8 <dhcp_recv+0xb0>
      dhcp_handle_ack(netif, msg_in);
 80210d4:	4621      	mov	r1, r4
 80210d6:	f8da 0028 	ldr.w	r0, [sl, #40]	; 0x28
 80210da:	f7ff f885 	bl	80201e8 <dhcp_handle_ack.isra.0>
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80210de:	f89a 3035 	ldrb.w	r3, [sl, #53]	; 0x35
        dhcp_check(netif);
 80210e2:	4650      	mov	r0, sl
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80210e4:	0719      	lsls	r1, r3, #28
 80210e6:	d5bf      	bpl.n	8021068 <dhcp_recv+0x620>
        dhcp_check(netif);
 80210e8:	f7fe ff5a 	bl	801ffa0 <dhcp_check>
 80210ec:	e504      	b.n	8020af8 <dhcp_recv+0xb0>
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80210ee:	4b12      	ldr	r3, [pc, #72]	; (8021138 <dhcp_recv+0x6f0>)
 80210f0:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80210f4:	4911      	ldr	r1, [pc, #68]	; (802113c <dhcp_recv+0x6f4>)
 80210f6:	4812      	ldr	r0, [pc, #72]	; (8021140 <dhcp_recv+0x6f8>)
 80210f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80210fc:	f003 feaa 	bl	8024e54 <iprintf>
 8021100:	e4fa      	b.n	8020af8 <dhcp_recv+0xb0>
      if (offset + len + 2 > 0xFFFF) {
 8021102:	4434      	add	r4, r6
 8021104:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8021108:	4294      	cmp	r4, r2
 802110a:	f73f acf3 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 802110e:	19bc      	adds	r4, r7, r6
 8021110:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021112:	e555      	b.n	8020bc0 <dhcp_recv+0x178>
      if (offset + len + 2 > 0xFFFF) {
 8021114:	4434      	add	r4, r6
 8021116:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 802111a:	428c      	cmp	r4, r1
 802111c:	f73f acea 	bgt.w	8020af4 <dhcp_recv+0xac>
      offset = (u16_t)(offset + len + 2);
 8021120:	19bc      	adds	r4, r7, r6
 8021122:	b2a4      	uxth	r4, r4
      if (decode_len > 0) {
 8021124:	2e00      	cmp	r6, #0
 8021126:	f43f ad4b 	beq.w	8020bc0 <dhcp_recv+0x178>
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 802112a:	4616      	mov	r6, r2
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 802112c:	f04f 0808 	mov.w	r8, #8
 8021130:	e563      	b.n	8020bfa <dhcp_recv+0x1b2>
 8021132:	bf00      	nop
 8021134:	08045328 	.word	0x08045328
 8021138:	08044c74 	.word	0x08044c74
 802113c:	08044f58 	.word	0x08044f58
 8021140:	08029a64 	.word	0x08029a64

08021144 <dhcp_network_changed>:
{
 8021144:	b538      	push	{r3, r4, r5, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021146:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (!dhcp) {
 8021148:	b135      	cbz	r5, 8021158 <dhcp_network_changed+0x14>
  switch (dhcp->state) {
 802114a:	796b      	ldrb	r3, [r5, #5]
 802114c:	4604      	mov	r4, r0
 802114e:	2b05      	cmp	r3, #5
 8021150:	d803      	bhi.n	802115a <dhcp_network_changed+0x16>
 8021152:	2b02      	cmp	r3, #2
 8021154:	d813      	bhi.n	802117e <dhcp_network_changed+0x3a>
 8021156:	b95b      	cbnz	r3, 8021170 <dhcp_network_changed+0x2c>
}
 8021158:	bd38      	pop	{r3, r4, r5, pc}
  switch (dhcp->state) {
 802115a:	2b0a      	cmp	r3, #10
 802115c:	d00f      	beq.n	802117e <dhcp_network_changed+0x3a>
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 802115e:	2b0c      	cmp	r3, #12
 8021160:	d906      	bls.n	8021170 <dhcp_network_changed+0x2c>
 8021162:	4b0a      	ldr	r3, [pc, #40]	; (802118c <dhcp_network_changed+0x48>)
 8021164:	f240 326d 	movw	r2, #877	; 0x36d
 8021168:	4909      	ldr	r1, [pc, #36]	; (8021190 <dhcp_network_changed+0x4c>)
 802116a:	480a      	ldr	r0, [pc, #40]	; (8021194 <dhcp_network_changed+0x50>)
 802116c:	f003 fe72 	bl	8024e54 <iprintf>
      dhcp->tries = 0;
 8021170:	2300      	movs	r3, #0
      dhcp_discover(netif);
 8021172:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8021174:	71ab      	strb	r3, [r5, #6]
}
 8021176:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_discover(netif);
 802117a:	f7ff ba3f 	b.w	80205fc <dhcp_discover>
      dhcp->tries = 0;
 802117e:	2300      	movs	r3, #0
      dhcp_reboot(netif);
 8021180:	4620      	mov	r0, r4
      dhcp->tries = 0;
 8021182:	71ab      	strb	r3, [r5, #6]
}
 8021184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      dhcp_reboot(netif);
 8021188:	f7ff b938 	b.w	80203fc <dhcp_reboot.isra.0>
 802118c:	08044c74 	.word	0x08044c74
 8021190:	08044fb4 	.word	0x08044fb4
 8021194:	08029a64 	.word	0x08029a64

08021198 <dhcp_arp_reply>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021198:	2800      	cmp	r0, #0
 802119a:	d066      	beq.n	802126a <dhcp_arp_reply+0xd2>
{
 802119c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  dhcp = netif_dhcp_data(netif);
 80211a0:	6a85      	ldr	r5, [r0, #40]	; 0x28
{
 80211a2:	b085      	sub	sp, #20
 80211a4:	4604      	mov	r4, r0
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80211a6:	b115      	cbz	r5, 80211ae <dhcp_arp_reply+0x16>
 80211a8:	796b      	ldrb	r3, [r5, #5]
 80211aa:	2b08      	cmp	r3, #8
 80211ac:	d002      	beq.n	80211b4 <dhcp_arp_reply+0x1c>
}
 80211ae:	b005      	add	sp, #20
 80211b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80211b4:	680a      	ldr	r2, [r1, #0]
 80211b6:	69eb      	ldr	r3, [r5, #28]
 80211b8:	429a      	cmp	r2, r3
 80211ba:	d1f8      	bne.n	80211ae <dhcp_arp_reply+0x16>
    dhcp->tries = 0;
 80211bc:	2200      	movs	r2, #0
    dhcp->state = new_state;
 80211be:	230c      	movs	r3, #12
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80211c0:	4629      	mov	r1, r5
    dhcp->tries = 0;
 80211c2:	71aa      	strb	r2, [r5, #6]
    dhcp->state = new_state;
 80211c4:	716b      	strb	r3, [r5, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80211c6:	f10d 030e 	add.w	r3, sp, #14
    dhcp->request_timeout = 0;
 80211ca:	812a      	strh	r2, [r5, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 80211cc:	2204      	movs	r2, #4
 80211ce:	f7ff f863 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 80211d2:	4606      	mov	r6, r0
 80211d4:	2800      	cmp	r0, #0
 80211d6:	d040      	beq.n	802125a <dhcp_arp_reply+0xc2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80211d8:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 80211dc:	6847      	ldr	r7, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80211de:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80211e2:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80211e4:	2b44      	cmp	r3, #68	; 0x44
 80211e6:	d847      	bhi.n	8021278 <dhcp_arp_reply+0xe0>
  options[options_out_len++] = option_type;
 80211e8:	2232      	movs	r2, #50	; 0x32
 80211ea:	f109 0301 	add.w	r3, r9, #1
  options[options_out_len++] = option_len;
 80211ee:	f109 0802 	add.w	r8, r9, #2
  options[options_out_len++] = option_type;
 80211f2:	f807 2009 	strb.w	r2, [r7, r9]
  options[options_out_len++] = option_len;
 80211f6:	b29b      	uxth	r3, r3
 80211f8:	2204      	movs	r2, #4
 80211fa:	fa1f f888 	uxth.w	r8, r8
 80211fe:	54fa      	strb	r2, [r7, r3]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021200:	69e8      	ldr	r0, [r5, #28]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8021202:	f8ad 800e 	strh.w	r8, [sp, #14]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021206:	f7f7 fd2b 	bl	8018c60 <lwip_htonl>
 802120a:	4639      	mov	r1, r7
 802120c:	4602      	mov	r2, r0
 802120e:	4640      	mov	r0, r8
 8021210:	f7fe fea2 	bl	801ff58 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 8021214:	1c41      	adds	r1, r0, #1
 8021216:	23ff      	movs	r3, #255	; 0xff
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8021218:	f8ad 000e 	strh.w	r0, [sp, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 802121c:	b289      	uxth	r1, r1
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 802121e:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021220:	543b      	strb	r3, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021222:	2943      	cmp	r1, #67	; 0x43
 8021224:	d807      	bhi.n	8021236 <dhcp_arp_reply+0x9e>
    options[options_out_len++] = 0;
 8021226:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802122a:	1878      	adds	r0, r7, r1
 802122c:	2100      	movs	r1, #0
 802122e:	b292      	uxth	r2, r2
 8021230:	f002 fe72 	bl	8023f18 <memset>
 8021234:	2144      	movs	r1, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8021236:	31f0      	adds	r1, #240	; 0xf0
 8021238:	4630      	mov	r0, r6
 802123a:	b289      	uxth	r1, r1
 802123c:	f7f9 fc30 	bl	801aaa0 <pbuf_realloc>
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8021240:	4911      	ldr	r1, [pc, #68]	; (8021288 <dhcp_arp_reply+0xf0>)
 8021242:	4a12      	ldr	r2, [pc, #72]	; (802128c <dhcp_arp_reply+0xf4>)
 8021244:	2343      	movs	r3, #67	; 0x43
 8021246:	9400      	str	r4, [sp, #0]
 8021248:	6808      	ldr	r0, [r1, #0]
 802124a:	4631      	mov	r1, r6
 802124c:	9201      	str	r2, [sp, #4]
 802124e:	4a10      	ldr	r2, [pc, #64]	; (8021290 <dhcp_arp_reply+0xf8>)
 8021250:	f7fe fc6c 	bl	801fb2c <udp_sendto_if_src>
    pbuf_free(p_out);
 8021254:	4630      	mov	r0, r6
 8021256:	f7f9 fd3b 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 802125a:	79ab      	ldrb	r3, [r5, #6]
 802125c:	2bff      	cmp	r3, #255	; 0xff
 802125e:	d001      	beq.n	8021264 <dhcp_arp_reply+0xcc>
    dhcp->tries++;
 8021260:	3301      	adds	r3, #1
 8021262:	71ab      	strb	r3, [r5, #6]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021264:	2314      	movs	r3, #20
 8021266:	812b      	strh	r3, [r5, #8]
  return result;
 8021268:	e7a1      	b.n	80211ae <dhcp_arp_reply+0x16>
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 802126a:	4b0a      	ldr	r3, [pc, #40]	; (8021294 <dhcp_arp_reply+0xfc>)
 802126c:	f240 328b 	movw	r2, #907	; 0x38b
 8021270:	4909      	ldr	r1, [pc, #36]	; (8021298 <dhcp_arp_reply+0x100>)
 8021272:	480a      	ldr	r0, [pc, #40]	; (802129c <dhcp_arp_reply+0x104>)
 8021274:	f003 bdee 	b.w	8024e54 <iprintf>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021278:	4b06      	ldr	r3, [pc, #24]	; (8021294 <dhcp_arp_reply+0xfc>)
 802127a:	f240 529a 	movw	r2, #1434	; 0x59a
 802127e:	4908      	ldr	r1, [pc, #32]	; (80212a0 <dhcp_arp_reply+0x108>)
 8021280:	4806      	ldr	r0, [pc, #24]	; (802129c <dhcp_arp_reply+0x104>)
 8021282:	f003 fde7 	bl	8024e54 <iprintf>
 8021286:	e7af      	b.n	80211e8 <dhcp_arp_reply+0x50>
 8021288:	2002e3f8 	.word	0x2002e3f8
 802128c:	08045328 	.word	0x08045328
 8021290:	0804532c 	.word	0x0804532c
 8021294:	08044c74 	.word	0x08044c74
 8021298:	0802c704 	.word	0x0802c704
 802129c:	08029a64 	.word	0x08029a64
 80212a0:	08044de8 	.word	0x08044de8

080212a4 <dhcp_renew>:
{
 80212a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80212a8:	6a87      	ldr	r7, [r0, #40]	; 0x28
{
 80212aa:	b087      	sub	sp, #28
 80212ac:	4683      	mov	fp, r0
  if (new_state != dhcp->state) {
 80212ae:	797b      	ldrb	r3, [r7, #5]
 80212b0:	2b05      	cmp	r3, #5
 80212b2:	d004      	beq.n	80212be <dhcp_renew+0x1a>
    dhcp->tries = 0;
 80212b4:	2300      	movs	r3, #0
    dhcp->state = new_state;
 80212b6:	2205      	movs	r2, #5
    dhcp->tries = 0;
 80212b8:	71bb      	strb	r3, [r7, #6]
    dhcp->state = new_state;
 80212ba:	717a      	strb	r2, [r7, #5]
    dhcp->request_timeout = 0;
 80212bc:	813b      	strh	r3, [r7, #8]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80212be:	f10d 0316 	add.w	r3, sp, #22
 80212c2:	2203      	movs	r2, #3
 80212c4:	4639      	mov	r1, r7
 80212c6:	4658      	mov	r0, fp
 80212c8:	f7fe ffe6 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 80212cc:	4605      	mov	r5, r0
 80212ce:	2800      	cmp	r0, #0
 80212d0:	f000 80b9 	beq.w	8021446 <dhcp_renew+0x1a2>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80212d4:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80212d8:	6846      	ldr	r6, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80212da:	f104 0804 	add.w	r8, r4, #4
 80212de:	f104 0902 	add.w	r9, r4, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80212e2:	36f0      	adds	r6, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80212e4:	f1b8 0f44 	cmp.w	r8, #68	; 0x44
 80212e8:	f200 8095 	bhi.w	8021416 <dhcp_renew+0x172>
  options[options_out_len++] = option_type;
 80212ec:	2239      	movs	r2, #57	; 0x39
 80212ee:	1c63      	adds	r3, r4, #1
 80212f0:	fa1f f189 	uxth.w	r1, r9
 80212f4:	5532      	strb	r2, [r6, r4]
  options[options_out_len++] = option_len;
 80212f6:	b29b      	uxth	r3, r3
 80212f8:	2202      	movs	r2, #2
 80212fa:	9103      	str	r1, [sp, #12]
 80212fc:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80212fe:	188b      	adds	r3, r1, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021300:	f8bb a02c 	ldrh.w	sl, [fp, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021304:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8021306:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802130a:	f200 8094 	bhi.w	8021436 <dhcp_renew+0x192>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802130e:	1ce3      	adds	r3, r4, #3
 8021310:	fa1f f988 	uxth.w	r9, r8
 8021314:	ea4f 221a 	mov.w	r2, sl, lsr #8
 8021318:	9903      	ldr	r1, [sp, #12]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802131a:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 802131c:	5472      	strb	r2, [r6, r1]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 802131e:	f806 a003 	strb.w	sl, [r6, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021322:	f109 0306 	add.w	r3, r9, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021326:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802132a:	2b44      	cmp	r3, #68	; 0x44
 802132c:	d87b      	bhi.n	8021426 <dhcp_renew+0x182>
  options[options_out_len++] = option_len;
 802132e:	f104 0806 	add.w	r8, r4, #6
  options[options_out_len++] = option_type;
 8021332:	2237      	movs	r2, #55	; 0x37
 8021334:	1d63      	adds	r3, r4, #5
 8021336:	f8df a134 	ldr.w	sl, [pc, #308]	; 802146c <dhcp_renew+0x1c8>
  options[options_out_len++] = option_len;
 802133a:	fa1f f888 	uxth.w	r8, r8
  options[options_out_len++] = option_type;
 802133e:	f806 2009 	strb.w	r2, [r6, r9]
  options[options_out_len++] = option_len;
 8021342:	b29b      	uxth	r3, r3
 8021344:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021346:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802134a:	f04f 0901 	mov.w	r9, #1
  options[options_out_len++] = option_len;
 802134e:	54f2      	strb	r2, [r6, r3]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021350:	493e      	ldr	r1, [pc, #248]	; (802144c <dhcp_renew+0x1a8>)
 8021352:	4b3f      	ldr	r3, [pc, #252]	; (8021450 <dhcp_renew+0x1ac>)
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021354:	f8ad 8016 	strh.w	r8, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021358:	d80f      	bhi.n	802137a <dhcp_renew+0xd6>
  options[options_out_len++] = value;
 802135a:	f108 0201 	add.w	r2, r8, #1
 802135e:	f806 9008 	strb.w	r9, [r6, r8]
 8021362:	fa1f f882 	uxth.w	r8, r2
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021366:	4a3b      	ldr	r2, [pc, #236]	; (8021454 <dhcp_renew+0x1b0>)
 8021368:	4592      	cmp	sl, r2
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802136a:	f8ad 8016 	strh.w	r8, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802136e:	d00c      	beq.n	802138a <dhcp_renew+0xe6>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021370:	f1b8 0f43 	cmp.w	r8, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021374:	f81a 9b01 	ldrb.w	r9, [sl], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021378:	d9ef      	bls.n	802135a <dhcp_renew+0xb6>
 802137a:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802137e:	4836      	ldr	r0, [pc, #216]	; (8021458 <dhcp_renew+0x1b4>)
 8021380:	f003 fd68 	bl	8024e54 <iprintf>
 8021384:	4b32      	ldr	r3, [pc, #200]	; (8021450 <dhcp_renew+0x1ac>)
 8021386:	4931      	ldr	r1, [pc, #196]	; (802144c <dhcp_renew+0x1a8>)
 8021388:	e7e7      	b.n	802135a <dhcp_renew+0xb6>
  options[options_out_len++] = DHCP_OPTION_END;
 802138a:	f104 000b 	add.w	r0, r4, #11
  options[options_out_len++] = value;
 802138e:	f104 030a 	add.w	r3, r4, #10
  options[options_out_len++] = DHCP_OPTION_END;
 8021392:	22ff      	movs	r2, #255	; 0xff
 8021394:	b280      	uxth	r0, r0
 8021396:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021398:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 802139a:	54f2      	strb	r2, [r6, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 802139c:	d808      	bhi.n	80213b0 <dhcp_renew+0x10c>
    options[options_out_len++] = 0;
 802139e:	f1c4 0438 	rsb	r4, r4, #56	; 0x38
 80213a2:	4430      	add	r0, r6
 80213a4:	2100      	movs	r1, #0
 80213a6:	b2a4      	uxth	r4, r4
 80213a8:	1c62      	adds	r2, r4, #1
 80213aa:	f002 fdb5 	bl	8023f18 <memset>
 80213ae:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80213b0:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80213b4:	4628      	mov	r0, r5
 80213b6:	b289      	uxth	r1, r1
 80213b8:	f7f9 fb72 	bl	801aaa0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80213bc:	4827      	ldr	r0, [pc, #156]	; (802145c <dhcp_renew+0x1b8>)
 80213be:	2343      	movs	r3, #67	; 0x43
 80213c0:	f107 0218 	add.w	r2, r7, #24
 80213c4:	6800      	ldr	r0, [r0, #0]
 80213c6:	4629      	mov	r1, r5
 80213c8:	f8cd b000 	str.w	fp, [sp]
 80213cc:	f7fe fc62 	bl	801fc94 <udp_sendto_if>
 80213d0:	4604      	mov	r4, r0
    pbuf_free(p_out);
 80213d2:	4628      	mov	r0, r5
 80213d4:	f7f9 fc7c 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 80213d8:	79bb      	ldrb	r3, [r7, #6]
 80213da:	2bff      	cmp	r3, #255	; 0xff
 80213dc:	d015      	beq.n	802140a <dhcp_renew+0x166>
    dhcp->tries++;
 80213de:	3301      	adds	r3, #1
 80213e0:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80213e2:	2b09      	cmp	r3, #9
    dhcp->tries++;
 80213e4:	71bb      	strb	r3, [r7, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80213e6:	d810      	bhi.n	802140a <dhcp_renew+0x166>
 80213e8:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80213ec:	4a1c      	ldr	r2, [pc, #112]	; (8021460 <dhcp_renew+0x1bc>)
}
 80213ee:	4620      	mov	r0, r4
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80213f0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80213f4:	011b      	lsls	r3, r3, #4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80213f6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80213fa:	b29b      	uxth	r3, r3
 80213fc:	fba2 2303 	umull	r2, r3, r2, r3
 8021400:	095b      	lsrs	r3, r3, #5
 8021402:	813b      	strh	r3, [r7, #8]
}
 8021404:	b007      	add	sp, #28
 8021406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    result = ERR_MEM;
 802140a:	2328      	movs	r3, #40	; 0x28
}
 802140c:	4620      	mov	r0, r4
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802140e:	813b      	strh	r3, [r7, #8]
}
 8021410:	b007      	add	sp, #28
 8021412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021416:	4b0e      	ldr	r3, [pc, #56]	; (8021450 <dhcp_renew+0x1ac>)
 8021418:	f240 529a 	movw	r2, #1434	; 0x59a
 802141c:	4911      	ldr	r1, [pc, #68]	; (8021464 <dhcp_renew+0x1c0>)
 802141e:	480e      	ldr	r0, [pc, #56]	; (8021458 <dhcp_renew+0x1b4>)
 8021420:	f003 fd18 	bl	8024e54 <iprintf>
 8021424:	e762      	b.n	80212ec <dhcp_renew+0x48>
 8021426:	4b0a      	ldr	r3, [pc, #40]	; (8021450 <dhcp_renew+0x1ac>)
 8021428:	f240 529a 	movw	r2, #1434	; 0x59a
 802142c:	490d      	ldr	r1, [pc, #52]	; (8021464 <dhcp_renew+0x1c0>)
 802142e:	480a      	ldr	r0, [pc, #40]	; (8021458 <dhcp_renew+0x1b4>)
 8021430:	f003 fd10 	bl	8024e54 <iprintf>
 8021434:	e77b      	b.n	802132e <dhcp_renew+0x8a>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021436:	4b06      	ldr	r3, [pc, #24]	; (8021450 <dhcp_renew+0x1ac>)
 8021438:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802143c:	490a      	ldr	r1, [pc, #40]	; (8021468 <dhcp_renew+0x1c4>)
 802143e:	4806      	ldr	r0, [pc, #24]	; (8021458 <dhcp_renew+0x1b4>)
 8021440:	f003 fd08 	bl	8024e54 <iprintf>
 8021444:	e763      	b.n	802130e <dhcp_renew+0x6a>
    result = ERR_MEM;
 8021446:	f04f 34ff 	mov.w	r4, #4294967295
 802144a:	e7c5      	b.n	80213d8 <dhcp_renew+0x134>
 802144c:	08044e68 	.word	0x08044e68
 8021450:	08044c74 	.word	0x08044c74
 8021454:	08044ff0 	.word	0x08044ff0
 8021458:	08029a64 	.word	0x08029a64
 802145c:	2002e3f8 	.word	0x2002e3f8
 8021460:	10624dd3 	.word	0x10624dd3
 8021464:	08044de8 	.word	0x08044de8
 8021468:	08044e2c 	.word	0x08044e2c
 802146c:	08044fed 	.word	0x08044fed

08021470 <dhcp_release_and_stop>:
{
 8021470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8021474:	6a84      	ldr	r4, [r0, #40]	; 0x28
{
 8021476:	b084      	sub	sp, #16
  if (dhcp == NULL) {
 8021478:	2c00      	cmp	r4, #0
 802147a:	d06c      	beq.n	8021556 <dhcp_release_and_stop+0xe6>
  if (dhcp->state == DHCP_STATE_OFF) {
 802147c:	7962      	ldrb	r2, [r4, #5]
 802147e:	2a00      	cmp	r2, #0
 8021480:	d069      	beq.n	8021556 <dhcp_release_and_stop+0xe6>
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8021482:	69a1      	ldr	r1, [r4, #24]
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8021484:	2300      	movs	r3, #0
 8021486:	4605      	mov	r5, r0
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8021488:	9103      	str	r1, [sp, #12]
u8_t
dhcp_supplied_address(const struct netif *netif)
{
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
    struct dhcp *dhcp = netif_dhcp_data(netif);
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802148a:	1f11      	subs	r1, r2, #4
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 802148c:	61e3      	str	r3, [r4, #28]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 802148e:	2901      	cmp	r1, #1
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8021490:	61a3      	str	r3, [r4, #24]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8021492:	62a3      	str	r3, [r4, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8021494:	81e3      	strh	r3, [r4, #14]
 8021496:	6123      	str	r3, [r4, #16]
 8021498:	82a3      	strh	r3, [r4, #20]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 802149a:	e9c4 3308 	strd	r3, r3, [r4, #32]
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 802149e:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80214a2:	d901      	bls.n	80214a8 <dhcp_release_and_stop+0x38>
 80214a4:	2a0a      	cmp	r2, #10
 80214a6:	d148      	bne.n	802153a <dhcp_release_and_stop+0xca>
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80214a8:	f10d 030a 	add.w	r3, sp, #10
 80214ac:	2207      	movs	r2, #7
 80214ae:	4621      	mov	r1, r4
 80214b0:	4628      	mov	r0, r5
 80214b2:	f7fe fef1 	bl	8020298 <dhcp_create_msg>
    if (p_out != NULL) {
 80214b6:	4606      	mov	r6, r0
 80214b8:	2800      	cmp	r0, #0
 80214ba:	d03e      	beq.n	802153a <dhcp_release_and_stop+0xca>
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80214bc:	f8bd 800a 	ldrh.w	r8, [sp, #10]
 80214c0:	6877      	ldr	r7, [r6, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80214c2:	f108 0306 	add.w	r3, r8, #6
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80214c6:	37f0      	adds	r7, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80214c8:	2b44      	cmp	r3, #68	; 0x44
 80214ca:	d84e      	bhi.n	802156a <dhcp_release_and_stop+0xfa>
  options[options_out_len++] = option_type;
 80214cc:	f108 0301 	add.w	r3, r8, #1
 80214d0:	2236      	movs	r2, #54	; 0x36
  options[options_out_len++] = option_len;
 80214d2:	b29b      	uxth	r3, r3
  options[options_out_len++] = option_type;
 80214d4:	f807 2008 	strb.w	r2, [r7, r8]
  options[options_out_len++] = option_len;
 80214d8:	2204      	movs	r2, #4
 80214da:	f108 0802 	add.w	r8, r8, #2
 80214de:	54fa      	strb	r2, [r7, r3]
 80214e0:	fa1f f888 	uxth.w	r8, r8
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80214e4:	9803      	ldr	r0, [sp, #12]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80214e6:	f8ad 800a 	strh.w	r8, [sp, #10]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80214ea:	f7f7 fbb9 	bl	8018c60 <lwip_htonl>
 80214ee:	4639      	mov	r1, r7
 80214f0:	4602      	mov	r2, r0
 80214f2:	4640      	mov	r0, r8
 80214f4:	f7fe fd30 	bl	801ff58 <dhcp_option_long>
  options[options_out_len++] = DHCP_OPTION_END;
 80214f8:	1c43      	adds	r3, r0, #1
 80214fa:	21ff      	movs	r1, #255	; 0xff
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80214fc:	f8ad 000a 	strh.w	r0, [sp, #10]
  options[options_out_len++] = DHCP_OPTION_END;
 8021500:	b29b      	uxth	r3, r3
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8021502:	4602      	mov	r2, r0
  options[options_out_len++] = DHCP_OPTION_END;
 8021504:	5439      	strb	r1, [r7, r0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8021506:	2b43      	cmp	r3, #67	; 0x43
 8021508:	d807      	bhi.n	802151a <dhcp_release_and_stop+0xaa>
    options[options_out_len++] = 0;
 802150a:	f1c2 0243 	rsb	r2, r2, #67	; 0x43
 802150e:	18f8      	adds	r0, r7, r3
 8021510:	2100      	movs	r1, #0
 8021512:	b292      	uxth	r2, r2
 8021514:	f002 fd00 	bl	8023f18 <memset>
 8021518:	2344      	movs	r3, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 802151a:	33f0      	adds	r3, #240	; 0xf0
 802151c:	4630      	mov	r0, r6
 802151e:	b299      	uxth	r1, r3
 8021520:	f7f9 fabe 	bl	801aaa0 <pbuf_realloc>
      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8021524:	4a15      	ldr	r2, [pc, #84]	; (802157c <dhcp_release_and_stop+0x10c>)
 8021526:	9500      	str	r5, [sp, #0]
 8021528:	2343      	movs	r3, #67	; 0x43
 802152a:	6810      	ldr	r0, [r2, #0]
 802152c:	4631      	mov	r1, r6
 802152e:	aa03      	add	r2, sp, #12
 8021530:	f7fe fbb0 	bl	801fc94 <udp_sendto_if>
      pbuf_free(p_out);
 8021534:	4630      	mov	r0, r6
 8021536:	f7f9 fbcb 	bl	801acd0 <pbuf_free>
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 802153a:	4b11      	ldr	r3, [pc, #68]	; (8021580 <dhcp_release_and_stop+0x110>)
 802153c:	4628      	mov	r0, r5
 802153e:	461a      	mov	r2, r3
 8021540:	4619      	mov	r1, r3
 8021542:	f7f8 ff2b 	bl	801a39c <netif_set_addr>
  if (new_state != dhcp->state) {
 8021546:	7963      	ldrb	r3, [r4, #5]
 8021548:	b11b      	cbz	r3, 8021552 <dhcp_release_and_stop+0xe2>
    dhcp->state = new_state;
 802154a:	2300      	movs	r3, #0
 802154c:	7163      	strb	r3, [r4, #5]
    dhcp->tries = 0;
 802154e:	71a3      	strb	r3, [r4, #6]
    dhcp->request_timeout = 0;
 8021550:	8123      	strh	r3, [r4, #8]
  if (dhcp->pcb_allocated != 0) {
 8021552:	7923      	ldrb	r3, [r4, #4]
 8021554:	b913      	cbnz	r3, 802155c <dhcp_release_and_stop+0xec>
}
 8021556:	b004      	add	sp, #16
 8021558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 802155c:	f7fe fe22 	bl	80201a4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8021560:	2300      	movs	r3, #0
 8021562:	7123      	strb	r3, [r4, #4]
}
 8021564:	b004      	add	sp, #16
 8021566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802156a:	4b06      	ldr	r3, [pc, #24]	; (8021584 <dhcp_release_and_stop+0x114>)
 802156c:	f240 529a 	movw	r2, #1434	; 0x59a
 8021570:	4905      	ldr	r1, [pc, #20]	; (8021588 <dhcp_release_and_stop+0x118>)
 8021572:	4806      	ldr	r0, [pc, #24]	; (802158c <dhcp_release_and_stop+0x11c>)
 8021574:	f003 fc6e 	bl	8024e54 <iprintf>
 8021578:	e7a8      	b.n	80214cc <dhcp_release_and_stop+0x5c>
 802157a:	bf00      	nop
 802157c:	2002e3f8 	.word	0x2002e3f8
 8021580:	08045328 	.word	0x08045328
 8021584:	08044c74 	.word	0x08044c74
 8021588:	08044de8 	.word	0x08044de8
 802158c:	08029a64 	.word	0x08029a64

08021590 <dhcp_start>:
{
 8021590:	b570      	push	{r4, r5, r6, lr}
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021592:	2800      	cmp	r0, #0
 8021594:	d046      	beq.n	8021624 <dhcp_start+0x94>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021596:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 802159a:	4604      	mov	r4, r0
 802159c:	07da      	lsls	r2, r3, #31
 802159e:	d537      	bpl.n	8021610 <dhcp_start+0x80>
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80215a0:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
  dhcp = netif_dhcp_data(netif);
 80215a2:	6a85      	ldr	r5, [r0, #40]	; 0x28
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80215a4:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 80215a8:	d32f      	bcc.n	802160a <dhcp_start+0x7a>
  if (dhcp == NULL) {
 80215aa:	b33d      	cbz	r5, 80215fc <dhcp_start+0x6c>
    if (dhcp->pcb_allocated != 0) {
 80215ac:	792b      	ldrb	r3, [r5, #4]
 80215ae:	bb13      	cbnz	r3, 80215f6 <dhcp_start+0x66>
  memset(dhcp, 0, sizeof(struct dhcp));
 80215b0:	2234      	movs	r2, #52	; 0x34
 80215b2:	2100      	movs	r1, #0
 80215b4:	4628      	mov	r0, r5
 80215b6:	f002 fcaf 	bl	8023f18 <memset>
  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80215ba:	f7fe fdb9 	bl	8020130 <dhcp_inc_pcb_refcount>
 80215be:	4606      	mov	r6, r0
 80215c0:	bb18      	cbnz	r0, 802160a <dhcp_start+0x7a>
  dhcp->pcb_allocated = 1;
 80215c2:	2301      	movs	r3, #1
 80215c4:	712b      	strb	r3, [r5, #4]
  if (!netif_is_link_up(netif)) {
 80215c6:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80215ca:	075b      	lsls	r3, r3, #29
 80215cc:	d408      	bmi.n	80215e0 <dhcp_start+0x50>
  if (new_state != dhcp->state) {
 80215ce:	796b      	ldrb	r3, [r5, #5]
 80215d0:	2b02      	cmp	r3, #2
 80215d2:	d003      	beq.n	80215dc <dhcp_start+0x4c>
    dhcp->state = new_state;
 80215d4:	2302      	movs	r3, #2
    dhcp->tries = 0;
 80215d6:	71a8      	strb	r0, [r5, #6]
    dhcp->request_timeout = 0;
 80215d8:	8128      	strh	r0, [r5, #8]
    dhcp->state = new_state;
 80215da:	716b      	strb	r3, [r5, #5]
}
 80215dc:	4630      	mov	r0, r6
 80215de:	bd70      	pop	{r4, r5, r6, pc}
  result = dhcp_discover(netif);
 80215e0:	4620      	mov	r0, r4
 80215e2:	f7ff f80b 	bl	80205fc <dhcp_discover>
  if (result != ERR_OK) {
 80215e6:	2800      	cmp	r0, #0
 80215e8:	d0f8      	beq.n	80215dc <dhcp_start+0x4c>
    dhcp_release_and_stop(netif);
 80215ea:	4620      	mov	r0, r4
    return ERR_MEM;
 80215ec:	f04f 36ff 	mov.w	r6, #4294967295
    dhcp_release_and_stop(netif);
 80215f0:	f7ff ff3e 	bl	8021470 <dhcp_release_and_stop>
    return ERR_MEM;
 80215f4:	e7f2      	b.n	80215dc <dhcp_start+0x4c>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80215f6:	f7fe fdd5 	bl	80201a4 <dhcp_dec_pcb_refcount>
 80215fa:	e7d9      	b.n	80215b0 <dhcp_start+0x20>
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80215fc:	2034      	movs	r0, #52	; 0x34
 80215fe:	f7f8 fc77 	bl	8019ef0 <mem_malloc>
    if (dhcp == NULL) {
 8021602:	4605      	mov	r5, r0
 8021604:	b108      	cbz	r0, 802160a <dhcp_start+0x7a>
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8021606:	62a0      	str	r0, [r4, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
 8021608:	e7d2      	b.n	80215b0 <dhcp_start+0x20>
    return ERR_MEM;
 802160a:	f04f 36ff 	mov.w	r6, #4294967295
 802160e:	e7e5      	b.n	80215dc <dhcp_start+0x4c>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8021610:	4b09      	ldr	r3, [pc, #36]	; (8021638 <dhcp_start+0xa8>)
 8021612:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8021616:	4909      	ldr	r1, [pc, #36]	; (802163c <dhcp_start+0xac>)
 8021618:	f06f 060f 	mvn.w	r6, #15
 802161c:	4808      	ldr	r0, [pc, #32]	; (8021640 <dhcp_start+0xb0>)
 802161e:	f003 fc19 	bl	8024e54 <iprintf>
 8021622:	e7db      	b.n	80215dc <dhcp_start+0x4c>
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8021624:	4b04      	ldr	r3, [pc, #16]	; (8021638 <dhcp_start+0xa8>)
 8021626:	f240 22e7 	movw	r2, #743	; 0x2e7
 802162a:	4906      	ldr	r1, [pc, #24]	; (8021644 <dhcp_start+0xb4>)
 802162c:	f06f 060f 	mvn.w	r6, #15
 8021630:	4803      	ldr	r0, [pc, #12]	; (8021640 <dhcp_start+0xb0>)
 8021632:	f003 fc0f 	bl	8024e54 <iprintf>
 8021636:	e7d1      	b.n	80215dc <dhcp_start+0x4c>
 8021638:	08044c74 	.word	0x08044c74
 802163c:	08044fc8 	.word	0x08044fc8
 8021640:	08029a64 	.word	0x08029a64
 8021644:	0802c704 	.word	0x0802c704

08021648 <dhcp_coarse_tmr>:
  NETIF_FOREACH(netif) {
 8021648:	4b8a      	ldr	r3, [pc, #552]	; (8021874 <dhcp_coarse_tmr+0x22c>)
{
 802164a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  NETIF_FOREACH(netif) {
 802164e:	681d      	ldr	r5, [r3, #0]
{
 8021650:	b087      	sub	sp, #28
  NETIF_FOREACH(netif) {
 8021652:	b1dd      	cbz	r5, 802168c <dhcp_coarse_tmr+0x44>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8021654:	6aac      	ldr	r4, [r5, #40]	; 0x28
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8021656:	b1b4      	cbz	r4, 8021686 <dhcp_coarse_tmr+0x3e>
 8021658:	7963      	ldrb	r3, [r4, #5]
 802165a:	b1a3      	cbz	r3, 8021686 <dhcp_coarse_tmr+0x3e>
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 802165c:	8aa1      	ldrh	r1, [r4, #20]
 802165e:	b129      	cbz	r1, 802166c <dhcp_coarse_tmr+0x24>
 8021660:	8a62      	ldrh	r2, [r4, #18]
 8021662:	3201      	adds	r2, #1
 8021664:	b292      	uxth	r2, r2
 8021666:	4291      	cmp	r1, r2
 8021668:	8262      	strh	r2, [r4, #18]
 802166a:	d012      	beq.n	8021692 <dhcp_coarse_tmr+0x4a>
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 802166c:	8a22      	ldrh	r2, [r4, #16]
 802166e:	b11a      	cbz	r2, 8021678 <dhcp_coarse_tmr+0x30>
 8021670:	1e51      	subs	r1, r2, #1
 8021672:	2a01      	cmp	r2, #1
 8021674:	8221      	strh	r1, [r4, #16]
 8021676:	d013      	beq.n	80216a0 <dhcp_coarse_tmr+0x58>
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8021678:	89e2      	ldrh	r2, [r4, #14]
 802167a:	b122      	cbz	r2, 8021686 <dhcp_coarse_tmr+0x3e>
 802167c:	1e51      	subs	r1, r2, #1
 802167e:	2a01      	cmp	r2, #1
 8021680:	81e1      	strh	r1, [r4, #14]
 8021682:	f000 8087 	beq.w	8021794 <dhcp_coarse_tmr+0x14c>
  NETIF_FOREACH(netif) {
 8021686:	682d      	ldr	r5, [r5, #0]
 8021688:	2d00      	cmp	r5, #0
 802168a:	d1e3      	bne.n	8021654 <dhcp_coarse_tmr+0xc>
}
 802168c:	b007      	add	sp, #28
 802168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        dhcp_release_and_stop(netif);
 8021692:	4628      	mov	r0, r5
 8021694:	f7ff feec 	bl	8021470 <dhcp_release_and_stop>
        dhcp_start(netif);
 8021698:	4628      	mov	r0, r5
 802169a:	f7ff ff79 	bl	8021590 <dhcp_start>
 802169e:	e7f2      	b.n	8021686 <dhcp_coarse_tmr+0x3e>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80216a0:	1e5a      	subs	r2, r3, #1
 80216a2:	b2d1      	uxtb	r1, r2
 80216a4:	2909      	cmp	r1, #9
 80216a6:	d8ee      	bhi.n	8021686 <dhcp_coarse_tmr+0x3e>
 80216a8:	f240 2219 	movw	r2, #537	; 0x219
 80216ac:	40ca      	lsrs	r2, r1
 80216ae:	43d2      	mvns	r2, r2
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80216b0:	f012 0201 	ands.w	r2, r2, #1
 80216b4:	d1e7      	bne.n	8021686 <dhcp_coarse_tmr+0x3e>
  if (new_state != dhcp->state) {
 80216b6:	2b04      	cmp	r3, #4
 80216b8:	d003      	beq.n	80216c2 <dhcp_coarse_tmr+0x7a>
    dhcp->state = new_state;
 80216ba:	2304      	movs	r3, #4
    dhcp->tries = 0;
 80216bc:	71a2      	strb	r2, [r4, #6]
    dhcp->request_timeout = 0;
 80216be:	8122      	strh	r2, [r4, #8]
    dhcp->state = new_state;
 80216c0:	7163      	strb	r3, [r4, #5]
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80216c2:	f10d 0316 	add.w	r3, sp, #22
 80216c6:	2203      	movs	r2, #3
 80216c8:	4621      	mov	r1, r4
 80216ca:	4628      	mov	r0, r5
 80216cc:	f7fe fde4 	bl	8020298 <dhcp_create_msg>
  if (p_out != NULL) {
 80216d0:	4607      	mov	r7, r0
 80216d2:	2800      	cmp	r0, #0
 80216d4:	f000 8096 	beq.w	8021804 <dhcp_coarse_tmr+0x1bc>
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80216d8:	f8bd 6016 	ldrh.w	r6, [sp, #22]
 80216dc:	6843      	ldr	r3, [r0, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80216de:	f106 0904 	add.w	r9, r6, #4
 80216e2:	f106 0a02 	add.w	sl, r6, #2
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80216e6:	f103 08f0 	add.w	r8, r3, #240	; 0xf0
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80216ea:	f1b9 0f44 	cmp.w	r9, #68	; 0x44
 80216ee:	f200 80b9 	bhi.w	8021864 <dhcp_coarse_tmr+0x21c>
  options[options_out_len++] = option_type;
 80216f2:	2239      	movs	r2, #57	; 0x39
 80216f4:	1c73      	adds	r3, r6, #1
 80216f6:	fa1f fb8a 	uxth.w	fp, sl
 80216fa:	f808 2006 	strb.w	r2, [r8, r6]
  options[options_out_len++] = option_len;
 80216fe:	b29b      	uxth	r3, r3
 8021700:	2202      	movs	r2, #2
 8021702:	f808 2003 	strb.w	r2, [r8, r3]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021706:	eb0b 0302 	add.w	r3, fp, r2
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 802170a:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 802170c:	2b44      	cmp	r3, #68	; 0x44
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 802170e:	f8ad a016 	strh.w	sl, [sp, #22]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021712:	9203      	str	r2, [sp, #12]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021714:	f200 809e 	bhi.w	8021854 <dhcp_coarse_tmr+0x20c>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021718:	9903      	ldr	r1, [sp, #12]
 802171a:	1cf3      	adds	r3, r6, #3
 802171c:	fa1f fa89 	uxth.w	sl, r9
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021720:	b29b      	uxth	r3, r3
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8021722:	0a0a      	lsrs	r2, r1, #8
 8021724:	f808 200b 	strb.w	r2, [r8, fp]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8021728:	f808 1003 	strb.w	r1, [r8, r3]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 802172c:	f10a 0306 	add.w	r3, sl, #6
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8021730:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021734:	2b44      	cmp	r3, #68	; 0x44
 8021736:	f200 8085 	bhi.w	8021844 <dhcp_coarse_tmr+0x1fc>
  options[options_out_len++] = option_len;
 802173a:	f106 0906 	add.w	r9, r6, #6
  options[options_out_len++] = option_type;
 802173e:	2237      	movs	r2, #55	; 0x37
 8021740:	1d73      	adds	r3, r6, #5
 8021742:	f8df b158 	ldr.w	fp, [pc, #344]	; 802189c <dhcp_coarse_tmr+0x254>
  options[options_out_len++] = option_len;
 8021746:	fa1f f989 	uxth.w	r9, r9
  options[options_out_len++] = option_type;
 802174a:	f808 200a 	strb.w	r2, [r8, sl]
  options[options_out_len++] = option_len;
 802174e:	b29b      	uxth	r3, r3
 8021750:	2204      	movs	r2, #4
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021752:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8021756:	f04f 0a01 	mov.w	sl, #1
  options[options_out_len++] = option_len;
 802175a:	f808 2003 	strb.w	r2, [r8, r3]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 802175e:	f8ad 9016 	strh.w	r9, [sp, #22]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021762:	d80f      	bhi.n	8021784 <dhcp_coarse_tmr+0x13c>
  options[options_out_len++] = value;
 8021764:	f808 a009 	strb.w	sl, [r8, r9]
 8021768:	f109 0901 	add.w	r9, r9, #1
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 802176c:	4b42      	ldr	r3, [pc, #264]	; (8021878 <dhcp_coarse_tmr+0x230>)
  options[options_out_len++] = value;
 802176e:	fa1f f989 	uxth.w	r9, r9
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021772:	455b      	cmp	r3, fp
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8021774:	f8ad 9016 	strh.w	r9, [sp, #22]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8021778:	d01f      	beq.n	80217ba <dhcp_coarse_tmr+0x172>
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 802177a:	f1b9 0f43 	cmp.w	r9, #67	; 0x43
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 802177e:	f81b ab01 	ldrb.w	sl, [fp], #1
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8021782:	d9ef      	bls.n	8021764 <dhcp_coarse_tmr+0x11c>
 8021784:	4b3d      	ldr	r3, [pc, #244]	; (802187c <dhcp_coarse_tmr+0x234>)
 8021786:	f240 52a6 	movw	r2, #1446	; 0x5a6
 802178a:	493d      	ldr	r1, [pc, #244]	; (8021880 <dhcp_coarse_tmr+0x238>)
 802178c:	483d      	ldr	r0, [pc, #244]	; (8021884 <dhcp_coarse_tmr+0x23c>)
 802178e:	f003 fb61 	bl	8024e54 <iprintf>
 8021792:	e7e7      	b.n	8021764 <dhcp_coarse_tmr+0x11c>
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8021794:	f003 02fb 	and.w	r2, r3, #251	; 0xfb
 8021798:	2a01      	cmp	r2, #1
 802179a:	d002      	beq.n	80217a2 <dhcp_coarse_tmr+0x15a>
 802179c:	2b0a      	cmp	r3, #10
 802179e:	f47f af72 	bne.w	8021686 <dhcp_coarse_tmr+0x3e>
    dhcp_renew(netif);
 80217a2:	4628      	mov	r0, r5
 80217a4:	f7ff fd7e 	bl	80212a4 <dhcp_renew>
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80217a8:	89a3      	ldrh	r3, [r4, #12]
 80217aa:	8a62      	ldrh	r2, [r4, #18]
 80217ac:	1a9b      	subs	r3, r3, r2
 80217ae:	2b01      	cmp	r3, #1
 80217b0:	f77f af69 	ble.w	8021686 <dhcp_coarse_tmr+0x3e>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 80217b4:	105b      	asrs	r3, r3, #1
 80217b6:	81e3      	strh	r3, [r4, #14]
 80217b8:	e765      	b.n	8021686 <dhcp_coarse_tmr+0x3e>
  options[options_out_len++] = DHCP_OPTION_END;
 80217ba:	f106 000b 	add.w	r0, r6, #11
  options[options_out_len++] = value;
 80217be:	f106 030a 	add.w	r3, r6, #10
  options[options_out_len++] = DHCP_OPTION_END;
 80217c2:	22ff      	movs	r2, #255	; 0xff
 80217c4:	b280      	uxth	r0, r0
 80217c6:	b29b      	uxth	r3, r3
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80217c8:	2843      	cmp	r0, #67	; 0x43
  options[options_out_len++] = DHCP_OPTION_END;
 80217ca:	f808 2003 	strb.w	r2, [r8, r3]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80217ce:	d808      	bhi.n	80217e2 <dhcp_coarse_tmr+0x19a>
    options[options_out_len++] = 0;
 80217d0:	f1c6 0238 	rsb	r2, r6, #56	; 0x38
 80217d4:	4440      	add	r0, r8
 80217d6:	2100      	movs	r1, #0
 80217d8:	b292      	uxth	r2, r2
 80217da:	3201      	adds	r2, #1
 80217dc:	f002 fb9c 	bl	8023f18 <memset>
 80217e0:	2044      	movs	r0, #68	; 0x44
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80217e2:	f100 01f0 	add.w	r1, r0, #240	; 0xf0
 80217e6:	4638      	mov	r0, r7
 80217e8:	b289      	uxth	r1, r1
 80217ea:	f7f9 f959 	bl	801aaa0 <pbuf_realloc>
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80217ee:	4b26      	ldr	r3, [pc, #152]	; (8021888 <dhcp_coarse_tmr+0x240>)
 80217f0:	9500      	str	r5, [sp, #0]
 80217f2:	4639      	mov	r1, r7
 80217f4:	6818      	ldr	r0, [r3, #0]
 80217f6:	2343      	movs	r3, #67	; 0x43
 80217f8:	4a24      	ldr	r2, [pc, #144]	; (802188c <dhcp_coarse_tmr+0x244>)
 80217fa:	f7fe fa4b 	bl	801fc94 <udp_sendto_if>
    pbuf_free(p_out);
 80217fe:	4638      	mov	r0, r7
 8021800:	f7f9 fa66 	bl	801acd0 <pbuf_free>
  if (dhcp->tries < 255) {
 8021804:	79a3      	ldrb	r3, [r4, #6]
 8021806:	2bff      	cmp	r3, #255	; 0xff
 8021808:	d01a      	beq.n	8021840 <dhcp_coarse_tmr+0x1f8>
    dhcp->tries++;
 802180a:	3301      	adds	r3, #1
 802180c:	b2db      	uxtb	r3, r3
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802180e:	2b09      	cmp	r3, #9
    dhcp->tries++;
 8021810:	71a3      	strb	r3, [r4, #6]
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8021812:	d815      	bhi.n	8021840 <dhcp_coarse_tmr+0x1f8>
 8021814:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8021818:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802181c:	4a1c      	ldr	r2, [pc, #112]	; (8021890 <dhcp_coarse_tmr+0x248>)
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 802181e:	00db      	lsls	r3, r3, #3
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8021820:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8021824:	b29b      	uxth	r3, r3
 8021826:	fba2 2303 	umull	r2, r3, r2, r3
 802182a:	095b      	lsrs	r3, r3, #5
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 802182c:	8a62      	ldrh	r2, [r4, #18]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 802182e:	8123      	strh	r3, [r4, #8]
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8021830:	8aa3      	ldrh	r3, [r4, #20]
 8021832:	1a9b      	subs	r3, r3, r2
 8021834:	2b01      	cmp	r3, #1
 8021836:	f77f af26 	ble.w	8021686 <dhcp_coarse_tmr+0x3e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 802183a:	105b      	asrs	r3, r3, #1
 802183c:	8223      	strh	r3, [r4, #16]
 802183e:	e722      	b.n	8021686 <dhcp_coarse_tmr+0x3e>
    options[options_out_len++] = 0;
 8021840:	2314      	movs	r3, #20
 8021842:	e7f3      	b.n	802182c <dhcp_coarse_tmr+0x1e4>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021844:	4b0d      	ldr	r3, [pc, #52]	; (802187c <dhcp_coarse_tmr+0x234>)
 8021846:	f240 529a 	movw	r2, #1434	; 0x59a
 802184a:	4912      	ldr	r1, [pc, #72]	; (8021894 <dhcp_coarse_tmr+0x24c>)
 802184c:	480d      	ldr	r0, [pc, #52]	; (8021884 <dhcp_coarse_tmr+0x23c>)
 802184e:	f003 fb01 	bl	8024e54 <iprintf>
 8021852:	e772      	b.n	802173a <dhcp_coarse_tmr+0xf2>
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8021854:	4b09      	ldr	r3, [pc, #36]	; (802187c <dhcp_coarse_tmr+0x234>)
 8021856:	f240 52ae 	movw	r2, #1454	; 0x5ae
 802185a:	490f      	ldr	r1, [pc, #60]	; (8021898 <dhcp_coarse_tmr+0x250>)
 802185c:	4809      	ldr	r0, [pc, #36]	; (8021884 <dhcp_coarse_tmr+0x23c>)
 802185e:	f003 faf9 	bl	8024e54 <iprintf>
 8021862:	e759      	b.n	8021718 <dhcp_coarse_tmr+0xd0>
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8021864:	4b05      	ldr	r3, [pc, #20]	; (802187c <dhcp_coarse_tmr+0x234>)
 8021866:	f240 529a 	movw	r2, #1434	; 0x59a
 802186a:	490a      	ldr	r1, [pc, #40]	; (8021894 <dhcp_coarse_tmr+0x24c>)
 802186c:	4805      	ldr	r0, [pc, #20]	; (8021884 <dhcp_coarse_tmr+0x23c>)
 802186e:	f003 faf1 	bl	8024e54 <iprintf>
 8021872:	e73e      	b.n	80216f2 <dhcp_coarse_tmr+0xaa>
 8021874:	2002e380 	.word	0x2002e380
 8021878:	08044ff0 	.word	0x08044ff0
 802187c:	08044c74 	.word	0x08044c74
 8021880:	08044e68 	.word	0x08044e68
 8021884:	08029a64 	.word	0x08029a64
 8021888:	2002e3f8 	.word	0x2002e3f8
 802188c:	0804532c 	.word	0x0804532c
 8021890:	10624dd3 	.word	0x10624dd3
 8021894:	08044de8 	.word	0x08044de8
 8021898:	08044e2c 	.word	0x08044e2c
 802189c:	08044fed 	.word	0x08044fed

080218a0 <dhcp_fine_tmr>:
{
 80218a0:	b538      	push	{r3, r4, r5, lr}
  NETIF_FOREACH(netif) {
 80218a2:	4b21      	ldr	r3, [pc, #132]	; (8021928 <dhcp_fine_tmr+0x88>)
 80218a4:	681c      	ldr	r4, [r3, #0]
 80218a6:	b1fc      	cbz	r4, 80218e8 <dhcp_fine_tmr+0x48>
        dhcp->request_timeout--;
 80218a8:	2500      	movs	r5, #0
 80218aa:	e003      	b.n	80218b4 <dhcp_fine_tmr+0x14>
        dhcp->request_timeout--;
 80218ac:	3a01      	subs	r2, #1
 80218ae:	811a      	strh	r2, [r3, #8]
  NETIF_FOREACH(netif) {
 80218b0:	6824      	ldr	r4, [r4, #0]
 80218b2:	b1cc      	cbz	r4, 80218e8 <dhcp_fine_tmr+0x48>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80218b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (dhcp != NULL) {
 80218b6:	2b00      	cmp	r3, #0
 80218b8:	d0fa      	beq.n	80218b0 <dhcp_fine_tmr+0x10>
      if (dhcp->request_timeout > 1) {
 80218ba:	891a      	ldrh	r2, [r3, #8]
 80218bc:	2a01      	cmp	r2, #1
 80218be:	d8f5      	bhi.n	80218ac <dhcp_fine_tmr+0xc>
      } else if (dhcp->request_timeout == 1) {
 80218c0:	d1f6      	bne.n	80218b0 <dhcp_fine_tmr+0x10>
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80218c2:	795a      	ldrb	r2, [r3, #5]
        dhcp->request_timeout--;
 80218c4:	811d      	strh	r5, [r3, #8]
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80218c6:	2a0c      	cmp	r2, #12
 80218c8:	d016      	beq.n	80218f8 <dhcp_fine_tmr+0x58>
 80218ca:	2a06      	cmp	r2, #6
 80218cc:	d014      	beq.n	80218f8 <dhcp_fine_tmr+0x58>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80218ce:	2a01      	cmp	r2, #1
 80218d0:	d016      	beq.n	8021900 <dhcp_fine_tmr+0x60>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80218d2:	2a08      	cmp	r2, #8
 80218d4:	d009      	beq.n	80218ea <dhcp_fine_tmr+0x4a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80218d6:	2a03      	cmp	r2, #3
 80218d8:	d1ea      	bne.n	80218b0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries < REBOOT_TRIES) {
 80218da:	799b      	ldrb	r3, [r3, #6]
      dhcp_reboot(netif);
 80218dc:	4620      	mov	r0, r4
    if (dhcp->tries < REBOOT_TRIES) {
 80218de:	2b01      	cmp	r3, #1
 80218e0:	d91e      	bls.n	8021920 <dhcp_fine_tmr+0x80>
      dhcp_discover(netif);
 80218e2:	f7fe fe8b 	bl	80205fc <dhcp_discover>
 80218e6:	e7e3      	b.n	80218b0 <dhcp_fine_tmr+0x10>
}
 80218e8:	bd38      	pop	{r3, r4, r5, pc}
    if (dhcp->tries <= 1) {
 80218ea:	799b      	ldrb	r3, [r3, #6]
      dhcp_check(netif);
 80218ec:	4620      	mov	r0, r4
    if (dhcp->tries <= 1) {
 80218ee:	2b01      	cmp	r3, #1
 80218f0:	d913      	bls.n	802191a <dhcp_fine_tmr+0x7a>
      dhcp_bind(netif);
 80218f2:	f7fe fb6d 	bl	801ffd0 <dhcp_bind>
 80218f6:	e7db      	b.n	80218b0 <dhcp_fine_tmr+0x10>
    dhcp_discover(netif);
 80218f8:	4620      	mov	r0, r4
 80218fa:	f7fe fe7f 	bl	80205fc <dhcp_discover>
 80218fe:	e7d7      	b.n	80218b0 <dhcp_fine_tmr+0x10>
    if (dhcp->tries <= 5) {
 8021900:	799b      	ldrb	r3, [r3, #6]
      dhcp_select(netif);
 8021902:	4620      	mov	r0, r4
    if (dhcp->tries <= 5) {
 8021904:	2b05      	cmp	r3, #5
 8021906:	d802      	bhi.n	802190e <dhcp_fine_tmr+0x6e>
      dhcp_select(netif);
 8021908:	f7fe ff5e 	bl	80207c8 <dhcp_select.isra.0>
 802190c:	e7d0      	b.n	80218b0 <dhcp_fine_tmr+0x10>
      dhcp_release_and_stop(netif);
 802190e:	f7ff fdaf 	bl	8021470 <dhcp_release_and_stop>
      dhcp_start(netif);
 8021912:	4620      	mov	r0, r4
 8021914:	f7ff fe3c 	bl	8021590 <dhcp_start>
 8021918:	e7ca      	b.n	80218b0 <dhcp_fine_tmr+0x10>
      dhcp_check(netif);
 802191a:	f7fe fb41 	bl	801ffa0 <dhcp_check>
 802191e:	e7c7      	b.n	80218b0 <dhcp_fine_tmr+0x10>
      dhcp_reboot(netif);
 8021920:	f7fe fd6c 	bl	80203fc <dhcp_reboot.isra.0>
 8021924:	e7c4      	b.n	80218b0 <dhcp_fine_tmr+0x10>
 8021926:	bf00      	nop
 8021928:	2002e380 	.word	0x2002e380

0802192c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 802192c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8021930:	4f1a      	ldr	r7, [pc, #104]	; (802199c <etharp_free_entry+0x70>)
 8021932:	eb00 0340 	add.w	r3, r0, r0, lsl #1
{
 8021936:	4606      	mov	r6, r0
  if (arp_table[i].q != NULL) {
 8021938:	ea4f 0840 	mov.w	r8, r0, lsl #1
 802193c:	f857 4033 	ldr.w	r4, [r7, r3, lsl #3]
 8021940:	b32c      	cbz	r4, 802198e <etharp_free_entry+0x62>
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021942:	f8df b05c 	ldr.w	fp, [pc, #92]	; 80219a0 <etharp_free_entry+0x74>
 8021946:	f8df a05c 	ldr.w	sl, [pc, #92]	; 80219a4 <etharp_free_entry+0x78>
 802194a:	f8df 905c 	ldr.w	r9, [pc, #92]	; 80219a8 <etharp_free_entry+0x7c>
 802194e:	e006      	b.n	802195e <etharp_free_entry+0x32>
    pbuf_free(r->p);
 8021950:	f7f9 f9be 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 8021954:	4629      	mov	r1, r5
 8021956:	200b      	movs	r0, #11
 8021958:	f7f8 fca2 	bl	801a2a0 <memp_free>
  while (q) {
 802195c:	b19c      	cbz	r4, 8021986 <etharp_free_entry+0x5a>
    q = q->next;
 802195e:	4625      	mov	r5, r4
 8021960:	6824      	ldr	r4, [r4, #0]
    LWIP_ASSERT("r->p != NULL", (r->p != NULL));
 8021962:	6868      	ldr	r0, [r5, #4]
 8021964:	2800      	cmp	r0, #0
 8021966:	d1f3      	bne.n	8021950 <etharp_free_entry+0x24>
 8021968:	4651      	mov	r1, sl
 802196a:	465b      	mov	r3, fp
 802196c:	229a      	movs	r2, #154	; 0x9a
 802196e:	4648      	mov	r0, r9
 8021970:	f003 fa70 	bl	8024e54 <iprintf>
    pbuf_free(r->p);
 8021974:	6868      	ldr	r0, [r5, #4]
 8021976:	f7f9 f9ab 	bl	801acd0 <pbuf_free>
    memp_free(MEMP_ARP_QUEUE, r);
 802197a:	4629      	mov	r1, r5
 802197c:	200b      	movs	r0, #11
 802197e:	f7f8 fc8f 	bl	801a2a0 <memp_free>
  while (q) {
 8021982:	2c00      	cmp	r4, #0
 8021984:	d1eb      	bne.n	802195e <etharp_free_entry+0x32>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
    arp_table[i].q = NULL;
 8021986:	eb08 0306 	add.w	r3, r8, r6
 802198a:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 802198e:	4446      	add	r6, r8
 8021990:	2300      	movs	r3, #0
 8021992:	eb07 07c6 	add.w	r7, r7, r6, lsl #3
 8021996:	753b      	strb	r3, [r7, #20]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8021998:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802199c:	2002e438 	.word	0x2002e438
 80219a0:	08044ff0 	.word	0x08044ff0
 80219a4:	08045028 	.word	0x08045028
 80219a8:	08029a64 	.word	0x08029a64

080219ac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80219ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80219b0:	2300      	movs	r3, #0
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
  s16_t empty = ARP_TABLE_SIZE;
  s16_t i = 0;
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80219b2:	f04f 0820 	mov.w	r8, #32
{
 80219b6:	b083      	sub	sp, #12
 80219b8:	4605      	mov	r5, r0
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80219ba:	469e      	mov	lr, r3
 80219bc:	469b      	mov	fp, r3
{
 80219be:	9100      	str	r1, [sp, #0]
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80219c0:	469a      	mov	sl, r3
 80219c2:	4948      	ldr	r1, [pc, #288]	; (8021ae4 <etharp_find_entry+0x138>)
  s16_t empty = ARP_TABLE_SIZE;
 80219c4:	4644      	mov	r4, r8
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80219c6:	46c4      	mov	ip, r8
 80219c8:	4691      	mov	r9, r2
 80219ca:	f8cd 8004 	str.w	r8, [sp, #4]
 80219ce:	e004      	b.n	80219da <etharp_find_entry+0x2e>
 80219d0:	4614      	mov	r4, r2
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219d2:	3301      	adds	r3, #1
 80219d4:	3118      	adds	r1, #24
 80219d6:	2b20      	cmp	r3, #32
 80219d8:	d015      	beq.n	8021a06 <etharp_find_entry+0x5a>
    u8_t state = arp_table[i].state;
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80219da:	2c20      	cmp	r4, #32
 80219dc:	b21a      	sxth	r2, r3
    u8_t state = arp_table[i].state;
 80219de:	7d08      	ldrb	r0, [r1, #20]
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80219e0:	d134      	bne.n	8021a4c <etharp_find_entry+0xa0>
 80219e2:	2800      	cmp	r0, #0
 80219e4:	d0f4      	beq.n	80219d0 <etharp_find_entry+0x24>
      empty = i;
    } else if (state != ETHARP_STATE_EMPTY) {
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80219e6:	b11d      	cbz	r5, 80219f0 <etharp_find_entry+0x44>
 80219e8:	682f      	ldr	r7, [r5, #0]
 80219ea:	684e      	ldr	r6, [r1, #4]
 80219ec:	42b7      	cmp	r7, r6
 80219ee:	d038      	beq.n	8021a62 <etharp_find_entry+0xb6>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80219f0:	2801      	cmp	r0, #1
 80219f2:	d02e      	beq.n	8021a52 <etharp_find_entry+0xa6>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80219f4:	8a48      	ldrh	r0, [r1, #18]
 80219f6:	4570      	cmp	r0, lr
 80219f8:	d3eb      	bcc.n	80219d2 <etharp_find_entry+0x26>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80219fa:	3301      	adds	r3, #1
          if (arp_table[i].ctime >= age_stable) {
 80219fc:	4686      	mov	lr, r0
 80219fe:	4694      	mov	ip, r2
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021a00:	3118      	adds	r1, #24
 8021a02:	2b20      	cmp	r3, #32
 8021a04:	d1e9      	bne.n	80219da <etharp_find_entry+0x2e>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8021a06:	9b00      	ldr	r3, [sp, #0]
 8021a08:	464e      	mov	r6, r9
 8021a0a:	2b01      	cmp	r3, #1
 8021a0c:	d166      	bne.n	8021adc <etharp_find_entry+0x130>
 8021a0e:	2c20      	cmp	r4, #32
 8021a10:	d040      	beq.n	8021a94 <etharp_find_entry+0xe8>
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
    etharp_free_entry(i);
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021a12:	46a1      	mov	r9, r4
 8021a14:	eb09 0349 	add.w	r3, r9, r9, lsl #1
 8021a18:	4a32      	ldr	r2, [pc, #200]	; (8021ae4 <etharp_find_entry+0x138>)
 8021a1a:	ea4f 0849 	mov.w	r8, r9, lsl #1
 8021a1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8021a22:	7d1b      	ldrb	r3, [r3, #20]
 8021a24:	bb73      	cbnz	r3, 8021a84 <etharp_find_entry+0xd8>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8021a26:	b135      	cbz	r5, 8021a36 <etharp_find_entry+0x8a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8021a28:	eb08 0309 	add.w	r3, r8, r9
 8021a2c:	492d      	ldr	r1, [pc, #180]	; (8021ae4 <etharp_find_entry+0x138>)
 8021a2e:	682a      	ldr	r2, [r5, #0]
 8021a30:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8021a34:	605a      	str	r2, [r3, #4]
  }
  arp_table[i].ctime = 0;
 8021a36:	44c8      	add	r8, r9
 8021a38:	4a2a      	ldr	r2, [pc, #168]	; (8021ae4 <etharp_find_entry+0x138>)
 8021a3a:	2300      	movs	r3, #0
 8021a3c:	eb02 07c8 	add.w	r7, r2, r8, lsl #3
 8021a40:	827b      	strh	r3, [r7, #18]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8021a42:	60be      	str	r6, [r7, #8]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
}
 8021a44:	4620      	mov	r0, r4
 8021a46:	b003      	add	sp, #12
 8021a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (state != ETHARP_STATE_EMPTY) {
 8021a4c:	2800      	cmp	r0, #0
 8021a4e:	d0c0      	beq.n	80219d2 <etharp_find_entry+0x26>
 8021a50:	e7c9      	b.n	80219e6 <etharp_find_entry+0x3a>
        if (arp_table[i].q != NULL) {
 8021a52:	6808      	ldr	r0, [r1, #0]
 8021a54:	b180      	cbz	r0, 8021a78 <etharp_find_entry+0xcc>
          if (arp_table[i].ctime >= age_queue) {
 8021a56:	8a48      	ldrh	r0, [r1, #18]
 8021a58:	4550      	cmp	r0, sl
 8021a5a:	d3ba      	bcc.n	80219d2 <etharp_find_entry+0x26>
 8021a5c:	4682      	mov	sl, r0
 8021a5e:	4690      	mov	r8, r2
 8021a60:	e7b7      	b.n	80219d2 <etharp_find_entry+0x26>
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8021a62:	f1b9 0f00 	cmp.w	r9, #0
 8021a66:	d002      	beq.n	8021a6e <etharp_find_entry+0xc2>
 8021a68:	688e      	ldr	r6, [r1, #8]
 8021a6a:	454e      	cmp	r6, r9
 8021a6c:	d1c0      	bne.n	80219f0 <etharp_find_entry+0x44>
 8021a6e:	4614      	mov	r4, r2
}
 8021a70:	4620      	mov	r0, r4
 8021a72:	b003      	add	sp, #12
 8021a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if (arp_table[i].ctime >= age_pending) {
 8021a78:	8a48      	ldrh	r0, [r1, #18]
 8021a7a:	4558      	cmp	r0, fp
 8021a7c:	d3a9      	bcc.n	80219d2 <etharp_find_entry+0x26>
 8021a7e:	4683      	mov	fp, r0
 8021a80:	9201      	str	r2, [sp, #4]
 8021a82:	e7a6      	b.n	80219d2 <etharp_find_entry+0x26>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8021a84:	4b18      	ldr	r3, [pc, #96]	; (8021ae8 <etharp_find_entry+0x13c>)
 8021a86:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8021a8a:	4918      	ldr	r1, [pc, #96]	; (8021aec <etharp_find_entry+0x140>)
 8021a8c:	4818      	ldr	r0, [pc, #96]	; (8021af0 <etharp_find_entry+0x144>)
 8021a8e:	f003 f9e1 	bl	8024e54 <iprintf>
 8021a92:	e7c8      	b.n	8021a26 <etharp_find_entry+0x7a>
    if (old_stable < ARP_TABLE_SIZE) {
 8021a94:	f1bc 0f20 	cmp.w	ip, #32
 8021a98:	d012      	beq.n	8021ac0 <etharp_find_entry+0x114>
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8021a9a:	eb0c 034c 	add.w	r3, ip, ip, lsl #1
 8021a9e:	4a11      	ldr	r2, [pc, #68]	; (8021ae4 <etharp_find_entry+0x138>)
 8021aa0:	46e1      	mov	r9, ip
 8021aa2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8021aa6:	b1bb      	cbz	r3, 8021ad8 <etharp_find_entry+0x12c>
 8021aa8:	464c      	mov	r4, r9
 8021aaa:	4b0f      	ldr	r3, [pc, #60]	; (8021ae8 <etharp_find_entry+0x13c>)
 8021aac:	f240 126d 	movw	r2, #365	; 0x16d
 8021ab0:	4910      	ldr	r1, [pc, #64]	; (8021af4 <etharp_find_entry+0x148>)
 8021ab2:	480f      	ldr	r0, [pc, #60]	; (8021af0 <etharp_find_entry+0x144>)
 8021ab4:	f003 f9ce 	bl	8024e54 <iprintf>
    etharp_free_entry(i);
 8021ab8:	4648      	mov	r0, r9
 8021aba:	f7ff ff37 	bl	802192c <etharp_free_entry>
 8021abe:	e7a9      	b.n	8021a14 <etharp_find_entry+0x68>
    } else if (old_pending < ARP_TABLE_SIZE) {
 8021ac0:	9b01      	ldr	r3, [sp, #4]
 8021ac2:	2b20      	cmp	r3, #32
 8021ac4:	d105      	bne.n	8021ad2 <etharp_find_entry+0x126>
    } else if (old_queue < ARP_TABLE_SIZE) {
 8021ac6:	f1b8 0f20 	cmp.w	r8, #32
 8021aca:	d007      	beq.n	8021adc <etharp_find_entry+0x130>
    etharp_free_entry(i);
 8021acc:	4644      	mov	r4, r8
 8021ace:	46c1      	mov	r9, r8
 8021ad0:	e7f2      	b.n	8021ab8 <etharp_find_entry+0x10c>
 8021ad2:	461c      	mov	r4, r3
 8021ad4:	4699      	mov	r9, r3
 8021ad6:	e7ef      	b.n	8021ab8 <etharp_find_entry+0x10c>
 8021ad8:	4664      	mov	r4, ip
 8021ada:	e7ed      	b.n	8021ab8 <etharp_find_entry+0x10c>
    return (s16_t)ERR_MEM;
 8021adc:	f04f 34ff 	mov.w	r4, #4294967295
 8021ae0:	e7b0      	b.n	8021a44 <etharp_find_entry+0x98>
 8021ae2:	bf00      	nop
 8021ae4:	2002e438 	.word	0x2002e438
 8021ae8:	08044ff0 	.word	0x08044ff0
 8021aec:	08045050 	.word	0x08045050
 8021af0:	08029a64 	.word	0x08029a64
 8021af4:	08045038 	.word	0x08045038

08021af8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8021af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021afc:	b082      	sub	sp, #8
 8021afe:	4688      	mov	r8, r1
 8021b00:	4691      	mov	r9, r2
 8021b02:	461f      	mov	r7, r3
 8021b04:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
  struct pbuf *p;
  err_t result = ERR_OK;
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021b08:	4606      	mov	r6, r0
{
 8021b0a:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021b0e:	2800      	cmp	r0, #0
 8021b10:	d050      	beq.n	8021bb4 <etharp_raw+0xbc>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8021b12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021b16:	211c      	movs	r1, #28
 8021b18:	200e      	movs	r0, #14
 8021b1a:	f7f8 ff07 	bl	801a92c <pbuf_alloc>
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8021b1e:	4605      	mov	r5, r0
 8021b20:	2800      	cmp	r0, #0
 8021b22:	d04f      	beq.n	8021bc4 <etharp_raw+0xcc>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021b24:	8943      	ldrh	r3, [r0, #10]
 8021b26:	2b1b      	cmp	r3, #27
 8021b28:	d93c      	bls.n	8021ba4 <etharp_raw+0xac>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8021b2a:	4620      	mov	r0, r4
  hdr = (struct etharp_hdr *)p->payload;
 8021b2c:	686c      	ldr	r4, [r5, #4]
  hdr->opcode = lwip_htons(opcode);
 8021b2e:	f7f7 f893 	bl	8018c58 <lwip_htons>
 8021b32:	80e0      	strh	r0, [r4, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8021b34:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 8021b38:	2b06      	cmp	r3, #6
 8021b3a:	d006      	beq.n	8021b4a <etharp_raw+0x52>
 8021b3c:	4b23      	ldr	r3, [pc, #140]	; (8021bcc <etharp_raw+0xd4>)
 8021b3e:	f240 4269 	movw	r2, #1129	; 0x469
 8021b42:	4923      	ldr	r1, [pc, #140]	; (8021bd0 <etharp_raw+0xd8>)
 8021b44:	4823      	ldr	r0, [pc, #140]	; (8021bd4 <etharp_raw+0xdc>)
 8021b46:	f003 f985 	bl	8024e54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021b4a:	6839      	ldr	r1, [r7, #0]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021b4c:	4630      	mov	r0, r6
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021b4e:	2600      	movs	r6, #0
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021b50:	464b      	mov	r3, r9
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021b52:	60a1      	str	r1, [r4, #8]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021b54:	4642      	mov	r2, r8
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8021b56:	88b9      	ldrh	r1, [r7, #4]
 8021b58:	81a1      	strh	r1, [r4, #12]
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8021b5a:	f8da 1000 	ldr.w	r1, [sl]
 8021b5e:	f8c4 1012 	str.w	r1, [r4, #18]
 8021b62:	f8ba 1004 	ldrh.w	r1, [sl, #4]
 8021b66:	82e1      	strh	r1, [r4, #22]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8021b68:	990a      	ldr	r1, [sp, #40]	; 0x28
 8021b6a:	6809      	ldr	r1, [r1, #0]
 8021b6c:	f8c4 100e 	str.w	r1, [r4, #14]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021b70:	990c      	ldr	r1, [sp, #48]	; 0x30
 8021b72:	6809      	ldr	r1, [r1, #0]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021b74:	7026      	strb	r6, [r4, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021b76:	61a1      	str	r1, [r4, #24]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021b78:	2101      	movs	r1, #1
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021b7a:	70e6      	strb	r6, [r4, #3]
  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021b7c:	7061      	strb	r1, [r4, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8021b7e:	2108      	movs	r1, #8
 8021b80:	70a1      	strb	r1, [r4, #2]
  hdr->hwlen = ETH_HWADDR_LEN;
 8021b82:	2106      	movs	r1, #6
 8021b84:	7121      	strb	r1, [r4, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021b86:	2104      	movs	r1, #4
 8021b88:	7161      	strb	r1, [r4, #5]
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021b8a:	f640 0106 	movw	r1, #2054	; 0x806
 8021b8e:	9100      	str	r1, [sp, #0]
 8021b90:	4629      	mov	r1, r5
 8021b92:	f001 fbf5 	bl	8023380 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8021b96:	4628      	mov	r0, r5
 8021b98:	f7f9 f89a 	bl	801acd0 <pbuf_free>
  p = NULL;
  /* could not allocate pbuf for ARP request */

  return result;
 8021b9c:	4630      	mov	r0, r6
}
 8021b9e:	b002      	add	sp, #8
 8021ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8021ba4:	4b09      	ldr	r3, [pc, #36]	; (8021bcc <etharp_raw+0xd4>)
 8021ba6:	f240 4262 	movw	r2, #1122	; 0x462
 8021baa:	490b      	ldr	r1, [pc, #44]	; (8021bd8 <etharp_raw+0xe0>)
 8021bac:	4809      	ldr	r0, [pc, #36]	; (8021bd4 <etharp_raw+0xdc>)
 8021bae:	f003 f951 	bl	8024e54 <iprintf>
 8021bb2:	e7ba      	b.n	8021b2a <etharp_raw+0x32>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8021bb4:	4b05      	ldr	r3, [pc, #20]	; (8021bcc <etharp_raw+0xd4>)
 8021bb6:	f240 4257 	movw	r2, #1111	; 0x457
 8021bba:	4908      	ldr	r1, [pc, #32]	; (8021bdc <etharp_raw+0xe4>)
 8021bbc:	4805      	ldr	r0, [pc, #20]	; (8021bd4 <etharp_raw+0xdc>)
 8021bbe:	f003 f949 	bl	8024e54 <iprintf>
 8021bc2:	e7a6      	b.n	8021b12 <etharp_raw+0x1a>
    return ERR_MEM;
 8021bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8021bc8:	e7e9      	b.n	8021b9e <etharp_raw+0xa6>
 8021bca:	bf00      	nop
 8021bcc:	08044ff0 	.word	0x08044ff0
 8021bd0:	080450b0 	.word	0x080450b0
 8021bd4:	08029a64 	.word	0x08029a64
 8021bd8:	0804507c 	.word	0x0804507c
 8021bdc:	0802c704 	.word	0x0802c704

08021be0 <etharp_output_to_arp_index>:
{
 8021be0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021be4:	4f37      	ldr	r7, [pc, #220]	; (8021cc4 <etharp_output_to_arp_index+0xe4>)
 8021be6:	eb02 0942 	add.w	r9, r2, r2, lsl #1
{
 8021bea:	b085      	sub	sp, #20
 8021bec:	4614      	mov	r4, r2
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021bee:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
{
 8021bf2:	4605      	mov	r5, r0
 8021bf4:	460e      	mov	r6, r1
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021bf6:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8021bfa:	f899 3014 	ldrb.w	r3, [r9, #20]
 8021bfe:	2b01      	cmp	r3, #1
 8021c00:	d93c      	bls.n	8021c7c <etharp_output_to_arp_index+0x9c>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021c02:	2b02      	cmp	r3, #2
 8021c04:	d011      	beq.n	8021c2a <etharp_output_to_arp_index+0x4a>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c06:	2218      	movs	r2, #24
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c08:	f105 092e 	add.w	r9, r5, #46	; 0x2e
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c0c:	fb02 7404 	mla	r4, r2, r4, r7
 8021c10:	340c      	adds	r4, #12
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8021c12:	f44f 6700 	mov.w	r7, #2048	; 0x800
 8021c16:	4623      	mov	r3, r4
 8021c18:	464a      	mov	r2, r9
 8021c1a:	4631      	mov	r1, r6
 8021c1c:	4628      	mov	r0, r5
 8021c1e:	9700      	str	r7, [sp, #0]
 8021c20:	f001 fbae 	bl	8023380 <ethernet_output>
}
 8021c24:	b005      	add	sp, #20
 8021c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8021c2a:	44a0      	add	r8, r4
 8021c2c:	eb07 08c8 	add.w	r8, r7, r8, lsl #3
 8021c30:	f8b8 3012 	ldrh.w	r3, [r8, #18]
 8021c34:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8021c38:	d82a      	bhi.n	8021c90 <etharp_output_to_arp_index+0xb0>
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8021c3a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8021c3e:	d3e2      	bcc.n	8021c06 <etharp_output_to_arp_index+0x26>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c44:	2301      	movs	r3, #1
 8021c46:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021c4a:	4628      	mov	r0, r5
 8021c4c:	00e4      	lsls	r4, r4, #3
 8021c4e:	9303      	str	r3, [sp, #12]
 8021c50:	4b1d      	ldr	r3, [pc, #116]	; (8021cc8 <etharp_output_to_arp_index+0xe8>)
 8021c52:	4649      	mov	r1, r9
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c54:	f104 020c 	add.w	r2, r4, #12
 8021c58:	f104 0c04 	add.w	ip, r4, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c5c:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021c5e:	1d2b      	adds	r3, r5, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c60:	18bc      	adds	r4, r7, r2
 8021c62:	4467      	add	r7, ip
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c64:	9300      	str	r3, [sp, #0]
 8021c66:	464b      	mov	r3, r9
 8021c68:	4622      	mov	r2, r4
 8021c6a:	9702      	str	r7, [sp, #8]
 8021c6c:	f7ff ff44 	bl	8021af8 <etharp_raw>
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021c70:	2800      	cmp	r0, #0
 8021c72:	d1ce      	bne.n	8021c12 <etharp_output_to_arp_index+0x32>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8021c74:	2303      	movs	r3, #3
 8021c76:	f888 3014 	strb.w	r3, [r8, #20]
 8021c7a:	e7ca      	b.n	8021c12 <etharp_output_to_arp_index+0x32>
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8021c7c:	4b13      	ldr	r3, [pc, #76]	; (8021ccc <etharp_output_to_arp_index+0xec>)
 8021c7e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8021c82:	4913      	ldr	r1, [pc, #76]	; (8021cd0 <etharp_output_to_arp_index+0xf0>)
 8021c84:	4813      	ldr	r0, [pc, #76]	; (8021cd4 <etharp_output_to_arp_index+0xf4>)
 8021c86:	f003 f8e5 	bl	8024e54 <iprintf>
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8021c8a:	f899 3014 	ldrb.w	r3, [r9, #20]
 8021c8e:	e7b8      	b.n	8021c02 <etharp_output_to_arp_index+0x22>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021c90:	eb04 0444 	add.w	r4, r4, r4, lsl #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021c94:	2301      	movs	r3, #1
 8021c96:	f105 092e 	add.w	r9, r5, #46	; 0x2e
 8021c9a:	4a0f      	ldr	r2, [pc, #60]	; (8021cd8 <etharp_output_to_arp_index+0xf8>)
 8021c9c:	00e4      	lsls	r4, r4, #3
 8021c9e:	9303      	str	r3, [sp, #12]
 8021ca0:	4649      	mov	r1, r9
 8021ca2:	4628      	mov	r0, r5
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021ca4:	1d23      	adds	r3, r4, #4
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021ca6:	340c      	adds	r4, #12
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021ca8:	443b      	add	r3, r7
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8021caa:	443c      	add	r4, r7
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021cac:	9302      	str	r3, [sp, #8]
 8021cae:	4b06      	ldr	r3, [pc, #24]	; (8021cc8 <etharp_output_to_arp_index+0xe8>)
 8021cb0:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021cb2:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021cb4:	9300      	str	r3, [sp, #0]
 8021cb6:	464b      	mov	r3, r9
 8021cb8:	f7ff ff1e 	bl	8021af8 <etharp_raw>
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8021cbc:	2800      	cmp	r0, #0
 8021cbe:	d0d9      	beq.n	8021c74 <etharp_output_to_arp_index+0x94>
 8021cc0:	e7a7      	b.n	8021c12 <etharp_output_to_arp_index+0x32>
 8021cc2:	bf00      	nop
 8021cc4:	2002e438 	.word	0x2002e438
 8021cc8:	08045528 	.word	0x08045528
 8021ccc:	08044ff0 	.word	0x08044ff0
 8021cd0:	080450f4 	.word	0x080450f4
 8021cd4:	08029a64 	.word	0x08029a64
 8021cd8:	08045520 	.word	0x08045520

08021cdc <etharp_tmr>:
{
 8021cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ce0:	4c1e      	ldr	r4, [pc, #120]	; (8021d5c <etharp_tmr+0x80>)
 8021ce2:	b084      	sub	sp, #16
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021ce4:	2500      	movs	r5, #0
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021ce6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8021d64 <etharp_tmr+0x88>
 8021cea:	4f1d      	ldr	r7, [pc, #116]	; (8021d60 <etharp_tmr+0x84>)
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021cec:	2602      	movs	r6, #2
 8021cee:	e00d      	b.n	8021d0c <etharp_tmr+0x30>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8021cf0:	2a01      	cmp	r2, #1
 8021cf2:	d101      	bne.n	8021cf8 <etharp_tmr+0x1c>
 8021cf4:	2b04      	cmp	r3, #4
 8021cf6:	d813      	bhi.n	8021d20 <etharp_tmr+0x44>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8021cf8:	2a03      	cmp	r2, #3
 8021cfa:	d01b      	beq.n	8021d34 <etharp_tmr+0x58>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8021cfc:	2a04      	cmp	r2, #4
 8021cfe:	d01c      	beq.n	8021d3a <etharp_tmr+0x5e>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021d00:	2a01      	cmp	r2, #1
 8021d02:	d01c      	beq.n	8021d3e <etharp_tmr+0x62>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d04:	3501      	adds	r5, #1
 8021d06:	3418      	adds	r4, #24
 8021d08:	2d20      	cmp	r5, #32
 8021d0a:	d010      	beq.n	8021d2e <etharp_tmr+0x52>
    u8_t state = arp_table[i].state;
 8021d0c:	7c22      	ldrb	r2, [r4, #16]
    if (state != ETHARP_STATE_EMPTY
 8021d0e:	2a00      	cmp	r2, #0
 8021d10:	d0f8      	beq.n	8021d04 <etharp_tmr+0x28>
      arp_table[i].ctime++;
 8021d12:	89e3      	ldrh	r3, [r4, #14]
 8021d14:	3301      	adds	r3, #1
 8021d16:	b29b      	uxth	r3, r3
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021d18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
      arp_table[i].ctime++;
 8021d1c:	81e3      	strh	r3, [r4, #14]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8021d1e:	d3e7      	bcc.n	8021cf0 <etharp_tmr+0x14>
        etharp_free_entry(i);
 8021d20:	4628      	mov	r0, r5
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d22:	3501      	adds	r5, #1
        etharp_free_entry(i);
 8021d24:	f7ff fe02 	bl	802192c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d28:	3418      	adds	r4, #24
 8021d2a:	2d20      	cmp	r5, #32
 8021d2c:	d1ee      	bne.n	8021d0c <etharp_tmr+0x30>
}
 8021d2e:	b004      	add	sp, #16
 8021d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8021d34:	2304      	movs	r3, #4
 8021d36:	7423      	strb	r3, [r4, #16]
 8021d38:	e7e4      	b.n	8021d04 <etharp_tmr+0x28>
        arp_table[i].state = ETHARP_STATE_STABLE;
 8021d3a:	7426      	strb	r6, [r4, #16]
 8021d3c:	e7e2      	b.n	8021d04 <etharp_tmr+0x28>
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8021d3e:	6860      	ldr	r0, [r4, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021d40:	f8cd 8004 	str.w	r8, [sp, #4]
 8021d44:	f100 032e 	add.w	r3, r0, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021d48:	1d01      	adds	r1, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021d4a:	e9cd 4202 	strd	r4, r2, [sp, #8]
 8021d4e:	9100      	str	r1, [sp, #0]
 8021d50:	463a      	mov	r2, r7
 8021d52:	4619      	mov	r1, r3
 8021d54:	f7ff fed0 	bl	8021af8 <etharp_raw>
 8021d58:	e7d4      	b.n	8021d04 <etharp_tmr+0x28>
 8021d5a:	bf00      	nop
 8021d5c:	2002e43c 	.word	0x2002e43c
 8021d60:	08045520 	.word	0x08045520
 8021d64:	08045528 	.word	0x08045528

08021d68 <etharp_cleanup_netif>:
{
 8021d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021d6a:	4c0c      	ldr	r4, [pc, #48]	; (8021d9c <etharp_cleanup_netif+0x34>)
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d6c:	2500      	movs	r5, #0
{
 8021d6e:	4607      	mov	r7, r0
 8021d70:	f504 7640 	add.w	r6, r4, #768	; 0x300
 8021d74:	e003      	b.n	8021d7e <etharp_cleanup_netif+0x16>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d76:	3418      	adds	r4, #24
 8021d78:	3501      	adds	r5, #1
 8021d7a:	42b4      	cmp	r4, r6
 8021d7c:	d00c      	beq.n	8021d98 <etharp_cleanup_netif+0x30>
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8021d7e:	7d23      	ldrb	r3, [r4, #20]
 8021d80:	2b00      	cmp	r3, #0
 8021d82:	d0f8      	beq.n	8021d76 <etharp_cleanup_netif+0xe>
 8021d84:	68a3      	ldr	r3, [r4, #8]
 8021d86:	42bb      	cmp	r3, r7
 8021d88:	d1f5      	bne.n	8021d76 <etharp_cleanup_netif+0xe>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d8a:	3418      	adds	r4, #24
      etharp_free_entry(i);
 8021d8c:	4628      	mov	r0, r5
 8021d8e:	f7ff fdcd 	bl	802192c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8021d92:	3501      	adds	r5, #1
 8021d94:	42b4      	cmp	r4, r6
 8021d96:	d1f2      	bne.n	8021d7e <etharp_cleanup_netif+0x16>
}
 8021d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d9a:	bf00      	nop
 8021d9c:	2002e438 	.word	0x2002e438

08021da0 <etharp_input>:
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021da0:	2900      	cmp	r1, #0
 8021da2:	f000 808e 	beq.w	8021ec2 <etharp_input+0x122>
{
 8021da6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hdr = (struct etharp_hdr *)p->payload;
 8021daa:	6846      	ldr	r6, [r0, #4]
{
 8021dac:	b087      	sub	sp, #28
 8021dae:	4604      	mov	r4, r0
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8021db0:	8833      	ldrh	r3, [r6, #0]
 8021db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021db6:	d102      	bne.n	8021dbe <etharp_input+0x1e>
 8021db8:	7933      	ldrb	r3, [r6, #4]
 8021dba:	2b06      	cmp	r3, #6
 8021dbc:	d005      	beq.n	8021dca <etharp_input+0x2a>
    pbuf_free(p);
 8021dbe:	4620      	mov	r0, r4
}
 8021dc0:	b007      	add	sp, #28
 8021dc2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pbuf_free(p);
 8021dc6:	f7f8 bf83 	b.w	801acd0 <pbuf_free>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8021dca:	7973      	ldrb	r3, [r6, #5]
 8021dcc:	2b04      	cmp	r3, #4
 8021dce:	d1f6      	bne.n	8021dbe <etharp_input+0x1e>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8021dd0:	8873      	ldrh	r3, [r6, #2]
 8021dd2:	2b08      	cmp	r3, #8
 8021dd4:	d1f3      	bne.n	8021dbe <etharp_input+0x1e>
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021dd6:	f8d6 000e 	ldr.w	r0, [r6, #14]
 8021dda:	460d      	mov	r5, r1
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021ddc:	684b      	ldr	r3, [r1, #4]
 8021dde:	f8d6 a018 	ldr.w	sl, [r6, #24]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8021de2:	9005      	str	r0, [sp, #20]
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021de4:	2b00      	cmp	r3, #0
 8021de6:	d073      	beq.n	8021ed0 <etharp_input+0x130>
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021de8:	eba3 0a0a 	sub.w	sl, r3, sl
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021dec:	f106 0808 	add.w	r8, r6, #8
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8021df0:	faba fa8a 	clz	sl, sl
 8021df4:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021df8:	f1ca 0702 	rsb	r7, sl, #2
 8021dfc:	b2ff      	uxtb	r7, r7
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8021dfe:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8021e02:	2b06      	cmp	r3, #6
 8021e04:	d007      	beq.n	8021e16 <etharp_input+0x76>
 8021e06:	4b3e      	ldr	r3, [pc, #248]	; (8021f00 <etharp_input+0x160>)
 8021e08:	f240 12a9 	movw	r2, #425	; 0x1a9
 8021e0c:	493d      	ldr	r1, [pc, #244]	; (8021f04 <etharp_input+0x164>)
 8021e0e:	483e      	ldr	r0, [pc, #248]	; (8021f08 <etharp_input+0x168>)
 8021e10:	f003 f820 	bl	8024e54 <iprintf>
  if (ip4_addr_isany(ipaddr) ||
 8021e14:	9805      	ldr	r0, [sp, #20]
 8021e16:	2800      	cmp	r0, #0
 8021e18:	d042      	beq.n	8021ea0 <etharp_input+0x100>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021e1a:	4629      	mov	r1, r5
 8021e1c:	f000 fd30 	bl	8022880 <ip4_addr_isbroadcast_u32>
  if (ip4_addr_isany(ipaddr) ||
 8021e20:	4681      	mov	r9, r0
 8021e22:	2800      	cmp	r0, #0
 8021e24:	d13c      	bne.n	8021ea0 <etharp_input+0x100>
      ip4_addr_ismulticast(ipaddr)) {
 8021e26:	9b05      	ldr	r3, [sp, #20]
 8021e28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8021e2c:	2be0      	cmp	r3, #224	; 0xe0
 8021e2e:	d037      	beq.n	8021ea0 <etharp_input+0x100>
  i = etharp_find_entry(ipaddr, flags, netif);
 8021e30:	4639      	mov	r1, r7
 8021e32:	462a      	mov	r2, r5
 8021e34:	a805      	add	r0, sp, #20
 8021e36:	f7ff fdb9 	bl	80219ac <etharp_find_entry>
  if (i < 0) {
 8021e3a:	2800      	cmp	r0, #0
 8021e3c:	db30      	blt.n	8021ea0 <etharp_input+0x100>
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021e3e:	4a33      	ldr	r2, [pc, #204]	; (8021f0c <etharp_input+0x16c>)
 8021e40:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8021e44:	2302      	movs	r3, #2
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021e46:	f04f 0c18 	mov.w	ip, #24
    arp_table[i].state = ETHARP_STATE_STABLE;
 8021e4a:	eb02 07c1 	add.w	r7, r2, r1, lsl #3
 8021e4e:	753b      	strb	r3, [r7, #20]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021e50:	230c      	movs	r3, #12
  arp_table[i].netif = netif;
 8021e52:	60bd      	str	r5, [r7, #8]
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8021e54:	fb10 330c 	smlabb	r3, r0, ip, r3
 8021e58:	f8d8 0000 	ldr.w	r0, [r8]
 8021e5c:	50d0      	str	r0, [r2, r3]
 8021e5e:	18d0      	adds	r0, r2, r3
 8021e60:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8021e64:	8083      	strh	r3, [r0, #4]
  while (arp_table[i].q != NULL) {
 8021e66:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
  arp_table[i].ctime = 0;
 8021e6a:	f8a7 9012 	strh.w	r9, [r7, #18]
  while (arp_table[i].q != NULL) {
 8021e6e:	b1b9      	cbz	r1, 8021ea0 <etharp_input+0x100>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021e70:	f105 092e 	add.w	r9, r5, #46	; 0x2e
    arp_table[i].q = q->next;
 8021e74:	680b      	ldr	r3, [r1, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021e76:	200b      	movs	r0, #11
    p = q->p;
 8021e78:	f8d1 b004 	ldr.w	fp, [r1, #4]
    arp_table[i].q = q->next;
 8021e7c:	603b      	str	r3, [r7, #0]
    memp_free(MEMP_ARP_QUEUE, q);
 8021e7e:	f7f8 fa0f 	bl	801a2a0 <memp_free>
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8021e82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8021e86:	4659      	mov	r1, fp
 8021e88:	464a      	mov	r2, r9
 8021e8a:	9300      	str	r3, [sp, #0]
 8021e8c:	4628      	mov	r0, r5
 8021e8e:	4643      	mov	r3, r8
 8021e90:	f001 fa76 	bl	8023380 <ethernet_output>
    pbuf_free(p);
 8021e94:	4658      	mov	r0, fp
 8021e96:	f7f8 ff1b 	bl	801acd0 <pbuf_free>
  while (arp_table[i].q != NULL) {
 8021e9a:	6839      	ldr	r1, [r7, #0]
 8021e9c:	2900      	cmp	r1, #0
 8021e9e:	d1e9      	bne.n	8021e74 <etharp_input+0xd4>
  switch (hdr->opcode) {
 8021ea0:	88f3      	ldrh	r3, [r6, #6]
 8021ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8021ea6:	d018      	beq.n	8021eda <etharp_input+0x13a>
 8021ea8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8021eac:	d103      	bne.n	8021eb6 <etharp_input+0x116>
      dhcp_arp_reply(netif, &sipaddr);
 8021eae:	a905      	add	r1, sp, #20
 8021eb0:	4628      	mov	r0, r5
 8021eb2:	f7ff f971 	bl	8021198 <dhcp_arp_reply>
  pbuf_free(p);
 8021eb6:	4620      	mov	r0, r4
 8021eb8:	f7f8 ff0a 	bl	801acd0 <pbuf_free>
}
 8021ebc:	b007      	add	sp, #28
 8021ebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8021ec2:	4b0f      	ldr	r3, [pc, #60]	; (8021f00 <etharp_input+0x160>)
 8021ec4:	f240 228a 	movw	r2, #650	; 0x28a
 8021ec8:	4911      	ldr	r1, [pc, #68]	; (8021f10 <etharp_input+0x170>)
 8021eca:	480f      	ldr	r0, [pc, #60]	; (8021f08 <etharp_input+0x168>)
 8021ecc:	f002 bfc2 	b.w	8024e54 <iprintf>
    for_us = 0;
 8021ed0:	469a      	mov	sl, r3
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8021ed2:	f106 0808 	add.w	r8, r6, #8
 8021ed6:	2702      	movs	r7, #2
 8021ed8:	e791      	b.n	8021dfe <etharp_input+0x5e>
      if (for_us) {
 8021eda:	f1ba 0f00 	cmp.w	sl, #0
 8021ede:	d0ea      	beq.n	8021eb6 <etharp_input+0x116>
        etharp_raw(netif,
 8021ee0:	2102      	movs	r1, #2
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8021ee2:	f105 032e 	add.w	r3, r5, #46	; 0x2e
        etharp_raw(netif,
 8021ee6:	4642      	mov	r2, r8
 8021ee8:	4628      	mov	r0, r5
 8021eea:	9103      	str	r1, [sp, #12]
 8021eec:	a905      	add	r1, sp, #20
 8021eee:	f8cd 8004 	str.w	r8, [sp, #4]
 8021ef2:	9102      	str	r1, [sp, #8]
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8021ef4:	1d29      	adds	r1, r5, #4
        etharp_raw(netif,
 8021ef6:	9100      	str	r1, [sp, #0]
 8021ef8:	4619      	mov	r1, r3
 8021efa:	f7ff fdfd 	bl	8021af8 <etharp_raw>
 8021efe:	e7da      	b.n	8021eb6 <etharp_input+0x116>
 8021f00:	08044ff0 	.word	0x08044ff0
 8021f04:	08045144 	.word	0x08045144
 8021f08:	08029a64 	.word	0x08029a64
 8021f0c:	2002e438 	.word	0x2002e438
 8021f10:	0802c704 	.word	0x0802c704

08021f14 <etharp_query>:
{
 8021f14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021f18:	468a      	mov	sl, r1
 8021f1a:	b085      	sub	sp, #20
 8021f1c:	4605      	mov	r5, r0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021f1e:	4601      	mov	r1, r0
 8021f20:	f8da 0000 	ldr.w	r0, [sl]
{
 8021f24:	4616      	mov	r6, r2
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8021f26:	f000 fcab 	bl	8022880 <ip4_addr_isbroadcast_u32>
 8021f2a:	2800      	cmp	r0, #0
 8021f2c:	f040 80d1 	bne.w	80220d2 <etharp_query+0x1be>
      ip4_addr_ismulticast(ipaddr) ||
 8021f30:	f8da 3000 	ldr.w	r3, [sl]
 8021f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
      ip4_addr_isany(ipaddr)) {
 8021f38:	2ae0      	cmp	r2, #224	; 0xe0
 8021f3a:	f000 80ca 	beq.w	80220d2 <etharp_query+0x1be>
 8021f3e:	2b00      	cmp	r3, #0
 8021f40:	f000 80c7 	beq.w	80220d2 <etharp_query+0x1be>
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8021f44:	462a      	mov	r2, r5
 8021f46:	2101      	movs	r1, #1
 8021f48:	4650      	mov	r0, sl
 8021f4a:	f7ff fd2f 	bl	80219ac <etharp_find_entry>
  if (i_err < 0) {
 8021f4e:	1e07      	subs	r7, r0, #0
 8021f50:	db52      	blt.n	8021ff8 <etharp_query+0xe4>
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021f52:	2f7e      	cmp	r7, #126	; 0x7e
 8021f54:	dc48      	bgt.n	8021fe8 <etharp_query+0xd4>
  i = (netif_addr_idx_t)i_err;
 8021f56:	b2ff      	uxtb	r7, r7
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8021f58:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8022108 <etharp_query+0x1f4>
 8021f5c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8021f60:	ea4f 0947 	mov.w	r9, r7, lsl #1
 8021f64:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
 8021f68:	7d1a      	ldrb	r2, [r3, #20]
 8021f6a:	b18a      	cbz	r2, 8021f90 <etharp_query+0x7c>
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021f6c:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
  if (is_new_entry || (q == NULL)) {
 8021f70:	2e00      	cmp	r6, #0
 8021f72:	f000 80a0 	beq.w	80220b6 <etharp_query+0x1a2>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021f76:	eb09 0207 	add.w	r2, r9, r7
  err_t result = ERR_MEM;
 8021f7a:	f04f 30ff 	mov.w	r0, #4294967295
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021f7e:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021f82:	7d13      	ldrb	r3, [r2, #20]
 8021f84:	2b01      	cmp	r3, #1
 8021f86:	d81e      	bhi.n	8021fc6 <etharp_query+0xb2>
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8021f88:	d03a      	beq.n	8022000 <etharp_query+0xec>
}
 8021f8a:	b005      	add	sp, #20
 8021f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021f90:	2201      	movs	r2, #1
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f92:	f8cd a008 	str.w	sl, [sp, #8]
    arp_table[i].netif = netif;
 8021f96:	609d      	str	r5, [r3, #8]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8021f98:	f105 0b2e 	add.w	fp, r5, #46	; 0x2e
    arp_table[i].state = ETHARP_STATE_PENDING;
 8021f9c:	751a      	strb	r2, [r3, #20]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021f9e:	4628      	mov	r0, r5
 8021fa0:	4b53      	ldr	r3, [pc, #332]	; (80220f0 <etharp_query+0x1dc>)
 8021fa2:	4659      	mov	r1, fp
 8021fa4:	9203      	str	r2, [sp, #12]
 8021fa6:	9301      	str	r3, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021fa8:	1d2b      	adds	r3, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021faa:	4a52      	ldr	r2, [pc, #328]	; (80220f4 <etharp_query+0x1e0>)
 8021fac:	9300      	str	r3, [sp, #0]
 8021fae:	465b      	mov	r3, fp
 8021fb0:	f7ff fda2 	bl	8021af8 <etharp_raw>
    if (q == NULL) {
 8021fb4:	2e00      	cmp	r6, #0
 8021fb6:	d0e8      	beq.n	8021f8a <etharp_query+0x76>
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021fb8:	eb09 0207 	add.w	r2, r9, r7
 8021fbc:	eb08 02c2 	add.w	r2, r8, r2, lsl #3
 8021fc0:	7d13      	ldrb	r3, [r2, #20]
 8021fc2:	2b01      	cmp	r3, #1
 8021fc4:	d9e0      	bls.n	8021f88 <etharp_query+0x74>
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021fc6:	2318      	movs	r3, #24
 8021fc8:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8021fcc:	465a      	mov	r2, fp
 8021fce:	4631      	mov	r1, r6
 8021fd0:	fb03 8307 	mla	r3, r3, r7, r8
 8021fd4:	4628      	mov	r0, r5
 8021fd6:	9400      	str	r4, [sp, #0]
    ETHARP_SET_ADDRHINT(netif, i);
 8021fd8:	4c47      	ldr	r4, [pc, #284]	; (80220f8 <etharp_query+0x1e4>)
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021fda:	330c      	adds	r3, #12
    ETHARP_SET_ADDRHINT(netif, i);
 8021fdc:	7027      	strb	r7, [r4, #0]
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021fde:	f001 f9cf 	bl	8023380 <ethernet_output>
}
 8021fe2:	b005      	add	sp, #20
 8021fe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8021fe8:	4b44      	ldr	r3, [pc, #272]	; (80220fc <etharp_query+0x1e8>)
 8021fea:	f240 32c1 	movw	r2, #961	; 0x3c1
 8021fee:	4944      	ldr	r1, [pc, #272]	; (8022100 <etharp_query+0x1ec>)
 8021ff0:	4844      	ldr	r0, [pc, #272]	; (8022104 <etharp_query+0x1f0>)
 8021ff2:	f002 ff2f 	bl	8024e54 <iprintf>
 8021ff6:	e7ae      	b.n	8021f56 <etharp_query+0x42>
    return (err_t)i_err;
 8021ff8:	b278      	sxtb	r0, r7
}
 8021ffa:	b005      	add	sp, #20
 8021ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022000:	4634      	mov	r4, r6
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8022002:	4d3e      	ldr	r5, [pc, #248]	; (80220fc <etharp_query+0x1e8>)
 8022004:	f8df b104 	ldr.w	fp, [pc, #260]	; 802210c <etharp_query+0x1f8>
 8022008:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8022104 <etharp_query+0x1f0>
 802200c:	e005      	b.n	802201a <etharp_query+0x106>
      if (PBUF_NEEDS_COPY(p)) {
 802200e:	7b23      	ldrb	r3, [r4, #12]
 8022010:	065a      	lsls	r2, r3, #25
 8022012:	d413      	bmi.n	802203c <etharp_query+0x128>
      p = p->next;
 8022014:	6824      	ldr	r4, [r4, #0]
    while (p) {
 8022016:	2c00      	cmp	r4, #0
 8022018:	d038      	beq.n	802208c <etharp_query+0x178>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802201a:	8962      	ldrh	r2, [r4, #10]
 802201c:	8923      	ldrh	r3, [r4, #8]
 802201e:	429a      	cmp	r2, r3
 8022020:	d1f5      	bne.n	802200e <etharp_query+0xfa>
 8022022:	6822      	ldr	r2, [r4, #0]
 8022024:	462b      	mov	r3, r5
 8022026:	b132      	cbz	r2, 8022036 <etharp_query+0x122>
 8022028:	f240 32f1 	movw	r2, #1009	; 0x3f1
 802202c:	4659      	mov	r1, fp
 802202e:	4650      	mov	r0, sl
 8022030:	f002 ff10 	bl	8024e54 <iprintf>
 8022034:	e7eb      	b.n	802200e <etharp_query+0xfa>
      if (PBUF_NEEDS_COPY(p)) {
 8022036:	7b23      	ldrb	r3, [r4, #12]
 8022038:	065b      	lsls	r3, r3, #25
 802203a:	d527      	bpl.n	802208c <etharp_query+0x178>
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 802203c:	4632      	mov	r2, r6
 802203e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8022042:	200e      	movs	r0, #14
 8022044:	f7f8 ffd6 	bl	801aff4 <pbuf_clone>
    if (p != NULL) {
 8022048:	4606      	mov	r6, r0
 802204a:	2800      	cmp	r0, #0
 802204c:	d047      	beq.n	80220de <etharp_query+0x1ca>
      new_entry = (struct etharp_q_entry *)memp_malloc(MEMP_ARP_QUEUE);
 802204e:	f240 4206 	movw	r2, #1030	; 0x406
 8022052:	492a      	ldr	r1, [pc, #168]	; (80220fc <etharp_query+0x1e8>)
 8022054:	200b      	movs	r0, #11
 8022056:	f7f8 f8ed 	bl	801a234 <memp_malloc_fn>
      if (new_entry != NULL) {
 802205a:	4602      	mov	r2, r0
 802205c:	2800      	cmp	r0, #0
 802205e:	d041      	beq.n	80220e4 <etharp_query+0x1d0>
        if (arp_table[i].q != NULL) {
 8022060:	eb09 0307 	add.w	r3, r9, r7
        new_entry->next = 0;
 8022064:	2100      	movs	r1, #0
        new_entry->p = p;
 8022066:	6046      	str	r6, [r0, #4]
        if (arp_table[i].q != NULL) {
 8022068:	00db      	lsls	r3, r3, #3
        new_entry->next = 0;
 802206a:	6001      	str	r1, [r0, #0]
        if (arp_table[i].q != NULL) {
 802206c:	f858 5003 	ldr.w	r5, [r8, r3]
 8022070:	b1ed      	cbz	r5, 80220ae <etharp_query+0x19a>
          while (r->next != NULL) {
 8022072:	682c      	ldr	r4, [r5, #0]
 8022074:	b384      	cbz	r4, 80220d8 <etharp_query+0x1c4>
          qlen++;
 8022076:	2301      	movs	r3, #1
            qlen++;
 8022078:	4620      	mov	r0, r4
          while (r->next != NULL) {
 802207a:	6824      	ldr	r4, [r4, #0]
            qlen++;
 802207c:	3301      	adds	r3, #1
          while (r->next != NULL) {
 802207e:	2c00      	cmp	r4, #0
 8022080:	d1fa      	bne.n	8022078 <etharp_query+0x164>
        if (qlen >= ARP_QUEUE_LEN) {
 8022082:	2b1f      	cmp	r3, #31
          r->next = new_entry;
 8022084:	6002      	str	r2, [r0, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 8022086:	d805      	bhi.n	8022094 <etharp_query+0x180>
        result = ERR_OK;
 8022088:	4620      	mov	r0, r4
 802208a:	e77e      	b.n	8021f8a <etharp_query+0x76>
      pbuf_ref(p);
 802208c:	4630      	mov	r0, r6
 802208e:	f7f8 fe3d 	bl	801ad0c <pbuf_ref>
    if (p != NULL) {
 8022092:	e7dc      	b.n	802204e <etharp_query+0x13a>
          arp_table[i].q = arp_table[i].q->next;
 8022094:	682b      	ldr	r3, [r5, #0]
 8022096:	444f      	add	r7, r9
          pbuf_free(old->p);
 8022098:	6868      	ldr	r0, [r5, #4]
          arp_table[i].q = arp_table[i].q->next;
 802209a:	f848 3037 	str.w	r3, [r8, r7, lsl #3]
          pbuf_free(old->p);
 802209e:	f7f8 fe17 	bl	801acd0 <pbuf_free>
          memp_free(MEMP_ARP_QUEUE, old);
 80220a2:	200b      	movs	r0, #11
 80220a4:	4629      	mov	r1, r5
 80220a6:	f7f8 f8fb 	bl	801a2a0 <memp_free>
        result = ERR_OK;
 80220aa:	4620      	mov	r0, r4
 80220ac:	e76d      	b.n	8021f8a <etharp_query+0x76>
 80220ae:	4628      	mov	r0, r5
          arp_table[i].q = new_entry;
 80220b0:	f848 2003 	str.w	r2, [r8, r3]
        if (qlen >= ARP_QUEUE_LEN) {
 80220b4:	e769      	b.n	8021f8a <etharp_query+0x76>
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80220b6:	1d2a      	adds	r2, r5, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80220b8:	2301      	movs	r3, #1
 80220ba:	4c0d      	ldr	r4, [pc, #52]	; (80220f0 <etharp_query+0x1dc>)
 80220bc:	4659      	mov	r1, fp
 80220be:	4628      	mov	r0, r5
 80220c0:	e9cd a302 	strd	sl, r3, [sp, #8]
 80220c4:	e9cd 2400 	strd	r2, r4, [sp]
 80220c8:	465b      	mov	r3, fp
 80220ca:	4a0a      	ldr	r2, [pc, #40]	; (80220f4 <etharp_query+0x1e0>)
 80220cc:	f7ff fd14 	bl	8021af8 <etharp_raw>
    if (q == NULL) {
 80220d0:	e75b      	b.n	8021f8a <etharp_query+0x76>
    return ERR_ARG;
 80220d2:	f06f 000f 	mvn.w	r0, #15
 80220d6:	e758      	b.n	8021f8a <etharp_query+0x76>
        result = ERR_OK;
 80220d8:	4620      	mov	r0, r4
          r->next = new_entry;
 80220da:	602a      	str	r2, [r5, #0]
        if (qlen >= ARP_QUEUE_LEN) {
 80220dc:	e755      	b.n	8021f8a <etharp_query+0x76>
      result = ERR_MEM;
 80220de:	f04f 30ff 	mov.w	r0, #4294967295
 80220e2:	e752      	b.n	8021f8a <etharp_query+0x76>
        pbuf_free(p);
 80220e4:	4630      	mov	r0, r6
 80220e6:	f7f8 fdf3 	bl	801acd0 <pbuf_free>
        result = ERR_MEM;
 80220ea:	f04f 30ff 	mov.w	r0, #4294967295
 80220ee:	e74c      	b.n	8021f8a <etharp_query+0x76>
 80220f0:	08045528 	.word	0x08045528
 80220f4:	08045520 	.word	0x08045520
 80220f8:	2002e738 	.word	0x2002e738
 80220fc:	08044ff0 	.word	0x08044ff0
 8022100:	08045168 	.word	0x08045168
 8022104:	08029a64 	.word	0x08029a64
 8022108:	2002e438 	.word	0x2002e438
 802210c:	08045178 	.word	0x08045178

08022110 <etharp_output>:
{
 8022110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022114:	460f      	mov	r7, r1
 8022116:	b084      	sub	sp, #16
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8022118:	4605      	mov	r5, r0
{
 802211a:	4616      	mov	r6, r2
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802211c:	2800      	cmp	r0, #0
 802211e:	f000 8086 	beq.w	802222e <etharp_output+0x11e>
  LWIP_ASSERT("q != NULL", q != NULL);
 8022122:	2f00      	cmp	r7, #0
 8022124:	d072      	beq.n	802220c <etharp_output+0xfc>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8022126:	2e00      	cmp	r6, #0
 8022128:	d079      	beq.n	802221e <etharp_output+0x10e>
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 802212a:	4629      	mov	r1, r5
 802212c:	6830      	ldr	r0, [r6, #0]
 802212e:	f000 fba7 	bl	8022880 <ip4_addr_isbroadcast_u32>
 8022132:	2800      	cmp	r0, #0
 8022134:	d160      	bne.n	80221f8 <etharp_output+0xe8>
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8022136:	6833      	ldr	r3, [r6, #0]
 8022138:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 802213c:	2ae0      	cmp	r2, #224	; 0xe0
 802213e:	d03b      	beq.n	80221b8 <etharp_output+0xa8>
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8022140:	686a      	ldr	r2, [r5, #4]
 8022142:	68a9      	ldr	r1, [r5, #8]
 8022144:	405a      	eors	r2, r3
 8022146:	420a      	tst	r2, r1
 8022148:	d009      	beq.n	802215e <etharp_output+0x4e>
        !ip4_addr_islinklocal(ipaddr)) {
 802214a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802214c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8022150:	4293      	cmp	r3, r2
 8022152:	d004      	beq.n	802215e <etharp_output+0x4e>
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8022154:	68eb      	ldr	r3, [r5, #12]
 8022156:	2b00      	cmp	r3, #0
 8022158:	d07b      	beq.n	8022252 <etharp_output+0x142>
            dst_addr = netif_ip4_gw(netif);
 802215a:	f105 060c 	add.w	r6, r5, #12
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 802215e:	f8df 8114 	ldr.w	r8, [pc, #276]	; 8022274 <etharp_output+0x164>
 8022162:	4b3d      	ldr	r3, [pc, #244]	; (8022258 <etharp_output+0x148>)
 8022164:	f898 2000 	ldrb.w	r2, [r8]
 8022168:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 802216c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8022170:	7d19      	ldrb	r1, [r3, #20]
 8022172:	2901      	cmp	r1, #1
 8022174:	d902      	bls.n	802217c <etharp_output+0x6c>
 8022176:	6899      	ldr	r1, [r3, #8]
 8022178:	42a9      	cmp	r1, r5
 802217a:	d063      	beq.n	8022244 <etharp_output+0x134>
 802217c:	4c36      	ldr	r4, [pc, #216]	; (8022258 <etharp_output+0x148>)
{
 802217e:	2300      	movs	r3, #0
 8022180:	e003      	b.n	802218a <etharp_output+0x7a>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022182:	2b20      	cmp	r3, #32
 8022184:	f104 0418 	add.w	r4, r4, #24
 8022188:	d038      	beq.n	80221fc <etharp_output+0xec>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802218a:	f894 c014 	ldrb.w	ip, [r4, #20]
 802218e:	b2da      	uxtb	r2, r3
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8022190:	3301      	adds	r3, #1
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8022192:	f1bc 0f01 	cmp.w	ip, #1
 8022196:	d9f4      	bls.n	8022182 <etharp_output+0x72>
 8022198:	68a0      	ldr	r0, [r4, #8]
 802219a:	42a8      	cmp	r0, r5
 802219c:	d1f1      	bne.n	8022182 <etharp_output+0x72>
          (arp_table[i].netif == netif) &&
 802219e:	6860      	ldr	r0, [r4, #4]
 80221a0:	6831      	ldr	r1, [r6, #0]
 80221a2:	4281      	cmp	r1, r0
 80221a4:	d1ed      	bne.n	8022182 <etharp_output+0x72>
        return etharp_output_to_arp_index(netif, q, i);
 80221a6:	4639      	mov	r1, r7
 80221a8:	4628      	mov	r0, r5
        ETHARP_SET_ADDRHINT(netif, i);
 80221aa:	f888 2000 	strb.w	r2, [r8]
}
 80221ae:	b004      	add	sp, #16
 80221b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        return etharp_output_to_arp_index(netif, q, i);
 80221b4:	f7ff bd14 	b.w	8021be0 <etharp_output_to_arp_index>
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80221b8:	2201      	movs	r2, #1
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80221ba:	235e      	movs	r3, #94	; 0x5e
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80221bc:	78f1      	ldrb	r1, [r6, #3]
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80221be:	f88d 2008 	strb.w	r2, [sp, #8]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80221c2:	f88d 300a 	strb.w	r3, [sp, #10]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80221c6:	7872      	ldrb	r2, [r6, #1]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80221c8:	78b3      	ldrb	r3, [r6, #2]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80221ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80221ce:	f88d 0009 	strb.w	r0, [sp, #9]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80221d2:	f88d 300c 	strb.w	r3, [sp, #12]
    dest = &mcastaddr;
 80221d6:	ab02      	add	r3, sp, #8
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80221d8:	f88d 200b 	strb.w	r2, [sp, #11]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80221dc:	f88d 100d 	strb.w	r1, [sp, #13]
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80221e0:	f44f 6400 	mov.w	r4, #2048	; 0x800
 80221e4:	f105 022e 	add.w	r2, r5, #46	; 0x2e
 80221e8:	4639      	mov	r1, r7
 80221ea:	4628      	mov	r0, r5
 80221ec:	9400      	str	r4, [sp, #0]
 80221ee:	f001 f8c7 	bl	8023380 <ethernet_output>
}
 80221f2:	b004      	add	sp, #16
 80221f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dest = (const struct eth_addr *)&ethbroadcast;
 80221f8:	4b18      	ldr	r3, [pc, #96]	; (802225c <etharp_output+0x14c>)
 80221fa:	e7f1      	b.n	80221e0 <etharp_output+0xd0>
    return etharp_query(netif, dst_addr, q);
 80221fc:	463a      	mov	r2, r7
 80221fe:	4631      	mov	r1, r6
 8022200:	4628      	mov	r0, r5
}
 8022202:	b004      	add	sp, #16
 8022204:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return etharp_query(netif, dst_addr, q);
 8022208:	f7ff be84 	b.w	8021f14 <etharp_query>
  LWIP_ASSERT("q != NULL", q != NULL);
 802220c:	4b14      	ldr	r3, [pc, #80]	; (8022260 <etharp_output+0x150>)
 802220e:	f240 321f 	movw	r2, #799	; 0x31f
 8022212:	4914      	ldr	r1, [pc, #80]	; (8022264 <etharp_output+0x154>)
 8022214:	4814      	ldr	r0, [pc, #80]	; (8022268 <etharp_output+0x158>)
 8022216:	f002 fe1d 	bl	8024e54 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 802221a:	2e00      	cmp	r6, #0
 802221c:	d185      	bne.n	802212a <etharp_output+0x1a>
 802221e:	4b10      	ldr	r3, [pc, #64]	; (8022260 <etharp_output+0x150>)
 8022220:	f44f 7248 	mov.w	r2, #800	; 0x320
 8022224:	4911      	ldr	r1, [pc, #68]	; (802226c <etharp_output+0x15c>)
 8022226:	4810      	ldr	r0, [pc, #64]	; (8022268 <etharp_output+0x158>)
 8022228:	f002 fe14 	bl	8024e54 <iprintf>
 802222c:	e77d      	b.n	802212a <etharp_output+0x1a>
  LWIP_ASSERT("netif != NULL", netif != NULL);
 802222e:	4b0c      	ldr	r3, [pc, #48]	; (8022260 <etharp_output+0x150>)
 8022230:	f240 321e 	movw	r2, #798	; 0x31e
 8022234:	490e      	ldr	r1, [pc, #56]	; (8022270 <etharp_output+0x160>)
 8022236:	480c      	ldr	r0, [pc, #48]	; (8022268 <etharp_output+0x158>)
 8022238:	f002 fe0c 	bl	8024e54 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802223c:	2f00      	cmp	r7, #0
 802223e:	f47f af72 	bne.w	8022126 <etharp_output+0x16>
 8022242:	e7e3      	b.n	802220c <etharp_output+0xfc>
            (arp_table[etharp_cached_entry].netif == netif) &&
 8022244:	685b      	ldr	r3, [r3, #4]
 8022246:	6831      	ldr	r1, [r6, #0]
 8022248:	4299      	cmp	r1, r3
 802224a:	d197      	bne.n	802217c <etharp_output+0x6c>
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802224c:	4639      	mov	r1, r7
 802224e:	4628      	mov	r0, r5
 8022250:	e7ad      	b.n	80221ae <etharp_output+0x9e>
            return ERR_RTE;
 8022252:	f06f 0003 	mvn.w	r0, #3
 8022256:	e7cc      	b.n	80221f2 <etharp_output+0xe2>
 8022258:	2002e438 	.word	0x2002e438
 802225c:	08045520 	.word	0x08045520
 8022260:	08044ff0 	.word	0x08044ff0
 8022264:	08045194 	.word	0x08045194
 8022268:	08029a64 	.word	0x08029a64
 802226c:	08045124 	.word	0x08045124
 8022270:	0802c704 	.word	0x0802c704
 8022274:	2002e738 	.word	0x2002e738

08022278 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8022278:	b510      	push	{r4, lr}
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802227a:	2301      	movs	r3, #1
{
 802227c:	b084      	sub	sp, #16
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802227e:	4c07      	ldr	r4, [pc, #28]	; (802229c <etharp_request+0x24>)
 8022280:	4a07      	ldr	r2, [pc, #28]	; (80222a0 <etharp_request+0x28>)
 8022282:	9401      	str	r4, [sp, #4]
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8022284:	1d04      	adds	r4, r0, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8022286:	e9cd 1302 	strd	r1, r3, [sp, #8]
 802228a:	f100 032e 	add.w	r3, r0, #46	; 0x2e
 802228e:	9400      	str	r4, [sp, #0]
 8022290:	4619      	mov	r1, r3
 8022292:	f7ff fc31 	bl	8021af8 <etharp_raw>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
}
 8022296:	b004      	add	sp, #16
 8022298:	bd10      	pop	{r4, pc}
 802229a:	bf00      	nop
 802229c:	08045528 	.word	0x08045528
 80222a0:	08045520 	.word	0x08045520

080222a4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80222a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80222a6:	460e      	mov	r6, r1
 80222a8:	b087      	sub	sp, #28
 80222aa:	4617      	mov	r7, r2
 80222ac:	4604      	mov	r4, r0

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80222ae:	2124      	movs	r1, #36	; 0x24
 80222b0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80222b4:	2022      	movs	r0, #34	; 0x22
 80222b6:	f7f8 fb39 	bl	801a92c <pbuf_alloc>
                 PBUF_RAM);
  if (q == NULL) {
 80222ba:	b3a8      	cbz	r0, 8022328 <icmp_send_response+0x84>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80222bc:	8943      	ldrh	r3, [r0, #10]
 80222be:	4605      	mov	r5, r0
 80222c0:	2b23      	cmp	r3, #35	; 0x23
 80222c2:	d933      	bls.n	802232c <icmp_send_response+0x88>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80222c4:	6863      	ldr	r3, [r4, #4]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80222c6:	686c      	ldr	r4, [r5, #4]
  icmphdr->type = type;
 80222c8:	7026      	strb	r6, [r4, #0]
  icmphdr->code = code;
  icmphdr->id = 0;
 80222ca:	2600      	movs	r6, #0
  icmphdr->code = code;
 80222cc:	7067      	strb	r7, [r4, #1]
  icmphdr->id = 0;
 80222ce:	7126      	strb	r6, [r4, #4]
 80222d0:	7166      	strb	r6, [r4, #5]
  icmphdr->seqno = 0;
 80222d2:	71a6      	strb	r6, [r4, #6]
 80222d4:	71e6      	strb	r6, [r4, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80222d6:	6818      	ldr	r0, [r3, #0]
 80222d8:	6859      	ldr	r1, [r3, #4]
 80222da:	689a      	ldr	r2, [r3, #8]
 80222dc:	68df      	ldr	r7, [r3, #12]
 80222de:	60a0      	str	r0, [r4, #8]
 80222e0:	6167      	str	r7, [r4, #20]
 80222e2:	60e1      	str	r1, [r4, #12]
 80222e4:	6122      	str	r2, [r4, #16]
 80222e6:	6918      	ldr	r0, [r3, #16]
 80222e8:	6959      	ldr	r1, [r3, #20]
 80222ea:	699a      	ldr	r2, [r3, #24]
 80222ec:	61a0      	str	r0, [r4, #24]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80222ee:	a805      	add	r0, sp, #20
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80222f0:	61e1      	str	r1, [r4, #28]
 80222f2:	6222      	str	r2, [r4, #32]
  ip4_addr_copy(iphdr_src, iphdr->src);
 80222f4:	68db      	ldr	r3, [r3, #12]
 80222f6:	9305      	str	r3, [sp, #20]
  netif = ip4_route(&iphdr_src);
 80222f8:	f000 f8e6 	bl	80224c8 <ip4_route>
#endif
  if (netif != NULL) {
 80222fc:	4607      	mov	r7, r0
 80222fe:	b180      	cbz	r0, 8022322 <icmp_send_response+0x7e>
    /* calculate checksum */
    icmphdr->chksum = 0;
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022300:	8969      	ldrh	r1, [r5, #10]
 8022302:	4620      	mov	r0, r4
    icmphdr->chksum = 0;
 8022304:	70a6      	strb	r6, [r4, #2]
 8022306:	70e6      	strb	r6, [r4, #3]
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8022308:	f7f7 fa4e 	bl	80197a8 <inet_chksum>
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 802230c:	2301      	movs	r3, #1
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 802230e:	8060      	strh	r0, [r4, #2]
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8022310:	aa05      	add	r2, sp, #20
 8022312:	4631      	mov	r1, r6
 8022314:	4628      	mov	r0, r5
 8022316:	9600      	str	r6, [sp, #0]
 8022318:	e9cd 3701 	strd	r3, r7, [sp, #4]
 802231c:	23ff      	movs	r3, #255	; 0xff
 802231e:	f000 fa9d 	bl	802285c <ip4_output_if>
  }
  pbuf_free(q);
 8022322:	4628      	mov	r0, r5
 8022324:	f7f8 fcd4 	bl	801acd0 <pbuf_free>
}
 8022328:	b007      	add	sp, #28
 802232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 802232c:	4b03      	ldr	r3, [pc, #12]	; (802233c <icmp_send_response+0x98>)
 802232e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8022332:	4903      	ldr	r1, [pc, #12]	; (8022340 <icmp_send_response+0x9c>)
 8022334:	4803      	ldr	r0, [pc, #12]	; (8022344 <icmp_send_response+0xa0>)
 8022336:	f002 fd8d 	bl	8024e54 <iprintf>
 802233a:	e7c3      	b.n	80222c4 <icmp_send_response+0x20>
 802233c:	080451a0 	.word	0x080451a0
 8022340:	080451d8 	.word	0x080451d8
 8022344:	08029a64 	.word	0x08029a64

08022348 <icmp_input>:
{
 8022348:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  iphdr_in = ip4_current_header();
 802234c:	4f54      	ldr	r7, [pc, #336]	; (80224a0 <icmp_input+0x158>)
{
 802234e:	b086      	sub	sp, #24
 8022350:	4605      	mov	r5, r0
  iphdr_in = ip4_current_header();
 8022352:	f8d7 8008 	ldr.w	r8, [r7, #8]
  hlen = IPH_HL_BYTES(iphdr_in);
 8022356:	f898 4000 	ldrb.w	r4, [r8]
 802235a:	f004 040f 	and.w	r4, r4, #15
 802235e:	00a4      	lsls	r4, r4, #2
  if (hlen < IP_HLEN) {
 8022360:	2c13      	cmp	r4, #19
 8022362:	d913      	bls.n	802238c <icmp_input+0x44>
  if (p->len < sizeof(u16_t) * 2) {
 8022364:	8943      	ldrh	r3, [r0, #10]
 8022366:	2b03      	cmp	r3, #3
 8022368:	d910      	bls.n	802238c <icmp_input+0x44>
  type = *((u8_t *)p->payload);
 802236a:	6843      	ldr	r3, [r0, #4]
  switch (type) {
 802236c:	781b      	ldrb	r3, [r3, #0]
 802236e:	2b08      	cmp	r3, #8
 8022370:	d10c      	bne.n	802238c <icmp_input+0x44>
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022372:	6978      	ldr	r0, [r7, #20]
 8022374:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
 8022378:	2be0      	cmp	r3, #224	; 0xe0
 802237a:	d007      	beq.n	802238c <icmp_input+0x44>
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802237c:	460e      	mov	r6, r1
 802237e:	6839      	ldr	r1, [r7, #0]
 8022380:	f000 fa7e 	bl	8022880 <ip4_addr_isbroadcast_u32>
 8022384:	b910      	cbnz	r0, 802238c <icmp_input+0x44>
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8022386:	892b      	ldrh	r3, [r5, #8]
 8022388:	2b07      	cmp	r3, #7
 802238a:	d805      	bhi.n	8022398 <icmp_input+0x50>
  pbuf_free(p);
 802238c:	4628      	mov	r0, r5
}
 802238e:	b006      	add	sp, #24
 8022390:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  pbuf_free(p);
 8022394:	f7f8 bc9c 	b.w	801acd0 <pbuf_free>
        if (inet_chksum_pbuf(p) != 0) {
 8022398:	4628      	mov	r0, r5
 802239a:	f7f7 fa0b 	bl	80197b4 <inet_chksum_pbuf>
 802239e:	2800      	cmp	r0, #0
 80223a0:	d1f4      	bne.n	802238c <icmp_input+0x44>
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80223a2:	f104 010e 	add.w	r1, r4, #14
 80223a6:	4628      	mov	r0, r5
  hlen = IPH_HL_BYTES(iphdr_in);
 80223a8:	fa1f f984 	uxth.w	r9, r4
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80223ac:	9105      	str	r1, [sp, #20]
 80223ae:	f7f8 fbcf 	bl	801ab50 <pbuf_add_header>
 80223b2:	9905      	ldr	r1, [sp, #20]
 80223b4:	2800      	cmp	r0, #0
 80223b6:	d058      	beq.n	802246a <icmp_input+0x122>
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80223b8:	892b      	ldrh	r3, [r5, #8]
 80223ba:	eb03 0109 	add.w	r1, r3, r9
 80223be:	b289      	uxth	r1, r1
        if (alloc_len < p->tot_len) {
 80223c0:	428b      	cmp	r3, r1
 80223c2:	d8e3      	bhi.n	802238c <icmp_input+0x44>
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80223c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80223c8:	200e      	movs	r0, #14
 80223ca:	f7f8 faaf 	bl	801a92c <pbuf_alloc>
        if (r == NULL) {
 80223ce:	4682      	mov	sl, r0
 80223d0:	2800      	cmp	r0, #0
 80223d2:	d0db      	beq.n	802238c <icmp_input+0x44>
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80223d4:	8942      	ldrh	r2, [r0, #10]
 80223d6:	f104 0308 	add.w	r3, r4, #8
 80223da:	429a      	cmp	r2, r3
 80223dc:	d351      	bcc.n	8022482 <icmp_input+0x13a>
        MEMCPY(r->payload, iphdr_in, hlen);
 80223de:	4641      	mov	r1, r8
 80223e0:	4622      	mov	r2, r4
 80223e2:	6840      	ldr	r0, [r0, #4]
 80223e4:	f001 fd70 	bl	8023ec8 <memcpy>
        if (pbuf_remove_header(r, hlen)) {
 80223e8:	4621      	mov	r1, r4
 80223ea:	4650      	mov	r0, sl
 80223ec:	f7f8 fbe4 	bl	801abb8 <pbuf_remove_header>
 80223f0:	2800      	cmp	r0, #0
 80223f2:	d14a      	bne.n	802248a <icmp_input+0x142>
        if (pbuf_copy(r, p) != ERR_OK) {
 80223f4:	4629      	mov	r1, r5
 80223f6:	4650      	mov	r0, sl
 80223f8:	f7f8 fcf2 	bl	801ade0 <pbuf_copy>
 80223fc:	2800      	cmp	r0, #0
 80223fe:	d140      	bne.n	8022482 <icmp_input+0x13a>
        pbuf_free(p);
 8022400:	4628      	mov	r0, r5
 8022402:	4655      	mov	r5, sl
 8022404:	f7f8 fc64 	bl	801acd0 <pbuf_free>
      if (pbuf_add_header(p, hlen)) {
 8022408:	4621      	mov	r1, r4
 802240a:	4628      	mov	r0, r5
      iecho = (struct icmp_echo_hdr *)p->payload;
 802240c:	f8d5 8004 	ldr.w	r8, [r5, #4]
      if (pbuf_add_header(p, hlen)) {
 8022410:	f7f8 fb9e 	bl	801ab50 <pbuf_add_header>
 8022414:	2800      	cmp	r0, #0
 8022416:	d1b9      	bne.n	802238c <icmp_input+0x44>
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8022418:	686c      	ldr	r4, [r5, #4]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802241a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
        ip4_addr_copy(iphdr->src, *src);
 802241e:	697b      	ldr	r3, [r7, #20]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022420:	4649      	mov	r1, r9
        ip4_addr_copy(iphdr->src, *src);
 8022422:	60e3      	str	r3, [r4, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022424:	693b      	ldr	r3, [r7, #16]
        IPH_CHKSUM_SET(iphdr, 0);
 8022426:	2700      	movs	r7, #0
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8022428:	6123      	str	r3, [r4, #16]
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 802242a:	f8b8 3002 	ldrh.w	r3, [r8, #2]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802242e:	f888 0000 	strb.w	r0, [r8]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022432:	4620      	mov	r0, r4
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8022434:	4293      	cmp	r3, r2
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8022436:	bf8c      	ite	hi
 8022438:	3309      	addhi	r3, #9
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 802243a:	3308      	addls	r3, #8
 802243c:	b29b      	uxth	r3, r3
 802243e:	f8a8 3002 	strh.w	r3, [r8, #2]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022442:	f04f 08ff 	mov.w	r8, #255	; 0xff
        IPH_CHKSUM_SET(iphdr, 0);
 8022446:	72a7      	strb	r7, [r4, #10]
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8022448:	f884 8008 	strb.w	r8, [r4, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 802244c:	72e7      	strb	r7, [r4, #11]
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 802244e:	f7f7 f9ab 	bl	80197a8 <inet_chksum>
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022452:	2201      	movs	r2, #1
          IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, hlen));
 8022454:	8160      	strh	r0, [r4, #10]
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8022456:	4643      	mov	r3, r8
 8022458:	4912      	ldr	r1, [pc, #72]	; (80224a4 <icmp_input+0x15c>)
 802245a:	4628      	mov	r0, r5
 802245c:	9700      	str	r7, [sp, #0]
 802245e:	e9cd 2601 	strd	r2, r6, [sp, #4]
 8022462:	463a      	mov	r2, r7
 8022464:	f000 f9fa 	bl	802285c <ip4_output_if>
  pbuf_free(p);
 8022468:	e790      	b.n	802238c <icmp_input+0x44>
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802246a:	4628      	mov	r0, r5
 802246c:	f7f8 fba4 	bl	801abb8 <pbuf_remove_header>
 8022470:	2800      	cmp	r0, #0
 8022472:	d0c9      	beq.n	8022408 <icmp_input+0xc0>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8022474:	4b0c      	ldr	r3, [pc, #48]	; (80224a8 <icmp_input+0x160>)
 8022476:	22c7      	movs	r2, #199	; 0xc7
 8022478:	490c      	ldr	r1, [pc, #48]	; (80224ac <icmp_input+0x164>)
 802247a:	480d      	ldr	r0, [pc, #52]	; (80224b0 <icmp_input+0x168>)
 802247c:	f002 fcea 	bl	8024e54 <iprintf>
          goto icmperr;
 8022480:	e784      	b.n	802238c <icmp_input+0x44>
          pbuf_free(r);
 8022482:	4650      	mov	r0, sl
 8022484:	f7f8 fc24 	bl	801acd0 <pbuf_free>
          goto icmperr;
 8022488:	e780      	b.n	802238c <icmp_input+0x44>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 802248a:	4b07      	ldr	r3, [pc, #28]	; (80224a8 <icmp_input+0x160>)
 802248c:	22b6      	movs	r2, #182	; 0xb6
 802248e:	4909      	ldr	r1, [pc, #36]	; (80224b4 <icmp_input+0x16c>)
 8022490:	4807      	ldr	r0, [pc, #28]	; (80224b0 <icmp_input+0x168>)
 8022492:	f002 fcdf 	bl	8024e54 <iprintf>
          pbuf_free(r);
 8022496:	4650      	mov	r0, sl
 8022498:	f7f8 fc1a 	bl	801acd0 <pbuf_free>
          goto icmperr;
 802249c:	e776      	b.n	802238c <icmp_input+0x44>
 802249e:	bf00      	nop
 80224a0:	2001f1f0 	.word	0x2001f1f0
 80224a4:	2001f204 	.word	0x2001f204
 80224a8:	080451a0 	.word	0x080451a0
 80224ac:	0804523c 	.word	0x0804523c
 80224b0:	08029a64 	.word	0x08029a64
 80224b4:	08045204 	.word	0x08045204

080224b8 <icmp_dest_unreach>:
{
 80224b8:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_DUR, t);
 80224ba:	2103      	movs	r1, #3
 80224bc:	f7ff bef2 	b.w	80222a4 <icmp_send_response>

080224c0 <icmp_time_exceeded>:
{
 80224c0:	460a      	mov	r2, r1
  icmp_send_response(p, ICMP_TE, t);
 80224c2:	210b      	movs	r1, #11
 80224c4:	f7ff beee 	b.w	80222a4 <icmp_send_response>

080224c8 <ip4_route>:

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80224c8:	4b19      	ldr	r3, [pc, #100]	; (8022530 <ip4_route+0x68>)
{
 80224ca:	b430      	push	{r4, r5}
  NETIF_FOREACH(netif) {
 80224cc:	681b      	ldr	r3, [r3, #0]
 80224ce:	b1ab      	cbz	r3, 80224fc <ip4_route+0x34>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80224d0:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80224d4:	07d4      	lsls	r4, r2, #31
 80224d6:	d5f9      	bpl.n	80224cc <ip4_route+0x4>
 80224d8:	0751      	lsls	r1, r2, #29
 80224da:	d5f7      	bpl.n	80224cc <ip4_route+0x4>
 80224dc:	6859      	ldr	r1, [r3, #4]
 80224de:	2900      	cmp	r1, #0
 80224e0:	d0f4      	beq.n	80224cc <ip4_route+0x4>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80224e2:	6804      	ldr	r4, [r0, #0]
 80224e4:	689d      	ldr	r5, [r3, #8]
 80224e6:	4061      	eors	r1, r4
 80224e8:	4229      	tst	r1, r5
 80224ea:	d004      	beq.n	80224f6 <ip4_route+0x2e>
        /* return netif on which to forward IP packet */
        return netif;
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80224ec:	0792      	lsls	r2, r2, #30
 80224ee:	d4ed      	bmi.n	80224cc <ip4_route+0x4>
 80224f0:	68da      	ldr	r2, [r3, #12]
 80224f2:	4294      	cmp	r4, r2
 80224f4:	d1ea      	bne.n	80224cc <ip4_route+0x4>
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
  }

  return netif_default;
}
 80224f6:	4618      	mov	r0, r3
 80224f8:	bc30      	pop	{r4, r5}
 80224fa:	4770      	bx	lr
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80224fc:	4b0d      	ldr	r3, [pc, #52]	; (8022534 <ip4_route+0x6c>)
 80224fe:	681b      	ldr	r3, [r3, #0]
 8022500:	2b00      	cmp	r3, #0
 8022502:	d0f8      	beq.n	80224f6 <ip4_route+0x2e>
 8022504:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8022508:	f002 0205 	and.w	r2, r2, #5
 802250c:	2a05      	cmp	r2, #5
 802250e:	d108      	bne.n	8022522 <ip4_route+0x5a>
 8022510:	685a      	ldr	r2, [r3, #4]
 8022512:	b152      	cbz	r2, 802252a <ip4_route+0x62>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8022514:	7802      	ldrb	r2, [r0, #0]
    return NULL;
 8022516:	2a7f      	cmp	r2, #127	; 0x7f
 8022518:	bf08      	it	eq
 802251a:	2300      	moveq	r3, #0
}
 802251c:	bc30      	pop	{r4, r5}
 802251e:	4618      	mov	r0, r3
 8022520:	4770      	bx	lr
    return NULL;
 8022522:	2300      	movs	r3, #0
}
 8022524:	bc30      	pop	{r4, r5}
 8022526:	4618      	mov	r0, r3
 8022528:	4770      	bx	lr
    return NULL;
 802252a:	4613      	mov	r3, r2
 802252c:	e7e3      	b.n	80224f6 <ip4_route+0x2e>
 802252e:	bf00      	nop
 8022530:	2002e380 	.word	0x2002e380
 8022534:	2002e37c 	.word	0x2002e37c

08022538 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8022538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 802253c:	6847      	ldr	r7, [r0, #4]
{
 802253e:	4604      	mov	r4, r0
  if (IPH_V(iphdr) != 4) {
 8022540:	783b      	ldrb	r3, [r7, #0]
 8022542:	091a      	lsrs	r2, r3, #4
 8022544:	2a04      	cmp	r2, #4
 8022546:	f040 80a8 	bne.w	802269a <ip4_input+0x162>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802254a:	f003 030f 	and.w	r3, r3, #15
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802254e:	8878      	ldrh	r0, [r7, #2]
 8022550:	460e      	mov	r6, r1
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8022552:	ea4f 0983 	mov.w	r9, r3, lsl #2
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8022556:	f7f6 fb7f 	bl	8018c58 <lwip_htons>

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802255a:	8923      	ldrh	r3, [r4, #8]
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 802255c:	464d      	mov	r5, r9
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 802255e:	4680      	mov	r8, r0
  if (iphdr_len < p->tot_len) {
 8022560:	4283      	cmp	r3, r0
 8022562:	f200 80a0 	bhi.w	80226a6 <ip4_input+0x16e>
    pbuf_realloc(p, iphdr_len);
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8022566:	8963      	ldrh	r3, [r4, #10]
 8022568:	42ab      	cmp	r3, r5
 802256a:	f0c0 8096 	bcc.w	802269a <ip4_input+0x162>
 802256e:	8923      	ldrh	r3, [r4, #8]
 8022570:	4543      	cmp	r3, r8
 8022572:	f0c0 8092 	bcc.w	802269a <ip4_input+0x162>
 8022576:	2d13      	cmp	r5, #19
 8022578:	f240 808f 	bls.w	802269a <ip4_input+0x162>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 802257c:	693b      	ldr	r3, [r7, #16]
 802257e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8022720 <ip4_input+0x1e8>
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022582:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8022586:	f8c8 3014 	str.w	r3, [r8, #20]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802258a:	2ae0      	cmp	r2, #224	; 0xe0
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802258c:	68f8      	ldr	r0, [r7, #12]
 802258e:	f8c8 0010 	str.w	r0, [r8, #16]
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022592:	d073      	beq.n	802267c <ip4_input+0x144>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8022594:	f896 2035 	ldrb.w	r2, [r6, #53]	; 0x35
 8022598:	07d2      	lsls	r2, r2, #31
 802259a:	d503      	bpl.n	80225a4 <ip4_input+0x6c>
 802259c:	6872      	ldr	r2, [r6, #4]
 802259e:	2a00      	cmp	r2, #0
 80225a0:	f040 8094 	bne.w	80226cc <ip4_input+0x194>
      netif = NULL;
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80225a4:	b2db      	uxtb	r3, r3
 80225a6:	2b7f      	cmp	r3, #127	; 0x7f
 80225a8:	d06c      	beq.n	8022684 <ip4_input+0x14c>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80225aa:	4b5c      	ldr	r3, [pc, #368]	; (802271c <ip4_input+0x1e4>)
 80225ac:	681d      	ldr	r5, [r3, #0]
 80225ae:	b935      	cbnz	r5, 80225be <ip4_input+0x86>
 80225b0:	e068      	b.n	8022684 <ip4_input+0x14c>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80225b2:	f000 f965 	bl	8022880 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80225b6:	b980      	cbnz	r0, 80225da <ip4_input+0xa2>
        NETIF_FOREACH(netif) {
 80225b8:	682d      	ldr	r5, [r5, #0]
 80225ba:	2d00      	cmp	r5, #0
 80225bc:	d062      	beq.n	8022684 <ip4_input+0x14c>
          if (netif == inp) {
 80225be:	42ae      	cmp	r6, r5
 80225c0:	d0fa      	beq.n	80225b8 <ip4_input+0x80>
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80225c2:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 80225c6:	07db      	lsls	r3, r3, #31
 80225c8:	d5f6      	bpl.n	80225b8 <ip4_input+0x80>
 80225ca:	686b      	ldr	r3, [r5, #4]
 80225cc:	2b00      	cmp	r3, #0
 80225ce:	d0f3      	beq.n	80225b8 <ip4_input+0x80>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80225d0:	f8d8 0014 	ldr.w	r0, [r8, #20]
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80225d4:	4629      	mov	r1, r5
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80225d6:	4283      	cmp	r3, r0
 80225d8:	d1eb      	bne.n	80225b2 <ip4_input+0x7a>
  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 80225da:	f8d8 0010 	ldr.w	r0, [r8, #16]
 80225de:	2800      	cmp	r0, #0
 80225e0:	d157      	bne.n	8022692 <ip4_input+0x15a>
    }
    pbuf_free(p);
    return ERR_OK;
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80225e2:	88fb      	ldrh	r3, [r7, #6]
 80225e4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80225e8:	b133      	cbz	r3, 80225f8 <ip4_input+0xc0>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80225ea:	4620      	mov	r0, r4
 80225ec:	f000 fb1c 	bl	8022c28 <ip4_reass>
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80225f0:	4604      	mov	r4, r0
 80225f2:	2800      	cmp	r0, #0
 80225f4:	d054      	beq.n	80226a0 <ip4_input+0x168>
      return ERR_OK;
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80225f6:	6847      	ldr	r7, [r0, #4]
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
  ip_data.current_input_netif = inp;
  ip_data.current_ip4_header = iphdr;
 80225f8:	f8c8 7008 	str.w	r7, [r8, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);

#if LWIP_RAW
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
 80225fc:	4631      	mov	r1, r6
 80225fe:	4620      	mov	r0, r4
  ip_data.current_input_netif = inp;
 8022600:	e9c8 5600 	strd	r5, r6, [r8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8022604:	783b      	ldrb	r3, [r7, #0]
 8022606:	f003 030f 	and.w	r3, r3, #15
 802260a:	009b      	lsls	r3, r3, #2
 802260c:	f8a8 300c 	strh.w	r3, [r8, #12]
  raw_status = raw_input(p, inp);
 8022610:	f7f8 fd9e 	bl	801b150 <raw_input>
  if (raw_status != RAW_INPUT_EATEN)
 8022614:	2801      	cmp	r0, #1
  raw_status = raw_input(p, inp);
 8022616:	4682      	mov	sl, r0
  if (raw_status != RAW_INPUT_EATEN)
 8022618:	d024      	beq.n	8022664 <ip4_input+0x12c>
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 802261a:	4649      	mov	r1, r9
 802261c:	4620      	mov	r0, r4
 802261e:	f7f8 facb 	bl	801abb8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8022622:	7a7b      	ldrb	r3, [r7, #9]
 8022624:	2b06      	cmp	r3, #6
 8022626:	d065      	beq.n	80226f4 <ip4_input+0x1bc>
 8022628:	2b11      	cmp	r3, #17
 802262a:	d05e      	beq.n	80226ea <ip4_input+0x1b2>
 802262c:	2b01      	cmp	r3, #1
 802262e:	d057      	beq.n	80226e0 <ip4_input+0x1a8>
        igmp_input(p, inp, ip4_current_dest_addr());
        break;
#endif /* LWIP_IGMP */
      default:
#if LWIP_RAW
        if (raw_status == RAW_INPUT_DELIVERED) {
 8022630:	f1ba 0f02 	cmp.w	sl, #2
 8022634:	d013      	beq.n	802265e <ip4_input+0x126>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8022636:	4629      	mov	r1, r5
 8022638:	f8d8 0014 	ldr.w	r0, [r8, #20]
 802263c:	f000 f920 	bl	8022880 <ip4_addr_isbroadcast_u32>
 8022640:	b968      	cbnz	r0, 802265e <ip4_input+0x126>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8022642:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8022646:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802264a:	2be0      	cmp	r3, #224	; 0xe0
 802264c:	d007      	beq.n	802265e <ip4_input+0x126>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 802264e:	4649      	mov	r1, r9
 8022650:	4620      	mov	r0, r4
 8022652:	f7f8 fae9 	bl	801ac28 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8022656:	2102      	movs	r1, #2
 8022658:	4620      	mov	r0, r4
 802265a:	f7ff ff2d 	bl	80224b8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 802265e:	4620      	mov	r0, r4
 8022660:	f7f8 fb36 	bl	801acd0 <pbuf_free>
        break;
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8022664:	2300      	movs	r3, #0
  ip_data.current_ip_header_tot_len = 0;
  ip4_addr_set_any(ip4_current_src_addr());
  ip4_addr_set_any(ip4_current_dest_addr());

  return ERR_OK;
}
 8022666:	2000      	movs	r0, #0
  ip_data.current_input_netif = NULL;
 8022668:	e9c8 3300 	strd	r3, r3, [r8]
  ip_data.current_ip4_header = NULL;
 802266c:	f8c8 3008 	str.w	r3, [r8, #8]
  ip_data.current_ip_header_tot_len = 0;
 8022670:	f8a8 300c 	strh.w	r3, [r8, #12]
  ip4_addr_set_any(ip4_current_dest_addr());
 8022674:	e9c8 3304 	strd	r3, r3, [r8, #16]
}
 8022678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802267c:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8022680:	07d9      	lsls	r1, r3, #31
 8022682:	d41e      	bmi.n	80226c2 <ip4_input+0x18a>
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8022684:	7a7b      	ldrb	r3, [r7, #9]
 8022686:	2b11      	cmp	r3, #17
 8022688:	d039      	beq.n	80226fe <ip4_input+0x1c6>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 802268a:	f8d8 0010 	ldr.w	r0, [r8, #16]
 802268e:	b120      	cbz	r0, 802269a <ip4_input+0x162>
 8022690:	2500      	movs	r5, #0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8022692:	4631      	mov	r1, r6
 8022694:	f000 f8f4 	bl	8022880 <ip4_addr_isbroadcast_u32>
 8022698:	b150      	cbz	r0, 80226b0 <ip4_input+0x178>
    pbuf_free(p);
 802269a:	4620      	mov	r0, r4
 802269c:	f7f8 fb18 	bl	801acd0 <pbuf_free>
}
 80226a0:	2000      	movs	r0, #0
 80226a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pbuf_realloc(p, iphdr_len);
 80226a6:	4601      	mov	r1, r0
 80226a8:	4620      	mov	r0, r4
 80226aa:	f7f8 f9f9 	bl	801aaa0 <pbuf_realloc>
 80226ae:	e75a      	b.n	8022566 <ip4_input+0x2e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80226b0:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80226b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80226b8:	2be0      	cmp	r3, #224	; 0xe0
 80226ba:	d0ee      	beq.n	802269a <ip4_input+0x162>
  if (netif == NULL) {
 80226bc:	2d00      	cmp	r5, #0
 80226be:	d190      	bne.n	80225e2 <ip4_input+0xaa>
 80226c0:	e7eb      	b.n	802269a <ip4_input+0x162>
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80226c2:	6873      	ldr	r3, [r6, #4]
 80226c4:	2b00      	cmp	r3, #0
 80226c6:	d0dd      	beq.n	8022684 <ip4_input+0x14c>
 80226c8:	4635      	mov	r5, r6
 80226ca:	e788      	b.n	80225de <ip4_input+0xa6>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80226cc:	4293      	cmp	r3, r2
 80226ce:	d0fb      	beq.n	80226c8 <ip4_input+0x190>
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80226d0:	4618      	mov	r0, r3
 80226d2:	4631      	mov	r1, r6
 80226d4:	f000 f8d4 	bl	8022880 <ip4_addr_isbroadcast_u32>
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80226d8:	b9e0      	cbnz	r0, 8022714 <ip4_input+0x1dc>
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80226da:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80226de:	e761      	b.n	80225a4 <ip4_input+0x6c>
        icmp_input(p, inp);
 80226e0:	4631      	mov	r1, r6
 80226e2:	4620      	mov	r0, r4
 80226e4:	f7ff fe30 	bl	8022348 <icmp_input>
        break;
 80226e8:	e7bc      	b.n	8022664 <ip4_input+0x12c>
        udp_input(p, inp);
 80226ea:	4631      	mov	r1, r6
 80226ec:	4620      	mov	r0, r4
 80226ee:	f7fd f8a1 	bl	801f834 <udp_input>
        break;
 80226f2:	e7b7      	b.n	8022664 <ip4_input+0x12c>
        tcp_input(p, inp);
 80226f4:	4631      	mov	r1, r6
 80226f6:	4620      	mov	r0, r4
 80226f8:	f7fa fefc 	bl	801d4f4 <tcp_input>
        break;
 80226fc:	e7b2      	b.n	8022664 <ip4_input+0x12c>
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80226fe:	eb07 0309 	add.w	r3, r7, r9
 8022702:	885b      	ldrh	r3, [r3, #2]
 8022704:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8022708:	d1bf      	bne.n	802268a <ip4_input+0x152>
 802270a:	4635      	mov	r5, r6
  if (netif == NULL) {
 802270c:	2d00      	cmp	r5, #0
 802270e:	f47f af68 	bne.w	80225e2 <ip4_input+0xaa>
 8022712:	e7c2      	b.n	802269a <ip4_input+0x162>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8022714:	f8d8 0010 	ldr.w	r0, [r8, #16]
 8022718:	4635      	mov	r5, r6
 802271a:	e760      	b.n	80225de <ip4_input+0xa6>
 802271c:	2002e380 	.word	0x2002e380
 8022720:	2001f1f0 	.word	0x2001f1f0

08022724 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8022724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022728:	469a      	mov	sl, r3
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802272a:	7b83      	ldrb	r3, [r0, #14]
{
 802272c:	b083      	sub	sp, #12
 802272e:	4604      	mov	r4, r0
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022730:	2b01      	cmp	r3, #1
{
 8022732:	4689      	mov	r9, r1
 8022734:	4617      	mov	r7, r2
 8022736:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 802273a:	f89d b034 	ldrb.w	fp, [sp, #52]	; 0x34
 802273e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8022742:	d158      	bne.n	80227f6 <ip4_output_if_src+0xd2>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8022744:	2f00      	cmp	r7, #0
 8022746:	d05f      	beq.n	8022808 <ip4_output_if_src+0xe4>
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8022748:	2114      	movs	r1, #20
 802274a:	4620      	mov	r0, r4
 802274c:	f7f8 fa00 	bl	801ab50 <pbuf_add_header>
 8022750:	2800      	cmp	r0, #0
 8022752:	d174      	bne.n	802283e <ip4_output_if_src+0x11a>
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
    }

    iphdr = (struct ip_hdr *)p->payload;
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022754:	8963      	ldrh	r3, [r4, #10]
    iphdr = (struct ip_hdr *)p->payload;
 8022756:	6866      	ldr	r6, [r4, #4]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022758:	2b13      	cmp	r3, #19
 802275a:	d95d      	bls.n	8022818 <ip4_output_if_src+0xf4>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 802275c:	f886 a008 	strb.w	sl, [r6, #8]
    IPH_PROTO_SET(iphdr, proto);
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 8022760:	ea4b 2a0a 	orr.w	sl, fp, sl, lsl #8
    IPH_PROTO_SET(iphdr, proto);
 8022764:	f886 b009 	strb.w	fp, [r6, #9]
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8022768:	683b      	ldr	r3, [r7, #0]
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
    IPH_TOS_SET(iphdr, tos);
 802276a:	7075      	strb	r5, [r6, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 802276c:	022d      	lsls	r5, r5, #8
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
 802276e:	0c18      	lsrs	r0, r3, #16
    ip4_addr_copy(iphdr->dest, *dest);
 8022770:	6133      	str	r3, [r6, #16]
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022772:	f045 0545 	orr.w	r5, r5, #69	; 0x45
 8022776:	fa10 f383 	uxtah	r3, r0, r3
 802277a:	442b      	add	r3, r5
    chk_sum += PP_NTOHS(proto | (ttl << 8));
 802277c:	ea4f 252a 	mov.w	r5, sl, asr #8
 8022780:	ea45 2a0a 	orr.w	sl, r5, sl, lsl #8
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
 8022784:	fa13 f58a 	uxtah	r5, r3, sl
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8022788:	2345      	movs	r3, #69	; 0x45
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 802278a:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 8022858 <ip4_output_if_src+0x134>
    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 802278e:	7033      	strb	r3, [r6, #0]
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8022790:	8920      	ldrh	r0, [r4, #8]
 8022792:	f7f6 fa61 	bl	8018c58 <lwip_htons>
    IPH_OFFSET_SET(iphdr, 0);
 8022796:	2300      	movs	r3, #0
    chk_sum += iphdr->_len;
 8022798:	4405      	add	r5, r0
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 802279a:	8070      	strh	r0, [r6, #2]
    IPH_OFFSET_SET(iphdr, 0);
 802279c:	71b3      	strb	r3, [r6, #6]
 802279e:	71f3      	strb	r3, [r6, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80227a0:	f8ba 0000 	ldrh.w	r0, [sl]
 80227a4:	f7f6 fa58 	bl	8018c58 <lwip_htons>
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80227a8:	f8ba 2000 	ldrh.w	r2, [sl]
    chk_sum += iphdr->_id;
 80227ac:	1943      	adds	r3, r0, r5
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80227ae:	80b0      	strh	r0, [r6, #4]
    ++ip_id;
 80227b0:	3201      	adds	r2, #1
 80227b2:	f8aa 2000 	strh.w	r2, [sl]

    if (src == NULL) {
 80227b6:	f1b9 0f00 	cmp.w	r9, #0
 80227ba:	d035      	beq.n	8022828 <ip4_output_if_src+0x104>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80227bc:	f8d9 2000 	ldr.w	r2, [r9]
    }

#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->src) & 0xFFFF;
 80227c0:	fa13 f382 	uxtah	r3, r3, r2
 80227c4:	60f2      	str	r2, [r6, #12]
    chk_sum += ip4_addr_get_u32(&iphdr->src) >> 16;
 80227c6:	eb03 4312 	add.w	r3, r3, r2, lsr #16
    chk_sum = (chk_sum >> 16) + (chk_sum & 0xFFFF);
 80227ca:	b29a      	uxth	r2, r3
 80227cc:	eb02 4313 	add.w	r3, r2, r3, lsr #16
    chk_sum = (chk_sum >> 16) + chk_sum;
 80227d0:	eb03 4313 	add.w	r3, r3, r3, lsr #16
    chk_sum = ~chk_sum;
 80227d4:	43db      	mvns	r3, r3
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      iphdr->_chksum = (u16_t)chk_sum; /* network order */
 80227d6:	8173      	strh	r3, [r6, #10]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80227d8:	f8b8 302c 	ldrh.w	r3, [r8, #44]	; 0x2c
 80227dc:	b113      	cbz	r3, 80227e4 <ip4_output_if_src+0xc0>
 80227de:	8922      	ldrh	r2, [r4, #8]
 80227e0:	429a      	cmp	r2, r3
 80227e2:	d824      	bhi.n	802282e <ip4_output_if_src+0x10a>
    return ip4_frag(p, netif, dest);
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80227e4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 80227e8:	463a      	mov	r2, r7
 80227ea:	4621      	mov	r1, r4
 80227ec:	4640      	mov	r0, r8
 80227ee:	4798      	blx	r3
}
 80227f0:	b003      	add	sp, #12
 80227f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80227f6:	4b13      	ldr	r3, [pc, #76]	; (8022844 <ip4_output_if_src+0x120>)
 80227f8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80227fc:	4912      	ldr	r1, [pc, #72]	; (8022848 <ip4_output_if_src+0x124>)
 80227fe:	4813      	ldr	r0, [pc, #76]	; (802284c <ip4_output_if_src+0x128>)
 8022800:	f002 fb28 	bl	8024e54 <iprintf>
  if (dest != LWIP_IP_HDRINCL) {
 8022804:	2f00      	cmp	r7, #0
 8022806:	d19f      	bne.n	8022748 <ip4_output_if_src+0x24>
    if (p->len < IP_HLEN) {
 8022808:	8963      	ldrh	r3, [r4, #10]
 802280a:	2b13      	cmp	r3, #19
 802280c:	d917      	bls.n	802283e <ip4_output_if_src+0x11a>
    ip4_addr_copy(dest_addr, iphdr->dest);
 802280e:	6863      	ldr	r3, [r4, #4]
    dest = &dest_addr;
 8022810:	af01      	add	r7, sp, #4
    ip4_addr_copy(dest_addr, iphdr->dest);
 8022812:	691b      	ldr	r3, [r3, #16]
 8022814:	9301      	str	r3, [sp, #4]
    dest = &dest_addr;
 8022816:	e7df      	b.n	80227d8 <ip4_output_if_src+0xb4>
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8022818:	4b0a      	ldr	r3, [pc, #40]	; (8022844 <ip4_output_if_src+0x120>)
 802281a:	f44f 7262 	mov.w	r2, #904	; 0x388
 802281e:	490c      	ldr	r1, [pc, #48]	; (8022850 <ip4_output_if_src+0x12c>)
 8022820:	480a      	ldr	r0, [pc, #40]	; (802284c <ip4_output_if_src+0x128>)
 8022822:	f002 fb17 	bl	8024e54 <iprintf>
 8022826:	e799      	b.n	802275c <ip4_output_if_src+0x38>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8022828:	4a0a      	ldr	r2, [pc, #40]	; (8022854 <ip4_output_if_src+0x130>)
 802282a:	6812      	ldr	r2, [r2, #0]
 802282c:	e7c8      	b.n	80227c0 <ip4_output_if_src+0x9c>
    return ip4_frag(p, netif, dest);
 802282e:	463a      	mov	r2, r7
 8022830:	4641      	mov	r1, r8
 8022832:	4620      	mov	r0, r4
 8022834:	f000 fc36 	bl	80230a4 <ip4_frag>
}
 8022838:	b003      	add	sp, #12
 802283a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      return ERR_BUF;
 802283e:	f06f 0001 	mvn.w	r0, #1
 8022842:	e7d5      	b.n	80227f0 <ip4_output_if_src+0xcc>
 8022844:	08045270 	.word	0x08045270
 8022848:	080452a4 	.word	0x080452a4
 802284c:	08029a64 	.word	0x08029a64
 8022850:	080452b0 	.word	0x080452b0
 8022854:	08045328 	.word	0x08045328
 8022858:	2002e73a 	.word	0x2002e73a

0802285c <ip4_output_if>:
{
 802285c:	b4f0      	push	{r4, r5, r6, r7}
 802285e:	9c06      	ldr	r4, [sp, #24]
 8022860:	f89d 5010 	ldrb.w	r5, [sp, #16]
 8022864:	f89d 6014 	ldrb.w	r6, [sp, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8022868:	b11a      	cbz	r2, 8022872 <ip4_output_if+0x16>
    if (ip4_addr_isany(src)) {
 802286a:	b109      	cbz	r1, 8022870 <ip4_output_if+0x14>
 802286c:	680f      	ldr	r7, [r1, #0]
 802286e:	b907      	cbnz	r7, 8022872 <ip4_output_if+0x16>
      src_used = netif_ip4_addr(netif);
 8022870:	1d21      	adds	r1, r4, #4
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8022872:	9504      	str	r5, [sp, #16]
 8022874:	e9cd 6405 	strd	r6, r4, [sp, #20]
}
 8022878:	bcf0      	pop	{r4, r5, r6, r7}
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 802287a:	f7ff bf53 	b.w	8022724 <ip4_output_if_src>
 802287e:	bf00      	nop

08022880 <ip4_addr_isbroadcast_u32>:
{
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8022880:	1e43      	subs	r3, r0, #1
 8022882:	3303      	adds	r3, #3
 8022884:	d814      	bhi.n	80228b0 <ip4_addr_isbroadcast_u32+0x30>
      (addr == IPADDR_ANY)) {
    return 1;
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8022886:	f891 3035 	ldrb.w	r3, [r1, #53]	; 0x35
 802288a:	f013 0302 	ands.w	r3, r3, #2
 802288e:	d00d      	beq.n	80228ac <ip4_addr_isbroadcast_u32+0x2c>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8022890:	684b      	ldr	r3, [r1, #4]
 8022892:	4283      	cmp	r3, r0
 8022894:	d00f      	beq.n	80228b6 <ip4_addr_isbroadcast_u32+0x36>
    return 0;
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8022896:	688a      	ldr	r2, [r1, #8]
 8022898:	4043      	eors	r3, r0
 802289a:	4213      	tst	r3, r2
 802289c:	d10b      	bne.n	80228b6 <ip4_addr_isbroadcast_u32+0x36>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802289e:	43d3      	mvns	r3, r2
 80228a0:	ea20 0002 	bic.w	r0, r0, r2
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
    /* => network broadcast address */
    return 1;
  } else {
    return 0;
 80228a4:	1ac3      	subs	r3, r0, r3
 80228a6:	fab3 f383 	clz	r3, r3
 80228aa:	095b      	lsrs	r3, r3, #5
  }
}
 80228ac:	4618      	mov	r0, r3
 80228ae:	4770      	bx	lr
    return 1;
 80228b0:	2301      	movs	r3, #1
}
 80228b2:	4618      	mov	r0, r3
 80228b4:	4770      	bx	lr
    return 0;
 80228b6:	2300      	movs	r3, #0
}
 80228b8:	4618      	mov	r0, r3
 80228ba:	4770      	bx	lr

080228bc <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 80228bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 80228c0:	4e4f      	ldr	r6, [pc, #316]	; (8022a00 <ip4addr_aton+0x144>)
{
 80228c2:	b085      	sub	sp, #20
  c = *cp;
 80228c4:	7803      	ldrb	r3, [r0, #0]
    if (!lwip_isdigit(c)) {
 80228c6:	5cf2      	ldrb	r2, [r6, r3]
 80228c8:	0754      	lsls	r4, r2, #29
 80228ca:	d538      	bpl.n	802293e <ip4addr_aton+0x82>
  u32_t *pp = parts;
 80228cc:	46e9      	mov	r9, sp
 80228ce:	460d      	mov	r5, r1
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 80228d0:	f10d 080c 	add.w	r8, sp, #12
  u32_t *pp = parts;
 80228d4:	464f      	mov	r7, r9
    if (c == '0') {
 80228d6:	2b30      	cmp	r3, #48	; 0x30
 80228d8:	d035      	beq.n	8022946 <ip4addr_aton+0x8a>
    base = 10;
 80228da:	210a      	movs	r1, #10
 80228dc:	1c42      	adds	r2, r0, #1
 80228de:	2400      	movs	r4, #0
 80228e0:	e003      	b.n	80228ea <ip4addr_aton+0x2e>
        val = (val * base) + (u32_t)(c - '0');
 80228e2:	f1a0 0430 	sub.w	r4, r0, #48	; 0x30
        c = *++cp;
 80228e6:	7813      	ldrb	r3, [r2, #0]
 80228e8:	3201      	adds	r2, #1
      if (lwip_isdigit(c)) {
 80228ea:	f816 c003 	ldrb.w	ip, [r6, r3]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80228ee:	f103 0e0a 	add.w	lr, r3, #10
 80228f2:	f102 3bff 	add.w	fp, r2, #4294967295
        val = (val * base) + (u32_t)(c - '0');
 80228f6:	fb04 3001 	mla	r0, r4, r1, r3
      if (lwip_isdigit(c)) {
 80228fa:	f01c 0f04 	tst.w	ip, #4
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 80228fe:	f00c 0a03 	and.w	sl, ip, #3
      if (lwip_isdigit(c)) {
 8022902:	d1ee      	bne.n	80228e2 <ip4addr_aton+0x26>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8022904:	2910      	cmp	r1, #16
 8022906:	d10d      	bne.n	8022924 <ip4addr_aton+0x68>
 8022908:	f01c 0f44 	tst.w	ip, #68	; 0x44
 802290c:	d00a      	beq.n	8022924 <ip4addr_aton+0x68>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 802290e:	f1ba 0f02 	cmp.w	sl, #2
        c = *++cp;
 8022912:	7813      	ldrb	r3, [r2, #0]
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8022914:	bf0c      	ite	eq
 8022916:	2061      	moveq	r0, #97	; 0x61
 8022918:	2041      	movne	r0, #65	; 0x41
 802291a:	ebae 0e00 	sub.w	lr, lr, r0
 802291e:	ea4e 1404 	orr.w	r4, lr, r4, lsl #4
        c = *++cp;
 8022922:	e7e1      	b.n	80228e8 <ip4addr_aton+0x2c>
    if (c == '.') {
 8022924:	2b2e      	cmp	r3, #46	; 0x2e
 8022926:	d11a      	bne.n	802295e <ip4addr_aton+0xa2>
      if (pp >= parts + 3) {
 8022928:	4547      	cmp	r7, r8
 802292a:	d008      	beq.n	802293e <ip4addr_aton+0x82>
        return 0;
      }
      *pp++ = val;
      c = *++cp;
 802292c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8022930:	f10b 0001 	add.w	r0, fp, #1
      *pp++ = val;
 8022934:	f847 4b04 	str.w	r4, [r7], #4
    if (!lwip_isdigit(c)) {
 8022938:	5cf2      	ldrb	r2, [r6, r3]
 802293a:	0752      	lsls	r2, r2, #29
 802293c:	d4cb      	bmi.n	80228d6 <ip4addr_aton+0x1a>
      return 0;
 802293e:	2000      	movs	r0, #0
  }
  if (addr) {
    ip4_addr_set_u32(addr, lwip_htonl(val));
  }
  return 1;
}
 8022940:	b005      	add	sp, #20
 8022942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      c = *++cp;
 8022946:	7843      	ldrb	r3, [r0, #1]
      if (c == 'x' || c == 'X') {
 8022948:	f003 02df 	and.w	r2, r3, #223	; 0xdf
 802294c:	2a58      	cmp	r2, #88	; 0x58
 802294e:	d002      	beq.n	8022956 <ip4addr_aton+0x9a>
      c = *++cp;
 8022950:	3001      	adds	r0, #1
        base = 8;
 8022952:	2108      	movs	r1, #8
 8022954:	e7c2      	b.n	80228dc <ip4addr_aton+0x20>
        c = *++cp;
 8022956:	7883      	ldrb	r3, [r0, #2]
        base = 16;
 8022958:	2110      	movs	r1, #16
        c = *++cp;
 802295a:	3002      	adds	r0, #2
 802295c:	e7be      	b.n	80228dc <ip4addr_aton+0x20>
  if (c != '\0' && !lwip_isspace(c)) {
 802295e:	b113      	cbz	r3, 8022966 <ip4addr_aton+0xaa>
 8022960:	f01c 0f08 	tst.w	ip, #8
 8022964:	d0eb      	beq.n	802293e <ip4addr_aton+0x82>
  switch (pp - parts + 1) {
 8022966:	eba7 0009 	sub.w	r0, r7, r9
 802296a:	1080      	asrs	r0, r0, #2
 802296c:	3001      	adds	r0, #1
 802296e:	2804      	cmp	r0, #4
 8022970:	d83e      	bhi.n	80229f0 <ip4addr_aton+0x134>
 8022972:	a301      	add	r3, pc, #4	; (adr r3, 8022978 <ip4addr_aton+0xbc>)
 8022974:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8022978:	08022941 	.word	0x08022941
 802297c:	0802299d 	.word	0x0802299d
 8022980:	0802298d 	.word	0x0802298d
 8022984:	080229d1 	.word	0x080229d1
 8022988:	080229ad 	.word	0x080229ad
      if (val > 0xffffffUL) {
 802298c:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
 8022990:	d2d5      	bcs.n	802293e <ip4addr_aton+0x82>
      if (parts[0] > 0xff) {
 8022992:	9b00      	ldr	r3, [sp, #0]
 8022994:	2bff      	cmp	r3, #255	; 0xff
 8022996:	d8d2      	bhi.n	802293e <ip4addr_aton+0x82>
      val |= parts[0] << 24;
 8022998:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
  if (addr) {
 802299c:	b335      	cbz	r5, 80229ec <ip4addr_aton+0x130>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 802299e:	4620      	mov	r0, r4
 80229a0:	f7f6 f95e 	bl	8018c60 <lwip_htonl>
 80229a4:	4603      	mov	r3, r0
  return 1;
 80229a6:	2001      	movs	r0, #1
    ip4_addr_set_u32(addr, lwip_htonl(val));
 80229a8:	602b      	str	r3, [r5, #0]
 80229aa:	e7c9      	b.n	8022940 <ip4addr_aton+0x84>
      if (val > 0xff) {
 80229ac:	2cff      	cmp	r4, #255	; 0xff
 80229ae:	d8c6      	bhi.n	802293e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80229b0:	9900      	ldr	r1, [sp, #0]
 80229b2:	29ff      	cmp	r1, #255	; 0xff
 80229b4:	d8c3      	bhi.n	802293e <ip4addr_aton+0x82>
 80229b6:	9b01      	ldr	r3, [sp, #4]
 80229b8:	2bff      	cmp	r3, #255	; 0xff
 80229ba:	d8c0      	bhi.n	802293e <ip4addr_aton+0x82>
 80229bc:	9a02      	ldr	r2, [sp, #8]
 80229be:	2aff      	cmp	r2, #255	; 0xff
 80229c0:	d8bd      	bhi.n	802293e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80229c2:	041b      	lsls	r3, r3, #16
 80229c4:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80229c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80229cc:	431c      	orrs	r4, r3
      break;
 80229ce:	e7e5      	b.n	802299c <ip4addr_aton+0xe0>
      if (val > 0xffff) {
 80229d0:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
 80229d4:	d2b3      	bcs.n	802293e <ip4addr_aton+0x82>
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80229d6:	9a00      	ldr	r2, [sp, #0]
 80229d8:	2aff      	cmp	r2, #255	; 0xff
 80229da:	d8b0      	bhi.n	802293e <ip4addr_aton+0x82>
 80229dc:	9b01      	ldr	r3, [sp, #4]
 80229de:	2bff      	cmp	r3, #255	; 0xff
 80229e0:	d8ad      	bhi.n	802293e <ip4addr_aton+0x82>
      val |= (parts[0] << 24) | (parts[1] << 16);
 80229e2:	041b      	lsls	r3, r3, #16
 80229e4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80229e8:	431c      	orrs	r4, r3
      break;
 80229ea:	e7d7      	b.n	802299c <ip4addr_aton+0xe0>
  return 1;
 80229ec:	2001      	movs	r0, #1
 80229ee:	e7a7      	b.n	8022940 <ip4addr_aton+0x84>
      LWIP_ASSERT("unhandled", 0);
 80229f0:	4b04      	ldr	r3, [pc, #16]	; (8022a04 <ip4addr_aton+0x148>)
 80229f2:	22f9      	movs	r2, #249	; 0xf9
 80229f4:	4904      	ldr	r1, [pc, #16]	; (8022a08 <ip4addr_aton+0x14c>)
 80229f6:	4805      	ldr	r0, [pc, #20]	; (8022a0c <ip4addr_aton+0x150>)
 80229f8:	f002 fa2c 	bl	8024e54 <iprintf>
      break;
 80229fc:	e7ce      	b.n	802299c <ip4addr_aton+0xe0>
 80229fe:	bf00      	nop
 8022a00:	08045585 	.word	0x08045585
 8022a04:	080452e0 	.word	0x080452e0
 8022a08:	0804531c 	.word	0x0804531c
 8022a0c:	08029a64 	.word	0x08029a64

08022a10 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022a10:	b510      	push	{r4, lr}
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022a12:	4604      	mov	r4, r0
 8022a14:	b148      	cbz	r0, 8022a2a <ipfrag_free_pbuf_custom+0x1a>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
  if (pcr->original != NULL) {
 8022a16:	6960      	ldr	r0, [r4, #20]
 8022a18:	b108      	cbz	r0, 8022a1e <ipfrag_free_pbuf_custom+0xe>
    pbuf_free(pcr->original);
 8022a1a:	f7f8 f959 	bl	801acd0 <pbuf_free>
  memp_free(MEMP_FRAG_PBUF, p);
 8022a1e:	4621      	mov	r1, r4
 8022a20:	2006      	movs	r0, #6
  }
  ip_frag_free_pbuf_custom_ref(pcr);
}
 8022a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  memp_free(MEMP_FRAG_PBUF, p);
 8022a26:	f7f7 bc3b 	b.w	801a2a0 <memp_free>
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8022a2a:	4b04      	ldr	r3, [pc, #16]	; (8022a3c <ipfrag_free_pbuf_custom+0x2c>)
 8022a2c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022a30:	4903      	ldr	r1, [pc, #12]	; (8022a40 <ipfrag_free_pbuf_custom+0x30>)
 8022a32:	4804      	ldr	r0, [pc, #16]	; (8022a44 <ipfrag_free_pbuf_custom+0x34>)
 8022a34:	f002 fa0e 	bl	8024e54 <iprintf>
 8022a38:	e7ed      	b.n	8022a16 <ipfrag_free_pbuf_custom+0x6>
 8022a3a:	bf00      	nop
 8022a3c:	08045330 	.word	0x08045330
 8022a40:	0804536c 	.word	0x0804536c
 8022a44:	08029a64 	.word	0x08029a64

08022a48 <ip_reass_free_complete_datagram>:
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022a48:	4281      	cmp	r1, r0
{
 8022a4a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022a4e:	4606      	mov	r6, r0
 8022a50:	460f      	mov	r7, r1
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022a52:	d075      	beq.n	8022b40 <ip_reass_free_complete_datagram+0xf8>
  if (prev != NULL) {
 8022a54:	b147      	cbz	r7, 8022a68 <ip_reass_free_complete_datagram+0x20>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8022a56:	683b      	ldr	r3, [r7, #0]
 8022a58:	42b3      	cmp	r3, r6
 8022a5a:	d005      	beq.n	8022a68 <ip_reass_free_complete_datagram+0x20>
 8022a5c:	4b40      	ldr	r3, [pc, #256]	; (8022b60 <ip_reass_free_complete_datagram+0x118>)
 8022a5e:	22ad      	movs	r2, #173	; 0xad
 8022a60:	4940      	ldr	r1, [pc, #256]	; (8022b64 <ip_reass_free_complete_datagram+0x11c>)
 8022a62:	4841      	ldr	r0, [pc, #260]	; (8022b68 <ip_reass_free_complete_datagram+0x120>)
 8022a64:	f002 f9f6 	bl	8024e54 <iprintf>
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8022a68:	6875      	ldr	r5, [r6, #4]
 8022a6a:	686b      	ldr	r3, [r5, #4]
  if (iprh->start == 0) {
 8022a6c:	889a      	ldrh	r2, [r3, #4]
 8022a6e:	2a00      	cmp	r2, #0
 8022a70:	d047      	beq.n	8022b02 <ip_reass_free_complete_datagram+0xba>
  u16_t pbufs_freed = 0;
 8022a72:	f04f 0b00 	mov.w	fp, #0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022a76:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8022b60 <ip_reass_free_complete_datagram+0x118>
 8022a7a:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8022b80 <ip_reass_free_complete_datagram+0x138>
 8022a7e:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 8022b68 <ip_reass_free_complete_datagram+0x120>
 8022a82:	e005      	b.n	8022a90 <ip_reass_free_complete_datagram+0x48>
    pbuf_free(pcur);
 8022a84:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022a86:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022a88:	f7f8 f922 	bl	801acd0 <pbuf_free>
  while (p != NULL) {
 8022a8c:	b1b4      	cbz	r4, 8022abc <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022a8e:	6863      	ldr	r3, [r4, #4]
    clen = pbuf_clen(pcur);
 8022a90:	4628      	mov	r0, r5
    p = iprh->next_pbuf;
 8022a92:	681c      	ldr	r4, [r3, #0]
    clen = pbuf_clen(pcur);
 8022a94:	f7f8 f930 	bl	801acf8 <pbuf_clen>
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022a98:	4458      	add	r0, fp
 8022a9a:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8022a9e:	fa1f fb80 	uxth.w	fp, r0
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8022aa2:	dbef      	blt.n	8022a84 <ip_reass_free_complete_datagram+0x3c>
 8022aa4:	4653      	mov	r3, sl
 8022aa6:	22cc      	movs	r2, #204	; 0xcc
 8022aa8:	4649      	mov	r1, r9
 8022aaa:	4640      	mov	r0, r8
 8022aac:	f002 f9d2 	bl	8024e54 <iprintf>
    pbuf_free(pcur);
 8022ab0:	4628      	mov	r0, r5
    iprh = (struct ip_reass_helper *)p->payload;
 8022ab2:	4625      	mov	r5, r4
    pbuf_free(pcur);
 8022ab4:	f7f8 f90c 	bl	801acd0 <pbuf_free>
  while (p != NULL) {
 8022ab8:	2c00      	cmp	r4, #0
 8022aba:	d1e8      	bne.n	8022a8e <ip_reass_free_complete_datagram+0x46>
  if (reassdatagrams == ipr) {
 8022abc:	4b2b      	ldr	r3, [pc, #172]	; (8022b6c <ip_reass_free_complete_datagram+0x124>)
 8022abe:	681a      	ldr	r2, [r3, #0]
 8022ac0:	4296      	cmp	r6, r2
 8022ac2:	d03a      	beq.n	8022b3a <ip_reass_free_complete_datagram+0xf2>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022ac4:	2f00      	cmp	r7, #0
 8022ac6:	d042      	beq.n	8022b4e <ip_reass_free_complete_datagram+0x106>
    prev->next = ipr->next;
 8022ac8:	6833      	ldr	r3, [r6, #0]
 8022aca:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022acc:	4c28      	ldr	r4, [pc, #160]	; (8022b70 <ip_reass_free_complete_datagram+0x128>)
  memp_free(MEMP_REASSDATA, ipr);
 8022ace:	4631      	mov	r1, r6
 8022ad0:	2005      	movs	r0, #5
 8022ad2:	f7f7 fbe5 	bl	801a2a0 <memp_free>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022ad6:	8823      	ldrh	r3, [r4, #0]
 8022ad8:	455b      	cmp	r3, fp
 8022ada:	d305      	bcc.n	8022ae8 <ip_reass_free_complete_datagram+0xa0>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022adc:	eba3 030b 	sub.w	r3, r3, fp
}
 8022ae0:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022ae2:	8023      	strh	r3, [r4, #0]
}
 8022ae4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8022ae8:	4b1d      	ldr	r3, [pc, #116]	; (8022b60 <ip_reass_free_complete_datagram+0x118>)
 8022aea:	22d2      	movs	r2, #210	; 0xd2
 8022aec:	4921      	ldr	r1, [pc, #132]	; (8022b74 <ip_reass_free_complete_datagram+0x12c>)
 8022aee:	481e      	ldr	r0, [pc, #120]	; (8022b68 <ip_reass_free_complete_datagram+0x120>)
 8022af0:	f002 f9b0 	bl	8024e54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022af4:	8823      	ldrh	r3, [r4, #0]
}
 8022af6:	4658      	mov	r0, fp
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8022af8:	eba3 030b 	sub.w	r3, r3, fp
 8022afc:	8023      	strh	r3, [r4, #0]
}
 8022afe:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ipr->p = iprh->next_pbuf;
 8022b02:	681a      	ldr	r2, [r3, #0]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022b04:	6930      	ldr	r0, [r6, #16]
 8022b06:	6971      	ldr	r1, [r6, #20]
    ipr->p = iprh->next_pbuf;
 8022b08:	6072      	str	r2, [r6, #4]
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022b0a:	68f4      	ldr	r4, [r6, #12]
 8022b0c:	68b2      	ldr	r2, [r6, #8]
 8022b0e:	6098      	str	r0, [r3, #8]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022b10:	4628      	mov	r0, r5
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022b12:	60d9      	str	r1, [r3, #12]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022b14:	2101      	movs	r1, #1
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8022b16:	601a      	str	r2, [r3, #0]
 8022b18:	605c      	str	r4, [r3, #4]
 8022b1a:	69b2      	ldr	r2, [r6, #24]
 8022b1c:	611a      	str	r2, [r3, #16]
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8022b1e:	f7ff fccf 	bl	80224c0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8022b22:	4628      	mov	r0, r5
 8022b24:	f7f8 f8e8 	bl	801acf8 <pbuf_clen>
 8022b28:	4683      	mov	fp, r0
    pbuf_free(p);
 8022b2a:	4628      	mov	r0, r5
 8022b2c:	f7f8 f8d0 	bl	801acd0 <pbuf_free>
  p = ipr->p;
 8022b30:	6875      	ldr	r5, [r6, #4]
  while (p != NULL) {
 8022b32:	2d00      	cmp	r5, #0
 8022b34:	d0c2      	beq.n	8022abc <ip_reass_free_complete_datagram+0x74>
    iprh = (struct ip_reass_helper *)p->payload;
 8022b36:	686b      	ldr	r3, [r5, #4]
 8022b38:	e79d      	b.n	8022a76 <ip_reass_free_complete_datagram+0x2e>
    reassdatagrams = ipr->next;
 8022b3a:	6832      	ldr	r2, [r6, #0]
 8022b3c:	601a      	str	r2, [r3, #0]
 8022b3e:	e7c5      	b.n	8022acc <ip_reass_free_complete_datagram+0x84>
  LWIP_ASSERT("prev != ipr", prev != ipr);
 8022b40:	4b07      	ldr	r3, [pc, #28]	; (8022b60 <ip_reass_free_complete_datagram+0x118>)
 8022b42:	22ab      	movs	r2, #171	; 0xab
 8022b44:	490c      	ldr	r1, [pc, #48]	; (8022b78 <ip_reass_free_complete_datagram+0x130>)
 8022b46:	4808      	ldr	r0, [pc, #32]	; (8022b68 <ip_reass_free_complete_datagram+0x120>)
 8022b48:	f002 f984 	bl	8024e54 <iprintf>
 8022b4c:	e782      	b.n	8022a54 <ip_reass_free_complete_datagram+0xc>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022b4e:	4b04      	ldr	r3, [pc, #16]	; (8022b60 <ip_reass_free_complete_datagram+0x118>)
 8022b50:	f240 1245 	movw	r2, #325	; 0x145
 8022b54:	4909      	ldr	r1, [pc, #36]	; (8022b7c <ip_reass_free_complete_datagram+0x134>)
 8022b56:	4804      	ldr	r0, [pc, #16]	; (8022b68 <ip_reass_free_complete_datagram+0x120>)
 8022b58:	f002 f97c 	bl	8024e54 <iprintf>
 8022b5c:	e7b4      	b.n	8022ac8 <ip_reass_free_complete_datagram+0x80>
 8022b5e:	bf00      	nop
 8022b60:	08045330 	.word	0x08045330
 8022b64:	08045384 	.word	0x08045384
 8022b68:	08029a64 	.word	0x08029a64
 8022b6c:	2002e740 	.word	0x2002e740
 8022b70:	2002e73c 	.word	0x2002e73c
 8022b74:	080453d4 	.word	0x080453d4
 8022b78:	08045378 	.word	0x08045378
 8022b7c:	080453b8 	.word	0x080453b8
 8022b80:	08045398 	.word	0x08045398

08022b84 <ip_reass_remove_oldest_datagram>:
{
 8022b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  int pbufs_freed = 0, pbufs_freed_current;
 8022b88:	2700      	movs	r7, #0
 8022b8a:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8022bf4 <ip_reass_remove_oldest_datagram+0x70>
{
 8022b8e:	4605      	mov	r5, r0
 8022b90:	460e      	mov	r6, r1
    r = reassdatagrams;
 8022b92:	f8d8 3000 	ldr.w	r3, [r8]
    while (r != NULL) {
 8022b96:	b1f3      	cbz	r3, 8022bd6 <ip_reass_remove_oldest_datagram+0x52>
    other_datagrams = 0;
 8022b98:	2400      	movs	r4, #0
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022b9a:	f8d5 e00c 	ldr.w	lr, [r5, #12]
    oldest_prev = NULL;
 8022b9e:	4621      	mov	r1, r4
    prev = NULL;
 8022ba0:	46a4      	mov	ip, r4
    oldest = NULL;
 8022ba2:	4620      	mov	r0, r4
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022ba4:	695a      	ldr	r2, [r3, #20]
 8022ba6:	4572      	cmp	r2, lr
 8022ba8:	d018      	beq.n	8022bdc <ip_reass_remove_oldest_datagram+0x58>
        other_datagrams++;
 8022baa:	3401      	adds	r4, #1
        if (oldest == NULL) {
 8022bac:	b120      	cbz	r0, 8022bb8 <ip_reass_remove_oldest_datagram+0x34>
        } else if (r->timer <= oldest->timer) {
 8022bae:	f893 901f 	ldrb.w	r9, [r3, #31]
 8022bb2:	7fc2      	ldrb	r2, [r0, #31]
 8022bb4:	4591      	cmp	r9, r2
 8022bb6:	d801      	bhi.n	8022bbc <ip_reass_remove_oldest_datagram+0x38>
 8022bb8:	4661      	mov	r1, ip
 8022bba:	4618      	mov	r0, r3
      if (r->next != NULL) {
 8022bbc:	681a      	ldr	r2, [r3, #0]
 8022bbe:	469c      	mov	ip, r3
 8022bc0:	4613      	mov	r3, r2
 8022bc2:	2a00      	cmp	r2, #0
 8022bc4:	d1ee      	bne.n	8022ba4 <ip_reass_remove_oldest_datagram+0x20>
    if (oldest != NULL) {
 8022bc6:	b110      	cbz	r0, 8022bce <ip_reass_remove_oldest_datagram+0x4a>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8022bc8:	f7ff ff3e 	bl	8022a48 <ip_reass_free_complete_datagram>
      pbufs_freed += pbufs_freed_current;
 8022bcc:	4407      	add	r7, r0
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8022bce:	42b7      	cmp	r7, r6
 8022bd0:	da01      	bge.n	8022bd6 <ip_reass_remove_oldest_datagram+0x52>
 8022bd2:	2c01      	cmp	r4, #1
 8022bd4:	dcdd      	bgt.n	8022b92 <ip_reass_remove_oldest_datagram+0xe>
}
 8022bd6:	4638      	mov	r0, r7
 8022bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8022bdc:	699a      	ldr	r2, [r3, #24]
 8022bde:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8022be2:	454a      	cmp	r2, r9
 8022be4:	d1e1      	bne.n	8022baa <ip_reass_remove_oldest_datagram+0x26>
 8022be6:	f8b3 900c 	ldrh.w	r9, [r3, #12]
 8022bea:	88aa      	ldrh	r2, [r5, #4]
 8022bec:	4591      	cmp	r9, r2
 8022bee:	d1dc      	bne.n	8022baa <ip_reass_remove_oldest_datagram+0x26>
 8022bf0:	e7e4      	b.n	8022bbc <ip_reass_remove_oldest_datagram+0x38>
 8022bf2:	bf00      	nop
 8022bf4:	2002e740 	.word	0x2002e740

08022bf8 <ip_reass_tmr>:
{
 8022bf8:	b538      	push	{r3, r4, r5, lr}
  r = reassdatagrams;
 8022bfa:	4b0a      	ldr	r3, [pc, #40]	; (8022c24 <ip_reass_tmr+0x2c>)
 8022bfc:	6818      	ldr	r0, [r3, #0]
  while (r != NULL) {
 8022bfe:	b140      	cbz	r0, 8022c12 <ip_reass_tmr+0x1a>
  struct ip_reassdata *r, *prev = NULL;
 8022c00:	2400      	movs	r4, #0
    if (r->timer > 0) {
 8022c02:	7fc3      	ldrb	r3, [r0, #31]
      r->timer--;
 8022c04:	1e5a      	subs	r2, r3, #1
    if (r->timer > 0) {
 8022c06:	b12b      	cbz	r3, 8022c14 <ip_reass_tmr+0x1c>
 8022c08:	4604      	mov	r4, r0
      r->timer--;
 8022c0a:	77c2      	strb	r2, [r0, #31]
      r = r->next;
 8022c0c:	6800      	ldr	r0, [r0, #0]
  while (r != NULL) {
 8022c0e:	2800      	cmp	r0, #0
 8022c10:	d1f7      	bne.n	8022c02 <ip_reass_tmr+0xa>
}
 8022c12:	bd38      	pop	{r3, r4, r5, pc}
      r = r->next;
 8022c14:	6805      	ldr	r5, [r0, #0]
      ip_reass_free_complete_datagram(tmp, prev);
 8022c16:	4621      	mov	r1, r4
 8022c18:	f7ff ff16 	bl	8022a48 <ip_reass_free_complete_datagram>
      r = r->next;
 8022c1c:	4628      	mov	r0, r5
  while (r != NULL) {
 8022c1e:	2800      	cmp	r0, #0
 8022c20:	d1ef      	bne.n	8022c02 <ip_reass_tmr+0xa>
 8022c22:	e7f6      	b.n	8022c12 <ip_reass_tmr+0x1a>
 8022c24:	2002e740 	.word	0x2002e740

08022c28 <ip4_reass>:
{
 8022c28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  fraghdr = (struct ip_hdr *)p->payload;
 8022c2c:	f8d0 a004 	ldr.w	sl, [r0, #4]
{
 8022c30:	b085      	sub	sp, #20
 8022c32:	4605      	mov	r5, r0
  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8022c34:	f89a 3000 	ldrb.w	r3, [sl]
 8022c38:	f003 030f 	and.w	r3, r3, #15
 8022c3c:	2b05      	cmp	r3, #5
 8022c3e:	f040 8089 	bne.w	8022d54 <ip4_reass+0x12c>
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022c42:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8022c46:	f7f6 f807 	bl	8018c58 <lwip_htons>
 8022c4a:	4606      	mov	r6, r0
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022c4c:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8022c50:	f7f6 f802 	bl	8018c58 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8022c54:	f89a 2000 	ldrb.w	r2, [sl]
 8022c58:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8022c5c:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022c60:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8022c64:	d376      	bcc.n	8022d54 <ip4_reass+0x12c>
  len = (u16_t)(len - hlen);
 8022c66:	1ac3      	subs	r3, r0, r3
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022c68:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 8022f60 <ip4_reass+0x338>
  clen = pbuf_clen(p);
 8022c6c:	4628      	mov	r0, r5
  len = (u16_t)(len - hlen);
 8022c6e:	b29b      	uxth	r3, r3
 8022c70:	9300      	str	r3, [sp, #0]
  clen = pbuf_clen(p);
 8022c72:	f7f8 f841 	bl	801acf8 <pbuf_clen>
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022c76:	f8b8 3000 	ldrh.w	r3, [r8]
  clen = pbuf_clen(p);
 8022c7a:	4607      	mov	r7, r0
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8022c7c:	4403      	add	r3, r0
 8022c7e:	2b14      	cmp	r3, #20
 8022c80:	f300 80e5 	bgt.w	8022e4e <ip4_reass+0x226>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022c84:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8022f64 <ip4_reass+0x33c>
 8022c88:	f8d9 4000 	ldr.w	r4, [r9]
 8022c8c:	2c00      	cmp	r4, #0
 8022c8e:	f000 80ec 	beq.w	8022e6a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022c92:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022c96:	e003      	b.n	8022ca0 <ip4_reass+0x78>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8022c98:	6824      	ldr	r4, [r4, #0]
 8022c9a:	2c00      	cmp	r4, #0
 8022c9c:	f000 80e5 	beq.w	8022e6a <ip4_reass+0x242>
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022ca0:	6963      	ldr	r3, [r4, #20]
 8022ca2:	4293      	cmp	r3, r2
 8022ca4:	d1f8      	bne.n	8022c98 <ip4_reass+0x70>
 8022ca6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022caa:	69a1      	ldr	r1, [r4, #24]
 8022cac:	4299      	cmp	r1, r3
 8022cae:	d1f3      	bne.n	8022c98 <ip4_reass+0x70>
 8022cb0:	89a1      	ldrh	r1, [r4, #12]
 8022cb2:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8022cb6:	4299      	cmp	r1, r3
 8022cb8:	d1ee      	bne.n	8022c98 <ip4_reass+0x70>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022cba:	f8ba 0006 	ldrh.w	r0, [sl, #6]
 8022cbe:	f7f5 ffcb 	bl	8018c58 <lwip_htons>
 8022cc2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022cc6:	2800      	cmp	r0, #0
 8022cc8:	f000 80a9 	beq.w	8022e1e <ip4_reass+0x1f6>
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8022ccc:	f8ba 3006 	ldrh.w	r3, [sl, #6]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022cd0:	f3c6 060c 	ubfx	r6, r6, #0, #13
  if (is_last) {
 8022cd4:	f013 0320 	ands.w	r3, r3, #32
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022cd8:	ea4f 06c6 	mov.w	r6, r6, lsl #3
  if (is_last) {
 8022cdc:	9301      	str	r3, [sp, #4]
 8022cde:	d108      	bne.n	8022cf2 <ip4_reass+0xca>
    u16_t datagram_len = (u16_t)(offset + len);
 8022ce0:	9b00      	ldr	r3, [sp, #0]
 8022ce2:	18f3      	adds	r3, r6, r3
 8022ce4:	b29b      	uxth	r3, r3
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022ce6:	429e      	cmp	r6, r3
 8022ce8:	d812      	bhi.n	8022d10 <ip4_reass+0xe8>
 8022cea:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8022cee:	4293      	cmp	r3, r2
 8022cf0:	d80e      	bhi.n	8022d10 <ip4_reass+0xe8>
  fraghdr = (struct ip_hdr *)new_p->payload;
 8022cf2:	f8d5 a004 	ldr.w	sl, [r5, #4]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8022cf6:	f8ba 0002 	ldrh.w	r0, [sl, #2]
 8022cfa:	f7f5 ffad 	bl	8018c58 <lwip_htons>
  hlen = IPH_HL_BYTES(fraghdr);
 8022cfe:	f89a 2000 	ldrb.w	r2, [sl]
 8022d02:	f002 020f 	and.w	r2, r2, #15
  if (hlen > len) {
 8022d06:	ebb0 0f82 	cmp.w	r0, r2, lsl #2
 8022d0a:	ea4f 0382 	mov.w	r3, r2, lsl #2
 8022d0e:	d229      	bcs.n	8022d64 <ip4_reass+0x13c>
  if (ipr->p == NULL) {
 8022d10:	6866      	ldr	r6, [r4, #4]
 8022d12:	b9fe      	cbnz	r6, 8022d54 <ip4_reass+0x12c>
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022d14:	f8d9 3000 	ldr.w	r3, [r9]
 8022d18:	42a3      	cmp	r3, r4
 8022d1a:	d014      	beq.n	8022d46 <ip4_reass+0x11e>
 8022d1c:	4b8c      	ldr	r3, [pc, #560]	; (8022f50 <ip4_reass+0x328>)
 8022d1e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022d22:	498c      	ldr	r1, [pc, #560]	; (8022f54 <ip4_reass+0x32c>)
 8022d24:	488c      	ldr	r0, [pc, #560]	; (8022f58 <ip4_reass+0x330>)
 8022d26:	f002 f895 	bl	8024e54 <iprintf>
  if (reassdatagrams == ipr) {
 8022d2a:	f8d9 3000 	ldr.w	r3, [r9]
 8022d2e:	429c      	cmp	r4, r3
 8022d30:	d009      	beq.n	8022d46 <ip4_reass+0x11e>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8022d32:	4b87      	ldr	r3, [pc, #540]	; (8022f50 <ip4_reass+0x328>)
 8022d34:	f240 1245 	movw	r2, #325	; 0x145
 8022d38:	4988      	ldr	r1, [pc, #544]	; (8022f5c <ip4_reass+0x334>)
 8022d3a:	4887      	ldr	r0, [pc, #540]	; (8022f58 <ip4_reass+0x330>)
 8022d3c:	f002 f88a 	bl	8024e54 <iprintf>
    prev->next = ipr->next;
 8022d40:	6823      	ldr	r3, [r4, #0]
 8022d42:	6033      	str	r3, [r6, #0]
 8022d44:	deff      	udf	#255	; 0xff
    reassdatagrams = ipr->next;
 8022d46:	6823      	ldr	r3, [r4, #0]
  memp_free(MEMP_REASSDATA, ipr);
 8022d48:	4621      	mov	r1, r4
 8022d4a:	2005      	movs	r0, #5
    reassdatagrams = ipr->next;
 8022d4c:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 8022d50:	f7f7 faa6 	bl	801a2a0 <memp_free>
  pbuf_free(p);
 8022d54:	4628      	mov	r0, r5
  return NULL;
 8022d56:	2600      	movs	r6, #0
  pbuf_free(p);
 8022d58:	f7f7 ffba 	bl	801acd0 <pbuf_free>
}
 8022d5c:	4630      	mov	r0, r6
 8022d5e:	b005      	add	sp, #20
 8022d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  len = (u16_t)(len - hlen);
 8022d64:	1ac3      	subs	r3, r0, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022d66:	f8ba 0006 	ldrh.w	r0, [sl, #6]
  len = (u16_t)(len - hlen);
 8022d6a:	fa1f fa83 	uxth.w	sl, r3
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022d6e:	f7f5 ff73 	bl	8018c58 <lwip_htons>
 8022d72:	f3c0 000c 	ubfx	r0, r0, #0, #13
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022d76:	f8d5 b004 	ldr.w	fp, [r5, #4]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8022d7a:	00c2      	lsls	r2, r0, #3
  iprh = (struct ip_reass_helper *)new_p->payload;
 8022d7c:	f8cd b008 	str.w	fp, [sp, #8]
  iprh->end = (u16_t)(offset + len);
 8022d80:	eb0a 0302 	add.w	r3, sl, r2
  iprh->start = offset;
 8022d84:	f8ab 2004 	strh.w	r2, [fp, #4]
  iprh->end = (u16_t)(offset + len);
 8022d88:	f8ab 3006 	strh.w	r3, [fp, #6]
 8022d8c:	b29b      	uxth	r3, r3
 8022d8e:	4619      	mov	r1, r3
 8022d90:	9303      	str	r3, [sp, #12]
  iprh->next_pbuf = NULL;
 8022d92:	2300      	movs	r3, #0
  if (iprh->end < offset) {
 8022d94:	428a      	cmp	r2, r1
  iprh->next_pbuf = NULL;
 8022d96:	f88b 3000 	strb.w	r3, [fp]
 8022d9a:	f88b 3001 	strb.w	r3, [fp, #1]
 8022d9e:	f88b 3002 	strb.w	r3, [fp, #2]
 8022da2:	f88b 3003 	strb.w	r3, [fp, #3]
  if (iprh->end < offset) {
 8022da6:	d8b3      	bhi.n	8022d10 <ip4_reass+0xe8>
  for (q = ipr->p; q != NULL;) {
 8022da8:	6861      	ldr	r1, [r4, #4]
 8022daa:	2900      	cmp	r1, #0
 8022dac:	f000 80c4 	beq.w	8022f38 <ip4_reass+0x310>
  int valid = 1;
 8022db0:	f04f 0a01 	mov.w	sl, #1
 8022db4:	4694      	mov	ip, r2
 8022db6:	e00e      	b.n	8022dd6 <ip4_reass+0x1ae>
    } else if (iprh->start == iprh_tmp->start) {
 8022db8:	d0cc      	beq.n	8022d54 <ip4_reass+0x12c>
    } else if (iprh->start < iprh_tmp->end) {
 8022dba:	f8b3 e006 	ldrh.w	lr, [r3, #6]
 8022dbe:	45f4      	cmp	ip, lr
 8022dc0:	d3c8      	bcc.n	8022d54 <ip4_reass+0x12c>
      if (iprh_prev != NULL) {
 8022dc2:	b122      	cbz	r2, 8022dce <ip4_reass+0x1a6>
        if (iprh_prev->end != iprh_tmp->start) {
 8022dc4:	88d2      	ldrh	r2, [r2, #6]
          valid = 0;
 8022dc6:	4282      	cmp	r2, r0
 8022dc8:	bf18      	it	ne
 8022dca:	f04f 0a00 	movne.w	sl, #0
    q = iprh_tmp->next_pbuf;
 8022dce:	6819      	ldr	r1, [r3, #0]
  for (q = ipr->p; q != NULL;) {
 8022dd0:	2900      	cmp	r1, #0
 8022dd2:	f000 808a 	beq.w	8022eea <ip4_reass+0x2c2>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8022dd6:	461a      	mov	r2, r3
 8022dd8:	684b      	ldr	r3, [r1, #4]
    if (iprh->start < iprh_tmp->start) {
 8022dda:	8898      	ldrh	r0, [r3, #4]
 8022ddc:	4584      	cmp	ip, r0
 8022dde:	d2eb      	bcs.n	8022db8 <ip4_reass+0x190>
      iprh->next_pbuf = q;
 8022de0:	4613      	mov	r3, r2
 8022de2:	f8cb 1000 	str.w	r1, [fp]
 8022de6:	4662      	mov	r2, ip
 8022de8:	469c      	mov	ip, r3
      if (iprh_prev != NULL) {
 8022dea:	2b00      	cmp	r3, #0
 8022dec:	d066      	beq.n	8022ebc <ip4_reass+0x294>
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8022dee:	88db      	ldrh	r3, [r3, #6]
 8022df0:	429a      	cmp	r2, r3
 8022df2:	d3af      	bcc.n	8022d54 <ip4_reass+0x12c>
 8022df4:	9903      	ldr	r1, [sp, #12]
 8022df6:	4281      	cmp	r1, r0
 8022df8:	d8ac      	bhi.n	8022d54 <ip4_reass+0x12c>
        if (iprh_prev->end != iprh->start) {
 8022dfa:	429a      	cmp	r2, r3
        iprh_prev->next_pbuf = new_p;
 8022dfc:	f8cc 5000 	str.w	r5, [ip]
        if (iprh_prev->end != iprh->start) {
 8022e00:	d061      	beq.n	8022ec6 <ip4_reass+0x29e>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022e02:	9b01      	ldr	r3, [sp, #4]
 8022e04:	2b00      	cmp	r3, #0
 8022e06:	f000 808a 	beq.w	8022f1e <ip4_reass+0x2f6>
 8022e0a:	7fa3      	ldrb	r3, [r4, #30]
 8022e0c:	07db      	lsls	r3, r3, #31
 8022e0e:	d462      	bmi.n	8022ed6 <ip4_reass+0x2ae>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022e10:	f8b8 3000 	ldrh.w	r3, [r8]
  return NULL;
 8022e14:	2600      	movs	r6, #0
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022e16:	441f      	add	r7, r3
 8022e18:	f8a8 7000 	strh.w	r7, [r8]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022e1c:	e79e      	b.n	8022d5c <ip4_reass+0x134>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8022e1e:	89e0      	ldrh	r0, [r4, #14]
 8022e20:	f7f5 ff1a 	bl	8018c58 <lwip_htons>
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8022e24:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8022e28:	2800      	cmp	r0, #0
 8022e2a:	f43f af4f 	beq.w	8022ccc <ip4_reass+0xa4>
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8022e2e:	f8da 3000 	ldr.w	r3, [sl]
 8022e32:	f8da 0004 	ldr.w	r0, [sl, #4]
 8022e36:	f8da 1008 	ldr.w	r1, [sl, #8]
 8022e3a:	f8da 200c 	ldr.w	r2, [sl, #12]
 8022e3e:	60a3      	str	r3, [r4, #8]
 8022e40:	60e0      	str	r0, [r4, #12]
 8022e42:	6121      	str	r1, [r4, #16]
 8022e44:	6162      	str	r2, [r4, #20]
 8022e46:	f8da 3010 	ldr.w	r3, [sl, #16]
 8022e4a:	61a3      	str	r3, [r4, #24]
 8022e4c:	e73e      	b.n	8022ccc <ip4_reass+0xa4>
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022e4e:	4601      	mov	r1, r0
 8022e50:	4650      	mov	r0, sl
 8022e52:	f7ff fe97 	bl	8022b84 <ip_reass_remove_oldest_datagram>
 8022e56:	2800      	cmp	r0, #0
 8022e58:	f43f af7c 	beq.w	8022d54 <ip4_reass+0x12c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8022e5c:	f8b8 3000 	ldrh.w	r3, [r8]
 8022e60:	443b      	add	r3, r7
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022e62:	2b14      	cmp	r3, #20
 8022e64:	f77f af0e 	ble.w	8022c84 <ip4_reass+0x5c>
 8022e68:	e774      	b.n	8022d54 <ip4_reass+0x12c>
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022e6a:	f44f 728f 	mov.w	r2, #286	; 0x11e
 8022e6e:	4938      	ldr	r1, [pc, #224]	; (8022f50 <ip4_reass+0x328>)
 8022e70:	2005      	movs	r0, #5
 8022e72:	f7f7 f9df 	bl	801a234 <memp_malloc_fn>
  if (ipr == NULL) {
 8022e76:	4604      	mov	r4, r0
 8022e78:	b178      	cbz	r0, 8022e9a <ip4_reass+0x272>
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8022e7a:	2300      	movs	r3, #0
 8022e7c:	61e3      	str	r3, [r4, #28]
 8022e7e:	60a3      	str	r3, [r4, #8]
 8022e80:	60e3      	str	r3, [r4, #12]
 8022e82:	6123      	str	r3, [r4, #16]
 8022e84:	6163      	str	r3, [r4, #20]
 8022e86:	61a3      	str	r3, [r4, #24]
 8022e88:	6063      	str	r3, [r4, #4]
  ipr->next = reassdatagrams;
 8022e8a:	f8d9 3000 	ldr.w	r3, [r9]
  reassdatagrams = ipr;
 8022e8e:	f8c9 4000 	str.w	r4, [r9]
  ipr->next = reassdatagrams;
 8022e92:	6023      	str	r3, [r4, #0]
  ipr->timer = IP_REASS_MAXAGE;
 8022e94:	230f      	movs	r3, #15
 8022e96:	77e3      	strb	r3, [r4, #31]
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8022e98:	e7c9      	b.n	8022e2e <ip4_reass+0x206>
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8022e9a:	4639      	mov	r1, r7
 8022e9c:	4650      	mov	r0, sl
 8022e9e:	f7ff fe71 	bl	8022b84 <ip_reass_remove_oldest_datagram>
 8022ea2:	4287      	cmp	r7, r0
 8022ea4:	f73f af56 	bgt.w	8022d54 <ip4_reass+0x12c>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8022ea8:	f44f 7291 	mov.w	r2, #290	; 0x122
 8022eac:	4928      	ldr	r1, [pc, #160]	; (8022f50 <ip4_reass+0x328>)
 8022eae:	2005      	movs	r0, #5
 8022eb0:	f7f7 f9c0 	bl	801a234 <memp_malloc_fn>
    if (ipr == NULL)
 8022eb4:	4604      	mov	r4, r0
 8022eb6:	2800      	cmp	r0, #0
 8022eb8:	d1df      	bne.n	8022e7a <ip4_reass+0x252>
 8022eba:	e74b      	b.n	8022d54 <ip4_reass+0x12c>
        if (iprh->end > iprh_tmp->start) {
 8022ebc:	9b03      	ldr	r3, [sp, #12]
 8022ebe:	4283      	cmp	r3, r0
 8022ec0:	f63f af48 	bhi.w	8022d54 <ip4_reass+0x12c>
        ipr->p = new_p;
 8022ec4:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022ec6:	9b01      	ldr	r3, [sp, #4]
 8022ec8:	b19b      	cbz	r3, 8022ef2 <ip4_reass+0x2ca>
 8022eca:	7fa3      	ldrb	r3, [r4, #30]
 8022ecc:	07d9      	lsls	r1, r3, #31
 8022ece:	d59f      	bpl.n	8022e10 <ip4_reass+0x1e8>
    if (valid) {
 8022ed0:	f1ba 0f00 	cmp.w	sl, #0
 8022ed4:	d138      	bne.n	8022f48 <ip4_reass+0x320>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022ed6:	f8b8 3000 	ldrh.w	r3, [r8]
 8022eda:	441f      	add	r7, r3
 8022edc:	f8a8 7000 	strh.w	r7, [r8]
  return NULL;
 8022ee0:	2600      	movs	r6, #0
}
 8022ee2:	4630      	mov	r0, r6
 8022ee4:	b005      	add	sp, #20
 8022ee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (iprh_prev->end != iprh->start) {
 8022eea:	45f4      	cmp	ip, lr
      iprh_prev->next_pbuf = new_p;
 8022eec:	601d      	str	r5, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8022eee:	d188      	bne.n	8022e02 <ip4_reass+0x1da>
 8022ef0:	e7e9      	b.n	8022ec6 <ip4_reass+0x29e>
    if (valid) {
 8022ef2:	f1ba 0f00 	cmp.w	sl, #0
 8022ef6:	d012      	beq.n	8022f1e <ip4_reass+0x2f6>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022ef8:	6863      	ldr	r3, [r4, #4]
 8022efa:	b183      	cbz	r3, 8022f1e <ip4_reass+0x2f6>
 8022efc:	6859      	ldr	r1, [r3, #4]
 8022efe:	888b      	ldrh	r3, [r1, #4]
 8022f00:	2b00      	cmp	r3, #0
 8022f02:	d031      	beq.n	8022f68 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022f04:	f8b8 3000 	ldrh.w	r3, [r8]
 8022f08:	441f      	add	r7, r3
  if (is_last) {
 8022f0a:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022f0c:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8022f10:	2b00      	cmp	r3, #0
 8022f12:	d1e5      	bne.n	8022ee0 <ip4_reass+0x2b8>
 8022f14:	e008      	b.n	8022f28 <ip4_reass+0x300>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022f16:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 8022f1a:	4659      	mov	r1, fp
 8022f1c:	b323      	cbz	r3, 8022f68 <ip4_reass+0x340>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022f1e:	f8b8 3000 	ldrh.w	r3, [r8]
 8022f22:	441f      	add	r7, r3
 8022f24:	f8a8 7000 	strh.w	r7, [r8]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022f28:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022f2a:	9a00      	ldr	r2, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022f2c:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8022f30:	4416      	add	r6, r2
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022f32:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8022f34:	83a6      	strh	r6, [r4, #28]
  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8022f36:	e7d3      	b.n	8022ee0 <ip4_reass+0x2b8>
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022f38:	9b01      	ldr	r3, [sp, #4]
      ipr->p = new_p;
 8022f3a:	6065      	str	r5, [r4, #4]
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8022f3c:	2b00      	cmp	r3, #0
 8022f3e:	d0ea      	beq.n	8022f16 <ip4_reass+0x2ee>
 8022f40:	7fa3      	ldrb	r3, [r4, #30]
 8022f42:	07da      	lsls	r2, r3, #31
 8022f44:	f57f af64 	bpl.w	8022e10 <ip4_reass+0x1e8>
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8022f48:	6863      	ldr	r3, [r4, #4]
 8022f4a:	2b00      	cmp	r3, #0
 8022f4c:	d0c3      	beq.n	8022ed6 <ip4_reass+0x2ae>
 8022f4e:	e7d5      	b.n	8022efc <ip4_reass+0x2d4>
 8022f50:	08045330 	.word	0x08045330
 8022f54:	08045448 	.word	0x08045448
 8022f58:	08029a64 	.word	0x08029a64
 8022f5c:	080453b8 	.word	0x080453b8
 8022f60:	2002e73c 	.word	0x2002e73c
 8022f64:	2002e740 	.word	0x2002e740
        q = iprh->next_pbuf;
 8022f68:	f8db 3000 	ldr.w	r3, [fp]
        while (q != NULL) {
 8022f6c:	b153      	cbz	r3, 8022f84 <ip4_reass+0x35c>
 8022f6e:	9a02      	ldr	r2, [sp, #8]
          iprh = (struct ip_reass_helper *)q->payload;
 8022f70:	4610      	mov	r0, r2
 8022f72:	685a      	ldr	r2, [r3, #4]
          if (iprh_prev->end != iprh->start) {
 8022f74:	88c0      	ldrh	r0, [r0, #6]
 8022f76:	8893      	ldrh	r3, [r2, #4]
 8022f78:	4298      	cmp	r0, r3
 8022f7a:	d1c3      	bne.n	8022f04 <ip4_reass+0x2dc>
          q = iprh->next_pbuf;
 8022f7c:	6813      	ldr	r3, [r2, #0]
        while (q != NULL) {
 8022f7e:	2b00      	cmp	r3, #0
 8022f80:	d1f6      	bne.n	8022f70 <ip4_reass+0x348>
 8022f82:	9202      	str	r2, [sp, #8]
          LWIP_ASSERT("sanity check",
 8022f84:	9b02      	ldr	r3, [sp, #8]
 8022f86:	428b      	cmp	r3, r1
 8022f88:	d110      	bne.n	8022fac <ip4_reass+0x384>
 8022f8a:	4b40      	ldr	r3, [pc, #256]	; (802308c <ip4_reass+0x464>)
 8022f8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022f90:	493f      	ldr	r1, [pc, #252]	; (8023090 <ip4_reass+0x468>)
 8022f92:	4840      	ldr	r0, [pc, #256]	; (8023094 <ip4_reass+0x46c>)
 8022f94:	f001 ff5e 	bl	8024e54 <iprintf>
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8022f98:	9b02      	ldr	r3, [sp, #8]
 8022f9a:	681b      	ldr	r3, [r3, #0]
 8022f9c:	b133      	cbz	r3, 8022fac <ip4_reass+0x384>
 8022f9e:	4b3b      	ldr	r3, [pc, #236]	; (802308c <ip4_reass+0x464>)
 8022fa0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8022fa4:	493c      	ldr	r1, [pc, #240]	; (8023098 <ip4_reass+0x470>)
 8022fa6:	483b      	ldr	r0, [pc, #236]	; (8023094 <ip4_reass+0x46c>)
 8022fa8:	f001 ff54 	bl	8024e54 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022fac:	f8b8 3000 	ldrh.w	r3, [r8]
 8022fb0:	441f      	add	r7, r3
  if (is_last) {
 8022fb2:	9b01      	ldr	r3, [sp, #4]
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8022fb4:	f8a8 7000 	strh.w	r7, [r8]
  if (is_last) {
 8022fb8:	2b00      	cmp	r3, #0
 8022fba:	d15b      	bne.n	8023074 <ip4_reass+0x44c>
    u16_t datagram_len = (u16_t)(offset + len);
 8022fbc:	9800      	ldr	r0, [sp, #0]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022fbe:	7fa3      	ldrb	r3, [r4, #30]
    u16_t datagram_len = (u16_t)(offset + len);
 8022fc0:	4430      	add	r0, r6
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022fc2:	f043 0301 	orr.w	r3, r3, #1
    u16_t datagram_len = (u16_t)(offset + len);
 8022fc6:	b280      	uxth	r0, r0
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022fc8:	77a3      	strb	r3, [r4, #30]
    ipr->datagram_len = datagram_len;
 8022fca:	83a0      	strh	r0, [r4, #28]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022fcc:	6863      	ldr	r3, [r4, #4]
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022fce:	3014      	adds	r0, #20
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022fd0:	68e5      	ldr	r5, [r4, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022fd2:	685e      	ldr	r6, [r3, #4]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022fd4:	b280      	uxth	r0, r0
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022fd6:	68a3      	ldr	r3, [r4, #8]
 8022fd8:	6921      	ldr	r1, [r4, #16]
 8022fda:	6962      	ldr	r2, [r4, #20]
 8022fdc:	6075      	str	r5, [r6, #4]
 8022fde:	60b1      	str	r1, [r6, #8]
 8022fe0:	60f2      	str	r2, [r6, #12]
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8022fe2:	6835      	ldr	r5, [r6, #0]
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8022fe4:	6033      	str	r3, [r6, #0]
 8022fe6:	69a3      	ldr	r3, [r4, #24]
 8022fe8:	6133      	str	r3, [r6, #16]
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022fea:	f7f5 fe35 	bl	8018c58 <lwip_htons>
    IPH_OFFSET_SET(fraghdr, 0);
 8022fee:	2300      	movs	r3, #0
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8022ff0:	8070      	strh	r0, [r6, #2]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8022ff2:	2114      	movs	r1, #20
 8022ff4:	4630      	mov	r0, r6
    IPH_OFFSET_SET(fraghdr, 0);
 8022ff6:	71b3      	strb	r3, [r6, #6]
 8022ff8:	71f3      	strb	r3, [r6, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8022ffa:	72b3      	strb	r3, [r6, #10]
 8022ffc:	72f3      	strb	r3, [r6, #11]
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
 8022ffe:	f7f6 fbd3 	bl	80197a8 <inet_chksum>
 8023002:	8170      	strh	r0, [r6, #10]
    p = ipr->p;
 8023004:	6866      	ldr	r6, [r4, #4]
    while (r != NULL) {
 8023006:	b15d      	cbz	r5, 8023020 <ip4_reass+0x3f8>
      iprh = (struct ip_reass_helper *)r->payload;
 8023008:	686f      	ldr	r7, [r5, #4]
      pbuf_remove_header(r, IP_HLEN);
 802300a:	4628      	mov	r0, r5
 802300c:	2114      	movs	r1, #20
 802300e:	f7f7 fdd3 	bl	801abb8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8023012:	4629      	mov	r1, r5
 8023014:	4630      	mov	r0, r6
 8023016:	f7f7 fe8d 	bl	801ad34 <pbuf_cat>
      r = iprh->next_pbuf;
 802301a:	683d      	ldr	r5, [r7, #0]
    while (r != NULL) {
 802301c:	2d00      	cmp	r5, #0
 802301e:	d1f3      	bne.n	8023008 <ip4_reass+0x3e0>
    if (ipr == reassdatagrams) {
 8023020:	f8d9 5000 	ldr.w	r5, [r9]
 8023024:	42a5      	cmp	r5, r4
 8023026:	d005      	beq.n	8023034 <ip4_reass+0x40c>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8023028:	b335      	cbz	r5, 8023078 <ip4_reass+0x450>
        if (ipr_prev->next == ipr) {
 802302a:	682b      	ldr	r3, [r5, #0]
 802302c:	42a3      	cmp	r3, r4
 802302e:	d014      	beq.n	802305a <ip4_reass+0x432>
 8023030:	461d      	mov	r5, r3
 8023032:	e7f9      	b.n	8023028 <ip4_reass+0x400>
    reassdatagrams = ipr->next;
 8023034:	6823      	ldr	r3, [r4, #0]
 8023036:	f8c9 3000 	str.w	r3, [r9]
  memp_free(MEMP_REASSDATA, ipr);
 802303a:	4621      	mov	r1, r4
 802303c:	2005      	movs	r0, #5
 802303e:	f7f7 f92f 	bl	801a2a0 <memp_free>
    clen = pbuf_clen(p);
 8023042:	4630      	mov	r0, r6
 8023044:	f7f7 fe58 	bl	801acf8 <pbuf_clen>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023048:	f8b8 3000 	ldrh.w	r3, [r8]
    clen = pbuf_clen(p);
 802304c:	4604      	mov	r4, r0
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802304e:	4283      	cmp	r3, r0
 8023050:	d306      	bcc.n	8023060 <ip4_reass+0x438>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8023052:	1b1b      	subs	r3, r3, r4
 8023054:	f8a8 3000 	strh.w	r3, [r8]
    return p;
 8023058:	e680      	b.n	8022d5c <ip4_reass+0x134>
    prev->next = ipr->next;
 802305a:	6823      	ldr	r3, [r4, #0]
 802305c:	602b      	str	r3, [r5, #0]
 802305e:	e7ec      	b.n	802303a <ip4_reass+0x412>
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8023060:	4b0a      	ldr	r3, [pc, #40]	; (802308c <ip4_reass+0x464>)
 8023062:	f240 229b 	movw	r2, #667	; 0x29b
 8023066:	490d      	ldr	r1, [pc, #52]	; (802309c <ip4_reass+0x474>)
 8023068:	480a      	ldr	r0, [pc, #40]	; (8023094 <ip4_reass+0x46c>)
 802306a:	f001 fef3 	bl	8024e54 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 802306e:	f8b8 3000 	ldrh.w	r3, [r8]
 8023072:	e7ee      	b.n	8023052 <ip4_reass+0x42a>
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8023074:	8ba0      	ldrh	r0, [r4, #28]
 8023076:	e7a9      	b.n	8022fcc <ip4_reass+0x3a4>
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8023078:	4b04      	ldr	r3, [pc, #16]	; (802308c <ip4_reass+0x464>)
 802307a:	f240 1245 	movw	r2, #325	; 0x145
 802307e:	4908      	ldr	r1, [pc, #32]	; (80230a0 <ip4_reass+0x478>)
 8023080:	4804      	ldr	r0, [pc, #16]	; (8023094 <ip4_reass+0x46c>)
 8023082:	f001 fee7 	bl	8024e54 <iprintf>
    prev->next = ipr->next;
 8023086:	6823      	ldr	r3, [r4, #0]
 8023088:	602b      	str	r3, [r5, #0]
 802308a:	deff      	udf	#255	; 0xff
 802308c:	08045330 	.word	0x08045330
 8023090:	080453f8 	.word	0x080453f8
 8023094:	08029a64 	.word	0x08029a64
 8023098:	08045408 	.word	0x08045408
 802309c:	0804542c 	.word	0x0804542c
 80230a0:	080453b8 	.word	0x080453b8

080230a4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80230a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  u16_t newpbuflen = 0;
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80230a8:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
{
 80230aa:	b08f      	sub	sp, #60	; 0x3c
 80230ac:	4605      	mov	r5, r0
 80230ae:	920c      	str	r2, [sp, #48]	; 0x30
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80230b0:	f1b3 0214 	subs.w	r2, r3, #20
{
 80230b4:	9109      	str	r1, [sp, #36]	; 0x24
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80230b6:	bf48      	it	mi
 80230b8:	f1a3 020d 	submi.w	r2, r3, #13
  int last;
  u16_t poff = IP_HLEN;
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80230bc:	6843      	ldr	r3, [r0, #4]
 80230be:	9304      	str	r3, [sp, #16]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80230c0:	f3c2 02cf 	ubfx	r2, r2, #3, #16
  iphdr = original_iphdr;
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80230c4:	781b      	ldrb	r3, [r3, #0]
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80230c6:	9208      	str	r2, [sp, #32]
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80230c8:	f003 030f 	and.w	r3, r3, #15
 80230cc:	2b05      	cmp	r3, #5
 80230ce:	ea4f 0683 	mov.w	r6, r3, lsl #2
 80230d2:	f040 80ea 	bne.w	80232aa <ip4_frag+0x206>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80230d6:	8943      	ldrh	r3, [r0, #10]
 80230d8:	2b13      	cmp	r3, #19
 80230da:	f240 80e9 	bls.w	80232b0 <ip4_frag+0x20c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80230de:	9b04      	ldr	r3, [sp, #16]
 80230e0:	88d8      	ldrh	r0, [r3, #6]
 80230e2:	f7f5 fdb9 	bl	8018c58 <lwip_htons>
  ofo = tmp & IP_OFFMASK;
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;

  left = (u16_t)(p->tot_len - IP_HLEN);
 80230e6:	892b      	ldrh	r3, [r5, #8]
  ofo = tmp & IP_OFFMASK;
 80230e8:	f3c0 020c 	ubfx	r2, r0, #0, #13
  left = (u16_t)(p->tot_len - IP_HLEN);
 80230ec:	3b14      	subs	r3, #20
  ofo = tmp & IP_OFFMASK;
 80230ee:	9207      	str	r2, [sp, #28]
  mf_set = tmp & IP_MF;
 80230f0:	f400 5200 	and.w	r2, r0, #8192	; 0x2000
  left = (u16_t)(p->tot_len - IP_HLEN);
 80230f4:	b29b      	uxth	r3, r3
 80230f6:	920d      	str	r2, [sp, #52]	; 0x34
 80230f8:	9305      	str	r3, [sp, #20]

  while (left) {
 80230fa:	2b00      	cmp	r3, #0
 80230fc:	f000 809d 	beq.w	802323a <ip4_frag+0x196>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023100:	9b08      	ldr	r3, [sp, #32]
  u16_t newpbuflen = 0;
 8023102:	2400      	movs	r4, #0
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
    if (rambuf == NULL) {
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023104:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 80232d0 <ip4_frag+0x22c>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023108:	00db      	lsls	r3, r3, #3
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802310a:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 80232d8 <ip4_frag+0x234>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802310e:	b29b      	uxth	r3, r3
 8023110:	930a      	str	r3, [sp, #40]	; 0x28
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8023112:	f44f 7220 	mov.w	r2, #640	; 0x280
 8023116:	2114      	movs	r1, #20
 8023118:	200e      	movs	r0, #14
 802311a:	f7f7 fc07 	bl	801a92c <pbuf_alloc>
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802311e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8023120:	9a05      	ldr	r2, [sp, #20]
    if (rambuf == NULL) {
 8023122:	9003      	str	r0, [sp, #12]
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8023124:	4293      	cmp	r3, r2
 8023126:	bf28      	it	cs
 8023128:	4613      	movcs	r3, r2
 802312a:	9306      	str	r3, [sp, #24]
    if (rambuf == NULL) {
 802312c:	2800      	cmp	r0, #0
 802312e:	f000 80b9 	beq.w	80232a4 <ip4_frag+0x200>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8023132:	8943      	ldrh	r3, [r0, #10]
 8023134:	2b13      	cmp	r3, #19
 8023136:	f240 8091 	bls.w	802325c <ip4_frag+0x1b8>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 802313a:	9904      	ldr	r1, [sp, #16]
 802313c:	9b03      	ldr	r3, [sp, #12]
 802313e:	680a      	ldr	r2, [r1, #0]
 8023140:	685b      	ldr	r3, [r3, #4]
 8023142:	684f      	ldr	r7, [r1, #4]
 8023144:	6888      	ldr	r0, [r1, #8]
 8023146:	68c9      	ldr	r1, [r1, #12]
 8023148:	605f      	str	r7, [r3, #4]
 802314a:	60d9      	str	r1, [r3, #12]
 802314c:	9904      	ldr	r1, [sp, #16]
 802314e:	601a      	str	r2, [r3, #0]
 8023150:	6098      	str	r0, [r3, #8]
 8023152:	690a      	ldr	r2, [r1, #16]
 8023154:	611a      	str	r2, [r3, #16]
    iphdr = (struct ip_hdr *)rambuf->payload;
 8023156:	9b03      	ldr	r3, [sp, #12]
 8023158:	685b      	ldr	r3, [r3, #4]
 802315a:	930b      	str	r3, [sp, #44]	; 0x2c

    left_to_copy = fragsize;
    while (left_to_copy) {
 802315c:	9b06      	ldr	r3, [sp, #24]
 802315e:	2b00      	cmp	r3, #0
 8023160:	d034      	beq.n	80231cc <ip4_frag+0x128>
 8023162:	4699      	mov	r9, r3
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8023164:	896b      	ldrh	r3, [r5, #10]
 8023166:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023168:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 802316a:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802316c:	d36e      	bcc.n	802324c <ip4_frag+0x1a8>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 802316e:	454c      	cmp	r4, r9
 8023170:	bf28      	it	cs
 8023172:	464c      	movcs	r4, r9
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8023174:	2c00      	cmp	r4, #0
 8023176:	d062      	beq.n	802323e <ip4_frag+0x19a>
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8023178:	4641      	mov	r1, r8
 802317a:	f240 22bd 	movw	r2, #701	; 0x2bd
 802317e:	2006      	movs	r0, #6
 8023180:	f7f7 f858 	bl	801a234 <memp_malloc_fn>
 8023184:	4683      	mov	fp, r0
      if (pcr == NULL) {
        pbuf_free(rambuf);
        goto memerr;
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023186:	2241      	movs	r2, #65	; 0x41
 8023188:	4621      	mov	r1, r4
 802318a:	2000      	movs	r0, #0
      if (pcr == NULL) {
 802318c:	f1bb 0f00 	cmp.w	fp, #0
 8023190:	d06f      	beq.n	8023272 <ip4_frag+0x1ce>
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8023192:	9401      	str	r4, [sp, #4]
 8023194:	465b      	mov	r3, fp
 8023196:	686f      	ldr	r7, [r5, #4]
 8023198:	4437      	add	r7, r6
 802319a:	9700      	str	r7, [sp, #0]
 802319c:	f7f7 fc64 	bl	801aa68 <pbuf_alloced_custom>
 80231a0:	4607      	mov	r7, r0
      if (newpbuf == NULL) {
        ip_frag_free_pbuf_custom_ref(pcr);
        pbuf_free(rambuf);
        goto memerr;
      }
      pbuf_ref(p);
 80231a2:	4628      	mov	r0, r5
      if (newpbuf == NULL) {
 80231a4:	2f00      	cmp	r7, #0
 80231a6:	d06e      	beq.n	8023286 <ip4_frag+0x1e2>

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80231a8:	eba9 0904 	sub.w	r9, r9, r4
      pbuf_ref(p);
 80231ac:	f7f7 fdae 	bl	801ad0c <pbuf_ref>
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80231b0:	4a44      	ldr	r2, [pc, #272]	; (80232c4 <ip4_frag+0x220>)
      pbuf_cat(rambuf, newpbuf);
 80231b2:	4639      	mov	r1, r7
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80231b4:	fa1f f989 	uxth.w	r9, r9
      pbuf_cat(rambuf, newpbuf);
 80231b8:	9803      	ldr	r0, [sp, #12]
      pcr->original = p;
 80231ba:	f8cb 5014 	str.w	r5, [fp, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80231be:	f8cb 2010 	str.w	r2, [fp, #16]
      pbuf_cat(rambuf, newpbuf);
 80231c2:	f7f7 fdb7 	bl	801ad34 <pbuf_cat>
      if (left_to_copy) {
 80231c6:	f1b9 0f00 	cmp.w	r9, #0
 80231ca:	d138      	bne.n	802323e <ip4_frag+0x19a>
    }
    poff = (u16_t)(poff + newpbuflen);
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80231cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
    poff = (u16_t)(poff + newpbuflen);
 80231ce:	4426      	add	r6, r4

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80231d0:	9a07      	ldr	r2, [sp, #28]
    last = (left <= netif->mtu - IP_HLEN);
 80231d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    poff = (u16_t)(poff + newpbuflen);
 80231d4:	b2b6      	uxth	r6, r6
    tmp = (IP_OFFMASK & (ofo));
 80231d6:	f3c2 000c 	ubfx	r0, r2, #0, #13
    if (!last || mf_set) {
 80231da:	9a05      	ldr	r2, [sp, #20]
    last = (left <= netif->mtu - IP_HLEN);
 80231dc:	3b13      	subs	r3, #19
    if (!last || mf_set) {
 80231de:	4293      	cmp	r3, r2
 80231e0:	dd44      	ble.n	802326c <ip4_frag+0x1c8>
 80231e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80231e4:	2b00      	cmp	r3, #0
 80231e6:	d141      	bne.n	802326c <ip4_frag+0x1c8>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80231e8:	f7f5 fd36 	bl	8018c58 <lwip_htons>
 80231ec:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80231ee:	9b06      	ldr	r3, [sp, #24]
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80231f0:	80f8      	strh	r0, [r7, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80231f2:	f103 0014 	add.w	r0, r3, #20
 80231f6:	b280      	uxth	r0, r0
 80231f8:	f7f5 fd2e 	bl	8018c58 <lwip_htons>
    IPH_CHKSUM_SET(iphdr, 0);
 80231fc:	2300      	movs	r3, #0
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80231fe:	8078      	strh	r0, [r7, #2]
#if CHECKSUM_GEN_IP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023200:	2114      	movs	r1, #20
    IPH_CHKSUM_SET(iphdr, 0);
 8023202:	72bb      	strb	r3, [r7, #10]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023204:	4638      	mov	r0, r7
    IPH_CHKSUM_SET(iphdr, 0);
 8023206:	72fb      	strb	r3, [r7, #11]
      IPH_CHKSUM_SET(iphdr, inet_chksum(iphdr, IP_HLEN));
 8023208:	f7f6 face 	bl	80197a8 <inet_chksum>
 802320c:	8178      	strh	r0, [r7, #10]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 802320e:	9f03      	ldr	r7, [sp, #12]
 8023210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023212:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8023214:	4639      	mov	r1, r7
 8023216:	6943      	ldr	r3, [r0, #20]
 8023218:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 802321a:	4638      	mov	r0, r7
 802321c:	f7f7 fd58 	bl	801acd0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8023220:	e9dd 2305 	ldrd	r2, r3, [sp, #20]
 8023224:	1ad3      	subs	r3, r2, r3
    ofo = (u16_t)(ofo + nfb);
 8023226:	e9dd 2107 	ldrd	r2, r1, [sp, #28]
    left = (u16_t)(left - fragsize);
 802322a:	b29b      	uxth	r3, r3
    ofo = (u16_t)(ofo + nfb);
 802322c:	440a      	add	r2, r1
    left = (u16_t)(left - fragsize);
 802322e:	9305      	str	r3, [sp, #20]
    ofo = (u16_t)(ofo + nfb);
 8023230:	b292      	uxth	r2, r2
 8023232:	9207      	str	r2, [sp, #28]
  while (left) {
 8023234:	2b00      	cmp	r3, #0
 8023236:	f47f af6c 	bne.w	8023112 <ip4_frag+0x6e>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 802323a:	2000      	movs	r0, #0
 802323c:	e020      	b.n	8023280 <ip4_frag+0x1dc>
        p = p->next;
 802323e:	682d      	ldr	r5, [r5, #0]
  u16_t newpbuflen = 0;
 8023240:	2600      	movs	r6, #0
      u16_t plen = (u16_t)(p->len - poff);
 8023242:	896b      	ldrh	r3, [r5, #10]
 8023244:	1b9c      	subs	r4, r3, r6
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8023246:	42b3      	cmp	r3, r6
      u16_t plen = (u16_t)(p->len - poff);
 8023248:	b2a4      	uxth	r4, r4
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802324a:	d290      	bcs.n	802316e <ip4_frag+0xca>
 802324c:	4643      	mov	r3, r8
 802324e:	f240 322d 	movw	r2, #813	; 0x32d
 8023252:	491d      	ldr	r1, [pc, #116]	; (80232c8 <ip4_frag+0x224>)
 8023254:	4650      	mov	r0, sl
 8023256:	f001 fdfd 	bl	8024e54 <iprintf>
 802325a:	e788      	b.n	802316e <ip4_frag+0xca>
    LWIP_ASSERT("this needs a pbuf in one piece!",
 802325c:	4643      	mov	r3, r8
 802325e:	f44f 7249 	mov.w	r2, #804	; 0x324
 8023262:	491a      	ldr	r1, [pc, #104]	; (80232cc <ip4_frag+0x228>)
 8023264:	4650      	mov	r0, sl
 8023266:	f001 fdf5 	bl	8024e54 <iprintf>
 802326a:	e766      	b.n	802313a <ip4_frag+0x96>
      tmp = tmp | IP_MF;
 802326c:	f440 5000 	orr.w	r0, r0, #8192	; 0x2000
 8023270:	e7ba      	b.n	80231e8 <ip4_frag+0x144>
        pbuf_free(rambuf);
 8023272:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8023276:	4658      	mov	r0, fp
 8023278:	f7f7 fd2a 	bl	801acd0 <pbuf_free>
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802327c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8023280:	b00f      	add	sp, #60	; 0x3c
 8023282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  memp_free(MEMP_FRAG_PBUF, p);
 8023286:	46d9      	mov	r9, fp
 8023288:	f8dd b00c 	ldr.w	fp, [sp, #12]
 802328c:	2006      	movs	r0, #6
 802328e:	4649      	mov	r1, r9
 8023290:	f7f7 f806 	bl	801a2a0 <memp_free>
        pbuf_free(rambuf);
 8023294:	4658      	mov	r0, fp
 8023296:	f7f7 fd1b 	bl	801acd0 <pbuf_free>
  return ERR_MEM;
 802329a:	f04f 30ff 	mov.w	r0, #4294967295
}
 802329e:	b00f      	add	sp, #60	; 0x3c
 80232a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return ERR_MEM;
 80232a4:	f04f 30ff 	mov.w	r0, #4294967295
 80232a8:	e7ea      	b.n	8023280 <ip4_frag+0x1dc>
    return ERR_VAL;
 80232aa:	f06f 0005 	mvn.w	r0, #5
 80232ae:	e7e7      	b.n	8023280 <ip4_frag+0x1dc>
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80232b0:	4b07      	ldr	r3, [pc, #28]	; (80232d0 <ip4_frag+0x22c>)
 80232b2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80232b6:	4907      	ldr	r1, [pc, #28]	; (80232d4 <ip4_frag+0x230>)
 80232b8:	4807      	ldr	r0, [pc, #28]	; (80232d8 <ip4_frag+0x234>)
 80232ba:	f001 fdcb 	bl	8024e54 <iprintf>
 80232be:	f06f 0005 	mvn.w	r0, #5
 80232c2:	e7dd      	b.n	8023280 <ip4_frag+0x1dc>
 80232c4:	08022a11 	.word	0x08022a11
 80232c8:	080454a4 	.word	0x080454a4
 80232cc:	08045484 	.word	0x08045484
 80232d0:	08045330 	.word	0x08045330
 80232d4:	08045468 	.word	0x08045468
 80232d8:	08029a64 	.word	0x08029a64

080232dc <ethernet_input>:
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80232dc:	8943      	ldrh	r3, [r0, #10]
 80232de:	2b0e      	cmp	r3, #14
{
 80232e0:	b570      	push	{r4, r5, r6, lr}
 80232e2:	4604      	mov	r4, r0
  if (p->len <= SIZEOF_ETH_HDR) {
 80232e4:	d91b      	bls.n	802331e <ethernet_input+0x42>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80232e6:	7bc3      	ldrb	r3, [r0, #15]
 80232e8:	460d      	mov	r5, r1
 80232ea:	b91b      	cbnz	r3, 80232f4 <ethernet_input+0x18>
    p->if_idx = netif_get_index(netif);
 80232ec:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
 80232f0:	3301      	adds	r3, #1
 80232f2:	73c3      	strb	r3, [r0, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80232f4:	6860      	ldr	r0, [r4, #4]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80232f6:	7803      	ldrb	r3, [r0, #0]
  type = ethhdr->type;
 80232f8:	8986      	ldrh	r6, [r0, #12]
  if (ethhdr->dest.addr[0] & 1) {
 80232fa:	07d9      	lsls	r1, r3, #31
 80232fc:	d50a      	bpl.n	8023314 <ethernet_input+0x38>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80232fe:	2b01      	cmp	r3, #1
 8023300:	d030      	beq.n	8023364 <ethernet_input+0x88>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8023302:	2206      	movs	r2, #6
 8023304:	491d      	ldr	r1, [pc, #116]	; (802337c <ethernet_input+0xa0>)
 8023306:	f000 fdcf 	bl	8023ea8 <memcmp>
 802330a:	b918      	cbnz	r0, 8023314 <ethernet_input+0x38>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 802330c:	7b63      	ldrb	r3, [r4, #13]
 802330e:	f043 0308 	orr.w	r3, r3, #8
 8023312:	7363      	strb	r3, [r4, #13]
    }
  }

  switch (type) {
 8023314:	2e08      	cmp	r6, #8
 8023316:	d016      	beq.n	8023346 <ethernet_input+0x6a>
 8023318:	f5b6 6fc1 	cmp.w	r6, #1544	; 0x608
 802331c:	d004      	beq.n	8023328 <ethernet_input+0x4c>
  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;

free_and_return:
  pbuf_free(p);
 802331e:	4620      	mov	r0, r4
 8023320:	f7f7 fcd6 	bl	801acd0 <pbuf_free>
  return ERR_OK;
}
 8023324:	2000      	movs	r0, #0
 8023326:	bd70      	pop	{r4, r5, r6, pc}
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023328:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802332c:	071b      	lsls	r3, r3, #28
 802332e:	d5f6      	bpl.n	802331e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8023330:	210e      	movs	r1, #14
 8023332:	4620      	mov	r0, r4
 8023334:	f7f7 fc40 	bl	801abb8 <pbuf_remove_header>
 8023338:	2800      	cmp	r0, #0
 802333a:	d1f0      	bne.n	802331e <ethernet_input+0x42>
        etharp_input(p, netif);
 802333c:	4629      	mov	r1, r5
 802333e:	4620      	mov	r0, r4
 8023340:	f7fe fd2e 	bl	8021da0 <etharp_input>
      break;
 8023344:	e7ee      	b.n	8023324 <ethernet_input+0x48>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8023346:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
 802334a:	071a      	lsls	r2, r3, #28
 802334c:	d5e7      	bpl.n	802331e <ethernet_input+0x42>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802334e:	210e      	movs	r1, #14
 8023350:	4620      	mov	r0, r4
 8023352:	f7f7 fc31 	bl	801abb8 <pbuf_remove_header>
 8023356:	2800      	cmp	r0, #0
 8023358:	d1e1      	bne.n	802331e <ethernet_input+0x42>
        ip4_input(p, netif);
 802335a:	4629      	mov	r1, r5
 802335c:	4620      	mov	r0, r4
 802335e:	f7ff f8eb 	bl	8022538 <ip4_input>
      break;
 8023362:	e7df      	b.n	8023324 <ethernet_input+0x48>
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8023364:	7843      	ldrb	r3, [r0, #1]
 8023366:	2b00      	cmp	r3, #0
 8023368:	d1d4      	bne.n	8023314 <ethernet_input+0x38>
 802336a:	7883      	ldrb	r3, [r0, #2]
 802336c:	2b5e      	cmp	r3, #94	; 0x5e
 802336e:	d1d1      	bne.n	8023314 <ethernet_input+0x38>
        p->flags |= PBUF_FLAG_LLMCAST;
 8023370:	7b63      	ldrb	r3, [r4, #13]
 8023372:	f043 0310 	orr.w	r3, r3, #16
 8023376:	7363      	strb	r3, [r4, #13]
 8023378:	e7cc      	b.n	8023314 <ethernet_input+0x38>
 802337a:	bf00      	nop
 802337c:	08045520 	.word	0x08045520

08023380 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8023380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023384:	460c      	mov	r4, r1
 8023386:	4605      	mov	r5, r0
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8023388:	f8bd 0018 	ldrh.w	r0, [sp, #24]
                u16_t eth_type) {
 802338c:	4616      	mov	r6, r2
 802338e:	461f      	mov	r7, r3
  u16_t eth_type_be = lwip_htons(eth_type);
 8023390:	f7f5 fc62 	bl	8018c58 <lwip_htons>

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023394:	210e      	movs	r1, #14
  u16_t eth_type_be = lwip_htons(eth_type);
 8023396:	4680      	mov	r8, r0
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8023398:	4620      	mov	r0, r4
 802339a:	f7f7 fbd9 	bl	801ab50 <pbuf_add_header>
 802339e:	b9e0      	cbnz	r0, 80233da <ethernet_output+0x5a>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 80233a0:	6861      	ldr	r1, [r4, #4]
  ethhdr->type = eth_type_be;
 80233a2:	f8a1 800c 	strh.w	r8, [r1, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 80233a6:	683b      	ldr	r3, [r7, #0]
 80233a8:	600b      	str	r3, [r1, #0]
 80233aa:	88bb      	ldrh	r3, [r7, #4]
 80233ac:	808b      	strh	r3, [r1, #4]
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 80233ae:	6833      	ldr	r3, [r6, #0]
 80233b0:	f8c1 3006 	str.w	r3, [r1, #6]
 80233b4:	88b3      	ldrh	r3, [r6, #4]
 80233b6:	814b      	strh	r3, [r1, #10]

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80233b8:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 80233bc:	2b06      	cmp	r3, #6
 80233be:	d006      	beq.n	80233ce <ethernet_output+0x4e>
 80233c0:	4b08      	ldr	r3, [pc, #32]	; (80233e4 <ethernet_output+0x64>)
 80233c2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80233c6:	4908      	ldr	r1, [pc, #32]	; (80233e8 <ethernet_output+0x68>)
 80233c8:	4808      	ldr	r0, [pc, #32]	; (80233ec <ethernet_output+0x6c>)
 80233ca:	f001 fd43 	bl	8024e54 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80233ce:	69ab      	ldr	r3, [r5, #24]
 80233d0:	4621      	mov	r1, r4
 80233d2:	4628      	mov	r0, r5
pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
}
 80233d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return netif->linkoutput(netif, p);
 80233d8:	4718      	bx	r3
}
 80233da:	f06f 0001 	mvn.w	r0, #1
 80233de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80233e2:	bf00      	nop
 80233e4:	080454b4 	.word	0x080454b4
 80233e8:	080454ec 	.word	0x080454ec
 80233ec:	08029a64 	.word	0x08029a64

080233f0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80233f0:	b530      	push	{r4, r5, lr}
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80233f2:	2300      	movs	r3, #0
{
 80233f4:	b085      	sub	sp, #20
 80233f6:	460d      	mov	r5, r1
  osMessageQDef(QUEUE, size, void *);
 80233f8:	2204      	movs	r2, #4
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80233fa:	4619      	mov	r1, r3
{
 80233fc:	4604      	mov	r4, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80233fe:	4668      	mov	r0, sp
  osMessageQDef(QUEUE, size, void *);
 8023400:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8023404:	e9cd 5200 	strd	r5, r2, [sp]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023408:	f7f1 fe8e 	bl	8015128 <osMessageCreate>
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 802340c:	fab0 f380 	clz	r3, r0
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8023410:	6020      	str	r0, [r4, #0]
  if(*mbox == NULL)
 8023412:	095b      	lsrs	r3, r3, #5
    return ERR_MEM;

  return ERR_OK;
}
 8023414:	4258      	negs	r0, r3
 8023416:	b005      	add	sp, #20
 8023418:	bd30      	pop	{r4, r5, pc}
 802341a:	bf00      	nop

0802341c <sys_mbox_trypost>:
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 802341c:	2200      	movs	r2, #0
 802341e:	6800      	ldr	r0, [r0, #0]
{
 8023420:	b508      	push	{r3, lr}
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8023422:	f7f1 fe95 	bl	8015150 <osMessagePut>
 8023426:	3800      	subs	r0, #0
 8023428:	bf18      	it	ne
 802342a:	2001      	movne	r0, #1
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
}
 802342c:	4240      	negs	r0, r0
 802342e:	bd08      	pop	{r3, pc}

08023430 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8023430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8023432:	4614      	mov	r4, r2
 8023434:	b085      	sub	sp, #20
 8023436:	4605      	mov	r5, r0
 8023438:	460f      	mov	r7, r1
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 802343a:	f7f1 fd3b 	bl	8014eb4 <osKernelSysTick>
 802343e:	4606      	mov	r6, r0
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8023440:	b15c      	cbz	r4, 802345a <sys_arch_mbox_fetch+0x2a>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8023442:	4622      	mov	r2, r4
 8023444:	6829      	ldr	r1, [r5, #0]
 8023446:	a801      	add	r0, sp, #4
 8023448:	f7f1 feae 	bl	80151a8 <osMessageGet>

    if(event.status == osEventMessage)
 802344c:	9b01      	ldr	r3, [sp, #4]
 802344e:	2b10      	cmp	r3, #16
 8023450:	d009      	beq.n	8023466 <sys_arch_mbox_fetch+0x36>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8023452:	f04f 30ff 	mov.w	r0, #4294967295
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8023456:	b005      	add	sp, #20
 8023458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    event = osMessageGet (*mbox, osWaitForever);
 802345a:	f04f 32ff 	mov.w	r2, #4294967295
 802345e:	6829      	ldr	r1, [r5, #0]
 8023460:	a801      	add	r0, sp, #4
 8023462:	f7f1 fea1 	bl	80151a8 <osMessageGet>
    *msg = (void *)event.value.v;
 8023466:	9b02      	ldr	r3, [sp, #8]
 8023468:	603b      	str	r3, [r7, #0]
    return (osKernelSysTick() - starttime);
 802346a:	f7f1 fd23 	bl	8014eb4 <osKernelSysTick>
 802346e:	1b80      	subs	r0, r0, r6
}
 8023470:	b005      	add	sp, #20
 8023472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08023474 <sys_mbox_valid>:
 8023474:	6800      	ldr	r0, [r0, #0]
 8023476:	3800      	subs	r0, #0
 8023478:	bf18      	it	ne
 802347a:	2001      	movne	r0, #1
 802347c:	4770      	bx	lr
 802347e:	bf00      	nop

08023480 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8023480:	b508      	push	{r3, lr}
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8023482:	4803      	ldr	r0, [pc, #12]	; (8023490 <sys_init+0x10>)
 8023484:	f7f1 fd7a 	bl	8014f7c <osMutexCreate>
 8023488:	4b02      	ldr	r3, [pc, #8]	; (8023494 <sys_init+0x14>)
 802348a:	6018      	str	r0, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 802348c:	bd08      	pop	{r3, pc}
 802348e:	bf00      	nop
 8023490:	08045530 	.word	0x08045530
 8023494:	2002e744 	.word	0x2002e744

08023498 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8023498:	b510      	push	{r4, lr}
 802349a:	b082      	sub	sp, #8

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 802349c:	2300      	movs	r3, #0
err_t sys_mutex_new(sys_mutex_t *mutex) {
 802349e:	4604      	mov	r4, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80234a0:	4668      	mov	r0, sp
  osMutexDef(MUTEX);
 80234a2:	e9cd 3300 	strd	r3, r3, [sp]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80234a6:	f7f1 fd69 	bl	8014f7c <osMutexCreate>
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80234aa:	fab0 f380 	clz	r3, r0
  *mutex = osMutexCreate(osMutex(MUTEX));
 80234ae:	6020      	str	r0, [r4, #0]
  if(*mutex == NULL)
 80234b0:	095b      	lsrs	r3, r3, #5
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
}
 80234b2:	4258      	negs	r0, r3
 80234b4:	b002      	add	sp, #8
 80234b6:	bd10      	pop	{r4, pc}

080234b8 <sys_mutex_lock>:
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80234b8:	f04f 31ff 	mov.w	r1, #4294967295
 80234bc:	6800      	ldr	r0, [r0, #0]
 80234be:	f7f1 bd65 	b.w	8014f8c <osMutexWait>
 80234c2:	bf00      	nop

080234c4 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
  osMutexRelease(*mutex);
 80234c4:	6800      	ldr	r0, [r0, #0]
 80234c6:	f7f1 bd8d 	b.w	8014fe4 <osMutexRelease>
 80234ca:	bf00      	nop

080234cc <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80234cc:	b510      	push	{r4, lr}
 80234ce:	b088      	sub	sp, #32
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80234d0:	2400      	movs	r4, #0
 80234d2:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80234d6:	9305      	str	r3, [sp, #20]
  return osThreadCreate(&os_thread_def, arg);
 80234d8:	4611      	mov	r1, r2
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80234da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return osThreadCreate(&os_thread_def, arg);
 80234dc:	a801      	add	r0, sp, #4
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80234de:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80234e2:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80234e6:	f8ad 300c 	strh.w	r3, [sp, #12]
  return osThreadCreate(&os_thread_def, arg);
 80234ea:	f7f1 fceb 	bl	8014ec4 <osThreadCreate>
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 80234ee:	b008      	add	sp, #32
 80234f0:	bd10      	pop	{r4, pc}
 80234f2:	bf00      	nop

080234f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80234f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80234f6:	2200      	movs	r2, #0
 80234f8:	4917      	ldr	r1, [pc, #92]	; (8023558 <MX_USB_DEVICE_Init+0x64>)
 80234fa:	4818      	ldr	r0, [pc, #96]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 80234fc:	f7f1 f84c 	bl	8014598 <USBD_Init>
 8023500:	b970      	cbnz	r0, 8023520 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023502:	4917      	ldr	r1, [pc, #92]	; (8023560 <MX_USB_DEVICE_Init+0x6c>)
 8023504:	4815      	ldr	r0, [pc, #84]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023506:	f7f1 f85f 	bl	80145c8 <USBD_RegisterClass>
 802350a:	b988      	cbnz	r0, 8023530 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 802350c:	4915      	ldr	r1, [pc, #84]	; (8023564 <MX_USB_DEVICE_Init+0x70>)
 802350e:	4813      	ldr	r0, [pc, #76]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023510:	f7f1 f80c 	bl	801452c <USBD_CDC_RegisterInterface>
 8023514:	b9a0      	cbnz	r0, 8023540 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023516:	4811      	ldr	r0, [pc, #68]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023518:	f7f1 f86c 	bl	80145f4 <USBD_Start>
 802351c:	b9b8      	cbnz	r0, 802354e <MX_USB_DEVICE_Init+0x5a>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 802351e:	bd08      	pop	{r3, pc}
    Error_Handler();
 8023520:	f7e0 f948 	bl	80037b4 <Error_Handler>
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8023524:	490e      	ldr	r1, [pc, #56]	; (8023560 <MX_USB_DEVICE_Init+0x6c>)
 8023526:	480d      	ldr	r0, [pc, #52]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023528:	f7f1 f84e 	bl	80145c8 <USBD_RegisterClass>
 802352c:	2800      	cmp	r0, #0
 802352e:	d0ed      	beq.n	802350c <MX_USB_DEVICE_Init+0x18>
    Error_Handler();
 8023530:	f7e0 f940 	bl	80037b4 <Error_Handler>
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8023534:	490b      	ldr	r1, [pc, #44]	; (8023564 <MX_USB_DEVICE_Init+0x70>)
 8023536:	4809      	ldr	r0, [pc, #36]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023538:	f7f0 fff8 	bl	801452c <USBD_CDC_RegisterInterface>
 802353c:	2800      	cmp	r0, #0
 802353e:	d0ea      	beq.n	8023516 <MX_USB_DEVICE_Init+0x22>
    Error_Handler();
 8023540:	f7e0 f938 	bl	80037b4 <Error_Handler>
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8023544:	4805      	ldr	r0, [pc, #20]	; (802355c <MX_USB_DEVICE_Init+0x68>)
 8023546:	f7f1 f855 	bl	80145f4 <USBD_Start>
 802354a:	2800      	cmp	r0, #0
 802354c:	d0e7      	beq.n	802351e <MX_USB_DEVICE_Init+0x2a>
}
 802354e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8023552:	f7e0 b92f 	b.w	80037b4 <Error_Handler>
 8023556:	bf00      	nop
 8023558:	2000040c 	.word	0x2000040c
 802355c:	2002e748 	.word	0x2002e748
 8023560:	200002dc 	.word	0x200002dc
 8023564:	200003f8 	.word	0x200003f8

08023568 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8023568:	2000      	movs	r0, #0
 802356a:	4770      	bx	lr

0802356c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 802356c:	2000      	movs	r0, #0
 802356e:	4770      	bx	lr

08023570 <CDC_TransmitCplt_FS>:
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
}
 8023570:	2000      	movs	r0, #0
 8023572:	4770      	bx	lr

08023574 <CDC_Receive_FS>:
{
 8023574:	b510      	push	{r4, lr}
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8023576:	4c05      	ldr	r4, [pc, #20]	; (802358c <CDC_Receive_FS+0x18>)
{
 8023578:	4601      	mov	r1, r0
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 802357a:	4620      	mov	r0, r4
 802357c:	f7f0 ffe8 	bl	8014550 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8023580:	4620      	mov	r0, r4
 8023582:	f7f0 ffed 	bl	8014560 <USBD_CDC_ReceivePacket>
}
 8023586:	2000      	movs	r0, #0
 8023588:	bd10      	pop	{r4, pc}
 802358a:	bf00      	nop
 802358c:	2002e748 	.word	0x2002e748

08023590 <CDC_Init_FS>:
{
 8023590:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8023592:	4c06      	ldr	r4, [pc, #24]	; (80235ac <CDC_Init_FS+0x1c>)
 8023594:	2200      	movs	r2, #0
 8023596:	4906      	ldr	r1, [pc, #24]	; (80235b0 <CDC_Init_FS+0x20>)
 8023598:	4620      	mov	r0, r4
 802359a:	f7f0 ffcf 	bl	801453c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 802359e:	4905      	ldr	r1, [pc, #20]	; (80235b4 <CDC_Init_FS+0x24>)
 80235a0:	4620      	mov	r0, r4
 80235a2:	f7f0 ffd5 	bl	8014550 <USBD_CDC_SetRxBuffer>
}
 80235a6:	2000      	movs	r0, #0
 80235a8:	bd10      	pop	{r4, pc}
 80235aa:	bf00      	nop
 80235ac:	2002e748 	.word	0x2002e748
 80235b0:	2002f218 	.word	0x2002f218
 80235b4:	2002ea18 	.word	0x2002ea18

080235b8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80235b8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80235ba:	4801      	ldr	r0, [pc, #4]	; (80235c0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80235bc:	800b      	strh	r3, [r1, #0]
}
 80235be:	4770      	bx	lr
 80235c0:	20000438 	.word	0x20000438

080235c4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80235c4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80235c6:	4801      	ldr	r0, [pc, #4]	; (80235cc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80235c8:	800b      	strh	r3, [r1, #0]
}
 80235ca:	4770      	bx	lr
 80235cc:	2000044c 	.word	0x2000044c

080235d0 <USBD_FS_USR_BOSDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80235d0:	230c      	movs	r3, #12
  return (uint8_t*)USBD_FS_BOSDesc;
}
 80235d2:	4801      	ldr	r0, [pc, #4]	; (80235d8 <USBD_FS_USR_BOSDescriptor+0x8>)
  *length = sizeof(USBD_FS_BOSDesc);
 80235d4:	800b      	strh	r3, [r1, #0]
}
 80235d6:	4770      	bx	lr
 80235d8:	2000042c 	.word	0x2000042c

080235dc <USBD_FS_ManufacturerStrDescriptor>:
{
 80235dc:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80235de:	4c04      	ldr	r4, [pc, #16]	; (80235f0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 80235e0:	460a      	mov	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80235e2:	4804      	ldr	r0, [pc, #16]	; (80235f4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 80235e4:	4621      	mov	r1, r4
 80235e6:	f7f1 fbc9 	bl	8014d7c <USBD_GetString>
}
 80235ea:	4620      	mov	r0, r4
 80235ec:	bd10      	pop	{r4, pc}
 80235ee:	bf00      	nop
 80235f0:	2002fa18 	.word	0x2002fa18
 80235f4:	08045538 	.word	0x08045538

080235f8 <USBD_FS_ProductStrDescriptor>:
{
 80235f8:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80235fa:	4c04      	ldr	r4, [pc, #16]	; (802360c <USBD_FS_ProductStrDescriptor+0x14>)
{
 80235fc:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80235fe:	4804      	ldr	r0, [pc, #16]	; (8023610 <USBD_FS_ProductStrDescriptor+0x18>)
 8023600:	4621      	mov	r1, r4
 8023602:	f7f1 fbbb 	bl	8014d7c <USBD_GetString>
}
 8023606:	4620      	mov	r0, r4
 8023608:	bd10      	pop	{r4, pc}
 802360a:	bf00      	nop
 802360c:	2002fa18 	.word	0x2002fa18
 8023610:	0804554c 	.word	0x0804554c

08023614 <USBD_FS_ConfigStrDescriptor>:
{
 8023614:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8023616:	4c04      	ldr	r4, [pc, #16]	; (8023628 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8023618:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 802361a:	4804      	ldr	r0, [pc, #16]	; (802362c <USBD_FS_ConfigStrDescriptor+0x18>)
 802361c:	4621      	mov	r1, r4
 802361e:	f7f1 fbad 	bl	8014d7c <USBD_GetString>
}
 8023622:	4620      	mov	r0, r4
 8023624:	bd10      	pop	{r4, pc}
 8023626:	bf00      	nop
 8023628:	2002fa18 	.word	0x2002fa18
 802362c:	08045564 	.word	0x08045564

08023630 <USBD_FS_InterfaceStrDescriptor>:
{
 8023630:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023632:	4c04      	ldr	r4, [pc, #16]	; (8023644 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8023634:	460a      	mov	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8023636:	4804      	ldr	r0, [pc, #16]	; (8023648 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8023638:	4621      	mov	r1, r4
 802363a:	f7f1 fb9f 	bl	8014d7c <USBD_GetString>
}
 802363e:	4620      	mov	r0, r4
 8023640:	bd10      	pop	{r4, pc}
 8023642:	bf00      	nop
 8023644:	2002fa18 	.word	0x2002fa18
 8023648:	08045570 	.word	0x08045570

0802364c <USBD_FS_SerialStrDescriptor>:
  */
static void Get_SerialNum(void)
{
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 802364c:	4b21      	ldr	r3, [pc, #132]	; (80236d4 <USBD_FS_SerialStrDescriptor+0x88>)
 802364e:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
  deviceserial2 = *(uint32_t *) DEVICE_ID3;

  deviceserial0 += deviceserial2;
 8023652:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
{
 8023656:	b530      	push	{r4, r5, lr}

  if (deviceserial0 != 0)
 8023658:	1812      	adds	r2, r2, r0
  *length = USB_SIZ_STRING_SERIAL;
 802365a:	f04f 041a 	mov.w	r4, #26
 802365e:	800c      	strh	r4, [r1, #0]
  if (deviceserial0 != 0)
 8023660:	d101      	bne.n	8023666 <USBD_FS_SerialStrDescriptor+0x1a>
}
 8023662:	481d      	ldr	r0, [pc, #116]	; (80236d8 <USBD_FS_SerialStrDescriptor+0x8c>)
 8023664:	bd30      	pop	{r4, r5, pc}
 8023666:	491c      	ldr	r1, [pc, #112]	; (80236d8 <USBD_FS_SerialStrDescriptor+0x8c>)
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8023668:	f04f 0e00 	mov.w	lr, #0
 802366c:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
 8023670:	468c      	mov	ip, r1
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8023672:	4675      	mov	r5, lr
    if (((value >> 28)) < 0xA)
 8023674:	0f13      	lsrs	r3, r2, #28
 8023676:	f1b2 4f20 	cmp.w	r2, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 802367a:	f10e 0e02 	add.w	lr, lr, #2
    pbuf[2 * idx + 1] = 0;
 802367e:	f88c 5003 	strb.w	r5, [ip, #3]
      pbuf[2 * idx] = (value >> 28) + '0';
 8023682:	f103 0430 	add.w	r4, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023686:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 802368a:	ea4f 1202 	mov.w	r2, r2, lsl #4
  for (idx = 0; idx < len; idx++)
 802368e:	f10c 0c02 	add.w	ip, ip, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 8023692:	bf34      	ite	cc
 8023694:	f88c 4000 	strbcc.w	r4, [ip]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8023698:	f88c 3000 	strbcs.w	r3, [ip]
  for (idx = 0; idx < len; idx++)
 802369c:	f1be 0f10 	cmp.w	lr, #16
 80236a0:	d1e8      	bne.n	8023674 <USBD_FS_SerialStrDescriptor+0x28>
 80236a2:	2200      	movs	r2, #0
    pbuf[2 * idx + 1] = 0;
 80236a4:	4614      	mov	r4, r2
    if (((value >> 28)) < 0xA)
 80236a6:	0f03      	lsrs	r3, r0, #28
 80236a8:	f1b0 4f20 	cmp.w	r0, #2684354560	; 0xa0000000
  for (idx = 0; idx < len; idx++)
 80236ac:	f102 0202 	add.w	r2, r2, #2
    pbuf[2 * idx + 1] = 0;
 80236b0:	74cc      	strb	r4, [r1, #19]
      pbuf[2 * idx] = (value >> 28) + '0';
 80236b2:	f103 0c30 	add.w	ip, r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80236b6:	f103 0337 	add.w	r3, r3, #55	; 0x37
    value = value << 4;
 80236ba:	ea4f 1000 	mov.w	r0, r0, lsl #4
  for (idx = 0; idx < len; idx++)
 80236be:	f101 0102 	add.w	r1, r1, #2
      pbuf[2 * idx] = (value >> 28) + '0';
 80236c2:	bf34      	ite	cc
 80236c4:	f881 c010 	strbcc.w	ip, [r1, #16]
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80236c8:	740b      	strbcs	r3, [r1, #16]
  for (idx = 0; idx < len; idx++)
 80236ca:	2a08      	cmp	r2, #8
 80236cc:	d1eb      	bne.n	80236a6 <USBD_FS_SerialStrDescriptor+0x5a>
}
 80236ce:	4802      	ldr	r0, [pc, #8]	; (80236d8 <USBD_FS_SerialStrDescriptor+0x8c>)
 80236d0:	bd30      	pop	{r4, r5, pc}
 80236d2:	bf00      	nop
 80236d4:	1ff0f000 	.word	0x1ff0f000
 80236d8:	20000450 	.word	0x20000450

080236dc <HAL_PCD_MspInit>:
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(pcdHandle->Instance==USB_OTG_FS)
 80236dc:	6803      	ldr	r3, [r0, #0]
{
 80236de:	b530      	push	{r4, r5, lr}
  if(pcdHandle->Instance==USB_OTG_FS)
 80236e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
{
 80236e4:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80236e6:	f04f 0400 	mov.w	r4, #0
 80236ea:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80236ee:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80236f2:	9407      	str	r4, [sp, #28]
  if(pcdHandle->Instance==USB_OTG_FS)
 80236f4:	d001      	beq.n	80236fa <HAL_PCD_MspInit+0x1e>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80236f6:	b009      	add	sp, #36	; 0x24
 80236f8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80236fa:	4d1e      	ldr	r5, [pc, #120]	; (8023774 <HAL_PCD_MspInit+0x98>)
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 80236fc:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023700:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023702:	481d      	ldr	r0, [pc, #116]	; (8023778 <HAL_PCD_MspInit+0x9c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023704:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8023706:	f043 0301 	orr.w	r3, r3, #1
 802370a:	632b      	str	r3, [r5, #48]	; 0x30
 802370c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 802370e:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8023712:	e9cd 1203 	strd	r1, r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8023716:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8023718:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 802371a:	230a      	movs	r3, #10
    __HAL_RCC_GPIOA_CLK_ENABLE();
 802371c:	9900      	ldr	r1, [sp, #0]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 802371e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8023720:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8023724:	f7e7 fd6e 	bl	800b204 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8023728:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 802372c:	a903      	add	r1, sp, #12
 802372e:	4812      	ldr	r0, [pc, #72]	; (8023778 <HAL_PCD_MspInit+0x9c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8023730:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8023732:	e9cd 3403 	strd	r3, r4, [sp, #12]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8023736:	f7e7 fd65 	bl	800b204 <HAL_GPIO_Init>
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 802373a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 802373c:	4622      	mov	r2, r4
 802373e:	2106      	movs	r1, #6
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023744:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8023746:	636b      	str	r3, [r5, #52]	; 0x34
 8023748:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 802374a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 802374e:	9301      	str	r3, [sp, #4]
 8023750:	9b01      	ldr	r3, [sp, #4]
 8023752:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8023754:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8023758:	646b      	str	r3, [r5, #68]	; 0x44
 802375a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 802375c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8023760:	9302      	str	r3, [sp, #8]
 8023762:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 6, 0);
 8023764:	f7e4 fed0 	bl	8008508 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8023768:	2043      	movs	r0, #67	; 0x43
 802376a:	f7e4 ff17 	bl	800859c <HAL_NVIC_EnableIRQ>
}
 802376e:	b009      	add	sp, #36	; 0x24
 8023770:	bd30      	pop	{r4, r5, pc}
 8023772:	bf00      	nop
 8023774:	40023800 	.word	0x40023800
 8023778:	40020000 	.word	0x40020000

0802377c <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 802377c:	f500 7171 	add.w	r1, r0, #964	; 0x3c4
 8023780:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023784:	f7f0 bf48 	b.w	8014618 <USBD_LL_SetupStage>

08023788 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8023788:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 802378c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8023790:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023794:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8023798:	f7f0 bf6c 	b.w	8014674 <USBD_LL_DataOutStage>

0802379c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 802379c:	ebc1 03c1 	rsb	r3, r1, r1, lsl #3
 80237a0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80237a4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80237a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80237aa:	f7f0 bf99 	b.w	80146e0 <USBD_LL_DataInStage>
 80237ae:	bf00      	nop

080237b0 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80237b0:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80237b4:	f7f1 b830 	b.w	8014818 <USBD_LL_SOF>

080237b8 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80237b8:	68c1      	ldr	r1, [r0, #12]
{
 80237ba:	b510      	push	{r4, lr}
 80237bc:	4604      	mov	r4, r0
  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80237be:	b111      	cbz	r1, 80237c6 <HAL_PCD_ResetCallback+0xe>
  {
    speed = USBD_SPEED_HIGH;
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80237c0:	2902      	cmp	r1, #2
 80237c2:	d10a      	bne.n	80237da <HAL_PCD_ResetCallback+0x22>
  {
    speed = USBD_SPEED_FULL;
 80237c4:	2101      	movs	r1, #1
  else
  {
    Error_Handler();
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80237c6:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
 80237ca:	f7f1 f80d 	bl	80147e8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80237ce:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
}
 80237d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80237d6:	f7f0 bfdf 	b.w	8014798 <USBD_LL_Reset>
    Error_Handler();
 80237da:	f7df ffeb 	bl	80037b4 <Error_Handler>
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80237de:	2101      	movs	r1, #1
 80237e0:	e7f1      	b.n	80237c6 <HAL_PCD_ResetCallback+0xe>
 80237e2:	bf00      	nop

080237e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80237e4:	b510      	push	{r4, lr}
 80237e6:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80237e8:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 80237ec:	f7f1 f800 	bl	80147f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80237f0:	6822      	ldr	r2, [r4, #0]
 80237f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80237f6:	f043 0301 	orr.w	r3, r3, #1
 80237fa:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80237fe:	6a23      	ldr	r3, [r4, #32]
 8023800:	b123      	cbz	r3, 802380c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023802:	4a03      	ldr	r2, [pc, #12]	; (8023810 <HAL_PCD_SuspendCallback+0x2c>)
 8023804:	6913      	ldr	r3, [r2, #16]
 8023806:	f043 0306 	orr.w	r3, r3, #6
 802380a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 802380c:	bd10      	pop	{r4, pc}
 802380e:	bf00      	nop
 8023810:	e000ed00 	.word	0xe000ed00

08023814 <HAL_PCD_ResumeCallback>:
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8023814:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023818:	f7f0 bff4 	b.w	8014804 <USBD_LL_Resume>

0802381c <HAL_PCD_ISOOUTIncompleteCallback>:
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 802381c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023820:	f7f1 b80a 	b.w	8014838 <USBD_LL_IsoOUTIncomplete>

08023824 <HAL_PCD_ISOINIncompleteCallback>:
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8023824:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023828:	f7f1 b804 	b.w	8014834 <USBD_LL_IsoINIncomplete>

0802382c <HAL_PCD_ConnectCallback>:
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 802382c:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023830:	f7f1 b804 	b.w	801483c <USBD_LL_DevConnected>

08023834 <HAL_PCD_DisconnectCallback>:
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8023834:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
 8023838:	f7f1 b802 	b.w	8014840 <USBD_LL_DevDisconnected>

0802383c <USBD_LL_Init>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 802383c:	7802      	ldrb	r2, [r0, #0]
 802383e:	b10a      	cbz	r2, 8023844 <USBD_LL_Init+0x8>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
  }
  return USBD_OK;
}
 8023840:	2000      	movs	r0, #0
 8023842:	4770      	bx	lr
{
 8023844:	b538      	push	{r3, r4, r5, lr}
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8023846:	2101      	movs	r1, #1
  hpcd_USB_OTG_FS.pData = pdev;
 8023848:	4b14      	ldr	r3, [pc, #80]	; (802389c <USBD_LL_Init+0x60>)
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 802384a:	2402      	movs	r4, #2
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802384c:	f04f 45a0 	mov.w	r5, #1342177280	; 0x50000000
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8023850:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8023852:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.pData = pdev;
 8023854:	f8c3 0400 	str.w	r0, [r3, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 8023858:	f8c0 32c4 	str.w	r3, [r0, #708]	; 0x2c4
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 802385c:	4618      	mov	r0, r3
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 802385e:	601d      	str	r5, [r3, #0]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8023860:	60dc      	str	r4, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8023862:	619c      	str	r4, [r3, #24]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8023864:	e9c3 1207 	strd	r1, r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8023868:	e9c3 120b 	strd	r1, r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 802386c:	2206      	movs	r2, #6
 802386e:	605a      	str	r2, [r3, #4]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8023870:	f7e8 fe00 	bl	800c474 <HAL_PCD_Init>
 8023874:	b978      	cbnz	r0, 8023896 <USBD_LL_Init+0x5a>
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8023876:	2180      	movs	r1, #128	; 0x80
 8023878:	4808      	ldr	r0, [pc, #32]	; (802389c <USBD_LL_Init+0x60>)
 802387a:	f7e9 fb65 	bl	800cf48 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 802387e:	2240      	movs	r2, #64	; 0x40
 8023880:	2100      	movs	r1, #0
 8023882:	4806      	ldr	r0, [pc, #24]	; (802389c <USBD_LL_Init+0x60>)
 8023884:	f7e9 fb36 	bl	800cef4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8023888:	2280      	movs	r2, #128	; 0x80
 802388a:	2101      	movs	r1, #1
 802388c:	4803      	ldr	r0, [pc, #12]	; (802389c <USBD_LL_Init+0x60>)
 802388e:	f7e9 fb31 	bl	800cef4 <HAL_PCDEx_SetTxFiFo>
}
 8023892:	2000      	movs	r0, #0
 8023894:	bd38      	pop	{r3, r4, r5, pc}
    Error_Handler( );
 8023896:	f7df ff8d 	bl	80037b4 <Error_Handler>
 802389a:	e7ec      	b.n	8023876 <USBD_LL_Init+0x3a>
 802389c:	2002fc18 	.word	0x2002fc18

080238a0 <USBD_LL_Start>:
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_Start(pdev->pData);
 80238a0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80238a4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 80238a6:	f7e8 fe93 	bl	800c5d0 <HAL_PCD_Start>
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
  USBD_StatusTypeDef usb_status = USBD_OK;

  switch (hal_status)
 80238aa:	2803      	cmp	r0, #3
 80238ac:	d802      	bhi.n	80238b4 <USBD_LL_Start+0x14>
 80238ae:	4b02      	ldr	r3, [pc, #8]	; (80238b8 <USBD_LL_Start+0x18>)
 80238b0:	5c18      	ldrb	r0, [r3, r0]
}
 80238b2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_Start(pdev->pData);
 80238b4:	2003      	movs	r0, #3
}
 80238b6:	bd08      	pop	{r3, pc}
 80238b8:	08045580 	.word	0x08045580

080238bc <USBD_LL_OpenEP>:
{
 80238bc:	4694      	mov	ip, r2
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80238be:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80238c2:	461a      	mov	r2, r3
 80238c4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80238c6:	4663      	mov	r3, ip
 80238c8:	f7e9 f9c6 	bl	800cc58 <HAL_PCD_EP_Open>
  switch (hal_status)
 80238cc:	2803      	cmp	r0, #3
 80238ce:	d802      	bhi.n	80238d6 <USBD_LL_OpenEP+0x1a>
 80238d0:	4b02      	ldr	r3, [pc, #8]	; (80238dc <USBD_LL_OpenEP+0x20>)
 80238d2:	5c18      	ldrb	r0, [r3, r0]
}
 80238d4:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80238d6:	2003      	movs	r0, #3
}
 80238d8:	bd08      	pop	{r3, pc}
 80238da:	bf00      	nop
 80238dc:	08045580 	.word	0x08045580

080238e0 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80238e0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 80238e4:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80238e6:	f7e9 f9f5 	bl	800ccd4 <HAL_PCD_EP_Close>
  switch (hal_status)
 80238ea:	2803      	cmp	r0, #3
 80238ec:	d802      	bhi.n	80238f4 <USBD_LL_CloseEP+0x14>
 80238ee:	4b02      	ldr	r3, [pc, #8]	; (80238f8 <USBD_LL_CloseEP+0x18>)
 80238f0:	5c18      	ldrb	r0, [r3, r0]
}
 80238f2:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80238f4:	2003      	movs	r0, #3
}
 80238f6:	bd08      	pop	{r3, pc}
 80238f8:	08045580 	.word	0x08045580

080238fc <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80238fc:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023900:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023902:	f7e9 fa77 	bl	800cdf4 <HAL_PCD_EP_SetStall>
  switch (hal_status)
 8023906:	2803      	cmp	r0, #3
 8023908:	d802      	bhi.n	8023910 <USBD_LL_StallEP+0x14>
 802390a:	4b02      	ldr	r3, [pc, #8]	; (8023914 <USBD_LL_StallEP+0x18>)
 802390c:	5c18      	ldrb	r0, [r3, r0]
}
 802390e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8023910:	2003      	movs	r0, #3
}
 8023912:	bd08      	pop	{r3, pc}
 8023914:	08045580 	.word	0x08045580

08023918 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8023918:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802391c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802391e:	f7e9 faad 	bl	800ce7c <HAL_PCD_EP_ClrStall>
  switch (hal_status)
 8023922:	2803      	cmp	r0, #3
 8023924:	d802      	bhi.n	802392c <USBD_LL_ClearStallEP+0x14>
 8023926:	4b02      	ldr	r3, [pc, #8]	; (8023930 <USBD_LL_ClearStallEP+0x18>)
 8023928:	5c18      	ldrb	r0, [r3, r0]
}
 802392a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 802392c:	2003      	movs	r0, #3
}
 802392e:	bd08      	pop	{r3, pc}
 8023930:	08045580 	.word	0x08045580

08023934 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8023934:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8023936:	f8d0 32c4 	ldr.w	r3, [r0, #708]	; 0x2c4
  if((ep_addr & 0x80) == 0x80)
 802393a:	d406      	bmi.n	802394a <USBD_LL_IsStallEP+0x16>
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 802393c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023940:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023944:	f891 01fe 	ldrb.w	r0, [r1, #510]	; 0x1fe
}
 8023948:	4770      	bx	lr
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 802394a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 802394e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8023952:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8023956:	f891 003e 	ldrb.w	r0, [r1, #62]	; 0x3e
 802395a:	4770      	bx	lr

0802395c <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 802395c:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023960:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023962:	f7e9 f963 	bl	800cc2c <HAL_PCD_SetAddress>
  switch (hal_status)
 8023966:	2803      	cmp	r0, #3
 8023968:	d802      	bhi.n	8023970 <USBD_LL_SetUSBAddress+0x14>
 802396a:	4b02      	ldr	r3, [pc, #8]	; (8023974 <USBD_LL_SetUSBAddress+0x18>)
 802396c:	5c18      	ldrb	r0, [r3, r0]
}
 802396e:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8023970:	2003      	movs	r0, #3
}
 8023972:	bd08      	pop	{r3, pc}
 8023974:	08045580 	.word	0x08045580

08023978 <USBD_LL_Transmit>:
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8023978:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 802397c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802397e:	f7e9 fa11 	bl	800cda4 <HAL_PCD_EP_Transmit>
  switch (hal_status)
 8023982:	2803      	cmp	r0, #3
 8023984:	d802      	bhi.n	802398c <USBD_LL_Transmit+0x14>
 8023986:	4b02      	ldr	r3, [pc, #8]	; (8023990 <USBD_LL_Transmit+0x18>)
 8023988:	5c18      	ldrb	r0, [r3, r0]
}
 802398a:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 802398c:	2003      	movs	r0, #3
}
 802398e:	bd08      	pop	{r3, pc}
 8023990:	08045580 	.word	0x08045580

08023994 <USBD_LL_PrepareReceive>:
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8023994:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
{
 8023998:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 802399a:	f7e9 f9d1 	bl	800cd40 <HAL_PCD_EP_Receive>
  switch (hal_status)
 802399e:	2803      	cmp	r0, #3
 80239a0:	d802      	bhi.n	80239a8 <USBD_LL_PrepareReceive+0x14>
 80239a2:	4b02      	ldr	r3, [pc, #8]	; (80239ac <USBD_LL_PrepareReceive+0x18>)
 80239a4:	5c18      	ldrb	r0, [r3, r0]
}
 80239a6:	bd08      	pop	{r3, pc}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80239a8:	2003      	movs	r0, #3
}
 80239aa:	bd08      	pop	{r3, pc}
 80239ac:	08045580 	.word	0x08045580

080239b0 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80239b0:	f8d0 02c4 	ldr.w	r0, [r0, #708]	; 0x2c4
 80239b4:	f7e9 b9ec 	b.w	800cd90 <HAL_PCD_EP_GetRxCount>

080239b8 <HAL_PCDEx_LPM_Callback>:
{
 80239b8:	b510      	push	{r4, lr}
 80239ba:	4604      	mov	r4, r0
  switch (msg)
 80239bc:	b1a1      	cbz	r1, 80239e8 <HAL_PCDEx_LPM_Callback+0x30>
 80239be:	2901      	cmp	r1, #1
 80239c0:	d111      	bne.n	80239e6 <HAL_PCDEx_LPM_Callback+0x2e>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80239c2:	6802      	ldr	r2, [r0, #0]
    USBD_LL_Suspend(hpcd->pData);
 80239c4:	f8d0 0400 	ldr.w	r0, [r0, #1024]	; 0x400
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80239c8:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80239cc:	f043 0301 	orr.w	r3, r3, #1
 80239d0:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Suspend(hpcd->pData);
 80239d4:	f7f0 ff0c 	bl	80147f0 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80239d8:	6a23      	ldr	r3, [r4, #32]
 80239da:	b123      	cbz	r3, 80239e6 <HAL_PCDEx_LPM_Callback+0x2e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80239dc:	4a0e      	ldr	r2, [pc, #56]	; (8023a18 <HAL_PCDEx_LPM_Callback+0x60>)
 80239de:	6913      	ldr	r3, [r2, #16]
 80239e0:	f043 0306 	orr.w	r3, r3, #6
 80239e4:	6113      	str	r3, [r2, #16]
}
 80239e6:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80239e8:	6a03      	ldr	r3, [r0, #32]
 80239ea:	b963      	cbnz	r3, 8023a06 <HAL_PCDEx_LPM_Callback+0x4e>
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80239ec:	6822      	ldr	r2, [r4, #0]
    USBD_LL_Resume(hpcd->pData);
 80239ee:	f8d4 0400 	ldr.w	r0, [r4, #1024]	; 0x400
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80239f2:	f8d2 3e00 	ldr.w	r3, [r2, #3584]	; 0xe00
 80239f6:	f023 0301 	bic.w	r3, r3, #1
}
 80239fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80239fe:	f8c2 3e00 	str.w	r3, [r2, #3584]	; 0xe00
    USBD_LL_Resume(hpcd->pData);
 8023a02:	f7f0 beff 	b.w	8014804 <USBD_LL_Resume>
  SystemClock_Config();
 8023a06:	f7df fedd 	bl	80037c4 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8023a0a:	4a03      	ldr	r2, [pc, #12]	; (8023a18 <HAL_PCDEx_LPM_Callback+0x60>)
 8023a0c:	6913      	ldr	r3, [r2, #16]
 8023a0e:	f023 0306 	bic.w	r3, r3, #6
 8023a12:	6113      	str	r3, [r2, #16]
 8023a14:	e7ea      	b.n	80239ec <HAL_PCDEx_LPM_Callback+0x34>
 8023a16:	bf00      	nop
 8023a18:	e000ed00 	.word	0xe000ed00

08023a1c <atoi>:
 8023a1c:	220a      	movs	r2, #10
 8023a1e:	2100      	movs	r1, #0
 8023a20:	f002 ba84 	b.w	8025f2c <strtol>

08023a24 <std>:
 8023a24:	2300      	movs	r3, #0
 8023a26:	b510      	push	{r4, lr}
 8023a28:	4604      	mov	r4, r0
 8023a2a:	e9c0 3300 	strd	r3, r3, [r0]
 8023a2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023a32:	6083      	str	r3, [r0, #8]
 8023a34:	8181      	strh	r1, [r0, #12]
 8023a36:	6643      	str	r3, [r0, #100]	; 0x64
 8023a38:	81c2      	strh	r2, [r0, #14]
 8023a3a:	6183      	str	r3, [r0, #24]
 8023a3c:	4619      	mov	r1, r3
 8023a3e:	2208      	movs	r2, #8
 8023a40:	305c      	adds	r0, #92	; 0x5c
 8023a42:	f000 fa69 	bl	8023f18 <memset>
 8023a46:	4b05      	ldr	r3, [pc, #20]	; (8023a5c <std+0x38>)
 8023a48:	6263      	str	r3, [r4, #36]	; 0x24
 8023a4a:	4b05      	ldr	r3, [pc, #20]	; (8023a60 <std+0x3c>)
 8023a4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8023a4e:	4b05      	ldr	r3, [pc, #20]	; (8023a64 <std+0x40>)
 8023a50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023a52:	4b05      	ldr	r3, [pc, #20]	; (8023a68 <std+0x44>)
 8023a54:	6224      	str	r4, [r4, #32]
 8023a56:	6323      	str	r3, [r4, #48]	; 0x30
 8023a58:	bd10      	pop	{r4, pc}
 8023a5a:	bf00      	nop
 8023a5c:	080252c1 	.word	0x080252c1
 8023a60:	080252e7 	.word	0x080252e7
 8023a64:	0802531f 	.word	0x0802531f
 8023a68:	08025343 	.word	0x08025343

08023a6c <_cleanup_r>:
 8023a6c:	4901      	ldr	r1, [pc, #4]	; (8023a74 <_cleanup_r+0x8>)
 8023a6e:	f000 b8af 	b.w	8023bd0 <_fwalk_reent>
 8023a72:	bf00      	nop
 8023a74:	080273f5 	.word	0x080273f5

08023a78 <__sfmoreglue>:
 8023a78:	b570      	push	{r4, r5, r6, lr}
 8023a7a:	2268      	movs	r2, #104	; 0x68
 8023a7c:	1e4d      	subs	r5, r1, #1
 8023a7e:	4355      	muls	r5, r2
 8023a80:	460e      	mov	r6, r1
 8023a82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023a86:	f000 fd2d 	bl	80244e4 <_malloc_r>
 8023a8a:	4604      	mov	r4, r0
 8023a8c:	b140      	cbz	r0, 8023aa0 <__sfmoreglue+0x28>
 8023a8e:	2100      	movs	r1, #0
 8023a90:	e9c0 1600 	strd	r1, r6, [r0]
 8023a94:	300c      	adds	r0, #12
 8023a96:	60a0      	str	r0, [r4, #8]
 8023a98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023a9c:	f000 fa3c 	bl	8023f18 <memset>
 8023aa0:	4620      	mov	r0, r4
 8023aa2:	bd70      	pop	{r4, r5, r6, pc}

08023aa4 <__sfp_lock_acquire>:
 8023aa4:	4801      	ldr	r0, [pc, #4]	; (8023aac <__sfp_lock_acquire+0x8>)
 8023aa6:	f000 b9eb 	b.w	8023e80 <__retarget_lock_acquire_recursive>
 8023aaa:	bf00      	nop
 8023aac:	2003001e 	.word	0x2003001e

08023ab0 <__sfp_lock_release>:
 8023ab0:	4801      	ldr	r0, [pc, #4]	; (8023ab8 <__sfp_lock_release+0x8>)
 8023ab2:	f000 b9e7 	b.w	8023e84 <__retarget_lock_release_recursive>
 8023ab6:	bf00      	nop
 8023ab8:	2003001e 	.word	0x2003001e

08023abc <__sinit_lock_acquire>:
 8023abc:	4801      	ldr	r0, [pc, #4]	; (8023ac4 <__sinit_lock_acquire+0x8>)
 8023abe:	f000 b9df 	b.w	8023e80 <__retarget_lock_acquire_recursive>
 8023ac2:	bf00      	nop
 8023ac4:	2003001f 	.word	0x2003001f

08023ac8 <__sinit_lock_release>:
 8023ac8:	4801      	ldr	r0, [pc, #4]	; (8023ad0 <__sinit_lock_release+0x8>)
 8023aca:	f000 b9db 	b.w	8023e84 <__retarget_lock_release_recursive>
 8023ace:	bf00      	nop
 8023ad0:	2003001f 	.word	0x2003001f

08023ad4 <__sinit>:
 8023ad4:	b510      	push	{r4, lr}
 8023ad6:	4604      	mov	r4, r0
 8023ad8:	f7ff fff0 	bl	8023abc <__sinit_lock_acquire>
 8023adc:	69a3      	ldr	r3, [r4, #24]
 8023ade:	b11b      	cbz	r3, 8023ae8 <__sinit+0x14>
 8023ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023ae4:	f7ff bff0 	b.w	8023ac8 <__sinit_lock_release>
 8023ae8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023aec:	6523      	str	r3, [r4, #80]	; 0x50
 8023aee:	4b13      	ldr	r3, [pc, #76]	; (8023b3c <__sinit+0x68>)
 8023af0:	4a13      	ldr	r2, [pc, #76]	; (8023b40 <__sinit+0x6c>)
 8023af2:	681b      	ldr	r3, [r3, #0]
 8023af4:	62a2      	str	r2, [r4, #40]	; 0x28
 8023af6:	42a3      	cmp	r3, r4
 8023af8:	bf04      	itt	eq
 8023afa:	2301      	moveq	r3, #1
 8023afc:	61a3      	streq	r3, [r4, #24]
 8023afe:	4620      	mov	r0, r4
 8023b00:	f000 f820 	bl	8023b44 <__sfp>
 8023b04:	6060      	str	r0, [r4, #4]
 8023b06:	4620      	mov	r0, r4
 8023b08:	f000 f81c 	bl	8023b44 <__sfp>
 8023b0c:	60a0      	str	r0, [r4, #8]
 8023b0e:	4620      	mov	r0, r4
 8023b10:	f000 f818 	bl	8023b44 <__sfp>
 8023b14:	2200      	movs	r2, #0
 8023b16:	60e0      	str	r0, [r4, #12]
 8023b18:	2104      	movs	r1, #4
 8023b1a:	6860      	ldr	r0, [r4, #4]
 8023b1c:	f7ff ff82 	bl	8023a24 <std>
 8023b20:	68a0      	ldr	r0, [r4, #8]
 8023b22:	2201      	movs	r2, #1
 8023b24:	2109      	movs	r1, #9
 8023b26:	f7ff ff7d 	bl	8023a24 <std>
 8023b2a:	68e0      	ldr	r0, [r4, #12]
 8023b2c:	2202      	movs	r2, #2
 8023b2e:	2112      	movs	r1, #18
 8023b30:	f7ff ff78 	bl	8023a24 <std>
 8023b34:	2301      	movs	r3, #1
 8023b36:	61a3      	str	r3, [r4, #24]
 8023b38:	e7d2      	b.n	8023ae0 <__sinit+0xc>
 8023b3a:	bf00      	nop
 8023b3c:	080456e8 	.word	0x080456e8
 8023b40:	08023a6d 	.word	0x08023a6d

08023b44 <__sfp>:
 8023b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023b46:	4607      	mov	r7, r0
 8023b48:	f7ff ffac 	bl	8023aa4 <__sfp_lock_acquire>
 8023b4c:	4b1e      	ldr	r3, [pc, #120]	; (8023bc8 <__sfp+0x84>)
 8023b4e:	681e      	ldr	r6, [r3, #0]
 8023b50:	69b3      	ldr	r3, [r6, #24]
 8023b52:	b913      	cbnz	r3, 8023b5a <__sfp+0x16>
 8023b54:	4630      	mov	r0, r6
 8023b56:	f7ff ffbd 	bl	8023ad4 <__sinit>
 8023b5a:	3648      	adds	r6, #72	; 0x48
 8023b5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023b60:	3b01      	subs	r3, #1
 8023b62:	d503      	bpl.n	8023b6c <__sfp+0x28>
 8023b64:	6833      	ldr	r3, [r6, #0]
 8023b66:	b30b      	cbz	r3, 8023bac <__sfp+0x68>
 8023b68:	6836      	ldr	r6, [r6, #0]
 8023b6a:	e7f7      	b.n	8023b5c <__sfp+0x18>
 8023b6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023b70:	b9d5      	cbnz	r5, 8023ba8 <__sfp+0x64>
 8023b72:	4b16      	ldr	r3, [pc, #88]	; (8023bcc <__sfp+0x88>)
 8023b74:	60e3      	str	r3, [r4, #12]
 8023b76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023b7a:	6665      	str	r5, [r4, #100]	; 0x64
 8023b7c:	f000 f97e 	bl	8023e7c <__retarget_lock_init_recursive>
 8023b80:	f7ff ff96 	bl	8023ab0 <__sfp_lock_release>
 8023b84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023b88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023b8c:	6025      	str	r5, [r4, #0]
 8023b8e:	61a5      	str	r5, [r4, #24]
 8023b90:	2208      	movs	r2, #8
 8023b92:	4629      	mov	r1, r5
 8023b94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023b98:	f000 f9be 	bl	8023f18 <memset>
 8023b9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023ba0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023ba4:	4620      	mov	r0, r4
 8023ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023ba8:	3468      	adds	r4, #104	; 0x68
 8023baa:	e7d9      	b.n	8023b60 <__sfp+0x1c>
 8023bac:	2104      	movs	r1, #4
 8023bae:	4638      	mov	r0, r7
 8023bb0:	f7ff ff62 	bl	8023a78 <__sfmoreglue>
 8023bb4:	4604      	mov	r4, r0
 8023bb6:	6030      	str	r0, [r6, #0]
 8023bb8:	2800      	cmp	r0, #0
 8023bba:	d1d5      	bne.n	8023b68 <__sfp+0x24>
 8023bbc:	f7ff ff78 	bl	8023ab0 <__sfp_lock_release>
 8023bc0:	230c      	movs	r3, #12
 8023bc2:	603b      	str	r3, [r7, #0]
 8023bc4:	e7ee      	b.n	8023ba4 <__sfp+0x60>
 8023bc6:	bf00      	nop
 8023bc8:	080456e8 	.word	0x080456e8
 8023bcc:	ffff0001 	.word	0xffff0001

08023bd0 <_fwalk_reent>:
 8023bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023bd4:	4606      	mov	r6, r0
 8023bd6:	4688      	mov	r8, r1
 8023bd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023bdc:	2700      	movs	r7, #0
 8023bde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023be2:	f1b9 0901 	subs.w	r9, r9, #1
 8023be6:	d505      	bpl.n	8023bf4 <_fwalk_reent+0x24>
 8023be8:	6824      	ldr	r4, [r4, #0]
 8023bea:	2c00      	cmp	r4, #0
 8023bec:	d1f7      	bne.n	8023bde <_fwalk_reent+0xe>
 8023bee:	4638      	mov	r0, r7
 8023bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023bf4:	89ab      	ldrh	r3, [r5, #12]
 8023bf6:	2b01      	cmp	r3, #1
 8023bf8:	d907      	bls.n	8023c0a <_fwalk_reent+0x3a>
 8023bfa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023bfe:	3301      	adds	r3, #1
 8023c00:	d003      	beq.n	8023c0a <_fwalk_reent+0x3a>
 8023c02:	4629      	mov	r1, r5
 8023c04:	4630      	mov	r0, r6
 8023c06:	47c0      	blx	r8
 8023c08:	4307      	orrs	r7, r0
 8023c0a:	3568      	adds	r5, #104	; 0x68
 8023c0c:	e7e9      	b.n	8023be2 <_fwalk_reent+0x12>
 8023c0e:	Address 0x0000000008023c0e is out of bounds.


08023c10 <__libc_init_array>:
 8023c10:	b570      	push	{r4, r5, r6, lr}
 8023c12:	4d0d      	ldr	r5, [pc, #52]	; (8023c48 <__libc_init_array+0x38>)
 8023c14:	4c0d      	ldr	r4, [pc, #52]	; (8023c4c <__libc_init_array+0x3c>)
 8023c16:	1b64      	subs	r4, r4, r5
 8023c18:	10a4      	asrs	r4, r4, #2
 8023c1a:	2600      	movs	r6, #0
 8023c1c:	42a6      	cmp	r6, r4
 8023c1e:	d109      	bne.n	8023c34 <__libc_init_array+0x24>
 8023c20:	4d0b      	ldr	r5, [pc, #44]	; (8023c50 <__libc_init_array+0x40>)
 8023c22:	4c0c      	ldr	r4, [pc, #48]	; (8023c54 <__libc_init_array+0x44>)
 8023c24:	f005 f8f0 	bl	8028e08 <_init>
 8023c28:	1b64      	subs	r4, r4, r5
 8023c2a:	10a4      	asrs	r4, r4, #2
 8023c2c:	2600      	movs	r6, #0
 8023c2e:	42a6      	cmp	r6, r4
 8023c30:	d105      	bne.n	8023c3e <__libc_init_array+0x2e>
 8023c32:	bd70      	pop	{r4, r5, r6, pc}
 8023c34:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c38:	4798      	blx	r3
 8023c3a:	3601      	adds	r6, #1
 8023c3c:	e7ee      	b.n	8023c1c <__libc_init_array+0xc>
 8023c3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8023c42:	4798      	blx	r3
 8023c44:	3601      	adds	r6, #1
 8023c46:	e7f2      	b.n	8023c2e <__libc_init_array+0x1e>
 8023c48:	08045dbc 	.word	0x08045dbc
 8023c4c:	08045dbc 	.word	0x08045dbc
 8023c50:	08045dbc 	.word	0x08045dbc
 8023c54:	08045dc0 	.word	0x08045dc0

08023c58 <localtime>:
 8023c58:	b538      	push	{r3, r4, r5, lr}
 8023c5a:	4b0b      	ldr	r3, [pc, #44]	; (8023c88 <localtime+0x30>)
 8023c5c:	681d      	ldr	r5, [r3, #0]
 8023c5e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8023c60:	4604      	mov	r4, r0
 8023c62:	b953      	cbnz	r3, 8023c7a <localtime+0x22>
 8023c64:	2024      	movs	r0, #36	; 0x24
 8023c66:	f000 f90f 	bl	8023e88 <malloc>
 8023c6a:	4602      	mov	r2, r0
 8023c6c:	63e8      	str	r0, [r5, #60]	; 0x3c
 8023c6e:	b920      	cbnz	r0, 8023c7a <localtime+0x22>
 8023c70:	4b06      	ldr	r3, [pc, #24]	; (8023c8c <localtime+0x34>)
 8023c72:	4807      	ldr	r0, [pc, #28]	; (8023c90 <localtime+0x38>)
 8023c74:	2132      	movs	r1, #50	; 0x32
 8023c76:	f002 fcf3 	bl	8026660 <__assert_func>
 8023c7a:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8023c7c:	4620      	mov	r0, r4
 8023c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023c82:	f000 b807 	b.w	8023c94 <localtime_r>
 8023c86:	bf00      	nop
 8023c88:	2000046c 	.word	0x2000046c
 8023c8c:	080456ec 	.word	0x080456ec
 8023c90:	08045703 	.word	0x08045703

08023c94 <localtime_r>:
 8023c94:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8023c98:	4680      	mov	r8, r0
 8023c9a:	9101      	str	r1, [sp, #4]
 8023c9c:	f003 fc3c 	bl	8027518 <__gettzinfo>
 8023ca0:	9901      	ldr	r1, [sp, #4]
 8023ca2:	4605      	mov	r5, r0
 8023ca4:	4640      	mov	r0, r8
 8023ca6:	f003 fc3b 	bl	8027520 <gmtime_r>
 8023caa:	6943      	ldr	r3, [r0, #20]
 8023cac:	0799      	lsls	r1, r3, #30
 8023cae:	4604      	mov	r4, r0
 8023cb0:	f203 776c 	addw	r7, r3, #1900	; 0x76c
 8023cb4:	d105      	bne.n	8023cc2 <localtime_r+0x2e>
 8023cb6:	2264      	movs	r2, #100	; 0x64
 8023cb8:	fb97 f3f2 	sdiv	r3, r7, r2
 8023cbc:	fb02 7313 	mls	r3, r2, r3, r7
 8023cc0:	bb73      	cbnz	r3, 8023d20 <localtime_r+0x8c>
 8023cc2:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8023cc6:	fb97 f6f3 	sdiv	r6, r7, r3
 8023cca:	fb03 7616 	mls	r6, r3, r6, r7
 8023cce:	fab6 f386 	clz	r3, r6
 8023cd2:	095b      	lsrs	r3, r3, #5
 8023cd4:	4e67      	ldr	r6, [pc, #412]	; (8023e74 <localtime_r+0x1e0>)
 8023cd6:	2230      	movs	r2, #48	; 0x30
 8023cd8:	fb02 6603 	mla	r6, r2, r3, r6
 8023cdc:	f002 fa58 	bl	8026190 <__tz_lock>
 8023ce0:	f002 fa62 	bl	80261a8 <_tzset_unlocked>
 8023ce4:	4b64      	ldr	r3, [pc, #400]	; (8023e78 <localtime_r+0x1e4>)
 8023ce6:	681b      	ldr	r3, [r3, #0]
 8023ce8:	b34b      	cbz	r3, 8023d3e <localtime_r+0xaa>
 8023cea:	686b      	ldr	r3, [r5, #4]
 8023cec:	42bb      	cmp	r3, r7
 8023cee:	d119      	bne.n	8023d24 <localtime_r+0x90>
 8023cf0:	682f      	ldr	r7, [r5, #0]
 8023cf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 8023cf6:	e9d5 0108 	ldrd	r0, r1, [r5, #32]
 8023cfa:	b9df      	cbnz	r7, 8023d34 <localtime_r+0xa0>
 8023cfc:	4282      	cmp	r2, r0
 8023cfe:	eb73 0101 	sbcs.w	r1, r3, r1
 8023d02:	da23      	bge.n	8023d4c <localtime_r+0xb8>
 8023d04:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8023d08:	4282      	cmp	r2, r0
 8023d0a:	eb73 0701 	sbcs.w	r7, r3, r1
 8023d0e:	bfb4      	ite	lt
 8023d10:	2701      	movlt	r7, #1
 8023d12:	2700      	movge	r7, #0
 8023d14:	4282      	cmp	r2, r0
 8023d16:	418b      	sbcs	r3, r1
 8023d18:	6227      	str	r7, [r4, #32]
 8023d1a:	db19      	blt.n	8023d50 <localtime_r+0xbc>
 8023d1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8023d1e:	e018      	b.n	8023d52 <localtime_r+0xbe>
 8023d20:	2301      	movs	r3, #1
 8023d22:	e7d7      	b.n	8023cd4 <localtime_r+0x40>
 8023d24:	4638      	mov	r0, r7
 8023d26:	f002 f989 	bl	802603c <__tzcalc_limits>
 8023d2a:	2800      	cmp	r0, #0
 8023d2c:	d1e0      	bne.n	8023cf0 <localtime_r+0x5c>
 8023d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8023d32:	e004      	b.n	8023d3e <localtime_r+0xaa>
 8023d34:	4282      	cmp	r2, r0
 8023d36:	eb73 0101 	sbcs.w	r1, r3, r1
 8023d3a:	da02      	bge.n	8023d42 <localtime_r+0xae>
 8023d3c:	2300      	movs	r3, #0
 8023d3e:	6223      	str	r3, [r4, #32]
 8023d40:	e7ec      	b.n	8023d1c <localtime_r+0x88>
 8023d42:	e9d5 0112 	ldrd	r0, r1, [r5, #72]	; 0x48
 8023d46:	4282      	cmp	r2, r0
 8023d48:	418b      	sbcs	r3, r1
 8023d4a:	daf7      	bge.n	8023d3c <localtime_r+0xa8>
 8023d4c:	2301      	movs	r3, #1
 8023d4e:	6223      	str	r3, [r4, #32]
 8023d50:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 8023d52:	6861      	ldr	r1, [r4, #4]
 8023d54:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8023d58:	203c      	movs	r0, #60	; 0x3c
 8023d5a:	fb93 f5f2 	sdiv	r5, r3, r2
 8023d5e:	fb02 3315 	mls	r3, r2, r5, r3
 8023d62:	fb93 f2f0 	sdiv	r2, r3, r0
 8023d66:	fb00 3012 	mls	r0, r0, r2, r3
 8023d6a:	6823      	ldr	r3, [r4, #0]
 8023d6c:	1a89      	subs	r1, r1, r2
 8023d6e:	68a2      	ldr	r2, [r4, #8]
 8023d70:	6061      	str	r1, [r4, #4]
 8023d72:	1a1b      	subs	r3, r3, r0
 8023d74:	1b52      	subs	r2, r2, r5
 8023d76:	2b3b      	cmp	r3, #59	; 0x3b
 8023d78:	6023      	str	r3, [r4, #0]
 8023d7a:	60a2      	str	r2, [r4, #8]
 8023d7c:	dd35      	ble.n	8023dea <localtime_r+0x156>
 8023d7e:	3101      	adds	r1, #1
 8023d80:	6061      	str	r1, [r4, #4]
 8023d82:	3b3c      	subs	r3, #60	; 0x3c
 8023d84:	6023      	str	r3, [r4, #0]
 8023d86:	6863      	ldr	r3, [r4, #4]
 8023d88:	2b3b      	cmp	r3, #59	; 0x3b
 8023d8a:	dd34      	ble.n	8023df6 <localtime_r+0x162>
 8023d8c:	3201      	adds	r2, #1
 8023d8e:	60a2      	str	r2, [r4, #8]
 8023d90:	3b3c      	subs	r3, #60	; 0x3c
 8023d92:	6063      	str	r3, [r4, #4]
 8023d94:	68a3      	ldr	r3, [r4, #8]
 8023d96:	2b17      	cmp	r3, #23
 8023d98:	dd33      	ble.n	8023e02 <localtime_r+0x16e>
 8023d9a:	69e2      	ldr	r2, [r4, #28]
 8023d9c:	3201      	adds	r2, #1
 8023d9e:	61e2      	str	r2, [r4, #28]
 8023da0:	69a2      	ldr	r2, [r4, #24]
 8023da2:	3201      	adds	r2, #1
 8023da4:	2a06      	cmp	r2, #6
 8023da6:	bfc8      	it	gt
 8023da8:	2200      	movgt	r2, #0
 8023daa:	61a2      	str	r2, [r4, #24]
 8023dac:	68e2      	ldr	r2, [r4, #12]
 8023dae:	3b18      	subs	r3, #24
 8023db0:	3201      	adds	r2, #1
 8023db2:	60a3      	str	r3, [r4, #8]
 8023db4:	6923      	ldr	r3, [r4, #16]
 8023db6:	60e2      	str	r2, [r4, #12]
 8023db8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
 8023dbc:	428a      	cmp	r2, r1
 8023dbe:	dd0e      	ble.n	8023dde <localtime_r+0x14a>
 8023dc0:	2b0b      	cmp	r3, #11
 8023dc2:	eba2 0201 	sub.w	r2, r2, r1
 8023dc6:	60e2      	str	r2, [r4, #12]
 8023dc8:	f103 0201 	add.w	r2, r3, #1
 8023dcc:	bf09      	itett	eq
 8023dce:	6963      	ldreq	r3, [r4, #20]
 8023dd0:	6122      	strne	r2, [r4, #16]
 8023dd2:	2200      	moveq	r2, #0
 8023dd4:	3301      	addeq	r3, #1
 8023dd6:	bf02      	ittt	eq
 8023dd8:	6122      	streq	r2, [r4, #16]
 8023dda:	6163      	streq	r3, [r4, #20]
 8023ddc:	61e2      	streq	r2, [r4, #28]
 8023dde:	f002 f9dd 	bl	802619c <__tz_unlock>
 8023de2:	4620      	mov	r0, r4
 8023de4:	b002      	add	sp, #8
 8023de6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023dea:	2b00      	cmp	r3, #0
 8023dec:	dacb      	bge.n	8023d86 <localtime_r+0xf2>
 8023dee:	3901      	subs	r1, #1
 8023df0:	6061      	str	r1, [r4, #4]
 8023df2:	333c      	adds	r3, #60	; 0x3c
 8023df4:	e7c6      	b.n	8023d84 <localtime_r+0xf0>
 8023df6:	2b00      	cmp	r3, #0
 8023df8:	dacc      	bge.n	8023d94 <localtime_r+0x100>
 8023dfa:	3a01      	subs	r2, #1
 8023dfc:	60a2      	str	r2, [r4, #8]
 8023dfe:	333c      	adds	r3, #60	; 0x3c
 8023e00:	e7c7      	b.n	8023d92 <localtime_r+0xfe>
 8023e02:	2b00      	cmp	r3, #0
 8023e04:	daeb      	bge.n	8023dde <localtime_r+0x14a>
 8023e06:	69e2      	ldr	r2, [r4, #28]
 8023e08:	3a01      	subs	r2, #1
 8023e0a:	61e2      	str	r2, [r4, #28]
 8023e0c:	69a2      	ldr	r2, [r4, #24]
 8023e0e:	3a01      	subs	r2, #1
 8023e10:	bf48      	it	mi
 8023e12:	2206      	movmi	r2, #6
 8023e14:	61a2      	str	r2, [r4, #24]
 8023e16:	68e2      	ldr	r2, [r4, #12]
 8023e18:	3318      	adds	r3, #24
 8023e1a:	3a01      	subs	r2, #1
 8023e1c:	60e2      	str	r2, [r4, #12]
 8023e1e:	60a3      	str	r3, [r4, #8]
 8023e20:	2a00      	cmp	r2, #0
 8023e22:	d1dc      	bne.n	8023dde <localtime_r+0x14a>
 8023e24:	6923      	ldr	r3, [r4, #16]
 8023e26:	3b01      	subs	r3, #1
 8023e28:	d405      	bmi.n	8023e36 <localtime_r+0x1a2>
 8023e2a:	6123      	str	r3, [r4, #16]
 8023e2c:	6923      	ldr	r3, [r4, #16]
 8023e2e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8023e32:	60e3      	str	r3, [r4, #12]
 8023e34:	e7d3      	b.n	8023dde <localtime_r+0x14a>
 8023e36:	230b      	movs	r3, #11
 8023e38:	6123      	str	r3, [r4, #16]
 8023e3a:	6963      	ldr	r3, [r4, #20]
 8023e3c:	1e5a      	subs	r2, r3, #1
 8023e3e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8023e42:	6162      	str	r2, [r4, #20]
 8023e44:	079a      	lsls	r2, r3, #30
 8023e46:	d105      	bne.n	8023e54 <localtime_r+0x1c0>
 8023e48:	2164      	movs	r1, #100	; 0x64
 8023e4a:	fb93 f2f1 	sdiv	r2, r3, r1
 8023e4e:	fb01 3212 	mls	r2, r1, r2, r3
 8023e52:	b962      	cbnz	r2, 8023e6e <localtime_r+0x1da>
 8023e54:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023e58:	fb93 f1f2 	sdiv	r1, r3, r2
 8023e5c:	fb02 3311 	mls	r3, r2, r1, r3
 8023e60:	fab3 f383 	clz	r3, r3
 8023e64:	095b      	lsrs	r3, r3, #5
 8023e66:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8023e6a:	61e3      	str	r3, [r4, #28]
 8023e6c:	e7de      	b.n	8023e2c <localtime_r+0x198>
 8023e6e:	2301      	movs	r3, #1
 8023e70:	e7f9      	b.n	8023e66 <localtime_r+0x1d2>
 8023e72:	bf00      	nop
 8023e74:	080457c0 	.word	0x080457c0
 8023e78:	2003004c 	.word	0x2003004c

08023e7c <__retarget_lock_init_recursive>:
 8023e7c:	4770      	bx	lr

08023e7e <__retarget_lock_acquire>:
 8023e7e:	4770      	bx	lr

08023e80 <__retarget_lock_acquire_recursive>:
 8023e80:	4770      	bx	lr

08023e82 <__retarget_lock_release>:
 8023e82:	4770      	bx	lr

08023e84 <__retarget_lock_release_recursive>:
 8023e84:	4770      	bx	lr
 8023e86:	Address 0x0000000008023e86 is out of bounds.


08023e88 <malloc>:
 8023e88:	4b02      	ldr	r3, [pc, #8]	; (8023e94 <malloc+0xc>)
 8023e8a:	4601      	mov	r1, r0
 8023e8c:	6818      	ldr	r0, [r3, #0]
 8023e8e:	f000 bb29 	b.w	80244e4 <_malloc_r>
 8023e92:	bf00      	nop
 8023e94:	2000046c 	.word	0x2000046c

08023e98 <free>:
 8023e98:	4b02      	ldr	r3, [pc, #8]	; (8023ea4 <free+0xc>)
 8023e9a:	4601      	mov	r1, r0
 8023e9c:	6818      	ldr	r0, [r3, #0]
 8023e9e:	f000 bab5 	b.w	802440c <_free_r>
 8023ea2:	bf00      	nop
 8023ea4:	2000046c 	.word	0x2000046c

08023ea8 <memcmp>:
 8023ea8:	b510      	push	{r4, lr}
 8023eaa:	3901      	subs	r1, #1
 8023eac:	4402      	add	r2, r0
 8023eae:	4290      	cmp	r0, r2
 8023eb0:	d101      	bne.n	8023eb6 <memcmp+0xe>
 8023eb2:	2000      	movs	r0, #0
 8023eb4:	e005      	b.n	8023ec2 <memcmp+0x1a>
 8023eb6:	7803      	ldrb	r3, [r0, #0]
 8023eb8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8023ebc:	42a3      	cmp	r3, r4
 8023ebe:	d001      	beq.n	8023ec4 <memcmp+0x1c>
 8023ec0:	1b18      	subs	r0, r3, r4
 8023ec2:	bd10      	pop	{r4, pc}
 8023ec4:	3001      	adds	r0, #1
 8023ec6:	e7f2      	b.n	8023eae <memcmp+0x6>

08023ec8 <memcpy>:
 8023ec8:	440a      	add	r2, r1
 8023eca:	4291      	cmp	r1, r2
 8023ecc:	f100 33ff 	add.w	r3, r0, #4294967295
 8023ed0:	d100      	bne.n	8023ed4 <memcpy+0xc>
 8023ed2:	4770      	bx	lr
 8023ed4:	b510      	push	{r4, lr}
 8023ed6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8023eda:	f803 4f01 	strb.w	r4, [r3, #1]!
 8023ede:	4291      	cmp	r1, r2
 8023ee0:	d1f9      	bne.n	8023ed6 <memcpy+0xe>
 8023ee2:	bd10      	pop	{r4, pc}

08023ee4 <memmove>:
 8023ee4:	4288      	cmp	r0, r1
 8023ee6:	b510      	push	{r4, lr}
 8023ee8:	eb01 0402 	add.w	r4, r1, r2
 8023eec:	d902      	bls.n	8023ef4 <memmove+0x10>
 8023eee:	4284      	cmp	r4, r0
 8023ef0:	4623      	mov	r3, r4
 8023ef2:	d807      	bhi.n	8023f04 <memmove+0x20>
 8023ef4:	1e43      	subs	r3, r0, #1
 8023ef6:	42a1      	cmp	r1, r4
 8023ef8:	d008      	beq.n	8023f0c <memmove+0x28>
 8023efa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8023efe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8023f02:	e7f8      	b.n	8023ef6 <memmove+0x12>
 8023f04:	4402      	add	r2, r0
 8023f06:	4601      	mov	r1, r0
 8023f08:	428a      	cmp	r2, r1
 8023f0a:	d100      	bne.n	8023f0e <memmove+0x2a>
 8023f0c:	bd10      	pop	{r4, pc}
 8023f0e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8023f12:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8023f16:	e7f7      	b.n	8023f08 <memmove+0x24>

08023f18 <memset>:
 8023f18:	4402      	add	r2, r0
 8023f1a:	4603      	mov	r3, r0
 8023f1c:	4293      	cmp	r3, r2
 8023f1e:	d100      	bne.n	8023f22 <memset+0xa>
 8023f20:	4770      	bx	lr
 8023f22:	f803 1b01 	strb.w	r1, [r3], #1
 8023f26:	e7f9      	b.n	8023f1c <memset+0x4>

08023f28 <validate_structure>:
 8023f28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023f2a:	6801      	ldr	r1, [r0, #0]
 8023f2c:	293b      	cmp	r1, #59	; 0x3b
 8023f2e:	4604      	mov	r4, r0
 8023f30:	d911      	bls.n	8023f56 <validate_structure+0x2e>
 8023f32:	223c      	movs	r2, #60	; 0x3c
 8023f34:	4668      	mov	r0, sp
 8023f36:	f002 fbc1 	bl	80266bc <div>
 8023f3a:	9a01      	ldr	r2, [sp, #4]
 8023f3c:	6863      	ldr	r3, [r4, #4]
 8023f3e:	9900      	ldr	r1, [sp, #0]
 8023f40:	2a00      	cmp	r2, #0
 8023f42:	440b      	add	r3, r1
 8023f44:	6063      	str	r3, [r4, #4]
 8023f46:	bfbb      	ittet	lt
 8023f48:	323c      	addlt	r2, #60	; 0x3c
 8023f4a:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023f4e:	6022      	strge	r2, [r4, #0]
 8023f50:	6022      	strlt	r2, [r4, #0]
 8023f52:	bfb8      	it	lt
 8023f54:	6063      	strlt	r3, [r4, #4]
 8023f56:	6861      	ldr	r1, [r4, #4]
 8023f58:	293b      	cmp	r1, #59	; 0x3b
 8023f5a:	d911      	bls.n	8023f80 <validate_structure+0x58>
 8023f5c:	223c      	movs	r2, #60	; 0x3c
 8023f5e:	4668      	mov	r0, sp
 8023f60:	f002 fbac 	bl	80266bc <div>
 8023f64:	9a01      	ldr	r2, [sp, #4]
 8023f66:	68a3      	ldr	r3, [r4, #8]
 8023f68:	9900      	ldr	r1, [sp, #0]
 8023f6a:	2a00      	cmp	r2, #0
 8023f6c:	440b      	add	r3, r1
 8023f6e:	60a3      	str	r3, [r4, #8]
 8023f70:	bfbb      	ittet	lt
 8023f72:	323c      	addlt	r2, #60	; 0x3c
 8023f74:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023f78:	6062      	strge	r2, [r4, #4]
 8023f7a:	6062      	strlt	r2, [r4, #4]
 8023f7c:	bfb8      	it	lt
 8023f7e:	60a3      	strlt	r3, [r4, #8]
 8023f80:	68a1      	ldr	r1, [r4, #8]
 8023f82:	2917      	cmp	r1, #23
 8023f84:	d911      	bls.n	8023faa <validate_structure+0x82>
 8023f86:	2218      	movs	r2, #24
 8023f88:	4668      	mov	r0, sp
 8023f8a:	f002 fb97 	bl	80266bc <div>
 8023f8e:	9a01      	ldr	r2, [sp, #4]
 8023f90:	68e3      	ldr	r3, [r4, #12]
 8023f92:	9900      	ldr	r1, [sp, #0]
 8023f94:	2a00      	cmp	r2, #0
 8023f96:	440b      	add	r3, r1
 8023f98:	60e3      	str	r3, [r4, #12]
 8023f9a:	bfbb      	ittet	lt
 8023f9c:	3218      	addlt	r2, #24
 8023f9e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023fa2:	60a2      	strge	r2, [r4, #8]
 8023fa4:	60a2      	strlt	r2, [r4, #8]
 8023fa6:	bfb8      	it	lt
 8023fa8:	60e3      	strlt	r3, [r4, #12]
 8023faa:	6921      	ldr	r1, [r4, #16]
 8023fac:	290b      	cmp	r1, #11
 8023fae:	d911      	bls.n	8023fd4 <validate_structure+0xac>
 8023fb0:	220c      	movs	r2, #12
 8023fb2:	4668      	mov	r0, sp
 8023fb4:	f002 fb82 	bl	80266bc <div>
 8023fb8:	9a01      	ldr	r2, [sp, #4]
 8023fba:	6963      	ldr	r3, [r4, #20]
 8023fbc:	9900      	ldr	r1, [sp, #0]
 8023fbe:	2a00      	cmp	r2, #0
 8023fc0:	440b      	add	r3, r1
 8023fc2:	6163      	str	r3, [r4, #20]
 8023fc4:	bfbb      	ittet	lt
 8023fc6:	320c      	addlt	r2, #12
 8023fc8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8023fcc:	6122      	strge	r2, [r4, #16]
 8023fce:	6122      	strlt	r2, [r4, #16]
 8023fd0:	bfb8      	it	lt
 8023fd2:	6163      	strlt	r3, [r4, #20]
 8023fd4:	6963      	ldr	r3, [r4, #20]
 8023fd6:	0798      	lsls	r0, r3, #30
 8023fd8:	d120      	bne.n	802401c <validate_structure+0xf4>
 8023fda:	2164      	movs	r1, #100	; 0x64
 8023fdc:	fb93 f2f1 	sdiv	r2, r3, r1
 8023fe0:	fb01 3212 	mls	r2, r1, r2, r3
 8023fe4:	b9e2      	cbnz	r2, 8024020 <validate_structure+0xf8>
 8023fe6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8023fea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8023fee:	fb93 f1f2 	sdiv	r1, r3, r2
 8023ff2:	fb02 3311 	mls	r3, r2, r1, r3
 8023ff6:	2b00      	cmp	r3, #0
 8023ff8:	bf14      	ite	ne
 8023ffa:	231c      	movne	r3, #28
 8023ffc:	231d      	moveq	r3, #29
 8023ffe:	68e2      	ldr	r2, [r4, #12]
 8024000:	2a00      	cmp	r2, #0
 8024002:	dc0f      	bgt.n	8024024 <validate_structure+0xfc>
 8024004:	4f33      	ldr	r7, [pc, #204]	; (80240d4 <validate_structure+0x1ac>)
 8024006:	260b      	movs	r6, #11
 8024008:	2064      	movs	r0, #100	; 0x64
 802400a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802400e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8024012:	f1bc 0f00 	cmp.w	ip, #0
 8024016:	dd31      	ble.n	802407c <validate_structure+0x154>
 8024018:	b003      	add	sp, #12
 802401a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802401c:	231c      	movs	r3, #28
 802401e:	e7ee      	b.n	8023ffe <validate_structure+0xd6>
 8024020:	231d      	movs	r3, #29
 8024022:	e7ec      	b.n	8023ffe <validate_structure+0xd6>
 8024024:	4e2b      	ldr	r6, [pc, #172]	; (80240d4 <validate_structure+0x1ac>)
 8024026:	2700      	movs	r7, #0
 8024028:	2064      	movs	r0, #100	; 0x64
 802402a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 802402e:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
 8024032:	2a01      	cmp	r2, #1
 8024034:	bf14      	ite	ne
 8024036:	f856 c022 	ldrne.w	ip, [r6, r2, lsl #2]
 802403a:	469c      	moveq	ip, r3
 802403c:	4561      	cmp	r1, ip
 802403e:	ddeb      	ble.n	8024018 <validate_structure+0xf0>
 8024040:	3201      	adds	r2, #1
 8024042:	eba1 010c 	sub.w	r1, r1, ip
 8024046:	2a0c      	cmp	r2, #12
 8024048:	60e1      	str	r1, [r4, #12]
 802404a:	6122      	str	r2, [r4, #16]
 802404c:	d1ef      	bne.n	802402e <validate_structure+0x106>
 802404e:	6963      	ldr	r3, [r4, #20]
 8024050:	1c5a      	adds	r2, r3, #1
 8024052:	0791      	lsls	r1, r2, #30
 8024054:	e9c4 7204 	strd	r7, r2, [r4, #16]
 8024058:	d137      	bne.n	80240ca <validate_structure+0x1a2>
 802405a:	fb92 f1f0 	sdiv	r1, r2, r0
 802405e:	fb00 2211 	mls	r2, r0, r1, r2
 8024062:	2a00      	cmp	r2, #0
 8024064:	d133      	bne.n	80240ce <validate_structure+0x1a6>
 8024066:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 802406a:	fb93 f2f5 	sdiv	r2, r3, r5
 802406e:	fb05 3312 	mls	r3, r5, r2, r3
 8024072:	2b00      	cmp	r3, #0
 8024074:	bf14      	ite	ne
 8024076:	231c      	movne	r3, #28
 8024078:	231d      	moveq	r3, #29
 802407a:	e7d8      	b.n	802402e <validate_structure+0x106>
 802407c:	6921      	ldr	r1, [r4, #16]
 802407e:	3901      	subs	r1, #1
 8024080:	6121      	str	r1, [r4, #16]
 8024082:	3101      	adds	r1, #1
 8024084:	d114      	bne.n	80240b0 <validate_structure+0x188>
 8024086:	6963      	ldr	r3, [r4, #20]
 8024088:	1e5a      	subs	r2, r3, #1
 802408a:	0791      	lsls	r1, r2, #30
 802408c:	e9c4 6204 	strd	r6, r2, [r4, #16]
 8024090:	d117      	bne.n	80240c2 <validate_structure+0x19a>
 8024092:	fb92 f1f0 	sdiv	r1, r2, r0
 8024096:	fb00 2211 	mls	r2, r0, r1, r2
 802409a:	b9a2      	cbnz	r2, 80240c6 <validate_structure+0x19e>
 802409c:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80240a0:	fb93 f2f5 	sdiv	r2, r3, r5
 80240a4:	fb05 3312 	mls	r3, r5, r2, r3
 80240a8:	2b00      	cmp	r3, #0
 80240aa:	bf14      	ite	ne
 80240ac:	231c      	movne	r3, #28
 80240ae:	231d      	moveq	r3, #29
 80240b0:	6922      	ldr	r2, [r4, #16]
 80240b2:	2a01      	cmp	r2, #1
 80240b4:	bf14      	ite	ne
 80240b6:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
 80240ba:	461a      	moveq	r2, r3
 80240bc:	4462      	add	r2, ip
 80240be:	60e2      	str	r2, [r4, #12]
 80240c0:	e7a5      	b.n	802400e <validate_structure+0xe6>
 80240c2:	231c      	movs	r3, #28
 80240c4:	e7f4      	b.n	80240b0 <validate_structure+0x188>
 80240c6:	231d      	movs	r3, #29
 80240c8:	e7f2      	b.n	80240b0 <validate_structure+0x188>
 80240ca:	231c      	movs	r3, #28
 80240cc:	e7af      	b.n	802402e <validate_structure+0x106>
 80240ce:	231d      	movs	r3, #29
 80240d0:	e7ad      	b.n	802402e <validate_structure+0x106>
 80240d2:	bf00      	nop
 80240d4:	08045760 	.word	0x08045760

080240d8 <mktime>:
 80240d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80240dc:	b085      	sub	sp, #20
 80240de:	4607      	mov	r7, r0
 80240e0:	f003 fa1a 	bl	8027518 <__gettzinfo>
 80240e4:	4681      	mov	r9, r0
 80240e6:	4638      	mov	r0, r7
 80240e8:	f7ff ff1e 	bl	8023f28 <validate_structure>
 80240ec:	e9d7 4000 	ldrd	r4, r0, [r7]
 80240f0:	233c      	movs	r3, #60	; 0x3c
 80240f2:	fb03 4400 	mla	r4, r3, r0, r4
 80240f6:	68b8      	ldr	r0, [r7, #8]
 80240f8:	4abc      	ldr	r2, [pc, #752]	; (80243ec <mktime+0x314>)
 80240fa:	697e      	ldr	r6, [r7, #20]
 80240fc:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8024100:	fb03 4400 	mla	r4, r3, r0, r4
 8024104:	e9d7 5303 	ldrd	r5, r3, [r7, #12]
 8024108:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 802410c:	3d01      	subs	r5, #1
 802410e:	2b01      	cmp	r3, #1
 8024110:	4415      	add	r5, r2
 8024112:	dd11      	ble.n	8024138 <mktime+0x60>
 8024114:	07b1      	lsls	r1, r6, #30
 8024116:	d10f      	bne.n	8024138 <mktime+0x60>
 8024118:	2264      	movs	r2, #100	; 0x64
 802411a:	fb96 f3f2 	sdiv	r3, r6, r2
 802411e:	fb02 6313 	mls	r3, r2, r3, r6
 8024122:	b943      	cbnz	r3, 8024136 <mktime+0x5e>
 8024124:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8024128:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802412c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024130:	fb02 3311 	mls	r3, r2, r1, r3
 8024134:	b903      	cbnz	r3, 8024138 <mktime+0x60>
 8024136:	3501      	adds	r5, #1
 8024138:	f506 531c 	add.w	r3, r6, #9984	; 0x2700
 802413c:	3310      	adds	r3, #16
 802413e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8024142:	4293      	cmp	r3, r2
 8024144:	61fd      	str	r5, [r7, #28]
 8024146:	f200 815d 	bhi.w	8024404 <mktime+0x32c>
 802414a:	2e46      	cmp	r6, #70	; 0x46
 802414c:	dd71      	ble.n	8024232 <mktime+0x15a>
 802414e:	2346      	movs	r3, #70	; 0x46
 8024150:	f240 1c6d 	movw	ip, #365	; 0x16d
 8024154:	2164      	movs	r1, #100	; 0x64
 8024156:	f44f 70c8 	mov.w	r0, #400	; 0x190
 802415a:	079a      	lsls	r2, r3, #30
 802415c:	d163      	bne.n	8024226 <mktime+0x14e>
 802415e:	fb93 f2f1 	sdiv	r2, r3, r1
 8024162:	fb01 3212 	mls	r2, r1, r2, r3
 8024166:	2a00      	cmp	r2, #0
 8024168:	d160      	bne.n	802422c <mktime+0x154>
 802416a:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 802416e:	fb92 fef0 	sdiv	lr, r2, r0
 8024172:	fb00 221e 	mls	r2, r0, lr, r2
 8024176:	2a00      	cmp	r2, #0
 8024178:	bf14      	ite	ne
 802417a:	4662      	movne	r2, ip
 802417c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8024180:	3301      	adds	r3, #1
 8024182:	429e      	cmp	r6, r3
 8024184:	4415      	add	r5, r2
 8024186:	d1e8      	bne.n	802415a <mktime+0x82>
 8024188:	4b99      	ldr	r3, [pc, #612]	; (80243f0 <mktime+0x318>)
 802418a:	ea4f 78e4 	mov.w	r8, r4, asr #31
 802418e:	fbc5 4803 	smlal	r4, r8, r5, r3
 8024192:	f001 fffd 	bl	8026190 <__tz_lock>
 8024196:	f002 f807 	bl	80261a8 <_tzset_unlocked>
 802419a:	4b96      	ldr	r3, [pc, #600]	; (80243f4 <mktime+0x31c>)
 802419c:	f8d3 b000 	ldr.w	fp, [r3]
 80241a0:	f1bb 0f00 	cmp.w	fp, #0
 80241a4:	d039      	beq.n	802421a <mktime+0x142>
 80241a6:	f8d7 b020 	ldr.w	fp, [r7, #32]
 80241aa:	6978      	ldr	r0, [r7, #20]
 80241ac:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80241b0:	f1bb 0f01 	cmp.w	fp, #1
 80241b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80241b8:	46da      	mov	sl, fp
 80241ba:	bfa8      	it	ge
 80241bc:	f04f 0a01 	movge.w	sl, #1
 80241c0:	4283      	cmp	r3, r0
 80241c2:	d178      	bne.n	80242b6 <mktime+0x1de>
 80241c4:	e9d9 3208 	ldrd	r3, r2, [r9, #32]
 80241c8:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 80241cc:	f8d9 e04c 	ldr.w	lr, [r9, #76]	; 0x4c
 80241d0:	1a5b      	subs	r3, r3, r1
 80241d2:	9302      	str	r3, [sp, #8]
 80241d4:	eb62 73e1 	sbc.w	r3, r2, r1, asr #31
 80241d8:	9303      	str	r3, [sp, #12]
 80241da:	f8d9 2028 	ldr.w	r2, [r9, #40]	; 0x28
 80241de:	f8d9 3048 	ldr.w	r3, [r9, #72]	; 0x48
 80241e2:	9301      	str	r3, [sp, #4]
 80241e4:	ebb3 0c02 	subs.w	ip, r3, r2
 80241e8:	eb6e 70e2 	sbc.w	r0, lr, r2, asr #31
 80241ec:	4564      	cmp	r4, ip
 80241ee:	eb78 0300 	sbcs.w	r3, r8, r0
 80241f2:	da66      	bge.n	80242c2 <mktime+0x1ea>
 80241f4:	f8d9 3000 	ldr.w	r3, [r9]
 80241f8:	2b00      	cmp	r3, #0
 80241fa:	d06f      	beq.n	80242dc <mktime+0x204>
 80241fc:	9b02      	ldr	r3, [sp, #8]
 80241fe:	429c      	cmp	r4, r3
 8024200:	9b03      	ldr	r3, [sp, #12]
 8024202:	eb78 0303 	sbcs.w	r3, r8, r3
 8024206:	db03      	blt.n	8024210 <mktime+0x138>
 8024208:	4564      	cmp	r4, ip
 802420a:	eb78 0300 	sbcs.w	r3, r8, r0
 802420e:	db6b      	blt.n	80242e8 <mktime+0x210>
 8024210:	f1bb 0f00 	cmp.w	fp, #0
 8024214:	f04f 0b00 	mov.w	fp, #0
 8024218:	da6b      	bge.n	80242f2 <mktime+0x21a>
 802421a:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
 802421e:	190c      	adds	r4, r1, r4
 8024220:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8024224:	e0a9      	b.n	802437a <mktime+0x2a2>
 8024226:	f240 126d 	movw	r2, #365	; 0x16d
 802422a:	e7a9      	b.n	8024180 <mktime+0xa8>
 802422c:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024230:	e7a6      	b.n	8024180 <mktime+0xa8>
 8024232:	d0a9      	beq.n	8024188 <mktime+0xb0>
 8024234:	2345      	movs	r3, #69	; 0x45
 8024236:	f240 1c6d 	movw	ip, #365	; 0x16d
 802423a:	2164      	movs	r1, #100	; 0x64
 802423c:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8024240:	e012      	b.n	8024268 <mktime+0x190>
 8024242:	bb62      	cbnz	r2, 802429e <mktime+0x1c6>
 8024244:	fb93 f2f1 	sdiv	r2, r3, r1
 8024248:	fb01 3212 	mls	r2, r1, r2, r3
 802424c:	bb52      	cbnz	r2, 80242a4 <mktime+0x1cc>
 802424e:	f203 726c 	addw	r2, r3, #1900	; 0x76c
 8024252:	fb92 fef0 	sdiv	lr, r2, r0
 8024256:	fb00 221e 	mls	r2, r0, lr, r2
 802425a:	2a00      	cmp	r2, #0
 802425c:	bf14      	ite	ne
 802425e:	4662      	movne	r2, ip
 8024260:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8024264:	1aad      	subs	r5, r5, r2
 8024266:	3b01      	subs	r3, #1
 8024268:	429e      	cmp	r6, r3
 802426a:	f003 0203 	and.w	r2, r3, #3
 802426e:	dbe8      	blt.n	8024242 <mktime+0x16a>
 8024270:	b9da      	cbnz	r2, 80242aa <mktime+0x1d2>
 8024272:	2264      	movs	r2, #100	; 0x64
 8024274:	fb96 f3f2 	sdiv	r3, r6, r2
 8024278:	fb02 6313 	mls	r3, r2, r3, r6
 802427c:	b9c3      	cbnz	r3, 80242b0 <mktime+0x1d8>
 802427e:	f206 736c 	addw	r3, r6, #1900	; 0x76c
 8024282:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8024286:	fb93 f1f2 	sdiv	r1, r3, r2
 802428a:	fb02 3311 	mls	r3, r2, r1, r3
 802428e:	2b00      	cmp	r3, #0
 8024290:	f240 136d 	movw	r3, #365	; 0x16d
 8024294:	bf08      	it	eq
 8024296:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 802429a:	1aed      	subs	r5, r5, r3
 802429c:	e774      	b.n	8024188 <mktime+0xb0>
 802429e:	f240 126d 	movw	r2, #365	; 0x16d
 80242a2:	e7df      	b.n	8024264 <mktime+0x18c>
 80242a4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80242a8:	e7dc      	b.n	8024264 <mktime+0x18c>
 80242aa:	f240 136d 	movw	r3, #365	; 0x16d
 80242ae:	e7f4      	b.n	802429a <mktime+0x1c2>
 80242b0:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 80242b4:	e7f1      	b.n	802429a <mktime+0x1c2>
 80242b6:	f001 fec1 	bl	802603c <__tzcalc_limits>
 80242ba:	2800      	cmp	r0, #0
 80242bc:	d182      	bne.n	80241c4 <mktime+0xec>
 80242be:	46d3      	mov	fp, sl
 80242c0:	e050      	b.n	8024364 <mktime+0x28c>
 80242c2:	9b01      	ldr	r3, [sp, #4]
 80242c4:	1a5b      	subs	r3, r3, r1
 80242c6:	9301      	str	r3, [sp, #4]
 80242c8:	ea4f 73e1 	mov.w	r3, r1, asr #31
 80242cc:	eb6e 0e03 	sbc.w	lr, lr, r3
 80242d0:	9b01      	ldr	r3, [sp, #4]
 80242d2:	429c      	cmp	r4, r3
 80242d4:	eb78 030e 	sbcs.w	r3, r8, lr
 80242d8:	dbf1      	blt.n	80242be <mktime+0x1e6>
 80242da:	e78b      	b.n	80241f4 <mktime+0x11c>
 80242dc:	9b02      	ldr	r3, [sp, #8]
 80242de:	429c      	cmp	r4, r3
 80242e0:	9b03      	ldr	r3, [sp, #12]
 80242e2:	eb78 0303 	sbcs.w	r3, r8, r3
 80242e6:	db8f      	blt.n	8024208 <mktime+0x130>
 80242e8:	f1bb 0f00 	cmp.w	fp, #0
 80242ec:	db3e      	blt.n	802436c <mktime+0x294>
 80242ee:	f04f 0b01 	mov.w	fp, #1
 80242f2:	ea8a 0a0b 	eor.w	sl, sl, fp
 80242f6:	f1ba 0f01 	cmp.w	sl, #1
 80242fa:	d133      	bne.n	8024364 <mktime+0x28c>
 80242fc:	f1bb 0f00 	cmp.w	fp, #0
 8024300:	d04e      	beq.n	80243a0 <mktime+0x2c8>
 8024302:	1a52      	subs	r2, r2, r1
 8024304:	683b      	ldr	r3, [r7, #0]
 8024306:	f8d7 a00c 	ldr.w	sl, [r7, #12]
 802430a:	4413      	add	r3, r2
 802430c:	1914      	adds	r4, r2, r4
 802430e:	603b      	str	r3, [r7, #0]
 8024310:	4638      	mov	r0, r7
 8024312:	eb48 78e2 	adc.w	r8, r8, r2, asr #31
 8024316:	f7ff fe07 	bl	8023f28 <validate_structure>
 802431a:	68fa      	ldr	r2, [r7, #12]
 802431c:	ebb2 020a 	subs.w	r2, r2, sl
 8024320:	d020      	beq.n	8024364 <mktime+0x28c>
 8024322:	2a01      	cmp	r2, #1
 8024324:	dc3e      	bgt.n	80243a4 <mktime+0x2cc>
 8024326:	1c90      	adds	r0, r2, #2
 8024328:	bfd8      	it	le
 802432a:	2201      	movle	r2, #1
 802432c:	69fb      	ldr	r3, [r7, #28]
 802432e:	18d3      	adds	r3, r2, r3
 8024330:	4415      	add	r5, r2
 8024332:	d540      	bpl.n	80243b6 <mktime+0x2de>
 8024334:	1e73      	subs	r3, r6, #1
 8024336:	0799      	lsls	r1, r3, #30
 8024338:	d137      	bne.n	80243aa <mktime+0x2d2>
 802433a:	2264      	movs	r2, #100	; 0x64
 802433c:	fb93 f1f2 	sdiv	r1, r3, r2
 8024340:	fb02 3311 	mls	r3, r2, r1, r3
 8024344:	bba3      	cbnz	r3, 80243b0 <mktime+0x2d8>
 8024346:	f44f 73c8 	mov.w	r3, #400	; 0x190
 802434a:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 802434e:	fb96 f2f3 	sdiv	r2, r6, r3
 8024352:	fb03 6612 	mls	r6, r3, r2, r6
 8024356:	2e00      	cmp	r6, #0
 8024358:	f240 136d 	movw	r3, #365	; 0x16d
 802435c:	bf18      	it	ne
 802435e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8024362:	61fb      	str	r3, [r7, #28]
 8024364:	f1bb 0f01 	cmp.w	fp, #1
 8024368:	f47f af57 	bne.w	802421a <mktime+0x142>
 802436c:	f8d9 1050 	ldr.w	r1, [r9, #80]	; 0x50
 8024370:	190c      	adds	r4, r1, r4
 8024372:	eb48 78e1 	adc.w	r8, r8, r1, asr #31
 8024376:	f04f 0b01 	mov.w	fp, #1
 802437a:	f001 ff0f 	bl	802619c <__tz_unlock>
 802437e:	3504      	adds	r5, #4
 8024380:	2307      	movs	r3, #7
 8024382:	fb95 f3f3 	sdiv	r3, r5, r3
 8024386:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802438a:	1aed      	subs	r5, r5, r3
 802438c:	bf48      	it	mi
 802438e:	3507      	addmi	r5, #7
 8024390:	f8c7 b020 	str.w	fp, [r7, #32]
 8024394:	61bd      	str	r5, [r7, #24]
 8024396:	4620      	mov	r0, r4
 8024398:	4641      	mov	r1, r8
 802439a:	b005      	add	sp, #20
 802439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80243a0:	1a8a      	subs	r2, r1, r2
 80243a2:	e7af      	b.n	8024304 <mktime+0x22c>
 80243a4:	f04f 32ff 	mov.w	r2, #4294967295
 80243a8:	e7c0      	b.n	802432c <mktime+0x254>
 80243aa:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 80243ae:	e7d8      	b.n	8024362 <mktime+0x28a>
 80243b0:	f240 136d 	movw	r3, #365	; 0x16d
 80243b4:	e7d5      	b.n	8024362 <mktime+0x28a>
 80243b6:	07b2      	lsls	r2, r6, #30
 80243b8:	d11e      	bne.n	80243f8 <mktime+0x320>
 80243ba:	2164      	movs	r1, #100	; 0x64
 80243bc:	fb96 f2f1 	sdiv	r2, r6, r1
 80243c0:	fb01 6212 	mls	r2, r1, r2, r6
 80243c4:	b9da      	cbnz	r2, 80243fe <mktime+0x326>
 80243c6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80243ca:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 80243ce:	fb96 f1f2 	sdiv	r1, r6, r2
 80243d2:	fb02 6611 	mls	r6, r2, r1, r6
 80243d6:	2e00      	cmp	r6, #0
 80243d8:	f240 126d 	movw	r2, #365	; 0x16d
 80243dc:	bf08      	it	eq
 80243de:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80243e2:	4293      	cmp	r3, r2
 80243e4:	bfa8      	it	ge
 80243e6:	1a9b      	subge	r3, r3, r2
 80243e8:	e7bb      	b.n	8024362 <mktime+0x28a>
 80243ea:	bf00      	nop
 80243ec:	08045790 	.word	0x08045790
 80243f0:	00015180 	.word	0x00015180
 80243f4:	2003004c 	.word	0x2003004c
 80243f8:	f240 126d 	movw	r2, #365	; 0x16d
 80243fc:	e7f1      	b.n	80243e2 <mktime+0x30a>
 80243fe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8024402:	e7ee      	b.n	80243e2 <mktime+0x30a>
 8024404:	f04f 34ff 	mov.w	r4, #4294967295
 8024408:	46a0      	mov	r8, r4
 802440a:	e7c4      	b.n	8024396 <mktime+0x2be>

0802440c <_free_r>:
 802440c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802440e:	2900      	cmp	r1, #0
 8024410:	d044      	beq.n	802449c <_free_r+0x90>
 8024412:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8024416:	9001      	str	r0, [sp, #4]
 8024418:	2b00      	cmp	r3, #0
 802441a:	f1a1 0404 	sub.w	r4, r1, #4
 802441e:	bfb8      	it	lt
 8024420:	18e4      	addlt	r4, r4, r3
 8024422:	f003 f9a9 	bl	8027778 <__malloc_lock>
 8024426:	4a1e      	ldr	r2, [pc, #120]	; (80244a0 <_free_r+0x94>)
 8024428:	9801      	ldr	r0, [sp, #4]
 802442a:	6813      	ldr	r3, [r2, #0]
 802442c:	b933      	cbnz	r3, 802443c <_free_r+0x30>
 802442e:	6063      	str	r3, [r4, #4]
 8024430:	6014      	str	r4, [r2, #0]
 8024432:	b003      	add	sp, #12
 8024434:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8024438:	f003 b9a4 	b.w	8027784 <__malloc_unlock>
 802443c:	42a3      	cmp	r3, r4
 802443e:	d908      	bls.n	8024452 <_free_r+0x46>
 8024440:	6825      	ldr	r5, [r4, #0]
 8024442:	1961      	adds	r1, r4, r5
 8024444:	428b      	cmp	r3, r1
 8024446:	bf01      	itttt	eq
 8024448:	6819      	ldreq	r1, [r3, #0]
 802444a:	685b      	ldreq	r3, [r3, #4]
 802444c:	1949      	addeq	r1, r1, r5
 802444e:	6021      	streq	r1, [r4, #0]
 8024450:	e7ed      	b.n	802442e <_free_r+0x22>
 8024452:	461a      	mov	r2, r3
 8024454:	685b      	ldr	r3, [r3, #4]
 8024456:	b10b      	cbz	r3, 802445c <_free_r+0x50>
 8024458:	42a3      	cmp	r3, r4
 802445a:	d9fa      	bls.n	8024452 <_free_r+0x46>
 802445c:	6811      	ldr	r1, [r2, #0]
 802445e:	1855      	adds	r5, r2, r1
 8024460:	42a5      	cmp	r5, r4
 8024462:	d10b      	bne.n	802447c <_free_r+0x70>
 8024464:	6824      	ldr	r4, [r4, #0]
 8024466:	4421      	add	r1, r4
 8024468:	1854      	adds	r4, r2, r1
 802446a:	42a3      	cmp	r3, r4
 802446c:	6011      	str	r1, [r2, #0]
 802446e:	d1e0      	bne.n	8024432 <_free_r+0x26>
 8024470:	681c      	ldr	r4, [r3, #0]
 8024472:	685b      	ldr	r3, [r3, #4]
 8024474:	6053      	str	r3, [r2, #4]
 8024476:	4421      	add	r1, r4
 8024478:	6011      	str	r1, [r2, #0]
 802447a:	e7da      	b.n	8024432 <_free_r+0x26>
 802447c:	d902      	bls.n	8024484 <_free_r+0x78>
 802447e:	230c      	movs	r3, #12
 8024480:	6003      	str	r3, [r0, #0]
 8024482:	e7d6      	b.n	8024432 <_free_r+0x26>
 8024484:	6825      	ldr	r5, [r4, #0]
 8024486:	1961      	adds	r1, r4, r5
 8024488:	428b      	cmp	r3, r1
 802448a:	bf04      	itt	eq
 802448c:	6819      	ldreq	r1, [r3, #0]
 802448e:	685b      	ldreq	r3, [r3, #4]
 8024490:	6063      	str	r3, [r4, #4]
 8024492:	bf04      	itt	eq
 8024494:	1949      	addeq	r1, r1, r5
 8024496:	6021      	streq	r1, [r4, #0]
 8024498:	6054      	str	r4, [r2, #4]
 802449a:	e7ca      	b.n	8024432 <_free_r+0x26>
 802449c:	b003      	add	sp, #12
 802449e:	bd30      	pop	{r4, r5, pc}
 80244a0:	20030024 	.word	0x20030024

080244a4 <sbrk_aligned>:
 80244a4:	b570      	push	{r4, r5, r6, lr}
 80244a6:	4e0e      	ldr	r6, [pc, #56]	; (80244e0 <sbrk_aligned+0x3c>)
 80244a8:	460c      	mov	r4, r1
 80244aa:	6831      	ldr	r1, [r6, #0]
 80244ac:	4605      	mov	r5, r0
 80244ae:	b911      	cbnz	r1, 80244b6 <sbrk_aligned+0x12>
 80244b0:	f000 fe76 	bl	80251a0 <_sbrk_r>
 80244b4:	6030      	str	r0, [r6, #0]
 80244b6:	4621      	mov	r1, r4
 80244b8:	4628      	mov	r0, r5
 80244ba:	f000 fe71 	bl	80251a0 <_sbrk_r>
 80244be:	1c43      	adds	r3, r0, #1
 80244c0:	d00a      	beq.n	80244d8 <sbrk_aligned+0x34>
 80244c2:	1cc4      	adds	r4, r0, #3
 80244c4:	f024 0403 	bic.w	r4, r4, #3
 80244c8:	42a0      	cmp	r0, r4
 80244ca:	d007      	beq.n	80244dc <sbrk_aligned+0x38>
 80244cc:	1a21      	subs	r1, r4, r0
 80244ce:	4628      	mov	r0, r5
 80244d0:	f000 fe66 	bl	80251a0 <_sbrk_r>
 80244d4:	3001      	adds	r0, #1
 80244d6:	d101      	bne.n	80244dc <sbrk_aligned+0x38>
 80244d8:	f04f 34ff 	mov.w	r4, #4294967295
 80244dc:	4620      	mov	r0, r4
 80244de:	bd70      	pop	{r4, r5, r6, pc}
 80244e0:	20030028 	.word	0x20030028

080244e4 <_malloc_r>:
 80244e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244e8:	1ccd      	adds	r5, r1, #3
 80244ea:	f025 0503 	bic.w	r5, r5, #3
 80244ee:	3508      	adds	r5, #8
 80244f0:	2d0c      	cmp	r5, #12
 80244f2:	bf38      	it	cc
 80244f4:	250c      	movcc	r5, #12
 80244f6:	2d00      	cmp	r5, #0
 80244f8:	4607      	mov	r7, r0
 80244fa:	db01      	blt.n	8024500 <_malloc_r+0x1c>
 80244fc:	42a9      	cmp	r1, r5
 80244fe:	d905      	bls.n	802450c <_malloc_r+0x28>
 8024500:	230c      	movs	r3, #12
 8024502:	603b      	str	r3, [r7, #0]
 8024504:	2600      	movs	r6, #0
 8024506:	4630      	mov	r0, r6
 8024508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802450c:	4e2e      	ldr	r6, [pc, #184]	; (80245c8 <_malloc_r+0xe4>)
 802450e:	f003 f933 	bl	8027778 <__malloc_lock>
 8024512:	6833      	ldr	r3, [r6, #0]
 8024514:	461c      	mov	r4, r3
 8024516:	bb34      	cbnz	r4, 8024566 <_malloc_r+0x82>
 8024518:	4629      	mov	r1, r5
 802451a:	4638      	mov	r0, r7
 802451c:	f7ff ffc2 	bl	80244a4 <sbrk_aligned>
 8024520:	1c43      	adds	r3, r0, #1
 8024522:	4604      	mov	r4, r0
 8024524:	d14d      	bne.n	80245c2 <_malloc_r+0xde>
 8024526:	6834      	ldr	r4, [r6, #0]
 8024528:	4626      	mov	r6, r4
 802452a:	2e00      	cmp	r6, #0
 802452c:	d140      	bne.n	80245b0 <_malloc_r+0xcc>
 802452e:	6823      	ldr	r3, [r4, #0]
 8024530:	4631      	mov	r1, r6
 8024532:	4638      	mov	r0, r7
 8024534:	eb04 0803 	add.w	r8, r4, r3
 8024538:	f000 fe32 	bl	80251a0 <_sbrk_r>
 802453c:	4580      	cmp	r8, r0
 802453e:	d13a      	bne.n	80245b6 <_malloc_r+0xd2>
 8024540:	6821      	ldr	r1, [r4, #0]
 8024542:	3503      	adds	r5, #3
 8024544:	1a6d      	subs	r5, r5, r1
 8024546:	f025 0503 	bic.w	r5, r5, #3
 802454a:	3508      	adds	r5, #8
 802454c:	2d0c      	cmp	r5, #12
 802454e:	bf38      	it	cc
 8024550:	250c      	movcc	r5, #12
 8024552:	4629      	mov	r1, r5
 8024554:	4638      	mov	r0, r7
 8024556:	f7ff ffa5 	bl	80244a4 <sbrk_aligned>
 802455a:	3001      	adds	r0, #1
 802455c:	d02b      	beq.n	80245b6 <_malloc_r+0xd2>
 802455e:	6823      	ldr	r3, [r4, #0]
 8024560:	442b      	add	r3, r5
 8024562:	6023      	str	r3, [r4, #0]
 8024564:	e00e      	b.n	8024584 <_malloc_r+0xa0>
 8024566:	6822      	ldr	r2, [r4, #0]
 8024568:	1b52      	subs	r2, r2, r5
 802456a:	d41e      	bmi.n	80245aa <_malloc_r+0xc6>
 802456c:	2a0b      	cmp	r2, #11
 802456e:	d916      	bls.n	802459e <_malloc_r+0xba>
 8024570:	1961      	adds	r1, r4, r5
 8024572:	42a3      	cmp	r3, r4
 8024574:	6025      	str	r5, [r4, #0]
 8024576:	bf18      	it	ne
 8024578:	6059      	strne	r1, [r3, #4]
 802457a:	6863      	ldr	r3, [r4, #4]
 802457c:	bf08      	it	eq
 802457e:	6031      	streq	r1, [r6, #0]
 8024580:	5162      	str	r2, [r4, r5]
 8024582:	604b      	str	r3, [r1, #4]
 8024584:	4638      	mov	r0, r7
 8024586:	f104 060b 	add.w	r6, r4, #11
 802458a:	f003 f8fb 	bl	8027784 <__malloc_unlock>
 802458e:	f026 0607 	bic.w	r6, r6, #7
 8024592:	1d23      	adds	r3, r4, #4
 8024594:	1af2      	subs	r2, r6, r3
 8024596:	d0b6      	beq.n	8024506 <_malloc_r+0x22>
 8024598:	1b9b      	subs	r3, r3, r6
 802459a:	50a3      	str	r3, [r4, r2]
 802459c:	e7b3      	b.n	8024506 <_malloc_r+0x22>
 802459e:	6862      	ldr	r2, [r4, #4]
 80245a0:	42a3      	cmp	r3, r4
 80245a2:	bf0c      	ite	eq
 80245a4:	6032      	streq	r2, [r6, #0]
 80245a6:	605a      	strne	r2, [r3, #4]
 80245a8:	e7ec      	b.n	8024584 <_malloc_r+0xa0>
 80245aa:	4623      	mov	r3, r4
 80245ac:	6864      	ldr	r4, [r4, #4]
 80245ae:	e7b2      	b.n	8024516 <_malloc_r+0x32>
 80245b0:	4634      	mov	r4, r6
 80245b2:	6876      	ldr	r6, [r6, #4]
 80245b4:	e7b9      	b.n	802452a <_malloc_r+0x46>
 80245b6:	230c      	movs	r3, #12
 80245b8:	603b      	str	r3, [r7, #0]
 80245ba:	4638      	mov	r0, r7
 80245bc:	f003 f8e2 	bl	8027784 <__malloc_unlock>
 80245c0:	e7a1      	b.n	8024506 <_malloc_r+0x22>
 80245c2:	6025      	str	r5, [r4, #0]
 80245c4:	e7de      	b.n	8024584 <_malloc_r+0xa0>
 80245c6:	bf00      	nop
 80245c8:	20030024 	.word	0x20030024

080245cc <__cvt>:
 80245cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245ce:	ed2d 8b02 	vpush	{d8}
 80245d2:	eeb0 8b40 	vmov.f64	d8, d0
 80245d6:	b085      	sub	sp, #20
 80245d8:	4617      	mov	r7, r2
 80245da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80245dc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80245de:	ee18 2a90 	vmov	r2, s17
 80245e2:	f025 0520 	bic.w	r5, r5, #32
 80245e6:	2a00      	cmp	r2, #0
 80245e8:	bfb6      	itet	lt
 80245ea:	222d      	movlt	r2, #45	; 0x2d
 80245ec:	2200      	movge	r2, #0
 80245ee:	eeb1 8b40 	vneglt.f64	d8, d0
 80245f2:	2d46      	cmp	r5, #70	; 0x46
 80245f4:	460c      	mov	r4, r1
 80245f6:	701a      	strb	r2, [r3, #0]
 80245f8:	d004      	beq.n	8024604 <__cvt+0x38>
 80245fa:	2d45      	cmp	r5, #69	; 0x45
 80245fc:	d100      	bne.n	8024600 <__cvt+0x34>
 80245fe:	3401      	adds	r4, #1
 8024600:	2102      	movs	r1, #2
 8024602:	e000      	b.n	8024606 <__cvt+0x3a>
 8024604:	2103      	movs	r1, #3
 8024606:	ab03      	add	r3, sp, #12
 8024608:	9301      	str	r3, [sp, #4]
 802460a:	ab02      	add	r3, sp, #8
 802460c:	9300      	str	r3, [sp, #0]
 802460e:	4622      	mov	r2, r4
 8024610:	4633      	mov	r3, r6
 8024612:	eeb0 0b48 	vmov.f64	d0, d8
 8024616:	f002 f8f3 	bl	8026800 <_dtoa_r>
 802461a:	2d47      	cmp	r5, #71	; 0x47
 802461c:	d101      	bne.n	8024622 <__cvt+0x56>
 802461e:	07fb      	lsls	r3, r7, #31
 8024620:	d51a      	bpl.n	8024658 <__cvt+0x8c>
 8024622:	2d46      	cmp	r5, #70	; 0x46
 8024624:	eb00 0204 	add.w	r2, r0, r4
 8024628:	d10c      	bne.n	8024644 <__cvt+0x78>
 802462a:	7803      	ldrb	r3, [r0, #0]
 802462c:	2b30      	cmp	r3, #48	; 0x30
 802462e:	d107      	bne.n	8024640 <__cvt+0x74>
 8024630:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024638:	bf1c      	itt	ne
 802463a:	f1c4 0401 	rsbne	r4, r4, #1
 802463e:	6034      	strne	r4, [r6, #0]
 8024640:	6833      	ldr	r3, [r6, #0]
 8024642:	441a      	add	r2, r3
 8024644:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8024648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802464c:	bf08      	it	eq
 802464e:	9203      	streq	r2, [sp, #12]
 8024650:	2130      	movs	r1, #48	; 0x30
 8024652:	9b03      	ldr	r3, [sp, #12]
 8024654:	4293      	cmp	r3, r2
 8024656:	d307      	bcc.n	8024668 <__cvt+0x9c>
 8024658:	9b03      	ldr	r3, [sp, #12]
 802465a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802465c:	1a1b      	subs	r3, r3, r0
 802465e:	6013      	str	r3, [r2, #0]
 8024660:	b005      	add	sp, #20
 8024662:	ecbd 8b02 	vpop	{d8}
 8024666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024668:	1c5c      	adds	r4, r3, #1
 802466a:	9403      	str	r4, [sp, #12]
 802466c:	7019      	strb	r1, [r3, #0]
 802466e:	e7f0      	b.n	8024652 <__cvt+0x86>

08024670 <__exponent>:
 8024670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8024672:	4603      	mov	r3, r0
 8024674:	2900      	cmp	r1, #0
 8024676:	bfb8      	it	lt
 8024678:	4249      	neglt	r1, r1
 802467a:	f803 2b02 	strb.w	r2, [r3], #2
 802467e:	bfb4      	ite	lt
 8024680:	222d      	movlt	r2, #45	; 0x2d
 8024682:	222b      	movge	r2, #43	; 0x2b
 8024684:	2909      	cmp	r1, #9
 8024686:	7042      	strb	r2, [r0, #1]
 8024688:	dd2a      	ble.n	80246e0 <__exponent+0x70>
 802468a:	f10d 0407 	add.w	r4, sp, #7
 802468e:	46a4      	mov	ip, r4
 8024690:	270a      	movs	r7, #10
 8024692:	46a6      	mov	lr, r4
 8024694:	460a      	mov	r2, r1
 8024696:	fb91 f6f7 	sdiv	r6, r1, r7
 802469a:	fb07 1516 	mls	r5, r7, r6, r1
 802469e:	3530      	adds	r5, #48	; 0x30
 80246a0:	2a63      	cmp	r2, #99	; 0x63
 80246a2:	f104 34ff 	add.w	r4, r4, #4294967295
 80246a6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80246aa:	4631      	mov	r1, r6
 80246ac:	dcf1      	bgt.n	8024692 <__exponent+0x22>
 80246ae:	3130      	adds	r1, #48	; 0x30
 80246b0:	f1ae 0502 	sub.w	r5, lr, #2
 80246b4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80246b8:	1c44      	adds	r4, r0, #1
 80246ba:	4629      	mov	r1, r5
 80246bc:	4561      	cmp	r1, ip
 80246be:	d30a      	bcc.n	80246d6 <__exponent+0x66>
 80246c0:	f10d 0209 	add.w	r2, sp, #9
 80246c4:	eba2 020e 	sub.w	r2, r2, lr
 80246c8:	4565      	cmp	r5, ip
 80246ca:	bf88      	it	hi
 80246cc:	2200      	movhi	r2, #0
 80246ce:	4413      	add	r3, r2
 80246d0:	1a18      	subs	r0, r3, r0
 80246d2:	b003      	add	sp, #12
 80246d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80246d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80246da:	f804 2f01 	strb.w	r2, [r4, #1]!
 80246de:	e7ed      	b.n	80246bc <__exponent+0x4c>
 80246e0:	2330      	movs	r3, #48	; 0x30
 80246e2:	3130      	adds	r1, #48	; 0x30
 80246e4:	7083      	strb	r3, [r0, #2]
 80246e6:	70c1      	strb	r1, [r0, #3]
 80246e8:	1d03      	adds	r3, r0, #4
 80246ea:	e7f1      	b.n	80246d0 <__exponent+0x60>
 80246ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

080246f0 <_printf_float>:
 80246f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80246f4:	b08b      	sub	sp, #44	; 0x2c
 80246f6:	460c      	mov	r4, r1
 80246f8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 80246fc:	4616      	mov	r6, r2
 80246fe:	461f      	mov	r7, r3
 8024700:	4605      	mov	r5, r0
 8024702:	f002 ffbd 	bl	8027680 <_localeconv_r>
 8024706:	f8d0 b000 	ldr.w	fp, [r0]
 802470a:	4658      	mov	r0, fp
 802470c:	f7db fda2 	bl	8000254 <strlen>
 8024710:	2300      	movs	r3, #0
 8024712:	9308      	str	r3, [sp, #32]
 8024714:	f8d8 3000 	ldr.w	r3, [r8]
 8024718:	f894 9018 	ldrb.w	r9, [r4, #24]
 802471c:	6822      	ldr	r2, [r4, #0]
 802471e:	3307      	adds	r3, #7
 8024720:	f023 0307 	bic.w	r3, r3, #7
 8024724:	f103 0108 	add.w	r1, r3, #8
 8024728:	f8c8 1000 	str.w	r1, [r8]
 802472c:	4682      	mov	sl, r0
 802472e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8024732:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8024736:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8024998 <_printf_float+0x2a8>
 802473a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 802473e:	eeb0 6bc0 	vabs.f64	d6, d0
 8024742:	eeb4 6b47 	vcmp.f64	d6, d7
 8024746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802474a:	dd24      	ble.n	8024796 <_printf_float+0xa6>
 802474c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8024750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024754:	d502      	bpl.n	802475c <_printf_float+0x6c>
 8024756:	232d      	movs	r3, #45	; 0x2d
 8024758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802475c:	4b90      	ldr	r3, [pc, #576]	; (80249a0 <_printf_float+0x2b0>)
 802475e:	4891      	ldr	r0, [pc, #580]	; (80249a4 <_printf_float+0x2b4>)
 8024760:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8024764:	bf94      	ite	ls
 8024766:	4698      	movls	r8, r3
 8024768:	4680      	movhi	r8, r0
 802476a:	2303      	movs	r3, #3
 802476c:	6123      	str	r3, [r4, #16]
 802476e:	f022 0204 	bic.w	r2, r2, #4
 8024772:	2300      	movs	r3, #0
 8024774:	6022      	str	r2, [r4, #0]
 8024776:	9304      	str	r3, [sp, #16]
 8024778:	9700      	str	r7, [sp, #0]
 802477a:	4633      	mov	r3, r6
 802477c:	aa09      	add	r2, sp, #36	; 0x24
 802477e:	4621      	mov	r1, r4
 8024780:	4628      	mov	r0, r5
 8024782:	f000 f9d3 	bl	8024b2c <_printf_common>
 8024786:	3001      	adds	r0, #1
 8024788:	f040 808a 	bne.w	80248a0 <_printf_float+0x1b0>
 802478c:	f04f 30ff 	mov.w	r0, #4294967295
 8024790:	b00b      	add	sp, #44	; 0x2c
 8024792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024796:	eeb4 0b40 	vcmp.f64	d0, d0
 802479a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802479e:	d709      	bvc.n	80247b4 <_printf_float+0xc4>
 80247a0:	ee10 3a90 	vmov	r3, s1
 80247a4:	2b00      	cmp	r3, #0
 80247a6:	bfbc      	itt	lt
 80247a8:	232d      	movlt	r3, #45	; 0x2d
 80247aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80247ae:	487e      	ldr	r0, [pc, #504]	; (80249a8 <_printf_float+0x2b8>)
 80247b0:	4b7e      	ldr	r3, [pc, #504]	; (80249ac <_printf_float+0x2bc>)
 80247b2:	e7d5      	b.n	8024760 <_printf_float+0x70>
 80247b4:	6863      	ldr	r3, [r4, #4]
 80247b6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80247ba:	9104      	str	r1, [sp, #16]
 80247bc:	1c59      	adds	r1, r3, #1
 80247be:	d13c      	bne.n	802483a <_printf_float+0x14a>
 80247c0:	2306      	movs	r3, #6
 80247c2:	6063      	str	r3, [r4, #4]
 80247c4:	2300      	movs	r3, #0
 80247c6:	9303      	str	r3, [sp, #12]
 80247c8:	ab08      	add	r3, sp, #32
 80247ca:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80247ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80247d2:	ab07      	add	r3, sp, #28
 80247d4:	6861      	ldr	r1, [r4, #4]
 80247d6:	9300      	str	r3, [sp, #0]
 80247d8:	6022      	str	r2, [r4, #0]
 80247da:	f10d 031b 	add.w	r3, sp, #27
 80247de:	4628      	mov	r0, r5
 80247e0:	f7ff fef4 	bl	80245cc <__cvt>
 80247e4:	9b04      	ldr	r3, [sp, #16]
 80247e6:	9907      	ldr	r1, [sp, #28]
 80247e8:	2b47      	cmp	r3, #71	; 0x47
 80247ea:	4680      	mov	r8, r0
 80247ec:	d108      	bne.n	8024800 <_printf_float+0x110>
 80247ee:	1cc8      	adds	r0, r1, #3
 80247f0:	db02      	blt.n	80247f8 <_printf_float+0x108>
 80247f2:	6863      	ldr	r3, [r4, #4]
 80247f4:	4299      	cmp	r1, r3
 80247f6:	dd41      	ble.n	802487c <_printf_float+0x18c>
 80247f8:	f1a9 0902 	sub.w	r9, r9, #2
 80247fc:	fa5f f989 	uxtb.w	r9, r9
 8024800:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8024804:	d820      	bhi.n	8024848 <_printf_float+0x158>
 8024806:	3901      	subs	r1, #1
 8024808:	464a      	mov	r2, r9
 802480a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 802480e:	9107      	str	r1, [sp, #28]
 8024810:	f7ff ff2e 	bl	8024670 <__exponent>
 8024814:	9a08      	ldr	r2, [sp, #32]
 8024816:	9004      	str	r0, [sp, #16]
 8024818:	1813      	adds	r3, r2, r0
 802481a:	2a01      	cmp	r2, #1
 802481c:	6123      	str	r3, [r4, #16]
 802481e:	dc02      	bgt.n	8024826 <_printf_float+0x136>
 8024820:	6822      	ldr	r2, [r4, #0]
 8024822:	07d2      	lsls	r2, r2, #31
 8024824:	d501      	bpl.n	802482a <_printf_float+0x13a>
 8024826:	3301      	adds	r3, #1
 8024828:	6123      	str	r3, [r4, #16]
 802482a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 802482e:	2b00      	cmp	r3, #0
 8024830:	d0a2      	beq.n	8024778 <_printf_float+0x88>
 8024832:	232d      	movs	r3, #45	; 0x2d
 8024834:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024838:	e79e      	b.n	8024778 <_printf_float+0x88>
 802483a:	9904      	ldr	r1, [sp, #16]
 802483c:	2947      	cmp	r1, #71	; 0x47
 802483e:	d1c1      	bne.n	80247c4 <_printf_float+0xd4>
 8024840:	2b00      	cmp	r3, #0
 8024842:	d1bf      	bne.n	80247c4 <_printf_float+0xd4>
 8024844:	2301      	movs	r3, #1
 8024846:	e7bc      	b.n	80247c2 <_printf_float+0xd2>
 8024848:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 802484c:	d118      	bne.n	8024880 <_printf_float+0x190>
 802484e:	2900      	cmp	r1, #0
 8024850:	6863      	ldr	r3, [r4, #4]
 8024852:	dd0b      	ble.n	802486c <_printf_float+0x17c>
 8024854:	6121      	str	r1, [r4, #16]
 8024856:	b913      	cbnz	r3, 802485e <_printf_float+0x16e>
 8024858:	6822      	ldr	r2, [r4, #0]
 802485a:	07d0      	lsls	r0, r2, #31
 802485c:	d502      	bpl.n	8024864 <_printf_float+0x174>
 802485e:	3301      	adds	r3, #1
 8024860:	440b      	add	r3, r1
 8024862:	6123      	str	r3, [r4, #16]
 8024864:	2300      	movs	r3, #0
 8024866:	65a1      	str	r1, [r4, #88]	; 0x58
 8024868:	9304      	str	r3, [sp, #16]
 802486a:	e7de      	b.n	802482a <_printf_float+0x13a>
 802486c:	b913      	cbnz	r3, 8024874 <_printf_float+0x184>
 802486e:	6822      	ldr	r2, [r4, #0]
 8024870:	07d2      	lsls	r2, r2, #31
 8024872:	d501      	bpl.n	8024878 <_printf_float+0x188>
 8024874:	3302      	adds	r3, #2
 8024876:	e7f4      	b.n	8024862 <_printf_float+0x172>
 8024878:	2301      	movs	r3, #1
 802487a:	e7f2      	b.n	8024862 <_printf_float+0x172>
 802487c:	f04f 0967 	mov.w	r9, #103	; 0x67
 8024880:	9b08      	ldr	r3, [sp, #32]
 8024882:	4299      	cmp	r1, r3
 8024884:	db05      	blt.n	8024892 <_printf_float+0x1a2>
 8024886:	6823      	ldr	r3, [r4, #0]
 8024888:	6121      	str	r1, [r4, #16]
 802488a:	07d8      	lsls	r0, r3, #31
 802488c:	d5ea      	bpl.n	8024864 <_printf_float+0x174>
 802488e:	1c4b      	adds	r3, r1, #1
 8024890:	e7e7      	b.n	8024862 <_printf_float+0x172>
 8024892:	2900      	cmp	r1, #0
 8024894:	bfd4      	ite	le
 8024896:	f1c1 0202 	rsble	r2, r1, #2
 802489a:	2201      	movgt	r2, #1
 802489c:	4413      	add	r3, r2
 802489e:	e7e0      	b.n	8024862 <_printf_float+0x172>
 80248a0:	6823      	ldr	r3, [r4, #0]
 80248a2:	055a      	lsls	r2, r3, #21
 80248a4:	d407      	bmi.n	80248b6 <_printf_float+0x1c6>
 80248a6:	6923      	ldr	r3, [r4, #16]
 80248a8:	4642      	mov	r2, r8
 80248aa:	4631      	mov	r1, r6
 80248ac:	4628      	mov	r0, r5
 80248ae:	47b8      	blx	r7
 80248b0:	3001      	adds	r0, #1
 80248b2:	d12a      	bne.n	802490a <_printf_float+0x21a>
 80248b4:	e76a      	b.n	802478c <_printf_float+0x9c>
 80248b6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80248ba:	f240 80e2 	bls.w	8024a82 <_printf_float+0x392>
 80248be:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80248c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80248c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80248ca:	d133      	bne.n	8024934 <_printf_float+0x244>
 80248cc:	4a38      	ldr	r2, [pc, #224]	; (80249b0 <_printf_float+0x2c0>)
 80248ce:	2301      	movs	r3, #1
 80248d0:	4631      	mov	r1, r6
 80248d2:	4628      	mov	r0, r5
 80248d4:	47b8      	blx	r7
 80248d6:	3001      	adds	r0, #1
 80248d8:	f43f af58 	beq.w	802478c <_printf_float+0x9c>
 80248dc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80248e0:	429a      	cmp	r2, r3
 80248e2:	db02      	blt.n	80248ea <_printf_float+0x1fa>
 80248e4:	6823      	ldr	r3, [r4, #0]
 80248e6:	07d8      	lsls	r0, r3, #31
 80248e8:	d50f      	bpl.n	802490a <_printf_float+0x21a>
 80248ea:	4653      	mov	r3, sl
 80248ec:	465a      	mov	r2, fp
 80248ee:	4631      	mov	r1, r6
 80248f0:	4628      	mov	r0, r5
 80248f2:	47b8      	blx	r7
 80248f4:	3001      	adds	r0, #1
 80248f6:	f43f af49 	beq.w	802478c <_printf_float+0x9c>
 80248fa:	f04f 0800 	mov.w	r8, #0
 80248fe:	f104 091a 	add.w	r9, r4, #26
 8024902:	9b08      	ldr	r3, [sp, #32]
 8024904:	3b01      	subs	r3, #1
 8024906:	4543      	cmp	r3, r8
 8024908:	dc09      	bgt.n	802491e <_printf_float+0x22e>
 802490a:	6823      	ldr	r3, [r4, #0]
 802490c:	079b      	lsls	r3, r3, #30
 802490e:	f100 8108 	bmi.w	8024b22 <_printf_float+0x432>
 8024912:	68e0      	ldr	r0, [r4, #12]
 8024914:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024916:	4298      	cmp	r0, r3
 8024918:	bfb8      	it	lt
 802491a:	4618      	movlt	r0, r3
 802491c:	e738      	b.n	8024790 <_printf_float+0xa0>
 802491e:	2301      	movs	r3, #1
 8024920:	464a      	mov	r2, r9
 8024922:	4631      	mov	r1, r6
 8024924:	4628      	mov	r0, r5
 8024926:	47b8      	blx	r7
 8024928:	3001      	adds	r0, #1
 802492a:	f43f af2f 	beq.w	802478c <_printf_float+0x9c>
 802492e:	f108 0801 	add.w	r8, r8, #1
 8024932:	e7e6      	b.n	8024902 <_printf_float+0x212>
 8024934:	9b07      	ldr	r3, [sp, #28]
 8024936:	2b00      	cmp	r3, #0
 8024938:	dc3c      	bgt.n	80249b4 <_printf_float+0x2c4>
 802493a:	4a1d      	ldr	r2, [pc, #116]	; (80249b0 <_printf_float+0x2c0>)
 802493c:	2301      	movs	r3, #1
 802493e:	4631      	mov	r1, r6
 8024940:	4628      	mov	r0, r5
 8024942:	47b8      	blx	r7
 8024944:	3001      	adds	r0, #1
 8024946:	f43f af21 	beq.w	802478c <_printf_float+0x9c>
 802494a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 802494e:	4313      	orrs	r3, r2
 8024950:	d102      	bne.n	8024958 <_printf_float+0x268>
 8024952:	6823      	ldr	r3, [r4, #0]
 8024954:	07d9      	lsls	r1, r3, #31
 8024956:	d5d8      	bpl.n	802490a <_printf_float+0x21a>
 8024958:	4653      	mov	r3, sl
 802495a:	465a      	mov	r2, fp
 802495c:	4631      	mov	r1, r6
 802495e:	4628      	mov	r0, r5
 8024960:	47b8      	blx	r7
 8024962:	3001      	adds	r0, #1
 8024964:	f43f af12 	beq.w	802478c <_printf_float+0x9c>
 8024968:	f04f 0900 	mov.w	r9, #0
 802496c:	f104 0a1a 	add.w	sl, r4, #26
 8024970:	9b07      	ldr	r3, [sp, #28]
 8024972:	425b      	negs	r3, r3
 8024974:	454b      	cmp	r3, r9
 8024976:	dc01      	bgt.n	802497c <_printf_float+0x28c>
 8024978:	9b08      	ldr	r3, [sp, #32]
 802497a:	e795      	b.n	80248a8 <_printf_float+0x1b8>
 802497c:	2301      	movs	r3, #1
 802497e:	4652      	mov	r2, sl
 8024980:	4631      	mov	r1, r6
 8024982:	4628      	mov	r0, r5
 8024984:	47b8      	blx	r7
 8024986:	3001      	adds	r0, #1
 8024988:	f43f af00 	beq.w	802478c <_printf_float+0x9c>
 802498c:	f109 0901 	add.w	r9, r9, #1
 8024990:	e7ee      	b.n	8024970 <_printf_float+0x280>
 8024992:	bf00      	nop
 8024994:	f3af 8000 	nop.w
 8024998:	ffffffff 	.word	0xffffffff
 802499c:	7fefffff 	.word	0x7fefffff
 80249a0:	08045820 	.word	0x08045820
 80249a4:	08045824 	.word	0x08045824
 80249a8:	0804582c 	.word	0x0804582c
 80249ac:	08045828 	.word	0x08045828
 80249b0:	08045d91 	.word	0x08045d91
 80249b4:	9a08      	ldr	r2, [sp, #32]
 80249b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80249b8:	429a      	cmp	r2, r3
 80249ba:	bfa8      	it	ge
 80249bc:	461a      	movge	r2, r3
 80249be:	2a00      	cmp	r2, #0
 80249c0:	4691      	mov	r9, r2
 80249c2:	dc38      	bgt.n	8024a36 <_printf_float+0x346>
 80249c4:	2300      	movs	r3, #0
 80249c6:	9305      	str	r3, [sp, #20]
 80249c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80249cc:	f104 021a 	add.w	r2, r4, #26
 80249d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80249d2:	9905      	ldr	r1, [sp, #20]
 80249d4:	9304      	str	r3, [sp, #16]
 80249d6:	eba3 0309 	sub.w	r3, r3, r9
 80249da:	428b      	cmp	r3, r1
 80249dc:	dc33      	bgt.n	8024a46 <_printf_float+0x356>
 80249de:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80249e2:	429a      	cmp	r2, r3
 80249e4:	db3c      	blt.n	8024a60 <_printf_float+0x370>
 80249e6:	6823      	ldr	r3, [r4, #0]
 80249e8:	07da      	lsls	r2, r3, #31
 80249ea:	d439      	bmi.n	8024a60 <_printf_float+0x370>
 80249ec:	9b08      	ldr	r3, [sp, #32]
 80249ee:	9a04      	ldr	r2, [sp, #16]
 80249f0:	9907      	ldr	r1, [sp, #28]
 80249f2:	1a9a      	subs	r2, r3, r2
 80249f4:	eba3 0901 	sub.w	r9, r3, r1
 80249f8:	4591      	cmp	r9, r2
 80249fa:	bfa8      	it	ge
 80249fc:	4691      	movge	r9, r2
 80249fe:	f1b9 0f00 	cmp.w	r9, #0
 8024a02:	dc35      	bgt.n	8024a70 <_printf_float+0x380>
 8024a04:	f04f 0800 	mov.w	r8, #0
 8024a08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8024a0c:	f104 0a1a 	add.w	sl, r4, #26
 8024a10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024a14:	1a9b      	subs	r3, r3, r2
 8024a16:	eba3 0309 	sub.w	r3, r3, r9
 8024a1a:	4543      	cmp	r3, r8
 8024a1c:	f77f af75 	ble.w	802490a <_printf_float+0x21a>
 8024a20:	2301      	movs	r3, #1
 8024a22:	4652      	mov	r2, sl
 8024a24:	4631      	mov	r1, r6
 8024a26:	4628      	mov	r0, r5
 8024a28:	47b8      	blx	r7
 8024a2a:	3001      	adds	r0, #1
 8024a2c:	f43f aeae 	beq.w	802478c <_printf_float+0x9c>
 8024a30:	f108 0801 	add.w	r8, r8, #1
 8024a34:	e7ec      	b.n	8024a10 <_printf_float+0x320>
 8024a36:	4613      	mov	r3, r2
 8024a38:	4631      	mov	r1, r6
 8024a3a:	4642      	mov	r2, r8
 8024a3c:	4628      	mov	r0, r5
 8024a3e:	47b8      	blx	r7
 8024a40:	3001      	adds	r0, #1
 8024a42:	d1bf      	bne.n	80249c4 <_printf_float+0x2d4>
 8024a44:	e6a2      	b.n	802478c <_printf_float+0x9c>
 8024a46:	2301      	movs	r3, #1
 8024a48:	4631      	mov	r1, r6
 8024a4a:	4628      	mov	r0, r5
 8024a4c:	9204      	str	r2, [sp, #16]
 8024a4e:	47b8      	blx	r7
 8024a50:	3001      	adds	r0, #1
 8024a52:	f43f ae9b 	beq.w	802478c <_printf_float+0x9c>
 8024a56:	9b05      	ldr	r3, [sp, #20]
 8024a58:	9a04      	ldr	r2, [sp, #16]
 8024a5a:	3301      	adds	r3, #1
 8024a5c:	9305      	str	r3, [sp, #20]
 8024a5e:	e7b7      	b.n	80249d0 <_printf_float+0x2e0>
 8024a60:	4653      	mov	r3, sl
 8024a62:	465a      	mov	r2, fp
 8024a64:	4631      	mov	r1, r6
 8024a66:	4628      	mov	r0, r5
 8024a68:	47b8      	blx	r7
 8024a6a:	3001      	adds	r0, #1
 8024a6c:	d1be      	bne.n	80249ec <_printf_float+0x2fc>
 8024a6e:	e68d      	b.n	802478c <_printf_float+0x9c>
 8024a70:	9a04      	ldr	r2, [sp, #16]
 8024a72:	464b      	mov	r3, r9
 8024a74:	4442      	add	r2, r8
 8024a76:	4631      	mov	r1, r6
 8024a78:	4628      	mov	r0, r5
 8024a7a:	47b8      	blx	r7
 8024a7c:	3001      	adds	r0, #1
 8024a7e:	d1c1      	bne.n	8024a04 <_printf_float+0x314>
 8024a80:	e684      	b.n	802478c <_printf_float+0x9c>
 8024a82:	9a08      	ldr	r2, [sp, #32]
 8024a84:	2a01      	cmp	r2, #1
 8024a86:	dc01      	bgt.n	8024a8c <_printf_float+0x39c>
 8024a88:	07db      	lsls	r3, r3, #31
 8024a8a:	d537      	bpl.n	8024afc <_printf_float+0x40c>
 8024a8c:	2301      	movs	r3, #1
 8024a8e:	4642      	mov	r2, r8
 8024a90:	4631      	mov	r1, r6
 8024a92:	4628      	mov	r0, r5
 8024a94:	47b8      	blx	r7
 8024a96:	3001      	adds	r0, #1
 8024a98:	f43f ae78 	beq.w	802478c <_printf_float+0x9c>
 8024a9c:	4653      	mov	r3, sl
 8024a9e:	465a      	mov	r2, fp
 8024aa0:	4631      	mov	r1, r6
 8024aa2:	4628      	mov	r0, r5
 8024aa4:	47b8      	blx	r7
 8024aa6:	3001      	adds	r0, #1
 8024aa8:	f43f ae70 	beq.w	802478c <_printf_float+0x9c>
 8024aac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8024ab0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8024ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8024ab8:	d01b      	beq.n	8024af2 <_printf_float+0x402>
 8024aba:	9b08      	ldr	r3, [sp, #32]
 8024abc:	f108 0201 	add.w	r2, r8, #1
 8024ac0:	3b01      	subs	r3, #1
 8024ac2:	4631      	mov	r1, r6
 8024ac4:	4628      	mov	r0, r5
 8024ac6:	47b8      	blx	r7
 8024ac8:	3001      	adds	r0, #1
 8024aca:	d10e      	bne.n	8024aea <_printf_float+0x3fa>
 8024acc:	e65e      	b.n	802478c <_printf_float+0x9c>
 8024ace:	2301      	movs	r3, #1
 8024ad0:	464a      	mov	r2, r9
 8024ad2:	4631      	mov	r1, r6
 8024ad4:	4628      	mov	r0, r5
 8024ad6:	47b8      	blx	r7
 8024ad8:	3001      	adds	r0, #1
 8024ada:	f43f ae57 	beq.w	802478c <_printf_float+0x9c>
 8024ade:	f108 0801 	add.w	r8, r8, #1
 8024ae2:	9b08      	ldr	r3, [sp, #32]
 8024ae4:	3b01      	subs	r3, #1
 8024ae6:	4543      	cmp	r3, r8
 8024ae8:	dcf1      	bgt.n	8024ace <_printf_float+0x3de>
 8024aea:	9b04      	ldr	r3, [sp, #16]
 8024aec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8024af0:	e6db      	b.n	80248aa <_printf_float+0x1ba>
 8024af2:	f04f 0800 	mov.w	r8, #0
 8024af6:	f104 091a 	add.w	r9, r4, #26
 8024afa:	e7f2      	b.n	8024ae2 <_printf_float+0x3f2>
 8024afc:	2301      	movs	r3, #1
 8024afe:	4642      	mov	r2, r8
 8024b00:	e7df      	b.n	8024ac2 <_printf_float+0x3d2>
 8024b02:	2301      	movs	r3, #1
 8024b04:	464a      	mov	r2, r9
 8024b06:	4631      	mov	r1, r6
 8024b08:	4628      	mov	r0, r5
 8024b0a:	47b8      	blx	r7
 8024b0c:	3001      	adds	r0, #1
 8024b0e:	f43f ae3d 	beq.w	802478c <_printf_float+0x9c>
 8024b12:	f108 0801 	add.w	r8, r8, #1
 8024b16:	68e3      	ldr	r3, [r4, #12]
 8024b18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8024b1a:	1a5b      	subs	r3, r3, r1
 8024b1c:	4543      	cmp	r3, r8
 8024b1e:	dcf0      	bgt.n	8024b02 <_printf_float+0x412>
 8024b20:	e6f7      	b.n	8024912 <_printf_float+0x222>
 8024b22:	f04f 0800 	mov.w	r8, #0
 8024b26:	f104 0919 	add.w	r9, r4, #25
 8024b2a:	e7f4      	b.n	8024b16 <_printf_float+0x426>

08024b2c <_printf_common>:
 8024b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024b30:	4616      	mov	r6, r2
 8024b32:	4699      	mov	r9, r3
 8024b34:	688a      	ldr	r2, [r1, #8]
 8024b36:	690b      	ldr	r3, [r1, #16]
 8024b38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024b3c:	4293      	cmp	r3, r2
 8024b3e:	bfb8      	it	lt
 8024b40:	4613      	movlt	r3, r2
 8024b42:	6033      	str	r3, [r6, #0]
 8024b44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024b48:	4607      	mov	r7, r0
 8024b4a:	460c      	mov	r4, r1
 8024b4c:	b10a      	cbz	r2, 8024b52 <_printf_common+0x26>
 8024b4e:	3301      	adds	r3, #1
 8024b50:	6033      	str	r3, [r6, #0]
 8024b52:	6823      	ldr	r3, [r4, #0]
 8024b54:	0699      	lsls	r1, r3, #26
 8024b56:	bf42      	ittt	mi
 8024b58:	6833      	ldrmi	r3, [r6, #0]
 8024b5a:	3302      	addmi	r3, #2
 8024b5c:	6033      	strmi	r3, [r6, #0]
 8024b5e:	6825      	ldr	r5, [r4, #0]
 8024b60:	f015 0506 	ands.w	r5, r5, #6
 8024b64:	d106      	bne.n	8024b74 <_printf_common+0x48>
 8024b66:	f104 0a19 	add.w	sl, r4, #25
 8024b6a:	68e3      	ldr	r3, [r4, #12]
 8024b6c:	6832      	ldr	r2, [r6, #0]
 8024b6e:	1a9b      	subs	r3, r3, r2
 8024b70:	42ab      	cmp	r3, r5
 8024b72:	dc26      	bgt.n	8024bc2 <_printf_common+0x96>
 8024b74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024b78:	1e13      	subs	r3, r2, #0
 8024b7a:	6822      	ldr	r2, [r4, #0]
 8024b7c:	bf18      	it	ne
 8024b7e:	2301      	movne	r3, #1
 8024b80:	0692      	lsls	r2, r2, #26
 8024b82:	d42b      	bmi.n	8024bdc <_printf_common+0xb0>
 8024b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024b88:	4649      	mov	r1, r9
 8024b8a:	4638      	mov	r0, r7
 8024b8c:	47c0      	blx	r8
 8024b8e:	3001      	adds	r0, #1
 8024b90:	d01e      	beq.n	8024bd0 <_printf_common+0xa4>
 8024b92:	6823      	ldr	r3, [r4, #0]
 8024b94:	68e5      	ldr	r5, [r4, #12]
 8024b96:	6832      	ldr	r2, [r6, #0]
 8024b98:	f003 0306 	and.w	r3, r3, #6
 8024b9c:	2b04      	cmp	r3, #4
 8024b9e:	bf08      	it	eq
 8024ba0:	1aad      	subeq	r5, r5, r2
 8024ba2:	68a3      	ldr	r3, [r4, #8]
 8024ba4:	6922      	ldr	r2, [r4, #16]
 8024ba6:	bf0c      	ite	eq
 8024ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024bac:	2500      	movne	r5, #0
 8024bae:	4293      	cmp	r3, r2
 8024bb0:	bfc4      	itt	gt
 8024bb2:	1a9b      	subgt	r3, r3, r2
 8024bb4:	18ed      	addgt	r5, r5, r3
 8024bb6:	2600      	movs	r6, #0
 8024bb8:	341a      	adds	r4, #26
 8024bba:	42b5      	cmp	r5, r6
 8024bbc:	d11a      	bne.n	8024bf4 <_printf_common+0xc8>
 8024bbe:	2000      	movs	r0, #0
 8024bc0:	e008      	b.n	8024bd4 <_printf_common+0xa8>
 8024bc2:	2301      	movs	r3, #1
 8024bc4:	4652      	mov	r2, sl
 8024bc6:	4649      	mov	r1, r9
 8024bc8:	4638      	mov	r0, r7
 8024bca:	47c0      	blx	r8
 8024bcc:	3001      	adds	r0, #1
 8024bce:	d103      	bne.n	8024bd8 <_printf_common+0xac>
 8024bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8024bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024bd8:	3501      	adds	r5, #1
 8024bda:	e7c6      	b.n	8024b6a <_printf_common+0x3e>
 8024bdc:	18e1      	adds	r1, r4, r3
 8024bde:	1c5a      	adds	r2, r3, #1
 8024be0:	2030      	movs	r0, #48	; 0x30
 8024be2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024be6:	4422      	add	r2, r4
 8024be8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024bec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024bf0:	3302      	adds	r3, #2
 8024bf2:	e7c7      	b.n	8024b84 <_printf_common+0x58>
 8024bf4:	2301      	movs	r3, #1
 8024bf6:	4622      	mov	r2, r4
 8024bf8:	4649      	mov	r1, r9
 8024bfa:	4638      	mov	r0, r7
 8024bfc:	47c0      	blx	r8
 8024bfe:	3001      	adds	r0, #1
 8024c00:	d0e6      	beq.n	8024bd0 <_printf_common+0xa4>
 8024c02:	3601      	adds	r6, #1
 8024c04:	e7d9      	b.n	8024bba <_printf_common+0x8e>
 8024c06:	Address 0x0000000008024c06 is out of bounds.


08024c08 <_printf_i>:
 8024c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024c0c:	7e0f      	ldrb	r7, [r1, #24]
 8024c0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024c10:	2f78      	cmp	r7, #120	; 0x78
 8024c12:	4691      	mov	r9, r2
 8024c14:	4680      	mov	r8, r0
 8024c16:	460c      	mov	r4, r1
 8024c18:	469a      	mov	sl, r3
 8024c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024c1e:	d807      	bhi.n	8024c30 <_printf_i+0x28>
 8024c20:	2f62      	cmp	r7, #98	; 0x62
 8024c22:	d80a      	bhi.n	8024c3a <_printf_i+0x32>
 8024c24:	2f00      	cmp	r7, #0
 8024c26:	f000 80d8 	beq.w	8024dda <_printf_i+0x1d2>
 8024c2a:	2f58      	cmp	r7, #88	; 0x58
 8024c2c:	f000 80a3 	beq.w	8024d76 <_printf_i+0x16e>
 8024c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024c38:	e03a      	b.n	8024cb0 <_printf_i+0xa8>
 8024c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024c3e:	2b15      	cmp	r3, #21
 8024c40:	d8f6      	bhi.n	8024c30 <_printf_i+0x28>
 8024c42:	a101      	add	r1, pc, #4	; (adr r1, 8024c48 <_printf_i+0x40>)
 8024c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024c48:	08024ca1 	.word	0x08024ca1
 8024c4c:	08024cb5 	.word	0x08024cb5
 8024c50:	08024c31 	.word	0x08024c31
 8024c54:	08024c31 	.word	0x08024c31
 8024c58:	08024c31 	.word	0x08024c31
 8024c5c:	08024c31 	.word	0x08024c31
 8024c60:	08024cb5 	.word	0x08024cb5
 8024c64:	08024c31 	.word	0x08024c31
 8024c68:	08024c31 	.word	0x08024c31
 8024c6c:	08024c31 	.word	0x08024c31
 8024c70:	08024c31 	.word	0x08024c31
 8024c74:	08024dc1 	.word	0x08024dc1
 8024c78:	08024ce5 	.word	0x08024ce5
 8024c7c:	08024da3 	.word	0x08024da3
 8024c80:	08024c31 	.word	0x08024c31
 8024c84:	08024c31 	.word	0x08024c31
 8024c88:	08024de3 	.word	0x08024de3
 8024c8c:	08024c31 	.word	0x08024c31
 8024c90:	08024ce5 	.word	0x08024ce5
 8024c94:	08024c31 	.word	0x08024c31
 8024c98:	08024c31 	.word	0x08024c31
 8024c9c:	08024dab 	.word	0x08024dab
 8024ca0:	682b      	ldr	r3, [r5, #0]
 8024ca2:	1d1a      	adds	r2, r3, #4
 8024ca4:	681b      	ldr	r3, [r3, #0]
 8024ca6:	602a      	str	r2, [r5, #0]
 8024ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024cb0:	2301      	movs	r3, #1
 8024cb2:	e0a3      	b.n	8024dfc <_printf_i+0x1f4>
 8024cb4:	6820      	ldr	r0, [r4, #0]
 8024cb6:	6829      	ldr	r1, [r5, #0]
 8024cb8:	0606      	lsls	r6, r0, #24
 8024cba:	f101 0304 	add.w	r3, r1, #4
 8024cbe:	d50a      	bpl.n	8024cd6 <_printf_i+0xce>
 8024cc0:	680e      	ldr	r6, [r1, #0]
 8024cc2:	602b      	str	r3, [r5, #0]
 8024cc4:	2e00      	cmp	r6, #0
 8024cc6:	da03      	bge.n	8024cd0 <_printf_i+0xc8>
 8024cc8:	232d      	movs	r3, #45	; 0x2d
 8024cca:	4276      	negs	r6, r6
 8024ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024cd0:	485e      	ldr	r0, [pc, #376]	; (8024e4c <_printf_i+0x244>)
 8024cd2:	230a      	movs	r3, #10
 8024cd4:	e019      	b.n	8024d0a <_printf_i+0x102>
 8024cd6:	680e      	ldr	r6, [r1, #0]
 8024cd8:	602b      	str	r3, [r5, #0]
 8024cda:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024cde:	bf18      	it	ne
 8024ce0:	b236      	sxthne	r6, r6
 8024ce2:	e7ef      	b.n	8024cc4 <_printf_i+0xbc>
 8024ce4:	682b      	ldr	r3, [r5, #0]
 8024ce6:	6820      	ldr	r0, [r4, #0]
 8024ce8:	1d19      	adds	r1, r3, #4
 8024cea:	6029      	str	r1, [r5, #0]
 8024cec:	0601      	lsls	r1, r0, #24
 8024cee:	d501      	bpl.n	8024cf4 <_printf_i+0xec>
 8024cf0:	681e      	ldr	r6, [r3, #0]
 8024cf2:	e002      	b.n	8024cfa <_printf_i+0xf2>
 8024cf4:	0646      	lsls	r6, r0, #25
 8024cf6:	d5fb      	bpl.n	8024cf0 <_printf_i+0xe8>
 8024cf8:	881e      	ldrh	r6, [r3, #0]
 8024cfa:	4854      	ldr	r0, [pc, #336]	; (8024e4c <_printf_i+0x244>)
 8024cfc:	2f6f      	cmp	r7, #111	; 0x6f
 8024cfe:	bf0c      	ite	eq
 8024d00:	2308      	moveq	r3, #8
 8024d02:	230a      	movne	r3, #10
 8024d04:	2100      	movs	r1, #0
 8024d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8024d0a:	6865      	ldr	r5, [r4, #4]
 8024d0c:	60a5      	str	r5, [r4, #8]
 8024d0e:	2d00      	cmp	r5, #0
 8024d10:	bfa2      	ittt	ge
 8024d12:	6821      	ldrge	r1, [r4, #0]
 8024d14:	f021 0104 	bicge.w	r1, r1, #4
 8024d18:	6021      	strge	r1, [r4, #0]
 8024d1a:	b90e      	cbnz	r6, 8024d20 <_printf_i+0x118>
 8024d1c:	2d00      	cmp	r5, #0
 8024d1e:	d04d      	beq.n	8024dbc <_printf_i+0x1b4>
 8024d20:	4615      	mov	r5, r2
 8024d22:	fbb6 f1f3 	udiv	r1, r6, r3
 8024d26:	fb03 6711 	mls	r7, r3, r1, r6
 8024d2a:	5dc7      	ldrb	r7, [r0, r7]
 8024d2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8024d30:	4637      	mov	r7, r6
 8024d32:	42bb      	cmp	r3, r7
 8024d34:	460e      	mov	r6, r1
 8024d36:	d9f4      	bls.n	8024d22 <_printf_i+0x11a>
 8024d38:	2b08      	cmp	r3, #8
 8024d3a:	d10b      	bne.n	8024d54 <_printf_i+0x14c>
 8024d3c:	6823      	ldr	r3, [r4, #0]
 8024d3e:	07de      	lsls	r6, r3, #31
 8024d40:	d508      	bpl.n	8024d54 <_printf_i+0x14c>
 8024d42:	6923      	ldr	r3, [r4, #16]
 8024d44:	6861      	ldr	r1, [r4, #4]
 8024d46:	4299      	cmp	r1, r3
 8024d48:	bfde      	ittt	le
 8024d4a:	2330      	movle	r3, #48	; 0x30
 8024d4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8024d50:	f105 35ff 	addle.w	r5, r5, #4294967295
 8024d54:	1b52      	subs	r2, r2, r5
 8024d56:	6122      	str	r2, [r4, #16]
 8024d58:	f8cd a000 	str.w	sl, [sp]
 8024d5c:	464b      	mov	r3, r9
 8024d5e:	aa03      	add	r2, sp, #12
 8024d60:	4621      	mov	r1, r4
 8024d62:	4640      	mov	r0, r8
 8024d64:	f7ff fee2 	bl	8024b2c <_printf_common>
 8024d68:	3001      	adds	r0, #1
 8024d6a:	d14c      	bne.n	8024e06 <_printf_i+0x1fe>
 8024d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8024d70:	b004      	add	sp, #16
 8024d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d76:	4835      	ldr	r0, [pc, #212]	; (8024e4c <_printf_i+0x244>)
 8024d78:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8024d7c:	6829      	ldr	r1, [r5, #0]
 8024d7e:	6823      	ldr	r3, [r4, #0]
 8024d80:	f851 6b04 	ldr.w	r6, [r1], #4
 8024d84:	6029      	str	r1, [r5, #0]
 8024d86:	061d      	lsls	r5, r3, #24
 8024d88:	d514      	bpl.n	8024db4 <_printf_i+0x1ac>
 8024d8a:	07df      	lsls	r7, r3, #31
 8024d8c:	bf44      	itt	mi
 8024d8e:	f043 0320 	orrmi.w	r3, r3, #32
 8024d92:	6023      	strmi	r3, [r4, #0]
 8024d94:	b91e      	cbnz	r6, 8024d9e <_printf_i+0x196>
 8024d96:	6823      	ldr	r3, [r4, #0]
 8024d98:	f023 0320 	bic.w	r3, r3, #32
 8024d9c:	6023      	str	r3, [r4, #0]
 8024d9e:	2310      	movs	r3, #16
 8024da0:	e7b0      	b.n	8024d04 <_printf_i+0xfc>
 8024da2:	6823      	ldr	r3, [r4, #0]
 8024da4:	f043 0320 	orr.w	r3, r3, #32
 8024da8:	6023      	str	r3, [r4, #0]
 8024daa:	2378      	movs	r3, #120	; 0x78
 8024dac:	4828      	ldr	r0, [pc, #160]	; (8024e50 <_printf_i+0x248>)
 8024dae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8024db2:	e7e3      	b.n	8024d7c <_printf_i+0x174>
 8024db4:	0659      	lsls	r1, r3, #25
 8024db6:	bf48      	it	mi
 8024db8:	b2b6      	uxthmi	r6, r6
 8024dba:	e7e6      	b.n	8024d8a <_printf_i+0x182>
 8024dbc:	4615      	mov	r5, r2
 8024dbe:	e7bb      	b.n	8024d38 <_printf_i+0x130>
 8024dc0:	682b      	ldr	r3, [r5, #0]
 8024dc2:	6826      	ldr	r6, [r4, #0]
 8024dc4:	6961      	ldr	r1, [r4, #20]
 8024dc6:	1d18      	adds	r0, r3, #4
 8024dc8:	6028      	str	r0, [r5, #0]
 8024dca:	0635      	lsls	r5, r6, #24
 8024dcc:	681b      	ldr	r3, [r3, #0]
 8024dce:	d501      	bpl.n	8024dd4 <_printf_i+0x1cc>
 8024dd0:	6019      	str	r1, [r3, #0]
 8024dd2:	e002      	b.n	8024dda <_printf_i+0x1d2>
 8024dd4:	0670      	lsls	r0, r6, #25
 8024dd6:	d5fb      	bpl.n	8024dd0 <_printf_i+0x1c8>
 8024dd8:	8019      	strh	r1, [r3, #0]
 8024dda:	2300      	movs	r3, #0
 8024ddc:	6123      	str	r3, [r4, #16]
 8024dde:	4615      	mov	r5, r2
 8024de0:	e7ba      	b.n	8024d58 <_printf_i+0x150>
 8024de2:	682b      	ldr	r3, [r5, #0]
 8024de4:	1d1a      	adds	r2, r3, #4
 8024de6:	602a      	str	r2, [r5, #0]
 8024de8:	681d      	ldr	r5, [r3, #0]
 8024dea:	6862      	ldr	r2, [r4, #4]
 8024dec:	2100      	movs	r1, #0
 8024dee:	4628      	mov	r0, r5
 8024df0:	f7db fa3e 	bl	8000270 <memchr>
 8024df4:	b108      	cbz	r0, 8024dfa <_printf_i+0x1f2>
 8024df6:	1b40      	subs	r0, r0, r5
 8024df8:	6060      	str	r0, [r4, #4]
 8024dfa:	6863      	ldr	r3, [r4, #4]
 8024dfc:	6123      	str	r3, [r4, #16]
 8024dfe:	2300      	movs	r3, #0
 8024e00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024e04:	e7a8      	b.n	8024d58 <_printf_i+0x150>
 8024e06:	6923      	ldr	r3, [r4, #16]
 8024e08:	462a      	mov	r2, r5
 8024e0a:	4649      	mov	r1, r9
 8024e0c:	4640      	mov	r0, r8
 8024e0e:	47d0      	blx	sl
 8024e10:	3001      	adds	r0, #1
 8024e12:	d0ab      	beq.n	8024d6c <_printf_i+0x164>
 8024e14:	6823      	ldr	r3, [r4, #0]
 8024e16:	079b      	lsls	r3, r3, #30
 8024e18:	d413      	bmi.n	8024e42 <_printf_i+0x23a>
 8024e1a:	68e0      	ldr	r0, [r4, #12]
 8024e1c:	9b03      	ldr	r3, [sp, #12]
 8024e1e:	4298      	cmp	r0, r3
 8024e20:	bfb8      	it	lt
 8024e22:	4618      	movlt	r0, r3
 8024e24:	e7a4      	b.n	8024d70 <_printf_i+0x168>
 8024e26:	2301      	movs	r3, #1
 8024e28:	4632      	mov	r2, r6
 8024e2a:	4649      	mov	r1, r9
 8024e2c:	4640      	mov	r0, r8
 8024e2e:	47d0      	blx	sl
 8024e30:	3001      	adds	r0, #1
 8024e32:	d09b      	beq.n	8024d6c <_printf_i+0x164>
 8024e34:	3501      	adds	r5, #1
 8024e36:	68e3      	ldr	r3, [r4, #12]
 8024e38:	9903      	ldr	r1, [sp, #12]
 8024e3a:	1a5b      	subs	r3, r3, r1
 8024e3c:	42ab      	cmp	r3, r5
 8024e3e:	dcf2      	bgt.n	8024e26 <_printf_i+0x21e>
 8024e40:	e7eb      	b.n	8024e1a <_printf_i+0x212>
 8024e42:	2500      	movs	r5, #0
 8024e44:	f104 0619 	add.w	r6, r4, #25
 8024e48:	e7f5      	b.n	8024e36 <_printf_i+0x22e>
 8024e4a:	bf00      	nop
 8024e4c:	08045830 	.word	0x08045830
 8024e50:	08045841 	.word	0x08045841

08024e54 <iprintf>:
 8024e54:	b40f      	push	{r0, r1, r2, r3}
 8024e56:	4b0a      	ldr	r3, [pc, #40]	; (8024e80 <iprintf+0x2c>)
 8024e58:	b513      	push	{r0, r1, r4, lr}
 8024e5a:	681c      	ldr	r4, [r3, #0]
 8024e5c:	b124      	cbz	r4, 8024e68 <iprintf+0x14>
 8024e5e:	69a3      	ldr	r3, [r4, #24]
 8024e60:	b913      	cbnz	r3, 8024e68 <iprintf+0x14>
 8024e62:	4620      	mov	r0, r4
 8024e64:	f7fe fe36 	bl	8023ad4 <__sinit>
 8024e68:	ab05      	add	r3, sp, #20
 8024e6a:	9a04      	ldr	r2, [sp, #16]
 8024e6c:	68a1      	ldr	r1, [r4, #8]
 8024e6e:	9301      	str	r3, [sp, #4]
 8024e70:	4620      	mov	r0, r4
 8024e72:	f003 fb7f 	bl	8028574 <_vfiprintf_r>
 8024e76:	b002      	add	sp, #8
 8024e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024e7c:	b004      	add	sp, #16
 8024e7e:	4770      	bx	lr
 8024e80:	2000046c 	.word	0x2000046c

08024e84 <putchar>:
 8024e84:	4b09      	ldr	r3, [pc, #36]	; (8024eac <putchar+0x28>)
 8024e86:	b513      	push	{r0, r1, r4, lr}
 8024e88:	681c      	ldr	r4, [r3, #0]
 8024e8a:	4601      	mov	r1, r0
 8024e8c:	b134      	cbz	r4, 8024e9c <putchar+0x18>
 8024e8e:	69a3      	ldr	r3, [r4, #24]
 8024e90:	b923      	cbnz	r3, 8024e9c <putchar+0x18>
 8024e92:	9001      	str	r0, [sp, #4]
 8024e94:	4620      	mov	r0, r4
 8024e96:	f7fe fe1d 	bl	8023ad4 <__sinit>
 8024e9a:	9901      	ldr	r1, [sp, #4]
 8024e9c:	68a2      	ldr	r2, [r4, #8]
 8024e9e:	4620      	mov	r0, r4
 8024ea0:	b002      	add	sp, #8
 8024ea2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8024ea6:	f003 bde7 	b.w	8028a78 <_putc_r>
 8024eaa:	bf00      	nop
 8024eac:	2000046c 	.word	0x2000046c

08024eb0 <_puts_r>:
 8024eb0:	b570      	push	{r4, r5, r6, lr}
 8024eb2:	460e      	mov	r6, r1
 8024eb4:	4605      	mov	r5, r0
 8024eb6:	b118      	cbz	r0, 8024ec0 <_puts_r+0x10>
 8024eb8:	6983      	ldr	r3, [r0, #24]
 8024eba:	b90b      	cbnz	r3, 8024ec0 <_puts_r+0x10>
 8024ebc:	f7fe fe0a 	bl	8023ad4 <__sinit>
 8024ec0:	69ab      	ldr	r3, [r5, #24]
 8024ec2:	68ac      	ldr	r4, [r5, #8]
 8024ec4:	b913      	cbnz	r3, 8024ecc <_puts_r+0x1c>
 8024ec6:	4628      	mov	r0, r5
 8024ec8:	f7fe fe04 	bl	8023ad4 <__sinit>
 8024ecc:	4b2c      	ldr	r3, [pc, #176]	; (8024f80 <_puts_r+0xd0>)
 8024ece:	429c      	cmp	r4, r3
 8024ed0:	d120      	bne.n	8024f14 <_puts_r+0x64>
 8024ed2:	686c      	ldr	r4, [r5, #4]
 8024ed4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024ed6:	07db      	lsls	r3, r3, #31
 8024ed8:	d405      	bmi.n	8024ee6 <_puts_r+0x36>
 8024eda:	89a3      	ldrh	r3, [r4, #12]
 8024edc:	0598      	lsls	r0, r3, #22
 8024ede:	d402      	bmi.n	8024ee6 <_puts_r+0x36>
 8024ee0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024ee2:	f7fe ffcd 	bl	8023e80 <__retarget_lock_acquire_recursive>
 8024ee6:	89a3      	ldrh	r3, [r4, #12]
 8024ee8:	0719      	lsls	r1, r3, #28
 8024eea:	d51d      	bpl.n	8024f28 <_puts_r+0x78>
 8024eec:	6923      	ldr	r3, [r4, #16]
 8024eee:	b1db      	cbz	r3, 8024f28 <_puts_r+0x78>
 8024ef0:	3e01      	subs	r6, #1
 8024ef2:	68a3      	ldr	r3, [r4, #8]
 8024ef4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8024ef8:	3b01      	subs	r3, #1
 8024efa:	60a3      	str	r3, [r4, #8]
 8024efc:	bb39      	cbnz	r1, 8024f4e <_puts_r+0x9e>
 8024efe:	2b00      	cmp	r3, #0
 8024f00:	da38      	bge.n	8024f74 <_puts_r+0xc4>
 8024f02:	4622      	mov	r2, r4
 8024f04:	210a      	movs	r1, #10
 8024f06:	4628      	mov	r0, r5
 8024f08:	f001 fad4 	bl	80264b4 <__swbuf_r>
 8024f0c:	3001      	adds	r0, #1
 8024f0e:	d011      	beq.n	8024f34 <_puts_r+0x84>
 8024f10:	250a      	movs	r5, #10
 8024f12:	e011      	b.n	8024f38 <_puts_r+0x88>
 8024f14:	4b1b      	ldr	r3, [pc, #108]	; (8024f84 <_puts_r+0xd4>)
 8024f16:	429c      	cmp	r4, r3
 8024f18:	d101      	bne.n	8024f1e <_puts_r+0x6e>
 8024f1a:	68ac      	ldr	r4, [r5, #8]
 8024f1c:	e7da      	b.n	8024ed4 <_puts_r+0x24>
 8024f1e:	4b1a      	ldr	r3, [pc, #104]	; (8024f88 <_puts_r+0xd8>)
 8024f20:	429c      	cmp	r4, r3
 8024f22:	bf08      	it	eq
 8024f24:	68ec      	ldreq	r4, [r5, #12]
 8024f26:	e7d5      	b.n	8024ed4 <_puts_r+0x24>
 8024f28:	4621      	mov	r1, r4
 8024f2a:	4628      	mov	r0, r5
 8024f2c:	f001 fb26 	bl	802657c <__swsetup_r>
 8024f30:	2800      	cmp	r0, #0
 8024f32:	d0dd      	beq.n	8024ef0 <_puts_r+0x40>
 8024f34:	f04f 35ff 	mov.w	r5, #4294967295
 8024f38:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024f3a:	07da      	lsls	r2, r3, #31
 8024f3c:	d405      	bmi.n	8024f4a <_puts_r+0x9a>
 8024f3e:	89a3      	ldrh	r3, [r4, #12]
 8024f40:	059b      	lsls	r3, r3, #22
 8024f42:	d402      	bmi.n	8024f4a <_puts_r+0x9a>
 8024f44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024f46:	f7fe ff9d 	bl	8023e84 <__retarget_lock_release_recursive>
 8024f4a:	4628      	mov	r0, r5
 8024f4c:	bd70      	pop	{r4, r5, r6, pc}
 8024f4e:	2b00      	cmp	r3, #0
 8024f50:	da04      	bge.n	8024f5c <_puts_r+0xac>
 8024f52:	69a2      	ldr	r2, [r4, #24]
 8024f54:	429a      	cmp	r2, r3
 8024f56:	dc06      	bgt.n	8024f66 <_puts_r+0xb6>
 8024f58:	290a      	cmp	r1, #10
 8024f5a:	d004      	beq.n	8024f66 <_puts_r+0xb6>
 8024f5c:	6823      	ldr	r3, [r4, #0]
 8024f5e:	1c5a      	adds	r2, r3, #1
 8024f60:	6022      	str	r2, [r4, #0]
 8024f62:	7019      	strb	r1, [r3, #0]
 8024f64:	e7c5      	b.n	8024ef2 <_puts_r+0x42>
 8024f66:	4622      	mov	r2, r4
 8024f68:	4628      	mov	r0, r5
 8024f6a:	f001 faa3 	bl	80264b4 <__swbuf_r>
 8024f6e:	3001      	adds	r0, #1
 8024f70:	d1bf      	bne.n	8024ef2 <_puts_r+0x42>
 8024f72:	e7df      	b.n	8024f34 <_puts_r+0x84>
 8024f74:	6823      	ldr	r3, [r4, #0]
 8024f76:	250a      	movs	r5, #10
 8024f78:	1c5a      	adds	r2, r3, #1
 8024f7a:	6022      	str	r2, [r4, #0]
 8024f7c:	701d      	strb	r5, [r3, #0]
 8024f7e:	e7db      	b.n	8024f38 <_puts_r+0x88>
 8024f80:	080456a8 	.word	0x080456a8
 8024f84:	080456c8 	.word	0x080456c8
 8024f88:	08045688 	.word	0x08045688

08024f8c <puts>:
 8024f8c:	4b02      	ldr	r3, [pc, #8]	; (8024f98 <puts+0xc>)
 8024f8e:	4601      	mov	r1, r0
 8024f90:	6818      	ldr	r0, [r3, #0]
 8024f92:	f7ff bf8d 	b.w	8024eb0 <_puts_r>
 8024f96:	bf00      	nop
 8024f98:	2000046c 	.word	0x2000046c

08024f9c <rand>:
 8024f9c:	4b16      	ldr	r3, [pc, #88]	; (8024ff8 <rand+0x5c>)
 8024f9e:	b510      	push	{r4, lr}
 8024fa0:	681c      	ldr	r4, [r3, #0]
 8024fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8024fa4:	b9b3      	cbnz	r3, 8024fd4 <rand+0x38>
 8024fa6:	2018      	movs	r0, #24
 8024fa8:	f7fe ff6e 	bl	8023e88 <malloc>
 8024fac:	63a0      	str	r0, [r4, #56]	; 0x38
 8024fae:	b928      	cbnz	r0, 8024fbc <rand+0x20>
 8024fb0:	4602      	mov	r2, r0
 8024fb2:	4b12      	ldr	r3, [pc, #72]	; (8024ffc <rand+0x60>)
 8024fb4:	4812      	ldr	r0, [pc, #72]	; (8025000 <rand+0x64>)
 8024fb6:	214e      	movs	r1, #78	; 0x4e
 8024fb8:	f001 fb52 	bl	8026660 <__assert_func>
 8024fbc:	4a11      	ldr	r2, [pc, #68]	; (8025004 <rand+0x68>)
 8024fbe:	4b12      	ldr	r3, [pc, #72]	; (8025008 <rand+0x6c>)
 8024fc0:	e9c0 2300 	strd	r2, r3, [r0]
 8024fc4:	4b11      	ldr	r3, [pc, #68]	; (802500c <rand+0x70>)
 8024fc6:	6083      	str	r3, [r0, #8]
 8024fc8:	230b      	movs	r3, #11
 8024fca:	8183      	strh	r3, [r0, #12]
 8024fcc:	2201      	movs	r2, #1
 8024fce:	2300      	movs	r3, #0
 8024fd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8024fd4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8024fd6:	4a0e      	ldr	r2, [pc, #56]	; (8025010 <rand+0x74>)
 8024fd8:	6920      	ldr	r0, [r4, #16]
 8024fda:	6963      	ldr	r3, [r4, #20]
 8024fdc:	490d      	ldr	r1, [pc, #52]	; (8025014 <rand+0x78>)
 8024fde:	4342      	muls	r2, r0
 8024fe0:	fb01 2203 	mla	r2, r1, r3, r2
 8024fe4:	fba0 0101 	umull	r0, r1, r0, r1
 8024fe8:	1c43      	adds	r3, r0, #1
 8024fea:	eb42 0001 	adc.w	r0, r2, r1
 8024fee:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8024ff2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8024ff6:	bd10      	pop	{r4, pc}
 8024ff8:	2000046c 	.word	0x2000046c
 8024ffc:	080456ec 	.word	0x080456ec
 8025000:	08045852 	.word	0x08045852
 8025004:	abcd330e 	.word	0xabcd330e
 8025008:	e66d1234 	.word	0xe66d1234
 802500c:	0005deec 	.word	0x0005deec
 8025010:	5851f42d 	.word	0x5851f42d
 8025014:	4c957f2d 	.word	0x4c957f2d

08025018 <cleanup_glue>:
 8025018:	b538      	push	{r3, r4, r5, lr}
 802501a:	460c      	mov	r4, r1
 802501c:	6809      	ldr	r1, [r1, #0]
 802501e:	4605      	mov	r5, r0
 8025020:	b109      	cbz	r1, 8025026 <cleanup_glue+0xe>
 8025022:	f7ff fff9 	bl	8025018 <cleanup_glue>
 8025026:	4621      	mov	r1, r4
 8025028:	4628      	mov	r0, r5
 802502a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802502e:	f7ff b9ed 	b.w	802440c <_free_r>
 8025032:	Address 0x0000000008025032 is out of bounds.


08025034 <_reclaim_reent>:
 8025034:	4b2c      	ldr	r3, [pc, #176]	; (80250e8 <_reclaim_reent+0xb4>)
 8025036:	681b      	ldr	r3, [r3, #0]
 8025038:	4283      	cmp	r3, r0
 802503a:	b570      	push	{r4, r5, r6, lr}
 802503c:	4604      	mov	r4, r0
 802503e:	d051      	beq.n	80250e4 <_reclaim_reent+0xb0>
 8025040:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8025042:	b143      	cbz	r3, 8025056 <_reclaim_reent+0x22>
 8025044:	68db      	ldr	r3, [r3, #12]
 8025046:	2b00      	cmp	r3, #0
 8025048:	d14a      	bne.n	80250e0 <_reclaim_reent+0xac>
 802504a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802504c:	6819      	ldr	r1, [r3, #0]
 802504e:	b111      	cbz	r1, 8025056 <_reclaim_reent+0x22>
 8025050:	4620      	mov	r0, r4
 8025052:	f7ff f9db 	bl	802440c <_free_r>
 8025056:	6961      	ldr	r1, [r4, #20]
 8025058:	b111      	cbz	r1, 8025060 <_reclaim_reent+0x2c>
 802505a:	4620      	mov	r0, r4
 802505c:	f7ff f9d6 	bl	802440c <_free_r>
 8025060:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8025062:	b111      	cbz	r1, 802506a <_reclaim_reent+0x36>
 8025064:	4620      	mov	r0, r4
 8025066:	f7ff f9d1 	bl	802440c <_free_r>
 802506a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802506c:	b111      	cbz	r1, 8025074 <_reclaim_reent+0x40>
 802506e:	4620      	mov	r0, r4
 8025070:	f7ff f9cc 	bl	802440c <_free_r>
 8025074:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8025076:	b111      	cbz	r1, 802507e <_reclaim_reent+0x4a>
 8025078:	4620      	mov	r0, r4
 802507a:	f7ff f9c7 	bl	802440c <_free_r>
 802507e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8025080:	b111      	cbz	r1, 8025088 <_reclaim_reent+0x54>
 8025082:	4620      	mov	r0, r4
 8025084:	f7ff f9c2 	bl	802440c <_free_r>
 8025088:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802508a:	b111      	cbz	r1, 8025092 <_reclaim_reent+0x5e>
 802508c:	4620      	mov	r0, r4
 802508e:	f7ff f9bd 	bl	802440c <_free_r>
 8025092:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8025094:	b111      	cbz	r1, 802509c <_reclaim_reent+0x68>
 8025096:	4620      	mov	r0, r4
 8025098:	f7ff f9b8 	bl	802440c <_free_r>
 802509c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802509e:	b111      	cbz	r1, 80250a6 <_reclaim_reent+0x72>
 80250a0:	4620      	mov	r0, r4
 80250a2:	f7ff f9b3 	bl	802440c <_free_r>
 80250a6:	69a3      	ldr	r3, [r4, #24]
 80250a8:	b1e3      	cbz	r3, 80250e4 <_reclaim_reent+0xb0>
 80250aa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80250ac:	4620      	mov	r0, r4
 80250ae:	4798      	blx	r3
 80250b0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80250b2:	b1b9      	cbz	r1, 80250e4 <_reclaim_reent+0xb0>
 80250b4:	4620      	mov	r0, r4
 80250b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80250ba:	f7ff bfad 	b.w	8025018 <cleanup_glue>
 80250be:	5949      	ldr	r1, [r1, r5]
 80250c0:	b941      	cbnz	r1, 80250d4 <_reclaim_reent+0xa0>
 80250c2:	3504      	adds	r5, #4
 80250c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80250c6:	2d80      	cmp	r5, #128	; 0x80
 80250c8:	68d9      	ldr	r1, [r3, #12]
 80250ca:	d1f8      	bne.n	80250be <_reclaim_reent+0x8a>
 80250cc:	4620      	mov	r0, r4
 80250ce:	f7ff f99d 	bl	802440c <_free_r>
 80250d2:	e7ba      	b.n	802504a <_reclaim_reent+0x16>
 80250d4:	680e      	ldr	r6, [r1, #0]
 80250d6:	4620      	mov	r0, r4
 80250d8:	f7ff f998 	bl	802440c <_free_r>
 80250dc:	4631      	mov	r1, r6
 80250de:	e7ef      	b.n	80250c0 <_reclaim_reent+0x8c>
 80250e0:	2500      	movs	r5, #0
 80250e2:	e7ef      	b.n	80250c4 <_reclaim_reent+0x90>
 80250e4:	bd70      	pop	{r4, r5, r6, pc}
 80250e6:	bf00      	nop
 80250e8:	2000046c 	.word	0x2000046c

080250ec <modf>:
 80250ec:	b570      	push	{r4, r5, r6, lr}
 80250ee:	ed2d 8b02 	vpush	{d8}
 80250f2:	eeb0 8b40 	vmov.f64	d8, d0
 80250f6:	ee18 5a90 	vmov	r5, s17
 80250fa:	4604      	mov	r4, r0
 80250fc:	f3c5 500a 	ubfx	r0, r5, #20, #11
 8025100:	f2a0 33ff 	subw	r3, r0, #1023	; 0x3ff
 8025104:	2b13      	cmp	r3, #19
 8025106:	ee10 1a10 	vmov	r1, s0
 802510a:	dc23      	bgt.n	8025154 <modf+0x68>
 802510c:	2b00      	cmp	r3, #0
 802510e:	da09      	bge.n	8025124 <modf+0x38>
 8025110:	2200      	movs	r2, #0
 8025112:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025116:	e9c4 2300 	strd	r2, r3, [r4]
 802511a:	eeb0 0b48 	vmov.f64	d0, d8
 802511e:	ecbd 8b02 	vpop	{d8}
 8025122:	bd70      	pop	{r4, r5, r6, pc}
 8025124:	481d      	ldr	r0, [pc, #116]	; (802519c <modf+0xb0>)
 8025126:	4118      	asrs	r0, r3
 8025128:	ea05 0300 	and.w	r3, r5, r0
 802512c:	4319      	orrs	r1, r3
 802512e:	d107      	bne.n	8025140 <modf+0x54>
 8025130:	ed84 0b00 	vstr	d0, [r4]
 8025134:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025138:	460a      	mov	r2, r1
 802513a:	ec43 2b18 	vmov	d8, r2, r3
 802513e:	e7ec      	b.n	802511a <modf+0x2e>
 8025140:	2200      	movs	r2, #0
 8025142:	ea25 0300 	bic.w	r3, r5, r0
 8025146:	ec43 2b17 	vmov	d7, r2, r3
 802514a:	e9c4 2300 	strd	r2, r3, [r4]
 802514e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8025152:	e7e2      	b.n	802511a <modf+0x2e>
 8025154:	2b33      	cmp	r3, #51	; 0x33
 8025156:	dd0d      	ble.n	8025174 <modf+0x88>
 8025158:	ed84 0b00 	vstr	d0, [r4]
 802515c:	f003 fce6 	bl	8028b2c <__fpclassifyd>
 8025160:	b920      	cbnz	r0, 802516c <modf+0x80>
 8025162:	ee38 8b08 	vadd.f64	d8, d8, d8
 8025166:	ed84 8b00 	vstr	d8, [r4]
 802516a:	e7d6      	b.n	802511a <modf+0x2e>
 802516c:	2200      	movs	r2, #0
 802516e:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8025172:	e7e2      	b.n	802513a <modf+0x4e>
 8025174:	f2a0 4313 	subw	r3, r0, #1043	; 0x413
 8025178:	f04f 30ff 	mov.w	r0, #4294967295
 802517c:	40d8      	lsrs	r0, r3
 802517e:	ea11 0600 	ands.w	r6, r1, r0
 8025182:	d105      	bne.n	8025190 <modf+0xa4>
 8025184:	ed84 0b00 	vstr	d0, [r4]
 8025188:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 802518c:	4632      	mov	r2, r6
 802518e:	e7d4      	b.n	802513a <modf+0x4e>
 8025190:	ee18 3a90 	vmov	r3, s17
 8025194:	ea21 0200 	bic.w	r2, r1, r0
 8025198:	e7d5      	b.n	8025146 <modf+0x5a>
 802519a:	bf00      	nop
 802519c:	000fffff 	.word	0x000fffff

080251a0 <_sbrk_r>:
 80251a0:	b538      	push	{r3, r4, r5, lr}
 80251a2:	4d06      	ldr	r5, [pc, #24]	; (80251bc <_sbrk_r+0x1c>)
 80251a4:	2300      	movs	r3, #0
 80251a6:	4604      	mov	r4, r0
 80251a8:	4608      	mov	r0, r1
 80251aa:	602b      	str	r3, [r5, #0]
 80251ac:	f7e1 fe5e 	bl	8006e6c <_sbrk>
 80251b0:	1c43      	adds	r3, r0, #1
 80251b2:	d102      	bne.n	80251ba <_sbrk_r+0x1a>
 80251b4:	682b      	ldr	r3, [r5, #0]
 80251b6:	b103      	cbz	r3, 80251ba <_sbrk_r+0x1a>
 80251b8:	6023      	str	r3, [r4, #0]
 80251ba:	bd38      	pop	{r3, r4, r5, pc}
 80251bc:	2003002c 	.word	0x2003002c

080251c0 <sniprintf>:
 80251c0:	b40c      	push	{r2, r3}
 80251c2:	b530      	push	{r4, r5, lr}
 80251c4:	4b17      	ldr	r3, [pc, #92]	; (8025224 <sniprintf+0x64>)
 80251c6:	1e0c      	subs	r4, r1, #0
 80251c8:	681d      	ldr	r5, [r3, #0]
 80251ca:	b09d      	sub	sp, #116	; 0x74
 80251cc:	da08      	bge.n	80251e0 <sniprintf+0x20>
 80251ce:	238b      	movs	r3, #139	; 0x8b
 80251d0:	602b      	str	r3, [r5, #0]
 80251d2:	f04f 30ff 	mov.w	r0, #4294967295
 80251d6:	b01d      	add	sp, #116	; 0x74
 80251d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80251dc:	b002      	add	sp, #8
 80251de:	4770      	bx	lr
 80251e0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80251e4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80251e8:	bf14      	ite	ne
 80251ea:	f104 33ff 	addne.w	r3, r4, #4294967295
 80251ee:	4623      	moveq	r3, r4
 80251f0:	9304      	str	r3, [sp, #16]
 80251f2:	9307      	str	r3, [sp, #28]
 80251f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80251f8:	9002      	str	r0, [sp, #8]
 80251fa:	9006      	str	r0, [sp, #24]
 80251fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8025200:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8025202:	ab21      	add	r3, sp, #132	; 0x84
 8025204:	a902      	add	r1, sp, #8
 8025206:	4628      	mov	r0, r5
 8025208:	9301      	str	r3, [sp, #4]
 802520a:	f002 feb7 	bl	8027f7c <_svfiprintf_r>
 802520e:	1c43      	adds	r3, r0, #1
 8025210:	bfbc      	itt	lt
 8025212:	238b      	movlt	r3, #139	; 0x8b
 8025214:	602b      	strlt	r3, [r5, #0]
 8025216:	2c00      	cmp	r4, #0
 8025218:	d0dd      	beq.n	80251d6 <sniprintf+0x16>
 802521a:	9b02      	ldr	r3, [sp, #8]
 802521c:	2200      	movs	r2, #0
 802521e:	701a      	strb	r2, [r3, #0]
 8025220:	e7d9      	b.n	80251d6 <sniprintf+0x16>
 8025222:	bf00      	nop
 8025224:	2000046c 	.word	0x2000046c

08025228 <siprintf>:
 8025228:	b40e      	push	{r1, r2, r3}
 802522a:	b500      	push	{lr}
 802522c:	b09c      	sub	sp, #112	; 0x70
 802522e:	ab1d      	add	r3, sp, #116	; 0x74
 8025230:	9002      	str	r0, [sp, #8]
 8025232:	9006      	str	r0, [sp, #24]
 8025234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8025238:	4809      	ldr	r0, [pc, #36]	; (8025260 <siprintf+0x38>)
 802523a:	9107      	str	r1, [sp, #28]
 802523c:	9104      	str	r1, [sp, #16]
 802523e:	4909      	ldr	r1, [pc, #36]	; (8025264 <siprintf+0x3c>)
 8025240:	f853 2b04 	ldr.w	r2, [r3], #4
 8025244:	9105      	str	r1, [sp, #20]
 8025246:	6800      	ldr	r0, [r0, #0]
 8025248:	9301      	str	r3, [sp, #4]
 802524a:	a902      	add	r1, sp, #8
 802524c:	f002 fe96 	bl	8027f7c <_svfiprintf_r>
 8025250:	9b02      	ldr	r3, [sp, #8]
 8025252:	2200      	movs	r2, #0
 8025254:	701a      	strb	r2, [r3, #0]
 8025256:	b01c      	add	sp, #112	; 0x70
 8025258:	f85d eb04 	ldr.w	lr, [sp], #4
 802525c:	b003      	add	sp, #12
 802525e:	4770      	bx	lr
 8025260:	2000046c 	.word	0x2000046c
 8025264:	ffff0208 	.word	0xffff0208

08025268 <siscanf>:
 8025268:	b40e      	push	{r1, r2, r3}
 802526a:	b510      	push	{r4, lr}
 802526c:	b09f      	sub	sp, #124	; 0x7c
 802526e:	ac21      	add	r4, sp, #132	; 0x84
 8025270:	f44f 7101 	mov.w	r1, #516	; 0x204
 8025274:	f854 2b04 	ldr.w	r2, [r4], #4
 8025278:	9201      	str	r2, [sp, #4]
 802527a:	f8ad 101c 	strh.w	r1, [sp, #28]
 802527e:	9004      	str	r0, [sp, #16]
 8025280:	9008      	str	r0, [sp, #32]
 8025282:	f7da ffe7 	bl	8000254 <strlen>
 8025286:	4b0c      	ldr	r3, [pc, #48]	; (80252b8 <siscanf+0x50>)
 8025288:	9005      	str	r0, [sp, #20]
 802528a:	9009      	str	r0, [sp, #36]	; 0x24
 802528c:	930d      	str	r3, [sp, #52]	; 0x34
 802528e:	480b      	ldr	r0, [pc, #44]	; (80252bc <siscanf+0x54>)
 8025290:	9a01      	ldr	r2, [sp, #4]
 8025292:	6800      	ldr	r0, [r0, #0]
 8025294:	9403      	str	r4, [sp, #12]
 8025296:	2300      	movs	r3, #0
 8025298:	9311      	str	r3, [sp, #68]	; 0x44
 802529a:	9316      	str	r3, [sp, #88]	; 0x58
 802529c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80252a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80252a4:	a904      	add	r1, sp, #16
 80252a6:	4623      	mov	r3, r4
 80252a8:	f002 ffc2 	bl	8028230 <__ssvfiscanf_r>
 80252ac:	b01f      	add	sp, #124	; 0x7c
 80252ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80252b2:	b003      	add	sp, #12
 80252b4:	4770      	bx	lr
 80252b6:	bf00      	nop
 80252b8:	080252e3 	.word	0x080252e3
 80252bc:	2000046c 	.word	0x2000046c

080252c0 <__sread>:
 80252c0:	b510      	push	{r4, lr}
 80252c2:	460c      	mov	r4, r1
 80252c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252c8:	f003 fc1e 	bl	8028b08 <_read_r>
 80252cc:	2800      	cmp	r0, #0
 80252ce:	bfab      	itete	ge
 80252d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80252d2:	89a3      	ldrhlt	r3, [r4, #12]
 80252d4:	181b      	addge	r3, r3, r0
 80252d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80252da:	bfac      	ite	ge
 80252dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80252de:	81a3      	strhlt	r3, [r4, #12]
 80252e0:	bd10      	pop	{r4, pc}

080252e2 <__seofread>:
 80252e2:	2000      	movs	r0, #0
 80252e4:	4770      	bx	lr

080252e6 <__swrite>:
 80252e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80252ea:	461f      	mov	r7, r3
 80252ec:	898b      	ldrh	r3, [r1, #12]
 80252ee:	05db      	lsls	r3, r3, #23
 80252f0:	4605      	mov	r5, r0
 80252f2:	460c      	mov	r4, r1
 80252f4:	4616      	mov	r6, r2
 80252f6:	d505      	bpl.n	8025304 <__swrite+0x1e>
 80252f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80252fc:	2302      	movs	r3, #2
 80252fe:	2200      	movs	r2, #0
 8025300:	f002 f9c2 	bl	8027688 <_lseek_r>
 8025304:	89a3      	ldrh	r3, [r4, #12]
 8025306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802530a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802530e:	81a3      	strh	r3, [r4, #12]
 8025310:	4632      	mov	r2, r6
 8025312:	463b      	mov	r3, r7
 8025314:	4628      	mov	r0, r5
 8025316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802531a:	f001 b91d 	b.w	8026558 <_write_r>

0802531e <__sseek>:
 802531e:	b510      	push	{r4, lr}
 8025320:	460c      	mov	r4, r1
 8025322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025326:	f002 f9af 	bl	8027688 <_lseek_r>
 802532a:	1c43      	adds	r3, r0, #1
 802532c:	89a3      	ldrh	r3, [r4, #12]
 802532e:	bf15      	itete	ne
 8025330:	6560      	strne	r0, [r4, #84]	; 0x54
 8025332:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8025336:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802533a:	81a3      	strheq	r3, [r4, #12]
 802533c:	bf18      	it	ne
 802533e:	81a3      	strhne	r3, [r4, #12]
 8025340:	bd10      	pop	{r4, pc}

08025342 <__sclose>:
 8025342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025346:	f001 b9a9 	b.w	802669c <_close_r>

0802534a <stpcpy>:
 802534a:	4603      	mov	r3, r0
 802534c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8025350:	4618      	mov	r0, r3
 8025352:	f803 2b01 	strb.w	r2, [r3], #1
 8025356:	2a00      	cmp	r2, #0
 8025358:	d1f8      	bne.n	802534c <stpcpy+0x2>
 802535a:	4770      	bx	lr

0802535c <strchr>:
 802535c:	b2c9      	uxtb	r1, r1
 802535e:	4603      	mov	r3, r0
 8025360:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025364:	b11a      	cbz	r2, 802536e <strchr+0x12>
 8025366:	428a      	cmp	r2, r1
 8025368:	d1f9      	bne.n	802535e <strchr+0x2>
 802536a:	4618      	mov	r0, r3
 802536c:	4770      	bx	lr
 802536e:	2900      	cmp	r1, #0
 8025370:	bf18      	it	ne
 8025372:	2300      	movne	r3, #0
 8025374:	e7f9      	b.n	802536a <strchr+0xe>

08025376 <strcpy>:
 8025376:	4603      	mov	r3, r0
 8025378:	f811 2b01 	ldrb.w	r2, [r1], #1
 802537c:	f803 2b01 	strb.w	r2, [r3], #1
 8025380:	2a00      	cmp	r2, #0
 8025382:	d1f9      	bne.n	8025378 <strcpy+0x2>
 8025384:	4770      	bx	lr
 8025386:	Address 0x0000000008025386 is out of bounds.


08025388 <iso_year_adjust>:
 8025388:	6942      	ldr	r2, [r0, #20]
 802538a:	2a00      	cmp	r2, #0
 802538c:	f240 736c 	movw	r3, #1900	; 0x76c
 8025390:	bfa8      	it	ge
 8025392:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 8025396:	4413      	add	r3, r2
 8025398:	0792      	lsls	r2, r2, #30
 802539a:	d105      	bne.n	80253a8 <iso_year_adjust+0x20>
 802539c:	2164      	movs	r1, #100	; 0x64
 802539e:	fb93 f2f1 	sdiv	r2, r3, r1
 80253a2:	fb01 3212 	mls	r2, r1, r2, r3
 80253a6:	b9da      	cbnz	r2, 80253e0 <iso_year_adjust+0x58>
 80253a8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80253ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80253b0:	fb02 3311 	mls	r3, r2, r1, r3
 80253b4:	fab3 f383 	clz	r3, r3
 80253b8:	095b      	lsrs	r3, r3, #5
 80253ba:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
 80253be:	0040      	lsls	r0, r0, #1
 80253c0:	eb00 1002 	add.w	r0, r0, r2, lsl #4
 80253c4:	4418      	add	r0, r3
 80253c6:	f241 63a2 	movw	r3, #5794	; 0x16a2
 80253ca:	4298      	cmp	r0, r3
 80253cc:	d03a      	beq.n	8025444 <iso_year_adjust+0xbc>
 80253ce:	dc21      	bgt.n	8025414 <iso_year_adjust+0x8c>
 80253d0:	2801      	cmp	r0, #1
 80253d2:	dc1a      	bgt.n	802540a <iso_year_adjust+0x82>
 80253d4:	2800      	cmp	r0, #0
 80253d6:	bfb4      	ite	lt
 80253d8:	2000      	movlt	r0, #0
 80253da:	f04f 30ff 	movge.w	r0, #4294967295
 80253de:	4770      	bx	lr
 80253e0:	2301      	movs	r3, #1
 80253e2:	e7ea      	b.n	80253ba <iso_year_adjust+0x32>
 80253e4:	2817      	cmp	r0, #23
 80253e6:	d813      	bhi.n	8025410 <iso_year_adjust+0x88>
 80253e8:	e8df f000 	tbb	[pc, r0]
 80253ec:	0c0c0c0c 	.word	0x0c0c0c0c
 80253f0:	0c0c1212 	.word	0x0c0c1212
 80253f4:	12121212 	.word	0x12121212
 80253f8:	12121212 	.word	0x12121212
 80253fc:	0c0c1212 	.word	0x0c0c1212
 8025400:	0c0c1212 	.word	0x0c0c1212
 8025404:	f04f 30ff 	mov.w	r0, #4294967295
 8025408:	4770      	bx	lr
 802540a:	380a      	subs	r0, #10
 802540c:	2817      	cmp	r0, #23
 802540e:	d9e9      	bls.n	80253e4 <iso_year_adjust+0x5c>
 8025410:	2000      	movs	r0, #0
 8025412:	4770      	bx	lr
 8025414:	f241 63b4 	movw	r3, #5812	; 0x16b4
 8025418:	4298      	cmp	r0, r3
 802541a:	dc06      	bgt.n	802542a <iso_year_adjust+0xa2>
 802541c:	f241 63b1 	movw	r3, #5809	; 0x16b1
 8025420:	4298      	cmp	r0, r3
 8025422:	bfd4      	ite	le
 8025424:	2000      	movle	r0, #0
 8025426:	2001      	movgt	r0, #1
 8025428:	4770      	bx	lr
 802542a:	f5a0 50b6 	sub.w	r0, r0, #5824	; 0x16c0
 802542e:	3802      	subs	r0, #2
 8025430:	2815      	cmp	r0, #21
 8025432:	d8ed      	bhi.n	8025410 <iso_year_adjust+0x88>
 8025434:	2301      	movs	r3, #1
 8025436:	4083      	lsls	r3, r0
 8025438:	4803      	ldr	r0, [pc, #12]	; (8025448 <iso_year_adjust+0xc0>)
 802543a:	4018      	ands	r0, r3
 802543c:	3800      	subs	r0, #0
 802543e:	bf18      	it	ne
 8025440:	2001      	movne	r0, #1
 8025442:	4770      	bx	lr
 8025444:	2001      	movs	r0, #1
 8025446:	4770      	bx	lr
 8025448:	002a001f 	.word	0x002a001f

0802544c <__strftime.isra.0>:
 802544c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025450:	b08f      	sub	sp, #60	; 0x3c
 8025452:	461e      	mov	r6, r3
 8025454:	2300      	movs	r3, #0
 8025456:	4607      	mov	r7, r0
 8025458:	460d      	mov	r5, r1
 802545a:	9302      	str	r3, [sp, #8]
 802545c:	461c      	mov	r4, r3
 802545e:	7813      	ldrb	r3, [r2, #0]
 8025460:	2b00      	cmp	r3, #0
 8025462:	f000 84ba 	beq.w	8025dda <__strftime.isra.0+0x98e>
 8025466:	2b25      	cmp	r3, #37	; 0x25
 8025468:	d11f      	bne.n	80254aa <__strftime.isra.0+0x5e>
 802546a:	f892 b001 	ldrb.w	fp, [r2, #1]
 802546e:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
 8025472:	d024      	beq.n	80254be <__strftime.isra.0+0x72>
 8025474:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025478:	d021      	beq.n	80254be <__strftime.isra.0+0x72>
 802547a:	f102 0801 	add.w	r8, r2, #1
 802547e:	f04f 0b00 	mov.w	fp, #0
 8025482:	f898 2000 	ldrb.w	r2, [r8]
 8025486:	3a31      	subs	r2, #49	; 0x31
 8025488:	2a08      	cmp	r2, #8
 802548a:	d81b      	bhi.n	80254c4 <__strftime.isra.0+0x78>
 802548c:	4640      	mov	r0, r8
 802548e:	220a      	movs	r2, #10
 8025490:	a906      	add	r1, sp, #24
 8025492:	f000 fdc9 	bl	8026028 <strtoul>
 8025496:	f8dd 8018 	ldr.w	r8, [sp, #24]
 802549a:	4681      	mov	r9, r0
 802549c:	f898 2000 	ldrb.w	r2, [r8]
 80254a0:	2a45      	cmp	r2, #69	; 0x45
 80254a2:	d112      	bne.n	80254ca <__strftime.isra.0+0x7e>
 80254a4:	f108 0801 	add.w	r8, r8, #1
 80254a8:	e011      	b.n	80254ce <__strftime.isra.0+0x82>
 80254aa:	1e69      	subs	r1, r5, #1
 80254ac:	42a1      	cmp	r1, r4
 80254ae:	d802      	bhi.n	80254b6 <__strftime.isra.0+0x6a>
 80254b0:	2400      	movs	r4, #0
 80254b2:	f000 bc95 	b.w	8025de0 <__strftime.isra.0+0x994>
 80254b6:	553b      	strb	r3, [r7, r4]
 80254b8:	3201      	adds	r2, #1
 80254ba:	3401      	adds	r4, #1
 80254bc:	e7cf      	b.n	802545e <__strftime.isra.0+0x12>
 80254be:	f102 0802 	add.w	r8, r2, #2
 80254c2:	e7de      	b.n	8025482 <__strftime.isra.0+0x36>
 80254c4:	f04f 0900 	mov.w	r9, #0
 80254c8:	e7e8      	b.n	802549c <__strftime.isra.0+0x50>
 80254ca:	2a4f      	cmp	r2, #79	; 0x4f
 80254cc:	d0ea      	beq.n	80254a4 <__strftime.isra.0+0x58>
 80254ce:	f898 0000 	ldrb.w	r0, [r8]
 80254d2:	f1a0 0225 	sub.w	r2, r0, #37	; 0x25
 80254d6:	2a55      	cmp	r2, #85	; 0x55
 80254d8:	d8ea      	bhi.n	80254b0 <__strftime.isra.0+0x64>
 80254da:	a301      	add	r3, pc, #4	; (adr r3, 80254e0 <__strftime.isra.0+0x94>)
 80254dc:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80254e0:	08025dcf 	.word	0x08025dcf
 80254e4:	080254b1 	.word	0x080254b1
 80254e8:	080254b1 	.word	0x080254b1
 80254ec:	080254b1 	.word	0x080254b1
 80254f0:	080254b1 	.word	0x080254b1
 80254f4:	080254b1 	.word	0x080254b1
 80254f8:	080254b1 	.word	0x080254b1
 80254fc:	080254b1 	.word	0x080254b1
 8025500:	080254b1 	.word	0x080254b1
 8025504:	080254b1 	.word	0x080254b1
 8025508:	080254b1 	.word	0x080254b1
 802550c:	080254b1 	.word	0x080254b1
 8025510:	080254b1 	.word	0x080254b1
 8025514:	080254b1 	.word	0x080254b1
 8025518:	080254b1 	.word	0x080254b1
 802551c:	080254b1 	.word	0x080254b1
 8025520:	080254b1 	.word	0x080254b1
 8025524:	080254b1 	.word	0x080254b1
 8025528:	080254b1 	.word	0x080254b1
 802552c:	080254b1 	.word	0x080254b1
 8025530:	080254b1 	.word	0x080254b1
 8025534:	080254b1 	.word	0x080254b1
 8025538:	080254b1 	.word	0x080254b1
 802553c:	080254b1 	.word	0x080254b1
 8025540:	080254b1 	.word	0x080254b1
 8025544:	080254b1 	.word	0x080254b1
 8025548:	080254b1 	.word	0x080254b1
 802554c:	080254b1 	.word	0x080254b1
 8025550:	08025675 	.word	0x08025675
 8025554:	080256cd 	.word	0x080256cd
 8025558:	0802573b 	.word	0x0802573b
 802555c:	080257d9 	.word	0x080257d9
 8025560:	080254b1 	.word	0x080254b1
 8025564:	08025825 	.word	0x08025825
 8025568:	08025911 	.word	0x08025911
 802556c:	080259eb 	.word	0x080259eb
 8025570:	080259f9 	.word	0x080259f9
 8025574:	080254b1 	.word	0x080254b1
 8025578:	080254b1 	.word	0x080254b1
 802557c:	080254b1 	.word	0x080254b1
 8025580:	08025a29 	.word	0x08025a29
 8025584:	080254b1 	.word	0x080254b1
 8025588:	080254b1 	.word	0x080254b1
 802558c:	08025a3d 	.word	0x08025a3d
 8025590:	080254b1 	.word	0x080254b1
 8025594:	08025a8f 	.word	0x08025a8f
 8025598:	08025ba3 	.word	0x08025ba3
 802559c:	08025bb3 	.word	0x08025bb3
 80255a0:	08025bdb 	.word	0x08025bdb
 80255a4:	08025c15 	.word	0x08025c15
 80255a8:	08025c89 	.word	0x08025c89
 80255ac:	08025733 	.word	0x08025733
 80255b0:	08025cb5 	.word	0x08025cb5
 80255b4:	08025d7d 	.word	0x08025d7d
 80255b8:	080254b1 	.word	0x080254b1
 80255bc:	080254b1 	.word	0x080254b1
 80255c0:	080254b1 	.word	0x080254b1
 80255c4:	080254b1 	.word	0x080254b1
 80255c8:	080254b1 	.word	0x080254b1
 80255cc:	080254b1 	.word	0x080254b1
 80255d0:	08025639 	.word	0x08025639
 80255d4:	080256a3 	.word	0x080256a3
 80255d8:	080256f9 	.word	0x080256f9
 80255dc:	080257b5 	.word	0x080257b5
 80255e0:	080257b5 	.word	0x080257b5
 80255e4:	080254b1 	.word	0x080254b1
 80255e8:	08025877 	.word	0x08025877
 80255ec:	080256a3 	.word	0x080256a3
 80255f0:	080254b1 	.word	0x080254b1
 80255f4:	08025a1b 	.word	0x08025a1b
 80255f8:	080259eb 	.word	0x080259eb
 80255fc:	080259f9 	.word	0x080259f9
 8025600:	08025a23 	.word	0x08025a23
 8025604:	08025a2d 	.word	0x08025a2d
 8025608:	080254b1 	.word	0x080254b1
 802560c:	08025a3d 	.word	0x08025a3d
 8025610:	080254b1 	.word	0x080254b1
 8025614:	08025723 	.word	0x08025723
 8025618:	08025aa1 	.word	0x08025aa1
 802561c:	08025ba7 	.word	0x08025ba7
 8025620:	08025bc1 	.word	0x08025bc1
 8025624:	080254b1 	.word	0x080254b1
 8025628:	08025c7b 	.word	0x08025c7b
 802562c:	0802572b 	.word	0x0802572b
 8025630:	08025c99 	.word	0x08025c99
 8025634:	08025d07 	.word	0x08025d07
 8025638:	69b3      	ldr	r3, [r6, #24]
 802563a:	4aa9      	ldr	r2, [pc, #676]	; (80258e0 <__strftime.isra.0+0x494>)
 802563c:	3318      	adds	r3, #24
 802563e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025642:	4648      	mov	r0, r9
 8025644:	f7da fe06 	bl	8000254 <strlen>
 8025648:	f109 39ff 	add.w	r9, r9, #4294967295
 802564c:	4420      	add	r0, r4
 802564e:	1e6b      	subs	r3, r5, #1
 8025650:	42a0      	cmp	r0, r4
 8025652:	d107      	bne.n	8025664 <__strftime.isra.0+0x218>
 8025654:	f898 3000 	ldrb.w	r3, [r8]
 8025658:	2b00      	cmp	r3, #0
 802565a:	f000 83be 	beq.w	8025dda <__strftime.isra.0+0x98e>
 802565e:	f108 0201 	add.w	r2, r8, #1
 8025662:	e6fc      	b.n	802545e <__strftime.isra.0+0x12>
 8025664:	42a3      	cmp	r3, r4
 8025666:	f67f af23 	bls.w	80254b0 <__strftime.isra.0+0x64>
 802566a:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802566e:	553a      	strb	r2, [r7, r4]
 8025670:	3401      	adds	r4, #1
 8025672:	e7ed      	b.n	8025650 <__strftime.isra.0+0x204>
 8025674:	69b2      	ldr	r2, [r6, #24]
 8025676:	4b9a      	ldr	r3, [pc, #616]	; (80258e0 <__strftime.isra.0+0x494>)
 8025678:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 802567c:	f8d3 907c 	ldr.w	r9, [r3, #124]	; 0x7c
 8025680:	4648      	mov	r0, r9
 8025682:	f7da fde7 	bl	8000254 <strlen>
 8025686:	f109 39ff 	add.w	r9, r9, #4294967295
 802568a:	4420      	add	r0, r4
 802568c:	1e6b      	subs	r3, r5, #1
 802568e:	42a0      	cmp	r0, r4
 8025690:	d0e0      	beq.n	8025654 <__strftime.isra.0+0x208>
 8025692:	42a3      	cmp	r3, r4
 8025694:	f67f af0c 	bls.w	80254b0 <__strftime.isra.0+0x64>
 8025698:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 802569c:	553a      	strb	r2, [r7, r4]
 802569e:	3401      	adds	r4, #1
 80256a0:	e7f5      	b.n	802568e <__strftime.isra.0+0x242>
 80256a2:	4b8f      	ldr	r3, [pc, #572]	; (80258e0 <__strftime.isra.0+0x494>)
 80256a4:	6932      	ldr	r2, [r6, #16]
 80256a6:	f853 9022 	ldr.w	r9, [r3, r2, lsl #2]
 80256aa:	4648      	mov	r0, r9
 80256ac:	f7da fdd2 	bl	8000254 <strlen>
 80256b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80256b4:	4420      	add	r0, r4
 80256b6:	1e6b      	subs	r3, r5, #1
 80256b8:	42a0      	cmp	r0, r4
 80256ba:	d0cb      	beq.n	8025654 <__strftime.isra.0+0x208>
 80256bc:	42a3      	cmp	r3, r4
 80256be:	f67f aef7 	bls.w	80254b0 <__strftime.isra.0+0x64>
 80256c2:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80256c6:	553a      	strb	r2, [r7, r4]
 80256c8:	3401      	adds	r4, #1
 80256ca:	e7f5      	b.n	80256b8 <__strftime.isra.0+0x26c>
 80256cc:	6933      	ldr	r3, [r6, #16]
 80256ce:	4a84      	ldr	r2, [pc, #528]	; (80258e0 <__strftime.isra.0+0x494>)
 80256d0:	330c      	adds	r3, #12
 80256d2:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 80256d6:	4648      	mov	r0, r9
 80256d8:	f7da fdbc 	bl	8000254 <strlen>
 80256dc:	f109 39ff 	add.w	r9, r9, #4294967295
 80256e0:	4420      	add	r0, r4
 80256e2:	1e6b      	subs	r3, r5, #1
 80256e4:	42a0      	cmp	r0, r4
 80256e6:	d0b5      	beq.n	8025654 <__strftime.isra.0+0x208>
 80256e8:	42a3      	cmp	r3, r4
 80256ea:	f67f aee1 	bls.w	80254b0 <__strftime.isra.0+0x64>
 80256ee:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 80256f2:	553a      	strb	r2, [r7, r4]
 80256f4:	3401      	adds	r4, #1
 80256f6:	e7f5      	b.n	80256e4 <__strftime.isra.0+0x298>
 80256f8:	4b79      	ldr	r3, [pc, #484]	; (80258e0 <__strftime.isra.0+0x494>)
 80256fa:	f8d3 90a0 	ldr.w	r9, [r3, #160]	; 0xa0
 80256fe:	4648      	mov	r0, r9
 8025700:	f7da fda8 	bl	8000254 <strlen>
 8025704:	f899 3000 	ldrb.w	r3, [r9]
 8025708:	2b00      	cmp	r3, #0
 802570a:	d0a3      	beq.n	8025654 <__strftime.isra.0+0x208>
 802570c:	4633      	mov	r3, r6
 802570e:	464a      	mov	r2, r9
 8025710:	1b29      	subs	r1, r5, r4
 8025712:	1938      	adds	r0, r7, r4
 8025714:	f7ff fe9a 	bl	802544c <__strftime.isra.0>
 8025718:	2800      	cmp	r0, #0
 802571a:	f77f aec9 	ble.w	80254b0 <__strftime.isra.0+0x64>
 802571e:	4404      	add	r4, r0
 8025720:	e798      	b.n	8025654 <__strftime.isra.0+0x208>
 8025722:	4b6f      	ldr	r3, [pc, #444]	; (80258e0 <__strftime.isra.0+0x494>)
 8025724:	f8d3 90e4 	ldr.w	r9, [r3, #228]	; 0xe4
 8025728:	e7e9      	b.n	80256fe <__strftime.isra.0+0x2b2>
 802572a:	4b6d      	ldr	r3, [pc, #436]	; (80258e0 <__strftime.isra.0+0x494>)
 802572c:	f8d3 909c 	ldr.w	r9, [r3, #156]	; 0x9c
 8025730:	e7e5      	b.n	80256fe <__strftime.isra.0+0x2b2>
 8025732:	4b6b      	ldr	r3, [pc, #428]	; (80258e0 <__strftime.isra.0+0x494>)
 8025734:	f8d3 9098 	ldr.w	r9, [r3, #152]	; 0x98
 8025738:	e7e1      	b.n	80256fe <__strftime.isra.0+0x2b2>
 802573a:	496a      	ldr	r1, [pc, #424]	; (80258e4 <__strftime.isra.0+0x498>)
 802573c:	f8d6 a014 	ldr.w	sl, [r6, #20]
 8025740:	458a      	cmp	sl, r1
 8025742:	bfac      	ite	ge
 8025744:	2100      	movge	r1, #0
 8025746:	2101      	movlt	r1, #1
 8025748:	f1ba 0f00 	cmp.w	sl, #0
 802574c:	db11      	blt.n	8025772 <__strftime.isra.0+0x326>
 802574e:	2064      	movs	r0, #100	; 0x64
 8025750:	fb9a f0f0 	sdiv	r0, sl, r0
 8025754:	3013      	adds	r0, #19
 8025756:	f1bb 0f00 	cmp.w	fp, #0
 802575a:	d014      	beq.n	8025786 <__strftime.isra.0+0x33a>
 802575c:	2863      	cmp	r0, #99	; 0x63
 802575e:	dd27      	ble.n	80257b0 <__strftime.isra.0+0x364>
 8025760:	4b61      	ldr	r3, [pc, #388]	; (80258e8 <__strftime.isra.0+0x49c>)
 8025762:	4a62      	ldr	r2, [pc, #392]	; (80258ec <__strftime.isra.0+0x4a0>)
 8025764:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025768:	bf18      	it	ne
 802576a:	461a      	movne	r2, r3
 802576c:	f8df c198 	ldr.w	ip, [pc, #408]	; 8025908 <__strftime.isra.0+0x4bc>
 8025770:	e00c      	b.n	802578c <__strftime.isra.0+0x340>
 8025772:	f20a 706c 	addw	r0, sl, #1900	; 0x76c
 8025776:	9103      	str	r1, [sp, #12]
 8025778:	f000 ff6e 	bl	8026658 <abs>
 802577c:	2264      	movs	r2, #100	; 0x64
 802577e:	9903      	ldr	r1, [sp, #12]
 8025780:	fb90 f0f2 	sdiv	r0, r0, r2
 8025784:	e7e7      	b.n	8025756 <__strftime.isra.0+0x30a>
 8025786:	4a58      	ldr	r2, [pc, #352]	; (80258e8 <__strftime.isra.0+0x49c>)
 8025788:	f8df c180 	ldr.w	ip, [pc, #384]	; 802590c <__strftime.isra.0+0x4c0>
 802578c:	4b58      	ldr	r3, [pc, #352]	; (80258f0 <__strftime.isra.0+0x4a4>)
 802578e:	9001      	str	r0, [sp, #4]
 8025790:	f1b9 0f02 	cmp.w	r9, #2
 8025794:	bf2c      	ite	cs
 8025796:	ebc1 0109 	rsbcs	r1, r1, r9
 802579a:	f1c1 0102 	rsbcc	r1, r1, #2
 802579e:	9100      	str	r1, [sp, #0]
 80257a0:	4950      	ldr	r1, [pc, #320]	; (80258e4 <__strftime.isra.0+0x498>)
 80257a2:	458a      	cmp	sl, r1
 80257a4:	bfa8      	it	ge
 80257a6:	4613      	movge	r3, r2
 80257a8:	4662      	mov	r2, ip
 80257aa:	1b29      	subs	r1, r5, r4
 80257ac:	1938      	adds	r0, r7, r4
 80257ae:	e028      	b.n	8025802 <__strftime.isra.0+0x3b6>
 80257b0:	4a4d      	ldr	r2, [pc, #308]	; (80258e8 <__strftime.isra.0+0x49c>)
 80257b2:	e7db      	b.n	802576c <__strftime.isra.0+0x320>
 80257b4:	494f      	ldr	r1, [pc, #316]	; (80258f4 <__strftime.isra.0+0x4a8>)
 80257b6:	4a50      	ldr	r2, [pc, #320]	; (80258f8 <__strftime.isra.0+0x4ac>)
 80257b8:	68f3      	ldr	r3, [r6, #12]
 80257ba:	2864      	cmp	r0, #100	; 0x64
 80257bc:	bf08      	it	eq
 80257be:	460a      	moveq	r2, r1
 80257c0:	1b29      	subs	r1, r5, r4
 80257c2:	1938      	adds	r0, r7, r4
 80257c4:	f7ff fcfc 	bl	80251c0 <sniprintf>
 80257c8:	2800      	cmp	r0, #0
 80257ca:	f6ff ae71 	blt.w	80254b0 <__strftime.isra.0+0x64>
 80257ce:	4404      	add	r4, r0
 80257d0:	42a5      	cmp	r5, r4
 80257d2:	f63f af3f 	bhi.w	8025654 <__strftime.isra.0+0x208>
 80257d6:	e66b      	b.n	80254b0 <__strftime.isra.0+0x64>
 80257d8:	6970      	ldr	r0, [r6, #20]
 80257da:	6933      	ldr	r3, [r6, #16]
 80257dc:	f8d6 a00c 	ldr.w	sl, [r6, #12]
 80257e0:	2800      	cmp	r0, #0
 80257e2:	eb07 0904 	add.w	r9, r7, r4
 80257e6:	eba5 0104 	sub.w	r1, r5, r4
 80257ea:	f103 0301 	add.w	r3, r3, #1
 80257ee:	db0b      	blt.n	8025808 <__strftime.isra.0+0x3bc>
 80257f0:	2264      	movs	r2, #100	; 0x64
 80257f2:	fb90 fcf2 	sdiv	ip, r0, r2
 80257f6:	fb02 001c 	mls	r0, r2, ip, r0
 80257fa:	4a40      	ldr	r2, [pc, #256]	; (80258fc <__strftime.isra.0+0x4b0>)
 80257fc:	e9cd a000 	strd	sl, r0, [sp]
 8025800:	4648      	mov	r0, r9
 8025802:	f7ff fcdd 	bl	80251c0 <sniprintf>
 8025806:	e7df      	b.n	80257c8 <__strftime.isra.0+0x37c>
 8025808:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 802580c:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8025810:	f000 ff22 	bl	8026658 <abs>
 8025814:	2264      	movs	r2, #100	; 0x64
 8025816:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 802581a:	fb90 fcf2 	sdiv	ip, r0, r2
 802581e:	fb0c 0012 	mls	r0, ip, r2, r0
 8025822:	e7ea      	b.n	80257fa <__strftime.isra.0+0x3ae>
 8025824:	2225      	movs	r2, #37	; 0x25
 8025826:	f88d 2018 	strb.w	r2, [sp, #24]
 802582a:	f1bb 0f00 	cmp.w	fp, #0
 802582e:	d011      	beq.n	8025854 <__strftime.isra.0+0x408>
 8025830:	f1b9 0f06 	cmp.w	r9, #6
 8025834:	bf38      	it	cc
 8025836:	f04f 0906 	movcc.w	r9, #6
 802583a:	f1b9 0306 	subs.w	r3, r9, #6
 802583e:	f88d b019 	strb.w	fp, [sp, #25]
 8025842:	d10c      	bne.n	802585e <__strftime.isra.0+0x412>
 8025844:	f10d 001a 	add.w	r0, sp, #26
 8025848:	492d      	ldr	r1, [pc, #180]	; (8025900 <__strftime.isra.0+0x4b4>)
 802584a:	f7ff fd94 	bl	8025376 <strcpy>
 802584e:	4633      	mov	r3, r6
 8025850:	aa06      	add	r2, sp, #24
 8025852:	e75d      	b.n	8025710 <__strftime.isra.0+0x2c4>
 8025854:	f04f 0b2b 	mov.w	fp, #43	; 0x2b
 8025858:	f04f 090a 	mov.w	r9, #10
 802585c:	e7ed      	b.n	802583a <__strftime.isra.0+0x3ee>
 802585e:	4a29      	ldr	r2, [pc, #164]	; (8025904 <__strftime.isra.0+0x4b8>)
 8025860:	211e      	movs	r1, #30
 8025862:	f10d 001a 	add.w	r0, sp, #26
 8025866:	f7ff fcab 	bl	80251c0 <sniprintf>
 802586a:	2800      	cmp	r0, #0
 802586c:	ddea      	ble.n	8025844 <__strftime.isra.0+0x3f8>
 802586e:	f10d 031a 	add.w	r3, sp, #26
 8025872:	4418      	add	r0, r3
 8025874:	e7e8      	b.n	8025848 <__strftime.isra.0+0x3fc>
 8025876:	4630      	mov	r0, r6
 8025878:	f7ff fd86 	bl	8025388 <iso_year_adjust>
 802587c:	4681      	mov	r9, r0
 802587e:	6970      	ldr	r0, [r6, #20]
 8025880:	2800      	cmp	r0, #0
 8025882:	db11      	blt.n	80258a8 <__strftime.isra.0+0x45c>
 8025884:	2364      	movs	r3, #100	; 0x64
 8025886:	fb90 f2f3 	sdiv	r2, r0, r3
 802588a:	fb03 0012 	mls	r0, r3, r2, r0
 802588e:	2264      	movs	r2, #100	; 0x64
 8025890:	4481      	add	r9, r0
 8025892:	fb99 f3f2 	sdiv	r3, r9, r2
 8025896:	fb02 9913 	mls	r9, r2, r3, r9
 802589a:	4491      	add	r9, r2
 802589c:	fbb9 f3f2 	udiv	r3, r9, r2
 80258a0:	fb02 9313 	mls	r3, r2, r3, r9
 80258a4:	4a13      	ldr	r2, [pc, #76]	; (80258f4 <__strftime.isra.0+0x4a8>)
 80258a6:	e78b      	b.n	80257c0 <__strftime.isra.0+0x374>
 80258a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80258ac:	f000 fed4 	bl	8026658 <abs>
 80258b0:	2364      	movs	r3, #100	; 0x64
 80258b2:	f1b9 0f00 	cmp.w	r9, #0
 80258b6:	fb90 f2f3 	sdiv	r2, r0, r3
 80258ba:	fb02 0013 	mls	r0, r2, r3, r0
 80258be:	da07      	bge.n	80258d0 <__strftime.isra.0+0x484>
 80258c0:	6972      	ldr	r2, [r6, #20]
 80258c2:	f2a3 73cf 	subw	r3, r3, #1999	; 0x7cf
 80258c6:	429a      	cmp	r2, r3
 80258c8:	bfb8      	it	lt
 80258ca:	f04f 0901 	movlt.w	r9, #1
 80258ce:	e7de      	b.n	802588e <__strftime.isra.0+0x442>
 80258d0:	d0dd      	beq.n	802588e <__strftime.isra.0+0x442>
 80258d2:	6972      	ldr	r2, [r6, #20]
 80258d4:	4b03      	ldr	r3, [pc, #12]	; (80258e4 <__strftime.isra.0+0x498>)
 80258d6:	429a      	cmp	r2, r3
 80258d8:	bfb8      	it	lt
 80258da:	f04f 39ff 	movlt.w	r9, #4294967295
 80258de:	e7d6      	b.n	802588e <__strftime.isra.0+0x442>
 80258e0:	08045a34 	.word	0x08045a34
 80258e4:	fffff894 	.word	0xfffff894
 80258e8:	08045ba7 	.word	0x08045ba7
 80258ec:	080458bc 	.word	0x080458bc
 80258f0:	08045d8e 	.word	0x08045d8e
 80258f4:	080458cc 	.word	0x080458cc
 80258f8:	080458be 	.word	0x080458be
 80258fc:	080458c2 	.word	0x080458c2
 8025900:	080458d5 	.word	0x080458d5
 8025904:	080458d1 	.word	0x080458d1
 8025908:	080458b4 	.word	0x080458b4
 802590c:	080458ad 	.word	0x080458ad
 8025910:	6971      	ldr	r1, [r6, #20]
 8025912:	4ab6      	ldr	r2, [pc, #728]	; (8025bec <__strftime.isra.0+0x7a0>)
 8025914:	4291      	cmp	r1, r2
 8025916:	bfac      	ite	ge
 8025918:	2300      	movge	r3, #0
 802591a:	2301      	movlt	r3, #1
 802591c:	4630      	mov	r0, r6
 802591e:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8025922:	f7ff fd31 	bl	8025388 <iso_year_adjust>
 8025926:	9904      	ldr	r1, [sp, #16]
 8025928:	2900      	cmp	r1, #0
 802592a:	4682      	mov	sl, r0
 802592c:	db2c      	blt.n	8025988 <__strftime.isra.0+0x53c>
 802592e:	2264      	movs	r2, #100	; 0x64
 8025930:	fb91 f2f2 	sdiv	r2, r1, r2
 8025934:	3213      	adds	r2, #19
 8025936:	6970      	ldr	r0, [r6, #20]
 8025938:	2800      	cmp	r0, #0
 802593a:	db30      	blt.n	802599e <__strftime.isra.0+0x552>
 802593c:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025940:	fb90 fefc 	sdiv	lr, r0, ip
 8025944:	fb0c 001e 	mls	r0, ip, lr, r0
 8025948:	f1ba 0f00 	cmp.w	sl, #0
 802594c:	da36      	bge.n	80259bc <__strftime.isra.0+0x570>
 802594e:	6971      	ldr	r1, [r6, #20]
 8025950:	4ba7      	ldr	r3, [pc, #668]	; (8025bf0 <__strftime.isra.0+0x7a4>)
 8025952:	4299      	cmp	r1, r3
 8025954:	db3d      	blt.n	80259d2 <__strftime.isra.0+0x586>
 8025956:	4482      	add	sl, r0
 8025958:	f1ba 3fff 	cmp.w	sl, #4294967295
 802595c:	d13e      	bne.n	80259dc <__strftime.isra.0+0x590>
 802595e:	3a01      	subs	r2, #1
 8025960:	f04f 0a63 	mov.w	sl, #99	; 0x63
 8025964:	9b03      	ldr	r3, [sp, #12]
 8025966:	2064      	movs	r0, #100	; 0x64
 8025968:	fb00 aa02 	mla	sl, r0, r2, sl
 802596c:	2b00      	cmp	r3, #0
 802596e:	f000 81ad 	beq.w	8025ccc <__strftime.isra.0+0x880>
 8025972:	222d      	movs	r2, #45	; 0x2d
 8025974:	f88d 2018 	strb.w	r2, [sp, #24]
 8025978:	f1b9 0f00 	cmp.w	r9, #0
 802597c:	d001      	beq.n	8025982 <__strftime.isra.0+0x536>
 802597e:	f109 39ff 	add.w	r9, r9, #4294967295
 8025982:	f10d 0219 	add.w	r2, sp, #25
 8025986:	e1ac      	b.n	8025ce2 <__strftime.isra.0+0x896>
 8025988:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 802598c:	9104      	str	r1, [sp, #16]
 802598e:	f000 fe63 	bl	8026658 <abs>
 8025992:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8025996:	9904      	ldr	r1, [sp, #16]
 8025998:	fb90 f2fc 	sdiv	r2, r0, ip
 802599c:	e7cb      	b.n	8025936 <__strftime.isra.0+0x4ea>
 802599e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80259a2:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80259a6:	f000 fe57 	bl	8026658 <abs>
 80259aa:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80259ae:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80259b2:	fb90 fefc 	sdiv	lr, r0, ip
 80259b6:	fb0e 001c 	mls	r0, lr, ip, r0
 80259ba:	e7c5      	b.n	8025948 <__strftime.isra.0+0x4fc>
 80259bc:	d0cb      	beq.n	8025956 <__strftime.isra.0+0x50a>
 80259be:	4b8b      	ldr	r3, [pc, #556]	; (8025bec <__strftime.isra.0+0x7a0>)
 80259c0:	4299      	cmp	r1, r3
 80259c2:	bfb4      	ite	lt
 80259c4:	2301      	movlt	r3, #1
 80259c6:	2300      	movge	r3, #0
 80259c8:	9303      	str	r3, [sp, #12]
 80259ca:	bfb8      	it	lt
 80259cc:	f04f 3aff 	movlt.w	sl, #4294967295
 80259d0:	e7c1      	b.n	8025956 <__strftime.isra.0+0x50a>
 80259d2:	f04f 0a01 	mov.w	sl, #1
 80259d6:	f8cd a00c 	str.w	sl, [sp, #12]
 80259da:	e7bc      	b.n	8025956 <__strftime.isra.0+0x50a>
 80259dc:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 80259e0:	bf04      	itt	eq
 80259e2:	3201      	addeq	r2, #1
 80259e4:	f04f 0a00 	moveq.w	sl, #0
 80259e8:	e7bc      	b.n	8025964 <__strftime.isra.0+0x518>
 80259ea:	4982      	ldr	r1, [pc, #520]	; (8025bf4 <__strftime.isra.0+0x7a8>)
 80259ec:	4a82      	ldr	r2, [pc, #520]	; (8025bf8 <__strftime.isra.0+0x7ac>)
 80259ee:	68b3      	ldr	r3, [r6, #8]
 80259f0:	286b      	cmp	r0, #107	; 0x6b
 80259f2:	bf08      	it	eq
 80259f4:	460a      	moveq	r2, r1
 80259f6:	e6e3      	b.n	80257c0 <__strftime.isra.0+0x374>
 80259f8:	68b3      	ldr	r3, [r6, #8]
 80259fa:	b163      	cbz	r3, 8025a16 <__strftime.isra.0+0x5ca>
 80259fc:	2b0c      	cmp	r3, #12
 80259fe:	d004      	beq.n	8025a0a <__strftime.isra.0+0x5be>
 8025a00:	210c      	movs	r1, #12
 8025a02:	fb93 f2f1 	sdiv	r2, r3, r1
 8025a06:	fb01 3312 	mls	r3, r1, r2, r3
 8025a0a:	497b      	ldr	r1, [pc, #492]	; (8025bf8 <__strftime.isra.0+0x7ac>)
 8025a0c:	4a79      	ldr	r2, [pc, #484]	; (8025bf4 <__strftime.isra.0+0x7a8>)
 8025a0e:	2849      	cmp	r0, #73	; 0x49
 8025a10:	bf08      	it	eq
 8025a12:	460a      	moveq	r2, r1
 8025a14:	e6d4      	b.n	80257c0 <__strftime.isra.0+0x374>
 8025a16:	230c      	movs	r3, #12
 8025a18:	e7f7      	b.n	8025a0a <__strftime.isra.0+0x5be>
 8025a1a:	69f3      	ldr	r3, [r6, #28]
 8025a1c:	4a77      	ldr	r2, [pc, #476]	; (8025bfc <__strftime.isra.0+0x7b0>)
 8025a1e:	3301      	adds	r3, #1
 8025a20:	e6ce      	b.n	80257c0 <__strftime.isra.0+0x374>
 8025a22:	6933      	ldr	r3, [r6, #16]
 8025a24:	3301      	adds	r3, #1
 8025a26:	e73d      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025a28:	6873      	ldr	r3, [r6, #4]
 8025a2a:	e73b      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025a2c:	1e6b      	subs	r3, r5, #1
 8025a2e:	429c      	cmp	r4, r3
 8025a30:	f4bf ad3e 	bcs.w	80254b0 <__strftime.isra.0+0x64>
 8025a34:	230a      	movs	r3, #10
 8025a36:	553b      	strb	r3, [r7, r4]
 8025a38:	3401      	adds	r4, #1
 8025a3a:	e60b      	b.n	8025654 <__strftime.isra.0+0x208>
 8025a3c:	68b3      	ldr	r3, [r6, #8]
 8025a3e:	2b0b      	cmp	r3, #11
 8025a40:	4b6f      	ldr	r3, [pc, #444]	; (8025c00 <__strftime.isra.0+0x7b4>)
 8025a42:	bfd4      	ite	le
 8025a44:	2200      	movle	r2, #0
 8025a46:	2201      	movgt	r2, #1
 8025a48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025a4c:	f8d3 90a4 	ldr.w	r9, [r3, #164]	; 0xa4
 8025a50:	4648      	mov	r0, r9
 8025a52:	f7da fbff 	bl	8000254 <strlen>
 8025a56:	f109 32ff 	add.w	r2, r9, #4294967295
 8025a5a:	4420      	add	r0, r4
 8025a5c:	f105 3cff 	add.w	ip, r5, #4294967295
 8025a60:	42a0      	cmp	r0, r4
 8025a62:	f43f adf7 	beq.w	8025654 <__strftime.isra.0+0x208>
 8025a66:	45a4      	cmp	ip, r4
 8025a68:	f67f ad22 	bls.w	80254b0 <__strftime.isra.0+0x64>
 8025a6c:	f898 1000 	ldrb.w	r1, [r8]
 8025a70:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8025a74:	2950      	cmp	r1, #80	; 0x50
 8025a76:	d107      	bne.n	8025a88 <__strftime.isra.0+0x63c>
 8025a78:	4962      	ldr	r1, [pc, #392]	; (8025c04 <__strftime.isra.0+0x7b8>)
 8025a7a:	5cc9      	ldrb	r1, [r1, r3]
 8025a7c:	f001 0103 	and.w	r1, r1, #3
 8025a80:	2901      	cmp	r1, #1
 8025a82:	bf08      	it	eq
 8025a84:	3320      	addeq	r3, #32
 8025a86:	b2db      	uxtb	r3, r3
 8025a88:	553b      	strb	r3, [r7, r4]
 8025a8a:	3401      	adds	r4, #1
 8025a8c:	e7e8      	b.n	8025a60 <__strftime.isra.0+0x614>
 8025a8e:	6873      	ldr	r3, [r6, #4]
 8025a90:	9300      	str	r3, [sp, #0]
 8025a92:	4a5d      	ldr	r2, [pc, #372]	; (8025c08 <__strftime.isra.0+0x7bc>)
 8025a94:	68b3      	ldr	r3, [r6, #8]
 8025a96:	1b29      	subs	r1, r5, r4
 8025a98:	1938      	adds	r0, r7, r4
 8025a9a:	f7ff fb91 	bl	80251c0 <sniprintf>
 8025a9e:	e693      	b.n	80257c8 <__strftime.isra.0+0x37c>
 8025aa0:	6a33      	ldr	r3, [r6, #32]
 8025aa2:	2b00      	cmp	r3, #0
 8025aa4:	db7a      	blt.n	8025b9c <__strftime.isra.0+0x750>
 8025aa6:	f000 fb73 	bl	8026190 <__tz_lock>
 8025aaa:	9b02      	ldr	r3, [sp, #8]
 8025aac:	b90b      	cbnz	r3, 8025ab2 <__strftime.isra.0+0x666>
 8025aae:	f000 fb7b 	bl	80261a8 <_tzset_unlocked>
 8025ab2:	f001 fd31 	bl	8027518 <__gettzinfo>
 8025ab6:	6a33      	ldr	r3, [r6, #32]
 8025ab8:	2b00      	cmp	r3, #0
 8025aba:	bfd4      	ite	le
 8025abc:	2200      	movle	r2, #0
 8025abe:	2201      	movgt	r2, #1
 8025ac0:	2328      	movs	r3, #40	; 0x28
 8025ac2:	fb02 3303 	mla	r3, r2, r3, r3
 8025ac6:	58c3      	ldr	r3, [r0, r3]
 8025ac8:	f1c3 0900 	rsb	r9, r3, #0
 8025acc:	f000 fb66 	bl	802619c <__tz_unlock>
 8025ad0:	2301      	movs	r3, #1
 8025ad2:	9302      	str	r3, [sp, #8]
 8025ad4:	6972      	ldr	r2, [r6, #20]
 8025ad6:	f1b2 0345 	subs.w	r3, r2, #69	; 0x45
 8025ada:	ea4f 7ce2 	mov.w	ip, r2, asr #31
 8025ade:	f16c 0c00 	sbc.w	ip, ip, #0
 8025ae2:	f1bc 0f00 	cmp.w	ip, #0
 8025ae6:	eba5 0104 	sub.w	r1, r5, r4
 8025aea:	eb07 0004 	add.w	r0, r7, r4
 8025aee:	da02      	bge.n	8025af6 <__strftime.isra.0+0x6aa>
 8025af0:	3303      	adds	r3, #3
 8025af2:	f14c 0c00 	adc.w	ip, ip, #0
 8025af6:	089b      	lsrs	r3, r3, #2
 8025af8:	ea43 738c 	orr.w	r3, r3, ip, lsl #30
 8025afc:	f102 3aff 	add.w	sl, r2, #4294967295
 8025b00:	ea4f 0cac 	mov.w	ip, ip, asr #2
 8025b04:	f04f 0e64 	mov.w	lr, #100	; 0x64
 8025b08:	fb9a fefe 	sdiv	lr, sl, lr
 8025b0c:	ebb3 030e 	subs.w	r3, r3, lr
 8025b10:	eb6c 7cee 	sbc.w	ip, ip, lr, asr #31
 8025b14:	f202 1a2b 	addw	sl, r2, #299	; 0x12b
 8025b18:	f44f 7ec8 	mov.w	lr, #400	; 0x190
 8025b1c:	fb9a fefe 	sdiv	lr, sl, lr
 8025b20:	eb13 030e 	adds.w	r3, r3, lr
 8025b24:	eb4c 7eee 	adc.w	lr, ip, lr, asr #31
 8025b28:	3a46      	subs	r2, #70	; 0x46
 8025b2a:	f240 1c6d 	movw	ip, #365	; 0x16d
 8025b2e:	fb0c f202 	mul.w	r2, ip, r2
 8025b32:	189b      	adds	r3, r3, r2
 8025b34:	eb4e 72e2 	adc.w	r2, lr, r2, asr #31
 8025b38:	f8d6 e01c 	ldr.w	lr, [r6, #28]
 8025b3c:	f04f 0c18 	mov.w	ip, #24
 8025b40:	eb13 030e 	adds.w	r3, r3, lr
 8025b44:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025b48:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025b4c:	fb0c e202 	mla	r2, ip, r2, lr
 8025b50:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8025b54:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
 8025b58:	eb13 030e 	adds.w	r3, r3, lr
 8025b5c:	eb42 7eee 	adc.w	lr, r2, lr, asr #31
 8025b60:	fba3 320c 	umull	r3, r2, r3, ip
 8025b64:	fb0c 220e 	mla	r2, ip, lr, r2
 8025b68:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8025b6c:	eb13 030e 	adds.w	r3, r3, lr
 8025b70:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025b74:	fba3 3e0c 	umull	r3, lr, r3, ip
 8025b78:	fb0c e202 	mla	r2, ip, r2, lr
 8025b7c:	f8d6 e000 	ldr.w	lr, [r6]
 8025b80:	eb13 030e 	adds.w	r3, r3, lr
 8025b84:	eb42 72ee 	adc.w	r2, r2, lr, asr #31
 8025b88:	ebb3 0309 	subs.w	r3, r3, r9
 8025b8c:	eb62 72e9 	sbc.w	r2, r2, r9, asr #31
 8025b90:	e9cd 3200 	strd	r3, r2, [sp]
 8025b94:	4a1d      	ldr	r2, [pc, #116]	; (8025c0c <__strftime.isra.0+0x7c0>)
 8025b96:	f7ff fb13 	bl	80251c0 <sniprintf>
 8025b9a:	e615      	b.n	80257c8 <__strftime.isra.0+0x37c>
 8025b9c:	f04f 0900 	mov.w	r9, #0
 8025ba0:	e798      	b.n	8025ad4 <__strftime.isra.0+0x688>
 8025ba2:	6833      	ldr	r3, [r6, #0]
 8025ba4:	e67e      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025ba6:	1e6b      	subs	r3, r5, #1
 8025ba8:	429c      	cmp	r4, r3
 8025baa:	f4bf ac81 	bcs.w	80254b0 <__strftime.isra.0+0x64>
 8025bae:	2309      	movs	r3, #9
 8025bb0:	e741      	b.n	8025a36 <__strftime.isra.0+0x5ea>
 8025bb2:	6833      	ldr	r3, [r6, #0]
 8025bb4:	9301      	str	r3, [sp, #4]
 8025bb6:	6873      	ldr	r3, [r6, #4]
 8025bb8:	9300      	str	r3, [sp, #0]
 8025bba:	4a15      	ldr	r2, [pc, #84]	; (8025c10 <__strftime.isra.0+0x7c4>)
 8025bbc:	68b3      	ldr	r3, [r6, #8]
 8025bbe:	e5f4      	b.n	80257aa <__strftime.isra.0+0x35e>
 8025bc0:	1e6b      	subs	r3, r5, #1
 8025bc2:	429c      	cmp	r4, r3
 8025bc4:	f4bf ac74 	bcs.w	80254b0 <__strftime.isra.0+0x64>
 8025bc8:	69b3      	ldr	r3, [r6, #24]
 8025bca:	1c62      	adds	r2, r4, #1
 8025bcc:	b91b      	cbnz	r3, 8025bd6 <__strftime.isra.0+0x78a>
 8025bce:	2337      	movs	r3, #55	; 0x37
 8025bd0:	553b      	strb	r3, [r7, r4]
 8025bd2:	4614      	mov	r4, r2
 8025bd4:	e53e      	b.n	8025654 <__strftime.isra.0+0x208>
 8025bd6:	3330      	adds	r3, #48	; 0x30
 8025bd8:	e7fa      	b.n	8025bd0 <__strftime.isra.0+0x784>
 8025bda:	69f3      	ldr	r3, [r6, #28]
 8025bdc:	69b2      	ldr	r2, [r6, #24]
 8025bde:	3307      	adds	r3, #7
 8025be0:	1a9b      	subs	r3, r3, r2
 8025be2:	2207      	movs	r2, #7
 8025be4:	fb93 f3f2 	sdiv	r3, r3, r2
 8025be8:	e65c      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025bea:	bf00      	nop
 8025bec:	fffff894 	.word	0xfffff894
 8025bf0:	fffff895 	.word	0xfffff895
 8025bf4:	080458be 	.word	0x080458be
 8025bf8:	080458cc 	.word	0x080458cc
 8025bfc:	080458e1 	.word	0x080458e1
 8025c00:	08045a34 	.word	0x08045a34
 8025c04:	08045585 	.word	0x08045585
 8025c08:	080458f0 	.word	0x080458f0
 8025c0c:	080458e6 	.word	0x080458e6
 8025c10:	080458eb 	.word	0x080458eb
 8025c14:	4630      	mov	r0, r6
 8025c16:	f7ff fbb7 	bl	8025388 <iso_year_adjust>
 8025c1a:	69b2      	ldr	r2, [r6, #24]
 8025c1c:	b132      	cbz	r2, 8025c2c <__strftime.isra.0+0x7e0>
 8025c1e:	3a01      	subs	r2, #1
 8025c20:	2800      	cmp	r0, #0
 8025c22:	dc28      	bgt.n	8025c76 <__strftime.isra.0+0x82a>
 8025c24:	69f3      	ldr	r3, [r6, #28]
 8025c26:	d103      	bne.n	8025c30 <__strftime.isra.0+0x7e4>
 8025c28:	330a      	adds	r3, #10
 8025c2a:	e7d9      	b.n	8025be0 <__strftime.isra.0+0x794>
 8025c2c:	2206      	movs	r2, #6
 8025c2e:	e7f7      	b.n	8025c20 <__strftime.isra.0+0x7d4>
 8025c30:	6971      	ldr	r1, [r6, #20]
 8025c32:	2900      	cmp	r1, #0
 8025c34:	eba2 0203 	sub.w	r2, r2, r3
 8025c38:	f240 736b 	movw	r3, #1899	; 0x76b
 8025c3c:	bfa8      	it	ge
 8025c3e:	f06f 0364 	mvnge.w	r3, #100	; 0x64
 8025c42:	440b      	add	r3, r1
 8025c44:	0799      	lsls	r1, r3, #30
 8025c46:	d105      	bne.n	8025c54 <__strftime.isra.0+0x808>
 8025c48:	2064      	movs	r0, #100	; 0x64
 8025c4a:	fb93 f1f0 	sdiv	r1, r3, r0
 8025c4e:	fb00 3111 	mls	r1, r0, r1, r3
 8025c52:	b971      	cbnz	r1, 8025c72 <__strftime.isra.0+0x826>
 8025c54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8025c58:	fb93 f0f1 	sdiv	r0, r3, r1
 8025c5c:	fb01 3310 	mls	r3, r1, r0, r3
 8025c60:	fab3 f383 	clz	r3, r3
 8025c64:	095b      	lsrs	r3, r3, #5
 8025c66:	1ad3      	subs	r3, r2, r3
 8025c68:	2b05      	cmp	r3, #5
 8025c6a:	bfb4      	ite	lt
 8025c6c:	2335      	movlt	r3, #53	; 0x35
 8025c6e:	2334      	movge	r3, #52	; 0x34
 8025c70:	e618      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025c72:	2301      	movs	r3, #1
 8025c74:	e7f7      	b.n	8025c66 <__strftime.isra.0+0x81a>
 8025c76:	2301      	movs	r3, #1
 8025c78:	e614      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025c7a:	1e6b      	subs	r3, r5, #1
 8025c7c:	429c      	cmp	r4, r3
 8025c7e:	f4bf ac17 	bcs.w	80254b0 <__strftime.isra.0+0x64>
 8025c82:	69b3      	ldr	r3, [r6, #24]
 8025c84:	3330      	adds	r3, #48	; 0x30
 8025c86:	e6d6      	b.n	8025a36 <__strftime.isra.0+0x5ea>
 8025c88:	69b2      	ldr	r2, [r6, #24]
 8025c8a:	b11a      	cbz	r2, 8025c94 <__strftime.isra.0+0x848>
 8025c8c:	3a01      	subs	r2, #1
 8025c8e:	69f3      	ldr	r3, [r6, #28]
 8025c90:	3307      	adds	r3, #7
 8025c92:	e7a5      	b.n	8025be0 <__strftime.isra.0+0x794>
 8025c94:	2206      	movs	r2, #6
 8025c96:	e7fa      	b.n	8025c8e <__strftime.isra.0+0x842>
 8025c98:	6970      	ldr	r0, [r6, #20]
 8025c9a:	2800      	cmp	r0, #0
 8025c9c:	db05      	blt.n	8025caa <__strftime.isra.0+0x85e>
 8025c9e:	2364      	movs	r3, #100	; 0x64
 8025ca0:	fb90 f2f3 	sdiv	r2, r0, r3
 8025ca4:	fb02 0313 	mls	r3, r2, r3, r0
 8025ca8:	e5fc      	b.n	80258a4 <__strftime.isra.0+0x458>
 8025caa:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8025cae:	f000 fcd3 	bl	8026658 <abs>
 8025cb2:	e7f4      	b.n	8025c9e <__strftime.isra.0+0x852>
 8025cb4:	6972      	ldr	r2, [r6, #20]
 8025cb6:	494c      	ldr	r1, [pc, #304]	; (8025de8 <__strftime.isra.0+0x99c>)
 8025cb8:	428a      	cmp	r2, r1
 8025cba:	da05      	bge.n	8025cc8 <__strftime.isra.0+0x87c>
 8025cbc:	202d      	movs	r0, #45	; 0x2d
 8025cbe:	f88d 0018 	strb.w	r0, [sp, #24]
 8025cc2:	eba1 0a02 	sub.w	sl, r1, r2
 8025cc6:	e657      	b.n	8025978 <__strftime.isra.0+0x52c>
 8025cc8:	f202 7a6c 	addw	sl, r2, #1900	; 0x76c
 8025ccc:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
 8025cd0:	d106      	bne.n	8025ce0 <__strftime.isra.0+0x894>
 8025cd2:	f242 720f 	movw	r2, #9999	; 0x270f
 8025cd6:	4592      	cmp	sl, r2
 8025cd8:	d902      	bls.n	8025ce0 <__strftime.isra.0+0x894>
 8025cda:	f88d b018 	strb.w	fp, [sp, #24]
 8025cde:	e64b      	b.n	8025978 <__strftime.isra.0+0x52c>
 8025ce0:	aa06      	add	r2, sp, #24
 8025ce2:	2125      	movs	r1, #37	; 0x25
 8025ce4:	7011      	strb	r1, [r2, #0]
 8025ce6:	f1bb 0f00 	cmp.w	fp, #0
 8025cea:	d108      	bne.n	8025cfe <__strftime.isra.0+0x8b2>
 8025cec:	1c50      	adds	r0, r2, #1
 8025cee:	493f      	ldr	r1, [pc, #252]	; (8025dec <__strftime.isra.0+0x9a0>)
 8025cf0:	f7ff fb41 	bl	8025376 <strcpy>
 8025cf4:	f8cd a000 	str.w	sl, [sp]
 8025cf8:	464b      	mov	r3, r9
 8025cfa:	aa06      	add	r2, sp, #24
 8025cfc:	e6cb      	b.n	8025a96 <__strftime.isra.0+0x64a>
 8025cfe:	2330      	movs	r3, #48	; 0x30
 8025d00:	1c90      	adds	r0, r2, #2
 8025d02:	7053      	strb	r3, [r2, #1]
 8025d04:	e7f3      	b.n	8025cee <__strftime.isra.0+0x8a2>
 8025d06:	6a33      	ldr	r3, [r6, #32]
 8025d08:	2b00      	cmp	r3, #0
 8025d0a:	f6ff aca3 	blt.w	8025654 <__strftime.isra.0+0x208>
 8025d0e:	f000 fa3f 	bl	8026190 <__tz_lock>
 8025d12:	9b02      	ldr	r3, [sp, #8]
 8025d14:	b90b      	cbnz	r3, 8025d1a <__strftime.isra.0+0x8ce>
 8025d16:	f000 fa47 	bl	80261a8 <_tzset_unlocked>
 8025d1a:	f001 fbfd 	bl	8027518 <__gettzinfo>
 8025d1e:	6a33      	ldr	r3, [r6, #32]
 8025d20:	2b00      	cmp	r3, #0
 8025d22:	bfd4      	ite	le
 8025d24:	2200      	movle	r2, #0
 8025d26:	2201      	movgt	r2, #1
 8025d28:	2328      	movs	r3, #40	; 0x28
 8025d2a:	fb02 3303 	mla	r3, r2, r3, r3
 8025d2e:	eb07 0a04 	add.w	sl, r7, r4
 8025d32:	58c3      	ldr	r3, [r0, r3]
 8025d34:	f1c3 0900 	rsb	r9, r3, #0
 8025d38:	f000 fa30 	bl	802619c <__tz_unlock>
 8025d3c:	233c      	movs	r3, #60	; 0x3c
 8025d3e:	fb99 f0f3 	sdiv	r0, r9, r3
 8025d42:	f001 fc99 	bl	8027678 <labs>
 8025d46:	233c      	movs	r3, #60	; 0x3c
 8025d48:	eba5 0b04 	sub.w	fp, r5, r4
 8025d4c:	fb90 f2f3 	sdiv	r2, r0, r3
 8025d50:	fb02 0013 	mls	r0, r2, r3, r0
 8025d54:	9000      	str	r0, [sp, #0]
 8025d56:	4a26      	ldr	r2, [pc, #152]	; (8025df0 <__strftime.isra.0+0x9a4>)
 8025d58:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8025d5c:	4659      	mov	r1, fp
 8025d5e:	4650      	mov	r0, sl
 8025d60:	fb99 f3f3 	sdiv	r3, r9, r3
 8025d64:	f7ff fa2c 	bl	80251c0 <sniprintf>
 8025d68:	2800      	cmp	r0, #0
 8025d6a:	f6ff aba1 	blt.w	80254b0 <__strftime.isra.0+0x64>
 8025d6e:	4404      	add	r4, r0
 8025d70:	42a5      	cmp	r5, r4
 8025d72:	f67f ab9d 	bls.w	80254b0 <__strftime.isra.0+0x64>
 8025d76:	2301      	movs	r3, #1
 8025d78:	9302      	str	r3, [sp, #8]
 8025d7a:	e46b      	b.n	8025654 <__strftime.isra.0+0x208>
 8025d7c:	6a33      	ldr	r3, [r6, #32]
 8025d7e:	2b00      	cmp	r3, #0
 8025d80:	f6ff ac68 	blt.w	8025654 <__strftime.isra.0+0x208>
 8025d84:	f000 fa04 	bl	8026190 <__tz_lock>
 8025d88:	9b02      	ldr	r3, [sp, #8]
 8025d8a:	b90b      	cbnz	r3, 8025d90 <__strftime.isra.0+0x944>
 8025d8c:	f000 fa0c 	bl	80261a8 <_tzset_unlocked>
 8025d90:	6a33      	ldr	r3, [r6, #32]
 8025d92:	4a18      	ldr	r2, [pc, #96]	; (8025df4 <__strftime.isra.0+0x9a8>)
 8025d94:	2b00      	cmp	r3, #0
 8025d96:	bfd4      	ite	le
 8025d98:	2300      	movle	r3, #0
 8025d9a:	2301      	movgt	r3, #1
 8025d9c:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
 8025da0:	4648      	mov	r0, r9
 8025da2:	f7da fa57 	bl	8000254 <strlen>
 8025da6:	f109 39ff 	add.w	r9, r9, #4294967295
 8025daa:	4420      	add	r0, r4
 8025dac:	1e6b      	subs	r3, r5, #1
 8025dae:	42a0      	cmp	r0, r4
 8025db0:	d102      	bne.n	8025db8 <__strftime.isra.0+0x96c>
 8025db2:	f000 f9f3 	bl	802619c <__tz_unlock>
 8025db6:	e7de      	b.n	8025d76 <__strftime.isra.0+0x92a>
 8025db8:	42a3      	cmp	r3, r4
 8025dba:	d904      	bls.n	8025dc6 <__strftime.isra.0+0x97a>
 8025dbc:	f819 2f01 	ldrb.w	r2, [r9, #1]!
 8025dc0:	553a      	strb	r2, [r7, r4]
 8025dc2:	3401      	adds	r4, #1
 8025dc4:	e7f3      	b.n	8025dae <__strftime.isra.0+0x962>
 8025dc6:	f000 f9e9 	bl	802619c <__tz_unlock>
 8025dca:	f7ff bb71 	b.w	80254b0 <__strftime.isra.0+0x64>
 8025dce:	1e6b      	subs	r3, r5, #1
 8025dd0:	429c      	cmp	r4, r3
 8025dd2:	f4bf ab6d 	bcs.w	80254b0 <__strftime.isra.0+0x64>
 8025dd6:	2325      	movs	r3, #37	; 0x25
 8025dd8:	e62d      	b.n	8025a36 <__strftime.isra.0+0x5ea>
 8025dda:	b10d      	cbz	r5, 8025de0 <__strftime.isra.0+0x994>
 8025ddc:	2300      	movs	r3, #0
 8025dde:	553b      	strb	r3, [r7, r4]
 8025de0:	4620      	mov	r0, r4
 8025de2:	b00f      	add	sp, #60	; 0x3c
 8025de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025de8:	fffff894 	.word	0xfffff894
 8025dec:	080458dd 	.word	0x080458dd
 8025df0:	080458fa 	.word	0x080458fa
 8025df4:	200004d0 	.word	0x200004d0

08025df8 <strftime>:
 8025df8:	f7ff bb28 	b.w	802544c <__strftime.isra.0>

08025dfc <strncmp>:
 8025dfc:	b510      	push	{r4, lr}
 8025dfe:	b17a      	cbz	r2, 8025e20 <strncmp+0x24>
 8025e00:	4603      	mov	r3, r0
 8025e02:	3901      	subs	r1, #1
 8025e04:	1884      	adds	r4, r0, r2
 8025e06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8025e0a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8025e0e:	4290      	cmp	r0, r2
 8025e10:	d101      	bne.n	8025e16 <strncmp+0x1a>
 8025e12:	42a3      	cmp	r3, r4
 8025e14:	d101      	bne.n	8025e1a <strncmp+0x1e>
 8025e16:	1a80      	subs	r0, r0, r2
 8025e18:	bd10      	pop	{r4, pc}
 8025e1a:	2800      	cmp	r0, #0
 8025e1c:	d1f3      	bne.n	8025e06 <strncmp+0xa>
 8025e1e:	e7fa      	b.n	8025e16 <strncmp+0x1a>
 8025e20:	4610      	mov	r0, r2
 8025e22:	e7f9      	b.n	8025e18 <strncmp+0x1c>

08025e24 <_strtol_l.constprop.0>:
 8025e24:	2b01      	cmp	r3, #1
 8025e26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025e2a:	d001      	beq.n	8025e30 <_strtol_l.constprop.0+0xc>
 8025e2c:	2b24      	cmp	r3, #36	; 0x24
 8025e2e:	d906      	bls.n	8025e3e <_strtol_l.constprop.0+0x1a>
 8025e30:	f001 fa54 	bl	80272dc <__errno>
 8025e34:	2316      	movs	r3, #22
 8025e36:	6003      	str	r3, [r0, #0]
 8025e38:	2000      	movs	r0, #0
 8025e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025e3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8025f24 <_strtol_l.constprop.0+0x100>
 8025e42:	460d      	mov	r5, r1
 8025e44:	462e      	mov	r6, r5
 8025e46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025e4a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8025e4e:	f017 0708 	ands.w	r7, r7, #8
 8025e52:	d1f7      	bne.n	8025e44 <_strtol_l.constprop.0+0x20>
 8025e54:	2c2d      	cmp	r4, #45	; 0x2d
 8025e56:	d132      	bne.n	8025ebe <_strtol_l.constprop.0+0x9a>
 8025e58:	782c      	ldrb	r4, [r5, #0]
 8025e5a:	2701      	movs	r7, #1
 8025e5c:	1cb5      	adds	r5, r6, #2
 8025e5e:	2b00      	cmp	r3, #0
 8025e60:	d05b      	beq.n	8025f1a <_strtol_l.constprop.0+0xf6>
 8025e62:	2b10      	cmp	r3, #16
 8025e64:	d109      	bne.n	8025e7a <_strtol_l.constprop.0+0x56>
 8025e66:	2c30      	cmp	r4, #48	; 0x30
 8025e68:	d107      	bne.n	8025e7a <_strtol_l.constprop.0+0x56>
 8025e6a:	782c      	ldrb	r4, [r5, #0]
 8025e6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8025e70:	2c58      	cmp	r4, #88	; 0x58
 8025e72:	d14d      	bne.n	8025f10 <_strtol_l.constprop.0+0xec>
 8025e74:	786c      	ldrb	r4, [r5, #1]
 8025e76:	2310      	movs	r3, #16
 8025e78:	3502      	adds	r5, #2
 8025e7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8025e7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8025e82:	f04f 0c00 	mov.w	ip, #0
 8025e86:	fbb8 f9f3 	udiv	r9, r8, r3
 8025e8a:	4666      	mov	r6, ip
 8025e8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8025e90:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8025e94:	f1be 0f09 	cmp.w	lr, #9
 8025e98:	d816      	bhi.n	8025ec8 <_strtol_l.constprop.0+0xa4>
 8025e9a:	4674      	mov	r4, lr
 8025e9c:	42a3      	cmp	r3, r4
 8025e9e:	dd24      	ble.n	8025eea <_strtol_l.constprop.0+0xc6>
 8025ea0:	f1bc 0f00 	cmp.w	ip, #0
 8025ea4:	db1e      	blt.n	8025ee4 <_strtol_l.constprop.0+0xc0>
 8025ea6:	45b1      	cmp	r9, r6
 8025ea8:	d31c      	bcc.n	8025ee4 <_strtol_l.constprop.0+0xc0>
 8025eaa:	d101      	bne.n	8025eb0 <_strtol_l.constprop.0+0x8c>
 8025eac:	45a2      	cmp	sl, r4
 8025eae:	db19      	blt.n	8025ee4 <_strtol_l.constprop.0+0xc0>
 8025eb0:	fb06 4603 	mla	r6, r6, r3, r4
 8025eb4:	f04f 0c01 	mov.w	ip, #1
 8025eb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025ebc:	e7e8      	b.n	8025e90 <_strtol_l.constprop.0+0x6c>
 8025ebe:	2c2b      	cmp	r4, #43	; 0x2b
 8025ec0:	bf04      	itt	eq
 8025ec2:	782c      	ldrbeq	r4, [r5, #0]
 8025ec4:	1cb5      	addeq	r5, r6, #2
 8025ec6:	e7ca      	b.n	8025e5e <_strtol_l.constprop.0+0x3a>
 8025ec8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8025ecc:	f1be 0f19 	cmp.w	lr, #25
 8025ed0:	d801      	bhi.n	8025ed6 <_strtol_l.constprop.0+0xb2>
 8025ed2:	3c37      	subs	r4, #55	; 0x37
 8025ed4:	e7e2      	b.n	8025e9c <_strtol_l.constprop.0+0x78>
 8025ed6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8025eda:	f1be 0f19 	cmp.w	lr, #25
 8025ede:	d804      	bhi.n	8025eea <_strtol_l.constprop.0+0xc6>
 8025ee0:	3c57      	subs	r4, #87	; 0x57
 8025ee2:	e7db      	b.n	8025e9c <_strtol_l.constprop.0+0x78>
 8025ee4:	f04f 3cff 	mov.w	ip, #4294967295
 8025ee8:	e7e6      	b.n	8025eb8 <_strtol_l.constprop.0+0x94>
 8025eea:	f1bc 0f00 	cmp.w	ip, #0
 8025eee:	da05      	bge.n	8025efc <_strtol_l.constprop.0+0xd8>
 8025ef0:	2322      	movs	r3, #34	; 0x22
 8025ef2:	6003      	str	r3, [r0, #0]
 8025ef4:	4646      	mov	r6, r8
 8025ef6:	b942      	cbnz	r2, 8025f0a <_strtol_l.constprop.0+0xe6>
 8025ef8:	4630      	mov	r0, r6
 8025efa:	e79e      	b.n	8025e3a <_strtol_l.constprop.0+0x16>
 8025efc:	b107      	cbz	r7, 8025f00 <_strtol_l.constprop.0+0xdc>
 8025efe:	4276      	negs	r6, r6
 8025f00:	2a00      	cmp	r2, #0
 8025f02:	d0f9      	beq.n	8025ef8 <_strtol_l.constprop.0+0xd4>
 8025f04:	f1bc 0f00 	cmp.w	ip, #0
 8025f08:	d000      	beq.n	8025f0c <_strtol_l.constprop.0+0xe8>
 8025f0a:	1e69      	subs	r1, r5, #1
 8025f0c:	6011      	str	r1, [r2, #0]
 8025f0e:	e7f3      	b.n	8025ef8 <_strtol_l.constprop.0+0xd4>
 8025f10:	2430      	movs	r4, #48	; 0x30
 8025f12:	2b00      	cmp	r3, #0
 8025f14:	d1b1      	bne.n	8025e7a <_strtol_l.constprop.0+0x56>
 8025f16:	2308      	movs	r3, #8
 8025f18:	e7af      	b.n	8025e7a <_strtol_l.constprop.0+0x56>
 8025f1a:	2c30      	cmp	r4, #48	; 0x30
 8025f1c:	d0a5      	beq.n	8025e6a <_strtol_l.constprop.0+0x46>
 8025f1e:	230a      	movs	r3, #10
 8025f20:	e7ab      	b.n	8025e7a <_strtol_l.constprop.0+0x56>
 8025f22:	bf00      	nop
 8025f24:	08045585 	.word	0x08045585

08025f28 <_strtol_r>:
 8025f28:	f7ff bf7c 	b.w	8025e24 <_strtol_l.constprop.0>

08025f2c <strtol>:
 8025f2c:	4613      	mov	r3, r2
 8025f2e:	460a      	mov	r2, r1
 8025f30:	4601      	mov	r1, r0
 8025f32:	4802      	ldr	r0, [pc, #8]	; (8025f3c <strtol+0x10>)
 8025f34:	6800      	ldr	r0, [r0, #0]
 8025f36:	f7ff bf75 	b.w	8025e24 <_strtol_l.constprop.0>
 8025f3a:	bf00      	nop
 8025f3c:	2000046c 	.word	0x2000046c

08025f40 <_strtoul_l.constprop.0>:
 8025f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025f44:	4f36      	ldr	r7, [pc, #216]	; (8026020 <_strtoul_l.constprop.0+0xe0>)
 8025f46:	4686      	mov	lr, r0
 8025f48:	460d      	mov	r5, r1
 8025f4a:	4628      	mov	r0, r5
 8025f4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025f50:	5de6      	ldrb	r6, [r4, r7]
 8025f52:	f016 0608 	ands.w	r6, r6, #8
 8025f56:	d1f8      	bne.n	8025f4a <_strtoul_l.constprop.0+0xa>
 8025f58:	2c2d      	cmp	r4, #45	; 0x2d
 8025f5a:	d12f      	bne.n	8025fbc <_strtoul_l.constprop.0+0x7c>
 8025f5c:	782c      	ldrb	r4, [r5, #0]
 8025f5e:	2601      	movs	r6, #1
 8025f60:	1c85      	adds	r5, r0, #2
 8025f62:	2b00      	cmp	r3, #0
 8025f64:	d057      	beq.n	8026016 <_strtoul_l.constprop.0+0xd6>
 8025f66:	2b10      	cmp	r3, #16
 8025f68:	d109      	bne.n	8025f7e <_strtoul_l.constprop.0+0x3e>
 8025f6a:	2c30      	cmp	r4, #48	; 0x30
 8025f6c:	d107      	bne.n	8025f7e <_strtoul_l.constprop.0+0x3e>
 8025f6e:	7828      	ldrb	r0, [r5, #0]
 8025f70:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8025f74:	2858      	cmp	r0, #88	; 0x58
 8025f76:	d149      	bne.n	802600c <_strtoul_l.constprop.0+0xcc>
 8025f78:	786c      	ldrb	r4, [r5, #1]
 8025f7a:	2310      	movs	r3, #16
 8025f7c:	3502      	adds	r5, #2
 8025f7e:	f04f 38ff 	mov.w	r8, #4294967295
 8025f82:	2700      	movs	r7, #0
 8025f84:	fbb8 f8f3 	udiv	r8, r8, r3
 8025f88:	fb03 f908 	mul.w	r9, r3, r8
 8025f8c:	ea6f 0909 	mvn.w	r9, r9
 8025f90:	4638      	mov	r0, r7
 8025f92:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8025f96:	f1bc 0f09 	cmp.w	ip, #9
 8025f9a:	d814      	bhi.n	8025fc6 <_strtoul_l.constprop.0+0x86>
 8025f9c:	4664      	mov	r4, ip
 8025f9e:	42a3      	cmp	r3, r4
 8025fa0:	dd22      	ble.n	8025fe8 <_strtoul_l.constprop.0+0xa8>
 8025fa2:	2f00      	cmp	r7, #0
 8025fa4:	db1d      	blt.n	8025fe2 <_strtoul_l.constprop.0+0xa2>
 8025fa6:	4580      	cmp	r8, r0
 8025fa8:	d31b      	bcc.n	8025fe2 <_strtoul_l.constprop.0+0xa2>
 8025faa:	d101      	bne.n	8025fb0 <_strtoul_l.constprop.0+0x70>
 8025fac:	45a1      	cmp	r9, r4
 8025fae:	db18      	blt.n	8025fe2 <_strtoul_l.constprop.0+0xa2>
 8025fb0:	fb00 4003 	mla	r0, r0, r3, r4
 8025fb4:	2701      	movs	r7, #1
 8025fb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8025fba:	e7ea      	b.n	8025f92 <_strtoul_l.constprop.0+0x52>
 8025fbc:	2c2b      	cmp	r4, #43	; 0x2b
 8025fbe:	bf04      	itt	eq
 8025fc0:	782c      	ldrbeq	r4, [r5, #0]
 8025fc2:	1c85      	addeq	r5, r0, #2
 8025fc4:	e7cd      	b.n	8025f62 <_strtoul_l.constprop.0+0x22>
 8025fc6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8025fca:	f1bc 0f19 	cmp.w	ip, #25
 8025fce:	d801      	bhi.n	8025fd4 <_strtoul_l.constprop.0+0x94>
 8025fd0:	3c37      	subs	r4, #55	; 0x37
 8025fd2:	e7e4      	b.n	8025f9e <_strtoul_l.constprop.0+0x5e>
 8025fd4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8025fd8:	f1bc 0f19 	cmp.w	ip, #25
 8025fdc:	d804      	bhi.n	8025fe8 <_strtoul_l.constprop.0+0xa8>
 8025fde:	3c57      	subs	r4, #87	; 0x57
 8025fe0:	e7dd      	b.n	8025f9e <_strtoul_l.constprop.0+0x5e>
 8025fe2:	f04f 37ff 	mov.w	r7, #4294967295
 8025fe6:	e7e6      	b.n	8025fb6 <_strtoul_l.constprop.0+0x76>
 8025fe8:	2f00      	cmp	r7, #0
 8025fea:	da07      	bge.n	8025ffc <_strtoul_l.constprop.0+0xbc>
 8025fec:	2322      	movs	r3, #34	; 0x22
 8025fee:	f8ce 3000 	str.w	r3, [lr]
 8025ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8025ff6:	b932      	cbnz	r2, 8026006 <_strtoul_l.constprop.0+0xc6>
 8025ff8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025ffc:	b106      	cbz	r6, 8026000 <_strtoul_l.constprop.0+0xc0>
 8025ffe:	4240      	negs	r0, r0
 8026000:	2a00      	cmp	r2, #0
 8026002:	d0f9      	beq.n	8025ff8 <_strtoul_l.constprop.0+0xb8>
 8026004:	b107      	cbz	r7, 8026008 <_strtoul_l.constprop.0+0xc8>
 8026006:	1e69      	subs	r1, r5, #1
 8026008:	6011      	str	r1, [r2, #0]
 802600a:	e7f5      	b.n	8025ff8 <_strtoul_l.constprop.0+0xb8>
 802600c:	2430      	movs	r4, #48	; 0x30
 802600e:	2b00      	cmp	r3, #0
 8026010:	d1b5      	bne.n	8025f7e <_strtoul_l.constprop.0+0x3e>
 8026012:	2308      	movs	r3, #8
 8026014:	e7b3      	b.n	8025f7e <_strtoul_l.constprop.0+0x3e>
 8026016:	2c30      	cmp	r4, #48	; 0x30
 8026018:	d0a9      	beq.n	8025f6e <_strtoul_l.constprop.0+0x2e>
 802601a:	230a      	movs	r3, #10
 802601c:	e7af      	b.n	8025f7e <_strtoul_l.constprop.0+0x3e>
 802601e:	bf00      	nop
 8026020:	08045585 	.word	0x08045585

08026024 <_strtoul_r>:
 8026024:	f7ff bf8c 	b.w	8025f40 <_strtoul_l.constprop.0>

08026028 <strtoul>:
 8026028:	4613      	mov	r3, r2
 802602a:	460a      	mov	r2, r1
 802602c:	4601      	mov	r1, r0
 802602e:	4802      	ldr	r0, [pc, #8]	; (8026038 <strtoul+0x10>)
 8026030:	6800      	ldr	r0, [r0, #0]
 8026032:	f7ff bf85 	b.w	8025f40 <_strtoul_l.constprop.0>
 8026036:	bf00      	nop
 8026038:	2000046c 	.word	0x2000046c

0802603c <__tzcalc_limits>:
 802603c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026040:	4605      	mov	r5, r0
 8026042:	f001 fa69 	bl	8027518 <__gettzinfo>
 8026046:	f240 73b1 	movw	r3, #1969	; 0x7b1
 802604a:	429d      	cmp	r5, r3
 802604c:	f340 8099 	ble.w	8026182 <__tzcalc_limits+0x146>
 8026050:	f46f 62f6 	mvn.w	r2, #1968	; 0x7b0
 8026054:	18ac      	adds	r4, r5, r2
 8026056:	f2a5 73b2 	subw	r3, r5, #1970	; 0x7b2
 802605a:	f240 126d 	movw	r2, #365	; 0x16d
 802605e:	10a4      	asrs	r4, r4, #2
 8026060:	fb02 4403 	mla	r4, r2, r3, r4
 8026064:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8026068:	f2a5 736d 	subw	r3, r5, #1901	; 0x76d
 802606c:	fb93 f3f2 	sdiv	r3, r3, r2
 8026070:	441c      	add	r4, r3
 8026072:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8026076:	f46f 61c8 	mvn.w	r1, #1600	; 0x640
 802607a:	fb95 fcf3 	sdiv	ip, r5, r3
 802607e:	fb03 5c1c 	mls	ip, r3, ip, r5
 8026082:	186a      	adds	r2, r5, r1
 8026084:	fabc f68c 	clz	r6, ip
 8026088:	fbb2 f2f3 	udiv	r2, r2, r3
 802608c:	f005 0303 	and.w	r3, r5, #3
 8026090:	4414      	add	r4, r2
 8026092:	2264      	movs	r2, #100	; 0x64
 8026094:	6045      	str	r5, [r0, #4]
 8026096:	fb95 f7f2 	sdiv	r7, r5, r2
 802609a:	0976      	lsrs	r6, r6, #5
 802609c:	fb02 5717 	mls	r7, r2, r7, r5
 80260a0:	4601      	mov	r1, r0
 80260a2:	f100 0b50 	add.w	fp, r0, #80	; 0x50
 80260a6:	9300      	str	r3, [sp, #0]
 80260a8:	f04f 0a07 	mov.w	sl, #7
 80260ac:	7a0d      	ldrb	r5, [r1, #8]
 80260ae:	694b      	ldr	r3, [r1, #20]
 80260b0:	2d4a      	cmp	r5, #74	; 0x4a
 80260b2:	d12d      	bne.n	8026110 <__tzcalc_limits+0xd4>
 80260b4:	9a00      	ldr	r2, [sp, #0]
 80260b6:	eb04 0e03 	add.w	lr, r4, r3
 80260ba:	b902      	cbnz	r2, 80260be <__tzcalc_limits+0x82>
 80260bc:	b917      	cbnz	r7, 80260c4 <__tzcalc_limits+0x88>
 80260be:	f1bc 0f00 	cmp.w	ip, #0
 80260c2:	d123      	bne.n	802610c <__tzcalc_limits+0xd0>
 80260c4:	2b3b      	cmp	r3, #59	; 0x3b
 80260c6:	bfd4      	ite	le
 80260c8:	2300      	movle	r3, #0
 80260ca:	2301      	movgt	r3, #1
 80260cc:	4473      	add	r3, lr
 80260ce:	3b01      	subs	r3, #1
 80260d0:	698d      	ldr	r5, [r1, #24]
 80260d2:	4a2d      	ldr	r2, [pc, #180]	; (8026188 <__tzcalc_limits+0x14c>)
 80260d4:	ea4f 7ee5 	mov.w	lr, r5, asr #31
 80260d8:	fbc3 5e02 	smlal	r5, lr, r3, r2
 80260dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 80260de:	18ed      	adds	r5, r5, r3
 80260e0:	eb4e 73e3 	adc.w	r3, lr, r3, asr #31
 80260e4:	e9c1 5308 	strd	r5, r3, [r1, #32]
 80260e8:	3128      	adds	r1, #40	; 0x28
 80260ea:	458b      	cmp	fp, r1
 80260ec:	d1de      	bne.n	80260ac <__tzcalc_limits+0x70>
 80260ee:	e9d0 1312 	ldrd	r1, r3, [r0, #72]	; 0x48
 80260f2:	e9d0 4208 	ldrd	r4, r2, [r0, #32]
 80260f6:	428c      	cmp	r4, r1
 80260f8:	eb72 0303 	sbcs.w	r3, r2, r3
 80260fc:	bfb4      	ite	lt
 80260fe:	2301      	movlt	r3, #1
 8026100:	2300      	movge	r3, #0
 8026102:	6003      	str	r3, [r0, #0]
 8026104:	2001      	movs	r0, #1
 8026106:	b003      	add	sp, #12
 8026108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802610c:	2300      	movs	r3, #0
 802610e:	e7dd      	b.n	80260cc <__tzcalc_limits+0x90>
 8026110:	2d44      	cmp	r5, #68	; 0x44
 8026112:	d101      	bne.n	8026118 <__tzcalc_limits+0xdc>
 8026114:	4423      	add	r3, r4
 8026116:	e7db      	b.n	80260d0 <__tzcalc_limits+0x94>
 8026118:	9a00      	ldr	r2, [sp, #0]
 802611a:	bb62      	cbnz	r2, 8026176 <__tzcalc_limits+0x13a>
 802611c:	2f00      	cmp	r7, #0
 802611e:	bf0c      	ite	eq
 8026120:	4635      	moveq	r5, r6
 8026122:	2501      	movne	r5, #1
 8026124:	68ca      	ldr	r2, [r1, #12]
 8026126:	9201      	str	r2, [sp, #4]
 8026128:	4a18      	ldr	r2, [pc, #96]	; (802618c <__tzcalc_limits+0x150>)
 802612a:	f04f 0930 	mov.w	r9, #48	; 0x30
 802612e:	fb09 2505 	mla	r5, r9, r5, r2
 8026132:	46a6      	mov	lr, r4
 8026134:	f04f 0800 	mov.w	r8, #0
 8026138:	3d04      	subs	r5, #4
 802613a:	9a01      	ldr	r2, [sp, #4]
 802613c:	f108 0801 	add.w	r8, r8, #1
 8026140:	4542      	cmp	r2, r8
 8026142:	f855 9028 	ldr.w	r9, [r5, r8, lsl #2]
 8026146:	dc18      	bgt.n	802617a <__tzcalc_limits+0x13e>
 8026148:	f10e 0504 	add.w	r5, lr, #4
 802614c:	fb95 f8fa 	sdiv	r8, r5, sl
 8026150:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
 8026154:	eba5 0808 	sub.w	r8, r5, r8
 8026158:	ebb3 0808 	subs.w	r8, r3, r8
 802615c:	690b      	ldr	r3, [r1, #16]
 802615e:	f103 33ff 	add.w	r3, r3, #4294967295
 8026162:	bf48      	it	mi
 8026164:	f108 0807 	addmi.w	r8, r8, #7
 8026168:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 802616c:	4443      	add	r3, r8
 802616e:	454b      	cmp	r3, r9
 8026170:	da05      	bge.n	802617e <__tzcalc_limits+0x142>
 8026172:	4473      	add	r3, lr
 8026174:	e7ac      	b.n	80260d0 <__tzcalc_limits+0x94>
 8026176:	4635      	mov	r5, r6
 8026178:	e7d4      	b.n	8026124 <__tzcalc_limits+0xe8>
 802617a:	44ce      	add	lr, r9
 802617c:	e7dd      	b.n	802613a <__tzcalc_limits+0xfe>
 802617e:	3b07      	subs	r3, #7
 8026180:	e7f5      	b.n	802616e <__tzcalc_limits+0x132>
 8026182:	2000      	movs	r0, #0
 8026184:	e7bf      	b.n	8026106 <__tzcalc_limits+0xca>
 8026186:	bf00      	nop
 8026188:	00015180 	.word	0x00015180
 802618c:	080457c0 	.word	0x080457c0

08026190 <__tz_lock>:
 8026190:	4801      	ldr	r0, [pc, #4]	; (8026198 <__tz_lock+0x8>)
 8026192:	f7fd be74 	b.w	8023e7e <__retarget_lock_acquire>
 8026196:	bf00      	nop
 8026198:	20030020 	.word	0x20030020

0802619c <__tz_unlock>:
 802619c:	4801      	ldr	r0, [pc, #4]	; (80261a4 <__tz_unlock+0x8>)
 802619e:	f7fd be70 	b.w	8023e82 <__retarget_lock_release>
 80261a2:	bf00      	nop
 80261a4:	20030020 	.word	0x20030020

080261a8 <_tzset_unlocked>:
 80261a8:	4b01      	ldr	r3, [pc, #4]	; (80261b0 <_tzset_unlocked+0x8>)
 80261aa:	6818      	ldr	r0, [r3, #0]
 80261ac:	f000 b802 	b.w	80261b4 <_tzset_unlocked_r>
 80261b0:	2000046c 	.word	0x2000046c

080261b4 <_tzset_unlocked_r>:
 80261b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80261b8:	b08d      	sub	sp, #52	; 0x34
 80261ba:	4607      	mov	r7, r0
 80261bc:	f001 f9ac 	bl	8027518 <__gettzinfo>
 80261c0:	49b0      	ldr	r1, [pc, #704]	; (8026484 <_tzset_unlocked_r+0x2d0>)
 80261c2:	4eb1      	ldr	r6, [pc, #708]	; (8026488 <_tzset_unlocked_r+0x2d4>)
 80261c4:	4605      	mov	r5, r0
 80261c6:	4638      	mov	r0, r7
 80261c8:	f001 f99e 	bl	8027508 <_getenv_r>
 80261cc:	4604      	mov	r4, r0
 80261ce:	b970      	cbnz	r0, 80261ee <_tzset_unlocked_r+0x3a>
 80261d0:	4bae      	ldr	r3, [pc, #696]	; (802648c <_tzset_unlocked_r+0x2d8>)
 80261d2:	4aaf      	ldr	r2, [pc, #700]	; (8026490 <_tzset_unlocked_r+0x2dc>)
 80261d4:	6018      	str	r0, [r3, #0]
 80261d6:	4baf      	ldr	r3, [pc, #700]	; (8026494 <_tzset_unlocked_r+0x2e0>)
 80261d8:	6018      	str	r0, [r3, #0]
 80261da:	4baf      	ldr	r3, [pc, #700]	; (8026498 <_tzset_unlocked_r+0x2e4>)
 80261dc:	6830      	ldr	r0, [r6, #0]
 80261de:	e9c3 2200 	strd	r2, r2, [r3]
 80261e2:	f7fd fe59 	bl	8023e98 <free>
 80261e6:	6034      	str	r4, [r6, #0]
 80261e8:	b00d      	add	sp, #52	; 0x34
 80261ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80261ee:	6831      	ldr	r1, [r6, #0]
 80261f0:	2900      	cmp	r1, #0
 80261f2:	d162      	bne.n	80262ba <_tzset_unlocked_r+0x106>
 80261f4:	6830      	ldr	r0, [r6, #0]
 80261f6:	f7fd fe4f 	bl	8023e98 <free>
 80261fa:	4620      	mov	r0, r4
 80261fc:	f7da f82a 	bl	8000254 <strlen>
 8026200:	1c41      	adds	r1, r0, #1
 8026202:	4638      	mov	r0, r7
 8026204:	f7fe f96e 	bl	80244e4 <_malloc_r>
 8026208:	6030      	str	r0, [r6, #0]
 802620a:	2800      	cmp	r0, #0
 802620c:	d15a      	bne.n	80262c4 <_tzset_unlocked_r+0x110>
 802620e:	7823      	ldrb	r3, [r4, #0]
 8026210:	4aa2      	ldr	r2, [pc, #648]	; (802649c <_tzset_unlocked_r+0x2e8>)
 8026212:	49a3      	ldr	r1, [pc, #652]	; (80264a0 <_tzset_unlocked_r+0x2ec>)
 8026214:	2b3a      	cmp	r3, #58	; 0x3a
 8026216:	bf08      	it	eq
 8026218:	3401      	addeq	r4, #1
 802621a:	ae0a      	add	r6, sp, #40	; 0x28
 802621c:	4633      	mov	r3, r6
 802621e:	4620      	mov	r0, r4
 8026220:	f7ff f822 	bl	8025268 <siscanf>
 8026224:	2800      	cmp	r0, #0
 8026226:	dddf      	ble.n	80261e8 <_tzset_unlocked_r+0x34>
 8026228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802622a:	18e7      	adds	r7, r4, r3
 802622c:	5ce3      	ldrb	r3, [r4, r3]
 802622e:	2b2d      	cmp	r3, #45	; 0x2d
 8026230:	d14c      	bne.n	80262cc <_tzset_unlocked_r+0x118>
 8026232:	3701      	adds	r7, #1
 8026234:	f04f 38ff 	mov.w	r8, #4294967295
 8026238:	f10d 0a20 	add.w	sl, sp, #32
 802623c:	f10d 0b1e 	add.w	fp, sp, #30
 8026240:	2400      	movs	r4, #0
 8026242:	e9cd 6a01 	strd	r6, sl, [sp, #4]
 8026246:	4997      	ldr	r1, [pc, #604]	; (80264a4 <_tzset_unlocked_r+0x2f0>)
 8026248:	9603      	str	r6, [sp, #12]
 802624a:	f8cd b000 	str.w	fp, [sp]
 802624e:	4633      	mov	r3, r6
 8026250:	aa07      	add	r2, sp, #28
 8026252:	4638      	mov	r0, r7
 8026254:	f8ad 401e 	strh.w	r4, [sp, #30]
 8026258:	f8ad 4020 	strh.w	r4, [sp, #32]
 802625c:	f7ff f804 	bl	8025268 <siscanf>
 8026260:	42a0      	cmp	r0, r4
 8026262:	ddc1      	ble.n	80261e8 <_tzset_unlocked_r+0x34>
 8026264:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8026268:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802626c:	f8df 9240 	ldr.w	r9, [pc, #576]	; 80264b0 <_tzset_unlocked_r+0x2fc>
 8026270:	213c      	movs	r1, #60	; 0x3c
 8026272:	fb01 3302 	mla	r3, r1, r2, r3
 8026276:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802627a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802627e:	fb01 3302 	mla	r3, r1, r2, r3
 8026282:	fb08 f303 	mul.w	r3, r8, r3
 8026286:	f8df 8210 	ldr.w	r8, [pc, #528]	; 8026498 <_tzset_unlocked_r+0x2e4>
 802628a:	62ab      	str	r3, [r5, #40]	; 0x28
 802628c:	4b83      	ldr	r3, [pc, #524]	; (802649c <_tzset_unlocked_r+0x2e8>)
 802628e:	f8c8 3000 	str.w	r3, [r8]
 8026292:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026294:	4982      	ldr	r1, [pc, #520]	; (80264a0 <_tzset_unlocked_r+0x2ec>)
 8026296:	441f      	add	r7, r3
 8026298:	464a      	mov	r2, r9
 802629a:	4633      	mov	r3, r6
 802629c:	4638      	mov	r0, r7
 802629e:	f7fe ffe3 	bl	8025268 <siscanf>
 80262a2:	42a0      	cmp	r0, r4
 80262a4:	dc18      	bgt.n	80262d8 <_tzset_unlocked_r+0x124>
 80262a6:	f8d8 3000 	ldr.w	r3, [r8]
 80262aa:	f8c8 3004 	str.w	r3, [r8, #4]
 80262ae:	4b77      	ldr	r3, [pc, #476]	; (802648c <_tzset_unlocked_r+0x2d8>)
 80262b0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80262b2:	601a      	str	r2, [r3, #0]
 80262b4:	4b77      	ldr	r3, [pc, #476]	; (8026494 <_tzset_unlocked_r+0x2e0>)
 80262b6:	601c      	str	r4, [r3, #0]
 80262b8:	e796      	b.n	80261e8 <_tzset_unlocked_r+0x34>
 80262ba:	f7d9 ffc1 	bl	8000240 <strcmp>
 80262be:	2800      	cmp	r0, #0
 80262c0:	d198      	bne.n	80261f4 <_tzset_unlocked_r+0x40>
 80262c2:	e791      	b.n	80261e8 <_tzset_unlocked_r+0x34>
 80262c4:	4621      	mov	r1, r4
 80262c6:	f7ff f856 	bl	8025376 <strcpy>
 80262ca:	e7a0      	b.n	802620e <_tzset_unlocked_r+0x5a>
 80262cc:	2b2b      	cmp	r3, #43	; 0x2b
 80262ce:	bf08      	it	eq
 80262d0:	3701      	addeq	r7, #1
 80262d2:	f04f 0801 	mov.w	r8, #1
 80262d6:	e7af      	b.n	8026238 <_tzset_unlocked_r+0x84>
 80262d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80262da:	f8c8 9004 	str.w	r9, [r8, #4]
 80262de:	18fc      	adds	r4, r7, r3
 80262e0:	5cfb      	ldrb	r3, [r7, r3]
 80262e2:	2b2d      	cmp	r3, #45	; 0x2d
 80262e4:	f040 808b 	bne.w	80263fe <_tzset_unlocked_r+0x24a>
 80262e8:	3401      	adds	r4, #1
 80262ea:	f04f 37ff 	mov.w	r7, #4294967295
 80262ee:	2300      	movs	r3, #0
 80262f0:	f8ad 301c 	strh.w	r3, [sp, #28]
 80262f4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80262f8:	f8ad 3020 	strh.w	r3, [sp, #32]
 80262fc:	930a      	str	r3, [sp, #40]	; 0x28
 80262fe:	e9cd a602 	strd	sl, r6, [sp, #8]
 8026302:	e9cd b600 	strd	fp, r6, [sp]
 8026306:	4967      	ldr	r1, [pc, #412]	; (80264a4 <_tzset_unlocked_r+0x2f0>)
 8026308:	4633      	mov	r3, r6
 802630a:	aa07      	add	r2, sp, #28
 802630c:	4620      	mov	r0, r4
 802630e:	f7fe ffab 	bl	8025268 <siscanf>
 8026312:	2800      	cmp	r0, #0
 8026314:	dc78      	bgt.n	8026408 <_tzset_unlocked_r+0x254>
 8026316:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8026318:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 802631c:	652b      	str	r3, [r5, #80]	; 0x50
 802631e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026320:	462f      	mov	r7, r5
 8026322:	441c      	add	r4, r3
 8026324:	f04f 0900 	mov.w	r9, #0
 8026328:	7823      	ldrb	r3, [r4, #0]
 802632a:	2b2c      	cmp	r3, #44	; 0x2c
 802632c:	bf08      	it	eq
 802632e:	3401      	addeq	r4, #1
 8026330:	f894 8000 	ldrb.w	r8, [r4]
 8026334:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8026338:	d178      	bne.n	802642c <_tzset_unlocked_r+0x278>
 802633a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 802633e:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8026342:	ab09      	add	r3, sp, #36	; 0x24
 8026344:	9300      	str	r3, [sp, #0]
 8026346:	4958      	ldr	r1, [pc, #352]	; (80264a8 <_tzset_unlocked_r+0x2f4>)
 8026348:	9603      	str	r6, [sp, #12]
 802634a:	4633      	mov	r3, r6
 802634c:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8026350:	4620      	mov	r0, r4
 8026352:	f7fe ff89 	bl	8025268 <siscanf>
 8026356:	2803      	cmp	r0, #3
 8026358:	f47f af46 	bne.w	80261e8 <_tzset_unlocked_r+0x34>
 802635c:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8026360:	1e4b      	subs	r3, r1, #1
 8026362:	2b0b      	cmp	r3, #11
 8026364:	f63f af40 	bhi.w	80261e8 <_tzset_unlocked_r+0x34>
 8026368:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 802636c:	1e53      	subs	r3, r2, #1
 802636e:	2b04      	cmp	r3, #4
 8026370:	f63f af3a 	bhi.w	80261e8 <_tzset_unlocked_r+0x34>
 8026374:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8026378:	2b06      	cmp	r3, #6
 802637a:	f63f af35 	bhi.w	80261e8 <_tzset_unlocked_r+0x34>
 802637e:	e9c7 1203 	strd	r1, r2, [r7, #12]
 8026382:	f887 8008 	strb.w	r8, [r7, #8]
 8026386:	617b      	str	r3, [r7, #20]
 8026388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802638a:	eb04 0803 	add.w	r8, r4, r3
 802638e:	2302      	movs	r3, #2
 8026390:	f8ad 301c 	strh.w	r3, [sp, #28]
 8026394:	2300      	movs	r3, #0
 8026396:	f8ad 301e 	strh.w	r3, [sp, #30]
 802639a:	f8ad 3020 	strh.w	r3, [sp, #32]
 802639e:	930a      	str	r3, [sp, #40]	; 0x28
 80263a0:	f898 3000 	ldrb.w	r3, [r8]
 80263a4:	2b2f      	cmp	r3, #47	; 0x2f
 80263a6:	d109      	bne.n	80263bc <_tzset_unlocked_r+0x208>
 80263a8:	e9cd a602 	strd	sl, r6, [sp, #8]
 80263ac:	e9cd b600 	strd	fp, r6, [sp]
 80263b0:	493e      	ldr	r1, [pc, #248]	; (80264ac <_tzset_unlocked_r+0x2f8>)
 80263b2:	4633      	mov	r3, r6
 80263b4:	aa07      	add	r2, sp, #28
 80263b6:	4640      	mov	r0, r8
 80263b8:	f7fe ff56 	bl	8025268 <siscanf>
 80263bc:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80263c0:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80263c4:	213c      	movs	r1, #60	; 0x3c
 80263c6:	fb01 3302 	mla	r3, r1, r2, r3
 80263ca:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 80263ce:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 80263d2:	fb01 3302 	mla	r3, r1, r2, r3
 80263d6:	61bb      	str	r3, [r7, #24]
 80263d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80263da:	3728      	adds	r7, #40	; 0x28
 80263dc:	4444      	add	r4, r8
 80263de:	f1b9 0f00 	cmp.w	r9, #0
 80263e2:	d020      	beq.n	8026426 <_tzset_unlocked_r+0x272>
 80263e4:	6868      	ldr	r0, [r5, #4]
 80263e6:	f7ff fe29 	bl	802603c <__tzcalc_limits>
 80263ea:	4b28      	ldr	r3, [pc, #160]	; (802648c <_tzset_unlocked_r+0x2d8>)
 80263ec:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 80263ee:	601a      	str	r2, [r3, #0]
 80263f0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80263f2:	1a9b      	subs	r3, r3, r2
 80263f4:	4a27      	ldr	r2, [pc, #156]	; (8026494 <_tzset_unlocked_r+0x2e0>)
 80263f6:	bf18      	it	ne
 80263f8:	2301      	movne	r3, #1
 80263fa:	6013      	str	r3, [r2, #0]
 80263fc:	e6f4      	b.n	80261e8 <_tzset_unlocked_r+0x34>
 80263fe:	2b2b      	cmp	r3, #43	; 0x2b
 8026400:	bf08      	it	eq
 8026402:	3401      	addeq	r4, #1
 8026404:	2701      	movs	r7, #1
 8026406:	e772      	b.n	80262ee <_tzset_unlocked_r+0x13a>
 8026408:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 802640c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8026410:	213c      	movs	r1, #60	; 0x3c
 8026412:	fb01 3302 	mla	r3, r1, r2, r3
 8026416:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 802641a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 802641e:	fb01 3302 	mla	r3, r1, r2, r3
 8026422:	437b      	muls	r3, r7
 8026424:	e77a      	b.n	802631c <_tzset_unlocked_r+0x168>
 8026426:	f04f 0901 	mov.w	r9, #1
 802642a:	e77d      	b.n	8026328 <_tzset_unlocked_r+0x174>
 802642c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8026430:	bf06      	itte	eq
 8026432:	3401      	addeq	r4, #1
 8026434:	4643      	moveq	r3, r8
 8026436:	2344      	movne	r3, #68	; 0x44
 8026438:	220a      	movs	r2, #10
 802643a:	a90b      	add	r1, sp, #44	; 0x2c
 802643c:	4620      	mov	r0, r4
 802643e:	9305      	str	r3, [sp, #20]
 8026440:	f7ff fdf2 	bl	8026028 <strtoul>
 8026444:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8026448:	9b05      	ldr	r3, [sp, #20]
 802644a:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 802644e:	45a0      	cmp	r8, r4
 8026450:	d114      	bne.n	802647c <_tzset_unlocked_r+0x2c8>
 8026452:	234d      	movs	r3, #77	; 0x4d
 8026454:	f1b9 0f00 	cmp.w	r9, #0
 8026458:	d107      	bne.n	802646a <_tzset_unlocked_r+0x2b6>
 802645a:	722b      	strb	r3, [r5, #8]
 802645c:	2103      	movs	r1, #3
 802645e:	2302      	movs	r3, #2
 8026460:	e9c5 1303 	strd	r1, r3, [r5, #12]
 8026464:	f8c5 9014 	str.w	r9, [r5, #20]
 8026468:	e791      	b.n	802638e <_tzset_unlocked_r+0x1da>
 802646a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
 802646e:	220b      	movs	r2, #11
 8026470:	2301      	movs	r3, #1
 8026472:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
 8026476:	2300      	movs	r3, #0
 8026478:	63eb      	str	r3, [r5, #60]	; 0x3c
 802647a:	e788      	b.n	802638e <_tzset_unlocked_r+0x1da>
 802647c:	b280      	uxth	r0, r0
 802647e:	723b      	strb	r3, [r7, #8]
 8026480:	6178      	str	r0, [r7, #20]
 8026482:	e784      	b.n	802638e <_tzset_unlocked_r+0x1da>
 8026484:	08045b30 	.word	0x08045b30
 8026488:	20030048 	.word	0x20030048
 802648c:	20030050 	.word	0x20030050
 8026490:	08045b33 	.word	0x08045b33
 8026494:	2003004c 	.word	0x2003004c
 8026498:	200004d0 	.word	0x200004d0
 802649c:	2003003b 	.word	0x2003003b
 80264a0:	08045b37 	.word	0x08045b37
 80264a4:	08045b5a 	.word	0x08045b5a
 80264a8:	08045b46 	.word	0x08045b46
 80264ac:	08045b59 	.word	0x08045b59
 80264b0:	20030030 	.word	0x20030030

080264b4 <__swbuf_r>:
 80264b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264b6:	460e      	mov	r6, r1
 80264b8:	4614      	mov	r4, r2
 80264ba:	4605      	mov	r5, r0
 80264bc:	b118      	cbz	r0, 80264c6 <__swbuf_r+0x12>
 80264be:	6983      	ldr	r3, [r0, #24]
 80264c0:	b90b      	cbnz	r3, 80264c6 <__swbuf_r+0x12>
 80264c2:	f7fd fb07 	bl	8023ad4 <__sinit>
 80264c6:	4b21      	ldr	r3, [pc, #132]	; (802654c <__swbuf_r+0x98>)
 80264c8:	429c      	cmp	r4, r3
 80264ca:	d12b      	bne.n	8026524 <__swbuf_r+0x70>
 80264cc:	686c      	ldr	r4, [r5, #4]
 80264ce:	69a3      	ldr	r3, [r4, #24]
 80264d0:	60a3      	str	r3, [r4, #8]
 80264d2:	89a3      	ldrh	r3, [r4, #12]
 80264d4:	071a      	lsls	r2, r3, #28
 80264d6:	d52f      	bpl.n	8026538 <__swbuf_r+0x84>
 80264d8:	6923      	ldr	r3, [r4, #16]
 80264da:	b36b      	cbz	r3, 8026538 <__swbuf_r+0x84>
 80264dc:	6923      	ldr	r3, [r4, #16]
 80264de:	6820      	ldr	r0, [r4, #0]
 80264e0:	1ac0      	subs	r0, r0, r3
 80264e2:	6963      	ldr	r3, [r4, #20]
 80264e4:	b2f6      	uxtb	r6, r6
 80264e6:	4283      	cmp	r3, r0
 80264e8:	4637      	mov	r7, r6
 80264ea:	dc04      	bgt.n	80264f6 <__swbuf_r+0x42>
 80264ec:	4621      	mov	r1, r4
 80264ee:	4628      	mov	r0, r5
 80264f0:	f000 ff80 	bl	80273f4 <_fflush_r>
 80264f4:	bb30      	cbnz	r0, 8026544 <__swbuf_r+0x90>
 80264f6:	68a3      	ldr	r3, [r4, #8]
 80264f8:	3b01      	subs	r3, #1
 80264fa:	60a3      	str	r3, [r4, #8]
 80264fc:	6823      	ldr	r3, [r4, #0]
 80264fe:	1c5a      	adds	r2, r3, #1
 8026500:	6022      	str	r2, [r4, #0]
 8026502:	701e      	strb	r6, [r3, #0]
 8026504:	6963      	ldr	r3, [r4, #20]
 8026506:	3001      	adds	r0, #1
 8026508:	4283      	cmp	r3, r0
 802650a:	d004      	beq.n	8026516 <__swbuf_r+0x62>
 802650c:	89a3      	ldrh	r3, [r4, #12]
 802650e:	07db      	lsls	r3, r3, #31
 8026510:	d506      	bpl.n	8026520 <__swbuf_r+0x6c>
 8026512:	2e0a      	cmp	r6, #10
 8026514:	d104      	bne.n	8026520 <__swbuf_r+0x6c>
 8026516:	4621      	mov	r1, r4
 8026518:	4628      	mov	r0, r5
 802651a:	f000 ff6b 	bl	80273f4 <_fflush_r>
 802651e:	b988      	cbnz	r0, 8026544 <__swbuf_r+0x90>
 8026520:	4638      	mov	r0, r7
 8026522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026524:	4b0a      	ldr	r3, [pc, #40]	; (8026550 <__swbuf_r+0x9c>)
 8026526:	429c      	cmp	r4, r3
 8026528:	d101      	bne.n	802652e <__swbuf_r+0x7a>
 802652a:	68ac      	ldr	r4, [r5, #8]
 802652c:	e7cf      	b.n	80264ce <__swbuf_r+0x1a>
 802652e:	4b09      	ldr	r3, [pc, #36]	; (8026554 <__swbuf_r+0xa0>)
 8026530:	429c      	cmp	r4, r3
 8026532:	bf08      	it	eq
 8026534:	68ec      	ldreq	r4, [r5, #12]
 8026536:	e7ca      	b.n	80264ce <__swbuf_r+0x1a>
 8026538:	4621      	mov	r1, r4
 802653a:	4628      	mov	r0, r5
 802653c:	f000 f81e 	bl	802657c <__swsetup_r>
 8026540:	2800      	cmp	r0, #0
 8026542:	d0cb      	beq.n	80264dc <__swbuf_r+0x28>
 8026544:	f04f 37ff 	mov.w	r7, #4294967295
 8026548:	e7ea      	b.n	8026520 <__swbuf_r+0x6c>
 802654a:	bf00      	nop
 802654c:	080456a8 	.word	0x080456a8
 8026550:	080456c8 	.word	0x080456c8
 8026554:	08045688 	.word	0x08045688

08026558 <_write_r>:
 8026558:	b538      	push	{r3, r4, r5, lr}
 802655a:	4d07      	ldr	r5, [pc, #28]	; (8026578 <_write_r+0x20>)
 802655c:	4604      	mov	r4, r0
 802655e:	4608      	mov	r0, r1
 8026560:	4611      	mov	r1, r2
 8026562:	2200      	movs	r2, #0
 8026564:	602a      	str	r2, [r5, #0]
 8026566:	461a      	mov	r2, r3
 8026568:	f7dc fec6 	bl	80032f8 <_write>
 802656c:	1c43      	adds	r3, r0, #1
 802656e:	d102      	bne.n	8026576 <_write_r+0x1e>
 8026570:	682b      	ldr	r3, [r5, #0]
 8026572:	b103      	cbz	r3, 8026576 <_write_r+0x1e>
 8026574:	6023      	str	r3, [r4, #0]
 8026576:	bd38      	pop	{r3, r4, r5, pc}
 8026578:	2003002c 	.word	0x2003002c

0802657c <__swsetup_r>:
 802657c:	4b32      	ldr	r3, [pc, #200]	; (8026648 <__swsetup_r+0xcc>)
 802657e:	b570      	push	{r4, r5, r6, lr}
 8026580:	681d      	ldr	r5, [r3, #0]
 8026582:	4606      	mov	r6, r0
 8026584:	460c      	mov	r4, r1
 8026586:	b125      	cbz	r5, 8026592 <__swsetup_r+0x16>
 8026588:	69ab      	ldr	r3, [r5, #24]
 802658a:	b913      	cbnz	r3, 8026592 <__swsetup_r+0x16>
 802658c:	4628      	mov	r0, r5
 802658e:	f7fd faa1 	bl	8023ad4 <__sinit>
 8026592:	4b2e      	ldr	r3, [pc, #184]	; (802664c <__swsetup_r+0xd0>)
 8026594:	429c      	cmp	r4, r3
 8026596:	d10f      	bne.n	80265b8 <__swsetup_r+0x3c>
 8026598:	686c      	ldr	r4, [r5, #4]
 802659a:	89a3      	ldrh	r3, [r4, #12]
 802659c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80265a0:	0719      	lsls	r1, r3, #28
 80265a2:	d42c      	bmi.n	80265fe <__swsetup_r+0x82>
 80265a4:	06dd      	lsls	r5, r3, #27
 80265a6:	d411      	bmi.n	80265cc <__swsetup_r+0x50>
 80265a8:	2309      	movs	r3, #9
 80265aa:	6033      	str	r3, [r6, #0]
 80265ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80265b0:	81a3      	strh	r3, [r4, #12]
 80265b2:	f04f 30ff 	mov.w	r0, #4294967295
 80265b6:	e03e      	b.n	8026636 <__swsetup_r+0xba>
 80265b8:	4b25      	ldr	r3, [pc, #148]	; (8026650 <__swsetup_r+0xd4>)
 80265ba:	429c      	cmp	r4, r3
 80265bc:	d101      	bne.n	80265c2 <__swsetup_r+0x46>
 80265be:	68ac      	ldr	r4, [r5, #8]
 80265c0:	e7eb      	b.n	802659a <__swsetup_r+0x1e>
 80265c2:	4b24      	ldr	r3, [pc, #144]	; (8026654 <__swsetup_r+0xd8>)
 80265c4:	429c      	cmp	r4, r3
 80265c6:	bf08      	it	eq
 80265c8:	68ec      	ldreq	r4, [r5, #12]
 80265ca:	e7e6      	b.n	802659a <__swsetup_r+0x1e>
 80265cc:	0758      	lsls	r0, r3, #29
 80265ce:	d512      	bpl.n	80265f6 <__swsetup_r+0x7a>
 80265d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80265d2:	b141      	cbz	r1, 80265e6 <__swsetup_r+0x6a>
 80265d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80265d8:	4299      	cmp	r1, r3
 80265da:	d002      	beq.n	80265e2 <__swsetup_r+0x66>
 80265dc:	4630      	mov	r0, r6
 80265de:	f7fd ff15 	bl	802440c <_free_r>
 80265e2:	2300      	movs	r3, #0
 80265e4:	6363      	str	r3, [r4, #52]	; 0x34
 80265e6:	89a3      	ldrh	r3, [r4, #12]
 80265e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80265ec:	81a3      	strh	r3, [r4, #12]
 80265ee:	2300      	movs	r3, #0
 80265f0:	6063      	str	r3, [r4, #4]
 80265f2:	6923      	ldr	r3, [r4, #16]
 80265f4:	6023      	str	r3, [r4, #0]
 80265f6:	89a3      	ldrh	r3, [r4, #12]
 80265f8:	f043 0308 	orr.w	r3, r3, #8
 80265fc:	81a3      	strh	r3, [r4, #12]
 80265fe:	6923      	ldr	r3, [r4, #16]
 8026600:	b94b      	cbnz	r3, 8026616 <__swsetup_r+0x9a>
 8026602:	89a3      	ldrh	r3, [r4, #12]
 8026604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8026608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 802660c:	d003      	beq.n	8026616 <__swsetup_r+0x9a>
 802660e:	4621      	mov	r1, r4
 8026610:	4630      	mov	r0, r6
 8026612:	f001 f871 	bl	80276f8 <__smakebuf_r>
 8026616:	89a0      	ldrh	r0, [r4, #12]
 8026618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802661c:	f010 0301 	ands.w	r3, r0, #1
 8026620:	d00a      	beq.n	8026638 <__swsetup_r+0xbc>
 8026622:	2300      	movs	r3, #0
 8026624:	60a3      	str	r3, [r4, #8]
 8026626:	6963      	ldr	r3, [r4, #20]
 8026628:	425b      	negs	r3, r3
 802662a:	61a3      	str	r3, [r4, #24]
 802662c:	6923      	ldr	r3, [r4, #16]
 802662e:	b943      	cbnz	r3, 8026642 <__swsetup_r+0xc6>
 8026630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8026634:	d1ba      	bne.n	80265ac <__swsetup_r+0x30>
 8026636:	bd70      	pop	{r4, r5, r6, pc}
 8026638:	0781      	lsls	r1, r0, #30
 802663a:	bf58      	it	pl
 802663c:	6963      	ldrpl	r3, [r4, #20]
 802663e:	60a3      	str	r3, [r4, #8]
 8026640:	e7f4      	b.n	802662c <__swsetup_r+0xb0>
 8026642:	2000      	movs	r0, #0
 8026644:	e7f7      	b.n	8026636 <__swsetup_r+0xba>
 8026646:	bf00      	nop
 8026648:	2000046c 	.word	0x2000046c
 802664c:	080456a8 	.word	0x080456a8
 8026650:	080456c8 	.word	0x080456c8
 8026654:	08045688 	.word	0x08045688

08026658 <abs>:
 8026658:	2800      	cmp	r0, #0
 802665a:	bfb8      	it	lt
 802665c:	4240      	neglt	r0, r0
 802665e:	4770      	bx	lr

08026660 <__assert_func>:
 8026660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026662:	4614      	mov	r4, r2
 8026664:	461a      	mov	r2, r3
 8026666:	4b09      	ldr	r3, [pc, #36]	; (802668c <__assert_func+0x2c>)
 8026668:	681b      	ldr	r3, [r3, #0]
 802666a:	4605      	mov	r5, r0
 802666c:	68d8      	ldr	r0, [r3, #12]
 802666e:	b14c      	cbz	r4, 8026684 <__assert_func+0x24>
 8026670:	4b07      	ldr	r3, [pc, #28]	; (8026690 <__assert_func+0x30>)
 8026672:	9100      	str	r1, [sp, #0]
 8026674:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026678:	4906      	ldr	r1, [pc, #24]	; (8026694 <__assert_func+0x34>)
 802667a:	462b      	mov	r3, r5
 802667c:	f000 fef6 	bl	802746c <fiprintf>
 8026680:	f002 faf0 	bl	8028c64 <abort>
 8026684:	4b04      	ldr	r3, [pc, #16]	; (8026698 <__assert_func+0x38>)
 8026686:	461c      	mov	r4, r3
 8026688:	e7f3      	b.n	8026672 <__assert_func+0x12>
 802668a:	bf00      	nop
 802668c:	2000046c 	.word	0x2000046c
 8026690:	08045b6c 	.word	0x08045b6c
 8026694:	08045b79 	.word	0x08045b79
 8026698:	08045ba7 	.word	0x08045ba7

0802669c <_close_r>:
 802669c:	b538      	push	{r3, r4, r5, lr}
 802669e:	4d06      	ldr	r5, [pc, #24]	; (80266b8 <_close_r+0x1c>)
 80266a0:	2300      	movs	r3, #0
 80266a2:	4604      	mov	r4, r0
 80266a4:	4608      	mov	r0, r1
 80266a6:	602b      	str	r3, [r5, #0]
 80266a8:	f7e0 fbd2 	bl	8006e50 <_close>
 80266ac:	1c43      	adds	r3, r0, #1
 80266ae:	d102      	bne.n	80266b6 <_close_r+0x1a>
 80266b0:	682b      	ldr	r3, [r5, #0]
 80266b2:	b103      	cbz	r3, 80266b6 <_close_r+0x1a>
 80266b4:	6023      	str	r3, [r4, #0]
 80266b6:	bd38      	pop	{r3, r4, r5, pc}
 80266b8:	2003002c 	.word	0x2003002c

080266bc <div>:
 80266bc:	2900      	cmp	r1, #0
 80266be:	b510      	push	{r4, lr}
 80266c0:	fb91 f4f2 	sdiv	r4, r1, r2
 80266c4:	fb02 1314 	mls	r3, r2, r4, r1
 80266c8:	db06      	blt.n	80266d8 <div+0x1c>
 80266ca:	2b00      	cmp	r3, #0
 80266cc:	da01      	bge.n	80266d2 <div+0x16>
 80266ce:	3401      	adds	r4, #1
 80266d0:	1a9b      	subs	r3, r3, r2
 80266d2:	e9c0 4300 	strd	r4, r3, [r0]
 80266d6:	bd10      	pop	{r4, pc}
 80266d8:	2b00      	cmp	r3, #0
 80266da:	bfc4      	itt	gt
 80266dc:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80266e0:	189b      	addgt	r3, r3, r2
 80266e2:	e7f6      	b.n	80266d2 <div+0x16>

080266e4 <quorem>:
 80266e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80266e8:	6903      	ldr	r3, [r0, #16]
 80266ea:	690c      	ldr	r4, [r1, #16]
 80266ec:	42a3      	cmp	r3, r4
 80266ee:	4607      	mov	r7, r0
 80266f0:	f2c0 8081 	blt.w	80267f6 <quorem+0x112>
 80266f4:	3c01      	subs	r4, #1
 80266f6:	f101 0814 	add.w	r8, r1, #20
 80266fa:	f100 0514 	add.w	r5, r0, #20
 80266fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8026702:	9301      	str	r3, [sp, #4]
 8026704:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8026708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 802670c:	3301      	adds	r3, #1
 802670e:	429a      	cmp	r2, r3
 8026710:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8026714:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8026718:	fbb2 f6f3 	udiv	r6, r2, r3
 802671c:	d331      	bcc.n	8026782 <quorem+0x9e>
 802671e:	f04f 0e00 	mov.w	lr, #0
 8026722:	4640      	mov	r0, r8
 8026724:	46ac      	mov	ip, r5
 8026726:	46f2      	mov	sl, lr
 8026728:	f850 2b04 	ldr.w	r2, [r0], #4
 802672c:	b293      	uxth	r3, r2
 802672e:	fb06 e303 	mla	r3, r6, r3, lr
 8026732:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8026736:	b29b      	uxth	r3, r3
 8026738:	ebaa 0303 	sub.w	r3, sl, r3
 802673c:	f8dc a000 	ldr.w	sl, [ip]
 8026740:	0c12      	lsrs	r2, r2, #16
 8026742:	fa13 f38a 	uxtah	r3, r3, sl
 8026746:	fb06 e202 	mla	r2, r6, r2, lr
 802674a:	9300      	str	r3, [sp, #0]
 802674c:	9b00      	ldr	r3, [sp, #0]
 802674e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8026752:	b292      	uxth	r2, r2
 8026754:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8026758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 802675c:	f8bd 3000 	ldrh.w	r3, [sp]
 8026760:	4581      	cmp	r9, r0
 8026762:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8026766:	f84c 3b04 	str.w	r3, [ip], #4
 802676a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 802676e:	d2db      	bcs.n	8026728 <quorem+0x44>
 8026770:	f855 300b 	ldr.w	r3, [r5, fp]
 8026774:	b92b      	cbnz	r3, 8026782 <quorem+0x9e>
 8026776:	9b01      	ldr	r3, [sp, #4]
 8026778:	3b04      	subs	r3, #4
 802677a:	429d      	cmp	r5, r3
 802677c:	461a      	mov	r2, r3
 802677e:	d32e      	bcc.n	80267de <quorem+0xfa>
 8026780:	613c      	str	r4, [r7, #16]
 8026782:	4638      	mov	r0, r7
 8026784:	f001 fa86 	bl	8027c94 <__mcmp>
 8026788:	2800      	cmp	r0, #0
 802678a:	db24      	blt.n	80267d6 <quorem+0xf2>
 802678c:	3601      	adds	r6, #1
 802678e:	4628      	mov	r0, r5
 8026790:	f04f 0c00 	mov.w	ip, #0
 8026794:	f858 2b04 	ldr.w	r2, [r8], #4
 8026798:	f8d0 e000 	ldr.w	lr, [r0]
 802679c:	b293      	uxth	r3, r2
 802679e:	ebac 0303 	sub.w	r3, ip, r3
 80267a2:	0c12      	lsrs	r2, r2, #16
 80267a4:	fa13 f38e 	uxtah	r3, r3, lr
 80267a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80267ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80267b0:	b29b      	uxth	r3, r3
 80267b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80267b6:	45c1      	cmp	r9, r8
 80267b8:	f840 3b04 	str.w	r3, [r0], #4
 80267bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80267c0:	d2e8      	bcs.n	8026794 <quorem+0xb0>
 80267c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80267c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80267ca:	b922      	cbnz	r2, 80267d6 <quorem+0xf2>
 80267cc:	3b04      	subs	r3, #4
 80267ce:	429d      	cmp	r5, r3
 80267d0:	461a      	mov	r2, r3
 80267d2:	d30a      	bcc.n	80267ea <quorem+0x106>
 80267d4:	613c      	str	r4, [r7, #16]
 80267d6:	4630      	mov	r0, r6
 80267d8:	b003      	add	sp, #12
 80267da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80267de:	6812      	ldr	r2, [r2, #0]
 80267e0:	3b04      	subs	r3, #4
 80267e2:	2a00      	cmp	r2, #0
 80267e4:	d1cc      	bne.n	8026780 <quorem+0x9c>
 80267e6:	3c01      	subs	r4, #1
 80267e8:	e7c7      	b.n	802677a <quorem+0x96>
 80267ea:	6812      	ldr	r2, [r2, #0]
 80267ec:	3b04      	subs	r3, #4
 80267ee:	2a00      	cmp	r2, #0
 80267f0:	d1f0      	bne.n	80267d4 <quorem+0xf0>
 80267f2:	3c01      	subs	r4, #1
 80267f4:	e7eb      	b.n	80267ce <quorem+0xea>
 80267f6:	2000      	movs	r0, #0
 80267f8:	e7ee      	b.n	80267d8 <quorem+0xf4>
 80267fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
 80267fe:	Address 0x00000000080267fe is out of bounds.


08026800 <_dtoa_r>:
 8026800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026804:	ed2d 8b02 	vpush	{d8}
 8026808:	6a45      	ldr	r5, [r0, #36]	; 0x24
 802680a:	b091      	sub	sp, #68	; 0x44
 802680c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8026810:	ec59 8b10 	vmov	r8, r9, d0
 8026814:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8026816:	9106      	str	r1, [sp, #24]
 8026818:	4606      	mov	r6, r0
 802681a:	9208      	str	r2, [sp, #32]
 802681c:	930c      	str	r3, [sp, #48]	; 0x30
 802681e:	b975      	cbnz	r5, 802683e <_dtoa_r+0x3e>
 8026820:	2010      	movs	r0, #16
 8026822:	f7fd fb31 	bl	8023e88 <malloc>
 8026826:	4602      	mov	r2, r0
 8026828:	6270      	str	r0, [r6, #36]	; 0x24
 802682a:	b920      	cbnz	r0, 8026836 <_dtoa_r+0x36>
 802682c:	4baa      	ldr	r3, [pc, #680]	; (8026ad8 <_dtoa_r+0x2d8>)
 802682e:	21ea      	movs	r1, #234	; 0xea
 8026830:	48aa      	ldr	r0, [pc, #680]	; (8026adc <_dtoa_r+0x2dc>)
 8026832:	f7ff ff15 	bl	8026660 <__assert_func>
 8026836:	e9c0 5501 	strd	r5, r5, [r0, #4]
 802683a:	6005      	str	r5, [r0, #0]
 802683c:	60c5      	str	r5, [r0, #12]
 802683e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026840:	6819      	ldr	r1, [r3, #0]
 8026842:	b151      	cbz	r1, 802685a <_dtoa_r+0x5a>
 8026844:	685a      	ldr	r2, [r3, #4]
 8026846:	604a      	str	r2, [r1, #4]
 8026848:	2301      	movs	r3, #1
 802684a:	4093      	lsls	r3, r2
 802684c:	608b      	str	r3, [r1, #8]
 802684e:	4630      	mov	r0, r6
 8026850:	f000 ffde 	bl	8027810 <_Bfree>
 8026854:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8026856:	2200      	movs	r2, #0
 8026858:	601a      	str	r2, [r3, #0]
 802685a:	f1b9 0300 	subs.w	r3, r9, #0
 802685e:	bfbb      	ittet	lt
 8026860:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8026864:	9303      	strlt	r3, [sp, #12]
 8026866:	2300      	movge	r3, #0
 8026868:	2201      	movlt	r2, #1
 802686a:	bfac      	ite	ge
 802686c:	6023      	strge	r3, [r4, #0]
 802686e:	6022      	strlt	r2, [r4, #0]
 8026870:	4b9b      	ldr	r3, [pc, #620]	; (8026ae0 <_dtoa_r+0x2e0>)
 8026872:	9c03      	ldr	r4, [sp, #12]
 8026874:	43a3      	bics	r3, r4
 8026876:	d11c      	bne.n	80268b2 <_dtoa_r+0xb2>
 8026878:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802687a:	f242 730f 	movw	r3, #9999	; 0x270f
 802687e:	6013      	str	r3, [r2, #0]
 8026880:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8026884:	ea53 0308 	orrs.w	r3, r3, r8
 8026888:	f000 84fd 	beq.w	8027286 <_dtoa_r+0xa86>
 802688c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 802688e:	b963      	cbnz	r3, 80268aa <_dtoa_r+0xaa>
 8026890:	4b94      	ldr	r3, [pc, #592]	; (8026ae4 <_dtoa_r+0x2e4>)
 8026892:	e01f      	b.n	80268d4 <_dtoa_r+0xd4>
 8026894:	4b94      	ldr	r3, [pc, #592]	; (8026ae8 <_dtoa_r+0x2e8>)
 8026896:	9301      	str	r3, [sp, #4]
 8026898:	3308      	adds	r3, #8
 802689a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 802689c:	6013      	str	r3, [r2, #0]
 802689e:	9801      	ldr	r0, [sp, #4]
 80268a0:	b011      	add	sp, #68	; 0x44
 80268a2:	ecbd 8b02 	vpop	{d8}
 80268a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80268aa:	4b8e      	ldr	r3, [pc, #568]	; (8026ae4 <_dtoa_r+0x2e4>)
 80268ac:	9301      	str	r3, [sp, #4]
 80268ae:	3303      	adds	r3, #3
 80268b0:	e7f3      	b.n	802689a <_dtoa_r+0x9a>
 80268b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80268b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80268ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80268be:	d10b      	bne.n	80268d8 <_dtoa_r+0xd8>
 80268c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80268c2:	2301      	movs	r3, #1
 80268c4:	6013      	str	r3, [r2, #0]
 80268c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80268c8:	2b00      	cmp	r3, #0
 80268ca:	f000 84d9 	beq.w	8027280 <_dtoa_r+0xa80>
 80268ce:	4887      	ldr	r0, [pc, #540]	; (8026aec <_dtoa_r+0x2ec>)
 80268d0:	6018      	str	r0, [r3, #0]
 80268d2:	1e43      	subs	r3, r0, #1
 80268d4:	9301      	str	r3, [sp, #4]
 80268d6:	e7e2      	b.n	802689e <_dtoa_r+0x9e>
 80268d8:	a90f      	add	r1, sp, #60	; 0x3c
 80268da:	aa0e      	add	r2, sp, #56	; 0x38
 80268dc:	4630      	mov	r0, r6
 80268de:	eeb0 0b48 	vmov.f64	d0, d8
 80268e2:	f001 fa7d 	bl	8027de0 <__d2b>
 80268e6:	f3c4 510a 	ubfx	r1, r4, #20, #11
 80268ea:	4605      	mov	r5, r0
 80268ec:	980e      	ldr	r0, [sp, #56]	; 0x38
 80268ee:	2900      	cmp	r1, #0
 80268f0:	d046      	beq.n	8026980 <_dtoa_r+0x180>
 80268f2:	ee18 4a90 	vmov	r4, s17
 80268f6:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80268fa:	ec53 2b18 	vmov	r2, r3, d8
 80268fe:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8026902:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8026906:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802690a:	2400      	movs	r4, #0
 802690c:	ec43 2b16 	vmov	d6, r2, r3
 8026910:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8026914:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026ac0 <_dtoa_r+0x2c0>
 8026918:	ee36 7b47 	vsub.f64	d7, d6, d7
 802691c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8026ac8 <_dtoa_r+0x2c8>
 8026920:	eea7 6b05 	vfma.f64	d6, d7, d5
 8026924:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8026ad0 <_dtoa_r+0x2d0>
 8026928:	ee07 1a90 	vmov	s15, r1
 802692c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8026930:	eeb0 7b46 	vmov.f64	d7, d6
 8026934:	eea4 7b05 	vfma.f64	d7, d4, d5
 8026938:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 802693c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8026940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026944:	ee16 ba90 	vmov	fp, s13
 8026948:	940a      	str	r4, [sp, #40]	; 0x28
 802694a:	d508      	bpl.n	802695e <_dtoa_r+0x15e>
 802694c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8026950:	eeb4 6b47 	vcmp.f64	d6, d7
 8026954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026958:	bf18      	it	ne
 802695a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 802695e:	f1bb 0f16 	cmp.w	fp, #22
 8026962:	d82f      	bhi.n	80269c4 <_dtoa_r+0x1c4>
 8026964:	4b62      	ldr	r3, [pc, #392]	; (8026af0 <_dtoa_r+0x2f0>)
 8026966:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 802696a:	ed93 7b00 	vldr	d7, [r3]
 802696e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8026972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026976:	d501      	bpl.n	802697c <_dtoa_r+0x17c>
 8026978:	f10b 3bff 	add.w	fp, fp, #4294967295
 802697c:	2300      	movs	r3, #0
 802697e:	e022      	b.n	80269c6 <_dtoa_r+0x1c6>
 8026980:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8026982:	4401      	add	r1, r0
 8026984:	f201 4332 	addw	r3, r1, #1074	; 0x432
 8026988:	2b20      	cmp	r3, #32
 802698a:	bfc1      	itttt	gt
 802698c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8026990:	fa04 f303 	lslgt.w	r3, r4, r3
 8026994:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 8026998:	fa28 f804 	lsrgt.w	r8, r8, r4
 802699c:	bfd6      	itet	le
 802699e:	f1c3 0320 	rsble	r3, r3, #32
 80269a2:	ea43 0808 	orrgt.w	r8, r3, r8
 80269a6:	fa08 f803 	lslle.w	r8, r8, r3
 80269aa:	ee07 8a90 	vmov	s15, r8
 80269ae:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80269b2:	3901      	subs	r1, #1
 80269b4:	ee17 4a90 	vmov	r4, s15
 80269b8:	ec53 2b17 	vmov	r2, r3, d7
 80269bc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80269c0:	2401      	movs	r4, #1
 80269c2:	e7a3      	b.n	802690c <_dtoa_r+0x10c>
 80269c4:	2301      	movs	r3, #1
 80269c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80269c8:	1a43      	subs	r3, r0, r1
 80269ca:	1e5a      	subs	r2, r3, #1
 80269cc:	bf45      	ittet	mi
 80269ce:	f1c3 0301 	rsbmi	r3, r3, #1
 80269d2:	9304      	strmi	r3, [sp, #16]
 80269d4:	2300      	movpl	r3, #0
 80269d6:	2300      	movmi	r3, #0
 80269d8:	9205      	str	r2, [sp, #20]
 80269da:	bf54      	ite	pl
 80269dc:	9304      	strpl	r3, [sp, #16]
 80269de:	9305      	strmi	r3, [sp, #20]
 80269e0:	f1bb 0f00 	cmp.w	fp, #0
 80269e4:	db18      	blt.n	8026a18 <_dtoa_r+0x218>
 80269e6:	9b05      	ldr	r3, [sp, #20]
 80269e8:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 80269ec:	445b      	add	r3, fp
 80269ee:	9305      	str	r3, [sp, #20]
 80269f0:	2300      	movs	r3, #0
 80269f2:	9a06      	ldr	r2, [sp, #24]
 80269f4:	2a09      	cmp	r2, #9
 80269f6:	d849      	bhi.n	8026a8c <_dtoa_r+0x28c>
 80269f8:	2a05      	cmp	r2, #5
 80269fa:	bfc4      	itt	gt
 80269fc:	3a04      	subgt	r2, #4
 80269fe:	9206      	strgt	r2, [sp, #24]
 8026a00:	9a06      	ldr	r2, [sp, #24]
 8026a02:	f1a2 0202 	sub.w	r2, r2, #2
 8026a06:	bfcc      	ite	gt
 8026a08:	2400      	movgt	r4, #0
 8026a0a:	2401      	movle	r4, #1
 8026a0c:	2a03      	cmp	r2, #3
 8026a0e:	d848      	bhi.n	8026aa2 <_dtoa_r+0x2a2>
 8026a10:	e8df f002 	tbb	[pc, r2]
 8026a14:	3a2c2e0b 	.word	0x3a2c2e0b
 8026a18:	9b04      	ldr	r3, [sp, #16]
 8026a1a:	2200      	movs	r2, #0
 8026a1c:	eba3 030b 	sub.w	r3, r3, fp
 8026a20:	9304      	str	r3, [sp, #16]
 8026a22:	9209      	str	r2, [sp, #36]	; 0x24
 8026a24:	f1cb 0300 	rsb	r3, fp, #0
 8026a28:	e7e3      	b.n	80269f2 <_dtoa_r+0x1f2>
 8026a2a:	2200      	movs	r2, #0
 8026a2c:	9207      	str	r2, [sp, #28]
 8026a2e:	9a08      	ldr	r2, [sp, #32]
 8026a30:	2a00      	cmp	r2, #0
 8026a32:	dc39      	bgt.n	8026aa8 <_dtoa_r+0x2a8>
 8026a34:	f04f 0a01 	mov.w	sl, #1
 8026a38:	46d1      	mov	r9, sl
 8026a3a:	4652      	mov	r2, sl
 8026a3c:	f8cd a020 	str.w	sl, [sp, #32]
 8026a40:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8026a42:	2100      	movs	r1, #0
 8026a44:	6079      	str	r1, [r7, #4]
 8026a46:	2004      	movs	r0, #4
 8026a48:	f100 0c14 	add.w	ip, r0, #20
 8026a4c:	4594      	cmp	ip, r2
 8026a4e:	6879      	ldr	r1, [r7, #4]
 8026a50:	d92f      	bls.n	8026ab2 <_dtoa_r+0x2b2>
 8026a52:	4630      	mov	r0, r6
 8026a54:	930d      	str	r3, [sp, #52]	; 0x34
 8026a56:	f000 fe9b 	bl	8027790 <_Balloc>
 8026a5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026a5c:	9001      	str	r0, [sp, #4]
 8026a5e:	4602      	mov	r2, r0
 8026a60:	2800      	cmp	r0, #0
 8026a62:	d149      	bne.n	8026af8 <_dtoa_r+0x2f8>
 8026a64:	4b23      	ldr	r3, [pc, #140]	; (8026af4 <_dtoa_r+0x2f4>)
 8026a66:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8026a6a:	e6e1      	b.n	8026830 <_dtoa_r+0x30>
 8026a6c:	2201      	movs	r2, #1
 8026a6e:	e7dd      	b.n	8026a2c <_dtoa_r+0x22c>
 8026a70:	2200      	movs	r2, #0
 8026a72:	9207      	str	r2, [sp, #28]
 8026a74:	9a08      	ldr	r2, [sp, #32]
 8026a76:	eb0b 0a02 	add.w	sl, fp, r2
 8026a7a:	f10a 0901 	add.w	r9, sl, #1
 8026a7e:	464a      	mov	r2, r9
 8026a80:	2a01      	cmp	r2, #1
 8026a82:	bfb8      	it	lt
 8026a84:	2201      	movlt	r2, #1
 8026a86:	e7db      	b.n	8026a40 <_dtoa_r+0x240>
 8026a88:	2201      	movs	r2, #1
 8026a8a:	e7f2      	b.n	8026a72 <_dtoa_r+0x272>
 8026a8c:	2401      	movs	r4, #1
 8026a8e:	2200      	movs	r2, #0
 8026a90:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8026a94:	f04f 3aff 	mov.w	sl, #4294967295
 8026a98:	2100      	movs	r1, #0
 8026a9a:	46d1      	mov	r9, sl
 8026a9c:	2212      	movs	r2, #18
 8026a9e:	9108      	str	r1, [sp, #32]
 8026aa0:	e7ce      	b.n	8026a40 <_dtoa_r+0x240>
 8026aa2:	2201      	movs	r2, #1
 8026aa4:	9207      	str	r2, [sp, #28]
 8026aa6:	e7f5      	b.n	8026a94 <_dtoa_r+0x294>
 8026aa8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8026aac:	46d1      	mov	r9, sl
 8026aae:	4652      	mov	r2, sl
 8026ab0:	e7c6      	b.n	8026a40 <_dtoa_r+0x240>
 8026ab2:	3101      	adds	r1, #1
 8026ab4:	6079      	str	r1, [r7, #4]
 8026ab6:	0040      	lsls	r0, r0, #1
 8026ab8:	e7c6      	b.n	8026a48 <_dtoa_r+0x248>
 8026aba:	bf00      	nop
 8026abc:	f3af 8000 	nop.w
 8026ac0:	636f4361 	.word	0x636f4361
 8026ac4:	3fd287a7 	.word	0x3fd287a7
 8026ac8:	8b60c8b3 	.word	0x8b60c8b3
 8026acc:	3fc68a28 	.word	0x3fc68a28
 8026ad0:	509f79fb 	.word	0x509f79fb
 8026ad4:	3fd34413 	.word	0x3fd34413
 8026ad8:	080456ec 	.word	0x080456ec
 8026adc:	08045bb5 	.word	0x08045bb5
 8026ae0:	7ff00000 	.word	0x7ff00000
 8026ae4:	08045bb1 	.word	0x08045bb1
 8026ae8:	08045ba8 	.word	0x08045ba8
 8026aec:	08045d92 	.word	0x08045d92
 8026af0:	08045ca8 	.word	0x08045ca8
 8026af4:	08045c10 	.word	0x08045c10
 8026af8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8026afa:	9901      	ldr	r1, [sp, #4]
 8026afc:	6011      	str	r1, [r2, #0]
 8026afe:	f1b9 0f0e 	cmp.w	r9, #14
 8026b02:	d86c      	bhi.n	8026bde <_dtoa_r+0x3de>
 8026b04:	2c00      	cmp	r4, #0
 8026b06:	d06a      	beq.n	8026bde <_dtoa_r+0x3de>
 8026b08:	f1bb 0f00 	cmp.w	fp, #0
 8026b0c:	f340 80a0 	ble.w	8026c50 <_dtoa_r+0x450>
 8026b10:	49c1      	ldr	r1, [pc, #772]	; (8026e18 <_dtoa_r+0x618>)
 8026b12:	f00b 020f 	and.w	r2, fp, #15
 8026b16:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8026b1a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8026b1e:	ed92 7b00 	vldr	d7, [r2]
 8026b22:	ea4f 112b 	mov.w	r1, fp, asr #4
 8026b26:	f000 8087 	beq.w	8026c38 <_dtoa_r+0x438>
 8026b2a:	4abc      	ldr	r2, [pc, #752]	; (8026e1c <_dtoa_r+0x61c>)
 8026b2c:	ed92 6b08 	vldr	d6, [r2, #32]
 8026b30:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8026b34:	ed8d 6b02 	vstr	d6, [sp, #8]
 8026b38:	f001 010f 	and.w	r1, r1, #15
 8026b3c:	2203      	movs	r2, #3
 8026b3e:	48b7      	ldr	r0, [pc, #732]	; (8026e1c <_dtoa_r+0x61c>)
 8026b40:	2900      	cmp	r1, #0
 8026b42:	d17b      	bne.n	8026c3c <_dtoa_r+0x43c>
 8026b44:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026b48:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8026b4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026b50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8026b52:	2900      	cmp	r1, #0
 8026b54:	f000 80a2 	beq.w	8026c9c <_dtoa_r+0x49c>
 8026b58:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8026b5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026b60:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026b68:	f140 8098 	bpl.w	8026c9c <_dtoa_r+0x49c>
 8026b6c:	f1b9 0f00 	cmp.w	r9, #0
 8026b70:	f000 8094 	beq.w	8026c9c <_dtoa_r+0x49c>
 8026b74:	f1ba 0f00 	cmp.w	sl, #0
 8026b78:	dd2f      	ble.n	8026bda <_dtoa_r+0x3da>
 8026b7a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8026b7e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026b82:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026b86:	f10b 37ff 	add.w	r7, fp, #4294967295
 8026b8a:	3201      	adds	r2, #1
 8026b8c:	4650      	mov	r0, sl
 8026b8e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8026b92:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8026b96:	ee07 2a90 	vmov	s15, r2
 8026b9a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8026b9e:	eea7 5b06 	vfma.f64	d5, d7, d6
 8026ba2:	ee15 4a90 	vmov	r4, s11
 8026ba6:	ec52 1b15 	vmov	r1, r2, d5
 8026baa:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8026bae:	2800      	cmp	r0, #0
 8026bb0:	d177      	bne.n	8026ca2 <_dtoa_r+0x4a2>
 8026bb2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026bb6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8026bba:	ec42 1b17 	vmov	d7, r1, r2
 8026bbe:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bc6:	f300 8263 	bgt.w	8027090 <_dtoa_r+0x890>
 8026bca:	eeb1 7b47 	vneg.f64	d7, d7
 8026bce:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026bd6:	f100 8258 	bmi.w	802708a <_dtoa_r+0x88a>
 8026bda:	ed8d 8b02 	vstr	d8, [sp, #8]
 8026bde:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8026be0:	2a00      	cmp	r2, #0
 8026be2:	f2c0 811d 	blt.w	8026e20 <_dtoa_r+0x620>
 8026be6:	f1bb 0f0e 	cmp.w	fp, #14
 8026bea:	f300 8119 	bgt.w	8026e20 <_dtoa_r+0x620>
 8026bee:	4b8a      	ldr	r3, [pc, #552]	; (8026e18 <_dtoa_r+0x618>)
 8026bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8026bf4:	ed93 6b00 	vldr	d6, [r3]
 8026bf8:	9b08      	ldr	r3, [sp, #32]
 8026bfa:	2b00      	cmp	r3, #0
 8026bfc:	f280 80b7 	bge.w	8026d6e <_dtoa_r+0x56e>
 8026c00:	f1b9 0f00 	cmp.w	r9, #0
 8026c04:	f300 80b3 	bgt.w	8026d6e <_dtoa_r+0x56e>
 8026c08:	f040 823f 	bne.w	802708a <_dtoa_r+0x88a>
 8026c0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8026c10:	ee26 6b07 	vmul.f64	d6, d6, d7
 8026c14:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026c18:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026c20:	464c      	mov	r4, r9
 8026c22:	464f      	mov	r7, r9
 8026c24:	f280 8215 	bge.w	8027052 <_dtoa_r+0x852>
 8026c28:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026c2c:	2331      	movs	r3, #49	; 0x31
 8026c2e:	f808 3b01 	strb.w	r3, [r8], #1
 8026c32:	f10b 0b01 	add.w	fp, fp, #1
 8026c36:	e211      	b.n	802705c <_dtoa_r+0x85c>
 8026c38:	2202      	movs	r2, #2
 8026c3a:	e780      	b.n	8026b3e <_dtoa_r+0x33e>
 8026c3c:	07cc      	lsls	r4, r1, #31
 8026c3e:	d504      	bpl.n	8026c4a <_dtoa_r+0x44a>
 8026c40:	ed90 6b00 	vldr	d6, [r0]
 8026c44:	3201      	adds	r2, #1
 8026c46:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026c4a:	1049      	asrs	r1, r1, #1
 8026c4c:	3008      	adds	r0, #8
 8026c4e:	e777      	b.n	8026b40 <_dtoa_r+0x340>
 8026c50:	d022      	beq.n	8026c98 <_dtoa_r+0x498>
 8026c52:	f1cb 0100 	rsb	r1, fp, #0
 8026c56:	4a70      	ldr	r2, [pc, #448]	; (8026e18 <_dtoa_r+0x618>)
 8026c58:	f001 000f 	and.w	r0, r1, #15
 8026c5c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026c60:	ed92 7b00 	vldr	d7, [r2]
 8026c64:	ee28 7b07 	vmul.f64	d7, d8, d7
 8026c68:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026c6c:	486b      	ldr	r0, [pc, #428]	; (8026e1c <_dtoa_r+0x61c>)
 8026c6e:	1109      	asrs	r1, r1, #4
 8026c70:	2400      	movs	r4, #0
 8026c72:	2202      	movs	r2, #2
 8026c74:	b929      	cbnz	r1, 8026c82 <_dtoa_r+0x482>
 8026c76:	2c00      	cmp	r4, #0
 8026c78:	f43f af6a 	beq.w	8026b50 <_dtoa_r+0x350>
 8026c7c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8026c80:	e766      	b.n	8026b50 <_dtoa_r+0x350>
 8026c82:	07cf      	lsls	r7, r1, #31
 8026c84:	d505      	bpl.n	8026c92 <_dtoa_r+0x492>
 8026c86:	ed90 6b00 	vldr	d6, [r0]
 8026c8a:	3201      	adds	r2, #1
 8026c8c:	2401      	movs	r4, #1
 8026c8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026c92:	1049      	asrs	r1, r1, #1
 8026c94:	3008      	adds	r0, #8
 8026c96:	e7ed      	b.n	8026c74 <_dtoa_r+0x474>
 8026c98:	2202      	movs	r2, #2
 8026c9a:	e759      	b.n	8026b50 <_dtoa_r+0x350>
 8026c9c:	465f      	mov	r7, fp
 8026c9e:	4648      	mov	r0, r9
 8026ca0:	e775      	b.n	8026b8e <_dtoa_r+0x38e>
 8026ca2:	ec42 1b17 	vmov	d7, r1, r2
 8026ca6:	4a5c      	ldr	r2, [pc, #368]	; (8026e18 <_dtoa_r+0x618>)
 8026ca8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8026cac:	ed12 4b02 	vldr	d4, [r2, #-8]
 8026cb0:	9a01      	ldr	r2, [sp, #4]
 8026cb2:	1814      	adds	r4, r2, r0
 8026cb4:	9a07      	ldr	r2, [sp, #28]
 8026cb6:	b352      	cbz	r2, 8026d0e <_dtoa_r+0x50e>
 8026cb8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8026cbc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8026cc0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026cc4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8026cc8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026ccc:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026cd0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026cd4:	ee14 2a90 	vmov	r2, s9
 8026cd8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026cdc:	3230      	adds	r2, #48	; 0x30
 8026cde:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026ce2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cea:	f808 2b01 	strb.w	r2, [r8], #1
 8026cee:	d439      	bmi.n	8026d64 <_dtoa_r+0x564>
 8026cf0:	ee32 5b46 	vsub.f64	d5, d2, d6
 8026cf4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8026cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026cfc:	d472      	bmi.n	8026de4 <_dtoa_r+0x5e4>
 8026cfe:	45a0      	cmp	r8, r4
 8026d00:	f43f af6b 	beq.w	8026bda <_dtoa_r+0x3da>
 8026d04:	ee27 7b03 	vmul.f64	d7, d7, d3
 8026d08:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026d0c:	e7e0      	b.n	8026cd0 <_dtoa_r+0x4d0>
 8026d0e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026d12:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026d16:	4621      	mov	r1, r4
 8026d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8026d1c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8026d20:	ee14 2a90 	vmov	r2, s9
 8026d24:	3230      	adds	r2, #48	; 0x30
 8026d26:	f808 2b01 	strb.w	r2, [r8], #1
 8026d2a:	45a0      	cmp	r8, r4
 8026d2c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8026d30:	ee36 6b45 	vsub.f64	d6, d6, d5
 8026d34:	d118      	bne.n	8026d68 <_dtoa_r+0x568>
 8026d36:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8026d3a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8026d3e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8026d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d46:	dc4d      	bgt.n	8026de4 <_dtoa_r+0x5e4>
 8026d48:	ee35 7b47 	vsub.f64	d7, d5, d7
 8026d4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8026d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026d54:	f57f af41 	bpl.w	8026bda <_dtoa_r+0x3da>
 8026d58:	4688      	mov	r8, r1
 8026d5a:	3901      	subs	r1, #1
 8026d5c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8026d60:	2b30      	cmp	r3, #48	; 0x30
 8026d62:	d0f9      	beq.n	8026d58 <_dtoa_r+0x558>
 8026d64:	46bb      	mov	fp, r7
 8026d66:	e02a      	b.n	8026dbe <_dtoa_r+0x5be>
 8026d68:	ee26 6b03 	vmul.f64	d6, d6, d3
 8026d6c:	e7d6      	b.n	8026d1c <_dtoa_r+0x51c>
 8026d6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8026d72:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8026d76:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8026d7a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8026d7e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8026d82:	ee15 3a10 	vmov	r3, s10
 8026d86:	3330      	adds	r3, #48	; 0x30
 8026d88:	f808 3b01 	strb.w	r3, [r8], #1
 8026d8c:	9b01      	ldr	r3, [sp, #4]
 8026d8e:	eba8 0303 	sub.w	r3, r8, r3
 8026d92:	4599      	cmp	r9, r3
 8026d94:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8026d98:	eea3 7b46 	vfms.f64	d7, d3, d6
 8026d9c:	d133      	bne.n	8026e06 <_dtoa_r+0x606>
 8026d9e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8026da2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8026da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026daa:	dc1a      	bgt.n	8026de2 <_dtoa_r+0x5e2>
 8026dac:	eeb4 7b46 	vcmp.f64	d7, d6
 8026db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026db4:	d103      	bne.n	8026dbe <_dtoa_r+0x5be>
 8026db6:	ee15 3a10 	vmov	r3, s10
 8026dba:	07d9      	lsls	r1, r3, #31
 8026dbc:	d411      	bmi.n	8026de2 <_dtoa_r+0x5e2>
 8026dbe:	4629      	mov	r1, r5
 8026dc0:	4630      	mov	r0, r6
 8026dc2:	f000 fd25 	bl	8027810 <_Bfree>
 8026dc6:	2300      	movs	r3, #0
 8026dc8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8026dca:	f888 3000 	strb.w	r3, [r8]
 8026dce:	f10b 0301 	add.w	r3, fp, #1
 8026dd2:	6013      	str	r3, [r2, #0]
 8026dd4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8026dd6:	2b00      	cmp	r3, #0
 8026dd8:	f43f ad61 	beq.w	802689e <_dtoa_r+0x9e>
 8026ddc:	f8c3 8000 	str.w	r8, [r3]
 8026de0:	e55d      	b.n	802689e <_dtoa_r+0x9e>
 8026de2:	465f      	mov	r7, fp
 8026de4:	4643      	mov	r3, r8
 8026de6:	4698      	mov	r8, r3
 8026de8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8026dec:	2a39      	cmp	r2, #57	; 0x39
 8026dee:	d106      	bne.n	8026dfe <_dtoa_r+0x5fe>
 8026df0:	9a01      	ldr	r2, [sp, #4]
 8026df2:	429a      	cmp	r2, r3
 8026df4:	d1f7      	bne.n	8026de6 <_dtoa_r+0x5e6>
 8026df6:	9901      	ldr	r1, [sp, #4]
 8026df8:	2230      	movs	r2, #48	; 0x30
 8026dfa:	3701      	adds	r7, #1
 8026dfc:	700a      	strb	r2, [r1, #0]
 8026dfe:	781a      	ldrb	r2, [r3, #0]
 8026e00:	3201      	adds	r2, #1
 8026e02:	701a      	strb	r2, [r3, #0]
 8026e04:	e7ae      	b.n	8026d64 <_dtoa_r+0x564>
 8026e06:	ee27 7b04 	vmul.f64	d7, d7, d4
 8026e0a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8026e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026e12:	d1b2      	bne.n	8026d7a <_dtoa_r+0x57a>
 8026e14:	e7d3      	b.n	8026dbe <_dtoa_r+0x5be>
 8026e16:	bf00      	nop
 8026e18:	08045ca8 	.word	0x08045ca8
 8026e1c:	08045c80 	.word	0x08045c80
 8026e20:	9907      	ldr	r1, [sp, #28]
 8026e22:	2900      	cmp	r1, #0
 8026e24:	f000 80d0 	beq.w	8026fc8 <_dtoa_r+0x7c8>
 8026e28:	9906      	ldr	r1, [sp, #24]
 8026e2a:	2901      	cmp	r1, #1
 8026e2c:	f300 80b4 	bgt.w	8026f98 <_dtoa_r+0x798>
 8026e30:	990a      	ldr	r1, [sp, #40]	; 0x28
 8026e32:	2900      	cmp	r1, #0
 8026e34:	f000 80ac 	beq.w	8026f90 <_dtoa_r+0x790>
 8026e38:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8026e3c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026e40:	461c      	mov	r4, r3
 8026e42:	930a      	str	r3, [sp, #40]	; 0x28
 8026e44:	9b04      	ldr	r3, [sp, #16]
 8026e46:	4413      	add	r3, r2
 8026e48:	9304      	str	r3, [sp, #16]
 8026e4a:	9b05      	ldr	r3, [sp, #20]
 8026e4c:	2101      	movs	r1, #1
 8026e4e:	4413      	add	r3, r2
 8026e50:	4630      	mov	r0, r6
 8026e52:	9305      	str	r3, [sp, #20]
 8026e54:	f000 fd94 	bl	8027980 <__i2b>
 8026e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026e5a:	4607      	mov	r7, r0
 8026e5c:	f1b8 0f00 	cmp.w	r8, #0
 8026e60:	dd0d      	ble.n	8026e7e <_dtoa_r+0x67e>
 8026e62:	9a05      	ldr	r2, [sp, #20]
 8026e64:	2a00      	cmp	r2, #0
 8026e66:	dd0a      	ble.n	8026e7e <_dtoa_r+0x67e>
 8026e68:	4542      	cmp	r2, r8
 8026e6a:	9904      	ldr	r1, [sp, #16]
 8026e6c:	bfa8      	it	ge
 8026e6e:	4642      	movge	r2, r8
 8026e70:	1a89      	subs	r1, r1, r2
 8026e72:	9104      	str	r1, [sp, #16]
 8026e74:	9905      	ldr	r1, [sp, #20]
 8026e76:	eba8 0802 	sub.w	r8, r8, r2
 8026e7a:	1a8a      	subs	r2, r1, r2
 8026e7c:	9205      	str	r2, [sp, #20]
 8026e7e:	b303      	cbz	r3, 8026ec2 <_dtoa_r+0x6c2>
 8026e80:	9a07      	ldr	r2, [sp, #28]
 8026e82:	2a00      	cmp	r2, #0
 8026e84:	f000 80a5 	beq.w	8026fd2 <_dtoa_r+0x7d2>
 8026e88:	2c00      	cmp	r4, #0
 8026e8a:	dd13      	ble.n	8026eb4 <_dtoa_r+0x6b4>
 8026e8c:	4639      	mov	r1, r7
 8026e8e:	4622      	mov	r2, r4
 8026e90:	4630      	mov	r0, r6
 8026e92:	930d      	str	r3, [sp, #52]	; 0x34
 8026e94:	f000 fe34 	bl	8027b00 <__pow5mult>
 8026e98:	462a      	mov	r2, r5
 8026e9a:	4601      	mov	r1, r0
 8026e9c:	4607      	mov	r7, r0
 8026e9e:	4630      	mov	r0, r6
 8026ea0:	f000 fd84 	bl	80279ac <__multiply>
 8026ea4:	4629      	mov	r1, r5
 8026ea6:	900a      	str	r0, [sp, #40]	; 0x28
 8026ea8:	4630      	mov	r0, r6
 8026eaa:	f000 fcb1 	bl	8027810 <_Bfree>
 8026eae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8026eb0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8026eb2:	4615      	mov	r5, r2
 8026eb4:	1b1a      	subs	r2, r3, r4
 8026eb6:	d004      	beq.n	8026ec2 <_dtoa_r+0x6c2>
 8026eb8:	4629      	mov	r1, r5
 8026eba:	4630      	mov	r0, r6
 8026ebc:	f000 fe20 	bl	8027b00 <__pow5mult>
 8026ec0:	4605      	mov	r5, r0
 8026ec2:	2101      	movs	r1, #1
 8026ec4:	4630      	mov	r0, r6
 8026ec6:	f000 fd5b 	bl	8027980 <__i2b>
 8026eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026ecc:	2b00      	cmp	r3, #0
 8026ece:	4604      	mov	r4, r0
 8026ed0:	f340 8081 	ble.w	8026fd6 <_dtoa_r+0x7d6>
 8026ed4:	461a      	mov	r2, r3
 8026ed6:	4601      	mov	r1, r0
 8026ed8:	4630      	mov	r0, r6
 8026eda:	f000 fe11 	bl	8027b00 <__pow5mult>
 8026ede:	9b06      	ldr	r3, [sp, #24]
 8026ee0:	2b01      	cmp	r3, #1
 8026ee2:	4604      	mov	r4, r0
 8026ee4:	dd7a      	ble.n	8026fdc <_dtoa_r+0x7dc>
 8026ee6:	2300      	movs	r3, #0
 8026ee8:	930a      	str	r3, [sp, #40]	; 0x28
 8026eea:	6922      	ldr	r2, [r4, #16]
 8026eec:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8026ef0:	6910      	ldr	r0, [r2, #16]
 8026ef2:	f000 fcf5 	bl	80278e0 <__hi0bits>
 8026ef6:	f1c0 0020 	rsb	r0, r0, #32
 8026efa:	9b05      	ldr	r3, [sp, #20]
 8026efc:	4418      	add	r0, r3
 8026efe:	f010 001f 	ands.w	r0, r0, #31
 8026f02:	f000 808c 	beq.w	802701e <_dtoa_r+0x81e>
 8026f06:	f1c0 0220 	rsb	r2, r0, #32
 8026f0a:	2a04      	cmp	r2, #4
 8026f0c:	f340 8085 	ble.w	802701a <_dtoa_r+0x81a>
 8026f10:	f1c0 001c 	rsb	r0, r0, #28
 8026f14:	9b04      	ldr	r3, [sp, #16]
 8026f16:	4403      	add	r3, r0
 8026f18:	9304      	str	r3, [sp, #16]
 8026f1a:	9b05      	ldr	r3, [sp, #20]
 8026f1c:	4403      	add	r3, r0
 8026f1e:	4480      	add	r8, r0
 8026f20:	9305      	str	r3, [sp, #20]
 8026f22:	9b04      	ldr	r3, [sp, #16]
 8026f24:	2b00      	cmp	r3, #0
 8026f26:	dd05      	ble.n	8026f34 <_dtoa_r+0x734>
 8026f28:	4629      	mov	r1, r5
 8026f2a:	461a      	mov	r2, r3
 8026f2c:	4630      	mov	r0, r6
 8026f2e:	f000 fe41 	bl	8027bb4 <__lshift>
 8026f32:	4605      	mov	r5, r0
 8026f34:	9b05      	ldr	r3, [sp, #20]
 8026f36:	2b00      	cmp	r3, #0
 8026f38:	dd05      	ble.n	8026f46 <_dtoa_r+0x746>
 8026f3a:	4621      	mov	r1, r4
 8026f3c:	461a      	mov	r2, r3
 8026f3e:	4630      	mov	r0, r6
 8026f40:	f000 fe38 	bl	8027bb4 <__lshift>
 8026f44:	4604      	mov	r4, r0
 8026f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8026f48:	2b00      	cmp	r3, #0
 8026f4a:	d06a      	beq.n	8027022 <_dtoa_r+0x822>
 8026f4c:	4621      	mov	r1, r4
 8026f4e:	4628      	mov	r0, r5
 8026f50:	f000 fea0 	bl	8027c94 <__mcmp>
 8026f54:	2800      	cmp	r0, #0
 8026f56:	da64      	bge.n	8027022 <_dtoa_r+0x822>
 8026f58:	2300      	movs	r3, #0
 8026f5a:	4629      	mov	r1, r5
 8026f5c:	220a      	movs	r2, #10
 8026f5e:	4630      	mov	r0, r6
 8026f60:	f000 fc78 	bl	8027854 <__multadd>
 8026f64:	9b07      	ldr	r3, [sp, #28]
 8026f66:	f10b 3bff 	add.w	fp, fp, #4294967295
 8026f6a:	4605      	mov	r5, r0
 8026f6c:	2b00      	cmp	r3, #0
 8026f6e:	f000 8191 	beq.w	8027294 <_dtoa_r+0xa94>
 8026f72:	4639      	mov	r1, r7
 8026f74:	2300      	movs	r3, #0
 8026f76:	220a      	movs	r2, #10
 8026f78:	4630      	mov	r0, r6
 8026f7a:	f000 fc6b 	bl	8027854 <__multadd>
 8026f7e:	f1ba 0f00 	cmp.w	sl, #0
 8026f82:	4607      	mov	r7, r0
 8026f84:	f300 808d 	bgt.w	80270a2 <_dtoa_r+0x8a2>
 8026f88:	9b06      	ldr	r3, [sp, #24]
 8026f8a:	2b02      	cmp	r3, #2
 8026f8c:	dc50      	bgt.n	8027030 <_dtoa_r+0x830>
 8026f8e:	e088      	b.n	80270a2 <_dtoa_r+0x8a2>
 8026f90:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8026f92:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8026f96:	e751      	b.n	8026e3c <_dtoa_r+0x63c>
 8026f98:	f109 34ff 	add.w	r4, r9, #4294967295
 8026f9c:	42a3      	cmp	r3, r4
 8026f9e:	bfbf      	itttt	lt
 8026fa0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8026fa2:	1ae3      	sublt	r3, r4, r3
 8026fa4:	18d2      	addlt	r2, r2, r3
 8026fa6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8026fa8:	bfb6      	itet	lt
 8026faa:	4623      	movlt	r3, r4
 8026fac:	1b1c      	subge	r4, r3, r4
 8026fae:	2400      	movlt	r4, #0
 8026fb0:	f1b9 0f00 	cmp.w	r9, #0
 8026fb4:	bfb5      	itete	lt
 8026fb6:	9a04      	ldrlt	r2, [sp, #16]
 8026fb8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8026fbc:	eba2 0809 	sublt.w	r8, r2, r9
 8026fc0:	464a      	movge	r2, r9
 8026fc2:	bfb8      	it	lt
 8026fc4:	2200      	movlt	r2, #0
 8026fc6:	e73c      	b.n	8026e42 <_dtoa_r+0x642>
 8026fc8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8026fcc:	9f07      	ldr	r7, [sp, #28]
 8026fce:	461c      	mov	r4, r3
 8026fd0:	e744      	b.n	8026e5c <_dtoa_r+0x65c>
 8026fd2:	461a      	mov	r2, r3
 8026fd4:	e770      	b.n	8026eb8 <_dtoa_r+0x6b8>
 8026fd6:	9b06      	ldr	r3, [sp, #24]
 8026fd8:	2b01      	cmp	r3, #1
 8026fda:	dc18      	bgt.n	802700e <_dtoa_r+0x80e>
 8026fdc:	9b02      	ldr	r3, [sp, #8]
 8026fde:	b9b3      	cbnz	r3, 802700e <_dtoa_r+0x80e>
 8026fe0:	9b03      	ldr	r3, [sp, #12]
 8026fe2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8026fe6:	b9a2      	cbnz	r2, 8027012 <_dtoa_r+0x812>
 8026fe8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8026fec:	0d12      	lsrs	r2, r2, #20
 8026fee:	0512      	lsls	r2, r2, #20
 8026ff0:	b18a      	cbz	r2, 8027016 <_dtoa_r+0x816>
 8026ff2:	9b04      	ldr	r3, [sp, #16]
 8026ff4:	3301      	adds	r3, #1
 8026ff6:	9304      	str	r3, [sp, #16]
 8026ff8:	9b05      	ldr	r3, [sp, #20]
 8026ffa:	3301      	adds	r3, #1
 8026ffc:	9305      	str	r3, [sp, #20]
 8026ffe:	2301      	movs	r3, #1
 8027000:	930a      	str	r3, [sp, #40]	; 0x28
 8027002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027004:	2b00      	cmp	r3, #0
 8027006:	f47f af70 	bne.w	8026eea <_dtoa_r+0x6ea>
 802700a:	2001      	movs	r0, #1
 802700c:	e775      	b.n	8026efa <_dtoa_r+0x6fa>
 802700e:	2300      	movs	r3, #0
 8027010:	e7f6      	b.n	8027000 <_dtoa_r+0x800>
 8027012:	9b02      	ldr	r3, [sp, #8]
 8027014:	e7f4      	b.n	8027000 <_dtoa_r+0x800>
 8027016:	920a      	str	r2, [sp, #40]	; 0x28
 8027018:	e7f3      	b.n	8027002 <_dtoa_r+0x802>
 802701a:	d082      	beq.n	8026f22 <_dtoa_r+0x722>
 802701c:	4610      	mov	r0, r2
 802701e:	301c      	adds	r0, #28
 8027020:	e778      	b.n	8026f14 <_dtoa_r+0x714>
 8027022:	f1b9 0f00 	cmp.w	r9, #0
 8027026:	dc37      	bgt.n	8027098 <_dtoa_r+0x898>
 8027028:	9b06      	ldr	r3, [sp, #24]
 802702a:	2b02      	cmp	r3, #2
 802702c:	dd34      	ble.n	8027098 <_dtoa_r+0x898>
 802702e:	46ca      	mov	sl, r9
 8027030:	f1ba 0f00 	cmp.w	sl, #0
 8027034:	d10d      	bne.n	8027052 <_dtoa_r+0x852>
 8027036:	4621      	mov	r1, r4
 8027038:	4653      	mov	r3, sl
 802703a:	2205      	movs	r2, #5
 802703c:	4630      	mov	r0, r6
 802703e:	f000 fc09 	bl	8027854 <__multadd>
 8027042:	4601      	mov	r1, r0
 8027044:	4604      	mov	r4, r0
 8027046:	4628      	mov	r0, r5
 8027048:	f000 fe24 	bl	8027c94 <__mcmp>
 802704c:	2800      	cmp	r0, #0
 802704e:	f73f adeb 	bgt.w	8026c28 <_dtoa_r+0x428>
 8027052:	9b08      	ldr	r3, [sp, #32]
 8027054:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8027058:	ea6f 0b03 	mvn.w	fp, r3
 802705c:	f04f 0900 	mov.w	r9, #0
 8027060:	4621      	mov	r1, r4
 8027062:	4630      	mov	r0, r6
 8027064:	f000 fbd4 	bl	8027810 <_Bfree>
 8027068:	2f00      	cmp	r7, #0
 802706a:	f43f aea8 	beq.w	8026dbe <_dtoa_r+0x5be>
 802706e:	f1b9 0f00 	cmp.w	r9, #0
 8027072:	d005      	beq.n	8027080 <_dtoa_r+0x880>
 8027074:	45b9      	cmp	r9, r7
 8027076:	d003      	beq.n	8027080 <_dtoa_r+0x880>
 8027078:	4649      	mov	r1, r9
 802707a:	4630      	mov	r0, r6
 802707c:	f000 fbc8 	bl	8027810 <_Bfree>
 8027080:	4639      	mov	r1, r7
 8027082:	4630      	mov	r0, r6
 8027084:	f000 fbc4 	bl	8027810 <_Bfree>
 8027088:	e699      	b.n	8026dbe <_dtoa_r+0x5be>
 802708a:	2400      	movs	r4, #0
 802708c:	4627      	mov	r7, r4
 802708e:	e7e0      	b.n	8027052 <_dtoa_r+0x852>
 8027090:	46bb      	mov	fp, r7
 8027092:	4604      	mov	r4, r0
 8027094:	4607      	mov	r7, r0
 8027096:	e5c7      	b.n	8026c28 <_dtoa_r+0x428>
 8027098:	9b07      	ldr	r3, [sp, #28]
 802709a:	46ca      	mov	sl, r9
 802709c:	2b00      	cmp	r3, #0
 802709e:	f000 8100 	beq.w	80272a2 <_dtoa_r+0xaa2>
 80270a2:	f1b8 0f00 	cmp.w	r8, #0
 80270a6:	dd05      	ble.n	80270b4 <_dtoa_r+0x8b4>
 80270a8:	4639      	mov	r1, r7
 80270aa:	4642      	mov	r2, r8
 80270ac:	4630      	mov	r0, r6
 80270ae:	f000 fd81 	bl	8027bb4 <__lshift>
 80270b2:	4607      	mov	r7, r0
 80270b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80270b6:	2b00      	cmp	r3, #0
 80270b8:	d05d      	beq.n	8027176 <_dtoa_r+0x976>
 80270ba:	6879      	ldr	r1, [r7, #4]
 80270bc:	4630      	mov	r0, r6
 80270be:	f000 fb67 	bl	8027790 <_Balloc>
 80270c2:	4680      	mov	r8, r0
 80270c4:	b928      	cbnz	r0, 80270d2 <_dtoa_r+0x8d2>
 80270c6:	4b82      	ldr	r3, [pc, #520]	; (80272d0 <_dtoa_r+0xad0>)
 80270c8:	4602      	mov	r2, r0
 80270ca:	f240 21ea 	movw	r1, #746	; 0x2ea
 80270ce:	f7ff bbaf 	b.w	8026830 <_dtoa_r+0x30>
 80270d2:	693a      	ldr	r2, [r7, #16]
 80270d4:	3202      	adds	r2, #2
 80270d6:	0092      	lsls	r2, r2, #2
 80270d8:	f107 010c 	add.w	r1, r7, #12
 80270dc:	300c      	adds	r0, #12
 80270de:	f7fc fef3 	bl	8023ec8 <memcpy>
 80270e2:	2201      	movs	r2, #1
 80270e4:	4641      	mov	r1, r8
 80270e6:	4630      	mov	r0, r6
 80270e8:	f000 fd64 	bl	8027bb4 <__lshift>
 80270ec:	9b01      	ldr	r3, [sp, #4]
 80270ee:	3301      	adds	r3, #1
 80270f0:	9304      	str	r3, [sp, #16]
 80270f2:	9b01      	ldr	r3, [sp, #4]
 80270f4:	4453      	add	r3, sl
 80270f6:	9308      	str	r3, [sp, #32]
 80270f8:	9b02      	ldr	r3, [sp, #8]
 80270fa:	f003 0301 	and.w	r3, r3, #1
 80270fe:	46b9      	mov	r9, r7
 8027100:	9307      	str	r3, [sp, #28]
 8027102:	4607      	mov	r7, r0
 8027104:	9b04      	ldr	r3, [sp, #16]
 8027106:	4621      	mov	r1, r4
 8027108:	3b01      	subs	r3, #1
 802710a:	4628      	mov	r0, r5
 802710c:	9302      	str	r3, [sp, #8]
 802710e:	f7ff fae9 	bl	80266e4 <quorem>
 8027112:	4603      	mov	r3, r0
 8027114:	3330      	adds	r3, #48	; 0x30
 8027116:	9005      	str	r0, [sp, #20]
 8027118:	4649      	mov	r1, r9
 802711a:	4628      	mov	r0, r5
 802711c:	9309      	str	r3, [sp, #36]	; 0x24
 802711e:	f000 fdb9 	bl	8027c94 <__mcmp>
 8027122:	463a      	mov	r2, r7
 8027124:	4682      	mov	sl, r0
 8027126:	4621      	mov	r1, r4
 8027128:	4630      	mov	r0, r6
 802712a:	f000 fdcf 	bl	8027ccc <__mdiff>
 802712e:	68c2      	ldr	r2, [r0, #12]
 8027130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027132:	4680      	mov	r8, r0
 8027134:	bb0a      	cbnz	r2, 802717a <_dtoa_r+0x97a>
 8027136:	4601      	mov	r1, r0
 8027138:	4628      	mov	r0, r5
 802713a:	f000 fdab 	bl	8027c94 <__mcmp>
 802713e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027140:	4602      	mov	r2, r0
 8027142:	4641      	mov	r1, r8
 8027144:	4630      	mov	r0, r6
 8027146:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 802714a:	f000 fb61 	bl	8027810 <_Bfree>
 802714e:	9b06      	ldr	r3, [sp, #24]
 8027150:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8027152:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8027156:	ea43 0102 	orr.w	r1, r3, r2
 802715a:	9b07      	ldr	r3, [sp, #28]
 802715c:	430b      	orrs	r3, r1
 802715e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8027160:	d10d      	bne.n	802717e <_dtoa_r+0x97e>
 8027162:	2b39      	cmp	r3, #57	; 0x39
 8027164:	d029      	beq.n	80271ba <_dtoa_r+0x9ba>
 8027166:	f1ba 0f00 	cmp.w	sl, #0
 802716a:	dd01      	ble.n	8027170 <_dtoa_r+0x970>
 802716c:	9b05      	ldr	r3, [sp, #20]
 802716e:	3331      	adds	r3, #49	; 0x31
 8027170:	9a02      	ldr	r2, [sp, #8]
 8027172:	7013      	strb	r3, [r2, #0]
 8027174:	e774      	b.n	8027060 <_dtoa_r+0x860>
 8027176:	4638      	mov	r0, r7
 8027178:	e7b8      	b.n	80270ec <_dtoa_r+0x8ec>
 802717a:	2201      	movs	r2, #1
 802717c:	e7e1      	b.n	8027142 <_dtoa_r+0x942>
 802717e:	f1ba 0f00 	cmp.w	sl, #0
 8027182:	db06      	blt.n	8027192 <_dtoa_r+0x992>
 8027184:	9906      	ldr	r1, [sp, #24]
 8027186:	ea41 0a0a 	orr.w	sl, r1, sl
 802718a:	9907      	ldr	r1, [sp, #28]
 802718c:	ea5a 0101 	orrs.w	r1, sl, r1
 8027190:	d120      	bne.n	80271d4 <_dtoa_r+0x9d4>
 8027192:	2a00      	cmp	r2, #0
 8027194:	ddec      	ble.n	8027170 <_dtoa_r+0x970>
 8027196:	4629      	mov	r1, r5
 8027198:	2201      	movs	r2, #1
 802719a:	4630      	mov	r0, r6
 802719c:	9304      	str	r3, [sp, #16]
 802719e:	f000 fd09 	bl	8027bb4 <__lshift>
 80271a2:	4621      	mov	r1, r4
 80271a4:	4605      	mov	r5, r0
 80271a6:	f000 fd75 	bl	8027c94 <__mcmp>
 80271aa:	2800      	cmp	r0, #0
 80271ac:	9b04      	ldr	r3, [sp, #16]
 80271ae:	dc02      	bgt.n	80271b6 <_dtoa_r+0x9b6>
 80271b0:	d1de      	bne.n	8027170 <_dtoa_r+0x970>
 80271b2:	07da      	lsls	r2, r3, #31
 80271b4:	d5dc      	bpl.n	8027170 <_dtoa_r+0x970>
 80271b6:	2b39      	cmp	r3, #57	; 0x39
 80271b8:	d1d8      	bne.n	802716c <_dtoa_r+0x96c>
 80271ba:	9a02      	ldr	r2, [sp, #8]
 80271bc:	2339      	movs	r3, #57	; 0x39
 80271be:	7013      	strb	r3, [r2, #0]
 80271c0:	4643      	mov	r3, r8
 80271c2:	4698      	mov	r8, r3
 80271c4:	3b01      	subs	r3, #1
 80271c6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80271ca:	2a39      	cmp	r2, #57	; 0x39
 80271cc:	d051      	beq.n	8027272 <_dtoa_r+0xa72>
 80271ce:	3201      	adds	r2, #1
 80271d0:	701a      	strb	r2, [r3, #0]
 80271d2:	e745      	b.n	8027060 <_dtoa_r+0x860>
 80271d4:	2a00      	cmp	r2, #0
 80271d6:	dd03      	ble.n	80271e0 <_dtoa_r+0x9e0>
 80271d8:	2b39      	cmp	r3, #57	; 0x39
 80271da:	d0ee      	beq.n	80271ba <_dtoa_r+0x9ba>
 80271dc:	3301      	adds	r3, #1
 80271de:	e7c7      	b.n	8027170 <_dtoa_r+0x970>
 80271e0:	9a04      	ldr	r2, [sp, #16]
 80271e2:	9908      	ldr	r1, [sp, #32]
 80271e4:	f802 3c01 	strb.w	r3, [r2, #-1]
 80271e8:	428a      	cmp	r2, r1
 80271ea:	d02b      	beq.n	8027244 <_dtoa_r+0xa44>
 80271ec:	4629      	mov	r1, r5
 80271ee:	2300      	movs	r3, #0
 80271f0:	220a      	movs	r2, #10
 80271f2:	4630      	mov	r0, r6
 80271f4:	f000 fb2e 	bl	8027854 <__multadd>
 80271f8:	45b9      	cmp	r9, r7
 80271fa:	4605      	mov	r5, r0
 80271fc:	f04f 0300 	mov.w	r3, #0
 8027200:	f04f 020a 	mov.w	r2, #10
 8027204:	4649      	mov	r1, r9
 8027206:	4630      	mov	r0, r6
 8027208:	d107      	bne.n	802721a <_dtoa_r+0xa1a>
 802720a:	f000 fb23 	bl	8027854 <__multadd>
 802720e:	4681      	mov	r9, r0
 8027210:	4607      	mov	r7, r0
 8027212:	9b04      	ldr	r3, [sp, #16]
 8027214:	3301      	adds	r3, #1
 8027216:	9304      	str	r3, [sp, #16]
 8027218:	e774      	b.n	8027104 <_dtoa_r+0x904>
 802721a:	f000 fb1b 	bl	8027854 <__multadd>
 802721e:	4639      	mov	r1, r7
 8027220:	4681      	mov	r9, r0
 8027222:	2300      	movs	r3, #0
 8027224:	220a      	movs	r2, #10
 8027226:	4630      	mov	r0, r6
 8027228:	f000 fb14 	bl	8027854 <__multadd>
 802722c:	4607      	mov	r7, r0
 802722e:	e7f0      	b.n	8027212 <_dtoa_r+0xa12>
 8027230:	f1ba 0f00 	cmp.w	sl, #0
 8027234:	9a01      	ldr	r2, [sp, #4]
 8027236:	bfcc      	ite	gt
 8027238:	46d0      	movgt	r8, sl
 802723a:	f04f 0801 	movle.w	r8, #1
 802723e:	4490      	add	r8, r2
 8027240:	f04f 0900 	mov.w	r9, #0
 8027244:	4629      	mov	r1, r5
 8027246:	2201      	movs	r2, #1
 8027248:	4630      	mov	r0, r6
 802724a:	9302      	str	r3, [sp, #8]
 802724c:	f000 fcb2 	bl	8027bb4 <__lshift>
 8027250:	4621      	mov	r1, r4
 8027252:	4605      	mov	r5, r0
 8027254:	f000 fd1e 	bl	8027c94 <__mcmp>
 8027258:	2800      	cmp	r0, #0
 802725a:	dcb1      	bgt.n	80271c0 <_dtoa_r+0x9c0>
 802725c:	d102      	bne.n	8027264 <_dtoa_r+0xa64>
 802725e:	9b02      	ldr	r3, [sp, #8]
 8027260:	07db      	lsls	r3, r3, #31
 8027262:	d4ad      	bmi.n	80271c0 <_dtoa_r+0x9c0>
 8027264:	4643      	mov	r3, r8
 8027266:	4698      	mov	r8, r3
 8027268:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802726c:	2a30      	cmp	r2, #48	; 0x30
 802726e:	d0fa      	beq.n	8027266 <_dtoa_r+0xa66>
 8027270:	e6f6      	b.n	8027060 <_dtoa_r+0x860>
 8027272:	9a01      	ldr	r2, [sp, #4]
 8027274:	429a      	cmp	r2, r3
 8027276:	d1a4      	bne.n	80271c2 <_dtoa_r+0x9c2>
 8027278:	f10b 0b01 	add.w	fp, fp, #1
 802727c:	2331      	movs	r3, #49	; 0x31
 802727e:	e778      	b.n	8027172 <_dtoa_r+0x972>
 8027280:	4b14      	ldr	r3, [pc, #80]	; (80272d4 <_dtoa_r+0xad4>)
 8027282:	f7ff bb27 	b.w	80268d4 <_dtoa_r+0xd4>
 8027286:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8027288:	2b00      	cmp	r3, #0
 802728a:	f47f ab03 	bne.w	8026894 <_dtoa_r+0x94>
 802728e:	4b12      	ldr	r3, [pc, #72]	; (80272d8 <_dtoa_r+0xad8>)
 8027290:	f7ff bb20 	b.w	80268d4 <_dtoa_r+0xd4>
 8027294:	f1ba 0f00 	cmp.w	sl, #0
 8027298:	dc03      	bgt.n	80272a2 <_dtoa_r+0xaa2>
 802729a:	9b06      	ldr	r3, [sp, #24]
 802729c:	2b02      	cmp	r3, #2
 802729e:	f73f aec7 	bgt.w	8027030 <_dtoa_r+0x830>
 80272a2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80272a6:	4621      	mov	r1, r4
 80272a8:	4628      	mov	r0, r5
 80272aa:	f7ff fa1b 	bl	80266e4 <quorem>
 80272ae:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80272b2:	f808 3b01 	strb.w	r3, [r8], #1
 80272b6:	9a01      	ldr	r2, [sp, #4]
 80272b8:	eba8 0202 	sub.w	r2, r8, r2
 80272bc:	4592      	cmp	sl, r2
 80272be:	ddb7      	ble.n	8027230 <_dtoa_r+0xa30>
 80272c0:	4629      	mov	r1, r5
 80272c2:	2300      	movs	r3, #0
 80272c4:	220a      	movs	r2, #10
 80272c6:	4630      	mov	r0, r6
 80272c8:	f000 fac4 	bl	8027854 <__multadd>
 80272cc:	4605      	mov	r5, r0
 80272ce:	e7ea      	b.n	80272a6 <_dtoa_r+0xaa6>
 80272d0:	08045c10 	.word	0x08045c10
 80272d4:	08045d91 	.word	0x08045d91
 80272d8:	08045ba8 	.word	0x08045ba8

080272dc <__errno>:
 80272dc:	4b01      	ldr	r3, [pc, #4]	; (80272e4 <__errno+0x8>)
 80272de:	6818      	ldr	r0, [r3, #0]
 80272e0:	4770      	bx	lr
 80272e2:	bf00      	nop
 80272e4:	2000046c 	.word	0x2000046c

080272e8 <__sflush_r>:
 80272e8:	898a      	ldrh	r2, [r1, #12]
 80272ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80272ee:	4605      	mov	r5, r0
 80272f0:	0710      	lsls	r0, r2, #28
 80272f2:	460c      	mov	r4, r1
 80272f4:	d458      	bmi.n	80273a8 <__sflush_r+0xc0>
 80272f6:	684b      	ldr	r3, [r1, #4]
 80272f8:	2b00      	cmp	r3, #0
 80272fa:	dc05      	bgt.n	8027308 <__sflush_r+0x20>
 80272fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80272fe:	2b00      	cmp	r3, #0
 8027300:	dc02      	bgt.n	8027308 <__sflush_r+0x20>
 8027302:	2000      	movs	r0, #0
 8027304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802730a:	2e00      	cmp	r6, #0
 802730c:	d0f9      	beq.n	8027302 <__sflush_r+0x1a>
 802730e:	2300      	movs	r3, #0
 8027310:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8027314:	682f      	ldr	r7, [r5, #0]
 8027316:	602b      	str	r3, [r5, #0]
 8027318:	d032      	beq.n	8027380 <__sflush_r+0x98>
 802731a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802731c:	89a3      	ldrh	r3, [r4, #12]
 802731e:	075a      	lsls	r2, r3, #29
 8027320:	d505      	bpl.n	802732e <__sflush_r+0x46>
 8027322:	6863      	ldr	r3, [r4, #4]
 8027324:	1ac0      	subs	r0, r0, r3
 8027326:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8027328:	b10b      	cbz	r3, 802732e <__sflush_r+0x46>
 802732a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802732c:	1ac0      	subs	r0, r0, r3
 802732e:	2300      	movs	r3, #0
 8027330:	4602      	mov	r2, r0
 8027332:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8027334:	6a21      	ldr	r1, [r4, #32]
 8027336:	4628      	mov	r0, r5
 8027338:	47b0      	blx	r6
 802733a:	1c43      	adds	r3, r0, #1
 802733c:	89a3      	ldrh	r3, [r4, #12]
 802733e:	d106      	bne.n	802734e <__sflush_r+0x66>
 8027340:	6829      	ldr	r1, [r5, #0]
 8027342:	291d      	cmp	r1, #29
 8027344:	d82c      	bhi.n	80273a0 <__sflush_r+0xb8>
 8027346:	4a2a      	ldr	r2, [pc, #168]	; (80273f0 <__sflush_r+0x108>)
 8027348:	40ca      	lsrs	r2, r1
 802734a:	07d6      	lsls	r6, r2, #31
 802734c:	d528      	bpl.n	80273a0 <__sflush_r+0xb8>
 802734e:	2200      	movs	r2, #0
 8027350:	6062      	str	r2, [r4, #4]
 8027352:	04d9      	lsls	r1, r3, #19
 8027354:	6922      	ldr	r2, [r4, #16]
 8027356:	6022      	str	r2, [r4, #0]
 8027358:	d504      	bpl.n	8027364 <__sflush_r+0x7c>
 802735a:	1c42      	adds	r2, r0, #1
 802735c:	d101      	bne.n	8027362 <__sflush_r+0x7a>
 802735e:	682b      	ldr	r3, [r5, #0]
 8027360:	b903      	cbnz	r3, 8027364 <__sflush_r+0x7c>
 8027362:	6560      	str	r0, [r4, #84]	; 0x54
 8027364:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8027366:	602f      	str	r7, [r5, #0]
 8027368:	2900      	cmp	r1, #0
 802736a:	d0ca      	beq.n	8027302 <__sflush_r+0x1a>
 802736c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8027370:	4299      	cmp	r1, r3
 8027372:	d002      	beq.n	802737a <__sflush_r+0x92>
 8027374:	4628      	mov	r0, r5
 8027376:	f7fd f849 	bl	802440c <_free_r>
 802737a:	2000      	movs	r0, #0
 802737c:	6360      	str	r0, [r4, #52]	; 0x34
 802737e:	e7c1      	b.n	8027304 <__sflush_r+0x1c>
 8027380:	6a21      	ldr	r1, [r4, #32]
 8027382:	2301      	movs	r3, #1
 8027384:	4628      	mov	r0, r5
 8027386:	47b0      	blx	r6
 8027388:	1c41      	adds	r1, r0, #1
 802738a:	d1c7      	bne.n	802731c <__sflush_r+0x34>
 802738c:	682b      	ldr	r3, [r5, #0]
 802738e:	2b00      	cmp	r3, #0
 8027390:	d0c4      	beq.n	802731c <__sflush_r+0x34>
 8027392:	2b1d      	cmp	r3, #29
 8027394:	d001      	beq.n	802739a <__sflush_r+0xb2>
 8027396:	2b16      	cmp	r3, #22
 8027398:	d101      	bne.n	802739e <__sflush_r+0xb6>
 802739a:	602f      	str	r7, [r5, #0]
 802739c:	e7b1      	b.n	8027302 <__sflush_r+0x1a>
 802739e:	89a3      	ldrh	r3, [r4, #12]
 80273a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273a4:	81a3      	strh	r3, [r4, #12]
 80273a6:	e7ad      	b.n	8027304 <__sflush_r+0x1c>
 80273a8:	690f      	ldr	r7, [r1, #16]
 80273aa:	2f00      	cmp	r7, #0
 80273ac:	d0a9      	beq.n	8027302 <__sflush_r+0x1a>
 80273ae:	0793      	lsls	r3, r2, #30
 80273b0:	680e      	ldr	r6, [r1, #0]
 80273b2:	bf08      	it	eq
 80273b4:	694b      	ldreq	r3, [r1, #20]
 80273b6:	600f      	str	r7, [r1, #0]
 80273b8:	bf18      	it	ne
 80273ba:	2300      	movne	r3, #0
 80273bc:	eba6 0807 	sub.w	r8, r6, r7
 80273c0:	608b      	str	r3, [r1, #8]
 80273c2:	f1b8 0f00 	cmp.w	r8, #0
 80273c6:	dd9c      	ble.n	8027302 <__sflush_r+0x1a>
 80273c8:	6a21      	ldr	r1, [r4, #32]
 80273ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80273cc:	4643      	mov	r3, r8
 80273ce:	463a      	mov	r2, r7
 80273d0:	4628      	mov	r0, r5
 80273d2:	47b0      	blx	r6
 80273d4:	2800      	cmp	r0, #0
 80273d6:	dc06      	bgt.n	80273e6 <__sflush_r+0xfe>
 80273d8:	89a3      	ldrh	r3, [r4, #12]
 80273da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80273de:	81a3      	strh	r3, [r4, #12]
 80273e0:	f04f 30ff 	mov.w	r0, #4294967295
 80273e4:	e78e      	b.n	8027304 <__sflush_r+0x1c>
 80273e6:	4407      	add	r7, r0
 80273e8:	eba8 0800 	sub.w	r8, r8, r0
 80273ec:	e7e9      	b.n	80273c2 <__sflush_r+0xda>
 80273ee:	bf00      	nop
 80273f0:	20400001 	.word	0x20400001

080273f4 <_fflush_r>:
 80273f4:	b538      	push	{r3, r4, r5, lr}
 80273f6:	690b      	ldr	r3, [r1, #16]
 80273f8:	4605      	mov	r5, r0
 80273fa:	460c      	mov	r4, r1
 80273fc:	b913      	cbnz	r3, 8027404 <_fflush_r+0x10>
 80273fe:	2500      	movs	r5, #0
 8027400:	4628      	mov	r0, r5
 8027402:	bd38      	pop	{r3, r4, r5, pc}
 8027404:	b118      	cbz	r0, 802740e <_fflush_r+0x1a>
 8027406:	6983      	ldr	r3, [r0, #24]
 8027408:	b90b      	cbnz	r3, 802740e <_fflush_r+0x1a>
 802740a:	f7fc fb63 	bl	8023ad4 <__sinit>
 802740e:	4b14      	ldr	r3, [pc, #80]	; (8027460 <_fflush_r+0x6c>)
 8027410:	429c      	cmp	r4, r3
 8027412:	d11b      	bne.n	802744c <_fflush_r+0x58>
 8027414:	686c      	ldr	r4, [r5, #4]
 8027416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802741a:	2b00      	cmp	r3, #0
 802741c:	d0ef      	beq.n	80273fe <_fflush_r+0xa>
 802741e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8027420:	07d0      	lsls	r0, r2, #31
 8027422:	d404      	bmi.n	802742e <_fflush_r+0x3a>
 8027424:	0599      	lsls	r1, r3, #22
 8027426:	d402      	bmi.n	802742e <_fflush_r+0x3a>
 8027428:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802742a:	f7fc fd29 	bl	8023e80 <__retarget_lock_acquire_recursive>
 802742e:	4628      	mov	r0, r5
 8027430:	4621      	mov	r1, r4
 8027432:	f7ff ff59 	bl	80272e8 <__sflush_r>
 8027436:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8027438:	07da      	lsls	r2, r3, #31
 802743a:	4605      	mov	r5, r0
 802743c:	d4e0      	bmi.n	8027400 <_fflush_r+0xc>
 802743e:	89a3      	ldrh	r3, [r4, #12]
 8027440:	059b      	lsls	r3, r3, #22
 8027442:	d4dd      	bmi.n	8027400 <_fflush_r+0xc>
 8027444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8027446:	f7fc fd1d 	bl	8023e84 <__retarget_lock_release_recursive>
 802744a:	e7d9      	b.n	8027400 <_fflush_r+0xc>
 802744c:	4b05      	ldr	r3, [pc, #20]	; (8027464 <_fflush_r+0x70>)
 802744e:	429c      	cmp	r4, r3
 8027450:	d101      	bne.n	8027456 <_fflush_r+0x62>
 8027452:	68ac      	ldr	r4, [r5, #8]
 8027454:	e7df      	b.n	8027416 <_fflush_r+0x22>
 8027456:	4b04      	ldr	r3, [pc, #16]	; (8027468 <_fflush_r+0x74>)
 8027458:	429c      	cmp	r4, r3
 802745a:	bf08      	it	eq
 802745c:	68ec      	ldreq	r4, [r5, #12]
 802745e:	e7da      	b.n	8027416 <_fflush_r+0x22>
 8027460:	080456a8 	.word	0x080456a8
 8027464:	080456c8 	.word	0x080456c8
 8027468:	08045688 	.word	0x08045688

0802746c <fiprintf>:
 802746c:	b40e      	push	{r1, r2, r3}
 802746e:	b503      	push	{r0, r1, lr}
 8027470:	4601      	mov	r1, r0
 8027472:	ab03      	add	r3, sp, #12
 8027474:	4805      	ldr	r0, [pc, #20]	; (802748c <fiprintf+0x20>)
 8027476:	f853 2b04 	ldr.w	r2, [r3], #4
 802747a:	6800      	ldr	r0, [r0, #0]
 802747c:	9301      	str	r3, [sp, #4]
 802747e:	f001 f879 	bl	8028574 <_vfiprintf_r>
 8027482:	b002      	add	sp, #8
 8027484:	f85d eb04 	ldr.w	lr, [sp], #4
 8027488:	b003      	add	sp, #12
 802748a:	4770      	bx	lr
 802748c:	2000046c 	.word	0x2000046c

08027490 <_findenv_r>:
 8027490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027494:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8027504 <_findenv_r+0x74>
 8027498:	4607      	mov	r7, r0
 802749a:	4689      	mov	r9, r1
 802749c:	4616      	mov	r6, r2
 802749e:	f001 fbe9 	bl	8028c74 <__env_lock>
 80274a2:	f8da 4000 	ldr.w	r4, [sl]
 80274a6:	b134      	cbz	r4, 80274b6 <_findenv_r+0x26>
 80274a8:	464b      	mov	r3, r9
 80274aa:	4698      	mov	r8, r3
 80274ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80274b0:	b13a      	cbz	r2, 80274c2 <_findenv_r+0x32>
 80274b2:	2a3d      	cmp	r2, #61	; 0x3d
 80274b4:	d1f9      	bne.n	80274aa <_findenv_r+0x1a>
 80274b6:	4638      	mov	r0, r7
 80274b8:	f001 fbe2 	bl	8028c80 <__env_unlock>
 80274bc:	2000      	movs	r0, #0
 80274be:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80274c2:	eba8 0809 	sub.w	r8, r8, r9
 80274c6:	46a3      	mov	fp, r4
 80274c8:	f854 0b04 	ldr.w	r0, [r4], #4
 80274cc:	2800      	cmp	r0, #0
 80274ce:	d0f2      	beq.n	80274b6 <_findenv_r+0x26>
 80274d0:	4642      	mov	r2, r8
 80274d2:	4649      	mov	r1, r9
 80274d4:	f7fe fc92 	bl	8025dfc <strncmp>
 80274d8:	2800      	cmp	r0, #0
 80274da:	d1f4      	bne.n	80274c6 <_findenv_r+0x36>
 80274dc:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80274e0:	eb03 0508 	add.w	r5, r3, r8
 80274e4:	f813 3008 	ldrb.w	r3, [r3, r8]
 80274e8:	2b3d      	cmp	r3, #61	; 0x3d
 80274ea:	d1ec      	bne.n	80274c6 <_findenv_r+0x36>
 80274ec:	f8da 3000 	ldr.w	r3, [sl]
 80274f0:	ebab 0303 	sub.w	r3, fp, r3
 80274f4:	109b      	asrs	r3, r3, #2
 80274f6:	4638      	mov	r0, r7
 80274f8:	6033      	str	r3, [r6, #0]
 80274fa:	f001 fbc1 	bl	8028c80 <__env_unlock>
 80274fe:	1c68      	adds	r0, r5, #1
 8027500:	e7dd      	b.n	80274be <_findenv_r+0x2e>
 8027502:	bf00      	nop
 8027504:	2000025c 	.word	0x2000025c

08027508 <_getenv_r>:
 8027508:	b507      	push	{r0, r1, r2, lr}
 802750a:	aa01      	add	r2, sp, #4
 802750c:	f7ff ffc0 	bl	8027490 <_findenv_r>
 8027510:	b003      	add	sp, #12
 8027512:	f85d fb04 	ldr.w	pc, [sp], #4
 8027516:	Address 0x0000000008027516 is out of bounds.


08027518 <__gettzinfo>:
 8027518:	4800      	ldr	r0, [pc, #0]	; (802751c <__gettzinfo+0x4>)
 802751a:	4770      	bx	lr
 802751c:	200004d8 	.word	0x200004d8

08027520 <gmtime_r>:
 8027520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027524:	e9d0 6700 	ldrd	r6, r7, [r0]
 8027528:	460c      	mov	r4, r1
 802752a:	4a4f      	ldr	r2, [pc, #316]	; (8027668 <gmtime_r+0x148>)
 802752c:	2300      	movs	r3, #0
 802752e:	4630      	mov	r0, r6
 8027530:	4639      	mov	r1, r7
 8027532:	f7d8 feed 	bl	8000310 <__aeabi_ldivmod>
 8027536:	4639      	mov	r1, r7
 8027538:	4605      	mov	r5, r0
 802753a:	4a4b      	ldr	r2, [pc, #300]	; (8027668 <gmtime_r+0x148>)
 802753c:	4630      	mov	r0, r6
 802753e:	2300      	movs	r3, #0
 8027540:	f7d8 fee6 	bl	8000310 <__aeabi_ldivmod>
 8027544:	2a00      	cmp	r2, #0
 8027546:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
 802754a:	bfb7      	itett	lt
 802754c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8027550:	f600 236c 	addwge	r3, r0, #2668	; 0xa6c
 8027554:	f600 236b 	addwlt	r3, r0, #2667	; 0xa6b
 8027558:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 802755c:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8027560:	fbb2 f1f0 	udiv	r1, r2, r0
 8027564:	fb00 2211 	mls	r2, r0, r1, r2
 8027568:	203c      	movs	r0, #60	; 0x3c
 802756a:	60a1      	str	r1, [r4, #8]
 802756c:	fbb2 f1f0 	udiv	r1, r2, r0
 8027570:	fb00 2211 	mls	r2, r0, r1, r2
 8027574:	6061      	str	r1, [r4, #4]
 8027576:	6022      	str	r2, [r4, #0]
 8027578:	2107      	movs	r1, #7
 802757a:	1cda      	adds	r2, r3, #3
 802757c:	fb92 f1f1 	sdiv	r1, r2, r1
 8027580:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8027584:	1a52      	subs	r2, r2, r1
 8027586:	bf48      	it	mi
 8027588:	3207      	addmi	r2, #7
 802758a:	4d38      	ldr	r5, [pc, #224]	; (802766c <gmtime_r+0x14c>)
 802758c:	4838      	ldr	r0, [pc, #224]	; (8027670 <gmtime_r+0x150>)
 802758e:	61a2      	str	r2, [r4, #24]
 8027590:	2b00      	cmp	r3, #0
 8027592:	bfb7      	itett	lt
 8027594:	f5a3 320e 	sublt.w	r2, r3, #145408	; 0x23800
 8027598:	fb93 f5f5 	sdivge	r5, r3, r5
 802759c:	f5a2 722c 	sublt.w	r2, r2, #688	; 0x2b0
 80275a0:	fb92 f5f5 	sdivlt	r5, r2, r5
 80275a4:	fb00 3005 	mla	r0, r0, r5, r3
 80275a8:	f648 62ac 	movw	r2, #36524	; 0x8eac
 80275ac:	fbb0 f2f2 	udiv	r2, r0, r2
 80275b0:	4402      	add	r2, r0
 80275b2:	f240 53b4 	movw	r3, #1460	; 0x5b4
 80275b6:	fbb0 f1f3 	udiv	r1, r0, r3
 80275ba:	1a52      	subs	r2, r2, r1
 80275bc:	f240 1c6d 	movw	ip, #365	; 0x16d
 80275c0:	492c      	ldr	r1, [pc, #176]	; (8027674 <gmtime_r+0x154>)
 80275c2:	fbb0 f1f1 	udiv	r1, r0, r1
 80275c6:	2764      	movs	r7, #100	; 0x64
 80275c8:	1a52      	subs	r2, r2, r1
 80275ca:	fbb2 f1fc 	udiv	r1, r2, ip
 80275ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80275d2:	fbb1 f6f7 	udiv	r6, r1, r7
 80275d6:	1af3      	subs	r3, r6, r3
 80275d8:	4403      	add	r3, r0
 80275da:	fb0c 3311 	mls	r3, ip, r1, r3
 80275de:	2299      	movs	r2, #153	; 0x99
 80275e0:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
 80275e4:	f10e 0e02 	add.w	lr, lr, #2
 80275e8:	f103 0c01 	add.w	ip, r3, #1
 80275ec:	fbbe f0f2 	udiv	r0, lr, r2
 80275f0:	4342      	muls	r2, r0
 80275f2:	3202      	adds	r2, #2
 80275f4:	f04f 0805 	mov.w	r8, #5
 80275f8:	fbb2 f2f8 	udiv	r2, r2, r8
 80275fc:	ebac 0c02 	sub.w	ip, ip, r2
 8027600:	f240 52f9 	movw	r2, #1529	; 0x5f9
 8027604:	4596      	cmp	lr, r2
 8027606:	bf94      	ite	ls
 8027608:	2202      	movls	r2, #2
 802760a:	f06f 0209 	mvnhi.w	r2, #9
 802760e:	4410      	add	r0, r2
 8027610:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8027614:	fb02 1505 	mla	r5, r2, r5, r1
 8027618:	2801      	cmp	r0, #1
 802761a:	bf98      	it	ls
 802761c:	3501      	addls	r5, #1
 802761e:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8027622:	d30d      	bcc.n	8027640 <gmtime_r+0x120>
 8027624:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8027628:	61e3      	str	r3, [r4, #28]
 802762a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 802762e:	2300      	movs	r3, #0
 8027630:	e9c4 0504 	strd	r0, r5, [r4, #16]
 8027634:	f8c4 c00c 	str.w	ip, [r4, #12]
 8027638:	6223      	str	r3, [r4, #32]
 802763a:	4620      	mov	r0, r4
 802763c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027640:	078a      	lsls	r2, r1, #30
 8027642:	d102      	bne.n	802764a <gmtime_r+0x12a>
 8027644:	fb07 1616 	mls	r6, r7, r6, r1
 8027648:	b95e      	cbnz	r6, 8027662 <gmtime_r+0x142>
 802764a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 802764e:	fbb1 f6f2 	udiv	r6, r1, r2
 8027652:	fb02 1216 	mls	r2, r2, r6, r1
 8027656:	fab2 f282 	clz	r2, r2
 802765a:	0952      	lsrs	r2, r2, #5
 802765c:	333b      	adds	r3, #59	; 0x3b
 802765e:	4413      	add	r3, r2
 8027660:	e7e2      	b.n	8027628 <gmtime_r+0x108>
 8027662:	2201      	movs	r2, #1
 8027664:	e7fa      	b.n	802765c <gmtime_r+0x13c>
 8027666:	bf00      	nop
 8027668:	00015180 	.word	0x00015180
 802766c:	00023ab1 	.word	0x00023ab1
 8027670:	fffdc54f 	.word	0xfffdc54f
 8027674:	00023ab0 	.word	0x00023ab0

08027678 <labs>:
 8027678:	2800      	cmp	r0, #0
 802767a:	bfb8      	it	lt
 802767c:	4240      	neglt	r0, r0
 802767e:	4770      	bx	lr

08027680 <_localeconv_r>:
 8027680:	4800      	ldr	r0, [pc, #0]	; (8027684 <_localeconv_r+0x4>)
 8027682:	4770      	bx	lr
 8027684:	20000620 	.word	0x20000620

08027688 <_lseek_r>:
 8027688:	b538      	push	{r3, r4, r5, lr}
 802768a:	4d07      	ldr	r5, [pc, #28]	; (80276a8 <_lseek_r+0x20>)
 802768c:	4604      	mov	r4, r0
 802768e:	4608      	mov	r0, r1
 8027690:	4611      	mov	r1, r2
 8027692:	2200      	movs	r2, #0
 8027694:	602a      	str	r2, [r5, #0]
 8027696:	461a      	mov	r2, r3
 8027698:	f7df fbe6 	bl	8006e68 <_lseek>
 802769c:	1c43      	adds	r3, r0, #1
 802769e:	d102      	bne.n	80276a6 <_lseek_r+0x1e>
 80276a0:	682b      	ldr	r3, [r5, #0]
 80276a2:	b103      	cbz	r3, 80276a6 <_lseek_r+0x1e>
 80276a4:	6023      	str	r3, [r4, #0]
 80276a6:	bd38      	pop	{r3, r4, r5, pc}
 80276a8:	2003002c 	.word	0x2003002c

080276ac <__swhatbuf_r>:
 80276ac:	b570      	push	{r4, r5, r6, lr}
 80276ae:	460e      	mov	r6, r1
 80276b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80276b4:	2900      	cmp	r1, #0
 80276b6:	b096      	sub	sp, #88	; 0x58
 80276b8:	4614      	mov	r4, r2
 80276ba:	461d      	mov	r5, r3
 80276bc:	da08      	bge.n	80276d0 <__swhatbuf_r+0x24>
 80276be:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80276c2:	2200      	movs	r2, #0
 80276c4:	602a      	str	r2, [r5, #0]
 80276c6:	061a      	lsls	r2, r3, #24
 80276c8:	d410      	bmi.n	80276ec <__swhatbuf_r+0x40>
 80276ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80276ce:	e00e      	b.n	80276ee <__swhatbuf_r+0x42>
 80276d0:	466a      	mov	r2, sp
 80276d2:	f001 fadb 	bl	8028c8c <_fstat_r>
 80276d6:	2800      	cmp	r0, #0
 80276d8:	dbf1      	blt.n	80276be <__swhatbuf_r+0x12>
 80276da:	9a01      	ldr	r2, [sp, #4]
 80276dc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80276e0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80276e4:	425a      	negs	r2, r3
 80276e6:	415a      	adcs	r2, r3
 80276e8:	602a      	str	r2, [r5, #0]
 80276ea:	e7ee      	b.n	80276ca <__swhatbuf_r+0x1e>
 80276ec:	2340      	movs	r3, #64	; 0x40
 80276ee:	2000      	movs	r0, #0
 80276f0:	6023      	str	r3, [r4, #0]
 80276f2:	b016      	add	sp, #88	; 0x58
 80276f4:	bd70      	pop	{r4, r5, r6, pc}
 80276f6:	Address 0x00000000080276f6 is out of bounds.


080276f8 <__smakebuf_r>:
 80276f8:	898b      	ldrh	r3, [r1, #12]
 80276fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80276fc:	079d      	lsls	r5, r3, #30
 80276fe:	4606      	mov	r6, r0
 8027700:	460c      	mov	r4, r1
 8027702:	d507      	bpl.n	8027714 <__smakebuf_r+0x1c>
 8027704:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8027708:	6023      	str	r3, [r4, #0]
 802770a:	6123      	str	r3, [r4, #16]
 802770c:	2301      	movs	r3, #1
 802770e:	6163      	str	r3, [r4, #20]
 8027710:	b002      	add	sp, #8
 8027712:	bd70      	pop	{r4, r5, r6, pc}
 8027714:	ab01      	add	r3, sp, #4
 8027716:	466a      	mov	r2, sp
 8027718:	f7ff ffc8 	bl	80276ac <__swhatbuf_r>
 802771c:	9900      	ldr	r1, [sp, #0]
 802771e:	4605      	mov	r5, r0
 8027720:	4630      	mov	r0, r6
 8027722:	f7fc fedf 	bl	80244e4 <_malloc_r>
 8027726:	b948      	cbnz	r0, 802773c <__smakebuf_r+0x44>
 8027728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802772c:	059a      	lsls	r2, r3, #22
 802772e:	d4ef      	bmi.n	8027710 <__smakebuf_r+0x18>
 8027730:	f023 0303 	bic.w	r3, r3, #3
 8027734:	f043 0302 	orr.w	r3, r3, #2
 8027738:	81a3      	strh	r3, [r4, #12]
 802773a:	e7e3      	b.n	8027704 <__smakebuf_r+0xc>
 802773c:	4b0d      	ldr	r3, [pc, #52]	; (8027774 <__smakebuf_r+0x7c>)
 802773e:	62b3      	str	r3, [r6, #40]	; 0x28
 8027740:	89a3      	ldrh	r3, [r4, #12]
 8027742:	6020      	str	r0, [r4, #0]
 8027744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027748:	81a3      	strh	r3, [r4, #12]
 802774a:	9b00      	ldr	r3, [sp, #0]
 802774c:	6163      	str	r3, [r4, #20]
 802774e:	9b01      	ldr	r3, [sp, #4]
 8027750:	6120      	str	r0, [r4, #16]
 8027752:	b15b      	cbz	r3, 802776c <__smakebuf_r+0x74>
 8027754:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027758:	4630      	mov	r0, r6
 802775a:	f001 faa9 	bl	8028cb0 <_isatty_r>
 802775e:	b128      	cbz	r0, 802776c <__smakebuf_r+0x74>
 8027760:	89a3      	ldrh	r3, [r4, #12]
 8027762:	f023 0303 	bic.w	r3, r3, #3
 8027766:	f043 0301 	orr.w	r3, r3, #1
 802776a:	81a3      	strh	r3, [r4, #12]
 802776c:	89a0      	ldrh	r0, [r4, #12]
 802776e:	4305      	orrs	r5, r0
 8027770:	81a5      	strh	r5, [r4, #12]
 8027772:	e7cd      	b.n	8027710 <__smakebuf_r+0x18>
 8027774:	08023a6d 	.word	0x08023a6d

08027778 <__malloc_lock>:
 8027778:	4801      	ldr	r0, [pc, #4]	; (8027780 <__malloc_lock+0x8>)
 802777a:	f7fc bb81 	b.w	8023e80 <__retarget_lock_acquire_recursive>
 802777e:	bf00      	nop
 8027780:	2003001d 	.word	0x2003001d

08027784 <__malloc_unlock>:
 8027784:	4801      	ldr	r0, [pc, #4]	; (802778c <__malloc_unlock+0x8>)
 8027786:	f7fc bb7d 	b.w	8023e84 <__retarget_lock_release_recursive>
 802778a:	bf00      	nop
 802778c:	2003001d 	.word	0x2003001d

08027790 <_Balloc>:
 8027790:	b570      	push	{r4, r5, r6, lr}
 8027792:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027794:	4604      	mov	r4, r0
 8027796:	460d      	mov	r5, r1
 8027798:	b976      	cbnz	r6, 80277b8 <_Balloc+0x28>
 802779a:	2010      	movs	r0, #16
 802779c:	f7fc fb74 	bl	8023e88 <malloc>
 80277a0:	4602      	mov	r2, r0
 80277a2:	6260      	str	r0, [r4, #36]	; 0x24
 80277a4:	b920      	cbnz	r0, 80277b0 <_Balloc+0x20>
 80277a6:	4b18      	ldr	r3, [pc, #96]	; (8027808 <_Balloc+0x78>)
 80277a8:	4818      	ldr	r0, [pc, #96]	; (802780c <_Balloc+0x7c>)
 80277aa:	2166      	movs	r1, #102	; 0x66
 80277ac:	f7fe ff58 	bl	8026660 <__assert_func>
 80277b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80277b4:	6006      	str	r6, [r0, #0]
 80277b6:	60c6      	str	r6, [r0, #12]
 80277b8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80277ba:	68f3      	ldr	r3, [r6, #12]
 80277bc:	b183      	cbz	r3, 80277e0 <_Balloc+0x50>
 80277be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80277c0:	68db      	ldr	r3, [r3, #12]
 80277c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80277c6:	b9b8      	cbnz	r0, 80277f8 <_Balloc+0x68>
 80277c8:	2101      	movs	r1, #1
 80277ca:	fa01 f605 	lsl.w	r6, r1, r5
 80277ce:	1d72      	adds	r2, r6, #5
 80277d0:	0092      	lsls	r2, r2, #2
 80277d2:	4620      	mov	r0, r4
 80277d4:	f000 fb60 	bl	8027e98 <_calloc_r>
 80277d8:	b160      	cbz	r0, 80277f4 <_Balloc+0x64>
 80277da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80277de:	e00e      	b.n	80277fe <_Balloc+0x6e>
 80277e0:	2221      	movs	r2, #33	; 0x21
 80277e2:	2104      	movs	r1, #4
 80277e4:	4620      	mov	r0, r4
 80277e6:	f000 fb57 	bl	8027e98 <_calloc_r>
 80277ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80277ec:	60f0      	str	r0, [r6, #12]
 80277ee:	68db      	ldr	r3, [r3, #12]
 80277f0:	2b00      	cmp	r3, #0
 80277f2:	d1e4      	bne.n	80277be <_Balloc+0x2e>
 80277f4:	2000      	movs	r0, #0
 80277f6:	bd70      	pop	{r4, r5, r6, pc}
 80277f8:	6802      	ldr	r2, [r0, #0]
 80277fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80277fe:	2300      	movs	r3, #0
 8027800:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8027804:	e7f7      	b.n	80277f6 <_Balloc+0x66>
 8027806:	bf00      	nop
 8027808:	080456ec 	.word	0x080456ec
 802780c:	08045c21 	.word	0x08045c21

08027810 <_Bfree>:
 8027810:	b570      	push	{r4, r5, r6, lr}
 8027812:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8027814:	4605      	mov	r5, r0
 8027816:	460c      	mov	r4, r1
 8027818:	b976      	cbnz	r6, 8027838 <_Bfree+0x28>
 802781a:	2010      	movs	r0, #16
 802781c:	f7fc fb34 	bl	8023e88 <malloc>
 8027820:	4602      	mov	r2, r0
 8027822:	6268      	str	r0, [r5, #36]	; 0x24
 8027824:	b920      	cbnz	r0, 8027830 <_Bfree+0x20>
 8027826:	4b09      	ldr	r3, [pc, #36]	; (802784c <_Bfree+0x3c>)
 8027828:	4809      	ldr	r0, [pc, #36]	; (8027850 <_Bfree+0x40>)
 802782a:	218a      	movs	r1, #138	; 0x8a
 802782c:	f7fe ff18 	bl	8026660 <__assert_func>
 8027830:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8027834:	6006      	str	r6, [r0, #0]
 8027836:	60c6      	str	r6, [r0, #12]
 8027838:	b13c      	cbz	r4, 802784a <_Bfree+0x3a>
 802783a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 802783c:	6862      	ldr	r2, [r4, #4]
 802783e:	68db      	ldr	r3, [r3, #12]
 8027840:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8027844:	6021      	str	r1, [r4, #0]
 8027846:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802784a:	bd70      	pop	{r4, r5, r6, pc}
 802784c:	080456ec 	.word	0x080456ec
 8027850:	08045c21 	.word	0x08045c21

08027854 <__multadd>:
 8027854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027858:	690d      	ldr	r5, [r1, #16]
 802785a:	4607      	mov	r7, r0
 802785c:	460c      	mov	r4, r1
 802785e:	461e      	mov	r6, r3
 8027860:	f101 0c14 	add.w	ip, r1, #20
 8027864:	2000      	movs	r0, #0
 8027866:	f8dc 3000 	ldr.w	r3, [ip]
 802786a:	b299      	uxth	r1, r3
 802786c:	fb02 6101 	mla	r1, r2, r1, r6
 8027870:	0c1e      	lsrs	r6, r3, #16
 8027872:	0c0b      	lsrs	r3, r1, #16
 8027874:	fb02 3306 	mla	r3, r2, r6, r3
 8027878:	b289      	uxth	r1, r1
 802787a:	3001      	adds	r0, #1
 802787c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8027880:	4285      	cmp	r5, r0
 8027882:	f84c 1b04 	str.w	r1, [ip], #4
 8027886:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802788a:	dcec      	bgt.n	8027866 <__multadd+0x12>
 802788c:	b30e      	cbz	r6, 80278d2 <__multadd+0x7e>
 802788e:	68a3      	ldr	r3, [r4, #8]
 8027890:	42ab      	cmp	r3, r5
 8027892:	dc19      	bgt.n	80278c8 <__multadd+0x74>
 8027894:	6861      	ldr	r1, [r4, #4]
 8027896:	4638      	mov	r0, r7
 8027898:	3101      	adds	r1, #1
 802789a:	f7ff ff79 	bl	8027790 <_Balloc>
 802789e:	4680      	mov	r8, r0
 80278a0:	b928      	cbnz	r0, 80278ae <__multadd+0x5a>
 80278a2:	4602      	mov	r2, r0
 80278a4:	4b0c      	ldr	r3, [pc, #48]	; (80278d8 <__multadd+0x84>)
 80278a6:	480d      	ldr	r0, [pc, #52]	; (80278dc <__multadd+0x88>)
 80278a8:	21b5      	movs	r1, #181	; 0xb5
 80278aa:	f7fe fed9 	bl	8026660 <__assert_func>
 80278ae:	6922      	ldr	r2, [r4, #16]
 80278b0:	3202      	adds	r2, #2
 80278b2:	f104 010c 	add.w	r1, r4, #12
 80278b6:	0092      	lsls	r2, r2, #2
 80278b8:	300c      	adds	r0, #12
 80278ba:	f7fc fb05 	bl	8023ec8 <memcpy>
 80278be:	4621      	mov	r1, r4
 80278c0:	4638      	mov	r0, r7
 80278c2:	f7ff ffa5 	bl	8027810 <_Bfree>
 80278c6:	4644      	mov	r4, r8
 80278c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80278cc:	3501      	adds	r5, #1
 80278ce:	615e      	str	r6, [r3, #20]
 80278d0:	6125      	str	r5, [r4, #16]
 80278d2:	4620      	mov	r0, r4
 80278d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80278d8:	08045c10 	.word	0x08045c10
 80278dc:	08045c21 	.word	0x08045c21

080278e0 <__hi0bits>:
 80278e0:	0c03      	lsrs	r3, r0, #16
 80278e2:	041b      	lsls	r3, r3, #16
 80278e4:	b9d3      	cbnz	r3, 802791c <__hi0bits+0x3c>
 80278e6:	0400      	lsls	r0, r0, #16
 80278e8:	2310      	movs	r3, #16
 80278ea:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80278ee:	bf04      	itt	eq
 80278f0:	0200      	lsleq	r0, r0, #8
 80278f2:	3308      	addeq	r3, #8
 80278f4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80278f8:	bf04      	itt	eq
 80278fa:	0100      	lsleq	r0, r0, #4
 80278fc:	3304      	addeq	r3, #4
 80278fe:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8027902:	bf04      	itt	eq
 8027904:	0080      	lsleq	r0, r0, #2
 8027906:	3302      	addeq	r3, #2
 8027908:	2800      	cmp	r0, #0
 802790a:	db05      	blt.n	8027918 <__hi0bits+0x38>
 802790c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8027910:	f103 0301 	add.w	r3, r3, #1
 8027914:	bf08      	it	eq
 8027916:	2320      	moveq	r3, #32
 8027918:	4618      	mov	r0, r3
 802791a:	4770      	bx	lr
 802791c:	2300      	movs	r3, #0
 802791e:	e7e4      	b.n	80278ea <__hi0bits+0xa>

08027920 <__lo0bits>:
 8027920:	6803      	ldr	r3, [r0, #0]
 8027922:	f013 0207 	ands.w	r2, r3, #7
 8027926:	4601      	mov	r1, r0
 8027928:	d00b      	beq.n	8027942 <__lo0bits+0x22>
 802792a:	07da      	lsls	r2, r3, #31
 802792c:	d423      	bmi.n	8027976 <__lo0bits+0x56>
 802792e:	0798      	lsls	r0, r3, #30
 8027930:	bf49      	itett	mi
 8027932:	085b      	lsrmi	r3, r3, #1
 8027934:	089b      	lsrpl	r3, r3, #2
 8027936:	2001      	movmi	r0, #1
 8027938:	600b      	strmi	r3, [r1, #0]
 802793a:	bf5c      	itt	pl
 802793c:	600b      	strpl	r3, [r1, #0]
 802793e:	2002      	movpl	r0, #2
 8027940:	4770      	bx	lr
 8027942:	b298      	uxth	r0, r3
 8027944:	b9a8      	cbnz	r0, 8027972 <__lo0bits+0x52>
 8027946:	0c1b      	lsrs	r3, r3, #16
 8027948:	2010      	movs	r0, #16
 802794a:	b2da      	uxtb	r2, r3
 802794c:	b90a      	cbnz	r2, 8027952 <__lo0bits+0x32>
 802794e:	3008      	adds	r0, #8
 8027950:	0a1b      	lsrs	r3, r3, #8
 8027952:	071a      	lsls	r2, r3, #28
 8027954:	bf04      	itt	eq
 8027956:	091b      	lsreq	r3, r3, #4
 8027958:	3004      	addeq	r0, #4
 802795a:	079a      	lsls	r2, r3, #30
 802795c:	bf04      	itt	eq
 802795e:	089b      	lsreq	r3, r3, #2
 8027960:	3002      	addeq	r0, #2
 8027962:	07da      	lsls	r2, r3, #31
 8027964:	d403      	bmi.n	802796e <__lo0bits+0x4e>
 8027966:	085b      	lsrs	r3, r3, #1
 8027968:	f100 0001 	add.w	r0, r0, #1
 802796c:	d005      	beq.n	802797a <__lo0bits+0x5a>
 802796e:	600b      	str	r3, [r1, #0]
 8027970:	4770      	bx	lr
 8027972:	4610      	mov	r0, r2
 8027974:	e7e9      	b.n	802794a <__lo0bits+0x2a>
 8027976:	2000      	movs	r0, #0
 8027978:	4770      	bx	lr
 802797a:	2020      	movs	r0, #32
 802797c:	4770      	bx	lr
 802797e:	Address 0x000000000802797e is out of bounds.


08027980 <__i2b>:
 8027980:	b510      	push	{r4, lr}
 8027982:	460c      	mov	r4, r1
 8027984:	2101      	movs	r1, #1
 8027986:	f7ff ff03 	bl	8027790 <_Balloc>
 802798a:	4602      	mov	r2, r0
 802798c:	b928      	cbnz	r0, 802799a <__i2b+0x1a>
 802798e:	4b05      	ldr	r3, [pc, #20]	; (80279a4 <__i2b+0x24>)
 8027990:	4805      	ldr	r0, [pc, #20]	; (80279a8 <__i2b+0x28>)
 8027992:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8027996:	f7fe fe63 	bl	8026660 <__assert_func>
 802799a:	2301      	movs	r3, #1
 802799c:	6144      	str	r4, [r0, #20]
 802799e:	6103      	str	r3, [r0, #16]
 80279a0:	bd10      	pop	{r4, pc}
 80279a2:	bf00      	nop
 80279a4:	08045c10 	.word	0x08045c10
 80279a8:	08045c21 	.word	0x08045c21

080279ac <__multiply>:
 80279ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80279b0:	4691      	mov	r9, r2
 80279b2:	690a      	ldr	r2, [r1, #16]
 80279b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80279b8:	429a      	cmp	r2, r3
 80279ba:	bfb8      	it	lt
 80279bc:	460b      	movlt	r3, r1
 80279be:	460c      	mov	r4, r1
 80279c0:	bfbc      	itt	lt
 80279c2:	464c      	movlt	r4, r9
 80279c4:	4699      	movlt	r9, r3
 80279c6:	6927      	ldr	r7, [r4, #16]
 80279c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80279cc:	68a3      	ldr	r3, [r4, #8]
 80279ce:	6861      	ldr	r1, [r4, #4]
 80279d0:	eb07 060a 	add.w	r6, r7, sl
 80279d4:	42b3      	cmp	r3, r6
 80279d6:	b085      	sub	sp, #20
 80279d8:	bfb8      	it	lt
 80279da:	3101      	addlt	r1, #1
 80279dc:	f7ff fed8 	bl	8027790 <_Balloc>
 80279e0:	b930      	cbnz	r0, 80279f0 <__multiply+0x44>
 80279e2:	4602      	mov	r2, r0
 80279e4:	4b44      	ldr	r3, [pc, #272]	; (8027af8 <__multiply+0x14c>)
 80279e6:	4845      	ldr	r0, [pc, #276]	; (8027afc <__multiply+0x150>)
 80279e8:	f240 115d 	movw	r1, #349	; 0x15d
 80279ec:	f7fe fe38 	bl	8026660 <__assert_func>
 80279f0:	f100 0514 	add.w	r5, r0, #20
 80279f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80279f8:	462b      	mov	r3, r5
 80279fa:	2200      	movs	r2, #0
 80279fc:	4543      	cmp	r3, r8
 80279fe:	d321      	bcc.n	8027a44 <__multiply+0x98>
 8027a00:	f104 0314 	add.w	r3, r4, #20
 8027a04:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8027a08:	f109 0314 	add.w	r3, r9, #20
 8027a0c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8027a10:	9202      	str	r2, [sp, #8]
 8027a12:	1b3a      	subs	r2, r7, r4
 8027a14:	3a15      	subs	r2, #21
 8027a16:	f022 0203 	bic.w	r2, r2, #3
 8027a1a:	3204      	adds	r2, #4
 8027a1c:	f104 0115 	add.w	r1, r4, #21
 8027a20:	428f      	cmp	r7, r1
 8027a22:	bf38      	it	cc
 8027a24:	2204      	movcc	r2, #4
 8027a26:	9201      	str	r2, [sp, #4]
 8027a28:	9a02      	ldr	r2, [sp, #8]
 8027a2a:	9303      	str	r3, [sp, #12]
 8027a2c:	429a      	cmp	r2, r3
 8027a2e:	d80c      	bhi.n	8027a4a <__multiply+0x9e>
 8027a30:	2e00      	cmp	r6, #0
 8027a32:	dd03      	ble.n	8027a3c <__multiply+0x90>
 8027a34:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8027a38:	2b00      	cmp	r3, #0
 8027a3a:	d05a      	beq.n	8027af2 <__multiply+0x146>
 8027a3c:	6106      	str	r6, [r0, #16]
 8027a3e:	b005      	add	sp, #20
 8027a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027a44:	f843 2b04 	str.w	r2, [r3], #4
 8027a48:	e7d8      	b.n	80279fc <__multiply+0x50>
 8027a4a:	f8b3 a000 	ldrh.w	sl, [r3]
 8027a4e:	f1ba 0f00 	cmp.w	sl, #0
 8027a52:	d024      	beq.n	8027a9e <__multiply+0xf2>
 8027a54:	f104 0e14 	add.w	lr, r4, #20
 8027a58:	46a9      	mov	r9, r5
 8027a5a:	f04f 0c00 	mov.w	ip, #0
 8027a5e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8027a62:	f8d9 1000 	ldr.w	r1, [r9]
 8027a66:	fa1f fb82 	uxth.w	fp, r2
 8027a6a:	b289      	uxth	r1, r1
 8027a6c:	fb0a 110b 	mla	r1, sl, fp, r1
 8027a70:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8027a74:	f8d9 2000 	ldr.w	r2, [r9]
 8027a78:	4461      	add	r1, ip
 8027a7a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027a7e:	fb0a c20b 	mla	r2, sl, fp, ip
 8027a82:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8027a86:	b289      	uxth	r1, r1
 8027a88:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8027a8c:	4577      	cmp	r7, lr
 8027a8e:	f849 1b04 	str.w	r1, [r9], #4
 8027a92:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8027a96:	d8e2      	bhi.n	8027a5e <__multiply+0xb2>
 8027a98:	9a01      	ldr	r2, [sp, #4]
 8027a9a:	f845 c002 	str.w	ip, [r5, r2]
 8027a9e:	9a03      	ldr	r2, [sp, #12]
 8027aa0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8027aa4:	3304      	adds	r3, #4
 8027aa6:	f1b9 0f00 	cmp.w	r9, #0
 8027aaa:	d020      	beq.n	8027aee <__multiply+0x142>
 8027aac:	6829      	ldr	r1, [r5, #0]
 8027aae:	f104 0c14 	add.w	ip, r4, #20
 8027ab2:	46ae      	mov	lr, r5
 8027ab4:	f04f 0a00 	mov.w	sl, #0
 8027ab8:	f8bc b000 	ldrh.w	fp, [ip]
 8027abc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8027ac0:	fb09 220b 	mla	r2, r9, fp, r2
 8027ac4:	4492      	add	sl, r2
 8027ac6:	b289      	uxth	r1, r1
 8027ac8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8027acc:	f84e 1b04 	str.w	r1, [lr], #4
 8027ad0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8027ad4:	f8be 1000 	ldrh.w	r1, [lr]
 8027ad8:	0c12      	lsrs	r2, r2, #16
 8027ada:	fb09 1102 	mla	r1, r9, r2, r1
 8027ade:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8027ae2:	4567      	cmp	r7, ip
 8027ae4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8027ae8:	d8e6      	bhi.n	8027ab8 <__multiply+0x10c>
 8027aea:	9a01      	ldr	r2, [sp, #4]
 8027aec:	50a9      	str	r1, [r5, r2]
 8027aee:	3504      	adds	r5, #4
 8027af0:	e79a      	b.n	8027a28 <__multiply+0x7c>
 8027af2:	3e01      	subs	r6, #1
 8027af4:	e79c      	b.n	8027a30 <__multiply+0x84>
 8027af6:	bf00      	nop
 8027af8:	08045c10 	.word	0x08045c10
 8027afc:	08045c21 	.word	0x08045c21

08027b00 <__pow5mult>:
 8027b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8027b04:	4615      	mov	r5, r2
 8027b06:	f012 0203 	ands.w	r2, r2, #3
 8027b0a:	4606      	mov	r6, r0
 8027b0c:	460f      	mov	r7, r1
 8027b0e:	d007      	beq.n	8027b20 <__pow5mult+0x20>
 8027b10:	4c25      	ldr	r4, [pc, #148]	; (8027ba8 <__pow5mult+0xa8>)
 8027b12:	3a01      	subs	r2, #1
 8027b14:	2300      	movs	r3, #0
 8027b16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8027b1a:	f7ff fe9b 	bl	8027854 <__multadd>
 8027b1e:	4607      	mov	r7, r0
 8027b20:	10ad      	asrs	r5, r5, #2
 8027b22:	d03d      	beq.n	8027ba0 <__pow5mult+0xa0>
 8027b24:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8027b26:	b97c      	cbnz	r4, 8027b48 <__pow5mult+0x48>
 8027b28:	2010      	movs	r0, #16
 8027b2a:	f7fc f9ad 	bl	8023e88 <malloc>
 8027b2e:	4602      	mov	r2, r0
 8027b30:	6270      	str	r0, [r6, #36]	; 0x24
 8027b32:	b928      	cbnz	r0, 8027b40 <__pow5mult+0x40>
 8027b34:	4b1d      	ldr	r3, [pc, #116]	; (8027bac <__pow5mult+0xac>)
 8027b36:	481e      	ldr	r0, [pc, #120]	; (8027bb0 <__pow5mult+0xb0>)
 8027b38:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8027b3c:	f7fe fd90 	bl	8026660 <__assert_func>
 8027b40:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8027b44:	6004      	str	r4, [r0, #0]
 8027b46:	60c4      	str	r4, [r0, #12]
 8027b48:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8027b4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8027b50:	b94c      	cbnz	r4, 8027b66 <__pow5mult+0x66>
 8027b52:	f240 2171 	movw	r1, #625	; 0x271
 8027b56:	4630      	mov	r0, r6
 8027b58:	f7ff ff12 	bl	8027980 <__i2b>
 8027b5c:	2300      	movs	r3, #0
 8027b5e:	f8c8 0008 	str.w	r0, [r8, #8]
 8027b62:	4604      	mov	r4, r0
 8027b64:	6003      	str	r3, [r0, #0]
 8027b66:	f04f 0900 	mov.w	r9, #0
 8027b6a:	07eb      	lsls	r3, r5, #31
 8027b6c:	d50a      	bpl.n	8027b84 <__pow5mult+0x84>
 8027b6e:	4639      	mov	r1, r7
 8027b70:	4622      	mov	r2, r4
 8027b72:	4630      	mov	r0, r6
 8027b74:	f7ff ff1a 	bl	80279ac <__multiply>
 8027b78:	4639      	mov	r1, r7
 8027b7a:	4680      	mov	r8, r0
 8027b7c:	4630      	mov	r0, r6
 8027b7e:	f7ff fe47 	bl	8027810 <_Bfree>
 8027b82:	4647      	mov	r7, r8
 8027b84:	106d      	asrs	r5, r5, #1
 8027b86:	d00b      	beq.n	8027ba0 <__pow5mult+0xa0>
 8027b88:	6820      	ldr	r0, [r4, #0]
 8027b8a:	b938      	cbnz	r0, 8027b9c <__pow5mult+0x9c>
 8027b8c:	4622      	mov	r2, r4
 8027b8e:	4621      	mov	r1, r4
 8027b90:	4630      	mov	r0, r6
 8027b92:	f7ff ff0b 	bl	80279ac <__multiply>
 8027b96:	6020      	str	r0, [r4, #0]
 8027b98:	f8c0 9000 	str.w	r9, [r0]
 8027b9c:	4604      	mov	r4, r0
 8027b9e:	e7e4      	b.n	8027b6a <__pow5mult+0x6a>
 8027ba0:	4638      	mov	r0, r7
 8027ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8027ba6:	bf00      	nop
 8027ba8:	08045d70 	.word	0x08045d70
 8027bac:	080456ec 	.word	0x080456ec
 8027bb0:	08045c21 	.word	0x08045c21

08027bb4 <__lshift>:
 8027bb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027bb8:	460c      	mov	r4, r1
 8027bba:	6849      	ldr	r1, [r1, #4]
 8027bbc:	6923      	ldr	r3, [r4, #16]
 8027bbe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8027bc2:	68a3      	ldr	r3, [r4, #8]
 8027bc4:	4607      	mov	r7, r0
 8027bc6:	4691      	mov	r9, r2
 8027bc8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8027bcc:	f108 0601 	add.w	r6, r8, #1
 8027bd0:	42b3      	cmp	r3, r6
 8027bd2:	db0b      	blt.n	8027bec <__lshift+0x38>
 8027bd4:	4638      	mov	r0, r7
 8027bd6:	f7ff fddb 	bl	8027790 <_Balloc>
 8027bda:	4605      	mov	r5, r0
 8027bdc:	b948      	cbnz	r0, 8027bf2 <__lshift+0x3e>
 8027bde:	4602      	mov	r2, r0
 8027be0:	4b2a      	ldr	r3, [pc, #168]	; (8027c8c <__lshift+0xd8>)
 8027be2:	482b      	ldr	r0, [pc, #172]	; (8027c90 <__lshift+0xdc>)
 8027be4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8027be8:	f7fe fd3a 	bl	8026660 <__assert_func>
 8027bec:	3101      	adds	r1, #1
 8027bee:	005b      	lsls	r3, r3, #1
 8027bf0:	e7ee      	b.n	8027bd0 <__lshift+0x1c>
 8027bf2:	2300      	movs	r3, #0
 8027bf4:	f100 0114 	add.w	r1, r0, #20
 8027bf8:	f100 0210 	add.w	r2, r0, #16
 8027bfc:	4618      	mov	r0, r3
 8027bfe:	4553      	cmp	r3, sl
 8027c00:	db37      	blt.n	8027c72 <__lshift+0xbe>
 8027c02:	6920      	ldr	r0, [r4, #16]
 8027c04:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8027c08:	f104 0314 	add.w	r3, r4, #20
 8027c0c:	f019 091f 	ands.w	r9, r9, #31
 8027c10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8027c14:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8027c18:	d02f      	beq.n	8027c7a <__lshift+0xc6>
 8027c1a:	f1c9 0e20 	rsb	lr, r9, #32
 8027c1e:	468a      	mov	sl, r1
 8027c20:	f04f 0c00 	mov.w	ip, #0
 8027c24:	681a      	ldr	r2, [r3, #0]
 8027c26:	fa02 f209 	lsl.w	r2, r2, r9
 8027c2a:	ea42 020c 	orr.w	r2, r2, ip
 8027c2e:	f84a 2b04 	str.w	r2, [sl], #4
 8027c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c36:	4298      	cmp	r0, r3
 8027c38:	fa22 fc0e 	lsr.w	ip, r2, lr
 8027c3c:	d8f2      	bhi.n	8027c24 <__lshift+0x70>
 8027c3e:	1b03      	subs	r3, r0, r4
 8027c40:	3b15      	subs	r3, #21
 8027c42:	f023 0303 	bic.w	r3, r3, #3
 8027c46:	3304      	adds	r3, #4
 8027c48:	f104 0215 	add.w	r2, r4, #21
 8027c4c:	4290      	cmp	r0, r2
 8027c4e:	bf38      	it	cc
 8027c50:	2304      	movcc	r3, #4
 8027c52:	f841 c003 	str.w	ip, [r1, r3]
 8027c56:	f1bc 0f00 	cmp.w	ip, #0
 8027c5a:	d001      	beq.n	8027c60 <__lshift+0xac>
 8027c5c:	f108 0602 	add.w	r6, r8, #2
 8027c60:	3e01      	subs	r6, #1
 8027c62:	4638      	mov	r0, r7
 8027c64:	612e      	str	r6, [r5, #16]
 8027c66:	4621      	mov	r1, r4
 8027c68:	f7ff fdd2 	bl	8027810 <_Bfree>
 8027c6c:	4628      	mov	r0, r5
 8027c6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027c72:	f842 0f04 	str.w	r0, [r2, #4]!
 8027c76:	3301      	adds	r3, #1
 8027c78:	e7c1      	b.n	8027bfe <__lshift+0x4a>
 8027c7a:	3904      	subs	r1, #4
 8027c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8027c80:	f841 2f04 	str.w	r2, [r1, #4]!
 8027c84:	4298      	cmp	r0, r3
 8027c86:	d8f9      	bhi.n	8027c7c <__lshift+0xc8>
 8027c88:	e7ea      	b.n	8027c60 <__lshift+0xac>
 8027c8a:	bf00      	nop
 8027c8c:	08045c10 	.word	0x08045c10
 8027c90:	08045c21 	.word	0x08045c21

08027c94 <__mcmp>:
 8027c94:	b530      	push	{r4, r5, lr}
 8027c96:	6902      	ldr	r2, [r0, #16]
 8027c98:	690c      	ldr	r4, [r1, #16]
 8027c9a:	1b12      	subs	r2, r2, r4
 8027c9c:	d10e      	bne.n	8027cbc <__mcmp+0x28>
 8027c9e:	f100 0314 	add.w	r3, r0, #20
 8027ca2:	3114      	adds	r1, #20
 8027ca4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8027ca8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8027cac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8027cb0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8027cb4:	42a5      	cmp	r5, r4
 8027cb6:	d003      	beq.n	8027cc0 <__mcmp+0x2c>
 8027cb8:	d305      	bcc.n	8027cc6 <__mcmp+0x32>
 8027cba:	2201      	movs	r2, #1
 8027cbc:	4610      	mov	r0, r2
 8027cbe:	bd30      	pop	{r4, r5, pc}
 8027cc0:	4283      	cmp	r3, r0
 8027cc2:	d3f3      	bcc.n	8027cac <__mcmp+0x18>
 8027cc4:	e7fa      	b.n	8027cbc <__mcmp+0x28>
 8027cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8027cca:	e7f7      	b.n	8027cbc <__mcmp+0x28>

08027ccc <__mdiff>:
 8027ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027cd0:	460c      	mov	r4, r1
 8027cd2:	4606      	mov	r6, r0
 8027cd4:	4611      	mov	r1, r2
 8027cd6:	4620      	mov	r0, r4
 8027cd8:	4690      	mov	r8, r2
 8027cda:	f7ff ffdb 	bl	8027c94 <__mcmp>
 8027cde:	1e05      	subs	r5, r0, #0
 8027ce0:	d110      	bne.n	8027d04 <__mdiff+0x38>
 8027ce2:	4629      	mov	r1, r5
 8027ce4:	4630      	mov	r0, r6
 8027ce6:	f7ff fd53 	bl	8027790 <_Balloc>
 8027cea:	b930      	cbnz	r0, 8027cfa <__mdiff+0x2e>
 8027cec:	4b3a      	ldr	r3, [pc, #232]	; (8027dd8 <__mdiff+0x10c>)
 8027cee:	4602      	mov	r2, r0
 8027cf0:	f240 2132 	movw	r1, #562	; 0x232
 8027cf4:	4839      	ldr	r0, [pc, #228]	; (8027ddc <__mdiff+0x110>)
 8027cf6:	f7fe fcb3 	bl	8026660 <__assert_func>
 8027cfa:	2301      	movs	r3, #1
 8027cfc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8027d00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8027d04:	bfa4      	itt	ge
 8027d06:	4643      	movge	r3, r8
 8027d08:	46a0      	movge	r8, r4
 8027d0a:	4630      	mov	r0, r6
 8027d0c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8027d10:	bfa6      	itte	ge
 8027d12:	461c      	movge	r4, r3
 8027d14:	2500      	movge	r5, #0
 8027d16:	2501      	movlt	r5, #1
 8027d18:	f7ff fd3a 	bl	8027790 <_Balloc>
 8027d1c:	b920      	cbnz	r0, 8027d28 <__mdiff+0x5c>
 8027d1e:	4b2e      	ldr	r3, [pc, #184]	; (8027dd8 <__mdiff+0x10c>)
 8027d20:	4602      	mov	r2, r0
 8027d22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8027d26:	e7e5      	b.n	8027cf4 <__mdiff+0x28>
 8027d28:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8027d2c:	6926      	ldr	r6, [r4, #16]
 8027d2e:	60c5      	str	r5, [r0, #12]
 8027d30:	f104 0914 	add.w	r9, r4, #20
 8027d34:	f108 0514 	add.w	r5, r8, #20
 8027d38:	f100 0e14 	add.w	lr, r0, #20
 8027d3c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8027d40:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8027d44:	f108 0210 	add.w	r2, r8, #16
 8027d48:	46f2      	mov	sl, lr
 8027d4a:	2100      	movs	r1, #0
 8027d4c:	f859 3b04 	ldr.w	r3, [r9], #4
 8027d50:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8027d54:	fa1f f883 	uxth.w	r8, r3
 8027d58:	fa11 f18b 	uxtah	r1, r1, fp
 8027d5c:	0c1b      	lsrs	r3, r3, #16
 8027d5e:	eba1 0808 	sub.w	r8, r1, r8
 8027d62:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8027d66:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8027d6a:	fa1f f888 	uxth.w	r8, r8
 8027d6e:	1419      	asrs	r1, r3, #16
 8027d70:	454e      	cmp	r6, r9
 8027d72:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8027d76:	f84a 3b04 	str.w	r3, [sl], #4
 8027d7a:	d8e7      	bhi.n	8027d4c <__mdiff+0x80>
 8027d7c:	1b33      	subs	r3, r6, r4
 8027d7e:	3b15      	subs	r3, #21
 8027d80:	f023 0303 	bic.w	r3, r3, #3
 8027d84:	3304      	adds	r3, #4
 8027d86:	3415      	adds	r4, #21
 8027d88:	42a6      	cmp	r6, r4
 8027d8a:	bf38      	it	cc
 8027d8c:	2304      	movcc	r3, #4
 8027d8e:	441d      	add	r5, r3
 8027d90:	4473      	add	r3, lr
 8027d92:	469e      	mov	lr, r3
 8027d94:	462e      	mov	r6, r5
 8027d96:	4566      	cmp	r6, ip
 8027d98:	d30e      	bcc.n	8027db8 <__mdiff+0xec>
 8027d9a:	f10c 0203 	add.w	r2, ip, #3
 8027d9e:	1b52      	subs	r2, r2, r5
 8027da0:	f022 0203 	bic.w	r2, r2, #3
 8027da4:	3d03      	subs	r5, #3
 8027da6:	45ac      	cmp	ip, r5
 8027da8:	bf38      	it	cc
 8027daa:	2200      	movcc	r2, #0
 8027dac:	441a      	add	r2, r3
 8027dae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8027db2:	b17b      	cbz	r3, 8027dd4 <__mdiff+0x108>
 8027db4:	6107      	str	r7, [r0, #16]
 8027db6:	e7a3      	b.n	8027d00 <__mdiff+0x34>
 8027db8:	f856 8b04 	ldr.w	r8, [r6], #4
 8027dbc:	fa11 f288 	uxtah	r2, r1, r8
 8027dc0:	1414      	asrs	r4, r2, #16
 8027dc2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8027dc6:	b292      	uxth	r2, r2
 8027dc8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8027dcc:	f84e 2b04 	str.w	r2, [lr], #4
 8027dd0:	1421      	asrs	r1, r4, #16
 8027dd2:	e7e0      	b.n	8027d96 <__mdiff+0xca>
 8027dd4:	3f01      	subs	r7, #1
 8027dd6:	e7ea      	b.n	8027dae <__mdiff+0xe2>
 8027dd8:	08045c10 	.word	0x08045c10
 8027ddc:	08045c21 	.word	0x08045c21

08027de0 <__d2b>:
 8027de0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8027de4:	4689      	mov	r9, r1
 8027de6:	2101      	movs	r1, #1
 8027de8:	ec57 6b10 	vmov	r6, r7, d0
 8027dec:	4690      	mov	r8, r2
 8027dee:	f7ff fccf 	bl	8027790 <_Balloc>
 8027df2:	4604      	mov	r4, r0
 8027df4:	b930      	cbnz	r0, 8027e04 <__d2b+0x24>
 8027df6:	4602      	mov	r2, r0
 8027df8:	4b25      	ldr	r3, [pc, #148]	; (8027e90 <__d2b+0xb0>)
 8027dfa:	4826      	ldr	r0, [pc, #152]	; (8027e94 <__d2b+0xb4>)
 8027dfc:	f240 310a 	movw	r1, #778	; 0x30a
 8027e00:	f7fe fc2e 	bl	8026660 <__assert_func>
 8027e04:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8027e08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8027e0c:	bb35      	cbnz	r5, 8027e5c <__d2b+0x7c>
 8027e0e:	2e00      	cmp	r6, #0
 8027e10:	9301      	str	r3, [sp, #4]
 8027e12:	d028      	beq.n	8027e66 <__d2b+0x86>
 8027e14:	4668      	mov	r0, sp
 8027e16:	9600      	str	r6, [sp, #0]
 8027e18:	f7ff fd82 	bl	8027920 <__lo0bits>
 8027e1c:	9900      	ldr	r1, [sp, #0]
 8027e1e:	b300      	cbz	r0, 8027e62 <__d2b+0x82>
 8027e20:	9a01      	ldr	r2, [sp, #4]
 8027e22:	f1c0 0320 	rsb	r3, r0, #32
 8027e26:	fa02 f303 	lsl.w	r3, r2, r3
 8027e2a:	430b      	orrs	r3, r1
 8027e2c:	40c2      	lsrs	r2, r0
 8027e2e:	6163      	str	r3, [r4, #20]
 8027e30:	9201      	str	r2, [sp, #4]
 8027e32:	9b01      	ldr	r3, [sp, #4]
 8027e34:	61a3      	str	r3, [r4, #24]
 8027e36:	2b00      	cmp	r3, #0
 8027e38:	bf14      	ite	ne
 8027e3a:	2202      	movne	r2, #2
 8027e3c:	2201      	moveq	r2, #1
 8027e3e:	6122      	str	r2, [r4, #16]
 8027e40:	b1d5      	cbz	r5, 8027e78 <__d2b+0x98>
 8027e42:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8027e46:	4405      	add	r5, r0
 8027e48:	f8c9 5000 	str.w	r5, [r9]
 8027e4c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8027e50:	f8c8 0000 	str.w	r0, [r8]
 8027e54:	4620      	mov	r0, r4
 8027e56:	b003      	add	sp, #12
 8027e58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8027e5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8027e60:	e7d5      	b.n	8027e0e <__d2b+0x2e>
 8027e62:	6161      	str	r1, [r4, #20]
 8027e64:	e7e5      	b.n	8027e32 <__d2b+0x52>
 8027e66:	a801      	add	r0, sp, #4
 8027e68:	f7ff fd5a 	bl	8027920 <__lo0bits>
 8027e6c:	9b01      	ldr	r3, [sp, #4]
 8027e6e:	6163      	str	r3, [r4, #20]
 8027e70:	2201      	movs	r2, #1
 8027e72:	6122      	str	r2, [r4, #16]
 8027e74:	3020      	adds	r0, #32
 8027e76:	e7e3      	b.n	8027e40 <__d2b+0x60>
 8027e78:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8027e7c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8027e80:	f8c9 0000 	str.w	r0, [r9]
 8027e84:	6918      	ldr	r0, [r3, #16]
 8027e86:	f7ff fd2b 	bl	80278e0 <__hi0bits>
 8027e8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8027e8e:	e7df      	b.n	8027e50 <__d2b+0x70>
 8027e90:	08045c10 	.word	0x08045c10
 8027e94:	08045c21 	.word	0x08045c21

08027e98 <_calloc_r>:
 8027e98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027e9a:	fba1 2402 	umull	r2, r4, r1, r2
 8027e9e:	b94c      	cbnz	r4, 8027eb4 <_calloc_r+0x1c>
 8027ea0:	4611      	mov	r1, r2
 8027ea2:	9201      	str	r2, [sp, #4]
 8027ea4:	f7fc fb1e 	bl	80244e4 <_malloc_r>
 8027ea8:	9a01      	ldr	r2, [sp, #4]
 8027eaa:	4605      	mov	r5, r0
 8027eac:	b930      	cbnz	r0, 8027ebc <_calloc_r+0x24>
 8027eae:	4628      	mov	r0, r5
 8027eb0:	b003      	add	sp, #12
 8027eb2:	bd30      	pop	{r4, r5, pc}
 8027eb4:	220c      	movs	r2, #12
 8027eb6:	6002      	str	r2, [r0, #0]
 8027eb8:	2500      	movs	r5, #0
 8027eba:	e7f8      	b.n	8027eae <_calloc_r+0x16>
 8027ebc:	4621      	mov	r1, r4
 8027ebe:	f7fc f82b 	bl	8023f18 <memset>
 8027ec2:	e7f4      	b.n	8027eae <_calloc_r+0x16>

08027ec4 <__ssputs_r>:
 8027ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027ec8:	688e      	ldr	r6, [r1, #8]
 8027eca:	429e      	cmp	r6, r3
 8027ecc:	4682      	mov	sl, r0
 8027ece:	460c      	mov	r4, r1
 8027ed0:	4690      	mov	r8, r2
 8027ed2:	461f      	mov	r7, r3
 8027ed4:	d838      	bhi.n	8027f48 <__ssputs_r+0x84>
 8027ed6:	898a      	ldrh	r2, [r1, #12]
 8027ed8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8027edc:	d032      	beq.n	8027f44 <__ssputs_r+0x80>
 8027ede:	6825      	ldr	r5, [r4, #0]
 8027ee0:	6909      	ldr	r1, [r1, #16]
 8027ee2:	eba5 0901 	sub.w	r9, r5, r1
 8027ee6:	6965      	ldr	r5, [r4, #20]
 8027ee8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8027eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8027ef0:	3301      	adds	r3, #1
 8027ef2:	444b      	add	r3, r9
 8027ef4:	106d      	asrs	r5, r5, #1
 8027ef6:	429d      	cmp	r5, r3
 8027ef8:	bf38      	it	cc
 8027efa:	461d      	movcc	r5, r3
 8027efc:	0553      	lsls	r3, r2, #21
 8027efe:	d531      	bpl.n	8027f64 <__ssputs_r+0xa0>
 8027f00:	4629      	mov	r1, r5
 8027f02:	f7fc faef 	bl	80244e4 <_malloc_r>
 8027f06:	4606      	mov	r6, r0
 8027f08:	b950      	cbnz	r0, 8027f20 <__ssputs_r+0x5c>
 8027f0a:	230c      	movs	r3, #12
 8027f0c:	f8ca 3000 	str.w	r3, [sl]
 8027f10:	89a3      	ldrh	r3, [r4, #12]
 8027f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8027f16:	81a3      	strh	r3, [r4, #12]
 8027f18:	f04f 30ff 	mov.w	r0, #4294967295
 8027f1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027f20:	6921      	ldr	r1, [r4, #16]
 8027f22:	464a      	mov	r2, r9
 8027f24:	f7fb ffd0 	bl	8023ec8 <memcpy>
 8027f28:	89a3      	ldrh	r3, [r4, #12]
 8027f2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8027f2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8027f32:	81a3      	strh	r3, [r4, #12]
 8027f34:	6126      	str	r6, [r4, #16]
 8027f36:	6165      	str	r5, [r4, #20]
 8027f38:	444e      	add	r6, r9
 8027f3a:	eba5 0509 	sub.w	r5, r5, r9
 8027f3e:	6026      	str	r6, [r4, #0]
 8027f40:	60a5      	str	r5, [r4, #8]
 8027f42:	463e      	mov	r6, r7
 8027f44:	42be      	cmp	r6, r7
 8027f46:	d900      	bls.n	8027f4a <__ssputs_r+0x86>
 8027f48:	463e      	mov	r6, r7
 8027f4a:	6820      	ldr	r0, [r4, #0]
 8027f4c:	4632      	mov	r2, r6
 8027f4e:	4641      	mov	r1, r8
 8027f50:	f7fb ffc8 	bl	8023ee4 <memmove>
 8027f54:	68a3      	ldr	r3, [r4, #8]
 8027f56:	1b9b      	subs	r3, r3, r6
 8027f58:	60a3      	str	r3, [r4, #8]
 8027f5a:	6823      	ldr	r3, [r4, #0]
 8027f5c:	4433      	add	r3, r6
 8027f5e:	6023      	str	r3, [r4, #0]
 8027f60:	2000      	movs	r0, #0
 8027f62:	e7db      	b.n	8027f1c <__ssputs_r+0x58>
 8027f64:	462a      	mov	r2, r5
 8027f66:	f000 fec5 	bl	8028cf4 <_realloc_r>
 8027f6a:	4606      	mov	r6, r0
 8027f6c:	2800      	cmp	r0, #0
 8027f6e:	d1e1      	bne.n	8027f34 <__ssputs_r+0x70>
 8027f70:	6921      	ldr	r1, [r4, #16]
 8027f72:	4650      	mov	r0, sl
 8027f74:	f7fc fa4a 	bl	802440c <_free_r>
 8027f78:	e7c7      	b.n	8027f0a <__ssputs_r+0x46>
 8027f7a:	Address 0x0000000008027f7a is out of bounds.


08027f7c <_svfiprintf_r>:
 8027f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027f80:	4698      	mov	r8, r3
 8027f82:	898b      	ldrh	r3, [r1, #12]
 8027f84:	061b      	lsls	r3, r3, #24
 8027f86:	b09d      	sub	sp, #116	; 0x74
 8027f88:	4607      	mov	r7, r0
 8027f8a:	460d      	mov	r5, r1
 8027f8c:	4614      	mov	r4, r2
 8027f8e:	d50e      	bpl.n	8027fae <_svfiprintf_r+0x32>
 8027f90:	690b      	ldr	r3, [r1, #16]
 8027f92:	b963      	cbnz	r3, 8027fae <_svfiprintf_r+0x32>
 8027f94:	2140      	movs	r1, #64	; 0x40
 8027f96:	f7fc faa5 	bl	80244e4 <_malloc_r>
 8027f9a:	6028      	str	r0, [r5, #0]
 8027f9c:	6128      	str	r0, [r5, #16]
 8027f9e:	b920      	cbnz	r0, 8027faa <_svfiprintf_r+0x2e>
 8027fa0:	230c      	movs	r3, #12
 8027fa2:	603b      	str	r3, [r7, #0]
 8027fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8027fa8:	e0d1      	b.n	802814e <_svfiprintf_r+0x1d2>
 8027faa:	2340      	movs	r3, #64	; 0x40
 8027fac:	616b      	str	r3, [r5, #20]
 8027fae:	2300      	movs	r3, #0
 8027fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8027fb2:	2320      	movs	r3, #32
 8027fb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8027fb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8027fbc:	2330      	movs	r3, #48	; 0x30
 8027fbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8028168 <_svfiprintf_r+0x1ec>
 8027fc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8027fc6:	f04f 0901 	mov.w	r9, #1
 8027fca:	4623      	mov	r3, r4
 8027fcc:	469a      	mov	sl, r3
 8027fce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027fd2:	b10a      	cbz	r2, 8027fd8 <_svfiprintf_r+0x5c>
 8027fd4:	2a25      	cmp	r2, #37	; 0x25
 8027fd6:	d1f9      	bne.n	8027fcc <_svfiprintf_r+0x50>
 8027fd8:	ebba 0b04 	subs.w	fp, sl, r4
 8027fdc:	d00b      	beq.n	8027ff6 <_svfiprintf_r+0x7a>
 8027fde:	465b      	mov	r3, fp
 8027fe0:	4622      	mov	r2, r4
 8027fe2:	4629      	mov	r1, r5
 8027fe4:	4638      	mov	r0, r7
 8027fe6:	f7ff ff6d 	bl	8027ec4 <__ssputs_r>
 8027fea:	3001      	adds	r0, #1
 8027fec:	f000 80aa 	beq.w	8028144 <_svfiprintf_r+0x1c8>
 8027ff0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8027ff2:	445a      	add	r2, fp
 8027ff4:	9209      	str	r2, [sp, #36]	; 0x24
 8027ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8027ffa:	2b00      	cmp	r3, #0
 8027ffc:	f000 80a2 	beq.w	8028144 <_svfiprintf_r+0x1c8>
 8028000:	2300      	movs	r3, #0
 8028002:	f04f 32ff 	mov.w	r2, #4294967295
 8028006:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802800a:	f10a 0a01 	add.w	sl, sl, #1
 802800e:	9304      	str	r3, [sp, #16]
 8028010:	9307      	str	r3, [sp, #28]
 8028012:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028016:	931a      	str	r3, [sp, #104]	; 0x68
 8028018:	4654      	mov	r4, sl
 802801a:	2205      	movs	r2, #5
 802801c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028020:	4851      	ldr	r0, [pc, #324]	; (8028168 <_svfiprintf_r+0x1ec>)
 8028022:	f7d8 f925 	bl	8000270 <memchr>
 8028026:	9a04      	ldr	r2, [sp, #16]
 8028028:	b9d8      	cbnz	r0, 8028062 <_svfiprintf_r+0xe6>
 802802a:	06d0      	lsls	r0, r2, #27
 802802c:	bf44      	itt	mi
 802802e:	2320      	movmi	r3, #32
 8028030:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028034:	0711      	lsls	r1, r2, #28
 8028036:	bf44      	itt	mi
 8028038:	232b      	movmi	r3, #43	; 0x2b
 802803a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802803e:	f89a 3000 	ldrb.w	r3, [sl]
 8028042:	2b2a      	cmp	r3, #42	; 0x2a
 8028044:	d015      	beq.n	8028072 <_svfiprintf_r+0xf6>
 8028046:	9a07      	ldr	r2, [sp, #28]
 8028048:	4654      	mov	r4, sl
 802804a:	2000      	movs	r0, #0
 802804c:	f04f 0c0a 	mov.w	ip, #10
 8028050:	4621      	mov	r1, r4
 8028052:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028056:	3b30      	subs	r3, #48	; 0x30
 8028058:	2b09      	cmp	r3, #9
 802805a:	d94e      	bls.n	80280fa <_svfiprintf_r+0x17e>
 802805c:	b1b0      	cbz	r0, 802808c <_svfiprintf_r+0x110>
 802805e:	9207      	str	r2, [sp, #28]
 8028060:	e014      	b.n	802808c <_svfiprintf_r+0x110>
 8028062:	eba0 0308 	sub.w	r3, r0, r8
 8028066:	fa09 f303 	lsl.w	r3, r9, r3
 802806a:	4313      	orrs	r3, r2
 802806c:	9304      	str	r3, [sp, #16]
 802806e:	46a2      	mov	sl, r4
 8028070:	e7d2      	b.n	8028018 <_svfiprintf_r+0x9c>
 8028072:	9b03      	ldr	r3, [sp, #12]
 8028074:	1d19      	adds	r1, r3, #4
 8028076:	681b      	ldr	r3, [r3, #0]
 8028078:	9103      	str	r1, [sp, #12]
 802807a:	2b00      	cmp	r3, #0
 802807c:	bfbb      	ittet	lt
 802807e:	425b      	neglt	r3, r3
 8028080:	f042 0202 	orrlt.w	r2, r2, #2
 8028084:	9307      	strge	r3, [sp, #28]
 8028086:	9307      	strlt	r3, [sp, #28]
 8028088:	bfb8      	it	lt
 802808a:	9204      	strlt	r2, [sp, #16]
 802808c:	7823      	ldrb	r3, [r4, #0]
 802808e:	2b2e      	cmp	r3, #46	; 0x2e
 8028090:	d10c      	bne.n	80280ac <_svfiprintf_r+0x130>
 8028092:	7863      	ldrb	r3, [r4, #1]
 8028094:	2b2a      	cmp	r3, #42	; 0x2a
 8028096:	d135      	bne.n	8028104 <_svfiprintf_r+0x188>
 8028098:	9b03      	ldr	r3, [sp, #12]
 802809a:	1d1a      	adds	r2, r3, #4
 802809c:	681b      	ldr	r3, [r3, #0]
 802809e:	9203      	str	r2, [sp, #12]
 80280a0:	2b00      	cmp	r3, #0
 80280a2:	bfb8      	it	lt
 80280a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80280a8:	3402      	adds	r4, #2
 80280aa:	9305      	str	r3, [sp, #20]
 80280ac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8028178 <_svfiprintf_r+0x1fc>
 80280b0:	7821      	ldrb	r1, [r4, #0]
 80280b2:	2203      	movs	r2, #3
 80280b4:	4650      	mov	r0, sl
 80280b6:	f7d8 f8db 	bl	8000270 <memchr>
 80280ba:	b140      	cbz	r0, 80280ce <_svfiprintf_r+0x152>
 80280bc:	2340      	movs	r3, #64	; 0x40
 80280be:	eba0 000a 	sub.w	r0, r0, sl
 80280c2:	fa03 f000 	lsl.w	r0, r3, r0
 80280c6:	9b04      	ldr	r3, [sp, #16]
 80280c8:	4303      	orrs	r3, r0
 80280ca:	3401      	adds	r4, #1
 80280cc:	9304      	str	r3, [sp, #16]
 80280ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 80280d2:	4826      	ldr	r0, [pc, #152]	; (802816c <_svfiprintf_r+0x1f0>)
 80280d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80280d8:	2206      	movs	r2, #6
 80280da:	f7d8 f8c9 	bl	8000270 <memchr>
 80280de:	2800      	cmp	r0, #0
 80280e0:	d038      	beq.n	8028154 <_svfiprintf_r+0x1d8>
 80280e2:	4b23      	ldr	r3, [pc, #140]	; (8028170 <_svfiprintf_r+0x1f4>)
 80280e4:	bb1b      	cbnz	r3, 802812e <_svfiprintf_r+0x1b2>
 80280e6:	9b03      	ldr	r3, [sp, #12]
 80280e8:	3307      	adds	r3, #7
 80280ea:	f023 0307 	bic.w	r3, r3, #7
 80280ee:	3308      	adds	r3, #8
 80280f0:	9303      	str	r3, [sp, #12]
 80280f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80280f4:	4433      	add	r3, r6
 80280f6:	9309      	str	r3, [sp, #36]	; 0x24
 80280f8:	e767      	b.n	8027fca <_svfiprintf_r+0x4e>
 80280fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80280fe:	460c      	mov	r4, r1
 8028100:	2001      	movs	r0, #1
 8028102:	e7a5      	b.n	8028050 <_svfiprintf_r+0xd4>
 8028104:	2300      	movs	r3, #0
 8028106:	3401      	adds	r4, #1
 8028108:	9305      	str	r3, [sp, #20]
 802810a:	4619      	mov	r1, r3
 802810c:	f04f 0c0a 	mov.w	ip, #10
 8028110:	4620      	mov	r0, r4
 8028112:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028116:	3a30      	subs	r2, #48	; 0x30
 8028118:	2a09      	cmp	r2, #9
 802811a:	d903      	bls.n	8028124 <_svfiprintf_r+0x1a8>
 802811c:	2b00      	cmp	r3, #0
 802811e:	d0c5      	beq.n	80280ac <_svfiprintf_r+0x130>
 8028120:	9105      	str	r1, [sp, #20]
 8028122:	e7c3      	b.n	80280ac <_svfiprintf_r+0x130>
 8028124:	fb0c 2101 	mla	r1, ip, r1, r2
 8028128:	4604      	mov	r4, r0
 802812a:	2301      	movs	r3, #1
 802812c:	e7f0      	b.n	8028110 <_svfiprintf_r+0x194>
 802812e:	ab03      	add	r3, sp, #12
 8028130:	9300      	str	r3, [sp, #0]
 8028132:	462a      	mov	r2, r5
 8028134:	4b0f      	ldr	r3, [pc, #60]	; (8028174 <_svfiprintf_r+0x1f8>)
 8028136:	a904      	add	r1, sp, #16
 8028138:	4638      	mov	r0, r7
 802813a:	f7fc fad9 	bl	80246f0 <_printf_float>
 802813e:	1c42      	adds	r2, r0, #1
 8028140:	4606      	mov	r6, r0
 8028142:	d1d6      	bne.n	80280f2 <_svfiprintf_r+0x176>
 8028144:	89ab      	ldrh	r3, [r5, #12]
 8028146:	065b      	lsls	r3, r3, #25
 8028148:	f53f af2c 	bmi.w	8027fa4 <_svfiprintf_r+0x28>
 802814c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802814e:	b01d      	add	sp, #116	; 0x74
 8028150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028154:	ab03      	add	r3, sp, #12
 8028156:	9300      	str	r3, [sp, #0]
 8028158:	462a      	mov	r2, r5
 802815a:	4b06      	ldr	r3, [pc, #24]	; (8028174 <_svfiprintf_r+0x1f8>)
 802815c:	a904      	add	r1, sp, #16
 802815e:	4638      	mov	r0, r7
 8028160:	f7fc fd52 	bl	8024c08 <_printf_i>
 8028164:	e7eb      	b.n	802813e <_svfiprintf_r+0x1c2>
 8028166:	bf00      	nop
 8028168:	08045d7c 	.word	0x08045d7c
 802816c:	08045d86 	.word	0x08045d86
 8028170:	080246f1 	.word	0x080246f1
 8028174:	08027ec5 	.word	0x08027ec5
 8028178:	08045d82 	.word	0x08045d82

0802817c <_sungetc_r>:
 802817c:	b538      	push	{r3, r4, r5, lr}
 802817e:	1c4b      	adds	r3, r1, #1
 8028180:	4614      	mov	r4, r2
 8028182:	d103      	bne.n	802818c <_sungetc_r+0x10>
 8028184:	f04f 35ff 	mov.w	r5, #4294967295
 8028188:	4628      	mov	r0, r5
 802818a:	bd38      	pop	{r3, r4, r5, pc}
 802818c:	8993      	ldrh	r3, [r2, #12]
 802818e:	f023 0320 	bic.w	r3, r3, #32
 8028192:	8193      	strh	r3, [r2, #12]
 8028194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8028196:	6852      	ldr	r2, [r2, #4]
 8028198:	b2cd      	uxtb	r5, r1
 802819a:	b18b      	cbz	r3, 80281c0 <_sungetc_r+0x44>
 802819c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802819e:	4293      	cmp	r3, r2
 80281a0:	dd08      	ble.n	80281b4 <_sungetc_r+0x38>
 80281a2:	6823      	ldr	r3, [r4, #0]
 80281a4:	1e5a      	subs	r2, r3, #1
 80281a6:	6022      	str	r2, [r4, #0]
 80281a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80281ac:	6863      	ldr	r3, [r4, #4]
 80281ae:	3301      	adds	r3, #1
 80281b0:	6063      	str	r3, [r4, #4]
 80281b2:	e7e9      	b.n	8028188 <_sungetc_r+0xc>
 80281b4:	4621      	mov	r1, r4
 80281b6:	f000 fd1b 	bl	8028bf0 <__submore>
 80281ba:	2800      	cmp	r0, #0
 80281bc:	d0f1      	beq.n	80281a2 <_sungetc_r+0x26>
 80281be:	e7e1      	b.n	8028184 <_sungetc_r+0x8>
 80281c0:	6921      	ldr	r1, [r4, #16]
 80281c2:	6823      	ldr	r3, [r4, #0]
 80281c4:	b151      	cbz	r1, 80281dc <_sungetc_r+0x60>
 80281c6:	4299      	cmp	r1, r3
 80281c8:	d208      	bcs.n	80281dc <_sungetc_r+0x60>
 80281ca:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80281ce:	42a9      	cmp	r1, r5
 80281d0:	d104      	bne.n	80281dc <_sungetc_r+0x60>
 80281d2:	3b01      	subs	r3, #1
 80281d4:	3201      	adds	r2, #1
 80281d6:	6023      	str	r3, [r4, #0]
 80281d8:	6062      	str	r2, [r4, #4]
 80281da:	e7d5      	b.n	8028188 <_sungetc_r+0xc>
 80281dc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80281e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80281e4:	6363      	str	r3, [r4, #52]	; 0x34
 80281e6:	2303      	movs	r3, #3
 80281e8:	63a3      	str	r3, [r4, #56]	; 0x38
 80281ea:	4623      	mov	r3, r4
 80281ec:	f803 5f46 	strb.w	r5, [r3, #70]!
 80281f0:	6023      	str	r3, [r4, #0]
 80281f2:	2301      	movs	r3, #1
 80281f4:	e7dc      	b.n	80281b0 <_sungetc_r+0x34>

080281f6 <__ssrefill_r>:
 80281f6:	b510      	push	{r4, lr}
 80281f8:	460c      	mov	r4, r1
 80281fa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80281fc:	b169      	cbz	r1, 802821a <__ssrefill_r+0x24>
 80281fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028202:	4299      	cmp	r1, r3
 8028204:	d001      	beq.n	802820a <__ssrefill_r+0x14>
 8028206:	f7fc f901 	bl	802440c <_free_r>
 802820a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802820c:	6063      	str	r3, [r4, #4]
 802820e:	2000      	movs	r0, #0
 8028210:	6360      	str	r0, [r4, #52]	; 0x34
 8028212:	b113      	cbz	r3, 802821a <__ssrefill_r+0x24>
 8028214:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8028216:	6023      	str	r3, [r4, #0]
 8028218:	bd10      	pop	{r4, pc}
 802821a:	6923      	ldr	r3, [r4, #16]
 802821c:	6023      	str	r3, [r4, #0]
 802821e:	2300      	movs	r3, #0
 8028220:	6063      	str	r3, [r4, #4]
 8028222:	89a3      	ldrh	r3, [r4, #12]
 8028224:	f043 0320 	orr.w	r3, r3, #32
 8028228:	81a3      	strh	r3, [r4, #12]
 802822a:	f04f 30ff 	mov.w	r0, #4294967295
 802822e:	e7f3      	b.n	8028218 <__ssrefill_r+0x22>

08028230 <__ssvfiscanf_r>:
 8028230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8028234:	460c      	mov	r4, r1
 8028236:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802823a:	2100      	movs	r1, #0
 802823c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8028240:	49a6      	ldr	r1, [pc, #664]	; (80284dc <__ssvfiscanf_r+0x2ac>)
 8028242:	91a0      	str	r1, [sp, #640]	; 0x280
 8028244:	f10d 0804 	add.w	r8, sp, #4
 8028248:	49a5      	ldr	r1, [pc, #660]	; (80284e0 <__ssvfiscanf_r+0x2b0>)
 802824a:	4fa6      	ldr	r7, [pc, #664]	; (80284e4 <__ssvfiscanf_r+0x2b4>)
 802824c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80284e8 <__ssvfiscanf_r+0x2b8>
 8028250:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8028254:	4606      	mov	r6, r0
 8028256:	91a1      	str	r1, [sp, #644]	; 0x284
 8028258:	9300      	str	r3, [sp, #0]
 802825a:	7813      	ldrb	r3, [r2, #0]
 802825c:	2b00      	cmp	r3, #0
 802825e:	f000 815a 	beq.w	8028516 <__ssvfiscanf_r+0x2e6>
 8028262:	5dd9      	ldrb	r1, [r3, r7]
 8028264:	f011 0108 	ands.w	r1, r1, #8
 8028268:	f102 0501 	add.w	r5, r2, #1
 802826c:	d019      	beq.n	80282a2 <__ssvfiscanf_r+0x72>
 802826e:	6863      	ldr	r3, [r4, #4]
 8028270:	2b00      	cmp	r3, #0
 8028272:	dd0f      	ble.n	8028294 <__ssvfiscanf_r+0x64>
 8028274:	6823      	ldr	r3, [r4, #0]
 8028276:	781a      	ldrb	r2, [r3, #0]
 8028278:	5cba      	ldrb	r2, [r7, r2]
 802827a:	0712      	lsls	r2, r2, #28
 802827c:	d401      	bmi.n	8028282 <__ssvfiscanf_r+0x52>
 802827e:	462a      	mov	r2, r5
 8028280:	e7eb      	b.n	802825a <__ssvfiscanf_r+0x2a>
 8028282:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028284:	3201      	adds	r2, #1
 8028286:	9245      	str	r2, [sp, #276]	; 0x114
 8028288:	6862      	ldr	r2, [r4, #4]
 802828a:	3301      	adds	r3, #1
 802828c:	3a01      	subs	r2, #1
 802828e:	6062      	str	r2, [r4, #4]
 8028290:	6023      	str	r3, [r4, #0]
 8028292:	e7ec      	b.n	802826e <__ssvfiscanf_r+0x3e>
 8028294:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8028296:	4621      	mov	r1, r4
 8028298:	4630      	mov	r0, r6
 802829a:	4798      	blx	r3
 802829c:	2800      	cmp	r0, #0
 802829e:	d0e9      	beq.n	8028274 <__ssvfiscanf_r+0x44>
 80282a0:	e7ed      	b.n	802827e <__ssvfiscanf_r+0x4e>
 80282a2:	2b25      	cmp	r3, #37	; 0x25
 80282a4:	d012      	beq.n	80282cc <__ssvfiscanf_r+0x9c>
 80282a6:	469a      	mov	sl, r3
 80282a8:	6863      	ldr	r3, [r4, #4]
 80282aa:	2b00      	cmp	r3, #0
 80282ac:	f340 8091 	ble.w	80283d2 <__ssvfiscanf_r+0x1a2>
 80282b0:	6822      	ldr	r2, [r4, #0]
 80282b2:	7813      	ldrb	r3, [r2, #0]
 80282b4:	4553      	cmp	r3, sl
 80282b6:	f040 812e 	bne.w	8028516 <__ssvfiscanf_r+0x2e6>
 80282ba:	6863      	ldr	r3, [r4, #4]
 80282bc:	3b01      	subs	r3, #1
 80282be:	6063      	str	r3, [r4, #4]
 80282c0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80282c2:	3201      	adds	r2, #1
 80282c4:	3301      	adds	r3, #1
 80282c6:	6022      	str	r2, [r4, #0]
 80282c8:	9345      	str	r3, [sp, #276]	; 0x114
 80282ca:	e7d8      	b.n	802827e <__ssvfiscanf_r+0x4e>
 80282cc:	9141      	str	r1, [sp, #260]	; 0x104
 80282ce:	9143      	str	r1, [sp, #268]	; 0x10c
 80282d0:	7853      	ldrb	r3, [r2, #1]
 80282d2:	2b2a      	cmp	r3, #42	; 0x2a
 80282d4:	bf02      	ittt	eq
 80282d6:	2310      	moveq	r3, #16
 80282d8:	1c95      	addeq	r5, r2, #2
 80282da:	9341      	streq	r3, [sp, #260]	; 0x104
 80282dc:	220a      	movs	r2, #10
 80282de:	46aa      	mov	sl, r5
 80282e0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80282e4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80282e8:	2b09      	cmp	r3, #9
 80282ea:	d91d      	bls.n	8028328 <__ssvfiscanf_r+0xf8>
 80282ec:	487e      	ldr	r0, [pc, #504]	; (80284e8 <__ssvfiscanf_r+0x2b8>)
 80282ee:	2203      	movs	r2, #3
 80282f0:	f7d7 ffbe 	bl	8000270 <memchr>
 80282f4:	b140      	cbz	r0, 8028308 <__ssvfiscanf_r+0xd8>
 80282f6:	2301      	movs	r3, #1
 80282f8:	eba0 0009 	sub.w	r0, r0, r9
 80282fc:	fa03 f000 	lsl.w	r0, r3, r0
 8028300:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028302:	4318      	orrs	r0, r3
 8028304:	9041      	str	r0, [sp, #260]	; 0x104
 8028306:	4655      	mov	r5, sl
 8028308:	f815 3b01 	ldrb.w	r3, [r5], #1
 802830c:	2b78      	cmp	r3, #120	; 0x78
 802830e:	d806      	bhi.n	802831e <__ssvfiscanf_r+0xee>
 8028310:	2b57      	cmp	r3, #87	; 0x57
 8028312:	d810      	bhi.n	8028336 <__ssvfiscanf_r+0x106>
 8028314:	2b25      	cmp	r3, #37	; 0x25
 8028316:	d0c6      	beq.n	80282a6 <__ssvfiscanf_r+0x76>
 8028318:	d856      	bhi.n	80283c8 <__ssvfiscanf_r+0x198>
 802831a:	2b00      	cmp	r3, #0
 802831c:	d064      	beq.n	80283e8 <__ssvfiscanf_r+0x1b8>
 802831e:	2303      	movs	r3, #3
 8028320:	9347      	str	r3, [sp, #284]	; 0x11c
 8028322:	230a      	movs	r3, #10
 8028324:	9342      	str	r3, [sp, #264]	; 0x108
 8028326:	e071      	b.n	802840c <__ssvfiscanf_r+0x1dc>
 8028328:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802832a:	fb02 1103 	mla	r1, r2, r3, r1
 802832e:	3930      	subs	r1, #48	; 0x30
 8028330:	9143      	str	r1, [sp, #268]	; 0x10c
 8028332:	4655      	mov	r5, sl
 8028334:	e7d3      	b.n	80282de <__ssvfiscanf_r+0xae>
 8028336:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802833a:	2a20      	cmp	r2, #32
 802833c:	d8ef      	bhi.n	802831e <__ssvfiscanf_r+0xee>
 802833e:	a101      	add	r1, pc, #4	; (adr r1, 8028344 <__ssvfiscanf_r+0x114>)
 8028340:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8028344:	080283f7 	.word	0x080283f7
 8028348:	0802831f 	.word	0x0802831f
 802834c:	0802831f 	.word	0x0802831f
 8028350:	08028455 	.word	0x08028455
 8028354:	0802831f 	.word	0x0802831f
 8028358:	0802831f 	.word	0x0802831f
 802835c:	0802831f 	.word	0x0802831f
 8028360:	0802831f 	.word	0x0802831f
 8028364:	0802831f 	.word	0x0802831f
 8028368:	0802831f 	.word	0x0802831f
 802836c:	0802831f 	.word	0x0802831f
 8028370:	0802846b 	.word	0x0802846b
 8028374:	08028441 	.word	0x08028441
 8028378:	080283cf 	.word	0x080283cf
 802837c:	080283cf 	.word	0x080283cf
 8028380:	080283cf 	.word	0x080283cf
 8028384:	0802831f 	.word	0x0802831f
 8028388:	08028445 	.word	0x08028445
 802838c:	0802831f 	.word	0x0802831f
 8028390:	0802831f 	.word	0x0802831f
 8028394:	0802831f 	.word	0x0802831f
 8028398:	0802831f 	.word	0x0802831f
 802839c:	0802847b 	.word	0x0802847b
 80283a0:	0802844d 	.word	0x0802844d
 80283a4:	080283ef 	.word	0x080283ef
 80283a8:	0802831f 	.word	0x0802831f
 80283ac:	0802831f 	.word	0x0802831f
 80283b0:	08028477 	.word	0x08028477
 80283b4:	0802831f 	.word	0x0802831f
 80283b8:	08028441 	.word	0x08028441
 80283bc:	0802831f 	.word	0x0802831f
 80283c0:	0802831f 	.word	0x0802831f
 80283c4:	080283f7 	.word	0x080283f7
 80283c8:	3b45      	subs	r3, #69	; 0x45
 80283ca:	2b02      	cmp	r3, #2
 80283cc:	d8a7      	bhi.n	802831e <__ssvfiscanf_r+0xee>
 80283ce:	2305      	movs	r3, #5
 80283d0:	e01b      	b.n	802840a <__ssvfiscanf_r+0x1da>
 80283d2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80283d4:	4621      	mov	r1, r4
 80283d6:	4630      	mov	r0, r6
 80283d8:	4798      	blx	r3
 80283da:	2800      	cmp	r0, #0
 80283dc:	f43f af68 	beq.w	80282b0 <__ssvfiscanf_r+0x80>
 80283e0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80283e2:	2800      	cmp	r0, #0
 80283e4:	f040 808d 	bne.w	8028502 <__ssvfiscanf_r+0x2d2>
 80283e8:	f04f 30ff 	mov.w	r0, #4294967295
 80283ec:	e08f      	b.n	802850e <__ssvfiscanf_r+0x2de>
 80283ee:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80283f0:	f042 0220 	orr.w	r2, r2, #32
 80283f4:	9241      	str	r2, [sp, #260]	; 0x104
 80283f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80283f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80283fc:	9241      	str	r2, [sp, #260]	; 0x104
 80283fe:	2210      	movs	r2, #16
 8028400:	2b6f      	cmp	r3, #111	; 0x6f
 8028402:	9242      	str	r2, [sp, #264]	; 0x108
 8028404:	bf34      	ite	cc
 8028406:	2303      	movcc	r3, #3
 8028408:	2304      	movcs	r3, #4
 802840a:	9347      	str	r3, [sp, #284]	; 0x11c
 802840c:	6863      	ldr	r3, [r4, #4]
 802840e:	2b00      	cmp	r3, #0
 8028410:	dd42      	ble.n	8028498 <__ssvfiscanf_r+0x268>
 8028412:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8028414:	0659      	lsls	r1, r3, #25
 8028416:	d404      	bmi.n	8028422 <__ssvfiscanf_r+0x1f2>
 8028418:	6823      	ldr	r3, [r4, #0]
 802841a:	781a      	ldrb	r2, [r3, #0]
 802841c:	5cba      	ldrb	r2, [r7, r2]
 802841e:	0712      	lsls	r2, r2, #28
 8028420:	d441      	bmi.n	80284a6 <__ssvfiscanf_r+0x276>
 8028422:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8028424:	2b02      	cmp	r3, #2
 8028426:	dc50      	bgt.n	80284ca <__ssvfiscanf_r+0x29a>
 8028428:	466b      	mov	r3, sp
 802842a:	4622      	mov	r2, r4
 802842c:	a941      	add	r1, sp, #260	; 0x104
 802842e:	4630      	mov	r0, r6
 8028430:	f000 f9d0 	bl	80287d4 <_scanf_chars>
 8028434:	2801      	cmp	r0, #1
 8028436:	d06e      	beq.n	8028516 <__ssvfiscanf_r+0x2e6>
 8028438:	2802      	cmp	r0, #2
 802843a:	f47f af20 	bne.w	802827e <__ssvfiscanf_r+0x4e>
 802843e:	e7cf      	b.n	80283e0 <__ssvfiscanf_r+0x1b0>
 8028440:	220a      	movs	r2, #10
 8028442:	e7dd      	b.n	8028400 <__ssvfiscanf_r+0x1d0>
 8028444:	2300      	movs	r3, #0
 8028446:	9342      	str	r3, [sp, #264]	; 0x108
 8028448:	2303      	movs	r3, #3
 802844a:	e7de      	b.n	802840a <__ssvfiscanf_r+0x1da>
 802844c:	2308      	movs	r3, #8
 802844e:	9342      	str	r3, [sp, #264]	; 0x108
 8028450:	2304      	movs	r3, #4
 8028452:	e7da      	b.n	802840a <__ssvfiscanf_r+0x1da>
 8028454:	4629      	mov	r1, r5
 8028456:	4640      	mov	r0, r8
 8028458:	f000 fb92 	bl	8028b80 <__sccl>
 802845c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802845e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028462:	9341      	str	r3, [sp, #260]	; 0x104
 8028464:	4605      	mov	r5, r0
 8028466:	2301      	movs	r3, #1
 8028468:	e7cf      	b.n	802840a <__ssvfiscanf_r+0x1da>
 802846a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802846c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8028470:	9341      	str	r3, [sp, #260]	; 0x104
 8028472:	2300      	movs	r3, #0
 8028474:	e7c9      	b.n	802840a <__ssvfiscanf_r+0x1da>
 8028476:	2302      	movs	r3, #2
 8028478:	e7c7      	b.n	802840a <__ssvfiscanf_r+0x1da>
 802847a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802847c:	06c3      	lsls	r3, r0, #27
 802847e:	f53f aefe 	bmi.w	802827e <__ssvfiscanf_r+0x4e>
 8028482:	9b00      	ldr	r3, [sp, #0]
 8028484:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8028486:	1d19      	adds	r1, r3, #4
 8028488:	9100      	str	r1, [sp, #0]
 802848a:	681b      	ldr	r3, [r3, #0]
 802848c:	f010 0f01 	tst.w	r0, #1
 8028490:	bf14      	ite	ne
 8028492:	801a      	strhne	r2, [r3, #0]
 8028494:	601a      	streq	r2, [r3, #0]
 8028496:	e6f2      	b.n	802827e <__ssvfiscanf_r+0x4e>
 8028498:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802849a:	4621      	mov	r1, r4
 802849c:	4630      	mov	r0, r6
 802849e:	4798      	blx	r3
 80284a0:	2800      	cmp	r0, #0
 80284a2:	d0b6      	beq.n	8028412 <__ssvfiscanf_r+0x1e2>
 80284a4:	e79c      	b.n	80283e0 <__ssvfiscanf_r+0x1b0>
 80284a6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80284a8:	3201      	adds	r2, #1
 80284aa:	9245      	str	r2, [sp, #276]	; 0x114
 80284ac:	6862      	ldr	r2, [r4, #4]
 80284ae:	3a01      	subs	r2, #1
 80284b0:	2a00      	cmp	r2, #0
 80284b2:	6062      	str	r2, [r4, #4]
 80284b4:	dd02      	ble.n	80284bc <__ssvfiscanf_r+0x28c>
 80284b6:	3301      	adds	r3, #1
 80284b8:	6023      	str	r3, [r4, #0]
 80284ba:	e7ad      	b.n	8028418 <__ssvfiscanf_r+0x1e8>
 80284bc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80284be:	4621      	mov	r1, r4
 80284c0:	4630      	mov	r0, r6
 80284c2:	4798      	blx	r3
 80284c4:	2800      	cmp	r0, #0
 80284c6:	d0a7      	beq.n	8028418 <__ssvfiscanf_r+0x1e8>
 80284c8:	e78a      	b.n	80283e0 <__ssvfiscanf_r+0x1b0>
 80284ca:	2b04      	cmp	r3, #4
 80284cc:	dc0e      	bgt.n	80284ec <__ssvfiscanf_r+0x2bc>
 80284ce:	466b      	mov	r3, sp
 80284d0:	4622      	mov	r2, r4
 80284d2:	a941      	add	r1, sp, #260	; 0x104
 80284d4:	4630      	mov	r0, r6
 80284d6:	f000 f9d7 	bl	8028888 <_scanf_i>
 80284da:	e7ab      	b.n	8028434 <__ssvfiscanf_r+0x204>
 80284dc:	0802817d 	.word	0x0802817d
 80284e0:	080281f7 	.word	0x080281f7
 80284e4:	08045585 	.word	0x08045585
 80284e8:	08045d82 	.word	0x08045d82
 80284ec:	4b0b      	ldr	r3, [pc, #44]	; (802851c <__ssvfiscanf_r+0x2ec>)
 80284ee:	2b00      	cmp	r3, #0
 80284f0:	f43f aec5 	beq.w	802827e <__ssvfiscanf_r+0x4e>
 80284f4:	466b      	mov	r3, sp
 80284f6:	4622      	mov	r2, r4
 80284f8:	a941      	add	r1, sp, #260	; 0x104
 80284fa:	4630      	mov	r0, r6
 80284fc:	f3af 8000 	nop.w
 8028500:	e798      	b.n	8028434 <__ssvfiscanf_r+0x204>
 8028502:	89a3      	ldrh	r3, [r4, #12]
 8028504:	f013 0f40 	tst.w	r3, #64	; 0x40
 8028508:	bf18      	it	ne
 802850a:	f04f 30ff 	movne.w	r0, #4294967295
 802850e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8028512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028516:	9844      	ldr	r0, [sp, #272]	; 0x110
 8028518:	e7f9      	b.n	802850e <__ssvfiscanf_r+0x2de>
 802851a:	bf00      	nop
 802851c:	00000000 	.word	0x00000000

08028520 <__sfputc_r>:
 8028520:	6893      	ldr	r3, [r2, #8]
 8028522:	3b01      	subs	r3, #1
 8028524:	2b00      	cmp	r3, #0
 8028526:	b410      	push	{r4}
 8028528:	6093      	str	r3, [r2, #8]
 802852a:	da08      	bge.n	802853e <__sfputc_r+0x1e>
 802852c:	6994      	ldr	r4, [r2, #24]
 802852e:	42a3      	cmp	r3, r4
 8028530:	db01      	blt.n	8028536 <__sfputc_r+0x16>
 8028532:	290a      	cmp	r1, #10
 8028534:	d103      	bne.n	802853e <__sfputc_r+0x1e>
 8028536:	f85d 4b04 	ldr.w	r4, [sp], #4
 802853a:	f7fd bfbb 	b.w	80264b4 <__swbuf_r>
 802853e:	6813      	ldr	r3, [r2, #0]
 8028540:	1c58      	adds	r0, r3, #1
 8028542:	6010      	str	r0, [r2, #0]
 8028544:	7019      	strb	r1, [r3, #0]
 8028546:	4608      	mov	r0, r1
 8028548:	f85d 4b04 	ldr.w	r4, [sp], #4
 802854c:	4770      	bx	lr

0802854e <__sfputs_r>:
 802854e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028550:	4606      	mov	r6, r0
 8028552:	460f      	mov	r7, r1
 8028554:	4614      	mov	r4, r2
 8028556:	18d5      	adds	r5, r2, r3
 8028558:	42ac      	cmp	r4, r5
 802855a:	d101      	bne.n	8028560 <__sfputs_r+0x12>
 802855c:	2000      	movs	r0, #0
 802855e:	e007      	b.n	8028570 <__sfputs_r+0x22>
 8028560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028564:	463a      	mov	r2, r7
 8028566:	4630      	mov	r0, r6
 8028568:	f7ff ffda 	bl	8028520 <__sfputc_r>
 802856c:	1c43      	adds	r3, r0, #1
 802856e:	d1f3      	bne.n	8028558 <__sfputs_r+0xa>
 8028570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028572:	Address 0x0000000008028572 is out of bounds.


08028574 <_vfiprintf_r>:
 8028574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028578:	460d      	mov	r5, r1
 802857a:	b09d      	sub	sp, #116	; 0x74
 802857c:	4614      	mov	r4, r2
 802857e:	4698      	mov	r8, r3
 8028580:	4606      	mov	r6, r0
 8028582:	b118      	cbz	r0, 802858c <_vfiprintf_r+0x18>
 8028584:	6983      	ldr	r3, [r0, #24]
 8028586:	b90b      	cbnz	r3, 802858c <_vfiprintf_r+0x18>
 8028588:	f7fb faa4 	bl	8023ad4 <__sinit>
 802858c:	4b89      	ldr	r3, [pc, #548]	; (80287b4 <_vfiprintf_r+0x240>)
 802858e:	429d      	cmp	r5, r3
 8028590:	d11b      	bne.n	80285ca <_vfiprintf_r+0x56>
 8028592:	6875      	ldr	r5, [r6, #4]
 8028594:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028596:	07d9      	lsls	r1, r3, #31
 8028598:	d405      	bmi.n	80285a6 <_vfiprintf_r+0x32>
 802859a:	89ab      	ldrh	r3, [r5, #12]
 802859c:	059a      	lsls	r2, r3, #22
 802859e:	d402      	bmi.n	80285a6 <_vfiprintf_r+0x32>
 80285a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80285a2:	f7fb fc6d 	bl	8023e80 <__retarget_lock_acquire_recursive>
 80285a6:	89ab      	ldrh	r3, [r5, #12]
 80285a8:	071b      	lsls	r3, r3, #28
 80285aa:	d501      	bpl.n	80285b0 <_vfiprintf_r+0x3c>
 80285ac:	692b      	ldr	r3, [r5, #16]
 80285ae:	b9eb      	cbnz	r3, 80285ec <_vfiprintf_r+0x78>
 80285b0:	4629      	mov	r1, r5
 80285b2:	4630      	mov	r0, r6
 80285b4:	f7fd ffe2 	bl	802657c <__swsetup_r>
 80285b8:	b1c0      	cbz	r0, 80285ec <_vfiprintf_r+0x78>
 80285ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80285bc:	07dc      	lsls	r4, r3, #31
 80285be:	d50e      	bpl.n	80285de <_vfiprintf_r+0x6a>
 80285c0:	f04f 30ff 	mov.w	r0, #4294967295
 80285c4:	b01d      	add	sp, #116	; 0x74
 80285c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80285ca:	4b7b      	ldr	r3, [pc, #492]	; (80287b8 <_vfiprintf_r+0x244>)
 80285cc:	429d      	cmp	r5, r3
 80285ce:	d101      	bne.n	80285d4 <_vfiprintf_r+0x60>
 80285d0:	68b5      	ldr	r5, [r6, #8]
 80285d2:	e7df      	b.n	8028594 <_vfiprintf_r+0x20>
 80285d4:	4b79      	ldr	r3, [pc, #484]	; (80287bc <_vfiprintf_r+0x248>)
 80285d6:	429d      	cmp	r5, r3
 80285d8:	bf08      	it	eq
 80285da:	68f5      	ldreq	r5, [r6, #12]
 80285dc:	e7da      	b.n	8028594 <_vfiprintf_r+0x20>
 80285de:	89ab      	ldrh	r3, [r5, #12]
 80285e0:	0598      	lsls	r0, r3, #22
 80285e2:	d4ed      	bmi.n	80285c0 <_vfiprintf_r+0x4c>
 80285e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80285e6:	f7fb fc4d 	bl	8023e84 <__retarget_lock_release_recursive>
 80285ea:	e7e9      	b.n	80285c0 <_vfiprintf_r+0x4c>
 80285ec:	2300      	movs	r3, #0
 80285ee:	9309      	str	r3, [sp, #36]	; 0x24
 80285f0:	2320      	movs	r3, #32
 80285f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80285f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80285fa:	2330      	movs	r3, #48	; 0x30
 80285fc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80287c0 <_vfiprintf_r+0x24c>
 8028600:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8028604:	f04f 0901 	mov.w	r9, #1
 8028608:	4623      	mov	r3, r4
 802860a:	469a      	mov	sl, r3
 802860c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8028610:	b10a      	cbz	r2, 8028616 <_vfiprintf_r+0xa2>
 8028612:	2a25      	cmp	r2, #37	; 0x25
 8028614:	d1f9      	bne.n	802860a <_vfiprintf_r+0x96>
 8028616:	ebba 0b04 	subs.w	fp, sl, r4
 802861a:	d00b      	beq.n	8028634 <_vfiprintf_r+0xc0>
 802861c:	465b      	mov	r3, fp
 802861e:	4622      	mov	r2, r4
 8028620:	4629      	mov	r1, r5
 8028622:	4630      	mov	r0, r6
 8028624:	f7ff ff93 	bl	802854e <__sfputs_r>
 8028628:	3001      	adds	r0, #1
 802862a:	f000 80aa 	beq.w	8028782 <_vfiprintf_r+0x20e>
 802862e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8028630:	445a      	add	r2, fp
 8028632:	9209      	str	r2, [sp, #36]	; 0x24
 8028634:	f89a 3000 	ldrb.w	r3, [sl]
 8028638:	2b00      	cmp	r3, #0
 802863a:	f000 80a2 	beq.w	8028782 <_vfiprintf_r+0x20e>
 802863e:	2300      	movs	r3, #0
 8028640:	f04f 32ff 	mov.w	r2, #4294967295
 8028644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8028648:	f10a 0a01 	add.w	sl, sl, #1
 802864c:	9304      	str	r3, [sp, #16]
 802864e:	9307      	str	r3, [sp, #28]
 8028650:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8028654:	931a      	str	r3, [sp, #104]	; 0x68
 8028656:	4654      	mov	r4, sl
 8028658:	2205      	movs	r2, #5
 802865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802865e:	4858      	ldr	r0, [pc, #352]	; (80287c0 <_vfiprintf_r+0x24c>)
 8028660:	f7d7 fe06 	bl	8000270 <memchr>
 8028664:	9a04      	ldr	r2, [sp, #16]
 8028666:	b9d8      	cbnz	r0, 80286a0 <_vfiprintf_r+0x12c>
 8028668:	06d1      	lsls	r1, r2, #27
 802866a:	bf44      	itt	mi
 802866c:	2320      	movmi	r3, #32
 802866e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8028672:	0713      	lsls	r3, r2, #28
 8028674:	bf44      	itt	mi
 8028676:	232b      	movmi	r3, #43	; 0x2b
 8028678:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802867c:	f89a 3000 	ldrb.w	r3, [sl]
 8028680:	2b2a      	cmp	r3, #42	; 0x2a
 8028682:	d015      	beq.n	80286b0 <_vfiprintf_r+0x13c>
 8028684:	9a07      	ldr	r2, [sp, #28]
 8028686:	4654      	mov	r4, sl
 8028688:	2000      	movs	r0, #0
 802868a:	f04f 0c0a 	mov.w	ip, #10
 802868e:	4621      	mov	r1, r4
 8028690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8028694:	3b30      	subs	r3, #48	; 0x30
 8028696:	2b09      	cmp	r3, #9
 8028698:	d94e      	bls.n	8028738 <_vfiprintf_r+0x1c4>
 802869a:	b1b0      	cbz	r0, 80286ca <_vfiprintf_r+0x156>
 802869c:	9207      	str	r2, [sp, #28]
 802869e:	e014      	b.n	80286ca <_vfiprintf_r+0x156>
 80286a0:	eba0 0308 	sub.w	r3, r0, r8
 80286a4:	fa09 f303 	lsl.w	r3, r9, r3
 80286a8:	4313      	orrs	r3, r2
 80286aa:	9304      	str	r3, [sp, #16]
 80286ac:	46a2      	mov	sl, r4
 80286ae:	e7d2      	b.n	8028656 <_vfiprintf_r+0xe2>
 80286b0:	9b03      	ldr	r3, [sp, #12]
 80286b2:	1d19      	adds	r1, r3, #4
 80286b4:	681b      	ldr	r3, [r3, #0]
 80286b6:	9103      	str	r1, [sp, #12]
 80286b8:	2b00      	cmp	r3, #0
 80286ba:	bfbb      	ittet	lt
 80286bc:	425b      	neglt	r3, r3
 80286be:	f042 0202 	orrlt.w	r2, r2, #2
 80286c2:	9307      	strge	r3, [sp, #28]
 80286c4:	9307      	strlt	r3, [sp, #28]
 80286c6:	bfb8      	it	lt
 80286c8:	9204      	strlt	r2, [sp, #16]
 80286ca:	7823      	ldrb	r3, [r4, #0]
 80286cc:	2b2e      	cmp	r3, #46	; 0x2e
 80286ce:	d10c      	bne.n	80286ea <_vfiprintf_r+0x176>
 80286d0:	7863      	ldrb	r3, [r4, #1]
 80286d2:	2b2a      	cmp	r3, #42	; 0x2a
 80286d4:	d135      	bne.n	8028742 <_vfiprintf_r+0x1ce>
 80286d6:	9b03      	ldr	r3, [sp, #12]
 80286d8:	1d1a      	adds	r2, r3, #4
 80286da:	681b      	ldr	r3, [r3, #0]
 80286dc:	9203      	str	r2, [sp, #12]
 80286de:	2b00      	cmp	r3, #0
 80286e0:	bfb8      	it	lt
 80286e2:	f04f 33ff 	movlt.w	r3, #4294967295
 80286e6:	3402      	adds	r4, #2
 80286e8:	9305      	str	r3, [sp, #20]
 80286ea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80287d0 <_vfiprintf_r+0x25c>
 80286ee:	7821      	ldrb	r1, [r4, #0]
 80286f0:	2203      	movs	r2, #3
 80286f2:	4650      	mov	r0, sl
 80286f4:	f7d7 fdbc 	bl	8000270 <memchr>
 80286f8:	b140      	cbz	r0, 802870c <_vfiprintf_r+0x198>
 80286fa:	2340      	movs	r3, #64	; 0x40
 80286fc:	eba0 000a 	sub.w	r0, r0, sl
 8028700:	fa03 f000 	lsl.w	r0, r3, r0
 8028704:	9b04      	ldr	r3, [sp, #16]
 8028706:	4303      	orrs	r3, r0
 8028708:	3401      	adds	r4, #1
 802870a:	9304      	str	r3, [sp, #16]
 802870c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8028710:	482c      	ldr	r0, [pc, #176]	; (80287c4 <_vfiprintf_r+0x250>)
 8028712:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8028716:	2206      	movs	r2, #6
 8028718:	f7d7 fdaa 	bl	8000270 <memchr>
 802871c:	2800      	cmp	r0, #0
 802871e:	d03f      	beq.n	80287a0 <_vfiprintf_r+0x22c>
 8028720:	4b29      	ldr	r3, [pc, #164]	; (80287c8 <_vfiprintf_r+0x254>)
 8028722:	bb1b      	cbnz	r3, 802876c <_vfiprintf_r+0x1f8>
 8028724:	9b03      	ldr	r3, [sp, #12]
 8028726:	3307      	adds	r3, #7
 8028728:	f023 0307 	bic.w	r3, r3, #7
 802872c:	3308      	adds	r3, #8
 802872e:	9303      	str	r3, [sp, #12]
 8028730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028732:	443b      	add	r3, r7
 8028734:	9309      	str	r3, [sp, #36]	; 0x24
 8028736:	e767      	b.n	8028608 <_vfiprintf_r+0x94>
 8028738:	fb0c 3202 	mla	r2, ip, r2, r3
 802873c:	460c      	mov	r4, r1
 802873e:	2001      	movs	r0, #1
 8028740:	e7a5      	b.n	802868e <_vfiprintf_r+0x11a>
 8028742:	2300      	movs	r3, #0
 8028744:	3401      	adds	r4, #1
 8028746:	9305      	str	r3, [sp, #20]
 8028748:	4619      	mov	r1, r3
 802874a:	f04f 0c0a 	mov.w	ip, #10
 802874e:	4620      	mov	r0, r4
 8028750:	f810 2b01 	ldrb.w	r2, [r0], #1
 8028754:	3a30      	subs	r2, #48	; 0x30
 8028756:	2a09      	cmp	r2, #9
 8028758:	d903      	bls.n	8028762 <_vfiprintf_r+0x1ee>
 802875a:	2b00      	cmp	r3, #0
 802875c:	d0c5      	beq.n	80286ea <_vfiprintf_r+0x176>
 802875e:	9105      	str	r1, [sp, #20]
 8028760:	e7c3      	b.n	80286ea <_vfiprintf_r+0x176>
 8028762:	fb0c 2101 	mla	r1, ip, r1, r2
 8028766:	4604      	mov	r4, r0
 8028768:	2301      	movs	r3, #1
 802876a:	e7f0      	b.n	802874e <_vfiprintf_r+0x1da>
 802876c:	ab03      	add	r3, sp, #12
 802876e:	9300      	str	r3, [sp, #0]
 8028770:	462a      	mov	r2, r5
 8028772:	4b16      	ldr	r3, [pc, #88]	; (80287cc <_vfiprintf_r+0x258>)
 8028774:	a904      	add	r1, sp, #16
 8028776:	4630      	mov	r0, r6
 8028778:	f7fb ffba 	bl	80246f0 <_printf_float>
 802877c:	4607      	mov	r7, r0
 802877e:	1c78      	adds	r0, r7, #1
 8028780:	d1d6      	bne.n	8028730 <_vfiprintf_r+0x1bc>
 8028782:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8028784:	07d9      	lsls	r1, r3, #31
 8028786:	d405      	bmi.n	8028794 <_vfiprintf_r+0x220>
 8028788:	89ab      	ldrh	r3, [r5, #12]
 802878a:	059a      	lsls	r2, r3, #22
 802878c:	d402      	bmi.n	8028794 <_vfiprintf_r+0x220>
 802878e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8028790:	f7fb fb78 	bl	8023e84 <__retarget_lock_release_recursive>
 8028794:	89ab      	ldrh	r3, [r5, #12]
 8028796:	065b      	lsls	r3, r3, #25
 8028798:	f53f af12 	bmi.w	80285c0 <_vfiprintf_r+0x4c>
 802879c:	9809      	ldr	r0, [sp, #36]	; 0x24
 802879e:	e711      	b.n	80285c4 <_vfiprintf_r+0x50>
 80287a0:	ab03      	add	r3, sp, #12
 80287a2:	9300      	str	r3, [sp, #0]
 80287a4:	462a      	mov	r2, r5
 80287a6:	4b09      	ldr	r3, [pc, #36]	; (80287cc <_vfiprintf_r+0x258>)
 80287a8:	a904      	add	r1, sp, #16
 80287aa:	4630      	mov	r0, r6
 80287ac:	f7fc fa2c 	bl	8024c08 <_printf_i>
 80287b0:	e7e4      	b.n	802877c <_vfiprintf_r+0x208>
 80287b2:	bf00      	nop
 80287b4:	080456a8 	.word	0x080456a8
 80287b8:	080456c8 	.word	0x080456c8
 80287bc:	08045688 	.word	0x08045688
 80287c0:	08045d7c 	.word	0x08045d7c
 80287c4:	08045d86 	.word	0x08045d86
 80287c8:	080246f1 	.word	0x080246f1
 80287cc:	0802854f 	.word	0x0802854f
 80287d0:	08045d82 	.word	0x08045d82

080287d4 <_scanf_chars>:
 80287d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80287d8:	4615      	mov	r5, r2
 80287da:	688a      	ldr	r2, [r1, #8]
 80287dc:	4680      	mov	r8, r0
 80287de:	460c      	mov	r4, r1
 80287e0:	b932      	cbnz	r2, 80287f0 <_scanf_chars+0x1c>
 80287e2:	698a      	ldr	r2, [r1, #24]
 80287e4:	2a00      	cmp	r2, #0
 80287e6:	bf0c      	ite	eq
 80287e8:	2201      	moveq	r2, #1
 80287ea:	f04f 32ff 	movne.w	r2, #4294967295
 80287ee:	608a      	str	r2, [r1, #8]
 80287f0:	6822      	ldr	r2, [r4, #0]
 80287f2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8028884 <_scanf_chars+0xb0>
 80287f6:	06d1      	lsls	r1, r2, #27
 80287f8:	bf5f      	itttt	pl
 80287fa:	681a      	ldrpl	r2, [r3, #0]
 80287fc:	1d11      	addpl	r1, r2, #4
 80287fe:	6019      	strpl	r1, [r3, #0]
 8028800:	6816      	ldrpl	r6, [r2, #0]
 8028802:	2700      	movs	r7, #0
 8028804:	69a0      	ldr	r0, [r4, #24]
 8028806:	b188      	cbz	r0, 802882c <_scanf_chars+0x58>
 8028808:	2801      	cmp	r0, #1
 802880a:	d107      	bne.n	802881c <_scanf_chars+0x48>
 802880c:	682a      	ldr	r2, [r5, #0]
 802880e:	7811      	ldrb	r1, [r2, #0]
 8028810:	6962      	ldr	r2, [r4, #20]
 8028812:	5c52      	ldrb	r2, [r2, r1]
 8028814:	b952      	cbnz	r2, 802882c <_scanf_chars+0x58>
 8028816:	2f00      	cmp	r7, #0
 8028818:	d031      	beq.n	802887e <_scanf_chars+0xaa>
 802881a:	e022      	b.n	8028862 <_scanf_chars+0x8e>
 802881c:	2802      	cmp	r0, #2
 802881e:	d120      	bne.n	8028862 <_scanf_chars+0x8e>
 8028820:	682b      	ldr	r3, [r5, #0]
 8028822:	781b      	ldrb	r3, [r3, #0]
 8028824:	f813 3009 	ldrb.w	r3, [r3, r9]
 8028828:	071b      	lsls	r3, r3, #28
 802882a:	d41a      	bmi.n	8028862 <_scanf_chars+0x8e>
 802882c:	6823      	ldr	r3, [r4, #0]
 802882e:	06da      	lsls	r2, r3, #27
 8028830:	bf5e      	ittt	pl
 8028832:	682b      	ldrpl	r3, [r5, #0]
 8028834:	781b      	ldrbpl	r3, [r3, #0]
 8028836:	f806 3b01 	strbpl.w	r3, [r6], #1
 802883a:	682a      	ldr	r2, [r5, #0]
 802883c:	686b      	ldr	r3, [r5, #4]
 802883e:	3201      	adds	r2, #1
 8028840:	602a      	str	r2, [r5, #0]
 8028842:	68a2      	ldr	r2, [r4, #8]
 8028844:	3b01      	subs	r3, #1
 8028846:	3a01      	subs	r2, #1
 8028848:	606b      	str	r3, [r5, #4]
 802884a:	3701      	adds	r7, #1
 802884c:	60a2      	str	r2, [r4, #8]
 802884e:	b142      	cbz	r2, 8028862 <_scanf_chars+0x8e>
 8028850:	2b00      	cmp	r3, #0
 8028852:	dcd7      	bgt.n	8028804 <_scanf_chars+0x30>
 8028854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8028858:	4629      	mov	r1, r5
 802885a:	4640      	mov	r0, r8
 802885c:	4798      	blx	r3
 802885e:	2800      	cmp	r0, #0
 8028860:	d0d0      	beq.n	8028804 <_scanf_chars+0x30>
 8028862:	6823      	ldr	r3, [r4, #0]
 8028864:	f013 0310 	ands.w	r3, r3, #16
 8028868:	d105      	bne.n	8028876 <_scanf_chars+0xa2>
 802886a:	68e2      	ldr	r2, [r4, #12]
 802886c:	3201      	adds	r2, #1
 802886e:	60e2      	str	r2, [r4, #12]
 8028870:	69a2      	ldr	r2, [r4, #24]
 8028872:	b102      	cbz	r2, 8028876 <_scanf_chars+0xa2>
 8028874:	7033      	strb	r3, [r6, #0]
 8028876:	6923      	ldr	r3, [r4, #16]
 8028878:	443b      	add	r3, r7
 802887a:	6123      	str	r3, [r4, #16]
 802887c:	2000      	movs	r0, #0
 802887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8028882:	bf00      	nop
 8028884:	08045585 	.word	0x08045585

08028888 <_scanf_i>:
 8028888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802888c:	4698      	mov	r8, r3
 802888e:	4b76      	ldr	r3, [pc, #472]	; (8028a68 <_scanf_i+0x1e0>)
 8028890:	460c      	mov	r4, r1
 8028892:	4682      	mov	sl, r0
 8028894:	4616      	mov	r6, r2
 8028896:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802889a:	b087      	sub	sp, #28
 802889c:	ab03      	add	r3, sp, #12
 802889e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80288a2:	4b72      	ldr	r3, [pc, #456]	; (8028a6c <_scanf_i+0x1e4>)
 80288a4:	69a1      	ldr	r1, [r4, #24]
 80288a6:	4a72      	ldr	r2, [pc, #456]	; (8028a70 <_scanf_i+0x1e8>)
 80288a8:	2903      	cmp	r1, #3
 80288aa:	bf18      	it	ne
 80288ac:	461a      	movne	r2, r3
 80288ae:	68a3      	ldr	r3, [r4, #8]
 80288b0:	9201      	str	r2, [sp, #4]
 80288b2:	1e5a      	subs	r2, r3, #1
 80288b4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80288b8:	bf88      	it	hi
 80288ba:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80288be:	4627      	mov	r7, r4
 80288c0:	bf82      	ittt	hi
 80288c2:	eb03 0905 	addhi.w	r9, r3, r5
 80288c6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80288ca:	60a3      	strhi	r3, [r4, #8]
 80288cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 80288d0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80288d4:	bf98      	it	ls
 80288d6:	f04f 0900 	movls.w	r9, #0
 80288da:	6023      	str	r3, [r4, #0]
 80288dc:	463d      	mov	r5, r7
 80288de:	f04f 0b00 	mov.w	fp, #0
 80288e2:	6831      	ldr	r1, [r6, #0]
 80288e4:	ab03      	add	r3, sp, #12
 80288e6:	7809      	ldrb	r1, [r1, #0]
 80288e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80288ec:	2202      	movs	r2, #2
 80288ee:	f7d7 fcbf 	bl	8000270 <memchr>
 80288f2:	b328      	cbz	r0, 8028940 <_scanf_i+0xb8>
 80288f4:	f1bb 0f01 	cmp.w	fp, #1
 80288f8:	d159      	bne.n	80289ae <_scanf_i+0x126>
 80288fa:	6862      	ldr	r2, [r4, #4]
 80288fc:	b92a      	cbnz	r2, 802890a <_scanf_i+0x82>
 80288fe:	6822      	ldr	r2, [r4, #0]
 8028900:	2308      	movs	r3, #8
 8028902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8028906:	6063      	str	r3, [r4, #4]
 8028908:	6022      	str	r2, [r4, #0]
 802890a:	6822      	ldr	r2, [r4, #0]
 802890c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8028910:	6022      	str	r2, [r4, #0]
 8028912:	68a2      	ldr	r2, [r4, #8]
 8028914:	1e51      	subs	r1, r2, #1
 8028916:	60a1      	str	r1, [r4, #8]
 8028918:	b192      	cbz	r2, 8028940 <_scanf_i+0xb8>
 802891a:	6832      	ldr	r2, [r6, #0]
 802891c:	1c51      	adds	r1, r2, #1
 802891e:	6031      	str	r1, [r6, #0]
 8028920:	7812      	ldrb	r2, [r2, #0]
 8028922:	f805 2b01 	strb.w	r2, [r5], #1
 8028926:	6872      	ldr	r2, [r6, #4]
 8028928:	3a01      	subs	r2, #1
 802892a:	2a00      	cmp	r2, #0
 802892c:	6072      	str	r2, [r6, #4]
 802892e:	dc07      	bgt.n	8028940 <_scanf_i+0xb8>
 8028930:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8028934:	4631      	mov	r1, r6
 8028936:	4650      	mov	r0, sl
 8028938:	4790      	blx	r2
 802893a:	2800      	cmp	r0, #0
 802893c:	f040 8085 	bne.w	8028a4a <_scanf_i+0x1c2>
 8028940:	f10b 0b01 	add.w	fp, fp, #1
 8028944:	f1bb 0f03 	cmp.w	fp, #3
 8028948:	d1cb      	bne.n	80288e2 <_scanf_i+0x5a>
 802894a:	6863      	ldr	r3, [r4, #4]
 802894c:	b90b      	cbnz	r3, 8028952 <_scanf_i+0xca>
 802894e:	230a      	movs	r3, #10
 8028950:	6063      	str	r3, [r4, #4]
 8028952:	6863      	ldr	r3, [r4, #4]
 8028954:	4947      	ldr	r1, [pc, #284]	; (8028a74 <_scanf_i+0x1ec>)
 8028956:	6960      	ldr	r0, [r4, #20]
 8028958:	1ac9      	subs	r1, r1, r3
 802895a:	f000 f911 	bl	8028b80 <__sccl>
 802895e:	f04f 0b00 	mov.w	fp, #0
 8028962:	68a3      	ldr	r3, [r4, #8]
 8028964:	6822      	ldr	r2, [r4, #0]
 8028966:	2b00      	cmp	r3, #0
 8028968:	d03d      	beq.n	80289e6 <_scanf_i+0x15e>
 802896a:	6831      	ldr	r1, [r6, #0]
 802896c:	6960      	ldr	r0, [r4, #20]
 802896e:	f891 c000 	ldrb.w	ip, [r1]
 8028972:	f810 000c 	ldrb.w	r0, [r0, ip]
 8028976:	2800      	cmp	r0, #0
 8028978:	d035      	beq.n	80289e6 <_scanf_i+0x15e>
 802897a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802897e:	d124      	bne.n	80289ca <_scanf_i+0x142>
 8028980:	0510      	lsls	r0, r2, #20
 8028982:	d522      	bpl.n	80289ca <_scanf_i+0x142>
 8028984:	f10b 0b01 	add.w	fp, fp, #1
 8028988:	f1b9 0f00 	cmp.w	r9, #0
 802898c:	d003      	beq.n	8028996 <_scanf_i+0x10e>
 802898e:	3301      	adds	r3, #1
 8028990:	f109 39ff 	add.w	r9, r9, #4294967295
 8028994:	60a3      	str	r3, [r4, #8]
 8028996:	6873      	ldr	r3, [r6, #4]
 8028998:	3b01      	subs	r3, #1
 802899a:	2b00      	cmp	r3, #0
 802899c:	6073      	str	r3, [r6, #4]
 802899e:	dd1b      	ble.n	80289d8 <_scanf_i+0x150>
 80289a0:	6833      	ldr	r3, [r6, #0]
 80289a2:	3301      	adds	r3, #1
 80289a4:	6033      	str	r3, [r6, #0]
 80289a6:	68a3      	ldr	r3, [r4, #8]
 80289a8:	3b01      	subs	r3, #1
 80289aa:	60a3      	str	r3, [r4, #8]
 80289ac:	e7d9      	b.n	8028962 <_scanf_i+0xda>
 80289ae:	f1bb 0f02 	cmp.w	fp, #2
 80289b2:	d1ae      	bne.n	8028912 <_scanf_i+0x8a>
 80289b4:	6822      	ldr	r2, [r4, #0]
 80289b6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80289ba:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80289be:	d1bf      	bne.n	8028940 <_scanf_i+0xb8>
 80289c0:	2310      	movs	r3, #16
 80289c2:	6063      	str	r3, [r4, #4]
 80289c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80289c8:	e7a2      	b.n	8028910 <_scanf_i+0x88>
 80289ca:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80289ce:	6022      	str	r2, [r4, #0]
 80289d0:	780b      	ldrb	r3, [r1, #0]
 80289d2:	f805 3b01 	strb.w	r3, [r5], #1
 80289d6:	e7de      	b.n	8028996 <_scanf_i+0x10e>
 80289d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80289dc:	4631      	mov	r1, r6
 80289de:	4650      	mov	r0, sl
 80289e0:	4798      	blx	r3
 80289e2:	2800      	cmp	r0, #0
 80289e4:	d0df      	beq.n	80289a6 <_scanf_i+0x11e>
 80289e6:	6823      	ldr	r3, [r4, #0]
 80289e8:	05db      	lsls	r3, r3, #23
 80289ea:	d50d      	bpl.n	8028a08 <_scanf_i+0x180>
 80289ec:	42bd      	cmp	r5, r7
 80289ee:	d909      	bls.n	8028a04 <_scanf_i+0x17c>
 80289f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80289f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80289f8:	4632      	mov	r2, r6
 80289fa:	4650      	mov	r0, sl
 80289fc:	4798      	blx	r3
 80289fe:	f105 39ff 	add.w	r9, r5, #4294967295
 8028a02:	464d      	mov	r5, r9
 8028a04:	42bd      	cmp	r5, r7
 8028a06:	d02d      	beq.n	8028a64 <_scanf_i+0x1dc>
 8028a08:	6822      	ldr	r2, [r4, #0]
 8028a0a:	f012 0210 	ands.w	r2, r2, #16
 8028a0e:	d113      	bne.n	8028a38 <_scanf_i+0x1b0>
 8028a10:	702a      	strb	r2, [r5, #0]
 8028a12:	6863      	ldr	r3, [r4, #4]
 8028a14:	9e01      	ldr	r6, [sp, #4]
 8028a16:	4639      	mov	r1, r7
 8028a18:	4650      	mov	r0, sl
 8028a1a:	47b0      	blx	r6
 8028a1c:	6821      	ldr	r1, [r4, #0]
 8028a1e:	f8d8 3000 	ldr.w	r3, [r8]
 8028a22:	f011 0f20 	tst.w	r1, #32
 8028a26:	d013      	beq.n	8028a50 <_scanf_i+0x1c8>
 8028a28:	1d1a      	adds	r2, r3, #4
 8028a2a:	f8c8 2000 	str.w	r2, [r8]
 8028a2e:	681b      	ldr	r3, [r3, #0]
 8028a30:	6018      	str	r0, [r3, #0]
 8028a32:	68e3      	ldr	r3, [r4, #12]
 8028a34:	3301      	adds	r3, #1
 8028a36:	60e3      	str	r3, [r4, #12]
 8028a38:	1bed      	subs	r5, r5, r7
 8028a3a:	44ab      	add	fp, r5
 8028a3c:	6925      	ldr	r5, [r4, #16]
 8028a3e:	445d      	add	r5, fp
 8028a40:	6125      	str	r5, [r4, #16]
 8028a42:	2000      	movs	r0, #0
 8028a44:	b007      	add	sp, #28
 8028a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028a4a:	f04f 0b00 	mov.w	fp, #0
 8028a4e:	e7ca      	b.n	80289e6 <_scanf_i+0x15e>
 8028a50:	1d1a      	adds	r2, r3, #4
 8028a52:	f8c8 2000 	str.w	r2, [r8]
 8028a56:	681b      	ldr	r3, [r3, #0]
 8028a58:	f011 0f01 	tst.w	r1, #1
 8028a5c:	bf14      	ite	ne
 8028a5e:	8018      	strhne	r0, [r3, #0]
 8028a60:	6018      	streq	r0, [r3, #0]
 8028a62:	e7e6      	b.n	8028a32 <_scanf_i+0x1aa>
 8028a64:	2001      	movs	r0, #1
 8028a66:	e7ed      	b.n	8028a44 <_scanf_i+0x1bc>
 8028a68:	08029000 	.word	0x08029000
 8028a6c:	08026025 	.word	0x08026025
 8028a70:	08025f29 	.word	0x08025f29
 8028a74:	08045da6 	.word	0x08045da6

08028a78 <_putc_r>:
 8028a78:	b570      	push	{r4, r5, r6, lr}
 8028a7a:	460d      	mov	r5, r1
 8028a7c:	4614      	mov	r4, r2
 8028a7e:	4606      	mov	r6, r0
 8028a80:	b118      	cbz	r0, 8028a8a <_putc_r+0x12>
 8028a82:	6983      	ldr	r3, [r0, #24]
 8028a84:	b90b      	cbnz	r3, 8028a8a <_putc_r+0x12>
 8028a86:	f7fb f825 	bl	8023ad4 <__sinit>
 8028a8a:	4b1c      	ldr	r3, [pc, #112]	; (8028afc <_putc_r+0x84>)
 8028a8c:	429c      	cmp	r4, r3
 8028a8e:	d124      	bne.n	8028ada <_putc_r+0x62>
 8028a90:	6874      	ldr	r4, [r6, #4]
 8028a92:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028a94:	07d8      	lsls	r0, r3, #31
 8028a96:	d405      	bmi.n	8028aa4 <_putc_r+0x2c>
 8028a98:	89a3      	ldrh	r3, [r4, #12]
 8028a9a:	0599      	lsls	r1, r3, #22
 8028a9c:	d402      	bmi.n	8028aa4 <_putc_r+0x2c>
 8028a9e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028aa0:	f7fb f9ee 	bl	8023e80 <__retarget_lock_acquire_recursive>
 8028aa4:	68a3      	ldr	r3, [r4, #8]
 8028aa6:	3b01      	subs	r3, #1
 8028aa8:	2b00      	cmp	r3, #0
 8028aaa:	60a3      	str	r3, [r4, #8]
 8028aac:	da05      	bge.n	8028aba <_putc_r+0x42>
 8028aae:	69a2      	ldr	r2, [r4, #24]
 8028ab0:	4293      	cmp	r3, r2
 8028ab2:	db1c      	blt.n	8028aee <_putc_r+0x76>
 8028ab4:	b2eb      	uxtb	r3, r5
 8028ab6:	2b0a      	cmp	r3, #10
 8028ab8:	d019      	beq.n	8028aee <_putc_r+0x76>
 8028aba:	6823      	ldr	r3, [r4, #0]
 8028abc:	1c5a      	adds	r2, r3, #1
 8028abe:	6022      	str	r2, [r4, #0]
 8028ac0:	701d      	strb	r5, [r3, #0]
 8028ac2:	b2ed      	uxtb	r5, r5
 8028ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8028ac6:	07da      	lsls	r2, r3, #31
 8028ac8:	d405      	bmi.n	8028ad6 <_putc_r+0x5e>
 8028aca:	89a3      	ldrh	r3, [r4, #12]
 8028acc:	059b      	lsls	r3, r3, #22
 8028ace:	d402      	bmi.n	8028ad6 <_putc_r+0x5e>
 8028ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8028ad2:	f7fb f9d7 	bl	8023e84 <__retarget_lock_release_recursive>
 8028ad6:	4628      	mov	r0, r5
 8028ad8:	bd70      	pop	{r4, r5, r6, pc}
 8028ada:	4b09      	ldr	r3, [pc, #36]	; (8028b00 <_putc_r+0x88>)
 8028adc:	429c      	cmp	r4, r3
 8028ade:	d101      	bne.n	8028ae4 <_putc_r+0x6c>
 8028ae0:	68b4      	ldr	r4, [r6, #8]
 8028ae2:	e7d6      	b.n	8028a92 <_putc_r+0x1a>
 8028ae4:	4b07      	ldr	r3, [pc, #28]	; (8028b04 <_putc_r+0x8c>)
 8028ae6:	429c      	cmp	r4, r3
 8028ae8:	bf08      	it	eq
 8028aea:	68f4      	ldreq	r4, [r6, #12]
 8028aec:	e7d1      	b.n	8028a92 <_putc_r+0x1a>
 8028aee:	4629      	mov	r1, r5
 8028af0:	4622      	mov	r2, r4
 8028af2:	4630      	mov	r0, r6
 8028af4:	f7fd fcde 	bl	80264b4 <__swbuf_r>
 8028af8:	4605      	mov	r5, r0
 8028afa:	e7e3      	b.n	8028ac4 <_putc_r+0x4c>
 8028afc:	080456a8 	.word	0x080456a8
 8028b00:	080456c8 	.word	0x080456c8
 8028b04:	08045688 	.word	0x08045688

08028b08 <_read_r>:
 8028b08:	b538      	push	{r3, r4, r5, lr}
 8028b0a:	4d07      	ldr	r5, [pc, #28]	; (8028b28 <_read_r+0x20>)
 8028b0c:	4604      	mov	r4, r0
 8028b0e:	4608      	mov	r0, r1
 8028b10:	4611      	mov	r1, r2
 8028b12:	2200      	movs	r2, #0
 8028b14:	602a      	str	r2, [r5, #0]
 8028b16:	461a      	mov	r2, r3
 8028b18:	f7de f98c 	bl	8006e34 <_read>
 8028b1c:	1c43      	adds	r3, r0, #1
 8028b1e:	d102      	bne.n	8028b26 <_read_r+0x1e>
 8028b20:	682b      	ldr	r3, [r5, #0]
 8028b22:	b103      	cbz	r3, 8028b26 <_read_r+0x1e>
 8028b24:	6023      	str	r3, [r4, #0]
 8028b26:	bd38      	pop	{r3, r4, r5, pc}
 8028b28:	2003002c 	.word	0x2003002c

08028b2c <__fpclassifyd>:
 8028b2c:	ec51 0b10 	vmov	r0, r1, d0
 8028b30:	b510      	push	{r4, lr}
 8028b32:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8028b36:	460b      	mov	r3, r1
 8028b38:	d019      	beq.n	8028b6e <__fpclassifyd+0x42>
 8028b3a:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 8028b3e:	490e      	ldr	r1, [pc, #56]	; (8028b78 <__fpclassifyd+0x4c>)
 8028b40:	428a      	cmp	r2, r1
 8028b42:	d90e      	bls.n	8028b62 <__fpclassifyd+0x36>
 8028b44:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 8028b48:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 8028b4c:	428a      	cmp	r2, r1
 8028b4e:	d908      	bls.n	8028b62 <__fpclassifyd+0x36>
 8028b50:	4a0a      	ldr	r2, [pc, #40]	; (8028b7c <__fpclassifyd+0x50>)
 8028b52:	4213      	tst	r3, r2
 8028b54:	d007      	beq.n	8028b66 <__fpclassifyd+0x3a>
 8028b56:	4294      	cmp	r4, r2
 8028b58:	d107      	bne.n	8028b6a <__fpclassifyd+0x3e>
 8028b5a:	fab0 f080 	clz	r0, r0
 8028b5e:	0940      	lsrs	r0, r0, #5
 8028b60:	bd10      	pop	{r4, pc}
 8028b62:	2004      	movs	r0, #4
 8028b64:	e7fc      	b.n	8028b60 <__fpclassifyd+0x34>
 8028b66:	2003      	movs	r0, #3
 8028b68:	e7fa      	b.n	8028b60 <__fpclassifyd+0x34>
 8028b6a:	2000      	movs	r0, #0
 8028b6c:	e7f8      	b.n	8028b60 <__fpclassifyd+0x34>
 8028b6e:	2800      	cmp	r0, #0
 8028b70:	d1ee      	bne.n	8028b50 <__fpclassifyd+0x24>
 8028b72:	2002      	movs	r0, #2
 8028b74:	e7f4      	b.n	8028b60 <__fpclassifyd+0x34>
 8028b76:	bf00      	nop
 8028b78:	7fdfffff 	.word	0x7fdfffff
 8028b7c:	7ff00000 	.word	0x7ff00000

08028b80 <__sccl>:
 8028b80:	b570      	push	{r4, r5, r6, lr}
 8028b82:	780b      	ldrb	r3, [r1, #0]
 8028b84:	4604      	mov	r4, r0
 8028b86:	2b5e      	cmp	r3, #94	; 0x5e
 8028b88:	bf0b      	itete	eq
 8028b8a:	784b      	ldrbeq	r3, [r1, #1]
 8028b8c:	1c48      	addne	r0, r1, #1
 8028b8e:	1c88      	addeq	r0, r1, #2
 8028b90:	2200      	movne	r2, #0
 8028b92:	bf08      	it	eq
 8028b94:	2201      	moveq	r2, #1
 8028b96:	1e61      	subs	r1, r4, #1
 8028b98:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8028b9c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8028ba0:	42a9      	cmp	r1, r5
 8028ba2:	d1fb      	bne.n	8028b9c <__sccl+0x1c>
 8028ba4:	b90b      	cbnz	r3, 8028baa <__sccl+0x2a>
 8028ba6:	3801      	subs	r0, #1
 8028ba8:	bd70      	pop	{r4, r5, r6, pc}
 8028baa:	f082 0201 	eor.w	r2, r2, #1
 8028bae:	54e2      	strb	r2, [r4, r3]
 8028bb0:	4605      	mov	r5, r0
 8028bb2:	4628      	mov	r0, r5
 8028bb4:	f810 1b01 	ldrb.w	r1, [r0], #1
 8028bb8:	292d      	cmp	r1, #45	; 0x2d
 8028bba:	d006      	beq.n	8028bca <__sccl+0x4a>
 8028bbc:	295d      	cmp	r1, #93	; 0x5d
 8028bbe:	d0f3      	beq.n	8028ba8 <__sccl+0x28>
 8028bc0:	b909      	cbnz	r1, 8028bc6 <__sccl+0x46>
 8028bc2:	4628      	mov	r0, r5
 8028bc4:	e7f0      	b.n	8028ba8 <__sccl+0x28>
 8028bc6:	460b      	mov	r3, r1
 8028bc8:	e7f1      	b.n	8028bae <__sccl+0x2e>
 8028bca:	786e      	ldrb	r6, [r5, #1]
 8028bcc:	2e5d      	cmp	r6, #93	; 0x5d
 8028bce:	d0fa      	beq.n	8028bc6 <__sccl+0x46>
 8028bd0:	42b3      	cmp	r3, r6
 8028bd2:	dcf8      	bgt.n	8028bc6 <__sccl+0x46>
 8028bd4:	3502      	adds	r5, #2
 8028bd6:	4619      	mov	r1, r3
 8028bd8:	3101      	adds	r1, #1
 8028bda:	428e      	cmp	r6, r1
 8028bdc:	5462      	strb	r2, [r4, r1]
 8028bde:	dcfb      	bgt.n	8028bd8 <__sccl+0x58>
 8028be0:	1af1      	subs	r1, r6, r3
 8028be2:	3901      	subs	r1, #1
 8028be4:	1c58      	adds	r0, r3, #1
 8028be6:	42b3      	cmp	r3, r6
 8028be8:	bfa8      	it	ge
 8028bea:	2100      	movge	r1, #0
 8028bec:	1843      	adds	r3, r0, r1
 8028bee:	e7e0      	b.n	8028bb2 <__sccl+0x32>

08028bf0 <__submore>:
 8028bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028bf4:	460c      	mov	r4, r1
 8028bf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8028bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8028bfc:	4299      	cmp	r1, r3
 8028bfe:	d11d      	bne.n	8028c3c <__submore+0x4c>
 8028c00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8028c04:	f7fb fc6e 	bl	80244e4 <_malloc_r>
 8028c08:	b918      	cbnz	r0, 8028c12 <__submore+0x22>
 8028c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8028c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8028c16:	63a3      	str	r3, [r4, #56]	; 0x38
 8028c18:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8028c1c:	6360      	str	r0, [r4, #52]	; 0x34
 8028c1e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8028c22:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8028c26:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8028c2a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8028c2e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8028c32:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8028c36:	6020      	str	r0, [r4, #0]
 8028c38:	2000      	movs	r0, #0
 8028c3a:	e7e8      	b.n	8028c0e <__submore+0x1e>
 8028c3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8028c3e:	0077      	lsls	r7, r6, #1
 8028c40:	463a      	mov	r2, r7
 8028c42:	f000 f857 	bl	8028cf4 <_realloc_r>
 8028c46:	4605      	mov	r5, r0
 8028c48:	2800      	cmp	r0, #0
 8028c4a:	d0de      	beq.n	8028c0a <__submore+0x1a>
 8028c4c:	eb00 0806 	add.w	r8, r0, r6
 8028c50:	4601      	mov	r1, r0
 8028c52:	4632      	mov	r2, r6
 8028c54:	4640      	mov	r0, r8
 8028c56:	f7fb f937 	bl	8023ec8 <memcpy>
 8028c5a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8028c5e:	f8c4 8000 	str.w	r8, [r4]
 8028c62:	e7e9      	b.n	8028c38 <__submore+0x48>

08028c64 <abort>:
 8028c64:	b508      	push	{r3, lr}
 8028c66:	2006      	movs	r0, #6
 8028c68:	f000 f89c 	bl	8028da4 <raise>
 8028c6c:	2001      	movs	r0, #1
 8028c6e:	f7de f8db 	bl	8006e28 <_exit>
 8028c72:	Address 0x0000000008028c72 is out of bounds.


08028c74 <__env_lock>:
 8028c74:	4801      	ldr	r0, [pc, #4]	; (8028c7c <__env_lock+0x8>)
 8028c76:	f7fb b903 	b.w	8023e80 <__retarget_lock_acquire_recursive>
 8028c7a:	bf00      	nop
 8028c7c:	2003001c 	.word	0x2003001c

08028c80 <__env_unlock>:
 8028c80:	4801      	ldr	r0, [pc, #4]	; (8028c88 <__env_unlock+0x8>)
 8028c82:	f7fb b8ff 	b.w	8023e84 <__retarget_lock_release_recursive>
 8028c86:	bf00      	nop
 8028c88:	2003001c 	.word	0x2003001c

08028c8c <_fstat_r>:
 8028c8c:	b538      	push	{r3, r4, r5, lr}
 8028c8e:	4d07      	ldr	r5, [pc, #28]	; (8028cac <_fstat_r+0x20>)
 8028c90:	2300      	movs	r3, #0
 8028c92:	4604      	mov	r4, r0
 8028c94:	4608      	mov	r0, r1
 8028c96:	4611      	mov	r1, r2
 8028c98:	602b      	str	r3, [r5, #0]
 8028c9a:	f7de f8dd 	bl	8006e58 <_fstat>
 8028c9e:	1c43      	adds	r3, r0, #1
 8028ca0:	d102      	bne.n	8028ca8 <_fstat_r+0x1c>
 8028ca2:	682b      	ldr	r3, [r5, #0]
 8028ca4:	b103      	cbz	r3, 8028ca8 <_fstat_r+0x1c>
 8028ca6:	6023      	str	r3, [r4, #0]
 8028ca8:	bd38      	pop	{r3, r4, r5, pc}
 8028caa:	bf00      	nop
 8028cac:	2003002c 	.word	0x2003002c

08028cb0 <_isatty_r>:
 8028cb0:	b538      	push	{r3, r4, r5, lr}
 8028cb2:	4d06      	ldr	r5, [pc, #24]	; (8028ccc <_isatty_r+0x1c>)
 8028cb4:	2300      	movs	r3, #0
 8028cb6:	4604      	mov	r4, r0
 8028cb8:	4608      	mov	r0, r1
 8028cba:	602b      	str	r3, [r5, #0]
 8028cbc:	f7de f8d2 	bl	8006e64 <_isatty>
 8028cc0:	1c43      	adds	r3, r0, #1
 8028cc2:	d102      	bne.n	8028cca <_isatty_r+0x1a>
 8028cc4:	682b      	ldr	r3, [r5, #0]
 8028cc6:	b103      	cbz	r3, 8028cca <_isatty_r+0x1a>
 8028cc8:	6023      	str	r3, [r4, #0]
 8028cca:	bd38      	pop	{r3, r4, r5, pc}
 8028ccc:	2003002c 	.word	0x2003002c

08028cd0 <__ascii_mbtowc>:
 8028cd0:	b082      	sub	sp, #8
 8028cd2:	b901      	cbnz	r1, 8028cd6 <__ascii_mbtowc+0x6>
 8028cd4:	a901      	add	r1, sp, #4
 8028cd6:	b142      	cbz	r2, 8028cea <__ascii_mbtowc+0x1a>
 8028cd8:	b14b      	cbz	r3, 8028cee <__ascii_mbtowc+0x1e>
 8028cda:	7813      	ldrb	r3, [r2, #0]
 8028cdc:	600b      	str	r3, [r1, #0]
 8028cde:	7812      	ldrb	r2, [r2, #0]
 8028ce0:	1e10      	subs	r0, r2, #0
 8028ce2:	bf18      	it	ne
 8028ce4:	2001      	movne	r0, #1
 8028ce6:	b002      	add	sp, #8
 8028ce8:	4770      	bx	lr
 8028cea:	4610      	mov	r0, r2
 8028cec:	e7fb      	b.n	8028ce6 <__ascii_mbtowc+0x16>
 8028cee:	f06f 0001 	mvn.w	r0, #1
 8028cf2:	e7f8      	b.n	8028ce6 <__ascii_mbtowc+0x16>

08028cf4 <_realloc_r>:
 8028cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8028cf8:	4680      	mov	r8, r0
 8028cfa:	4614      	mov	r4, r2
 8028cfc:	460e      	mov	r6, r1
 8028cfe:	b921      	cbnz	r1, 8028d0a <_realloc_r+0x16>
 8028d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8028d04:	4611      	mov	r1, r2
 8028d06:	f7fb bbed 	b.w	80244e4 <_malloc_r>
 8028d0a:	b92a      	cbnz	r2, 8028d18 <_realloc_r+0x24>
 8028d0c:	f7fb fb7e 	bl	802440c <_free_r>
 8028d10:	4625      	mov	r5, r4
 8028d12:	4628      	mov	r0, r5
 8028d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8028d18:	f000 f86d 	bl	8028df6 <_malloc_usable_size_r>
 8028d1c:	4284      	cmp	r4, r0
 8028d1e:	4607      	mov	r7, r0
 8028d20:	d802      	bhi.n	8028d28 <_realloc_r+0x34>
 8028d22:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8028d26:	d812      	bhi.n	8028d4e <_realloc_r+0x5a>
 8028d28:	4621      	mov	r1, r4
 8028d2a:	4640      	mov	r0, r8
 8028d2c:	f7fb fbda 	bl	80244e4 <_malloc_r>
 8028d30:	4605      	mov	r5, r0
 8028d32:	2800      	cmp	r0, #0
 8028d34:	d0ed      	beq.n	8028d12 <_realloc_r+0x1e>
 8028d36:	42bc      	cmp	r4, r7
 8028d38:	4622      	mov	r2, r4
 8028d3a:	4631      	mov	r1, r6
 8028d3c:	bf28      	it	cs
 8028d3e:	463a      	movcs	r2, r7
 8028d40:	f7fb f8c2 	bl	8023ec8 <memcpy>
 8028d44:	4631      	mov	r1, r6
 8028d46:	4640      	mov	r0, r8
 8028d48:	f7fb fb60 	bl	802440c <_free_r>
 8028d4c:	e7e1      	b.n	8028d12 <_realloc_r+0x1e>
 8028d4e:	4635      	mov	r5, r6
 8028d50:	e7df      	b.n	8028d12 <_realloc_r+0x1e>

08028d52 <_raise_r>:
 8028d52:	291f      	cmp	r1, #31
 8028d54:	b538      	push	{r3, r4, r5, lr}
 8028d56:	4604      	mov	r4, r0
 8028d58:	460d      	mov	r5, r1
 8028d5a:	d904      	bls.n	8028d66 <_raise_r+0x14>
 8028d5c:	2316      	movs	r3, #22
 8028d5e:	6003      	str	r3, [r0, #0]
 8028d60:	f04f 30ff 	mov.w	r0, #4294967295
 8028d64:	bd38      	pop	{r3, r4, r5, pc}
 8028d66:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8028d68:	b112      	cbz	r2, 8028d70 <_raise_r+0x1e>
 8028d6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8028d6e:	b94b      	cbnz	r3, 8028d84 <_raise_r+0x32>
 8028d70:	4620      	mov	r0, r4
 8028d72:	f000 f831 	bl	8028dd8 <_getpid_r>
 8028d76:	462a      	mov	r2, r5
 8028d78:	4601      	mov	r1, r0
 8028d7a:	4620      	mov	r0, r4
 8028d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8028d80:	f000 b818 	b.w	8028db4 <_kill_r>
 8028d84:	2b01      	cmp	r3, #1
 8028d86:	d00a      	beq.n	8028d9e <_raise_r+0x4c>
 8028d88:	1c59      	adds	r1, r3, #1
 8028d8a:	d103      	bne.n	8028d94 <_raise_r+0x42>
 8028d8c:	2316      	movs	r3, #22
 8028d8e:	6003      	str	r3, [r0, #0]
 8028d90:	2001      	movs	r0, #1
 8028d92:	e7e7      	b.n	8028d64 <_raise_r+0x12>
 8028d94:	2400      	movs	r4, #0
 8028d96:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8028d9a:	4628      	mov	r0, r5
 8028d9c:	4798      	blx	r3
 8028d9e:	2000      	movs	r0, #0
 8028da0:	e7e0      	b.n	8028d64 <_raise_r+0x12>
 8028da2:	Address 0x0000000008028da2 is out of bounds.


08028da4 <raise>:
 8028da4:	4b02      	ldr	r3, [pc, #8]	; (8028db0 <raise+0xc>)
 8028da6:	4601      	mov	r1, r0
 8028da8:	6818      	ldr	r0, [r3, #0]
 8028daa:	f7ff bfd2 	b.w	8028d52 <_raise_r>
 8028dae:	bf00      	nop
 8028db0:	2000046c 	.word	0x2000046c

08028db4 <_kill_r>:
 8028db4:	b538      	push	{r3, r4, r5, lr}
 8028db6:	4d07      	ldr	r5, [pc, #28]	; (8028dd4 <_kill_r+0x20>)
 8028db8:	2300      	movs	r3, #0
 8028dba:	4604      	mov	r4, r0
 8028dbc:	4608      	mov	r0, r1
 8028dbe:	4611      	mov	r1, r2
 8028dc0:	602b      	str	r3, [r5, #0]
 8028dc2:	f7de f829 	bl	8006e18 <_kill>
 8028dc6:	1c43      	adds	r3, r0, #1
 8028dc8:	d102      	bne.n	8028dd0 <_kill_r+0x1c>
 8028dca:	682b      	ldr	r3, [r5, #0]
 8028dcc:	b103      	cbz	r3, 8028dd0 <_kill_r+0x1c>
 8028dce:	6023      	str	r3, [r4, #0]
 8028dd0:	bd38      	pop	{r3, r4, r5, pc}
 8028dd2:	bf00      	nop
 8028dd4:	2003002c 	.word	0x2003002c

08028dd8 <_getpid_r>:
 8028dd8:	f7de b81c 	b.w	8006e14 <_getpid>

08028ddc <__ascii_wctomb>:
 8028ddc:	b149      	cbz	r1, 8028df2 <__ascii_wctomb+0x16>
 8028dde:	2aff      	cmp	r2, #255	; 0xff
 8028de0:	bf85      	ittet	hi
 8028de2:	238a      	movhi	r3, #138	; 0x8a
 8028de4:	6003      	strhi	r3, [r0, #0]
 8028de6:	700a      	strbls	r2, [r1, #0]
 8028de8:	f04f 30ff 	movhi.w	r0, #4294967295
 8028dec:	bf98      	it	ls
 8028dee:	2001      	movls	r0, #1
 8028df0:	4770      	bx	lr
 8028df2:	4608      	mov	r0, r1
 8028df4:	4770      	bx	lr

08028df6 <_malloc_usable_size_r>:
 8028df6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8028dfa:	1f18      	subs	r0, r3, #4
 8028dfc:	2b00      	cmp	r3, #0
 8028dfe:	bfbc      	itt	lt
 8028e00:	580b      	ldrlt	r3, [r1, r0]
 8028e02:	18c0      	addlt	r0, r0, r3
 8028e04:	4770      	bx	lr
 8028e06:	Address 0x0000000008028e06 is out of bounds.


08028e08 <_init>:
 8028e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e0a:	bf00      	nop
 8028e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e0e:	bc08      	pop	{r3}
 8028e10:	469e      	mov	lr, r3
 8028e12:	4770      	bx	lr

08028e14 <_fini>:
 8028e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028e16:	bf00      	nop
 8028e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8028e1a:	bc08      	pop	{r3}
 8028e1c:	469e      	mov	lr, r3
 8028e1e:	4770      	bx	lr
